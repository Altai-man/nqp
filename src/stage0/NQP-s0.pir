.include 'cclass.pasm'
.include 'except_severity.pasm'
.include 'except_types.pasm'
.include 'iglobals.pasm'
.include 'interpinfo.pasm'
.include 'iterator.pasm'
.include 'sysinfo.pasm'
.include 'stat.pasm'
.include 'datatypes.pasm'

.HLL "nqp"

.loadlib "nqp_group"

.loadlib "nqp_ops"

.loadlib "nqp_bigint_ops"

.loadlib "trans_ops"

.loadlib "io_ops"

.namespace []
.sub "_block1000"  :anon :subid("10_1329260321.776")
    .param pmc param_1002 :slurpy
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 0
    .const 'Sub' $P3820 = "651_1329260321.776" 
    capture_lex $P3820
    .const 'Sub' $P3783 = "643_1329260321.776" 
    capture_lex $P3783
    .const 'Sub' $P2566 = "472_1329260321.776" 
    capture_lex $P2566
    .const 'Sub' $P2511 = "451_1329260321.776" 
    capture_lex $P2511
    .const 'Sub' $P1407 = "72_1329260321.776" 
    capture_lex $P1407
    .const 'Sub' $P1026 = "13_1329260321.776" 
    capture_lex $P1026
    .const 'Sub' $P1020 = "12_1329260321.776" 
    capture_lex $P1020
    .const 'Sub' $P1007 = "11_1329260321.776" 
    capture_lex $P1007
.annotate 'line', 1
    .lex "@ARGS", param_1002
    .lex "GLOBALish", $P1003
    .lex "$?PACKAGE", $P1004
.annotate 'line', 7
    new $P100, "Undef"
    set $P1005, $P100
    .lex "$NEW_SER", $P1005
.annotate 'line', 2958
    .const 'Sub' $P1007 = "11_1329260321.776" 
    newclosure $P1018, $P1007
    set $P1006, $P1018
    .lex "MAIN", $P1006
.annotate 'line', 2981
    .const 'Sub' $P1020 = "12_1329260321.776" 
    newclosure $P1024, $P1020
    set $P1019, $P1024
    .lex "hll-config", $P1019
.annotate 'line', 1
    $P0 = find_dynamic_lex "$*CTXSAVE"
    if null $P0 goto ctxsave_done
    $I0 = can $P0, "ctxsave"
    unless $I0 goto ctxsave_done
    $P0."ctxsave"()
  ctxsave_done:
.annotate 'line', 7
    new $P104, "Float"
    assign $P104, 0
    set $P1005, $P104
.annotate 'line', 9
    .const 'Sub' $P1026 = "13_1329260321.776" 
    capture_lex $P1026
    $P1026()
.annotate 'line', 690
    .const 'Sub' $P1407 = "72_1329260321.776" 
    capture_lex $P1407
    $P1407()
.annotate 'line', 1424
    .const 'Sub' $P2511 = "451_1329260321.776" 
    capture_lex $P2511
    $P2511()
.annotate 'line', 1467
    .const 'Sub' $P2566 = "472_1329260321.776" 
    capture_lex $P2566
    $P2566()
.annotate 'line', 2900
    .const 'Sub' $P3783 = "643_1329260321.776" 
    capture_lex $P3783
    $P3783()
.annotate 'line', 2955
    .const 'Sub' $P3820 = "651_1329260321.776" 
    capture_lex $P3820
    $P3820()
.annotate 'line', 1
    set $P104, $P1006
    set $P104, $P1019
    set $P105, param_1002
    if $P105, if_3823
    set $P104, $P105
    goto if_3823_end
  if_3823:
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P106, "ModuleLoader"
    getinterp $P107
    set $P108, $P107["context"]
    $P106."set_mainline_module"($P108)
    .const '' $P3824 = "11_1329260321.776" 
    set $P109, param_1002
    $P110 = $P3824($P109 :flat)
    set $P104, $P110
  if_3823_end:
    .return ($P104)
    .const 'Sub' $P3826 = "652_1329260321.776" 
    .return ($P3826)
.end


.HLL "nqp"

.namespace []
.sub "" :load :init :subid("post653") :outer("10_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 0
    .const 'Sub' $P1001 = "10_1329260321.776" 
    .local pmc block
    set block, $P1001
    nqp_dynop_setup 
    nqp_bigint_setup 
    getinterp $P112
    get_class $P113, "LexPad"
    get_class $P114, "NQPLexPad"
    $P112."hll_map"($P113, $P114)
    nqp_create_sc $P115, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54"
    .local pmc cur_sc
    set cur_sc, $P115
    cur_sc."set_description"("src\\stage2\\gen\\NQP.pm")
    nqp_get_sc $P116, "__6MODEL_CORE__"
    isnull $I100, $P116
    unless $I100, if_3828_end
    set $S100, "Incorrect pre-compiled version of <unknown> loaded"
    die $S100
  if_3828_end:
    nqp_get_sc_object $P116, "__6MODEL_CORE__", 0
    $P117 = $P116."new_type"("GLOBALish" :named("name"))
    nqp_add_object_to_sc cur_sc, 0, $P117
    .const 'LexInfo' $P3829 = "10_1329260321.776" 
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 0
    $P3829."set_static_lexpad_value"("GLOBALish", $P116)
    .const 'LexInfo' $P3830 = "10_1329260321.776" 
    $P3830."finish_static_lexpad"()
    .const 'LexInfo' $P3831 = "10_1329260321.776" 
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 0
    $P3831."set_static_lexpad_value"("$?PACKAGE", $P116)
    .const 'LexInfo' $P3832 = "10_1329260321.776" 
    $P3832."finish_static_lexpad"()
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P116, "ModuleLoader"
    $P117 = $P116."load_setting"("NQPCORE")
    block."set_outer_ctx"($P117)
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P116, "ModuleLoader"
    nqp_get_sc_object $P117, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 0
    $P116."load_module"("NQPRegex", $P117)
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P116, "ModuleLoader"
    nqp_get_sc_object $P117, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 0
    $P116."load_module"("NQPP6Regex", $P117)
    nqp_get_sc $P116, "F3E24B0F152705B4B497A988620E1A8B7CA5D66B-1329260306.061"
    isnull $I100, $P116
    unless $I100, if_3833_end
    set $S100, "Incorrect pre-compiled version of src\\stage2\\gen\\nqp-mo.pm loaded"
    die $S100
  if_3833_end:
    nqp_get_sc_object $P116, "F3E24B0F152705B4B497A988620E1A8B7CA5D66B-1329260306.061", 55
    $P117 = $P116."new_type"("NQP::World" :named("name"))
    nqp_add_object_to_sc cur_sc, 1, $P117
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    nqp_get_sc_object $P117, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 0
    nqp_get_package_through_who $P118, $P117, "NQP"
    get_who $P119, $P118
    set $P119["World"], $P116
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    nqp_get_sc_object $P119, "F3E24B0F152705B4B497A988620E1A8B7CA5D66B-1329260306.061", 99
    $P120 = $P119."new"("@!BLOCKS" :named("name"))
    $P117."add_attribute"($P118, $P120)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    .const '' $P3834 = "14_1329260321.776" 
    $P117."add_method"($P118, "push_lexpad", $P3834)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    .const '' $P3835 = "15_1329260321.776" 
    $P117."add_method"($P118, "pop_lexpad", $P3835)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    .const '' $P3836 = "16_1329260321.776" 
    $P117."add_method"($P118, "cur_lexpad", $P3836)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    .const '' $P3837 = "17_1329260321.776" 
    $P117."add_method"($P118, "get_legacy_block_list", $P3837)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    .const '' $P3838 = "18_1329260321.776" 
    $P117."add_method"($P118, "load_setting", $P3838)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    .const '' $P3839 = "20_1329260321.776" 
    $P117."add_method"($P118, "load_module", $P3839)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    .const '' $P3840 = "21_1329260321.776" 
    $P117."add_method"($P118, "install_package_symbol", $P3840)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    .const '' $P3841 = "25_1329260321.776" 
    $P117."add_method"($P118, "install_lexical_symbol", $P3841)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    .const '' $P3842 = "26_1329260321.776" 
    $P117."add_method"($P118, "install_package_routine", $P3842)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    .const '' $P3843 = "27_1329260321.776" 
    $P117."add_method"($P118, "pkg_create_mo", $P3843)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    .const '' $P3844 = "29_1329260321.776" 
    $P117."add_method"($P118, "pkg_add_attribute", $P3844)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    .const '' $P3845 = "33_1329260321.776" 
    $P117."add_method"($P118, "pkg_add_method", $P3845)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    .const '' $P3846 = "37_1329260321.776" 
    $P117."add_method"($P118, "set_routine_signature", $P3846)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    .const '' $P3847 = "42_1329260321.776" 
    $P117."add_method"($P118, "pkg_set_body_block", $P3847)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    .const '' $P3848 = "47_1329260321.776" 
    $P117."add_method"($P118, "pkg_add_parent_or_role", $P3848)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    .const '' $P3849 = "49_1329260321.776" 
    $P117."add_method"($P118, "pkg_add_parrot_vtable_handler_mapping", $P3849)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    .const '' $P3850 = "51_1329260321.776" 
    $P117."add_method"($P118, "pkg_compose", $P3850)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    .const '' $P3851 = "53_1329260321.776" 
    $P117."add_method"($P118, "to_past", $P3851)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    .const '' $P3852 = "60_1329260321.776" 
    $P117."add_method"($P118, "is_lexical", $P3852)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    .const '' $P3853 = "61_1329260321.776" 
    $P117."add_method"($P118, "is_package", $P3853)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    .const '' $P3854 = "62_1329260321.776" 
    $P117."add_method"($P118, "is_scope", $P3854)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    .const '' $P3855 = "64_1329260321.776" 
    $P117."add_method"($P118, "known_sym", $P3855)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    .const '' $P3856 = "66_1329260321.776" 
    $P117."add_method"($P118, "find_sym", $P3856)
    .const 'LexInfo' $P3857 = "13_1329260321.776" 
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    $P3857."set_static_lexpad_value"("$?PACKAGE", $P116)
    .const 'LexInfo' $P3858 = "13_1329260321.776" 
    $P3858."finish_static_lexpad"()
    .const 'LexInfo' $P3859 = "13_1329260321.776" 
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    $P3859."set_static_lexpad_value"("$?CLASS", $P116)
    .const 'LexInfo' $P3860 = "13_1329260321.776" 
    $P3860."finish_static_lexpad"()
    nqp_get_sc $P116, "876E116BE302376F7722A4391725308FCA8A04FA-1329260309.34"
    isnull $I100, $P116
    unless $I100, if_3861_end
    set $S100, "Incorrect pre-compiled version of src\\stage2\\gen\\NQPHLL.pm loaded"
    die $S100
  if_3861_end:
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    nqp_get_sc_object $P119, "876E116BE302376F7722A4391725308FCA8A04FA-1329260309.34", 198
    $P117."add_parent"($P118, $P119)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 1
    $P117."compose"($P118)
    nqp_get_sc_object $P116, "F3E24B0F152705B4B497A988620E1A8B7CA5D66B-1329260306.061", 55
    $P117 = $P116."new_type"("NQP::Grammar" :named("name"))
    nqp_add_object_to_sc cur_sc, 25, $P117
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    nqp_get_sc_object $P117, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 0
    nqp_get_package_through_who $P118, $P117, "NQP"
    get_who $P119, $P118
    set $P119["Grammar"], $P116
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3862 = "73_1329260321.776" 
    $P117."add_method"($P118, "TOP", $P3862)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3863 = "74_1329260321.776" 
    $P117."add_method"($P118, "identifier", $P3863)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3864 = "75_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__identifier", $P3864)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3865 = "76_1329260321.776" 
    $P117."add_method"($P118, "name", $P3865)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3866 = "77_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__name", $P3866)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3867 = "78_1329260321.776" 
    $P117."add_method"($P118, "deflongname", $P3867)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3868 = "79_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__deflongname", $P3868)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3869 = "80_1329260321.776" 
    $P117."add_method"($P118, "ENDSTMT", $P3869)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3870 = "81_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__ENDSTMT", $P3870)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3871 = "82_1329260321.776" 
    $P117."add_method"($P118, "ws", $P3871)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3872 = "83_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__ws", $P3872)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3873 = "84_1329260321.776" 
    $P117."add_method"($P118, "unv", $P3873)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3874 = "86_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__unv", $P3874)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3875 = "87_1329260321.776" 
    $P117."add_method"($P118, "pod_comment", $P3875)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3876 = "89_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__pod_comment", $P3876)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3877 = "90_1329260321.776" 
    $P117."add_method"($P118, "comp_unit", $P3877)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3878 = "91_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__comp_unit", $P3878)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3879 = "92_1329260321.776" 
    $P117."add_method"($P118, "statementlist", $P3879)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3880 = "93_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__statementlist", $P3880)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3881 = "94_1329260321.776" 
    $P117."add_method"($P118, "statement", $P3881)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3882 = "96_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__statement", $P3882)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3883 = "97_1329260321.776" 
    $P117."add_method"($P118, "eat_terminator", $P3883)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3884 = "98_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__eat_terminator", $P3884)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3885 = "99_1329260321.776" 
    $P117."add_method"($P118, "xblock", $P3885)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3886 = "100_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__xblock", $P3886)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3887 = "101_1329260321.776" 
    $P117."add_method"($P118, "pblock", $P3887)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3888 = "102_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__pblock", $P3888)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3889 = "103_1329260321.776" 
    $P117."add_method"($P118, "lambda", $P3889)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3890 = "104_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__lambda", $P3890)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3891 = "105_1329260321.776" 
    $P117."add_method"($P118, "block", $P3891)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3892 = "106_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__block", $P3892)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3893 = "107_1329260321.776" 
    $P117."add_method"($P118, "blockoid", $P3893)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3894 = "108_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__blockoid", $P3894)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3895 = "109_1329260321.776" 
    $P117."add_method"($P118, "newpad", $P3895)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3896 = "110_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__newpad", $P3896)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3897 = "111_1329260321.776" 
    $P117."add_method"($P118, "outerctx", $P3897)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3898 = "112_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__outerctx", $P3898)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3899 = "113_1329260321.776" 
    $P117."add_method"($P118, "GLOBALish", $P3899)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3900 = "114_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__GLOBALish", $P3900)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3901 = "115_1329260321.776" 
    $P117."add_method"($P118, "finishpad", $P3901)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3902 = "116_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__finishpad", $P3902)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3903 = "117_1329260321.776" 
    $P117."add_method"($P118, "you_are_here", $P3903)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3904 = "118_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__you_are_here", $P3904)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3905 = "119_1329260321.776" 
    $P117."add_method"($P118, "terminator", $P3905)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3906 = "120_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__terminator", $P3906)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3907 = "121_1329260321.776" 
    $P117."add_method"($P118, "terminator:sym<;>", $P3907)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3908 = "122_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__terminator:sym<;>", $P3908)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3909 = "123_1329260321.776" 
    $P117."add_method"($P118, "terminator:sym<}>", $P3909)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3910 = "124_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__terminator:sym<}>", $P3910)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3911 = "125_1329260321.776" 
    $P117."add_method"($P118, "statement_control", $P3911)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3912 = "126_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__statement_control", $P3912)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3913 = "127_1329260321.776" 
    $P117."add_method"($P118, "statement_control:sym<use>", $P3913)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3914 = "128_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__statement_control:sym<use>", $P3914)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3915 = "129_1329260321.776" 
    $P117."add_method"($P118, "statement_control:sym<if>", $P3915)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3916 = "130_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__statement_control:sym<if>", $P3916)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3917 = "131_1329260321.776" 
    $P117."add_method"($P118, "statement_control:sym<unless>", $P3917)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3918 = "133_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__statement_control:sym<unless>", $P3918)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3919 = "134_1329260321.776" 
    $P117."add_method"($P118, "statement_control:sym<while>", $P3919)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3920 = "135_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__statement_control:sym<while>", $P3920)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3921 = "136_1329260321.776" 
    $P117."add_method"($P118, "statement_control:sym<repeat>", $P3921)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3922 = "137_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__statement_control:sym<repeat>", $P3922)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3923 = "138_1329260321.776" 
    $P117."add_method"($P118, "statement_control:sym<for>", $P3923)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3924 = "139_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__statement_control:sym<for>", $P3924)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3925 = "140_1329260321.776" 
    $P117."add_method"($P118, "statement_control:sym<CATCH>", $P3925)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3926 = "141_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__statement_control:sym<CATCH>", $P3926)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3927 = "142_1329260321.776" 
    $P117."add_method"($P118, "statement_control:sym<CONTROL>", $P3927)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3928 = "143_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__statement_control:sym<CONTROL>", $P3928)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3929 = "144_1329260321.776" 
    $P117."add_method"($P118, "statement_prefix", $P3929)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3930 = "145_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__statement_prefix", $P3930)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3931 = "146_1329260321.776" 
    $P117."add_method"($P118, "statement_prefix:sym<INIT>", $P3931)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3932 = "147_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__statement_prefix:sym<INIT>", $P3932)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3933 = "148_1329260321.776" 
    $P117."add_method"($P118, "statement_prefix:sym<try>", $P3933)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3934 = "149_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__statement_prefix:sym<try>", $P3934)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3935 = "150_1329260321.776" 
    $P117."add_method"($P118, "blorst", $P3935)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3936 = "151_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__blorst", $P3936)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3937 = "152_1329260321.776" 
    $P117."add_method"($P118, "statement_mod_cond", $P3937)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3938 = "153_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__statement_mod_cond", $P3938)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3939 = "154_1329260321.776" 
    $P117."add_method"($P118, "statement_mod_cond:sym<if>", $P3939)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3940 = "155_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__statement_mod_cond:sym<if>", $P3940)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3941 = "156_1329260321.776" 
    $P117."add_method"($P118, "statement_mod_cond:sym<unless>", $P3941)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3942 = "157_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__statement_mod_cond:sym<unless>", $P3942)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3943 = "158_1329260321.776" 
    $P117."add_method"($P118, "statement_mod_loop", $P3943)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3944 = "159_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__statement_mod_loop", $P3944)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3945 = "160_1329260321.776" 
    $P117."add_method"($P118, "statement_mod_loop:sym<while>", $P3945)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3946 = "161_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__statement_mod_loop:sym<while>", $P3946)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3947 = "162_1329260321.776" 
    $P117."add_method"($P118, "statement_mod_loop:sym<until>", $P3947)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3948 = "163_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__statement_mod_loop:sym<until>", $P3948)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3949 = "164_1329260321.776" 
    $P117."add_method"($P118, "statement_mod_loop:sym<for>", $P3949)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3950 = "165_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__statement_mod_loop:sym<for>", $P3950)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3951 = "166_1329260321.776" 
    $P117."add_method"($P118, "term:sym<fatarrow>", $P3951)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3952 = "167_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__term:sym<fatarrow>", $P3952)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3953 = "168_1329260321.776" 
    $P117."add_method"($P118, "term:sym<colonpair>", $P3953)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3954 = "169_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__term:sym<colonpair>", $P3954)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3955 = "170_1329260321.776" 
    $P117."add_method"($P118, "term:sym<variable>", $P3955)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3956 = "171_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__term:sym<variable>", $P3956)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3957 = "172_1329260321.776" 
    $P117."add_method"($P118, "term:sym<package_declarator>", $P3957)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3958 = "173_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__term:sym<package_declarator>", $P3958)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3959 = "174_1329260321.776" 
    $P117."add_method"($P118, "term:sym<scope_declarator>", $P3959)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3960 = "175_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__term:sym<scope_declarator>", $P3960)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3961 = "176_1329260321.776" 
    $P117."add_method"($P118, "term:sym<routine_declarator>", $P3961)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3962 = "177_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__term:sym<routine_declarator>", $P3962)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3963 = "178_1329260321.776" 
    $P117."add_method"($P118, "term:sym<multi_declarator>", $P3963)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3964 = "181_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__term:sym<multi_declarator>", $P3964)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3965 = "182_1329260321.776" 
    $P117."add_method"($P118, "term:sym<regex_declarator>", $P3965)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3966 = "183_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__term:sym<regex_declarator>", $P3966)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3967 = "184_1329260321.776" 
    $P117."add_method"($P118, "term:sym<statement_prefix>", $P3967)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3968 = "185_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__term:sym<statement_prefix>", $P3968)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3969 = "186_1329260321.776" 
    $P117."add_method"($P118, "term:sym<lambda>", $P3969)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3970 = "187_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__term:sym<lambda>", $P3970)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3971 = "188_1329260321.776" 
    $P117."add_method"($P118, "fatarrow", $P3971)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3972 = "189_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__fatarrow", $P3972)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3973 = "190_1329260321.776" 
    $P117."add_method"($P118, "colonpair", $P3973)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3974 = "191_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__colonpair", $P3974)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3975 = "192_1329260321.776" 
    $P117."add_method"($P118, "variable", $P3975)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3976 = "193_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__variable", $P3976)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3977 = "194_1329260321.776" 
    $P117."add_method"($P118, "sigil", $P3977)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3978 = "195_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__sigil", $P3978)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3979 = "196_1329260321.776" 
    $P117."add_method"($P118, "twigil", $P3979)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3980 = "197_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__twigil", $P3980)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3981 = "198_1329260321.776" 
    $P117."add_method"($P118, "package_declarator", $P3981)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3982 = "199_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__package_declarator", $P3982)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3983 = "200_1329260321.776" 
    $P117."add_method"($P118, "package_declarator:sym<module>", $P3983)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3984 = "201_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__package_declarator:sym<module>", $P3984)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3985 = "202_1329260321.776" 
    $P117."add_method"($P118, "package_declarator:sym<knowhow>", $P3985)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3986 = "203_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__package_declarator:sym<knowhow>", $P3986)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3987 = "204_1329260321.776" 
    $P117."add_method"($P118, "package_declarator:sym<class>", $P3987)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3988 = "205_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__package_declarator:sym<class>", $P3988)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3989 = "206_1329260321.776" 
    $P117."add_method"($P118, "package_declarator:sym<grammar>", $P3989)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3990 = "207_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__package_declarator:sym<grammar>", $P3990)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3991 = "208_1329260321.776" 
    $P117."add_method"($P118, "package_declarator:sym<role>", $P3991)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3992 = "209_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__package_declarator:sym<role>", $P3992)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3993 = "210_1329260321.776" 
    $P117."add_method"($P118, "package_declarator:sym<native>", $P3993)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3994 = "211_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__package_declarator:sym<native>", $P3994)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3995 = "212_1329260321.776" 
    $P117."add_method"($P118, "package_declarator:sym<stub>", $P3995)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3996 = "213_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__package_declarator:sym<stub>", $P3996)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3997 = "214_1329260321.776" 
    $P117."add_method"($P118, "package_def", $P3997)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3998 = "216_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__package_def", $P3998)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P3999 = "217_1329260321.776" 
    $P117."add_method"($P118, "scope_declarator", $P3999)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4000 = "218_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__scope_declarator", $P4000)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4001 = "219_1329260321.776" 
    $P117."add_method"($P118, "scope_declarator:sym<my>", $P4001)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4002 = "220_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__scope_declarator:sym<my>", $P4002)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4003 = "221_1329260321.776" 
    $P117."add_method"($P118, "scope_declarator:sym<our>", $P4003)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4004 = "222_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__scope_declarator:sym<our>", $P4004)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4005 = "223_1329260321.776" 
    $P117."add_method"($P118, "scope_declarator:sym<has>", $P4005)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4006 = "224_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__scope_declarator:sym<has>", $P4006)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4007 = "225_1329260321.776" 
    $P117."add_method"($P118, "scoped", $P4007)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4008 = "226_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__scoped", $P4008)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4009 = "227_1329260321.776" 
    $P117."add_method"($P118, "typename", $P4009)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4010 = "229_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__typename", $P4010)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4011 = "230_1329260321.776" 
    $P117."add_method"($P118, "declarator", $P4011)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4012 = "231_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__declarator", $P4012)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4013 = "232_1329260321.776" 
    $P117."add_method"($P118, "variable_declarator", $P4013)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4014 = "234_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__variable_declarator", $P4014)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4015 = "235_1329260321.776" 
    $P117."add_method"($P118, "routine_declarator", $P4015)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4016 = "236_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__routine_declarator", $P4016)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4017 = "237_1329260321.776" 
    $P117."add_method"($P118, "routine_declarator:sym<sub>", $P4017)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4018 = "238_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__routine_declarator:sym<sub>", $P4018)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4019 = "239_1329260321.776" 
    $P117."add_method"($P118, "routine_declarator:sym<method>", $P4019)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4020 = "240_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__routine_declarator:sym<method>", $P4020)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4021 = "241_1329260321.776" 
    $P117."add_method"($P118, "routine_def", $P4021)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4022 = "242_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__routine_def", $P4022)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4023 = "243_1329260321.776" 
    $P117."add_method"($P118, "method_def", $P4023)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4024 = "245_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__method_def", $P4024)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4025 = "246_1329260321.776" 
    $P117."add_method"($P118, "onlystar", $P4025)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4026 = "248_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__onlystar", $P4026)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4027 = "249_1329260321.776" 
    $P117."add_method"($P118, "multi_declarator", $P4027)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4028 = "250_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__multi_declarator", $P4028)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4029 = "251_1329260321.776" 
    $P117."add_method"($P118, "multi_declarator:sym<multi>", $P4029)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4030 = "252_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__multi_declarator:sym<multi>", $P4030)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4031 = "253_1329260321.776" 
    $P117."add_method"($P118, "multi_declarator:sym<proto>", $P4031)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4032 = "254_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__multi_declarator:sym<proto>", $P4032)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4033 = "255_1329260321.776" 
    $P117."add_method"($P118, "multi_declarator:sym<null>", $P4033)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4034 = "256_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__multi_declarator:sym<null>", $P4034)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4035 = "257_1329260321.776" 
    $P117."add_method"($P118, "signature", $P4035)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4036 = "259_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__signature", $P4036)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4037 = "260_1329260321.776" 
    $P117."add_method"($P118, "parameter", $P4037)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4038 = "261_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__parameter", $P4038)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4039 = "262_1329260321.776" 
    $P117."add_method"($P118, "param_var", $P4039)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4040 = "263_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__param_var", $P4040)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4041 = "264_1329260321.776" 
    $P117."add_method"($P118, "named_param", $P4041)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4042 = "265_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__named_param", $P4042)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4043 = "266_1329260321.776" 
    $P117."add_method"($P118, "default_value", $P4043)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4044 = "267_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__default_value", $P4044)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4045 = "268_1329260321.776" 
    $P117."add_method"($P118, "trait", $P4045)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4046 = "269_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__trait", $P4046)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4047 = "270_1329260321.776" 
    $P117."add_method"($P118, "trait_mod", $P4047)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4048 = "271_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__trait_mod", $P4048)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4049 = "272_1329260321.776" 
    $P117."add_method"($P118, "trait_mod:sym<is>", $P4049)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4050 = "273_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__trait_mod:sym<is>", $P4050)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4051 = "274_1329260321.776" 
    $P117."add_method"($P118, "regex_declarator", $P4051)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4052 = "275_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__regex_declarator", $P4052)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4053 = "276_1329260321.776" 
    $P117."add_method"($P118, "dotty", $P4053)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4054 = "277_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__dotty", $P4054)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4055 = "278_1329260321.776" 
    $P117."add_method"($P118, "term", $P4055)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4056 = "279_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__term", $P4056)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4057 = "280_1329260321.776" 
    $P117."add_method"($P118, "term:sym<self>", $P4057)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4058 = "281_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__term:sym<self>", $P4058)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4059 = "282_1329260321.776" 
    $P117."add_method"($P118, "term:sym<identifier>", $P4059)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4060 = "283_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__term:sym<identifier>", $P4060)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4061 = "284_1329260321.776" 
    $P117."add_method"($P118, "term:sym<name>", $P4061)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4062 = "285_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__term:sym<name>", $P4062)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4063 = "286_1329260321.776" 
    $P117."add_method"($P118, "term:sym<pir::op>", $P4063)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4064 = "287_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__term:sym<pir::op>", $P4064)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4065 = "288_1329260321.776" 
    $P117."add_method"($P118, "term:sym<pir::const>", $P4065)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4066 = "289_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__term:sym<pir::const>", $P4066)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4067 = "290_1329260321.776" 
    $P117."add_method"($P118, "term:sym<nqp::op>", $P4067)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4068 = "291_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__term:sym<nqp::op>", $P4068)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4069 = "292_1329260321.776" 
    $P117."add_method"($P118, "term:sym<onlystar>", $P4069)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4070 = "294_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__term:sym<onlystar>", $P4070)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4071 = "295_1329260321.776" 
    $P117."add_method"($P118, "args", $P4071)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4072 = "296_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__args", $P4072)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4073 = "297_1329260321.776" 
    $P117."add_method"($P118, "arglist", $P4073)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4074 = "298_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__arglist", $P4074)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4075 = "299_1329260321.776" 
    $P117."add_method"($P118, "term:sym<value>", $P4075)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4076 = "300_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__term:sym<value>", $P4076)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4077 = "301_1329260321.776" 
    $P117."add_method"($P118, "value", $P4077)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4078 = "302_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__value", $P4078)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4079 = "303_1329260321.776" 
    $P117."add_method"($P118, "number", $P4079)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4080 = "304_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__number", $P4080)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4081 = "305_1329260321.776" 
    $P117."add_method"($P118, "quote", $P4081)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4082 = "306_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__quote", $P4082)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4083 = "307_1329260321.776" 
    $P117."add_method"($P118, "quote:sym<apos>", $P4083)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4084 = "308_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__quote:sym<apos>", $P4084)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4085 = "309_1329260321.776" 
    $P117."add_method"($P118, "quote:sym<dblq>", $P4085)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4086 = "310_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__quote:sym<dblq>", $P4086)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4087 = "311_1329260321.776" 
    $P117."add_method"($P118, "quote:sym<q>", $P4087)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4088 = "312_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__quote:sym<q>", $P4088)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4089 = "313_1329260321.776" 
    $P117."add_method"($P118, "quote:sym<qq>", $P4089)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4090 = "314_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__quote:sym<qq>", $P4090)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4091 = "315_1329260321.776" 
    $P117."add_method"($P118, "quote:sym<Q>", $P4091)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4092 = "316_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__quote:sym<Q>", $P4092)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4093 = "317_1329260321.776" 
    $P117."add_method"($P118, "quote:sym<Q:PIR>", $P4093)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4094 = "318_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__quote:sym<Q:PIR>", $P4094)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4095 = "319_1329260321.776" 
    $P117."add_method"($P118, "quote:sym</ />", $P4095)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4096 = "320_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__quote:sym</ />", $P4096)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4097 = "321_1329260321.776" 
    $P117."add_method"($P118, "quote_escape:sym<$>", $P4097)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4098 = "322_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__quote_escape:sym<$>", $P4098)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4099 = "323_1329260321.776" 
    $P117."add_method"($P118, "quote_escape:sym<{ }>", $P4099)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4100 = "324_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__quote_escape:sym<{ }>", $P4100)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4101 = "325_1329260321.776" 
    $P117."add_method"($P118, "quote_escape:sym<esc>", $P4101)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4102 = "326_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__quote_escape:sym<esc>", $P4102)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4103 = "327_1329260321.776" 
    $P117."add_method"($P118, "circumfix:sym<( )>", $P4103)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4104 = "328_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__circumfix:sym<( )>", $P4104)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4105 = "329_1329260321.776" 
    $P117."add_method"($P118, "circumfix:sym<[ ]>", $P4105)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4106 = "330_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__circumfix:sym<[ ]>", $P4106)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4107 = "331_1329260321.776" 
    $P117."add_method"($P118, "circumfix:sym<ang>", $P4107)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4108 = "332_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__circumfix:sym<ang>", $P4108)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4109 = "333_1329260321.776" 
    $P117."add_method"($P118, unicode:"circumfix:sym<\x{ab} \x{bb}>", $P4109)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4110 = "334_1329260321.776" 
    $P117."add_method"($P118, unicode:"!PREFIX__circumfix:sym<\x{ab} \x{bb}>", $P4110)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4111 = "335_1329260321.776" 
    $P117."add_method"($P118, "circumfix:sym<{ }>", $P4111)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4112 = "336_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__circumfix:sym<{ }>", $P4112)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4113 = "337_1329260321.776" 
    $P117."add_method"($P118, "circumfix:sym<sigil>", $P4113)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4114 = "338_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__circumfix:sym<sigil>", $P4114)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4115 = "339_1329260321.776" 
    $P117."add_method"($P118, "semilist", $P4115)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4116 = "340_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__semilist", $P4116)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4117 = "341_1329260321.776" 
    $P117."add_method"($P118, "infixish", $P4117)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4118 = "342_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__infixish", $P4118)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4119 = "343_1329260321.776" 
    $P117."add_method"($P118, "infixstopper", $P4119)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4120 = "344_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__infixstopper", $P4120)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4121 = "345_1329260321.776" 
    $P117."add_method"($P118, "postcircumfix:sym<[ ]>", $P4121)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4122 = "346_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__postcircumfix:sym<[ ]>", $P4122)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4123 = "347_1329260321.776" 
    $P117."add_method"($P118, "postcircumfix:sym<{ }>", $P4123)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4124 = "348_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__postcircumfix:sym<{ }>", $P4124)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4125 = "349_1329260321.776" 
    $P117."add_method"($P118, "postcircumfix:sym<ang>", $P4125)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4126 = "350_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__postcircumfix:sym<ang>", $P4126)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4127 = "351_1329260321.776" 
    $P117."add_method"($P118, "postcircumfix:sym<( )>", $P4127)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4128 = "352_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__postcircumfix:sym<( )>", $P4128)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4129 = "353_1329260321.776" 
    $P117."add_method"($P118, "postfix:sym<.>", $P4129)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4130 = "354_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__postfix:sym<.>", $P4130)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4131 = "355_1329260321.776" 
    $P117."add_method"($P118, "prefix:sym<++>", $P4131)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4132 = "356_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__prefix:sym<++>", $P4132)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4133 = "357_1329260321.776" 
    $P117."add_method"($P118, "prefix:sym<-->", $P4133)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4134 = "358_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__prefix:sym<-->", $P4134)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4135 = "359_1329260321.776" 
    $P117."add_method"($P118, "postfix:sym<++>", $P4135)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4136 = "360_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__postfix:sym<++>", $P4136)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4137 = "361_1329260321.776" 
    $P117."add_method"($P118, "postfix:sym<-->", $P4137)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4138 = "362_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__postfix:sym<-->", $P4138)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4139 = "363_1329260321.776" 
    $P117."add_method"($P118, "infix:sym<**>", $P4139)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4140 = "364_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__infix:sym<**>", $P4140)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4141 = "365_1329260321.776" 
    $P117."add_method"($P118, "prefix:sym<+>", $P4141)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4142 = "366_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__prefix:sym<+>", $P4142)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4143 = "367_1329260321.776" 
    $P117."add_method"($P118, "prefix:sym<~>", $P4143)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4144 = "368_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__prefix:sym<~>", $P4144)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4145 = "369_1329260321.776" 
    $P117."add_method"($P118, "prefix:sym<->", $P4145)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4146 = "370_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__prefix:sym<->", $P4146)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4147 = "371_1329260321.776" 
    $P117."add_method"($P118, "prefix:sym<?>", $P4147)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4148 = "372_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__prefix:sym<?>", $P4148)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4149 = "373_1329260321.776" 
    $P117."add_method"($P118, "prefix:sym<!>", $P4149)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4150 = "374_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__prefix:sym<!>", $P4150)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4151 = "375_1329260321.776" 
    $P117."add_method"($P118, "prefix:sym<|>", $P4151)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4152 = "376_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__prefix:sym<|>", $P4152)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4153 = "377_1329260321.776" 
    $P117."add_method"($P118, "infix:sym<*>", $P4153)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4154 = "378_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__infix:sym<*>", $P4154)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4155 = "379_1329260321.776" 
    $P117."add_method"($P118, "infix:sym</>", $P4155)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4156 = "380_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__infix:sym</>", $P4156)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4157 = "381_1329260321.776" 
    $P117."add_method"($P118, "infix:sym<%>", $P4157)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4158 = "382_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__infix:sym<%>", $P4158)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4159 = "383_1329260321.776" 
    $P117."add_method"($P118, "infix:sym<+&>", $P4159)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4160 = "384_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__infix:sym<+&>", $P4160)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4161 = "385_1329260321.776" 
    $P117."add_method"($P118, "infix:sym<+>", $P4161)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4162 = "386_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__infix:sym<+>", $P4162)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4163 = "387_1329260321.776" 
    $P117."add_method"($P118, "infix:sym<->", $P4163)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4164 = "388_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__infix:sym<->", $P4164)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4165 = "389_1329260321.776" 
    $P117."add_method"($P118, "infix:sym<+|>", $P4165)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4166 = "390_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__infix:sym<+|>", $P4166)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4167 = "391_1329260321.776" 
    $P117."add_method"($P118, "infix:sym<+^>", $P4167)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4168 = "392_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__infix:sym<+^>", $P4168)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4169 = "393_1329260321.776" 
    $P117."add_method"($P118, "infix:sym<~>", $P4169)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4170 = "394_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__infix:sym<~>", $P4170)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4171 = "395_1329260321.776" 
    $P117."add_method"($P118, "infix:sym<==>", $P4171)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4172 = "396_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__infix:sym<==>", $P4172)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4173 = "397_1329260321.776" 
    $P117."add_method"($P118, "infix:sym<!=>", $P4173)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4174 = "398_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__infix:sym<!=>", $P4174)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4175 = "399_1329260321.776" 
    $P117."add_method"($P118, "infix:sym<<=>", $P4175)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4176 = "400_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__infix:sym<<=>", $P4176)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4177 = "401_1329260321.776" 
    $P117."add_method"($P118, "infix:sym<>=>", $P4177)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4178 = "402_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__infix:sym<>=>", $P4178)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4179 = "403_1329260321.776" 
    $P117."add_method"($P118, "infix:sym<<>", $P4179)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4180 = "404_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__infix:sym<<>", $P4180)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4181 = "405_1329260321.776" 
    $P117."add_method"($P118, "infix:sym<>>", $P4181)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4182 = "406_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__infix:sym<>>", $P4182)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4183 = "407_1329260321.776" 
    $P117."add_method"($P118, "infix:sym<eq>", $P4183)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4184 = "408_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__infix:sym<eq>", $P4184)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4185 = "409_1329260321.776" 
    $P117."add_method"($P118, "infix:sym<ne>", $P4185)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4186 = "410_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__infix:sym<ne>", $P4186)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4187 = "411_1329260321.776" 
    $P117."add_method"($P118, "infix:sym<le>", $P4187)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4188 = "412_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__infix:sym<le>", $P4188)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4189 = "413_1329260321.776" 
    $P117."add_method"($P118, "infix:sym<ge>", $P4189)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4190 = "414_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__infix:sym<ge>", $P4190)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4191 = "415_1329260321.776" 
    $P117."add_method"($P118, "infix:sym<lt>", $P4191)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4192 = "416_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__infix:sym<lt>", $P4192)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4193 = "417_1329260321.776" 
    $P117."add_method"($P118, "infix:sym<gt>", $P4193)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4194 = "418_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__infix:sym<gt>", $P4194)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4195 = "419_1329260321.776" 
    $P117."add_method"($P118, "infix:sym<=:=>", $P4195)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4196 = "420_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__infix:sym<=:=>", $P4196)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4197 = "421_1329260321.776" 
    $P117."add_method"($P118, "infix:sym<~~>", $P4197)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4198 = "422_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__infix:sym<~~>", $P4198)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4199 = "423_1329260321.776" 
    $P117."add_method"($P118, "infix:sym<&&>", $P4199)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4200 = "424_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__infix:sym<&&>", $P4200)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4201 = "425_1329260321.776" 
    $P117."add_method"($P118, "infix:sym<||>", $P4201)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4202 = "426_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__infix:sym<||>", $P4202)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4203 = "427_1329260321.776" 
    $P117."add_method"($P118, "infix:sym<//>", $P4203)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4204 = "428_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__infix:sym<//>", $P4204)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4205 = "429_1329260321.776" 
    $P117."add_method"($P118, "infix:sym<?? !!>", $P4205)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4206 = "430_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__infix:sym<?? !!>", $P4206)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4207 = "431_1329260321.776" 
    $P117."add_method"($P118, "infix:sym<=>", $P4207)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4208 = "432_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__infix:sym<=>", $P4208)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4209 = "433_1329260321.776" 
    $P117."add_method"($P118, "infix:sym<:=>", $P4209)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4210 = "434_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__infix:sym<:=>", $P4210)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4211 = "435_1329260321.776" 
    $P117."add_method"($P118, "infix:sym<::=>", $P4211)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4212 = "436_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__infix:sym<::=>", $P4212)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4213 = "437_1329260321.776" 
    $P117."add_method"($P118, "infix:sym<,>", $P4213)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4214 = "438_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__infix:sym<,>", $P4214)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4215 = "439_1329260321.776" 
    $P117."add_method"($P118, "prefix:sym<return>", $P4215)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4216 = "441_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__prefix:sym<return>", $P4216)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4217 = "442_1329260321.776" 
    $P117."add_method"($P118, "prefix:sym<make>", $P4217)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4218 = "443_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__prefix:sym<make>", $P4218)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4219 = "444_1329260321.776" 
    $P117."add_method"($P118, "term:sym<last>", $P4219)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4220 = "445_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__term:sym<last>", $P4220)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4221 = "446_1329260321.776" 
    $P117."add_method"($P118, "term:sym<next>", $P4221)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4222 = "447_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__term:sym<next>", $P4222)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4223 = "448_1329260321.776" 
    $P117."add_method"($P118, "term:sym<redo>", $P4223)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4224 = "449_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__term:sym<redo>", $P4224)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    .const '' $P4225 = "450_1329260321.776" 
    $P117."add_method"($P118, "smartmatch", $P4225)
    .const 'LexInfo' $P4226 = "72_1329260321.776" 
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    $P4226."set_static_lexpad_value"("$?PACKAGE", $P116)
    .const 'LexInfo' $P4227 = "72_1329260321.776" 
    $P4227."finish_static_lexpad"()
    .const 'LexInfo' $P4228 = "72_1329260321.776" 
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    $P4228."set_static_lexpad_value"("$?CLASS", $P116)
    .const 'LexInfo' $P4229 = "72_1329260321.776" 
    $P4229."finish_static_lexpad"()
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    nqp_get_sc_object $P119, "876E116BE302376F7722A4391725308FCA8A04FA-1329260309.34", 1
    $P117."add_parent"($P118, $P119)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 25
    $P117."compose"($P118)
    nqp_get_sc_object $P116, "F3E24B0F152705B4B497A988620E1A8B7CA5D66B-1329260306.061", 55
    $P117 = $P116."new_type"("NQP::Regex" :named("name"))
    nqp_add_object_to_sc cur_sc, 390, $P117
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 390
    nqp_get_sc_object $P117, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 0
    nqp_get_package_through_who $P118, $P117, "NQP"
    get_who $P119, $P118
    set $P119["Regex"], $P116
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 390
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 390
    .const '' $P4230 = "452_1329260321.776" 
    $P117."add_method"($P118, "metachar:sym<:my>", $P4230)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 390
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 390
    .const '' $P4231 = "454_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__metachar:sym<:my>", $P4231)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 390
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 390
    .const '' $P4232 = "455_1329260321.776" 
    $P117."add_method"($P118, "metachar:sym<{ }>", $P4232)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 390
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 390
    .const '' $P4233 = "456_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__metachar:sym<{ }>", $P4233)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 390
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 390
    .const '' $P4234 = "457_1329260321.776" 
    $P117."add_method"($P118, "metachar:sym<nqpvar>", $P4234)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 390
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 390
    .const '' $P4235 = "459_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__metachar:sym<nqpvar>", $P4235)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 390
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 390
    .const '' $P4236 = "460_1329260321.776" 
    $P117."add_method"($P118, "assertion:sym<{ }>", $P4236)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 390
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 390
    .const '' $P4237 = "461_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__assertion:sym<{ }>", $P4237)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 390
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 390
    .const '' $P4238 = "462_1329260321.776" 
    $P117."add_method"($P118, "assertion:sym<?{ }>", $P4238)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 390
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 390
    .const '' $P4239 = "464_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__assertion:sym<?{ }>", $P4239)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 390
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 390
    .const '' $P4240 = "465_1329260321.776" 
    $P117."add_method"($P118, "assertion:sym<name>", $P4240)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 390
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 390
    .const '' $P4241 = "467_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__assertion:sym<name>", $P4241)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 390
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 390
    .const '' $P4242 = "468_1329260321.776" 
    $P117."add_method"($P118, "assertion:sym<var>", $P4242)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 390
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 390
    .const '' $P4243 = "469_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__assertion:sym<var>", $P4243)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 390
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 390
    .const '' $P4244 = "470_1329260321.776" 
    $P117."add_method"($P118, "codeblock", $P4244)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 390
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 390
    .const '' $P4245 = "471_1329260321.776" 
    $P117."add_method"($P118, "!PREFIX__codeblock", $P4245)
    .const 'LexInfo' $P4246 = "451_1329260321.776" 
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 390
    $P4246."set_static_lexpad_value"("$?PACKAGE", $P116)
    .const 'LexInfo' $P4247 = "451_1329260321.776" 
    $P4247."finish_static_lexpad"()
    .const 'LexInfo' $P4248 = "451_1329260321.776" 
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 390
    $P4248."set_static_lexpad_value"("$?CLASS", $P116)
    .const 'LexInfo' $P4249 = "451_1329260321.776" 
    $P4249."finish_static_lexpad"()
    nqp_get_sc $P116, "9C3392566B1FBE8D8EE209AF5C35DE0C9294CD76-1329260313.659"
    isnull $I100, $P116
    unless $I100, if_4250_end
    set $S100, "Incorrect pre-compiled version of src\\stage2\\gen\\NQPP6Regex.pm loaded"
    die $S100
  if_4250_end:
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 390
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 390
    nqp_get_sc_object $P119, "9C3392566B1FBE8D8EE209AF5C35DE0C9294CD76-1329260313.659", 1
    $P117."add_parent"($P118, $P119)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 390
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 390
    $P117."compose"($P118)
    nqp_get_sc_object $P116, "F3E24B0F152705B4B497A988620E1A8B7CA5D66B-1329260306.061", 55
    $P117 = $P116."new_type"("NQP::Actions" :named("name"))
    nqp_add_object_to_sc cur_sc, 407, $P117
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    nqp_get_sc_object $P117, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 0
    nqp_get_package_through_who $P118, $P117, "NQP"
    get_who $P119, $P118
    set $P119["Actions"], $P116
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4251 = "489_1329260321.776" 
    $P117."add_method"($P118, "TOP", $P4251)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4252 = "490_1329260321.776" 
    $P117."add_method"($P118, "deflongname", $P4252)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4253 = "491_1329260321.776" 
    $P117."add_method"($P118, "comp_unit", $P4253)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4254 = "493_1329260321.776" 
    $P117."add_method"($P118, "statementlist", $P4254)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4255 = "495_1329260321.776" 
    $P117."add_method"($P118, "statement", $P4255)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4256 = "497_1329260321.776" 
    $P117."add_method"($P118, "xblock", $P4256)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4257 = "498_1329260321.776" 
    $P117."add_method"($P118, "pblock", $P4257)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4258 = "499_1329260321.776" 
    $P117."add_method"($P118, "block", $P4258)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4259 = "500_1329260321.776" 
    $P117."add_method"($P118, "blockoid", $P4259)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4260 = "502_1329260321.776" 
    $P117."add_method"($P118, "newpad", $P4260)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4261 = "503_1329260321.776" 
    $P117."add_method"($P118, "outerctx", $P4261)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4262 = "505_1329260321.776" 
    $P117."add_method"($P118, "GLOBALish", $P4262)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4263 = "506_1329260321.776" 
    $P117."add_method"($P118, "you_are_here", $P4263)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4264 = "507_1329260321.776" 
    $P117."add_method"($P118, "statement_control:sym<use>", $P4264)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4265 = "508_1329260321.776" 
    $P117."add_method"($P118, "statement_control:sym<if>", $P4265)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4266 = "510_1329260321.776" 
    $P117."add_method"($P118, "statement_control:sym<unless>", $P4266)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4267 = "511_1329260321.776" 
    $P117."add_method"($P118, "statement_control:sym<while>", $P4267)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4268 = "512_1329260321.776" 
    $P117."add_method"($P118, "statement_control:sym<repeat>", $P4268)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4269 = "513_1329260321.776" 
    $P117."add_method"($P118, "statement_control:sym<for>", $P4269)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4270 = "514_1329260321.776" 
    $P117."add_method"($P118, "statement_control:sym<CATCH>", $P4270)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4271 = "515_1329260321.776" 
    $P117."add_method"($P118, "statement_control:sym<CONTROL>", $P4271)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4272 = "516_1329260321.776" 
    $P117."add_method"($P118, "statement_prefix:sym<INIT>", $P4272)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4273 = "517_1329260321.776" 
    $P117."add_method"($P118, "statement_prefix:sym<try>", $P4273)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4274 = "518_1329260321.776" 
    $P117."add_method"($P118, "blorst", $P4274)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4275 = "519_1329260321.776" 
    $P117."add_method"($P118, "statement_mod_cond:sym<if>", $P4275)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4276 = "520_1329260321.776" 
    $P117."add_method"($P118, "statement_mod_cond:sym<unless>", $P4276)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4277 = "521_1329260321.776" 
    $P117."add_method"($P118, "statement_mod_loop:sym<while>", $P4277)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4278 = "522_1329260321.776" 
    $P117."add_method"($P118, "statement_mod_loop:sym<until>", $P4278)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4279 = "523_1329260321.776" 
    $P117."add_method"($P118, "term:sym<fatarrow>", $P4279)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4280 = "524_1329260321.776" 
    $P117."add_method"($P118, "term:sym<colonpair>", $P4280)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4281 = "525_1329260321.776" 
    $P117."add_method"($P118, "term:sym<variable>", $P4281)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4282 = "526_1329260321.776" 
    $P117."add_method"($P118, "term:sym<package_declarator>", $P4282)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4283 = "527_1329260321.776" 
    $P117."add_method"($P118, "term:sym<scope_declarator>", $P4283)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4284 = "528_1329260321.776" 
    $P117."add_method"($P118, "term:sym<routine_declarator>", $P4284)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4285 = "529_1329260321.776" 
    $P117."add_method"($P118, "term:sym<regex_declarator>", $P4285)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4286 = "530_1329260321.776" 
    $P117."add_method"($P118, "term:sym<statement_prefix>", $P4286)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4287 = "531_1329260321.776" 
    $P117."add_method"($P118, "term:sym<lambda>", $P4287)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4288 = "532_1329260321.776" 
    $P117."add_method"($P118, "fatarrow", $P4288)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4289 = "533_1329260321.776" 
    $P117."add_method"($P118, "colonpair", $P4289)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4290 = "534_1329260321.776" 
    $P117."add_method"($P118, "variable", $P4290)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4291 = "540_1329260321.776" 
    $P117."add_method"($P118, "package_declarator:sym<module>", $P4291)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4292 = "541_1329260321.776" 
    $P117."add_method"($P118, "package_declarator:sym<knowhow>", $P4292)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4293 = "542_1329260321.776" 
    $P117."add_method"($P118, "package_declarator:sym<class>", $P4293)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4294 = "543_1329260321.776" 
    $P117."add_method"($P118, "package_declarator:sym<grammar>", $P4294)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4295 = "544_1329260321.776" 
    $P117."add_method"($P118, "package_declarator:sym<role>", $P4295)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4296 = "545_1329260321.776" 
    $P117."add_method"($P118, "package_declarator:sym<native>", $P4296)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4297 = "546_1329260321.776" 
    $P117."add_method"($P118, "package_declarator:sym<stub>", $P4297)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4298 = "547_1329260321.776" 
    $P117."add_method"($P118, "package_def", $P4298)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4299 = "553_1329260321.776" 
    $P117."add_method"($P118, "scope_declarator:sym<my>", $P4299)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4300 = "554_1329260321.776" 
    $P117."add_method"($P118, "scope_declarator:sym<our>", $P4300)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4301 = "555_1329260321.776" 
    $P117."add_method"($P118, "scope_declarator:sym<has>", $P4301)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4302 = "556_1329260321.776" 
    $P117."add_method"($P118, "scoped", $P4302)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4303 = "557_1329260321.776" 
    $P117."add_method"($P118, "declarator", $P4303)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4304 = "558_1329260321.776" 
    $P117."add_method"($P118, "multi_declarator:sym<multi>", $P4304)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4305 = "559_1329260321.776" 
    $P117."add_method"($P118, "multi_declarator:sym<proto>", $P4305)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4306 = "560_1329260321.776" 
    $P117."add_method"($P118, "multi_declarator:sym<null>", $P4306)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4307 = "561_1329260321.776" 
    $P117."add_method"($P118, "variable_declarator", $P4307)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4308 = "564_1329260321.776" 
    $P117."add_method"($P118, "routine_declarator:sym<sub>", $P4308)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4309 = "565_1329260321.776" 
    $P117."add_method"($P118, "routine_declarator:sym<method>", $P4309)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4310 = "566_1329260321.776" 
    $P117."add_method"($P118, "routine_def", $P4310)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4311 = "574_1329260321.776" 
    $P117."add_method"($P118, "method_def", $P4311)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4312 = "577_1329260321.776" 
    $P117."add_method"($P118, "signature", $P4312)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4313 = "580_1329260321.776" 
    $P117."add_method"($P118, "parameter", $P4313)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4314 = "581_1329260321.776" 
    $P117."add_method"($P118, "param_var", $P4314)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4315 = "582_1329260321.776" 
    $P117."add_method"($P118, "named_param", $P4315)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4316 = "583_1329260321.776" 
    $P117."add_method"($P118, "typename", $P4316)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4317 = "585_1329260321.776" 
    $P117."add_method"($P118, "trait", $P4317)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4318 = "586_1329260321.776" 
    $P117."add_method"($P118, "trait_mod:sym<is>", $P4318)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4319 = "591_1329260321.776" 
    $P117."add_method"($P118, "regex_declarator", $P4319)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4320 = "596_1329260321.776" 
    $P117."add_method"($P118, "dotty", $P4320)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4321 = "597_1329260321.776" 
    $P117."add_method"($P118, "term:sym<self>", $P4321)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4322 = "598_1329260321.776" 
    $P117."add_method"($P118, "term:sym<identifier>", $P4322)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4323 = "599_1329260321.776" 
    $P117."add_method"($P118, "term:sym<name>", $P4323)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4324 = "601_1329260321.776" 
    $P117."add_method"($P118, "term:sym<pir::op>", $P4324)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4325 = "602_1329260321.776" 
    $P117."add_method"($P118, "term:sym<pir::const>", $P4325)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4326 = "603_1329260321.776" 
    $P117."add_method"($P118, "term:sym<nqp::op>", $P4326)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4327 = "604_1329260321.776" 
    $P117."add_method"($P118, "term:sym<onlystar>", $P4327)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4328 = "605_1329260321.776" 
    $P117."add_method"($P118, "args", $P4328)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4329 = "606_1329260321.776" 
    $P117."add_method"($P118, "arglist", $P4329)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4330 = "609_1329260321.776" 
    $P117."add_method"($P118, "term:sym<multi_declarator>", $P4330)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4331 = "610_1329260321.776" 
    $P117."add_method"($P118, "term:sym<value>", $P4331)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4332 = "611_1329260321.776" 
    $P117."add_method"($P118, "circumfix:sym<( )>", $P4332)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4333 = "612_1329260321.776" 
    $P117."add_method"($P118, "circumfix:sym<[ ]>", $P4333)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4334 = "613_1329260321.776" 
    $P117."add_method"($P118, "circumfix:sym<ang>", $P4334)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4335 = "614_1329260321.776" 
    $P117."add_method"($P118, unicode:"circumfix:sym<\x{ab} \x{bb}>", $P4335)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4336 = "615_1329260321.776" 
    $P117."add_method"($P118, "circumfix:sym<{ }>", $P4336)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4337 = "617_1329260321.776" 
    $P117."add_method"($P118, "circumfix:sym<sigil>", $P4337)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4338 = "618_1329260321.776" 
    $P117."add_method"($P118, "semilist", $P4338)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4339 = "619_1329260321.776" 
    $P117."add_method"($P118, "postcircumfix:sym<[ ]>", $P4339)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4340 = "620_1329260321.776" 
    $P117."add_method"($P118, "postcircumfix:sym<{ }>", $P4340)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4341 = "621_1329260321.776" 
    $P117."add_method"($P118, "postcircumfix:sym<ang>", $P4341)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4342 = "622_1329260321.776" 
    $P117."add_method"($P118, "postcircumfix:sym<( )>", $P4342)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4343 = "623_1329260321.776" 
    $P117."add_method"($P118, "value", $P4343)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4344 = "624_1329260321.776" 
    $P117."add_method"($P118, "number", $P4344)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4345 = "625_1329260321.776" 
    $P117."add_method"($P118, "quote:sym<apos>", $P4345)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4346 = "626_1329260321.776" 
    $P117."add_method"($P118, "quote:sym<dblq>", $P4346)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4347 = "627_1329260321.776" 
    $P117."add_method"($P118, "quote:sym<qq>", $P4347)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4348 = "628_1329260321.776" 
    $P117."add_method"($P118, "quote:sym<q>", $P4348)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4349 = "629_1329260321.776" 
    $P117."add_method"($P118, "quote:sym<Q>", $P4349)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4350 = "630_1329260321.776" 
    $P117."add_method"($P118, "quote:sym<Q:PIR>", $P4350)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4351 = "631_1329260321.776" 
    $P117."add_method"($P118, "quote:sym</ />", $P4351)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4352 = "632_1329260321.776" 
    $P117."add_method"($P118, "quote_escape:sym<$>", $P4352)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4353 = "633_1329260321.776" 
    $P117."add_method"($P118, "quote_escape:sym<{ }>", $P4353)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4354 = "634_1329260321.776" 
    $P117."add_method"($P118, "quote_escape:sym<esc>", $P4354)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4355 = "635_1329260321.776" 
    $P117."add_method"($P118, "postfix:sym<.>", $P4355)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4356 = "636_1329260321.776" 
    $P117."add_method"($P118, "postfix:sym<++>", $P4356)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4357 = "637_1329260321.776" 
    $P117."add_method"($P118, "postfix:sym<-->", $P4357)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4358 = "638_1329260321.776" 
    $P117."add_method"($P118, "prefix:sym<make>", $P4358)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4359 = "639_1329260321.776" 
    $P117."add_method"($P118, "term:sym<next>", $P4359)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4360 = "640_1329260321.776" 
    $P117."add_method"($P118, "term:sym<last>", $P4360)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4361 = "641_1329260321.776" 
    $P117."add_method"($P118, "term:sym<redo>", $P4361)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    .const '' $P4362 = "642_1329260321.776" 
    $P117."add_method"($P118, "infix:sym<~~>", $P4362)
    .const 'LexInfo' $P4363 = "472_1329260321.776" 
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    $P4363."set_static_lexpad_value"("$?PACKAGE", $P116)
    .const 'LexInfo' $P4364 = "472_1329260321.776" 
    $P4364."finish_static_lexpad"()
    .const 'LexInfo' $P4365 = "472_1329260321.776" 
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    $P4365."set_static_lexpad_value"("$?CLASS", $P116)
    .const 'LexInfo' $P4366 = "472_1329260321.776" 
    $P4366."finish_static_lexpad"()
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    nqp_get_sc_object $P119, "876E116BE302376F7722A4391725308FCA8A04FA-1329260309.34", 105
    $P117."add_parent"($P118, $P119)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 407
    $P117."compose"($P118)
    nqp_get_sc_object $P116, "F3E24B0F152705B4B497A988620E1A8B7CA5D66B-1329260306.061", 55
    $P117 = $P116."new_type"("NQP::RegexActions" :named("name"))
    nqp_add_object_to_sc cur_sc, 520, $P117
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 520
    nqp_get_sc_object $P117, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 0
    nqp_get_package_through_who $P118, $P117, "NQP"
    get_who $P119, $P118
    set $P119["RegexActions"], $P116
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 520
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 520
    .const '' $P4367 = "644_1329260321.776" 
    $P117."add_method"($P118, "metachar:sym<:my>", $P4367)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 520
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 520
    .const '' $P4368 = "645_1329260321.776" 
    $P117."add_method"($P118, "metachar:sym<{ }>", $P4368)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 520
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 520
    .const '' $P4369 = "646_1329260321.776" 
    $P117."add_method"($P118, "metachar:sym<nqpvar>", $P4369)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 520
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 520
    .const '' $P4370 = "647_1329260321.776" 
    $P117."add_method"($P118, "assertion:sym<{ }>", $P4370)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 520
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 520
    .const '' $P4371 = "648_1329260321.776" 
    $P117."add_method"($P118, "assertion:sym<?{ }>", $P4371)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 520
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 520
    .const '' $P4372 = "649_1329260321.776" 
    $P117."add_method"($P118, "assertion:sym<var>", $P4372)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 520
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 520
    .const '' $P4373 = "650_1329260321.776" 
    $P117."add_method"($P118, "codeblock", $P4373)
    .const 'LexInfo' $P4374 = "643_1329260321.776" 
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 520
    $P4374."set_static_lexpad_value"("$?PACKAGE", $P116)
    .const 'LexInfo' $P4375 = "643_1329260321.776" 
    $P4375."finish_static_lexpad"()
    .const 'LexInfo' $P4376 = "643_1329260321.776" 
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 520
    $P4376."set_static_lexpad_value"("$?CLASS", $P116)
    .const 'LexInfo' $P4377 = "643_1329260321.776" 
    $P4377."finish_static_lexpad"()
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 520
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 520
    nqp_get_sc_object $P119, "9C3392566B1FBE8D8EE209AF5C35DE0C9294CD76-1329260313.659", 145
    $P117."add_parent"($P118, $P119)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 520
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 520
    $P117."compose"($P118)
    nqp_get_sc_object $P116, "F3E24B0F152705B4B497A988620E1A8B7CA5D66B-1329260306.061", 55
    $P117 = $P116."new_type"("NQP::Compiler" :named("name"))
    nqp_add_object_to_sc cur_sc, 528, $P117
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 528
    nqp_get_sc_object $P117, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 0
    nqp_get_package_through_who $P118, $P117, "NQP"
    get_who $P119, $P118
    set $P119["Compiler"], $P116
    .const 'LexInfo' $P4378 = "651_1329260321.776" 
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 528
    $P4378."set_static_lexpad_value"("$?PACKAGE", $P116)
    .const 'LexInfo' $P4379 = "651_1329260321.776" 
    $P4379."finish_static_lexpad"()
    .const 'LexInfo' $P4380 = "651_1329260321.776" 
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 528
    $P4380."set_static_lexpad_value"("$?CLASS", $P116)
    .const 'LexInfo' $P4381 = "651_1329260321.776" 
    $P4381."finish_static_lexpad"()
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 528
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 528
    nqp_get_sc_object $P119, "876E116BE302376F7722A4391725308FCA8A04FA-1329260309.34", 139
    $P117."add_parent"($P118, $P119)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 528
    get_how $P117, $P116
    nqp_get_sc_object $P118, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 528
    $P117."compose"($P118)
    nqp_get_sc_object $P116, "9CA35B84860BF70D56AF474ED688E5707F5476DD-1329260316.54", 0
    set_hll_global "GLOBAL", $P116
.end


.HLL "nqp"

.namespace []
.sub "MAIN"  :subid("11_1329260321.776") :outer("10_1329260321.776")
    .param pmc param_1008
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2958
    .lex "@ARGS", param_1008
.annotate 'line', 2960
    new $P101, "Undef"
    set $P1009, $P101
    .lex "$nqpcomp", $P1009
.annotate 'line', 2967
    $P1011 = root_new ['parrot';'ResizablePMCArray']
    set $P1010, $P1011
    .lex "@clo", $P1010
.annotate 'line', 2960
    get_hll_global $P102, "GLOBAL"
    nqp_get_package_through_who $P103, $P102, "NQP"
    get_who $P104, $P103
    set $P105, $P104["Compiler"]
    $P106 = $P105."new"()
    set $P1009, $P106
.annotate 'line', 2961
    set $P102, $P1009
    unless_null $P102, vivify_654
    new $P102, "Undef"
  vivify_654:
    $P102."language"("nqp")
.annotate 'line', 2962
    set $P102, $P1009
    unless_null $P102, vivify_655
    new $P102, "Undef"
  vivify_655:
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P102."parsegrammar"($P106)
.annotate 'line', 2963
    set $P102, $P1009
    unless_null $P102, vivify_656
    new $P102, "Undef"
  vivify_656:
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Actions"]
    $P102."parseactions"($P106)
.annotate 'line', 2964
    set $P102, $P1009
    unless_null $P102, vivify_657
    new $P102, "Undef"
  vivify_657:
    $P103 = $P102."config"()
    "hll-config"($P103)
.annotate 'line', 2967
    set $P102, $P1009
    unless_null $P102, vivify_658
    new $P102, "Undef"
  vivify_658:
    $P103 = $P102."commandline_options"()
    set $P1010, $P103
.annotate 'line', 2968
    set $P1012, $P1010
    unless_null $P1012, vivify_659
    $P1012 = root_new ['parrot';'ResizablePMCArray']
  vivify_659:
    $P1012."push"("parsetrace")
.annotate 'line', 2969
    set $P1013, $P1010
    unless_null $P1013, vivify_660
    $P1013 = root_new ['parrot';'ResizablePMCArray']
  vivify_660:
    $P1013."push"("setting=s")
.annotate 'line', 2970
    set $P1014, $P1010
    unless_null $P1014, vivify_661
    $P1014 = root_new ['parrot';'ResizablePMCArray']
  vivify_661:
    $P1014."push"("setting-path=s")
.annotate 'line', 2971
    set $P1015, $P1010
    unless_null $P1015, vivify_662
    $P1015 = root_new ['parrot';'ResizablePMCArray']
  vivify_662:
    $P1015."push"("module-path=s")
.annotate 'line', 2972
    set $P1016, $P1010
    unless_null $P1016, vivify_663
    $P1016 = root_new ['parrot';'ResizablePMCArray']
  vivify_663:
    $P1016."push"("vmlibs=s")
.annotate 'line', 2975
    set $P102, $P1009
    unless_null $P102, vivify_664
    new $P102, "Undef"
  vivify_664:
    set $P1017, param_1008
    unless_null $P1017, vivify_665
    $P1017 = root_new ['parrot';'ResizablePMCArray']
  vivify_665:
    $P102."command_line"($P1017, "utf8" :named("encoding"), "ascii iso-8859-1" :named("transcode"))
.annotate 'line', 2977
    set $P102, $P1009
    unless_null $P102, vivify_666
    new $P102, "Undef"
  vivify_666:
    $P103 = $P102."nqpevent"()
.annotate 'line', 2958
    .return ($P103)
.end


.HLL "nqp"

.namespace []
.sub "hll-config"  :subid("12_1329260321.776") :outer("10_1329260321.776")
    .param pmc param_1021
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2981
    .lex "$config", param_1021
.annotate 'line', 2982
    new $P102, "String"
    assign $P102, "2012.01-141-g1ac3f88"
    set $P1022, param_1021
    unless_null $P1022, vivify_667
    $P1022 = root_new ['parrot';'Hash']
    set param_1021, $P1022
  vivify_667:
    set $P1022["version"], $P102
.annotate 'line', 2983
    new $P102, "String"
    assign $P102, "2012-02-14T22:58:36Z"
    set $P1023, param_1021
    unless_null $P1023, vivify_668
    $P1023 = root_new ['parrot';'Hash']
    set param_1021, $P1023
  vivify_668:
    set $P1023["build-date"], $P102
.annotate 'line', 2981
    .return ($P102)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1025"  :subid("13_1329260321.776") :outer("10_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 9
    .const 'Sub' $P1351 = "66_1329260321.776" 
    capture_lex $P1351
    .const 'Sub' $P1336 = "64_1329260321.776" 
    capture_lex $P1336
    .const 'Sub' $P1319 = "62_1329260321.776" 
    capture_lex $P1319
    .const 'Sub' $P1316 = "61_1329260321.776" 
    capture_lex $P1316
    .const 'Sub' $P1313 = "60_1329260321.776" 
    capture_lex $P1313
    .const 'Sub' $P1284 = "53_1329260321.776" 
    capture_lex $P1284
    .const 'Sub' $P1276 = "51_1329260321.776" 
    capture_lex $P1276
    .const 'Sub' $P1267 = "49_1329260321.776" 
    capture_lex $P1267
    .const 'Sub' $P1257 = "47_1329260321.776" 
    capture_lex $P1257
    .const 'Sub' $P1230 = "42_1329260321.776" 
    capture_lex $P1230
    .const 'Sub' $P1201 = "37_1329260321.776" 
    capture_lex $P1201
    .const 'Sub' $P1167 = "33_1329260321.776" 
    capture_lex $P1167
    .const 'Sub' $P1141 = "29_1329260321.776" 
    capture_lex $P1141
    .const 'Sub' $P1113 = "27_1329260321.776" 
    capture_lex $P1113
    .const 'Sub' $P1107 = "26_1329260321.776" 
    capture_lex $P1107
    .const 'Sub' $P1100 = "25_1329260321.776" 
    capture_lex $P1100
    .const 'Sub' $P1076 = "21_1329260321.776" 
    capture_lex $P1076
    .const 'Sub' $P1067 = "20_1329260321.776" 
    capture_lex $P1067
    .const 'Sub' $P1055 = "18_1329260321.776" 
    capture_lex $P1055
    .const 'Sub' $P1048 = "17_1329260321.776" 
    capture_lex $P1048
    .const 'Sub' $P1044 = "16_1329260321.776" 
    capture_lex $P1044
    .const 'Sub' $P1041 = "15_1329260321.776" 
    capture_lex $P1041
    .const 'Sub' $P1030 = "14_1329260321.776" 
    capture_lex $P1030
.annotate 'line', 46
    new $P104, "Undef"
    set $P1027, $P104
    .lex "$loader", $P1027
    .lex "$?PACKAGE", $P1028
    .lex "$?CLASS", $P1029
    get_hll_global $P105, "ModuleLoader"
    set $P1027, $P105
.annotate 'line', 628
    .const 'Sub' $P1351 = "66_1329260321.776" 
    newclosure $P1405, $P1351
.annotate 'line', 9
    .return ($P1405)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "push_lexpad" :anon :subid("14_1329260321.776") :outer("13_1329260321.776")
    .param pmc param_1031
    .param pmc param_1032
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 15
    .lex "self", param_1031
    .lex "$/", param_1032
.annotate 'line', 17
    new $P105, "Undef"
    set $P1033, $P105
    .lex "$pad", $P1033
    get_hll_global $P106, "GLOBAL"
    nqp_get_package_through_who $P107, $P106, "PAST"
    get_who $P108, $P107
    set $P109, $P108["Block"]
    get_hll_global $P110, "GLOBAL"
    nqp_get_package_through_who $P111, $P110, "PAST"
    get_who $P112, $P111
    set $P113, $P112["Stmts"]
    $P114 = $P113."new"()
    set $P115, param_1032
    unless_null $P115, vivify_669
    new $P115, "Undef"
  vivify_669:
    $P116 = $P109."new"($P114, $P115 :named("node"))
    set $P1033, $P116
.annotate 'line', 18
    set $P106, param_1031
    nqp_decontainerize $P107, $P106
    find_lex $P108, "$?CLASS"
    repr_get_attr_obj $P1035, $P107, $P108, "@!BLOCKS", 9
    unless_null $P1035, vivify_670
    $P1035 = root_new ['parrot';'ResizablePMCArray']
  vivify_670:
    set $N100, $P1035
    unless $N100, if_1034_end
.annotate 'line', 19
    set $P109, param_1031
    nqp_decontainerize $P110, $P109
    find_lex $P111, "$?CLASS"
    repr_get_attr_obj $P1036, $P110, $P111, "@!BLOCKS", 9
    unless_null $P1036, vivify_671
    $P1036 = root_new ['parrot';'ResizablePMCArray']
  vivify_671:
    set $N101, $P1036
    new $P112, 'Float'
    set $P112, $N101
    sub $P113, $P112, 1
    set $I100, $P113
    set $P114, param_1031
    nqp_decontainerize $P115, $P114
    find_lex $P116, "$?CLASS"
    repr_get_attr_obj $P1037, $P115, $P116, "@!BLOCKS", 9
    unless_null $P1037, vivify_672
    $P1037 = root_new ['parrot';'ResizablePMCArray']
  vivify_672:
    set $P117, $P1037[$I100]
    unless_null $P117, vivify_673
    new $P117, "Undef"
  vivify_673:
    set $P1038, $P1033
    unless_null $P1038, vivify_674
    $P1038 = root_new ['parrot';'Hash']
    set $P1033, $P1038
  vivify_674:
    set $P1038["outer"], $P117
  if_1034_end:
.annotate 'line', 21
    set $P106, $P1033
    unless_null $P106, vivify_675
    new $P106, "Undef"
  vivify_675:
    set $P107, param_1031
    nqp_decontainerize $P108, $P107
    find_lex $P109, "$?CLASS"
    repr_get_attr_obj $P1039, $P108, $P109, "@!BLOCKS", 9
    unless_null $P1039, vivify_676
    $P1039 = root_new ['parrot';'ResizablePMCArray']
  vivify_676:
    set $N100, $P1039
    set $I100, $N100
    set $P110, param_1031
    nqp_decontainerize $P111, $P110
    find_lex $P112, "$?CLASS"
    repr_get_attr_obj $P1040, $P111, $P112, "@!BLOCKS", 9
    unless_null $P1040, vivify_677
    $P1040 = root_new ['parrot';'ResizablePMCArray']
    repr_bind_attr_obj $P111, $P112, "@!BLOCKS", 9, $P1040
  vivify_677:
    set $P1040[$I100], $P106
.annotate 'line', 15
    set $P106, $P1033
    unless_null $P106, vivify_678
    new $P106, "Undef"
  vivify_678:
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "pop_lexpad" :anon :subid("15_1329260321.776") :outer("13_1329260321.776")
    .param pmc param_1042
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 26
    .lex "self", param_1042
.annotate 'line', 27
    set $P105, param_1042
    nqp_decontainerize $P106, $P105
    find_lex $P107, "$?CLASS"
    repr_get_attr_obj $P1043, $P106, $P107, "@!BLOCKS", 9
    unless_null $P1043, vivify_679
    $P1043 = root_new ['parrot';'ResizablePMCArray']
  vivify_679:
    $P108 = $P1043."pop"()
.annotate 'line', 26
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "cur_lexpad" :anon :subid("16_1329260321.776") :outer("13_1329260321.776")
    .param pmc param_1045
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 31
    .lex "self", param_1045
.annotate 'line', 32
    set $P105, param_1045
    nqp_decontainerize $P106, $P105
    find_lex $P107, "$?CLASS"
    repr_get_attr_obj $P1046, $P106, $P107, "@!BLOCKS", 9
    unless_null $P1046, vivify_680
    $P1046 = root_new ['parrot';'ResizablePMCArray']
  vivify_680:
    set $N100, $P1046
    new $P108, 'Float'
    set $P108, $N100
    sub $P109, $P108, 1
    set $I100, $P109
.annotate 'line', 31
    set $P110, param_1045
    nqp_decontainerize $P111, $P110
    find_lex $P112, "$?CLASS"
    repr_get_attr_obj $P1047, $P111, $P112, "@!BLOCKS", 9
    unless_null $P1047, vivify_681
    $P1047 = root_new ['parrot';'ResizablePMCArray']
  vivify_681:
    set $P113, $P1047[$I100]
    unless_null $P113, vivify_682
    new $P113, "Undef"
  vivify_682:
    .return ($P113)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "get_legacy_block_list" :anon :subid("17_1329260321.776") :outer("13_1329260321.776")
    .param pmc param_1049
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 36
    .lex "self", param_1049
.annotate 'line', 37
    $P1051 = root_new ['parrot';'ResizablePMCArray']
    set $P1050, $P1051
    .lex "@x", $P1050
    set $P105, param_1049
    nqp_decontainerize $P106, $P105
    find_lex $P107, "$?CLASS"
    repr_get_attr_obj $P1052, $P106, $P107, "@!BLOCKS", 9
    unless_null $P1052, vivify_683
    $P1052 = root_new ['parrot';'ResizablePMCArray']
  vivify_683:
    clone $P108, $P1052
    set $P1050, $P108
.annotate 'line', 38
    set $P1053, $P1050
    unless_null $P1053, vivify_684
    $P1053 = root_new ['parrot';'ResizablePMCArray']
  vivify_684:
    $P1053."reverse"()
.annotate 'line', 36
    set $P1054, $P1050
    unless_null $P1054, vivify_685
    $P1054 = root_new ['parrot';'ResizablePMCArray']
  vivify_685:
    .return ($P1054)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "load_setting" :anon :subid("18_1329260321.776") :outer("13_1329260321.776")
    .param pmc param_1058
    .param pmc param_1059
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 49
    .const 'Sub' $P1062 = "19_1329260321.776" 
    capture_lex $P1062
    new $P1057, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P1057, control_1056
    push_eh $P1057
    .lex "self", param_1058
    .lex "$setting_name", param_1059
.annotate 'line', 51
    set $P106, param_1059
    unless_null $P106, vivify_686
    new $P106, "Undef"
  vivify_686:
    set $S100, $P106
    isne $I100, $S100, "NULL"
    if $I100, if_1060
    new $P105, 'Integer'
    set $P105, $I100
    goto if_1060_end
  if_1060:
    .const 'Sub' $P1062 = "19_1329260321.776" 
    capture_lex $P1062
    $P108 = $P1062()
    set $P105, $P108
  if_1060_end:
.annotate 'line', 49
    .return ($P105)
  control_1056:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P106, exception, "payload"
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1061"  :anon :subid("19_1329260321.776") :outer("18_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 55
    new $P107, "Undef"
    set $P1063, $P107
    .lex "$setting", $P1063
.annotate 'line', 56
    find_lex $P108, "$loader"
    unless_null $P108, vivify_687
    new $P108, "Undef"
  vivify_687:
    find_lex $P109, "$setting_name"
    unless_null $P109, vivify_688
    new $P109, "Undef"
  vivify_688:
    $P110 = $P108."load_setting"($P109)
    find_dynamic_lex $P113, "%*COMPILING"
    unless_null $P113, vivify_689
    get_hll_global $P111, "GLOBAL"
    get_who $P112, $P111
    set $P113, $P112["%COMPILING"]
    unless_null $P113, vivify_690
    die "Contextual %*COMPILING not found"
  vivify_690:
    store_dynamic_lex "%*COMPILING", $P113
  vivify_689:
    set $P1064, $P113["%?OPTIONS"]
    unless_null $P1064, vivify_691
    $P1064 = root_new ['parrot';'Hash']
    set $P113["%?OPTIONS"], $P1064
  vivify_691:
    set $P1064["outer_ctx"], $P110
    set $P1063, $P110
.annotate 'line', 59
    find_lex $P108, "self"
    nqp_decontainerize $P109, $P108
    $P110 = $P109."is_precompilation_mode"()
    if $P110, if_1065
.annotate 'line', 95
    find_lex $P111, "self"
    nqp_decontainerize $P112, $P111
    get_hll_global $P113, "GLOBAL"
    nqp_get_package_through_who $P114, $P113, "PAST"
    get_who $P115, $P114
    set $P116, $P115["Op"]
.annotate 'line', 97
    get_hll_global $P117, "GLOBAL"
    nqp_get_package_through_who $P118, $P117, "PAST"
    get_who $P119, $P118
    set $P120, $P119["Var"]
    $P121 = $P120."new"("block" :named("name"), "register" :named("scope"))
.annotate 'line', 98
    get_hll_global $P122, "GLOBAL"
    nqp_get_package_through_who $P123, $P122, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Op"]
.annotate 'line', 100
    get_hll_global $P126, "GLOBAL"
    nqp_get_package_through_who $P127, $P126, "PAST"
    get_who $P128, $P127
    set $P129, $P128["Var"]
    new $P130, "ResizablePMCArray"
    $P131 = $P129."new"("ModuleLoader" :named("name"), $P130 :named("namespace"), "package" :named("scope"))
    find_lex $P132, "$setting_name"
    unless_null $P132, vivify_692
    new $P132, "Undef"
  vivify_692:
    $P133 = $P125."new"($P131, $P132, "callmethod" :named("pasttype"), "load_setting" :named("name"))
.annotate 'line', 98
    $P134 = $P116."new"($P121, $P133, "callmethod" :named("pasttype"), "set_outer_ctx" :named("name"))
.annotate 'line', 95
    $P112."add_fixup_task"($P134 :named("fixup_past"))
.annotate 'line', 93
    goto if_1065_end
  if_1065:
.annotate 'line', 60
    find_lex $P111, "$NEW_SER"
    unless_null $P111, vivify_693
    new $P111, "Undef"
  vivify_693:
    if $P111, if_1066
.annotate 'line', 77
    find_lex $P112, "self"
    nqp_decontainerize $P113, $P112
    get_hll_global $P114, "GLOBAL"
    nqp_get_package_through_who $P115, $P114, "PAST"
    get_who $P116, $P115
    set $P117, $P116["Stmts"]
.annotate 'line', 78
    get_hll_global $P118, "GLOBAL"
    nqp_get_package_through_who $P119, $P118, "PAST"
    get_who $P120, $P119
    set $P121, $P120["Op"]
    $P122 = $P121."new"("ModuleLoader.pbc", "load_bytecode vs" :named("pirop"))
.annotate 'line', 81
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Op"]
.annotate 'line', 83
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P128, $P127, "PAST"
    get_who $P129, $P128
    set $P130, $P129["Var"]
    $P131 = $P130."new"("block" :named("name"), "register" :named("scope"))
.annotate 'line', 84
    get_hll_global $P132, "GLOBAL"
    nqp_get_package_through_who $P133, $P132, "PAST"
    get_who $P134, $P133
    set $P135, $P134["Op"]
.annotate 'line', 86
    get_hll_global $P136, "GLOBAL"
    nqp_get_package_through_who $P137, $P136, "PAST"
    get_who $P138, $P137
    set $P139, $P138["Var"]
    new $P140, "ResizablePMCArray"
    $P141 = $P139."new"("ModuleLoader" :named("name"), $P140 :named("namespace"), "package" :named("scope"))
    find_lex $P142, "$setting_name"
    unless_null $P142, vivify_694
    new $P142, "Undef"
  vivify_694:
    $P143 = $P135."new"($P141, $P142, "callmethod" :named("pasttype"), "load_setting" :named("name"))
.annotate 'line', 84
    $P144 = $P126."new"($P131, $P143, "callmethod" :named("pasttype"), "set_outer_ctx" :named("name"))
.annotate 'line', 81
    $P145 = $P117."new"($P122, $P144)
.annotate 'line', 77
    $P113."add_fixup_task"($P145 :named("deserialize_past"))
.annotate 'line', 76
    goto if_1066_end
  if_1066:
.annotate 'line', 61
    find_lex $P112, "self"
    nqp_decontainerize $P113, $P112
    get_hll_global $P114, "GLOBAL"
    nqp_get_package_through_who $P115, $P114, "PAST"
    get_who $P116, $P115
    set $P117, $P116["Stmts"]
.annotate 'line', 62
    get_hll_global $P118, "GLOBAL"
    nqp_get_package_through_who $P119, $P118, "PAST"
    get_who $P120, $P119
    set $P121, $P120["Op"]
    $P122 = $P121."new"("ModuleLoader.pbc", "load_bytecode vs" :named("pirop"))
.annotate 'line', 65
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Op"]
.annotate 'line', 67
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P128, $P127, "PAST"
    get_who $P129, $P128
    set $P130, $P129["Var"]
    $P131 = $P130."new"("block" :named("name"), "register" :named("scope"))
.annotate 'line', 68
    get_hll_global $P132, "GLOBAL"
    nqp_get_package_through_who $P133, $P132, "PAST"
    get_who $P134, $P133
    set $P135, $P134["Op"]
.annotate 'line', 70
    get_hll_global $P136, "GLOBAL"
    nqp_get_package_through_who $P137, $P136, "PAST"
    get_who $P138, $P137
    set $P139, $P138["Var"]
    new $P140, "ResizablePMCArray"
    $P141 = $P139."new"("ModuleLoader" :named("name"), $P140 :named("namespace"), "package" :named("scope"))
    find_lex $P142, "$setting_name"
    unless_null $P142, vivify_695
    new $P142, "Undef"
  vivify_695:
    $P143 = $P135."new"($P141, $P142, "callmethod" :named("pasttype"), "load_setting" :named("name"))
.annotate 'line', 68
    $P144 = $P126."new"($P131, $P143, "callmethod" :named("pasttype"), "set_outer_ctx" :named("name"))
.annotate 'line', 65
    $P145 = $P117."new"($P122, $P144)
.annotate 'line', 61
    $P113."add_load_dependency_task"($P145 :named("deserialize_past"))
  if_1066_end:
  if_1065_end:
.annotate 'line', 106
    new $P108, "Exception"
    set $P108['type'], .CONTROL_RETURN
    set $P109, $P1063
    unless_null $P109, vivify_696
    new $P109, "Undef"
  vivify_696:
    getattribute $P110, $P109, "lex_pad"
    setattribute $P108, 'payload', $P110
    throw $P108
.annotate 'line', 51
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "load_module" :anon :subid("20_1329260321.776") :outer("13_1329260321.776")
    .param pmc param_1070
    .param pmc param_1071
    .param pmc param_1072
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 112
    new $P1069, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P1069, control_1068
    push_eh $P1069
    .lex "self", param_1070
    .lex "$module_name", param_1071
    .lex "$cur_GLOBALish", param_1072
.annotate 'line', 114
    new $P105, "Undef"
    set $P1073, $P105
    .lex "$module", $P1073
    find_lex $P106, "$loader"
    unless_null $P106, vivify_697
    new $P106, "Undef"
  vivify_697:
    set $P107, param_1071
    unless_null $P107, vivify_698
    new $P107, "Undef"
  vivify_698:
    set $P108, param_1072
    unless_null $P108, vivify_699
    new $P108, "Undef"
  vivify_699:
    $P109 = $P106."load_module"($P107, $P108)
    set $P1073, $P109
.annotate 'line', 117
    set $P106, param_1070
    nqp_decontainerize $P107, $P106
    $P108 = $P107."is_precompilation_mode"()
    unless $P108, if_1074_end
.annotate 'line', 118
    find_lex $P109, "$NEW_SER"
    unless_null $P109, vivify_700
    new $P109, "Undef"
  vivify_700:
    if $P109, if_1075
.annotate 'line', 130
    set $P110, param_1070
    nqp_decontainerize $P111, $P110
    get_hll_global $P112, "GLOBAL"
    nqp_get_package_through_who $P113, $P112, "PAST"
    get_who $P114, $P113
    set $P115, $P114["Stmts"]
.annotate 'line', 131
    get_hll_global $P116, "GLOBAL"
    nqp_get_package_through_who $P117, $P116, "PAST"
    get_who $P118, $P117
    set $P119, $P118["Op"]
    $P120 = $P119."new"("ModuleLoader.pbc", "load_bytecode vs" :named("pirop"))
.annotate 'line', 134
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "PAST"
    get_who $P123, $P122
    set $P124, $P123["Op"]
.annotate 'line', 136
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P128, $P127["Var"]
    new $P129, "ResizablePMCArray"
    $P130 = $P128."new"("ModuleLoader" :named("name"), $P129 :named("namespace"), "package" :named("scope"))
    set $P131, param_1071
    unless_null $P131, vivify_701
    new $P131, "Undef"
  vivify_701:
.annotate 'line', 138
    set $P132, param_1070
    nqp_decontainerize $P133, $P132
    set $P134, param_1072
    unless_null $P134, vivify_702
    new $P134, "Undef"
  vivify_702:
    $P135 = $P133."get_slot_past_for_object"($P134)
    $P136 = $P124."new"($P130, $P131, $P135, "callmethod" :named("pasttype"), "load_module" :named("name"))
.annotate 'line', 134
    $P137 = $P115."new"($P120, $P136)
.annotate 'line', 130
    $P111."add_fixup_task"($P137 :named("deserialize_past"))
.annotate 'line', 129
    goto if_1075_end
  if_1075:
.annotate 'line', 119
    set $P110, param_1070
    nqp_decontainerize $P111, $P110
    get_hll_global $P112, "GLOBAL"
    nqp_get_package_through_who $P113, $P112, "PAST"
    get_who $P114, $P113
    set $P115, $P114["Stmts"]
.annotate 'line', 120
    get_hll_global $P116, "GLOBAL"
    nqp_get_package_through_who $P117, $P116, "PAST"
    get_who $P118, $P117
    set $P119, $P118["Op"]
    $P120 = $P119."new"("ModuleLoader.pbc", "load_bytecode vs" :named("pirop"))
.annotate 'line', 123
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "PAST"
    get_who $P123, $P122
    set $P124, $P123["Op"]
.annotate 'line', 125
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P128, $P127["Var"]
    new $P129, "ResizablePMCArray"
    $P130 = $P128."new"("ModuleLoader" :named("name"), $P129 :named("namespace"), "package" :named("scope"))
    set $P131, param_1071
    unless_null $P131, vivify_703
    new $P131, "Undef"
  vivify_703:
    $P132 = $P124."new"($P130, $P131, "callmethod" :named("pasttype"), "load_module" :named("name"))
.annotate 'line', 123
    $P133 = $P115."new"($P120, $P132)
.annotate 'line', 119
    $P111."add_fixup_task"($P133 :named("deserialize_past"))
  if_1075_end:
  if_1074_end:
.annotate 'line', 143
    new $P106, "Exception"
    set $P106['type'], .CONTROL_RETURN
    set $P107, $P1073
    unless_null $P107, vivify_704
    new $P107, "Undef"
  vivify_704:
    getattribute $P108, $P107, "lex_pad"
    setattribute $P106, 'payload', $P108
    throw $P106
.annotate 'line', 112
    .return ()
  control_1068:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P106, exception, "payload"
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "install_package_symbol" :anon :subid("21_1329260321.776") :outer("13_1329260321.776")
    .param pmc param_1077
    .param pmc param_1078
    .param pmc param_1079
    .param pmc param_1080
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 148
    .const 'Sub' $P1093 = "23_1329260321.776" 
    capture_lex $P1093
    .const 'Sub' $P1087 = "22_1329260321.776" 
    capture_lex $P1087
    .lex "self", param_1077
    .lex "$package", param_1078
    .lex "@sym", param_1079
    .lex "$obj", param_1080
.annotate 'line', 150
    new $P105, "Undef"
    set $P1081, $P105
    .lex "$name", $P1081
.annotate 'line', 153
    new $P106, "Undef"
    set $P1082, $P106
    .lex "$target", $P1082
.annotate 'line', 149
    set $P1083, param_1079
    unless_null $P1083, vivify_705
    $P1083 = root_new ['parrot';'ResizablePMCArray']
  vivify_705:
    clone $P107, $P1083
    set param_1079, $P107
.annotate 'line', 150
    set $P1084, param_1079
    unless_null $P1084, vivify_706
    $P1084 = root_new ['parrot';'ResizablePMCArray']
  vivify_706:
    $P107 = $P1084."pop"()
    set $S100, $P107
    new $P108, 'String'
    set $P108, $S100
    set $P1081, $P108
.annotate 'line', 153
    set $P107, param_1078
    unless_null $P107, vivify_707
    new $P107, "Undef"
  vivify_707:
    set $P1082, $P107
.annotate 'line', 154
    set $P1085, param_1079
    unless_null $P1085, vivify_708
    $P1085 = root_new ['parrot';'ResizablePMCArray']
  vivify_708:
    defined $I100, $P1085
    unless $I100, for_undef_709
    iter $P107, $P1085
    new $P109, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P109, loop1089_handler
    push_eh $P109
  loop1089_test:
    unless $P107, loop1089_done
    shift $P108, $P107
  loop1089_redo:
    .const 'Sub' $P1087 = "22_1329260321.776" 
    capture_lex $P1087
    $P1087($P108)
  loop1089_next:
    goto loop1089_test
  loop1089_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P110, exception, 'type'
    eq $P110, .CONTROL_LOOP_NEXT, loop1089_next
    eq $P110, .CONTROL_LOOP_REDO, loop1089_redo
  loop1089_done:
    pop_eh 
  for_undef_709:
.annotate 'line', 157
    set $P107, param_1080
    unless_null $P107, vivify_712
    new $P107, "Undef"
  vivify_712:
    set $P108, $P1081
    unless_null $P108, vivify_713
    new $P108, "Undef"
  vivify_713:
    set $P109, $P1082
    unless_null $P109, vivify_714
    new $P109, "Undef"
    set $P1082, $P109
  vivify_714:
    get_who $P110, $P109
    set $P110[$P108], $P107
.annotate 'line', 160
    set $P109, param_1077
    nqp_decontainerize $P110, $P109
    $P111 = $P110."is_precompilation_mode"()
    if $P111, if_1091
    set $P108, $P111
    goto if_1091_end
  if_1091:
    find_lex $P112, "$NEW_SER"
    unless_null $P112, vivify_715
    new $P112, "Undef"
  vivify_715:
    isfalse $I100, $P112
    new $P108, 'Integer'
    set $P108, $I100
  if_1091_end:
    if $P108, if_1090
    set $P107, $P108
    goto if_1090_end
  if_1090:
    .const 'Sub' $P1093 = "23_1329260321.776" 
    capture_lex $P1093
    $P114 = $P1093()
    set $P107, $P114
  if_1090_end:
.annotate 'line', 148
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1086"  :anon :subid("22_1329260321.776") :outer("21_1329260321.776")
    .param pmc param_1088
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 154
    .lex "$_", param_1088
.annotate 'line', 155
    find_lex $P109, "$target"
    unless_null $P109, vivify_710
    new $P109, "Undef"
  vivify_710:
    find_lex $P110, "$_"
    unless_null $P110, vivify_711
    new $P110, "Undef"
  vivify_711:
    set $S100, $P110
    nqp_get_package_through_who $P111, $P109, $S100
    store_lex "$target", $P111
.annotate 'line', 154
    .return ($P111)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1092"  :anon :subid("23_1329260321.776") :outer("21_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 160
    .const 'Sub' $P1097 = "24_1329260321.776" 
    capture_lex $P1097
.annotate 'line', 161
    new $P113, "Undef"
    set $P1094, $P113
    .lex "$path", $P1094
    find_lex $P114, "self"
    nqp_decontainerize $P115, $P114
    find_lex $P116, "$package"
    unless_null $P116, vivify_716
    new $P116, "Undef"
  vivify_716:
    $P117 = $P115."get_slot_past_for_object"($P116)
    set $P1094, $P117
.annotate 'line', 162
    find_lex $P1095, "@sym"
    unless_null $P1095, vivify_717
    $P1095 = root_new ['parrot';'ResizablePMCArray']
  vivify_717:
    defined $I101, $P1095
    unless $I101, for_undef_718
    iter $P114, $P1095
    new $P116, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P116, loop1099_handler
    push_eh $P116
  loop1099_test:
    unless $P114, loop1099_done
    shift $P115, $P114
  loop1099_redo:
    .const 'Sub' $P1097 = "24_1329260321.776" 
    capture_lex $P1097
    $P1097($P115)
  loop1099_next:
    goto loop1099_test
  loop1099_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P117, exception, 'type'
    eq $P117, .CONTROL_LOOP_NEXT, loop1099_next
    eq $P117, .CONTROL_LOOP_REDO, loop1099_redo
  loop1099_done:
    pop_eh 
  for_undef_718:
.annotate 'line', 165
    find_lex $P114, "self"
    nqp_decontainerize $P115, $P114
    get_hll_global $P116, "GLOBAL"
    nqp_get_package_through_who $P117, $P116, "PAST"
    get_who $P118, $P117
    set $P119, $P118["Op"]
.annotate 'line', 167
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P122, $P121
    set $P123, $P122["Var"]
.annotate 'line', 169
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Op"]
    set $P128, $P1094
    unless_null $P128, vivify_721
    new $P128, "Undef"
  vivify_721:
    $P129 = $P127."new"($P128, "get_who PP" :named("pirop"))
    find_lex $P130, "$name"
    unless_null $P130, vivify_722
    new $P130, "Undef"
  vivify_722:
    $P131 = $P123."new"($P129, $P130, "keyed" :named("scope"))
.annotate 'line', 172
    find_lex $P132, "self"
    nqp_decontainerize $P133, $P132
    find_lex $P134, "$obj"
    unless_null $P134, vivify_723
    new $P134, "Undef"
  vivify_723:
    $P135 = $P133."get_slot_past_for_object"($P134)
    $P136 = $P119."new"($P131, $P135, "bind_6model" :named("pasttype"))
.annotate 'line', 165
    $P137 = $P115."add_fixup_task"($P136 :named("deserialize_past"))
.annotate 'line', 160
    .return ($P137)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1096"  :anon :subid("24_1329260321.776") :outer("23_1329260321.776")
    .param pmc param_1098
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 162
    .lex "$_", param_1098
.annotate 'line', 163
    get_hll_global $P116, "GLOBAL"
    nqp_get_package_through_who $P117, $P116, "PAST"
    get_who $P118, $P117
    set $P119, $P118["Op"]
    find_lex $P120, "$path"
    unless_null $P120, vivify_719
    new $P120, "Undef"
  vivify_719:
    find_lex $P121, "$_"
    unless_null $P121, vivify_720
    new $P121, "Undef"
  vivify_720:
    set $S100, $P121
    $P122 = $P119."new"($P120, $S100, "nqp_get_package_through_who PPs" :named("pirop"))
    store_lex "$path", $P122
.annotate 'line', 162
    .return ($P122)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "install_lexical_symbol" :anon :subid("25_1329260321.776") :outer("13_1329260321.776")
    .param pmc param_1101
    .param pmc param_1102
    .param pmc param_1103
    .param pmc param_1104
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 181
    .lex "self", param_1101
    .lex "$block", param_1102
    .lex "$name", param_1103
    .lex "$obj", param_1104
.annotate 'line', 188
    new $P105, "Undef"
    set $P1105, $P105
    .lex "$fixup", $P1105
.annotate 'line', 183
    set $P106, param_1102
    unless_null $P106, vivify_724
    new $P106, "Undef"
  vivify_724:
    set $P107, param_1103
    unless_null $P107, vivify_725
    new $P107, "Undef"
  vivify_725:
    set $P108, param_1104
    unless_null $P108, vivify_726
    new $P108, "Undef"
  vivify_726:
    $P106."symbol"($P107, "lexical" :named("scope"), $P108 :named("value"))
.annotate 'line', 184
    new $P106, "Float"
    assign $P106, 0
    set $I100, $P106
    set $P1106, param_1102
    unless_null $P1106, vivify_727
    $P1106 = root_new ['parrot';'ResizablePMCArray']
  vivify_727:
    set $P107, $P1106[$I100]
    unless_null $P107, vivify_728
    new $P107, "Undef"
  vivify_728:
    get_hll_global $P108, "GLOBAL"
    nqp_get_package_through_who $P109, $P108, "PAST"
    get_who $P110, $P109
    set $P111, $P110["Var"]
    set $P112, param_1103
    unless_null $P112, vivify_729
    new $P112, "Undef"
  vivify_729:
    $P113 = $P111."new"("lexical" :named("scope"), $P112 :named("name"), 1 :named("isdecl"), 1 :named("directaccess"))
    $P107."push"($P113)
.annotate 'line', 188
    get_hll_global $P106, "GLOBAL"
    nqp_get_package_through_who $P107, $P106, "PAST"
    get_who $P108, $P107
    set $P109, $P108["Stmts"]
.annotate 'line', 189
    get_hll_global $P110, "GLOBAL"
    nqp_get_package_through_who $P111, $P110, "PAST"
    get_who $P112, $P111
    set $P113, $P112["Op"]
.annotate 'line', 191
    get_hll_global $P114, "GLOBAL"
    nqp_get_package_through_who $P115, $P114, "PAST"
    get_who $P116, $P115
    set $P117, $P116["Val"]
    set $P118, param_1102
    unless_null $P118, vivify_730
    new $P118, "Undef"
  vivify_730:
    $P119 = $P117."new"($P118 :named("value"), "LexInfo" :named("returns"))
.annotate 'line', 192
    set $P120, param_1103
    unless_null $P120, vivify_731
    new $P120, "Undef"
  vivify_731:
    set $S100, $P120
    set $P121, param_1101
    nqp_decontainerize $P122, $P121
    set $P123, param_1104
    unless_null $P123, vivify_732
    new $P123, "Undef"
  vivify_732:
    $P124 = $P122."get_slot_past_for_object"($P123)
    $P125 = $P113."new"($P119, $S100, $P124, "callmethod" :named("pasttype"), "set_static_lexpad_value" :named("name"))
.annotate 'line', 196
    get_hll_global $P126, "GLOBAL"
    nqp_get_package_through_who $P127, $P126, "PAST"
    get_who $P128, $P127
    set $P129, $P128["Op"]
.annotate 'line', 198
    get_hll_global $P130, "GLOBAL"
    nqp_get_package_through_who $P131, $P130, "PAST"
    get_who $P132, $P131
    set $P133, $P132["Val"]
    set $P134, param_1102
    unless_null $P134, vivify_733
    new $P134, "Undef"
  vivify_733:
    $P135 = $P133."new"($P134 :named("value"), "LexInfo" :named("returns"))
    $P136 = $P129."new"($P135, "callmethod" :named("pasttype"), "finish_static_lexpad" :named("name"))
.annotate 'line', 196
    $P137 = $P109."new"($P125, $P136)
.annotate 'line', 188
    set $P1105, $P137
.annotate 'line', 201
    set $P106, param_1101
    nqp_decontainerize $P107, $P106
    set $P108, $P1105
    unless_null $P108, vivify_734
    new $P108, "Undef"
  vivify_734:
    set $P109, $P1105
    unless_null $P109, vivify_735
    new $P109, "Undef"
  vivify_735:
    $P110 = $P107."add_fixup_task"($P108 :named("deserialize_past"), $P109 :named("fixup_past"))
.annotate 'line', 181
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "install_package_routine" :anon :subid("26_1329260321.776") :outer("13_1329260321.776")
    .param pmc param_1108
    .param pmc param_1109
    .param pmc param_1110
    .param pmc param_1111
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 206
    .lex "self", param_1108
    .lex "$package", param_1109
    .lex "$name", param_1110
    .lex "$past_block", param_1111
.annotate 'line', 207
    new $P105, "Undef"
    set $P1112, $P105
    .lex "$fixup", $P1112
    get_hll_global $P106, "GLOBAL"
    nqp_get_package_through_who $P107, $P106, "PAST"
    get_who $P108, $P107
    set $P109, $P108["Op"]
.annotate 'line', 209
    get_hll_global $P110, "GLOBAL"
    nqp_get_package_through_who $P111, $P110, "PAST"
    get_who $P112, $P111
    set $P113, $P112["Var"]
.annotate 'line', 211
    get_hll_global $P114, "GLOBAL"
    nqp_get_package_through_who $P115, $P114, "PAST"
    get_who $P116, $P115
    set $P117, $P116["Op"]
    set $P118, param_1108
    nqp_decontainerize $P119, $P118
    set $P120, param_1109
    unless_null $P120, vivify_736
    new $P120, "Undef"
  vivify_736:
    $P121 = $P119."get_slot_past_for_object"($P120)
    $P122 = $P117."new"($P121, "get_who PP" :named("pirop"))
.annotate 'line', 212
    set $P123, param_1110
    unless_null $P123, vivify_737
    new $P123, "Undef"
  vivify_737:
    set $S100, $P123
    $P124 = $P113."new"($P122, $S100, "keyed" :named("scope"))
.annotate 'line', 214
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P128, $P127["Val"]
    set $P129, param_1111
    unless_null $P129, vivify_738
    new $P129, "Undef"
  vivify_738:
    $P130 = $P128."new"($P129 :named("value"))
    $P131 = $P109."new"($P124, $P130, "bind_6model" :named("pasttype"))
.annotate 'line', 207
    set $P1112, $P131
.annotate 'line', 216
    set $P106, param_1108
    nqp_decontainerize $P107, $P106
    set $P108, $P1112
    unless_null $P108, vivify_739
    new $P108, "Undef"
  vivify_739:
    set $P109, $P1112
    unless_null $P109, vivify_740
    new $P109, "Undef"
  vivify_740:
    $P110 = $P107."add_fixup_task"($P108 :named("deserialize_past"), $P109 :named("fixup_past"))
.annotate 'line', 206
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "pkg_create_mo" :anon :subid("27_1329260321.776") :outer("13_1329260321.776")
    .param pmc param_1116
    .param pmc param_1117
    .param pmc param_1118 :optional :named("name")
    .param int has_param_1118 :opt_flag
    .param pmc param_1119 :optional :named("repr")
    .param int has_param_1119 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 221
    .const 'Sub' $P1133 = "28_1329260321.776" 
    capture_lex $P1133
    new $P1115, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P1115, control_1114
    push_eh $P1115
    .lex "self", param_1116
    .lex "$how", param_1117
    if has_param_1118, optparam_741
    new $P105, "Undef"
    set param_1118, $P105
  optparam_741:
    .lex "$name", param_1118
    if has_param_1119, optparam_742
    new $P106, "Undef"
    set param_1119, $P106
  optparam_742:
    .lex "$repr", param_1119
.annotate 'line', 223
    $P1121 = root_new ['parrot';'Hash']
    set $P1120, $P1121
    .lex "%args", $P1120
.annotate 'line', 226
    new $P107, "Undef"
    set $P1122, $P107
    .lex "$mo", $P1122
.annotate 'line', 227
    new $P108, "Undef"
    set $P1123, $P108
    .lex "$slot", $P1123
.annotate 'line', 221
    set $P1124, $P1120
    unless_null $P1124, vivify_743
    $P1124 = root_new ['parrot';'Hash']
  vivify_743:
.annotate 'line', 224
    set $P109, param_1118
    unless_null $P109, vivify_744
    new $P109, "Undef"
  vivify_744:
    defined $I100, $P109
    unless $I100, if_1125_end
    set $P110, param_1118
    unless_null $P110, vivify_745
    new $P110, "Undef"
  vivify_745:
    set $P1126, $P1120
    unless_null $P1126, vivify_746
    $P1126 = root_new ['parrot';'Hash']
    set $P1120, $P1126
  vivify_746:
    set $P1126["name"], $P110
  if_1125_end:
.annotate 'line', 225
    set $P109, param_1119
    unless_null $P109, vivify_747
    new $P109, "Undef"
  vivify_747:
    defined $I100, $P109
    unless $I100, if_1127_end
    set $P110, param_1119
    unless_null $P110, vivify_748
    new $P110, "Undef"
  vivify_748:
    set $P1128, $P1120
    unless_null $P1128, vivify_749
    $P1128 = root_new ['parrot';'Hash']
    set $P1120, $P1128
  vivify_749:
    set $P1128["repr"], $P110
  if_1127_end:
.annotate 'line', 226
    set $P109, param_1117
    unless_null $P109, vivify_750
    new $P109, "Undef"
  vivify_750:
    set $P1129, $P1120
    unless_null $P1129, vivify_751
    $P1129 = root_new ['parrot';'Hash']
  vivify_751:
    $P110 = $P109."new_type"($P1129 :flat)
    set $P1122, $P110
.annotate 'line', 227
    set $P109, param_1116
    nqp_decontainerize $P110, $P109
    set $P111, $P1122
    unless_null $P111, vivify_752
    new $P111, "Undef"
  vivify_752:
    $P112 = $P110."add_object"($P111)
    set $P1123, $P112
.annotate 'line', 231
    set $P110, param_1116
    nqp_decontainerize $P111, $P110
    $P112 = $P111."is_precompilation_mode"()
    if $P112, if_1131
    set $P109, $P112
    goto if_1131_end
  if_1131:
    find_lex $P113, "$NEW_SER"
    unless_null $P113, vivify_753
    new $P113, "Undef"
  vivify_753:
    isfalse $I100, $P113
    new $P109, 'Integer'
    set $P109, $I100
  if_1131_end:
    unless $P109, if_1130_end
    .const 'Sub' $P1133 = "28_1329260321.776" 
    capture_lex $P1133
    $P1133()
  if_1130_end:
.annotate 'line', 249
    new $P109, "Exception"
    set $P109['type'], .CONTROL_RETURN
    set $P110, $P1122
    unless_null $P110, vivify_766
    new $P110, "Undef"
  vivify_766:
    setattribute $P109, 'payload', $P110
    throw $P109
.annotate 'line', 221
    .return ()
  control_1114:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P109, exception, "payload"
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1132"  :anon :subid("28_1329260321.776") :outer("27_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 232
    $P1135 = root_new ['parrot';'ResizablePMCArray']
    set $P1134, $P1135
    .lex "@how_ns", $P1134
.annotate 'line', 233
    new $P114, "Undef"
    set $P1136, $P114
    .lex "$how_name", $P1136
.annotate 'line', 234
    new $P115, "Undef"
    set $P1137, $P115
    .lex "$setup_call", $P1137
.annotate 'line', 232
    find_lex $P116, "$how"
    unless_null $P116, vivify_754
    new $P116, "Undef"
  vivify_754:
    get_how $P117, $P116
    find_lex $P118, "$how"
    unless_null $P118, vivify_755
    new $P118, "Undef"
  vivify_755:
    $S100 = $P117."name"($P118)
    split $P119, "::", $S100
    set $P1134, $P119
.annotate 'line', 233
    set $P1138, $P1134
    unless_null $P1138, vivify_756
    $P1138 = root_new ['parrot';'ResizablePMCArray']
  vivify_756:
    $P116 = $P1138."pop"()
    set $P1136, $P116
.annotate 'line', 234
    get_hll_global $P116, "GLOBAL"
    nqp_get_package_through_who $P117, $P116, "PAST"
    get_who $P118, $P117
    set $P119, $P118["Op"]
.annotate 'line', 236
    find_lex $P120, "self"
    nqp_decontainerize $P121, $P120
    find_lex $P122, "$how"
    unless_null $P122, vivify_757
    new $P122, "Undef"
  vivify_757:
    $P123 = $P121."get_ref"($P122)
    $P124 = $P119."new"($P123, "callmethod" :named("pasttype"), "new_type" :named("name"))
.annotate 'line', 234
    set $P1137, $P124
.annotate 'line', 238
    find_lex $P116, "$name"
    unless_null $P116, vivify_758
    new $P116, "Undef"
  vivify_758:
    defined $I101, $P116
    unless $I101, if_1139_end
.annotate 'line', 239
    set $P117, $P1137
    unless_null $P117, vivify_759
    new $P117, "Undef"
  vivify_759:
    get_hll_global $P118, "GLOBAL"
    nqp_get_package_through_who $P119, $P118, "PAST"
    get_who $P120, $P119
    set $P121, $P120["Val"]
    find_lex $P122, "$name"
    unless_null $P122, vivify_760
    new $P122, "Undef"
  vivify_760:
    $P123 = $P121."new"($P122 :named("value"), "name" :named("named"))
    $P117."push"($P123)
  if_1139_end:
.annotate 'line', 241
    find_lex $P116, "$repr"
    unless_null $P116, vivify_761
    new $P116, "Undef"
  vivify_761:
    defined $I101, $P116
    unless $I101, if_1140_end
.annotate 'line', 242
    set $P117, $P1137
    unless_null $P117, vivify_762
    new $P117, "Undef"
  vivify_762:
    get_hll_global $P118, "GLOBAL"
    nqp_get_package_through_who $P119, $P118, "PAST"
    get_who $P120, $P119
    set $P121, $P120["Val"]
    find_lex $P122, "$repr"
    unless_null $P122, vivify_763
    new $P122, "Undef"
  vivify_763:
    $P123 = $P121."new"($P122 :named("value"), "repr" :named("named"))
    $P117."push"($P123)
  if_1140_end:
.annotate 'line', 244
    find_lex $P116, "self"
    nqp_decontainerize $P117, $P116
.annotate 'line', 245
    find_lex $P118, "self"
    nqp_decontainerize $P119, $P118
    find_lex $P120, "$slot"
    unless_null $P120, vivify_764
    new $P120, "Undef"
  vivify_764:
    set $P121, $P1137
    unless_null $P121, vivify_765
    new $P121, "Undef"
  vivify_765:
    $P122 = $P119."add_object_to_cur_sc_past"($P120, $P121)
.annotate 'line', 244
    $P123 = $P117."add_fixup_task"($P122 :named("deserialize_past"))
.annotate 'line', 231
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "pkg_add_attribute" :anon :subid("29_1329260321.776") :outer("13_1329260321.776")
    .param pmc param_1142
    .param pmc param_1143
    .param pmc param_1144
    .param pmc param_1145
    .param pmc param_1146
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 257
    .const 'Sub' $P1153 = "30_1329260321.776" 
    capture_lex $P1153
    .lex "self", param_1142
    .lex "$obj", param_1143
    .lex "$meta_attr", param_1144
    .lex "%lit_args", param_1145
    .lex "%obj_args", param_1146
.annotate 'line', 259
    new $P105, "Undef"
    set $P1147, $P105
    .lex "$attr", $P1147
    set $P106, param_1144
    unless_null $P106, vivify_767
    new $P106, "Undef"
  vivify_767:
    set $P1148, param_1145
    unless_null $P1148, vivify_768
    $P1148 = root_new ['parrot';'Hash']
  vivify_768:
    set $P1149, param_1146
    unless_null $P1149, vivify_769
    $P1149 = root_new ['parrot';'Hash']
  vivify_769:
    $P107 = $P106."new"($P1148 :flat, $P1149 :flat)
    set $P1147, $P107
.annotate 'line', 260
    set $P106, param_1143
    unless_null $P106, vivify_770
    new $P106, "Undef"
  vivify_770:
    get_how $P107, $P106
    set $P108, param_1143
    unless_null $P108, vivify_771
    new $P108, "Undef"
  vivify_771:
    set $P109, $P1147
    unless_null $P109, vivify_772
    new $P109, "Undef"
  vivify_772:
    $P107."add_attribute"($P108, $P109)
.annotate 'line', 263
    set $P108, param_1142
    nqp_decontainerize $P109, $P108
    $P110 = $P109."is_precompilation_mode"()
    if $P110, if_1151
    set $P107, $P110
    goto if_1151_end
  if_1151:
    find_lex $P111, "$NEW_SER"
    unless_null $P111, vivify_773
    new $P111, "Undef"
  vivify_773:
    isfalse $I100, $P111
    new $P107, 'Integer'
    set $P107, $I100
  if_1151_end:
    if $P107, if_1150
    set $P106, $P107
    goto if_1150_end
  if_1150:
    .const 'Sub' $P1153 = "30_1329260321.776" 
    capture_lex $P1153
    $P114 = $P1153()
    set $P106, $P114
  if_1150_end:
.annotate 'line', 257
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1152"  :anon :subid("30_1329260321.776") :outer("29_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 263
    .const 'Sub' $P1163 = "32_1329260321.776" 
    capture_lex $P1163
    .const 'Sub' $P1158 = "31_1329260321.776" 
    capture_lex $P1158
.annotate 'line', 264
    new $P112, "Undef"
    set $P1154, $P112
    .lex "$create_call", $P1154
.annotate 'line', 276
    new $P113, "Undef"
    set $P1155, $P113
    .lex "$obj_slot_past", $P1155
.annotate 'line', 264
    get_hll_global $P114, "GLOBAL"
    nqp_get_package_through_who $P115, $P114, "PAST"
    get_who $P116, $P115
    set $P117, $P116["Op"]
.annotate 'line', 266
    find_lex $P118, "self"
    nqp_decontainerize $P119, $P118
    find_lex $P120, "$meta_attr"
    unless_null $P120, vivify_774
    new $P120, "Undef"
  vivify_774:
    $P121 = $P119."get_ref"($P120)
    $P122 = $P117."new"($P121, "callmethod" :named("pasttype"), "new" :named("name"))
.annotate 'line', 264
    set $P1154, $P122
.annotate 'line', 268
    find_lex $P1156, "%lit_args"
    unless_null $P1156, vivify_775
    $P1156 = root_new ['parrot';'Hash']
  vivify_775:
    defined $I101, $P1156
    unless $I101, for_undef_776
    iter $P114, $P1156
    new $P116, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P116, loop1160_handler
    push_eh $P116
  loop1160_test:
    unless $P114, loop1160_done
    shift $P115, $P114
  loop1160_redo:
    .const 'Sub' $P1158 = "31_1329260321.776" 
    capture_lex $P1158
    $P1158($P115)
  loop1160_next:
    goto loop1160_test
  loop1160_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P117, exception, 'type'
    eq $P117, .CONTROL_LOOP_NEXT, loop1160_next
    eq $P117, .CONTROL_LOOP_REDO, loop1160_redo
  loop1160_done:
    pop_eh 
  for_undef_776:
.annotate 'line', 271
    find_lex $P1161, "%obj_args"
    unless_null $P1161, vivify_780
    $P1161 = root_new ['parrot';'Hash']
  vivify_780:
    defined $I101, $P1161
    unless $I101, for_undef_781
    iter $P114, $P1161
    new $P117, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P117, loop1166_handler
    push_eh $P117
  loop1166_test:
    unless $P114, loop1166_done
    shift $P115, $P114
  loop1166_redo:
    .const 'Sub' $P1163 = "32_1329260321.776" 
    capture_lex $P1163
    $P1163($P115)
  loop1166_next:
    goto loop1166_test
  loop1166_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P118, exception, 'type'
    eq $P118, .CONTROL_LOOP_NEXT, loop1166_next
    eq $P118, .CONTROL_LOOP_REDO, loop1166_redo
  loop1166_done:
    pop_eh 
  for_undef_781:
.annotate 'line', 276
    find_lex $P114, "self"
    nqp_decontainerize $P115, $P114
    find_lex $P116, "$obj"
    unless_null $P116, vivify_787
    new $P116, "Undef"
  vivify_787:
    $P117 = $P115."get_slot_past_for_object"($P116)
    set $P1155, $P117
.annotate 'line', 277
    find_lex $P114, "self"
    nqp_decontainerize $P115, $P114
    get_hll_global $P116, "GLOBAL"
    nqp_get_package_through_who $P117, $P116, "PAST"
    get_who $P118, $P117
    set $P119, $P118["Op"]
.annotate 'line', 279
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P122, $P121
    set $P123, $P122["Op"]
    set $P124, $P1155
    unless_null $P124, vivify_788
    new $P124, "Undef"
  vivify_788:
    $P125 = $P123."new"($P124, "get_how PP" :named("pirop"))
    set $P126, $P1155
    unless_null $P126, vivify_789
    new $P126, "Undef"
  vivify_789:
    set $P127, $P1154
    unless_null $P127, vivify_790
    new $P127, "Undef"
  vivify_790:
    $P128 = $P119."new"($P125, $P126, $P127, "callmethod" :named("pasttype"), "add_attribute" :named("name"))
.annotate 'line', 277
    $P129 = $P115."add_fixup_task"($P128 :named("deserialize_past"))
.annotate 'line', 263
    .return ($P129)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1157"  :anon :subid("31_1329260321.776") :outer("30_1329260321.776")
    .param pmc param_1159
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 268
    .lex "$_", param_1159
.annotate 'line', 269
    find_lex $P116, "$create_call"
    unless_null $P116, vivify_777
    new $P116, "Undef"
  vivify_777:
    get_hll_global $P117, "GLOBAL"
    nqp_get_package_through_who $P118, $P117, "PAST"
    get_who $P119, $P118
    set $P120, $P119["Val"]
    find_lex $P121, "$_"
    unless_null $P121, vivify_778
    new $P121, "Undef"
  vivify_778:
    $P122 = $P121."value"()
    find_lex $P123, "$_"
    unless_null $P123, vivify_779
    new $P123, "Undef"
  vivify_779:
    $P124 = $P123."key"()
    $P125 = $P120."new"($P122 :named("value"), $P124 :named("named"))
    $P126 = $P116."push"($P125)
.annotate 'line', 268
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1162"  :anon :subid("32_1329260321.776") :outer("30_1329260321.776")
    .param pmc param_1165
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 272
    new $P116, "Undef"
    set $P1164, $P116
    .lex "$lookup", $P1164
    .lex "$_", param_1165
    find_lex $P117, "self"
    nqp_decontainerize $P118, $P117
    find_lex $P119, "$_"
    unless_null $P119, vivify_782
    new $P119, "Undef"
  vivify_782:
    $P120 = $P119."value"()
    $P121 = $P118."get_ref"($P120)
    set $P1164, $P121
.annotate 'line', 273
    set $P117, $P1164
    unless_null $P117, vivify_783
    new $P117, "Undef"
  vivify_783:
    find_lex $P118, "$_"
    unless_null $P118, vivify_784
    new $P118, "Undef"
  vivify_784:
    $P119 = $P118."key"()
    $P117."named"($P119)
.annotate 'line', 274
    find_lex $P117, "$create_call"
    unless_null $P117, vivify_785
    new $P117, "Undef"
  vivify_785:
    set $P118, $P1164
    unless_null $P118, vivify_786
    new $P118, "Undef"
  vivify_786:
    $P119 = $P117."push"($P118)
.annotate 'line', 271
    .return ($P119)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "pkg_add_method" :anon :subid("33_1329260321.776") :outer("13_1329260321.776")
    .param pmc param_1168
    .param pmc param_1169
    .param pmc param_1170
    .param pmc param_1171
    .param pmc param_1172
    .param pmc param_1173
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 289
    .const 'Sub' $P1199 = "36_1329260321.776" 
    capture_lex $P1199
    .const 'Sub' $P1191 = "35_1329260321.776" 
    capture_lex $P1191
    .const 'Sub' $P1179 = "34_1329260321.776" 
    capture_lex $P1179
    .lex "self", param_1168
    .lex "$obj", param_1169
    .lex "$meta_method_name", param_1170
    .lex "$name", param_1171
    .lex "$method_past", param_1172
    .lex "$is_dispatcher", param_1173
.annotate 'line', 295
    new $P105, "Undef"
    set $P1174, $P105
    .lex "$stub_code", $P1174
.annotate 'line', 301
    new $P106, "Undef"
    set $P1175, $P106
    .lex "$fixups", $P1175
.annotate 'line', 302
    new $P107, "Undef"
    set $P1176, $P107
    .lex "$dummy", $P1176
.annotate 'line', 303
    new $P108, "Undef"
    set $P1177, $P108
    .lex "$code_ref_idx", $P1177
.annotate 'line', 295
    .const 'Sub' $P1179 = "34_1329260321.776" 
    newclosure $P1185, $P1179
    set $P1174, $P1185
.annotate 'line', 301
    get_hll_global $P109, "GLOBAL"
    nqp_get_package_through_who $P110, $P109, "PAST"
    get_who $P111, $P110
    set $P112, $P111["Stmts"]
    $P113 = $P112."new"()
    set $P1175, $P113
.annotate 'line', 289
    set $P109, $P1176
    unless_null $P109, vivify_795
    new $P109, "Undef"
  vivify_795:
    set $P109, $P1177
    unless_null $P109, vivify_796
    new $P109, "Undef"
  vivify_796:
.annotate 'line', 304
    set $P1187, param_1172
    unless_null $P1187, vivify_797
    $P1187 = root_new ['parrot';'Hash']
  vivify_797:
    set $P109, $P1187["compile_time_dummy"]
    unless_null $P109, vivify_798
    new $P109, "Undef"
  vivify_798:
    defined $I100, $P109
    if $I100, if_1186
.annotate 'line', 311
    set $P110, param_1173
    unless_null $P110, vivify_799
    new $P110, "Undef"
  vivify_799:
    if $P110, if_1189
.annotate 'line', 327
    set $P111, $P1174
    unless_null $P111, vivify_800
    new $P111, "Undef"
  vivify_800:
    clone $P112, $P111
    set $P1176, $P112
.annotate 'line', 326
    goto if_1189_end
  if_1189:
.annotate 'line', 312
    set $P111, param_1172
    unless_null $P111, vivify_801
    new $P111, "Undef"
  vivify_801:
    $P111."pirflags"(":instanceof(\"DispatcherSub\")")
.annotate 'line', 313
    new $P111, "DispatcherSub"
    set $P112, $P1174
    unless_null $P112, vivify_802
    new $P112, "Undef"
  vivify_802:
    assign $P111, $P112
    set $P1176, $P111
.annotate 'line', 317
    set $P111, $P1176
    unless_null $P111, vivify_803
    new $P111, "Undef"
  vivify_803:
    .const 'Sub' $P1191 = "35_1329260321.776" 
    newclosure $P1194, $P1191
    setprop $P111, "CLONE_CALLBACK", $P1194
  if_1189_end:
.annotate 'line', 329
    set $P110, $P1176
    unless_null $P110, vivify_808
    new $P110, "Undef"
  vivify_808:
    set $P111, param_1171
    unless_null $P111, vivify_809
    new $P111, "Undef"
  vivify_809:
    set $S100, $P111
    assign $P110, $S100
.annotate 'line', 330
    find_lex $P110, "$NEW_SER"
    unless_null $P110, vivify_810
    new $P110, "Undef"
  vivify_810:
    if $P110, if_1195
.annotate 'line', 335
    set $P111, param_1168
    nqp_decontainerize $P112, $P111
    set $P113, $P1176
    unless_null $P113, vivify_811
    new $P113, "Undef"
  vivify_811:
    $P112."add_code_LEGACY"($P113)
.annotate 'line', 334
    goto if_1195_end
  if_1195:
.annotate 'line', 331
    set $P111, $P1176
    unless_null $P111, vivify_812
    new $P111, "Undef"
  vivify_812:
    set $P112, $P1176
    unless_null $P112, vivify_813
    new $P112, "Undef"
  vivify_813:
    setprop $P111, "STATIC_CODE_REF", $P112
.annotate 'line', 332
    set $P111, param_1168
    nqp_decontainerize $P112, $P111
    set $P113, $P1176
    unless_null $P113, vivify_814
    new $P113, "Undef"
  vivify_814:
    set $P114, param_1172
    unless_null $P114, vivify_815
    new $P114, "Undef"
  vivify_815:
    $P115 = $P112."add_root_code_ref"($P113, $P114)
    set $P1177, $P115
  if_1195_end:
.annotate 'line', 337
    set $P110, $P1176
    unless_null $P110, vivify_816
    new $P110, "Undef"
  vivify_816:
    set $P1196, param_1172
    unless_null $P1196, vivify_817
    $P1196 = root_new ['parrot';'Hash']
    set param_1172, $P1196
  vivify_817:
    set $P1196["compile_time_dummy"], $P110
.annotate 'line', 307
    goto if_1186_end
  if_1186:
.annotate 'line', 305
    set $P1188, param_1172
    unless_null $P1188, vivify_818
    $P1188 = root_new ['parrot';'Hash']
  vivify_818:
    set $P110, $P1188["compile_time_dummy"]
    unless_null $P110, vivify_819
    new $P110, "Undef"
  vivify_819:
    set $P1176, $P110
  if_1186_end:
.annotate 'line', 341
    set $P109, $P1176
    unless_null $P109, vivify_820
    new $P109, "Undef"
  vivify_820:
    set $P110, param_1172
    unless_null $P110, vivify_821
    new $P110, "Undef"
  vivify_821:
    setprop $P109, "PAST", $P110
.annotate 'line', 344
    set $P109, param_1169
    unless_null $P109, vivify_822
    new $P109, "Undef"
  vivify_822:
    get_how $P110, $P109
    set $P111, param_1169
    unless_null $P111, vivify_823
    new $P111, "Undef"
  vivify_823:
    set $P112, param_1171
    unless_null $P112, vivify_824
    new $P112, "Undef"
  vivify_824:
    set $P113, $P1176
    unless_null $P113, vivify_825
    new $P113, "Undef"
  vivify_825:
    set $P114, param_1170
    unless_null $P114, vivify_826
    new $P114, "Undef"
  vivify_826:
    set $S100, $P114
    $P110.$S100($P111, $P112, $P113)
.annotate 'line', 349
    find_lex $P110, "$NEW_SER"
    unless_null $P110, vivify_827
    new $P110, "Undef"
  vivify_827:
    if $P110, if_1197
.annotate 'line', 355
    .const 'Sub' $P1199 = "36_1329260321.776" 
    capture_lex $P1199
    $P112 = $P1199()
    set $P109, $P112
.annotate 'line', 349
    goto if_1197_end
  if_1197:
.annotate 'line', 350
    set $P111, $P1175
    unless_null $P111, vivify_838
    new $P111, "Undef"
  vivify_838:
    get_hll_global $P112, "GLOBAL"
    nqp_get_package_through_who $P113, $P112, "PAST"
    get_who $P114, $P113
    set $P115, $P114["Op"]
.annotate 'line', 352
    set $P116, param_1168
    nqp_decontainerize $P117, $P116
    set $P118, $P1177
    unless_null $P118, vivify_839
    new $P118, "Undef"
  vivify_839:
    $P119 = $P117."get_slot_past_for_code_ref_at"($P118)
.annotate 'line', 353
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P122, $P121
    set $P123, $P122["Val"]
    set $P124, param_1172
    unless_null $P124, vivify_840
    new $P124, "Undef"
  vivify_840:
    $P125 = $P123."new"($P124 :named("value"))
    $P126 = $P115."new"($P119, $P125, "assign vPP" :named("pirop"))
.annotate 'line', 350
    $P127 = $P111."push"($P126)
.annotate 'line', 349
    set $P109, $P127
  if_1197_end:
.annotate 'line', 289
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1178"  :anon :subid("34_1329260321.776") :outer("33_1329260321.776")
    .param pmc param_1180 :slurpy
    .param pmc param_1181 :slurpy :named
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 295
    .lex "@args", param_1180
    .lex "%named", param_1181
.annotate 'line', 296
    new $P109, "Undef"
    set $P1182, $P109
    .lex "$compiled", $P1182
    get_hll_global $P110, "GLOBAL"
    nqp_get_package_through_who $P111, $P110, "PAST"
    get_who $P112, $P111
    set $P113, $P112["Compiler"]
    find_lex $P114, "$method_past"
    unless_null $P114, vivify_791
    new $P114, "Undef"
  vivify_791:
    $P115 = $P113."compile"($P114)
    set $P1182, $P115
.annotate 'line', 297
    set $P110, $P1182
    unless_null $P110, vivify_792
    new $P110, "Undef"
  vivify_792:
    set $P1183, param_1180
    unless_null $P1183, vivify_793
    $P1183 = root_new ['parrot';'ResizablePMCArray']
  vivify_793:
    set $P1184, param_1181
    unless_null $P1184, vivify_794
    $P1184 = root_new ['parrot';'Hash']
  vivify_794:
    $P111 = $P110($P1183 :flat, $P1184 :flat)
.annotate 'line', 295
    .return ($P111)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1190"  :anon :subid("35_1329260321.776") :outer("33_1329260321.776")
    .param pmc param_1192
    .param pmc param_1193
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 317
    .lex "$orig", param_1192
    .lex "$clone", param_1193
.annotate 'line', 318
    find_lex $P112, "self"
    nqp_decontainerize $P113, $P112
    set $P114, param_1193
    unless_null $P114, vivify_804
    new $P114, "Undef"
  vivify_804:
    $P113."add_code_LEGACY"($P114)
.annotate 'line', 319
    find_lex $P112, "$fixups"
    unless_null $P112, vivify_805
    new $P112, "Undef"
  vivify_805:
    get_hll_global $P113, "GLOBAL"
    nqp_get_package_through_who $P114, $P113, "PAST"
    get_who $P115, $P114
    set $P116, $P115["Op"]
.annotate 'line', 321
    find_lex $P117, "self"
    nqp_decontainerize $P118, $P117
    set $P119, param_1193
    unless_null $P119, vivify_806
    new $P119, "Undef"
  vivify_806:
    $P120 = $P118."get_slot_past_for_object"($P119)
.annotate 'line', 322
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "PAST"
    get_who $P123, $P122
    set $P124, $P123["Val"]
    set $P125, param_1192
    unless_null $P125, vivify_807
    new $P125, "Undef"
  vivify_807:
    getprop $P126, "PAST", $P125
    $P127 = $P124."new"($P126 :named("value"))
    $P128 = $P116."new"($P120, $P127, "assign vPP" :named("pirop"))
.annotate 'line', 319
    $P129 = $P112."push"($P128)
.annotate 'line', 317
    .return ($P129)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1198"  :anon :subid("36_1329260321.776") :outer("33_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 363
    new $P111, "Undef"
    set $P1200, $P111
    .lex "$slot_past", $P1200
.annotate 'line', 357
    find_lex $P112, "$fixups"
    unless_null $P112, vivify_828
    new $P112, "Undef"
  vivify_828:
    get_hll_global $P113, "GLOBAL"
    nqp_get_package_through_who $P114, $P113, "PAST"
    get_who $P115, $P114
    set $P116, $P115["Op"]
.annotate 'line', 359
    find_lex $P117, "self"
    nqp_decontainerize $P118, $P117
    find_lex $P119, "$dummy"
    unless_null $P119, vivify_829
    new $P119, "Undef"
  vivify_829:
    $P120 = $P118."get_slot_past_for_object"($P119)
.annotate 'line', 360
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "PAST"
    get_who $P123, $P122
    set $P124, $P123["Val"]
    find_lex $P125, "$method_past"
    unless_null $P125, vivify_830
    new $P125, "Undef"
  vivify_830:
    $P126 = $P124."new"($P125 :named("value"))
    $P128 = $P116."new"($P120, $P126, "assign vPP" :named("pirop"))
.annotate 'line', 357
    $P112."push"($P128)
.annotate 'line', 363
    find_lex $P112, "self"
    nqp_decontainerize $P113, $P112
    find_lex $P114, "$obj"
    unless_null $P114, vivify_831
    new $P114, "Undef"
  vivify_831:
    $P115 = $P113."get_slot_past_for_object"($P114)
    set $P1200, $P115
.annotate 'line', 364
    find_lex $P112, "self"
    nqp_decontainerize $P113, $P112
.annotate 'line', 365
    get_hll_global $P114, "GLOBAL"
    nqp_get_package_through_who $P115, $P114, "PAST"
    get_who $P116, $P115
    set $P117, $P116["Op"]
    find_lex $P118, "$meta_method_name"
    unless_null $P118, vivify_832
    new $P118, "Undef"
  vivify_832:
.annotate 'line', 367
    get_hll_global $P119, "GLOBAL"
    nqp_get_package_through_who $P120, $P119, "PAST"
    get_who $P121, $P120
    set $P122, $P121["Op"]
    set $P123, $P1200
    unless_null $P123, vivify_833
    new $P123, "Undef"
  vivify_833:
    $P124 = $P122."new"($P123, "get_how PP" :named("pirop"))
    set $P125, $P1200
    unless_null $P125, vivify_834
    new $P125, "Undef"
  vivify_834:
    find_lex $P126, "$name"
    unless_null $P126, vivify_835
    new $P126, "Undef"
  vivify_835:
.annotate 'line', 370
    get_hll_global $P128, "GLOBAL"
    nqp_get_package_through_who $P129, $P128, "PAST"
    get_who $P130, $P129
    set $P131, $P130["Val"]
    find_lex $P132, "$method_past"
    unless_null $P132, vivify_836
    new $P132, "Undef"
  vivify_836:
    $P133 = $P131."new"($P132 :named("value"))
    $P134 = $P117."new"($P124, $P125, $P126, $P133, "callmethod" :named("pasttype"), $P118 :named("name"))
.annotate 'line', 364
    find_lex $P135, "$fixups"
    unless_null $P135, vivify_837
    new $P135, "Undef"
  vivify_837:
    $P136 = $P113."add_fixup_task"($P134 :named("deserialize_past"), $P135 :named("fixup_past"))
.annotate 'line', 355
    .return ($P136)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "set_routine_signature" :anon :subid("37_1329260321.776") :outer("13_1329260321.776")
    .param pmc param_1202
    .param pmc param_1203
    .param pmc param_1204
    .param pmc param_1205
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 377
    .const 'Sub' $P1225 = "41_1329260321.776" 
    capture_lex $P1225
    .const 'Sub' $P1212 = "38_1329260321.776" 
    capture_lex $P1212
    .lex "self", param_1202
    .lex "$routine", param_1203
    .lex "$types", param_1204
    .lex "$definednesses", param_1205
.annotate 'line', 379
    new $P105, "Undef"
    set $P1206, $P105
    .lex "$sig_type", $P1206
.annotate 'line', 380
    new $P106, "Undef"
    set $P1207, $P106
    .lex "$sig_obj", $P1207
.annotate 'line', 383
    new $P107, "Undef"
    set $P1208, $P107
    .lex "$slot", $P1208
.annotate 'line', 379
    set $P108, param_1202
    nqp_decontainerize $P109, $P108
    new $P110, "ResizablePMCArray"
    push $P110, "NQPSignature"
    $P111 = $P109."find_sym"($P110)
    set $P1206, $P111
.annotate 'line', 380
    set $P108, $P1206
    unless_null $P108, vivify_841
    new $P108, "Undef"
  vivify_841:
    repr_instance_of $P109, $P108
    set $P1207, $P109
.annotate 'line', 381
    set $P108, $P1207
    unless_null $P108, vivify_842
    new $P108, "Undef"
  vivify_842:
    set $P109, $P1206
    unless_null $P109, vivify_843
    new $P109, "Undef"
  vivify_843:
    set $P110, param_1204
    unless_null $P110, vivify_844
    new $P110, "Undef"
  vivify_844:
    setattribute $P108, $P109, "$!types", $P110
.annotate 'line', 382
    set $P108, $P1207
    unless_null $P108, vivify_845
    new $P108, "Undef"
  vivify_845:
    set $P109, $P1206
    unless_null $P109, vivify_846
    new $P109, "Undef"
  vivify_846:
    set $P110, param_1205
    unless_null $P110, vivify_847
    new $P110, "Undef"
  vivify_847:
    setattribute $P108, $P109, "$!definednesses", $P110
.annotate 'line', 383
    set $P108, param_1202
    nqp_decontainerize $P109, $P108
    set $P110, $P1207
    unless_null $P110, vivify_848
    new $P110, "Undef"
  vivify_848:
    $P111 = $P109."add_object"($P110)
    set $P1208, $P111
.annotate 'line', 385
    set $P109, param_1202
    nqp_decontainerize $P110, $P109
    $P111 = $P110."is_precompilation_mode"()
    if $P111, if_1209
.annotate 'line', 416
    .const 'Sub' $P1225 = "41_1329260321.776" 
    capture_lex $P1225
    $P113 = $P1225()
    set $P108, $P113
.annotate 'line', 385
    goto if_1209_end
  if_1209:
.annotate 'line', 386
    find_lex $P112, "$NEW_SER"
    unless_null $P112, vivify_858
    new $P112, "Undef"
  vivify_858:
    if $P112, unless_1210_end
    .const 'Sub' $P1212 = "38_1329260321.776" 
    capture_lex $P1212
    $P1212()
  unless_1210_end:
.annotate 'line', 410
    set $P112, param_1202
    nqp_decontainerize $P113, $P112
    get_hll_global $P114, "GLOBAL"
    nqp_get_package_through_who $P115, $P114, "PAST"
    get_who $P116, $P115
    set $P117, $P116["Op"]
.annotate 'line', 412
    get_hll_global $P118, "GLOBAL"
    nqp_get_package_through_who $P119, $P118, "PAST"
    get_who $P120, $P119
    set $P121, $P120["Val"]
    set $P122, param_1203
    unless_null $P122, vivify_877
    new $P122, "Undef"
  vivify_877:
    $P123 = $P121."new"($P122 :named("value"))
.annotate 'line', 413
    set $P124, param_1202
    nqp_decontainerize $P125, $P124
    set $P126, $P1207
    unless_null $P126, vivify_878
    new $P126, "Undef"
  vivify_878:
    $P127 = $P125."get_ref"($P126)
    $P128 = $P117."new"($P123, $P127, "set_sub_multisig vPP" :named("pirop"))
.annotate 'line', 410
    $P129 = $P113."add_fixup_task"($P128 :named("deserialize_past"))
.annotate 'line', 385
    set $P108, $P129
  if_1209_end:
.annotate 'line', 377
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1224"  :anon :subid("41_1329260321.776") :outer("37_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 419
    new $P112, "Undef"
    set $P1226, $P112
    .lex "$fixup", $P1226
    get_hll_global $P113, "GLOBAL"
    nqp_get_package_through_who $P114, $P113, "PAST"
    get_who $P115, $P114
    set $P116, $P115["Op"]
    find_lex $P117, "self"
    nqp_decontainerize $P118, $P117
    find_lex $P119, "$sig_obj"
    unless_null $P119, vivify_849
    new $P119, "Undef"
  vivify_849:
    $P120 = $P118."get_ref"($P119)
    $P121 = $P116."new"($P120, "set_sub_multisig vPP" :named("pirop"))
    set $P1226, $P121
.annotate 'line', 420
    find_lex $P1228, "$routine"
    unless_null $P1228, vivify_850
    $P1228 = root_new ['parrot';'Hash']
  vivify_850:
    set $P113, $P1228["compile_time_dummy"]
    unless_null $P113, vivify_851
    new $P113, "Undef"
  vivify_851:
    defined $I100, $P113
    if $I100, if_1227
.annotate 'line', 424
    set $P114, $P1226
    unless_null $P114, vivify_852
    new $P114, "Undef"
  vivify_852:
    get_hll_global $P115, "GLOBAL"
    nqp_get_package_through_who $P116, $P115, "PAST"
    get_who $P117, $P116
    set $P118, $P117["Val"]
    find_lex $P119, "$routine"
    unless_null $P119, vivify_853
    new $P119, "Undef"
  vivify_853:
    $P120 = $P118."new"($P119 :named("value"))
    $P114."unshift"($P120)
.annotate 'line', 423
    goto if_1227_end
  if_1227:
.annotate 'line', 421
    set $P114, $P1226
    unless_null $P114, vivify_854
    new $P114, "Undef"
  vivify_854:
    find_lex $P115, "self"
    nqp_decontainerize $P116, $P115
    find_lex $P1229, "$routine"
    unless_null $P1229, vivify_855
    $P1229 = root_new ['parrot';'Hash']
  vivify_855:
    set $P117, $P1229["compile_time_dummy"]
    unless_null $P117, vivify_856
    new $P117, "Undef"
  vivify_856:
    $P118 = $P116."get_slot_past_for_object"($P117)
    $P114."unshift"($P118)
  if_1227_end:
.annotate 'line', 426
    find_lex $P113, "self"
    nqp_decontainerize $P114, $P113
    set $P115, $P1226
    unless_null $P115, vivify_857
    new $P115, "Undef"
  vivify_857:
    $P116 = $P114."add_fixup_task"($P115 :named("fixup_past"))
.annotate 'line', 416
    .return ($P116)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1211"  :anon :subid("38_1329260321.776") :outer("37_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 386
    .const 'Sub' $P1221 = "40_1329260321.776" 
    capture_lex $P1221
    .const 'Sub' $P1216 = "39_1329260321.776" 
    capture_lex $P1216
.annotate 'line', 387
    new $P113, "Undef"
    set $P1213, $P113
    .lex "$types_past", $P1213
.annotate 'line', 388
    new $P114, "Undef"
    set $P1214, $P114
    .lex "$definednesses_past", $P1214
.annotate 'line', 387
    get_hll_global $P115, "GLOBAL"
    nqp_get_package_through_who $P116, $P115, "PAST"
    get_who $P117, $P116
    set $P118, $P117["Op"]
    $P119 = $P118."new"("list" :named("pasttype"))
    set $P1213, $P119
.annotate 'line', 388
    get_hll_global $P115, "GLOBAL"
    nqp_get_package_through_who $P116, $P115, "PAST"
    get_who $P117, $P116
    set $P118, $P117["Op"]
    $P119 = $P118."new"("list" :named("pasttype"))
    set $P1214, $P119
.annotate 'line', 389
    find_lex $P116, "$types"
    unless_null $P116, vivify_859
    new $P116, "Undef"
  vivify_859:
    defined $I100, $P116
    unless $I100, for_undef_860
    iter $P115, $P116
    new $P118, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P118, loop1219_handler
    push_eh $P118
  loop1219_test:
    unless $P115, loop1219_done
    shift $P117, $P115
  loop1219_redo:
    .const 'Sub' $P1216 = "39_1329260321.776" 
    capture_lex $P1216
    $P1216($P117)
  loop1219_next:
    goto loop1219_test
  loop1219_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P119, exception, 'type'
    eq $P119, .CONTROL_LOOP_NEXT, loop1219_next
    eq $P119, .CONTROL_LOOP_REDO, loop1219_redo
  loop1219_done:
    pop_eh 
  for_undef_860:
.annotate 'line', 392
    find_lex $P116, "$definednesses"
    unless_null $P116, vivify_865
    new $P116, "Undef"
  vivify_865:
    defined $I100, $P116
    unless $I100, for_undef_866
    iter $P115, $P116
    new $P118, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P118, loop1223_handler
    push_eh $P118
  loop1223_test:
    unless $P115, loop1223_done
    shift $P117, $P115
  loop1223_redo:
    .const 'Sub' $P1221 = "40_1329260321.776" 
    capture_lex $P1221
    $P1221($P117)
  loop1223_next:
    goto loop1223_test
  loop1223_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P119, exception, 'type'
    eq $P119, .CONTROL_LOOP_NEXT, loop1223_next
    eq $P119, .CONTROL_LOOP_REDO, loop1223_redo
  loop1223_done:
    pop_eh 
  for_undef_866:
.annotate 'line', 395
    find_lex $P115, "self"
    nqp_decontainerize $P116, $P115
    get_hll_global $P117, "GLOBAL"
    nqp_get_package_through_who $P118, $P117, "PAST"
    get_who $P119, $P118
    set $P120, $P119["Stmts"]
.annotate 'line', 396
    find_lex $P121, "self"
    nqp_decontainerize $P122, $P121
    find_lex $P123, "$slot"
    unless_null $P123, vivify_869
    new $P123, "Undef"
  vivify_869:
.annotate 'line', 397
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Op"]
    find_lex $P128, "self"
    nqp_decontainerize $P129, $P128
    find_lex $P130, "$sig_type"
    unless_null $P130, vivify_870
    new $P130, "Undef"
  vivify_870:
    $P131 = $P129."get_ref"($P130)
    $P132 = $P127."new"($P131, "repr_instance_of__PP" :named("pirop"))
    $P133 = $P122."add_object_to_cur_sc_past"($P123, $P132)
.annotate 'line', 398
    get_hll_global $P134, "GLOBAL"
    nqp_get_package_through_who $P135, $P134, "PAST"
    get_who $P136, $P135
    set $P137, $P136["Op"]
.annotate 'line', 399
    find_lex $P138, "self"
    nqp_decontainerize $P139, $P138
    find_lex $P140, "$sig_obj"
    unless_null $P140, vivify_871
    new $P140, "Undef"
  vivify_871:
    $P141 = $P139."get_ref"($P140)
.annotate 'line', 400
    find_lex $P142, "self"
    nqp_decontainerize $P143, $P142
    find_lex $P144, "$sig_type"
    unless_null $P144, vivify_872
    new $P144, "Undef"
  vivify_872:
    $P145 = $P143."get_ref"($P144)
    set $P146, $P1213
    unless_null $P146, vivify_873
    new $P146, "Undef"
  vivify_873:
    $P147 = $P137."new"($P141, $P145, "$!types", $P146, "setattribute__vPPsP" :named("pirop"))
.annotate 'line', 403
    get_hll_global $P148, "GLOBAL"
    nqp_get_package_through_who $P149, $P148, "PAST"
    get_who $P150, $P149
    set $P151, $P150["Op"]
.annotate 'line', 404
    find_lex $P152, "self"
    nqp_decontainerize $P153, $P152
    find_lex $P154, "$sig_obj"
    unless_null $P154, vivify_874
    new $P154, "Undef"
  vivify_874:
    $P155 = $P153."get_ref"($P154)
.annotate 'line', 405
    find_lex $P156, "self"
    nqp_decontainerize $P157, $P156
    find_lex $P158, "$sig_type"
    unless_null $P158, vivify_875
    new $P158, "Undef"
  vivify_875:
    $P159 = $P157."get_ref"($P158)
    set $P160, $P1214
    unless_null $P160, vivify_876
    new $P160, "Undef"
  vivify_876:
    $P161 = $P151."new"($P155, $P159, "$!definednesses", $P160, "setattribute__vPPsP" :named("pirop"))
.annotate 'line', 403
    $P162 = $P120."new"($P133, $P147, $P161)
.annotate 'line', 395
    $P163 = $P116."add_fixup_task"($P162 :named("deserialize_past"))
.annotate 'line', 386
    .return ($P163)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1215"  :anon :subid("39_1329260321.776") :outer("38_1329260321.776")
    .param pmc param_1217
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 389
    .lex "$_", param_1217
.annotate 'line', 390
    find_lex $P118, "$types_past"
    unless_null $P118, vivify_861
    new $P118, "Undef"
  vivify_861:
    find_lex $P120, "$_"
    unless_null $P120, vivify_862
    new $P120, "Undef"
  vivify_862:
    isa $I101, $P120, "Undef"
    if $I101, if_1218
    find_lex $P122, "self"
    nqp_decontainerize $P123, $P122
    find_lex $P124, "$_"
    unless_null $P124, vivify_863
    new $P124, "Undef"
  vivify_863:
    $P125 = $P123."get_ref"($P124)
    set $P119, $P125
    goto if_1218_end
  if_1218:
    find_lex $P121, "$_"
    unless_null $P121, vivify_864
    new $P121, "Undef"
  vivify_864:
    set $P119, $P121
  if_1218_end:
    $P126 = $P118."push"($P119)
.annotate 'line', 389
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1220"  :anon :subid("40_1329260321.776") :outer("38_1329260321.776")
    .param pmc param_1222
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 392
    .lex "$_", param_1222
.annotate 'line', 393
    find_lex $P118, "$definednesses_past"
    unless_null $P118, vivify_867
    new $P118, "Undef"
  vivify_867:
    find_lex $P119, "$_"
    unless_null $P119, vivify_868
    new $P119, "Undef"
  vivify_868:
    $P120 = $P118."push"($P119)
.annotate 'line', 392
    .return ($P120)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "pkg_set_body_block" :anon :subid("42_1329260321.776") :outer("13_1329260321.776")
    .param pmc param_1231
    .param pmc param_1232
    .param pmc param_1233
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 431
    .const 'Sub' $P1239 = "43_1329260321.776" 
    capture_lex $P1239
    .lex "self", param_1231
    .lex "$obj", param_1232
    .lex "$body_past", param_1233
.annotate 'line', 442
    new $P105, "Undef"
    set $P1234, $P105
    .lex "$fixups", $P1234
.annotate 'line', 443
    new $P106, "Undef"
    set $P1235, $P106
    .lex "$dummy", $P1235
.annotate 'line', 478
    new $P107, "Undef"
    set $P1236, $P107
    .lex "$slot_past", $P1236
.annotate 'line', 479
    new $P108, "Undef"
    set $P1237, $P108
    .lex "$des", $P1237
.annotate 'line', 442
    get_hll_global $P109, "GLOBAL"
    nqp_get_package_through_who $P110, $P109, "PAST"
    get_who $P111, $P110
    set $P112, $P111["Stmts"]
    $P113 = $P112."new"()
    set $P1234, $P113
.annotate 'line', 443
    .const 'Sub' $P1239 = "43_1329260321.776" 
    newclosure $P1256, $P1239
    set $P1235, $P1256
.annotate 'line', 475
    set $P109, param_1232
    unless_null $P109, vivify_896
    new $P109, "Undef"
  vivify_896:
    get_how $P110, $P109
    set $P111, param_1232
    unless_null $P111, vivify_897
    new $P111, "Undef"
  vivify_897:
    set $P112, $P1235
    unless_null $P112, vivify_898
    new $P112, "Undef"
  vivify_898:
    $P110."set_body_block"($P111, $P112)
.annotate 'line', 478
    set $P109, param_1231
    nqp_decontainerize $P110, $P109
    set $P111, param_1232
    unless_null $P111, vivify_899
    new $P111, "Undef"
  vivify_899:
    $P112 = $P110."get_slot_past_for_object"($P111)
    set $P1236, $P112
.annotate 'line', 479
    get_hll_global $P109, "GLOBAL"
    nqp_get_package_through_who $P110, $P109, "PAST"
    get_who $P111, $P110
    set $P112, $P111["Op"]
.annotate 'line', 481
    get_hll_global $P113, "GLOBAL"
    nqp_get_package_through_who $P114, $P113, "PAST"
    get_who $P115, $P114
    set $P116, $P115["Op"]
    set $P117, $P1236
    unless_null $P117, vivify_900
    new $P117, "Undef"
  vivify_900:
    $P118 = $P116."new"($P117, "get_how PP" :named("pirop"))
    set $P119, $P1236
    unless_null $P119, vivify_901
    new $P119, "Undef"
  vivify_901:
.annotate 'line', 483
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P122, $P121
    set $P123, $P122["Val"]
    set $P124, param_1233
    unless_null $P124, vivify_902
    new $P124, "Undef"
  vivify_902:
    $P125 = $P123."new"($P124 :named("value"))
    $P126 = $P112."new"($P118, $P119, $P125, "callmethod" :named("pasttype"), "set_body_block" :named("name"))
.annotate 'line', 479
    set $P1237, $P126
.annotate 'line', 486
    set $P109, param_1231
    nqp_decontainerize $P110, $P109
    set $P111, $P1237
    unless_null $P111, vivify_903
    new $P111, "Undef"
  vivify_903:
    set $P112, $P1234
    unless_null $P112, vivify_904
    new $P112, "Undef"
  vivify_904:
    $P113 = $P110."add_fixup_task"($P111 :named("deserialize_past"), $P112 :named("fixup_past"))
.annotate 'line', 431
    .return ($P113)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1238"  :anon :subid("43_1329260321.776") :outer("42_1329260321.776")
    .param pmc param_1240 :slurpy
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 443
    .const 'Sub' $P1248 = "45_1329260321.776" 
    capture_lex $P1248
    .const 'Sub' $P1244 = "44_1329260321.776" 
    capture_lex $P1244
    .lex "@type_args", param_1240
.annotate 'line', 445
    new $P109, "Undef"
    set $P1241, $P109
    .lex "$invoke_body", $P1241
    get_hll_global $P110, "GLOBAL"
    nqp_get_package_through_who $P111, $P110, "PAST"
    get_who $P112, $P111
    set $P113, $P112["Op"]
.annotate 'line', 447
    get_hll_global $P114, "GLOBAL"
    nqp_get_package_through_who $P115, $P114, "PAST"
    get_who $P116, $P115
    set $P117, $P116["Val"]
    find_lex $P118, "$body_past"
    unless_null $P118, vivify_879
    new $P118, "Undef"
  vivify_879:
    $P119 = $P117."new"($P118 :named("value"))
    $P120 = $P113."new"($P119, "call" :named("pasttype"))
.annotate 'line', 445
    set $P1241, $P120
.annotate 'line', 449
    set $P1242, param_1240
    unless_null $P1242, vivify_880
    $P1242 = root_new ['parrot';'ResizablePMCArray']
  vivify_880:
    defined $I100, $P1242
    unless $I100, for_undef_881
    iter $P110, $P1242
    new $P112, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P112, loop1246_handler
    push_eh $P112
  loop1246_test:
    unless $P110, loop1246_done
    shift $P111, $P110
  loop1246_redo:
    .const 'Sub' $P1244 = "44_1329260321.776" 
    capture_lex $P1244
    $P1244($P111)
  loop1246_next:
    goto loop1246_test
  loop1246_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P113, exception, 'type'
    eq $P113, .CONTROL_LOOP_NEXT, loop1246_next
    eq $P113, .CONTROL_LOOP_REDO, loop1246_redo
  loop1246_done:
    pop_eh 
  for_undef_881:
.annotate 'line', 452
    find_lex $P110, "$fixups"
    unless_null $P110, vivify_884
    new $P110, "Undef"
  vivify_884:
    set $P111, $P1241
    unless_null $P111, vivify_885
    new $P111, "Undef"
  vivify_885:
    $P110."push"($P111)
.annotate 'line', 455
    find_lex $P111, "$obj"
    unless_null $P111, vivify_886
    new $P111, "Undef"
  vivify_886:
    get_how $P112, $P111
    find_lex $P113, "$obj"
    unless_null $P113, vivify_887
    new $P113, "Undef"
  vivify_887:
    $P114 = $P112."methods"($P113, 1 :named("local"))
    defined $I100, $P114
    unless $I100, for_undef_888
    iter $P110, $P114
    new $P116, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P116, loop1255_handler
    push_eh $P116
  loop1255_test:
    unless $P110, loop1255_done
    shift $P115, $P110
  loop1255_redo:
    .const 'Sub' $P1248 = "45_1329260321.776" 
    capture_lex $P1248
    $P1248($P115)
  loop1255_next:
    goto loop1255_test
  loop1255_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P117, exception, 'type'
    eq $P117, .CONTROL_LOOP_NEXT, loop1255_next
    eq $P117, .CONTROL_LOOP_REDO, loop1255_redo
  loop1255_done:
    pop_eh 
  for_undef_888:
.annotate 'line', 443
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1243"  :anon :subid("44_1329260321.776") :outer("43_1329260321.776")
    .param pmc param_1245
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 449
    .lex "$_", param_1245
.annotate 'line', 450
    find_lex $P112, "$invoke_body"
    unless_null $P112, vivify_882
    new $P112, "Undef"
  vivify_882:
    find_lex $P113, "self"
    nqp_decontainerize $P114, $P113
    find_lex $P115, "$_"
    unless_null $P115, vivify_883
    new $P115, "Undef"
  vivify_883:
    $P116 = $P114."get_slot_past_for_object"($P115)
    $P117 = $P112."push"($P116)
.annotate 'line', 449
    .return ($P117)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1247"  :anon :subid("45_1329260321.776") :outer("43_1329260321.776")
    .param pmc param_1249
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 455
    .const 'Sub' $P1251 = "46_1329260321.776" 
    capture_lex $P1251
    .lex "$_", param_1249
.annotate 'line', 456
    find_lex $P116, "$_"
    unless_null $P116, vivify_889
    new $P116, "Undef"
  vivify_889:
    .const 'Sub' $P1251 = "46_1329260321.776" 
    newclosure $P1254, $P1251
    setprop $P116, "REIFY_CALLBACK", $P1254
.annotate 'line', 455
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1250"  :anon :subid("46_1329260321.776") :outer("45_1329260321.776")
    .param pmc param_1252
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 456
    .lex "$meth", param_1252
.annotate 'line', 458
    new $P117, "Undef"
    set $P1253, $P117
    .lex "$clone", $P1253
    set $P118, param_1252
    unless_null $P118, vivify_890
    new $P118, "Undef"
  vivify_890:
    clone $P119, $P118
    set $P1253, $P119
.annotate 'line', 459
    find_lex $P118, "self"
    nqp_decontainerize $P119, $P118
    set $P120, $P1253
    unless_null $P120, vivify_891
    new $P120, "Undef"
  vivify_891:
    $P119."add_code_LEGACY"($P120)
.annotate 'line', 462
    find_lex $P118, "$fixups"
    unless_null $P118, vivify_892
    new $P118, "Undef"
  vivify_892:
    get_hll_global $P119, "GLOBAL"
    nqp_get_package_through_who $P120, $P119, "PAST"
    get_who $P121, $P120
    set $P122, $P121["Op"]
.annotate 'line', 464
    find_lex $P123, "self"
    nqp_decontainerize $P124, $P123
    set $P125, $P1253
    unless_null $P125, vivify_893
    new $P125, "Undef"
  vivify_893:
    $P126 = $P124."get_slot_past_for_object"($P125)
.annotate 'line', 465
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P128, $P127, "PAST"
    get_who $P129, $P128
    set $P130, $P129["Val"]
    set $P131, param_1252
    unless_null $P131, vivify_894
    new $P131, "Undef"
  vivify_894:
    getprop $P132, "PAST", $P131
    $P133 = $P130."new"($P132 :named("value"))
    $P134 = $P122."new"($P126, $P133, "assign vPP" :named("pirop"))
.annotate 'line', 462
    $P118."push"($P134)
.annotate 'line', 456
    set $P118, $P1253
    unless_null $P118, vivify_895
    new $P118, "Undef"
  vivify_895:
    .return ($P118)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "pkg_add_parent_or_role" :anon :subid("47_1329260321.776") :outer("13_1329260321.776")
    .param pmc param_1258
    .param pmc param_1259
    .param pmc param_1260
    .param pmc param_1261
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 491
    .const 'Sub' $P1265 = "48_1329260321.776" 
    capture_lex $P1265
    .lex "self", param_1258
    .lex "$obj", param_1259
    .lex "$meta_method_name", param_1260
    .lex "$to_add", param_1261
.annotate 'line', 493
    set $P105, param_1259
    unless_null $P105, vivify_905
    new $P105, "Undef"
  vivify_905:
    get_how $P106, $P105
    set $P107, param_1259
    unless_null $P107, vivify_906
    new $P107, "Undef"
  vivify_906:
    set $P108, param_1261
    unless_null $P108, vivify_907
    new $P108, "Undef"
  vivify_907:
    set $P109, param_1260
    unless_null $P109, vivify_908
    new $P109, "Undef"
  vivify_908:
    set $S100, $P109
    $P106.$S100($P107, $P108)
.annotate 'line', 496
    set $P107, param_1258
    nqp_decontainerize $P108, $P107
    $P109 = $P108."is_precompilation_mode"()
    if $P109, if_1263
    set $P106, $P109
    goto if_1263_end
  if_1263:
    find_lex $P110, "$NEW_SER"
    unless_null $P110, vivify_909
    new $P110, "Undef"
  vivify_909:
    isfalse $I100, $P110
    new $P106, 'Integer'
    set $P106, $I100
  if_1263_end:
    if $P106, if_1262
    set $P105, $P106
    goto if_1262_end
  if_1262:
    .const 'Sub' $P1265 = "48_1329260321.776" 
    capture_lex $P1265
    $P112 = $P1265()
    set $P105, $P112
  if_1262_end:
.annotate 'line', 491
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1264"  :anon :subid("48_1329260321.776") :outer("47_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 497
    new $P111, "Undef"
    set $P1266, $P111
    .lex "$slot_past", $P1266
    find_lex $P112, "self"
    nqp_decontainerize $P113, $P112
    find_lex $P114, "$obj"
    unless_null $P114, vivify_910
    new $P114, "Undef"
  vivify_910:
    $P115 = $P113."get_slot_past_for_object"($P114)
    set $P1266, $P115
.annotate 'line', 498
    find_lex $P112, "self"
    nqp_decontainerize $P113, $P112
    get_hll_global $P114, "GLOBAL"
    nqp_get_package_through_who $P115, $P114, "PAST"
    get_who $P116, $P115
    set $P117, $P116["Op"]
    find_lex $P118, "$meta_method_name"
    unless_null $P118, vivify_911
    new $P118, "Undef"
  vivify_911:
.annotate 'line', 500
    get_hll_global $P119, "GLOBAL"
    nqp_get_package_through_who $P120, $P119, "PAST"
    get_who $P121, $P120
    set $P122, $P121["Op"]
    set $P123, $P1266
    unless_null $P123, vivify_912
    new $P123, "Undef"
  vivify_912:
    $P124 = $P122."new"($P123, "get_how PP" :named("pirop"))
    set $P125, $P1266
    unless_null $P125, vivify_913
    new $P125, "Undef"
  vivify_913:
.annotate 'line', 502
    find_lex $P126, "self"
    nqp_decontainerize $P127, $P126
    find_lex $P128, "$to_add"
    unless_null $P128, vivify_914
    new $P128, "Undef"
  vivify_914:
    $P129 = $P127."get_ref"($P128)
    $P130 = $P117."new"($P124, $P125, $P129, "callmethod" :named("pasttype"), $P118 :named("name"))
.annotate 'line', 498
    $P131 = $P113."add_fixup_task"($P130 :named("deserialize_past"))
.annotate 'line', 496
    .return ($P131)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "pkg_add_parrot_vtable_handler_mapping" :anon :subid("49_1329260321.776") :outer("13_1329260321.776")
    .param pmc param_1268
    .param pmc param_1269
    .param pmc param_1270
    .param pmc param_1271
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 507
    .const 'Sub' $P1274 = "50_1329260321.776" 
    capture_lex $P1274
    .lex "self", param_1268
    .lex "$obj", param_1269
    .lex "$name", param_1270
    .lex "$att_name", param_1271
.annotate 'line', 509
    set $P105, param_1269
    unless_null $P105, vivify_915
    new $P105, "Undef"
  vivify_915:
    get_how $P106, $P105
    set $P107, param_1269
    unless_null $P107, vivify_916
    new $P107, "Undef"
  vivify_916:
    set $P108, param_1270
    unless_null $P108, vivify_917
    new $P108, "Undef"
  vivify_917:
    set $P109, param_1271
    unless_null $P109, vivify_918
    new $P109, "Undef"
  vivify_918:
    $P106."add_parrot_vtable_handler_mapping"($P107, $P108, $P109)
.annotate 'line', 512
    set $P106, param_1268
    nqp_decontainerize $P107, $P106
    $P108 = $P107."is_precompilation_mode"()
    if $P108, if_1272
    set $P105, $P108
    goto if_1272_end
  if_1272:
    .const 'Sub' $P1274 = "50_1329260321.776" 
    capture_lex $P1274
    $P110 = $P1274()
    set $P105, $P110
  if_1272_end:
.annotate 'line', 507
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1273"  :anon :subid("50_1329260321.776") :outer("49_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 513
    new $P109, "Undef"
    set $P1275, $P109
    .lex "$slot_past", $P1275
    find_lex $P110, "self"
    nqp_decontainerize $P111, $P110
    find_lex $P112, "$obj"
    unless_null $P112, vivify_919
    new $P112, "Undef"
  vivify_919:
    $P113 = $P111."get_slot_past_for_object"($P112)
    set $P1275, $P113
.annotate 'line', 514
    find_lex $P110, "self"
    nqp_decontainerize $P111, $P110
    get_hll_global $P112, "GLOBAL"
    nqp_get_package_through_who $P113, $P112, "PAST"
    get_who $P114, $P113
    set $P115, $P114["Op"]
.annotate 'line', 516
    get_hll_global $P116, "GLOBAL"
    nqp_get_package_through_who $P117, $P116, "PAST"
    get_who $P118, $P117
    set $P119, $P118["Op"]
    set $P120, $P1275
    unless_null $P120, vivify_920
    new $P120, "Undef"
  vivify_920:
    $P121 = $P119."new"($P120, "get_how PP" :named("pirop"))
    set $P122, $P1275
    unless_null $P122, vivify_921
    new $P122, "Undef"
  vivify_921:
    find_lex $P123, "$name"
    unless_null $P123, vivify_922
    new $P123, "Undef"
  vivify_922:
    find_lex $P124, "$att_name"
    unless_null $P124, vivify_923
    new $P124, "Undef"
  vivify_923:
    $P125 = $P115."new"($P121, $P122, $P123, $P124, "callmethod" :named("pasttype"), "add_parrot_vtable_handler_mapping" :named("name"))
.annotate 'line', 514
    $P126 = $P111."add_fixup_task"($P125 :named("deserialize_past"))
.annotate 'line', 512
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "pkg_compose" :anon :subid("51_1329260321.776") :outer("13_1329260321.776")
    .param pmc param_1277
    .param pmc param_1278
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 524
    .const 'Sub' $P1282 = "52_1329260321.776" 
    capture_lex $P1282
    .lex "self", param_1277
    .lex "$obj", param_1278
.annotate 'line', 526
    set $P105, param_1278
    unless_null $P105, vivify_924
    new $P105, "Undef"
  vivify_924:
    get_how $P106, $P105
    set $P107, param_1278
    unless_null $P107, vivify_925
    new $P107, "Undef"
  vivify_925:
    $P106."compose"($P107)
.annotate 'line', 529
    set $P107, param_1277
    nqp_decontainerize $P108, $P107
    $P109 = $P108."is_precompilation_mode"()
    if $P109, if_1280
    set $P106, $P109
    goto if_1280_end
  if_1280:
    find_lex $P110, "$NEW_SER"
    unless_null $P110, vivify_926
    new $P110, "Undef"
  vivify_926:
    isfalse $I100, $P110
    new $P106, 'Integer'
    set $P106, $I100
  if_1280_end:
    if $P106, if_1279
    set $P105, $P106
    goto if_1279_end
  if_1279:
    .const 'Sub' $P1282 = "52_1329260321.776" 
    capture_lex $P1282
    $P112 = $P1282()
    set $P105, $P112
  if_1279_end:
.annotate 'line', 524
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1281"  :anon :subid("52_1329260321.776") :outer("51_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 530
    new $P111, "Undef"
    set $P1283, $P111
    .lex "$slot_past", $P1283
    find_lex $P112, "self"
    nqp_decontainerize $P113, $P112
    find_lex $P114, "$obj"
    unless_null $P114, vivify_927
    new $P114, "Undef"
  vivify_927:
    $P115 = $P113."get_slot_past_for_object"($P114)
    set $P1283, $P115
.annotate 'line', 531
    find_lex $P112, "self"
    nqp_decontainerize $P113, $P112
    get_hll_global $P114, "GLOBAL"
    nqp_get_package_through_who $P115, $P114, "PAST"
    get_who $P116, $P115
    set $P117, $P116["Op"]
.annotate 'line', 533
    get_hll_global $P118, "GLOBAL"
    nqp_get_package_through_who $P119, $P118, "PAST"
    get_who $P120, $P119
    set $P121, $P120["Op"]
    set $P122, $P1283
    unless_null $P122, vivify_928
    new $P122, "Undef"
  vivify_928:
    $P123 = $P121."new"($P122, "get_how PP" :named("pirop"))
    set $P124, $P1283
    unless_null $P124, vivify_929
    new $P124, "Undef"
  vivify_929:
    $P125 = $P117."new"($P123, $P124, "callmethod" :named("pasttype"), "compose" :named("name"))
.annotate 'line', 531
    $P126 = $P113."add_fixup_task"($P125 :named("deserialize_past"))
.annotate 'line', 529
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "to_past" :anon :subid("53_1329260321.776") :outer("13_1329260321.776")
    .param pmc param_1287
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 541
    .const 'Sub' $P1303 = "57_1329260321.776" 
    capture_lex $P1303
    .const 'Sub' $P1290 = "54_1329260321.776" 
    capture_lex $P1290
    new $P1286, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P1286, control_1285
    push_eh $P1286
    .lex "self", param_1287
.annotate 'line', 542
    set $P106, param_1287
    nqp_decontainerize $P107, $P106
    $P108 = $P107."is_precompilation_mode"()
    if $P108, if_1288
.annotate 'line', 577
    .const 'Sub' $P1303 = "57_1329260321.776" 
    capture_lex $P1303
    $P113 = $P1303()
    set $P105, $P113
.annotate 'line', 542
    goto if_1288_end
  if_1288:
    .const 'Sub' $P1290 = "54_1329260321.776" 
    capture_lex $P1290
    $P111 = $P1290()
    set $P105, $P111
  if_1288_end:
.annotate 'line', 541
    .return ($P105)
  control_1285:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P106, exception, "payload"
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1302"  :anon :subid("57_1329260321.776") :outer("53_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 577
    .const 'Sub' $P1310 = "59_1329260321.776" 
    capture_lex $P1310
    .const 'Sub' $P1306 = "58_1329260321.776" 
    capture_lex $P1306
.annotate 'line', 578
    new $P112, "Undef"
    set $P1304, $P112
    .lex "$tasks", $P1304
    get_hll_global $P113, "GLOBAL"
    nqp_get_package_through_who $P114, $P113, "PAST"
    get_who $P115, $P114
    set $P116, $P115["Stmts"]
    $P117 = $P116."new"()
    set $P1304, $P117
.annotate 'line', 579
    find_lex $P114, "self"
    nqp_decontainerize $P115, $P114
    $P116 = $P115."load_dependency_tasks"()
    defined $I100, $P116
    unless $I100, for_undef_930
    iter $P113, $P116
    new $P118, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P118, loop1308_handler
    push_eh $P118
  loop1308_test:
    unless $P113, loop1308_done
    shift $P117, $P113
  loop1308_redo:
    .const 'Sub' $P1306 = "58_1329260321.776" 
    capture_lex $P1306
    $P1306($P117)
  loop1308_next:
    goto loop1308_test
  loop1308_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P119, exception, 'type'
    eq $P119, .CONTROL_LOOP_NEXT, loop1308_next
    eq $P119, .CONTROL_LOOP_REDO, loop1308_redo
  loop1308_done:
    pop_eh 
  for_undef_930:
.annotate 'line', 582
    find_lex $P114, "self"
    nqp_decontainerize $P115, $P114
    $P116 = $P115."fixup_tasks"()
    defined $I100, $P116
    unless $I100, for_undef_933
    iter $P113, $P116
    new $P118, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P118, loop1312_handler
    push_eh $P118
  loop1312_test:
    unless $P113, loop1312_done
    shift $P117, $P113
  loop1312_redo:
    .const 'Sub' $P1310 = "59_1329260321.776" 
    capture_lex $P1310
    $P1310($P117)
  loop1312_next:
    goto loop1312_test
  loop1312_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P119, exception, 'type'
    eq $P119, .CONTROL_LOOP_NEXT, loop1312_next
    eq $P119, .CONTROL_LOOP_REDO, loop1312_redo
  loop1312_done:
    pop_eh 
  for_undef_933:
.annotate 'line', 585
    new $P113, "Exception"
    set $P113['type'], .CONTROL_RETURN
    set $P114, $P1304
    unless_null $P114, vivify_936
    new $P114, "Undef"
  vivify_936:
    setattribute $P113, 'payload', $P114
    throw $P113
.annotate 'line', 577
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1305"  :anon :subid("58_1329260321.776") :outer("57_1329260321.776")
    .param pmc param_1307
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 579
    .lex "$_", param_1307
.annotate 'line', 580
    find_lex $P118, "$tasks"
    unless_null $P118, vivify_931
    new $P118, "Undef"
  vivify_931:
    get_hll_global $P119, "GLOBAL"
    nqp_get_package_through_who $P120, $P119, "PAST"
    get_who $P121, $P120
    set $P122, $P121["Stmt"]
    find_lex $P123, "$_"
    unless_null $P123, vivify_932
    new $P123, "Undef"
  vivify_932:
    $P124 = $P122."new"($P123)
    $P125 = $P118."push"($P124)
.annotate 'line', 579
    .return ($P125)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1309"  :anon :subid("59_1329260321.776") :outer("57_1329260321.776")
    .param pmc param_1311
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 582
    .lex "$_", param_1311
.annotate 'line', 583
    find_lex $P118, "$tasks"
    unless_null $P118, vivify_934
    new $P118, "Undef"
  vivify_934:
    get_hll_global $P119, "GLOBAL"
    nqp_get_package_through_who $P120, $P119, "PAST"
    get_who $P121, $P120
    set $P122, $P121["Stmt"]
    find_lex $P123, "$_"
    unless_null $P123, vivify_935
    new $P123, "Undef"
  vivify_935:
    $P124 = $P122."new"($P123)
    $P125 = $P118."push"($P124)
.annotate 'line', 582
    .return ($P125)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1289"  :anon :subid("54_1329260321.776") :outer("53_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 542
    .const 'Sub' $P1298 = "56_1329260321.776" 
    capture_lex $P1298
    .const 'Sub' $P1294 = "55_1329260321.776" 
    capture_lex $P1294
.annotate 'line', 543
    new $P109, "Undef"
    set $P1291, $P109
    .lex "$load_tasks", $P1291
.annotate 'line', 547
    new $P110, "Undef"
    set $P1292, $P110
    .lex "$fixup_tasks", $P1292
.annotate 'line', 543
    get_hll_global $P111, "GLOBAL"
    nqp_get_package_through_who $P112, $P111, "PAST"
    get_who $P113, $P112
    set $P114, $P113["Stmts"]
    $P115 = $P114."new"()
    set $P1291, $P115
.annotate 'line', 544
    find_lex $P112, "self"
    nqp_decontainerize $P113, $P112
    $P114 = $P113."load_dependency_tasks"()
    defined $I100, $P114
    unless $I100, for_undef_937
    iter $P111, $P114
    new $P116, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P116, loop1296_handler
    push_eh $P116
  loop1296_test:
    unless $P111, loop1296_done
    shift $P115, $P111
  loop1296_redo:
    .const 'Sub' $P1294 = "55_1329260321.776" 
    capture_lex $P1294
    $P1294($P115)
  loop1296_next:
    goto loop1296_test
  loop1296_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P117, exception, 'type'
    eq $P117, .CONTROL_LOOP_NEXT, loop1296_next
    eq $P117, .CONTROL_LOOP_REDO, loop1296_redo
  loop1296_done:
    pop_eh 
  for_undef_937:
.annotate 'line', 547
    get_hll_global $P111, "GLOBAL"
    nqp_get_package_through_who $P112, $P111, "PAST"
    get_who $P113, $P112
    set $P114, $P113["Stmts"]
    $P115 = $P114."new"()
    set $P1292, $P115
.annotate 'line', 548
    find_lex $P112, "self"
    nqp_decontainerize $P113, $P112
    $P114 = $P113."fixup_tasks"()
    defined $I100, $P114
    unless $I100, for_undef_940
    iter $P111, $P114
    new $P116, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P116, loop1300_handler
    push_eh $P116
  loop1300_test:
    unless $P111, loop1300_done
    shift $P115, $P111
  loop1300_redo:
    .const 'Sub' $P1298 = "56_1329260321.776" 
    capture_lex $P1298
    $P1298($P115)
  loop1300_next:
    goto loop1300_test
  loop1300_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P117, exception, 'type'
    eq $P117, .CONTROL_LOOP_NEXT, loop1300_next
    eq $P117, .CONTROL_LOOP_REDO, loop1300_redo
  loop1300_done:
    pop_eh 
  for_undef_940:
.annotate 'line', 551
    new $P111, "Exception"
    set $P111['type'], .CONTROL_RETURN
    get_hll_global $P112, "GLOBAL"
    nqp_get_package_through_who $P113, $P112, "PAST"
    get_who $P114, $P113
    set $P115, $P114["Stmts"]
.annotate 'line', 552
    get_hll_global $P116, "GLOBAL"
    nqp_get_package_through_who $P117, $P116, "PAST"
    get_who $P118, $P117
    set $P119, $P118["Op"]
    $P120 = $P119."new"("nqp_dynop_setup v" :named("pirop"))
.annotate 'line', 553
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "PAST"
    get_who $P123, $P122
    set $P124, $P123["Op"]
    $P125 = $P124."new"("nqp_bigint_setup v" :named("pirop"))
.annotate 'line', 554
    get_hll_global $P126, "GLOBAL"
    nqp_get_package_through_who $P127, $P126, "PAST"
    get_who $P128, $P127
    set $P129, $P128["Op"]
.annotate 'line', 556
    get_hll_global $P130, "GLOBAL"
    nqp_get_package_through_who $P131, $P130, "PAST"
    get_who $P132, $P131
    set $P133, $P132["Op"]
    $P134 = $P133."new"("getinterp P" :named("pirop"))
.annotate 'line', 557
    get_hll_global $P135, "GLOBAL"
    nqp_get_package_through_who $P136, $P135, "PAST"
    get_who $P137, $P136
    set $P138, $P137["Op"]
    $P139 = $P138."new"("LexPad", "get_class Ps" :named("pirop"))
.annotate 'line', 558
    get_hll_global $P140, "GLOBAL"
    nqp_get_package_through_who $P141, $P140, "PAST"
    get_who $P142, $P141
    set $P143, $P142["Op"]
    $P144 = $P143."new"("NQPLexPad", "get_class Ps" :named("pirop"))
    $P145 = $P129."new"($P134, $P139, $P144, "callmethod" :named("pasttype"), "hll_map" :named("name"))
.annotate 'line', 560
    get_hll_global $P146, "GLOBAL"
    nqp_get_package_through_who $P147, $P146, "PAST"
    get_who $P148, $P147
    set $P149, $P148["Op"]
.annotate 'line', 562
    get_hll_global $P150, "GLOBAL"
    nqp_get_package_through_who $P151, $P150, "PAST"
    get_who $P152, $P151
    set $P153, $P152["Var"]
    $P154 = $P153."new"("cur_sc" :named("name"), "register" :named("scope"), 1 :named("isdecl"))
.annotate 'line', 563
    get_hll_global $P155, "GLOBAL"
    nqp_get_package_through_who $P156, $P155, "PAST"
    get_who $P157, $P156
    set $P158, $P157["Op"]
    find_lex $P159, "self"
    nqp_decontainerize $P160, $P159
    $P161 = $P160."handle"()
    $P162 = $P158."new"($P161, "nqp_create_sc Ps" :named("pirop"))
    $P163 = $P149."new"($P154, $P162, "bind_6model" :named("pasttype"))
.annotate 'line', 565
    get_hll_global $P164, "GLOBAL"
    nqp_get_package_through_who $P165, $P164, "PAST"
    get_who $P166, $P165
    set $P167, $P166["Op"]
.annotate 'line', 567
    get_hll_global $P168, "GLOBAL"
    nqp_get_package_through_who $P169, $P168, "PAST"
    get_who $P170, $P169
    set $P171, $P170["Var"]
    $P172 = $P171."new"("cur_sc" :named("name"), "register" :named("scope"))
.annotate 'line', 568
    find_lex $P173, "self"
    nqp_decontainerize $P174, $P173
    $P175 = $P174."sc"()
    $P176 = $P175."description"()
    $P177 = $P167."new"($P172, $P176, "callmethod" :named("pasttype"), "set_description" :named("name"))
.annotate 'line', 565
    set $P178, $P1291
    unless_null $P178, vivify_943
    new $P178, "Undef"
  vivify_943:
.annotate 'line', 571
    find_lex $P180, "$NEW_SER"
    unless_null $P180, vivify_944
    new $P180, "Undef"
  vivify_944:
    if $P180, if_1301
.annotate 'line', 573
    get_hll_global $P184, "GLOBAL"
    nqp_get_package_through_who $P185, $P184, "PAST"
    get_who $P186, $P185
    set $P187, $P186["Op"]
    $P188 = $P187."new"("null" :named("pasttype"))
    set $P179, $P188
.annotate 'line', 571
    goto if_1301_end
  if_1301:
.annotate 'line', 572
    find_lex $P181, "self"
    nqp_decontainerize $P182, $P181
    $P183 = $P182."serialize_and_produce_deserialization_past"("cur_sc")
    set $P179, $P183
  if_1301_end:
.annotate 'line', 571
    set $P189, $P1292
    unless_null $P189, vivify_945
    new $P189, "Undef"
  vivify_945:
    $P190 = $P115."new"($P120, $P125, $P145, $P163, $P177, $P178, $P179, $P189)
.annotate 'line', 551
    setattribute $P111, 'payload', $P190
    throw $P111
.annotate 'line', 542
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1293"  :anon :subid("55_1329260321.776") :outer("54_1329260321.776")
    .param pmc param_1295
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 544
    .lex "$_", param_1295
.annotate 'line', 545
    find_lex $P116, "$load_tasks"
    unless_null $P116, vivify_938
    new $P116, "Undef"
  vivify_938:
    get_hll_global $P117, "GLOBAL"
    nqp_get_package_through_who $P118, $P117, "PAST"
    get_who $P119, $P118
    set $P120, $P119["Stmt"]
    find_lex $P121, "$_"
    unless_null $P121, vivify_939
    new $P121, "Undef"
  vivify_939:
    $P122 = $P120."new"($P121)
    $P123 = $P116."push"($P122)
.annotate 'line', 544
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1297"  :anon :subid("56_1329260321.776") :outer("54_1329260321.776")
    .param pmc param_1299
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 548
    .lex "$_", param_1299
.annotate 'line', 549
    find_lex $P116, "$fixup_tasks"
    unless_null $P116, vivify_941
    new $P116, "Undef"
  vivify_941:
    get_hll_global $P117, "GLOBAL"
    nqp_get_package_through_who $P118, $P117, "PAST"
    get_who $P119, $P118
    set $P120, $P119["Stmt"]
    find_lex $P121, "$_"
    unless_null $P121, vivify_942
    new $P121, "Undef"
  vivify_942:
    $P122 = $P120."new"($P121)
    $P123 = $P116."push"($P122)
.annotate 'line', 548
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "is_lexical" :anon :subid("60_1329260321.776") :outer("13_1329260321.776")
    .param pmc param_1314
    .param pmc param_1315
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 591
    .lex "self", param_1314
    .lex "$name", param_1315
.annotate 'line', 592
    set $P105, param_1314
    nqp_decontainerize $P106, $P105
    set $P107, param_1315
    unless_null $P107, vivify_946
    new $P107, "Undef"
  vivify_946:
    $P108 = $P106."is_scope"($P107, "lexical")
.annotate 'line', 591
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "is_package" :anon :subid("61_1329260321.776") :outer("13_1329260321.776")
    .param pmc param_1317
    .param pmc param_1318
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 597
    .lex "self", param_1317
    .lex "$name", param_1318
.annotate 'line', 598
    set $P105, param_1317
    nqp_decontainerize $P106, $P105
    set $P107, param_1318
    unless_null $P107, vivify_947
    new $P107, "Undef"
  vivify_947:
    $P108 = $P106."is_scope"($P107, "package")
.annotate 'line', 597
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "is_scope" :anon :subid("62_1329260321.776") :outer("13_1329260321.776")
    .param pmc param_1322
    .param pmc param_1323
    .param pmc param_1324
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 603
    .const 'Sub' $P1328 = "63_1329260321.776" 
    capture_lex $P1328
    new $P1321, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P1321, control_1320
    push_eh $P1321
    .lex "self", param_1322
    .lex "$name", param_1323
    .lex "$wanted_scope", param_1324
.annotate 'line', 604
    new $P105, "Undef"
    set $P1325, $P105
    .lex "$i", $P1325
    set $P106, param_1322
    nqp_decontainerize $P107, $P106
    find_lex $P108, "$?CLASS"
    repr_get_attr_obj $P1326, $P107, $P108, "@!BLOCKS", 9
    unless_null $P1326, vivify_948
    $P1326 = root_new ['parrot';'ResizablePMCArray']
  vivify_948:
    set $N100, $P1326
    new $P109, 'Float'
    set $P109, $N100
    set $P1325, $P109
.annotate 'line', 605
    new $P108, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P108, loop1335_handler
    push_eh $P108
  loop1335_test:
    set $P106, $P1325
    unless_null $P106, vivify_949
    new $P106, "Undef"
  vivify_949:
    set $N100, $P106
    set $N101, 0
    isgt $I100, $N100, $N101
    unless $I100, loop1335_done
  loop1335_redo:
    .const 'Sub' $P1328 = "63_1329260321.776" 
    capture_lex $P1328
    $P1328()
  loop1335_next:
    goto loop1335_test
  loop1335_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P109, exception, 'type'
    eq $P109, .CONTROL_LOOP_NEXT, loop1335_next
    eq $P109, .CONTROL_LOOP_REDO, loop1335_redo
  loop1335_done:
    pop_eh 
.annotate 'line', 603
    .return (0)
  control_1320:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P106, exception, "payload"
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1327"  :anon :subid("63_1329260321.776") :outer("62_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 607
    $P1330 = root_new ['parrot';'Hash']
    set $P1329, $P1330
    .lex "%sym", $P1329
.annotate 'line', 606
    find_lex $P107, "$i"
    unless_null $P107, vivify_950
    new $P107, "Undef"
  vivify_950:
    sub $P108, $P107, 1
    store_lex "$i", $P108
.annotate 'line', 607
    find_lex $P107, "$i"
    unless_null $P107, vivify_951
    new $P107, "Undef"
  vivify_951:
    set $I101, $P107
    find_lex $P108, "self"
    nqp_decontainerize $P109, $P108
    find_lex $P110, "$?CLASS"
    repr_get_attr_obj $P1331, $P109, $P110, "@!BLOCKS", 9
    unless_null $P1331, vivify_952
    $P1331 = root_new ['parrot';'ResizablePMCArray']
  vivify_952:
    set $P111, $P1331[$I101]
    unless_null $P111, vivify_953
    new $P111, "Undef"
  vivify_953:
    find_lex $P112, "$name"
    unless_null $P112, vivify_954
    new $P112, "Undef"
  vivify_954:
    $P113 = $P111."symbol"($P112)
    set $P1329, $P113
.annotate 'line', 608
    set $P1333, $P1329
    unless_null $P1333, vivify_955
    $P1333 = root_new ['parrot';'Hash']
  vivify_955:
    set $N102, $P1333
    if $N102, if_1332
    new $P107, 'Float'
    set $P107, $N102
    goto if_1332_end
  if_1332:
.annotate 'line', 609
    new $P108, "Exception"
    set $P108['type'], .CONTROL_RETURN
    set $P1334, $P1329
    unless_null $P1334, vivify_956
    $P1334 = root_new ['parrot';'Hash']
  vivify_956:
    set $P109, $P1334["scope"]
    unless_null $P109, vivify_957
    new $P109, "Undef"
  vivify_957:
    set $S100, $P109
    find_lex $P110, "$wanted_scope"
    unless_null $P110, vivify_958
    new $P110, "Undef"
  vivify_958:
    set $S101, $P110
    iseq $I101, $S100, $S101
    new $P111, 'Integer'
    set $P111, $I101
    setattribute $P108, 'payload', $P111
    throw $P108
  if_1332_end:
.annotate 'line', 605
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "known_sym" :anon :subid("64_1329260321.776") :outer("13_1329260321.776")
    .param pmc param_1337
    .param pmc param_1338
    .param pmc param_1339
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 616
    .const 'Sub' $P1342 = "65_1329260321.776" 
    capture_lex $P1342
    .lex "self", param_1337
    .lex "$/", param_1338
    .lex "@name", param_1339
.annotate 'line', 617
    new $P105, "Undef"
    set $P1340, $P105
    .lex "$known", $P1340
    new $P106, "Float"
    assign $P106, 0
    set $P1340, $P106
.annotate 'line', 618
    .const 'Sub' $P1342 = "65_1329260321.776" 
    capture_lex $P1342
    $P1342()
.annotate 'line', 616
    set $P106, $P1340
    unless_null $P106, vivify_960
    new $P106, "Undef"
  vivify_960:
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1341"  :anon :subid("65_1329260321.776") :outer("64_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 618
    new $P1346, 'ExceptionHandler'
    set_label $P1346, control_1345
    $P1346."handle_types_except"(.CONTROL_ALL)
    push_eh $P1346
.annotate 'line', 619
    find_lex $P106, "self"
    nqp_decontainerize $P107, $P106
    find_lex $P1343, "@name"
    unless_null $P1343, vivify_959
    $P1343 = root_new ['parrot';'ResizablePMCArray']
  vivify_959:
    $P107."find_sym"($P1343)
.annotate 'line', 620
    new $P106, "Float"
    assign $P106, 1
    store_lex "$known", $P106
.annotate 'line', 618
    pop_eh 
    goto skip_handler_1344
  control_1345:
    peek_exception $P1347
    .local pmc exception 
    .get_results (exception) 
    new $P1349, 'Integer'
    set $P1349, 1
    set exception["handled"], $P1349
    set $I1350, exception["handled"]
    eq $I1350, 1, handled_1348
    rethrow exception
  handled_1348:
    finalize $P1347
    .return (exception)
  skip_handler_1344:
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "find_sym" :anon :subid("66_1329260321.776") :outer("13_1329260321.776")
    .param pmc param_1354
    .param pmc param_1355
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 628
    .const 'Sub' $P1400 = "71_1329260321.776" 
    capture_lex $P1400
    .const 'Sub' $P1381 = "69_1329260321.776" 
    capture_lex $P1381
    .const 'Sub' $P1362 = "67_1329260321.776" 
    capture_lex $P1362
    new $P1353, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P1353, control_1352
    push_eh $P1353
    .lex "self", param_1354
    .lex "@name", param_1355
.annotate 'line', 654
    new $P105, "Undef"
    set $P1356, $P105
    .lex "$result", $P1356
.annotate 'line', 630
    set $P1358, param_1355
    unless_null $P1358, vivify_961
    $P1358 = root_new ['parrot';'ResizablePMCArray']
  vivify_961:
    set $N100, $P1358
    if $N100, unless_1357_end
    die "Cannot look up empty name"
  unless_1357_end:
.annotate 'line', 634
    set $P1360, param_1355
    unless_null $P1360, vivify_962
    $P1360 = root_new ['parrot';'ResizablePMCArray']
  vivify_962:
    set $N100, $P1360
    set $N101, 1
    iseq $I100, $N100, $N101
    unless $I100, if_1359_end
    .const 'Sub' $P1362 = "67_1329260321.776" 
    capture_lex $P1362
    $P1362()
  if_1359_end:
.annotate 'line', 654
    find_dynamic_lex $P108, "$*GLOBALish"
    unless_null $P108, vivify_977
    get_hll_global $P106, "GLOBAL"
    get_who $P107, $P106
    set $P108, $P107["$GLOBALish"]
    unless_null $P108, vivify_978
    die "Contextual $*GLOBALish not found"
  vivify_978:
  vivify_977:
    set $P1356, $P108
.annotate 'line', 655
    set $P1379, param_1355
    unless_null $P1379, vivify_979
    $P1379 = root_new ['parrot';'ResizablePMCArray']
  vivify_979:
    set $N100, $P1379
    set $N101, 2
    isge $I100, $N100, $N101
    unless $I100, if_1378_end
    .const 'Sub' $P1381 = "69_1329260321.776" 
    capture_lex $P1381
    $P1381()
  if_1378_end:
.annotate 'line', 675
    set $P1398, param_1355
    unless_null $P1398, vivify_995
    $P1398 = root_new ['parrot';'ResizablePMCArray']
  vivify_995:
    defined $I100, $P1398
    unless $I100, for_undef_996
    iter $P106, $P1398
    new $P109, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P109, loop1404_handler
    push_eh $P109
  loop1404_test:
    unless $P106, loop1404_done
    shift $P107, $P106
  loop1404_redo:
    .const 'Sub' $P1400 = "71_1329260321.776" 
    capture_lex $P1400
    $P1400($P107)
  loop1404_next:
    goto loop1404_test
  loop1404_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P110, exception, 'type'
    eq $P110, .CONTROL_LOOP_NEXT, loop1404_next
    eq $P110, .CONTROL_LOOP_REDO, loop1404_redo
  loop1404_done:
    pop_eh 
  for_undef_996:
.annotate 'line', 628
    set $P106, $P1356
    unless_null $P106, vivify_1003
    new $P106, "Undef"
  vivify_1003:
    .return ($P106)
  control_1352:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P107, exception, "payload"
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1361"  :anon :subid("67_1329260321.776") :outer("66_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 634
    .const 'Sub' $P1368 = "68_1329260321.776" 
    capture_lex $P1368
.annotate 'line', 635
    new $P106, "Undef"
    set $P1363, $P106
    .lex "$final_name", $P1363
.annotate 'line', 636
    new $P107, "Undef"
    set $P1364, $P107
    .lex "$i", $P1364
.annotate 'line', 635
    new $P108, "Float"
    assign $P108, 0
    set $I101, $P108
    find_lex $P1365, "@name"
    unless_null $P1365, vivify_963
    $P1365 = root_new ['parrot';'ResizablePMCArray']
  vivify_963:
    set $P109, $P1365[$I101]
    unless_null $P109, vivify_964
    new $P109, "Undef"
  vivify_964:
    set $P1363, $P109
.annotate 'line', 636
    find_lex $P108, "self"
    nqp_decontainerize $P109, $P108
    find_lex $P110, "$?CLASS"
    repr_get_attr_obj $P1366, $P109, $P110, "@!BLOCKS", 9
    unless_null $P1366, vivify_965
    $P1366 = root_new ['parrot';'ResizablePMCArray']
  vivify_965:
    set $N102, $P1366
    new $P111, 'Float'
    set $P111, $N102
    set $P1364, $P111
.annotate 'line', 637
    new $P110, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P110, loop1377_handler
    push_eh $P110
  loop1377_test:
    set $P108, $P1364
    unless_null $P108, vivify_966
    new $P108, "Undef"
  vivify_966:
    set $N102, $P108
    set $N103, 0
    isgt $I101, $N102, $N103
    unless $I101, loop1377_done
  loop1377_redo:
    .const 'Sub' $P1368 = "68_1329260321.776" 
    capture_lex $P1368
    $P1368()
  loop1377_next:
    goto loop1377_test
  loop1377_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P111, exception, 'type'
    eq $P111, .CONTROL_LOOP_NEXT, loop1377_next
    eq $P111, .CONTROL_LOOP_REDO, loop1377_redo
  loop1377_done:
    pop_eh 
.annotate 'line', 634
    .return ($I101)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1367"  :anon :subid("68_1329260321.776") :outer("67_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 639
    $P1370 = root_new ['parrot';'Hash']
    set $P1369, $P1370
    .lex "%sym", $P1369
.annotate 'line', 638
    find_lex $P109, "$i"
    unless_null $P109, vivify_967
    new $P109, "Undef"
  vivify_967:
    sub $P110, $P109, 1
    store_lex "$i", $P110
.annotate 'line', 639
    find_lex $P109, "$i"
    unless_null $P109, vivify_968
    new $P109, "Undef"
  vivify_968:
    set $I102, $P109
    find_lex $P110, "self"
    nqp_decontainerize $P111, $P110
    find_lex $P112, "$?CLASS"
    repr_get_attr_obj $P1371, $P111, $P112, "@!BLOCKS", 9
    unless_null $P1371, vivify_969
    $P1371 = root_new ['parrot';'ResizablePMCArray']
  vivify_969:
    set $P113, $P1371[$I102]
    unless_null $P113, vivify_970
    new $P113, "Undef"
  vivify_970:
    find_lex $P114, "$final_name"
    unless_null $P114, vivify_971
    new $P114, "Undef"
  vivify_971:
    $P115 = $P113."symbol"($P114)
    set $P1369, $P115
.annotate 'line', 640
    set $P1373, $P1369
    unless_null $P1373, vivify_972
    $P1373 = root_new ['parrot';'Hash']
  vivify_972:
    set $N104, $P1373
    if $N104, if_1372
    new $P109, 'Float'
    set $P109, $N104
    goto if_1372_end
  if_1372:
.annotate 'line', 641
    set $P1375, $P1369
    unless_null $P1375, vivify_973
    $P1375 = root_new ['parrot';'Hash']
  vivify_973:
    exists $I102, $P1375["value"]
    if $I102, if_1374
.annotate 'line', 645
    new $P111, 'String'
    set $P111, "No compile-time value for "
    find_lex $P112, "$final_name"
    unless_null $P112, vivify_974
    new $P112, "Undef"
  vivify_974:
    concat $P113, $P111, $P112
    die $P113
.annotate 'line', 644
    goto if_1374_end
  if_1374:
.annotate 'line', 642
    new $P111, "Exception"
    set $P111['type'], .CONTROL_RETURN
    set $P1376, $P1369
    unless_null $P1376, vivify_975
    $P1376 = root_new ['parrot';'Hash']
  vivify_975:
    set $P112, $P1376["value"]
    unless_null $P112, vivify_976
    new $P112, "Undef"
  vivify_976:
    setattribute $P111, 'payload', $P112
    throw $P111
  if_1374_end:
.annotate 'line', 640
    set $P109, $P110
  if_1372_end:
.annotate 'line', 637
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1380"  :anon :subid("69_1329260321.776") :outer("66_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 655
    .const 'Sub' $P1387 = "70_1329260321.776" 
    capture_lex $P1387
.annotate 'line', 656
    new $P106, "Undef"
    set $P1382, $P106
    .lex "$first", $P1382
.annotate 'line', 657
    new $P107, "Undef"
    set $P1383, $P107
    .lex "$i", $P1383
.annotate 'line', 656
    new $P108, "Float"
    assign $P108, 0
    set $I101, $P108
    find_lex $P1384, "@name"
    unless_null $P1384, vivify_980
    $P1384 = root_new ['parrot';'ResizablePMCArray']
  vivify_980:
    set $P109, $P1384[$I101]
    unless_null $P109, vivify_981
    new $P109, "Undef"
  vivify_981:
    set $P1382, $P109
.annotate 'line', 657
    find_lex $P108, "self"
    nqp_decontainerize $P109, $P108
    find_lex $P110, "$?CLASS"
    repr_get_attr_obj $P1385, $P109, $P110, "@!BLOCKS", 9
    unless_null $P1385, vivify_982
    $P1385 = root_new ['parrot';'ResizablePMCArray']
  vivify_982:
    set $N102, $P1385
    new $P111, 'Float'
    set $P111, $N102
    set $P1383, $P111
.annotate 'line', 658
    new $P110, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P110, loop1397_handler
    push_eh $P110
  loop1397_test:
    set $P108, $P1383
    unless_null $P108, vivify_983
    new $P108, "Undef"
  vivify_983:
    set $N102, $P108
    set $N103, 0
    isgt $I101, $N102, $N103
    unless $I101, loop1397_done
  loop1397_redo:
    .const 'Sub' $P1387 = "70_1329260321.776" 
    capture_lex $P1387
    $P1387()
  loop1397_next:
    goto loop1397_test
  loop1397_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P111, exception, 'type'
    eq $P111, .CONTROL_LOOP_NEXT, loop1397_next
    eq $P111, .CONTROL_LOOP_REDO, loop1397_redo
  loop1397_done:
    pop_eh 
.annotate 'line', 655
    .return ($I101)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1386"  :anon :subid("70_1329260321.776") :outer("69_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 660
    $P1389 = root_new ['parrot';'Hash']
    set $P1388, $P1389
    .lex "%sym", $P1388
.annotate 'line', 659
    find_lex $P109, "$i"
    unless_null $P109, vivify_984
    new $P109, "Undef"
  vivify_984:
    sub $P110, $P109, 1
    store_lex "$i", $P110
.annotate 'line', 660
    find_lex $P109, "$i"
    unless_null $P109, vivify_985
    new $P109, "Undef"
  vivify_985:
    set $I102, $P109
    find_lex $P110, "self"
    nqp_decontainerize $P111, $P110
    find_lex $P112, "$?CLASS"
    repr_get_attr_obj $P1390, $P111, $P112, "@!BLOCKS", 9
    unless_null $P1390, vivify_986
    $P1390 = root_new ['parrot';'ResizablePMCArray']
  vivify_986:
    set $P113, $P1390[$I102]
    unless_null $P113, vivify_987
    new $P113, "Undef"
  vivify_987:
    find_lex $P114, "$first"
    unless_null $P114, vivify_988
    new $P114, "Undef"
  vivify_988:
    $P115 = $P113."symbol"($P114)
    set $P1388, $P115
.annotate 'line', 661
    set $P1392, $P1388
    unless_null $P1392, vivify_989
    $P1392 = root_new ['parrot';'Hash']
  vivify_989:
    set $N104, $P1392
    if $N104, if_1391
    new $P109, 'Float'
    set $P109, $N104
    goto if_1391_end
  if_1391:
.annotate 'line', 662
    set $P1394, $P1388
    unless_null $P1394, vivify_990
    $P1394 = root_new ['parrot';'Hash']
  vivify_990:
    exists $I102, $P1394["value"]
    if $I102, if_1393
.annotate 'line', 668
    new $P112, 'String'
    set $P112, "No compile-time value for "
    find_lex $P113, "$first"
    unless_null $P113, vivify_991
    new $P113, "Undef"
  vivify_991:
    concat $P114, $P112, $P113
    die $P114
.annotate 'line', 667
    goto if_1393_end
  if_1393:
.annotate 'line', 663
    set $P1395, $P1388
    unless_null $P1395, vivify_992
    $P1395 = root_new ['parrot';'Hash']
  vivify_992:
    set $P111, $P1395["value"]
    unless_null $P111, vivify_993
    new $P111, "Undef"
  vivify_993:
    store_lex "$result", $P111
.annotate 'line', 664
    find_lex $P1396, "@name"
    unless_null $P1396, vivify_994
    $P1396 = root_new ['parrot';'ResizablePMCArray']
  vivify_994:
    $P1396."shift"()
.annotate 'line', 665
    new $P111, "Float"
    assign $P111, 0
    store_lex "$i", $P111
.annotate 'line', 662
    set $P110, $P111
  if_1393_end:
.annotate 'line', 661
    set $P109, $P110
  if_1391_end:
.annotate 'line', 658
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1399"  :anon :subid("71_1329260321.776") :outer("66_1329260321.776")
    .param pmc param_1401
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 675
    .lex "$_", param_1401
.annotate 'line', 676
    find_lex $P111, "$_"
    unless_null $P111, vivify_997
    new $P111, "Undef"
  vivify_997:
    set $S100, $P111
    find_lex $P109, "$result"
    unless_null $P109, vivify_998
    new $P109, "Undef"
  vivify_998:
    get_who $P110, $P109
    exists $I101, $P110[$S100]
    if $I101, if_1402
.annotate 'line', 680
    new $P112, "String"
    assign $P112, "Could not locate compile-time value for symbol "
.annotate 'line', 681
    find_lex $P1403, "@name"
    unless_null $P1403, vivify_999
    $P1403 = root_new ['parrot';'ResizablePMCArray']
  vivify_999:
    join $S101, "::", $P1403
    concat $P113, $P112, $S101
.annotate 'line', 680
    die $P113
.annotate 'line', 679
    goto if_1402_end
  if_1402:
.annotate 'line', 677
    find_lex $P112, "$_"
    unless_null $P112, vivify_1000
    new $P112, "Undef"
  vivify_1000:
    find_lex $P113, "$result"
    unless_null $P113, vivify_1001
    new $P113, "Undef"
  vivify_1001:
    get_who $P114, $P113
    set $P115, $P114[$P112]
    unless_null $P115, vivify_1002
    new $P115, "Undef"
  vivify_1002:
    store_lex "$result", $P115
.annotate 'line', 676
    set $P108, $P115
  if_1402_end:
.annotate 'line', 675
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1406"  :subid("72_1329260321.776") :outer("10_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 690
    .const 'Sub' $P2501 = "450_1329260321.776" 
    capture_lex $P2501
    .const 'Sub' $P2500 = "449_1329260321.776" 
    capture_lex $P2500
    .const 'Sub' $P2496 = "448_1329260321.776" 
    capture_lex $P2496
    .const 'Sub' $P2495 = "447_1329260321.776" 
    capture_lex $P2495
    .const 'Sub' $P2491 = "446_1329260321.776" 
    capture_lex $P2491
    .const 'Sub' $P2490 = "445_1329260321.776" 
    capture_lex $P2490
    .const 'Sub' $P2486 = "444_1329260321.776" 
    capture_lex $P2486
    .const 'Sub' $P2485 = "443_1329260321.776" 
    capture_lex $P2485
    .const 'Sub' $P2481 = "442_1329260321.776" 
    capture_lex $P2481
    .const 'Sub' $P2480 = "441_1329260321.776" 
    capture_lex $P2480
    .const 'Sub' $P2474 = "439_1329260321.776" 
    capture_lex $P2474
    .const 'Sub' $P2473 = "438_1329260321.776" 
    capture_lex $P2473
    .const 'Sub' $P2469 = "437_1329260321.776" 
    capture_lex $P2469
    .const 'Sub' $P2468 = "436_1329260321.776" 
    capture_lex $P2468
    .const 'Sub' $P2464 = "435_1329260321.776" 
    capture_lex $P2464
    .const 'Sub' $P2463 = "434_1329260321.776" 
    capture_lex $P2463
    .const 'Sub' $P2459 = "433_1329260321.776" 
    capture_lex $P2459
    .const 'Sub' $P2458 = "432_1329260321.776" 
    capture_lex $P2458
    .const 'Sub' $P2454 = "431_1329260321.776" 
    capture_lex $P2454
    .const 'Sub' $P2453 = "430_1329260321.776" 
    capture_lex $P2453
    .const 'Sub' $P2450 = "429_1329260321.776" 
    capture_lex $P2450
    .const 'Sub' $P2449 = "428_1329260321.776" 
    capture_lex $P2449
    .const 'Sub' $P2445 = "427_1329260321.776" 
    capture_lex $P2445
    .const 'Sub' $P2444 = "426_1329260321.776" 
    capture_lex $P2444
    .const 'Sub' $P2440 = "425_1329260321.776" 
    capture_lex $P2440
    .const 'Sub' $P2439 = "424_1329260321.776" 
    capture_lex $P2439
    .const 'Sub' $P2435 = "423_1329260321.776" 
    capture_lex $P2435
    .const 'Sub' $P2434 = "422_1329260321.776" 
    capture_lex $P2434
    .const 'Sub' $P2430 = "421_1329260321.776" 
    capture_lex $P2430
    .const 'Sub' $P2429 = "420_1329260321.776" 
    capture_lex $P2429
    .const 'Sub' $P2425 = "419_1329260321.776" 
    capture_lex $P2425
    .const 'Sub' $P2424 = "418_1329260321.776" 
    capture_lex $P2424
    .const 'Sub' $P2420 = "417_1329260321.776" 
    capture_lex $P2420
    .const 'Sub' $P2419 = "416_1329260321.776" 
    capture_lex $P2419
    .const 'Sub' $P2415 = "415_1329260321.776" 
    capture_lex $P2415
    .const 'Sub' $P2414 = "414_1329260321.776" 
    capture_lex $P2414
    .const 'Sub' $P2410 = "413_1329260321.776" 
    capture_lex $P2410
    .const 'Sub' $P2409 = "412_1329260321.776" 
    capture_lex $P2409
    .const 'Sub' $P2405 = "411_1329260321.776" 
    capture_lex $P2405
    .const 'Sub' $P2404 = "410_1329260321.776" 
    capture_lex $P2404
    .const 'Sub' $P2400 = "409_1329260321.776" 
    capture_lex $P2400
    .const 'Sub' $P2399 = "408_1329260321.776" 
    capture_lex $P2399
    .const 'Sub' $P2395 = "407_1329260321.776" 
    capture_lex $P2395
    .const 'Sub' $P2394 = "406_1329260321.776" 
    capture_lex $P2394
    .const 'Sub' $P2390 = "405_1329260321.776" 
    capture_lex $P2390
    .const 'Sub' $P2389 = "404_1329260321.776" 
    capture_lex $P2389
    .const 'Sub' $P2385 = "403_1329260321.776" 
    capture_lex $P2385
    .const 'Sub' $P2384 = "402_1329260321.776" 
    capture_lex $P2384
    .const 'Sub' $P2380 = "401_1329260321.776" 
    capture_lex $P2380
    .const 'Sub' $P2379 = "400_1329260321.776" 
    capture_lex $P2379
    .const 'Sub' $P2375 = "399_1329260321.776" 
    capture_lex $P2375
    .const 'Sub' $P2374 = "398_1329260321.776" 
    capture_lex $P2374
    .const 'Sub' $P2370 = "397_1329260321.776" 
    capture_lex $P2370
    .const 'Sub' $P2369 = "396_1329260321.776" 
    capture_lex $P2369
    .const 'Sub' $P2365 = "395_1329260321.776" 
    capture_lex $P2365
    .const 'Sub' $P2364 = "394_1329260321.776" 
    capture_lex $P2364
    .const 'Sub' $P2360 = "393_1329260321.776" 
    capture_lex $P2360
    .const 'Sub' $P2359 = "392_1329260321.776" 
    capture_lex $P2359
    .const 'Sub' $P2355 = "391_1329260321.776" 
    capture_lex $P2355
    .const 'Sub' $P2354 = "390_1329260321.776" 
    capture_lex $P2354
    .const 'Sub' $P2350 = "389_1329260321.776" 
    capture_lex $P2350
    .const 'Sub' $P2349 = "388_1329260321.776" 
    capture_lex $P2349
    .const 'Sub' $P2345 = "387_1329260321.776" 
    capture_lex $P2345
    .const 'Sub' $P2344 = "386_1329260321.776" 
    capture_lex $P2344
    .const 'Sub' $P2340 = "385_1329260321.776" 
    capture_lex $P2340
    .const 'Sub' $P2339 = "384_1329260321.776" 
    capture_lex $P2339
    .const 'Sub' $P2335 = "383_1329260321.776" 
    capture_lex $P2335
    .const 'Sub' $P2334 = "382_1329260321.776" 
    capture_lex $P2334
    .const 'Sub' $P2330 = "381_1329260321.776" 
    capture_lex $P2330
    .const 'Sub' $P2329 = "380_1329260321.776" 
    capture_lex $P2329
    .const 'Sub' $P2325 = "379_1329260321.776" 
    capture_lex $P2325
    .const 'Sub' $P2324 = "378_1329260321.776" 
    capture_lex $P2324
    .const 'Sub' $P2320 = "377_1329260321.776" 
    capture_lex $P2320
    .const 'Sub' $P2319 = "376_1329260321.776" 
    capture_lex $P2319
    .const 'Sub' $P2315 = "375_1329260321.776" 
    capture_lex $P2315
    .const 'Sub' $P2314 = "374_1329260321.776" 
    capture_lex $P2314
    .const 'Sub' $P2310 = "373_1329260321.776" 
    capture_lex $P2310
    .const 'Sub' $P2309 = "372_1329260321.776" 
    capture_lex $P2309
    .const 'Sub' $P2305 = "371_1329260321.776" 
    capture_lex $P2305
    .const 'Sub' $P2304 = "370_1329260321.776" 
    capture_lex $P2304
    .const 'Sub' $P2300 = "369_1329260321.776" 
    capture_lex $P2300
    .const 'Sub' $P2299 = "368_1329260321.776" 
    capture_lex $P2299
    .const 'Sub' $P2295 = "367_1329260321.776" 
    capture_lex $P2295
    .const 'Sub' $P2294 = "366_1329260321.776" 
    capture_lex $P2294
    .const 'Sub' $P2290 = "365_1329260321.776" 
    capture_lex $P2290
    .const 'Sub' $P2289 = "364_1329260321.776" 
    capture_lex $P2289
    .const 'Sub' $P2285 = "363_1329260321.776" 
    capture_lex $P2285
    .const 'Sub' $P2284 = "362_1329260321.776" 
    capture_lex $P2284
    .const 'Sub' $P2280 = "361_1329260321.776" 
    capture_lex $P2280
    .const 'Sub' $P2279 = "360_1329260321.776" 
    capture_lex $P2279
    .const 'Sub' $P2275 = "359_1329260321.776" 
    capture_lex $P2275
    .const 'Sub' $P2274 = "358_1329260321.776" 
    capture_lex $P2274
    .const 'Sub' $P2270 = "357_1329260321.776" 
    capture_lex $P2270
    .const 'Sub' $P2269 = "356_1329260321.776" 
    capture_lex $P2269
    .const 'Sub' $P2265 = "355_1329260321.776" 
    capture_lex $P2265
    .const 'Sub' $P2264 = "354_1329260321.776" 
    capture_lex $P2264
    .const 'Sub' $P2261 = "353_1329260321.776" 
    capture_lex $P2261
    .const 'Sub' $P2260 = "352_1329260321.776" 
    capture_lex $P2260
    .const 'Sub' $P2257 = "351_1329260321.776" 
    capture_lex $P2257
    .const 'Sub' $P2256 = "350_1329260321.776" 
    capture_lex $P2256
    .const 'Sub' $P2253 = "349_1329260321.776" 
    capture_lex $P2253
    .const 'Sub' $P2252 = "348_1329260321.776" 
    capture_lex $P2252
    .const 'Sub' $P2249 = "347_1329260321.776" 
    capture_lex $P2249
    .const 'Sub' $P2248 = "346_1329260321.776" 
    capture_lex $P2248
    .const 'Sub' $P2245 = "345_1329260321.776" 
    capture_lex $P2245
    .const 'Sub' $P2244 = "344_1329260321.776" 
    capture_lex $P2244
    .const 'Sub' $P2241 = "343_1329260321.776" 
    capture_lex $P2241
    .const 'Sub' $P2240 = "342_1329260321.776" 
    capture_lex $P2240
    .const 'Sub' $P2237 = "341_1329260321.776" 
    capture_lex $P2237
    .const 'Sub' $P2236 = "340_1329260321.776" 
    capture_lex $P2236
    .const 'Sub' $P2233 = "339_1329260321.776" 
    capture_lex $P2233
    .const 'Sub' $P2232 = "338_1329260321.776" 
    capture_lex $P2232
    .const 'Sub' $P2227 = "337_1329260321.776" 
    capture_lex $P2227
    .const 'Sub' $P2226 = "336_1329260321.776" 
    capture_lex $P2226
    .const 'Sub' $P2223 = "335_1329260321.776" 
    capture_lex $P2223
    .const 'Sub' $P2222 = "334_1329260321.776" 
    capture_lex $P2222
    .const 'Sub' $P2219 = "333_1329260321.776" 
    capture_lex $P2219
    .const 'Sub' $P2218 = "332_1329260321.776" 
    capture_lex $P2218
    .const 'Sub' $P2215 = "331_1329260321.776" 
    capture_lex $P2215
    .const 'Sub' $P2214 = "330_1329260321.776" 
    capture_lex $P2214
    .const 'Sub' $P2209 = "329_1329260321.776" 
    capture_lex $P2209
    .const 'Sub' $P2208 = "328_1329260321.776" 
    capture_lex $P2208
    .const 'Sub' $P2203 = "327_1329260321.776" 
    capture_lex $P2203
    .const 'Sub' $P2202 = "326_1329260321.776" 
    capture_lex $P2202
    .const 'Sub' $P2199 = "325_1329260321.776" 
    capture_lex $P2199
    .const 'Sub' $P2198 = "324_1329260321.776" 
    capture_lex $P2198
    .const 'Sub' $P2195 = "323_1329260321.776" 
    capture_lex $P2195
    .const 'Sub' $P2194 = "322_1329260321.776" 
    capture_lex $P2194
    .const 'Sub' $P2191 = "321_1329260321.776" 
    capture_lex $P2191
    .const 'Sub' $P2190 = "320_1329260321.776" 
    capture_lex $P2190
    .const 'Sub' $P2187 = "319_1329260321.776" 
    capture_lex $P2187
    .const 'Sub' $P2186 = "318_1329260321.776" 
    capture_lex $P2186
    .const 'Sub' $P2182 = "317_1329260321.776" 
    capture_lex $P2182
    .const 'Sub' $P2181 = "316_1329260321.776" 
    capture_lex $P2181
    .const 'Sub' $P2177 = "315_1329260321.776" 
    capture_lex $P2177
    .const 'Sub' $P2176 = "314_1329260321.776" 
    capture_lex $P2176
    .const 'Sub' $P2172 = "313_1329260321.776" 
    capture_lex $P2172
    .const 'Sub' $P2171 = "312_1329260321.776" 
    capture_lex $P2171
    .const 'Sub' $P2167 = "311_1329260321.776" 
    capture_lex $P2167
    .const 'Sub' $P2166 = "310_1329260321.776" 
    capture_lex $P2166
    .const 'Sub' $P2163 = "309_1329260321.776" 
    capture_lex $P2163
    .const 'Sub' $P2162 = "308_1329260321.776" 
    capture_lex $P2162
    .const 'Sub' $P2159 = "307_1329260321.776" 
    capture_lex $P2159
    .const 'Sub' $P2154 = "304_1329260321.776" 
    capture_lex $P2154
    .const 'Sub' $P2148 = "303_1329260321.776" 
    capture_lex $P2148
    .const 'Sub' $P2147 = "302_1329260321.776" 
    capture_lex $P2147
    .const 'Sub' $P2143 = "301_1329260321.776" 
    capture_lex $P2143
    .const 'Sub' $P2142 = "300_1329260321.776" 
    capture_lex $P2142
    .const 'Sub' $P2139 = "299_1329260321.776" 
    capture_lex $P2139
    .const 'Sub' $P2138 = "298_1329260321.776" 
    capture_lex $P2138
    .const 'Sub' $P2134 = "297_1329260321.776" 
    capture_lex $P2134
    .const 'Sub' $P2133 = "296_1329260321.776" 
    capture_lex $P2133
    .const 'Sub' $P2130 = "295_1329260321.776" 
    capture_lex $P2130
    .const 'Sub' $P2129 = "294_1329260321.776" 
    capture_lex $P2129
    .const 'Sub' $P2123 = "292_1329260321.776" 
    capture_lex $P2123
    .const 'Sub' $P2122 = "291_1329260321.776" 
    capture_lex $P2122
    .const 'Sub' $P2116 = "290_1329260321.776" 
    capture_lex $P2116
    .const 'Sub' $P2115 = "289_1329260321.776" 
    capture_lex $P2115
    .const 'Sub' $P2111 = "288_1329260321.776" 
    capture_lex $P2111
    .const 'Sub' $P2110 = "287_1329260321.776" 
    capture_lex $P2110
    .const 'Sub' $P2104 = "286_1329260321.776" 
    capture_lex $P2104
    .const 'Sub' $P2103 = "285_1329260321.776" 
    capture_lex $P2103
    .const 'Sub' $P2098 = "284_1329260321.776" 
    capture_lex $P2098
    .const 'Sub' $P2097 = "283_1329260321.776" 
    capture_lex $P2097
    .const 'Sub' $P2094 = "282_1329260321.776" 
    capture_lex $P2094
    .const 'Sub' $P2093 = "281_1329260321.776" 
    capture_lex $P2093
    .const 'Sub' $P2089 = "280_1329260321.776" 
    capture_lex $P2089
    .const 'Sub' $P2084 = "277_1329260321.776" 
    capture_lex $P2084
    .const 'Sub' $P2077 = "276_1329260321.776" 
    capture_lex $P2077
    .const 'Sub' $P2076 = "275_1329260321.776" 
    capture_lex $P2076
    .const 'Sub' $P2066 = "274_1329260321.776" 
    capture_lex $P2066
    .const 'Sub' $P2065 = "273_1329260321.776" 
    capture_lex $P2065
    .const 'Sub' $P2059 = "272_1329260321.776" 
    capture_lex $P2059
    .const 'Sub' $P2054 = "269_1329260321.776" 
    capture_lex $P2054
    .const 'Sub' $P2051 = "268_1329260321.776" 
    capture_lex $P2051
    .const 'Sub' $P2050 = "267_1329260321.776" 
    capture_lex $P2050
    .const 'Sub' $P2047 = "266_1329260321.776" 
    capture_lex $P2047
    .const 'Sub' $P2046 = "265_1329260321.776" 
    capture_lex $P2046
    .const 'Sub' $P2043 = "264_1329260321.776" 
    capture_lex $P2043
    .const 'Sub' $P2042 = "263_1329260321.776" 
    capture_lex $P2042
    .const 'Sub' $P2035 = "262_1329260321.776" 
    capture_lex $P2035
    .const 'Sub' $P2034 = "261_1329260321.776" 
    capture_lex $P2034
    .const 'Sub' $P2021 = "260_1329260321.776" 
    capture_lex $P2021
    .const 'Sub' $P2020 = "259_1329260321.776" 
    capture_lex $P2020
    .const 'Sub' $P2012 = "257_1329260321.776" 
    capture_lex $P2012
    .const 'Sub' $P2011 = "256_1329260321.776" 
    capture_lex $P2011
    .const 'Sub' $P2007 = "255_1329260321.776" 
    capture_lex $P2007
    .const 'Sub' $P2006 = "254_1329260321.776" 
    capture_lex $P2006
    .const 'Sub' $P2000 = "253_1329260321.776" 
    capture_lex $P2000
    .const 'Sub' $P1999 = "252_1329260321.776" 
    capture_lex $P1999
    .const 'Sub' $P1993 = "251_1329260321.776" 
    capture_lex $P1993
    .const 'Sub' $P1988 = "248_1329260321.776" 
    capture_lex $P1988
    .const 'Sub' $P1983 = "246_1329260321.776" 
    capture_lex $P1983
    .const 'Sub' $P1982 = "245_1329260321.776" 
    capture_lex $P1982
    .const 'Sub' $P1967 = "243_1329260321.776" 
    capture_lex $P1967
    .const 'Sub' $P1966 = "242_1329260321.776" 
    capture_lex $P1966
    .const 'Sub' $P1955 = "241_1329260321.776" 
    capture_lex $P1955
    .const 'Sub' $P1954 = "240_1329260321.776" 
    capture_lex $P1954
    .const 'Sub' $P1950 = "239_1329260321.776" 
    capture_lex $P1950
    .const 'Sub' $P1949 = "238_1329260321.776" 
    capture_lex $P1949
    .const 'Sub' $P1945 = "237_1329260321.776" 
    capture_lex $P1945
    .const 'Sub' $P1940 = "234_1329260321.776" 
    capture_lex $P1940
    .const 'Sub' $P1930 = "232_1329260321.776" 
    capture_lex $P1930
    .const 'Sub' $P1929 = "231_1329260321.776" 
    capture_lex $P1929
    .const 'Sub' $P1925 = "230_1329260321.776" 
    capture_lex $P1925
    .const 'Sub' $P1924 = "229_1329260321.776" 
    capture_lex $P1924
    .const 'Sub' $P1917 = "227_1329260321.776" 
    capture_lex $P1917
    .const 'Sub' $P1916 = "226_1329260321.776" 
    capture_lex $P1916
    .const 'Sub' $P1911 = "225_1329260321.776" 
    capture_lex $P1911
    .const 'Sub' $P1910 = "224_1329260321.776" 
    capture_lex $P1910
    .const 'Sub' $P1906 = "223_1329260321.776" 
    capture_lex $P1906
    .const 'Sub' $P1905 = "222_1329260321.776" 
    capture_lex $P1905
    .const 'Sub' $P1901 = "221_1329260321.776" 
    capture_lex $P1901
    .const 'Sub' $P1900 = "220_1329260321.776" 
    capture_lex $P1900
    .const 'Sub' $P1896 = "219_1329260321.776" 
    capture_lex $P1896
    .const 'Sub' $P1891 = "216_1329260321.776" 
    capture_lex $P1891
    .const 'Sub' $P1849 = "214_1329260321.776" 
    capture_lex $P1849
    .const 'Sub' $P1848 = "213_1329260321.776" 
    capture_lex $P1848
    .const 'Sub' $P1842 = "212_1329260321.776" 
    capture_lex $P1842
    .const 'Sub' $P1841 = "211_1329260321.776" 
    capture_lex $P1841
    .const 'Sub' $P1835 = "210_1329260321.776" 
    capture_lex $P1835
    .const 'Sub' $P1834 = "209_1329260321.776" 
    capture_lex $P1834
    .const 'Sub' $P1828 = "208_1329260321.776" 
    capture_lex $P1828
    .const 'Sub' $P1827 = "207_1329260321.776" 
    capture_lex $P1827
    .const 'Sub' $P1821 = "206_1329260321.776" 
    capture_lex $P1821
    .const 'Sub' $P1820 = "205_1329260321.776" 
    capture_lex $P1820
    .const 'Sub' $P1814 = "204_1329260321.776" 
    capture_lex $P1814
    .const 'Sub' $P1813 = "203_1329260321.776" 
    capture_lex $P1813
    .const 'Sub' $P1807 = "202_1329260321.776" 
    capture_lex $P1807
    .const 'Sub' $P1806 = "201_1329260321.776" 
    capture_lex $P1806
    .const 'Sub' $P1800 = "200_1329260321.776" 
    capture_lex $P1800
    .const 'Sub' $P1795 = "197_1329260321.776" 
    capture_lex $P1795
    .const 'Sub' $P1792 = "196_1329260321.776" 
    capture_lex $P1792
    .const 'Sub' $P1791 = "195_1329260321.776" 
    capture_lex $P1791
    .const 'Sub' $P1788 = "194_1329260321.776" 
    capture_lex $P1788
    .const 'Sub' $P1787 = "193_1329260321.776" 
    capture_lex $P1787
    .const 'Sub' $P1779 = "192_1329260321.776" 
    capture_lex $P1779
    .const 'Sub' $P1778 = "191_1329260321.776" 
    capture_lex $P1778
    .const 'Sub' $P1771 = "190_1329260321.776" 
    capture_lex $P1771
    .const 'Sub' $P1770 = "189_1329260321.776" 
    capture_lex $P1770
    .const 'Sub' $P1766 = "188_1329260321.776" 
    capture_lex $P1766
    .const 'Sub' $P1765 = "187_1329260321.776" 
    capture_lex $P1765
    .const 'Sub' $P1762 = "186_1329260321.776" 
    capture_lex $P1762
    .const 'Sub' $P1761 = "185_1329260321.776" 
    capture_lex $P1761
    .const 'Sub' $P1758 = "184_1329260321.776" 
    capture_lex $P1758
    .const 'Sub' $P1757 = "183_1329260321.776" 
    capture_lex $P1757
    .const 'Sub' $P1754 = "182_1329260321.776" 
    capture_lex $P1754
    .const 'Sub' $P1753 = "181_1329260321.776" 
    capture_lex $P1753
    .const 'Sub' $P1740 = "178_1329260321.776" 
    capture_lex $P1740
    .const 'Sub' $P1739 = "177_1329260321.776" 
    capture_lex $P1739
    .const 'Sub' $P1736 = "176_1329260321.776" 
    capture_lex $P1736
    .const 'Sub' $P1735 = "175_1329260321.776" 
    capture_lex $P1735
    .const 'Sub' $P1732 = "174_1329260321.776" 
    capture_lex $P1732
    .const 'Sub' $P1731 = "173_1329260321.776" 
    capture_lex $P1731
    .const 'Sub' $P1728 = "172_1329260321.776" 
    capture_lex $P1728
    .const 'Sub' $P1727 = "171_1329260321.776" 
    capture_lex $P1727
    .const 'Sub' $P1724 = "170_1329260321.776" 
    capture_lex $P1724
    .const 'Sub' $P1723 = "169_1329260321.776" 
    capture_lex $P1723
    .const 'Sub' $P1720 = "168_1329260321.776" 
    capture_lex $P1720
    .const 'Sub' $P1719 = "167_1329260321.776" 
    capture_lex $P1719
    .const 'Sub' $P1716 = "166_1329260321.776" 
    capture_lex $P1716
    .const 'Sub' $P1715 = "165_1329260321.776" 
    capture_lex $P1715
    .const 'Sub' $P1711 = "164_1329260321.776" 
    capture_lex $P1711
    .const 'Sub' $P1710 = "163_1329260321.776" 
    capture_lex $P1710
    .const 'Sub' $P1706 = "162_1329260321.776" 
    capture_lex $P1706
    .const 'Sub' $P1705 = "161_1329260321.776" 
    capture_lex $P1705
    .const 'Sub' $P1701 = "160_1329260321.776" 
    capture_lex $P1701
    .const 'Sub' $P1696 = "157_1329260321.776" 
    capture_lex $P1696
    .const 'Sub' $P1692 = "156_1329260321.776" 
    capture_lex $P1692
    .const 'Sub' $P1691 = "155_1329260321.776" 
    capture_lex $P1691
    .const 'Sub' $P1687 = "154_1329260321.776" 
    capture_lex $P1687
    .const 'Sub' $P1682 = "151_1329260321.776" 
    capture_lex $P1682
    .const 'Sub' $P1678 = "150_1329260321.776" 
    capture_lex $P1678
    .const 'Sub' $P1677 = "149_1329260321.776" 
    capture_lex $P1677
    .const 'Sub' $P1673 = "148_1329260321.776" 
    capture_lex $P1673
    .const 'Sub' $P1672 = "147_1329260321.776" 
    capture_lex $P1672
    .const 'Sub' $P1668 = "146_1329260321.776" 
    capture_lex $P1668
    .const 'Sub' $P1663 = "143_1329260321.776" 
    capture_lex $P1663
    .const 'Sub' $P1659 = "142_1329260321.776" 
    capture_lex $P1659
    .const 'Sub' $P1658 = "141_1329260321.776" 
    capture_lex $P1658
    .const 'Sub' $P1654 = "140_1329260321.776" 
    capture_lex $P1654
    .const 'Sub' $P1653 = "139_1329260321.776" 
    capture_lex $P1653
    .const 'Sub' $P1649 = "138_1329260321.776" 
    capture_lex $P1649
    .const 'Sub' $P1648 = "137_1329260321.776" 
    capture_lex $P1648
    .const 'Sub' $P1639 = "136_1329260321.776" 
    capture_lex $P1639
    .const 'Sub' $P1638 = "135_1329260321.776" 
    capture_lex $P1638
    .const 'Sub' $P1633 = "134_1329260321.776" 
    capture_lex $P1633
    .const 'Sub' $P1632 = "133_1329260321.776" 
    capture_lex $P1632
    .const 'Sub' $P1623 = "131_1329260321.776" 
    capture_lex $P1623
    .const 'Sub' $P1622 = "130_1329260321.776" 
    capture_lex $P1622
    .const 'Sub' $P1616 = "129_1329260321.776" 
    capture_lex $P1616
    .const 'Sub' $P1615 = "128_1329260321.776" 
    capture_lex $P1615
    .const 'Sub' $P1611 = "127_1329260321.776" 
    capture_lex $P1611
    .const 'Sub' $P1606 = "124_1329260321.776" 
    capture_lex $P1606
    .const 'Sub' $P1603 = "123_1329260321.776" 
    capture_lex $P1603
    .const 'Sub' $P1602 = "122_1329260321.776" 
    capture_lex $P1602
    .const 'Sub' $P1599 = "121_1329260321.776" 
    capture_lex $P1599
    .const 'Sub' $P1594 = "118_1329260321.776" 
    capture_lex $P1594
    .const 'Sub' $P1591 = "117_1329260321.776" 
    capture_lex $P1591
    .const 'Sub' $P1590 = "116_1329260321.776" 
    capture_lex $P1590
    .const 'Sub' $P1587 = "115_1329260321.776" 
    capture_lex $P1587
    .const 'Sub' $P1586 = "114_1329260321.776" 
    capture_lex $P1586
    .const 'Sub' $P1583 = "113_1329260321.776" 
    capture_lex $P1583
    .const 'Sub' $P1582 = "112_1329260321.776" 
    capture_lex $P1582
    .const 'Sub' $P1579 = "111_1329260321.776" 
    capture_lex $P1579
    .const 'Sub' $P1578 = "110_1329260321.776" 
    capture_lex $P1578
    .const 'Sub' $P1575 = "109_1329260321.776" 
    capture_lex $P1575
    .const 'Sub' $P1574 = "108_1329260321.776" 
    capture_lex $P1574
    .const 'Sub' $P1568 = "107_1329260321.776" 
    capture_lex $P1568
    .const 'Sub' $P1567 = "106_1329260321.776" 
    capture_lex $P1567
    .const 'Sub' $P1563 = "105_1329260321.776" 
    capture_lex $P1563
    .const 'Sub' $P1562 = "104_1329260321.776" 
    capture_lex $P1562
    .const 'Sub' $P1558 = "103_1329260321.776" 
    capture_lex $P1558
    .const 'Sub' $P1557 = "102_1329260321.776" 
    capture_lex $P1557
    .const 'Sub' $P1553 = "101_1329260321.776" 
    capture_lex $P1553
    .const 'Sub' $P1552 = "100_1329260321.776" 
    capture_lex $P1552
    .const 'Sub' $P1549 = "99_1329260321.776" 
    capture_lex $P1549
    .const 'Sub' $P1548 = "98_1329260321.776" 
    capture_lex $P1548
    .const 'Sub' $P1544 = "97_1329260321.776" 
    capture_lex $P1544
    .const 'Sub' $P1543 = "96_1329260321.776" 
    capture_lex $P1543
    .const 'Sub' $P1530 = "94_1329260321.776" 
    capture_lex $P1530
    .const 'Sub' $P1529 = "93_1329260321.776" 
    capture_lex $P1529
    .const 'Sub' $P1524 = "92_1329260321.776" 
    capture_lex $P1524
    .const 'Sub' $P1523 = "91_1329260321.776" 
    capture_lex $P1523
    .const 'Sub' $P1514 = "90_1329260321.776" 
    capture_lex $P1514
    .const 'Sub' $P1513 = "89_1329260321.776" 
    capture_lex $P1513
    .const 'Sub' $P1477 = "87_1329260321.776" 
    capture_lex $P1477
    .const 'Sub' $P1476 = "86_1329260321.776" 
    capture_lex $P1476
    .const 'Sub' $P1463 = "84_1329260321.776" 
    capture_lex $P1463
    .const 'Sub' $P1462 = "83_1329260321.776" 
    capture_lex $P1462
    .const 'Sub' $P1453 = "82_1329260321.776" 
    capture_lex $P1453
    .const 'Sub' $P1452 = "81_1329260321.776" 
    capture_lex $P1452
    .const 'Sub' $P1442 = "80_1329260321.776" 
    capture_lex $P1442
    .const 'Sub' $P1441 = "79_1329260321.776" 
    capture_lex $P1441
    .const 'Sub' $P1436 = "78_1329260321.776" 
    capture_lex $P1436
    .const 'Sub' $P1435 = "77_1329260321.776" 
    capture_lex $P1435
    .const 'Sub' $P1430 = "76_1329260321.776" 
    capture_lex $P1430
    .const 'Sub' $P1429 = "75_1329260321.776" 
    capture_lex $P1429
    .const 'Sub' $P1425 = "74_1329260321.776" 
    capture_lex $P1425
    .const 'Sub' $P1410 = "73_1329260321.776" 
    capture_lex $P1410
    .lex "$?PACKAGE", $P1408
    .lex "$?CLASS", $P1409
.annotate 'line', 1305
    get_hll_global $P104, "GLOBAL"
    nqp_get_package_through_who $P105, $P104, "NQP"
    get_who $P106, $P105
    set $P107, $P106["Grammar"]
    $P107."O"(":prec<y=>, :assoc<unary>", "%methodop")
.annotate 'line', 1306
    get_hll_global $P104, "GLOBAL"
    nqp_get_package_through_who $P105, $P104, "NQP"
    get_who $P106, $P105
    set $P107, $P106["Grammar"]
    $P107."O"(":prec<x=>, :assoc<unary>", "%autoincrement")
.annotate 'line', 1307
    get_hll_global $P104, "GLOBAL"
    nqp_get_package_through_who $P105, $P104, "NQP"
    get_who $P106, $P105
    set $P107, $P106["Grammar"]
    $P107."O"(":prec<w=>, :assoc<left>", "%exponentiation")
.annotate 'line', 1308
    get_hll_global $P104, "GLOBAL"
    nqp_get_package_through_who $P105, $P104, "NQP"
    get_who $P106, $P105
    set $P107, $P106["Grammar"]
    $P107."O"(":prec<v=>, :assoc<unary>", "%symbolic_unary")
.annotate 'line', 1309
    get_hll_global $P104, "GLOBAL"
    nqp_get_package_through_who $P105, $P104, "NQP"
    get_who $P106, $P105
    set $P107, $P106["Grammar"]
    $P107."O"(":prec<u=>, :assoc<left>", "%multiplicative")
.annotate 'line', 1310
    get_hll_global $P104, "GLOBAL"
    nqp_get_package_through_who $P105, $P104, "NQP"
    get_who $P106, $P105
    set $P107, $P106["Grammar"]
    $P107."O"(":prec<t=>, :assoc<left>", "%additive")
.annotate 'line', 1311
    get_hll_global $P104, "GLOBAL"
    nqp_get_package_through_who $P105, $P104, "NQP"
    get_who $P106, $P105
    set $P107, $P106["Grammar"]
    $P107."O"(":prec<r=>, :assoc<left>", "%concatenation")
.annotate 'line', 1312
    get_hll_global $P104, "GLOBAL"
    nqp_get_package_through_who $P105, $P104, "NQP"
    get_who $P106, $P105
    set $P107, $P106["Grammar"]
    $P107."O"(":prec<m=>, :assoc<left>", "%relational")
.annotate 'line', 1313
    get_hll_global $P104, "GLOBAL"
    nqp_get_package_through_who $P105, $P104, "NQP"
    get_who $P106, $P105
    set $P107, $P106["Grammar"]
    $P107."O"(":prec<l=>, :assoc<left>", "%tight_and")
.annotate 'line', 1314
    get_hll_global $P104, "GLOBAL"
    nqp_get_package_through_who $P105, $P104, "NQP"
    get_who $P106, $P105
    set $P107, $P106["Grammar"]
    $P107."O"(":prec<k=>, :assoc<left>", "%tight_or")
.annotate 'line', 1315
    get_hll_global $P104, "GLOBAL"
    nqp_get_package_through_who $P105, $P104, "NQP"
    get_who $P106, $P105
    set $P107, $P106["Grammar"]
    $P107."O"(":prec<j=>, :assoc<right>", "%conditional")
.annotate 'line', 1316
    get_hll_global $P104, "GLOBAL"
    nqp_get_package_through_who $P105, $P104, "NQP"
    get_who $P106, $P105
    set $P107, $P106["Grammar"]
    $P107."O"(":prec<i=>, :assoc<right>", "%assignment")
.annotate 'line', 1317
    get_hll_global $P104, "GLOBAL"
    nqp_get_package_through_who $P105, $P104, "NQP"
    get_who $P106, $P105
    set $P107, $P106["Grammar"]
    $P107."O"(":prec<g=>, :assoc<list>, :nextterm<nulltermish>", "%comma")
.annotate 'line', 1318
    get_hll_global $P104, "GLOBAL"
    nqp_get_package_through_who $P105, $P104, "NQP"
    get_who $P106, $P105
    set $P107, $P106["Grammar"]
    $P107."O"(":prec<f=>, :assoc<list>", "%list_infix")
.annotate 'line', 1319
    get_hll_global $P104, "GLOBAL"
    nqp_get_package_through_who $P105, $P104, "NQP"
    get_who $P106, $P105
    set $P107, $P106["Grammar"]
    $P107."O"(":prec<e=>, :assoc<unary>", "%list_prefix")
.annotate 'line', 1418
    .const 'Sub' $P2501 = "450_1329260321.776" 
    newclosure $P2509, $P2501
.annotate 'line', 690
    .return ($P2509)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "TOP" :anon :subid("73_1329260321.776") :outer("72_1329260321.776")
    .param pmc param_1411
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 691
    .lex "self", param_1411
.annotate 'line', 693
    $P1413 = root_new ['parrot';'Hash']
    set $P1412, $P1413
    .lex "%*LANG", $P1412
.annotate 'line', 702
    $P1415 = root_new ['parrot';'Hash']
    set $P1414, $P1415
    .lex "%*HOW", $P1414
.annotate 'line', 709
    new $P104, "Undef"
    set $P1416, $P104
    .lex "$file", $P1416
.annotate 'line', 710
    new $P105, "Undef"
    set $P1417, $P105
    .lex "$source_id", $P1417
.annotate 'line', 712
    new $P106, "Undef"
    set $P1418, $P106
    .lex "$*W", $P1418
.annotate 'line', 716
    new $P107, "Undef"
    set $P1419, $P107
    .lex "$*SCOPE", $P1419
.annotate 'line', 717
    new $P108, "Undef"
    set $P1420, $P108
    .lex "$*MULTINESS", $P1420
.annotate 'line', 718
    new $P109, "Undef"
    set $P1421, $P109
    .lex "$*PKGDECL", $P1421
.annotate 'line', 719
    new $P110, "Undef"
    set $P1422, $P110
    .lex "$*INVOCANT_OK", $P1422
.annotate 'line', 720
    new $P111, "Undef"
    set $P1423, $P111
    .lex "$*RETURN_USED", $P1423
.annotate 'line', 691
    set $P114, $P1412
    unless_null $P114, vivify_1004
    get_hll_global $P112, "GLOBAL"
    get_who $P113, $P112
    set $P114, $P113["%LANG"]
    unless_null $P114, vivify_1005
    die "Contextual %*LANG not found"
  vivify_1005:
  vivify_1004:
.annotate 'line', 694
    get_hll_global $P112, "GLOBAL"
    nqp_get_package_through_who $P113, $P112, "NQP"
    get_who $P114, $P113
    set $P115, $P114["Regex"]
    set $P118, $P1412
    unless_null $P118, vivify_1006
    get_hll_global $P116, "GLOBAL"
    get_who $P117, $P116
    set $P118, $P117["%LANG"]
    unless_null $P118, vivify_1007
    die "Contextual %*LANG not found"
  vivify_1007:
    set $P1412, $P118
  vivify_1006:
    set $P118["Regex"], $P115
.annotate 'line', 695
    get_hll_global $P112, "GLOBAL"
    nqp_get_package_through_who $P113, $P112, "NQP"
    get_who $P114, $P113
    set $P115, $P114["RegexActions"]
    set $P118, $P1412
    unless_null $P118, vivify_1008
    get_hll_global $P116, "GLOBAL"
    get_who $P117, $P116
    set $P118, $P117["%LANG"]
    unless_null $P118, vivify_1009
    die "Contextual %*LANG not found"
  vivify_1009:
    set $P1412, $P118
  vivify_1008:
    set $P118["Regex-actions"], $P115
.annotate 'line', 696
    get_hll_global $P112, "GLOBAL"
    nqp_get_package_through_who $P113, $P112, "NQP"
    get_who $P114, $P113
    set $P115, $P114["Grammar"]
    set $P118, $P1412
    unless_null $P118, vivify_1010
    get_hll_global $P116, "GLOBAL"
    get_who $P117, $P116
    set $P118, $P117["%LANG"]
    unless_null $P118, vivify_1011
    die "Contextual %*LANG not found"
  vivify_1011:
    set $P1412, $P118
  vivify_1010:
    set $P118["MAIN"], $P115
.annotate 'line', 697
    get_hll_global $P112, "GLOBAL"
    nqp_get_package_through_who $P113, $P112, "NQP"
    get_who $P114, $P113
    set $P115, $P114["Actions"]
    set $P118, $P1412
    unless_null $P118, vivify_1012
    get_hll_global $P116, "GLOBAL"
    get_who $P117, $P116
    set $P118, $P117["%LANG"]
    unless_null $P118, vivify_1013
    die "Contextual %*LANG not found"
  vivify_1013:
    set $P1412, $P118
  vivify_1012:
    set $P118["MAIN-actions"], $P115
.annotate 'line', 691
    set $P114, $P1414
    unless_null $P114, vivify_1014
    get_hll_global $P112, "GLOBAL"
    get_who $P113, $P112
    set $P114, $P113["%HOW"]
    unless_null $P114, vivify_1015
    die "Contextual %*HOW not found"
  vivify_1015:
  vivify_1014:
.annotate 'line', 703
    get_knowhow $P112
    set $P115, $P1414
    unless_null $P115, vivify_1016
    get_hll_global $P113, "GLOBAL"
    get_who $P114, $P113
    set $P115, $P114["%HOW"]
    unless_null $P115, vivify_1017
    die "Contextual %*HOW not found"
  vivify_1017:
    set $P1414, $P115
  vivify_1016:
    set $P115["knowhow"], $P112
.annotate 'line', 704
    get_knowhow_attribute $P112
    set $P115, $P1414
    unless_null $P115, vivify_1018
    get_hll_global $P113, "GLOBAL"
    get_who $P114, $P113
    set $P115, $P114["%HOW"]
    unless_null $P115, vivify_1019
    die "Contextual %*HOW not found"
  vivify_1019:
    set $P1414, $P115
  vivify_1018:
    set $P115["knowhow-attr"], $P112
.annotate 'line', 709
    find_caller_lex $P112, "$?FILES"
    set $P1416, $P112
.annotate 'line', 710
    set $P112, param_1411
    nqp_decontainerize $P113, $P112
    get_hll_global $P114, "GLOBAL"
    nqp_get_package_through_who $P115, $P114, "Regex"
    get_who $P116, $P115
    set $P117, $P116["Cursor"]
    getattribute $P118, $P113, $P117, "$!target"
    set $S100, $P118
    nqp_sha1 $S101, $S100
    new $P119, 'String'
    set $P119, $S101
    concat $P120, $P119, "-"
.annotate 'line', 711
    time $N100
    set $S102, $N100
    concat $P121, $P120, $S102
    set $P1417, $P121
.annotate 'line', 712
    set $P113, $P1416
    unless_null $P113, vivify_1020
    new $P113, "Undef"
  vivify_1020:
    isnull $I100, $P113
    if $I100, if_1424
.annotate 'line', 714
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "NQP"
    get_who $P122, $P121
    set $P123, $P122["World"]
    set $P124, $P1417
    unless_null $P124, vivify_1021
    new $P124, "Undef"
  vivify_1021:
    set $P125, $P1416
    unless_null $P125, vivify_1022
    new $P125, "Undef"
  vivify_1022:
    $P126 = $P123."new"($P124 :named("handle"), $P125 :named("description"))
    set $P112, $P126
.annotate 'line', 712
    goto if_1424_end
  if_1424:
.annotate 'line', 713
    get_hll_global $P114, "GLOBAL"
    nqp_get_package_through_who $P115, $P114, "NQP"
    get_who $P116, $P115
    set $P117, $P116["World"]
    set $P118, $P1417
    unless_null $P118, vivify_1023
    new $P118, "Undef"
  vivify_1023:
    $P119 = $P117."new"($P118 :named("handle"))
    set $P112, $P119
  if_1424_end:
.annotate 'line', 712
    set $P1418, $P112
.annotate 'line', 716
    new $P112, "String"
    assign $P112, ""
    set $P1419, $P112
.annotate 'line', 717
    new $P112, "String"
    assign $P112, ""
    set $P1420, $P112
.annotate 'line', 718
    new $P112, "String"
    assign $P112, ""
    set $P1421, $P112
.annotate 'line', 719
    new $P112, "Float"
    assign $P112, 0
    set $P1422, $P112
.annotate 'line', 720
    new $P112, "Float"
    assign $P112, 0
    set $P1423, $P112
.annotate 'line', 721
    set $P112, param_1411
    nqp_decontainerize $P113, $P112
    $P114 = $P113."comp_unit"()
.annotate 'line', 691
    .return ($P114)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "identifier"  :subid("74_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 726
    .local string rx1426_tgt
    .local int rx1426_pos
    .local int rx1426_off
    .local int rx1426_eos
    .local int rx1426_rep
    .local pmc rx1426_cur
    .local pmc rx1426_debug
    (rx1426_cur, rx1426_pos, rx1426_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1426_cur
    .local pmc match
    .lex "$/", match
    length rx1426_eos, rx1426_tgt
    gt rx1426_pos, rx1426_eos, rx1426_done
    set rx1426_off, 0
    lt rx1426_pos, 2, rx1426_start
    sub rx1426_off, rx1426_pos, 1
    substr rx1426_tgt, rx1426_tgt, rx1426_off
  rx1426_start:
    eq $I10, 1, rx1426_restart
    if_null rx1426_debug, debug_1024
    rx1426_cur."!cursor_debug"("START", "identifier")
  debug_1024:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1427_done
    goto rxscan1427_scan
  rxscan1427_loop:
    (rx1426_pos) = rx1426_cur."from"()
    inc rx1426_pos
    rx1426_cur."!cursor_from"(rx1426_pos)
    ge rx1426_pos, rx1426_eos, rxscan1427_done
  rxscan1427_scan:
    set_addr $I10, rxscan1427_loop
    rx1426_cur."!mark_push"(0, rx1426_pos, $I10)
  rxscan1427_done:
  # rx subrule "ident" subtype=method negate=
    rx1426_cur."!cursor_pos"(rx1426_pos)
    $P10 = rx1426_cur."ident"()
    unless $P10, rx1426_fail
    rx1426_pos = $P10."pos"()
  # rx rxquantr1428 ** 0..*
    set_addr $I10, rxquantr1428_done
    rx1426_cur."!mark_push"(0, rx1426_pos, $I10)
  rxquantr1428_loop:
  # rx enumcharlist negate=0 
    ge rx1426_pos, rx1426_eos, rx1426_fail
    sub $I10, rx1426_pos, rx1426_off
    substr $S10, rx1426_tgt, $I10, 1
    index $I11, "-'", $S10
    lt $I11, 0, rx1426_fail
    inc rx1426_pos
  # rx subrule "ident" subtype=method negate=
    rx1426_cur."!cursor_pos"(rx1426_pos)
    $P10 = rx1426_cur."ident"()
    unless $P10, rx1426_fail
    rx1426_pos = $P10."pos"()
    set_addr $I10, rxquantr1428_done
    (rx1426_rep) = rx1426_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr1428_done
    rx1426_cur."!mark_push"(rx1426_rep, rx1426_pos, $I10)
    goto rxquantr1428_loop
  rxquantr1428_done:
  # rx pass
    rx1426_cur."!cursor_pass"(rx1426_pos, "identifier")
    if_null rx1426_debug, debug_1025
    rx1426_cur."!cursor_debug"("PASS", "identifier", " at pos=", rx1426_pos)
  debug_1025:
    .return (rx1426_cur)
  rx1426_restart:
    if_null rx1426_debug, debug_1026
    rx1426_cur."!cursor_debug"("NEXT", "identifier")
  debug_1026:
  rx1426_fail:
    (rx1426_rep, rx1426_pos, $I10, $P10) = rx1426_cur."!mark_fail"(0)
    lt rx1426_pos, -1, rx1426_done
    eq rx1426_pos, -1, rx1426_fail
    jump $I10
  rx1426_done:
    rx1426_cur."!cursor_fail"()
    if_null rx1426_debug, debug_1027
    rx1426_cur."!cursor_debug"("FAIL", "identifier")
  debug_1027:
    .return (rx1426_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__identifier"  :subid("75_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 726
    $P104 = self."!PREFIX__!subrule"("ident", "")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "name"  :subid("76_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 728
    .local string rx1431_tgt
    .local int rx1431_pos
    .local int rx1431_off
    .local int rx1431_eos
    .local int rx1431_rep
    .local pmc rx1431_cur
    .local pmc rx1431_debug
    (rx1431_cur, rx1431_pos, rx1431_tgt, $I10) = self."!cursor_start"()
    rx1431_cur."!cursor_caparray"("identifier")
    .lex unicode:"$\x{a2}", rx1431_cur
    .local pmc match
    .lex "$/", match
    length rx1431_eos, rx1431_tgt
    gt rx1431_pos, rx1431_eos, rx1431_done
    set rx1431_off, 0
    lt rx1431_pos, 2, rx1431_start
    sub rx1431_off, rx1431_pos, 1
    substr rx1431_tgt, rx1431_tgt, rx1431_off
  rx1431_start:
    eq $I10, 1, rx1431_restart
    if_null rx1431_debug, debug_1028
    rx1431_cur."!cursor_debug"("START", "name")
  debug_1028:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1432_done
    goto rxscan1432_scan
  rxscan1432_loop:
    (rx1431_pos) = rx1431_cur."from"()
    inc rx1431_pos
    rx1431_cur."!cursor_from"(rx1431_pos)
    ge rx1431_pos, rx1431_eos, rxscan1432_done
  rxscan1432_scan:
    set_addr $I10, rxscan1432_loop
    rx1431_cur."!mark_push"(0, rx1431_pos, $I10)
  rxscan1432_done:
  # rx rxquantr1433 ** 1..*
    set_addr $I10, rxquantr1433_done
    rx1431_cur."!mark_push"(0, -1, $I10)
  rxquantr1433_loop:
  # rx subrule "identifier" subtype=capture negate=
    rx1431_cur."!cursor_pos"(rx1431_pos)
    $P10 = rx1431_cur."identifier"()
    unless $P10, rx1431_fail
    goto rxsubrule1434_pass
  rxsubrule1434_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1431_fail
  rxsubrule1434_pass:
    set_addr $I10, rxsubrule1434_back
    rx1431_cur."!mark_push"(0, rx1431_pos, $I10, $P10)
    $P10."!cursor_names"("identifier")
    rx1431_pos = $P10."pos"()
    set_addr $I10, rxquantr1433_done
    (rx1431_rep) = rx1431_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr1433_done
    rx1431_cur."!mark_push"(rx1431_rep, rx1431_pos, $I10)
  # rx literal  "::"
    add $I11, rx1431_pos, 2
    gt $I11, rx1431_eos, rx1431_fail
    sub $I11, rx1431_pos, rx1431_off
    substr $S10, rx1431_tgt, $I11, 2
    ne $S10, "::", rx1431_fail
    add rx1431_pos, 2
    goto rxquantr1433_loop
  rxquantr1433_done:
  # rx pass
    rx1431_cur."!cursor_pass"(rx1431_pos, "name")
    if_null rx1431_debug, debug_1029
    rx1431_cur."!cursor_debug"("PASS", "name", " at pos=", rx1431_pos)
  debug_1029:
    .return (rx1431_cur)
  rx1431_restart:
    if_null rx1431_debug, debug_1030
    rx1431_cur."!cursor_debug"("NEXT", "name")
  debug_1030:
  rx1431_fail:
    (rx1431_rep, rx1431_pos, $I10, $P10) = rx1431_cur."!mark_fail"(0)
    lt rx1431_pos, -1, rx1431_done
    eq rx1431_pos, -1, rx1431_fail
    jump $I10
  rx1431_done:
    rx1431_cur."!cursor_fail"()
    if_null rx1431_debug, debug_1031
    rx1431_cur."!cursor_debug"("FAIL", "name")
  debug_1031:
    .return (rx1431_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__name"  :subid("77_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 728
    new $P104, "ResizablePMCArray"
    push $P104, ""
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "deflongname"  :subid("78_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 730
    .local string rx1437_tgt
    .local int rx1437_pos
    .local int rx1437_off
    .local int rx1437_eos
    .local int rx1437_rep
    .local pmc rx1437_cur
    .local pmc rx1437_debug
    (rx1437_cur, rx1437_pos, rx1437_tgt, $I10) = self."!cursor_start"()
    rx1437_cur."!cursor_caparray"("colonpair")
    .lex unicode:"$\x{a2}", rx1437_cur
    .local pmc match
    .lex "$/", match
    length rx1437_eos, rx1437_tgt
    gt rx1437_pos, rx1437_eos, rx1437_done
    set rx1437_off, 0
    lt rx1437_pos, 2, rx1437_start
    sub rx1437_off, rx1437_pos, 1
    substr rx1437_tgt, rx1437_tgt, rx1437_off
  rx1437_start:
    eq $I10, 1, rx1437_restart
    if_null rx1437_debug, debug_1032
    rx1437_cur."!cursor_debug"("START", "deflongname")
  debug_1032:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1438_done
    goto rxscan1438_scan
  rxscan1438_loop:
    (rx1437_pos) = rx1437_cur."from"()
    inc rx1437_pos
    rx1437_cur."!cursor_from"(rx1437_pos)
    ge rx1437_pos, rx1437_eos, rxscan1438_done
  rxscan1438_scan:
    set_addr $I10, rxscan1438_loop
    rx1437_cur."!mark_push"(0, rx1437_pos, $I10)
  rxscan1438_done:
.annotate 'line', 731
  # rx subrule "identifier" subtype=capture negate=
    rx1437_cur."!cursor_pos"(rx1437_pos)
    $P10 = rx1437_cur."identifier"()
    unless $P10, rx1437_fail
    rx1437_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("identifier")
    rx1437_pos = $P10."pos"()
  # rx rxquantr1439 ** 0..1
    set_addr $I10, rxquantr1439_done
    rx1437_cur."!mark_push"(0, rx1437_pos, $I10)
  rxquantr1439_loop:
  # rx subrule "colonpair" subtype=capture negate=
    rx1437_cur."!cursor_pos"(rx1437_pos)
    $P10 = rx1437_cur."colonpair"()
    unless $P10, rx1437_fail
    goto rxsubrule1440_pass
  rxsubrule1440_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1437_fail
  rxsubrule1440_pass:
    set_addr $I10, rxsubrule1440_back
    rx1437_cur."!mark_push"(0, rx1437_pos, $I10, $P10)
    $P10."!cursor_names"("colonpair")
    rx1437_pos = $P10."pos"()
    set_addr $I10, rxquantr1439_done
    (rx1437_rep) = rx1437_cur."!mark_commit"($I10)
  rxquantr1439_done:
.annotate 'line', 730
  # rx pass
    rx1437_cur."!cursor_pass"(rx1437_pos, "deflongname")
    if_null rx1437_debug, debug_1033
    rx1437_cur."!cursor_debug"("PASS", "deflongname", " at pos=", rx1437_pos)
  debug_1033:
    .return (rx1437_cur)
  rx1437_restart:
    if_null rx1437_debug, debug_1034
    rx1437_cur."!cursor_debug"("NEXT", "deflongname")
  debug_1034:
  rx1437_fail:
    (rx1437_rep, rx1437_pos, $I10, $P10) = rx1437_cur."!mark_fail"(0)
    lt rx1437_pos, -1, rx1437_done
    eq rx1437_pos, -1, rx1437_fail
    jump $I10
  rx1437_done:
    rx1437_cur."!cursor_fail"()
    if_null rx1437_debug, debug_1035
    rx1437_cur."!cursor_debug"("FAIL", "deflongname")
  debug_1035:
    .return (rx1437_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__deflongname"  :subid("79_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 730
    $P104 = self."!PREFIX__!subrule"("identifier", "")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "ENDSTMT"  :subid("80_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 734
    .local string rx1443_tgt
    .local int rx1443_pos
    .local int rx1443_off
    .local int rx1443_eos
    .local int rx1443_rep
    .local pmc rx1443_cur
    .local pmc rx1443_debug
    (rx1443_cur, rx1443_pos, rx1443_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1443_cur
    .local pmc match
    .lex "$/", match
    length rx1443_eos, rx1443_tgt
    gt rx1443_pos, rx1443_eos, rx1443_done
    set rx1443_off, 0
    lt rx1443_pos, 2, rx1443_start
    sub rx1443_off, rx1443_pos, 1
    substr rx1443_tgt, rx1443_tgt, rx1443_off
  rx1443_start:
    eq $I10, 1, rx1443_restart
    if_null rx1443_debug, debug_1036
    rx1443_cur."!cursor_debug"("START", "ENDSTMT")
  debug_1036:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1444_done
    goto rxscan1444_scan
  rxscan1444_loop:
    (rx1443_pos) = rx1443_cur."from"()
    inc rx1443_pos
    rx1443_cur."!cursor_from"(rx1443_pos)
    ge rx1443_pos, rx1443_eos, rxscan1444_done
  rxscan1444_scan:
    set_addr $I10, rxscan1444_loop
    rx1443_cur."!mark_push"(0, rx1443_pos, $I10)
  rxscan1444_done:
.annotate 'line', 738
  # rx rxquantr1445 ** 0..1
    set_addr $I10, rxquantr1445_done
    rx1443_cur."!mark_push"(0, rx1443_pos, $I10)
  rxquantr1445_loop:
  alt1446_0:
.annotate 'line', 735
    set_addr $I10, alt1446_1
    rx1443_cur."!mark_push"(0, rx1443_pos, $I10)
.annotate 'line', 736
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx1443_pos, rx1443_off
    set rx1443_rep, 0
    sub $I12, rx1443_eos, rx1443_pos
  rxenumcharlistq1447_loop:
    le $I12, 0, rxenumcharlistq1447_done
    substr $S10, rx1443_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1447_done
    inc rx1443_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1447_loop
  rxenumcharlistq1447_done:
    add rx1443_pos, rx1443_pos, rx1443_rep
  # rxanchor eol
    sub $I10, rx1443_pos, rx1443_off
    is_cclass $I11, .CCLASS_NEWLINE, rx1443_tgt, $I10
    if $I11, rxanchor1448_done
    ne rx1443_pos, rx1443_eos, rx1443_fail
    eq rx1443_pos, 0, rxanchor1448_done
    dec $I10
    is_cclass $I11, .CCLASS_NEWLINE, rx1443_tgt, $I10
    if $I11, rx1443_fail
  rxanchor1448_done:
  # rx subrule "ws" subtype=method negate=
    rx1443_cur."!cursor_pos"(rx1443_pos)
    $P10 = rx1443_cur."ws"()
    unless $P10, rx1443_fail
    rx1443_pos = $P10."pos"()
  # rx subrule "MARKER" subtype=zerowidth negate=
    rx1443_cur."!cursor_pos"(rx1443_pos)
    $P10 = rx1443_cur."MARKER"("endstmt")
    unless $P10, rx1443_fail
    goto alt1446_end
  alt1446_1:
.annotate 'line', 737
  # rx rxquantr1449 ** 0..1
    set_addr $I10, rxquantr1449_done
    rx1443_cur."!mark_push"(0, rx1443_pos, $I10)
  rxquantr1449_loop:
  # rx subrule "unv" subtype=method negate=
    rx1443_cur."!cursor_pos"(rx1443_pos)
    $P10 = rx1443_cur."unv"()
    unless $P10, rx1443_fail
    goto rxsubrule1450_pass
  rxsubrule1450_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1443_fail
  rxsubrule1450_pass:
    set_addr $I10, rxsubrule1450_back
    rx1443_cur."!mark_push"(0, rx1443_pos, $I10, $P10)
    rx1443_pos = $P10."pos"()
    set_addr $I10, rxquantr1449_done
    (rx1443_rep) = rx1443_cur."!mark_commit"($I10)
  rxquantr1449_done:
  # rxanchor eol
    sub $I10, rx1443_pos, rx1443_off
    is_cclass $I11, .CCLASS_NEWLINE, rx1443_tgt, $I10
    if $I11, rxanchor1451_done
    ne rx1443_pos, rx1443_eos, rx1443_fail
    eq rx1443_pos, 0, rxanchor1451_done
    dec $I10
    is_cclass $I11, .CCLASS_NEWLINE, rx1443_tgt, $I10
    if $I11, rx1443_fail
  rxanchor1451_done:
  # rx subrule "ws" subtype=method negate=
    rx1443_cur."!cursor_pos"(rx1443_pos)
    $P10 = rx1443_cur."ws"()
    unless $P10, rx1443_fail
    rx1443_pos = $P10."pos"()
  # rx subrule "MARKER" subtype=zerowidth negate=
    rx1443_cur."!cursor_pos"(rx1443_pos)
    $P10 = rx1443_cur."MARKER"("endstmt")
    unless $P10, rx1443_fail
  alt1446_end:
.annotate 'line', 738
    set_addr $I10, rxquantr1445_done
    (rx1443_rep) = rx1443_cur."!mark_commit"($I10)
  rxquantr1445_done:
.annotate 'line', 734
  # rx pass
    rx1443_cur."!cursor_pass"(rx1443_pos, "ENDSTMT")
    if_null rx1443_debug, debug_1037
    rx1443_cur."!cursor_debug"("PASS", "ENDSTMT", " at pos=", rx1443_pos)
  debug_1037:
    .return (rx1443_cur)
  rx1443_restart:
    if_null rx1443_debug, debug_1038
    rx1443_cur."!cursor_debug"("NEXT", "ENDSTMT")
  debug_1038:
  rx1443_fail:
    (rx1443_rep, rx1443_pos, $I10, $P10) = rx1443_cur."!mark_fail"(0)
    lt rx1443_pos, -1, rx1443_done
    eq rx1443_pos, -1, rx1443_fail
    jump $I10
  rx1443_done:
    rx1443_cur."!cursor_fail"()
    if_null rx1443_debug, debug_1039
    rx1443_cur."!cursor_debug"("FAIL", "ENDSTMT")
  debug_1039:
    .return (rx1443_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__ENDSTMT"  :subid("81_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 734
    new $P104, "ResizablePMCArray"
    push $P104, ""
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "ws"  :subid("82_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 741
    .local string rx1454_tgt
    .local int rx1454_pos
    .local int rx1454_off
    .local int rx1454_eos
    .local int rx1454_rep
    .local pmc rx1454_cur
    .local pmc rx1454_debug
    (rx1454_cur, rx1454_pos, rx1454_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1454_cur
    .local pmc match
    .lex "$/", match
    length rx1454_eos, rx1454_tgt
    gt rx1454_pos, rx1454_eos, rx1454_done
    set rx1454_off, 0
    lt rx1454_pos, 2, rx1454_start
    sub rx1454_off, rx1454_pos, 1
    substr rx1454_tgt, rx1454_tgt, rx1454_off
  rx1454_start:
    eq $I10, 1, rx1454_restart
    if_null rx1454_debug, debug_1040
    rx1454_cur."!cursor_debug"("START", "ws")
  debug_1040:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1455_done
    goto rxscan1455_scan
  rxscan1455_loop:
    (rx1454_pos) = rx1454_cur."from"()
    inc rx1454_pos
    rx1454_cur."!cursor_from"(rx1454_pos)
    ge rx1454_pos, rx1454_eos, rxscan1455_done
  rxscan1455_scan:
    set_addr $I10, rxscan1455_loop
    rx1454_cur."!mark_push"(0, rx1454_pos, $I10)
  rxscan1455_done:
  alt1456_0:
    set_addr $I10, alt1456_1
    rx1454_cur."!mark_push"(0, rx1454_pos, $I10)
.annotate 'line', 742
  # rx subrule "MARKED" subtype=zerowidth negate=
    rx1454_cur."!cursor_pos"(rx1454_pos)
    $P10 = rx1454_cur."MARKED"("ws")
    unless $P10, rx1454_fail
    goto alt1456_end
  alt1456_1:
.annotate 'line', 743
  # rx subrule "ww" subtype=zerowidth negate=1
    rx1454_cur."!cursor_pos"(rx1454_pos)
    $P10 = rx1454_cur."ww"()
    if $P10, rx1454_fail
.annotate 'line', 748
  # rx rxquantr1457 ** 0..*
    set_addr $I10, rxquantr1457_done
    rx1454_cur."!mark_push"(0, rx1454_pos, $I10)
  rxquantr1457_loop:
  alt1458_0:
.annotate 'line', 744
    set_addr $I10, alt1458_1
    rx1454_cur."!mark_push"(0, rx1454_pos, $I10)
  # rx enumcharlist_q negate=0  r 1..-1
    sub $I10, rx1454_pos, rx1454_off
    set rx1454_rep, 0
    sub $I12, rx1454_eos, rx1454_pos
  rxenumcharlistq1459_loop:
    le $I12, 0, rxenumcharlistq1459_done
    substr $S10, rx1454_tgt, $I10, 1
    index $I11, unicode:"\n\x{b}\f\r\x{85}\u2028\u2029", $S10
    lt $I11, 0, rxenumcharlistq1459_done
    inc rx1454_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1459_loop
  rxenumcharlistq1459_done:
    lt rx1454_rep, 1, rx1454_fail
    add rx1454_pos, rx1454_pos, rx1454_rep
    goto alt1458_end
  alt1458_1:
    set_addr $I10, alt1458_2
    rx1454_cur."!mark_push"(0, rx1454_pos, $I10)
.annotate 'line', 745
  # rx literal  "#"
    add $I11, rx1454_pos, 1
    gt $I11, rx1454_eos, rx1454_fail
    sub $I11, rx1454_pos, rx1454_off
    ord $I11, rx1454_tgt, $I11
    ne $I11, 35, rx1454_fail
    add rx1454_pos, 1
  # rx charclass_q N r 0..-1
    sub $I10, rx1454_pos, rx1454_off
    find_cclass $I11, .CCLASS_NEWLINE, rx1454_tgt, $I10, rx1454_eos
    add rx1454_pos, rx1454_off, $I11
    goto alt1458_end
  alt1458_2:
    set_addr $I10, alt1458_3
    rx1454_cur."!mark_push"(0, rx1454_pos, $I10)
.annotate 'line', 746
  # rxanchor bol
    eq rx1454_pos, 0, rxanchor1460_done
    ge rx1454_pos, rx1454_eos, rx1454_fail
    sub $I10, rx1454_pos, rx1454_off
    dec $I10
    is_cclass $I11, .CCLASS_NEWLINE, rx1454_tgt, $I10
    unless $I11, rx1454_fail
  rxanchor1460_done:
  # rx subrule "pod_comment" subtype=method negate=
    rx1454_cur."!cursor_pos"(rx1454_pos)
    $P10 = rx1454_cur."pod_comment"()
    unless $P10, rx1454_fail
    rx1454_pos = $P10."pos"()
    goto alt1458_end
  alt1458_3:
.annotate 'line', 747
  # rx enumcharlist_q negate=0  r 1..-1
    sub $I10, rx1454_pos, rx1454_off
    set rx1454_rep, 0
    sub $I12, rx1454_eos, rx1454_pos
  rxenumcharlistq1461_loop:
    le $I12, 0, rxenumcharlistq1461_done
    substr $S10, rx1454_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1461_done
    inc rx1454_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1461_loop
  rxenumcharlistq1461_done:
    lt rx1454_rep, 1, rx1454_fail
    add rx1454_pos, rx1454_pos, rx1454_rep
  alt1458_end:
.annotate 'line', 748
    set_addr $I10, rxquantr1457_done
    (rx1454_rep) = rx1454_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr1457_done
    rx1454_cur."!mark_push"(rx1454_rep, rx1454_pos, $I10)
    goto rxquantr1457_loop
  rxquantr1457_done:
.annotate 'line', 749
  # rx subrule "MARKER" subtype=zerowidth negate=
    rx1454_cur."!cursor_pos"(rx1454_pos)
    $P10 = rx1454_cur."MARKER"("ws")
    unless $P10, rx1454_fail
  alt1456_end:
.annotate 'line', 741
  # rx pass
    rx1454_cur."!cursor_pass"(rx1454_pos, "ws")
    if_null rx1454_debug, debug_1041
    rx1454_cur."!cursor_debug"("PASS", "ws", " at pos=", rx1454_pos)
  debug_1041:
    .return (rx1454_cur)
  rx1454_restart:
    if_null rx1454_debug, debug_1042
    rx1454_cur."!cursor_debug"("NEXT", "ws")
  debug_1042:
  rx1454_fail:
    (rx1454_rep, rx1454_pos, $I10, $P10) = rx1454_cur."!mark_fail"(0)
    lt rx1454_pos, -1, rx1454_done
    eq rx1454_pos, -1, rx1454_fail
    jump $I10
  rx1454_done:
    rx1454_cur."!cursor_fail"()
    if_null rx1454_debug, debug_1043
    rx1454_cur."!cursor_debug"("FAIL", "ws")
  debug_1043:
    .return (rx1454_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__ws"  :subid("83_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 741
    new $P104, "ResizablePMCArray"
    push $P104, ""
    push $P104, ""
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "unv"  :subid("84_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 752
    .const 'Sub' $P1469 = "85_1329260321.776" 
    capture_lex $P1469
    .local string rx1464_tgt
    .local int rx1464_pos
    .local int rx1464_off
    .local int rx1464_eos
    .local int rx1464_rep
    .local pmc rx1464_cur
    .local pmc rx1464_debug
    (rx1464_cur, rx1464_pos, rx1464_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1464_cur
    .local pmc match
    .lex "$/", match
    length rx1464_eos, rx1464_tgt
    gt rx1464_pos, rx1464_eos, rx1464_done
    set rx1464_off, 0
    lt rx1464_pos, 2, rx1464_start
    sub rx1464_off, rx1464_pos, 1
    substr rx1464_tgt, rx1464_tgt, rx1464_off
  rx1464_start:
    eq $I10, 1, rx1464_restart
    if_null rx1464_debug, debug_1044
    rx1464_cur."!cursor_debug"("START", "unv")
  debug_1044:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1465_done
    goto rxscan1465_scan
  rxscan1465_loop:
    (rx1464_pos) = rx1464_cur."from"()
    inc rx1464_pos
    rx1464_cur."!cursor_from"(rx1464_pos)
    ge rx1464_pos, rx1464_eos, rxscan1465_done
  rxscan1465_scan:
    set_addr $I10, rxscan1465_loop
    rx1464_cur."!mark_push"(0, rx1464_pos, $I10)
  rxscan1465_done:
  alt1466_0:
.annotate 'line', 754
    set_addr $I10, alt1466_1
    rx1464_cur."!mark_push"(0, rx1464_pos, $I10)
.annotate 'line', 755
  # rxanchor bol
    eq rx1464_pos, 0, rxanchor1467_done
    ge rx1464_pos, rx1464_eos, rx1464_fail
    sub $I10, rx1464_pos, rx1464_off
    dec $I10
    is_cclass $I11, .CCLASS_NEWLINE, rx1464_tgt, $I10
    unless $I11, rx1464_fail
  rxanchor1467_done:
  # rx subrule "before" subtype=zerowidth negate=
    rx1464_cur."!cursor_pos"(rx1464_pos)
    .const 'Sub' $P1469 = "85_1329260321.776" 
    capture_lex $P1469
    $P10 = rx1464_cur."before"($P1469)
    unless $P10, rx1464_fail
  # rx subrule "pod_comment" subtype=method negate=
    rx1464_cur."!cursor_pos"(rx1464_pos)
    $P10 = rx1464_cur."pod_comment"()
    unless $P10, rx1464_fail
    rx1464_pos = $P10."pos"()
    goto alt1466_end
  alt1466_1:
    set_addr $I10, alt1466_2
    rx1464_cur."!mark_push"(0, rx1464_pos, $I10)
.annotate 'line', 756
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx1464_pos, rx1464_off
    set rx1464_rep, 0
    sub $I12, rx1464_eos, rx1464_pos
  rxenumcharlistq1474_loop:
    le $I12, 0, rxenumcharlistq1474_done
    substr $S10, rx1464_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1474_done
    inc rx1464_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1474_loop
  rxenumcharlistq1474_done:
    add rx1464_pos, rx1464_pos, rx1464_rep
  # rx literal  "#"
    add $I11, rx1464_pos, 1
    gt $I11, rx1464_eos, rx1464_fail
    sub $I11, rx1464_pos, rx1464_off
    ord $I11, rx1464_tgt, $I11
    ne $I11, 35, rx1464_fail
    add rx1464_pos, 1
  # rx charclass_q N r 0..-1
    sub $I10, rx1464_pos, rx1464_off
    find_cclass $I11, .CCLASS_NEWLINE, rx1464_tgt, $I10, rx1464_eos
    add rx1464_pos, rx1464_off, $I11
    goto alt1466_end
  alt1466_2:
.annotate 'line', 757
  # rx enumcharlist_q negate=0  r 1..-1
    sub $I10, rx1464_pos, rx1464_off
    set rx1464_rep, 0
    sub $I12, rx1464_eos, rx1464_pos
  rxenumcharlistq1475_loop:
    le $I12, 0, rxenumcharlistq1475_done
    substr $S10, rx1464_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1475_done
    inc rx1464_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1475_loop
  rxenumcharlistq1475_done:
    lt rx1464_rep, 1, rx1464_fail
    add rx1464_pos, rx1464_pos, rx1464_rep
  alt1466_end:
.annotate 'line', 752
  # rx pass
    rx1464_cur."!cursor_pass"(rx1464_pos, "unv")
    if_null rx1464_debug, debug_1049
    rx1464_cur."!cursor_debug"("PASS", "unv", " at pos=", rx1464_pos)
  debug_1049:
    .return (rx1464_cur)
  rx1464_restart:
    if_null rx1464_debug, debug_1050
    rx1464_cur."!cursor_debug"("NEXT", "unv")
  debug_1050:
  rx1464_fail:
    (rx1464_rep, rx1464_pos, $I10, $P10) = rx1464_cur."!mark_fail"(0)
    lt rx1464_pos, -1, rx1464_done
    eq rx1464_pos, -1, rx1464_fail
    jump $I10
  rx1464_done:
    rx1464_cur."!cursor_fail"()
    if_null rx1464_debug, debug_1051
    rx1464_cur."!cursor_debug"("FAIL", "unv")
  debug_1051:
    .return (rx1464_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1468"  :anon :subid("85_1329260321.776") :method :outer("84_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 755
    .local string rx1470_tgt
    .local int rx1470_pos
    .local int rx1470_off
    .local int rx1470_eos
    .local int rx1470_rep
    .local pmc rx1470_cur
    .local pmc rx1470_debug
    (rx1470_cur, rx1470_pos, rx1470_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1470_cur
    .local pmc match
    .lex "$/", match
    length rx1470_eos, rx1470_tgt
    gt rx1470_pos, rx1470_eos, rx1470_done
    set rx1470_off, 0
    lt rx1470_pos, 2, rx1470_start
    sub rx1470_off, rx1470_pos, 1
    substr rx1470_tgt, rx1470_tgt, rx1470_off
  rx1470_start:
    eq $I10, 1, rx1470_restart
    if_null rx1470_debug, debug_1045
    rx1470_cur."!cursor_debug"("START", "")
  debug_1045:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1471_done
    goto rxscan1471_scan
  rxscan1471_loop:
    (rx1470_pos) = rx1470_cur."from"()
    inc rx1470_pos
    rx1470_cur."!cursor_from"(rx1470_pos)
    ge rx1470_pos, rx1470_eos, rxscan1471_done
  rxscan1471_scan:
    set_addr $I10, rxscan1471_loop
    rx1470_cur."!mark_push"(0, rx1470_pos, $I10)
  rxscan1471_done:
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx1470_pos, rx1470_off
    set rx1470_rep, 0
    sub $I12, rx1470_eos, rx1470_pos
  rxenumcharlistq1472_loop:
    le $I12, 0, rxenumcharlistq1472_done
    substr $S10, rx1470_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1472_done
    inc rx1470_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1472_loop
  rxenumcharlistq1472_done:
    add rx1470_pos, rx1470_pos, rx1470_rep
  # rx literal  "="
    add $I11, rx1470_pos, 1
    gt $I11, rx1470_eos, rx1470_fail
    sub $I11, rx1470_pos, rx1470_off
    ord $I11, rx1470_tgt, $I11
    ne $I11, 61, rx1470_fail
    add rx1470_pos, 1
  alt1473_0:
    set_addr $I10, alt1473_1
    rx1470_cur."!mark_push"(0, rx1470_pos, $I10)
  # rx charclass w
    ge rx1470_pos, rx1470_eos, rx1470_fail
    sub $I10, rx1470_pos, rx1470_off
    is_cclass $I11, .CCLASS_WORD, rx1470_tgt, $I10
    unless $I11, rx1470_fail
    inc rx1470_pos
    goto alt1473_end
  alt1473_1:
  # rx literal  "\\"
    add $I11, rx1470_pos, 1
    gt $I11, rx1470_eos, rx1470_fail
    sub $I11, rx1470_pos, rx1470_off
    ord $I11, rx1470_tgt, $I11
    ne $I11, 92, rx1470_fail
    add rx1470_pos, 1
  alt1473_end:
  # rx pass
    rx1470_cur."!cursor_pass"(rx1470_pos, "")
    if_null rx1470_debug, debug_1046
    rx1470_cur."!cursor_debug"("PASS", "", " at pos=", rx1470_pos)
  debug_1046:
    .return (rx1470_cur)
  rx1470_restart:
    if_null rx1470_debug, debug_1047
    rx1470_cur."!cursor_debug"("NEXT", "")
  debug_1047:
  rx1470_fail:
    (rx1470_rep, rx1470_pos, $I10, $P10) = rx1470_cur."!mark_fail"(0)
    lt rx1470_pos, -1, rx1470_done
    eq rx1470_pos, -1, rx1470_fail
    jump $I10
  rx1470_done:
    rx1470_cur."!cursor_fail"()
    if_null rx1470_debug, debug_1048
    rx1470_cur."!cursor_debug"("FAIL", "")
  debug_1048:
    .return (rx1470_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__unv"  :subid("86_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 752
    new $P104, "ResizablePMCArray"
    push $P104, ""
    push $P104, ""
    push $P104, ""
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "pod_comment"  :subid("87_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 761
    .const 'Sub' $P1506 = "88_1329260321.776" 
    capture_lex $P1506
    .local string rx1478_tgt
    .local int rx1478_pos
    .local int rx1478_off
    .local int rx1478_eos
    .local int rx1478_rep
    .local pmc rx1478_cur
    .local pmc rx1478_debug
    (rx1478_cur, rx1478_pos, rx1478_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1478_cur
    .local pmc match
    .lex "$/", match
    length rx1478_eos, rx1478_tgt
    gt rx1478_pos, rx1478_eos, rx1478_done
    set rx1478_off, 0
    lt rx1478_pos, 2, rx1478_start
    sub rx1478_off, rx1478_pos, 1
    substr rx1478_tgt, rx1478_tgt, rx1478_off
  rx1478_start:
    eq $I10, 1, rx1478_restart
    if_null rx1478_debug, debug_1052
    rx1478_cur."!cursor_debug"("START", "pod_comment")
  debug_1052:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1479_done
    goto rxscan1479_scan
  rxscan1479_loop:
    (rx1478_pos) = rx1478_cur."from"()
    inc rx1478_pos
    rx1478_cur."!cursor_from"(rx1478_pos)
    ge rx1478_pos, rx1478_eos, rxscan1479_done
  rxscan1479_scan:
    set_addr $I10, rxscan1479_loop
    rx1478_cur."!mark_push"(0, rx1478_pos, $I10)
  rxscan1479_done:
.annotate 'line', 762
  # rxanchor bol
    eq rx1478_pos, 0, rxanchor1480_done
    ge rx1478_pos, rx1478_eos, rx1478_fail
    sub $I10, rx1478_pos, rx1478_off
    dec $I10
    is_cclass $I11, .CCLASS_NEWLINE, rx1478_tgt, $I10
    unless $I11, rx1478_fail
  rxanchor1480_done:
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx1478_pos, rx1478_off
    set rx1478_rep, 0
    sub $I12, rx1478_eos, rx1478_pos
  rxenumcharlistq1481_loop:
    le $I12, 0, rxenumcharlistq1481_done
    substr $S10, rx1478_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1481_done
    inc rx1478_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1481_loop
  rxenumcharlistq1481_done:
    add rx1478_pos, rx1478_pos, rx1478_rep
  # rx literal  "="
    add $I11, rx1478_pos, 1
    gt $I11, rx1478_eos, rx1478_fail
    sub $I11, rx1478_pos, rx1478_off
    ord $I11, rx1478_tgt, $I11
    ne $I11, 61, rx1478_fail
    add rx1478_pos, 1
  alt1482_0:
.annotate 'line', 763
    set_addr $I10, alt1482_1
    rx1478_cur."!mark_push"(0, rx1478_pos, $I10)
.annotate 'line', 764
  # rx literal  "begin"
    add $I11, rx1478_pos, 5
    gt $I11, rx1478_eos, rx1478_fail
    sub $I11, rx1478_pos, rx1478_off
    substr $S10, rx1478_tgt, $I11, 5
    ne $S10, "begin", rx1478_fail
    add rx1478_pos, 5
  # rx enumcharlist_q negate=0  r 1..-1
    sub $I10, rx1478_pos, rx1478_off
    set rx1478_rep, 0
    sub $I12, rx1478_eos, rx1478_pos
  rxenumcharlistq1483_loop:
    le $I12, 0, rxenumcharlistq1483_done
    substr $S10, rx1478_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1483_done
    inc rx1478_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1483_loop
  rxenumcharlistq1483_done:
    lt rx1478_rep, 1, rx1478_fail
    add rx1478_pos, rx1478_pos, rx1478_rep
  # rx literal  "END"
    add $I11, rx1478_pos, 3
    gt $I11, rx1478_eos, rx1478_fail
    sub $I11, rx1478_pos, rx1478_off
    substr $S10, rx1478_tgt, $I11, 3
    ne $S10, "END", rx1478_fail
    add rx1478_pos, 3
  # rxanchor rwb
    le rx1478_pos, 0, rx1478_fail
    sub $I10, rx1478_pos, rx1478_off
    is_cclass $I11, .CCLASS_WORD, rx1478_tgt, $I10
    if $I11, rx1478_fail
    dec $I10
    is_cclass $I11, .CCLASS_WORD, rx1478_tgt, $I10
    unless $I11, rx1478_fail
  alt1484_0:
.annotate 'line', 765
    set_addr $I10, alt1484_1
    rx1478_cur."!mark_push"(0, rx1478_pos, $I10)
  # rx rxquantf1485 ** 0..*
    set_addr $I10, rxquantf1485_loop
    rx1478_cur."!mark_push"(0, rx1478_pos, $I10)
    goto rxquantf1485_done
  rxquantf1485_loop:
  # rx charclass .
    ge rx1478_pos, rx1478_eos, rx1478_fail
    inc rx1478_pos
    set_addr $I10, rxquantf1485_loop
    rx1478_cur."!mark_push"(rx1478_rep, rx1478_pos, $I10)
  rxquantf1485_done:
  # rx charclass nl
    ge rx1478_pos, rx1478_eos, rx1478_fail
    sub $I10, rx1478_pos, rx1478_off
    is_cclass $I11, .CCLASS_NEWLINE, rx1478_tgt, $I10
    unless $I11, rx1478_fail
    substr $S10, rx1478_tgt, $I10, 2
    iseq $I11, $S10, "\r\n"
    add rx1478_pos, $I11
    inc rx1478_pos
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx1478_pos, rx1478_off
    set rx1478_rep, 0
    sub $I12, rx1478_eos, rx1478_pos
  rxenumcharlistq1487_loop:
    le $I12, 0, rxenumcharlistq1487_done
    substr $S10, rx1478_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1487_done
    inc rx1478_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1487_loop
  rxenumcharlistq1487_done:
    add rx1478_pos, rx1478_pos, rx1478_rep
  # rx literal  "=end"
    add $I11, rx1478_pos, 4
    gt $I11, rx1478_eos, rx1478_fail
    sub $I11, rx1478_pos, rx1478_off
    substr $S10, rx1478_tgt, $I11, 4
    ne $S10, "=end", rx1478_fail
    add rx1478_pos, 4
  # rx enumcharlist_q negate=0  r 1..-1
    sub $I10, rx1478_pos, rx1478_off
    set rx1478_rep, 0
    sub $I12, rx1478_eos, rx1478_pos
  rxenumcharlistq1488_loop:
    le $I12, 0, rxenumcharlistq1488_done
    substr $S10, rx1478_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1488_done
    inc rx1478_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1488_loop
  rxenumcharlistq1488_done:
    lt rx1478_rep, 1, rx1478_fail
    add rx1478_pos, rx1478_pos, rx1478_rep
  # rx literal  "END"
    add $I11, rx1478_pos, 3
    gt $I11, rx1478_eos, rx1478_fail
    sub $I11, rx1478_pos, rx1478_off
    substr $S10, rx1478_tgt, $I11, 3
    ne $S10, "END", rx1478_fail
    add rx1478_pos, 3
  # rxanchor rwb
    le rx1478_pos, 0, rx1478_fail
    sub $I10, rx1478_pos, rx1478_off
    is_cclass $I11, .CCLASS_WORD, rx1478_tgt, $I10
    if $I11, rx1478_fail
    dec $I10
    is_cclass $I11, .CCLASS_WORD, rx1478_tgt, $I10
    unless $I11, rx1478_fail
  # rx charclass_q N r 0..-1
    sub $I10, rx1478_pos, rx1478_off
    find_cclass $I11, .CCLASS_NEWLINE, rx1478_tgt, $I10, rx1478_eos
    add rx1478_pos, rx1478_off, $I11
    goto alt1484_end
  alt1484_1:
  # rx charclass_q . r 0..-1
    sub $I10, rx1478_pos, rx1478_off
    find_not_cclass $I11, .CCLASS_ANY, rx1478_tgt, $I10, rx1478_eos
    add rx1478_pos, rx1478_off, $I11
  alt1484_end:
.annotate 'line', 764
    goto alt1482_end
  alt1482_1:
    set_addr $I10, alt1482_2
    rx1478_cur."!mark_push"(0, rx1478_pos, $I10)
.annotate 'line', 766
  # rx literal  "begin"
    add $I11, rx1478_pos, 5
    gt $I11, rx1478_eos, rx1478_fail
    sub $I11, rx1478_pos, rx1478_off
    substr $S10, rx1478_tgt, $I11, 5
    ne $S10, "begin", rx1478_fail
    add rx1478_pos, 5
  # rx enumcharlist_q negate=0  r 1..-1
    sub $I10, rx1478_pos, rx1478_off
    set rx1478_rep, 0
    sub $I12, rx1478_eos, rx1478_pos
  rxenumcharlistq1489_loop:
    le $I12, 0, rxenumcharlistq1489_done
    substr $S10, rx1478_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1489_done
    inc rx1478_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1489_loop
  rxenumcharlistq1489_done:
    lt rx1478_rep, 1, rx1478_fail
    add rx1478_pos, rx1478_pos, rx1478_rep
  # rx subrule "identifier" subtype=capture negate=
    rx1478_cur."!cursor_pos"(rx1478_pos)
    $P10 = rx1478_cur."identifier"()
    unless $P10, rx1478_fail
    rx1478_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("identifier")
    rx1478_pos = $P10."pos"()
  alt1490_0:
.annotate 'line', 767
    set_addr $I10, alt1490_1
    rx1478_cur."!mark_push"(0, rx1478_pos, $I10)
.annotate 'line', 768
  # rx rxquantf1491 ** 0..*
    set_addr $I10, rxquantf1491_loop
    rx1478_cur."!mark_push"(0, rx1478_pos, $I10)
    goto rxquantf1491_done
  rxquantf1491_loop:
  # rx charclass .
    ge rx1478_pos, rx1478_eos, rx1478_fail
    inc rx1478_pos
    set_addr $I10, rxquantf1491_loop
    rx1478_cur."!mark_push"(rx1478_rep, rx1478_pos, $I10)
  rxquantf1491_done:
  # rx charclass nl
    ge rx1478_pos, rx1478_eos, rx1478_fail
    sub $I10, rx1478_pos, rx1478_off
    is_cclass $I11, .CCLASS_NEWLINE, rx1478_tgt, $I10
    unless $I11, rx1478_fail
    substr $S10, rx1478_tgt, $I10, 2
    iseq $I11, $S10, "\r\n"
    add rx1478_pos, $I11
    inc rx1478_pos
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx1478_pos, rx1478_off
    set rx1478_rep, 0
    sub $I12, rx1478_eos, rx1478_pos
  rxenumcharlistq1493_loop:
    le $I12, 0, rxenumcharlistq1493_done
    substr $S10, rx1478_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1493_done
    inc rx1478_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1493_loop
  rxenumcharlistq1493_done:
    add rx1478_pos, rx1478_pos, rx1478_rep
  # rx literal  "=end"
    add $I11, rx1478_pos, 4
    gt $I11, rx1478_eos, rx1478_fail
    sub $I11, rx1478_pos, rx1478_off
    substr $S10, rx1478_tgt, $I11, 4
    ne $S10, "=end", rx1478_fail
    add rx1478_pos, 4
  # rx enumcharlist_q negate=0  r 1..-1
    sub $I10, rx1478_pos, rx1478_off
    set rx1478_rep, 0
    sub $I12, rx1478_eos, rx1478_pos
  rxenumcharlistq1494_loop:
    le $I12, 0, rxenumcharlistq1494_done
    substr $S10, rx1478_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1494_done
    inc rx1478_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1494_loop
  rxenumcharlistq1494_done:
    lt rx1478_rep, 1, rx1478_fail
    add rx1478_pos, rx1478_pos, rx1478_rep
  # rx subrule "!BACKREF" subtype=method negate=
    rx1478_cur."!cursor_pos"(rx1478_pos)
    $P10 = rx1478_cur."!BACKREF"("identifier")
    unless $P10, rx1478_fail
    rx1478_pos = $P10."pos"()
  # rxanchor rwb
    le rx1478_pos, 0, rx1478_fail
    sub $I10, rx1478_pos, rx1478_off
    is_cclass $I11, .CCLASS_WORD, rx1478_tgt, $I10
    if $I11, rx1478_fail
    dec $I10
    is_cclass $I11, .CCLASS_WORD, rx1478_tgt, $I10
    unless $I11, rx1478_fail
  # rx charclass_q N r 0..-1
    sub $I10, rx1478_pos, rx1478_off
    find_cclass $I11, .CCLASS_NEWLINE, rx1478_tgt, $I10, rx1478_eos
    add rx1478_pos, rx1478_off, $I11
    goto alt1490_end
  alt1490_1:
.annotate 'line', 769
  # rx subrule "panic" subtype=method negate=
    rx1478_cur."!cursor_pos"(rx1478_pos)
    $P10 = rx1478_cur."panic"("=begin without matching =end")
    unless $P10, rx1478_fail
    rx1478_pos = $P10."pos"()
  alt1490_end:
.annotate 'line', 766
    goto alt1482_end
  alt1482_2:
    set_addr $I10, alt1482_3
    rx1478_cur."!mark_push"(0, rx1478_pos, $I10)
.annotate 'line', 771
  # rx literal  "begin"
    add $I11, rx1478_pos, 5
    gt $I11, rx1478_eos, rx1478_fail
    sub $I11, rx1478_pos, rx1478_off
    substr $S10, rx1478_tgt, $I11, 5
    ne $S10, "begin", rx1478_fail
    add rx1478_pos, 5
  # rxanchor rwb
    le rx1478_pos, 0, rx1478_fail
    sub $I10, rx1478_pos, rx1478_off
    is_cclass $I11, .CCLASS_WORD, rx1478_tgt, $I10
    if $I11, rx1478_fail
    dec $I10
    is_cclass $I11, .CCLASS_WORD, rx1478_tgt, $I10
    unless $I11, rx1478_fail
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx1478_pos, rx1478_off
    set rx1478_rep, 0
    sub $I12, rx1478_eos, rx1478_pos
  rxenumcharlistq1495_loop:
    le $I12, 0, rxenumcharlistq1495_done
    substr $S10, rx1478_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1495_done
    inc rx1478_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1495_loop
  rxenumcharlistq1495_done:
    add rx1478_pos, rx1478_pos, rx1478_rep
  alt1496_0:
.annotate 'line', 772
    set_addr $I10, alt1496_1
    rx1478_cur."!mark_push"(0, rx1478_pos, $I10)
  # rxanchor eol
    sub $I10, rx1478_pos, rx1478_off
    is_cclass $I11, .CCLASS_NEWLINE, rx1478_tgt, $I10
    if $I11, rxanchor1497_done
    ne rx1478_pos, rx1478_eos, rx1478_fail
    eq rx1478_pos, 0, rxanchor1497_done
    dec $I10
    is_cclass $I11, .CCLASS_NEWLINE, rx1478_tgt, $I10
    if $I11, rx1478_fail
  rxanchor1497_done:
    goto alt1496_end
  alt1496_1:
    set_addr $I10, alt1496_2
    rx1478_cur."!mark_push"(0, rx1478_pos, $I10)
  # rx literal  "#"
    add $I11, rx1478_pos, 1
    gt $I11, rx1478_eos, rx1478_fail
    sub $I11, rx1478_pos, rx1478_off
    ord $I11, rx1478_tgt, $I11
    ne $I11, 35, rx1478_fail
    add rx1478_pos, 1
    goto alt1496_end
  alt1496_2:
  # rx subrule "panic" subtype=method negate=
    rx1478_cur."!cursor_pos"(rx1478_pos)
    $P10 = rx1478_cur."panic"("Unrecognized token after =begin")
    unless $P10, rx1478_fail
    rx1478_pos = $P10."pos"()
  alt1496_end:
  alt1498_0:
.annotate 'line', 773
    set_addr $I10, alt1498_1
    rx1478_cur."!mark_push"(0, rx1478_pos, $I10)
.annotate 'line', 774
  # rx rxquantf1499 ** 0..*
    set_addr $I10, rxquantf1499_loop
    rx1478_cur."!mark_push"(0, rx1478_pos, $I10)
    goto rxquantf1499_done
  rxquantf1499_loop:
  # rx charclass .
    ge rx1478_pos, rx1478_eos, rx1478_fail
    inc rx1478_pos
    set_addr $I10, rxquantf1499_loop
    rx1478_cur."!mark_push"(rx1478_rep, rx1478_pos, $I10)
  rxquantf1499_done:
  # rx charclass nl
    ge rx1478_pos, rx1478_eos, rx1478_fail
    sub $I10, rx1478_pos, rx1478_off
    is_cclass $I11, .CCLASS_NEWLINE, rx1478_tgt, $I10
    unless $I11, rx1478_fail
    substr $S10, rx1478_tgt, $I10, 2
    iseq $I11, $S10, "\r\n"
    add rx1478_pos, $I11
    inc rx1478_pos
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx1478_pos, rx1478_off
    set rx1478_rep, 0
    sub $I12, rx1478_eos, rx1478_pos
  rxenumcharlistq1501_loop:
    le $I12, 0, rxenumcharlistq1501_done
    substr $S10, rx1478_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1501_done
    inc rx1478_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1501_loop
  rxenumcharlistq1501_done:
    add rx1478_pos, rx1478_pos, rx1478_rep
  # rx literal  "=end"
    add $I11, rx1478_pos, 4
    gt $I11, rx1478_eos, rx1478_fail
    sub $I11, rx1478_pos, rx1478_off
    substr $S10, rx1478_tgt, $I11, 4
    ne $S10, "=end", rx1478_fail
    add rx1478_pos, 4
  # rxanchor rwb
    le rx1478_pos, 0, rx1478_fail
    sub $I10, rx1478_pos, rx1478_off
    is_cclass $I11, .CCLASS_WORD, rx1478_tgt, $I10
    if $I11, rx1478_fail
    dec $I10
    is_cclass $I11, .CCLASS_WORD, rx1478_tgt, $I10
    unless $I11, rx1478_fail
  # rx charclass_q N r 0..-1
    sub $I10, rx1478_pos, rx1478_off
    find_cclass $I11, .CCLASS_NEWLINE, rx1478_tgt, $I10, rx1478_eos
    add rx1478_pos, rx1478_off, $I11
    goto alt1498_end
  alt1498_1:
.annotate 'line', 775
  # rx subrule "panic" subtype=method negate=
    rx1478_cur."!cursor_pos"(rx1478_pos)
    $P10 = rx1478_cur."panic"("=begin without matching =end")
    unless $P10, rx1478_fail
    rx1478_pos = $P10."pos"()
  alt1498_end:
.annotate 'line', 771
    goto alt1482_end
  alt1482_3:
    set_addr $I10, alt1482_4
    rx1478_cur."!mark_push"(0, rx1478_pos, $I10)
.annotate 'line', 777
  # rx subrule "identifier" subtype=capture negate=
    rx1478_cur."!cursor_pos"(rx1478_pos)
    $P10 = rx1478_cur."identifier"()
    unless $P10, rx1478_fail
    rx1478_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("identifier")
    rx1478_pos = $P10."pos"()
.annotate 'line', 778
  # rx rxquantf1502 ** 0..*
    set_addr $I10, rxquantf1502_loop
    rx1478_cur."!mark_push"(0, rx1478_pos, $I10)
    goto rxquantf1502_done
  rxquantf1502_loop:
  # rx charclass .
    ge rx1478_pos, rx1478_eos, rx1478_fail
    inc rx1478_pos
    set_addr $I10, rxquantf1502_loop
    rx1478_cur."!mark_push"(rx1478_rep, rx1478_pos, $I10)
  rxquantf1502_done:
  # rxanchor bol
    eq rx1478_pos, 0, rxanchor1504_done
    ge rx1478_pos, rx1478_eos, rx1478_fail
    sub $I10, rx1478_pos, rx1478_off
    dec $I10
    is_cclass $I11, .CCLASS_NEWLINE, rx1478_tgt, $I10
    unless $I11, rx1478_fail
  rxanchor1504_done:
  # rx subrule "before" subtype=zerowidth negate=
    rx1478_cur."!cursor_pos"(rx1478_pos)
    .const 'Sub' $P1506 = "88_1329260321.776" 
    capture_lex $P1506
    $P10 = rx1478_cur."before"($P1506)
    unless $P10, rx1478_fail
.annotate 'line', 777
    goto alt1482_end
  alt1482_4:
  alt1512_0:
.annotate 'line', 784
    set_addr $I10, alt1512_1
    rx1478_cur."!mark_push"(0, rx1478_pos, $I10)
  # rx charclass s
    ge rx1478_pos, rx1478_eos, rx1478_fail
    sub $I10, rx1478_pos, rx1478_off
    is_cclass $I11, .CCLASS_WHITESPACE, rx1478_tgt, $I10
    unless $I11, rx1478_fail
    inc rx1478_pos
    goto alt1512_end
  alt1512_1:
  # rx subrule "panic" subtype=method negate=
    rx1478_cur."!cursor_pos"(rx1478_pos)
    $P10 = rx1478_cur."panic"("Illegal pod directive")
    unless $P10, rx1478_fail
    rx1478_pos = $P10."pos"()
  alt1512_end:
.annotate 'line', 785
  # rx charclass_q N r 0..-1
    sub $I10, rx1478_pos, rx1478_off
    find_cclass $I11, .CCLASS_NEWLINE, rx1478_tgt, $I10, rx1478_eos
    add rx1478_pos, rx1478_off, $I11
  alt1482_end:
.annotate 'line', 761
  # rx pass
    rx1478_cur."!cursor_pass"(rx1478_pos, "pod_comment")
    if_null rx1478_debug, debug_1057
    rx1478_cur."!cursor_debug"("PASS", "pod_comment", " at pos=", rx1478_pos)
  debug_1057:
    .return (rx1478_cur)
  rx1478_restart:
    if_null rx1478_debug, debug_1058
    rx1478_cur."!cursor_debug"("NEXT", "pod_comment")
  debug_1058:
  rx1478_fail:
    (rx1478_rep, rx1478_pos, $I10, $P10) = rx1478_cur."!mark_fail"(0)
    lt rx1478_pos, -1, rx1478_done
    eq rx1478_pos, -1, rx1478_fail
    jump $I10
  rx1478_done:
    rx1478_cur."!cursor_fail"()
    if_null rx1478_debug, debug_1059
    rx1478_cur."!cursor_debug"("FAIL", "pod_comment")
  debug_1059:
    .return (rx1478_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1505"  :anon :subid("88_1329260321.776") :method :outer("87_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 778
    .local string rx1507_tgt
    .local int rx1507_pos
    .local int rx1507_off
    .local int rx1507_eos
    .local int rx1507_rep
    .local pmc rx1507_cur
    .local pmc rx1507_debug
    (rx1507_cur, rx1507_pos, rx1507_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1507_cur
    .local pmc match
    .lex "$/", match
    length rx1507_eos, rx1507_tgt
    gt rx1507_pos, rx1507_eos, rx1507_done
    set rx1507_off, 0
    lt rx1507_pos, 2, rx1507_start
    sub rx1507_off, rx1507_pos, 1
    substr rx1507_tgt, rx1507_tgt, rx1507_off
  rx1507_start:
    eq $I10, 1, rx1507_restart
    if_null rx1507_debug, debug_1053
    rx1507_cur."!cursor_debug"("START", "")
  debug_1053:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1508_done
    goto rxscan1508_scan
  rxscan1508_loop:
    (rx1507_pos) = rx1507_cur."from"()
    inc rx1507_pos
    rx1507_cur."!cursor_from"(rx1507_pos)
    ge rx1507_pos, rx1507_eos, rxscan1508_done
  rxscan1508_scan:
    set_addr $I10, rxscan1508_loop
    rx1507_cur."!mark_push"(0, rx1507_pos, $I10)
  rxscan1508_done:
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx1507_pos, rx1507_off
    set rx1507_rep, 0
    sub $I12, rx1507_eos, rx1507_pos
  rxenumcharlistq1509_loop:
    le $I12, 0, rxenumcharlistq1509_done
    substr $S10, rx1507_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1509_done
    inc rx1507_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1509_loop
  rxenumcharlistq1509_done:
    add rx1507_pos, rx1507_pos, rx1507_rep
  alt1510_0:
    set_addr $I10, alt1510_1
    rx1507_cur."!mark_push"(0, rx1507_pos, $I10)
.annotate 'line', 779
  # rx literal  "="
    add $I11, rx1507_pos, 1
    gt $I11, rx1507_eos, rx1507_fail
    sub $I11, rx1507_pos, rx1507_off
    ord $I11, rx1507_tgt, $I11
    ne $I11, 61, rx1507_fail
    add rx1507_pos, 1
.annotate 'line', 781
  # rx rxquantr1511 ** 0..1
    set_addr $I10, rxquantr1511_done
    rx1507_cur."!mark_push"(0, rx1507_pos, $I10)
  rxquantr1511_loop:
.annotate 'line', 780
  # rx literal  "cut"
    add $I11, rx1507_pos, 3
    gt $I11, rx1507_eos, rx1507_fail
    sub $I11, rx1507_pos, rx1507_off
    substr $S10, rx1507_tgt, $I11, 3
    ne $S10, "cut", rx1507_fail
    add rx1507_pos, 3
  # rxanchor rwb
    le rx1507_pos, 0, rx1507_fail
    sub $I10, rx1507_pos, rx1507_off
    is_cclass $I11, .CCLASS_WORD, rx1507_tgt, $I10
    if $I11, rx1507_fail
    dec $I10
    is_cclass $I11, .CCLASS_WORD, rx1507_tgt, $I10
    unless $I11, rx1507_fail
.annotate 'line', 781
  # rx subrule "panic" subtype=method negate=
    rx1507_cur."!cursor_pos"(rx1507_pos)
    $P10 = rx1507_cur."panic"("Obsolete pod format, please use =begin/=end instead")
    unless $P10, rx1507_fail
    rx1507_pos = $P10."pos"()
    set_addr $I10, rxquantr1511_done
    (rx1507_rep) = rx1507_cur."!mark_commit"($I10)
  rxquantr1511_done:
.annotate 'line', 778
    goto alt1510_end
  alt1510_1:
.annotate 'line', 782
  # rx charclass nl
    ge rx1507_pos, rx1507_eos, rx1507_fail
    sub $I10, rx1507_pos, rx1507_off
    is_cclass $I11, .CCLASS_NEWLINE, rx1507_tgt, $I10
    unless $I11, rx1507_fail
    substr $S10, rx1507_tgt, $I10, 2
    iseq $I11, $S10, "\r\n"
    add rx1507_pos, $I11
    inc rx1507_pos
  alt1510_end:
.annotate 'line', 778
  # rx pass
    rx1507_cur."!cursor_pass"(rx1507_pos, "")
    if_null rx1507_debug, debug_1054
    rx1507_cur."!cursor_debug"("PASS", "", " at pos=", rx1507_pos)
  debug_1054:
    .return (rx1507_cur)
  rx1507_restart:
    if_null rx1507_debug, debug_1055
    rx1507_cur."!cursor_debug"("NEXT", "")
  debug_1055:
  rx1507_fail:
    (rx1507_rep, rx1507_pos, $I10, $P10) = rx1507_cur."!mark_fail"(0)
    lt rx1507_pos, -1, rx1507_done
    eq rx1507_pos, -1, rx1507_fail
    jump $I10
  rx1507_done:
    rx1507_cur."!cursor_fail"()
    if_null rx1507_debug, debug_1056
    rx1507_cur."!cursor_debug"("FAIL", "")
  debug_1056:
    .return (rx1507_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__pod_comment"  :subid("89_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 761
    new $P105, "ResizablePMCArray"
    push $P105, ""
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "comp_unit"  :subid("90_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 793
    new $P104, "Undef"
    set $P1515, $P104
    .lex "$*IN_DECL", $P1515
.annotate 'line', 795
    new $P105, "Undef"
    set $P1516, $P105
    .lex "$*HAS_YOU_ARE_HERE", $P1516
.annotate 'line', 796
    new $P106, "Undef"
    set $P1517, $P106
    .lex "$*MAIN_SUB", $P1517
.annotate 'line', 799
    new $P107, "Undef"
    set $P1518, $P107
    .lex "$*PACKAGE", $P1518
.annotate 'line', 800
    new $P108, "Undef"
    set $P1519, $P108
    .lex "$*GLOBALish", $P1519
.annotate 'line', 792
    .local string rx1520_tgt
    .local int rx1520_pos
    .local int rx1520_off
    .local int rx1520_eos
    .local int rx1520_rep
    .local pmc rx1520_cur
    .local pmc rx1520_debug
    (rx1520_cur, rx1520_pos, rx1520_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1520_cur
    .local pmc match
    .lex "$/", match
    length rx1520_eos, rx1520_tgt
    gt rx1520_pos, rx1520_eos, rx1520_done
    set rx1520_off, 0
    lt rx1520_pos, 2, rx1520_start
    sub rx1520_off, rx1520_pos, 1
    substr rx1520_tgt, rx1520_tgt, rx1520_off
  rx1520_start:
    eq $I10, 1, rx1520_restart
    if_null rx1520_debug, debug_1060
    rx1520_cur."!cursor_debug"("START", "comp_unit")
  debug_1060:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1521_done
    goto rxscan1521_scan
  rxscan1521_loop:
    (rx1520_pos) = rx1520_cur."from"()
    inc rx1520_pos
    rx1520_cur."!cursor_from"(rx1520_pos)
    ge rx1520_pos, rx1520_eos, rxscan1521_done
  rxscan1521_scan:
    set_addr $I10, rxscan1521_loop
    rx1520_cur."!mark_push"(0, rx1520_pos, $I10)
  rxscan1521_done:
.annotate 'line', 793
    rx1520_cur."!cursor_pos"(rx1520_pos)
    new $P109, "String"
    assign $P109, ""
    set $P1515, $P109
.annotate 'line', 795
    rx1520_cur."!cursor_pos"(rx1520_pos)
    new $P110, "Float"
    assign $P110, 0
    set $P1516, $P110
.annotate 'line', 796
    rx1520_cur."!cursor_pos"(rx1520_pos)
    set $P113, $P1517
    unless_null $P113, vivify_1061
    get_hll_global $P111, "GLOBAL"
    get_who $P112, $P111
    set $P113, $P112["$MAIN_SUB"]
    unless_null $P113, vivify_1062
    die "Contextual $*MAIN_SUB not found"
  vivify_1062:
  vivify_1061:
.annotate 'line', 797
  # rx subrule "newpad" subtype=method negate=
    rx1520_cur."!cursor_pos"(rx1520_pos)
    $P10 = rx1520_cur."newpad"()
    unless $P10, rx1520_fail
    rx1520_pos = $P10."pos"()
.annotate 'line', 799
    rx1520_cur."!cursor_pos"(rx1520_pos)
    set $P116, $P1518
    unless_null $P116, vivify_1063
    get_hll_global $P114, "GLOBAL"
    get_who $P115, $P114
    set $P116, $P115["$PACKAGE"]
    unless_null $P116, vivify_1064
    die "Contextual $*PACKAGE not found"
  vivify_1064:
  vivify_1063:
.annotate 'line', 800
    rx1520_cur."!cursor_pos"(rx1520_pos)
    set $P119, $P1519
    unless_null $P119, vivify_1065
    get_hll_global $P117, "GLOBAL"
    get_who $P118, $P117
    set $P119, $P118["$GLOBALish"]
    unless_null $P119, vivify_1066
    die "Contextual $*GLOBALish not found"
  vivify_1066:
  vivify_1065:
.annotate 'line', 801
  # rx subrule "GLOBALish" subtype=method negate=
    rx1520_cur."!cursor_pos"(rx1520_pos)
    $P10 = rx1520_cur."GLOBALish"()
    unless $P10, rx1520_fail
    rx1520_pos = $P10."pos"()
.annotate 'line', 803
  # rx subrule "outerctx" subtype=method negate=
    rx1520_cur."!cursor_pos"(rx1520_pos)
    $P10 = rx1520_cur."outerctx"()
    unless $P10, rx1520_fail
    rx1520_pos = $P10."pos"()
.annotate 'line', 805
  # rx subrule "statementlist" subtype=capture negate=
    rx1520_cur."!cursor_pos"(rx1520_pos)
    $P10 = rx1520_cur."statementlist"()
    unless $P10, rx1520_fail
    rx1520_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statementlist")
    rx1520_pos = $P10."pos"()
  alt1522_0:
.annotate 'line', 806
    set_addr $I10, alt1522_1
    rx1520_cur."!mark_push"(0, rx1520_pos, $I10)
  # rxanchor eos
    ne rx1520_pos, rx1520_eos, rx1520_fail
    goto alt1522_end
  alt1522_1:
  # rx subrule "panic" subtype=method negate=
    rx1520_cur."!cursor_pos"(rx1520_pos)
    $P10 = rx1520_cur."panic"("Confused")
    unless $P10, rx1520_fail
    rx1520_pos = $P10."pos"()
  alt1522_end:
.annotate 'line', 792
  # rx pass
    rx1520_cur."!cursor_pass"(rx1520_pos, "comp_unit")
    if_null rx1520_debug, debug_1067
    rx1520_cur."!cursor_debug"("PASS", "comp_unit", " at pos=", rx1520_pos)
  debug_1067:
    .return (rx1520_cur)
  rx1520_restart:
    if_null rx1520_debug, debug_1068
    rx1520_cur."!cursor_debug"("NEXT", "comp_unit")
  debug_1068:
  rx1520_fail:
    (rx1520_rep, rx1520_pos, $I10, $P10) = rx1520_cur."!mark_fail"(0)
    lt rx1520_pos, -1, rx1520_done
    eq rx1520_pos, -1, rx1520_fail
    jump $I10
  rx1520_done:
    rx1520_cur."!cursor_fail"()
    if_null rx1520_debug, debug_1069
    rx1520_cur."!cursor_debug"("FAIL", "comp_unit")
  debug_1069:
    .return (rx1520_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__comp_unit"  :subid("91_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 792
    $P120 = self."!PREFIX__!subrule"("newpad", "")
    new $P121, "ResizablePMCArray"
    push $P121, $P120
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statementlist"  :subid("92_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 809
    .local string rx1525_tgt
    .local int rx1525_pos
    .local int rx1525_off
    .local int rx1525_eos
    .local int rx1525_rep
    .local pmc rx1525_cur
    .local pmc rx1525_debug
    (rx1525_cur, rx1525_pos, rx1525_tgt, $I10) = self."!cursor_start"()
    rx1525_cur."!cursor_caparray"("statement")
    .lex unicode:"$\x{a2}", rx1525_cur
    .local pmc match
    .lex "$/", match
    length rx1525_eos, rx1525_tgt
    gt rx1525_pos, rx1525_eos, rx1525_done
    set rx1525_off, 0
    lt rx1525_pos, 2, rx1525_start
    sub rx1525_off, rx1525_pos, 1
    substr rx1525_tgt, rx1525_tgt, rx1525_off
  rx1525_start:
    eq $I10, 1, rx1525_restart
    if_null rx1525_debug, debug_1070
    rx1525_cur."!cursor_debug"("START", "statementlist")
  debug_1070:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1526_done
    goto rxscan1526_scan
  rxscan1526_loop:
    (rx1525_pos) = rx1525_cur."from"()
    inc rx1525_pos
    rx1525_cur."!cursor_from"(rx1525_pos)
    ge rx1525_pos, rx1525_eos, rxscan1526_done
  rxscan1526_scan:
    set_addr $I10, rxscan1526_loop
    rx1525_cur."!mark_push"(0, rx1525_pos, $I10)
  rxscan1526_done:
  alt1527_0:
    set_addr $I10, alt1527_1
    rx1525_cur."!mark_push"(0, rx1525_pos, $I10)
.annotate 'line', 810
  # rx subrule "ws" subtype=method negate=
    rx1525_cur."!cursor_pos"(rx1525_pos)
    $P10 = rx1525_cur."ws"()
    unless $P10, rx1525_fail
    rx1525_pos = $P10."pos"()
  # rxanchor eos
    ne rx1525_pos, rx1525_eos, rx1525_fail
  # rx subrule "ws" subtype=method negate=
    rx1525_cur."!cursor_pos"(rx1525_pos)
    $P10 = rx1525_cur."ws"()
    unless $P10, rx1525_fail
    rx1525_pos = $P10."pos"()
    goto alt1527_end
  alt1527_1:
.annotate 'line', 811
  # rx subrule "ws" subtype=method negate=
    rx1525_cur."!cursor_pos"(rx1525_pos)
    $P10 = rx1525_cur."ws"()
    unless $P10, rx1525_fail
    rx1525_pos = $P10."pos"()
  # rx rxquantr1528 ** 0..*
    set_addr $I10, rxquantr1528_done
    rx1525_cur."!mark_push"(0, rx1525_pos, $I10)
  rxquantr1528_loop:
  # rx subrule "statement" subtype=capture negate=
    rx1525_cur."!cursor_pos"(rx1525_pos)
    $P10 = rx1525_cur."statement"()
    unless $P10, rx1525_fail
    rx1525_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statement")
    rx1525_pos = $P10."pos"()
  # rx subrule "eat_terminator" subtype=method negate=
    rx1525_cur."!cursor_pos"(rx1525_pos)
    $P10 = rx1525_cur."eat_terminator"()
    unless $P10, rx1525_fail
    rx1525_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1525_cur."!cursor_pos"(rx1525_pos)
    $P10 = rx1525_cur."ws"()
    unless $P10, rx1525_fail
    rx1525_pos = $P10."pos"()
    set_addr $I10, rxquantr1528_done
    (rx1525_rep) = rx1525_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr1528_done
    rx1525_cur."!mark_push"(rx1525_rep, rx1525_pos, $I10)
    goto rxquantr1528_loop
  rxquantr1528_done:
  # rx subrule "ws" subtype=method negate=
    rx1525_cur."!cursor_pos"(rx1525_pos)
    $P10 = rx1525_cur."ws"()
    unless $P10, rx1525_fail
    rx1525_pos = $P10."pos"()
  alt1527_end:
.annotate 'line', 809
  # rx pass
    rx1525_cur."!cursor_pass"(rx1525_pos, "statementlist")
    if_null rx1525_debug, debug_1071
    rx1525_cur."!cursor_debug"("PASS", "statementlist", " at pos=", rx1525_pos)
  debug_1071:
    .return (rx1525_cur)
  rx1525_restart:
    if_null rx1525_debug, debug_1072
    rx1525_cur."!cursor_debug"("NEXT", "statementlist")
  debug_1072:
  rx1525_fail:
    (rx1525_rep, rx1525_pos, $I10, $P10) = rx1525_cur."!mark_fail"(0)
    lt rx1525_pos, -1, rx1525_done
    eq rx1525_pos, -1, rx1525_fail
    jump $I10
  rx1525_done:
    rx1525_cur."!cursor_fail"()
    if_null rx1525_debug, debug_1073
    rx1525_cur."!cursor_debug"("FAIL", "statementlist")
  debug_1073:
    .return (rx1525_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statementlist"  :subid("93_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 809
    $P109 = self."!PREFIX__!subrule"("ws", "")
    $P110 = self."!PREFIX__!subrule"("ws", "")
    new $P111, "ResizablePMCArray"
    push $P111, $P109
    push $P111, $P110
    .return ($P111)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement"  :subid("94_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 814
    .const 'Sub' $P1534 = "95_1329260321.776" 
    capture_lex $P1534
    .local string rx1531_tgt
    .local int rx1531_pos
    .local int rx1531_off
    .local int rx1531_eos
    .local int rx1531_rep
    .local pmc rx1531_cur
    .local pmc rx1531_debug
    (rx1531_cur, rx1531_pos, rx1531_tgt, $I10) = self."!cursor_start"()
    rx1531_cur."!cursor_caparray"("statement_mod_cond", "statement_mod_loop")
    .lex unicode:"$\x{a2}", rx1531_cur
    .local pmc match
    .lex "$/", match
    length rx1531_eos, rx1531_tgt
    gt rx1531_pos, rx1531_eos, rx1531_done
    set rx1531_off, 0
    lt rx1531_pos, 2, rx1531_start
    sub rx1531_off, rx1531_pos, 1
    substr rx1531_tgt, rx1531_tgt, rx1531_off
  rx1531_start:
    eq $I10, 1, rx1531_restart
    if_null rx1531_debug, debug_1074
    rx1531_cur."!cursor_debug"("START", "statement")
  debug_1074:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1532_done
    goto rxscan1532_scan
  rxscan1532_loop:
    (rx1531_pos) = rx1531_cur."from"()
    inc rx1531_pos
    rx1531_cur."!cursor_from"(rx1531_pos)
    ge rx1531_pos, rx1531_eos, rxscan1532_done
  rxscan1532_scan:
    set_addr $I10, rxscan1532_loop
    rx1531_cur."!mark_push"(0, rx1531_pos, $I10)
  rxscan1532_done:
.annotate 'line', 815
  # rx subrule "before" subtype=zerowidth negate=1
    rx1531_cur."!cursor_pos"(rx1531_pos)
    .const 'Sub' $P1534 = "95_1329260321.776" 
    capture_lex $P1534
    $P10 = rx1531_cur."before"($P1534)
    if $P10, rx1531_fail
  alt1538_0:
.annotate 'line', 816
    set_addr $I10, alt1538_1
    rx1531_cur."!mark_push"(0, rx1531_pos, $I10)
.annotate 'line', 817
  # rx subrule "statement_control" subtype=capture negate=
    rx1531_cur."!cursor_pos"(rx1531_pos)
    $P10 = rx1531_cur."statement_control"()
    unless $P10, rx1531_fail
    rx1531_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statement_control")
    rx1531_pos = $P10."pos"()
    goto alt1538_end
  alt1538_1:
.annotate 'line', 818
  # rx subrule "EXPR" subtype=capture negate=
    rx1531_cur."!cursor_pos"(rx1531_pos)
    $P10 = rx1531_cur."EXPR"()
    unless $P10, rx1531_fail
    rx1531_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("EXPR")
    rx1531_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1531_cur."!cursor_pos"(rx1531_pos)
    $P10 = rx1531_cur."ws"()
    unless $P10, rx1531_fail
    rx1531_pos = $P10."pos"()
.annotate 'line', 823
  # rx rxquantr1539 ** 0..1
    set_addr $I10, rxquantr1539_done
    rx1531_cur."!mark_push"(0, rx1531_pos, $I10)
  rxquantr1539_loop:
  alt1540_0:
.annotate 'line', 819
    set_addr $I10, alt1540_1
    rx1531_cur."!mark_push"(0, rx1531_pos, $I10)
.annotate 'line', 820
  # rx subrule "MARKED" subtype=zerowidth negate=
    rx1531_cur."!cursor_pos"(rx1531_pos)
    $P10 = rx1531_cur."MARKED"("endstmt")
    unless $P10, rx1531_fail
    goto alt1540_end
  alt1540_1:
    set_addr $I10, alt1540_2
    rx1531_cur."!mark_push"(0, rx1531_pos, $I10)
.annotate 'line', 821
  # rx subrule "statement_mod_cond" subtype=capture negate=
    rx1531_cur."!cursor_pos"(rx1531_pos)
    $P10 = rx1531_cur."statement_mod_cond"()
    unless $P10, rx1531_fail
    rx1531_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statement_mod_cond")
    rx1531_pos = $P10."pos"()
  # rx rxquantr1541 ** 0..1
    set_addr $I10, rxquantr1541_done
    rx1531_cur."!mark_push"(0, rx1531_pos, $I10)
  rxquantr1541_loop:
  # rx subrule "statement_mod_loop" subtype=capture negate=
    rx1531_cur."!cursor_pos"(rx1531_pos)
    $P10 = rx1531_cur."statement_mod_loop"()
    unless $P10, rx1531_fail
    goto rxsubrule1542_pass
  rxsubrule1542_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1531_fail
  rxsubrule1542_pass:
    set_addr $I10, rxsubrule1542_back
    rx1531_cur."!mark_push"(0, rx1531_pos, $I10, $P10)
    $P10."!cursor_names"("statement_mod_loop")
    rx1531_pos = $P10."pos"()
    set_addr $I10, rxquantr1541_done
    (rx1531_rep) = rx1531_cur."!mark_commit"($I10)
  rxquantr1541_done:
    goto alt1540_end
  alt1540_2:
.annotate 'line', 822
  # rx subrule "statement_mod_loop" subtype=capture negate=
    rx1531_cur."!cursor_pos"(rx1531_pos)
    $P10 = rx1531_cur."statement_mod_loop"()
    unless $P10, rx1531_fail
    rx1531_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statement_mod_loop")
    rx1531_pos = $P10."pos"()
  alt1540_end:
.annotate 'line', 823
    set_addr $I10, rxquantr1539_done
    (rx1531_rep) = rx1531_cur."!mark_commit"($I10)
  rxquantr1539_done:
  alt1538_end:
.annotate 'line', 814
  # rx pass
    rx1531_cur."!cursor_pass"(rx1531_pos, "statement")
    if_null rx1531_debug, debug_1079
    rx1531_cur."!cursor_debug"("PASS", "statement", " at pos=", rx1531_pos)
  debug_1079:
    .return (rx1531_cur)
  rx1531_restart:
    if_null rx1531_debug, debug_1080
    rx1531_cur."!cursor_debug"("NEXT", "statement")
  debug_1080:
  rx1531_fail:
    (rx1531_rep, rx1531_pos, $I10, $P10) = rx1531_cur."!mark_fail"(0)
    lt rx1531_pos, -1, rx1531_done
    eq rx1531_pos, -1, rx1531_fail
    jump $I10
  rx1531_done:
    rx1531_cur."!cursor_fail"()
    if_null rx1531_debug, debug_1081
    rx1531_cur."!cursor_debug"("FAIL", "statement")
  debug_1081:
    .return (rx1531_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1533"  :anon :subid("95_1329260321.776") :method :outer("94_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 815
    .local string rx1535_tgt
    .local int rx1535_pos
    .local int rx1535_off
    .local int rx1535_eos
    .local int rx1535_rep
    .local pmc rx1535_cur
    .local pmc rx1535_debug
    (rx1535_cur, rx1535_pos, rx1535_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1535_cur
    .local pmc match
    .lex "$/", match
    length rx1535_eos, rx1535_tgt
    gt rx1535_pos, rx1535_eos, rx1535_done
    set rx1535_off, 0
    lt rx1535_pos, 2, rx1535_start
    sub rx1535_off, rx1535_pos, 1
    substr rx1535_tgt, rx1535_tgt, rx1535_off
  rx1535_start:
    eq $I10, 1, rx1535_restart
    if_null rx1535_debug, debug_1075
    rx1535_cur."!cursor_debug"("START", "")
  debug_1075:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1536_done
    goto rxscan1536_scan
  rxscan1536_loop:
    (rx1535_pos) = rx1535_cur."from"()
    inc rx1535_pos
    rx1535_cur."!cursor_from"(rx1535_pos)
    ge rx1535_pos, rx1535_eos, rxscan1536_done
  rxscan1536_scan:
    set_addr $I10, rxscan1536_loop
    rx1535_cur."!mark_push"(0, rx1535_pos, $I10)
  rxscan1536_done:
  alt1537_0:
    set_addr $I10, alt1537_1
    rx1535_cur."!mark_push"(0, rx1535_pos, $I10)
  # rx enumcharlist negate=0 
    ge rx1535_pos, rx1535_eos, rx1535_fail
    sub $I10, rx1535_pos, rx1535_off
    substr $S10, rx1535_tgt, $I10, 1
    index $I11, "])}", $S10
    lt $I11, 0, rx1535_fail
    inc rx1535_pos
    goto alt1537_end
  alt1537_1:
  # rxanchor eos
    ne rx1535_pos, rx1535_eos, rx1535_fail
  alt1537_end:
  # rx pass
    rx1535_cur."!cursor_pass"(rx1535_pos, "")
    if_null rx1535_debug, debug_1076
    rx1535_cur."!cursor_debug"("PASS", "", " at pos=", rx1535_pos)
  debug_1076:
    .return (rx1535_cur)
  rx1535_restart:
    if_null rx1535_debug, debug_1077
    rx1535_cur."!cursor_debug"("NEXT", "")
  debug_1077:
  rx1535_fail:
    (rx1535_rep, rx1535_pos, $I10, $P10) = rx1535_cur."!mark_fail"(0)
    lt rx1535_pos, -1, rx1535_done
    eq rx1535_pos, -1, rx1535_fail
    jump $I10
  rx1535_done:
    rx1535_cur."!cursor_fail"()
    if_null rx1535_debug, debug_1078
    rx1535_cur."!cursor_debug"("FAIL", "")
  debug_1078:
    .return (rx1535_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement"  :subid("96_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 814
    new $P104, "ResizablePMCArray"
    push $P104, ""
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "eat_terminator"  :subid("97_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 827
    .local string rx1545_tgt
    .local int rx1545_pos
    .local int rx1545_off
    .local int rx1545_eos
    .local int rx1545_rep
    .local pmc rx1545_cur
    .local pmc rx1545_debug
    (rx1545_cur, rx1545_pos, rx1545_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1545_cur
    .local pmc match
    .lex "$/", match
    length rx1545_eos, rx1545_tgt
    gt rx1545_pos, rx1545_eos, rx1545_done
    set rx1545_off, 0
    lt rx1545_pos, 2, rx1545_start
    sub rx1545_off, rx1545_pos, 1
    substr rx1545_tgt, rx1545_tgt, rx1545_off
  rx1545_start:
    eq $I10, 1, rx1545_restart
    if_null rx1545_debug, debug_1082
    rx1545_cur."!cursor_debug"("START", "eat_terminator")
  debug_1082:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1546_done
    goto rxscan1546_scan
  rxscan1546_loop:
    (rx1545_pos) = rx1545_cur."from"()
    inc rx1545_pos
    rx1545_cur."!cursor_from"(rx1545_pos)
    ge rx1545_pos, rx1545_eos, rxscan1546_done
  rxscan1546_scan:
    set_addr $I10, rxscan1546_loop
    rx1545_cur."!mark_push"(0, rx1545_pos, $I10)
  rxscan1546_done:
  alt1547_0:
    set_addr $I10, alt1547_1
    rx1545_cur."!mark_push"(0, rx1545_pos, $I10)
.annotate 'line', 828
  # rx literal  ";"
    add $I11, rx1545_pos, 1
    gt $I11, rx1545_eos, rx1545_fail
    sub $I11, rx1545_pos, rx1545_off
    ord $I11, rx1545_tgt, $I11
    ne $I11, 59, rx1545_fail
    add rx1545_pos, 1
    goto alt1547_end
  alt1547_1:
    set_addr $I10, alt1547_2
    rx1545_cur."!mark_push"(0, rx1545_pos, $I10)
.annotate 'line', 829
  # rx subrule "MARKED" subtype=zerowidth negate=
    rx1545_cur."!cursor_pos"(rx1545_pos)
    $P10 = rx1545_cur."MARKED"("endstmt")
    unless $P10, rx1545_fail
    goto alt1547_end
  alt1547_2:
    set_addr $I10, alt1547_3
    rx1545_cur."!mark_push"(0, rx1545_pos, $I10)
.annotate 'line', 830
  # rx subrule "terminator" subtype=zerowidth negate=
    rx1545_cur."!cursor_pos"(rx1545_pos)
    $P10 = rx1545_cur."terminator"()
    unless $P10, rx1545_fail
    goto alt1547_end
  alt1547_3:
.annotate 'line', 831
  # rxanchor eos
    ne rx1545_pos, rx1545_eos, rx1545_fail
  alt1547_end:
.annotate 'line', 827
  # rx pass
    rx1545_cur."!cursor_pass"(rx1545_pos, "eat_terminator")
    if_null rx1545_debug, debug_1083
    rx1545_cur."!cursor_debug"("PASS", "eat_terminator", " at pos=", rx1545_pos)
  debug_1083:
    .return (rx1545_cur)
  rx1545_restart:
    if_null rx1545_debug, debug_1084
    rx1545_cur."!cursor_debug"("NEXT", "eat_terminator")
  debug_1084:
  rx1545_fail:
    (rx1545_rep, rx1545_pos, $I10, $P10) = rx1545_cur."!mark_fail"(0)
    lt rx1545_pos, -1, rx1545_done
    eq rx1545_pos, -1, rx1545_fail
    jump $I10
  rx1545_done:
    rx1545_cur."!cursor_fail"()
    if_null rx1545_debug, debug_1085
    rx1545_cur."!cursor_debug"("FAIL", "eat_terminator")
  debug_1085:
    .return (rx1545_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__eat_terminator"  :subid("98_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 827
    new $P104, "ResizablePMCArray"
    push $P104, ""
    push $P104, ""
    push $P104, ""
    push $P104, ";"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "xblock"  :subid("99_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 834
    .local string rx1550_tgt
    .local int rx1550_pos
    .local int rx1550_off
    .local int rx1550_eos
    .local int rx1550_rep
    .local pmc rx1550_cur
    .local pmc rx1550_debug
    (rx1550_cur, rx1550_pos, rx1550_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1550_cur
    .local pmc match
    .lex "$/", match
    length rx1550_eos, rx1550_tgt
    gt rx1550_pos, rx1550_eos, rx1550_done
    set rx1550_off, 0
    lt rx1550_pos, 2, rx1550_start
    sub rx1550_off, rx1550_pos, 1
    substr rx1550_tgt, rx1550_tgt, rx1550_off
  rx1550_start:
    eq $I10, 1, rx1550_restart
    if_null rx1550_debug, debug_1086
    rx1550_cur."!cursor_debug"("START", "xblock")
  debug_1086:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1551_done
    goto rxscan1551_scan
  rxscan1551_loop:
    (rx1550_pos) = rx1550_cur."from"()
    inc rx1550_pos
    rx1550_cur."!cursor_from"(rx1550_pos)
    ge rx1550_pos, rx1550_eos, rxscan1551_done
  rxscan1551_scan:
    set_addr $I10, rxscan1551_loop
    rx1550_cur."!mark_push"(0, rx1550_pos, $I10)
  rxscan1551_done:
.annotate 'line', 835
  # rx subrule "EXPR" subtype=capture negate=
    rx1550_cur."!cursor_pos"(rx1550_pos)
    $P10 = rx1550_cur."EXPR"()
    unless $P10, rx1550_fail
    rx1550_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("EXPR")
    rx1550_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1550_cur."!cursor_pos"(rx1550_pos)
    $P10 = rx1550_cur."ws"()
    unless $P10, rx1550_fail
    rx1550_pos = $P10."pos"()
  # rx subrule "pblock" subtype=capture negate=
    rx1550_cur."!cursor_pos"(rx1550_pos)
    $P10 = rx1550_cur."pblock"()
    unless $P10, rx1550_fail
    rx1550_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("pblock")
    rx1550_pos = $P10."pos"()
.annotate 'line', 834
  # rx pass
    rx1550_cur."!cursor_pass"(rx1550_pos, "xblock")
    if_null rx1550_debug, debug_1087
    rx1550_cur."!cursor_debug"("PASS", "xblock", " at pos=", rx1550_pos)
  debug_1087:
    .return (rx1550_cur)
  rx1550_restart:
    if_null rx1550_debug, debug_1088
    rx1550_cur."!cursor_debug"("NEXT", "xblock")
  debug_1088:
  rx1550_fail:
    (rx1550_rep, rx1550_pos, $I10, $P10) = rx1550_cur."!mark_fail"(0)
    lt rx1550_pos, -1, rx1550_done
    eq rx1550_pos, -1, rx1550_fail
    jump $I10
  rx1550_done:
    rx1550_cur."!cursor_fail"()
    if_null rx1550_debug, debug_1089
    rx1550_cur."!cursor_debug"("FAIL", "xblock")
  debug_1089:
    .return (rx1550_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__xblock"  :subid("100_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 834
    $P104 = self."!PREFIX__!subrule"("EXPR", "")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "pblock"  :subid("101_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 838
    .local string rx1554_tgt
    .local int rx1554_pos
    .local int rx1554_off
    .local int rx1554_eos
    .local int rx1554_rep
    .local pmc rx1554_cur
    .local pmc rx1554_debug
    (rx1554_cur, rx1554_pos, rx1554_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1554_cur
    .local pmc match
    .lex "$/", match
    length rx1554_eos, rx1554_tgt
    gt rx1554_pos, rx1554_eos, rx1554_done
    set rx1554_off, 0
    lt rx1554_pos, 2, rx1554_start
    sub rx1554_off, rx1554_pos, 1
    substr rx1554_tgt, rx1554_tgt, rx1554_off
  rx1554_start:
    eq $I10, 1, rx1554_restart
    if_null rx1554_debug, debug_1090
    rx1554_cur."!cursor_debug"("START", "pblock")
  debug_1090:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1555_done
    goto rxscan1555_scan
  rxscan1555_loop:
    (rx1554_pos) = rx1554_cur."from"()
    inc rx1554_pos
    rx1554_cur."!cursor_from"(rx1554_pos)
    ge rx1554_pos, rx1554_eos, rxscan1555_done
  rxscan1555_scan:
    set_addr $I10, rxscan1555_loop
    rx1554_cur."!mark_push"(0, rx1554_pos, $I10)
  rxscan1555_done:
  alt1556_0:
    set_addr $I10, alt1556_1
    rx1554_cur."!mark_push"(0, rx1554_pos, $I10)
.annotate 'line', 839
  # rx subrule "lambda" subtype=method negate=
    rx1554_cur."!cursor_pos"(rx1554_pos)
    $P10 = rx1554_cur."lambda"()
    unless $P10, rx1554_fail
    rx1554_pos = $P10."pos"()
.annotate 'line', 840
  # rx subrule "newpad" subtype=method negate=
    rx1554_cur."!cursor_pos"(rx1554_pos)
    $P10 = rx1554_cur."newpad"()
    unless $P10, rx1554_fail
    rx1554_pos = $P10."pos"()
.annotate 'line', 841
  # rx subrule "signature" subtype=capture negate=
    rx1554_cur."!cursor_pos"(rx1554_pos)
    $P10 = rx1554_cur."signature"()
    unless $P10, rx1554_fail
    rx1554_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("signature")
    rx1554_pos = $P10."pos"()
.annotate 'line', 842
  # rx subrule "blockoid" subtype=capture negate=
    rx1554_cur."!cursor_pos"(rx1554_pos)
    $P10 = rx1554_cur."blockoid"()
    unless $P10, rx1554_fail
    rx1554_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("blockoid")
    rx1554_pos = $P10."pos"()
.annotate 'line', 839
    goto alt1556_end
  alt1556_1:
    set_addr $I10, alt1556_2
    rx1554_cur."!mark_push"(0, rx1554_pos, $I10)
.annotate 'line', 843
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1554_pos, rx1554_off
    substr $S10, rx1554_tgt, $I10, 1
    index $I11, "{", $S10
    lt $I11, 0, rx1554_fail
.annotate 'line', 844
  # rx subrule "newpad" subtype=method negate=
    rx1554_cur."!cursor_pos"(rx1554_pos)
    $P10 = rx1554_cur."newpad"()
    unless $P10, rx1554_fail
    rx1554_pos = $P10."pos"()
.annotate 'line', 845
  # rx subrule "blockoid" subtype=capture negate=
    rx1554_cur."!cursor_pos"(rx1554_pos)
    $P10 = rx1554_cur."blockoid"()
    unless $P10, rx1554_fail
    rx1554_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("blockoid")
    rx1554_pos = $P10."pos"()
.annotate 'line', 843
    goto alt1556_end
  alt1556_2:
.annotate 'line', 846
  # rx subrule "panic" subtype=method negate=
    rx1554_cur."!cursor_pos"(rx1554_pos)
    $P10 = rx1554_cur."panic"("Missing block")
    unless $P10, rx1554_fail
    rx1554_pos = $P10."pos"()
  alt1556_end:
.annotate 'line', 838
  # rx pass
    rx1554_cur."!cursor_pass"(rx1554_pos, "pblock")
    if_null rx1554_debug, debug_1091
    rx1554_cur."!cursor_debug"("PASS", "pblock", " at pos=", rx1554_pos)
  debug_1091:
    .return (rx1554_cur)
  rx1554_restart:
    if_null rx1554_debug, debug_1092
    rx1554_cur."!cursor_debug"("NEXT", "pblock")
  debug_1092:
  rx1554_fail:
    (rx1554_rep, rx1554_pos, $I10, $P10) = rx1554_cur."!mark_fail"(0)
    lt rx1554_pos, -1, rx1554_done
    eq rx1554_pos, -1, rx1554_fail
    jump $I10
  rx1554_done:
    rx1554_cur."!cursor_fail"()
    if_null rx1554_debug, debug_1093
    rx1554_cur."!cursor_debug"("FAIL", "pblock")
  debug_1093:
    .return (rx1554_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__pblock"  :subid("102_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 838
    $P104 = self."!PREFIX__!subrule"("panic", "")
    $P105 = self."!PREFIX__!subrule"("lambda", "")
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, "{"
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "lambda"  :subid("103_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 849
    .local string rx1559_tgt
    .local int rx1559_pos
    .local int rx1559_off
    .local int rx1559_eos
    .local int rx1559_rep
    .local pmc rx1559_cur
    .local pmc rx1559_debug
    (rx1559_cur, rx1559_pos, rx1559_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1559_cur
    .local pmc match
    .lex "$/", match
    length rx1559_eos, rx1559_tgt
    gt rx1559_pos, rx1559_eos, rx1559_done
    set rx1559_off, 0
    lt rx1559_pos, 2, rx1559_start
    sub rx1559_off, rx1559_pos, 1
    substr rx1559_tgt, rx1559_tgt, rx1559_off
  rx1559_start:
    eq $I10, 1, rx1559_restart
    if_null rx1559_debug, debug_1094
    rx1559_cur."!cursor_debug"("START", "lambda")
  debug_1094:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1560_done
    goto rxscan1560_scan
  rxscan1560_loop:
    (rx1559_pos) = rx1559_cur."from"()
    inc rx1559_pos
    rx1559_cur."!cursor_from"(rx1559_pos)
    ge rx1559_pos, rx1559_eos, rxscan1560_done
  rxscan1560_scan:
    set_addr $I10, rxscan1560_loop
    rx1559_cur."!mark_push"(0, rx1559_pos, $I10)
  rxscan1560_done:
  alt1561_0:
    set_addr $I10, alt1561_1
    rx1559_cur."!mark_push"(0, rx1559_pos, $I10)
  # rx literal  "->"
    add $I11, rx1559_pos, 2
    gt $I11, rx1559_eos, rx1559_fail
    sub $I11, rx1559_pos, rx1559_off
    substr $S10, rx1559_tgt, $I11, 2
    ne $S10, "->", rx1559_fail
    add rx1559_pos, 2
    goto alt1561_end
  alt1561_1:
  # rx literal  "<->"
    add $I11, rx1559_pos, 3
    gt $I11, rx1559_eos, rx1559_fail
    sub $I11, rx1559_pos, rx1559_off
    substr $S10, rx1559_tgt, $I11, 3
    ne $S10, "<->", rx1559_fail
    add rx1559_pos, 3
  alt1561_end:
  # rx pass
    rx1559_cur."!cursor_pass"(rx1559_pos, "lambda")
    if_null rx1559_debug, debug_1095
    rx1559_cur."!cursor_debug"("PASS", "lambda", " at pos=", rx1559_pos)
  debug_1095:
    .return (rx1559_cur)
  rx1559_restart:
    if_null rx1559_debug, debug_1096
    rx1559_cur."!cursor_debug"("NEXT", "lambda")
  debug_1096:
  rx1559_fail:
    (rx1559_rep, rx1559_pos, $I10, $P10) = rx1559_cur."!mark_fail"(0)
    lt rx1559_pos, -1, rx1559_done
    eq rx1559_pos, -1, rx1559_fail
    jump $I10
  rx1559_done:
    rx1559_cur."!cursor_fail"()
    if_null rx1559_debug, debug_1097
    rx1559_cur."!cursor_debug"("FAIL", "lambda")
  debug_1097:
    .return (rx1559_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__lambda"  :subid("104_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 849
    new $P104, "ResizablePMCArray"
    push $P104, "<->"
    push $P104, "->"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "block"  :subid("105_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 851
    .local string rx1564_tgt
    .local int rx1564_pos
    .local int rx1564_off
    .local int rx1564_eos
    .local int rx1564_rep
    .local pmc rx1564_cur
    .local pmc rx1564_debug
    (rx1564_cur, rx1564_pos, rx1564_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1564_cur
    .local pmc match
    .lex "$/", match
    length rx1564_eos, rx1564_tgt
    gt rx1564_pos, rx1564_eos, rx1564_done
    set rx1564_off, 0
    lt rx1564_pos, 2, rx1564_start
    sub rx1564_off, rx1564_pos, 1
    substr rx1564_tgt, rx1564_tgt, rx1564_off
  rx1564_start:
    eq $I10, 1, rx1564_restart
    if_null rx1564_debug, debug_1098
    rx1564_cur."!cursor_debug"("START", "block")
  debug_1098:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1565_done
    goto rxscan1565_scan
  rxscan1565_loop:
    (rx1564_pos) = rx1564_cur."from"()
    inc rx1564_pos
    rx1564_cur."!cursor_from"(rx1564_pos)
    ge rx1564_pos, rx1564_eos, rxscan1565_done
  rxscan1565_scan:
    set_addr $I10, rxscan1565_loop
    rx1564_cur."!mark_push"(0, rx1564_pos, $I10)
  rxscan1565_done:
  alt1566_0:
.annotate 'line', 852
    set_addr $I10, alt1566_1
    rx1564_cur."!mark_push"(0, rx1564_pos, $I10)
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1564_pos, rx1564_off
    substr $S10, rx1564_tgt, $I10, 1
    index $I11, "{", $S10
    lt $I11, 0, rx1564_fail
    goto alt1566_end
  alt1566_1:
  # rx subrule "panic" subtype=method negate=
    rx1564_cur."!cursor_pos"(rx1564_pos)
    $P10 = rx1564_cur."panic"("Missing block")
    unless $P10, rx1564_fail
    rx1564_pos = $P10."pos"()
  alt1566_end:
.annotate 'line', 853
  # rx subrule "newpad" subtype=method negate=
    rx1564_cur."!cursor_pos"(rx1564_pos)
    $P10 = rx1564_cur."newpad"()
    unless $P10, rx1564_fail
    rx1564_pos = $P10."pos"()
.annotate 'line', 854
  # rx subrule "blockoid" subtype=capture negate=
    rx1564_cur."!cursor_pos"(rx1564_pos)
    $P10 = rx1564_cur."blockoid"()
    unless $P10, rx1564_fail
    rx1564_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("blockoid")
    rx1564_pos = $P10."pos"()
.annotate 'line', 851
  # rx pass
    rx1564_cur."!cursor_pass"(rx1564_pos, "block")
    if_null rx1564_debug, debug_1099
    rx1564_cur."!cursor_debug"("PASS", "block", " at pos=", rx1564_pos)
  debug_1099:
    .return (rx1564_cur)
  rx1564_restart:
    if_null rx1564_debug, debug_1100
    rx1564_cur."!cursor_debug"("NEXT", "block")
  debug_1100:
  rx1564_fail:
    (rx1564_rep, rx1564_pos, $I10, $P10) = rx1564_cur."!mark_fail"(0)
    lt rx1564_pos, -1, rx1564_done
    eq rx1564_pos, -1, rx1564_fail
    jump $I10
  rx1564_done:
    rx1564_cur."!cursor_fail"()
    if_null rx1564_debug, debug_1101
    rx1564_cur."!cursor_debug"("FAIL", "block")
  debug_1101:
    .return (rx1564_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__block"  :subid("106_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 851
    $P104 = self."!PREFIX__!subrule"("panic", "")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    push $P105, "{"
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "blockoid"  :subid("107_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 857
    .local string rx1569_tgt
    .local int rx1569_pos
    .local int rx1569_off
    .local int rx1569_eos
    .local int rx1569_rep
    .local pmc rx1569_cur
    .local pmc rx1569_debug
    (rx1569_cur, rx1569_pos, rx1569_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1569_cur
    .local pmc match
    .lex "$/", match
    length rx1569_eos, rx1569_tgt
    gt rx1569_pos, rx1569_eos, rx1569_done
    set rx1569_off, 0
    lt rx1569_pos, 2, rx1569_start
    sub rx1569_off, rx1569_pos, 1
    substr rx1569_tgt, rx1569_tgt, rx1569_off
  rx1569_start:
    eq $I10, 1, rx1569_restart
    if_null rx1569_debug, debug_1102
    rx1569_cur."!cursor_debug"("START", "blockoid")
  debug_1102:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1570_done
    goto rxscan1570_scan
  rxscan1570_loop:
    (rx1569_pos) = rx1569_cur."from"()
    inc rx1569_pos
    rx1569_cur."!cursor_from"(rx1569_pos)
    ge rx1569_pos, rx1569_eos, rxscan1570_done
  rxscan1570_scan:
    set_addr $I10, rxscan1570_loop
    rx1569_cur."!mark_push"(0, rx1569_pos, $I10)
  rxscan1570_done:
.annotate 'line', 858
  # rx subrule "finishpad" subtype=method negate=
    rx1569_cur."!cursor_pos"(rx1569_pos)
    $P10 = rx1569_cur."finishpad"()
    unless $P10, rx1569_fail
    rx1569_pos = $P10."pos"()
  alt1571_0:
.annotate 'line', 859
    set_addr $I10, alt1571_1
    rx1569_cur."!mark_push"(0, rx1569_pos, $I10)
.annotate 'line', 860
  # rx literal  "{YOU_ARE_HERE}"
    add $I11, rx1569_pos, 14
    gt $I11, rx1569_eos, rx1569_fail
    sub $I11, rx1569_pos, rx1569_off
    substr $S10, rx1569_tgt, $I11, 14
    ne $S10, "{YOU_ARE_HERE}", rx1569_fail
    add rx1569_pos, 14
  # rx subrule "you_are_here" subtype=capture negate=
    rx1569_cur."!cursor_pos"(rx1569_pos)
    $P10 = rx1569_cur."you_are_here"()
    unless $P10, rx1569_fail
    rx1569_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("you_are_here")
    rx1569_pos = $P10."pos"()
    goto alt1571_end
  alt1571_1:
.annotate 'line', 861
  # rx literal  "{"
    add $I11, rx1569_pos, 1
    gt $I11, rx1569_eos, rx1569_fail
    sub $I11, rx1569_pos, rx1569_off
    ord $I11, rx1569_tgt, $I11
    ne $I11, 123, rx1569_fail
    add rx1569_pos, 1
  # rx subrule "statementlist" subtype=capture negate=
    rx1569_cur."!cursor_pos"(rx1569_pos)
    $P10 = rx1569_cur."statementlist"()
    unless $P10, rx1569_fail
    rx1569_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statementlist")
    rx1569_pos = $P10."pos"()
  alt1572_0:
    set_addr $I10, alt1572_1
    rx1569_cur."!mark_push"(0, rx1569_pos, $I10)
  # rx literal  "}"
    add $I11, rx1569_pos, 1
    gt $I11, rx1569_eos, rx1569_fail
    sub $I11, rx1569_pos, rx1569_off
    ord $I11, rx1569_tgt, $I11
    ne $I11, 125, rx1569_fail
    add rx1569_pos, 1
    goto alt1572_end
  alt1572_1:
  # rx subrule "FAILGOAL" subtype=method negate=
    rx1569_cur."!cursor_pos"(rx1569_pos)
    $P10 = rx1569_cur."FAILGOAL"("'}'")
    unless $P10, rx1569_fail
    goto rxsubrule1573_pass
  rxsubrule1573_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1569_fail
  rxsubrule1573_pass:
    set_addr $I10, rxsubrule1573_back
    rx1569_cur."!mark_push"(0, rx1569_pos, $I10, $P10)
    rx1569_pos = $P10."pos"()
  alt1572_end:
  alt1571_end:
.annotate 'line', 863
  # rx subrule "ENDSTMT" subtype=zerowidth negate=
    rx1569_cur."!cursor_pos"(rx1569_pos)
    $P10 = rx1569_cur."ENDSTMT"()
    unless $P10, rx1569_fail
.annotate 'line', 857
  # rx pass
    rx1569_cur."!cursor_pass"(rx1569_pos, "blockoid")
    if_null rx1569_debug, debug_1103
    rx1569_cur."!cursor_debug"("PASS", "blockoid", " at pos=", rx1569_pos)
  debug_1103:
    .return (rx1569_cur)
  rx1569_restart:
    if_null rx1569_debug, debug_1104
    rx1569_cur."!cursor_debug"("NEXT", "blockoid")
  debug_1104:
  rx1569_fail:
    (rx1569_rep, rx1569_pos, $I10, $P10) = rx1569_cur."!mark_fail"(0)
    lt rx1569_pos, -1, rx1569_done
    eq rx1569_pos, -1, rx1569_fail
    jump $I10
  rx1569_done:
    rx1569_cur."!cursor_fail"()
    if_null rx1569_debug, debug_1105
    rx1569_cur."!cursor_debug"("FAIL", "blockoid")
  debug_1105:
    .return (rx1569_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__blockoid"  :subid("108_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 857
    $P105 = self."!PREFIX__!subrule"("finishpad", "")
    new $P106, "ResizablePMCArray"
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "newpad"  :subid("109_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 866
    .local string rx1576_tgt
    .local int rx1576_pos
    .local int rx1576_off
    .local int rx1576_eos
    .local int rx1576_rep
    .local pmc rx1576_cur
    .local pmc rx1576_debug
    (rx1576_cur, rx1576_pos, rx1576_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1576_cur
    .local pmc match
    .lex "$/", match
    length rx1576_eos, rx1576_tgt
    gt rx1576_pos, rx1576_eos, rx1576_done
    set rx1576_off, 0
    lt rx1576_pos, 2, rx1576_start
    sub rx1576_off, rx1576_pos, 1
    substr rx1576_tgt, rx1576_tgt, rx1576_off
  rx1576_start:
    eq $I10, 1, rx1576_restart
    if_null rx1576_debug, debug_1106
    rx1576_cur."!cursor_debug"("START", "newpad")
  debug_1106:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1577_done
    goto rxscan1577_scan
  rxscan1577_loop:
    (rx1576_pos) = rx1576_cur."from"()
    inc rx1576_pos
    rx1576_cur."!cursor_from"(rx1576_pos)
    ge rx1576_pos, rx1576_eos, rxscan1577_done
  rxscan1577_scan:
    set_addr $I10, rxscan1577_loop
    rx1576_cur."!mark_push"(0, rx1576_pos, $I10)
  rxscan1577_done:
  # rx pass
    rx1576_cur."!cursor_pass"(rx1576_pos, "newpad")
    if_null rx1576_debug, debug_1107
    rx1576_cur."!cursor_debug"("PASS", "newpad", " at pos=", rx1576_pos)
  debug_1107:
    .return (rx1576_cur)
  rx1576_restart:
    if_null rx1576_debug, debug_1108
    rx1576_cur."!cursor_debug"("NEXT", "newpad")
  debug_1108:
  rx1576_fail:
    (rx1576_rep, rx1576_pos, $I10, $P10) = rx1576_cur."!mark_fail"(0)
    lt rx1576_pos, -1, rx1576_done
    eq rx1576_pos, -1, rx1576_fail
    jump $I10
  rx1576_done:
    rx1576_cur."!cursor_fail"()
    if_null rx1576_debug, debug_1109
    rx1576_cur."!cursor_debug"("FAIL", "newpad")
  debug_1109:
    .return (rx1576_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__newpad"  :subid("110_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 866
    new $P104, "ResizablePMCArray"
    push $P104, ""
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "outerctx"  :subid("111_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 867
    .local string rx1580_tgt
    .local int rx1580_pos
    .local int rx1580_off
    .local int rx1580_eos
    .local int rx1580_rep
    .local pmc rx1580_cur
    .local pmc rx1580_debug
    (rx1580_cur, rx1580_pos, rx1580_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1580_cur
    .local pmc match
    .lex "$/", match
    length rx1580_eos, rx1580_tgt
    gt rx1580_pos, rx1580_eos, rx1580_done
    set rx1580_off, 0
    lt rx1580_pos, 2, rx1580_start
    sub rx1580_off, rx1580_pos, 1
    substr rx1580_tgt, rx1580_tgt, rx1580_off
  rx1580_start:
    eq $I10, 1, rx1580_restart
    if_null rx1580_debug, debug_1110
    rx1580_cur."!cursor_debug"("START", "outerctx")
  debug_1110:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1581_done
    goto rxscan1581_scan
  rxscan1581_loop:
    (rx1580_pos) = rx1580_cur."from"()
    inc rx1580_pos
    rx1580_cur."!cursor_from"(rx1580_pos)
    ge rx1580_pos, rx1580_eos, rxscan1581_done
  rxscan1581_scan:
    set_addr $I10, rxscan1581_loop
    rx1580_cur."!mark_push"(0, rx1580_pos, $I10)
  rxscan1581_done:
  # rx pass
    rx1580_cur."!cursor_pass"(rx1580_pos, "outerctx")
    if_null rx1580_debug, debug_1111
    rx1580_cur."!cursor_debug"("PASS", "outerctx", " at pos=", rx1580_pos)
  debug_1111:
    .return (rx1580_cur)
  rx1580_restart:
    if_null rx1580_debug, debug_1112
    rx1580_cur."!cursor_debug"("NEXT", "outerctx")
  debug_1112:
  rx1580_fail:
    (rx1580_rep, rx1580_pos, $I10, $P10) = rx1580_cur."!mark_fail"(0)
    lt rx1580_pos, -1, rx1580_done
    eq rx1580_pos, -1, rx1580_fail
    jump $I10
  rx1580_done:
    rx1580_cur."!cursor_fail"()
    if_null rx1580_debug, debug_1113
    rx1580_cur."!cursor_debug"("FAIL", "outerctx")
  debug_1113:
    .return (rx1580_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__outerctx"  :subid("112_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 867
    new $P104, "ResizablePMCArray"
    push $P104, ""
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "GLOBALish"  :subid("113_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 868
    .local string rx1584_tgt
    .local int rx1584_pos
    .local int rx1584_off
    .local int rx1584_eos
    .local int rx1584_rep
    .local pmc rx1584_cur
    .local pmc rx1584_debug
    (rx1584_cur, rx1584_pos, rx1584_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1584_cur
    .local pmc match
    .lex "$/", match
    length rx1584_eos, rx1584_tgt
    gt rx1584_pos, rx1584_eos, rx1584_done
    set rx1584_off, 0
    lt rx1584_pos, 2, rx1584_start
    sub rx1584_off, rx1584_pos, 1
    substr rx1584_tgt, rx1584_tgt, rx1584_off
  rx1584_start:
    eq $I10, 1, rx1584_restart
    if_null rx1584_debug, debug_1114
    rx1584_cur."!cursor_debug"("START", "GLOBALish")
  debug_1114:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1585_done
    goto rxscan1585_scan
  rxscan1585_loop:
    (rx1584_pos) = rx1584_cur."from"()
    inc rx1584_pos
    rx1584_cur."!cursor_from"(rx1584_pos)
    ge rx1584_pos, rx1584_eos, rxscan1585_done
  rxscan1585_scan:
    set_addr $I10, rxscan1585_loop
    rx1584_cur."!mark_push"(0, rx1584_pos, $I10)
  rxscan1585_done:
  # rx pass
    rx1584_cur."!cursor_pass"(rx1584_pos, "GLOBALish")
    if_null rx1584_debug, debug_1115
    rx1584_cur."!cursor_debug"("PASS", "GLOBALish", " at pos=", rx1584_pos)
  debug_1115:
    .return (rx1584_cur)
  rx1584_restart:
    if_null rx1584_debug, debug_1116
    rx1584_cur."!cursor_debug"("NEXT", "GLOBALish")
  debug_1116:
  rx1584_fail:
    (rx1584_rep, rx1584_pos, $I10, $P10) = rx1584_cur."!mark_fail"(0)
    lt rx1584_pos, -1, rx1584_done
    eq rx1584_pos, -1, rx1584_fail
    jump $I10
  rx1584_done:
    rx1584_cur."!cursor_fail"()
    if_null rx1584_debug, debug_1117
    rx1584_cur."!cursor_debug"("FAIL", "GLOBALish")
  debug_1117:
    .return (rx1584_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__GLOBALish"  :subid("114_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 868
    new $P104, "ResizablePMCArray"
    push $P104, ""
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "finishpad"  :subid("115_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 869
    .local string rx1588_tgt
    .local int rx1588_pos
    .local int rx1588_off
    .local int rx1588_eos
    .local int rx1588_rep
    .local pmc rx1588_cur
    .local pmc rx1588_debug
    (rx1588_cur, rx1588_pos, rx1588_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1588_cur
    .local pmc match
    .lex "$/", match
    length rx1588_eos, rx1588_tgt
    gt rx1588_pos, rx1588_eos, rx1588_done
    set rx1588_off, 0
    lt rx1588_pos, 2, rx1588_start
    sub rx1588_off, rx1588_pos, 1
    substr rx1588_tgt, rx1588_tgt, rx1588_off
  rx1588_start:
    eq $I10, 1, rx1588_restart
    if_null rx1588_debug, debug_1118
    rx1588_cur."!cursor_debug"("START", "finishpad")
  debug_1118:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1589_done
    goto rxscan1589_scan
  rxscan1589_loop:
    (rx1588_pos) = rx1588_cur."from"()
    inc rx1588_pos
    rx1588_cur."!cursor_from"(rx1588_pos)
    ge rx1588_pos, rx1588_eos, rxscan1589_done
  rxscan1589_scan:
    set_addr $I10, rxscan1589_loop
    rx1588_cur."!mark_push"(0, rx1588_pos, $I10)
  rxscan1589_done:
  # rx pass
    rx1588_cur."!cursor_pass"(rx1588_pos, "finishpad")
    if_null rx1588_debug, debug_1119
    rx1588_cur."!cursor_debug"("PASS", "finishpad", " at pos=", rx1588_pos)
  debug_1119:
    .return (rx1588_cur)
  rx1588_restart:
    if_null rx1588_debug, debug_1120
    rx1588_cur."!cursor_debug"("NEXT", "finishpad")
  debug_1120:
  rx1588_fail:
    (rx1588_rep, rx1588_pos, $I10, $P10) = rx1588_cur."!mark_fail"(0)
    lt rx1588_pos, -1, rx1588_done
    eq rx1588_pos, -1, rx1588_fail
    jump $I10
  rx1588_done:
    rx1588_cur."!cursor_fail"()
    if_null rx1588_debug, debug_1121
    rx1588_cur."!cursor_debug"("FAIL", "finishpad")
  debug_1121:
    .return (rx1588_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__finishpad"  :subid("116_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 869
    new $P104, "ResizablePMCArray"
    push $P104, ""
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "you_are_here"  :subid("117_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 870
    .local string rx1592_tgt
    .local int rx1592_pos
    .local int rx1592_off
    .local int rx1592_eos
    .local int rx1592_rep
    .local pmc rx1592_cur
    .local pmc rx1592_debug
    (rx1592_cur, rx1592_pos, rx1592_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1592_cur
    .local pmc match
    .lex "$/", match
    length rx1592_eos, rx1592_tgt
    gt rx1592_pos, rx1592_eos, rx1592_done
    set rx1592_off, 0
    lt rx1592_pos, 2, rx1592_start
    sub rx1592_off, rx1592_pos, 1
    substr rx1592_tgt, rx1592_tgt, rx1592_off
  rx1592_start:
    eq $I10, 1, rx1592_restart
    if_null rx1592_debug, debug_1122
    rx1592_cur."!cursor_debug"("START", "you_are_here")
  debug_1122:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1593_done
    goto rxscan1593_scan
  rxscan1593_loop:
    (rx1592_pos) = rx1592_cur."from"()
    inc rx1592_pos
    rx1592_cur."!cursor_from"(rx1592_pos)
    ge rx1592_pos, rx1592_eos, rxscan1593_done
  rxscan1593_scan:
    set_addr $I10, rxscan1593_loop
    rx1592_cur."!mark_push"(0, rx1592_pos, $I10)
  rxscan1593_done:
  # rx pass
    rx1592_cur."!cursor_pass"(rx1592_pos, "you_are_here")
    if_null rx1592_debug, debug_1123
    rx1592_cur."!cursor_debug"("PASS", "you_are_here", " at pos=", rx1592_pos)
  debug_1123:
    .return (rx1592_cur)
  rx1592_restart:
    if_null rx1592_debug, debug_1124
    rx1592_cur."!cursor_debug"("NEXT", "you_are_here")
  debug_1124:
  rx1592_fail:
    (rx1592_rep, rx1592_pos, $I10, $P10) = rx1592_cur."!mark_fail"(0)
    lt rx1592_pos, -1, rx1592_done
    eq rx1592_pos, -1, rx1592_fail
    jump $I10
  rx1592_done:
    rx1592_cur."!cursor_fail"()
    if_null rx1592_debug, debug_1125
    rx1592_cur."!cursor_debug"("FAIL", "you_are_here")
  debug_1125:
    .return (rx1592_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__you_are_here"  :subid("118_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 870
    new $P104, "ResizablePMCArray"
    push $P104, ""
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "terminator"  :subid("119_1329260321.776")
    .param pmc param_1596
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 872
    .lex "self", param_1596
    $P104 = param_1596."!protoregex"("terminator")
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__terminator"  :subid("120_1329260321.776")
    .param pmc param_1598
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 872
    .lex "self", param_1598
    $P105 = param_1598."!PREFIX__!protoregex"("terminator")
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "terminator:sym<;>"  :subid("121_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 874
    .local string rx1600_tgt
    .local int rx1600_pos
    .local int rx1600_off
    .local int rx1600_eos
    .local int rx1600_rep
    .local pmc rx1600_cur
    .local pmc rx1600_debug
    (rx1600_cur, rx1600_pos, rx1600_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1600_cur
    .local pmc match
    .lex "$/", match
    length rx1600_eos, rx1600_tgt
    gt rx1600_pos, rx1600_eos, rx1600_done
    set rx1600_off, 0
    lt rx1600_pos, 2, rx1600_start
    sub rx1600_off, rx1600_pos, 1
    substr rx1600_tgt, rx1600_tgt, rx1600_off
  rx1600_start:
    eq $I10, 1, rx1600_restart
    if_null rx1600_debug, debug_1126
    rx1600_cur."!cursor_debug"("START", "terminator:sym<;>")
  debug_1126:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1601_done
    goto rxscan1601_scan
  rxscan1601_loop:
    (rx1600_pos) = rx1600_cur."from"()
    inc rx1600_pos
    rx1600_cur."!cursor_from"(rx1600_pos)
    ge rx1600_pos, rx1600_eos, rxscan1601_done
  rxscan1601_scan:
    set_addr $I10, rxscan1601_loop
    rx1600_cur."!mark_push"(0, rx1600_pos, $I10)
  rxscan1601_done:
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1600_pos, rx1600_off
    substr $S10, rx1600_tgt, $I10, 1
    index $I11, ";", $S10
    lt $I11, 0, rx1600_fail
  # rx pass
    rx1600_cur."!cursor_pass"(rx1600_pos, "terminator:sym<;>")
    if_null rx1600_debug, debug_1127
    rx1600_cur."!cursor_debug"("PASS", "terminator:sym<;>", " at pos=", rx1600_pos)
  debug_1127:
    .return (rx1600_cur)
  rx1600_restart:
    if_null rx1600_debug, debug_1128
    rx1600_cur."!cursor_debug"("NEXT", "terminator:sym<;>")
  debug_1128:
  rx1600_fail:
    (rx1600_rep, rx1600_pos, $I10, $P10) = rx1600_cur."!mark_fail"(0)
    lt rx1600_pos, -1, rx1600_done
    eq rx1600_pos, -1, rx1600_fail
    jump $I10
  rx1600_done:
    rx1600_cur."!cursor_fail"()
    if_null rx1600_debug, debug_1129
    rx1600_cur."!cursor_debug"("FAIL", "terminator:sym<;>")
  debug_1129:
    .return (rx1600_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__terminator:sym<;>"  :subid("122_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 874
    new $P104, "ResizablePMCArray"
    push $P104, ";"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "terminator:sym<}>"  :subid("123_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 875
    .local string rx1604_tgt
    .local int rx1604_pos
    .local int rx1604_off
    .local int rx1604_eos
    .local int rx1604_rep
    .local pmc rx1604_cur
    .local pmc rx1604_debug
    (rx1604_cur, rx1604_pos, rx1604_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1604_cur
    .local pmc match
    .lex "$/", match
    length rx1604_eos, rx1604_tgt
    gt rx1604_pos, rx1604_eos, rx1604_done
    set rx1604_off, 0
    lt rx1604_pos, 2, rx1604_start
    sub rx1604_off, rx1604_pos, 1
    substr rx1604_tgt, rx1604_tgt, rx1604_off
  rx1604_start:
    eq $I10, 1, rx1604_restart
    if_null rx1604_debug, debug_1130
    rx1604_cur."!cursor_debug"("START", "terminator:sym<}>")
  debug_1130:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1605_done
    goto rxscan1605_scan
  rxscan1605_loop:
    (rx1604_pos) = rx1604_cur."from"()
    inc rx1604_pos
    rx1604_cur."!cursor_from"(rx1604_pos)
    ge rx1604_pos, rx1604_eos, rxscan1605_done
  rxscan1605_scan:
    set_addr $I10, rxscan1605_loop
    rx1604_cur."!mark_push"(0, rx1604_pos, $I10)
  rxscan1605_done:
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1604_pos, rx1604_off
    substr $S10, rx1604_tgt, $I10, 1
    index $I11, "}", $S10
    lt $I11, 0, rx1604_fail
  # rx pass
    rx1604_cur."!cursor_pass"(rx1604_pos, "terminator:sym<}>")
    if_null rx1604_debug, debug_1131
    rx1604_cur."!cursor_debug"("PASS", "terminator:sym<}>", " at pos=", rx1604_pos)
  debug_1131:
    .return (rx1604_cur)
  rx1604_restart:
    if_null rx1604_debug, debug_1132
    rx1604_cur."!cursor_debug"("NEXT", "terminator:sym<}>")
  debug_1132:
  rx1604_fail:
    (rx1604_rep, rx1604_pos, $I10, $P10) = rx1604_cur."!mark_fail"(0)
    lt rx1604_pos, -1, rx1604_done
    eq rx1604_pos, -1, rx1604_fail
    jump $I10
  rx1604_done:
    rx1604_cur."!cursor_fail"()
    if_null rx1604_debug, debug_1133
    rx1604_cur."!cursor_debug"("FAIL", "terminator:sym<}>")
  debug_1133:
    .return (rx1604_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__terminator:sym<}>"  :subid("124_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 875
    new $P104, "ResizablePMCArray"
    push $P104, "}"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control"  :subid("125_1329260321.776")
    .param pmc param_1608
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 879
    .lex "self", param_1608
    $P104 = param_1608."!protoregex"("statement_control")
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control"  :subid("126_1329260321.776")
    .param pmc param_1610
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 879
    .lex "self", param_1610
    $P105 = param_1610."!PREFIX__!protoregex"("statement_control")
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<use>"  :subid("127_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 881
    .local string rx1612_tgt
    .local int rx1612_pos
    .local int rx1612_off
    .local int rx1612_eos
    .local int rx1612_rep
    .local pmc rx1612_cur
    .local pmc rx1612_debug
    (rx1612_cur, rx1612_pos, rx1612_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1612_cur
    .local pmc match
    .lex "$/", match
    length rx1612_eos, rx1612_tgt
    gt rx1612_pos, rx1612_eos, rx1612_done
    set rx1612_off, 0
    lt rx1612_pos, 2, rx1612_start
    sub rx1612_off, rx1612_pos, 1
    substr rx1612_tgt, rx1612_tgt, rx1612_off
  rx1612_start:
    eq $I10, 1, rx1612_restart
    if_null rx1612_debug, debug_1134
    rx1612_cur."!cursor_debug"("START", "statement_control:sym<use>")
  debug_1134:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1613_done
    goto rxscan1613_scan
  rxscan1613_loop:
    (rx1612_pos) = rx1612_cur."from"()
    inc rx1612_pos
    rx1612_cur."!cursor_from"(rx1612_pos)
    ge rx1612_pos, rx1612_eos, rxscan1613_done
  rxscan1613_scan:
    set_addr $I10, rxscan1613_loop
    rx1612_cur."!mark_push"(0, rx1612_pos, $I10)
  rxscan1613_done:
.annotate 'line', 882
  # rx subcapture "sym"
    set_addr $I10, rxcap_1614_fail
    rx1612_cur."!mark_push"(0, rx1612_pos, $I10)
  # rx literal  "use"
    add $I11, rx1612_pos, 3
    gt $I11, rx1612_eos, rx1612_fail
    sub $I11, rx1612_pos, rx1612_off
    substr $S10, rx1612_tgt, $I11, 3
    ne $S10, "use", rx1612_fail
    add rx1612_pos, 3
    set_addr $I10, rxcap_1614_fail
    ($I12, $I11) = rx1612_cur."!mark_peek"($I10)
    rx1612_cur."!cursor_pos"($I11)
    ($P10) = rx1612_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1612_pos, "")
    rx1612_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1614_done
  rxcap_1614_fail:
    goto rx1612_fail
  rxcap_1614_done:
  # rx charclass s
    ge rx1612_pos, rx1612_eos, rx1612_fail
    sub $I10, rx1612_pos, rx1612_off
    is_cclass $I11, .CCLASS_WHITESPACE, rx1612_tgt, $I10
    unless $I11, rx1612_fail
    inc rx1612_pos
  # rx subrule "ws" subtype=method negate=
    rx1612_cur."!cursor_pos"(rx1612_pos)
    $P10 = rx1612_cur."ws"()
    unless $P10, rx1612_fail
    rx1612_pos = $P10."pos"()
  # rx subrule "name" subtype=capture negate=
    rx1612_cur."!cursor_pos"(rx1612_pos)
    $P10 = rx1612_cur."name"()
    unless $P10, rx1612_fail
    rx1612_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("name")
    rx1612_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1612_cur."!cursor_pos"(rx1612_pos)
    $P10 = rx1612_cur."ws"()
    unless $P10, rx1612_fail
    rx1612_pos = $P10."pos"()
.annotate 'line', 881
  # rx pass
    rx1612_cur."!cursor_pass"(rx1612_pos, "statement_control:sym<use>")
    if_null rx1612_debug, debug_1135
    rx1612_cur."!cursor_debug"("PASS", "statement_control:sym<use>", " at pos=", rx1612_pos)
  debug_1135:
    .return (rx1612_cur)
  rx1612_restart:
    if_null rx1612_debug, debug_1136
    rx1612_cur."!cursor_debug"("NEXT", "statement_control:sym<use>")
  debug_1136:
  rx1612_fail:
    (rx1612_rep, rx1612_pos, $I10, $P10) = rx1612_cur."!mark_fail"(0)
    lt rx1612_pos, -1, rx1612_done
    eq rx1612_pos, -1, rx1612_fail
    jump $I10
  rx1612_done:
    rx1612_cur."!cursor_fail"()
    if_null rx1612_debug, debug_1137
    rx1612_cur."!cursor_debug"("FAIL", "statement_control:sym<use>")
  debug_1137:
    .return (rx1612_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control:sym<use>"  :subid("128_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 881
    new $P106, "ResizablePMCArray"
    push $P106, "use"
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<if>"  :subid("129_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 885
    .local string rx1617_tgt
    .local int rx1617_pos
    .local int rx1617_off
    .local int rx1617_eos
    .local int rx1617_rep
    .local pmc rx1617_cur
    .local pmc rx1617_debug
    (rx1617_cur, rx1617_pos, rx1617_tgt, $I10) = self."!cursor_start"()
    rx1617_cur."!cursor_caparray"("xblock", "else")
    .lex unicode:"$\x{a2}", rx1617_cur
    .local pmc match
    .lex "$/", match
    length rx1617_eos, rx1617_tgt
    gt rx1617_pos, rx1617_eos, rx1617_done
    set rx1617_off, 0
    lt rx1617_pos, 2, rx1617_start
    sub rx1617_off, rx1617_pos, 1
    substr rx1617_tgt, rx1617_tgt, rx1617_off
  rx1617_start:
    eq $I10, 1, rx1617_restart
    if_null rx1617_debug, debug_1138
    rx1617_cur."!cursor_debug"("START", "statement_control:sym<if>")
  debug_1138:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1618_done
    goto rxscan1618_scan
  rxscan1618_loop:
    (rx1617_pos) = rx1617_cur."from"()
    inc rx1617_pos
    rx1617_cur."!cursor_from"(rx1617_pos)
    ge rx1617_pos, rx1617_eos, rxscan1618_done
  rxscan1618_scan:
    set_addr $I10, rxscan1618_loop
    rx1617_cur."!mark_push"(0, rx1617_pos, $I10)
  rxscan1618_done:
.annotate 'line', 886
  # rx subcapture "sym"
    set_addr $I10, rxcap_1619_fail
    rx1617_cur."!mark_push"(0, rx1617_pos, $I10)
  # rx literal  "if"
    add $I11, rx1617_pos, 2
    gt $I11, rx1617_eos, rx1617_fail
    sub $I11, rx1617_pos, rx1617_off
    substr $S10, rx1617_tgt, $I11, 2
    ne $S10, "if", rx1617_fail
    add rx1617_pos, 2
    set_addr $I10, rxcap_1619_fail
    ($I12, $I11) = rx1617_cur."!mark_peek"($I10)
    rx1617_cur."!cursor_pos"($I11)
    ($P10) = rx1617_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1617_pos, "")
    rx1617_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1619_done
  rxcap_1619_fail:
    goto rx1617_fail
  rxcap_1619_done:
  # rx charclass s
    ge rx1617_pos, rx1617_eos, rx1617_fail
    sub $I10, rx1617_pos, rx1617_off
    is_cclass $I11, .CCLASS_WHITESPACE, rx1617_tgt, $I10
    unless $I11, rx1617_fail
    inc rx1617_pos
  # rx subrule "ws" subtype=method negate=
    rx1617_cur."!cursor_pos"(rx1617_pos)
    $P10 = rx1617_cur."ws"()
    unless $P10, rx1617_fail
    rx1617_pos = $P10."pos"()
.annotate 'line', 887
  # rx subrule "xblock" subtype=capture negate=
    rx1617_cur."!cursor_pos"(rx1617_pos)
    $P10 = rx1617_cur."xblock"()
    unless $P10, rx1617_fail
    rx1617_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("xblock")
    rx1617_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1617_cur."!cursor_pos"(rx1617_pos)
    $P10 = rx1617_cur."ws"()
    unless $P10, rx1617_fail
    rx1617_pos = $P10."pos"()
.annotate 'line', 888
  # rx rxquantr1620 ** 0..*
    set_addr $I10, rxquantr1620_done
    rx1617_cur."!mark_push"(0, rx1617_pos, $I10)
  rxquantr1620_loop:
  # rx subrule "ws" subtype=method negate=
    rx1617_cur."!cursor_pos"(rx1617_pos)
    $P10 = rx1617_cur."ws"()
    unless $P10, rx1617_fail
    rx1617_pos = $P10."pos"()
  # rx literal  "elsif"
    add $I11, rx1617_pos, 5
    gt $I11, rx1617_eos, rx1617_fail
    sub $I11, rx1617_pos, rx1617_off
    substr $S10, rx1617_tgt, $I11, 5
    ne $S10, "elsif", rx1617_fail
    add rx1617_pos, 5
  # rx charclass s
    ge rx1617_pos, rx1617_eos, rx1617_fail
    sub $I10, rx1617_pos, rx1617_off
    is_cclass $I11, .CCLASS_WHITESPACE, rx1617_tgt, $I10
    unless $I11, rx1617_fail
    inc rx1617_pos
  # rx subrule "ws" subtype=method negate=
    rx1617_cur."!cursor_pos"(rx1617_pos)
    $P10 = rx1617_cur."ws"()
    unless $P10, rx1617_fail
    rx1617_pos = $P10."pos"()
  # rx subrule "xblock" subtype=capture negate=
    rx1617_cur."!cursor_pos"(rx1617_pos)
    $P10 = rx1617_cur."xblock"()
    unless $P10, rx1617_fail
    rx1617_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("xblock")
    rx1617_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1617_cur."!cursor_pos"(rx1617_pos)
    $P10 = rx1617_cur."ws"()
    unless $P10, rx1617_fail
    rx1617_pos = $P10."pos"()
    set_addr $I10, rxquantr1620_done
    (rx1617_rep) = rx1617_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr1620_done
    rx1617_cur."!mark_push"(rx1617_rep, rx1617_pos, $I10)
    goto rxquantr1620_loop
  rxquantr1620_done:
  # rx subrule "ws" subtype=method negate=
    rx1617_cur."!cursor_pos"(rx1617_pos)
    $P10 = rx1617_cur."ws"()
    unless $P10, rx1617_fail
    rx1617_pos = $P10."pos"()
.annotate 'line', 889
  # rx rxquantr1621 ** 0..1
    set_addr $I10, rxquantr1621_done
    rx1617_cur."!mark_push"(0, rx1617_pos, $I10)
  rxquantr1621_loop:
  # rx subrule "ws" subtype=method negate=
    rx1617_cur."!cursor_pos"(rx1617_pos)
    $P10 = rx1617_cur."ws"()
    unless $P10, rx1617_fail
    rx1617_pos = $P10."pos"()
  # rx literal  "else"
    add $I11, rx1617_pos, 4
    gt $I11, rx1617_eos, rx1617_fail
    sub $I11, rx1617_pos, rx1617_off
    substr $S10, rx1617_tgt, $I11, 4
    ne $S10, "else", rx1617_fail
    add rx1617_pos, 4
  # rx charclass s
    ge rx1617_pos, rx1617_eos, rx1617_fail
    sub $I10, rx1617_pos, rx1617_off
    is_cclass $I11, .CCLASS_WHITESPACE, rx1617_tgt, $I10
    unless $I11, rx1617_fail
    inc rx1617_pos
  # rx subrule "ws" subtype=method negate=
    rx1617_cur."!cursor_pos"(rx1617_pos)
    $P10 = rx1617_cur."ws"()
    unless $P10, rx1617_fail
    rx1617_pos = $P10."pos"()
  # rx subrule "pblock" subtype=capture negate=
    rx1617_cur."!cursor_pos"(rx1617_pos)
    $P10 = rx1617_cur."pblock"()
    unless $P10, rx1617_fail
    rx1617_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("else")
    rx1617_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1617_cur."!cursor_pos"(rx1617_pos)
    $P10 = rx1617_cur."ws"()
    unless $P10, rx1617_fail
    rx1617_pos = $P10."pos"()
    set_addr $I10, rxquantr1621_done
    (rx1617_rep) = rx1617_cur."!mark_commit"($I10)
  rxquantr1621_done:
  # rx subrule "ws" subtype=method negate=
    rx1617_cur."!cursor_pos"(rx1617_pos)
    $P10 = rx1617_cur."ws"()
    unless $P10, rx1617_fail
    rx1617_pos = $P10."pos"()
.annotate 'line', 885
  # rx pass
    rx1617_cur."!cursor_pass"(rx1617_pos, "statement_control:sym<if>")
    if_null rx1617_debug, debug_1139
    rx1617_cur."!cursor_debug"("PASS", "statement_control:sym<if>", " at pos=", rx1617_pos)
  debug_1139:
    .return (rx1617_cur)
  rx1617_restart:
    if_null rx1617_debug, debug_1140
    rx1617_cur."!cursor_debug"("NEXT", "statement_control:sym<if>")
  debug_1140:
  rx1617_fail:
    (rx1617_rep, rx1617_pos, $I10, $P10) = rx1617_cur."!mark_fail"(0)
    lt rx1617_pos, -1, rx1617_done
    eq rx1617_pos, -1, rx1617_fail
    jump $I10
  rx1617_done:
    rx1617_cur."!cursor_fail"()
    if_null rx1617_debug, debug_1141
    rx1617_cur."!cursor_debug"("FAIL", "statement_control:sym<if>")
  debug_1141:
    .return (rx1617_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control:sym<if>"  :subid("130_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 885
    new $P114, "ResizablePMCArray"
    push $P114, "if"
    .return ($P114)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<unless>"  :subid("131_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 892
    .const 'Sub' $P1629 = "132_1329260321.776" 
    capture_lex $P1629
    .local string rx1624_tgt
    .local int rx1624_pos
    .local int rx1624_off
    .local int rx1624_eos
    .local int rx1624_rep
    .local pmc rx1624_cur
    .local pmc rx1624_debug
    (rx1624_cur, rx1624_pos, rx1624_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1624_cur
    .local pmc match
    .lex "$/", match
    length rx1624_eos, rx1624_tgt
    gt rx1624_pos, rx1624_eos, rx1624_done
    set rx1624_off, 0
    lt rx1624_pos, 2, rx1624_start
    sub rx1624_off, rx1624_pos, 1
    substr rx1624_tgt, rx1624_tgt, rx1624_off
  rx1624_start:
    eq $I10, 1, rx1624_restart
    if_null rx1624_debug, debug_1142
    rx1624_cur."!cursor_debug"("START", "statement_control:sym<unless>")
  debug_1142:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1625_done
    goto rxscan1625_scan
  rxscan1625_loop:
    (rx1624_pos) = rx1624_cur."from"()
    inc rx1624_pos
    rx1624_cur."!cursor_from"(rx1624_pos)
    ge rx1624_pos, rx1624_eos, rxscan1625_done
  rxscan1625_scan:
    set_addr $I10, rxscan1625_loop
    rx1624_cur."!mark_push"(0, rx1624_pos, $I10)
  rxscan1625_done:
.annotate 'line', 893
  # rx subcapture "sym"
    set_addr $I10, rxcap_1626_fail
    rx1624_cur."!mark_push"(0, rx1624_pos, $I10)
  # rx literal  "unless"
    add $I11, rx1624_pos, 6
    gt $I11, rx1624_eos, rx1624_fail
    sub $I11, rx1624_pos, rx1624_off
    substr $S10, rx1624_tgt, $I11, 6
    ne $S10, "unless", rx1624_fail
    add rx1624_pos, 6
    set_addr $I10, rxcap_1626_fail
    ($I12, $I11) = rx1624_cur."!mark_peek"($I10)
    rx1624_cur."!cursor_pos"($I11)
    ($P10) = rx1624_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1624_pos, "")
    rx1624_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1626_done
  rxcap_1626_fail:
    goto rx1624_fail
  rxcap_1626_done:
  # rx charclass s
    ge rx1624_pos, rx1624_eos, rx1624_fail
    sub $I10, rx1624_pos, rx1624_off
    is_cclass $I11, .CCLASS_WHITESPACE, rx1624_tgt, $I10
    unless $I11, rx1624_fail
    inc rx1624_pos
  # rx subrule "ws" subtype=method negate=
    rx1624_cur."!cursor_pos"(rx1624_pos)
    $P10 = rx1624_cur."ws"()
    unless $P10, rx1624_fail
    rx1624_pos = $P10."pos"()
.annotate 'line', 894
  # rx subrule "xblock" subtype=capture negate=
    rx1624_cur."!cursor_pos"(rx1624_pos)
    $P10 = rx1624_cur."xblock"()
    unless $P10, rx1624_fail
    rx1624_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("xblock")
    rx1624_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1624_cur."!cursor_pos"(rx1624_pos)
    $P10 = rx1624_cur."ws"()
    unless $P10, rx1624_fail
    rx1624_pos = $P10."pos"()
  alt1627_0:
.annotate 'line', 895
    set_addr $I10, alt1627_1
    rx1624_cur."!mark_push"(0, rx1624_pos, $I10)
  # rx subrule "ws" subtype=method negate=
    rx1624_cur."!cursor_pos"(rx1624_pos)
    $P10 = rx1624_cur."ws"()
    unless $P10, rx1624_fail
    rx1624_pos = $P10."pos"()
  # rx subrule "before" subtype=zerowidth negate=1
    rx1624_cur."!cursor_pos"(rx1624_pos)
    .const 'Sub' $P1629 = "132_1329260321.776" 
    capture_lex $P1629
    $P10 = rx1624_cur."before"($P1629)
    if $P10, rx1624_fail
  # rx subrule "ws" subtype=method negate=
    rx1624_cur."!cursor_pos"(rx1624_pos)
    $P10 = rx1624_cur."ws"()
    unless $P10, rx1624_fail
    rx1624_pos = $P10."pos"()
    goto alt1627_end
  alt1627_1:
  # rx subrule "ws" subtype=method negate=
    rx1624_cur."!cursor_pos"(rx1624_pos)
    $P10 = rx1624_cur."ws"()
    unless $P10, rx1624_fail
    rx1624_pos = $P10."pos"()
  # rx subrule "panic" subtype=method negate=
    rx1624_cur."!cursor_pos"(rx1624_pos)
    $P10 = rx1624_cur."panic"("unless does not take \"else\", please rewrite using \"if\"")
    unless $P10, rx1624_fail
    rx1624_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1624_cur."!cursor_pos"(rx1624_pos)
    $P10 = rx1624_cur."ws"()
    unless $P10, rx1624_fail
    rx1624_pos = $P10."pos"()
  alt1627_end:
  # rx subrule "ws" subtype=method negate=
    rx1624_cur."!cursor_pos"(rx1624_pos)
    $P10 = rx1624_cur."ws"()
    unless $P10, rx1624_fail
    rx1624_pos = $P10."pos"()
.annotate 'line', 892
  # rx pass
    rx1624_cur."!cursor_pass"(rx1624_pos, "statement_control:sym<unless>")
    if_null rx1624_debug, debug_1147
    rx1624_cur."!cursor_debug"("PASS", "statement_control:sym<unless>", " at pos=", rx1624_pos)
  debug_1147:
    .return (rx1624_cur)
  rx1624_restart:
    if_null rx1624_debug, debug_1148
    rx1624_cur."!cursor_debug"("NEXT", "statement_control:sym<unless>")
  debug_1148:
  rx1624_fail:
    (rx1624_rep, rx1624_pos, $I10, $P10) = rx1624_cur."!mark_fail"(0)
    lt rx1624_pos, -1, rx1624_done
    eq rx1624_pos, -1, rx1624_fail
    jump $I10
  rx1624_done:
    rx1624_cur."!cursor_fail"()
    if_null rx1624_debug, debug_1149
    rx1624_cur."!cursor_debug"("FAIL", "statement_control:sym<unless>")
  debug_1149:
    .return (rx1624_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1628"  :anon :subid("132_1329260321.776") :method :outer("131_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 895
    .local string rx1630_tgt
    .local int rx1630_pos
    .local int rx1630_off
    .local int rx1630_eos
    .local int rx1630_rep
    .local pmc rx1630_cur
    .local pmc rx1630_debug
    (rx1630_cur, rx1630_pos, rx1630_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1630_cur
    .local pmc match
    .lex "$/", match
    length rx1630_eos, rx1630_tgt
    gt rx1630_pos, rx1630_eos, rx1630_done
    set rx1630_off, 0
    lt rx1630_pos, 2, rx1630_start
    sub rx1630_off, rx1630_pos, 1
    substr rx1630_tgt, rx1630_tgt, rx1630_off
  rx1630_start:
    eq $I10, 1, rx1630_restart
    if_null rx1630_debug, debug_1143
    rx1630_cur."!cursor_debug"("START", "")
  debug_1143:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1631_done
    goto rxscan1631_scan
  rxscan1631_loop:
    (rx1630_pos) = rx1630_cur."from"()
    inc rx1630_pos
    rx1630_cur."!cursor_from"(rx1630_pos)
    ge rx1630_pos, rx1630_eos, rxscan1631_done
  rxscan1631_scan:
    set_addr $I10, rxscan1631_loop
    rx1630_cur."!mark_push"(0, rx1630_pos, $I10)
  rxscan1631_done:
  # rx literal  "else"
    add $I11, rx1630_pos, 4
    gt $I11, rx1630_eos, rx1630_fail
    sub $I11, rx1630_pos, rx1630_off
    substr $S10, rx1630_tgt, $I11, 4
    ne $S10, "else", rx1630_fail
    add rx1630_pos, 4
  # rx pass
    rx1630_cur."!cursor_pass"(rx1630_pos, "")
    if_null rx1630_debug, debug_1144
    rx1630_cur."!cursor_debug"("PASS", "", " at pos=", rx1630_pos)
  debug_1144:
    .return (rx1630_cur)
  rx1630_restart:
    if_null rx1630_debug, debug_1145
    rx1630_cur."!cursor_debug"("NEXT", "")
  debug_1145:
  rx1630_fail:
    (rx1630_rep, rx1630_pos, $I10, $P10) = rx1630_cur."!mark_fail"(0)
    lt rx1630_pos, -1, rx1630_done
    eq rx1630_pos, -1, rx1630_fail
    jump $I10
  rx1630_done:
    rx1630_cur."!cursor_fail"()
    if_null rx1630_debug, debug_1146
    rx1630_cur."!cursor_debug"("FAIL", "")
  debug_1146:
    .return (rx1630_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control:sym<unless>"  :subid("133_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 892
    new $P111, "ResizablePMCArray"
    push $P111, "unless"
    .return ($P111)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<while>"  :subid("134_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 898
    .local string rx1634_tgt
    .local int rx1634_pos
    .local int rx1634_off
    .local int rx1634_eos
    .local int rx1634_rep
    .local pmc rx1634_cur
    .local pmc rx1634_debug
    (rx1634_cur, rx1634_pos, rx1634_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1634_cur
    .local pmc match
    .lex "$/", match
    length rx1634_eos, rx1634_tgt
    gt rx1634_pos, rx1634_eos, rx1634_done
    set rx1634_off, 0
    lt rx1634_pos, 2, rx1634_start
    sub rx1634_off, rx1634_pos, 1
    substr rx1634_tgt, rx1634_tgt, rx1634_off
  rx1634_start:
    eq $I10, 1, rx1634_restart
    if_null rx1634_debug, debug_1150
    rx1634_cur."!cursor_debug"("START", "statement_control:sym<while>")
  debug_1150:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1635_done
    goto rxscan1635_scan
  rxscan1635_loop:
    (rx1634_pos) = rx1634_cur."from"()
    inc rx1634_pos
    rx1634_cur."!cursor_from"(rx1634_pos)
    ge rx1634_pos, rx1634_eos, rxscan1635_done
  rxscan1635_scan:
    set_addr $I10, rxscan1635_loop
    rx1634_cur."!mark_push"(0, rx1634_pos, $I10)
  rxscan1635_done:
.annotate 'line', 899
  # rx subcapture "sym"
    set_addr $I10, rxcap_1637_fail
    rx1634_cur."!mark_push"(0, rx1634_pos, $I10)
  alt1636_0:
    set_addr $I10, alt1636_1
    rx1634_cur."!mark_push"(0, rx1634_pos, $I10)
  # rx literal  "while"
    add $I11, rx1634_pos, 5
    gt $I11, rx1634_eos, rx1634_fail
    sub $I11, rx1634_pos, rx1634_off
    substr $S10, rx1634_tgt, $I11, 5
    ne $S10, "while", rx1634_fail
    add rx1634_pos, 5
    goto alt1636_end
  alt1636_1:
  # rx literal  "until"
    add $I11, rx1634_pos, 5
    gt $I11, rx1634_eos, rx1634_fail
    sub $I11, rx1634_pos, rx1634_off
    substr $S10, rx1634_tgt, $I11, 5
    ne $S10, "until", rx1634_fail
    add rx1634_pos, 5
  alt1636_end:
    set_addr $I10, rxcap_1637_fail
    ($I12, $I11) = rx1634_cur."!mark_peek"($I10)
    rx1634_cur."!cursor_pos"($I11)
    ($P10) = rx1634_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1634_pos, "")
    rx1634_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1637_done
  rxcap_1637_fail:
    goto rx1634_fail
  rxcap_1637_done:
  # rx charclass s
    ge rx1634_pos, rx1634_eos, rx1634_fail
    sub $I10, rx1634_pos, rx1634_off
    is_cclass $I11, .CCLASS_WHITESPACE, rx1634_tgt, $I10
    unless $I11, rx1634_fail
    inc rx1634_pos
  # rx subrule "ws" subtype=method negate=
    rx1634_cur."!cursor_pos"(rx1634_pos)
    $P10 = rx1634_cur."ws"()
    unless $P10, rx1634_fail
    rx1634_pos = $P10."pos"()
.annotate 'line', 900
  # rx subrule "xblock" subtype=capture negate=
    rx1634_cur."!cursor_pos"(rx1634_pos)
    $P10 = rx1634_cur."xblock"()
    unless $P10, rx1634_fail
    rx1634_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("xblock")
    rx1634_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1634_cur."!cursor_pos"(rx1634_pos)
    $P10 = rx1634_cur."ws"()
    unless $P10, rx1634_fail
    rx1634_pos = $P10."pos"()
.annotate 'line', 898
  # rx pass
    rx1634_cur."!cursor_pass"(rx1634_pos, "statement_control:sym<while>")
    if_null rx1634_debug, debug_1151
    rx1634_cur."!cursor_debug"("PASS", "statement_control:sym<while>", " at pos=", rx1634_pos)
  debug_1151:
    .return (rx1634_cur)
  rx1634_restart:
    if_null rx1634_debug, debug_1152
    rx1634_cur."!cursor_debug"("NEXT", "statement_control:sym<while>")
  debug_1152:
  rx1634_fail:
    (rx1634_rep, rx1634_pos, $I10, $P10) = rx1634_cur."!mark_fail"(0)
    lt rx1634_pos, -1, rx1634_done
    eq rx1634_pos, -1, rx1634_fail
    jump $I10
  rx1634_done:
    rx1634_cur."!cursor_fail"()
    if_null rx1634_debug, debug_1153
    rx1634_cur."!cursor_debug"("FAIL", "statement_control:sym<while>")
  debug_1153:
    .return (rx1634_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control:sym<while>"  :subid("135_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 898
    new $P106, "ResizablePMCArray"
    push $P106, "until"
    push $P106, "while"
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<repeat>"  :subid("136_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 903
    .local string rx1640_tgt
    .local int rx1640_pos
    .local int rx1640_off
    .local int rx1640_eos
    .local int rx1640_rep
    .local pmc rx1640_cur
    .local pmc rx1640_debug
    (rx1640_cur, rx1640_pos, rx1640_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1640_cur
    .local pmc match
    .lex "$/", match
    length rx1640_eos, rx1640_tgt
    gt rx1640_pos, rx1640_eos, rx1640_done
    set rx1640_off, 0
    lt rx1640_pos, 2, rx1640_start
    sub rx1640_off, rx1640_pos, 1
    substr rx1640_tgt, rx1640_tgt, rx1640_off
  rx1640_start:
    eq $I10, 1, rx1640_restart
    if_null rx1640_debug, debug_1154
    rx1640_cur."!cursor_debug"("START", "statement_control:sym<repeat>")
  debug_1154:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1641_done
    goto rxscan1641_scan
  rxscan1641_loop:
    (rx1640_pos) = rx1640_cur."from"()
    inc rx1640_pos
    rx1640_cur."!cursor_from"(rx1640_pos)
    ge rx1640_pos, rx1640_eos, rxscan1641_done
  rxscan1641_scan:
    set_addr $I10, rxscan1641_loop
    rx1640_cur."!mark_push"(0, rx1640_pos, $I10)
  rxscan1641_done:
.annotate 'line', 904
  # rx subcapture "sym"
    set_addr $I10, rxcap_1642_fail
    rx1640_cur."!mark_push"(0, rx1640_pos, $I10)
  # rx literal  "repeat"
    add $I11, rx1640_pos, 6
    gt $I11, rx1640_eos, rx1640_fail
    sub $I11, rx1640_pos, rx1640_off
    substr $S10, rx1640_tgt, $I11, 6
    ne $S10, "repeat", rx1640_fail
    add rx1640_pos, 6
    set_addr $I10, rxcap_1642_fail
    ($I12, $I11) = rx1640_cur."!mark_peek"($I10)
    rx1640_cur."!cursor_pos"($I11)
    ($P10) = rx1640_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1640_pos, "")
    rx1640_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1642_done
  rxcap_1642_fail:
    goto rx1640_fail
  rxcap_1642_done:
  # rx charclass s
    ge rx1640_pos, rx1640_eos, rx1640_fail
    sub $I10, rx1640_pos, rx1640_off
    is_cclass $I11, .CCLASS_WHITESPACE, rx1640_tgt, $I10
    unless $I11, rx1640_fail
    inc rx1640_pos
  # rx subrule "ws" subtype=method negate=
    rx1640_cur."!cursor_pos"(rx1640_pos)
    $P10 = rx1640_cur."ws"()
    unless $P10, rx1640_fail
    rx1640_pos = $P10."pos"()
  alt1643_0:
.annotate 'line', 905
    set_addr $I10, alt1643_1
    rx1640_cur."!mark_push"(0, rx1640_pos, $I10)
.annotate 'line', 906
  # rx subrule "ws" subtype=method negate=
    rx1640_cur."!cursor_pos"(rx1640_pos)
    $P10 = rx1640_cur."ws"()
    unless $P10, rx1640_fail
    rx1640_pos = $P10."pos"()
  # rx subcapture "wu"
    set_addr $I10, rxcap_1645_fail
    rx1640_cur."!mark_push"(0, rx1640_pos, $I10)
  alt1644_0:
    set_addr $I10, alt1644_1
    rx1640_cur."!mark_push"(0, rx1640_pos, $I10)
  # rx literal  "while"
    add $I11, rx1640_pos, 5
    gt $I11, rx1640_eos, rx1640_fail
    sub $I11, rx1640_pos, rx1640_off
    substr $S10, rx1640_tgt, $I11, 5
    ne $S10, "while", rx1640_fail
    add rx1640_pos, 5
    goto alt1644_end
  alt1644_1:
  # rx literal  "until"
    add $I11, rx1640_pos, 5
    gt $I11, rx1640_eos, rx1640_fail
    sub $I11, rx1640_pos, rx1640_off
    substr $S10, rx1640_tgt, $I11, 5
    ne $S10, "until", rx1640_fail
    add rx1640_pos, 5
  alt1644_end:
    set_addr $I10, rxcap_1645_fail
    ($I12, $I11) = rx1640_cur."!mark_peek"($I10)
    rx1640_cur."!cursor_pos"($I11)
    ($P10) = rx1640_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1640_pos, "")
    rx1640_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("wu")
    goto rxcap_1645_done
  rxcap_1645_fail:
    goto rx1640_fail
  rxcap_1645_done:
  # rx charclass s
    ge rx1640_pos, rx1640_eos, rx1640_fail
    sub $I10, rx1640_pos, rx1640_off
    is_cclass $I11, .CCLASS_WHITESPACE, rx1640_tgt, $I10
    unless $I11, rx1640_fail
    inc rx1640_pos
  # rx subrule "ws" subtype=method negate=
    rx1640_cur."!cursor_pos"(rx1640_pos)
    $P10 = rx1640_cur."ws"()
    unless $P10, rx1640_fail
    rx1640_pos = $P10."pos"()
  # rx subrule "xblock" subtype=capture negate=
    rx1640_cur."!cursor_pos"(rx1640_pos)
    $P10 = rx1640_cur."xblock"()
    unless $P10, rx1640_fail
    rx1640_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("xblock")
    rx1640_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1640_cur."!cursor_pos"(rx1640_pos)
    $P10 = rx1640_cur."ws"()
    unless $P10, rx1640_fail
    rx1640_pos = $P10."pos"()
    goto alt1643_end
  alt1643_1:
.annotate 'line', 907
  # rx subrule "ws" subtype=method negate=
    rx1640_cur."!cursor_pos"(rx1640_pos)
    $P10 = rx1640_cur."ws"()
    unless $P10, rx1640_fail
    rx1640_pos = $P10."pos"()
  # rx subrule "pblock" subtype=capture negate=
    rx1640_cur."!cursor_pos"(rx1640_pos)
    $P10 = rx1640_cur."pblock"()
    unless $P10, rx1640_fail
    rx1640_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("pblock")
    rx1640_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1640_cur."!cursor_pos"(rx1640_pos)
    $P10 = rx1640_cur."ws"()
    unless $P10, rx1640_fail
    rx1640_pos = $P10."pos"()
  # rx subcapture "wu"
    set_addr $I10, rxcap_1647_fail
    rx1640_cur."!mark_push"(0, rx1640_pos, $I10)
  alt1646_0:
    set_addr $I10, alt1646_1
    rx1640_cur."!mark_push"(0, rx1640_pos, $I10)
  # rx literal  "while"
    add $I11, rx1640_pos, 5
    gt $I11, rx1640_eos, rx1640_fail
    sub $I11, rx1640_pos, rx1640_off
    substr $S10, rx1640_tgt, $I11, 5
    ne $S10, "while", rx1640_fail
    add rx1640_pos, 5
    goto alt1646_end
  alt1646_1:
  # rx literal  "until"
    add $I11, rx1640_pos, 5
    gt $I11, rx1640_eos, rx1640_fail
    sub $I11, rx1640_pos, rx1640_off
    substr $S10, rx1640_tgt, $I11, 5
    ne $S10, "until", rx1640_fail
    add rx1640_pos, 5
  alt1646_end:
    set_addr $I10, rxcap_1647_fail
    ($I12, $I11) = rx1640_cur."!mark_peek"($I10)
    rx1640_cur."!cursor_pos"($I11)
    ($P10) = rx1640_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1640_pos, "")
    rx1640_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("wu")
    goto rxcap_1647_done
  rxcap_1647_fail:
    goto rx1640_fail
  rxcap_1647_done:
  # rx charclass s
    ge rx1640_pos, rx1640_eos, rx1640_fail
    sub $I10, rx1640_pos, rx1640_off
    is_cclass $I11, .CCLASS_WHITESPACE, rx1640_tgt, $I10
    unless $I11, rx1640_fail
    inc rx1640_pos
  # rx subrule "ws" subtype=method negate=
    rx1640_cur."!cursor_pos"(rx1640_pos)
    $P10 = rx1640_cur."ws"()
    unless $P10, rx1640_fail
    rx1640_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx1640_cur."!cursor_pos"(rx1640_pos)
    $P10 = rx1640_cur."EXPR"()
    unless $P10, rx1640_fail
    rx1640_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("EXPR")
    rx1640_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1640_cur."!cursor_pos"(rx1640_pos)
    $P10 = rx1640_cur."ws"()
    unless $P10, rx1640_fail
    rx1640_pos = $P10."pos"()
  alt1643_end:
.annotate 'line', 908
  # rx subrule "ws" subtype=method negate=
    rx1640_cur."!cursor_pos"(rx1640_pos)
    $P10 = rx1640_cur."ws"()
    unless $P10, rx1640_fail
    rx1640_pos = $P10."pos"()
.annotate 'line', 903
  # rx pass
    rx1640_cur."!cursor_pass"(rx1640_pos, "statement_control:sym<repeat>")
    if_null rx1640_debug, debug_1155
    rx1640_cur."!cursor_debug"("PASS", "statement_control:sym<repeat>", " at pos=", rx1640_pos)
  debug_1155:
    .return (rx1640_cur)
  rx1640_restart:
    if_null rx1640_debug, debug_1156
    rx1640_cur."!cursor_debug"("NEXT", "statement_control:sym<repeat>")
  debug_1156:
  rx1640_fail:
    (rx1640_rep, rx1640_pos, $I10, $P10) = rx1640_cur."!mark_fail"(0)
    lt rx1640_pos, -1, rx1640_done
    eq rx1640_pos, -1, rx1640_fail
    jump $I10
  rx1640_done:
    rx1640_cur."!cursor_fail"()
    if_null rx1640_debug, debug_1157
    rx1640_cur."!cursor_debug"("FAIL", "statement_control:sym<repeat>")
  debug_1157:
    .return (rx1640_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control:sym<repeat>"  :subid("137_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 903
    new $P113, "ResizablePMCArray"
    push $P113, "repeat"
    .return ($P113)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<for>"  :subid("138_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 911
    .local string rx1650_tgt
    .local int rx1650_pos
    .local int rx1650_off
    .local int rx1650_eos
    .local int rx1650_rep
    .local pmc rx1650_cur
    .local pmc rx1650_debug
    (rx1650_cur, rx1650_pos, rx1650_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1650_cur
    .local pmc match
    .lex "$/", match
    length rx1650_eos, rx1650_tgt
    gt rx1650_pos, rx1650_eos, rx1650_done
    set rx1650_off, 0
    lt rx1650_pos, 2, rx1650_start
    sub rx1650_off, rx1650_pos, 1
    substr rx1650_tgt, rx1650_tgt, rx1650_off
  rx1650_start:
    eq $I10, 1, rx1650_restart
    if_null rx1650_debug, debug_1158
    rx1650_cur."!cursor_debug"("START", "statement_control:sym<for>")
  debug_1158:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1651_done
    goto rxscan1651_scan
  rxscan1651_loop:
    (rx1650_pos) = rx1650_cur."from"()
    inc rx1650_pos
    rx1650_cur."!cursor_from"(rx1650_pos)
    ge rx1650_pos, rx1650_eos, rxscan1651_done
  rxscan1651_scan:
    set_addr $I10, rxscan1651_loop
    rx1650_cur."!mark_push"(0, rx1650_pos, $I10)
  rxscan1651_done:
.annotate 'line', 912
  # rx subcapture "sym"
    set_addr $I10, rxcap_1652_fail
    rx1650_cur."!mark_push"(0, rx1650_pos, $I10)
  # rx literal  "for"
    add $I11, rx1650_pos, 3
    gt $I11, rx1650_eos, rx1650_fail
    sub $I11, rx1650_pos, rx1650_off
    substr $S10, rx1650_tgt, $I11, 3
    ne $S10, "for", rx1650_fail
    add rx1650_pos, 3
    set_addr $I10, rxcap_1652_fail
    ($I12, $I11) = rx1650_cur."!mark_peek"($I10)
    rx1650_cur."!cursor_pos"($I11)
    ($P10) = rx1650_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1650_pos, "")
    rx1650_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1652_done
  rxcap_1652_fail:
    goto rx1650_fail
  rxcap_1652_done:
  # rx charclass s
    ge rx1650_pos, rx1650_eos, rx1650_fail
    sub $I10, rx1650_pos, rx1650_off
    is_cclass $I11, .CCLASS_WHITESPACE, rx1650_tgt, $I10
    unless $I11, rx1650_fail
    inc rx1650_pos
  # rx subrule "ws" subtype=method negate=
    rx1650_cur."!cursor_pos"(rx1650_pos)
    $P10 = rx1650_cur."ws"()
    unless $P10, rx1650_fail
    rx1650_pos = $P10."pos"()
.annotate 'line', 913
  # rx subrule "xblock" subtype=capture negate=
    rx1650_cur."!cursor_pos"(rx1650_pos)
    $P10 = rx1650_cur."xblock"()
    unless $P10, rx1650_fail
    rx1650_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("xblock")
    rx1650_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1650_cur."!cursor_pos"(rx1650_pos)
    $P10 = rx1650_cur."ws"()
    unless $P10, rx1650_fail
    rx1650_pos = $P10."pos"()
.annotate 'line', 911
  # rx pass
    rx1650_cur."!cursor_pass"(rx1650_pos, "statement_control:sym<for>")
    if_null rx1650_debug, debug_1159
    rx1650_cur."!cursor_debug"("PASS", "statement_control:sym<for>", " at pos=", rx1650_pos)
  debug_1159:
    .return (rx1650_cur)
  rx1650_restart:
    if_null rx1650_debug, debug_1160
    rx1650_cur."!cursor_debug"("NEXT", "statement_control:sym<for>")
  debug_1160:
  rx1650_fail:
    (rx1650_rep, rx1650_pos, $I10, $P10) = rx1650_cur."!mark_fail"(0)
    lt rx1650_pos, -1, rx1650_done
    eq rx1650_pos, -1, rx1650_fail
    jump $I10
  rx1650_done:
    rx1650_cur."!cursor_fail"()
    if_null rx1650_debug, debug_1161
    rx1650_cur."!cursor_debug"("FAIL", "statement_control:sym<for>")
  debug_1161:
    .return (rx1650_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control:sym<for>"  :subid("139_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 911
    new $P106, "ResizablePMCArray"
    push $P106, "for"
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<CATCH>"  :subid("140_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 916
    .local string rx1655_tgt
    .local int rx1655_pos
    .local int rx1655_off
    .local int rx1655_eos
    .local int rx1655_rep
    .local pmc rx1655_cur
    .local pmc rx1655_debug
    (rx1655_cur, rx1655_pos, rx1655_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1655_cur
    .local pmc match
    .lex "$/", match
    length rx1655_eos, rx1655_tgt
    gt rx1655_pos, rx1655_eos, rx1655_done
    set rx1655_off, 0
    lt rx1655_pos, 2, rx1655_start
    sub rx1655_off, rx1655_pos, 1
    substr rx1655_tgt, rx1655_tgt, rx1655_off
  rx1655_start:
    eq $I10, 1, rx1655_restart
    if_null rx1655_debug, debug_1162
    rx1655_cur."!cursor_debug"("START", "statement_control:sym<CATCH>")
  debug_1162:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1656_done
    goto rxscan1656_scan
  rxscan1656_loop:
    (rx1655_pos) = rx1655_cur."from"()
    inc rx1655_pos
    rx1655_cur."!cursor_from"(rx1655_pos)
    ge rx1655_pos, rx1655_eos, rxscan1656_done
  rxscan1656_scan:
    set_addr $I10, rxscan1656_loop
    rx1655_cur."!mark_push"(0, rx1655_pos, $I10)
  rxscan1656_done:
.annotate 'line', 917
  # rx subcapture "sym"
    set_addr $I10, rxcap_1657_fail
    rx1655_cur."!mark_push"(0, rx1655_pos, $I10)
  # rx literal  "CATCH"
    add $I11, rx1655_pos, 5
    gt $I11, rx1655_eos, rx1655_fail
    sub $I11, rx1655_pos, rx1655_off
    substr $S10, rx1655_tgt, $I11, 5
    ne $S10, "CATCH", rx1655_fail
    add rx1655_pos, 5
    set_addr $I10, rxcap_1657_fail
    ($I12, $I11) = rx1655_cur."!mark_peek"($I10)
    rx1655_cur."!cursor_pos"($I11)
    ($P10) = rx1655_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1655_pos, "")
    rx1655_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1657_done
  rxcap_1657_fail:
    goto rx1655_fail
  rxcap_1657_done:
  # rx charclass s
    ge rx1655_pos, rx1655_eos, rx1655_fail
    sub $I10, rx1655_pos, rx1655_off
    is_cclass $I11, .CCLASS_WHITESPACE, rx1655_tgt, $I10
    unless $I11, rx1655_fail
    inc rx1655_pos
  # rx subrule "ws" subtype=method negate=
    rx1655_cur."!cursor_pos"(rx1655_pos)
    $P10 = rx1655_cur."ws"()
    unless $P10, rx1655_fail
    rx1655_pos = $P10."pos"()
.annotate 'line', 918
  # rx subrule "block" subtype=capture negate=
    rx1655_cur."!cursor_pos"(rx1655_pos)
    $P10 = rx1655_cur."block"()
    unless $P10, rx1655_fail
    rx1655_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("block")
    rx1655_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1655_cur."!cursor_pos"(rx1655_pos)
    $P10 = rx1655_cur."ws"()
    unless $P10, rx1655_fail
    rx1655_pos = $P10."pos"()
.annotate 'line', 916
  # rx pass
    rx1655_cur."!cursor_pass"(rx1655_pos, "statement_control:sym<CATCH>")
    if_null rx1655_debug, debug_1163
    rx1655_cur."!cursor_debug"("PASS", "statement_control:sym<CATCH>", " at pos=", rx1655_pos)
  debug_1163:
    .return (rx1655_cur)
  rx1655_restart:
    if_null rx1655_debug, debug_1164
    rx1655_cur."!cursor_debug"("NEXT", "statement_control:sym<CATCH>")
  debug_1164:
  rx1655_fail:
    (rx1655_rep, rx1655_pos, $I10, $P10) = rx1655_cur."!mark_fail"(0)
    lt rx1655_pos, -1, rx1655_done
    eq rx1655_pos, -1, rx1655_fail
    jump $I10
  rx1655_done:
    rx1655_cur."!cursor_fail"()
    if_null rx1655_debug, debug_1165
    rx1655_cur."!cursor_debug"("FAIL", "statement_control:sym<CATCH>")
  debug_1165:
    .return (rx1655_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control:sym<CATCH>"  :subid("141_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 916
    new $P106, "ResizablePMCArray"
    push $P106, "CATCH"
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<CONTROL>"  :subid("142_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 921
    .local string rx1660_tgt
    .local int rx1660_pos
    .local int rx1660_off
    .local int rx1660_eos
    .local int rx1660_rep
    .local pmc rx1660_cur
    .local pmc rx1660_debug
    (rx1660_cur, rx1660_pos, rx1660_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1660_cur
    .local pmc match
    .lex "$/", match
    length rx1660_eos, rx1660_tgt
    gt rx1660_pos, rx1660_eos, rx1660_done
    set rx1660_off, 0
    lt rx1660_pos, 2, rx1660_start
    sub rx1660_off, rx1660_pos, 1
    substr rx1660_tgt, rx1660_tgt, rx1660_off
  rx1660_start:
    eq $I10, 1, rx1660_restart
    if_null rx1660_debug, debug_1166
    rx1660_cur."!cursor_debug"("START", "statement_control:sym<CONTROL>")
  debug_1166:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1661_done
    goto rxscan1661_scan
  rxscan1661_loop:
    (rx1660_pos) = rx1660_cur."from"()
    inc rx1660_pos
    rx1660_cur."!cursor_from"(rx1660_pos)
    ge rx1660_pos, rx1660_eos, rxscan1661_done
  rxscan1661_scan:
    set_addr $I10, rxscan1661_loop
    rx1660_cur."!mark_push"(0, rx1660_pos, $I10)
  rxscan1661_done:
.annotate 'line', 922
  # rx subcapture "sym"
    set_addr $I10, rxcap_1662_fail
    rx1660_cur."!mark_push"(0, rx1660_pos, $I10)
  # rx literal  "CONTROL"
    add $I11, rx1660_pos, 7
    gt $I11, rx1660_eos, rx1660_fail
    sub $I11, rx1660_pos, rx1660_off
    substr $S10, rx1660_tgt, $I11, 7
    ne $S10, "CONTROL", rx1660_fail
    add rx1660_pos, 7
    set_addr $I10, rxcap_1662_fail
    ($I12, $I11) = rx1660_cur."!mark_peek"($I10)
    rx1660_cur."!cursor_pos"($I11)
    ($P10) = rx1660_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1660_pos, "")
    rx1660_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1662_done
  rxcap_1662_fail:
    goto rx1660_fail
  rxcap_1662_done:
  # rx charclass s
    ge rx1660_pos, rx1660_eos, rx1660_fail
    sub $I10, rx1660_pos, rx1660_off
    is_cclass $I11, .CCLASS_WHITESPACE, rx1660_tgt, $I10
    unless $I11, rx1660_fail
    inc rx1660_pos
  # rx subrule "ws" subtype=method negate=
    rx1660_cur."!cursor_pos"(rx1660_pos)
    $P10 = rx1660_cur."ws"()
    unless $P10, rx1660_fail
    rx1660_pos = $P10."pos"()
.annotate 'line', 923
  # rx subrule "block" subtype=capture negate=
    rx1660_cur."!cursor_pos"(rx1660_pos)
    $P10 = rx1660_cur."block"()
    unless $P10, rx1660_fail
    rx1660_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("block")
    rx1660_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1660_cur."!cursor_pos"(rx1660_pos)
    $P10 = rx1660_cur."ws"()
    unless $P10, rx1660_fail
    rx1660_pos = $P10."pos"()
.annotate 'line', 921
  # rx pass
    rx1660_cur."!cursor_pass"(rx1660_pos, "statement_control:sym<CONTROL>")
    if_null rx1660_debug, debug_1167
    rx1660_cur."!cursor_debug"("PASS", "statement_control:sym<CONTROL>", " at pos=", rx1660_pos)
  debug_1167:
    .return (rx1660_cur)
  rx1660_restart:
    if_null rx1660_debug, debug_1168
    rx1660_cur."!cursor_debug"("NEXT", "statement_control:sym<CONTROL>")
  debug_1168:
  rx1660_fail:
    (rx1660_rep, rx1660_pos, $I10, $P10) = rx1660_cur."!mark_fail"(0)
    lt rx1660_pos, -1, rx1660_done
    eq rx1660_pos, -1, rx1660_fail
    jump $I10
  rx1660_done:
    rx1660_cur."!cursor_fail"()
    if_null rx1660_debug, debug_1169
    rx1660_cur."!cursor_debug"("FAIL", "statement_control:sym<CONTROL>")
  debug_1169:
    .return (rx1660_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control:sym<CONTROL>"  :subid("143_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 921
    new $P106, "ResizablePMCArray"
    push $P106, "CONTROL"
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_prefix"  :subid("144_1329260321.776")
    .param pmc param_1665
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 926
    .lex "self", param_1665
    $P104 = param_1665."!protoregex"("statement_prefix")
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_prefix"  :subid("145_1329260321.776")
    .param pmc param_1667
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 926
    .lex "self", param_1667
    $P105 = param_1667."!PREFIX__!protoregex"("statement_prefix")
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_prefix:sym<INIT>"  :subid("146_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 927
    .local string rx1669_tgt
    .local int rx1669_pos
    .local int rx1669_off
    .local int rx1669_eos
    .local int rx1669_rep
    .local pmc rx1669_cur
    .local pmc rx1669_debug
    (rx1669_cur, rx1669_pos, rx1669_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1669_cur
    .local pmc match
    .lex "$/", match
    length rx1669_eos, rx1669_tgt
    gt rx1669_pos, rx1669_eos, rx1669_done
    set rx1669_off, 0
    lt rx1669_pos, 2, rx1669_start
    sub rx1669_off, rx1669_pos, 1
    substr rx1669_tgt, rx1669_tgt, rx1669_off
  rx1669_start:
    eq $I10, 1, rx1669_restart
    if_null rx1669_debug, debug_1170
    rx1669_cur."!cursor_debug"("START", "statement_prefix:sym<INIT>")
  debug_1170:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1670_done
    goto rxscan1670_scan
  rxscan1670_loop:
    (rx1669_pos) = rx1669_cur."from"()
    inc rx1669_pos
    rx1669_cur."!cursor_from"(rx1669_pos)
    ge rx1669_pos, rx1669_eos, rxscan1670_done
  rxscan1670_scan:
    set_addr $I10, rxscan1670_loop
    rx1669_cur."!mark_push"(0, rx1669_pos, $I10)
  rxscan1670_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_1671_fail
    rx1669_cur."!mark_push"(0, rx1669_pos, $I10)
  # rx literal  "INIT"
    add $I11, rx1669_pos, 4
    gt $I11, rx1669_eos, rx1669_fail
    sub $I11, rx1669_pos, rx1669_off
    substr $S10, rx1669_tgt, $I11, 4
    ne $S10, "INIT", rx1669_fail
    add rx1669_pos, 4
    set_addr $I10, rxcap_1671_fail
    ($I12, $I11) = rx1669_cur."!mark_peek"($I10)
    rx1669_cur."!cursor_pos"($I11)
    ($P10) = rx1669_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1669_pos, "")
    rx1669_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1671_done
  rxcap_1671_fail:
    goto rx1669_fail
  rxcap_1671_done:
  # rx subrule "blorst" subtype=capture negate=
    rx1669_cur."!cursor_pos"(rx1669_pos)
    $P10 = rx1669_cur."blorst"()
    unless $P10, rx1669_fail
    rx1669_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("blorst")
    rx1669_pos = $P10."pos"()
  # rx pass
    rx1669_cur."!cursor_pass"(rx1669_pos, "statement_prefix:sym<INIT>")
    if_null rx1669_debug, debug_1171
    rx1669_cur."!cursor_debug"("PASS", "statement_prefix:sym<INIT>", " at pos=", rx1669_pos)
  debug_1171:
    .return (rx1669_cur)
  rx1669_restart:
    if_null rx1669_debug, debug_1172
    rx1669_cur."!cursor_debug"("NEXT", "statement_prefix:sym<INIT>")
  debug_1172:
  rx1669_fail:
    (rx1669_rep, rx1669_pos, $I10, $P10) = rx1669_cur."!mark_fail"(0)
    lt rx1669_pos, -1, rx1669_done
    eq rx1669_pos, -1, rx1669_fail
    jump $I10
  rx1669_done:
    rx1669_cur."!cursor_fail"()
    if_null rx1669_debug, debug_1173
    rx1669_cur."!cursor_debug"("FAIL", "statement_prefix:sym<INIT>")
  debug_1173:
    .return (rx1669_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_prefix:sym<INIT>"  :subid("147_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 927
    $P104 = self."!PREFIX__!subrule"("blorst", "INIT")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_prefix:sym<try>"  :subid("148_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 929
    .local string rx1674_tgt
    .local int rx1674_pos
    .local int rx1674_off
    .local int rx1674_eos
    .local int rx1674_rep
    .local pmc rx1674_cur
    .local pmc rx1674_debug
    (rx1674_cur, rx1674_pos, rx1674_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1674_cur
    .local pmc match
    .lex "$/", match
    length rx1674_eos, rx1674_tgt
    gt rx1674_pos, rx1674_eos, rx1674_done
    set rx1674_off, 0
    lt rx1674_pos, 2, rx1674_start
    sub rx1674_off, rx1674_pos, 1
    substr rx1674_tgt, rx1674_tgt, rx1674_off
  rx1674_start:
    eq $I10, 1, rx1674_restart
    if_null rx1674_debug, debug_1174
    rx1674_cur."!cursor_debug"("START", "statement_prefix:sym<try>")
  debug_1174:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1675_done
    goto rxscan1675_scan
  rxscan1675_loop:
    (rx1674_pos) = rx1674_cur."from"()
    inc rx1674_pos
    rx1674_cur."!cursor_from"(rx1674_pos)
    ge rx1674_pos, rx1674_eos, rxscan1675_done
  rxscan1675_scan:
    set_addr $I10, rxscan1675_loop
    rx1674_cur."!mark_push"(0, rx1674_pos, $I10)
  rxscan1675_done:
.annotate 'line', 930
  # rx subcapture "sym"
    set_addr $I10, rxcap_1676_fail
    rx1674_cur."!mark_push"(0, rx1674_pos, $I10)
  # rx literal  "try"
    add $I11, rx1674_pos, 3
    gt $I11, rx1674_eos, rx1674_fail
    sub $I11, rx1674_pos, rx1674_off
    substr $S10, rx1674_tgt, $I11, 3
    ne $S10, "try", rx1674_fail
    add rx1674_pos, 3
    set_addr $I10, rxcap_1676_fail
    ($I12, $I11) = rx1674_cur."!mark_peek"($I10)
    rx1674_cur."!cursor_pos"($I11)
    ($P10) = rx1674_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1674_pos, "")
    rx1674_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1676_done
  rxcap_1676_fail:
    goto rx1674_fail
  rxcap_1676_done:
.annotate 'line', 931
  # rx subrule "blorst" subtype=capture negate=
    rx1674_cur."!cursor_pos"(rx1674_pos)
    $P10 = rx1674_cur."blorst"()
    unless $P10, rx1674_fail
    rx1674_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("blorst")
    rx1674_pos = $P10."pos"()
.annotate 'line', 929
  # rx pass
    rx1674_cur."!cursor_pass"(rx1674_pos, "statement_prefix:sym<try>")
    if_null rx1674_debug, debug_1175
    rx1674_cur."!cursor_debug"("PASS", "statement_prefix:sym<try>", " at pos=", rx1674_pos)
  debug_1175:
    .return (rx1674_cur)
  rx1674_restart:
    if_null rx1674_debug, debug_1176
    rx1674_cur."!cursor_debug"("NEXT", "statement_prefix:sym<try>")
  debug_1176:
  rx1674_fail:
    (rx1674_rep, rx1674_pos, $I10, $P10) = rx1674_cur."!mark_fail"(0)
    lt rx1674_pos, -1, rx1674_done
    eq rx1674_pos, -1, rx1674_fail
    jump $I10
  rx1674_done:
    rx1674_cur."!cursor_fail"()
    if_null rx1674_debug, debug_1177
    rx1674_cur."!cursor_debug"("FAIL", "statement_prefix:sym<try>")
  debug_1177:
    .return (rx1674_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_prefix:sym<try>"  :subid("149_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 929
    $P104 = self."!PREFIX__!subrule"("blorst", "try")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "blorst"  :subid("150_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 934
    .local string rx1679_tgt
    .local int rx1679_pos
    .local int rx1679_off
    .local int rx1679_eos
    .local int rx1679_rep
    .local pmc rx1679_cur
    .local pmc rx1679_debug
    (rx1679_cur, rx1679_pos, rx1679_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1679_cur
    .local pmc match
    .lex "$/", match
    length rx1679_eos, rx1679_tgt
    gt rx1679_pos, rx1679_eos, rx1679_done
    set rx1679_off, 0
    lt rx1679_pos, 2, rx1679_start
    sub rx1679_off, rx1679_pos, 1
    substr rx1679_tgt, rx1679_tgt, rx1679_off
  rx1679_start:
    eq $I10, 1, rx1679_restart
    if_null rx1679_debug, debug_1178
    rx1679_cur."!cursor_debug"("START", "blorst")
  debug_1178:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1680_done
    goto rxscan1680_scan
  rxscan1680_loop:
    (rx1679_pos) = rx1679_cur."from"()
    inc rx1679_pos
    rx1679_cur."!cursor_from"(rx1679_pos)
    ge rx1679_pos, rx1679_eos, rxscan1680_done
  rxscan1680_scan:
    set_addr $I10, rxscan1680_loop
    rx1679_cur."!mark_push"(0, rx1679_pos, $I10)
  rxscan1680_done:
.annotate 'line', 935
  # rx charclass s
    ge rx1679_pos, rx1679_eos, rx1679_fail
    sub $I10, rx1679_pos, rx1679_off
    is_cclass $I11, .CCLASS_WHITESPACE, rx1679_tgt, $I10
    unless $I11, rx1679_fail
    inc rx1679_pos
  # rx subrule "ws" subtype=method negate=
    rx1679_cur."!cursor_pos"(rx1679_pos)
    $P10 = rx1679_cur."ws"()
    unless $P10, rx1679_fail
    rx1679_pos = $P10."pos"()
  alt1681_0:
    set_addr $I10, alt1681_1
    rx1679_cur."!mark_push"(0, rx1679_pos, $I10)
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1679_pos, rx1679_off
    substr $S10, rx1679_tgt, $I10, 1
    index $I11, "{", $S10
    lt $I11, 0, rx1679_fail
  # rx subrule "block" subtype=capture negate=
    rx1679_cur."!cursor_pos"(rx1679_pos)
    $P10 = rx1679_cur."block"()
    unless $P10, rx1679_fail
    rx1679_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("block")
    rx1679_pos = $P10."pos"()
    goto alt1681_end
  alt1681_1:
  # rx subrule "statement" subtype=capture negate=
    rx1679_cur."!cursor_pos"(rx1679_pos)
    $P10 = rx1679_cur."statement"()
    unless $P10, rx1679_fail
    rx1679_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statement")
    rx1679_pos = $P10."pos"()
  alt1681_end:
.annotate 'line', 934
  # rx pass
    rx1679_cur."!cursor_pass"(rx1679_pos, "blorst")
    if_null rx1679_debug, debug_1179
    rx1679_cur."!cursor_debug"("PASS", "blorst", " at pos=", rx1679_pos)
  debug_1179:
    .return (rx1679_cur)
  rx1679_restart:
    if_null rx1679_debug, debug_1180
    rx1679_cur."!cursor_debug"("NEXT", "blorst")
  debug_1180:
  rx1679_fail:
    (rx1679_rep, rx1679_pos, $I10, $P10) = rx1679_cur."!mark_fail"(0)
    lt rx1679_pos, -1, rx1679_done
    eq rx1679_pos, -1, rx1679_fail
    jump $I10
  rx1679_done:
    rx1679_cur."!cursor_fail"()
    if_null rx1679_debug, debug_1181
    rx1679_cur."!cursor_debug"("FAIL", "blorst")
  debug_1181:
    .return (rx1679_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__blorst"  :subid("151_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 934
    new $P104, "ResizablePMCArray"
    push $P104, ""
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_cond"  :subid("152_1329260321.776")
    .param pmc param_1684
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 940
    .lex "self", param_1684
    $P104 = param_1684."!protoregex"("statement_mod_cond")
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_mod_cond"  :subid("153_1329260321.776")
    .param pmc param_1686
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 940
    .lex "self", param_1686
    $P105 = param_1686."!PREFIX__!protoregex"("statement_mod_cond")
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_cond:sym<if>"  :subid("154_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 942
    .local string rx1688_tgt
    .local int rx1688_pos
    .local int rx1688_off
    .local int rx1688_eos
    .local int rx1688_rep
    .local pmc rx1688_cur
    .local pmc rx1688_debug
    (rx1688_cur, rx1688_pos, rx1688_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1688_cur
    .local pmc match
    .lex "$/", match
    length rx1688_eos, rx1688_tgt
    gt rx1688_pos, rx1688_eos, rx1688_done
    set rx1688_off, 0
    lt rx1688_pos, 2, rx1688_start
    sub rx1688_off, rx1688_pos, 1
    substr rx1688_tgt, rx1688_tgt, rx1688_off
  rx1688_start:
    eq $I10, 1, rx1688_restart
    if_null rx1688_debug, debug_1182
    rx1688_cur."!cursor_debug"("START", "statement_mod_cond:sym<if>")
  debug_1182:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1689_done
    goto rxscan1689_scan
  rxscan1689_loop:
    (rx1688_pos) = rx1688_cur."from"()
    inc rx1688_pos
    rx1688_cur."!cursor_from"(rx1688_pos)
    ge rx1688_pos, rx1688_eos, rxscan1689_done
  rxscan1689_scan:
    set_addr $I10, rxscan1689_loop
    rx1688_cur."!mark_push"(0, rx1688_pos, $I10)
  rxscan1689_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_1690_fail
    rx1688_cur."!mark_push"(0, rx1688_pos, $I10)
  # rx literal  "if"
    add $I11, rx1688_pos, 2
    gt $I11, rx1688_eos, rx1688_fail
    sub $I11, rx1688_pos, rx1688_off
    substr $S10, rx1688_tgt, $I11, 2
    ne $S10, "if", rx1688_fail
    add rx1688_pos, 2
    set_addr $I10, rxcap_1690_fail
    ($I12, $I11) = rx1688_cur."!mark_peek"($I10)
    rx1688_cur."!cursor_pos"($I11)
    ($P10) = rx1688_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1688_pos, "")
    rx1688_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1690_done
  rxcap_1690_fail:
    goto rx1688_fail
  rxcap_1690_done:
  # rx subrule "ws" subtype=method negate=
    rx1688_cur."!cursor_pos"(rx1688_pos)
    $P10 = rx1688_cur."ws"()
    unless $P10, rx1688_fail
    rx1688_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx1688_cur."!cursor_pos"(rx1688_pos)
    $P10 = rx1688_cur."EXPR"()
    unless $P10, rx1688_fail
    rx1688_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("cond")
    rx1688_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1688_cur."!cursor_pos"(rx1688_pos)
    $P10 = rx1688_cur."ws"()
    unless $P10, rx1688_fail
    rx1688_pos = $P10."pos"()
  # rx pass
    rx1688_cur."!cursor_pass"(rx1688_pos, "statement_mod_cond:sym<if>")
    if_null rx1688_debug, debug_1183
    rx1688_cur."!cursor_debug"("PASS", "statement_mod_cond:sym<if>", " at pos=", rx1688_pos)
  debug_1183:
    .return (rx1688_cur)
  rx1688_restart:
    if_null rx1688_debug, debug_1184
    rx1688_cur."!cursor_debug"("NEXT", "statement_mod_cond:sym<if>")
  debug_1184:
  rx1688_fail:
    (rx1688_rep, rx1688_pos, $I10, $P10) = rx1688_cur."!mark_fail"(0)
    lt rx1688_pos, -1, rx1688_done
    eq rx1688_pos, -1, rx1688_fail
    jump $I10
  rx1688_done:
    rx1688_cur."!cursor_fail"()
    if_null rx1688_debug, debug_1185
    rx1688_cur."!cursor_debug"("FAIL", "statement_mod_cond:sym<if>")
  debug_1185:
    .return (rx1688_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_mod_cond:sym<if>"  :subid("155_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 942
    $P106 = self."!PREFIX__!subrule"("ws", "if")
    new $P107, "ResizablePMCArray"
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_cond:sym<unless>"  :subid("156_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 943
    .local string rx1693_tgt
    .local int rx1693_pos
    .local int rx1693_off
    .local int rx1693_eos
    .local int rx1693_rep
    .local pmc rx1693_cur
    .local pmc rx1693_debug
    (rx1693_cur, rx1693_pos, rx1693_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1693_cur
    .local pmc match
    .lex "$/", match
    length rx1693_eos, rx1693_tgt
    gt rx1693_pos, rx1693_eos, rx1693_done
    set rx1693_off, 0
    lt rx1693_pos, 2, rx1693_start
    sub rx1693_off, rx1693_pos, 1
    substr rx1693_tgt, rx1693_tgt, rx1693_off
  rx1693_start:
    eq $I10, 1, rx1693_restart
    if_null rx1693_debug, debug_1186
    rx1693_cur."!cursor_debug"("START", "statement_mod_cond:sym<unless>")
  debug_1186:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1694_done
    goto rxscan1694_scan
  rxscan1694_loop:
    (rx1693_pos) = rx1693_cur."from"()
    inc rx1693_pos
    rx1693_cur."!cursor_from"(rx1693_pos)
    ge rx1693_pos, rx1693_eos, rxscan1694_done
  rxscan1694_scan:
    set_addr $I10, rxscan1694_loop
    rx1693_cur."!mark_push"(0, rx1693_pos, $I10)
  rxscan1694_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_1695_fail
    rx1693_cur."!mark_push"(0, rx1693_pos, $I10)
  # rx literal  "unless"
    add $I11, rx1693_pos, 6
    gt $I11, rx1693_eos, rx1693_fail
    sub $I11, rx1693_pos, rx1693_off
    substr $S10, rx1693_tgt, $I11, 6
    ne $S10, "unless", rx1693_fail
    add rx1693_pos, 6
    set_addr $I10, rxcap_1695_fail
    ($I12, $I11) = rx1693_cur."!mark_peek"($I10)
    rx1693_cur."!cursor_pos"($I11)
    ($P10) = rx1693_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1693_pos, "")
    rx1693_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1695_done
  rxcap_1695_fail:
    goto rx1693_fail
  rxcap_1695_done:
  # rx subrule "ws" subtype=method negate=
    rx1693_cur."!cursor_pos"(rx1693_pos)
    $P10 = rx1693_cur."ws"()
    unless $P10, rx1693_fail
    rx1693_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx1693_cur."!cursor_pos"(rx1693_pos)
    $P10 = rx1693_cur."EXPR"()
    unless $P10, rx1693_fail
    rx1693_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("cond")
    rx1693_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1693_cur."!cursor_pos"(rx1693_pos)
    $P10 = rx1693_cur."ws"()
    unless $P10, rx1693_fail
    rx1693_pos = $P10."pos"()
  # rx pass
    rx1693_cur."!cursor_pass"(rx1693_pos, "statement_mod_cond:sym<unless>")
    if_null rx1693_debug, debug_1187
    rx1693_cur."!cursor_debug"("PASS", "statement_mod_cond:sym<unless>", " at pos=", rx1693_pos)
  debug_1187:
    .return (rx1693_cur)
  rx1693_restart:
    if_null rx1693_debug, debug_1188
    rx1693_cur."!cursor_debug"("NEXT", "statement_mod_cond:sym<unless>")
  debug_1188:
  rx1693_fail:
    (rx1693_rep, rx1693_pos, $I10, $P10) = rx1693_cur."!mark_fail"(0)
    lt rx1693_pos, -1, rx1693_done
    eq rx1693_pos, -1, rx1693_fail
    jump $I10
  rx1693_done:
    rx1693_cur."!cursor_fail"()
    if_null rx1693_debug, debug_1189
    rx1693_cur."!cursor_debug"("FAIL", "statement_mod_cond:sym<unless>")
  debug_1189:
    .return (rx1693_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_mod_cond:sym<unless>"  :subid("157_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 943
    $P106 = self."!PREFIX__!subrule"("ws", "unless")
    new $P107, "ResizablePMCArray"
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_loop"  :subid("158_1329260321.776")
    .param pmc param_1698
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 945
    .lex "self", param_1698
    $P104 = param_1698."!protoregex"("statement_mod_loop")
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_mod_loop"  :subid("159_1329260321.776")
    .param pmc param_1700
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 945
    .lex "self", param_1700
    $P105 = param_1700."!PREFIX__!protoregex"("statement_mod_loop")
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_loop:sym<while>"  :subid("160_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 947
    .local string rx1702_tgt
    .local int rx1702_pos
    .local int rx1702_off
    .local int rx1702_eos
    .local int rx1702_rep
    .local pmc rx1702_cur
    .local pmc rx1702_debug
    (rx1702_cur, rx1702_pos, rx1702_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1702_cur
    .local pmc match
    .lex "$/", match
    length rx1702_eos, rx1702_tgt
    gt rx1702_pos, rx1702_eos, rx1702_done
    set rx1702_off, 0
    lt rx1702_pos, 2, rx1702_start
    sub rx1702_off, rx1702_pos, 1
    substr rx1702_tgt, rx1702_tgt, rx1702_off
  rx1702_start:
    eq $I10, 1, rx1702_restart
    if_null rx1702_debug, debug_1190
    rx1702_cur."!cursor_debug"("START", "statement_mod_loop:sym<while>")
  debug_1190:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1703_done
    goto rxscan1703_scan
  rxscan1703_loop:
    (rx1702_pos) = rx1702_cur."from"()
    inc rx1702_pos
    rx1702_cur."!cursor_from"(rx1702_pos)
    ge rx1702_pos, rx1702_eos, rxscan1703_done
  rxscan1703_scan:
    set_addr $I10, rxscan1703_loop
    rx1702_cur."!mark_push"(0, rx1702_pos, $I10)
  rxscan1703_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_1704_fail
    rx1702_cur."!mark_push"(0, rx1702_pos, $I10)
  # rx literal  "while"
    add $I11, rx1702_pos, 5
    gt $I11, rx1702_eos, rx1702_fail
    sub $I11, rx1702_pos, rx1702_off
    substr $S10, rx1702_tgt, $I11, 5
    ne $S10, "while", rx1702_fail
    add rx1702_pos, 5
    set_addr $I10, rxcap_1704_fail
    ($I12, $I11) = rx1702_cur."!mark_peek"($I10)
    rx1702_cur."!cursor_pos"($I11)
    ($P10) = rx1702_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1702_pos, "")
    rx1702_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1704_done
  rxcap_1704_fail:
    goto rx1702_fail
  rxcap_1704_done:
  # rx subrule "ws" subtype=method negate=
    rx1702_cur."!cursor_pos"(rx1702_pos)
    $P10 = rx1702_cur."ws"()
    unless $P10, rx1702_fail
    rx1702_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx1702_cur."!cursor_pos"(rx1702_pos)
    $P10 = rx1702_cur."EXPR"()
    unless $P10, rx1702_fail
    rx1702_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("cond")
    rx1702_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1702_cur."!cursor_pos"(rx1702_pos)
    $P10 = rx1702_cur."ws"()
    unless $P10, rx1702_fail
    rx1702_pos = $P10."pos"()
  # rx pass
    rx1702_cur."!cursor_pass"(rx1702_pos, "statement_mod_loop:sym<while>")
    if_null rx1702_debug, debug_1191
    rx1702_cur."!cursor_debug"("PASS", "statement_mod_loop:sym<while>", " at pos=", rx1702_pos)
  debug_1191:
    .return (rx1702_cur)
  rx1702_restart:
    if_null rx1702_debug, debug_1192
    rx1702_cur."!cursor_debug"("NEXT", "statement_mod_loop:sym<while>")
  debug_1192:
  rx1702_fail:
    (rx1702_rep, rx1702_pos, $I10, $P10) = rx1702_cur."!mark_fail"(0)
    lt rx1702_pos, -1, rx1702_done
    eq rx1702_pos, -1, rx1702_fail
    jump $I10
  rx1702_done:
    rx1702_cur."!cursor_fail"()
    if_null rx1702_debug, debug_1193
    rx1702_cur."!cursor_debug"("FAIL", "statement_mod_loop:sym<while>")
  debug_1193:
    .return (rx1702_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_mod_loop:sym<while>"  :subid("161_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 947
    $P106 = self."!PREFIX__!subrule"("ws", "while")
    new $P107, "ResizablePMCArray"
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_loop:sym<until>"  :subid("162_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 948
    .local string rx1707_tgt
    .local int rx1707_pos
    .local int rx1707_off
    .local int rx1707_eos
    .local int rx1707_rep
    .local pmc rx1707_cur
    .local pmc rx1707_debug
    (rx1707_cur, rx1707_pos, rx1707_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1707_cur
    .local pmc match
    .lex "$/", match
    length rx1707_eos, rx1707_tgt
    gt rx1707_pos, rx1707_eos, rx1707_done
    set rx1707_off, 0
    lt rx1707_pos, 2, rx1707_start
    sub rx1707_off, rx1707_pos, 1
    substr rx1707_tgt, rx1707_tgt, rx1707_off
  rx1707_start:
    eq $I10, 1, rx1707_restart
    if_null rx1707_debug, debug_1194
    rx1707_cur."!cursor_debug"("START", "statement_mod_loop:sym<until>")
  debug_1194:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1708_done
    goto rxscan1708_scan
  rxscan1708_loop:
    (rx1707_pos) = rx1707_cur."from"()
    inc rx1707_pos
    rx1707_cur."!cursor_from"(rx1707_pos)
    ge rx1707_pos, rx1707_eos, rxscan1708_done
  rxscan1708_scan:
    set_addr $I10, rxscan1708_loop
    rx1707_cur."!mark_push"(0, rx1707_pos, $I10)
  rxscan1708_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_1709_fail
    rx1707_cur."!mark_push"(0, rx1707_pos, $I10)
  # rx literal  "until"
    add $I11, rx1707_pos, 5
    gt $I11, rx1707_eos, rx1707_fail
    sub $I11, rx1707_pos, rx1707_off
    substr $S10, rx1707_tgt, $I11, 5
    ne $S10, "until", rx1707_fail
    add rx1707_pos, 5
    set_addr $I10, rxcap_1709_fail
    ($I12, $I11) = rx1707_cur."!mark_peek"($I10)
    rx1707_cur."!cursor_pos"($I11)
    ($P10) = rx1707_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1707_pos, "")
    rx1707_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1709_done
  rxcap_1709_fail:
    goto rx1707_fail
  rxcap_1709_done:
  # rx subrule "ws" subtype=method negate=
    rx1707_cur."!cursor_pos"(rx1707_pos)
    $P10 = rx1707_cur."ws"()
    unless $P10, rx1707_fail
    rx1707_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx1707_cur."!cursor_pos"(rx1707_pos)
    $P10 = rx1707_cur."EXPR"()
    unless $P10, rx1707_fail
    rx1707_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("cond")
    rx1707_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1707_cur."!cursor_pos"(rx1707_pos)
    $P10 = rx1707_cur."ws"()
    unless $P10, rx1707_fail
    rx1707_pos = $P10."pos"()
  # rx pass
    rx1707_cur."!cursor_pass"(rx1707_pos, "statement_mod_loop:sym<until>")
    if_null rx1707_debug, debug_1195
    rx1707_cur."!cursor_debug"("PASS", "statement_mod_loop:sym<until>", " at pos=", rx1707_pos)
  debug_1195:
    .return (rx1707_cur)
  rx1707_restart:
    if_null rx1707_debug, debug_1196
    rx1707_cur."!cursor_debug"("NEXT", "statement_mod_loop:sym<until>")
  debug_1196:
  rx1707_fail:
    (rx1707_rep, rx1707_pos, $I10, $P10) = rx1707_cur."!mark_fail"(0)
    lt rx1707_pos, -1, rx1707_done
    eq rx1707_pos, -1, rx1707_fail
    jump $I10
  rx1707_done:
    rx1707_cur."!cursor_fail"()
    if_null rx1707_debug, debug_1197
    rx1707_cur."!cursor_debug"("FAIL", "statement_mod_loop:sym<until>")
  debug_1197:
    .return (rx1707_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_mod_loop:sym<until>"  :subid("163_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 948
    $P106 = self."!PREFIX__!subrule"("ws", "until")
    new $P107, "ResizablePMCArray"
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_loop:sym<for>"  :subid("164_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 949
    .local string rx1712_tgt
    .local int rx1712_pos
    .local int rx1712_off
    .local int rx1712_eos
    .local int rx1712_rep
    .local pmc rx1712_cur
    .local pmc rx1712_debug
    (rx1712_cur, rx1712_pos, rx1712_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1712_cur
    .local pmc match
    .lex "$/", match
    length rx1712_eos, rx1712_tgt
    gt rx1712_pos, rx1712_eos, rx1712_done
    set rx1712_off, 0
    lt rx1712_pos, 2, rx1712_start
    sub rx1712_off, rx1712_pos, 1
    substr rx1712_tgt, rx1712_tgt, rx1712_off
  rx1712_start:
    eq $I10, 1, rx1712_restart
    if_null rx1712_debug, debug_1198
    rx1712_cur."!cursor_debug"("START", "statement_mod_loop:sym<for>")
  debug_1198:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1713_done
    goto rxscan1713_scan
  rxscan1713_loop:
    (rx1712_pos) = rx1712_cur."from"()
    inc rx1712_pos
    rx1712_cur."!cursor_from"(rx1712_pos)
    ge rx1712_pos, rx1712_eos, rxscan1713_done
  rxscan1713_scan:
    set_addr $I10, rxscan1713_loop
    rx1712_cur."!mark_push"(0, rx1712_pos, $I10)
  rxscan1713_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_1714_fail
    rx1712_cur."!mark_push"(0, rx1712_pos, $I10)
  # rx literal  "for"
    add $I11, rx1712_pos, 3
    gt $I11, rx1712_eos, rx1712_fail
    sub $I11, rx1712_pos, rx1712_off
    substr $S10, rx1712_tgt, $I11, 3
    ne $S10, "for", rx1712_fail
    add rx1712_pos, 3
    set_addr $I10, rxcap_1714_fail
    ($I12, $I11) = rx1712_cur."!mark_peek"($I10)
    rx1712_cur."!cursor_pos"($I11)
    ($P10) = rx1712_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1712_pos, "")
    rx1712_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1714_done
  rxcap_1714_fail:
    goto rx1712_fail
  rxcap_1714_done:
  # rx subrule "ws" subtype=method negate=
    rx1712_cur."!cursor_pos"(rx1712_pos)
    $P10 = rx1712_cur."ws"()
    unless $P10, rx1712_fail
    rx1712_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx1712_cur."!cursor_pos"(rx1712_pos)
    $P10 = rx1712_cur."EXPR"()
    unless $P10, rx1712_fail
    rx1712_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("cond")
    rx1712_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1712_cur."!cursor_pos"(rx1712_pos)
    $P10 = rx1712_cur."ws"()
    unless $P10, rx1712_fail
    rx1712_pos = $P10."pos"()
  # rx pass
    rx1712_cur."!cursor_pass"(rx1712_pos, "statement_mod_loop:sym<for>")
    if_null rx1712_debug, debug_1199
    rx1712_cur."!cursor_debug"("PASS", "statement_mod_loop:sym<for>", " at pos=", rx1712_pos)
  debug_1199:
    .return (rx1712_cur)
  rx1712_restart:
    if_null rx1712_debug, debug_1200
    rx1712_cur."!cursor_debug"("NEXT", "statement_mod_loop:sym<for>")
  debug_1200:
  rx1712_fail:
    (rx1712_rep, rx1712_pos, $I10, $P10) = rx1712_cur."!mark_fail"(0)
    lt rx1712_pos, -1, rx1712_done
    eq rx1712_pos, -1, rx1712_fail
    jump $I10
  rx1712_done:
    rx1712_cur."!cursor_fail"()
    if_null rx1712_debug, debug_1201
    rx1712_cur."!cursor_debug"("FAIL", "statement_mod_loop:sym<for>")
  debug_1201:
    .return (rx1712_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_mod_loop:sym<for>"  :subid("165_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 949
    $P106 = self."!PREFIX__!subrule"("ws", "for")
    new $P107, "ResizablePMCArray"
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<fatarrow>"  :subid("166_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 953
    .local string rx1717_tgt
    .local int rx1717_pos
    .local int rx1717_off
    .local int rx1717_eos
    .local int rx1717_rep
    .local pmc rx1717_cur
    .local pmc rx1717_debug
    (rx1717_cur, rx1717_pos, rx1717_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1717_cur
    .local pmc match
    .lex "$/", match
    length rx1717_eos, rx1717_tgt
    gt rx1717_pos, rx1717_eos, rx1717_done
    set rx1717_off, 0
    lt rx1717_pos, 2, rx1717_start
    sub rx1717_off, rx1717_pos, 1
    substr rx1717_tgt, rx1717_tgt, rx1717_off
  rx1717_start:
    eq $I10, 1, rx1717_restart
    if_null rx1717_debug, debug_1202
    rx1717_cur."!cursor_debug"("START", "term:sym<fatarrow>")
  debug_1202:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1718_done
    goto rxscan1718_scan
  rxscan1718_loop:
    (rx1717_pos) = rx1717_cur."from"()
    inc rx1717_pos
    rx1717_cur."!cursor_from"(rx1717_pos)
    ge rx1717_pos, rx1717_eos, rxscan1718_done
  rxscan1718_scan:
    set_addr $I10, rxscan1718_loop
    rx1717_cur."!mark_push"(0, rx1717_pos, $I10)
  rxscan1718_done:
  # rx subrule "fatarrow" subtype=capture negate=
    rx1717_cur."!cursor_pos"(rx1717_pos)
    $P10 = rx1717_cur."fatarrow"()
    unless $P10, rx1717_fail
    rx1717_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("fatarrow")
    rx1717_pos = $P10."pos"()
  # rx pass
    rx1717_cur."!cursor_pass"(rx1717_pos, "term:sym<fatarrow>")
    if_null rx1717_debug, debug_1203
    rx1717_cur."!cursor_debug"("PASS", "term:sym<fatarrow>", " at pos=", rx1717_pos)
  debug_1203:
    .return (rx1717_cur)
  rx1717_restart:
    if_null rx1717_debug, debug_1204
    rx1717_cur."!cursor_debug"("NEXT", "term:sym<fatarrow>")
  debug_1204:
  rx1717_fail:
    (rx1717_rep, rx1717_pos, $I10, $P10) = rx1717_cur."!mark_fail"(0)
    lt rx1717_pos, -1, rx1717_done
    eq rx1717_pos, -1, rx1717_fail
    jump $I10
  rx1717_done:
    rx1717_cur."!cursor_fail"()
    if_null rx1717_debug, debug_1205
    rx1717_cur."!cursor_debug"("FAIL", "term:sym<fatarrow>")
  debug_1205:
    .return (rx1717_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<fatarrow>"  :subid("167_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 953
    $P104 = self."!PREFIX__!subrule"("fatarrow", "")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<colonpair>"  :subid("168_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 954
    .local string rx1721_tgt
    .local int rx1721_pos
    .local int rx1721_off
    .local int rx1721_eos
    .local int rx1721_rep
    .local pmc rx1721_cur
    .local pmc rx1721_debug
    (rx1721_cur, rx1721_pos, rx1721_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1721_cur
    .local pmc match
    .lex "$/", match
    length rx1721_eos, rx1721_tgt
    gt rx1721_pos, rx1721_eos, rx1721_done
    set rx1721_off, 0
    lt rx1721_pos, 2, rx1721_start
    sub rx1721_off, rx1721_pos, 1
    substr rx1721_tgt, rx1721_tgt, rx1721_off
  rx1721_start:
    eq $I10, 1, rx1721_restart
    if_null rx1721_debug, debug_1206
    rx1721_cur."!cursor_debug"("START", "term:sym<colonpair>")
  debug_1206:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1722_done
    goto rxscan1722_scan
  rxscan1722_loop:
    (rx1721_pos) = rx1721_cur."from"()
    inc rx1721_pos
    rx1721_cur."!cursor_from"(rx1721_pos)
    ge rx1721_pos, rx1721_eos, rxscan1722_done
  rxscan1722_scan:
    set_addr $I10, rxscan1722_loop
    rx1721_cur."!mark_push"(0, rx1721_pos, $I10)
  rxscan1722_done:
  # rx subrule "colonpair" subtype=capture negate=
    rx1721_cur."!cursor_pos"(rx1721_pos)
    $P10 = rx1721_cur."colonpair"()
    unless $P10, rx1721_fail
    rx1721_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("colonpair")
    rx1721_pos = $P10."pos"()
  # rx pass
    rx1721_cur."!cursor_pass"(rx1721_pos, "term:sym<colonpair>")
    if_null rx1721_debug, debug_1207
    rx1721_cur."!cursor_debug"("PASS", "term:sym<colonpair>", " at pos=", rx1721_pos)
  debug_1207:
    .return (rx1721_cur)
  rx1721_restart:
    if_null rx1721_debug, debug_1208
    rx1721_cur."!cursor_debug"("NEXT", "term:sym<colonpair>")
  debug_1208:
  rx1721_fail:
    (rx1721_rep, rx1721_pos, $I10, $P10) = rx1721_cur."!mark_fail"(0)
    lt rx1721_pos, -1, rx1721_done
    eq rx1721_pos, -1, rx1721_fail
    jump $I10
  rx1721_done:
    rx1721_cur."!cursor_fail"()
    if_null rx1721_debug, debug_1209
    rx1721_cur."!cursor_debug"("FAIL", "term:sym<colonpair>")
  debug_1209:
    .return (rx1721_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<colonpair>"  :subid("169_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 954
    $P104 = self."!PREFIX__!subrule"("colonpair", "")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<variable>"  :subid("170_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 955
    .local string rx1725_tgt
    .local int rx1725_pos
    .local int rx1725_off
    .local int rx1725_eos
    .local int rx1725_rep
    .local pmc rx1725_cur
    .local pmc rx1725_debug
    (rx1725_cur, rx1725_pos, rx1725_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1725_cur
    .local pmc match
    .lex "$/", match
    length rx1725_eos, rx1725_tgt
    gt rx1725_pos, rx1725_eos, rx1725_done
    set rx1725_off, 0
    lt rx1725_pos, 2, rx1725_start
    sub rx1725_off, rx1725_pos, 1
    substr rx1725_tgt, rx1725_tgt, rx1725_off
  rx1725_start:
    eq $I10, 1, rx1725_restart
    if_null rx1725_debug, debug_1210
    rx1725_cur."!cursor_debug"("START", "term:sym<variable>")
  debug_1210:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1726_done
    goto rxscan1726_scan
  rxscan1726_loop:
    (rx1725_pos) = rx1725_cur."from"()
    inc rx1725_pos
    rx1725_cur."!cursor_from"(rx1725_pos)
    ge rx1725_pos, rx1725_eos, rxscan1726_done
  rxscan1726_scan:
    set_addr $I10, rxscan1726_loop
    rx1725_cur."!mark_push"(0, rx1725_pos, $I10)
  rxscan1726_done:
  # rx subrule "variable" subtype=capture negate=
    rx1725_cur."!cursor_pos"(rx1725_pos)
    $P10 = rx1725_cur."variable"()
    unless $P10, rx1725_fail
    rx1725_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("variable")
    rx1725_pos = $P10."pos"()
  # rx pass
    rx1725_cur."!cursor_pass"(rx1725_pos, "term:sym<variable>")
    if_null rx1725_debug, debug_1211
    rx1725_cur."!cursor_debug"("PASS", "term:sym<variable>", " at pos=", rx1725_pos)
  debug_1211:
    .return (rx1725_cur)
  rx1725_restart:
    if_null rx1725_debug, debug_1212
    rx1725_cur."!cursor_debug"("NEXT", "term:sym<variable>")
  debug_1212:
  rx1725_fail:
    (rx1725_rep, rx1725_pos, $I10, $P10) = rx1725_cur."!mark_fail"(0)
    lt rx1725_pos, -1, rx1725_done
    eq rx1725_pos, -1, rx1725_fail
    jump $I10
  rx1725_done:
    rx1725_cur."!cursor_fail"()
    if_null rx1725_debug, debug_1213
    rx1725_cur."!cursor_debug"("FAIL", "term:sym<variable>")
  debug_1213:
    .return (rx1725_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<variable>"  :subid("171_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 955
    $P104 = self."!PREFIX__!subrule"("variable", "")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<package_declarator>"  :subid("172_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 956
    .local string rx1729_tgt
    .local int rx1729_pos
    .local int rx1729_off
    .local int rx1729_eos
    .local int rx1729_rep
    .local pmc rx1729_cur
    .local pmc rx1729_debug
    (rx1729_cur, rx1729_pos, rx1729_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1729_cur
    .local pmc match
    .lex "$/", match
    length rx1729_eos, rx1729_tgt
    gt rx1729_pos, rx1729_eos, rx1729_done
    set rx1729_off, 0
    lt rx1729_pos, 2, rx1729_start
    sub rx1729_off, rx1729_pos, 1
    substr rx1729_tgt, rx1729_tgt, rx1729_off
  rx1729_start:
    eq $I10, 1, rx1729_restart
    if_null rx1729_debug, debug_1214
    rx1729_cur."!cursor_debug"("START", "term:sym<package_declarator>")
  debug_1214:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1730_done
    goto rxscan1730_scan
  rxscan1730_loop:
    (rx1729_pos) = rx1729_cur."from"()
    inc rx1729_pos
    rx1729_cur."!cursor_from"(rx1729_pos)
    ge rx1729_pos, rx1729_eos, rxscan1730_done
  rxscan1730_scan:
    set_addr $I10, rxscan1730_loop
    rx1729_cur."!mark_push"(0, rx1729_pos, $I10)
  rxscan1730_done:
  # rx subrule "package_declarator" subtype=capture negate=
    rx1729_cur."!cursor_pos"(rx1729_pos)
    $P10 = rx1729_cur."package_declarator"()
    unless $P10, rx1729_fail
    rx1729_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("package_declarator")
    rx1729_pos = $P10."pos"()
  # rx pass
    rx1729_cur."!cursor_pass"(rx1729_pos, "term:sym<package_declarator>")
    if_null rx1729_debug, debug_1215
    rx1729_cur."!cursor_debug"("PASS", "term:sym<package_declarator>", " at pos=", rx1729_pos)
  debug_1215:
    .return (rx1729_cur)
  rx1729_restart:
    if_null rx1729_debug, debug_1216
    rx1729_cur."!cursor_debug"("NEXT", "term:sym<package_declarator>")
  debug_1216:
  rx1729_fail:
    (rx1729_rep, rx1729_pos, $I10, $P10) = rx1729_cur."!mark_fail"(0)
    lt rx1729_pos, -1, rx1729_done
    eq rx1729_pos, -1, rx1729_fail
    jump $I10
  rx1729_done:
    rx1729_cur."!cursor_fail"()
    if_null rx1729_debug, debug_1217
    rx1729_cur."!cursor_debug"("FAIL", "term:sym<package_declarator>")
  debug_1217:
    .return (rx1729_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<package_declarator>"  :subid("173_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 956
    $P104 = self."!PREFIX__!subrule"("package_declarator", "")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<scope_declarator>"  :subid("174_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 957
    .local string rx1733_tgt
    .local int rx1733_pos
    .local int rx1733_off
    .local int rx1733_eos
    .local int rx1733_rep
    .local pmc rx1733_cur
    .local pmc rx1733_debug
    (rx1733_cur, rx1733_pos, rx1733_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1733_cur
    .local pmc match
    .lex "$/", match
    length rx1733_eos, rx1733_tgt
    gt rx1733_pos, rx1733_eos, rx1733_done
    set rx1733_off, 0
    lt rx1733_pos, 2, rx1733_start
    sub rx1733_off, rx1733_pos, 1
    substr rx1733_tgt, rx1733_tgt, rx1733_off
  rx1733_start:
    eq $I10, 1, rx1733_restart
    if_null rx1733_debug, debug_1218
    rx1733_cur."!cursor_debug"("START", "term:sym<scope_declarator>")
  debug_1218:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1734_done
    goto rxscan1734_scan
  rxscan1734_loop:
    (rx1733_pos) = rx1733_cur."from"()
    inc rx1733_pos
    rx1733_cur."!cursor_from"(rx1733_pos)
    ge rx1733_pos, rx1733_eos, rxscan1734_done
  rxscan1734_scan:
    set_addr $I10, rxscan1734_loop
    rx1733_cur."!mark_push"(0, rx1733_pos, $I10)
  rxscan1734_done:
  # rx subrule "scope_declarator" subtype=capture negate=
    rx1733_cur."!cursor_pos"(rx1733_pos)
    $P10 = rx1733_cur."scope_declarator"()
    unless $P10, rx1733_fail
    rx1733_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("scope_declarator")
    rx1733_pos = $P10."pos"()
  # rx pass
    rx1733_cur."!cursor_pass"(rx1733_pos, "term:sym<scope_declarator>")
    if_null rx1733_debug, debug_1219
    rx1733_cur."!cursor_debug"("PASS", "term:sym<scope_declarator>", " at pos=", rx1733_pos)
  debug_1219:
    .return (rx1733_cur)
  rx1733_restart:
    if_null rx1733_debug, debug_1220
    rx1733_cur."!cursor_debug"("NEXT", "term:sym<scope_declarator>")
  debug_1220:
  rx1733_fail:
    (rx1733_rep, rx1733_pos, $I10, $P10) = rx1733_cur."!mark_fail"(0)
    lt rx1733_pos, -1, rx1733_done
    eq rx1733_pos, -1, rx1733_fail
    jump $I10
  rx1733_done:
    rx1733_cur."!cursor_fail"()
    if_null rx1733_debug, debug_1221
    rx1733_cur."!cursor_debug"("FAIL", "term:sym<scope_declarator>")
  debug_1221:
    .return (rx1733_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<scope_declarator>"  :subid("175_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 957
    $P104 = self."!PREFIX__!subrule"("scope_declarator", "")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<routine_declarator>"  :subid("176_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 958
    .local string rx1737_tgt
    .local int rx1737_pos
    .local int rx1737_off
    .local int rx1737_eos
    .local int rx1737_rep
    .local pmc rx1737_cur
    .local pmc rx1737_debug
    (rx1737_cur, rx1737_pos, rx1737_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1737_cur
    .local pmc match
    .lex "$/", match
    length rx1737_eos, rx1737_tgt
    gt rx1737_pos, rx1737_eos, rx1737_done
    set rx1737_off, 0
    lt rx1737_pos, 2, rx1737_start
    sub rx1737_off, rx1737_pos, 1
    substr rx1737_tgt, rx1737_tgt, rx1737_off
  rx1737_start:
    eq $I10, 1, rx1737_restart
    if_null rx1737_debug, debug_1222
    rx1737_cur."!cursor_debug"("START", "term:sym<routine_declarator>")
  debug_1222:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1738_done
    goto rxscan1738_scan
  rxscan1738_loop:
    (rx1737_pos) = rx1737_cur."from"()
    inc rx1737_pos
    rx1737_cur."!cursor_from"(rx1737_pos)
    ge rx1737_pos, rx1737_eos, rxscan1738_done
  rxscan1738_scan:
    set_addr $I10, rxscan1738_loop
    rx1737_cur."!mark_push"(0, rx1737_pos, $I10)
  rxscan1738_done:
  # rx subrule "routine_declarator" subtype=capture negate=
    rx1737_cur."!cursor_pos"(rx1737_pos)
    $P10 = rx1737_cur."routine_declarator"()
    unless $P10, rx1737_fail
    rx1737_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("routine_declarator")
    rx1737_pos = $P10."pos"()
  # rx pass
    rx1737_cur."!cursor_pass"(rx1737_pos, "term:sym<routine_declarator>")
    if_null rx1737_debug, debug_1223
    rx1737_cur."!cursor_debug"("PASS", "term:sym<routine_declarator>", " at pos=", rx1737_pos)
  debug_1223:
    .return (rx1737_cur)
  rx1737_restart:
    if_null rx1737_debug, debug_1224
    rx1737_cur."!cursor_debug"("NEXT", "term:sym<routine_declarator>")
  debug_1224:
  rx1737_fail:
    (rx1737_rep, rx1737_pos, $I10, $P10) = rx1737_cur."!mark_fail"(0)
    lt rx1737_pos, -1, rx1737_done
    eq rx1737_pos, -1, rx1737_fail
    jump $I10
  rx1737_done:
    rx1737_cur."!cursor_fail"()
    if_null rx1737_debug, debug_1225
    rx1737_cur."!cursor_debug"("FAIL", "term:sym<routine_declarator>")
  debug_1225:
    .return (rx1737_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<routine_declarator>"  :subid("177_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 958
    $P104 = self."!PREFIX__!subrule"("routine_declarator", "")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<multi_declarator>"  :subid("178_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 959
    .const 'Sub' $P1749 = "180_1329260321.776" 
    capture_lex $P1749
    .const 'Sub' $P1744 = "179_1329260321.776" 
    capture_lex $P1744
    .local string rx1741_tgt
    .local int rx1741_pos
    .local int rx1741_off
    .local int rx1741_eos
    .local int rx1741_rep
    .local pmc rx1741_cur
    .local pmc rx1741_debug
    (rx1741_cur, rx1741_pos, rx1741_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1741_cur
    .local pmc match
    .lex "$/", match
    length rx1741_eos, rx1741_tgt
    gt rx1741_pos, rx1741_eos, rx1741_done
    set rx1741_off, 0
    lt rx1741_pos, 2, rx1741_start
    sub rx1741_off, rx1741_pos, 1
    substr rx1741_tgt, rx1741_tgt, rx1741_off
  rx1741_start:
    eq $I10, 1, rx1741_restart
    if_null rx1741_debug, debug_1226
    rx1741_cur."!cursor_debug"("START", "term:sym<multi_declarator>")
  debug_1226:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1742_done
    goto rxscan1742_scan
  rxscan1742_loop:
    (rx1741_pos) = rx1741_cur."from"()
    inc rx1741_pos
    rx1741_cur."!cursor_from"(rx1741_pos)
    ge rx1741_pos, rx1741_eos, rxscan1742_done
  rxscan1742_scan:
    set_addr $I10, rxscan1742_loop
    rx1741_cur."!mark_push"(0, rx1741_pos, $I10)
  rxscan1742_done:
.annotate 'line', 960
  # rx subrule "before" subtype=zerowidth negate=
    rx1741_cur."!cursor_pos"(rx1741_pos)
    .const 'Sub' $P1744 = "179_1329260321.776" 
    capture_lex $P1744
    $P10 = rx1741_cur."before"($P1744)
    unless $P10, rx1741_fail
.annotate 'line', 961
  # rx subrule "before" subtype=zerowidth negate=1
    rx1741_cur."!cursor_pos"(rx1741_pos)
    .const 'Sub' $P1749 = "180_1329260321.776" 
    capture_lex $P1749
    $P10 = rx1741_cur."before"($P1749)
    if $P10, rx1741_fail
.annotate 'line', 962
  # rx subrule "multi_declarator" subtype=capture negate=
    rx1741_cur."!cursor_pos"(rx1741_pos)
    $P10 = rx1741_cur."multi_declarator"()
    unless $P10, rx1741_fail
    rx1741_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("multi_declarator")
    rx1741_pos = $P10."pos"()
.annotate 'line', 959
  # rx pass
    rx1741_cur."!cursor_pass"(rx1741_pos, "term:sym<multi_declarator>")
    if_null rx1741_debug, debug_1235
    rx1741_cur."!cursor_debug"("PASS", "term:sym<multi_declarator>", " at pos=", rx1741_pos)
  debug_1235:
    .return (rx1741_cur)
  rx1741_restart:
    if_null rx1741_debug, debug_1236
    rx1741_cur."!cursor_debug"("NEXT", "term:sym<multi_declarator>")
  debug_1236:
  rx1741_fail:
    (rx1741_rep, rx1741_pos, $I10, $P10) = rx1741_cur."!mark_fail"(0)
    lt rx1741_pos, -1, rx1741_done
    eq rx1741_pos, -1, rx1741_fail
    jump $I10
  rx1741_done:
    rx1741_cur."!cursor_fail"()
    if_null rx1741_debug, debug_1237
    rx1741_cur."!cursor_debug"("FAIL", "term:sym<multi_declarator>")
  debug_1237:
    .return (rx1741_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1743"  :anon :subid("179_1329260321.776") :method :outer("178_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 960
    .local string rx1745_tgt
    .local int rx1745_pos
    .local int rx1745_off
    .local int rx1745_eos
    .local int rx1745_rep
    .local pmc rx1745_cur
    .local pmc rx1745_debug
    (rx1745_cur, rx1745_pos, rx1745_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1745_cur
    .local pmc match
    .lex "$/", match
    length rx1745_eos, rx1745_tgt
    gt rx1745_pos, rx1745_eos, rx1745_done
    set rx1745_off, 0
    lt rx1745_pos, 2, rx1745_start
    sub rx1745_off, rx1745_pos, 1
    substr rx1745_tgt, rx1745_tgt, rx1745_off
  rx1745_start:
    eq $I10, 1, rx1745_restart
    if_null rx1745_debug, debug_1227
    rx1745_cur."!cursor_debug"("START", "")
  debug_1227:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1746_done
    goto rxscan1746_scan
  rxscan1746_loop:
    (rx1745_pos) = rx1745_cur."from"()
    inc rx1745_pos
    rx1745_cur."!cursor_from"(rx1745_pos)
    ge rx1745_pos, rx1745_eos, rxscan1746_done
  rxscan1746_scan:
    set_addr $I10, rxscan1746_loop
    rx1745_cur."!mark_push"(0, rx1745_pos, $I10)
  rxscan1746_done:
  alt1747_0:
    set_addr $I10, alt1747_1
    rx1745_cur."!mark_push"(0, rx1745_pos, $I10)
  # rx literal  "multi"
    add $I11, rx1745_pos, 5
    gt $I11, rx1745_eos, rx1745_fail
    sub $I11, rx1745_pos, rx1745_off
    substr $S10, rx1745_tgt, $I11, 5
    ne $S10, "multi", rx1745_fail
    add rx1745_pos, 5
    goto alt1747_end
  alt1747_1:
    set_addr $I10, alt1747_2
    rx1745_cur."!mark_push"(0, rx1745_pos, $I10)
  # rx literal  "proto"
    add $I11, rx1745_pos, 5
    gt $I11, rx1745_eos, rx1745_fail
    sub $I11, rx1745_pos, rx1745_off
    substr $S10, rx1745_tgt, $I11, 5
    ne $S10, "proto", rx1745_fail
    add rx1745_pos, 5
    goto alt1747_end
  alt1747_2:
  # rx literal  "only"
    add $I11, rx1745_pos, 4
    gt $I11, rx1745_eos, rx1745_fail
    sub $I11, rx1745_pos, rx1745_off
    substr $S10, rx1745_tgt, $I11, 4
    ne $S10, "only", rx1745_fail
    add rx1745_pos, 4
  alt1747_end:
  # rx pass
    rx1745_cur."!cursor_pass"(rx1745_pos, "")
    if_null rx1745_debug, debug_1228
    rx1745_cur."!cursor_debug"("PASS", "", " at pos=", rx1745_pos)
  debug_1228:
    .return (rx1745_cur)
  rx1745_restart:
    if_null rx1745_debug, debug_1229
    rx1745_cur."!cursor_debug"("NEXT", "")
  debug_1229:
  rx1745_fail:
    (rx1745_rep, rx1745_pos, $I10, $P10) = rx1745_cur."!mark_fail"(0)
    lt rx1745_pos, -1, rx1745_done
    eq rx1745_pos, -1, rx1745_fail
    jump $I10
  rx1745_done:
    rx1745_cur."!cursor_fail"()
    if_null rx1745_debug, debug_1230
    rx1745_cur."!cursor_debug"("FAIL", "")
  debug_1230:
    .return (rx1745_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1748"  :anon :subid("180_1329260321.776") :method :outer("178_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 961
    .local string rx1750_tgt
    .local int rx1750_pos
    .local int rx1750_off
    .local int rx1750_eos
    .local int rx1750_rep
    .local pmc rx1750_cur
    .local pmc rx1750_debug
    (rx1750_cur, rx1750_pos, rx1750_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1750_cur
    .local pmc match
    .lex "$/", match
    length rx1750_eos, rx1750_tgt
    gt rx1750_pos, rx1750_eos, rx1750_done
    set rx1750_off, 0
    lt rx1750_pos, 2, rx1750_start
    sub rx1750_off, rx1750_pos, 1
    substr rx1750_tgt, rx1750_tgt, rx1750_off
  rx1750_start:
    eq $I10, 1, rx1750_restart
    if_null rx1750_debug, debug_1231
    rx1750_cur."!cursor_debug"("START", "")
  debug_1231:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1751_done
    goto rxscan1751_scan
  rxscan1751_loop:
    (rx1750_pos) = rx1750_cur."from"()
    inc rx1750_pos
    rx1750_cur."!cursor_from"(rx1750_pos)
    ge rx1750_pos, rx1750_eos, rxscan1751_done
  rxscan1751_scan:
    set_addr $I10, rxscan1751_loop
    rx1750_cur."!mark_push"(0, rx1750_pos, $I10)
  rxscan1751_done:
  # rx literal  "proto"
    add $I11, rx1750_pos, 5
    gt $I11, rx1750_eos, rx1750_fail
    sub $I11, rx1750_pos, rx1750_off
    substr $S10, rx1750_tgt, $I11, 5
    ne $S10, "proto", rx1750_fail
    add rx1750_pos, 5
  # rx subrule "ws" subtype=method negate=
    rx1750_cur."!cursor_pos"(rx1750_pos)
    $P10 = rx1750_cur."ws"()
    unless $P10, rx1750_fail
    rx1750_pos = $P10."pos"()
  alt1752_0:
    set_addr $I10, alt1752_1
    rx1750_cur."!mark_push"(0, rx1750_pos, $I10)
  # rx literal  "regex"
    add $I11, rx1750_pos, 5
    gt $I11, rx1750_eos, rx1750_fail
    sub $I11, rx1750_pos, rx1750_off
    substr $S10, rx1750_tgt, $I11, 5
    ne $S10, "regex", rx1750_fail
    add rx1750_pos, 5
    goto alt1752_end
  alt1752_1:
    set_addr $I10, alt1752_2
    rx1750_cur."!mark_push"(0, rx1750_pos, $I10)
  # rx literal  "token"
    add $I11, rx1750_pos, 5
    gt $I11, rx1750_eos, rx1750_fail
    sub $I11, rx1750_pos, rx1750_off
    substr $S10, rx1750_tgt, $I11, 5
    ne $S10, "token", rx1750_fail
    add rx1750_pos, 5
    goto alt1752_end
  alt1752_2:
  # rx literal  "rule"
    add $I11, rx1750_pos, 4
    gt $I11, rx1750_eos, rx1750_fail
    sub $I11, rx1750_pos, rx1750_off
    substr $S10, rx1750_tgt, $I11, 4
    ne $S10, "rule", rx1750_fail
    add rx1750_pos, 4
  alt1752_end:
  # rx pass
    rx1750_cur."!cursor_pass"(rx1750_pos, "")
    if_null rx1750_debug, debug_1232
    rx1750_cur."!cursor_debug"("PASS", "", " at pos=", rx1750_pos)
  debug_1232:
    .return (rx1750_cur)
  rx1750_restart:
    if_null rx1750_debug, debug_1233
    rx1750_cur."!cursor_debug"("NEXT", "")
  debug_1233:
  rx1750_fail:
    (rx1750_rep, rx1750_pos, $I10, $P10) = rx1750_cur."!mark_fail"(0)
    lt rx1750_pos, -1, rx1750_done
    eq rx1750_pos, -1, rx1750_fail
    jump $I10
  rx1750_done:
    rx1750_cur."!cursor_fail"()
    if_null rx1750_debug, debug_1234
    rx1750_cur."!cursor_debug"("FAIL", "")
  debug_1234:
    .return (rx1750_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<multi_declarator>"  :subid("181_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 959
    new $P104, "ResizablePMCArray"
    push $P104, ""
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<regex_declarator>"  :subid("182_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 964
    .local string rx1755_tgt
    .local int rx1755_pos
    .local int rx1755_off
    .local int rx1755_eos
    .local int rx1755_rep
    .local pmc rx1755_cur
    .local pmc rx1755_debug
    (rx1755_cur, rx1755_pos, rx1755_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1755_cur
    .local pmc match
    .lex "$/", match
    length rx1755_eos, rx1755_tgt
    gt rx1755_pos, rx1755_eos, rx1755_done
    set rx1755_off, 0
    lt rx1755_pos, 2, rx1755_start
    sub rx1755_off, rx1755_pos, 1
    substr rx1755_tgt, rx1755_tgt, rx1755_off
  rx1755_start:
    eq $I10, 1, rx1755_restart
    if_null rx1755_debug, debug_1238
    rx1755_cur."!cursor_debug"("START", "term:sym<regex_declarator>")
  debug_1238:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1756_done
    goto rxscan1756_scan
  rxscan1756_loop:
    (rx1755_pos) = rx1755_cur."from"()
    inc rx1755_pos
    rx1755_cur."!cursor_from"(rx1755_pos)
    ge rx1755_pos, rx1755_eos, rxscan1756_done
  rxscan1756_scan:
    set_addr $I10, rxscan1756_loop
    rx1755_cur."!mark_push"(0, rx1755_pos, $I10)
  rxscan1756_done:
  # rx subrule "regex_declarator" subtype=capture negate=
    rx1755_cur."!cursor_pos"(rx1755_pos)
    $P10 = rx1755_cur."regex_declarator"()
    unless $P10, rx1755_fail
    rx1755_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("regex_declarator")
    rx1755_pos = $P10."pos"()
  # rx pass
    rx1755_cur."!cursor_pass"(rx1755_pos, "term:sym<regex_declarator>")
    if_null rx1755_debug, debug_1239
    rx1755_cur."!cursor_debug"("PASS", "term:sym<regex_declarator>", " at pos=", rx1755_pos)
  debug_1239:
    .return (rx1755_cur)
  rx1755_restart:
    if_null rx1755_debug, debug_1240
    rx1755_cur."!cursor_debug"("NEXT", "term:sym<regex_declarator>")
  debug_1240:
  rx1755_fail:
    (rx1755_rep, rx1755_pos, $I10, $P10) = rx1755_cur."!mark_fail"(0)
    lt rx1755_pos, -1, rx1755_done
    eq rx1755_pos, -1, rx1755_fail
    jump $I10
  rx1755_done:
    rx1755_cur."!cursor_fail"()
    if_null rx1755_debug, debug_1241
    rx1755_cur."!cursor_debug"("FAIL", "term:sym<regex_declarator>")
  debug_1241:
    .return (rx1755_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<regex_declarator>"  :subid("183_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 964
    $P104 = self."!PREFIX__!subrule"("regex_declarator", "")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<statement_prefix>"  :subid("184_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 965
    .local string rx1759_tgt
    .local int rx1759_pos
    .local int rx1759_off
    .local int rx1759_eos
    .local int rx1759_rep
    .local pmc rx1759_cur
    .local pmc rx1759_debug
    (rx1759_cur, rx1759_pos, rx1759_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1759_cur
    .local pmc match
    .lex "$/", match
    length rx1759_eos, rx1759_tgt
    gt rx1759_pos, rx1759_eos, rx1759_done
    set rx1759_off, 0
    lt rx1759_pos, 2, rx1759_start
    sub rx1759_off, rx1759_pos, 1
    substr rx1759_tgt, rx1759_tgt, rx1759_off
  rx1759_start:
    eq $I10, 1, rx1759_restart
    if_null rx1759_debug, debug_1242
    rx1759_cur."!cursor_debug"("START", "term:sym<statement_prefix>")
  debug_1242:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1760_done
    goto rxscan1760_scan
  rxscan1760_loop:
    (rx1759_pos) = rx1759_cur."from"()
    inc rx1759_pos
    rx1759_cur."!cursor_from"(rx1759_pos)
    ge rx1759_pos, rx1759_eos, rxscan1760_done
  rxscan1760_scan:
    set_addr $I10, rxscan1760_loop
    rx1759_cur."!mark_push"(0, rx1759_pos, $I10)
  rxscan1760_done:
  # rx subrule "statement_prefix" subtype=capture negate=
    rx1759_cur."!cursor_pos"(rx1759_pos)
    $P10 = rx1759_cur."statement_prefix"()
    unless $P10, rx1759_fail
    rx1759_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statement_prefix")
    rx1759_pos = $P10."pos"()
  # rx pass
    rx1759_cur."!cursor_pass"(rx1759_pos, "term:sym<statement_prefix>")
    if_null rx1759_debug, debug_1243
    rx1759_cur."!cursor_debug"("PASS", "term:sym<statement_prefix>", " at pos=", rx1759_pos)
  debug_1243:
    .return (rx1759_cur)
  rx1759_restart:
    if_null rx1759_debug, debug_1244
    rx1759_cur."!cursor_debug"("NEXT", "term:sym<statement_prefix>")
  debug_1244:
  rx1759_fail:
    (rx1759_rep, rx1759_pos, $I10, $P10) = rx1759_cur."!mark_fail"(0)
    lt rx1759_pos, -1, rx1759_done
    eq rx1759_pos, -1, rx1759_fail
    jump $I10
  rx1759_done:
    rx1759_cur."!cursor_fail"()
    if_null rx1759_debug, debug_1245
    rx1759_cur."!cursor_debug"("FAIL", "term:sym<statement_prefix>")
  debug_1245:
    .return (rx1759_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<statement_prefix>"  :subid("185_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 965
    $P104 = self."!PREFIX__!subrule"("statement_prefix", "")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<lambda>"  :subid("186_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 966
    .local string rx1763_tgt
    .local int rx1763_pos
    .local int rx1763_off
    .local int rx1763_eos
    .local int rx1763_rep
    .local pmc rx1763_cur
    .local pmc rx1763_debug
    (rx1763_cur, rx1763_pos, rx1763_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1763_cur
    .local pmc match
    .lex "$/", match
    length rx1763_eos, rx1763_tgt
    gt rx1763_pos, rx1763_eos, rx1763_done
    set rx1763_off, 0
    lt rx1763_pos, 2, rx1763_start
    sub rx1763_off, rx1763_pos, 1
    substr rx1763_tgt, rx1763_tgt, rx1763_off
  rx1763_start:
    eq $I10, 1, rx1763_restart
    if_null rx1763_debug, debug_1246
    rx1763_cur."!cursor_debug"("START", "term:sym<lambda>")
  debug_1246:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1764_done
    goto rxscan1764_scan
  rxscan1764_loop:
    (rx1763_pos) = rx1763_cur."from"()
    inc rx1763_pos
    rx1763_cur."!cursor_from"(rx1763_pos)
    ge rx1763_pos, rx1763_eos, rxscan1764_done
  rxscan1764_scan:
    set_addr $I10, rxscan1764_loop
    rx1763_cur."!mark_push"(0, rx1763_pos, $I10)
  rxscan1764_done:
  # rx subrule "lambda" subtype=zerowidth negate=
    rx1763_cur."!cursor_pos"(rx1763_pos)
    $P10 = rx1763_cur."lambda"()
    unless $P10, rx1763_fail
  # rx subrule "pblock" subtype=capture negate=
    rx1763_cur."!cursor_pos"(rx1763_pos)
    $P10 = rx1763_cur."pblock"()
    unless $P10, rx1763_fail
    rx1763_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("pblock")
    rx1763_pos = $P10."pos"()
  # rx pass
    rx1763_cur."!cursor_pass"(rx1763_pos, "term:sym<lambda>")
    if_null rx1763_debug, debug_1247
    rx1763_cur."!cursor_debug"("PASS", "term:sym<lambda>", " at pos=", rx1763_pos)
  debug_1247:
    .return (rx1763_cur)
  rx1763_restart:
    if_null rx1763_debug, debug_1248
    rx1763_cur."!cursor_debug"("NEXT", "term:sym<lambda>")
  debug_1248:
  rx1763_fail:
    (rx1763_rep, rx1763_pos, $I10, $P10) = rx1763_cur."!mark_fail"(0)
    lt rx1763_pos, -1, rx1763_done
    eq rx1763_pos, -1, rx1763_fail
    jump $I10
  rx1763_done:
    rx1763_cur."!cursor_fail"()
    if_null rx1763_debug, debug_1249
    rx1763_cur."!cursor_debug"("FAIL", "term:sym<lambda>")
  debug_1249:
    .return (rx1763_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<lambda>"  :subid("187_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 966
    new $P104, "ResizablePMCArray"
    push $P104, ""
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "fatarrow"  :subid("188_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 968
    .local string rx1767_tgt
    .local int rx1767_pos
    .local int rx1767_off
    .local int rx1767_eos
    .local int rx1767_rep
    .local pmc rx1767_cur
    .local pmc rx1767_debug
    (rx1767_cur, rx1767_pos, rx1767_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1767_cur
    .local pmc match
    .lex "$/", match
    length rx1767_eos, rx1767_tgt
    gt rx1767_pos, rx1767_eos, rx1767_done
    set rx1767_off, 0
    lt rx1767_pos, 2, rx1767_start
    sub rx1767_off, rx1767_pos, 1
    substr rx1767_tgt, rx1767_tgt, rx1767_off
  rx1767_start:
    eq $I10, 1, rx1767_restart
    if_null rx1767_debug, debug_1250
    rx1767_cur."!cursor_debug"("START", "fatarrow")
  debug_1250:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1768_done
    goto rxscan1768_scan
  rxscan1768_loop:
    (rx1767_pos) = rx1767_cur."from"()
    inc rx1767_pos
    rx1767_cur."!cursor_from"(rx1767_pos)
    ge rx1767_pos, rx1767_eos, rxscan1768_done
  rxscan1768_scan:
    set_addr $I10, rxscan1768_loop
    rx1767_cur."!mark_push"(0, rx1767_pos, $I10)
  rxscan1768_done:
.annotate 'line', 969
  # rx subrule "identifier" subtype=capture negate=
    rx1767_cur."!cursor_pos"(rx1767_pos)
    $P10 = rx1767_cur."identifier"()
    unless $P10, rx1767_fail
    rx1767_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("key")
    rx1767_pos = $P10."pos"()
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx1767_pos, rx1767_off
    set rx1767_rep, 0
    sub $I12, rx1767_eos, rx1767_pos
  rxenumcharlistq1769_loop:
    le $I12, 0, rxenumcharlistq1769_done
    substr $S10, rx1767_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1769_done
    inc rx1767_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1769_loop
  rxenumcharlistq1769_done:
    add rx1767_pos, rx1767_pos, rx1767_rep
  # rx literal  "=>"
    add $I11, rx1767_pos, 2
    gt $I11, rx1767_eos, rx1767_fail
    sub $I11, rx1767_pos, rx1767_off
    substr $S10, rx1767_tgt, $I11, 2
    ne $S10, "=>", rx1767_fail
    add rx1767_pos, 2
  # rx subrule "ws" subtype=method negate=
    rx1767_cur."!cursor_pos"(rx1767_pos)
    $P10 = rx1767_cur."ws"()
    unless $P10, rx1767_fail
    rx1767_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx1767_cur."!cursor_pos"(rx1767_pos)
    $P10 = rx1767_cur."EXPR"("i=")
    unless $P10, rx1767_fail
    rx1767_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("val")
    rx1767_pos = $P10."pos"()
.annotate 'line', 968
  # rx pass
    rx1767_cur."!cursor_pass"(rx1767_pos, "fatarrow")
    if_null rx1767_debug, debug_1251
    rx1767_cur."!cursor_debug"("PASS", "fatarrow", " at pos=", rx1767_pos)
  debug_1251:
    .return (rx1767_cur)
  rx1767_restart:
    if_null rx1767_debug, debug_1252
    rx1767_cur."!cursor_debug"("NEXT", "fatarrow")
  debug_1252:
  rx1767_fail:
    (rx1767_rep, rx1767_pos, $I10, $P10) = rx1767_cur."!mark_fail"(0)
    lt rx1767_pos, -1, rx1767_done
    eq rx1767_pos, -1, rx1767_fail
    jump $I10
  rx1767_done:
    rx1767_cur."!cursor_fail"()
    if_null rx1767_debug, debug_1253
    rx1767_cur."!cursor_debug"("FAIL", "fatarrow")
  debug_1253:
    .return (rx1767_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__fatarrow"  :subid("189_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 968
    $P104 = self."!PREFIX__!subrule"("identifier", "")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "colonpair"  :subid("190_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 972
    .local string rx1772_tgt
    .local int rx1772_pos
    .local int rx1772_off
    .local int rx1772_eos
    .local int rx1772_rep
    .local pmc rx1772_cur
    .local pmc rx1772_debug
    (rx1772_cur, rx1772_pos, rx1772_tgt, $I10) = self."!cursor_start"()
    rx1772_cur."!cursor_caparray"("circumfix")
    .lex unicode:"$\x{a2}", rx1772_cur
    .local pmc match
    .lex "$/", match
    length rx1772_eos, rx1772_tgt
    gt rx1772_pos, rx1772_eos, rx1772_done
    set rx1772_off, 0
    lt rx1772_pos, 2, rx1772_start
    sub rx1772_off, rx1772_pos, 1
    substr rx1772_tgt, rx1772_tgt, rx1772_off
  rx1772_start:
    eq $I10, 1, rx1772_restart
    if_null rx1772_debug, debug_1254
    rx1772_cur."!cursor_debug"("START", "colonpair")
  debug_1254:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1773_done
    goto rxscan1773_scan
  rxscan1773_loop:
    (rx1772_pos) = rx1772_cur."from"()
    inc rx1772_pos
    rx1772_cur."!cursor_from"(rx1772_pos)
    ge rx1772_pos, rx1772_eos, rxscan1773_done
  rxscan1773_scan:
    set_addr $I10, rxscan1773_loop
    rx1772_cur."!mark_push"(0, rx1772_pos, $I10)
  rxscan1773_done:
.annotate 'line', 973
  # rx literal  ":"
    add $I11, rx1772_pos, 1
    gt $I11, rx1772_eos, rx1772_fail
    sub $I11, rx1772_pos, rx1772_off
    ord $I11, rx1772_tgt, $I11
    ne $I11, 58, rx1772_fail
    add rx1772_pos, 1
  alt1774_0:
.annotate 'line', 974
    set_addr $I10, alt1774_1
    rx1772_cur."!mark_push"(0, rx1772_pos, $I10)
.annotate 'line', 975
  # rx subcapture "not"
    set_addr $I10, rxcap_1775_fail
    rx1772_cur."!mark_push"(0, rx1772_pos, $I10)
  # rx literal  "!"
    add $I11, rx1772_pos, 1
    gt $I11, rx1772_eos, rx1772_fail
    sub $I11, rx1772_pos, rx1772_off
    ord $I11, rx1772_tgt, $I11
    ne $I11, 33, rx1772_fail
    add rx1772_pos, 1
    set_addr $I10, rxcap_1775_fail
    ($I12, $I11) = rx1772_cur."!mark_peek"($I10)
    rx1772_cur."!cursor_pos"($I11)
    ($P10) = rx1772_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1772_pos, "")
    rx1772_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("not")
    goto rxcap_1775_done
  rxcap_1775_fail:
    goto rx1772_fail
  rxcap_1775_done:
  # rx subrule "identifier" subtype=capture negate=
    rx1772_cur."!cursor_pos"(rx1772_pos)
    $P10 = rx1772_cur."identifier"()
    unless $P10, rx1772_fail
    rx1772_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("identifier")
    rx1772_pos = $P10."pos"()
    goto alt1774_end
  alt1774_1:
    set_addr $I10, alt1774_2
    rx1772_cur."!mark_push"(0, rx1772_pos, $I10)
.annotate 'line', 976
  # rx subrule "identifier" subtype=capture negate=
    rx1772_cur."!cursor_pos"(rx1772_pos)
    $P10 = rx1772_cur."identifier"()
    unless $P10, rx1772_fail
    rx1772_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("identifier")
    rx1772_pos = $P10."pos"()
  # rx rxquantr1776 ** 0..1
    set_addr $I10, rxquantr1776_done
    rx1772_cur."!mark_push"(0, rx1772_pos, $I10)
  rxquantr1776_loop:
  # rx subrule "circumfix" subtype=capture negate=
    rx1772_cur."!cursor_pos"(rx1772_pos)
    $P10 = rx1772_cur."circumfix"()
    unless $P10, rx1772_fail
    goto rxsubrule1777_pass
  rxsubrule1777_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1772_fail
  rxsubrule1777_pass:
    set_addr $I10, rxsubrule1777_back
    rx1772_cur."!mark_push"(0, rx1772_pos, $I10, $P10)
    $P10."!cursor_names"("circumfix")
    rx1772_pos = $P10."pos"()
    set_addr $I10, rxquantr1776_done
    (rx1772_rep) = rx1772_cur."!mark_commit"($I10)
  rxquantr1776_done:
    goto alt1774_end
  alt1774_2:
.annotate 'line', 977
  # rx subrule "circumfix" subtype=capture negate=
    rx1772_cur."!cursor_pos"(rx1772_pos)
    $P10 = rx1772_cur."circumfix"()
    unless $P10, rx1772_fail
    rx1772_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("circumfix")
    rx1772_pos = $P10."pos"()
  alt1774_end:
.annotate 'line', 972
  # rx pass
    rx1772_cur."!cursor_pass"(rx1772_pos, "colonpair")
    if_null rx1772_debug, debug_1255
    rx1772_cur."!cursor_debug"("PASS", "colonpair", " at pos=", rx1772_pos)
  debug_1255:
    .return (rx1772_cur)
  rx1772_restart:
    if_null rx1772_debug, debug_1256
    rx1772_cur."!cursor_debug"("NEXT", "colonpair")
  debug_1256:
  rx1772_fail:
    (rx1772_rep, rx1772_pos, $I10, $P10) = rx1772_cur."!mark_fail"(0)
    lt rx1772_pos, -1, rx1772_done
    eq rx1772_pos, -1, rx1772_fail
    jump $I10
  rx1772_done:
    rx1772_cur."!cursor_fail"()
    if_null rx1772_debug, debug_1257
    rx1772_cur."!cursor_debug"("FAIL", "colonpair")
  debug_1257:
    .return (rx1772_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__colonpair"  :subid("191_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 972
    $P104 = self."!PREFIX__!subrule"("circumfix", ":")
    $P105 = self."!PREFIX__!subrule"("identifier", ":")
    $P106 = self."!PREFIX__!subrule"("identifier", ":!")
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "variable"  :subid("192_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 981
    .local string rx1780_tgt
    .local int rx1780_pos
    .local int rx1780_off
    .local int rx1780_eos
    .local int rx1780_rep
    .local pmc rx1780_cur
    .local pmc rx1780_debug
    (rx1780_cur, rx1780_pos, rx1780_tgt, $I10) = self."!cursor_start"()
    rx1780_cur."!cursor_caparray"("twigil")
    .lex unicode:"$\x{a2}", rx1780_cur
    .local pmc match
    .lex "$/", match
    length rx1780_eos, rx1780_tgt
    gt rx1780_pos, rx1780_eos, rx1780_done
    set rx1780_off, 0
    lt rx1780_pos, 2, rx1780_start
    sub rx1780_off, rx1780_pos, 1
    substr rx1780_tgt, rx1780_tgt, rx1780_off
  rx1780_start:
    eq $I10, 1, rx1780_restart
    if_null rx1780_debug, debug_1258
    rx1780_cur."!cursor_debug"("START", "variable")
  debug_1258:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1781_done
    goto rxscan1781_scan
  rxscan1781_loop:
    (rx1780_pos) = rx1780_cur."from"()
    inc rx1780_pos
    rx1780_cur."!cursor_from"(rx1780_pos)
    ge rx1780_pos, rx1780_eos, rxscan1781_done
  rxscan1781_scan:
    set_addr $I10, rxscan1781_loop
    rx1780_cur."!mark_push"(0, rx1780_pos, $I10)
  rxscan1781_done:
  alt1782_0:
    set_addr $I10, alt1782_1
    rx1780_cur."!mark_push"(0, rx1780_pos, $I10)
.annotate 'line', 982
  # rx subrule "sigil" subtype=capture negate=
    rx1780_cur."!cursor_pos"(rx1780_pos)
    $P10 = rx1780_cur."sigil"()
    unless $P10, rx1780_fail
    rx1780_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sigil")
    rx1780_pos = $P10."pos"()
  # rx rxquantr1783 ** 0..1
    set_addr $I10, rxquantr1783_done
    rx1780_cur."!mark_push"(0, rx1780_pos, $I10)
  rxquantr1783_loop:
  # rx subrule "twigil" subtype=capture negate=
    rx1780_cur."!cursor_pos"(rx1780_pos)
    $P10 = rx1780_cur."twigil"()
    unless $P10, rx1780_fail
    goto rxsubrule1784_pass
  rxsubrule1784_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1780_fail
  rxsubrule1784_pass:
    set_addr $I10, rxsubrule1784_back
    rx1780_cur."!mark_push"(0, rx1780_pos, $I10, $P10)
    $P10."!cursor_names"("twigil")
    rx1780_pos = $P10."pos"()
    set_addr $I10, rxquantr1783_done
    (rx1780_rep) = rx1780_cur."!mark_commit"($I10)
  rxquantr1783_done:
  # rx subrule "name" subtype=capture negate=
    rx1780_cur."!cursor_pos"(rx1780_pos)
    $P10 = rx1780_cur."name"()
    unless $P10, rx1780_fail
    rx1780_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("desigilname")
    rx1780_pos = $P10."pos"()
    goto alt1782_end
  alt1782_1:
    set_addr $I10, alt1782_2
    rx1780_cur."!mark_push"(0, rx1780_pos, $I10)
.annotate 'line', 983
  # rx subrule "sigil" subtype=capture negate=
    rx1780_cur."!cursor_pos"(rx1780_pos)
    $P10 = rx1780_cur."sigil"()
    unless $P10, rx1780_fail
    rx1780_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sigil")
    rx1780_pos = $P10."pos"()
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1780_pos, rx1780_off
    substr $S10, rx1780_tgt, $I10, 1
    index $I11, "<[", $S10
    lt $I11, 0, rx1780_fail
  # rx subrule "postcircumfix" subtype=capture negate=
    rx1780_cur."!cursor_pos"(rx1780_pos)
    $P10 = rx1780_cur."postcircumfix"()
    unless $P10, rx1780_fail
    rx1780_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("postcircumfix")
    rx1780_pos = $P10."pos"()
    goto alt1782_end
  alt1782_2:
.annotate 'line', 984
  # rx subcapture "sigil"
    set_addr $I10, rxcap_1785_fail
    rx1780_cur."!mark_push"(0, rx1780_pos, $I10)
  # rx literal  "$"
    add $I11, rx1780_pos, 1
    gt $I11, rx1780_eos, rx1780_fail
    sub $I11, rx1780_pos, rx1780_off
    ord $I11, rx1780_tgt, $I11
    ne $I11, 36, rx1780_fail
    add rx1780_pos, 1
    set_addr $I10, rxcap_1785_fail
    ($I12, $I11) = rx1780_cur."!mark_peek"($I10)
    rx1780_cur."!cursor_pos"($I11)
    ($P10) = rx1780_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1780_pos, "")
    rx1780_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sigil")
    goto rxcap_1785_done
  rxcap_1785_fail:
    goto rx1780_fail
  rxcap_1785_done:
  # rx subcapture "desigilname"
    set_addr $I10, rxcap_1786_fail
    rx1780_cur."!mark_push"(0, rx1780_pos, $I10)
  # rx enumcharlist negate=0 
    ge rx1780_pos, rx1780_eos, rx1780_fail
    sub $I10, rx1780_pos, rx1780_off
    substr $S10, rx1780_tgt, $I10, 1
    index $I11, "/_!", $S10
    lt $I11, 0, rx1780_fail
    inc rx1780_pos
    set_addr $I10, rxcap_1786_fail
    ($I12, $I11) = rx1780_cur."!mark_peek"($I10)
    rx1780_cur."!cursor_pos"($I11)
    ($P10) = rx1780_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1780_pos, "")
    rx1780_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("desigilname")
    goto rxcap_1786_done
  rxcap_1786_fail:
    goto rx1780_fail
  rxcap_1786_done:
  alt1782_end:
.annotate 'line', 981
  # rx pass
    rx1780_cur."!cursor_pass"(rx1780_pos, "variable")
    if_null rx1780_debug, debug_1259
    rx1780_cur."!cursor_debug"("PASS", "variable", " at pos=", rx1780_pos)
  debug_1259:
    .return (rx1780_cur)
  rx1780_restart:
    if_null rx1780_debug, debug_1260
    rx1780_cur."!cursor_debug"("NEXT", "variable")
  debug_1260:
  rx1780_fail:
    (rx1780_rep, rx1780_pos, $I10, $P10) = rx1780_cur."!mark_fail"(0)
    lt rx1780_pos, -1, rx1780_done
    eq rx1780_pos, -1, rx1780_fail
    jump $I10
  rx1780_done:
    rx1780_cur."!cursor_fail"()
    if_null rx1780_debug, debug_1261
    rx1780_cur."!cursor_debug"("FAIL", "variable")
  debug_1261:
    .return (rx1780_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__variable"  :subid("193_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 981
    $P104 = self."!PREFIX__!subrule"("sigil", "")
    $P105 = self."!PREFIX__!subrule"("sigil", "")
    new $P106, "ResizablePMCArray"
    push $P106, "/"
    push $P106, "_"
    push $P106, "!"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "sigil"  :subid("194_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 987
    .local string rx1789_tgt
    .local int rx1789_pos
    .local int rx1789_off
    .local int rx1789_eos
    .local int rx1789_rep
    .local pmc rx1789_cur
    .local pmc rx1789_debug
    (rx1789_cur, rx1789_pos, rx1789_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1789_cur
    .local pmc match
    .lex "$/", match
    length rx1789_eos, rx1789_tgt
    gt rx1789_pos, rx1789_eos, rx1789_done
    set rx1789_off, 0
    lt rx1789_pos, 2, rx1789_start
    sub rx1789_off, rx1789_pos, 1
    substr rx1789_tgt, rx1789_tgt, rx1789_off
  rx1789_start:
    eq $I10, 1, rx1789_restart
    if_null rx1789_debug, debug_1262
    rx1789_cur."!cursor_debug"("START", "sigil")
  debug_1262:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1790_done
    goto rxscan1790_scan
  rxscan1790_loop:
    (rx1789_pos) = rx1789_cur."from"()
    inc rx1789_pos
    rx1789_cur."!cursor_from"(rx1789_pos)
    ge rx1789_pos, rx1789_eos, rxscan1790_done
  rxscan1790_scan:
    set_addr $I10, rxscan1790_loop
    rx1789_cur."!mark_push"(0, rx1789_pos, $I10)
  rxscan1790_done:
  # rx enumcharlist negate=0 
    ge rx1789_pos, rx1789_eos, rx1789_fail
    sub $I10, rx1789_pos, rx1789_off
    substr $S10, rx1789_tgt, $I10, 1
    index $I11, "$@%&", $S10
    lt $I11, 0, rx1789_fail
    inc rx1789_pos
  # rx pass
    rx1789_cur."!cursor_pass"(rx1789_pos, "sigil")
    if_null rx1789_debug, debug_1263
    rx1789_cur."!cursor_debug"("PASS", "sigil", " at pos=", rx1789_pos)
  debug_1263:
    .return (rx1789_cur)
  rx1789_restart:
    if_null rx1789_debug, debug_1264
    rx1789_cur."!cursor_debug"("NEXT", "sigil")
  debug_1264:
  rx1789_fail:
    (rx1789_rep, rx1789_pos, $I10, $P10) = rx1789_cur."!mark_fail"(0)
    lt rx1789_pos, -1, rx1789_done
    eq rx1789_pos, -1, rx1789_fail
    jump $I10
  rx1789_done:
    rx1789_cur."!cursor_fail"()
    if_null rx1789_debug, debug_1265
    rx1789_cur."!cursor_debug"("FAIL", "sigil")
  debug_1265:
    .return (rx1789_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__sigil"  :subid("195_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 987
    new $P104, "ResizablePMCArray"
    push $P104, "$"
    push $P104, "@"
    push $P104, "%"
    push $P104, "&"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "twigil"  :subid("196_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 989
    .local string rx1793_tgt
    .local int rx1793_pos
    .local int rx1793_off
    .local int rx1793_eos
    .local int rx1793_rep
    .local pmc rx1793_cur
    .local pmc rx1793_debug
    (rx1793_cur, rx1793_pos, rx1793_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1793_cur
    .local pmc match
    .lex "$/", match
    length rx1793_eos, rx1793_tgt
    gt rx1793_pos, rx1793_eos, rx1793_done
    set rx1793_off, 0
    lt rx1793_pos, 2, rx1793_start
    sub rx1793_off, rx1793_pos, 1
    substr rx1793_tgt, rx1793_tgt, rx1793_off
  rx1793_start:
    eq $I10, 1, rx1793_restart
    if_null rx1793_debug, debug_1266
    rx1793_cur."!cursor_debug"("START", "twigil")
  debug_1266:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1794_done
    goto rxscan1794_scan
  rxscan1794_loop:
    (rx1793_pos) = rx1793_cur."from"()
    inc rx1793_pos
    rx1793_cur."!cursor_from"(rx1793_pos)
    ge rx1793_pos, rx1793_eos, rxscan1794_done
  rxscan1794_scan:
    set_addr $I10, rxscan1794_loop
    rx1793_cur."!mark_push"(0, rx1793_pos, $I10)
  rxscan1794_done:
  # rx enumcharlist negate=0 
    ge rx1793_pos, rx1793_eos, rx1793_fail
    sub $I10, rx1793_pos, rx1793_off
    substr $S10, rx1793_tgt, $I10, 1
    index $I11, "*!?", $S10
    lt $I11, 0, rx1793_fail
    inc rx1793_pos
  # rx pass
    rx1793_cur."!cursor_pass"(rx1793_pos, "twigil")
    if_null rx1793_debug, debug_1267
    rx1793_cur."!cursor_debug"("PASS", "twigil", " at pos=", rx1793_pos)
  debug_1267:
    .return (rx1793_cur)
  rx1793_restart:
    if_null rx1793_debug, debug_1268
    rx1793_cur."!cursor_debug"("NEXT", "twigil")
  debug_1268:
  rx1793_fail:
    (rx1793_rep, rx1793_pos, $I10, $P10) = rx1793_cur."!mark_fail"(0)
    lt rx1793_pos, -1, rx1793_done
    eq rx1793_pos, -1, rx1793_fail
    jump $I10
  rx1793_done:
    rx1793_cur."!cursor_fail"()
    if_null rx1793_debug, debug_1269
    rx1793_cur."!cursor_debug"("FAIL", "twigil")
  debug_1269:
    .return (rx1793_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__twigil"  :subid("197_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 989
    new $P104, "ResizablePMCArray"
    push $P104, "*"
    push $P104, "!"
    push $P104, "?"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator"  :subid("198_1329260321.776")
    .param pmc param_1797
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 991
    .lex "self", param_1797
    $P104 = param_1797."!protoregex"("package_declarator")
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_declarator"  :subid("199_1329260321.776")
    .param pmc param_1799
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 991
    .lex "self", param_1799
    $P105 = param_1799."!PREFIX__!protoregex"("package_declarator")
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<module>"  :subid("200_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 993
    new $P104, "Undef"
    set $P1801, $P104
    .lex "$*OUTERPACKAGE", $P1801
.annotate 'line', 994
    new $P105, "Undef"
    set $P1802, $P105
    .lex "$*PKGDECL", $P1802
.annotate 'line', 992
    .local string rx1803_tgt
    .local int rx1803_pos
    .local int rx1803_off
    .local int rx1803_eos
    .local int rx1803_rep
    .local pmc rx1803_cur
    .local pmc rx1803_debug
    (rx1803_cur, rx1803_pos, rx1803_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1803_cur
    .local pmc match
    .lex "$/", match
    length rx1803_eos, rx1803_tgt
    gt rx1803_pos, rx1803_eos, rx1803_done
    set rx1803_off, 0
    lt rx1803_pos, 2, rx1803_start
    sub rx1803_off, rx1803_pos, 1
    substr rx1803_tgt, rx1803_tgt, rx1803_off
  rx1803_start:
    eq $I10, 1, rx1803_restart
    if_null rx1803_debug, debug_1270
    rx1803_cur."!cursor_debug"("START", "package_declarator:sym<module>")
  debug_1270:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1804_done
    goto rxscan1804_scan
  rxscan1804_loop:
    (rx1803_pos) = rx1803_cur."from"()
    inc rx1803_pos
    rx1803_cur."!cursor_from"(rx1803_pos)
    ge rx1803_pos, rx1803_eos, rxscan1804_done
  rxscan1804_scan:
    set_addr $I10, rxscan1804_loop
    rx1803_cur."!mark_push"(0, rx1803_pos, $I10)
  rxscan1804_done:
.annotate 'line', 993
    rx1803_cur."!cursor_pos"(rx1803_pos)
    find_dynamic_lex $P108, "$*PACKAGE"
    unless_null $P108, vivify_1271
    get_hll_global $P106, "GLOBAL"
    get_who $P107, $P106
    set $P108, $P107["$PACKAGE"]
    unless_null $P108, vivify_1272
    die "Contextual $*PACKAGE not found"
  vivify_1272:
  vivify_1271:
    set $P1801, $P108
.annotate 'line', 994
    rx1803_cur."!cursor_pos"(rx1803_pos)
    new $P109, "String"
    assign $P109, "module"
    set $P1802, $P109
.annotate 'line', 995
  # rx subcapture "sym"
    set_addr $I10, rxcap_1805_fail
    rx1803_cur."!mark_push"(0, rx1803_pos, $I10)
  # rx literal  "module"
    add $I11, rx1803_pos, 6
    gt $I11, rx1803_eos, rx1803_fail
    sub $I11, rx1803_pos, rx1803_off
    substr $S10, rx1803_tgt, $I11, 6
    ne $S10, "module", rx1803_fail
    add rx1803_pos, 6
    set_addr $I10, rxcap_1805_fail
    ($I12, $I11) = rx1803_cur."!mark_peek"($I10)
    rx1803_cur."!cursor_pos"($I11)
    ($P10) = rx1803_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1803_pos, "")
    rx1803_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1805_done
  rxcap_1805_fail:
    goto rx1803_fail
  rxcap_1805_done:
  # rx subrule "package_def" subtype=capture negate=
    rx1803_cur."!cursor_pos"(rx1803_pos)
    $P10 = rx1803_cur."package_def"()
    unless $P10, rx1803_fail
    rx1803_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("package_def")
    rx1803_pos = $P10."pos"()
.annotate 'line', 992
  # rx pass
    rx1803_cur."!cursor_pass"(rx1803_pos, "package_declarator:sym<module>")
    if_null rx1803_debug, debug_1273
    rx1803_cur."!cursor_debug"("PASS", "package_declarator:sym<module>", " at pos=", rx1803_pos)
  debug_1273:
    .return (rx1803_cur)
  rx1803_restart:
    if_null rx1803_debug, debug_1274
    rx1803_cur."!cursor_debug"("NEXT", "package_declarator:sym<module>")
  debug_1274:
  rx1803_fail:
    (rx1803_rep, rx1803_pos, $I10, $P10) = rx1803_cur."!mark_fail"(0)
    lt rx1803_pos, -1, rx1803_done
    eq rx1803_pos, -1, rx1803_fail
    jump $I10
  rx1803_done:
    rx1803_cur."!cursor_fail"()
    if_null rx1803_debug, debug_1275
    rx1803_cur."!cursor_debug"("FAIL", "package_declarator:sym<module>")
  debug_1275:
    .return (rx1803_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_declarator:sym<module>"  :subid("201_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 992
    $P110 = self."!PREFIX__!subrule"("package_def", "module")
    new $P111, "ResizablePMCArray"
    push $P111, $P110
    .return ($P111)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<knowhow>"  :subid("202_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 998
    new $P104, "Undef"
    set $P1808, $P104
    .lex "$*OUTERPACKAGE", $P1808
.annotate 'line', 999
    new $P105, "Undef"
    set $P1809, $P105
    .lex "$*PKGDECL", $P1809
.annotate 'line', 997
    .local string rx1810_tgt
    .local int rx1810_pos
    .local int rx1810_off
    .local int rx1810_eos
    .local int rx1810_rep
    .local pmc rx1810_cur
    .local pmc rx1810_debug
    (rx1810_cur, rx1810_pos, rx1810_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1810_cur
    .local pmc match
    .lex "$/", match
    length rx1810_eos, rx1810_tgt
    gt rx1810_pos, rx1810_eos, rx1810_done
    set rx1810_off, 0
    lt rx1810_pos, 2, rx1810_start
    sub rx1810_off, rx1810_pos, 1
    substr rx1810_tgt, rx1810_tgt, rx1810_off
  rx1810_start:
    eq $I10, 1, rx1810_restart
    if_null rx1810_debug, debug_1276
    rx1810_cur."!cursor_debug"("START", "package_declarator:sym<knowhow>")
  debug_1276:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1811_done
    goto rxscan1811_scan
  rxscan1811_loop:
    (rx1810_pos) = rx1810_cur."from"()
    inc rx1810_pos
    rx1810_cur."!cursor_from"(rx1810_pos)
    ge rx1810_pos, rx1810_eos, rxscan1811_done
  rxscan1811_scan:
    set_addr $I10, rxscan1811_loop
    rx1810_cur."!mark_push"(0, rx1810_pos, $I10)
  rxscan1811_done:
.annotate 'line', 998
    rx1810_cur."!cursor_pos"(rx1810_pos)
    find_dynamic_lex $P108, "$*PACKAGE"
    unless_null $P108, vivify_1277
    get_hll_global $P106, "GLOBAL"
    get_who $P107, $P106
    set $P108, $P107["$PACKAGE"]
    unless_null $P108, vivify_1278
    die "Contextual $*PACKAGE not found"
  vivify_1278:
  vivify_1277:
    set $P1808, $P108
.annotate 'line', 999
    rx1810_cur."!cursor_pos"(rx1810_pos)
    new $P109, "String"
    assign $P109, "knowhow"
    set $P1809, $P109
.annotate 'line', 1000
  # rx subcapture "sym"
    set_addr $I10, rxcap_1812_fail
    rx1810_cur."!mark_push"(0, rx1810_pos, $I10)
  # rx literal  "knowhow"
    add $I11, rx1810_pos, 7
    gt $I11, rx1810_eos, rx1810_fail
    sub $I11, rx1810_pos, rx1810_off
    substr $S10, rx1810_tgt, $I11, 7
    ne $S10, "knowhow", rx1810_fail
    add rx1810_pos, 7
    set_addr $I10, rxcap_1812_fail
    ($I12, $I11) = rx1810_cur."!mark_peek"($I10)
    rx1810_cur."!cursor_pos"($I11)
    ($P10) = rx1810_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1810_pos, "")
    rx1810_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1812_done
  rxcap_1812_fail:
    goto rx1810_fail
  rxcap_1812_done:
  # rx subrule "package_def" subtype=capture negate=
    rx1810_cur."!cursor_pos"(rx1810_pos)
    $P10 = rx1810_cur."package_def"()
    unless $P10, rx1810_fail
    rx1810_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("package_def")
    rx1810_pos = $P10."pos"()
.annotate 'line', 997
  # rx pass
    rx1810_cur."!cursor_pass"(rx1810_pos, "package_declarator:sym<knowhow>")
    if_null rx1810_debug, debug_1279
    rx1810_cur."!cursor_debug"("PASS", "package_declarator:sym<knowhow>", " at pos=", rx1810_pos)
  debug_1279:
    .return (rx1810_cur)
  rx1810_restart:
    if_null rx1810_debug, debug_1280
    rx1810_cur."!cursor_debug"("NEXT", "package_declarator:sym<knowhow>")
  debug_1280:
  rx1810_fail:
    (rx1810_rep, rx1810_pos, $I10, $P10) = rx1810_cur."!mark_fail"(0)
    lt rx1810_pos, -1, rx1810_done
    eq rx1810_pos, -1, rx1810_fail
    jump $I10
  rx1810_done:
    rx1810_cur."!cursor_fail"()
    if_null rx1810_debug, debug_1281
    rx1810_cur."!cursor_debug"("FAIL", "package_declarator:sym<knowhow>")
  debug_1281:
    .return (rx1810_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_declarator:sym<knowhow>"  :subid("203_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 997
    $P110 = self."!PREFIX__!subrule"("package_def", "knowhow")
    new $P111, "ResizablePMCArray"
    push $P111, $P110
    .return ($P111)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<class>"  :subid("204_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1003
    new $P104, "Undef"
    set $P1815, $P104
    .lex "$*OUTERPACKAGE", $P1815
.annotate 'line', 1004
    new $P105, "Undef"
    set $P1816, $P105
    .lex "$*PKGDECL", $P1816
.annotate 'line', 1002
    .local string rx1817_tgt
    .local int rx1817_pos
    .local int rx1817_off
    .local int rx1817_eos
    .local int rx1817_rep
    .local pmc rx1817_cur
    .local pmc rx1817_debug
    (rx1817_cur, rx1817_pos, rx1817_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1817_cur
    .local pmc match
    .lex "$/", match
    length rx1817_eos, rx1817_tgt
    gt rx1817_pos, rx1817_eos, rx1817_done
    set rx1817_off, 0
    lt rx1817_pos, 2, rx1817_start
    sub rx1817_off, rx1817_pos, 1
    substr rx1817_tgt, rx1817_tgt, rx1817_off
  rx1817_start:
    eq $I10, 1, rx1817_restart
    if_null rx1817_debug, debug_1282
    rx1817_cur."!cursor_debug"("START", "package_declarator:sym<class>")
  debug_1282:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1818_done
    goto rxscan1818_scan
  rxscan1818_loop:
    (rx1817_pos) = rx1817_cur."from"()
    inc rx1817_pos
    rx1817_cur."!cursor_from"(rx1817_pos)
    ge rx1817_pos, rx1817_eos, rxscan1818_done
  rxscan1818_scan:
    set_addr $I10, rxscan1818_loop
    rx1817_cur."!mark_push"(0, rx1817_pos, $I10)
  rxscan1818_done:
.annotate 'line', 1003
    rx1817_cur."!cursor_pos"(rx1817_pos)
    find_dynamic_lex $P108, "$*PACKAGE"
    unless_null $P108, vivify_1283
    get_hll_global $P106, "GLOBAL"
    get_who $P107, $P106
    set $P108, $P107["$PACKAGE"]
    unless_null $P108, vivify_1284
    die "Contextual $*PACKAGE not found"
  vivify_1284:
  vivify_1283:
    set $P1815, $P108
.annotate 'line', 1004
    rx1817_cur."!cursor_pos"(rx1817_pos)
    new $P109, "String"
    assign $P109, "class"
    set $P1816, $P109
.annotate 'line', 1005
  # rx subcapture "sym"
    set_addr $I10, rxcap_1819_fail
    rx1817_cur."!mark_push"(0, rx1817_pos, $I10)
  # rx literal  "class"
    add $I11, rx1817_pos, 5
    gt $I11, rx1817_eos, rx1817_fail
    sub $I11, rx1817_pos, rx1817_off
    substr $S10, rx1817_tgt, $I11, 5
    ne $S10, "class", rx1817_fail
    add rx1817_pos, 5
    set_addr $I10, rxcap_1819_fail
    ($I12, $I11) = rx1817_cur."!mark_peek"($I10)
    rx1817_cur."!cursor_pos"($I11)
    ($P10) = rx1817_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1817_pos, "")
    rx1817_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1819_done
  rxcap_1819_fail:
    goto rx1817_fail
  rxcap_1819_done:
  # rx subrule "package_def" subtype=capture negate=
    rx1817_cur."!cursor_pos"(rx1817_pos)
    $P10 = rx1817_cur."package_def"()
    unless $P10, rx1817_fail
    rx1817_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("package_def")
    rx1817_pos = $P10."pos"()
.annotate 'line', 1002
  # rx pass
    rx1817_cur."!cursor_pass"(rx1817_pos, "package_declarator:sym<class>")
    if_null rx1817_debug, debug_1285
    rx1817_cur."!cursor_debug"("PASS", "package_declarator:sym<class>", " at pos=", rx1817_pos)
  debug_1285:
    .return (rx1817_cur)
  rx1817_restart:
    if_null rx1817_debug, debug_1286
    rx1817_cur."!cursor_debug"("NEXT", "package_declarator:sym<class>")
  debug_1286:
  rx1817_fail:
    (rx1817_rep, rx1817_pos, $I10, $P10) = rx1817_cur."!mark_fail"(0)
    lt rx1817_pos, -1, rx1817_done
    eq rx1817_pos, -1, rx1817_fail
    jump $I10
  rx1817_done:
    rx1817_cur."!cursor_fail"()
    if_null rx1817_debug, debug_1287
    rx1817_cur."!cursor_debug"("FAIL", "package_declarator:sym<class>")
  debug_1287:
    .return (rx1817_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_declarator:sym<class>"  :subid("205_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1002
    $P110 = self."!PREFIX__!subrule"("package_def", "class")
    new $P111, "ResizablePMCArray"
    push $P111, $P110
    .return ($P111)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<grammar>"  :subid("206_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1008
    new $P104, "Undef"
    set $P1822, $P104
    .lex "$*OUTERPACKAGE", $P1822
.annotate 'line', 1009
    new $P105, "Undef"
    set $P1823, $P105
    .lex "$*PKGDECL", $P1823
.annotate 'line', 1007
    .local string rx1824_tgt
    .local int rx1824_pos
    .local int rx1824_off
    .local int rx1824_eos
    .local int rx1824_rep
    .local pmc rx1824_cur
    .local pmc rx1824_debug
    (rx1824_cur, rx1824_pos, rx1824_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1824_cur
    .local pmc match
    .lex "$/", match
    length rx1824_eos, rx1824_tgt
    gt rx1824_pos, rx1824_eos, rx1824_done
    set rx1824_off, 0
    lt rx1824_pos, 2, rx1824_start
    sub rx1824_off, rx1824_pos, 1
    substr rx1824_tgt, rx1824_tgt, rx1824_off
  rx1824_start:
    eq $I10, 1, rx1824_restart
    if_null rx1824_debug, debug_1288
    rx1824_cur."!cursor_debug"("START", "package_declarator:sym<grammar>")
  debug_1288:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1825_done
    goto rxscan1825_scan
  rxscan1825_loop:
    (rx1824_pos) = rx1824_cur."from"()
    inc rx1824_pos
    rx1824_cur."!cursor_from"(rx1824_pos)
    ge rx1824_pos, rx1824_eos, rxscan1825_done
  rxscan1825_scan:
    set_addr $I10, rxscan1825_loop
    rx1824_cur."!mark_push"(0, rx1824_pos, $I10)
  rxscan1825_done:
.annotate 'line', 1008
    rx1824_cur."!cursor_pos"(rx1824_pos)
    find_dynamic_lex $P108, "$*PACKAGE"
    unless_null $P108, vivify_1289
    get_hll_global $P106, "GLOBAL"
    get_who $P107, $P106
    set $P108, $P107["$PACKAGE"]
    unless_null $P108, vivify_1290
    die "Contextual $*PACKAGE not found"
  vivify_1290:
  vivify_1289:
    set $P1822, $P108
.annotate 'line', 1009
    rx1824_cur."!cursor_pos"(rx1824_pos)
    new $P109, "String"
    assign $P109, "grammar"
    set $P1823, $P109
.annotate 'line', 1010
  # rx subcapture "sym"
    set_addr $I10, rxcap_1826_fail
    rx1824_cur."!mark_push"(0, rx1824_pos, $I10)
  # rx literal  "grammar"
    add $I11, rx1824_pos, 7
    gt $I11, rx1824_eos, rx1824_fail
    sub $I11, rx1824_pos, rx1824_off
    substr $S10, rx1824_tgt, $I11, 7
    ne $S10, "grammar", rx1824_fail
    add rx1824_pos, 7
    set_addr $I10, rxcap_1826_fail
    ($I12, $I11) = rx1824_cur."!mark_peek"($I10)
    rx1824_cur."!cursor_pos"($I11)
    ($P10) = rx1824_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1824_pos, "")
    rx1824_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1826_done
  rxcap_1826_fail:
    goto rx1824_fail
  rxcap_1826_done:
  # rx subrule "package_def" subtype=capture negate=
    rx1824_cur."!cursor_pos"(rx1824_pos)
    $P10 = rx1824_cur."package_def"()
    unless $P10, rx1824_fail
    rx1824_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("package_def")
    rx1824_pos = $P10."pos"()
.annotate 'line', 1007
  # rx pass
    rx1824_cur."!cursor_pass"(rx1824_pos, "package_declarator:sym<grammar>")
    if_null rx1824_debug, debug_1291
    rx1824_cur."!cursor_debug"("PASS", "package_declarator:sym<grammar>", " at pos=", rx1824_pos)
  debug_1291:
    .return (rx1824_cur)
  rx1824_restart:
    if_null rx1824_debug, debug_1292
    rx1824_cur."!cursor_debug"("NEXT", "package_declarator:sym<grammar>")
  debug_1292:
  rx1824_fail:
    (rx1824_rep, rx1824_pos, $I10, $P10) = rx1824_cur."!mark_fail"(0)
    lt rx1824_pos, -1, rx1824_done
    eq rx1824_pos, -1, rx1824_fail
    jump $I10
  rx1824_done:
    rx1824_cur."!cursor_fail"()
    if_null rx1824_debug, debug_1293
    rx1824_cur."!cursor_debug"("FAIL", "package_declarator:sym<grammar>")
  debug_1293:
    .return (rx1824_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_declarator:sym<grammar>"  :subid("207_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1007
    $P110 = self."!PREFIX__!subrule"("package_def", "grammar")
    new $P111, "ResizablePMCArray"
    push $P111, $P110
    .return ($P111)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<role>"  :subid("208_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1013
    new $P104, "Undef"
    set $P1829, $P104
    .lex "$*OUTERPACKAGE", $P1829
.annotate 'line', 1014
    new $P105, "Undef"
    set $P1830, $P105
    .lex "$*PKGDECL", $P1830
.annotate 'line', 1012
    .local string rx1831_tgt
    .local int rx1831_pos
    .local int rx1831_off
    .local int rx1831_eos
    .local int rx1831_rep
    .local pmc rx1831_cur
    .local pmc rx1831_debug
    (rx1831_cur, rx1831_pos, rx1831_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1831_cur
    .local pmc match
    .lex "$/", match
    length rx1831_eos, rx1831_tgt
    gt rx1831_pos, rx1831_eos, rx1831_done
    set rx1831_off, 0
    lt rx1831_pos, 2, rx1831_start
    sub rx1831_off, rx1831_pos, 1
    substr rx1831_tgt, rx1831_tgt, rx1831_off
  rx1831_start:
    eq $I10, 1, rx1831_restart
    if_null rx1831_debug, debug_1294
    rx1831_cur."!cursor_debug"("START", "package_declarator:sym<role>")
  debug_1294:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1832_done
    goto rxscan1832_scan
  rxscan1832_loop:
    (rx1831_pos) = rx1831_cur."from"()
    inc rx1831_pos
    rx1831_cur."!cursor_from"(rx1831_pos)
    ge rx1831_pos, rx1831_eos, rxscan1832_done
  rxscan1832_scan:
    set_addr $I10, rxscan1832_loop
    rx1831_cur."!mark_push"(0, rx1831_pos, $I10)
  rxscan1832_done:
.annotate 'line', 1013
    rx1831_cur."!cursor_pos"(rx1831_pos)
    find_dynamic_lex $P108, "$*PACKAGE"
    unless_null $P108, vivify_1295
    get_hll_global $P106, "GLOBAL"
    get_who $P107, $P106
    set $P108, $P107["$PACKAGE"]
    unless_null $P108, vivify_1296
    die "Contextual $*PACKAGE not found"
  vivify_1296:
  vivify_1295:
    set $P1829, $P108
.annotate 'line', 1014
    rx1831_cur."!cursor_pos"(rx1831_pos)
    new $P109, "String"
    assign $P109, "role"
    set $P1830, $P109
.annotate 'line', 1015
  # rx subcapture "sym"
    set_addr $I10, rxcap_1833_fail
    rx1831_cur."!mark_push"(0, rx1831_pos, $I10)
  # rx literal  "role"
    add $I11, rx1831_pos, 4
    gt $I11, rx1831_eos, rx1831_fail
    sub $I11, rx1831_pos, rx1831_off
    substr $S10, rx1831_tgt, $I11, 4
    ne $S10, "role", rx1831_fail
    add rx1831_pos, 4
    set_addr $I10, rxcap_1833_fail
    ($I12, $I11) = rx1831_cur."!mark_peek"($I10)
    rx1831_cur."!cursor_pos"($I11)
    ($P10) = rx1831_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1831_pos, "")
    rx1831_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1833_done
  rxcap_1833_fail:
    goto rx1831_fail
  rxcap_1833_done:
  # rx subrule "package_def" subtype=capture negate=
    rx1831_cur."!cursor_pos"(rx1831_pos)
    $P10 = rx1831_cur."package_def"()
    unless $P10, rx1831_fail
    rx1831_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("package_def")
    rx1831_pos = $P10."pos"()
.annotate 'line', 1012
  # rx pass
    rx1831_cur."!cursor_pass"(rx1831_pos, "package_declarator:sym<role>")
    if_null rx1831_debug, debug_1297
    rx1831_cur."!cursor_debug"("PASS", "package_declarator:sym<role>", " at pos=", rx1831_pos)
  debug_1297:
    .return (rx1831_cur)
  rx1831_restart:
    if_null rx1831_debug, debug_1298
    rx1831_cur."!cursor_debug"("NEXT", "package_declarator:sym<role>")
  debug_1298:
  rx1831_fail:
    (rx1831_rep, rx1831_pos, $I10, $P10) = rx1831_cur."!mark_fail"(0)
    lt rx1831_pos, -1, rx1831_done
    eq rx1831_pos, -1, rx1831_fail
    jump $I10
  rx1831_done:
    rx1831_cur."!cursor_fail"()
    if_null rx1831_debug, debug_1299
    rx1831_cur."!cursor_debug"("FAIL", "package_declarator:sym<role>")
  debug_1299:
    .return (rx1831_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_declarator:sym<role>"  :subid("209_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1012
    $P110 = self."!PREFIX__!subrule"("package_def", "role")
    new $P111, "ResizablePMCArray"
    push $P111, $P110
    .return ($P111)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<native>"  :subid("210_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1018
    new $P104, "Undef"
    set $P1836, $P104
    .lex "$*OUTERPACKAGE", $P1836
.annotate 'line', 1019
    new $P105, "Undef"
    set $P1837, $P105
    .lex "$*PKGDECL", $P1837
.annotate 'line', 1017
    .local string rx1838_tgt
    .local int rx1838_pos
    .local int rx1838_off
    .local int rx1838_eos
    .local int rx1838_rep
    .local pmc rx1838_cur
    .local pmc rx1838_debug
    (rx1838_cur, rx1838_pos, rx1838_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1838_cur
    .local pmc match
    .lex "$/", match
    length rx1838_eos, rx1838_tgt
    gt rx1838_pos, rx1838_eos, rx1838_done
    set rx1838_off, 0
    lt rx1838_pos, 2, rx1838_start
    sub rx1838_off, rx1838_pos, 1
    substr rx1838_tgt, rx1838_tgt, rx1838_off
  rx1838_start:
    eq $I10, 1, rx1838_restart
    if_null rx1838_debug, debug_1300
    rx1838_cur."!cursor_debug"("START", "package_declarator:sym<native>")
  debug_1300:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1839_done
    goto rxscan1839_scan
  rxscan1839_loop:
    (rx1838_pos) = rx1838_cur."from"()
    inc rx1838_pos
    rx1838_cur."!cursor_from"(rx1838_pos)
    ge rx1838_pos, rx1838_eos, rxscan1839_done
  rxscan1839_scan:
    set_addr $I10, rxscan1839_loop
    rx1838_cur."!mark_push"(0, rx1838_pos, $I10)
  rxscan1839_done:
.annotate 'line', 1018
    rx1838_cur."!cursor_pos"(rx1838_pos)
    find_dynamic_lex $P108, "$*PACKAGE"
    unless_null $P108, vivify_1301
    get_hll_global $P106, "GLOBAL"
    get_who $P107, $P106
    set $P108, $P107["$PACKAGE"]
    unless_null $P108, vivify_1302
    die "Contextual $*PACKAGE not found"
  vivify_1302:
  vivify_1301:
    set $P1836, $P108
.annotate 'line', 1019
    rx1838_cur."!cursor_pos"(rx1838_pos)
    new $P109, "String"
    assign $P109, "native"
    set $P1837, $P109
.annotate 'line', 1020
  # rx subcapture "sym"
    set_addr $I10, rxcap_1840_fail
    rx1838_cur."!mark_push"(0, rx1838_pos, $I10)
  # rx literal  "native"
    add $I11, rx1838_pos, 6
    gt $I11, rx1838_eos, rx1838_fail
    sub $I11, rx1838_pos, rx1838_off
    substr $S10, rx1838_tgt, $I11, 6
    ne $S10, "native", rx1838_fail
    add rx1838_pos, 6
    set_addr $I10, rxcap_1840_fail
    ($I12, $I11) = rx1838_cur."!mark_peek"($I10)
    rx1838_cur."!cursor_pos"($I11)
    ($P10) = rx1838_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1838_pos, "")
    rx1838_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1840_done
  rxcap_1840_fail:
    goto rx1838_fail
  rxcap_1840_done:
  # rx subrule "package_def" subtype=capture negate=
    rx1838_cur."!cursor_pos"(rx1838_pos)
    $P10 = rx1838_cur."package_def"()
    unless $P10, rx1838_fail
    rx1838_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("package_def")
    rx1838_pos = $P10."pos"()
.annotate 'line', 1017
  # rx pass
    rx1838_cur."!cursor_pass"(rx1838_pos, "package_declarator:sym<native>")
    if_null rx1838_debug, debug_1303
    rx1838_cur."!cursor_debug"("PASS", "package_declarator:sym<native>", " at pos=", rx1838_pos)
  debug_1303:
    .return (rx1838_cur)
  rx1838_restart:
    if_null rx1838_debug, debug_1304
    rx1838_cur."!cursor_debug"("NEXT", "package_declarator:sym<native>")
  debug_1304:
  rx1838_fail:
    (rx1838_rep, rx1838_pos, $I10, $P10) = rx1838_cur."!mark_fail"(0)
    lt rx1838_pos, -1, rx1838_done
    eq rx1838_pos, -1, rx1838_fail
    jump $I10
  rx1838_done:
    rx1838_cur."!cursor_fail"()
    if_null rx1838_debug, debug_1305
    rx1838_cur."!cursor_debug"("FAIL", "package_declarator:sym<native>")
  debug_1305:
    .return (rx1838_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_declarator:sym<native>"  :subid("211_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1017
    $P110 = self."!PREFIX__!subrule"("package_def", "native")
    new $P111, "ResizablePMCArray"
    push $P111, $P110
    .return ($P111)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<stub>"  :subid("212_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1023
    new $P104, "Undef"
    set $P1843, $P104
    .lex "$*OUTERPACKAGE", $P1843
.annotate 'line', 1024
    new $P105, "Undef"
    set $P1844, $P105
    .lex "$*PKGDECL", $P1844
.annotate 'line', 1022
    .local string rx1845_tgt
    .local int rx1845_pos
    .local int rx1845_off
    .local int rx1845_eos
    .local int rx1845_rep
    .local pmc rx1845_cur
    .local pmc rx1845_debug
    (rx1845_cur, rx1845_pos, rx1845_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1845_cur
    .local pmc match
    .lex "$/", match
    length rx1845_eos, rx1845_tgt
    gt rx1845_pos, rx1845_eos, rx1845_done
    set rx1845_off, 0
    lt rx1845_pos, 2, rx1845_start
    sub rx1845_off, rx1845_pos, 1
    substr rx1845_tgt, rx1845_tgt, rx1845_off
  rx1845_start:
    eq $I10, 1, rx1845_restart
    if_null rx1845_debug, debug_1306
    rx1845_cur."!cursor_debug"("START", "package_declarator:sym<stub>")
  debug_1306:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1846_done
    goto rxscan1846_scan
  rxscan1846_loop:
    (rx1845_pos) = rx1845_cur."from"()
    inc rx1845_pos
    rx1845_cur."!cursor_from"(rx1845_pos)
    ge rx1845_pos, rx1845_eos, rxscan1846_done
  rxscan1846_scan:
    set_addr $I10, rxscan1846_loop
    rx1845_cur."!mark_push"(0, rx1845_pos, $I10)
  rxscan1846_done:
  # rx subrule "ws" subtype=method negate=
    rx1845_cur."!cursor_pos"(rx1845_pos)
    $P10 = rx1845_cur."ws"()
    unless $P10, rx1845_fail
    rx1845_pos = $P10."pos"()
.annotate 'line', 1023
    rx1845_cur."!cursor_pos"(rx1845_pos)
    find_dynamic_lex $P109, "$*PACKAGE"
    unless_null $P109, vivify_1307
    get_hll_global $P107, "GLOBAL"
    get_who $P108, $P107
    set $P109, $P108["$PACKAGE"]
    unless_null $P109, vivify_1308
    die "Contextual $*PACKAGE not found"
  vivify_1308:
  vivify_1307:
    set $P1843, $P109
  # rx subrule "ws" subtype=method negate=
    rx1845_cur."!cursor_pos"(rx1845_pos)
    $P10 = rx1845_cur."ws"()
    unless $P10, rx1845_fail
    rx1845_pos = $P10."pos"()
.annotate 'line', 1024
    rx1845_cur."!cursor_pos"(rx1845_pos)
    new $P111, "String"
    assign $P111, "stub"
    set $P1844, $P111
  # rx subrule "ws" subtype=method negate=
    rx1845_cur."!cursor_pos"(rx1845_pos)
    $P10 = rx1845_cur."ws"()
    unless $P10, rx1845_fail
    rx1845_pos = $P10."pos"()
.annotate 'line', 1025
  # rx subcapture "sym"
    set_addr $I10, rxcap_1847_fail
    rx1845_cur."!mark_push"(0, rx1845_pos, $I10)
  # rx literal  "stub"
    add $I11, rx1845_pos, 4
    gt $I11, rx1845_eos, rx1845_fail
    sub $I11, rx1845_pos, rx1845_off
    substr $S10, rx1845_tgt, $I11, 4
    ne $S10, "stub", rx1845_fail
    add rx1845_pos, 4
    set_addr $I10, rxcap_1847_fail
    ($I12, $I11) = rx1845_cur."!mark_peek"($I10)
    rx1845_cur."!cursor_pos"($I11)
    ($P10) = rx1845_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1845_pos, "")
    rx1845_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1847_done
  rxcap_1847_fail:
    goto rx1845_fail
  rxcap_1847_done:
  # rx subrule "ws" subtype=method negate=
    rx1845_cur."!cursor_pos"(rx1845_pos)
    $P10 = rx1845_cur."ws"()
    unless $P10, rx1845_fail
    rx1845_pos = $P10."pos"()
  # rx subrule "name" subtype=capture negate=
    rx1845_cur."!cursor_pos"(rx1845_pos)
    $P10 = rx1845_cur."name"()
    unless $P10, rx1845_fail
    rx1845_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("name")
    rx1845_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1845_cur."!cursor_pos"(rx1845_pos)
    $P10 = rx1845_cur."ws"()
    unless $P10, rx1845_fail
    rx1845_pos = $P10."pos"()
.annotate 'line', 1026
  # rx literal  "metaclass"
    add $I11, rx1845_pos, 9
    gt $I11, rx1845_eos, rx1845_fail
    sub $I11, rx1845_pos, rx1845_off
    substr $S10, rx1845_tgt, $I11, 9
    ne $S10, "metaclass", rx1845_fail
    add rx1845_pos, 9
  # rx subrule "ws" subtype=method negate=
    rx1845_cur."!cursor_pos"(rx1845_pos)
    $P10 = rx1845_cur."ws"()
    unless $P10, rx1845_fail
    rx1845_pos = $P10."pos"()
  # rx subrule "name" subtype=capture negate=
    rx1845_cur."!cursor_pos"(rx1845_pos)
    $P10 = rx1845_cur."name"()
    unless $P10, rx1845_fail
    rx1845_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("metaclass")
    rx1845_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1845_cur."!cursor_pos"(rx1845_pos)
    $P10 = rx1845_cur."ws"()
    unless $P10, rx1845_fail
    rx1845_pos = $P10."pos"()
.annotate 'line', 1027
  # rx literal  "{"
    add $I11, rx1845_pos, 1
    gt $I11, rx1845_eos, rx1845_fail
    sub $I11, rx1845_pos, rx1845_off
    ord $I11, rx1845_tgt, $I11
    ne $I11, 123, rx1845_fail
    add rx1845_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx1845_cur."!cursor_pos"(rx1845_pos)
    $P10 = rx1845_cur."ws"()
    unless $P10, rx1845_fail
    rx1845_pos = $P10."pos"()
  # rx literal  "..."
    add $I11, rx1845_pos, 3
    gt $I11, rx1845_eos, rx1845_fail
    sub $I11, rx1845_pos, rx1845_off
    substr $S10, rx1845_tgt, $I11, 3
    ne $S10, "...", rx1845_fail
    add rx1845_pos, 3
  # rx subrule "ws" subtype=method negate=
    rx1845_cur."!cursor_pos"(rx1845_pos)
    $P10 = rx1845_cur."ws"()
    unless $P10, rx1845_fail
    rx1845_pos = $P10."pos"()
  # rx literal  "}"
    add $I11, rx1845_pos, 1
    gt $I11, rx1845_eos, rx1845_fail
    sub $I11, rx1845_pos, rx1845_off
    ord $I11, rx1845_tgt, $I11
    ne $I11, 125, rx1845_fail
    add rx1845_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx1845_cur."!cursor_pos"(rx1845_pos)
    $P10 = rx1845_cur."ws"()
    unless $P10, rx1845_fail
    rx1845_pos = $P10."pos"()
.annotate 'line', 1022
  # rx pass
    rx1845_cur."!cursor_pass"(rx1845_pos, "package_declarator:sym<stub>")
    if_null rx1845_debug, debug_1309
    rx1845_cur."!cursor_debug"("PASS", "package_declarator:sym<stub>", " at pos=", rx1845_pos)
  debug_1309:
    .return (rx1845_cur)
  rx1845_restart:
    if_null rx1845_debug, debug_1310
    rx1845_cur."!cursor_debug"("NEXT", "package_declarator:sym<stub>")
  debug_1310:
  rx1845_fail:
    (rx1845_rep, rx1845_pos, $I10, $P10) = rx1845_cur."!mark_fail"(0)
    lt rx1845_pos, -1, rx1845_done
    eq rx1845_pos, -1, rx1845_fail
    jump $I10
  rx1845_done:
    rx1845_cur."!cursor_fail"()
    if_null rx1845_debug, debug_1311
    rx1845_cur."!cursor_debug"("FAIL", "package_declarator:sym<stub>")
  debug_1311:
    .return (rx1845_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_declarator:sym<stub>"  :subid("213_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1022
    $P120 = self."!PREFIX__!subrule"("ws", "")
    new $P121, "ResizablePMCArray"
    push $P121, $P120
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_def"  :subid("214_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1030
    .const 'Sub' $P1855 = "215_1329260321.776" 
    capture_lex $P1855
.annotate 'line', 1031
    new $P104, "Undef"
    set $P1850, $P104
    .lex "$*PACKAGE", $P1850
.annotate 'line', 1030
    .local string rx1851_tgt
    .local int rx1851_pos
    .local int rx1851_off
    .local int rx1851_eos
    .local int rx1851_rep
    .local pmc rx1851_cur
    .local pmc rx1851_debug
    (rx1851_cur, rx1851_pos, rx1851_tgt, $I10) = self."!cursor_start"()
    rx1851_cur."!cursor_caparray"("repr", "parent", "role")
    .lex unicode:"$\x{a2}", rx1851_cur
    .local pmc match
    .lex "$/", match
    length rx1851_eos, rx1851_tgt
    gt rx1851_pos, rx1851_eos, rx1851_done
    set rx1851_off, 0
    lt rx1851_pos, 2, rx1851_start
    sub rx1851_off, rx1851_pos, 1
    substr rx1851_tgt, rx1851_tgt, rx1851_off
  rx1851_start:
    eq $I10, 1, rx1851_restart
    if_null rx1851_debug, debug_1312
    rx1851_cur."!cursor_debug"("START", "package_def")
  debug_1312:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1852_done
    goto rxscan1852_scan
  rxscan1852_loop:
    (rx1851_pos) = rx1851_cur."from"()
    inc rx1851_pos
    rx1851_cur."!cursor_from"(rx1851_pos)
    ge rx1851_pos, rx1851_eos, rxscan1852_done
  rxscan1852_scan:
    set_addr $I10, rxscan1852_loop
    rx1851_cur."!mark_push"(0, rx1851_pos, $I10)
  rxscan1852_done:
  # rx subrule "ws" subtype=method negate=
    rx1851_cur."!cursor_pos"(rx1851_pos)
    $P10 = rx1851_cur."ws"()
    unless $P10, rx1851_fail
    rx1851_pos = $P10."pos"()
.annotate 'line', 1031
    rx1851_cur."!cursor_pos"(rx1851_pos)
    set $P108, $P1850
    unless_null $P108, vivify_1313
    get_hll_global $P106, "GLOBAL"
    get_who $P107, $P106
    set $P108, $P107["$PACKAGE"]
    unless_null $P108, vivify_1314
    die "Contextual $*PACKAGE not found"
  vivify_1314:
  vivify_1313:
  # rx subrule "ws" subtype=method negate=
    rx1851_cur."!cursor_pos"(rx1851_pos)
    $P10 = rx1851_cur."ws"()
    unless $P10, rx1851_fail
    rx1851_pos = $P10."pos"()
.annotate 'line', 1033
  # rx subrule "name" subtype=capture negate=
    rx1851_cur."!cursor_pos"(rx1851_pos)
    $P10 = rx1851_cur."name"()
    unless $P10, rx1851_fail
    rx1851_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("name")
    rx1851_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1851_cur."!cursor_pos"(rx1851_pos)
    $P10 = rx1851_cur."ws"()
    unless $P10, rx1851_fail
    rx1851_pos = $P10."pos"()
.annotate 'line', 1034
  # rx rxquantr1853 ** 0..1
    set_addr $I10, rxquantr1853_done
    rx1851_cur."!mark_push"(0, rx1851_pos, $I10)
  rxquantr1853_loop:
  # rx subrule "ws" subtype=method negate=
    rx1851_cur."!cursor_pos"(rx1851_pos)
    $P10 = rx1851_cur."ws"()
    unless $P10, rx1851_fail
    rx1851_pos = $P10."pos"()
  # rx literal  "is"
    add $I11, rx1851_pos, 2
    gt $I11, rx1851_eos, rx1851_fail
    sub $I11, rx1851_pos, rx1851_off
    substr $S10, rx1851_tgt, $I11, 2
    ne $S10, "is", rx1851_fail
    add rx1851_pos, 2
  # rx subrule "ws" subtype=method negate=
    rx1851_cur."!cursor_pos"(rx1851_pos)
    $P10 = rx1851_cur."ws"()
    unless $P10, rx1851_fail
    rx1851_pos = $P10."pos"()
  # rx literal  "repr("
    add $I11, rx1851_pos, 5
    gt $I11, rx1851_eos, rx1851_fail
    sub $I11, rx1851_pos, rx1851_off
    substr $S10, rx1851_tgt, $I11, 5
    ne $S10, "repr(", rx1851_fail
    add rx1851_pos, 5
  # rx subrule "ws" subtype=method negate=
    rx1851_cur."!cursor_pos"(rx1851_pos)
    $P10 = rx1851_cur."ws"()
    unless $P10, rx1851_fail
    rx1851_pos = $P10."pos"()
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx1851_cur."!cursor_pos"(rx1851_pos)
    $P10 = rx1851_cur."quote_EXPR"()
    unless $P10, rx1851_fail
    rx1851_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("repr")
    rx1851_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1851_cur."!cursor_pos"(rx1851_pos)
    $P10 = rx1851_cur."ws"()
    unless $P10, rx1851_fail
    rx1851_pos = $P10."pos"()
  # rx literal  ")"
    add $I11, rx1851_pos, 1
    gt $I11, rx1851_eos, rx1851_fail
    sub $I11, rx1851_pos, rx1851_off
    ord $I11, rx1851_tgt, $I11
    ne $I11, 41, rx1851_fail
    add rx1851_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx1851_cur."!cursor_pos"(rx1851_pos)
    $P10 = rx1851_cur."ws"()
    unless $P10, rx1851_fail
    rx1851_pos = $P10."pos"()
    set_addr $I10, rxquantr1853_done
    (rx1851_rep) = rx1851_cur."!mark_commit"($I10)
  rxquantr1853_done:
  # rx subrule "ws" subtype=method negate=
    rx1851_cur."!cursor_pos"(rx1851_pos)
    $P10 = rx1851_cur."ws"()
    unless $P10, rx1851_fail
    rx1851_pos = $P10."pos"()
.annotate 'line', 1036
    rx1851_cur."!cursor_pos"(rx1851_pos)
    find_lex $P117, unicode:"$\x{a2}"
    $P118 = $P117."MATCH"()
    store_lex "$/", $P118
    .const 'Sub' $P1855 = "215_1329260321.776" 
    capture_lex $P1855
    $P120 = $P1855()
.annotate 'line', 1062
  # rx subrule "ws" subtype=method negate=
    rx1851_cur."!cursor_pos"(rx1851_pos)
    $P10 = rx1851_cur."ws"()
    unless $P10, rx1851_fail
    rx1851_pos = $P10."pos"()
.annotate 'line', 1064
  # rx rxquantr1888 ** 0..1
    set_addr $I10, rxquantr1888_done
    rx1851_cur."!mark_push"(0, rx1851_pos, $I10)
  rxquantr1888_loop:
  # rx subrule "ws" subtype=method negate=
    rx1851_cur."!cursor_pos"(rx1851_pos)
    $P10 = rx1851_cur."ws"()
    unless $P10, rx1851_fail
    rx1851_pos = $P10."pos"()
  # rx literal  "is"
    add $I11, rx1851_pos, 2
    gt $I11, rx1851_eos, rx1851_fail
    sub $I11, rx1851_pos, rx1851_off
    substr $S10, rx1851_tgt, $I11, 2
    ne $S10, "is", rx1851_fail
    add rx1851_pos, 2
  # rx subrule "ws" subtype=method negate=
    rx1851_cur."!cursor_pos"(rx1851_pos)
    $P10 = rx1851_cur."ws"()
    unless $P10, rx1851_fail
    rx1851_pos = $P10."pos"()
  # rx subrule "name" subtype=capture negate=
    rx1851_cur."!cursor_pos"(rx1851_pos)
    $P10 = rx1851_cur."name"()
    unless $P10, rx1851_fail
    rx1851_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("parent")
    rx1851_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1851_cur."!cursor_pos"(rx1851_pos)
    $P10 = rx1851_cur."ws"()
    unless $P10, rx1851_fail
    rx1851_pos = $P10."pos"()
    set_addr $I10, rxquantr1888_done
    (rx1851_rep) = rx1851_cur."!mark_commit"($I10)
  rxquantr1888_done:
  # rx subrule "ws" subtype=method negate=
    rx1851_cur."!cursor_pos"(rx1851_pos)
    $P10 = rx1851_cur."ws"()
    unless $P10, rx1851_fail
    rx1851_pos = $P10."pos"()
.annotate 'line', 1065
  # rx rxquantr1889 ** 0..*
    set_addr $I10, rxquantr1889_done
    rx1851_cur."!mark_push"(0, rx1851_pos, $I10)
  rxquantr1889_loop:
  # rx subrule "ws" subtype=method negate=
    rx1851_cur."!cursor_pos"(rx1851_pos)
    $P10 = rx1851_cur."ws"()
    unless $P10, rx1851_fail
    rx1851_pos = $P10."pos"()
  # rx literal  "does"
    add $I11, rx1851_pos, 4
    gt $I11, rx1851_eos, rx1851_fail
    sub $I11, rx1851_pos, rx1851_off
    substr $S10, rx1851_tgt, $I11, 4
    ne $S10, "does", rx1851_fail
    add rx1851_pos, 4
  # rx subrule "ws" subtype=method negate=
    rx1851_cur."!cursor_pos"(rx1851_pos)
    $P10 = rx1851_cur."ws"()
    unless $P10, rx1851_fail
    rx1851_pos = $P10."pos"()
  # rx subrule "name" subtype=capture negate=
    rx1851_cur."!cursor_pos"(rx1851_pos)
    $P10 = rx1851_cur."name"()
    unless $P10, rx1851_fail
    rx1851_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("role")
    rx1851_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1851_cur."!cursor_pos"(rx1851_pos)
    $P10 = rx1851_cur."ws"()
    unless $P10, rx1851_fail
    rx1851_pos = $P10."pos"()
    set_addr $I10, rxquantr1889_done
    (rx1851_rep) = rx1851_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr1889_done
    rx1851_cur."!mark_push"(rx1851_rep, rx1851_pos, $I10)
    goto rxquantr1889_loop
  rxquantr1889_done:
  # rx subrule "ws" subtype=method negate=
    rx1851_cur."!cursor_pos"(rx1851_pos)
    $P10 = rx1851_cur."ws"()
    unless $P10, rx1851_fail
    rx1851_pos = $P10."pos"()
  alt1890_0:
.annotate 'line', 1066
    set_addr $I10, alt1890_1
    rx1851_cur."!mark_push"(0, rx1851_pos, $I10)
.annotate 'line', 1067
  # rx subrule "ws" subtype=method negate=
    rx1851_cur."!cursor_pos"(rx1851_pos)
    $P10 = rx1851_cur."ws"()
    unless $P10, rx1851_fail
    rx1851_pos = $P10."pos"()
  # rx literal  ";"
    add $I11, rx1851_pos, 1
    gt $I11, rx1851_eos, rx1851_fail
    sub $I11, rx1851_pos, rx1851_off
    ord $I11, rx1851_tgt, $I11
    ne $I11, 59, rx1851_fail
    add rx1851_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx1851_cur."!cursor_pos"(rx1851_pos)
    $P10 = rx1851_cur."ws"()
    unless $P10, rx1851_fail
    rx1851_pos = $P10."pos"()
  # rx subrule "comp_unit" subtype=capture negate=
    rx1851_cur."!cursor_pos"(rx1851_pos)
    $P10 = rx1851_cur."comp_unit"()
    unless $P10, rx1851_fail
    rx1851_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("comp_unit")
    rx1851_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1851_cur."!cursor_pos"(rx1851_pos)
    $P10 = rx1851_cur."ws"()
    unless $P10, rx1851_fail
    rx1851_pos = $P10."pos"()
    goto alt1890_end
  alt1890_1:
    set_addr $I10, alt1890_2
    rx1851_cur."!mark_push"(0, rx1851_pos, $I10)
.annotate 'line', 1068
  # rx subrule "ws" subtype=method negate=
    rx1851_cur."!cursor_pos"(rx1851_pos)
    $P10 = rx1851_cur."ws"()
    unless $P10, rx1851_fail
    rx1851_pos = $P10."pos"()
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1851_pos, rx1851_off
    substr $S10, rx1851_tgt, $I10, 1
    index $I11, "{", $S10
    lt $I11, 0, rx1851_fail
  # rx subrule "ws" subtype=method negate=
    rx1851_cur."!cursor_pos"(rx1851_pos)
    $P10 = rx1851_cur."ws"()
    unless $P10, rx1851_fail
    rx1851_pos = $P10."pos"()
  # rx subrule "block" subtype=capture negate=
    rx1851_cur."!cursor_pos"(rx1851_pos)
    $P10 = rx1851_cur."block"()
    unless $P10, rx1851_fail
    rx1851_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("block")
    rx1851_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1851_cur."!cursor_pos"(rx1851_pos)
    $P10 = rx1851_cur."ws"()
    unless $P10, rx1851_fail
    rx1851_pos = $P10."pos"()
    goto alt1890_end
  alt1890_2:
.annotate 'line', 1069
  # rx subrule "ws" subtype=method negate=
    rx1851_cur."!cursor_pos"(rx1851_pos)
    $P10 = rx1851_cur."ws"()
    unless $P10, rx1851_fail
    rx1851_pos = $P10."pos"()
  # rx subrule "panic" subtype=method negate=
    rx1851_cur."!cursor_pos"(rx1851_pos)
    $P10 = rx1851_cur."panic"("Malformed package declaration")
    unless $P10, rx1851_fail
    rx1851_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1851_cur."!cursor_pos"(rx1851_pos)
    $P10 = rx1851_cur."ws"()
    unless $P10, rx1851_fail
    rx1851_pos = $P10."pos"()
  alt1890_end:
.annotate 'line', 1070
  # rx subrule "ws" subtype=method negate=
    rx1851_cur."!cursor_pos"(rx1851_pos)
    $P10 = rx1851_cur."ws"()
    unless $P10, rx1851_fail
    rx1851_pos = $P10."pos"()
.annotate 'line', 1030
  # rx pass
    rx1851_cur."!cursor_pass"(rx1851_pos, "package_def")
    if_null rx1851_debug, debug_1382
    rx1851_cur."!cursor_debug"("PASS", "package_def", " at pos=", rx1851_pos)
  debug_1382:
    .return (rx1851_cur)
  rx1851_restart:
    if_null rx1851_debug, debug_1383
    rx1851_cur."!cursor_debug"("NEXT", "package_def")
  debug_1383:
  rx1851_fail:
    (rx1851_rep, rx1851_pos, $I10, $P10) = rx1851_cur."!mark_fail"(0)
    lt rx1851_pos, -1, rx1851_done
    eq rx1851_pos, -1, rx1851_fail
    jump $I10
  rx1851_done:
    rx1851_cur."!cursor_fail"()
    if_null rx1851_debug, debug_1384
    rx1851_cur."!cursor_debug"("FAIL", "package_def")
  debug_1384:
    .return (rx1851_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1854"  :anon :subid("215_1329260321.776") :outer("214_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1039
    $P1857 = root_new ['parrot';'Hash']
    set $P1856, $P1857
    .lex "%args", $P1856
.annotate 'line', 1036
    set $P1858, $P1856
    unless_null $P1858, vivify_1315
    $P1858 = root_new ['parrot';'Hash']
  vivify_1315:
.annotate 'line', 1040
    find_lex $P1859, "$/"
    unless_null $P1859, vivify_1316
    $P1859 = root_new ['parrot';'Hash']
  vivify_1316:
    set $P119, $P1859["name"]
    unless_null $P119, vivify_1317
    new $P119, "Undef"
  vivify_1317:
    set $S100, $P119
    new $P120, 'String'
    set $P120, $S100
    set $P1860, $P1856
    unless_null $P1860, vivify_1318
    $P1860 = root_new ['parrot';'Hash']
    set $P1856, $P1860
  vivify_1318:
    set $P1860["name"], $P120
.annotate 'line', 1041
    find_lex $P1862, "$/"
    unless_null $P1862, vivify_1319
    $P1862 = root_new ['parrot';'Hash']
  vivify_1319:
    set $P119, $P1862["repr"]
    unless_null $P119, vivify_1320
    new $P119, "Undef"
  vivify_1320:
    unless $P119, if_1861_end
.annotate 'line', 1042
    new $P120, "Float"
    assign $P120, 0
    set $I100, $P120
    new $P121, "Float"
    assign $P121, 0
    set $I101, $P121
    find_lex $P1863, "$/"
    unless_null $P1863, vivify_1321
    $P1863 = root_new ['parrot';'Hash']
  vivify_1321:
    set $P1864, $P1863["repr"]
    unless_null $P1864, vivify_1322
    $P1864 = root_new ['parrot';'ResizablePMCArray']
  vivify_1322:
    set $P1865, $P1864[$I101]
    unless_null $P1865, vivify_1323
    $P1865 = root_new ['parrot';'Hash']
  vivify_1323:
    set $P1866, $P1865["quote_delimited"]
    unless_null $P1866, vivify_1324
    $P1866 = root_new ['parrot';'Hash']
  vivify_1324:
    set $P1867, $P1866["quote_atom"]
    unless_null $P1867, vivify_1325
    $P1867 = root_new ['parrot';'ResizablePMCArray']
  vivify_1325:
    set $P122, $P1867[$I100]
    unless_null $P122, vivify_1326
    new $P122, "Undef"
  vivify_1326:
    set $S100, $P122
    new $P123, 'String'
    set $P123, $S100
    set $P1868, $P1856
    unless_null $P1868, vivify_1327
    $P1868 = root_new ['parrot';'Hash']
    set $P1856, $P1868
  vivify_1327:
    set $P1868["repr"], $P123
  if_1861_end:
.annotate 'line', 1044
    find_dynamic_lex $P121, "$*W"
    unless_null $P121, vivify_1328
    get_hll_global $P119, "GLOBAL"
    get_who $P120, $P119
    set $P121, $P120["$W"]
    unless_null $P121, vivify_1329
    die "Contextual $*W not found"
  vivify_1329:
  vivify_1328:
    find_dynamic_lex $P124, "$*PKGDECL"
    unless_null $P124, vivify_1330
    get_hll_global $P122, "GLOBAL"
    get_who $P123, $P122
    set $P124, $P123["$PKGDECL"]
    unless_null $P124, vivify_1331
    die "Contextual $*PKGDECL not found"
  vivify_1331:
  vivify_1330:
    find_dynamic_lex $P127, "%*HOW"
    unless_null $P127, vivify_1332
    get_hll_global $P125, "GLOBAL"
    get_who $P126, $P125
    set $P127, $P126["%HOW"]
    unless_null $P127, vivify_1333
    die "Contextual %*HOW not found"
  vivify_1333:
  vivify_1332:
    set $P128, $P127[$P124]
    unless_null $P128, vivify_1334
    new $P128, "Undef"
  vivify_1334:
    set $P1869, $P1856
    unless_null $P1869, vivify_1335
    $P1869 = root_new ['parrot';'Hash']
  vivify_1335:
    $P129 = $P121."pkg_create_mo"($P128, $P1869 :flat)
    store_dynamic_lex "$*PACKAGE", $P129
.annotate 'line', 1047
    find_dynamic_lex $P123, "$*SCOPE"
    unless_null $P123, vivify_1336
    get_hll_global $P121, "GLOBAL"
    get_who $P122, $P121
    set $P123, $P122["$SCOPE"]
    unless_null $P123, vivify_1337
    die "Contextual $*SCOPE not found"
  vivify_1337:
  vivify_1336:
    set $S100, $P123
    iseq $I100, $S100, "our"
    unless $I100, unless_1871
    new $P120, 'Integer'
    set $P120, $I100
    goto unless_1871_end
  unless_1871:
    find_dynamic_lex $P126, "$*SCOPE"
    unless_null $P126, vivify_1338
    get_hll_global $P124, "GLOBAL"
    get_who $P125, $P124
    set $P126, $P125["$SCOPE"]
    unless_null $P126, vivify_1339
    die "Contextual $*SCOPE not found"
  vivify_1339:
  vivify_1338:
    set $S101, $P126
    iseq $I101, $S101, ""
    new $P120, 'Integer'
    set $P120, $I101
  unless_1871_end:
    if $P120, if_1870
.annotate 'line', 1053
    find_dynamic_lex $P131, "$*SCOPE"
    unless_null $P131, vivify_1340
    get_hll_global $P129, "GLOBAL"
    get_who $P130, $P129
    set $P131, $P130["$SCOPE"]
    unless_null $P131, vivify_1341
    die "Contextual $*SCOPE not found"
  vivify_1341:
  vivify_1340:
    set $S102, $P131
    iseq $I102, $S102, "my"
    if $I102, if_1880
.annotate 'line', 1060
    find_lex $P132, "$/"
    unless_null $P132, vivify_1342
    new $P132, "Undef"
  vivify_1342:
    $P133 = $P132."CURSOR"()
    find_dynamic_lex $P136, "$*SCOPE"
    unless_null $P136, vivify_1343
    get_hll_global $P134, "GLOBAL"
    get_who $P135, $P134
    set $P136, $P135["$SCOPE"]
    unless_null $P136, vivify_1344
    die "Contextual $*SCOPE not found"
  vivify_1344:
  vivify_1343:
    concat $P137, $P136, " scoped packages are not supported"
    $P138 = $P133."panic"($P137)
.annotate 'line', 1059
    set $P128, $P138
.annotate 'line', 1053
    goto if_1880_end
  if_1880:
.annotate 'line', 1054
    find_lex $P1882, "$/"
    unless_null $P1882, vivify_1345
    $P1882 = root_new ['parrot';'Hash']
  vivify_1345:
    set $P1883, $P1882["name"]
    unless_null $P1883, vivify_1346
    $P1883 = root_new ['parrot';'Hash']
  vivify_1346:
    set $P132, $P1883["identifier"]
    unless_null $P132, vivify_1347
    new $P132, "Undef"
  vivify_1347:
    set $N100, $P132
    set $N101, 1
    isne $I103, $N100, $N101
    unless $I103, if_1881_end
.annotate 'line', 1055
    find_lex $P1884, "$/"
    unless_null $P1884, vivify_1348
    $P1884 = root_new ['parrot';'Hash']
  vivify_1348:
    set $P133, $P1884["name"]
    unless_null $P133, vivify_1349
    new $P133, "Undef"
  vivify_1349:
    $P134 = $P133."CURSOR"()
    $P134."panic"("A my scoped package cannot have a multi-part name yet")
  if_1881_end:
.annotate 'line', 1057
    find_dynamic_lex $P134, "$*W"
    unless_null $P134, vivify_1350
    get_hll_global $P132, "GLOBAL"
    get_who $P133, $P132
    set $P134, $P133["$W"]
    unless_null $P134, vivify_1351
    die "Contextual $*W not found"
  vivify_1351:
  vivify_1350:
    find_dynamic_lex $P137, "$*W"
    unless_null $P137, vivify_1352
    get_hll_global $P135, "GLOBAL"
    get_who $P136, $P135
    set $P137, $P136["$W"]
    unless_null $P137, vivify_1353
    die "Contextual $*W not found"
  vivify_1353:
  vivify_1352:
    $P138 = $P137."cur_lexpad"()
    new $P139, "Float"
    assign $P139, 0
    set $I103, $P139
    find_lex $P1885, "$/"
    unless_null $P1885, vivify_1354
    $P1885 = root_new ['parrot';'Hash']
  vivify_1354:
    set $P1886, $P1885["name"]
    unless_null $P1886, vivify_1355
    $P1886 = root_new ['parrot';'Hash']
  vivify_1355:
    set $P1887, $P1886["identifier"]
    unless_null $P1887, vivify_1356
    $P1887 = root_new ['parrot';'ResizablePMCArray']
  vivify_1356:
    set $P140, $P1887[$I103]
    unless_null $P140, vivify_1357
    new $P140, "Undef"
  vivify_1357:
    find_dynamic_lex $P143, "$*PACKAGE"
    unless_null $P143, vivify_1358
    get_hll_global $P141, "GLOBAL"
    get_who $P142, $P141
    set $P143, $P142["$PACKAGE"]
    unless_null $P143, vivify_1359
    die "Contextual $*PACKAGE not found"
  vivify_1359:
  vivify_1358:
    $P144 = $P134."install_lexical_symbol"($P138, $P140, $P143)
.annotate 'line', 1053
    set $P128, $P144
  if_1880_end:
    set $P119, $P128
.annotate 'line', 1047
    goto if_1870_end
  if_1870:
.annotate 'line', 1048
    find_dynamic_lex $P129, "$*W"
    unless_null $P129, vivify_1360
    get_hll_global $P127, "GLOBAL"
    get_who $P128, $P127
    set $P129, $P128["$W"]
    unless_null $P129, vivify_1361
    die "Contextual $*W not found"
  vivify_1361:
  vivify_1360:
    find_dynamic_lex $P132, "$*OUTERPACKAGE"
    unless_null $P132, vivify_1362
    get_hll_global $P130, "GLOBAL"
    get_who $P131, $P130
    set $P132, $P131["$OUTERPACKAGE"]
    unless_null $P132, vivify_1363
    die "Contextual $*OUTERPACKAGE not found"
  vivify_1363:
  vivify_1362:
    find_lex $P1872, "$/"
    unless_null $P1872, vivify_1364
    $P1872 = root_new ['parrot';'Hash']
  vivify_1364:
    set $P1873, $P1872["name"]
    unless_null $P1873, vivify_1365
    $P1873 = root_new ['parrot';'Hash']
  vivify_1365:
    set $P133, $P1873["identifier"]
    unless_null $P133, vivify_1366
    new $P133, "Undef"
  vivify_1366:
    find_dynamic_lex $P136, "$*PACKAGE"
    unless_null $P136, vivify_1367
    get_hll_global $P134, "GLOBAL"
    get_who $P135, $P134
    set $P136, $P135["$PACKAGE"]
    unless_null $P136, vivify_1368
    die "Contextual $*PACKAGE not found"
  vivify_1368:
  vivify_1367:
    $P129."install_package_symbol"($P132, $P133, $P136)
.annotate 'line', 1049
    find_lex $P1875, "$/"
    unless_null $P1875, vivify_1369
    $P1875 = root_new ['parrot';'Hash']
  vivify_1369:
    set $P1876, $P1875["name"]
    unless_null $P1876, vivify_1370
    $P1876 = root_new ['parrot';'Hash']
  vivify_1370:
    set $P128, $P1876["identifier"]
    unless_null $P128, vivify_1371
    new $P128, "Undef"
  vivify_1371:
    set $N100, $P128
    set $N101, 1
    iseq $I102, $N100, $N101
    if $I102, if_1874
    new $P127, 'Integer'
    set $P127, $I102
    goto if_1874_end
  if_1874:
.annotate 'line', 1050
    find_dynamic_lex $P131, "$*W"
    unless_null $P131, vivify_1372
    get_hll_global $P129, "GLOBAL"
    get_who $P130, $P129
    set $P131, $P130["$W"]
    unless_null $P131, vivify_1373
    die "Contextual $*W not found"
  vivify_1373:
  vivify_1372:
    find_dynamic_lex $P134, "$*W"
    unless_null $P134, vivify_1374
    get_hll_global $P132, "GLOBAL"
    get_who $P133, $P132
    set $P134, $P133["$W"]
    unless_null $P134, vivify_1375
    die "Contextual $*W not found"
  vivify_1375:
  vivify_1374:
    $P135 = $P134."cur_lexpad"()
    new $P136, "Float"
    assign $P136, 0
    set $I103, $P136
    find_lex $P1877, "$/"
    unless_null $P1877, vivify_1376
    $P1877 = root_new ['parrot';'Hash']
  vivify_1376:
    set $P1878, $P1877["name"]
    unless_null $P1878, vivify_1377
    $P1878 = root_new ['parrot';'Hash']
  vivify_1377:
    set $P1879, $P1878["identifier"]
    unless_null $P1879, vivify_1378
    $P1879 = root_new ['parrot';'ResizablePMCArray']
  vivify_1378:
    set $P137, $P1879[$I103]
    unless_null $P137, vivify_1379
    new $P137, "Undef"
  vivify_1379:
    find_dynamic_lex $P140, "$*PACKAGE"
    unless_null $P140, vivify_1380
    get_hll_global $P138, "GLOBAL"
    get_who $P139, $P138
    set $P140, $P139["$PACKAGE"]
    unless_null $P140, vivify_1381
    die "Contextual $*PACKAGE not found"
  vivify_1381:
  vivify_1380:
    $P141 = $P131."install_lexical_symbol"($P135, $P137, $P140)
.annotate 'line', 1049
    set $P127, $P141
  if_1874_end:
.annotate 'line', 1047
    set $P119, $P127
  if_1870_end:
.annotate 'line', 1036
    .return ($P119)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_def"  :subid("216_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1030
    $P139 = self."!PREFIX__!subrule"("ws", "")
    new $P140, "ResizablePMCArray"
    push $P140, $P139
    .return ($P140)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "scope_declarator"  :subid("217_1329260321.776")
    .param pmc param_1893
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1073
    .lex "self", param_1893
    $P104 = param_1893."!protoregex"("scope_declarator")
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__scope_declarator"  :subid("218_1329260321.776")
    .param pmc param_1895
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1073
    .lex "self", param_1895
    $P105 = param_1895."!PREFIX__!protoregex"("scope_declarator")
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "scope_declarator:sym<my>"  :subid("219_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1074
    .local string rx1897_tgt
    .local int rx1897_pos
    .local int rx1897_off
    .local int rx1897_eos
    .local int rx1897_rep
    .local pmc rx1897_cur
    .local pmc rx1897_debug
    (rx1897_cur, rx1897_pos, rx1897_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1897_cur
    .local pmc match
    .lex "$/", match
    length rx1897_eos, rx1897_tgt
    gt rx1897_pos, rx1897_eos, rx1897_done
    set rx1897_off, 0
    lt rx1897_pos, 2, rx1897_start
    sub rx1897_off, rx1897_pos, 1
    substr rx1897_tgt, rx1897_tgt, rx1897_off
  rx1897_start:
    eq $I10, 1, rx1897_restart
    if_null rx1897_debug, debug_1385
    rx1897_cur."!cursor_debug"("START", "scope_declarator:sym<my>")
  debug_1385:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1898_done
    goto rxscan1898_scan
  rxscan1898_loop:
    (rx1897_pos) = rx1897_cur."from"()
    inc rx1897_pos
    rx1897_cur."!cursor_from"(rx1897_pos)
    ge rx1897_pos, rx1897_eos, rxscan1898_done
  rxscan1898_scan:
    set_addr $I10, rxscan1898_loop
    rx1897_cur."!mark_push"(0, rx1897_pos, $I10)
  rxscan1898_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_1899_fail
    rx1897_cur."!mark_push"(0, rx1897_pos, $I10)
  # rx literal  "my"
    add $I11, rx1897_pos, 2
    gt $I11, rx1897_eos, rx1897_fail
    sub $I11, rx1897_pos, rx1897_off
    substr $S10, rx1897_tgt, $I11, 2
    ne $S10, "my", rx1897_fail
    add rx1897_pos, 2
    set_addr $I10, rxcap_1899_fail
    ($I12, $I11) = rx1897_cur."!mark_peek"($I10)
    rx1897_cur."!cursor_pos"($I11)
    ($P10) = rx1897_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1897_pos, "")
    rx1897_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1899_done
  rxcap_1899_fail:
    goto rx1897_fail
  rxcap_1899_done:
  # rx subrule "scoped" subtype=capture negate=
    rx1897_cur."!cursor_pos"(rx1897_pos)
    $P10 = rx1897_cur."scoped"("my")
    unless $P10, rx1897_fail
    rx1897_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("scoped")
    rx1897_pos = $P10."pos"()
  # rx pass
    rx1897_cur."!cursor_pass"(rx1897_pos, "scope_declarator:sym<my>")
    if_null rx1897_debug, debug_1386
    rx1897_cur."!cursor_debug"("PASS", "scope_declarator:sym<my>", " at pos=", rx1897_pos)
  debug_1386:
    .return (rx1897_cur)
  rx1897_restart:
    if_null rx1897_debug, debug_1387
    rx1897_cur."!cursor_debug"("NEXT", "scope_declarator:sym<my>")
  debug_1387:
  rx1897_fail:
    (rx1897_rep, rx1897_pos, $I10, $P10) = rx1897_cur."!mark_fail"(0)
    lt rx1897_pos, -1, rx1897_done
    eq rx1897_pos, -1, rx1897_fail
    jump $I10
  rx1897_done:
    rx1897_cur."!cursor_fail"()
    if_null rx1897_debug, debug_1388
    rx1897_cur."!cursor_debug"("FAIL", "scope_declarator:sym<my>")
  debug_1388:
    .return (rx1897_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__scope_declarator:sym<my>"  :subid("220_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1074
    $P104 = self."!PREFIX__!subrule"("scoped", "my")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "scope_declarator:sym<our>"  :subid("221_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1075
    .local string rx1902_tgt
    .local int rx1902_pos
    .local int rx1902_off
    .local int rx1902_eos
    .local int rx1902_rep
    .local pmc rx1902_cur
    .local pmc rx1902_debug
    (rx1902_cur, rx1902_pos, rx1902_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1902_cur
    .local pmc match
    .lex "$/", match
    length rx1902_eos, rx1902_tgt
    gt rx1902_pos, rx1902_eos, rx1902_done
    set rx1902_off, 0
    lt rx1902_pos, 2, rx1902_start
    sub rx1902_off, rx1902_pos, 1
    substr rx1902_tgt, rx1902_tgt, rx1902_off
  rx1902_start:
    eq $I10, 1, rx1902_restart
    if_null rx1902_debug, debug_1389
    rx1902_cur."!cursor_debug"("START", "scope_declarator:sym<our>")
  debug_1389:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1903_done
    goto rxscan1903_scan
  rxscan1903_loop:
    (rx1902_pos) = rx1902_cur."from"()
    inc rx1902_pos
    rx1902_cur."!cursor_from"(rx1902_pos)
    ge rx1902_pos, rx1902_eos, rxscan1903_done
  rxscan1903_scan:
    set_addr $I10, rxscan1903_loop
    rx1902_cur."!mark_push"(0, rx1902_pos, $I10)
  rxscan1903_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_1904_fail
    rx1902_cur."!mark_push"(0, rx1902_pos, $I10)
  # rx literal  "our"
    add $I11, rx1902_pos, 3
    gt $I11, rx1902_eos, rx1902_fail
    sub $I11, rx1902_pos, rx1902_off
    substr $S10, rx1902_tgt, $I11, 3
    ne $S10, "our", rx1902_fail
    add rx1902_pos, 3
    set_addr $I10, rxcap_1904_fail
    ($I12, $I11) = rx1902_cur."!mark_peek"($I10)
    rx1902_cur."!cursor_pos"($I11)
    ($P10) = rx1902_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1902_pos, "")
    rx1902_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1904_done
  rxcap_1904_fail:
    goto rx1902_fail
  rxcap_1904_done:
  # rx subrule "scoped" subtype=capture negate=
    rx1902_cur."!cursor_pos"(rx1902_pos)
    $P10 = rx1902_cur."scoped"("our")
    unless $P10, rx1902_fail
    rx1902_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("scoped")
    rx1902_pos = $P10."pos"()
  # rx pass
    rx1902_cur."!cursor_pass"(rx1902_pos, "scope_declarator:sym<our>")
    if_null rx1902_debug, debug_1390
    rx1902_cur."!cursor_debug"("PASS", "scope_declarator:sym<our>", " at pos=", rx1902_pos)
  debug_1390:
    .return (rx1902_cur)
  rx1902_restart:
    if_null rx1902_debug, debug_1391
    rx1902_cur."!cursor_debug"("NEXT", "scope_declarator:sym<our>")
  debug_1391:
  rx1902_fail:
    (rx1902_rep, rx1902_pos, $I10, $P10) = rx1902_cur."!mark_fail"(0)
    lt rx1902_pos, -1, rx1902_done
    eq rx1902_pos, -1, rx1902_fail
    jump $I10
  rx1902_done:
    rx1902_cur."!cursor_fail"()
    if_null rx1902_debug, debug_1392
    rx1902_cur."!cursor_debug"("FAIL", "scope_declarator:sym<our>")
  debug_1392:
    .return (rx1902_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__scope_declarator:sym<our>"  :subid("222_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1075
    $P104 = self."!PREFIX__!subrule"("scoped", "our")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "scope_declarator:sym<has>"  :subid("223_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1076
    .local string rx1907_tgt
    .local int rx1907_pos
    .local int rx1907_off
    .local int rx1907_eos
    .local int rx1907_rep
    .local pmc rx1907_cur
    .local pmc rx1907_debug
    (rx1907_cur, rx1907_pos, rx1907_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1907_cur
    .local pmc match
    .lex "$/", match
    length rx1907_eos, rx1907_tgt
    gt rx1907_pos, rx1907_eos, rx1907_done
    set rx1907_off, 0
    lt rx1907_pos, 2, rx1907_start
    sub rx1907_off, rx1907_pos, 1
    substr rx1907_tgt, rx1907_tgt, rx1907_off
  rx1907_start:
    eq $I10, 1, rx1907_restart
    if_null rx1907_debug, debug_1393
    rx1907_cur."!cursor_debug"("START", "scope_declarator:sym<has>")
  debug_1393:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1908_done
    goto rxscan1908_scan
  rxscan1908_loop:
    (rx1907_pos) = rx1907_cur."from"()
    inc rx1907_pos
    rx1907_cur."!cursor_from"(rx1907_pos)
    ge rx1907_pos, rx1907_eos, rxscan1908_done
  rxscan1908_scan:
    set_addr $I10, rxscan1908_loop
    rx1907_cur."!mark_push"(0, rx1907_pos, $I10)
  rxscan1908_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_1909_fail
    rx1907_cur."!mark_push"(0, rx1907_pos, $I10)
  # rx literal  "has"
    add $I11, rx1907_pos, 3
    gt $I11, rx1907_eos, rx1907_fail
    sub $I11, rx1907_pos, rx1907_off
    substr $S10, rx1907_tgt, $I11, 3
    ne $S10, "has", rx1907_fail
    add rx1907_pos, 3
    set_addr $I10, rxcap_1909_fail
    ($I12, $I11) = rx1907_cur."!mark_peek"($I10)
    rx1907_cur."!cursor_pos"($I11)
    ($P10) = rx1907_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1907_pos, "")
    rx1907_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1909_done
  rxcap_1909_fail:
    goto rx1907_fail
  rxcap_1909_done:
  # rx subrule "scoped" subtype=capture negate=
    rx1907_cur."!cursor_pos"(rx1907_pos)
    $P10 = rx1907_cur."scoped"("has")
    unless $P10, rx1907_fail
    rx1907_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("scoped")
    rx1907_pos = $P10."pos"()
  # rx pass
    rx1907_cur."!cursor_pass"(rx1907_pos, "scope_declarator:sym<has>")
    if_null rx1907_debug, debug_1394
    rx1907_cur."!cursor_debug"("PASS", "scope_declarator:sym<has>", " at pos=", rx1907_pos)
  debug_1394:
    .return (rx1907_cur)
  rx1907_restart:
    if_null rx1907_debug, debug_1395
    rx1907_cur."!cursor_debug"("NEXT", "scope_declarator:sym<has>")
  debug_1395:
  rx1907_fail:
    (rx1907_rep, rx1907_pos, $I10, $P10) = rx1907_cur."!mark_fail"(0)
    lt rx1907_pos, -1, rx1907_done
    eq rx1907_pos, -1, rx1907_fail
    jump $I10
  rx1907_done:
    rx1907_cur."!cursor_fail"()
    if_null rx1907_debug, debug_1396
    rx1907_cur."!cursor_debug"("FAIL", "scope_declarator:sym<has>")
  debug_1396:
    .return (rx1907_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__scope_declarator:sym<has>"  :subid("224_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1076
    $P104 = self."!PREFIX__!subrule"("scoped", "has")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "scoped"  :subid("225_1329260321.776") :method :outer("72_1329260321.776")
    .param pmc param_1912
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1078
    .lex "$*SCOPE", param_1912
    .local string rx1913_tgt
    .local int rx1913_pos
    .local int rx1913_off
    .local int rx1913_eos
    .local int rx1913_rep
    .local pmc rx1913_cur
    .local pmc rx1913_debug
    (rx1913_cur, rx1913_pos, rx1913_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1913_cur
    .local pmc match
    .lex "$/", match
    length rx1913_eos, rx1913_tgt
    gt rx1913_pos, rx1913_eos, rx1913_done
    set rx1913_off, 0
    lt rx1913_pos, 2, rx1913_start
    sub rx1913_off, rx1913_pos, 1
    substr rx1913_tgt, rx1913_tgt, rx1913_off
  rx1913_start:
    eq $I10, 1, rx1913_restart
    if_null rx1913_debug, debug_1397
    rx1913_cur."!cursor_debug"("START", "scoped")
  debug_1397:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1914_done
    goto rxscan1914_scan
  rxscan1914_loop:
    (rx1913_pos) = rx1913_cur."from"()
    inc rx1913_pos
    rx1913_cur."!cursor_from"(rx1913_pos)
    ge rx1913_pos, rx1913_eos, rxscan1914_done
  rxscan1914_scan:
    set_addr $I10, rxscan1914_loop
    rx1913_cur."!mark_push"(0, rx1913_pos, $I10)
  rxscan1914_done:
  alt1915_0:
    set_addr $I10, alt1915_1
    rx1913_cur."!mark_push"(0, rx1913_pos, $I10)
.annotate 'line', 1079
  # rx subrule "ws" subtype=method negate=
    rx1913_cur."!cursor_pos"(rx1913_pos)
    $P10 = rx1913_cur."ws"()
    unless $P10, rx1913_fail
    rx1913_pos = $P10."pos"()
  # rx subrule "declarator" subtype=capture negate=
    rx1913_cur."!cursor_pos"(rx1913_pos)
    $P10 = rx1913_cur."declarator"()
    unless $P10, rx1913_fail
    rx1913_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("declarator")
    rx1913_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1913_cur."!cursor_pos"(rx1913_pos)
    $P10 = rx1913_cur."ws"()
    unless $P10, rx1913_fail
    rx1913_pos = $P10."pos"()
    goto alt1915_end
  alt1915_1:
    set_addr $I10, alt1915_2
    rx1913_cur."!mark_push"(0, rx1913_pos, $I10)
.annotate 'line', 1080
  # rx subrule "ws" subtype=method negate=
    rx1913_cur."!cursor_pos"(rx1913_pos)
    $P10 = rx1913_cur."ws"()
    unless $P10, rx1913_fail
    rx1913_pos = $P10."pos"()
  # rx subrule "multi_declarator" subtype=capture negate=
    rx1913_cur."!cursor_pos"(rx1913_pos)
    $P10 = rx1913_cur."multi_declarator"()
    unless $P10, rx1913_fail
    rx1913_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("multi_declarator")
    rx1913_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1913_cur."!cursor_pos"(rx1913_pos)
    $P10 = rx1913_cur."ws"()
    unless $P10, rx1913_fail
    rx1913_pos = $P10."pos"()
    goto alt1915_end
  alt1915_2:
.annotate 'line', 1081
  # rx subrule "ws" subtype=method negate=
    rx1913_cur."!cursor_pos"(rx1913_pos)
    $P10 = rx1913_cur."ws"()
    unless $P10, rx1913_fail
    rx1913_pos = $P10."pos"()
  # rx subrule "package_declarator" subtype=capture negate=
    rx1913_cur."!cursor_pos"(rx1913_pos)
    $P10 = rx1913_cur."package_declarator"()
    unless $P10, rx1913_fail
    rx1913_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("package_declarator")
    rx1913_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1913_cur."!cursor_pos"(rx1913_pos)
    $P10 = rx1913_cur."ws"()
    unless $P10, rx1913_fail
    rx1913_pos = $P10."pos"()
  alt1915_end:
.annotate 'line', 1078
  # rx pass
    rx1913_cur."!cursor_pass"(rx1913_pos, "scoped")
    if_null rx1913_debug, debug_1398
    rx1913_cur."!cursor_debug"("PASS", "scoped", " at pos=", rx1913_pos)
  debug_1398:
    .return (rx1913_cur)
  rx1913_restart:
    if_null rx1913_debug, debug_1399
    rx1913_cur."!cursor_debug"("NEXT", "scoped")
  debug_1399:
  rx1913_fail:
    (rx1913_rep, rx1913_pos, $I10, $P10) = rx1913_cur."!mark_fail"(0)
    lt rx1913_pos, -1, rx1913_done
    eq rx1913_pos, -1, rx1913_fail
    jump $I10
  rx1913_done:
    rx1913_cur."!cursor_fail"()
    if_null rx1913_debug, debug_1400
    rx1913_cur."!cursor_debug"("FAIL", "scoped")
  debug_1400:
    .return (rx1913_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__scoped"  :subid("226_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1078
    $P110 = self."!PREFIX__!subrule"("ws", "")
    $P111 = self."!PREFIX__!subrule"("ws", "")
    $P112 = self."!PREFIX__!subrule"("ws", "")
    new $P113, "ResizablePMCArray"
    push $P113, $P110
    push $P113, $P111
    push $P113, $P112
    .return ($P113)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "typename"  :subid("227_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1084
    .const 'Sub' $P1921 = "228_1329260321.776" 
    capture_lex $P1921
    .local string rx1918_tgt
    .local int rx1918_pos
    .local int rx1918_off
    .local int rx1918_eos
    .local int rx1918_rep
    .local pmc rx1918_cur
    .local pmc rx1918_debug
    (rx1918_cur, rx1918_pos, rx1918_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1918_cur
    .local pmc match
    .lex "$/", match
    length rx1918_eos, rx1918_tgt
    gt rx1918_pos, rx1918_eos, rx1918_done
    set rx1918_off, 0
    lt rx1918_pos, 2, rx1918_start
    sub rx1918_off, rx1918_pos, 1
    substr rx1918_tgt, rx1918_tgt, rx1918_off
  rx1918_start:
    eq $I10, 1, rx1918_restart
    if_null rx1918_debug, debug_1401
    rx1918_cur."!cursor_debug"("START", "typename")
  debug_1401:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1919_done
    goto rxscan1919_scan
  rxscan1919_loop:
    (rx1918_pos) = rx1918_cur."from"()
    inc rx1918_pos
    rx1918_cur."!cursor_from"(rx1918_pos)
    ge rx1918_pos, rx1918_eos, rxscan1919_done
  rxscan1919_scan:
    set_addr $I10, rxscan1919_loop
    rx1918_cur."!mark_push"(0, rx1918_pos, $I10)
  rxscan1919_done:
.annotate 'line', 1085
  # rx subrule "name" subtype=capture negate=
    rx1918_cur."!cursor_pos"(rx1918_pos)
    $P10 = rx1918_cur."name"()
    unless $P10, rx1918_fail
    rx1918_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("name")
    rx1918_pos = $P10."pos"()
.annotate 'line', 1086
    rx1918_cur."!cursor_pos"(rx1918_pos)
    find_lex $P104, unicode:"$\x{a2}"
    $P105 = $P104."MATCH"()
    store_lex "$/", $P105
    .const 'Sub' $P1921 = "228_1329260321.776" 
    capture_lex $P1921
    $P106 = $P1921()
    unless $P106, rx1918_fail
.annotate 'line', 1084
  # rx pass
    rx1918_cur."!cursor_pass"(rx1918_pos, "typename")
    if_null rx1918_debug, debug_1408
    rx1918_cur."!cursor_debug"("PASS", "typename", " at pos=", rx1918_pos)
  debug_1408:
    .return (rx1918_cur)
  rx1918_restart:
    if_null rx1918_debug, debug_1409
    rx1918_cur."!cursor_debug"("NEXT", "typename")
  debug_1409:
  rx1918_fail:
    (rx1918_rep, rx1918_pos, $I10, $P10) = rx1918_cur."!mark_fail"(0)
    lt rx1918_pos, -1, rx1918_done
    eq rx1918_pos, -1, rx1918_fail
    jump $I10
  rx1918_done:
    rx1918_cur."!cursor_fail"()
    if_null rx1918_debug, debug_1410
    rx1918_cur."!cursor_debug"("FAIL", "typename")
  debug_1410:
    .return (rx1918_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1920"  :anon :subid("228_1329260321.776") :outer("227_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1086
    find_dynamic_lex $P108, "$*W"
    unless_null $P108, vivify_1402
    get_hll_global $P106, "GLOBAL"
    get_who $P107, $P106
    set $P108, $P107["$W"]
    unless_null $P108, vivify_1403
    die "Contextual $*W not found"
  vivify_1403:
  vivify_1402:
    find_lex $P109, "$/"
    unless_null $P109, vivify_1404
    new $P109, "Undef"
  vivify_1404:
    find_lex $P1922, "$/"
    unless_null $P1922, vivify_1405
    $P1922 = root_new ['parrot';'Hash']
  vivify_1405:
    set $P1923, $P1922["name"]
    unless_null $P1923, vivify_1406
    $P1923 = root_new ['parrot';'Hash']
  vivify_1406:
    set $P110, $P1923["identifier"]
    unless_null $P110, vivify_1407
    new $P110, "Undef"
  vivify_1407:
    $P111 = $P108."known_sym"($P109, $P110)
    .return ($P111)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__typename"  :subid("229_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1084
    $P107 = self."!PREFIX__!subrule"("name", "")
    new $P108, "ResizablePMCArray"
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "declarator"  :subid("230_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1089
    .local string rx1926_tgt
    .local int rx1926_pos
    .local int rx1926_off
    .local int rx1926_eos
    .local int rx1926_rep
    .local pmc rx1926_cur
    .local pmc rx1926_debug
    (rx1926_cur, rx1926_pos, rx1926_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1926_cur
    .local pmc match
    .lex "$/", match
    length rx1926_eos, rx1926_tgt
    gt rx1926_pos, rx1926_eos, rx1926_done
    set rx1926_off, 0
    lt rx1926_pos, 2, rx1926_start
    sub rx1926_off, rx1926_pos, 1
    substr rx1926_tgt, rx1926_tgt, rx1926_off
  rx1926_start:
    eq $I10, 1, rx1926_restart
    if_null rx1926_debug, debug_1411
    rx1926_cur."!cursor_debug"("START", "declarator")
  debug_1411:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1927_done
    goto rxscan1927_scan
  rxscan1927_loop:
    (rx1926_pos) = rx1926_cur."from"()
    inc rx1926_pos
    rx1926_cur."!cursor_from"(rx1926_pos)
    ge rx1926_pos, rx1926_eos, rxscan1927_done
  rxscan1927_scan:
    set_addr $I10, rxscan1927_loop
    rx1926_cur."!mark_push"(0, rx1926_pos, $I10)
  rxscan1927_done:
  alt1928_0:
    set_addr $I10, alt1928_1
    rx1926_cur."!mark_push"(0, rx1926_pos, $I10)
.annotate 'line', 1090
  # rx subrule "variable_declarator" subtype=capture negate=
    rx1926_cur."!cursor_pos"(rx1926_pos)
    $P10 = rx1926_cur."variable_declarator"()
    unless $P10, rx1926_fail
    rx1926_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("variable_declarator")
    rx1926_pos = $P10."pos"()
    goto alt1928_end
  alt1928_1:
.annotate 'line', 1091
  # rx subrule "routine_declarator" subtype=capture negate=
    rx1926_cur."!cursor_pos"(rx1926_pos)
    $P10 = rx1926_cur."routine_declarator"()
    unless $P10, rx1926_fail
    rx1926_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("routine_declarator")
    rx1926_pos = $P10."pos"()
  alt1928_end:
.annotate 'line', 1089
  # rx pass
    rx1926_cur."!cursor_pass"(rx1926_pos, "declarator")
    if_null rx1926_debug, debug_1412
    rx1926_cur."!cursor_debug"("PASS", "declarator", " at pos=", rx1926_pos)
  debug_1412:
    .return (rx1926_cur)
  rx1926_restart:
    if_null rx1926_debug, debug_1413
    rx1926_cur."!cursor_debug"("NEXT", "declarator")
  debug_1413:
  rx1926_fail:
    (rx1926_rep, rx1926_pos, $I10, $P10) = rx1926_cur."!mark_fail"(0)
    lt rx1926_pos, -1, rx1926_done
    eq rx1926_pos, -1, rx1926_fail
    jump $I10
  rx1926_done:
    rx1926_cur."!cursor_fail"()
    if_null rx1926_debug, debug_1414
    rx1926_cur."!cursor_debug"("FAIL", "declarator")
  debug_1414:
    .return (rx1926_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__declarator"  :subid("231_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1089
    $P104 = self."!PREFIX__!subrule"("routine_declarator", "")
    $P105 = self."!PREFIX__!subrule"("variable_declarator", "")
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "variable_declarator"  :subid("232_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1094
    .const 'Sub' $P1937 = "233_1329260321.776" 
    capture_lex $P1937
.annotate 'line', 1096
    new $P104, "Undef"
    set $P1931, $P104
    .lex "$*IN_DECL", $P1931
.annotate 'line', 1094
    .local string rx1932_tgt
    .local int rx1932_pos
    .local int rx1932_off
    .local int rx1932_eos
    .local int rx1932_rep
    .local pmc rx1932_cur
    .local pmc rx1932_debug
    (rx1932_cur, rx1932_pos, rx1932_tgt, $I10) = self."!cursor_start"()
    rx1932_cur."!cursor_caparray"("typename", "trait")
    .lex unicode:"$\x{a2}", rx1932_cur
    .local pmc match
    .lex "$/", match
    length rx1932_eos, rx1932_tgt
    gt rx1932_pos, rx1932_eos, rx1932_done
    set rx1932_off, 0
    lt rx1932_pos, 2, rx1932_start
    sub rx1932_off, rx1932_pos, 1
    substr rx1932_tgt, rx1932_tgt, rx1932_off
  rx1932_start:
    eq $I10, 1, rx1932_restart
    if_null rx1932_debug, debug_1415
    rx1932_cur."!cursor_debug"("START", "variable_declarator")
  debug_1415:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1933_done
    goto rxscan1933_scan
  rxscan1933_loop:
    (rx1932_pos) = rx1932_cur."from"()
    inc rx1932_pos
    rx1932_cur."!cursor_from"(rx1932_pos)
    ge rx1932_pos, rx1932_eos, rxscan1933_done
  rxscan1933_scan:
    set_addr $I10, rxscan1933_loop
    rx1932_cur."!mark_push"(0, rx1932_pos, $I10)
  rxscan1933_done:
  # rx subrule "ws" subtype=method negate=
    rx1932_cur."!cursor_pos"(rx1932_pos)
    $P10 = rx1932_cur."ws"()
    unless $P10, rx1932_fail
    rx1932_pos = $P10."pos"()
.annotate 'line', 1095
  # rx rxquantr1934 ** 0..1
    set_addr $I10, rxquantr1934_done
    rx1932_cur."!mark_push"(0, rx1932_pos, $I10)
  rxquantr1934_loop:
  # rx subrule "typename" subtype=capture negate=
    rx1932_cur."!cursor_pos"(rx1932_pos)
    $P10 = rx1932_cur."typename"()
    unless $P10, rx1932_fail
    goto rxsubrule1935_pass
  rxsubrule1935_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1932_fail
  rxsubrule1935_pass:
    set_addr $I10, rxsubrule1935_back
    rx1932_cur."!mark_push"(0, rx1932_pos, $I10, $P10)
    $P10."!cursor_names"("typename")
    rx1932_pos = $P10."pos"()
    set_addr $I10, rxquantr1934_done
    (rx1932_rep) = rx1932_cur."!mark_commit"($I10)
  rxquantr1934_done:
  # rx subrule "ws" subtype=method negate=
    rx1932_cur."!cursor_pos"(rx1932_pos)
    $P10 = rx1932_cur."ws"()
    unless $P10, rx1932_fail
    rx1932_pos = $P10."pos"()
.annotate 'line', 1096
    rx1932_cur."!cursor_pos"(rx1932_pos)
    new $P107, "String"
    assign $P107, "variable"
    set $P1931, $P107
  # rx subrule "ws" subtype=method negate=
    rx1932_cur."!cursor_pos"(rx1932_pos)
    $P10 = rx1932_cur."ws"()
    unless $P10, rx1932_fail
    rx1932_pos = $P10."pos"()
.annotate 'line', 1097
  # rx subrule "variable" subtype=capture negate=
    rx1932_cur."!cursor_pos"(rx1932_pos)
    $P10 = rx1932_cur."variable"()
    unless $P10, rx1932_fail
    rx1932_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("variable")
    rx1932_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1932_cur."!cursor_pos"(rx1932_pos)
    $P10 = rx1932_cur."ws"()
    unless $P10, rx1932_fail
    rx1932_pos = $P10."pos"()
.annotate 'line', 1098
    rx1932_cur."!cursor_pos"(rx1932_pos)
    find_lex $P110, unicode:"$\x{a2}"
    $P111 = $P110."MATCH"()
    store_lex "$/", $P111
    .const 'Sub' $P1937 = "233_1329260321.776" 
    capture_lex $P1937
    $P113 = $P1937()
  # rx subrule "ws" subtype=method negate=
    rx1932_cur."!cursor_pos"(rx1932_pos)
    $P10 = rx1932_cur."ws"()
    unless $P10, rx1932_fail
    rx1932_pos = $P10."pos"()
.annotate 'line', 1099
  # rx rxquantr1938 ** 0..*
    set_addr $I10, rxquantr1938_done
    rx1932_cur."!mark_push"(0, rx1932_pos, $I10)
  rxquantr1938_loop:
  # rx subrule "trait" subtype=capture negate=
    rx1932_cur."!cursor_pos"(rx1932_pos)
    $P10 = rx1932_cur."trait"()
    unless $P10, rx1932_fail
    goto rxsubrule1939_pass
  rxsubrule1939_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1932_fail
  rxsubrule1939_pass:
    set_addr $I10, rxsubrule1939_back
    rx1932_cur."!mark_push"(0, rx1932_pos, $I10, $P10)
    $P10."!cursor_names"("trait")
    rx1932_pos = $P10."pos"()
    set_addr $I10, rxquantr1938_done
    (rx1932_rep) = rx1932_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr1938_done
    rx1932_cur."!mark_push"(rx1932_rep, rx1932_pos, $I10)
    goto rxquantr1938_loop
  rxquantr1938_done:
  # rx subrule "ws" subtype=method negate=
    rx1932_cur."!cursor_pos"(rx1932_pos)
    $P10 = rx1932_cur."ws"()
    unless $P10, rx1932_fail
    rx1932_pos = $P10."pos"()
.annotate 'line', 1094
  # rx pass
    rx1932_cur."!cursor_pass"(rx1932_pos, "variable_declarator")
    if_null rx1932_debug, debug_1416
    rx1932_cur."!cursor_debug"("PASS", "variable_declarator", " at pos=", rx1932_pos)
  debug_1416:
    .return (rx1932_cur)
  rx1932_restart:
    if_null rx1932_debug, debug_1417
    rx1932_cur."!cursor_debug"("NEXT", "variable_declarator")
  debug_1417:
  rx1932_fail:
    (rx1932_rep, rx1932_pos, $I10, $P10) = rx1932_cur."!mark_fail"(0)
    lt rx1932_pos, -1, rx1932_done
    eq rx1932_pos, -1, rx1932_fail
    jump $I10
  rx1932_done:
    rx1932_cur."!cursor_fail"()
    if_null rx1932_debug, debug_1418
    rx1932_cur."!cursor_debug"("FAIL", "variable_declarator")
  debug_1418:
    .return (rx1932_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1936"  :anon :subid("233_1329260321.776") :outer("232_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1098
    new $P112, "Float"
    assign $P112, 0
    store_dynamic_lex "$*IN_DECL", $P112
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__variable_declarator"  :subid("234_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1094
    $P116 = self."!PREFIX__!subrule"("ws", "")
    new $P117, "ResizablePMCArray"
    push $P117, $P116
    .return ($P117)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "routine_declarator"  :subid("235_1329260321.776")
    .param pmc param_1942
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1102
    .lex "self", param_1942
    $P104 = param_1942."!protoregex"("routine_declarator")
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__routine_declarator"  :subid("236_1329260321.776")
    .param pmc param_1944
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1102
    .lex "self", param_1944
    $P105 = param_1944."!PREFIX__!protoregex"("routine_declarator")
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "routine_declarator:sym<sub>"  :subid("237_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1103
    .local string rx1946_tgt
    .local int rx1946_pos
    .local int rx1946_off
    .local int rx1946_eos
    .local int rx1946_rep
    .local pmc rx1946_cur
    .local pmc rx1946_debug
    (rx1946_cur, rx1946_pos, rx1946_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1946_cur
    .local pmc match
    .lex "$/", match
    length rx1946_eos, rx1946_tgt
    gt rx1946_pos, rx1946_eos, rx1946_done
    set rx1946_off, 0
    lt rx1946_pos, 2, rx1946_start
    sub rx1946_off, rx1946_pos, 1
    substr rx1946_tgt, rx1946_tgt, rx1946_off
  rx1946_start:
    eq $I10, 1, rx1946_restart
    if_null rx1946_debug, debug_1419
    rx1946_cur."!cursor_debug"("START", "routine_declarator:sym<sub>")
  debug_1419:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1947_done
    goto rxscan1947_scan
  rxscan1947_loop:
    (rx1946_pos) = rx1946_cur."from"()
    inc rx1946_pos
    rx1946_cur."!cursor_from"(rx1946_pos)
    ge rx1946_pos, rx1946_eos, rxscan1947_done
  rxscan1947_scan:
    set_addr $I10, rxscan1947_loop
    rx1946_cur."!mark_push"(0, rx1946_pos, $I10)
  rxscan1947_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_1948_fail
    rx1946_cur."!mark_push"(0, rx1946_pos, $I10)
  # rx literal  "sub"
    add $I11, rx1946_pos, 3
    gt $I11, rx1946_eos, rx1946_fail
    sub $I11, rx1946_pos, rx1946_off
    substr $S10, rx1946_tgt, $I11, 3
    ne $S10, "sub", rx1946_fail
    add rx1946_pos, 3
    set_addr $I10, rxcap_1948_fail
    ($I12, $I11) = rx1946_cur."!mark_peek"($I10)
    rx1946_cur."!cursor_pos"($I11)
    ($P10) = rx1946_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1946_pos, "")
    rx1946_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1948_done
  rxcap_1948_fail:
    goto rx1946_fail
  rxcap_1948_done:
  # rx subrule "routine_def" subtype=capture negate=
    rx1946_cur."!cursor_pos"(rx1946_pos)
    $P10 = rx1946_cur."routine_def"()
    unless $P10, rx1946_fail
    rx1946_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("routine_def")
    rx1946_pos = $P10."pos"()
  # rx pass
    rx1946_cur."!cursor_pass"(rx1946_pos, "routine_declarator:sym<sub>")
    if_null rx1946_debug, debug_1420
    rx1946_cur."!cursor_debug"("PASS", "routine_declarator:sym<sub>", " at pos=", rx1946_pos)
  debug_1420:
    .return (rx1946_cur)
  rx1946_restart:
    if_null rx1946_debug, debug_1421
    rx1946_cur."!cursor_debug"("NEXT", "routine_declarator:sym<sub>")
  debug_1421:
  rx1946_fail:
    (rx1946_rep, rx1946_pos, $I10, $P10) = rx1946_cur."!mark_fail"(0)
    lt rx1946_pos, -1, rx1946_done
    eq rx1946_pos, -1, rx1946_fail
    jump $I10
  rx1946_done:
    rx1946_cur."!cursor_fail"()
    if_null rx1946_debug, debug_1422
    rx1946_cur."!cursor_debug"("FAIL", "routine_declarator:sym<sub>")
  debug_1422:
    .return (rx1946_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__routine_declarator:sym<sub>"  :subid("238_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1103
    $P104 = self."!PREFIX__!subrule"("routine_def", "sub")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "routine_declarator:sym<method>"  :subid("239_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1104
    .local string rx1951_tgt
    .local int rx1951_pos
    .local int rx1951_off
    .local int rx1951_eos
    .local int rx1951_rep
    .local pmc rx1951_cur
    .local pmc rx1951_debug
    (rx1951_cur, rx1951_pos, rx1951_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1951_cur
    .local pmc match
    .lex "$/", match
    length rx1951_eos, rx1951_tgt
    gt rx1951_pos, rx1951_eos, rx1951_done
    set rx1951_off, 0
    lt rx1951_pos, 2, rx1951_start
    sub rx1951_off, rx1951_pos, 1
    substr rx1951_tgt, rx1951_tgt, rx1951_off
  rx1951_start:
    eq $I10, 1, rx1951_restart
    if_null rx1951_debug, debug_1423
    rx1951_cur."!cursor_debug"("START", "routine_declarator:sym<method>")
  debug_1423:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1952_done
    goto rxscan1952_scan
  rxscan1952_loop:
    (rx1951_pos) = rx1951_cur."from"()
    inc rx1951_pos
    rx1951_cur."!cursor_from"(rx1951_pos)
    ge rx1951_pos, rx1951_eos, rxscan1952_done
  rxscan1952_scan:
    set_addr $I10, rxscan1952_loop
    rx1951_cur."!mark_push"(0, rx1951_pos, $I10)
  rxscan1952_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_1953_fail
    rx1951_cur."!mark_push"(0, rx1951_pos, $I10)
  # rx literal  "method"
    add $I11, rx1951_pos, 6
    gt $I11, rx1951_eos, rx1951_fail
    sub $I11, rx1951_pos, rx1951_off
    substr $S10, rx1951_tgt, $I11, 6
    ne $S10, "method", rx1951_fail
    add rx1951_pos, 6
    set_addr $I10, rxcap_1953_fail
    ($I12, $I11) = rx1951_cur."!mark_peek"($I10)
    rx1951_cur."!cursor_pos"($I11)
    ($P10) = rx1951_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1951_pos, "")
    rx1951_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1953_done
  rxcap_1953_fail:
    goto rx1951_fail
  rxcap_1953_done:
  # rx subrule "method_def" subtype=capture negate=
    rx1951_cur."!cursor_pos"(rx1951_pos)
    $P10 = rx1951_cur."method_def"()
    unless $P10, rx1951_fail
    rx1951_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("method_def")
    rx1951_pos = $P10."pos"()
  # rx pass
    rx1951_cur."!cursor_pass"(rx1951_pos, "routine_declarator:sym<method>")
    if_null rx1951_debug, debug_1424
    rx1951_cur."!cursor_debug"("PASS", "routine_declarator:sym<method>", " at pos=", rx1951_pos)
  debug_1424:
    .return (rx1951_cur)
  rx1951_restart:
    if_null rx1951_debug, debug_1425
    rx1951_cur."!cursor_debug"("NEXT", "routine_declarator:sym<method>")
  debug_1425:
  rx1951_fail:
    (rx1951_rep, rx1951_pos, $I10, $P10) = rx1951_cur."!mark_fail"(0)
    lt rx1951_pos, -1, rx1951_done
    eq rx1951_pos, -1, rx1951_fail
    jump $I10
  rx1951_done:
    rx1951_cur."!cursor_fail"()
    if_null rx1951_debug, debug_1426
    rx1951_cur."!cursor_debug"("FAIL", "routine_declarator:sym<method>")
  debug_1426:
    .return (rx1951_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__routine_declarator:sym<method>"  :subid("240_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1104
    $P104 = self."!PREFIX__!subrule"("method_def", "method")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "routine_def"  :subid("241_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1107
    new $P104, "Undef"
    set $P1956, $P104
    .lex "$*RETURN_USED", $P1956
.annotate 'line', 1106
    .local string rx1957_tgt
    .local int rx1957_pos
    .local int rx1957_off
    .local int rx1957_eos
    .local int rx1957_rep
    .local pmc rx1957_cur
    .local pmc rx1957_debug
    (rx1957_cur, rx1957_pos, rx1957_tgt, $I10) = self."!cursor_start"()
    rx1957_cur."!cursor_caparray"("sigil", "deflongname", "trait")
    .lex unicode:"$\x{a2}", rx1957_cur
    .local pmc match
    .lex "$/", match
    length rx1957_eos, rx1957_tgt
    gt rx1957_pos, rx1957_eos, rx1957_done
    set rx1957_off, 0
    lt rx1957_pos, 2, rx1957_start
    sub rx1957_off, rx1957_pos, 1
    substr rx1957_tgt, rx1957_tgt, rx1957_off
  rx1957_start:
    eq $I10, 1, rx1957_restart
    if_null rx1957_debug, debug_1427
    rx1957_cur."!cursor_debug"("START", "routine_def")
  debug_1427:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1958_done
    goto rxscan1958_scan
  rxscan1958_loop:
    (rx1957_pos) = rx1957_cur."from"()
    inc rx1957_pos
    rx1957_cur."!cursor_from"(rx1957_pos)
    ge rx1957_pos, rx1957_eos, rxscan1958_done
  rxscan1958_scan:
    set_addr $I10, rxscan1958_loop
    rx1957_cur."!mark_push"(0, rx1957_pos, $I10)
  rxscan1958_done:
  # rx subrule "ws" subtype=method negate=
    rx1957_cur."!cursor_pos"(rx1957_pos)
    $P10 = rx1957_cur."ws"()
    unless $P10, rx1957_fail
    rx1957_pos = $P10."pos"()
.annotate 'line', 1107
    rx1957_cur."!cursor_pos"(rx1957_pos)
    new $P106, "Float"
    assign $P106, 0
    set $P1956, $P106
  # rx subrule "ws" subtype=method negate=
    rx1957_cur."!cursor_pos"(rx1957_pos)
    $P10 = rx1957_cur."ws"()
    unless $P10, rx1957_fail
    rx1957_pos = $P10."pos"()
.annotate 'line', 1108
  # rx rxquantr1959 ** 0..1
    set_addr $I10, rxquantr1959_done
    rx1957_cur."!mark_push"(0, rx1957_pos, $I10)
  rxquantr1959_loop:
  # rx subrule "ws" subtype=method negate=
    rx1957_cur."!cursor_pos"(rx1957_pos)
    $P10 = rx1957_cur."ws"()
    unless $P10, rx1957_fail
    rx1957_pos = $P10."pos"()
  # rx subcapture "sigil"
    set_addr $I10, rxcap_1961_fail
    rx1957_cur."!mark_push"(0, rx1957_pos, $I10)
  # rx rxquantr1960 ** 0..1
    set_addr $I10, rxquantr1960_done
    rx1957_cur."!mark_push"(0, rx1957_pos, $I10)
  rxquantr1960_loop:
  # rx literal  "&"
    add $I11, rx1957_pos, 1
    gt $I11, rx1957_eos, rx1957_fail
    sub $I11, rx1957_pos, rx1957_off
    ord $I11, rx1957_tgt, $I11
    ne $I11, 38, rx1957_fail
    add rx1957_pos, 1
    set_addr $I10, rxquantr1960_done
    (rx1957_rep) = rx1957_cur."!mark_commit"($I10)
  rxquantr1960_done:
    set_addr $I10, rxcap_1961_fail
    ($I12, $I11) = rx1957_cur."!mark_peek"($I10)
    rx1957_cur."!cursor_pos"($I11)
    ($P10) = rx1957_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1957_pos, "")
    rx1957_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sigil")
    goto rxcap_1961_done
  rxcap_1961_fail:
    goto rx1957_fail
  rxcap_1961_done:
  # rx subrule "deflongname" subtype=capture negate=
    rx1957_cur."!cursor_pos"(rx1957_pos)
    $P10 = rx1957_cur."deflongname"()
    unless $P10, rx1957_fail
    rx1957_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("deflongname")
    rx1957_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1957_cur."!cursor_pos"(rx1957_pos)
    $P10 = rx1957_cur."ws"()
    unless $P10, rx1957_fail
    rx1957_pos = $P10."pos"()
    set_addr $I10, rxquantr1959_done
    (rx1957_rep) = rx1957_cur."!mark_commit"($I10)
  rxquantr1959_done:
  # rx subrule "ws" subtype=method negate=
    rx1957_cur."!cursor_pos"(rx1957_pos)
    $P10 = rx1957_cur."ws"()
    unless $P10, rx1957_fail
    rx1957_pos = $P10."pos"()
.annotate 'line', 1109
  # rx subrule "newpad" subtype=method negate=
    rx1957_cur."!cursor_pos"(rx1957_pos)
    $P10 = rx1957_cur."newpad"()
    unless $P10, rx1957_fail
    rx1957_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1957_cur."!cursor_pos"(rx1957_pos)
    $P10 = rx1957_cur."ws"()
    unless $P10, rx1957_fail
    rx1957_pos = $P10."pos"()
  alt1962_0:
.annotate 'line', 1110
    set_addr $I10, alt1962_1
    rx1957_cur."!mark_push"(0, rx1957_pos, $I10)
  # rx subrule "ws" subtype=method negate=
    rx1957_cur."!cursor_pos"(rx1957_pos)
    $P10 = rx1957_cur."ws"()
    unless $P10, rx1957_fail
    rx1957_pos = $P10."pos"()
  # rx literal  "("
    add $I11, rx1957_pos, 1
    gt $I11, rx1957_eos, rx1957_fail
    sub $I11, rx1957_pos, rx1957_off
    ord $I11, rx1957_tgt, $I11
    ne $I11, 40, rx1957_fail
    add rx1957_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx1957_cur."!cursor_pos"(rx1957_pos)
    $P10 = rx1957_cur."ws"()
    unless $P10, rx1957_fail
    rx1957_pos = $P10."pos"()
  # rx subrule "signature" subtype=capture negate=
    rx1957_cur."!cursor_pos"(rx1957_pos)
    $P10 = rx1957_cur."signature"()
    unless $P10, rx1957_fail
    rx1957_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("signature")
    rx1957_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1957_cur."!cursor_pos"(rx1957_pos)
    $P10 = rx1957_cur."ws"()
    unless $P10, rx1957_fail
    rx1957_pos = $P10."pos"()
  # rx literal  ")"
    add $I11, rx1957_pos, 1
    gt $I11, rx1957_eos, rx1957_fail
    sub $I11, rx1957_pos, rx1957_off
    ord $I11, rx1957_tgt, $I11
    ne $I11, 41, rx1957_fail
    add rx1957_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx1957_cur."!cursor_pos"(rx1957_pos)
    $P10 = rx1957_cur."ws"()
    unless $P10, rx1957_fail
    rx1957_pos = $P10."pos"()
    goto alt1962_end
  alt1962_1:
.annotate 'line', 1111
  # rx subrule "ws" subtype=method negate=
    rx1957_cur."!cursor_pos"(rx1957_pos)
    $P10 = rx1957_cur."ws"()
    unless $P10, rx1957_fail
    rx1957_pos = $P10."pos"()
  # rx subrule "panic" subtype=method negate=
    rx1957_cur."!cursor_pos"(rx1957_pos)
    $P10 = rx1957_cur."panic"("Routine declaration requires a signature")
    unless $P10, rx1957_fail
    rx1957_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1957_cur."!cursor_pos"(rx1957_pos)
    $P10 = rx1957_cur."ws"()
    unless $P10, rx1957_fail
    rx1957_pos = $P10."pos"()
  alt1962_end:
  # rx subrule "ws" subtype=method negate=
    rx1957_cur."!cursor_pos"(rx1957_pos)
    $P10 = rx1957_cur."ws"()
    unless $P10, rx1957_fail
    rx1957_pos = $P10."pos"()
.annotate 'line', 1112
  # rx rxquantr1963 ** 0..*
    set_addr $I10, rxquantr1963_done
    rx1957_cur."!mark_push"(0, rx1957_pos, $I10)
  rxquantr1963_loop:
  # rx subrule "trait" subtype=capture negate=
    rx1957_cur."!cursor_pos"(rx1957_pos)
    $P10 = rx1957_cur."trait"()
    unless $P10, rx1957_fail
    goto rxsubrule1964_pass
  rxsubrule1964_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1957_fail
  rxsubrule1964_pass:
    set_addr $I10, rxsubrule1964_back
    rx1957_cur."!mark_push"(0, rx1957_pos, $I10, $P10)
    $P10."!cursor_names"("trait")
    rx1957_pos = $P10."pos"()
    set_addr $I10, rxquantr1963_done
    (rx1957_rep) = rx1957_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr1963_done
    rx1957_cur."!mark_push"(rx1957_rep, rx1957_pos, $I10)
    goto rxquantr1963_loop
  rxquantr1963_done:
  # rx subrule "ws" subtype=method negate=
    rx1957_cur."!cursor_pos"(rx1957_pos)
    $P10 = rx1957_cur."ws"()
    unless $P10, rx1957_fail
    rx1957_pos = $P10."pos"()
  alt1965_0:
.annotate 'line', 1113
    set_addr $I10, alt1965_1
    rx1957_cur."!mark_push"(0, rx1957_pos, $I10)
.annotate 'line', 1114
  # rx subrule "ws" subtype=method negate=
    rx1957_cur."!cursor_pos"(rx1957_pos)
    $P10 = rx1957_cur."ws"()
    unless $P10, rx1957_fail
    rx1957_pos = $P10."pos"()
  # rx subrule "onlystar" subtype=capture negate=
    rx1957_cur."!cursor_pos"(rx1957_pos)
    $P10 = rx1957_cur."onlystar"()
    unless $P10, rx1957_fail
    rx1957_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("onlystar")
    rx1957_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1957_cur."!cursor_pos"(rx1957_pos)
    $P10 = rx1957_cur."ws"()
    unless $P10, rx1957_fail
    rx1957_pos = $P10."pos"()
    goto alt1965_end
  alt1965_1:
.annotate 'line', 1115
  # rx subrule "ws" subtype=method negate=
    rx1957_cur."!cursor_pos"(rx1957_pos)
    $P10 = rx1957_cur."ws"()
    unless $P10, rx1957_fail
    rx1957_pos = $P10."pos"()
  # rx subrule "blockoid" subtype=capture negate=
    rx1957_cur."!cursor_pos"(rx1957_pos)
    $P10 = rx1957_cur."blockoid"()
    unless $P10, rx1957_fail
    rx1957_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("blockoid")
    rx1957_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1957_cur."!cursor_pos"(rx1957_pos)
    $P10 = rx1957_cur."ws"()
    unless $P10, rx1957_fail
    rx1957_pos = $P10."pos"()
  alt1965_end:
.annotate 'line', 1116
  # rx subrule "ws" subtype=method negate=
    rx1957_cur."!cursor_pos"(rx1957_pos)
    $P10 = rx1957_cur."ws"()
    unless $P10, rx1957_fail
    rx1957_pos = $P10."pos"()
.annotate 'line', 1106
  # rx pass
    rx1957_cur."!cursor_pass"(rx1957_pos, "routine_def")
    if_null rx1957_debug, debug_1428
    rx1957_cur."!cursor_debug"("PASS", "routine_def", " at pos=", rx1957_pos)
  debug_1428:
    .return (rx1957_cur)
  rx1957_restart:
    if_null rx1957_debug, debug_1429
    rx1957_cur."!cursor_debug"("NEXT", "routine_def")
  debug_1429:
  rx1957_fail:
    (rx1957_rep, rx1957_pos, $I10, $P10) = rx1957_cur."!mark_fail"(0)
    lt rx1957_pos, -1, rx1957_done
    eq rx1957_pos, -1, rx1957_fail
    jump $I10
  rx1957_done:
    rx1957_cur."!cursor_fail"()
    if_null rx1957_debug, debug_1430
    rx1957_cur."!cursor_debug"("FAIL", "routine_def")
  debug_1430:
    .return (rx1957_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__routine_def"  :subid("242_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1106
    $P125 = self."!PREFIX__!subrule"("ws", "")
    new $P126, "ResizablePMCArray"
    push $P126, $P125
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "method_def"  :subid("243_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1119
    .const 'Sub' $P1978 = "244_1329260321.776" 
    capture_lex $P1978
.annotate 'line', 1120
    new $P104, "Undef"
    set $P1968, $P104
    .lex "$*RETURN_USED", $P1968
.annotate 'line', 1121
    new $P105, "Undef"
    set $P1969, $P105
    .lex "$*INVOCANT_OK", $P1969
.annotate 'line', 1119
    .local string rx1970_tgt
    .local int rx1970_pos
    .local int rx1970_off
    .local int rx1970_eos
    .local int rx1970_rep
    .local pmc rx1970_cur
    .local pmc rx1970_debug
    (rx1970_cur, rx1970_pos, rx1970_tgt, $I10) = self."!cursor_start"()
    rx1970_cur."!cursor_caparray"("deflongname", "trait")
    .lex unicode:"$\x{a2}", rx1970_cur
    .local pmc match
    .lex "$/", match
    length rx1970_eos, rx1970_tgt
    gt rx1970_pos, rx1970_eos, rx1970_done
    set rx1970_off, 0
    lt rx1970_pos, 2, rx1970_start
    sub rx1970_off, rx1970_pos, 1
    substr rx1970_tgt, rx1970_tgt, rx1970_off
  rx1970_start:
    eq $I10, 1, rx1970_restart
    if_null rx1970_debug, debug_1431
    rx1970_cur."!cursor_debug"("START", "method_def")
  debug_1431:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1971_done
    goto rxscan1971_scan
  rxscan1971_loop:
    (rx1970_pos) = rx1970_cur."from"()
    inc rx1970_pos
    rx1970_cur."!cursor_from"(rx1970_pos)
    ge rx1970_pos, rx1970_eos, rxscan1971_done
  rxscan1971_scan:
    set_addr $I10, rxscan1971_loop
    rx1970_cur."!mark_push"(0, rx1970_pos, $I10)
  rxscan1971_done:
  # rx subrule "ws" subtype=method negate=
    rx1970_cur."!cursor_pos"(rx1970_pos)
    $P10 = rx1970_cur."ws"()
    unless $P10, rx1970_fail
    rx1970_pos = $P10."pos"()
.annotate 'line', 1120
    rx1970_cur."!cursor_pos"(rx1970_pos)
    new $P107, "Float"
    assign $P107, 0
    set $P1968, $P107
  # rx subrule "ws" subtype=method negate=
    rx1970_cur."!cursor_pos"(rx1970_pos)
    $P10 = rx1970_cur."ws"()
    unless $P10, rx1970_fail
    rx1970_pos = $P10."pos"()
.annotate 'line', 1121
    rx1970_cur."!cursor_pos"(rx1970_pos)
    new $P109, "Float"
    assign $P109, 1
    set $P1969, $P109
  # rx subrule "ws" subtype=method negate=
    rx1970_cur."!cursor_pos"(rx1970_pos)
    $P10 = rx1970_cur."ws"()
    unless $P10, rx1970_fail
    rx1970_pos = $P10."pos"()
.annotate 'line', 1122
  # rx subcapture "private"
    set_addr $I10, rxcap_1973_fail
    rx1970_cur."!mark_push"(0, rx1970_pos, $I10)
  # rx rxquantr1972 ** 0..1
    set_addr $I10, rxquantr1972_done
    rx1970_cur."!mark_push"(0, rx1970_pos, $I10)
  rxquantr1972_loop:
  # rx literal  "!"
    add $I11, rx1970_pos, 1
    gt $I11, rx1970_eos, rx1970_fail
    sub $I11, rx1970_pos, rx1970_off
    ord $I11, rx1970_tgt, $I11
    ne $I11, 33, rx1970_fail
    add rx1970_pos, 1
    set_addr $I10, rxquantr1972_done
    (rx1970_rep) = rx1970_cur."!mark_commit"($I10)
  rxquantr1972_done:
    set_addr $I10, rxcap_1973_fail
    ($I12, $I11) = rx1970_cur."!mark_peek"($I10)
    rx1970_cur."!cursor_pos"($I11)
    ($P10) = rx1970_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1970_pos, "")
    rx1970_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("private")
    goto rxcap_1973_done
  rxcap_1973_fail:
    goto rx1970_fail
  rxcap_1973_done:
  # rx subrule "ws" subtype=method negate=
    rx1970_cur."!cursor_pos"(rx1970_pos)
    $P10 = rx1970_cur."ws"()
    unless $P10, rx1970_fail
    rx1970_pos = $P10."pos"()
.annotate 'line', 1123
  # rx rxquantr1974 ** 0..1
    set_addr $I10, rxquantr1974_done
    rx1970_cur."!mark_push"(0, rx1970_pos, $I10)
  rxquantr1974_loop:
  # rx subrule "deflongname" subtype=capture negate=
    rx1970_cur."!cursor_pos"(rx1970_pos)
    $P10 = rx1970_cur."deflongname"()
    unless $P10, rx1970_fail
    goto rxsubrule1975_pass
  rxsubrule1975_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1970_fail
  rxsubrule1975_pass:
    set_addr $I10, rxsubrule1975_back
    rx1970_cur."!mark_push"(0, rx1970_pos, $I10, $P10)
    $P10."!cursor_names"("deflongname")
    rx1970_pos = $P10."pos"()
    set_addr $I10, rxquantr1974_done
    (rx1970_rep) = rx1970_cur."!mark_commit"($I10)
  rxquantr1974_done:
  # rx subrule "ws" subtype=method negate=
    rx1970_cur."!cursor_pos"(rx1970_pos)
    $P10 = rx1970_cur."ws"()
    unless $P10, rx1970_fail
    rx1970_pos = $P10."pos"()
.annotate 'line', 1124
  # rx subrule "newpad" subtype=method negate=
    rx1970_cur."!cursor_pos"(rx1970_pos)
    $P10 = rx1970_cur."newpad"()
    unless $P10, rx1970_fail
    rx1970_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1970_cur."!cursor_pos"(rx1970_pos)
    $P10 = rx1970_cur."ws"()
    unless $P10, rx1970_fail
    rx1970_pos = $P10."pos"()
  alt1976_0:
.annotate 'line', 1125
    set_addr $I10, alt1976_1
    rx1970_cur."!mark_push"(0, rx1970_pos, $I10)
  # rx subrule "ws" subtype=method negate=
    rx1970_cur."!cursor_pos"(rx1970_pos)
    $P10 = rx1970_cur."ws"()
    unless $P10, rx1970_fail
    rx1970_pos = $P10."pos"()
  # rx literal  "("
    add $I11, rx1970_pos, 1
    gt $I11, rx1970_eos, rx1970_fail
    sub $I11, rx1970_pos, rx1970_off
    ord $I11, rx1970_tgt, $I11
    ne $I11, 40, rx1970_fail
    add rx1970_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx1970_cur."!cursor_pos"(rx1970_pos)
    $P10 = rx1970_cur."ws"()
    unless $P10, rx1970_fail
    rx1970_pos = $P10."pos"()
  # rx subrule "signature" subtype=capture negate=
    rx1970_cur."!cursor_pos"(rx1970_pos)
    $P10 = rx1970_cur."signature"()
    unless $P10, rx1970_fail
    rx1970_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("signature")
    rx1970_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1970_cur."!cursor_pos"(rx1970_pos)
    $P10 = rx1970_cur."ws"()
    unless $P10, rx1970_fail
    rx1970_pos = $P10."pos"()
  # rx literal  ")"
    add $I11, rx1970_pos, 1
    gt $I11, rx1970_eos, rx1970_fail
    sub $I11, rx1970_pos, rx1970_off
    ord $I11, rx1970_tgt, $I11
    ne $I11, 41, rx1970_fail
    add rx1970_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx1970_cur."!cursor_pos"(rx1970_pos)
    $P10 = rx1970_cur."ws"()
    unless $P10, rx1970_fail
    rx1970_pos = $P10."pos"()
    goto alt1976_end
  alt1976_1:
.annotate 'line', 1126
  # rx subrule "ws" subtype=method negate=
    rx1970_cur."!cursor_pos"(rx1970_pos)
    $P10 = rx1970_cur."ws"()
    unless $P10, rx1970_fail
    rx1970_pos = $P10."pos"()
  # rx subrule "panic" subtype=method negate=
    rx1970_cur."!cursor_pos"(rx1970_pos)
    $P10 = rx1970_cur."panic"("Routine declaration requires a signature")
    unless $P10, rx1970_fail
    rx1970_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1970_cur."!cursor_pos"(rx1970_pos)
    $P10 = rx1970_cur."ws"()
    unless $P10, rx1970_fail
    rx1970_pos = $P10."pos"()
  alt1976_end:
  # rx subrule "ws" subtype=method negate=
    rx1970_cur."!cursor_pos"(rx1970_pos)
    $P10 = rx1970_cur."ws"()
    unless $P10, rx1970_fail
    rx1970_pos = $P10."pos"()
.annotate 'line', 1127
    rx1970_cur."!cursor_pos"(rx1970_pos)
    find_lex $P121, unicode:"$\x{a2}"
    $P122 = $P121."MATCH"()
    store_lex "$/", $P122
    .const 'Sub' $P1978 = "244_1329260321.776" 
    capture_lex $P1978
    $P124 = $P1978()
  # rx subrule "ws" subtype=method negate=
    rx1970_cur."!cursor_pos"(rx1970_pos)
    $P10 = rx1970_cur."ws"()
    unless $P10, rx1970_fail
    rx1970_pos = $P10."pos"()
.annotate 'line', 1128
  # rx rxquantr1979 ** 0..*
    set_addr $I10, rxquantr1979_done
    rx1970_cur."!mark_push"(0, rx1970_pos, $I10)
  rxquantr1979_loop:
  # rx subrule "trait" subtype=capture negate=
    rx1970_cur."!cursor_pos"(rx1970_pos)
    $P10 = rx1970_cur."trait"()
    unless $P10, rx1970_fail
    goto rxsubrule1980_pass
  rxsubrule1980_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1970_fail
  rxsubrule1980_pass:
    set_addr $I10, rxsubrule1980_back
    rx1970_cur."!mark_push"(0, rx1970_pos, $I10, $P10)
    $P10."!cursor_names"("trait")
    rx1970_pos = $P10."pos"()
    set_addr $I10, rxquantr1979_done
    (rx1970_rep) = rx1970_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr1979_done
    rx1970_cur."!mark_push"(rx1970_rep, rx1970_pos, $I10)
    goto rxquantr1979_loop
  rxquantr1979_done:
  # rx subrule "ws" subtype=method negate=
    rx1970_cur."!cursor_pos"(rx1970_pos)
    $P10 = rx1970_cur."ws"()
    unless $P10, rx1970_fail
    rx1970_pos = $P10."pos"()
  alt1981_0:
.annotate 'line', 1129
    set_addr $I10, alt1981_1
    rx1970_cur."!mark_push"(0, rx1970_pos, $I10)
.annotate 'line', 1130
  # rx subrule "ws" subtype=method negate=
    rx1970_cur."!cursor_pos"(rx1970_pos)
    $P10 = rx1970_cur."ws"()
    unless $P10, rx1970_fail
    rx1970_pos = $P10."pos"()
  # rx subrule "onlystar" subtype=capture negate=
    rx1970_cur."!cursor_pos"(rx1970_pos)
    $P10 = rx1970_cur."onlystar"()
    unless $P10, rx1970_fail
    rx1970_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("onlystar")
    rx1970_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1970_cur."!cursor_pos"(rx1970_pos)
    $P10 = rx1970_cur."ws"()
    unless $P10, rx1970_fail
    rx1970_pos = $P10."pos"()
    goto alt1981_end
  alt1981_1:
.annotate 'line', 1131
  # rx subrule "ws" subtype=method negate=
    rx1970_cur."!cursor_pos"(rx1970_pos)
    $P10 = rx1970_cur."ws"()
    unless $P10, rx1970_fail
    rx1970_pos = $P10."pos"()
  # rx subrule "blockoid" subtype=capture negate=
    rx1970_cur."!cursor_pos"(rx1970_pos)
    $P10 = rx1970_cur."blockoid"()
    unless $P10, rx1970_fail
    rx1970_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("blockoid")
    rx1970_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1970_cur."!cursor_pos"(rx1970_pos)
    $P10 = rx1970_cur."ws"()
    unless $P10, rx1970_fail
    rx1970_pos = $P10."pos"()
  alt1981_end:
.annotate 'line', 1132
  # rx subrule "ws" subtype=method negate=
    rx1970_cur."!cursor_pos"(rx1970_pos)
    $P10 = rx1970_cur."ws"()
    unless $P10, rx1970_fail
    rx1970_pos = $P10."pos"()
.annotate 'line', 1119
  # rx pass
    rx1970_cur."!cursor_pass"(rx1970_pos, "method_def")
    if_null rx1970_debug, debug_1432
    rx1970_cur."!cursor_debug"("PASS", "method_def", " at pos=", rx1970_pos)
  debug_1432:
    .return (rx1970_cur)
  rx1970_restart:
    if_null rx1970_debug, debug_1433
    rx1970_cur."!cursor_debug"("NEXT", "method_def")
  debug_1433:
  rx1970_fail:
    (rx1970_rep, rx1970_pos, $I10, $P10) = rx1970_cur."!mark_fail"(0)
    lt rx1970_pos, -1, rx1970_done
    eq rx1970_pos, -1, rx1970_fail
    jump $I10
  rx1970_done:
    rx1970_cur."!cursor_fail"()
    if_null rx1970_debug, debug_1434
    rx1970_cur."!cursor_debug"("FAIL", "method_def")
  debug_1434:
    .return (rx1970_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1977"  :anon :subid("244_1329260321.776") :outer("243_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1127
    new $P123, "Float"
    assign $P123, 0
    store_dynamic_lex "$*INVOCANT_OK", $P123
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__method_def"  :subid("245_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1119
    $P132 = self."!PREFIX__!subrule"("ws", "")
    new $P133, "ResizablePMCArray"
    push $P133, $P132
    .return ($P133)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "onlystar"  :subid("246_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1135
    .const 'Sub' $P1987 = "247_1329260321.776" 
    capture_lex $P1987
    .local string rx1984_tgt
    .local int rx1984_pos
    .local int rx1984_off
    .local int rx1984_eos
    .local int rx1984_rep
    .local pmc rx1984_cur
    .local pmc rx1984_debug
    (rx1984_cur, rx1984_pos, rx1984_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1984_cur
    .local pmc match
    .lex "$/", match
    length rx1984_eos, rx1984_tgt
    gt rx1984_pos, rx1984_eos, rx1984_done
    set rx1984_off, 0
    lt rx1984_pos, 2, rx1984_start
    sub rx1984_off, rx1984_pos, 1
    substr rx1984_tgt, rx1984_tgt, rx1984_off
  rx1984_start:
    eq $I10, 1, rx1984_restart
    if_null rx1984_debug, debug_1435
    rx1984_cur."!cursor_debug"("START", "onlystar")
  debug_1435:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1985_done
    goto rxscan1985_scan
  rxscan1985_loop:
    (rx1984_pos) = rx1984_cur."from"()
    inc rx1984_pos
    rx1984_cur."!cursor_from"(rx1984_pos)
    ge rx1984_pos, rx1984_eos, rxscan1985_done
  rxscan1985_scan:
    set_addr $I10, rxscan1985_loop
    rx1984_cur."!mark_push"(0, rx1984_pos, $I10)
  rxscan1985_done:
.annotate 'line', 1136
    rx1984_cur."!cursor_pos"(rx1984_pos)
    find_lex $P104, unicode:"$\x{a2}"
    $P105 = $P104."MATCH"()
    store_lex "$/", $P105
    .const 'Sub' $P1987 = "247_1329260321.776" 
    capture_lex $P1987
    $P106 = $P1987()
    unless $P106, rx1984_fail
.annotate 'line', 1137
  # rx literal  "{"
    add $I11, rx1984_pos, 1
    gt $I11, rx1984_eos, rx1984_fail
    sub $I11, rx1984_pos, rx1984_off
    ord $I11, rx1984_tgt, $I11
    ne $I11, 123, rx1984_fail
    add rx1984_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx1984_cur."!cursor_pos"(rx1984_pos)
    $P10 = rx1984_cur."ws"()
    unless $P10, rx1984_fail
    rx1984_pos = $P10."pos"()
  # rx literal  "*"
    add $I11, rx1984_pos, 1
    gt $I11, rx1984_eos, rx1984_fail
    sub $I11, rx1984_pos, rx1984_off
    ord $I11, rx1984_tgt, $I11
    ne $I11, 42, rx1984_fail
    add rx1984_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx1984_cur."!cursor_pos"(rx1984_pos)
    $P10 = rx1984_cur."ws"()
    unless $P10, rx1984_fail
    rx1984_pos = $P10."pos"()
  # rx literal  "}"
    add $I11, rx1984_pos, 1
    gt $I11, rx1984_eos, rx1984_fail
    sub $I11, rx1984_pos, rx1984_off
    ord $I11, rx1984_tgt, $I11
    ne $I11, 125, rx1984_fail
    add rx1984_pos, 1
.annotate 'line', 1138
  # rx subrule "ENDSTMT" subtype=zerowidth negate=
    rx1984_cur."!cursor_pos"(rx1984_pos)
    $P10 = rx1984_cur."ENDSTMT"()
    unless $P10, rx1984_fail
.annotate 'line', 1139
  # rx subrule "finishpad" subtype=method negate=
    rx1984_cur."!cursor_pos"(rx1984_pos)
    $P10 = rx1984_cur."finishpad"()
    unless $P10, rx1984_fail
    rx1984_pos = $P10."pos"()
.annotate 'line', 1135
  # rx pass
    rx1984_cur."!cursor_pass"(rx1984_pos, "onlystar")
    if_null rx1984_debug, debug_1438
    rx1984_cur."!cursor_debug"("PASS", "onlystar", " at pos=", rx1984_pos)
  debug_1438:
    .return (rx1984_cur)
  rx1984_restart:
    if_null rx1984_debug, debug_1439
    rx1984_cur."!cursor_debug"("NEXT", "onlystar")
  debug_1439:
  rx1984_fail:
    (rx1984_rep, rx1984_pos, $I10, $P10) = rx1984_cur."!mark_fail"(0)
    lt rx1984_pos, -1, rx1984_done
    eq rx1984_pos, -1, rx1984_fail
    jump $I10
  rx1984_done:
    rx1984_cur."!cursor_fail"()
    if_null rx1984_debug, debug_1440
    rx1984_cur."!cursor_debug"("FAIL", "onlystar")
  debug_1440:
    .return (rx1984_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1986"  :anon :subid("247_1329260321.776") :outer("246_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1136
    find_dynamic_lex $P108, "$*MULTINESS"
    unless_null $P108, vivify_1436
    get_hll_global $P106, "GLOBAL"
    get_who $P107, $P106
    set $P108, $P107["$MULTINESS"]
    unless_null $P108, vivify_1437
    die "Contextual $*MULTINESS not found"
  vivify_1437:
  vivify_1436:
    set $S100, $P108
    iseq $I100, $S100, "proto"
    .return ($I100)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__onlystar"  :subid("248_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1135
    new $P107, "ResizablePMCArray"
    push $P107, ""
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "multi_declarator"  :subid("249_1329260321.776")
    .param pmc param_1990
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1142
    .lex "self", param_1990
    $P104 = param_1990."!protoregex"("multi_declarator")
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__multi_declarator"  :subid("250_1329260321.776")
    .param pmc param_1992
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1142
    .lex "self", param_1992
    $P105 = param_1992."!PREFIX__!protoregex"("multi_declarator")
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "multi_declarator:sym<multi>"  :subid("251_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1144
    new $P104, "Undef"
    set $P1994, $P104
    .lex "$*MULTINESS", $P1994
.annotate 'line', 1143
    .local string rx1995_tgt
    .local int rx1995_pos
    .local int rx1995_off
    .local int rx1995_eos
    .local int rx1995_rep
    .local pmc rx1995_cur
    .local pmc rx1995_debug
    (rx1995_cur, rx1995_pos, rx1995_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1995_cur
    .local pmc match
    .lex "$/", match
    length rx1995_eos, rx1995_tgt
    gt rx1995_pos, rx1995_eos, rx1995_done
    set rx1995_off, 0
    lt rx1995_pos, 2, rx1995_start
    sub rx1995_off, rx1995_pos, 1
    substr rx1995_tgt, rx1995_tgt, rx1995_off
  rx1995_start:
    eq $I10, 1, rx1995_restart
    if_null rx1995_debug, debug_1441
    rx1995_cur."!cursor_debug"("START", "multi_declarator:sym<multi>")
  debug_1441:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1996_done
    goto rxscan1996_scan
  rxscan1996_loop:
    (rx1995_pos) = rx1995_cur."from"()
    inc rx1995_pos
    rx1995_cur."!cursor_from"(rx1995_pos)
    ge rx1995_pos, rx1995_eos, rxscan1996_done
  rxscan1996_scan:
    set_addr $I10, rxscan1996_loop
    rx1995_cur."!mark_push"(0, rx1995_pos, $I10)
  rxscan1996_done:
.annotate 'line', 1144
    rx1995_cur."!cursor_pos"(rx1995_pos)
    new $P105, "String"
    assign $P105, "multi"
    set $P1994, $P105
.annotate 'line', 1145
  # rx subcapture "sym"
    set_addr $I10, rxcap_1997_fail
    rx1995_cur."!mark_push"(0, rx1995_pos, $I10)
  # rx literal  "multi"
    add $I11, rx1995_pos, 5
    gt $I11, rx1995_eos, rx1995_fail
    sub $I11, rx1995_pos, rx1995_off
    substr $S10, rx1995_tgt, $I11, 5
    ne $S10, "multi", rx1995_fail
    add rx1995_pos, 5
    set_addr $I10, rxcap_1997_fail
    ($I12, $I11) = rx1995_cur."!mark_peek"($I10)
    rx1995_cur."!cursor_pos"($I11)
    ($P10) = rx1995_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1995_pos, "")
    rx1995_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1997_done
  rxcap_1997_fail:
    goto rx1995_fail
  rxcap_1997_done:
.annotate 'line', 1146
  # rx subrule "ws" subtype=method negate=
    rx1995_cur."!cursor_pos"(rx1995_pos)
    $P10 = rx1995_cur."ws"()
    unless $P10, rx1995_fail
    rx1995_pos = $P10."pos"()
  alt1998_0:
    set_addr $I10, alt1998_1
    rx1995_cur."!mark_push"(0, rx1995_pos, $I10)
  # rx subrule "declarator" subtype=capture negate=
    rx1995_cur."!cursor_pos"(rx1995_pos)
    $P10 = rx1995_cur."declarator"()
    unless $P10, rx1995_fail
    rx1995_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("declarator")
    rx1995_pos = $P10."pos"()
    goto alt1998_end
  alt1998_1:
    set_addr $I10, alt1998_2
    rx1995_cur."!mark_push"(0, rx1995_pos, $I10)
  # rx subrule "routine_def" subtype=capture negate=
    rx1995_cur."!cursor_pos"(rx1995_pos)
    $P10 = rx1995_cur."routine_def"()
    unless $P10, rx1995_fail
    rx1995_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("routine_def")
    rx1995_pos = $P10."pos"()
    goto alt1998_end
  alt1998_2:
  # rx subrule "panic" subtype=method negate=
    rx1995_cur."!cursor_pos"(rx1995_pos)
    $P10 = rx1995_cur."panic"("Malformed multi")
    unless $P10, rx1995_fail
    rx1995_pos = $P10."pos"()
  alt1998_end:
.annotate 'line', 1143
  # rx pass
    rx1995_cur."!cursor_pass"(rx1995_pos, "multi_declarator:sym<multi>")
    if_null rx1995_debug, debug_1442
    rx1995_cur."!cursor_debug"("PASS", "multi_declarator:sym<multi>", " at pos=", rx1995_pos)
  debug_1442:
    .return (rx1995_cur)
  rx1995_restart:
    if_null rx1995_debug, debug_1443
    rx1995_cur."!cursor_debug"("NEXT", "multi_declarator:sym<multi>")
  debug_1443:
  rx1995_fail:
    (rx1995_rep, rx1995_pos, $I10, $P10) = rx1995_cur."!mark_fail"(0)
    lt rx1995_pos, -1, rx1995_done
    eq rx1995_pos, -1, rx1995_fail
    jump $I10
  rx1995_done:
    rx1995_cur."!cursor_fail"()
    if_null rx1995_debug, debug_1444
    rx1995_cur."!cursor_debug"("FAIL", "multi_declarator:sym<multi>")
  debug_1444:
    .return (rx1995_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__multi_declarator:sym<multi>"  :subid("252_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1143
    $P106 = self."!PREFIX__!subrule"("ws", "multi")
    new $P107, "ResizablePMCArray"
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "multi_declarator:sym<proto>"  :subid("253_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1149
    new $P104, "Undef"
    set $P2001, $P104
    .lex "$*MULTINESS", $P2001
.annotate 'line', 1148
    .local string rx2002_tgt
    .local int rx2002_pos
    .local int rx2002_off
    .local int rx2002_eos
    .local int rx2002_rep
    .local pmc rx2002_cur
    .local pmc rx2002_debug
    (rx2002_cur, rx2002_pos, rx2002_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2002_cur
    .local pmc match
    .lex "$/", match
    length rx2002_eos, rx2002_tgt
    gt rx2002_pos, rx2002_eos, rx2002_done
    set rx2002_off, 0
    lt rx2002_pos, 2, rx2002_start
    sub rx2002_off, rx2002_pos, 1
    substr rx2002_tgt, rx2002_tgt, rx2002_off
  rx2002_start:
    eq $I10, 1, rx2002_restart
    if_null rx2002_debug, debug_1445
    rx2002_cur."!cursor_debug"("START", "multi_declarator:sym<proto>")
  debug_1445:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2003_done
    goto rxscan2003_scan
  rxscan2003_loop:
    (rx2002_pos) = rx2002_cur."from"()
    inc rx2002_pos
    rx2002_cur."!cursor_from"(rx2002_pos)
    ge rx2002_pos, rx2002_eos, rxscan2003_done
  rxscan2003_scan:
    set_addr $I10, rxscan2003_loop
    rx2002_cur."!mark_push"(0, rx2002_pos, $I10)
  rxscan2003_done:
.annotate 'line', 1149
    rx2002_cur."!cursor_pos"(rx2002_pos)
    new $P105, "String"
    assign $P105, "proto"
    set $P2001, $P105
.annotate 'line', 1150
  # rx subcapture "sym"
    set_addr $I10, rxcap_2004_fail
    rx2002_cur."!mark_push"(0, rx2002_pos, $I10)
  # rx literal  "proto"
    add $I11, rx2002_pos, 5
    gt $I11, rx2002_eos, rx2002_fail
    sub $I11, rx2002_pos, rx2002_off
    substr $S10, rx2002_tgt, $I11, 5
    ne $S10, "proto", rx2002_fail
    add rx2002_pos, 5
    set_addr $I10, rxcap_2004_fail
    ($I12, $I11) = rx2002_cur."!mark_peek"($I10)
    rx2002_cur."!cursor_pos"($I11)
    ($P10) = rx2002_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2002_pos, "")
    rx2002_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2004_done
  rxcap_2004_fail:
    goto rx2002_fail
  rxcap_2004_done:
.annotate 'line', 1151
  # rx subrule "ws" subtype=method negate=
    rx2002_cur."!cursor_pos"(rx2002_pos)
    $P10 = rx2002_cur."ws"()
    unless $P10, rx2002_fail
    rx2002_pos = $P10."pos"()
  alt2005_0:
    set_addr $I10, alt2005_1
    rx2002_cur."!mark_push"(0, rx2002_pos, $I10)
  # rx subrule "declarator" subtype=capture negate=
    rx2002_cur."!cursor_pos"(rx2002_pos)
    $P10 = rx2002_cur."declarator"()
    unless $P10, rx2002_fail
    rx2002_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("declarator")
    rx2002_pos = $P10."pos"()
    goto alt2005_end
  alt2005_1:
    set_addr $I10, alt2005_2
    rx2002_cur."!mark_push"(0, rx2002_pos, $I10)
  # rx subrule "routine_def" subtype=capture negate=
    rx2002_cur."!cursor_pos"(rx2002_pos)
    $P10 = rx2002_cur."routine_def"()
    unless $P10, rx2002_fail
    rx2002_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("routine_def")
    rx2002_pos = $P10."pos"()
    goto alt2005_end
  alt2005_2:
  # rx subrule "panic" subtype=method negate=
    rx2002_cur."!cursor_pos"(rx2002_pos)
    $P10 = rx2002_cur."panic"("Malformed proto")
    unless $P10, rx2002_fail
    rx2002_pos = $P10."pos"()
  alt2005_end:
.annotate 'line', 1148
  # rx pass
    rx2002_cur."!cursor_pass"(rx2002_pos, "multi_declarator:sym<proto>")
    if_null rx2002_debug, debug_1446
    rx2002_cur."!cursor_debug"("PASS", "multi_declarator:sym<proto>", " at pos=", rx2002_pos)
  debug_1446:
    .return (rx2002_cur)
  rx2002_restart:
    if_null rx2002_debug, debug_1447
    rx2002_cur."!cursor_debug"("NEXT", "multi_declarator:sym<proto>")
  debug_1447:
  rx2002_fail:
    (rx2002_rep, rx2002_pos, $I10, $P10) = rx2002_cur."!mark_fail"(0)
    lt rx2002_pos, -1, rx2002_done
    eq rx2002_pos, -1, rx2002_fail
    jump $I10
  rx2002_done:
    rx2002_cur."!cursor_fail"()
    if_null rx2002_debug, debug_1448
    rx2002_cur."!cursor_debug"("FAIL", "multi_declarator:sym<proto>")
  debug_1448:
    .return (rx2002_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__multi_declarator:sym<proto>"  :subid("254_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1148
    $P106 = self."!PREFIX__!subrule"("ws", "proto")
    new $P107, "ResizablePMCArray"
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "multi_declarator:sym<null>"  :subid("255_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1154
    new $P104, "Undef"
    set $P2008, $P104
    .lex "$*MULTINESS", $P2008
.annotate 'line', 1153
    .local string rx2009_tgt
    .local int rx2009_pos
    .local int rx2009_off
    .local int rx2009_eos
    .local int rx2009_rep
    .local pmc rx2009_cur
    .local pmc rx2009_debug
    (rx2009_cur, rx2009_pos, rx2009_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2009_cur
    .local pmc match
    .lex "$/", match
    length rx2009_eos, rx2009_tgt
    gt rx2009_pos, rx2009_eos, rx2009_done
    set rx2009_off, 0
    lt rx2009_pos, 2, rx2009_start
    sub rx2009_off, rx2009_pos, 1
    substr rx2009_tgt, rx2009_tgt, rx2009_off
  rx2009_start:
    eq $I10, 1, rx2009_restart
    if_null rx2009_debug, debug_1449
    rx2009_cur."!cursor_debug"("START", "multi_declarator:sym<null>")
  debug_1449:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2010_done
    goto rxscan2010_scan
  rxscan2010_loop:
    (rx2009_pos) = rx2009_cur."from"()
    inc rx2009_pos
    rx2009_cur."!cursor_from"(rx2009_pos)
    ge rx2009_pos, rx2009_eos, rxscan2010_done
  rxscan2010_scan:
    set_addr $I10, rxscan2010_loop
    rx2009_cur."!mark_push"(0, rx2009_pos, $I10)
  rxscan2010_done:
.annotate 'line', 1154
    rx2009_cur."!cursor_pos"(rx2009_pos)
    new $P105, "String"
    assign $P105, ""
    set $P2008, $P105
.annotate 'line', 1155
  # rx subrule "declarator" subtype=capture negate=
    rx2009_cur."!cursor_pos"(rx2009_pos)
    $P10 = rx2009_cur."declarator"()
    unless $P10, rx2009_fail
    rx2009_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("declarator")
    rx2009_pos = $P10."pos"()
.annotate 'line', 1153
  # rx pass
    rx2009_cur."!cursor_pass"(rx2009_pos, "multi_declarator:sym<null>")
    if_null rx2009_debug, debug_1450
    rx2009_cur."!cursor_debug"("PASS", "multi_declarator:sym<null>", " at pos=", rx2009_pos)
  debug_1450:
    .return (rx2009_cur)
  rx2009_restart:
    if_null rx2009_debug, debug_1451
    rx2009_cur."!cursor_debug"("NEXT", "multi_declarator:sym<null>")
  debug_1451:
  rx2009_fail:
    (rx2009_rep, rx2009_pos, $I10, $P10) = rx2009_cur."!mark_fail"(0)
    lt rx2009_pos, -1, rx2009_done
    eq rx2009_pos, -1, rx2009_fail
    jump $I10
  rx2009_done:
    rx2009_cur."!cursor_fail"()
    if_null rx2009_debug, debug_1452
    rx2009_cur."!cursor_debug"("FAIL", "multi_declarator:sym<null>")
  debug_1452:
    .return (rx2009_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__multi_declarator:sym<null>"  :subid("256_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1153
    $P106 = self."!PREFIX__!subrule"("declarator", "")
    new $P107, "ResizablePMCArray"
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "signature"  :subid("257_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1158
    .const 'Sub' $P2017 = "258_1329260321.776" 
    capture_lex $P2017
    .local string rx2013_tgt
    .local int rx2013_pos
    .local int rx2013_off
    .local int rx2013_eos
    .local int rx2013_rep
    .local pmc rx2013_cur
    .local pmc rx2013_debug
    (rx2013_cur, rx2013_pos, rx2013_tgt, $I10) = self."!cursor_start"()
    rx2013_cur."!cursor_caparray"("invocant", "parameter")
    .lex unicode:"$\x{a2}", rx2013_cur
    .local pmc match
    .lex "$/", match
    length rx2013_eos, rx2013_tgt
    gt rx2013_pos, rx2013_eos, rx2013_done
    set rx2013_off, 0
    lt rx2013_pos, 2, rx2013_start
    sub rx2013_off, rx2013_pos, 1
    substr rx2013_tgt, rx2013_tgt, rx2013_off
  rx2013_start:
    eq $I10, 1, rx2013_restart
    if_null rx2013_debug, debug_1453
    rx2013_cur."!cursor_debug"("START", "signature")
  debug_1453:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2014_done
    goto rxscan2014_scan
  rxscan2014_loop:
    (rx2013_pos) = rx2013_cur."from"()
    inc rx2013_pos
    rx2013_cur."!cursor_from"(rx2013_pos)
    ge rx2013_pos, rx2013_eos, rxscan2014_done
  rxscan2014_scan:
    set_addr $I10, rxscan2014_loop
    rx2013_cur."!mark_push"(0, rx2013_pos, $I10)
  rxscan2014_done:
.annotate 'line', 1159
  # rx rxquantr2015 ** 0..1
    set_addr $I10, rxquantr2015_done
    rx2013_cur."!mark_push"(0, rx2013_pos, $I10)
  rxquantr2015_loop:
    rx2013_cur."!cursor_pos"(rx2013_pos)
    find_lex $P104, unicode:"$\x{a2}"
    $P105 = $P104."MATCH"()
    store_lex "$/", $P105
    .const 'Sub' $P2017 = "258_1329260321.776" 
    capture_lex $P2017
    $P106 = $P2017()
    unless $P106, rx2013_fail
  # rx subrule "ws" subtype=method negate=
    rx2013_cur."!cursor_pos"(rx2013_pos)
    $P10 = rx2013_cur."ws"()
    unless $P10, rx2013_fail
    rx2013_pos = $P10."pos"()
  # rx subrule "parameter" subtype=capture negate=
    rx2013_cur."!cursor_pos"(rx2013_pos)
    $P10 = rx2013_cur."parameter"()
    unless $P10, rx2013_fail
    rx2013_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("invocant")
    rx2013_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2013_cur."!cursor_pos"(rx2013_pos)
    $P10 = rx2013_cur."ws"()
    unless $P10, rx2013_fail
    rx2013_pos = $P10."pos"()
  # rx literal  ":"
    add $I11, rx2013_pos, 1
    gt $I11, rx2013_eos, rx2013_fail
    sub $I11, rx2013_pos, rx2013_off
    ord $I11, rx2013_tgt, $I11
    ne $I11, 58, rx2013_fail
    add rx2013_pos, 1
    set_addr $I10, rxquantr2015_done
    (rx2013_rep) = rx2013_cur."!mark_commit"($I10)
  rxquantr2015_done:
.annotate 'line', 1160
  # rx rxquantr2018 ** 0..1
    set_addr $I10, rxquantr2018_done
    rx2013_cur."!mark_push"(0, rx2013_pos, $I10)
  rxquantr2018_loop:
  # rx rxquantr2019 ** 1..*
    set_addr $I10, rxquantr2019_done
    rx2013_cur."!mark_push"(0, -1, $I10)
  rxquantr2019_loop:
  # rx subrule "ws" subtype=method negate=
    rx2013_cur."!cursor_pos"(rx2013_pos)
    $P10 = rx2013_cur."ws"()
    unless $P10, rx2013_fail
    rx2013_pos = $P10."pos"()
  # rx subrule "parameter" subtype=capture negate=
    rx2013_cur."!cursor_pos"(rx2013_pos)
    $P10 = rx2013_cur."parameter"()
    unless $P10, rx2013_fail
    rx2013_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("parameter")
    rx2013_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2013_cur."!cursor_pos"(rx2013_pos)
    $P10 = rx2013_cur."ws"()
    unless $P10, rx2013_fail
    rx2013_pos = $P10."pos"()
    set_addr $I10, rxquantr2019_done
    (rx2013_rep) = rx2013_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr2019_done
    rx2013_cur."!mark_push"(rx2013_rep, rx2013_pos, $I10)
  # rx literal  ","
    add $I11, rx2013_pos, 1
    gt $I11, rx2013_eos, rx2013_fail
    sub $I11, rx2013_pos, rx2013_off
    ord $I11, rx2013_tgt, $I11
    ne $I11, 44, rx2013_fail
    add rx2013_pos, 1
    goto rxquantr2019_loop
  rxquantr2019_done:
    set_addr $I10, rxquantr2018_done
    (rx2013_rep) = rx2013_cur."!mark_commit"($I10)
  rxquantr2018_done:
.annotate 'line', 1158
  # rx pass
    rx2013_cur."!cursor_pass"(rx2013_pos, "signature")
    if_null rx2013_debug, debug_1456
    rx2013_cur."!cursor_debug"("PASS", "signature", " at pos=", rx2013_pos)
  debug_1456:
    .return (rx2013_cur)
  rx2013_restart:
    if_null rx2013_debug, debug_1457
    rx2013_cur."!cursor_debug"("NEXT", "signature")
  debug_1457:
  rx2013_fail:
    (rx2013_rep, rx2013_pos, $I10, $P10) = rx2013_cur."!mark_fail"(0)
    lt rx2013_pos, -1, rx2013_done
    eq rx2013_pos, -1, rx2013_fail
    jump $I10
  rx2013_done:
    rx2013_cur."!cursor_fail"()
    if_null rx2013_debug, debug_1458
    rx2013_cur."!cursor_debug"("FAIL", "signature")
  debug_1458:
    .return (rx2013_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block2016"  :anon :subid("258_1329260321.776") :outer("257_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1159
    find_dynamic_lex $P108, "$*INVOCANT_OK"
    unless_null $P108, vivify_1454
    get_hll_global $P106, "GLOBAL"
    get_who $P107, $P106
    set $P108, $P107["$INVOCANT_OK"]
    unless_null $P108, vivify_1455
    die "Contextual $*INVOCANT_OK not found"
  vivify_1455:
  vivify_1454:
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__signature"  :subid("259_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1158
    new $P107, "ResizablePMCArray"
    push $P107, ""
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "parameter"  :subid("260_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1163
    .local string rx2022_tgt
    .local int rx2022_pos
    .local int rx2022_off
    .local int rx2022_eos
    .local int rx2022_rep
    .local pmc rx2022_cur
    .local pmc rx2022_debug
    (rx2022_cur, rx2022_pos, rx2022_tgt, $I10) = self."!cursor_start"()
    rx2022_cur."!cursor_caparray"("typename", "definedness", "default_value")
    .lex unicode:"$\x{a2}", rx2022_cur
    .local pmc match
    .lex "$/", match
    length rx2022_eos, rx2022_tgt
    gt rx2022_pos, rx2022_eos, rx2022_done
    set rx2022_off, 0
    lt rx2022_pos, 2, rx2022_start
    sub rx2022_off, rx2022_pos, 1
    substr rx2022_tgt, rx2022_tgt, rx2022_off
  rx2022_start:
    eq $I10, 1, rx2022_restart
    if_null rx2022_debug, debug_1459
    rx2022_cur."!cursor_debug"("START", "parameter")
  debug_1459:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2023_done
    goto rxscan2023_scan
  rxscan2023_loop:
    (rx2022_pos) = rx2022_cur."from"()
    inc rx2022_pos
    rx2022_cur."!cursor_from"(rx2022_pos)
    ge rx2022_pos, rx2022_eos, rxscan2023_done
  rxscan2023_scan:
    set_addr $I10, rxscan2023_loop
    rx2022_cur."!mark_push"(0, rx2022_pos, $I10)
  rxscan2023_done:
.annotate 'line', 1164
  # rx rxquantr2024 ** 0..*
    set_addr $I10, rxquantr2024_done
    rx2022_cur."!mark_push"(0, rx2022_pos, $I10)
  rxquantr2024_loop:
  # rx subrule "typename" subtype=capture negate=
    rx2022_cur."!cursor_pos"(rx2022_pos)
    $P10 = rx2022_cur."typename"()
    unless $P10, rx2022_fail
    rx2022_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("typename")
    rx2022_pos = $P10."pos"()
  # rx rxquantr2025 ** 0..1
    set_addr $I10, rxquantr2025_done
    rx2022_cur."!mark_push"(0, rx2022_pos, $I10)
  rxquantr2025_loop:
  # rx literal  ":"
    add $I11, rx2022_pos, 1
    gt $I11, rx2022_eos, rx2022_fail
    sub $I11, rx2022_pos, rx2022_off
    ord $I11, rx2022_tgt, $I11
    ne $I11, 58, rx2022_fail
    add rx2022_pos, 1
  # rx subcapture "definedness"
    set_addr $I10, rxcap_2026_fail
    rx2022_cur."!mark_push"(0, rx2022_pos, $I10)
  # rx enumcharlist negate=0 
    ge rx2022_pos, rx2022_eos, rx2022_fail
    sub $I10, rx2022_pos, rx2022_off
    substr $S10, rx2022_tgt, $I10, 1
    index $I11, "_DU", $S10
    lt $I11, 0, rx2022_fail
    inc rx2022_pos
    set_addr $I10, rxcap_2026_fail
    ($I12, $I11) = rx2022_cur."!mark_peek"($I10)
    rx2022_cur."!cursor_pos"($I11)
    ($P10) = rx2022_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2022_pos, "")
    rx2022_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("definedness")
    goto rxcap_2026_done
  rxcap_2026_fail:
    goto rx2022_fail
  rxcap_2026_done:
    set_addr $I10, rxquantr2025_done
    (rx2022_rep) = rx2022_cur."!mark_commit"($I10)
  rxquantr2025_done:
  # rx subrule "ws" subtype=method negate=
    rx2022_cur."!cursor_pos"(rx2022_pos)
    $P10 = rx2022_cur."ws"()
    unless $P10, rx2022_fail
    rx2022_pos = $P10."pos"()
    set_addr $I10, rxquantr2024_done
    (rx2022_rep) = rx2022_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr2024_done
    rx2022_cur."!mark_push"(rx2022_rep, rx2022_pos, $I10)
    goto rxquantr2024_loop
  rxquantr2024_done:
  alt2027_0:
.annotate 'line', 1165
    set_addr $I10, alt2027_1
    rx2022_cur."!mark_push"(0, rx2022_pos, $I10)
.annotate 'line', 1166
  # rx subcapture "quant"
    set_addr $I10, rxcap_2028_fail
    rx2022_cur."!mark_push"(0, rx2022_pos, $I10)
  # rx literal  "*"
    add $I11, rx2022_pos, 1
    gt $I11, rx2022_eos, rx2022_fail
    sub $I11, rx2022_pos, rx2022_off
    ord $I11, rx2022_tgt, $I11
    ne $I11, 42, rx2022_fail
    add rx2022_pos, 1
    set_addr $I10, rxcap_2028_fail
    ($I12, $I11) = rx2022_cur."!mark_peek"($I10)
    rx2022_cur."!cursor_pos"($I11)
    ($P10) = rx2022_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2022_pos, "")
    rx2022_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quant")
    goto rxcap_2028_done
  rxcap_2028_fail:
    goto rx2022_fail
  rxcap_2028_done:
  # rx subrule "param_var" subtype=capture negate=
    rx2022_cur."!cursor_pos"(rx2022_pos)
    $P10 = rx2022_cur."param_var"()
    unless $P10, rx2022_fail
    rx2022_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("param_var")
    rx2022_pos = $P10."pos"()
    goto alt2027_end
  alt2027_1:
  alt2029_0:
.annotate 'line', 1167
    set_addr $I10, alt2029_1
    rx2022_cur."!mark_push"(0, rx2022_pos, $I10)
  # rx subrule "param_var" subtype=capture negate=
    rx2022_cur."!cursor_pos"(rx2022_pos)
    $P10 = rx2022_cur."param_var"()
    unless $P10, rx2022_fail
    rx2022_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("param_var")
    rx2022_pos = $P10."pos"()
    goto alt2029_end
  alt2029_1:
  # rx subrule "named_param" subtype=capture negate=
    rx2022_cur."!cursor_pos"(rx2022_pos)
    $P10 = rx2022_cur."named_param"()
    unless $P10, rx2022_fail
    rx2022_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("named_param")
    rx2022_pos = $P10."pos"()
  alt2029_end:
  # rx subcapture "quant"
    set_addr $I10, rxcap_2031_fail
    rx2022_cur."!mark_push"(0, rx2022_pos, $I10)
  alt2030_0:
    set_addr $I10, alt2030_1
    rx2022_cur."!mark_push"(0, rx2022_pos, $I10)
  # rx literal  "?"
    add $I11, rx2022_pos, 1
    gt $I11, rx2022_eos, rx2022_fail
    sub $I11, rx2022_pos, rx2022_off
    ord $I11, rx2022_tgt, $I11
    ne $I11, 63, rx2022_fail
    add rx2022_pos, 1
    goto alt2030_end
  alt2030_1:
    set_addr $I10, alt2030_2
    rx2022_cur."!mark_push"(0, rx2022_pos, $I10)
  # rx literal  "!"
    add $I11, rx2022_pos, 1
    gt $I11, rx2022_eos, rx2022_fail
    sub $I11, rx2022_pos, rx2022_off
    ord $I11, rx2022_tgt, $I11
    ne $I11, 33, rx2022_fail
    add rx2022_pos, 1
    goto alt2030_end
  alt2030_2:
  alt2030_end:
    set_addr $I10, rxcap_2031_fail
    ($I12, $I11) = rx2022_cur."!mark_peek"($I10)
    rx2022_cur."!cursor_pos"($I11)
    ($P10) = rx2022_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2022_pos, "")
    rx2022_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quant")
    goto rxcap_2031_done
  rxcap_2031_fail:
    goto rx2022_fail
  rxcap_2031_done:
  alt2027_end:
.annotate 'line', 1169
  # rx rxquantr2032 ** 0..1
    set_addr $I10, rxquantr2032_done
    rx2022_cur."!mark_push"(0, rx2022_pos, $I10)
  rxquantr2032_loop:
  # rx subrule "default_value" subtype=capture negate=
    rx2022_cur."!cursor_pos"(rx2022_pos)
    $P10 = rx2022_cur."default_value"()
    unless $P10, rx2022_fail
    goto rxsubrule2033_pass
  rxsubrule2033_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx2022_fail
  rxsubrule2033_pass:
    set_addr $I10, rxsubrule2033_back
    rx2022_cur."!mark_push"(0, rx2022_pos, $I10, $P10)
    $P10."!cursor_names"("default_value")
    rx2022_pos = $P10."pos"()
    set_addr $I10, rxquantr2032_done
    (rx2022_rep) = rx2022_cur."!mark_commit"($I10)
  rxquantr2032_done:
.annotate 'line', 1163
  # rx pass
    rx2022_cur."!cursor_pass"(rx2022_pos, "parameter")
    if_null rx2022_debug, debug_1460
    rx2022_cur."!cursor_debug"("PASS", "parameter", " at pos=", rx2022_pos)
  debug_1460:
    .return (rx2022_cur)
  rx2022_restart:
    if_null rx2022_debug, debug_1461
    rx2022_cur."!cursor_debug"("NEXT", "parameter")
  debug_1461:
  rx2022_fail:
    (rx2022_rep, rx2022_pos, $I10, $P10) = rx2022_cur."!mark_fail"(0)
    lt rx2022_pos, -1, rx2022_done
    eq rx2022_pos, -1, rx2022_fail
    jump $I10
  rx2022_done:
    rx2022_cur."!cursor_fail"()
    if_null rx2022_debug, debug_1462
    rx2022_cur."!cursor_debug"("FAIL", "parameter")
  debug_1462:
    .return (rx2022_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__parameter"  :subid("261_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1163
    new $P104, "ResizablePMCArray"
    push $P104, ""
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "param_var"  :subid("262_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1172
    .local string rx2036_tgt
    .local int rx2036_pos
    .local int rx2036_off
    .local int rx2036_eos
    .local int rx2036_rep
    .local pmc rx2036_cur
    .local pmc rx2036_debug
    (rx2036_cur, rx2036_pos, rx2036_tgt, $I10) = self."!cursor_start"()
    rx2036_cur."!cursor_caparray"("twigil")
    .lex unicode:"$\x{a2}", rx2036_cur
    .local pmc match
    .lex "$/", match
    length rx2036_eos, rx2036_tgt
    gt rx2036_pos, rx2036_eos, rx2036_done
    set rx2036_off, 0
    lt rx2036_pos, 2, rx2036_start
    sub rx2036_off, rx2036_pos, 1
    substr rx2036_tgt, rx2036_tgt, rx2036_off
  rx2036_start:
    eq $I10, 1, rx2036_restart
    if_null rx2036_debug, debug_1463
    rx2036_cur."!cursor_debug"("START", "param_var")
  debug_1463:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2037_done
    goto rxscan2037_scan
  rxscan2037_loop:
    (rx2036_pos) = rx2036_cur."from"()
    inc rx2036_pos
    rx2036_cur."!cursor_from"(rx2036_pos)
    ge rx2036_pos, rx2036_eos, rxscan2037_done
  rxscan2037_scan:
    set_addr $I10, rxscan2037_loop
    rx2036_cur."!mark_push"(0, rx2036_pos, $I10)
  rxscan2037_done:
.annotate 'line', 1173
  # rx subrule "sigil" subtype=capture negate=
    rx2036_cur."!cursor_pos"(rx2036_pos)
    $P10 = rx2036_cur."sigil"()
    unless $P10, rx2036_fail
    rx2036_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sigil")
    rx2036_pos = $P10."pos"()
  # rx rxquantr2038 ** 0..1
    set_addr $I10, rxquantr2038_done
    rx2036_cur."!mark_push"(0, rx2036_pos, $I10)
  rxquantr2038_loop:
  # rx subrule "twigil" subtype=capture negate=
    rx2036_cur."!cursor_pos"(rx2036_pos)
    $P10 = rx2036_cur."twigil"()
    unless $P10, rx2036_fail
    goto rxsubrule2039_pass
  rxsubrule2039_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx2036_fail
  rxsubrule2039_pass:
    set_addr $I10, rxsubrule2039_back
    rx2036_cur."!mark_push"(0, rx2036_pos, $I10, $P10)
    $P10."!cursor_names"("twigil")
    rx2036_pos = $P10."pos"()
    set_addr $I10, rxquantr2038_done
    (rx2036_rep) = rx2036_cur."!mark_commit"($I10)
  rxquantr2038_done:
  alt2040_0:
.annotate 'line', 1174
    set_addr $I10, alt2040_1
    rx2036_cur."!mark_push"(0, rx2036_pos, $I10)
  # rx subrule "ident" subtype=capture negate=
    rx2036_cur."!cursor_pos"(rx2036_pos)
    $P10 = rx2036_cur."ident"()
    unless $P10, rx2036_fail
    rx2036_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("name")
    rx2036_pos = $P10."pos"()
    goto alt2040_end
  alt2040_1:
  # rx subcapture "name"
    set_addr $I10, rxcap_2041_fail
    rx2036_cur."!mark_push"(0, rx2036_pos, $I10)
  # rx enumcharlist negate=0 
    ge rx2036_pos, rx2036_eos, rx2036_fail
    sub $I10, rx2036_pos, rx2036_off
    substr $S10, rx2036_tgt, $I10, 1
    index $I11, "/!", $S10
    lt $I11, 0, rx2036_fail
    inc rx2036_pos
    set_addr $I10, rxcap_2041_fail
    ($I12, $I11) = rx2036_cur."!mark_peek"($I10)
    rx2036_cur."!cursor_pos"($I11)
    ($P10) = rx2036_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2036_pos, "")
    rx2036_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("name")
    goto rxcap_2041_done
  rxcap_2041_fail:
    goto rx2036_fail
  rxcap_2041_done:
  alt2040_end:
.annotate 'line', 1172
  # rx pass
    rx2036_cur."!cursor_pass"(rx2036_pos, "param_var")
    if_null rx2036_debug, debug_1464
    rx2036_cur."!cursor_debug"("PASS", "param_var", " at pos=", rx2036_pos)
  debug_1464:
    .return (rx2036_cur)
  rx2036_restart:
    if_null rx2036_debug, debug_1465
    rx2036_cur."!cursor_debug"("NEXT", "param_var")
  debug_1465:
  rx2036_fail:
    (rx2036_rep, rx2036_pos, $I10, $P10) = rx2036_cur."!mark_fail"(0)
    lt rx2036_pos, -1, rx2036_done
    eq rx2036_pos, -1, rx2036_fail
    jump $I10
  rx2036_done:
    rx2036_cur."!cursor_fail"()
    if_null rx2036_debug, debug_1466
    rx2036_cur."!cursor_debug"("FAIL", "param_var")
  debug_1466:
    .return (rx2036_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__param_var"  :subid("263_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1172
    $P104 = self."!PREFIX__!subrule"("sigil", "")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "named_param"  :subid("264_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1177
    .local string rx2044_tgt
    .local int rx2044_pos
    .local int rx2044_off
    .local int rx2044_eos
    .local int rx2044_rep
    .local pmc rx2044_cur
    .local pmc rx2044_debug
    (rx2044_cur, rx2044_pos, rx2044_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2044_cur
    .local pmc match
    .lex "$/", match
    length rx2044_eos, rx2044_tgt
    gt rx2044_pos, rx2044_eos, rx2044_done
    set rx2044_off, 0
    lt rx2044_pos, 2, rx2044_start
    sub rx2044_off, rx2044_pos, 1
    substr rx2044_tgt, rx2044_tgt, rx2044_off
  rx2044_start:
    eq $I10, 1, rx2044_restart
    if_null rx2044_debug, debug_1467
    rx2044_cur."!cursor_debug"("START", "named_param")
  debug_1467:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2045_done
    goto rxscan2045_scan
  rxscan2045_loop:
    (rx2044_pos) = rx2044_cur."from"()
    inc rx2044_pos
    rx2044_cur."!cursor_from"(rx2044_pos)
    ge rx2044_pos, rx2044_eos, rxscan2045_done
  rxscan2045_scan:
    set_addr $I10, rxscan2045_loop
    rx2044_cur."!mark_push"(0, rx2044_pos, $I10)
  rxscan2045_done:
.annotate 'line', 1178
  # rx literal  ":"
    add $I11, rx2044_pos, 1
    gt $I11, rx2044_eos, rx2044_fail
    sub $I11, rx2044_pos, rx2044_off
    ord $I11, rx2044_tgt, $I11
    ne $I11, 58, rx2044_fail
    add rx2044_pos, 1
  # rx subrule "param_var" subtype=capture negate=
    rx2044_cur."!cursor_pos"(rx2044_pos)
    $P10 = rx2044_cur."param_var"()
    unless $P10, rx2044_fail
    rx2044_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("param_var")
    rx2044_pos = $P10."pos"()
.annotate 'line', 1177
  # rx pass
    rx2044_cur."!cursor_pass"(rx2044_pos, "named_param")
    if_null rx2044_debug, debug_1468
    rx2044_cur."!cursor_debug"("PASS", "named_param", " at pos=", rx2044_pos)
  debug_1468:
    .return (rx2044_cur)
  rx2044_restart:
    if_null rx2044_debug, debug_1469
    rx2044_cur."!cursor_debug"("NEXT", "named_param")
  debug_1469:
  rx2044_fail:
    (rx2044_rep, rx2044_pos, $I10, $P10) = rx2044_cur."!mark_fail"(0)
    lt rx2044_pos, -1, rx2044_done
    eq rx2044_pos, -1, rx2044_fail
    jump $I10
  rx2044_done:
    rx2044_cur."!cursor_fail"()
    if_null rx2044_debug, debug_1470
    rx2044_cur."!cursor_debug"("FAIL", "named_param")
  debug_1470:
    .return (rx2044_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__named_param"  :subid("265_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1177
    $P104 = self."!PREFIX__!subrule"("param_var", ":")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "default_value"  :subid("266_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1181
    .local string rx2048_tgt
    .local int rx2048_pos
    .local int rx2048_off
    .local int rx2048_eos
    .local int rx2048_rep
    .local pmc rx2048_cur
    .local pmc rx2048_debug
    (rx2048_cur, rx2048_pos, rx2048_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2048_cur
    .local pmc match
    .lex "$/", match
    length rx2048_eos, rx2048_tgt
    gt rx2048_pos, rx2048_eos, rx2048_done
    set rx2048_off, 0
    lt rx2048_pos, 2, rx2048_start
    sub rx2048_off, rx2048_pos, 1
    substr rx2048_tgt, rx2048_tgt, rx2048_off
  rx2048_start:
    eq $I10, 1, rx2048_restart
    if_null rx2048_debug, debug_1471
    rx2048_cur."!cursor_debug"("START", "default_value")
  debug_1471:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2049_done
    goto rxscan2049_scan
  rxscan2049_loop:
    (rx2048_pos) = rx2048_cur."from"()
    inc rx2048_pos
    rx2048_cur."!cursor_from"(rx2048_pos)
    ge rx2048_pos, rx2048_eos, rxscan2049_done
  rxscan2049_scan:
    set_addr $I10, rxscan2049_loop
    rx2048_cur."!mark_push"(0, rx2048_pos, $I10)
  rxscan2049_done:
  # rx subrule "ws" subtype=method negate=
    rx2048_cur."!cursor_pos"(rx2048_pos)
    $P10 = rx2048_cur."ws"()
    unless $P10, rx2048_fail
    rx2048_pos = $P10."pos"()
  # rx literal  "="
    add $I11, rx2048_pos, 1
    gt $I11, rx2048_eos, rx2048_fail
    sub $I11, rx2048_pos, rx2048_off
    ord $I11, rx2048_tgt, $I11
    ne $I11, 61, rx2048_fail
    add rx2048_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2048_cur."!cursor_pos"(rx2048_pos)
    $P10 = rx2048_cur."ws"()
    unless $P10, rx2048_fail
    rx2048_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx2048_cur."!cursor_pos"(rx2048_pos)
    $P10 = rx2048_cur."EXPR"("i=")
    unless $P10, rx2048_fail
    rx2048_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("EXPR")
    rx2048_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2048_cur."!cursor_pos"(rx2048_pos)
    $P10 = rx2048_cur."ws"()
    unless $P10, rx2048_fail
    rx2048_pos = $P10."pos"()
  # rx pass
    rx2048_cur."!cursor_pass"(rx2048_pos, "default_value")
    if_null rx2048_debug, debug_1472
    rx2048_cur."!cursor_debug"("PASS", "default_value", " at pos=", rx2048_pos)
  debug_1472:
    .return (rx2048_cur)
  rx2048_restart:
    if_null rx2048_debug, debug_1473
    rx2048_cur."!cursor_debug"("NEXT", "default_value")
  debug_1473:
  rx2048_fail:
    (rx2048_rep, rx2048_pos, $I10, $P10) = rx2048_cur."!mark_fail"(0)
    lt rx2048_pos, -1, rx2048_done
    eq rx2048_pos, -1, rx2048_fail
    jump $I10
  rx2048_done:
    rx2048_cur."!cursor_fail"()
    if_null rx2048_debug, debug_1474
    rx2048_cur."!cursor_debug"("FAIL", "default_value")
  debug_1474:
    .return (rx2048_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__default_value"  :subid("267_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1181
    $P107 = self."!PREFIX__!subrule"("ws", "")
    new $P108, "ResizablePMCArray"
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "trait"  :subid("268_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1183
    .local string rx2052_tgt
    .local int rx2052_pos
    .local int rx2052_off
    .local int rx2052_eos
    .local int rx2052_rep
    .local pmc rx2052_cur
    .local pmc rx2052_debug
    (rx2052_cur, rx2052_pos, rx2052_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2052_cur
    .local pmc match
    .lex "$/", match
    length rx2052_eos, rx2052_tgt
    gt rx2052_pos, rx2052_eos, rx2052_done
    set rx2052_off, 0
    lt rx2052_pos, 2, rx2052_start
    sub rx2052_off, rx2052_pos, 1
    substr rx2052_tgt, rx2052_tgt, rx2052_off
  rx2052_start:
    eq $I10, 1, rx2052_restart
    if_null rx2052_debug, debug_1475
    rx2052_cur."!cursor_debug"("START", "trait")
  debug_1475:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2053_done
    goto rxscan2053_scan
  rxscan2053_loop:
    (rx2052_pos) = rx2052_cur."from"()
    inc rx2052_pos
    rx2052_cur."!cursor_from"(rx2052_pos)
    ge rx2052_pos, rx2052_eos, rxscan2053_done
  rxscan2053_scan:
    set_addr $I10, rxscan2053_loop
    rx2052_cur."!mark_push"(0, rx2052_pos, $I10)
  rxscan2053_done:
  # rx subrule "ws" subtype=method negate=
    rx2052_cur."!cursor_pos"(rx2052_pos)
    $P10 = rx2052_cur."ws"()
    unless $P10, rx2052_fail
    rx2052_pos = $P10."pos"()
  # rx subrule "trait_mod" subtype=capture negate=
    rx2052_cur."!cursor_pos"(rx2052_pos)
    $P10 = rx2052_cur."trait_mod"()
    unless $P10, rx2052_fail
    rx2052_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("trait_mod")
    rx2052_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2052_cur."!cursor_pos"(rx2052_pos)
    $P10 = rx2052_cur."ws"()
    unless $P10, rx2052_fail
    rx2052_pos = $P10."pos"()
  # rx pass
    rx2052_cur."!cursor_pass"(rx2052_pos, "trait")
    if_null rx2052_debug, debug_1476
    rx2052_cur."!cursor_debug"("PASS", "trait", " at pos=", rx2052_pos)
  debug_1476:
    .return (rx2052_cur)
  rx2052_restart:
    if_null rx2052_debug, debug_1477
    rx2052_cur."!cursor_debug"("NEXT", "trait")
  debug_1477:
  rx2052_fail:
    (rx2052_rep, rx2052_pos, $I10, $P10) = rx2052_cur."!mark_fail"(0)
    lt rx2052_pos, -1, rx2052_done
    eq rx2052_pos, -1, rx2052_fail
    jump $I10
  rx2052_done:
    rx2052_cur."!cursor_fail"()
    if_null rx2052_debug, debug_1478
    rx2052_cur."!cursor_debug"("FAIL", "trait")
  debug_1478:
    .return (rx2052_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__trait"  :subid("269_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1183
    $P106 = self."!PREFIX__!subrule"("ws", "")
    new $P107, "ResizablePMCArray"
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "trait_mod"  :subid("270_1329260321.776")
    .param pmc param_2056
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1185
    .lex "self", param_2056
    $P104 = param_2056."!protoregex"("trait_mod")
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__trait_mod"  :subid("271_1329260321.776")
    .param pmc param_2058
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1185
    .lex "self", param_2058
    $P105 = param_2058."!PREFIX__!protoregex"("trait_mod")
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "trait_mod:sym<is>"  :subid("272_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1186
    .local string rx2060_tgt
    .local int rx2060_pos
    .local int rx2060_off
    .local int rx2060_eos
    .local int rx2060_rep
    .local pmc rx2060_cur
    .local pmc rx2060_debug
    (rx2060_cur, rx2060_pos, rx2060_tgt, $I10) = self."!cursor_start"()
    rx2060_cur."!cursor_caparray"("circumfix")
    .lex unicode:"$\x{a2}", rx2060_cur
    .local pmc match
    .lex "$/", match
    length rx2060_eos, rx2060_tgt
    gt rx2060_pos, rx2060_eos, rx2060_done
    set rx2060_off, 0
    lt rx2060_pos, 2, rx2060_start
    sub rx2060_off, rx2060_pos, 1
    substr rx2060_tgt, rx2060_tgt, rx2060_off
  rx2060_start:
    eq $I10, 1, rx2060_restart
    if_null rx2060_debug, debug_1479
    rx2060_cur."!cursor_debug"("START", "trait_mod:sym<is>")
  debug_1479:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2061_done
    goto rxscan2061_scan
  rxscan2061_loop:
    (rx2060_pos) = rx2060_cur."from"()
    inc rx2060_pos
    rx2060_cur."!cursor_from"(rx2060_pos)
    ge rx2060_pos, rx2060_eos, rxscan2061_done
  rxscan2061_scan:
    set_addr $I10, rxscan2061_loop
    rx2060_cur."!mark_push"(0, rx2060_pos, $I10)
  rxscan2061_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2062_fail
    rx2060_cur."!mark_push"(0, rx2060_pos, $I10)
  # rx literal  "is"
    add $I11, rx2060_pos, 2
    gt $I11, rx2060_eos, rx2060_fail
    sub $I11, rx2060_pos, rx2060_off
    substr $S10, rx2060_tgt, $I11, 2
    ne $S10, "is", rx2060_fail
    add rx2060_pos, 2
    set_addr $I10, rxcap_2062_fail
    ($I12, $I11) = rx2060_cur."!mark_peek"($I10)
    rx2060_cur."!cursor_pos"($I11)
    ($P10) = rx2060_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2060_pos, "")
    rx2060_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2062_done
  rxcap_2062_fail:
    goto rx2060_fail
  rxcap_2062_done:
  # rx subrule "ws" subtype=method negate=
    rx2060_cur."!cursor_pos"(rx2060_pos)
    $P10 = rx2060_cur."ws"()
    unless $P10, rx2060_fail
    rx2060_pos = $P10."pos"()
  # rx subrule "deflongname" subtype=capture negate=
    rx2060_cur."!cursor_pos"(rx2060_pos)
    $P10 = rx2060_cur."deflongname"()
    unless $P10, rx2060_fail
    rx2060_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("longname")
    rx2060_pos = $P10."pos"()
  # rx rxquantr2063 ** 0..1
    set_addr $I10, rxquantr2063_done
    rx2060_cur."!mark_push"(0, rx2060_pos, $I10)
  rxquantr2063_loop:
  # rx subrule "circumfix" subtype=capture negate=
    rx2060_cur."!cursor_pos"(rx2060_pos)
    $P10 = rx2060_cur."circumfix"()
    unless $P10, rx2060_fail
    goto rxsubrule2064_pass
  rxsubrule2064_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx2060_fail
  rxsubrule2064_pass:
    set_addr $I10, rxsubrule2064_back
    rx2060_cur."!mark_push"(0, rx2060_pos, $I10, $P10)
    $P10."!cursor_names"("circumfix")
    rx2060_pos = $P10."pos"()
    set_addr $I10, rxquantr2063_done
    (rx2060_rep) = rx2060_cur."!mark_commit"($I10)
  rxquantr2063_done:
  # rx subrule "ws" subtype=method negate=
    rx2060_cur."!cursor_pos"(rx2060_pos)
    $P10 = rx2060_cur."ws"()
    unless $P10, rx2060_fail
    rx2060_pos = $P10."pos"()
  # rx pass
    rx2060_cur."!cursor_pass"(rx2060_pos, "trait_mod:sym<is>")
    if_null rx2060_debug, debug_1480
    rx2060_cur."!cursor_debug"("PASS", "trait_mod:sym<is>", " at pos=", rx2060_pos)
  debug_1480:
    .return (rx2060_cur)
  rx2060_restart:
    if_null rx2060_debug, debug_1481
    rx2060_cur."!cursor_debug"("NEXT", "trait_mod:sym<is>")
  debug_1481:
  rx2060_fail:
    (rx2060_rep, rx2060_pos, $I10, $P10) = rx2060_cur."!mark_fail"(0)
    lt rx2060_pos, -1, rx2060_done
    eq rx2060_pos, -1, rx2060_fail
    jump $I10
  rx2060_done:
    rx2060_cur."!cursor_fail"()
    if_null rx2060_debug, debug_1482
    rx2060_cur."!cursor_debug"("FAIL", "trait_mod:sym<is>")
  debug_1482:
    .return (rx2060_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__trait_mod:sym<is>"  :subid("273_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1186
    $P106 = self."!PREFIX__!subrule"("ws", "is")
    new $P107, "ResizablePMCArray"
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "regex_declarator"  :subid("274_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1188
    .local string rx2067_tgt
    .local int rx2067_pos
    .local int rx2067_off
    .local int rx2067_eos
    .local int rx2067_rep
    .local pmc rx2067_cur
    .local pmc rx2067_debug
    (rx2067_cur, rx2067_pos, rx2067_tgt, $I10) = self."!cursor_start"()
    rx2067_cur."!cursor_caparray"("signature")
    .lex unicode:"$\x{a2}", rx2067_cur
    .local pmc match
    .lex "$/", match
    length rx2067_eos, rx2067_tgt
    gt rx2067_pos, rx2067_eos, rx2067_done
    set rx2067_off, 0
    lt rx2067_pos, 2, rx2067_start
    sub rx2067_off, rx2067_pos, 1
    substr rx2067_tgt, rx2067_tgt, rx2067_off
  rx2067_start:
    eq $I10, 1, rx2067_restart
    if_null rx2067_debug, debug_1483
    rx2067_cur."!cursor_debug"("START", "regex_declarator")
  debug_1483:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2068_done
    goto rxscan2068_scan
  rxscan2068_loop:
    (rx2067_pos) = rx2067_cur."from"()
    inc rx2067_pos
    rx2067_cur."!cursor_from"(rx2067_pos)
    ge rx2067_pos, rx2067_eos, rxscan2068_done
  rxscan2068_scan:
    set_addr $I10, rxscan2068_loop
    rx2067_cur."!mark_push"(0, rx2067_pos, $I10)
  rxscan2068_done:
  # rx subrule "ws" subtype=method negate=
    rx2067_cur."!cursor_pos"(rx2067_pos)
    $P10 = rx2067_cur."ws"()
    unless $P10, rx2067_fail
    rx2067_pos = $P10."pos"()
  alt2069_0:
.annotate 'line', 1189
    set_addr $I10, alt2069_1
    rx2067_cur."!mark_push"(0, rx2067_pos, $I10)
.annotate 'line', 1190
  # rx subrule "ws" subtype=method negate=
    rx2067_cur."!cursor_pos"(rx2067_pos)
    $P10 = rx2067_cur."ws"()
    unless $P10, rx2067_fail
    rx2067_pos = $P10."pos"()
  # rx subcapture "proto"
    set_addr $I10, rxcap_2070_fail
    rx2067_cur."!mark_push"(0, rx2067_pos, $I10)
  # rx literal  "proto"
    add $I11, rx2067_pos, 5
    gt $I11, rx2067_eos, rx2067_fail
    sub $I11, rx2067_pos, rx2067_off
    substr $S10, rx2067_tgt, $I11, 5
    ne $S10, "proto", rx2067_fail
    add rx2067_pos, 5
    set_addr $I10, rxcap_2070_fail
    ($I12, $I11) = rx2067_cur."!mark_peek"($I10)
    rx2067_cur."!cursor_pos"($I11)
    ($P10) = rx2067_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2067_pos, "")
    rx2067_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("proto")
    goto rxcap_2070_done
  rxcap_2070_fail:
    goto rx2067_fail
  rxcap_2070_done:
  # rx subrule "ws" subtype=method negate=
    rx2067_cur."!cursor_pos"(rx2067_pos)
    $P10 = rx2067_cur."ws"()
    unless $P10, rx2067_fail
    rx2067_pos = $P10."pos"()
  alt2071_0:
    set_addr $I10, alt2071_1
    rx2067_cur."!mark_push"(0, rx2067_pos, $I10)
  # rx literal  "regex"
    add $I11, rx2067_pos, 5
    gt $I11, rx2067_eos, rx2067_fail
    sub $I11, rx2067_pos, rx2067_off
    substr $S10, rx2067_tgt, $I11, 5
    ne $S10, "regex", rx2067_fail
    add rx2067_pos, 5
    goto alt2071_end
  alt2071_1:
    set_addr $I10, alt2071_2
    rx2067_cur."!mark_push"(0, rx2067_pos, $I10)
  # rx literal  "token"
    add $I11, rx2067_pos, 5
    gt $I11, rx2067_eos, rx2067_fail
    sub $I11, rx2067_pos, rx2067_off
    substr $S10, rx2067_tgt, $I11, 5
    ne $S10, "token", rx2067_fail
    add rx2067_pos, 5
    goto alt2071_end
  alt2071_2:
  # rx literal  "rule"
    add $I11, rx2067_pos, 4
    gt $I11, rx2067_eos, rx2067_fail
    sub $I11, rx2067_pos, rx2067_off
    substr $S10, rx2067_tgt, $I11, 4
    ne $S10, "rule", rx2067_fail
    add rx2067_pos, 4
  alt2071_end:
  # rx subrule "ws" subtype=method negate=
    rx2067_cur."!cursor_pos"(rx2067_pos)
    $P10 = rx2067_cur."ws"()
    unless $P10, rx2067_fail
    rx2067_pos = $P10."pos"()
.annotate 'line', 1191
  # rx subrule "deflongname" subtype=capture negate=
    rx2067_cur."!cursor_pos"(rx2067_pos)
    $P10 = rx2067_cur."deflongname"()
    unless $P10, rx2067_fail
    rx2067_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("deflongname")
    rx2067_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2067_cur."!cursor_pos"(rx2067_pos)
    $P10 = rx2067_cur."ws"()
    unless $P10, rx2067_fail
    rx2067_pos = $P10."pos"()
  alt2072_0:
.annotate 'line', 1192
    set_addr $I10, alt2072_1
    rx2067_cur."!mark_push"(0, rx2067_pos, $I10)
.annotate 'line', 1193
  # rx subrule "ws" subtype=method negate=
    rx2067_cur."!cursor_pos"(rx2067_pos)
    $P10 = rx2067_cur."ws"()
    unless $P10, rx2067_fail
    rx2067_pos = $P10."pos"()
  # rx literal  "{"
    add $I11, rx2067_pos, 1
    gt $I11, rx2067_eos, rx2067_fail
    sub $I11, rx2067_pos, rx2067_off
    ord $I11, rx2067_tgt, $I11
    ne $I11, 123, rx2067_fail
    add rx2067_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2067_cur."!cursor_pos"(rx2067_pos)
    $P10 = rx2067_cur."ws"()
    unless $P10, rx2067_fail
    rx2067_pos = $P10."pos"()
  # rx literal  "<...>"
    add $I11, rx2067_pos, 5
    gt $I11, rx2067_eos, rx2067_fail
    sub $I11, rx2067_pos, rx2067_off
    substr $S10, rx2067_tgt, $I11, 5
    ne $S10, "<...>", rx2067_fail
    add rx2067_pos, 5
  # rx subrule "ws" subtype=method negate=
    rx2067_cur."!cursor_pos"(rx2067_pos)
    $P10 = rx2067_cur."ws"()
    unless $P10, rx2067_fail
    rx2067_pos = $P10."pos"()
  # rx literal  "}"
    add $I11, rx2067_pos, 1
    gt $I11, rx2067_eos, rx2067_fail
    sub $I11, rx2067_pos, rx2067_off
    ord $I11, rx2067_tgt, $I11
    ne $I11, 125, rx2067_fail
    add rx2067_pos, 1
  # rx subrule "ENDSTMT" subtype=zerowidth negate=
    rx2067_cur."!cursor_pos"(rx2067_pos)
    $P10 = rx2067_cur."ENDSTMT"()
    unless $P10, rx2067_fail
  # rx subrule "ws" subtype=method negate=
    rx2067_cur."!cursor_pos"(rx2067_pos)
    $P10 = rx2067_cur."ws"()
    unless $P10, rx2067_fail
    rx2067_pos = $P10."pos"()
    goto alt2072_end
  alt2072_1:
    set_addr $I10, alt2072_2
    rx2067_cur."!mark_push"(0, rx2067_pos, $I10)
.annotate 'line', 1194
  # rx subrule "ws" subtype=method negate=
    rx2067_cur."!cursor_pos"(rx2067_pos)
    $P10 = rx2067_cur."ws"()
    unless $P10, rx2067_fail
    rx2067_pos = $P10."pos"()
  # rx literal  "{"
    add $I11, rx2067_pos, 1
    gt $I11, rx2067_eos, rx2067_fail
    sub $I11, rx2067_pos, rx2067_off
    ord $I11, rx2067_tgt, $I11
    ne $I11, 123, rx2067_fail
    add rx2067_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2067_cur."!cursor_pos"(rx2067_pos)
    $P10 = rx2067_cur."ws"()
    unless $P10, rx2067_fail
    rx2067_pos = $P10."pos"()
  # rx literal  "<*>"
    add $I11, rx2067_pos, 3
    gt $I11, rx2067_eos, rx2067_fail
    sub $I11, rx2067_pos, rx2067_off
    substr $S10, rx2067_tgt, $I11, 3
    ne $S10, "<*>", rx2067_fail
    add rx2067_pos, 3
  # rx subrule "ws" subtype=method negate=
    rx2067_cur."!cursor_pos"(rx2067_pos)
    $P10 = rx2067_cur."ws"()
    unless $P10, rx2067_fail
    rx2067_pos = $P10."pos"()
  # rx literal  "}"
    add $I11, rx2067_pos, 1
    gt $I11, rx2067_eos, rx2067_fail
    sub $I11, rx2067_pos, rx2067_off
    ord $I11, rx2067_tgt, $I11
    ne $I11, 125, rx2067_fail
    add rx2067_pos, 1
  # rx subrule "ENDSTMT" subtype=zerowidth negate=
    rx2067_cur."!cursor_pos"(rx2067_pos)
    $P10 = rx2067_cur."ENDSTMT"()
    unless $P10, rx2067_fail
  # rx subrule "ws" subtype=method negate=
    rx2067_cur."!cursor_pos"(rx2067_pos)
    $P10 = rx2067_cur."ws"()
    unless $P10, rx2067_fail
    rx2067_pos = $P10."pos"()
    goto alt2072_end
  alt2072_2:
.annotate 'line', 1195
  # rx subrule "ws" subtype=method negate=
    rx2067_cur."!cursor_pos"(rx2067_pos)
    $P10 = rx2067_cur."ws"()
    unless $P10, rx2067_fail
    rx2067_pos = $P10."pos"()
  # rx subrule "panic" subtype=method negate=
    rx2067_cur."!cursor_pos"(rx2067_pos)
    $P10 = rx2067_cur."panic"("Proto regex body must be <*> (or <...>, which is deprecated)")
    unless $P10, rx2067_fail
    rx2067_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2067_cur."!cursor_pos"(rx2067_pos)
    $P10 = rx2067_cur."ws"()
    unless $P10, rx2067_fail
    rx2067_pos = $P10."pos"()
  alt2072_end:
.annotate 'line', 1196
  # rx subrule "ws" subtype=method negate=
    rx2067_cur."!cursor_pos"(rx2067_pos)
    $P10 = rx2067_cur."ws"()
    unless $P10, rx2067_fail
    rx2067_pos = $P10."pos"()
.annotate 'line', 1190
    goto alt2069_end
  alt2069_1:
.annotate 'line', 1197
  # rx subrule "ws" subtype=method negate=
    rx2067_cur."!cursor_pos"(rx2067_pos)
    $P10 = rx2067_cur."ws"()
    unless $P10, rx2067_fail
    rx2067_pos = $P10."pos"()
  # rx subcapture "sym"
    set_addr $I10, rxcap_2074_fail
    rx2067_cur."!mark_push"(0, rx2067_pos, $I10)
  alt2073_0:
    set_addr $I10, alt2073_1
    rx2067_cur."!mark_push"(0, rx2067_pos, $I10)
  # rx literal  "regex"
    add $I11, rx2067_pos, 5
    gt $I11, rx2067_eos, rx2067_fail
    sub $I11, rx2067_pos, rx2067_off
    substr $S10, rx2067_tgt, $I11, 5
    ne $S10, "regex", rx2067_fail
    add rx2067_pos, 5
    goto alt2073_end
  alt2073_1:
    set_addr $I10, alt2073_2
    rx2067_cur."!mark_push"(0, rx2067_pos, $I10)
  # rx literal  "token"
    add $I11, rx2067_pos, 5
    gt $I11, rx2067_eos, rx2067_fail
    sub $I11, rx2067_pos, rx2067_off
    substr $S10, rx2067_tgt, $I11, 5
    ne $S10, "token", rx2067_fail
    add rx2067_pos, 5
    goto alt2073_end
  alt2073_2:
  # rx literal  "rule"
    add $I11, rx2067_pos, 4
    gt $I11, rx2067_eos, rx2067_fail
    sub $I11, rx2067_pos, rx2067_off
    substr $S10, rx2067_tgt, $I11, 4
    ne $S10, "rule", rx2067_fail
    add rx2067_pos, 4
  alt2073_end:
    set_addr $I10, rxcap_2074_fail
    ($I12, $I11) = rx2067_cur."!mark_peek"($I10)
    rx2067_cur."!cursor_pos"($I11)
    ($P10) = rx2067_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2067_pos, "")
    rx2067_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2074_done
  rxcap_2074_fail:
    goto rx2067_fail
  rxcap_2074_done:
  # rx subrule "ws" subtype=method negate=
    rx2067_cur."!cursor_pos"(rx2067_pos)
    $P10 = rx2067_cur."ws"()
    unless $P10, rx2067_fail
    rx2067_pos = $P10."pos"()
.annotate 'line', 1198
  # rx subrule "deflongname" subtype=capture negate=
    rx2067_cur."!cursor_pos"(rx2067_pos)
    $P10 = rx2067_cur."deflongname"()
    unless $P10, rx2067_fail
    rx2067_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("deflongname")
    rx2067_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2067_cur."!cursor_pos"(rx2067_pos)
    $P10 = rx2067_cur."ws"()
    unless $P10, rx2067_fail
    rx2067_pos = $P10."pos"()
.annotate 'line', 1199
  # rx subrule "newpad" subtype=method negate=
    rx2067_cur."!cursor_pos"(rx2067_pos)
    $P10 = rx2067_cur."newpad"()
    unless $P10, rx2067_fail
    rx2067_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2067_cur."!cursor_pos"(rx2067_pos)
    $P10 = rx2067_cur."ws"()
    unless $P10, rx2067_fail
    rx2067_pos = $P10."pos"()
.annotate 'line', 1200
  # rx rxquantr2075 ** 0..1
    set_addr $I10, rxquantr2075_done
    rx2067_cur."!mark_push"(0, rx2067_pos, $I10)
  rxquantr2075_loop:
  # rx subrule "ws" subtype=method negate=
    rx2067_cur."!cursor_pos"(rx2067_pos)
    $P10 = rx2067_cur."ws"()
    unless $P10, rx2067_fail
    rx2067_pos = $P10."pos"()
  # rx literal  "("
    add $I11, rx2067_pos, 1
    gt $I11, rx2067_eos, rx2067_fail
    sub $I11, rx2067_pos, rx2067_off
    ord $I11, rx2067_tgt, $I11
    ne $I11, 40, rx2067_fail
    add rx2067_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2067_cur."!cursor_pos"(rx2067_pos)
    $P10 = rx2067_cur."ws"()
    unless $P10, rx2067_fail
    rx2067_pos = $P10."pos"()
  # rx subrule "signature" subtype=capture negate=
    rx2067_cur."!cursor_pos"(rx2067_pos)
    $P10 = rx2067_cur."signature"()
    unless $P10, rx2067_fail
    rx2067_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("signature")
    rx2067_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2067_cur."!cursor_pos"(rx2067_pos)
    $P10 = rx2067_cur."ws"()
    unless $P10, rx2067_fail
    rx2067_pos = $P10."pos"()
  # rx literal  ")"
    add $I11, rx2067_pos, 1
    gt $I11, rx2067_eos, rx2067_fail
    sub $I11, rx2067_pos, rx2067_off
    ord $I11, rx2067_tgt, $I11
    ne $I11, 41, rx2067_fail
    add rx2067_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2067_cur."!cursor_pos"(rx2067_pos)
    $P10 = rx2067_cur."ws"()
    unless $P10, rx2067_fail
    rx2067_pos = $P10."pos"()
    set_addr $I10, rxquantr2075_done
    (rx2067_rep) = rx2067_cur."!mark_commit"($I10)
  rxquantr2075_done:
  # rx subrule "ws" subtype=method negate=
    rx2067_cur."!cursor_pos"(rx2067_pos)
    $P10 = rx2067_cur."ws"()
    unless $P10, rx2067_fail
    rx2067_pos = $P10."pos"()
.annotate 'line', 1201
  # rx reduce name="regex_declarator" key="open"
    rx2067_cur."!cursor_pos"(rx2067_pos)
    rx2067_cur."!reduce"("regex_declarator", "open")
  # rx subrule "ws" subtype=method negate=
    rx2067_cur."!cursor_pos"(rx2067_pos)
    $P10 = rx2067_cur."ws"()
    unless $P10, rx2067_fail
    rx2067_pos = $P10."pos"()
.annotate 'line', 1202
  # rx literal  "{"
    add $I11, rx2067_pos, 1
    gt $I11, rx2067_eos, rx2067_fail
    sub $I11, rx2067_pos, rx2067_off
    ord $I11, rx2067_tgt, $I11
    ne $I11, 123, rx2067_fail
    add rx2067_pos, 1
  # rx subrule "LANG" subtype=capture negate=
    rx2067_cur."!cursor_pos"(rx2067_pos)
    $P10 = rx2067_cur."LANG"("Regex", "nibbler")
    unless $P10, rx2067_fail
    rx2067_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("p6regex")
    rx2067_pos = $P10."pos"()
  # rx literal  "}"
    add $I11, rx2067_pos, 1
    gt $I11, rx2067_eos, rx2067_fail
    sub $I11, rx2067_pos, rx2067_off
    ord $I11, rx2067_tgt, $I11
    ne $I11, 125, rx2067_fail
    add rx2067_pos, 1
  # rx subrule "ENDSTMT" subtype=zerowidth negate=
    rx2067_cur."!cursor_pos"(rx2067_pos)
    $P10 = rx2067_cur."ENDSTMT"()
    unless $P10, rx2067_fail
  # rx subrule "ws" subtype=method negate=
    rx2067_cur."!cursor_pos"(rx2067_pos)
    $P10 = rx2067_cur."ws"()
    unless $P10, rx2067_fail
    rx2067_pos = $P10."pos"()
  alt2069_end:
.annotate 'line', 1203
  # rx subrule "ws" subtype=method negate=
    rx2067_cur."!cursor_pos"(rx2067_pos)
    $P10 = rx2067_cur."ws"()
    unless $P10, rx2067_fail
    rx2067_pos = $P10."pos"()
.annotate 'line', 1188
  # rx pass
    rx2067_cur."!cursor_pass"(rx2067_pos, "regex_declarator")
    if_null rx2067_debug, debug_1484
    rx2067_cur."!cursor_debug"("PASS", "regex_declarator", " at pos=", rx2067_pos)
  debug_1484:
    .return (rx2067_cur)
  rx2067_restart:
    if_null rx2067_debug, debug_1485
    rx2067_cur."!cursor_debug"("NEXT", "regex_declarator")
  debug_1485:
  rx2067_fail:
    (rx2067_rep, rx2067_pos, $I10, $P10) = rx2067_cur."!mark_fail"(0)
    lt rx2067_pos, -1, rx2067_done
    eq rx2067_pos, -1, rx2067_fail
    jump $I10
  rx2067_done:
    rx2067_cur."!cursor_fail"()
    if_null rx2067_debug, debug_1486
    rx2067_cur."!cursor_debug"("FAIL", "regex_declarator")
  debug_1486:
    .return (rx2067_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__regex_declarator"  :subid("275_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1188
    $P132 = self."!PREFIX__!subrule"("ws", "")
    new $P133, "ResizablePMCArray"
    push $P133, $P132
    .return ($P133)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "dotty"  :subid("276_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1206
    .local string rx2078_tgt
    .local int rx2078_pos
    .local int rx2078_off
    .local int rx2078_eos
    .local int rx2078_rep
    .local pmc rx2078_cur
    .local pmc rx2078_debug
    (rx2078_cur, rx2078_pos, rx2078_tgt, $I10) = self."!cursor_start"()
    rx2078_cur."!cursor_caparray"("args")
    .lex unicode:"$\x{a2}", rx2078_cur
    .local pmc match
    .lex "$/", match
    length rx2078_eos, rx2078_tgt
    gt rx2078_pos, rx2078_eos, rx2078_done
    set rx2078_off, 0
    lt rx2078_pos, 2, rx2078_start
    sub rx2078_off, rx2078_pos, 1
    substr rx2078_tgt, rx2078_tgt, rx2078_off
  rx2078_start:
    eq $I10, 1, rx2078_restart
    if_null rx2078_debug, debug_1487
    rx2078_cur."!cursor_debug"("START", "dotty")
  debug_1487:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2079_done
    goto rxscan2079_scan
  rxscan2079_loop:
    (rx2078_pos) = rx2078_cur."from"()
    inc rx2078_pos
    rx2078_cur."!cursor_from"(rx2078_pos)
    ge rx2078_pos, rx2078_eos, rxscan2079_done
  rxscan2079_scan:
    set_addr $I10, rxscan2079_loop
    rx2078_cur."!mark_push"(0, rx2078_pos, $I10)
  rxscan2079_done:
.annotate 'line', 1207
  # rx literal  "."
    add $I11, rx2078_pos, 1
    gt $I11, rx2078_eos, rx2078_fail
    sub $I11, rx2078_pos, rx2078_off
    ord $I11, rx2078_tgt, $I11
    ne $I11, 46, rx2078_fail
    add rx2078_pos, 1
  alt2080_0:
.annotate 'line', 1208
    set_addr $I10, alt2080_1
    rx2078_cur."!mark_push"(0, rx2078_pos, $I10)
  # rx subrule "deflongname" subtype=capture negate=
    rx2078_cur."!cursor_pos"(rx2078_pos)
    $P10 = rx2078_cur."deflongname"()
    unless $P10, rx2078_fail
    rx2078_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("longname=deflongname")
    rx2078_pos = $P10."pos"()
    goto alt2080_end
  alt2080_1:
.annotate 'line', 1209
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2078_pos, rx2078_off
    substr $S10, rx2078_tgt, $I10, 1
    index $I11, "'\"", $S10
    lt $I11, 0, rx2078_fail
  # rx subrule "quote" subtype=capture negate=
    rx2078_cur."!cursor_pos"(rx2078_pos)
    $P10 = rx2078_cur."quote"()
    unless $P10, rx2078_fail
    rx2078_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote")
    rx2078_pos = $P10."pos"()
  alt2081_0:
.annotate 'line', 1210
    set_addr $I10, alt2081_1
    rx2078_cur."!mark_push"(0, rx2078_pos, $I10)
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2078_pos, rx2078_off
    substr $S10, rx2078_tgt, $I10, 1
    index $I11, "(", $S10
    lt $I11, 0, rx2078_fail
    goto alt2081_end
  alt2081_1:
  # rx subrule "panic" subtype=method negate=
    rx2078_cur."!cursor_pos"(rx2078_pos)
    $P10 = rx2078_cur."panic"("Quoted method name requires parenthesized arguments")
    unless $P10, rx2078_fail
    rx2078_pos = $P10."pos"()
  alt2081_end:
  alt2080_end:
.annotate 'line', 1216
  # rx rxquantr2082 ** 0..1
    set_addr $I10, rxquantr2082_done
    rx2078_cur."!mark_push"(0, rx2078_pos, $I10)
  rxquantr2082_loop:
  alt2083_0:
.annotate 'line', 1213
    set_addr $I10, alt2083_1
    rx2078_cur."!mark_push"(0, rx2078_pos, $I10)
.annotate 'line', 1214
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2078_pos, rx2078_off
    substr $S10, rx2078_tgt, $I10, 1
    index $I11, "(", $S10
    lt $I11, 0, rx2078_fail
  # rx subrule "args" subtype=capture negate=
    rx2078_cur."!cursor_pos"(rx2078_pos)
    $P10 = rx2078_cur."args"()
    unless $P10, rx2078_fail
    rx2078_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("args")
    rx2078_pos = $P10."pos"()
    goto alt2083_end
  alt2083_1:
.annotate 'line', 1215
  # rx literal  ":"
    add $I11, rx2078_pos, 1
    gt $I11, rx2078_eos, rx2078_fail
    sub $I11, rx2078_pos, rx2078_off
    ord $I11, rx2078_tgt, $I11
    ne $I11, 58, rx2078_fail
    add rx2078_pos, 1
  # rx charclass s
    ge rx2078_pos, rx2078_eos, rx2078_fail
    sub $I10, rx2078_pos, rx2078_off
    is_cclass $I11, .CCLASS_WHITESPACE, rx2078_tgt, $I10
    unless $I11, rx2078_fail
    inc rx2078_pos
  # rx subrule "arglist" subtype=capture negate=
    rx2078_cur."!cursor_pos"(rx2078_pos)
    $P10 = rx2078_cur."arglist"()
    unless $P10, rx2078_fail
    rx2078_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("args")
    rx2078_pos = $P10."pos"()
  alt2083_end:
.annotate 'line', 1216
    set_addr $I10, rxquantr2082_done
    (rx2078_rep) = rx2078_cur."!mark_commit"($I10)
  rxquantr2082_done:
.annotate 'line', 1206
  # rx pass
    rx2078_cur."!cursor_pass"(rx2078_pos, "dotty")
    if_null rx2078_debug, debug_1488
    rx2078_cur."!cursor_debug"("PASS", "dotty", " at pos=", rx2078_pos)
  debug_1488:
    .return (rx2078_cur)
  rx2078_restart:
    if_null rx2078_debug, debug_1489
    rx2078_cur."!cursor_debug"("NEXT", "dotty")
  debug_1489:
  rx2078_fail:
    (rx2078_rep, rx2078_pos, $I10, $P10) = rx2078_cur."!mark_fail"(0)
    lt rx2078_pos, -1, rx2078_done
    eq rx2078_pos, -1, rx2078_fail
    jump $I10
  rx2078_done:
    rx2078_cur."!cursor_fail"()
    if_null rx2078_debug, debug_1490
    rx2078_cur."!cursor_debug"("FAIL", "dotty")
  debug_1490:
    .return (rx2078_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__dotty"  :subid("277_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1206
    $P104 = self."!PREFIX__!subrule"("deflongname", ".")
    new $P105, "ResizablePMCArray"
    push $P105, "'"
    push $P105, "\""
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term"  :subid("278_1329260321.776")
    .param pmc param_2086
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1220
    .lex "self", param_2086
    $P104 = param_2086."!protoregex"("term")
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term"  :subid("279_1329260321.776")
    .param pmc param_2088
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1220
    .lex "self", param_2088
    $P105 = param_2088."!PREFIX__!protoregex"("term")
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<self>"  :subid("280_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1222
    .local string rx2090_tgt
    .local int rx2090_pos
    .local int rx2090_off
    .local int rx2090_eos
    .local int rx2090_rep
    .local pmc rx2090_cur
    .local pmc rx2090_debug
    (rx2090_cur, rx2090_pos, rx2090_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2090_cur
    .local pmc match
    .lex "$/", match
    length rx2090_eos, rx2090_tgt
    gt rx2090_pos, rx2090_eos, rx2090_done
    set rx2090_off, 0
    lt rx2090_pos, 2, rx2090_start
    sub rx2090_off, rx2090_pos, 1
    substr rx2090_tgt, rx2090_tgt, rx2090_off
  rx2090_start:
    eq $I10, 1, rx2090_restart
    if_null rx2090_debug, debug_1491
    rx2090_cur."!cursor_debug"("START", "term:sym<self>")
  debug_1491:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2091_done
    goto rxscan2091_scan
  rxscan2091_loop:
    (rx2090_pos) = rx2090_cur."from"()
    inc rx2090_pos
    rx2090_cur."!cursor_from"(rx2090_pos)
    ge rx2090_pos, rx2090_eos, rxscan2091_done
  rxscan2091_scan:
    set_addr $I10, rxscan2091_loop
    rx2090_cur."!mark_push"(0, rx2090_pos, $I10)
  rxscan2091_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2092_fail
    rx2090_cur."!mark_push"(0, rx2090_pos, $I10)
  # rx literal  "self"
    add $I11, rx2090_pos, 4
    gt $I11, rx2090_eos, rx2090_fail
    sub $I11, rx2090_pos, rx2090_off
    substr $S10, rx2090_tgt, $I11, 4
    ne $S10, "self", rx2090_fail
    add rx2090_pos, 4
    set_addr $I10, rxcap_2092_fail
    ($I12, $I11) = rx2090_cur."!mark_peek"($I10)
    rx2090_cur."!cursor_pos"($I11)
    ($P10) = rx2090_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2090_pos, "")
    rx2090_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2092_done
  rxcap_2092_fail:
    goto rx2090_fail
  rxcap_2092_done:
  # rxanchor rwb
    le rx2090_pos, 0, rx2090_fail
    sub $I10, rx2090_pos, rx2090_off
    is_cclass $I11, .CCLASS_WORD, rx2090_tgt, $I10
    if $I11, rx2090_fail
    dec $I10
    is_cclass $I11, .CCLASS_WORD, rx2090_tgt, $I10
    unless $I11, rx2090_fail
  # rx pass
    rx2090_cur."!cursor_pass"(rx2090_pos, "term:sym<self>")
    if_null rx2090_debug, debug_1492
    rx2090_cur."!cursor_debug"("PASS", "term:sym<self>", " at pos=", rx2090_pos)
  debug_1492:
    .return (rx2090_cur)
  rx2090_restart:
    if_null rx2090_debug, debug_1493
    rx2090_cur."!cursor_debug"("NEXT", "term:sym<self>")
  debug_1493:
  rx2090_fail:
    (rx2090_rep, rx2090_pos, $I10, $P10) = rx2090_cur."!mark_fail"(0)
    lt rx2090_pos, -1, rx2090_done
    eq rx2090_pos, -1, rx2090_fail
    jump $I10
  rx2090_done:
    rx2090_cur."!cursor_fail"()
    if_null rx2090_debug, debug_1494
    rx2090_cur."!cursor_debug"("FAIL", "term:sym<self>")
  debug_1494:
    .return (rx2090_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<self>"  :subid("281_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1222
    new $P104, "ResizablePMCArray"
    push $P104, "self"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<identifier>"  :subid("282_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1224
    .local string rx2095_tgt
    .local int rx2095_pos
    .local int rx2095_off
    .local int rx2095_eos
    .local int rx2095_rep
    .local pmc rx2095_cur
    .local pmc rx2095_debug
    (rx2095_cur, rx2095_pos, rx2095_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2095_cur
    .local pmc match
    .lex "$/", match
    length rx2095_eos, rx2095_tgt
    gt rx2095_pos, rx2095_eos, rx2095_done
    set rx2095_off, 0
    lt rx2095_pos, 2, rx2095_start
    sub rx2095_off, rx2095_pos, 1
    substr rx2095_tgt, rx2095_tgt, rx2095_off
  rx2095_start:
    eq $I10, 1, rx2095_restart
    if_null rx2095_debug, debug_1495
    rx2095_cur."!cursor_debug"("START", "term:sym<identifier>")
  debug_1495:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2096_done
    goto rxscan2096_scan
  rxscan2096_loop:
    (rx2095_pos) = rx2095_cur."from"()
    inc rx2095_pos
    rx2095_cur."!cursor_from"(rx2095_pos)
    ge rx2095_pos, rx2095_eos, rxscan2096_done
  rxscan2096_scan:
    set_addr $I10, rxscan2096_loop
    rx2095_cur."!mark_push"(0, rx2095_pos, $I10)
  rxscan2096_done:
.annotate 'line', 1225
  # rx subrule "deflongname" subtype=capture negate=
    rx2095_cur."!cursor_pos"(rx2095_pos)
    $P10 = rx2095_cur."deflongname"()
    unless $P10, rx2095_fail
    rx2095_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("deflongname")
    rx2095_pos = $P10."pos"()
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2095_pos, rx2095_off
    substr $S10, rx2095_tgt, $I10, 1
    index $I11, "(", $S10
    lt $I11, 0, rx2095_fail
  # rx subrule "args" subtype=capture negate=
    rx2095_cur."!cursor_pos"(rx2095_pos)
    $P10 = rx2095_cur."args"()
    unless $P10, rx2095_fail
    rx2095_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("args")
    rx2095_pos = $P10."pos"()
.annotate 'line', 1224
  # rx pass
    rx2095_cur."!cursor_pass"(rx2095_pos, "term:sym<identifier>")
    if_null rx2095_debug, debug_1496
    rx2095_cur."!cursor_debug"("PASS", "term:sym<identifier>", " at pos=", rx2095_pos)
  debug_1496:
    .return (rx2095_cur)
  rx2095_restart:
    if_null rx2095_debug, debug_1497
    rx2095_cur."!cursor_debug"("NEXT", "term:sym<identifier>")
  debug_1497:
  rx2095_fail:
    (rx2095_rep, rx2095_pos, $I10, $P10) = rx2095_cur."!mark_fail"(0)
    lt rx2095_pos, -1, rx2095_done
    eq rx2095_pos, -1, rx2095_fail
    jump $I10
  rx2095_done:
    rx2095_cur."!cursor_fail"()
    if_null rx2095_debug, debug_1498
    rx2095_cur."!cursor_debug"("FAIL", "term:sym<identifier>")
  debug_1498:
    .return (rx2095_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<identifier>"  :subid("283_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1224
    $P104 = self."!PREFIX__!subrule"("deflongname", "")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<name>"  :subid("284_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1228
    .local string rx2099_tgt
    .local int rx2099_pos
    .local int rx2099_off
    .local int rx2099_eos
    .local int rx2099_rep
    .local pmc rx2099_cur
    .local pmc rx2099_debug
    (rx2099_cur, rx2099_pos, rx2099_tgt, $I10) = self."!cursor_start"()
    rx2099_cur."!cursor_caparray"("args")
    .lex unicode:"$\x{a2}", rx2099_cur
    .local pmc match
    .lex "$/", match
    length rx2099_eos, rx2099_tgt
    gt rx2099_pos, rx2099_eos, rx2099_done
    set rx2099_off, 0
    lt rx2099_pos, 2, rx2099_start
    sub rx2099_off, rx2099_pos, 1
    substr rx2099_tgt, rx2099_tgt, rx2099_off
  rx2099_start:
    eq $I10, 1, rx2099_restart
    if_null rx2099_debug, debug_1499
    rx2099_cur."!cursor_debug"("START", "term:sym<name>")
  debug_1499:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2100_done
    goto rxscan2100_scan
  rxscan2100_loop:
    (rx2099_pos) = rx2099_cur."from"()
    inc rx2099_pos
    rx2099_cur."!cursor_from"(rx2099_pos)
    ge rx2099_pos, rx2099_eos, rxscan2100_done
  rxscan2100_scan:
    set_addr $I10, rxscan2100_loop
    rx2099_cur."!mark_push"(0, rx2099_pos, $I10)
  rxscan2100_done:
.annotate 'line', 1229
  # rx subrule "name" subtype=capture negate=
    rx2099_cur."!cursor_pos"(rx2099_pos)
    $P10 = rx2099_cur."name"()
    unless $P10, rx2099_fail
    rx2099_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("name")
    rx2099_pos = $P10."pos"()
  # rx rxquantr2101 ** 0..1
    set_addr $I10, rxquantr2101_done
    rx2099_cur."!mark_push"(0, rx2099_pos, $I10)
  rxquantr2101_loop:
  # rx subrule "args" subtype=capture negate=
    rx2099_cur."!cursor_pos"(rx2099_pos)
    $P10 = rx2099_cur."args"()
    unless $P10, rx2099_fail
    goto rxsubrule2102_pass
  rxsubrule2102_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx2099_fail
  rxsubrule2102_pass:
    set_addr $I10, rxsubrule2102_back
    rx2099_cur."!mark_push"(0, rx2099_pos, $I10, $P10)
    $P10."!cursor_names"("args")
    rx2099_pos = $P10."pos"()
    set_addr $I10, rxquantr2101_done
    (rx2099_rep) = rx2099_cur."!mark_commit"($I10)
  rxquantr2101_done:
.annotate 'line', 1228
  # rx pass
    rx2099_cur."!cursor_pass"(rx2099_pos, "term:sym<name>")
    if_null rx2099_debug, debug_1500
    rx2099_cur."!cursor_debug"("PASS", "term:sym<name>", " at pos=", rx2099_pos)
  debug_1500:
    .return (rx2099_cur)
  rx2099_restart:
    if_null rx2099_debug, debug_1501
    rx2099_cur."!cursor_debug"("NEXT", "term:sym<name>")
  debug_1501:
  rx2099_fail:
    (rx2099_rep, rx2099_pos, $I10, $P10) = rx2099_cur."!mark_fail"(0)
    lt rx2099_pos, -1, rx2099_done
    eq rx2099_pos, -1, rx2099_fail
    jump $I10
  rx2099_done:
    rx2099_cur."!cursor_fail"()
    if_null rx2099_debug, debug_1502
    rx2099_cur."!cursor_debug"("FAIL", "term:sym<name>")
  debug_1502:
    .return (rx2099_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<name>"  :subid("285_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1228
    $P104 = self."!PREFIX__!subrule"("name", "")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<pir::op>"  :subid("286_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1232
    .local string rx2105_tgt
    .local int rx2105_pos
    .local int rx2105_off
    .local int rx2105_eos
    .local int rx2105_rep
    .local pmc rx2105_cur
    .local pmc rx2105_debug
    (rx2105_cur, rx2105_pos, rx2105_tgt, $I10) = self."!cursor_start"()
    rx2105_cur."!cursor_caparray"("args")
    .lex unicode:"$\x{a2}", rx2105_cur
    .local pmc match
    .lex "$/", match
    length rx2105_eos, rx2105_tgt
    gt rx2105_pos, rx2105_eos, rx2105_done
    set rx2105_off, 0
    lt rx2105_pos, 2, rx2105_start
    sub rx2105_off, rx2105_pos, 1
    substr rx2105_tgt, rx2105_tgt, rx2105_off
  rx2105_start:
    eq $I10, 1, rx2105_restart
    if_null rx2105_debug, debug_1503
    rx2105_cur."!cursor_debug"("START", "term:sym<pir::op>")
  debug_1503:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2106_done
    goto rxscan2106_scan
  rxscan2106_loop:
    (rx2105_pos) = rx2105_cur."from"()
    inc rx2105_pos
    rx2105_cur."!cursor_from"(rx2105_pos)
    ge rx2105_pos, rx2105_eos, rxscan2106_done
  rxscan2106_scan:
    set_addr $I10, rxscan2106_loop
    rx2105_cur."!mark_push"(0, rx2105_pos, $I10)
  rxscan2106_done:
.annotate 'line', 1233
  # rx literal  "pir::"
    add $I11, rx2105_pos, 5
    gt $I11, rx2105_eos, rx2105_fail
    sub $I11, rx2105_pos, rx2105_off
    substr $S10, rx2105_tgt, $I11, 5
    ne $S10, "pir::", rx2105_fail
    add rx2105_pos, 5
  # rx subcapture "op"
    set_addr $I10, rxcap_2107_fail
    rx2105_cur."!mark_push"(0, rx2105_pos, $I10)
  # rx charclass_q w r 1..-1
    sub $I10, rx2105_pos, rx2105_off
    find_not_cclass $I11, .CCLASS_WORD, rx2105_tgt, $I10, rx2105_eos
    add $I12, $I10, 1
    lt $I11, $I12, rx2105_fail
    add rx2105_pos, rx2105_off, $I11
    set_addr $I10, rxcap_2107_fail
    ($I12, $I11) = rx2105_cur."!mark_peek"($I10)
    rx2105_cur."!cursor_pos"($I11)
    ($P10) = rx2105_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2105_pos, "")
    rx2105_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("op")
    goto rxcap_2107_done
  rxcap_2107_fail:
    goto rx2105_fail
  rxcap_2107_done:
  # rx rxquantr2108 ** 0..1
    set_addr $I10, rxquantr2108_done
    rx2105_cur."!mark_push"(0, rx2105_pos, $I10)
  rxquantr2108_loop:
  # rx subrule "args" subtype=capture negate=
    rx2105_cur."!cursor_pos"(rx2105_pos)
    $P10 = rx2105_cur."args"()
    unless $P10, rx2105_fail
    goto rxsubrule2109_pass
  rxsubrule2109_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx2105_fail
  rxsubrule2109_pass:
    set_addr $I10, rxsubrule2109_back
    rx2105_cur."!mark_push"(0, rx2105_pos, $I10, $P10)
    $P10."!cursor_names"("args")
    rx2105_pos = $P10."pos"()
    set_addr $I10, rxquantr2108_done
    (rx2105_rep) = rx2105_cur."!mark_commit"($I10)
  rxquantr2108_done:
.annotate 'line', 1232
  # rx pass
    rx2105_cur."!cursor_pass"(rx2105_pos, "term:sym<pir::op>")
    if_null rx2105_debug, debug_1504
    rx2105_cur."!cursor_debug"("PASS", "term:sym<pir::op>", " at pos=", rx2105_pos)
  debug_1504:
    .return (rx2105_cur)
  rx2105_restart:
    if_null rx2105_debug, debug_1505
    rx2105_cur."!cursor_debug"("NEXT", "term:sym<pir::op>")
  debug_1505:
  rx2105_fail:
    (rx2105_rep, rx2105_pos, $I10, $P10) = rx2105_cur."!mark_fail"(0)
    lt rx2105_pos, -1, rx2105_done
    eq rx2105_pos, -1, rx2105_fail
    jump $I10
  rx2105_done:
    rx2105_cur."!cursor_fail"()
    if_null rx2105_debug, debug_1506
    rx2105_cur."!cursor_debug"("FAIL", "term:sym<pir::op>")
  debug_1506:
    .return (rx2105_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<pir::op>"  :subid("287_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1232
    new $P104, "ResizablePMCArray"
    push $P104, "pir::"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<pir::const>"  :subid("288_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1236
    .local string rx2112_tgt
    .local int rx2112_pos
    .local int rx2112_off
    .local int rx2112_eos
    .local int rx2112_rep
    .local pmc rx2112_cur
    .local pmc rx2112_debug
    (rx2112_cur, rx2112_pos, rx2112_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2112_cur
    .local pmc match
    .lex "$/", match
    length rx2112_eos, rx2112_tgt
    gt rx2112_pos, rx2112_eos, rx2112_done
    set rx2112_off, 0
    lt rx2112_pos, 2, rx2112_start
    sub rx2112_off, rx2112_pos, 1
    substr rx2112_tgt, rx2112_tgt, rx2112_off
  rx2112_start:
    eq $I10, 1, rx2112_restart
    if_null rx2112_debug, debug_1507
    rx2112_cur."!cursor_debug"("START", "term:sym<pir::const>")
  debug_1507:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2113_done
    goto rxscan2113_scan
  rxscan2113_loop:
    (rx2112_pos) = rx2112_cur."from"()
    inc rx2112_pos
    rx2112_cur."!cursor_from"(rx2112_pos)
    ge rx2112_pos, rx2112_eos, rxscan2113_done
  rxscan2113_scan:
    set_addr $I10, rxscan2113_loop
    rx2112_cur."!mark_push"(0, rx2112_pos, $I10)
  rxscan2113_done:
.annotate 'line', 1237
  # rx literal  "pir::const::"
    add $I11, rx2112_pos, 12
    gt $I11, rx2112_eos, rx2112_fail
    sub $I11, rx2112_pos, rx2112_off
    substr $S10, rx2112_tgt, $I11, 12
    ne $S10, "pir::const::", rx2112_fail
    add rx2112_pos, 12
  # rx subcapture "const"
    set_addr $I10, rxcap_2114_fail
    rx2112_cur."!mark_push"(0, rx2112_pos, $I10)
  # rx charclass_q w r 1..-1
    sub $I10, rx2112_pos, rx2112_off
    find_not_cclass $I11, .CCLASS_WORD, rx2112_tgt, $I10, rx2112_eos
    add $I12, $I10, 1
    lt $I11, $I12, rx2112_fail
    add rx2112_pos, rx2112_off, $I11
    set_addr $I10, rxcap_2114_fail
    ($I12, $I11) = rx2112_cur."!mark_peek"($I10)
    rx2112_cur."!cursor_pos"($I11)
    ($P10) = rx2112_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2112_pos, "")
    rx2112_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("const")
    goto rxcap_2114_done
  rxcap_2114_fail:
    goto rx2112_fail
  rxcap_2114_done:
.annotate 'line', 1236
  # rx pass
    rx2112_cur."!cursor_pass"(rx2112_pos, "term:sym<pir::const>")
    if_null rx2112_debug, debug_1508
    rx2112_cur."!cursor_debug"("PASS", "term:sym<pir::const>", " at pos=", rx2112_pos)
  debug_1508:
    .return (rx2112_cur)
  rx2112_restart:
    if_null rx2112_debug, debug_1509
    rx2112_cur."!cursor_debug"("NEXT", "term:sym<pir::const>")
  debug_1509:
  rx2112_fail:
    (rx2112_rep, rx2112_pos, $I10, $P10) = rx2112_cur."!mark_fail"(0)
    lt rx2112_pos, -1, rx2112_done
    eq rx2112_pos, -1, rx2112_fail
    jump $I10
  rx2112_done:
    rx2112_cur."!cursor_fail"()
    if_null rx2112_debug, debug_1510
    rx2112_cur."!cursor_debug"("FAIL", "term:sym<pir::const>")
  debug_1510:
    .return (rx2112_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<pir::const>"  :subid("289_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1236
    new $P104, "ResizablePMCArray"
    push $P104, "pir::const::"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<nqp::op>"  :subid("290_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1240
    .local string rx2117_tgt
    .local int rx2117_pos
    .local int rx2117_off
    .local int rx2117_eos
    .local int rx2117_rep
    .local pmc rx2117_cur
    .local pmc rx2117_debug
    (rx2117_cur, rx2117_pos, rx2117_tgt, $I10) = self."!cursor_start"()
    rx2117_cur."!cursor_caparray"("args")
    .lex unicode:"$\x{a2}", rx2117_cur
    .local pmc match
    .lex "$/", match
    length rx2117_eos, rx2117_tgt
    gt rx2117_pos, rx2117_eos, rx2117_done
    set rx2117_off, 0
    lt rx2117_pos, 2, rx2117_start
    sub rx2117_off, rx2117_pos, 1
    substr rx2117_tgt, rx2117_tgt, rx2117_off
  rx2117_start:
    eq $I10, 1, rx2117_restart
    if_null rx2117_debug, debug_1511
    rx2117_cur."!cursor_debug"("START", "term:sym<nqp::op>")
  debug_1511:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2118_done
    goto rxscan2118_scan
  rxscan2118_loop:
    (rx2117_pos) = rx2117_cur."from"()
    inc rx2117_pos
    rx2117_cur."!cursor_from"(rx2117_pos)
    ge rx2117_pos, rx2117_eos, rxscan2118_done
  rxscan2118_scan:
    set_addr $I10, rxscan2118_loop
    rx2117_cur."!mark_push"(0, rx2117_pos, $I10)
  rxscan2118_done:
.annotate 'line', 1241
  # rx literal  "nqp::"
    add $I11, rx2117_pos, 5
    gt $I11, rx2117_eos, rx2117_fail
    sub $I11, rx2117_pos, rx2117_off
    substr $S10, rx2117_tgt, $I11, 5
    ne $S10, "nqp::", rx2117_fail
    add rx2117_pos, 5
  # rx subcapture "op"
    set_addr $I10, rxcap_2119_fail
    rx2117_cur."!mark_push"(0, rx2117_pos, $I10)
  # rx charclass_q w r 1..-1
    sub $I10, rx2117_pos, rx2117_off
    find_not_cclass $I11, .CCLASS_WORD, rx2117_tgt, $I10, rx2117_eos
    add $I12, $I10, 1
    lt $I11, $I12, rx2117_fail
    add rx2117_pos, rx2117_off, $I11
    set_addr $I10, rxcap_2119_fail
    ($I12, $I11) = rx2117_cur."!mark_peek"($I10)
    rx2117_cur."!cursor_pos"($I11)
    ($P10) = rx2117_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2117_pos, "")
    rx2117_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("op")
    goto rxcap_2119_done
  rxcap_2119_fail:
    goto rx2117_fail
  rxcap_2119_done:
  # rx rxquantr2120 ** 0..1
    set_addr $I10, rxquantr2120_done
    rx2117_cur."!mark_push"(0, rx2117_pos, $I10)
  rxquantr2120_loop:
  # rx subrule "args" subtype=capture negate=
    rx2117_cur."!cursor_pos"(rx2117_pos)
    $P10 = rx2117_cur."args"()
    unless $P10, rx2117_fail
    goto rxsubrule2121_pass
  rxsubrule2121_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx2117_fail
  rxsubrule2121_pass:
    set_addr $I10, rxsubrule2121_back
    rx2117_cur."!mark_push"(0, rx2117_pos, $I10, $P10)
    $P10."!cursor_names"("args")
    rx2117_pos = $P10."pos"()
    set_addr $I10, rxquantr2120_done
    (rx2117_rep) = rx2117_cur."!mark_commit"($I10)
  rxquantr2120_done:
.annotate 'line', 1240
  # rx pass
    rx2117_cur."!cursor_pass"(rx2117_pos, "term:sym<nqp::op>")
    if_null rx2117_debug, debug_1512
    rx2117_cur."!cursor_debug"("PASS", "term:sym<nqp::op>", " at pos=", rx2117_pos)
  debug_1512:
    .return (rx2117_cur)
  rx2117_restart:
    if_null rx2117_debug, debug_1513
    rx2117_cur."!cursor_debug"("NEXT", "term:sym<nqp::op>")
  debug_1513:
  rx2117_fail:
    (rx2117_rep, rx2117_pos, $I10, $P10) = rx2117_cur."!mark_fail"(0)
    lt rx2117_pos, -1, rx2117_done
    eq rx2117_pos, -1, rx2117_fail
    jump $I10
  rx2117_done:
    rx2117_cur."!cursor_fail"()
    if_null rx2117_debug, debug_1514
    rx2117_cur."!cursor_debug"("FAIL", "term:sym<nqp::op>")
  debug_1514:
    .return (rx2117_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<nqp::op>"  :subid("291_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1240
    new $P104, "ResizablePMCArray"
    push $P104, "nqp::"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<onlystar>"  :subid("292_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1244
    .const 'Sub' $P2128 = "293_1329260321.776" 
    capture_lex $P2128
    .local string rx2124_tgt
    .local int rx2124_pos
    .local int rx2124_off
    .local int rx2124_eos
    .local int rx2124_rep
    .local pmc rx2124_cur
    .local pmc rx2124_debug
    (rx2124_cur, rx2124_pos, rx2124_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2124_cur
    .local pmc match
    .lex "$/", match
    length rx2124_eos, rx2124_tgt
    gt rx2124_pos, rx2124_eos, rx2124_done
    set rx2124_off, 0
    lt rx2124_pos, 2, rx2124_start
    sub rx2124_off, rx2124_pos, 1
    substr rx2124_tgt, rx2124_tgt, rx2124_off
  rx2124_start:
    eq $I10, 1, rx2124_restart
    if_null rx2124_debug, debug_1515
    rx2124_cur."!cursor_debug"("START", "term:sym<onlystar>")
  debug_1515:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2125_done
    goto rxscan2125_scan
  rxscan2125_loop:
    (rx2124_pos) = rx2124_cur."from"()
    inc rx2124_pos
    rx2124_cur."!cursor_from"(rx2124_pos)
    ge rx2124_pos, rx2124_eos, rxscan2125_done
  rxscan2125_scan:
    set_addr $I10, rxscan2125_loop
    rx2124_cur."!mark_push"(0, rx2124_pos, $I10)
  rxscan2125_done:
.annotate 'line', 1245
  # rx literal  "{*}"
    add $I11, rx2124_pos, 3
    gt $I11, rx2124_eos, rx2124_fail
    sub $I11, rx2124_pos, rx2124_off
    substr $S10, rx2124_tgt, $I11, 3
    ne $S10, "{*}", rx2124_fail
    add rx2124_pos, 3
  # rx subrule "ENDSTMT" subtype=zerowidth negate=
    rx2124_cur."!cursor_pos"(rx2124_pos)
    $P10 = rx2124_cur."ENDSTMT"()
    unless $P10, rx2124_fail
  alt2126_0:
.annotate 'line', 1246
    set_addr $I10, alt2126_1
    rx2124_cur."!mark_push"(0, rx2124_pos, $I10)
    rx2124_cur."!cursor_pos"(rx2124_pos)
    find_lex $P104, unicode:"$\x{a2}"
    $P105 = $P104."MATCH"()
    store_lex "$/", $P105
    .const 'Sub' $P2128 = "293_1329260321.776" 
    capture_lex $P2128
    $P106 = $P2128()
    unless $P106, rx2124_fail
    goto alt2126_end
  alt2126_1:
  # rx subrule "panic" subtype=method negate=
    rx2124_cur."!cursor_pos"(rx2124_pos)
    $P10 = rx2124_cur."panic"("{*} may only appear in proto")
    unless $P10, rx2124_fail
    rx2124_pos = $P10."pos"()
  alt2126_end:
.annotate 'line', 1244
  # rx pass
    rx2124_cur."!cursor_pass"(rx2124_pos, "term:sym<onlystar>")
    if_null rx2124_debug, debug_1518
    rx2124_cur."!cursor_debug"("PASS", "term:sym<onlystar>", " at pos=", rx2124_pos)
  debug_1518:
    .return (rx2124_cur)
  rx2124_restart:
    if_null rx2124_debug, debug_1519
    rx2124_cur."!cursor_debug"("NEXT", "term:sym<onlystar>")
  debug_1519:
  rx2124_fail:
    (rx2124_rep, rx2124_pos, $I10, $P10) = rx2124_cur."!mark_fail"(0)
    lt rx2124_pos, -1, rx2124_done
    eq rx2124_pos, -1, rx2124_fail
    jump $I10
  rx2124_done:
    rx2124_cur."!cursor_fail"()
    if_null rx2124_debug, debug_1520
    rx2124_cur."!cursor_debug"("FAIL", "term:sym<onlystar>")
  debug_1520:
    .return (rx2124_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block2127"  :anon :subid("293_1329260321.776") :outer("292_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1246
    find_dynamic_lex $P108, "$*MULTINESS"
    unless_null $P108, vivify_1516
    get_hll_global $P106, "GLOBAL"
    get_who $P107, $P106
    set $P108, $P107["$MULTINESS"]
    unless_null $P108, vivify_1517
    die "Contextual $*MULTINESS not found"
  vivify_1517:
  vivify_1516:
    set $S100, $P108
    iseq $I100, $S100, "proto"
    .return ($I100)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<onlystar>"  :subid("294_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1244
    new $P107, "ResizablePMCArray"
    push $P107, "{*}"
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "args"  :subid("295_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1249
    .local string rx2131_tgt
    .local int rx2131_pos
    .local int rx2131_off
    .local int rx2131_eos
    .local int rx2131_rep
    .local pmc rx2131_cur
    .local pmc rx2131_debug
    (rx2131_cur, rx2131_pos, rx2131_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2131_cur
    .local pmc match
    .lex "$/", match
    length rx2131_eos, rx2131_tgt
    gt rx2131_pos, rx2131_eos, rx2131_done
    set rx2131_off, 0
    lt rx2131_pos, 2, rx2131_start
    sub rx2131_off, rx2131_pos, 1
    substr rx2131_tgt, rx2131_tgt, rx2131_off
  rx2131_start:
    eq $I10, 1, rx2131_restart
    if_null rx2131_debug, debug_1521
    rx2131_cur."!cursor_debug"("START", "args")
  debug_1521:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2132_done
    goto rxscan2132_scan
  rxscan2132_loop:
    (rx2131_pos) = rx2131_cur."from"()
    inc rx2131_pos
    rx2131_cur."!cursor_from"(rx2131_pos)
    ge rx2131_pos, rx2131_eos, rxscan2132_done
  rxscan2132_scan:
    set_addr $I10, rxscan2132_loop
    rx2131_cur."!mark_push"(0, rx2131_pos, $I10)
  rxscan2132_done:
.annotate 'line', 1250
  # rx literal  "("
    add $I11, rx2131_pos, 1
    gt $I11, rx2131_eos, rx2131_fail
    sub $I11, rx2131_pos, rx2131_off
    ord $I11, rx2131_tgt, $I11
    ne $I11, 40, rx2131_fail
    add rx2131_pos, 1
  # rx subrule "arglist" subtype=capture negate=
    rx2131_cur."!cursor_pos"(rx2131_pos)
    $P10 = rx2131_cur."arglist"()
    unless $P10, rx2131_fail
    rx2131_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("arglist")
    rx2131_pos = $P10."pos"()
  # rx literal  ")"
    add $I11, rx2131_pos, 1
    gt $I11, rx2131_eos, rx2131_fail
    sub $I11, rx2131_pos, rx2131_off
    ord $I11, rx2131_tgt, $I11
    ne $I11, 41, rx2131_fail
    add rx2131_pos, 1
  # rx pass
    rx2131_cur."!cursor_pass"(rx2131_pos, "args")
    if_null rx2131_debug, debug_1522
    rx2131_cur."!cursor_debug"("PASS", "args", " at pos=", rx2131_pos)
  debug_1522:
    .return (rx2131_cur)
  rx2131_restart:
.annotate 'line', 1249
    if_null rx2131_debug, debug_1523
    rx2131_cur."!cursor_debug"("NEXT", "args")
  debug_1523:
  rx2131_fail:
    (rx2131_rep, rx2131_pos, $I10, $P10) = rx2131_cur."!mark_fail"(0)
    lt rx2131_pos, -1, rx2131_done
    eq rx2131_pos, -1, rx2131_fail
    jump $I10
  rx2131_done:
    rx2131_cur."!cursor_fail"()
    if_null rx2131_debug, debug_1524
    rx2131_cur."!cursor_debug"("FAIL", "args")
  debug_1524:
    .return (rx2131_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__args"  :subid("296_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1249
    $P104 = self."!PREFIX__!subrule"("arglist", "(")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "arglist"  :subid("297_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1253
    .local string rx2135_tgt
    .local int rx2135_pos
    .local int rx2135_off
    .local int rx2135_eos
    .local int rx2135_rep
    .local pmc rx2135_cur
    .local pmc rx2135_debug
    (rx2135_cur, rx2135_pos, rx2135_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2135_cur
    .local pmc match
    .lex "$/", match
    length rx2135_eos, rx2135_tgt
    gt rx2135_pos, rx2135_eos, rx2135_done
    set rx2135_off, 0
    lt rx2135_pos, 2, rx2135_start
    sub rx2135_off, rx2135_pos, 1
    substr rx2135_tgt, rx2135_tgt, rx2135_off
  rx2135_start:
    eq $I10, 1, rx2135_restart
    if_null rx2135_debug, debug_1525
    rx2135_cur."!cursor_debug"("START", "arglist")
  debug_1525:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2136_done
    goto rxscan2136_scan
  rxscan2136_loop:
    (rx2135_pos) = rx2135_cur."from"()
    inc rx2135_pos
    rx2135_cur."!cursor_from"(rx2135_pos)
    ge rx2135_pos, rx2135_eos, rxscan2136_done
  rxscan2136_scan:
    set_addr $I10, rxscan2136_loop
    rx2135_cur."!mark_push"(0, rx2135_pos, $I10)
  rxscan2136_done:
.annotate 'line', 1254
  # rx subrule "ws" subtype=method negate=
    rx2135_cur."!cursor_pos"(rx2135_pos)
    $P10 = rx2135_cur."ws"()
    unless $P10, rx2135_fail
    rx2135_pos = $P10."pos"()
  alt2137_0:
.annotate 'line', 1255
    set_addr $I10, alt2137_1
    rx2135_cur."!mark_push"(0, rx2135_pos, $I10)
.annotate 'line', 1256
  # rx subrule "EXPR" subtype=capture negate=
    rx2135_cur."!cursor_pos"(rx2135_pos)
    $P10 = rx2135_cur."EXPR"("f=")
    unless $P10, rx2135_fail
    rx2135_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("EXPR")
    rx2135_pos = $P10."pos"()
    goto alt2137_end
  alt2137_1:
  alt2137_end:
.annotate 'line', 1253
  # rx pass
    rx2135_cur."!cursor_pass"(rx2135_pos, "arglist")
    if_null rx2135_debug, debug_1526
    rx2135_cur."!cursor_debug"("PASS", "arglist", " at pos=", rx2135_pos)
  debug_1526:
    .return (rx2135_cur)
  rx2135_restart:
    if_null rx2135_debug, debug_1527
    rx2135_cur."!cursor_debug"("NEXT", "arglist")
  debug_1527:
  rx2135_fail:
    (rx2135_rep, rx2135_pos, $I10, $P10) = rx2135_cur."!mark_fail"(0)
    lt rx2135_pos, -1, rx2135_done
    eq rx2135_pos, -1, rx2135_fail
    jump $I10
  rx2135_done:
    rx2135_cur."!cursor_fail"()
    if_null rx2135_debug, debug_1528
    rx2135_cur."!cursor_debug"("FAIL", "arglist")
  debug_1528:
    .return (rx2135_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__arglist"  :subid("298_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1253
    $P104 = self."!PREFIX__!subrule"("ws", "")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<value>"  :subid("299_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1262
    .local string rx2140_tgt
    .local int rx2140_pos
    .local int rx2140_off
    .local int rx2140_eos
    .local int rx2140_rep
    .local pmc rx2140_cur
    .local pmc rx2140_debug
    (rx2140_cur, rx2140_pos, rx2140_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2140_cur
    .local pmc match
    .lex "$/", match
    length rx2140_eos, rx2140_tgt
    gt rx2140_pos, rx2140_eos, rx2140_done
    set rx2140_off, 0
    lt rx2140_pos, 2, rx2140_start
    sub rx2140_off, rx2140_pos, 1
    substr rx2140_tgt, rx2140_tgt, rx2140_off
  rx2140_start:
    eq $I10, 1, rx2140_restart
    if_null rx2140_debug, debug_1529
    rx2140_cur."!cursor_debug"("START", "term:sym<value>")
  debug_1529:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2141_done
    goto rxscan2141_scan
  rxscan2141_loop:
    (rx2140_pos) = rx2140_cur."from"()
    inc rx2140_pos
    rx2140_cur."!cursor_from"(rx2140_pos)
    ge rx2140_pos, rx2140_eos, rxscan2141_done
  rxscan2141_scan:
    set_addr $I10, rxscan2141_loop
    rx2140_cur."!mark_push"(0, rx2140_pos, $I10)
  rxscan2141_done:
  # rx subrule "value" subtype=capture negate=
    rx2140_cur."!cursor_pos"(rx2140_pos)
    $P10 = rx2140_cur."value"()
    unless $P10, rx2140_fail
    rx2140_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("value")
    rx2140_pos = $P10."pos"()
  # rx pass
    rx2140_cur."!cursor_pass"(rx2140_pos, "term:sym<value>")
    if_null rx2140_debug, debug_1530
    rx2140_cur."!cursor_debug"("PASS", "term:sym<value>", " at pos=", rx2140_pos)
  debug_1530:
    .return (rx2140_cur)
  rx2140_restart:
    if_null rx2140_debug, debug_1531
    rx2140_cur."!cursor_debug"("NEXT", "term:sym<value>")
  debug_1531:
  rx2140_fail:
    (rx2140_rep, rx2140_pos, $I10, $P10) = rx2140_cur."!mark_fail"(0)
    lt rx2140_pos, -1, rx2140_done
    eq rx2140_pos, -1, rx2140_fail
    jump $I10
  rx2140_done:
    rx2140_cur."!cursor_fail"()
    if_null rx2140_debug, debug_1532
    rx2140_cur."!cursor_debug"("FAIL", "term:sym<value>")
  debug_1532:
    .return (rx2140_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<value>"  :subid("300_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1262
    $P104 = self."!PREFIX__!subrule"("value", "")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "value"  :subid("301_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1264
    .local string rx2144_tgt
    .local int rx2144_pos
    .local int rx2144_off
    .local int rx2144_eos
    .local int rx2144_rep
    .local pmc rx2144_cur
    .local pmc rx2144_debug
    (rx2144_cur, rx2144_pos, rx2144_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2144_cur
    .local pmc match
    .lex "$/", match
    length rx2144_eos, rx2144_tgt
    gt rx2144_pos, rx2144_eos, rx2144_done
    set rx2144_off, 0
    lt rx2144_pos, 2, rx2144_start
    sub rx2144_off, rx2144_pos, 1
    substr rx2144_tgt, rx2144_tgt, rx2144_off
  rx2144_start:
    eq $I10, 1, rx2144_restart
    if_null rx2144_debug, debug_1533
    rx2144_cur."!cursor_debug"("START", "value")
  debug_1533:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2145_done
    goto rxscan2145_scan
  rxscan2145_loop:
    (rx2144_pos) = rx2144_cur."from"()
    inc rx2144_pos
    rx2144_cur."!cursor_from"(rx2144_pos)
    ge rx2144_pos, rx2144_eos, rxscan2145_done
  rxscan2145_scan:
    set_addr $I10, rxscan2145_loop
    rx2144_cur."!mark_push"(0, rx2144_pos, $I10)
  rxscan2145_done:
  alt2146_0:
    set_addr $I10, alt2146_1
    rx2144_cur."!mark_push"(0, rx2144_pos, $I10)
.annotate 'line', 1265
  # rx subrule "quote" subtype=capture negate=
    rx2144_cur."!cursor_pos"(rx2144_pos)
    $P10 = rx2144_cur."quote"()
    unless $P10, rx2144_fail
    rx2144_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote")
    rx2144_pos = $P10."pos"()
    goto alt2146_end
  alt2146_1:
.annotate 'line', 1266
  # rx subrule "number" subtype=capture negate=
    rx2144_cur."!cursor_pos"(rx2144_pos)
    $P10 = rx2144_cur."number"()
    unless $P10, rx2144_fail
    rx2144_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("number")
    rx2144_pos = $P10."pos"()
  alt2146_end:
.annotate 'line', 1264
  # rx pass
    rx2144_cur."!cursor_pass"(rx2144_pos, "value")
    if_null rx2144_debug, debug_1534
    rx2144_cur."!cursor_debug"("PASS", "value", " at pos=", rx2144_pos)
  debug_1534:
    .return (rx2144_cur)
  rx2144_restart:
    if_null rx2144_debug, debug_1535
    rx2144_cur."!cursor_debug"("NEXT", "value")
  debug_1535:
  rx2144_fail:
    (rx2144_rep, rx2144_pos, $I10, $P10) = rx2144_cur."!mark_fail"(0)
    lt rx2144_pos, -1, rx2144_done
    eq rx2144_pos, -1, rx2144_fail
    jump $I10
  rx2144_done:
    rx2144_cur."!cursor_fail"()
    if_null rx2144_debug, debug_1536
    rx2144_cur."!cursor_debug"("FAIL", "value")
  debug_1536:
    .return (rx2144_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__value"  :subid("302_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1264
    $P104 = self."!PREFIX__!subrule"("number", "")
    $P105 = self."!PREFIX__!subrule"("quote", "")
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "number"  :subid("303_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1269
    .local string rx2149_tgt
    .local int rx2149_pos
    .local int rx2149_off
    .local int rx2149_eos
    .local int rx2149_rep
    .local pmc rx2149_cur
    .local pmc rx2149_debug
    (rx2149_cur, rx2149_pos, rx2149_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2149_cur
    .local pmc match
    .lex "$/", match
    length rx2149_eos, rx2149_tgt
    gt rx2149_pos, rx2149_eos, rx2149_done
    set rx2149_off, 0
    lt rx2149_pos, 2, rx2149_start
    sub rx2149_off, rx2149_pos, 1
    substr rx2149_tgt, rx2149_tgt, rx2149_off
  rx2149_start:
    eq $I10, 1, rx2149_restart
    if_null rx2149_debug, debug_1537
    rx2149_cur."!cursor_debug"("START", "number")
  debug_1537:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2150_done
    goto rxscan2150_scan
  rxscan2150_loop:
    (rx2149_pos) = rx2149_cur."from"()
    inc rx2149_pos
    rx2149_cur."!cursor_from"(rx2149_pos)
    ge rx2149_pos, rx2149_eos, rxscan2150_done
  rxscan2150_scan:
    set_addr $I10, rxscan2150_loop
    rx2149_cur."!mark_push"(0, rx2149_pos, $I10)
  rxscan2150_done:
.annotate 'line', 1270
  # rx subcapture "sign"
    set_addr $I10, rxcap_2152_fail
    rx2149_cur."!mark_push"(0, rx2149_pos, $I10)
  # rx enumcharlist_q negate=0  r 0..1
    sub $I10, rx2149_pos, rx2149_off
    set rx2149_rep, 0
    sub $I12, rx2149_eos, rx2149_pos
    le $I12, 1, rxenumcharlistq2151_loop
    set $I12, 1
  rxenumcharlistq2151_loop:
    le $I12, 0, rxenumcharlistq2151_done
    substr $S10, rx2149_tgt, $I10, 1
    index $I11, "+-", $S10
    lt $I11, 0, rxenumcharlistq2151_done
    inc rx2149_rep
  rxenumcharlistq2151_done:
    add rx2149_pos, rx2149_pos, rx2149_rep
    set_addr $I10, rxcap_2152_fail
    ($I12, $I11) = rx2149_cur."!mark_peek"($I10)
    rx2149_cur."!cursor_pos"($I11)
    ($P10) = rx2149_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2149_pos, "")
    rx2149_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sign")
    goto rxcap_2152_done
  rxcap_2152_fail:
    goto rx2149_fail
  rxcap_2152_done:
  alt2153_0:
.annotate 'line', 1271
    set_addr $I10, alt2153_1
    rx2149_cur."!mark_push"(0, rx2149_pos, $I10)
  # rx subrule "dec_number" subtype=capture negate=
    rx2149_cur."!cursor_pos"(rx2149_pos)
    $P10 = rx2149_cur."dec_number"()
    unless $P10, rx2149_fail
    rx2149_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("dec_number")
    rx2149_pos = $P10."pos"()
    goto alt2153_end
  alt2153_1:
  # rx subrule "integer" subtype=capture negate=
    rx2149_cur."!cursor_pos"(rx2149_pos)
    $P10 = rx2149_cur."integer"()
    unless $P10, rx2149_fail
    rx2149_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("integer")
    rx2149_pos = $P10."pos"()
  alt2153_end:
.annotate 'line', 1269
  # rx pass
    rx2149_cur."!cursor_pass"(rx2149_pos, "number")
    if_null rx2149_debug, debug_1538
    rx2149_cur."!cursor_debug"("PASS", "number", " at pos=", rx2149_pos)
  debug_1538:
    .return (rx2149_cur)
  rx2149_restart:
    if_null rx2149_debug, debug_1539
    rx2149_cur."!cursor_debug"("NEXT", "number")
  debug_1539:
  rx2149_fail:
    (rx2149_rep, rx2149_pos, $I10, $P10) = rx2149_cur."!mark_fail"(0)
    lt rx2149_pos, -1, rx2149_done
    eq rx2149_pos, -1, rx2149_fail
    jump $I10
  rx2149_done:
    rx2149_cur."!cursor_fail"()
    if_null rx2149_debug, debug_1540
    rx2149_cur."!cursor_debug"("FAIL", "number")
  debug_1540:
    .return (rx2149_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__number"  :subid("304_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1269
    new $P104, "ResizablePMCArray"
    push $P104, ""
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote"  :subid("305_1329260321.776")
    .param pmc param_2156
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1274
    .lex "self", param_2156
    $P104 = param_2156."!protoregex"("quote")
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote"  :subid("306_1329260321.776")
    .param pmc param_2158
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1274
    .lex "self", param_2158
    $P105 = param_2158."!PREFIX__!protoregex"("quote")
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym<apos>"  :subid("307_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1275
    .local string rx2160_tgt
    .local int rx2160_pos
    .local int rx2160_off
    .local int rx2160_eos
    .local int rx2160_rep
    .local pmc rx2160_cur
    .local pmc rx2160_debug
    (rx2160_cur, rx2160_pos, rx2160_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2160_cur
    .local pmc match
    .lex "$/", match
    length rx2160_eos, rx2160_tgt
    gt rx2160_pos, rx2160_eos, rx2160_done
    set rx2160_off, 0
    lt rx2160_pos, 2, rx2160_start
    sub rx2160_off, rx2160_pos, 1
    substr rx2160_tgt, rx2160_tgt, rx2160_off
  rx2160_start:
    eq $I10, 1, rx2160_restart
    if_null rx2160_debug, debug_1541
    rx2160_cur."!cursor_debug"("START", "quote:sym<apos>")
  debug_1541:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2161_done
    goto rxscan2161_scan
  rxscan2161_loop:
    (rx2160_pos) = rx2160_cur."from"()
    inc rx2160_pos
    rx2160_cur."!cursor_from"(rx2160_pos)
    ge rx2160_pos, rx2160_eos, rxscan2161_done
  rxscan2161_scan:
    set_addr $I10, rxscan2161_loop
    rx2160_cur."!mark_push"(0, rx2160_pos, $I10)
  rxscan2161_done:
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2160_pos, rx2160_off
    substr $S10, rx2160_tgt, $I10, 1
    index $I11, "'", $S10
    lt $I11, 0, rx2160_fail
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx2160_cur."!cursor_pos"(rx2160_pos)
    $P10 = rx2160_cur."quote_EXPR"(":q")
    unless $P10, rx2160_fail
    rx2160_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx2160_pos = $P10."pos"()
  # rx pass
    rx2160_cur."!cursor_pass"(rx2160_pos, "quote:sym<apos>")
    if_null rx2160_debug, debug_1542
    rx2160_cur."!cursor_debug"("PASS", "quote:sym<apos>", " at pos=", rx2160_pos)
  debug_1542:
    .return (rx2160_cur)
  rx2160_restart:
    if_null rx2160_debug, debug_1543
    rx2160_cur."!cursor_debug"("NEXT", "quote:sym<apos>")
  debug_1543:
  rx2160_fail:
    (rx2160_rep, rx2160_pos, $I10, $P10) = rx2160_cur."!mark_fail"(0)
    lt rx2160_pos, -1, rx2160_done
    eq rx2160_pos, -1, rx2160_fail
    jump $I10
  rx2160_done:
    rx2160_cur."!cursor_fail"()
    if_null rx2160_debug, debug_1544
    rx2160_cur."!cursor_debug"("FAIL", "quote:sym<apos>")
  debug_1544:
    .return (rx2160_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote:sym<apos>"  :subid("308_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1275
    new $P104, "ResizablePMCArray"
    push $P104, "'"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym<dblq>"  :subid("309_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1276
    .local string rx2164_tgt
    .local int rx2164_pos
    .local int rx2164_off
    .local int rx2164_eos
    .local int rx2164_rep
    .local pmc rx2164_cur
    .local pmc rx2164_debug
    (rx2164_cur, rx2164_pos, rx2164_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2164_cur
    .local pmc match
    .lex "$/", match
    length rx2164_eos, rx2164_tgt
    gt rx2164_pos, rx2164_eos, rx2164_done
    set rx2164_off, 0
    lt rx2164_pos, 2, rx2164_start
    sub rx2164_off, rx2164_pos, 1
    substr rx2164_tgt, rx2164_tgt, rx2164_off
  rx2164_start:
    eq $I10, 1, rx2164_restart
    if_null rx2164_debug, debug_1545
    rx2164_cur."!cursor_debug"("START", "quote:sym<dblq>")
  debug_1545:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2165_done
    goto rxscan2165_scan
  rxscan2165_loop:
    (rx2164_pos) = rx2164_cur."from"()
    inc rx2164_pos
    rx2164_cur."!cursor_from"(rx2164_pos)
    ge rx2164_pos, rx2164_eos, rxscan2165_done
  rxscan2165_scan:
    set_addr $I10, rxscan2165_loop
    rx2164_cur."!mark_push"(0, rx2164_pos, $I10)
  rxscan2165_done:
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2164_pos, rx2164_off
    substr $S10, rx2164_tgt, $I10, 1
    index $I11, "\"", $S10
    lt $I11, 0, rx2164_fail
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx2164_cur."!cursor_pos"(rx2164_pos)
    $P10 = rx2164_cur."quote_EXPR"(":qq")
    unless $P10, rx2164_fail
    rx2164_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx2164_pos = $P10."pos"()
  # rx pass
    rx2164_cur."!cursor_pass"(rx2164_pos, "quote:sym<dblq>")
    if_null rx2164_debug, debug_1546
    rx2164_cur."!cursor_debug"("PASS", "quote:sym<dblq>", " at pos=", rx2164_pos)
  debug_1546:
    .return (rx2164_cur)
  rx2164_restart:
    if_null rx2164_debug, debug_1547
    rx2164_cur."!cursor_debug"("NEXT", "quote:sym<dblq>")
  debug_1547:
  rx2164_fail:
    (rx2164_rep, rx2164_pos, $I10, $P10) = rx2164_cur."!mark_fail"(0)
    lt rx2164_pos, -1, rx2164_done
    eq rx2164_pos, -1, rx2164_fail
    jump $I10
  rx2164_done:
    rx2164_cur."!cursor_fail"()
    if_null rx2164_debug, debug_1548
    rx2164_cur."!cursor_debug"("FAIL", "quote:sym<dblq>")
  debug_1548:
    .return (rx2164_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote:sym<dblq>"  :subid("310_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1276
    new $P104, "ResizablePMCArray"
    push $P104, "\""
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym<q>"  :subid("311_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1277
    .local string rx2168_tgt
    .local int rx2168_pos
    .local int rx2168_off
    .local int rx2168_eos
    .local int rx2168_rep
    .local pmc rx2168_cur
    .local pmc rx2168_debug
    (rx2168_cur, rx2168_pos, rx2168_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2168_cur
    .local pmc match
    .lex "$/", match
    length rx2168_eos, rx2168_tgt
    gt rx2168_pos, rx2168_eos, rx2168_done
    set rx2168_off, 0
    lt rx2168_pos, 2, rx2168_start
    sub rx2168_off, rx2168_pos, 1
    substr rx2168_tgt, rx2168_tgt, rx2168_off
  rx2168_start:
    eq $I10, 1, rx2168_restart
    if_null rx2168_debug, debug_1549
    rx2168_cur."!cursor_debug"("START", "quote:sym<q>")
  debug_1549:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2169_done
    goto rxscan2169_scan
  rxscan2169_loop:
    (rx2168_pos) = rx2168_cur."from"()
    inc rx2168_pos
    rx2168_cur."!cursor_from"(rx2168_pos)
    ge rx2168_pos, rx2168_eos, rxscan2169_done
  rxscan2169_scan:
    set_addr $I10, rxscan2169_loop
    rx2168_cur."!mark_push"(0, rx2168_pos, $I10)
  rxscan2169_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2170_fail
    rx2168_cur."!mark_push"(0, rx2168_pos, $I10)
  # rx literal  "q"
    add $I11, rx2168_pos, 1
    gt $I11, rx2168_eos, rx2168_fail
    sub $I11, rx2168_pos, rx2168_off
    ord $I11, rx2168_tgt, $I11
    ne $I11, 113, rx2168_fail
    add rx2168_pos, 1
    set_addr $I10, rxcap_2170_fail
    ($I12, $I11) = rx2168_cur."!mark_peek"($I10)
    rx2168_cur."!cursor_pos"($I11)
    ($P10) = rx2168_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2168_pos, "")
    rx2168_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2170_done
  rxcap_2170_fail:
    goto rx2168_fail
  rxcap_2170_done:
  # rxanchor rwb
    le rx2168_pos, 0, rx2168_fail
    sub $I10, rx2168_pos, rx2168_off
    is_cclass $I11, .CCLASS_WORD, rx2168_tgt, $I10
    if $I11, rx2168_fail
    dec $I10
    is_cclass $I11, .CCLASS_WORD, rx2168_tgt, $I10
    unless $I11, rx2168_fail
  # rx enumcharlist negate=1 zerowidth
    sub $I10, rx2168_pos, rx2168_off
    substr $S10, rx2168_tgt, $I10, 1
    index $I11, "(", $S10
    ge $I11, 0, rx2168_fail
  # rx subrule "ws" subtype=method negate=
    rx2168_cur."!cursor_pos"(rx2168_pos)
    $P10 = rx2168_cur."ws"()
    unless $P10, rx2168_fail
    rx2168_pos = $P10."pos"()
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx2168_cur."!cursor_pos"(rx2168_pos)
    $P10 = rx2168_cur."quote_EXPR"(":q")
    unless $P10, rx2168_fail
    rx2168_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx2168_pos = $P10."pos"()
  # rx pass
    rx2168_cur."!cursor_pass"(rx2168_pos, "quote:sym<q>")
    if_null rx2168_debug, debug_1550
    rx2168_cur."!cursor_debug"("PASS", "quote:sym<q>", " at pos=", rx2168_pos)
  debug_1550:
    .return (rx2168_cur)
  rx2168_restart:
    if_null rx2168_debug, debug_1551
    rx2168_cur."!cursor_debug"("NEXT", "quote:sym<q>")
  debug_1551:
  rx2168_fail:
    (rx2168_rep, rx2168_pos, $I10, $P10) = rx2168_cur."!mark_fail"(0)
    lt rx2168_pos, -1, rx2168_done
    eq rx2168_pos, -1, rx2168_fail
    jump $I10
  rx2168_done:
    rx2168_cur."!cursor_fail"()
    if_null rx2168_debug, debug_1552
    rx2168_cur."!cursor_debug"("FAIL", "quote:sym<q>")
  debug_1552:
    .return (rx2168_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote:sym<q>"  :subid("312_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1277
    $P104 = self."!PREFIX__!subrule"("ws", "q")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym<qq>"  :subid("313_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1278
    .local string rx2173_tgt
    .local int rx2173_pos
    .local int rx2173_off
    .local int rx2173_eos
    .local int rx2173_rep
    .local pmc rx2173_cur
    .local pmc rx2173_debug
    (rx2173_cur, rx2173_pos, rx2173_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2173_cur
    .local pmc match
    .lex "$/", match
    length rx2173_eos, rx2173_tgt
    gt rx2173_pos, rx2173_eos, rx2173_done
    set rx2173_off, 0
    lt rx2173_pos, 2, rx2173_start
    sub rx2173_off, rx2173_pos, 1
    substr rx2173_tgt, rx2173_tgt, rx2173_off
  rx2173_start:
    eq $I10, 1, rx2173_restart
    if_null rx2173_debug, debug_1553
    rx2173_cur."!cursor_debug"("START", "quote:sym<qq>")
  debug_1553:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2174_done
    goto rxscan2174_scan
  rxscan2174_loop:
    (rx2173_pos) = rx2173_cur."from"()
    inc rx2173_pos
    rx2173_cur."!cursor_from"(rx2173_pos)
    ge rx2173_pos, rx2173_eos, rxscan2174_done
  rxscan2174_scan:
    set_addr $I10, rxscan2174_loop
    rx2173_cur."!mark_push"(0, rx2173_pos, $I10)
  rxscan2174_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2175_fail
    rx2173_cur."!mark_push"(0, rx2173_pos, $I10)
  # rx literal  "qq"
    add $I11, rx2173_pos, 2
    gt $I11, rx2173_eos, rx2173_fail
    sub $I11, rx2173_pos, rx2173_off
    substr $S10, rx2173_tgt, $I11, 2
    ne $S10, "qq", rx2173_fail
    add rx2173_pos, 2
    set_addr $I10, rxcap_2175_fail
    ($I12, $I11) = rx2173_cur."!mark_peek"($I10)
    rx2173_cur."!cursor_pos"($I11)
    ($P10) = rx2173_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2173_pos, "")
    rx2173_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2175_done
  rxcap_2175_fail:
    goto rx2173_fail
  rxcap_2175_done:
  # rxanchor rwb
    le rx2173_pos, 0, rx2173_fail
    sub $I10, rx2173_pos, rx2173_off
    is_cclass $I11, .CCLASS_WORD, rx2173_tgt, $I10
    if $I11, rx2173_fail
    dec $I10
    is_cclass $I11, .CCLASS_WORD, rx2173_tgt, $I10
    unless $I11, rx2173_fail
  # rx enumcharlist negate=1 zerowidth
    sub $I10, rx2173_pos, rx2173_off
    substr $S10, rx2173_tgt, $I10, 1
    index $I11, "(", $S10
    ge $I11, 0, rx2173_fail
  # rx subrule "ws" subtype=method negate=
    rx2173_cur."!cursor_pos"(rx2173_pos)
    $P10 = rx2173_cur."ws"()
    unless $P10, rx2173_fail
    rx2173_pos = $P10."pos"()
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx2173_cur."!cursor_pos"(rx2173_pos)
    $P10 = rx2173_cur."quote_EXPR"(":qq")
    unless $P10, rx2173_fail
    rx2173_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx2173_pos = $P10."pos"()
  # rx pass
    rx2173_cur."!cursor_pass"(rx2173_pos, "quote:sym<qq>")
    if_null rx2173_debug, debug_1554
    rx2173_cur."!cursor_debug"("PASS", "quote:sym<qq>", " at pos=", rx2173_pos)
  debug_1554:
    .return (rx2173_cur)
  rx2173_restart:
    if_null rx2173_debug, debug_1555
    rx2173_cur."!cursor_debug"("NEXT", "quote:sym<qq>")
  debug_1555:
  rx2173_fail:
    (rx2173_rep, rx2173_pos, $I10, $P10) = rx2173_cur."!mark_fail"(0)
    lt rx2173_pos, -1, rx2173_done
    eq rx2173_pos, -1, rx2173_fail
    jump $I10
  rx2173_done:
    rx2173_cur."!cursor_fail"()
    if_null rx2173_debug, debug_1556
    rx2173_cur."!cursor_debug"("FAIL", "quote:sym<qq>")
  debug_1556:
    .return (rx2173_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote:sym<qq>"  :subid("314_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1278
    $P104 = self."!PREFIX__!subrule"("ws", "qq")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym<Q>"  :subid("315_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1279
    .local string rx2178_tgt
    .local int rx2178_pos
    .local int rx2178_off
    .local int rx2178_eos
    .local int rx2178_rep
    .local pmc rx2178_cur
    .local pmc rx2178_debug
    (rx2178_cur, rx2178_pos, rx2178_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2178_cur
    .local pmc match
    .lex "$/", match
    length rx2178_eos, rx2178_tgt
    gt rx2178_pos, rx2178_eos, rx2178_done
    set rx2178_off, 0
    lt rx2178_pos, 2, rx2178_start
    sub rx2178_off, rx2178_pos, 1
    substr rx2178_tgt, rx2178_tgt, rx2178_off
  rx2178_start:
    eq $I10, 1, rx2178_restart
    if_null rx2178_debug, debug_1557
    rx2178_cur."!cursor_debug"("START", "quote:sym<Q>")
  debug_1557:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2179_done
    goto rxscan2179_scan
  rxscan2179_loop:
    (rx2178_pos) = rx2178_cur."from"()
    inc rx2178_pos
    rx2178_cur."!cursor_from"(rx2178_pos)
    ge rx2178_pos, rx2178_eos, rxscan2179_done
  rxscan2179_scan:
    set_addr $I10, rxscan2179_loop
    rx2178_cur."!mark_push"(0, rx2178_pos, $I10)
  rxscan2179_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2180_fail
    rx2178_cur."!mark_push"(0, rx2178_pos, $I10)
  # rx literal  "Q"
    add $I11, rx2178_pos, 1
    gt $I11, rx2178_eos, rx2178_fail
    sub $I11, rx2178_pos, rx2178_off
    ord $I11, rx2178_tgt, $I11
    ne $I11, 81, rx2178_fail
    add rx2178_pos, 1
    set_addr $I10, rxcap_2180_fail
    ($I12, $I11) = rx2178_cur."!mark_peek"($I10)
    rx2178_cur."!cursor_pos"($I11)
    ($P10) = rx2178_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2178_pos, "")
    rx2178_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2180_done
  rxcap_2180_fail:
    goto rx2178_fail
  rxcap_2180_done:
  # rxanchor rwb
    le rx2178_pos, 0, rx2178_fail
    sub $I10, rx2178_pos, rx2178_off
    is_cclass $I11, .CCLASS_WORD, rx2178_tgt, $I10
    if $I11, rx2178_fail
    dec $I10
    is_cclass $I11, .CCLASS_WORD, rx2178_tgt, $I10
    unless $I11, rx2178_fail
  # rx enumcharlist negate=1 zerowidth
    sub $I10, rx2178_pos, rx2178_off
    substr $S10, rx2178_tgt, $I10, 1
    index $I11, "(", $S10
    ge $I11, 0, rx2178_fail
  # rx subrule "ws" subtype=method negate=
    rx2178_cur."!cursor_pos"(rx2178_pos)
    $P10 = rx2178_cur."ws"()
    unless $P10, rx2178_fail
    rx2178_pos = $P10."pos"()
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx2178_cur."!cursor_pos"(rx2178_pos)
    $P10 = rx2178_cur."quote_EXPR"()
    unless $P10, rx2178_fail
    rx2178_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx2178_pos = $P10."pos"()
  # rx pass
    rx2178_cur."!cursor_pass"(rx2178_pos, "quote:sym<Q>")
    if_null rx2178_debug, debug_1558
    rx2178_cur."!cursor_debug"("PASS", "quote:sym<Q>", " at pos=", rx2178_pos)
  debug_1558:
    .return (rx2178_cur)
  rx2178_restart:
    if_null rx2178_debug, debug_1559
    rx2178_cur."!cursor_debug"("NEXT", "quote:sym<Q>")
  debug_1559:
  rx2178_fail:
    (rx2178_rep, rx2178_pos, $I10, $P10) = rx2178_cur."!mark_fail"(0)
    lt rx2178_pos, -1, rx2178_done
    eq rx2178_pos, -1, rx2178_fail
    jump $I10
  rx2178_done:
    rx2178_cur."!cursor_fail"()
    if_null rx2178_debug, debug_1560
    rx2178_cur."!cursor_debug"("FAIL", "quote:sym<Q>")
  debug_1560:
    .return (rx2178_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote:sym<Q>"  :subid("316_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1279
    $P104 = self."!PREFIX__!subrule"("ws", "Q")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym<Q:PIR>"  :subid("317_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1280
    .local string rx2183_tgt
    .local int rx2183_pos
    .local int rx2183_off
    .local int rx2183_eos
    .local int rx2183_rep
    .local pmc rx2183_cur
    .local pmc rx2183_debug
    (rx2183_cur, rx2183_pos, rx2183_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2183_cur
    .local pmc match
    .lex "$/", match
    length rx2183_eos, rx2183_tgt
    gt rx2183_pos, rx2183_eos, rx2183_done
    set rx2183_off, 0
    lt rx2183_pos, 2, rx2183_start
    sub rx2183_off, rx2183_pos, 1
    substr rx2183_tgt, rx2183_tgt, rx2183_off
  rx2183_start:
    eq $I10, 1, rx2183_restart
    if_null rx2183_debug, debug_1561
    rx2183_cur."!cursor_debug"("START", "quote:sym<Q:PIR>")
  debug_1561:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2184_done
    goto rxscan2184_scan
  rxscan2184_loop:
    (rx2183_pos) = rx2183_cur."from"()
    inc rx2183_pos
    rx2183_cur."!cursor_from"(rx2183_pos)
    ge rx2183_pos, rx2183_eos, rxscan2184_done
  rxscan2184_scan:
    set_addr $I10, rxscan2184_loop
    rx2183_cur."!mark_push"(0, rx2183_pos, $I10)
  rxscan2184_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2185_fail
    rx2183_cur."!mark_push"(0, rx2183_pos, $I10)
  # rx literal  "Q:PIR"
    add $I11, rx2183_pos, 5
    gt $I11, rx2183_eos, rx2183_fail
    sub $I11, rx2183_pos, rx2183_off
    substr $S10, rx2183_tgt, $I11, 5
    ne $S10, "Q:PIR", rx2183_fail
    add rx2183_pos, 5
    set_addr $I10, rxcap_2185_fail
    ($I12, $I11) = rx2183_cur."!mark_peek"($I10)
    rx2183_cur."!cursor_pos"($I11)
    ($P10) = rx2183_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2183_pos, "")
    rx2183_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2185_done
  rxcap_2185_fail:
    goto rx2183_fail
  rxcap_2185_done:
  # rx subrule "ws" subtype=method negate=
    rx2183_cur."!cursor_pos"(rx2183_pos)
    $P10 = rx2183_cur."ws"()
    unless $P10, rx2183_fail
    rx2183_pos = $P10."pos"()
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx2183_cur."!cursor_pos"(rx2183_pos)
    $P10 = rx2183_cur."quote_EXPR"()
    unless $P10, rx2183_fail
    rx2183_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx2183_pos = $P10."pos"()
  # rx pass
    rx2183_cur."!cursor_pass"(rx2183_pos, "quote:sym<Q:PIR>")
    if_null rx2183_debug, debug_1562
    rx2183_cur."!cursor_debug"("PASS", "quote:sym<Q:PIR>", " at pos=", rx2183_pos)
  debug_1562:
    .return (rx2183_cur)
  rx2183_restart:
    if_null rx2183_debug, debug_1563
    rx2183_cur."!cursor_debug"("NEXT", "quote:sym<Q:PIR>")
  debug_1563:
  rx2183_fail:
    (rx2183_rep, rx2183_pos, $I10, $P10) = rx2183_cur."!mark_fail"(0)
    lt rx2183_pos, -1, rx2183_done
    eq rx2183_pos, -1, rx2183_fail
    jump $I10
  rx2183_done:
    rx2183_cur."!cursor_fail"()
    if_null rx2183_debug, debug_1564
    rx2183_cur."!cursor_debug"("FAIL", "quote:sym<Q:PIR>")
  debug_1564:
    .return (rx2183_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote:sym<Q:PIR>"  :subid("318_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1280
    $P104 = self."!PREFIX__!subrule"("ws", "Q:PIR")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym</ />"  :subid("319_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1281
    .local string rx2188_tgt
    .local int rx2188_pos
    .local int rx2188_off
    .local int rx2188_eos
    .local int rx2188_rep
    .local pmc rx2188_cur
    .local pmc rx2188_debug
    (rx2188_cur, rx2188_pos, rx2188_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2188_cur
    .local pmc match
    .lex "$/", match
    length rx2188_eos, rx2188_tgt
    gt rx2188_pos, rx2188_eos, rx2188_done
    set rx2188_off, 0
    lt rx2188_pos, 2, rx2188_start
    sub rx2188_off, rx2188_pos, 1
    substr rx2188_tgt, rx2188_tgt, rx2188_off
  rx2188_start:
    eq $I10, 1, rx2188_restart
    if_null rx2188_debug, debug_1565
    rx2188_cur."!cursor_debug"("START", "quote:sym</ />")
  debug_1565:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2189_done
    goto rxscan2189_scan
  rxscan2189_loop:
    (rx2188_pos) = rx2188_cur."from"()
    inc rx2188_pos
    rx2188_cur."!cursor_from"(rx2188_pos)
    ge rx2188_pos, rx2188_eos, rxscan2189_done
  rxscan2189_scan:
    set_addr $I10, rxscan2189_loop
    rx2188_cur."!mark_push"(0, rx2188_pos, $I10)
  rxscan2189_done:
.annotate 'line', 1282
  # rx literal  "/"
    add $I11, rx2188_pos, 1
    gt $I11, rx2188_eos, rx2188_fail
    sub $I11, rx2188_pos, rx2188_off
    ord $I11, rx2188_tgt, $I11
    ne $I11, 47, rx2188_fail
    add rx2188_pos, 1
.annotate 'line', 1283
  # rx subrule "newpad" subtype=method negate=
    rx2188_cur."!cursor_pos"(rx2188_pos)
    $P10 = rx2188_cur."newpad"()
    unless $P10, rx2188_fail
    rx2188_pos = $P10."pos"()
.annotate 'line', 1284
  # rx reduce name="quote:sym</ />" key="open"
    rx2188_cur."!cursor_pos"(rx2188_pos)
    rx2188_cur."!reduce"("quote:sym</ />", "open")
.annotate 'line', 1285
  # rx subrule "LANG" subtype=capture negate=
    rx2188_cur."!cursor_pos"(rx2188_pos)
    $P10 = rx2188_cur."LANG"("Regex", "nibbler")
    unless $P10, rx2188_fail
    rx2188_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("p6regex")
    rx2188_pos = $P10."pos"()
.annotate 'line', 1286
  # rx literal  "/"
    add $I11, rx2188_pos, 1
    gt $I11, rx2188_eos, rx2188_fail
    sub $I11, rx2188_pos, rx2188_off
    ord $I11, rx2188_tgt, $I11
    ne $I11, 47, rx2188_fail
    add rx2188_pos, 1
.annotate 'line', 1281
  # rx pass
    rx2188_cur."!cursor_pass"(rx2188_pos, "quote:sym</ />")
    if_null rx2188_debug, debug_1566
    rx2188_cur."!cursor_debug"("PASS", "quote:sym</ />", " at pos=", rx2188_pos)
  debug_1566:
    .return (rx2188_cur)
  rx2188_restart:
    if_null rx2188_debug, debug_1567
    rx2188_cur."!cursor_debug"("NEXT", "quote:sym</ />")
  debug_1567:
  rx2188_fail:
    (rx2188_rep, rx2188_pos, $I10, $P10) = rx2188_cur."!mark_fail"(0)
    lt rx2188_pos, -1, rx2188_done
    eq rx2188_pos, -1, rx2188_fail
    jump $I10
  rx2188_done:
    rx2188_cur."!cursor_fail"()
    if_null rx2188_debug, debug_1568
    rx2188_cur."!cursor_debug"("FAIL", "quote:sym</ />")
  debug_1568:
    .return (rx2188_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote:sym</ />"  :subid("320_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1281
    $P104 = self."!PREFIX__!subrule"("newpad", "/")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote_escape:sym<$>"  :subid("321_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1289
    .local string rx2192_tgt
    .local int rx2192_pos
    .local int rx2192_off
    .local int rx2192_eos
    .local int rx2192_rep
    .local pmc rx2192_cur
    .local pmc rx2192_debug
    (rx2192_cur, rx2192_pos, rx2192_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2192_cur
    .local pmc match
    .lex "$/", match
    length rx2192_eos, rx2192_tgt
    gt rx2192_pos, rx2192_eos, rx2192_done
    set rx2192_off, 0
    lt rx2192_pos, 2, rx2192_start
    sub rx2192_off, rx2192_pos, 1
    substr rx2192_tgt, rx2192_tgt, rx2192_off
  rx2192_start:
    eq $I10, 1, rx2192_restart
    if_null rx2192_debug, debug_1569
    rx2192_cur."!cursor_debug"("START", "quote_escape:sym<$>")
  debug_1569:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2193_done
    goto rxscan2193_scan
  rxscan2193_loop:
    (rx2192_pos) = rx2192_cur."from"()
    inc rx2192_pos
    rx2192_cur."!cursor_from"(rx2192_pos)
    ge rx2192_pos, rx2192_eos, rxscan2193_done
  rxscan2193_scan:
    set_addr $I10, rxscan2193_loop
    rx2192_cur."!mark_push"(0, rx2192_pos, $I10)
  rxscan2193_done:
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2192_pos, rx2192_off
    substr $S10, rx2192_tgt, $I10, 1
    index $I11, "$", $S10
    lt $I11, 0, rx2192_fail
  # rx subrule "quotemod_check" subtype=zerowidth negate=
    rx2192_cur."!cursor_pos"(rx2192_pos)
    $P10 = rx2192_cur."quotemod_check"("s")
    unless $P10, rx2192_fail
  # rx subrule "variable" subtype=capture negate=
    rx2192_cur."!cursor_pos"(rx2192_pos)
    $P10 = rx2192_cur."variable"()
    unless $P10, rx2192_fail
    rx2192_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("variable")
    rx2192_pos = $P10."pos"()
  # rx pass
    rx2192_cur."!cursor_pass"(rx2192_pos, "quote_escape:sym<$>")
    if_null rx2192_debug, debug_1570
    rx2192_cur."!cursor_debug"("PASS", "quote_escape:sym<$>", " at pos=", rx2192_pos)
  debug_1570:
    .return (rx2192_cur)
  rx2192_restart:
    if_null rx2192_debug, debug_1571
    rx2192_cur."!cursor_debug"("NEXT", "quote_escape:sym<$>")
  debug_1571:
  rx2192_fail:
    (rx2192_rep, rx2192_pos, $I10, $P10) = rx2192_cur."!mark_fail"(0)
    lt rx2192_pos, -1, rx2192_done
    eq rx2192_pos, -1, rx2192_fail
    jump $I10
  rx2192_done:
    rx2192_cur."!cursor_fail"()
    if_null rx2192_debug, debug_1572
    rx2192_cur."!cursor_debug"("FAIL", "quote_escape:sym<$>")
  debug_1572:
    .return (rx2192_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote_escape:sym<$>"  :subid("322_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1289
    new $P104, "ResizablePMCArray"
    push $P104, "$"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote_escape:sym<{ }>"  :subid("323_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1290
    .local string rx2196_tgt
    .local int rx2196_pos
    .local int rx2196_off
    .local int rx2196_eos
    .local int rx2196_rep
    .local pmc rx2196_cur
    .local pmc rx2196_debug
    (rx2196_cur, rx2196_pos, rx2196_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2196_cur
    .local pmc match
    .lex "$/", match
    length rx2196_eos, rx2196_tgt
    gt rx2196_pos, rx2196_eos, rx2196_done
    set rx2196_off, 0
    lt rx2196_pos, 2, rx2196_start
    sub rx2196_off, rx2196_pos, 1
    substr rx2196_tgt, rx2196_tgt, rx2196_off
  rx2196_start:
    eq $I10, 1, rx2196_restart
    if_null rx2196_debug, debug_1573
    rx2196_cur."!cursor_debug"("START", "quote_escape:sym<{ }>")
  debug_1573:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2197_done
    goto rxscan2197_scan
  rxscan2197_loop:
    (rx2196_pos) = rx2196_cur."from"()
    inc rx2196_pos
    rx2196_cur."!cursor_from"(rx2196_pos)
    ge rx2196_pos, rx2196_eos, rxscan2197_done
  rxscan2197_scan:
    set_addr $I10, rxscan2197_loop
    rx2196_cur."!mark_push"(0, rx2196_pos, $I10)
  rxscan2197_done:
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2196_pos, rx2196_off
    substr $S10, rx2196_tgt, $I10, 1
    index $I11, "{", $S10
    lt $I11, 0, rx2196_fail
  # rx subrule "quotemod_check" subtype=zerowidth negate=
    rx2196_cur."!cursor_pos"(rx2196_pos)
    $P10 = rx2196_cur."quotemod_check"("c")
    unless $P10, rx2196_fail
  # rx subrule "block" subtype=capture negate=
    rx2196_cur."!cursor_pos"(rx2196_pos)
    $P10 = rx2196_cur."block"()
    unless $P10, rx2196_fail
    rx2196_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("block")
    rx2196_pos = $P10."pos"()
  # rx pass
    rx2196_cur."!cursor_pass"(rx2196_pos, "quote_escape:sym<{ }>")
    if_null rx2196_debug, debug_1574
    rx2196_cur."!cursor_debug"("PASS", "quote_escape:sym<{ }>", " at pos=", rx2196_pos)
  debug_1574:
    .return (rx2196_cur)
  rx2196_restart:
    if_null rx2196_debug, debug_1575
    rx2196_cur."!cursor_debug"("NEXT", "quote_escape:sym<{ }>")
  debug_1575:
  rx2196_fail:
    (rx2196_rep, rx2196_pos, $I10, $P10) = rx2196_cur."!mark_fail"(0)
    lt rx2196_pos, -1, rx2196_done
    eq rx2196_pos, -1, rx2196_fail
    jump $I10
  rx2196_done:
    rx2196_cur."!cursor_fail"()
    if_null rx2196_debug, debug_1576
    rx2196_cur."!cursor_debug"("FAIL", "quote_escape:sym<{ }>")
  debug_1576:
    .return (rx2196_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote_escape:sym<{ }>"  :subid("324_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1290
    new $P104, "ResizablePMCArray"
    push $P104, "{"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote_escape:sym<esc>"  :subid("325_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1291
    .local string rx2200_tgt
    .local int rx2200_pos
    .local int rx2200_off
    .local int rx2200_eos
    .local int rx2200_rep
    .local pmc rx2200_cur
    .local pmc rx2200_debug
    (rx2200_cur, rx2200_pos, rx2200_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2200_cur
    .local pmc match
    .lex "$/", match
    length rx2200_eos, rx2200_tgt
    gt rx2200_pos, rx2200_eos, rx2200_done
    set rx2200_off, 0
    lt rx2200_pos, 2, rx2200_start
    sub rx2200_off, rx2200_pos, 1
    substr rx2200_tgt, rx2200_tgt, rx2200_off
  rx2200_start:
    eq $I10, 1, rx2200_restart
    if_null rx2200_debug, debug_1577
    rx2200_cur."!cursor_debug"("START", "quote_escape:sym<esc>")
  debug_1577:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2201_done
    goto rxscan2201_scan
  rxscan2201_loop:
    (rx2200_pos) = rx2200_cur."from"()
    inc rx2200_pos
    rx2200_cur."!cursor_from"(rx2200_pos)
    ge rx2200_pos, rx2200_eos, rxscan2201_done
  rxscan2201_scan:
    set_addr $I10, rxscan2201_loop
    rx2200_cur."!mark_push"(0, rx2200_pos, $I10)
  rxscan2201_done:
  # rx literal  "\\e"
    add $I11, rx2200_pos, 2
    gt $I11, rx2200_eos, rx2200_fail
    sub $I11, rx2200_pos, rx2200_off
    substr $S10, rx2200_tgt, $I11, 2
    ne $S10, "\\e", rx2200_fail
    add rx2200_pos, 2
  # rx subrule "quotemod_check" subtype=zerowidth negate=
    rx2200_cur."!cursor_pos"(rx2200_pos)
    $P10 = rx2200_cur."quotemod_check"("b")
    unless $P10, rx2200_fail
  # rx pass
    rx2200_cur."!cursor_pass"(rx2200_pos, "quote_escape:sym<esc>")
    if_null rx2200_debug, debug_1578
    rx2200_cur."!cursor_debug"("PASS", "quote_escape:sym<esc>", " at pos=", rx2200_pos)
  debug_1578:
    .return (rx2200_cur)
  rx2200_restart:
    if_null rx2200_debug, debug_1579
    rx2200_cur."!cursor_debug"("NEXT", "quote_escape:sym<esc>")
  debug_1579:
  rx2200_fail:
    (rx2200_rep, rx2200_pos, $I10, $P10) = rx2200_cur."!mark_fail"(0)
    lt rx2200_pos, -1, rx2200_done
    eq rx2200_pos, -1, rx2200_fail
    jump $I10
  rx2200_done:
    rx2200_cur."!cursor_fail"()
    if_null rx2200_debug, debug_1580
    rx2200_cur."!cursor_debug"("FAIL", "quote_escape:sym<esc>")
  debug_1580:
    .return (rx2200_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote_escape:sym<esc>"  :subid("326_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1291
    new $P104, "ResizablePMCArray"
    push $P104, "\\e"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "circumfix:sym<( )>"  :subid("327_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1293
    .local string rx2204_tgt
    .local int rx2204_pos
    .local int rx2204_off
    .local int rx2204_eos
    .local int rx2204_rep
    .local pmc rx2204_cur
    .local pmc rx2204_debug
    (rx2204_cur, rx2204_pos, rx2204_tgt, $I10) = self."!cursor_start"()
    rx2204_cur."!cursor_caparray"("EXPR")
    .lex unicode:"$\x{a2}", rx2204_cur
    .local pmc match
    .lex "$/", match
    length rx2204_eos, rx2204_tgt
    gt rx2204_pos, rx2204_eos, rx2204_done
    set rx2204_off, 0
    lt rx2204_pos, 2, rx2204_start
    sub rx2204_off, rx2204_pos, 1
    substr rx2204_tgt, rx2204_tgt, rx2204_off
  rx2204_start:
    eq $I10, 1, rx2204_restart
    if_null rx2204_debug, debug_1581
    rx2204_cur."!cursor_debug"("START", "circumfix:sym<( )>")
  debug_1581:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2205_done
    goto rxscan2205_scan
  rxscan2205_loop:
    (rx2204_pos) = rx2204_cur."from"()
    inc rx2204_pos
    rx2204_cur."!cursor_from"(rx2204_pos)
    ge rx2204_pos, rx2204_eos, rxscan2205_done
  rxscan2205_scan:
    set_addr $I10, rxscan2205_loop
    rx2204_cur."!mark_push"(0, rx2204_pos, $I10)
  rxscan2205_done:
  # rx literal  "("
    add $I11, rx2204_pos, 1
    gt $I11, rx2204_eos, rx2204_fail
    sub $I11, rx2204_pos, rx2204_off
    ord $I11, rx2204_tgt, $I11
    ne $I11, 40, rx2204_fail
    add rx2204_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2204_cur."!cursor_pos"(rx2204_pos)
    $P10 = rx2204_cur."ws"()
    unless $P10, rx2204_fail
    rx2204_pos = $P10."pos"()
  # rx rxquantr2206 ** 0..1
    set_addr $I10, rxquantr2206_done
    rx2204_cur."!mark_push"(0, rx2204_pos, $I10)
  rxquantr2206_loop:
  # rx subrule "EXPR" subtype=capture negate=
    rx2204_cur."!cursor_pos"(rx2204_pos)
    $P10 = rx2204_cur."EXPR"()
    unless $P10, rx2204_fail
    goto rxsubrule2207_pass
  rxsubrule2207_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx2204_fail
  rxsubrule2207_pass:
    set_addr $I10, rxsubrule2207_back
    rx2204_cur."!mark_push"(0, rx2204_pos, $I10, $P10)
    $P10."!cursor_names"("EXPR")
    rx2204_pos = $P10."pos"()
    set_addr $I10, rxquantr2206_done
    (rx2204_rep) = rx2204_cur."!mark_commit"($I10)
  rxquantr2206_done:
  # rx literal  ")"
    add $I11, rx2204_pos, 1
    gt $I11, rx2204_eos, rx2204_fail
    sub $I11, rx2204_pos, rx2204_off
    ord $I11, rx2204_tgt, $I11
    ne $I11, 41, rx2204_fail
    add rx2204_pos, 1
  # rx pass
    rx2204_cur."!cursor_pass"(rx2204_pos, "circumfix:sym<( )>")
    if_null rx2204_debug, debug_1582
    rx2204_cur."!cursor_debug"("PASS", "circumfix:sym<( )>", " at pos=", rx2204_pos)
  debug_1582:
    .return (rx2204_cur)
  rx2204_restart:
    if_null rx2204_debug, debug_1583
    rx2204_cur."!cursor_debug"("NEXT", "circumfix:sym<( )>")
  debug_1583:
  rx2204_fail:
    (rx2204_rep, rx2204_pos, $I10, $P10) = rx2204_cur."!mark_fail"(0)
    lt rx2204_pos, -1, rx2204_done
    eq rx2204_pos, -1, rx2204_fail
    jump $I10
  rx2204_done:
    rx2204_cur."!cursor_fail"()
    if_null rx2204_debug, debug_1584
    rx2204_cur."!cursor_debug"("FAIL", "circumfix:sym<( )>")
  debug_1584:
    .return (rx2204_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__circumfix:sym<( )>"  :subid("328_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1293
    $P104 = self."!PREFIX__!subrule"("ws", "(")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "circumfix:sym<[ ]>"  :subid("329_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1294
    .local string rx2210_tgt
    .local int rx2210_pos
    .local int rx2210_off
    .local int rx2210_eos
    .local int rx2210_rep
    .local pmc rx2210_cur
    .local pmc rx2210_debug
    (rx2210_cur, rx2210_pos, rx2210_tgt, $I10) = self."!cursor_start"()
    rx2210_cur."!cursor_caparray"("EXPR")
    .lex unicode:"$\x{a2}", rx2210_cur
    .local pmc match
    .lex "$/", match
    length rx2210_eos, rx2210_tgt
    gt rx2210_pos, rx2210_eos, rx2210_done
    set rx2210_off, 0
    lt rx2210_pos, 2, rx2210_start
    sub rx2210_off, rx2210_pos, 1
    substr rx2210_tgt, rx2210_tgt, rx2210_off
  rx2210_start:
    eq $I10, 1, rx2210_restart
    if_null rx2210_debug, debug_1585
    rx2210_cur."!cursor_debug"("START", "circumfix:sym<[ ]>")
  debug_1585:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2211_done
    goto rxscan2211_scan
  rxscan2211_loop:
    (rx2210_pos) = rx2210_cur."from"()
    inc rx2210_pos
    rx2210_cur."!cursor_from"(rx2210_pos)
    ge rx2210_pos, rx2210_eos, rxscan2211_done
  rxscan2211_scan:
    set_addr $I10, rxscan2211_loop
    rx2210_cur."!mark_push"(0, rx2210_pos, $I10)
  rxscan2211_done:
  # rx literal  "["
    add $I11, rx2210_pos, 1
    gt $I11, rx2210_eos, rx2210_fail
    sub $I11, rx2210_pos, rx2210_off
    ord $I11, rx2210_tgt, $I11
    ne $I11, 91, rx2210_fail
    add rx2210_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2210_cur."!cursor_pos"(rx2210_pos)
    $P10 = rx2210_cur."ws"()
    unless $P10, rx2210_fail
    rx2210_pos = $P10."pos"()
  # rx rxquantr2212 ** 0..1
    set_addr $I10, rxquantr2212_done
    rx2210_cur."!mark_push"(0, rx2210_pos, $I10)
  rxquantr2212_loop:
  # rx subrule "EXPR" subtype=capture negate=
    rx2210_cur."!cursor_pos"(rx2210_pos)
    $P10 = rx2210_cur."EXPR"()
    unless $P10, rx2210_fail
    goto rxsubrule2213_pass
  rxsubrule2213_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx2210_fail
  rxsubrule2213_pass:
    set_addr $I10, rxsubrule2213_back
    rx2210_cur."!mark_push"(0, rx2210_pos, $I10, $P10)
    $P10."!cursor_names"("EXPR")
    rx2210_pos = $P10."pos"()
    set_addr $I10, rxquantr2212_done
    (rx2210_rep) = rx2210_cur."!mark_commit"($I10)
  rxquantr2212_done:
  # rx literal  "]"
    add $I11, rx2210_pos, 1
    gt $I11, rx2210_eos, rx2210_fail
    sub $I11, rx2210_pos, rx2210_off
    ord $I11, rx2210_tgt, $I11
    ne $I11, 93, rx2210_fail
    add rx2210_pos, 1
  # rx pass
    rx2210_cur."!cursor_pass"(rx2210_pos, "circumfix:sym<[ ]>")
    if_null rx2210_debug, debug_1586
    rx2210_cur."!cursor_debug"("PASS", "circumfix:sym<[ ]>", " at pos=", rx2210_pos)
  debug_1586:
    .return (rx2210_cur)
  rx2210_restart:
    if_null rx2210_debug, debug_1587
    rx2210_cur."!cursor_debug"("NEXT", "circumfix:sym<[ ]>")
  debug_1587:
  rx2210_fail:
    (rx2210_rep, rx2210_pos, $I10, $P10) = rx2210_cur."!mark_fail"(0)
    lt rx2210_pos, -1, rx2210_done
    eq rx2210_pos, -1, rx2210_fail
    jump $I10
  rx2210_done:
    rx2210_cur."!cursor_fail"()
    if_null rx2210_debug, debug_1588
    rx2210_cur."!cursor_debug"("FAIL", "circumfix:sym<[ ]>")
  debug_1588:
    .return (rx2210_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__circumfix:sym<[ ]>"  :subid("330_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1294
    $P104 = self."!PREFIX__!subrule"("ws", "[")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "circumfix:sym<ang>"  :subid("331_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1295
    .local string rx2216_tgt
    .local int rx2216_pos
    .local int rx2216_off
    .local int rx2216_eos
    .local int rx2216_rep
    .local pmc rx2216_cur
    .local pmc rx2216_debug
    (rx2216_cur, rx2216_pos, rx2216_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2216_cur
    .local pmc match
    .lex "$/", match
    length rx2216_eos, rx2216_tgt
    gt rx2216_pos, rx2216_eos, rx2216_done
    set rx2216_off, 0
    lt rx2216_pos, 2, rx2216_start
    sub rx2216_off, rx2216_pos, 1
    substr rx2216_tgt, rx2216_tgt, rx2216_off
  rx2216_start:
    eq $I10, 1, rx2216_restart
    if_null rx2216_debug, debug_1589
    rx2216_cur."!cursor_debug"("START", "circumfix:sym<ang>")
  debug_1589:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2217_done
    goto rxscan2217_scan
  rxscan2217_loop:
    (rx2216_pos) = rx2216_cur."from"()
    inc rx2216_pos
    rx2216_cur."!cursor_from"(rx2216_pos)
    ge rx2216_pos, rx2216_eos, rxscan2217_done
  rxscan2217_scan:
    set_addr $I10, rxscan2217_loop
    rx2216_cur."!mark_push"(0, rx2216_pos, $I10)
  rxscan2217_done:
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2216_pos, rx2216_off
    substr $S10, rx2216_tgt, $I10, 1
    index $I11, "<", $S10
    lt $I11, 0, rx2216_fail
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx2216_cur."!cursor_pos"(rx2216_pos)
    $P10 = rx2216_cur."quote_EXPR"(":q", ":w")
    unless $P10, rx2216_fail
    rx2216_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx2216_pos = $P10."pos"()
  # rx pass
    rx2216_cur."!cursor_pass"(rx2216_pos, "circumfix:sym<ang>")
    if_null rx2216_debug, debug_1590
    rx2216_cur."!cursor_debug"("PASS", "circumfix:sym<ang>", " at pos=", rx2216_pos)
  debug_1590:
    .return (rx2216_cur)
  rx2216_restart:
    if_null rx2216_debug, debug_1591
    rx2216_cur."!cursor_debug"("NEXT", "circumfix:sym<ang>")
  debug_1591:
  rx2216_fail:
    (rx2216_rep, rx2216_pos, $I10, $P10) = rx2216_cur."!mark_fail"(0)
    lt rx2216_pos, -1, rx2216_done
    eq rx2216_pos, -1, rx2216_fail
    jump $I10
  rx2216_done:
    rx2216_cur."!cursor_fail"()
    if_null rx2216_debug, debug_1592
    rx2216_cur."!cursor_debug"("FAIL", "circumfix:sym<ang>")
  debug_1592:
    .return (rx2216_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__circumfix:sym<ang>"  :subid("332_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1295
    new $P104, "ResizablePMCArray"
    push $P104, "<"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub unicode:"circumfix:sym<\x{ab} \x{bb}>"  :subid("333_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1296
    .local string rx2220_tgt
    .local int rx2220_pos
    .local int rx2220_off
    .local int rx2220_eos
    .local int rx2220_rep
    .local pmc rx2220_cur
    .local pmc rx2220_debug
    (rx2220_cur, rx2220_pos, rx2220_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2220_cur
    .local pmc match
    .lex "$/", match
    length rx2220_eos, rx2220_tgt
    gt rx2220_pos, rx2220_eos, rx2220_done
    set rx2220_off, 0
    lt rx2220_pos, 2, rx2220_start
    sub rx2220_off, rx2220_pos, 1
    substr rx2220_tgt, rx2220_tgt, rx2220_off
  rx2220_start:
    eq $I10, 1, rx2220_restart
    if_null rx2220_debug, debug_1593
    rx2220_cur."!cursor_debug"("START", unicode:"circumfix:sym<\x{ab} \x{bb}>")
  debug_1593:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2221_done
    goto rxscan2221_scan
  rxscan2221_loop:
    (rx2220_pos) = rx2220_cur."from"()
    inc rx2220_pos
    rx2220_cur."!cursor_from"(rx2220_pos)
    ge rx2220_pos, rx2220_eos, rxscan2221_done
  rxscan2221_scan:
    set_addr $I10, rxscan2221_loop
    rx2220_cur."!mark_push"(0, rx2220_pos, $I10)
  rxscan2221_done:
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2220_pos, rx2220_off
    substr $S10, rx2220_tgt, $I10, 1
    index $I11, unicode:"\x{ab}", $S10
    lt $I11, 0, rx2220_fail
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx2220_cur."!cursor_pos"(rx2220_pos)
    $P10 = rx2220_cur."quote_EXPR"(":qq", ":w")
    unless $P10, rx2220_fail
    rx2220_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx2220_pos = $P10."pos"()
  # rx pass
    rx2220_cur."!cursor_pass"(rx2220_pos, unicode:"circumfix:sym<\x{ab} \x{bb}>")
    if_null rx2220_debug, debug_1594
    rx2220_cur."!cursor_debug"("PASS", unicode:"circumfix:sym<\x{ab} \x{bb}>", " at pos=", rx2220_pos)
  debug_1594:
    .return (rx2220_cur)
  rx2220_restart:
    if_null rx2220_debug, debug_1595
    rx2220_cur."!cursor_debug"("NEXT", unicode:"circumfix:sym<\x{ab} \x{bb}>")
  debug_1595:
  rx2220_fail:
    (rx2220_rep, rx2220_pos, $I10, $P10) = rx2220_cur."!mark_fail"(0)
    lt rx2220_pos, -1, rx2220_done
    eq rx2220_pos, -1, rx2220_fail
    jump $I10
  rx2220_done:
    rx2220_cur."!cursor_fail"()
    if_null rx2220_debug, debug_1596
    rx2220_cur."!cursor_debug"("FAIL", unicode:"circumfix:sym<\x{ab} \x{bb}>")
  debug_1596:
    .return (rx2220_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub unicode:"!PREFIX__circumfix:sym<\x{ab} \x{bb}>"  :subid("334_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1296
    new $P104, "ResizablePMCArray"
    push $P104, unicode:"\x{ab}"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "circumfix:sym<{ }>"  :subid("335_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1297
    .local string rx2224_tgt
    .local int rx2224_pos
    .local int rx2224_off
    .local int rx2224_eos
    .local int rx2224_rep
    .local pmc rx2224_cur
    .local pmc rx2224_debug
    (rx2224_cur, rx2224_pos, rx2224_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2224_cur
    .local pmc match
    .lex "$/", match
    length rx2224_eos, rx2224_tgt
    gt rx2224_pos, rx2224_eos, rx2224_done
    set rx2224_off, 0
    lt rx2224_pos, 2, rx2224_start
    sub rx2224_off, rx2224_pos, 1
    substr rx2224_tgt, rx2224_tgt, rx2224_off
  rx2224_start:
    eq $I10, 1, rx2224_restart
    if_null rx2224_debug, debug_1597
    rx2224_cur."!cursor_debug"("START", "circumfix:sym<{ }>")
  debug_1597:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2225_done
    goto rxscan2225_scan
  rxscan2225_loop:
    (rx2224_pos) = rx2224_cur."from"()
    inc rx2224_pos
    rx2224_cur."!cursor_from"(rx2224_pos)
    ge rx2224_pos, rx2224_eos, rxscan2225_done
  rxscan2225_scan:
    set_addr $I10, rxscan2225_loop
    rx2224_cur."!mark_push"(0, rx2224_pos, $I10)
  rxscan2225_done:
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2224_pos, rx2224_off
    substr $S10, rx2224_tgt, $I10, 1
    index $I11, "{", $S10
    lt $I11, 0, rx2224_fail
  # rx subrule "pblock" subtype=capture negate=
    rx2224_cur."!cursor_pos"(rx2224_pos)
    $P10 = rx2224_cur."pblock"()
    unless $P10, rx2224_fail
    rx2224_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("pblock")
    rx2224_pos = $P10."pos"()
  # rx pass
    rx2224_cur."!cursor_pass"(rx2224_pos, "circumfix:sym<{ }>")
    if_null rx2224_debug, debug_1598
    rx2224_cur."!cursor_debug"("PASS", "circumfix:sym<{ }>", " at pos=", rx2224_pos)
  debug_1598:
    .return (rx2224_cur)
  rx2224_restart:
    if_null rx2224_debug, debug_1599
    rx2224_cur."!cursor_debug"("NEXT", "circumfix:sym<{ }>")
  debug_1599:
  rx2224_fail:
    (rx2224_rep, rx2224_pos, $I10, $P10) = rx2224_cur."!mark_fail"(0)
    lt rx2224_pos, -1, rx2224_done
    eq rx2224_pos, -1, rx2224_fail
    jump $I10
  rx2224_done:
    rx2224_cur."!cursor_fail"()
    if_null rx2224_debug, debug_1600
    rx2224_cur."!cursor_debug"("FAIL", "circumfix:sym<{ }>")
  debug_1600:
    .return (rx2224_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__circumfix:sym<{ }>"  :subid("336_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1297
    new $P104, "ResizablePMCArray"
    push $P104, "{"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "circumfix:sym<sigil>"  :subid("337_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1298
    .local string rx2228_tgt
    .local int rx2228_pos
    .local int rx2228_off
    .local int rx2228_eos
    .local int rx2228_rep
    .local pmc rx2228_cur
    .local pmc rx2228_debug
    (rx2228_cur, rx2228_pos, rx2228_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2228_cur
    .local pmc match
    .lex "$/", match
    length rx2228_eos, rx2228_tgt
    gt rx2228_pos, rx2228_eos, rx2228_done
    set rx2228_off, 0
    lt rx2228_pos, 2, rx2228_start
    sub rx2228_off, rx2228_pos, 1
    substr rx2228_tgt, rx2228_tgt, rx2228_off
  rx2228_start:
    eq $I10, 1, rx2228_restart
    if_null rx2228_debug, debug_1601
    rx2228_cur."!cursor_debug"("START", "circumfix:sym<sigil>")
  debug_1601:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2229_done
    goto rxscan2229_scan
  rxscan2229_loop:
    (rx2228_pos) = rx2228_cur."from"()
    inc rx2228_pos
    rx2228_cur."!cursor_from"(rx2228_pos)
    ge rx2228_pos, rx2228_eos, rxscan2229_done
  rxscan2229_scan:
    set_addr $I10, rxscan2229_loop
    rx2228_cur."!mark_push"(0, rx2228_pos, $I10)
  rxscan2229_done:
  # rx subrule "sigil" subtype=capture negate=
    rx2228_cur."!cursor_pos"(rx2228_pos)
    $P10 = rx2228_cur."sigil"()
    unless $P10, rx2228_fail
    rx2228_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sigil")
    rx2228_pos = $P10."pos"()
  # rx literal  "("
    add $I11, rx2228_pos, 1
    gt $I11, rx2228_eos, rx2228_fail
    sub $I11, rx2228_pos, rx2228_off
    ord $I11, rx2228_tgt, $I11
    ne $I11, 40, rx2228_fail
    add rx2228_pos, 1
  # rx subrule "semilist" subtype=capture negate=
    rx2228_cur."!cursor_pos"(rx2228_pos)
    $P10 = rx2228_cur."semilist"()
    unless $P10, rx2228_fail
    rx2228_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("semilist")
    rx2228_pos = $P10."pos"()
  alt2230_0:
    set_addr $I10, alt2230_1
    rx2228_cur."!mark_push"(0, rx2228_pos, $I10)
  # rx literal  ")"
    add $I11, rx2228_pos, 1
    gt $I11, rx2228_eos, rx2228_fail
    sub $I11, rx2228_pos, rx2228_off
    ord $I11, rx2228_tgt, $I11
    ne $I11, 41, rx2228_fail
    add rx2228_pos, 1
    goto alt2230_end
  alt2230_1:
  # rx subrule "FAILGOAL" subtype=method negate=
    rx2228_cur."!cursor_pos"(rx2228_pos)
    $P10 = rx2228_cur."FAILGOAL"("')'")
    unless $P10, rx2228_fail
    goto rxsubrule2231_pass
  rxsubrule2231_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx2228_fail
  rxsubrule2231_pass:
    set_addr $I10, rxsubrule2231_back
    rx2228_cur."!mark_push"(0, rx2228_pos, $I10, $P10)
    rx2228_pos = $P10."pos"()
  alt2230_end:
  # rx pass
    rx2228_cur."!cursor_pass"(rx2228_pos, "circumfix:sym<sigil>")
    if_null rx2228_debug, debug_1602
    rx2228_cur."!cursor_debug"("PASS", "circumfix:sym<sigil>", " at pos=", rx2228_pos)
  debug_1602:
    .return (rx2228_cur)
  rx2228_restart:
    if_null rx2228_debug, debug_1603
    rx2228_cur."!cursor_debug"("NEXT", "circumfix:sym<sigil>")
  debug_1603:
  rx2228_fail:
    (rx2228_rep, rx2228_pos, $I10, $P10) = rx2228_cur."!mark_fail"(0)
    lt rx2228_pos, -1, rx2228_done
    eq rx2228_pos, -1, rx2228_fail
    jump $I10
  rx2228_done:
    rx2228_cur."!cursor_fail"()
    if_null rx2228_debug, debug_1604
    rx2228_cur."!cursor_debug"("FAIL", "circumfix:sym<sigil>")
  debug_1604:
    .return (rx2228_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__circumfix:sym<sigil>"  :subid("338_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1298
    $P105 = self."!PREFIX__!subrule"("sigil", "")
    new $P106, "ResizablePMCArray"
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "semilist"  :subid("339_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1300
    .local string rx2234_tgt
    .local int rx2234_pos
    .local int rx2234_off
    .local int rx2234_eos
    .local int rx2234_rep
    .local pmc rx2234_cur
    .local pmc rx2234_debug
    (rx2234_cur, rx2234_pos, rx2234_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2234_cur
    .local pmc match
    .lex "$/", match
    length rx2234_eos, rx2234_tgt
    gt rx2234_pos, rx2234_eos, rx2234_done
    set rx2234_off, 0
    lt rx2234_pos, 2, rx2234_start
    sub rx2234_off, rx2234_pos, 1
    substr rx2234_tgt, rx2234_tgt, rx2234_off
  rx2234_start:
    eq $I10, 1, rx2234_restart
    if_null rx2234_debug, debug_1605
    rx2234_cur."!cursor_debug"("START", "semilist")
  debug_1605:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2235_done
    goto rxscan2235_scan
  rxscan2235_loop:
    (rx2234_pos) = rx2234_cur."from"()
    inc rx2234_pos
    rx2234_cur."!cursor_from"(rx2234_pos)
    ge rx2234_pos, rx2234_eos, rxscan2235_done
  rxscan2235_scan:
    set_addr $I10, rxscan2235_loop
    rx2234_cur."!mark_push"(0, rx2234_pos, $I10)
  rxscan2235_done:
  # rx subrule "ws" subtype=method negate=
    rx2234_cur."!cursor_pos"(rx2234_pos)
    $P10 = rx2234_cur."ws"()
    unless $P10, rx2234_fail
    rx2234_pos = $P10."pos"()
  # rx subrule "statement" subtype=capture negate=
    rx2234_cur."!cursor_pos"(rx2234_pos)
    $P10 = rx2234_cur."statement"()
    unless $P10, rx2234_fail
    rx2234_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statement")
    rx2234_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2234_cur."!cursor_pos"(rx2234_pos)
    $P10 = rx2234_cur."ws"()
    unless $P10, rx2234_fail
    rx2234_pos = $P10."pos"()
  # rx pass
    rx2234_cur."!cursor_pass"(rx2234_pos, "semilist")
    if_null rx2234_debug, debug_1606
    rx2234_cur."!cursor_debug"("PASS", "semilist", " at pos=", rx2234_pos)
  debug_1606:
    .return (rx2234_cur)
  rx2234_restart:
    if_null rx2234_debug, debug_1607
    rx2234_cur."!cursor_debug"("NEXT", "semilist")
  debug_1607:
  rx2234_fail:
    (rx2234_rep, rx2234_pos, $I10, $P10) = rx2234_cur."!mark_fail"(0)
    lt rx2234_pos, -1, rx2234_done
    eq rx2234_pos, -1, rx2234_fail
    jump $I10
  rx2234_done:
    rx2234_cur."!cursor_fail"()
    if_null rx2234_debug, debug_1608
    rx2234_cur."!cursor_debug"("FAIL", "semilist")
  debug_1608:
    .return (rx2234_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__semilist"  :subid("340_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1300
    $P106 = self."!PREFIX__!subrule"("ws", "")
    new $P107, "ResizablePMCArray"
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infixish"  :subid("341_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1323
    .local string rx2238_tgt
    .local int rx2238_pos
    .local int rx2238_off
    .local int rx2238_eos
    .local int rx2238_rep
    .local pmc rx2238_cur
    .local pmc rx2238_debug
    (rx2238_cur, rx2238_pos, rx2238_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2238_cur
    .local pmc match
    .lex "$/", match
    length rx2238_eos, rx2238_tgt
    gt rx2238_pos, rx2238_eos, rx2238_done
    set rx2238_off, 0
    lt rx2238_pos, 2, rx2238_start
    sub rx2238_off, rx2238_pos, 1
    substr rx2238_tgt, rx2238_tgt, rx2238_off
  rx2238_start:
    eq $I10, 1, rx2238_restart
    if_null rx2238_debug, debug_1609
    rx2238_cur."!cursor_debug"("START", "infixish")
  debug_1609:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2239_done
    goto rxscan2239_scan
  rxscan2239_loop:
    (rx2238_pos) = rx2238_cur."from"()
    inc rx2238_pos
    rx2238_cur."!cursor_from"(rx2238_pos)
    ge rx2238_pos, rx2238_eos, rxscan2239_done
  rxscan2239_scan:
    set_addr $I10, rxscan2239_loop
    rx2238_cur."!mark_push"(0, rx2238_pos, $I10)
  rxscan2239_done:
  # rx subrule "infixstopper" subtype=zerowidth negate=1
    rx2238_cur."!cursor_pos"(rx2238_pos)
    $P10 = rx2238_cur."infixstopper"()
    if $P10, rx2238_fail
  # rx subrule "infix" subtype=capture negate=
    rx2238_cur."!cursor_pos"(rx2238_pos)
    $P10 = rx2238_cur."infix"()
    unless $P10, rx2238_fail
    rx2238_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("OPER=infix")
    rx2238_pos = $P10."pos"()
  # rx pass
    rx2238_cur."!cursor_pass"(rx2238_pos, "infixish")
    if_null rx2238_debug, debug_1610
    rx2238_cur."!cursor_debug"("PASS", "infixish", " at pos=", rx2238_pos)
  debug_1610:
    .return (rx2238_cur)
  rx2238_restart:
    if_null rx2238_debug, debug_1611
    rx2238_cur."!cursor_debug"("NEXT", "infixish")
  debug_1611:
  rx2238_fail:
    (rx2238_rep, rx2238_pos, $I10, $P10) = rx2238_cur."!mark_fail"(0)
    lt rx2238_pos, -1, rx2238_done
    eq rx2238_pos, -1, rx2238_fail
    jump $I10
  rx2238_done:
    rx2238_cur."!cursor_fail"()
    if_null rx2238_debug, debug_1612
    rx2238_cur."!cursor_debug"("FAIL", "infixish")
  debug_1612:
    .return (rx2238_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infixish"  :subid("342_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1323
    new $P104, "ResizablePMCArray"
    push $P104, ""
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infixstopper"  :subid("343_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1324
    .local string rx2242_tgt
    .local int rx2242_pos
    .local int rx2242_off
    .local int rx2242_eos
    .local int rx2242_rep
    .local pmc rx2242_cur
    .local pmc rx2242_debug
    (rx2242_cur, rx2242_pos, rx2242_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2242_cur
    .local pmc match
    .lex "$/", match
    length rx2242_eos, rx2242_tgt
    gt rx2242_pos, rx2242_eos, rx2242_done
    set rx2242_off, 0
    lt rx2242_pos, 2, rx2242_start
    sub rx2242_off, rx2242_pos, 1
    substr rx2242_tgt, rx2242_tgt, rx2242_off
  rx2242_start:
    eq $I10, 1, rx2242_restart
    if_null rx2242_debug, debug_1613
    rx2242_cur."!cursor_debug"("START", "infixstopper")
  debug_1613:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2243_done
    goto rxscan2243_scan
  rxscan2243_loop:
    (rx2242_pos) = rx2242_cur."from"()
    inc rx2242_pos
    rx2242_cur."!cursor_from"(rx2242_pos)
    ge rx2242_pos, rx2242_eos, rxscan2243_done
  rxscan2243_scan:
    set_addr $I10, rxscan2243_loop
    rx2242_cur."!mark_push"(0, rx2242_pos, $I10)
  rxscan2243_done:
  # rx subrule "lambda" subtype=zerowidth negate=
    rx2242_cur."!cursor_pos"(rx2242_pos)
    $P10 = rx2242_cur."lambda"()
    unless $P10, rx2242_fail
  # rx pass
    rx2242_cur."!cursor_pass"(rx2242_pos, "infixstopper")
    if_null rx2242_debug, debug_1614
    rx2242_cur."!cursor_debug"("PASS", "infixstopper", " at pos=", rx2242_pos)
  debug_1614:
    .return (rx2242_cur)
  rx2242_restart:
    if_null rx2242_debug, debug_1615
    rx2242_cur."!cursor_debug"("NEXT", "infixstopper")
  debug_1615:
  rx2242_fail:
    (rx2242_rep, rx2242_pos, $I10, $P10) = rx2242_cur."!mark_fail"(0)
    lt rx2242_pos, -1, rx2242_done
    eq rx2242_pos, -1, rx2242_fail
    jump $I10
  rx2242_done:
    rx2242_cur."!cursor_fail"()
    if_null rx2242_debug, debug_1616
    rx2242_cur."!cursor_debug"("FAIL", "infixstopper")
  debug_1616:
    .return (rx2242_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infixstopper"  :subid("344_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1324
    new $P104, "ResizablePMCArray"
    push $P104, ""
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postcircumfix:sym<[ ]>"  :subid("345_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1326
    .local string rx2246_tgt
    .local int rx2246_pos
    .local int rx2246_off
    .local int rx2246_eos
    .local int rx2246_rep
    .local pmc rx2246_cur
    .local pmc rx2246_debug
    (rx2246_cur, rx2246_pos, rx2246_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2246_cur
    .local pmc match
    .lex "$/", match
    length rx2246_eos, rx2246_tgt
    gt rx2246_pos, rx2246_eos, rx2246_done
    set rx2246_off, 0
    lt rx2246_pos, 2, rx2246_start
    sub rx2246_off, rx2246_pos, 1
    substr rx2246_tgt, rx2246_tgt, rx2246_off
  rx2246_start:
    eq $I10, 1, rx2246_restart
    if_null rx2246_debug, debug_1617
    rx2246_cur."!cursor_debug"("START", "postcircumfix:sym<[ ]>")
  debug_1617:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2247_done
    goto rxscan2247_scan
  rxscan2247_loop:
    (rx2246_pos) = rx2246_cur."from"()
    inc rx2246_pos
    rx2246_cur."!cursor_from"(rx2246_pos)
    ge rx2246_pos, rx2246_eos, rxscan2247_done
  rxscan2247_scan:
    set_addr $I10, rxscan2247_loop
    rx2246_cur."!mark_push"(0, rx2246_pos, $I10)
  rxscan2247_done:
.annotate 'line', 1327
  # rx literal  "["
    add $I11, rx2246_pos, 1
    gt $I11, rx2246_eos, rx2246_fail
    sub $I11, rx2246_pos, rx2246_off
    ord $I11, rx2246_tgt, $I11
    ne $I11, 91, rx2246_fail
    add rx2246_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2246_cur."!cursor_pos"(rx2246_pos)
    $P10 = rx2246_cur."ws"()
    unless $P10, rx2246_fail
    rx2246_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx2246_cur."!cursor_pos"(rx2246_pos)
    $P10 = rx2246_cur."EXPR"()
    unless $P10, rx2246_fail
    rx2246_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("EXPR")
    rx2246_pos = $P10."pos"()
  # rx literal  "]"
    add $I11, rx2246_pos, 1
    gt $I11, rx2246_eos, rx2246_fail
    sub $I11, rx2246_pos, rx2246_off
    ord $I11, rx2246_tgt, $I11
    ne $I11, 93, rx2246_fail
    add rx2246_pos, 1
.annotate 'line', 1328
  # rx subrule "O" subtype=capture negate=
    rx2246_cur."!cursor_pos"(rx2246_pos)
    $P10 = rx2246_cur."O"("%methodop")
    unless $P10, rx2246_fail
    rx2246_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2246_pos = $P10."pos"()
.annotate 'line', 1326
  # rx pass
    rx2246_cur."!cursor_pass"(rx2246_pos, "postcircumfix:sym<[ ]>")
    if_null rx2246_debug, debug_1618
    rx2246_cur."!cursor_debug"("PASS", "postcircumfix:sym<[ ]>", " at pos=", rx2246_pos)
  debug_1618:
    .return (rx2246_cur)
  rx2246_restart:
    if_null rx2246_debug, debug_1619
    rx2246_cur."!cursor_debug"("NEXT", "postcircumfix:sym<[ ]>")
  debug_1619:
  rx2246_fail:
    (rx2246_rep, rx2246_pos, $I10, $P10) = rx2246_cur."!mark_fail"(0)
    lt rx2246_pos, -1, rx2246_done
    eq rx2246_pos, -1, rx2246_fail
    jump $I10
  rx2246_done:
    rx2246_cur."!cursor_fail"()
    if_null rx2246_debug, debug_1620
    rx2246_cur."!cursor_debug"("FAIL", "postcircumfix:sym<[ ]>")
  debug_1620:
    .return (rx2246_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__postcircumfix:sym<[ ]>"  :subid("346_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1326
    $P104 = self."!PREFIX__!subrule"("ws", "[")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postcircumfix:sym<{ }>"  :subid("347_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1331
    .local string rx2250_tgt
    .local int rx2250_pos
    .local int rx2250_off
    .local int rx2250_eos
    .local int rx2250_rep
    .local pmc rx2250_cur
    .local pmc rx2250_debug
    (rx2250_cur, rx2250_pos, rx2250_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2250_cur
    .local pmc match
    .lex "$/", match
    length rx2250_eos, rx2250_tgt
    gt rx2250_pos, rx2250_eos, rx2250_done
    set rx2250_off, 0
    lt rx2250_pos, 2, rx2250_start
    sub rx2250_off, rx2250_pos, 1
    substr rx2250_tgt, rx2250_tgt, rx2250_off
  rx2250_start:
    eq $I10, 1, rx2250_restart
    if_null rx2250_debug, debug_1621
    rx2250_cur."!cursor_debug"("START", "postcircumfix:sym<{ }>")
  debug_1621:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2251_done
    goto rxscan2251_scan
  rxscan2251_loop:
    (rx2250_pos) = rx2250_cur."from"()
    inc rx2250_pos
    rx2250_cur."!cursor_from"(rx2250_pos)
    ge rx2250_pos, rx2250_eos, rxscan2251_done
  rxscan2251_scan:
    set_addr $I10, rxscan2251_loop
    rx2250_cur."!mark_push"(0, rx2250_pos, $I10)
  rxscan2251_done:
.annotate 'line', 1332
  # rx literal  "{"
    add $I11, rx2250_pos, 1
    gt $I11, rx2250_eos, rx2250_fail
    sub $I11, rx2250_pos, rx2250_off
    ord $I11, rx2250_tgt, $I11
    ne $I11, 123, rx2250_fail
    add rx2250_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2250_cur."!cursor_pos"(rx2250_pos)
    $P10 = rx2250_cur."ws"()
    unless $P10, rx2250_fail
    rx2250_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx2250_cur."!cursor_pos"(rx2250_pos)
    $P10 = rx2250_cur."EXPR"()
    unless $P10, rx2250_fail
    rx2250_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("EXPR")
    rx2250_pos = $P10."pos"()
  # rx literal  "}"
    add $I11, rx2250_pos, 1
    gt $I11, rx2250_eos, rx2250_fail
    sub $I11, rx2250_pos, rx2250_off
    ord $I11, rx2250_tgt, $I11
    ne $I11, 125, rx2250_fail
    add rx2250_pos, 1
.annotate 'line', 1333
  # rx subrule "O" subtype=capture negate=
    rx2250_cur."!cursor_pos"(rx2250_pos)
    $P10 = rx2250_cur."O"("%methodop")
    unless $P10, rx2250_fail
    rx2250_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2250_pos = $P10."pos"()
.annotate 'line', 1331
  # rx pass
    rx2250_cur."!cursor_pass"(rx2250_pos, "postcircumfix:sym<{ }>")
    if_null rx2250_debug, debug_1622
    rx2250_cur."!cursor_debug"("PASS", "postcircumfix:sym<{ }>", " at pos=", rx2250_pos)
  debug_1622:
    .return (rx2250_cur)
  rx2250_restart:
    if_null rx2250_debug, debug_1623
    rx2250_cur."!cursor_debug"("NEXT", "postcircumfix:sym<{ }>")
  debug_1623:
  rx2250_fail:
    (rx2250_rep, rx2250_pos, $I10, $P10) = rx2250_cur."!mark_fail"(0)
    lt rx2250_pos, -1, rx2250_done
    eq rx2250_pos, -1, rx2250_fail
    jump $I10
  rx2250_done:
    rx2250_cur."!cursor_fail"()
    if_null rx2250_debug, debug_1624
    rx2250_cur."!cursor_debug"("FAIL", "postcircumfix:sym<{ }>")
  debug_1624:
    .return (rx2250_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__postcircumfix:sym<{ }>"  :subid("348_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1331
    $P104 = self."!PREFIX__!subrule"("ws", "{")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postcircumfix:sym<ang>"  :subid("349_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1336
    .local string rx2254_tgt
    .local int rx2254_pos
    .local int rx2254_off
    .local int rx2254_eos
    .local int rx2254_rep
    .local pmc rx2254_cur
    .local pmc rx2254_debug
    (rx2254_cur, rx2254_pos, rx2254_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2254_cur
    .local pmc match
    .lex "$/", match
    length rx2254_eos, rx2254_tgt
    gt rx2254_pos, rx2254_eos, rx2254_done
    set rx2254_off, 0
    lt rx2254_pos, 2, rx2254_start
    sub rx2254_off, rx2254_pos, 1
    substr rx2254_tgt, rx2254_tgt, rx2254_off
  rx2254_start:
    eq $I10, 1, rx2254_restart
    if_null rx2254_debug, debug_1625
    rx2254_cur."!cursor_debug"("START", "postcircumfix:sym<ang>")
  debug_1625:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2255_done
    goto rxscan2255_scan
  rxscan2255_loop:
    (rx2254_pos) = rx2254_cur."from"()
    inc rx2254_pos
    rx2254_cur."!cursor_from"(rx2254_pos)
    ge rx2254_pos, rx2254_eos, rxscan2255_done
  rxscan2255_scan:
    set_addr $I10, rxscan2255_loop
    rx2254_cur."!mark_push"(0, rx2254_pos, $I10)
  rxscan2255_done:
.annotate 'line', 1337
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2254_pos, rx2254_off
    substr $S10, rx2254_tgt, $I10, 1
    index $I11, "<", $S10
    lt $I11, 0, rx2254_fail
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx2254_cur."!cursor_pos"(rx2254_pos)
    $P10 = rx2254_cur."quote_EXPR"(":q")
    unless $P10, rx2254_fail
    rx2254_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx2254_pos = $P10."pos"()
.annotate 'line', 1338
  # rx subrule "O" subtype=capture negate=
    rx2254_cur."!cursor_pos"(rx2254_pos)
    $P10 = rx2254_cur."O"("%methodop")
    unless $P10, rx2254_fail
    rx2254_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2254_pos = $P10."pos"()
.annotate 'line', 1336
  # rx pass
    rx2254_cur."!cursor_pass"(rx2254_pos, "postcircumfix:sym<ang>")
    if_null rx2254_debug, debug_1626
    rx2254_cur."!cursor_debug"("PASS", "postcircumfix:sym<ang>", " at pos=", rx2254_pos)
  debug_1626:
    .return (rx2254_cur)
  rx2254_restart:
    if_null rx2254_debug, debug_1627
    rx2254_cur."!cursor_debug"("NEXT", "postcircumfix:sym<ang>")
  debug_1627:
  rx2254_fail:
    (rx2254_rep, rx2254_pos, $I10, $P10) = rx2254_cur."!mark_fail"(0)
    lt rx2254_pos, -1, rx2254_done
    eq rx2254_pos, -1, rx2254_fail
    jump $I10
  rx2254_done:
    rx2254_cur."!cursor_fail"()
    if_null rx2254_debug, debug_1628
    rx2254_cur."!cursor_debug"("FAIL", "postcircumfix:sym<ang>")
  debug_1628:
    .return (rx2254_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__postcircumfix:sym<ang>"  :subid("350_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1336
    new $P104, "ResizablePMCArray"
    push $P104, "<"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postcircumfix:sym<( )>"  :subid("351_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1341
    .local string rx2258_tgt
    .local int rx2258_pos
    .local int rx2258_off
    .local int rx2258_eos
    .local int rx2258_rep
    .local pmc rx2258_cur
    .local pmc rx2258_debug
    (rx2258_cur, rx2258_pos, rx2258_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2258_cur
    .local pmc match
    .lex "$/", match
    length rx2258_eos, rx2258_tgt
    gt rx2258_pos, rx2258_eos, rx2258_done
    set rx2258_off, 0
    lt rx2258_pos, 2, rx2258_start
    sub rx2258_off, rx2258_pos, 1
    substr rx2258_tgt, rx2258_tgt, rx2258_off
  rx2258_start:
    eq $I10, 1, rx2258_restart
    if_null rx2258_debug, debug_1629
    rx2258_cur."!cursor_debug"("START", "postcircumfix:sym<( )>")
  debug_1629:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2259_done
    goto rxscan2259_scan
  rxscan2259_loop:
    (rx2258_pos) = rx2258_cur."from"()
    inc rx2258_pos
    rx2258_cur."!cursor_from"(rx2258_pos)
    ge rx2258_pos, rx2258_eos, rxscan2259_done
  rxscan2259_scan:
    set_addr $I10, rxscan2259_loop
    rx2258_cur."!mark_push"(0, rx2258_pos, $I10)
  rxscan2259_done:
.annotate 'line', 1342
  # rx literal  "("
    add $I11, rx2258_pos, 1
    gt $I11, rx2258_eos, rx2258_fail
    sub $I11, rx2258_pos, rx2258_off
    ord $I11, rx2258_tgt, $I11
    ne $I11, 40, rx2258_fail
    add rx2258_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2258_cur."!cursor_pos"(rx2258_pos)
    $P10 = rx2258_cur."ws"()
    unless $P10, rx2258_fail
    rx2258_pos = $P10."pos"()
  # rx subrule "arglist" subtype=capture negate=
    rx2258_cur."!cursor_pos"(rx2258_pos)
    $P10 = rx2258_cur."arglist"()
    unless $P10, rx2258_fail
    rx2258_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("arglist")
    rx2258_pos = $P10."pos"()
  # rx literal  ")"
    add $I11, rx2258_pos, 1
    gt $I11, rx2258_eos, rx2258_fail
    sub $I11, rx2258_pos, rx2258_off
    ord $I11, rx2258_tgt, $I11
    ne $I11, 41, rx2258_fail
    add rx2258_pos, 1
.annotate 'line', 1343
  # rx subrule "O" subtype=capture negate=
    rx2258_cur."!cursor_pos"(rx2258_pos)
    $P10 = rx2258_cur."O"("%methodop")
    unless $P10, rx2258_fail
    rx2258_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2258_pos = $P10."pos"()
.annotate 'line', 1341
  # rx pass
    rx2258_cur."!cursor_pass"(rx2258_pos, "postcircumfix:sym<( )>")
    if_null rx2258_debug, debug_1630
    rx2258_cur."!cursor_debug"("PASS", "postcircumfix:sym<( )>", " at pos=", rx2258_pos)
  debug_1630:
    .return (rx2258_cur)
  rx2258_restart:
    if_null rx2258_debug, debug_1631
    rx2258_cur."!cursor_debug"("NEXT", "postcircumfix:sym<( )>")
  debug_1631:
  rx2258_fail:
    (rx2258_rep, rx2258_pos, $I10, $P10) = rx2258_cur."!mark_fail"(0)
    lt rx2258_pos, -1, rx2258_done
    eq rx2258_pos, -1, rx2258_fail
    jump $I10
  rx2258_done:
    rx2258_cur."!cursor_fail"()
    if_null rx2258_debug, debug_1632
    rx2258_cur."!cursor_debug"("FAIL", "postcircumfix:sym<( )>")
  debug_1632:
    .return (rx2258_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__postcircumfix:sym<( )>"  :subid("352_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1341
    $P104 = self."!PREFIX__!subrule"("ws", "(")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postfix:sym<.>"  :subid("353_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1346
    .local string rx2262_tgt
    .local int rx2262_pos
    .local int rx2262_off
    .local int rx2262_eos
    .local int rx2262_rep
    .local pmc rx2262_cur
    .local pmc rx2262_debug
    (rx2262_cur, rx2262_pos, rx2262_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2262_cur
    .local pmc match
    .lex "$/", match
    length rx2262_eos, rx2262_tgt
    gt rx2262_pos, rx2262_eos, rx2262_done
    set rx2262_off, 0
    lt rx2262_pos, 2, rx2262_start
    sub rx2262_off, rx2262_pos, 1
    substr rx2262_tgt, rx2262_tgt, rx2262_off
  rx2262_start:
    eq $I10, 1, rx2262_restart
    if_null rx2262_debug, debug_1633
    rx2262_cur."!cursor_debug"("START", "postfix:sym<.>")
  debug_1633:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2263_done
    goto rxscan2263_scan
  rxscan2263_loop:
    (rx2262_pos) = rx2262_cur."from"()
    inc rx2262_pos
    rx2262_cur."!cursor_from"(rx2262_pos)
    ge rx2262_pos, rx2262_eos, rxscan2263_done
  rxscan2263_scan:
    set_addr $I10, rxscan2263_loop
    rx2262_cur."!mark_push"(0, rx2262_pos, $I10)
  rxscan2263_done:
  # rx subrule "dotty" subtype=capture negate=
    rx2262_cur."!cursor_pos"(rx2262_pos)
    $P10 = rx2262_cur."dotty"()
    unless $P10, rx2262_fail
    rx2262_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("dotty")
    rx2262_pos = $P10."pos"()
  # rx subrule "O" subtype=capture negate=
    rx2262_cur."!cursor_pos"(rx2262_pos)
    $P10 = rx2262_cur."O"("%methodop")
    unless $P10, rx2262_fail
    rx2262_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2262_pos = $P10."pos"()
  # rx pass
    rx2262_cur."!cursor_pass"(rx2262_pos, "postfix:sym<.>")
    if_null rx2262_debug, debug_1634
    rx2262_cur."!cursor_debug"("PASS", "postfix:sym<.>", " at pos=", rx2262_pos)
  debug_1634:
    .return (rx2262_cur)
  rx2262_restart:
    if_null rx2262_debug, debug_1635
    rx2262_cur."!cursor_debug"("NEXT", "postfix:sym<.>")
  debug_1635:
  rx2262_fail:
    (rx2262_rep, rx2262_pos, $I10, $P10) = rx2262_cur."!mark_fail"(0)
    lt rx2262_pos, -1, rx2262_done
    eq rx2262_pos, -1, rx2262_fail
    jump $I10
  rx2262_done:
    rx2262_cur."!cursor_fail"()
    if_null rx2262_debug, debug_1636
    rx2262_cur."!cursor_debug"("FAIL", "postfix:sym<.>")
  debug_1636:
    .return (rx2262_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__postfix:sym<.>"  :subid("354_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1346
    $P104 = self."!PREFIX__!subrule"("dotty", "")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<++>"  :subid("355_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1348
    .local string rx2266_tgt
    .local int rx2266_pos
    .local int rx2266_off
    .local int rx2266_eos
    .local int rx2266_rep
    .local pmc rx2266_cur
    .local pmc rx2266_debug
    (rx2266_cur, rx2266_pos, rx2266_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2266_cur
    .local pmc match
    .lex "$/", match
    length rx2266_eos, rx2266_tgt
    gt rx2266_pos, rx2266_eos, rx2266_done
    set rx2266_off, 0
    lt rx2266_pos, 2, rx2266_start
    sub rx2266_off, rx2266_pos, 1
    substr rx2266_tgt, rx2266_tgt, rx2266_off
  rx2266_start:
    eq $I10, 1, rx2266_restart
    if_null rx2266_debug, debug_1637
    rx2266_cur."!cursor_debug"("START", "prefix:sym<++>")
  debug_1637:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2267_done
    goto rxscan2267_scan
  rxscan2267_loop:
    (rx2266_pos) = rx2266_cur."from"()
    inc rx2266_pos
    rx2266_cur."!cursor_from"(rx2266_pos)
    ge rx2266_pos, rx2266_eos, rxscan2267_done
  rxscan2267_scan:
    set_addr $I10, rxscan2267_loop
    rx2266_cur."!mark_push"(0, rx2266_pos, $I10)
  rxscan2267_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2268_fail
    rx2266_cur."!mark_push"(0, rx2266_pos, $I10)
  # rx literal  "++"
    add $I11, rx2266_pos, 2
    gt $I11, rx2266_eos, rx2266_fail
    sub $I11, rx2266_pos, rx2266_off
    substr $S10, rx2266_tgt, $I11, 2
    ne $S10, "++", rx2266_fail
    add rx2266_pos, 2
    set_addr $I10, rxcap_2268_fail
    ($I12, $I11) = rx2266_cur."!mark_peek"($I10)
    rx2266_cur."!cursor_pos"($I11)
    ($P10) = rx2266_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2266_pos, "")
    rx2266_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2268_done
  rxcap_2268_fail:
    goto rx2266_fail
  rxcap_2268_done:
  # rx subrule "O" subtype=capture negate=
    rx2266_cur."!cursor_pos"(rx2266_pos)
    $P10 = rx2266_cur."O"("%autoincrement, :pirop<inc>")
    unless $P10, rx2266_fail
    rx2266_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2266_pos = $P10."pos"()
  # rx pass
    rx2266_cur."!cursor_pass"(rx2266_pos, "prefix:sym<++>")
    if_null rx2266_debug, debug_1638
    rx2266_cur."!cursor_debug"("PASS", "prefix:sym<++>", " at pos=", rx2266_pos)
  debug_1638:
    .return (rx2266_cur)
  rx2266_restart:
    if_null rx2266_debug, debug_1639
    rx2266_cur."!cursor_debug"("NEXT", "prefix:sym<++>")
  debug_1639:
  rx2266_fail:
    (rx2266_rep, rx2266_pos, $I10, $P10) = rx2266_cur."!mark_fail"(0)
    lt rx2266_pos, -1, rx2266_done
    eq rx2266_pos, -1, rx2266_fail
    jump $I10
  rx2266_done:
    rx2266_cur."!cursor_fail"()
    if_null rx2266_debug, debug_1640
    rx2266_cur."!cursor_debug"("FAIL", "prefix:sym<++>")
  debug_1640:
    .return (rx2266_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<++>"  :subid("356_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1348
    $P104 = self."!PREFIX__!subrule"("O", "++")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<-->"  :subid("357_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1349
    .local string rx2271_tgt
    .local int rx2271_pos
    .local int rx2271_off
    .local int rx2271_eos
    .local int rx2271_rep
    .local pmc rx2271_cur
    .local pmc rx2271_debug
    (rx2271_cur, rx2271_pos, rx2271_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2271_cur
    .local pmc match
    .lex "$/", match
    length rx2271_eos, rx2271_tgt
    gt rx2271_pos, rx2271_eos, rx2271_done
    set rx2271_off, 0
    lt rx2271_pos, 2, rx2271_start
    sub rx2271_off, rx2271_pos, 1
    substr rx2271_tgt, rx2271_tgt, rx2271_off
  rx2271_start:
    eq $I10, 1, rx2271_restart
    if_null rx2271_debug, debug_1641
    rx2271_cur."!cursor_debug"("START", "prefix:sym<-->")
  debug_1641:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2272_done
    goto rxscan2272_scan
  rxscan2272_loop:
    (rx2271_pos) = rx2271_cur."from"()
    inc rx2271_pos
    rx2271_cur."!cursor_from"(rx2271_pos)
    ge rx2271_pos, rx2271_eos, rxscan2272_done
  rxscan2272_scan:
    set_addr $I10, rxscan2272_loop
    rx2271_cur."!mark_push"(0, rx2271_pos, $I10)
  rxscan2272_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2273_fail
    rx2271_cur."!mark_push"(0, rx2271_pos, $I10)
  # rx literal  "--"
    add $I11, rx2271_pos, 2
    gt $I11, rx2271_eos, rx2271_fail
    sub $I11, rx2271_pos, rx2271_off
    substr $S10, rx2271_tgt, $I11, 2
    ne $S10, "--", rx2271_fail
    add rx2271_pos, 2
    set_addr $I10, rxcap_2273_fail
    ($I12, $I11) = rx2271_cur."!mark_peek"($I10)
    rx2271_cur."!cursor_pos"($I11)
    ($P10) = rx2271_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2271_pos, "")
    rx2271_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2273_done
  rxcap_2273_fail:
    goto rx2271_fail
  rxcap_2273_done:
  # rx subrule "O" subtype=capture negate=
    rx2271_cur."!cursor_pos"(rx2271_pos)
    $P10 = rx2271_cur."O"("%autoincrement, :pirop<dec>")
    unless $P10, rx2271_fail
    rx2271_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2271_pos = $P10."pos"()
  # rx pass
    rx2271_cur."!cursor_pass"(rx2271_pos, "prefix:sym<-->")
    if_null rx2271_debug, debug_1642
    rx2271_cur."!cursor_debug"("PASS", "prefix:sym<-->", " at pos=", rx2271_pos)
  debug_1642:
    .return (rx2271_cur)
  rx2271_restart:
    if_null rx2271_debug, debug_1643
    rx2271_cur."!cursor_debug"("NEXT", "prefix:sym<-->")
  debug_1643:
  rx2271_fail:
    (rx2271_rep, rx2271_pos, $I10, $P10) = rx2271_cur."!mark_fail"(0)
    lt rx2271_pos, -1, rx2271_done
    eq rx2271_pos, -1, rx2271_fail
    jump $I10
  rx2271_done:
    rx2271_cur."!cursor_fail"()
    if_null rx2271_debug, debug_1644
    rx2271_cur."!cursor_debug"("FAIL", "prefix:sym<-->")
  debug_1644:
    .return (rx2271_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<-->"  :subid("358_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1349
    $P104 = self."!PREFIX__!subrule"("O", "--")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postfix:sym<++>"  :subid("359_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1352
    .local string rx2276_tgt
    .local int rx2276_pos
    .local int rx2276_off
    .local int rx2276_eos
    .local int rx2276_rep
    .local pmc rx2276_cur
    .local pmc rx2276_debug
    (rx2276_cur, rx2276_pos, rx2276_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2276_cur
    .local pmc match
    .lex "$/", match
    length rx2276_eos, rx2276_tgt
    gt rx2276_pos, rx2276_eos, rx2276_done
    set rx2276_off, 0
    lt rx2276_pos, 2, rx2276_start
    sub rx2276_off, rx2276_pos, 1
    substr rx2276_tgt, rx2276_tgt, rx2276_off
  rx2276_start:
    eq $I10, 1, rx2276_restart
    if_null rx2276_debug, debug_1645
    rx2276_cur."!cursor_debug"("START", "postfix:sym<++>")
  debug_1645:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2277_done
    goto rxscan2277_scan
  rxscan2277_loop:
    (rx2276_pos) = rx2276_cur."from"()
    inc rx2276_pos
    rx2276_cur."!cursor_from"(rx2276_pos)
    ge rx2276_pos, rx2276_eos, rxscan2277_done
  rxscan2277_scan:
    set_addr $I10, rxscan2277_loop
    rx2276_cur."!mark_push"(0, rx2276_pos, $I10)
  rxscan2277_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2278_fail
    rx2276_cur."!mark_push"(0, rx2276_pos, $I10)
  # rx literal  "++"
    add $I11, rx2276_pos, 2
    gt $I11, rx2276_eos, rx2276_fail
    sub $I11, rx2276_pos, rx2276_off
    substr $S10, rx2276_tgt, $I11, 2
    ne $S10, "++", rx2276_fail
    add rx2276_pos, 2
    set_addr $I10, rxcap_2278_fail
    ($I12, $I11) = rx2276_cur."!mark_peek"($I10)
    rx2276_cur."!cursor_pos"($I11)
    ($P10) = rx2276_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2276_pos, "")
    rx2276_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2278_done
  rxcap_2278_fail:
    goto rx2276_fail
  rxcap_2278_done:
  # rx subrule "O" subtype=capture negate=
    rx2276_cur."!cursor_pos"(rx2276_pos)
    $P10 = rx2276_cur."O"("%autoincrement")
    unless $P10, rx2276_fail
    rx2276_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2276_pos = $P10."pos"()
  # rx pass
    rx2276_cur."!cursor_pass"(rx2276_pos, "postfix:sym<++>")
    if_null rx2276_debug, debug_1646
    rx2276_cur."!cursor_debug"("PASS", "postfix:sym<++>", " at pos=", rx2276_pos)
  debug_1646:
    .return (rx2276_cur)
  rx2276_restart:
    if_null rx2276_debug, debug_1647
    rx2276_cur."!cursor_debug"("NEXT", "postfix:sym<++>")
  debug_1647:
  rx2276_fail:
    (rx2276_rep, rx2276_pos, $I10, $P10) = rx2276_cur."!mark_fail"(0)
    lt rx2276_pos, -1, rx2276_done
    eq rx2276_pos, -1, rx2276_fail
    jump $I10
  rx2276_done:
    rx2276_cur."!cursor_fail"()
    if_null rx2276_debug, debug_1648
    rx2276_cur."!cursor_debug"("FAIL", "postfix:sym<++>")
  debug_1648:
    .return (rx2276_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__postfix:sym<++>"  :subid("360_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1352
    $P104 = self."!PREFIX__!subrule"("O", "++")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postfix:sym<-->"  :subid("361_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1353
    .local string rx2281_tgt
    .local int rx2281_pos
    .local int rx2281_off
    .local int rx2281_eos
    .local int rx2281_rep
    .local pmc rx2281_cur
    .local pmc rx2281_debug
    (rx2281_cur, rx2281_pos, rx2281_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2281_cur
    .local pmc match
    .lex "$/", match
    length rx2281_eos, rx2281_tgt
    gt rx2281_pos, rx2281_eos, rx2281_done
    set rx2281_off, 0
    lt rx2281_pos, 2, rx2281_start
    sub rx2281_off, rx2281_pos, 1
    substr rx2281_tgt, rx2281_tgt, rx2281_off
  rx2281_start:
    eq $I10, 1, rx2281_restart
    if_null rx2281_debug, debug_1649
    rx2281_cur."!cursor_debug"("START", "postfix:sym<-->")
  debug_1649:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2282_done
    goto rxscan2282_scan
  rxscan2282_loop:
    (rx2281_pos) = rx2281_cur."from"()
    inc rx2281_pos
    rx2281_cur."!cursor_from"(rx2281_pos)
    ge rx2281_pos, rx2281_eos, rxscan2282_done
  rxscan2282_scan:
    set_addr $I10, rxscan2282_loop
    rx2281_cur."!mark_push"(0, rx2281_pos, $I10)
  rxscan2282_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2283_fail
    rx2281_cur."!mark_push"(0, rx2281_pos, $I10)
  # rx literal  "--"
    add $I11, rx2281_pos, 2
    gt $I11, rx2281_eos, rx2281_fail
    sub $I11, rx2281_pos, rx2281_off
    substr $S10, rx2281_tgt, $I11, 2
    ne $S10, "--", rx2281_fail
    add rx2281_pos, 2
    set_addr $I10, rxcap_2283_fail
    ($I12, $I11) = rx2281_cur."!mark_peek"($I10)
    rx2281_cur."!cursor_pos"($I11)
    ($P10) = rx2281_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2281_pos, "")
    rx2281_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2283_done
  rxcap_2283_fail:
    goto rx2281_fail
  rxcap_2283_done:
  # rx subrule "O" subtype=capture negate=
    rx2281_cur."!cursor_pos"(rx2281_pos)
    $P10 = rx2281_cur."O"("%autoincrement")
    unless $P10, rx2281_fail
    rx2281_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2281_pos = $P10."pos"()
  # rx pass
    rx2281_cur."!cursor_pass"(rx2281_pos, "postfix:sym<-->")
    if_null rx2281_debug, debug_1650
    rx2281_cur."!cursor_debug"("PASS", "postfix:sym<-->", " at pos=", rx2281_pos)
  debug_1650:
    .return (rx2281_cur)
  rx2281_restart:
    if_null rx2281_debug, debug_1651
    rx2281_cur."!cursor_debug"("NEXT", "postfix:sym<-->")
  debug_1651:
  rx2281_fail:
    (rx2281_rep, rx2281_pos, $I10, $P10) = rx2281_cur."!mark_fail"(0)
    lt rx2281_pos, -1, rx2281_done
    eq rx2281_pos, -1, rx2281_fail
    jump $I10
  rx2281_done:
    rx2281_cur."!cursor_fail"()
    if_null rx2281_debug, debug_1652
    rx2281_cur."!cursor_debug"("FAIL", "postfix:sym<-->")
  debug_1652:
    .return (rx2281_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__postfix:sym<-->"  :subid("362_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1353
    $P104 = self."!PREFIX__!subrule"("O", "--")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<**>"  :subid("363_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1355
    .local string rx2286_tgt
    .local int rx2286_pos
    .local int rx2286_off
    .local int rx2286_eos
    .local int rx2286_rep
    .local pmc rx2286_cur
    .local pmc rx2286_debug
    (rx2286_cur, rx2286_pos, rx2286_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2286_cur
    .local pmc match
    .lex "$/", match
    length rx2286_eos, rx2286_tgt
    gt rx2286_pos, rx2286_eos, rx2286_done
    set rx2286_off, 0
    lt rx2286_pos, 2, rx2286_start
    sub rx2286_off, rx2286_pos, 1
    substr rx2286_tgt, rx2286_tgt, rx2286_off
  rx2286_start:
    eq $I10, 1, rx2286_restart
    if_null rx2286_debug, debug_1653
    rx2286_cur."!cursor_debug"("START", "infix:sym<**>")
  debug_1653:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2287_done
    goto rxscan2287_scan
  rxscan2287_loop:
    (rx2286_pos) = rx2286_cur."from"()
    inc rx2286_pos
    rx2286_cur."!cursor_from"(rx2286_pos)
    ge rx2286_pos, rx2286_eos, rxscan2287_done
  rxscan2287_scan:
    set_addr $I10, rxscan2287_loop
    rx2286_cur."!mark_push"(0, rx2286_pos, $I10)
  rxscan2287_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2288_fail
    rx2286_cur."!mark_push"(0, rx2286_pos, $I10)
  # rx literal  "**"
    add $I11, rx2286_pos, 2
    gt $I11, rx2286_eos, rx2286_fail
    sub $I11, rx2286_pos, rx2286_off
    substr $S10, rx2286_tgt, $I11, 2
    ne $S10, "**", rx2286_fail
    add rx2286_pos, 2
    set_addr $I10, rxcap_2288_fail
    ($I12, $I11) = rx2286_cur."!mark_peek"($I10)
    rx2286_cur."!cursor_pos"($I11)
    ($P10) = rx2286_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2286_pos, "")
    rx2286_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2288_done
  rxcap_2288_fail:
    goto rx2286_fail
  rxcap_2288_done:
  # rx subrule "O" subtype=capture negate=
    rx2286_cur."!cursor_pos"(rx2286_pos)
    $P10 = rx2286_cur."O"("%exponentiation, :pirop<pow__NNN>")
    unless $P10, rx2286_fail
    rx2286_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2286_pos = $P10."pos"()
  # rx pass
    rx2286_cur."!cursor_pass"(rx2286_pos, "infix:sym<**>")
    if_null rx2286_debug, debug_1654
    rx2286_cur."!cursor_debug"("PASS", "infix:sym<**>", " at pos=", rx2286_pos)
  debug_1654:
    .return (rx2286_cur)
  rx2286_restart:
    if_null rx2286_debug, debug_1655
    rx2286_cur."!cursor_debug"("NEXT", "infix:sym<**>")
  debug_1655:
  rx2286_fail:
    (rx2286_rep, rx2286_pos, $I10, $P10) = rx2286_cur."!mark_fail"(0)
    lt rx2286_pos, -1, rx2286_done
    eq rx2286_pos, -1, rx2286_fail
    jump $I10
  rx2286_done:
    rx2286_cur."!cursor_fail"()
    if_null rx2286_debug, debug_1656
    rx2286_cur."!cursor_debug"("FAIL", "infix:sym<**>")
  debug_1656:
    .return (rx2286_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<**>"  :subid("364_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1355
    $P104 = self."!PREFIX__!subrule"("O", "**")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<+>"  :subid("365_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1357
    .local string rx2291_tgt
    .local int rx2291_pos
    .local int rx2291_off
    .local int rx2291_eos
    .local int rx2291_rep
    .local pmc rx2291_cur
    .local pmc rx2291_debug
    (rx2291_cur, rx2291_pos, rx2291_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2291_cur
    .local pmc match
    .lex "$/", match
    length rx2291_eos, rx2291_tgt
    gt rx2291_pos, rx2291_eos, rx2291_done
    set rx2291_off, 0
    lt rx2291_pos, 2, rx2291_start
    sub rx2291_off, rx2291_pos, 1
    substr rx2291_tgt, rx2291_tgt, rx2291_off
  rx2291_start:
    eq $I10, 1, rx2291_restart
    if_null rx2291_debug, debug_1657
    rx2291_cur."!cursor_debug"("START", "prefix:sym<+>")
  debug_1657:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2292_done
    goto rxscan2292_scan
  rxscan2292_loop:
    (rx2291_pos) = rx2291_cur."from"()
    inc rx2291_pos
    rx2291_cur."!cursor_from"(rx2291_pos)
    ge rx2291_pos, rx2291_eos, rxscan2292_done
  rxscan2292_scan:
    set_addr $I10, rxscan2292_loop
    rx2291_cur."!mark_push"(0, rx2291_pos, $I10)
  rxscan2292_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2293_fail
    rx2291_cur."!mark_push"(0, rx2291_pos, $I10)
  # rx literal  "+"
    add $I11, rx2291_pos, 1
    gt $I11, rx2291_eos, rx2291_fail
    sub $I11, rx2291_pos, rx2291_off
    ord $I11, rx2291_tgt, $I11
    ne $I11, 43, rx2291_fail
    add rx2291_pos, 1
    set_addr $I10, rxcap_2293_fail
    ($I12, $I11) = rx2291_cur."!mark_peek"($I10)
    rx2291_cur."!cursor_pos"($I11)
    ($P10) = rx2291_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2291_pos, "")
    rx2291_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2293_done
  rxcap_2293_fail:
    goto rx2291_fail
  rxcap_2293_done:
  # rx subrule "O" subtype=capture negate=
    rx2291_cur."!cursor_pos"(rx2291_pos)
    $P10 = rx2291_cur."O"("%symbolic_unary, :pirop<set N*>")
    unless $P10, rx2291_fail
    rx2291_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2291_pos = $P10."pos"()
  # rx pass
    rx2291_cur."!cursor_pass"(rx2291_pos, "prefix:sym<+>")
    if_null rx2291_debug, debug_1658
    rx2291_cur."!cursor_debug"("PASS", "prefix:sym<+>", " at pos=", rx2291_pos)
  debug_1658:
    .return (rx2291_cur)
  rx2291_restart:
    if_null rx2291_debug, debug_1659
    rx2291_cur."!cursor_debug"("NEXT", "prefix:sym<+>")
  debug_1659:
  rx2291_fail:
    (rx2291_rep, rx2291_pos, $I10, $P10) = rx2291_cur."!mark_fail"(0)
    lt rx2291_pos, -1, rx2291_done
    eq rx2291_pos, -1, rx2291_fail
    jump $I10
  rx2291_done:
    rx2291_cur."!cursor_fail"()
    if_null rx2291_debug, debug_1660
    rx2291_cur."!cursor_debug"("FAIL", "prefix:sym<+>")
  debug_1660:
    .return (rx2291_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<+>"  :subid("366_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1357
    $P104 = self."!PREFIX__!subrule"("O", "+")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<~>"  :subid("367_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1358
    .local string rx2296_tgt
    .local int rx2296_pos
    .local int rx2296_off
    .local int rx2296_eos
    .local int rx2296_rep
    .local pmc rx2296_cur
    .local pmc rx2296_debug
    (rx2296_cur, rx2296_pos, rx2296_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2296_cur
    .local pmc match
    .lex "$/", match
    length rx2296_eos, rx2296_tgt
    gt rx2296_pos, rx2296_eos, rx2296_done
    set rx2296_off, 0
    lt rx2296_pos, 2, rx2296_start
    sub rx2296_off, rx2296_pos, 1
    substr rx2296_tgt, rx2296_tgt, rx2296_off
  rx2296_start:
    eq $I10, 1, rx2296_restart
    if_null rx2296_debug, debug_1661
    rx2296_cur."!cursor_debug"("START", "prefix:sym<~>")
  debug_1661:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2297_done
    goto rxscan2297_scan
  rxscan2297_loop:
    (rx2296_pos) = rx2296_cur."from"()
    inc rx2296_pos
    rx2296_cur."!cursor_from"(rx2296_pos)
    ge rx2296_pos, rx2296_eos, rxscan2297_done
  rxscan2297_scan:
    set_addr $I10, rxscan2297_loop
    rx2296_cur."!mark_push"(0, rx2296_pos, $I10)
  rxscan2297_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2298_fail
    rx2296_cur."!mark_push"(0, rx2296_pos, $I10)
  # rx literal  "~"
    add $I11, rx2296_pos, 1
    gt $I11, rx2296_eos, rx2296_fail
    sub $I11, rx2296_pos, rx2296_off
    ord $I11, rx2296_tgt, $I11
    ne $I11, 126, rx2296_fail
    add rx2296_pos, 1
    set_addr $I10, rxcap_2298_fail
    ($I12, $I11) = rx2296_cur."!mark_peek"($I10)
    rx2296_cur."!cursor_pos"($I11)
    ($P10) = rx2296_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2296_pos, "")
    rx2296_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2298_done
  rxcap_2298_fail:
    goto rx2296_fail
  rxcap_2298_done:
  # rx subrule "O" subtype=capture negate=
    rx2296_cur."!cursor_pos"(rx2296_pos)
    $P10 = rx2296_cur."O"("%symbolic_unary, :pirop<set S*>")
    unless $P10, rx2296_fail
    rx2296_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2296_pos = $P10."pos"()
  # rx pass
    rx2296_cur."!cursor_pass"(rx2296_pos, "prefix:sym<~>")
    if_null rx2296_debug, debug_1662
    rx2296_cur."!cursor_debug"("PASS", "prefix:sym<~>", " at pos=", rx2296_pos)
  debug_1662:
    .return (rx2296_cur)
  rx2296_restart:
    if_null rx2296_debug, debug_1663
    rx2296_cur."!cursor_debug"("NEXT", "prefix:sym<~>")
  debug_1663:
  rx2296_fail:
    (rx2296_rep, rx2296_pos, $I10, $P10) = rx2296_cur."!mark_fail"(0)
    lt rx2296_pos, -1, rx2296_done
    eq rx2296_pos, -1, rx2296_fail
    jump $I10
  rx2296_done:
    rx2296_cur."!cursor_fail"()
    if_null rx2296_debug, debug_1664
    rx2296_cur."!cursor_debug"("FAIL", "prefix:sym<~>")
  debug_1664:
    .return (rx2296_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<~>"  :subid("368_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1358
    $P104 = self."!PREFIX__!subrule"("O", "~")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<->"  :subid("369_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1359
    .local string rx2301_tgt
    .local int rx2301_pos
    .local int rx2301_off
    .local int rx2301_eos
    .local int rx2301_rep
    .local pmc rx2301_cur
    .local pmc rx2301_debug
    (rx2301_cur, rx2301_pos, rx2301_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2301_cur
    .local pmc match
    .lex "$/", match
    length rx2301_eos, rx2301_tgt
    gt rx2301_pos, rx2301_eos, rx2301_done
    set rx2301_off, 0
    lt rx2301_pos, 2, rx2301_start
    sub rx2301_off, rx2301_pos, 1
    substr rx2301_tgt, rx2301_tgt, rx2301_off
  rx2301_start:
    eq $I10, 1, rx2301_restart
    if_null rx2301_debug, debug_1665
    rx2301_cur."!cursor_debug"("START", "prefix:sym<->")
  debug_1665:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2302_done
    goto rxscan2302_scan
  rxscan2302_loop:
    (rx2301_pos) = rx2301_cur."from"()
    inc rx2301_pos
    rx2301_cur."!cursor_from"(rx2301_pos)
    ge rx2301_pos, rx2301_eos, rxscan2302_done
  rxscan2302_scan:
    set_addr $I10, rxscan2302_loop
    rx2301_cur."!mark_push"(0, rx2301_pos, $I10)
  rxscan2302_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2303_fail
    rx2301_cur."!mark_push"(0, rx2301_pos, $I10)
  # rx literal  "-"
    add $I11, rx2301_pos, 1
    gt $I11, rx2301_eos, rx2301_fail
    sub $I11, rx2301_pos, rx2301_off
    ord $I11, rx2301_tgt, $I11
    ne $I11, 45, rx2301_fail
    add rx2301_pos, 1
    set_addr $I10, rxcap_2303_fail
    ($I12, $I11) = rx2301_cur."!mark_peek"($I10)
    rx2301_cur."!cursor_pos"($I11)
    ($P10) = rx2301_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2301_pos, "")
    rx2301_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2303_done
  rxcap_2303_fail:
    goto rx2301_fail
  rxcap_2303_done:
  # rx enumcharlist negate=1 zerowidth
    sub $I10, rx2301_pos, rx2301_off
    substr $S10, rx2301_tgt, $I10, 1
    index $I11, ">", $S10
    ge $I11, 0, rx2301_fail
  # rx subrule "number" subtype=zerowidth negate=1
    rx2301_cur."!cursor_pos"(rx2301_pos)
    $P10 = rx2301_cur."number"()
    if $P10, rx2301_fail
  # rx subrule "O" subtype=capture negate=
    rx2301_cur."!cursor_pos"(rx2301_pos)
    $P10 = rx2301_cur."O"("%symbolic_unary, :pirop<neg>")
    unless $P10, rx2301_fail
    rx2301_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2301_pos = $P10."pos"()
  # rx pass
    rx2301_cur."!cursor_pass"(rx2301_pos, "prefix:sym<->")
    if_null rx2301_debug, debug_1666
    rx2301_cur."!cursor_debug"("PASS", "prefix:sym<->", " at pos=", rx2301_pos)
  debug_1666:
    .return (rx2301_cur)
  rx2301_restart:
    if_null rx2301_debug, debug_1667
    rx2301_cur."!cursor_debug"("NEXT", "prefix:sym<->")
  debug_1667:
  rx2301_fail:
    (rx2301_rep, rx2301_pos, $I10, $P10) = rx2301_cur."!mark_fail"(0)
    lt rx2301_pos, -1, rx2301_done
    eq rx2301_pos, -1, rx2301_fail
    jump $I10
  rx2301_done:
    rx2301_cur."!cursor_fail"()
    if_null rx2301_debug, debug_1668
    rx2301_cur."!cursor_debug"("FAIL", "prefix:sym<->")
  debug_1668:
    .return (rx2301_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<->"  :subid("370_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1359
    new $P104, "ResizablePMCArray"
    push $P104, "-"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<?>"  :subid("371_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1360
    .local string rx2306_tgt
    .local int rx2306_pos
    .local int rx2306_off
    .local int rx2306_eos
    .local int rx2306_rep
    .local pmc rx2306_cur
    .local pmc rx2306_debug
    (rx2306_cur, rx2306_pos, rx2306_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2306_cur
    .local pmc match
    .lex "$/", match
    length rx2306_eos, rx2306_tgt
    gt rx2306_pos, rx2306_eos, rx2306_done
    set rx2306_off, 0
    lt rx2306_pos, 2, rx2306_start
    sub rx2306_off, rx2306_pos, 1
    substr rx2306_tgt, rx2306_tgt, rx2306_off
  rx2306_start:
    eq $I10, 1, rx2306_restart
    if_null rx2306_debug, debug_1669
    rx2306_cur."!cursor_debug"("START", "prefix:sym<?>")
  debug_1669:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2307_done
    goto rxscan2307_scan
  rxscan2307_loop:
    (rx2306_pos) = rx2306_cur."from"()
    inc rx2306_pos
    rx2306_cur."!cursor_from"(rx2306_pos)
    ge rx2306_pos, rx2306_eos, rxscan2307_done
  rxscan2307_scan:
    set_addr $I10, rxscan2307_loop
    rx2306_cur."!mark_push"(0, rx2306_pos, $I10)
  rxscan2307_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2308_fail
    rx2306_cur."!mark_push"(0, rx2306_pos, $I10)
  # rx literal  "?"
    add $I11, rx2306_pos, 1
    gt $I11, rx2306_eos, rx2306_fail
    sub $I11, rx2306_pos, rx2306_off
    ord $I11, rx2306_tgt, $I11
    ne $I11, 63, rx2306_fail
    add rx2306_pos, 1
    set_addr $I10, rxcap_2308_fail
    ($I12, $I11) = rx2306_cur."!mark_peek"($I10)
    rx2306_cur."!cursor_pos"($I11)
    ($P10) = rx2306_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2306_pos, "")
    rx2306_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2308_done
  rxcap_2308_fail:
    goto rx2306_fail
  rxcap_2308_done:
  # rx subrule "O" subtype=capture negate=
    rx2306_cur."!cursor_pos"(rx2306_pos)
    $P10 = rx2306_cur."O"("%symbolic_unary, :pirop<istrue>")
    unless $P10, rx2306_fail
    rx2306_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2306_pos = $P10."pos"()
  # rx pass
    rx2306_cur."!cursor_pass"(rx2306_pos, "prefix:sym<?>")
    if_null rx2306_debug, debug_1670
    rx2306_cur."!cursor_debug"("PASS", "prefix:sym<?>", " at pos=", rx2306_pos)
  debug_1670:
    .return (rx2306_cur)
  rx2306_restart:
    if_null rx2306_debug, debug_1671
    rx2306_cur."!cursor_debug"("NEXT", "prefix:sym<?>")
  debug_1671:
  rx2306_fail:
    (rx2306_rep, rx2306_pos, $I10, $P10) = rx2306_cur."!mark_fail"(0)
    lt rx2306_pos, -1, rx2306_done
    eq rx2306_pos, -1, rx2306_fail
    jump $I10
  rx2306_done:
    rx2306_cur."!cursor_fail"()
    if_null rx2306_debug, debug_1672
    rx2306_cur."!cursor_debug"("FAIL", "prefix:sym<?>")
  debug_1672:
    .return (rx2306_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<?>"  :subid("372_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1360
    $P104 = self."!PREFIX__!subrule"("O", "?")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<!>"  :subid("373_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1361
    .local string rx2311_tgt
    .local int rx2311_pos
    .local int rx2311_off
    .local int rx2311_eos
    .local int rx2311_rep
    .local pmc rx2311_cur
    .local pmc rx2311_debug
    (rx2311_cur, rx2311_pos, rx2311_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2311_cur
    .local pmc match
    .lex "$/", match
    length rx2311_eos, rx2311_tgt
    gt rx2311_pos, rx2311_eos, rx2311_done
    set rx2311_off, 0
    lt rx2311_pos, 2, rx2311_start
    sub rx2311_off, rx2311_pos, 1
    substr rx2311_tgt, rx2311_tgt, rx2311_off
  rx2311_start:
    eq $I10, 1, rx2311_restart
    if_null rx2311_debug, debug_1673
    rx2311_cur."!cursor_debug"("START", "prefix:sym<!>")
  debug_1673:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2312_done
    goto rxscan2312_scan
  rxscan2312_loop:
    (rx2311_pos) = rx2311_cur."from"()
    inc rx2311_pos
    rx2311_cur."!cursor_from"(rx2311_pos)
    ge rx2311_pos, rx2311_eos, rxscan2312_done
  rxscan2312_scan:
    set_addr $I10, rxscan2312_loop
    rx2311_cur."!mark_push"(0, rx2311_pos, $I10)
  rxscan2312_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2313_fail
    rx2311_cur."!mark_push"(0, rx2311_pos, $I10)
  # rx literal  "!"
    add $I11, rx2311_pos, 1
    gt $I11, rx2311_eos, rx2311_fail
    sub $I11, rx2311_pos, rx2311_off
    ord $I11, rx2311_tgt, $I11
    ne $I11, 33, rx2311_fail
    add rx2311_pos, 1
    set_addr $I10, rxcap_2313_fail
    ($I12, $I11) = rx2311_cur."!mark_peek"($I10)
    rx2311_cur."!cursor_pos"($I11)
    ($P10) = rx2311_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2311_pos, "")
    rx2311_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2313_done
  rxcap_2313_fail:
    goto rx2311_fail
  rxcap_2313_done:
  # rx subrule "O" subtype=capture negate=
    rx2311_cur."!cursor_pos"(rx2311_pos)
    $P10 = rx2311_cur."O"("%symbolic_unary, :pirop<isfalse>")
    unless $P10, rx2311_fail
    rx2311_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2311_pos = $P10."pos"()
  # rx pass
    rx2311_cur."!cursor_pass"(rx2311_pos, "prefix:sym<!>")
    if_null rx2311_debug, debug_1674
    rx2311_cur."!cursor_debug"("PASS", "prefix:sym<!>", " at pos=", rx2311_pos)
  debug_1674:
    .return (rx2311_cur)
  rx2311_restart:
    if_null rx2311_debug, debug_1675
    rx2311_cur."!cursor_debug"("NEXT", "prefix:sym<!>")
  debug_1675:
  rx2311_fail:
    (rx2311_rep, rx2311_pos, $I10, $P10) = rx2311_cur."!mark_fail"(0)
    lt rx2311_pos, -1, rx2311_done
    eq rx2311_pos, -1, rx2311_fail
    jump $I10
  rx2311_done:
    rx2311_cur."!cursor_fail"()
    if_null rx2311_debug, debug_1676
    rx2311_cur."!cursor_debug"("FAIL", "prefix:sym<!>")
  debug_1676:
    .return (rx2311_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<!>"  :subid("374_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1361
    $P104 = self."!PREFIX__!subrule"("O", "!")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<|>"  :subid("375_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1362
    .local string rx2316_tgt
    .local int rx2316_pos
    .local int rx2316_off
    .local int rx2316_eos
    .local int rx2316_rep
    .local pmc rx2316_cur
    .local pmc rx2316_debug
    (rx2316_cur, rx2316_pos, rx2316_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2316_cur
    .local pmc match
    .lex "$/", match
    length rx2316_eos, rx2316_tgt
    gt rx2316_pos, rx2316_eos, rx2316_done
    set rx2316_off, 0
    lt rx2316_pos, 2, rx2316_start
    sub rx2316_off, rx2316_pos, 1
    substr rx2316_tgt, rx2316_tgt, rx2316_off
  rx2316_start:
    eq $I10, 1, rx2316_restart
    if_null rx2316_debug, debug_1677
    rx2316_cur."!cursor_debug"("START", "prefix:sym<|>")
  debug_1677:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2317_done
    goto rxscan2317_scan
  rxscan2317_loop:
    (rx2316_pos) = rx2316_cur."from"()
    inc rx2316_pos
    rx2316_cur."!cursor_from"(rx2316_pos)
    ge rx2316_pos, rx2316_eos, rxscan2317_done
  rxscan2317_scan:
    set_addr $I10, rxscan2317_loop
    rx2316_cur."!mark_push"(0, rx2316_pos, $I10)
  rxscan2317_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2318_fail
    rx2316_cur."!mark_push"(0, rx2316_pos, $I10)
  # rx literal  "|"
    add $I11, rx2316_pos, 1
    gt $I11, rx2316_eos, rx2316_fail
    sub $I11, rx2316_pos, rx2316_off
    ord $I11, rx2316_tgt, $I11
    ne $I11, 124, rx2316_fail
    add rx2316_pos, 1
    set_addr $I10, rxcap_2318_fail
    ($I12, $I11) = rx2316_cur."!mark_peek"($I10)
    rx2316_cur."!cursor_pos"($I11)
    ($P10) = rx2316_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2316_pos, "")
    rx2316_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2318_done
  rxcap_2318_fail:
    goto rx2316_fail
  rxcap_2318_done:
  # rx subrule "O" subtype=capture negate=
    rx2316_cur."!cursor_pos"(rx2316_pos)
    $P10 = rx2316_cur."O"("%symbolic_unary")
    unless $P10, rx2316_fail
    rx2316_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2316_pos = $P10."pos"()
  # rx pass
    rx2316_cur."!cursor_pass"(rx2316_pos, "prefix:sym<|>")
    if_null rx2316_debug, debug_1678
    rx2316_cur."!cursor_debug"("PASS", "prefix:sym<|>", " at pos=", rx2316_pos)
  debug_1678:
    .return (rx2316_cur)
  rx2316_restart:
    if_null rx2316_debug, debug_1679
    rx2316_cur."!cursor_debug"("NEXT", "prefix:sym<|>")
  debug_1679:
  rx2316_fail:
    (rx2316_rep, rx2316_pos, $I10, $P10) = rx2316_cur."!mark_fail"(0)
    lt rx2316_pos, -1, rx2316_done
    eq rx2316_pos, -1, rx2316_fail
    jump $I10
  rx2316_done:
    rx2316_cur."!cursor_fail"()
    if_null rx2316_debug, debug_1680
    rx2316_cur."!cursor_debug"("FAIL", "prefix:sym<|>")
  debug_1680:
    .return (rx2316_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<|>"  :subid("376_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1362
    $P104 = self."!PREFIX__!subrule"("O", "|")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<*>"  :subid("377_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1364
    .local string rx2321_tgt
    .local int rx2321_pos
    .local int rx2321_off
    .local int rx2321_eos
    .local int rx2321_rep
    .local pmc rx2321_cur
    .local pmc rx2321_debug
    (rx2321_cur, rx2321_pos, rx2321_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2321_cur
    .local pmc match
    .lex "$/", match
    length rx2321_eos, rx2321_tgt
    gt rx2321_pos, rx2321_eos, rx2321_done
    set rx2321_off, 0
    lt rx2321_pos, 2, rx2321_start
    sub rx2321_off, rx2321_pos, 1
    substr rx2321_tgt, rx2321_tgt, rx2321_off
  rx2321_start:
    eq $I10, 1, rx2321_restart
    if_null rx2321_debug, debug_1681
    rx2321_cur."!cursor_debug"("START", "infix:sym<*>")
  debug_1681:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2322_done
    goto rxscan2322_scan
  rxscan2322_loop:
    (rx2321_pos) = rx2321_cur."from"()
    inc rx2321_pos
    rx2321_cur."!cursor_from"(rx2321_pos)
    ge rx2321_pos, rx2321_eos, rxscan2322_done
  rxscan2322_scan:
    set_addr $I10, rxscan2322_loop
    rx2321_cur."!mark_push"(0, rx2321_pos, $I10)
  rxscan2322_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2323_fail
    rx2321_cur."!mark_push"(0, rx2321_pos, $I10)
  # rx literal  "*"
    add $I11, rx2321_pos, 1
    gt $I11, rx2321_eos, rx2321_fail
    sub $I11, rx2321_pos, rx2321_off
    ord $I11, rx2321_tgt, $I11
    ne $I11, 42, rx2321_fail
    add rx2321_pos, 1
    set_addr $I10, rxcap_2323_fail
    ($I12, $I11) = rx2321_cur."!mark_peek"($I10)
    rx2321_cur."!cursor_pos"($I11)
    ($P10) = rx2321_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2321_pos, "")
    rx2321_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2323_done
  rxcap_2323_fail:
    goto rx2321_fail
  rxcap_2323_done:
  # rx subrule "O" subtype=capture negate=
    rx2321_cur."!cursor_pos"(rx2321_pos)
    $P10 = rx2321_cur."O"("%multiplicative, :pirop<mul>")
    unless $P10, rx2321_fail
    rx2321_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2321_pos = $P10."pos"()
  # rx pass
    rx2321_cur."!cursor_pass"(rx2321_pos, "infix:sym<*>")
    if_null rx2321_debug, debug_1682
    rx2321_cur."!cursor_debug"("PASS", "infix:sym<*>", " at pos=", rx2321_pos)
  debug_1682:
    .return (rx2321_cur)
  rx2321_restart:
    if_null rx2321_debug, debug_1683
    rx2321_cur."!cursor_debug"("NEXT", "infix:sym<*>")
  debug_1683:
  rx2321_fail:
    (rx2321_rep, rx2321_pos, $I10, $P10) = rx2321_cur."!mark_fail"(0)
    lt rx2321_pos, -1, rx2321_done
    eq rx2321_pos, -1, rx2321_fail
    jump $I10
  rx2321_done:
    rx2321_cur."!cursor_fail"()
    if_null rx2321_debug, debug_1684
    rx2321_cur."!cursor_debug"("FAIL", "infix:sym<*>")
  debug_1684:
    .return (rx2321_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<*>"  :subid("378_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1364
    $P104 = self."!PREFIX__!subrule"("O", "*")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym</>"  :subid("379_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1365
    .local string rx2326_tgt
    .local int rx2326_pos
    .local int rx2326_off
    .local int rx2326_eos
    .local int rx2326_rep
    .local pmc rx2326_cur
    .local pmc rx2326_debug
    (rx2326_cur, rx2326_pos, rx2326_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2326_cur
    .local pmc match
    .lex "$/", match
    length rx2326_eos, rx2326_tgt
    gt rx2326_pos, rx2326_eos, rx2326_done
    set rx2326_off, 0
    lt rx2326_pos, 2, rx2326_start
    sub rx2326_off, rx2326_pos, 1
    substr rx2326_tgt, rx2326_tgt, rx2326_off
  rx2326_start:
    eq $I10, 1, rx2326_restart
    if_null rx2326_debug, debug_1685
    rx2326_cur."!cursor_debug"("START", "infix:sym</>")
  debug_1685:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2327_done
    goto rxscan2327_scan
  rxscan2327_loop:
    (rx2326_pos) = rx2326_cur."from"()
    inc rx2326_pos
    rx2326_cur."!cursor_from"(rx2326_pos)
    ge rx2326_pos, rx2326_eos, rxscan2327_done
  rxscan2327_scan:
    set_addr $I10, rxscan2327_loop
    rx2326_cur."!mark_push"(0, rx2326_pos, $I10)
  rxscan2327_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2328_fail
    rx2326_cur."!mark_push"(0, rx2326_pos, $I10)
  # rx literal  "/"
    add $I11, rx2326_pos, 1
    gt $I11, rx2326_eos, rx2326_fail
    sub $I11, rx2326_pos, rx2326_off
    ord $I11, rx2326_tgt, $I11
    ne $I11, 47, rx2326_fail
    add rx2326_pos, 1
    set_addr $I10, rxcap_2328_fail
    ($I12, $I11) = rx2326_cur."!mark_peek"($I10)
    rx2326_cur."!cursor_pos"($I11)
    ($P10) = rx2326_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2326_pos, "")
    rx2326_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2328_done
  rxcap_2328_fail:
    goto rx2326_fail
  rxcap_2328_done:
  # rx subrule "O" subtype=capture negate=
    rx2326_cur."!cursor_pos"(rx2326_pos)
    $P10 = rx2326_cur."O"("%multiplicative, :pirop<div>")
    unless $P10, rx2326_fail
    rx2326_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2326_pos = $P10."pos"()
  # rx pass
    rx2326_cur."!cursor_pass"(rx2326_pos, "infix:sym</>")
    if_null rx2326_debug, debug_1686
    rx2326_cur."!cursor_debug"("PASS", "infix:sym</>", " at pos=", rx2326_pos)
  debug_1686:
    .return (rx2326_cur)
  rx2326_restart:
    if_null rx2326_debug, debug_1687
    rx2326_cur."!cursor_debug"("NEXT", "infix:sym</>")
  debug_1687:
  rx2326_fail:
    (rx2326_rep, rx2326_pos, $I10, $P10) = rx2326_cur."!mark_fail"(0)
    lt rx2326_pos, -1, rx2326_done
    eq rx2326_pos, -1, rx2326_fail
    jump $I10
  rx2326_done:
    rx2326_cur."!cursor_fail"()
    if_null rx2326_debug, debug_1688
    rx2326_cur."!cursor_debug"("FAIL", "infix:sym</>")
  debug_1688:
    .return (rx2326_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym</>"  :subid("380_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1365
    $P104 = self."!PREFIX__!subrule"("O", "/")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<%>"  :subid("381_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1366
    .local string rx2331_tgt
    .local int rx2331_pos
    .local int rx2331_off
    .local int rx2331_eos
    .local int rx2331_rep
    .local pmc rx2331_cur
    .local pmc rx2331_debug
    (rx2331_cur, rx2331_pos, rx2331_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2331_cur
    .local pmc match
    .lex "$/", match
    length rx2331_eos, rx2331_tgt
    gt rx2331_pos, rx2331_eos, rx2331_done
    set rx2331_off, 0
    lt rx2331_pos, 2, rx2331_start
    sub rx2331_off, rx2331_pos, 1
    substr rx2331_tgt, rx2331_tgt, rx2331_off
  rx2331_start:
    eq $I10, 1, rx2331_restart
    if_null rx2331_debug, debug_1689
    rx2331_cur."!cursor_debug"("START", "infix:sym<%>")
  debug_1689:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2332_done
    goto rxscan2332_scan
  rxscan2332_loop:
    (rx2331_pos) = rx2331_cur."from"()
    inc rx2331_pos
    rx2331_cur."!cursor_from"(rx2331_pos)
    ge rx2331_pos, rx2331_eos, rxscan2332_done
  rxscan2332_scan:
    set_addr $I10, rxscan2332_loop
    rx2331_cur."!mark_push"(0, rx2331_pos, $I10)
  rxscan2332_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2333_fail
    rx2331_cur."!mark_push"(0, rx2331_pos, $I10)
  # rx literal  "%"
    add $I11, rx2331_pos, 1
    gt $I11, rx2331_eos, rx2331_fail
    sub $I11, rx2331_pos, rx2331_off
    ord $I11, rx2331_tgt, $I11
    ne $I11, 37, rx2331_fail
    add rx2331_pos, 1
    set_addr $I10, rxcap_2333_fail
    ($I12, $I11) = rx2331_cur."!mark_peek"($I10)
    rx2331_cur."!cursor_pos"($I11)
    ($P10) = rx2331_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2331_pos, "")
    rx2331_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2333_done
  rxcap_2333_fail:
    goto rx2331_fail
  rxcap_2333_done:
  # rx subrule "O" subtype=capture negate=
    rx2331_cur."!cursor_pos"(rx2331_pos)
    $P10 = rx2331_cur."O"("%multiplicative, :pirop<mod>")
    unless $P10, rx2331_fail
    rx2331_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2331_pos = $P10."pos"()
  # rx pass
    rx2331_cur."!cursor_pass"(rx2331_pos, "infix:sym<%>")
    if_null rx2331_debug, debug_1690
    rx2331_cur."!cursor_debug"("PASS", "infix:sym<%>", " at pos=", rx2331_pos)
  debug_1690:
    .return (rx2331_cur)
  rx2331_restart:
    if_null rx2331_debug, debug_1691
    rx2331_cur."!cursor_debug"("NEXT", "infix:sym<%>")
  debug_1691:
  rx2331_fail:
    (rx2331_rep, rx2331_pos, $I10, $P10) = rx2331_cur."!mark_fail"(0)
    lt rx2331_pos, -1, rx2331_done
    eq rx2331_pos, -1, rx2331_fail
    jump $I10
  rx2331_done:
    rx2331_cur."!cursor_fail"()
    if_null rx2331_debug, debug_1692
    rx2331_cur."!cursor_debug"("FAIL", "infix:sym<%>")
  debug_1692:
    .return (rx2331_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<%>"  :subid("382_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1366
    $P104 = self."!PREFIX__!subrule"("O", "%")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<+&>"  :subid("383_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1367
    .local string rx2336_tgt
    .local int rx2336_pos
    .local int rx2336_off
    .local int rx2336_eos
    .local int rx2336_rep
    .local pmc rx2336_cur
    .local pmc rx2336_debug
    (rx2336_cur, rx2336_pos, rx2336_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2336_cur
    .local pmc match
    .lex "$/", match
    length rx2336_eos, rx2336_tgt
    gt rx2336_pos, rx2336_eos, rx2336_done
    set rx2336_off, 0
    lt rx2336_pos, 2, rx2336_start
    sub rx2336_off, rx2336_pos, 1
    substr rx2336_tgt, rx2336_tgt, rx2336_off
  rx2336_start:
    eq $I10, 1, rx2336_restart
    if_null rx2336_debug, debug_1693
    rx2336_cur."!cursor_debug"("START", "infix:sym<+&>")
  debug_1693:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2337_done
    goto rxscan2337_scan
  rxscan2337_loop:
    (rx2336_pos) = rx2336_cur."from"()
    inc rx2336_pos
    rx2336_cur."!cursor_from"(rx2336_pos)
    ge rx2336_pos, rx2336_eos, rxscan2337_done
  rxscan2337_scan:
    set_addr $I10, rxscan2337_loop
    rx2336_cur."!mark_push"(0, rx2336_pos, $I10)
  rxscan2337_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2338_fail
    rx2336_cur."!mark_push"(0, rx2336_pos, $I10)
  # rx literal  "+&"
    add $I11, rx2336_pos, 2
    gt $I11, rx2336_eos, rx2336_fail
    sub $I11, rx2336_pos, rx2336_off
    substr $S10, rx2336_tgt, $I11, 2
    ne $S10, "+&", rx2336_fail
    add rx2336_pos, 2
    set_addr $I10, rxcap_2338_fail
    ($I12, $I11) = rx2336_cur."!mark_peek"($I10)
    rx2336_cur."!cursor_pos"($I11)
    ($P10) = rx2336_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2336_pos, "")
    rx2336_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2338_done
  rxcap_2338_fail:
    goto rx2336_fail
  rxcap_2338_done:
  # rx subrule "O" subtype=capture negate=
    rx2336_cur."!cursor_pos"(rx2336_pos)
    $P10 = rx2336_cur."O"("%multiplicative, :pirop<band III>")
    unless $P10, rx2336_fail
    rx2336_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2336_pos = $P10."pos"()
  # rx pass
    rx2336_cur."!cursor_pass"(rx2336_pos, "infix:sym<+&>")
    if_null rx2336_debug, debug_1694
    rx2336_cur."!cursor_debug"("PASS", "infix:sym<+&>", " at pos=", rx2336_pos)
  debug_1694:
    .return (rx2336_cur)
  rx2336_restart:
    if_null rx2336_debug, debug_1695
    rx2336_cur."!cursor_debug"("NEXT", "infix:sym<+&>")
  debug_1695:
  rx2336_fail:
    (rx2336_rep, rx2336_pos, $I10, $P10) = rx2336_cur."!mark_fail"(0)
    lt rx2336_pos, -1, rx2336_done
    eq rx2336_pos, -1, rx2336_fail
    jump $I10
  rx2336_done:
    rx2336_cur."!cursor_fail"()
    if_null rx2336_debug, debug_1696
    rx2336_cur."!cursor_debug"("FAIL", "infix:sym<+&>")
  debug_1696:
    .return (rx2336_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<+&>"  :subid("384_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1367
    $P104 = self."!PREFIX__!subrule"("O", "+&")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<+>"  :subid("385_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1369
    .local string rx2341_tgt
    .local int rx2341_pos
    .local int rx2341_off
    .local int rx2341_eos
    .local int rx2341_rep
    .local pmc rx2341_cur
    .local pmc rx2341_debug
    (rx2341_cur, rx2341_pos, rx2341_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2341_cur
    .local pmc match
    .lex "$/", match
    length rx2341_eos, rx2341_tgt
    gt rx2341_pos, rx2341_eos, rx2341_done
    set rx2341_off, 0
    lt rx2341_pos, 2, rx2341_start
    sub rx2341_off, rx2341_pos, 1
    substr rx2341_tgt, rx2341_tgt, rx2341_off
  rx2341_start:
    eq $I10, 1, rx2341_restart
    if_null rx2341_debug, debug_1697
    rx2341_cur."!cursor_debug"("START", "infix:sym<+>")
  debug_1697:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2342_done
    goto rxscan2342_scan
  rxscan2342_loop:
    (rx2341_pos) = rx2341_cur."from"()
    inc rx2341_pos
    rx2341_cur."!cursor_from"(rx2341_pos)
    ge rx2341_pos, rx2341_eos, rxscan2342_done
  rxscan2342_scan:
    set_addr $I10, rxscan2342_loop
    rx2341_cur."!mark_push"(0, rx2341_pos, $I10)
  rxscan2342_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2343_fail
    rx2341_cur."!mark_push"(0, rx2341_pos, $I10)
  # rx literal  "+"
    add $I11, rx2341_pos, 1
    gt $I11, rx2341_eos, rx2341_fail
    sub $I11, rx2341_pos, rx2341_off
    ord $I11, rx2341_tgt, $I11
    ne $I11, 43, rx2341_fail
    add rx2341_pos, 1
    set_addr $I10, rxcap_2343_fail
    ($I12, $I11) = rx2341_cur."!mark_peek"($I10)
    rx2341_cur."!cursor_pos"($I11)
    ($P10) = rx2341_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2341_pos, "")
    rx2341_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2343_done
  rxcap_2343_fail:
    goto rx2341_fail
  rxcap_2343_done:
  # rx subrule "O" subtype=capture negate=
    rx2341_cur."!cursor_pos"(rx2341_pos)
    $P10 = rx2341_cur."O"("%additive, :pirop<add>")
    unless $P10, rx2341_fail
    rx2341_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2341_pos = $P10."pos"()
  # rx pass
    rx2341_cur."!cursor_pass"(rx2341_pos, "infix:sym<+>")
    if_null rx2341_debug, debug_1698
    rx2341_cur."!cursor_debug"("PASS", "infix:sym<+>", " at pos=", rx2341_pos)
  debug_1698:
    .return (rx2341_cur)
  rx2341_restart:
    if_null rx2341_debug, debug_1699
    rx2341_cur."!cursor_debug"("NEXT", "infix:sym<+>")
  debug_1699:
  rx2341_fail:
    (rx2341_rep, rx2341_pos, $I10, $P10) = rx2341_cur."!mark_fail"(0)
    lt rx2341_pos, -1, rx2341_done
    eq rx2341_pos, -1, rx2341_fail
    jump $I10
  rx2341_done:
    rx2341_cur."!cursor_fail"()
    if_null rx2341_debug, debug_1700
    rx2341_cur."!cursor_debug"("FAIL", "infix:sym<+>")
  debug_1700:
    .return (rx2341_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<+>"  :subid("386_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1369
    $P104 = self."!PREFIX__!subrule"("O", "+")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<->"  :subid("387_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1370
    .local string rx2346_tgt
    .local int rx2346_pos
    .local int rx2346_off
    .local int rx2346_eos
    .local int rx2346_rep
    .local pmc rx2346_cur
    .local pmc rx2346_debug
    (rx2346_cur, rx2346_pos, rx2346_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2346_cur
    .local pmc match
    .lex "$/", match
    length rx2346_eos, rx2346_tgt
    gt rx2346_pos, rx2346_eos, rx2346_done
    set rx2346_off, 0
    lt rx2346_pos, 2, rx2346_start
    sub rx2346_off, rx2346_pos, 1
    substr rx2346_tgt, rx2346_tgt, rx2346_off
  rx2346_start:
    eq $I10, 1, rx2346_restart
    if_null rx2346_debug, debug_1701
    rx2346_cur."!cursor_debug"("START", "infix:sym<->")
  debug_1701:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2347_done
    goto rxscan2347_scan
  rxscan2347_loop:
    (rx2346_pos) = rx2346_cur."from"()
    inc rx2346_pos
    rx2346_cur."!cursor_from"(rx2346_pos)
    ge rx2346_pos, rx2346_eos, rxscan2347_done
  rxscan2347_scan:
    set_addr $I10, rxscan2347_loop
    rx2346_cur."!mark_push"(0, rx2346_pos, $I10)
  rxscan2347_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2348_fail
    rx2346_cur."!mark_push"(0, rx2346_pos, $I10)
  # rx literal  "-"
    add $I11, rx2346_pos, 1
    gt $I11, rx2346_eos, rx2346_fail
    sub $I11, rx2346_pos, rx2346_off
    ord $I11, rx2346_tgt, $I11
    ne $I11, 45, rx2346_fail
    add rx2346_pos, 1
    set_addr $I10, rxcap_2348_fail
    ($I12, $I11) = rx2346_cur."!mark_peek"($I10)
    rx2346_cur."!cursor_pos"($I11)
    ($P10) = rx2346_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2346_pos, "")
    rx2346_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2348_done
  rxcap_2348_fail:
    goto rx2346_fail
  rxcap_2348_done:
  # rx subrule "O" subtype=capture negate=
    rx2346_cur."!cursor_pos"(rx2346_pos)
    $P10 = rx2346_cur."O"("%additive, :pirop<sub>")
    unless $P10, rx2346_fail
    rx2346_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2346_pos = $P10."pos"()
  # rx pass
    rx2346_cur."!cursor_pass"(rx2346_pos, "infix:sym<->")
    if_null rx2346_debug, debug_1702
    rx2346_cur."!cursor_debug"("PASS", "infix:sym<->", " at pos=", rx2346_pos)
  debug_1702:
    .return (rx2346_cur)
  rx2346_restart:
    if_null rx2346_debug, debug_1703
    rx2346_cur."!cursor_debug"("NEXT", "infix:sym<->")
  debug_1703:
  rx2346_fail:
    (rx2346_rep, rx2346_pos, $I10, $P10) = rx2346_cur."!mark_fail"(0)
    lt rx2346_pos, -1, rx2346_done
    eq rx2346_pos, -1, rx2346_fail
    jump $I10
  rx2346_done:
    rx2346_cur."!cursor_fail"()
    if_null rx2346_debug, debug_1704
    rx2346_cur."!cursor_debug"("FAIL", "infix:sym<->")
  debug_1704:
    .return (rx2346_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<->"  :subid("388_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1370
    $P104 = self."!PREFIX__!subrule"("O", "-")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<+|>"  :subid("389_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1371
    .local string rx2351_tgt
    .local int rx2351_pos
    .local int rx2351_off
    .local int rx2351_eos
    .local int rx2351_rep
    .local pmc rx2351_cur
    .local pmc rx2351_debug
    (rx2351_cur, rx2351_pos, rx2351_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2351_cur
    .local pmc match
    .lex "$/", match
    length rx2351_eos, rx2351_tgt
    gt rx2351_pos, rx2351_eos, rx2351_done
    set rx2351_off, 0
    lt rx2351_pos, 2, rx2351_start
    sub rx2351_off, rx2351_pos, 1
    substr rx2351_tgt, rx2351_tgt, rx2351_off
  rx2351_start:
    eq $I10, 1, rx2351_restart
    if_null rx2351_debug, debug_1705
    rx2351_cur."!cursor_debug"("START", "infix:sym<+|>")
  debug_1705:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2352_done
    goto rxscan2352_scan
  rxscan2352_loop:
    (rx2351_pos) = rx2351_cur."from"()
    inc rx2351_pos
    rx2351_cur."!cursor_from"(rx2351_pos)
    ge rx2351_pos, rx2351_eos, rxscan2352_done
  rxscan2352_scan:
    set_addr $I10, rxscan2352_loop
    rx2351_cur."!mark_push"(0, rx2351_pos, $I10)
  rxscan2352_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2353_fail
    rx2351_cur."!mark_push"(0, rx2351_pos, $I10)
  # rx literal  "+|"
    add $I11, rx2351_pos, 2
    gt $I11, rx2351_eos, rx2351_fail
    sub $I11, rx2351_pos, rx2351_off
    substr $S10, rx2351_tgt, $I11, 2
    ne $S10, "+|", rx2351_fail
    add rx2351_pos, 2
    set_addr $I10, rxcap_2353_fail
    ($I12, $I11) = rx2351_cur."!mark_peek"($I10)
    rx2351_cur."!cursor_pos"($I11)
    ($P10) = rx2351_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2351_pos, "")
    rx2351_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2353_done
  rxcap_2353_fail:
    goto rx2351_fail
  rxcap_2353_done:
  # rx subrule "O" subtype=capture negate=
    rx2351_cur."!cursor_pos"(rx2351_pos)
    $P10 = rx2351_cur."O"("%additive, :pirop<bor III>")
    unless $P10, rx2351_fail
    rx2351_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2351_pos = $P10."pos"()
  # rx pass
    rx2351_cur."!cursor_pass"(rx2351_pos, "infix:sym<+|>")
    if_null rx2351_debug, debug_1706
    rx2351_cur."!cursor_debug"("PASS", "infix:sym<+|>", " at pos=", rx2351_pos)
  debug_1706:
    .return (rx2351_cur)
  rx2351_restart:
    if_null rx2351_debug, debug_1707
    rx2351_cur."!cursor_debug"("NEXT", "infix:sym<+|>")
  debug_1707:
  rx2351_fail:
    (rx2351_rep, rx2351_pos, $I10, $P10) = rx2351_cur."!mark_fail"(0)
    lt rx2351_pos, -1, rx2351_done
    eq rx2351_pos, -1, rx2351_fail
    jump $I10
  rx2351_done:
    rx2351_cur."!cursor_fail"()
    if_null rx2351_debug, debug_1708
    rx2351_cur."!cursor_debug"("FAIL", "infix:sym<+|>")
  debug_1708:
    .return (rx2351_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<+|>"  :subid("390_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1371
    $P104 = self."!PREFIX__!subrule"("O", "+|")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<+^>"  :subid("391_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1372
    .local string rx2356_tgt
    .local int rx2356_pos
    .local int rx2356_off
    .local int rx2356_eos
    .local int rx2356_rep
    .local pmc rx2356_cur
    .local pmc rx2356_debug
    (rx2356_cur, rx2356_pos, rx2356_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2356_cur
    .local pmc match
    .lex "$/", match
    length rx2356_eos, rx2356_tgt
    gt rx2356_pos, rx2356_eos, rx2356_done
    set rx2356_off, 0
    lt rx2356_pos, 2, rx2356_start
    sub rx2356_off, rx2356_pos, 1
    substr rx2356_tgt, rx2356_tgt, rx2356_off
  rx2356_start:
    eq $I10, 1, rx2356_restart
    if_null rx2356_debug, debug_1709
    rx2356_cur."!cursor_debug"("START", "infix:sym<+^>")
  debug_1709:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2357_done
    goto rxscan2357_scan
  rxscan2357_loop:
    (rx2356_pos) = rx2356_cur."from"()
    inc rx2356_pos
    rx2356_cur."!cursor_from"(rx2356_pos)
    ge rx2356_pos, rx2356_eos, rxscan2357_done
  rxscan2357_scan:
    set_addr $I10, rxscan2357_loop
    rx2356_cur."!mark_push"(0, rx2356_pos, $I10)
  rxscan2357_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2358_fail
    rx2356_cur."!mark_push"(0, rx2356_pos, $I10)
  # rx literal  "+^"
    add $I11, rx2356_pos, 2
    gt $I11, rx2356_eos, rx2356_fail
    sub $I11, rx2356_pos, rx2356_off
    substr $S10, rx2356_tgt, $I11, 2
    ne $S10, "+^", rx2356_fail
    add rx2356_pos, 2
    set_addr $I10, rxcap_2358_fail
    ($I12, $I11) = rx2356_cur."!mark_peek"($I10)
    rx2356_cur."!cursor_pos"($I11)
    ($P10) = rx2356_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2356_pos, "")
    rx2356_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2358_done
  rxcap_2358_fail:
    goto rx2356_fail
  rxcap_2358_done:
  # rx subrule "O" subtype=capture negate=
    rx2356_cur."!cursor_pos"(rx2356_pos)
    $P10 = rx2356_cur."O"("%additive, :pirop<bxor III>")
    unless $P10, rx2356_fail
    rx2356_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2356_pos = $P10."pos"()
  # rx pass
    rx2356_cur."!cursor_pass"(rx2356_pos, "infix:sym<+^>")
    if_null rx2356_debug, debug_1710
    rx2356_cur."!cursor_debug"("PASS", "infix:sym<+^>", " at pos=", rx2356_pos)
  debug_1710:
    .return (rx2356_cur)
  rx2356_restart:
    if_null rx2356_debug, debug_1711
    rx2356_cur."!cursor_debug"("NEXT", "infix:sym<+^>")
  debug_1711:
  rx2356_fail:
    (rx2356_rep, rx2356_pos, $I10, $P10) = rx2356_cur."!mark_fail"(0)
    lt rx2356_pos, -1, rx2356_done
    eq rx2356_pos, -1, rx2356_fail
    jump $I10
  rx2356_done:
    rx2356_cur."!cursor_fail"()
    if_null rx2356_debug, debug_1712
    rx2356_cur."!cursor_debug"("FAIL", "infix:sym<+^>")
  debug_1712:
    .return (rx2356_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<+^>"  :subid("392_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1372
    $P104 = self."!PREFIX__!subrule"("O", "+^")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<~>"  :subid("393_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1374
    .local string rx2361_tgt
    .local int rx2361_pos
    .local int rx2361_off
    .local int rx2361_eos
    .local int rx2361_rep
    .local pmc rx2361_cur
    .local pmc rx2361_debug
    (rx2361_cur, rx2361_pos, rx2361_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2361_cur
    .local pmc match
    .lex "$/", match
    length rx2361_eos, rx2361_tgt
    gt rx2361_pos, rx2361_eos, rx2361_done
    set rx2361_off, 0
    lt rx2361_pos, 2, rx2361_start
    sub rx2361_off, rx2361_pos, 1
    substr rx2361_tgt, rx2361_tgt, rx2361_off
  rx2361_start:
    eq $I10, 1, rx2361_restart
    if_null rx2361_debug, debug_1713
    rx2361_cur."!cursor_debug"("START", "infix:sym<~>")
  debug_1713:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2362_done
    goto rxscan2362_scan
  rxscan2362_loop:
    (rx2361_pos) = rx2361_cur."from"()
    inc rx2361_pos
    rx2361_cur."!cursor_from"(rx2361_pos)
    ge rx2361_pos, rx2361_eos, rxscan2362_done
  rxscan2362_scan:
    set_addr $I10, rxscan2362_loop
    rx2361_cur."!mark_push"(0, rx2361_pos, $I10)
  rxscan2362_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2363_fail
    rx2361_cur."!mark_push"(0, rx2361_pos, $I10)
  # rx literal  "~"
    add $I11, rx2361_pos, 1
    gt $I11, rx2361_eos, rx2361_fail
    sub $I11, rx2361_pos, rx2361_off
    ord $I11, rx2361_tgt, $I11
    ne $I11, 126, rx2361_fail
    add rx2361_pos, 1
    set_addr $I10, rxcap_2363_fail
    ($I12, $I11) = rx2361_cur."!mark_peek"($I10)
    rx2361_cur."!cursor_pos"($I11)
    ($P10) = rx2361_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2361_pos, "")
    rx2361_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2363_done
  rxcap_2363_fail:
    goto rx2361_fail
  rxcap_2363_done:
  # rx subrule "O" subtype=capture negate=
    rx2361_cur."!cursor_pos"(rx2361_pos)
    $P10 = rx2361_cur."O"("%concatenation , :pirop<concat>")
    unless $P10, rx2361_fail
    rx2361_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2361_pos = $P10."pos"()
  # rx pass
    rx2361_cur."!cursor_pass"(rx2361_pos, "infix:sym<~>")
    if_null rx2361_debug, debug_1714
    rx2361_cur."!cursor_debug"("PASS", "infix:sym<~>", " at pos=", rx2361_pos)
  debug_1714:
    .return (rx2361_cur)
  rx2361_restart:
    if_null rx2361_debug, debug_1715
    rx2361_cur."!cursor_debug"("NEXT", "infix:sym<~>")
  debug_1715:
  rx2361_fail:
    (rx2361_rep, rx2361_pos, $I10, $P10) = rx2361_cur."!mark_fail"(0)
    lt rx2361_pos, -1, rx2361_done
    eq rx2361_pos, -1, rx2361_fail
    jump $I10
  rx2361_done:
    rx2361_cur."!cursor_fail"()
    if_null rx2361_debug, debug_1716
    rx2361_cur."!cursor_debug"("FAIL", "infix:sym<~>")
  debug_1716:
    .return (rx2361_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<~>"  :subid("394_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1374
    $P104 = self."!PREFIX__!subrule"("O", "~")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<==>"  :subid("395_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1376
    .local string rx2366_tgt
    .local int rx2366_pos
    .local int rx2366_off
    .local int rx2366_eos
    .local int rx2366_rep
    .local pmc rx2366_cur
    .local pmc rx2366_debug
    (rx2366_cur, rx2366_pos, rx2366_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2366_cur
    .local pmc match
    .lex "$/", match
    length rx2366_eos, rx2366_tgt
    gt rx2366_pos, rx2366_eos, rx2366_done
    set rx2366_off, 0
    lt rx2366_pos, 2, rx2366_start
    sub rx2366_off, rx2366_pos, 1
    substr rx2366_tgt, rx2366_tgt, rx2366_off
  rx2366_start:
    eq $I10, 1, rx2366_restart
    if_null rx2366_debug, debug_1717
    rx2366_cur."!cursor_debug"("START", "infix:sym<==>")
  debug_1717:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2367_done
    goto rxscan2367_scan
  rxscan2367_loop:
    (rx2366_pos) = rx2366_cur."from"()
    inc rx2366_pos
    rx2366_cur."!cursor_from"(rx2366_pos)
    ge rx2366_pos, rx2366_eos, rxscan2367_done
  rxscan2367_scan:
    set_addr $I10, rxscan2367_loop
    rx2366_cur."!mark_push"(0, rx2366_pos, $I10)
  rxscan2367_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2368_fail
    rx2366_cur."!mark_push"(0, rx2366_pos, $I10)
  # rx literal  "=="
    add $I11, rx2366_pos, 2
    gt $I11, rx2366_eos, rx2366_fail
    sub $I11, rx2366_pos, rx2366_off
    substr $S10, rx2366_tgt, $I11, 2
    ne $S10, "==", rx2366_fail
    add rx2366_pos, 2
    set_addr $I10, rxcap_2368_fail
    ($I12, $I11) = rx2366_cur."!mark_peek"($I10)
    rx2366_cur."!cursor_pos"($I11)
    ($P10) = rx2366_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2366_pos, "")
    rx2366_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2368_done
  rxcap_2368_fail:
    goto rx2366_fail
  rxcap_2368_done:
  # rx subrule "O" subtype=capture negate=
    rx2366_cur."!cursor_pos"(rx2366_pos)
    $P10 = rx2366_cur."O"("%relational, :pirop<iseq INn>")
    unless $P10, rx2366_fail
    rx2366_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2366_pos = $P10."pos"()
  # rx pass
    rx2366_cur."!cursor_pass"(rx2366_pos, "infix:sym<==>")
    if_null rx2366_debug, debug_1718
    rx2366_cur."!cursor_debug"("PASS", "infix:sym<==>", " at pos=", rx2366_pos)
  debug_1718:
    .return (rx2366_cur)
  rx2366_restart:
    if_null rx2366_debug, debug_1719
    rx2366_cur."!cursor_debug"("NEXT", "infix:sym<==>")
  debug_1719:
  rx2366_fail:
    (rx2366_rep, rx2366_pos, $I10, $P10) = rx2366_cur."!mark_fail"(0)
    lt rx2366_pos, -1, rx2366_done
    eq rx2366_pos, -1, rx2366_fail
    jump $I10
  rx2366_done:
    rx2366_cur."!cursor_fail"()
    if_null rx2366_debug, debug_1720
    rx2366_cur."!cursor_debug"("FAIL", "infix:sym<==>")
  debug_1720:
    .return (rx2366_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<==>"  :subid("396_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1376
    $P104 = self."!PREFIX__!subrule"("O", "==")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<!=>"  :subid("397_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1377
    .local string rx2371_tgt
    .local int rx2371_pos
    .local int rx2371_off
    .local int rx2371_eos
    .local int rx2371_rep
    .local pmc rx2371_cur
    .local pmc rx2371_debug
    (rx2371_cur, rx2371_pos, rx2371_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2371_cur
    .local pmc match
    .lex "$/", match
    length rx2371_eos, rx2371_tgt
    gt rx2371_pos, rx2371_eos, rx2371_done
    set rx2371_off, 0
    lt rx2371_pos, 2, rx2371_start
    sub rx2371_off, rx2371_pos, 1
    substr rx2371_tgt, rx2371_tgt, rx2371_off
  rx2371_start:
    eq $I10, 1, rx2371_restart
    if_null rx2371_debug, debug_1721
    rx2371_cur."!cursor_debug"("START", "infix:sym<!=>")
  debug_1721:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2372_done
    goto rxscan2372_scan
  rxscan2372_loop:
    (rx2371_pos) = rx2371_cur."from"()
    inc rx2371_pos
    rx2371_cur."!cursor_from"(rx2371_pos)
    ge rx2371_pos, rx2371_eos, rxscan2372_done
  rxscan2372_scan:
    set_addr $I10, rxscan2372_loop
    rx2371_cur."!mark_push"(0, rx2371_pos, $I10)
  rxscan2372_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2373_fail
    rx2371_cur."!mark_push"(0, rx2371_pos, $I10)
  # rx literal  "!="
    add $I11, rx2371_pos, 2
    gt $I11, rx2371_eos, rx2371_fail
    sub $I11, rx2371_pos, rx2371_off
    substr $S10, rx2371_tgt, $I11, 2
    ne $S10, "!=", rx2371_fail
    add rx2371_pos, 2
    set_addr $I10, rxcap_2373_fail
    ($I12, $I11) = rx2371_cur."!mark_peek"($I10)
    rx2371_cur."!cursor_pos"($I11)
    ($P10) = rx2371_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2371_pos, "")
    rx2371_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2373_done
  rxcap_2373_fail:
    goto rx2371_fail
  rxcap_2373_done:
  # rx subrule "O" subtype=capture negate=
    rx2371_cur."!cursor_pos"(rx2371_pos)
    $P10 = rx2371_cur."O"("%relational, :pirop<isne INn>")
    unless $P10, rx2371_fail
    rx2371_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2371_pos = $P10."pos"()
  # rx pass
    rx2371_cur."!cursor_pass"(rx2371_pos, "infix:sym<!=>")
    if_null rx2371_debug, debug_1722
    rx2371_cur."!cursor_debug"("PASS", "infix:sym<!=>", " at pos=", rx2371_pos)
  debug_1722:
    .return (rx2371_cur)
  rx2371_restart:
    if_null rx2371_debug, debug_1723
    rx2371_cur."!cursor_debug"("NEXT", "infix:sym<!=>")
  debug_1723:
  rx2371_fail:
    (rx2371_rep, rx2371_pos, $I10, $P10) = rx2371_cur."!mark_fail"(0)
    lt rx2371_pos, -1, rx2371_done
    eq rx2371_pos, -1, rx2371_fail
    jump $I10
  rx2371_done:
    rx2371_cur."!cursor_fail"()
    if_null rx2371_debug, debug_1724
    rx2371_cur."!cursor_debug"("FAIL", "infix:sym<!=>")
  debug_1724:
    .return (rx2371_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<!=>"  :subid("398_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1377
    $P104 = self."!PREFIX__!subrule"("O", "!=")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<<=>"  :subid("399_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1378
    .local string rx2376_tgt
    .local int rx2376_pos
    .local int rx2376_off
    .local int rx2376_eos
    .local int rx2376_rep
    .local pmc rx2376_cur
    .local pmc rx2376_debug
    (rx2376_cur, rx2376_pos, rx2376_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2376_cur
    .local pmc match
    .lex "$/", match
    length rx2376_eos, rx2376_tgt
    gt rx2376_pos, rx2376_eos, rx2376_done
    set rx2376_off, 0
    lt rx2376_pos, 2, rx2376_start
    sub rx2376_off, rx2376_pos, 1
    substr rx2376_tgt, rx2376_tgt, rx2376_off
  rx2376_start:
    eq $I10, 1, rx2376_restart
    if_null rx2376_debug, debug_1725
    rx2376_cur."!cursor_debug"("START", "infix:sym<<=>")
  debug_1725:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2377_done
    goto rxscan2377_scan
  rxscan2377_loop:
    (rx2376_pos) = rx2376_cur."from"()
    inc rx2376_pos
    rx2376_cur."!cursor_from"(rx2376_pos)
    ge rx2376_pos, rx2376_eos, rxscan2377_done
  rxscan2377_scan:
    set_addr $I10, rxscan2377_loop
    rx2376_cur."!mark_push"(0, rx2376_pos, $I10)
  rxscan2377_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2378_fail
    rx2376_cur."!mark_push"(0, rx2376_pos, $I10)
  # rx literal  "<="
    add $I11, rx2376_pos, 2
    gt $I11, rx2376_eos, rx2376_fail
    sub $I11, rx2376_pos, rx2376_off
    substr $S10, rx2376_tgt, $I11, 2
    ne $S10, "<=", rx2376_fail
    add rx2376_pos, 2
    set_addr $I10, rxcap_2378_fail
    ($I12, $I11) = rx2376_cur."!mark_peek"($I10)
    rx2376_cur."!cursor_pos"($I11)
    ($P10) = rx2376_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2376_pos, "")
    rx2376_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2378_done
  rxcap_2378_fail:
    goto rx2376_fail
  rxcap_2378_done:
  # rx subrule "O" subtype=capture negate=
    rx2376_cur."!cursor_pos"(rx2376_pos)
    $P10 = rx2376_cur."O"("%relational, :pirop<isle INn>")
    unless $P10, rx2376_fail
    rx2376_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2376_pos = $P10."pos"()
  # rx pass
    rx2376_cur."!cursor_pass"(rx2376_pos, "infix:sym<<=>")
    if_null rx2376_debug, debug_1726
    rx2376_cur."!cursor_debug"("PASS", "infix:sym<<=>", " at pos=", rx2376_pos)
  debug_1726:
    .return (rx2376_cur)
  rx2376_restart:
    if_null rx2376_debug, debug_1727
    rx2376_cur."!cursor_debug"("NEXT", "infix:sym<<=>")
  debug_1727:
  rx2376_fail:
    (rx2376_rep, rx2376_pos, $I10, $P10) = rx2376_cur."!mark_fail"(0)
    lt rx2376_pos, -1, rx2376_done
    eq rx2376_pos, -1, rx2376_fail
    jump $I10
  rx2376_done:
    rx2376_cur."!cursor_fail"()
    if_null rx2376_debug, debug_1728
    rx2376_cur."!cursor_debug"("FAIL", "infix:sym<<=>")
  debug_1728:
    .return (rx2376_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<<=>"  :subid("400_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1378
    $P104 = self."!PREFIX__!subrule"("O", "<=")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<>=>"  :subid("401_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1379
    .local string rx2381_tgt
    .local int rx2381_pos
    .local int rx2381_off
    .local int rx2381_eos
    .local int rx2381_rep
    .local pmc rx2381_cur
    .local pmc rx2381_debug
    (rx2381_cur, rx2381_pos, rx2381_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2381_cur
    .local pmc match
    .lex "$/", match
    length rx2381_eos, rx2381_tgt
    gt rx2381_pos, rx2381_eos, rx2381_done
    set rx2381_off, 0
    lt rx2381_pos, 2, rx2381_start
    sub rx2381_off, rx2381_pos, 1
    substr rx2381_tgt, rx2381_tgt, rx2381_off
  rx2381_start:
    eq $I10, 1, rx2381_restart
    if_null rx2381_debug, debug_1729
    rx2381_cur."!cursor_debug"("START", "infix:sym<>=>")
  debug_1729:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2382_done
    goto rxscan2382_scan
  rxscan2382_loop:
    (rx2381_pos) = rx2381_cur."from"()
    inc rx2381_pos
    rx2381_cur."!cursor_from"(rx2381_pos)
    ge rx2381_pos, rx2381_eos, rxscan2382_done
  rxscan2382_scan:
    set_addr $I10, rxscan2382_loop
    rx2381_cur."!mark_push"(0, rx2381_pos, $I10)
  rxscan2382_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2383_fail
    rx2381_cur."!mark_push"(0, rx2381_pos, $I10)
  # rx literal  ">="
    add $I11, rx2381_pos, 2
    gt $I11, rx2381_eos, rx2381_fail
    sub $I11, rx2381_pos, rx2381_off
    substr $S10, rx2381_tgt, $I11, 2
    ne $S10, ">=", rx2381_fail
    add rx2381_pos, 2
    set_addr $I10, rxcap_2383_fail
    ($I12, $I11) = rx2381_cur."!mark_peek"($I10)
    rx2381_cur."!cursor_pos"($I11)
    ($P10) = rx2381_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2381_pos, "")
    rx2381_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2383_done
  rxcap_2383_fail:
    goto rx2381_fail
  rxcap_2383_done:
  # rx subrule "O" subtype=capture negate=
    rx2381_cur."!cursor_pos"(rx2381_pos)
    $P10 = rx2381_cur."O"("%relational, :pirop<isge INn>")
    unless $P10, rx2381_fail
    rx2381_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2381_pos = $P10."pos"()
  # rx pass
    rx2381_cur."!cursor_pass"(rx2381_pos, "infix:sym<>=>")
    if_null rx2381_debug, debug_1730
    rx2381_cur."!cursor_debug"("PASS", "infix:sym<>=>", " at pos=", rx2381_pos)
  debug_1730:
    .return (rx2381_cur)
  rx2381_restart:
    if_null rx2381_debug, debug_1731
    rx2381_cur."!cursor_debug"("NEXT", "infix:sym<>=>")
  debug_1731:
  rx2381_fail:
    (rx2381_rep, rx2381_pos, $I10, $P10) = rx2381_cur."!mark_fail"(0)
    lt rx2381_pos, -1, rx2381_done
    eq rx2381_pos, -1, rx2381_fail
    jump $I10
  rx2381_done:
    rx2381_cur."!cursor_fail"()
    if_null rx2381_debug, debug_1732
    rx2381_cur."!cursor_debug"("FAIL", "infix:sym<>=>")
  debug_1732:
    .return (rx2381_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<>=>"  :subid("402_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1379
    $P104 = self."!PREFIX__!subrule"("O", ">=")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<<>"  :subid("403_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1380
    .local string rx2386_tgt
    .local int rx2386_pos
    .local int rx2386_off
    .local int rx2386_eos
    .local int rx2386_rep
    .local pmc rx2386_cur
    .local pmc rx2386_debug
    (rx2386_cur, rx2386_pos, rx2386_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2386_cur
    .local pmc match
    .lex "$/", match
    length rx2386_eos, rx2386_tgt
    gt rx2386_pos, rx2386_eos, rx2386_done
    set rx2386_off, 0
    lt rx2386_pos, 2, rx2386_start
    sub rx2386_off, rx2386_pos, 1
    substr rx2386_tgt, rx2386_tgt, rx2386_off
  rx2386_start:
    eq $I10, 1, rx2386_restart
    if_null rx2386_debug, debug_1733
    rx2386_cur."!cursor_debug"("START", "infix:sym<<>")
  debug_1733:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2387_done
    goto rxscan2387_scan
  rxscan2387_loop:
    (rx2386_pos) = rx2386_cur."from"()
    inc rx2386_pos
    rx2386_cur."!cursor_from"(rx2386_pos)
    ge rx2386_pos, rx2386_eos, rxscan2387_done
  rxscan2387_scan:
    set_addr $I10, rxscan2387_loop
    rx2386_cur."!mark_push"(0, rx2386_pos, $I10)
  rxscan2387_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2388_fail
    rx2386_cur."!mark_push"(0, rx2386_pos, $I10)
  # rx literal  "<"
    add $I11, rx2386_pos, 1
    gt $I11, rx2386_eos, rx2386_fail
    sub $I11, rx2386_pos, rx2386_off
    ord $I11, rx2386_tgt, $I11
    ne $I11, 60, rx2386_fail
    add rx2386_pos, 1
    set_addr $I10, rxcap_2388_fail
    ($I12, $I11) = rx2386_cur."!mark_peek"($I10)
    rx2386_cur."!cursor_pos"($I11)
    ($P10) = rx2386_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2386_pos, "")
    rx2386_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2388_done
  rxcap_2388_fail:
    goto rx2386_fail
  rxcap_2388_done:
  # rx subrule "O" subtype=capture negate=
    rx2386_cur."!cursor_pos"(rx2386_pos)
    $P10 = rx2386_cur."O"("%relational, :pirop<islt INn>")
    unless $P10, rx2386_fail
    rx2386_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2386_pos = $P10."pos"()
  # rx pass
    rx2386_cur."!cursor_pass"(rx2386_pos, "infix:sym<<>")
    if_null rx2386_debug, debug_1734
    rx2386_cur."!cursor_debug"("PASS", "infix:sym<<>", " at pos=", rx2386_pos)
  debug_1734:
    .return (rx2386_cur)
  rx2386_restart:
    if_null rx2386_debug, debug_1735
    rx2386_cur."!cursor_debug"("NEXT", "infix:sym<<>")
  debug_1735:
  rx2386_fail:
    (rx2386_rep, rx2386_pos, $I10, $P10) = rx2386_cur."!mark_fail"(0)
    lt rx2386_pos, -1, rx2386_done
    eq rx2386_pos, -1, rx2386_fail
    jump $I10
  rx2386_done:
    rx2386_cur."!cursor_fail"()
    if_null rx2386_debug, debug_1736
    rx2386_cur."!cursor_debug"("FAIL", "infix:sym<<>")
  debug_1736:
    .return (rx2386_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<<>"  :subid("404_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1380
    $P104 = self."!PREFIX__!subrule"("O", "<")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<>>"  :subid("405_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1381
    .local string rx2391_tgt
    .local int rx2391_pos
    .local int rx2391_off
    .local int rx2391_eos
    .local int rx2391_rep
    .local pmc rx2391_cur
    .local pmc rx2391_debug
    (rx2391_cur, rx2391_pos, rx2391_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2391_cur
    .local pmc match
    .lex "$/", match
    length rx2391_eos, rx2391_tgt
    gt rx2391_pos, rx2391_eos, rx2391_done
    set rx2391_off, 0
    lt rx2391_pos, 2, rx2391_start
    sub rx2391_off, rx2391_pos, 1
    substr rx2391_tgt, rx2391_tgt, rx2391_off
  rx2391_start:
    eq $I10, 1, rx2391_restart
    if_null rx2391_debug, debug_1737
    rx2391_cur."!cursor_debug"("START", "infix:sym<>>")
  debug_1737:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2392_done
    goto rxscan2392_scan
  rxscan2392_loop:
    (rx2391_pos) = rx2391_cur."from"()
    inc rx2391_pos
    rx2391_cur."!cursor_from"(rx2391_pos)
    ge rx2391_pos, rx2391_eos, rxscan2392_done
  rxscan2392_scan:
    set_addr $I10, rxscan2392_loop
    rx2391_cur."!mark_push"(0, rx2391_pos, $I10)
  rxscan2392_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2393_fail
    rx2391_cur."!mark_push"(0, rx2391_pos, $I10)
  # rx literal  ">"
    add $I11, rx2391_pos, 1
    gt $I11, rx2391_eos, rx2391_fail
    sub $I11, rx2391_pos, rx2391_off
    ord $I11, rx2391_tgt, $I11
    ne $I11, 62, rx2391_fail
    add rx2391_pos, 1
    set_addr $I10, rxcap_2393_fail
    ($I12, $I11) = rx2391_cur."!mark_peek"($I10)
    rx2391_cur."!cursor_pos"($I11)
    ($P10) = rx2391_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2391_pos, "")
    rx2391_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2393_done
  rxcap_2393_fail:
    goto rx2391_fail
  rxcap_2393_done:
  # rx subrule "O" subtype=capture negate=
    rx2391_cur."!cursor_pos"(rx2391_pos)
    $P10 = rx2391_cur."O"("%relational, :pirop<isgt INn>")
    unless $P10, rx2391_fail
    rx2391_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2391_pos = $P10."pos"()
  # rx pass
    rx2391_cur."!cursor_pass"(rx2391_pos, "infix:sym<>>")
    if_null rx2391_debug, debug_1738
    rx2391_cur."!cursor_debug"("PASS", "infix:sym<>>", " at pos=", rx2391_pos)
  debug_1738:
    .return (rx2391_cur)
  rx2391_restart:
    if_null rx2391_debug, debug_1739
    rx2391_cur."!cursor_debug"("NEXT", "infix:sym<>>")
  debug_1739:
  rx2391_fail:
    (rx2391_rep, rx2391_pos, $I10, $P10) = rx2391_cur."!mark_fail"(0)
    lt rx2391_pos, -1, rx2391_done
    eq rx2391_pos, -1, rx2391_fail
    jump $I10
  rx2391_done:
    rx2391_cur."!cursor_fail"()
    if_null rx2391_debug, debug_1740
    rx2391_cur."!cursor_debug"("FAIL", "infix:sym<>>")
  debug_1740:
    .return (rx2391_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<>>"  :subid("406_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1381
    $P104 = self."!PREFIX__!subrule"("O", ">")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<eq>"  :subid("407_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1382
    .local string rx2396_tgt
    .local int rx2396_pos
    .local int rx2396_off
    .local int rx2396_eos
    .local int rx2396_rep
    .local pmc rx2396_cur
    .local pmc rx2396_debug
    (rx2396_cur, rx2396_pos, rx2396_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2396_cur
    .local pmc match
    .lex "$/", match
    length rx2396_eos, rx2396_tgt
    gt rx2396_pos, rx2396_eos, rx2396_done
    set rx2396_off, 0
    lt rx2396_pos, 2, rx2396_start
    sub rx2396_off, rx2396_pos, 1
    substr rx2396_tgt, rx2396_tgt, rx2396_off
  rx2396_start:
    eq $I10, 1, rx2396_restart
    if_null rx2396_debug, debug_1741
    rx2396_cur."!cursor_debug"("START", "infix:sym<eq>")
  debug_1741:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2397_done
    goto rxscan2397_scan
  rxscan2397_loop:
    (rx2396_pos) = rx2396_cur."from"()
    inc rx2396_pos
    rx2396_cur."!cursor_from"(rx2396_pos)
    ge rx2396_pos, rx2396_eos, rxscan2397_done
  rxscan2397_scan:
    set_addr $I10, rxscan2397_loop
    rx2396_cur."!mark_push"(0, rx2396_pos, $I10)
  rxscan2397_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2398_fail
    rx2396_cur."!mark_push"(0, rx2396_pos, $I10)
  # rx literal  "eq"
    add $I11, rx2396_pos, 2
    gt $I11, rx2396_eos, rx2396_fail
    sub $I11, rx2396_pos, rx2396_off
    substr $S10, rx2396_tgt, $I11, 2
    ne $S10, "eq", rx2396_fail
    add rx2396_pos, 2
    set_addr $I10, rxcap_2398_fail
    ($I12, $I11) = rx2396_cur."!mark_peek"($I10)
    rx2396_cur."!cursor_pos"($I11)
    ($P10) = rx2396_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2396_pos, "")
    rx2396_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2398_done
  rxcap_2398_fail:
    goto rx2396_fail
  rxcap_2398_done:
  # rx subrule "O" subtype=capture negate=
    rx2396_cur."!cursor_pos"(rx2396_pos)
    $P10 = rx2396_cur."O"("%relational, :pirop<iseq ISs>")
    unless $P10, rx2396_fail
    rx2396_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2396_pos = $P10."pos"()
  # rx pass
    rx2396_cur."!cursor_pass"(rx2396_pos, "infix:sym<eq>")
    if_null rx2396_debug, debug_1742
    rx2396_cur."!cursor_debug"("PASS", "infix:sym<eq>", " at pos=", rx2396_pos)
  debug_1742:
    .return (rx2396_cur)
  rx2396_restart:
    if_null rx2396_debug, debug_1743
    rx2396_cur."!cursor_debug"("NEXT", "infix:sym<eq>")
  debug_1743:
  rx2396_fail:
    (rx2396_rep, rx2396_pos, $I10, $P10) = rx2396_cur."!mark_fail"(0)
    lt rx2396_pos, -1, rx2396_done
    eq rx2396_pos, -1, rx2396_fail
    jump $I10
  rx2396_done:
    rx2396_cur."!cursor_fail"()
    if_null rx2396_debug, debug_1744
    rx2396_cur."!cursor_debug"("FAIL", "infix:sym<eq>")
  debug_1744:
    .return (rx2396_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<eq>"  :subid("408_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1382
    $P104 = self."!PREFIX__!subrule"("O", "eq")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<ne>"  :subid("409_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1383
    .local string rx2401_tgt
    .local int rx2401_pos
    .local int rx2401_off
    .local int rx2401_eos
    .local int rx2401_rep
    .local pmc rx2401_cur
    .local pmc rx2401_debug
    (rx2401_cur, rx2401_pos, rx2401_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2401_cur
    .local pmc match
    .lex "$/", match
    length rx2401_eos, rx2401_tgt
    gt rx2401_pos, rx2401_eos, rx2401_done
    set rx2401_off, 0
    lt rx2401_pos, 2, rx2401_start
    sub rx2401_off, rx2401_pos, 1
    substr rx2401_tgt, rx2401_tgt, rx2401_off
  rx2401_start:
    eq $I10, 1, rx2401_restart
    if_null rx2401_debug, debug_1745
    rx2401_cur."!cursor_debug"("START", "infix:sym<ne>")
  debug_1745:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2402_done
    goto rxscan2402_scan
  rxscan2402_loop:
    (rx2401_pos) = rx2401_cur."from"()
    inc rx2401_pos
    rx2401_cur."!cursor_from"(rx2401_pos)
    ge rx2401_pos, rx2401_eos, rxscan2402_done
  rxscan2402_scan:
    set_addr $I10, rxscan2402_loop
    rx2401_cur."!mark_push"(0, rx2401_pos, $I10)
  rxscan2402_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2403_fail
    rx2401_cur."!mark_push"(0, rx2401_pos, $I10)
  # rx literal  "ne"
    add $I11, rx2401_pos, 2
    gt $I11, rx2401_eos, rx2401_fail
    sub $I11, rx2401_pos, rx2401_off
    substr $S10, rx2401_tgt, $I11, 2
    ne $S10, "ne", rx2401_fail
    add rx2401_pos, 2
    set_addr $I10, rxcap_2403_fail
    ($I12, $I11) = rx2401_cur."!mark_peek"($I10)
    rx2401_cur."!cursor_pos"($I11)
    ($P10) = rx2401_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2401_pos, "")
    rx2401_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2403_done
  rxcap_2403_fail:
    goto rx2401_fail
  rxcap_2403_done:
  # rx subrule "O" subtype=capture negate=
    rx2401_cur."!cursor_pos"(rx2401_pos)
    $P10 = rx2401_cur."O"("%relational, :pirop<isne ISs>")
    unless $P10, rx2401_fail
    rx2401_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2401_pos = $P10."pos"()
  # rx pass
    rx2401_cur."!cursor_pass"(rx2401_pos, "infix:sym<ne>")
    if_null rx2401_debug, debug_1746
    rx2401_cur."!cursor_debug"("PASS", "infix:sym<ne>", " at pos=", rx2401_pos)
  debug_1746:
    .return (rx2401_cur)
  rx2401_restart:
    if_null rx2401_debug, debug_1747
    rx2401_cur."!cursor_debug"("NEXT", "infix:sym<ne>")
  debug_1747:
  rx2401_fail:
    (rx2401_rep, rx2401_pos, $I10, $P10) = rx2401_cur."!mark_fail"(0)
    lt rx2401_pos, -1, rx2401_done
    eq rx2401_pos, -1, rx2401_fail
    jump $I10
  rx2401_done:
    rx2401_cur."!cursor_fail"()
    if_null rx2401_debug, debug_1748
    rx2401_cur."!cursor_debug"("FAIL", "infix:sym<ne>")
  debug_1748:
    .return (rx2401_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<ne>"  :subid("410_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1383
    $P104 = self."!PREFIX__!subrule"("O", "ne")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<le>"  :subid("411_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1384
    .local string rx2406_tgt
    .local int rx2406_pos
    .local int rx2406_off
    .local int rx2406_eos
    .local int rx2406_rep
    .local pmc rx2406_cur
    .local pmc rx2406_debug
    (rx2406_cur, rx2406_pos, rx2406_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2406_cur
    .local pmc match
    .lex "$/", match
    length rx2406_eos, rx2406_tgt
    gt rx2406_pos, rx2406_eos, rx2406_done
    set rx2406_off, 0
    lt rx2406_pos, 2, rx2406_start
    sub rx2406_off, rx2406_pos, 1
    substr rx2406_tgt, rx2406_tgt, rx2406_off
  rx2406_start:
    eq $I10, 1, rx2406_restart
    if_null rx2406_debug, debug_1749
    rx2406_cur."!cursor_debug"("START", "infix:sym<le>")
  debug_1749:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2407_done
    goto rxscan2407_scan
  rxscan2407_loop:
    (rx2406_pos) = rx2406_cur."from"()
    inc rx2406_pos
    rx2406_cur."!cursor_from"(rx2406_pos)
    ge rx2406_pos, rx2406_eos, rxscan2407_done
  rxscan2407_scan:
    set_addr $I10, rxscan2407_loop
    rx2406_cur."!mark_push"(0, rx2406_pos, $I10)
  rxscan2407_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2408_fail
    rx2406_cur."!mark_push"(0, rx2406_pos, $I10)
  # rx literal  "le"
    add $I11, rx2406_pos, 2
    gt $I11, rx2406_eos, rx2406_fail
    sub $I11, rx2406_pos, rx2406_off
    substr $S10, rx2406_tgt, $I11, 2
    ne $S10, "le", rx2406_fail
    add rx2406_pos, 2
    set_addr $I10, rxcap_2408_fail
    ($I12, $I11) = rx2406_cur."!mark_peek"($I10)
    rx2406_cur."!cursor_pos"($I11)
    ($P10) = rx2406_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2406_pos, "")
    rx2406_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2408_done
  rxcap_2408_fail:
    goto rx2406_fail
  rxcap_2408_done:
  # rx subrule "O" subtype=capture negate=
    rx2406_cur."!cursor_pos"(rx2406_pos)
    $P10 = rx2406_cur."O"("%relational, :pirop<isle ISs>")
    unless $P10, rx2406_fail
    rx2406_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2406_pos = $P10."pos"()
  # rx pass
    rx2406_cur."!cursor_pass"(rx2406_pos, "infix:sym<le>")
    if_null rx2406_debug, debug_1750
    rx2406_cur."!cursor_debug"("PASS", "infix:sym<le>", " at pos=", rx2406_pos)
  debug_1750:
    .return (rx2406_cur)
  rx2406_restart:
    if_null rx2406_debug, debug_1751
    rx2406_cur."!cursor_debug"("NEXT", "infix:sym<le>")
  debug_1751:
  rx2406_fail:
    (rx2406_rep, rx2406_pos, $I10, $P10) = rx2406_cur."!mark_fail"(0)
    lt rx2406_pos, -1, rx2406_done
    eq rx2406_pos, -1, rx2406_fail
    jump $I10
  rx2406_done:
    rx2406_cur."!cursor_fail"()
    if_null rx2406_debug, debug_1752
    rx2406_cur."!cursor_debug"("FAIL", "infix:sym<le>")
  debug_1752:
    .return (rx2406_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<le>"  :subid("412_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1384
    $P104 = self."!PREFIX__!subrule"("O", "le")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<ge>"  :subid("413_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1385
    .local string rx2411_tgt
    .local int rx2411_pos
    .local int rx2411_off
    .local int rx2411_eos
    .local int rx2411_rep
    .local pmc rx2411_cur
    .local pmc rx2411_debug
    (rx2411_cur, rx2411_pos, rx2411_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2411_cur
    .local pmc match
    .lex "$/", match
    length rx2411_eos, rx2411_tgt
    gt rx2411_pos, rx2411_eos, rx2411_done
    set rx2411_off, 0
    lt rx2411_pos, 2, rx2411_start
    sub rx2411_off, rx2411_pos, 1
    substr rx2411_tgt, rx2411_tgt, rx2411_off
  rx2411_start:
    eq $I10, 1, rx2411_restart
    if_null rx2411_debug, debug_1753
    rx2411_cur."!cursor_debug"("START", "infix:sym<ge>")
  debug_1753:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2412_done
    goto rxscan2412_scan
  rxscan2412_loop:
    (rx2411_pos) = rx2411_cur."from"()
    inc rx2411_pos
    rx2411_cur."!cursor_from"(rx2411_pos)
    ge rx2411_pos, rx2411_eos, rxscan2412_done
  rxscan2412_scan:
    set_addr $I10, rxscan2412_loop
    rx2411_cur."!mark_push"(0, rx2411_pos, $I10)
  rxscan2412_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2413_fail
    rx2411_cur."!mark_push"(0, rx2411_pos, $I10)
  # rx literal  "ge"
    add $I11, rx2411_pos, 2
    gt $I11, rx2411_eos, rx2411_fail
    sub $I11, rx2411_pos, rx2411_off
    substr $S10, rx2411_tgt, $I11, 2
    ne $S10, "ge", rx2411_fail
    add rx2411_pos, 2
    set_addr $I10, rxcap_2413_fail
    ($I12, $I11) = rx2411_cur."!mark_peek"($I10)
    rx2411_cur."!cursor_pos"($I11)
    ($P10) = rx2411_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2411_pos, "")
    rx2411_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2413_done
  rxcap_2413_fail:
    goto rx2411_fail
  rxcap_2413_done:
  # rx subrule "O" subtype=capture negate=
    rx2411_cur."!cursor_pos"(rx2411_pos)
    $P10 = rx2411_cur."O"("%relational, :pirop<isge ISs>")
    unless $P10, rx2411_fail
    rx2411_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2411_pos = $P10."pos"()
  # rx pass
    rx2411_cur."!cursor_pass"(rx2411_pos, "infix:sym<ge>")
    if_null rx2411_debug, debug_1754
    rx2411_cur."!cursor_debug"("PASS", "infix:sym<ge>", " at pos=", rx2411_pos)
  debug_1754:
    .return (rx2411_cur)
  rx2411_restart:
    if_null rx2411_debug, debug_1755
    rx2411_cur."!cursor_debug"("NEXT", "infix:sym<ge>")
  debug_1755:
  rx2411_fail:
    (rx2411_rep, rx2411_pos, $I10, $P10) = rx2411_cur."!mark_fail"(0)
    lt rx2411_pos, -1, rx2411_done
    eq rx2411_pos, -1, rx2411_fail
    jump $I10
  rx2411_done:
    rx2411_cur."!cursor_fail"()
    if_null rx2411_debug, debug_1756
    rx2411_cur."!cursor_debug"("FAIL", "infix:sym<ge>")
  debug_1756:
    .return (rx2411_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<ge>"  :subid("414_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1385
    $P104 = self."!PREFIX__!subrule"("O", "ge")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<lt>"  :subid("415_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1386
    .local string rx2416_tgt
    .local int rx2416_pos
    .local int rx2416_off
    .local int rx2416_eos
    .local int rx2416_rep
    .local pmc rx2416_cur
    .local pmc rx2416_debug
    (rx2416_cur, rx2416_pos, rx2416_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2416_cur
    .local pmc match
    .lex "$/", match
    length rx2416_eos, rx2416_tgt
    gt rx2416_pos, rx2416_eos, rx2416_done
    set rx2416_off, 0
    lt rx2416_pos, 2, rx2416_start
    sub rx2416_off, rx2416_pos, 1
    substr rx2416_tgt, rx2416_tgt, rx2416_off
  rx2416_start:
    eq $I10, 1, rx2416_restart
    if_null rx2416_debug, debug_1757
    rx2416_cur."!cursor_debug"("START", "infix:sym<lt>")
  debug_1757:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2417_done
    goto rxscan2417_scan
  rxscan2417_loop:
    (rx2416_pos) = rx2416_cur."from"()
    inc rx2416_pos
    rx2416_cur."!cursor_from"(rx2416_pos)
    ge rx2416_pos, rx2416_eos, rxscan2417_done
  rxscan2417_scan:
    set_addr $I10, rxscan2417_loop
    rx2416_cur."!mark_push"(0, rx2416_pos, $I10)
  rxscan2417_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2418_fail
    rx2416_cur."!mark_push"(0, rx2416_pos, $I10)
  # rx literal  "lt"
    add $I11, rx2416_pos, 2
    gt $I11, rx2416_eos, rx2416_fail
    sub $I11, rx2416_pos, rx2416_off
    substr $S10, rx2416_tgt, $I11, 2
    ne $S10, "lt", rx2416_fail
    add rx2416_pos, 2
    set_addr $I10, rxcap_2418_fail
    ($I12, $I11) = rx2416_cur."!mark_peek"($I10)
    rx2416_cur."!cursor_pos"($I11)
    ($P10) = rx2416_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2416_pos, "")
    rx2416_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2418_done
  rxcap_2418_fail:
    goto rx2416_fail
  rxcap_2418_done:
  # rx subrule "O" subtype=capture negate=
    rx2416_cur."!cursor_pos"(rx2416_pos)
    $P10 = rx2416_cur."O"("%relational, :pirop<islt ISs>")
    unless $P10, rx2416_fail
    rx2416_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2416_pos = $P10."pos"()
  # rx pass
    rx2416_cur."!cursor_pass"(rx2416_pos, "infix:sym<lt>")
    if_null rx2416_debug, debug_1758
    rx2416_cur."!cursor_debug"("PASS", "infix:sym<lt>", " at pos=", rx2416_pos)
  debug_1758:
    .return (rx2416_cur)
  rx2416_restart:
    if_null rx2416_debug, debug_1759
    rx2416_cur."!cursor_debug"("NEXT", "infix:sym<lt>")
  debug_1759:
  rx2416_fail:
    (rx2416_rep, rx2416_pos, $I10, $P10) = rx2416_cur."!mark_fail"(0)
    lt rx2416_pos, -1, rx2416_done
    eq rx2416_pos, -1, rx2416_fail
    jump $I10
  rx2416_done:
    rx2416_cur."!cursor_fail"()
    if_null rx2416_debug, debug_1760
    rx2416_cur."!cursor_debug"("FAIL", "infix:sym<lt>")
  debug_1760:
    .return (rx2416_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<lt>"  :subid("416_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1386
    $P104 = self."!PREFIX__!subrule"("O", "lt")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<gt>"  :subid("417_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1387
    .local string rx2421_tgt
    .local int rx2421_pos
    .local int rx2421_off
    .local int rx2421_eos
    .local int rx2421_rep
    .local pmc rx2421_cur
    .local pmc rx2421_debug
    (rx2421_cur, rx2421_pos, rx2421_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2421_cur
    .local pmc match
    .lex "$/", match
    length rx2421_eos, rx2421_tgt
    gt rx2421_pos, rx2421_eos, rx2421_done
    set rx2421_off, 0
    lt rx2421_pos, 2, rx2421_start
    sub rx2421_off, rx2421_pos, 1
    substr rx2421_tgt, rx2421_tgt, rx2421_off
  rx2421_start:
    eq $I10, 1, rx2421_restart
    if_null rx2421_debug, debug_1761
    rx2421_cur."!cursor_debug"("START", "infix:sym<gt>")
  debug_1761:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2422_done
    goto rxscan2422_scan
  rxscan2422_loop:
    (rx2421_pos) = rx2421_cur."from"()
    inc rx2421_pos
    rx2421_cur."!cursor_from"(rx2421_pos)
    ge rx2421_pos, rx2421_eos, rxscan2422_done
  rxscan2422_scan:
    set_addr $I10, rxscan2422_loop
    rx2421_cur."!mark_push"(0, rx2421_pos, $I10)
  rxscan2422_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2423_fail
    rx2421_cur."!mark_push"(0, rx2421_pos, $I10)
  # rx literal  "gt"
    add $I11, rx2421_pos, 2
    gt $I11, rx2421_eos, rx2421_fail
    sub $I11, rx2421_pos, rx2421_off
    substr $S10, rx2421_tgt, $I11, 2
    ne $S10, "gt", rx2421_fail
    add rx2421_pos, 2
    set_addr $I10, rxcap_2423_fail
    ($I12, $I11) = rx2421_cur."!mark_peek"($I10)
    rx2421_cur."!cursor_pos"($I11)
    ($P10) = rx2421_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2421_pos, "")
    rx2421_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2423_done
  rxcap_2423_fail:
    goto rx2421_fail
  rxcap_2423_done:
  # rx subrule "O" subtype=capture negate=
    rx2421_cur."!cursor_pos"(rx2421_pos)
    $P10 = rx2421_cur."O"("%relational, :pirop<isgt ISs>")
    unless $P10, rx2421_fail
    rx2421_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2421_pos = $P10."pos"()
  # rx pass
    rx2421_cur."!cursor_pass"(rx2421_pos, "infix:sym<gt>")
    if_null rx2421_debug, debug_1762
    rx2421_cur."!cursor_debug"("PASS", "infix:sym<gt>", " at pos=", rx2421_pos)
  debug_1762:
    .return (rx2421_cur)
  rx2421_restart:
    if_null rx2421_debug, debug_1763
    rx2421_cur."!cursor_debug"("NEXT", "infix:sym<gt>")
  debug_1763:
  rx2421_fail:
    (rx2421_rep, rx2421_pos, $I10, $P10) = rx2421_cur."!mark_fail"(0)
    lt rx2421_pos, -1, rx2421_done
    eq rx2421_pos, -1, rx2421_fail
    jump $I10
  rx2421_done:
    rx2421_cur."!cursor_fail"()
    if_null rx2421_debug, debug_1764
    rx2421_cur."!cursor_debug"("FAIL", "infix:sym<gt>")
  debug_1764:
    .return (rx2421_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<gt>"  :subid("418_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1387
    $P104 = self."!PREFIX__!subrule"("O", "gt")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<=:=>"  :subid("419_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1388
    .local string rx2426_tgt
    .local int rx2426_pos
    .local int rx2426_off
    .local int rx2426_eos
    .local int rx2426_rep
    .local pmc rx2426_cur
    .local pmc rx2426_debug
    (rx2426_cur, rx2426_pos, rx2426_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2426_cur
    .local pmc match
    .lex "$/", match
    length rx2426_eos, rx2426_tgt
    gt rx2426_pos, rx2426_eos, rx2426_done
    set rx2426_off, 0
    lt rx2426_pos, 2, rx2426_start
    sub rx2426_off, rx2426_pos, 1
    substr rx2426_tgt, rx2426_tgt, rx2426_off
  rx2426_start:
    eq $I10, 1, rx2426_restart
    if_null rx2426_debug, debug_1765
    rx2426_cur."!cursor_debug"("START", "infix:sym<=:=>")
  debug_1765:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2427_done
    goto rxscan2427_scan
  rxscan2427_loop:
    (rx2426_pos) = rx2426_cur."from"()
    inc rx2426_pos
    rx2426_cur."!cursor_from"(rx2426_pos)
    ge rx2426_pos, rx2426_eos, rxscan2427_done
  rxscan2427_scan:
    set_addr $I10, rxscan2427_loop
    rx2426_cur."!mark_push"(0, rx2426_pos, $I10)
  rxscan2427_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2428_fail
    rx2426_cur."!mark_push"(0, rx2426_pos, $I10)
  # rx literal  "=:="
    add $I11, rx2426_pos, 3
    gt $I11, rx2426_eos, rx2426_fail
    sub $I11, rx2426_pos, rx2426_off
    substr $S10, rx2426_tgt, $I11, 3
    ne $S10, "=:=", rx2426_fail
    add rx2426_pos, 3
    set_addr $I10, rxcap_2428_fail
    ($I12, $I11) = rx2426_cur."!mark_peek"($I10)
    rx2426_cur."!cursor_pos"($I11)
    ($P10) = rx2426_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2426_pos, "")
    rx2426_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2428_done
  rxcap_2428_fail:
    goto rx2426_fail
  rxcap_2428_done:
  # rx subrule "O" subtype=capture negate=
    rx2426_cur."!cursor_pos"(rx2426_pos)
    $P10 = rx2426_cur."O"("%relational, :pirop<issame>")
    unless $P10, rx2426_fail
    rx2426_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2426_pos = $P10."pos"()
  # rx pass
    rx2426_cur."!cursor_pass"(rx2426_pos, "infix:sym<=:=>")
    if_null rx2426_debug, debug_1766
    rx2426_cur."!cursor_debug"("PASS", "infix:sym<=:=>", " at pos=", rx2426_pos)
  debug_1766:
    .return (rx2426_cur)
  rx2426_restart:
    if_null rx2426_debug, debug_1767
    rx2426_cur."!cursor_debug"("NEXT", "infix:sym<=:=>")
  debug_1767:
  rx2426_fail:
    (rx2426_rep, rx2426_pos, $I10, $P10) = rx2426_cur."!mark_fail"(0)
    lt rx2426_pos, -1, rx2426_done
    eq rx2426_pos, -1, rx2426_fail
    jump $I10
  rx2426_done:
    rx2426_cur."!cursor_fail"()
    if_null rx2426_debug, debug_1768
    rx2426_cur."!cursor_debug"("FAIL", "infix:sym<=:=>")
  debug_1768:
    .return (rx2426_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<=:=>"  :subid("420_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1388
    $P104 = self."!PREFIX__!subrule"("O", "=:=")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<~~>"  :subid("421_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1389
    .local string rx2431_tgt
    .local int rx2431_pos
    .local int rx2431_off
    .local int rx2431_eos
    .local int rx2431_rep
    .local pmc rx2431_cur
    .local pmc rx2431_debug
    (rx2431_cur, rx2431_pos, rx2431_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2431_cur
    .local pmc match
    .lex "$/", match
    length rx2431_eos, rx2431_tgt
    gt rx2431_pos, rx2431_eos, rx2431_done
    set rx2431_off, 0
    lt rx2431_pos, 2, rx2431_start
    sub rx2431_off, rx2431_pos, 1
    substr rx2431_tgt, rx2431_tgt, rx2431_off
  rx2431_start:
    eq $I10, 1, rx2431_restart
    if_null rx2431_debug, debug_1769
    rx2431_cur."!cursor_debug"("START", "infix:sym<~~>")
  debug_1769:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2432_done
    goto rxscan2432_scan
  rxscan2432_loop:
    (rx2431_pos) = rx2431_cur."from"()
    inc rx2431_pos
    rx2431_cur."!cursor_from"(rx2431_pos)
    ge rx2431_pos, rx2431_eos, rxscan2432_done
  rxscan2432_scan:
    set_addr $I10, rxscan2432_loop
    rx2431_cur."!mark_push"(0, rx2431_pos, $I10)
  rxscan2432_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2433_fail
    rx2431_cur."!mark_push"(0, rx2431_pos, $I10)
  # rx literal  "~~"
    add $I11, rx2431_pos, 2
    gt $I11, rx2431_eos, rx2431_fail
    sub $I11, rx2431_pos, rx2431_off
    substr $S10, rx2431_tgt, $I11, 2
    ne $S10, "~~", rx2431_fail
    add rx2431_pos, 2
    set_addr $I10, rxcap_2433_fail
    ($I12, $I11) = rx2431_cur."!mark_peek"($I10)
    rx2431_cur."!cursor_pos"($I11)
    ($P10) = rx2431_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2431_pos, "")
    rx2431_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2433_done
  rxcap_2433_fail:
    goto rx2431_fail
  rxcap_2433_done:
  # rx subrule "O" subtype=capture negate=
    rx2431_cur."!cursor_pos"(rx2431_pos)
    $P10 = rx2431_cur."O"("%relational, :reducecheck<smartmatch>")
    unless $P10, rx2431_fail
    rx2431_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2431_pos = $P10."pos"()
  # rx pass
    rx2431_cur."!cursor_pass"(rx2431_pos, "infix:sym<~~>")
    if_null rx2431_debug, debug_1770
    rx2431_cur."!cursor_debug"("PASS", "infix:sym<~~>", " at pos=", rx2431_pos)
  debug_1770:
    .return (rx2431_cur)
  rx2431_restart:
    if_null rx2431_debug, debug_1771
    rx2431_cur."!cursor_debug"("NEXT", "infix:sym<~~>")
  debug_1771:
  rx2431_fail:
    (rx2431_rep, rx2431_pos, $I10, $P10) = rx2431_cur."!mark_fail"(0)
    lt rx2431_pos, -1, rx2431_done
    eq rx2431_pos, -1, rx2431_fail
    jump $I10
  rx2431_done:
    rx2431_cur."!cursor_fail"()
    if_null rx2431_debug, debug_1772
    rx2431_cur."!cursor_debug"("FAIL", "infix:sym<~~>")
  debug_1772:
    .return (rx2431_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<~~>"  :subid("422_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1389
    $P104 = self."!PREFIX__!subrule"("O", "~~")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<&&>"  :subid("423_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1391
    .local string rx2436_tgt
    .local int rx2436_pos
    .local int rx2436_off
    .local int rx2436_eos
    .local int rx2436_rep
    .local pmc rx2436_cur
    .local pmc rx2436_debug
    (rx2436_cur, rx2436_pos, rx2436_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2436_cur
    .local pmc match
    .lex "$/", match
    length rx2436_eos, rx2436_tgt
    gt rx2436_pos, rx2436_eos, rx2436_done
    set rx2436_off, 0
    lt rx2436_pos, 2, rx2436_start
    sub rx2436_off, rx2436_pos, 1
    substr rx2436_tgt, rx2436_tgt, rx2436_off
  rx2436_start:
    eq $I10, 1, rx2436_restart
    if_null rx2436_debug, debug_1773
    rx2436_cur."!cursor_debug"("START", "infix:sym<&&>")
  debug_1773:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2437_done
    goto rxscan2437_scan
  rxscan2437_loop:
    (rx2436_pos) = rx2436_cur."from"()
    inc rx2436_pos
    rx2436_cur."!cursor_from"(rx2436_pos)
    ge rx2436_pos, rx2436_eos, rxscan2437_done
  rxscan2437_scan:
    set_addr $I10, rxscan2437_loop
    rx2436_cur."!mark_push"(0, rx2436_pos, $I10)
  rxscan2437_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2438_fail
    rx2436_cur."!mark_push"(0, rx2436_pos, $I10)
  # rx literal  "&&"
    add $I11, rx2436_pos, 2
    gt $I11, rx2436_eos, rx2436_fail
    sub $I11, rx2436_pos, rx2436_off
    substr $S10, rx2436_tgt, $I11, 2
    ne $S10, "&&", rx2436_fail
    add rx2436_pos, 2
    set_addr $I10, rxcap_2438_fail
    ($I12, $I11) = rx2436_cur."!mark_peek"($I10)
    rx2436_cur."!cursor_pos"($I11)
    ($P10) = rx2436_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2436_pos, "")
    rx2436_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2438_done
  rxcap_2438_fail:
    goto rx2436_fail
  rxcap_2438_done:
  # rx subrule "O" subtype=capture negate=
    rx2436_cur."!cursor_pos"(rx2436_pos)
    $P10 = rx2436_cur."O"("%tight_and, :pasttype<if>")
    unless $P10, rx2436_fail
    rx2436_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2436_pos = $P10."pos"()
  # rx pass
    rx2436_cur."!cursor_pass"(rx2436_pos, "infix:sym<&&>")
    if_null rx2436_debug, debug_1774
    rx2436_cur."!cursor_debug"("PASS", "infix:sym<&&>", " at pos=", rx2436_pos)
  debug_1774:
    .return (rx2436_cur)
  rx2436_restart:
    if_null rx2436_debug, debug_1775
    rx2436_cur."!cursor_debug"("NEXT", "infix:sym<&&>")
  debug_1775:
  rx2436_fail:
    (rx2436_rep, rx2436_pos, $I10, $P10) = rx2436_cur."!mark_fail"(0)
    lt rx2436_pos, -1, rx2436_done
    eq rx2436_pos, -1, rx2436_fail
    jump $I10
  rx2436_done:
    rx2436_cur."!cursor_fail"()
    if_null rx2436_debug, debug_1776
    rx2436_cur."!cursor_debug"("FAIL", "infix:sym<&&>")
  debug_1776:
    .return (rx2436_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<&&>"  :subid("424_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1391
    $P104 = self."!PREFIX__!subrule"("O", "&&")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<||>"  :subid("425_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1393
    .local string rx2441_tgt
    .local int rx2441_pos
    .local int rx2441_off
    .local int rx2441_eos
    .local int rx2441_rep
    .local pmc rx2441_cur
    .local pmc rx2441_debug
    (rx2441_cur, rx2441_pos, rx2441_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2441_cur
    .local pmc match
    .lex "$/", match
    length rx2441_eos, rx2441_tgt
    gt rx2441_pos, rx2441_eos, rx2441_done
    set rx2441_off, 0
    lt rx2441_pos, 2, rx2441_start
    sub rx2441_off, rx2441_pos, 1
    substr rx2441_tgt, rx2441_tgt, rx2441_off
  rx2441_start:
    eq $I10, 1, rx2441_restart
    if_null rx2441_debug, debug_1777
    rx2441_cur."!cursor_debug"("START", "infix:sym<||>")
  debug_1777:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2442_done
    goto rxscan2442_scan
  rxscan2442_loop:
    (rx2441_pos) = rx2441_cur."from"()
    inc rx2441_pos
    rx2441_cur."!cursor_from"(rx2441_pos)
    ge rx2441_pos, rx2441_eos, rxscan2442_done
  rxscan2442_scan:
    set_addr $I10, rxscan2442_loop
    rx2441_cur."!mark_push"(0, rx2441_pos, $I10)
  rxscan2442_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2443_fail
    rx2441_cur."!mark_push"(0, rx2441_pos, $I10)
  # rx literal  "||"
    add $I11, rx2441_pos, 2
    gt $I11, rx2441_eos, rx2441_fail
    sub $I11, rx2441_pos, rx2441_off
    substr $S10, rx2441_tgt, $I11, 2
    ne $S10, "||", rx2441_fail
    add rx2441_pos, 2
    set_addr $I10, rxcap_2443_fail
    ($I12, $I11) = rx2441_cur."!mark_peek"($I10)
    rx2441_cur."!cursor_pos"($I11)
    ($P10) = rx2441_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2441_pos, "")
    rx2441_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2443_done
  rxcap_2443_fail:
    goto rx2441_fail
  rxcap_2443_done:
  # rx subrule "O" subtype=capture negate=
    rx2441_cur."!cursor_pos"(rx2441_pos)
    $P10 = rx2441_cur."O"("%tight_or, :pasttype<unless>")
    unless $P10, rx2441_fail
    rx2441_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2441_pos = $P10."pos"()
  # rx pass
    rx2441_cur."!cursor_pass"(rx2441_pos, "infix:sym<||>")
    if_null rx2441_debug, debug_1778
    rx2441_cur."!cursor_debug"("PASS", "infix:sym<||>", " at pos=", rx2441_pos)
  debug_1778:
    .return (rx2441_cur)
  rx2441_restart:
    if_null rx2441_debug, debug_1779
    rx2441_cur."!cursor_debug"("NEXT", "infix:sym<||>")
  debug_1779:
  rx2441_fail:
    (rx2441_rep, rx2441_pos, $I10, $P10) = rx2441_cur."!mark_fail"(0)
    lt rx2441_pos, -1, rx2441_done
    eq rx2441_pos, -1, rx2441_fail
    jump $I10
  rx2441_done:
    rx2441_cur."!cursor_fail"()
    if_null rx2441_debug, debug_1780
    rx2441_cur."!cursor_debug"("FAIL", "infix:sym<||>")
  debug_1780:
    .return (rx2441_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<||>"  :subid("426_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1393
    $P104 = self."!PREFIX__!subrule"("O", "||")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<//>"  :subid("427_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1394
    .local string rx2446_tgt
    .local int rx2446_pos
    .local int rx2446_off
    .local int rx2446_eos
    .local int rx2446_rep
    .local pmc rx2446_cur
    .local pmc rx2446_debug
    (rx2446_cur, rx2446_pos, rx2446_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2446_cur
    .local pmc match
    .lex "$/", match
    length rx2446_eos, rx2446_tgt
    gt rx2446_pos, rx2446_eos, rx2446_done
    set rx2446_off, 0
    lt rx2446_pos, 2, rx2446_start
    sub rx2446_off, rx2446_pos, 1
    substr rx2446_tgt, rx2446_tgt, rx2446_off
  rx2446_start:
    eq $I10, 1, rx2446_restart
    if_null rx2446_debug, debug_1781
    rx2446_cur."!cursor_debug"("START", "infix:sym<//>")
  debug_1781:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2447_done
    goto rxscan2447_scan
  rxscan2447_loop:
    (rx2446_pos) = rx2446_cur."from"()
    inc rx2446_pos
    rx2446_cur."!cursor_from"(rx2446_pos)
    ge rx2446_pos, rx2446_eos, rxscan2447_done
  rxscan2447_scan:
    set_addr $I10, rxscan2447_loop
    rx2446_cur."!mark_push"(0, rx2446_pos, $I10)
  rxscan2447_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2448_fail
    rx2446_cur."!mark_push"(0, rx2446_pos, $I10)
  # rx literal  "//"
    add $I11, rx2446_pos, 2
    gt $I11, rx2446_eos, rx2446_fail
    sub $I11, rx2446_pos, rx2446_off
    substr $S10, rx2446_tgt, $I11, 2
    ne $S10, "//", rx2446_fail
    add rx2446_pos, 2
    set_addr $I10, rxcap_2448_fail
    ($I12, $I11) = rx2446_cur."!mark_peek"($I10)
    rx2446_cur."!cursor_pos"($I11)
    ($P10) = rx2446_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2446_pos, "")
    rx2446_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2448_done
  rxcap_2448_fail:
    goto rx2446_fail
  rxcap_2448_done:
  # rx subrule "O" subtype=capture negate=
    rx2446_cur."!cursor_pos"(rx2446_pos)
    $P10 = rx2446_cur."O"("%tight_or, :pasttype<def_or>")
    unless $P10, rx2446_fail
    rx2446_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2446_pos = $P10."pos"()
  # rx pass
    rx2446_cur."!cursor_pass"(rx2446_pos, "infix:sym<//>")
    if_null rx2446_debug, debug_1782
    rx2446_cur."!cursor_debug"("PASS", "infix:sym<//>", " at pos=", rx2446_pos)
  debug_1782:
    .return (rx2446_cur)
  rx2446_restart:
    if_null rx2446_debug, debug_1783
    rx2446_cur."!cursor_debug"("NEXT", "infix:sym<//>")
  debug_1783:
  rx2446_fail:
    (rx2446_rep, rx2446_pos, $I10, $P10) = rx2446_cur."!mark_fail"(0)
    lt rx2446_pos, -1, rx2446_done
    eq rx2446_pos, -1, rx2446_fail
    jump $I10
  rx2446_done:
    rx2446_cur."!cursor_fail"()
    if_null rx2446_debug, debug_1784
    rx2446_cur."!cursor_debug"("FAIL", "infix:sym<//>")
  debug_1784:
    .return (rx2446_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<//>"  :subid("428_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1394
    $P104 = self."!PREFIX__!subrule"("O", "//")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<?? !!>"  :subid("429_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1396
    .local string rx2451_tgt
    .local int rx2451_pos
    .local int rx2451_off
    .local int rx2451_eos
    .local int rx2451_rep
    .local pmc rx2451_cur
    .local pmc rx2451_debug
    (rx2451_cur, rx2451_pos, rx2451_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2451_cur
    .local pmc match
    .lex "$/", match
    length rx2451_eos, rx2451_tgt
    gt rx2451_pos, rx2451_eos, rx2451_done
    set rx2451_off, 0
    lt rx2451_pos, 2, rx2451_start
    sub rx2451_off, rx2451_pos, 1
    substr rx2451_tgt, rx2451_tgt, rx2451_off
  rx2451_start:
    eq $I10, 1, rx2451_restart
    if_null rx2451_debug, debug_1785
    rx2451_cur."!cursor_debug"("START", "infix:sym<?? !!>")
  debug_1785:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2452_done
    goto rxscan2452_scan
  rxscan2452_loop:
    (rx2451_pos) = rx2451_cur."from"()
    inc rx2451_pos
    rx2451_cur."!cursor_from"(rx2451_pos)
    ge rx2451_pos, rx2451_eos, rxscan2452_done
  rxscan2452_scan:
    set_addr $I10, rxscan2452_loop
    rx2451_cur."!mark_push"(0, rx2451_pos, $I10)
  rxscan2452_done:
.annotate 'line', 1397
  # rx literal  "??"
    add $I11, rx2451_pos, 2
    gt $I11, rx2451_eos, rx2451_fail
    sub $I11, rx2451_pos, rx2451_off
    substr $S10, rx2451_tgt, $I11, 2
    ne $S10, "??", rx2451_fail
    add rx2451_pos, 2
.annotate 'line', 1398
  # rx subrule "ws" subtype=method negate=
    rx2451_cur."!cursor_pos"(rx2451_pos)
    $P10 = rx2451_cur."ws"()
    unless $P10, rx2451_fail
    rx2451_pos = $P10."pos"()
.annotate 'line', 1399
  # rx subrule "EXPR" subtype=capture negate=
    rx2451_cur."!cursor_pos"(rx2451_pos)
    $P10 = rx2451_cur."EXPR"("i=")
    unless $P10, rx2451_fail
    rx2451_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("EXPR")
    rx2451_pos = $P10."pos"()
.annotate 'line', 1400
  # rx literal  "!!"
    add $I11, rx2451_pos, 2
    gt $I11, rx2451_eos, rx2451_fail
    sub $I11, rx2451_pos, rx2451_off
    substr $S10, rx2451_tgt, $I11, 2
    ne $S10, "!!", rx2451_fail
    add rx2451_pos, 2
.annotate 'line', 1401
  # rx subrule "O" subtype=capture negate=
    rx2451_cur."!cursor_pos"(rx2451_pos)
    $P10 = rx2451_cur."O"("%conditional, :reducecheck<ternary>, :pasttype<if>")
    unless $P10, rx2451_fail
    rx2451_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2451_pos = $P10."pos"()
.annotate 'line', 1396
  # rx pass
    rx2451_cur."!cursor_pass"(rx2451_pos, "infix:sym<?? !!>")
    if_null rx2451_debug, debug_1786
    rx2451_cur."!cursor_debug"("PASS", "infix:sym<?? !!>", " at pos=", rx2451_pos)
  debug_1786:
    .return (rx2451_cur)
  rx2451_restart:
    if_null rx2451_debug, debug_1787
    rx2451_cur."!cursor_debug"("NEXT", "infix:sym<?? !!>")
  debug_1787:
  rx2451_fail:
    (rx2451_rep, rx2451_pos, $I10, $P10) = rx2451_cur."!mark_fail"(0)
    lt rx2451_pos, -1, rx2451_done
    eq rx2451_pos, -1, rx2451_fail
    jump $I10
  rx2451_done:
    rx2451_cur."!cursor_fail"()
    if_null rx2451_debug, debug_1788
    rx2451_cur."!cursor_debug"("FAIL", "infix:sym<?? !!>")
  debug_1788:
    .return (rx2451_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<?? !!>"  :subid("430_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1396
    $P104 = self."!PREFIX__!subrule"("ws", "??")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<=>"  :subid("431_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1404
    .local string rx2455_tgt
    .local int rx2455_pos
    .local int rx2455_off
    .local int rx2455_eos
    .local int rx2455_rep
    .local pmc rx2455_cur
    .local pmc rx2455_debug
    (rx2455_cur, rx2455_pos, rx2455_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2455_cur
    .local pmc match
    .lex "$/", match
    length rx2455_eos, rx2455_tgt
    gt rx2455_pos, rx2455_eos, rx2455_done
    set rx2455_off, 0
    lt rx2455_pos, 2, rx2455_start
    sub rx2455_off, rx2455_pos, 1
    substr rx2455_tgt, rx2455_tgt, rx2455_off
  rx2455_start:
    eq $I10, 1, rx2455_restart
    if_null rx2455_debug, debug_1789
    rx2455_cur."!cursor_debug"("START", "infix:sym<=>")
  debug_1789:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2456_done
    goto rxscan2456_scan
  rxscan2456_loop:
    (rx2455_pos) = rx2455_cur."from"()
    inc rx2455_pos
    rx2455_cur."!cursor_from"(rx2455_pos)
    ge rx2455_pos, rx2455_eos, rxscan2456_done
  rxscan2456_scan:
    set_addr $I10, rxscan2456_loop
    rx2455_cur."!mark_push"(0, rx2455_pos, $I10)
  rxscan2456_done:
.annotate 'line', 1405
  # rx subcapture "sym"
    set_addr $I10, rxcap_2457_fail
    rx2455_cur."!mark_push"(0, rx2455_pos, $I10)
  # rx literal  "="
    add $I11, rx2455_pos, 1
    gt $I11, rx2455_eos, rx2455_fail
    sub $I11, rx2455_pos, rx2455_off
    ord $I11, rx2455_tgt, $I11
    ne $I11, 61, rx2455_fail
    add rx2455_pos, 1
    set_addr $I10, rxcap_2457_fail
    ($I12, $I11) = rx2455_cur."!mark_peek"($I10)
    rx2455_cur."!cursor_pos"($I11)
    ($P10) = rx2455_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2455_pos, "")
    rx2455_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2457_done
  rxcap_2457_fail:
    goto rx2455_fail
  rxcap_2457_done:
  # rx subrule "panic" subtype=method negate=
    rx2455_cur."!cursor_pos"(rx2455_pos)
    $P10 = rx2455_cur."panic"("Assignment (\"=\") not supported in NQP, use \":=\" instead")
    unless $P10, rx2455_fail
    rx2455_pos = $P10."pos"()
.annotate 'line', 1404
  # rx pass
    rx2455_cur."!cursor_pass"(rx2455_pos, "infix:sym<=>")
    if_null rx2455_debug, debug_1790
    rx2455_cur."!cursor_debug"("PASS", "infix:sym<=>", " at pos=", rx2455_pos)
  debug_1790:
    .return (rx2455_cur)
  rx2455_restart:
    if_null rx2455_debug, debug_1791
    rx2455_cur."!cursor_debug"("NEXT", "infix:sym<=>")
  debug_1791:
  rx2455_fail:
    (rx2455_rep, rx2455_pos, $I10, $P10) = rx2455_cur."!mark_fail"(0)
    lt rx2455_pos, -1, rx2455_done
    eq rx2455_pos, -1, rx2455_fail
    jump $I10
  rx2455_done:
    rx2455_cur."!cursor_fail"()
    if_null rx2455_debug, debug_1792
    rx2455_cur."!cursor_debug"("FAIL", "infix:sym<=>")
  debug_1792:
    .return (rx2455_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<=>"  :subid("432_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1404
    $P104 = self."!PREFIX__!subrule"("panic", "=")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<:=>"  :subid("433_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1407
    .local string rx2460_tgt
    .local int rx2460_pos
    .local int rx2460_off
    .local int rx2460_eos
    .local int rx2460_rep
    .local pmc rx2460_cur
    .local pmc rx2460_debug
    (rx2460_cur, rx2460_pos, rx2460_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2460_cur
    .local pmc match
    .lex "$/", match
    length rx2460_eos, rx2460_tgt
    gt rx2460_pos, rx2460_eos, rx2460_done
    set rx2460_off, 0
    lt rx2460_pos, 2, rx2460_start
    sub rx2460_off, rx2460_pos, 1
    substr rx2460_tgt, rx2460_tgt, rx2460_off
  rx2460_start:
    eq $I10, 1, rx2460_restart
    if_null rx2460_debug, debug_1793
    rx2460_cur."!cursor_debug"("START", "infix:sym<:=>")
  debug_1793:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2461_done
    goto rxscan2461_scan
  rxscan2461_loop:
    (rx2460_pos) = rx2460_cur."from"()
    inc rx2460_pos
    rx2460_cur."!cursor_from"(rx2460_pos)
    ge rx2460_pos, rx2460_eos, rxscan2461_done
  rxscan2461_scan:
    set_addr $I10, rxscan2461_loop
    rx2460_cur."!mark_push"(0, rx2460_pos, $I10)
  rxscan2461_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2462_fail
    rx2460_cur."!mark_push"(0, rx2460_pos, $I10)
  # rx literal  ":="
    add $I11, rx2460_pos, 2
    gt $I11, rx2460_eos, rx2460_fail
    sub $I11, rx2460_pos, rx2460_off
    substr $S10, rx2460_tgt, $I11, 2
    ne $S10, ":=", rx2460_fail
    add rx2460_pos, 2
    set_addr $I10, rxcap_2462_fail
    ($I12, $I11) = rx2460_cur."!mark_peek"($I10)
    rx2460_cur."!cursor_pos"($I11)
    ($P10) = rx2460_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2460_pos, "")
    rx2460_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2462_done
  rxcap_2462_fail:
    goto rx2460_fail
  rxcap_2462_done:
  # rx subrule "O" subtype=capture negate=
    rx2460_cur."!cursor_pos"(rx2460_pos)
    $P10 = rx2460_cur."O"("%assignment, :pasttype<bind_6model>")
    unless $P10, rx2460_fail
    rx2460_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2460_pos = $P10."pos"()
  # rx pass
    rx2460_cur."!cursor_pass"(rx2460_pos, "infix:sym<:=>")
    if_null rx2460_debug, debug_1794
    rx2460_cur."!cursor_debug"("PASS", "infix:sym<:=>", " at pos=", rx2460_pos)
  debug_1794:
    .return (rx2460_cur)
  rx2460_restart:
    if_null rx2460_debug, debug_1795
    rx2460_cur."!cursor_debug"("NEXT", "infix:sym<:=>")
  debug_1795:
  rx2460_fail:
    (rx2460_rep, rx2460_pos, $I10, $P10) = rx2460_cur."!mark_fail"(0)
    lt rx2460_pos, -1, rx2460_done
    eq rx2460_pos, -1, rx2460_fail
    jump $I10
  rx2460_done:
    rx2460_cur."!cursor_fail"()
    if_null rx2460_debug, debug_1796
    rx2460_cur."!cursor_debug"("FAIL", "infix:sym<:=>")
  debug_1796:
    .return (rx2460_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<:=>"  :subid("434_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1407
    $P104 = self."!PREFIX__!subrule"("O", ":=")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<::=>"  :subid("435_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1408
    .local string rx2465_tgt
    .local int rx2465_pos
    .local int rx2465_off
    .local int rx2465_eos
    .local int rx2465_rep
    .local pmc rx2465_cur
    .local pmc rx2465_debug
    (rx2465_cur, rx2465_pos, rx2465_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2465_cur
    .local pmc match
    .lex "$/", match
    length rx2465_eos, rx2465_tgt
    gt rx2465_pos, rx2465_eos, rx2465_done
    set rx2465_off, 0
    lt rx2465_pos, 2, rx2465_start
    sub rx2465_off, rx2465_pos, 1
    substr rx2465_tgt, rx2465_tgt, rx2465_off
  rx2465_start:
    eq $I10, 1, rx2465_restart
    if_null rx2465_debug, debug_1797
    rx2465_cur."!cursor_debug"("START", "infix:sym<::=>")
  debug_1797:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2466_done
    goto rxscan2466_scan
  rxscan2466_loop:
    (rx2465_pos) = rx2465_cur."from"()
    inc rx2465_pos
    rx2465_cur."!cursor_from"(rx2465_pos)
    ge rx2465_pos, rx2465_eos, rxscan2466_done
  rxscan2466_scan:
    set_addr $I10, rxscan2466_loop
    rx2465_cur."!mark_push"(0, rx2465_pos, $I10)
  rxscan2466_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2467_fail
    rx2465_cur."!mark_push"(0, rx2465_pos, $I10)
  # rx literal  "::="
    add $I11, rx2465_pos, 3
    gt $I11, rx2465_eos, rx2465_fail
    sub $I11, rx2465_pos, rx2465_off
    substr $S10, rx2465_tgt, $I11, 3
    ne $S10, "::=", rx2465_fail
    add rx2465_pos, 3
    set_addr $I10, rxcap_2467_fail
    ($I12, $I11) = rx2465_cur."!mark_peek"($I10)
    rx2465_cur."!cursor_pos"($I11)
    ($P10) = rx2465_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2465_pos, "")
    rx2465_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2467_done
  rxcap_2467_fail:
    goto rx2465_fail
  rxcap_2467_done:
  # rx subrule "O" subtype=capture negate=
    rx2465_cur."!cursor_pos"(rx2465_pos)
    $P10 = rx2465_cur."O"("%assignment, :pasttype<bind_6model>")
    unless $P10, rx2465_fail
    rx2465_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2465_pos = $P10."pos"()
  # rx pass
    rx2465_cur."!cursor_pass"(rx2465_pos, "infix:sym<::=>")
    if_null rx2465_debug, debug_1798
    rx2465_cur."!cursor_debug"("PASS", "infix:sym<::=>", " at pos=", rx2465_pos)
  debug_1798:
    .return (rx2465_cur)
  rx2465_restart:
    if_null rx2465_debug, debug_1799
    rx2465_cur."!cursor_debug"("NEXT", "infix:sym<::=>")
  debug_1799:
  rx2465_fail:
    (rx2465_rep, rx2465_pos, $I10, $P10) = rx2465_cur."!mark_fail"(0)
    lt rx2465_pos, -1, rx2465_done
    eq rx2465_pos, -1, rx2465_fail
    jump $I10
  rx2465_done:
    rx2465_cur."!cursor_fail"()
    if_null rx2465_debug, debug_1800
    rx2465_cur."!cursor_debug"("FAIL", "infix:sym<::=>")
  debug_1800:
    .return (rx2465_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<::=>"  :subid("436_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1408
    $P104 = self."!PREFIX__!subrule"("O", "::=")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<,>"  :subid("437_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1410
    .local string rx2470_tgt
    .local int rx2470_pos
    .local int rx2470_off
    .local int rx2470_eos
    .local int rx2470_rep
    .local pmc rx2470_cur
    .local pmc rx2470_debug
    (rx2470_cur, rx2470_pos, rx2470_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2470_cur
    .local pmc match
    .lex "$/", match
    length rx2470_eos, rx2470_tgt
    gt rx2470_pos, rx2470_eos, rx2470_done
    set rx2470_off, 0
    lt rx2470_pos, 2, rx2470_start
    sub rx2470_off, rx2470_pos, 1
    substr rx2470_tgt, rx2470_tgt, rx2470_off
  rx2470_start:
    eq $I10, 1, rx2470_restart
    if_null rx2470_debug, debug_1801
    rx2470_cur."!cursor_debug"("START", "infix:sym<,>")
  debug_1801:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2471_done
    goto rxscan2471_scan
  rxscan2471_loop:
    (rx2470_pos) = rx2470_cur."from"()
    inc rx2470_pos
    rx2470_cur."!cursor_from"(rx2470_pos)
    ge rx2470_pos, rx2470_eos, rxscan2471_done
  rxscan2471_scan:
    set_addr $I10, rxscan2471_loop
    rx2470_cur."!mark_push"(0, rx2470_pos, $I10)
  rxscan2471_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2472_fail
    rx2470_cur."!mark_push"(0, rx2470_pos, $I10)
  # rx literal  ","
    add $I11, rx2470_pos, 1
    gt $I11, rx2470_eos, rx2470_fail
    sub $I11, rx2470_pos, rx2470_off
    ord $I11, rx2470_tgt, $I11
    ne $I11, 44, rx2470_fail
    add rx2470_pos, 1
    set_addr $I10, rxcap_2472_fail
    ($I12, $I11) = rx2470_cur."!mark_peek"($I10)
    rx2470_cur."!cursor_pos"($I11)
    ($P10) = rx2470_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2470_pos, "")
    rx2470_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2472_done
  rxcap_2472_fail:
    goto rx2470_fail
  rxcap_2472_done:
  # rx subrule "O" subtype=capture negate=
    rx2470_cur."!cursor_pos"(rx2470_pos)
    $P10 = rx2470_cur."O"("%comma, :pasttype<list>")
    unless $P10, rx2470_fail
    rx2470_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2470_pos = $P10."pos"()
  # rx pass
    rx2470_cur."!cursor_pass"(rx2470_pos, "infix:sym<,>")
    if_null rx2470_debug, debug_1802
    rx2470_cur."!cursor_debug"("PASS", "infix:sym<,>", " at pos=", rx2470_pos)
  debug_1802:
    .return (rx2470_cur)
  rx2470_restart:
    if_null rx2470_debug, debug_1803
    rx2470_cur."!cursor_debug"("NEXT", "infix:sym<,>")
  debug_1803:
  rx2470_fail:
    (rx2470_rep, rx2470_pos, $I10, $P10) = rx2470_cur."!mark_fail"(0)
    lt rx2470_pos, -1, rx2470_done
    eq rx2470_pos, -1, rx2470_fail
    jump $I10
  rx2470_done:
    rx2470_cur."!cursor_fail"()
    if_null rx2470_debug, debug_1804
    rx2470_cur."!cursor_debug"("FAIL", "infix:sym<,>")
  debug_1804:
    .return (rx2470_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<,>"  :subid("438_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1410
    $P104 = self."!PREFIX__!subrule"("O", ",")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<return>"  :subid("439_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1412
    .const 'Sub' $P2479 = "440_1329260321.776" 
    capture_lex $P2479
    .local string rx2475_tgt
    .local int rx2475_pos
    .local int rx2475_off
    .local int rx2475_eos
    .local int rx2475_rep
    .local pmc rx2475_cur
    .local pmc rx2475_debug
    (rx2475_cur, rx2475_pos, rx2475_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2475_cur
    .local pmc match
    .lex "$/", match
    length rx2475_eos, rx2475_tgt
    gt rx2475_pos, rx2475_eos, rx2475_done
    set rx2475_off, 0
    lt rx2475_pos, 2, rx2475_start
    sub rx2475_off, rx2475_pos, 1
    substr rx2475_tgt, rx2475_tgt, rx2475_off
  rx2475_start:
    eq $I10, 1, rx2475_restart
    if_null rx2475_debug, debug_1805
    rx2475_cur."!cursor_debug"("START", "prefix:sym<return>")
  debug_1805:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2476_done
    goto rxscan2476_scan
  rxscan2476_loop:
    (rx2475_pos) = rx2475_cur."from"()
    inc rx2475_pos
    rx2475_cur."!cursor_from"(rx2475_pos)
    ge rx2475_pos, rx2475_eos, rxscan2476_done
  rxscan2476_scan:
    set_addr $I10, rxscan2476_loop
    rx2475_cur."!mark_push"(0, rx2475_pos, $I10)
  rxscan2476_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2477_fail
    rx2475_cur."!mark_push"(0, rx2475_pos, $I10)
  # rx literal  "return"
    add $I11, rx2475_pos, 6
    gt $I11, rx2475_eos, rx2475_fail
    sub $I11, rx2475_pos, rx2475_off
    substr $S10, rx2475_tgt, $I11, 6
    ne $S10, "return", rx2475_fail
    add rx2475_pos, 6
    set_addr $I10, rxcap_2477_fail
    ($I12, $I11) = rx2475_cur."!mark_peek"($I10)
    rx2475_cur."!cursor_pos"($I11)
    ($P10) = rx2475_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2475_pos, "")
    rx2475_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2477_done
  rxcap_2477_fail:
    goto rx2475_fail
  rxcap_2477_done:
  # rx charclass s
    ge rx2475_pos, rx2475_eos, rx2475_fail
    sub $I10, rx2475_pos, rx2475_off
    is_cclass $I11, .CCLASS_WHITESPACE, rx2475_tgt, $I10
    unless $I11, rx2475_fail
    inc rx2475_pos
  # rx subrule "O" subtype=capture negate=
    rx2475_cur."!cursor_pos"(rx2475_pos)
    $P10 = rx2475_cur."O"("%list_prefix, :pasttype<return>")
    unless $P10, rx2475_fail
    rx2475_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2475_pos = $P10."pos"()
    rx2475_cur."!cursor_pos"(rx2475_pos)
    find_lex $P104, unicode:"$\x{a2}"
    $P105 = $P104."MATCH"()
    store_lex "$/", $P105
    .const 'Sub' $P2479 = "440_1329260321.776" 
    capture_lex $P2479
    $P107 = $P2479()
  # rx pass
    rx2475_cur."!cursor_pass"(rx2475_pos, "prefix:sym<return>")
    if_null rx2475_debug, debug_1806
    rx2475_cur."!cursor_debug"("PASS", "prefix:sym<return>", " at pos=", rx2475_pos)
  debug_1806:
    .return (rx2475_cur)
  rx2475_restart:
    if_null rx2475_debug, debug_1807
    rx2475_cur."!cursor_debug"("NEXT", "prefix:sym<return>")
  debug_1807:
  rx2475_fail:
    (rx2475_rep, rx2475_pos, $I10, $P10) = rx2475_cur."!mark_fail"(0)
    lt rx2475_pos, -1, rx2475_done
    eq rx2475_pos, -1, rx2475_fail
    jump $I10
  rx2475_done:
    rx2475_cur."!cursor_fail"()
    if_null rx2475_debug, debug_1808
    rx2475_cur."!cursor_debug"("FAIL", "prefix:sym<return>")
  debug_1808:
    .return (rx2475_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block2478"  :anon :subid("440_1329260321.776") :outer("439_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1412
    new $P106, "Float"
    assign $P106, 1
    store_dynamic_lex "$*RETURN_USED", $P106
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<return>"  :subid("441_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1412
    new $P108, "ResizablePMCArray"
    push $P108, "return"
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<make>"  :subid("442_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1413
    .local string rx2482_tgt
    .local int rx2482_pos
    .local int rx2482_off
    .local int rx2482_eos
    .local int rx2482_rep
    .local pmc rx2482_cur
    .local pmc rx2482_debug
    (rx2482_cur, rx2482_pos, rx2482_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2482_cur
    .local pmc match
    .lex "$/", match
    length rx2482_eos, rx2482_tgt
    gt rx2482_pos, rx2482_eos, rx2482_done
    set rx2482_off, 0
    lt rx2482_pos, 2, rx2482_start
    sub rx2482_off, rx2482_pos, 1
    substr rx2482_tgt, rx2482_tgt, rx2482_off
  rx2482_start:
    eq $I10, 1, rx2482_restart
    if_null rx2482_debug, debug_1809
    rx2482_cur."!cursor_debug"("START", "prefix:sym<make>")
  debug_1809:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2483_done
    goto rxscan2483_scan
  rxscan2483_loop:
    (rx2482_pos) = rx2482_cur."from"()
    inc rx2482_pos
    rx2482_cur."!cursor_from"(rx2482_pos)
    ge rx2482_pos, rx2482_eos, rxscan2483_done
  rxscan2483_scan:
    set_addr $I10, rxscan2483_loop
    rx2482_cur."!mark_push"(0, rx2482_pos, $I10)
  rxscan2483_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2484_fail
    rx2482_cur."!mark_push"(0, rx2482_pos, $I10)
  # rx literal  "make"
    add $I11, rx2482_pos, 4
    gt $I11, rx2482_eos, rx2482_fail
    sub $I11, rx2482_pos, rx2482_off
    substr $S10, rx2482_tgt, $I11, 4
    ne $S10, "make", rx2482_fail
    add rx2482_pos, 4
    set_addr $I10, rxcap_2484_fail
    ($I12, $I11) = rx2482_cur."!mark_peek"($I10)
    rx2482_cur."!cursor_pos"($I11)
    ($P10) = rx2482_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2482_pos, "")
    rx2482_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2484_done
  rxcap_2484_fail:
    goto rx2482_fail
  rxcap_2484_done:
  # rx charclass s
    ge rx2482_pos, rx2482_eos, rx2482_fail
    sub $I10, rx2482_pos, rx2482_off
    is_cclass $I11, .CCLASS_WHITESPACE, rx2482_tgt, $I10
    unless $I11, rx2482_fail
    inc rx2482_pos
  # rx subrule "O" subtype=capture negate=
    rx2482_cur."!cursor_pos"(rx2482_pos)
    $P10 = rx2482_cur."O"("%list_prefix")
    unless $P10, rx2482_fail
    rx2482_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2482_pos = $P10."pos"()
  # rx pass
    rx2482_cur."!cursor_pass"(rx2482_pos, "prefix:sym<make>")
    if_null rx2482_debug, debug_1810
    rx2482_cur."!cursor_debug"("PASS", "prefix:sym<make>", " at pos=", rx2482_pos)
  debug_1810:
    .return (rx2482_cur)
  rx2482_restart:
    if_null rx2482_debug, debug_1811
    rx2482_cur."!cursor_debug"("NEXT", "prefix:sym<make>")
  debug_1811:
  rx2482_fail:
    (rx2482_rep, rx2482_pos, $I10, $P10) = rx2482_cur."!mark_fail"(0)
    lt rx2482_pos, -1, rx2482_done
    eq rx2482_pos, -1, rx2482_fail
    jump $I10
  rx2482_done:
    rx2482_cur."!cursor_fail"()
    if_null rx2482_debug, debug_1812
    rx2482_cur."!cursor_debug"("FAIL", "prefix:sym<make>")
  debug_1812:
    .return (rx2482_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<make>"  :subid("443_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1413
    new $P104, "ResizablePMCArray"
    push $P104, "make"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<last>"  :subid("444_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1414
    .local string rx2487_tgt
    .local int rx2487_pos
    .local int rx2487_off
    .local int rx2487_eos
    .local int rx2487_rep
    .local pmc rx2487_cur
    .local pmc rx2487_debug
    (rx2487_cur, rx2487_pos, rx2487_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2487_cur
    .local pmc match
    .lex "$/", match
    length rx2487_eos, rx2487_tgt
    gt rx2487_pos, rx2487_eos, rx2487_done
    set rx2487_off, 0
    lt rx2487_pos, 2, rx2487_start
    sub rx2487_off, rx2487_pos, 1
    substr rx2487_tgt, rx2487_tgt, rx2487_off
  rx2487_start:
    eq $I10, 1, rx2487_restart
    if_null rx2487_debug, debug_1813
    rx2487_cur."!cursor_debug"("START", "term:sym<last>")
  debug_1813:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2488_done
    goto rxscan2488_scan
  rxscan2488_loop:
    (rx2487_pos) = rx2487_cur."from"()
    inc rx2487_pos
    rx2487_cur."!cursor_from"(rx2487_pos)
    ge rx2487_pos, rx2487_eos, rxscan2488_done
  rxscan2488_scan:
    set_addr $I10, rxscan2488_loop
    rx2487_cur."!mark_push"(0, rx2487_pos, $I10)
  rxscan2488_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2489_fail
    rx2487_cur."!mark_push"(0, rx2487_pos, $I10)
  # rx literal  "last"
    add $I11, rx2487_pos, 4
    gt $I11, rx2487_eos, rx2487_fail
    sub $I11, rx2487_pos, rx2487_off
    substr $S10, rx2487_tgt, $I11, 4
    ne $S10, "last", rx2487_fail
    add rx2487_pos, 4
    set_addr $I10, rxcap_2489_fail
    ($I12, $I11) = rx2487_cur."!mark_peek"($I10)
    rx2487_cur."!cursor_pos"($I11)
    ($P10) = rx2487_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2487_pos, "")
    rx2487_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2489_done
  rxcap_2489_fail:
    goto rx2487_fail
  rxcap_2489_done:
  # rx pass
    rx2487_cur."!cursor_pass"(rx2487_pos, "term:sym<last>")
    if_null rx2487_debug, debug_1814
    rx2487_cur."!cursor_debug"("PASS", "term:sym<last>", " at pos=", rx2487_pos)
  debug_1814:
    .return (rx2487_cur)
  rx2487_restart:
    if_null rx2487_debug, debug_1815
    rx2487_cur."!cursor_debug"("NEXT", "term:sym<last>")
  debug_1815:
  rx2487_fail:
    (rx2487_rep, rx2487_pos, $I10, $P10) = rx2487_cur."!mark_fail"(0)
    lt rx2487_pos, -1, rx2487_done
    eq rx2487_pos, -1, rx2487_fail
    jump $I10
  rx2487_done:
    rx2487_cur."!cursor_fail"()
    if_null rx2487_debug, debug_1816
    rx2487_cur."!cursor_debug"("FAIL", "term:sym<last>")
  debug_1816:
    .return (rx2487_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<last>"  :subid("445_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1414
    new $P104, "ResizablePMCArray"
    push $P104, "last"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<next>"  :subid("446_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1415
    .local string rx2492_tgt
    .local int rx2492_pos
    .local int rx2492_off
    .local int rx2492_eos
    .local int rx2492_rep
    .local pmc rx2492_cur
    .local pmc rx2492_debug
    (rx2492_cur, rx2492_pos, rx2492_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2492_cur
    .local pmc match
    .lex "$/", match
    length rx2492_eos, rx2492_tgt
    gt rx2492_pos, rx2492_eos, rx2492_done
    set rx2492_off, 0
    lt rx2492_pos, 2, rx2492_start
    sub rx2492_off, rx2492_pos, 1
    substr rx2492_tgt, rx2492_tgt, rx2492_off
  rx2492_start:
    eq $I10, 1, rx2492_restart
    if_null rx2492_debug, debug_1817
    rx2492_cur."!cursor_debug"("START", "term:sym<next>")
  debug_1817:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2493_done
    goto rxscan2493_scan
  rxscan2493_loop:
    (rx2492_pos) = rx2492_cur."from"()
    inc rx2492_pos
    rx2492_cur."!cursor_from"(rx2492_pos)
    ge rx2492_pos, rx2492_eos, rxscan2493_done
  rxscan2493_scan:
    set_addr $I10, rxscan2493_loop
    rx2492_cur."!mark_push"(0, rx2492_pos, $I10)
  rxscan2493_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2494_fail
    rx2492_cur."!mark_push"(0, rx2492_pos, $I10)
  # rx literal  "next"
    add $I11, rx2492_pos, 4
    gt $I11, rx2492_eos, rx2492_fail
    sub $I11, rx2492_pos, rx2492_off
    substr $S10, rx2492_tgt, $I11, 4
    ne $S10, "next", rx2492_fail
    add rx2492_pos, 4
    set_addr $I10, rxcap_2494_fail
    ($I12, $I11) = rx2492_cur."!mark_peek"($I10)
    rx2492_cur."!cursor_pos"($I11)
    ($P10) = rx2492_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2492_pos, "")
    rx2492_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2494_done
  rxcap_2494_fail:
    goto rx2492_fail
  rxcap_2494_done:
  # rx pass
    rx2492_cur."!cursor_pass"(rx2492_pos, "term:sym<next>")
    if_null rx2492_debug, debug_1818
    rx2492_cur."!cursor_debug"("PASS", "term:sym<next>", " at pos=", rx2492_pos)
  debug_1818:
    .return (rx2492_cur)
  rx2492_restart:
    if_null rx2492_debug, debug_1819
    rx2492_cur."!cursor_debug"("NEXT", "term:sym<next>")
  debug_1819:
  rx2492_fail:
    (rx2492_rep, rx2492_pos, $I10, $P10) = rx2492_cur."!mark_fail"(0)
    lt rx2492_pos, -1, rx2492_done
    eq rx2492_pos, -1, rx2492_fail
    jump $I10
  rx2492_done:
    rx2492_cur."!cursor_fail"()
    if_null rx2492_debug, debug_1820
    rx2492_cur."!cursor_debug"("FAIL", "term:sym<next>")
  debug_1820:
    .return (rx2492_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<next>"  :subid("447_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1415
    new $P104, "ResizablePMCArray"
    push $P104, "next"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<redo>"  :subid("448_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1416
    .local string rx2497_tgt
    .local int rx2497_pos
    .local int rx2497_off
    .local int rx2497_eos
    .local int rx2497_rep
    .local pmc rx2497_cur
    .local pmc rx2497_debug
    (rx2497_cur, rx2497_pos, rx2497_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2497_cur
    .local pmc match
    .lex "$/", match
    length rx2497_eos, rx2497_tgt
    gt rx2497_pos, rx2497_eos, rx2497_done
    set rx2497_off, 0
    lt rx2497_pos, 2, rx2497_start
    sub rx2497_off, rx2497_pos, 1
    substr rx2497_tgt, rx2497_tgt, rx2497_off
  rx2497_start:
    eq $I10, 1, rx2497_restart
    if_null rx2497_debug, debug_1821
    rx2497_cur."!cursor_debug"("START", "term:sym<redo>")
  debug_1821:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2498_done
    goto rxscan2498_scan
  rxscan2498_loop:
    (rx2497_pos) = rx2497_cur."from"()
    inc rx2497_pos
    rx2497_cur."!cursor_from"(rx2497_pos)
    ge rx2497_pos, rx2497_eos, rxscan2498_done
  rxscan2498_scan:
    set_addr $I10, rxscan2498_loop
    rx2497_cur."!mark_push"(0, rx2497_pos, $I10)
  rxscan2498_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2499_fail
    rx2497_cur."!mark_push"(0, rx2497_pos, $I10)
  # rx literal  "redo"
    add $I11, rx2497_pos, 4
    gt $I11, rx2497_eos, rx2497_fail
    sub $I11, rx2497_pos, rx2497_off
    substr $S10, rx2497_tgt, $I11, 4
    ne $S10, "redo", rx2497_fail
    add rx2497_pos, 4
    set_addr $I10, rxcap_2499_fail
    ($I12, $I11) = rx2497_cur."!mark_peek"($I10)
    rx2497_cur."!cursor_pos"($I11)
    ($P10) = rx2497_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2497_pos, "")
    rx2497_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2499_done
  rxcap_2499_fail:
    goto rx2497_fail
  rxcap_2499_done:
  # rx pass
    rx2497_cur."!cursor_pass"(rx2497_pos, "term:sym<redo>")
    if_null rx2497_debug, debug_1822
    rx2497_cur."!cursor_debug"("PASS", "term:sym<redo>", " at pos=", rx2497_pos)
  debug_1822:
    .return (rx2497_cur)
  rx2497_restart:
    if_null rx2497_debug, debug_1823
    rx2497_cur."!cursor_debug"("NEXT", "term:sym<redo>")
  debug_1823:
  rx2497_fail:
    (rx2497_rep, rx2497_pos, $I10, $P10) = rx2497_cur."!mark_fail"(0)
    lt rx2497_pos, -1, rx2497_done
    eq rx2497_pos, -1, rx2497_fail
    jump $I10
  rx2497_done:
    rx2497_cur."!cursor_fail"()
    if_null rx2497_debug, debug_1824
    rx2497_cur."!cursor_debug"("FAIL", "term:sym<redo>")
  debug_1824:
    .return (rx2497_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<redo>"  :subid("449_1329260321.776") :method :outer("72_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1416
    new $P104, "ResizablePMCArray"
    push $P104, "redo"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "smartmatch" :anon :subid("450_1329260321.776") :outer("72_1329260321.776")
    .param pmc param_2502
    .param pmc param_2503
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1418
    .lex "self", param_2502
    .lex "$/", param_2503
.annotate 'line', 1420
    new $P104, "Undef"
    set $P2504, $P104
    .lex "$t", $P2504
    new $P105, "Float"
    assign $P105, 0
    set $I100, $P105
    set $P2505, param_2503
    unless_null $P2505, vivify_1825
    $P2505 = root_new ['parrot';'ResizablePMCArray']
  vivify_1825:
    set $P106, $P2505[$I100]
    unless_null $P106, vivify_1826
    new $P106, "Undef"
  vivify_1826:
    set $P2504, $P106
    new $P105, "Float"
    assign $P105, 1
    set $I100, $P105
    set $P2506, param_2503
    unless_null $P2506, vivify_1827
    $P2506 = root_new ['parrot';'ResizablePMCArray']
  vivify_1827:
    set $P106, $P2506[$I100]
    unless_null $P106, vivify_1828
    new $P106, "Undef"
  vivify_1828:
    new $P107, "Float"
    assign $P107, 0
    set $I101, $P107
    set $P2507, param_2503
    unless_null $P2507, vivify_1829
    $P2507 = root_new ['parrot';'ResizablePMCArray']
    set param_2503, $P2507
  vivify_1829:
    set $P2507[$I101], $P106
    set $P105, $P2504
    unless_null $P105, vivify_1830
    new $P105, "Undef"
  vivify_1830:
    new $P106, "Float"
    assign $P106, 1
    set $I100, $P106
    set $P2508, param_2503
    unless_null $P2508, vivify_1831
    $P2508 = root_new ['parrot';'ResizablePMCArray']
    set param_2503, $P2508
  vivify_1831:
    set $P2508[$I100], $P105
.annotate 'line', 1418
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "_block2510"  :subid("451_1329260321.776") :outer("10_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1424
    .const 'Sub' $P2564 = "471_1329260321.776" 
    capture_lex $P2564
    .const 'Sub' $P2561 = "470_1329260321.776" 
    capture_lex $P2561
    .const 'Sub' $P2560 = "469_1329260321.776" 
    capture_lex $P2560
    .const 'Sub' $P2557 = "468_1329260321.776" 
    capture_lex $P2557
    .const 'Sub' $P2556 = "467_1329260321.776" 
    capture_lex $P2556
    .const 'Sub' $P2547 = "465_1329260321.776" 
    capture_lex $P2547
    .const 'Sub' $P2546 = "464_1329260321.776" 
    capture_lex $P2546
    .const 'Sub' $P2538 = "462_1329260321.776" 
    capture_lex $P2538
    .const 'Sub' $P2537 = "461_1329260321.776" 
    capture_lex $P2537
    .const 'Sub' $P2534 = "460_1329260321.776" 
    capture_lex $P2534
    .const 'Sub' $P2533 = "459_1329260321.776" 
    capture_lex $P2533
    .const 'Sub' $P2526 = "457_1329260321.776" 
    capture_lex $P2526
    .const 'Sub' $P2525 = "456_1329260321.776" 
    capture_lex $P2525
    .const 'Sub' $P2522 = "455_1329260321.776" 
    capture_lex $P2522
    .const 'Sub' $P2521 = "454_1329260321.776" 
    capture_lex $P2521
    .const 'Sub' $P2514 = "452_1329260321.776" 
    capture_lex $P2514
    .lex "$?PACKAGE", $P2512
    .lex "$?CLASS", $P2513
.annotate 'line', 1460
    .const 'Sub' $P2564 = "471_1329260321.776" 
    capture_lex $P2564
.annotate 'line', 1424
    .return ($P2564)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "metachar:sym<:my>"  :subid("452_1329260321.776") :method :outer("451_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1425
    .const 'Sub' $P2518 = "453_1329260321.776" 
    capture_lex $P2518
    .local string rx2515_tgt
    .local int rx2515_pos
    .local int rx2515_off
    .local int rx2515_eos
    .local int rx2515_rep
    .local pmc rx2515_cur
    .local pmc rx2515_debug
    (rx2515_cur, rx2515_pos, rx2515_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2515_cur
    .local pmc match
    .lex "$/", match
    length rx2515_eos, rx2515_tgt
    gt rx2515_pos, rx2515_eos, rx2515_done
    set rx2515_off, 0
    lt rx2515_pos, 2, rx2515_start
    sub rx2515_off, rx2515_pos, 1
    substr rx2515_tgt, rx2515_tgt, rx2515_off
  rx2515_start:
    eq $I10, 1, rx2515_restart
    if_null rx2515_debug, debug_1832
    rx2515_cur."!cursor_debug"("START", "metachar:sym<:my>")
  debug_1832:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2516_done
    goto rxscan2516_scan
  rxscan2516_loop:
    (rx2515_pos) = rx2515_cur."from"()
    inc rx2515_pos
    rx2515_cur."!cursor_from"(rx2515_pos)
    ge rx2515_pos, rx2515_eos, rxscan2516_done
  rxscan2516_scan:
    set_addr $I10, rxscan2516_loop
    rx2515_cur."!mark_push"(0, rx2515_pos, $I10)
  rxscan2516_done:
.annotate 'line', 1426
  # rx literal  ":"
    add $I11, rx2515_pos, 1
    gt $I11, rx2515_eos, rx2515_fail
    sub $I11, rx2515_pos, rx2515_off
    ord $I11, rx2515_tgt, $I11
    ne $I11, 58, rx2515_fail
    add rx2515_pos, 1
  # rx subrule "before" subtype=zerowidth negate=
    rx2515_cur."!cursor_pos"(rx2515_pos)
    .const 'Sub' $P2518 = "453_1329260321.776" 
    capture_lex $P2518
    $P10 = rx2515_cur."before"($P2518)
    unless $P10, rx2515_fail
  # rx subrule "LANG" subtype=capture negate=
    rx2515_cur."!cursor_pos"(rx2515_pos)
    $P10 = rx2515_cur."LANG"("MAIN", "statement")
    unless $P10, rx2515_fail
    rx2515_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statement")
    rx2515_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2515_cur."!cursor_pos"(rx2515_pos)
    $P10 = rx2515_cur."ws"()
    unless $P10, rx2515_fail
    rx2515_pos = $P10."pos"()
  # rx literal  ";"
    add $I11, rx2515_pos, 1
    gt $I11, rx2515_eos, rx2515_fail
    sub $I11, rx2515_pos, rx2515_off
    ord $I11, rx2515_tgt, $I11
    ne $I11, 59, rx2515_fail
    add rx2515_pos, 1
.annotate 'line', 1425
  # rx pass
    rx2515_cur."!cursor_pass"(rx2515_pos, "metachar:sym<:my>")
    if_null rx2515_debug, debug_1837
    rx2515_cur."!cursor_debug"("PASS", "metachar:sym<:my>", " at pos=", rx2515_pos)
  debug_1837:
    .return (rx2515_cur)
  rx2515_restart:
    if_null rx2515_debug, debug_1838
    rx2515_cur."!cursor_debug"("NEXT", "metachar:sym<:my>")
  debug_1838:
  rx2515_fail:
    (rx2515_rep, rx2515_pos, $I10, $P10) = rx2515_cur."!mark_fail"(0)
    lt rx2515_pos, -1, rx2515_done
    eq rx2515_pos, -1, rx2515_fail
    jump $I10
  rx2515_done:
    rx2515_cur."!cursor_fail"()
    if_null rx2515_debug, debug_1839
    rx2515_cur."!cursor_debug"("FAIL", "metachar:sym<:my>")
  debug_1839:
    .return (rx2515_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "_block2517"  :anon :subid("453_1329260321.776") :method :outer("452_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1426
    .local string rx2519_tgt
    .local int rx2519_pos
    .local int rx2519_off
    .local int rx2519_eos
    .local int rx2519_rep
    .local pmc rx2519_cur
    .local pmc rx2519_debug
    (rx2519_cur, rx2519_pos, rx2519_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2519_cur
    .local pmc match
    .lex "$/", match
    length rx2519_eos, rx2519_tgt
    gt rx2519_pos, rx2519_eos, rx2519_done
    set rx2519_off, 0
    lt rx2519_pos, 2, rx2519_start
    sub rx2519_off, rx2519_pos, 1
    substr rx2519_tgt, rx2519_tgt, rx2519_off
  rx2519_start:
    eq $I10, 1, rx2519_restart
    if_null rx2519_debug, debug_1833
    rx2519_cur."!cursor_debug"("START", "")
  debug_1833:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2520_done
    goto rxscan2520_scan
  rxscan2520_loop:
    (rx2519_pos) = rx2519_cur."from"()
    inc rx2519_pos
    rx2519_cur."!cursor_from"(rx2519_pos)
    ge rx2519_pos, rx2519_eos, rxscan2520_done
  rxscan2520_scan:
    set_addr $I10, rxscan2520_loop
    rx2519_cur."!mark_push"(0, rx2519_pos, $I10)
  rxscan2520_done:
  # rx literal  "my"
    add $I11, rx2519_pos, 2
    gt $I11, rx2519_eos, rx2519_fail
    sub $I11, rx2519_pos, rx2519_off
    substr $S10, rx2519_tgt, $I11, 2
    ne $S10, "my", rx2519_fail
    add rx2519_pos, 2
  # rx pass
    rx2519_cur."!cursor_pass"(rx2519_pos, "")
    if_null rx2519_debug, debug_1834
    rx2519_cur."!cursor_debug"("PASS", "", " at pos=", rx2519_pos)
  debug_1834:
    .return (rx2519_cur)
  rx2519_restart:
    if_null rx2519_debug, debug_1835
    rx2519_cur."!cursor_debug"("NEXT", "")
  debug_1835:
  rx2519_fail:
    (rx2519_rep, rx2519_pos, $I10, $P10) = rx2519_cur."!mark_fail"(0)
    lt rx2519_pos, -1, rx2519_done
    eq rx2519_pos, -1, rx2519_fail
    jump $I10
  rx2519_done:
    rx2519_cur."!cursor_fail"()
    if_null rx2519_debug, debug_1836
    rx2519_cur."!cursor_debug"("FAIL", "")
  debug_1836:
    .return (rx2519_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "!PREFIX__metachar:sym<:my>"  :subid("454_1329260321.776") :method :outer("451_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1425
    new $P104, "ResizablePMCArray"
    push $P104, ":"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "metachar:sym<{ }>"  :subid("455_1329260321.776") :method :outer("451_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1429
    .local string rx2523_tgt
    .local int rx2523_pos
    .local int rx2523_off
    .local int rx2523_eos
    .local int rx2523_rep
    .local pmc rx2523_cur
    .local pmc rx2523_debug
    (rx2523_cur, rx2523_pos, rx2523_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2523_cur
    .local pmc match
    .lex "$/", match
    length rx2523_eos, rx2523_tgt
    gt rx2523_pos, rx2523_eos, rx2523_done
    set rx2523_off, 0
    lt rx2523_pos, 2, rx2523_start
    sub rx2523_off, rx2523_pos, 1
    substr rx2523_tgt, rx2523_tgt, rx2523_off
  rx2523_start:
    eq $I10, 1, rx2523_restart
    if_null rx2523_debug, debug_1840
    rx2523_cur."!cursor_debug"("START", "metachar:sym<{ }>")
  debug_1840:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2524_done
    goto rxscan2524_scan
  rxscan2524_loop:
    (rx2523_pos) = rx2523_cur."from"()
    inc rx2523_pos
    rx2523_cur."!cursor_from"(rx2523_pos)
    ge rx2523_pos, rx2523_eos, rxscan2524_done
  rxscan2524_scan:
    set_addr $I10, rxscan2524_loop
    rx2523_cur."!mark_push"(0, rx2523_pos, $I10)
  rxscan2524_done:
.annotate 'line', 1430
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2523_pos, rx2523_off
    substr $S10, rx2523_tgt, $I10, 1
    index $I11, "{", $S10
    lt $I11, 0, rx2523_fail
  # rx subrule "codeblock" subtype=capture negate=
    rx2523_cur."!cursor_pos"(rx2523_pos)
    $P10 = rx2523_cur."codeblock"()
    unless $P10, rx2523_fail
    rx2523_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("codeblock")
    rx2523_pos = $P10."pos"()
.annotate 'line', 1429
  # rx pass
    rx2523_cur."!cursor_pass"(rx2523_pos, "metachar:sym<{ }>")
    if_null rx2523_debug, debug_1841
    rx2523_cur."!cursor_debug"("PASS", "metachar:sym<{ }>", " at pos=", rx2523_pos)
  debug_1841:
    .return (rx2523_cur)
  rx2523_restart:
    if_null rx2523_debug, debug_1842
    rx2523_cur."!cursor_debug"("NEXT", "metachar:sym<{ }>")
  debug_1842:
  rx2523_fail:
    (rx2523_rep, rx2523_pos, $I10, $P10) = rx2523_cur."!mark_fail"(0)
    lt rx2523_pos, -1, rx2523_done
    eq rx2523_pos, -1, rx2523_fail
    jump $I10
  rx2523_done:
    rx2523_cur."!cursor_fail"()
    if_null rx2523_debug, debug_1843
    rx2523_cur."!cursor_debug"("FAIL", "metachar:sym<{ }>")
  debug_1843:
    .return (rx2523_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "!PREFIX__metachar:sym<{ }>"  :subid("456_1329260321.776") :method :outer("451_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1429
    new $P104, "ResizablePMCArray"
    push $P104, "{"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "metachar:sym<nqpvar>"  :subid("457_1329260321.776") :method :outer("451_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1433
    .const 'Sub' $P2530 = "458_1329260321.776" 
    capture_lex $P2530
    .local string rx2527_tgt
    .local int rx2527_pos
    .local int rx2527_off
    .local int rx2527_eos
    .local int rx2527_rep
    .local pmc rx2527_cur
    .local pmc rx2527_debug
    (rx2527_cur, rx2527_pos, rx2527_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2527_cur
    .local pmc match
    .lex "$/", match
    length rx2527_eos, rx2527_tgt
    gt rx2527_pos, rx2527_eos, rx2527_done
    set rx2527_off, 0
    lt rx2527_pos, 2, rx2527_start
    sub rx2527_off, rx2527_pos, 1
    substr rx2527_tgt, rx2527_tgt, rx2527_off
  rx2527_start:
    eq $I10, 1, rx2527_restart
    if_null rx2527_debug, debug_1844
    rx2527_cur."!cursor_debug"("START", "metachar:sym<nqpvar>")
  debug_1844:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2528_done
    goto rxscan2528_scan
  rxscan2528_loop:
    (rx2527_pos) = rx2527_cur."from"()
    inc rx2527_pos
    rx2527_cur."!cursor_from"(rx2527_pos)
    ge rx2527_pos, rx2527_eos, rxscan2528_done
  rxscan2528_scan:
    set_addr $I10, rxscan2528_loop
    rx2527_cur."!mark_push"(0, rx2527_pos, $I10)
  rxscan2528_done:
.annotate 'line', 1434
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2527_pos, rx2527_off
    substr $S10, rx2527_tgt, $I10, 1
    index $I11, "$@", $S10
    lt $I11, 0, rx2527_fail
  # rx subrule "before" subtype=zerowidth negate=
    rx2527_cur."!cursor_pos"(rx2527_pos)
    .const 'Sub' $P2530 = "458_1329260321.776" 
    capture_lex $P2530
    $P10 = rx2527_cur."before"($P2530)
    unless $P10, rx2527_fail
  # rx subrule "LANG" subtype=capture negate=
    rx2527_cur."!cursor_pos"(rx2527_pos)
    $P10 = rx2527_cur."LANG"("MAIN", "variable")
    unless $P10, rx2527_fail
    rx2527_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("var")
    rx2527_pos = $P10."pos"()
.annotate 'line', 1433
  # rx pass
    rx2527_cur."!cursor_pass"(rx2527_pos, "metachar:sym<nqpvar>")
    if_null rx2527_debug, debug_1849
    rx2527_cur."!cursor_debug"("PASS", "metachar:sym<nqpvar>", " at pos=", rx2527_pos)
  debug_1849:
    .return (rx2527_cur)
  rx2527_restart:
    if_null rx2527_debug, debug_1850
    rx2527_cur."!cursor_debug"("NEXT", "metachar:sym<nqpvar>")
  debug_1850:
  rx2527_fail:
    (rx2527_rep, rx2527_pos, $I10, $P10) = rx2527_cur."!mark_fail"(0)
    lt rx2527_pos, -1, rx2527_done
    eq rx2527_pos, -1, rx2527_fail
    jump $I10
  rx2527_done:
    rx2527_cur."!cursor_fail"()
    if_null rx2527_debug, debug_1851
    rx2527_cur."!cursor_debug"("FAIL", "metachar:sym<nqpvar>")
  debug_1851:
    .return (rx2527_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "_block2529"  :anon :subid("458_1329260321.776") :method :outer("457_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1434
    .local string rx2531_tgt
    .local int rx2531_pos
    .local int rx2531_off
    .local int rx2531_eos
    .local int rx2531_rep
    .local pmc rx2531_cur
    .local pmc rx2531_debug
    (rx2531_cur, rx2531_pos, rx2531_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2531_cur
    .local pmc match
    .lex "$/", match
    length rx2531_eos, rx2531_tgt
    gt rx2531_pos, rx2531_eos, rx2531_done
    set rx2531_off, 0
    lt rx2531_pos, 2, rx2531_start
    sub rx2531_off, rx2531_pos, 1
    substr rx2531_tgt, rx2531_tgt, rx2531_off
  rx2531_start:
    eq $I10, 1, rx2531_restart
    if_null rx2531_debug, debug_1845
    rx2531_cur."!cursor_debug"("START", "")
  debug_1845:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2532_done
    goto rxscan2532_scan
  rxscan2532_loop:
    (rx2531_pos) = rx2531_cur."from"()
    inc rx2531_pos
    rx2531_cur."!cursor_from"(rx2531_pos)
    ge rx2531_pos, rx2531_eos, rxscan2532_done
  rxscan2532_scan:
    set_addr $I10, rxscan2532_loop
    rx2531_cur."!mark_push"(0, rx2531_pos, $I10)
  rxscan2532_done:
  # rx charclass .
    ge rx2531_pos, rx2531_eos, rx2531_fail
    inc rx2531_pos
  # rx charclass w
    ge rx2531_pos, rx2531_eos, rx2531_fail
    sub $I10, rx2531_pos, rx2531_off
    is_cclass $I11, .CCLASS_WORD, rx2531_tgt, $I10
    unless $I11, rx2531_fail
    inc rx2531_pos
  # rx pass
    rx2531_cur."!cursor_pass"(rx2531_pos, "")
    if_null rx2531_debug, debug_1846
    rx2531_cur."!cursor_debug"("PASS", "", " at pos=", rx2531_pos)
  debug_1846:
    .return (rx2531_cur)
  rx2531_restart:
    if_null rx2531_debug, debug_1847
    rx2531_cur."!cursor_debug"("NEXT", "")
  debug_1847:
  rx2531_fail:
    (rx2531_rep, rx2531_pos, $I10, $P10) = rx2531_cur."!mark_fail"(0)
    lt rx2531_pos, -1, rx2531_done
    eq rx2531_pos, -1, rx2531_fail
    jump $I10
  rx2531_done:
    rx2531_cur."!cursor_fail"()
    if_null rx2531_debug, debug_1848
    rx2531_cur."!cursor_debug"("FAIL", "")
  debug_1848:
    .return (rx2531_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "!PREFIX__metachar:sym<nqpvar>"  :subid("459_1329260321.776") :method :outer("451_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1433
    new $P104, "ResizablePMCArray"
    push $P104, "$"
    push $P104, "@"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "assertion:sym<{ }>"  :subid("460_1329260321.776") :method :outer("451_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1437
    .local string rx2535_tgt
    .local int rx2535_pos
    .local int rx2535_off
    .local int rx2535_eos
    .local int rx2535_rep
    .local pmc rx2535_cur
    .local pmc rx2535_debug
    (rx2535_cur, rx2535_pos, rx2535_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2535_cur
    .local pmc match
    .lex "$/", match
    length rx2535_eos, rx2535_tgt
    gt rx2535_pos, rx2535_eos, rx2535_done
    set rx2535_off, 0
    lt rx2535_pos, 2, rx2535_start
    sub rx2535_off, rx2535_pos, 1
    substr rx2535_tgt, rx2535_tgt, rx2535_off
  rx2535_start:
    eq $I10, 1, rx2535_restart
    if_null rx2535_debug, debug_1852
    rx2535_cur."!cursor_debug"("START", "assertion:sym<{ }>")
  debug_1852:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2536_done
    goto rxscan2536_scan
  rxscan2536_loop:
    (rx2535_pos) = rx2535_cur."from"()
    inc rx2535_pos
    rx2535_cur."!cursor_from"(rx2535_pos)
    ge rx2535_pos, rx2535_eos, rxscan2536_done
  rxscan2536_scan:
    set_addr $I10, rxscan2536_loop
    rx2535_cur."!mark_push"(0, rx2535_pos, $I10)
  rxscan2536_done:
.annotate 'line', 1438
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2535_pos, rx2535_off
    substr $S10, rx2535_tgt, $I10, 1
    index $I11, "{", $S10
    lt $I11, 0, rx2535_fail
  # rx subrule "codeblock" subtype=capture negate=
    rx2535_cur."!cursor_pos"(rx2535_pos)
    $P10 = rx2535_cur."codeblock"()
    unless $P10, rx2535_fail
    rx2535_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("codeblock")
    rx2535_pos = $P10."pos"()
.annotate 'line', 1437
  # rx pass
    rx2535_cur."!cursor_pass"(rx2535_pos, "assertion:sym<{ }>")
    if_null rx2535_debug, debug_1853
    rx2535_cur."!cursor_debug"("PASS", "assertion:sym<{ }>", " at pos=", rx2535_pos)
  debug_1853:
    .return (rx2535_cur)
  rx2535_restart:
    if_null rx2535_debug, debug_1854
    rx2535_cur."!cursor_debug"("NEXT", "assertion:sym<{ }>")
  debug_1854:
  rx2535_fail:
    (rx2535_rep, rx2535_pos, $I10, $P10) = rx2535_cur."!mark_fail"(0)
    lt rx2535_pos, -1, rx2535_done
    eq rx2535_pos, -1, rx2535_fail
    jump $I10
  rx2535_done:
    rx2535_cur."!cursor_fail"()
    if_null rx2535_debug, debug_1855
    rx2535_cur."!cursor_debug"("FAIL", "assertion:sym<{ }>")
  debug_1855:
    .return (rx2535_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "!PREFIX__assertion:sym<{ }>"  :subid("461_1329260321.776") :method :outer("451_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1437
    new $P104, "ResizablePMCArray"
    push $P104, "{"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "assertion:sym<?{ }>"  :subid("462_1329260321.776") :method :outer("451_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1441
    .const 'Sub' $P2542 = "463_1329260321.776" 
    capture_lex $P2542
    .local string rx2539_tgt
    .local int rx2539_pos
    .local int rx2539_off
    .local int rx2539_eos
    .local int rx2539_rep
    .local pmc rx2539_cur
    .local pmc rx2539_debug
    (rx2539_cur, rx2539_pos, rx2539_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2539_cur
    .local pmc match
    .lex "$/", match
    length rx2539_eos, rx2539_tgt
    gt rx2539_pos, rx2539_eos, rx2539_done
    set rx2539_off, 0
    lt rx2539_pos, 2, rx2539_start
    sub rx2539_off, rx2539_pos, 1
    substr rx2539_tgt, rx2539_tgt, rx2539_off
  rx2539_start:
    eq $I10, 1, rx2539_restart
    if_null rx2539_debug, debug_1856
    rx2539_cur."!cursor_debug"("START", "assertion:sym<?{ }>")
  debug_1856:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2540_done
    goto rxscan2540_scan
  rxscan2540_loop:
    (rx2539_pos) = rx2539_cur."from"()
    inc rx2539_pos
    rx2539_cur."!cursor_from"(rx2539_pos)
    ge rx2539_pos, rx2539_eos, rxscan2540_done
  rxscan2540_scan:
    set_addr $I10, rxscan2540_loop
    rx2539_cur."!mark_push"(0, rx2539_pos, $I10)
  rxscan2540_done:
.annotate 'line', 1442
  # rx subcapture "zw"
    set_addr $I10, rxcap_2545_fail
    rx2539_cur."!mark_push"(0, rx2539_pos, $I10)
  # rx enumcharlist negate=0 
    ge rx2539_pos, rx2539_eos, rx2539_fail
    sub $I10, rx2539_pos, rx2539_off
    substr $S10, rx2539_tgt, $I10, 1
    index $I11, "?!", $S10
    lt $I11, 0, rx2539_fail
    inc rx2539_pos
  # rx subrule "before" subtype=zerowidth negate=
    rx2539_cur."!cursor_pos"(rx2539_pos)
    .const 'Sub' $P2542 = "463_1329260321.776" 
    capture_lex $P2542
    $P10 = rx2539_cur."before"($P2542)
    unless $P10, rx2539_fail
    set_addr $I10, rxcap_2545_fail
    ($I12, $I11) = rx2539_cur."!mark_peek"($I10)
    rx2539_cur."!cursor_pos"($I11)
    ($P10) = rx2539_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2539_pos, "")
    rx2539_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("zw")
    goto rxcap_2545_done
  rxcap_2545_fail:
    goto rx2539_fail
  rxcap_2545_done:
  # rx subrule "codeblock" subtype=capture negate=
    rx2539_cur."!cursor_pos"(rx2539_pos)
    $P10 = rx2539_cur."codeblock"()
    unless $P10, rx2539_fail
    rx2539_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("codeblock")
    rx2539_pos = $P10."pos"()
.annotate 'line', 1441
  # rx pass
    rx2539_cur."!cursor_pass"(rx2539_pos, "assertion:sym<?{ }>")
    if_null rx2539_debug, debug_1861
    rx2539_cur."!cursor_debug"("PASS", "assertion:sym<?{ }>", " at pos=", rx2539_pos)
  debug_1861:
    .return (rx2539_cur)
  rx2539_restart:
    if_null rx2539_debug, debug_1862
    rx2539_cur."!cursor_debug"("NEXT", "assertion:sym<?{ }>")
  debug_1862:
  rx2539_fail:
    (rx2539_rep, rx2539_pos, $I10, $P10) = rx2539_cur."!mark_fail"(0)
    lt rx2539_pos, -1, rx2539_done
    eq rx2539_pos, -1, rx2539_fail
    jump $I10
  rx2539_done:
    rx2539_cur."!cursor_fail"()
    if_null rx2539_debug, debug_1863
    rx2539_cur."!cursor_debug"("FAIL", "assertion:sym<?{ }>")
  debug_1863:
    .return (rx2539_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "_block2541"  :anon :subid("463_1329260321.776") :method :outer("462_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1442
    .local string rx2543_tgt
    .local int rx2543_pos
    .local int rx2543_off
    .local int rx2543_eos
    .local int rx2543_rep
    .local pmc rx2543_cur
    .local pmc rx2543_debug
    (rx2543_cur, rx2543_pos, rx2543_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2543_cur
    .local pmc match
    .lex "$/", match
    length rx2543_eos, rx2543_tgt
    gt rx2543_pos, rx2543_eos, rx2543_done
    set rx2543_off, 0
    lt rx2543_pos, 2, rx2543_start
    sub rx2543_off, rx2543_pos, 1
    substr rx2543_tgt, rx2543_tgt, rx2543_off
  rx2543_start:
    eq $I10, 1, rx2543_restart
    if_null rx2543_debug, debug_1857
    rx2543_cur."!cursor_debug"("START", "")
  debug_1857:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2544_done
    goto rxscan2544_scan
  rxscan2544_loop:
    (rx2543_pos) = rx2543_cur."from"()
    inc rx2543_pos
    rx2543_cur."!cursor_from"(rx2543_pos)
    ge rx2543_pos, rx2543_eos, rxscan2544_done
  rxscan2544_scan:
    set_addr $I10, rxscan2544_loop
    rx2543_cur."!mark_push"(0, rx2543_pos, $I10)
  rxscan2544_done:
  # rx literal  "{"
    add $I11, rx2543_pos, 1
    gt $I11, rx2543_eos, rx2543_fail
    sub $I11, rx2543_pos, rx2543_off
    ord $I11, rx2543_tgt, $I11
    ne $I11, 123, rx2543_fail
    add rx2543_pos, 1
  # rx pass
    rx2543_cur."!cursor_pass"(rx2543_pos, "")
    if_null rx2543_debug, debug_1858
    rx2543_cur."!cursor_debug"("PASS", "", " at pos=", rx2543_pos)
  debug_1858:
    .return (rx2543_cur)
  rx2543_restart:
    if_null rx2543_debug, debug_1859
    rx2543_cur."!cursor_debug"("NEXT", "")
  debug_1859:
  rx2543_fail:
    (rx2543_rep, rx2543_pos, $I10, $P10) = rx2543_cur."!mark_fail"(0)
    lt rx2543_pos, -1, rx2543_done
    eq rx2543_pos, -1, rx2543_fail
    jump $I10
  rx2543_done:
    rx2543_cur."!cursor_fail"()
    if_null rx2543_debug, debug_1860
    rx2543_cur."!cursor_debug"("FAIL", "")
  debug_1860:
    .return (rx2543_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "!PREFIX__assertion:sym<?{ }>"  :subid("464_1329260321.776") :method :outer("451_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1441
    new $P104, "ResizablePMCArray"
    push $P104, "!"
    push $P104, "?"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "assertion:sym<name>"  :subid("465_1329260321.776") :method :outer("451_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1445
    .const 'Sub' $P2553 = "466_1329260321.776" 
    capture_lex $P2553
    .local string rx2548_tgt
    .local int rx2548_pos
    .local int rx2548_off
    .local int rx2548_eos
    .local int rx2548_rep
    .local pmc rx2548_cur
    .local pmc rx2548_debug
    (rx2548_cur, rx2548_pos, rx2548_tgt, $I10) = self."!cursor_start"()
    rx2548_cur."!cursor_caparray"("assertion", "arglist", "nibbler")
    .lex unicode:"$\x{a2}", rx2548_cur
    .local pmc match
    .lex "$/", match
    length rx2548_eos, rx2548_tgt
    gt rx2548_pos, rx2548_eos, rx2548_done
    set rx2548_off, 0
    lt rx2548_pos, 2, rx2548_start
    sub rx2548_off, rx2548_pos, 1
    substr rx2548_tgt, rx2548_tgt, rx2548_off
  rx2548_start:
    eq $I10, 1, rx2548_restart
    if_null rx2548_debug, debug_1864
    rx2548_cur."!cursor_debug"("START", "assertion:sym<name>")
  debug_1864:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2549_done
    goto rxscan2549_scan
  rxscan2549_loop:
    (rx2548_pos) = rx2548_cur."from"()
    inc rx2548_pos
    rx2548_cur."!cursor_from"(rx2548_pos)
    ge rx2548_pos, rx2548_eos, rxscan2549_done
  rxscan2549_scan:
    set_addr $I10, rxscan2549_loop
    rx2548_cur."!mark_push"(0, rx2548_pos, $I10)
  rxscan2549_done:
.annotate 'line', 1446
  # rx subrule "identifier" subtype=capture negate=
    rx2548_cur."!cursor_pos"(rx2548_pos)
    $P10 = rx2548_cur."identifier"()
    unless $P10, rx2548_fail
    rx2548_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("longname")
    rx2548_pos = $P10."pos"()
.annotate 'line', 1453
  # rx rxquantr2550 ** 0..1
    set_addr $I10, rxquantr2550_done
    rx2548_cur."!mark_push"(0, rx2548_pos, $I10)
  rxquantr2550_loop:
  alt2551_0:
.annotate 'line', 1447
    set_addr $I10, alt2551_1
    rx2548_cur."!mark_push"(0, rx2548_pos, $I10)
.annotate 'line', 1448
  # rx subrule "before" subtype=zerowidth negate=
    rx2548_cur."!cursor_pos"(rx2548_pos)
    .const 'Sub' $P2553 = "466_1329260321.776" 
    capture_lex $P2553
    $P10 = rx2548_cur."before"($P2553)
    unless $P10, rx2548_fail
    goto alt2551_end
  alt2551_1:
    set_addr $I10, alt2551_2
    rx2548_cur."!mark_push"(0, rx2548_pos, $I10)
.annotate 'line', 1449
  # rx literal  "="
    add $I11, rx2548_pos, 1
    gt $I11, rx2548_eos, rx2548_fail
    sub $I11, rx2548_pos, rx2548_off
    ord $I11, rx2548_tgt, $I11
    ne $I11, 61, rx2548_fail
    add rx2548_pos, 1
  # rx subrule "assertion" subtype=capture negate=
    rx2548_cur."!cursor_pos"(rx2548_pos)
    $P10 = rx2548_cur."assertion"()
    unless $P10, rx2548_fail
    rx2548_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("assertion")
    rx2548_pos = $P10."pos"()
    goto alt2551_end
  alt2551_2:
    set_addr $I10, alt2551_3
    rx2548_cur."!mark_push"(0, rx2548_pos, $I10)
.annotate 'line', 1450
  # rx literal  ":"
    add $I11, rx2548_pos, 1
    gt $I11, rx2548_eos, rx2548_fail
    sub $I11, rx2548_pos, rx2548_off
    ord $I11, rx2548_tgt, $I11
    ne $I11, 58, rx2548_fail
    add rx2548_pos, 1
  # rx subrule "arglist" subtype=capture negate=
    rx2548_cur."!cursor_pos"(rx2548_pos)
    $P10 = rx2548_cur."arglist"()
    unless $P10, rx2548_fail
    rx2548_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("arglist")
    rx2548_pos = $P10."pos"()
    goto alt2551_end
  alt2551_3:
    set_addr $I10, alt2551_4
    rx2548_cur."!mark_push"(0, rx2548_pos, $I10)
.annotate 'line', 1451
  # rx literal  "("
    add $I11, rx2548_pos, 1
    gt $I11, rx2548_eos, rx2548_fail
    sub $I11, rx2548_pos, rx2548_off
    ord $I11, rx2548_tgt, $I11
    ne $I11, 40, rx2548_fail
    add rx2548_pos, 1
  # rx subrule "LANG" subtype=capture negate=
    rx2548_cur."!cursor_pos"(rx2548_pos)
    $P10 = rx2548_cur."LANG"("MAIN", "arglist")
    unless $P10, rx2548_fail
    rx2548_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("arglist")
    rx2548_pos = $P10."pos"()
  # rx literal  ")"
    add $I11, rx2548_pos, 1
    gt $I11, rx2548_eos, rx2548_fail
    sub $I11, rx2548_pos, rx2548_off
    ord $I11, rx2548_tgt, $I11
    ne $I11, 41, rx2548_fail
    add rx2548_pos, 1
    goto alt2551_end
  alt2551_4:
.annotate 'line', 1452
  # rx subrule "normspace" subtype=method negate=
    rx2548_cur."!cursor_pos"(rx2548_pos)
    $P10 = rx2548_cur."normspace"()
    unless $P10, rx2548_fail
    rx2548_pos = $P10."pos"()
  # rx subrule "nibbler" subtype=capture negate=
    rx2548_cur."!cursor_pos"(rx2548_pos)
    $P10 = rx2548_cur."nibbler"()
    unless $P10, rx2548_fail
    rx2548_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("nibbler")
    rx2548_pos = $P10."pos"()
  alt2551_end:
.annotate 'line', 1453
    set_addr $I10, rxquantr2550_done
    (rx2548_rep) = rx2548_cur."!mark_commit"($I10)
  rxquantr2550_done:
.annotate 'line', 1445
  # rx pass
    rx2548_cur."!cursor_pass"(rx2548_pos, "assertion:sym<name>")
    if_null rx2548_debug, debug_1869
    rx2548_cur."!cursor_debug"("PASS", "assertion:sym<name>", " at pos=", rx2548_pos)
  debug_1869:
    .return (rx2548_cur)
  rx2548_restart:
    if_null rx2548_debug, debug_1870
    rx2548_cur."!cursor_debug"("NEXT", "assertion:sym<name>")
  debug_1870:
  rx2548_fail:
    (rx2548_rep, rx2548_pos, $I10, $P10) = rx2548_cur."!mark_fail"(0)
    lt rx2548_pos, -1, rx2548_done
    eq rx2548_pos, -1, rx2548_fail
    jump $I10
  rx2548_done:
    rx2548_cur."!cursor_fail"()
    if_null rx2548_debug, debug_1871
    rx2548_cur."!cursor_debug"("FAIL", "assertion:sym<name>")
  debug_1871:
    .return (rx2548_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "_block2552"  :anon :subid("466_1329260321.776") :method :outer("465_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1448
    .local string rx2554_tgt
    .local int rx2554_pos
    .local int rx2554_off
    .local int rx2554_eos
    .local int rx2554_rep
    .local pmc rx2554_cur
    .local pmc rx2554_debug
    (rx2554_cur, rx2554_pos, rx2554_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2554_cur
    .local pmc match
    .lex "$/", match
    length rx2554_eos, rx2554_tgt
    gt rx2554_pos, rx2554_eos, rx2554_done
    set rx2554_off, 0
    lt rx2554_pos, 2, rx2554_start
    sub rx2554_off, rx2554_pos, 1
    substr rx2554_tgt, rx2554_tgt, rx2554_off
  rx2554_start:
    eq $I10, 1, rx2554_restart
    if_null rx2554_debug, debug_1865
    rx2554_cur."!cursor_debug"("START", "")
  debug_1865:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2555_done
    goto rxscan2555_scan
  rxscan2555_loop:
    (rx2554_pos) = rx2554_cur."from"()
    inc rx2554_pos
    rx2554_cur."!cursor_from"(rx2554_pos)
    ge rx2554_pos, rx2554_eos, rxscan2555_done
  rxscan2555_scan:
    set_addr $I10, rxscan2555_loop
    rx2554_cur."!mark_push"(0, rx2554_pos, $I10)
  rxscan2555_done:
  # rx literal  ">"
    add $I11, rx2554_pos, 1
    gt $I11, rx2554_eos, rx2554_fail
    sub $I11, rx2554_pos, rx2554_off
    ord $I11, rx2554_tgt, $I11
    ne $I11, 62, rx2554_fail
    add rx2554_pos, 1
  # rx pass
    rx2554_cur."!cursor_pass"(rx2554_pos, "")
    if_null rx2554_debug, debug_1866
    rx2554_cur."!cursor_debug"("PASS", "", " at pos=", rx2554_pos)
  debug_1866:
    .return (rx2554_cur)
  rx2554_restart:
    if_null rx2554_debug, debug_1867
    rx2554_cur."!cursor_debug"("NEXT", "")
  debug_1867:
  rx2554_fail:
    (rx2554_rep, rx2554_pos, $I10, $P10) = rx2554_cur."!mark_fail"(0)
    lt rx2554_pos, -1, rx2554_done
    eq rx2554_pos, -1, rx2554_fail
    jump $I10
  rx2554_done:
    rx2554_cur."!cursor_fail"()
    if_null rx2554_debug, debug_1868
    rx2554_cur."!cursor_debug"("FAIL", "")
  debug_1868:
    .return (rx2554_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "!PREFIX__assertion:sym<name>"  :subid("467_1329260321.776") :method :outer("451_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1445
    $P104 = self."!PREFIX__!subrule"("identifier", "")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "assertion:sym<var>"  :subid("468_1329260321.776") :method :outer("451_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1456
    .local string rx2558_tgt
    .local int rx2558_pos
    .local int rx2558_off
    .local int rx2558_eos
    .local int rx2558_rep
    .local pmc rx2558_cur
    .local pmc rx2558_debug
    (rx2558_cur, rx2558_pos, rx2558_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2558_cur
    .local pmc match
    .lex "$/", match
    length rx2558_eos, rx2558_tgt
    gt rx2558_pos, rx2558_eos, rx2558_done
    set rx2558_off, 0
    lt rx2558_pos, 2, rx2558_start
    sub rx2558_off, rx2558_pos, 1
    substr rx2558_tgt, rx2558_tgt, rx2558_off
  rx2558_start:
    eq $I10, 1, rx2558_restart
    if_null rx2558_debug, debug_1872
    rx2558_cur."!cursor_debug"("START", "assertion:sym<var>")
  debug_1872:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2559_done
    goto rxscan2559_scan
  rxscan2559_loop:
    (rx2558_pos) = rx2558_cur."from"()
    inc rx2558_pos
    rx2558_cur."!cursor_from"(rx2558_pos)
    ge rx2558_pos, rx2558_eos, rxscan2559_done
  rxscan2559_scan:
    set_addr $I10, rxscan2559_loop
    rx2558_cur."!mark_push"(0, rx2558_pos, $I10)
  rxscan2559_done:
.annotate 'line', 1457
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2558_pos, rx2558_off
    substr $S10, rx2558_tgt, $I10, 1
    index $I11, "$@", $S10
    lt $I11, 0, rx2558_fail
  # rx subrule "LANG" subtype=capture negate=
    rx2558_cur."!cursor_pos"(rx2558_pos)
    $P10 = rx2558_cur."LANG"("MAIN", "variable")
    unless $P10, rx2558_fail
    rx2558_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("var")
    rx2558_pos = $P10."pos"()
.annotate 'line', 1456
  # rx pass
    rx2558_cur."!cursor_pass"(rx2558_pos, "assertion:sym<var>")
    if_null rx2558_debug, debug_1873
    rx2558_cur."!cursor_debug"("PASS", "assertion:sym<var>", " at pos=", rx2558_pos)
  debug_1873:
    .return (rx2558_cur)
  rx2558_restart:
    if_null rx2558_debug, debug_1874
    rx2558_cur."!cursor_debug"("NEXT", "assertion:sym<var>")
  debug_1874:
  rx2558_fail:
    (rx2558_rep, rx2558_pos, $I10, $P10) = rx2558_cur."!mark_fail"(0)
    lt rx2558_pos, -1, rx2558_done
    eq rx2558_pos, -1, rx2558_fail
    jump $I10
  rx2558_done:
    rx2558_cur."!cursor_fail"()
    if_null rx2558_debug, debug_1875
    rx2558_cur."!cursor_debug"("FAIL", "assertion:sym<var>")
  debug_1875:
    .return (rx2558_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "!PREFIX__assertion:sym<var>"  :subid("469_1329260321.776") :method :outer("451_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1456
    new $P104, "ResizablePMCArray"
    push $P104, "$"
    push $P104, "@"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "codeblock"  :subid("470_1329260321.776") :method :outer("451_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1460
    .local string rx2562_tgt
    .local int rx2562_pos
    .local int rx2562_off
    .local int rx2562_eos
    .local int rx2562_rep
    .local pmc rx2562_cur
    .local pmc rx2562_debug
    (rx2562_cur, rx2562_pos, rx2562_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2562_cur
    .local pmc match
    .lex "$/", match
    length rx2562_eos, rx2562_tgt
    gt rx2562_pos, rx2562_eos, rx2562_done
    set rx2562_off, 0
    lt rx2562_pos, 2, rx2562_start
    sub rx2562_off, rx2562_pos, 1
    substr rx2562_tgt, rx2562_tgt, rx2562_off
  rx2562_start:
    eq $I10, 1, rx2562_restart
    if_null rx2562_debug, debug_1876
    rx2562_cur."!cursor_debug"("START", "codeblock")
  debug_1876:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2563_done
    goto rxscan2563_scan
  rxscan2563_loop:
    (rx2562_pos) = rx2562_cur."from"()
    inc rx2562_pos
    rx2562_cur."!cursor_from"(rx2562_pos)
    ge rx2562_pos, rx2562_eos, rxscan2563_done
  rxscan2563_scan:
    set_addr $I10, rxscan2563_loop
    rx2562_cur."!mark_push"(0, rx2562_pos, $I10)
  rxscan2563_done:
.annotate 'line', 1461
  # rx subrule "LANG" subtype=capture negate=
    rx2562_cur."!cursor_pos"(rx2562_pos)
    $P10 = rx2562_cur."LANG"("MAIN", "pblock")
    unless $P10, rx2562_fail
    rx2562_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("block")
    rx2562_pos = $P10."pos"()
.annotate 'line', 1460
  # rx pass
    rx2562_cur."!cursor_pass"(rx2562_pos, "codeblock")
    if_null rx2562_debug, debug_1877
    rx2562_cur."!cursor_debug"("PASS", "codeblock", " at pos=", rx2562_pos)
  debug_1877:
    .return (rx2562_cur)
  rx2562_restart:
    if_null rx2562_debug, debug_1878
    rx2562_cur."!cursor_debug"("NEXT", "codeblock")
  debug_1878:
  rx2562_fail:
    (rx2562_rep, rx2562_pos, $I10, $P10) = rx2562_cur."!mark_fail"(0)
    lt rx2562_pos, -1, rx2562_done
    eq rx2562_pos, -1, rx2562_fail
    jump $I10
  rx2562_done:
    rx2562_cur."!cursor_fail"()
    if_null rx2562_debug, debug_1879
    rx2562_cur."!cursor_debug"("FAIL", "codeblock")
  debug_1879:
    .return (rx2562_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "!PREFIX__codeblock"  :subid("471_1329260321.776") :method :outer("451_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1460
    $P104 = self."!PREFIX__!subrule"("LANG", "")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2565"  :subid("472_1329260321.776") :outer("10_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1467
    .const 'Sub' $P3779 = "642_1329260321.776" 
    capture_lex $P3779
    .const 'Sub' $P3776 = "641_1329260321.776" 
    capture_lex $P3776
    .const 'Sub' $P3773 = "640_1329260321.776" 
    capture_lex $P3773
    .const 'Sub' $P3770 = "639_1329260321.776" 
    capture_lex $P3770
    .const 'Sub' $P3767 = "638_1329260321.776" 
    capture_lex $P3767
    .const 'Sub' $P3764 = "637_1329260321.776" 
    capture_lex $P3764
    .const 'Sub' $P3761 = "636_1329260321.776" 
    capture_lex $P3761
    .const 'Sub' $P3757 = "635_1329260321.776" 
    capture_lex $P3757
    .const 'Sub' $P3754 = "634_1329260321.776" 
    capture_lex $P3754
    .const 'Sub' $P3750 = "633_1329260321.776" 
    capture_lex $P3750
    .const 'Sub' $P3746 = "632_1329260321.776" 
    capture_lex $P3746
    .const 'Sub' $P3735 = "631_1329260321.776" 
    capture_lex $P3735
    .const 'Sub' $P3731 = "630_1329260321.776" 
    capture_lex $P3731
    .const 'Sub' $P3727 = "629_1329260321.776" 
    capture_lex $P3727
    .const 'Sub' $P3723 = "628_1329260321.776" 
    capture_lex $P3723
    .const 'Sub' $P3719 = "627_1329260321.776" 
    capture_lex $P3719
    .const 'Sub' $P3715 = "626_1329260321.776" 
    capture_lex $P3715
    .const 'Sub' $P3711 = "625_1329260321.776" 
    capture_lex $P3711
    .const 'Sub' $P3701 = "624_1329260321.776" 
    capture_lex $P3701
    .const 'Sub' $P3694 = "623_1329260321.776" 
    capture_lex $P3694
    .const 'Sub' $P3690 = "622_1329260321.776" 
    capture_lex $P3690
    .const 'Sub' $P3686 = "621_1329260321.776" 
    capture_lex $P3686
    .const 'Sub' $P3682 = "620_1329260321.776" 
    capture_lex $P3682
    .const 'Sub' $P3678 = "619_1329260321.776" 
    capture_lex $P3678
    .const 'Sub' $P3674 = "618_1329260321.776" 
    capture_lex $P3674
    .const 'Sub' $P3665 = "617_1329260321.776" 
    capture_lex $P3665
    .const 'Sub' $P3647 = "615_1329260321.776" 
    capture_lex $P3647
    .const 'Sub' $P3643 = "614_1329260321.776" 
    capture_lex $P3643
    .const 'Sub' $P3639 = "613_1329260321.776" 
    capture_lex $P3639
    .const 'Sub' $P3630 = "612_1329260321.776" 
    capture_lex $P3630
    .const 'Sub' $P3623 = "611_1329260321.776" 
    capture_lex $P3623
    .const 'Sub' $P3619 = "610_1329260321.776" 
    capture_lex $P3619
    .const 'Sub' $P3615 = "609_1329260321.776" 
    capture_lex $P3615
    .const 'Sub' $P3584 = "606_1329260321.776" 
    capture_lex $P3584
    .const 'Sub' $P3580 = "605_1329260321.776" 
    capture_lex $P3580
    .const 'Sub' $P3577 = "604_1329260321.776" 
    capture_lex $P3577
    .const 'Sub' $P3565 = "603_1329260321.776" 
    capture_lex $P3565
    .const 'Sub' $P3561 = "602_1329260321.776" 
    capture_lex $P3561
    .const 'Sub' $P3551 = "601_1329260321.776" 
    capture_lex $P3551
    .const 'Sub' $P3532 = "599_1329260321.776" 
    capture_lex $P3532
    .const 'Sub' $P3526 = "598_1329260321.776" 
    capture_lex $P3526
    .const 'Sub' $P3523 = "597_1329260321.776" 
    capture_lex $P3523
    .const 'Sub' $P3503 = "596_1329260321.776" 
    capture_lex $P3503
    .const 'Sub' $P3454 = "591_1329260321.776" 
    capture_lex $P3454
    .const 'Sub' $P3418 = "586_1329260321.776" 
    capture_lex $P3418
    .const 'Sub' $P3414 = "585_1329260321.776" 
    capture_lex $P3414
    .const 'Sub' $P3396 = "583_1329260321.776" 
    capture_lex $P3396
    .const 'Sub' $P3389 = "582_1329260321.776" 
    capture_lex $P3389
    .const 'Sub' $P3384 = "581_1329260321.776" 
    capture_lex $P3384
    .const 'Sub' $P3347 = "580_1329260321.776" 
    capture_lex $P3347
    .const 'Sub' $P3328 = "577_1329260321.776" 
    capture_lex $P3328
    .const 'Sub' $P3295 = "574_1329260321.776" 
    capture_lex $P3295
    .const 'Sub' $P3219 = "566_1329260321.776" 
    capture_lex $P3219
    .const 'Sub' $P3215 = "565_1329260321.776" 
    capture_lex $P3215
    .const 'Sub' $P3211 = "564_1329260321.776" 
    capture_lex $P3211
    .const 'Sub' $P3171 = "561_1329260321.776" 
    capture_lex $P3171
    .const 'Sub' $P3167 = "560_1329260321.776" 
    capture_lex $P3167
    .const 'Sub' $P3160 = "559_1329260321.776" 
    capture_lex $P3160
    .const 'Sub' $P3153 = "558_1329260321.776" 
    capture_lex $P3153
    .const 'Sub' $P3146 = "557_1329260321.776" 
    capture_lex $P3146
    .const 'Sub' $P3136 = "556_1329260321.776" 
    capture_lex $P3136
    .const 'Sub' $P3132 = "555_1329260321.776" 
    capture_lex $P3132
    .const 'Sub' $P3128 = "554_1329260321.776" 
    capture_lex $P3128
    .const 'Sub' $P3124 = "553_1329260321.776" 
    capture_lex $P3124
    .const 'Sub' $P3057 = "547_1329260321.776" 
    capture_lex $P3057
    .const 'Sub' $P3031 = "546_1329260321.776" 
    capture_lex $P3031
    .const 'Sub' $P3027 = "545_1329260321.776" 
    capture_lex $P3027
    .const 'Sub' $P3023 = "544_1329260321.776" 
    capture_lex $P3023
    .const 'Sub' $P3019 = "543_1329260321.776" 
    capture_lex $P3019
    .const 'Sub' $P3015 = "542_1329260321.776" 
    capture_lex $P3015
    .const 'Sub' $P3011 = "541_1329260321.776" 
    capture_lex $P3011
    .const 'Sub' $P3007 = "540_1329260321.776" 
    capture_lex $P3007
    .const 'Sub' $P2953 = "534_1329260321.776" 
    capture_lex $P2953
    .const 'Sub' $P2943 = "533_1329260321.776" 
    capture_lex $P2943
    .const 'Sub' $P2937 = "532_1329260321.776" 
    capture_lex $P2937
    .const 'Sub' $P2933 = "531_1329260321.776" 
    capture_lex $P2933
    .const 'Sub' $P2929 = "530_1329260321.776" 
    capture_lex $P2929
    .const 'Sub' $P2925 = "529_1329260321.776" 
    capture_lex $P2925
    .const 'Sub' $P2921 = "528_1329260321.776" 
    capture_lex $P2921
    .const 'Sub' $P2917 = "527_1329260321.776" 
    capture_lex $P2917
    .const 'Sub' $P2913 = "526_1329260321.776" 
    capture_lex $P2913
    .const 'Sub' $P2909 = "525_1329260321.776" 
    capture_lex $P2909
    .const 'Sub' $P2905 = "524_1329260321.776" 
    capture_lex $P2905
    .const 'Sub' $P2901 = "523_1329260321.776" 
    capture_lex $P2901
    .const 'Sub' $P2897 = "522_1329260321.776" 
    capture_lex $P2897
    .const 'Sub' $P2893 = "521_1329260321.776" 
    capture_lex $P2893
    .const 'Sub' $P2889 = "520_1329260321.776" 
    capture_lex $P2889
    .const 'Sub' $P2885 = "519_1329260321.776" 
    capture_lex $P2885
    .const 'Sub' $P2878 = "518_1329260321.776" 
    capture_lex $P2878
    .const 'Sub' $P2871 = "517_1329260321.776" 
    capture_lex $P2871
    .const 'Sub' $P2867 = "516_1329260321.776" 
    capture_lex $P2867
    .const 'Sub' $P2862 = "515_1329260321.776" 
    capture_lex $P2862
    .const 'Sub' $P2857 = "514_1329260321.776" 
    capture_lex $P2857
    .const 'Sub' $P2848 = "513_1329260321.776" 
    capture_lex $P2848
    .const 'Sub' $P2837 = "512_1329260321.776" 
    capture_lex $P2837
    .const 'Sub' $P2831 = "511_1329260321.776" 
    capture_lex $P2831
    .const 'Sub' $P2826 = "510_1329260321.776" 
    capture_lex $P2826
    .const 'Sub' $P2807 = "508_1329260321.776" 
    capture_lex $P2807
    .const 'Sub' $P2801 = "507_1329260321.776" 
    capture_lex $P2801
    .const 'Sub' $P2798 = "506_1329260321.776" 
    capture_lex $P2798
    .const 'Sub' $P2795 = "505_1329260321.776" 
    capture_lex $P2795
    .const 'Sub' $P2781 = "503_1329260321.776" 
    capture_lex $P2781
    .const 'Sub' $P2778 = "502_1329260321.776" 
    capture_lex $P2778
    .const 'Sub' $P2766 = "500_1329260321.776" 
    capture_lex $P2766
    .const 'Sub' $P2762 = "499_1329260321.776" 
    capture_lex $P2762
    .const 'Sub' $P2758 = "498_1329260321.776" 
    capture_lex $P2758
    .const 'Sub' $P2753 = "497_1329260321.776" 
    capture_lex $P2753
    .const 'Sub' $P2724 = "495_1329260321.776" 
    capture_lex $P2724
    .const 'Sub' $P2706 = "493_1329260321.776" 
    capture_lex $P2706
    .const 'Sub' $P2686 = "491_1329260321.776" 
    capture_lex $P2686
    .const 'Sub' $P2676 = "490_1329260321.776" 
    capture_lex $P2676
    .const 'Sub' $P2672 = "489_1329260321.776" 
    capture_lex $P2672
    .const 'Sub' $P2643 = "486_1329260321.776" 
    capture_lex $P2643
    .const 'Sub' $P2638 = "485_1329260321.776" 
    capture_lex $P2638
    .const 'Sub' $P2620 = "483_1329260321.776" 
    capture_lex $P2620
    .const 'Sub' $P2616 = "482_1329260321.776" 
    capture_lex $P2616
    .const 'Sub' $P2608 = "481_1329260321.776" 
    capture_lex $P2608
    .const 'Sub' $P2598 = "479_1329260321.776" 
    capture_lex $P2598
    .const 'Sub' $P2593 = "478_1329260321.776" 
    capture_lex $P2593
    .const 'Sub' $P2587 = "477_1329260321.776" 
    capture_lex $P2587
    .const 'Sub' $P2574 = "474_1329260321.776" 
    capture_lex $P2574
    .const 'Sub' $P2568 = "473_1329260321.776" 
    capture_lex $P2568
.annotate 'line', 1468
    .const 'Sub' $P2568 = "473_1329260321.776" 
    newclosure $P2572, $P2568
    set $P2567, $P2572
    .lex "xblock_immediate", $P2567
.annotate 'line', 1473
    .const 'Sub' $P2574 = "474_1329260321.776" 
    newclosure $P2585, $P2574
    set $P2573, $P2585
    .lex "block_immediate", $P2573
.annotate 'line', 1483
    .const 'Sub' $P2587 = "477_1329260321.776" 
    newclosure $P2591, $P2587
    set $P2586, $P2591
    .lex "vivitype", $P2586
.annotate 'line', 1502
    .const 'Sub' $P2593 = "478_1329260321.776" 
    newclosure $P2596, $P2593
    set $P2592, $P2596
    .lex "colonpair_str", $P2592
.annotate 'line', 1683
    .const 'Sub' $P2598 = "479_1329260321.776" 
    newclosure $P2606, $P2598
    set $P2597, $P2606
    .lex "import_HOW_exports", $P2597
.annotate 'line', 1788
    .const 'Sub' $P2608 = "481_1329260321.776" 
    newclosure $P2614, $P2608
    set $P2607, $P2614
    .lex "push_block_handler", $P2607
.annotate 'line', 2341
    .const 'Sub' $P2616 = "482_1329260321.776" 
    newclosure $P2618, $P2616
    set $P2615, $P2618
    .lex "only_star_block", $P2615
.annotate 'line', 2350
    .const 'Sub' $P2620 = "483_1329260321.776" 
    newclosure $P2636, $P2620
    set $P2619, $P2636
    .lex "attach_multi_signature", $P2619
.annotate 'line', 2833
    .const 'Sub' $P2638 = "485_1329260321.776" 
    newclosure $P2641, $P2638
    set $P2637, $P2641
    .lex "control", $P2637
.annotate 'line', 2852
    .const 'Sub' $P2643 = "486_1329260321.776" 
    newclosure $P2669, $P2643
    set $P2642, $P2669
    .lex "lexical_package_lookup", $P2642
.annotate 'line', 1467
    .lex "$?PACKAGE", $P2670
    .lex "$?CLASS", $P2671
    set $P117, $P2567
    set $P117, $P2573
    set $P117, $P2586
    set $P117, $P2592
    set $P117, $P2597
    set $P117, $P2607
    set $P117, $P2615
    set $P117, $P2619
    set $P117, $P2637
    set $P117, $P2642
    .return ($P117)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "xblock_immediate"  :subid("473_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_2569
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1468
    .lex "$xblock", param_2569
.annotate 'line', 1469
    new $P104, "Float"
    assign $P104, 1
    set $I100, $P104
    set $P2570, param_2569
    unless_null $P2570, vivify_1880
    $P2570 = root_new ['parrot';'ResizablePMCArray']
  vivify_1880:
    set $P105, $P2570[$I100]
    unless_null $P105, vivify_1881
    new $P105, "Undef"
  vivify_1881:
    $P106 = "block_immediate"($P105)
    new $P107, "Float"
    assign $P107, 1
    set $I101, $P107
    set $P2571, param_2569
    unless_null $P2571, vivify_1882
    $P2571 = root_new ['parrot';'ResizablePMCArray']
    set param_2569, $P2571
  vivify_1882:
    set $P2571[$I101], $P106
.annotate 'line', 1468
    set $P104, param_2569
    unless_null $P104, vivify_1883
    new $P104, "Undef"
  vivify_1883:
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "block_immediate"  :subid("474_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_2575
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1473
    .const 'Sub' $P2579 = "475_1329260321.776" 
    capture_lex $P2579
    .lex "$block", param_2575
.annotate 'line', 1474
    set $P105, param_2575
    unless_null $P105, vivify_1884
    new $P105, "Undef"
  vivify_1884:
    $P105."blocktype"("immediate")
.annotate 'line', 1475
    set $P106, param_2575
    unless_null $P106, vivify_1885
    new $P106, "Undef"
  vivify_1885:
    $P107 = $P106."symtable"()
    unless $P107, unless_2577
    set $P105, $P107
    goto unless_2577_end
  unless_2577:
    set $P108, param_2575
    unless_null $P108, vivify_1886
    new $P108, "Undef"
  vivify_1886:
    $P109 = $P108."handlers"()
    set $P105, $P109
  unless_2577_end:
    if $P105, unless_2576_end
    .const 'Sub' $P2579 = "475_1329260321.776" 
    capture_lex $P2579
    $P2579()
  unless_2576_end:
.annotate 'line', 1473
    set $P105, param_2575
    unless_null $P105, vivify_1893
    new $P105, "Undef"
  vivify_1893:
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block2578"  :anon :subid("475_1329260321.776") :outer("474_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1475
    .const 'Sub' $P2582 = "476_1329260321.776" 
    capture_lex $P2582
.annotate 'line', 1476
    new $P110, "Undef"
    set $P2580, $P110
    .lex "$stmts", $P2580
    get_hll_global $P111, "GLOBAL"
    nqp_get_package_through_who $P112, $P111, "PAST"
    get_who $P113, $P112
    set $P114, $P113["Stmts"]
    find_lex $P115, "$block"
    unless_null $P115, vivify_1887
    new $P115, "Undef"
  vivify_1887:
    $P116 = $P114."new"($P115 :named("node"))
    set $P2580, $P116
.annotate 'line', 1477
    find_lex $P112, "$block"
    unless_null $P112, vivify_1888
    new $P112, "Undef"
  vivify_1888:
    $P113 = $P112."list"()
    defined $I100, $P113
    unless $I100, for_undef_1889
    iter $P111, $P113
    new $P115, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P115, loop2584_handler
    push_eh $P115
  loop2584_test:
    unless $P111, loop2584_done
    shift $P114, $P111
  loop2584_redo:
    .const 'Sub' $P2582 = "476_1329260321.776" 
    capture_lex $P2582
    $P2582($P114)
  loop2584_next:
    goto loop2584_test
  loop2584_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P116, exception, 'type'
    eq $P116, .CONTROL_LOOP_NEXT, loop2584_next
    eq $P116, .CONTROL_LOOP_REDO, loop2584_redo
  loop2584_done:
    pop_eh 
  for_undef_1889:
.annotate 'line', 1478
    set $P111, $P2580
    unless_null $P111, vivify_1892
    new $P111, "Undef"
  vivify_1892:
    store_lex "$block", $P111
.annotate 'line', 1475
    .return ($P111)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2581"  :anon :subid("476_1329260321.776") :outer("475_1329260321.776")
    .param pmc param_2583
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1477
    .lex "$_", param_2583
    find_lex $P115, "$stmts"
    unless_null $P115, vivify_1890
    new $P115, "Undef"
  vivify_1890:
    find_lex $P116, "$_"
    unless_null $P116, vivify_1891
    new $P116, "Undef"
  vivify_1891:
    $P117 = $P115."push"($P116)
    .return ($P117)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "vivitype"  :subid("477_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_2588
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1483
    .lex "$sigil", param_2588
.annotate 'line', 1484
    set $P107, param_2588
    unless_null $P107, vivify_1894
    new $P107, "Undef"
  vivify_1894:
    set $S100, $P107
    iseq $I100, $S100, "%"
    if $I100, if_2589
.annotate 'line', 1486
    set $P114, param_2588
    unless_null $P114, vivify_1895
    new $P114, "Undef"
  vivify_1895:
    set $S101, $P114
    iseq $I101, $S101, "@"
    if $I101, if_2590
    new $P120, "String"
    assign $P120, "Undef"
    set $P113, $P120
    goto if_2590_end
  if_2590:
.annotate 'line', 1487
    get_hll_global $P115, "GLOBAL"
    nqp_get_package_through_who $P116, $P115, "PAST"
    get_who $P117, $P116
    set $P118, $P117["Op"]
    $P119 = $P118."new"("    %r = root_new ['parrot';'ResizablePMCArray']" :named("inline"))
    set $P113, $P119
  if_2590_end:
    set $P106, $P113
.annotate 'line', 1484
    goto if_2589_end
  if_2589:
.annotate 'line', 1485
    get_hll_global $P108, "GLOBAL"
    nqp_get_package_through_who $P109, $P108, "PAST"
    get_who $P110, $P109
    set $P111, $P110["Op"]
    $P112 = $P111."new"("    %r = root_new ['parrot';'Hash']" :named("inline"))
    set $P106, $P112
  if_2589_end:
.annotate 'line', 1483
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "colonpair_str"  :subid("478_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_2594
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1502
    .lex "$ast", param_2594
.annotate 'line', 1503
    get_hll_global $P108, "GLOBAL"
    nqp_get_package_through_who $P109, $P108, "PAST"
    get_who $P110, $P109
    set $P111, $P110["Op"]
    set $P112, param_2594
    unless_null $P112, vivify_1896
    new $P112, "Undef"
  vivify_1896:
    $P113 = $P111."ACCEPTS"($P112)
    if $P113, if_2595
.annotate 'line', 1505
    set $P116, param_2594
    unless_null $P116, vivify_1897
    new $P116, "Undef"
  vivify_1897:
    $P117 = $P116."value"()
    set $P107, $P117
.annotate 'line', 1503
    goto if_2595_end
  if_2595:
.annotate 'line', 1504
    set $P114, param_2594
    unless_null $P114, vivify_1898
    new $P114, "Undef"
  vivify_1898:
    $P115 = $P114."list"()
    join $S100, " ", $P115
    new $P107, 'String'
    set $P107, $S100
  if_2595_end:
.annotate 'line', 1502
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "import_HOW_exports"  :subid("479_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_2599
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1683
    .const 'Sub' $P2603 = "480_1329260321.776" 
    capture_lex $P2603
    .lex "$UNIT", param_2599
.annotate 'line', 1685
    set $P109, param_2599
    unless_null $P109, vivify_1899
    new $P109, "Undef"
  vivify_1899:
    exists $I100, $P109["EXPORTHOW"]
    if $I100, if_2600
    new $P108, 'Integer'
    set $P108, $I100
    goto if_2600_end
  if_2600:
.annotate 'line', 1686
    set $P2601, param_2599
    unless_null $P2601, vivify_1900
    $P2601 = root_new ['parrot';'Hash']
  vivify_1900:
    set $P111, $P2601["EXPORTHOW"]
    unless_null $P111, vivify_1901
    new $P111, "Undef"
  vivify_1901:
    get_who $P112, $P111
    defined $I101, $P112
    unless $I101, for_undef_1902
    iter $P110, $P112
    new $P114, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P114, loop2605_handler
    push_eh $P114
  loop2605_test:
    unless $P110, loop2605_done
    shift $P113, $P110
  loop2605_redo:
    .const 'Sub' $P2603 = "480_1329260321.776" 
    capture_lex $P2603
    $P2603($P113)
  loop2605_next:
    goto loop2605_test
  loop2605_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P116, exception, 'type'
    eq $P116, .CONTROL_LOOP_NEXT, loop2605_next
    eq $P116, .CONTROL_LOOP_REDO, loop2605_redo
  loop2605_done:
    pop_eh 
  for_undef_1902:
.annotate 'line', 1685
    set $P108, $P110
  if_2600_end:
.annotate 'line', 1683
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2602"  :anon :subid("480_1329260321.776") :outer("479_1329260321.776")
    .param pmc param_2604
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1686
    .lex "$_", param_2604
.annotate 'line', 1687
    find_lex $P114, "$_"
    unless_null $P114, vivify_1903
    new $P114, "Undef"
  vivify_1903:
    $P115 = $P114."value"()
    find_lex $P116, "$_"
    unless_null $P116, vivify_1904
    new $P116, "Undef"
  vivify_1904:
    $P117 = $P116."key"()
    find_dynamic_lex $P120, "%*HOW"
    unless_null $P120, vivify_1905
    get_hll_global $P118, "GLOBAL"
    get_who $P119, $P118
    set $P120, $P119["%HOW"]
    unless_null $P120, vivify_1906
    die "Contextual %*HOW not found"
  vivify_1906:
    store_dynamic_lex "%*HOW", $P120
  vivify_1905:
    set $P120[$P117], $P115
.annotate 'line', 1686
    .return ($P115)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "push_block_handler"  :subid("481_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_2609
    .param pmc param_2610
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1788
    .lex "$/", param_2609
    .lex "$block", param_2610
.annotate 'line', 1789
    new $P109, "Undef"
    set $P2611, $P109
    .lex "$BLOCK", $P2611
    find_dynamic_lex $P112, "$*W"
    unless_null $P112, vivify_1907
    get_hll_global $P110, "GLOBAL"
    get_who $P111, $P110
    set $P112, $P111["$W"]
    unless_null $P112, vivify_1908
    die "Contextual $*W not found"
  vivify_1908:
  vivify_1907:
    $P113 = $P112."cur_lexpad"()
    set $P2611, $P113
.annotate 'line', 1790
    set $P110, $P2611
    unless_null $P110, vivify_1909
    new $P110, "Undef"
  vivify_1909:
    $P111 = $P110."handlers"()
    if $P111, unless_2612_end
.annotate 'line', 1791
    set $P112, $P2611
    unless_null $P112, vivify_1910
    new $P112, "Undef"
  vivify_1910:
    new $P113, "ResizablePMCArray"
    $P112."handlers"($P113)
  unless_2612_end:
.annotate 'line', 1793
    set $P110, param_2610
    unless_null $P110, vivify_1911
    new $P110, "Undef"
  vivify_1911:
    $P111 = $P110."arity"()
    if $P111, unless_2613_end
.annotate 'line', 1794
    set $P112, param_2610
    unless_null $P112, vivify_1912
    new $P112, "Undef"
  vivify_1912:
.annotate 'line', 1795
    get_hll_global $P113, "GLOBAL"
    nqp_get_package_through_who $P114, $P113, "PAST"
    get_who $P115, $P114
    set $P116, $P115["Op"]
.annotate 'line', 1796
    get_hll_global $P117, "GLOBAL"
    nqp_get_package_through_who $P118, $P117, "PAST"
    get_who $P119, $P118
    set $P120, $P119["Var"]
    $P121 = $P120."new"("lexical" :named("scope"), "$!" :named("name"), 1 :named("isdecl"))
.annotate 'line', 1797
    get_hll_global $P122, "GLOBAL"
    nqp_get_package_through_who $P123, $P122, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Var"]
    $P126 = $P125."new"("lexical" :named("scope"), "$_" :named("name"))
    $P127 = $P116."new"($P121, $P126, "bind_6model" :named("pasttype"))
.annotate 'line', 1795
    $P112."unshift"($P127)
.annotate 'line', 1800
    set $P112, param_2610
    unless_null $P112, vivify_1913
    new $P112, "Undef"
  vivify_1913:
    get_hll_global $P113, "GLOBAL"
    nqp_get_package_through_who $P114, $P113, "PAST"
    get_who $P115, $P114
    set $P116, $P115["Var"]
    $P117 = $P116."new"("$_" :named("name"), "parameter" :named("scope"))
    $P112."unshift"($P117)
.annotate 'line', 1801
    set $P112, param_2610
    unless_null $P112, vivify_1914
    new $P112, "Undef"
  vivify_1914:
    $P112."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1802
    set $P112, param_2610
    unless_null $P112, vivify_1915
    new $P112, "Undef"
  vivify_1915:
    $P112."symbol"("$!", "lexical" :named("scope"))
.annotate 'line', 1803
    set $P112, param_2610
    unless_null $P112, vivify_1916
    new $P112, "Undef"
  vivify_1916:
    $P112."arity"(1)
  unless_2613_end:
.annotate 'line', 1805
    set $P110, param_2610
    unless_null $P110, vivify_1917
    new $P110, "Undef"
  vivify_1917:
    $P110."blocktype"("declaration")
.annotate 'line', 1806
    set $P110, $P2611
    unless_null $P110, vivify_1918
    new $P110, "Undef"
  vivify_1918:
    $P111 = $P110."handlers"()
.annotate 'line', 1807
    get_hll_global $P112, "GLOBAL"
    nqp_get_package_through_who $P113, $P112, "PAST"
    get_who $P114, $P113
    set $P115, $P114["Control"]
    set $P116, param_2609
    unless_null $P116, vivify_1919
    new $P116, "Undef"
  vivify_1919:
.annotate 'line', 1809
    get_hll_global $P117, "GLOBAL"
    nqp_get_package_through_who $P118, $P117, "PAST"
    get_who $P119, $P118
    set $P120, $P119["Stmts"]
.annotate 'line', 1810
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "PAST"
    get_who $P123, $P122
    set $P124, $P123["Op"]
    set $P125, param_2610
    unless_null $P125, vivify_1920
    new $P125, "Undef"
  vivify_1920:
.annotate 'line', 1812
    get_hll_global $P126, "GLOBAL"
    nqp_get_package_through_who $P127, $P126, "PAST"
    get_who $P128, $P127
    set $P129, $P128["Var"]
    $P130 = $P129."new"("register" :named("scope"), "exception" :named("name"))
    $P131 = $P124."new"($P125, $P130, "call" :named("pasttype"))
.annotate 'line', 1814
    get_hll_global $P132, "GLOBAL"
    nqp_get_package_through_who $P133, $P132, "PAST"
    get_who $P134, $P133
    set $P135, $P134["Op"]
.annotate 'line', 1815
    get_hll_global $P136, "GLOBAL"
    nqp_get_package_through_who $P137, $P136, "PAST"
    get_who $P138, $P137
    set $P139, $P138["Var"]
.annotate 'line', 1816
    get_hll_global $P140, "GLOBAL"
    nqp_get_package_through_who $P141, $P140, "PAST"
    get_who $P142, $P141
    set $P143, $P142["Var"]
    $P144 = $P143."new"("register" :named("scope"), "exception" :named("name"))
    $P145 = $P139."new"($P144, "handled", "keyed" :named("scope"))
.annotate 'line', 1815
    $P146 = $P135."new"($P145, 1, "bind_6model" :named("pasttype"))
.annotate 'line', 1814
    $P147 = $P120."new"($P131, $P146)
.annotate 'line', 1809
    $P148 = $P115."new"($P147, $P116 :named("node"))
.annotate 'line', 1807
    $P149 = $P111."unshift"($P148)
.annotate 'line', 1788
    .return ($P149)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "only_star_block"  :subid("482_1329260321.776") :outer("472_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2342
    new $P110, "Undef"
    set $P2617, $P110
    .lex "$past", $P2617
    find_dynamic_lex $P113, "$*W"
    unless_null $P113, vivify_1921
    get_hll_global $P111, "GLOBAL"
    get_who $P112, $P111
    set $P113, $P112["$W"]
    unless_null $P113, vivify_1922
    die "Contextual $*W not found"
  vivify_1922:
  vivify_1921:
    $P114 = $P113."pop_lexpad"()
    set $P2617, $P114
.annotate 'line', 2343
    set $P111, $P2617
    unless_null $P111, vivify_1923
    new $P111, "Undef"
  vivify_1923:
    $P111."closure"(1)
.annotate 'line', 2344
    set $P111, $P2617
    unless_null $P111, vivify_1924
    new $P111, "Undef"
  vivify_1924:
    get_hll_global $P112, "GLOBAL"
    nqp_get_package_through_who $P113, $P112, "PAST"
    get_who $P114, $P113
    set $P115, $P114["Op"]
    $P116 = $P115."new"("multi_dispatch_over_lexical_candidates P" :named("pirop"))
    $P111."push"($P116)
.annotate 'line', 2341
    set $P111, $P2617
    unless_null $P111, vivify_1925
    new $P111, "Undef"
  vivify_1925:
    .return ($P111)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "attach_multi_signature"  :subid("483_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_2621
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2350
    .const 'Sub' $P2626 = "484_1329260321.776" 
    capture_lex $P2626
    .lex "$routine", param_2621
.annotate 'line', 2354
    new $P112, "Undef"
    set $P2622, $P112
    .lex "$types", $P2622
.annotate 'line', 2355
    new $P113, "Undef"
    set $P2623, $P113
    .lex "$definednesses", $P2623
.annotate 'line', 2354
    new $P114, "ResizablePMCArray"
    set $P2622, $P114
.annotate 'line', 2355
    new $P114, "ResizablePMCArray"
    set $P2623, $P114
.annotate 'line', 2356
    new $P115, "Float"
    assign $P115, 0
    set $I100, $P115
    set $P2624, param_2621
    unless_null $P2624, vivify_1926
    $P2624 = root_new ['parrot';'ResizablePMCArray']
  vivify_1926:
    set $P116, $P2624[$I100]
    unless_null $P116, vivify_1927
    new $P116, "Undef"
  vivify_1927:
    $P117 = $P116."list"()
    defined $I101, $P117
    unless $I101, for_undef_1928
    iter $P114, $P117
    new $P120, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P120, loop2635_handler
    push_eh $P120
  loop2635_test:
    unless $P114, loop2635_done
    shift $P118, $P114
  loop2635_redo:
    .const 'Sub' $P2626 = "484_1329260321.776" 
    capture_lex $P2626
    $P2626($P118)
  loop2635_next:
    goto loop2635_test
  loop2635_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P121, exception, 'type'
    eq $P121, .CONTROL_LOOP_NEXT, loop2635_next
    eq $P121, .CONTROL_LOOP_REDO, loop2635_redo
  loop2635_done:
    pop_eh 
  for_undef_1928:
.annotate 'line', 2363
    find_dynamic_lex $P116, "$*W"
    unless_null $P116, vivify_1940
    get_hll_global $P114, "GLOBAL"
    get_who $P115, $P114
    set $P116, $P115["$W"]
    unless_null $P116, vivify_1941
    die "Contextual $*W not found"
  vivify_1941:
  vivify_1940:
    set $P117, param_2621
    unless_null $P117, vivify_1942
    new $P117, "Undef"
  vivify_1942:
    set $P118, $P2622
    unless_null $P118, vivify_1943
    new $P118, "Undef"
  vivify_1943:
    set $P119, $P2623
    unless_null $P119, vivify_1944
    new $P119, "Undef"
  vivify_1944:
    $P120 = $P116."set_routine_signature"($P117, $P118, $P119)
.annotate 'line', 2350
    .return ($P120)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2625"  :anon :subid("484_1329260321.776") :outer("483_1329260321.776")
    .param pmc param_2627
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2356
    .lex "$_", param_2627
.annotate 'line', 2357
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "PAST"
    get_who $P123, $P122
    set $P124, $P123["Var"]
    find_lex $P125, "$_"
    unless_null $P125, vivify_1929
    new $P125, "Undef"
  vivify_1929:
    $P126 = $P124."ACCEPTS"($P125)
    if $P126, if_2629
    set $P120, $P126
    goto if_2629_end
  if_2629:
    find_lex $P127, "$_"
    unless_null $P127, vivify_1930
    new $P127, "Undef"
  vivify_1930:
    $S100 = $P127."scope"()
    iseq $I102, $S100, "parameter"
    new $P120, 'Integer'
    set $P120, $I102
  if_2629_end:
    if $P120, if_2628
    set $P119, $P120
    goto if_2628_end
  if_2628:
.annotate 'line', 2358
    find_lex $P128, "$types"
    unless_null $P128, vivify_1931
    new $P128, "Undef"
  vivify_1931:
    find_lex $P130, "$_"
    unless_null $P130, vivify_1932
    new $P130, "Undef"
  vivify_1932:
    $P131 = $P130."multitype"()
    if $P131, if_2630
    null $P135
    set $P129, $P135
    goto if_2630_end
  if_2630:
    find_lex $P132, "$_"
    unless_null $P132, vivify_1933
    new $P132, "Undef"
  vivify_1933:
    $P133 = $P132."multitype"()
    set $P134, $P133["compile_time_value"]
    unless_null $P134, vivify_1934
    new $P134, "Undef"
  vivify_1934:
    set $P129, $P134
  if_2630_end:
    $P128."push"($P129)
.annotate 'line', 2359
    find_lex $P128, "$definednesses"
    unless_null $P128, vivify_1935
    new $P128, "Undef"
  vivify_1935:
    find_lex $P2632, "$_"
    unless_null $P2632, vivify_1936
    $P2632 = root_new ['parrot';'Hash']
  vivify_1936:
    set $P130, $P2632["definedness"]
    unless_null $P130, vivify_1937
    new $P130, "Undef"
  vivify_1937:
    set $S101, $P130
    iseq $I103, $S101, "D"
    if $I103, if_2631
.annotate 'line', 2360
    find_lex $P2634, "$_"
    unless_null $P2634, vivify_1938
    $P2634 = root_new ['parrot';'Hash']
  vivify_1938:
    set $P133, $P2634["definedness"]
    unless_null $P133, vivify_1939
    new $P133, "Undef"
  vivify_1939:
    set $S102, $P133
    iseq $I104, $S102, "U"
    if $I104, if_2633
    new $P135, "Float"
    assign $P135, 0
    set $P132, $P135
    goto if_2633_end
  if_2633:
    new $P134, "Float"
    assign $P134, 2
    set $P132, $P134
  if_2633_end:
    set $P129, $P132
.annotate 'line', 2359
    goto if_2631_end
  if_2631:
    new $P131, "Float"
    assign $P131, 1
    set $P129, $P131
  if_2631_end:
    $P136 = $P128."push"($P129)
.annotate 'line', 2357
    set $P119, $P136
  if_2628_end:
.annotate 'line', 2356
    .return ($P119)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "control"  :subid("485_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_2639
    .param pmc param_2640
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2833
    .lex "$/", param_2639
    .lex "$type", param_2640
.annotate 'line', 2834
    set $P114, param_2639
    get_hll_global $P115, "GLOBAL"
    nqp_get_package_through_who $P116, $P115, "PAST"
    get_who $P117, $P116
    set $P118, $P117["Op"]
    set $P119, param_2639
    unless_null $P119, vivify_1945
    new $P119, "Undef"
  vivify_1945:
.annotate 'line', 2838
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "PAST"
    get_who $P123, $P122
    set $P124, $P123["Val"]
    set $P125, param_2640
    unless_null $P125, vivify_1946
    new $P125, "Undef"
  vivify_1946:
    $P126 = $P124."new"($P125 :named("value"), "!macro_const" :named("returns"))
    $P127 = $P118."new"(0, $P126, $P119 :named("node"), "die__vii" :named("pirop"))
.annotate 'line', 2834
    $P128 = $P114."!make"($P127)
.annotate 'line', 2833
    .return ($P128)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "lexical_package_lookup"  :subid("486_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_2646
    .param pmc param_2647
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2852
    .const 'Sub' $P2656 = "487_1329260321.776" 
    capture_lex $P2656
    new $P2645, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P2645, control_2644
    push_eh $P2645
    .lex "@name", param_2646
    .lex "$/", param_2647
.annotate 'line', 2858
    new $P114, "Undef"
    set $P2648, $P114
    .lex "$final_name", $P2648
.annotate 'line', 2859
    new $P115, "Undef"
    set $P2649, $P115
    .lex "$lookup", $P2649
.annotate 'line', 2854
    set $P2651, param_2646
    unless_null $P2651, vivify_1947
    $P2651 = root_new ['parrot';'ResizablePMCArray']
  vivify_1947:
    set $N100, $P2651
    set $N101, 0
    iseq $I100, $N100, $N101
    unless $I100, if_2650_end
    set $P116, param_2647
    unless_null $P116, vivify_1948
    new $P116, "Undef"
  vivify_1948:
    $P117 = $P116."CURSOR"()
    $P117."panic"("Cannot compile empty name")
  if_2650_end:
.annotate 'line', 2858
    set $P2652, param_2646
    unless_null $P2652, vivify_1949
    $P2652 = root_new ['parrot';'ResizablePMCArray']
  vivify_1949:
    $P116 = $P2652."pop"()
    set $P2648, $P116
.annotate 'line', 2859
    get_hll_global $P116, "GLOBAL"
    nqp_get_package_through_who $P117, $P116, "PAST"
    get_who $P118, $P117
    set $P119, $P118["Var"]
    set $P121, $P2648
    unless_null $P121, vivify_1950
    new $P121, "Undef"
  vivify_1950:
    set $S100, $P121
    $P122 = $P119."new"($S100, "keyed" :named("scope"))
    set $P2649, $P122
.annotate 'line', 2863
    set $P2654, param_2646
    unless_null $P2654, vivify_1951
    $P2654 = root_new ['parrot';'ResizablePMCArray']
  vivify_1951:
    set $N100, $P2654
    set $N101, 0
    iseq $I100, $N100, $N101
    if $I100, if_2653
.annotate 'line', 2881
    .const 'Sub' $P2656 = "487_1329260321.776" 
    capture_lex $P2656
    $P2656()
    goto if_2653_end
  if_2653:
.annotate 'line', 2864
    set $P116, $P2649
    unless_null $P116, vivify_1966
    new $P116, "Undef"
  vivify_1966:
    get_hll_global $P117, "GLOBAL"
    nqp_get_package_through_who $P118, $P117, "PAST"
    get_who $P119, $P118
    set $P121, $P119["Op"]
.annotate 'line', 2866
    get_hll_global $P122, "GLOBAL"
    nqp_get_package_through_who $P123, $P122, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Var"]
    $P126 = $P125."new"("$?PACKAGE" :named("name"), "lexical" :named("scope"))
    $P127 = $P121."new"($P126, "get_who PP" :named("pirop"))
.annotate 'line', 2864
    $P116."unshift"($P127)
.annotate 'line', 2868
    set $P116, $P2649
    unless_null $P116, vivify_1967
    new $P116, "Undef"
  vivify_1967:
    get_hll_global $P117, "GLOBAL"
    nqp_get_package_through_who $P118, $P117, "PAST"
    get_who $P119, $P118
    set $P121, $P119["Var"]
.annotate 'line', 2870
    get_hll_global $P122, "GLOBAL"
    nqp_get_package_through_who $P123, $P122, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Op"]
.annotate 'line', 2872
    get_hll_global $P126, "GLOBAL"
    nqp_get_package_through_who $P127, $P126, "PAST"
    get_who $P129, $P127
    set $P130, $P129["Var"]
    new $P131, "ResizablePMCArray"
    $P132 = $P130."new"("GLOBAL" :named("name"), $P131 :named("namespace"), "package" :named("scope"))
    $P133 = $P125."new"($P132, "get_who PP" :named("pirop"))
.annotate 'line', 2874
    set $P134, $P2648
    unless_null $P134, vivify_1968
    new $P134, "Undef"
  vivify_1968:
    set $S100, $P134
    $P135 = $P121."new"($P133, $S100, "keyed" :named("scope"))
.annotate 'line', 2868
    $P116."viviself"($P135)
  if_2653_end:
.annotate 'line', 2896
    new $P116, "Exception"
    set $P116['type'], .CONTROL_RETURN
    set $P117, $P2649
    unless_null $P117, vivify_1969
    new $P117, "Undef"
  vivify_1969:
    setattribute $P116, 'payload', $P117
    throw $P116
.annotate 'line', 2852
    .return ()
  control_2644:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P116, exception, "payload"
    .return ($P116)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block2655"  :anon :subid("487_1329260321.776") :outer("486_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2881
    .const 'Sub' $P2666 = "488_1329260321.776" 
    capture_lex $P2666
.annotate 'line', 2882
    new $P116, "Undef"
    set $P2657, $P116
    .lex "$path", $P2657
    find_dynamic_lex $P121, "$*W"
    unless_null $P121, vivify_1952
    get_hll_global $P118, "GLOBAL"
    get_who $P119, $P118
    set $P121, $P119["$W"]
    unless_null $P121, vivify_1953
    die "Contextual $*W not found"
  vivify_1953:
  vivify_1952:
    new $P122, "Float"
    assign $P122, 0
    set $I101, $P122
    find_lex $P2659, "@name"
    unless_null $P2659, vivify_1954
    $P2659 = root_new ['parrot';'ResizablePMCArray']
  vivify_1954:
    set $P123, $P2659[$I101]
    unless_null $P123, vivify_1955
    new $P123, "Undef"
  vivify_1955:
    $P124 = $P121."is_lexical"($P123)
    if $P124, if_2658
.annotate 'line', 2884
    get_hll_global $P132, "GLOBAL"
    nqp_get_package_through_who $P133, $P132, "PAST"
    get_who $P134, $P133
    set $P135, $P134["Var"]
    new $P136, "ResizablePMCArray"
    $P137 = $P135."new"("GLOBAL" :named("name"), $P136 :named("namespace"), "package" :named("scope"))
    set $P117, $P137
.annotate 'line', 2882
    goto if_2658_end
  if_2658:
.annotate 'line', 2883
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P129, $P127["Var"]
    find_lex $P2660, "@name"
    unless_null $P2660, vivify_1956
    $P2660 = root_new ['parrot';'ResizablePMCArray']
  vivify_1956:
    $P130 = $P2660."shift"()
    $P131 = $P129."new"($P130 :named("name"), "lexical" :named("scope"))
    set $P117, $P131
  if_2658_end:
.annotate 'line', 2882
    set $P2657, $P117
.annotate 'line', 2885
    new $P117, "Float"
    assign $P117, 0
    set $I101, $P117
    find_lex $P2662, "@name"
    unless_null $P2662, vivify_1957
    $P2662 = root_new ['parrot';'ResizablePMCArray']
  vivify_1957:
    set $P118, $P2662[$I101]
    unless_null $P118, vivify_1958
    new $P118, "Undef"
  vivify_1958:
    set $S100, $P118
    iseq $I102, $S100, "GLOBAL"
    unless $I102, if_2661_end
.annotate 'line', 2886
    find_lex $P2663, "@name"
    unless_null $P2663, vivify_1959
    $P2663 = root_new ['parrot';'ResizablePMCArray']
  vivify_1959:
    $P2663."shift"()
  if_2661_end:
.annotate 'line', 2888
    find_lex $P2664, "@name"
    unless_null $P2664, vivify_1960
    $P2664 = root_new ['parrot';'ResizablePMCArray']
  vivify_1960:
    defined $I101, $P2664
    unless $I101, for_undef_1961
    iter $P117, $P2664
    new $P119, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P119, loop2668_handler
    push_eh $P119
  loop2668_test:
    unless $P117, loop2668_done
    shift $P118, $P117
  loop2668_redo:
    .const 'Sub' $P2666 = "488_1329260321.776" 
    capture_lex $P2666
    $P2666($P118)
  loop2668_next:
    goto loop2668_test
  loop2668_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P121, exception, 'type'
    eq $P121, .CONTROL_LOOP_NEXT, loop2668_next
    eq $P121, .CONTROL_LOOP_REDO, loop2668_redo
  loop2668_done:
    pop_eh 
  for_undef_1961:
.annotate 'line', 2893
    find_lex $P117, "$lookup"
    unless_null $P117, vivify_1964
    new $P117, "Undef"
  vivify_1964:
    get_hll_global $P118, "GLOBAL"
    nqp_get_package_through_who $P119, $P118, "PAST"
    get_who $P121, $P119
    set $P122, $P121["Op"]
    set $P123, $P2657
    unless_null $P123, vivify_1965
    new $P123, "Undef"
  vivify_1965:
    $P124 = $P122."new"($P123, "get_who PP" :named("pirop"))
    $P125 = $P117."unshift"($P124)
.annotate 'line', 2881
    .return ($P125)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2665"  :anon :subid("488_1329260321.776") :outer("487_1329260321.776")
    .param pmc param_2667
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2888
    .lex "$_", param_2667
.annotate 'line', 2889
    get_hll_global $P119, "GLOBAL"
    nqp_get_package_through_who $P121, $P119, "PAST"
    get_who $P122, $P121
    set $P123, $P122["Op"]
    find_lex $P124, "$path"
    unless_null $P124, vivify_1962
    new $P124, "Undef"
  vivify_1962:
.annotate 'line', 2891
    find_lex $P125, "$_"
    unless_null $P125, vivify_1963
    new $P125, "Undef"
  vivify_1963:
    set $S100, $P125
    $P126 = $P123."new"($P124, $S100, "nqp_get_package_through_who PPs" :named("pirop"))
.annotate 'line', 2889
    store_lex "$path", $P126
.annotate 'line', 2888
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "TOP" :anon :subid("489_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_2673
    .param pmc param_2674
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1492
    .lex "self", param_2673
    .lex "$/", param_2674
    set $P117, param_2674
    set $P2675, param_2674
    unless_null $P2675, vivify_1970
    $P2675 = root_new ['parrot';'Hash']
  vivify_1970:
    set $P118, $P2675["comp_unit"]
    unless_null $P118, vivify_1971
    new $P118, "Undef"
  vivify_1971:
    $P119 = $P118."ast"()
    $P121 = $P117."!make"($P119)
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "deflongname" :anon :subid("490_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_2677
    .param pmc param_2678
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1494
    .lex "self", param_2677
    .lex "$/", param_2678
.annotate 'line', 1495
    set $P117, param_2678
.annotate 'line', 1496
    set $P2680, param_2678
    unless_null $P2680, vivify_1972
    $P2680 = root_new ['parrot';'Hash']
  vivify_1972:
    set $P119, $P2680["colonpair"]
    unless_null $P119, vivify_1973
    new $P119, "Undef"
  vivify_1973:
    if $P119, if_2679
.annotate 'line', 1498
    set $P135, param_2678
    unless_null $P135, vivify_1974
    new $P135, "Undef"
  vivify_1974:
    set $S103, $P135
    new $P118, 'String'
    set $P118, $S103
.annotate 'line', 1496
    goto if_2679_end
  if_2679:
    set $P2681, param_2678
    unless_null $P2681, vivify_1975
    $P2681 = root_new ['parrot';'Hash']
  vivify_1975:
    set $P121, $P2681["identifier"]
    unless_null $P121, vivify_1976
    new $P121, "Undef"
  vivify_1976:
    set $S100, $P121
    new $P122, 'String'
    set $P122, $S100
    concat $P123, $P122, ":"
    new $P124, "Float"
    assign $P124, 0
    set $I100, $P124
    set $P2682, param_2678
    unless_null $P2682, vivify_1977
    $P2682 = root_new ['parrot';'Hash']
  vivify_1977:
    set $P2683, $P2682["colonpair"]
    unless_null $P2683, vivify_1978
    $P2683 = root_new ['parrot';'ResizablePMCArray']
  vivify_1978:
    set $P125, $P2683[$I100]
    unless_null $P125, vivify_1979
    new $P125, "Undef"
  vivify_1979:
    $P126 = $P125."ast"()
    $S101 = $P126."named"()
    concat $P127, $P123, $S101
    concat $P129, $P127, "<"
.annotate 'line', 1497
    new $P130, "Float"
    assign $P130, 0
    set $I101, $P130
    set $P2684, param_2678
    unless_null $P2684, vivify_1980
    $P2684 = root_new ['parrot';'Hash']
  vivify_1980:
    set $P2685, $P2684["colonpair"]
    unless_null $P2685, vivify_1981
    $P2685 = root_new ['parrot';'ResizablePMCArray']
  vivify_1981:
    set $P131, $P2685[$I101]
    unless_null $P131, vivify_1982
    new $P131, "Undef"
  vivify_1982:
    $P132 = $P131."ast"()
    $S102 = "colonpair_str"($P132)
    concat $P133, $P129, $S102
    concat $P134, $P133, ">"
    set $P118, $P134
  if_2679_end:
.annotate 'line', 1496
    $P136 = $P117."!make"($P118)
.annotate 'line', 1494
    .return ($P136)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "comp_unit" :anon :subid("491_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_2687
    .param pmc param_2688
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1508
    .const 'Sub' $P2700 = "492_1329260321.776" 
    capture_lex $P2700
    .lex "self", param_2687
    .lex "$/", param_2688
.annotate 'line', 1509
    new $P117, "Undef"
    set $P2689, $P117
    .lex "$mainline", $P2689
.annotate 'line', 1510
    new $P118, "Undef"
    set $P2690, $P118
    .lex "$unit", $P2690
.annotate 'line', 1533
    $P2692 = root_new ['parrot';'ResizablePMCArray']
    set $P2691, $P2692
    .lex "@loadlibs", $P2691
.annotate 'line', 1547
    new $P119, "Undef"
    set $P2693, $P119
    .lex "$main_tasks", $P2693
.annotate 'line', 1509
    set $P2694, param_2688
    unless_null $P2694, vivify_1983
    $P2694 = root_new ['parrot';'Hash']
  vivify_1983:
    set $P121, $P2694["statementlist"]
    unless_null $P121, vivify_1984
    new $P121, "Undef"
  vivify_1984:
    $P122 = $P121."ast"()
    set $P2689, $P122
.annotate 'line', 1510
    find_dynamic_lex $P123, "$*W"
    unless_null $P123, vivify_1985
    get_hll_global $P121, "GLOBAL"
    get_who $P122, $P121
    set $P123, $P122["$W"]
    unless_null $P123, vivify_1986
    die "Contextual $*W not found"
  vivify_1986:
  vivify_1985:
    $P124 = $P123."pop_lexpad"()
    set $P2690, $P124
.annotate 'line', 1514
    set $P121, $P2690
    unless_null $P121, vivify_1987
    new $P121, "Undef"
  vivify_1987:
    $P122 = $P121."loadinit"()
    find_dynamic_lex $P125, "$*W"
    unless_null $P125, vivify_1988
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$W"]
    unless_null $P125, vivify_1989
    die "Contextual $*W not found"
  vivify_1989:
  vivify_1988:
    $P126 = $P125."to_past"()
    $P122."push"($P126)
.annotate 'line', 1519
    set $P121, $P2690
    unless_null $P121, vivify_1990
    new $P121, "Undef"
  vivify_1990:
    $P122 = $P121."loadinit"()
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Op"]
.annotate 'line', 1521
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P129, $P127, "PAST"
    get_who $P130, $P129
    set $P131, $P130["Var"]
    new $P132, "ResizablePMCArray"
    $P133 = $P131."new"("GLOBAL" :named("name"), $P132 :named("namespace"), "package" :named("scope"))
.annotate 'line', 1522
    find_dynamic_lex $P136, "$*W"
    unless_null $P136, vivify_1991
    get_hll_global $P134, "GLOBAL"
    get_who $P135, $P134
    set $P136, $P135["$W"]
    unless_null $P136, vivify_1992
    die "Contextual $*W not found"
  vivify_1992:
  vivify_1991:
    find_dynamic_lex $P139, "$*PACKAGE"
    unless_null $P139, vivify_1993
    get_hll_global $P137, "GLOBAL"
    get_who $P138, $P137
    set $P139, $P138["$PACKAGE"]
    unless_null $P139, vivify_1994
    die "Contextual $*PACKAGE not found"
  vivify_1994:
  vivify_1993:
    $P140 = $P136."get_slot_past_for_object"($P139)
    $P141 = $P126."new"($P133, $P140, "bind_6model" :named("pasttype"))
.annotate 'line', 1519
    $P122."push"($P141)
.annotate 'line', 1528
    find_dynamic_lex $P123, "$*HAS_YOU_ARE_HERE"
    unless_null $P123, vivify_1995
    get_hll_global $P121, "GLOBAL"
    get_who $P122, $P121
    set $P123, $P122["$HAS_YOU_ARE_HERE"]
    unless_null $P123, vivify_1996
    die "Contextual $*HAS_YOU_ARE_HERE not found"
  vivify_1996:
  vivify_1995:
    if $P123, unless_2695_end
.annotate 'line', 1529
    set $P124, $P2690
    unless_null $P124, vivify_1997
    new $P124, "Undef"
  vivify_1997:
    set $P125, param_2687
    nqp_decontainerize $P126, $P125
    $P127 = $P126."CTXSAVE"()
    $P124."push"($P127)
  unless_2695_end:
.annotate 'line', 1533
    new $P121, "ResizablePMCArray"
    push $P121, "nqp_group"
    push $P121, "nqp_ops"
    push $P121, "nqp_bigint_ops"
    push $P121, "trans_ops"
    push $P121, "io_ops"
    set $P2691, $P121
.annotate 'line', 1534
    find_dynamic_lex $P123, "%*COMPILING"
    unless_null $P123, vivify_1998
    get_hll_global $P121, "GLOBAL"
    get_who $P122, $P121
    set $P123, $P122["%COMPILING"]
    unless_null $P123, vivify_1999
    die "Contextual %*COMPILING not found"
  vivify_1999:
  vivify_1998:
    set $P2697, $P123["%?OPTIONS"]
    unless_null $P2697, vivify_2000
    $P2697 = root_new ['parrot';'Hash']
  vivify_2000:
    set $P124, $P2697["vmlibs"]
    unless_null $P124, vivify_2001
    new $P124, "Undef"
  vivify_2001:
    unless $P124, if_2696_end
.annotate 'line', 1535
    find_dynamic_lex $P129, "%*COMPILING"
    unless_null $P129, vivify_2002
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P129, $P127["%COMPILING"]
    unless_null $P129, vivify_2003
    die "Contextual %*COMPILING not found"
  vivify_2003:
  vivify_2002:
    set $P2698, $P129["%?OPTIONS"]
    unless_null $P2698, vivify_2004
    $P2698 = root_new ['parrot';'Hash']
  vivify_2004:
    set $P130, $P2698["vmlibs"]
    unless_null $P130, vivify_2005
    new $P130, "Undef"
  vivify_2005:
    set $S100, $P130
    split $P131, ",", $S100
    defined $I100, $P131
    unless $I100, for_undef_2006
    iter $P125, $P131
    new $P133, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P133, loop2703_handler
    push_eh $P133
  loop2703_test:
    unless $P125, loop2703_done
    shift $P132, $P125
  loop2703_redo:
    .const 'Sub' $P2700 = "492_1329260321.776" 
    capture_lex $P2700
    $P2700($P132)
  loop2703_next:
    goto loop2703_test
  loop2703_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P135, exception, 'type'
    eq $P135, .CONTROL_LOOP_NEXT, loop2703_next
    eq $P135, .CONTROL_LOOP_REDO, loop2703_redo
  loop2703_done:
    pop_eh 
  for_undef_2006:
  if_2696_end:
.annotate 'line', 1539
    set $P121, $P2690
    unless_null $P121, vivify_2009
    new $P121, "Undef"
  vivify_2009:
    set $P2704, $P2691
    unless_null $P2704, vivify_2010
    $P2704 = root_new ['parrot';'ResizablePMCArray']
  vivify_2010:
    $P121."loadlibs"($P2704 :flat)
.annotate 'line', 1545
    set $P121, $P2690
    unless_null $P121, vivify_2011
    new $P121, "Undef"
  vivify_2011:
    get_hll_global $P122, "GLOBAL"
    nqp_get_package_through_who $P123, $P122, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Var"]
    $P126 = $P125."new"("parameter" :named("scope"), "@ARGS" :named("name"), 1 :named("slurpy"), 1 :named("directaccess"))
    $P121."unshift"($P126)
.annotate 'line', 1547
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "PAST"
    get_who $P123, $P122
    set $P124, $P123["Stmts"]
.annotate 'line', 1548
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P129, $P127["Op"]
    $P130 = $P129."new"("ModuleLoader.pbc", "load_bytecode vs" :named("pirop"))
.annotate 'line', 1549
    get_hll_global $P131, "GLOBAL"
    nqp_get_package_through_who $P132, $P131, "PAST"
    get_who $P133, $P132
    set $P134, $P133["Op"]
.annotate 'line', 1551
    get_hll_global $P135, "GLOBAL"
    nqp_get_package_through_who $P136, $P135, "PAST"
    get_who $P137, $P136
    set $P138, $P137["Var"]
    new $P139, "ResizablePMCArray"
    $P140 = $P138."new"("ModuleLoader" :named("name"), $P139 :named("namespace"), "package" :named("scope"))
.annotate 'line', 1552
    get_hll_global $P141, "GLOBAL"
    nqp_get_package_through_who $P142, $P141, "PAST"
    get_who $P143, $P142
    set $P144, $P143["Var"]
    get_hll_global $P145, "GLOBAL"
    nqp_get_package_through_who $P146, $P145, "PAST"
    get_who $P147, $P146
    set $P148, $P147["Op"]
    $P150 = $P148."new"("getinterp P" :named("pirop"))
    $P151 = $P144."new"($P150, "context", "keyed" :named("scope"))
    $P152 = $P134."new"($P140, $P151, "callmethod" :named("pasttype"), "set_mainline_module" :named("name"))
.annotate 'line', 1549
    $P153 = $P124."new"($P130, $P152)
.annotate 'line', 1547
    set $P2693, $P153
.annotate 'line', 1555
    find_dynamic_lex $P123, "$*MAIN_SUB"
    unless_null $P123, vivify_2012
    get_hll_global $P121, "GLOBAL"
    get_who $P122, $P121
    set $P123, $P122["$MAIN_SUB"]
    unless_null $P123, vivify_2013
    die "Contextual $*MAIN_SUB not found"
  vivify_2013:
  vivify_2012:
    unless $P123, if_2705_end
.annotate 'line', 1556
    set $P124, $P2693
    unless_null $P124, vivify_2014
    new $P124, "Undef"
  vivify_2014:
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P129, $P127["Op"]
.annotate 'line', 1557
    get_hll_global $P130, "GLOBAL"
    nqp_get_package_through_who $P131, $P130, "PAST"
    get_who $P132, $P131
    set $P133, $P132["Val"]
    find_dynamic_lex $P136, "$*MAIN_SUB"
    unless_null $P136, vivify_2015
    get_hll_global $P134, "GLOBAL"
    get_who $P135, $P134
    set $P136, $P135["$MAIN_SUB"]
    unless_null $P136, vivify_2016
    die "Contextual $*MAIN_SUB not found"
  vivify_2016:
  vivify_2015:
    $P137 = $P133."new"($P136 :named("value"))
.annotate 'line', 1558
    get_hll_global $P138, "GLOBAL"
    nqp_get_package_through_who $P139, $P138, "PAST"
    get_who $P140, $P139
    set $P141, $P140["Var"]
    $P142 = $P141."new"("lexical" :named("scope"), "@ARGS" :named("name"), 1 :named("flat"))
    $P143 = $P129."new"($P137, $P142, "call" :named("pasttype"))
.annotate 'line', 1556
    $P124."push"($P143)
  if_2705_end:
.annotate 'line', 1561
    set $P121, $P2689
    unless_null $P121, vivify_2017
    new $P121, "Undef"
  vivify_2017:
    get_hll_global $P122, "GLOBAL"
    nqp_get_package_through_who $P123, $P122, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Op"]
.annotate 'line', 1563
    get_hll_global $P126, "GLOBAL"
    nqp_get_package_through_who $P127, $P126, "PAST"
    get_who $P129, $P127
    set $P130, $P129["Var"]
    $P131 = $P130."new"("lexical" :named("scope"), "@ARGS" :named("name"))
    set $P132, $P2693
    unless_null $P132, vivify_2018
    new $P132, "Undef"
  vivify_2018:
    $P133 = $P125."new"($P131, $P132, "if" :named("pasttype"))
.annotate 'line', 1561
    $P121."push"($P133)
.annotate 'line', 1570
    set $P121, $P2690
    unless_null $P121, vivify_2019
    new $P121, "Undef"
  vivify_2019:
.annotate 'line', 1571
    get_hll_global $P122, "GLOBAL"
    nqp_get_package_through_who $P123, $P122, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Op"]
    set $P126, $P2689
    unless_null $P126, vivify_2020
    new $P126, "Undef"
  vivify_2020:
    $P127 = $P125."new"($P126, "return" :named("pirop"))
    $P121."push"($P127)
.annotate 'line', 1576
    set $P121, $P2690
    unless_null $P121, vivify_2021
    new $P121, "Undef"
  vivify_2021:
.annotate 'line', 1577
    get_hll_global $P122, "GLOBAL"
    nqp_get_package_through_who $P123, $P122, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Block"]
.annotate 'line', 1579
    get_hll_global $P126, "GLOBAL"
    nqp_get_package_through_who $P127, $P126, "PAST"
    get_who $P129, $P127
    set $P130, $P129["Op"]
    get_hll_global $P131, "GLOBAL"
    nqp_get_package_through_who $P132, $P131, "PAST"
    get_who $P133, $P132
    set $P134, $P133["Val"]
    set $P135, $P2690
    unless_null $P135, vivify_2022
    new $P135, "Undef"
  vivify_2022:
    $P136 = $P134."new"($P135 :named("value"))
    $P137 = $P130."new"($P136, "call" :named("pasttype"))
    $P138 = $P125."new"($P137, ":load" :named("pirflags"), 0 :named("lexical"), "" :named("namespace"))
.annotate 'line', 1577
    $P121."push"($P138)
.annotate 'line', 1582
    set $P121, $P2690
    unless_null $P121, vivify_2023
    new $P121, "Undef"
  vivify_2023:
    set $P122, param_2688
    unless_null $P122, vivify_2024
    new $P122, "Undef"
  vivify_2024:
    $P121."node"($P122)
.annotate 'line', 1585
    set $P121, $P2690
    unless_null $P121, vivify_2025
    new $P121, "Undef"
  vivify_2025:
    $P121."hll"("nqp")
.annotate 'line', 1587
    set $P121, param_2688
    set $P122, $P2690
    unless_null $P122, vivify_2026
    new $P122, "Undef"
  vivify_2026:
    $P123 = $P121."!make"($P122)
.annotate 'line', 1508
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2699"  :anon :subid("492_1329260321.776") :outer("491_1329260321.776")
    .param pmc param_2701
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1535
    .lex "$_", param_2701
.annotate 'line', 1536
    find_lex $P2702, "@loadlibs"
    unless_null $P2702, vivify_2007
    $P2702 = root_new ['parrot';'ResizablePMCArray']
  vivify_2007:
    find_lex $P133, "$_"
    unless_null $P133, vivify_2008
    new $P133, "Undef"
  vivify_2008:
    $P134 = $P2702."push"($P133)
.annotate 'line', 1535
    .return ($P134)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "statementlist" :anon :subid("493_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_2707
    .param pmc param_2708
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1590
    .const 'Sub' $P2714 = "494_1329260321.776" 
    capture_lex $P2714
    .lex "self", param_2707
    .lex "$/", param_2708
.annotate 'line', 1591
    new $P117, "Undef"
    set $P2709, $P117
    .lex "$past", $P2709
    get_hll_global $P118, "GLOBAL"
    nqp_get_package_through_who $P119, $P118, "PAST"
    get_who $P121, $P119
    set $P122, $P121["Stmts"]
    set $P123, param_2708
    unless_null $P123, vivify_2027
    new $P123, "Undef"
  vivify_2027:
    $P124 = $P122."new"($P123 :named("node"))
    set $P2709, $P124
.annotate 'line', 1592
    set $P2711, param_2708
    unless_null $P2711, vivify_2028
    $P2711 = root_new ['parrot';'Hash']
  vivify_2028:
    set $P118, $P2711["statement"]
    unless_null $P118, vivify_2029
    new $P118, "Undef"
  vivify_2029:
    unless $P118, if_2710_end
.annotate 'line', 1593
    set $P2712, param_2708
    unless_null $P2712, vivify_2030
    $P2712 = root_new ['parrot';'Hash']
  vivify_2030:
    set $P121, $P2712["statement"]
    unless_null $P121, vivify_2031
    new $P121, "Undef"
  vivify_2031:
    defined $I100, $P121
    unless $I100, for_undef_2032
    iter $P119, $P121
    new $P124, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P124, loop2723_handler
    push_eh $P124
  loop2723_test:
    unless $P119, loop2723_done
    shift $P122, $P119
  loop2723_redo:
    .const 'Sub' $P2714 = "494_1329260321.776" 
    capture_lex $P2714
    $P2714($P122)
  loop2723_next:
    goto loop2723_test
  loop2723_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P125, exception, 'type'
    eq $P125, .CONTROL_LOOP_NEXT, loop2723_next
    eq $P125, .CONTROL_LOOP_REDO, loop2723_redo
  loop2723_done:
    pop_eh 
  for_undef_2032:
  if_2710_end:
.annotate 'line', 1601
    set $P118, param_2708
    set $P119, $P2709
    unless_null $P119, vivify_2045
    new $P119, "Undef"
  vivify_2045:
    $P121 = $P118."!make"($P119)
.annotate 'line', 1590
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2713"  :anon :subid("494_1329260321.776") :outer("493_1329260321.776")
    .param pmc param_2716
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1594
    new $P123, "Undef"
    set $P2715, $P123
    .lex "$ast", $P2715
    .lex "$_", param_2716
    find_lex $P124, "$_"
    unless_null $P124, vivify_2033
    new $P124, "Undef"
  vivify_2033:
    $P125 = $P124."ast"()
    set $P2715, $P125
.annotate 'line', 1595
    set $P2718, $P2715
    unless_null $P2718, vivify_2034
    $P2718 = root_new ['parrot';'Hash']
  vivify_2034:
    set $P124, $P2718["sink"]
    unless_null $P124, vivify_2035
    new $P124, "Undef"
  vivify_2035:
    defined $I101, $P124
    unless $I101, if_2717_end
    set $P2719, $P2715
    unless_null $P2719, vivify_2036
    $P2719 = root_new ['parrot';'Hash']
  vivify_2036:
    set $P125, $P2719["sink"]
    unless_null $P125, vivify_2037
    new $P125, "Undef"
  vivify_2037:
    set $P2715, $P125
  if_2717_end:
.annotate 'line', 1596
    set $P2721, $P2715
    unless_null $P2721, vivify_2038
    $P2721 = root_new ['parrot';'Hash']
  vivify_2038:
    set $P124, $P2721["bareblock"]
    unless_null $P124, vivify_2039
    new $P124, "Undef"
  vivify_2039:
    unless $P124, if_2720_end
    set $P125, $P2715
    unless_null $P125, vivify_2040
    new $P125, "Undef"
  vivify_2040:
    $P126 = "block_immediate"($P125)
    set $P2715, $P126
  if_2720_end:
.annotate 'line', 1597
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Node"]
    set $P129, $P2715
    unless_null $P129, vivify_2041
    new $P129, "Undef"
  vivify_2041:
    $P130 = $P127."ACCEPTS"($P129)
    unless $P130, if_2722_end
    get_hll_global $P131, "GLOBAL"
    nqp_get_package_through_who $P132, $P131, "PAST"
    get_who $P133, $P132
    set $P134, $P133["Stmt"]
    set $P135, $P2715
    unless_null $P135, vivify_2042
    new $P135, "Undef"
  vivify_2042:
    $P136 = $P134."new"($P135)
    set $P2715, $P136
  if_2722_end:
.annotate 'line', 1598
    find_lex $P124, "$past"
    unless_null $P124, vivify_2043
    new $P124, "Undef"
  vivify_2043:
    set $P125, $P2715
    unless_null $P125, vivify_2044
    new $P125, "Undef"
  vivify_2044:
    $P126 = $P124."push"($P125)
.annotate 'line', 1593
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement" :anon :subid("495_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_2725
    .param pmc param_2726
    .param pmc param_2727 :optional
    .param int has_param_2727 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1604
    .const 'Sub' $P2732 = "496_1329260321.776" 
    capture_lex $P2732
    .lex "self", param_2725
    .lex "$/", param_2726
    if has_param_2727, optparam_2046
    new $P117, "Undef"
    set param_2727, $P117
  optparam_2046:
    .lex "$key", param_2727
.annotate 'line', 1605
    new $P118, "Undef"
    set $P2728, $P118
    .lex "$past", $P2728
.annotate 'line', 1604
    set $P119, $P2728
    unless_null $P119, vivify_2047
    new $P119, "Undef"
  vivify_2047:
.annotate 'line', 1606
    set $P2730, param_2726
    unless_null $P2730, vivify_2048
    $P2730 = root_new ['parrot';'Hash']
  vivify_2048:
    set $P119, $P2730["EXPR"]
    unless_null $P119, vivify_2049
    new $P119, "Undef"
  vivify_2049:
    if $P119, if_2729
.annotate 'line', 1627
    set $P2751, param_2726
    unless_null $P2751, vivify_2050
    $P2751 = root_new ['parrot';'Hash']
  vivify_2050:
    set $P124, $P2751["statement_control"]
    unless_null $P124, vivify_2051
    new $P124, "Undef"
  vivify_2051:
    if $P124, if_2750
.annotate 'line', 1628
    new $P125, "Float"
    assign $P125, 0
    set $P2728, $P125
    goto if_2750_end
  if_2750:
.annotate 'line', 1627
    set $P2752, param_2726
    unless_null $P2752, vivify_2052
    $P2752 = root_new ['parrot';'Hash']
  vivify_2052:
    set $P125, $P2752["statement_control"]
    unless_null $P125, vivify_2053
    new $P125, "Undef"
  vivify_2053:
    $P126 = $P125."ast"()
    set $P2728, $P126
  if_2750_end:
    goto if_2729_end
  if_2729:
.annotate 'line', 1606
    .const 'Sub' $P2732 = "496_1329260321.776" 
    capture_lex $P2732
    $P2732()
  if_2729_end:
.annotate 'line', 1629
    set $P119, param_2726
    set $P121, $P2728
    unless_null $P121, vivify_2087
    new $P121, "Undef"
  vivify_2087:
    $P122 = $P119."!make"($P121)
.annotate 'line', 1604
    .return ($P122)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2731"  :anon :subid("496_1329260321.776") :outer("495_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1607
    new $P121, "Undef"
    set $P2733, $P121
    .lex "$mc", $P2733
.annotate 'line', 1608
    new $P122, "Undef"
    set $P2734, $P122
    .lex "$ml", $P2734
.annotate 'line', 1607
    new $P123, "Float"
    assign $P123, 0
    set $I100, $P123
    find_lex $P2735, "$/"
    unless_null $P2735, vivify_2054
    $P2735 = root_new ['parrot';'Hash']
  vivify_2054:
    set $P2736, $P2735["statement_mod_cond"]
    unless_null $P2736, vivify_2055
    $P2736 = root_new ['parrot';'ResizablePMCArray']
  vivify_2055:
    set $P124, $P2736[$I100]
    unless_null $P124, vivify_2056
    new $P124, "Undef"
  vivify_2056:
    set $P2733, $P124
.annotate 'line', 1608
    new $P123, "Float"
    assign $P123, 0
    set $I100, $P123
    find_lex $P2737, "$/"
    unless_null $P2737, vivify_2057
    $P2737 = root_new ['parrot';'Hash']
  vivify_2057:
    set $P2738, $P2737["statement_mod_loop"]
    unless_null $P2738, vivify_2058
    $P2738 = root_new ['parrot';'ResizablePMCArray']
  vivify_2058:
    set $P124, $P2738[$I100]
    unless_null $P124, vivify_2059
    new $P124, "Undef"
  vivify_2059:
    set $P2734, $P124
.annotate 'line', 1609
    find_lex $P2739, "$/"
    unless_null $P2739, vivify_2060
    $P2739 = root_new ['parrot';'Hash']
  vivify_2060:
    set $P123, $P2739["EXPR"]
    unless_null $P123, vivify_2061
    new $P123, "Undef"
  vivify_2061:
    $P124 = $P123."ast"()
    store_lex "$past", $P124
.annotate 'line', 1610
    set $P123, $P2733
    unless_null $P123, vivify_2062
    new $P123, "Undef"
  vivify_2062:
    unless $P123, if_2740_end
.annotate 'line', 1611
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Op"]
    set $P2741, $P2733
    unless_null $P2741, vivify_2063
    $P2741 = root_new ['parrot';'Hash']
  vivify_2063:
    set $P129, $P2741["cond"]
    unless_null $P129, vivify_2064
    new $P129, "Undef"
  vivify_2064:
    $P130 = $P129."ast"()
    find_lex $P131, "$past"
    unless_null $P131, vivify_2065
    new $P131, "Undef"
  vivify_2065:
    set $P2742, $P2733
    unless_null $P2742, vivify_2066
    $P2742 = root_new ['parrot';'Hash']
  vivify_2066:
    set $P132, $P2742["sym"]
    unless_null $P132, vivify_2067
    new $P132, "Undef"
  vivify_2067:
    set $S100, $P132
    find_lex $P133, "$/"
    unless_null $P133, vivify_2068
    new $P133, "Undef"
  vivify_2068:
    $P134 = $P127."new"($P130, $P131, $S100 :named("pasttype"), $P133 :named("node"))
    store_lex "$past", $P134
  if_2740_end:
.annotate 'line', 1613
    set $P124, $P2734
    unless_null $P124, vivify_2069
    new $P124, "Undef"
  vivify_2069:
    if $P124, if_2743
    set $P123, $P124
    goto if_2743_end
  if_2743:
.annotate 'line', 1614
    set $P2745, $P2734
    unless_null $P2745, vivify_2070
    $P2745 = root_new ['parrot';'Hash']
  vivify_2070:
    set $P126, $P2745["sym"]
    unless_null $P126, vivify_2071
    new $P126, "Undef"
  vivify_2071:
    set $S100, $P126
    iseq $I100, $S100, "for"
    if $I100, if_2744
.annotate 'line', 1623
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P129, $P127, "PAST"
    get_who $P130, $P129
    set $P131, $P130["Op"]
    set $P2748, $P2734
    unless_null $P2748, vivify_2072
    $P2748 = root_new ['parrot';'Hash']
  vivify_2072:
    set $P132, $P2748["cond"]
    unless_null $P132, vivify_2073
    new $P132, "Undef"
  vivify_2073:
    $P133 = $P132."ast"()
    find_lex $P134, "$past"
    unless_null $P134, vivify_2074
    new $P134, "Undef"
  vivify_2074:
    set $P2749, $P2734
    unless_null $P2749, vivify_2075
    $P2749 = root_new ['parrot';'Hash']
  vivify_2075:
    set $P135, $P2749["sym"]
    unless_null $P135, vivify_2076
    new $P135, "Undef"
  vivify_2076:
    set $S101, $P135
    find_lex $P136, "$/"
    unless_null $P136, vivify_2077
    new $P136, "Undef"
  vivify_2077:
    $P138 = $P131."new"($P133, $P134, $S101 :named("pasttype"), $P136 :named("node"))
    store_lex "$past", $P138
.annotate 'line', 1622
    set $P125, $P138
.annotate 'line', 1614
    goto if_2744_end
  if_2744:
.annotate 'line', 1615
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P129, $P127, "PAST"
    get_who $P130, $P129
    set $P131, $P130["Block"]
.annotate 'line', 1616
    get_hll_global $P132, "GLOBAL"
    nqp_get_package_through_who $P133, $P132, "PAST"
    get_who $P134, $P133
    set $P135, $P134["Var"]
    $P136 = $P135."new"("$_" :named("name"), "parameter" :named("scope"), 1 :named("isdecl"))
    find_lex $P137, "$past"
    unless_null $P137, vivify_2078
    new $P137, "Undef"
  vivify_2078:
    $P138 = $P131."new"($P136, $P137, "immediate" :named("blocktype"))
.annotate 'line', 1615
    store_lex "$past", $P138
.annotate 'line', 1618
    find_lex $P127, "$past"
    unless_null $P127, vivify_2079
    new $P127, "Undef"
  vivify_2079:
    $P127."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1619
    find_lex $P127, "$past"
    unless_null $P127, vivify_2080
    new $P127, "Undef"
  vivify_2080:
    $P127."arity"(1)
.annotate 'line', 1620
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P129, $P127, "PAST"
    get_who $P130, $P129
    set $P131, $P130["Op"]
    set $P2746, $P2734
    unless_null $P2746, vivify_2081
    $P2746 = root_new ['parrot';'Hash']
  vivify_2081:
    set $P132, $P2746["cond"]
    unless_null $P132, vivify_2082
    new $P132, "Undef"
  vivify_2082:
    $P133 = $P132."ast"()
    find_lex $P134, "$past"
    unless_null $P134, vivify_2083
    new $P134, "Undef"
  vivify_2083:
    set $P2747, $P2734
    unless_null $P2747, vivify_2084
    $P2747 = root_new ['parrot';'Hash']
  vivify_2084:
    set $P135, $P2747["sym"]
    unless_null $P135, vivify_2085
    new $P135, "Undef"
  vivify_2085:
    set $S101, $P135
    find_lex $P136, "$/"
    unless_null $P136, vivify_2086
    new $P136, "Undef"
  vivify_2086:
    $P137 = $P131."new"($P133, $P134, $S101 :named("pasttype"), $P136 :named("node"))
    store_lex "$past", $P137
.annotate 'line', 1614
    set $P125, $P137
  if_2744_end:
.annotate 'line', 1613
    set $P123, $P125
  if_2743_end:
.annotate 'line', 1606
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "xblock" :anon :subid("497_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_2754
    .param pmc param_2755
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1632
    .lex "self", param_2754
    .lex "$/", param_2755
.annotate 'line', 1633
    set $P117, param_2755
    get_hll_global $P118, "GLOBAL"
    nqp_get_package_through_who $P119, $P118, "PAST"
    get_who $P121, $P119
    set $P122, $P121["Op"]
    set $P2756, param_2755
    unless_null $P2756, vivify_2088
    $P2756 = root_new ['parrot';'Hash']
  vivify_2088:
    set $P123, $P2756["EXPR"]
    unless_null $P123, vivify_2089
    new $P123, "Undef"
  vivify_2089:
    $P124 = $P123."ast"()
    set $P2757, param_2755
    unless_null $P2757, vivify_2090
    $P2757 = root_new ['parrot';'Hash']
  vivify_2090:
    set $P125, $P2757["pblock"]
    unless_null $P125, vivify_2091
    new $P125, "Undef"
  vivify_2091:
    $P126 = $P125."ast"()
    set $P127, param_2755
    unless_null $P127, vivify_2092
    new $P127, "Undef"
  vivify_2092:
    $P129 = $P122."new"($P124, $P126, "if" :named("pasttype"), $P127 :named("node"))
    $P130 = $P117."!make"($P129)
.annotate 'line', 1632
    .return ($P130)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "pblock" :anon :subid("498_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_2759
    .param pmc param_2760
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1636
    .lex "self", param_2759
    .lex "$/", param_2760
.annotate 'line', 1637
    set $P117, param_2760
    set $P2761, param_2760
    unless_null $P2761, vivify_2093
    $P2761 = root_new ['parrot';'Hash']
  vivify_2093:
    set $P118, $P2761["blockoid"]
    unless_null $P118, vivify_2094
    new $P118, "Undef"
  vivify_2094:
    $P119 = $P118."ast"()
    $P121 = $P117."!make"($P119)
.annotate 'line', 1636
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "block" :anon :subid("499_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_2763
    .param pmc param_2764
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1640
    .lex "self", param_2763
    .lex "$/", param_2764
.annotate 'line', 1641
    set $P117, param_2764
    set $P2765, param_2764
    unless_null $P2765, vivify_2095
    $P2765 = root_new ['parrot';'Hash']
  vivify_2095:
    set $P118, $P2765["blockoid"]
    unless_null $P118, vivify_2096
    new $P118, "Undef"
  vivify_2096:
    $P119 = $P118."ast"()
    $P121 = $P117."!make"($P119)
.annotate 'line', 1640
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "blockoid" :anon :subid("500_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_2767
    .param pmc param_2768
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1644
    .const 'Sub' $P2773 = "501_1329260321.776" 
    capture_lex $P2773
    .lex "self", param_2767
    .lex "$/", param_2768
.annotate 'line', 1645
    new $P117, "Undef"
    set $P2769, $P117
    .lex "$BLOCK", $P2769
    find_dynamic_lex $P121, "$*W"
    unless_null $P121, vivify_2097
    get_hll_global $P118, "GLOBAL"
    get_who $P119, $P118
    set $P121, $P119["$W"]
    unless_null $P121, vivify_2098
    die "Contextual $*W not found"
  vivify_2098:
  vivify_2097:
    $P122 = $P121."pop_lexpad"()
    set $P2769, $P122
.annotate 'line', 1646
    set $P2771, param_2768
    unless_null $P2771, vivify_2099
    $P2771 = root_new ['parrot';'Hash']
  vivify_2099:
    set $P119, $P2771["statementlist"]
    unless_null $P119, vivify_2100
    new $P119, "Undef"
  vivify_2100:
    if $P119, if_2770
.annotate 'line', 1654
    find_dynamic_lex $P126, "$*HAS_YOU_ARE_HERE"
    unless_null $P126, vivify_2101
    get_hll_global $P123, "GLOBAL"
    get_who $P125, $P123
    set $P126, $P125["$HAS_YOU_ARE_HERE"]
    unless_null $P126, vivify_2102
    die "Contextual $*HAS_YOU_ARE_HERE not found"
  vivify_2102:
  vivify_2101:
    unless $P126, if_2776_end
.annotate 'line', 1655
    set $P127, param_2768
    unless_null $P127, vivify_2103
    new $P127, "Undef"
  vivify_2103:
    $P129 = $P127."CURSOR"()
    $P129."panic"("{YOU_ARE_HERE} may only appear once in a setting")
  if_2776_end:
.annotate 'line', 1657
    new $P123, "Float"
    assign $P123, 1
    store_dynamic_lex "$*HAS_YOU_ARE_HERE", $P123
.annotate 'line', 1658
    set $P123, param_2768
    set $P2777, param_2768
    unless_null $P2777, vivify_2104
    $P2777 = root_new ['parrot';'Hash']
  vivify_2104:
    set $P125, $P2777["you_are_here"]
    unless_null $P125, vivify_2105
    new $P125, "Undef"
  vivify_2105:
    $P126 = $P125."ast"()
    $P127 = $P123."!make"($P126)
.annotate 'line', 1653
    set $P118, $P127
.annotate 'line', 1646
    goto if_2770_end
  if_2770:
    .const 'Sub' $P2773 = "501_1329260321.776" 
    capture_lex $P2773
    $P122 = $P2773()
    set $P118, $P122
  if_2770_end:
.annotate 'line', 1644
    .return ($P118)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2772"  :anon :subid("501_1329260321.776") :outer("500_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1647
    new $P121, "Undef"
    set $P2774, $P121
    .lex "$past", $P2774
    find_lex $P2775, "$/"
    unless_null $P2775, vivify_2106
    $P2775 = root_new ['parrot';'Hash']
  vivify_2106:
    set $P122, $P2775["statementlist"]
    unless_null $P122, vivify_2107
    new $P122, "Undef"
  vivify_2107:
    $P123 = $P122."ast"()
    set $P2774, $P123
.annotate 'line', 1648
    find_lex $P122, "$BLOCK"
    unless_null $P122, vivify_2108
    new $P122, "Undef"
  vivify_2108:
    set $P123, $P2774
    unless_null $P123, vivify_2109
    new $P123, "Undef"
  vivify_2109:
    $P122."push"($P123)
.annotate 'line', 1649
    find_lex $P122, "$BLOCK"
    unless_null $P122, vivify_2110
    new $P122, "Undef"
  vivify_2110:
    find_lex $P123, "$/"
    unless_null $P123, vivify_2111
    new $P123, "Undef"
  vivify_2111:
    $P122."node"($P123)
.annotate 'line', 1650
    find_lex $P122, "$BLOCK"
    unless_null $P122, vivify_2112
    new $P122, "Undef"
  vivify_2112:
    $P122."closure"(1)
.annotate 'line', 1651
    find_dynamic_lex $P122, "$/"
    find_lex $P123, "$BLOCK"
    unless_null $P123, vivify_2113
    new $P123, "Undef"
  vivify_2113:
    $P124 = $P122."!make"($P123)
.annotate 'line', 1646
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "newpad" :anon :subid("502_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_2779
    .param pmc param_2780
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1662
    .lex "self", param_2779
    .lex "$/", param_2780
.annotate 'line', 1663
    find_dynamic_lex $P119, "$*W"
    unless_null $P119, vivify_2114
    get_hll_global $P117, "GLOBAL"
    get_who $P118, $P117
    set $P119, $P118["$W"]
    unless_null $P119, vivify_2115
    die "Contextual $*W not found"
  vivify_2115:
  vivify_2114:
    set $P121, param_2780
    unless_null $P121, vivify_2116
    new $P121, "Undef"
  vivify_2116:
    $P122 = $P119."push_lexpad"($P121)
.annotate 'line', 1662
    .return ($P122)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "outerctx" :anon :subid("503_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_2782
    .param pmc param_2783
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1666
    .const 'Sub' $P2787 = "504_1329260321.776" 
    capture_lex $P2787
    .lex "self", param_2782
    .lex "$/", param_2783
.annotate 'line', 1667
    find_dynamic_lex $P119, "%*COMPILING"
    unless_null $P119, vivify_2117
    get_hll_global $P117, "GLOBAL"
    get_who $P118, $P117
    set $P119, $P118["%COMPILING"]
    unless_null $P119, vivify_2118
    die "Contextual %*COMPILING not found"
  vivify_2118:
  vivify_2117:
    set $P2785, $P119["%?OPTIONS"]
    unless_null $P2785, vivify_2119
    $P2785 = root_new ['parrot';'Hash']
  vivify_2119:
    set $P121, $P2785["outer_ctx"]
    unless_null $P121, vivify_2120
    new $P121, "Undef"
  vivify_2120:
    defined $I100, $P121
    if $I100, unless_2784_end
    .const 'Sub' $P2787 = "504_1329260321.776" 
    capture_lex $P2787
    $P2787()
  unless_2784_end:
.annotate 'line', 1680
    set $P117, param_2782
    nqp_decontainerize $P118, $P117
    find_dynamic_lex $P122, "$*W"
    unless_null $P122, vivify_2136
    get_hll_global $P119, "GLOBAL"
    get_who $P121, $P119
    set $P122, $P121["$W"]
    unless_null $P122, vivify_2137
    die "Contextual $*W not found"
  vivify_2137:
  vivify_2136:
    $P123 = $P122."cur_lexpad"()
    $P124 = $P118."SET_BLOCK_OUTER_CTX"($P123)
.annotate 'line', 1666
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2786"  :anon :subid("504_1329260321.776") :outer("503_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1670
    new $P122, "Undef"
    set $P2788, $P122
    .lex "$SETTING", $P2788
    find_dynamic_lex $P125, "$*W"
    unless_null $P125, vivify_2121
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$W"]
    unless_null $P125, vivify_2122
    die "Contextual $*W not found"
  vivify_2122:
  vivify_2121:
    find_dynamic_lex $P129, "%*COMPILING"
    unless_null $P129, vivify_2123
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P129, $P127["%COMPILING"]
    unless_null $P129, vivify_2124
    die "Contextual %*COMPILING not found"
  vivify_2124:
  vivify_2123:
    set $P2790, $P129["%?OPTIONS"]
    unless_null $P2790, vivify_2125
    $P2790 = root_new ['parrot';'Hash']
  vivify_2125:
    set $P130, $P2790["setting"]
    unless_null $P130, vivify_2126
    new $P130, "Undef"
  vivify_2126:
    set $P2789, $P130
    defined $I2792, $P2789
    if $I2792, default_2791
    new $P131, "String"
    assign $P131, "NQPCORE"
    set $P2789, $P131
  default_2791:
    $P132 = $P125."load_setting"($P2789)
    set $P2788, $P132
.annotate 'line', 1675
    find_dynamic_lex $P126, "%*COMPILING"
    unless_null $P126, vivify_2127
    get_hll_global $P124, "GLOBAL"
    get_who $P125, $P124
    set $P126, $P125["%COMPILING"]
    unless_null $P126, vivify_2128
    die "Contextual %*COMPILING not found"
  vivify_2128:
  vivify_2127:
    set $P2794, $P126["%?OPTIONS"]
    unless_null $P2794, vivify_2129
    $P2794 = root_new ['parrot';'Hash']
  vivify_2129:
    set $P127, $P2794["setting"]
    unless_null $P127, vivify_2130
    new $P127, "Undef"
  vivify_2130:
    set $S100, $P127
    iseq $I101, $S100, "NULL"
    unless $I101, unless_2793
    new $P123, 'Integer'
    set $P123, $I101
    goto unless_2793_end
  unless_2793:
.annotate 'line', 1676
    set $P129, $P2788
    unless_null $P129, vivify_2131
    new $P129, "Undef"
  vivify_2131:
    "import_HOW_exports"($P129)
.annotate 'line', 1677
    find_dynamic_lex $P131, "$*W"
    unless_null $P131, vivify_2132
    get_hll_global $P129, "GLOBAL"
    get_who $P130, $P129
    set $P131, $P130["$W"]
    unless_null $P131, vivify_2133
    die "Contextual $*W not found"
  vivify_2133:
  vivify_2132:
    find_dynamic_lex $P134, "$*GLOBALish"
    unless_null $P134, vivify_2134
    get_hll_global $P132, "GLOBAL"
    get_who $P133, $P132
    set $P134, $P133["$GLOBALish"]
    unless_null $P134, vivify_2135
    die "Contextual $*GLOBALish not found"
  vivify_2135:
  vivify_2134:
    $P135 = $P131."load_module"("NQPRegex", $P134)
.annotate 'line', 1675
    set $P123, $P135
  unless_2793_end:
.annotate 'line', 1667
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "GLOBALish" :anon :subid("505_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_2796
    .param pmc param_2797
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1692
    .lex "self", param_2796
    .lex "$/", param_2797
.annotate 'line', 1696
    find_dynamic_lex $P119, "$*W"
    unless_null $P119, vivify_2138
    get_hll_global $P117, "GLOBAL"
    get_who $P118, $P117
    set $P119, $P118["$W"]
    unless_null $P119, vivify_2139
    die "Contextual $*W not found"
  vivify_2139:
  vivify_2138:
    find_dynamic_lex $P123, "%*HOW"
    unless_null $P123, vivify_2140
    get_hll_global $P121, "GLOBAL"
    get_who $P122, $P121
    set $P123, $P122["%HOW"]
    unless_null $P123, vivify_2141
    die "Contextual %*HOW not found"
  vivify_2141:
  vivify_2140:
    set $P124, $P123["knowhow"]
    unless_null $P124, vivify_2142
    new $P124, "Undef"
  vivify_2142:
    $P125 = $P119."pkg_create_mo"($P124, "GLOBALish" :named("name"))
    store_dynamic_lex "$*GLOBALish", $P125
.annotate 'line', 1697
    find_dynamic_lex $P119, "$*GLOBALish"
    unless_null $P119, vivify_2143
    get_hll_global $P117, "GLOBAL"
    get_who $P118, $P117
    set $P119, $P118["$GLOBALish"]
    unless_null $P119, vivify_2144
    die "Contextual $*GLOBALish not found"
  vivify_2144:
  vivify_2143:
    get_how $P121, $P119
    find_dynamic_lex $P124, "$*GLOBALish"
    unless_null $P124, vivify_2145
    get_hll_global $P122, "GLOBAL"
    get_who $P123, $P122
    set $P124, $P123["$GLOBALish"]
    unless_null $P124, vivify_2146
    die "Contextual $*GLOBALish not found"
  vivify_2146:
  vivify_2145:
    $P121."compose"($P124)
.annotate 'line', 1698
    find_dynamic_lex $P119, "$*W"
    unless_null $P119, vivify_2147
    get_hll_global $P117, "GLOBAL"
    get_who $P118, $P117
    set $P119, $P118["$W"]
    unless_null $P119, vivify_2148
    die "Contextual $*W not found"
  vivify_2148:
  vivify_2147:
    find_dynamic_lex $P123, "$*W"
    unless_null $P123, vivify_2149
    get_hll_global $P121, "GLOBAL"
    get_who $P122, $P121
    set $P123, $P122["$W"]
    unless_null $P123, vivify_2150
    die "Contextual $*W not found"
  vivify_2150:
  vivify_2149:
    $P124 = $P123."cur_lexpad"()
    find_dynamic_lex $P127, "$*GLOBALish"
    unless_null $P127, vivify_2151
    get_hll_global $P125, "GLOBAL"
    get_who $P126, $P125
    set $P127, $P126["$GLOBALish"]
    unless_null $P127, vivify_2152
    die "Contextual $*GLOBALish not found"
  vivify_2152:
  vivify_2151:
    $P119."install_lexical_symbol"($P124, "GLOBALish", $P127)
.annotate 'line', 1701
    find_dynamic_lex $P119, "$*GLOBALish"
    unless_null $P119, vivify_2153
    get_hll_global $P117, "GLOBAL"
    get_who $P118, $P117
    set $P119, $P118["$GLOBALish"]
    unless_null $P119, vivify_2154
    die "Contextual $*GLOBALish not found"
  vivify_2154:
  vivify_2153:
    store_dynamic_lex "$*PACKAGE", $P119
.annotate 'line', 1702
    find_dynamic_lex $P119, "$*W"
    unless_null $P119, vivify_2155
    get_hll_global $P117, "GLOBAL"
    get_who $P118, $P117
    set $P119, $P118["$W"]
    unless_null $P119, vivify_2156
    die "Contextual $*W not found"
  vivify_2156:
  vivify_2155:
    find_dynamic_lex $P123, "$*W"
    unless_null $P123, vivify_2157
    get_hll_global $P121, "GLOBAL"
    get_who $P122, $P121
    set $P123, $P122["$W"]
    unless_null $P123, vivify_2158
    die "Contextual $*W not found"
  vivify_2158:
  vivify_2157:
    $P124 = $P123."cur_lexpad"()
    find_dynamic_lex $P127, "$*PACKAGE"
    unless_null $P127, vivify_2159
    get_hll_global $P125, "GLOBAL"
    get_who $P126, $P125
    set $P127, $P126["$PACKAGE"]
    unless_null $P127, vivify_2160
    die "Contextual $*PACKAGE not found"
  vivify_2160:
  vivify_2159:
    $P129 = $P119."install_lexical_symbol"($P124, "$?PACKAGE", $P127)
.annotate 'line', 1692
    .return ($P129)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "you_are_here" :anon :subid("506_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_2799
    .param pmc param_2800
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1705
    .lex "self", param_2799
    .lex "$/", param_2800
.annotate 'line', 1706
    set $P117, param_2800
    set $P118, param_2799
    nqp_decontainerize $P119, $P118
    $P121 = $P119."CTXSAVE"()
    $P122 = $P117."!make"($P121)
.annotate 'line', 1705
    .return ($P122)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<use>" :anon :subid("507_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_2802
    .param pmc param_2803
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1711
    .lex "self", param_2802
    .lex "$/", param_2803
.annotate 'line', 1712
    new $P117, "Undef"
    set $P2804, $P117
    .lex "$module", $P2804
    find_dynamic_lex $P121, "$*W"
    unless_null $P121, vivify_2161
    get_hll_global $P118, "GLOBAL"
    get_who $P119, $P118
    set $P121, $P119["$W"]
    unless_null $P121, vivify_2162
    die "Contextual $*W not found"
  vivify_2162:
  vivify_2161:
    set $P2805, param_2803
    unless_null $P2805, vivify_2163
    $P2805 = root_new ['parrot';'Hash']
  vivify_2163:
    set $P122, $P2805["name"]
    unless_null $P122, vivify_2164
    new $P122, "Undef"
  vivify_2164:
    set $S100, $P122
    find_dynamic_lex $P125, "$*GLOBALish"
    unless_null $P125, vivify_2165
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$GLOBALish"]
    unless_null $P125, vivify_2166
    die "Contextual $*GLOBALish not found"
  vivify_2166:
  vivify_2165:
    $P126 = $P121."load_module"($S100, $P125)
    set $P2804, $P126
.annotate 'line', 1713
    set $P118, $P2804
    unless_null $P118, vivify_2167
    new $P118, "Undef"
  vivify_2167:
    defined $I100, $P118
    unless $I100, if_2806_end
.annotate 'line', 1714
    set $P119, $P2804
    unless_null $P119, vivify_2168
    new $P119, "Undef"
  vivify_2168:
    "import_HOW_exports"($P119)
  if_2806_end:
.annotate 'line', 1716
    set $P118, param_2803
    get_hll_global $P119, "GLOBAL"
    nqp_get_package_through_who $P121, $P119, "PAST"
    get_who $P122, $P121
    set $P123, $P122["Stmts"]
    $P124 = $P123."new"()
    $P125 = $P118."!make"($P124)
.annotate 'line', 1711
    .return ($P125)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "statement_control:sym<if>" :anon :subid("508_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_2808
    .param pmc param_2809
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1719
    .const 'Sub' $P2820 = "509_1329260321.776" 
    capture_lex $P2820
    .lex "self", param_2808
    .lex "$/", param_2809
.annotate 'line', 1720
    new $P117, "Undef"
    set $P2810, $P117
    .lex "$count", $P2810
.annotate 'line', 1721
    new $P118, "Undef"
    set $P2811, $P118
    .lex "$past", $P2811
.annotate 'line', 1720
    set $P2812, param_2809
    unless_null $P2812, vivify_2169
    $P2812 = root_new ['parrot';'Hash']
  vivify_2169:
    set $P119, $P2812["xblock"]
    unless_null $P119, vivify_2170
    new $P119, "Undef"
  vivify_2170:
    set $N100, $P119
    new $P121, 'Float'
    set $P121, $N100
    sub $P122, $P121, 1
    set $P2810, $P122
.annotate 'line', 1721
    set $P119, $P2810
    unless_null $P119, vivify_2171
    new $P119, "Undef"
  vivify_2171:
    set $I100, $P119
    set $P2813, param_2809
    unless_null $P2813, vivify_2172
    $P2813 = root_new ['parrot';'Hash']
  vivify_2172:
    set $P2814, $P2813["xblock"]
    unless_null $P2814, vivify_2173
    $P2814 = root_new ['parrot';'ResizablePMCArray']
  vivify_2173:
    set $P121, $P2814[$I100]
    unless_null $P121, vivify_2174
    new $P121, "Undef"
  vivify_2174:
    $P122 = $P121."ast"()
    $P123 = "xblock_immediate"($P122)
    set $P2811, $P123
.annotate 'line', 1722
    set $P2816, param_2809
    unless_null $P2816, vivify_2175
    $P2816 = root_new ['parrot';'Hash']
  vivify_2175:
    set $P119, $P2816["else"]
    unless_null $P119, vivify_2176
    new $P119, "Undef"
  vivify_2176:
    unless $P119, if_2815_end
.annotate 'line', 1723
    set $P121, $P2811
    unless_null $P121, vivify_2177
    new $P121, "Undef"
  vivify_2177:
    new $P122, "Float"
    assign $P122, 0
    set $I100, $P122
    set $P2817, param_2809
    unless_null $P2817, vivify_2178
    $P2817 = root_new ['parrot';'Hash']
  vivify_2178:
    set $P2818, $P2817["else"]
    unless_null $P2818, vivify_2179
    $P2818 = root_new ['parrot';'ResizablePMCArray']
  vivify_2179:
    set $P123, $P2818[$I100]
    unless_null $P123, vivify_2180
    new $P123, "Undef"
  vivify_2180:
    $P124 = $P123."ast"()
    $P125 = "block_immediate"($P124)
    $P121."push"($P125)
  if_2815_end:
.annotate 'line', 1726
    new $P122, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P122, loop2825_handler
    push_eh $P122
  loop2825_test:
    set $P119, $P2810
    unless_null $P119, vivify_2181
    new $P119, "Undef"
  vivify_2181:
    set $N100, $P119
    set $N101, 0
    isgt $I100, $N100, $N101
    unless $I100, loop2825_done
  loop2825_redo:
    .const 'Sub' $P2820 = "509_1329260321.776" 
    capture_lex $P2820
    $P2820()
  loop2825_next:
    goto loop2825_test
  loop2825_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P123, exception, 'type'
    eq $P123, .CONTROL_LOOP_NEXT, loop2825_next
    eq $P123, .CONTROL_LOOP_REDO, loop2825_redo
  loop2825_done:
    pop_eh 
.annotate 'line', 1732
    set $P119, param_2809
    set $P121, $P2811
    unless_null $P121, vivify_2190
    new $P121, "Undef"
  vivify_2190:
    $P122 = $P119."!make"($P121)
.annotate 'line', 1719
    .return ($P122)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2819"  :anon :subid("509_1329260321.776") :outer("508_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1728
    new $P121, "Undef"
    set $P2821, $P121
    .lex "$else", $P2821
.annotate 'line', 1726
    find_lex $P122, "$count"
    unless_null $P122, vivify_2182
    new $P122, "Undef"
  vivify_2182:
    clone $P2822, $P122
    dec $P122
.annotate 'line', 1728
    find_lex $P122, "$past"
    unless_null $P122, vivify_2183
    new $P122, "Undef"
  vivify_2183:
    set $P2821, $P122
.annotate 'line', 1729
    find_lex $P122, "$count"
    unless_null $P122, vivify_2184
    new $P122, "Undef"
  vivify_2184:
    set $I101, $P122
    find_lex $P2823, "$/"
    unless_null $P2823, vivify_2185
    $P2823 = root_new ['parrot';'Hash']
  vivify_2185:
    set $P2824, $P2823["xblock"]
    unless_null $P2824, vivify_2186
    $P2824 = root_new ['parrot';'ResizablePMCArray']
  vivify_2186:
    set $P123, $P2824[$I101]
    unless_null $P123, vivify_2187
    new $P123, "Undef"
  vivify_2187:
    $P124 = $P123."ast"()
    $P125 = "xblock_immediate"($P124)
    store_lex "$past", $P125
.annotate 'line', 1730
    find_lex $P122, "$past"
    unless_null $P122, vivify_2188
    new $P122, "Undef"
  vivify_2188:
    set $P123, $P2821
    unless_null $P123, vivify_2189
    new $P123, "Undef"
  vivify_2189:
    $P124 = $P122."push"($P123)
.annotate 'line', 1726
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<unless>" :anon :subid("510_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_2827
    .param pmc param_2828
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1735
    .lex "self", param_2827
    .lex "$/", param_2828
.annotate 'line', 1736
    new $P117, "Undef"
    set $P2829, $P117
    .lex "$past", $P2829
    set $P2830, param_2828
    unless_null $P2830, vivify_2191
    $P2830 = root_new ['parrot';'Hash']
  vivify_2191:
    set $P118, $P2830["xblock"]
    unless_null $P118, vivify_2192
    new $P118, "Undef"
  vivify_2192:
    $P119 = $P118."ast"()
    $P121 = "xblock_immediate"($P119)
    set $P2829, $P121
.annotate 'line', 1737
    set $P118, $P2829
    unless_null $P118, vivify_2193
    new $P118, "Undef"
  vivify_2193:
    $P118."pasttype"("unless")
.annotate 'line', 1738
    set $P118, param_2828
    set $P119, $P2829
    unless_null $P119, vivify_2194
    new $P119, "Undef"
  vivify_2194:
    $P121 = $P118."!make"($P119)
.annotate 'line', 1735
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<while>" :anon :subid("511_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_2832
    .param pmc param_2833
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1741
    .lex "self", param_2832
    .lex "$/", param_2833
.annotate 'line', 1742
    new $P117, "Undef"
    set $P2834, $P117
    .lex "$past", $P2834
    set $P2835, param_2833
    unless_null $P2835, vivify_2195
    $P2835 = root_new ['parrot';'Hash']
  vivify_2195:
    set $P118, $P2835["xblock"]
    unless_null $P118, vivify_2196
    new $P118, "Undef"
  vivify_2196:
    $P119 = $P118."ast"()
    $P121 = "xblock_immediate"($P119)
    set $P2834, $P121
.annotate 'line', 1743
    set $P118, $P2834
    unless_null $P118, vivify_2197
    new $P118, "Undef"
  vivify_2197:
    set $P2836, param_2833
    unless_null $P2836, vivify_2198
    $P2836 = root_new ['parrot';'Hash']
  vivify_2198:
    set $P119, $P2836["sym"]
    unless_null $P119, vivify_2199
    new $P119, "Undef"
  vivify_2199:
    set $S100, $P119
    $P118."pasttype"($S100)
.annotate 'line', 1744
    set $P118, param_2833
    set $P119, $P2834
    unless_null $P119, vivify_2200
    new $P119, "Undef"
  vivify_2200:
    $P121 = $P118."!make"($P119)
.annotate 'line', 1741
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<repeat>" :anon :subid("512_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_2838
    .param pmc param_2839
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1747
    .lex "self", param_2838
    .lex "$/", param_2839
.annotate 'line', 1748
    new $P117, "Undef"
    set $P2840, $P117
    .lex "$pasttype", $P2840
.annotate 'line', 1749
    new $P118, "Undef"
    set $P2841, $P118
    .lex "$past", $P2841
.annotate 'line', 1748
    new $P119, "String"
    assign $P119, "repeat_"
    set $P2842, param_2839
    unless_null $P2842, vivify_2201
    $P2842 = root_new ['parrot';'Hash']
  vivify_2201:
    set $P121, $P2842["wu"]
    unless_null $P121, vivify_2202
    new $P121, "Undef"
  vivify_2202:
    set $S100, $P121
    concat $P122, $P119, $S100
    set $P2840, $P122
.annotate 'line', 1747
    set $P119, $P2841
    unless_null $P119, vivify_2203
    new $P119, "Undef"
  vivify_2203:
.annotate 'line', 1750
    set $P2844, param_2839
    unless_null $P2844, vivify_2204
    $P2844 = root_new ['parrot';'Hash']
  vivify_2204:
    set $P119, $P2844["xblock"]
    unless_null $P119, vivify_2205
    new $P119, "Undef"
  vivify_2205:
    if $P119, if_2843
.annotate 'line', 1755
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "PAST"
    get_who $P123, $P122
    set $P124, $P123["Op"]
    set $P2846, param_2839
    unless_null $P2846, vivify_2206
    $P2846 = root_new ['parrot';'Hash']
  vivify_2206:
    set $P125, $P2846["EXPR"]
    unless_null $P125, vivify_2207
    new $P125, "Undef"
  vivify_2207:
    $P126 = $P125."ast"()
    set $P2847, param_2839
    unless_null $P2847, vivify_2208
    $P2847 = root_new ['parrot';'Hash']
  vivify_2208:
    set $P127, $P2847["pblock"]
    unless_null $P127, vivify_2209
    new $P127, "Undef"
  vivify_2209:
    $P129 = $P127."ast"()
    $P130 = "block_immediate"($P129)
    set $P131, $P2840
    unless_null $P131, vivify_2210
    new $P131, "Undef"
  vivify_2210:
    set $P132, param_2839
    unless_null $P132, vivify_2211
    new $P132, "Undef"
  vivify_2211:
    $P133 = $P124."new"($P126, $P130, $P131 :named("pasttype"), $P132 :named("node"))
    set $P2841, $P133
.annotate 'line', 1754
    goto if_2843_end
  if_2843:
.annotate 'line', 1751
    set $P2845, param_2839
    unless_null $P2845, vivify_2212
    $P2845 = root_new ['parrot';'Hash']
  vivify_2212:
    set $P121, $P2845["xblock"]
    unless_null $P121, vivify_2213
    new $P121, "Undef"
  vivify_2213:
    $P122 = $P121."ast"()
    $P123 = "xblock_immediate"($P122)
    set $P2841, $P123
.annotate 'line', 1752
    set $P121, $P2841
    unless_null $P121, vivify_2214
    new $P121, "Undef"
  vivify_2214:
    set $P122, $P2840
    unless_null $P122, vivify_2215
    new $P122, "Undef"
  vivify_2215:
    $P121."pasttype"($P122)
  if_2843_end:
.annotate 'line', 1758
    set $P119, param_2839
    set $P121, $P2841
    unless_null $P121, vivify_2216
    new $P121, "Undef"
  vivify_2216:
    $P122 = $P119."!make"($P121)
.annotate 'line', 1747
    .return ($P122)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<for>" :anon :subid("513_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_2849
    .param pmc param_2850
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1761
    .lex "self", param_2849
    .lex "$/", param_2850
.annotate 'line', 1762
    new $P117, "Undef"
    set $P2851, $P117
    .lex "$past", $P2851
.annotate 'line', 1764
    new $P118, "Undef"
    set $P2852, $P118
    .lex "$block", $P2852
.annotate 'line', 1762
    set $P2853, param_2850
    unless_null $P2853, vivify_2217
    $P2853 = root_new ['parrot';'Hash']
  vivify_2217:
    set $P119, $P2853["xblock"]
    unless_null $P119, vivify_2218
    new $P119, "Undef"
  vivify_2218:
    $P121 = $P119."ast"()
    set $P2851, $P121
.annotate 'line', 1763
    set $P119, $P2851
    unless_null $P119, vivify_2219
    new $P119, "Undef"
  vivify_2219:
    $P119."pasttype"("for")
.annotate 'line', 1764
    new $P119, "Float"
    assign $P119, 1
    set $I100, $P119
    set $P2854, $P2851
    unless_null $P2854, vivify_2220
    $P2854 = root_new ['parrot';'ResizablePMCArray']
  vivify_2220:
    set $P121, $P2854[$I100]
    unless_null $P121, vivify_2221
    new $P121, "Undef"
  vivify_2221:
    set $P2852, $P121
.annotate 'line', 1765
    set $P119, $P2852
    unless_null $P119, vivify_2222
    new $P119, "Undef"
  vivify_2222:
    $P121 = $P119."arity"()
    if $P121, unless_2855_end
.annotate 'line', 1766
    new $P122, "Float"
    assign $P122, 0
    set $I100, $P122
    set $P2856, $P2852
    unless_null $P2856, vivify_2223
    $P2856 = root_new ['parrot';'ResizablePMCArray']
  vivify_2223:
    set $P123, $P2856[$I100]
    unless_null $P123, vivify_2224
    new $P123, "Undef"
  vivify_2224:
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Var"]
    $P129 = $P127."new"("$_" :named("name"), "parameter" :named("scope"))
    $P123."push"($P129)
.annotate 'line', 1767
    set $P122, $P2852
    unless_null $P122, vivify_2225
    new $P122, "Undef"
  vivify_2225:
    $P122."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1768
    set $P122, $P2852
    unless_null $P122, vivify_2226
    new $P122, "Undef"
  vivify_2226:
    $P122."arity"(1)
  unless_2855_end:
.annotate 'line', 1770
    set $P119, $P2852
    unless_null $P119, vivify_2227
    new $P119, "Undef"
  vivify_2227:
    $P119."blocktype"("immediate")
.annotate 'line', 1771
    set $P119, param_2850
    set $P121, $P2851
    unless_null $P121, vivify_2228
    new $P121, "Undef"
  vivify_2228:
    $P122 = $P119."!make"($P121)
.annotate 'line', 1761
    .return ($P122)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<CATCH>" :anon :subid("514_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_2858
    .param pmc param_2859
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1774
    .lex "self", param_2858
    .lex "$/", param_2859
.annotate 'line', 1775
    new $P117, "Undef"
    set $P2860, $P117
    .lex "$block", $P2860
    set $P2861, param_2859
    unless_null $P2861, vivify_2229
    $P2861 = root_new ['parrot';'Hash']
  vivify_2229:
    set $P118, $P2861["block"]
    unless_null $P118, vivify_2230
    new $P118, "Undef"
  vivify_2230:
    $P119 = $P118."ast"()
    set $P2860, $P119
.annotate 'line', 1776
    set $P118, param_2859
    unless_null $P118, vivify_2231
    new $P118, "Undef"
  vivify_2231:
    set $P119, $P2860
    unless_null $P119, vivify_2232
    new $P119, "Undef"
  vivify_2232:
    "push_block_handler"($P118, $P119)
.annotate 'line', 1777
    new $P118, "Float"
    assign $P118, 0
    set $I100, $P118
    find_dynamic_lex $P122, "$*W"
    unless_null $P122, vivify_2233
    get_hll_global $P119, "GLOBAL"
    get_who $P121, $P119
    set $P122, $P121["$W"]
    unless_null $P122, vivify_2234
    die "Contextual $*W not found"
  vivify_2234:
  vivify_2233:
    $P123 = $P122."cur_lexpad"()
    $P124 = $P123."handlers"()
    set $P125, $P124[$I100]
    unless_null $P125, vivify_2235
    new $P125, "Undef"
  vivify_2235:
    $P125."handle_types_except"("CONTROL")
.annotate 'line', 1778
    set $P118, param_2859
    get_hll_global $P119, "GLOBAL"
    nqp_get_package_through_who $P121, $P119, "PAST"
    get_who $P122, $P121
    set $P123, $P122["Stmts"]
    set $P124, param_2859
    unless_null $P124, vivify_2236
    new $P124, "Undef"
  vivify_2236:
    $P125 = $P123."new"($P124 :named("node"))
    $P126 = $P118."!make"($P125)
.annotate 'line', 1774
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<CONTROL>" :anon :subid("515_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_2863
    .param pmc param_2864
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1781
    .lex "self", param_2863
    .lex "$/", param_2864
.annotate 'line', 1782
    new $P117, "Undef"
    set $P2865, $P117
    .lex "$block", $P2865
    set $P2866, param_2864
    unless_null $P2866, vivify_2237
    $P2866 = root_new ['parrot';'Hash']
  vivify_2237:
    set $P118, $P2866["block"]
    unless_null $P118, vivify_2238
    new $P118, "Undef"
  vivify_2238:
    $P119 = $P118."ast"()
    set $P2865, $P119
.annotate 'line', 1783
    set $P118, param_2864
    unless_null $P118, vivify_2239
    new $P118, "Undef"
  vivify_2239:
    set $P119, $P2865
    unless_null $P119, vivify_2240
    new $P119, "Undef"
  vivify_2240:
    "push_block_handler"($P118, $P119)
.annotate 'line', 1784
    new $P118, "Float"
    assign $P118, 0
    set $I100, $P118
    find_dynamic_lex $P122, "$*W"
    unless_null $P122, vivify_2241
    get_hll_global $P119, "GLOBAL"
    get_who $P121, $P119
    set $P122, $P121["$W"]
    unless_null $P122, vivify_2242
    die "Contextual $*W not found"
  vivify_2242:
  vivify_2241:
    $P123 = $P122."cur_lexpad"()
    $P124 = $P123."handlers"()
    set $P125, $P124[$I100]
    unless_null $P125, vivify_2243
    new $P125, "Undef"
  vivify_2243:
    $P125."handle_types"("CONTROL")
.annotate 'line', 1785
    set $P118, param_2864
    get_hll_global $P119, "GLOBAL"
    nqp_get_package_through_who $P121, $P119, "PAST"
    get_who $P122, $P121
    set $P123, $P122["Stmts"]
    set $P124, param_2864
    unless_null $P124, vivify_2244
    new $P124, "Undef"
  vivify_2244:
    $P125 = $P123."new"($P124 :named("node"))
    $P126 = $P118."!make"($P125)
.annotate 'line', 1781
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_prefix:sym<INIT>" :anon :subid("516_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_2868
    .param pmc param_2869
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1826
    .lex "self", param_2868
    .lex "$/", param_2869
.annotate 'line', 1827
    find_dynamic_lex $P119, "$*W"
    unless_null $P119, vivify_2245
    get_hll_global $P117, "GLOBAL"
    get_who $P118, $P117
    set $P119, $P118["$W"]
    unless_null $P119, vivify_2246
    die "Contextual $*W not found"
  vivify_2246:
  vivify_2245:
    $P121 = $P119."cur_lexpad"()
    set $P2870, param_2869
    unless_null $P2870, vivify_2247
    $P2870 = root_new ['parrot';'Hash']
  vivify_2247:
    set $P122, $P2870["blorst"]
    unless_null $P122, vivify_2248
    new $P122, "Undef"
  vivify_2248:
    $P123 = $P122."ast"()
    $P121."push"($P123)
.annotate 'line', 1828
    set $P117, param_2869
    get_hll_global $P118, "GLOBAL"
    nqp_get_package_through_who $P119, $P118, "PAST"
    get_who $P121, $P119
    set $P122, $P121["Stmts"]
    $P123 = $P122."new"()
    $P124 = $P117."!make"($P123)
.annotate 'line', 1826
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_prefix:sym<try>" :anon :subid("517_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_2872
    .param pmc param_2873
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1831
    .lex "self", param_2872
    .lex "$/", param_2873
.annotate 'line', 1832
    new $P117, "Undef"
    set $P2874, $P117
    .lex "$past", $P2874
    set $P2875, param_2873
    unless_null $P2875, vivify_2249
    $P2875 = root_new ['parrot';'Hash']
  vivify_2249:
    set $P118, $P2875["blorst"]
    unless_null $P118, vivify_2250
    new $P118, "Undef"
  vivify_2250:
    $P119 = $P118."ast"()
    set $P2874, $P119
.annotate 'line', 1833
    get_hll_global $P118, "GLOBAL"
    nqp_get_package_through_who $P119, $P118, "PAST"
    get_who $P121, $P119
    set $P122, $P121["Block"]
    set $P123, $P2874
    unless_null $P123, vivify_2251
    new $P123, "Undef"
  vivify_2251:
    $P124 = $P122."ACCEPTS"($P123)
    if $P124, unless_2876_end
.annotate 'line', 1834
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P129, $P127["Block"]
    set $P130, $P2874
    unless_null $P130, vivify_2252
    new $P130, "Undef"
  vivify_2252:
    set $P131, param_2873
    unless_null $P131, vivify_2253
    new $P131, "Undef"
  vivify_2253:
    $P132 = $P129."new"($P130, "immediate" :named("blocktype"), $P131 :named("node"))
    set $P2874, $P132
  unless_2876_end:
.annotate 'line', 1836
    set $P118, $P2874
    unless_null $P118, vivify_2254
    new $P118, "Undef"
  vivify_2254:
    $P119 = $P118."handlers"()
    if $P119, unless_2877_end
.annotate 'line', 1837
    set $P121, $P2874
    unless_null $P121, vivify_2255
    new $P121, "Undef"
  vivify_2255:
    get_hll_global $P122, "GLOBAL"
    nqp_get_package_through_who $P123, $P122, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Control"]
.annotate 'line', 1839
    get_hll_global $P126, "GLOBAL"
    nqp_get_package_through_who $P127, $P126, "PAST"
    get_who $P129, $P127
    set $P130, $P129["Stmts"]
.annotate 'line', 1840
    get_hll_global $P131, "GLOBAL"
    nqp_get_package_through_who $P132, $P131, "PAST"
    get_who $P133, $P132
    set $P134, $P133["Op"]
.annotate 'line', 1841
    get_hll_global $P135, "GLOBAL"
    nqp_get_package_through_who $P136, $P135, "PAST"
    get_who $P137, $P136
    set $P138, $P137["Var"]
.annotate 'line', 1842
    get_hll_global $P139, "GLOBAL"
    nqp_get_package_through_who $P140, $P139, "PAST"
    get_who $P141, $P140
    set $P142, $P141["Var"]
    $P143 = $P142."new"("register" :named("scope"), "exception" :named("name"))
    $P144 = $P138."new"($P143, "handled", "keyed" :named("scope"))
.annotate 'line', 1841
    $P145 = $P134."new"($P144, 1, "bind_6model" :named("pasttype"))
.annotate 'line', 1840
    $P146 = $P130."new"($P145)
.annotate 'line', 1839
    $P147 = $P125."new"($P146, "CONTROL" :named("handle_types_except"))
.annotate 'line', 1837
    new $P148, "ResizablePMCArray"
    push $P148, $P147
    $P121."handlers"($P148)
  unless_2877_end:
.annotate 'line', 1851
    set $P118, param_2873
    set $P119, $P2874
    unless_null $P119, vivify_2256
    new $P119, "Undef"
  vivify_2256:
    $P121 = $P118."!make"($P119)
.annotate 'line', 1831
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "blorst" :anon :subid("518_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_2879
    .param pmc param_2880
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1854
    .lex "self", param_2879
    .lex "$/", param_2880
.annotate 'line', 1855
    set $P117, param_2880
.annotate 'line', 1856
    set $P2882, param_2880
    unless_null $P2882, vivify_2257
    $P2882 = root_new ['parrot';'Hash']
  vivify_2257:
    set $P119, $P2882["block"]
    unless_null $P119, vivify_2258
    new $P119, "Undef"
  vivify_2258:
    if $P119, if_2881
.annotate 'line', 1857
    set $P2884, param_2880
    unless_null $P2884, vivify_2259
    $P2884 = root_new ['parrot';'Hash']
  vivify_2259:
    set $P124, $P2884["statement"]
    unless_null $P124, vivify_2260
    new $P124, "Undef"
  vivify_2260:
    $P125 = $P124."ast"()
    set $P118, $P125
.annotate 'line', 1856
    goto if_2881_end
  if_2881:
    set $P2883, param_2880
    unless_null $P2883, vivify_2261
    $P2883 = root_new ['parrot';'Hash']
  vivify_2261:
    set $P121, $P2883["block"]
    unless_null $P121, vivify_2262
    new $P121, "Undef"
  vivify_2262:
    $P122 = $P121."ast"()
    $P123 = "block_immediate"($P122)
    set $P118, $P123
  if_2881_end:
    $P126 = $P117."!make"($P118)
.annotate 'line', 1854
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_mod_cond:sym<if>" :anon :subid("519_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_2886
    .param pmc param_2887
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1862
    .lex "self", param_2886
    .lex "$/", param_2887
    set $P117, param_2887
    set $P2888, param_2887
    unless_null $P2888, vivify_2263
    $P2888 = root_new ['parrot';'Hash']
  vivify_2263:
    set $P118, $P2888["cond"]
    unless_null $P118, vivify_2264
    new $P118, "Undef"
  vivify_2264:
    $P119 = $P118."ast"()
    $P121 = $P117."!make"($P119)
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_mod_cond:sym<unless>" :anon :subid("520_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_2890
    .param pmc param_2891
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1863
    .lex "self", param_2890
    .lex "$/", param_2891
    set $P117, param_2891
    set $P2892, param_2891
    unless_null $P2892, vivify_2265
    $P2892 = root_new ['parrot';'Hash']
  vivify_2265:
    set $P118, $P2892["cond"]
    unless_null $P118, vivify_2266
    new $P118, "Undef"
  vivify_2266:
    $P119 = $P118."ast"()
    $P121 = $P117."!make"($P119)
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_mod_loop:sym<while>" :anon :subid("521_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_2894
    .param pmc param_2895
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1865
    .lex "self", param_2894
    .lex "$/", param_2895
    set $P117, param_2895
    set $P2896, param_2895
    unless_null $P2896, vivify_2267
    $P2896 = root_new ['parrot';'Hash']
  vivify_2267:
    set $P118, $P2896["cond"]
    unless_null $P118, vivify_2268
    new $P118, "Undef"
  vivify_2268:
    $P119 = $P118."ast"()
    $P121 = $P117."!make"($P119)
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_mod_loop:sym<until>" :anon :subid("522_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_2898
    .param pmc param_2899
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1866
    .lex "self", param_2898
    .lex "$/", param_2899
    set $P117, param_2899
    set $P2900, param_2899
    unless_null $P2900, vivify_2269
    $P2900 = root_new ['parrot';'Hash']
  vivify_2269:
    set $P118, $P2900["cond"]
    unless_null $P118, vivify_2270
    new $P118, "Undef"
  vivify_2270:
    $P119 = $P118."ast"()
    $P121 = $P117."!make"($P119)
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<fatarrow>" :anon :subid("523_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_2902
    .param pmc param_2903
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1870
    .lex "self", param_2902
    .lex "$/", param_2903
    set $P117, param_2903
    set $P2904, param_2903
    unless_null $P2904, vivify_2271
    $P2904 = root_new ['parrot';'Hash']
  vivify_2271:
    set $P118, $P2904["fatarrow"]
    unless_null $P118, vivify_2272
    new $P118, "Undef"
  vivify_2272:
    $P119 = $P118."ast"()
    $P121 = $P117."!make"($P119)
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<colonpair>" :anon :subid("524_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_2906
    .param pmc param_2907
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1871
    .lex "self", param_2906
    .lex "$/", param_2907
    set $P117, param_2907
    set $P2908, param_2907
    unless_null $P2908, vivify_2273
    $P2908 = root_new ['parrot';'Hash']
  vivify_2273:
    set $P118, $P2908["colonpair"]
    unless_null $P118, vivify_2274
    new $P118, "Undef"
  vivify_2274:
    $P119 = $P118."ast"()
    $P121 = $P117."!make"($P119)
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<variable>" :anon :subid("525_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_2910
    .param pmc param_2911
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1872
    .lex "self", param_2910
    .lex "$/", param_2911
    set $P117, param_2911
    set $P2912, param_2911
    unless_null $P2912, vivify_2275
    $P2912 = root_new ['parrot';'Hash']
  vivify_2275:
    set $P118, $P2912["variable"]
    unless_null $P118, vivify_2276
    new $P118, "Undef"
  vivify_2276:
    $P119 = $P118."ast"()
    $P121 = $P117."!make"($P119)
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<package_declarator>" :anon :subid("526_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_2914
    .param pmc param_2915
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1873
    .lex "self", param_2914
    .lex "$/", param_2915
    set $P117, param_2915
    set $P2916, param_2915
    unless_null $P2916, vivify_2277
    $P2916 = root_new ['parrot';'Hash']
  vivify_2277:
    set $P118, $P2916["package_declarator"]
    unless_null $P118, vivify_2278
    new $P118, "Undef"
  vivify_2278:
    $P119 = $P118."ast"()
    $P121 = $P117."!make"($P119)
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<scope_declarator>" :anon :subid("527_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_2918
    .param pmc param_2919
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1874
    .lex "self", param_2918
    .lex "$/", param_2919
    set $P117, param_2919
    set $P2920, param_2919
    unless_null $P2920, vivify_2279
    $P2920 = root_new ['parrot';'Hash']
  vivify_2279:
    set $P118, $P2920["scope_declarator"]
    unless_null $P118, vivify_2280
    new $P118, "Undef"
  vivify_2280:
    $P119 = $P118."ast"()
    $P121 = $P117."!make"($P119)
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<routine_declarator>" :anon :subid("528_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_2922
    .param pmc param_2923
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1875
    .lex "self", param_2922
    .lex "$/", param_2923
    set $P117, param_2923
    set $P2924, param_2923
    unless_null $P2924, vivify_2281
    $P2924 = root_new ['parrot';'Hash']
  vivify_2281:
    set $P118, $P2924["routine_declarator"]
    unless_null $P118, vivify_2282
    new $P118, "Undef"
  vivify_2282:
    $P119 = $P118."ast"()
    $P121 = $P117."!make"($P119)
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<regex_declarator>" :anon :subid("529_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_2926
    .param pmc param_2927
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1876
    .lex "self", param_2926
    .lex "$/", param_2927
    set $P117, param_2927
    set $P2928, param_2927
    unless_null $P2928, vivify_2283
    $P2928 = root_new ['parrot';'Hash']
  vivify_2283:
    set $P118, $P2928["regex_declarator"]
    unless_null $P118, vivify_2284
    new $P118, "Undef"
  vivify_2284:
    $P119 = $P118."ast"()
    $P121 = $P117."!make"($P119)
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<statement_prefix>" :anon :subid("530_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_2930
    .param pmc param_2931
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1877
    .lex "self", param_2930
    .lex "$/", param_2931
    set $P117, param_2931
    set $P2932, param_2931
    unless_null $P2932, vivify_2285
    $P2932 = root_new ['parrot';'Hash']
  vivify_2285:
    set $P118, $P2932["statement_prefix"]
    unless_null $P118, vivify_2286
    new $P118, "Undef"
  vivify_2286:
    $P119 = $P118."ast"()
    $P121 = $P117."!make"($P119)
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<lambda>" :anon :subid("531_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_2934
    .param pmc param_2935
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1878
    .lex "self", param_2934
    .lex "$/", param_2935
    set $P117, param_2935
    set $P2936, param_2935
    unless_null $P2936, vivify_2287
    $P2936 = root_new ['parrot';'Hash']
  vivify_2287:
    set $P118, $P2936["pblock"]
    unless_null $P118, vivify_2288
    new $P118, "Undef"
  vivify_2288:
    $P119 = $P118."ast"()
    $P121 = $P117."!make"($P119)
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "fatarrow" :anon :subid("532_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_2938
    .param pmc param_2939
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1880
    .lex "self", param_2938
    .lex "$/", param_2939
.annotate 'line', 1881
    new $P117, "Undef"
    set $P2940, $P117
    .lex "$past", $P2940
    set $P2941, param_2939
    unless_null $P2941, vivify_2289
    $P2941 = root_new ['parrot';'Hash']
  vivify_2289:
    set $P118, $P2941["val"]
    unless_null $P118, vivify_2290
    new $P118, "Undef"
  vivify_2290:
    $P119 = $P118."ast"()
    set $P2940, $P119
.annotate 'line', 1882
    set $P118, $P2940
    unless_null $P118, vivify_2291
    new $P118, "Undef"
  vivify_2291:
    set $P2942, param_2939
    unless_null $P2942, vivify_2292
    $P2942 = root_new ['parrot';'Hash']
  vivify_2292:
    set $P119, $P2942["key"]
    unless_null $P119, vivify_2293
    new $P119, "Undef"
  vivify_2293:
    $P121 = $P119."Str"()
    $P118."named"($P121)
.annotate 'line', 1883
    set $P118, param_2939
    set $P119, $P2940
    unless_null $P119, vivify_2294
    new $P119, "Undef"
  vivify_2294:
    $P121 = $P118."!make"($P119)
.annotate 'line', 1880
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "colonpair" :anon :subid("533_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_2944
    .param pmc param_2945
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1886
    .lex "self", param_2944
    .lex "$/", param_2945
.annotate 'line', 1887
    new $P117, "Undef"
    set $P2946, $P117
    .lex "$past", $P2946
.annotate 'line', 1888
    set $P2948, param_2945
    unless_null $P2948, vivify_2295
    $P2948 = root_new ['parrot';'Hash']
  vivify_2295:
    set $P119, $P2948["circumfix"]
    unless_null $P119, vivify_2296
    new $P119, "Undef"
  vivify_2296:
    if $P119, if_2947
.annotate 'line', 1889
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Val"]
    set $P2951, param_2945
    unless_null $P2951, vivify_2297
    $P2951 = root_new ['parrot';'Hash']
  vivify_2297:
    set $P129, $P2951["not"]
    unless_null $P129, vivify_2298
    new $P129, "Undef"
  vivify_2298:
    isfalse $I101, $P129
    $P130 = $P127."new"($I101 :named("value"))
    set $P118, $P130
.annotate 'line', 1888
    goto if_2947_end
  if_2947:
    new $P121, "Float"
    assign $P121, 0
    set $I100, $P121
    set $P2949, param_2945
    unless_null $P2949, vivify_2299
    $P2949 = root_new ['parrot';'Hash']
  vivify_2299:
    set $P2950, $P2949["circumfix"]
    unless_null $P2950, vivify_2300
    $P2950 = root_new ['parrot';'ResizablePMCArray']
  vivify_2300:
    set $P122, $P2950[$I100]
    unless_null $P122, vivify_2301
    new $P122, "Undef"
  vivify_2301:
    $P123 = $P122."ast"()
    set $P118, $P123
  if_2947_end:
    set $P2946, $P118
.annotate 'line', 1890
    set $P118, $P2946
    unless_null $P118, vivify_2302
    new $P118, "Undef"
  vivify_2302:
    set $P2952, param_2945
    unless_null $P2952, vivify_2303
    $P2952 = root_new ['parrot';'Hash']
  vivify_2303:
    set $P119, $P2952["identifier"]
    unless_null $P119, vivify_2304
    new $P119, "Undef"
  vivify_2304:
    set $S100, $P119
    $P118."named"($S100)
.annotate 'line', 1891
    set $P118, param_2945
    set $P119, $P2946
    unless_null $P119, vivify_2305
    new $P119, "Undef"
  vivify_2305:
    $P121 = $P118."!make"($P119)
.annotate 'line', 1886
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "variable" :anon :subid("534_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_2954
    .param pmc param_2955
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1894
    .const 'Sub' $P2961 = "535_1329260321.776" 
    capture_lex $P2961
    .lex "self", param_2954
    .lex "$/", param_2955
.annotate 'line', 1895
    new $P117, "Undef"
    set $P2956, $P117
    .lex "$past", $P2956
.annotate 'line', 1894
    set $P118, $P2956
    unless_null $P118, vivify_2306
    new $P118, "Undef"
  vivify_2306:
.annotate 'line', 1896
    set $P2958, param_2955
    unless_null $P2958, vivify_2307
    $P2958 = root_new ['parrot';'Hash']
  vivify_2307:
    set $P118, $P2958["postcircumfix"]
    unless_null $P118, vivify_2308
    new $P118, "Undef"
  vivify_2308:
    if $P118, if_2957
.annotate 'line', 1900
    .const 'Sub' $P2961 = "535_1329260321.776" 
    capture_lex $P2961
    $P2961()
    goto if_2957_end
  if_2957:
.annotate 'line', 1897
    set $P2959, param_2955
    unless_null $P2959, vivify_2372
    $P2959 = root_new ['parrot';'Hash']
  vivify_2372:
    set $P119, $P2959["postcircumfix"]
    unless_null $P119, vivify_2373
    new $P119, "Undef"
  vivify_2373:
    $P121 = $P119."ast"()
    set $P2956, $P121
.annotate 'line', 1898
    set $P119, $P2956
    unless_null $P119, vivify_2374
    new $P119, "Undef"
  vivify_2374:
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "PAST"
    get_who $P123, $P122
    set $P124, $P123["Var"]
    $P125 = $P124."new"("$/" :named("name"))
    $P119."unshift"($P125)
  if_2957_end:
.annotate 'line', 1962
    set $P118, param_2955
    set $P119, $P2956
    unless_null $P119, vivify_2375
    new $P119, "Undef"
  vivify_2375:
    $P121 = $P118."!make"($P119)
.annotate 'line', 1894
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2960"  :anon :subid("535_1329260321.776") :outer("534_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1900
    .const 'Sub' $P2983 = "537_1329260321.776" 
    capture_lex $P2983
    .const 'Sub' $P2974 = "536_1329260321.776" 
    capture_lex $P2974
.annotate 'line', 1901
    $P2963 = root_new ['parrot';'ResizablePMCArray']
    set $P2962, $P2963
    .lex "@name", $P2962
    get_hll_global $P119, "GLOBAL"
    nqp_get_package_through_who $P121, $P119, "NQP"
    get_who $P122, $P121
    set $P123, $P122["Compiler"]
    find_lex $P124, "$/"
    unless_null $P124, vivify_2309
    new $P124, "Undef"
  vivify_2309:
    set $S100, $P124
    $P125 = $P123."parse_name"($S100)
    set $P2962, $P125
.annotate 'line', 1902
    set $P2965, $P2962
    unless_null $P2965, vivify_2310
    $P2965 = root_new ['parrot';'ResizablePMCArray']
  vivify_2310:
    set $N100, $P2965
    set $N101, 1
    isgt $I100, $N100, $N101
    if $I100, if_2964
.annotate 'line', 1909
    new $P122, "Float"
    assign $P122, 0
    set $I101, $P122
    find_lex $P2971, "$/"
    unless_null $P2971, vivify_2311
    $P2971 = root_new ['parrot';'Hash']
  vivify_2311:
    set $P2972, $P2971["twigil"]
    unless_null $P2972, vivify_2312
    $P2972 = root_new ['parrot';'ResizablePMCArray']
  vivify_2312:
    set $P123, $P2972[$I101]
    unless_null $P123, vivify_2313
    new $P123, "Undef"
  vivify_2313:
    set $S100, $P123
    iseq $I102, $S100, "*"
    if $I102, if_2970
.annotate 'line', 1920
    new $P129, "Float"
    assign $P129, 0
    set $I103, $P129
    find_lex $P2980, "$/"
    unless_null $P2980, vivify_2314
    $P2980 = root_new ['parrot';'Hash']
  vivify_2314:
    set $P2981, $P2980["twigil"]
    unless_null $P2981, vivify_2315
    $P2981 = root_new ['parrot';'ResizablePMCArray']
  vivify_2315:
    set $P130, $P2981[$I103]
    unless_null $P130, vivify_2316
    new $P130, "Undef"
  vivify_2316:
    set $S101, $P130
    iseq $I104, $S101, "!"
    if $I104, if_2979
.annotate 'line', 1952
    find_dynamic_lex $P139, "$*W"
    unless_null $P139, vivify_2317
    get_hll_global $P137, "GLOBAL"
    get_who $P138, $P137
    set $P139, $P138["$W"]
    unless_null $P139, vivify_2318
    die "Contextual $*W not found"
  vivify_2318:
  vivify_2317:
    new $P140, "Float"
    assign $P140, 0
    set $I105, $P140
    set $P3002, $P2962
    unless_null $P3002, vivify_2319
    $P3002 = root_new ['parrot';'ResizablePMCArray']
  vivify_2319:
    set $P141, $P3002[$I105]
    unless_null $P141, vivify_2320
    new $P141, "Undef"
  vivify_2320:
    set $S102, $P141
    $P142 = $P139."is_package"($S102)
    if $P142, if_3001
.annotate 'line', 1957
    get_hll_global $P143, "GLOBAL"
    nqp_get_package_through_who $P144, $P143, "PAST"
    get_who $P145, $P144
    set $P147, $P145["Var"]
.annotate 'line', 1958
    set $P3005, $P2962
    unless_null $P3005, vivify_2321
    $P3005 = root_new ['parrot';'ResizablePMCArray']
  vivify_2321:
    $P148 = $P3005."pop"()
    set $S103, $P148
    find_lex $P3006, "$/"
    unless_null $P3006, vivify_2322
    $P3006 = root_new ['parrot';'Hash']
  vivify_2322:
    set $P150, $P3006["sigil"]
    unless_null $P150, vivify_2323
    new $P150, "Undef"
  vivify_2323:
    $P151 = "vivitype"($P150)
.annotate 'line', 1957
    $P152 = $P147."new"($S103 :named("name"), $P151 :named("viviself"))
    store_lex "$past", $P152
.annotate 'line', 1956
    set $P136, $P152
.annotate 'line', 1952
    goto if_3001_end
  if_3001:
.annotate 'line', 1953
    set $P3003, $P2962
    unless_null $P3003, vivify_2324
    $P3003 = root_new ['parrot';'ResizablePMCArray']
  vivify_2324:
    find_lex $P143, "$/"
    unless_null $P143, vivify_2325
    new $P143, "Undef"
  vivify_2325:
    $P144 = "lexical_package_lookup"($P3003, $P143)
    store_lex "$past", $P144
.annotate 'line', 1954
    find_lex $P143, "$past"
    unless_null $P143, vivify_2326
    new $P143, "Undef"
  vivify_2326:
    find_lex $P3004, "$/"
    unless_null $P3004, vivify_2327
    $P3004 = root_new ['parrot';'Hash']
  vivify_2327:
    set $P144, $P3004["sigil"]
    unless_null $P144, vivify_2328
    new $P144, "Undef"
  vivify_2328:
    $P145 = "vivitype"($P144)
    $P146 = $P143."viviself"($P145)
.annotate 'line', 1952
    set $P136, $P146
  if_3001_end:
    set $P127, $P136
.annotate 'line', 1920
    goto if_2979_end
  if_2979:
    .const 'Sub' $P2983 = "537_1329260321.776" 
    capture_lex $P2983
    $P135 = $P2983()
    set $P127, $P135
  if_2979_end:
    set $P121, $P127
.annotate 'line', 1909
    goto if_2970_end
  if_2970:
    .const 'Sub' $P2974 = "536_1329260321.776" 
    capture_lex $P2974
    $P126 = $P2974()
    set $P121, $P126
  if_2970_end:
    set $P119, $P121
.annotate 'line', 1902
    goto if_2964_end
  if_2964:
.annotate 'line', 1903
    find_lex $P2967, "$/"
    unless_null $P2967, vivify_2364
    $P2967 = root_new ['parrot';'Hash']
  vivify_2364:
    set $P121, $P2967["twigil"]
    unless_null $P121, vivify_2365
    new $P121, "Undef"
  vivify_2365:
    unless $P121, if_2966_end
.annotate 'line', 1904
    find_lex $P122, "$/"
    unless_null $P122, vivify_2366
    new $P122, "Undef"
  vivify_2366:
    $P123 = $P122."CURSOR"()
    $P123."panic"("Twigil not allowed on multi-part name")
  if_2966_end:
.annotate 'line', 1906
    set $P2968, $P2962
    unless_null $P2968, vivify_2367
    $P2968 = root_new ['parrot';'ResizablePMCArray']
  vivify_2367:
    find_lex $P121, "$/"
    unless_null $P121, vivify_2368
    new $P121, "Undef"
  vivify_2368:
    $P122 = "lexical_package_lookup"($P2968, $P121)
    store_lex "$past", $P122
.annotate 'line', 1907
    find_lex $P121, "$past"
    unless_null $P121, vivify_2369
    new $P121, "Undef"
  vivify_2369:
    find_lex $P2969, "$/"
    unless_null $P2969, vivify_2370
    $P2969 = root_new ['parrot';'Hash']
  vivify_2370:
    set $P122, $P2969["sigil"]
    unless_null $P122, vivify_2371
    new $P122, "Undef"
  vivify_2371:
    $P123 = "vivitype"($P122)
    $P124 = $P121."viviself"($P123)
.annotate 'line', 1902
    set $P119, $P124
  if_2964_end:
.annotate 'line', 1900
    .return ($P119)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2982"  :anon :subid("537_1329260321.776") :outer("535_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1920
    .const 'Sub' $P2992 = "538_1329260321.776" 
    capture_lex $P2992
.annotate 'line', 1922
    new $P131, "Undef"
    set $P2984, $P131
    .lex "$name", $P2984
.annotate 'line', 1923
    new $P132, "Undef"
    set $P2985, $P132
    .lex "$ch", $P2985
.annotate 'line', 1922
    find_lex $P2986, "@name"
    unless_null $P2986, vivify_2329
    $P2986 = root_new ['parrot';'ResizablePMCArray']
  vivify_2329:
    $P134 = $P2986."pop"()
    set $S102, $P134
    new $P135, 'String'
    set $P135, $S102
    set $P2984, $P135
.annotate 'line', 1923
    get_hll_global $P134, "GLOBAL"
    nqp_get_package_through_who $P135, $P134, "PAST"
    get_who $P136, $P135
    set $P137, $P136["Var"]
    $P138 = $P137."new"("$?CLASS" :named("name"))
    set $P2985, $P138
.annotate 'line', 1924
    new $P134, "Float"
    assign $P134, 1
    set $P2987, $P2985
    unless_null $P2987, vivify_2330
    $P2987 = root_new ['parrot';'Hash']
    set $P2985, $P2987
  vivify_2330:
    set $P2987["has_compile_time_value"], $P134
.annotate 'line', 1925
    find_dynamic_lex $P136, "$*PACKAGE"
    unless_null $P136, vivify_2331
    get_hll_global $P134, "GLOBAL"
    get_who $P135, $P134
    set $P136, $P135["$PACKAGE"]
    unless_null $P136, vivify_2332
    die "Contextual $*PACKAGE not found"
  vivify_2332:
  vivify_2331:
    set $P2988, $P2985
    unless_null $P2988, vivify_2333
    $P2988 = root_new ['parrot';'Hash']
    set $P2985, $P2988
  vivify_2333:
    set $P2988["compile_time_value"], $P136
.annotate 'line', 1926
    get_hll_global $P134, "GLOBAL"
    nqp_get_package_through_who $P135, $P134, "PAST"
    get_who $P136, $P135
    set $P137, $P136["Var"]
    set $P138, $P2984
    unless_null $P138, vivify_2334
    new $P138, "Undef"
  vivify_2334:
.annotate 'line', 1928
    find_lex $P2989, "$/"
    unless_null $P2989, vivify_2335
    $P2989 = root_new ['parrot';'Hash']
  vivify_2335:
    set $P139, $P2989["sigil"]
    unless_null $P139, vivify_2336
    new $P139, "Undef"
  vivify_2336:
    $P140 = "vivitype"($P139)
.annotate 'line', 1929
    get_hll_global $P141, "GLOBAL"
    nqp_get_package_through_who $P142, $P141, "PAST"
    get_who $P143, $P142
    set $P144, $P143["Op"]
    get_hll_global $P145, "GLOBAL"
    nqp_get_package_through_who $P146, $P145, "PAST"
    get_who $P147, $P146
    set $P148, $P147["Var"]
    $P150 = $P148."new"("self" :named("name"))
    $P151 = $P144."new"($P150, "nqp_decontainerize PP" :named("pirop"))
    set $P152, $P2985
    unless_null $P152, vivify_2337
    new $P152, "Undef"
  vivify_2337:
    $P153 = $P137."new"($P151, $P152, $P138 :named("name"), "attribute_6model" :named("scope"), $P140 :named("viviself"))
.annotate 'line', 1926
    store_lex "$past", $P153
.annotate 'line', 1934
    find_dynamic_lex $P137, "$*IN_DECL"
    unless_null $P137, vivify_2338
    get_hll_global $P135, "GLOBAL"
    get_who $P136, $P135
    set $P137, $P136["$IN_DECL"]
    unless_null $P137, vivify_2339
    die "Contextual $*IN_DECL not found"
  vivify_2339:
  vivify_2338:
    unless $P137, unless_2990
    set $P134, $P137
    goto unless_2990_end
  unless_2990:
    .const 'Sub' $P2992 = "538_1329260321.776" 
    capture_lex $P2992
    $P140 = $P2992()
    set $P134, $P140
  unless_2990_end:
.annotate 'line', 1920
    .return ($P134)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block2991"  :anon :subid("538_1329260321.776") :outer("537_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1934
    .const 'Sub' $P2995 = "539_1329260321.776" 
    capture_lex $P2995
.annotate 'line', 1935
    new $P138, "Undef"
    set $P2993, $P138
    .lex "$attr", $P2993
.annotate 'line', 1934
    set $P139, $P2993
    unless_null $P139, vivify_2340
    new $P139, "Undef"
  vivify_2340:
.annotate 'line', 1936
    find_dynamic_lex $P142, "$*PACKAGE"
    unless_null $P142, vivify_2341
    get_hll_global $P140, "GLOBAL"
    get_who $P141, $P140
    set $P142, $P141["$PACKAGE"]
    unless_null $P142, vivify_2342
    die "Contextual $*PACKAGE not found"
  vivify_2342:
  vivify_2341:
    get_how $P143, $P142
    find_dynamic_lex $P146, "$*PACKAGE"
    unless_null $P146, vivify_2343
    get_hll_global $P144, "GLOBAL"
    get_who $P145, $P144
    set $P146, $P145["$PACKAGE"]
    unless_null $P146, vivify_2344
    die "Contextual $*PACKAGE not found"
  vivify_2344:
  vivify_2343:
    $P147 = $P143."attributes"($P146, 1 :named("local"))
    defined $I105, $P147
    unless $I105, for_undef_2345
    iter $P139, $P147
    new $P151, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P151, loop2998_handler
    push_eh $P151
  loop2998_test:
    unless $P139, loop2998_done
    shift $P148, $P139
  loop2998_redo:
    .const 'Sub' $P2995 = "539_1329260321.776" 
    capture_lex $P2995
    $P2995($P148)
  loop2998_next:
    goto loop2998_test
  loop2998_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P152, exception, 'type'
    eq $P152, .CONTROL_LOOP_NEXT, loop2998_next
    eq $P152, .CONTROL_LOOP_REDO, loop2998_redo
  loop2998_done:
    pop_eh 
  for_undef_2345:
.annotate 'line', 1942
    set $P140, $P2993
    unless_null $P140, vivify_2349
    new $P140, "Undef"
  vivify_2349:
    defined $I105, $P140
    if $I105, if_2999
.annotate 'line', 1948
    find_lex $P142, "$/"
    unless_null $P142, vivify_2350
    new $P142, "Undef"
  vivify_2350:
    $P143 = $P142."CURSOR"()
    new $P144, 'String'
    set $P144, "Attribute '"
    find_lex $P145, "$name"
    unless_null $P145, vivify_2351
    new $P145, "Undef"
  vivify_2351:
    concat $P146, $P144, $P145
    concat $P147, $P146, "' not declared"
    $P148 = $P143."panic"($P147)
.annotate 'line', 1947
    set $P139, $P148
.annotate 'line', 1942
    goto if_2999_end
  if_2999:
.annotate 'line', 1943
    set $P142, $P2993
    unless_null $P142, vivify_2352
    new $P142, "Undef"
  vivify_2352:
    can $I106, $P142, "type"
    if $I106, if_3000
    new $P141, 'Integer'
    set $P141, $I106
    goto if_3000_end
  if_3000:
.annotate 'line', 1944
    find_lex $P143, "$past"
    unless_null $P143, vivify_2353
    new $P143, "Undef"
  vivify_2353:
    set $P144, $P2993
    unless_null $P144, vivify_2354
    new $P144, "Undef"
  vivify_2354:
    $P145 = $P144."type"()
    $P146 = $P143."type"($P145)
.annotate 'line', 1943
    set $P141, $P146
  if_3000_end:
.annotate 'line', 1942
    set $P139, $P141
  if_2999_end:
.annotate 'line', 1934
    .return ($P139)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2994"  :anon :subid("539_1329260321.776") :outer("538_1329260321.776")
    .param pmc param_2996
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1936
    .lex "$_", param_2996
.annotate 'line', 1937
    find_lex $P151, "$_"
    unless_null $P151, vivify_2346
    new $P151, "Undef"
  vivify_2346:
    $S102 = $P151."name"()
    find_lex $P152, "$name"
    unless_null $P152, vivify_2347
    new $P152, "Undef"
  vivify_2347:
    set $S103, $P152
    iseq $I106, $S102, $S103
    if $I106, if_2997
    new $P150, 'Integer'
    set $P150, $I106
    goto if_2997_end
  if_2997:
.annotate 'line', 1938
    find_lex $P153, "$_"
    unless_null $P153, vivify_2348
    new $P153, "Undef"
  vivify_2348:
    store_lex "$attr", $P153
.annotate 'line', 1939
    die 0, .CONTROL_LOOP_LAST
  if_2997_end:
.annotate 'line', 1936
    .return ($P150)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2973"  :anon :subid("536_1329260321.776") :outer("535_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1910
    new $P125, "Undef"
    set $P2975, $P125
    .lex "$global_fallback", $P2975
    find_lex $P2976, "$/"
    unless_null $P2976, vivify_2355
    $P2976 = root_new ['parrot';'Hash']
  vivify_2355:
    set $P126, $P2976["sigil"]
    unless_null $P126, vivify_2356
    new $P126, "Undef"
  vivify_2356:
    set $S101, $P126
    new $P127, 'String'
    set $P127, $S101
    find_lex $P2977, "$/"
    unless_null $P2977, vivify_2357
    $P2977 = root_new ['parrot';'Hash']
  vivify_2357:
    set $P129, $P2977["desigilname"]
    unless_null $P129, vivify_2358
    new $P129, "Undef"
  vivify_2358:
    concat $P130, $P127, $P129
    new $P131, "ResizablePMCArray"
    push $P131, "GLOBAL"
    push $P131, $P130
    find_lex $P132, "$/"
    unless_null $P132, vivify_2359
    new $P132, "Undef"
  vivify_2359:
    $P133 = "lexical_package_lookup"($P131, $P132)
    set $P2975, $P133
.annotate 'line', 1911
    set $P126, $P2975
    unless_null $P126, vivify_2360
    new $P126, "Undef"
  vivify_2360:
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P129, $P127, "PAST"
    get_who $P130, $P129
    set $P131, $P130["Op"]
.annotate 'line', 1912
    new $P132, "String"
    assign $P132, "Contextual "
    find_lex $P133, "$/"
    unless_null $P133, vivify_2361
    new $P133, "Undef"
  vivify_2361:
    set $S101, $P133
    concat $P134, $P132, $S101
    concat $P135, $P134, " not found"
    $P136 = $P131."new"($P135, "die" :named("pirop"))
.annotate 'line', 1911
    $P126."viviself"($P136)
.annotate 'line', 1915
    get_hll_global $P126, "GLOBAL"
    nqp_get_package_through_who $P127, $P126, "PAST"
    get_who $P129, $P127
    set $P130, $P129["Var"]
.annotate 'line', 1916
    find_lex $P2978, "@name"
    unless_null $P2978, vivify_2362
    $P2978 = root_new ['parrot';'ResizablePMCArray']
  vivify_2362:
    $P131 = $P2978."pop"()
    set $S101, $P131
.annotate 'line', 1915
    set $P132, $P2975
    unless_null $P132, vivify_2363
    new $P132, "Undef"
  vivify_2363:
    $P133 = $P130."new"($S101 :named("name"), "contextual" :named("scope"), $P132 :named("viviself"))
    store_lex "$past", $P133
.annotate 'line', 1909
    .return ($P133)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<module>" :anon :subid("540_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3008
    .param pmc param_3009
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1965
    .lex "self", param_3008
    .lex "$/", param_3009
    set $P117, param_3009
    set $P3010, param_3009
    unless_null $P3010, vivify_2376
    $P3010 = root_new ['parrot';'Hash']
  vivify_2376:
    set $P118, $P3010["package_def"]
    unless_null $P118, vivify_2377
    new $P118, "Undef"
  vivify_2377:
    $P119 = $P118."ast"()
    $P121 = $P117."!make"($P119)
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<knowhow>" :anon :subid("541_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3012
    .param pmc param_3013
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1966
    .lex "self", param_3012
    .lex "$/", param_3013
    set $P117, param_3013
    set $P3014, param_3013
    unless_null $P3014, vivify_2378
    $P3014 = root_new ['parrot';'Hash']
  vivify_2378:
    set $P118, $P3014["package_def"]
    unless_null $P118, vivify_2379
    new $P118, "Undef"
  vivify_2379:
    $P119 = $P118."ast"()
    $P121 = $P117."!make"($P119)
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<class>" :anon :subid("542_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3016
    .param pmc param_3017
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1967
    .lex "self", param_3016
    .lex "$/", param_3017
    set $P117, param_3017
    set $P3018, param_3017
    unless_null $P3018, vivify_2380
    $P3018 = root_new ['parrot';'Hash']
  vivify_2380:
    set $P118, $P3018["package_def"]
    unless_null $P118, vivify_2381
    new $P118, "Undef"
  vivify_2381:
    $P119 = $P118."ast"()
    $P121 = $P117."!make"($P119)
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<grammar>" :anon :subid("543_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3020
    .param pmc param_3021
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1968
    .lex "self", param_3020
    .lex "$/", param_3021
    set $P117, param_3021
    set $P3022, param_3021
    unless_null $P3022, vivify_2382
    $P3022 = root_new ['parrot';'Hash']
  vivify_2382:
    set $P118, $P3022["package_def"]
    unless_null $P118, vivify_2383
    new $P118, "Undef"
  vivify_2383:
    $P119 = $P118."ast"()
    $P121 = $P117."!make"($P119)
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<role>" :anon :subid("544_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3024
    .param pmc param_3025
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1969
    .lex "self", param_3024
    .lex "$/", param_3025
    set $P117, param_3025
    set $P3026, param_3025
    unless_null $P3026, vivify_2384
    $P3026 = root_new ['parrot';'Hash']
  vivify_2384:
    set $P118, $P3026["package_def"]
    unless_null $P118, vivify_2385
    new $P118, "Undef"
  vivify_2385:
    $P119 = $P118."ast"()
    $P121 = $P117."!make"($P119)
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<native>" :anon :subid("545_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3028
    .param pmc param_3029
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1970
    .lex "self", param_3028
    .lex "$/", param_3029
    set $P117, param_3029
    set $P3030, param_3029
    unless_null $P3030, vivify_2386
    $P3030 = root_new ['parrot';'Hash']
  vivify_2386:
    set $P118, $P3030["package_def"]
    unless_null $P118, vivify_2387
    new $P118, "Undef"
  vivify_2387:
    $P119 = $P118."ast"()
    $P121 = $P117."!make"($P119)
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<stub>" :anon :subid("546_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3032
    .param pmc param_3033
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1972
    .lex "self", param_3032
    .lex "$/", param_3033
.annotate 'line', 1975
    new $P117, "Undef"
    set $P3034, $P117
    .lex "$HOW", $P3034
.annotate 'line', 1976
    new $P118, "Undef"
    set $P3035, $P118
    .lex "$PACKAGE", $P3035
.annotate 'line', 1975
    find_dynamic_lex $P122, "$*W"
    unless_null $P122, vivify_2388
    get_hll_global $P119, "GLOBAL"
    get_who $P121, $P119
    set $P122, $P121["$W"]
    unless_null $P122, vivify_2389
    die "Contextual $*W not found"
  vivify_2389:
  vivify_2388:
    set $P3036, param_3033
    unless_null $P3036, vivify_2390
    $P3036 = root_new ['parrot';'Hash']
  vivify_2390:
    set $P3037, $P3036["metaclass"]
    unless_null $P3037, vivify_2391
    $P3037 = root_new ['parrot';'Hash']
  vivify_2391:
    set $P123, $P3037["identifier"]
    unless_null $P123, vivify_2392
    new $P123, "Undef"
  vivify_2392:
    $P124 = $P122."find_sym"($P123)
    set $P3034, $P124
.annotate 'line', 1976
    find_dynamic_lex $P122, "$*W"
    unless_null $P122, vivify_2393
    get_hll_global $P119, "GLOBAL"
    get_who $P121, $P119
    set $P122, $P121["$W"]
    unless_null $P122, vivify_2394
    die "Contextual $*W not found"
  vivify_2394:
  vivify_2393:
    set $P123, $P3034
    unless_null $P123, vivify_2395
    new $P123, "Undef"
  vivify_2395:
    set $P3038, param_3033
    unless_null $P3038, vivify_2396
    $P3038 = root_new ['parrot';'Hash']
  vivify_2396:
    set $P124, $P3038["name"]
    unless_null $P124, vivify_2397
    new $P124, "Undef"
  vivify_2397:
    set $S100, $P124
    $P125 = $P122."pkg_create_mo"($P123, $S100 :named("name"))
    set $P3035, $P125
.annotate 'line', 1979
    find_dynamic_lex $P123, "$*SCOPE"
    unless_null $P123, vivify_2398
    get_hll_global $P121, "GLOBAL"
    get_who $P122, $P121
    set $P123, $P122["$SCOPE"]
    unless_null $P123, vivify_2399
    die "Contextual $*SCOPE not found"
  vivify_2399:
  vivify_2398:
    set $S100, $P123
    iseq $I100, $S100, "our"
    unless $I100, unless_3040
    new $P119, 'Integer'
    set $P119, $I100
    goto unless_3040_end
  unless_3040:
    find_dynamic_lex $P126, "$*SCOPE"
    unless_null $P126, vivify_2400
    get_hll_global $P124, "GLOBAL"
    get_who $P125, $P124
    set $P126, $P125["$SCOPE"]
    unless_null $P126, vivify_2401
    die "Contextual $*SCOPE not found"
  vivify_2401:
  vivify_2400:
    set $S101, $P126
    iseq $I101, $S101, ""
    new $P119, 'Integer'
    set $P119, $I101
  unless_3040_end:
    if $P119, if_3039
.annotate 'line', 1985
    find_dynamic_lex $P130, "$*SCOPE"
    unless_null $P130, vivify_2402
    get_hll_global $P127, "GLOBAL"
    get_who $P129, $P127
    set $P130, $P129["$SCOPE"]
    unless_null $P130, vivify_2403
    die "Contextual $*SCOPE not found"
  vivify_2403:
  vivify_2402:
    set $S102, $P130
    iseq $I102, $S102, "my"
    if $I102, if_3049
.annotate 'line', 1992
    set $P131, param_3033
    unless_null $P131, vivify_2404
    new $P131, "Undef"
  vivify_2404:
    $P132 = $P131."CURSOR"()
    find_dynamic_lex $P135, "$*SCOPE"
    unless_null $P135, vivify_2405
    get_hll_global $P133, "GLOBAL"
    get_who $P134, $P133
    set $P135, $P134["$SCOPE"]
    unless_null $P135, vivify_2406
    die "Contextual $*SCOPE not found"
  vivify_2406:
  vivify_2405:
    concat $P136, $P135, " scoped packages are not supported"
    $P132."panic"($P136)
.annotate 'line', 1991
    goto if_3049_end
  if_3049:
.annotate 'line', 1986
    set $P3051, param_3033
    unless_null $P3051, vivify_2407
    $P3051 = root_new ['parrot';'Hash']
  vivify_2407:
    set $P3052, $P3051["name"]
    unless_null $P3052, vivify_2408
    $P3052 = root_new ['parrot';'Hash']
  vivify_2408:
    set $P131, $P3052["identifier"]
    unless_null $P131, vivify_2409
    new $P131, "Undef"
  vivify_2409:
    set $N100, $P131
    set $N101, 1
    isne $I103, $N100, $N101
    unless $I103, if_3050_end
.annotate 'line', 1987
    set $P3053, param_3033
    unless_null $P3053, vivify_2410
    $P3053 = root_new ['parrot';'Hash']
  vivify_2410:
    set $P132, $P3053["name"]
    unless_null $P132, vivify_2411
    new $P132, "Undef"
  vivify_2411:
    $P133 = $P132."CURSOR"()
    $P133."panic"("A my scoped package cannot have a multi-part name yet")
  if_3050_end:
.annotate 'line', 1989
    find_dynamic_lex $P133, "$*W"
    unless_null $P133, vivify_2412
    get_hll_global $P131, "GLOBAL"
    get_who $P132, $P131
    set $P133, $P132["$W"]
    unless_null $P133, vivify_2413
    die "Contextual $*W not found"
  vivify_2413:
  vivify_2412:
    find_dynamic_lex $P136, "$*W"
    unless_null $P136, vivify_2414
    get_hll_global $P134, "GLOBAL"
    get_who $P135, $P134
    set $P136, $P135["$W"]
    unless_null $P136, vivify_2415
    die "Contextual $*W not found"
  vivify_2415:
  vivify_2414:
    $P137 = $P136."cur_lexpad"()
    new $P138, "Float"
    assign $P138, 0
    set $I103, $P138
    set $P3054, param_3033
    unless_null $P3054, vivify_2416
    $P3054 = root_new ['parrot';'Hash']
  vivify_2416:
    set $P3055, $P3054["name"]
    unless_null $P3055, vivify_2417
    $P3055 = root_new ['parrot';'Hash']
  vivify_2417:
    set $P3056, $P3055["identifier"]
    unless_null $P3056, vivify_2418
    $P3056 = root_new ['parrot';'ResizablePMCArray']
  vivify_2418:
    set $P139, $P3056[$I103]
    unless_null $P139, vivify_2419
    new $P139, "Undef"
  vivify_2419:
    set $P140, $P3035
    unless_null $P140, vivify_2420
    new $P140, "Undef"
  vivify_2420:
    $P133."install_lexical_symbol"($P137, $P139, $P140)
  if_3049_end:
.annotate 'line', 1985
    goto if_3039_end
  if_3039:
.annotate 'line', 1980
    find_dynamic_lex $P130, "$*W"
    unless_null $P130, vivify_2421
    get_hll_global $P127, "GLOBAL"
    get_who $P129, $P127
    set $P130, $P129["$W"]
    unless_null $P130, vivify_2422
    die "Contextual $*W not found"
  vivify_2422:
  vivify_2421:
    find_dynamic_lex $P133, "$*OUTERPACKAGE"
    unless_null $P133, vivify_2423
    get_hll_global $P131, "GLOBAL"
    get_who $P132, $P131
    set $P133, $P132["$OUTERPACKAGE"]
    unless_null $P133, vivify_2424
    die "Contextual $*OUTERPACKAGE not found"
  vivify_2424:
  vivify_2423:
    set $P3041, param_3033
    unless_null $P3041, vivify_2425
    $P3041 = root_new ['parrot';'Hash']
  vivify_2425:
    set $P3042, $P3041["name"]
    unless_null $P3042, vivify_2426
    $P3042 = root_new ['parrot';'Hash']
  vivify_2426:
    set $P134, $P3042["identifier"]
    unless_null $P134, vivify_2427
    new $P134, "Undef"
  vivify_2427:
    set $P135, $P3035
    unless_null $P135, vivify_2428
    new $P135, "Undef"
  vivify_2428:
    $P130."install_package_symbol"($P133, $P134, $P135)
.annotate 'line', 1981
    set $P3044, param_3033
    unless_null $P3044, vivify_2429
    $P3044 = root_new ['parrot';'Hash']
  vivify_2429:
    set $P3045, $P3044["name"]
    unless_null $P3045, vivify_2430
    $P3045 = root_new ['parrot';'Hash']
  vivify_2430:
    set $P127, $P3045["identifier"]
    unless_null $P127, vivify_2431
    new $P127, "Undef"
  vivify_2431:
    set $N100, $P127
    set $N101, 1
    iseq $I102, $N100, $N101
    unless $I102, if_3043_end
.annotate 'line', 1982
    find_dynamic_lex $P131, "$*W"
    unless_null $P131, vivify_2432
    get_hll_global $P129, "GLOBAL"
    get_who $P130, $P129
    set $P131, $P130["$W"]
    unless_null $P131, vivify_2433
    die "Contextual $*W not found"
  vivify_2433:
  vivify_2432:
    find_dynamic_lex $P134, "$*W"
    unless_null $P134, vivify_2434
    get_hll_global $P132, "GLOBAL"
    get_who $P133, $P132
    set $P134, $P133["$W"]
    unless_null $P134, vivify_2435
    die "Contextual $*W not found"
  vivify_2435:
  vivify_2434:
    $P135 = $P134."cur_lexpad"()
    new $P136, "Float"
    assign $P136, 0
    set $I103, $P136
    set $P3046, param_3033
    unless_null $P3046, vivify_2436
    $P3046 = root_new ['parrot';'Hash']
  vivify_2436:
    set $P3047, $P3046["name"]
    unless_null $P3047, vivify_2437
    $P3047 = root_new ['parrot';'Hash']
  vivify_2437:
    set $P3048, $P3047["identifier"]
    unless_null $P3048, vivify_2438
    $P3048 = root_new ['parrot';'ResizablePMCArray']
  vivify_2438:
    set $P137, $P3048[$I103]
    unless_null $P137, vivify_2439
    new $P137, "Undef"
  vivify_2439:
    set $P138, $P3035
    unless_null $P138, vivify_2440
    new $P138, "Undef"
  vivify_2440:
    $P131."install_lexical_symbol"($P135, $P137, $P138)
  if_3043_end:
  if_3039_end:
.annotate 'line', 1995
    set $P119, param_3033
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "PAST"
    get_who $P123, $P122
    set $P124, $P123["Stmts"]
    $P125 = $P124."new"()
    $P126 = $P119."!make"($P125)
.annotate 'line', 1972
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "package_def" :anon :subid("547_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3058
    .param pmc param_3059
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1998
    .const 'Sub' $P3108 = "551_1329260321.776" 
    capture_lex $P3108
    .const 'Sub' $P3101 = "550_1329260321.776" 
    capture_lex $P3101
    .const 'Sub' $P3081 = "548_1329260321.776" 
    capture_lex $P3081
    .lex "self", param_3058
    .lex "$/", param_3059
.annotate 'line', 2000
    $P3061 = root_new ['parrot';'ResizablePMCArray']
    set $P3060, $P3061
    .lex "@ns", $P3060
.annotate 'line', 2001
    new $P117, "Undef"
    set $P3062, $P117
    .lex "$name", $P3062
.annotate 'line', 2002
    new $P118, "Undef"
    set $P3063, $P118
    .lex "$how", $P3063
.annotate 'line', 2005
    new $P119, "Undef"
    set $P3064, $P119
    .lex "$past", $P3064
.annotate 'line', 2000
    set $P3065, param_3059
    unless_null $P3065, vivify_2441
    $P3065 = root_new ['parrot';'Hash']
  vivify_2441:
    set $P3066, $P3065["name"]
    unless_null $P3066, vivify_2442
    $P3066 = root_new ['parrot';'Hash']
  vivify_2442:
    set $P121, $P3066["identifier"]
    unless_null $P121, vivify_2443
    new $P121, "Undef"
  vivify_2443:
    clone $P122, $P121
    set $P3060, $P122
.annotate 'line', 2001
    set $P3067, $P3060
    unless_null $P3067, vivify_2444
    $P3067 = root_new ['parrot';'ResizablePMCArray']
  vivify_2444:
    $P121 = $P3067."pop"()
    set $S100, $P121
    new $P122, 'String'
    set $P122, $S100
    set $P3062, $P122
.annotate 'line', 2002
    find_dynamic_lex $P123, "$*PKGDECL"
    unless_null $P123, vivify_2445
    get_hll_global $P121, "GLOBAL"
    get_who $P122, $P121
    set $P123, $P122["$PKGDECL"]
    unless_null $P123, vivify_2446
    die "Contextual $*PKGDECL not found"
  vivify_2446:
  vivify_2445:
    find_dynamic_lex $P126, "%*HOW"
    unless_null $P126, vivify_2447
    get_hll_global $P124, "GLOBAL"
    get_who $P125, $P124
    set $P126, $P125["%HOW"]
    unless_null $P126, vivify_2448
    die "Contextual %*HOW not found"
  vivify_2448:
  vivify_2447:
    set $P127, $P126[$P123]
    unless_null $P127, vivify_2449
    new $P127, "Undef"
  vivify_2449:
    set $P3063, $P127
.annotate 'line', 2005
    set $P3069, param_3059
    unless_null $P3069, vivify_2450
    $P3069 = root_new ['parrot';'Hash']
  vivify_2450:
    set $P122, $P3069["block"]
    unless_null $P122, vivify_2451
    new $P122, "Undef"
  vivify_2451:
    if $P122, if_3068
    set $P3071, param_3059
    unless_null $P3071, vivify_2452
    $P3071 = root_new ['parrot';'Hash']
  vivify_2452:
    set $P125, $P3071["comp_unit"]
    unless_null $P125, vivify_2453
    new $P125, "Undef"
  vivify_2453:
    $P126 = $P125."ast"()
    set $P121, $P126
    goto if_3068_end
  if_3068:
    set $P3070, param_3059
    unless_null $P3070, vivify_2454
    $P3070 = root_new ['parrot';'Hash']
  vivify_2454:
    set $P123, $P3070["block"]
    unless_null $P123, vivify_2455
    new $P123, "Undef"
  vivify_2455:
    $P124 = $P123."ast"()
    set $P121, $P124
  if_3068_end:
    set $P3064, $P121
.annotate 'line', 2006
    find_dynamic_lex $P124, "$*SCOPE"
    unless_null $P124, vivify_2456
    get_hll_global $P122, "GLOBAL"
    get_who $P123, $P122
    set $P124, $P123["$SCOPE"]
    unless_null $P124, vivify_2457
    die "Contextual $*SCOPE not found"
  vivify_2457:
  vivify_2456:
    set $S100, $P124
    iseq $I100, $S100, "our"
    unless $I100, unless_3073
    new $P121, 'Integer'
    set $P121, $I100
    goto unless_3073_end
  unless_3073:
    find_dynamic_lex $P127, "$*SCOPE"
    unless_null $P127, vivify_2458
    get_hll_global $P125, "GLOBAL"
    get_who $P126, $P125
    set $P127, $P126["$SCOPE"]
    unless_null $P127, vivify_2459
    die "Contextual $*SCOPE not found"
  vivify_2459:
  vivify_2458:
    set $S101, $P127
    iseq $I101, $S101, ""
    new $P121, 'Integer'
    set $P121, $I101
  unless_3073_end:
    unless $P121, if_3072_end
.annotate 'line', 2007
    set $P129, $P3064
    unless_null $P129, vivify_2460
    new $P129, "Undef"
  vivify_2460:
    set $P3074, param_3059
    unless_null $P3074, vivify_2461
    $P3074 = root_new ['parrot';'Hash']
  vivify_2461:
    set $P3075, $P3074["name"]
    unless_null $P3075, vivify_2462
    $P3075 = root_new ['parrot';'Hash']
  vivify_2462:
    set $P130, $P3075["identifier"]
    unless_null $P130, vivify_2463
    new $P130, "Undef"
  vivify_2463:
    $P129."namespace"($P130)
  if_3072_end:
.annotate 'line', 2014
    set $P122, $P3063
    unless_null $P122, vivify_2464
    new $P122, "Undef"
  vivify_2464:
    can $I100, $P122, "parametric"
    if $I100, if_3077
    new $P121, 'Integer'
    set $P121, $I100
    goto if_3077_end
  if_3077:
    set $P123, $P3063
    unless_null $P123, vivify_2465
    new $P123, "Undef"
  vivify_2465:
    set $P124, $P3063
    unless_null $P124, vivify_2466
    new $P124, "Undef"
  vivify_2466:
    $P125 = $P123."parametric"($P124)
    set $P121, $P125
  if_3077_end:
    if $P121, if_3076
.annotate 'line', 2024
    set $P126, $P3064
    unless_null $P126, vivify_2467
    new $P126, "Undef"
  vivify_2467:
    $P126."blocktype"("immediate")
.annotate 'line', 2025
    find_dynamic_lex $P129, "$*W"
    unless_null $P129, vivify_2468
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P129, $P127["$W"]
    unless_null $P129, vivify_2469
    die "Contextual $*W not found"
  vivify_2469:
  vivify_2468:
    set $P130, $P3064
    unless_null $P130, vivify_2470
    new $P130, "Undef"
  vivify_2470:
    find_dynamic_lex $P133, "$*PACKAGE"
    unless_null $P133, vivify_2471
    get_hll_global $P131, "GLOBAL"
    get_who $P132, $P131
    set $P133, $P132["$PACKAGE"]
    unless_null $P133, vivify_2472
    die "Contextual $*PACKAGE not found"
  vivify_2472:
  vivify_2471:
    $P129."install_lexical_symbol"($P130, "$?PACKAGE", $P133)
.annotate 'line', 2026
    find_dynamic_lex $P129, "$*W"
    unless_null $P129, vivify_2473
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P129, $P127["$W"]
    unless_null $P129, vivify_2474
    die "Contextual $*W not found"
  vivify_2474:
  vivify_2473:
    set $P130, $P3064
    unless_null $P130, vivify_2475
    new $P130, "Undef"
  vivify_2475:
    find_dynamic_lex $P133, "$*PACKAGE"
    unless_null $P133, vivify_2476
    get_hll_global $P131, "GLOBAL"
    get_who $P132, $P131
    set $P133, $P132["$PACKAGE"]
    unless_null $P133, vivify_2477
    die "Contextual $*PACKAGE not found"
  vivify_2477:
  vivify_2476:
    $P129."install_lexical_symbol"($P130, "$?CLASS", $P133)
.annotate 'line', 2023
    goto if_3076_end
  if_3076:
.annotate 'line', 2015
    set $P126, $P3064
    unless_null $P126, vivify_2478
    new $P126, "Undef"
  vivify_2478:
    $P126."blocktype"("declaration")
.annotate 'line', 2016
    set $P126, $P3064
    unless_null $P126, vivify_2479
    new $P126, "Undef"
  vivify_2479:
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P129, $P127, "PAST"
    get_who $P130, $P129
    set $P131, $P130["Var"]
    $P132 = $P131."new"("$?CLASS" :named("name"), "parameter" :named("scope"), 1 :named("directaccess"))
    $P126."unshift"($P132)
.annotate 'line', 2018
    set $P126, $P3064
    unless_null $P126, vivify_2480
    new $P126, "Undef"
  vivify_2480:
    $P126."symbol"("$?CLASS", "lexical" :named("scope"))
.annotate 'line', 2019
    find_dynamic_lex $P129, "$*W"
    unless_null $P129, vivify_2481
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P129, $P127["$W"]
    unless_null $P129, vivify_2482
    die "Contextual $*W not found"
  vivify_2482:
  vivify_2481:
    find_dynamic_lex $P132, "$*PACKAGE"
    unless_null $P132, vivify_2483
    get_hll_global $P130, "GLOBAL"
    get_who $P131, $P130
    set $P132, $P131["$PACKAGE"]
    unless_null $P132, vivify_2484
    die "Contextual $*PACKAGE not found"
  vivify_2484:
  vivify_2483:
    set $P133, $P3064
    unless_null $P133, vivify_2485
    new $P133, "Undef"
  vivify_2485:
    $P129."pkg_set_body_block"($P132, $P133)
.annotate 'line', 2020
    find_dynamic_lex $P129, "$*W"
    unless_null $P129, vivify_2486
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P129, $P127["$W"]
    unless_null $P129, vivify_2487
    die "Contextual $*W not found"
  vivify_2487:
  vivify_2486:
    set $P130, $P3064
    unless_null $P130, vivify_2488
    new $P130, "Undef"
  vivify_2488:
    find_dynamic_lex $P133, "$*PACKAGE"
    unless_null $P133, vivify_2489
    get_hll_global $P131, "GLOBAL"
    get_who $P132, $P131
    set $P133, $P132["$PACKAGE"]
    unless_null $P133, vivify_2490
    die "Contextual $*PACKAGE not found"
  vivify_2490:
  vivify_2489:
    $P129."install_lexical_symbol"($P130, "$?PACKAGE", $P133)
.annotate 'line', 2021
    find_dynamic_lex $P129, "$*W"
    unless_null $P129, vivify_2491
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P129, $P127["$W"]
    unless_null $P129, vivify_2492
    die "Contextual $*W not found"
  vivify_2492:
  vivify_2491:
    set $P130, $P3064
    unless_null $P130, vivify_2493
    new $P130, "Undef"
  vivify_2493:
    find_dynamic_lex $P133, "$*PACKAGE"
    unless_null $P133, vivify_2494
    get_hll_global $P131, "GLOBAL"
    get_who $P132, $P131
    set $P133, $P132["$PACKAGE"]
    unless_null $P133, vivify_2495
    die "Contextual $*PACKAGE not found"
  vivify_2495:
  vivify_2494:
    $P129."install_lexical_symbol"($P130, "$?ROLE", $P133)
  if_3076_end:
.annotate 'line', 2030
    set $P3079, param_3059
    unless_null $P3079, vivify_2496
    $P3079 = root_new ['parrot';'Hash']
  vivify_2496:
    set $P121, $P3079["parent"]
    unless_null $P121, vivify_2497
    new $P121, "Undef"
  vivify_2497:
    if $P121, if_3078
.annotate 'line', 2044
    set $P125, $P3063
    unless_null $P125, vivify_2498
    new $P125, "Undef"
  vivify_2498:
    can $I100, $P125, "set_default_parent"
    unless $I100, if_3099_end
    .const 'Sub' $P3101 = "550_1329260321.776" 
    capture_lex $P3101
    $P3101()
  if_3099_end:
    goto if_3078_end
  if_3078:
.annotate 'line', 2030
    .const 'Sub' $P3081 = "548_1329260321.776" 
    capture_lex $P3081
    $P3081()
  if_3078_end:
.annotate 'line', 2051
    set $P3105, param_3059
    unless_null $P3105, vivify_2526
    $P3105 = root_new ['parrot';'Hash']
  vivify_2526:
    set $P121, $P3105["role"]
    unless_null $P121, vivify_2527
    new $P121, "Undef"
  vivify_2527:
    unless $P121, if_3104_end
.annotate 'line', 2052
    set $P3106, param_3059
    unless_null $P3106, vivify_2528
    $P3106 = root_new ['parrot';'Hash']
  vivify_2528:
    set $P123, $P3106["role"]
    unless_null $P123, vivify_2529
    new $P123, "Undef"
  vivify_2529:
    defined $I100, $P123
    unless $I100, for_undef_2530
    iter $P122, $P123
    new $P129, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P129, loop3123_handler
    push_eh $P129
  loop3123_test:
    unless $P122, loop3123_done
    shift $P124, $P122
  loop3123_redo:
    .const 'Sub' $P3108 = "551_1329260321.776" 
    capture_lex $P3108
    $P3108($P124)
  loop3123_next:
    goto loop3123_test
  loop3123_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P130, exception, 'type'
    eq $P130, .CONTROL_LOOP_NEXT, loop3123_next
    eq $P130, .CONTROL_LOOP_REDO, loop3123_redo
  loop3123_done:
    pop_eh 
  for_undef_2530:
  if_3104_end:
.annotate 'line', 2069
    find_dynamic_lex $P123, "$*W"
    unless_null $P123, vivify_2545
    get_hll_global $P121, "GLOBAL"
    get_who $P122, $P121
    set $P123, $P122["$W"]
    unless_null $P123, vivify_2546
    die "Contextual $*W not found"
  vivify_2546:
  vivify_2545:
    find_dynamic_lex $P126, "$*PACKAGE"
    unless_null $P126, vivify_2547
    get_hll_global $P124, "GLOBAL"
    get_who $P125, $P124
    set $P126, $P125["$PACKAGE"]
    unless_null $P126, vivify_2548
    die "Contextual $*PACKAGE not found"
  vivify_2548:
  vivify_2547:
    $P123."pkg_compose"($P126)
.annotate 'line', 2071
    set $P121, param_3059
    set $P122, $P3064
    unless_null $P122, vivify_2549
    new $P122, "Undef"
  vivify_2549:
    $P123 = $P121."!make"($P122)
.annotate 'line', 1998
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3100"  :anon :subid("550_1329260321.776") :outer("547_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2045
    new $P126, "Undef"
    set $P3102, $P126
    .lex "$default", $P3102
    find_dynamic_lex $P131, "$*PKGDECL"
    unless_null $P131, vivify_2499
    get_hll_global $P129, "GLOBAL"
    get_who $P130, $P129
    set $P131, $P130["$PKGDECL"]
    unless_null $P131, vivify_2500
    die "Contextual $*PKGDECL not found"
  vivify_2500:
  vivify_2499:
    set $S100, $P131
    iseq $I101, $S100, "grammar"
    if $I101, if_3103
    new $P133, "ResizablePMCArray"
    push $P133, "NQPMu"
    set $P127, $P133
    goto if_3103_end
  if_3103:
    new $P132, "ResizablePMCArray"
    push $P132, "Regex"
    push $P132, "Cursor"
    set $P127, $P132
  if_3103_end:
    set $P3102, $P127
.annotate 'line', 2046
    find_dynamic_lex $P130, "$*W"
    unless_null $P130, vivify_2501
    get_hll_global $P127, "GLOBAL"
    get_who $P129, $P127
    set $P130, $P129["$W"]
    unless_null $P130, vivify_2502
    die "Contextual $*W not found"
  vivify_2502:
  vivify_2501:
    find_dynamic_lex $P133, "$*PACKAGE"
    unless_null $P133, vivify_2503
    get_hll_global $P131, "GLOBAL"
    get_who $P132, $P131
    set $P133, $P132["$PACKAGE"]
    unless_null $P133, vivify_2504
    die "Contextual $*PACKAGE not found"
  vivify_2504:
  vivify_2503:
.annotate 'line', 2047
    find_dynamic_lex $P136, "$*W"
    unless_null $P136, vivify_2505
    get_hll_global $P134, "GLOBAL"
    get_who $P135, $P134
    set $P136, $P135["$W"]
    unless_null $P136, vivify_2506
    die "Contextual $*W not found"
  vivify_2506:
  vivify_2505:
    set $P137, $P3102
    unless_null $P137, vivify_2507
    new $P137, "Undef"
  vivify_2507:
    $P138 = $P136."find_sym"($P137)
    $P139 = $P130."pkg_add_parent_or_role"($P133, "set_default_parent", $P138)
.annotate 'line', 2044
    .return ($P139)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3080"  :anon :subid("548_1329260321.776") :outer("547_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2030
    .const 'Sub' $P3085 = "549_1329260321.776" 
    capture_lex $P3085
.annotate 'line', 2031
    new $P122, "Undef"
    set $P3082, $P122
    .lex "$parent", $P3082
.annotate 'line', 2032
    new $P123, "Undef"
    set $P3083, $P123
    .lex "$parent_found", $P3083
.annotate 'line', 2030
    set $P124, $P3082
    unless_null $P124, vivify_2508
    new $P124, "Undef"
  vivify_2508:
    set $P124, $P3083
    unless_null $P124, vivify_2509
    new $P124, "Undef"
  vivify_2509:
.annotate 'line', 2033
    .const 'Sub' $P3085 = "549_1329260321.776" 
    capture_lex $P3085
    $P3085()
.annotate 'line', 2037
    set $P125, $P3083
    unless_null $P125, vivify_2516
    new $P125, "Undef"
  vivify_2516:
    if $P125, if_3096
.annotate 'line', 2041
    find_lex $P126, "$/"
    unless_null $P126, vivify_2517
    new $P126, "Undef"
  vivify_2517:
    $P127 = $P126."CURSOR"()
    new $P129, "String"
    assign $P129, "Could not find parent class '"
    new $P130, "Float"
    assign $P130, 0
    set $I100, $P130
    find_lex $P3097, "$/"
    unless_null $P3097, vivify_2518
    $P3097 = root_new ['parrot';'Hash']
  vivify_2518:
    set $P3098, $P3097["parent"]
    unless_null $P3098, vivify_2519
    $P3098 = root_new ['parrot';'ResizablePMCArray']
  vivify_2519:
    set $P131, $P3098[$I100]
    unless_null $P131, vivify_2520
    new $P131, "Undef"
  vivify_2520:
    set $S100, $P131
    concat $P132, $P129, $S100
    concat $P133, $P132, "'"
    $P135 = $P127."panic"($P133)
.annotate 'line', 2040
    set $P124, $P135
.annotate 'line', 2037
    goto if_3096_end
  if_3096:
.annotate 'line', 2038
    find_dynamic_lex $P129, "$*W"
    unless_null $P129, vivify_2521
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P129, $P127["$W"]
    unless_null $P129, vivify_2522
    die "Contextual $*W not found"
  vivify_2522:
  vivify_2521:
    find_dynamic_lex $P132, "$*PACKAGE"
    unless_null $P132, vivify_2523
    get_hll_global $P130, "GLOBAL"
    get_who $P131, $P130
    set $P132, $P131["$PACKAGE"]
    unless_null $P132, vivify_2524
    die "Contextual $*PACKAGE not found"
  vivify_2524:
  vivify_2523:
    set $P133, $P3082
    unless_null $P133, vivify_2525
    new $P133, "Undef"
  vivify_2525:
    $P134 = $P129."pkg_add_parent_or_role"($P132, "add_parent", $P133)
.annotate 'line', 2037
    set $P124, $P134
  if_3096_end:
.annotate 'line', 2030
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block3084"  :anon :subid("549_1329260321.776") :outer("548_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2033
    new $P3091, 'ExceptionHandler'
    set_label $P3091, control_3090
    $P3091."handle_types_except"(.CONTROL_ALL)
    push_eh $P3091
.annotate 'line', 2034
    find_dynamic_lex $P126, "$*W"
    unless_null $P126, vivify_2510
    get_hll_global $P124, "GLOBAL"
    get_who $P125, $P124
    set $P126, $P125["$W"]
    unless_null $P126, vivify_2511
    die "Contextual $*W not found"
  vivify_2511:
  vivify_2510:
    new $P127, "Float"
    assign $P127, 0
    set $I100, $P127
    find_lex $P3086, "$/"
    unless_null $P3086, vivify_2512
    $P3086 = root_new ['parrot';'Hash']
  vivify_2512:
    set $P3087, $P3086["parent"]
    unless_null $P3087, vivify_2513
    $P3087 = root_new ['parrot';'ResizablePMCArray']
  vivify_2513:
    set $P3088, $P3087[$I100]
    unless_null $P3088, vivify_2514
    $P3088 = root_new ['parrot';'Hash']
  vivify_2514:
    set $P129, $P3088["identifier"]
    unless_null $P129, vivify_2515
    new $P129, "Undef"
  vivify_2515:
    clone $P130, $P129
    $P131 = $P126."find_sym"($P130)
    store_lex "$parent", $P131
.annotate 'line', 2035
    new $P124, "Float"
    assign $P124, 1
    store_lex "$parent_found", $P124
.annotate 'line', 2033
    pop_eh 
    goto skip_handler_3089
  control_3090:
    peek_exception $P3092
    .local pmc exception 
    .get_results (exception) 
    new $P3094, 'Integer'
    set $P3094, 1
    set exception["handled"], $P3094
    set $I3095, exception["handled"]
    eq $I3095, 1, handled_3093
    rethrow exception
  handled_3093:
    finalize $P3092
    .return (exception)
  skip_handler_3089:
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3107"  :anon :subid("551_1329260321.776") :outer("547_1329260321.776")
    .param pmc param_3111
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2052
    .const 'Sub' $P3113 = "552_1329260321.776" 
    capture_lex $P3113
.annotate 'line', 2053
    new $P125, "Undef"
    set $P3109, $P125
    .lex "$role", $P3109
.annotate 'line', 2054
    new $P126, "Undef"
    set $P3110, $P126
    .lex "$role_found", $P3110
    .lex "$_", param_3111
.annotate 'line', 2052
    set $P127, $P3109
    unless_null $P127, vivify_2531
    new $P127, "Undef"
  vivify_2531:
    set $P127, $P3110
    unless_null $P127, vivify_2532
    new $P127, "Undef"
  vivify_2532:
.annotate 'line', 2055
    .const 'Sub' $P3113 = "552_1329260321.776" 
    capture_lex $P3113
    $P3113()
.annotate 'line', 2059
    set $P129, $P3110
    unless_null $P129, vivify_2537
    new $P129, "Undef"
  vivify_2537:
    if $P129, if_3122
.annotate 'line', 2063
    find_lex $P130, "$/"
    unless_null $P130, vivify_2538
    new $P130, "Undef"
  vivify_2538:
    $P131 = $P130."CURSOR"()
    new $P132, "String"
    assign $P132, "Could not find role '"
    find_lex $P133, "$_"
    unless_null $P133, vivify_2539
    new $P133, "Undef"
  vivify_2539:
    set $S100, $P133
    concat $P134, $P132, $S100
    concat $P135, $P134, "'"
    $P136 = $P131."panic"($P135)
.annotate 'line', 2062
    set $P127, $P136
.annotate 'line', 2059
    goto if_3122_end
  if_3122:
.annotate 'line', 2060
    find_dynamic_lex $P132, "$*W"
    unless_null $P132, vivify_2540
    get_hll_global $P130, "GLOBAL"
    get_who $P131, $P130
    set $P132, $P131["$W"]
    unless_null $P132, vivify_2541
    die "Contextual $*W not found"
  vivify_2541:
  vivify_2540:
    find_dynamic_lex $P135, "$*PACKAGE"
    unless_null $P135, vivify_2542
    get_hll_global $P133, "GLOBAL"
    get_who $P134, $P133
    set $P135, $P134["$PACKAGE"]
    unless_null $P135, vivify_2543
    die "Contextual $*PACKAGE not found"
  vivify_2543:
  vivify_2542:
    set $P136, $P3109
    unless_null $P136, vivify_2544
    new $P136, "Undef"
  vivify_2544:
    $P137 = $P132."pkg_add_parent_or_role"($P135, "add_role", $P136)
.annotate 'line', 2059
    set $P127, $P137
  if_3122_end:
.annotate 'line', 2052
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block3112"  :anon :subid("552_1329260321.776") :outer("551_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2055
    new $P3117, 'ExceptionHandler'
    set_label $P3117, control_3116
    $P3117."handle_types_except"(.CONTROL_ALL)
    push_eh $P3117
.annotate 'line', 2056
    find_dynamic_lex $P130, "$*W"
    unless_null $P130, vivify_2533
    get_hll_global $P127, "GLOBAL"
    get_who $P129, $P127
    set $P130, $P129["$W"]
    unless_null $P130, vivify_2534
    die "Contextual $*W not found"
  vivify_2534:
  vivify_2533:
    find_lex $P3114, "$_"
    unless_null $P3114, vivify_2535
    $P3114 = root_new ['parrot';'Hash']
  vivify_2535:
    set $P131, $P3114["identifier"]
    unless_null $P131, vivify_2536
    new $P131, "Undef"
  vivify_2536:
    clone $P132, $P131
    $P133 = $P130."find_sym"($P132)
    store_lex "$role", $P133
.annotate 'line', 2057
    new $P127, "Float"
    assign $P127, 1
    store_lex "$role_found", $P127
.annotate 'line', 2055
    pop_eh 
    goto skip_handler_3115
  control_3116:
    peek_exception $P3118
    .local pmc exception 
    .get_results (exception) 
    new $P3120, 'Integer'
    set $P3120, 1
    set exception["handled"], $P3120
    set $I3121, exception["handled"]
    eq $I3121, 1, handled_3119
    rethrow exception
  handled_3119:
    finalize $P3118
    .return (exception)
  skip_handler_3115:
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "scope_declarator:sym<my>" :anon :subid("553_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3125
    .param pmc param_3126
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2074
    .lex "self", param_3125
    .lex "$/", param_3126
    set $P117, param_3126
    set $P3127, param_3126
    unless_null $P3127, vivify_2550
    $P3127 = root_new ['parrot';'Hash']
  vivify_2550:
    set $P118, $P3127["scoped"]
    unless_null $P118, vivify_2551
    new $P118, "Undef"
  vivify_2551:
    $P119 = $P118."ast"()
    $P121 = $P117."!make"($P119)
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "scope_declarator:sym<our>" :anon :subid("554_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3129
    .param pmc param_3130
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2075
    .lex "self", param_3129
    .lex "$/", param_3130
    set $P117, param_3130
    set $P3131, param_3130
    unless_null $P3131, vivify_2552
    $P3131 = root_new ['parrot';'Hash']
  vivify_2552:
    set $P118, $P3131["scoped"]
    unless_null $P118, vivify_2553
    new $P118, "Undef"
  vivify_2553:
    $P119 = $P118."ast"()
    $P121 = $P117."!make"($P119)
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "scope_declarator:sym<has>" :anon :subid("555_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3133
    .param pmc param_3134
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2076
    .lex "self", param_3133
    .lex "$/", param_3134
    set $P117, param_3134
    set $P3135, param_3134
    unless_null $P3135, vivify_2554
    $P3135 = root_new ['parrot';'Hash']
  vivify_2554:
    set $P118, $P3135["scoped"]
    unless_null $P118, vivify_2555
    new $P118, "Undef"
  vivify_2555:
    $P119 = $P118."ast"()
    $P121 = $P117."!make"($P119)
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "scoped" :anon :subid("556_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3137
    .param pmc param_3138
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2078
    .lex "self", param_3137
    .lex "$/", param_3138
.annotate 'line', 2079
    set $P117, param_3138
    set $P3140, param_3138
    unless_null $P3140, vivify_2556
    $P3140 = root_new ['parrot';'Hash']
  vivify_2556:
    set $P119, $P3140["declarator"]
    unless_null $P119, vivify_2557
    new $P119, "Undef"
  vivify_2557:
    if $P119, if_3139
.annotate 'line', 2080
    set $P3143, param_3138
    unless_null $P3143, vivify_2558
    $P3143 = root_new ['parrot';'Hash']
  vivify_2558:
    set $P124, $P3143["multi_declarator"]
    unless_null $P124, vivify_2559
    new $P124, "Undef"
  vivify_2559:
    if $P124, if_3142
.annotate 'line', 2081
    set $P3145, param_3138
    unless_null $P3145, vivify_2560
    $P3145 = root_new ['parrot';'Hash']
  vivify_2560:
    set $P127, $P3145["package_declarator"]
    unless_null $P127, vivify_2561
    new $P127, "Undef"
  vivify_2561:
    $P129 = $P127."ast"()
    set $P123, $P129
.annotate 'line', 2080
    goto if_3142_end
  if_3142:
    set $P3144, param_3138
    unless_null $P3144, vivify_2562
    $P3144 = root_new ['parrot';'Hash']
  vivify_2562:
    set $P125, $P3144["multi_declarator"]
    unless_null $P125, vivify_2563
    new $P125, "Undef"
  vivify_2563:
    $P126 = $P125."ast"()
    set $P123, $P126
  if_3142_end:
    set $P118, $P123
.annotate 'line', 2079
    goto if_3139_end
  if_3139:
    set $P3141, param_3138
    unless_null $P3141, vivify_2564
    $P3141 = root_new ['parrot';'Hash']
  vivify_2564:
    set $P121, $P3141["declarator"]
    unless_null $P121, vivify_2565
    new $P121, "Undef"
  vivify_2565:
    $P122 = $P121."ast"()
    set $P118, $P122
  if_3139_end:
    $P130 = $P117."!make"($P118)
.annotate 'line', 2078
    .return ($P130)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "declarator" :anon :subid("557_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3147
    .param pmc param_3148
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2084
    .lex "self", param_3147
    .lex "$/", param_3148
.annotate 'line', 2085
    set $P117, param_3148
.annotate 'line', 2086
    set $P3150, param_3148
    unless_null $P3150, vivify_2566
    $P3150 = root_new ['parrot';'Hash']
  vivify_2566:
    set $P119, $P3150["routine_declarator"]
    unless_null $P119, vivify_2567
    new $P119, "Undef"
  vivify_2567:
    if $P119, if_3149
.annotate 'line', 2087
    set $P3152, param_3148
    unless_null $P3152, vivify_2568
    $P3152 = root_new ['parrot';'Hash']
  vivify_2568:
    set $P123, $P3152["variable_declarator"]
    unless_null $P123, vivify_2569
    new $P123, "Undef"
  vivify_2569:
    $P124 = $P123."ast"()
    set $P118, $P124
.annotate 'line', 2086
    goto if_3149_end
  if_3149:
    set $P3151, param_3148
    unless_null $P3151, vivify_2570
    $P3151 = root_new ['parrot';'Hash']
  vivify_2570:
    set $P121, $P3151["routine_declarator"]
    unless_null $P121, vivify_2571
    new $P121, "Undef"
  vivify_2571:
    $P122 = $P121."ast"()
    set $P118, $P122
  if_3149_end:
    $P125 = $P117."!make"($P118)
.annotate 'line', 2084
    .return ($P125)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "multi_declarator:sym<multi>" :anon :subid("558_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3154
    .param pmc param_3155
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2090
    .lex "self", param_3154
    .lex "$/", param_3155
    set $P117, param_3155
    set $P3157, param_3155
    unless_null $P3157, vivify_2572
    $P3157 = root_new ['parrot';'Hash']
  vivify_2572:
    set $P119, $P3157["declarator"]
    unless_null $P119, vivify_2573
    new $P119, "Undef"
  vivify_2573:
    if $P119, if_3156
    set $P3159, param_3155
    unless_null $P3159, vivify_2574
    $P3159 = root_new ['parrot';'Hash']
  vivify_2574:
    set $P123, $P3159["routine_def"]
    unless_null $P123, vivify_2575
    new $P123, "Undef"
  vivify_2575:
    $P124 = $P123."ast"()
    set $P118, $P124
    goto if_3156_end
  if_3156:
    set $P3158, param_3155
    unless_null $P3158, vivify_2576
    $P3158 = root_new ['parrot';'Hash']
  vivify_2576:
    set $P121, $P3158["declarator"]
    unless_null $P121, vivify_2577
    new $P121, "Undef"
  vivify_2577:
    $P122 = $P121."ast"()
    set $P118, $P122
  if_3156_end:
    $P125 = $P117."!make"($P118)
    .return ($P125)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "multi_declarator:sym<proto>" :anon :subid("559_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3161
    .param pmc param_3162
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2091
    .lex "self", param_3161
    .lex "$/", param_3162
    set $P117, param_3162
    set $P3164, param_3162
    unless_null $P3164, vivify_2578
    $P3164 = root_new ['parrot';'Hash']
  vivify_2578:
    set $P119, $P3164["declarator"]
    unless_null $P119, vivify_2579
    new $P119, "Undef"
  vivify_2579:
    if $P119, if_3163
    set $P3166, param_3162
    unless_null $P3166, vivify_2580
    $P3166 = root_new ['parrot';'Hash']
  vivify_2580:
    set $P123, $P3166["routine_def"]
    unless_null $P123, vivify_2581
    new $P123, "Undef"
  vivify_2581:
    $P124 = $P123."ast"()
    set $P118, $P124
    goto if_3163_end
  if_3163:
    set $P3165, param_3162
    unless_null $P3165, vivify_2582
    $P3165 = root_new ['parrot';'Hash']
  vivify_2582:
    set $P121, $P3165["declarator"]
    unless_null $P121, vivify_2583
    new $P121, "Undef"
  vivify_2583:
    $P122 = $P121."ast"()
    set $P118, $P122
  if_3163_end:
    $P125 = $P117."!make"($P118)
    .return ($P125)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "multi_declarator:sym<null>" :anon :subid("560_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3168
    .param pmc param_3169
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2092
    .lex "self", param_3168
    .lex "$/", param_3169
    set $P117, param_3169
    set $P3170, param_3169
    unless_null $P3170, vivify_2584
    $P3170 = root_new ['parrot';'Hash']
  vivify_2584:
    set $P118, $P3170["declarator"]
    unless_null $P118, vivify_2585
    new $P118, "Undef"
  vivify_2585:
    $P119 = $P118."ast"()
    $P121 = $P117."!make"($P119)
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "variable_declarator" :anon :subid("561_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3172
    .param pmc param_3173
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2095
    .const 'Sub' $P3208 = "563_1329260321.776" 
    capture_lex $P3208
    .const 'Sub' $P3185 = "562_1329260321.776" 
    capture_lex $P3185
    .lex "self", param_3172
    .lex "$/", param_3173
.annotate 'line', 2096
    new $P117, "Undef"
    set $P3174, $P117
    .lex "$past", $P3174
.annotate 'line', 2097
    new $P118, "Undef"
    set $P3175, $P118
    .lex "$sigil", $P3175
.annotate 'line', 2098
    new $P119, "Undef"
    set $P3176, $P119
    .lex "$name", $P3176
.annotate 'line', 2099
    new $P121, "Undef"
    set $P3177, $P121
    .lex "$BLOCK", $P3177
.annotate 'line', 2096
    set $P3178, param_3173
    unless_null $P3178, vivify_2586
    $P3178 = root_new ['parrot';'Hash']
  vivify_2586:
    set $P122, $P3178["variable"]
    unless_null $P122, vivify_2587
    new $P122, "Undef"
  vivify_2587:
    $P123 = $P122."ast"()
    set $P3174, $P123
.annotate 'line', 2097
    set $P3179, param_3173
    unless_null $P3179, vivify_2588
    $P3179 = root_new ['parrot';'Hash']
  vivify_2588:
    set $P3180, $P3179["variable"]
    unless_null $P3180, vivify_2589
    $P3180 = root_new ['parrot';'Hash']
  vivify_2589:
    set $P122, $P3180["sigil"]
    unless_null $P122, vivify_2590
    new $P122, "Undef"
  vivify_2590:
    set $P3175, $P122
.annotate 'line', 2098
    set $P122, $P3174
    unless_null $P122, vivify_2591
    new $P122, "Undef"
  vivify_2591:
    $P123 = $P122."name"()
    set $P3176, $P123
.annotate 'line', 2099
    find_dynamic_lex $P124, "$*W"
    unless_null $P124, vivify_2592
    get_hll_global $P122, "GLOBAL"
    get_who $P123, $P122
    set $P124, $P123["$W"]
    unless_null $P124, vivify_2593
    die "Contextual $*W not found"
  vivify_2593:
  vivify_2592:
    $P125 = $P124."cur_lexpad"()
    set $P3177, $P125
.annotate 'line', 2100
    set $P123, $P3176
    unless_null $P123, vivify_2594
    new $P123, "Undef"
  vivify_2594:
    if $P123, if_3182
    set $P122, $P123
    goto if_3182_end
  if_3182:
    set $P124, $P3177
    unless_null $P124, vivify_2595
    new $P124, "Undef"
  vivify_2595:
    set $P125, $P3176
    unless_null $P125, vivify_2596
    new $P125, "Undef"
  vivify_2596:
    $P126 = $P124."symbol"($P125)
    set $P122, $P126
  if_3182_end:
    unless $P122, if_3181_end
.annotate 'line', 2101
    set $P127, param_3173
    unless_null $P127, vivify_2597
    new $P127, "Undef"
  vivify_2597:
    $P129 = $P127."CURSOR"()
    set $P130, $P3176
    unless_null $P130, vivify_2598
    new $P130, "Undef"
  vivify_2598:
    $P129."panic"("Redeclaration of symbol ", $P130)
  if_3181_end:
.annotate 'line', 2103
    find_dynamic_lex $P124, "$*SCOPE"
    unless_null $P124, vivify_2599
    get_hll_global $P122, "GLOBAL"
    get_who $P123, $P122
    set $P124, $P123["$SCOPE"]
    unless_null $P124, vivify_2600
    die "Contextual $*SCOPE not found"
  vivify_2600:
  vivify_2599:
    set $S100, $P124
    iseq $I100, $S100, "has"
    if $I100, if_3183
.annotate 'line', 2123
    find_dynamic_lex $P127, "$*SCOPE"
    unless_null $P127, vivify_2601
    get_hll_global $P125, "GLOBAL"
    get_who $P126, $P125
    set $P127, $P126["$SCOPE"]
    unless_null $P127, vivify_2602
    die "Contextual $*SCOPE not found"
  vivify_2602:
  vivify_2601:
    set $S101, $P127
    iseq $I101, $S101, "our"
    if $I101, if_3201
.annotate 'line', 2133
    new $P129, "Float"
    assign $P129, 0
    set $I102, $P129
    set $P3203, $P3177
    unless_null $P3203, vivify_2603
    $P3203 = root_new ['parrot';'ResizablePMCArray']
  vivify_2603:
    set $P131, $P3203[$I102]
    unless_null $P131, vivify_2604
    new $P131, "Undef"
  vivify_2604:
    get_hll_global $P132, "GLOBAL"
    nqp_get_package_through_who $P133, $P132, "PAST"
    get_who $P134, $P133
    set $P135, $P134["Var"]
    set $P136, $P3176
    unless_null $P136, vivify_2605
    new $P136, "Undef"
  vivify_2605:
.annotate 'line', 2135
    set $P137, $P3175
    unless_null $P137, vivify_2606
    new $P137, "Undef"
  vivify_2606:
    $P138 = "vivitype"($P137)
.annotate 'line', 2133
    set $P139, param_3173
    unless_null $P139, vivify_2607
    new $P139, "Undef"
  vivify_2607:
    $P140 = $P135."new"($P136 :named("name"), "lexical" :named("scope"), 1 :named("isdecl"), 1 :named("directaccess"), 1 :named("lvalue"), $P138 :named("viviself"), $P139 :named("node"))
    $P131."push"($P140)
.annotate 'line', 2138
    set $P129, $P3177
    unless_null $P129, vivify_2608
    new $P129, "Undef"
  vivify_2608:
    set $P131, $P3176
    unless_null $P131, vivify_2609
    new $P131, "Undef"
  vivify_2609:
    $P129."symbol"($P131, "lexical" :named("scope"))
.annotate 'line', 2132
    goto if_3201_end
  if_3201:
.annotate 'line', 2127
    set $P3202, param_3173
    unless_null $P3202, vivify_2610
    $P3202 = root_new ['parrot';'Hash']
  vivify_2610:
    set $P129, $P3202["variable"]
    unless_null $P129, vivify_2611
    new $P129, "Undef"
  vivify_2611:
    set $S102, $P129
    new $P131, 'String'
    set $P131, $S102
    set $P3176, $P131
.annotate 'line', 2128
    set $P129, $P3176
    unless_null $P129, vivify_2612
    new $P129, "Undef"
  vivify_2612:
    new $P131, "ResizablePMCArray"
    push $P131, $P129
    set $P132, param_3173
    unless_null $P132, vivify_2613
    new $P132, "Undef"
  vivify_2613:
    $P133 = "lexical_package_lookup"($P131, $P132)
    set $P3174, $P133
.annotate 'line', 2129
    set $P129, $P3174
    unless_null $P129, vivify_2614
    new $P129, "Undef"
  vivify_2614:
    set $P131, $P3175
    unless_null $P131, vivify_2615
    new $P131, "Undef"
  vivify_2615:
    $P132 = "vivitype"($P131)
    $P129."viviself"($P132)
.annotate 'line', 2130
    set $P129, $P3177
    unless_null $P129, vivify_2616
    new $P129, "Undef"
  vivify_2616:
    set $P131, $P3176
    unless_null $P131, vivify_2617
    new $P131, "Undef"
  vivify_2617:
    $P129."symbol"($P131, "package" :named("scope"))
  if_3201_end:
.annotate 'line', 2123
    goto if_3183_end
  if_3183:
.annotate 'line', 2103
    .const 'Sub' $P3185 = "562_1329260321.776" 
    capture_lex $P3185
    $P3185()
  if_3183_end:
.annotate 'line', 2142
    set $P122, param_3173
    set $P123, $P3174
    unless_null $P123, vivify_2648
    new $P123, "Undef"
  vivify_2648:
    $P122."!make"($P123)
.annotate 'line', 2144
    set $P3205, param_3173
    unless_null $P3205, vivify_2649
    $P3205 = root_new ['parrot';'Hash']
  vivify_2649:
    set $P123, $P3205["trait"]
    unless_null $P123, vivify_2650
    new $P123, "Undef"
  vivify_2650:
    if $P123, if_3204
    set $P122, $P123
    goto if_3204_end
  if_3204:
.annotate 'line', 2145
    set $P3206, param_3173
    unless_null $P3206, vivify_2651
    $P3206 = root_new ['parrot';'Hash']
  vivify_2651:
    set $P125, $P3206["trait"]
    unless_null $P125, vivify_2652
    new $P125, "Undef"
  vivify_2652:
    defined $I100, $P125
    unless $I100, for_undef_2653
    iter $P124, $P125
    new $P127, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P127, loop3210_handler
    push_eh $P127
  loop3210_test:
    unless $P124, loop3210_done
    shift $P126, $P124
  loop3210_redo:
    .const 'Sub' $P3208 = "563_1329260321.776" 
    capture_lex $P3208
    $P3208($P126)
  loop3210_next:
    goto loop3210_test
  loop3210_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P129, exception, 'type'
    eq $P129, .CONTROL_LOOP_NEXT, loop3210_next
    eq $P129, .CONTROL_LOOP_REDO, loop3210_redo
  loop3210_done:
    pop_eh 
  for_undef_2653:
.annotate 'line', 2144
    set $P122, $P124
  if_3204_end:
.annotate 'line', 2095
    .return ($P122)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3184"  :anon :subid("562_1329260321.776") :outer("561_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2110
    $P3187 = root_new ['parrot';'Hash']
    set $P3186, $P3187
    .lex "%lit_args", $P3186
.annotate 'line', 2111
    $P3189 = root_new ['parrot';'Hash']
    set $P3188, $P3189
    .lex "%obj_args", $P3188
.annotate 'line', 2105
    find_dynamic_lex $P131, "$*PKGDECL"
    unless_null $P131, vivify_2618
    get_hll_global $P129, "GLOBAL"
    get_who $P130, $P129
    set $P131, $P130["$PKGDECL"]
    unless_null $P131, vivify_2619
    die "Contextual $*PKGDECL not found"
  vivify_2619:
  vivify_2618:
    concat $P132, $P131, "-attr"
    find_dynamic_lex $P127, "%*HOW"
    unless_null $P127, vivify_2620
    get_hll_global $P125, "GLOBAL"
    get_who $P126, $P125
    set $P127, $P126["%HOW"]
    unless_null $P127, vivify_2621
    die "Contextual %*HOW not found"
  vivify_2621:
  vivify_2620:
    exists $I101, $P127[$P132]
    if $I101, unless_3190_end
.annotate 'line', 2106
    find_lex $P133, "$/"
    unless_null $P133, vivify_2622
    new $P133, "Undef"
  vivify_2622:
    $P134 = $P133."CURSOR"()
    find_dynamic_lex $P137, "$*PKGDECL"
    unless_null $P137, vivify_2623
    get_hll_global $P135, "GLOBAL"
    get_who $P136, $P135
    set $P137, $P136["$PKGDECL"]
    unless_null $P137, vivify_2624
    die "Contextual $*PKGDECL not found"
  vivify_2624:
  vivify_2623:
    concat $P138, $P137, " packages do not support attributes"
    $P134."panic"($P138)
  unless_3190_end:
.annotate 'line', 2103
    set $P3191, $P3186
    unless_null $P3191, vivify_2625
    $P3191 = root_new ['parrot';'Hash']
  vivify_2625:
    set $P3192, $P3188
    unless_null $P3192, vivify_2626
    $P3192 = root_new ['parrot';'Hash']
  vivify_2626:
.annotate 'line', 2112
    find_lex $P125, "$name"
    unless_null $P125, vivify_2627
    new $P125, "Undef"
  vivify_2627:
    set $P3193, $P3186
    unless_null $P3193, vivify_2628
    $P3193 = root_new ['parrot';'Hash']
    set $P3186, $P3193
  vivify_2628:
    set $P3193["name"], $P125
.annotate 'line', 2113
    find_lex $P3195, "$/"
    unless_null $P3195, vivify_2629
    $P3195 = root_new ['parrot';'Hash']
  vivify_2629:
    set $P125, $P3195["typename"]
    unless_null $P125, vivify_2630
    new $P125, "Undef"
  vivify_2630:
    unless $P125, if_3194_end
.annotate 'line', 2114
    find_dynamic_lex $P129, "$*W"
    unless_null $P129, vivify_2631
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P129, $P127["$W"]
    unless_null $P129, vivify_2632
    die "Contextual $*W not found"
  vivify_2632:
  vivify_2631:
    new $P130, "Float"
    assign $P130, 0
    set $I101, $P130
    find_lex $P3196, "$/"
    unless_null $P3196, vivify_2633
    $P3196 = root_new ['parrot';'Hash']
  vivify_2633:
    set $P3197, $P3196["typename"]
    unless_null $P3197, vivify_2634
    $P3197 = root_new ['parrot';'ResizablePMCArray']
  vivify_2634:
    set $P131, $P3197[$I101]
    unless_null $P131, vivify_2635
    new $P131, "Undef"
  vivify_2635:
    set $S101, $P131
    new $P132, "ResizablePMCArray"
    push $P132, $S101
    $P133 = $P129."find_sym"($P132)
    set $P3198, $P3188
    unless_null $P3198, vivify_2636
    $P3198 = root_new ['parrot';'Hash']
    set $P3188, $P3198
  vivify_2636:
    set $P3198["type"], $P133
  if_3194_end:
.annotate 'line', 2118
    find_dynamic_lex $P127, "$*W"
    unless_null $P127, vivify_2637
    get_hll_global $P125, "GLOBAL"
    get_who $P126, $P125
    set $P127, $P126["$W"]
    unless_null $P127, vivify_2638
    die "Contextual $*W not found"
  vivify_2638:
  vivify_2637:
    find_dynamic_lex $P131, "$*PACKAGE"
    unless_null $P131, vivify_2639
    get_hll_global $P129, "GLOBAL"
    get_who $P130, $P129
    set $P131, $P130["$PACKAGE"]
    unless_null $P131, vivify_2640
    die "Contextual $*PACKAGE not found"
  vivify_2640:
  vivify_2639:
    find_dynamic_lex $P134, "$*PKGDECL"
    unless_null $P134, vivify_2641
    get_hll_global $P132, "GLOBAL"
    get_who $P133, $P132
    set $P134, $P133["$PKGDECL"]
    unless_null $P134, vivify_2642
    die "Contextual $*PKGDECL not found"
  vivify_2642:
  vivify_2641:
    concat $P135, $P134, "-attr"
    find_dynamic_lex $P138, "%*HOW"
    unless_null $P138, vivify_2643
    get_hll_global $P136, "GLOBAL"
    get_who $P137, $P136
    set $P138, $P137["%HOW"]
    unless_null $P138, vivify_2644
    die "Contextual %*HOW not found"
  vivify_2644:
  vivify_2643:
    set $P139, $P138[$P135]
    unless_null $P139, vivify_2645
    new $P139, "Undef"
  vivify_2645:
    set $P3199, $P3186
    unless_null $P3199, vivify_2646
    $P3199 = root_new ['parrot';'Hash']
  vivify_2646:
    set $P3200, $P3188
    unless_null $P3200, vivify_2647
    $P3200 = root_new ['parrot';'Hash']
  vivify_2647:
    $P127."pkg_add_attribute"($P131, $P139, $P3199, $P3200)
.annotate 'line', 2121
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P129, $P127["Stmts"]
    $P130 = $P129."new"()
    store_lex "$past", $P130
.annotate 'line', 2103
    .return ($P130)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3207"  :anon :subid("563_1329260321.776") :outer("561_1329260321.776")
    .param pmc param_3209
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2145
    .lex "$_", param_3209
    find_lex $P127, "$_"
    unless_null $P127, vivify_2654
    new $P127, "Undef"
  vivify_2654:
    $P129 = $P127."ast"()
    find_lex $P130, "$/"
    unless_null $P130, vivify_2655
    new $P130, "Undef"
  vivify_2655:
    $P131 = $P129($P130)
    .return ($P131)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "routine_declarator:sym<sub>" :anon :subid("564_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3212
    .param pmc param_3213
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2150
    .lex "self", param_3212
    .lex "$/", param_3213
    set $P117, param_3213
    set $P3214, param_3213
    unless_null $P3214, vivify_2656
    $P3214 = root_new ['parrot';'Hash']
  vivify_2656:
    set $P118, $P3214["routine_def"]
    unless_null $P118, vivify_2657
    new $P118, "Undef"
  vivify_2657:
    $P119 = $P118."ast"()
    $P121 = $P117."!make"($P119)
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "routine_declarator:sym<method>" :anon :subid("565_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3216
    .param pmc param_3217
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2151
    .lex "self", param_3216
    .lex "$/", param_3217
    set $P117, param_3217
    set $P3218, param_3217
    unless_null $P3218, vivify_2658
    $P3218 = root_new ['parrot';'Hash']
  vivify_2658:
    set $P118, $P3218["method_def"]
    unless_null $P118, vivify_2659
    new $P118, "Undef"
  vivify_2659:
    $P119 = $P118."ast"()
    $P121 = $P117."!make"($P119)
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "routine_def" :anon :subid("566_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3220
    .param pmc param_3221
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2153
    .const 'Sub' $P3292 = "573_1329260321.776" 
    capture_lex $P3292
    .const 'Sub' $P3231 = "567_1329260321.776" 
    capture_lex $P3231
    .lex "self", param_3220
    .lex "$/", param_3221
.annotate 'line', 2156
    new $P117, "Undef"
    set $P3222, $P117
    .lex "$past", $P3222
.annotate 'line', 2167
    new $P118, "Undef"
    set $P3223, $P118
    .lex "$block", $P3223
.annotate 'line', 2153
    set $P119, $P3222
    unless_null $P119, vivify_2660
    new $P119, "Undef"
  vivify_2660:
.annotate 'line', 2157
    set $P3225, param_3221
    unless_null $P3225, vivify_2661
    $P3225 = root_new ['parrot';'Hash']
  vivify_2661:
    set $P119, $P3225["onlystar"]
    unless_null $P119, vivify_2662
    new $P119, "Undef"
  vivify_2662:
    if $P119, if_3224
.annotate 'line', 2161
    set $P3226, param_3221
    unless_null $P3226, vivify_2663
    $P3226 = root_new ['parrot';'Hash']
  vivify_2663:
    set $P121, $P3226["blockoid"]
    unless_null $P121, vivify_2664
    new $P121, "Undef"
  vivify_2664:
    $P122 = $P121."ast"()
    set $P3222, $P122
.annotate 'line', 2162
    set $P121, $P3222
    unless_null $P121, vivify_2665
    new $P121, "Undef"
  vivify_2665:
    $P121."blocktype"("declaration")
.annotate 'line', 2163
    find_dynamic_lex $P123, "$*RETURN_USED"
    unless_null $P123, vivify_2666
    get_hll_global $P121, "GLOBAL"
    get_who $P122, $P121
    set $P123, $P122["$RETURN_USED"]
    unless_null $P123, vivify_2667
    die "Contextual $*RETURN_USED not found"
  vivify_2667:
  vivify_2666:
    unless $P123, if_3227_end
.annotate 'line', 2164
    set $P124, $P3222
    unless_null $P124, vivify_2668
    new $P124, "Undef"
  vivify_2668:
    $P124."control"("return_pir")
  if_3227_end:
.annotate 'line', 2160
    goto if_3224_end
  if_3224:
.annotate 'line', 2158
    $P121 = "only_star_block"()
    set $P3222, $P121
  if_3224_end:
.annotate 'line', 2167
    set $P119, $P3222
    unless_null $P119, vivify_2669
    new $P119, "Undef"
  vivify_2669:
    set $P3223, $P119
.annotate 'line', 2169
    set $P3229, param_3221
    unless_null $P3229, vivify_2670
    $P3229 = root_new ['parrot';'Hash']
  vivify_2670:
    set $P119, $P3229["deflongname"]
    unless_null $P119, vivify_2671
    new $P119, "Undef"
  vivify_2671:
    unless $P119, if_3228_end
    .const 'Sub' $P3231 = "567_1329260321.776" 
    capture_lex $P3231
    $P3231()
  if_3228_end:
.annotate 'line', 2273
    set $P119, $P3223
    unless_null $P119, vivify_2776
    new $P119, "Undef"
  vivify_2776:
    set $P3287, $P3222
    unless_null $P3287, vivify_2777
    $P3287 = root_new ['parrot';'Hash']
    set $P3222, $P3287
  vivify_2777:
    set $P3287["block_past"], $P119
.annotate 'line', 2274
    set $P3289, param_3221
    unless_null $P3289, vivify_2778
    $P3289 = root_new ['parrot';'Hash']
  vivify_2778:
    set $P119, $P3289["trait"]
    unless_null $P119, vivify_2779
    new $P119, "Undef"
  vivify_2779:
    unless $P119, if_3288_end
.annotate 'line', 2275
    set $P3290, param_3221
    unless_null $P3290, vivify_2780
    $P3290 = root_new ['parrot';'Hash']
  vivify_2780:
    set $P122, $P3290["trait"]
    unless_null $P122, vivify_2781
    new $P122, "Undef"
  vivify_2781:
    defined $I100, $P122
    unless $I100, for_undef_2782
    iter $P121, $P122
    new $P124, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P124, loop3294_handler
    push_eh $P124
  loop3294_test:
    unless $P121, loop3294_done
    shift $P123, $P121
  loop3294_redo:
    .const 'Sub' $P3292 = "573_1329260321.776" 
    capture_lex $P3292
    $P3292($P123)
  loop3294_next:
    goto loop3294_test
  loop3294_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P125, exception, 'type'
    eq $P125, .CONTROL_LOOP_NEXT, loop3294_next
    eq $P125, .CONTROL_LOOP_REDO, loop3294_redo
  loop3294_done:
    pop_eh 
  for_undef_2782:
  if_3288_end:
.annotate 'line', 2278
    set $P119, param_3221
    set $P121, $P3222
    unless_null $P121, vivify_2785
    new $P121, "Undef"
  vivify_2785:
    $P122 = $P119."!make"($P121)
.annotate 'line', 2153
    .return ($P122)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3230"  :anon :subid("567_1329260321.776") :outer("566_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2169
    .const 'Sub' $P3280 = "572_1329260321.776" 
    capture_lex $P3280
    .const 'Sub' $P3273 = "571_1329260321.776" 
    capture_lex $P3273
    .const 'Sub' $P3242 = "568_1329260321.776" 
    capture_lex $P3242
.annotate 'line', 2170
    new $P121, "Undef"
    set $P3232, $P121
    .lex "$name", $P3232
    new $P122, "Float"
    assign $P122, 0
    set $I100, $P122
    find_lex $P3233, "$/"
    unless_null $P3233, vivify_2672
    $P3233 = root_new ['parrot';'Hash']
  vivify_2672:
    set $P3234, $P3233["sigil"]
    unless_null $P3234, vivify_2673
    $P3234 = root_new ['parrot';'ResizablePMCArray']
  vivify_2673:
    set $P123, $P3234[$I100]
    unless_null $P123, vivify_2674
    new $P123, "Undef"
  vivify_2674:
    set $S100, $P123
    new $P124, 'String'
    set $P124, $S100
    new $P125, "Float"
    assign $P125, 0
    set $I101, $P125
    find_lex $P3235, "$/"
    unless_null $P3235, vivify_2675
    $P3235 = root_new ['parrot';'Hash']
  vivify_2675:
    set $P3236, $P3235["deflongname"]
    unless_null $P3236, vivify_2676
    $P3236 = root_new ['parrot';'ResizablePMCArray']
  vivify_2676:
    set $P126, $P3236[$I101]
    unless_null $P126, vivify_2677
    new $P126, "Undef"
  vivify_2677:
    $S101 = $P126."ast"()
    concat $P127, $P124, $S101
    set $P3232, $P127
.annotate 'line', 2171
    find_lex $P122, "$past"
    unless_null $P122, vivify_2678
    new $P122, "Undef"
  vivify_2678:
    set $P123, $P3232
    unless_null $P123, vivify_2679
    new $P123, "Undef"
  vivify_2679:
    $P122."name"($P123)
.annotate 'line', 2172
    find_dynamic_lex $P126, "$*SCOPE"
    unless_null $P126, vivify_2680
    get_hll_global $P124, "GLOBAL"
    get_who $P125, $P124
    set $P126, $P125["$SCOPE"]
    unless_null $P126, vivify_2681
    die "Contextual $*SCOPE not found"
  vivify_2681:
  vivify_2680:
    set $S100, $P126
    iseq $I100, $S100, ""
    unless $I100, unless_3239
    new $P123, 'Integer'
    set $P123, $I100
    goto unless_3239_end
  unless_3239:
    find_dynamic_lex $P130, "$*SCOPE"
    unless_null $P130, vivify_2682
    get_hll_global $P127, "GLOBAL"
    get_who $P129, $P127
    set $P130, $P129["$SCOPE"]
    unless_null $P130, vivify_2683
    die "Contextual $*SCOPE not found"
  vivify_2683:
  vivify_2682:
    set $S101, $P130
    iseq $I101, $S101, "my"
    new $P123, 'Integer'
    set $P123, $I101
  unless_3239_end:
    unless $P123, unless_3238
    set $P122, $P123
    goto unless_3238_end
  unless_3238:
    find_dynamic_lex $P133, "$*SCOPE"
    unless_null $P133, vivify_2684
    get_hll_global $P131, "GLOBAL"
    get_who $P132, $P131
    set $P133, $P132["$SCOPE"]
    unless_null $P133, vivify_2685
    die "Contextual $*SCOPE not found"
  vivify_2685:
  vivify_2684:
    set $S102, $P133
    iseq $I102, $S102, "our"
    new $P122, 'Integer'
    set $P122, $I102
  unless_3238_end:
    if $P122, if_3237
.annotate 'line', 2263
    find_lex $P134, "$/"
    unless_null $P134, vivify_2686
    new $P134, "Undef"
  vivify_2686:
    $P135 = $P134."CURSOR"()
    find_dynamic_lex $P138, "$*SCOPE"
    unless_null $P138, vivify_2687
    get_hll_global $P136, "GLOBAL"
    get_who $P137, $P136
    set $P138, $P137["$SCOPE"]
    unless_null $P138, vivify_2688
    die "Contextual $*SCOPE not found"
  vivify_2688:
  vivify_2687:
    concat $P139, $P138, " scoped routines are not supported yet"
    $P135."panic"($P139)
.annotate 'line', 2262
    goto if_3237_end
  if_3237:
.annotate 'line', 2173
    find_dynamic_lex $P136, "$*MULTINESS"
    unless_null $P136, vivify_2689
    get_hll_global $P134, "GLOBAL"
    get_who $P135, $P134
    set $P136, $P135["$MULTINESS"]
    unless_null $P136, vivify_2690
    die "Contextual $*MULTINESS not found"
  vivify_2690:
  vivify_2689:
    set $S103, $P136
    iseq $I103, $S103, "multi"
    if $I103, if_3240
.annotate 'line', 2225
    find_dynamic_lex $P141, "$*MULTINESS"
    unless_null $P141, vivify_2691
    get_hll_global $P138, "GLOBAL"
    get_who $P140, $P138
    set $P141, $P140["$MULTINESS"]
    unless_null $P141, vivify_2692
    die "Contextual $*MULTINESS not found"
  vivify_2692:
  vivify_2691:
    set $S104, $P141
    iseq $I104, $S104, "proto"
    if $I104, if_3271
.annotate 'line', 2244
    .const 'Sub' $P3280 = "572_1329260321.776" 
    capture_lex $P3280
    $P3280()
    goto if_3271_end
  if_3271:
.annotate 'line', 2225
    .const 'Sub' $P3273 = "571_1329260321.776" 
    capture_lex $P3273
    $P3273()
  if_3271_end:
    goto if_3240_end
  if_3240:
.annotate 'line', 2173
    .const 'Sub' $P3242 = "568_1329260321.776" 
    capture_lex $P3242
    $P3242()
  if_3240_end:
.annotate 'line', 2260
    get_hll_global $P134, "GLOBAL"
    nqp_get_package_through_who $P135, $P134, "PAST"
    get_who $P136, $P135
    set $P137, $P136["Var"]
    set $P138, $P3232
    unless_null $P138, vivify_2771
    new $P138, "Undef"
  vivify_2771:
    $P139 = $P137."new"($P138 :named("name"))
    store_lex "$past", $P139
  if_3237_end:
.annotate 'line', 2267
    set $P124, $P3232
    unless_null $P124, vivify_2772
    new $P124, "Undef"
  vivify_2772:
    set $S100, $P124
    iseq $I100, $S100, "MAIN"
    if $I100, if_3286
    new $P123, 'Integer'
    set $P123, $I100
    goto if_3286_end
  if_3286:
    find_dynamic_lex $P127, "$*MULTINESS"
    unless_null $P127, vivify_2773
    get_hll_global $P125, "GLOBAL"
    get_who $P126, $P125
    set $P127, $P126["$MULTINESS"]
    unless_null $P127, vivify_2774
    die "Contextual $*MULTINESS not found"
  vivify_2774:
  vivify_2773:
    set $S101, $P127
    isne $I101, $S101, "multi"
    new $P123, 'Integer'
    set $P123, $I101
  if_3286_end:
    if $P123, if_3285
    set $P122, $P123
    goto if_3285_end
  if_3285:
.annotate 'line', 2268
    find_lex $P129, "$block"
    unless_null $P129, vivify_2775
    new $P129, "Undef"
  vivify_2775:
    store_dynamic_lex "$*MAIN_SUB", $P129
.annotate 'line', 2267
    set $P122, $P129
  if_3285_end:
.annotate 'line', 2169
    .return ($P122)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3279"  :anon :subid("572_1329260321.776") :outer("567_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2245
    new $P144, "Undef"
    set $P3281, $P144
    .lex "$BLOCK", $P3281
    find_dynamic_lex $P148, "$*W"
    unless_null $P148, vivify_2693
    get_hll_global $P146, "GLOBAL"
    get_who $P147, $P146
    set $P148, $P147["$W"]
    unless_null $P148, vivify_2694
    die "Contextual $*W not found"
  vivify_2694:
  vivify_2693:
    $P150 = $P148."cur_lexpad"()
    set $P3281, $P150
.annotate 'line', 2246
    new $P146, "Float"
    assign $P146, 0
    set $I105, $P146
    set $P3282, $P3281
    unless_null $P3282, vivify_2695
    $P3282 = root_new ['parrot';'ResizablePMCArray']
  vivify_2695:
    set $P147, $P3282[$I105]
    unless_null $P147, vivify_2696
    new $P147, "Undef"
  vivify_2696:
    get_hll_global $P148, "GLOBAL"
    nqp_get_package_through_who $P150, $P148, "PAST"
    get_who $P151, $P150
    set $P152, $P151["Var"]
    find_lex $P153, "$name"
    unless_null $P153, vivify_2697
    new $P153, "Undef"
  vivify_2697:
    find_lex $P154, "$past"
    unless_null $P154, vivify_2698
    new $P154, "Undef"
  vivify_2698:
    $P155 = $P152."new"($P153 :named("name"), 1 :named("isdecl"), 1 :named("directaccess"), $P154 :named("viviself"), "lexical" :named("scope"))
    $P147."push"($P155)
.annotate 'line', 2248
    set $P146, $P3281
    unless_null $P146, vivify_2699
    new $P146, "Undef"
  vivify_2699:
    find_lex $P147, "$name"
    unless_null $P147, vivify_2700
    new $P147, "Undef"
  vivify_2700:
    $P146."symbol"($P147, "lexical" :named("scope"))
.annotate 'line', 2249
    find_dynamic_lex $P150, "$*SCOPE"
    unless_null $P150, vivify_2701
    get_hll_global $P147, "GLOBAL"
    get_who $P148, $P147
    set $P150, $P148["$SCOPE"]
    unless_null $P150, vivify_2702
    die "Contextual $*SCOPE not found"
  vivify_2702:
  vivify_2701:
    set $S105, $P150
    iseq $I105, $S105, "our"
    if $I105, if_3283
    new $P146, 'Integer'
    set $P146, $I105
    goto if_3283_end
  if_3283:
.annotate 'line', 2252
    find_dynamic_lex $P153, "$*W"
    unless_null $P153, vivify_2703
    get_hll_global $P151, "GLOBAL"
    get_who $P152, $P151
    set $P153, $P152["$W"]
    unless_null $P153, vivify_2704
    die "Contextual $*W not found"
  vivify_2704:
  vivify_2703:
    find_dynamic_lex $P156, "$*PACKAGE"
    unless_null $P156, vivify_2705
    get_hll_global $P154, "GLOBAL"
    get_who $P155, $P154
    set $P156, $P155["$PACKAGE"]
    unless_null $P156, vivify_2706
    die "Contextual $*PACKAGE not found"
  vivify_2706:
  vivify_2705:
    find_lex $P157, "$name"
    unless_null $P157, vivify_2707
    new $P157, "Undef"
  vivify_2707:
    find_lex $P158, "$past"
    unless_null $P158, vivify_2708
    new $P158, "Undef"
  vivify_2708:
    $P153."install_package_routine"($P156, $P157, $P158)
.annotate 'line', 2253
    new $P151, "Float"
    assign $P151, 0
    set $I106, $P151
    set $P3284, $P3281
    unless_null $P3284, vivify_2709
    $P3284 = root_new ['parrot';'ResizablePMCArray']
  vivify_2709:
    set $P152, $P3284[$I106]
    unless_null $P152, vivify_2710
    new $P152, "Undef"
  vivify_2710:
    get_hll_global $P153, "GLOBAL"
    nqp_get_package_through_who $P154, $P153, "PAST"
    get_who $P155, $P154
    set $P156, $P155["Op"]
.annotate 'line', 2255
    find_lex $P157, "$name"
    unless_null $P157, vivify_2711
    new $P157, "Undef"
  vivify_2711:
    new $P158, "ResizablePMCArray"
    push $P158, $P157
    find_lex $P159, "$/"
    unless_null $P159, vivify_2712
    new $P159, "Undef"
  vivify_2712:
    $P160 = "lexical_package_lookup"($P158, $P159)
.annotate 'line', 2256
    get_hll_global $P161, "GLOBAL"
    nqp_get_package_through_who $P162, $P161, "PAST"
    get_who $P163, $P162
    set $P164, $P163["Var"]
    find_lex $P165, "$name"
    unless_null $P165, vivify_2713
    new $P165, "Undef"
  vivify_2713:
    $P166 = $P164."new"($P165 :named("name"), "lexical" :named("scope"))
    $P167 = $P156."new"($P160, $P166, "bind_6model" :named("pasttype"))
.annotate 'line', 2253
    $P168 = $P152."push"($P167)
.annotate 'line', 2249
    set $P146, $P168
  if_3283_end:
.annotate 'line', 2244
    .return ($P146)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3272"  :anon :subid("571_1329260321.776") :outer("567_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2230
    new $P142, "Undef"
    set $P3274, $P142
    .lex "$cholder", $P3274
.annotate 'line', 2231
    new $P143, "Undef"
    set $P3275, $P143
    .lex "$BLOCK", $P3275
.annotate 'line', 2229
    find_dynamic_lex $P146, "$*SCOPE"
    unless_null $P146, vivify_2714
    get_hll_global $P144, "GLOBAL"
    get_who $P145, $P144
    set $P146, $P145["$SCOPE"]
    unless_null $P146, vivify_2715
    die "Contextual $*SCOPE not found"
  vivify_2715:
  vivify_2714:
    set $S105, $P146
    iseq $I105, $S105, "our"
    unless $I105, if_3276_end
    die "our-scoped protos not yet implemented"
  if_3276_end:
.annotate 'line', 2230
    get_hll_global $P144, "GLOBAL"
    nqp_get_package_through_who $P145, $P144, "PAST"
    get_who $P146, $P145
    set $P147, $P146["Op"]
    $P148 = $P147."new"("list" :named("pasttype"))
    set $P3274, $P148
.annotate 'line', 2231
    find_dynamic_lex $P146, "$*W"
    unless_null $P146, vivify_2716
    get_hll_global $P144, "GLOBAL"
    get_who $P145, $P144
    set $P146, $P145["$W"]
    unless_null $P146, vivify_2717
    die "Contextual $*W not found"
  vivify_2717:
  vivify_2716:
    $P147 = $P146."cur_lexpad"()
    set $P3275, $P147
.annotate 'line', 2232
    new $P144, "Float"
    assign $P144, 0
    set $I105, $P144
    set $P3277, $P3275
    unless_null $P3277, vivify_2718
    $P3277 = root_new ['parrot';'ResizablePMCArray']
  vivify_2718:
    set $P145, $P3277[$I105]
    unless_null $P145, vivify_2719
    new $P145, "Undef"
  vivify_2719:
    get_hll_global $P146, "GLOBAL"
    nqp_get_package_through_who $P147, $P146, "PAST"
    get_who $P148, $P147
    set $P150, $P148["Var"]
    find_lex $P151, "$name"
    unless_null $P151, vivify_2720
    new $P151, "Undef"
  vivify_2720:
    find_lex $P152, "$past"
    unless_null $P152, vivify_2721
    new $P152, "Undef"
  vivify_2721:
    $P153 = $P150."new"($P151 :named("name"), 1 :named("isdecl"), 1 :named("directaccess"), $P152 :named("viviself"), "lexical" :named("scope"))
    $P145."push"($P153)
.annotate 'line', 2234
    new $P144, "Float"
    assign $P144, 0
    set $I105, $P144
    set $P3278, $P3275
    unless_null $P3278, vivify_2722
    $P3278 = root_new ['parrot';'ResizablePMCArray']
  vivify_2722:
    set $P145, $P3278[$I105]
    unless_null $P145, vivify_2723
    new $P145, "Undef"
  vivify_2723:
    get_hll_global $P146, "GLOBAL"
    nqp_get_package_through_who $P147, $P146, "PAST"
    get_who $P148, $P147
    set $P150, $P148["Op"]
.annotate 'line', 2236
    get_hll_global $P151, "GLOBAL"
    nqp_get_package_through_who $P152, $P151, "PAST"
    get_who $P153, $P152
    set $P154, $P153["Var"]
    find_lex $P155, "$name"
    unless_null $P155, vivify_2724
    new $P155, "Undef"
  vivify_2724:
    $P156 = $P154."new"($P155 :named("name"))
    set $P157, $P3274
    unless_null $P157, vivify_2725
    new $P157, "Undef"
  vivify_2725:
    $P158 = $P150."new"($P156, $P157, "set_dispatchees 0PP" :named("pirop"))
.annotate 'line', 2234
    $P145."push"($P158)
.annotate 'line', 2239
    set $P144, $P3275
    unless_null $P144, vivify_2726
    new $P144, "Undef"
  vivify_2726:
    find_lex $P145, "$name"
    unless_null $P145, vivify_2727
    new $P145, "Undef"
  vivify_2727:
    set $P146, $P3274
    unless_null $P146, vivify_2728
    new $P146, "Undef"
  vivify_2728:
    $P144."symbol"($P145, "lexical" :named("scope"), 1 :named("proto"), $P146 :named("cholder"))
.annotate 'line', 2242
    find_lex $P144, "$past"
    unless_null $P144, vivify_2729
    new $P144, "Undef"
  vivify_2729:
    $P145 = $P144."pirflags"(":instanceof(\"DispatcherSub\")")
.annotate 'line', 2225
    .return ($P145)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3241"  :anon :subid("568_1329260321.776") :outer("567_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2173
    .const 'Sub' $P3251 = "569_1329260321.776" 
    capture_lex $P3251
.annotate 'line', 2176
    new $P137, "Undef"
    set $P3243, $P137
    .lex "$cholder", $P3243
.annotate 'line', 2177
    $P3245 = root_new ['parrot';'Hash']
    set $P3244, $P3245
    .lex "%sym", $P3244
.annotate 'line', 2175
    find_dynamic_lex $P140, "$*SCOPE"
    unless_null $P140, vivify_2730
    get_hll_global $P138, "GLOBAL"
    get_who $P139, $P138
    set $P140, $P139["$SCOPE"]
    unless_null $P140, vivify_2731
    die "Contextual $*SCOPE not found"
  vivify_2731:
  vivify_2730:
    set $S104, $P140
    iseq $I104, $S104, "our"
    unless $I104, if_3246_end
    die "our-scoped multis not yet implemented"
  if_3246_end:
.annotate 'line', 2173
    set $P138, $P3243
    unless_null $P138, vivify_2732
    new $P138, "Undef"
  vivify_2732:
.annotate 'line', 2177
    find_dynamic_lex $P140, "$*W"
    unless_null $P140, vivify_2733
    get_hll_global $P138, "GLOBAL"
    get_who $P139, $P138
    set $P140, $P139["$W"]
    unless_null $P140, vivify_2734
    die "Contextual $*W not found"
  vivify_2734:
  vivify_2733:
    $P141 = $P140."cur_lexpad"()
    find_lex $P142, "$name"
    unless_null $P142, vivify_2735
    new $P142, "Undef"
  vivify_2735:
    $P143 = $P141."symbol"($P142)
    set $P3244, $P143
.annotate 'line', 2178
    set $P3248, $P3244
    unless_null $P3248, vivify_2736
    $P3248 = root_new ['parrot';'Hash']
  vivify_2736:
    set $P138, $P3248["cholder"]
    unless_null $P138, vivify_2737
    new $P138, "Undef"
  vivify_2737:
    if $P138, if_3247
.annotate 'line', 2183
    .const 'Sub' $P3251 = "569_1329260321.776" 
    capture_lex $P3251
    $P3251()
    goto if_3247_end
  if_3247:
.annotate 'line', 2179
    set $P3249, $P3244
    unless_null $P3249, vivify_2766
    $P3249 = root_new ['parrot';'Hash']
  vivify_2766:
    set $P139, $P3249["cholder"]
    unless_null $P139, vivify_2767
    new $P139, "Undef"
  vivify_2767:
    set $P3243, $P139
  if_3247_end:
.annotate 'line', 2220
    set $P138, $P3243
    unless_null $P138, vivify_2768
    new $P138, "Undef"
  vivify_2768:
    find_lex $P139, "$past"
    unless_null $P139, vivify_2769
    new $P139, "Undef"
  vivify_2769:
    $P138."push"($P139)
.annotate 'line', 2223
    find_lex $P138, "$past"
    unless_null $P138, vivify_2770
    new $P138, "Undef"
  vivify_2770:
    $P139 = "attach_multi_signature"($P138)
.annotate 'line', 2173
    .return ($P139)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block3250"  :anon :subid("569_1329260321.776") :outer("568_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2183
    .const 'Sub' $P3258 = "570_1329260321.776" 
    capture_lex $P3258
.annotate 'line', 2190
    new $P139, "Undef"
    set $P3252, $P139
    .lex "$found_proto", $P3252
.annotate 'line', 2207
    new $P140, "Undef"
    set $P3253, $P140
    .lex "$BLOCK", $P3253
.annotate 'line', 2209
    new $P141, "Undef"
    set $P3254, $P141
    .lex "$dispatch_setup", $P3254
.annotate 'line', 2185
    find_lex $P3256, "%sym"
    unless_null $P3256, vivify_2738
    $P3256 = root_new ['parrot';'Hash']
  vivify_2738:
    set $P142, $P3256["proto"]
    unless_null $P142, vivify_2739
    new $P142, "Undef"
  vivify_2739:
    unless $P142, if_3255_end
.annotate 'line', 2188
    find_lex $P143, "$/"
    unless_null $P143, vivify_2740
    new $P143, "Undef"
  vivify_2740:
    $P144 = $P143."CURSOR"()
    $P144."panic"("Internal Error: Current scope has a proto, but no candidate list holder was set up. (This should never happen.)")
  if_3255_end:
.annotate 'line', 2183
    set $P142, $P3252
    unless_null $P142, vivify_2741
    new $P142, "Undef"
  vivify_2741:
.annotate 'line', 2191
    find_dynamic_lex $P145, "$*W"
    unless_null $P145, vivify_2742
    get_hll_global $P143, "GLOBAL"
    get_who $P144, $P143
    set $P145, $P144["$W"]
    unless_null $P145, vivify_2743
    die "Contextual $*W not found"
  vivify_2743:
  vivify_2742:
    $P146 = $P145."get_legacy_block_list"()
    defined $I104, $P146
    unless $I104, for_undef_2744
    iter $P142, $P146
    new $P150, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P150, loop3268_handler
    push_eh $P150
  loop3268_test:
    unless $P142, loop3268_done
    shift $P147, $P142
  loop3268_redo:
    .const 'Sub' $P3258 = "570_1329260321.776" 
    capture_lex $P3258
    $P3258($P147)
  loop3268_next:
    goto loop3268_test
  loop3268_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P151, exception, 'type'
    eq $P151, .CONTROL_LOOP_NEXT, loop3268_next
    eq $P151, .CONTROL_LOOP_REDO, loop3268_redo
  loop3268_done:
    pop_eh 
  for_undef_2744:
.annotate 'line', 2202
    set $P142, $P3252
    unless_null $P142, vivify_2753
    new $P142, "Undef"
  vivify_2753:
    if $P142, unless_3269_end
.annotate 'line', 2203
    find_lex $P143, "$/"
    unless_null $P143, vivify_2754
    new $P143, "Undef"
  vivify_2754:
    $P144 = $P143."CURSOR"()
    $P144."panic"("Sorry, no proto sub in scope, and auto-generation of protos is not yet implemented.")
  unless_3269_end:
.annotate 'line', 2207
    find_dynamic_lex $P144, "$*W"
    unless_null $P144, vivify_2755
    get_hll_global $P142, "GLOBAL"
    get_who $P143, $P142
    set $P144, $P143["$W"]
    unless_null $P144, vivify_2756
    die "Contextual $*W not found"
  vivify_2756:
  vivify_2755:
    $P145 = $P144."cur_lexpad"()
    set $P3253, $P145
.annotate 'line', 2208
    get_hll_global $P142, "GLOBAL"
    nqp_get_package_through_who $P143, $P142, "PAST"
    get_who $P144, $P143
    set $P145, $P144["Op"]
    $P146 = $P145."new"("list" :named("pasttype"))
    store_lex "$cholder", $P146
.annotate 'line', 2209
    get_hll_global $P142, "GLOBAL"
    nqp_get_package_through_who $P143, $P142, "PAST"
    get_who $P144, $P143
    set $P145, $P144["Op"]
.annotate 'line', 2211
    get_hll_global $P146, "GLOBAL"
    nqp_get_package_through_who $P147, $P146, "PAST"
    get_who $P148, $P147
    set $P150, $P148["Var"]
    find_lex $P151, "$name"
    unless_null $P151, vivify_2757
    new $P151, "Undef"
  vivify_2757:
    $P152 = $P150."new"($P151 :named("name"), "outer" :named("scope"))
    find_lex $P153, "$cholder"
    unless_null $P153, vivify_2758
    new $P153, "Undef"
  vivify_2758:
    $P154 = $P145."new"($P152, $P153, "create_dispatch_and_add_candidates PPP" :named("pirop"))
.annotate 'line', 2209
    set $P3254, $P154
.annotate 'line', 2214
    new $P142, "Float"
    assign $P142, 0
    set $I104, $P142
    set $P3270, $P3253
    unless_null $P3270, vivify_2759
    $P3270 = root_new ['parrot';'ResizablePMCArray']
  vivify_2759:
    set $P143, $P3270[$I104]
    unless_null $P143, vivify_2760
    new $P143, "Undef"
  vivify_2760:
    get_hll_global $P144, "GLOBAL"
    nqp_get_package_through_who $P145, $P144, "PAST"
    get_who $P146, $P145
    set $P147, $P146["Var"]
    find_lex $P148, "$name"
    unless_null $P148, vivify_2761
    new $P148, "Undef"
  vivify_2761:
    set $P150, $P3254
    unless_null $P150, vivify_2762
    new $P150, "Undef"
  vivify_2762:
    $P151 = $P147."new"($P148 :named("name"), 1 :named("isdecl"), 1 :named("directaccess"), $P150 :named("viviself"), "lexical" :named("scope"))
    $P143."push"($P151)
.annotate 'line', 2216
    set $P142, $P3253
    unless_null $P142, vivify_2763
    new $P142, "Undef"
  vivify_2763:
    find_lex $P143, "$name"
    unless_null $P143, vivify_2764
    new $P143, "Undef"
  vivify_2764:
    find_lex $P144, "$cholder"
    unless_null $P144, vivify_2765
    new $P144, "Undef"
  vivify_2765:
    $P145 = $P142."symbol"($P143, "lexical" :named("scope"), $P144 :named("cholder"))
.annotate 'line', 2183
    .return ($P145)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3257"  :anon :subid("570_1329260321.776") :outer("569_1329260321.776")
    .param pmc param_3261
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2192
    $P3260 = root_new ['parrot';'Hash']
    set $P3259, $P3260
    .lex "%sym", $P3259
    .lex "$_", param_3261
    find_lex $P148, "$_"
    unless_null $P148, vivify_2745
    new $P148, "Undef"
  vivify_2745:
    find_lex $P150, "$name"
    unless_null $P150, vivify_2746
    new $P150, "Undef"
  vivify_2746:
    $P151 = $P148."symbol"($P150)
    set $P3259, $P151
.annotate 'line', 2193
    set $P3264, $P3259
    unless_null $P3264, vivify_2747
    $P3264 = root_new ['parrot';'Hash']
  vivify_2747:
    set $P151, $P3264["proto"]
    unless_null $P151, vivify_2748
    new $P151, "Undef"
  vivify_2748:
    unless $P151, unless_3263
    set $P150, $P151
    goto unless_3263_end
  unless_3263:
    set $P3265, $P3259
    unless_null $P3265, vivify_2749
    $P3265 = root_new ['parrot';'Hash']
  vivify_2749:
    set $P152, $P3265["cholder"]
    unless_null $P152, vivify_2750
    new $P152, "Undef"
  vivify_2750:
    set $P150, $P152
  unless_3263_end:
    if $P150, if_3262
.annotate 'line', 2196
    set $P3267, $P3259
    unless_null $P3267, vivify_2751
    $P3267 = root_new ['parrot';'Hash']
  vivify_2751:
    if $P3267, if_3266
    set $P154, $P3267
    goto if_3266_end
  if_3266:
.annotate 'line', 2197
    find_lex $P155, "$/"
    unless_null $P155, vivify_2752
    new $P155, "Undef"
  vivify_2752:
    $P156 = $P155."CURSOR"()
    $P157 = $P156."panic"("Cannot declare a multi when an only is already in scope.")
.annotate 'line', 2196
    set $P154, $P157
  if_3266_end:
    set $P148, $P154
.annotate 'line', 2193
    goto if_3262_end
  if_3262:
.annotate 'line', 2194
    new $P153, "Float"
    assign $P153, 1
    store_lex "$found_proto", $P153
.annotate 'line', 2193
    set $P148, $P153
  if_3262_end:
.annotate 'line', 2191
    .return ($P148)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3291"  :anon :subid("573_1329260321.776") :outer("566_1329260321.776")
    .param pmc param_3293
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2275
    .lex "$_", param_3293
    find_lex $P124, "$_"
    unless_null $P124, vivify_2783
    new $P124, "Undef"
  vivify_2783:
    $P125 = $P124."ast"()
    find_lex $P126, "$/"
    unless_null $P126, vivify_2784
    new $P126, "Undef"
  vivify_2784:
    $P127 = $P125($P126)
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "method_def" :anon :subid("574_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3296
    .param pmc param_3297
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2282
    .const 'Sub' $P3325 = "576_1329260321.776" 
    capture_lex $P3325
    .const 'Sub' $P3309 = "575_1329260321.776" 
    capture_lex $P3309
    .lex "self", param_3296
    .lex "$/", param_3297
.annotate 'line', 2285
    new $P117, "Undef"
    set $P3298, $P117
    .lex "$past", $P3298
.annotate 'line', 2282
    set $P118, $P3298
    unless_null $P118, vivify_2786
    new $P118, "Undef"
  vivify_2786:
.annotate 'line', 2286
    set $P3300, param_3297
    unless_null $P3300, vivify_2787
    $P3300 = root_new ['parrot';'Hash']
  vivify_2787:
    set $P118, $P3300["onlystar"]
    unless_null $P118, vivify_2788
    new $P118, "Undef"
  vivify_2788:
    if $P118, if_3299
.annotate 'line', 2290
    set $P3301, param_3297
    unless_null $P3301, vivify_2789
    $P3301 = root_new ['parrot';'Hash']
  vivify_2789:
    set $P119, $P3301["blockoid"]
    unless_null $P119, vivify_2790
    new $P119, "Undef"
  vivify_2790:
    $P121 = $P119."ast"()
    set $P3298, $P121
.annotate 'line', 2291
    set $P119, $P3298
    unless_null $P119, vivify_2791
    new $P119, "Undef"
  vivify_2791:
    $P119."blocktype"("declaration")
.annotate 'line', 2292
    find_dynamic_lex $P122, "$*RETURN_USED"
    unless_null $P122, vivify_2792
    get_hll_global $P119, "GLOBAL"
    get_who $P121, $P119
    set $P122, $P121["$RETURN_USED"]
    unless_null $P122, vivify_2793
    die "Contextual $*RETURN_USED not found"
  vivify_2793:
  vivify_2792:
    unless $P122, if_3302_end
.annotate 'line', 2293
    set $P123, $P3298
    unless_null $P123, vivify_2794
    new $P123, "Undef"
  vivify_2794:
    $P123."control"("return_pir")
  if_3302_end:
.annotate 'line', 2289
    goto if_3299_end
  if_3299:
.annotate 'line', 2287
    $P119 = "only_star_block"()
    set $P3298, $P119
  if_3299_end:
.annotate 'line', 2298
    set $P3304, $P3298
    unless_null $P3304, vivify_2795
    $P3304 = root_new ['parrot';'Hash']
  vivify_2795:
    set $P118, $P3304["signature_has_invocant"]
    unless_null $P118, vivify_2796
    new $P118, "Undef"
  vivify_2796:
    if $P118, unless_3303_end
.annotate 'line', 2299
    new $P119, "Float"
    assign $P119, 0
    set $I100, $P119
    set $P3305, $P3298
    unless_null $P3305, vivify_2797
    $P3305 = root_new ['parrot';'ResizablePMCArray']
  vivify_2797:
    set $P121, $P3305[$I100]
    unless_null $P121, vivify_2798
    new $P121, "Undef"
  vivify_2798:
    get_hll_global $P122, "GLOBAL"
    nqp_get_package_through_who $P123, $P122, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Var"]
.annotate 'line', 2301
    find_dynamic_lex $P129, "$*W"
    unless_null $P129, vivify_2799
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P129, $P127["$W"]
    unless_null $P129, vivify_2800
    die "Contextual $*W not found"
  vivify_2800:
  vivify_2799:
    find_dynamic_lex $P132, "$*PACKAGE"
    unless_null $P132, vivify_2801
    get_hll_global $P130, "GLOBAL"
    get_who $P131, $P130
    set $P132, $P131["$PACKAGE"]
    unless_null $P132, vivify_2802
    die "Contextual $*PACKAGE not found"
  vivify_2802:
  vivify_2801:
    $P133 = $P129."get_ref"($P132)
.annotate 'line', 2299
    $P134 = $P125."new"("self" :named("name"), "parameter" :named("scope"), 1 :named("directaccess"), $P133 :named("multitype"))
    $P121."unshift"($P134)
  unless_3303_end:
.annotate 'line', 2304
    set $P118, $P3298
    unless_null $P118, vivify_2803
    new $P118, "Undef"
  vivify_2803:
    $P118."symbol"("self", "lexical" :named("scope"))
.annotate 'line', 2307
    set $P3307, param_3297
    unless_null $P3307, vivify_2804
    $P3307 = root_new ['parrot';'Hash']
  vivify_2804:
    set $P118, $P3307["deflongname"]
    unless_null $P118, vivify_2805
    new $P118, "Undef"
  vivify_2805:
    unless $P118, if_3306_end
    .const 'Sub' $P3309 = "575_1329260321.776" 
    capture_lex $P3309
    $P3309()
  if_3306_end:
.annotate 'line', 2334
    set $P118, param_3297
    set $P119, $P3298
    unless_null $P119, vivify_2840
    new $P119, "Undef"
  vivify_2840:
    $P118."!make"($P119)
.annotate 'line', 2335
    set $P118, $P3298
    unless_null $P118, vivify_2841
    new $P118, "Undef"
  vivify_2841:
    set $P3320, $P3298
    unless_null $P3320, vivify_2842
    $P3320 = root_new ['parrot';'Hash']
    set $P3298, $P3320
  vivify_2842:
    set $P3320["block_past"], $P118
.annotate 'line', 2336
    set $P3322, param_3297
    unless_null $P3322, vivify_2843
    $P3322 = root_new ['parrot';'Hash']
  vivify_2843:
    set $P119, $P3322["trait"]
    unless_null $P119, vivify_2844
    new $P119, "Undef"
  vivify_2844:
    if $P119, if_3321
    set $P118, $P119
    goto if_3321_end
  if_3321:
.annotate 'line', 2337
    set $P3323, param_3297
    unless_null $P3323, vivify_2845
    $P3323 = root_new ['parrot';'Hash']
  vivify_2845:
    set $P122, $P3323["trait"]
    unless_null $P122, vivify_2846
    new $P122, "Undef"
  vivify_2846:
    defined $I100, $P122
    unless $I100, for_undef_2847
    iter $P121, $P122
    new $P124, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P124, loop3327_handler
    push_eh $P124
  loop3327_test:
    unless $P121, loop3327_done
    shift $P123, $P121
  loop3327_redo:
    .const 'Sub' $P3325 = "576_1329260321.776" 
    capture_lex $P3325
    $P3325($P123)
  loop3327_next:
    goto loop3327_test
  loop3327_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P125, exception, 'type'
    eq $P125, .CONTROL_LOOP_NEXT, loop3327_next
    eq $P125, .CONTROL_LOOP_REDO, loop3327_redo
  loop3327_done:
    pop_eh 
  for_undef_2847:
.annotate 'line', 2336
    set $P118, $P121
  if_3321_end:
.annotate 'line', 2282
    .return ($P118)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3308"  :anon :subid("575_1329260321.776") :outer("574_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2309
    new $P119, "Undef"
    set $P3310, $P119
    .lex "$name", $P3310
.annotate 'line', 2317
    new $P121, "Undef"
    set $P3311, $P121
    .lex "$meta_meth", $P3311
.annotate 'line', 2318
    new $P122, "Undef"
    set $P3312, $P122
    .lex "$is_dispatcher", $P3312
.annotate 'line', 2309
    find_lex $P3313, "$/"
    unless_null $P3313, vivify_2806
    $P3313 = root_new ['parrot';'Hash']
  vivify_2806:
    set $P123, $P3313["private"]
    unless_null $P123, vivify_2807
    new $P123, "Undef"
  vivify_2807:
    set $S100, $P123
    new $P124, 'String'
    set $P124, $S100
    new $P125, "Float"
    assign $P125, 0
    set $I100, $P125
    find_lex $P3314, "$/"
    unless_null $P3314, vivify_2808
    $P3314 = root_new ['parrot';'Hash']
  vivify_2808:
    set $P3315, $P3314["deflongname"]
    unless_null $P3315, vivify_2809
    $P3315 = root_new ['parrot';'ResizablePMCArray']
  vivify_2809:
    set $P126, $P3315[$I100]
    unless_null $P126, vivify_2810
    new $P126, "Undef"
  vivify_2810:
    $P127 = $P126."ast"()
    set $S101, $P127
    concat $P129, $P124, $S101
    set $P3310, $P129
.annotate 'line', 2310
    find_lex $P123, "$past"
    unless_null $P123, vivify_2811
    new $P123, "Undef"
  vivify_2811:
    set $P124, $P3310
    unless_null $P124, vivify_2812
    new $P124, "Undef"
  vivify_2812:
    $P123."name"($P124)
.annotate 'line', 2314
    find_dynamic_lex $P125, "$*MULTINESS"
    unless_null $P125, vivify_2813
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$MULTINESS"]
    unless_null $P125, vivify_2814
    die "Contextual $*MULTINESS not found"
  vivify_2814:
  vivify_2813:
    set $S100, $P125
    iseq $I100, $S100, "multi"
    unless $I100, if_3316_end
    find_lex $P126, "$past"
    unless_null $P126, vivify_2815
    new $P126, "Undef"
  vivify_2815:
    "attach_multi_signature"($P126)
  if_3316_end:
.annotate 'line', 2317
    find_dynamic_lex $P126, "$*MULTINESS"
    unless_null $P126, vivify_2816
    get_hll_global $P124, "GLOBAL"
    get_who $P125, $P124
    set $P126, $P125["$MULTINESS"]
    unless_null $P126, vivify_2817
    die "Contextual $*MULTINESS not found"
  vivify_2817:
  vivify_2816:
    set $S100, $P126
    iseq $I100, $S100, "multi"
    if $I100, if_3317
    new $P129, "String"
    assign $P129, "add_method"
    set $P123, $P129
    goto if_3317_end
  if_3317:
    new $P127, "String"
    assign $P127, "add_multi_method"
    set $P123, $P127
  if_3317_end:
    set $P3311, $P123
.annotate 'line', 2318
    find_dynamic_lex $P125, "$*MULTINESS"
    unless_null $P125, vivify_2818
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$MULTINESS"]
    unless_null $P125, vivify_2819
    die "Contextual $*MULTINESS not found"
  vivify_2819:
  vivify_2818:
    set $S100, $P125
    iseq $I100, $S100, "proto"
    new $P126, 'Integer'
    set $P126, $I100
    set $P3312, $P126
.annotate 'line', 2319
    find_dynamic_lex $P125, "$*W"
    unless_null $P125, vivify_2820
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$W"]
    unless_null $P125, vivify_2821
    die "Contextual $*W not found"
  vivify_2821:
  vivify_2820:
    find_dynamic_lex $P129, "$*PACKAGE"
    unless_null $P129, vivify_2822
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P129, $P127["$PACKAGE"]
    unless_null $P129, vivify_2823
    die "Contextual $*PACKAGE not found"
  vivify_2823:
  vivify_2822:
    set $P130, $P3311
    unless_null $P130, vivify_2824
    new $P130, "Undef"
  vivify_2824:
    set $P131, $P3310
    unless_null $P131, vivify_2825
    new $P131, "Undef"
  vivify_2825:
    find_lex $P132, "$past"
    unless_null $P132, vivify_2826
    new $P132, "Undef"
  vivify_2826:
    set $P133, $P3312
    unless_null $P133, vivify_2827
    new $P133, "Undef"
  vivify_2827:
    $P125."pkg_add_method"($P129, $P130, $P131, $P132, $P133)
.annotate 'line', 2322
    find_dynamic_lex $P126, "$*SCOPE"
    unless_null $P126, vivify_2828
    get_hll_global $P124, "GLOBAL"
    get_who $P125, $P124
    set $P126, $P125["$SCOPE"]
    unless_null $P126, vivify_2829
    die "Contextual $*SCOPE not found"
  vivify_2829:
  vivify_2828:
    set $S100, $P126
    iseq $I100, $S100, "our"
    if $I100, if_3318
.annotate 'line', 2325
    find_lex $P129, "$past"
    unless_null $P129, vivify_2830
    new $P129, "Undef"
  vivify_2830:
    $P130 = $P129."pirflags"()
    if $P130, if_3319
.annotate 'line', 2328
    find_lex $P131, "$past"
    unless_null $P131, vivify_2831
    new $P131, "Undef"
  vivify_2831:
    $P132 = $P131."pirflags"(":anon")
.annotate 'line', 2327
    set $P127, $P132
.annotate 'line', 2325
    goto if_3319_end
  if_3319:
.annotate 'line', 2326
    find_lex $P131, "$past"
    unless_null $P131, vivify_2832
    new $P131, "Undef"
  vivify_2832:
    find_lex $P132, "$past"
    unless_null $P132, vivify_2833
    new $P132, "Undef"
  vivify_2833:
    $P133 = $P132."pirflags"()
    set $S101, $P133
    new $P134, 'String'
    set $P134, $S101
    concat $P135, $P134, ":anon"
    $P137 = $P131."pirflags"($P135)
.annotate 'line', 2325
    set $P127, $P137
  if_3319_end:
.annotate 'line', 2324
    set $P123, $P127
.annotate 'line', 2322
    goto if_3318_end
  if_3318:
.annotate 'line', 2323
    find_dynamic_lex $P130, "$*W"
    unless_null $P130, vivify_2834
    get_hll_global $P127, "GLOBAL"
    get_who $P129, $P127
    set $P130, $P129["$W"]
    unless_null $P130, vivify_2835
    die "Contextual $*W not found"
  vivify_2835:
  vivify_2834:
    find_dynamic_lex $P133, "$*PACKAGE"
    unless_null $P133, vivify_2836
    get_hll_global $P131, "GLOBAL"
    get_who $P132, $P131
    set $P133, $P132["$PACKAGE"]
    unless_null $P133, vivify_2837
    die "Contextual $*PACKAGE not found"
  vivify_2837:
  vivify_2836:
    set $P134, $P3310
    unless_null $P134, vivify_2838
    new $P134, "Undef"
  vivify_2838:
    find_lex $P135, "$past"
    unless_null $P135, vivify_2839
    new $P135, "Undef"
  vivify_2839:
    $P136 = $P130."install_package_routine"($P133, $P134, $P135)
.annotate 'line', 2322
    set $P123, $P136
  if_3318_end:
.annotate 'line', 2307
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3324"  :anon :subid("576_1329260321.776") :outer("574_1329260321.776")
    .param pmc param_3326
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2337
    .lex "$_", param_3326
    find_lex $P124, "$_"
    unless_null $P124, vivify_2848
    new $P124, "Undef"
  vivify_2848:
    $P125 = $P124."ast"()
    find_lex $P126, "$/"
    unless_null $P126, vivify_2849
    new $P126, "Undef"
  vivify_2849:
    $P127 = $P125($P126)
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "signature" :anon :subid("577_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3329
    .param pmc param_3330
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2366
    .const 'Sub' $P3344 = "579_1329260321.776" 
    capture_lex $P3344
    .const 'Sub' $P3337 = "578_1329260321.776" 
    capture_lex $P3337
    .lex "self", param_3329
    .lex "$/", param_3330
.annotate 'line', 2367
    new $P117, "Undef"
    set $P3331, $P117
    .lex "$BLOCK", $P3331
.annotate 'line', 2368
    new $P118, "Undef"
    set $P3332, $P118
    .lex "$BLOCKINIT", $P3332
.annotate 'line', 2367
    find_dynamic_lex $P122, "$*W"
    unless_null $P122, vivify_2850
    get_hll_global $P119, "GLOBAL"
    get_who $P121, $P119
    set $P122, $P121["$W"]
    unless_null $P122, vivify_2851
    die "Contextual $*W not found"
  vivify_2851:
  vivify_2850:
    $P123 = $P122."cur_lexpad"()
    set $P3331, $P123
.annotate 'line', 2368
    new $P119, "Float"
    assign $P119, 0
    set $I100, $P119
    set $P3333, $P3331
    unless_null $P3333, vivify_2852
    $P3333 = root_new ['parrot';'ResizablePMCArray']
  vivify_2852:
    set $P121, $P3333[$I100]
    unless_null $P121, vivify_2853
    new $P121, "Undef"
  vivify_2853:
    set $P3332, $P121
.annotate 'line', 2369
    set $P3335, param_3330
    unless_null $P3335, vivify_2854
    $P3335 = root_new ['parrot';'Hash']
  vivify_2854:
    set $P119, $P3335["invocant"]
    unless_null $P119, vivify_2855
    new $P119, "Undef"
  vivify_2855:
    unless $P119, if_3334_end
    .const 'Sub' $P3337 = "578_1329260321.776" 
    capture_lex $P3337
    $P3337()
  if_3334_end:
.annotate 'line', 2378
    set $P3342, param_3330
    unless_null $P3342, vivify_2864
    $P3342 = root_new ['parrot';'Hash']
  vivify_2864:
    set $P121, $P3342["parameter"]
    unless_null $P121, vivify_2865
    new $P121, "Undef"
  vivify_2865:
    defined $I100, $P121
    unless $I100, for_undef_2866
    iter $P119, $P121
    new $P123, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P123, loop3346_handler
    push_eh $P123
  loop3346_test:
    unless $P119, loop3346_done
    shift $P122, $P119
  loop3346_redo:
    .const 'Sub' $P3344 = "579_1329260321.776" 
    capture_lex $P3344
    $P3344($P122)
  loop3346_next:
    goto loop3346_test
  loop3346_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P124, exception, 'type'
    eq $P124, .CONTROL_LOOP_NEXT, loop3346_next
    eq $P124, .CONTROL_LOOP_REDO, loop3346_redo
  loop3346_done:
    pop_eh 
  for_undef_2866:
.annotate 'line', 2366
    .return ($P119)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3336"  :anon :subid("578_1329260321.776") :outer("577_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2370
    new $P121, "Undef"
    set $P3338, $P121
    .lex "$inv", $P3338
    new $P122, "Float"
    assign $P122, 0
    set $I100, $P122
    find_lex $P3339, "$/"
    unless_null $P3339, vivify_2856
    $P3339 = root_new ['parrot';'Hash']
  vivify_2856:
    set $P3340, $P3339["invocant"]
    unless_null $P3340, vivify_2857
    $P3340 = root_new ['parrot';'ResizablePMCArray']
  vivify_2857:
    set $P123, $P3340[$I100]
    unless_null $P123, vivify_2858
    new $P123, "Undef"
  vivify_2858:
    $P124 = $P123."ast"()
    set $P3338, $P124
.annotate 'line', 2371
    find_lex $P122, "$BLOCKINIT"
    unless_null $P122, vivify_2859
    new $P122, "Undef"
  vivify_2859:
    set $P123, $P3338
    unless_null $P123, vivify_2860
    new $P123, "Undef"
  vivify_2860:
    $P122."push"($P123)
.annotate 'line', 2372
    find_lex $P122, "$BLOCKINIT"
    unless_null $P122, vivify_2861
    new $P122, "Undef"
  vivify_2861:
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Var"]
.annotate 'line', 2374
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P129, $P127, "PAST"
    get_who $P130, $P129
    set $P131, $P130["Var"]
    set $P132, $P3338
    unless_null $P132, vivify_2862
    new $P132, "Undef"
  vivify_2862:
    $P133 = $P132."name"()
    $P134 = $P131."new"("lexical" :named("scope"), $P133 :named("name"))
.annotate 'line', 2372
    $P135 = $P126."new"("self" :named("name"), "lexical" :named("scope"), 1 :named("isdecl"), 1 :named("directaccess"), $P134 :named("viviself"))
    $P122."push"($P135)
.annotate 'line', 2376
    new $P122, "Float"
    assign $P122, 1
    find_lex $P3341, "$BLOCK"
    unless_null $P3341, vivify_2863
    $P3341 = root_new ['parrot';'Hash']
    store_lex "$BLOCK", $P3341
  vivify_2863:
    set $P3341["signature_has_invocant"], $P122
.annotate 'line', 2369
    .return ($P122)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3343"  :anon :subid("579_1329260321.776") :outer("577_1329260321.776")
    .param pmc param_3345
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2378
    .lex "$_", param_3345
    find_lex $P123, "$BLOCKINIT"
    unless_null $P123, vivify_2867
    new $P123, "Undef"
  vivify_2867:
    find_lex $P124, "$_"
    unless_null $P124, vivify_2868
    new $P124, "Undef"
  vivify_2868:
    $P125 = $P124."ast"()
    $P126 = $P123."push"($P125)
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "parameter" :anon :subid("580_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3348
    .param pmc param_3349
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2381
    .lex "self", param_3348
    .lex "$/", param_3349
.annotate 'line', 2382
    new $P117, "Undef"
    set $P3350, $P117
    .lex "$quant", $P3350
.annotate 'line', 2383
    new $P118, "Undef"
    set $P3351, $P118
    .lex "$past", $P3351
.annotate 'line', 2382
    set $P3352, param_3349
    unless_null $P3352, vivify_2869
    $P3352 = root_new ['parrot';'Hash']
  vivify_2869:
    set $P119, $P3352["quant"]
    unless_null $P119, vivify_2870
    new $P119, "Undef"
  vivify_2870:
    set $P3350, $P119
.annotate 'line', 2381
    set $P119, $P3351
    unless_null $P119, vivify_2871
    new $P119, "Undef"
  vivify_2871:
.annotate 'line', 2384
    set $P3354, param_3349
    unless_null $P3354, vivify_2872
    $P3354 = root_new ['parrot';'Hash']
  vivify_2872:
    set $P119, $P3354["named_param"]
    unless_null $P119, vivify_2873
    new $P119, "Undef"
  vivify_2873:
    if $P119, if_3353
.annotate 'line', 2391
    set $P3360, param_3349
    unless_null $P3360, vivify_2874
    $P3360 = root_new ['parrot';'Hash']
  vivify_2874:
    set $P121, $P3360["param_var"]
    unless_null $P121, vivify_2875
    new $P121, "Undef"
  vivify_2875:
    $P122 = $P121."ast"()
    set $P3351, $P122
.annotate 'line', 2392
    set $P121, $P3350
    unless_null $P121, vivify_2876
    new $P121, "Undef"
  vivify_2876:
    set $S100, $P121
    iseq $I100, $S100, "*"
    if $I100, if_3361
.annotate 'line', 2396
    set $P122, $P3350
    unless_null $P122, vivify_2877
    new $P122, "Undef"
  vivify_2877:
    set $S101, $P122
    iseq $I101, $S101, "?"
    unless $I101, if_3364_end
.annotate 'line', 2397
    set $P123, $P3351
    unless_null $P123, vivify_2878
    new $P123, "Undef"
  vivify_2878:
    set $P3365, param_3349
    unless_null $P3365, vivify_2879
    $P3365 = root_new ['parrot';'Hash']
  vivify_2879:
    set $P3366, $P3365["param_var"]
    unless_null $P3366, vivify_2880
    $P3366 = root_new ['parrot';'Hash']
  vivify_2880:
    set $P124, $P3366["sigil"]
    unless_null $P124, vivify_2881
    new $P124, "Undef"
  vivify_2881:
    $P125 = "vivitype"($P124)
    $P123."viviself"($P125)
  if_3364_end:
.annotate 'line', 2396
    goto if_3361_end
  if_3361:
.annotate 'line', 2393
    set $P122, $P3351
    unless_null $P122, vivify_2882
    new $P122, "Undef"
  vivify_2882:
    $P122."slurpy"(1)
.annotate 'line', 2394
    set $P122, $P3351
    unless_null $P122, vivify_2883
    new $P122, "Undef"
  vivify_2883:
    set $P3362, param_3349
    unless_null $P3362, vivify_2884
    $P3362 = root_new ['parrot';'Hash']
  vivify_2884:
    set $P3363, $P3362["param_var"]
    unless_null $P3363, vivify_2885
    $P3363 = root_new ['parrot';'Hash']
  vivify_2885:
    set $P123, $P3363["sigil"]
    unless_null $P123, vivify_2886
    new $P123, "Undef"
  vivify_2886:
    set $S101, $P123
    iseq $I101, $S101, "%"
    $P122."named"($I101)
  if_3361_end:
.annotate 'line', 2390
    goto if_3353_end
  if_3353:
.annotate 'line', 2385
    set $P3355, param_3349
    unless_null $P3355, vivify_2887
    $P3355 = root_new ['parrot';'Hash']
  vivify_2887:
    set $P121, $P3355["named_param"]
    unless_null $P121, vivify_2888
    new $P121, "Undef"
  vivify_2888:
    $P122 = $P121."ast"()
    set $P3351, $P122
.annotate 'line', 2386
    set $P121, $P3350
    unless_null $P121, vivify_2889
    new $P121, "Undef"
  vivify_2889:
    set $S100, $P121
    isne $I100, $S100, "!"
    unless $I100, if_3356_end
.annotate 'line', 2387
    set $P122, $P3351
    unless_null $P122, vivify_2890
    new $P122, "Undef"
  vivify_2890:
    set $P3357, param_3349
    unless_null $P3357, vivify_2891
    $P3357 = root_new ['parrot';'Hash']
  vivify_2891:
    set $P3358, $P3357["named_param"]
    unless_null $P3358, vivify_2892
    $P3358 = root_new ['parrot';'Hash']
  vivify_2892:
    set $P3359, $P3358["param_var"]
    unless_null $P3359, vivify_2893
    $P3359 = root_new ['parrot';'Hash']
  vivify_2893:
    set $P123, $P3359["sigil"]
    unless_null $P123, vivify_2894
    new $P123, "Undef"
  vivify_2894:
    $P124 = "vivitype"($P123)
    $P122."viviself"($P124)
  if_3356_end:
  if_3353_end:
.annotate 'line', 2400
    set $P3368, param_3349
    unless_null $P3368, vivify_2895
    $P3368 = root_new ['parrot';'Hash']
  vivify_2895:
    set $P119, $P3368["default_value"]
    unless_null $P119, vivify_2896
    new $P119, "Undef"
  vivify_2896:
    unless $P119, if_3367_end
.annotate 'line', 2401
    set $P121, $P3350
    unless_null $P121, vivify_2897
    new $P121, "Undef"
  vivify_2897:
    set $S100, $P121
    iseq $I100, $S100, "*"
    unless $I100, if_3369_end
.annotate 'line', 2402
    set $P122, param_3349
    unless_null $P122, vivify_2898
    new $P122, "Undef"
  vivify_2898:
    $P123 = $P122."CURSOR"()
    $P123."panic"("Can't put default on slurpy parameter")
  if_3369_end:
.annotate 'line', 2404
    set $P121, $P3350
    unless_null $P121, vivify_2899
    new $P121, "Undef"
  vivify_2899:
    set $S100, $P121
    iseq $I100, $S100, "!"
    unless $I100, if_3370_end
.annotate 'line', 2405
    set $P122, param_3349
    unless_null $P122, vivify_2900
    new $P122, "Undef"
  vivify_2900:
    $P123 = $P122."CURSOR"()
    $P123."panic"("Can't put default on required parameter")
  if_3370_end:
.annotate 'line', 2407
    set $P121, $P3351
    unless_null $P121, vivify_2901
    new $P121, "Undef"
  vivify_2901:
    new $P122, "Float"
    assign $P122, 0
    set $I100, $P122
    set $P3371, param_3349
    unless_null $P3371, vivify_2902
    $P3371 = root_new ['parrot';'Hash']
  vivify_2902:
    set $P3372, $P3371["default_value"]
    unless_null $P3372, vivify_2903
    $P3372 = root_new ['parrot';'ResizablePMCArray']
  vivify_2903:
    set $P3373, $P3372[$I100]
    unless_null $P3373, vivify_2904
    $P3373 = root_new ['parrot';'Hash']
  vivify_2904:
    set $P123, $P3373["EXPR"]
    unless_null $P123, vivify_2905
    new $P123, "Undef"
  vivify_2905:
    $P124 = $P123."ast"()
    $P121."viviself"($P124)
  if_3367_end:
.annotate 'line', 2409
    set $P119, $P3351
    unless_null $P119, vivify_2906
    new $P119, "Undef"
  vivify_2906:
    $P121 = $P119."viviself"()
    if $P121, unless_3374_end
    find_dynamic_lex $P124, "$*W"
    unless_null $P124, vivify_2907
    get_hll_global $P122, "GLOBAL"
    get_who $P123, $P122
    set $P124, $P123["$W"]
    unless_null $P124, vivify_2908
    die "Contextual $*W not found"
  vivify_2908:
  vivify_2907:
    $P125 = $P124."cur_lexpad"()
    find_dynamic_lex $P129, "$*W"
    unless_null $P129, vivify_2909
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P129, $P127["$W"]
    unless_null $P129, vivify_2910
    die "Contextual $*W not found"
  vivify_2910:
  vivify_2909:
    $P130 = $P129."cur_lexpad"()
    $P131 = $P130."arity"()
    set $N100, $P131
    new $P132, 'Float'
    set $P132, $N100
    add $P133, $P132, 1
    $P125."arity"($P133)
  unless_3374_end:
.annotate 'line', 2413
    set $P3376, param_3349
    unless_null $P3376, vivify_2911
    $P3376 = root_new ['parrot';'Hash']
  vivify_2911:
    set $P119, $P3376["typename"]
    unless_null $P119, vivify_2912
    new $P119, "Undef"
  vivify_2912:
    unless $P119, if_3375_end
.annotate 'line', 2414
    set $P121, $P3351
    unless_null $P121, vivify_2913
    new $P121, "Undef"
  vivify_2913:
    new $P122, "Float"
    assign $P122, 0
    set $I100, $P122
    set $P3377, param_3349
    unless_null $P3377, vivify_2914
    $P3377 = root_new ['parrot';'Hash']
  vivify_2914:
    set $P3378, $P3377["typename"]
    unless_null $P3378, vivify_2915
    $P3378 = root_new ['parrot';'ResizablePMCArray']
  vivify_2915:
    set $P123, $P3378[$I100]
    unless_null $P123, vivify_2916
    new $P123, "Undef"
  vivify_2916:
    $P124 = $P123."ast"()
    $P121."multitype"($P124)
  if_3375_end:
.annotate 'line', 2418
    set $P3380, param_3349
    unless_null $P3380, vivify_2917
    $P3380 = root_new ['parrot';'Hash']
  vivify_2917:
    set $P119, $P3380["definedness"]
    unless_null $P119, vivify_2918
    new $P119, "Undef"
  vivify_2918:
    unless $P119, if_3379_end
.annotate 'line', 2419
    new $P121, "Float"
    assign $P121, 0
    set $I100, $P121
    set $P3381, param_3349
    unless_null $P3381, vivify_2919
    $P3381 = root_new ['parrot';'Hash']
  vivify_2919:
    set $P3382, $P3381["definedness"]
    unless_null $P3382, vivify_2920
    $P3382 = root_new ['parrot';'ResizablePMCArray']
  vivify_2920:
    set $P122, $P3382[$I100]
    unless_null $P122, vivify_2921
    new $P122, "Undef"
  vivify_2921:
    set $S100, $P122
    new $P123, 'String'
    set $P123, $S100
    set $P3383, $P3351
    unless_null $P3383, vivify_2922
    $P3383 = root_new ['parrot';'Hash']
    set $P3351, $P3383
  vivify_2922:
    set $P3383["definedness"], $P123
  if_3379_end:
.annotate 'line', 2422
    set $P119, param_3349
    set $P121, $P3351
    unless_null $P121, vivify_2923
    new $P121, "Undef"
  vivify_2923:
    $P122 = $P119."!make"($P121)
.annotate 'line', 2381
    .return ($P122)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "param_var" :anon :subid("581_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3385
    .param pmc param_3386
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2425
    .lex "self", param_3385
    .lex "$/", param_3386
.annotate 'line', 2426
    new $P117, "Undef"
    set $P3387, $P117
    .lex "$name", $P3387
.annotate 'line', 2427
    new $P118, "Undef"
    set $P3388, $P118
    .lex "$past", $P3388
.annotate 'line', 2426
    set $P119, param_3386
    unless_null $P119, vivify_2924
    new $P119, "Undef"
  vivify_2924:
    set $S100, $P119
    new $P121, 'String'
    set $P121, $S100
    set $P3387, $P121
.annotate 'line', 2427
    get_hll_global $P119, "GLOBAL"
    nqp_get_package_through_who $P121, $P119, "PAST"
    get_who $P122, $P121
    set $P123, $P122["Var"]
    set $P124, $P3387
    unless_null $P124, vivify_2925
    new $P124, "Undef"
  vivify_2925:
    set $P125, param_3386
    unless_null $P125, vivify_2926
    new $P125, "Undef"
  vivify_2926:
    $P126 = $P123."new"($P124 :named("name"), "parameter" :named("scope"), 1 :named("isdecl"), 1 :named("directaccess"), $P125 :named("node"))
    set $P3388, $P126
.annotate 'line', 2429
    find_dynamic_lex $P122, "$*W"
    unless_null $P122, vivify_2927
    get_hll_global $P119, "GLOBAL"
    get_who $P121, $P119
    set $P122, $P121["$W"]
    unless_null $P122, vivify_2928
    die "Contextual $*W not found"
  vivify_2928:
  vivify_2927:
    $P123 = $P122."cur_lexpad"()
    set $P124, $P3387
    unless_null $P124, vivify_2929
    new $P124, "Undef"
  vivify_2929:
    $P123."symbol"($P124, "lexical" :named("scope"))
.annotate 'line', 2430
    set $P119, param_3386
    set $P121, $P3388
    unless_null $P121, vivify_2930
    new $P121, "Undef"
  vivify_2930:
    $P122 = $P119."!make"($P121)
.annotate 'line', 2425
    .return ($P122)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "named_param" :anon :subid("582_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3390
    .param pmc param_3391
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2433
    .lex "self", param_3390
    .lex "$/", param_3391
.annotate 'line', 2434
    new $P117, "Undef"
    set $P3392, $P117
    .lex "$past", $P3392
    set $P3393, param_3391
    unless_null $P3393, vivify_2931
    $P3393 = root_new ['parrot';'Hash']
  vivify_2931:
    set $P118, $P3393["param_var"]
    unless_null $P118, vivify_2932
    new $P118, "Undef"
  vivify_2932:
    $P119 = $P118."ast"()
    set $P3392, $P119
.annotate 'line', 2435
    set $P118, $P3392
    unless_null $P118, vivify_2933
    new $P118, "Undef"
  vivify_2933:
    set $P3394, param_3391
    unless_null $P3394, vivify_2934
    $P3394 = root_new ['parrot';'Hash']
  vivify_2934:
    set $P3395, $P3394["param_var"]
    unless_null $P3395, vivify_2935
    $P3395 = root_new ['parrot';'Hash']
  vivify_2935:
    set $P119, $P3395["name"]
    unless_null $P119, vivify_2936
    new $P119, "Undef"
  vivify_2936:
    set $S100, $P119
    $P118."named"($S100)
.annotate 'line', 2436
    set $P118, param_3391
    set $P119, $P3392
    unless_null $P119, vivify_2937
    new $P119, "Undef"
  vivify_2937:
    $P121 = $P118."!make"($P119)
.annotate 'line', 2433
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "typename" :anon :subid("583_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3397
    .param pmc param_3398
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2439
    .const 'Sub' $P3403 = "584_1329260321.776" 
    capture_lex $P3403
    .lex "self", param_3397
    .lex "$/", param_3398
.annotate 'line', 2443
    $P3400 = root_new ['parrot';'ResizablePMCArray']
    set $P3399, $P3400
    .lex "@name", $P3399
.annotate 'line', 2444
    new $P117, "Undef"
    set $P3401, $P117
    .lex "$found", $P3401
.annotate 'line', 2443
    get_hll_global $P118, "GLOBAL"
    nqp_get_package_through_who $P119, $P118, "HLL"
    get_who $P121, $P119
    set $P122, $P121["Compiler"]
    set $P123, param_3398
    unless_null $P123, vivify_2938
    new $P123, "Undef"
  vivify_2938:
    set $S100, $P123
    $P124 = $P122."parse_name"($S100)
    set $P3399, $P124
.annotate 'line', 2444
    new $P118, "Float"
    assign $P118, 0
    set $P3401, $P118
.annotate 'line', 2445
    .const 'Sub' $P3403 = "584_1329260321.776" 
    capture_lex $P3403
    $P3403()
.annotate 'line', 2450
    set $P119, $P3401
    unless_null $P119, vivify_2945
    new $P119, "Undef"
  vivify_2945:
    unless $P119, unless_3413
    set $P118, $P119
    goto unless_3413_end
  unless_3413:
.annotate 'line', 2451
    set $P121, param_3398
    unless_null $P121, vivify_2946
    new $P121, "Undef"
  vivify_2946:
    $P122 = $P121."CURSOR"()
    new $P123, "String"
    assign $P123, "Use of undeclared type '"
    set $P124, param_3398
    unless_null $P124, vivify_2947
    new $P124, "Undef"
  vivify_2947:
    set $S100, $P124
    concat $P125, $P123, $S100
    concat $P126, $P125, "'"
    $P127 = $P122."panic"($P126)
.annotate 'line', 2450
    set $P118, $P127
  unless_3413_end:
.annotate 'line', 2439
    .return ($P118)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block3402"  :anon :subid("584_1329260321.776") :outer("583_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2445
    new $P3408, 'ExceptionHandler'
    set_label $P3408, control_3407
    $P3408."handle_types_except"(.CONTROL_ALL)
    push_eh $P3408
.annotate 'line', 2446
    new $P118, "Undef"
    set $P3404, $P118
    .lex "$sym", $P3404
    find_dynamic_lex $P122, "$*W"
    unless_null $P122, vivify_2939
    get_hll_global $P119, "GLOBAL"
    get_who $P121, $P119
    set $P122, $P121["$W"]
    unless_null $P122, vivify_2940
    die "Contextual $*W not found"
  vivify_2940:
  vivify_2939:
    find_lex $P3405, "@name"
    unless_null $P3405, vivify_2941
    $P3405 = root_new ['parrot';'ResizablePMCArray']
  vivify_2941:
    $P123 = $P122."find_sym"($P3405)
    set $P3404, $P123
.annotate 'line', 2447
    find_dynamic_lex $P119, "$/"
    find_dynamic_lex $P123, "$*W"
    unless_null $P123, vivify_2942
    get_hll_global $P121, "GLOBAL"
    get_who $P122, $P121
    set $P123, $P122["$W"]
    unless_null $P123, vivify_2943
    die "Contextual $*W not found"
  vivify_2943:
  vivify_2942:
    set $P124, $P3404
    unless_null $P124, vivify_2944
    new $P124, "Undef"
  vivify_2944:
    $P125 = $P123."get_ref"($P124)
    $P119."!make"($P125)
.annotate 'line', 2448
    new $P119, "Float"
    assign $P119, 1
    store_lex "$found", $P119
.annotate 'line', 2445
    pop_eh 
    goto skip_handler_3406
  control_3407:
    peek_exception $P3409
    .local pmc exception 
    .get_results (exception) 
    new $P3411, 'Integer'
    set $P3411, 1
    set exception["handled"], $P3411
    set $I3412, exception["handled"]
    eq $I3412, 1, handled_3410
    rethrow exception
  handled_3410:
    finalize $P3409
    .return (exception)
  skip_handler_3406:
    .return ($P119)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "trait" :anon :subid("585_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3415
    .param pmc param_3416
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2455
    .lex "self", param_3415
    .lex "$/", param_3416
.annotate 'line', 2456
    set $P117, param_3416
    set $P3417, param_3416
    unless_null $P3417, vivify_2948
    $P3417 = root_new ['parrot';'Hash']
  vivify_2948:
    set $P118, $P3417["trait_mod"]
    unless_null $P118, vivify_2949
    new $P118, "Undef"
  vivify_2949:
    $P119 = $P118."ast"()
    $P121 = $P117."!make"($P119)
.annotate 'line', 2455
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "trait_mod:sym<is>" :anon :subid("586_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3419
    .param pmc param_3420
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2459
    .const 'Sub' $P3439 = "589_1329260321.776" 
    capture_lex $P3439
    .const 'Sub' $P3424 = "587_1329260321.776" 
    capture_lex $P3424
    .lex "self", param_3419
    .lex "$/", param_3420
.annotate 'line', 2460
    set $P3422, param_3420
    unless_null $P3422, vivify_2950
    $P3422 = root_new ['parrot';'Hash']
  vivify_2950:
    set $P118, $P3422["longname"]
    unless_null $P118, vivify_2951
    new $P118, "Undef"
  vivify_2951:
    set $S100, $P118
    iseq $I100, $S100, "parrot_vtable"
    if $I100, if_3421
.annotate 'line', 2473
    set $P3437, param_3420
    unless_null $P3437, vivify_2952
    $P3437 = root_new ['parrot';'Hash']
  vivify_2952:
    set $P127, $P3437["longname"]
    unless_null $P127, vivify_2953
    new $P127, "Undef"
  vivify_2953:
    set $S101, $P127
    iseq $I101, $S101, "parrot_vtable_handler"
    if $I101, if_3436
.annotate 'line', 2484
    set $P3452, param_3420
    unless_null $P3452, vivify_2954
    $P3452 = root_new ['parrot';'Hash']
  vivify_2954:
    set $P135, $P3452["longname"]
    unless_null $P135, vivify_2955
    new $P135, "Undef"
  vivify_2955:
    set $S102, $P135
    iseq $I102, $S102, "pirflags"
    if $I102, if_3451
.annotate 'line', 2488
    set $P136, param_3420
    unless_null $P136, vivify_2956
    new $P136, "Undef"
  vivify_2956:
    $P137 = $P136."CURSOR"()
    new $P139, 'String'
    set $P139, "Trait '"
    set $P3453, param_3420
    unless_null $P3453, vivify_2957
    $P3453 = root_new ['parrot';'Hash']
  vivify_2957:
    set $P140, $P3453["longname"]
    unless_null $P140, vivify_2958
    new $P140, "Undef"
  vivify_2958:
    concat $P141, $P139, $P140
    concat $P142, $P141, "' not implemented"
    $P143 = $P137."panic"($P142)
.annotate 'line', 2487
    set $P134, $P143
.annotate 'line', 2484
    goto if_3451_end
  if_3451:
.annotate 'line', 2485
    set $P136, param_3420
    unless_null $P136, vivify_2959
    new $P136, "Undef"
  vivify_2959:
    $P137 = $P136."CURSOR"()
    $P138 = $P137."panic"("Trait 'pirflags' no longer supported; use 'is vtable'")
.annotate 'line', 2484
    set $P134, $P138
  if_3451_end:
    set $P126, $P134
.annotate 'line', 2473
    goto if_3436_end
  if_3436:
    .const 'Sub' $P3439 = "589_1329260321.776" 
    capture_lex $P3439
    $P132 = $P3439()
    set $P126, $P132
  if_3436_end:
    set $P117, $P126
.annotate 'line', 2460
    goto if_3421_end
  if_3421:
    .const 'Sub' $P3424 = "587_1329260321.776" 
    capture_lex $P3424
    $P124 = $P3424()
    set $P117, $P124
  if_3421_end:
.annotate 'line', 2459
    .return ($P117)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3438"  :anon :subid("589_1329260321.776") :outer("586_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2473
    .const 'Sub' $P3447 = "590_1329260321.776" 
    capture_lex $P3447
.annotate 'line', 2475
    new $P129, "Undef"
    set $P3440, $P129
    .lex "$cpast", $P3440
.annotate 'line', 2478
    new $P130, "Undef"
    set $P3441, $P130
    .lex "$name", $P3441
.annotate 'line', 2479
    new $P131, "Undef"
    set $P3442, $P131
    .lex "$package", $P3442
.annotate 'line', 2475
    new $P132, "Float"
    assign $P132, 0
    set $I102, $P132
    find_lex $P3443, "$/"
    unless_null $P3443, vivify_2960
    $P3443 = root_new ['parrot';'Hash']
  vivify_2960:
    set $P3444, $P3443["circumfix"]
    unless_null $P3444, vivify_2961
    $P3444 = root_new ['parrot';'ResizablePMCArray']
  vivify_2961:
    set $P133, $P3444[$I102]
    unless_null $P133, vivify_2962
    new $P133, "Undef"
  vivify_2962:
    $P134 = $P133."ast"()
    set $P3440, $P134
.annotate 'line', 2477
    get_hll_global $P132, "GLOBAL"
    nqp_get_package_through_who $P133, $P132, "PAST"
    get_who $P134, $P133
    set $P135, $P134["Val"]
    set $P136, $P3440
    unless_null $P136, vivify_2963
    new $P136, "Undef"
  vivify_2963:
    $P137 = $P135."ACCEPTS"($P136)
    if $P137, unless_3445_end
.annotate 'line', 2476
    find_lex $P138, "$/"
    unless_null $P138, vivify_2964
    new $P138, "Undef"
  vivify_2964:
    $P139 = $P138."CURSOR"()
    $P139."panic"("Trait 'parrot_vtable_handler' requires constant scalar argument")
  unless_3445_end:
.annotate 'line', 2478
    set $P132, $P3440
    unless_null $P132, vivify_2965
    new $P132, "Undef"
  vivify_2965:
    $P133 = $P132."value"()
    set $P3441, $P133
.annotate 'line', 2479
    find_dynamic_lex $P134, "$*PACKAGE"
    unless_null $P134, vivify_2966
    get_hll_global $P132, "GLOBAL"
    get_who $P133, $P132
    set $P134, $P133["$PACKAGE"]
    unless_null $P134, vivify_2967
    die "Contextual $*PACKAGE not found"
  vivify_2967:
  vivify_2966:
    set $P3442, $P134
.annotate 'line', 2480
    find_dynamic_lex $P132, "$/"
    .const 'Sub' $P3447 = "590_1329260321.776" 
    newclosure $P3450, $P3447
    $P133 = $P132."!make"($P3450)
.annotate 'line', 2473
    .return ($P133)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3446"  :anon :subid("590_1329260321.776") :outer("589_1329260321.776")
    .param pmc param_3448
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2480
    .lex "$match", param_3448
.annotate 'line', 2481
    find_dynamic_lex $P135, "$*W"
    unless_null $P135, vivify_2968
    get_hll_global $P133, "GLOBAL"
    get_who $P134, $P133
    set $P135, $P134["$W"]
    unless_null $P135, vivify_2969
    die "Contextual $*W not found"
  vivify_2969:
  vivify_2968:
    find_lex $P136, "$package"
    unless_null $P136, vivify_2970
    new $P136, "Undef"
  vivify_2970:
    find_lex $P137, "$name"
    unless_null $P137, vivify_2971
    new $P137, "Undef"
  vivify_2971:
    set $P3449, param_3448
    unless_null $P3449, vivify_2972
    $P3449 = root_new ['parrot';'Hash']
  vivify_2972:
    set $P138, $P3449["variable"]
    unless_null $P138, vivify_2973
    new $P138, "Undef"
  vivify_2973:
    set $S102, $P138
    $P139 = $P135."pkg_add_parrot_vtable_handler_mapping"($P136, $P137, $S102)
.annotate 'line', 2480
    .return ($P139)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3423"  :anon :subid("587_1329260321.776") :outer("586_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2460
    .const 'Sub' $P3433 = "588_1329260321.776" 
    capture_lex $P3433
.annotate 'line', 2462
    new $P119, "Undef"
    set $P3425, $P119
    .lex "$cpast", $P3425
.annotate 'line', 2465
    new $P121, "Undef"
    set $P3426, $P121
    .lex "$name", $P3426
.annotate 'line', 2466
    new $P122, "Undef"
    set $P3427, $P122
    .lex "$package", $P3427
.annotate 'line', 2467
    new $P123, "Undef"
    set $P3428, $P123
    .lex "$is_dispatcher", $P3428
.annotate 'line', 2462
    new $P124, "Float"
    assign $P124, 0
    set $I101, $P124
    find_lex $P3429, "$/"
    unless_null $P3429, vivify_2974
    $P3429 = root_new ['parrot';'Hash']
  vivify_2974:
    set $P3430, $P3429["circumfix"]
    unless_null $P3430, vivify_2975
    $P3430 = root_new ['parrot';'ResizablePMCArray']
  vivify_2975:
    set $P125, $P3430[$I101]
    unless_null $P125, vivify_2976
    new $P125, "Undef"
  vivify_2976:
    $P126 = $P125."ast"()
    set $P3425, $P126
.annotate 'line', 2464
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Val"]
    set $P129, $P3425
    unless_null $P129, vivify_2977
    new $P129, "Undef"
  vivify_2977:
    $P130 = $P127."ACCEPTS"($P129)
    if $P130, unless_3431_end
.annotate 'line', 2463
    find_lex $P131, "$/"
    unless_null $P131, vivify_2978
    new $P131, "Undef"
  vivify_2978:
    $P132 = $P131."CURSOR"()
    $P132."panic"("Trait 'parrot_vtable' requires constant scalar argument")
  unless_3431_end:
.annotate 'line', 2465
    set $P124, $P3425
    unless_null $P124, vivify_2979
    new $P124, "Undef"
  vivify_2979:
    $P125 = $P124."value"()
    set $P3426, $P125
.annotate 'line', 2466
    find_dynamic_lex $P126, "$*PACKAGE"
    unless_null $P126, vivify_2980
    get_hll_global $P124, "GLOBAL"
    get_who $P125, $P124
    set $P126, $P125["$PACKAGE"]
    unless_null $P126, vivify_2981
    die "Contextual $*PACKAGE not found"
  vivify_2981:
  vivify_2980:
    set $P3427, $P126
.annotate 'line', 2467
    find_dynamic_lex $P126, "$*SCOPE"
    unless_null $P126, vivify_2982
    get_hll_global $P124, "GLOBAL"
    get_who $P125, $P124
    set $P126, $P125["$SCOPE"]
    unless_null $P126, vivify_2983
    die "Contextual $*SCOPE not found"
  vivify_2983:
  vivify_2982:
    set $S101, $P126
    iseq $I101, $S101, "proto"
    new $P127, 'Integer'
    set $P127, $I101
    set $P3428, $P127
.annotate 'line', 2468
    find_dynamic_lex $P124, "$/"
    .const 'Sub' $P3433 = "588_1329260321.776" 
    newclosure $P3435, $P3433
    $P125 = $P124."!make"($P3435)
.annotate 'line', 2460
    .return ($P125)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3432"  :anon :subid("588_1329260321.776") :outer("587_1329260321.776")
    .param pmc param_3434
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2468
    .lex "$match", param_3434
.annotate 'line', 2469
    find_dynamic_lex $P127, "$*W"
    unless_null $P127, vivify_2984
    get_hll_global $P125, "GLOBAL"
    get_who $P126, $P125
    set $P127, $P126["$W"]
    unless_null $P127, vivify_2985
    die "Contextual $*W not found"
  vivify_2985:
  vivify_2984:
    find_lex $P129, "$package"
    unless_null $P129, vivify_2986
    new $P129, "Undef"
  vivify_2986:
    find_lex $P130, "$name"
    unless_null $P130, vivify_2987
    new $P130, "Undef"
  vivify_2987:
.annotate 'line', 2470
    set $P131, param_3434
    unless_null $P131, vivify_2988
    new $P131, "Undef"
  vivify_2988:
    $P132 = $P131."ast"()
    set $P133, $P132["block_past"]
    unless_null $P133, vivify_2989
    new $P133, "Undef"
  vivify_2989:
.annotate 'line', 2469
    find_lex $P134, "$is_dispatcher"
    unless_null $P134, vivify_2990
    new $P134, "Undef"
  vivify_2990:
    $P135 = $P127."pkg_add_method"($P129, "add_parrot_vtable_mapping", $P130, $P133, $P134)
.annotate 'line', 2468
    .return ($P135)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "regex_declarator" :anon :subid("591_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3457
    .param pmc param_3458
    .param pmc param_3459 :optional
    .param int has_param_3459 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2492
    .const 'Sub' $P3488 = "594_1329260321.776" 
    capture_lex $P3488
    .const 'Sub' $P3474 = "593_1329260321.776" 
    capture_lex $P3474
    .const 'Sub' $P3469 = "592_1329260321.776" 
    capture_lex $P3469
    new $P3456, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P3456, control_3455
    push_eh $P3456
    .lex "self", param_3457
    .lex "$/", param_3458
    if has_param_3459, optparam_2991
    new $P117, "Undef"
    set param_3459, $P117
  optparam_2991:
    .lex "$key", param_3459
.annotate 'line', 2493
    $P3461 = root_new ['parrot';'ResizablePMCArray']
    set $P3460, $P3461
    .lex "@MODIFIERS", $P3460
.annotate 'line', 2494
    new $P118, "Undef"
    set $P3462, $P118
    .lex "$name", $P3462
.annotate 'line', 2495
    new $P119, "Undef"
    set $P3463, $P119
    .lex "$past", $P3463
.annotate 'line', 2493
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "Regex"
    nqp_get_package_through_who $P123, $P122, "P6Regex"
    nqp_get_package_through_who $P124, $P123, "Actions"
    get_who $P125, $P124
    set $P3464, $P125["@MODIFIERS"]
    unless_null $P3464, vivify_2992
    $P3464 = root_new ['parrot';'ResizablePMCArray']
  vivify_2992:
    set $P3460, $P3464
.annotate 'line', 2494
    set $P3465, param_3458
    unless_null $P3465, vivify_2993
    $P3465 = root_new ['parrot';'Hash']
  vivify_2993:
    set $P121, $P3465["deflongname"]
    unless_null $P121, vivify_2994
    new $P121, "Undef"
  vivify_2994:
    $P122 = $P121."ast"()
    set $S100, $P122
    new $P123, 'String'
    set $P123, $S100
    set $P3462, $P123
.annotate 'line', 2492
    set $P121, $P3463
    unless_null $P121, vivify_2995
    new $P121, "Undef"
  vivify_2995:
.annotate 'line', 2496
    set $P3467, param_3458
    unless_null $P3467, vivify_2996
    $P3467 = root_new ['parrot';'Hash']
  vivify_2996:
    set $P121, $P3467["proto"]
    unless_null $P121, vivify_2997
    new $P121, "Undef"
  vivify_2997:
    if $P121, if_3466
.annotate 'line', 2526
    set $P122, param_3459
    unless_null $P122, vivify_2998
    new $P122, "Undef"
  vivify_2998:
    set $S100, $P122
    iseq $I100, $S100, "open"
    if $I100, if_3472
.annotate 'line', 2536
    .const 'Sub' $P3488 = "594_1329260321.776" 
    capture_lex $P3488
    $P3488()
    goto if_3472_end
  if_3472:
.annotate 'line', 2526
    .const 'Sub' $P3474 = "593_1329260321.776" 
    capture_lex $P3474
    $P3474()
  if_3472_end:
    goto if_3466_end
  if_3466:
.annotate 'line', 2498
    get_hll_global $P122, "GLOBAL"
    nqp_get_package_through_who $P123, $P122, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Stmts"]
.annotate 'line', 2499
    get_hll_global $P126, "GLOBAL"
    nqp_get_package_through_who $P127, $P126, "PAST"
    get_who $P129, $P127
    set $P130, $P129["Block"]
    set $P131, $P3462
    unless_null $P131, vivify_3049
    new $P131, "Undef"
  vivify_3049:
.annotate 'line', 2500
    get_hll_global $P132, "GLOBAL"
    nqp_get_package_through_who $P133, $P132, "PAST"
    get_who $P134, $P133
    set $P135, $P134["Op"]
.annotate 'line', 2501
    get_hll_global $P136, "GLOBAL"
    nqp_get_package_through_who $P137, $P136, "PAST"
    get_who $P138, $P137
    set $P139, $P138["Var"]
    $P140 = $P139."new"("self" :named("name"), "parameter" :named("scope"))
    set $P141, $P3462
    unless_null $P141, vivify_3050
    new $P141, "Undef"
  vivify_3050:
    $P142 = $P135."new"($P140, $P141, "!protoregex" :named("name"), "callmethod" :named("pasttype"))
.annotate 'line', 2500
    set $P143, param_3458
    unless_null $P143, vivify_3051
    new $P143, "Undef"
  vivify_3051:
    $P144 = $P130."new"($P142, $P131 :named("name"), "declaration" :named("blocktype"), 0 :named("lexical"), $P143 :named("node"))
.annotate 'line', 2510
    get_hll_global $P145, "GLOBAL"
    nqp_get_package_through_who $P146, $P145, "PAST"
    get_who $P147, $P146
    set $P148, $P147["Block"]
    new $P150, "String"
    assign $P150, "!PREFIX__"
    set $P151, $P3462
    unless_null $P151, vivify_3052
    new $P151, "Undef"
  vivify_3052:
    concat $P152, $P150, $P151
.annotate 'line', 2511
    get_hll_global $P153, "GLOBAL"
    nqp_get_package_through_who $P154, $P153, "PAST"
    get_who $P155, $P154
    set $P156, $P155["Op"]
.annotate 'line', 2512
    get_hll_global $P157, "GLOBAL"
    nqp_get_package_through_who $P158, $P157, "PAST"
    get_who $P159, $P158
    set $P160, $P159["Var"]
    $P161 = $P160."new"("self" :named("name"), "parameter" :named("scope"))
    set $P162, $P3462
    unless_null $P162, vivify_3053
    new $P162, "Undef"
  vivify_3053:
    $P163 = $P156."new"($P161, $P162, "!PREFIX__!protoregex" :named("name"), "callmethod" :named("pasttype"))
.annotate 'line', 2511
    set $P164, param_3458
    unless_null $P164, vivify_3054
    new $P164, "Undef"
  vivify_3054:
    $P165 = $P148."new"($P163, $P152 :named("name"), "declaration" :named("blocktype"), 0 :named("lexical"), $P164 :named("node"))
.annotate 'line', 2510
    $P166 = $P125."new"($P144, $P165)
.annotate 'line', 2498
    set $P3463, $P166
.annotate 'line', 2522
    set $P123, $P3463
    unless_null $P123, vivify_3055
    new $P123, "Undef"
  vivify_3055:
    $P124 = $P123."list"()
    defined $I100, $P124
    unless $I100, for_undef_3056
    iter $P122, $P124
    new $P126, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P126, loop3471_handler
    push_eh $P126
  loop3471_test:
    unless $P122, loop3471_done
    shift $P125, $P122
  loop3471_redo:
    .const 'Sub' $P3469 = "592_1329260321.776" 
    capture_lex $P3469
    $P3469($P125)
  loop3471_next:
    goto loop3471_test
  loop3471_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P127, exception, 'type'
    eq $P127, .CONTROL_LOOP_NEXT, loop3471_next
    eq $P127, .CONTROL_LOOP_REDO, loop3471_redo
  loop3471_done:
    pop_eh 
  for_undef_3056:
  if_3466_end:
.annotate 'line', 2567
    set $P121, param_3458
    set $P122, $P3463
    unless_null $P122, vivify_3063
    new $P122, "Undef"
  vivify_3063:
    $P123 = $P121."!make"($P122)
.annotate 'line', 2492
    .return ($P123)
  control_3455:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P121, exception, "payload"
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3487"  :anon :subid("594_1329260321.776") :outer("591_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2536
    .const 'Sub' $P3495 = "595_1329260321.776" 
    capture_lex $P3495
.annotate 'line', 2537
    new $P123, "Undef"
    set $P3489, $P123
    .lex "$regex", $P3489
.annotate 'line', 2540
    new $P124, "Undef"
    set $P3490, $P124
    .lex "$prefix_meth", $P3490
.annotate 'line', 2538
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "Regex"
    nqp_get_package_through_who $P127, $P126, "P6Regex"
    nqp_get_package_through_who $P129, $P127, "Actions"
    get_who $P130, $P129
    set $P131, $P130["buildsub"]
    find_lex $P3491, "$/"
    unless_null $P3491, vivify_2999
    $P3491 = root_new ['parrot';'Hash']
  vivify_2999:
    set $P132, $P3491["p6regex"]
    unless_null $P132, vivify_3000
    new $P132, "Undef"
  vivify_3000:
    $P133 = $P132."ast"()
    find_dynamic_lex $P136, "$*W"
    unless_null $P136, vivify_3001
    get_hll_global $P134, "GLOBAL"
    get_who $P135, $P134
    set $P136, $P135["$W"]
    unless_null $P136, vivify_3002
    die "Contextual $*W not found"
  vivify_3002:
  vivify_3001:
    $P137 = $P136."pop_lexpad"()
    $P138 = $P131($P133, $P137)
    set $P3489, $P138
.annotate 'line', 2539
    set $P125, $P3489
    unless_null $P125, vivify_3003
    new $P125, "Undef"
  vivify_3003:
    find_lex $P126, "$name"
    unless_null $P126, vivify_3004
    new $P126, "Undef"
  vivify_3004:
    $P125."name"($P126)
.annotate 'line', 2536
    set $P125, $P3490
    unless_null $P125, vivify_3005
    new $P125, "Undef"
  vivify_3005:
.annotate 'line', 2542
    find_dynamic_lex $P129, "$*PKGDECL"
    unless_null $P129, vivify_3006
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P129, $P127["$PKGDECL"]
    unless_null $P129, vivify_3007
    die "Contextual $*PKGDECL not found"
  vivify_3007:
  vivify_3006:
    if $P129, if_3493
    set $P125, $P129
    goto if_3493_end
  if_3493:
    find_dynamic_lex $P132, "$*PACKAGE"
    unless_null $P132, vivify_3008
    get_hll_global $P130, "GLOBAL"
    get_who $P131, $P130
    set $P132, $P131["$PACKAGE"]
    unless_null $P132, vivify_3009
    die "Contextual $*PACKAGE not found"
  vivify_3009:
  vivify_3008:
    get_how $P133, $P132
    can $I101, $P133, "add_method"
    new $P125, 'Integer'
    set $P125, $I101
  if_3493_end:
    unless $P125, if_3492_end
    .const 'Sub' $P3495 = "595_1329260321.776" 
    capture_lex $P3495
    $P3495()
  if_3492_end:
.annotate 'line', 2557
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P129, $P127["Op"]
.annotate 'line', 2559
    new $P130, "ResizablePMCArray"
    push $P130, "Regex"
    push $P130, "Method"
    find_lex $P131, "$/"
    unless_null $P131, vivify_3026
    new $P131, "Undef"
  vivify_3026:
    $P132 = "lexical_package_lookup"($P130, $P131)
    set $P133, $P3489
    unless_null $P133, vivify_3027
    new $P133, "Undef"
  vivify_3027:
    $P134 = $P129."new"($P132, $P133, "callmethod" :named("pasttype"), "new" :named("name"))
.annotate 'line', 2557
    store_lex "$past", $P134
.annotate 'line', 2562
    set $P126, $P3490
    unless_null $P126, vivify_3028
    new $P126, "Undef"
  vivify_3028:
    if $P126, if_3500
    set $P135, $P3489
    unless_null $P135, vivify_3029
    new $P135, "Undef"
  vivify_3029:
    set $P125, $P135
    goto if_3500_end
  if_3500:
.annotate 'line', 2563
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P129, $P127, "PAST"
    get_who $P130, $P129
    set $P131, $P130["Stmts"]
    set $P132, $P3489
    unless_null $P132, vivify_3030
    new $P132, "Undef"
  vivify_3030:
    set $P133, $P3490
    unless_null $P133, vivify_3031
    new $P133, "Undef"
  vivify_3031:
    $P134 = $P131."new"($P132, $P133)
    set $P125, $P134
  if_3500_end:
.annotate 'line', 2562
    find_lex $P3501, "$past"
    unless_null $P3501, vivify_3032
    $P3501 = root_new ['parrot';'Hash']
    store_lex "$past", $P3501
  vivify_3032:
    set $P3501["sink"], $P125
.annotate 'line', 2565
    find_lex $P3502, "@MODIFIERS"
    unless_null $P3502, vivify_3033
    $P3502 = root_new ['parrot';'ResizablePMCArray']
  vivify_3033:
    $P125 = $P3502."shift"()
.annotate 'line', 2536
    .return ($P125)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3494"  :anon :subid("595_1329260321.776") :outer("594_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2547
    $P3497 = root_new ['parrot';'ResizablePMCArray']
    set $P3496, $P3497
    .lex "@prefixes", $P3496
.annotate 'line', 2544
    find_dynamic_lex $P136, "$*W"
    unless_null $P136, vivify_3010
    get_hll_global $P134, "GLOBAL"
    get_who $P135, $P134
    set $P136, $P135["$W"]
    unless_null $P136, vivify_3011
    die "Contextual $*W not found"
  vivify_3011:
  vivify_3010:
    find_dynamic_lex $P139, "$*PACKAGE"
    unless_null $P139, vivify_3012
    get_hll_global $P137, "GLOBAL"
    get_who $P138, $P137
    set $P139, $P138["$PACKAGE"]
    unless_null $P139, vivify_3013
    die "Contextual $*PACKAGE not found"
  vivify_3013:
  vivify_3012:
    find_lex $P140, "$name"
    unless_null $P140, vivify_3014
    new $P140, "Undef"
  vivify_3014:
    find_lex $P141, "$regex"
    unless_null $P141, vivify_3015
    new $P141, "Undef"
  vivify_3015:
    $P136."pkg_add_method"($P139, "add_method", $P140, $P141, 0)
.annotate 'line', 2547
    find_lex $P3498, "$/"
    unless_null $P3498, vivify_3016
    $P3498 = root_new ['parrot';'Hash']
  vivify_3016:
    set $P134, $P3498["p6regex"]
    unless_null $P134, vivify_3017
    new $P134, "Undef"
  vivify_3017:
    $P135 = $P134."ast"()
    $P136 = $P135."prefix_list"()
    set $P3496, $P136
.annotate 'line', 2548
    get_hll_global $P134, "GLOBAL"
    nqp_get_package_through_who $P135, $P134, "PAST"
    get_who $P136, $P135
    set $P137, $P136["Block"]
.annotate 'line', 2549
    new $P138, "String"
    assign $P138, "!PREFIX__"
    find_lex $P139, "$name"
    unless_null $P139, vivify_3018
    new $P139, "Undef"
  vivify_3018:
    concat $P140, $P138, $P139
.annotate 'line', 2550
    get_hll_global $P141, "GLOBAL"
    nqp_get_package_through_who $P142, $P141, "PAST"
    get_who $P143, $P142
    set $P144, $P143["Op"]
    set $P3499, $P3496
    unless_null $P3499, vivify_3019
    $P3499 = root_new ['parrot';'ResizablePMCArray']
  vivify_3019:
    $P145 = $P144."new"($P3499 :flat, "list" :named("pasttype"))
    $P146 = $P137."new"($P145, $P140 :named("name"), "method" :named("blocktype"))
.annotate 'line', 2548
    store_lex "$prefix_meth", $P146
.annotate 'line', 2552
    find_dynamic_lex $P136, "$*W"
    unless_null $P136, vivify_3020
    get_hll_global $P134, "GLOBAL"
    get_who $P135, $P134
    set $P136, $P135["$W"]
    unless_null $P136, vivify_3021
    die "Contextual $*W not found"
  vivify_3021:
  vivify_3020:
    find_dynamic_lex $P139, "$*PACKAGE"
    unless_null $P139, vivify_3022
    get_hll_global $P137, "GLOBAL"
    get_who $P138, $P137
    set $P139, $P138["$PACKAGE"]
    unless_null $P139, vivify_3023
    die "Contextual $*PACKAGE not found"
  vivify_3023:
  vivify_3022:
    find_lex $P140, "$prefix_meth"
    unless_null $P140, vivify_3024
    new $P140, "Undef"
  vivify_3024:
    $P141 = $P140."name"()
    find_lex $P142, "$prefix_meth"
    unless_null $P142, vivify_3025
    new $P142, "Undef"
  vivify_3025:
    $P143 = $P136."pkg_add_method"($P139, "add_method", $P141, $P142, 0)
.annotate 'line', 2542
    .return ($P143)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block3473"  :anon :subid("593_1329260321.776") :outer("591_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2527
    $P3476 = root_new ['parrot';'Hash']
    set $P3475, $P3476
    .lex "%h", $P3475
.annotate 'line', 2526
    set $P3477, $P3475
    unless_null $P3477, vivify_3034
    $P3477 = root_new ['parrot';'Hash']
  vivify_3034:
.annotate 'line', 2528
    find_lex $P3479, "$/"
    unless_null $P3479, vivify_3035
    $P3479 = root_new ['parrot';'Hash']
  vivify_3035:
    set $P123, $P3479["sym"]
    unless_null $P123, vivify_3036
    new $P123, "Undef"
  vivify_3036:
    set $S101, $P123
    iseq $I101, $S101, "token"
    unless $I101, if_3478_end
    new $P124, "Float"
    assign $P124, 1
    set $P3480, $P3475
    unless_null $P3480, vivify_3037
    $P3480 = root_new ['parrot';'Hash']
    set $P3475, $P3480
  vivify_3037:
    set $P3480["r"], $P124
  if_3478_end:
.annotate 'line', 2529
    find_lex $P3482, "$/"
    unless_null $P3482, vivify_3038
    $P3482 = root_new ['parrot';'Hash']
  vivify_3038:
    set $P123, $P3482["sym"]
    unless_null $P123, vivify_3039
    new $P123, "Undef"
  vivify_3039:
    set $S101, $P123
    iseq $I101, $S101, "rule"
    unless $I101, if_3481_end
    new $P124, "Float"
    assign $P124, 1
    set $P3483, $P3475
    unless_null $P3483, vivify_3040
    $P3483 = root_new ['parrot';'Hash']
    set $P3475, $P3483
  vivify_3040:
    set $P3483["r"], $P124
    new $P124, "Float"
    assign $P124, 1
    set $P3484, $P3475
    unless_null $P3484, vivify_3041
    $P3484 = root_new ['parrot';'Hash']
    set $P3475, $P3484
  vivify_3041:
    set $P3484["s"], $P124
  if_3481_end:
.annotate 'line', 2530
    find_lex $P3485, "@MODIFIERS"
    unless_null $P3485, vivify_3042
    $P3485 = root_new ['parrot';'ResizablePMCArray']
  vivify_3042:
    set $P3486, $P3475
    unless_null $P3486, vivify_3043
    $P3486 = root_new ['parrot';'Hash']
  vivify_3043:
    $P3485."unshift"($P3486)
.annotate 'line', 2531
    find_lex $P123, "$name"
    unless_null $P123, vivify_3044
    new $P123, "Undef"
  vivify_3044:
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "Regex"
    nqp_get_package_through_who $P126, $P125, "P6Regex"
    nqp_get_package_through_who $P127, $P126, "Actions"
    get_who $P129, $P127
    set $P129["$REGEXNAME"], $P123
.annotate 'line', 2532
    find_dynamic_lex $P125, "$*W"
    unless_null $P125, vivify_3045
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$W"]
    unless_null $P125, vivify_3046
    die "Contextual $*W not found"
  vivify_3046:
  vivify_3045:
    $P126 = $P125."cur_lexpad"()
    $P126."symbol"(unicode:"$\x{a2}", "lexical" :named("scope"))
.annotate 'line', 2533
    find_dynamic_lex $P125, "$*W"
    unless_null $P125, vivify_3047
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$W"]
    unless_null $P125, vivify_3048
    die "Contextual $*W not found"
  vivify_3048:
  vivify_3047:
    $P126 = $P125."cur_lexpad"()
    $P126."symbol"("$/", "lexical" :named("scope"))
.annotate 'line', 2534
    new $P123, "Exception"
    set $P123['type'], .CONTROL_RETURN
    new $P124, "Float"
    assign $P124, 0
    setattribute $P123, 'payload', $P124
    throw $P123
.annotate 'line', 2526
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3468"  :anon :subid("592_1329260321.776") :outer("591_1329260321.776")
    .param pmc param_3470
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2522
    .lex "$_", param_3470
.annotate 'line', 2523
    find_dynamic_lex $P129, "$*W"
    unless_null $P129, vivify_3057
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P129, $P127["$W"]
    unless_null $P129, vivify_3058
    die "Contextual $*W not found"
  vivify_3058:
  vivify_3057:
    find_dynamic_lex $P132, "$*PACKAGE"
    unless_null $P132, vivify_3059
    get_hll_global $P130, "GLOBAL"
    get_who $P131, $P130
    set $P132, $P131["$PACKAGE"]
    unless_null $P132, vivify_3060
    die "Contextual $*PACKAGE not found"
  vivify_3060:
  vivify_3059:
    find_lex $P133, "$_"
    unless_null $P133, vivify_3061
    new $P133, "Undef"
  vivify_3061:
    $P134 = $P133."name"()
    find_lex $P135, "$_"
    unless_null $P135, vivify_3062
    new $P135, "Undef"
  vivify_3062:
    $P136 = $P129."pkg_add_method"($P132, "add_method", $P134, $P135, 0)
.annotate 'line', 2522
    .return ($P136)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "dotty" :anon :subid("596_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3504
    .param pmc param_3505
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2571
    .lex "self", param_3504
    .lex "$/", param_3505
.annotate 'line', 2572
    new $P117, "Undef"
    set $P3506, $P117
    .lex "$past", $P3506
    set $P3508, param_3505
    unless_null $P3508, vivify_3064
    $P3508 = root_new ['parrot';'Hash']
  vivify_3064:
    set $P119, $P3508["args"]
    unless_null $P119, vivify_3065
    new $P119, "Undef"
  vivify_3065:
    if $P119, if_3507
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Op"]
    set $P129, param_3505
    unless_null $P129, vivify_3066
    new $P129, "Undef"
  vivify_3066:
    $P130 = $P127."new"($P129 :named("node"))
    set $P118, $P130
    goto if_3507_end
  if_3507:
    new $P121, "Float"
    assign $P121, 0
    set $I100, $P121
    set $P3509, param_3505
    unless_null $P3509, vivify_3067
    $P3509 = root_new ['parrot';'Hash']
  vivify_3067:
    set $P3510, $P3509["args"]
    unless_null $P3510, vivify_3068
    $P3510 = root_new ['parrot';'ResizablePMCArray']
  vivify_3068:
    set $P122, $P3510[$I100]
    unless_null $P122, vivify_3069
    new $P122, "Undef"
  vivify_3069:
    $P123 = $P122."ast"()
    set $P118, $P123
  if_3507_end:
    set $P3506, $P118
.annotate 'line', 2573
    set $P3512, param_3505
    unless_null $P3512, vivify_3070
    $P3512 = root_new ['parrot';'Hash']
  vivify_3070:
    set $P118, $P3512["quote"]
    unless_null $P118, vivify_3071
    new $P118, "Undef"
  vivify_3071:
    if $P118, if_3511
.annotate 'line', 2577
    set $P3515, param_3505
    unless_null $P3515, vivify_3072
    $P3515 = root_new ['parrot';'Hash']
  vivify_3072:
    set $P119, $P3515["longname"]
    unless_null $P119, vivify_3073
    new $P119, "Undef"
  vivify_3073:
    set $S100, $P119
    iseq $I100, $S100, "HOW"
    if $I100, if_3514
.annotate 'line', 2580
    set $P3517, param_3505
    unless_null $P3517, vivify_3074
    $P3517 = root_new ['parrot';'Hash']
  vivify_3074:
    set $P121, $P3517["longname"]
    unless_null $P121, vivify_3075
    new $P121, "Undef"
  vivify_3075:
    set $S101, $P121
    iseq $I101, $S101, "WHAT"
    if $I101, if_3516
.annotate 'line', 2583
    set $P3519, param_3505
    unless_null $P3519, vivify_3076
    $P3519 = root_new ['parrot';'Hash']
  vivify_3076:
    set $P122, $P3519["longname"]
    unless_null $P122, vivify_3077
    new $P122, "Undef"
  vivify_3077:
    set $S102, $P122
    iseq $I102, $S102, "WHO"
    if $I102, if_3518
.annotate 'line', 2586
    set $P3521, param_3505
    unless_null $P3521, vivify_3078
    $P3521 = root_new ['parrot';'Hash']
  vivify_3078:
    set $P123, $P3521["longname"]
    unless_null $P123, vivify_3079
    new $P123, "Undef"
  vivify_3079:
    set $S103, $P123
    iseq $I103, $S103, "REPR"
    if $I103, if_3520
.annotate 'line', 2590
    set $P124, $P3506
    unless_null $P124, vivify_3080
    new $P124, "Undef"
  vivify_3080:
    set $P3522, param_3505
    unless_null $P3522, vivify_3081
    $P3522 = root_new ['parrot';'Hash']
  vivify_3081:
    set $P125, $P3522["longname"]
    unless_null $P125, vivify_3082
    new $P125, "Undef"
  vivify_3082:
    set $S104, $P125
    $P124."name"($S104)
.annotate 'line', 2591
    set $P124, $P3506
    unless_null $P124, vivify_3083
    new $P124, "Undef"
  vivify_3083:
    $P124."pasttype"("callmethod")
.annotate 'line', 2589
    goto if_3520_end
  if_3520:
.annotate 'line', 2587
    set $P124, $P3506
    unless_null $P124, vivify_3084
    new $P124, "Undef"
  vivify_3084:
    $P124."pirop"("repr_name SP")
  if_3520_end:
.annotate 'line', 2586
    goto if_3518_end
  if_3518:
.annotate 'line', 2584
    set $P123, $P3506
    unless_null $P123, vivify_3085
    new $P123, "Undef"
  vivify_3085:
    $P123."pirop"("get_who PP")
  if_3518_end:
.annotate 'line', 2583
    goto if_3516_end
  if_3516:
.annotate 'line', 2581
    set $P122, $P3506
    unless_null $P122, vivify_3086
    new $P122, "Undef"
  vivify_3086:
    $P122."pirop"("get_what PP")
  if_3516_end:
.annotate 'line', 2580
    goto if_3514_end
  if_3514:
.annotate 'line', 2578
    set $P121, $P3506
    unless_null $P121, vivify_3087
    new $P121, "Undef"
  vivify_3087:
    $P121."pirop"("get_how PP")
  if_3514_end:
.annotate 'line', 2577
    goto if_3511_end
  if_3511:
.annotate 'line', 2574
    set $P119, $P3506
    unless_null $P119, vivify_3088
    new $P119, "Undef"
  vivify_3088:
    set $P3513, param_3505
    unless_null $P3513, vivify_3089
    $P3513 = root_new ['parrot';'Hash']
  vivify_3089:
    set $P121, $P3513["quote"]
    unless_null $P121, vivify_3090
    new $P121, "Undef"
  vivify_3090:
    $P122 = $P121."ast"()
    $P119."name"($P122)
.annotate 'line', 2575
    set $P119, $P3506
    unless_null $P119, vivify_3091
    new $P119, "Undef"
  vivify_3091:
    $P119."pasttype"("callmethod")
  if_3511_end:
.annotate 'line', 2593
    set $P118, param_3505
    set $P119, $P3506
    unless_null $P119, vivify_3092
    new $P119, "Undef"
  vivify_3092:
    $P121 = $P118."!make"($P119)
.annotate 'line', 2571
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<self>" :anon :subid("597_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3524
    .param pmc param_3525
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2598
    .lex "self", param_3524
    .lex "$/", param_3525
.annotate 'line', 2599
    set $P117, param_3525
    get_hll_global $P118, "GLOBAL"
    nqp_get_package_through_who $P119, $P118, "PAST"
    get_who $P121, $P119
    set $P122, $P121["Op"]
.annotate 'line', 2600
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Var"]
    $P127 = $P126."new"("self" :named("name"))
    $P129 = $P122."new"($P127, "nqp_decontainerize PP" :named("pirop"))
.annotate 'line', 2599
    $P130 = $P117."!make"($P129)
.annotate 'line', 2598
    .return ($P130)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<identifier>" :anon :subid("598_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3527
    .param pmc param_3528
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2603
    .lex "self", param_3527
    .lex "$/", param_3528
.annotate 'line', 2604
    new $P117, "Undef"
    set $P3529, $P117
    .lex "$past", $P3529
    set $P3530, param_3528
    unless_null $P3530, vivify_3093
    $P3530 = root_new ['parrot';'Hash']
  vivify_3093:
    set $P118, $P3530["args"]
    unless_null $P118, vivify_3094
    new $P118, "Undef"
  vivify_3094:
    $P119 = $P118."ast"()
    set $P3529, $P119
.annotate 'line', 2605
    set $P118, $P3529
    unless_null $P118, vivify_3095
    new $P118, "Undef"
  vivify_3095:
    set $P3531, param_3528
    unless_null $P3531, vivify_3096
    $P3531 = root_new ['parrot';'Hash']
  vivify_3096:
    set $P119, $P3531["deflongname"]
    unless_null $P119, vivify_3097
    new $P119, "Undef"
  vivify_3097:
    set $S100, $P119
    $P118."name"($S100)
.annotate 'line', 2606
    set $P118, param_3528
    set $P119, $P3529
    unless_null $P119, vivify_3098
    new $P119, "Undef"
  vivify_3098:
    $P121 = $P118."!make"($P119)
.annotate 'line', 2603
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<name>" :anon :subid("599_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3533
    .param pmc param_3534
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2609
    .const 'Sub' $P3541 = "600_1329260321.776" 
    capture_lex $P3541
    .lex "self", param_3533
    .lex "$/", param_3534
.annotate 'line', 2611
    new $P117, "Undef"
    set $P3535, $P117
    .lex "$var", $P3535
.annotate 'line', 2621
    new $P118, "Undef"
    set $P3536, $P118
    .lex "$past", $P3536
.annotate 'line', 2609
    set $P119, $P3535
    unless_null $P119, vivify_3099
    new $P119, "Undef"
  vivify_3099:
.annotate 'line', 2612
    find_dynamic_lex $P122, "$*W"
    unless_null $P122, vivify_3100
    get_hll_global $P119, "GLOBAL"
    get_who $P121, $P119
    set $P122, $P121["$W"]
    unless_null $P122, vivify_3101
    die "Contextual $*W not found"
  vivify_3101:
  vivify_3100:
    set $P3538, param_3534
    unless_null $P3538, vivify_3102
    $P3538 = root_new ['parrot';'Hash']
  vivify_3102:
    set $P123, $P3538["name"]
    unless_null $P123, vivify_3103
    new $P123, "Undef"
  vivify_3103:
    set $S100, $P123
    $P124 = $P122."is_lexical"($S100)
    if $P124, if_3537
.annotate 'line', 2615
    .const 'Sub' $P3541 = "600_1329260321.776" 
    capture_lex $P3541
    $P3541()
    goto if_3537_end
  if_3537:
.annotate 'line', 2613
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P129, $P127["Var"]
    set $P3539, param_3534
    unless_null $P3539, vivify_3109
    $P3539 = root_new ['parrot';'Hash']
  vivify_3109:
    set $P130, $P3539["name"]
    unless_null $P130, vivify_3110
    new $P130, "Undef"
  vivify_3110:
    set $S101, $P130
    $P131 = $P129."new"($S101 :named("name"), "lexical" :named("scope"))
    set $P3535, $P131
  if_3537_end:
.annotate 'line', 2621
    set $P119, $P3535
    unless_null $P119, vivify_3111
    new $P119, "Undef"
  vivify_3111:
    set $P3536, $P119
.annotate 'line', 2622
    set $P3548, param_3534
    unless_null $P3548, vivify_3112
    $P3548 = root_new ['parrot';'Hash']
  vivify_3112:
    set $P119, $P3548["args"]
    unless_null $P119, vivify_3113
    new $P119, "Undef"
  vivify_3113:
    unless $P119, if_3547_end
.annotate 'line', 2623
    new $P121, "Float"
    assign $P121, 0
    set $I100, $P121
    set $P3549, param_3534
    unless_null $P3549, vivify_3114
    $P3549 = root_new ['parrot';'Hash']
  vivify_3114:
    set $P3550, $P3549["args"]
    unless_null $P3550, vivify_3115
    $P3550 = root_new ['parrot';'ResizablePMCArray']
  vivify_3115:
    set $P122, $P3550[$I100]
    unless_null $P122, vivify_3116
    new $P122, "Undef"
  vivify_3116:
    $P123 = $P122."ast"()
    set $P3536, $P123
.annotate 'line', 2624
    set $P121, $P3536
    unless_null $P121, vivify_3117
    new $P121, "Undef"
  vivify_3117:
    set $P122, $P3535
    unless_null $P122, vivify_3118
    new $P122, "Undef"
  vivify_3118:
    $P121."unshift"($P122)
  if_3547_end:
.annotate 'line', 2626
    set $P119, param_3534
    set $P121, $P3536
    unless_null $P121, vivify_3119
    new $P121, "Undef"
  vivify_3119:
    $P122 = $P119."!make"($P121)
.annotate 'line', 2609
    .return ($P122)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3540"  :anon :subid("600_1329260321.776") :outer("599_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2616
    $P3543 = root_new ['parrot';'ResizablePMCArray']
    set $P3542, $P3543
    .lex "@ns", $P3542
    find_lex $P3544, "$/"
    unless_null $P3544, vivify_3104
    $P3544 = root_new ['parrot';'Hash']
  vivify_3104:
    set $P3545, $P3544["name"]
    unless_null $P3545, vivify_3105
    $P3545 = root_new ['parrot';'Hash']
  vivify_3105:
    set $P125, $P3545["identifier"]
    unless_null $P125, vivify_3106
    new $P125, "Undef"
  vivify_3106:
    clone $P126, $P125
    set $P3542, $P126
.annotate 'line', 2617
    set $P3546, $P3542
    unless_null $P3546, vivify_3107
    $P3546 = root_new ['parrot';'ResizablePMCArray']
  vivify_3107:
    find_lex $P125, "$/"
    unless_null $P125, vivify_3108
    new $P125, "Undef"
  vivify_3108:
    $P126 = "lexical_package_lookup"($P3546, $P125)
    store_lex "$var", $P126
.annotate 'line', 2615
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<pir::op>" :anon :subid("601_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3552
    .param pmc param_3553
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2629
    .lex "self", param_3552
    .lex "$/", param_3553
.annotate 'line', 2630
    new $P117, "Undef"
    set $P3554, $P117
    .lex "$past", $P3554
.annotate 'line', 2631
    new $P118, "Undef"
    set $P3555, $P118
    .lex "$pirop", $P3555
.annotate 'line', 2630
    set $P3557, param_3553
    unless_null $P3557, vivify_3120
    $P3557 = root_new ['parrot';'Hash']
  vivify_3120:
    set $P121, $P3557["args"]
    unless_null $P121, vivify_3121
    new $P121, "Undef"
  vivify_3121:
    if $P121, if_3556
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P129, $P127["Op"]
    set $P130, param_3553
    unless_null $P130, vivify_3122
    new $P130, "Undef"
  vivify_3122:
    $P131 = $P129."new"($P130 :named("node"))
    set $P119, $P131
    goto if_3556_end
  if_3556:
    new $P122, "Float"
    assign $P122, 0
    set $I100, $P122
    set $P3558, param_3553
    unless_null $P3558, vivify_3123
    $P3558 = root_new ['parrot';'Hash']
  vivify_3123:
    set $P3559, $P3558["args"]
    unless_null $P3559, vivify_3124
    $P3559 = root_new ['parrot';'ResizablePMCArray']
  vivify_3124:
    set $P123, $P3559[$I100]
    unless_null $P123, vivify_3125
    new $P123, "Undef"
  vivify_3125:
    $P124 = $P123."ast"()
    set $P119, $P124
  if_3556_end:
    set $P3554, $P119
.annotate 'line', 2631
    set $P3560, param_3553
    unless_null $P3560, vivify_3126
    $P3560 = root_new ['parrot';'Hash']
  vivify_3126:
    set $P119, $P3560["op"]
    unless_null $P119, vivify_3127
    new $P119, "Undef"
  vivify_3127:
    set $S100, $P119
    new $P121, 'String'
    set $P121, $S100
    set $P3555, $P121
.annotate 'line', 2632
    set $P119, $P3555
    unless_null $P119, vivify_3128
    new $P119, "Undef"
  vivify_3128:
    set $S100, $P119
    split $P121, "__", $S100
    join $S101, " ", $P121
    new $P122, 'String'
    set $P122, $S101
    set $P3555, $P122
.annotate 'line', 2633
    set $P119, $P3554
    unless_null $P119, vivify_3129
    new $P119, "Undef"
  vivify_3129:
    set $P121, $P3555
    unless_null $P121, vivify_3130
    new $P121, "Undef"
  vivify_3130:
    $P119."pirop"($P121)
.annotate 'line', 2634
    set $P119, $P3554
    unless_null $P119, vivify_3131
    new $P119, "Undef"
  vivify_3131:
    $P119."pasttype"("pirop")
.annotate 'line', 2635
    set $P119, param_3553
    set $P121, $P3554
    unless_null $P121, vivify_3132
    new $P121, "Undef"
  vivify_3132:
    $P122 = $P119."!make"($P121)
.annotate 'line', 2629
    .return ($P122)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<pir::const>" :anon :subid("602_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3562
    .param pmc param_3563
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2638
    .lex "self", param_3562
    .lex "$/", param_3563
.annotate 'line', 2639
    set $P117, param_3563
    get_hll_global $P118, "GLOBAL"
    nqp_get_package_through_who $P119, $P118, "PAST"
    get_who $P121, $P119
    set $P122, $P121["Val"]
    set $P3564, param_3563
    unless_null $P3564, vivify_3133
    $P3564 = root_new ['parrot';'Hash']
  vivify_3133:
    set $P123, $P3564["const"]
    unless_null $P123, vivify_3134
    new $P123, "Undef"
  vivify_3134:
    set $S100, $P123
    set $P124, param_3563
    unless_null $P124, vivify_3135
    new $P124, "Undef"
  vivify_3135:
    $P125 = $P122."new"($S100 :named("value"), "!macro_const" :named("returns"), $P124 :named("node"))
    $P126 = $P117."!make"($P125)
.annotate 'line', 2638
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<nqp::op>" :anon :subid("603_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3566
    .param pmc param_3567
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2642
    .lex "self", param_3566
    .lex "$/", param_3567
.annotate 'line', 2643
    new $P117, "Undef"
    set $P3568, $P117
    .lex "$op", $P3568
.annotate 'line', 2644
    new $P118, "Undef"
    set $P3569, $P118
    .lex "$args", $P3569
.annotate 'line', 2645
    new $P119, "Undef"
    set $P3570, $P119
    .lex "$past", $P3570
.annotate 'line', 2643
    set $P3571, param_3567
    unless_null $P3571, vivify_3136
    $P3571 = root_new ['parrot';'Hash']
  vivify_3136:
    set $P121, $P3571["op"]
    unless_null $P121, vivify_3137
    new $P121, "Undef"
  vivify_3137:
    set $S100, $P121
    new $P122, 'String'
    set $P122, $S100
    set $P3568, $P122
.annotate 'line', 2644
    set $P3573, param_3567
    unless_null $P3573, vivify_3138
    $P3573 = root_new ['parrot';'Hash']
  vivify_3138:
    set $P122, $P3573["args"]
    unless_null $P122, vivify_3139
    new $P122, "Undef"
  vivify_3139:
    if $P122, if_3572
    new $P127, "ResizablePMCArray"
    set $P121, $P127
    goto if_3572_end
  if_3572:
    new $P123, "Float"
    assign $P123, 0
    set $I100, $P123
    set $P3574, param_3567
    unless_null $P3574, vivify_3140
    $P3574 = root_new ['parrot';'Hash']
  vivify_3140:
    set $P3575, $P3574["args"]
    unless_null $P3575, vivify_3141
    $P3575 = root_new ['parrot';'ResizablePMCArray']
  vivify_3141:
    set $P124, $P3575[$I100]
    unless_null $P124, vivify_3142
    new $P124, "Undef"
  vivify_3142:
    $P125 = $P124."ast"()
    $P126 = $P125."list"()
    set $P121, $P126
  if_3572_end:
    set $P3569, $P121
.annotate 'line', 2645
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "PAST"
    get_who $P123, $P122
    set $P124, $P123["Node"]
    set $P125, $P3569
    unless_null $P125, vivify_3143
    new $P125, "Undef"
  vivify_3143:
    set $P126, $P3568
    unless_null $P126, vivify_3144
    new $P126, "Undef"
  vivify_3144:
    set $P127, param_3567
    unless_null $P127, vivify_3145
    new $P127, "Undef"
  vivify_3145:
    $P129 = $P124."map_node"($P125 :flat, "nqp" :named("map"), $P126 :named("op"), $P127 :named("node"))
    set $P3570, $P129
.annotate 'line', 2648
    set $P121, $P3570
    unless_null $P121, vivify_3146
    new $P121, "Undef"
  vivify_3146:
    defined $I100, $P121
    if $I100, unless_3576_end
.annotate 'line', 2649
    set $P122, param_3567
    unless_null $P122, vivify_3147
    new $P122, "Undef"
  vivify_3147:
    $P123 = $P122."CURSOR"()
    new $P124, 'String'
    set $P124, "Unrecognized nqp:: opcode 'nqp::"
    set $P125, $P3568
    unless_null $P125, vivify_3148
    new $P125, "Undef"
  vivify_3148:
    concat $P126, $P124, $P125
    concat $P127, $P126, "'"
    $P123."panic"($P127)
  unless_3576_end:
.annotate 'line', 2650
    set $P121, param_3567
    set $P122, $P3570
    unless_null $P122, vivify_3149
    new $P122, "Undef"
  vivify_3149:
    $P123 = $P121."!make"($P122)
.annotate 'line', 2642
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<onlystar>" :anon :subid("604_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3578
    .param pmc param_3579
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2653
    .lex "self", param_3578
    .lex "$/", param_3579
.annotate 'line', 2654
    set $P117, param_3579
    get_hll_global $P118, "GLOBAL"
    nqp_get_package_through_who $P119, $P118, "PAST"
    get_who $P121, $P119
    set $P122, $P121["Op"]
    $P123 = $P122."new"("multi_dispatch_over_lexical_candidates P" :named("pirop"))
    $P124 = $P117."!make"($P123)
.annotate 'line', 2653
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "args" :anon :subid("605_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3581
    .param pmc param_3582
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2659
    .lex "self", param_3581
    .lex "$/", param_3582
    set $P117, param_3582
    set $P3583, param_3582
    unless_null $P3583, vivify_3150
    $P3583 = root_new ['parrot';'Hash']
  vivify_3150:
    set $P118, $P3583["arglist"]
    unless_null $P118, vivify_3151
    new $P118, "Undef"
  vivify_3151:
    $P119 = $P118."ast"()
    $P121 = $P117."!make"($P119)
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "arglist" :anon :subid("606_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3585
    .param pmc param_3586
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2661
    .const 'Sub' $P3593 = "607_1329260321.776" 
    capture_lex $P3593
    .lex "self", param_3585
    .lex "$/", param_3586
.annotate 'line', 2662
    new $P117, "Undef"
    set $P3587, $P117
    .lex "$past", $P3587
.annotate 'line', 2670
    new $P118, "Undef"
    set $P3588, $P118
    .lex "$i", $P3588
.annotate 'line', 2671
    new $P119, "Undef"
    set $P3589, $P119
    .lex "$n", $P3589
.annotate 'line', 2662
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "PAST"
    get_who $P123, $P122
    set $P124, $P123["Op"]
    set $P125, param_3586
    unless_null $P125, vivify_3152
    new $P125, "Undef"
  vivify_3152:
    $P126 = $P124."new"("call" :named("pasttype"), $P125 :named("node"))
    set $P3587, $P126
.annotate 'line', 2663
    set $P3591, param_3586
    unless_null $P3591, vivify_3153
    $P3591 = root_new ['parrot';'Hash']
  vivify_3153:
    set $P121, $P3591["EXPR"]
    unless_null $P121, vivify_3154
    new $P121, "Undef"
  vivify_3154:
    unless $P121, if_3590_end
    .const 'Sub' $P3593 = "607_1329260321.776" 
    capture_lex $P3593
    $P3593()
  if_3590_end:
.annotate 'line', 2670
    new $P121, "Float"
    assign $P121, 0
    set $P3588, $P121
.annotate 'line', 2671
    set $P121, $P3587
    unless_null $P121, vivify_3165
    new $P121, "Undef"
  vivify_3165:
    $P122 = $P121."list"()
    set $N100, $P122
    new $P123, 'Float'
    set $P123, $N100
    set $P3589, $P123
.annotate 'line', 2672
    new $P123, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P123, loop3614_handler
    push_eh $P123
  loop3614_test:
    set $P121, $P3588
    unless_null $P121, vivify_3166
    new $P121, "Undef"
  vivify_3166:
    set $N100, $P121
    set $P122, $P3589
    unless_null $P122, vivify_3167
    new $P122, "Undef"
  vivify_3167:
    set $N101, $P122
    islt $I100, $N100, $N101
    unless $I100, loop3614_done
  loop3614_redo:
.annotate 'line', 2673
    set $P123, $P3588
    unless_null $P123, vivify_3168
    new $P123, "Undef"
  vivify_3168:
    set $I101, $P123
    set $P3603, $P3587
    unless_null $P3603, vivify_3169
    $P3603 = root_new ['parrot';'ResizablePMCArray']
  vivify_3169:
    set $P124, $P3603[$I101]
    unless_null $P124, vivify_3170
    new $P124, "Undef"
  vivify_3170:
    $S100 = $P124."name"()
    iseq $I102, $S100, "&prefix:<|>"
    unless $I102, if_3602_end
.annotate 'line', 2674
    new $P125, "Float"
    assign $P125, 0
    set $I103, $P125
    set $P126, $P3588
    unless_null $P126, vivify_3171
    new $P126, "Undef"
  vivify_3171:
    set $I104, $P126
    set $P3604, $P3587
    unless_null $P3604, vivify_3172
    $P3604 = root_new ['parrot';'ResizablePMCArray']
  vivify_3172:
    set $P3605, $P3604[$I104]
    unless_null $P3605, vivify_3173
    $P3605 = root_new ['parrot';'ResizablePMCArray']
  vivify_3173:
    set $P127, $P3605[$I103]
    unless_null $P127, vivify_3174
    new $P127, "Undef"
  vivify_3174:
    set $P129, $P3588
    unless_null $P129, vivify_3175
    new $P129, "Undef"
  vivify_3175:
    set $I105, $P129
    set $P3606, $P3587
    unless_null $P3606, vivify_3176
    $P3606 = root_new ['parrot';'ResizablePMCArray']
    set $P3587, $P3606
  vivify_3176:
    set $P3606[$I105], $P127
.annotate 'line', 2675
    set $P125, $P3588
    unless_null $P125, vivify_3177
    new $P125, "Undef"
  vivify_3177:
    set $I103, $P125
    set $P3607, $P3587
    unless_null $P3607, vivify_3178
    $P3607 = root_new ['parrot';'ResizablePMCArray']
  vivify_3178:
    set $P126, $P3607[$I103]
    unless_null $P126, vivify_3179
    new $P126, "Undef"
  vivify_3179:
    $P126."flat"(1)
.annotate 'line', 2676
    set $P126, $P3588
    unless_null $P126, vivify_3180
    new $P126, "Undef"
  vivify_3180:
    set $I103, $P126
    set $P3610, $P3587
    unless_null $P3610, vivify_3181
    $P3610 = root_new ['parrot';'ResizablePMCArray']
  vivify_3181:
    set $P127, $P3610[$I103]
    unless_null $P127, vivify_3182
    new $P127, "Undef"
  vivify_3182:
    get_hll_global $P129, "GLOBAL"
    nqp_get_package_through_who $P130, $P129, "PAST"
    get_who $P131, $P130
    set $P132, $P131["Val"]
    $P133 = $P127."isa"($P132)
    if $P133, if_3609
    set $P125, $P133
    goto if_3609_end
  if_3609:
.annotate 'line', 2677
    set $P134, $P3588
    unless_null $P134, vivify_3183
    new $P134, "Undef"
  vivify_3183:
    set $I104, $P134
    set $P3611, $P3587
    unless_null $P3611, vivify_3184
    $P3611 = root_new ['parrot';'ResizablePMCArray']
  vivify_3184:
    set $P135, $P3611[$I104]
    unless_null $P135, vivify_3185
    new $P135, "Undef"
  vivify_3185:
    $S101 = $P135."name"()
    new $P136, "Float"
    assign $P136, 0
    set $I105, $P136
    new $P137, "Float"
    assign $P137, 1
    set $I106, $P137
    substr $S102, $S101, $I105, $I106
    iseq $I107, $S102, "%"
    new $P125, 'Integer'
    set $P125, $I107
  if_3609_end:
    unless $P125, if_3608_end
.annotate 'line', 2678
    set $P138, $P3588
    unless_null $P138, vivify_3186
    new $P138, "Undef"
  vivify_3186:
    set $I108, $P138
    set $P3612, $P3587
    unless_null $P3612, vivify_3187
    $P3612 = root_new ['parrot';'ResizablePMCArray']
  vivify_3187:
    set $P139, $P3612[$I108]
    unless_null $P139, vivify_3188
    new $P139, "Undef"
  vivify_3188:
    $P139."named"(1)
  if_3608_end:
  if_3602_end:
.annotate 'line', 2672
    set $P123, $P3588
    unless_null $P123, vivify_3189
    new $P123, "Undef"
  vivify_3189:
    clone $P3613, $P123
    inc $P123
  loop3614_next:
    goto loop3614_test
  loop3614_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P124, exception, 'type'
    eq $P124, .CONTROL_LOOP_NEXT, loop3614_next
    eq $P124, .CONTROL_LOOP_REDO, loop3614_redo
  loop3614_done:
    pop_eh 
.annotate 'line', 2683
    set $P121, param_3586
    set $P122, $P3587
    unless_null $P122, vivify_3190
    new $P122, "Undef"
  vivify_3190:
    $P123 = $P121."!make"($P122)
.annotate 'line', 2661
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block3592"  :anon :subid("607_1329260321.776") :outer("606_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2663
    .const 'Sub' $P3599 = "608_1329260321.776" 
    capture_lex $P3599
.annotate 'line', 2664
    new $P122, "Undef"
    set $P3594, $P122
    .lex "$expr", $P3594
    find_lex $P3595, "$/"
    unless_null $P3595, vivify_3155
    $P3595 = root_new ['parrot';'Hash']
  vivify_3155:
    set $P123, $P3595["EXPR"]
    unless_null $P123, vivify_3156
    new $P123, "Undef"
  vivify_3156:
    $P124 = $P123."ast"()
    set $P3594, $P124
.annotate 'line', 2665
    set $P125, $P3594
    unless_null $P125, vivify_3157
    new $P125, "Undef"
  vivify_3157:
    $S100 = $P125."name"()
    iseq $I100, $S100, "&infix:<,>"
    if $I100, if_3597
    new $P124, 'Integer'
    set $P124, $I100
    goto if_3597_end
  if_3597:
    set $P126, $P3594
    unless_null $P126, vivify_3158
    new $P126, "Undef"
  vivify_3158:
    $P127 = $P126."named"()
    isfalse $I101, $P127
    new $P124, 'Integer'
    set $P124, $I101
  if_3597_end:
    if $P124, if_3596
.annotate 'line', 2668
    find_lex $P130, "$past"
    unless_null $P130, vivify_3159
    new $P130, "Undef"
  vivify_3159:
    set $P131, $P3594
    unless_null $P131, vivify_3160
    new $P131, "Undef"
  vivify_3160:
    $P132 = $P130."push"($P131)
    set $P123, $P132
.annotate 'line', 2665
    goto if_3596_end
  if_3596:
.annotate 'line', 2666
    set $P130, $P3594
    unless_null $P130, vivify_3161
    new $P130, "Undef"
  vivify_3161:
    $P131 = $P130."list"()
    defined $I102, $P131
    unless $I102, for_undef_3162
    iter $P129, $P131
    new $P133, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P133, loop3601_handler
    push_eh $P133
  loop3601_test:
    unless $P129, loop3601_done
    shift $P132, $P129
  loop3601_redo:
    .const 'Sub' $P3599 = "608_1329260321.776" 
    capture_lex $P3599
    $P3599($P132)
  loop3601_next:
    goto loop3601_test
  loop3601_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P134, exception, 'type'
    eq $P134, .CONTROL_LOOP_NEXT, loop3601_next
    eq $P134, .CONTROL_LOOP_REDO, loop3601_redo
  loop3601_done:
    pop_eh 
  for_undef_3162:
.annotate 'line', 2665
    set $P123, $P129
  if_3596_end:
.annotate 'line', 2663
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3598"  :anon :subid("608_1329260321.776") :outer("607_1329260321.776")
    .param pmc param_3600
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2666
    .lex "$_", param_3600
    find_lex $P133, "$past"
    unless_null $P133, vivify_3163
    new $P133, "Undef"
  vivify_3163:
    find_lex $P134, "$_"
    unless_null $P134, vivify_3164
    new $P134, "Undef"
  vivify_3164:
    $P135 = $P133."push"($P134)
    .return ($P135)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<multi_declarator>" :anon :subid("609_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3616
    .param pmc param_3617
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2686
    .lex "self", param_3616
    .lex "$/", param_3617
    set $P117, param_3617
    set $P3618, param_3617
    unless_null $P3618, vivify_3191
    $P3618 = root_new ['parrot';'Hash']
  vivify_3191:
    set $P118, $P3618["multi_declarator"]
    unless_null $P118, vivify_3192
    new $P118, "Undef"
  vivify_3192:
    $P119 = $P118."ast"()
    $P121 = $P117."!make"($P119)
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<value>" :anon :subid("610_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3620
    .param pmc param_3621
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2688
    .lex "self", param_3620
    .lex "$/", param_3621
    set $P117, param_3621
    set $P3622, param_3621
    unless_null $P3622, vivify_3193
    $P3622 = root_new ['parrot';'Hash']
  vivify_3193:
    set $P118, $P3622["value"]
    unless_null $P118, vivify_3194
    new $P118, "Undef"
  vivify_3194:
    $P119 = $P118."ast"()
    $P121 = $P117."!make"($P119)
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "circumfix:sym<( )>" :anon :subid("611_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3624
    .param pmc param_3625
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2690
    .lex "self", param_3624
    .lex "$/", param_3625
.annotate 'line', 2691
    set $P117, param_3625
.annotate 'line', 2692
    set $P3627, param_3625
    unless_null $P3627, vivify_3195
    $P3627 = root_new ['parrot';'Hash']
  vivify_3195:
    set $P119, $P3627["EXPR"]
    unless_null $P119, vivify_3196
    new $P119, "Undef"
  vivify_3196:
    if $P119, if_3626
.annotate 'line', 2693
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Op"]
    set $P129, param_3625
    unless_null $P129, vivify_3197
    new $P129, "Undef"
  vivify_3197:
    $P130 = $P127."new"("list" :named("pasttype"), $P129 :named("node"))
    set $P118, $P130
.annotate 'line', 2692
    goto if_3626_end
  if_3626:
    new $P121, "Float"
    assign $P121, 0
    set $I100, $P121
    set $P3628, param_3625
    unless_null $P3628, vivify_3198
    $P3628 = root_new ['parrot';'Hash']
  vivify_3198:
    set $P3629, $P3628["EXPR"]
    unless_null $P3629, vivify_3199
    $P3629 = root_new ['parrot';'ResizablePMCArray']
  vivify_3199:
    set $P122, $P3629[$I100]
    unless_null $P122, vivify_3200
    new $P122, "Undef"
  vivify_3200:
    $P123 = $P122."ast"()
    set $P118, $P123
  if_3626_end:
    $P131 = $P117."!make"($P118)
.annotate 'line', 2690
    .return ($P131)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "circumfix:sym<[ ]>" :anon :subid("612_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3631
    .param pmc param_3632
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2696
    .lex "self", param_3631
    .lex "$/", param_3632
.annotate 'line', 2697
    new $P117, "Undef"
    set $P3633, $P117
    .lex "$past", $P3633
.annotate 'line', 2696
    set $P118, $P3633
    unless_null $P118, vivify_3201
    new $P118, "Undef"
  vivify_3201:
.annotate 'line', 2698
    set $P3635, param_3632
    unless_null $P3635, vivify_3202
    $P3635 = root_new ['parrot';'Hash']
  vivify_3202:
    set $P118, $P3635["EXPR"]
    unless_null $P118, vivify_3203
    new $P118, "Undef"
  vivify_3203:
    if $P118, if_3634
.annotate 'line', 2705
    get_hll_global $P119, "GLOBAL"
    nqp_get_package_through_who $P121, $P119, "PAST"
    get_who $P122, $P121
    set $P123, $P122["Op"]
    $P124 = $P123."new"("list" :named("pasttype"))
    set $P3633, $P124
.annotate 'line', 2704
    goto if_3634_end
  if_3634:
.annotate 'line', 2699
    new $P119, "Float"
    assign $P119, 0
    set $I100, $P119
    set $P3636, param_3632
    unless_null $P3636, vivify_3204
    $P3636 = root_new ['parrot';'Hash']
  vivify_3204:
    set $P3637, $P3636["EXPR"]
    unless_null $P3637, vivify_3205
    $P3637 = root_new ['parrot';'ResizablePMCArray']
  vivify_3205:
    set $P121, $P3637[$I100]
    unless_null $P121, vivify_3206
    new $P121, "Undef"
  vivify_3206:
    $P122 = $P121."ast"()
    set $P3633, $P122
.annotate 'line', 2700
    set $P119, $P3633
    unless_null $P119, vivify_3207
    new $P119, "Undef"
  vivify_3207:
    $S100 = $P119."name"()
    isne $I100, $S100, "&infix:<,>"
    unless $I100, if_3638_end
.annotate 'line', 2701
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "PAST"
    get_who $P123, $P122
    set $P124, $P123["Op"]
    set $P125, $P3633
    unless_null $P125, vivify_3208
    new $P125, "Undef"
  vivify_3208:
    $P126 = $P124."new"($P125, "list" :named("pasttype"))
    set $P3633, $P126
  if_3638_end:
  if_3634_end:
.annotate 'line', 2707
    set $P118, $P3633
    unless_null $P118, vivify_3209
    new $P118, "Undef"
  vivify_3209:
    $P118."name"("&circumfix:<[ ]>")
.annotate 'line', 2708
    set $P118, param_3632
    set $P119, $P3633
    unless_null $P119, vivify_3210
    new $P119, "Undef"
  vivify_3210:
    $P121 = $P118."!make"($P119)
.annotate 'line', 2696
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "circumfix:sym<ang>" :anon :subid("613_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3640
    .param pmc param_3641
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2711
    .lex "self", param_3640
    .lex "$/", param_3641
    set $P117, param_3641
    set $P3642, param_3641
    unless_null $P3642, vivify_3211
    $P3642 = root_new ['parrot';'Hash']
  vivify_3211:
    set $P118, $P3642["quote_EXPR"]
    unless_null $P118, vivify_3212
    new $P118, "Undef"
  vivify_3212:
    $P119 = $P118."ast"()
    $P121 = $P117."!make"($P119)
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub unicode:"circumfix:sym<\x{ab} \x{bb}>" :anon :subid("614_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3644
    .param pmc param_3645
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2712
    .lex "self", param_3644
    .lex "$/", param_3645
    set $P117, param_3645
    set $P3646, param_3645
    unless_null $P3646, vivify_3213
    $P3646 = root_new ['parrot';'Hash']
  vivify_3213:
    set $P118, $P3646["quote_EXPR"]
    unless_null $P118, vivify_3214
    new $P118, "Undef"
  vivify_3214:
    $P119 = $P118."ast"()
    $P121 = $P117."!make"($P119)
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "circumfix:sym<{ }>" :anon :subid("615_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3648
    .param pmc param_3649
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2714
    .const 'Sub' $P3656 = "616_1329260321.776" 
    capture_lex $P3656
    .lex "self", param_3648
    .lex "$/", param_3649
.annotate 'line', 2715
    set $P3651, param_3649
    unless_null $P3651, vivify_3215
    $P3651 = root_new ['parrot';'Hash']
  vivify_3215:
    set $P3652, $P3651["pblock"]
    unless_null $P3652, vivify_3216
    $P3652 = root_new ['parrot';'Hash']
  vivify_3216:
    set $P3653, $P3652["blockoid"]
    unless_null $P3653, vivify_3217
    $P3653 = root_new ['parrot';'Hash']
  vivify_3217:
    set $P3654, $P3653["statementlist"]
    unless_null $P3654, vivify_3218
    $P3654 = root_new ['parrot';'Hash']
  vivify_3218:
    set $P118, $P3654["statement"]
    unless_null $P118, vivify_3219
    new $P118, "Undef"
  vivify_3219:
    set $N100, $P118
    set $N101, 0
    isgt $I100, $N100, $N101
    if $I100, if_3650
.annotate 'line', 2720
    set $P3661, param_3649
    unless_null $P3661, vivify_3220
    $P3661 = root_new ['parrot';'Hash']
  vivify_3220:
    set $P3662, $P3661["pblock"]
    unless_null $P3662, vivify_3221
    $P3662 = root_new ['parrot';'Hash']
  vivify_3221:
    set $P3663, $P3662["blockoid"]
    unless_null $P3663, vivify_3222
    $P3663 = root_new ['parrot';'Hash']
  vivify_3222:
    set $P124, $P3663["you_are_here"]
    unless_null $P124, vivify_3223
    new $P124, "Undef"
  vivify_3223:
    if $P124, if_3660
.annotate 'line', 2724
    set $P125, param_3649
    $P126 = "vivitype"("%")
    $P127 = $P125."!make"($P126)
.annotate 'line', 2723
    set $P122, $P127
.annotate 'line', 2720
    goto if_3660_end
  if_3660:
.annotate 'line', 2721
    set $P125, param_3649
    set $P3664, param_3649
    unless_null $P3664, vivify_3224
    $P3664 = root_new ['parrot';'Hash']
  vivify_3224:
    set $P126, $P3664["pblock"]
    unless_null $P126, vivify_3225
    new $P126, "Undef"
  vivify_3225:
    $P127 = $P126."ast"()
    $P129 = $P125."!make"($P127)
.annotate 'line', 2720
    set $P122, $P129
  if_3660_end:
    set $P117, $P122
.annotate 'line', 2715
    goto if_3650_end
  if_3650:
    .const 'Sub' $P3656 = "616_1329260321.776" 
    capture_lex $P3656
    $P121 = $P3656()
    set $P117, $P121
  if_3650_end:
.annotate 'line', 2714
    .return ($P117)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3655"  :anon :subid("616_1329260321.776") :outer("615_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2716
    new $P119, "Undef"
    set $P3657, $P119
    .lex "$past", $P3657
    find_lex $P3658, "$/"
    unless_null $P3658, vivify_3226
    $P3658 = root_new ['parrot';'Hash']
  vivify_3226:
    set $P121, $P3658["pblock"]
    unless_null $P121, vivify_3227
    new $P121, "Undef"
  vivify_3227:
    $P122 = $P121."ast"()
    set $P3657, $P122
.annotate 'line', 2717
    new $P121, "Float"
    assign $P121, 1
    set $P3659, $P3657
    unless_null $P3659, vivify_3228
    $P3659 = root_new ['parrot';'Hash']
    set $P3657, $P3659
  vivify_3228:
    set $P3659["bareblock"], $P121
.annotate 'line', 2718
    find_dynamic_lex $P121, "$/"
    set $P122, $P3657
    unless_null $P122, vivify_3229
    new $P122, "Undef"
  vivify_3229:
    $P123 = $P121."!make"($P122)
.annotate 'line', 2715
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "circumfix:sym<sigil>" :anon :subid("617_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3666
    .param pmc param_3667
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2728
    .lex "self", param_3666
    .lex "$/", param_3667
.annotate 'line', 2729
    new $P117, "Undef"
    set $P3668, $P117
    .lex "$name", $P3668
    set $P3670, param_3667
    unless_null $P3670, vivify_3230
    $P3670 = root_new ['parrot';'Hash']
  vivify_3230:
    set $P119, $P3670["sigil"]
    unless_null $P119, vivify_3231
    new $P119, "Undef"
  vivify_3231:
    set $S100, $P119
    iseq $I100, $S100, "@"
    if $I100, if_3669
.annotate 'line', 2730
    set $P3672, param_3667
    unless_null $P3672, vivify_3232
    $P3672 = root_new ['parrot';'Hash']
  vivify_3232:
    set $P123, $P3672["sigil"]
    unless_null $P123, vivify_3233
    new $P123, "Undef"
  vivify_3233:
    set $S101, $P123
    iseq $I101, $S101, "%"
    if $I101, if_3671
    new $P125, "String"
    assign $P125, "item"
    set $P122, $P125
    goto if_3671_end
  if_3671:
    new $P124, "String"
    assign $P124, "hash"
    set $P122, $P124
  if_3671_end:
    set $P118, $P122
.annotate 'line', 2729
    goto if_3669_end
  if_3669:
    new $P121, "String"
    assign $P121, "list"
    set $P118, $P121
  if_3669_end:
    set $P3668, $P118
.annotate 'line', 2732
    set $P118, param_3667
    get_hll_global $P119, "GLOBAL"
    nqp_get_package_through_who $P121, $P119, "PAST"
    get_who $P122, $P121
    set $P123, $P122["Op"]
    set $P124, $P3668
    unless_null $P124, vivify_3234
    new $P124, "Undef"
  vivify_3234:
    set $P3673, param_3667
    unless_null $P3673, vivify_3235
    $P3673 = root_new ['parrot';'Hash']
  vivify_3235:
    set $P125, $P3673["semilist"]
    unless_null $P125, vivify_3236
    new $P125, "Undef"
  vivify_3236:
    $P126 = $P125."ast"()
    $P127 = $P123."new"($P126, "callmethod" :named("pasttype"), $P124 :named("name"))
    $P129 = $P118."!make"($P127)
.annotate 'line', 2728
    .return ($P129)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "semilist" :anon :subid("618_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3675
    .param pmc param_3676
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2735
    .lex "self", param_3675
    .lex "$/", param_3676
    set $P117, param_3676
    set $P3677, param_3676
    unless_null $P3677, vivify_3237
    $P3677 = root_new ['parrot';'Hash']
  vivify_3237:
    set $P118, $P3677["statement"]
    unless_null $P118, vivify_3238
    new $P118, "Undef"
  vivify_3238:
    $P119 = $P118."ast"()
    $P121 = $P117."!make"($P119)
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postcircumfix:sym<[ ]>" :anon :subid("619_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3679
    .param pmc param_3680
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2737
    .lex "self", param_3679
    .lex "$/", param_3680
.annotate 'line', 2738
    set $P117, param_3680
    get_hll_global $P118, "GLOBAL"
    nqp_get_package_through_who $P119, $P118, "PAST"
    get_who $P121, $P119
    set $P122, $P121["Var"]
    set $P3681, param_3680
    unless_null $P3681, vivify_3239
    $P3681 = root_new ['parrot';'Hash']
  vivify_3239:
    set $P123, $P3681["EXPR"]
    unless_null $P123, vivify_3240
    new $P123, "Undef"
  vivify_3240:
    $P124 = $P123."ast"()
.annotate 'line', 2740
    $P125 = "vivitype"("@")
.annotate 'line', 2738
    $P126 = $P122."new"($P124, "keyed_int" :named("scope"), "Undef" :named("viviself"), $P125 :named("vivibase"))
    $P127 = $P117."!make"($P126)
.annotate 'line', 2737
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postcircumfix:sym<{ }>" :anon :subid("620_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3683
    .param pmc param_3684
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2743
    .lex "self", param_3683
    .lex "$/", param_3684
.annotate 'line', 2744
    set $P117, param_3684
    get_hll_global $P118, "GLOBAL"
    nqp_get_package_through_who $P119, $P118, "PAST"
    get_who $P121, $P119
    set $P122, $P121["Var"]
    set $P3685, param_3684
    unless_null $P3685, vivify_3241
    $P3685 = root_new ['parrot';'Hash']
  vivify_3241:
    set $P123, $P3685["EXPR"]
    unless_null $P123, vivify_3242
    new $P123, "Undef"
  vivify_3242:
    $P124 = $P123."ast"()
.annotate 'line', 2746
    $P125 = "vivitype"("%")
.annotate 'line', 2744
    $P126 = $P122."new"($P124, "keyed" :named("scope"), "Undef" :named("viviself"), $P125 :named("vivibase"))
    $P127 = $P117."!make"($P126)
.annotate 'line', 2743
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postcircumfix:sym<ang>" :anon :subid("621_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3687
    .param pmc param_3688
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2749
    .lex "self", param_3687
    .lex "$/", param_3688
.annotate 'line', 2750
    set $P117, param_3688
    get_hll_global $P118, "GLOBAL"
    nqp_get_package_through_who $P119, $P118, "PAST"
    get_who $P121, $P119
    set $P122, $P121["Var"]
    set $P3689, param_3688
    unless_null $P3689, vivify_3243
    $P3689 = root_new ['parrot';'Hash']
  vivify_3243:
    set $P123, $P3689["quote_EXPR"]
    unless_null $P123, vivify_3244
    new $P123, "Undef"
  vivify_3244:
    $P124 = $P123."ast"()
.annotate 'line', 2752
    $P125 = "vivitype"("%")
.annotate 'line', 2750
    $P126 = $P122."new"($P124, "keyed" :named("scope"), "Undef" :named("viviself"), $P125 :named("vivibase"))
    $P127 = $P117."!make"($P126)
.annotate 'line', 2749
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postcircumfix:sym<( )>" :anon :subid("622_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3691
    .param pmc param_3692
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2755
    .lex "self", param_3691
    .lex "$/", param_3692
.annotate 'line', 2756
    set $P117, param_3692
    set $P3693, param_3692
    unless_null $P3693, vivify_3245
    $P3693 = root_new ['parrot';'Hash']
  vivify_3245:
    set $P118, $P3693["arglist"]
    unless_null $P118, vivify_3246
    new $P118, "Undef"
  vivify_3246:
    $P119 = $P118."ast"()
    $P121 = $P117."!make"($P119)
.annotate 'line', 2755
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "value" :anon :subid("623_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3695
    .param pmc param_3696
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2759
    .lex "self", param_3695
    .lex "$/", param_3696
.annotate 'line', 2760
    set $P117, param_3696
    set $P3698, param_3696
    unless_null $P3698, vivify_3247
    $P3698 = root_new ['parrot';'Hash']
  vivify_3247:
    set $P119, $P3698["quote"]
    unless_null $P119, vivify_3248
    new $P119, "Undef"
  vivify_3248:
    if $P119, if_3697
    set $P3700, param_3696
    unless_null $P3700, vivify_3249
    $P3700 = root_new ['parrot';'Hash']
  vivify_3249:
    set $P123, $P3700["number"]
    unless_null $P123, vivify_3250
    new $P123, "Undef"
  vivify_3250:
    $P124 = $P123."ast"()
    set $P118, $P124
    goto if_3697_end
  if_3697:
    set $P3699, param_3696
    unless_null $P3699, vivify_3251
    $P3699 = root_new ['parrot';'Hash']
  vivify_3251:
    set $P121, $P3699["quote"]
    unless_null $P121, vivify_3252
    new $P121, "Undef"
  vivify_3252:
    $P122 = $P121."ast"()
    set $P118, $P122
  if_3697_end:
    $P125 = $P117."!make"($P118)
.annotate 'line', 2759
    .return ($P125)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "number" :anon :subid("624_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3702
    .param pmc param_3703
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2763
    .lex "self", param_3702
    .lex "$/", param_3703
.annotate 'line', 2764
    new $P117, "Undef"
    set $P3704, $P117
    .lex "$value", $P3704
    set $P3706, param_3703
    unless_null $P3706, vivify_3253
    $P3706 = root_new ['parrot';'Hash']
  vivify_3253:
    set $P119, $P3706["dec_number"]
    unless_null $P119, vivify_3254
    new $P119, "Undef"
  vivify_3254:
    if $P119, if_3705
    set $P3708, param_3703
    unless_null $P3708, vivify_3255
    $P3708 = root_new ['parrot';'Hash']
  vivify_3255:
    set $P123, $P3708["integer"]
    unless_null $P123, vivify_3256
    new $P123, "Undef"
  vivify_3256:
    $P124 = $P123."ast"()
    set $P118, $P124
    goto if_3705_end
  if_3705:
    set $P3707, param_3703
    unless_null $P3707, vivify_3257
    $P3707 = root_new ['parrot';'Hash']
  vivify_3257:
    set $P121, $P3707["dec_number"]
    unless_null $P121, vivify_3258
    new $P121, "Undef"
  vivify_3258:
    $P122 = $P121."ast"()
    set $P118, $P122
  if_3705_end:
    set $P3704, $P118
.annotate 'line', 2765
    set $P3710, param_3703
    unless_null $P3710, vivify_3259
    $P3710 = root_new ['parrot';'Hash']
  vivify_3259:
    set $P118, $P3710["sign"]
    unless_null $P118, vivify_3260
    new $P118, "Undef"
  vivify_3260:
    set $S100, $P118
    iseq $I100, $S100, "-"
    unless $I100, if_3709_end
    set $P119, $P3704
    unless_null $P119, vivify_3261
    new $P119, "Undef"
  vivify_3261:
    neg $P121, $P119
    set $P3704, $P121
  if_3709_end:
.annotate 'line', 2766
    set $P118, param_3703
    get_hll_global $P119, "GLOBAL"
    nqp_get_package_through_who $P121, $P119, "PAST"
    get_who $P122, $P121
    set $P123, $P122["Val"]
    set $P124, $P3704
    unless_null $P124, vivify_3262
    new $P124, "Undef"
  vivify_3262:
    $P125 = $P123."new"($P124 :named("value"))
    $P126 = $P118."!make"($P125)
.annotate 'line', 2763
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote:sym<apos>" :anon :subid("625_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3712
    .param pmc param_3713
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2769
    .lex "self", param_3712
    .lex "$/", param_3713
    set $P117, param_3713
    set $P3714, param_3713
    unless_null $P3714, vivify_3263
    $P3714 = root_new ['parrot';'Hash']
  vivify_3263:
    set $P118, $P3714["quote_EXPR"]
    unless_null $P118, vivify_3264
    new $P118, "Undef"
  vivify_3264:
    $P119 = $P118."ast"()
    $P121 = $P117."!make"($P119)
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote:sym<dblq>" :anon :subid("626_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3716
    .param pmc param_3717
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2770
    .lex "self", param_3716
    .lex "$/", param_3717
    set $P117, param_3717
    set $P3718, param_3717
    unless_null $P3718, vivify_3265
    $P3718 = root_new ['parrot';'Hash']
  vivify_3265:
    set $P118, $P3718["quote_EXPR"]
    unless_null $P118, vivify_3266
    new $P118, "Undef"
  vivify_3266:
    $P119 = $P118."ast"()
    $P121 = $P117."!make"($P119)
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote:sym<qq>" :anon :subid("627_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3720
    .param pmc param_3721
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2771
    .lex "self", param_3720
    .lex "$/", param_3721
    set $P117, param_3721
    set $P3722, param_3721
    unless_null $P3722, vivify_3267
    $P3722 = root_new ['parrot';'Hash']
  vivify_3267:
    set $P118, $P3722["quote_EXPR"]
    unless_null $P118, vivify_3268
    new $P118, "Undef"
  vivify_3268:
    $P119 = $P118."ast"()
    $P121 = $P117."!make"($P119)
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote:sym<q>" :anon :subid("628_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3724
    .param pmc param_3725
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2772
    .lex "self", param_3724
    .lex "$/", param_3725
    set $P117, param_3725
    set $P3726, param_3725
    unless_null $P3726, vivify_3269
    $P3726 = root_new ['parrot';'Hash']
  vivify_3269:
    set $P118, $P3726["quote_EXPR"]
    unless_null $P118, vivify_3270
    new $P118, "Undef"
  vivify_3270:
    $P119 = $P118."ast"()
    $P121 = $P117."!make"($P119)
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote:sym<Q>" :anon :subid("629_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3728
    .param pmc param_3729
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2773
    .lex "self", param_3728
    .lex "$/", param_3729
    set $P117, param_3729
    set $P3730, param_3729
    unless_null $P3730, vivify_3271
    $P3730 = root_new ['parrot';'Hash']
  vivify_3271:
    set $P118, $P3730["quote_EXPR"]
    unless_null $P118, vivify_3272
    new $P118, "Undef"
  vivify_3272:
    $P119 = $P118."ast"()
    $P121 = $P117."!make"($P119)
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote:sym<Q:PIR>" :anon :subid("630_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3732
    .param pmc param_3733
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2774
    .lex "self", param_3732
    .lex "$/", param_3733
.annotate 'line', 2775
    set $P117, param_3733
    get_hll_global $P118, "GLOBAL"
    nqp_get_package_through_who $P119, $P118, "PAST"
    get_who $P121, $P119
    set $P122, $P121["Op"]
    set $P3734, param_3733
    unless_null $P3734, vivify_3273
    $P3734 = root_new ['parrot';'Hash']
  vivify_3273:
    set $P123, $P3734["quote_EXPR"]
    unless_null $P123, vivify_3274
    new $P123, "Undef"
  vivify_3274:
    $P124 = $P123."ast"()
    $P125 = $P124."value"()
    set $P126, param_3733
    unless_null $P126, vivify_3275
    new $P126, "Undef"
  vivify_3275:
    $P127 = $P122."new"($P125 :named("inline"), "inline" :named("pasttype"), $P126 :named("node"))
    $P129 = $P117."!make"($P127)
.annotate 'line', 2774
    .return ($P129)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "quote:sym</ />" :anon :subid("631_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3738
    .param pmc param_3739
    .param pmc param_3740 :optional
    .param int has_param_3740 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2780
    new $P3737, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P3737, control_3736
    push_eh $P3737
    .lex "self", param_3738
    .lex "$/", param_3739
    if has_param_3740, optparam_3276
    new $P117, "Undef"
    set param_3740, $P117
  optparam_3276:
    .lex "$key", param_3740
.annotate 'line', 2787
    new $P118, "Undef"
    set $P3741, $P118
    .lex "$regex", $P3741
.annotate 'line', 2789
    new $P119, "Undef"
    set $P3742, $P119
    .lex "$past", $P3742
.annotate 'line', 2781
    set $P121, param_3740
    unless_null $P121, vivify_3277
    new $P121, "Undef"
  vivify_3277:
    set $S100, $P121
    iseq $I100, $S100, "open"
    unless $I100, if_3743_end
.annotate 'line', 2782
    null $P122
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "Regex"
    nqp_get_package_through_who $P125, $P124, "P6Regex"
    nqp_get_package_through_who $P126, $P125, "Actions"
    get_who $P127, $P126
    set $P127["$REGEXNAME"], $P122
.annotate 'line', 2783
    find_dynamic_lex $P124, "$*W"
    unless_null $P124, vivify_3278
    get_hll_global $P122, "GLOBAL"
    get_who $P123, $P122
    set $P124, $P123["$W"]
    unless_null $P124, vivify_3279
    die "Contextual $*W not found"
  vivify_3279:
  vivify_3278:
    $P125 = $P124."cur_lexpad"()
    $P125."symbol"(unicode:"$\x{a2}", "lexical" :named("scope"))
.annotate 'line', 2784
    find_dynamic_lex $P124, "$*W"
    unless_null $P124, vivify_3280
    get_hll_global $P122, "GLOBAL"
    get_who $P123, $P122
    set $P124, $P123["$W"]
    unless_null $P124, vivify_3281
    die "Contextual $*W not found"
  vivify_3281:
  vivify_3280:
    $P125 = $P124."cur_lexpad"()
    $P125."symbol"("$/", "lexical" :named("scope"))
.annotate 'line', 2785
    new $P122, "Exception"
    set $P122['type'], .CONTROL_RETURN
    new $P123, "Float"
    assign $P123, 0
    setattribute $P122, 'payload', $P123
    throw $P122
  if_3743_end:
.annotate 'line', 2788
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "Regex"
    nqp_get_package_through_who $P123, $P122, "P6Regex"
    nqp_get_package_through_who $P124, $P123, "Actions"
    get_who $P125, $P124
    set $P126, $P125["buildsub"]
    set $P3744, param_3739
    unless_null $P3744, vivify_3282
    $P3744 = root_new ['parrot';'Hash']
  vivify_3282:
    set $P127, $P3744["p6regex"]
    unless_null $P127, vivify_3283
    new $P127, "Undef"
  vivify_3283:
    $P129 = $P127."ast"()
    find_dynamic_lex $P132, "$*W"
    unless_null $P132, vivify_3284
    get_hll_global $P130, "GLOBAL"
    get_who $P131, $P130
    set $P132, $P131["$W"]
    unless_null $P132, vivify_3285
    die "Contextual $*W not found"
  vivify_3285:
  vivify_3284:
    $P133 = $P132."pop_lexpad"()
    $P134 = $P126($P129, $P133)
    set $P3741, $P134
.annotate 'line', 2790
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "PAST"
    get_who $P123, $P122
    set $P124, $P123["Op"]
.annotate 'line', 2792
    new $P125, "ResizablePMCArray"
    push $P125, "Regex"
    push $P125, "Regex"
    set $P126, param_3739
    unless_null $P126, vivify_3286
    new $P126, "Undef"
  vivify_3286:
    $P127 = "lexical_package_lookup"($P125, $P126)
    set $P129, $P3741
    unless_null $P129, vivify_3287
    new $P129, "Undef"
  vivify_3287:
    $P130 = $P124."new"($P127, $P129, "callmethod" :named("pasttype"), "new" :named("name"))
.annotate 'line', 2790
    set $P3742, $P130
.annotate 'line', 2796
    set $P121, $P3741
    unless_null $P121, vivify_3288
    new $P121, "Undef"
  vivify_3288:
    set $P3745, $P3742
    unless_null $P3745, vivify_3289
    $P3745 = root_new ['parrot';'Hash']
    set $P3742, $P3745
  vivify_3289:
    set $P3745["sink"], $P121
.annotate 'line', 2797
    set $P121, param_3739
    set $P122, $P3742
    unless_null $P122, vivify_3290
    new $P122, "Undef"
  vivify_3290:
    $P123 = $P121."!make"($P122)
.annotate 'line', 2780
    .return ($P123)
  control_3736:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P121, exception, "payload"
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote_escape:sym<$>" :anon :subid("632_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3747
    .param pmc param_3748
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2800
    .lex "self", param_3747
    .lex "$/", param_3748
    set $P117, param_3748
    set $P3749, param_3748
    unless_null $P3749, vivify_3291
    $P3749 = root_new ['parrot';'Hash']
  vivify_3291:
    set $P118, $P3749["variable"]
    unless_null $P118, vivify_3292
    new $P118, "Undef"
  vivify_3292:
    $P119 = $P118."ast"()
    $P121 = $P117."!make"($P119)
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote_escape:sym<{ }>" :anon :subid("633_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3751
    .param pmc param_3752
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2801
    .lex "self", param_3751
    .lex "$/", param_3752
.annotate 'line', 2802
    set $P117, param_3752
    get_hll_global $P118, "GLOBAL"
    nqp_get_package_through_who $P119, $P118, "PAST"
    get_who $P121, $P119
    set $P122, $P121["Op"]
.annotate 'line', 2803
    set $P3753, param_3752
    unless_null $P3753, vivify_3293
    $P3753 = root_new ['parrot';'Hash']
  vivify_3293:
    set $P123, $P3753["block"]
    unless_null $P123, vivify_3294
    new $P123, "Undef"
  vivify_3294:
    $P124 = $P123."ast"()
    $P125 = "block_immediate"($P124)
    set $P126, param_3752
    unless_null $P126, vivify_3295
    new $P126, "Undef"
  vivify_3295:
    $P127 = $P122."new"($P125, "set S*" :named("pirop"), $P126 :named("node"))
.annotate 'line', 2802
    $P129 = $P117."!make"($P127)
.annotate 'line', 2801
    .return ($P129)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote_escape:sym<esc>" :anon :subid("634_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3755
    .param pmc param_3756
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2806
    .lex "self", param_3755
    .lex "$/", param_3756
    set $P117, param_3756
    $P118 = $P117."!make"("\e")
    .return ($P118)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postfix:sym<.>" :anon :subid("635_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3758
    .param pmc param_3759
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2810
    .lex "self", param_3758
    .lex "$/", param_3759
    set $P117, param_3759
    set $P3760, param_3759
    unless_null $P3760, vivify_3296
    $P3760 = root_new ['parrot';'Hash']
  vivify_3296:
    set $P118, $P3760["dotty"]
    unless_null $P118, vivify_3297
    new $P118, "Undef"
  vivify_3297:
    $P119 = $P118."ast"()
    $P121 = $P117."!make"($P119)
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postfix:sym<++>" :anon :subid("636_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3762
    .param pmc param_3763
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2812
    .lex "self", param_3762
    .lex "$/", param_3763
.annotate 'line', 2813
    set $P117, param_3763
    get_hll_global $P118, "GLOBAL"
    nqp_get_package_through_who $P119, $P118, "PAST"
    get_who $P121, $P119
    set $P122, $P121["Op"]
.annotate 'line', 2814
    new $P123, "ResizablePMCArray"
    push $P123, "    clone %r, %0"
    push $P123, "    inc %0"
.annotate 'line', 2813
    $P124 = $P122."new"("postfix:<++>" :named("name"), $P123 :named("inline"), "inline" :named("pasttype"))
    $P125 = $P117."!make"($P124)
.annotate 'line', 2812
    .return ($P125)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postfix:sym<-->" :anon :subid("637_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3765
    .param pmc param_3766
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2818
    .lex "self", param_3765
    .lex "$/", param_3766
.annotate 'line', 2819
    set $P117, param_3766
    get_hll_global $P118, "GLOBAL"
    nqp_get_package_through_who $P119, $P118, "PAST"
    get_who $P121, $P119
    set $P122, $P121["Op"]
.annotate 'line', 2820
    new $P123, "ResizablePMCArray"
    push $P123, "    clone %r, %0"
    push $P123, "    dec %0"
.annotate 'line', 2819
    $P124 = $P122."new"("postfix:<-->" :named("name"), $P123 :named("inline"), "inline" :named("pasttype"))
    $P125 = $P117."!make"($P124)
.annotate 'line', 2818
    .return ($P125)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "prefix:sym<make>" :anon :subid("638_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3768
    .param pmc param_3769
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2824
    .lex "self", param_3768
    .lex "$/", param_3769
.annotate 'line', 2825
    set $P117, param_3769
    get_hll_global $P118, "GLOBAL"
    nqp_get_package_through_who $P119, $P118, "PAST"
    get_who $P121, $P119
    set $P122, $P121["Op"]
.annotate 'line', 2826
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Var"]
    $P127 = $P126."new"("$/" :named("name"), "contextual" :named("scope"))
    set $P129, param_3769
    unless_null $P129, vivify_3298
    new $P129, "Undef"
  vivify_3298:
    $P130 = $P122."new"($P127, "callmethod" :named("pasttype"), "!make" :named("name"), $P129 :named("node"))
.annotate 'line', 2825
    $P131 = $P117."!make"($P130)
.annotate 'line', 2824
    .return ($P131)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<next>" :anon :subid("639_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3771
    .param pmc param_3772
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2842
    .lex "self", param_3771
    .lex "$/", param_3772
    set $P117, param_3772
    unless_null $P117, vivify_3299
    new $P117, "Undef"
  vivify_3299:
    $P118 = "control"($P117, "CONTROL_LOOP_NEXT")
    .return ($P118)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<last>" :anon :subid("640_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3774
    .param pmc param_3775
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2843
    .lex "self", param_3774
    .lex "$/", param_3775
    set $P117, param_3775
    unless_null $P117, vivify_3300
    new $P117, "Undef"
  vivify_3300:
    $P118 = "control"($P117, "CONTROL_LOOP_LAST")
    .return ($P118)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<redo>" :anon :subid("641_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3777
    .param pmc param_3778
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2844
    .lex "self", param_3777
    .lex "$/", param_3778
    set $P117, param_3778
    unless_null $P117, vivify_3301
    new $P117, "Undef"
  vivify_3301:
    $P118 = "control"($P117, "CONTROL_LOOP_REDO")
    .return ($P118)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "infix:sym<~~>" :anon :subid("642_1329260321.776") :outer("472_1329260321.776")
    .param pmc param_3780
    .param pmc param_3781
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2846
    .lex "self", param_3780
    .lex "$/", param_3781
.annotate 'line', 2847
    set $P117, param_3781
    get_hll_global $P118, "GLOBAL"
    nqp_get_package_through_who $P119, $P118, "PAST"
    get_who $P121, $P119
    set $P122, $P121["Op"]
    set $P123, param_3781
    unless_null $P123, vivify_3302
    new $P123, "Undef"
  vivify_3302:
    $P124 = $P122."new"("callmethod" :named("pasttype"), "ACCEPTS" :named("name"), $P123 :named("node"))
    $P125 = $P117."!make"($P124)
.annotate 'line', 2846
    .return ($P125)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "_block3782"  :subid("643_1329260321.776") :outer("10_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2900
    .const 'Sub' $P3812 = "650_1329260321.776" 
    capture_lex $P3812
    .const 'Sub' $P3808 = "649_1329260321.776" 
    capture_lex $P3808
    .const 'Sub' $P3803 = "648_1329260321.776" 
    capture_lex $P3803
    .const 'Sub' $P3799 = "647_1329260321.776" 
    capture_lex $P3799
    .const 'Sub' $P3795 = "646_1329260321.776" 
    capture_lex $P3795
    .const 'Sub' $P3791 = "645_1329260321.776" 
    capture_lex $P3791
    .const 'Sub' $P3786 = "644_1329260321.776" 
    capture_lex $P3786
    .lex "$?PACKAGE", $P3784
    .lex "$?CLASS", $P3785
.annotate 'line', 2934
    .const 'Sub' $P3812 = "650_1329260321.776" 
    newclosure $P3818, $P3812
.annotate 'line', 2900
    .return ($P3818)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "metachar:sym<:my>" :anon :subid("644_1329260321.776") :outer("643_1329260321.776")
    .param pmc param_3787
    .param pmc param_3788
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2902
    .lex "self", param_3787
    .lex "$/", param_3788
.annotate 'line', 2903
    new $P104, "Undef"
    set $P3789, $P104
    .lex "$past", $P3789
    set $P3790, param_3788
    unless_null $P3790, vivify_3303
    $P3790 = root_new ['parrot';'Hash']
  vivify_3303:
    set $P105, $P3790["statement"]
    unless_null $P105, vivify_3304
    new $P105, "Undef"
  vivify_3304:
    $P106 = $P105."ast"()
    set $P3789, $P106
.annotate 'line', 2904
    set $P105, param_3788
    get_hll_global $P106, "GLOBAL"
    nqp_get_package_through_who $P107, $P106, "PAST"
    get_who $P108, $P107
    set $P109, $P108["Regex"]
    set $P110, $P3789
    unless_null $P110, vivify_3305
    new $P110, "Undef"
  vivify_3305:
    set $P111, param_3788
    unless_null $P111, vivify_3306
    new $P111, "Undef"
  vivify_3306:
    $P112 = $P109."new"($P110, "pastnode" :named("pasttype"), "declarative" :named("subtype"), $P111 :named("node"))
    $P113 = $P105."!make"($P112)
.annotate 'line', 2902
    .return ($P113)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "metachar:sym<{ }>" :anon :subid("645_1329260321.776") :outer("643_1329260321.776")
    .param pmc param_3792
    .param pmc param_3793
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2908
    .lex "self", param_3792
    .lex "$/", param_3793
.annotate 'line', 2909
    set $P104, param_3793
    get_hll_global $P105, "GLOBAL"
    nqp_get_package_through_who $P106, $P105, "PAST"
    get_who $P107, $P106
    set $P108, $P107["Regex"]
    set $P3794, param_3793
    unless_null $P3794, vivify_3307
    $P3794 = root_new ['parrot';'Hash']
  vivify_3307:
    set $P109, $P3794["codeblock"]
    unless_null $P109, vivify_3308
    new $P109, "Undef"
  vivify_3308:
    $P110 = $P109."ast"()
    set $P111, param_3793
    unless_null $P111, vivify_3309
    new $P111, "Undef"
  vivify_3309:
    $P112 = $P108."new"($P110, "pastnode" :named("pasttype"), $P111 :named("node"))
    $P113 = $P104."!make"($P112)
.annotate 'line', 2908
    .return ($P113)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "metachar:sym<nqpvar>" :anon :subid("646_1329260321.776") :outer("643_1329260321.776")
    .param pmc param_3796
    .param pmc param_3797
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2913
    .lex "self", param_3796
    .lex "$/", param_3797
.annotate 'line', 2914
    set $P104, param_3797
    get_hll_global $P105, "GLOBAL"
    nqp_get_package_through_who $P106, $P105, "PAST"
    get_who $P107, $P106
    set $P108, $P107["Regex"]
    set $P3798, param_3797
    unless_null $P3798, vivify_3310
    $P3798 = root_new ['parrot';'Hash']
  vivify_3310:
    set $P109, $P3798["var"]
    unless_null $P109, vivify_3311
    new $P109, "Undef"
  vivify_3311:
    $P110 = $P109."ast"()
    set $P111, param_3797
    unless_null $P111, vivify_3312
    new $P111, "Undef"
  vivify_3312:
    $P112 = $P108."new"("!INTERPOLATE", $P110, "subrule" :named("pasttype"), "method" :named("subtype"), $P111 :named("node"))
    $P113 = $P104."!make"($P112)
.annotate 'line', 2913
    .return ($P113)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "assertion:sym<{ }>" :anon :subid("647_1329260321.776") :outer("643_1329260321.776")
    .param pmc param_3800
    .param pmc param_3801
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2918
    .lex "self", param_3800
    .lex "$/", param_3801
.annotate 'line', 2919
    set $P104, param_3801
    get_hll_global $P105, "GLOBAL"
    nqp_get_package_through_who $P106, $P105, "PAST"
    get_who $P107, $P106
    set $P108, $P107["Regex"]
    set $P3802, param_3801
    unless_null $P3802, vivify_3313
    $P3802 = root_new ['parrot';'Hash']
  vivify_3313:
    set $P109, $P3802["codeblock"]
    unless_null $P109, vivify_3314
    new $P109, "Undef"
  vivify_3314:
    $P110 = $P109."ast"()
    set $P111, param_3801
    unless_null $P111, vivify_3315
    new $P111, "Undef"
  vivify_3315:
    $P112 = $P108."new"("!INTERPOLATE_REGEX", $P110, "subrule" :named("pasttype"), "method" :named("subtype"), $P111 :named("node"))
    $P113 = $P104."!make"($P112)
.annotate 'line', 2918
    .return ($P113)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "assertion:sym<?{ }>" :anon :subid("648_1329260321.776") :outer("643_1329260321.776")
    .param pmc param_3804
    .param pmc param_3805
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2923
    .lex "self", param_3804
    .lex "$/", param_3805
.annotate 'line', 2924
    set $P104, param_3805
    get_hll_global $P105, "GLOBAL"
    nqp_get_package_through_who $P106, $P105, "PAST"
    get_who $P107, $P106
    set $P108, $P107["Regex"]
    set $P3806, param_3805
    unless_null $P3806, vivify_3316
    $P3806 = root_new ['parrot';'Hash']
  vivify_3316:
    set $P109, $P3806["codeblock"]
    unless_null $P109, vivify_3317
    new $P109, "Undef"
  vivify_3317:
    $P110 = $P109."ast"()
.annotate 'line', 2925
    set $P3807, param_3805
    unless_null $P3807, vivify_3318
    $P3807 = root_new ['parrot';'Hash']
  vivify_3318:
    set $P111, $P3807["zw"]
    unless_null $P111, vivify_3319
    new $P111, "Undef"
  vivify_3319:
    set $S100, $P111
    iseq $I100, $S100, "!"
.annotate 'line', 2924
    set $P112, param_3805
    unless_null $P112, vivify_3320
    new $P112, "Undef"
  vivify_3320:
    $P113 = $P108."new"($P110, "zerowidth" :named("subtype"), $I100 :named("negate"), "pastnode" :named("pasttype"), $P112 :named("node"))
    $P114 = $P104."!make"($P113)
.annotate 'line', 2923
    .return ($P114)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "assertion:sym<var>" :anon :subid("649_1329260321.776") :outer("643_1329260321.776")
    .param pmc param_3809
    .param pmc param_3810
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2929
    .lex "self", param_3809
    .lex "$/", param_3810
.annotate 'line', 2930
    set $P104, param_3810
    get_hll_global $P105, "GLOBAL"
    nqp_get_package_through_who $P106, $P105, "PAST"
    get_who $P107, $P106
    set $P108, $P107["Regex"]
    set $P3811, param_3810
    unless_null $P3811, vivify_3321
    $P3811 = root_new ['parrot';'Hash']
  vivify_3321:
    set $P109, $P3811["var"]
    unless_null $P109, vivify_3322
    new $P109, "Undef"
  vivify_3322:
    $P110 = $P109."ast"()
    set $P111, param_3810
    unless_null $P111, vivify_3323
    new $P111, "Undef"
  vivify_3323:
    $P112 = $P108."new"("!INTERPOLATE_REGEX", $P110, "subrule" :named("pasttype"), "method" :named("subtype"), $P111 :named("node"))
    $P113 = $P104."!make"($P112)
.annotate 'line', 2929
    .return ($P113)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "codeblock" :anon :subid("650_1329260321.776") :outer("643_1329260321.776")
    .param pmc param_3813
    .param pmc param_3814
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2934
    .lex "self", param_3813
    .lex "$/", param_3814
.annotate 'line', 2935
    new $P104, "Undef"
    set $P3815, $P104
    .lex "$block", $P3815
.annotate 'line', 2937
    new $P105, "Undef"
    set $P3816, $P105
    .lex "$past", $P3816
.annotate 'line', 2935
    set $P3817, param_3814
    unless_null $P3817, vivify_3324
    $P3817 = root_new ['parrot';'Hash']
  vivify_3324:
    set $P106, $P3817["block"]
    unless_null $P106, vivify_3325
    new $P106, "Undef"
  vivify_3325:
    $P107 = $P106."ast"()
    set $P3815, $P107
.annotate 'line', 2936
    set $P106, $P3815
    unless_null $P106, vivify_3326
    new $P106, "Undef"
  vivify_3326:
    $P106."blocktype"("immediate")
.annotate 'line', 2938
    get_hll_global $P106, "GLOBAL"
    nqp_get_package_through_who $P107, $P106, "PAST"
    get_who $P108, $P107
    set $P109, $P108["Stmts"]
.annotate 'line', 2939
    get_hll_global $P110, "GLOBAL"
    nqp_get_package_through_who $P111, $P110, "PAST"
    get_who $P112, $P111
    set $P113, $P112["Op"]
.annotate 'line', 2940
    get_hll_global $P114, "GLOBAL"
    nqp_get_package_through_who $P115, $P114, "PAST"
    get_who $P116, $P115
    set $P117, $P116["Var"]
    $P118 = $P117."new"("$/" :named("name"))
.annotate 'line', 2941
    get_hll_global $P119, "GLOBAL"
    nqp_get_package_through_who $P120, $P119, "PAST"
    get_who $P121, $P120
    set $P122, $P121["Op"]
.annotate 'line', 2942
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Var"]
    $P127 = $P126."new"(unicode:"$\x{a2}" :named("name"))
    $P128 = $P122."new"($P127, "MATCH" :named("name"), "callmethod" :named("pasttype"))
.annotate 'line', 2941
    $P129 = $P113."new"($P118, $P128, "bind_6model" :named("pasttype"))
.annotate 'line', 2939
    set $P130, $P3815
    unless_null $P130, vivify_3327
    new $P130, "Undef"
  vivify_3327:
    $P131 = $P109."new"($P129, $P130)
.annotate 'line', 2938
    set $P3816, $P131
.annotate 'line', 2950
    set $P106, param_3814
    set $P107, $P3816
    unless_null $P107, vivify_3328
    new $P107, "Undef"
  vivify_3328:
    $P108 = $P106."!make"($P107)
.annotate 'line', 2934
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Compiler"]
.sub "_block3819"  :subid("651_1329260321.776") :outer("10_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2955
    .lex "$?PACKAGE", $P3821
    .lex "$?CLASS", $P3822
    .return ()
.end


.HLL "nqp"

.namespace []
.sub "_block3825" :load :anon :subid("652_1329260321.776")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1
    .const '' $P3827 = "10_1329260321.776" 
    $P111 = $P3827()
    .return ($P111)
.end

