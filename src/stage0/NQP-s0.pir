.include 'cclass.pasm'
.include 'except_severity.pasm'
.include 'except_types.pasm'
.include 'iglobals.pasm'
.include 'interpinfo.pasm'
.include 'iterator.pasm'
.include 'sysinfo.pasm'
.include 'stat.pasm'
.include 'datatypes.pasm'
.include 'libpaths.pasm'
.loadlib "nqp_group"
.loadlib "nqp_ops"
.loadlib "nqp_bigint_ops"
.loadlib "trans_ops"
.loadlib "io_ops"
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_1_1358115338.889") :anon :lex
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc _lex_param_0 :slurpy 
    .const 'Sub' $P5064 = 'cuid_374_1358115338.889' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_375_1358115338.889' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_33_1358115338.889' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_224_1358115338.889' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_245_1358115338.889' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_411_1358115338.889' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_412_1358115338.889' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_413_1358115338.889' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_414_1358115338.889' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_415_1358115338.889' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_416_1358115338.889' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_417_1358115338.889' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_418_1358115338.889' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_358_1358115338.889' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_372_1358115338.889' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_373_1358115338.889' 
    capture_lex $P5064 
    .lex "GLOBALish", $P101 
    .lex "$?PACKAGE", $P102 
    .lex "EXPORT", $P103 
    .lex "$ops", $P104 
    .lex "$nqpcomp", $P105 
    .lex "@clo", $P106 
    .lex "&MAIN", $P107 
    .lex "&hll-config", $P108 
    .lex "@ARGS", _lex_param_0 
    .local pmc ctxsave 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P104, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P105, $P5002
    new $P5003, 'ResizablePMCArray'
    set $P106, $P5003
    .const 'Sub' $P5004 = 'cuid_374_1358115338.889' 
    capture_lex $P5004
    set $P107, $P5004
    .const 'Sub' $P5005 = 'cuid_375_1358115338.889' 
    capture_lex $P5005
    set $P108, $P5005
    find_dynamic_lex $P5006, "$*CTXSAVE"
    set ctxsave, $P5006
    isnull $I5001, ctxsave
    if $I5001 goto unless10_end11 
    can $I5002, ctxsave, "ctxsave"
    box $P5009, $I5002
    set $P5008, $P5009
    unless $I5002 goto if11_end13 
    $P5007 = ctxsave."ctxsave"()
    set $P5008, $P5007
  if11_end13:
  unless10_end11:
.annotate 'line', 1
    .const 'Sub' $P5010 = 'cuid_33_1358115338.889' 
    capture_lex $P5010
    $P5011 = $P5010()
    .const 'Sub' $P5012 = 'cuid_224_1358115338.889' 
    capture_lex $P5012
    $P5013 = $P5012()
    .const 'Sub' $P5014 = 'cuid_245_1358115338.889' 
    capture_lex $P5014
    $P5015 = $P5014()
.annotate 'line', 1446
    nqp_get_sc_object $P5019, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Compiler"]
    unless_null $P5016, fallback3749
    nqp_get_sc_object $P5020, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5016, $P5020
  fallback3749:
    $P5021 = $P5016."operations"()
    set $P104, $P5021
.annotate 'line', 1448
    $P104."add_hll_pirop_mapping"("nqp", "nqpmultidispatch", "multi_dispatch_over_lexical_candidates", "P")
.annotate 'line', 1450
    .const 'Sub' $P5023 = 'cuid_411_1358115338.889' 
    capture_lex $P5023
    newclosure $P5022, $P5023
    $P104."add_hll_op"("nqp", "preinc", $P5022)
.annotate 'line', 1465
    .const 'Sub' $P5025 = 'cuid_412_1358115338.889' 
    capture_lex $P5025
    newclosure $P5024, $P5025
    $P104."add_hll_op"("nqp", "predec", $P5024)
.annotate 'line', 1480
    .const 'Sub' $P5027 = 'cuid_413_1358115338.889' 
    capture_lex $P5027
    newclosure $P5026, $P5027
    $P104."add_hll_op"("nqp", "postinc", $P5026)
.annotate 'line', 1504
    .const 'Sub' $P5029 = 'cuid_414_1358115338.889' 
    capture_lex $P5029
    newclosure $P5028, $P5029
    $P104."add_hll_op"("nqp", "postdec", $P5028)
.annotate 'line', 1528
    .const 'Sub' $P5031 = 'cuid_415_1358115338.889' 
    capture_lex $P5031
    newclosure $P5030, $P5031
    $P104."add_hll_op"("nqp", "numify", $P5030)
.annotate 'line', 1532
    .const 'Sub' $P5033 = 'cuid_416_1358115338.889' 
    capture_lex $P5033
    newclosure $P5032, $P5033
    $P104."add_hll_op"("nqp", "stringify", $P5032)
.annotate 'line', 1536
    .const 'Sub' $P5035 = 'cuid_417_1358115338.889' 
    capture_lex $P5035
    newclosure $P5034, $P5035
    $P104."add_hll_op"("nqp", "eqaddr", $P5034)
.annotate 'line', 1544
    .const 'Sub' $P5037 = 'cuid_418_1358115338.889' 
    capture_lex $P5037
    newclosure $P5036, $P5037
    $P104."add_hll_op"("nqp", "falsey", $P5036)
    .const 'Sub' $P5038 = 'cuid_358_1358115338.889' 
    capture_lex $P5038
    $P5039 = $P5038()
    .const 'Sub' $P5040 = 'cuid_372_1358115338.889' 
    capture_lex $P5040
    $P5041 = $P5040()
    .const 'Sub' $P5042 = 'cuid_373_1358115338.889' 
    capture_lex $P5042
    $P5043 = $P5042()
.annotate 'line', 3227
    nqp_get_sc_object $P5047, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5046, $P5047, "NQP"
    get_who $P5045, $P5046
    set $P5044, $P5045["Compiler"]
    unless_null $P5044, fallback5730
    nqp_get_sc_object $P5048, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5044, $P5048
  fallback5730:
    $P5049 = $P5044."new"()
    set $P105, $P5049
.annotate 'line', 3228
    $P105."language"("nqp")
.annotate 'line', 3229
    nqp_get_sc_object $P5053, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5052, $P5053, "NQP"
    get_who $P5051, $P5052
    set $P5050, $P5051["Grammar"]
    unless_null $P5050, fallback5731
    nqp_get_sc_object $P5054, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5050, $P5054
  fallback5731:
    $P105."parsegrammar"($P5050)
.annotate 'line', 3230
    nqp_get_sc_object $P5058, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5057, $P5058, "NQP"
    get_who $P5056, $P5057
    set $P5055, $P5056["Actions"]
    unless_null $P5055, fallback5732
    nqp_get_sc_object $P5059, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5055, $P5059
  fallback5732:
    $P105."parseactions"($P5055)
.annotate 'line', 3231
    $P5060 = $P105."config"()
    "&hll-config"($P5060)
.annotate 'line', 3234
    $P5061 = $P105."commandline_options"()
    set $P106, $P5061
.annotate 'line', 3235
    $P106."push"("parsetrace")
.annotate 'line', 3236
    $P106."push"("setting=s")
.annotate 'line', 3237
    $P106."push"("setting-path=s")
.annotate 'line', 3238
    $P106."push"("module-path=s")
.annotate 'line', 3239
    $P106."push"("vmlibs=s")
.annotate 'line', 3240
    $P106."push"("no-regex-lib")
.annotate 'line', 3241
    $P106."push"("old-regex-lib")
.annotate 'line', 3242
    $P106."push"("dynext=s")
    unless _lex_param_0 goto if1753_end5734 
    .const 'Sub' $P5062 = "cuid_374_1358115338.889" 
    $P5063 = $P5062(_lex_param_0 :flat)
  if1753_end5734:
    .return () 
.end
.HLL "nqp"
.namespace []
.sub "MAIN" :subid("cuid_374_1358115338.889") :anon :lex :outer("cuid_1_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3244
    .param pmc _lex_param_0 
    .lex "@ARGS", _lex_param_0 
.annotate 'line', 3246
    find_lex $P5001, "$nqpcomp"
    $P5001."command_line"(_lex_param_0, "utf8" :named("encoding"), "ascii iso-8859-1" :named("transcode"))
.annotate 'line', 3249
    find_lex $P5002, "$nqpcomp"
    $P5003 = $P5002."nqpevent"()
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "hll-config" :subid("cuid_375_1358115338.889") :anon :lex :outer("cuid_1_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3253
    .param pmc _lex_param_0 
    .lex "$config", _lex_param_0 
    box $P5001, "2012.12-35-g94adde8"
    set _lex_param_0["version"], $P5001
    box $P5002, "2013-01-13T22:15:38Z"
    set _lex_param_0["build-date"], $P5002
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_33_1358115338.889") :anon :lex :outer("cuid_1_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 8
    .const 'Sub' $P5031 = 'cuid_2_1358115338.889' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_3_1358115338.889' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_4_1358115338.889' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_5_1358115338.889' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_6_1358115338.889' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_7_1358115338.889' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_8_1358115338.889' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_9_1358115338.889' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_10_1358115338.889' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_11_1358115338.889' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_12_1358115338.889' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_16_1358115338.889' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_17_1358115338.889' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_18_1358115338.889' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_19_1358115338.889' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_20_1358115338.889' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_21_1358115338.889' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_22_1358115338.889' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_23_1358115338.889' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_24_1358115338.889' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_25_1358115338.889' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_26_1358115338.889' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_27_1358115338.889' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_28_1358115338.889' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_29_1358115338.889' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_30_1358115338.889' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_31_1358115338.889' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_32_1358115338.889' 
    capture_lex $P5031 
    .lex "$loader", $P101 
    .lex "$?PACKAGE", $P102 
    .lex "$?CLASS", $P103 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    .const 'Sub' $P5002 = 'cuid_2_1358115338.889' 
    capture_lex $P5002
    .const 'Sub' $P5003 = 'cuid_3_1358115338.889' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_4_1358115338.889' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_5_1358115338.889' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_6_1358115338.889' 
    capture_lex $P5006
    get_hll_global $P5007, "ModuleLoader"
    set $P101, $P5007
    .const 'Sub' $P5008 = 'cuid_7_1358115338.889' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_8_1358115338.889' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_9_1358115338.889' 
    capture_lex $P5010
    .const 'Sub' $P5011 = 'cuid_10_1358115338.889' 
    capture_lex $P5011
    .const 'Sub' $P5012 = 'cuid_11_1358115338.889' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_12_1358115338.889' 
    capture_lex $P5013
    .const 'Sub' $P5014 = 'cuid_16_1358115338.889' 
    capture_lex $P5014
    .const 'Sub' $P5015 = 'cuid_17_1358115338.889' 
    capture_lex $P5015
    .const 'Sub' $P5016 = 'cuid_18_1358115338.889' 
    capture_lex $P5016
    .const 'Sub' $P5017 = 'cuid_19_1358115338.889' 
    capture_lex $P5017
    .const 'Sub' $P5018 = 'cuid_20_1358115338.889' 
    capture_lex $P5018
    .const 'Sub' $P5019 = 'cuid_21_1358115338.889' 
    capture_lex $P5019
    .const 'Sub' $P5020 = 'cuid_22_1358115338.889' 
    capture_lex $P5020
    .const 'Sub' $P5021 = 'cuid_23_1358115338.889' 
    capture_lex $P5021
    .const 'Sub' $P5022 = 'cuid_24_1358115338.889' 
    capture_lex $P5022
    .const 'Sub' $P5023 = 'cuid_25_1358115338.889' 
    capture_lex $P5023
    .const 'Sub' $P5024 = 'cuid_26_1358115338.889' 
    capture_lex $P5024
    .const 'Sub' $P5025 = 'cuid_27_1358115338.889' 
    capture_lex $P5025
    .const 'Sub' $P5026 = 'cuid_28_1358115338.889' 
    capture_lex $P5026
    .const 'Sub' $P5027 = 'cuid_29_1358115338.889' 
    capture_lex $P5027
    .const 'Sub' $P5028 = 'cuid_30_1358115338.889' 
    capture_lex $P5028
    .const 'Sub' $P5029 = 'cuid_31_1358115338.889' 
    capture_lex $P5029
    .const 'Sub' $P5030 = 'cuid_32_1358115338.889' 
    capture_lex $P5030
    .return ($P5030) 
.end
.HLL "nqp"
.namespace []
.sub "BUILD" :subid("cuid_2_1358115338.889") :anon :lex :outer("cuid_33_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 30
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 :slurpy :named 
    .const 'Sub' $P5032 = 'cuid_376_1358115338.889' 
    capture_lex $P5032 
    .lex "self", _lex_param_0 
    .lex "%opts", _lex_param_1 
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 3
    new $P5003, 'ResizablePMCArray'
    repr_bind_attr_obj $P5001, $P5002, "@!BLOCKS", $P5003
    nqp_decontainerize $P5004, _lex_param_0
    nqp_get_sc_object $P5005, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 3
    new $P5006, 'Hash'
    repr_bind_attr_obj $P5004, $P5005, "%!code_objects_to_fix_up", $P5006
    nqp_decontainerize $P5007, _lex_param_0
    nqp_get_sc_object $P5008, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 3
    new $P5009, 'Hash'
    repr_bind_attr_obj $P5007, $P5008, "%!code_object_types", $P5009
    nqp_decontainerize $P5010, _lex_param_0
    nqp_get_sc_object $P5011, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 3
    new $P5012, 'Hash'
    repr_bind_attr_obj $P5010, $P5011, "%!code_object_fixup_list", $P5012
    nqp_decontainerize $P5013, _lex_param_0
    nqp_get_sc_object $P5014, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 3
    new $P5015, 'Hash'
    repr_bind_attr_obj $P5013, $P5014, "%!code_stub_sc_idx", $P5015
    find_dynamic_lex $P5018, "%*COMPILING"
    unless_null $P5018, fallback16
    nqp_get_sc_object $P5021, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["%COMPILING"]
    unless_null $P5019, fallback17
    nqp_get_sc_object $P5023, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5022, $P5023
    new $P5024, 'Hash'
    set $P5022["%COMPILING"], $P5024
    set $P5019, $P5024
  fallback17:
    unless_null $P5019, vivi_1318
    die "Contextual %*COMPILING not found"
    box $P5025, "Contextual %*COMPILING not found"
    set $P5019, $P5025
  vivi_1318:
    set $P5018, $P5019
  fallback16:
    set $P5017, $P5018["%?OPTIONS"]
    unless_null $P5017, fallback19
    nqp_get_sc_object $P5026, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5017, $P5026
  fallback19:
    set $P5016, $P5017["dynext"]
    unless_null $P5016, fallback20
    nqp_get_sc_object $P5027, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5016, $P5027
  fallback20:
    defined $I5001, $P5016
    box $P5031, $I5001
    set $P5030, $P5031
    unless $I5001 goto if12_end15 
    .const 'Sub' $P5028 = 'cuid_376_1358115338.889' 
    capture_lex $P5028
    $P5029 = $P5028()
    set $P5030, $P5029
  if12_end15:
    .return ($P5030) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_376_1358115338.889") :anon :lex :outer("cuid_2_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 37
    .lex "$dynext_path", $P101 
    .lex "@dynext_paths", $P102 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    set $P102, $P5002
    find_dynamic_lex $P5005, "%*COMPILING"
    unless_null $P5005, fallback21
    nqp_get_sc_object $P5008, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["%COMPILING"]
    unless_null $P5006, fallback22
    nqp_get_sc_object $P5010, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5009, $P5010
    new $P5011, 'Hash'
    set $P5009["%COMPILING"], $P5011
    set $P5006, $P5011
  fallback22:
    unless_null $P5006, vivi_1423
    die "Contextual %*COMPILING not found"
    box $P5012, "Contextual %*COMPILING not found"
    set $P5006, $P5012
  vivi_1423:
    set $P5005, $P5006
  fallback21:
    set $P5004, $P5005["%?OPTIONS"]
    unless_null $P5004, fallback24
    nqp_get_sc_object $P5013, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5013
  fallback24:
    set $P5003, $P5004["dynext"]
    unless_null $P5003, fallback25
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5003, $P5014
  fallback25:
    set $P101, $P5003
    getinterp $P5017
    set $P5016, $P5017[.IGLOBALS_LIB_PATHS]
    unless_null $P5016, fallback26
    nqp_get_sc_object $P5018, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5016, $P5018
  fallback26:
    set $P5015, $P5016[.PARROT_LIB_PATH_DYNEXT]
    unless_null $P5015, fallback27
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5015, $P5019
  fallback27:
    set $P102, $P5015
.annotate 'line', 41
    $P5020 = $P102."push"($P101)
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "push_lexpad" :subid("cuid_3_1358115338.889") :anon :lex :outer("cuid_33_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 46
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$pad", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
.annotate 'line', 48
    nqp_get_sc_object $P5005, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Block"]
    unless_null $P5002, fallback28
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5006
  fallback28:
    nqp_get_sc_object $P5010, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Stmts"]
    unless_null $P5007, fallback29
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5007, $P5011
  fallback29:
    $P5012 = $P5007."new"()
    $P5013 = $P5002."new"($P5012, _lex_param_1 :named("node"))
    set $P101, $P5013
    nqp_decontainerize $P5014, _lex_param_0
    nqp_get_sc_object $P5015, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 3
    repr_get_attr_obj $P5016, $P5014, $P5015, "@!BLOCKS"
    set $N5001, $P5016
    unless $N5001 goto if15_end31 
.annotate 'line', 49
    nqp_decontainerize $P5018, _lex_param_0
    nqp_get_sc_object $P5019, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 3
    repr_get_attr_obj $P5020, $P5018, $P5019, "@!BLOCKS"
    nqp_decontainerize $P5021, _lex_param_0
    nqp_get_sc_object $P5022, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 3
    repr_get_attr_obj $P5023, $P5021, $P5022, "@!BLOCKS"
    set $N5003, $P5023
    set $N5004, 1
    sub $N5002, $N5003, $N5004
    set $I5001, $N5002
    set $P5017, $P5020[$I5001]
    unless_null $P5017, fallback32
    nqp_get_sc_object $P5024, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5017, $P5024
  fallback32:
    set $P101["outer"], $P5017
  if15_end31:
    nqp_decontainerize $P5025, _lex_param_0
    nqp_get_sc_object $P5026, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 3
    repr_get_attr_obj $P5027, $P5025, $P5026, "@!BLOCKS"
    nqp_decontainerize $P5028, _lex_param_0
    nqp_get_sc_object $P5029, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 3
    repr_get_attr_obj $P5030, $P5028, $P5029, "@!BLOCKS"
    set $N5005, $P5030
    set $I5002, $N5005
    set $P5027[$I5002], $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "pop_lexpad" :subid("cuid_4_1358115338.889") :anon :lex :outer("cuid_33_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 57
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
.annotate 'line', 58
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 3
    repr_get_attr_obj $P5003, $P5001, $P5002, "@!BLOCKS"
    $P5004 = $P5003."pop"()
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "cur_lexpad" :subid("cuid_5_1358115338.889") :anon :lex :outer("cuid_33_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 62
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
    nqp_decontainerize $P5002, _lex_param_0
    nqp_get_sc_object $P5003, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 3
    repr_get_attr_obj $P5004, $P5002, $P5003, "@!BLOCKS"
    nqp_decontainerize $P5005, _lex_param_0
    nqp_get_sc_object $P5006, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 3
    repr_get_attr_obj $P5007, $P5005, $P5006, "@!BLOCKS"
    set $N5002, $P5007
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    set $I5001, $N5001
    set $P5001, $P5004[$I5001]
    unless_null $P5001, fallback33
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5008
  fallback33:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "get_legacy_block_list" :subid("cuid_6_1358115338.889") :anon :lex :outer("cuid_33_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 67
    .param pmc _lex_param_0 
    .lex "@x", $P101 
    .lex "self", _lex_param_0 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_decontainerize $P5003, _lex_param_0
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 3
    repr_get_attr_obj $P5005, $P5003, $P5004, "@!BLOCKS"
    clone $P5002, $P5005
    set $P101, $P5002
.annotate 'line', 69
    $P101."reverse"()
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "load_setting" :subid("cuid_7_1358115338.889") :anon :lex :outer("cuid_33_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 80
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5005 = 'cuid_377_1358115338.889' 
    capture_lex $P5005 
    .lex "self", _lex_param_0 
    .lex "$setting_name", _lex_param_1 
    root_new $P101, ['parrot';'Continuation']
    set_label $P101, lexotic_34
    .lex "RETURN", $P101
    set $S5001, _lex_param_1
    isne $I5001, $S5001, "NULL"
    box $P5004, $I5001
    set $P5003, $P5004
    unless $I5001 goto if16_end37 
    .const 'Sub' $P5001 = 'cuid_377_1358115338.889' 
    capture_lex $P5001
    $P5002 = $P5001()
    set $P5003, $P5002
  if16_end37:
    goto lexotic_35
  lexotic_34:
    .get_results ($P5003)
  lexotic_35:
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_377_1358115338.889") :anon :lex :outer("cuid_7_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 82
    .lex "$setting", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    find_dynamic_lex $P5003, "%*COMPILING"
    unless_null $P5003, fallback38
    nqp_get_sc_object $P5006, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["%COMPILING"]
    unless_null $P5004, fallback39
    nqp_get_sc_object $P5008, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5007, $P5008
    new $P5009, 'Hash'
    set $P5007["%COMPILING"], $P5009
    set $P5004, $P5009
  fallback39:
    unless_null $P5004, vivi_1740
    die "Contextual %*COMPILING not found"
    box $P5010, "Contextual %*COMPILING not found"
    set $P5004, $P5010
  vivi_1740:
    set $P5003, $P5004
  fallback38:
    set $P5002, $P5003["%?OPTIONS"]
    unless_null $P5002, fallback41
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5011
  fallback41:
.annotate 'line', 87
    find_lex $P5012, "$loader"
    find_lex $P5013, "$setting_name"
    $P5014 = $P5012."load_setting"($P5013)
    set $P5002["outer_ctx"], $P5014
    set $P101, $P5014
.annotate 'line', 90
    find_lex $P5016, "self"
    nqp_decontainerize $P5015, $P5016
    $P5017 = $P5015."is_precompilation_mode"()
    unless $P5017 goto if18_else42 
.annotate 'line', 91
    find_lex $P5019, "self"
    nqp_decontainerize $P5018, $P5019
    nqp_get_sc_object $P5023, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Stmts"]
    unless_null $P5020, fallback44
    nqp_get_sc_object $P5024, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5020, $P5024
  fallback44:
.annotate 'line', 92
    nqp_get_sc_object $P5028, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["VM"]
    unless_null $P5025, fallback45
    nqp_get_sc_object $P5029, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5025, $P5029
  fallback45:
.annotate 'line', 94
    nqp_get_sc_object $P5033, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["SVal"]
    unless_null $P5030, fallback46
    nqp_get_sc_object $P5034, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5030, $P5034
  fallback46:
    $P5035 = $P5030."new"("ModuleLoader.pbc" :named("value"))
    $P5036 = $P5025."new"($P5035, "load_bytecode vs" :named("pirop"))
.annotate 'line', 96
    nqp_get_sc_object $P5040, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5039, $P5040, "QAST"
    get_who $P5038, $P5039
    set $P5037, $P5038["Op"]
    unless_null $P5037, fallback47
    nqp_get_sc_object $P5041, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5037, $P5041
  fallback47:
.annotate 'line', 98
    nqp_get_sc_object $P5045, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["BVal"]
    unless_null $P5042, fallback48
    nqp_get_sc_object $P5046, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5042, $P5046
  fallback48:
    find_dynamic_lex $P5047, "$*UNIT"
    unless_null $P5047, fallback49
    nqp_get_sc_object $P5050, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5049, $P5050
    set $P5048, $P5049["$UNIT"]
    unless_null $P5048, fallback50
    nqp_get_sc_object $P5051, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5048, $P5051
  fallback50:
    unless_null $P5048, vivi_1951
    die "Contextual $*UNIT not found"
    box $P5052, "Contextual $*UNIT not found"
    set $P5048, $P5052
  vivi_1951:
    set $P5047, $P5048
  fallback49:
    $P5053 = $P5042."new"($P5047 :named("value"))
.annotate 'line', 99
    nqp_get_sc_object $P5057, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5056, $P5057, "QAST"
    get_who $P5055, $P5056
    set $P5054, $P5055["Op"]
    unless_null $P5054, fallback52
    nqp_get_sc_object $P5058, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5054, $P5058
  fallback52:
.annotate 'line', 101
    nqp_get_sc_object $P5062, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5061, $P5062, "QAST"
    get_who $P5060, $P5061
    set $P5059, $P5060["VM"]
    unless_null $P5059, fallback53
    nqp_get_sc_object $P5063, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5059, $P5063
  fallback53:
.annotate 'line', 103
    nqp_get_sc_object $P5067, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5066, $P5067, "QAST"
    get_who $P5065, $P5066
    set $P5064, $P5065["SVal"]
    unless_null $P5064, fallback54
    nqp_get_sc_object $P5068, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5064, $P5068
  fallback54:
    $P5069 = $P5064."new"("ModuleLoader" :named("value"))
    $P5070 = $P5059."new"($P5069, "get_hll_global Ps" :named("pirop"))
.annotate 'line', 105
    nqp_get_sc_object $P5074, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5073, $P5074, "QAST"
    get_who $P5072, $P5073
    set $P5071, $P5072["SVal"]
    unless_null $P5071, fallback55
    nqp_get_sc_object $P5075, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5071, $P5075
  fallback55:
    find_lex $P5076, "$setting_name"
    $P5077 = $P5071."new"($P5076 :named("value"))
    $P5078 = $P5054."new"($P5070, $P5077, "callmethod" :named("op"), "load_setting" :named("name"))
    $P5079 = $P5037."new"($P5053, $P5078, "callmethod" :named("op"), "set_outer_ctx" :named("name"))
    $P5080 = $P5020."new"($P5036, $P5079)
    $P5081 = $P5018."add_load_dependency_task"($P5080 :named("deserialize_past"))
    goto if18_end43
  if18_else42:
.annotate 'line', 110
.annotate 'line', 112
    find_lex $P5083, "self"
    nqp_decontainerize $P5082, $P5083
    nqp_get_sc_object $P5087, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5086, $P5087, "QAST"
    get_who $P5085, $P5086
    set $P5084, $P5085["Op"]
    unless_null $P5084, fallback56
    nqp_get_sc_object $P5088, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5084, $P5088
  fallback56:
.annotate 'line', 114
    nqp_get_sc_object $P5092, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5091, $P5092, "QAST"
    get_who $P5090, $P5091
    set $P5089, $P5090["BVal"]
    unless_null $P5089, fallback57
    nqp_get_sc_object $P5093, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5089, $P5093
  fallback57:
    find_dynamic_lex $P5094, "$*UNIT"
    unless_null $P5094, fallback58
    nqp_get_sc_object $P5097, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5096, $P5097
    set $P5095, $P5096["$UNIT"]
    unless_null $P5095, fallback59
    nqp_get_sc_object $P5098, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5095, $P5098
  fallback59:
    unless_null $P5095, vivi_2060
    die "Contextual $*UNIT not found"
    box $P5099, "Contextual $*UNIT not found"
    set $P5095, $P5099
  vivi_2060:
    set $P5094, $P5095
  fallback58:
    $P5100 = $P5089."new"($P5094 :named("value"))
.annotate 'line', 115
    nqp_get_sc_object $P5104, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5103, $P5104, "QAST"
    get_who $P5102, $P5103
    set $P5101, $P5102["Op"]
    unless_null $P5101, fallback61
    nqp_get_sc_object $P5105, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5101, $P5105
  fallback61:
.annotate 'line', 117
    nqp_get_sc_object $P5109, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5108, $P5109, "QAST"
    get_who $P5107, $P5108
    set $P5106, $P5107["VM"]
    unless_null $P5106, fallback62
    nqp_get_sc_object $P5110, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5106, $P5110
  fallback62:
.annotate 'line', 119
    nqp_get_sc_object $P5114, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5113, $P5114, "QAST"
    get_who $P5112, $P5113
    set $P5111, $P5112["SVal"]
    unless_null $P5111, fallback63
    nqp_get_sc_object $P5115, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5111, $P5115
  fallback63:
    $P5116 = $P5111."new"("ModuleLoader" :named("value"))
    $P5117 = $P5106."new"($P5116, "get_hll_global Ps" :named("pirop"))
.annotate 'line', 121
    nqp_get_sc_object $P5121, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5120, $P5121, "QAST"
    get_who $P5119, $P5120
    set $P5118, $P5119["SVal"]
    unless_null $P5118, fallback64
    nqp_get_sc_object $P5122, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5118, $P5122
  fallback64:
    find_lex $P5123, "$setting_name"
    $P5124 = $P5118."new"($P5123 :named("value"))
    $P5125 = $P5101."new"($P5117, $P5124, "callmethod" :named("op"), "load_setting" :named("name"))
    $P5126 = $P5084."new"($P5100, $P5125, "callmethod" :named("op"), "set_outer_ctx" :named("name"))
    $P5127 = $P5082."add_fixup_task"($P5126 :named("fixup_past"))
  if18_end43:
    getattribute $P5129, $P101, "lex_pad"
    find_lex $P5128, "RETURN"
    $P5130 = $P5128($P5129)
    .return ($P5130) 
.end
.HLL "nqp"
.namespace []
.sub "load_module" :subid("cuid_8_1358115338.889") :anon :lex :outer("cuid_33_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 132
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$module", $P101 
    .lex "self", _lex_param_0 
    .lex "$module_name", _lex_param_1 
    .lex "$cur_GLOBALish", _lex_param_2 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_65
    .lex "RETURN", $P102
.annotate 'line', 134
    find_lex $P5002, "$loader"
    $P5003 = $P5002."load_module"(_lex_param_1, _lex_param_2)
    set $P101, $P5003
.annotate 'line', 137
    nqp_decontainerize $P5004, _lex_param_0
    $P5005 = $P5004."is_precompilation_mode"()
    unless $P5005 goto if21_end68 
.annotate 'line', 138
    nqp_decontainerize $P5006, _lex_param_0
    nqp_get_sc_object $P5010, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Stmts"]
    unless_null $P5007, fallback69
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5007, $P5011
  fallback69:
.annotate 'line', 139
    nqp_get_sc_object $P5015, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["VM"]
    unless_null $P5012, fallback70
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5012, $P5016
  fallback70:
.annotate 'line', 141
    nqp_get_sc_object $P5020, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["SVal"]
    unless_null $P5017, fallback71
    nqp_get_sc_object $P5021, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5017, $P5021
  fallback71:
    $P5022 = $P5017."new"("ModuleLoader.pbc" :named("value"))
    $P5023 = $P5012."new"($P5022, "load_bytecode vs" :named("pirop"))
.annotate 'line', 143
    nqp_get_sc_object $P5027, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["Op"]
    unless_null $P5024, fallback72
    nqp_get_sc_object $P5028, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5024, $P5028
  fallback72:
.annotate 'line', 145
    nqp_get_sc_object $P5032, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["VM"]
    unless_null $P5029, fallback73
    nqp_get_sc_object $P5033, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5029, $P5033
  fallback73:
.annotate 'line', 147
    nqp_get_sc_object $P5037, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set $P5034, $P5035["SVal"]
    unless_null $P5034, fallback74
    nqp_get_sc_object $P5038, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5034, $P5038
  fallback74:
    $P5039 = $P5034."new"("ModuleLoader" :named("value"))
    $P5040 = $P5029."new"($P5039, "get_hll_global Ps" :named("pirop"))
.annotate 'line', 149
    nqp_get_sc_object $P5044, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["SVal"]
    unless_null $P5041, fallback75
    nqp_get_sc_object $P5045, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5041, $P5045
  fallback75:
    $P5046 = $P5041."new"(_lex_param_1 :named("value"))
    $P5047 = $P5024."new"($P5040, $P5046, "callmethod" :named("op"), "load_module" :named("name"))
    $P5048 = $P5007."new"($P5023, $P5047)
    $P5049 = $P5006."add_load_dependency_task"($P5048 :named("deserialize_past"))
  if21_end68:
    getattribute $P5051, $P101, "lex_pad"
    find_lex $P5050, "RETURN"
    $P5052 = $P5050($P5051)
    goto lexotic_66
  lexotic_65:
    .get_results ($P5052)
  lexotic_66:
    .return ($P5052) 
.end
.HLL "nqp"
.namespace []
.sub "import" :subid("cuid_9_1358115338.889") :anon :lex :outer("cuid_33_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 156
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5009 = 'cuid_378_1358115338.889' 
    capture_lex $P5009 
    .lex "$target", $P101 
    .lex "self", _lex_param_0 
    .lex "$stash", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
.annotate 'line', 157
    nqp_decontainerize $P5002, _lex_param_0
    $P5003 = $P5002."cur_lexpad"()
    set $P101, $P5003
    set $P5004, _lex_param_1
    iter $P5006, _lex_param_1
  for_next76:
    unless $P5006, for_done78
    shift $P5008, $P5006
  for_redo77:
    .const 'Sub' $P5007 = 'cuid_378_1358115338.889' 
    capture_lex $P5007
    $P5004 = $P5007($P5008)
    goto for_next76
  for_done78:
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_378_1358115338.889") :anon :lex :outer("cuid_9_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 158
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 159
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    find_lex $P5003, "$target"
    $P5004 = _lex_param_0."key"()
    $P5005 = _lex_param_0."value"()
    $P5006 = $P5001."install_lexical_symbol"($P5003, $P5004, $P5005)
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "install_package_symbol" :subid("cuid_10_1358115338.889") :anon :lex :outer("cuid_33_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 165
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .const 'Sub' $P5012 = 'cuid_379_1358115338.889' 
    capture_lex $P5012 
    .lex "$name", $P101 
    .lex "$target", $P102 
    .lex "self", _lex_param_0 
    .lex "$package", _lex_param_1 
    .lex "@sym", _lex_param_2 
    .lex "$obj", _lex_param_3 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
    clone $P5003, _lex_param_2
    set _lex_param_2, $P5003
.annotate 'line', 167
    $P5004 = _lex_param_2."pop"()
    set $S5001, $P5004
    box $P5005, $S5001
    set $P101, $P5005
    set $P102, _lex_param_1
    set $P5006, _lex_param_2
    iter $P5008, _lex_param_2
  for_next79:
    unless $P5008, for_done81
    shift $P5010, $P5008
  for_redo80:
    .const 'Sub' $P5009 = 'cuid_379_1358115338.889' 
    capture_lex $P5009
    $P5006 = $P5009($P5010)
    goto for_next79
  for_done81:
    get_who $P5011, $P102
    set $S5002, $P101
    set $P5011[$S5002], _lex_param_3
    .return (_lex_param_3) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_379_1358115338.889") :anon :lex :outer("cuid_10_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 171
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$target"
    set $S5001, _lex_param_0
    nqp_get_package_through_who $P5001, $P5002, $S5001
    store_lex "$target", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "install_lexical_symbol" :subid("cuid_11_1358115338.889") :anon :lex :outer("cuid_33_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 181
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "$fixup", $P101 
    .lex "self", _lex_param_0 
    .lex "$block", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$obj", _lex_param_3 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
.annotate 'line', 183
    _lex_param_1."symbol"(_lex_param_2, "lexical" :named("scope"), _lex_param_3 :named("value"))
.annotate 'line', 184
    set $P5002, _lex_param_1[0]
    unless_null $P5002, fallback82
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5003
  fallback82:
    nqp_get_sc_object $P5007, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Var"]
    unless_null $P5004, fallback83
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5008
  fallback83:
    $P5009 = $P5004."new"("lexical" :named("scope"), _lex_param_2 :named("name"), "var" :named("decl"))
    $P5002."push"($P5009)
.annotate 'line', 187
    nqp_get_sc_object $P5013, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5012, $P5013, "QAST"
    get_who $P5011, $P5012
    set $P5010, $P5011["Stmts"]
    unless_null $P5010, fallback84
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5010, $P5014
  fallback84:
.annotate 'line', 188
    nqp_get_sc_object $P5018, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["Op"]
    unless_null $P5015, fallback85
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5015, $P5019
  fallback85:
.annotate 'line', 190
    nqp_get_sc_object $P5023, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["VM"]
    unless_null $P5020, fallback86
    nqp_get_sc_object $P5024, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5020, $P5024
  fallback86:
.annotate 'line', 191
    $P5025 = _lex_param_1."cuid"()
    set $S5003, $P5025
    concat $S5002, "    .const \"LexInfo\" %r = \"", $S5003
    concat $S5001, $S5002, "\""
    $P5026 = $P5020."new"($S5001 :named("pir"))
.annotate 'line', 193
    nqp_get_sc_object $P5030, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["SVal"]
    unless_null $P5027, fallback87
    nqp_get_sc_object $P5031, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5027, $P5031
  fallback87:
    $P5032 = $P5027."new"(_lex_param_2 :named("value"))
.annotate 'line', 194
    nqp_get_sc_object $P5036, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5035, $P5036, "QAST"
    get_who $P5034, $P5035
    set $P5033, $P5034["WVal"]
    unless_null $P5033, fallback88
    nqp_get_sc_object $P5037, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5033, $P5037
  fallback88:
    $P5038 = $P5033."new"(_lex_param_3 :named("value"))
    $P5039 = $P5015."new"($P5026, $P5032, $P5038, "callmethod" :named("op"), "set_static_lexpad_value" :named("name"))
.annotate 'line', 198
    nqp_get_sc_object $P5043, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5042, $P5043, "QAST"
    get_who $P5041, $P5042
    set $P5040, $P5041["Op"]
    unless_null $P5040, fallback89
    nqp_get_sc_object $P5044, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5040, $P5044
  fallback89:
.annotate 'line', 200
    nqp_get_sc_object $P5048, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5047, $P5048, "QAST"
    get_who $P5046, $P5047
    set $P5045, $P5046["VM"]
    unless_null $P5045, fallback90
    nqp_get_sc_object $P5049, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5045, $P5049
  fallback90:
.annotate 'line', 201
    $P5050 = _lex_param_1."cuid"()
    set $S5006, $P5050
    concat $S5005, "    .const \"LexInfo\" %r = \"", $S5006
    concat $S5004, $S5005, "\""
    $P5051 = $P5045."new"($S5004 :named("pir"))
    $P5052 = $P5040."new"($P5051, "callmethod" :named("op"), "finish_static_lexpad" :named("name"))
    $P5053 = $P5010."new"($P5039, $P5052)
    set $P101, $P5053
.annotate 'line', 205
    nqp_decontainerize $P5054, _lex_param_0
    $P5055 = $P5054."add_fixup_task"($P101 :named("deserialize_past"), $P101 :named("fixup_past"))
    .return ($P5055) 
.end
.HLL "nqp"
.namespace []
.sub "install_package_routine" :subid("cuid_12_1358115338.889") :anon :lex :outer("cuid_33_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 210
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "$fixup", $P101 
    .lex "self", _lex_param_0 
    .lex "$package", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$past_block", _lex_param_3 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
.annotate 'line', 211
    nqp_get_sc_object $P5005, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Op"]
    unless_null $P5002, fallback91
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5006
  fallback91:
.annotate 'line', 213
    nqp_get_sc_object $P5010, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Op"]
    unless_null $P5007, fallback92
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5007, $P5011
  fallback92:
    nqp_get_sc_object $P5015, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["WVal"]
    unless_null $P5012, fallback93
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5012, $P5016
  fallback93:
    $P5017 = $P5012."new"(_lex_param_1 :named("value"))
    $P5018 = $P5007."new"($P5017, "who" :named("op"))
.annotate 'line', 214
    nqp_get_sc_object $P5022, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5021, $P5022, "QAST"
    get_who $P5020, $P5021
    set $P5019, $P5020["SVal"]
    unless_null $P5019, fallback94
    nqp_get_sc_object $P5023, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5019, $P5023
  fallback94:
    set $S5001, _lex_param_2
    $P5024 = $P5019."new"($S5001 :named("value"))
.annotate 'line', 215
    nqp_get_sc_object $P5028, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["BVal"]
    unless_null $P5025, fallback95
    nqp_get_sc_object $P5029, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5025, $P5029
  fallback95:
    $P5030 = $P5025."new"(_lex_param_3 :named("value"))
    $P5031 = $P5002."new"($P5018, $P5024, $P5030, "bindkey" :named("op"))
    set $P101, $P5031
.annotate 'line', 217
    nqp_decontainerize $P5032, _lex_param_0
    $P5033 = $P5032."add_fixup_task"($P101 :named("deserialize_past"), $P101 :named("fixup_past"))
    .return ($P5033) 
.end
.HLL "nqp"
.namespace []
.sub "create_code" :subid("cuid_16_1358115338.889") :anon :lex :outer("cuid_33_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 222
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 :named("code_type_name") :optional 
    .param int haz_param_1 :opt_flag 
    .const 'Sub' $P5098 = 'cuid_13_1358115338.889' 
    capture_lex $P5098 
    .const 'Sub' $P5098 = 'cuid_14_1358115338.889' 
    capture_lex $P5098 
    .const 'Sub' $P5098 = 'cuid_15_1358115338.889' 
    capture_lex $P5098 
    .const 'Sub' $P5098 = 'cuid_383_1358115338.889' 
    capture_lex $P5098 
    if haz_param_1, default173
    box $P5097, "NQPRoutine"
    set _lex_param_4, $P5097
  default173:
    .lex "$code_type", $P101 
    .lex "$have_code_type", $P102 
    .lex "$stub_code", $P103 
    .lex "$fixups", $P104 
    .lex "$dummy", $P105 
    .lex "$code_ref_idx", $P106 
    .lex "self", _lex_param_0 
    .lex "$past", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$is_dispatcher", _lex_param_3 
    .lex "$code_type_name", _lex_param_4 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P104, $P5004
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P105, $P5005
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P106, $P5006
    root_new $P107, ['parrot';'Continuation']
    set_label $P107, lexotic_96
    .lex "RETURN", $P107
    box $P5007, 0
    set $P102, $P5007
    new $P5026, 'ExceptionHandler'
    set_label $P5026, catch_handler_25105
    $P5026.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5026
.annotate 'line', 226
.annotate 'line', 227
    nqp_decontainerize $P5008, _lex_param_0
    new $P5009, 'ResizablePMCArray'
    push $P5009, _lex_param_4
    $P5010 = $P5008."find_sym"($P5009)
    set $P101, $P5010
.annotate 'line', 228
    find_dynamic_lex $P5012, "$*PACKAGE"
    unless_null $P5012, fallback98
    nqp_get_sc_object $P5015, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5014, $P5015
    set $P5013, $P5014["$PACKAGE"]
    unless_null $P5013, fallback99
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5013, $P5016
  fallback99:
    unless_null $P5013, vivi_22100
    die "Contextual $*PACKAGE not found"
    box $P5017, "Contextual $*PACKAGE not found"
    set $P5013, $P5017
  vivi_22100:
    set $P5012, $P5013
  fallback98:
    get_how $P5011, $P5012
    find_dynamic_lex $P5018, "$*PACKAGE"
    unless_null $P5018, fallback101
    nqp_get_sc_object $P5021, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["$PACKAGE"]
    unless_null $P5019, fallback102
    nqp_get_sc_object $P5022, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5019, $P5022
  fallback102:
    unless_null $P5019, vivi_23103
    die "Contextual $*PACKAGE not found"
    box $P5023, "Contextual $*PACKAGE not found"
    set $P5019, $P5023
  vivi_23103:
    set $P5018, $P5019
  fallback101:
    $P5024 = $P5011."name"($P5018)
    set $S5001, $P5024
    set $S5002, _lex_param_4
    isne $I5001, $S5001, $S5002
    box $P5025, $I5001
    set $P102, $P5025
    set $P5027, $P102
    pop_eh 
    goto skip_handler_24104
  catch_handler_25105:
    .get_results ($P5026) 
    set $I10001, 1
    set $P5026["handled"], $I10001
    nqp_get_sc_object $P10001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    finalize $P5026
    pop_upto_eh $P5026
    pop_eh 
    set $P5027, $P10001
    goto skip_handler_24104
  skip_handler_24104:
    .const 'Sub' $P5029 = 'cuid_13_1358115338.889' 
    capture_lex $P5029
    newclosure $P5028, $P5029
    set $P103, $P5028
.annotate 'line', 271
    nqp_get_sc_object $P5033, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["Stmts"]
    unless_null $P5030, fallback134
    nqp_get_sc_object $P5034, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5030, $P5034
  fallback134:
    $P5035 = $P5030."new"()
    set $P104, $P5035
    set $P5036, _lex_param_1["compile_time_dummy"]
    unless_null $P5036, fallback137
    nqp_get_sc_object $P5037, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5036, $P5037
  fallback137:
    defined $I5002, $P5036
    unless $I5002 goto if29_else135 
.annotate 'line', 274
    set $P5038, _lex_param_1["compile_time_dummy"]
    unless_null $P5038, fallback138
    nqp_get_sc_object $P5039, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5038, $P5039
  fallback138:
    set $P105, $P5038
    goto if29_end136
  if29_else135:
.annotate 'line', 277
    nqp_fresh_stub $P5040, $P103
    set $P105, $P5040
    set $S5003, _lex_param_2
    assign $P105, $S5003
    setprop $P105, "STATIC_CODE_REF", $P105
.annotate 'line', 284
    nqp_decontainerize $P5041, _lex_param_0
    $P5042 = $P5041."add_root_code_ref"($P105, _lex_param_1)
    set $P106, $P5042
    nqp_decontainerize $P5043, _lex_param_0
    nqp_get_sc_object $P5044, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 3
    repr_get_attr_obj $P5045, $P5043, $P5044, "%!code_stub_sc_idx"
.annotate 'line', 285
    $P5046 = _lex_param_1."cuid"()
    set $S5004, $P5046
    set $P5045[$S5004], $P106
    set _lex_param_1["compile_time_dummy"], $P105
    set $P5058, $P102
    unless $P102 goto if30_end140 
.annotate 'line', 291
    nqp_decontainerize $P5047, _lex_param_0
    nqp_get_sc_object $P5048, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 3
    repr_get_attr_obj $P5049, $P5047, $P5048, "%!code_object_fixup_list"
.annotate 'line', 292
    $P5050 = _lex_param_1."cuid"()
    set $S5005, $P5050
    set $P5049[$S5005], $P104
.annotate 'line', 293
    nqp_decontainerize $P5051, _lex_param_0
    $P5052 = $P5051."is_precompilation_mode"()
    unless $P5052 goto if31_else141 
    .const 'Sub' $P5054 = 'cuid_14_1358115338.889' 
    capture_lex $P5054
    newclosure $P5053, $P5054
    setprop $P105, "CLONE_CALLBACK", $P5053
    set $P5057, $P105
    goto if31_end142
  if31_else141:
.annotate 'line', 298
    .const 'Sub' $P5056 = 'cuid_15_1358115338.889' 
    capture_lex $P5056
    newclosure $P5055, $P5056
    setprop $P105, "CLONE_CALLBACK", $P5055
    set $P5057, $P105
  if31_end142:
    set $P5058, $P5057
  if30_end140:
  if29_end136:
.annotate 'line', 322
    nqp_decontainerize $P5059, _lex_param_0
    $P5059."add_fixup_task"($P104 :named("fixup_past"))
    unless $P102 goto if32_else153 
    .const 'Sub' $P5060 = 'cuid_383_1358115338.889' 
    capture_lex $P5060
    $P5061 = $P5060()
    set $P5096, $P5061
    goto if32_end154
  if32_else153:
.annotate 'line', 362
.annotate 'line', 365
    nqp_get_sc_object $P5065, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5064, $P5065, "QAST"
    get_who $P5063, $P5064
    set $P5062, $P5063["VM"]
    unless_null $P5062, fallback168
    nqp_get_sc_object $P5066, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5062, $P5066
  fallback168:
.annotate 'line', 367
    nqp_get_sc_object $P5070, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5069, $P5070, "QAST"
    get_who $P5068, $P5069
    set $P5067, $P5068["VM"]
    unless_null $P5067, fallback169
    nqp_get_sc_object $P5071, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5067, $P5071
  fallback169:
.annotate 'line', 369
    nqp_get_sc_object $P5075, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5074, $P5075, "QAST"
    get_who $P5073, $P5074
    set $P5072, $P5073["SVal"]
    unless_null $P5072, fallback170
    nqp_get_sc_object $P5076, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5072, $P5076
  fallback170:
    nqp_decontainerize $P5077, _lex_param_0
    $P5078 = $P5077."handle"()
    $P5079 = $P5072."new"($P5078 :named("value"))
.annotate 'line', 370
    nqp_get_sc_object $P5083, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5082, $P5083, "QAST"
    get_who $P5081, $P5082
    set $P5080, $P5081["IVal"]
    unless_null $P5080, fallback171
    nqp_get_sc_object $P5084, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5080, $P5084
  fallback171:
    $P5085 = $P5080."new"($P106 :named("value"))
    $P5086 = $P5067."new"($P5079, $P5085, "nqp_get_sc_code_ref Psi" :named("pirop"))
.annotate 'line', 372
    nqp_get_sc_object $P5090, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5089, $P5090, "QAST"
    get_who $P5088, $P5089
    set $P5087, $P5088["BVal"]
    unless_null $P5087, fallback172
    nqp_get_sc_object $P5091, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5087, $P5091
  fallback172:
    $P5092 = $P5087."new"(_lex_param_1 :named("value"))
    $P5093 = $P5062."new"($P5086, $P5092, "assign vPP" :named("pirop"))
    $P104."push"($P5093)
    find_lex $P5094, "RETURN"
    $P5095 = $P5094($P105)
    set $P5096, $P5095
  if32_end154:
    goto lexotic_97
  lexotic_96:
    .get_results ($P5096)
  lexotic_97:
    .return ($P5096) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_13_1358115338.889") :anon :lex :outer("cuid_16_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 235
    .param pmc _lex_param_0 :slurpy 
    .param pmc _lex_param_1 :slurpy :named 
    .const 'Sub' $P5029 = 'cuid_382_1358115338.889' 
    capture_lex $P5029 
    .lex "$nqpcomp", $P101 
    .lex "$post", $P102 
    .lex "$pir", $P103 
    .lex "$compiled", $P104 
    .lex "$c", $P105 
    .lex "$i", $P106 
    .lex "@args", _lex_param_0 
    .lex "%named", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P104, $P5004
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P105, $P5005
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P106, $P5006
.annotate 'line', 237
    find_lex $P5007, "$past"
    find_lex $P5009, "self"
    nqp_decontainerize $P5008, $P5009
    $P5010 = $P5008."libs"()
    $P5007."unshift"($P5010)
    compreg $P5011, "nqp"
    set $P101, $P5011
.annotate 'line', 239
    nqp_get_sc_object $P5015, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["CompUnit"]
    unless_null $P5012, fallback106
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5012, $P5016
  fallback106:
    find_lex $P5017, "$past"
    $P5018 = $P5012."new"($P5017, "nqp" :named("hll"))
    $P5019 = $P101."post"($P5018)
    set $P102, $P5019
.annotate 'line', 240
    $P5020 = $P101."pir"($P102)
    set $P103, $P5020
.annotate 'line', 241
    $P5021 = $P101."evalpmc"($P103)
    set $P104, $P5021
    elements $I5001, $P104
    box $P5022, $I5001
    set $P105, $P5022
    box $P5023, 0
    set $P106, $P5023
  while26_test107:
    set $N5001, $P106
    set $N5002, $P105
    islt $I5002, $N5001, $N5002
    box $P5027, $I5002
    set $P5026, $P5027
    unless $I5002 goto while26_done111 
  while26_redo109:
    .const 'Sub' $P5024 = 'cuid_382_1358115338.889' 
    capture_lex $P5024
    $P5025 = $P5024()
    set $P5026, $P5025
    goto while26_test107 
  while26_done111:
.annotate 'line', 267
    $P5028 = $P104(_lex_param_0 :flat, _lex_param_1 :flat :named)
    .return ($P5028) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_382_1358115338.889") :anon :lex :outer("cuid_13_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 246
    .const 'Sub' $P5015 = 'cuid_381_1358115338.889' 
    capture_lex $P5015 
    .lex "$subid", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
.annotate 'line', 247
    find_lex $P5003, "$compiled"
    find_lex $P5004, "$i"
    set $I5001, $P5004
    set $P5002, $P5003[$I5001]
    unless_null $P5002, fallback112
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5005
  fallback112:
    $P5006 = $P5002."get_subid"()
    set $P101, $P5006
    find_lex $P5008, "self"
    nqp_decontainerize $P5007, $P5008
    nqp_get_sc_object $P5009, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 3
    repr_get_attr_obj $P5010, $P5007, $P5009, "%!code_objects_to_fix_up"
    set $S5001, $P101
    exists $I5002, $P5010[$S5001]
    unless $I5002 goto if27_end114 
    .const 'Sub' $P5011 = 'cuid_381_1358115338.889' 
    capture_lex $P5011
    $P5012 = $P5011()
  if27_end114:
    find_lex $P5013, "$i"
    set $N5002, $P5013
    set $N5003, 1
    add $N5001, $N5002, $N5003
    box $P5014, $N5001
    store_lex "$i", $P5014
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_381_1358115338.889") :anon :lex :outer("cuid_382_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 248
    .const 'Sub' $P5067 = 'cuid_380_1358115338.889' 
    capture_lex $P5067 
    .lex "$static", $P101 
    .lex "$fixup_stmts", $P102 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
.annotate 'line', 252
    find_lex $P5005, "self"
    nqp_decontainerize $P5004, $P5005
    nqp_get_sc_object $P5006, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 3
    repr_get_attr_obj $P5007, $P5004, $P5006, "%!code_objects_to_fix_up"
    find_lex $P5008, "$subid"
    set $S5001, $P5008
    set $P5003, $P5007[$S5001]
    unless_null $P5003, fallback115
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5003, $P5009
  fallback115:
    $P5010 = $P5003."shift"()
    set $P101, $P5010
    find_lex $P5013, "self"
    nqp_decontainerize $P5012, $P5013
    nqp_get_sc_object $P5014, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 3
    repr_get_attr_obj $P5015, $P5012, $P5014, "%!code_object_types"
    find_lex $P5016, "$subid"
    set $S5002, $P5016
    set $P5011, $P5015[$S5002]
    unless_null $P5011, fallback116
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5011, $P5017
  fallback116:
    find_lex $P5019, "$compiled"
    find_lex $P5020, "$i"
    set $I5001, $P5020
    set $P5018, $P5019[$I5001]
    unless_null $P5018, fallback117
    nqp_get_sc_object $P5021, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5018, $P5021
  fallback117:
    setattribute $P101, $P5011, "$!do", $P5018
    find_lex $P5027, "self"
    nqp_decontainerize $P5026, $P5027
    nqp_get_sc_object $P5028, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 3
    repr_get_attr_obj $P5029, $P5026, $P5028, "%!code_objects_to_fix_up"
    find_lex $P5030, "$subid"
    set $S5003, $P5030
    set $P5025, $P5029[$S5003]
    unless_null $P5025, fallback118
    nqp_get_sc_object $P5031, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5025, $P5031
  fallback118:
    set $P5022, $P5025
    iter $P5024, $P5025
  for_next121:
    unless $P5024, for_done123
    shift $P5033, $P5024
  for_redo122:
    .const 'Sub' $P5032 = 'cuid_380_1358115338.889' 
    capture_lex $P5032
    $P5022 = $P5032($P5033)
    goto for_next121
  for_done123:
    find_lex $P5035, "$compiled"
    find_lex $P5036, "$i"
    set $I5002, $P5036
    set $P5034, $P5035[$I5002]
    unless_null $P5034, fallback124
    nqp_get_sc_object $P5037, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5034, $P5037
  fallback124:
    find_lex $P5039, "$compiled"
    find_lex $P5040, "$i"
    set $I5003, $P5040
    set $P5038, $P5039[$I5003]
    unless_null $P5038, fallback125
    nqp_get_sc_object $P5041, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5038, $P5041
  fallback125:
    setprop $P5034, "STATIC_CODE_REF", $P5038
.annotate 'line', 258
    find_lex $P5043, "self"
    nqp_decontainerize $P5042, $P5043
    find_lex $P5046, "self"
    nqp_decontainerize $P5045, $P5046
    nqp_get_sc_object $P5047, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 3
    repr_get_attr_obj $P5048, $P5045, $P5047, "%!code_stub_sc_idx"
    find_lex $P5049, "$subid"
    set $S5004, $P5049
    set $P5044, $P5048[$S5004]
    unless_null $P5044, fallback126
    nqp_get_sc_object $P5050, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5044, $P5050
  fallback126:
    find_lex $P5052, "$compiled"
    find_lex $P5053, "$i"
    set $I5004, $P5053
    set $P5051, $P5052[$I5004]
    unless_null $P5051, fallback127
    nqp_get_sc_object $P5054, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5051, $P5054
  fallback127:
    $P5042."update_root_code_ref"($P5044, $P5051)
    find_lex $P5057, "self"
    nqp_decontainerize $P5056, $P5057
    nqp_get_sc_object $P5058, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 3
    repr_get_attr_obj $P5059, $P5056, $P5058, "%!code_object_fixup_list"
    find_lex $P5060, "$subid"
    set $S5005, $P5060
    set $P5055, $P5059[$S5005]
    unless_null $P5055, fallback128
    nqp_get_sc_object $P5061, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5055, $P5061
  fallback128:
    set $P102, $P5055
    new $P5065, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5065, while28_handlers132
    push_eh $P5065
  while28_test129:
    $P5062 = $P102."list"()
    set $N5001, $P5062
    box $P5066, $N5001
    set $P5064, $P5066
    unless $N5001 goto while28_done133 
  while28_redo131:
.annotate 'line', 262
    $P5063 = $P102."shift"()
    set $P5064, $P5063
    goto while28_test129 
  while28_handlers132:
    .get_results ($P5065)
    pop_upto_eh $P5065
    getattribute $P5065, $P5065, 'type'
    eq $P5065, .CONTROL_LOOP_NEXT, while28_test129
    eq $P5065, .CONTROL_LOOP_REDO, while28_redo131
  while28_done133:
    pop_eh 
    .return ($P5064) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_380_1358115338.889") :anon :lex :outer("cuid_381_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 254
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5003, "self"
    nqp_decontainerize $P5002, $P5003
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 3
    repr_get_attr_obj $P5005, $P5002, $P5004, "%!code_object_types"
    find_lex $P5006, "$subid"
    set $S5001, $P5006
    set $P5001, $P5005[$S5001]
    unless_null $P5001, fallback119
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5007
  fallback119:
    find_lex $P5010, "$compiled"
    find_lex $P5011, "$i"
    set $I5001, $P5011
    set $P5009, $P5010[$I5001]
    unless_null $P5009, fallback120
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5009, $P5012
  fallback120:
    clone $P5008, $P5009
    setattribute _lex_param_0, $P5001, "$!do", $P5008
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_14_1358115338.889") :anon :lex :outer("cuid_16_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 294
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$orig", _lex_param_0 
    .lex "$clone", _lex_param_1 
    .lex "$code_obj", _lex_param_2 
.annotate 'line', 295
    find_lex $P5003, "self"
    nqp_decontainerize $P5002, $P5003
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 3
    repr_get_attr_obj $P5005, $P5002, $P5004, "%!code_objects_to_fix_up"
    find_lex $P5006, "$past"
    $P5007 = $P5006."cuid"()
    set $S5001, $P5007
    set $P5001, $P5005[$S5001]
    unless_null $P5001, fallback143
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5008
  fallback143:
    $P5009 = $P5001."push"(_lex_param_2)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_15_1358115338.889") :anon :lex :outer("cuid_16_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 299
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$orig", _lex_param_0 
    .lex "$clone", _lex_param_1 
    .lex "$code_obj", _lex_param_2 
.annotate 'line', 301
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    $P5001."add_object"(_lex_param_2)
.annotate 'line', 302
    find_lex $P5003, "$fixups"
    nqp_get_sc_object $P5007, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Op"]
    unless_null $P5004, fallback144
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5008
  fallback144:
.annotate 'line', 304
    nqp_get_sc_object $P5012, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["WVal"]
    unless_null $P5009, fallback145
    nqp_get_sc_object $P5013, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5009, $P5013
  fallback145:
    $P5014 = $P5009."new"(_lex_param_2 :named("value"))
.annotate 'line', 305
    nqp_get_sc_object $P5018, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["WVal"]
    unless_null $P5015, fallback146
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5015, $P5019
  fallback146:
    find_lex $P5020, "$code_type"
    $P5021 = $P5015."new"($P5020 :named("value"))
.annotate 'line', 306
    nqp_get_sc_object $P5025, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["SVal"]
    unless_null $P5022, fallback147
    nqp_get_sc_object $P5026, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5022, $P5026
  fallback147:
    $P5027 = $P5022."new"("$!do" :named("value"))
.annotate 'line', 307
    nqp_get_sc_object $P5031, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5030, $P5031, "QAST"
    get_who $P5029, $P5030
    set $P5028, $P5029["VM"]
    unless_null $P5028, fallback148
    nqp_get_sc_object $P5032, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5028, $P5032
  fallback148:
.annotate 'line', 309
    nqp_get_sc_object $P5036, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5035, $P5036, "QAST"
    get_who $P5034, $P5035
    set $P5033, $P5034["Op"]
    unless_null $P5033, fallback149
    nqp_get_sc_object $P5037, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5033, $P5037
  fallback149:
    nqp_get_sc_object $P5041, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5040, $P5041, "QAST"
    get_who $P5039, $P5040
    set $P5038, $P5039["BVal"]
    unless_null $P5038, fallback150
    nqp_get_sc_object $P5042, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5038, $P5042
  fallback150:
    find_lex $P5043, "$past"
    $P5044 = $P5038."new"($P5043 :named("value"))
    $P5045 = $P5033."new"($P5044, "clone" :named("op"))
.annotate 'line', 310
    nqp_get_sc_object $P5049, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5048, $P5049, "QAST"
    get_who $P5047, $P5048
    set $P5046, $P5047["WVal"]
    unless_null $P5046, fallback151
    nqp_get_sc_object $P5050, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5046, $P5050
  fallback151:
    $P5051 = $P5046."new"(_lex_param_2 :named("value"))
    $P5052 = $P5028."new"($P5045, $P5051, "set_sub_code_object 0PP" :named("pirop"))
    $P5053 = $P5004."new"($P5014, $P5021, $P5027, $P5052, "bindattr" :named("op"))
    $P5003."push"($P5053)
.annotate 'line', 315
    find_lex $P5056, "self"
    nqp_decontainerize $P5055, $P5056
    nqp_get_sc_object $P5057, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 3
    repr_get_attr_obj $P5058, $P5055, $P5057, "%!code_objects_to_fix_up"
    find_lex $P5059, "$past"
    $P5060 = $P5059."cuid"()
    set $S5001, $P5060
    set $P5054, $P5058[$S5001]
    unless_null $P5054, fallback152
    nqp_get_sc_object $P5061, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5054, $P5061
  fallback152:
    $P5062 = $P5054."push"(_lex_param_2)
    .return ($P5062) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_383_1358115338.889") :anon :lex :outer("cuid_16_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 326
    .lex "$code_obj", $P101 
    .lex "$slot", $P102 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
    find_lex $P5004, "$code_type"
    repr_instance_of $P5003, $P5004
    set $P101, $P5003
    find_lex $P5005, "$code_type"
    find_lex $P5006, "$dummy"
    setattribute $P101, $P5005, "$!do", $P5006
    find_lex $P5007, "$is_dispatcher"
    unless $P5007 goto if33_end156 
    find_lex $P5008, "$code_type"
    new $P5009, 'ResizablePMCArray'
    setattribute $P101, $P5008, "$!dispatchees", $P5009
  if33_end156:
.annotate 'line', 332
    find_lex $P5011, "self"
    nqp_decontainerize $P5010, $P5011
    $P5012 = $P5010."add_object"($P101)
    set $P102, $P5012
.annotate 'line', 335
    find_lex $P5014, "self"
    nqp_decontainerize $P5013, $P5014
.annotate 'line', 336
    nqp_get_sc_object $P5018, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["VM"]
    unless_null $P5015, fallback157
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5015, $P5019
  fallback157:
.annotate 'line', 338
    nqp_get_sc_object $P5023, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["BVal"]
    unless_null $P5020, fallback158
    nqp_get_sc_object $P5024, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5020, $P5024
  fallback158:
    find_lex $P5025, "$past"
    $P5026 = $P5020."new"($P5025 :named("value"))
.annotate 'line', 339
    nqp_get_sc_object $P5030, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["WVal"]
    unless_null $P5027, fallback159
    nqp_get_sc_object $P5031, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5027, $P5031
  fallback159:
    $P5032 = $P5027."new"($P101 :named("value"))
    $P5033 = $P5015."new"($P5026, $P5032, "set_sub_code_object vPP" :named("pirop"))
    $P5013."add_fixup_task"($P5033 :named("deserialize_past"))
.annotate 'line', 343
    find_lex $P5034, "$fixups"
    nqp_get_sc_object $P5038, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["Op"]
    unless_null $P5035, fallback160
    nqp_get_sc_object $P5039, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5035, $P5039
  fallback160:
.annotate 'line', 345
    nqp_get_sc_object $P5043, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5042, $P5043, "QAST"
    get_who $P5041, $P5042
    set $P5040, $P5041["WVal"]
    unless_null $P5040, fallback161
    nqp_get_sc_object $P5044, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5040, $P5044
  fallback161:
    $P5045 = $P5040."new"($P101 :named("value"))
.annotate 'line', 346
    nqp_get_sc_object $P5049, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5048, $P5049, "QAST"
    get_who $P5047, $P5048
    set $P5046, $P5047["WVal"]
    unless_null $P5046, fallback162
    nqp_get_sc_object $P5050, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5046, $P5050
  fallback162:
    find_lex $P5051, "$code_type"
    $P5052 = $P5046."new"($P5051 :named("value"))
.annotate 'line', 347
    nqp_get_sc_object $P5056, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5055, $P5056, "QAST"
    get_who $P5054, $P5055
    set $P5053, $P5054["SVal"]
    unless_null $P5053, fallback163
    nqp_get_sc_object $P5057, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5053, $P5057
  fallback163:
    $P5058 = $P5053."new"("$!do" :named("value"))
.annotate 'line', 348
    nqp_get_sc_object $P5062, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5061, $P5062, "QAST"
    get_who $P5060, $P5061
    set $P5059, $P5060["BVal"]
    unless_null $P5059, fallback164
    nqp_get_sc_object $P5063, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5059, $P5063
  fallback164:
    find_lex $P5064, "$past"
    $P5065 = $P5059."new"($P5064 :named("value"))
    $P5066 = $P5035."new"($P5045, $P5052, $P5058, $P5065, "bindattr" :named("op"))
    $P5034."push"($P5066)
.annotate 'line', 350
    find_lex $P5067, "$fixups"
    nqp_get_sc_object $P5071, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5070, $P5071, "QAST"
    get_who $P5069, $P5070
    set $P5068, $P5069["VM"]
    unless_null $P5068, fallback165
    nqp_get_sc_object $P5072, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5068, $P5072
  fallback165:
.annotate 'line', 352
    nqp_get_sc_object $P5076, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5075, $P5076, "QAST"
    get_who $P5074, $P5075
    set $P5073, $P5074["BVal"]
    unless_null $P5073, fallback166
    nqp_get_sc_object $P5077, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5073, $P5077
  fallback166:
    find_lex $P5078, "$past"
    $P5079 = $P5073."new"($P5078 :named("value"))
.annotate 'line', 353
    nqp_get_sc_object $P5083, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5082, $P5083, "QAST"
    get_who $P5081, $P5082
    set $P5080, $P5081["WVal"]
    unless_null $P5080, fallback167
    nqp_get_sc_object $P5084, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5080, $P5084
  fallback167:
    $P5085 = $P5080."new"($P101 :named("value"))
    $P5086 = $P5068."new"($P5079, $P5085, "set_sub_code_object vPP" :named("pirop"))
    $P5067."push"($P5086)
    find_lex $P5088, "self"
    nqp_decontainerize $P5087, $P5088
    nqp_get_sc_object $P5089, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 3
    repr_get_attr_obj $P5090, $P5087, $P5089, "%!code_objects_to_fix_up"
.annotate 'line', 357
    find_lex $P5091, "$past"
    $P5092 = $P5091."cuid"()
    set $S5001, $P5092
    new $P5093, 'ResizablePMCArray'
    push $P5093, $P101
    set $P5090[$S5001], $P5093
    find_lex $P5095, "self"
    nqp_decontainerize $P5094, $P5095
    nqp_get_sc_object $P5096, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 3
    repr_get_attr_obj $P5097, $P5094, $P5096, "%!code_object_types"
.annotate 'line', 358
    find_lex $P5098, "$past"
    $P5099 = $P5098."cuid"()
    set $S5002, $P5099
    find_lex $P5100, "$code_type"
    set $P5097[$S5002], $P5100
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_create_mo" :subid("cuid_17_1358115338.889") :anon :lex :outer("cuid_33_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 380
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :named("name") :optional 
    .param int haz_param_2 :opt_flag 
    .param pmc _lex_param_3 :named("repr") :optional 
    .param int haz_param_3 :opt_flag 
    if haz_param_2, default180
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_2, $P5007
  default180:
    if haz_param_3, default181
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_3, $P5008
  default181:
    .lex "%args", $P101 
    .lex "$mo", $P102 
    .lex "self", _lex_param_0 
    .lex "$how", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$repr", _lex_param_3 
    new $P5001, 'Hash'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
    root_new $P103, ['parrot';'Continuation']
    set_label $P103, lexotic_174
    .lex "RETURN", $P103
    defined $I5001, _lex_param_2
    unless $I5001 goto if34_end177 
.annotate 'line', 383
    set $P101["name"], _lex_param_2
  if34_end177:
    defined $I5002, _lex_param_3
    unless $I5002 goto if35_end179 
.annotate 'line', 384
    set $P101["repr"], _lex_param_3
  if35_end179:
.annotate 'line', 385
    $P5003 = _lex_param_1."new_type"($P101 :flat :named)
    set $P102, $P5003
.annotate 'line', 386
    nqp_decontainerize $P5004, _lex_param_0
    $P5004."add_object"($P102)
    find_lex $P5005, "RETURN"
    $P5006 = $P5005($P102)
    goto lexotic_175
  lexotic_174:
    .get_results ($P5006)
  lexotic_175:
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_attribute" :subid("cuid_18_1358115338.889") :anon :lex :outer("cuid_33_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 397
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 
    .lex "$attr", $P101 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$meta_attr", _lex_param_2 
    .lex "%lit_args", _lex_param_3 
    .lex "%obj_args", _lex_param_4 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
.annotate 'line', 398
    $P5002 = _lex_param_2."new"(_lex_param_3 :flat :named, _lex_param_4 :flat :named)
    set $P101, $P5002
.annotate 'line', 399
    get_how $P5003, _lex_param_1
    $P5004 = $P5003."add_attribute"(_lex_param_1, $P101)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_method" :subid("cuid_19_1358115338.889") :anon :lex :outer("cuid_33_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 403
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$meta_method_name", _lex_param_2 
    .lex "$name", _lex_param_3 
    .lex "$code", _lex_param_4 
.annotate 'line', 404
    get_how $P5001, _lex_param_1
    set $S5001, _lex_param_2
    $P5002 = $P5001.$S5001(_lex_param_1, _lex_param_3, _lex_param_4)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "set_routine_signature" :subid("cuid_20_1358115338.889") :anon :lex :outer("cuid_33_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 408
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "$sig_type", $P101 
    .lex "$code_type", $P102 
    .lex "$sig_obj", $P103 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$types", _lex_param_2 
    .lex "$definednesses", _lex_param_3 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P103, $P5003
.annotate 'line', 409
    nqp_decontainerize $P5004, _lex_param_0
    new $P5005, 'ResizablePMCArray'
    box $P5006, "NQPSignature"
    push $P5005, $P5006
    $P5007 = $P5004."find_sym"($P5005)
    set $P101, $P5007
.annotate 'line', 410
    nqp_decontainerize $P5008, _lex_param_0
    new $P5009, 'ResizablePMCArray'
    box $P5010, "NQPRoutine"
    push $P5009, $P5010
    $P5011 = $P5008."find_sym"($P5009)
    set $P102, $P5011
    repr_instance_of $P5012, $P101
    set $P103, $P5012
    setattribute $P103, $P101, "$!types", _lex_param_2
    setattribute $P103, $P101, "$!definednesses", _lex_param_3
    setattribute _lex_param_1, $P102, "$!signature", $P103
    .return ($P103) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_set_body_block" :subid("cuid_21_1358115338.889") :anon :lex :outer("cuid_33_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 418
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$body_code_obj", $P101 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$body_past", _lex_param_2 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
.annotate 'line', 420
    nqp_decontainerize $P5002, _lex_param_0
    $P5003 = _lex_param_2."name"()
    $P5004 = $P5002."create_code"(_lex_param_2, $P5003, 0)
    set $P101, $P5004
.annotate 'line', 423
    get_how $P5005, _lex_param_1
    $P5006 = $P5005."set_body_block"(_lex_param_1, $P101)
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_parent_or_role" :subid("cuid_22_1358115338.889") :anon :lex :outer("cuid_33_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 427
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$meta_method_name", _lex_param_2 
    .lex "$to_add", _lex_param_3 
.annotate 'line', 428
    get_how $P5001, _lex_param_1
    set $S5001, _lex_param_2
    $P5002 = $P5001.$S5001(_lex_param_1, _lex_param_3)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_parrot_vtable_handler_mapping" :subid("cuid_23_1358115338.889") :anon :lex :outer("cuid_33_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 431
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$att_name", _lex_param_3 
.annotate 'line', 432
    get_how $P5001, _lex_param_1
    $P5002 = $P5001."add_parrot_vtable_handler_mapping"(_lex_param_1, _lex_param_2, _lex_param_3)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_compose" :subid("cuid_24_1358115338.889") :anon :lex :outer("cuid_33_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 436
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
.annotate 'line', 437
    get_how $P5001, _lex_param_1
    $P5002 = $P5001."compose"(_lex_param_1)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "run_begin_block" :subid("cuid_25_1358115338.889") :anon :lex :outer("cuid_33_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 441
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5040 = 'cuid_385_1358115338.889' 
    capture_lex $P5040 
    .lex "$wrapper", $P101 
    .lex "%seen", $P102 
    .lex "$i", $P103 
    .lex "$code", $P104 
    .lex "$old_global", $P105 
    .lex "self", _lex_param_0 
    .lex "$past", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P104, $P5004
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P105, $P5005
    root_new $P106, ['parrot';'Continuation']
    set_label $P106, lexotic_182
    .lex "RETURN", $P106
.annotate 'line', 443
    nqp_get_sc_object $P5009, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Block"]
    unless_null $P5006, fallback184
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5006, $P5010
  fallback184:
.annotate 'line', 444
    nqp_get_sc_object $P5014, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Stmts"]
    unless_null $P5011, fallback185
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5011, $P5015
  fallback185:
    $P5016 = $P5011."new"()
    $P5017 = $P5006."new"($P5016, _lex_param_1)
    set $P101, $P5017
    nqp_decontainerize $P5018, _lex_param_0
    nqp_get_sc_object $P5019, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 3
    repr_get_attr_obj $P5020, $P5018, $P5019, "@!BLOCKS"
    set $N5001, $P5020
    box $P5021, $N5001
    set $P103, $P5021
  while36_test186:
    set $N5002, $P103
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5025, $I5001
    set $P5024, $P5025
    unless $I5001 goto while36_done190 
  while36_redo188:
    .const 'Sub' $P5022 = 'cuid_385_1358115338.889' 
    capture_lex $P5022
    $P5023 = $P5022()
    set $P5024, $P5023
    goto while36_test186 
  while36_done190:
.annotate 'line', 467
    nqp_decontainerize $P5026, _lex_param_0
    $P5027 = $P5026."create_code"($P101, "BEGIN block", 0)
    set $P104, $P5027
    new $P5029, 'ResizablePMCArray'
    get_hll_global $P5028, $P5029, "GLOBAL"
    set $P105, $P5028
    new $P5030, 'ResizablePMCArray'
    find_dynamic_lex $P5031, "$*GLOBALish"
    unless_null $P5031, fallback207
    nqp_get_sc_object $P5034, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["$GLOBALish"]
    unless_null $P5032, fallback208
    nqp_get_sc_object $P5035, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5032, $P5035
  fallback208:
    unless_null $P5032, vivi_41209
    die "Contextual $*GLOBALish not found"
    box $P5036, "Contextual $*GLOBALish not found"
    set $P5032, $P5036
  vivi_41209:
    set $P5031, $P5032
  fallback207:
    set_hll_global $P5030, "GLOBAL", $P5031
.annotate 'line', 470
    $P104()
    new $P5037, 'ResizablePMCArray'
    set_hll_global $P5037, "GLOBAL", $P105
.annotate 'line', 475
    $P101."shift"()
    find_lex $P5038, "RETURN"
    $P5039 = $P5038($P101)
    goto lexotic_183
  lexotic_182:
    .get_results ($P5039)
  lexotic_183:
    .return ($P5039) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_385_1358115338.889") :anon :lex :outer("cuid_25_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 449
    .const 'Sub' $P5017 = 'cuid_384_1358115338.889' 
    capture_lex $P5017 
    .lex "%symbols", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 451
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 3
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback191
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5010
  fallback191:
    $P5011 = $P5004."symtable"()
    set $P101, $P5011
    set $P5012, $P101
    iter $P5014, $P101
  for_next204:
    unless $P5014, for_done206
    shift $P5016, $P5014
  for_redo205:
    .const 'Sub' $P5015 = 'cuid_384_1358115338.889' 
    capture_lex $P5015
    $P5012 = $P5015($P5016)
    goto for_next204
  for_done206:
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_384_1358115338.889") :anon :lex :outer("cuid_385_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 452
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "%seen"
.annotate 'line', 453
    $P5003 = _lex_param_0."key"()
    set $S5001, $P5003
    set $P5001, $P5002[$S5001]
    unless_null $P5001, fallback196
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5004
  fallback196:
    isfalse $I5001, $P5001
    set $I5003, $I5001
    unless $I5001 goto if38_end195 
    $P5005 = _lex_param_0."value"()
    exists $I5002, $P5005["value"]
    set $I5003, $I5002
  if38_end195:
    box $P5038, $I5003
    set $P5037, $P5038
    unless $I5003 goto if37_end193 
    new $P5032, 'ExceptionHandler'
    set_label $P5032, catch_handler_40203
    $P5032.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5032
.annotate 'line', 454
.annotate 'line', 455
    find_lex $P5007, "$wrapper"
    set $P5006, $P5007[0]
    unless_null $P5006, fallback197
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5006, $P5008
  fallback197:
    nqp_get_sc_object $P5012, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["Op"]
    unless_null $P5009, fallback198
    nqp_get_sc_object $P5013, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5009, $P5013
  fallback198:
.annotate 'line', 457
    nqp_get_sc_object $P5017, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5016, $P5017, "QAST"
    get_who $P5015, $P5016
    set $P5014, $P5015["Var"]
    unless_null $P5014, fallback199
    nqp_get_sc_object $P5018, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5014, $P5018
  fallback199:
    $P5019 = _lex_param_0."key"()
    $P5020 = $P5014."new"($P5019 :named("name"), "lexical" :named("scope"), "var" :named("isdecl"))
.annotate 'line', 458
    nqp_get_sc_object $P5024, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["WVal"]
    unless_null $P5021, fallback200
    nqp_get_sc_object $P5025, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5021, $P5025
  fallback200:
    $P5027 = _lex_param_0."value"()
    set $P5026, $P5027["value"]
    unless_null $P5026, fallback201
    nqp_get_sc_object $P5028, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5026, $P5028
  fallback201:
    $P5029 = $P5021."new"($P5026 :named("value"))
    $P5030 = $P5009."new"($P5020, $P5029, "bind" :named("op"))
    $P5031 = $P5006."push"($P5030)
    set $P5033, $P5031
    pop_eh 
    goto skip_handler_39202
  catch_handler_40203:
    .get_results ($P5032) 
    set $I10001, 1
    set $P5032["handled"], $I10001
    nqp_get_sc_object $P10001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    finalize $P5032
    pop_upto_eh $P5032
    pop_eh 
    set $P5033, $P10001
    goto skip_handler_39202
  skip_handler_39202:
    find_lex $P5034, "%seen"
.annotate 'line', 461
    $P5035 = _lex_param_0."key"()
    set $S5002, $P5035
    box $P5036, 1
    set $P5034[$S5002], $P5036
    set $P5037, $P5036
  if37_end193:
    .return ($P5037) 
.end
.HLL "nqp"
.namespace []
.sub "libs" :subid("cuid_26_1358115338.889") :anon :lex :outer("cuid_33_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 480
    .param pmc _lex_param_0 
    .const 'Sub' $P5050 = 'cuid_386_1358115338.889' 
    capture_lex $P5050 
    .lex "@loadlibs", $P101 
    .lex "self", _lex_param_0 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    box $P5003, "nqp_group"
    push $P5002, $P5003
    box $P5004, "nqp_ops"
    push $P5002, $P5004
    box $P5005, "nqp_bigint_ops"
    push $P5002, $P5005
    box $P5006, "trans_ops"
    push $P5002, $P5006
    box $P5007, "io_ops"
    push $P5002, $P5007
    set $P101, $P5002
    find_dynamic_lex $P5010, "%*COMPILING"
    unless_null $P5010, fallback212
    nqp_get_sc_object $P5013, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5012, $P5013
    set $P5011, $P5012["%COMPILING"]
    unless_null $P5011, fallback213
    nqp_get_sc_object $P5015, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5014, $P5015
    new $P5016, 'Hash'
    set $P5014["%COMPILING"], $P5016
    set $P5011, $P5016
  fallback213:
    unless_null $P5011, vivi_43214
    die "Contextual %*COMPILING not found"
    box $P5017, "Contextual %*COMPILING not found"
    set $P5011, $P5017
  vivi_43214:
    set $P5010, $P5011
  fallback212:
    set $P5009, $P5010["%?OPTIONS"]
    unless_null $P5009, fallback215
    nqp_get_sc_object $P5018, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5009, $P5018
  fallback215:
    set $P5008, $P5009["vmlibs"]
    unless_null $P5008, fallback216
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5008, $P5019
  fallback216:
    unless $P5008 goto if42_end211 
.annotate 'line', 483
    find_dynamic_lex $P5026, "%*COMPILING"
    unless_null $P5026, fallback217
    nqp_get_sc_object $P5029, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["%COMPILING"]
    unless_null $P5027, fallback218
    nqp_get_sc_object $P5031, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5030, $P5031
    new $P5032, 'Hash'
    set $P5030["%COMPILING"], $P5032
    set $P5027, $P5032
  fallback218:
    unless_null $P5027, vivi_44219
    die "Contextual %*COMPILING not found"
    box $P5033, "Contextual %*COMPILING not found"
    set $P5027, $P5033
  vivi_44219:
    set $P5026, $P5027
  fallback217:
    set $P5025, $P5026["%?OPTIONS"]
    unless_null $P5025, fallback220
    nqp_get_sc_object $P5034, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5025, $P5034
  fallback220:
    set $P5024, $P5025["vmlibs"]
    unless_null $P5024, fallback221
    nqp_get_sc_object $P5035, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5024, $P5035
  fallback221:
    set $S5001, $P5024
    split $P5023, ",", $S5001
    set $P5020, $P5023
    iter $P5022, $P5023
  for_next222:
    unless $P5022, for_done224
    shift $P5037, $P5022
  for_redo223:
    .const 'Sub' $P5036 = 'cuid_386_1358115338.889' 
    capture_lex $P5036
    $P5020 = $P5036($P5037)
    goto for_next222
  for_done224:
  if42_end211:
.annotate 'line', 488
    nqp_get_sc_object $P5041, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5040, $P5041, "QAST"
    get_who $P5039, $P5040
    set $P5038, $P5039["VM"]
    unless_null $P5038, fallback225
    nqp_get_sc_object $P5042, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5038, $P5042
  fallback225:
.annotate 'line', 490
    nqp_get_sc_object $P5046, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5045, $P5046, "QAST"
    get_who $P5044, $P5045
    set $P5043, $P5044["Op"]
    unless_null $P5043, fallback226
    nqp_get_sc_object $P5047, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5043, $P5047
  fallback226:
    $P5048 = $P5043."new"("null" :named("op"))
    $P5049 = $P5038."new"($P101 :named("loadlibs"), $P5048 :named("jvm"))
    .return ($P5049) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_386_1358115338.889") :anon :lex :outer("cuid_26_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 484
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 485
    find_lex $P5001, "@loadlibs"
    $P5002 = $P5001."push"(_lex_param_0)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "add_initializations" :subid("cuid_27_1358115338.889") :anon :lex :outer("cuid_33_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 494
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
.annotate 'line', 495
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5005, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Stmts"]
    unless_null $P5002, fallback227
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5006
  fallback227:
.annotate 'line', 496
    nqp_get_sc_object $P5010, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["VM"]
    unless_null $P5007, fallback228
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5007, $P5011
  fallback228:
    $P5012 = $P5007."new"("nqp_dynop_setup v" :named("pirop"))
.annotate 'line', 497
    nqp_get_sc_object $P5016, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["VM"]
    unless_null $P5013, fallback229
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5013, $P5017
  fallback229:
    $P5018 = $P5013."new"("nqp_bigint_setup v" :named("pirop"))
.annotate 'line', 498
    nqp_get_sc_object $P5022, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5021, $P5022, "QAST"
    get_who $P5020, $P5021
    set $P5019, $P5020["Op"]
    unless_null $P5019, fallback230
    nqp_get_sc_object $P5023, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5019, $P5023
  fallback230:
.annotate 'line', 500
    nqp_get_sc_object $P5027, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["VM"]
    unless_null $P5024, fallback231
    nqp_get_sc_object $P5028, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5024, $P5028
  fallback231:
    $P5029 = $P5024."new"("getinterp P" :named("pirop"))
.annotate 'line', 501
    nqp_get_sc_object $P5033, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["VM"]
    unless_null $P5030, fallback232
    nqp_get_sc_object $P5034, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5030, $P5034
  fallback232:
    nqp_get_sc_object $P5038, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["SVal"]
    unless_null $P5035, fallback233
    nqp_get_sc_object $P5039, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5035, $P5039
  fallback233:
    $P5040 = $P5035."new"("LexPad" :named("value"))
    $P5041 = $P5030."new"($P5040, "get_class Ps" :named("pirop"))
.annotate 'line', 502
    nqp_get_sc_object $P5045, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["VM"]
    unless_null $P5042, fallback234
    nqp_get_sc_object $P5046, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5042, $P5046
  fallback234:
    nqp_get_sc_object $P5050, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5049, $P5050, "QAST"
    get_who $P5048, $P5049
    set $P5047, $P5048["SVal"]
    unless_null $P5047, fallback235
    nqp_get_sc_object $P5051, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5047, $P5051
  fallback235:
    $P5052 = $P5047."new"("NQPLexPad" :named("value"))
    $P5053 = $P5042."new"($P5052, "get_class Ps" :named("pirop"))
    $P5054 = $P5019."new"($P5029, $P5041, $P5053, "callmethod" :named("op"), "hll_map" :named("name"))
    $P5055 = $P5002."new"($P5012, $P5018, $P5054)
    $P5056 = $P5001."add_load_dependency_task"($P5055 :named("deserialize_past"))
    .return ($P5056) 
.end
.HLL "nqp"
.namespace []
.sub "is_lexical" :subid("cuid_28_1358115338.889") :anon :lex :outer("cuid_33_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 508
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$name", _lex_param_1 
.annotate 'line', 509
    nqp_decontainerize $P5001, _lex_param_0
    $P5002 = $P5001."is_scope"(_lex_param_1, "lexical")
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "is_package" :subid("cuid_29_1358115338.889") :anon :lex :outer("cuid_33_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 514
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$name", _lex_param_1 
.annotate 'line', 515
    nqp_decontainerize $P5001, _lex_param_0
    $P5002 = $P5001."is_scope"(_lex_param_1, "package")
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "is_scope" :subid("cuid_30_1358115338.889") :anon :lex :outer("cuid_33_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 520
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .const 'Sub' $P5011 = 'cuid_387_1358115338.889' 
    capture_lex $P5011 
    .lex "$i", $P101 
    .lex "self", _lex_param_0 
    .lex "$name", _lex_param_1 
    .lex "$wanted_scope", _lex_param_2 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_236
    .lex "RETURN", $P102
    nqp_decontainerize $P5002, _lex_param_0
    nqp_get_sc_object $P5003, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 3
    repr_get_attr_obj $P5004, $P5002, $P5003, "@!BLOCKS"
    set $N5001, $P5004
    box $P5005, $N5001
    set $P101, $P5005
  while45_test238:
    set $N5002, $P101
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5009, $I5001
    set $P5008, $P5009
    unless $I5001 goto while45_done242 
  while45_redo240:
    .const 'Sub' $P5006 = 'cuid_387_1358115338.889' 
    capture_lex $P5006
    $P5007 = $P5006()
    set $P5008, $P5007
    goto while45_test238 
  while45_done242:
    box $P5010, 0
    goto lexotic_237
  lexotic_236:
    .get_results ($P5010)
  lexotic_237:
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_387_1358115338.889") :anon :lex :outer("cuid_30_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 522
    .lex "%sym", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 524
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 3
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback243
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5010
  fallback243:
    find_lex $P5011, "$name"
    $P5012 = $P5004."symbol"($P5011)
    set $P101, $P5012
    set $N5004, $P101
    box $P5019, $N5004
    set $P5018, $P5019
    unless $N5004 goto if46_end245 
.annotate 'line', 525
    set $P5014, $P101["scope"]
    unless_null $P5014, fallback246
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5014, $P5015
  fallback246:
    set $S5001, $P5014
    find_lex $P5016, "$wanted_scope"
    set $S5002, $P5016
    iseq $I5002, $S5001, $S5002
    find_lex $P5013, "RETURN"
    $P5017 = $P5013($I5002)
    set $P5018, $P5017
  if46_end245:
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "known_sym" :subid("cuid_31_1358115338.889") :anon :lex :outer("cuid_33_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 533
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$known", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .lex "@name", _lex_param_2 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    box $P5002, 0
    set $P101, $P5002
    new $P5005, 'ExceptionHandler'
    set_label $P5005, catch_handler_48248
    $P5005.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5005
.annotate 'line', 535
.annotate 'line', 536
    nqp_decontainerize $P5003, _lex_param_0
    $P5003."find_sym"(_lex_param_2)
    box $P5004, 1
    set $P101, $P5004
    set $P5006, $P101
    pop_eh 
    goto skip_handler_47247
  catch_handler_48248:
    .get_results ($P5005) 
    set $I10001, 1
    set $P5005["handled"], $I10001
    nqp_get_sc_object $P10001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    finalize $P5005
    pop_upto_eh $P5005
    pop_eh 
    set $P5006, $P10001
    goto skip_handler_47247
  skip_handler_47247:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "find_sym" :subid("cuid_32_1358115338.889") :anon :lex :outer("cuid_33_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 545
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5018 = 'cuid_389_1358115338.889' 
    capture_lex $P5018 
    .const 'Sub' $P5018 = 'cuid_391_1358115338.889' 
    capture_lex $P5018 
    .const 'Sub' $P5018 = 'cuid_392_1358115338.889' 
    capture_lex $P5018 
    .lex "$result", $P101 
    .lex "self", _lex_param_0 
    .lex "@name", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_249
    .lex "RETURN", $P102
    set $N5001, _lex_param_1
    if $N5001 goto unless49_end252 
.annotate 'line', 547
    box $P5002, "Cannot look up empty name"
    die $P5002
  unless49_end252:
    set $N5002, _lex_param_1
    set $N5003, 1
    iseq $I5001, $N5002, $N5003
    unless $I5001 goto if50_end254 
    .const 'Sub' $P5003 = 'cuid_389_1358115338.889' 
    capture_lex $P5003
    $P5004 = $P5003()
  if50_end254:
    find_dynamic_lex $P5005, "$*GLOBALish"
    unless_null $P5005, fallback267
    nqp_get_sc_object $P5008, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["$GLOBALish"]
    unless_null $P5006, fallback268
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5006, $P5009
  fallback268:
    unless_null $P5006, vivi_54269
    die "Contextual $*GLOBALish not found"
    box $P5010, "Contextual $*GLOBALish not found"
    set $P5006, $P5010
  vivi_54269:
    set $P5005, $P5006
  fallback267:
    set $P101, $P5005
    set $N5004, _lex_param_1
    set $N5005, 2
    isge $I5002, $N5004, $N5005
    unless $I5002 goto if55_end271 
    .const 'Sub' $P5011 = 'cuid_391_1358115338.889' 
    capture_lex $P5011
    $P5012 = $P5011()
  if55_end271:
    set $P5013, _lex_param_1
    iter $P5015, _lex_param_1
  for_next287:
    unless $P5015, for_done289
    shift $P5017, $P5015
  for_redo288:
    .const 'Sub' $P5016 = 'cuid_392_1358115338.889' 
    capture_lex $P5016
    $P5013 = $P5016($P5017)
    goto for_next287
  for_done289:
    goto lexotic_250
  lexotic_249:
    .get_results ($P101)
  lexotic_250:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_389_1358115338.889") :anon :lex :outer("cuid_32_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 551
    .const 'Sub' $P5015 = 'cuid_388_1358115338.889' 
    capture_lex $P5015 
    .lex "$final_name", $P101 
    .lex "$i", $P102 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
    find_lex $P5004, "@name"
    set $P5003, $P5004[0]
    unless_null $P5003, fallback255
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5003, $P5005
  fallback255:
    set $P101, $P5003
    find_lex $P5007, "self"
    nqp_decontainerize $P5006, $P5007
    nqp_get_sc_object $P5008, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 3
    repr_get_attr_obj $P5009, $P5006, $P5008, "@!BLOCKS"
    set $N5001, $P5009
    box $P5010, $N5001
    set $P102, $P5010
  while51_test256:
    set $N5002, $P102
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5014, $I5001
    set $P5013, $P5014
    unless $I5001 goto while51_done260 
  while51_redo258:
    .const 'Sub' $P5011 = 'cuid_388_1358115338.889' 
    capture_lex $P5011
    $P5012 = $P5011()
    set $P5013, $P5012
    goto while51_test256 
  while51_done260:
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_388_1358115338.889") :anon :lex :outer("cuid_389_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 554
    .lex "%sym", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 556
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 3
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback261
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5010
  fallback261:
    find_lex $P5011, "$final_name"
    $P5012 = $P5004."symbol"($P5011)
    set $P101, $P5012
    set $N5004, $P101
    box $P5021, $N5004
    set $P5020, $P5021
    unless $N5004 goto if52_end263 
.annotate 'line', 557
    exists $I5002, $P101["value"]
    unless $I5002 goto if53_else264 
.annotate 'line', 558
    set $P5014, $P101["value"]
    unless_null $P5014, fallback266
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5014, $P5015
  fallback266:
    find_lex $P5013, "RETURN"
    $P5016 = $P5013($P5014)
    set $P5019, $P5016
    goto if53_end265
  if53_else264:
.annotate 'line', 561
    find_lex $P5017, "$final_name"
    set $S5002, $P5017
    concat $S5001, "No compile-time value for ", $S5002
    box $P5018, $S5001
    die $P5018
    set $P5019, $P5018
  if53_end265:
    set $P5020, $P5019
  if52_end263:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_391_1358115338.889") :anon :lex :outer("cuid_32_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 572
    .const 'Sub' $P5015 = 'cuid_390_1358115338.889' 
    capture_lex $P5015 
    .lex "$first", $P101 
    .lex "$i", $P102 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
    find_lex $P5004, "@name"
    set $P5003, $P5004[0]
    unless_null $P5003, fallback272
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5003, $P5005
  fallback272:
    set $P101, $P5003
    find_lex $P5007, "self"
    nqp_decontainerize $P5006, $P5007
    nqp_get_sc_object $P5008, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 3
    repr_get_attr_obj $P5009, $P5006, $P5008, "@!BLOCKS"
    set $N5001, $P5009
    box $P5010, $N5001
    set $P102, $P5010
  while56_test273:
    set $N5002, $P102
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5014, $I5001
    set $P5013, $P5014
    unless $I5001 goto while56_done277 
  while56_redo275:
    .const 'Sub' $P5011 = 'cuid_390_1358115338.889' 
    capture_lex $P5011
    $P5012 = $P5011()
    set $P5013, $P5012
    goto while56_test273 
  while56_done277:
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_390_1358115338.889") :anon :lex :outer("cuid_391_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 575
    .lex "%sym", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 577
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 3
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback278
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5010
  fallback278:
    find_lex $P5011, "$first"
    $P5012 = $P5004."symbol"($P5011)
    set $P101, $P5012
    set $N5004, $P101
    box $P5021, $N5004
    set $P5020, $P5021
    unless $N5004 goto if57_end280 
.annotate 'line', 578
    exists $I5002, $P101["value"]
    unless $I5002 goto if58_else281 
.annotate 'line', 579
    set $P5013, $P101["value"]
    unless_null $P5013, fallback283
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5013, $P5014
  fallback283:
    store_lex "$result", $P5013
.annotate 'line', 581
    find_lex $P5015, "@name"
    $P5015."shift"()
    box $P5016, 0
    store_lex "$i", $P5016
    set $P5019, $P5016
    goto if58_end282
  if58_else281:
.annotate 'line', 584
    find_lex $P5017, "$first"
    set $S5002, $P5017
    concat $S5001, "No compile-time value for ", $S5002
    box $P5018, $S5001
    die $P5018
    set $P5019, $P5018
  if58_end282:
    set $P5020, $P5019
  if57_end280:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_392_1358115338.889") :anon :lex :outer("cuid_32_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 592
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$result"
    get_who $P5001, $P5002
    set $S5001, _lex_param_0
    exists $I5001, $P5001[$S5001]
    unless $I5001 goto if59_else284 
.annotate 'line', 593
    find_lex $P5005, "$result"
    get_who $P5004, $P5005
    set $S5002, _lex_param_0
    set $P5003, $P5004[$S5002]
    unless_null $P5003, fallback286
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5003, $P5006
  fallback286:
    store_lex "$result", $P5003
    set $P5009, $P5003
    goto if59_end285
  if59_else284:
.annotate 'line', 596
    find_lex $P5007, "@name"
    join $S5004, "::", $P5007
    concat $S5003, "Could not locate compile-time value for symbol ", $S5004
    box $P5008, $S5003
    die $P5008
    set $P5009, $P5008
  if59_end285:
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_224_1358115338.889") :anon :lex :outer("cuid_1_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 607
    .const 'Sub' $P5259 = 'cuid_34_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_35_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_36_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_37_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_38_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_39_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_40_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_42_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_44_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_45_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_46_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_48_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_49_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_50_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_51_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_52_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_53_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_54_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_55_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_56_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_57_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_58_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_59_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_60_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_61_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_62_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_63_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_64_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_66_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_67_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_68_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_69_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_70_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_71_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_72_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_73_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_74_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_75_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_76_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_77_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_78_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_79_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_80_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_81_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_82_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_83_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_84_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_85_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_86_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_87_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_88_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_89_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_92_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_93_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_94_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_95_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_96_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_97_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_98_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_99_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_100_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_101_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_102_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_103_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_104_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_105_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_106_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_107_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_108_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_109_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_110_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_111_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_112_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_113_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_114_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_115_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_116_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_117_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_118_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_119_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_120_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_121_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_122_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_123_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_124_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_125_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_126_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_127_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_128_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_130_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_131_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_132_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_133_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_134_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_135_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_136_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_137_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_138_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_139_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_140_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_141_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_142_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_143_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_144_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_145_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_146_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_147_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_148_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_149_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_150_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_151_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_152_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_153_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_154_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_155_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_156_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_157_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_158_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_159_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_160_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_161_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_162_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_163_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_164_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_165_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_166_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_167_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_168_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_169_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_170_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_171_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_172_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_173_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_174_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_175_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_176_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_177_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_178_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_179_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_180_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_181_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_182_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_183_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_184_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_185_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_186_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_187_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_188_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_189_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_190_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_191_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_192_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_193_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_194_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_195_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_196_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_197_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_198_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_199_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_200_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_201_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_202_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_203_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_204_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_205_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_206_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_207_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_208_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_209_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_210_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_211_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_212_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_213_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_214_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_215_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_216_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_217_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_218_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_219_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_220_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_221_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_222_1358115338.889' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_223_1358115338.889' 
    capture_lex $P5259 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
.annotate 'line', 1273
.annotate 'line', 1274
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5003, $P5004, "NQP"
    get_who $P5002, $P5003
    set $P5001, $P5002["Grammar"]
    unless_null $P5001, fallback290
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5005
  fallback290:
    $P5001."O"(":prec<y=>, :assoc<unary>", "%methodop")
.annotate 'line', 1275
    nqp_get_sc_object $P5009, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5008, $P5009, "NQP"
    get_who $P5007, $P5008
    set $P5006, $P5007["Grammar"]
    unless_null $P5006, fallback291
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5006, $P5010
  fallback291:
    $P5006."O"(":prec<x=>, :assoc<unary>", "%autoincrement")
.annotate 'line', 1276
    nqp_get_sc_object $P5014, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5013, $P5014, "NQP"
    get_who $P5012, $P5013
    set $P5011, $P5012["Grammar"]
    unless_null $P5011, fallback292
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5011, $P5015
  fallback292:
    $P5011."O"(":prec<w=>, :assoc<left>", "%exponentiation")
.annotate 'line', 1277
    nqp_get_sc_object $P5019, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5018, $P5019, "NQP"
    get_who $P5017, $P5018
    set $P5016, $P5017["Grammar"]
    unless_null $P5016, fallback293
    nqp_get_sc_object $P5020, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5016, $P5020
  fallback293:
    $P5016."O"(":prec<v=>, :assoc<unary>", "%symbolic_unary")
.annotate 'line', 1278
    nqp_get_sc_object $P5024, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5023, $P5024, "NQP"
    get_who $P5022, $P5023
    set $P5021, $P5022["Grammar"]
    unless_null $P5021, fallback294
    nqp_get_sc_object $P5025, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5021, $P5025
  fallback294:
    $P5021."O"(":prec<u=>, :assoc<left>", "%multiplicative")
.annotate 'line', 1279
    nqp_get_sc_object $P5029, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5028, $P5029, "NQP"
    get_who $P5027, $P5028
    set $P5026, $P5027["Grammar"]
    unless_null $P5026, fallback295
    nqp_get_sc_object $P5030, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5026, $P5030
  fallback295:
    $P5026."O"(":prec<t=>, :assoc<left>", "%additive")
.annotate 'line', 1280
    nqp_get_sc_object $P5034, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5033, $P5034, "NQP"
    get_who $P5032, $P5033
    set $P5031, $P5032["Grammar"]
    unless_null $P5031, fallback296
    nqp_get_sc_object $P5035, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5031, $P5035
  fallback296:
    $P5031."O"(":prec<r=>, :assoc<left>", "%concatenation")
.annotate 'line', 1281
    nqp_get_sc_object $P5039, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5038, $P5039, "NQP"
    get_who $P5037, $P5038
    set $P5036, $P5037["Grammar"]
    unless_null $P5036, fallback297
    nqp_get_sc_object $P5040, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5036, $P5040
  fallback297:
    $P5036."O"(":prec<m=>, :assoc<left>", "%relational")
.annotate 'line', 1282
    nqp_get_sc_object $P5044, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5043, $P5044, "NQP"
    get_who $P5042, $P5043
    set $P5041, $P5042["Grammar"]
    unless_null $P5041, fallback298
    nqp_get_sc_object $P5045, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5041, $P5045
  fallback298:
    $P5041."O"(":prec<l=>, :assoc<left>", "%tight_and")
.annotate 'line', 1283
    nqp_get_sc_object $P5049, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5048, $P5049, "NQP"
    get_who $P5047, $P5048
    set $P5046, $P5047["Grammar"]
    unless_null $P5046, fallback299
    nqp_get_sc_object $P5050, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5046, $P5050
  fallback299:
    $P5046."O"(":prec<k=>, :assoc<left>", "%tight_or")
.annotate 'line', 1284
    nqp_get_sc_object $P5054, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5053, $P5054, "NQP"
    get_who $P5052, $P5053
    set $P5051, $P5052["Grammar"]
    unless_null $P5051, fallback300
    nqp_get_sc_object $P5055, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5051, $P5055
  fallback300:
    $P5051."O"(":prec<j=>, :assoc<right>", "%conditional")
.annotate 'line', 1285
    nqp_get_sc_object $P5059, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5058, $P5059, "NQP"
    get_who $P5057, $P5058
    set $P5056, $P5057["Grammar"]
    unless_null $P5056, fallback301
    nqp_get_sc_object $P5060, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5056, $P5060
  fallback301:
    $P5056."O"(":prec<i=>, :assoc<right>", "%assignment")
.annotate 'line', 1286
    nqp_get_sc_object $P5064, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5063, $P5064, "NQP"
    get_who $P5062, $P5063
    set $P5061, $P5062["Grammar"]
    unless_null $P5061, fallback302
    nqp_get_sc_object $P5065, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5061, $P5065
  fallback302:
    $P5061."O"(":prec<g=>, :assoc<list>, :nextterm<nulltermish>", "%comma")
.annotate 'line', 1287
    nqp_get_sc_object $P5069, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5068, $P5069, "NQP"
    get_who $P5067, $P5068
    set $P5066, $P5067["Grammar"]
    unless_null $P5066, fallback303
    nqp_get_sc_object $P5070, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5066, $P5070
  fallback303:
    $P5066."O"(":prec<f=>, :assoc<list>", "%list_infix")
.annotate 'line', 1288
    nqp_get_sc_object $P5074, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5073, $P5074, "NQP"
    get_who $P5072, $P5073
    set $P5071, $P5072["Grammar"]
    unless_null $P5071, fallback304
    nqp_get_sc_object $P5075, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5071, $P5075
  fallback304:
    $P5071."O"(":prec<e=>, :assoc<unary>", "%list_prefix")
.annotate 'line', 607
    .const 'Sub' $P5076 = 'cuid_34_1358115338.889' 
    capture_lex $P5076
    .const 'Sub' $P5077 = 'cuid_35_1358115338.889' 
    capture_lex $P5077
    .const 'Sub' $P5078 = 'cuid_36_1358115338.889' 
    capture_lex $P5078
    .const 'Sub' $P5079 = 'cuid_37_1358115338.889' 
    capture_lex $P5079
    .const 'Sub' $P5080 = 'cuid_38_1358115338.889' 
    capture_lex $P5080
    .const 'Sub' $P5081 = 'cuid_39_1358115338.889' 
    capture_lex $P5081
    .const 'Sub' $P5082 = 'cuid_40_1358115338.889' 
    capture_lex $P5082
    .const 'Sub' $P5083 = 'cuid_42_1358115338.889' 
    capture_lex $P5083
    .const 'Sub' $P5084 = 'cuid_44_1358115338.889' 
    capture_lex $P5084
    .const 'Sub' $P5085 = 'cuid_45_1358115338.889' 
    capture_lex $P5085
    .const 'Sub' $P5086 = 'cuid_46_1358115338.889' 
    capture_lex $P5086
    .const 'Sub' $P5087 = 'cuid_48_1358115338.889' 
    capture_lex $P5087
    .const 'Sub' $P5088 = 'cuid_49_1358115338.889' 
    capture_lex $P5088
    .const 'Sub' $P5089 = 'cuid_50_1358115338.889' 
    capture_lex $P5089
    .const 'Sub' $P5090 = 'cuid_51_1358115338.889' 
    capture_lex $P5090
    .const 'Sub' $P5091 = 'cuid_52_1358115338.889' 
    capture_lex $P5091
    .const 'Sub' $P5092 = 'cuid_53_1358115338.889' 
    capture_lex $P5092
    .const 'Sub' $P5093 = 'cuid_54_1358115338.889' 
    capture_lex $P5093
    .const 'Sub' $P5094 = 'cuid_55_1358115338.889' 
    capture_lex $P5094
    .const 'Sub' $P5095 = 'cuid_56_1358115338.889' 
    capture_lex $P5095
    .const 'Sub' $P5096 = 'cuid_57_1358115338.889' 
    capture_lex $P5096
    .const 'Sub' $P5097 = 'cuid_58_1358115338.889' 
    capture_lex $P5097
    .const 'Sub' $P5098 = 'cuid_59_1358115338.889' 
    capture_lex $P5098
    .const 'Sub' $P5099 = 'cuid_60_1358115338.889' 
    capture_lex $P5099
    .const 'Sub' $P5100 = 'cuid_61_1358115338.889' 
    capture_lex $P5100
    .const 'Sub' $P5101 = 'cuid_62_1358115338.889' 
    capture_lex $P5101
    .const 'Sub' $P5102 = 'cuid_63_1358115338.889' 
    capture_lex $P5102
    .const 'Sub' $P5103 = 'cuid_64_1358115338.889' 
    capture_lex $P5103
    .const 'Sub' $P5104 = 'cuid_66_1358115338.889' 
    capture_lex $P5104
    .const 'Sub' $P5105 = 'cuid_67_1358115338.889' 
    capture_lex $P5105
    .const 'Sub' $P5106 = 'cuid_68_1358115338.889' 
    capture_lex $P5106
    .const 'Sub' $P5107 = 'cuid_69_1358115338.889' 
    capture_lex $P5107
    .const 'Sub' $P5108 = 'cuid_70_1358115338.889' 
    capture_lex $P5108
    .const 'Sub' $P5109 = 'cuid_71_1358115338.889' 
    capture_lex $P5109
    .const 'Sub' $P5110 = 'cuid_72_1358115338.889' 
    capture_lex $P5110
    .const 'Sub' $P5111 = 'cuid_73_1358115338.889' 
    capture_lex $P5111
    .const 'Sub' $P5112 = 'cuid_74_1358115338.889' 
    capture_lex $P5112
    .const 'Sub' $P5113 = 'cuid_75_1358115338.889' 
    capture_lex $P5113
    .const 'Sub' $P5114 = 'cuid_76_1358115338.889' 
    capture_lex $P5114
    .const 'Sub' $P5115 = 'cuid_77_1358115338.889' 
    capture_lex $P5115
    .const 'Sub' $P5116 = 'cuid_78_1358115338.889' 
    capture_lex $P5116
    .const 'Sub' $P5117 = 'cuid_79_1358115338.889' 
    capture_lex $P5117
    .const 'Sub' $P5118 = 'cuid_80_1358115338.889' 
    capture_lex $P5118
    .const 'Sub' $P5119 = 'cuid_81_1358115338.889' 
    capture_lex $P5119
    .const 'Sub' $P5120 = 'cuid_82_1358115338.889' 
    capture_lex $P5120
    .const 'Sub' $P5121 = 'cuid_83_1358115338.889' 
    capture_lex $P5121
    .const 'Sub' $P5122 = 'cuid_84_1358115338.889' 
    capture_lex $P5122
    .const 'Sub' $P5123 = 'cuid_85_1358115338.889' 
    capture_lex $P5123
    .const 'Sub' $P5124 = 'cuid_86_1358115338.889' 
    capture_lex $P5124
    .const 'Sub' $P5125 = 'cuid_87_1358115338.889' 
    capture_lex $P5125
    .const 'Sub' $P5126 = 'cuid_88_1358115338.889' 
    capture_lex $P5126
    .const 'Sub' $P5127 = 'cuid_89_1358115338.889' 
    capture_lex $P5127
    .const 'Sub' $P5128 = 'cuid_92_1358115338.889' 
    capture_lex $P5128
    .const 'Sub' $P5129 = 'cuid_93_1358115338.889' 
    capture_lex $P5129
    .const 'Sub' $P5130 = 'cuid_94_1358115338.889' 
    capture_lex $P5130
    .const 'Sub' $P5131 = 'cuid_95_1358115338.889' 
    capture_lex $P5131
    .const 'Sub' $P5132 = 'cuid_96_1358115338.889' 
    capture_lex $P5132
    .const 'Sub' $P5133 = 'cuid_97_1358115338.889' 
    capture_lex $P5133
    .const 'Sub' $P5134 = 'cuid_98_1358115338.889' 
    capture_lex $P5134
    .const 'Sub' $P5135 = 'cuid_99_1358115338.889' 
    capture_lex $P5135
    .const 'Sub' $P5136 = 'cuid_100_1358115338.889' 
    capture_lex $P5136
    .const 'Sub' $P5137 = 'cuid_101_1358115338.889' 
    capture_lex $P5137
    .const 'Sub' $P5138 = 'cuid_102_1358115338.889' 
    capture_lex $P5138
    .const 'Sub' $P5139 = 'cuid_103_1358115338.889' 
    capture_lex $P5139
    .const 'Sub' $P5140 = 'cuid_104_1358115338.889' 
    capture_lex $P5140
    .const 'Sub' $P5141 = 'cuid_105_1358115338.889' 
    capture_lex $P5141
    .const 'Sub' $P5142 = 'cuid_106_1358115338.889' 
    capture_lex $P5142
    .const 'Sub' $P5143 = 'cuid_107_1358115338.889' 
    capture_lex $P5143
    .const 'Sub' $P5144 = 'cuid_108_1358115338.889' 
    capture_lex $P5144
    .const 'Sub' $P5145 = 'cuid_109_1358115338.889' 
    capture_lex $P5145
    .const 'Sub' $P5146 = 'cuid_110_1358115338.889' 
    capture_lex $P5146
    .const 'Sub' $P5147 = 'cuid_111_1358115338.889' 
    capture_lex $P5147
    .const 'Sub' $P5148 = 'cuid_112_1358115338.889' 
    capture_lex $P5148
    .const 'Sub' $P5149 = 'cuid_113_1358115338.889' 
    capture_lex $P5149
    .const 'Sub' $P5150 = 'cuid_114_1358115338.889' 
    capture_lex $P5150
    .const 'Sub' $P5151 = 'cuid_115_1358115338.889' 
    capture_lex $P5151
    .const 'Sub' $P5152 = 'cuid_116_1358115338.889' 
    capture_lex $P5152
    .const 'Sub' $P5153 = 'cuid_117_1358115338.889' 
    capture_lex $P5153
    .const 'Sub' $P5154 = 'cuid_118_1358115338.889' 
    capture_lex $P5154
    .const 'Sub' $P5155 = 'cuid_119_1358115338.889' 
    capture_lex $P5155
    .const 'Sub' $P5156 = 'cuid_120_1358115338.889' 
    capture_lex $P5156
    .const 'Sub' $P5157 = 'cuid_121_1358115338.889' 
    capture_lex $P5157
    .const 'Sub' $P5158 = 'cuid_122_1358115338.889' 
    capture_lex $P5158
    .const 'Sub' $P5159 = 'cuid_123_1358115338.889' 
    capture_lex $P5159
    .const 'Sub' $P5160 = 'cuid_124_1358115338.889' 
    capture_lex $P5160
    .const 'Sub' $P5161 = 'cuid_125_1358115338.889' 
    capture_lex $P5161
    .const 'Sub' $P5162 = 'cuid_126_1358115338.889' 
    capture_lex $P5162
    .const 'Sub' $P5163 = 'cuid_127_1358115338.889' 
    capture_lex $P5163
    .const 'Sub' $P5164 = 'cuid_128_1358115338.889' 
    capture_lex $P5164
    .const 'Sub' $P5165 = 'cuid_130_1358115338.889' 
    capture_lex $P5165
    .const 'Sub' $P5166 = 'cuid_131_1358115338.889' 
    capture_lex $P5166
    .const 'Sub' $P5167 = 'cuid_132_1358115338.889' 
    capture_lex $P5167
    .const 'Sub' $P5168 = 'cuid_133_1358115338.889' 
    capture_lex $P5168
    .const 'Sub' $P5169 = 'cuid_134_1358115338.889' 
    capture_lex $P5169
    .const 'Sub' $P5170 = 'cuid_135_1358115338.889' 
    capture_lex $P5170
    .const 'Sub' $P5171 = 'cuid_136_1358115338.889' 
    capture_lex $P5171
    .const 'Sub' $P5172 = 'cuid_137_1358115338.889' 
    capture_lex $P5172
    .const 'Sub' $P5173 = 'cuid_138_1358115338.889' 
    capture_lex $P5173
    .const 'Sub' $P5174 = 'cuid_139_1358115338.889' 
    capture_lex $P5174
    .const 'Sub' $P5175 = 'cuid_140_1358115338.889' 
    capture_lex $P5175
    .const 'Sub' $P5176 = 'cuid_141_1358115338.889' 
    capture_lex $P5176
    .const 'Sub' $P5177 = 'cuid_142_1358115338.889' 
    capture_lex $P5177
    .const 'Sub' $P5178 = 'cuid_143_1358115338.889' 
    capture_lex $P5178
    .const 'Sub' $P5179 = 'cuid_144_1358115338.889' 
    capture_lex $P5179
    .const 'Sub' $P5180 = 'cuid_145_1358115338.889' 
    capture_lex $P5180
    .const 'Sub' $P5181 = 'cuid_146_1358115338.889' 
    capture_lex $P5181
    .const 'Sub' $P5182 = 'cuid_147_1358115338.889' 
    capture_lex $P5182
    .const 'Sub' $P5183 = 'cuid_148_1358115338.889' 
    capture_lex $P5183
    .const 'Sub' $P5184 = 'cuid_149_1358115338.889' 
    capture_lex $P5184
    .const 'Sub' $P5185 = 'cuid_150_1358115338.889' 
    capture_lex $P5185
    .const 'Sub' $P5186 = 'cuid_151_1358115338.889' 
    capture_lex $P5186
    .const 'Sub' $P5187 = 'cuid_152_1358115338.889' 
    capture_lex $P5187
    .const 'Sub' $P5188 = 'cuid_153_1358115338.889' 
    capture_lex $P5188
    .const 'Sub' $P5189 = 'cuid_154_1358115338.889' 
    capture_lex $P5189
    .const 'Sub' $P5190 = 'cuid_155_1358115338.889' 
    capture_lex $P5190
    .const 'Sub' $P5191 = 'cuid_156_1358115338.889' 
    capture_lex $P5191
    .const 'Sub' $P5192 = 'cuid_157_1358115338.889' 
    capture_lex $P5192
    .const 'Sub' $P5193 = 'cuid_158_1358115338.889' 
    capture_lex $P5193
    .const 'Sub' $P5194 = 'cuid_159_1358115338.889' 
    capture_lex $P5194
    .const 'Sub' $P5195 = 'cuid_160_1358115338.889' 
    capture_lex $P5195
    .const 'Sub' $P5196 = 'cuid_161_1358115338.889' 
    capture_lex $P5196
    .const 'Sub' $P5197 = 'cuid_162_1358115338.889' 
    capture_lex $P5197
    .const 'Sub' $P5198 = 'cuid_163_1358115338.889' 
    capture_lex $P5198
    .const 'Sub' $P5199 = 'cuid_164_1358115338.889' 
    capture_lex $P5199
    .const 'Sub' $P5200 = 'cuid_165_1358115338.889' 
    capture_lex $P5200
    .const 'Sub' $P5201 = 'cuid_166_1358115338.889' 
    capture_lex $P5201
    .const 'Sub' $P5202 = 'cuid_167_1358115338.889' 
    capture_lex $P5202
    .const 'Sub' $P5203 = 'cuid_168_1358115338.889' 
    capture_lex $P5203
    .const 'Sub' $P5204 = 'cuid_169_1358115338.889' 
    capture_lex $P5204
    .const 'Sub' $P5205 = 'cuid_170_1358115338.889' 
    capture_lex $P5205
    .const 'Sub' $P5206 = 'cuid_171_1358115338.889' 
    capture_lex $P5206
    .const 'Sub' $P5207 = 'cuid_172_1358115338.889' 
    capture_lex $P5207
    .const 'Sub' $P5208 = 'cuid_173_1358115338.889' 
    capture_lex $P5208
    .const 'Sub' $P5209 = 'cuid_174_1358115338.889' 
    capture_lex $P5209
    .const 'Sub' $P5210 = 'cuid_175_1358115338.889' 
    capture_lex $P5210
    .const 'Sub' $P5211 = 'cuid_176_1358115338.889' 
    capture_lex $P5211
    .const 'Sub' $P5212 = 'cuid_177_1358115338.889' 
    capture_lex $P5212
    .const 'Sub' $P5213 = 'cuid_178_1358115338.889' 
    capture_lex $P5213
    .const 'Sub' $P5214 = 'cuid_179_1358115338.889' 
    capture_lex $P5214
    .const 'Sub' $P5215 = 'cuid_180_1358115338.889' 
    capture_lex $P5215
    .const 'Sub' $P5216 = 'cuid_181_1358115338.889' 
    capture_lex $P5216
    .const 'Sub' $P5217 = 'cuid_182_1358115338.889' 
    capture_lex $P5217
    .const 'Sub' $P5218 = 'cuid_183_1358115338.889' 
    capture_lex $P5218
    .const 'Sub' $P5219 = 'cuid_184_1358115338.889' 
    capture_lex $P5219
    .const 'Sub' $P5220 = 'cuid_185_1358115338.889' 
    capture_lex $P5220
    .const 'Sub' $P5221 = 'cuid_186_1358115338.889' 
    capture_lex $P5221
    .const 'Sub' $P5222 = 'cuid_187_1358115338.889' 
    capture_lex $P5222
    .const 'Sub' $P5223 = 'cuid_188_1358115338.889' 
    capture_lex $P5223
    .const 'Sub' $P5224 = 'cuid_189_1358115338.889' 
    capture_lex $P5224
    .const 'Sub' $P5225 = 'cuid_190_1358115338.889' 
    capture_lex $P5225
    .const 'Sub' $P5226 = 'cuid_191_1358115338.889' 
    capture_lex $P5226
    .const 'Sub' $P5227 = 'cuid_192_1358115338.889' 
    capture_lex $P5227
    .const 'Sub' $P5228 = 'cuid_193_1358115338.889' 
    capture_lex $P5228
    .const 'Sub' $P5229 = 'cuid_194_1358115338.889' 
    capture_lex $P5229
    .const 'Sub' $P5230 = 'cuid_195_1358115338.889' 
    capture_lex $P5230
    .const 'Sub' $P5231 = 'cuid_196_1358115338.889' 
    capture_lex $P5231
    .const 'Sub' $P5232 = 'cuid_197_1358115338.889' 
    capture_lex $P5232
    .const 'Sub' $P5233 = 'cuid_198_1358115338.889' 
    capture_lex $P5233
    .const 'Sub' $P5234 = 'cuid_199_1358115338.889' 
    capture_lex $P5234
    .const 'Sub' $P5235 = 'cuid_200_1358115338.889' 
    capture_lex $P5235
    .const 'Sub' $P5236 = 'cuid_201_1358115338.889' 
    capture_lex $P5236
    .const 'Sub' $P5237 = 'cuid_202_1358115338.889' 
    capture_lex $P5237
    .const 'Sub' $P5238 = 'cuid_203_1358115338.889' 
    capture_lex $P5238
    .const 'Sub' $P5239 = 'cuid_204_1358115338.889' 
    capture_lex $P5239
    .const 'Sub' $P5240 = 'cuid_205_1358115338.889' 
    capture_lex $P5240
    .const 'Sub' $P5241 = 'cuid_206_1358115338.889' 
    capture_lex $P5241
    .const 'Sub' $P5242 = 'cuid_207_1358115338.889' 
    capture_lex $P5242
    .const 'Sub' $P5243 = 'cuid_208_1358115338.889' 
    capture_lex $P5243
    .const 'Sub' $P5244 = 'cuid_209_1358115338.889' 
    capture_lex $P5244
    .const 'Sub' $P5245 = 'cuid_210_1358115338.889' 
    capture_lex $P5245
    .const 'Sub' $P5246 = 'cuid_211_1358115338.889' 
    capture_lex $P5246
    .const 'Sub' $P5247 = 'cuid_212_1358115338.889' 
    capture_lex $P5247
    .const 'Sub' $P5248 = 'cuid_213_1358115338.889' 
    capture_lex $P5248
    .const 'Sub' $P5249 = 'cuid_214_1358115338.889' 
    capture_lex $P5249
    .const 'Sub' $P5250 = 'cuid_215_1358115338.889' 
    capture_lex $P5250
    .const 'Sub' $P5251 = 'cuid_216_1358115338.889' 
    capture_lex $P5251
    .const 'Sub' $P5252 = 'cuid_217_1358115338.889' 
    capture_lex $P5252
    .const 'Sub' $P5253 = 'cuid_218_1358115338.889' 
    capture_lex $P5253
    .const 'Sub' $P5254 = 'cuid_219_1358115338.889' 
    capture_lex $P5254
    .const 'Sub' $P5255 = 'cuid_220_1358115338.889' 
    capture_lex $P5255
    .const 'Sub' $P5256 = 'cuid_221_1358115338.889' 
    capture_lex $P5256
    .const 'Sub' $P5257 = 'cuid_222_1358115338.889' 
    capture_lex $P5257
    .const 'Sub' $P5258 = 'cuid_223_1358115338.889' 
    capture_lex $P5258
    .return ($P5258) 
.end
.HLL "nqp"
.namespace []
.sub "TOP" :subid("cuid_34_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 608
    .param pmc _lex_param_0 
    .lex "%*LANG", $P101 
    .lex "%*HOW", $P102 
    .lex "$file", $P103 
    .lex "$source_id", $P104 
    .lex "$*W", $P105 
    .lex "$*SCOPE", $P106 
    .lex "$*MULTINESS", $P107 
    .lex "$*PKGDECL", $P108 
    .lex "$*INVOCANT_OK", $P109 
    .lex "$*RETURN_USED", $P110 
    .lex "$*CONTROL_USED", $P111 
    .lex "%*HANDLERS", $P112 
    .lex "self", _lex_param_0 
    new $P5001, 'Hash'
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P104, $P5004
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P105, $P5005
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P106, $P5006
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P107, $P5007
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P108, $P5008
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P109, $P5009
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P110, $P5010
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P111, $P5011
    new $P5012, 'Hash'
    set $P112, $P5012
    unless_null $P101, fallback308
    nqp_get_sc_object $P5022, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["%LANG"]
    unless_null $P5020, fallback309
    nqp_get_sc_object $P5024, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5023, $P5024
    new $P5025, 'Hash'
    set $P5023["%LANG"], $P5025
    set $P5020, $P5025
  fallback309:
    unless_null $P5020, vivi_61310
    die "Contextual %*LANG not found"
    box $P5026, "Contextual %*LANG not found"
    set $P5020, $P5026
  vivi_61310:
    set $P101, $P5020
  fallback308:
    nqp_get_sc_object $P5030, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5029, $P5030, "NQP"
    get_who $P5028, $P5029
    set $P5027, $P5028["Regex"]
    unless_null $P5027, fallback311
    nqp_get_sc_object $P5031, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5027, $P5031
  fallback311:
    set $P101["Regex"], $P5027
    unless_null $P101, fallback312
    nqp_get_sc_object $P5034, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["%LANG"]
    unless_null $P5032, fallback313
    nqp_get_sc_object $P5036, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5035, $P5036
    new $P5037, 'Hash'
    set $P5035["%LANG"], $P5037
    set $P5032, $P5037
  fallback313:
    unless_null $P5032, vivi_62314
    die "Contextual %*LANG not found"
    box $P5038, "Contextual %*LANG not found"
    set $P5032, $P5038
  vivi_62314:
    set $P101, $P5032
  fallback312:
    nqp_get_sc_object $P5042, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5041, $P5042, "NQP"
    get_who $P5040, $P5041
    set $P5039, $P5040["RegexActions"]
    unless_null $P5039, fallback315
    nqp_get_sc_object $P5043, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5039, $P5043
  fallback315:
    set $P101["Regex-actions"], $P5039
    unless_null $P101, fallback316
    nqp_get_sc_object $P5046, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5045, $P5046
    set $P5044, $P5045["%LANG"]
    unless_null $P5044, fallback317
    nqp_get_sc_object $P5048, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5047, $P5048
    new $P5049, 'Hash'
    set $P5047["%LANG"], $P5049
    set $P5044, $P5049
  fallback317:
    unless_null $P5044, vivi_63318
    die "Contextual %*LANG not found"
    box $P5050, "Contextual %*LANG not found"
    set $P5044, $P5050
  vivi_63318:
    set $P101, $P5044
  fallback316:
    nqp_get_sc_object $P5054, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5053, $P5054, "NQP"
    get_who $P5052, $P5053
    set $P5051, $P5052["Grammar"]
    unless_null $P5051, fallback319
    nqp_get_sc_object $P5055, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5051, $P5055
  fallback319:
    set $P101["MAIN"], $P5051
    unless_null $P101, fallback320
    nqp_get_sc_object $P5058, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5057, $P5058
    set $P5056, $P5057["%LANG"]
    unless_null $P5056, fallback321
    nqp_get_sc_object $P5060, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5059, $P5060
    new $P5061, 'Hash'
    set $P5059["%LANG"], $P5061
    set $P5056, $P5061
  fallback321:
    unless_null $P5056, vivi_64322
    die "Contextual %*LANG not found"
    box $P5062, "Contextual %*LANG not found"
    set $P5056, $P5062
  vivi_64322:
    set $P101, $P5056
  fallback320:
    nqp_get_sc_object $P5066, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5065, $P5066, "NQP"
    get_who $P5064, $P5065
    set $P5063, $P5064["Actions"]
    unless_null $P5063, fallback323
    nqp_get_sc_object $P5067, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5063, $P5067
  fallback323:
    set $P101["MAIN-actions"], $P5063
    unless_null $P102, fallback327
    nqp_get_sc_object $P5077, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5076, $P5077
    set $P5075, $P5076["%HOW"]
    unless_null $P5075, fallback328
    nqp_get_sc_object $P5079, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5078, $P5079
    new $P5080, 'Hash'
    set $P5078["%HOW"], $P5080
    set $P5075, $P5080
  fallback328:
    unless_null $P5075, vivi_66329
    die "Contextual %*HOW not found"
    box $P5081, "Contextual %*HOW not found"
    set $P5075, $P5081
  vivi_66329:
    set $P102, $P5075
  fallback327:
    get_knowhow $P5082
    set $P102["knowhow"], $P5082
    unless_null $P102, fallback330
    nqp_get_sc_object $P5085, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5084, $P5085
    set $P5083, $P5084["%HOW"]
    unless_null $P5083, fallback331
    nqp_get_sc_object $P5087, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5086, $P5087
    new $P5088, 'Hash'
    set $P5086["%HOW"], $P5088
    set $P5083, $P5088
  fallback331:
    unless_null $P5083, vivi_67332
    die "Contextual %*HOW not found"
    box $P5089, "Contextual %*HOW not found"
    set $P5083, $P5089
  vivi_67332:
    set $P102, $P5083
  fallback330:
    get_knowhow_attribute $P5090
    set $P102["knowhow-attr"], $P5090
    find_caller_lex $P5091, "$?FILES"
    set $P103, $P5091
.annotate 'line', 627
    nqp_decontainerize $P5092, _lex_param_0
    $P5093 = $P5092."target"()
    set $S5004, $P5093
    nqp_sha1 $S5003, $S5004
    concat $S5002, $S5003, "-"
    time $N5001
    set $S5005, $N5001
    concat $S5001, $S5002, $S5005
    box $P5094, $S5001
    set $P104, $P5094
    isnull $I5001, $P103
    unless $I5001 goto if68_else333 
.annotate 'line', 630
    nqp_get_sc_object $P5098, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5097, $P5098, "NQP"
    get_who $P5096, $P5097
    set $P5095, $P5096["World"]
    unless_null $P5095, fallback335
    nqp_get_sc_object $P5099, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5095, $P5099
  fallback335:
    $P5100 = $P5095."new"($P104 :named("handle"))
    set $P5107, $P5100
    goto if68_end334
  if68_else333:
.annotate 'line', 631
    nqp_get_sc_object $P5104, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5103, $P5104, "NQP"
    get_who $P5102, $P5103
    set $P5101, $P5102["World"]
    unless_null $P5101, fallback336
    nqp_get_sc_object $P5105, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5101, $P5105
  fallback336:
    $P5106 = $P5101."new"($P104 :named("handle"), $P103 :named("description"))
    set $P5107, $P5106
  if68_end334:
    set $P105, $P5107
    box $P5108, ""
    set $P106, $P5108
    box $P5109, ""
    set $P107, $P5109
    box $P5110, ""
    set $P108, $P5110
    box $P5111, 0
    set $P109, $P5111
    box $P5112, 0
    set $P110, $P5112
    box $P5113, 0
    set $P111, $P5113
.annotate 'line', 640
    nqp_decontainerize $P5121, _lex_param_0
    $P5122 = $P5121."comp_unit"()
    .return ($P5122) 
.end
.HLL "nqp"
.namespace []
.sub "identifier" :subid("cuid_35_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 645
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx70_tgt
    .local int rx70_pos
    .local int rx70_off
    .local int rx70_eos
    .local int rx70_rep
    .local pmc rx70_cur
    .local pmc rx70_curclass
    .local pmc rx70_bstack
    .local pmc rx70_cstack
    (rx70_cur, rx70_tgt, rx70_pos, rx70_curclass, rx70_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx70_cur
    length rx70_eos, rx70_tgt
    eq $I19, 1, rx70_restart342
    gt rx70_pos, rx70_eos, rx70_fail343
    repr_get_attr_int $I11, self, rx70_curclass, "$!from"
    ne $I11, -1, rxscan71_done349
    goto rxscan71_scan348
  rxscan71_loop347:
    inc rx70_pos
    gt rx70_pos, rx70_eos, rx70_fail343
    repr_bind_attr_int rx70_cur, rx70_curclass, "$!from", rx70_pos
  rxscan71_scan348:
    nqp_rxmark rx70_bstack, rxscan71_loop347, rx70_pos, 0
  rxscan71_done349:
    repr_bind_attr_int rx70_cur, rx70_curclass, "$!pos", rx70_pos
    $P11 = rx70_cur."ident"()
    repr_get_attr_int $I11, $P11, rx70_curclass, "$!pos"
    lt $I11, 0, rx70_fail343
    repr_get_attr_int rx70_pos, $P11, rx70_curclass, "$!pos"
    nqp_rxmark rx70_bstack, rxquantr73_done352, rx70_pos, 0
  rxquantr73_loop351:
  alt74_0354:
    nqp_rxmark rx70_bstack, alt74_1355, rx70_pos, 0
    add $I11, rx70_pos, 1
    gt $I11, rx70_eos, rx70_fail343
    substr $S10, rx70_tgt, rx70_pos, 1
    ne $S10, ucs4:"-", rx70_fail343
    add rx70_pos, 1
    goto alt74_end353
  alt74_1355:
    ge rx70_pos, rx70_eos, rx70_fail343
    substr $S11, rx70_tgt, rx70_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx70_fail343
    inc rx70_pos
  alt74_end353:
    repr_bind_attr_int rx70_cur, rx70_curclass, "$!pos", rx70_pos
    $P11 = rx70_cur."ident"()
    repr_get_attr_int $I11, $P11, rx70_curclass, "$!pos"
    lt $I11, 0, rx70_fail343
    repr_get_attr_int rx70_pos, $P11, rx70_curclass, "$!pos"
    nqp_rxpeek $I19, rx70_bstack, rxquantr73_done352
    inc $I19
    inc $I19
    set rx70_rep, rx70_bstack[$I19]
    nqp_rxcommit rx70_bstack, rxquantr73_done352
    inc rx70_rep
    nqp_rxmark rx70_bstack, rxquantr73_done352, rx70_pos, rx70_rep
    goto rxquantr73_loop351
  rxquantr73_done352:
    rx70_cur."!cursor_pass"(rx70_pos, "identifier", 'backtrack'=>1)
    .return (rx70_cur)
  rx70_restart342:
    repr_get_attr_obj rx70_cstack, rx70_cur, rx70_curclass, "$!cstack"
  rx70_fail343:
    unless rx70_bstack, rx70_done341
    pop $I19, rx70_bstack
    if_null rx70_cstack, rx70_cstack_done346
    unless rx70_cstack, rx70_cstack_done346
    dec $I19
    set $P11, rx70_cstack[$I19]
  rx70_cstack_done346:
    pop rx70_rep, rx70_bstack
    pop rx70_pos, rx70_bstack
    pop $I19, rx70_bstack
    lt rx70_pos, -1, rx70_done341
    lt rx70_pos, 0, rx70_fail343
    eq $I19, 0, rx70_fail343
    nqp_islist $I20, rx70_cstack
    unless $I20, rx70_jump344
    elements $I18, rx70_bstack
    le $I18, 0, rx70_cut345
    dec $I18
    set $I18, rx70_bstack[$I18]
  rx70_cut345:
    assign rx70_cstack, $I18
  rx70_jump344:
    jump $I19
  rx70_done341:
    rx70_cur."!cursor_fail"()
    .return (rx70_cur) 
.end
.HLL "nqp"
.namespace []
.sub "name" :subid("cuid_36_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 647
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx76_tgt
    .local int rx76_pos
    .local int rx76_off
    .local int rx76_eos
    .local int rx76_rep
    .local pmc rx76_cur
    .local pmc rx76_curclass
    .local pmc rx76_bstack
    .local pmc rx76_cstack
    (rx76_cur, rx76_tgt, rx76_pos, rx76_curclass, rx76_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx76_cur
    length rx76_eos, rx76_tgt
    eq $I19, 1, rx76_restart359
    gt rx76_pos, rx76_eos, rx76_fail360
    repr_get_attr_int $I11, self, rx76_curclass, "$!from"
    ne $I11, -1, rxscan77_done366
    goto rxscan77_scan365
  rxscan77_loop364:
    inc rx76_pos
    gt rx76_pos, rx76_eos, rx76_fail360
    repr_bind_attr_int rx76_cur, rx76_curclass, "$!from", rx76_pos
  rxscan77_scan365:
    nqp_rxmark rx76_bstack, rxscan77_loop364, rx76_pos, 0
  rxscan77_done366:
    repr_bind_attr_int rx76_cur, rx76_curclass, "$!pos", rx76_pos
    $P11 = rx76_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx76_curclass, "$!pos"
    lt $I11, 0, rx76_fail360
    nqp_rxmark rx76_bstack, rxsubrule78_pass367, -1, 0
  rxsubrule78_pass367:
    rx76_cstack = rx76_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx76_pos, $P11, rx76_curclass, "$!pos"
    nqp_rxmark rx76_bstack, rxquantr79_done369, rx76_pos, 0
  rxquantr79_loop368:
    add $I11, rx76_pos, 2
    gt $I11, rx76_eos, rx76_fail360
    substr $S10, rx76_tgt, rx76_pos, 2
    ne $S10, ucs4:"::", rx76_fail360
    add rx76_pos, 2
    repr_bind_attr_int rx76_cur, rx76_curclass, "$!pos", rx76_pos
    $P11 = rx76_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx76_curclass, "$!pos"
    lt $I11, 0, rx76_fail360
    nqp_rxmark rx76_bstack, rxsubrule80_pass370, -1, 0
  rxsubrule80_pass370:
    rx76_cstack = rx76_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx76_pos, $P11, rx76_curclass, "$!pos"
    nqp_rxpeek $I19, rx76_bstack, rxquantr79_done369
    inc $I19
    inc $I19
    set rx76_rep, rx76_bstack[$I19]
    nqp_rxcommit rx76_bstack, rxquantr79_done369
    inc rx76_rep
    nqp_rxmark rx76_bstack, rxquantr79_done369, rx76_pos, rx76_rep
    goto rxquantr79_loop368
  rxquantr79_done369:
    rx76_cur."!cursor_pass"(rx76_pos, "name", 'backtrack'=>1)
    .return (rx76_cur)
  rx76_restart359:
    repr_get_attr_obj rx76_cstack, rx76_cur, rx76_curclass, "$!cstack"
  rx76_fail360:
    unless rx76_bstack, rx76_done358
    pop $I19, rx76_bstack
    if_null rx76_cstack, rx76_cstack_done363
    unless rx76_cstack, rx76_cstack_done363
    dec $I19
    set $P11, rx76_cstack[$I19]
  rx76_cstack_done363:
    pop rx76_rep, rx76_bstack
    pop rx76_pos, rx76_bstack
    pop $I19, rx76_bstack
    lt rx76_pos, -1, rx76_done358
    lt rx76_pos, 0, rx76_fail360
    eq $I19, 0, rx76_fail360
    nqp_islist $I20, rx76_cstack
    unless $I20, rx76_jump361
    elements $I18, rx76_bstack
    le $I18, 0, rx76_cut362
    dec $I18
    set $I18, rx76_bstack[$I18]
  rx76_cut362:
    assign rx76_cstack, $I18
  rx76_jump361:
    jump $I19
  rx76_done358:
    rx76_cur."!cursor_fail"()
    .return (rx76_cur) 
.end
.HLL "nqp"
.namespace []
.sub "deflongname" :subid("cuid_37_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 649
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx81_tgt
    .local int rx81_pos
    .local int rx81_off
    .local int rx81_eos
    .local int rx81_rep
    .local pmc rx81_cur
    .local pmc rx81_curclass
    .local pmc rx81_bstack
    .local pmc rx81_cstack
    (rx81_cur, rx81_tgt, rx81_pos, rx81_curclass, rx81_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx81_cur
    length rx81_eos, rx81_tgt
    eq $I19, 1, rx81_restart373
    gt rx81_pos, rx81_eos, rx81_fail374
    repr_get_attr_int $I11, self, rx81_curclass, "$!from"
    ne $I11, -1, rxscan82_done380
    goto rxscan82_scan379
  rxscan82_loop378:
    inc rx81_pos
    gt rx81_pos, rx81_eos, rx81_fail374
    repr_bind_attr_int rx81_cur, rx81_curclass, "$!from", rx81_pos
  rxscan82_scan379:
    nqp_rxmark rx81_bstack, rxscan82_loop378, rx81_pos, 0
  rxscan82_done380:
    repr_bind_attr_int rx81_cur, rx81_curclass, "$!pos", rx81_pos
    $P11 = rx81_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx81_curclass, "$!pos"
    lt $I11, 0, rx81_fail374
    nqp_rxmark rx81_bstack, rxsubrule83_pass381, -1, 0
  rxsubrule83_pass381:
    rx81_cstack = rx81_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx81_pos, $P11, rx81_curclass, "$!pos"
    nqp_rxmark rx81_bstack, rxquantr84_done383, rx81_pos, 0
  rxquantr84_loop382:
    repr_bind_attr_int rx81_cur, rx81_curclass, "$!pos", rx81_pos
    $P11 = rx81_cur."colonpair"()
    repr_get_attr_int $I11, $P11, rx81_curclass, "$!pos"
    lt $I11, 0, rx81_fail374
    goto rxsubrule85_pass384
  rxsubrule85_back385:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx81_curclass, "$!pos"
    lt $I11, 0, rx81_fail374
  rxsubrule85_pass384:
    rx81_cstack = rx81_cur."!cursor_capture"($P11, "colonpair")
    set_addr $I11, rxsubrule85_back385
    push rx81_bstack, $I11
    push rx81_bstack, 0
    push rx81_bstack, rx81_pos
    elements $I11, rx81_cstack
    push rx81_bstack, $I11
    repr_get_attr_int rx81_pos, $P11, rx81_curclass, "$!pos"
    nqp_rxpeek $I19, rx81_bstack, rxquantr84_done383
    inc $I19
    inc $I19
    set rx81_rep, rx81_bstack[$I19]
    nqp_rxcommit rx81_bstack, rxquantr84_done383
    inc rx81_rep
  rxquantr84_done383:
    rx81_cur."!cursor_pass"(rx81_pos, "deflongname", 'backtrack'=>1)
    .return (rx81_cur)
  rx81_restart373:
    repr_get_attr_obj rx81_cstack, rx81_cur, rx81_curclass, "$!cstack"
  rx81_fail374:
    unless rx81_bstack, rx81_done372
    pop $I19, rx81_bstack
    if_null rx81_cstack, rx81_cstack_done377
    unless rx81_cstack, rx81_cstack_done377
    dec $I19
    set $P11, rx81_cstack[$I19]
  rx81_cstack_done377:
    pop rx81_rep, rx81_bstack
    pop rx81_pos, rx81_bstack
    pop $I19, rx81_bstack
    lt rx81_pos, -1, rx81_done372
    lt rx81_pos, 0, rx81_fail374
    eq $I19, 0, rx81_fail374
    nqp_islist $I20, rx81_cstack
    unless $I20, rx81_jump375
    elements $I18, rx81_bstack
    le $I18, 0, rx81_cut376
    dec $I18
    set $I18, rx81_bstack[$I18]
  rx81_cut376:
    assign rx81_cstack, $I18
  rx81_jump375:
    jump $I19
  rx81_done372:
    rx81_cur."!cursor_fail"()
    .return (rx81_cur) 
.end
.HLL "nqp"
.namespace []
.sub "ENDSTMT" :subid("cuid_38_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 653
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx86_tgt
    .local int rx86_pos
    .local int rx86_off
    .local int rx86_eos
    .local int rx86_rep
    .local pmc rx86_cur
    .local pmc rx86_curclass
    .local pmc rx86_bstack
    .local pmc rx86_cstack
    (rx86_cur, rx86_tgt, rx86_pos, rx86_curclass, rx86_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx86_cur
    length rx86_eos, rx86_tgt
    eq $I19, 1, rx86_restart388
    gt rx86_pos, rx86_eos, rx86_fail389
    repr_get_attr_int $I11, self, rx86_curclass, "$!from"
    ne $I11, -1, rxscan87_done395
    goto rxscan87_scan394
  rxscan87_loop393:
    inc rx86_pos
    gt rx86_pos, rx86_eos, rx86_fail389
    repr_bind_attr_int rx86_cur, rx86_curclass, "$!from", rx86_pos
  rxscan87_scan394:
    nqp_rxmark rx86_bstack, rxscan87_loop393, rx86_pos, 0
  rxscan87_done395:
    nqp_rxmark rx86_bstack, rxquantr88_done397, rx86_pos, 0
  rxquantr88_loop396:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt89_0399
    nqp_push_label $P11, alt89_1404
    nqp_rxmark rx86_bstack, alt89_end398, -1, 0
    rx86_cur."!alt"(rx86_pos, "alt_nfa__1_1358115340.039", $P11)
    goto rx86_fail389
  alt89_0399:
    nqp_rxmark rx86_bstack, rxquantr90_done401, rx86_pos, 0
  rxquantr90_loop400:
    ge rx86_pos, rx86_eos, rx86_fail389
    substr $S11, rx86_tgt, rx86_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx86_fail389
    inc rx86_pos
    nqp_rxpeek $I19, rx86_bstack, rxquantr90_done401
    inc $I19
    inc $I19
    set rx86_rep, rx86_bstack[$I19]
    nqp_rxcommit rx86_bstack, rxquantr90_done401
    inc rx86_rep
    nqp_rxmark rx86_bstack, rxquantr90_done401, rx86_pos, rx86_rep
    goto rxquantr90_loop400
  rxquantr90_done401:
    is_cclass $I11, .CCLASS_NEWLINE, rx86_tgt, rx86_pos
    if $I11, rxanchor91_done402
    ne rx86_pos, rx86_eos, rx86_fail389
    eq rx86_pos, 0, rxanchor91_done402
    sub $I11, rx86_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx86_tgt, $I11
    if $I11, rx86_fail389
  rxanchor91_done402:
    repr_bind_attr_int rx86_cur, rx86_curclass, "$!pos", rx86_pos
    $P11 = rx86_cur."ws"()
    repr_get_attr_int $I11, $P11, rx86_curclass, "$!pos"
    lt $I11, 0, rx86_fail389
    repr_get_attr_int rx86_pos, $P11, rx86_curclass, "$!pos"
    repr_bind_attr_int rx86_cur, rx86_curclass, "$!pos", rx86_pos
    $P11 = rx86_cur."MARKER"("endstmt")
    repr_get_attr_int $I11, $P11, rx86_curclass, "$!pos"
    lt $I11, 0, rx86_fail389
    goto alt89_end398
  alt89_1404:
    nqp_rxmark rx86_bstack, rxquantr93_done406, rx86_pos, 0
  rxquantr93_loop405:
    repr_bind_attr_int rx86_cur, rx86_curclass, "$!pos", rx86_pos
    $P11 = rx86_cur."unv"()
    repr_get_attr_int $I11, $P11, rx86_curclass, "$!pos"
    lt $I11, 0, rx86_fail389
    goto rxsubrule94_pass407
  rxsubrule94_back408:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx86_curclass, "$!pos"
    lt $I11, 0, rx86_fail389
  rxsubrule94_pass407:
    rx86_cstack = rx86_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule94_back408
    push rx86_bstack, $I11
    push rx86_bstack, 0
    push rx86_bstack, rx86_pos
    elements $I11, rx86_cstack
    push rx86_bstack, $I11
    repr_get_attr_int rx86_pos, $P11, rx86_curclass, "$!pos"
    nqp_rxpeek $I19, rx86_bstack, rxquantr93_done406
    inc $I19
    inc $I19
    set rx86_rep, rx86_bstack[$I19]
    nqp_rxcommit rx86_bstack, rxquantr93_done406
    inc rx86_rep
  rxquantr93_done406:
    is_cclass $I11, .CCLASS_NEWLINE, rx86_tgt, rx86_pos
    if $I11, rxanchor95_done409
    ne rx86_pos, rx86_eos, rx86_fail389
    eq rx86_pos, 0, rxanchor95_done409
    sub $I11, rx86_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx86_tgt, $I11
    if $I11, rx86_fail389
  rxanchor95_done409:
    repr_bind_attr_int rx86_cur, rx86_curclass, "$!pos", rx86_pos
    $P11 = rx86_cur."ws"()
    repr_get_attr_int $I11, $P11, rx86_curclass, "$!pos"
    lt $I11, 0, rx86_fail389
    repr_get_attr_int rx86_pos, $P11, rx86_curclass, "$!pos"
    repr_bind_attr_int rx86_cur, rx86_curclass, "$!pos", rx86_pos
    $P11 = rx86_cur."MARKER"("endstmt")
    repr_get_attr_int $I11, $P11, rx86_curclass, "$!pos"
    lt $I11, 0, rx86_fail389
    goto alt89_end398
  alt89_end398:
    nqp_rxpeek $I19, rx86_bstack, rxquantr88_done397
    inc $I19
    inc $I19
    set rx86_rep, rx86_bstack[$I19]
    nqp_rxcommit rx86_bstack, rxquantr88_done397
    inc rx86_rep
  rxquantr88_done397:
    rx86_cur."!cursor_pass"(rx86_pos, "ENDSTMT", 'backtrack'=>1)
    .return (rx86_cur)
  rx86_restart388:
    repr_get_attr_obj rx86_cstack, rx86_cur, rx86_curclass, "$!cstack"
  rx86_fail389:
    unless rx86_bstack, rx86_done387
    pop $I19, rx86_bstack
    if_null rx86_cstack, rx86_cstack_done392
    unless rx86_cstack, rx86_cstack_done392
    dec $I19
    set $P11, rx86_cstack[$I19]
  rx86_cstack_done392:
    pop rx86_rep, rx86_bstack
    pop rx86_pos, rx86_bstack
    pop $I19, rx86_bstack
    lt rx86_pos, -1, rx86_done387
    lt rx86_pos, 0, rx86_fail389
    eq $I19, 0, rx86_fail389
    nqp_islist $I20, rx86_cstack
    unless $I20, rx86_jump390
    elements $I18, rx86_bstack
    le $I18, 0, rx86_cut391
    dec $I18
    set $I18, rx86_bstack[$I18]
  rx86_cut391:
    assign rx86_cstack, $I18
  rx86_jump390:
    jump $I19
  rx86_done387:
    rx86_cur."!cursor_fail"()
    .return (rx86_cur) 
.end
.HLL "nqp"
.namespace []
.sub "ws" :subid("cuid_39_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 660
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx97_tgt
    .local int rx97_pos
    .local int rx97_off
    .local int rx97_eos
    .local int rx97_rep
    .local pmc rx97_cur
    .local pmc rx97_curclass
    .local pmc rx97_bstack
    .local pmc rx97_cstack
    (rx97_cur, rx97_tgt, rx97_pos, rx97_curclass, rx97_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx97_cur
    length rx97_eos, rx97_tgt
    eq $I19, 1, rx97_restart413
    gt rx97_pos, rx97_eos, rx97_fail414
    repr_get_attr_int $I11, self, rx97_curclass, "$!from"
    ne $I11, -1, rxscan98_done420
    goto rxscan98_scan419
  rxscan98_loop418:
    inc rx97_pos
    gt rx97_pos, rx97_eos, rx97_fail414
    repr_bind_attr_int rx97_cur, rx97_curclass, "$!from", rx97_pos
  rxscan98_scan419:
    nqp_rxmark rx97_bstack, rxscan98_loop418, rx97_pos, 0
  rxscan98_done420:
  alt99_0422:
    nqp_rxmark rx97_bstack, alt99_1423, rx97_pos, 0
    repr_bind_attr_int rx97_cur, rx97_curclass, "$!pos", rx97_pos
    $P11 = rx97_cur."MARKED"("ws")
    repr_get_attr_int $I11, $P11, rx97_curclass, "$!pos"
    lt $I11, 0, rx97_fail414
    goto alt99_end421
  alt99_1423:
    repr_bind_attr_int rx97_cur, rx97_curclass, "$!pos", rx97_pos
    $P11 = rx97_cur."ww"()
    repr_get_attr_int $I11, $P11, rx97_curclass, "$!pos"
    ge $I11, 0, rx97_fail414
    nqp_rxmark rx97_bstack, rxquantr100_done425, rx97_pos, 0
  rxquantr100_loop424:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt101_0427
    nqp_push_label $P11, alt101_1430
    nqp_push_label $P11, alt101_2433
    nqp_push_label $P11, alt101_3436
    nqp_rxmark rx97_bstack, alt101_end426, -1, 0
    rx97_cur."!alt"(rx97_pos, "alt_nfa__2_1358115340.055", $P11)
    goto rx97_fail414
  alt101_0427:
    nqp_rxmark rx97_bstack, rxquantr102_done429, -1, 0
  rxquantr102_loop428:
    ge rx97_pos, rx97_eos, rx97_fail414
    substr $S11, rx97_tgt, rx97_pos, 1
    index $I11, ucs4:"\n\x{b}\f\r\x{85}\u2028\u2029", $S11
    lt $I11, 0, rx97_fail414
    inc rx97_pos
    nqp_rxpeek $I19, rx97_bstack, rxquantr102_done429
    inc $I19
    inc $I19
    set rx97_rep, rx97_bstack[$I19]
    nqp_rxcommit rx97_bstack, rxquantr102_done429
    inc rx97_rep
    nqp_rxmark rx97_bstack, rxquantr102_done429, rx97_pos, rx97_rep
    goto rxquantr102_loop428
  rxquantr102_done429:
    goto alt101_end426
  alt101_1430:
    add $I11, rx97_pos, 1
    gt $I11, rx97_eos, rx97_fail414
    substr $S10, rx97_tgt, rx97_pos, 1
    ne $S10, ucs4:"#", rx97_fail414
    add rx97_pos, 1
    nqp_rxmark rx97_bstack, rxquantr103_done432, rx97_pos, 0
  rxquantr103_loop431:
    ge rx97_pos, rx97_eos, rx97_fail414
    is_cclass $I11, .CCLASS_NEWLINE, rx97_tgt, rx97_pos
    if $I11, rx97_fail414
    add rx97_pos, 1
    nqp_rxpeek $I19, rx97_bstack, rxquantr103_done432
    inc $I19
    inc $I19
    set rx97_rep, rx97_bstack[$I19]
    nqp_rxcommit rx97_bstack, rxquantr103_done432
    inc rx97_rep
    nqp_rxmark rx97_bstack, rxquantr103_done432, rx97_pos, rx97_rep
    goto rxquantr103_loop431
  rxquantr103_done432:
    goto alt101_end426
  alt101_2433:
    eq rx97_pos, 0, rxanchor104_done434
    ge rx97_pos, rx97_eos, rx97_fail414
    sub $I11, rx97_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx97_tgt, $I11
    unless $I11, rx97_fail414
  rxanchor104_done434:
    repr_bind_attr_int rx97_cur, rx97_curclass, "$!pos", rx97_pos
    $P11 = rx97_cur."pod_comment"()
    repr_get_attr_int $I11, $P11, rx97_curclass, "$!pos"
    lt $I11, 0, rx97_fail414
    repr_get_attr_int rx97_pos, $P11, rx97_curclass, "$!pos"
    goto alt101_end426
  alt101_3436:
    nqp_rxmark rx97_bstack, rxquantr106_done438, -1, 0
  rxquantr106_loop437:
    ge rx97_pos, rx97_eos, rx97_fail414
    substr $S11, rx97_tgt, rx97_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx97_fail414
    inc rx97_pos
    nqp_rxpeek $I19, rx97_bstack, rxquantr106_done438
    inc $I19
    inc $I19
    set rx97_rep, rx97_bstack[$I19]
    nqp_rxcommit rx97_bstack, rxquantr106_done438
    inc rx97_rep
    nqp_rxmark rx97_bstack, rxquantr106_done438, rx97_pos, rx97_rep
    goto rxquantr106_loop437
  rxquantr106_done438:
    goto alt101_end426
  alt101_end426:
    nqp_rxpeek $I19, rx97_bstack, rxquantr100_done425
    inc $I19
    inc $I19
    set rx97_rep, rx97_bstack[$I19]
    nqp_rxcommit rx97_bstack, rxquantr100_done425
    inc rx97_rep
    nqp_rxmark rx97_bstack, rxquantr100_done425, rx97_pos, rx97_rep
    goto rxquantr100_loop424
  rxquantr100_done425:
    repr_bind_attr_int rx97_cur, rx97_curclass, "$!pos", rx97_pos
    $P11 = rx97_cur."MARKER"("ws")
    repr_get_attr_int $I11, $P11, rx97_curclass, "$!pos"
    lt $I11, 0, rx97_fail414
  alt99_end421:
    rx97_cur."!cursor_pass"(rx97_pos, "ws", 'backtrack'=>1)
    .return (rx97_cur)
  rx97_restart413:
    repr_get_attr_obj rx97_cstack, rx97_cur, rx97_curclass, "$!cstack"
  rx97_fail414:
    unless rx97_bstack, rx97_done412
    pop $I19, rx97_bstack
    if_null rx97_cstack, rx97_cstack_done417
    unless rx97_cstack, rx97_cstack_done417
    dec $I19
    set $P11, rx97_cstack[$I19]
  rx97_cstack_done417:
    pop rx97_rep, rx97_bstack
    pop rx97_pos, rx97_bstack
    pop $I19, rx97_bstack
    lt rx97_pos, -1, rx97_done412
    lt rx97_pos, 0, rx97_fail414
    eq $I19, 0, rx97_fail414
    nqp_islist $I20, rx97_cstack
    unless $I20, rx97_jump415
    elements $I18, rx97_bstack
    le $I18, 0, rx97_cut416
    dec $I18
    set $I18, rx97_bstack[$I18]
  rx97_cut416:
    assign rx97_cstack, $I18
  rx97_jump415:
    jump $I19
  rx97_done412:
    rx97_cur."!cursor_fail"()
    .return (rx97_cur) 
.end
.HLL "nqp"
.namespace []
.sub "unv" :subid("cuid_40_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 671
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_41_1358115338.889' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx107_tgt
    .local int rx107_pos
    .local int rx107_off
    .local int rx107_eos
    .local int rx107_rep
    .local pmc rx107_cur
    .local pmc rx107_curclass
    .local pmc rx107_bstack
    .local pmc rx107_cstack
    (rx107_cur, rx107_tgt, rx107_pos, rx107_curclass, rx107_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx107_cur
    length rx107_eos, rx107_tgt
    eq $I19, 1, rx107_restart441
    gt rx107_pos, rx107_eos, rx107_fail442
    repr_get_attr_int $I11, self, rx107_curclass, "$!from"
    ne $I11, -1, rxscan108_done448
    goto rxscan108_scan447
  rxscan108_loop446:
    inc rx107_pos
    gt rx107_pos, rx107_eos, rx107_fail442
    repr_bind_attr_int rx107_cur, rx107_curclass, "$!from", rx107_pos
  rxscan108_scan447:
    nqp_rxmark rx107_bstack, rxscan108_loop446, rx107_pos, 0
  rxscan108_done448:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt109_0450
    nqp_push_label $P11, alt109_1468
    nqp_push_label $P11, alt109_2473
    nqp_rxmark rx107_bstack, alt109_end449, -1, 0
    rx107_cur."!alt"(rx107_pos, "alt_nfa__4_1358115340.072", $P11)
    goto rx107_fail442
  alt109_0450:
    eq rx107_pos, 0, rxanchor110_done451
    ge rx107_pos, rx107_eos, rx107_fail442
    sub $I11, rx107_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx107_tgt, $I11
    unless $I11, rx107_fail442
  rxanchor110_done451:
    .const 'Sub' $P5001 = 'cuid_41_1358115338.889' 
    capture_lex $P5001
    repr_bind_attr_int rx107_cur, rx107_curclass, "$!pos", rx107_pos
    $P11 = rx107_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx107_curclass, "$!pos"
    lt $I11, 0, rx107_fail442
    repr_bind_attr_int rx107_cur, rx107_curclass, "$!pos", rx107_pos
    $P11 = rx107_cur."pod_comment"()
    repr_get_attr_int $I11, $P11, rx107_curclass, "$!pos"
    lt $I11, 0, rx107_fail442
    repr_get_attr_int rx107_pos, $P11, rx107_curclass, "$!pos"
    goto alt109_end449
  alt109_1468:
    nqp_rxmark rx107_bstack, rxquantr116_done470, rx107_pos, 0
  rxquantr116_loop469:
    ge rx107_pos, rx107_eos, rx107_fail442
    substr $S11, rx107_tgt, rx107_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx107_fail442
    inc rx107_pos
    nqp_rxpeek $I19, rx107_bstack, rxquantr116_done470
    inc $I19
    inc $I19
    set rx107_rep, rx107_bstack[$I19]
    nqp_rxcommit rx107_bstack, rxquantr116_done470
    inc rx107_rep
    nqp_rxmark rx107_bstack, rxquantr116_done470, rx107_pos, rx107_rep
    goto rxquantr116_loop469
  rxquantr116_done470:
    add $I11, rx107_pos, 1
    gt $I11, rx107_eos, rx107_fail442
    substr $S10, rx107_tgt, rx107_pos, 1
    ne $S10, ucs4:"#", rx107_fail442
    add rx107_pos, 1
    nqp_rxmark rx107_bstack, rxquantr117_done472, rx107_pos, 0
  rxquantr117_loop471:
    ge rx107_pos, rx107_eos, rx107_fail442
    is_cclass $I11, .CCLASS_NEWLINE, rx107_tgt, rx107_pos
    if $I11, rx107_fail442
    add rx107_pos, 1
    nqp_rxpeek $I19, rx107_bstack, rxquantr117_done472
    inc $I19
    inc $I19
    set rx107_rep, rx107_bstack[$I19]
    nqp_rxcommit rx107_bstack, rxquantr117_done472
    inc rx107_rep
    nqp_rxmark rx107_bstack, rxquantr117_done472, rx107_pos, rx107_rep
    goto rxquantr117_loop471
  rxquantr117_done472:
    goto alt109_end449
  alt109_2473:
    nqp_rxmark rx107_bstack, rxquantr118_done475, -1, 0
  rxquantr118_loop474:
    ge rx107_pos, rx107_eos, rx107_fail442
    substr $S11, rx107_tgt, rx107_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx107_fail442
    inc rx107_pos
    nqp_rxpeek $I19, rx107_bstack, rxquantr118_done475
    inc $I19
    inc $I19
    set rx107_rep, rx107_bstack[$I19]
    nqp_rxcommit rx107_bstack, rxquantr118_done475
    inc rx107_rep
    nqp_rxmark rx107_bstack, rxquantr118_done475, rx107_pos, rx107_rep
    goto rxquantr118_loop474
  rxquantr118_done475:
    goto alt109_end449
  alt109_end449:
    nqp_rxcommit rx107_bstack, alt109_end449
    rx107_cur."!cursor_pass"(rx107_pos, "unv", 'backtrack'=>1)
    .return (rx107_cur)
  rx107_restart441:
    repr_get_attr_obj rx107_cstack, rx107_cur, rx107_curclass, "$!cstack"
  rx107_fail442:
    unless rx107_bstack, rx107_done440
    pop $I19, rx107_bstack
    if_null rx107_cstack, rx107_cstack_done445
    unless rx107_cstack, rx107_cstack_done445
    dec $I19
    set $P11, rx107_cstack[$I19]
  rx107_cstack_done445:
    pop rx107_rep, rx107_bstack
    pop rx107_pos, rx107_bstack
    pop $I19, rx107_bstack
    lt rx107_pos, -1, rx107_done440
    lt rx107_pos, 0, rx107_fail442
    eq $I19, 0, rx107_fail442
    nqp_islist $I20, rx107_cstack
    unless $I20, rx107_jump443
    elements $I18, rx107_bstack
    le $I18, 0, rx107_cut444
    dec $I18
    set $I18, rx107_bstack[$I18]
  rx107_cut444:
    assign rx107_cstack, $I18
  rx107_jump443:
    jump $I19
  rx107_done440:
    rx107_cur."!cursor_fail"()
    .return (rx107_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_41_1358115338.889") :anon :lex :outer("cuid_40_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx111_tgt
    .local int rx111_pos
    .local int rx111_off
    .local int rx111_eos
    .local int rx111_rep
    .local pmc rx111_cur
    .local pmc rx111_curclass
    .local pmc rx111_bstack
    .local pmc rx111_cstack
    (rx111_cur, rx111_tgt, rx111_pos, rx111_curclass, rx111_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx111_cur
    length rx111_eos, rx111_tgt
    eq $I19, 1, rx111_restart454
    gt rx111_pos, rx111_eos, rx111_fail455
    repr_get_attr_int $I11, self, rx111_curclass, "$!from"
    ne $I11, -1, rxscan112_done461
    goto rxscan112_scan460
  rxscan112_loop459:
    inc rx111_pos
    gt rx111_pos, rx111_eos, rx111_fail455
    repr_bind_attr_int rx111_cur, rx111_curclass, "$!from", rx111_pos
  rxscan112_scan460:
    nqp_rxmark rx111_bstack, rxscan112_loop459, rx111_pos, 0
  rxscan112_done461:
    nqp_rxmark rx111_bstack, rxquantr113_done463, rx111_pos, 0
  rxquantr113_loop462:
    ge rx111_pos, rx111_eos, rx111_fail455
    substr $S11, rx111_tgt, rx111_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx111_fail455
    inc rx111_pos
    nqp_rxpeek $I19, rx111_bstack, rxquantr113_done463
    inc $I19
    inc $I19
    set rx111_rep, rx111_bstack[$I19]
    nqp_rxcommit rx111_bstack, rxquantr113_done463
    inc rx111_rep
    nqp_rxmark rx111_bstack, rxquantr113_done463, rx111_pos, rx111_rep
    goto rxquantr113_loop462
  rxquantr113_done463:
    add $I11, rx111_pos, 1
    gt $I11, rx111_eos, rx111_fail455
    substr $S10, rx111_tgt, rx111_pos, 1
    ne $S10, ucs4:"=", rx111_fail455
    add rx111_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt114_0465
    nqp_push_label $P11, alt114_1466
    nqp_rxmark rx111_bstack, alt114_end464, -1, 0
    rx111_cur."!alt"(rx111_pos, "alt_nfa__3_1358115340.064", $P11)
    goto rx111_fail455
  alt114_0465:
    ge rx111_pos, rx111_eos, rx111_fail455
    is_cclass $I11, .CCLASS_WORD, rx111_tgt, rx111_pos
    unless $I11, rx111_fail455
    add rx111_pos, 1
    goto alt114_end464
  alt114_1466:
    add $I11, rx111_pos, 1
    gt $I11, rx111_eos, rx111_fail455
    substr $S10, rx111_tgt, rx111_pos, 1
    ne $S10, ucs4:"\\", rx111_fail455
    add rx111_pos, 1
    goto alt114_end464
  alt114_end464:
    nqp_rxcommit rx111_bstack, alt114_end464
    rx111_cur."!cursor_pass"(rx111_pos, 'backtrack'=>1)
    .return (rx111_cur)
  rx111_restart454:
    repr_get_attr_obj rx111_cstack, rx111_cur, rx111_curclass, "$!cstack"
  rx111_fail455:
    unless rx111_bstack, rx111_done453
    pop $I19, rx111_bstack
    if_null rx111_cstack, rx111_cstack_done458
    unless rx111_cstack, rx111_cstack_done458
    dec $I19
    set $P11, rx111_cstack[$I19]
  rx111_cstack_done458:
    pop rx111_rep, rx111_bstack
    pop rx111_pos, rx111_bstack
    pop $I19, rx111_bstack
    lt rx111_pos, -1, rx111_done453
    lt rx111_pos, 0, rx111_fail455
    eq $I19, 0, rx111_fail455
    nqp_islist $I20, rx111_cstack
    unless $I20, rx111_jump456
    elements $I18, rx111_bstack
    le $I18, 0, rx111_cut457
    dec $I18
    set $I18, rx111_bstack[$I18]
  rx111_cut457:
    assign rx111_cstack, $I18
  rx111_jump456:
    jump $I19
  rx111_done453:
    rx111_cur."!cursor_fail"()
    .return (rx111_cur) 
.end
.HLL "nqp"
.namespace []
.sub "pod_comment" :subid("cuid_42_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 680
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_43_1358115338.889' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx119_tgt
    .local int rx119_pos
    .local int rx119_off
    .local int rx119_eos
    .local int rx119_rep
    .local pmc rx119_cur
    .local pmc rx119_curclass
    .local pmc rx119_bstack
    .local pmc rx119_cstack
    (rx119_cur, rx119_tgt, rx119_pos, rx119_curclass, rx119_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx119_cur
    length rx119_eos, rx119_tgt
    eq $I19, 1, rx119_restart478
    gt rx119_pos, rx119_eos, rx119_fail479
    repr_get_attr_int $I11, self, rx119_curclass, "$!from"
    ne $I11, -1, rxscan120_done485
    goto rxscan120_scan484
  rxscan120_loop483:
    inc rx119_pos
    gt rx119_pos, rx119_eos, rx119_fail479
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!from", rx119_pos
  rxscan120_scan484:
    nqp_rxmark rx119_bstack, rxscan120_loop483, rx119_pos, 0
  rxscan120_done485:
    eq rx119_pos, 0, rxanchor121_done486
    ge rx119_pos, rx119_eos, rx119_fail479
    sub $I11, rx119_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, $I11
    unless $I11, rx119_fail479
  rxanchor121_done486:
    nqp_rxmark rx119_bstack, rxquantr122_done488, rx119_pos, 0
  rxquantr122_loop487:
    ge rx119_pos, rx119_eos, rx119_fail479
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail479
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr122_done488
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr122_done488
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr122_done488, rx119_pos, rx119_rep
    goto rxquantr122_loop487
  rxquantr122_done488:
    add $I11, rx119_pos, 1
    gt $I11, rx119_eos, rx119_fail479
    substr $S10, rx119_tgt, rx119_pos, 1
    ne $S10, ucs4:"=", rx119_fail479
    add rx119_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt123_0490
    nqp_push_label $P11, alt123_1509
    nqp_push_label $P11, alt123_2528
    nqp_push_label $P11, alt123_3550
    nqp_push_label $P11, alt123_4575
    nqp_rxmark rx119_bstack, alt123_end489, -1, 0
    rx119_cur."!alt"(rx119_pos, "alt_nfa__6_1358115340.152", $P11)
    goto rx119_fail479
  alt123_0490:
    add $I11, rx119_pos, 5
    gt $I11, rx119_eos, rx119_fail479
    substr $S10, rx119_tgt, rx119_pos, 5
    ne $S10, ucs4:"begin", rx119_fail479
    add rx119_pos, 5
    nqp_rxmark rx119_bstack, rxquantr124_done492, -1, 0
  rxquantr124_loop491:
    ge rx119_pos, rx119_eos, rx119_fail479
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail479
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr124_done492
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr124_done492
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr124_done492, rx119_pos, rx119_rep
    goto rxquantr124_loop491
  rxquantr124_done492:
    add $I11, rx119_pos, 3
    gt $I11, rx119_eos, rx119_fail479
    substr $S10, rx119_tgt, rx119_pos, 3
    ne $S10, ucs4:"END", rx119_fail479
    add rx119_pos, 3
    le rx119_pos, 0, rx119_fail479
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, rx119_pos
    if $I11, rx119_fail479
    sub $I11, rx119_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, $I11
    unless $I11, rx119_fail479
  alt126_0495:
    nqp_rxmark rx119_bstack, alt126_1506, rx119_pos, 0
    set rx119_rep, 0
    nqp_rxmark rx119_bstack, rxquantf127_loop496, rx119_pos, rx119_rep
    goto rxquantf127_done497
  rxquantf127_loop496:
    set $I12, rx119_rep
    ge rx119_pos, rx119_eos, rx119_fail479
    add rx119_pos, 1
    set rx119_rep, $I12
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantf127_loop496, rx119_pos, rx119_rep
  rxquantf127_done497:
    ge rx119_pos, rx119_eos, rx119_fail479
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, rx119_pos
    unless $I11, rx119_fail479
    substr $S10, rx119_tgt, rx119_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx119_pos, $I11
    add rx119_pos, 1
    nqp_rxmark rx119_bstack, rxquantr128_done500, rx119_pos, 0
  rxquantr128_loop499:
    ge rx119_pos, rx119_eos, rx119_fail479
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail479
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr128_done500
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr128_done500
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr128_done500, rx119_pos, rx119_rep
    goto rxquantr128_loop499
  rxquantr128_done500:
    add $I11, rx119_pos, 4
    gt $I11, rx119_eos, rx119_fail479
    substr $S10, rx119_tgt, rx119_pos, 4
    ne $S10, ucs4:"=end", rx119_fail479
    add rx119_pos, 4
    nqp_rxmark rx119_bstack, rxquantr129_done502, -1, 0
  rxquantr129_loop501:
    ge rx119_pos, rx119_eos, rx119_fail479
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail479
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr129_done502
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr129_done502
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr129_done502, rx119_pos, rx119_rep
    goto rxquantr129_loop501
  rxquantr129_done502:
    add $I11, rx119_pos, 3
    gt $I11, rx119_eos, rx119_fail479
    substr $S10, rx119_tgt, rx119_pos, 3
    ne $S10, ucs4:"END", rx119_fail479
    add rx119_pos, 3
    le rx119_pos, 0, rx119_fail479
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, rx119_pos
    if $I11, rx119_fail479
    sub $I11, rx119_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, $I11
    unless $I11, rx119_fail479
    nqp_rxmark rx119_bstack, rxquantr131_done505, rx119_pos, 0
  rxquantr131_loop504:
    ge rx119_pos, rx119_eos, rx119_fail479
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, rx119_pos
    if $I11, rx119_fail479
    add rx119_pos, 1
    nqp_rxpeek $I19, rx119_bstack, rxquantr131_done505
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr131_done505
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr131_done505, rx119_pos, rx119_rep
    goto rxquantr131_loop504
  rxquantr131_done505:
    goto alt126_end494
  alt126_1506:
    nqp_rxmark rx119_bstack, rxquantr132_done508, rx119_pos, 0
  rxquantr132_loop507:
    ge rx119_pos, rx119_eos, rx119_fail479
    add rx119_pos, 1
    nqp_rxpeek $I19, rx119_bstack, rxquantr132_done508
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr132_done508
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr132_done508, rx119_pos, rx119_rep
    goto rxquantr132_loop507
  rxquantr132_done508:
  alt126_end494:
    goto alt123_end489
  alt123_1509:
    add $I11, rx119_pos, 5
    gt $I11, rx119_eos, rx119_fail479
    substr $S10, rx119_tgt, rx119_pos, 5
    ne $S10, ucs4:"begin", rx119_fail479
    add rx119_pos, 5
    nqp_rxmark rx119_bstack, rxquantr133_done511, -1, 0
  rxquantr133_loop510:
    ge rx119_pos, rx119_eos, rx119_fail479
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail479
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr133_done511
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr133_done511
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr133_done511, rx119_pos, rx119_rep
    goto rxquantr133_loop510
  rxquantr133_done511:
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail479
    nqp_rxmark rx119_bstack, rxsubrule134_pass512, -1, 0
  rxsubrule134_pass512:
    rx119_cstack = rx119_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx119_pos, $P11, rx119_curclass, "$!pos"
  alt135_0514:
    nqp_rxmark rx119_bstack, alt135_1526, rx119_pos, 0
    set rx119_rep, 0
    nqp_rxmark rx119_bstack, rxquantf136_loop515, rx119_pos, rx119_rep
    goto rxquantf136_done516
  rxquantf136_loop515:
    set $I12, rx119_rep
    ge rx119_pos, rx119_eos, rx119_fail479
    add rx119_pos, 1
    set rx119_rep, $I12
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantf136_loop515, rx119_pos, rx119_rep
  rxquantf136_done516:
    ge rx119_pos, rx119_eos, rx119_fail479
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, rx119_pos
    unless $I11, rx119_fail479
    substr $S10, rx119_tgt, rx119_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx119_pos, $I11
    add rx119_pos, 1
    nqp_rxmark rx119_bstack, rxquantr137_done519, rx119_pos, 0
  rxquantr137_loop518:
    ge rx119_pos, rx119_eos, rx119_fail479
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail479
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr137_done519
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr137_done519
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr137_done519, rx119_pos, rx119_rep
    goto rxquantr137_loop518
  rxquantr137_done519:
    add $I11, rx119_pos, 4
    gt $I11, rx119_eos, rx119_fail479
    substr $S10, rx119_tgt, rx119_pos, 4
    ne $S10, ucs4:"=end", rx119_fail479
    add rx119_pos, 4
    nqp_rxmark rx119_bstack, rxquantr138_done521, -1, 0
  rxquantr138_loop520:
    ge rx119_pos, rx119_eos, rx119_fail479
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail479
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr138_done521
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr138_done521
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr138_done521, rx119_pos, rx119_rep
    goto rxquantr138_loop520
  rxquantr138_done521:
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."!BACKREF"("identifier")
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail479
    repr_get_attr_int rx119_pos, $P11, rx119_curclass, "$!pos"
    le rx119_pos, 0, rx119_fail479
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, rx119_pos
    if $I11, rx119_fail479
    sub $I11, rx119_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, $I11
    unless $I11, rx119_fail479
    nqp_rxmark rx119_bstack, rxquantr141_done525, rx119_pos, 0
  rxquantr141_loop524:
    ge rx119_pos, rx119_eos, rx119_fail479
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, rx119_pos
    if $I11, rx119_fail479
    add rx119_pos, 1
    nqp_rxpeek $I19, rx119_bstack, rxquantr141_done525
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr141_done525
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr141_done525, rx119_pos, rx119_rep
    goto rxquantr141_loop524
  rxquantr141_done525:
    goto alt135_end513
  alt135_1526:
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."panic"("=begin without matching =end")
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail479
    repr_get_attr_int rx119_pos, $P11, rx119_curclass, "$!pos"
  alt135_end513:
    goto alt123_end489
  alt123_2528:
    add $I11, rx119_pos, 5
    gt $I11, rx119_eos, rx119_fail479
    substr $S10, rx119_tgt, rx119_pos, 5
    ne $S10, ucs4:"begin", rx119_fail479
    add rx119_pos, 5
    le rx119_pos, 0, rx119_fail479
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, rx119_pos
    if $I11, rx119_fail479
    sub $I11, rx119_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, $I11
    unless $I11, rx119_fail479
    nqp_rxmark rx119_bstack, rxquantr144_done531, rx119_pos, 0
  rxquantr144_loop530:
    ge rx119_pos, rx119_eos, rx119_fail479
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail479
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr144_done531
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr144_done531
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr144_done531, rx119_pos, rx119_rep
    goto rxquantr144_loop530
  rxquantr144_done531:
  alt145_0533:
    nqp_rxmark rx119_bstack, alt145_1535, rx119_pos, 0
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, rx119_pos
    if $I11, rxanchor146_done534
    ne rx119_pos, rx119_eos, rx119_fail479
    eq rx119_pos, 0, rxanchor146_done534
    sub $I11, rx119_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, $I11
    if $I11, rx119_fail479
  rxanchor146_done534:
    goto alt145_end532
  alt145_1535:
    nqp_rxmark rx119_bstack, alt145_2536, rx119_pos, 0
    add $I11, rx119_pos, 1
    gt $I11, rx119_eos, rx119_fail479
    substr $S10, rx119_tgt, rx119_pos, 1
    ne $S10, ucs4:"#", rx119_fail479
    add rx119_pos, 1
    goto alt145_end532
  alt145_2536:
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."panic"("Unrecognized token after =begin")
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail479
    repr_get_attr_int rx119_pos, $P11, rx119_curclass, "$!pos"
  alt145_end532:
  alt148_0539:
    nqp_rxmark rx119_bstack, alt148_1548, rx119_pos, 0
    set rx119_rep, 0
    nqp_rxmark rx119_bstack, rxquantf149_loop540, rx119_pos, rx119_rep
    goto rxquantf149_done541
  rxquantf149_loop540:
    set $I12, rx119_rep
    ge rx119_pos, rx119_eos, rx119_fail479
    add rx119_pos, 1
    set rx119_rep, $I12
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantf149_loop540, rx119_pos, rx119_rep
  rxquantf149_done541:
    ge rx119_pos, rx119_eos, rx119_fail479
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, rx119_pos
    unless $I11, rx119_fail479
    substr $S10, rx119_tgt, rx119_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx119_pos, $I11
    add rx119_pos, 1
    nqp_rxmark rx119_bstack, rxquantr150_done544, rx119_pos, 0
  rxquantr150_loop543:
    ge rx119_pos, rx119_eos, rx119_fail479
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail479
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr150_done544
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr150_done544
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr150_done544, rx119_pos, rx119_rep
    goto rxquantr150_loop543
  rxquantr150_done544:
    add $I11, rx119_pos, 4
    gt $I11, rx119_eos, rx119_fail479
    substr $S10, rx119_tgt, rx119_pos, 4
    ne $S10, ucs4:"=end", rx119_fail479
    add rx119_pos, 4
    le rx119_pos, 0, rx119_fail479
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, rx119_pos
    if $I11, rx119_fail479
    sub $I11, rx119_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, $I11
    unless $I11, rx119_fail479
    nqp_rxmark rx119_bstack, rxquantr152_done547, rx119_pos, 0
  rxquantr152_loop546:
    ge rx119_pos, rx119_eos, rx119_fail479
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, rx119_pos
    if $I11, rx119_fail479
    add rx119_pos, 1
    nqp_rxpeek $I19, rx119_bstack, rxquantr152_done547
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr152_done547
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr152_done547, rx119_pos, rx119_rep
    goto rxquantr152_loop546
  rxquantr152_done547:
    goto alt148_end538
  alt148_1548:
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."panic"("=begin without matching =end")
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail479
    repr_get_attr_int rx119_pos, $P11, rx119_curclass, "$!pos"
  alt148_end538:
    goto alt123_end489
  alt123_3550:
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail479
    nqp_rxmark rx119_bstack, rxsubrule154_pass551, -1, 0
  rxsubrule154_pass551:
    rx119_cstack = rx119_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx119_pos, $P11, rx119_curclass, "$!pos"
    set rx119_rep, 0
    nqp_rxmark rx119_bstack, rxquantf155_loop552, rx119_pos, rx119_rep
    goto rxquantf155_done553
  rxquantf155_loop552:
    set $I12, rx119_rep
    ge rx119_pos, rx119_eos, rx119_fail479
    add rx119_pos, 1
    set rx119_rep, $I12
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantf155_loop552, rx119_pos, rx119_rep
  rxquantf155_done553:
    eq rx119_pos, 0, rxanchor156_done555
    ge rx119_pos, rx119_eos, rx119_fail479
    sub $I11, rx119_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, $I11
    unless $I11, rx119_fail479
  rxanchor156_done555:
    .const 'Sub' $P5001 = 'cuid_43_1358115338.889' 
    capture_lex $P5001
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail479
    goto alt123_end489
  alt123_4575:
  alt164_0577:
    nqp_rxmark rx119_bstack, alt164_1578, rx119_pos, 0
    ge rx119_pos, rx119_eos, rx119_fail479
    is_cclass $I11, .CCLASS_WHITESPACE, rx119_tgt, rx119_pos
    unless $I11, rx119_fail479
    add rx119_pos, 1
    goto alt164_end576
  alt164_1578:
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."panic"("Illegal pod directive")
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail479
    repr_get_attr_int rx119_pos, $P11, rx119_curclass, "$!pos"
  alt164_end576:
    nqp_rxmark rx119_bstack, rxquantr166_done581, rx119_pos, 0
  rxquantr166_loop580:
    ge rx119_pos, rx119_eos, rx119_fail479
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, rx119_pos
    if $I11, rx119_fail479
    add rx119_pos, 1
    nqp_rxpeek $I19, rx119_bstack, rxquantr166_done581
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr166_done581
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr166_done581, rx119_pos, rx119_rep
    goto rxquantr166_loop580
  rxquantr166_done581:
    goto alt123_end489
  alt123_end489:
    nqp_rxcommit rx119_bstack, alt123_end489
    rx119_cur."!cursor_pass"(rx119_pos, "pod_comment", 'backtrack'=>1)
    .return (rx119_cur)
  rx119_restart478:
    repr_get_attr_obj rx119_cstack, rx119_cur, rx119_curclass, "$!cstack"
  rx119_fail479:
    unless rx119_bstack, rx119_done477
    pop $I19, rx119_bstack
    if_null rx119_cstack, rx119_cstack_done482
    unless rx119_cstack, rx119_cstack_done482
    dec $I19
    set $P11, rx119_cstack[$I19]
  rx119_cstack_done482:
    pop rx119_rep, rx119_bstack
    pop rx119_pos, rx119_bstack
    pop $I19, rx119_bstack
    lt rx119_pos, -1, rx119_done477
    lt rx119_pos, 0, rx119_fail479
    eq $I19, 0, rx119_fail479
    nqp_islist $I20, rx119_cstack
    unless $I20, rx119_jump480
    elements $I18, rx119_bstack
    le $I18, 0, rx119_cut481
    dec $I18
    set $I18, rx119_bstack[$I18]
  rx119_cut481:
    assign rx119_cstack, $I18
  rx119_jump480:
    jump $I19
  rx119_done477:
    rx119_cur."!cursor_fail"()
    .return (rx119_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_43_1358115338.889") :anon :lex :outer("cuid_42_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx157_tgt
    .local int rx157_pos
    .local int rx157_off
    .local int rx157_eos
    .local int rx157_rep
    .local pmc rx157_cur
    .local pmc rx157_curclass
    .local pmc rx157_bstack
    .local pmc rx157_cstack
    (rx157_cur, rx157_tgt, rx157_pos, rx157_curclass, rx157_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx157_cur
    length rx157_eos, rx157_tgt
    eq $I19, 1, rx157_restart558
    gt rx157_pos, rx157_eos, rx157_fail559
    repr_get_attr_int $I11, self, rx157_curclass, "$!from"
    ne $I11, -1, rxscan158_done565
    goto rxscan158_scan564
  rxscan158_loop563:
    inc rx157_pos
    gt rx157_pos, rx157_eos, rx157_fail559
    repr_bind_attr_int rx157_cur, rx157_curclass, "$!from", rx157_pos
  rxscan158_scan564:
    nqp_rxmark rx157_bstack, rxscan158_loop563, rx157_pos, 0
  rxscan158_done565:
    nqp_rxmark rx157_bstack, rxquantr159_done567, rx157_pos, 0
  rxquantr159_loop566:
    ge rx157_pos, rx157_eos, rx157_fail559
    substr $S11, rx157_tgt, rx157_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx157_fail559
    inc rx157_pos
    nqp_rxpeek $I19, rx157_bstack, rxquantr159_done567
    inc $I19
    inc $I19
    set rx157_rep, rx157_bstack[$I19]
    nqp_rxcommit rx157_bstack, rxquantr159_done567
    inc rx157_rep
    nqp_rxmark rx157_bstack, rxquantr159_done567, rx157_pos, rx157_rep
    goto rxquantr159_loop566
  rxquantr159_done567:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt160_0569
    nqp_push_label $P11, alt160_1574
    nqp_rxmark rx157_bstack, alt160_end568, -1, 0
    rx157_cur."!alt"(rx157_pos, "alt_nfa__5_1358115340.14", $P11)
    goto rx157_fail559
  alt160_0569:
    add $I11, rx157_pos, 1
    gt $I11, rx157_eos, rx157_fail559
    substr $S10, rx157_tgt, rx157_pos, 1
    ne $S10, ucs4:"=", rx157_fail559
    add rx157_pos, 1
    nqp_rxmark rx157_bstack, rxquantr161_done571, rx157_pos, 0
  rxquantr161_loop570:
    add $I11, rx157_pos, 3
    gt $I11, rx157_eos, rx157_fail559
    substr $S10, rx157_tgt, rx157_pos, 3
    ne $S10, ucs4:"cut", rx157_fail559
    add rx157_pos, 3
    le rx157_pos, 0, rx157_fail559
    is_cclass $I11, .CCLASS_WORD, rx157_tgt, rx157_pos
    if $I11, rx157_fail559
    sub $I11, rx157_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx157_tgt, $I11
    unless $I11, rx157_fail559
    repr_bind_attr_int rx157_cur, rx157_curclass, "$!pos", rx157_pos
    $P11 = rx157_cur."panic"("Obsolete pod format, please use =begin/=end instead")
    repr_get_attr_int $I11, $P11, rx157_curclass, "$!pos"
    lt $I11, 0, rx157_fail559
    repr_get_attr_int rx157_pos, $P11, rx157_curclass, "$!pos"
    nqp_rxpeek $I19, rx157_bstack, rxquantr161_done571
    inc $I19
    inc $I19
    set rx157_rep, rx157_bstack[$I19]
    nqp_rxcommit rx157_bstack, rxquantr161_done571
    inc rx157_rep
  rxquantr161_done571:
    goto alt160_end568
  alt160_1574:
    ge rx157_pos, rx157_eos, rx157_fail559
    is_cclass $I11, .CCLASS_NEWLINE, rx157_tgt, rx157_pos
    unless $I11, rx157_fail559
    substr $S10, rx157_tgt, rx157_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx157_pos, $I11
    add rx157_pos, 1
    goto alt160_end568
  alt160_end568:
    nqp_rxcommit rx157_bstack, alt160_end568
    rx157_cur."!cursor_pass"(rx157_pos, 'backtrack'=>1)
    .return (rx157_cur)
  rx157_restart558:
    repr_get_attr_obj rx157_cstack, rx157_cur, rx157_curclass, "$!cstack"
  rx157_fail559:
    unless rx157_bstack, rx157_done557
    pop $I19, rx157_bstack
    if_null rx157_cstack, rx157_cstack_done562
    unless rx157_cstack, rx157_cstack_done562
    dec $I19
    set $P11, rx157_cstack[$I19]
  rx157_cstack_done562:
    pop rx157_rep, rx157_bstack
    pop rx157_pos, rx157_bstack
    pop $I19, rx157_bstack
    lt rx157_pos, -1, rx157_done557
    lt rx157_pos, 0, rx157_fail559
    eq $I19, 0, rx157_fail559
    nqp_islist $I20, rx157_cstack
    unless $I20, rx157_jump560
    elements $I18, rx157_bstack
    le $I18, 0, rx157_cut561
    dec $I18
    set $I18, rx157_bstack[$I18]
  rx157_cut561:
    assign rx157_cstack, $I18
  rx157_jump560:
    jump $I19
  rx157_done557:
    rx157_cur."!cursor_fail"()
    .return (rx157_cur) 
.end
.HLL "nqp"
.namespace []
.sub "comp_unit" :subid("cuid_44_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 711
    .param pmc _lex_param_0 
    .const 'Sub' $P5061 = 'cuid_393_1358115338.889' 
    capture_lex $P5061 
    .const 'Sub' $P5061 = 'cuid_394_1358115338.889' 
    capture_lex $P5061 
    .const 'Sub' $P5061 = 'cuid_396_1358115338.889' 
    capture_lex $P5061 
    .const 'Sub' $P5061 = 'cuid_397_1358115338.889' 
    capture_lex $P5061 
    .lex "$*IN_DECL", $P101 
    .lex "$*HAS_YOU_ARE_HERE", $P102 
    .lex "$*MAIN_SUB", $P103 
    .lex "$*UNIT", $P104 
    .lex "$*GLOBALish", $P105 
    .lex "$*PACKAGE", $P106 
    .lex "$*EXPORT", $P107 
    .lex utf8:"$\x{a2}", $P108 
    .lex "$/", $P109 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P104, $P5004
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P105, $P5005
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P106, $P5006
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P107, $P5007
    set self, _lex_param_0
    .local string rx167_tgt
    .local int rx167_pos
    .local int rx167_off
    .local int rx167_eos
    .local int rx167_rep
    .local pmc rx167_cur
    .local pmc rx167_curclass
    .local pmc rx167_bstack
    .local pmc rx167_cstack
    (rx167_cur, rx167_tgt, rx167_pos, rx167_curclass, rx167_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx167_cur
    length rx167_eos, rx167_tgt
    eq $I19, 1, rx167_restart584
    gt rx167_pos, rx167_eos, rx167_fail585
    repr_get_attr_int $I11, self, rx167_curclass, "$!from"
    ne $I11, -1, rxscan168_done591
    goto rxscan168_scan590
  rxscan168_loop589:
    inc rx167_pos
    gt rx167_pos, rx167_eos, rx167_fail585
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!from", rx167_pos
  rxscan168_scan590:
    nqp_rxmark rx167_bstack, rxscan168_loop589, rx167_pos, 0
  rxscan168_done591:
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
    box $P5008, ""
    set $P101, $P5008
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
    box $P5009, 0
    set $P102, $P5009
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
    unless_null $P103, fallback592
    nqp_get_sc_object $P5012, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5011, $P5012
    set $P5010, $P5011["$MAIN_SUB"]
    unless_null $P5010, fallback593
    nqp_get_sc_object $P5013, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5010, $P5013
  fallback593:
    unless_null $P5010, vivi_169594
    die "Contextual $*MAIN_SUB not found"
    box $P5014, "Contextual $*MAIN_SUB not found"
    set $P5010, $P5014
  vivi_169594:
    set $P103, $P5010
  fallback592:
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
.annotate 'line', 716
    find_dynamic_lex $P5015, "$*W"
    unless_null $P5015, fallback595
    nqp_get_sc_object $P5018, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["$W"]
    unless_null $P5016, fallback596
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5016, $P5019
  fallback596:
    unless_null $P5016, vivi_170597
    die "Contextual $*W not found"
    box $P5020, "Contextual $*W not found"
    set $P5016, $P5020
  vivi_170597:
    set $P5015, $P5016
  fallback595:
    $P5021 = $P5015."push_lexpad"($P109)
    set $P104, $P5021
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
.annotate 'line', 720
    find_dynamic_lex $P5022, "$*W"
    unless_null $P5022, fallback598
    nqp_get_sc_object $P5025, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["$W"]
    unless_null $P5023, fallback599
    nqp_get_sc_object $P5026, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5023, $P5026
  fallback599:
    unless_null $P5023, vivi_171600
    die "Contextual $*W not found"
    box $P5027, "Contextual $*W not found"
    set $P5023, $P5027
  vivi_171600:
    set $P5022, $P5023
  fallback598:
    find_dynamic_lex $P5029, "%*HOW"
    unless_null $P5029, fallback601
    nqp_get_sc_object $P5032, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5031, $P5032
    set $P5030, $P5031["%HOW"]
    unless_null $P5030, fallback602
    nqp_get_sc_object $P5034, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5033, $P5034
    new $P5035, 'Hash'
    set $P5033["%HOW"], $P5035
    set $P5030, $P5035
  fallback602:
    unless_null $P5030, vivi_172603
    die "Contextual %*HOW not found"
    box $P5036, "Contextual %*HOW not found"
    set $P5030, $P5036
  vivi_172603:
    set $P5029, $P5030
  fallback601:
    set $P5028, $P5029["knowhow"]
    unless_null $P5028, fallback604
    nqp_get_sc_object $P5037, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5028, $P5037
  fallback604:
    $P5038 = $P5022."pkg_create_mo"($P5028, "GLOBALish" :named("name"))
    set $P105, $P5038
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
    $P5039 = $P108."MATCH"()
    set $P109, $P5039
    .const 'Sub' $P5040 = 'cuid_393_1358115338.889' 
    capture_lex $P5040
    $P5041 = $P5040()
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
    unless_null $P105, fallback620
    nqp_get_sc_object $P5044, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5043, $P5044
    set $P5042, $P5043["$GLOBALish"]
    unless_null $P5042, fallback621
    nqp_get_sc_object $P5045, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5042, $P5045
  fallback621:
    unless_null $P5042, vivi_178622
    die "Contextual $*GLOBALish not found"
    box $P5046, "Contextual $*GLOBALish not found"
    set $P5042, $P5046
  vivi_178622:
    set $P105, $P5042
  fallback620:
    set $P106, $P105
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
    $P5047 = $P108."MATCH"()
    set $P109, $P5047
    .const 'Sub' $P5048 = 'cuid_394_1358115338.889' 
    capture_lex $P5048
    $P5049 = $P5048()
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
    unless_null $P107, fallback632
    nqp_get_sc_object $P5052, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5051, $P5052
    set $P5050, $P5051["$EXPORT"]
    unless_null $P5050, fallback633
    nqp_get_sc_object $P5053, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5050, $P5053
  fallback633:
    unless_null $P5050, vivi_182634
    die "Contextual $*EXPORT not found"
    box $P5054, "Contextual $*EXPORT not found"
    set $P5050, $P5054
  vivi_182634:
    set $P107, $P5050
  fallback632:
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
    $P5055 = $P108."MATCH"()
    set $P109, $P5055
    .const 'Sub' $P5056 = 'cuid_396_1358115338.889' 
    capture_lex $P5056
    $P5057 = $P5056()
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
    $P5058 = $P108."MATCH"()
    set $P109, $P5058
    .const 'Sub' $P5059 = 'cuid_397_1358115338.889' 
    capture_lex $P5059
    $P5060 = $P5059()
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    $P11 = rx167_cur."outerctx"()
    repr_get_attr_int $I11, $P11, rx167_curclass, "$!pos"
    lt $I11, 0, rx167_fail585
    repr_get_attr_int rx167_pos, $P11, rx167_curclass, "$!pos"
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    $P11 = rx167_cur."statementlist"()
    repr_get_attr_int $I11, $P11, rx167_curclass, "$!pos"
    lt $I11, 0, rx167_fail585
    nqp_rxmark rx167_bstack, rxsubrule197_pass678, -1, 0
  rxsubrule197_pass678:
    rx167_cstack = rx167_cur."!cursor_capture"($P11, "statementlist")
    repr_get_attr_int rx167_pos, $P11, rx167_curclass, "$!pos"
  alt198_0680:
    nqp_rxmark rx167_bstack, alt198_1682, rx167_pos, 0
    lt rx167_pos, rx167_eos, rx167_fail585
    goto alt198_end679
  alt198_1682:
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    $P11 = rx167_cur."panic"("Confused")
    repr_get_attr_int $I11, $P11, rx167_curclass, "$!pos"
    lt $I11, 0, rx167_fail585
    repr_get_attr_int rx167_pos, $P11, rx167_curclass, "$!pos"
  alt198_end679:
    rx167_cur."!cursor_pass"(rx167_pos, "comp_unit", 'backtrack'=>1)
    .return (rx167_cur)
  rx167_restart584:
    repr_get_attr_obj rx167_cstack, rx167_cur, rx167_curclass, "$!cstack"
  rx167_fail585:
    unless rx167_bstack, rx167_done583
    pop $I19, rx167_bstack
    if_null rx167_cstack, rx167_cstack_done588
    unless rx167_cstack, rx167_cstack_done588
    dec $I19
    set $P11, rx167_cstack[$I19]
  rx167_cstack_done588:
    pop rx167_rep, rx167_bstack
    pop rx167_pos, rx167_bstack
    pop $I19, rx167_bstack
    lt rx167_pos, -1, rx167_done583
    lt rx167_pos, 0, rx167_fail585
    eq $I19, 0, rx167_fail585
    nqp_islist $I20, rx167_cstack
    unless $I20, rx167_jump586
    elements $I18, rx167_bstack
    le $I18, 0, rx167_cut587
    dec $I18
    set $I18, rx167_bstack[$I18]
  rx167_cut587:
    assign rx167_cstack, $I18
  rx167_jump586:
    jump $I19
  rx167_done583:
    rx167_cur."!cursor_fail"()
    .return (rx167_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_393_1358115338.889") :anon :lex :outer("cuid_44_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 721

.annotate 'line', 722
    find_dynamic_lex $P5002, "$*GLOBALish"
    unless_null $P5002, fallback605
    nqp_get_sc_object $P5005, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$GLOBALish"]
    unless_null $P5003, fallback606
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5003, $P5006
  fallback606:
    unless_null $P5003, vivi_173607
    die "Contextual $*GLOBALish not found"
    box $P5007, "Contextual $*GLOBALish not found"
    set $P5003, $P5007
  vivi_173607:
    set $P5002, $P5003
  fallback605:
    get_how $P5001, $P5002
    find_dynamic_lex $P5008, "$*GLOBALish"
    unless_null $P5008, fallback608
    nqp_get_sc_object $P5011, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5010, $P5011
    set $P5009, $P5010["$GLOBALish"]
    unless_null $P5009, fallback609
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5009, $P5012
  fallback609:
    unless_null $P5009, vivi_174610
    die "Contextual $*GLOBALish not found"
    box $P5013, "Contextual $*GLOBALish not found"
    set $P5009, $P5013
  vivi_174610:
    set $P5008, $P5009
  fallback608:
    $P5001."compose"($P5008)
.annotate 'line', 723
    find_dynamic_lex $P5014, "$*W"
    unless_null $P5014, fallback611
    nqp_get_sc_object $P5017, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5016, $P5017
    set $P5015, $P5016["$W"]
    unless_null $P5015, fallback612
    nqp_get_sc_object $P5018, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5015, $P5018
  fallback612:
    unless_null $P5015, vivi_175613
    die "Contextual $*W not found"
    box $P5019, "Contextual $*W not found"
    set $P5015, $P5019
  vivi_175613:
    set $P5014, $P5015
  fallback611:
    find_dynamic_lex $P5020, "$*UNIT"
    unless_null $P5020, fallback614
    nqp_get_sc_object $P5023, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5022, $P5023
    set $P5021, $P5022["$UNIT"]
    unless_null $P5021, fallback615
    nqp_get_sc_object $P5024, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5021, $P5024
  fallback615:
    unless_null $P5021, vivi_176616
    die "Contextual $*UNIT not found"
    box $P5025, "Contextual $*UNIT not found"
    set $P5021, $P5025
  vivi_176616:
    set $P5020, $P5021
  fallback614:
    find_dynamic_lex $P5026, "$*GLOBALish"
    unless_null $P5026, fallback617
    nqp_get_sc_object $P5029, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["$GLOBALish"]
    unless_null $P5027, fallback618
    nqp_get_sc_object $P5030, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5027, $P5030
  fallback618:
    unless_null $P5027, vivi_177619
    die "Contextual $*GLOBALish not found"
    box $P5031, "Contextual $*GLOBALish not found"
    set $P5027, $P5031
  vivi_177619:
    set $P5026, $P5027
  fallback617:
    $P5032 = $P5014."install_lexical_symbol"($P5020, "GLOBALish", $P5026)
    .return ($P5032) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_394_1358115338.889") :anon :lex :outer("cuid_44_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 728

    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback623
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback624
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5005
  fallback624:
    unless_null $P5002, vivi_179625
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_179625:
    set $P5001, $P5002
  fallback623:
    find_dynamic_lex $P5007, "$*UNIT"
    unless_null $P5007, fallback626
    nqp_get_sc_object $P5010, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5009, $P5010
    set $P5008, $P5009["$UNIT"]
    unless_null $P5008, fallback627
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5008, $P5011
  fallback627:
    unless_null $P5008, vivi_180628
    die "Contextual $*UNIT not found"
    box $P5012, "Contextual $*UNIT not found"
    set $P5008, $P5012
  vivi_180628:
    set $P5007, $P5008
  fallback626:
    find_dynamic_lex $P5013, "$*PACKAGE"
    unless_null $P5013, fallback629
    nqp_get_sc_object $P5016, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$PACKAGE"]
    unless_null $P5014, fallback630
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5014, $P5017
  fallback630:
    unless_null $P5014, vivi_181631
    die "Contextual $*PACKAGE not found"
    box $P5018, "Contextual $*PACKAGE not found"
    set $P5014, $P5018
  vivi_181631:
    set $P5013, $P5014
  fallback629:
    $P5019 = $P5001."install_lexical_symbol"($P5007, "$?PACKAGE", $P5013)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_396_1358115338.889") :anon :lex :outer("cuid_44_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 732
    .const 'Sub' $P5017 = 'cuid_395_1358115338.889' 
    capture_lex $P5017 
    find_dynamic_lex $P5003, "%*COMPILING"
    unless_null $P5003, fallback637
    nqp_get_sc_object $P5006, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["%COMPILING"]
    unless_null $P5004, fallback638
    nqp_get_sc_object $P5008, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5007, $P5008
    new $P5009, 'Hash'
    set $P5007["%COMPILING"], $P5009
    set $P5004, $P5009
  fallback638:
    unless_null $P5004, vivi_184639
    die "Contextual %*COMPILING not found"
    box $P5010, "Contextual %*COMPILING not found"
    set $P5004, $P5010
  vivi_184639:
    set $P5003, $P5004
  fallback637:
    set $P5002, $P5003["%?OPTIONS"]
    unless_null $P5002, fallback640
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5011
  fallback640:
    set $P5001, $P5002["setting"]
    unless_null $P5001, fallback641
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5012
  fallback641:
    set $S5001, $P5001
    iseq $I5001, $S5001, "NULL"
    box $P5016, $I5001
    set $P5015, $P5016
    if $I5001 goto unless183_end636 
    .const 'Sub' $P5013 = 'cuid_395_1358115338.889' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5015, $P5014
  unless183_end636:
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_395_1358115338.889") :anon :lex :outer("cuid_396_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 733
    .lex "$DEFAULT", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
.annotate 'line', 734
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback642
    nqp_get_sc_object $P5005, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback643
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5003, $P5006
  fallback643:
    unless_null $P5003, vivi_185644
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_185644:
    set $P5002, $P5003
  fallback642:
    find_dynamic_lex $P5009, "%*HOW"
    unless_null $P5009, fallback645
    nqp_get_sc_object $P5012, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5011, $P5012
    set $P5010, $P5011["%HOW"]
    unless_null $P5010, fallback646
    nqp_get_sc_object $P5014, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5013, $P5014
    new $P5015, 'Hash'
    set $P5013["%HOW"], $P5015
    set $P5010, $P5015
  fallback646:
    unless_null $P5010, vivi_186647
    die "Contextual %*HOW not found"
    box $P5016, "Contextual %*HOW not found"
    set $P5010, $P5016
  vivi_186647:
    set $P5009, $P5010
  fallback645:
    set $P5008, $P5009["knowhow"]
    unless_null $P5008, fallback648
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5008, $P5017
  fallback648:
    $P5018 = $P5002."pkg_create_mo"($P5008, "EXPORT" :named("name"))
    store_dynamic_lex "$*EXPORT", $P5018
.annotate 'line', 735
    find_dynamic_lex $P5020, "$*EXPORT"
    unless_null $P5020, fallback649
    nqp_get_sc_object $P5023, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5022, $P5023
    set $P5021, $P5022["$EXPORT"]
    unless_null $P5021, fallback650
    nqp_get_sc_object $P5024, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5021, $P5024
  fallback650:
    unless_null $P5021, vivi_187651
    die "Contextual $*EXPORT not found"
    box $P5025, "Contextual $*EXPORT not found"
    set $P5021, $P5025
  vivi_187651:
    set $P5020, $P5021
  fallback649:
    get_how $P5019, $P5020
    find_dynamic_lex $P5026, "$*EXPORT"
    unless_null $P5026, fallback652
    nqp_get_sc_object $P5029, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["$EXPORT"]
    unless_null $P5027, fallback653
    nqp_get_sc_object $P5030, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5027, $P5030
  fallback653:
    unless_null $P5027, vivi_188654
    die "Contextual $*EXPORT not found"
    box $P5031, "Contextual $*EXPORT not found"
    set $P5027, $P5031
  vivi_188654:
    set $P5026, $P5027
  fallback652:
    $P5019."compose"($P5026)
.annotate 'line', 736
    find_dynamic_lex $P5032, "$*W"
    unless_null $P5032, fallback655
    nqp_get_sc_object $P5035, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5034, $P5035
    set $P5033, $P5034["$W"]
    unless_null $P5033, fallback656
    nqp_get_sc_object $P5036, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5033, $P5036
  fallback656:
    unless_null $P5033, vivi_189657
    die "Contextual $*W not found"
    box $P5037, "Contextual $*W not found"
    set $P5033, $P5037
  vivi_189657:
    set $P5032, $P5033
  fallback655:
    find_dynamic_lex $P5038, "$*UNIT"
    unless_null $P5038, fallback658
    nqp_get_sc_object $P5041, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5040, $P5041
    set $P5039, $P5040["$UNIT"]
    unless_null $P5039, fallback659
    nqp_get_sc_object $P5042, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5039, $P5042
  fallback659:
    unless_null $P5039, vivi_190660
    die "Contextual $*UNIT not found"
    box $P5043, "Contextual $*UNIT not found"
    set $P5039, $P5043
  vivi_190660:
    set $P5038, $P5039
  fallback658:
    find_dynamic_lex $P5044, "$*EXPORT"
    unless_null $P5044, fallback661
    nqp_get_sc_object $P5047, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5046, $P5047
    set $P5045, $P5046["$EXPORT"]
    unless_null $P5045, fallback662
    nqp_get_sc_object $P5048, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5045, $P5048
  fallback662:
    unless_null $P5045, vivi_191663
    die "Contextual $*EXPORT not found"
    box $P5049, "Contextual $*EXPORT not found"
    set $P5045, $P5049
  vivi_191663:
    set $P5044, $P5045
  fallback661:
    $P5032."install_lexical_symbol"($P5038, "EXPORT", $P5044)
.annotate 'line', 737
    find_dynamic_lex $P5050, "$*W"
    unless_null $P5050, fallback664
    nqp_get_sc_object $P5053, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5052, $P5053
    set $P5051, $P5052["$W"]
    unless_null $P5051, fallback665
    nqp_get_sc_object $P5054, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5051, $P5054
  fallback665:
    unless_null $P5051, vivi_192666
    die "Contextual $*W not found"
    box $P5055, "Contextual $*W not found"
    set $P5051, $P5055
  vivi_192666:
    set $P5050, $P5051
  fallback664:
    find_dynamic_lex $P5057, "%*HOW"
    unless_null $P5057, fallback667
    nqp_get_sc_object $P5060, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5059, $P5060
    set $P5058, $P5059["%HOW"]
    unless_null $P5058, fallback668
    nqp_get_sc_object $P5062, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5061, $P5062
    new $P5063, 'Hash'
    set $P5061["%HOW"], $P5063
    set $P5058, $P5063
  fallback668:
    unless_null $P5058, vivi_193669
    die "Contextual %*HOW not found"
    box $P5064, "Contextual %*HOW not found"
    set $P5058, $P5064
  vivi_193669:
    set $P5057, $P5058
  fallback667:
    set $P5056, $P5057["knowhow"]
    unless_null $P5056, fallback670
    nqp_get_sc_object $P5065, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5056, $P5065
  fallback670:
    $P5066 = $P5050."pkg_create_mo"($P5056, "DEFAULT" :named("name"))
    set $P101, $P5066
.annotate 'line', 738
    get_how $P5067, $P101
    $P5067."compose"($P101)
    find_dynamic_lex $P5069, "$*EXPORT"
    unless_null $P5069, fallback671
    nqp_get_sc_object $P5072, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5071, $P5072
    set $P5070, $P5071["$EXPORT"]
    unless_null $P5070, fallback672
    nqp_get_sc_object $P5073, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5070, $P5073
  fallback672:
    unless_null $P5070, vivi_194673
    die "Contextual $*EXPORT not found"
    box $P5074, "Contextual $*EXPORT not found"
    set $P5070, $P5074
  vivi_194673:
    set $P5069, $P5070
  fallback671:
    get_who $P5068, $P5069
    set $P5068["DEFAULT"], $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_397_1358115338.889") :anon :lex :outer("cuid_44_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 743

    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback674
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback675
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5005
  fallback675:
    unless_null $P5002, vivi_195676
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_195676:
    set $P5001, $P5002
  fallback674:
    $P5007 = $P5001."add_initializations"()
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "statementlist" :subid("cuid_45_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 751
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx201_tgt
    .local int rx201_pos
    .local int rx201_off
    .local int rx201_eos
    .local int rx201_rep
    .local pmc rx201_cur
    .local pmc rx201_curclass
    .local pmc rx201_bstack
    .local pmc rx201_cstack
    (rx201_cur, rx201_tgt, rx201_pos, rx201_curclass, rx201_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx201_cur
    length rx201_eos, rx201_tgt
    eq $I19, 1, rx201_restart686
    gt rx201_pos, rx201_eos, rx201_fail687
    repr_get_attr_int $I11, self, rx201_curclass, "$!from"
    ne $I11, -1, rxscan202_done693
    goto rxscan202_scan692
  rxscan202_loop691:
    inc rx201_pos
    gt rx201_pos, rx201_eos, rx201_fail687
    repr_bind_attr_int rx201_cur, rx201_curclass, "$!from", rx201_pos
  rxscan202_scan692:
    nqp_rxmark rx201_bstack, rxscan202_loop691, rx201_pos, 0
  rxscan202_done693:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt203_0695
    nqp_push_label $P11, alt203_1699
    nqp_rxmark rx201_bstack, alt203_end694, -1, 0
    rx201_cur."!alt"(rx201_pos, "alt_nfa__7_1358115340.236", $P11)
    goto rx201_fail687
  alt203_0695:
    repr_bind_attr_int rx201_cur, rx201_curclass, "$!pos", rx201_pos
    $P11 = rx201_cur."ws"()
    repr_get_attr_int $I11, $P11, rx201_curclass, "$!pos"
    lt $I11, 0, rx201_fail687
    repr_get_attr_int rx201_pos, $P11, rx201_curclass, "$!pos"
    lt rx201_pos, rx201_eos, rx201_fail687
    repr_bind_attr_int rx201_cur, rx201_curclass, "$!pos", rx201_pos
    $P11 = rx201_cur."ws"()
    repr_get_attr_int $I11, $P11, rx201_curclass, "$!pos"
    lt $I11, 0, rx201_fail687
    repr_get_attr_int rx201_pos, $P11, rx201_curclass, "$!pos"
    goto alt203_end694
  alt203_1699:
    repr_bind_attr_int rx201_cur, rx201_curclass, "$!pos", rx201_pos
    $P11 = rx201_cur."ws"()
    repr_get_attr_int $I11, $P11, rx201_curclass, "$!pos"
    lt $I11, 0, rx201_fail687
    repr_get_attr_int rx201_pos, $P11, rx201_curclass, "$!pos"
    nqp_rxmark rx201_bstack, rxquantr208_done702, rx201_pos, 0
  rxquantr208_loop701:
    repr_bind_attr_int rx201_cur, rx201_curclass, "$!pos", rx201_pos
    $P11 = rx201_cur."statement"()
    repr_get_attr_int $I11, $P11, rx201_curclass, "$!pos"
    lt $I11, 0, rx201_fail687
    nqp_rxmark rx201_bstack, rxsubrule209_pass703, -1, 0
  rxsubrule209_pass703:
    rx201_cstack = rx201_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx201_pos, $P11, rx201_curclass, "$!pos"
    repr_bind_attr_int rx201_cur, rx201_curclass, "$!pos", rx201_pos
    $P11 = rx201_cur."eat_terminator"()
    repr_get_attr_int $I11, $P11, rx201_curclass, "$!pos"
    lt $I11, 0, rx201_fail687
    repr_get_attr_int rx201_pos, $P11, rx201_curclass, "$!pos"
    repr_bind_attr_int rx201_cur, rx201_curclass, "$!pos", rx201_pos
    $P11 = rx201_cur."ws"()
    repr_get_attr_int $I11, $P11, rx201_curclass, "$!pos"
    lt $I11, 0, rx201_fail687
    repr_get_attr_int rx201_pos, $P11, rx201_curclass, "$!pos"
    nqp_rxpeek $I19, rx201_bstack, rxquantr208_done702
    inc $I19
    inc $I19
    set rx201_rep, rx201_bstack[$I19]
    nqp_rxcommit rx201_bstack, rxquantr208_done702
    inc rx201_rep
    nqp_rxmark rx201_bstack, rxquantr208_done702, rx201_pos, rx201_rep
    goto rxquantr208_loop701
  rxquantr208_done702:
    repr_bind_attr_int rx201_cur, rx201_curclass, "$!pos", rx201_pos
    $P11 = rx201_cur."ws"()
    repr_get_attr_int $I11, $P11, rx201_curclass, "$!pos"
    lt $I11, 0, rx201_fail687
    repr_get_attr_int rx201_pos, $P11, rx201_curclass, "$!pos"
    goto alt203_end694
  alt203_end694:
    rx201_cur."!cursor_pass"(rx201_pos, "statementlist", 'backtrack'=>1)
    .return (rx201_cur)
  rx201_restart686:
    repr_get_attr_obj rx201_cstack, rx201_cur, rx201_curclass, "$!cstack"
  rx201_fail687:
    unless rx201_bstack, rx201_done685
    pop $I19, rx201_bstack
    if_null rx201_cstack, rx201_cstack_done690
    unless rx201_cstack, rx201_cstack_done690
    dec $I19
    set $P11, rx201_cstack[$I19]
  rx201_cstack_done690:
    pop rx201_rep, rx201_bstack
    pop rx201_pos, rx201_bstack
    pop $I19, rx201_bstack
    lt rx201_pos, -1, rx201_done685
    lt rx201_pos, 0, rx201_fail687
    eq $I19, 0, rx201_fail687
    nqp_islist $I20, rx201_cstack
    unless $I20, rx201_jump688
    elements $I18, rx201_bstack
    le $I18, 0, rx201_cut689
    dec $I18
    set $I18, rx201_bstack[$I18]
  rx201_cut689:
    assign rx201_cstack, $I18
  rx201_jump688:
    jump $I19
  rx201_done685:
    rx201_cur."!cursor_fail"()
    .return (rx201_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement" :subid("cuid_46_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 756
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_47_1358115338.889' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx213_tgt
    .local int rx213_pos
    .local int rx213_off
    .local int rx213_eos
    .local int rx213_rep
    .local pmc rx213_cur
    .local pmc rx213_curclass
    .local pmc rx213_bstack
    .local pmc rx213_cstack
    (rx213_cur, rx213_tgt, rx213_pos, rx213_curclass, rx213_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx213_cur
    length rx213_eos, rx213_tgt
    eq $I19, 1, rx213_restart709
    gt rx213_pos, rx213_eos, rx213_fail710
    repr_get_attr_int $I11, self, rx213_curclass, "$!from"
    ne $I11, -1, rxscan214_done716
    goto rxscan214_scan715
  rxscan214_loop714:
    inc rx213_pos
    gt rx213_pos, rx213_eos, rx213_fail710
    repr_bind_attr_int rx213_cur, rx213_curclass, "$!from", rx213_pos
  rxscan214_scan715:
    nqp_rxmark rx213_bstack, rxscan214_loop714, rx213_pos, 0
  rxscan214_done716:
    .const 'Sub' $P5001 = 'cuid_47_1358115338.889' 
    capture_lex $P5001
    repr_bind_attr_int rx213_cur, rx213_curclass, "$!pos", rx213_pos
    $P11 = rx213_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx213_curclass, "$!pos"
    ge $I11, 0, rx213_fail710
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt220_0735
    nqp_push_label $P11, alt220_1737
    nqp_rxmark rx213_bstack, alt220_end734, -1, 0
    rx213_cur."!alt"(rx213_pos, "alt_nfa__9_1358115340.255", $P11)
    goto rx213_fail710
  alt220_0735:
    repr_bind_attr_int rx213_cur, rx213_curclass, "$!pos", rx213_pos
    $P11 = rx213_cur."statement_control"()
    repr_get_attr_int $I11, $P11, rx213_curclass, "$!pos"
    lt $I11, 0, rx213_fail710
    nqp_rxmark rx213_bstack, rxsubrule221_pass736, -1, 0
  rxsubrule221_pass736:
    rx213_cstack = rx213_cur."!cursor_capture"($P11, "statement_control")
    repr_get_attr_int rx213_pos, $P11, rx213_curclass, "$!pos"
    goto alt220_end734
  alt220_1737:
    repr_bind_attr_int rx213_cur, rx213_curclass, "$!pos", rx213_pos
    $P11 = rx213_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx213_curclass, "$!pos"
    lt $I11, 0, rx213_fail710
    nqp_rxmark rx213_bstack, rxsubrule222_pass738, -1, 0
  rxsubrule222_pass738:
    rx213_cstack = rx213_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx213_pos, $P11, rx213_curclass, "$!pos"
    repr_bind_attr_int rx213_cur, rx213_curclass, "$!pos", rx213_pos
    $P11 = rx213_cur."ws"()
    repr_get_attr_int $I11, $P11, rx213_curclass, "$!pos"
    lt $I11, 0, rx213_fail710
    repr_get_attr_int rx213_pos, $P11, rx213_curclass, "$!pos"
    nqp_rxmark rx213_bstack, rxquantr224_done741, rx213_pos, 0
  rxquantr224_loop740:
  alt225_0743:
    nqp_rxmark rx213_bstack, alt225_1744, rx213_pos, 0
    repr_bind_attr_int rx213_cur, rx213_curclass, "$!pos", rx213_pos
    $P11 = rx213_cur."MARKED"("endstmt")
    repr_get_attr_int $I11, $P11, rx213_curclass, "$!pos"
    lt $I11, 0, rx213_fail710
    goto alt225_end742
  alt225_1744:
    nqp_rxmark rx213_bstack, alt225_2750, rx213_pos, 0
    repr_bind_attr_int rx213_cur, rx213_curclass, "$!pos", rx213_pos
    $P11 = rx213_cur."statement_mod_cond"()
    repr_get_attr_int $I11, $P11, rx213_curclass, "$!pos"
    lt $I11, 0, rx213_fail710
    nqp_rxmark rx213_bstack, rxsubrule226_pass745, -1, 0
  rxsubrule226_pass745:
    rx213_cstack = rx213_cur."!cursor_capture"($P11, "statement_mod_cond")
    repr_get_attr_int rx213_pos, $P11, rx213_curclass, "$!pos"
    nqp_rxmark rx213_bstack, rxquantr227_done747, rx213_pos, 0
  rxquantr227_loop746:
    repr_bind_attr_int rx213_cur, rx213_curclass, "$!pos", rx213_pos
    $P11 = rx213_cur."statement_mod_loop"()
    repr_get_attr_int $I11, $P11, rx213_curclass, "$!pos"
    lt $I11, 0, rx213_fail710
    goto rxsubrule228_pass748
  rxsubrule228_back749:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx213_curclass, "$!pos"
    lt $I11, 0, rx213_fail710
  rxsubrule228_pass748:
    rx213_cstack = rx213_cur."!cursor_capture"($P11, "statement_mod_loop")
    set_addr $I11, rxsubrule228_back749
    push rx213_bstack, $I11
    push rx213_bstack, 0
    push rx213_bstack, rx213_pos
    elements $I11, rx213_cstack
    push rx213_bstack, $I11
    repr_get_attr_int rx213_pos, $P11, rx213_curclass, "$!pos"
    nqp_rxpeek $I19, rx213_bstack, rxquantr227_done747
    inc $I19
    inc $I19
    set rx213_rep, rx213_bstack[$I19]
    nqp_rxcommit rx213_bstack, rxquantr227_done747
    inc rx213_rep
  rxquantr227_done747:
    goto alt225_end742
  alt225_2750:
    repr_bind_attr_int rx213_cur, rx213_curclass, "$!pos", rx213_pos
    $P11 = rx213_cur."statement_mod_loop"()
    repr_get_attr_int $I11, $P11, rx213_curclass, "$!pos"
    lt $I11, 0, rx213_fail710
    nqp_rxmark rx213_bstack, rxsubrule229_pass751, -1, 0
  rxsubrule229_pass751:
    rx213_cstack = rx213_cur."!cursor_capture"($P11, "statement_mod_loop")
    repr_get_attr_int rx213_pos, $P11, rx213_curclass, "$!pos"
  alt225_end742:
    nqp_rxpeek $I19, rx213_bstack, rxquantr224_done741
    inc $I19
    inc $I19
    set rx213_rep, rx213_bstack[$I19]
    nqp_rxcommit rx213_bstack, rxquantr224_done741
    inc rx213_rep
  rxquantr224_done741:
    goto alt220_end734
  alt220_end734:
    nqp_rxcommit rx213_bstack, alt220_end734
    rx213_cur."!cursor_pass"(rx213_pos, "statement", 'backtrack'=>1)
    .return (rx213_cur)
  rx213_restart709:
    repr_get_attr_obj rx213_cstack, rx213_cur, rx213_curclass, "$!cstack"
  rx213_fail710:
    unless rx213_bstack, rx213_done708
    pop $I19, rx213_bstack
    if_null rx213_cstack, rx213_cstack_done713
    unless rx213_cstack, rx213_cstack_done713
    dec $I19
    set $P11, rx213_cstack[$I19]
  rx213_cstack_done713:
    pop rx213_rep, rx213_bstack
    pop rx213_pos, rx213_bstack
    pop $I19, rx213_bstack
    lt rx213_pos, -1, rx213_done708
    lt rx213_pos, 0, rx213_fail710
    eq $I19, 0, rx213_fail710
    nqp_islist $I20, rx213_cstack
    unless $I20, rx213_jump711
    elements $I18, rx213_bstack
    le $I18, 0, rx213_cut712
    dec $I18
    set $I18, rx213_bstack[$I18]
  rx213_cut712:
    assign rx213_cstack, $I18
  rx213_jump711:
    jump $I19
  rx213_done708:
    rx213_cur."!cursor_fail"()
    .return (rx213_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_47_1358115338.889") :anon :lex :outer("cuid_46_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx215_tgt
    .local int rx215_pos
    .local int rx215_off
    .local int rx215_eos
    .local int rx215_rep
    .local pmc rx215_cur
    .local pmc rx215_curclass
    .local pmc rx215_bstack
    .local pmc rx215_cstack
    (rx215_cur, rx215_tgt, rx215_pos, rx215_curclass, rx215_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx215_cur
    length rx215_eos, rx215_tgt
    eq $I19, 1, rx215_restart719
    gt rx215_pos, rx215_eos, rx215_fail720
    repr_get_attr_int $I11, self, rx215_curclass, "$!from"
    ne $I11, -1, rxscan216_done726
    goto rxscan216_scan725
  rxscan216_loop724:
    inc rx215_pos
    gt rx215_pos, rx215_eos, rx215_fail720
    repr_bind_attr_int rx215_cur, rx215_curclass, "$!from", rx215_pos
  rxscan216_scan725:
    nqp_rxmark rx215_bstack, rxscan216_loop724, rx215_pos, 0
  rxscan216_done726:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt217_0728
    nqp_push_label $P11, alt217_1732
    nqp_rxmark rx215_bstack, alt217_end727, -1, 0
    rx215_cur."!alt"(rx215_pos, "alt_nfa__8_1358115340.242", $P11)
    goto rx215_fail720
  alt217_0728:
  alt218_0730:
    nqp_rxmark rx215_bstack, alt218_1731, rx215_pos, 0
    add $I11, rx215_pos, 1
    gt $I11, rx215_eos, rx215_fail720
    substr $S10, rx215_tgt, rx215_pos, 1
    ne $S10, ucs4:"]", rx215_fail720
    add rx215_pos, 1
    goto alt218_end729
  alt218_1731:
    ge rx215_pos, rx215_eos, rx215_fail720
    substr $S11, rx215_tgt, rx215_pos, 1
    index $I11, ucs4:")}", $S11
    lt $I11, 0, rx215_fail720
    inc rx215_pos
  alt218_end729:
    goto alt217_end727
  alt217_1732:
    lt rx215_pos, rx215_eos, rx215_fail720
    goto alt217_end727
  alt217_end727:
    rx215_cur."!cursor_pass"(rx215_pos, 'backtrack'=>1)
    .return (rx215_cur)
  rx215_restart719:
    repr_get_attr_obj rx215_cstack, rx215_cur, rx215_curclass, "$!cstack"
  rx215_fail720:
    unless rx215_bstack, rx215_done718
    pop $I19, rx215_bstack
    if_null rx215_cstack, rx215_cstack_done723
    unless rx215_cstack, rx215_cstack_done723
    dec $I19
    set $P11, rx215_cstack[$I19]
  rx215_cstack_done723:
    pop rx215_rep, rx215_bstack
    pop rx215_pos, rx215_bstack
    pop $I19, rx215_bstack
    lt rx215_pos, -1, rx215_done718
    lt rx215_pos, 0, rx215_fail720
    eq $I19, 0, rx215_fail720
    nqp_islist $I20, rx215_cstack
    unless $I20, rx215_jump721
    elements $I18, rx215_bstack
    le $I18, 0, rx215_cut722
    dec $I18
    set $I18, rx215_bstack[$I18]
  rx215_cut722:
    assign rx215_cstack, $I18
  rx215_jump721:
    jump $I19
  rx215_done718:
    rx215_cur."!cursor_fail"()
    .return (rx215_cur) 
.end
.HLL "nqp"
.namespace []
.sub "eat_terminator" :subid("cuid_48_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 769
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx230_tgt
    .local int rx230_pos
    .local int rx230_off
    .local int rx230_eos
    .local int rx230_rep
    .local pmc rx230_cur
    .local pmc rx230_curclass
    .local pmc rx230_bstack
    .local pmc rx230_cstack
    (rx230_cur, rx230_tgt, rx230_pos, rx230_curclass, rx230_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx230_cur
    length rx230_eos, rx230_tgt
    eq $I19, 1, rx230_restart754
    gt rx230_pos, rx230_eos, rx230_fail755
    repr_get_attr_int $I11, self, rx230_curclass, "$!from"
    ne $I11, -1, rxscan231_done761
    goto rxscan231_scan760
  rxscan231_loop759:
    inc rx230_pos
    gt rx230_pos, rx230_eos, rx230_fail755
    repr_bind_attr_int rx230_cur, rx230_curclass, "$!from", rx230_pos
  rxscan231_scan760:
    nqp_rxmark rx230_bstack, rxscan231_loop759, rx230_pos, 0
  rxscan231_done761:
  alt232_0763:
    nqp_rxmark rx230_bstack, alt232_1764, rx230_pos, 0
    add $I11, rx230_pos, 1
    gt $I11, rx230_eos, rx230_fail755
    substr $S10, rx230_tgt, rx230_pos, 1
    ne $S10, ucs4:";", rx230_fail755
    add rx230_pos, 1
    goto alt232_end762
  alt232_1764:
    nqp_rxmark rx230_bstack, alt232_2765, rx230_pos, 0
    repr_bind_attr_int rx230_cur, rx230_curclass, "$!pos", rx230_pos
    $P11 = rx230_cur."MARKED"("endstmt")
    repr_get_attr_int $I11, $P11, rx230_curclass, "$!pos"
    lt $I11, 0, rx230_fail755
    goto alt232_end762
  alt232_2765:
    nqp_rxmark rx230_bstack, alt232_3766, rx230_pos, 0
    repr_bind_attr_int rx230_cur, rx230_curclass, "$!pos", rx230_pos
    $P11 = rx230_cur."terminator"()
    repr_get_attr_int $I11, $P11, rx230_curclass, "$!pos"
    lt $I11, 0, rx230_fail755
    goto alt232_end762
  alt232_3766:
    lt rx230_pos, rx230_eos, rx230_fail755
  alt232_end762:
    rx230_cur."!cursor_pass"(rx230_pos, "eat_terminator", 'backtrack'=>1)
    .return (rx230_cur)
  rx230_restart754:
    repr_get_attr_obj rx230_cstack, rx230_cur, rx230_curclass, "$!cstack"
  rx230_fail755:
    unless rx230_bstack, rx230_done753
    pop $I19, rx230_bstack
    if_null rx230_cstack, rx230_cstack_done758
    unless rx230_cstack, rx230_cstack_done758
    dec $I19
    set $P11, rx230_cstack[$I19]
  rx230_cstack_done758:
    pop rx230_rep, rx230_bstack
    pop rx230_pos, rx230_bstack
    pop $I19, rx230_bstack
    lt rx230_pos, -1, rx230_done753
    lt rx230_pos, 0, rx230_fail755
    eq $I19, 0, rx230_fail755
    nqp_islist $I20, rx230_cstack
    unless $I20, rx230_jump756
    elements $I18, rx230_bstack
    le $I18, 0, rx230_cut757
    dec $I18
    set $I18, rx230_bstack[$I18]
  rx230_cut757:
    assign rx230_cstack, $I18
  rx230_jump756:
    jump $I19
  rx230_done753:
    rx230_cur."!cursor_fail"()
    .return (rx230_cur) 
.end
.HLL "nqp"
.namespace []
.sub "xblock" :subid("cuid_49_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 776
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx234_tgt
    .local int rx234_pos
    .local int rx234_off
    .local int rx234_eos
    .local int rx234_rep
    .local pmc rx234_cur
    .local pmc rx234_curclass
    .local pmc rx234_bstack
    .local pmc rx234_cstack
    (rx234_cur, rx234_tgt, rx234_pos, rx234_curclass, rx234_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx234_cur
    length rx234_eos, rx234_tgt
    eq $I19, 1, rx234_restart770
    gt rx234_pos, rx234_eos, rx234_fail771
    repr_get_attr_int $I11, self, rx234_curclass, "$!from"
    ne $I11, -1, rxscan235_done777
    goto rxscan235_scan776
  rxscan235_loop775:
    inc rx234_pos
    gt rx234_pos, rx234_eos, rx234_fail771
    repr_bind_attr_int rx234_cur, rx234_curclass, "$!from", rx234_pos
  rxscan235_scan776:
    nqp_rxmark rx234_bstack, rxscan235_loop775, rx234_pos, 0
  rxscan235_done777:
    repr_bind_attr_int rx234_cur, rx234_curclass, "$!pos", rx234_pos
    $P11 = rx234_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx234_curclass, "$!pos"
    lt $I11, 0, rx234_fail771
    nqp_rxmark rx234_bstack, rxsubrule236_pass778, -1, 0
  rxsubrule236_pass778:
    rx234_cstack = rx234_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx234_pos, $P11, rx234_curclass, "$!pos"
    repr_bind_attr_int rx234_cur, rx234_curclass, "$!pos", rx234_pos
    $P11 = rx234_cur."ws"()
    repr_get_attr_int $I11, $P11, rx234_curclass, "$!pos"
    lt $I11, 0, rx234_fail771
    repr_get_attr_int rx234_pos, $P11, rx234_curclass, "$!pos"
    repr_bind_attr_int rx234_cur, rx234_curclass, "$!pos", rx234_pos
    $P11 = rx234_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx234_curclass, "$!pos"
    lt $I11, 0, rx234_fail771
    nqp_rxmark rx234_bstack, rxsubrule238_pass780, -1, 0
  rxsubrule238_pass780:
    rx234_cstack = rx234_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx234_pos, $P11, rx234_curclass, "$!pos"
    rx234_cur."!cursor_pass"(rx234_pos, "xblock", 'backtrack'=>1)
    .return (rx234_cur)
  rx234_restart770:
    repr_get_attr_obj rx234_cstack, rx234_cur, rx234_curclass, "$!cstack"
  rx234_fail771:
    unless rx234_bstack, rx234_done769
    pop $I19, rx234_bstack
    if_null rx234_cstack, rx234_cstack_done774
    unless rx234_cstack, rx234_cstack_done774
    dec $I19
    set $P11, rx234_cstack[$I19]
  rx234_cstack_done774:
    pop rx234_rep, rx234_bstack
    pop rx234_pos, rx234_bstack
    pop $I19, rx234_bstack
    lt rx234_pos, -1, rx234_done769
    lt rx234_pos, 0, rx234_fail771
    eq $I19, 0, rx234_fail771
    nqp_islist $I20, rx234_cstack
    unless $I20, rx234_jump772
    elements $I18, rx234_bstack
    le $I18, 0, rx234_cut773
    dec $I18
    set $I18, rx234_bstack[$I18]
  rx234_cut773:
    assign rx234_cstack, $I18
  rx234_jump772:
    jump $I19
  rx234_done769:
    rx234_cur."!cursor_fail"()
    .return (rx234_cur) 
.end
.HLL "nqp"
.namespace []
.sub "pblock" :subid("cuid_50_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 780
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx239_tgt
    .local int rx239_pos
    .local int rx239_off
    .local int rx239_eos
    .local int rx239_rep
    .local pmc rx239_cur
    .local pmc rx239_curclass
    .local pmc rx239_bstack
    .local pmc rx239_cstack
    (rx239_cur, rx239_tgt, rx239_pos, rx239_curclass, rx239_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx239_cur
    length rx239_eos, rx239_tgt
    eq $I19, 1, rx239_restart783
    gt rx239_pos, rx239_eos, rx239_fail784
    repr_get_attr_int $I11, self, rx239_curclass, "$!from"
    ne $I11, -1, rxscan240_done790
    goto rxscan240_scan789
  rxscan240_loop788:
    inc rx239_pos
    gt rx239_pos, rx239_eos, rx239_fail784
    repr_bind_attr_int rx239_cur, rx239_curclass, "$!from", rx239_pos
  rxscan240_scan789:
    nqp_rxmark rx239_bstack, rxscan240_loop788, rx239_pos, 0
  rxscan240_done790:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt241_0792
    nqp_push_label $P11, alt241_1798
    nqp_push_label $P11, alt241_2801
    nqp_rxmark rx239_bstack, alt241_end791, -1, 0
    rx239_cur."!alt"(rx239_pos, "alt_nfa__10_1358115340.281", $P11)
    goto rx239_fail784
  alt241_0792:
    repr_bind_attr_int rx239_cur, rx239_curclass, "$!pos", rx239_pos
    $P11 = rx239_cur."lambda"()
    repr_get_attr_int $I11, $P11, rx239_curclass, "$!pos"
    lt $I11, 0, rx239_fail784
    repr_get_attr_int rx239_pos, $P11, rx239_curclass, "$!pos"
    repr_bind_attr_int rx239_cur, rx239_curclass, "$!pos", rx239_pos
    $P11 = rx239_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx239_curclass, "$!pos"
    lt $I11, 0, rx239_fail784
    repr_get_attr_int rx239_pos, $P11, rx239_curclass, "$!pos"
    repr_bind_attr_int rx239_cur, rx239_curclass, "$!pos", rx239_pos
    $P11 = rx239_cur."signature"()
    repr_get_attr_int $I11, $P11, rx239_curclass, "$!pos"
    lt $I11, 0, rx239_fail784
    nqp_rxmark rx239_bstack, rxsubrule244_pass795, -1, 0
  rxsubrule244_pass795:
    rx239_cstack = rx239_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx239_pos, $P11, rx239_curclass, "$!pos"
    repr_bind_attr_int rx239_cur, rx239_curclass, "$!pos", rx239_pos
    $P11 = rx239_cur."ws"()
    repr_get_attr_int $I11, $P11, rx239_curclass, "$!pos"
    lt $I11, 0, rx239_fail784
    repr_get_attr_int rx239_pos, $P11, rx239_curclass, "$!pos"
    repr_bind_attr_int rx239_cur, rx239_curclass, "$!pos", rx239_pos
    $P11 = rx239_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx239_curclass, "$!pos"
    lt $I11, 0, rx239_fail784
    nqp_rxmark rx239_bstack, rxsubrule246_pass797, -1, 0
  rxsubrule246_pass797:
    rx239_cstack = rx239_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx239_pos, $P11, rx239_curclass, "$!pos"
    goto alt241_end791
  alt241_1798:
    ge rx239_pos, rx239_eos, rx239_fail784
    substr $S11, rx239_tgt, rx239_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx239_fail784
    repr_bind_attr_int rx239_cur, rx239_curclass, "$!pos", rx239_pos
    $P11 = rx239_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx239_curclass, "$!pos"
    lt $I11, 0, rx239_fail784
    repr_get_attr_int rx239_pos, $P11, rx239_curclass, "$!pos"
    repr_bind_attr_int rx239_cur, rx239_curclass, "$!pos", rx239_pos
    $P11 = rx239_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx239_curclass, "$!pos"
    lt $I11, 0, rx239_fail784
    nqp_rxmark rx239_bstack, rxsubrule248_pass800, -1, 0
  rxsubrule248_pass800:
    rx239_cstack = rx239_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx239_pos, $P11, rx239_curclass, "$!pos"
    goto alt241_end791
  alt241_2801:
    repr_bind_attr_int rx239_cur, rx239_curclass, "$!pos", rx239_pos
    $P11 = rx239_cur."panic"("Missing block")
    repr_get_attr_int $I11, $P11, rx239_curclass, "$!pos"
    lt $I11, 0, rx239_fail784
    repr_get_attr_int rx239_pos, $P11, rx239_curclass, "$!pos"
    goto alt241_end791
  alt241_end791:
    rx239_cur."!cursor_pass"(rx239_pos, "pblock", 'backtrack'=>1)
    .return (rx239_cur)
  rx239_restart783:
    repr_get_attr_obj rx239_cstack, rx239_cur, rx239_curclass, "$!cstack"
  rx239_fail784:
    unless rx239_bstack, rx239_done782
    pop $I19, rx239_bstack
    if_null rx239_cstack, rx239_cstack_done787
    unless rx239_cstack, rx239_cstack_done787
    dec $I19
    set $P11, rx239_cstack[$I19]
  rx239_cstack_done787:
    pop rx239_rep, rx239_bstack
    pop rx239_pos, rx239_bstack
    pop $I19, rx239_bstack
    lt rx239_pos, -1, rx239_done782
    lt rx239_pos, 0, rx239_fail784
    eq $I19, 0, rx239_fail784
    nqp_islist $I20, rx239_cstack
    unless $I20, rx239_jump785
    elements $I18, rx239_bstack
    le $I18, 0, rx239_cut786
    dec $I18
    set $I18, rx239_bstack[$I18]
  rx239_cut786:
    assign rx239_cstack, $I18
  rx239_jump785:
    jump $I19
  rx239_done782:
    rx239_cur."!cursor_fail"()
    .return (rx239_cur) 
.end
.HLL "nqp"
.namespace []
.sub "lambda" :subid("cuid_51_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 791
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx250_tgt
    .local int rx250_pos
    .local int rx250_off
    .local int rx250_eos
    .local int rx250_rep
    .local pmc rx250_cur
    .local pmc rx250_curclass
    .local pmc rx250_bstack
    .local pmc rx250_cstack
    (rx250_cur, rx250_tgt, rx250_pos, rx250_curclass, rx250_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx250_cur
    length rx250_eos, rx250_tgt
    eq $I19, 1, rx250_restart805
    gt rx250_pos, rx250_eos, rx250_fail806
    repr_get_attr_int $I11, self, rx250_curclass, "$!from"
    ne $I11, -1, rxscan251_done812
    goto rxscan251_scan811
  rxscan251_loop810:
    inc rx250_pos
    gt rx250_pos, rx250_eos, rx250_fail806
    repr_bind_attr_int rx250_cur, rx250_curclass, "$!from", rx250_pos
  rxscan251_scan811:
    nqp_rxmark rx250_bstack, rxscan251_loop810, rx250_pos, 0
  rxscan251_done812:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt252_0814
    nqp_push_label $P11, alt252_1815
    nqp_rxmark rx250_bstack, alt252_end813, -1, 0
    rx250_cur."!alt"(rx250_pos, "alt_nfa__11_1358115340.287", $P11)
    goto rx250_fail806
  alt252_0814:
    add $I11, rx250_pos, 2
    gt $I11, rx250_eos, rx250_fail806
    substr $S10, rx250_tgt, rx250_pos, 2
    ne $S10, ucs4:"->", rx250_fail806
    add rx250_pos, 2
    goto alt252_end813
  alt252_1815:
    add $I11, rx250_pos, 3
    gt $I11, rx250_eos, rx250_fail806
    substr $S10, rx250_tgt, rx250_pos, 3
    ne $S10, ucs4:"<->", rx250_fail806
    add rx250_pos, 3
    goto alt252_end813
  alt252_end813:
    rx250_cur."!cursor_pass"(rx250_pos, "lambda", 'backtrack'=>1)
    .return (rx250_cur)
  rx250_restart805:
    repr_get_attr_obj rx250_cstack, rx250_cur, rx250_curclass, "$!cstack"
  rx250_fail806:
    unless rx250_bstack, rx250_done804
    pop $I19, rx250_bstack
    if_null rx250_cstack, rx250_cstack_done809
    unless rx250_cstack, rx250_cstack_done809
    dec $I19
    set $P11, rx250_cstack[$I19]
  rx250_cstack_done809:
    pop rx250_rep, rx250_bstack
    pop rx250_pos, rx250_bstack
    pop $I19, rx250_bstack
    lt rx250_pos, -1, rx250_done804
    lt rx250_pos, 0, rx250_fail806
    eq $I19, 0, rx250_fail806
    nqp_islist $I20, rx250_cstack
    unless $I20, rx250_jump807
    elements $I18, rx250_bstack
    le $I18, 0, rx250_cut808
    dec $I18
    set $I18, rx250_bstack[$I18]
  rx250_cut808:
    assign rx250_cstack, $I18
  rx250_jump807:
    jump $I19
  rx250_done804:
    rx250_cur."!cursor_fail"()
    .return (rx250_cur) 
.end
.HLL "nqp"
.namespace []
.sub "block" :subid("cuid_52_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 793
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx253_tgt
    .local int rx253_pos
    .local int rx253_off
    .local int rx253_eos
    .local int rx253_rep
    .local pmc rx253_cur
    .local pmc rx253_curclass
    .local pmc rx253_bstack
    .local pmc rx253_cstack
    (rx253_cur, rx253_tgt, rx253_pos, rx253_curclass, rx253_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx253_cur
    length rx253_eos, rx253_tgt
    eq $I19, 1, rx253_restart818
    gt rx253_pos, rx253_eos, rx253_fail819
    repr_get_attr_int $I11, self, rx253_curclass, "$!from"
    ne $I11, -1, rxscan254_done825
    goto rxscan254_scan824
  rxscan254_loop823:
    inc rx253_pos
    gt rx253_pos, rx253_eos, rx253_fail819
    repr_bind_attr_int rx253_cur, rx253_curclass, "$!from", rx253_pos
  rxscan254_scan824:
    nqp_rxmark rx253_bstack, rxscan254_loop823, rx253_pos, 0
  rxscan254_done825:
  alt255_0827:
    nqp_rxmark rx253_bstack, alt255_1828, rx253_pos, 0
    ge rx253_pos, rx253_eos, rx253_fail819
    substr $S11, rx253_tgt, rx253_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx253_fail819
    goto alt255_end826
  alt255_1828:
    repr_bind_attr_int rx253_cur, rx253_curclass, "$!pos", rx253_pos
    $P11 = rx253_cur."panic"("Missing block")
    repr_get_attr_int $I11, $P11, rx253_curclass, "$!pos"
    lt $I11, 0, rx253_fail819
    repr_get_attr_int rx253_pos, $P11, rx253_curclass, "$!pos"
  alt255_end826:
    repr_bind_attr_int rx253_cur, rx253_curclass, "$!pos", rx253_pos
    $P11 = rx253_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx253_curclass, "$!pos"
    lt $I11, 0, rx253_fail819
    repr_get_attr_int rx253_pos, $P11, rx253_curclass, "$!pos"
    repr_bind_attr_int rx253_cur, rx253_curclass, "$!pos", rx253_pos
    $P11 = rx253_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx253_curclass, "$!pos"
    lt $I11, 0, rx253_fail819
    nqp_rxmark rx253_bstack, rxsubrule258_pass831, -1, 0
  rxsubrule258_pass831:
    rx253_cstack = rx253_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx253_pos, $P11, rx253_curclass, "$!pos"
    rx253_cur."!cursor_pass"(rx253_pos, "block", 'backtrack'=>1)
    .return (rx253_cur)
  rx253_restart818:
    repr_get_attr_obj rx253_cstack, rx253_cur, rx253_curclass, "$!cstack"
  rx253_fail819:
    unless rx253_bstack, rx253_done817
    pop $I19, rx253_bstack
    if_null rx253_cstack, rx253_cstack_done822
    unless rx253_cstack, rx253_cstack_done822
    dec $I19
    set $P11, rx253_cstack[$I19]
  rx253_cstack_done822:
    pop rx253_rep, rx253_bstack
    pop rx253_pos, rx253_bstack
    pop $I19, rx253_bstack
    lt rx253_pos, -1, rx253_done817
    lt rx253_pos, 0, rx253_fail819
    eq $I19, 0, rx253_fail819
    nqp_islist $I20, rx253_cstack
    unless $I20, rx253_jump820
    elements $I18, rx253_bstack
    le $I18, 0, rx253_cut821
    dec $I18
    set $I18, rx253_bstack[$I18]
  rx253_cut821:
    assign rx253_cstack, $I18
  rx253_jump820:
    jump $I19
  rx253_done817:
    rx253_cur."!cursor_fail"()
    .return (rx253_cur) 
.end
.HLL "nqp"
.namespace []
.sub "blockoid" :subid("cuid_53_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 799
    .param pmc _lex_param_0 
    .lex "%*HANDLERS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    new $P5001, 'Hash'
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx259_tgt
    .local int rx259_pos
    .local int rx259_off
    .local int rx259_eos
    .local int rx259_rep
    .local pmc rx259_cur
    .local pmc rx259_curclass
    .local pmc rx259_bstack
    .local pmc rx259_cstack
    (rx259_cur, rx259_tgt, rx259_pos, rx259_curclass, rx259_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx259_cur
    length rx259_eos, rx259_tgt
    eq $I19, 1, rx259_restart834
    gt rx259_pos, rx259_eos, rx259_fail835
    repr_get_attr_int $I11, self, rx259_curclass, "$!from"
    ne $I11, -1, rxscan260_done841
    goto rxscan260_scan840
  rxscan260_loop839:
    inc rx259_pos
    gt rx259_pos, rx259_eos, rx259_fail835
    repr_bind_attr_int rx259_cur, rx259_curclass, "$!from", rx259_pos
  rxscan260_scan840:
    nqp_rxmark rx259_bstack, rxscan260_loop839, rx259_pos, 0
  rxscan260_done841:
    repr_bind_attr_int rx259_cur, rx259_curclass, "$!pos", rx259_pos
    store_lex unicode:"$\x{a2}", rx259_cur
    unless_null $P101, fallback842
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%HANDLERS"]
    unless_null $P5002, fallback843
    nqp_get_sc_object $P5006, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%HANDLERS"], $P5007
    set $P5002, $P5007
  fallback843:
    unless_null $P5002, vivi_261844
    die "Contextual %*HANDLERS not found"
    box $P5008, "Contextual %*HANDLERS not found"
    set $P5002, $P5008
  vivi_261844:
    set $P101, $P5002
  fallback842:
    repr_bind_attr_int rx259_cur, rx259_curclass, "$!pos", rx259_pos
    $P11 = rx259_cur."finishpad"()
    repr_get_attr_int $I11, $P11, rx259_curclass, "$!pos"
    lt $I11, 0, rx259_fail835
    repr_get_attr_int rx259_pos, $P11, rx259_curclass, "$!pos"
  alt263_0847:
    nqp_rxmark rx259_bstack, alt263_1849, rx259_pos, 0
    add $I11, rx259_pos, 14
    gt $I11, rx259_eos, rx259_fail835
    substr $S10, rx259_tgt, rx259_pos, 14
    ne $S10, ucs4:"{YOU_ARE_HERE}", rx259_fail835
    add rx259_pos, 14
    repr_bind_attr_int rx259_cur, rx259_curclass, "$!pos", rx259_pos
    $P11 = rx259_cur."you_are_here"()
    repr_get_attr_int $I11, $P11, rx259_curclass, "$!pos"
    lt $I11, 0, rx259_fail835
    nqp_rxmark rx259_bstack, rxsubrule264_pass848, -1, 0
  rxsubrule264_pass848:
    rx259_cstack = rx259_cur."!cursor_capture"($P11, "you_are_here")
    repr_get_attr_int rx259_pos, $P11, rx259_curclass, "$!pos"
    goto alt263_end846
  alt263_1849:
    add $I11, rx259_pos, 1
    gt $I11, rx259_eos, rx259_fail835
    substr $S10, rx259_tgt, rx259_pos, 1
    ne $S10, ucs4:"{", rx259_fail835
    add rx259_pos, 1
    repr_bind_attr_int rx259_cur, rx259_curclass, "$!pos", rx259_pos
    $P11 = rx259_cur."statementlist"()
    repr_get_attr_int $I11, $P11, rx259_curclass, "$!pos"
    lt $I11, 0, rx259_fail835
    nqp_rxmark rx259_bstack, rxsubrule265_pass850, -1, 0
  rxsubrule265_pass850:
    rx259_cstack = rx259_cur."!cursor_capture"($P11, "statementlist")
    repr_get_attr_int rx259_pos, $P11, rx259_curclass, "$!pos"
  alt266_0852:
    nqp_rxmark rx259_bstack, alt266_1853, rx259_pos, 0
    add $I11, rx259_pos, 1
    gt $I11, rx259_eos, rx259_fail835
    substr $S10, rx259_tgt, rx259_pos, 1
    ne $S10, ucs4:"}", rx259_fail835
    add rx259_pos, 1
    goto alt266_end851
  alt266_1853:
    repr_bind_attr_int rx259_cur, rx259_curclass, "$!pos", rx259_pos
    $P11 = rx259_cur."FAILGOAL"("'}'")
    repr_get_attr_int $I11, $P11, rx259_curclass, "$!pos"
    lt $I11, 0, rx259_fail835
    goto rxsubrule267_pass854
  rxsubrule267_back855:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx259_curclass, "$!pos"
    lt $I11, 0, rx259_fail835
  rxsubrule267_pass854:
    rx259_cstack = rx259_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule267_back855
    push rx259_bstack, $I11
    push rx259_bstack, 0
    push rx259_bstack, rx259_pos
    elements $I11, rx259_cstack
    push rx259_bstack, $I11
    repr_get_attr_int rx259_pos, $P11, rx259_curclass, "$!pos"
  alt266_end851:
  alt263_end846:
    repr_bind_attr_int rx259_cur, rx259_curclass, "$!pos", rx259_pos
    $P11 = rx259_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx259_curclass, "$!pos"
    lt $I11, 0, rx259_fail835
    rx259_cur."!cursor_pass"(rx259_pos, "blockoid", 'backtrack'=>1)
    .return (rx259_cur)
  rx259_restart834:
    repr_get_attr_obj rx259_cstack, rx259_cur, rx259_curclass, "$!cstack"
  rx259_fail835:
    unless rx259_bstack, rx259_done833
    pop $I19, rx259_bstack
    if_null rx259_cstack, rx259_cstack_done838
    unless rx259_cstack, rx259_cstack_done838
    dec $I19
    set $P11, rx259_cstack[$I19]
  rx259_cstack_done838:
    pop rx259_rep, rx259_bstack
    pop rx259_pos, rx259_bstack
    pop $I19, rx259_bstack
    lt rx259_pos, -1, rx259_done833
    lt rx259_pos, 0, rx259_fail835
    eq $I19, 0, rx259_fail835
    nqp_islist $I20, rx259_cstack
    unless $I20, rx259_jump836
    elements $I18, rx259_bstack
    le $I18, 0, rx259_cut837
    dec $I18
    set $I18, rx259_bstack[$I18]
  rx259_cut837:
    assign rx259_cstack, $I18
  rx259_jump836:
    jump $I19
  rx259_done833:
    rx259_cur."!cursor_fail"()
    .return (rx259_cur) 
.end
.HLL "nqp"
.namespace []
.sub "newpad" :subid("cuid_54_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 809
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx268_tgt
    .local int rx268_pos
    .local int rx268_off
    .local int rx268_eos
    .local int rx268_rep
    .local pmc rx268_cur
    .local pmc rx268_curclass
    .local pmc rx268_bstack
    .local pmc rx268_cstack
    (rx268_cur, rx268_tgt, rx268_pos, rx268_curclass, rx268_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx268_cur
    length rx268_eos, rx268_tgt
    eq $I19, 1, rx268_restart858
    gt rx268_pos, rx268_eos, rx268_fail859
    repr_get_attr_int $I11, self, rx268_curclass, "$!from"
    ne $I11, -1, rxscan269_done865
    goto rxscan269_scan864
  rxscan269_loop863:
    inc rx268_pos
    gt rx268_pos, rx268_eos, rx268_fail859
    repr_bind_attr_int rx268_cur, rx268_curclass, "$!from", rx268_pos
  rxscan269_scan864:
    nqp_rxmark rx268_bstack, rxscan269_loop863, rx268_pos, 0
  rxscan269_done865:
    rx268_cur."!cursor_pass"(rx268_pos, "newpad", 'backtrack'=>1)
    .return (rx268_cur)
  rx268_restart858:
    repr_get_attr_obj rx268_cstack, rx268_cur, rx268_curclass, "$!cstack"
  rx268_fail859:
    unless rx268_bstack, rx268_done857
    pop $I19, rx268_bstack
    if_null rx268_cstack, rx268_cstack_done862
    unless rx268_cstack, rx268_cstack_done862
    dec $I19
    set $P11, rx268_cstack[$I19]
  rx268_cstack_done862:
    pop rx268_rep, rx268_bstack
    pop rx268_pos, rx268_bstack
    pop $I19, rx268_bstack
    lt rx268_pos, -1, rx268_done857
    lt rx268_pos, 0, rx268_fail859
    eq $I19, 0, rx268_fail859
    nqp_islist $I20, rx268_cstack
    unless $I20, rx268_jump860
    elements $I18, rx268_bstack
    le $I18, 0, rx268_cut861
    dec $I18
    set $I18, rx268_bstack[$I18]
  rx268_cut861:
    assign rx268_cstack, $I18
  rx268_jump860:
    jump $I19
  rx268_done857:
    rx268_cur."!cursor_fail"()
    .return (rx268_cur) 
.end
.HLL "nqp"
.namespace []
.sub "outerctx" :subid("cuid_55_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 810
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx271_tgt
    .local int rx271_pos
    .local int rx271_off
    .local int rx271_eos
    .local int rx271_rep
    .local pmc rx271_cur
    .local pmc rx271_curclass
    .local pmc rx271_bstack
    .local pmc rx271_cstack
    (rx271_cur, rx271_tgt, rx271_pos, rx271_curclass, rx271_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx271_cur
    length rx271_eos, rx271_tgt
    eq $I19, 1, rx271_restart869
    gt rx271_pos, rx271_eos, rx271_fail870
    repr_get_attr_int $I11, self, rx271_curclass, "$!from"
    ne $I11, -1, rxscan272_done876
    goto rxscan272_scan875
  rxscan272_loop874:
    inc rx271_pos
    gt rx271_pos, rx271_eos, rx271_fail870
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!from", rx271_pos
  rxscan272_scan875:
    nqp_rxmark rx271_bstack, rxscan272_loop874, rx271_pos, 0
  rxscan272_done876:
    rx271_cur."!cursor_pass"(rx271_pos, "outerctx", 'backtrack'=>1)
    .return (rx271_cur)
  rx271_restart869:
    repr_get_attr_obj rx271_cstack, rx271_cur, rx271_curclass, "$!cstack"
  rx271_fail870:
    unless rx271_bstack, rx271_done868
    pop $I19, rx271_bstack
    if_null rx271_cstack, rx271_cstack_done873
    unless rx271_cstack, rx271_cstack_done873
    dec $I19
    set $P11, rx271_cstack[$I19]
  rx271_cstack_done873:
    pop rx271_rep, rx271_bstack
    pop rx271_pos, rx271_bstack
    pop $I19, rx271_bstack
    lt rx271_pos, -1, rx271_done868
    lt rx271_pos, 0, rx271_fail870
    eq $I19, 0, rx271_fail870
    nqp_islist $I20, rx271_cstack
    unless $I20, rx271_jump871
    elements $I18, rx271_bstack
    le $I18, 0, rx271_cut872
    dec $I18
    set $I18, rx271_bstack[$I18]
  rx271_cut872:
    assign rx271_cstack, $I18
  rx271_jump871:
    jump $I19
  rx271_done868:
    rx271_cur."!cursor_fail"()
    .return (rx271_cur) 
.end
.HLL "nqp"
.namespace []
.sub "finishpad" :subid("cuid_56_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 811
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx274_tgt
    .local int rx274_pos
    .local int rx274_off
    .local int rx274_eos
    .local int rx274_rep
    .local pmc rx274_cur
    .local pmc rx274_curclass
    .local pmc rx274_bstack
    .local pmc rx274_cstack
    (rx274_cur, rx274_tgt, rx274_pos, rx274_curclass, rx274_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx274_cur
    length rx274_eos, rx274_tgt
    eq $I19, 1, rx274_restart880
    gt rx274_pos, rx274_eos, rx274_fail881
    repr_get_attr_int $I11, self, rx274_curclass, "$!from"
    ne $I11, -1, rxscan275_done887
    goto rxscan275_scan886
  rxscan275_loop885:
    inc rx274_pos
    gt rx274_pos, rx274_eos, rx274_fail881
    repr_bind_attr_int rx274_cur, rx274_curclass, "$!from", rx274_pos
  rxscan275_scan886:
    nqp_rxmark rx274_bstack, rxscan275_loop885, rx274_pos, 0
  rxscan275_done887:
    rx274_cur."!cursor_pass"(rx274_pos, "finishpad", 'backtrack'=>1)
    .return (rx274_cur)
  rx274_restart880:
    repr_get_attr_obj rx274_cstack, rx274_cur, rx274_curclass, "$!cstack"
  rx274_fail881:
    unless rx274_bstack, rx274_done879
    pop $I19, rx274_bstack
    if_null rx274_cstack, rx274_cstack_done884
    unless rx274_cstack, rx274_cstack_done884
    dec $I19
    set $P11, rx274_cstack[$I19]
  rx274_cstack_done884:
    pop rx274_rep, rx274_bstack
    pop rx274_pos, rx274_bstack
    pop $I19, rx274_bstack
    lt rx274_pos, -1, rx274_done879
    lt rx274_pos, 0, rx274_fail881
    eq $I19, 0, rx274_fail881
    nqp_islist $I20, rx274_cstack
    unless $I20, rx274_jump882
    elements $I18, rx274_bstack
    le $I18, 0, rx274_cut883
    dec $I18
    set $I18, rx274_bstack[$I18]
  rx274_cut883:
    assign rx274_cstack, $I18
  rx274_jump882:
    jump $I19
  rx274_done879:
    rx274_cur."!cursor_fail"()
    .return (rx274_cur) 
.end
.HLL "nqp"
.namespace []
.sub "you_are_here" :subid("cuid_57_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 812
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx277_tgt
    .local int rx277_pos
    .local int rx277_off
    .local int rx277_eos
    .local int rx277_rep
    .local pmc rx277_cur
    .local pmc rx277_curclass
    .local pmc rx277_bstack
    .local pmc rx277_cstack
    (rx277_cur, rx277_tgt, rx277_pos, rx277_curclass, rx277_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx277_cur
    length rx277_eos, rx277_tgt
    eq $I19, 1, rx277_restart891
    gt rx277_pos, rx277_eos, rx277_fail892
    repr_get_attr_int $I11, self, rx277_curclass, "$!from"
    ne $I11, -1, rxscan278_done898
    goto rxscan278_scan897
  rxscan278_loop896:
    inc rx277_pos
    gt rx277_pos, rx277_eos, rx277_fail892
    repr_bind_attr_int rx277_cur, rx277_curclass, "$!from", rx277_pos
  rxscan278_scan897:
    nqp_rxmark rx277_bstack, rxscan278_loop896, rx277_pos, 0
  rxscan278_done898:
    rx277_cur."!cursor_pass"(rx277_pos, "you_are_here", 'backtrack'=>1)
    .return (rx277_cur)
  rx277_restart891:
    repr_get_attr_obj rx277_cstack, rx277_cur, rx277_curclass, "$!cstack"
  rx277_fail892:
    unless rx277_bstack, rx277_done890
    pop $I19, rx277_bstack
    if_null rx277_cstack, rx277_cstack_done895
    unless rx277_cstack, rx277_cstack_done895
    dec $I19
    set $P11, rx277_cstack[$I19]
  rx277_cstack_done895:
    pop rx277_rep, rx277_bstack
    pop rx277_pos, rx277_bstack
    pop $I19, rx277_bstack
    lt rx277_pos, -1, rx277_done890
    lt rx277_pos, 0, rx277_fail892
    eq $I19, 0, rx277_fail892
    nqp_islist $I20, rx277_cstack
    unless $I20, rx277_jump893
    elements $I18, rx277_bstack
    le $I18, 0, rx277_cut894
    dec $I18
    set $I18, rx277_bstack[$I18]
  rx277_cut894:
    assign rx277_cstack, $I18
  rx277_jump893:
    jump $I19
  rx277_done890:
    rx277_cur."!cursor_fail"()
    .return (rx277_cur) 
.end
.HLL "nqp"
.namespace []
.sub "terminator" :subid("cuid_58_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 814
    .param pmc self 
    $P5001 = self."!protoregex"("terminator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "terminator:sym<;>" :subid("cuid_59_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 816
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx280_tgt
    .local int rx280_pos
    .local int rx280_off
    .local int rx280_eos
    .local int rx280_rep
    .local pmc rx280_cur
    .local pmc rx280_curclass
    .local pmc rx280_bstack
    .local pmc rx280_cstack
    (rx280_cur, rx280_tgt, rx280_pos, rx280_curclass, rx280_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx280_cur
    length rx280_eos, rx280_tgt
    eq $I19, 1, rx280_restart902
    gt rx280_pos, rx280_eos, rx280_fail903
    repr_get_attr_int $I11, self, rx280_curclass, "$!from"
    ne $I11, -1, rxscan281_done909
    goto rxscan281_scan908
  rxscan281_loop907:
    inc rx280_pos
    gt rx280_pos, rx280_eos, rx280_fail903
    repr_bind_attr_int rx280_cur, rx280_curclass, "$!from", rx280_pos
  rxscan281_scan908:
    nqp_rxmark rx280_bstack, rxscan281_loop907, rx280_pos, 0
  rxscan281_done909:
    ge rx280_pos, rx280_eos, rx280_fail903
    substr $S11, rx280_tgt, rx280_pos, 1
    index $I11, ucs4:";", $S11
    lt $I11, 0, rx280_fail903
    rx280_cur."!cursor_pass"(rx280_pos, "terminator:sym<;>", 'backtrack'=>1)
    .return (rx280_cur)
  rx280_restart902:
    repr_get_attr_obj rx280_cstack, rx280_cur, rx280_curclass, "$!cstack"
  rx280_fail903:
    unless rx280_bstack, rx280_done901
    pop $I19, rx280_bstack
    if_null rx280_cstack, rx280_cstack_done906
    unless rx280_cstack, rx280_cstack_done906
    dec $I19
    set $P11, rx280_cstack[$I19]
  rx280_cstack_done906:
    pop rx280_rep, rx280_bstack
    pop rx280_pos, rx280_bstack
    pop $I19, rx280_bstack
    lt rx280_pos, -1, rx280_done901
    lt rx280_pos, 0, rx280_fail903
    eq $I19, 0, rx280_fail903
    nqp_islist $I20, rx280_cstack
    unless $I20, rx280_jump904
    elements $I18, rx280_bstack
    le $I18, 0, rx280_cut905
    dec $I18
    set $I18, rx280_bstack[$I18]
  rx280_cut905:
    assign rx280_cstack, $I18
  rx280_jump904:
    jump $I19
  rx280_done901:
    rx280_cur."!cursor_fail"()
    .return (rx280_cur) 
.end
.HLL "nqp"
.namespace []
.sub "terminator:sym<}>" :subid("cuid_60_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 817
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx282_tgt
    .local int rx282_pos
    .local int rx282_off
    .local int rx282_eos
    .local int rx282_rep
    .local pmc rx282_cur
    .local pmc rx282_curclass
    .local pmc rx282_bstack
    .local pmc rx282_cstack
    (rx282_cur, rx282_tgt, rx282_pos, rx282_curclass, rx282_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx282_cur
    length rx282_eos, rx282_tgt
    eq $I19, 1, rx282_restart912
    gt rx282_pos, rx282_eos, rx282_fail913
    repr_get_attr_int $I11, self, rx282_curclass, "$!from"
    ne $I11, -1, rxscan283_done919
    goto rxscan283_scan918
  rxscan283_loop917:
    inc rx282_pos
    gt rx282_pos, rx282_eos, rx282_fail913
    repr_bind_attr_int rx282_cur, rx282_curclass, "$!from", rx282_pos
  rxscan283_scan918:
    nqp_rxmark rx282_bstack, rxscan283_loop917, rx282_pos, 0
  rxscan283_done919:
    ge rx282_pos, rx282_eos, rx282_fail913
    substr $S11, rx282_tgt, rx282_pos, 1
    index $I11, ucs4:"}", $S11
    lt $I11, 0, rx282_fail913
    rx282_cur."!cursor_pass"(rx282_pos, "terminator:sym<}>", 'backtrack'=>1)
    .return (rx282_cur)
  rx282_restart912:
    repr_get_attr_obj rx282_cstack, rx282_cur, rx282_curclass, "$!cstack"
  rx282_fail913:
    unless rx282_bstack, rx282_done911
    pop $I19, rx282_bstack
    if_null rx282_cstack, rx282_cstack_done916
    unless rx282_cstack, rx282_cstack_done916
    dec $I19
    set $P11, rx282_cstack[$I19]
  rx282_cstack_done916:
    pop rx282_rep, rx282_bstack
    pop rx282_pos, rx282_bstack
    pop $I19, rx282_bstack
    lt rx282_pos, -1, rx282_done911
    lt rx282_pos, 0, rx282_fail913
    eq $I19, 0, rx282_fail913
    nqp_islist $I20, rx282_cstack
    unless $I20, rx282_jump914
    elements $I18, rx282_bstack
    le $I18, 0, rx282_cut915
    dec $I18
    set $I18, rx282_bstack[$I18]
  rx282_cut915:
    assign rx282_cstack, $I18
  rx282_jump914:
    jump $I19
  rx282_done911:
    rx282_cur."!cursor_fail"()
    .return (rx282_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control" :subid("cuid_61_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 821
    .param pmc self 
    $P5001 = self."!protoregex"("statement_control")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<use>" :subid("cuid_62_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 823
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx284_tgt
    .local int rx284_pos
    .local int rx284_off
    .local int rx284_eos
    .local int rx284_rep
    .local pmc rx284_cur
    .local pmc rx284_curclass
    .local pmc rx284_bstack
    .local pmc rx284_cstack
    (rx284_cur, rx284_tgt, rx284_pos, rx284_curclass, rx284_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx284_cur
    length rx284_eos, rx284_tgt
    eq $I19, 1, rx284_restart922
    gt rx284_pos, rx284_eos, rx284_fail923
    repr_get_attr_int $I11, self, rx284_curclass, "$!from"
    ne $I11, -1, rxscan285_done929
    goto rxscan285_scan928
  rxscan285_loop927:
    inc rx284_pos
    gt rx284_pos, rx284_eos, rx284_fail923
    repr_bind_attr_int rx284_cur, rx284_curclass, "$!from", rx284_pos
  rxscan285_scan928:
    nqp_rxmark rx284_bstack, rxscan285_loop927, rx284_pos, 0
  rxscan285_done929:
    nqp_rxmark rx284_bstack, rxcap286_fail931, rx284_pos, 0
    add $I11, rx284_pos, 3
    gt $I11, rx284_eos, rx284_fail923
    substr $S10, rx284_tgt, rx284_pos, 3
    ne $S10, ucs4:"use", rx284_fail923
    add rx284_pos, 3
    nqp_rxpeek $I19, rx284_bstack, rxcap286_fail931
    inc $I19
    set $I11, rx284_bstack[$I19]
    repr_bind_attr_int rx284_cur, rx284_curclass, "$!pos", rx284_pos
    $P11 = rx284_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx284_pos)
    rx284_cstack = rx284_cur."!cursor_capture"($P11, "sym")
    goto rxcap286_done930
  rxcap286_fail931:
    goto rx284_fail923
  rxcap286_done930:
    ge rx284_pos, rx284_eos, rx284_fail923
    is_cclass $I11, .CCLASS_WHITESPACE, rx284_tgt, rx284_pos
    unless $I11, rx284_fail923
    add rx284_pos, 1
    repr_bind_attr_int rx284_cur, rx284_curclass, "$!pos", rx284_pos
    $P11 = rx284_cur."ws"()
    repr_get_attr_int $I11, $P11, rx284_curclass, "$!pos"
    lt $I11, 0, rx284_fail923
    repr_get_attr_int rx284_pos, $P11, rx284_curclass, "$!pos"
    repr_bind_attr_int rx284_cur, rx284_curclass, "$!pos", rx284_pos
    $P11 = rx284_cur."name"()
    repr_get_attr_int $I11, $P11, rx284_curclass, "$!pos"
    lt $I11, 0, rx284_fail923
    nqp_rxmark rx284_bstack, rxsubrule288_pass933, -1, 0
  rxsubrule288_pass933:
    rx284_cstack = rx284_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx284_pos, $P11, rx284_curclass, "$!pos"
    repr_bind_attr_int rx284_cur, rx284_curclass, "$!pos", rx284_pos
    $P11 = rx284_cur."ws"()
    repr_get_attr_int $I11, $P11, rx284_curclass, "$!pos"
    lt $I11, 0, rx284_fail923
    repr_get_attr_int rx284_pos, $P11, rx284_curclass, "$!pos"
    rx284_cur."!cursor_pass"(rx284_pos, "statement_control:sym<use>", 'backtrack'=>1)
    .return (rx284_cur)
  rx284_restart922:
    repr_get_attr_obj rx284_cstack, rx284_cur, rx284_curclass, "$!cstack"
  rx284_fail923:
    unless rx284_bstack, rx284_done921
    pop $I19, rx284_bstack
    if_null rx284_cstack, rx284_cstack_done926
    unless rx284_cstack, rx284_cstack_done926
    dec $I19
    set $P11, rx284_cstack[$I19]
  rx284_cstack_done926:
    pop rx284_rep, rx284_bstack
    pop rx284_pos, rx284_bstack
    pop $I19, rx284_bstack
    lt rx284_pos, -1, rx284_done921
    lt rx284_pos, 0, rx284_fail923
    eq $I19, 0, rx284_fail923
    nqp_islist $I20, rx284_cstack
    unless $I20, rx284_jump924
    elements $I18, rx284_bstack
    le $I18, 0, rx284_cut925
    dec $I18
    set $I18, rx284_bstack[$I18]
  rx284_cut925:
    assign rx284_cstack, $I18
  rx284_jump924:
    jump $I19
  rx284_done921:
    rx284_cur."!cursor_fail"()
    .return (rx284_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<if>" :subid("cuid_63_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 827
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx290_tgt
    .local int rx290_pos
    .local int rx290_off
    .local int rx290_eos
    .local int rx290_rep
    .local pmc rx290_cur
    .local pmc rx290_curclass
    .local pmc rx290_bstack
    .local pmc rx290_cstack
    (rx290_cur, rx290_tgt, rx290_pos, rx290_curclass, rx290_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx290_cur
    length rx290_eos, rx290_tgt
    eq $I19, 1, rx290_restart937
    gt rx290_pos, rx290_eos, rx290_fail938
    repr_get_attr_int $I11, self, rx290_curclass, "$!from"
    ne $I11, -1, rxscan291_done944
    goto rxscan291_scan943
  rxscan291_loop942:
    inc rx290_pos
    gt rx290_pos, rx290_eos, rx290_fail938
    repr_bind_attr_int rx290_cur, rx290_curclass, "$!from", rx290_pos
  rxscan291_scan943:
    nqp_rxmark rx290_bstack, rxscan291_loop942, rx290_pos, 0
  rxscan291_done944:
    nqp_rxmark rx290_bstack, rxcap292_fail946, rx290_pos, 0
    add $I11, rx290_pos, 2
    gt $I11, rx290_eos, rx290_fail938
    substr $S10, rx290_tgt, rx290_pos, 2
    ne $S10, ucs4:"if", rx290_fail938
    add rx290_pos, 2
    nqp_rxpeek $I19, rx290_bstack, rxcap292_fail946
    inc $I19
    set $I11, rx290_bstack[$I19]
    repr_bind_attr_int rx290_cur, rx290_curclass, "$!pos", rx290_pos
    $P11 = rx290_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx290_pos)
    rx290_cstack = rx290_cur."!cursor_capture"($P11, "sym")
    goto rxcap292_done945
  rxcap292_fail946:
    goto rx290_fail938
  rxcap292_done945:
    ge rx290_pos, rx290_eos, rx290_fail938
    is_cclass $I11, .CCLASS_WHITESPACE, rx290_tgt, rx290_pos
    unless $I11, rx290_fail938
    add rx290_pos, 1
    repr_bind_attr_int rx290_cur, rx290_curclass, "$!pos", rx290_pos
    $P11 = rx290_cur."ws"()
    repr_get_attr_int $I11, $P11, rx290_curclass, "$!pos"
    lt $I11, 0, rx290_fail938
    repr_get_attr_int rx290_pos, $P11, rx290_curclass, "$!pos"
    repr_bind_attr_int rx290_cur, rx290_curclass, "$!pos", rx290_pos
    $P11 = rx290_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx290_curclass, "$!pos"
    lt $I11, 0, rx290_fail938
    nqp_rxmark rx290_bstack, rxsubrule294_pass948, -1, 0
  rxsubrule294_pass948:
    rx290_cstack = rx290_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx290_pos, $P11, rx290_curclass, "$!pos"
    repr_bind_attr_int rx290_cur, rx290_curclass, "$!pos", rx290_pos
    $P11 = rx290_cur."ws"()
    repr_get_attr_int $I11, $P11, rx290_curclass, "$!pos"
    lt $I11, 0, rx290_fail938
    repr_get_attr_int rx290_pos, $P11, rx290_curclass, "$!pos"
    nqp_rxmark rx290_bstack, rxquantr296_done951, rx290_pos, 0
  rxquantr296_loop950:
    repr_bind_attr_int rx290_cur, rx290_curclass, "$!pos", rx290_pos
    $P11 = rx290_cur."ws"()
    repr_get_attr_int $I11, $P11, rx290_curclass, "$!pos"
    lt $I11, 0, rx290_fail938
    repr_get_attr_int rx290_pos, $P11, rx290_curclass, "$!pos"
    add $I11, rx290_pos, 5
    gt $I11, rx290_eos, rx290_fail938
    substr $S10, rx290_tgt, rx290_pos, 5
    ne $S10, ucs4:"elsif", rx290_fail938
    add rx290_pos, 5
    ge rx290_pos, rx290_eos, rx290_fail938
    is_cclass $I11, .CCLASS_WHITESPACE, rx290_tgt, rx290_pos
    unless $I11, rx290_fail938
    add rx290_pos, 1
    repr_bind_attr_int rx290_cur, rx290_curclass, "$!pos", rx290_pos
    $P11 = rx290_cur."ws"()
    repr_get_attr_int $I11, $P11, rx290_curclass, "$!pos"
    lt $I11, 0, rx290_fail938
    repr_get_attr_int rx290_pos, $P11, rx290_curclass, "$!pos"
    repr_bind_attr_int rx290_cur, rx290_curclass, "$!pos", rx290_pos
    $P11 = rx290_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx290_curclass, "$!pos"
    lt $I11, 0, rx290_fail938
    nqp_rxmark rx290_bstack, rxsubrule299_pass954, -1, 0
  rxsubrule299_pass954:
    rx290_cstack = rx290_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx290_pos, $P11, rx290_curclass, "$!pos"
    repr_bind_attr_int rx290_cur, rx290_curclass, "$!pos", rx290_pos
    $P11 = rx290_cur."ws"()
    repr_get_attr_int $I11, $P11, rx290_curclass, "$!pos"
    lt $I11, 0, rx290_fail938
    repr_get_attr_int rx290_pos, $P11, rx290_curclass, "$!pos"
    nqp_rxpeek $I19, rx290_bstack, rxquantr296_done951
    inc $I19
    inc $I19
    set rx290_rep, rx290_bstack[$I19]
    nqp_rxcommit rx290_bstack, rxquantr296_done951
    inc rx290_rep
    nqp_rxmark rx290_bstack, rxquantr296_done951, rx290_pos, rx290_rep
    goto rxquantr296_loop950
  rxquantr296_done951:
    repr_bind_attr_int rx290_cur, rx290_curclass, "$!pos", rx290_pos
    $P11 = rx290_cur."ws"()
    repr_get_attr_int $I11, $P11, rx290_curclass, "$!pos"
    lt $I11, 0, rx290_fail938
    repr_get_attr_int rx290_pos, $P11, rx290_curclass, "$!pos"
    nqp_rxmark rx290_bstack, rxquantr302_done958, rx290_pos, 0
  rxquantr302_loop957:
    repr_bind_attr_int rx290_cur, rx290_curclass, "$!pos", rx290_pos
    $P11 = rx290_cur."ws"()
    repr_get_attr_int $I11, $P11, rx290_curclass, "$!pos"
    lt $I11, 0, rx290_fail938
    repr_get_attr_int rx290_pos, $P11, rx290_curclass, "$!pos"
    add $I11, rx290_pos, 4
    gt $I11, rx290_eos, rx290_fail938
    substr $S10, rx290_tgt, rx290_pos, 4
    ne $S10, ucs4:"else", rx290_fail938
    add rx290_pos, 4
    ge rx290_pos, rx290_eos, rx290_fail938
    is_cclass $I11, .CCLASS_WHITESPACE, rx290_tgt, rx290_pos
    unless $I11, rx290_fail938
    add rx290_pos, 1
    repr_bind_attr_int rx290_cur, rx290_curclass, "$!pos", rx290_pos
    $P11 = rx290_cur."ws"()
    repr_get_attr_int $I11, $P11, rx290_curclass, "$!pos"
    lt $I11, 0, rx290_fail938
    repr_get_attr_int rx290_pos, $P11, rx290_curclass, "$!pos"
    repr_bind_attr_int rx290_cur, rx290_curclass, "$!pos", rx290_pos
    $P11 = rx290_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx290_curclass, "$!pos"
    lt $I11, 0, rx290_fail938
    nqp_rxmark rx290_bstack, rxsubrule305_pass961, -1, 0
  rxsubrule305_pass961:
    rx290_cstack = rx290_cur."!cursor_capture"($P11, "else")
    repr_get_attr_int rx290_pos, $P11, rx290_curclass, "$!pos"
    repr_bind_attr_int rx290_cur, rx290_curclass, "$!pos", rx290_pos
    $P11 = rx290_cur."ws"()
    repr_get_attr_int $I11, $P11, rx290_curclass, "$!pos"
    lt $I11, 0, rx290_fail938
    repr_get_attr_int rx290_pos, $P11, rx290_curclass, "$!pos"
    nqp_rxpeek $I19, rx290_bstack, rxquantr302_done958
    inc $I19
    inc $I19
    set rx290_rep, rx290_bstack[$I19]
    nqp_rxcommit rx290_bstack, rxquantr302_done958
    inc rx290_rep
  rxquantr302_done958:
    repr_bind_attr_int rx290_cur, rx290_curclass, "$!pos", rx290_pos
    $P11 = rx290_cur."ws"()
    repr_get_attr_int $I11, $P11, rx290_curclass, "$!pos"
    lt $I11, 0, rx290_fail938
    repr_get_attr_int rx290_pos, $P11, rx290_curclass, "$!pos"
    rx290_cur."!cursor_pass"(rx290_pos, "statement_control:sym<if>", 'backtrack'=>1)
    .return (rx290_cur)
  rx290_restart937:
    repr_get_attr_obj rx290_cstack, rx290_cur, rx290_curclass, "$!cstack"
  rx290_fail938:
    unless rx290_bstack, rx290_done936
    pop $I19, rx290_bstack
    if_null rx290_cstack, rx290_cstack_done941
    unless rx290_cstack, rx290_cstack_done941
    dec $I19
    set $P11, rx290_cstack[$I19]
  rx290_cstack_done941:
    pop rx290_rep, rx290_bstack
    pop rx290_pos, rx290_bstack
    pop $I19, rx290_bstack
    lt rx290_pos, -1, rx290_done936
    lt rx290_pos, 0, rx290_fail938
    eq $I19, 0, rx290_fail938
    nqp_islist $I20, rx290_cstack
    unless $I20, rx290_jump939
    elements $I18, rx290_bstack
    le $I18, 0, rx290_cut940
    dec $I18
    set $I18, rx290_bstack[$I18]
  rx290_cut940:
    assign rx290_cstack, $I18
  rx290_jump939:
    jump $I19
  rx290_done936:
    rx290_cur."!cursor_fail"()
    .return (rx290_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<unless>" :subid("cuid_64_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 834
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_65_1358115338.889' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx308_tgt
    .local int rx308_pos
    .local int rx308_off
    .local int rx308_eos
    .local int rx308_rep
    .local pmc rx308_cur
    .local pmc rx308_curclass
    .local pmc rx308_bstack
    .local pmc rx308_cstack
    (rx308_cur, rx308_tgt, rx308_pos, rx308_curclass, rx308_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx308_cur
    length rx308_eos, rx308_tgt
    eq $I19, 1, rx308_restart966
    gt rx308_pos, rx308_eos, rx308_fail967
    repr_get_attr_int $I11, self, rx308_curclass, "$!from"
    ne $I11, -1, rxscan309_done973
    goto rxscan309_scan972
  rxscan309_loop971:
    inc rx308_pos
    gt rx308_pos, rx308_eos, rx308_fail967
    repr_bind_attr_int rx308_cur, rx308_curclass, "$!from", rx308_pos
  rxscan309_scan972:
    nqp_rxmark rx308_bstack, rxscan309_loop971, rx308_pos, 0
  rxscan309_done973:
    nqp_rxmark rx308_bstack, rxcap310_fail975, rx308_pos, 0
    add $I11, rx308_pos, 6
    gt $I11, rx308_eos, rx308_fail967
    substr $S10, rx308_tgt, rx308_pos, 6
    ne $S10, ucs4:"unless", rx308_fail967
    add rx308_pos, 6
    nqp_rxpeek $I19, rx308_bstack, rxcap310_fail975
    inc $I19
    set $I11, rx308_bstack[$I19]
    repr_bind_attr_int rx308_cur, rx308_curclass, "$!pos", rx308_pos
    $P11 = rx308_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx308_pos)
    rx308_cstack = rx308_cur."!cursor_capture"($P11, "sym")
    goto rxcap310_done974
  rxcap310_fail975:
    goto rx308_fail967
  rxcap310_done974:
    ge rx308_pos, rx308_eos, rx308_fail967
    is_cclass $I11, .CCLASS_WHITESPACE, rx308_tgt, rx308_pos
    unless $I11, rx308_fail967
    add rx308_pos, 1
    repr_bind_attr_int rx308_cur, rx308_curclass, "$!pos", rx308_pos
    $P11 = rx308_cur."ws"()
    repr_get_attr_int $I11, $P11, rx308_curclass, "$!pos"
    lt $I11, 0, rx308_fail967
    repr_get_attr_int rx308_pos, $P11, rx308_curclass, "$!pos"
    repr_bind_attr_int rx308_cur, rx308_curclass, "$!pos", rx308_pos
    $P11 = rx308_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx308_curclass, "$!pos"
    lt $I11, 0, rx308_fail967
    nqp_rxmark rx308_bstack, rxsubrule312_pass977, -1, 0
  rxsubrule312_pass977:
    rx308_cstack = rx308_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx308_pos, $P11, rx308_curclass, "$!pos"
    repr_bind_attr_int rx308_cur, rx308_curclass, "$!pos", rx308_pos
    $P11 = rx308_cur."ws"()
    repr_get_attr_int $I11, $P11, rx308_curclass, "$!pos"
    lt $I11, 0, rx308_fail967
    repr_get_attr_int rx308_pos, $P11, rx308_curclass, "$!pos"
  alt314_0980:
    nqp_rxmark rx308_bstack, alt314_1993, rx308_pos, 0
    repr_bind_attr_int rx308_cur, rx308_curclass, "$!pos", rx308_pos
    $P11 = rx308_cur."ws"()
    repr_get_attr_int $I11, $P11, rx308_curclass, "$!pos"
    lt $I11, 0, rx308_fail967
    repr_get_attr_int rx308_pos, $P11, rx308_curclass, "$!pos"
    .const 'Sub' $P5001 = 'cuid_65_1358115338.889' 
    capture_lex $P5001
    repr_bind_attr_int rx308_cur, rx308_curclass, "$!pos", rx308_pos
    $P11 = rx308_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx308_curclass, "$!pos"
    ge $I11, 0, rx308_fail967
    repr_bind_attr_int rx308_cur, rx308_curclass, "$!pos", rx308_pos
    $P11 = rx308_cur."ws"()
    repr_get_attr_int $I11, $P11, rx308_curclass, "$!pos"
    lt $I11, 0, rx308_fail967
    repr_get_attr_int rx308_pos, $P11, rx308_curclass, "$!pos"
    goto alt314_end979
  alt314_1993:
    repr_bind_attr_int rx308_cur, rx308_curclass, "$!pos", rx308_pos
    $P11 = rx308_cur."ws"()
    repr_get_attr_int $I11, $P11, rx308_curclass, "$!pos"
    lt $I11, 0, rx308_fail967
    repr_get_attr_int rx308_pos, $P11, rx308_curclass, "$!pos"
    repr_bind_attr_int rx308_cur, rx308_curclass, "$!pos", rx308_pos
    $P11 = rx308_cur."panic"("unless does not take \"else\", please rewrite using \"if\"")
    repr_get_attr_int $I11, $P11, rx308_curclass, "$!pos"
    lt $I11, 0, rx308_fail967
    repr_get_attr_int rx308_pos, $P11, rx308_curclass, "$!pos"
    repr_bind_attr_int rx308_cur, rx308_curclass, "$!pos", rx308_pos
    $P11 = rx308_cur."ws"()
    repr_get_attr_int $I11, $P11, rx308_curclass, "$!pos"
    lt $I11, 0, rx308_fail967
    repr_get_attr_int rx308_pos, $P11, rx308_curclass, "$!pos"
  alt314_end979:
    repr_bind_attr_int rx308_cur, rx308_curclass, "$!pos", rx308_pos
    $P11 = rx308_cur."ws"()
    repr_get_attr_int $I11, $P11, rx308_curclass, "$!pos"
    lt $I11, 0, rx308_fail967
    repr_get_attr_int rx308_pos, $P11, rx308_curclass, "$!pos"
    rx308_cur."!cursor_pass"(rx308_pos, "statement_control:sym<unless>", 'backtrack'=>1)
    .return (rx308_cur)
  rx308_restart966:
    repr_get_attr_obj rx308_cstack, rx308_cur, rx308_curclass, "$!cstack"
  rx308_fail967:
    unless rx308_bstack, rx308_done965
    pop $I19, rx308_bstack
    if_null rx308_cstack, rx308_cstack_done970
    unless rx308_cstack, rx308_cstack_done970
    dec $I19
    set $P11, rx308_cstack[$I19]
  rx308_cstack_done970:
    pop rx308_rep, rx308_bstack
    pop rx308_pos, rx308_bstack
    pop $I19, rx308_bstack
    lt rx308_pos, -1, rx308_done965
    lt rx308_pos, 0, rx308_fail967
    eq $I19, 0, rx308_fail967
    nqp_islist $I20, rx308_cstack
    unless $I20, rx308_jump968
    elements $I18, rx308_bstack
    le $I18, 0, rx308_cut969
    dec $I18
    set $I18, rx308_bstack[$I18]
  rx308_cut969:
    assign rx308_cstack, $I18
  rx308_jump968:
    jump $I19
  rx308_done965:
    rx308_cur."!cursor_fail"()
    .return (rx308_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_65_1358115338.889") :anon :lex :outer("cuid_64_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx316_tgt
    .local int rx316_pos
    .local int rx316_off
    .local int rx316_eos
    .local int rx316_rep
    .local pmc rx316_cur
    .local pmc rx316_curclass
    .local pmc rx316_bstack
    .local pmc rx316_cstack
    (rx316_cur, rx316_tgt, rx316_pos, rx316_curclass, rx316_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx316_cur
    length rx316_eos, rx316_tgt
    eq $I19, 1, rx316_restart984
    gt rx316_pos, rx316_eos, rx316_fail985
    repr_get_attr_int $I11, self, rx316_curclass, "$!from"
    ne $I11, -1, rxscan317_done991
    goto rxscan317_scan990
  rxscan317_loop989:
    inc rx316_pos
    gt rx316_pos, rx316_eos, rx316_fail985
    repr_bind_attr_int rx316_cur, rx316_curclass, "$!from", rx316_pos
  rxscan317_scan990:
    nqp_rxmark rx316_bstack, rxscan317_loop989, rx316_pos, 0
  rxscan317_done991:
    add $I11, rx316_pos, 4
    gt $I11, rx316_eos, rx316_fail985
    substr $S10, rx316_tgt, rx316_pos, 4
    ne $S10, ucs4:"else", rx316_fail985
    add rx316_pos, 4
    rx316_cur."!cursor_pass"(rx316_pos, 'backtrack'=>1)
    .return (rx316_cur)
  rx316_restart984:
    repr_get_attr_obj rx316_cstack, rx316_cur, rx316_curclass, "$!cstack"
  rx316_fail985:
    unless rx316_bstack, rx316_done983
    pop $I19, rx316_bstack
    if_null rx316_cstack, rx316_cstack_done988
    unless rx316_cstack, rx316_cstack_done988
    dec $I19
    set $P11, rx316_cstack[$I19]
  rx316_cstack_done988:
    pop rx316_rep, rx316_bstack
    pop rx316_pos, rx316_bstack
    pop $I19, rx316_bstack
    lt rx316_pos, -1, rx316_done983
    lt rx316_pos, 0, rx316_fail985
    eq $I19, 0, rx316_fail985
    nqp_islist $I20, rx316_cstack
    unless $I20, rx316_jump986
    elements $I18, rx316_bstack
    le $I18, 0, rx316_cut987
    dec $I18
    set $I18, rx316_bstack[$I18]
  rx316_cut987:
    assign rx316_cstack, $I18
  rx316_jump986:
    jump $I19
  rx316_done983:
    rx316_cur."!cursor_fail"()
    .return (rx316_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<while>" :subid("cuid_66_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 840
    .param pmc _lex_param_0 
    .lex "$*CONTROL_USED", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx323_tgt
    .local int rx323_pos
    .local int rx323_off
    .local int rx323_eos
    .local int rx323_rep
    .local pmc rx323_cur
    .local pmc rx323_curclass
    .local pmc rx323_bstack
    .local pmc rx323_cstack
    (rx323_cur, rx323_tgt, rx323_pos, rx323_curclass, rx323_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx323_cur
    length rx323_eos, rx323_tgt
    eq $I19, 1, rx323_restart1000
    gt rx323_pos, rx323_eos, rx323_fail1001
    repr_get_attr_int $I11, self, rx323_curclass, "$!from"
    ne $I11, -1, rxscan324_done1007
    goto rxscan324_scan1006
  rxscan324_loop1005:
    inc rx323_pos
    gt rx323_pos, rx323_eos, rx323_fail1001
    repr_bind_attr_int rx323_cur, rx323_curclass, "$!from", rx323_pos
  rxscan324_scan1006:
    nqp_rxmark rx323_bstack, rxscan324_loop1005, rx323_pos, 0
  rxscan324_done1007:
    repr_bind_attr_int rx323_cur, rx323_curclass, "$!pos", rx323_pos
    store_lex unicode:"$\x{a2}", rx323_cur
    box $P5002, 0
    set $P101, $P5002
    nqp_rxmark rx323_bstack, rxcap325_fail1009, rx323_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt326_01011
    nqp_push_label $P11, alt326_11012
    nqp_rxmark rx323_bstack, alt326_end1010, -1, 0
    rx323_cur."!alt"(rx323_pos, "alt_nfa__12_1358115340.382", $P11)
    goto rx323_fail1001
  alt326_01011:
    add $I11, rx323_pos, 5
    gt $I11, rx323_eos, rx323_fail1001
    substr $S10, rx323_tgt, rx323_pos, 5
    ne $S10, ucs4:"while", rx323_fail1001
    add rx323_pos, 5
    goto alt326_end1010
  alt326_11012:
    add $I11, rx323_pos, 5
    gt $I11, rx323_eos, rx323_fail1001
    substr $S10, rx323_tgt, rx323_pos, 5
    ne $S10, ucs4:"until", rx323_fail1001
    add rx323_pos, 5
    goto alt326_end1010
  alt326_end1010:
    nqp_rxcommit rx323_bstack, alt326_end1010
    nqp_rxpeek $I19, rx323_bstack, rxcap325_fail1009
    inc $I19
    set $I11, rx323_bstack[$I19]
    repr_bind_attr_int rx323_cur, rx323_curclass, "$!pos", rx323_pos
    $P11 = rx323_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx323_pos)
    rx323_cstack = rx323_cur."!cursor_capture"($P11, "sym")
    goto rxcap325_done1008
  rxcap325_fail1009:
    goto rx323_fail1001
  rxcap325_done1008:
    ge rx323_pos, rx323_eos, rx323_fail1001
    is_cclass $I11, .CCLASS_WHITESPACE, rx323_tgt, rx323_pos
    unless $I11, rx323_fail1001
    add rx323_pos, 1
    repr_bind_attr_int rx323_cur, rx323_curclass, "$!pos", rx323_pos
    $P11 = rx323_cur."ws"()
    repr_get_attr_int $I11, $P11, rx323_curclass, "$!pos"
    lt $I11, 0, rx323_fail1001
    repr_get_attr_int rx323_pos, $P11, rx323_curclass, "$!pos"
    repr_bind_attr_int rx323_cur, rx323_curclass, "$!pos", rx323_pos
    $P11 = rx323_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx323_curclass, "$!pos"
    lt $I11, 0, rx323_fail1001
    nqp_rxmark rx323_bstack, rxsubrule328_pass1014, -1, 0
  rxsubrule328_pass1014:
    rx323_cstack = rx323_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx323_pos, $P11, rx323_curclass, "$!pos"
    repr_bind_attr_int rx323_cur, rx323_curclass, "$!pos", rx323_pos
    $P11 = rx323_cur."ws"()
    repr_get_attr_int $I11, $P11, rx323_curclass, "$!pos"
    lt $I11, 0, rx323_fail1001
    repr_get_attr_int rx323_pos, $P11, rx323_curclass, "$!pos"
    rx323_cur."!cursor_pass"(rx323_pos, "statement_control:sym<while>", 'backtrack'=>1)
    .return (rx323_cur)
  rx323_restart1000:
    repr_get_attr_obj rx323_cstack, rx323_cur, rx323_curclass, "$!cstack"
  rx323_fail1001:
    unless rx323_bstack, rx323_done999
    pop $I19, rx323_bstack
    if_null rx323_cstack, rx323_cstack_done1004
    unless rx323_cstack, rx323_cstack_done1004
    dec $I19
    set $P11, rx323_cstack[$I19]
  rx323_cstack_done1004:
    pop rx323_rep, rx323_bstack
    pop rx323_pos, rx323_bstack
    pop $I19, rx323_bstack
    lt rx323_pos, -1, rx323_done999
    lt rx323_pos, 0, rx323_fail1001
    eq $I19, 0, rx323_fail1001
    nqp_islist $I20, rx323_cstack
    unless $I20, rx323_jump1002
    elements $I18, rx323_bstack
    le $I18, 0, rx323_cut1003
    dec $I18
    set $I18, rx323_bstack[$I18]
  rx323_cut1003:
    assign rx323_cstack, $I18
  rx323_jump1002:
    jump $I19
  rx323_done999:
    rx323_cur."!cursor_fail"()
    .return (rx323_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<repeat>" :subid("cuid_67_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 846
    .param pmc _lex_param_0 
    .lex "$*CONTROL_USED", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx330_tgt
    .local int rx330_pos
    .local int rx330_off
    .local int rx330_eos
    .local int rx330_rep
    .local pmc rx330_cur
    .local pmc rx330_curclass
    .local pmc rx330_bstack
    .local pmc rx330_cstack
    (rx330_cur, rx330_tgt, rx330_pos, rx330_curclass, rx330_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx330_cur
    length rx330_eos, rx330_tgt
    eq $I19, 1, rx330_restart1018
    gt rx330_pos, rx330_eos, rx330_fail1019
    repr_get_attr_int $I11, self, rx330_curclass, "$!from"
    ne $I11, -1, rxscan331_done1025
    goto rxscan331_scan1024
  rxscan331_loop1023:
    inc rx330_pos
    gt rx330_pos, rx330_eos, rx330_fail1019
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!from", rx330_pos
  rxscan331_scan1024:
    nqp_rxmark rx330_bstack, rxscan331_loop1023, rx330_pos, 0
  rxscan331_done1025:
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    store_lex unicode:"$\x{a2}", rx330_cur
    box $P5002, 0
    set $P101, $P5002
    nqp_rxmark rx330_bstack, rxcap332_fail1027, rx330_pos, 0
    add $I11, rx330_pos, 6
    gt $I11, rx330_eos, rx330_fail1019
    substr $S10, rx330_tgt, rx330_pos, 6
    ne $S10, ucs4:"repeat", rx330_fail1019
    add rx330_pos, 6
    nqp_rxpeek $I19, rx330_bstack, rxcap332_fail1027
    inc $I19
    set $I11, rx330_bstack[$I19]
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    $P11 = rx330_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx330_pos)
    rx330_cstack = rx330_cur."!cursor_capture"($P11, "sym")
    goto rxcap332_done1026
  rxcap332_fail1027:
    goto rx330_fail1019
  rxcap332_done1026:
    ge rx330_pos, rx330_eos, rx330_fail1019
    is_cclass $I11, .CCLASS_WHITESPACE, rx330_tgt, rx330_pos
    unless $I11, rx330_fail1019
    add rx330_pos, 1
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    $P11 = rx330_cur."ws"()
    repr_get_attr_int $I11, $P11, rx330_curclass, "$!pos"
    lt $I11, 0, rx330_fail1019
    repr_get_attr_int rx330_pos, $P11, rx330_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt334_01030
    nqp_push_label $P11, alt334_11040
    nqp_rxmark rx330_bstack, alt334_end1029, -1, 0
    rx330_cur."!alt"(rx330_pos, "alt_nfa__15_1358115340.401", $P11)
    goto rx330_fail1019
  alt334_01030:
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    $P11 = rx330_cur."ws"()
    repr_get_attr_int $I11, $P11, rx330_curclass, "$!pos"
    lt $I11, 0, rx330_fail1019
    repr_get_attr_int rx330_pos, $P11, rx330_curclass, "$!pos"
    nqp_rxmark rx330_bstack, rxcap336_fail1033, rx330_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt337_01035
    nqp_push_label $P11, alt337_11036
    nqp_rxmark rx330_bstack, alt337_end1034, -1, 0
    rx330_cur."!alt"(rx330_pos, "alt_nfa__13_1358115340.401", $P11)
    goto rx330_fail1019
  alt337_01035:
    add $I11, rx330_pos, 5
    gt $I11, rx330_eos, rx330_fail1019
    substr $S10, rx330_tgt, rx330_pos, 5
    ne $S10, ucs4:"while", rx330_fail1019
    add rx330_pos, 5
    goto alt337_end1034
  alt337_11036:
    add $I11, rx330_pos, 5
    gt $I11, rx330_eos, rx330_fail1019
    substr $S10, rx330_tgt, rx330_pos, 5
    ne $S10, ucs4:"until", rx330_fail1019
    add rx330_pos, 5
    goto alt337_end1034
  alt337_end1034:
    nqp_rxcommit rx330_bstack, alt337_end1034
    nqp_rxpeek $I19, rx330_bstack, rxcap336_fail1033
    inc $I19
    set $I11, rx330_bstack[$I19]
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    $P11 = rx330_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx330_pos)
    rx330_cstack = rx330_cur."!cursor_capture"($P11, "wu")
    goto rxcap336_done1032
  rxcap336_fail1033:
    goto rx330_fail1019
  rxcap336_done1032:
    ge rx330_pos, rx330_eos, rx330_fail1019
    is_cclass $I11, .CCLASS_WHITESPACE, rx330_tgt, rx330_pos
    unless $I11, rx330_fail1019
    add rx330_pos, 1
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    $P11 = rx330_cur."ws"()
    repr_get_attr_int $I11, $P11, rx330_curclass, "$!pos"
    lt $I11, 0, rx330_fail1019
    repr_get_attr_int rx330_pos, $P11, rx330_curclass, "$!pos"
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    $P11 = rx330_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx330_curclass, "$!pos"
    lt $I11, 0, rx330_fail1019
    nqp_rxmark rx330_bstack, rxsubrule339_pass1038, -1, 0
  rxsubrule339_pass1038:
    rx330_cstack = rx330_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx330_pos, $P11, rx330_curclass, "$!pos"
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    $P11 = rx330_cur."ws"()
    repr_get_attr_int $I11, $P11, rx330_curclass, "$!pos"
    lt $I11, 0, rx330_fail1019
    repr_get_attr_int rx330_pos, $P11, rx330_curclass, "$!pos"
    goto alt334_end1029
  alt334_11040:
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    $P11 = rx330_cur."ws"()
    repr_get_attr_int $I11, $P11, rx330_curclass, "$!pos"
    lt $I11, 0, rx330_fail1019
    repr_get_attr_int rx330_pos, $P11, rx330_curclass, "$!pos"
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    $P11 = rx330_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx330_curclass, "$!pos"
    lt $I11, 0, rx330_fail1019
    nqp_rxmark rx330_bstack, rxsubrule342_pass1042, -1, 0
  rxsubrule342_pass1042:
    rx330_cstack = rx330_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx330_pos, $P11, rx330_curclass, "$!pos"
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    $P11 = rx330_cur."ws"()
    repr_get_attr_int $I11, $P11, rx330_curclass, "$!pos"
    lt $I11, 0, rx330_fail1019
    repr_get_attr_int rx330_pos, $P11, rx330_curclass, "$!pos"
    nqp_rxmark rx330_bstack, rxcap344_fail1045, rx330_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt345_01047
    nqp_push_label $P11, alt345_11048
    nqp_rxmark rx330_bstack, alt345_end1046, -1, 0
    rx330_cur."!alt"(rx330_pos, "alt_nfa__14_1358115340.401", $P11)
    goto rx330_fail1019
  alt345_01047:
    add $I11, rx330_pos, 5
    gt $I11, rx330_eos, rx330_fail1019
    substr $S10, rx330_tgt, rx330_pos, 5
    ne $S10, ucs4:"while", rx330_fail1019
    add rx330_pos, 5
    goto alt345_end1046
  alt345_11048:
    add $I11, rx330_pos, 5
    gt $I11, rx330_eos, rx330_fail1019
    substr $S10, rx330_tgt, rx330_pos, 5
    ne $S10, ucs4:"until", rx330_fail1019
    add rx330_pos, 5
    goto alt345_end1046
  alt345_end1046:
    nqp_rxcommit rx330_bstack, alt345_end1046
    nqp_rxpeek $I19, rx330_bstack, rxcap344_fail1045
    inc $I19
    set $I11, rx330_bstack[$I19]
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    $P11 = rx330_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx330_pos)
    rx330_cstack = rx330_cur."!cursor_capture"($P11, "wu")
    goto rxcap344_done1044
  rxcap344_fail1045:
    goto rx330_fail1019
  rxcap344_done1044:
    ge rx330_pos, rx330_eos, rx330_fail1019
    is_cclass $I11, .CCLASS_WHITESPACE, rx330_tgt, rx330_pos
    unless $I11, rx330_fail1019
    add rx330_pos, 1
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    $P11 = rx330_cur."ws"()
    repr_get_attr_int $I11, $P11, rx330_curclass, "$!pos"
    lt $I11, 0, rx330_fail1019
    repr_get_attr_int rx330_pos, $P11, rx330_curclass, "$!pos"
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    $P11 = rx330_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx330_curclass, "$!pos"
    lt $I11, 0, rx330_fail1019
    nqp_rxmark rx330_bstack, rxsubrule347_pass1050, -1, 0
  rxsubrule347_pass1050:
    rx330_cstack = rx330_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx330_pos, $P11, rx330_curclass, "$!pos"
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    $P11 = rx330_cur."ws"()
    repr_get_attr_int $I11, $P11, rx330_curclass, "$!pos"
    lt $I11, 0, rx330_fail1019
    repr_get_attr_int rx330_pos, $P11, rx330_curclass, "$!pos"
    goto alt334_end1029
  alt334_end1029:
    nqp_rxcommit rx330_bstack, alt334_end1029
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    $P11 = rx330_cur."ws"()
    repr_get_attr_int $I11, $P11, rx330_curclass, "$!pos"
    lt $I11, 0, rx330_fail1019
    repr_get_attr_int rx330_pos, $P11, rx330_curclass, "$!pos"
    rx330_cur."!cursor_pass"(rx330_pos, "statement_control:sym<repeat>", 'backtrack'=>1)
    .return (rx330_cur)
  rx330_restart1018:
    repr_get_attr_obj rx330_cstack, rx330_cur, rx330_curclass, "$!cstack"
  rx330_fail1019:
    unless rx330_bstack, rx330_done1017
    pop $I19, rx330_bstack
    if_null rx330_cstack, rx330_cstack_done1022
    unless rx330_cstack, rx330_cstack_done1022
    dec $I19
    set $P11, rx330_cstack[$I19]
  rx330_cstack_done1022:
    pop rx330_rep, rx330_bstack
    pop rx330_pos, rx330_bstack
    pop $I19, rx330_bstack
    lt rx330_pos, -1, rx330_done1017
    lt rx330_pos, 0, rx330_fail1019
    eq $I19, 0, rx330_fail1019
    nqp_islist $I20, rx330_cstack
    unless $I20, rx330_jump1020
    elements $I18, rx330_bstack
    le $I18, 0, rx330_cut1021
    dec $I18
    set $I18, rx330_bstack[$I18]
  rx330_cut1021:
    assign rx330_cstack, $I18
  rx330_jump1020:
    jump $I19
  rx330_done1017:
    rx330_cur."!cursor_fail"()
    .return (rx330_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<for>" :subid("cuid_68_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 855
    .param pmc _lex_param_0 
    .lex "$*CONTROL_USED", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx350_tgt
    .local int rx350_pos
    .local int rx350_off
    .local int rx350_eos
    .local int rx350_rep
    .local pmc rx350_cur
    .local pmc rx350_curclass
    .local pmc rx350_bstack
    .local pmc rx350_cstack
    (rx350_cur, rx350_tgt, rx350_pos, rx350_curclass, rx350_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx350_cur
    length rx350_eos, rx350_tgt
    eq $I19, 1, rx350_restart1055
    gt rx350_pos, rx350_eos, rx350_fail1056
    repr_get_attr_int $I11, self, rx350_curclass, "$!from"
    ne $I11, -1, rxscan351_done1062
    goto rxscan351_scan1061
  rxscan351_loop1060:
    inc rx350_pos
    gt rx350_pos, rx350_eos, rx350_fail1056
    repr_bind_attr_int rx350_cur, rx350_curclass, "$!from", rx350_pos
  rxscan351_scan1061:
    nqp_rxmark rx350_bstack, rxscan351_loop1060, rx350_pos, 0
  rxscan351_done1062:
    repr_bind_attr_int rx350_cur, rx350_curclass, "$!pos", rx350_pos
    store_lex unicode:"$\x{a2}", rx350_cur
    box $P5002, 0
    set $P101, $P5002
    nqp_rxmark rx350_bstack, rxcap352_fail1064, rx350_pos, 0
    add $I11, rx350_pos, 3
    gt $I11, rx350_eos, rx350_fail1056
    substr $S10, rx350_tgt, rx350_pos, 3
    ne $S10, ucs4:"for", rx350_fail1056
    add rx350_pos, 3
    nqp_rxpeek $I19, rx350_bstack, rxcap352_fail1064
    inc $I19
    set $I11, rx350_bstack[$I19]
    repr_bind_attr_int rx350_cur, rx350_curclass, "$!pos", rx350_pos
    $P11 = rx350_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx350_pos)
    rx350_cstack = rx350_cur."!cursor_capture"($P11, "sym")
    goto rxcap352_done1063
  rxcap352_fail1064:
    goto rx350_fail1056
  rxcap352_done1063:
    ge rx350_pos, rx350_eos, rx350_fail1056
    is_cclass $I11, .CCLASS_WHITESPACE, rx350_tgt, rx350_pos
    unless $I11, rx350_fail1056
    add rx350_pos, 1
    repr_bind_attr_int rx350_cur, rx350_curclass, "$!pos", rx350_pos
    $P11 = rx350_cur."ws"()
    repr_get_attr_int $I11, $P11, rx350_curclass, "$!pos"
    lt $I11, 0, rx350_fail1056
    repr_get_attr_int rx350_pos, $P11, rx350_curclass, "$!pos"
    repr_bind_attr_int rx350_cur, rx350_curclass, "$!pos", rx350_pos
    $P11 = rx350_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx350_curclass, "$!pos"
    lt $I11, 0, rx350_fail1056
    nqp_rxmark rx350_bstack, rxsubrule354_pass1066, -1, 0
  rxsubrule354_pass1066:
    rx350_cstack = rx350_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx350_pos, $P11, rx350_curclass, "$!pos"
    repr_bind_attr_int rx350_cur, rx350_curclass, "$!pos", rx350_pos
    $P11 = rx350_cur."ws"()
    repr_get_attr_int $I11, $P11, rx350_curclass, "$!pos"
    lt $I11, 0, rx350_fail1056
    repr_get_attr_int rx350_pos, $P11, rx350_curclass, "$!pos"
    rx350_cur."!cursor_pass"(rx350_pos, "statement_control:sym<for>", 'backtrack'=>1)
    .return (rx350_cur)
  rx350_restart1055:
    repr_get_attr_obj rx350_cstack, rx350_cur, rx350_curclass, "$!cstack"
  rx350_fail1056:
    unless rx350_bstack, rx350_done1054
    pop $I19, rx350_bstack
    if_null rx350_cstack, rx350_cstack_done1059
    unless rx350_cstack, rx350_cstack_done1059
    dec $I19
    set $P11, rx350_cstack[$I19]
  rx350_cstack_done1059:
    pop rx350_rep, rx350_bstack
    pop rx350_pos, rx350_bstack
    pop $I19, rx350_bstack
    lt rx350_pos, -1, rx350_done1054
    lt rx350_pos, 0, rx350_fail1056
    eq $I19, 0, rx350_fail1056
    nqp_islist $I20, rx350_cstack
    unless $I20, rx350_jump1057
    elements $I18, rx350_bstack
    le $I18, 0, rx350_cut1058
    dec $I18
    set $I18, rx350_bstack[$I18]
  rx350_cut1058:
    assign rx350_cstack, $I18
  rx350_jump1057:
    jump $I19
  rx350_done1054:
    rx350_cur."!cursor_fail"()
    .return (rx350_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CATCH>" :subid("cuid_69_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 861
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx356_tgt
    .local int rx356_pos
    .local int rx356_off
    .local int rx356_eos
    .local int rx356_rep
    .local pmc rx356_cur
    .local pmc rx356_curclass
    .local pmc rx356_bstack
    .local pmc rx356_cstack
    (rx356_cur, rx356_tgt, rx356_pos, rx356_curclass, rx356_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx356_cur
    length rx356_eos, rx356_tgt
    eq $I19, 1, rx356_restart1070
    gt rx356_pos, rx356_eos, rx356_fail1071
    repr_get_attr_int $I11, self, rx356_curclass, "$!from"
    ne $I11, -1, rxscan357_done1077
    goto rxscan357_scan1076
  rxscan357_loop1075:
    inc rx356_pos
    gt rx356_pos, rx356_eos, rx356_fail1071
    repr_bind_attr_int rx356_cur, rx356_curclass, "$!from", rx356_pos
  rxscan357_scan1076:
    nqp_rxmark rx356_bstack, rxscan357_loop1075, rx356_pos, 0
  rxscan357_done1077:
    nqp_rxmark rx356_bstack, rxcap358_fail1079, rx356_pos, 0
    add $I11, rx356_pos, 5
    gt $I11, rx356_eos, rx356_fail1071
    substr $S10, rx356_tgt, rx356_pos, 5
    ne $S10, ucs4:"CATCH", rx356_fail1071
    add rx356_pos, 5
    nqp_rxpeek $I19, rx356_bstack, rxcap358_fail1079
    inc $I19
    set $I11, rx356_bstack[$I19]
    repr_bind_attr_int rx356_cur, rx356_curclass, "$!pos", rx356_pos
    $P11 = rx356_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx356_pos)
    rx356_cstack = rx356_cur."!cursor_capture"($P11, "sym")
    goto rxcap358_done1078
  rxcap358_fail1079:
    goto rx356_fail1071
  rxcap358_done1078:
    ge rx356_pos, rx356_eos, rx356_fail1071
    is_cclass $I11, .CCLASS_WHITESPACE, rx356_tgt, rx356_pos
    unless $I11, rx356_fail1071
    add rx356_pos, 1
    repr_bind_attr_int rx356_cur, rx356_curclass, "$!pos", rx356_pos
    $P11 = rx356_cur."ws"()
    repr_get_attr_int $I11, $P11, rx356_curclass, "$!pos"
    lt $I11, 0, rx356_fail1071
    repr_get_attr_int rx356_pos, $P11, rx356_curclass, "$!pos"
    repr_bind_attr_int rx356_cur, rx356_curclass, "$!pos", rx356_pos
    $P11 = rx356_cur."block"()
    repr_get_attr_int $I11, $P11, rx356_curclass, "$!pos"
    lt $I11, 0, rx356_fail1071
    nqp_rxmark rx356_bstack, rxsubrule360_pass1081, -1, 0
  rxsubrule360_pass1081:
    rx356_cstack = rx356_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx356_pos, $P11, rx356_curclass, "$!pos"
    repr_bind_attr_int rx356_cur, rx356_curclass, "$!pos", rx356_pos
    $P11 = rx356_cur."ws"()
    repr_get_attr_int $I11, $P11, rx356_curclass, "$!pos"
    lt $I11, 0, rx356_fail1071
    repr_get_attr_int rx356_pos, $P11, rx356_curclass, "$!pos"
    rx356_cur."!cursor_pass"(rx356_pos, "statement_control:sym<CATCH>", 'backtrack'=>1)
    .return (rx356_cur)
  rx356_restart1070:
    repr_get_attr_obj rx356_cstack, rx356_cur, rx356_curclass, "$!cstack"
  rx356_fail1071:
    unless rx356_bstack, rx356_done1069
    pop $I19, rx356_bstack
    if_null rx356_cstack, rx356_cstack_done1074
    unless rx356_cstack, rx356_cstack_done1074
    dec $I19
    set $P11, rx356_cstack[$I19]
  rx356_cstack_done1074:
    pop rx356_rep, rx356_bstack
    pop rx356_pos, rx356_bstack
    pop $I19, rx356_bstack
    lt rx356_pos, -1, rx356_done1069
    lt rx356_pos, 0, rx356_fail1071
    eq $I19, 0, rx356_fail1071
    nqp_islist $I20, rx356_cstack
    unless $I20, rx356_jump1072
    elements $I18, rx356_bstack
    le $I18, 0, rx356_cut1073
    dec $I18
    set $I18, rx356_bstack[$I18]
  rx356_cut1073:
    assign rx356_cstack, $I18
  rx356_jump1072:
    jump $I19
  rx356_done1069:
    rx356_cur."!cursor_fail"()
    .return (rx356_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CONTROL>" :subid("cuid_70_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 866
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx362_tgt
    .local int rx362_pos
    .local int rx362_off
    .local int rx362_eos
    .local int rx362_rep
    .local pmc rx362_cur
    .local pmc rx362_curclass
    .local pmc rx362_bstack
    .local pmc rx362_cstack
    (rx362_cur, rx362_tgt, rx362_pos, rx362_curclass, rx362_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx362_cur
    length rx362_eos, rx362_tgt
    eq $I19, 1, rx362_restart1085
    gt rx362_pos, rx362_eos, rx362_fail1086
    repr_get_attr_int $I11, self, rx362_curclass, "$!from"
    ne $I11, -1, rxscan363_done1092
    goto rxscan363_scan1091
  rxscan363_loop1090:
    inc rx362_pos
    gt rx362_pos, rx362_eos, rx362_fail1086
    repr_bind_attr_int rx362_cur, rx362_curclass, "$!from", rx362_pos
  rxscan363_scan1091:
    nqp_rxmark rx362_bstack, rxscan363_loop1090, rx362_pos, 0
  rxscan363_done1092:
    nqp_rxmark rx362_bstack, rxcap364_fail1094, rx362_pos, 0
    add $I11, rx362_pos, 7
    gt $I11, rx362_eos, rx362_fail1086
    substr $S10, rx362_tgt, rx362_pos, 7
    ne $S10, ucs4:"CONTROL", rx362_fail1086
    add rx362_pos, 7
    nqp_rxpeek $I19, rx362_bstack, rxcap364_fail1094
    inc $I19
    set $I11, rx362_bstack[$I19]
    repr_bind_attr_int rx362_cur, rx362_curclass, "$!pos", rx362_pos
    $P11 = rx362_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx362_pos)
    rx362_cstack = rx362_cur."!cursor_capture"($P11, "sym")
    goto rxcap364_done1093
  rxcap364_fail1094:
    goto rx362_fail1086
  rxcap364_done1093:
    ge rx362_pos, rx362_eos, rx362_fail1086
    is_cclass $I11, .CCLASS_WHITESPACE, rx362_tgt, rx362_pos
    unless $I11, rx362_fail1086
    add rx362_pos, 1
    repr_bind_attr_int rx362_cur, rx362_curclass, "$!pos", rx362_pos
    $P11 = rx362_cur."ws"()
    repr_get_attr_int $I11, $P11, rx362_curclass, "$!pos"
    lt $I11, 0, rx362_fail1086
    repr_get_attr_int rx362_pos, $P11, rx362_curclass, "$!pos"
    repr_bind_attr_int rx362_cur, rx362_curclass, "$!pos", rx362_pos
    $P11 = rx362_cur."block"()
    repr_get_attr_int $I11, $P11, rx362_curclass, "$!pos"
    lt $I11, 0, rx362_fail1086
    nqp_rxmark rx362_bstack, rxsubrule366_pass1096, -1, 0
  rxsubrule366_pass1096:
    rx362_cstack = rx362_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx362_pos, $P11, rx362_curclass, "$!pos"
    repr_bind_attr_int rx362_cur, rx362_curclass, "$!pos", rx362_pos
    $P11 = rx362_cur."ws"()
    repr_get_attr_int $I11, $P11, rx362_curclass, "$!pos"
    lt $I11, 0, rx362_fail1086
    repr_get_attr_int rx362_pos, $P11, rx362_curclass, "$!pos"
    rx362_cur."!cursor_pass"(rx362_pos, "statement_control:sym<CONTROL>", 'backtrack'=>1)
    .return (rx362_cur)
  rx362_restart1085:
    repr_get_attr_obj rx362_cstack, rx362_cur, rx362_curclass, "$!cstack"
  rx362_fail1086:
    unless rx362_bstack, rx362_done1084
    pop $I19, rx362_bstack
    if_null rx362_cstack, rx362_cstack_done1089
    unless rx362_cstack, rx362_cstack_done1089
    dec $I19
    set $P11, rx362_cstack[$I19]
  rx362_cstack_done1089:
    pop rx362_rep, rx362_bstack
    pop rx362_pos, rx362_bstack
    pop $I19, rx362_bstack
    lt rx362_pos, -1, rx362_done1084
    lt rx362_pos, 0, rx362_fail1086
    eq $I19, 0, rx362_fail1086
    nqp_islist $I20, rx362_cstack
    unless $I20, rx362_jump1087
    elements $I18, rx362_bstack
    le $I18, 0, rx362_cut1088
    dec $I18
    set $I18, rx362_bstack[$I18]
  rx362_cut1088:
    assign rx362_cstack, $I18
  rx362_jump1087:
    jump $I19
  rx362_done1084:
    rx362_cur."!cursor_fail"()
    .return (rx362_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix" :subid("cuid_71_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 871
    .param pmc self 
    $P5001 = self."!protoregex"("statement_prefix")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<BEGIN>" :subid("cuid_72_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 872
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx368_tgt
    .local int rx368_pos
    .local int rx368_off
    .local int rx368_eos
    .local int rx368_rep
    .local pmc rx368_cur
    .local pmc rx368_curclass
    .local pmc rx368_bstack
    .local pmc rx368_cstack
    (rx368_cur, rx368_tgt, rx368_pos, rx368_curclass, rx368_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx368_cur
    length rx368_eos, rx368_tgt
    eq $I19, 1, rx368_restart1100
    gt rx368_pos, rx368_eos, rx368_fail1101
    repr_get_attr_int $I11, self, rx368_curclass, "$!from"
    ne $I11, -1, rxscan369_done1107
    goto rxscan369_scan1106
  rxscan369_loop1105:
    inc rx368_pos
    gt rx368_pos, rx368_eos, rx368_fail1101
    repr_bind_attr_int rx368_cur, rx368_curclass, "$!from", rx368_pos
  rxscan369_scan1106:
    nqp_rxmark rx368_bstack, rxscan369_loop1105, rx368_pos, 0
  rxscan369_done1107:
    nqp_rxmark rx368_bstack, rxcap370_fail1109, rx368_pos, 0
    add $I11, rx368_pos, 5
    gt $I11, rx368_eos, rx368_fail1101
    substr $S10, rx368_tgt, rx368_pos, 5
    ne $S10, ucs4:"BEGIN", rx368_fail1101
    add rx368_pos, 5
    nqp_rxpeek $I19, rx368_bstack, rxcap370_fail1109
    inc $I19
    set $I11, rx368_bstack[$I19]
    repr_bind_attr_int rx368_cur, rx368_curclass, "$!pos", rx368_pos
    $P11 = rx368_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx368_pos)
    rx368_cstack = rx368_cur."!cursor_capture"($P11, "sym")
    goto rxcap370_done1108
  rxcap370_fail1109:
    goto rx368_fail1101
  rxcap370_done1108:
    repr_bind_attr_int rx368_cur, rx368_curclass, "$!pos", rx368_pos
    $P11 = rx368_cur."blorst"()
    repr_get_attr_int $I11, $P11, rx368_curclass, "$!pos"
    lt $I11, 0, rx368_fail1101
    nqp_rxmark rx368_bstack, rxsubrule371_pass1110, -1, 0
  rxsubrule371_pass1110:
    rx368_cstack = rx368_cur."!cursor_capture"($P11, "blorst")
    repr_get_attr_int rx368_pos, $P11, rx368_curclass, "$!pos"
    rx368_cur."!cursor_pass"(rx368_pos, "statement_prefix:sym<BEGIN>", 'backtrack'=>1)
    .return (rx368_cur)
  rx368_restart1100:
    repr_get_attr_obj rx368_cstack, rx368_cur, rx368_curclass, "$!cstack"
  rx368_fail1101:
    unless rx368_bstack, rx368_done1099
    pop $I19, rx368_bstack
    if_null rx368_cstack, rx368_cstack_done1104
    unless rx368_cstack, rx368_cstack_done1104
    dec $I19
    set $P11, rx368_cstack[$I19]
  rx368_cstack_done1104:
    pop rx368_rep, rx368_bstack
    pop rx368_pos, rx368_bstack
    pop $I19, rx368_bstack
    lt rx368_pos, -1, rx368_done1099
    lt rx368_pos, 0, rx368_fail1101
    eq $I19, 0, rx368_fail1101
    nqp_islist $I20, rx368_cstack
    unless $I20, rx368_jump1102
    elements $I18, rx368_bstack
    le $I18, 0, rx368_cut1103
    dec $I18
    set $I18, rx368_bstack[$I18]
  rx368_cut1103:
    assign rx368_cstack, $I18
  rx368_jump1102:
    jump $I19
  rx368_done1099:
    rx368_cur."!cursor_fail"()
    .return (rx368_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<INIT>" :subid("cuid_73_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 873
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx372_tgt
    .local int rx372_pos
    .local int rx372_off
    .local int rx372_eos
    .local int rx372_rep
    .local pmc rx372_cur
    .local pmc rx372_curclass
    .local pmc rx372_bstack
    .local pmc rx372_cstack
    (rx372_cur, rx372_tgt, rx372_pos, rx372_curclass, rx372_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx372_cur
    length rx372_eos, rx372_tgt
    eq $I19, 1, rx372_restart1113
    gt rx372_pos, rx372_eos, rx372_fail1114
    repr_get_attr_int $I11, self, rx372_curclass, "$!from"
    ne $I11, -1, rxscan373_done1120
    goto rxscan373_scan1119
  rxscan373_loop1118:
    inc rx372_pos
    gt rx372_pos, rx372_eos, rx372_fail1114
    repr_bind_attr_int rx372_cur, rx372_curclass, "$!from", rx372_pos
  rxscan373_scan1119:
    nqp_rxmark rx372_bstack, rxscan373_loop1118, rx372_pos, 0
  rxscan373_done1120:
    nqp_rxmark rx372_bstack, rxcap374_fail1122, rx372_pos, 0
    add $I11, rx372_pos, 4
    gt $I11, rx372_eos, rx372_fail1114
    substr $S10, rx372_tgt, rx372_pos, 4
    ne $S10, ucs4:"INIT", rx372_fail1114
    add rx372_pos, 4
    nqp_rxpeek $I19, rx372_bstack, rxcap374_fail1122
    inc $I19
    set $I11, rx372_bstack[$I19]
    repr_bind_attr_int rx372_cur, rx372_curclass, "$!pos", rx372_pos
    $P11 = rx372_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx372_pos)
    rx372_cstack = rx372_cur."!cursor_capture"($P11, "sym")
    goto rxcap374_done1121
  rxcap374_fail1122:
    goto rx372_fail1114
  rxcap374_done1121:
    repr_bind_attr_int rx372_cur, rx372_curclass, "$!pos", rx372_pos
    $P11 = rx372_cur."blorst"()
    repr_get_attr_int $I11, $P11, rx372_curclass, "$!pos"
    lt $I11, 0, rx372_fail1114
    nqp_rxmark rx372_bstack, rxsubrule375_pass1123, -1, 0
  rxsubrule375_pass1123:
    rx372_cstack = rx372_cur."!cursor_capture"($P11, "blorst")
    repr_get_attr_int rx372_pos, $P11, rx372_curclass, "$!pos"
    rx372_cur."!cursor_pass"(rx372_pos, "statement_prefix:sym<INIT>", 'backtrack'=>1)
    .return (rx372_cur)
  rx372_restart1113:
    repr_get_attr_obj rx372_cstack, rx372_cur, rx372_curclass, "$!cstack"
  rx372_fail1114:
    unless rx372_bstack, rx372_done1112
    pop $I19, rx372_bstack
    if_null rx372_cstack, rx372_cstack_done1117
    unless rx372_cstack, rx372_cstack_done1117
    dec $I19
    set $P11, rx372_cstack[$I19]
  rx372_cstack_done1117:
    pop rx372_rep, rx372_bstack
    pop rx372_pos, rx372_bstack
    pop $I19, rx372_bstack
    lt rx372_pos, -1, rx372_done1112
    lt rx372_pos, 0, rx372_fail1114
    eq $I19, 0, rx372_fail1114
    nqp_islist $I20, rx372_cstack
    unless $I20, rx372_jump1115
    elements $I18, rx372_bstack
    le $I18, 0, rx372_cut1116
    dec $I18
    set $I18, rx372_bstack[$I18]
  rx372_cut1116:
    assign rx372_cstack, $I18
  rx372_jump1115:
    jump $I19
  rx372_done1112:
    rx372_cur."!cursor_fail"()
    .return (rx372_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<try>" :subid("cuid_74_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 875
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx376_tgt
    .local int rx376_pos
    .local int rx376_off
    .local int rx376_eos
    .local int rx376_rep
    .local pmc rx376_cur
    .local pmc rx376_curclass
    .local pmc rx376_bstack
    .local pmc rx376_cstack
    (rx376_cur, rx376_tgt, rx376_pos, rx376_curclass, rx376_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx376_cur
    length rx376_eos, rx376_tgt
    eq $I19, 1, rx376_restart1126
    gt rx376_pos, rx376_eos, rx376_fail1127
    repr_get_attr_int $I11, self, rx376_curclass, "$!from"
    ne $I11, -1, rxscan377_done1133
    goto rxscan377_scan1132
  rxscan377_loop1131:
    inc rx376_pos
    gt rx376_pos, rx376_eos, rx376_fail1127
    repr_bind_attr_int rx376_cur, rx376_curclass, "$!from", rx376_pos
  rxscan377_scan1132:
    nqp_rxmark rx376_bstack, rxscan377_loop1131, rx376_pos, 0
  rxscan377_done1133:
    nqp_rxmark rx376_bstack, rxcap378_fail1135, rx376_pos, 0
    add $I11, rx376_pos, 3
    gt $I11, rx376_eos, rx376_fail1127
    substr $S10, rx376_tgt, rx376_pos, 3
    ne $S10, ucs4:"try", rx376_fail1127
    add rx376_pos, 3
    nqp_rxpeek $I19, rx376_bstack, rxcap378_fail1135
    inc $I19
    set $I11, rx376_bstack[$I19]
    repr_bind_attr_int rx376_cur, rx376_curclass, "$!pos", rx376_pos
    $P11 = rx376_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx376_pos)
    rx376_cstack = rx376_cur."!cursor_capture"($P11, "sym")
    goto rxcap378_done1134
  rxcap378_fail1135:
    goto rx376_fail1127
  rxcap378_done1134:
    repr_bind_attr_int rx376_cur, rx376_curclass, "$!pos", rx376_pos
    $P11 = rx376_cur."blorst"()
    repr_get_attr_int $I11, $P11, rx376_curclass, "$!pos"
    lt $I11, 0, rx376_fail1127
    nqp_rxmark rx376_bstack, rxsubrule379_pass1136, -1, 0
  rxsubrule379_pass1136:
    rx376_cstack = rx376_cur."!cursor_capture"($P11, "blorst")
    repr_get_attr_int rx376_pos, $P11, rx376_curclass, "$!pos"
    rx376_cur."!cursor_pass"(rx376_pos, "statement_prefix:sym<try>", 'backtrack'=>1)
    .return (rx376_cur)
  rx376_restart1126:
    repr_get_attr_obj rx376_cstack, rx376_cur, rx376_curclass, "$!cstack"
  rx376_fail1127:
    unless rx376_bstack, rx376_done1125
    pop $I19, rx376_bstack
    if_null rx376_cstack, rx376_cstack_done1130
    unless rx376_cstack, rx376_cstack_done1130
    dec $I19
    set $P11, rx376_cstack[$I19]
  rx376_cstack_done1130:
    pop rx376_rep, rx376_bstack
    pop rx376_pos, rx376_bstack
    pop $I19, rx376_bstack
    lt rx376_pos, -1, rx376_done1125
    lt rx376_pos, 0, rx376_fail1127
    eq $I19, 0, rx376_fail1127
    nqp_islist $I20, rx376_cstack
    unless $I20, rx376_jump1128
    elements $I18, rx376_bstack
    le $I18, 0, rx376_cut1129
    dec $I18
    set $I18, rx376_bstack[$I18]
  rx376_cut1129:
    assign rx376_cstack, $I18
  rx376_jump1128:
    jump $I19
  rx376_done1125:
    rx376_cur."!cursor_fail"()
    .return (rx376_cur) 
.end
.HLL "nqp"
.namespace []
.sub "blorst" :subid("cuid_75_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 880
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx380_tgt
    .local int rx380_pos
    .local int rx380_off
    .local int rx380_eos
    .local int rx380_rep
    .local pmc rx380_cur
    .local pmc rx380_curclass
    .local pmc rx380_bstack
    .local pmc rx380_cstack
    (rx380_cur, rx380_tgt, rx380_pos, rx380_curclass, rx380_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx380_cur
    length rx380_eos, rx380_tgt
    eq $I19, 1, rx380_restart1139
    gt rx380_pos, rx380_eos, rx380_fail1140
    repr_get_attr_int $I11, self, rx380_curclass, "$!from"
    ne $I11, -1, rxscan381_done1146
    goto rxscan381_scan1145
  rxscan381_loop1144:
    inc rx380_pos
    gt rx380_pos, rx380_eos, rx380_fail1140
    repr_bind_attr_int rx380_cur, rx380_curclass, "$!from", rx380_pos
  rxscan381_scan1145:
    nqp_rxmark rx380_bstack, rxscan381_loop1144, rx380_pos, 0
  rxscan381_done1146:
    ge rx380_pos, rx380_eos, rx380_fail1140
    is_cclass $I11, .CCLASS_WHITESPACE, rx380_tgt, rx380_pos
    unless $I11, rx380_fail1140
    add rx380_pos, 1
    repr_bind_attr_int rx380_cur, rx380_curclass, "$!pos", rx380_pos
    $P11 = rx380_cur."ws"()
    repr_get_attr_int $I11, $P11, rx380_curclass, "$!pos"
    lt $I11, 0, rx380_fail1140
    repr_get_attr_int rx380_pos, $P11, rx380_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt383_01149
    nqp_push_label $P11, alt383_11151
    nqp_rxmark rx380_bstack, alt383_end1148, -1, 0
    rx380_cur."!alt"(rx380_pos, "alt_nfa__16_1358115340.449", $P11)
    goto rx380_fail1140
  alt383_01149:
    ge rx380_pos, rx380_eos, rx380_fail1140
    substr $S11, rx380_tgt, rx380_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx380_fail1140
    repr_bind_attr_int rx380_cur, rx380_curclass, "$!pos", rx380_pos
    $P11 = rx380_cur."block"()
    repr_get_attr_int $I11, $P11, rx380_curclass, "$!pos"
    lt $I11, 0, rx380_fail1140
    nqp_rxmark rx380_bstack, rxsubrule384_pass1150, -1, 0
  rxsubrule384_pass1150:
    rx380_cstack = rx380_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx380_pos, $P11, rx380_curclass, "$!pos"
    goto alt383_end1148
  alt383_11151:
    repr_bind_attr_int rx380_cur, rx380_curclass, "$!pos", rx380_pos
    $P11 = rx380_cur."statement"()
    repr_get_attr_int $I11, $P11, rx380_curclass, "$!pos"
    lt $I11, 0, rx380_fail1140
    nqp_rxmark rx380_bstack, rxsubrule385_pass1152, -1, 0
  rxsubrule385_pass1152:
    rx380_cstack = rx380_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx380_pos, $P11, rx380_curclass, "$!pos"
    goto alt383_end1148
  alt383_end1148:
    nqp_rxcommit rx380_bstack, alt383_end1148
    rx380_cur."!cursor_pass"(rx380_pos, "blorst", 'backtrack'=>1)
    .return (rx380_cur)
  rx380_restart1139:
    repr_get_attr_obj rx380_cstack, rx380_cur, rx380_curclass, "$!cstack"
  rx380_fail1140:
    unless rx380_bstack, rx380_done1138
    pop $I19, rx380_bstack
    if_null rx380_cstack, rx380_cstack_done1143
    unless rx380_cstack, rx380_cstack_done1143
    dec $I19
    set $P11, rx380_cstack[$I19]
  rx380_cstack_done1143:
    pop rx380_rep, rx380_bstack
    pop rx380_pos, rx380_bstack
    pop $I19, rx380_bstack
    lt rx380_pos, -1, rx380_done1138
    lt rx380_pos, 0, rx380_fail1140
    eq $I19, 0, rx380_fail1140
    nqp_islist $I20, rx380_cstack
    unless $I20, rx380_jump1141
    elements $I18, rx380_bstack
    le $I18, 0, rx380_cut1142
    dec $I18
    set $I18, rx380_bstack[$I18]
  rx380_cut1142:
    assign rx380_cstack, $I18
  rx380_jump1141:
    jump $I19
  rx380_done1138:
    rx380_cur."!cursor_fail"()
    .return (rx380_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond" :subid("cuid_76_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 886
    .param pmc self 
    $P5001 = self."!protoregex"("statement_mod_cond")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<if>" :subid("cuid_77_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 888
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx386_tgt
    .local int rx386_pos
    .local int rx386_off
    .local int rx386_eos
    .local int rx386_rep
    .local pmc rx386_cur
    .local pmc rx386_curclass
    .local pmc rx386_bstack
    .local pmc rx386_cstack
    (rx386_cur, rx386_tgt, rx386_pos, rx386_curclass, rx386_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx386_cur
    length rx386_eos, rx386_tgt
    eq $I19, 1, rx386_restart1155
    gt rx386_pos, rx386_eos, rx386_fail1156
    repr_get_attr_int $I11, self, rx386_curclass, "$!from"
    ne $I11, -1, rxscan387_done1162
    goto rxscan387_scan1161
  rxscan387_loop1160:
    inc rx386_pos
    gt rx386_pos, rx386_eos, rx386_fail1156
    repr_bind_attr_int rx386_cur, rx386_curclass, "$!from", rx386_pos
  rxscan387_scan1161:
    nqp_rxmark rx386_bstack, rxscan387_loop1160, rx386_pos, 0
  rxscan387_done1162:
    nqp_rxmark rx386_bstack, rxcap388_fail1164, rx386_pos, 0
    add $I11, rx386_pos, 2
    gt $I11, rx386_eos, rx386_fail1156
    substr $S10, rx386_tgt, rx386_pos, 2
    ne $S10, ucs4:"if", rx386_fail1156
    add rx386_pos, 2
    nqp_rxpeek $I19, rx386_bstack, rxcap388_fail1164
    inc $I19
    set $I11, rx386_bstack[$I19]
    repr_bind_attr_int rx386_cur, rx386_curclass, "$!pos", rx386_pos
    $P11 = rx386_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx386_pos)
    rx386_cstack = rx386_cur."!cursor_capture"($P11, "sym")
    goto rxcap388_done1163
  rxcap388_fail1164:
    goto rx386_fail1156
  rxcap388_done1163:
    repr_bind_attr_int rx386_cur, rx386_curclass, "$!pos", rx386_pos
    $P11 = rx386_cur."ws"()
    repr_get_attr_int $I11, $P11, rx386_curclass, "$!pos"
    lt $I11, 0, rx386_fail1156
    repr_get_attr_int rx386_pos, $P11, rx386_curclass, "$!pos"
    repr_bind_attr_int rx386_cur, rx386_curclass, "$!pos", rx386_pos
    $P11 = rx386_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx386_curclass, "$!pos"
    lt $I11, 0, rx386_fail1156
    nqp_rxmark rx386_bstack, rxsubrule390_pass1166, -1, 0
  rxsubrule390_pass1166:
    rx386_cstack = rx386_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx386_pos, $P11, rx386_curclass, "$!pos"
    repr_bind_attr_int rx386_cur, rx386_curclass, "$!pos", rx386_pos
    $P11 = rx386_cur."ws"()
    repr_get_attr_int $I11, $P11, rx386_curclass, "$!pos"
    lt $I11, 0, rx386_fail1156
    repr_get_attr_int rx386_pos, $P11, rx386_curclass, "$!pos"
    rx386_cur."!cursor_pass"(rx386_pos, "statement_mod_cond:sym<if>", 'backtrack'=>1)
    .return (rx386_cur)
  rx386_restart1155:
    repr_get_attr_obj rx386_cstack, rx386_cur, rx386_curclass, "$!cstack"
  rx386_fail1156:
    unless rx386_bstack, rx386_done1154
    pop $I19, rx386_bstack
    if_null rx386_cstack, rx386_cstack_done1159
    unless rx386_cstack, rx386_cstack_done1159
    dec $I19
    set $P11, rx386_cstack[$I19]
  rx386_cstack_done1159:
    pop rx386_rep, rx386_bstack
    pop rx386_pos, rx386_bstack
    pop $I19, rx386_bstack
    lt rx386_pos, -1, rx386_done1154
    lt rx386_pos, 0, rx386_fail1156
    eq $I19, 0, rx386_fail1156
    nqp_islist $I20, rx386_cstack
    unless $I20, rx386_jump1157
    elements $I18, rx386_bstack
    le $I18, 0, rx386_cut1158
    dec $I18
    set $I18, rx386_bstack[$I18]
  rx386_cut1158:
    assign rx386_cstack, $I18
  rx386_jump1157:
    jump $I19
  rx386_done1154:
    rx386_cur."!cursor_fail"()
    .return (rx386_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<unless>" :subid("cuid_78_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 889
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx392_tgt
    .local int rx392_pos
    .local int rx392_off
    .local int rx392_eos
    .local int rx392_rep
    .local pmc rx392_cur
    .local pmc rx392_curclass
    .local pmc rx392_bstack
    .local pmc rx392_cstack
    (rx392_cur, rx392_tgt, rx392_pos, rx392_curclass, rx392_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx392_cur
    length rx392_eos, rx392_tgt
    eq $I19, 1, rx392_restart1170
    gt rx392_pos, rx392_eos, rx392_fail1171
    repr_get_attr_int $I11, self, rx392_curclass, "$!from"
    ne $I11, -1, rxscan393_done1177
    goto rxscan393_scan1176
  rxscan393_loop1175:
    inc rx392_pos
    gt rx392_pos, rx392_eos, rx392_fail1171
    repr_bind_attr_int rx392_cur, rx392_curclass, "$!from", rx392_pos
  rxscan393_scan1176:
    nqp_rxmark rx392_bstack, rxscan393_loop1175, rx392_pos, 0
  rxscan393_done1177:
    nqp_rxmark rx392_bstack, rxcap394_fail1179, rx392_pos, 0
    add $I11, rx392_pos, 6
    gt $I11, rx392_eos, rx392_fail1171
    substr $S10, rx392_tgt, rx392_pos, 6
    ne $S10, ucs4:"unless", rx392_fail1171
    add rx392_pos, 6
    nqp_rxpeek $I19, rx392_bstack, rxcap394_fail1179
    inc $I19
    set $I11, rx392_bstack[$I19]
    repr_bind_attr_int rx392_cur, rx392_curclass, "$!pos", rx392_pos
    $P11 = rx392_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx392_pos)
    rx392_cstack = rx392_cur."!cursor_capture"($P11, "sym")
    goto rxcap394_done1178
  rxcap394_fail1179:
    goto rx392_fail1171
  rxcap394_done1178:
    repr_bind_attr_int rx392_cur, rx392_curclass, "$!pos", rx392_pos
    $P11 = rx392_cur."ws"()
    repr_get_attr_int $I11, $P11, rx392_curclass, "$!pos"
    lt $I11, 0, rx392_fail1171
    repr_get_attr_int rx392_pos, $P11, rx392_curclass, "$!pos"
    repr_bind_attr_int rx392_cur, rx392_curclass, "$!pos", rx392_pos
    $P11 = rx392_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx392_curclass, "$!pos"
    lt $I11, 0, rx392_fail1171
    nqp_rxmark rx392_bstack, rxsubrule396_pass1181, -1, 0
  rxsubrule396_pass1181:
    rx392_cstack = rx392_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx392_pos, $P11, rx392_curclass, "$!pos"
    repr_bind_attr_int rx392_cur, rx392_curclass, "$!pos", rx392_pos
    $P11 = rx392_cur."ws"()
    repr_get_attr_int $I11, $P11, rx392_curclass, "$!pos"
    lt $I11, 0, rx392_fail1171
    repr_get_attr_int rx392_pos, $P11, rx392_curclass, "$!pos"
    rx392_cur."!cursor_pass"(rx392_pos, "statement_mod_cond:sym<unless>", 'backtrack'=>1)
    .return (rx392_cur)
  rx392_restart1170:
    repr_get_attr_obj rx392_cstack, rx392_cur, rx392_curclass, "$!cstack"
  rx392_fail1171:
    unless rx392_bstack, rx392_done1169
    pop $I19, rx392_bstack
    if_null rx392_cstack, rx392_cstack_done1174
    unless rx392_cstack, rx392_cstack_done1174
    dec $I19
    set $P11, rx392_cstack[$I19]
  rx392_cstack_done1174:
    pop rx392_rep, rx392_bstack
    pop rx392_pos, rx392_bstack
    pop $I19, rx392_bstack
    lt rx392_pos, -1, rx392_done1169
    lt rx392_pos, 0, rx392_fail1171
    eq $I19, 0, rx392_fail1171
    nqp_islist $I20, rx392_cstack
    unless $I20, rx392_jump1172
    elements $I18, rx392_bstack
    le $I18, 0, rx392_cut1173
    dec $I18
    set $I18, rx392_bstack[$I18]
  rx392_cut1173:
    assign rx392_cstack, $I18
  rx392_jump1172:
    jump $I19
  rx392_done1169:
    rx392_cur."!cursor_fail"()
    .return (rx392_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop" :subid("cuid_79_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 891
    .param pmc self 
    $P5001 = self."!protoregex"("statement_mod_loop")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<while>" :subid("cuid_80_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 893
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx398_tgt
    .local int rx398_pos
    .local int rx398_off
    .local int rx398_eos
    .local int rx398_rep
    .local pmc rx398_cur
    .local pmc rx398_curclass
    .local pmc rx398_bstack
    .local pmc rx398_cstack
    (rx398_cur, rx398_tgt, rx398_pos, rx398_curclass, rx398_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx398_cur
    length rx398_eos, rx398_tgt
    eq $I19, 1, rx398_restart1185
    gt rx398_pos, rx398_eos, rx398_fail1186
    repr_get_attr_int $I11, self, rx398_curclass, "$!from"
    ne $I11, -1, rxscan399_done1192
    goto rxscan399_scan1191
  rxscan399_loop1190:
    inc rx398_pos
    gt rx398_pos, rx398_eos, rx398_fail1186
    repr_bind_attr_int rx398_cur, rx398_curclass, "$!from", rx398_pos
  rxscan399_scan1191:
    nqp_rxmark rx398_bstack, rxscan399_loop1190, rx398_pos, 0
  rxscan399_done1192:
    nqp_rxmark rx398_bstack, rxcap400_fail1194, rx398_pos, 0
    add $I11, rx398_pos, 5
    gt $I11, rx398_eos, rx398_fail1186
    substr $S10, rx398_tgt, rx398_pos, 5
    ne $S10, ucs4:"while", rx398_fail1186
    add rx398_pos, 5
    nqp_rxpeek $I19, rx398_bstack, rxcap400_fail1194
    inc $I19
    set $I11, rx398_bstack[$I19]
    repr_bind_attr_int rx398_cur, rx398_curclass, "$!pos", rx398_pos
    $P11 = rx398_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx398_pos)
    rx398_cstack = rx398_cur."!cursor_capture"($P11, "sym")
    goto rxcap400_done1193
  rxcap400_fail1194:
    goto rx398_fail1186
  rxcap400_done1193:
    repr_bind_attr_int rx398_cur, rx398_curclass, "$!pos", rx398_pos
    $P11 = rx398_cur."ws"()
    repr_get_attr_int $I11, $P11, rx398_curclass, "$!pos"
    lt $I11, 0, rx398_fail1186
    repr_get_attr_int rx398_pos, $P11, rx398_curclass, "$!pos"
    repr_bind_attr_int rx398_cur, rx398_curclass, "$!pos", rx398_pos
    $P11 = rx398_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx398_curclass, "$!pos"
    lt $I11, 0, rx398_fail1186
    nqp_rxmark rx398_bstack, rxsubrule402_pass1196, -1, 0
  rxsubrule402_pass1196:
    rx398_cstack = rx398_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx398_pos, $P11, rx398_curclass, "$!pos"
    repr_bind_attr_int rx398_cur, rx398_curclass, "$!pos", rx398_pos
    $P11 = rx398_cur."ws"()
    repr_get_attr_int $I11, $P11, rx398_curclass, "$!pos"
    lt $I11, 0, rx398_fail1186
    repr_get_attr_int rx398_pos, $P11, rx398_curclass, "$!pos"
    rx398_cur."!cursor_pass"(rx398_pos, "statement_mod_loop:sym<while>", 'backtrack'=>1)
    .return (rx398_cur)
  rx398_restart1185:
    repr_get_attr_obj rx398_cstack, rx398_cur, rx398_curclass, "$!cstack"
  rx398_fail1186:
    unless rx398_bstack, rx398_done1184
    pop $I19, rx398_bstack
    if_null rx398_cstack, rx398_cstack_done1189
    unless rx398_cstack, rx398_cstack_done1189
    dec $I19
    set $P11, rx398_cstack[$I19]
  rx398_cstack_done1189:
    pop rx398_rep, rx398_bstack
    pop rx398_pos, rx398_bstack
    pop $I19, rx398_bstack
    lt rx398_pos, -1, rx398_done1184
    lt rx398_pos, 0, rx398_fail1186
    eq $I19, 0, rx398_fail1186
    nqp_islist $I20, rx398_cstack
    unless $I20, rx398_jump1187
    elements $I18, rx398_bstack
    le $I18, 0, rx398_cut1188
    dec $I18
    set $I18, rx398_bstack[$I18]
  rx398_cut1188:
    assign rx398_cstack, $I18
  rx398_jump1187:
    jump $I19
  rx398_done1184:
    rx398_cur."!cursor_fail"()
    .return (rx398_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<until>" :subid("cuid_81_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 894
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx404_tgt
    .local int rx404_pos
    .local int rx404_off
    .local int rx404_eos
    .local int rx404_rep
    .local pmc rx404_cur
    .local pmc rx404_curclass
    .local pmc rx404_bstack
    .local pmc rx404_cstack
    (rx404_cur, rx404_tgt, rx404_pos, rx404_curclass, rx404_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx404_cur
    length rx404_eos, rx404_tgt
    eq $I19, 1, rx404_restart1200
    gt rx404_pos, rx404_eos, rx404_fail1201
    repr_get_attr_int $I11, self, rx404_curclass, "$!from"
    ne $I11, -1, rxscan405_done1207
    goto rxscan405_scan1206
  rxscan405_loop1205:
    inc rx404_pos
    gt rx404_pos, rx404_eos, rx404_fail1201
    repr_bind_attr_int rx404_cur, rx404_curclass, "$!from", rx404_pos
  rxscan405_scan1206:
    nqp_rxmark rx404_bstack, rxscan405_loop1205, rx404_pos, 0
  rxscan405_done1207:
    nqp_rxmark rx404_bstack, rxcap406_fail1209, rx404_pos, 0
    add $I11, rx404_pos, 5
    gt $I11, rx404_eos, rx404_fail1201
    substr $S10, rx404_tgt, rx404_pos, 5
    ne $S10, ucs4:"until", rx404_fail1201
    add rx404_pos, 5
    nqp_rxpeek $I19, rx404_bstack, rxcap406_fail1209
    inc $I19
    set $I11, rx404_bstack[$I19]
    repr_bind_attr_int rx404_cur, rx404_curclass, "$!pos", rx404_pos
    $P11 = rx404_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx404_pos)
    rx404_cstack = rx404_cur."!cursor_capture"($P11, "sym")
    goto rxcap406_done1208
  rxcap406_fail1209:
    goto rx404_fail1201
  rxcap406_done1208:
    repr_bind_attr_int rx404_cur, rx404_curclass, "$!pos", rx404_pos
    $P11 = rx404_cur."ws"()
    repr_get_attr_int $I11, $P11, rx404_curclass, "$!pos"
    lt $I11, 0, rx404_fail1201
    repr_get_attr_int rx404_pos, $P11, rx404_curclass, "$!pos"
    repr_bind_attr_int rx404_cur, rx404_curclass, "$!pos", rx404_pos
    $P11 = rx404_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx404_curclass, "$!pos"
    lt $I11, 0, rx404_fail1201
    nqp_rxmark rx404_bstack, rxsubrule408_pass1211, -1, 0
  rxsubrule408_pass1211:
    rx404_cstack = rx404_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx404_pos, $P11, rx404_curclass, "$!pos"
    repr_bind_attr_int rx404_cur, rx404_curclass, "$!pos", rx404_pos
    $P11 = rx404_cur."ws"()
    repr_get_attr_int $I11, $P11, rx404_curclass, "$!pos"
    lt $I11, 0, rx404_fail1201
    repr_get_attr_int rx404_pos, $P11, rx404_curclass, "$!pos"
    rx404_cur."!cursor_pass"(rx404_pos, "statement_mod_loop:sym<until>", 'backtrack'=>1)
    .return (rx404_cur)
  rx404_restart1200:
    repr_get_attr_obj rx404_cstack, rx404_cur, rx404_curclass, "$!cstack"
  rx404_fail1201:
    unless rx404_bstack, rx404_done1199
    pop $I19, rx404_bstack
    if_null rx404_cstack, rx404_cstack_done1204
    unless rx404_cstack, rx404_cstack_done1204
    dec $I19
    set $P11, rx404_cstack[$I19]
  rx404_cstack_done1204:
    pop rx404_rep, rx404_bstack
    pop rx404_pos, rx404_bstack
    pop $I19, rx404_bstack
    lt rx404_pos, -1, rx404_done1199
    lt rx404_pos, 0, rx404_fail1201
    eq $I19, 0, rx404_fail1201
    nqp_islist $I20, rx404_cstack
    unless $I20, rx404_jump1202
    elements $I18, rx404_bstack
    le $I18, 0, rx404_cut1203
    dec $I18
    set $I18, rx404_bstack[$I18]
  rx404_cut1203:
    assign rx404_cstack, $I18
  rx404_jump1202:
    jump $I19
  rx404_done1199:
    rx404_cur."!cursor_fail"()
    .return (rx404_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<for>" :subid("cuid_82_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 895
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx410_tgt
    .local int rx410_pos
    .local int rx410_off
    .local int rx410_eos
    .local int rx410_rep
    .local pmc rx410_cur
    .local pmc rx410_curclass
    .local pmc rx410_bstack
    .local pmc rx410_cstack
    (rx410_cur, rx410_tgt, rx410_pos, rx410_curclass, rx410_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx410_cur
    length rx410_eos, rx410_tgt
    eq $I19, 1, rx410_restart1215
    gt rx410_pos, rx410_eos, rx410_fail1216
    repr_get_attr_int $I11, self, rx410_curclass, "$!from"
    ne $I11, -1, rxscan411_done1222
    goto rxscan411_scan1221
  rxscan411_loop1220:
    inc rx410_pos
    gt rx410_pos, rx410_eos, rx410_fail1216
    repr_bind_attr_int rx410_cur, rx410_curclass, "$!from", rx410_pos
  rxscan411_scan1221:
    nqp_rxmark rx410_bstack, rxscan411_loop1220, rx410_pos, 0
  rxscan411_done1222:
    nqp_rxmark rx410_bstack, rxcap412_fail1224, rx410_pos, 0
    add $I11, rx410_pos, 3
    gt $I11, rx410_eos, rx410_fail1216
    substr $S10, rx410_tgt, rx410_pos, 3
    ne $S10, ucs4:"for", rx410_fail1216
    add rx410_pos, 3
    nqp_rxpeek $I19, rx410_bstack, rxcap412_fail1224
    inc $I19
    set $I11, rx410_bstack[$I19]
    repr_bind_attr_int rx410_cur, rx410_curclass, "$!pos", rx410_pos
    $P11 = rx410_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx410_pos)
    rx410_cstack = rx410_cur."!cursor_capture"($P11, "sym")
    goto rxcap412_done1223
  rxcap412_fail1224:
    goto rx410_fail1216
  rxcap412_done1223:
    repr_bind_attr_int rx410_cur, rx410_curclass, "$!pos", rx410_pos
    $P11 = rx410_cur."ws"()
    repr_get_attr_int $I11, $P11, rx410_curclass, "$!pos"
    lt $I11, 0, rx410_fail1216
    repr_get_attr_int rx410_pos, $P11, rx410_curclass, "$!pos"
    repr_bind_attr_int rx410_cur, rx410_curclass, "$!pos", rx410_pos
    $P11 = rx410_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx410_curclass, "$!pos"
    lt $I11, 0, rx410_fail1216
    nqp_rxmark rx410_bstack, rxsubrule414_pass1226, -1, 0
  rxsubrule414_pass1226:
    rx410_cstack = rx410_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx410_pos, $P11, rx410_curclass, "$!pos"
    repr_bind_attr_int rx410_cur, rx410_curclass, "$!pos", rx410_pos
    $P11 = rx410_cur."ws"()
    repr_get_attr_int $I11, $P11, rx410_curclass, "$!pos"
    lt $I11, 0, rx410_fail1216
    repr_get_attr_int rx410_pos, $P11, rx410_curclass, "$!pos"
    rx410_cur."!cursor_pass"(rx410_pos, "statement_mod_loop:sym<for>", 'backtrack'=>1)
    .return (rx410_cur)
  rx410_restart1215:
    repr_get_attr_obj rx410_cstack, rx410_cur, rx410_curclass, "$!cstack"
  rx410_fail1216:
    unless rx410_bstack, rx410_done1214
    pop $I19, rx410_bstack
    if_null rx410_cstack, rx410_cstack_done1219
    unless rx410_cstack, rx410_cstack_done1219
    dec $I19
    set $P11, rx410_cstack[$I19]
  rx410_cstack_done1219:
    pop rx410_rep, rx410_bstack
    pop rx410_pos, rx410_bstack
    pop $I19, rx410_bstack
    lt rx410_pos, -1, rx410_done1214
    lt rx410_pos, 0, rx410_fail1216
    eq $I19, 0, rx410_fail1216
    nqp_islist $I20, rx410_cstack
    unless $I20, rx410_jump1217
    elements $I18, rx410_bstack
    le $I18, 0, rx410_cut1218
    dec $I18
    set $I18, rx410_bstack[$I18]
  rx410_cut1218:
    assign rx410_cstack, $I18
  rx410_jump1217:
    jump $I19
  rx410_done1214:
    rx410_cur."!cursor_fail"()
    .return (rx410_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<fatarrow>" :subid("cuid_83_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 899
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx416_tgt
    .local int rx416_pos
    .local int rx416_off
    .local int rx416_eos
    .local int rx416_rep
    .local pmc rx416_cur
    .local pmc rx416_curclass
    .local pmc rx416_bstack
    .local pmc rx416_cstack
    (rx416_cur, rx416_tgt, rx416_pos, rx416_curclass, rx416_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx416_cur
    length rx416_eos, rx416_tgt
    eq $I19, 1, rx416_restart1230
    gt rx416_pos, rx416_eos, rx416_fail1231
    repr_get_attr_int $I11, self, rx416_curclass, "$!from"
    ne $I11, -1, rxscan417_done1237
    goto rxscan417_scan1236
  rxscan417_loop1235:
    inc rx416_pos
    gt rx416_pos, rx416_eos, rx416_fail1231
    repr_bind_attr_int rx416_cur, rx416_curclass, "$!from", rx416_pos
  rxscan417_scan1236:
    nqp_rxmark rx416_bstack, rxscan417_loop1235, rx416_pos, 0
  rxscan417_done1237:
    repr_bind_attr_int rx416_cur, rx416_curclass, "$!pos", rx416_pos
    $P11 = rx416_cur."fatarrow"()
    repr_get_attr_int $I11, $P11, rx416_curclass, "$!pos"
    lt $I11, 0, rx416_fail1231
    nqp_rxmark rx416_bstack, rxsubrule418_pass1238, -1, 0
  rxsubrule418_pass1238:
    rx416_cstack = rx416_cur."!cursor_capture"($P11, "fatarrow")
    repr_get_attr_int rx416_pos, $P11, rx416_curclass, "$!pos"
    rx416_cur."!cursor_pass"(rx416_pos, "term:sym<fatarrow>", 'backtrack'=>1)
    .return (rx416_cur)
  rx416_restart1230:
    repr_get_attr_obj rx416_cstack, rx416_cur, rx416_curclass, "$!cstack"
  rx416_fail1231:
    unless rx416_bstack, rx416_done1229
    pop $I19, rx416_bstack
    if_null rx416_cstack, rx416_cstack_done1234
    unless rx416_cstack, rx416_cstack_done1234
    dec $I19
    set $P11, rx416_cstack[$I19]
  rx416_cstack_done1234:
    pop rx416_rep, rx416_bstack
    pop rx416_pos, rx416_bstack
    pop $I19, rx416_bstack
    lt rx416_pos, -1, rx416_done1229
    lt rx416_pos, 0, rx416_fail1231
    eq $I19, 0, rx416_fail1231
    nqp_islist $I20, rx416_cstack
    unless $I20, rx416_jump1232
    elements $I18, rx416_bstack
    le $I18, 0, rx416_cut1233
    dec $I18
    set $I18, rx416_bstack[$I18]
  rx416_cut1233:
    assign rx416_cstack, $I18
  rx416_jump1232:
    jump $I19
  rx416_done1229:
    rx416_cur."!cursor_fail"()
    .return (rx416_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<colonpair>" :subid("cuid_84_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 900
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx419_tgt
    .local int rx419_pos
    .local int rx419_off
    .local int rx419_eos
    .local int rx419_rep
    .local pmc rx419_cur
    .local pmc rx419_curclass
    .local pmc rx419_bstack
    .local pmc rx419_cstack
    (rx419_cur, rx419_tgt, rx419_pos, rx419_curclass, rx419_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx419_cur
    length rx419_eos, rx419_tgt
    eq $I19, 1, rx419_restart1241
    gt rx419_pos, rx419_eos, rx419_fail1242
    repr_get_attr_int $I11, self, rx419_curclass, "$!from"
    ne $I11, -1, rxscan420_done1248
    goto rxscan420_scan1247
  rxscan420_loop1246:
    inc rx419_pos
    gt rx419_pos, rx419_eos, rx419_fail1242
    repr_bind_attr_int rx419_cur, rx419_curclass, "$!from", rx419_pos
  rxscan420_scan1247:
    nqp_rxmark rx419_bstack, rxscan420_loop1246, rx419_pos, 0
  rxscan420_done1248:
    repr_bind_attr_int rx419_cur, rx419_curclass, "$!pos", rx419_pos
    $P11 = rx419_cur."colonpair"()
    repr_get_attr_int $I11, $P11, rx419_curclass, "$!pos"
    lt $I11, 0, rx419_fail1242
    nqp_rxmark rx419_bstack, rxsubrule421_pass1249, -1, 0
  rxsubrule421_pass1249:
    rx419_cstack = rx419_cur."!cursor_capture"($P11, "colonpair")
    repr_get_attr_int rx419_pos, $P11, rx419_curclass, "$!pos"
    rx419_cur."!cursor_pass"(rx419_pos, "term:sym<colonpair>", 'backtrack'=>1)
    .return (rx419_cur)
  rx419_restart1241:
    repr_get_attr_obj rx419_cstack, rx419_cur, rx419_curclass, "$!cstack"
  rx419_fail1242:
    unless rx419_bstack, rx419_done1240
    pop $I19, rx419_bstack
    if_null rx419_cstack, rx419_cstack_done1245
    unless rx419_cstack, rx419_cstack_done1245
    dec $I19
    set $P11, rx419_cstack[$I19]
  rx419_cstack_done1245:
    pop rx419_rep, rx419_bstack
    pop rx419_pos, rx419_bstack
    pop $I19, rx419_bstack
    lt rx419_pos, -1, rx419_done1240
    lt rx419_pos, 0, rx419_fail1242
    eq $I19, 0, rx419_fail1242
    nqp_islist $I20, rx419_cstack
    unless $I20, rx419_jump1243
    elements $I18, rx419_bstack
    le $I18, 0, rx419_cut1244
    dec $I18
    set $I18, rx419_bstack[$I18]
  rx419_cut1244:
    assign rx419_cstack, $I18
  rx419_jump1243:
    jump $I19
  rx419_done1240:
    rx419_cur."!cursor_fail"()
    .return (rx419_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<variable>" :subid("cuid_85_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 901
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx422_tgt
    .local int rx422_pos
    .local int rx422_off
    .local int rx422_eos
    .local int rx422_rep
    .local pmc rx422_cur
    .local pmc rx422_curclass
    .local pmc rx422_bstack
    .local pmc rx422_cstack
    (rx422_cur, rx422_tgt, rx422_pos, rx422_curclass, rx422_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx422_cur
    length rx422_eos, rx422_tgt
    eq $I19, 1, rx422_restart1252
    gt rx422_pos, rx422_eos, rx422_fail1253
    repr_get_attr_int $I11, self, rx422_curclass, "$!from"
    ne $I11, -1, rxscan423_done1259
    goto rxscan423_scan1258
  rxscan423_loop1257:
    inc rx422_pos
    gt rx422_pos, rx422_eos, rx422_fail1253
    repr_bind_attr_int rx422_cur, rx422_curclass, "$!from", rx422_pos
  rxscan423_scan1258:
    nqp_rxmark rx422_bstack, rxscan423_loop1257, rx422_pos, 0
  rxscan423_done1259:
    repr_bind_attr_int rx422_cur, rx422_curclass, "$!pos", rx422_pos
    $P11 = rx422_cur."variable"()
    repr_get_attr_int $I11, $P11, rx422_curclass, "$!pos"
    lt $I11, 0, rx422_fail1253
    nqp_rxmark rx422_bstack, rxsubrule424_pass1260, -1, 0
  rxsubrule424_pass1260:
    rx422_cstack = rx422_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx422_pos, $P11, rx422_curclass, "$!pos"
    rx422_cur."!cursor_pass"(rx422_pos, "term:sym<variable>", 'backtrack'=>1)
    .return (rx422_cur)
  rx422_restart1252:
    repr_get_attr_obj rx422_cstack, rx422_cur, rx422_curclass, "$!cstack"
  rx422_fail1253:
    unless rx422_bstack, rx422_done1251
    pop $I19, rx422_bstack
    if_null rx422_cstack, rx422_cstack_done1256
    unless rx422_cstack, rx422_cstack_done1256
    dec $I19
    set $P11, rx422_cstack[$I19]
  rx422_cstack_done1256:
    pop rx422_rep, rx422_bstack
    pop rx422_pos, rx422_bstack
    pop $I19, rx422_bstack
    lt rx422_pos, -1, rx422_done1251
    lt rx422_pos, 0, rx422_fail1253
    eq $I19, 0, rx422_fail1253
    nqp_islist $I20, rx422_cstack
    unless $I20, rx422_jump1254
    elements $I18, rx422_bstack
    le $I18, 0, rx422_cut1255
    dec $I18
    set $I18, rx422_bstack[$I18]
  rx422_cut1255:
    assign rx422_cstack, $I18
  rx422_jump1254:
    jump $I19
  rx422_done1251:
    rx422_cur."!cursor_fail"()
    .return (rx422_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<package_declarator>" :subid("cuid_86_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 902
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx425_tgt
    .local int rx425_pos
    .local int rx425_off
    .local int rx425_eos
    .local int rx425_rep
    .local pmc rx425_cur
    .local pmc rx425_curclass
    .local pmc rx425_bstack
    .local pmc rx425_cstack
    (rx425_cur, rx425_tgt, rx425_pos, rx425_curclass, rx425_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx425_cur
    length rx425_eos, rx425_tgt
    eq $I19, 1, rx425_restart1263
    gt rx425_pos, rx425_eos, rx425_fail1264
    repr_get_attr_int $I11, self, rx425_curclass, "$!from"
    ne $I11, -1, rxscan426_done1270
    goto rxscan426_scan1269
  rxscan426_loop1268:
    inc rx425_pos
    gt rx425_pos, rx425_eos, rx425_fail1264
    repr_bind_attr_int rx425_cur, rx425_curclass, "$!from", rx425_pos
  rxscan426_scan1269:
    nqp_rxmark rx425_bstack, rxscan426_loop1268, rx425_pos, 0
  rxscan426_done1270:
    repr_bind_attr_int rx425_cur, rx425_curclass, "$!pos", rx425_pos
    $P11 = rx425_cur."package_declarator"()
    repr_get_attr_int $I11, $P11, rx425_curclass, "$!pos"
    lt $I11, 0, rx425_fail1264
    nqp_rxmark rx425_bstack, rxsubrule427_pass1271, -1, 0
  rxsubrule427_pass1271:
    rx425_cstack = rx425_cur."!cursor_capture"($P11, "package_declarator")
    repr_get_attr_int rx425_pos, $P11, rx425_curclass, "$!pos"
    rx425_cur."!cursor_pass"(rx425_pos, "term:sym<package_declarator>", 'backtrack'=>1)
    .return (rx425_cur)
  rx425_restart1263:
    repr_get_attr_obj rx425_cstack, rx425_cur, rx425_curclass, "$!cstack"
  rx425_fail1264:
    unless rx425_bstack, rx425_done1262
    pop $I19, rx425_bstack
    if_null rx425_cstack, rx425_cstack_done1267
    unless rx425_cstack, rx425_cstack_done1267
    dec $I19
    set $P11, rx425_cstack[$I19]
  rx425_cstack_done1267:
    pop rx425_rep, rx425_bstack
    pop rx425_pos, rx425_bstack
    pop $I19, rx425_bstack
    lt rx425_pos, -1, rx425_done1262
    lt rx425_pos, 0, rx425_fail1264
    eq $I19, 0, rx425_fail1264
    nqp_islist $I20, rx425_cstack
    unless $I20, rx425_jump1265
    elements $I18, rx425_bstack
    le $I18, 0, rx425_cut1266
    dec $I18
    set $I18, rx425_bstack[$I18]
  rx425_cut1266:
    assign rx425_cstack, $I18
  rx425_jump1265:
    jump $I19
  rx425_done1262:
    rx425_cur."!cursor_fail"()
    .return (rx425_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<scope_declarator>" :subid("cuid_87_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 903
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx428_tgt
    .local int rx428_pos
    .local int rx428_off
    .local int rx428_eos
    .local int rx428_rep
    .local pmc rx428_cur
    .local pmc rx428_curclass
    .local pmc rx428_bstack
    .local pmc rx428_cstack
    (rx428_cur, rx428_tgt, rx428_pos, rx428_curclass, rx428_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx428_cur
    length rx428_eos, rx428_tgt
    eq $I19, 1, rx428_restart1274
    gt rx428_pos, rx428_eos, rx428_fail1275
    repr_get_attr_int $I11, self, rx428_curclass, "$!from"
    ne $I11, -1, rxscan429_done1281
    goto rxscan429_scan1280
  rxscan429_loop1279:
    inc rx428_pos
    gt rx428_pos, rx428_eos, rx428_fail1275
    repr_bind_attr_int rx428_cur, rx428_curclass, "$!from", rx428_pos
  rxscan429_scan1280:
    nqp_rxmark rx428_bstack, rxscan429_loop1279, rx428_pos, 0
  rxscan429_done1281:
    repr_bind_attr_int rx428_cur, rx428_curclass, "$!pos", rx428_pos
    $P11 = rx428_cur."scope_declarator"()
    repr_get_attr_int $I11, $P11, rx428_curclass, "$!pos"
    lt $I11, 0, rx428_fail1275
    nqp_rxmark rx428_bstack, rxsubrule430_pass1282, -1, 0
  rxsubrule430_pass1282:
    rx428_cstack = rx428_cur."!cursor_capture"($P11, "scope_declarator")
    repr_get_attr_int rx428_pos, $P11, rx428_curclass, "$!pos"
    rx428_cur."!cursor_pass"(rx428_pos, "term:sym<scope_declarator>", 'backtrack'=>1)
    .return (rx428_cur)
  rx428_restart1274:
    repr_get_attr_obj rx428_cstack, rx428_cur, rx428_curclass, "$!cstack"
  rx428_fail1275:
    unless rx428_bstack, rx428_done1273
    pop $I19, rx428_bstack
    if_null rx428_cstack, rx428_cstack_done1278
    unless rx428_cstack, rx428_cstack_done1278
    dec $I19
    set $P11, rx428_cstack[$I19]
  rx428_cstack_done1278:
    pop rx428_rep, rx428_bstack
    pop rx428_pos, rx428_bstack
    pop $I19, rx428_bstack
    lt rx428_pos, -1, rx428_done1273
    lt rx428_pos, 0, rx428_fail1275
    eq $I19, 0, rx428_fail1275
    nqp_islist $I20, rx428_cstack
    unless $I20, rx428_jump1276
    elements $I18, rx428_bstack
    le $I18, 0, rx428_cut1277
    dec $I18
    set $I18, rx428_bstack[$I18]
  rx428_cut1277:
    assign rx428_cstack, $I18
  rx428_jump1276:
    jump $I19
  rx428_done1273:
    rx428_cur."!cursor_fail"()
    .return (rx428_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<routine_declarator>" :subid("cuid_88_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 904
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx431_tgt
    .local int rx431_pos
    .local int rx431_off
    .local int rx431_eos
    .local int rx431_rep
    .local pmc rx431_cur
    .local pmc rx431_curclass
    .local pmc rx431_bstack
    .local pmc rx431_cstack
    (rx431_cur, rx431_tgt, rx431_pos, rx431_curclass, rx431_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx431_cur
    length rx431_eos, rx431_tgt
    eq $I19, 1, rx431_restart1285
    gt rx431_pos, rx431_eos, rx431_fail1286
    repr_get_attr_int $I11, self, rx431_curclass, "$!from"
    ne $I11, -1, rxscan432_done1292
    goto rxscan432_scan1291
  rxscan432_loop1290:
    inc rx431_pos
    gt rx431_pos, rx431_eos, rx431_fail1286
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!from", rx431_pos
  rxscan432_scan1291:
    nqp_rxmark rx431_bstack, rxscan432_loop1290, rx431_pos, 0
  rxscan432_done1292:
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!pos", rx431_pos
    $P11 = rx431_cur."routine_declarator"()
    repr_get_attr_int $I11, $P11, rx431_curclass, "$!pos"
    lt $I11, 0, rx431_fail1286
    nqp_rxmark rx431_bstack, rxsubrule433_pass1293, -1, 0
  rxsubrule433_pass1293:
    rx431_cstack = rx431_cur."!cursor_capture"($P11, "routine_declarator")
    repr_get_attr_int rx431_pos, $P11, rx431_curclass, "$!pos"
    rx431_cur."!cursor_pass"(rx431_pos, "term:sym<routine_declarator>", 'backtrack'=>1)
    .return (rx431_cur)
  rx431_restart1285:
    repr_get_attr_obj rx431_cstack, rx431_cur, rx431_curclass, "$!cstack"
  rx431_fail1286:
    unless rx431_bstack, rx431_done1284
    pop $I19, rx431_bstack
    if_null rx431_cstack, rx431_cstack_done1289
    unless rx431_cstack, rx431_cstack_done1289
    dec $I19
    set $P11, rx431_cstack[$I19]
  rx431_cstack_done1289:
    pop rx431_rep, rx431_bstack
    pop rx431_pos, rx431_bstack
    pop $I19, rx431_bstack
    lt rx431_pos, -1, rx431_done1284
    lt rx431_pos, 0, rx431_fail1286
    eq $I19, 0, rx431_fail1286
    nqp_islist $I20, rx431_cstack
    unless $I20, rx431_jump1287
    elements $I18, rx431_bstack
    le $I18, 0, rx431_cut1288
    dec $I18
    set $I18, rx431_bstack[$I18]
  rx431_cut1288:
    assign rx431_cstack, $I18
  rx431_jump1287:
    jump $I19
  rx431_done1284:
    rx431_cur."!cursor_fail"()
    .return (rx431_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<multi_declarator>" :subid("cuid_89_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 905
    .param pmc _lex_param_0 
    .const 'Sub' $P5003 = 'cuid_90_1358115338.889' 
    capture_lex $P5003 
    .const 'Sub' $P5003 = 'cuid_91_1358115338.889' 
    capture_lex $P5003 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx434_tgt
    .local int rx434_pos
    .local int rx434_off
    .local int rx434_eos
    .local int rx434_rep
    .local pmc rx434_cur
    .local pmc rx434_curclass
    .local pmc rx434_bstack
    .local pmc rx434_cstack
    (rx434_cur, rx434_tgt, rx434_pos, rx434_curclass, rx434_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx434_cur
    length rx434_eos, rx434_tgt
    eq $I19, 1, rx434_restart1296
    gt rx434_pos, rx434_eos, rx434_fail1297
    repr_get_attr_int $I11, self, rx434_curclass, "$!from"
    ne $I11, -1, rxscan435_done1303
    goto rxscan435_scan1302
  rxscan435_loop1301:
    inc rx434_pos
    gt rx434_pos, rx434_eos, rx434_fail1297
    repr_bind_attr_int rx434_cur, rx434_curclass, "$!from", rx434_pos
  rxscan435_scan1302:
    nqp_rxmark rx434_bstack, rxscan435_loop1301, rx434_pos, 0
  rxscan435_done1303:
    .const 'Sub' $P5001 = 'cuid_90_1358115338.889' 
    capture_lex $P5001
    repr_bind_attr_int rx434_cur, rx434_curclass, "$!pos", rx434_pos
    $P11 = rx434_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx434_curclass, "$!pos"
    lt $I11, 0, rx434_fail1297
    .const 'Sub' $P5002 = 'cuid_91_1358115338.889' 
    capture_lex $P5002
    repr_bind_attr_int rx434_cur, rx434_curclass, "$!pos", rx434_pos
    $P11 = rx434_cur."before"($P5002)
    repr_get_attr_int $I11, $P11, rx434_curclass, "$!pos"
    ge $I11, 0, rx434_fail1297
    repr_bind_attr_int rx434_cur, rx434_curclass, "$!pos", rx434_pos
    $P11 = rx434_cur."multi_declarator"()
    repr_get_attr_int $I11, $P11, rx434_curclass, "$!pos"
    lt $I11, 0, rx434_fail1297
    nqp_rxmark rx434_bstack, rxsubrule443_pass1333, -1, 0
  rxsubrule443_pass1333:
    rx434_cstack = rx434_cur."!cursor_capture"($P11, "multi_declarator")
    repr_get_attr_int rx434_pos, $P11, rx434_curclass, "$!pos"
    rx434_cur."!cursor_pass"(rx434_pos, "term:sym<multi_declarator>", 'backtrack'=>1)
    .return (rx434_cur)
  rx434_restart1296:
    repr_get_attr_obj rx434_cstack, rx434_cur, rx434_curclass, "$!cstack"
  rx434_fail1297:
    unless rx434_bstack, rx434_done1295
    pop $I19, rx434_bstack
    if_null rx434_cstack, rx434_cstack_done1300
    unless rx434_cstack, rx434_cstack_done1300
    dec $I19
    set $P11, rx434_cstack[$I19]
  rx434_cstack_done1300:
    pop rx434_rep, rx434_bstack
    pop rx434_pos, rx434_bstack
    pop $I19, rx434_bstack
    lt rx434_pos, -1, rx434_done1295
    lt rx434_pos, 0, rx434_fail1297
    eq $I19, 0, rx434_fail1297
    nqp_islist $I20, rx434_cstack
    unless $I20, rx434_jump1298
    elements $I18, rx434_bstack
    le $I18, 0, rx434_cut1299
    dec $I18
    set $I18, rx434_bstack[$I18]
  rx434_cut1299:
    assign rx434_cstack, $I18
  rx434_jump1298:
    jump $I19
  rx434_done1295:
    rx434_cur."!cursor_fail"()
    .return (rx434_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_90_1358115338.889") :anon :lex :outer("cuid_89_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx436_tgt
    .local int rx436_pos
    .local int rx436_off
    .local int rx436_eos
    .local int rx436_rep
    .local pmc rx436_cur
    .local pmc rx436_curclass
    .local pmc rx436_bstack
    .local pmc rx436_cstack
    (rx436_cur, rx436_tgt, rx436_pos, rx436_curclass, rx436_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx436_cur
    length rx436_eos, rx436_tgt
    eq $I19, 1, rx436_restart1306
    gt rx436_pos, rx436_eos, rx436_fail1307
    repr_get_attr_int $I11, self, rx436_curclass, "$!from"
    ne $I11, -1, rxscan437_done1313
    goto rxscan437_scan1312
  rxscan437_loop1311:
    inc rx436_pos
    gt rx436_pos, rx436_eos, rx436_fail1307
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!from", rx436_pos
  rxscan437_scan1312:
    nqp_rxmark rx436_bstack, rxscan437_loop1311, rx436_pos, 0
  rxscan437_done1313:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt438_01315
    nqp_push_label $P11, alt438_11316
    nqp_push_label $P11, alt438_21317
    nqp_rxmark rx436_bstack, alt438_end1314, -1, 0
    rx436_cur."!alt"(rx436_pos, "alt_nfa__17_1358115340.515", $P11)
    goto rx436_fail1307
  alt438_01315:
    add $I11, rx436_pos, 5
    gt $I11, rx436_eos, rx436_fail1307
    substr $S10, rx436_tgt, rx436_pos, 5
    ne $S10, ucs4:"multi", rx436_fail1307
    add rx436_pos, 5
    goto alt438_end1314
  alt438_11316:
    add $I11, rx436_pos, 5
    gt $I11, rx436_eos, rx436_fail1307
    substr $S10, rx436_tgt, rx436_pos, 5
    ne $S10, ucs4:"proto", rx436_fail1307
    add rx436_pos, 5
    goto alt438_end1314
  alt438_21317:
    add $I11, rx436_pos, 4
    gt $I11, rx436_eos, rx436_fail1307
    substr $S10, rx436_tgt, rx436_pos, 4
    ne $S10, ucs4:"only", rx436_fail1307
    add rx436_pos, 4
    goto alt438_end1314
  alt438_end1314:
    rx436_cur."!cursor_pass"(rx436_pos, 'backtrack'=>1)
    .return (rx436_cur)
  rx436_restart1306:
    repr_get_attr_obj rx436_cstack, rx436_cur, rx436_curclass, "$!cstack"
  rx436_fail1307:
    unless rx436_bstack, rx436_done1305
    pop $I19, rx436_bstack
    if_null rx436_cstack, rx436_cstack_done1310
    unless rx436_cstack, rx436_cstack_done1310
    dec $I19
    set $P11, rx436_cstack[$I19]
  rx436_cstack_done1310:
    pop rx436_rep, rx436_bstack
    pop rx436_pos, rx436_bstack
    pop $I19, rx436_bstack
    lt rx436_pos, -1, rx436_done1305
    lt rx436_pos, 0, rx436_fail1307
    eq $I19, 0, rx436_fail1307
    nqp_islist $I20, rx436_cstack
    unless $I20, rx436_jump1308
    elements $I18, rx436_bstack
    le $I18, 0, rx436_cut1309
    dec $I18
    set $I18, rx436_bstack[$I18]
  rx436_cut1309:
    assign rx436_cstack, $I18
  rx436_jump1308:
    jump $I19
  rx436_done1305:
    rx436_cur."!cursor_fail"()
    .return (rx436_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_91_1358115338.889") :anon :lex :outer("cuid_89_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx439_tgt
    .local int rx439_pos
    .local int rx439_off
    .local int rx439_eos
    .local int rx439_rep
    .local pmc rx439_cur
    .local pmc rx439_curclass
    .local pmc rx439_bstack
    .local pmc rx439_cstack
    (rx439_cur, rx439_tgt, rx439_pos, rx439_curclass, rx439_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx439_cur
    length rx439_eos, rx439_tgt
    eq $I19, 1, rx439_restart1320
    gt rx439_pos, rx439_eos, rx439_fail1321
    repr_get_attr_int $I11, self, rx439_curclass, "$!from"
    ne $I11, -1, rxscan440_done1327
    goto rxscan440_scan1326
  rxscan440_loop1325:
    inc rx439_pos
    gt rx439_pos, rx439_eos, rx439_fail1321
    repr_bind_attr_int rx439_cur, rx439_curclass, "$!from", rx439_pos
  rxscan440_scan1326:
    nqp_rxmark rx439_bstack, rxscan440_loop1325, rx439_pos, 0
  rxscan440_done1327:
    add $I11, rx439_pos, 5
    gt $I11, rx439_eos, rx439_fail1321
    substr $S10, rx439_tgt, rx439_pos, 5
    ne $S10, ucs4:"proto", rx439_fail1321
    add rx439_pos, 5
    repr_bind_attr_int rx439_cur, rx439_curclass, "$!pos", rx439_pos
    $P11 = rx439_cur."ws"()
    repr_get_attr_int $I11, $P11, rx439_curclass, "$!pos"
    lt $I11, 0, rx439_fail1321
    repr_get_attr_int rx439_pos, $P11, rx439_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt442_01330
    nqp_push_label $P11, alt442_11331
    nqp_push_label $P11, alt442_21332
    nqp_rxmark rx439_bstack, alt442_end1329, -1, 0
    rx439_cur."!alt"(rx439_pos, "alt_nfa__18_1358115340.523", $P11)
    goto rx439_fail1321
  alt442_01330:
    add $I11, rx439_pos, 5
    gt $I11, rx439_eos, rx439_fail1321
    substr $S10, rx439_tgt, rx439_pos, 5
    ne $S10, ucs4:"regex", rx439_fail1321
    add rx439_pos, 5
    goto alt442_end1329
  alt442_11331:
    add $I11, rx439_pos, 5
    gt $I11, rx439_eos, rx439_fail1321
    substr $S10, rx439_tgt, rx439_pos, 5
    ne $S10, ucs4:"token", rx439_fail1321
    add rx439_pos, 5
    goto alt442_end1329
  alt442_21332:
    add $I11, rx439_pos, 4
    gt $I11, rx439_eos, rx439_fail1321
    substr $S10, rx439_tgt, rx439_pos, 4
    ne $S10, ucs4:"rule", rx439_fail1321
    add rx439_pos, 4
    goto alt442_end1329
  alt442_end1329:
    nqp_rxcommit rx439_bstack, alt442_end1329
    rx439_cur."!cursor_pass"(rx439_pos, 'backtrack'=>1)
    .return (rx439_cur)
  rx439_restart1320:
    repr_get_attr_obj rx439_cstack, rx439_cur, rx439_curclass, "$!cstack"
  rx439_fail1321:
    unless rx439_bstack, rx439_done1319
    pop $I19, rx439_bstack
    if_null rx439_cstack, rx439_cstack_done1324
    unless rx439_cstack, rx439_cstack_done1324
    dec $I19
    set $P11, rx439_cstack[$I19]
  rx439_cstack_done1324:
    pop rx439_rep, rx439_bstack
    pop rx439_pos, rx439_bstack
    pop $I19, rx439_bstack
    lt rx439_pos, -1, rx439_done1319
    lt rx439_pos, 0, rx439_fail1321
    eq $I19, 0, rx439_fail1321
    nqp_islist $I20, rx439_cstack
    unless $I20, rx439_jump1322
    elements $I18, rx439_bstack
    le $I18, 0, rx439_cut1323
    dec $I18
    set $I18, rx439_bstack[$I18]
  rx439_cut1323:
    assign rx439_cstack, $I18
  rx439_jump1322:
    jump $I19
  rx439_done1319:
    rx439_cur."!cursor_fail"()
    .return (rx439_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<regex_declarator>" :subid("cuid_92_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 910
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx444_tgt
    .local int rx444_pos
    .local int rx444_off
    .local int rx444_eos
    .local int rx444_rep
    .local pmc rx444_cur
    .local pmc rx444_curclass
    .local pmc rx444_bstack
    .local pmc rx444_cstack
    (rx444_cur, rx444_tgt, rx444_pos, rx444_curclass, rx444_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx444_cur
    length rx444_eos, rx444_tgt
    eq $I19, 1, rx444_restart1336
    gt rx444_pos, rx444_eos, rx444_fail1337
    repr_get_attr_int $I11, self, rx444_curclass, "$!from"
    ne $I11, -1, rxscan445_done1343
    goto rxscan445_scan1342
  rxscan445_loop1341:
    inc rx444_pos
    gt rx444_pos, rx444_eos, rx444_fail1337
    repr_bind_attr_int rx444_cur, rx444_curclass, "$!from", rx444_pos
  rxscan445_scan1342:
    nqp_rxmark rx444_bstack, rxscan445_loop1341, rx444_pos, 0
  rxscan445_done1343:
    repr_bind_attr_int rx444_cur, rx444_curclass, "$!pos", rx444_pos
    $P11 = rx444_cur."regex_declarator"()
    repr_get_attr_int $I11, $P11, rx444_curclass, "$!pos"
    lt $I11, 0, rx444_fail1337
    nqp_rxmark rx444_bstack, rxsubrule446_pass1344, -1, 0
  rxsubrule446_pass1344:
    rx444_cstack = rx444_cur."!cursor_capture"($P11, "regex_declarator")
    repr_get_attr_int rx444_pos, $P11, rx444_curclass, "$!pos"
    rx444_cur."!cursor_pass"(rx444_pos, "term:sym<regex_declarator>", 'backtrack'=>1)
    .return (rx444_cur)
  rx444_restart1336:
    repr_get_attr_obj rx444_cstack, rx444_cur, rx444_curclass, "$!cstack"
  rx444_fail1337:
    unless rx444_bstack, rx444_done1335
    pop $I19, rx444_bstack
    if_null rx444_cstack, rx444_cstack_done1340
    unless rx444_cstack, rx444_cstack_done1340
    dec $I19
    set $P11, rx444_cstack[$I19]
  rx444_cstack_done1340:
    pop rx444_rep, rx444_bstack
    pop rx444_pos, rx444_bstack
    pop $I19, rx444_bstack
    lt rx444_pos, -1, rx444_done1335
    lt rx444_pos, 0, rx444_fail1337
    eq $I19, 0, rx444_fail1337
    nqp_islist $I20, rx444_cstack
    unless $I20, rx444_jump1338
    elements $I18, rx444_bstack
    le $I18, 0, rx444_cut1339
    dec $I18
    set $I18, rx444_bstack[$I18]
  rx444_cut1339:
    assign rx444_cstack, $I18
  rx444_jump1338:
    jump $I19
  rx444_done1335:
    rx444_cur."!cursor_fail"()
    .return (rx444_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<statement_prefix>" :subid("cuid_93_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 911
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx447_tgt
    .local int rx447_pos
    .local int rx447_off
    .local int rx447_eos
    .local int rx447_rep
    .local pmc rx447_cur
    .local pmc rx447_curclass
    .local pmc rx447_bstack
    .local pmc rx447_cstack
    (rx447_cur, rx447_tgt, rx447_pos, rx447_curclass, rx447_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx447_cur
    length rx447_eos, rx447_tgt
    eq $I19, 1, rx447_restart1347
    gt rx447_pos, rx447_eos, rx447_fail1348
    repr_get_attr_int $I11, self, rx447_curclass, "$!from"
    ne $I11, -1, rxscan448_done1354
    goto rxscan448_scan1353
  rxscan448_loop1352:
    inc rx447_pos
    gt rx447_pos, rx447_eos, rx447_fail1348
    repr_bind_attr_int rx447_cur, rx447_curclass, "$!from", rx447_pos
  rxscan448_scan1353:
    nqp_rxmark rx447_bstack, rxscan448_loop1352, rx447_pos, 0
  rxscan448_done1354:
    repr_bind_attr_int rx447_cur, rx447_curclass, "$!pos", rx447_pos
    $P11 = rx447_cur."statement_prefix"()
    repr_get_attr_int $I11, $P11, rx447_curclass, "$!pos"
    lt $I11, 0, rx447_fail1348
    nqp_rxmark rx447_bstack, rxsubrule449_pass1355, -1, 0
  rxsubrule449_pass1355:
    rx447_cstack = rx447_cur."!cursor_capture"($P11, "statement_prefix")
    repr_get_attr_int rx447_pos, $P11, rx447_curclass, "$!pos"
    rx447_cur."!cursor_pass"(rx447_pos, "term:sym<statement_prefix>", 'backtrack'=>1)
    .return (rx447_cur)
  rx447_restart1347:
    repr_get_attr_obj rx447_cstack, rx447_cur, rx447_curclass, "$!cstack"
  rx447_fail1348:
    unless rx447_bstack, rx447_done1346
    pop $I19, rx447_bstack
    if_null rx447_cstack, rx447_cstack_done1351
    unless rx447_cstack, rx447_cstack_done1351
    dec $I19
    set $P11, rx447_cstack[$I19]
  rx447_cstack_done1351:
    pop rx447_rep, rx447_bstack
    pop rx447_pos, rx447_bstack
    pop $I19, rx447_bstack
    lt rx447_pos, -1, rx447_done1346
    lt rx447_pos, 0, rx447_fail1348
    eq $I19, 0, rx447_fail1348
    nqp_islist $I20, rx447_cstack
    unless $I20, rx447_jump1349
    elements $I18, rx447_bstack
    le $I18, 0, rx447_cut1350
    dec $I18
    set $I18, rx447_bstack[$I18]
  rx447_cut1350:
    assign rx447_cstack, $I18
  rx447_jump1349:
    jump $I19
  rx447_done1346:
    rx447_cur."!cursor_fail"()
    .return (rx447_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<lambda>" :subid("cuid_94_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 912
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx450_tgt
    .local int rx450_pos
    .local int rx450_off
    .local int rx450_eos
    .local int rx450_rep
    .local pmc rx450_cur
    .local pmc rx450_curclass
    .local pmc rx450_bstack
    .local pmc rx450_cstack
    (rx450_cur, rx450_tgt, rx450_pos, rx450_curclass, rx450_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx450_cur
    length rx450_eos, rx450_tgt
    eq $I19, 1, rx450_restart1358
    gt rx450_pos, rx450_eos, rx450_fail1359
    repr_get_attr_int $I11, self, rx450_curclass, "$!from"
    ne $I11, -1, rxscan451_done1365
    goto rxscan451_scan1364
  rxscan451_loop1363:
    inc rx450_pos
    gt rx450_pos, rx450_eos, rx450_fail1359
    repr_bind_attr_int rx450_cur, rx450_curclass, "$!from", rx450_pos
  rxscan451_scan1364:
    nqp_rxmark rx450_bstack, rxscan451_loop1363, rx450_pos, 0
  rxscan451_done1365:
    repr_bind_attr_int rx450_cur, rx450_curclass, "$!pos", rx450_pos
    $P11 = rx450_cur."lambda"()
    repr_get_attr_int $I11, $P11, rx450_curclass, "$!pos"
    lt $I11, 0, rx450_fail1359
    repr_bind_attr_int rx450_cur, rx450_curclass, "$!pos", rx450_pos
    $P11 = rx450_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx450_curclass, "$!pos"
    lt $I11, 0, rx450_fail1359
    nqp_rxmark rx450_bstack, rxsubrule452_pass1366, -1, 0
  rxsubrule452_pass1366:
    rx450_cstack = rx450_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx450_pos, $P11, rx450_curclass, "$!pos"
    rx450_cur."!cursor_pass"(rx450_pos, "term:sym<lambda>", 'backtrack'=>1)
    .return (rx450_cur)
  rx450_restart1358:
    repr_get_attr_obj rx450_cstack, rx450_cur, rx450_curclass, "$!cstack"
  rx450_fail1359:
    unless rx450_bstack, rx450_done1357
    pop $I19, rx450_bstack
    if_null rx450_cstack, rx450_cstack_done1362
    unless rx450_cstack, rx450_cstack_done1362
    dec $I19
    set $P11, rx450_cstack[$I19]
  rx450_cstack_done1362:
    pop rx450_rep, rx450_bstack
    pop rx450_pos, rx450_bstack
    pop $I19, rx450_bstack
    lt rx450_pos, -1, rx450_done1357
    lt rx450_pos, 0, rx450_fail1359
    eq $I19, 0, rx450_fail1359
    nqp_islist $I20, rx450_cstack
    unless $I20, rx450_jump1360
    elements $I18, rx450_bstack
    le $I18, 0, rx450_cut1361
    dec $I18
    set $I18, rx450_bstack[$I18]
  rx450_cut1361:
    assign rx450_cstack, $I18
  rx450_jump1360:
    jump $I19
  rx450_done1357:
    rx450_cur."!cursor_fail"()
    .return (rx450_cur) 
.end
.HLL "nqp"
.namespace []
.sub "fatarrow" :subid("cuid_95_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 914
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx453_tgt
    .local int rx453_pos
    .local int rx453_off
    .local int rx453_eos
    .local int rx453_rep
    .local pmc rx453_cur
    .local pmc rx453_curclass
    .local pmc rx453_bstack
    .local pmc rx453_cstack
    (rx453_cur, rx453_tgt, rx453_pos, rx453_curclass, rx453_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx453_cur
    length rx453_eos, rx453_tgt
    eq $I19, 1, rx453_restart1369
    gt rx453_pos, rx453_eos, rx453_fail1370
    repr_get_attr_int $I11, self, rx453_curclass, "$!from"
    ne $I11, -1, rxscan454_done1376
    goto rxscan454_scan1375
  rxscan454_loop1374:
    inc rx453_pos
    gt rx453_pos, rx453_eos, rx453_fail1370
    repr_bind_attr_int rx453_cur, rx453_curclass, "$!from", rx453_pos
  rxscan454_scan1375:
    nqp_rxmark rx453_bstack, rxscan454_loop1374, rx453_pos, 0
  rxscan454_done1376:
    repr_bind_attr_int rx453_cur, rx453_curclass, "$!pos", rx453_pos
    $P11 = rx453_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx453_curclass, "$!pos"
    lt $I11, 0, rx453_fail1370
    nqp_rxmark rx453_bstack, rxsubrule455_pass1377, -1, 0
  rxsubrule455_pass1377:
    rx453_cstack = rx453_cur."!cursor_capture"($P11, "key")
    repr_get_attr_int rx453_pos, $P11, rx453_curclass, "$!pos"
    nqp_rxmark rx453_bstack, rxquantr456_done1379, rx453_pos, 0
  rxquantr456_loop1378:
    ge rx453_pos, rx453_eos, rx453_fail1370
    substr $S11, rx453_tgt, rx453_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx453_fail1370
    inc rx453_pos
    nqp_rxpeek $I19, rx453_bstack, rxquantr456_done1379
    inc $I19
    inc $I19
    set rx453_rep, rx453_bstack[$I19]
    nqp_rxcommit rx453_bstack, rxquantr456_done1379
    inc rx453_rep
    nqp_rxmark rx453_bstack, rxquantr456_done1379, rx453_pos, rx453_rep
    goto rxquantr456_loop1378
  rxquantr456_done1379:
    add $I11, rx453_pos, 2
    gt $I11, rx453_eos, rx453_fail1370
    substr $S10, rx453_tgt, rx453_pos, 2
    ne $S10, ucs4:"=>", rx453_fail1370
    add rx453_pos, 2
    repr_bind_attr_int rx453_cur, rx453_curclass, "$!pos", rx453_pos
    $P11 = rx453_cur."ws"()
    repr_get_attr_int $I11, $P11, rx453_curclass, "$!pos"
    lt $I11, 0, rx453_fail1370
    repr_get_attr_int rx453_pos, $P11, rx453_curclass, "$!pos"
    repr_bind_attr_int rx453_cur, rx453_curclass, "$!pos", rx453_pos
    $P11 = rx453_cur."EXPR"("i=")
    repr_get_attr_int $I11, $P11, rx453_curclass, "$!pos"
    lt $I11, 0, rx453_fail1370
    nqp_rxmark rx453_bstack, rxsubrule458_pass1381, -1, 0
  rxsubrule458_pass1381:
    rx453_cstack = rx453_cur."!cursor_capture"($P11, "val")
    repr_get_attr_int rx453_pos, $P11, rx453_curclass, "$!pos"
    rx453_cur."!cursor_pass"(rx453_pos, "fatarrow", 'backtrack'=>1)
    .return (rx453_cur)
  rx453_restart1369:
    repr_get_attr_obj rx453_cstack, rx453_cur, rx453_curclass, "$!cstack"
  rx453_fail1370:
    unless rx453_bstack, rx453_done1368
    pop $I19, rx453_bstack
    if_null rx453_cstack, rx453_cstack_done1373
    unless rx453_cstack, rx453_cstack_done1373
    dec $I19
    set $P11, rx453_cstack[$I19]
  rx453_cstack_done1373:
    pop rx453_rep, rx453_bstack
    pop rx453_pos, rx453_bstack
    pop $I19, rx453_bstack
    lt rx453_pos, -1, rx453_done1368
    lt rx453_pos, 0, rx453_fail1370
    eq $I19, 0, rx453_fail1370
    nqp_islist $I20, rx453_cstack
    unless $I20, rx453_jump1371
    elements $I18, rx453_bstack
    le $I18, 0, rx453_cut1372
    dec $I18
    set $I18, rx453_bstack[$I18]
  rx453_cut1372:
    assign rx453_cstack, $I18
  rx453_jump1371:
    jump $I19
  rx453_done1368:
    rx453_cur."!cursor_fail"()
    .return (rx453_cur) 
.end
.HLL "nqp"
.namespace []
.sub "colonpair" :subid("cuid_96_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 918
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx459_tgt
    .local int rx459_pos
    .local int rx459_off
    .local int rx459_eos
    .local int rx459_rep
    .local pmc rx459_cur
    .local pmc rx459_curclass
    .local pmc rx459_bstack
    .local pmc rx459_cstack
    (rx459_cur, rx459_tgt, rx459_pos, rx459_curclass, rx459_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx459_cur
    length rx459_eos, rx459_tgt
    eq $I19, 1, rx459_restart1384
    gt rx459_pos, rx459_eos, rx459_fail1385
    repr_get_attr_int $I11, self, rx459_curclass, "$!from"
    ne $I11, -1, rxscan460_done1391
    goto rxscan460_scan1390
  rxscan460_loop1389:
    inc rx459_pos
    gt rx459_pos, rx459_eos, rx459_fail1385
    repr_bind_attr_int rx459_cur, rx459_curclass, "$!from", rx459_pos
  rxscan460_scan1390:
    nqp_rxmark rx459_bstack, rxscan460_loop1389, rx459_pos, 0
  rxscan460_done1391:
    add $I11, rx459_pos, 1
    gt $I11, rx459_eos, rx459_fail1385
    substr $S10, rx459_tgt, rx459_pos, 1
    ne $S10, ucs4:":", rx459_fail1385
    add rx459_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt461_01393
    nqp_push_label $P11, alt461_11397
    nqp_push_label $P11, alt461_21403
    nqp_push_label $P11, alt461_31405
    nqp_rxmark rx459_bstack, alt461_end1392, -1, 0
    rx459_cur."!alt"(rx459_pos, "alt_nfa__19_1358115340.56", $P11)
    goto rx459_fail1385
  alt461_01393:
    nqp_rxmark rx459_bstack, rxcap462_fail1395, rx459_pos, 0
    add $I11, rx459_pos, 1
    gt $I11, rx459_eos, rx459_fail1385
    substr $S10, rx459_tgt, rx459_pos, 1
    ne $S10, ucs4:"!", rx459_fail1385
    add rx459_pos, 1
    nqp_rxpeek $I19, rx459_bstack, rxcap462_fail1395
    inc $I19
    set $I11, rx459_bstack[$I19]
    repr_bind_attr_int rx459_cur, rx459_curclass, "$!pos", rx459_pos
    $P11 = rx459_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx459_pos)
    rx459_cstack = rx459_cur."!cursor_capture"($P11, "not")
    goto rxcap462_done1394
  rxcap462_fail1395:
    goto rx459_fail1385
  rxcap462_done1394:
    repr_bind_attr_int rx459_cur, rx459_curclass, "$!pos", rx459_pos
    $P11 = rx459_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx459_curclass, "$!pos"
    lt $I11, 0, rx459_fail1385
    nqp_rxmark rx459_bstack, rxsubrule463_pass1396, -1, 0
  rxsubrule463_pass1396:
    rx459_cstack = rx459_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx459_pos, $P11, rx459_curclass, "$!pos"
    goto alt461_end1392
  alt461_11397:
    repr_bind_attr_int rx459_cur, rx459_curclass, "$!pos", rx459_pos
    $P11 = rx459_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx459_curclass, "$!pos"
    lt $I11, 0, rx459_fail1385
    nqp_rxmark rx459_bstack, rxsubrule464_pass1398, -1, 0
  rxsubrule464_pass1398:
    rx459_cstack = rx459_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx459_pos, $P11, rx459_curclass, "$!pos"
    nqp_rxmark rx459_bstack, rxquantr465_done1400, rx459_pos, 0
  rxquantr465_loop1399:
    repr_bind_attr_int rx459_cur, rx459_curclass, "$!pos", rx459_pos
    $P11 = rx459_cur."circumfix"()
    repr_get_attr_int $I11, $P11, rx459_curclass, "$!pos"
    lt $I11, 0, rx459_fail1385
    goto rxsubrule466_pass1401
  rxsubrule466_back1402:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx459_curclass, "$!pos"
    lt $I11, 0, rx459_fail1385
  rxsubrule466_pass1401:
    rx459_cstack = rx459_cur."!cursor_capture"($P11, "circumfix")
    set_addr $I11, rxsubrule466_back1402
    push rx459_bstack, $I11
    push rx459_bstack, 0
    push rx459_bstack, rx459_pos
    elements $I11, rx459_cstack
    push rx459_bstack, $I11
    repr_get_attr_int rx459_pos, $P11, rx459_curclass, "$!pos"
    nqp_rxpeek $I19, rx459_bstack, rxquantr465_done1400
    inc $I19
    inc $I19
    set rx459_rep, rx459_bstack[$I19]
    nqp_rxcommit rx459_bstack, rxquantr465_done1400
    inc rx459_rep
  rxquantr465_done1400:
    goto alt461_end1392
  alt461_21403:
    repr_bind_attr_int rx459_cur, rx459_curclass, "$!pos", rx459_pos
    $P11 = rx459_cur."circumfix"()
    repr_get_attr_int $I11, $P11, rx459_curclass, "$!pos"
    lt $I11, 0, rx459_fail1385
    nqp_rxmark rx459_bstack, rxsubrule467_pass1404, -1, 0
  rxsubrule467_pass1404:
    rx459_cstack = rx459_cur."!cursor_capture"($P11, "circumfix")
    repr_get_attr_int rx459_pos, $P11, rx459_curclass, "$!pos"
    goto alt461_end1392
  alt461_31405:
    repr_bind_attr_int rx459_cur, rx459_curclass, "$!pos", rx459_pos
    $P11 = rx459_cur."variable"()
    repr_get_attr_int $I11, $P11, rx459_curclass, "$!pos"
    lt $I11, 0, rx459_fail1385
    nqp_rxmark rx459_bstack, rxsubrule468_pass1406, -1, 0
  rxsubrule468_pass1406:
    rx459_cstack = rx459_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx459_pos, $P11, rx459_curclass, "$!pos"
    goto alt461_end1392
  alt461_end1392:
    nqp_rxcommit rx459_bstack, alt461_end1392
    rx459_cur."!cursor_pass"(rx459_pos, "colonpair", 'backtrack'=>1)
    .return (rx459_cur)
  rx459_restart1384:
    repr_get_attr_obj rx459_cstack, rx459_cur, rx459_curclass, "$!cstack"
  rx459_fail1385:
    unless rx459_bstack, rx459_done1383
    pop $I19, rx459_bstack
    if_null rx459_cstack, rx459_cstack_done1388
    unless rx459_cstack, rx459_cstack_done1388
    dec $I19
    set $P11, rx459_cstack[$I19]
  rx459_cstack_done1388:
    pop rx459_rep, rx459_bstack
    pop rx459_pos, rx459_bstack
    pop $I19, rx459_bstack
    lt rx459_pos, -1, rx459_done1383
    lt rx459_pos, 0, rx459_fail1385
    eq $I19, 0, rx459_fail1385
    nqp_islist $I20, rx459_cstack
    unless $I20, rx459_jump1386
    elements $I18, rx459_bstack
    le $I18, 0, rx459_cut1387
    dec $I18
    set $I18, rx459_bstack[$I18]
  rx459_cut1387:
    assign rx459_cstack, $I18
  rx459_jump1386:
    jump $I19
  rx459_done1383:
    rx459_cur."!cursor_fail"()
    .return (rx459_cur) 
.end
.HLL "nqp"
.namespace []
.sub "variable" :subid("cuid_97_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 928
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx469_tgt
    .local int rx469_pos
    .local int rx469_off
    .local int rx469_eos
    .local int rx469_rep
    .local pmc rx469_cur
    .local pmc rx469_curclass
    .local pmc rx469_bstack
    .local pmc rx469_cstack
    (rx469_cur, rx469_tgt, rx469_pos, rx469_curclass, rx469_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx469_cur
    length rx469_eos, rx469_tgt
    eq $I19, 1, rx469_restart1409
    gt rx469_pos, rx469_eos, rx469_fail1410
    repr_get_attr_int $I11, self, rx469_curclass, "$!from"
    ne $I11, -1, rxscan470_done1416
    goto rxscan470_scan1415
  rxscan470_loop1414:
    inc rx469_pos
    gt rx469_pos, rx469_eos, rx469_fail1410
    repr_bind_attr_int rx469_cur, rx469_curclass, "$!from", rx469_pos
  rxscan470_scan1415:
    nqp_rxmark rx469_bstack, rxscan470_loop1414, rx469_pos, 0
  rxscan470_done1416:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt471_01418
    nqp_push_label $P11, alt471_11425
    nqp_push_label $P11, alt471_21428
    nqp_rxmark rx469_bstack, alt471_end1417, -1, 0
    rx469_cur."!alt"(rx469_pos, "alt_nfa__20_1358115340.574", $P11)
    goto rx469_fail1410
  alt471_01418:
    repr_bind_attr_int rx469_cur, rx469_curclass, "$!pos", rx469_pos
    $P11 = rx469_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx469_curclass, "$!pos"
    lt $I11, 0, rx469_fail1410
    nqp_rxmark rx469_bstack, rxsubrule472_pass1419, -1, 0
  rxsubrule472_pass1419:
    rx469_cstack = rx469_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx469_pos, $P11, rx469_curclass, "$!pos"
    nqp_rxmark rx469_bstack, rxquantr473_done1421, rx469_pos, 0
  rxquantr473_loop1420:
    repr_bind_attr_int rx469_cur, rx469_curclass, "$!pos", rx469_pos
    $P11 = rx469_cur."twigil"()
    repr_get_attr_int $I11, $P11, rx469_curclass, "$!pos"
    lt $I11, 0, rx469_fail1410
    goto rxsubrule474_pass1422
  rxsubrule474_back1423:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx469_curclass, "$!pos"
    lt $I11, 0, rx469_fail1410
  rxsubrule474_pass1422:
    rx469_cstack = rx469_cur."!cursor_capture"($P11, "twigil")
    set_addr $I11, rxsubrule474_back1423
    push rx469_bstack, $I11
    push rx469_bstack, 0
    push rx469_bstack, rx469_pos
    elements $I11, rx469_cstack
    push rx469_bstack, $I11
    repr_get_attr_int rx469_pos, $P11, rx469_curclass, "$!pos"
    nqp_rxpeek $I19, rx469_bstack, rxquantr473_done1421
    inc $I19
    inc $I19
    set rx469_rep, rx469_bstack[$I19]
    nqp_rxcommit rx469_bstack, rxquantr473_done1421
    inc rx469_rep
  rxquantr473_done1421:
    repr_bind_attr_int rx469_cur, rx469_curclass, "$!pos", rx469_pos
    $P11 = rx469_cur."name"()
    repr_get_attr_int $I11, $P11, rx469_curclass, "$!pos"
    lt $I11, 0, rx469_fail1410
    nqp_rxmark rx469_bstack, rxsubrule475_pass1424, -1, 0
  rxsubrule475_pass1424:
    rx469_cstack = rx469_cur."!cursor_capture"($P11, "desigilname")
    repr_get_attr_int rx469_pos, $P11, rx469_curclass, "$!pos"
    goto alt471_end1417
  alt471_11425:
    repr_bind_attr_int rx469_cur, rx469_curclass, "$!pos", rx469_pos
    $P11 = rx469_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx469_curclass, "$!pos"
    lt $I11, 0, rx469_fail1410
    nqp_rxmark rx469_bstack, rxsubrule476_pass1426, -1, 0
  rxsubrule476_pass1426:
    rx469_cstack = rx469_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx469_pos, $P11, rx469_curclass, "$!pos"
    ge rx469_pos, rx469_eos, rx469_fail1410
    substr $S11, rx469_tgt, rx469_pos, 1
    index $I11, ucs4:"<[", $S11
    lt $I11, 0, rx469_fail1410
    repr_bind_attr_int rx469_cur, rx469_curclass, "$!pos", rx469_pos
    $P11 = rx469_cur."postcircumfix"()
    repr_get_attr_int $I11, $P11, rx469_curclass, "$!pos"
    lt $I11, 0, rx469_fail1410
    nqp_rxmark rx469_bstack, rxsubrule477_pass1427, -1, 0
  rxsubrule477_pass1427:
    rx469_cstack = rx469_cur."!cursor_capture"($P11, "postcircumfix")
    repr_get_attr_int rx469_pos, $P11, rx469_curclass, "$!pos"
    goto alt471_end1417
  alt471_21428:
    nqp_rxmark rx469_bstack, rxcap478_fail1430, rx469_pos, 0
    add $I11, rx469_pos, 1
    gt $I11, rx469_eos, rx469_fail1410
    substr $S10, rx469_tgt, rx469_pos, 1
    ne $S10, ucs4:"$", rx469_fail1410
    add rx469_pos, 1
    nqp_rxpeek $I19, rx469_bstack, rxcap478_fail1430
    inc $I19
    set $I11, rx469_bstack[$I19]
    repr_bind_attr_int rx469_cur, rx469_curclass, "$!pos", rx469_pos
    $P11 = rx469_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx469_pos)
    rx469_cstack = rx469_cur."!cursor_capture"($P11, "sigil")
    goto rxcap478_done1429
  rxcap478_fail1430:
    goto rx469_fail1410
  rxcap478_done1429:
    nqp_rxmark rx469_bstack, rxcap479_fail1432, rx469_pos, 0
    ge rx469_pos, rx469_eos, rx469_fail1410
    substr $S11, rx469_tgt, rx469_pos, 1
    index $I11, ucs4:"/_!", $S11
    lt $I11, 0, rx469_fail1410
    inc rx469_pos
    nqp_rxpeek $I19, rx469_bstack, rxcap479_fail1432
    inc $I19
    set $I11, rx469_bstack[$I19]
    repr_bind_attr_int rx469_cur, rx469_curclass, "$!pos", rx469_pos
    $P11 = rx469_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx469_pos)
    rx469_cstack = rx469_cur."!cursor_capture"($P11, "desigilname")
    goto rxcap479_done1431
  rxcap479_fail1432:
    goto rx469_fail1410
  rxcap479_done1431:
    goto alt471_end1417
  alt471_end1417:
    rx469_cur."!cursor_pass"(rx469_pos, "variable", 'backtrack'=>1)
    .return (rx469_cur)
  rx469_restart1409:
    repr_get_attr_obj rx469_cstack, rx469_cur, rx469_curclass, "$!cstack"
  rx469_fail1410:
    unless rx469_bstack, rx469_done1408
    pop $I19, rx469_bstack
    if_null rx469_cstack, rx469_cstack_done1413
    unless rx469_cstack, rx469_cstack_done1413
    dec $I19
    set $P11, rx469_cstack[$I19]
  rx469_cstack_done1413:
    pop rx469_rep, rx469_bstack
    pop rx469_pos, rx469_bstack
    pop $I19, rx469_bstack
    lt rx469_pos, -1, rx469_done1408
    lt rx469_pos, 0, rx469_fail1410
    eq $I19, 0, rx469_fail1410
    nqp_islist $I20, rx469_cstack
    unless $I20, rx469_jump1411
    elements $I18, rx469_bstack
    le $I18, 0, rx469_cut1412
    dec $I18
    set $I18, rx469_bstack[$I18]
  rx469_cut1412:
    assign rx469_cstack, $I18
  rx469_jump1411:
    jump $I19
  rx469_done1408:
    rx469_cur."!cursor_fail"()
    .return (rx469_cur) 
.end
.HLL "nqp"
.namespace []
.sub "sigil" :subid("cuid_98_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 934
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx480_tgt
    .local int rx480_pos
    .local int rx480_off
    .local int rx480_eos
    .local int rx480_rep
    .local pmc rx480_cur
    .local pmc rx480_curclass
    .local pmc rx480_bstack
    .local pmc rx480_cstack
    (rx480_cur, rx480_tgt, rx480_pos, rx480_curclass, rx480_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx480_cur
    length rx480_eos, rx480_tgt
    eq $I19, 1, rx480_restart1435
    gt rx480_pos, rx480_eos, rx480_fail1436
    repr_get_attr_int $I11, self, rx480_curclass, "$!from"
    ne $I11, -1, rxscan481_done1442
    goto rxscan481_scan1441
  rxscan481_loop1440:
    inc rx480_pos
    gt rx480_pos, rx480_eos, rx480_fail1436
    repr_bind_attr_int rx480_cur, rx480_curclass, "$!from", rx480_pos
  rxscan481_scan1441:
    nqp_rxmark rx480_bstack, rxscan481_loop1440, rx480_pos, 0
  rxscan481_done1442:
    ge rx480_pos, rx480_eos, rx480_fail1436
    substr $S11, rx480_tgt, rx480_pos, 1
    index $I11, ucs4:"$@%&", $S11
    lt $I11, 0, rx480_fail1436
    inc rx480_pos
    rx480_cur."!cursor_pass"(rx480_pos, "sigil", 'backtrack'=>1)
    .return (rx480_cur)
  rx480_restart1435:
    repr_get_attr_obj rx480_cstack, rx480_cur, rx480_curclass, "$!cstack"
  rx480_fail1436:
    unless rx480_bstack, rx480_done1434
    pop $I19, rx480_bstack
    if_null rx480_cstack, rx480_cstack_done1439
    unless rx480_cstack, rx480_cstack_done1439
    dec $I19
    set $P11, rx480_cstack[$I19]
  rx480_cstack_done1439:
    pop rx480_rep, rx480_bstack
    pop rx480_pos, rx480_bstack
    pop $I19, rx480_bstack
    lt rx480_pos, -1, rx480_done1434
    lt rx480_pos, 0, rx480_fail1436
    eq $I19, 0, rx480_fail1436
    nqp_islist $I20, rx480_cstack
    unless $I20, rx480_jump1437
    elements $I18, rx480_bstack
    le $I18, 0, rx480_cut1438
    dec $I18
    set $I18, rx480_bstack[$I18]
  rx480_cut1438:
    assign rx480_cstack, $I18
  rx480_jump1437:
    jump $I19
  rx480_done1434:
    rx480_cur."!cursor_fail"()
    .return (rx480_cur) 
.end
.HLL "nqp"
.namespace []
.sub "twigil" :subid("cuid_99_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 936
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx482_tgt
    .local int rx482_pos
    .local int rx482_off
    .local int rx482_eos
    .local int rx482_rep
    .local pmc rx482_cur
    .local pmc rx482_curclass
    .local pmc rx482_bstack
    .local pmc rx482_cstack
    (rx482_cur, rx482_tgt, rx482_pos, rx482_curclass, rx482_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx482_cur
    length rx482_eos, rx482_tgt
    eq $I19, 1, rx482_restart1445
    gt rx482_pos, rx482_eos, rx482_fail1446
    repr_get_attr_int $I11, self, rx482_curclass, "$!from"
    ne $I11, -1, rxscan483_done1452
    goto rxscan483_scan1451
  rxscan483_loop1450:
    inc rx482_pos
    gt rx482_pos, rx482_eos, rx482_fail1446
    repr_bind_attr_int rx482_cur, rx482_curclass, "$!from", rx482_pos
  rxscan483_scan1451:
    nqp_rxmark rx482_bstack, rxscan483_loop1450, rx482_pos, 0
  rxscan483_done1452:
    ge rx482_pos, rx482_eos, rx482_fail1446
    substr $S11, rx482_tgt, rx482_pos, 1
    index $I11, ucs4:"*!?", $S11
    lt $I11, 0, rx482_fail1446
    inc rx482_pos
    rx482_cur."!cursor_pass"(rx482_pos, "twigil", 'backtrack'=>1)
    .return (rx482_cur)
  rx482_restart1445:
    repr_get_attr_obj rx482_cstack, rx482_cur, rx482_curclass, "$!cstack"
  rx482_fail1446:
    unless rx482_bstack, rx482_done1444
    pop $I19, rx482_bstack
    if_null rx482_cstack, rx482_cstack_done1449
    unless rx482_cstack, rx482_cstack_done1449
    dec $I19
    set $P11, rx482_cstack[$I19]
  rx482_cstack_done1449:
    pop rx482_rep, rx482_bstack
    pop rx482_pos, rx482_bstack
    pop $I19, rx482_bstack
    lt rx482_pos, -1, rx482_done1444
    lt rx482_pos, 0, rx482_fail1446
    eq $I19, 0, rx482_fail1446
    nqp_islist $I20, rx482_cstack
    unless $I20, rx482_jump1447
    elements $I18, rx482_bstack
    le $I18, 0, rx482_cut1448
    dec $I18
    set $I18, rx482_bstack[$I18]
  rx482_cut1448:
    assign rx482_cstack, $I18
  rx482_jump1447:
    jump $I19
  rx482_done1444:
    rx482_cur."!cursor_fail"()
    .return (rx482_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator" :subid("cuid_100_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 938
    .param pmc self 
    $P5001 = self."!protoregex"("package_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<module>" :subid("cuid_101_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 939
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx484_tgt
    .local int rx484_pos
    .local int rx484_off
    .local int rx484_eos
    .local int rx484_rep
    .local pmc rx484_cur
    .local pmc rx484_curclass
    .local pmc rx484_bstack
    .local pmc rx484_cstack
    (rx484_cur, rx484_tgt, rx484_pos, rx484_curclass, rx484_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx484_cur
    length rx484_eos, rx484_tgt
    eq $I19, 1, rx484_restart1455
    gt rx484_pos, rx484_eos, rx484_fail1456
    repr_get_attr_int $I11, self, rx484_curclass, "$!from"
    ne $I11, -1, rxscan485_done1462
    goto rxscan485_scan1461
  rxscan485_loop1460:
    inc rx484_pos
    gt rx484_pos, rx484_eos, rx484_fail1456
    repr_bind_attr_int rx484_cur, rx484_curclass, "$!from", rx484_pos
  rxscan485_scan1461:
    nqp_rxmark rx484_bstack, rxscan485_loop1460, rx484_pos, 0
  rxscan485_done1462:
    repr_bind_attr_int rx484_cur, rx484_curclass, "$!pos", rx484_pos
    store_lex unicode:"$\x{a2}", rx484_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1463
    nqp_get_sc_object $P5006, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1464
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5007
  fallback1464:
    unless_null $P5004, vivi_4861465
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4861465:
    set $P5003, $P5004
  fallback1463:
    set $P101, $P5003
    repr_bind_attr_int rx484_cur, rx484_curclass, "$!pos", rx484_pos
    store_lex unicode:"$\x{a2}", rx484_cur
    box $P5009, "module"
    set $P102, $P5009
    nqp_rxmark rx484_bstack, rxcap487_fail1467, rx484_pos, 0
    add $I11, rx484_pos, 6
    gt $I11, rx484_eos, rx484_fail1456
    substr $S10, rx484_tgt, rx484_pos, 6
    ne $S10, ucs4:"module", rx484_fail1456
    add rx484_pos, 6
    nqp_rxpeek $I19, rx484_bstack, rxcap487_fail1467
    inc $I19
    set $I11, rx484_bstack[$I19]
    repr_bind_attr_int rx484_cur, rx484_curclass, "$!pos", rx484_pos
    $P11 = rx484_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx484_pos)
    rx484_cstack = rx484_cur."!cursor_capture"($P11, "sym")
    goto rxcap487_done1466
  rxcap487_fail1467:
    goto rx484_fail1456
  rxcap487_done1466:
    repr_bind_attr_int rx484_cur, rx484_curclass, "$!pos", rx484_pos
    $P11 = rx484_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx484_curclass, "$!pos"
    lt $I11, 0, rx484_fail1456
    nqp_rxmark rx484_bstack, rxsubrule488_pass1468, -1, 0
  rxsubrule488_pass1468:
    rx484_cstack = rx484_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx484_pos, $P11, rx484_curclass, "$!pos"
    rx484_cur."!cursor_pass"(rx484_pos, "package_declarator:sym<module>", 'backtrack'=>1)
    .return (rx484_cur)
  rx484_restart1455:
    repr_get_attr_obj rx484_cstack, rx484_cur, rx484_curclass, "$!cstack"
  rx484_fail1456:
    unless rx484_bstack, rx484_done1454
    pop $I19, rx484_bstack
    if_null rx484_cstack, rx484_cstack_done1459
    unless rx484_cstack, rx484_cstack_done1459
    dec $I19
    set $P11, rx484_cstack[$I19]
  rx484_cstack_done1459:
    pop rx484_rep, rx484_bstack
    pop rx484_pos, rx484_bstack
    pop $I19, rx484_bstack
    lt rx484_pos, -1, rx484_done1454
    lt rx484_pos, 0, rx484_fail1456
    eq $I19, 0, rx484_fail1456
    nqp_islist $I20, rx484_cstack
    unless $I20, rx484_jump1457
    elements $I18, rx484_bstack
    le $I18, 0, rx484_cut1458
    dec $I18
    set $I18, rx484_bstack[$I18]
  rx484_cut1458:
    assign rx484_cstack, $I18
  rx484_jump1457:
    jump $I19
  rx484_done1454:
    rx484_cur."!cursor_fail"()
    .return (rx484_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<knowhow>" :subid("cuid_102_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 944
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx489_tgt
    .local int rx489_pos
    .local int rx489_off
    .local int rx489_eos
    .local int rx489_rep
    .local pmc rx489_cur
    .local pmc rx489_curclass
    .local pmc rx489_bstack
    .local pmc rx489_cstack
    (rx489_cur, rx489_tgt, rx489_pos, rx489_curclass, rx489_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx489_cur
    length rx489_eos, rx489_tgt
    eq $I19, 1, rx489_restart1471
    gt rx489_pos, rx489_eos, rx489_fail1472
    repr_get_attr_int $I11, self, rx489_curclass, "$!from"
    ne $I11, -1, rxscan490_done1478
    goto rxscan490_scan1477
  rxscan490_loop1476:
    inc rx489_pos
    gt rx489_pos, rx489_eos, rx489_fail1472
    repr_bind_attr_int rx489_cur, rx489_curclass, "$!from", rx489_pos
  rxscan490_scan1477:
    nqp_rxmark rx489_bstack, rxscan490_loop1476, rx489_pos, 0
  rxscan490_done1478:
    repr_bind_attr_int rx489_cur, rx489_curclass, "$!pos", rx489_pos
    store_lex unicode:"$\x{a2}", rx489_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1479
    nqp_get_sc_object $P5006, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1480
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5007
  fallback1480:
    unless_null $P5004, vivi_4911481
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4911481:
    set $P5003, $P5004
  fallback1479:
    set $P101, $P5003
    repr_bind_attr_int rx489_cur, rx489_curclass, "$!pos", rx489_pos
    store_lex unicode:"$\x{a2}", rx489_cur
    box $P5009, "knowhow"
    set $P102, $P5009
    nqp_rxmark rx489_bstack, rxcap492_fail1483, rx489_pos, 0
    add $I11, rx489_pos, 7
    gt $I11, rx489_eos, rx489_fail1472
    substr $S10, rx489_tgt, rx489_pos, 7
    ne $S10, ucs4:"knowhow", rx489_fail1472
    add rx489_pos, 7
    nqp_rxpeek $I19, rx489_bstack, rxcap492_fail1483
    inc $I19
    set $I11, rx489_bstack[$I19]
    repr_bind_attr_int rx489_cur, rx489_curclass, "$!pos", rx489_pos
    $P11 = rx489_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx489_pos)
    rx489_cstack = rx489_cur."!cursor_capture"($P11, "sym")
    goto rxcap492_done1482
  rxcap492_fail1483:
    goto rx489_fail1472
  rxcap492_done1482:
    repr_bind_attr_int rx489_cur, rx489_curclass, "$!pos", rx489_pos
    $P11 = rx489_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx489_curclass, "$!pos"
    lt $I11, 0, rx489_fail1472
    nqp_rxmark rx489_bstack, rxsubrule493_pass1484, -1, 0
  rxsubrule493_pass1484:
    rx489_cstack = rx489_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx489_pos, $P11, rx489_curclass, "$!pos"
    rx489_cur."!cursor_pass"(rx489_pos, "package_declarator:sym<knowhow>", 'backtrack'=>1)
    .return (rx489_cur)
  rx489_restart1471:
    repr_get_attr_obj rx489_cstack, rx489_cur, rx489_curclass, "$!cstack"
  rx489_fail1472:
    unless rx489_bstack, rx489_done1470
    pop $I19, rx489_bstack
    if_null rx489_cstack, rx489_cstack_done1475
    unless rx489_cstack, rx489_cstack_done1475
    dec $I19
    set $P11, rx489_cstack[$I19]
  rx489_cstack_done1475:
    pop rx489_rep, rx489_bstack
    pop rx489_pos, rx489_bstack
    pop $I19, rx489_bstack
    lt rx489_pos, -1, rx489_done1470
    lt rx489_pos, 0, rx489_fail1472
    eq $I19, 0, rx489_fail1472
    nqp_islist $I20, rx489_cstack
    unless $I20, rx489_jump1473
    elements $I18, rx489_bstack
    le $I18, 0, rx489_cut1474
    dec $I18
    set $I18, rx489_bstack[$I18]
  rx489_cut1474:
    assign rx489_cstack, $I18
  rx489_jump1473:
    jump $I19
  rx489_done1470:
    rx489_cur."!cursor_fail"()
    .return (rx489_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<class>" :subid("cuid_103_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 949
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx494_tgt
    .local int rx494_pos
    .local int rx494_off
    .local int rx494_eos
    .local int rx494_rep
    .local pmc rx494_cur
    .local pmc rx494_curclass
    .local pmc rx494_bstack
    .local pmc rx494_cstack
    (rx494_cur, rx494_tgt, rx494_pos, rx494_curclass, rx494_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx494_cur
    length rx494_eos, rx494_tgt
    eq $I19, 1, rx494_restart1487
    gt rx494_pos, rx494_eos, rx494_fail1488
    repr_get_attr_int $I11, self, rx494_curclass, "$!from"
    ne $I11, -1, rxscan495_done1494
    goto rxscan495_scan1493
  rxscan495_loop1492:
    inc rx494_pos
    gt rx494_pos, rx494_eos, rx494_fail1488
    repr_bind_attr_int rx494_cur, rx494_curclass, "$!from", rx494_pos
  rxscan495_scan1493:
    nqp_rxmark rx494_bstack, rxscan495_loop1492, rx494_pos, 0
  rxscan495_done1494:
    repr_bind_attr_int rx494_cur, rx494_curclass, "$!pos", rx494_pos
    store_lex unicode:"$\x{a2}", rx494_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1495
    nqp_get_sc_object $P5006, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1496
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5007
  fallback1496:
    unless_null $P5004, vivi_4961497
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4961497:
    set $P5003, $P5004
  fallback1495:
    set $P101, $P5003
    repr_bind_attr_int rx494_cur, rx494_curclass, "$!pos", rx494_pos
    store_lex unicode:"$\x{a2}", rx494_cur
    box $P5009, "class"
    set $P102, $P5009
    nqp_rxmark rx494_bstack, rxcap497_fail1499, rx494_pos, 0
    add $I11, rx494_pos, 5
    gt $I11, rx494_eos, rx494_fail1488
    substr $S10, rx494_tgt, rx494_pos, 5
    ne $S10, ucs4:"class", rx494_fail1488
    add rx494_pos, 5
    nqp_rxpeek $I19, rx494_bstack, rxcap497_fail1499
    inc $I19
    set $I11, rx494_bstack[$I19]
    repr_bind_attr_int rx494_cur, rx494_curclass, "$!pos", rx494_pos
    $P11 = rx494_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx494_pos)
    rx494_cstack = rx494_cur."!cursor_capture"($P11, "sym")
    goto rxcap497_done1498
  rxcap497_fail1499:
    goto rx494_fail1488
  rxcap497_done1498:
    repr_bind_attr_int rx494_cur, rx494_curclass, "$!pos", rx494_pos
    $P11 = rx494_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx494_curclass, "$!pos"
    lt $I11, 0, rx494_fail1488
    nqp_rxmark rx494_bstack, rxsubrule498_pass1500, -1, 0
  rxsubrule498_pass1500:
    rx494_cstack = rx494_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx494_pos, $P11, rx494_curclass, "$!pos"
    rx494_cur."!cursor_pass"(rx494_pos, "package_declarator:sym<class>", 'backtrack'=>1)
    .return (rx494_cur)
  rx494_restart1487:
    repr_get_attr_obj rx494_cstack, rx494_cur, rx494_curclass, "$!cstack"
  rx494_fail1488:
    unless rx494_bstack, rx494_done1486
    pop $I19, rx494_bstack
    if_null rx494_cstack, rx494_cstack_done1491
    unless rx494_cstack, rx494_cstack_done1491
    dec $I19
    set $P11, rx494_cstack[$I19]
  rx494_cstack_done1491:
    pop rx494_rep, rx494_bstack
    pop rx494_pos, rx494_bstack
    pop $I19, rx494_bstack
    lt rx494_pos, -1, rx494_done1486
    lt rx494_pos, 0, rx494_fail1488
    eq $I19, 0, rx494_fail1488
    nqp_islist $I20, rx494_cstack
    unless $I20, rx494_jump1489
    elements $I18, rx494_bstack
    le $I18, 0, rx494_cut1490
    dec $I18
    set $I18, rx494_bstack[$I18]
  rx494_cut1490:
    assign rx494_cstack, $I18
  rx494_jump1489:
    jump $I19
  rx494_done1486:
    rx494_cur."!cursor_fail"()
    .return (rx494_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<grammar>" :subid("cuid_104_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 954
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx499_tgt
    .local int rx499_pos
    .local int rx499_off
    .local int rx499_eos
    .local int rx499_rep
    .local pmc rx499_cur
    .local pmc rx499_curclass
    .local pmc rx499_bstack
    .local pmc rx499_cstack
    (rx499_cur, rx499_tgt, rx499_pos, rx499_curclass, rx499_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx499_cur
    length rx499_eos, rx499_tgt
    eq $I19, 1, rx499_restart1503
    gt rx499_pos, rx499_eos, rx499_fail1504
    repr_get_attr_int $I11, self, rx499_curclass, "$!from"
    ne $I11, -1, rxscan500_done1510
    goto rxscan500_scan1509
  rxscan500_loop1508:
    inc rx499_pos
    gt rx499_pos, rx499_eos, rx499_fail1504
    repr_bind_attr_int rx499_cur, rx499_curclass, "$!from", rx499_pos
  rxscan500_scan1509:
    nqp_rxmark rx499_bstack, rxscan500_loop1508, rx499_pos, 0
  rxscan500_done1510:
    repr_bind_attr_int rx499_cur, rx499_curclass, "$!pos", rx499_pos
    store_lex unicode:"$\x{a2}", rx499_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1511
    nqp_get_sc_object $P5006, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1512
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5007
  fallback1512:
    unless_null $P5004, vivi_5011513
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_5011513:
    set $P5003, $P5004
  fallback1511:
    set $P101, $P5003
    repr_bind_attr_int rx499_cur, rx499_curclass, "$!pos", rx499_pos
    store_lex unicode:"$\x{a2}", rx499_cur
    box $P5009, "grammar"
    set $P102, $P5009
    nqp_rxmark rx499_bstack, rxcap502_fail1515, rx499_pos, 0
    add $I11, rx499_pos, 7
    gt $I11, rx499_eos, rx499_fail1504
    substr $S10, rx499_tgt, rx499_pos, 7
    ne $S10, ucs4:"grammar", rx499_fail1504
    add rx499_pos, 7
    nqp_rxpeek $I19, rx499_bstack, rxcap502_fail1515
    inc $I19
    set $I11, rx499_bstack[$I19]
    repr_bind_attr_int rx499_cur, rx499_curclass, "$!pos", rx499_pos
    $P11 = rx499_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx499_pos)
    rx499_cstack = rx499_cur."!cursor_capture"($P11, "sym")
    goto rxcap502_done1514
  rxcap502_fail1515:
    goto rx499_fail1504
  rxcap502_done1514:
    repr_bind_attr_int rx499_cur, rx499_curclass, "$!pos", rx499_pos
    $P11 = rx499_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx499_curclass, "$!pos"
    lt $I11, 0, rx499_fail1504
    nqp_rxmark rx499_bstack, rxsubrule503_pass1516, -1, 0
  rxsubrule503_pass1516:
    rx499_cstack = rx499_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx499_pos, $P11, rx499_curclass, "$!pos"
    rx499_cur."!cursor_pass"(rx499_pos, "package_declarator:sym<grammar>", 'backtrack'=>1)
    .return (rx499_cur)
  rx499_restart1503:
    repr_get_attr_obj rx499_cstack, rx499_cur, rx499_curclass, "$!cstack"
  rx499_fail1504:
    unless rx499_bstack, rx499_done1502
    pop $I19, rx499_bstack
    if_null rx499_cstack, rx499_cstack_done1507
    unless rx499_cstack, rx499_cstack_done1507
    dec $I19
    set $P11, rx499_cstack[$I19]
  rx499_cstack_done1507:
    pop rx499_rep, rx499_bstack
    pop rx499_pos, rx499_bstack
    pop $I19, rx499_bstack
    lt rx499_pos, -1, rx499_done1502
    lt rx499_pos, 0, rx499_fail1504
    eq $I19, 0, rx499_fail1504
    nqp_islist $I20, rx499_cstack
    unless $I20, rx499_jump1505
    elements $I18, rx499_bstack
    le $I18, 0, rx499_cut1506
    dec $I18
    set $I18, rx499_bstack[$I18]
  rx499_cut1506:
    assign rx499_cstack, $I18
  rx499_jump1505:
    jump $I19
  rx499_done1502:
    rx499_cur."!cursor_fail"()
    .return (rx499_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<role>" :subid("cuid_105_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 959
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx504_tgt
    .local int rx504_pos
    .local int rx504_off
    .local int rx504_eos
    .local int rx504_rep
    .local pmc rx504_cur
    .local pmc rx504_curclass
    .local pmc rx504_bstack
    .local pmc rx504_cstack
    (rx504_cur, rx504_tgt, rx504_pos, rx504_curclass, rx504_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx504_cur
    length rx504_eos, rx504_tgt
    eq $I19, 1, rx504_restart1519
    gt rx504_pos, rx504_eos, rx504_fail1520
    repr_get_attr_int $I11, self, rx504_curclass, "$!from"
    ne $I11, -1, rxscan505_done1526
    goto rxscan505_scan1525
  rxscan505_loop1524:
    inc rx504_pos
    gt rx504_pos, rx504_eos, rx504_fail1520
    repr_bind_attr_int rx504_cur, rx504_curclass, "$!from", rx504_pos
  rxscan505_scan1525:
    nqp_rxmark rx504_bstack, rxscan505_loop1524, rx504_pos, 0
  rxscan505_done1526:
    repr_bind_attr_int rx504_cur, rx504_curclass, "$!pos", rx504_pos
    store_lex unicode:"$\x{a2}", rx504_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1527
    nqp_get_sc_object $P5006, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1528
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5007
  fallback1528:
    unless_null $P5004, vivi_5061529
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_5061529:
    set $P5003, $P5004
  fallback1527:
    set $P101, $P5003
    repr_bind_attr_int rx504_cur, rx504_curclass, "$!pos", rx504_pos
    store_lex unicode:"$\x{a2}", rx504_cur
    box $P5009, "role"
    set $P102, $P5009
    nqp_rxmark rx504_bstack, rxcap507_fail1531, rx504_pos, 0
    add $I11, rx504_pos, 4
    gt $I11, rx504_eos, rx504_fail1520
    substr $S10, rx504_tgt, rx504_pos, 4
    ne $S10, ucs4:"role", rx504_fail1520
    add rx504_pos, 4
    nqp_rxpeek $I19, rx504_bstack, rxcap507_fail1531
    inc $I19
    set $I11, rx504_bstack[$I19]
    repr_bind_attr_int rx504_cur, rx504_curclass, "$!pos", rx504_pos
    $P11 = rx504_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx504_pos)
    rx504_cstack = rx504_cur."!cursor_capture"($P11, "sym")
    goto rxcap507_done1530
  rxcap507_fail1531:
    goto rx504_fail1520
  rxcap507_done1530:
    repr_bind_attr_int rx504_cur, rx504_curclass, "$!pos", rx504_pos
    $P11 = rx504_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx504_curclass, "$!pos"
    lt $I11, 0, rx504_fail1520
    nqp_rxmark rx504_bstack, rxsubrule508_pass1532, -1, 0
  rxsubrule508_pass1532:
    rx504_cstack = rx504_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx504_pos, $P11, rx504_curclass, "$!pos"
    rx504_cur."!cursor_pass"(rx504_pos, "package_declarator:sym<role>", 'backtrack'=>1)
    .return (rx504_cur)
  rx504_restart1519:
    repr_get_attr_obj rx504_cstack, rx504_cur, rx504_curclass, "$!cstack"
  rx504_fail1520:
    unless rx504_bstack, rx504_done1518
    pop $I19, rx504_bstack
    if_null rx504_cstack, rx504_cstack_done1523
    unless rx504_cstack, rx504_cstack_done1523
    dec $I19
    set $P11, rx504_cstack[$I19]
  rx504_cstack_done1523:
    pop rx504_rep, rx504_bstack
    pop rx504_pos, rx504_bstack
    pop $I19, rx504_bstack
    lt rx504_pos, -1, rx504_done1518
    lt rx504_pos, 0, rx504_fail1520
    eq $I19, 0, rx504_fail1520
    nqp_islist $I20, rx504_cstack
    unless $I20, rx504_jump1521
    elements $I18, rx504_bstack
    le $I18, 0, rx504_cut1522
    dec $I18
    set $I18, rx504_bstack[$I18]
  rx504_cut1522:
    assign rx504_cstack, $I18
  rx504_jump1521:
    jump $I19
  rx504_done1518:
    rx504_cur."!cursor_fail"()
    .return (rx504_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<native>" :subid("cuid_106_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 964
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx509_tgt
    .local int rx509_pos
    .local int rx509_off
    .local int rx509_eos
    .local int rx509_rep
    .local pmc rx509_cur
    .local pmc rx509_curclass
    .local pmc rx509_bstack
    .local pmc rx509_cstack
    (rx509_cur, rx509_tgt, rx509_pos, rx509_curclass, rx509_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx509_cur
    length rx509_eos, rx509_tgt
    eq $I19, 1, rx509_restart1535
    gt rx509_pos, rx509_eos, rx509_fail1536
    repr_get_attr_int $I11, self, rx509_curclass, "$!from"
    ne $I11, -1, rxscan510_done1542
    goto rxscan510_scan1541
  rxscan510_loop1540:
    inc rx509_pos
    gt rx509_pos, rx509_eos, rx509_fail1536
    repr_bind_attr_int rx509_cur, rx509_curclass, "$!from", rx509_pos
  rxscan510_scan1541:
    nqp_rxmark rx509_bstack, rxscan510_loop1540, rx509_pos, 0
  rxscan510_done1542:
    repr_bind_attr_int rx509_cur, rx509_curclass, "$!pos", rx509_pos
    store_lex unicode:"$\x{a2}", rx509_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1543
    nqp_get_sc_object $P5006, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1544
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5007
  fallback1544:
    unless_null $P5004, vivi_5111545
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_5111545:
    set $P5003, $P5004
  fallback1543:
    set $P101, $P5003
    repr_bind_attr_int rx509_cur, rx509_curclass, "$!pos", rx509_pos
    store_lex unicode:"$\x{a2}", rx509_cur
    box $P5009, "native"
    set $P102, $P5009
    nqp_rxmark rx509_bstack, rxcap512_fail1547, rx509_pos, 0
    add $I11, rx509_pos, 6
    gt $I11, rx509_eos, rx509_fail1536
    substr $S10, rx509_tgt, rx509_pos, 6
    ne $S10, ucs4:"native", rx509_fail1536
    add rx509_pos, 6
    nqp_rxpeek $I19, rx509_bstack, rxcap512_fail1547
    inc $I19
    set $I11, rx509_bstack[$I19]
    repr_bind_attr_int rx509_cur, rx509_curclass, "$!pos", rx509_pos
    $P11 = rx509_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx509_pos)
    rx509_cstack = rx509_cur."!cursor_capture"($P11, "sym")
    goto rxcap512_done1546
  rxcap512_fail1547:
    goto rx509_fail1536
  rxcap512_done1546:
    repr_bind_attr_int rx509_cur, rx509_curclass, "$!pos", rx509_pos
    $P11 = rx509_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx509_curclass, "$!pos"
    lt $I11, 0, rx509_fail1536
    nqp_rxmark rx509_bstack, rxsubrule513_pass1548, -1, 0
  rxsubrule513_pass1548:
    rx509_cstack = rx509_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx509_pos, $P11, rx509_curclass, "$!pos"
    rx509_cur."!cursor_pass"(rx509_pos, "package_declarator:sym<native>", 'backtrack'=>1)
    .return (rx509_cur)
  rx509_restart1535:
    repr_get_attr_obj rx509_cstack, rx509_cur, rx509_curclass, "$!cstack"
  rx509_fail1536:
    unless rx509_bstack, rx509_done1534
    pop $I19, rx509_bstack
    if_null rx509_cstack, rx509_cstack_done1539
    unless rx509_cstack, rx509_cstack_done1539
    dec $I19
    set $P11, rx509_cstack[$I19]
  rx509_cstack_done1539:
    pop rx509_rep, rx509_bstack
    pop rx509_pos, rx509_bstack
    pop $I19, rx509_bstack
    lt rx509_pos, -1, rx509_done1534
    lt rx509_pos, 0, rx509_fail1536
    eq $I19, 0, rx509_fail1536
    nqp_islist $I20, rx509_cstack
    unless $I20, rx509_jump1537
    elements $I18, rx509_bstack
    le $I18, 0, rx509_cut1538
    dec $I18
    set $I18, rx509_bstack[$I18]
  rx509_cut1538:
    assign rx509_cstack, $I18
  rx509_jump1537:
    jump $I19
  rx509_done1534:
    rx509_cur."!cursor_fail"()
    .return (rx509_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<stub>" :subid("cuid_107_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 969
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx514_tgt
    .local int rx514_pos
    .local int rx514_off
    .local int rx514_eos
    .local int rx514_rep
    .local pmc rx514_cur
    .local pmc rx514_curclass
    .local pmc rx514_bstack
    .local pmc rx514_cstack
    (rx514_cur, rx514_tgt, rx514_pos, rx514_curclass, rx514_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx514_cur
    length rx514_eos, rx514_tgt
    eq $I19, 1, rx514_restart1551
    gt rx514_pos, rx514_eos, rx514_fail1552
    repr_get_attr_int $I11, self, rx514_curclass, "$!from"
    ne $I11, -1, rxscan515_done1558
    goto rxscan515_scan1557
  rxscan515_loop1556:
    inc rx514_pos
    gt rx514_pos, rx514_eos, rx514_fail1552
    repr_bind_attr_int rx514_cur, rx514_curclass, "$!from", rx514_pos
  rxscan515_scan1557:
    nqp_rxmark rx514_bstack, rxscan515_loop1556, rx514_pos, 0
  rxscan515_done1558:
    repr_bind_attr_int rx514_cur, rx514_curclass, "$!pos", rx514_pos
    store_lex unicode:"$\x{a2}", rx514_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1559
    nqp_get_sc_object $P5006, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1560
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5007
  fallback1560:
    unless_null $P5004, vivi_5161561
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_5161561:
    set $P5003, $P5004
  fallback1559:
    set $P101, $P5003
    repr_bind_attr_int rx514_cur, rx514_curclass, "$!pos", rx514_pos
    store_lex unicode:"$\x{a2}", rx514_cur
    box $P5009, "stub"
    set $P102, $P5009
    nqp_rxmark rx514_bstack, rxcap517_fail1563, rx514_pos, 0
    add $I11, rx514_pos, 4
    gt $I11, rx514_eos, rx514_fail1552
    substr $S10, rx514_tgt, rx514_pos, 4
    ne $S10, ucs4:"stub", rx514_fail1552
    add rx514_pos, 4
    nqp_rxpeek $I19, rx514_bstack, rxcap517_fail1563
    inc $I19
    set $I11, rx514_bstack[$I19]
    repr_bind_attr_int rx514_cur, rx514_curclass, "$!pos", rx514_pos
    $P11 = rx514_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx514_pos)
    rx514_cstack = rx514_cur."!cursor_capture"($P11, "sym")
    goto rxcap517_done1562
  rxcap517_fail1563:
    goto rx514_fail1552
  rxcap517_done1562:
    repr_bind_attr_int rx514_cur, rx514_curclass, "$!pos", rx514_pos
    $P11 = rx514_cur."ws"()
    repr_get_attr_int $I11, $P11, rx514_curclass, "$!pos"
    lt $I11, 0, rx514_fail1552
    repr_get_attr_int rx514_pos, $P11, rx514_curclass, "$!pos"
    repr_bind_attr_int rx514_cur, rx514_curclass, "$!pos", rx514_pos
    $P11 = rx514_cur."name"()
    repr_get_attr_int $I11, $P11, rx514_curclass, "$!pos"
    lt $I11, 0, rx514_fail1552
    nqp_rxmark rx514_bstack, rxsubrule519_pass1565, -1, 0
  rxsubrule519_pass1565:
    rx514_cstack = rx514_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx514_pos, $P11, rx514_curclass, "$!pos"
    repr_bind_attr_int rx514_cur, rx514_curclass, "$!pos", rx514_pos
    $P11 = rx514_cur."ws"()
    repr_get_attr_int $I11, $P11, rx514_curclass, "$!pos"
    lt $I11, 0, rx514_fail1552
    repr_get_attr_int rx514_pos, $P11, rx514_curclass, "$!pos"
    add $I11, rx514_pos, 9
    gt $I11, rx514_eos, rx514_fail1552
    substr $S10, rx514_tgt, rx514_pos, 9
    ne $S10, ucs4:"metaclass", rx514_fail1552
    add rx514_pos, 9
    repr_bind_attr_int rx514_cur, rx514_curclass, "$!pos", rx514_pos
    $P11 = rx514_cur."ws"()
    repr_get_attr_int $I11, $P11, rx514_curclass, "$!pos"
    lt $I11, 0, rx514_fail1552
    repr_get_attr_int rx514_pos, $P11, rx514_curclass, "$!pos"
    repr_bind_attr_int rx514_cur, rx514_curclass, "$!pos", rx514_pos
    $P11 = rx514_cur."name"()
    repr_get_attr_int $I11, $P11, rx514_curclass, "$!pos"
    lt $I11, 0, rx514_fail1552
    nqp_rxmark rx514_bstack, rxsubrule522_pass1568, -1, 0
  rxsubrule522_pass1568:
    rx514_cstack = rx514_cur."!cursor_capture"($P11, "metaclass")
    repr_get_attr_int rx514_pos, $P11, rx514_curclass, "$!pos"
    repr_bind_attr_int rx514_cur, rx514_curclass, "$!pos", rx514_pos
    $P11 = rx514_cur."ws"()
    repr_get_attr_int $I11, $P11, rx514_curclass, "$!pos"
    lt $I11, 0, rx514_fail1552
    repr_get_attr_int rx514_pos, $P11, rx514_curclass, "$!pos"
    add $I11, rx514_pos, 1
    gt $I11, rx514_eos, rx514_fail1552
    substr $S10, rx514_tgt, rx514_pos, 1
    ne $S10, ucs4:"{", rx514_fail1552
    add rx514_pos, 1
    repr_bind_attr_int rx514_cur, rx514_curclass, "$!pos", rx514_pos
    $P11 = rx514_cur."ws"()
    repr_get_attr_int $I11, $P11, rx514_curclass, "$!pos"
    lt $I11, 0, rx514_fail1552
    repr_get_attr_int rx514_pos, $P11, rx514_curclass, "$!pos"
    add $I11, rx514_pos, 3
    gt $I11, rx514_eos, rx514_fail1552
    substr $S10, rx514_tgt, rx514_pos, 3
    ne $S10, ucs4:"...", rx514_fail1552
    add rx514_pos, 3
    repr_bind_attr_int rx514_cur, rx514_curclass, "$!pos", rx514_pos
    $P11 = rx514_cur."ws"()
    repr_get_attr_int $I11, $P11, rx514_curclass, "$!pos"
    lt $I11, 0, rx514_fail1552
    repr_get_attr_int rx514_pos, $P11, rx514_curclass, "$!pos"
    add $I11, rx514_pos, 1
    gt $I11, rx514_eos, rx514_fail1552
    substr $S10, rx514_tgt, rx514_pos, 1
    ne $S10, ucs4:"}", rx514_fail1552
    add rx514_pos, 1
    repr_bind_attr_int rx514_cur, rx514_curclass, "$!pos", rx514_pos
    $P11 = rx514_cur."ws"()
    repr_get_attr_int $I11, $P11, rx514_curclass, "$!pos"
    lt $I11, 0, rx514_fail1552
    repr_get_attr_int rx514_pos, $P11, rx514_curclass, "$!pos"
    rx514_cur."!cursor_pass"(rx514_pos, "package_declarator:sym<stub>", 'backtrack'=>1)
    .return (rx514_cur)
  rx514_restart1551:
    repr_get_attr_obj rx514_cstack, rx514_cur, rx514_curclass, "$!cstack"
  rx514_fail1552:
    unless rx514_bstack, rx514_done1550
    pop $I19, rx514_bstack
    if_null rx514_cstack, rx514_cstack_done1555
    unless rx514_cstack, rx514_cstack_done1555
    dec $I19
    set $P11, rx514_cstack[$I19]
  rx514_cstack_done1555:
    pop rx514_rep, rx514_bstack
    pop rx514_pos, rx514_bstack
    pop $I19, rx514_bstack
    lt rx514_pos, -1, rx514_done1550
    lt rx514_pos, 0, rx514_fail1552
    eq $I19, 0, rx514_fail1552
    nqp_islist $I20, rx514_cstack
    unless $I20, rx514_jump1553
    elements $I18, rx514_bstack
    le $I18, 0, rx514_cut1554
    dec $I18
    set $I18, rx514_bstack[$I18]
  rx514_cut1554:
    assign rx514_cstack, $I18
  rx514_jump1553:
    jump $I19
  rx514_done1550:
    rx514_cur."!cursor_fail"()
    .return (rx514_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_def" :subid("cuid_108_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 977
    .param pmc _lex_param_0 
    .const 'Sub' $P5021 = 'cuid_398_1358115338.889' 
    capture_lex $P5021 
    .const 'Sub' $P5021 = 'cuid_399_1358115338.889' 
    capture_lex $P5021 
    .lex "$*PACKAGE", $P101 
    .lex "$OUTER", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx527_tgt
    .local int rx527_pos
    .local int rx527_off
    .local int rx527_eos
    .local int rx527_rep
    .local pmc rx527_cur
    .local pmc rx527_curclass
    .local pmc rx527_bstack
    .local pmc rx527_cstack
    (rx527_cur, rx527_tgt, rx527_pos, rx527_curclass, rx527_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx527_cur
    length rx527_eos, rx527_tgt
    eq $I19, 1, rx527_restart1575
    gt rx527_pos, rx527_eos, rx527_fail1576
    repr_get_attr_int $I11, self, rx527_curclass, "$!from"
    ne $I11, -1, rxscan528_done1582
    goto rxscan528_scan1581
  rxscan528_loop1580:
    inc rx527_pos
    gt rx527_pos, rx527_eos, rx527_fail1576
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!from", rx527_pos
  rxscan528_scan1581:
    nqp_rxmark rx527_bstack, rxscan528_loop1580, rx527_pos, 0
  rxscan528_done1582:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    store_lex unicode:"$\x{a2}", rx527_cur
    unless_null $P101, fallback1584
    nqp_get_sc_object $P5005, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$PACKAGE"]
    unless_null $P5003, fallback1585
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5003, $P5006
  fallback1585:
    unless_null $P5003, vivi_5301586
    die "Contextual $*PACKAGE not found"
    box $P5007, "Contextual $*PACKAGE not found"
    set $P5003, $P5007
  vivi_5301586:
    set $P101, $P5003
  fallback1584:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    store_lex unicode:"$\x{a2}", rx527_cur
.annotate 'line', 979
    find_dynamic_lex $P5008, "$*W"
    unless_null $P5008, fallback1588
    nqp_get_sc_object $P5011, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5010, $P5011
    set $P5009, $P5010["$W"]
    unless_null $P5009, fallback1589
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5009, $P5012
  fallback1589:
    unless_null $P5009, vivi_5321590
    die "Contextual $*W not found"
    box $P5013, "Contextual $*W not found"
    set $P5009, $P5013
  vivi_5321590:
    set $P5008, $P5009
  fallback1588:
    $P5014 = $P5008."cur_lexpad"()
    set $P102, $P5014
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."name"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    nqp_rxmark rx527_bstack, rxsubrule534_pass1592, -1, 0
  rxsubrule534_pass1592:
    rx527_cstack = rx527_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    nqp_rxmark rx527_bstack, rxquantr538_done1597, rx527_pos, 0
  rxquantr538_loop1596:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    store_lex unicode:"$\x{a2}", rx527_cur
    $P5015 = $P103."MATCH"()
    set $P104, $P5015
    .const 'Sub' $P5016 = 'cuid_398_1358115338.889' 
    capture_lex $P5016
    $P5017 = $P5016()
    unless $P5017, rx527_fail1576
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    add $I11, rx527_pos, 1
    gt $I11, rx527_eos, rx527_fail1576
    substr $S10, rx527_tgt, rx527_pos, 1
    ne $S10, ucs4:"[", rx527_fail1576
    add rx527_pos, 1
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."role_params"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    nqp_rxmark rx527_bstack, rxsubrule543_pass1604, -1, 0
  rxsubrule543_pass1604:
    rx527_cstack = rx527_cur."!cursor_capture"($P11, "role_params")
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
  alt544_01606:
    nqp_rxmark rx527_bstack, alt544_11607, rx527_pos, 0
    add $I11, rx527_pos, 1
    gt $I11, rx527_eos, rx527_fail1576
    substr $S10, rx527_tgt, rx527_pos, 1
    ne $S10, ucs4:"]", rx527_fail1576
    add rx527_pos, 1
    goto alt544_end1605
  alt544_11607:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."FAILGOAL"("']'")
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    goto rxsubrule545_pass1608
  rxsubrule545_back1609:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
  rxsubrule545_pass1608:
    rx527_cstack = rx527_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule545_back1609
    push rx527_bstack, $I11
    push rx527_bstack, 0
    push rx527_bstack, rx527_pos
    elements $I11, rx527_cstack
    push rx527_bstack, $I11
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
  alt544_end1605:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    nqp_rxpeek $I19, rx527_bstack, rxquantr538_done1597
    inc $I19
    inc $I19
    set rx527_rep, rx527_bstack[$I19]
    nqp_rxcommit rx527_bstack, rxquantr538_done1597
    inc rx527_rep
  rxquantr538_done1597:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    nqp_rxmark rx527_bstack, rxquantr548_done1613, rx527_pos, 0
  rxquantr548_loop1612:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    add $I11, rx527_pos, 2
    gt $I11, rx527_eos, rx527_fail1576
    substr $S10, rx527_tgt, rx527_pos, 2
    ne $S10, ucs4:"is", rx527_fail1576
    add rx527_pos, 2
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    add $I11, rx527_pos, 5
    gt $I11, rx527_eos, rx527_fail1576
    substr $S10, rx527_tgt, rx527_pos, 5
    ne $S10, ucs4:"repr(", rx527_fail1576
    add rx527_pos, 5
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."quote_EXPR"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    nqp_rxmark rx527_bstack, rxsubrule552_pass1617, -1, 0
  rxsubrule552_pass1617:
    rx527_cstack = rx527_cur."!cursor_capture"($P11, "repr")
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    add $I11, rx527_pos, 1
    gt $I11, rx527_eos, rx527_fail1576
    substr $S10, rx527_tgt, rx527_pos, 1
    ne $S10, ucs4:")", rx527_fail1576
    add rx527_pos, 1
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    nqp_rxpeek $I19, rx527_bstack, rxquantr548_done1613
    inc $I19
    inc $I19
    set rx527_rep, rx527_bstack[$I19]
    nqp_rxcommit rx527_bstack, rxquantr548_done1613
    inc rx527_rep
  rxquantr548_done1613:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    store_lex unicode:"$\x{a2}", rx527_cur
    $P5018 = $P103."MATCH"()
    set $P104, $P5018
    .const 'Sub' $P5019 = 'cuid_399_1358115338.889' 
    capture_lex $P5019
    $P5020 = $P5019()
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    nqp_rxmark rx527_bstack, rxquantr577_done1707, rx527_pos, 0
  rxquantr577_loop1706:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    nqp_rxmark rx527_bstack, rxcap579_fail1710, rx527_pos, 0
    add $I11, rx527_pos, 9
    gt $I11, rx527_eos, rx527_fail1576
    substr $S10, rx527_tgt, rx527_pos, 9
    ne $S10, ucs4:"is export", rx527_fail1576
    add rx527_pos, 9
    nqp_rxpeek $I19, rx527_bstack, rxcap579_fail1710
    inc $I19
    set $I11, rx527_bstack[$I19]
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx527_pos)
    rx527_cstack = rx527_cur."!cursor_capture"($P11, "export")
    goto rxcap579_done1709
  rxcap579_fail1710:
    goto rx527_fail1576
  rxcap579_done1709:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    nqp_rxpeek $I19, rx527_bstack, rxquantr577_done1707
    inc $I19
    inc $I19
    set rx527_rep, rx527_bstack[$I19]
    nqp_rxcommit rx527_bstack, rxquantr577_done1707
    inc rx527_rep
  rxquantr577_done1707:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    nqp_rxmark rx527_bstack, rxquantr582_done1714, rx527_pos, 0
  rxquantr582_loop1713:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    add $I11, rx527_pos, 2
    gt $I11, rx527_eos, rx527_fail1576
    substr $S10, rx527_tgt, rx527_pos, 2
    ne $S10, ucs4:"is", rx527_fail1576
    add rx527_pos, 2
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."name"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    nqp_rxmark rx527_bstack, rxsubrule585_pass1717, -1, 0
  rxsubrule585_pass1717:
    rx527_cstack = rx527_cur."!cursor_capture"($P11, "parent")
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    nqp_rxpeek $I19, rx527_bstack, rxquantr582_done1714
    inc $I19
    inc $I19
    set rx527_rep, rx527_bstack[$I19]
    nqp_rxcommit rx527_bstack, rxquantr582_done1714
    inc rx527_rep
  rxquantr582_done1714:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    nqp_rxmark rx527_bstack, rxquantr588_done1721, rx527_pos, 0
  rxquantr588_loop1720:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    add $I11, rx527_pos, 4
    gt $I11, rx527_eos, rx527_fail1576
    substr $S10, rx527_tgt, rx527_pos, 4
    ne $S10, ucs4:"does", rx527_fail1576
    add rx527_pos, 4
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."name"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    nqp_rxmark rx527_bstack, rxsubrule591_pass1724, -1, 0
  rxsubrule591_pass1724:
    rx527_cstack = rx527_cur."!cursor_capture"($P11, "role")
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    nqp_rxpeek $I19, rx527_bstack, rxquantr588_done1721
    inc $I19
    inc $I19
    set rx527_rep, rx527_bstack[$I19]
    nqp_rxcommit rx527_bstack, rxquantr588_done1721
    inc rx527_rep
    nqp_rxmark rx527_bstack, rxquantr588_done1721, rx527_pos, rx527_rep
    goto rxquantr588_loop1720
  rxquantr588_done1721:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
  alt594_01728:
    nqp_rxmark rx527_bstack, alt594_11743, rx527_pos, 0
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    add $I11, rx527_pos, 1
    gt $I11, rx527_eos, rx527_fail1576
    substr $S10, rx527_tgt, rx527_pos, 1
    ne $S10, ucs4:";", rx527_fail1576
    add rx527_pos, 1
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."statementlist"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    nqp_rxmark rx527_bstack, rxsubrule597_pass1731, -1, 0
  rxsubrule597_pass1731:
    rx527_cstack = rx527_cur."!cursor_capture"($P11, "statementlist")
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
  alt599_01734:
    nqp_rxmark rx527_bstack, alt599_11738, rx527_pos, 0
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    lt rx527_pos, rx527_eos, rx527_fail1576
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    goto alt599_end1733
  alt599_11738:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."panic"("Confused")
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
  alt599_end1733:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    goto alt594_end1727
  alt594_11743:
    nqp_rxmark rx527_bstack, alt594_21748, rx527_pos, 0
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    ge rx527_pos, rx527_eos, rx527_fail1576
    substr $S11, rx527_tgt, rx527_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx527_fail1576
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    nqp_rxmark rx527_bstack, rxsubrule609_pass1746, -1, 0
  rxsubrule609_pass1746:
    rx527_cstack = rx527_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    goto alt594_end1727
  alt594_21748:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."panic"("Malformed package declaration")
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
  alt594_end1727:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1576
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    rx527_cur."!cursor_pass"(rx527_pos, "package_def", 'backtrack'=>1)
    .return (rx527_cur)
  rx527_restart1575:
    repr_get_attr_obj rx527_cstack, rx527_cur, rx527_curclass, "$!cstack"
  rx527_fail1576:
    unless rx527_bstack, rx527_done1574
    pop $I19, rx527_bstack
    if_null rx527_cstack, rx527_cstack_done1579
    unless rx527_cstack, rx527_cstack_done1579
    dec $I19
    set $P11, rx527_cstack[$I19]
  rx527_cstack_done1579:
    pop rx527_rep, rx527_bstack
    pop rx527_pos, rx527_bstack
    pop $I19, rx527_bstack
    lt rx527_pos, -1, rx527_done1574
    lt rx527_pos, 0, rx527_fail1576
    eq $I19, 0, rx527_fail1576
    nqp_islist $I20, rx527_cstack
    unless $I20, rx527_jump1577
    elements $I18, rx527_bstack
    le $I18, 0, rx527_cut1578
    dec $I18
    set $I18, rx527_bstack[$I18]
  rx527_cut1578:
    assign rx527_cstack, $I18
  rx527_jump1577:
    jump $I19
  rx527_done1574:
    rx527_cur."!cursor_fail"()
    .return (rx527_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_398_1358115338.889") :anon :lex :outer("cuid_108_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 983

    find_dynamic_lex $P5001, "$*PKGDECL"
    unless_null $P5001, fallback1599
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$PKGDECL"]
    unless_null $P5002, fallback1600
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5005
  fallback1600:
    unless_null $P5002, vivi_5401601
    die "Contextual $*PKGDECL not found"
    box $P5006, "Contextual $*PKGDECL not found"
    set $P5002, $P5006
  vivi_5401601:
    set $P5001, $P5002
  fallback1599:
    set $S5001, $P5001
    iseq $I5001, $S5001, "role"
    .return ($I5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_399_1358115338.889") :anon :lex :outer("cuid_108_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 986
    .lex "%args", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5003, "$/"
    unless_null $P5003, fallback1621
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5003, $P5004
  fallback1621:
    set $P5002, $P5003["name"]
    unless_null $P5002, fallback1622
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5005
  fallback1622:
    set $S5001, $P5002
    box $P5006, $S5001
    set $P101["name"], $P5006
    find_lex $P5008, "$/"
    unless_null $P5008, fallback1625
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5008, $P5009
  fallback1625:
    set $P5007, $P5008["repr"]
    unless_null $P5007, fallback1626
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5007, $P5010
  fallback1626:
    unless $P5007 goto if556_end1624 
.annotate 'line', 991
    find_lex $P5016, "$/"
    unless_null $P5016, fallback1627
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5016, $P5017
  fallback1627:
    set $P5015, $P5016["repr"]
    unless_null $P5015, fallback1628
    nqp_get_sc_object $P5018, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5015, $P5018
  fallback1628:
    set $P5014, $P5015[0]
    unless_null $P5014, fallback1629
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5014, $P5019
  fallback1629:
    set $P5013, $P5014["quote_delimited"]
    unless_null $P5013, fallback1630
    nqp_get_sc_object $P5020, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5013, $P5020
  fallback1630:
    set $P5012, $P5013["quote_atom"]
    unless_null $P5012, fallback1631
    nqp_get_sc_object $P5021, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5012, $P5021
  fallback1631:
    set $P5011, $P5012[0]
    unless_null $P5011, fallback1632
    nqp_get_sc_object $P5022, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5011, $P5022
  fallback1632:
    set $S5002, $P5011
    box $P5023, $S5002
    set $P101["repr"], $P5023
  if556_end1624:
.annotate 'line', 994
    find_dynamic_lex $P5024, "$*W"
    unless_null $P5024, fallback1633
    nqp_get_sc_object $P5027, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5026, $P5027
    set $P5025, $P5026["$W"]
    unless_null $P5025, fallback1634
    nqp_get_sc_object $P5028, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5025, $P5028
  fallback1634:
    unless_null $P5025, vivi_5571635
    die "Contextual $*W not found"
    box $P5029, "Contextual $*W not found"
    set $P5025, $P5029
  vivi_5571635:
    set $P5024, $P5025
  fallback1633:
    find_dynamic_lex $P5031, "%*HOW"
    unless_null $P5031, fallback1636
    nqp_get_sc_object $P5034, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["%HOW"]
    unless_null $P5032, fallback1637
    nqp_get_sc_object $P5036, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5035, $P5036
    new $P5037, 'Hash'
    set $P5035["%HOW"], $P5037
    set $P5032, $P5037
  fallback1637:
    unless_null $P5032, vivi_5581638
    die "Contextual %*HOW not found"
    box $P5038, "Contextual %*HOW not found"
    set $P5032, $P5038
  vivi_5581638:
    set $P5031, $P5032
  fallback1636:
    find_dynamic_lex $P5039, "$*PKGDECL"
    unless_null $P5039, fallback1639
    nqp_get_sc_object $P5042, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5041, $P5042
    set $P5040, $P5041["$PKGDECL"]
    unless_null $P5040, fallback1640
    nqp_get_sc_object $P5043, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5040, $P5043
  fallback1640:
    unless_null $P5040, vivi_5591641
    die "Contextual $*PKGDECL not found"
    box $P5044, "Contextual $*PKGDECL not found"
    set $P5040, $P5044
  vivi_5591641:
    set $P5039, $P5040
  fallback1639:
    set $S5003, $P5039
    set $P5030, $P5031[$S5003]
    unless_null $P5030, fallback1642
    nqp_get_sc_object $P5045, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5030, $P5045
  fallback1642:
    $P5046 = $P5024."pkg_create_mo"($P5030, $P101 :flat :named)
    store_dynamic_lex "$*PACKAGE", $P5046
    find_dynamic_lex $P5047, "$*SCOPE"
    unless_null $P5047, fallback1647
    nqp_get_sc_object $P5050, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5049, $P5050
    set $P5048, $P5049["$SCOPE"]
    unless_null $P5048, fallback1648
    nqp_get_sc_object $P5051, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5048, $P5051
  fallback1648:
    unless_null $P5048, vivi_5621649
    die "Contextual $*SCOPE not found"
    box $P5052, "Contextual $*SCOPE not found"
    set $P5048, $P5052
  vivi_5621649:
    set $P5047, $P5048
  fallback1647:
    set $S5004, $P5047
    iseq $I5001, $S5004, "our"
    set $I5003, $I5001
    if $I5001 goto unless561_end1646 
    find_dynamic_lex $P5053, "$*SCOPE"
    unless_null $P5053, fallback1650
    nqp_get_sc_object $P5056, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5055, $P5056
    set $P5054, $P5055["$SCOPE"]
    unless_null $P5054, fallback1651
    nqp_get_sc_object $P5057, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5054, $P5057
  fallback1651:
    unless_null $P5054, vivi_5631652
    die "Contextual $*SCOPE not found"
    box $P5058, "Contextual $*SCOPE not found"
    set $P5054, $P5058
  vivi_5631652:
    set $P5053, $P5054
  fallback1650:
    set $S5005, $P5053
    iseq $I5002, $S5005, ""
    set $I5003, $I5002
  unless561_end1646:
    unless $I5003 goto if560_else1643 
.annotate 'line', 997
.annotate 'line', 998
    find_dynamic_lex $P5059, "$*W"
    unless_null $P5059, fallback1653
    nqp_get_sc_object $P5062, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5061, $P5062
    set $P5060, $P5061["$W"]
    unless_null $P5060, fallback1654
    nqp_get_sc_object $P5063, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5060, $P5063
  fallback1654:
    unless_null $P5060, vivi_5641655
    die "Contextual $*W not found"
    box $P5064, "Contextual $*W not found"
    set $P5060, $P5064
  vivi_5641655:
    set $P5059, $P5060
  fallback1653:
    find_dynamic_lex $P5065, "$*OUTERPACKAGE"
    unless_null $P5065, fallback1656
    nqp_get_sc_object $P5068, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5067, $P5068
    set $P5066, $P5067["$OUTERPACKAGE"]
    unless_null $P5066, fallback1657
    nqp_get_sc_object $P5069, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5066, $P5069
  fallback1657:
    unless_null $P5066, vivi_5651658
    die "Contextual $*OUTERPACKAGE not found"
    box $P5070, "Contextual $*OUTERPACKAGE not found"
    set $P5066, $P5070
  vivi_5651658:
    set $P5065, $P5066
  fallback1656:
    find_lex $P5073, "$/"
    unless_null $P5073, fallback1659
    nqp_get_sc_object $P5074, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5073, $P5074
  fallback1659:
    set $P5072, $P5073["name"]
    unless_null $P5072, fallback1660
    nqp_get_sc_object $P5075, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5072, $P5075
  fallback1660:
    set $P5071, $P5072["identifier"]
    unless_null $P5071, fallback1661
    nqp_get_sc_object $P5076, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5071, $P5076
  fallback1661:
    find_dynamic_lex $P5077, "$*PACKAGE"
    unless_null $P5077, fallback1662
    nqp_get_sc_object $P5080, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5079, $P5080
    set $P5078, $P5079["$PACKAGE"]
    unless_null $P5078, fallback1663
    nqp_get_sc_object $P5081, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5078, $P5081
  fallback1663:
    unless_null $P5078, vivi_5661664
    die "Contextual $*PACKAGE not found"
    box $P5082, "Contextual $*PACKAGE not found"
    set $P5078, $P5082
  vivi_5661664:
    set $P5077, $P5078
  fallback1662:
    $P5059."install_package_symbol"($P5065, $P5071, $P5077)
    find_lex $P5085, "$/"
    unless_null $P5085, fallback1667
    nqp_get_sc_object $P5086, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5085, $P5086
  fallback1667:
    set $P5084, $P5085["name"]
    unless_null $P5084, fallback1668
    nqp_get_sc_object $P5087, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5084, $P5087
  fallback1668:
    set $P5083, $P5084["identifier"]
    unless_null $P5083, fallback1669
    nqp_get_sc_object $P5088, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5083, $P5088
  fallback1669:
    set $N5001, $P5083
    set $N5002, 1
    iseq $I5004, $N5001, $N5002
    box $P5112, $I5004
    set $P5111, $P5112
    unless $I5004 goto if567_end1666 
.annotate 'line', 999
.annotate 'line', 1000
    find_dynamic_lex $P5089, "$*W"
    unless_null $P5089, fallback1670
    nqp_get_sc_object $P5092, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5091, $P5092
    set $P5090, $P5091["$W"]
    unless_null $P5090, fallback1671
    nqp_get_sc_object $P5093, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5090, $P5093
  fallback1671:
    unless_null $P5090, vivi_5681672
    die "Contextual $*W not found"
    box $P5094, "Contextual $*W not found"
    set $P5090, $P5094
  vivi_5681672:
    set $P5089, $P5090
  fallback1670:
    find_lex $P5095, "$OUTER"
    find_lex $P5099, "$/"
    unless_null $P5099, fallback1673
    nqp_get_sc_object $P5100, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5099, $P5100
  fallback1673:
    set $P5098, $P5099["name"]
    unless_null $P5098, fallback1674
    nqp_get_sc_object $P5101, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5098, $P5101
  fallback1674:
    set $P5097, $P5098["identifier"]
    unless_null $P5097, fallback1675
    nqp_get_sc_object $P5102, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5097, $P5102
  fallback1675:
    set $P5096, $P5097[0]
    unless_null $P5096, fallback1676
    nqp_get_sc_object $P5103, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5096, $P5103
  fallback1676:
    find_dynamic_lex $P5104, "$*PACKAGE"
    unless_null $P5104, fallback1677
    nqp_get_sc_object $P5107, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5106, $P5107
    set $P5105, $P5106["$PACKAGE"]
    unless_null $P5105, fallback1678
    nqp_get_sc_object $P5108, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5105, $P5108
  fallback1678:
    unless_null $P5105, vivi_5691679
    die "Contextual $*PACKAGE not found"
    box $P5109, "Contextual $*PACKAGE not found"
    set $P5105, $P5109
  vivi_5691679:
    set $P5104, $P5105
  fallback1677:
    $P5110 = $P5089."install_lexical_symbol"($P5095, $P5096, $P5104)
    set $P5111, $P5110
  if567_end1666:
    set $P5163, $P5111
    goto if560_end1644
  if560_else1643:
    find_dynamic_lex $P5113, "$*SCOPE"
    unless_null $P5113, fallback1682
    nqp_get_sc_object $P5116, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5115, $P5116
    set $P5114, $P5115["$SCOPE"]
    unless_null $P5114, fallback1683
    nqp_get_sc_object $P5117, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5114, $P5117
  fallback1683:
    unless_null $P5114, vivi_5711684
    die "Contextual $*SCOPE not found"
    box $P5118, "Contextual $*SCOPE not found"
    set $P5114, $P5118
  vivi_5711684:
    set $P5113, $P5114
  fallback1682:
    set $S5006, $P5113
    iseq $I5005, $S5006, "my"
    unless $I5005 goto if570_else1680 
.annotate 'line', 1003
    find_lex $P5121, "$/"
    unless_null $P5121, fallback1687
    nqp_get_sc_object $P5122, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5121, $P5122
  fallback1687:
    set $P5120, $P5121["name"]
    unless_null $P5120, fallback1688
    nqp_get_sc_object $P5123, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5120, $P5123
  fallback1688:
    set $P5119, $P5120["identifier"]
    unless_null $P5119, fallback1689
    nqp_get_sc_object $P5124, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5119, $P5124
  fallback1689:
    set $N5003, $P5119
    set $N5004, 1
    isne $I5006, $N5003, $N5004
    unless $I5006 goto if572_end1686 
.annotate 'line', 1004
.annotate 'line', 1005
    find_lex $P5126, "$/"
    unless_null $P5126, fallback1690
    nqp_get_sc_object $P5127, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5126, $P5127
  fallback1690:
    set $P5125, $P5126["name"]
    unless_null $P5125, fallback1691
    nqp_get_sc_object $P5128, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5125, $P5128
  fallback1691:
    $P5129 = $P5125."CURSOR"()
    $P5130 = $P5129."panic"("A my scoped package cannot have a multi-part name yet")
  if572_end1686:
.annotate 'line', 1007
    find_dynamic_lex $P5131, "$*W"
    unless_null $P5131, fallback1692
    nqp_get_sc_object $P5134, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5133, $P5134
    set $P5132, $P5133["$W"]
    unless_null $P5132, fallback1693
    nqp_get_sc_object $P5135, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5132, $P5135
  fallback1693:
    unless_null $P5132, vivi_5731694
    die "Contextual $*W not found"
    box $P5136, "Contextual $*W not found"
    set $P5132, $P5136
  vivi_5731694:
    set $P5131, $P5132
  fallback1692:
    find_lex $P5137, "$OUTER"
    find_lex $P5141, "$/"
    unless_null $P5141, fallback1695
    nqp_get_sc_object $P5142, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5141, $P5142
  fallback1695:
    set $P5140, $P5141["name"]
    unless_null $P5140, fallback1696
    nqp_get_sc_object $P5143, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5140, $P5143
  fallback1696:
    set $P5139, $P5140["identifier"]
    unless_null $P5139, fallback1697
    nqp_get_sc_object $P5144, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5139, $P5144
  fallback1697:
    set $P5138, $P5139[0]
    unless_null $P5138, fallback1698
    nqp_get_sc_object $P5145, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5138, $P5145
  fallback1698:
    find_dynamic_lex $P5146, "$*PACKAGE"
    unless_null $P5146, fallback1699
    nqp_get_sc_object $P5149, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5148, $P5149
    set $P5147, $P5148["$PACKAGE"]
    unless_null $P5147, fallback1700
    nqp_get_sc_object $P5150, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5147, $P5150
  fallback1700:
    unless_null $P5147, vivi_5741701
    die "Contextual $*PACKAGE not found"
    box $P5151, "Contextual $*PACKAGE not found"
    set $P5147, $P5151
  vivi_5741701:
    set $P5146, $P5147
  fallback1699:
    $P5152 = $P5131."install_lexical_symbol"($P5137, $P5138, $P5146)
    set $P5162, $P5152
    goto if570_end1681
  if570_else1680:
.annotate 'line', 1009
.annotate 'line', 1010
    find_lex $P5153, "$/"
    $P5154 = $P5153."CURSOR"()
    find_dynamic_lex $P5155, "$*SCOPE"
    unless_null $P5155, fallback1702
    nqp_get_sc_object $P5158, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5157, $P5158
    set $P5156, $P5157["$SCOPE"]
    unless_null $P5156, fallback1703
    nqp_get_sc_object $P5159, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5156, $P5159
  fallback1703:
    unless_null $P5156, vivi_5751704
    die "Contextual $*SCOPE not found"
    box $P5160, "Contextual $*SCOPE not found"
    set $P5156, $P5160
  vivi_5751704:
    set $P5155, $P5156
  fallback1702:
    set $S5008, $P5155
    concat $S5007, $S5008, " scoped packages are not supported"
    $P5161 = $P5154."panic"($S5007)
    set $P5162, $P5161
  if570_end1681:
    set $P5163, $P5162
  if560_end1644:
    .return ($P5163) 
.end
.HLL "nqp"
.namespace []
.sub "role_params" :subid("cuid_109_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1024
    .param pmc _lex_param_0 
    .lex "$*SCOPE", $P101 
    .lex "$*IN_DECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx615_tgt
    .local int rx615_pos
    .local int rx615_off
    .local int rx615_eos
    .local int rx615_rep
    .local pmc rx615_cur
    .local pmc rx615_curclass
    .local pmc rx615_bstack
    .local pmc rx615_cstack
    (rx615_cur, rx615_tgt, rx615_pos, rx615_curclass, rx615_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx615_cur
    length rx615_eos, rx615_tgt
    eq $I19, 1, rx615_restart1755
    gt rx615_pos, rx615_eos, rx615_fail1756
    repr_get_attr_int $I11, self, rx615_curclass, "$!from"
    ne $I11, -1, rxscan616_done1762
    goto rxscan616_scan1761
  rxscan616_loop1760:
    inc rx615_pos
    gt rx615_pos, rx615_eos, rx615_fail1756
    repr_bind_attr_int rx615_cur, rx615_curclass, "$!from", rx615_pos
  rxscan616_scan1761:
    nqp_rxmark rx615_bstack, rxscan616_loop1760, rx615_pos, 0
  rxscan616_done1762:
    repr_bind_attr_int rx615_cur, rx615_curclass, "$!pos", rx615_pos
    $P11 = rx615_cur."ws"()
    repr_get_attr_int $I11, $P11, rx615_curclass, "$!pos"
    lt $I11, 0, rx615_fail1756
    repr_get_attr_int rx615_pos, $P11, rx615_curclass, "$!pos"
    repr_bind_attr_int rx615_cur, rx615_curclass, "$!pos", rx615_pos
    store_lex unicode:"$\x{a2}", rx615_cur
    box $P5003, "my"
    set $P101, $P5003
    repr_bind_attr_int rx615_cur, rx615_curclass, "$!pos", rx615_pos
    $P11 = rx615_cur."ws"()
    repr_get_attr_int $I11, $P11, rx615_curclass, "$!pos"
    lt $I11, 0, rx615_fail1756
    repr_get_attr_int rx615_pos, $P11, rx615_curclass, "$!pos"
    repr_bind_attr_int rx615_cur, rx615_curclass, "$!pos", rx615_pos
    store_lex unicode:"$\x{a2}", rx615_cur
    box $P5004, "variable"
    set $P102, $P5004
    repr_bind_attr_int rx615_cur, rx615_curclass, "$!pos", rx615_pos
    $P11 = rx615_cur."ws"()
    repr_get_attr_int $I11, $P11, rx615_curclass, "$!pos"
    lt $I11, 0, rx615_fail1756
    repr_get_attr_int rx615_pos, $P11, rx615_curclass, "$!pos"
    nqp_rxmark rx615_bstack, rxquantr620_done1767, -1, 0
  rxquantr620_loop1766:
    repr_bind_attr_int rx615_cur, rx615_curclass, "$!pos", rx615_pos
    $P11 = rx615_cur."ws"()
    repr_get_attr_int $I11, $P11, rx615_curclass, "$!pos"
    lt $I11, 0, rx615_fail1756
    repr_get_attr_int rx615_pos, $P11, rx615_curclass, "$!pos"
    repr_bind_attr_int rx615_cur, rx615_curclass, "$!pos", rx615_pos
    $P11 = rx615_cur."variable"()
    repr_get_attr_int $I11, $P11, rx615_curclass, "$!pos"
    lt $I11, 0, rx615_fail1756
    nqp_rxmark rx615_bstack, rxsubrule622_pass1769, -1, 0
  rxsubrule622_pass1769:
    rx615_cstack = rx615_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx615_pos, $P11, rx615_curclass, "$!pos"
    repr_bind_attr_int rx615_cur, rx615_curclass, "$!pos", rx615_pos
    $P11 = rx615_cur."ws"()
    repr_get_attr_int $I11, $P11, rx615_curclass, "$!pos"
    lt $I11, 0, rx615_fail1756
    repr_get_attr_int rx615_pos, $P11, rx615_curclass, "$!pos"
    nqp_rxpeek $I19, rx615_bstack, rxquantr620_done1767
    inc $I19
    inc $I19
    set rx615_rep, rx615_bstack[$I19]
    nqp_rxcommit rx615_bstack, rxquantr620_done1767
    inc rx615_rep
    nqp_rxmark rx615_bstack, rxquantr620_done1767, rx615_pos, rx615_rep
    repr_bind_attr_int rx615_cur, rx615_curclass, "$!pos", rx615_pos
    $P11 = rx615_cur."ws"()
    repr_get_attr_int $I11, $P11, rx615_curclass, "$!pos"
    lt $I11, 0, rx615_fail1756
    repr_get_attr_int rx615_pos, $P11, rx615_curclass, "$!pos"
    add $I11, rx615_pos, 1
    gt $I11, rx615_eos, rx615_fail1756
    substr $S10, rx615_tgt, rx615_pos, 1
    ne $S10, ucs4:",", rx615_fail1756
    add rx615_pos, 1
    repr_bind_attr_int rx615_cur, rx615_curclass, "$!pos", rx615_pos
    $P11 = rx615_cur."ws"()
    repr_get_attr_int $I11, $P11, rx615_curclass, "$!pos"
    lt $I11, 0, rx615_fail1756
    repr_get_attr_int rx615_pos, $P11, rx615_curclass, "$!pos"
    goto rxquantr620_loop1766
  rxquantr620_done1767:
    repr_bind_attr_int rx615_cur, rx615_curclass, "$!pos", rx615_pos
    $P11 = rx615_cur."ws"()
    repr_get_attr_int $I11, $P11, rx615_curclass, "$!pos"
    lt $I11, 0, rx615_fail1756
    repr_get_attr_int rx615_pos, $P11, rx615_curclass, "$!pos"
    rx615_cur."!cursor_pass"(rx615_pos, "role_params", 'backtrack'=>1)
    .return (rx615_cur)
  rx615_restart1755:
    repr_get_attr_obj rx615_cstack, rx615_cur, rx615_curclass, "$!cstack"
  rx615_fail1756:
    unless rx615_bstack, rx615_done1754
    pop $I19, rx615_bstack
    if_null rx615_cstack, rx615_cstack_done1759
    unless rx615_cstack, rx615_cstack_done1759
    dec $I19
    set $P11, rx615_cstack[$I19]
  rx615_cstack_done1759:
    pop rx615_rep, rx615_bstack
    pop rx615_pos, rx615_bstack
    pop $I19, rx615_bstack
    lt rx615_pos, -1, rx615_done1754
    lt rx615_pos, 0, rx615_fail1756
    eq $I19, 0, rx615_fail1756
    nqp_islist $I20, rx615_cstack
    unless $I20, rx615_jump1757
    elements $I18, rx615_bstack
    le $I18, 0, rx615_cut1758
    dec $I18
    set $I18, rx615_bstack[$I18]
  rx615_cut1758:
    assign rx615_cstack, $I18
  rx615_jump1757:
    jump $I19
  rx615_done1754:
    rx615_cur."!cursor_fail"()
    .return (rx615_cur) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator" :subid("cuid_110_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1030
    .param pmc self 
    $P5001 = self."!protoregex"("scope_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<my>" :subid("cuid_111_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1031
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx627_tgt
    .local int rx627_pos
    .local int rx627_off
    .local int rx627_eos
    .local int rx627_rep
    .local pmc rx627_cur
    .local pmc rx627_curclass
    .local pmc rx627_bstack
    .local pmc rx627_cstack
    (rx627_cur, rx627_tgt, rx627_pos, rx627_curclass, rx627_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx627_cur
    length rx627_eos, rx627_tgt
    eq $I19, 1, rx627_restart1776
    gt rx627_pos, rx627_eos, rx627_fail1777
    repr_get_attr_int $I11, self, rx627_curclass, "$!from"
    ne $I11, -1, rxscan628_done1783
    goto rxscan628_scan1782
  rxscan628_loop1781:
    inc rx627_pos
    gt rx627_pos, rx627_eos, rx627_fail1777
    repr_bind_attr_int rx627_cur, rx627_curclass, "$!from", rx627_pos
  rxscan628_scan1782:
    nqp_rxmark rx627_bstack, rxscan628_loop1781, rx627_pos, 0
  rxscan628_done1783:
    nqp_rxmark rx627_bstack, rxcap629_fail1785, rx627_pos, 0
    add $I11, rx627_pos, 2
    gt $I11, rx627_eos, rx627_fail1777
    substr $S10, rx627_tgt, rx627_pos, 2
    ne $S10, ucs4:"my", rx627_fail1777
    add rx627_pos, 2
    nqp_rxpeek $I19, rx627_bstack, rxcap629_fail1785
    inc $I19
    set $I11, rx627_bstack[$I19]
    repr_bind_attr_int rx627_cur, rx627_curclass, "$!pos", rx627_pos
    $P11 = rx627_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx627_pos)
    rx627_cstack = rx627_cur."!cursor_capture"($P11, "sym")
    goto rxcap629_done1784
  rxcap629_fail1785:
    goto rx627_fail1777
  rxcap629_done1784:
    repr_bind_attr_int rx627_cur, rx627_curclass, "$!pos", rx627_pos
    $P11 = rx627_cur."scoped"("my")
    repr_get_attr_int $I11, $P11, rx627_curclass, "$!pos"
    lt $I11, 0, rx627_fail1777
    nqp_rxmark rx627_bstack, rxsubrule630_pass1786, -1, 0
  rxsubrule630_pass1786:
    rx627_cstack = rx627_cur."!cursor_capture"($P11, "scoped")
    repr_get_attr_int rx627_pos, $P11, rx627_curclass, "$!pos"
    rx627_cur."!cursor_pass"(rx627_pos, "scope_declarator:sym<my>", 'backtrack'=>1)
    .return (rx627_cur)
  rx627_restart1776:
    repr_get_attr_obj rx627_cstack, rx627_cur, rx627_curclass, "$!cstack"
  rx627_fail1777:
    unless rx627_bstack, rx627_done1775
    pop $I19, rx627_bstack
    if_null rx627_cstack, rx627_cstack_done1780
    unless rx627_cstack, rx627_cstack_done1780
    dec $I19
    set $P11, rx627_cstack[$I19]
  rx627_cstack_done1780:
    pop rx627_rep, rx627_bstack
    pop rx627_pos, rx627_bstack
    pop $I19, rx627_bstack
    lt rx627_pos, -1, rx627_done1775
    lt rx627_pos, 0, rx627_fail1777
    eq $I19, 0, rx627_fail1777
    nqp_islist $I20, rx627_cstack
    unless $I20, rx627_jump1778
    elements $I18, rx627_bstack
    le $I18, 0, rx627_cut1779
    dec $I18
    set $I18, rx627_bstack[$I18]
  rx627_cut1779:
    assign rx627_cstack, $I18
  rx627_jump1778:
    jump $I19
  rx627_done1775:
    rx627_cur."!cursor_fail"()
    .return (rx627_cur) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<our>" :subid("cuid_112_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1032
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx631_tgt
    .local int rx631_pos
    .local int rx631_off
    .local int rx631_eos
    .local int rx631_rep
    .local pmc rx631_cur
    .local pmc rx631_curclass
    .local pmc rx631_bstack
    .local pmc rx631_cstack
    (rx631_cur, rx631_tgt, rx631_pos, rx631_curclass, rx631_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx631_cur
    length rx631_eos, rx631_tgt
    eq $I19, 1, rx631_restart1789
    gt rx631_pos, rx631_eos, rx631_fail1790
    repr_get_attr_int $I11, self, rx631_curclass, "$!from"
    ne $I11, -1, rxscan632_done1796
    goto rxscan632_scan1795
  rxscan632_loop1794:
    inc rx631_pos
    gt rx631_pos, rx631_eos, rx631_fail1790
    repr_bind_attr_int rx631_cur, rx631_curclass, "$!from", rx631_pos
  rxscan632_scan1795:
    nqp_rxmark rx631_bstack, rxscan632_loop1794, rx631_pos, 0
  rxscan632_done1796:
    nqp_rxmark rx631_bstack, rxcap633_fail1798, rx631_pos, 0
    add $I11, rx631_pos, 3
    gt $I11, rx631_eos, rx631_fail1790
    substr $S10, rx631_tgt, rx631_pos, 3
    ne $S10, ucs4:"our", rx631_fail1790
    add rx631_pos, 3
    nqp_rxpeek $I19, rx631_bstack, rxcap633_fail1798
    inc $I19
    set $I11, rx631_bstack[$I19]
    repr_bind_attr_int rx631_cur, rx631_curclass, "$!pos", rx631_pos
    $P11 = rx631_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx631_pos)
    rx631_cstack = rx631_cur."!cursor_capture"($P11, "sym")
    goto rxcap633_done1797
  rxcap633_fail1798:
    goto rx631_fail1790
  rxcap633_done1797:
    repr_bind_attr_int rx631_cur, rx631_curclass, "$!pos", rx631_pos
    $P11 = rx631_cur."scoped"("our")
    repr_get_attr_int $I11, $P11, rx631_curclass, "$!pos"
    lt $I11, 0, rx631_fail1790
    nqp_rxmark rx631_bstack, rxsubrule634_pass1799, -1, 0
  rxsubrule634_pass1799:
    rx631_cstack = rx631_cur."!cursor_capture"($P11, "scoped")
    repr_get_attr_int rx631_pos, $P11, rx631_curclass, "$!pos"
    rx631_cur."!cursor_pass"(rx631_pos, "scope_declarator:sym<our>", 'backtrack'=>1)
    .return (rx631_cur)
  rx631_restart1789:
    repr_get_attr_obj rx631_cstack, rx631_cur, rx631_curclass, "$!cstack"
  rx631_fail1790:
    unless rx631_bstack, rx631_done1788
    pop $I19, rx631_bstack
    if_null rx631_cstack, rx631_cstack_done1793
    unless rx631_cstack, rx631_cstack_done1793
    dec $I19
    set $P11, rx631_cstack[$I19]
  rx631_cstack_done1793:
    pop rx631_rep, rx631_bstack
    pop rx631_pos, rx631_bstack
    pop $I19, rx631_bstack
    lt rx631_pos, -1, rx631_done1788
    lt rx631_pos, 0, rx631_fail1790
    eq $I19, 0, rx631_fail1790
    nqp_islist $I20, rx631_cstack
    unless $I20, rx631_jump1791
    elements $I18, rx631_bstack
    le $I18, 0, rx631_cut1792
    dec $I18
    set $I18, rx631_bstack[$I18]
  rx631_cut1792:
    assign rx631_cstack, $I18
  rx631_jump1791:
    jump $I19
  rx631_done1788:
    rx631_cur."!cursor_fail"()
    .return (rx631_cur) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<has>" :subid("cuid_113_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1033
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx635_tgt
    .local int rx635_pos
    .local int rx635_off
    .local int rx635_eos
    .local int rx635_rep
    .local pmc rx635_cur
    .local pmc rx635_curclass
    .local pmc rx635_bstack
    .local pmc rx635_cstack
    (rx635_cur, rx635_tgt, rx635_pos, rx635_curclass, rx635_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx635_cur
    length rx635_eos, rx635_tgt
    eq $I19, 1, rx635_restart1802
    gt rx635_pos, rx635_eos, rx635_fail1803
    repr_get_attr_int $I11, self, rx635_curclass, "$!from"
    ne $I11, -1, rxscan636_done1809
    goto rxscan636_scan1808
  rxscan636_loop1807:
    inc rx635_pos
    gt rx635_pos, rx635_eos, rx635_fail1803
    repr_bind_attr_int rx635_cur, rx635_curclass, "$!from", rx635_pos
  rxscan636_scan1808:
    nqp_rxmark rx635_bstack, rxscan636_loop1807, rx635_pos, 0
  rxscan636_done1809:
    nqp_rxmark rx635_bstack, rxcap637_fail1811, rx635_pos, 0
    add $I11, rx635_pos, 3
    gt $I11, rx635_eos, rx635_fail1803
    substr $S10, rx635_tgt, rx635_pos, 3
    ne $S10, ucs4:"has", rx635_fail1803
    add rx635_pos, 3
    nqp_rxpeek $I19, rx635_bstack, rxcap637_fail1811
    inc $I19
    set $I11, rx635_bstack[$I19]
    repr_bind_attr_int rx635_cur, rx635_curclass, "$!pos", rx635_pos
    $P11 = rx635_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx635_pos)
    rx635_cstack = rx635_cur."!cursor_capture"($P11, "sym")
    goto rxcap637_done1810
  rxcap637_fail1811:
    goto rx635_fail1803
  rxcap637_done1810:
    repr_bind_attr_int rx635_cur, rx635_curclass, "$!pos", rx635_pos
    $P11 = rx635_cur."scoped"("has")
    repr_get_attr_int $I11, $P11, rx635_curclass, "$!pos"
    lt $I11, 0, rx635_fail1803
    nqp_rxmark rx635_bstack, rxsubrule638_pass1812, -1, 0
  rxsubrule638_pass1812:
    rx635_cstack = rx635_cur."!cursor_capture"($P11, "scoped")
    repr_get_attr_int rx635_pos, $P11, rx635_curclass, "$!pos"
    rx635_cur."!cursor_pass"(rx635_pos, "scope_declarator:sym<has>", 'backtrack'=>1)
    .return (rx635_cur)
  rx635_restart1802:
    repr_get_attr_obj rx635_cstack, rx635_cur, rx635_curclass, "$!cstack"
  rx635_fail1803:
    unless rx635_bstack, rx635_done1801
    pop $I19, rx635_bstack
    if_null rx635_cstack, rx635_cstack_done1806
    unless rx635_cstack, rx635_cstack_done1806
    dec $I19
    set $P11, rx635_cstack[$I19]
  rx635_cstack_done1806:
    pop rx635_rep, rx635_bstack
    pop rx635_pos, rx635_bstack
    pop $I19, rx635_bstack
    lt rx635_pos, -1, rx635_done1801
    lt rx635_pos, 0, rx635_fail1803
    eq $I19, 0, rx635_fail1803
    nqp_islist $I20, rx635_cstack
    unless $I20, rx635_jump1804
    elements $I18, rx635_bstack
    le $I18, 0, rx635_cut1805
    dec $I18
    set $I18, rx635_bstack[$I18]
  rx635_cut1805:
    assign rx635_cstack, $I18
  rx635_jump1804:
    jump $I19
  rx635_done1801:
    rx635_cur."!cursor_fail"()
    .return (rx635_cur) 
.end
.HLL "nqp"
.namespace []
.sub "scoped" :subid("cuid_114_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1035
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .lex "$*SCOPE", _lex_param_1 
    .local pmc self 
    set self, _lex_param_0
    .local string rx639_tgt
    .local int rx639_pos
    .local int rx639_off
    .local int rx639_eos
    .local int rx639_rep
    .local pmc rx639_cur
    .local pmc rx639_curclass
    .local pmc rx639_bstack
    .local pmc rx639_cstack
    (rx639_cur, rx639_tgt, rx639_pos, rx639_curclass, rx639_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx639_cur
    length rx639_eos, rx639_tgt
    eq $I19, 1, rx639_restart1815
    gt rx639_pos, rx639_eos, rx639_fail1816
    repr_get_attr_int $I11, self, rx639_curclass, "$!from"
    ne $I11, -1, rxscan640_done1822
    goto rxscan640_scan1821
  rxscan640_loop1820:
    inc rx639_pos
    gt rx639_pos, rx639_eos, rx639_fail1816
    repr_bind_attr_int rx639_cur, rx639_curclass, "$!from", rx639_pos
  rxscan640_scan1821:
    nqp_rxmark rx639_bstack, rxscan640_loop1820, rx639_pos, 0
  rxscan640_done1822:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt641_01824
    nqp_push_label $P11, alt641_11828
    nqp_push_label $P11, alt641_21832
    nqp_rxmark rx639_bstack, alt641_end1823, -1, 0
    rx639_cur."!alt"(rx639_pos, "alt_nfa__21_1358115340.819", $P11)
    goto rx639_fail1816
  alt641_01824:
    repr_bind_attr_int rx639_cur, rx639_curclass, "$!pos", rx639_pos
    $P11 = rx639_cur."ws"()
    repr_get_attr_int $I11, $P11, rx639_curclass, "$!pos"
    lt $I11, 0, rx639_fail1816
    repr_get_attr_int rx639_pos, $P11, rx639_curclass, "$!pos"
    repr_bind_attr_int rx639_cur, rx639_curclass, "$!pos", rx639_pos
    $P11 = rx639_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx639_curclass, "$!pos"
    lt $I11, 0, rx639_fail1816
    nqp_rxmark rx639_bstack, rxsubrule643_pass1826, -1, 0
  rxsubrule643_pass1826:
    rx639_cstack = rx639_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx639_pos, $P11, rx639_curclass, "$!pos"
    repr_bind_attr_int rx639_cur, rx639_curclass, "$!pos", rx639_pos
    $P11 = rx639_cur."ws"()
    repr_get_attr_int $I11, $P11, rx639_curclass, "$!pos"
    lt $I11, 0, rx639_fail1816
    repr_get_attr_int rx639_pos, $P11, rx639_curclass, "$!pos"
    goto alt641_end1823
  alt641_11828:
    repr_bind_attr_int rx639_cur, rx639_curclass, "$!pos", rx639_pos
    $P11 = rx639_cur."ws"()
    repr_get_attr_int $I11, $P11, rx639_curclass, "$!pos"
    lt $I11, 0, rx639_fail1816
    repr_get_attr_int rx639_pos, $P11, rx639_curclass, "$!pos"
    repr_bind_attr_int rx639_cur, rx639_curclass, "$!pos", rx639_pos
    $P11 = rx639_cur."multi_declarator"()
    repr_get_attr_int $I11, $P11, rx639_curclass, "$!pos"
    lt $I11, 0, rx639_fail1816
    nqp_rxmark rx639_bstack, rxsubrule646_pass1830, -1, 0
  rxsubrule646_pass1830:
    rx639_cstack = rx639_cur."!cursor_capture"($P11, "multi_declarator")
    repr_get_attr_int rx639_pos, $P11, rx639_curclass, "$!pos"
    repr_bind_attr_int rx639_cur, rx639_curclass, "$!pos", rx639_pos
    $P11 = rx639_cur."ws"()
    repr_get_attr_int $I11, $P11, rx639_curclass, "$!pos"
    lt $I11, 0, rx639_fail1816
    repr_get_attr_int rx639_pos, $P11, rx639_curclass, "$!pos"
    goto alt641_end1823
  alt641_21832:
    repr_bind_attr_int rx639_cur, rx639_curclass, "$!pos", rx639_pos
    $P11 = rx639_cur."ws"()
    repr_get_attr_int $I11, $P11, rx639_curclass, "$!pos"
    lt $I11, 0, rx639_fail1816
    repr_get_attr_int rx639_pos, $P11, rx639_curclass, "$!pos"
    repr_bind_attr_int rx639_cur, rx639_curclass, "$!pos", rx639_pos
    $P11 = rx639_cur."package_declarator"()
    repr_get_attr_int $I11, $P11, rx639_curclass, "$!pos"
    lt $I11, 0, rx639_fail1816
    nqp_rxmark rx639_bstack, rxsubrule649_pass1834, -1, 0
  rxsubrule649_pass1834:
    rx639_cstack = rx639_cur."!cursor_capture"($P11, "package_declarator")
    repr_get_attr_int rx639_pos, $P11, rx639_curclass, "$!pos"
    repr_bind_attr_int rx639_cur, rx639_curclass, "$!pos", rx639_pos
    $P11 = rx639_cur."ws"()
    repr_get_attr_int $I11, $P11, rx639_curclass, "$!pos"
    lt $I11, 0, rx639_fail1816
    repr_get_attr_int rx639_pos, $P11, rx639_curclass, "$!pos"
    goto alt641_end1823
  alt641_end1823:
    rx639_cur."!cursor_pass"(rx639_pos, "scoped", 'backtrack'=>1)
    .return (rx639_cur)
  rx639_restart1815:
    repr_get_attr_obj rx639_cstack, rx639_cur, rx639_curclass, "$!cstack"
  rx639_fail1816:
    unless rx639_bstack, rx639_done1814
    pop $I19, rx639_bstack
    if_null rx639_cstack, rx639_cstack_done1819
    unless rx639_cstack, rx639_cstack_done1819
    dec $I19
    set $P11, rx639_cstack[$I19]
  rx639_cstack_done1819:
    pop rx639_rep, rx639_bstack
    pop rx639_pos, rx639_bstack
    pop $I19, rx639_bstack
    lt rx639_pos, -1, rx639_done1814
    lt rx639_pos, 0, rx639_fail1816
    eq $I19, 0, rx639_fail1816
    nqp_islist $I20, rx639_cstack
    unless $I20, rx639_jump1817
    elements $I18, rx639_bstack
    le $I18, 0, rx639_cut1818
    dec $I18
    set $I18, rx639_bstack[$I18]
  rx639_cut1818:
    assign rx639_cstack, $I18
  rx639_jump1817:
    jump $I19
  rx639_done1814:
    rx639_cur."!cursor_fail"()
    .return (rx639_cur) 
.end
.HLL "nqp"
.namespace []
.sub "typename" :subid("cuid_115_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1041
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_400_1358115338.889' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx651_tgt
    .local int rx651_pos
    .local int rx651_off
    .local int rx651_eos
    .local int rx651_rep
    .local pmc rx651_cur
    .local pmc rx651_curclass
    .local pmc rx651_bstack
    .local pmc rx651_cstack
    (rx651_cur, rx651_tgt, rx651_pos, rx651_curclass, rx651_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx651_cur
    length rx651_eos, rx651_tgt
    eq $I19, 1, rx651_restart1838
    gt rx651_pos, rx651_eos, rx651_fail1839
    repr_get_attr_int $I11, self, rx651_curclass, "$!from"
    ne $I11, -1, rxscan652_done1845
    goto rxscan652_scan1844
  rxscan652_loop1843:
    inc rx651_pos
    gt rx651_pos, rx651_eos, rx651_fail1839
    repr_bind_attr_int rx651_cur, rx651_curclass, "$!from", rx651_pos
  rxscan652_scan1844:
    nqp_rxmark rx651_bstack, rxscan652_loop1843, rx651_pos, 0
  rxscan652_done1845:
    repr_bind_attr_int rx651_cur, rx651_curclass, "$!pos", rx651_pos
    $P11 = rx651_cur."name"()
    repr_get_attr_int $I11, $P11, rx651_curclass, "$!pos"
    lt $I11, 0, rx651_fail1839
    nqp_rxmark rx651_bstack, rxsubrule653_pass1846, -1, 0
  rxsubrule653_pass1846:
    rx651_cstack = rx651_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx651_pos, $P11, rx651_curclass, "$!pos"
    repr_bind_attr_int rx651_cur, rx651_curclass, "$!pos", rx651_pos
    store_lex unicode:"$\x{a2}", rx651_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_400_1358115338.889' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx651_fail1839
    rx651_cur."!cursor_pass"(rx651_pos, "typename", 'backtrack'=>1)
    .return (rx651_cur)
  rx651_restart1838:
    repr_get_attr_obj rx651_cstack, rx651_cur, rx651_curclass, "$!cstack"
  rx651_fail1839:
    unless rx651_bstack, rx651_done1837
    pop $I19, rx651_bstack
    if_null rx651_cstack, rx651_cstack_done1842
    unless rx651_cstack, rx651_cstack_done1842
    dec $I19
    set $P11, rx651_cstack[$I19]
  rx651_cstack_done1842:
    pop rx651_rep, rx651_bstack
    pop rx651_pos, rx651_bstack
    pop $I19, rx651_bstack
    lt rx651_pos, -1, rx651_done1837
    lt rx651_pos, 0, rx651_fail1839
    eq $I19, 0, rx651_fail1839
    nqp_islist $I20, rx651_cstack
    unless $I20, rx651_jump1840
    elements $I18, rx651_bstack
    le $I18, 0, rx651_cut1841
    dec $I18
    set $I18, rx651_bstack[$I18]
  rx651_cut1841:
    assign rx651_cstack, $I18
  rx651_jump1840:
    jump $I19
  rx651_done1837:
    rx651_cur."!cursor_fail"()
    .return (rx651_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_400_1358115338.889") :anon :lex :outer("cuid_115_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1043

    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback1847
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback1848
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5005
  fallback1848:
    unless_null $P5002, vivi_6541849
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_6541849:
    set $P5001, $P5002
  fallback1847:
    find_lex $P5007, "$/"
    find_lex $P5010, "$/"
    unless_null $P5010, fallback1850
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5010, $P5011
  fallback1850:
    set $P5009, $P5010["name"]
    unless_null $P5009, fallback1851
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5009, $P5012
  fallback1851:
    set $P5008, $P5009["identifier"]
    unless_null $P5008, fallback1852
    nqp_get_sc_object $P5013, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5008, $P5013
  fallback1852:
    $P5014 = $P5001."known_sym"($P5007, $P5008)
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "declarator" :subid("cuid_116_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1046
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx655_tgt
    .local int rx655_pos
    .local int rx655_off
    .local int rx655_eos
    .local int rx655_rep
    .local pmc rx655_cur
    .local pmc rx655_curclass
    .local pmc rx655_bstack
    .local pmc rx655_cstack
    (rx655_cur, rx655_tgt, rx655_pos, rx655_curclass, rx655_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx655_cur
    length rx655_eos, rx655_tgt
    eq $I19, 1, rx655_restart1855
    gt rx655_pos, rx655_eos, rx655_fail1856
    repr_get_attr_int $I11, self, rx655_curclass, "$!from"
    ne $I11, -1, rxscan656_done1862
    goto rxscan656_scan1861
  rxscan656_loop1860:
    inc rx655_pos
    gt rx655_pos, rx655_eos, rx655_fail1856
    repr_bind_attr_int rx655_cur, rx655_curclass, "$!from", rx655_pos
  rxscan656_scan1861:
    nqp_rxmark rx655_bstack, rxscan656_loop1860, rx655_pos, 0
  rxscan656_done1862:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt657_01864
    nqp_push_label $P11, alt657_11866
    nqp_rxmark rx655_bstack, alt657_end1863, -1, 0
    rx655_cur."!alt"(rx655_pos, "alt_nfa__22_1358115340.832", $P11)
    goto rx655_fail1856
  alt657_01864:
    repr_bind_attr_int rx655_cur, rx655_curclass, "$!pos", rx655_pos
    $P11 = rx655_cur."variable_declarator"()
    repr_get_attr_int $I11, $P11, rx655_curclass, "$!pos"
    lt $I11, 0, rx655_fail1856
    nqp_rxmark rx655_bstack, rxsubrule658_pass1865, -1, 0
  rxsubrule658_pass1865:
    rx655_cstack = rx655_cur."!cursor_capture"($P11, "variable_declarator")
    repr_get_attr_int rx655_pos, $P11, rx655_curclass, "$!pos"
    goto alt657_end1863
  alt657_11866:
    repr_bind_attr_int rx655_cur, rx655_curclass, "$!pos", rx655_pos
    $P11 = rx655_cur."routine_declarator"()
    repr_get_attr_int $I11, $P11, rx655_curclass, "$!pos"
    lt $I11, 0, rx655_fail1856
    nqp_rxmark rx655_bstack, rxsubrule659_pass1867, -1, 0
  rxsubrule659_pass1867:
    rx655_cstack = rx655_cur."!cursor_capture"($P11, "routine_declarator")
    repr_get_attr_int rx655_pos, $P11, rx655_curclass, "$!pos"
    goto alt657_end1863
  alt657_end1863:
    rx655_cur."!cursor_pass"(rx655_pos, "declarator", 'backtrack'=>1)
    .return (rx655_cur)
  rx655_restart1855:
    repr_get_attr_obj rx655_cstack, rx655_cur, rx655_curclass, "$!cstack"
  rx655_fail1856:
    unless rx655_bstack, rx655_done1854
    pop $I19, rx655_bstack
    if_null rx655_cstack, rx655_cstack_done1859
    unless rx655_cstack, rx655_cstack_done1859
    dec $I19
    set $P11, rx655_cstack[$I19]
  rx655_cstack_done1859:
    pop rx655_rep, rx655_bstack
    pop rx655_pos, rx655_bstack
    pop $I19, rx655_bstack
    lt rx655_pos, -1, rx655_done1854
    lt rx655_pos, 0, rx655_fail1856
    eq $I19, 0, rx655_fail1856
    nqp_islist $I20, rx655_cstack
    unless $I20, rx655_jump1857
    elements $I18, rx655_bstack
    le $I18, 0, rx655_cut1858
    dec $I18
    set $I18, rx655_bstack[$I18]
  rx655_cut1858:
    assign rx655_cstack, $I18
  rx655_jump1857:
    jump $I19
  rx655_done1854:
    rx655_cur."!cursor_fail"()
    .return (rx655_cur) 
.end
.HLL "nqp"
.namespace []
.sub "variable_declarator" :subid("cuid_117_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1051
    .param pmc _lex_param_0 
    .const 'Sub' $P5006 = 'cuid_401_1358115338.889' 
    capture_lex $P5006 
    .lex "$*IN_DECL", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx660_tgt
    .local int rx660_pos
    .local int rx660_off
    .local int rx660_eos
    .local int rx660_rep
    .local pmc rx660_cur
    .local pmc rx660_curclass
    .local pmc rx660_bstack
    .local pmc rx660_cstack
    (rx660_cur, rx660_tgt, rx660_pos, rx660_curclass, rx660_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx660_cur
    length rx660_eos, rx660_tgt
    eq $I19, 1, rx660_restart1870
    gt rx660_pos, rx660_eos, rx660_fail1871
    repr_get_attr_int $I11, self, rx660_curclass, "$!from"
    ne $I11, -1, rxscan661_done1877
    goto rxscan661_scan1876
  rxscan661_loop1875:
    inc rx660_pos
    gt rx660_pos, rx660_eos, rx660_fail1871
    repr_bind_attr_int rx660_cur, rx660_curclass, "$!from", rx660_pos
  rxscan661_scan1876:
    nqp_rxmark rx660_bstack, rxscan661_loop1875, rx660_pos, 0
  rxscan661_done1877:
    repr_bind_attr_int rx660_cur, rx660_curclass, "$!pos", rx660_pos
    $P11 = rx660_cur."ws"()
    repr_get_attr_int $I11, $P11, rx660_curclass, "$!pos"
    lt $I11, 0, rx660_fail1871
    repr_get_attr_int rx660_pos, $P11, rx660_curclass, "$!pos"
    nqp_rxmark rx660_bstack, rxquantr663_done1880, rx660_pos, 0
  rxquantr663_loop1879:
    repr_bind_attr_int rx660_cur, rx660_curclass, "$!pos", rx660_pos
    $P11 = rx660_cur."typename"()
    repr_get_attr_int $I11, $P11, rx660_curclass, "$!pos"
    lt $I11, 0, rx660_fail1871
    goto rxsubrule664_pass1881
  rxsubrule664_back1882:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx660_curclass, "$!pos"
    lt $I11, 0, rx660_fail1871
  rxsubrule664_pass1881:
    rx660_cstack = rx660_cur."!cursor_capture"($P11, "typename")
    set_addr $I11, rxsubrule664_back1882
    push rx660_bstack, $I11
    push rx660_bstack, 0
    push rx660_bstack, rx660_pos
    elements $I11, rx660_cstack
    push rx660_bstack, $I11
    repr_get_attr_int rx660_pos, $P11, rx660_curclass, "$!pos"
    nqp_rxpeek $I19, rx660_bstack, rxquantr663_done1880
    inc $I19
    inc $I19
    set rx660_rep, rx660_bstack[$I19]
    nqp_rxcommit rx660_bstack, rxquantr663_done1880
    inc rx660_rep
  rxquantr663_done1880:
    repr_bind_attr_int rx660_cur, rx660_curclass, "$!pos", rx660_pos
    $P11 = rx660_cur."ws"()
    repr_get_attr_int $I11, $P11, rx660_curclass, "$!pos"
    lt $I11, 0, rx660_fail1871
    repr_get_attr_int rx660_pos, $P11, rx660_curclass, "$!pos"
    repr_bind_attr_int rx660_cur, rx660_curclass, "$!pos", rx660_pos
    store_lex unicode:"$\x{a2}", rx660_cur
    box $P5002, "variable"
    set $P101, $P5002
    repr_bind_attr_int rx660_cur, rx660_curclass, "$!pos", rx660_pos
    $P11 = rx660_cur."ws"()
    repr_get_attr_int $I11, $P11, rx660_curclass, "$!pos"
    lt $I11, 0, rx660_fail1871
    repr_get_attr_int rx660_pos, $P11, rx660_curclass, "$!pos"
    repr_bind_attr_int rx660_cur, rx660_curclass, "$!pos", rx660_pos
    $P11 = rx660_cur."variable"()
    repr_get_attr_int $I11, $P11, rx660_curclass, "$!pos"
    lt $I11, 0, rx660_fail1871
    nqp_rxmark rx660_bstack, rxsubrule667_pass1885, -1, 0
  rxsubrule667_pass1885:
    rx660_cstack = rx660_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx660_pos, $P11, rx660_curclass, "$!pos"
    repr_bind_attr_int rx660_cur, rx660_curclass, "$!pos", rx660_pos
    $P11 = rx660_cur."ws"()
    repr_get_attr_int $I11, $P11, rx660_curclass, "$!pos"
    lt $I11, 0, rx660_fail1871
    repr_get_attr_int rx660_pos, $P11, rx660_curclass, "$!pos"
    repr_bind_attr_int rx660_cur, rx660_curclass, "$!pos", rx660_pos
    store_lex unicode:"$\x{a2}", rx660_cur
    $P5003 = $P102."MATCH"()
    set $P103, $P5003
    .const 'Sub' $P5004 = 'cuid_401_1358115338.889' 
    capture_lex $P5004
    $P5005 = $P5004()
    repr_bind_attr_int rx660_cur, rx660_curclass, "$!pos", rx660_pos
    $P11 = rx660_cur."ws"()
    repr_get_attr_int $I11, $P11, rx660_curclass, "$!pos"
    lt $I11, 0, rx660_fail1871
    repr_get_attr_int rx660_pos, $P11, rx660_curclass, "$!pos"
    nqp_rxmark rx660_bstack, rxquantr670_done1889, rx660_pos, 0
  rxquantr670_loop1888:
    repr_bind_attr_int rx660_cur, rx660_curclass, "$!pos", rx660_pos
    $P11 = rx660_cur."trait"()
    repr_get_attr_int $I11, $P11, rx660_curclass, "$!pos"
    lt $I11, 0, rx660_fail1871
    goto rxsubrule671_pass1890
  rxsubrule671_back1891:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx660_curclass, "$!pos"
    lt $I11, 0, rx660_fail1871
  rxsubrule671_pass1890:
    rx660_cstack = rx660_cur."!cursor_capture"($P11, "trait")
    set_addr $I11, rxsubrule671_back1891
    push rx660_bstack, $I11
    push rx660_bstack, 0
    push rx660_bstack, rx660_pos
    elements $I11, rx660_cstack
    push rx660_bstack, $I11
    repr_get_attr_int rx660_pos, $P11, rx660_curclass, "$!pos"
    nqp_rxpeek $I19, rx660_bstack, rxquantr670_done1889
    inc $I19
    inc $I19
    set rx660_rep, rx660_bstack[$I19]
    nqp_rxcommit rx660_bstack, rxquantr670_done1889
    inc rx660_rep
    nqp_rxmark rx660_bstack, rxquantr670_done1889, rx660_pos, rx660_rep
    goto rxquantr670_loop1888
  rxquantr670_done1889:
    repr_bind_attr_int rx660_cur, rx660_curclass, "$!pos", rx660_pos
    $P11 = rx660_cur."ws"()
    repr_get_attr_int $I11, $P11, rx660_curclass, "$!pos"
    lt $I11, 0, rx660_fail1871
    repr_get_attr_int rx660_pos, $P11, rx660_curclass, "$!pos"
    rx660_cur."!cursor_pass"(rx660_pos, "variable_declarator", 'backtrack'=>1)
    .return (rx660_cur)
  rx660_restart1870:
    repr_get_attr_obj rx660_cstack, rx660_cur, rx660_curclass, "$!cstack"
  rx660_fail1871:
    unless rx660_bstack, rx660_done1869
    pop $I19, rx660_bstack
    if_null rx660_cstack, rx660_cstack_done1874
    unless rx660_cstack, rx660_cstack_done1874
    dec $I19
    set $P11, rx660_cstack[$I19]
  rx660_cstack_done1874:
    pop rx660_rep, rx660_bstack
    pop rx660_pos, rx660_bstack
    pop $I19, rx660_bstack
    lt rx660_pos, -1, rx660_done1869
    lt rx660_pos, 0, rx660_fail1871
    eq $I19, 0, rx660_fail1871
    nqp_islist $I20, rx660_cstack
    unless $I20, rx660_jump1872
    elements $I18, rx660_bstack
    le $I18, 0, rx660_cut1873
    dec $I18
    set $I18, rx660_bstack[$I18]
  rx660_cut1873:
    assign rx660_cstack, $I18
  rx660_jump1872:
    jump $I19
  rx660_done1869:
    rx660_cur."!cursor_fail"()
    .return (rx660_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_401_1358115338.889") :anon :lex :outer("cuid_117_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1055

    box $P5001, 0
    store_dynamic_lex "$*IN_DECL", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator" :subid("cuid_118_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1059
    .param pmc self 
    $P5001 = self."!protoregex"("routine_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<sub>" :subid("cuid_119_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1060
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx673_tgt
    .local int rx673_pos
    .local int rx673_off
    .local int rx673_eos
    .local int rx673_rep
    .local pmc rx673_cur
    .local pmc rx673_curclass
    .local pmc rx673_bstack
    .local pmc rx673_cstack
    (rx673_cur, rx673_tgt, rx673_pos, rx673_curclass, rx673_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx673_cur
    length rx673_eos, rx673_tgt
    eq $I19, 1, rx673_restart1895
    gt rx673_pos, rx673_eos, rx673_fail1896
    repr_get_attr_int $I11, self, rx673_curclass, "$!from"
    ne $I11, -1, rxscan674_done1902
    goto rxscan674_scan1901
  rxscan674_loop1900:
    inc rx673_pos
    gt rx673_pos, rx673_eos, rx673_fail1896
    repr_bind_attr_int rx673_cur, rx673_curclass, "$!from", rx673_pos
  rxscan674_scan1901:
    nqp_rxmark rx673_bstack, rxscan674_loop1900, rx673_pos, 0
  rxscan674_done1902:
    nqp_rxmark rx673_bstack, rxcap675_fail1904, rx673_pos, 0
    add $I11, rx673_pos, 3
    gt $I11, rx673_eos, rx673_fail1896
    substr $S10, rx673_tgt, rx673_pos, 3
    ne $S10, ucs4:"sub", rx673_fail1896
    add rx673_pos, 3
    nqp_rxpeek $I19, rx673_bstack, rxcap675_fail1904
    inc $I19
    set $I11, rx673_bstack[$I19]
    repr_bind_attr_int rx673_cur, rx673_curclass, "$!pos", rx673_pos
    $P11 = rx673_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx673_pos)
    rx673_cstack = rx673_cur."!cursor_capture"($P11, "sym")
    goto rxcap675_done1903
  rxcap675_fail1904:
    goto rx673_fail1896
  rxcap675_done1903:
    repr_bind_attr_int rx673_cur, rx673_curclass, "$!pos", rx673_pos
    $P11 = rx673_cur."routine_def"()
    repr_get_attr_int $I11, $P11, rx673_curclass, "$!pos"
    lt $I11, 0, rx673_fail1896
    nqp_rxmark rx673_bstack, rxsubrule676_pass1905, -1, 0
  rxsubrule676_pass1905:
    rx673_cstack = rx673_cur."!cursor_capture"($P11, "routine_def")
    repr_get_attr_int rx673_pos, $P11, rx673_curclass, "$!pos"
    rx673_cur."!cursor_pass"(rx673_pos, "routine_declarator:sym<sub>", 'backtrack'=>1)
    .return (rx673_cur)
  rx673_restart1895:
    repr_get_attr_obj rx673_cstack, rx673_cur, rx673_curclass, "$!cstack"
  rx673_fail1896:
    unless rx673_bstack, rx673_done1894
    pop $I19, rx673_bstack
    if_null rx673_cstack, rx673_cstack_done1899
    unless rx673_cstack, rx673_cstack_done1899
    dec $I19
    set $P11, rx673_cstack[$I19]
  rx673_cstack_done1899:
    pop rx673_rep, rx673_bstack
    pop rx673_pos, rx673_bstack
    pop $I19, rx673_bstack
    lt rx673_pos, -1, rx673_done1894
    lt rx673_pos, 0, rx673_fail1896
    eq $I19, 0, rx673_fail1896
    nqp_islist $I20, rx673_cstack
    unless $I20, rx673_jump1897
    elements $I18, rx673_bstack
    le $I18, 0, rx673_cut1898
    dec $I18
    set $I18, rx673_bstack[$I18]
  rx673_cut1898:
    assign rx673_cstack, $I18
  rx673_jump1897:
    jump $I19
  rx673_done1894:
    rx673_cur."!cursor_fail"()
    .return (rx673_cur) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<method>" :subid("cuid_120_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1061
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx677_tgt
    .local int rx677_pos
    .local int rx677_off
    .local int rx677_eos
    .local int rx677_rep
    .local pmc rx677_cur
    .local pmc rx677_curclass
    .local pmc rx677_bstack
    .local pmc rx677_cstack
    (rx677_cur, rx677_tgt, rx677_pos, rx677_curclass, rx677_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx677_cur
    length rx677_eos, rx677_tgt
    eq $I19, 1, rx677_restart1908
    gt rx677_pos, rx677_eos, rx677_fail1909
    repr_get_attr_int $I11, self, rx677_curclass, "$!from"
    ne $I11, -1, rxscan678_done1915
    goto rxscan678_scan1914
  rxscan678_loop1913:
    inc rx677_pos
    gt rx677_pos, rx677_eos, rx677_fail1909
    repr_bind_attr_int rx677_cur, rx677_curclass, "$!from", rx677_pos
  rxscan678_scan1914:
    nqp_rxmark rx677_bstack, rxscan678_loop1913, rx677_pos, 0
  rxscan678_done1915:
    nqp_rxmark rx677_bstack, rxcap679_fail1917, rx677_pos, 0
    add $I11, rx677_pos, 6
    gt $I11, rx677_eos, rx677_fail1909
    substr $S10, rx677_tgt, rx677_pos, 6
    ne $S10, ucs4:"method", rx677_fail1909
    add rx677_pos, 6
    nqp_rxpeek $I19, rx677_bstack, rxcap679_fail1917
    inc $I19
    set $I11, rx677_bstack[$I19]
    repr_bind_attr_int rx677_cur, rx677_curclass, "$!pos", rx677_pos
    $P11 = rx677_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx677_pos)
    rx677_cstack = rx677_cur."!cursor_capture"($P11, "sym")
    goto rxcap679_done1916
  rxcap679_fail1917:
    goto rx677_fail1909
  rxcap679_done1916:
    repr_bind_attr_int rx677_cur, rx677_curclass, "$!pos", rx677_pos
    $P11 = rx677_cur."method_def"()
    repr_get_attr_int $I11, $P11, rx677_curclass, "$!pos"
    lt $I11, 0, rx677_fail1909
    nqp_rxmark rx677_bstack, rxsubrule680_pass1918, -1, 0
  rxsubrule680_pass1918:
    rx677_cstack = rx677_cur."!cursor_capture"($P11, "method_def")
    repr_get_attr_int rx677_pos, $P11, rx677_curclass, "$!pos"
    rx677_cur."!cursor_pass"(rx677_pos, "routine_declarator:sym<method>", 'backtrack'=>1)
    .return (rx677_cur)
  rx677_restart1908:
    repr_get_attr_obj rx677_cstack, rx677_cur, rx677_curclass, "$!cstack"
  rx677_fail1909:
    unless rx677_bstack, rx677_done1907
    pop $I19, rx677_bstack
    if_null rx677_cstack, rx677_cstack_done1912
    unless rx677_cstack, rx677_cstack_done1912
    dec $I19
    set $P11, rx677_cstack[$I19]
  rx677_cstack_done1912:
    pop rx677_rep, rx677_bstack
    pop rx677_pos, rx677_bstack
    pop $I19, rx677_bstack
    lt rx677_pos, -1, rx677_done1907
    lt rx677_pos, 0, rx677_fail1909
    eq $I19, 0, rx677_fail1909
    nqp_islist $I20, rx677_cstack
    unless $I20, rx677_jump1910
    elements $I18, rx677_bstack
    le $I18, 0, rx677_cut1911
    dec $I18
    set $I18, rx677_bstack[$I18]
  rx677_cut1911:
    assign rx677_cstack, $I18
  rx677_jump1910:
    jump $I19
  rx677_done1907:
    rx677_cur."!cursor_fail"()
    .return (rx677_cur) 
.end
.HLL "nqp"
.namespace []
.sub "routine_def" :subid("cuid_121_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1063
    .param pmc _lex_param_0 
    .lex "$*RETURN_USED", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx681_tgt
    .local int rx681_pos
    .local int rx681_off
    .local int rx681_eos
    .local int rx681_rep
    .local pmc rx681_cur
    .local pmc rx681_curclass
    .local pmc rx681_bstack
    .local pmc rx681_cstack
    (rx681_cur, rx681_tgt, rx681_pos, rx681_curclass, rx681_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx681_cur
    length rx681_eos, rx681_tgt
    eq $I19, 1, rx681_restart1921
    gt rx681_pos, rx681_eos, rx681_fail1922
    repr_get_attr_int $I11, self, rx681_curclass, "$!from"
    ne $I11, -1, rxscan682_done1928
    goto rxscan682_scan1927
  rxscan682_loop1926:
    inc rx681_pos
    gt rx681_pos, rx681_eos, rx681_fail1922
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!from", rx681_pos
  rxscan682_scan1927:
    nqp_rxmark rx681_bstack, rxscan682_loop1926, rx681_pos, 0
  rxscan682_done1928:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1922
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    store_lex unicode:"$\x{a2}", rx681_cur
    box $P5002, 0
    set $P101, $P5002
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1922
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    nqp_rxmark rx681_bstack, rxquantr685_done1932, rx681_pos, 0
  rxquantr685_loop1931:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1922
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    nqp_rxmark rx681_bstack, rxcap687_fail1935, rx681_pos, 0
    nqp_rxmark rx681_bstack, rxquantr688_done1937, rx681_pos, 0
  rxquantr688_loop1936:
    add $I11, rx681_pos, 1
    gt $I11, rx681_eos, rx681_fail1922
    substr $S10, rx681_tgt, rx681_pos, 1
    ne $S10, ucs4:"&", rx681_fail1922
    add rx681_pos, 1
    nqp_rxpeek $I19, rx681_bstack, rxquantr688_done1937
    inc $I19
    inc $I19
    set rx681_rep, rx681_bstack[$I19]
    nqp_rxcommit rx681_bstack, rxquantr688_done1937
    inc rx681_rep
  rxquantr688_done1937:
    nqp_rxpeek $I19, rx681_bstack, rxcap687_fail1935
    inc $I19
    set $I11, rx681_bstack[$I19]
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx681_pos)
    rx681_cstack = rx681_cur."!cursor_capture"($P11, "sigil")
    goto rxcap687_done1934
  rxcap687_fail1935:
    goto rx681_fail1922
  rxcap687_done1934:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1922
    nqp_rxmark rx681_bstack, rxsubrule689_pass1938, -1, 0
  rxsubrule689_pass1938:
    rx681_cstack = rx681_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1922
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    nqp_rxpeek $I19, rx681_bstack, rxquantr685_done1932
    inc $I19
    inc $I19
    set rx681_rep, rx681_bstack[$I19]
    nqp_rxcommit rx681_bstack, rxquantr685_done1932
    inc rx681_rep
  rxquantr685_done1932:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1922
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1922
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1922
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
  alt694_01944:
    nqp_rxmark rx681_bstack, alt694_11950, rx681_pos, 0
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1922
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    add $I11, rx681_pos, 1
    gt $I11, rx681_eos, rx681_fail1922
    substr $S10, rx681_tgt, rx681_pos, 1
    ne $S10, ucs4:"(", rx681_fail1922
    add rx681_pos, 1
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1922
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."signature"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1922
    nqp_rxmark rx681_bstack, rxsubrule697_pass1947, -1, 0
  rxsubrule697_pass1947:
    rx681_cstack = rx681_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1922
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    add $I11, rx681_pos, 1
    gt $I11, rx681_eos, rx681_fail1922
    substr $S10, rx681_tgt, rx681_pos, 1
    ne $S10, ucs4:")", rx681_fail1922
    add rx681_pos, 1
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1922
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    goto alt694_end1943
  alt694_11950:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1922
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."panic"("Routine declaration requires a signature")
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1922
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1922
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
  alt694_end1943:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1922
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    nqp_rxmark rx681_bstack, rxquantr704_done1956, rx681_pos, 0
  rxquantr704_loop1955:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."trait"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1922
    goto rxsubrule705_pass1957
  rxsubrule705_back1958:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1922
  rxsubrule705_pass1957:
    rx681_cstack = rx681_cur."!cursor_capture"($P11, "trait")
    set_addr $I11, rxsubrule705_back1958
    push rx681_bstack, $I11
    push rx681_bstack, 0
    push rx681_bstack, rx681_pos
    elements $I11, rx681_cstack
    push rx681_bstack, $I11
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    nqp_rxpeek $I19, rx681_bstack, rxquantr704_done1956
    inc $I19
    inc $I19
    set rx681_rep, rx681_bstack[$I19]
    nqp_rxcommit rx681_bstack, rxquantr704_done1956
    inc rx681_rep
    nqp_rxmark rx681_bstack, rxquantr704_done1956, rx681_pos, rx681_rep
    goto rxquantr704_loop1955
  rxquantr704_done1956:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1922
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt707_01961
    nqp_push_label $P11, alt707_11965
    nqp_rxmark rx681_bstack, alt707_end1960, -1, 0
    rx681_cur."!alt"(rx681_pos, "alt_nfa__23_1358115340.97", $P11)
    goto rx681_fail1922
  alt707_01961:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1922
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."onlystar"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1922
    nqp_rxmark rx681_bstack, rxsubrule709_pass1963, -1, 0
  rxsubrule709_pass1963:
    rx681_cstack = rx681_cur."!cursor_capture"($P11, "onlystar")
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1922
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    goto alt707_end1960
  alt707_11965:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1922
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1922
    nqp_rxmark rx681_bstack, rxsubrule712_pass1967, -1, 0
  rxsubrule712_pass1967:
    rx681_cstack = rx681_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1922
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    goto alt707_end1960
  alt707_end1960:
    nqp_rxcommit rx681_bstack, alt707_end1960
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1922
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    rx681_cur."!cursor_pass"(rx681_pos, "routine_def", 'backtrack'=>1)
    .return (rx681_cur)
  rx681_restart1921:
    repr_get_attr_obj rx681_cstack, rx681_cur, rx681_curclass, "$!cstack"
  rx681_fail1922:
    unless rx681_bstack, rx681_done1920
    pop $I19, rx681_bstack
    if_null rx681_cstack, rx681_cstack_done1925
    unless rx681_cstack, rx681_cstack_done1925
    dec $I19
    set $P11, rx681_cstack[$I19]
  rx681_cstack_done1925:
    pop rx681_rep, rx681_bstack
    pop rx681_pos, rx681_bstack
    pop $I19, rx681_bstack
    lt rx681_pos, -1, rx681_done1920
    lt rx681_pos, 0, rx681_fail1922
    eq $I19, 0, rx681_fail1922
    nqp_islist $I20, rx681_cstack
    unless $I20, rx681_jump1923
    elements $I18, rx681_bstack
    le $I18, 0, rx681_cut1924
    dec $I18
    set $I18, rx681_bstack[$I18]
  rx681_cut1924:
    assign rx681_cstack, $I18
  rx681_jump1923:
    jump $I19
  rx681_done1920:
    rx681_cur."!cursor_fail"()
    .return (rx681_cur) 
.end
.HLL "nqp"
.namespace []
.sub "method_def" :subid("cuid_122_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1076
    .param pmc _lex_param_0 
    .const 'Sub' $P5008 = 'cuid_402_1358115338.889' 
    capture_lex $P5008 
    .lex "$*RETURN_USED", $P101 
    .lex "$*INVOCANT_OK", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx715_tgt
    .local int rx715_pos
    .local int rx715_off
    .local int rx715_eos
    .local int rx715_rep
    .local pmc rx715_cur
    .local pmc rx715_curclass
    .local pmc rx715_bstack
    .local pmc rx715_cstack
    (rx715_cur, rx715_tgt, rx715_pos, rx715_curclass, rx715_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx715_cur
    length rx715_eos, rx715_tgt
    eq $I19, 1, rx715_restart1972
    gt rx715_pos, rx715_eos, rx715_fail1973
    repr_get_attr_int $I11, self, rx715_curclass, "$!from"
    ne $I11, -1, rxscan716_done1979
    goto rxscan716_scan1978
  rxscan716_loop1977:
    inc rx715_pos
    gt rx715_pos, rx715_eos, rx715_fail1973
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!from", rx715_pos
  rxscan716_scan1978:
    nqp_rxmark rx715_bstack, rxscan716_loop1977, rx715_pos, 0
  rxscan716_done1979:
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1973
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    store_lex unicode:"$\x{a2}", rx715_cur
    box $P5003, 0
    set $P101, $P5003
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1973
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    store_lex unicode:"$\x{a2}", rx715_cur
    box $P5004, 1
    set $P102, $P5004
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1973
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
  alt720_01984:
    nqp_rxmark rx715_bstack, alt720_11990, rx715_pos, 0
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1973
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    add $I11, rx715_pos, 3
    gt $I11, rx715_eos, rx715_fail1973
    substr $S10, rx715_tgt, rx715_pos, 3
    ne $S10, ucs4:"::(", rx715_fail1973
    add rx715_pos, 3
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1973
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."variable"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1973
    nqp_rxmark rx715_bstack, rxsubrule723_pass1987, -1, 0
  rxsubrule723_pass1987:
    rx715_cstack = rx715_cur."!cursor_capture"($P11, "latename=variable")
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1973
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    add $I11, rx715_pos, 1
    gt $I11, rx715_eos, rx715_fail1973
    substr $S10, rx715_tgt, rx715_pos, 1
    ne $S10, ucs4:")", rx715_fail1973
    add rx715_pos, 1
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1973
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    goto alt720_end1983
  alt720_11990:
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1973
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    nqp_rxmark rx715_bstack, rxcap727_fail1993, rx715_pos, 0
    nqp_rxmark rx715_bstack, rxquantr728_done1995, rx715_pos, 0
  rxquantr728_loop1994:
    add $I11, rx715_pos, 1
    gt $I11, rx715_eos, rx715_fail1973
    substr $S10, rx715_tgt, rx715_pos, 1
    ne $S10, ucs4:"!", rx715_fail1973
    add rx715_pos, 1
    nqp_rxpeek $I19, rx715_bstack, rxquantr728_done1995
    inc $I19
    inc $I19
    set rx715_rep, rx715_bstack[$I19]
    nqp_rxcommit rx715_bstack, rxquantr728_done1995
    inc rx715_rep
  rxquantr728_done1995:
    nqp_rxpeek $I19, rx715_bstack, rxcap727_fail1993
    inc $I19
    set $I11, rx715_bstack[$I19]
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx715_pos)
    rx715_cstack = rx715_cur."!cursor_capture"($P11, "private")
    goto rxcap727_done1992
  rxcap727_fail1993:
    goto rx715_fail1973
  rxcap727_done1992:
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1973
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    nqp_rxmark rx715_bstack, rxquantr730_done1998, rx715_pos, 0
  rxquantr730_loop1997:
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1973
    goto rxsubrule731_pass1999
  rxsubrule731_back2000:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1973
  rxsubrule731_pass1999:
    rx715_cstack = rx715_cur."!cursor_capture"($P11, "deflongname")
    set_addr $I11, rxsubrule731_back2000
    push rx715_bstack, $I11
    push rx715_bstack, 0
    push rx715_bstack, rx715_pos
    elements $I11, rx715_cstack
    push rx715_bstack, $I11
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    nqp_rxpeek $I19, rx715_bstack, rxquantr730_done1998
    inc $I19
    inc $I19
    set rx715_rep, rx715_bstack[$I19]
    nqp_rxcommit rx715_bstack, rxquantr730_done1998
    inc rx715_rep
  rxquantr730_done1998:
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1973
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
  alt720_end1983:
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1973
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1973
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1973
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
  alt736_02006:
    nqp_rxmark rx715_bstack, alt736_12012, rx715_pos, 0
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1973
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    add $I11, rx715_pos, 1
    gt $I11, rx715_eos, rx715_fail1973
    substr $S10, rx715_tgt, rx715_pos, 1
    ne $S10, ucs4:"(", rx715_fail1973
    add rx715_pos, 1
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1973
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."signature"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1973
    nqp_rxmark rx715_bstack, rxsubrule739_pass2009, -1, 0
  rxsubrule739_pass2009:
    rx715_cstack = rx715_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1973
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    add $I11, rx715_pos, 1
    gt $I11, rx715_eos, rx715_fail1973
    substr $S10, rx715_tgt, rx715_pos, 1
    ne $S10, ucs4:")", rx715_fail1973
    add rx715_pos, 1
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1973
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    goto alt736_end2005
  alt736_12012:
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1973
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."panic"("Routine declaration requires a signature")
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1973
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1973
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
  alt736_end2005:
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1973
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    store_lex unicode:"$\x{a2}", rx715_cur
    $P5005 = $P103."MATCH"()
    set $P104, $P5005
    .const 'Sub' $P5006 = 'cuid_402_1358115338.889' 
    capture_lex $P5006
    $P5007 = $P5006()
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1973
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    nqp_rxmark rx715_bstack, rxquantr747_done2019, rx715_pos, 0
  rxquantr747_loop2018:
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."trait"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1973
    goto rxsubrule748_pass2020
  rxsubrule748_back2021:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1973
  rxsubrule748_pass2020:
    rx715_cstack = rx715_cur."!cursor_capture"($P11, "trait")
    set_addr $I11, rxsubrule748_back2021
    push rx715_bstack, $I11
    push rx715_bstack, 0
    push rx715_bstack, rx715_pos
    elements $I11, rx715_cstack
    push rx715_bstack, $I11
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    nqp_rxpeek $I19, rx715_bstack, rxquantr747_done2019
    inc $I19
    inc $I19
    set rx715_rep, rx715_bstack[$I19]
    nqp_rxcommit rx715_bstack, rxquantr747_done2019
    inc rx715_rep
    nqp_rxmark rx715_bstack, rxquantr747_done2019, rx715_pos, rx715_rep
    goto rxquantr747_loop2018
  rxquantr747_done2019:
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1973
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt750_02024
    nqp_push_label $P11, alt750_12028
    nqp_rxmark rx715_bstack, alt750_end2023, -1, 0
    rx715_cur."!alt"(rx715_pos, "alt_nfa__24_1358115341.004", $P11)
    goto rx715_fail1973
  alt750_02024:
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1973
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."onlystar"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1973
    nqp_rxmark rx715_bstack, rxsubrule752_pass2026, -1, 0
  rxsubrule752_pass2026:
    rx715_cstack = rx715_cur."!cursor_capture"($P11, "onlystar")
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1973
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    goto alt750_end2023
  alt750_12028:
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1973
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1973
    nqp_rxmark rx715_bstack, rxsubrule755_pass2030, -1, 0
  rxsubrule755_pass2030:
    rx715_cstack = rx715_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1973
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    goto alt750_end2023
  alt750_end2023:
    nqp_rxcommit rx715_bstack, alt750_end2023
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1973
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    rx715_cur."!cursor_pass"(rx715_pos, "method_def", 'backtrack'=>1)
    .return (rx715_cur)
  rx715_restart1972:
    repr_get_attr_obj rx715_cstack, rx715_cur, rx715_curclass, "$!cstack"
  rx715_fail1973:
    unless rx715_bstack, rx715_done1971
    pop $I19, rx715_bstack
    if_null rx715_cstack, rx715_cstack_done1976
    unless rx715_cstack, rx715_cstack_done1976
    dec $I19
    set $P11, rx715_cstack[$I19]
  rx715_cstack_done1976:
    pop rx715_rep, rx715_bstack
    pop rx715_pos, rx715_bstack
    pop $I19, rx715_bstack
    lt rx715_pos, -1, rx715_done1971
    lt rx715_pos, 0, rx715_fail1973
    eq $I19, 0, rx715_fail1973
    nqp_islist $I20, rx715_cstack
    unless $I20, rx715_jump1974
    elements $I18, rx715_bstack
    le $I18, 0, rx715_cut1975
    dec $I18
    set $I18, rx715_bstack[$I18]
  rx715_cut1975:
    assign rx715_cstack, $I18
  rx715_jump1974:
    jump $I19
  rx715_done1971:
    rx715_cur."!cursor_fail"()
    .return (rx715_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_402_1358115338.889") :anon :lex :outer("cuid_122_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1086

    box $P5001, 0
    store_dynamic_lex "$*INVOCANT_OK", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "onlystar" :subid("cuid_123_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1094
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_403_1358115338.889' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx758_tgt
    .local int rx758_pos
    .local int rx758_off
    .local int rx758_eos
    .local int rx758_rep
    .local pmc rx758_cur
    .local pmc rx758_curclass
    .local pmc rx758_bstack
    .local pmc rx758_cstack
    (rx758_cur, rx758_tgt, rx758_pos, rx758_curclass, rx758_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx758_cur
    length rx758_eos, rx758_tgt
    eq $I19, 1, rx758_restart2035
    gt rx758_pos, rx758_eos, rx758_fail2036
    repr_get_attr_int $I11, self, rx758_curclass, "$!from"
    ne $I11, -1, rxscan759_done2042
    goto rxscan759_scan2041
  rxscan759_loop2040:
    inc rx758_pos
    gt rx758_pos, rx758_eos, rx758_fail2036
    repr_bind_attr_int rx758_cur, rx758_curclass, "$!from", rx758_pos
  rxscan759_scan2041:
    nqp_rxmark rx758_bstack, rxscan759_loop2040, rx758_pos, 0
  rxscan759_done2042:
    repr_bind_attr_int rx758_cur, rx758_curclass, "$!pos", rx758_pos
    store_lex unicode:"$\x{a2}", rx758_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_403_1358115338.889' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx758_fail2036
    add $I11, rx758_pos, 1
    gt $I11, rx758_eos, rx758_fail2036
    substr $S10, rx758_tgt, rx758_pos, 1
    ne $S10, ucs4:"{", rx758_fail2036
    add rx758_pos, 1
    repr_bind_attr_int rx758_cur, rx758_curclass, "$!pos", rx758_pos
    $P11 = rx758_cur."ws"()
    repr_get_attr_int $I11, $P11, rx758_curclass, "$!pos"
    lt $I11, 0, rx758_fail2036
    repr_get_attr_int rx758_pos, $P11, rx758_curclass, "$!pos"
    add $I11, rx758_pos, 1
    gt $I11, rx758_eos, rx758_fail2036
    substr $S10, rx758_tgt, rx758_pos, 1
    ne $S10, ucs4:"*", rx758_fail2036
    add rx758_pos, 1
    repr_bind_attr_int rx758_cur, rx758_curclass, "$!pos", rx758_pos
    $P11 = rx758_cur."ws"()
    repr_get_attr_int $I11, $P11, rx758_curclass, "$!pos"
    lt $I11, 0, rx758_fail2036
    repr_get_attr_int rx758_pos, $P11, rx758_curclass, "$!pos"
    add $I11, rx758_pos, 1
    gt $I11, rx758_eos, rx758_fail2036
    substr $S10, rx758_tgt, rx758_pos, 1
    ne $S10, ucs4:"}", rx758_fail2036
    add rx758_pos, 1
    repr_bind_attr_int rx758_cur, rx758_curclass, "$!pos", rx758_pos
    $P11 = rx758_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx758_curclass, "$!pos"
    lt $I11, 0, rx758_fail2036
    repr_bind_attr_int rx758_cur, rx758_curclass, "$!pos", rx758_pos
    $P11 = rx758_cur."finishpad"()
    repr_get_attr_int $I11, $P11, rx758_curclass, "$!pos"
    lt $I11, 0, rx758_fail2036
    repr_get_attr_int rx758_pos, $P11, rx758_curclass, "$!pos"
    rx758_cur."!cursor_pass"(rx758_pos, "onlystar", 'backtrack'=>1)
    .return (rx758_cur)
  rx758_restart2035:
    repr_get_attr_obj rx758_cstack, rx758_cur, rx758_curclass, "$!cstack"
  rx758_fail2036:
    unless rx758_bstack, rx758_done2034
    pop $I19, rx758_bstack
    if_null rx758_cstack, rx758_cstack_done2039
    unless rx758_cstack, rx758_cstack_done2039
    dec $I19
    set $P11, rx758_cstack[$I19]
  rx758_cstack_done2039:
    pop rx758_rep, rx758_bstack
    pop rx758_pos, rx758_bstack
    pop $I19, rx758_bstack
    lt rx758_pos, -1, rx758_done2034
    lt rx758_pos, 0, rx758_fail2036
    eq $I19, 0, rx758_fail2036
    nqp_islist $I20, rx758_cstack
    unless $I20, rx758_jump2037
    elements $I18, rx758_bstack
    le $I18, 0, rx758_cut2038
    dec $I18
    set $I18, rx758_bstack[$I18]
  rx758_cut2038:
    assign rx758_cstack, $I18
  rx758_jump2037:
    jump $I19
  rx758_done2034:
    rx758_cur."!cursor_fail"()
    .return (rx758_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_403_1358115338.889") :anon :lex :outer("cuid_123_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1095

    find_dynamic_lex $P5001, "$*MULTINESS"
    unless_null $P5001, fallback2043
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$MULTINESS"]
    unless_null $P5002, fallback2044
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5005
  fallback2044:
    unless_null $P5002, vivi_7602045
    die "Contextual $*MULTINESS not found"
    box $P5006, "Contextual $*MULTINESS not found"
    set $P5002, $P5006
  vivi_7602045:
    set $P5001, $P5002
  fallback2043:
    set $S5001, $P5001
    iseq $I5001, $S5001, "proto"
    .return ($I5001) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator" :subid("cuid_124_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1101
    .param pmc self 
    $P5001 = self."!protoregex"("multi_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<multi>" :subid("cuid_125_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1102
    .param pmc _lex_param_0 
    .lex "$*MULTINESS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx764_tgt
    .local int rx764_pos
    .local int rx764_off
    .local int rx764_eos
    .local int rx764_rep
    .local pmc rx764_cur
    .local pmc rx764_curclass
    .local pmc rx764_bstack
    .local pmc rx764_cstack
    (rx764_cur, rx764_tgt, rx764_pos, rx764_curclass, rx764_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx764_cur
    length rx764_eos, rx764_tgt
    eq $I19, 1, rx764_restart2051
    gt rx764_pos, rx764_eos, rx764_fail2052
    repr_get_attr_int $I11, self, rx764_curclass, "$!from"
    ne $I11, -1, rxscan765_done2058
    goto rxscan765_scan2057
  rxscan765_loop2056:
    inc rx764_pos
    gt rx764_pos, rx764_eos, rx764_fail2052
    repr_bind_attr_int rx764_cur, rx764_curclass, "$!from", rx764_pos
  rxscan765_scan2057:
    nqp_rxmark rx764_bstack, rxscan765_loop2056, rx764_pos, 0
  rxscan765_done2058:
    repr_bind_attr_int rx764_cur, rx764_curclass, "$!pos", rx764_pos
    store_lex unicode:"$\x{a2}", rx764_cur
    box $P5002, "multi"
    set $P101, $P5002
    nqp_rxmark rx764_bstack, rxcap766_fail2060, rx764_pos, 0
    add $I11, rx764_pos, 5
    gt $I11, rx764_eos, rx764_fail2052
    substr $S10, rx764_tgt, rx764_pos, 5
    ne $S10, ucs4:"multi", rx764_fail2052
    add rx764_pos, 5
    nqp_rxpeek $I19, rx764_bstack, rxcap766_fail2060
    inc $I19
    set $I11, rx764_bstack[$I19]
    repr_bind_attr_int rx764_cur, rx764_curclass, "$!pos", rx764_pos
    $P11 = rx764_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx764_pos)
    rx764_cstack = rx764_cur."!cursor_capture"($P11, "sym")
    goto rxcap766_done2059
  rxcap766_fail2060:
    goto rx764_fail2052
  rxcap766_done2059:
    repr_bind_attr_int rx764_cur, rx764_curclass, "$!pos", rx764_pos
    $P11 = rx764_cur."ws"()
    repr_get_attr_int $I11, $P11, rx764_curclass, "$!pos"
    lt $I11, 0, rx764_fail2052
    repr_get_attr_int rx764_pos, $P11, rx764_curclass, "$!pos"
  alt768_02063:
    nqp_rxmark rx764_bstack, alt768_12065, rx764_pos, 0
    repr_bind_attr_int rx764_cur, rx764_curclass, "$!pos", rx764_pos
    $P11 = rx764_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx764_curclass, "$!pos"
    lt $I11, 0, rx764_fail2052
    nqp_rxmark rx764_bstack, rxsubrule769_pass2064, -1, 0
  rxsubrule769_pass2064:
    rx764_cstack = rx764_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx764_pos, $P11, rx764_curclass, "$!pos"
    goto alt768_end2062
  alt768_12065:
    nqp_rxmark rx764_bstack, alt768_22067, rx764_pos, 0
    repr_bind_attr_int rx764_cur, rx764_curclass, "$!pos", rx764_pos
    $P11 = rx764_cur."routine_def"()
    repr_get_attr_int $I11, $P11, rx764_curclass, "$!pos"
    lt $I11, 0, rx764_fail2052
    nqp_rxmark rx764_bstack, rxsubrule770_pass2066, -1, 0
  rxsubrule770_pass2066:
    rx764_cstack = rx764_cur."!cursor_capture"($P11, "routine_def")
    repr_get_attr_int rx764_pos, $P11, rx764_curclass, "$!pos"
    goto alt768_end2062
  alt768_22067:
    repr_bind_attr_int rx764_cur, rx764_curclass, "$!pos", rx764_pos
    $P11 = rx764_cur."panic"("Malformed multi")
    repr_get_attr_int $I11, $P11, rx764_curclass, "$!pos"
    lt $I11, 0, rx764_fail2052
    repr_get_attr_int rx764_pos, $P11, rx764_curclass, "$!pos"
  alt768_end2062:
    rx764_cur."!cursor_pass"(rx764_pos, "multi_declarator:sym<multi>", 'backtrack'=>1)
    .return (rx764_cur)
  rx764_restart2051:
    repr_get_attr_obj rx764_cstack, rx764_cur, rx764_curclass, "$!cstack"
  rx764_fail2052:
    unless rx764_bstack, rx764_done2050
    pop $I19, rx764_bstack
    if_null rx764_cstack, rx764_cstack_done2055
    unless rx764_cstack, rx764_cstack_done2055
    dec $I19
    set $P11, rx764_cstack[$I19]
  rx764_cstack_done2055:
    pop rx764_rep, rx764_bstack
    pop rx764_pos, rx764_bstack
    pop $I19, rx764_bstack
    lt rx764_pos, -1, rx764_done2050
    lt rx764_pos, 0, rx764_fail2052
    eq $I19, 0, rx764_fail2052
    nqp_islist $I20, rx764_cstack
    unless $I20, rx764_jump2053
    elements $I18, rx764_bstack
    le $I18, 0, rx764_cut2054
    dec $I18
    set $I18, rx764_bstack[$I18]
  rx764_cut2054:
    assign rx764_cstack, $I18
  rx764_jump2053:
    jump $I19
  rx764_done2050:
    rx764_cur."!cursor_fail"()
    .return (rx764_cur) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<proto>" :subid("cuid_126_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1107
    .param pmc _lex_param_0 
    .lex "$*MULTINESS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx772_tgt
    .local int rx772_pos
    .local int rx772_off
    .local int rx772_eos
    .local int rx772_rep
    .local pmc rx772_cur
    .local pmc rx772_curclass
    .local pmc rx772_bstack
    .local pmc rx772_cstack
    (rx772_cur, rx772_tgt, rx772_pos, rx772_curclass, rx772_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx772_cur
    length rx772_eos, rx772_tgt
    eq $I19, 1, rx772_restart2071
    gt rx772_pos, rx772_eos, rx772_fail2072
    repr_get_attr_int $I11, self, rx772_curclass, "$!from"
    ne $I11, -1, rxscan773_done2078
    goto rxscan773_scan2077
  rxscan773_loop2076:
    inc rx772_pos
    gt rx772_pos, rx772_eos, rx772_fail2072
    repr_bind_attr_int rx772_cur, rx772_curclass, "$!from", rx772_pos
  rxscan773_scan2077:
    nqp_rxmark rx772_bstack, rxscan773_loop2076, rx772_pos, 0
  rxscan773_done2078:
    repr_bind_attr_int rx772_cur, rx772_curclass, "$!pos", rx772_pos
    store_lex unicode:"$\x{a2}", rx772_cur
    box $P5002, "proto"
    set $P101, $P5002
    nqp_rxmark rx772_bstack, rxcap774_fail2080, rx772_pos, 0
    add $I11, rx772_pos, 5
    gt $I11, rx772_eos, rx772_fail2072
    substr $S10, rx772_tgt, rx772_pos, 5
    ne $S10, ucs4:"proto", rx772_fail2072
    add rx772_pos, 5
    nqp_rxpeek $I19, rx772_bstack, rxcap774_fail2080
    inc $I19
    set $I11, rx772_bstack[$I19]
    repr_bind_attr_int rx772_cur, rx772_curclass, "$!pos", rx772_pos
    $P11 = rx772_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx772_pos)
    rx772_cstack = rx772_cur."!cursor_capture"($P11, "sym")
    goto rxcap774_done2079
  rxcap774_fail2080:
    goto rx772_fail2072
  rxcap774_done2079:
    repr_bind_attr_int rx772_cur, rx772_curclass, "$!pos", rx772_pos
    $P11 = rx772_cur."ws"()
    repr_get_attr_int $I11, $P11, rx772_curclass, "$!pos"
    lt $I11, 0, rx772_fail2072
    repr_get_attr_int rx772_pos, $P11, rx772_curclass, "$!pos"
  alt776_02083:
    nqp_rxmark rx772_bstack, alt776_12085, rx772_pos, 0
    repr_bind_attr_int rx772_cur, rx772_curclass, "$!pos", rx772_pos
    $P11 = rx772_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx772_curclass, "$!pos"
    lt $I11, 0, rx772_fail2072
    nqp_rxmark rx772_bstack, rxsubrule777_pass2084, -1, 0
  rxsubrule777_pass2084:
    rx772_cstack = rx772_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx772_pos, $P11, rx772_curclass, "$!pos"
    goto alt776_end2082
  alt776_12085:
    nqp_rxmark rx772_bstack, alt776_22087, rx772_pos, 0
    repr_bind_attr_int rx772_cur, rx772_curclass, "$!pos", rx772_pos
    $P11 = rx772_cur."routine_def"()
    repr_get_attr_int $I11, $P11, rx772_curclass, "$!pos"
    lt $I11, 0, rx772_fail2072
    nqp_rxmark rx772_bstack, rxsubrule778_pass2086, -1, 0
  rxsubrule778_pass2086:
    rx772_cstack = rx772_cur."!cursor_capture"($P11, "routine_def")
    repr_get_attr_int rx772_pos, $P11, rx772_curclass, "$!pos"
    goto alt776_end2082
  alt776_22087:
    repr_bind_attr_int rx772_cur, rx772_curclass, "$!pos", rx772_pos
    $P11 = rx772_cur."panic"("Malformed proto")
    repr_get_attr_int $I11, $P11, rx772_curclass, "$!pos"
    lt $I11, 0, rx772_fail2072
    repr_get_attr_int rx772_pos, $P11, rx772_curclass, "$!pos"
  alt776_end2082:
    rx772_cur."!cursor_pass"(rx772_pos, "multi_declarator:sym<proto>", 'backtrack'=>1)
    .return (rx772_cur)
  rx772_restart2071:
    repr_get_attr_obj rx772_cstack, rx772_cur, rx772_curclass, "$!cstack"
  rx772_fail2072:
    unless rx772_bstack, rx772_done2070
    pop $I19, rx772_bstack
    if_null rx772_cstack, rx772_cstack_done2075
    unless rx772_cstack, rx772_cstack_done2075
    dec $I19
    set $P11, rx772_cstack[$I19]
  rx772_cstack_done2075:
    pop rx772_rep, rx772_bstack
    pop rx772_pos, rx772_bstack
    pop $I19, rx772_bstack
    lt rx772_pos, -1, rx772_done2070
    lt rx772_pos, 0, rx772_fail2072
    eq $I19, 0, rx772_fail2072
    nqp_islist $I20, rx772_cstack
    unless $I20, rx772_jump2073
    elements $I18, rx772_bstack
    le $I18, 0, rx772_cut2074
    dec $I18
    set $I18, rx772_bstack[$I18]
  rx772_cut2074:
    assign rx772_cstack, $I18
  rx772_jump2073:
    jump $I19
  rx772_done2070:
    rx772_cur."!cursor_fail"()
    .return (rx772_cur) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<null>" :subid("cuid_127_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1112
    .param pmc _lex_param_0 
    .lex "$*MULTINESS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx780_tgt
    .local int rx780_pos
    .local int rx780_off
    .local int rx780_eos
    .local int rx780_rep
    .local pmc rx780_cur
    .local pmc rx780_curclass
    .local pmc rx780_bstack
    .local pmc rx780_cstack
    (rx780_cur, rx780_tgt, rx780_pos, rx780_curclass, rx780_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx780_cur
    length rx780_eos, rx780_tgt
    eq $I19, 1, rx780_restart2091
    gt rx780_pos, rx780_eos, rx780_fail2092
    repr_get_attr_int $I11, self, rx780_curclass, "$!from"
    ne $I11, -1, rxscan781_done2098
    goto rxscan781_scan2097
  rxscan781_loop2096:
    inc rx780_pos
    gt rx780_pos, rx780_eos, rx780_fail2092
    repr_bind_attr_int rx780_cur, rx780_curclass, "$!from", rx780_pos
  rxscan781_scan2097:
    nqp_rxmark rx780_bstack, rxscan781_loop2096, rx780_pos, 0
  rxscan781_done2098:
    repr_bind_attr_int rx780_cur, rx780_curclass, "$!pos", rx780_pos
    store_lex unicode:"$\x{a2}", rx780_cur
    box $P5002, ""
    set $P101, $P5002
    repr_bind_attr_int rx780_cur, rx780_curclass, "$!pos", rx780_pos
    $P11 = rx780_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx780_curclass, "$!pos"
    lt $I11, 0, rx780_fail2092
    nqp_rxmark rx780_bstack, rxsubrule782_pass2099, -1, 0
  rxsubrule782_pass2099:
    rx780_cstack = rx780_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx780_pos, $P11, rx780_curclass, "$!pos"
    rx780_cur."!cursor_pass"(rx780_pos, "multi_declarator:sym<null>", 'backtrack'=>1)
    .return (rx780_cur)
  rx780_restart2091:
    repr_get_attr_obj rx780_cstack, rx780_cur, rx780_curclass, "$!cstack"
  rx780_fail2092:
    unless rx780_bstack, rx780_done2090
    pop $I19, rx780_bstack
    if_null rx780_cstack, rx780_cstack_done2095
    unless rx780_cstack, rx780_cstack_done2095
    dec $I19
    set $P11, rx780_cstack[$I19]
  rx780_cstack_done2095:
    pop rx780_rep, rx780_bstack
    pop rx780_pos, rx780_bstack
    pop $I19, rx780_bstack
    lt rx780_pos, -1, rx780_done2090
    lt rx780_pos, 0, rx780_fail2092
    eq $I19, 0, rx780_fail2092
    nqp_islist $I20, rx780_cstack
    unless $I20, rx780_jump2093
    elements $I18, rx780_bstack
    le $I18, 0, rx780_cut2094
    dec $I18
    set $I18, rx780_bstack[$I18]
  rx780_cut2094:
    assign rx780_cstack, $I18
  rx780_jump2093:
    jump $I19
  rx780_done2090:
    rx780_cur."!cursor_fail"()
    .return (rx780_cur) 
.end
.HLL "nqp"
.namespace []
.sub "signature" :subid("cuid_128_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1117
    .param pmc _lex_param_0 
    .const 'Sub' $P5005 = 'cuid_404_1358115338.889' 
    capture_lex $P5005 
    .const 'Sub' $P5005 = 'cuid_129_1358115338.889' 
    capture_lex $P5005 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx783_tgt
    .local int rx783_pos
    .local int rx783_off
    .local int rx783_eos
    .local int rx783_rep
    .local pmc rx783_cur
    .local pmc rx783_curclass
    .local pmc rx783_bstack
    .local pmc rx783_cstack
    (rx783_cur, rx783_tgt, rx783_pos, rx783_curclass, rx783_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx783_cur
    length rx783_eos, rx783_tgt
    eq $I19, 1, rx783_restart2102
    gt rx783_pos, rx783_eos, rx783_fail2103
    repr_get_attr_int $I11, self, rx783_curclass, "$!from"
    ne $I11, -1, rxscan784_done2109
    goto rxscan784_scan2108
  rxscan784_loop2107:
    inc rx783_pos
    gt rx783_pos, rx783_eos, rx783_fail2103
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!from", rx783_pos
  rxscan784_scan2108:
    nqp_rxmark rx783_bstack, rxscan784_loop2107, rx783_pos, 0
  rxscan784_done2109:
    nqp_rxmark rx783_bstack, rxquantr785_done2111, rx783_pos, 0
  rxquantr785_loop2110:
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    store_lex unicode:"$\x{a2}", rx783_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_404_1358115338.889' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx783_fail2103
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."ws"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2103
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."parameter"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2103
    nqp_rxmark rx783_bstack, rxsubrule788_pass2116, -1, 0
  rxsubrule788_pass2116:
    rx783_cstack = rx783_cur."!cursor_capture"($P11, "invocant")
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."ws"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2103
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    add $I11, rx783_pos, 1
    gt $I11, rx783_eos, rx783_fail2103
    substr $S10, rx783_tgt, rx783_pos, 1
    ne $S10, ucs4:":", rx783_fail2103
    add rx783_pos, 1
    nqp_rxpeek $I19, rx783_bstack, rxquantr785_done2111
    inc $I19
    inc $I19
    set rx783_rep, rx783_bstack[$I19]
    nqp_rxcommit rx783_bstack, rxquantr785_done2111
    inc rx783_rep
  rxquantr785_done2111:
    nqp_rxmark rx783_bstack, rxquantr790_done2119, rx783_pos, 0
  rxquantr790_loop2118:
    nqp_rxmark rx783_bstack, rxquantr791_done2121, rx783_pos, 0
  rxquantr791_loop2120:
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."ws"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2103
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."parameter"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2103
    nqp_rxmark rx783_bstack, rxsubrule793_pass2123, -1, 0
  rxsubrule793_pass2123:
    rx783_cstack = rx783_cur."!cursor_capture"($P11, "parameter")
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."ws"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2103
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt795_02126
    nqp_push_label $P11, alt795_12127
    nqp_rxmark rx783_bstack, alt795_end2125, -1, 0
    rx783_cur."!alt"(rx783_pos, "alt_nfa__26_1358115341.075", $P11)
    goto rx783_fail2103
  alt795_02126:
    add $I11, rx783_pos, 1
    gt $I11, rx783_eos, rx783_fail2103
    substr $S10, rx783_tgt, rx783_pos, 1
    ne $S10, ucs4:",", rx783_fail2103
    add rx783_pos, 1
    goto alt795_end2125
  alt795_12127:
    .const 'Sub' $P5004 = 'cuid_129_1358115338.889' 
    capture_lex $P5004
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."before"($P5004)
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2103
    nqp_rxmark rx783_bstack, rxsubrule800_pass2143, -1, 0
  rxsubrule800_pass2143:
    rx783_cstack = rx783_cur."!cursor_capture"($P11, "before")
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    goto alt795_end2125
  alt795_end2125:
    nqp_rxcommit rx783_bstack, alt795_end2125
    nqp_rxpeek $I19, rx783_bstack, rxquantr791_done2121
    inc $I19
    inc $I19
    set rx783_rep, rx783_bstack[$I19]
    nqp_rxcommit rx783_bstack, rxquantr791_done2121
    inc rx783_rep
    nqp_rxmark rx783_bstack, rxquantr791_done2121, rx783_pos, rx783_rep
    goto rxquantr791_loop2120
  rxquantr791_done2121:
    nqp_rxpeek $I19, rx783_bstack, rxquantr790_done2119
    inc $I19
    inc $I19
    set rx783_rep, rx783_bstack[$I19]
    nqp_rxcommit rx783_bstack, rxquantr790_done2119
    inc rx783_rep
  rxquantr790_done2119:
    rx783_cur."!cursor_pass"(rx783_pos, "signature", 'backtrack'=>1)
    .return (rx783_cur)
  rx783_restart2102:
    repr_get_attr_obj rx783_cstack, rx783_cur, rx783_curclass, "$!cstack"
  rx783_fail2103:
    unless rx783_bstack, rx783_done2101
    pop $I19, rx783_bstack
    if_null rx783_cstack, rx783_cstack_done2106
    unless rx783_cstack, rx783_cstack_done2106
    dec $I19
    set $P11, rx783_cstack[$I19]
  rx783_cstack_done2106:
    pop rx783_rep, rx783_bstack
    pop rx783_pos, rx783_bstack
    pop $I19, rx783_bstack
    lt rx783_pos, -1, rx783_done2101
    lt rx783_pos, 0, rx783_fail2103
    eq $I19, 0, rx783_fail2103
    nqp_islist $I20, rx783_cstack
    unless $I20, rx783_jump2104
    elements $I18, rx783_bstack
    le $I18, 0, rx783_cut2105
    dec $I18
    set $I18, rx783_bstack[$I18]
  rx783_cut2105:
    assign rx783_cstack, $I18
  rx783_jump2104:
    jump $I19
  rx783_done2101:
    rx783_cur."!cursor_fail"()
    .return (rx783_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_404_1358115338.889") :anon :lex :outer("cuid_128_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1118

    find_dynamic_lex $P5001, "$*INVOCANT_OK"
    unless_null $P5001, fallback2112
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$INVOCANT_OK"]
    unless_null $P5002, fallback2113
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5005
  fallback2113:
    unless_null $P5002, vivi_7862114
    die "Contextual $*INVOCANT_OK not found"
    box $P5006, "Contextual $*INVOCANT_OK not found"
    set $P5002, $P5006
  vivi_7862114:
    set $P5001, $P5002
  fallback2112:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_129_1358115338.889") :anon :lex :outer("cuid_128_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx796_tgt
    .local int rx796_pos
    .local int rx796_off
    .local int rx796_eos
    .local int rx796_rep
    .local pmc rx796_cur
    .local pmc rx796_curclass
    .local pmc rx796_bstack
    .local pmc rx796_cstack
    (rx796_cur, rx796_tgt, rx796_pos, rx796_curclass, rx796_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx796_cur
    length rx796_eos, rx796_tgt
    eq $I19, 1, rx796_restart2130
    gt rx796_pos, rx796_eos, rx796_fail2131
    repr_get_attr_int $I11, self, rx796_curclass, "$!from"
    ne $I11, -1, rxscan797_done2137
    goto rxscan797_scan2136
  rxscan797_loop2135:
    inc rx796_pos
    gt rx796_pos, rx796_eos, rx796_fail2131
    repr_bind_attr_int rx796_cur, rx796_curclass, "$!from", rx796_pos
  rxscan797_scan2136:
    nqp_rxmark rx796_bstack, rxscan797_loop2135, rx796_pos, 0
  rxscan797_done2137:
    nqp_rxmark rx796_bstack, rxquantr798_done2139, rx796_pos, 0
  rxquantr798_loop2138:
    ge rx796_pos, rx796_eos, rx796_fail2131
    is_cclass $I11, .CCLASS_WHITESPACE, rx796_tgt, rx796_pos
    unless $I11, rx796_fail2131
    add rx796_pos, 1
    nqp_rxpeek $I19, rx796_bstack, rxquantr798_done2139
    inc $I19
    inc $I19
    set rx796_rep, rx796_bstack[$I19]
    nqp_rxcommit rx796_bstack, rxquantr798_done2139
    inc rx796_rep
    nqp_rxmark rx796_bstack, rxquantr798_done2139, rx796_pos, rx796_rep
    goto rxquantr798_loop2138
  rxquantr798_done2139:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt799_02141
    nqp_push_label $P11, alt799_12142
    nqp_rxmark rx796_bstack, alt799_end2140, -1, 0
    rx796_cur."!alt"(rx796_pos, "alt_nfa__25_1358115341.071", $P11)
    goto rx796_fail2131
  alt799_02141:
    add $I11, rx796_pos, 1
    gt $I11, rx796_eos, rx796_fail2131
    substr $S10, rx796_tgt, rx796_pos, 1
    ne $S10, ucs4:")", rx796_fail2131
    add rx796_pos, 1
    goto alt799_end2140
  alt799_12142:
    add $I11, rx796_pos, 1
    gt $I11, rx796_eos, rx796_fail2131
    substr $S10, rx796_tgt, rx796_pos, 1
    ne $S10, ucs4:"{", rx796_fail2131
    add rx796_pos, 1
    goto alt799_end2140
  alt799_end2140:
    nqp_rxcommit rx796_bstack, alt799_end2140
    rx796_cur."!cursor_pass"(rx796_pos, 'backtrack'=>1)
    .return (rx796_cur)
  rx796_restart2130:
    repr_get_attr_obj rx796_cstack, rx796_cur, rx796_curclass, "$!cstack"
  rx796_fail2131:
    unless rx796_bstack, rx796_done2129
    pop $I19, rx796_bstack
    if_null rx796_cstack, rx796_cstack_done2134
    unless rx796_cstack, rx796_cstack_done2134
    dec $I19
    set $P11, rx796_cstack[$I19]
  rx796_cstack_done2134:
    pop rx796_rep, rx796_bstack
    pop rx796_pos, rx796_bstack
    pop $I19, rx796_bstack
    lt rx796_pos, -1, rx796_done2129
    lt rx796_pos, 0, rx796_fail2131
    eq $I19, 0, rx796_fail2131
    nqp_islist $I20, rx796_cstack
    unless $I20, rx796_jump2132
    elements $I18, rx796_bstack
    le $I18, 0, rx796_cut2133
    dec $I18
    set $I18, rx796_bstack[$I18]
  rx796_cut2133:
    assign rx796_cstack, $I18
  rx796_jump2132:
    jump $I19
  rx796_done2129:
    rx796_cur."!cursor_fail"()
    .return (rx796_cur) 
.end
.HLL "nqp"
.namespace []
.sub "parameter" :subid("cuid_130_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1122
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx801_tgt
    .local int rx801_pos
    .local int rx801_off
    .local int rx801_eos
    .local int rx801_rep
    .local pmc rx801_cur
    .local pmc rx801_curclass
    .local pmc rx801_bstack
    .local pmc rx801_cstack
    (rx801_cur, rx801_tgt, rx801_pos, rx801_curclass, rx801_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx801_cur
    length rx801_eos, rx801_tgt
    eq $I19, 1, rx801_restart2146
    gt rx801_pos, rx801_eos, rx801_fail2147
    repr_get_attr_int $I11, self, rx801_curclass, "$!from"
    ne $I11, -1, rxscan802_done2153
    goto rxscan802_scan2152
  rxscan802_loop2151:
    inc rx801_pos
    gt rx801_pos, rx801_eos, rx801_fail2147
    repr_bind_attr_int rx801_cur, rx801_curclass, "$!from", rx801_pos
  rxscan802_scan2152:
    nqp_rxmark rx801_bstack, rxscan802_loop2151, rx801_pos, 0
  rxscan802_done2153:
    nqp_rxmark rx801_bstack, rxquantr803_done2155, rx801_pos, 0
  rxquantr803_loop2154:
    repr_bind_attr_int rx801_cur, rx801_curclass, "$!pos", rx801_pos
    $P11 = rx801_cur."typename"()
    repr_get_attr_int $I11, $P11, rx801_curclass, "$!pos"
    lt $I11, 0, rx801_fail2147
    nqp_rxmark rx801_bstack, rxsubrule804_pass2156, -1, 0
  rxsubrule804_pass2156:
    rx801_cstack = rx801_cur."!cursor_capture"($P11, "typename")
    repr_get_attr_int rx801_pos, $P11, rx801_curclass, "$!pos"
    nqp_rxmark rx801_bstack, rxquantr805_done2158, rx801_pos, 0
  rxquantr805_loop2157:
    add $I11, rx801_pos, 1
    gt $I11, rx801_eos, rx801_fail2147
    substr $S10, rx801_tgt, rx801_pos, 1
    ne $S10, ucs4:":", rx801_fail2147
    add rx801_pos, 1
    nqp_rxmark rx801_bstack, rxcap806_fail2160, rx801_pos, 0
    ge rx801_pos, rx801_eos, rx801_fail2147
    substr $S11, rx801_tgt, rx801_pos, 1
    index $I11, ucs4:"_DU", $S11
    lt $I11, 0, rx801_fail2147
    inc rx801_pos
    nqp_rxpeek $I19, rx801_bstack, rxcap806_fail2160
    inc $I19
    set $I11, rx801_bstack[$I19]
    repr_bind_attr_int rx801_cur, rx801_curclass, "$!pos", rx801_pos
    $P11 = rx801_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx801_pos)
    rx801_cstack = rx801_cur."!cursor_capture"($P11, "definedness")
    goto rxcap806_done2159
  rxcap806_fail2160:
    goto rx801_fail2147
  rxcap806_done2159:
    nqp_rxpeek $I19, rx801_bstack, rxquantr805_done2158
    inc $I19
    inc $I19
    set rx801_rep, rx801_bstack[$I19]
    nqp_rxcommit rx801_bstack, rxquantr805_done2158
    inc rx801_rep
  rxquantr805_done2158:
    repr_bind_attr_int rx801_cur, rx801_curclass, "$!pos", rx801_pos
    $P11 = rx801_cur."ws"()
    repr_get_attr_int $I11, $P11, rx801_curclass, "$!pos"
    lt $I11, 0, rx801_fail2147
    repr_get_attr_int rx801_pos, $P11, rx801_curclass, "$!pos"
    nqp_rxpeek $I19, rx801_bstack, rxquantr803_done2155
    inc $I19
    inc $I19
    set rx801_rep, rx801_bstack[$I19]
    nqp_rxcommit rx801_bstack, rxquantr803_done2155
    inc rx801_rep
    nqp_rxmark rx801_bstack, rxquantr803_done2155, rx801_pos, rx801_rep
    goto rxquantr803_loop2154
  rxquantr803_done2155:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt808_02163
    nqp_push_label $P11, alt808_12167
    nqp_rxmark rx801_bstack, alt808_end2162, -1, 0
    rx801_cur."!alt"(rx801_pos, "alt_nfa__29_1358115341.099", $P11)
    goto rx801_fail2147
  alt808_02163:
    nqp_rxmark rx801_bstack, rxcap809_fail2165, rx801_pos, 0
    add $I11, rx801_pos, 1
    gt $I11, rx801_eos, rx801_fail2147
    substr $S10, rx801_tgt, rx801_pos, 1
    ne $S10, ucs4:"*", rx801_fail2147
    add rx801_pos, 1
    nqp_rxpeek $I19, rx801_bstack, rxcap809_fail2165
    inc $I19
    set $I11, rx801_bstack[$I19]
    repr_bind_attr_int rx801_cur, rx801_curclass, "$!pos", rx801_pos
    $P11 = rx801_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx801_pos)
    rx801_cstack = rx801_cur."!cursor_capture"($P11, "quant")
    goto rxcap809_done2164
  rxcap809_fail2165:
    goto rx801_fail2147
  rxcap809_done2164:
    repr_bind_attr_int rx801_cur, rx801_curclass, "$!pos", rx801_pos
    $P11 = rx801_cur."param_var"()
    repr_get_attr_int $I11, $P11, rx801_curclass, "$!pos"
    lt $I11, 0, rx801_fail2147
    nqp_rxmark rx801_bstack, rxsubrule810_pass2166, -1, 0
  rxsubrule810_pass2166:
    rx801_cstack = rx801_cur."!cursor_capture"($P11, "param_var")
    repr_get_attr_int rx801_pos, $P11, rx801_curclass, "$!pos"
    goto alt808_end2162
  alt808_12167:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt811_02169
    nqp_push_label $P11, alt811_12171
    nqp_rxmark rx801_bstack, alt811_end2168, -1, 0
    rx801_cur."!alt"(rx801_pos, "alt_nfa__27_1358115341.098", $P11)
    goto rx801_fail2147
  alt811_02169:
    repr_bind_attr_int rx801_cur, rx801_curclass, "$!pos", rx801_pos
    $P11 = rx801_cur."param_var"()
    repr_get_attr_int $I11, $P11, rx801_curclass, "$!pos"
    lt $I11, 0, rx801_fail2147
    nqp_rxmark rx801_bstack, rxsubrule812_pass2170, -1, 0
  rxsubrule812_pass2170:
    rx801_cstack = rx801_cur."!cursor_capture"($P11, "param_var")
    repr_get_attr_int rx801_pos, $P11, rx801_curclass, "$!pos"
    goto alt811_end2168
  alt811_12171:
    repr_bind_attr_int rx801_cur, rx801_curclass, "$!pos", rx801_pos
    $P11 = rx801_cur."named_param"()
    repr_get_attr_int $I11, $P11, rx801_curclass, "$!pos"
    lt $I11, 0, rx801_fail2147
    nqp_rxmark rx801_bstack, rxsubrule813_pass2172, -1, 0
  rxsubrule813_pass2172:
    rx801_cstack = rx801_cur."!cursor_capture"($P11, "named_param")
    repr_get_attr_int rx801_pos, $P11, rx801_curclass, "$!pos"
    goto alt811_end2168
  alt811_end2168:
    nqp_rxcommit rx801_bstack, alt811_end2168
    nqp_rxmark rx801_bstack, rxcap814_fail2174, rx801_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt815_02176
    nqp_push_label $P11, alt815_12177
    nqp_push_label $P11, alt815_22178
    nqp_rxmark rx801_bstack, alt815_end2175, -1, 0
    rx801_cur."!alt"(rx801_pos, "alt_nfa__28_1358115341.099", $P11)
    goto rx801_fail2147
  alt815_02176:
    add $I11, rx801_pos, 1
    gt $I11, rx801_eos, rx801_fail2147
    substr $S10, rx801_tgt, rx801_pos, 1
    ne $S10, ucs4:"?", rx801_fail2147
    add rx801_pos, 1
    goto alt815_end2175
  alt815_12177:
    add $I11, rx801_pos, 1
    gt $I11, rx801_eos, rx801_fail2147
    substr $S10, rx801_tgt, rx801_pos, 1
    ne $S10, ucs4:"!", rx801_fail2147
    add rx801_pos, 1
    goto alt815_end2175
  alt815_22178:
    goto alt815_end2175
  alt815_end2175:
    nqp_rxcommit rx801_bstack, alt815_end2175
    nqp_rxpeek $I19, rx801_bstack, rxcap814_fail2174
    inc $I19
    set $I11, rx801_bstack[$I19]
    repr_bind_attr_int rx801_cur, rx801_curclass, "$!pos", rx801_pos
    $P11 = rx801_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx801_pos)
    rx801_cstack = rx801_cur."!cursor_capture"($P11, "quant")
    goto rxcap814_done2173
  rxcap814_fail2174:
    goto rx801_fail2147
  rxcap814_done2173:
    goto alt808_end2162
  alt808_end2162:
    nqp_rxcommit rx801_bstack, alt808_end2162
    nqp_rxmark rx801_bstack, rxquantr817_done2181, rx801_pos, 0
  rxquantr817_loop2180:
    repr_bind_attr_int rx801_cur, rx801_curclass, "$!pos", rx801_pos
    $P11 = rx801_cur."default_value"()
    repr_get_attr_int $I11, $P11, rx801_curclass, "$!pos"
    lt $I11, 0, rx801_fail2147
    goto rxsubrule818_pass2182
  rxsubrule818_back2183:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx801_curclass, "$!pos"
    lt $I11, 0, rx801_fail2147
  rxsubrule818_pass2182:
    rx801_cstack = rx801_cur."!cursor_capture"($P11, "default_value")
    set_addr $I11, rxsubrule818_back2183
    push rx801_bstack, $I11
    push rx801_bstack, 0
    push rx801_bstack, rx801_pos
    elements $I11, rx801_cstack
    push rx801_bstack, $I11
    repr_get_attr_int rx801_pos, $P11, rx801_curclass, "$!pos"
    nqp_rxpeek $I19, rx801_bstack, rxquantr817_done2181
    inc $I19
    inc $I19
    set rx801_rep, rx801_bstack[$I19]
    nqp_rxcommit rx801_bstack, rxquantr817_done2181
    inc rx801_rep
  rxquantr817_done2181:
    rx801_cur."!cursor_pass"(rx801_pos, "parameter", 'backtrack'=>1)
    .return (rx801_cur)
  rx801_restart2146:
    repr_get_attr_obj rx801_cstack, rx801_cur, rx801_curclass, "$!cstack"
  rx801_fail2147:
    unless rx801_bstack, rx801_done2145
    pop $I19, rx801_bstack
    if_null rx801_cstack, rx801_cstack_done2150
    unless rx801_cstack, rx801_cstack_done2150
    dec $I19
    set $P11, rx801_cstack[$I19]
  rx801_cstack_done2150:
    pop rx801_rep, rx801_bstack
    pop rx801_pos, rx801_bstack
    pop $I19, rx801_bstack
    lt rx801_pos, -1, rx801_done2145
    lt rx801_pos, 0, rx801_fail2147
    eq $I19, 0, rx801_fail2147
    nqp_islist $I20, rx801_cstack
    unless $I20, rx801_jump2148
    elements $I18, rx801_bstack
    le $I18, 0, rx801_cut2149
    dec $I18
    set $I18, rx801_bstack[$I18]
  rx801_cut2149:
    assign rx801_cstack, $I18
  rx801_jump2148:
    jump $I19
  rx801_done2145:
    rx801_cur."!cursor_fail"()
    .return (rx801_cur) 
.end
.HLL "nqp"
.namespace []
.sub "param_var" :subid("cuid_131_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1131
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx819_tgt
    .local int rx819_pos
    .local int rx819_off
    .local int rx819_eos
    .local int rx819_rep
    .local pmc rx819_cur
    .local pmc rx819_curclass
    .local pmc rx819_bstack
    .local pmc rx819_cstack
    (rx819_cur, rx819_tgt, rx819_pos, rx819_curclass, rx819_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx819_cur
    length rx819_eos, rx819_tgt
    eq $I19, 1, rx819_restart2186
    gt rx819_pos, rx819_eos, rx819_fail2187
    repr_get_attr_int $I11, self, rx819_curclass, "$!from"
    ne $I11, -1, rxscan820_done2193
    goto rxscan820_scan2192
  rxscan820_loop2191:
    inc rx819_pos
    gt rx819_pos, rx819_eos, rx819_fail2187
    repr_bind_attr_int rx819_cur, rx819_curclass, "$!from", rx819_pos
  rxscan820_scan2192:
    nqp_rxmark rx819_bstack, rxscan820_loop2191, rx819_pos, 0
  rxscan820_done2193:
    repr_bind_attr_int rx819_cur, rx819_curclass, "$!pos", rx819_pos
    $P11 = rx819_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx819_curclass, "$!pos"
    lt $I11, 0, rx819_fail2187
    nqp_rxmark rx819_bstack, rxsubrule821_pass2194, -1, 0
  rxsubrule821_pass2194:
    rx819_cstack = rx819_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx819_pos, $P11, rx819_curclass, "$!pos"
    nqp_rxmark rx819_bstack, rxquantr822_done2196, rx819_pos, 0
  rxquantr822_loop2195:
    repr_bind_attr_int rx819_cur, rx819_curclass, "$!pos", rx819_pos
    $P11 = rx819_cur."twigil"()
    repr_get_attr_int $I11, $P11, rx819_curclass, "$!pos"
    lt $I11, 0, rx819_fail2187
    goto rxsubrule823_pass2197
  rxsubrule823_back2198:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx819_curclass, "$!pos"
    lt $I11, 0, rx819_fail2187
  rxsubrule823_pass2197:
    rx819_cstack = rx819_cur."!cursor_capture"($P11, "twigil")
    set_addr $I11, rxsubrule823_back2198
    push rx819_bstack, $I11
    push rx819_bstack, 0
    push rx819_bstack, rx819_pos
    elements $I11, rx819_cstack
    push rx819_bstack, $I11
    repr_get_attr_int rx819_pos, $P11, rx819_curclass, "$!pos"
    nqp_rxpeek $I19, rx819_bstack, rxquantr822_done2196
    inc $I19
    inc $I19
    set rx819_rep, rx819_bstack[$I19]
    nqp_rxcommit rx819_bstack, rxquantr822_done2196
    inc rx819_rep
  rxquantr822_done2196:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt824_02200
    nqp_push_label $P11, alt824_12202
    nqp_rxmark rx819_bstack, alt824_end2199, -1, 0
    rx819_cur."!alt"(rx819_pos, "alt_nfa__30_1358115341.109", $P11)
    goto rx819_fail2187
  alt824_02200:
    repr_bind_attr_int rx819_cur, rx819_curclass, "$!pos", rx819_pos
    $P11 = rx819_cur."ident"()
    repr_get_attr_int $I11, $P11, rx819_curclass, "$!pos"
    lt $I11, 0, rx819_fail2187
    nqp_rxmark rx819_bstack, rxsubrule825_pass2201, -1, 0
  rxsubrule825_pass2201:
    rx819_cstack = rx819_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx819_pos, $P11, rx819_curclass, "$!pos"
    goto alt824_end2199
  alt824_12202:
    nqp_rxmark rx819_bstack, rxcap826_fail2204, rx819_pos, 0
    ge rx819_pos, rx819_eos, rx819_fail2187
    substr $S11, rx819_tgt, rx819_pos, 1
    index $I11, ucs4:"/!", $S11
    lt $I11, 0, rx819_fail2187
    inc rx819_pos
    nqp_rxpeek $I19, rx819_bstack, rxcap826_fail2204
    inc $I19
    set $I11, rx819_bstack[$I19]
    repr_bind_attr_int rx819_cur, rx819_curclass, "$!pos", rx819_pos
    $P11 = rx819_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx819_pos)
    rx819_cstack = rx819_cur."!cursor_capture"($P11, "name")
    goto rxcap826_done2203
  rxcap826_fail2204:
    goto rx819_fail2187
  rxcap826_done2203:
    goto alt824_end2199
  alt824_end2199:
    nqp_rxcommit rx819_bstack, alt824_end2199
    rx819_cur."!cursor_pass"(rx819_pos, "param_var", 'backtrack'=>1)
    .return (rx819_cur)
  rx819_restart2186:
    repr_get_attr_obj rx819_cstack, rx819_cur, rx819_curclass, "$!cstack"
  rx819_fail2187:
    unless rx819_bstack, rx819_done2185
    pop $I19, rx819_bstack
    if_null rx819_cstack, rx819_cstack_done2190
    unless rx819_cstack, rx819_cstack_done2190
    dec $I19
    set $P11, rx819_cstack[$I19]
  rx819_cstack_done2190:
    pop rx819_rep, rx819_bstack
    pop rx819_pos, rx819_bstack
    pop $I19, rx819_bstack
    lt rx819_pos, -1, rx819_done2185
    lt rx819_pos, 0, rx819_fail2187
    eq $I19, 0, rx819_fail2187
    nqp_islist $I20, rx819_cstack
    unless $I20, rx819_jump2188
    elements $I18, rx819_bstack
    le $I18, 0, rx819_cut2189
    dec $I18
    set $I18, rx819_bstack[$I18]
  rx819_cut2189:
    assign rx819_cstack, $I18
  rx819_jump2188:
    jump $I19
  rx819_done2185:
    rx819_cur."!cursor_fail"()
    .return (rx819_cur) 
.end
.HLL "nqp"
.namespace []
.sub "named_param" :subid("cuid_132_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1136
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx827_tgt
    .local int rx827_pos
    .local int rx827_off
    .local int rx827_eos
    .local int rx827_rep
    .local pmc rx827_cur
    .local pmc rx827_curclass
    .local pmc rx827_bstack
    .local pmc rx827_cstack
    (rx827_cur, rx827_tgt, rx827_pos, rx827_curclass, rx827_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx827_cur
    length rx827_eos, rx827_tgt
    eq $I19, 1, rx827_restart2207
    gt rx827_pos, rx827_eos, rx827_fail2208
    repr_get_attr_int $I11, self, rx827_curclass, "$!from"
    ne $I11, -1, rxscan828_done2214
    goto rxscan828_scan2213
  rxscan828_loop2212:
    inc rx827_pos
    gt rx827_pos, rx827_eos, rx827_fail2208
    repr_bind_attr_int rx827_cur, rx827_curclass, "$!from", rx827_pos
  rxscan828_scan2213:
    nqp_rxmark rx827_bstack, rxscan828_loop2212, rx827_pos, 0
  rxscan828_done2214:
    add $I11, rx827_pos, 1
    gt $I11, rx827_eos, rx827_fail2208
    substr $S10, rx827_tgt, rx827_pos, 1
    ne $S10, ucs4:":", rx827_fail2208
    add rx827_pos, 1
    repr_bind_attr_int rx827_cur, rx827_curclass, "$!pos", rx827_pos
    $P11 = rx827_cur."param_var"()
    repr_get_attr_int $I11, $P11, rx827_curclass, "$!pos"
    lt $I11, 0, rx827_fail2208
    nqp_rxmark rx827_bstack, rxsubrule829_pass2215, -1, 0
  rxsubrule829_pass2215:
    rx827_cstack = rx827_cur."!cursor_capture"($P11, "param_var")
    repr_get_attr_int rx827_pos, $P11, rx827_curclass, "$!pos"
    rx827_cur."!cursor_pass"(rx827_pos, "named_param", 'backtrack'=>1)
    .return (rx827_cur)
  rx827_restart2207:
    repr_get_attr_obj rx827_cstack, rx827_cur, rx827_curclass, "$!cstack"
  rx827_fail2208:
    unless rx827_bstack, rx827_done2206
    pop $I19, rx827_bstack
    if_null rx827_cstack, rx827_cstack_done2211
    unless rx827_cstack, rx827_cstack_done2211
    dec $I19
    set $P11, rx827_cstack[$I19]
  rx827_cstack_done2211:
    pop rx827_rep, rx827_bstack
    pop rx827_pos, rx827_bstack
    pop $I19, rx827_bstack
    lt rx827_pos, -1, rx827_done2206
    lt rx827_pos, 0, rx827_fail2208
    eq $I19, 0, rx827_fail2208
    nqp_islist $I20, rx827_cstack
    unless $I20, rx827_jump2209
    elements $I18, rx827_bstack
    le $I18, 0, rx827_cut2210
    dec $I18
    set $I18, rx827_bstack[$I18]
  rx827_cut2210:
    assign rx827_cstack, $I18
  rx827_jump2209:
    jump $I19
  rx827_done2206:
    rx827_cur."!cursor_fail"()
    .return (rx827_cur) 
.end
.HLL "nqp"
.namespace []
.sub "default_value" :subid("cuid_133_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1140
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx830_tgt
    .local int rx830_pos
    .local int rx830_off
    .local int rx830_eos
    .local int rx830_rep
    .local pmc rx830_cur
    .local pmc rx830_curclass
    .local pmc rx830_bstack
    .local pmc rx830_cstack
    (rx830_cur, rx830_tgt, rx830_pos, rx830_curclass, rx830_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx830_cur
    length rx830_eos, rx830_tgt
    eq $I19, 1, rx830_restart2218
    gt rx830_pos, rx830_eos, rx830_fail2219
    repr_get_attr_int $I11, self, rx830_curclass, "$!from"
    ne $I11, -1, rxscan831_done2225
    goto rxscan831_scan2224
  rxscan831_loop2223:
    inc rx830_pos
    gt rx830_pos, rx830_eos, rx830_fail2219
    repr_bind_attr_int rx830_cur, rx830_curclass, "$!from", rx830_pos
  rxscan831_scan2224:
    nqp_rxmark rx830_bstack, rxscan831_loop2223, rx830_pos, 0
  rxscan831_done2225:
    repr_bind_attr_int rx830_cur, rx830_curclass, "$!pos", rx830_pos
    $P11 = rx830_cur."ws"()
    repr_get_attr_int $I11, $P11, rx830_curclass, "$!pos"
    lt $I11, 0, rx830_fail2219
    repr_get_attr_int rx830_pos, $P11, rx830_curclass, "$!pos"
    add $I11, rx830_pos, 1
    gt $I11, rx830_eos, rx830_fail2219
    substr $S10, rx830_tgt, rx830_pos, 1
    ne $S10, ucs4:"=", rx830_fail2219
    add rx830_pos, 1
    repr_bind_attr_int rx830_cur, rx830_curclass, "$!pos", rx830_pos
    $P11 = rx830_cur."ws"()
    repr_get_attr_int $I11, $P11, rx830_curclass, "$!pos"
    lt $I11, 0, rx830_fail2219
    repr_get_attr_int rx830_pos, $P11, rx830_curclass, "$!pos"
    repr_bind_attr_int rx830_cur, rx830_curclass, "$!pos", rx830_pos
    $P11 = rx830_cur."EXPR"("i=")
    repr_get_attr_int $I11, $P11, rx830_curclass, "$!pos"
    lt $I11, 0, rx830_fail2219
    nqp_rxmark rx830_bstack, rxsubrule834_pass2228, -1, 0
  rxsubrule834_pass2228:
    rx830_cstack = rx830_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx830_pos, $P11, rx830_curclass, "$!pos"
    repr_bind_attr_int rx830_cur, rx830_curclass, "$!pos", rx830_pos
    $P11 = rx830_cur."ws"()
    repr_get_attr_int $I11, $P11, rx830_curclass, "$!pos"
    lt $I11, 0, rx830_fail2219
    repr_get_attr_int rx830_pos, $P11, rx830_curclass, "$!pos"
    rx830_cur."!cursor_pass"(rx830_pos, "default_value", 'backtrack'=>1)
    .return (rx830_cur)
  rx830_restart2218:
    repr_get_attr_obj rx830_cstack, rx830_cur, rx830_curclass, "$!cstack"
  rx830_fail2219:
    unless rx830_bstack, rx830_done2217
    pop $I19, rx830_bstack
    if_null rx830_cstack, rx830_cstack_done2222
    unless rx830_cstack, rx830_cstack_done2222
    dec $I19
    set $P11, rx830_cstack[$I19]
  rx830_cstack_done2222:
    pop rx830_rep, rx830_bstack
    pop rx830_pos, rx830_bstack
    pop $I19, rx830_bstack
    lt rx830_pos, -1, rx830_done2217
    lt rx830_pos, 0, rx830_fail2219
    eq $I19, 0, rx830_fail2219
    nqp_islist $I20, rx830_cstack
    unless $I20, rx830_jump2220
    elements $I18, rx830_bstack
    le $I18, 0, rx830_cut2221
    dec $I18
    set $I18, rx830_bstack[$I18]
  rx830_cut2221:
    assign rx830_cstack, $I18
  rx830_jump2220:
    jump $I19
  rx830_done2217:
    rx830_cur."!cursor_fail"()
    .return (rx830_cur) 
.end
.HLL "nqp"
.namespace []
.sub "trait" :subid("cuid_134_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1142
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx836_tgt
    .local int rx836_pos
    .local int rx836_off
    .local int rx836_eos
    .local int rx836_rep
    .local pmc rx836_cur
    .local pmc rx836_curclass
    .local pmc rx836_bstack
    .local pmc rx836_cstack
    (rx836_cur, rx836_tgt, rx836_pos, rx836_curclass, rx836_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx836_cur
    length rx836_eos, rx836_tgt
    eq $I19, 1, rx836_restart2232
    gt rx836_pos, rx836_eos, rx836_fail2233
    repr_get_attr_int $I11, self, rx836_curclass, "$!from"
    ne $I11, -1, rxscan837_done2239
    goto rxscan837_scan2238
  rxscan837_loop2237:
    inc rx836_pos
    gt rx836_pos, rx836_eos, rx836_fail2233
    repr_bind_attr_int rx836_cur, rx836_curclass, "$!from", rx836_pos
  rxscan837_scan2238:
    nqp_rxmark rx836_bstack, rxscan837_loop2237, rx836_pos, 0
  rxscan837_done2239:
    repr_bind_attr_int rx836_cur, rx836_curclass, "$!pos", rx836_pos
    $P11 = rx836_cur."ws"()
    repr_get_attr_int $I11, $P11, rx836_curclass, "$!pos"
    lt $I11, 0, rx836_fail2233
    repr_get_attr_int rx836_pos, $P11, rx836_curclass, "$!pos"
    repr_bind_attr_int rx836_cur, rx836_curclass, "$!pos", rx836_pos
    $P11 = rx836_cur."trait_mod"()
    repr_get_attr_int $I11, $P11, rx836_curclass, "$!pos"
    lt $I11, 0, rx836_fail2233
    nqp_rxmark rx836_bstack, rxsubrule839_pass2241, -1, 0
  rxsubrule839_pass2241:
    rx836_cstack = rx836_cur."!cursor_capture"($P11, "trait_mod")
    repr_get_attr_int rx836_pos, $P11, rx836_curclass, "$!pos"
    repr_bind_attr_int rx836_cur, rx836_curclass, "$!pos", rx836_pos
    $P11 = rx836_cur."ws"()
    repr_get_attr_int $I11, $P11, rx836_curclass, "$!pos"
    lt $I11, 0, rx836_fail2233
    repr_get_attr_int rx836_pos, $P11, rx836_curclass, "$!pos"
    rx836_cur."!cursor_pass"(rx836_pos, "trait", 'backtrack'=>1)
    .return (rx836_cur)
  rx836_restart2232:
    repr_get_attr_obj rx836_cstack, rx836_cur, rx836_curclass, "$!cstack"
  rx836_fail2233:
    unless rx836_bstack, rx836_done2231
    pop $I19, rx836_bstack
    if_null rx836_cstack, rx836_cstack_done2236
    unless rx836_cstack, rx836_cstack_done2236
    dec $I19
    set $P11, rx836_cstack[$I19]
  rx836_cstack_done2236:
    pop rx836_rep, rx836_bstack
    pop rx836_pos, rx836_bstack
    pop $I19, rx836_bstack
    lt rx836_pos, -1, rx836_done2231
    lt rx836_pos, 0, rx836_fail2233
    eq $I19, 0, rx836_fail2233
    nqp_islist $I20, rx836_cstack
    unless $I20, rx836_jump2234
    elements $I18, rx836_bstack
    le $I18, 0, rx836_cut2235
    dec $I18
    set $I18, rx836_bstack[$I18]
  rx836_cut2235:
    assign rx836_cstack, $I18
  rx836_jump2234:
    jump $I19
  rx836_done2231:
    rx836_cur."!cursor_fail"()
    .return (rx836_cur) 
.end
.HLL "nqp"
.namespace []
.sub "trait_mod" :subid("cuid_135_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1144
    .param pmc self 
    $P5001 = self."!protoregex"("trait_mod")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "trait_mod:sym<is>" :subid("cuid_136_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1145
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx841_tgt
    .local int rx841_pos
    .local int rx841_off
    .local int rx841_eos
    .local int rx841_rep
    .local pmc rx841_cur
    .local pmc rx841_curclass
    .local pmc rx841_bstack
    .local pmc rx841_cstack
    (rx841_cur, rx841_tgt, rx841_pos, rx841_curclass, rx841_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx841_cur
    length rx841_eos, rx841_tgt
    eq $I19, 1, rx841_restart2245
    gt rx841_pos, rx841_eos, rx841_fail2246
    repr_get_attr_int $I11, self, rx841_curclass, "$!from"
    ne $I11, -1, rxscan842_done2252
    goto rxscan842_scan2251
  rxscan842_loop2250:
    inc rx841_pos
    gt rx841_pos, rx841_eos, rx841_fail2246
    repr_bind_attr_int rx841_cur, rx841_curclass, "$!from", rx841_pos
  rxscan842_scan2251:
    nqp_rxmark rx841_bstack, rxscan842_loop2250, rx841_pos, 0
  rxscan842_done2252:
    nqp_rxmark rx841_bstack, rxcap843_fail2254, rx841_pos, 0
    add $I11, rx841_pos, 2
    gt $I11, rx841_eos, rx841_fail2246
    substr $S10, rx841_tgt, rx841_pos, 2
    ne $S10, ucs4:"is", rx841_fail2246
    add rx841_pos, 2
    nqp_rxpeek $I19, rx841_bstack, rxcap843_fail2254
    inc $I19
    set $I11, rx841_bstack[$I19]
    repr_bind_attr_int rx841_cur, rx841_curclass, "$!pos", rx841_pos
    $P11 = rx841_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx841_pos)
    rx841_cstack = rx841_cur."!cursor_capture"($P11, "sym")
    goto rxcap843_done2253
  rxcap843_fail2254:
    goto rx841_fail2246
  rxcap843_done2253:
    repr_bind_attr_int rx841_cur, rx841_curclass, "$!pos", rx841_pos
    $P11 = rx841_cur."ws"()
    repr_get_attr_int $I11, $P11, rx841_curclass, "$!pos"
    lt $I11, 0, rx841_fail2246
    repr_get_attr_int rx841_pos, $P11, rx841_curclass, "$!pos"
    repr_bind_attr_int rx841_cur, rx841_curclass, "$!pos", rx841_pos
    $P11 = rx841_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx841_curclass, "$!pos"
    lt $I11, 0, rx841_fail2246
    nqp_rxmark rx841_bstack, rxsubrule845_pass2256, -1, 0
  rxsubrule845_pass2256:
    rx841_cstack = rx841_cur."!cursor_capture"($P11, "longname")
    repr_get_attr_int rx841_pos, $P11, rx841_curclass, "$!pos"
    nqp_rxmark rx841_bstack, rxquantr846_done2258, rx841_pos, 0
  rxquantr846_loop2257:
    repr_bind_attr_int rx841_cur, rx841_curclass, "$!pos", rx841_pos
    $P11 = rx841_cur."circumfix"()
    repr_get_attr_int $I11, $P11, rx841_curclass, "$!pos"
    lt $I11, 0, rx841_fail2246
    goto rxsubrule847_pass2259
  rxsubrule847_back2260:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx841_curclass, "$!pos"
    lt $I11, 0, rx841_fail2246
  rxsubrule847_pass2259:
    rx841_cstack = rx841_cur."!cursor_capture"($P11, "circumfix")
    set_addr $I11, rxsubrule847_back2260
    push rx841_bstack, $I11
    push rx841_bstack, 0
    push rx841_bstack, rx841_pos
    elements $I11, rx841_cstack
    push rx841_bstack, $I11
    repr_get_attr_int rx841_pos, $P11, rx841_curclass, "$!pos"
    nqp_rxpeek $I19, rx841_bstack, rxquantr846_done2258
    inc $I19
    inc $I19
    set rx841_rep, rx841_bstack[$I19]
    nqp_rxcommit rx841_bstack, rxquantr846_done2258
    inc rx841_rep
  rxquantr846_done2258:
    repr_bind_attr_int rx841_cur, rx841_curclass, "$!pos", rx841_pos
    $P11 = rx841_cur."ws"()
    repr_get_attr_int $I11, $P11, rx841_curclass, "$!pos"
    lt $I11, 0, rx841_fail2246
    repr_get_attr_int rx841_pos, $P11, rx841_curclass, "$!pos"
    rx841_cur."!cursor_pass"(rx841_pos, "trait_mod:sym<is>", 'backtrack'=>1)
    .return (rx841_cur)
  rx841_restart2245:
    repr_get_attr_obj rx841_cstack, rx841_cur, rx841_curclass, "$!cstack"
  rx841_fail2246:
    unless rx841_bstack, rx841_done2244
    pop $I19, rx841_bstack
    if_null rx841_cstack, rx841_cstack_done2249
    unless rx841_cstack, rx841_cstack_done2249
    dec $I19
    set $P11, rx841_cstack[$I19]
  rx841_cstack_done2249:
    pop rx841_rep, rx841_bstack
    pop rx841_pos, rx841_bstack
    pop $I19, rx841_bstack
    lt rx841_pos, -1, rx841_done2244
    lt rx841_pos, 0, rx841_fail2246
    eq $I19, 0, rx841_fail2246
    nqp_islist $I20, rx841_cstack
    unless $I20, rx841_jump2247
    elements $I18, rx841_bstack
    le $I18, 0, rx841_cut2248
    dec $I18
    set $I18, rx841_bstack[$I18]
  rx841_cut2248:
    assign rx841_cstack, $I18
  rx841_jump2247:
    jump $I19
  rx841_done2244:
    rx841_cur."!cursor_fail"()
    .return (rx841_cur) 
.end
.HLL "nqp"
.namespace []
.sub "regex_declarator" :subid("cuid_137_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1147
    .param pmc _lex_param_0 
    .const 'Sub' $P5012 = 'cuid_405_1358115338.889' 
    capture_lex $P5012 
    .lex "%*RX", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    new $P5001, 'Hash'
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx849_tgt
    .local int rx849_pos
    .local int rx849_off
    .local int rx849_eos
    .local int rx849_rep
    .local pmc rx849_cur
    .local pmc rx849_curclass
    .local pmc rx849_bstack
    .local pmc rx849_cstack
    (rx849_cur, rx849_tgt, rx849_pos, rx849_curclass, rx849_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx849_cur
    length rx849_eos, rx849_tgt
    eq $I19, 1, rx849_restart2264
    gt rx849_pos, rx849_eos, rx849_fail2265
    repr_get_attr_int $I11, self, rx849_curclass, "$!from"
    ne $I11, -1, rxscan850_done2271
    goto rxscan850_scan2270
  rxscan850_loop2269:
    inc rx849_pos
    gt rx849_pos, rx849_eos, rx849_fail2265
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!from", rx849_pos
  rxscan850_scan2270:
    nqp_rxmark rx849_bstack, rxscan850_loop2269, rx849_pos, 0
  rxscan850_done2271:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt851_02273
    nqp_push_label $P11, alt851_12313
    nqp_rxmark rx849_bstack, alt851_end2272, -1, 0
    rx849_cur."!alt"(rx849_pos, "alt_nfa__33_1358115341.214", $P11)
    goto rx849_fail2265
  alt851_02273:
    nqp_rxmark rx849_bstack, rxcap852_fail2275, rx849_pos, 0
    add $I11, rx849_pos, 5
    gt $I11, rx849_eos, rx849_fail2265
    substr $S10, rx849_tgt, rx849_pos, 5
    ne $S10, ucs4:"proto", rx849_fail2265
    add rx849_pos, 5
    nqp_rxpeek $I19, rx849_bstack, rxcap852_fail2275
    inc $I19
    set $I11, rx849_bstack[$I19]
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx849_pos)
    rx849_cstack = rx849_cur."!cursor_capture"($P11, "proto")
    goto rxcap852_done2274
  rxcap852_fail2275:
    goto rx849_fail2265
  rxcap852_done2274:
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt854_02278
    nqp_push_label $P11, alt854_12279
    nqp_push_label $P11, alt854_22280
    nqp_rxmark rx849_bstack, alt854_end2277, -1, 0
    rx849_cur."!alt"(rx849_pos, "alt_nfa__31_1358115341.213", $P11)
    goto rx849_fail2265
  alt854_02278:
    add $I11, rx849_pos, 5
    gt $I11, rx849_eos, rx849_fail2265
    substr $S10, rx849_tgt, rx849_pos, 5
    ne $S10, ucs4:"regex", rx849_fail2265
    add rx849_pos, 5
    goto alt854_end2277
  alt854_12279:
    add $I11, rx849_pos, 5
    gt $I11, rx849_eos, rx849_fail2265
    substr $S10, rx849_tgt, rx849_pos, 5
    ne $S10, ucs4:"token", rx849_fail2265
    add rx849_pos, 5
    goto alt854_end2277
  alt854_22280:
    add $I11, rx849_pos, 4
    gt $I11, rx849_eos, rx849_fail2265
    substr $S10, rx849_tgt, rx849_pos, 4
    ne $S10, ucs4:"rule", rx849_fail2265
    add rx849_pos, 4
    goto alt854_end2277
  alt854_end2277:
    nqp_rxcommit rx849_bstack, alt854_end2277
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
  alt856_02283:
    nqp_rxmark rx849_bstack, alt856_12289, rx849_pos, 0
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    add $I11, rx849_pos, 3
    gt $I11, rx849_eos, rx849_fail2265
    substr $S10, rx849_tgt, rx849_pos, 3
    ne $S10, ucs4:"::(", rx849_fail2265
    add rx849_pos, 3
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."variable"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    nqp_rxmark rx849_bstack, rxsubrule859_pass2286, -1, 0
  rxsubrule859_pass2286:
    rx849_cstack = rx849_cur."!cursor_capture"($P11, "latename=variable")
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    add $I11, rx849_pos, 1
    gt $I11, rx849_eos, rx849_fail2265
    substr $S10, rx849_tgt, rx849_pos, 1
    ne $S10, ucs4:")", rx849_fail2265
    add rx849_pos, 1
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    goto alt856_end2282
  alt856_12289:
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    nqp_rxmark rx849_bstack, rxsubrule863_pass2291, -1, 0
  rxsubrule863_pass2291:
    rx849_cstack = rx849_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
  alt856_end2282:
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
  alt866_02295:
    nqp_rxmark rx849_bstack, alt866_12298, rx849_pos, 0
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    add $I11, rx849_pos, 3
    gt $I11, rx849_eos, rx849_fail2265
    substr $S10, rx849_tgt, rx849_pos, 3
    ne $S10, ucs4:"{*}", rx849_fail2265
    add rx849_pos, 3
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    goto alt866_end2294
  alt866_12298:
    nqp_rxmark rx849_bstack, alt866_22303, rx849_pos, 0
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    add $I11, rx849_pos, 1
    gt $I11, rx849_eos, rx849_fail2265
    substr $S10, rx849_tgt, rx849_pos, 1
    ne $S10, ucs4:"{", rx849_fail2265
    add rx849_pos, 1
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    add $I11, rx849_pos, 5
    gt $I11, rx849_eos, rx849_fail2265
    substr $S10, rx849_tgt, rx849_pos, 5
    ne $S10, ucs4:"<...>", rx849_fail2265
    add rx849_pos, 5
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    add $I11, rx849_pos, 1
    gt $I11, rx849_eos, rx849_fail2265
    substr $S10, rx849_tgt, rx849_pos, 1
    ne $S10, ucs4:"}", rx849_fail2265
    add rx849_pos, 1
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    goto alt866_end2294
  alt866_22303:
    nqp_rxmark rx849_bstack, alt866_32308, rx849_pos, 0
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    add $I11, rx849_pos, 1
    gt $I11, rx849_eos, rx849_fail2265
    substr $S10, rx849_tgt, rx849_pos, 1
    ne $S10, ucs4:"{", rx849_fail2265
    add rx849_pos, 1
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    add $I11, rx849_pos, 3
    gt $I11, rx849_eos, rx849_fail2265
    substr $S10, rx849_tgt, rx849_pos, 3
    ne $S10, ucs4:"<*>", rx849_fail2265
    add rx849_pos, 3
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    add $I11, rx849_pos, 1
    gt $I11, rx849_eos, rx849_fail2265
    substr $S10, rx849_tgt, rx849_pos, 1
    ne $S10, ucs4:"}", rx849_fail2265
    add rx849_pos, 1
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    goto alt866_end2294
  alt866_32308:
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."panic"("Proto regex body must be \\{*\\} (or <*> or <...>, which are deprecated)")
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
  alt866_end2294:
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    goto alt851_end2272
  alt851_12313:
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    nqp_rxmark rx849_bstack, rxcap882_fail2316, rx849_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt883_02318
    nqp_push_label $P11, alt883_12319
    nqp_push_label $P11, alt883_22320
    nqp_rxmark rx849_bstack, alt883_end2317, -1, 0
    rx849_cur."!alt"(rx849_pos, "alt_nfa__32_1358115341.214", $P11)
    goto rx849_fail2265
  alt883_02318:
    add $I11, rx849_pos, 5
    gt $I11, rx849_eos, rx849_fail2265
    substr $S10, rx849_tgt, rx849_pos, 5
    ne $S10, ucs4:"regex", rx849_fail2265
    add rx849_pos, 5
    goto alt883_end2317
  alt883_12319:
    add $I11, rx849_pos, 5
    gt $I11, rx849_eos, rx849_fail2265
    substr $S10, rx849_tgt, rx849_pos, 5
    ne $S10, ucs4:"token", rx849_fail2265
    add rx849_pos, 5
    goto alt883_end2317
  alt883_22320:
    add $I11, rx849_pos, 4
    gt $I11, rx849_eos, rx849_fail2265
    substr $S10, rx849_tgt, rx849_pos, 4
    ne $S10, ucs4:"rule", rx849_fail2265
    add rx849_pos, 4
    goto alt883_end2317
  alt883_end2317:
    nqp_rxcommit rx849_bstack, alt883_end2317
    nqp_rxpeek $I19, rx849_bstack, rxcap882_fail2316
    inc $I19
    set $I11, rx849_bstack[$I19]
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx849_pos)
    rx849_cstack = rx849_cur."!cursor_capture"($P11, "sym")
    goto rxcap882_done2315
  rxcap882_fail2316:
    goto rx849_fail2265
  rxcap882_done2315:
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
  alt886_02324:
    nqp_rxmark rx849_bstack, alt886_12330, rx849_pos, 0
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    add $I11, rx849_pos, 3
    gt $I11, rx849_eos, rx849_fail2265
    substr $S10, rx849_tgt, rx849_pos, 3
    ne $S10, ucs4:"::(", rx849_fail2265
    add rx849_pos, 3
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."variable"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    nqp_rxmark rx849_bstack, rxsubrule889_pass2327, -1, 0
  rxsubrule889_pass2327:
    rx849_cstack = rx849_cur."!cursor_capture"($P11, "latename=variable")
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    add $I11, rx849_pos, 1
    gt $I11, rx849_eos, rx849_fail2265
    substr $S10, rx849_tgt, rx849_pos, 1
    ne $S10, ucs4:")", rx849_fail2265
    add rx849_pos, 1
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    goto alt886_end2323
  alt886_12330:
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    nqp_rxmark rx849_bstack, rxsubrule893_pass2332, -1, 0
  rxsubrule893_pass2332:
    rx849_cstack = rx849_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
  alt886_end2323:
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    nqp_rxmark rx849_bstack, rxquantr898_done2338, rx849_pos, 0
  rxquantr898_loop2337:
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    add $I11, rx849_pos, 1
    gt $I11, rx849_eos, rx849_fail2265
    substr $S10, rx849_tgt, rx849_pos, 1
    ne $S10, ucs4:"(", rx849_fail2265
    add rx849_pos, 1
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."signature"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    nqp_rxmark rx849_bstack, rxsubrule901_pass2341, -1, 0
  rxsubrule901_pass2341:
    rx849_cstack = rx849_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    add $I11, rx849_pos, 1
    gt $I11, rx849_eos, rx849_fail2265
    substr $S10, rx849_tgt, rx849_pos, 1
    ne $S10, ucs4:")", rx849_fail2265
    add rx849_pos, 1
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    nqp_rxpeek $I19, rx849_bstack, rxquantr898_done2338
    inc $I19
    inc $I19
    set rx849_rep, rx849_bstack[$I19]
    nqp_rxcommit rx849_bstack, rxquantr898_done2338
    inc rx849_rep
  rxquantr898_done2338:
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    store_lex unicode:"$\x{a2}", rx849_cur
    unless_null $P101, fallback2345
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%RX"]
    unless_null $P5002, fallback2346
    nqp_get_sc_object $P5006, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%RX"], $P5007
    set $P5002, $P5007
  fallback2346:
    unless_null $P5002, vivi_9052347
    die "Contextual %*RX not found"
    box $P5008, "Contextual %*RX not found"
    set $P5002, $P5008
  vivi_9052347:
    set $P101, $P5002
  fallback2345:
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    store_lex unicode:"$\x{a2}", rx849_cur
    $P5009 = $P102."MATCH"()
    set $P103, $P5009
    .const 'Sub' $P5010 = 'cuid_405_1358115338.889' 
    capture_lex $P5010
    $P5011 = $P5010()
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    add $I11, rx849_pos, 1
    gt $I11, rx849_eos, rx849_fail2265
    substr $S10, rx849_tgt, rx849_pos, 1
    ne $S10, ucs4:"{", rx849_fail2265
    add rx849_pos, 1
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."LANG"("Regex", "nibbler")
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    nqp_rxmark rx849_bstack, rxsubrule917_pass2388, -1, 0
  rxsubrule917_pass2388:
    rx849_cstack = rx849_cur."!cursor_capture"($P11, "p6regex")
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    add $I11, rx849_pos, 1
    gt $I11, rx849_eos, rx849_fail2265
    substr $S10, rx849_tgt, rx849_pos, 1
    ne $S10, ucs4:"}", rx849_fail2265
    add rx849_pos, 1
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2265
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    goto alt851_end2272
  alt851_end2272:
    nqp_rxcommit rx849_bstack, alt851_end2272
    rx849_cur."!cursor_pass"(rx849_pos, "regex_declarator", 'backtrack'=>1)
    .return (rx849_cur)
  rx849_restart2264:
    repr_get_attr_obj rx849_cstack, rx849_cur, rx849_curclass, "$!cstack"
  rx849_fail2265:
    unless rx849_bstack, rx849_done2263
    pop $I19, rx849_bstack
    if_null rx849_cstack, rx849_cstack_done2268
    unless rx849_cstack, rx849_cstack_done2268
    dec $I19
    set $P11, rx849_cstack[$I19]
  rx849_cstack_done2268:
    pop rx849_rep, rx849_bstack
    pop rx849_pos, rx849_bstack
    pop $I19, rx849_bstack
    lt rx849_pos, -1, rx849_done2263
    lt rx849_pos, 0, rx849_fail2265
    eq $I19, 0, rx849_fail2265
    nqp_islist $I20, rx849_cstack
    unless $I20, rx849_jump2266
    elements $I18, rx849_bstack
    le $I18, 0, rx849_cut2267
    dec $I18
    set $I18, rx849_bstack[$I18]
  rx849_cut2267:
    assign rx849_cstack, $I18
  rx849_jump2266:
    jump $I19
  rx849_done2263:
    rx849_cur."!cursor_fail"()
    .return (rx849_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_405_1358115338.889") :anon :lex :outer("cuid_137_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1168

    find_dynamic_lex $P5001, "%*RX"
    unless_null $P5001, fallback2349
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%RX"]
    unless_null $P5002, fallback2350
    nqp_get_sc_object $P5006, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%RX"], $P5007
    set $P5002, $P5007
  fallback2350:
    unless_null $P5002, vivi_9072351
    die "Contextual %*RX not found"
    box $P5008, "Contextual %*RX not found"
    set $P5002, $P5008
  vivi_9072351:
    set $P5001, $P5002
  fallback2349:
    find_lex $P5010, "$/"
    unless_null $P5010, fallback2352
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5010, $P5011
  fallback2352:
    set $P5009, $P5010["sym"]
    unless_null $P5009, fallback2353
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5009, $P5012
  fallback2353:
    set $S5001, $P5009
    iseq $I5001, $S5001, "rule"
    box $P5013, $I5001
    set $P5001["s"], $P5013
    find_dynamic_lex $P5014, "%*RX"
    unless_null $P5014, fallback2354
    nqp_get_sc_object $P5017, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5016, $P5017
    set $P5015, $P5016["%RX"]
    unless_null $P5015, fallback2355
    nqp_get_sc_object $P5019, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5018, $P5019
    new $P5020, 'Hash'
    set $P5018["%RX"], $P5020
    set $P5015, $P5020
  fallback2355:
    unless_null $P5015, vivi_9082356
    die "Contextual %*RX not found"
    box $P5021, "Contextual %*RX not found"
    set $P5015, $P5021
  vivi_9082356:
    set $P5014, $P5015
  fallback2354:
    find_lex $P5023, "$/"
    unless_null $P5023, fallback2359
    nqp_get_sc_object $P5024, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5023, $P5024
  fallback2359:
    set $P5022, $P5023["sym"]
    unless_null $P5022, fallback2360
    nqp_get_sc_object $P5025, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5022, $P5025
  fallback2360:
    set $S5002, $P5022
    iseq $I5002, $S5002, "token"
    set $I5004, $I5002
    if $I5002 goto unless909_end2358 
    find_lex $P5027, "$/"
    unless_null $P5027, fallback2361
    nqp_get_sc_object $P5028, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5027, $P5028
  fallback2361:
    set $P5026, $P5027["sym"]
    unless_null $P5026, fallback2362
    nqp_get_sc_object $P5029, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5026, $P5029
  fallback2362:
    set $S5003, $P5026
    iseq $I5003, $S5003, "rule"
    set $I5004, $I5003
  unless909_end2358:
    box $P5030, $I5004
    set $P5014["r"], $P5030
    find_dynamic_lex $P5031, "%*RX"
    unless_null $P5031, fallback2363
    nqp_get_sc_object $P5034, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["%RX"]
    unless_null $P5032, fallback2364
    nqp_get_sc_object $P5036, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5035, $P5036
    new $P5037, 'Hash'
    set $P5035["%RX"], $P5037
    set $P5032, $P5037
  fallback2364:
    unless_null $P5032, vivi_9102365
    die "Contextual %*RX not found"
    box $P5038, "Contextual %*RX not found"
    set $P5032, $P5038
  vivi_9102365:
    set $P5031, $P5032
  fallback2363:
    find_lex $P5040, "$/"
    unless_null $P5040, fallback2368
    nqp_get_sc_object $P5041, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5040, $P5041
  fallback2368:
    set $P5039, $P5040["deflongname"]
    unless_null $P5039, fallback2369
    nqp_get_sc_object $P5042, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5039, $P5042
  fallback2369:
    unless $P5039 goto if911_else2366 
.annotate 'line', 1171
    find_lex $P5044, "$/"
    unless_null $P5044, fallback2370
    nqp_get_sc_object $P5045, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5044, $P5045
  fallback2370:
    set $P5043, $P5044["deflongname"]
    unless_null $P5043, fallback2371
    nqp_get_sc_object $P5046, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5043, $P5046
  fallback2371:
    $P5047 = $P5043."ast"()
    set $P5052, $P5047
    goto if911_end2367
  if911_else2366:
    find_lex $P5049, "$/"
    unless_null $P5049, fallback2372
    nqp_get_sc_object $P5050, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5049, $P5050
  fallback2372:
    set $P5048, $P5049["latename"]
    unless_null $P5048, fallback2373
    nqp_get_sc_object $P5051, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5048, $P5051
  fallback2373:
    set $S5005, $P5048
    concat $S5004, "!!LATENAME!!", $S5005
    box $P5053, $S5004
    set $P5052, $P5053
  if911_end2367:
    set $P5031["name"], $P5052
    find_dynamic_lex $P5054, "%*RX"
    unless_null $P5054, fallback2374
    nqp_get_sc_object $P5057, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5056, $P5057
    set $P5055, $P5056["%RX"]
    unless_null $P5055, fallback2375
    nqp_get_sc_object $P5059, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5058, $P5059
    new $P5060, 'Hash'
    set $P5058["%RX"], $P5060
    set $P5055, $P5060
  fallback2375:
    unless_null $P5055, vivi_9122376
    die "Contextual %*RX not found"
    box $P5061, "Contextual %*RX not found"
    set $P5055, $P5061
  vivi_9122376:
    set $P5054, $P5055
  fallback2374:
.annotate 'line', 1172
    find_dynamic_lex $P5062, "$*W"
    unless_null $P5062, fallback2377
    nqp_get_sc_object $P5065, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5064, $P5065
    set $P5063, $P5064["$W"]
    unless_null $P5063, fallback2378
    nqp_get_sc_object $P5066, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5063, $P5066
  fallback2378:
    unless_null $P5063, vivi_9132379
    die "Contextual $*W not found"
    box $P5067, "Contextual $*W not found"
    set $P5063, $P5067
  vivi_9132379:
    set $P5062, $P5063
  fallback2377:
    find_dynamic_lex $P5068, "$*W"
    unless_null $P5068, fallback2380
    nqp_get_sc_object $P5071, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5070, $P5071
    set $P5069, $P5070["$W"]
    unless_null $P5069, fallback2381
    nqp_get_sc_object $P5072, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5069, $P5072
  fallback2381:
    unless_null $P5069, vivi_9142382
    die "Contextual $*W not found"
    box $P5073, "Contextual $*W not found"
    set $P5069, $P5073
  vivi_9142382:
    set $P5068, $P5069
  fallback2380:
    $P5074 = $P5068."cur_lexpad"()
    find_dynamic_lex $P5076, "%*RX"
    unless_null $P5076, fallback2383
    nqp_get_sc_object $P5079, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5078, $P5079
    set $P5077, $P5078["%RX"]
    unless_null $P5077, fallback2384
    nqp_get_sc_object $P5081, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5080, $P5081
    new $P5082, 'Hash'
    set $P5080["%RX"], $P5082
    set $P5077, $P5082
  fallback2384:
    unless_null $P5077, vivi_9152385
    die "Contextual %*RX not found"
    box $P5083, "Contextual %*RX not found"
    set $P5077, $P5083
  vivi_9152385:
    set $P5076, $P5077
  fallback2383:
    set $P5075, $P5076["name"]
    unless_null $P5075, fallback2386
    nqp_get_sc_object $P5084, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5075, $P5084
  fallback2386:
    $P5085 = $P5062."create_code"($P5074, $P5075, 0, "NQPRegex" :named("code_type_name"))
    set $P5054["code"], $P5085
    .return ($P5085) 
.end
.HLL "nqp"
.namespace []
.sub "dotty" :subid("cuid_138_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1178
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx919_tgt
    .local int rx919_pos
    .local int rx919_off
    .local int rx919_eos
    .local int rx919_rep
    .local pmc rx919_cur
    .local pmc rx919_curclass
    .local pmc rx919_bstack
    .local pmc rx919_cstack
    (rx919_cur, rx919_tgt, rx919_pos, rx919_curclass, rx919_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx919_cur
    length rx919_eos, rx919_tgt
    eq $I19, 1, rx919_restart2392
    gt rx919_pos, rx919_eos, rx919_fail2393
    repr_get_attr_int $I11, self, rx919_curclass, "$!from"
    ne $I11, -1, rxscan920_done2399
    goto rxscan920_scan2398
  rxscan920_loop2397:
    inc rx919_pos
    gt rx919_pos, rx919_eos, rx919_fail2393
    repr_bind_attr_int rx919_cur, rx919_curclass, "$!from", rx919_pos
  rxscan920_scan2398:
    nqp_rxmark rx919_bstack, rxscan920_loop2397, rx919_pos, 0
  rxscan920_done2399:
    add $I11, rx919_pos, 1
    gt $I11, rx919_eos, rx919_fail2393
    substr $S10, rx919_tgt, rx919_pos, 1
    ne $S10, ucs4:".", rx919_fail2393
    add rx919_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt921_02401
    nqp_push_label $P11, alt921_12403
    nqp_rxmark rx919_bstack, alt921_end2400, -1, 0
    rx919_cur."!alt"(rx919_pos, "alt_nfa__34_1358115341.236", $P11)
    goto rx919_fail2393
  alt921_02401:
    repr_bind_attr_int rx919_cur, rx919_curclass, "$!pos", rx919_pos
    $P11 = rx919_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx919_curclass, "$!pos"
    lt $I11, 0, rx919_fail2393
    nqp_rxmark rx919_bstack, rxsubrule922_pass2402, -1, 0
  rxsubrule922_pass2402:
    rx919_cstack = rx919_cur."!cursor_capture"($P11, "longname=deflongname")
    repr_get_attr_int rx919_pos, $P11, rx919_curclass, "$!pos"
    goto alt921_end2400
  alt921_12403:
    ge rx919_pos, rx919_eos, rx919_fail2393
    substr $S11, rx919_tgt, rx919_pos, 1
    index $I11, ucs4:"'\"", $S11
    lt $I11, 0, rx919_fail2393
    repr_bind_attr_int rx919_cur, rx919_curclass, "$!pos", rx919_pos
    $P11 = rx919_cur."quote"()
    repr_get_attr_int $I11, $P11, rx919_curclass, "$!pos"
    lt $I11, 0, rx919_fail2393
    nqp_rxmark rx919_bstack, rxsubrule923_pass2404, -1, 0
  rxsubrule923_pass2404:
    rx919_cstack = rx919_cur."!cursor_capture"($P11, "quote")
    repr_get_attr_int rx919_pos, $P11, rx919_curclass, "$!pos"
  alt924_02406:
    nqp_rxmark rx919_bstack, alt924_12407, rx919_pos, 0
    ge rx919_pos, rx919_eos, rx919_fail2393
    substr $S11, rx919_tgt, rx919_pos, 1
    index $I11, ucs4:"(", $S11
    lt $I11, 0, rx919_fail2393
    goto alt924_end2405
  alt924_12407:
    repr_bind_attr_int rx919_cur, rx919_curclass, "$!pos", rx919_pos
    $P11 = rx919_cur."panic"("Quoted method name requires parenthesized arguments")
    repr_get_attr_int $I11, $P11, rx919_curclass, "$!pos"
    lt $I11, 0, rx919_fail2393
    repr_get_attr_int rx919_pos, $P11, rx919_curclass, "$!pos"
  alt924_end2405:
    goto alt921_end2400
  alt921_end2400:
    nqp_rxcommit rx919_bstack, alt921_end2400
    nqp_rxmark rx919_bstack, rxquantr926_done2410, rx919_pos, 0
  rxquantr926_loop2409:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt927_02412
    nqp_push_label $P11, alt927_12414
    nqp_rxmark rx919_bstack, alt927_end2411, -1, 0
    rx919_cur."!alt"(rx919_pos, "alt_nfa__35_1358115341.236", $P11)
    goto rx919_fail2393
  alt927_02412:
    ge rx919_pos, rx919_eos, rx919_fail2393
    substr $S11, rx919_tgt, rx919_pos, 1
    index $I11, ucs4:"(", $S11
    lt $I11, 0, rx919_fail2393
    repr_bind_attr_int rx919_cur, rx919_curclass, "$!pos", rx919_pos
    $P11 = rx919_cur."args"()
    repr_get_attr_int $I11, $P11, rx919_curclass, "$!pos"
    lt $I11, 0, rx919_fail2393
    nqp_rxmark rx919_bstack, rxsubrule928_pass2413, -1, 0
  rxsubrule928_pass2413:
    rx919_cstack = rx919_cur."!cursor_capture"($P11, "args")
    repr_get_attr_int rx919_pos, $P11, rx919_curclass, "$!pos"
    goto alt927_end2411
  alt927_12414:
    add $I11, rx919_pos, 1
    gt $I11, rx919_eos, rx919_fail2393
    substr $S10, rx919_tgt, rx919_pos, 1
    ne $S10, ucs4:":", rx919_fail2393
    add rx919_pos, 1
    ge rx919_pos, rx919_eos, rx919_fail2393
    is_cclass $I11, .CCLASS_WHITESPACE, rx919_tgt, rx919_pos
    unless $I11, rx919_fail2393
    add rx919_pos, 1
    repr_bind_attr_int rx919_cur, rx919_curclass, "$!pos", rx919_pos
    $P11 = rx919_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx919_curclass, "$!pos"
    lt $I11, 0, rx919_fail2393
    nqp_rxmark rx919_bstack, rxsubrule929_pass2415, -1, 0
  rxsubrule929_pass2415:
    rx919_cstack = rx919_cur."!cursor_capture"($P11, "args")
    repr_get_attr_int rx919_pos, $P11, rx919_curclass, "$!pos"
    goto alt927_end2411
  alt927_end2411:
    nqp_rxpeek $I19, rx919_bstack, rxquantr926_done2410
    inc $I19
    inc $I19
    set rx919_rep, rx919_bstack[$I19]
    nqp_rxcommit rx919_bstack, rxquantr926_done2410
    inc rx919_rep
  rxquantr926_done2410:
    rx919_cur."!cursor_pass"(rx919_pos, "dotty", 'backtrack'=>1)
    .return (rx919_cur)
  rx919_restart2392:
    repr_get_attr_obj rx919_cstack, rx919_cur, rx919_curclass, "$!cstack"
  rx919_fail2393:
    unless rx919_bstack, rx919_done2391
    pop $I19, rx919_bstack
    if_null rx919_cstack, rx919_cstack_done2396
    unless rx919_cstack, rx919_cstack_done2396
    dec $I19
    set $P11, rx919_cstack[$I19]
  rx919_cstack_done2396:
    pop rx919_rep, rx919_bstack
    pop rx919_pos, rx919_bstack
    pop $I19, rx919_bstack
    lt rx919_pos, -1, rx919_done2391
    lt rx919_pos, 0, rx919_fail2393
    eq $I19, 0, rx919_fail2393
    nqp_islist $I20, rx919_cstack
    unless $I20, rx919_jump2394
    elements $I18, rx919_bstack
    le $I18, 0, rx919_cut2395
    dec $I18
    set $I18, rx919_bstack[$I18]
  rx919_cut2395:
    assign rx919_cstack, $I18
  rx919_jump2394:
    jump $I19
  rx919_done2391:
    rx919_cur."!cursor_fail"()
    .return (rx919_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<self>" :subid("cuid_139_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1191
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx930_tgt
    .local int rx930_pos
    .local int rx930_off
    .local int rx930_eos
    .local int rx930_rep
    .local pmc rx930_cur
    .local pmc rx930_curclass
    .local pmc rx930_bstack
    .local pmc rx930_cstack
    (rx930_cur, rx930_tgt, rx930_pos, rx930_curclass, rx930_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx930_cur
    length rx930_eos, rx930_tgt
    eq $I19, 1, rx930_restart2418
    gt rx930_pos, rx930_eos, rx930_fail2419
    repr_get_attr_int $I11, self, rx930_curclass, "$!from"
    ne $I11, -1, rxscan931_done2425
    goto rxscan931_scan2424
  rxscan931_loop2423:
    inc rx930_pos
    gt rx930_pos, rx930_eos, rx930_fail2419
    repr_bind_attr_int rx930_cur, rx930_curclass, "$!from", rx930_pos
  rxscan931_scan2424:
    nqp_rxmark rx930_bstack, rxscan931_loop2423, rx930_pos, 0
  rxscan931_done2425:
    nqp_rxmark rx930_bstack, rxcap932_fail2427, rx930_pos, 0
    add $I11, rx930_pos, 4
    gt $I11, rx930_eos, rx930_fail2419
    substr $S10, rx930_tgt, rx930_pos, 4
    ne $S10, ucs4:"self", rx930_fail2419
    add rx930_pos, 4
    nqp_rxpeek $I19, rx930_bstack, rxcap932_fail2427
    inc $I19
    set $I11, rx930_bstack[$I19]
    repr_bind_attr_int rx930_cur, rx930_curclass, "$!pos", rx930_pos
    $P11 = rx930_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx930_pos)
    rx930_cstack = rx930_cur."!cursor_capture"($P11, "sym")
    goto rxcap932_done2426
  rxcap932_fail2427:
    goto rx930_fail2419
  rxcap932_done2426:
    le rx930_pos, 0, rx930_fail2419
    is_cclass $I11, .CCLASS_WORD, rx930_tgt, rx930_pos
    if $I11, rx930_fail2419
    sub $I11, rx930_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx930_tgt, $I11
    unless $I11, rx930_fail2419
    rx930_cur."!cursor_pass"(rx930_pos, "term:sym<self>", 'backtrack'=>1)
    .return (rx930_cur)
  rx930_restart2418:
    repr_get_attr_obj rx930_cstack, rx930_cur, rx930_curclass, "$!cstack"
  rx930_fail2419:
    unless rx930_bstack, rx930_done2417
    pop $I19, rx930_bstack
    if_null rx930_cstack, rx930_cstack_done2422
    unless rx930_cstack, rx930_cstack_done2422
    dec $I19
    set $P11, rx930_cstack[$I19]
  rx930_cstack_done2422:
    pop rx930_rep, rx930_bstack
    pop rx930_pos, rx930_bstack
    pop $I19, rx930_bstack
    lt rx930_pos, -1, rx930_done2417
    lt rx930_pos, 0, rx930_fail2419
    eq $I19, 0, rx930_fail2419
    nqp_islist $I20, rx930_cstack
    unless $I20, rx930_jump2420
    elements $I18, rx930_bstack
    le $I18, 0, rx930_cut2421
    dec $I18
    set $I18, rx930_bstack[$I18]
  rx930_cut2421:
    assign rx930_cstack, $I18
  rx930_jump2420:
    jump $I19
  rx930_done2417:
    rx930_cur."!cursor_fail"()
    .return (rx930_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<identifier>" :subid("cuid_140_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1193
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx934_tgt
    .local int rx934_pos
    .local int rx934_off
    .local int rx934_eos
    .local int rx934_rep
    .local pmc rx934_cur
    .local pmc rx934_curclass
    .local pmc rx934_bstack
    .local pmc rx934_cstack
    (rx934_cur, rx934_tgt, rx934_pos, rx934_curclass, rx934_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx934_cur
    length rx934_eos, rx934_tgt
    eq $I19, 1, rx934_restart2431
    gt rx934_pos, rx934_eos, rx934_fail2432
    repr_get_attr_int $I11, self, rx934_curclass, "$!from"
    ne $I11, -1, rxscan935_done2438
    goto rxscan935_scan2437
  rxscan935_loop2436:
    inc rx934_pos
    gt rx934_pos, rx934_eos, rx934_fail2432
    repr_bind_attr_int rx934_cur, rx934_curclass, "$!from", rx934_pos
  rxscan935_scan2437:
    nqp_rxmark rx934_bstack, rxscan935_loop2436, rx934_pos, 0
  rxscan935_done2438:
    repr_bind_attr_int rx934_cur, rx934_curclass, "$!pos", rx934_pos
    $P11 = rx934_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx934_curclass, "$!pos"
    lt $I11, 0, rx934_fail2432
    nqp_rxmark rx934_bstack, rxsubrule936_pass2439, -1, 0
  rxsubrule936_pass2439:
    rx934_cstack = rx934_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx934_pos, $P11, rx934_curclass, "$!pos"
    ge rx934_pos, rx934_eos, rx934_fail2432
    substr $S11, rx934_tgt, rx934_pos, 1
    index $I11, ucs4:"(", $S11
    lt $I11, 0, rx934_fail2432
    repr_bind_attr_int rx934_cur, rx934_curclass, "$!pos", rx934_pos
    $P11 = rx934_cur."args"()
    repr_get_attr_int $I11, $P11, rx934_curclass, "$!pos"
    lt $I11, 0, rx934_fail2432
    nqp_rxmark rx934_bstack, rxsubrule937_pass2440, -1, 0
  rxsubrule937_pass2440:
    rx934_cstack = rx934_cur."!cursor_capture"($P11, "args")
    repr_get_attr_int rx934_pos, $P11, rx934_curclass, "$!pos"
    rx934_cur."!cursor_pass"(rx934_pos, "term:sym<identifier>", 'backtrack'=>1)
    .return (rx934_cur)
  rx934_restart2431:
    repr_get_attr_obj rx934_cstack, rx934_cur, rx934_curclass, "$!cstack"
  rx934_fail2432:
    unless rx934_bstack, rx934_done2430
    pop $I19, rx934_bstack
    if_null rx934_cstack, rx934_cstack_done2435
    unless rx934_cstack, rx934_cstack_done2435
    dec $I19
    set $P11, rx934_cstack[$I19]
  rx934_cstack_done2435:
    pop rx934_rep, rx934_bstack
    pop rx934_pos, rx934_bstack
    pop $I19, rx934_bstack
    lt rx934_pos, -1, rx934_done2430
    lt rx934_pos, 0, rx934_fail2432
    eq $I19, 0, rx934_fail2432
    nqp_islist $I20, rx934_cstack
    unless $I20, rx934_jump2433
    elements $I18, rx934_bstack
    le $I18, 0, rx934_cut2434
    dec $I18
    set $I18, rx934_bstack[$I18]
  rx934_cut2434:
    assign rx934_cstack, $I18
  rx934_jump2433:
    jump $I19
  rx934_done2430:
    rx934_cur."!cursor_fail"()
    .return (rx934_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<name>" :subid("cuid_141_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1197
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx938_tgt
    .local int rx938_pos
    .local int rx938_off
    .local int rx938_eos
    .local int rx938_rep
    .local pmc rx938_cur
    .local pmc rx938_curclass
    .local pmc rx938_bstack
    .local pmc rx938_cstack
    (rx938_cur, rx938_tgt, rx938_pos, rx938_curclass, rx938_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx938_cur
    length rx938_eos, rx938_tgt
    eq $I19, 1, rx938_restart2443
    gt rx938_pos, rx938_eos, rx938_fail2444
    repr_get_attr_int $I11, self, rx938_curclass, "$!from"
    ne $I11, -1, rxscan939_done2450
    goto rxscan939_scan2449
  rxscan939_loop2448:
    inc rx938_pos
    gt rx938_pos, rx938_eos, rx938_fail2444
    repr_bind_attr_int rx938_cur, rx938_curclass, "$!from", rx938_pos
  rxscan939_scan2449:
    nqp_rxmark rx938_bstack, rxscan939_loop2448, rx938_pos, 0
  rxscan939_done2450:
    repr_bind_attr_int rx938_cur, rx938_curclass, "$!pos", rx938_pos
    $P11 = rx938_cur."name"()
    repr_get_attr_int $I11, $P11, rx938_curclass, "$!pos"
    lt $I11, 0, rx938_fail2444
    nqp_rxmark rx938_bstack, rxsubrule940_pass2451, -1, 0
  rxsubrule940_pass2451:
    rx938_cstack = rx938_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx938_pos, $P11, rx938_curclass, "$!pos"
    nqp_rxmark rx938_bstack, rxquantr941_done2453, rx938_pos, 0
  rxquantr941_loop2452:
    repr_bind_attr_int rx938_cur, rx938_curclass, "$!pos", rx938_pos
    $P11 = rx938_cur."args"()
    repr_get_attr_int $I11, $P11, rx938_curclass, "$!pos"
    lt $I11, 0, rx938_fail2444
    goto rxsubrule942_pass2454
  rxsubrule942_back2455:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx938_curclass, "$!pos"
    lt $I11, 0, rx938_fail2444
  rxsubrule942_pass2454:
    rx938_cstack = rx938_cur."!cursor_capture"($P11, "args")
    set_addr $I11, rxsubrule942_back2455
    push rx938_bstack, $I11
    push rx938_bstack, 0
    push rx938_bstack, rx938_pos
    elements $I11, rx938_cstack
    push rx938_bstack, $I11
    repr_get_attr_int rx938_pos, $P11, rx938_curclass, "$!pos"
    nqp_rxpeek $I19, rx938_bstack, rxquantr941_done2453
    inc $I19
    inc $I19
    set rx938_rep, rx938_bstack[$I19]
    nqp_rxcommit rx938_bstack, rxquantr941_done2453
    inc rx938_rep
  rxquantr941_done2453:
    rx938_cur."!cursor_pass"(rx938_pos, "term:sym<name>", 'backtrack'=>1)
    .return (rx938_cur)
  rx938_restart2443:
    repr_get_attr_obj rx938_cstack, rx938_cur, rx938_curclass, "$!cstack"
  rx938_fail2444:
    unless rx938_bstack, rx938_done2442
    pop $I19, rx938_bstack
    if_null rx938_cstack, rx938_cstack_done2447
    unless rx938_cstack, rx938_cstack_done2447
    dec $I19
    set $P11, rx938_cstack[$I19]
  rx938_cstack_done2447:
    pop rx938_rep, rx938_bstack
    pop rx938_pos, rx938_bstack
    pop $I19, rx938_bstack
    lt rx938_pos, -1, rx938_done2442
    lt rx938_pos, 0, rx938_fail2444
    eq $I19, 0, rx938_fail2444
    nqp_islist $I20, rx938_cstack
    unless $I20, rx938_jump2445
    elements $I18, rx938_bstack
    le $I18, 0, rx938_cut2446
    dec $I18
    set $I18, rx938_bstack[$I18]
  rx938_cut2446:
    assign rx938_cstack, $I18
  rx938_jump2445:
    jump $I19
  rx938_done2442:
    rx938_cur."!cursor_fail"()
    .return (rx938_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::op>" :subid("cuid_142_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1201
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx943_tgt
    .local int rx943_pos
    .local int rx943_off
    .local int rx943_eos
    .local int rx943_rep
    .local pmc rx943_cur
    .local pmc rx943_curclass
    .local pmc rx943_bstack
    .local pmc rx943_cstack
    (rx943_cur, rx943_tgt, rx943_pos, rx943_curclass, rx943_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx943_cur
    length rx943_eos, rx943_tgt
    eq $I19, 1, rx943_restart2458
    gt rx943_pos, rx943_eos, rx943_fail2459
    repr_get_attr_int $I11, self, rx943_curclass, "$!from"
    ne $I11, -1, rxscan944_done2465
    goto rxscan944_scan2464
  rxscan944_loop2463:
    inc rx943_pos
    gt rx943_pos, rx943_eos, rx943_fail2459
    repr_bind_attr_int rx943_cur, rx943_curclass, "$!from", rx943_pos
  rxscan944_scan2464:
    nqp_rxmark rx943_bstack, rxscan944_loop2463, rx943_pos, 0
  rxscan944_done2465:
    add $I11, rx943_pos, 5
    gt $I11, rx943_eos, rx943_fail2459
    substr $S10, rx943_tgt, rx943_pos, 5
    ne $S10, ucs4:"pir::", rx943_fail2459
    add rx943_pos, 5
    nqp_rxmark rx943_bstack, rxcap945_fail2467, rx943_pos, 0
    nqp_rxmark rx943_bstack, rxquantr946_done2469, -1, 0
  rxquantr946_loop2468:
    ge rx943_pos, rx943_eos, rx943_fail2459
    is_cclass $I11, .CCLASS_WORD, rx943_tgt, rx943_pos
    unless $I11, rx943_fail2459
    add rx943_pos, 1
    nqp_rxpeek $I19, rx943_bstack, rxquantr946_done2469
    inc $I19
    inc $I19
    set rx943_rep, rx943_bstack[$I19]
    nqp_rxcommit rx943_bstack, rxquantr946_done2469
    inc rx943_rep
    nqp_rxmark rx943_bstack, rxquantr946_done2469, rx943_pos, rx943_rep
    goto rxquantr946_loop2468
  rxquantr946_done2469:
    nqp_rxpeek $I19, rx943_bstack, rxcap945_fail2467
    inc $I19
    set $I11, rx943_bstack[$I19]
    repr_bind_attr_int rx943_cur, rx943_curclass, "$!pos", rx943_pos
    $P11 = rx943_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx943_pos)
    rx943_cstack = rx943_cur."!cursor_capture"($P11, "op")
    goto rxcap945_done2466
  rxcap945_fail2467:
    goto rx943_fail2459
  rxcap945_done2466:
    nqp_rxmark rx943_bstack, rxquantr947_done2471, rx943_pos, 0
  rxquantr947_loop2470:
    repr_bind_attr_int rx943_cur, rx943_curclass, "$!pos", rx943_pos
    $P11 = rx943_cur."args"()
    repr_get_attr_int $I11, $P11, rx943_curclass, "$!pos"
    lt $I11, 0, rx943_fail2459
    goto rxsubrule948_pass2472
  rxsubrule948_back2473:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx943_curclass, "$!pos"
    lt $I11, 0, rx943_fail2459
  rxsubrule948_pass2472:
    rx943_cstack = rx943_cur."!cursor_capture"($P11, "args")
    set_addr $I11, rxsubrule948_back2473
    push rx943_bstack, $I11
    push rx943_bstack, 0
    push rx943_bstack, rx943_pos
    elements $I11, rx943_cstack
    push rx943_bstack, $I11
    repr_get_attr_int rx943_pos, $P11, rx943_curclass, "$!pos"
    nqp_rxpeek $I19, rx943_bstack, rxquantr947_done2471
    inc $I19
    inc $I19
    set rx943_rep, rx943_bstack[$I19]
    nqp_rxcommit rx943_bstack, rxquantr947_done2471
    inc rx943_rep
  rxquantr947_done2471:
    rx943_cur."!cursor_pass"(rx943_pos, "term:sym<pir::op>", 'backtrack'=>1)
    .return (rx943_cur)
  rx943_restart2458:
    repr_get_attr_obj rx943_cstack, rx943_cur, rx943_curclass, "$!cstack"
  rx943_fail2459:
    unless rx943_bstack, rx943_done2457
    pop $I19, rx943_bstack
    if_null rx943_cstack, rx943_cstack_done2462
    unless rx943_cstack, rx943_cstack_done2462
    dec $I19
    set $P11, rx943_cstack[$I19]
  rx943_cstack_done2462:
    pop rx943_rep, rx943_bstack
    pop rx943_pos, rx943_bstack
    pop $I19, rx943_bstack
    lt rx943_pos, -1, rx943_done2457
    lt rx943_pos, 0, rx943_fail2459
    eq $I19, 0, rx943_fail2459
    nqp_islist $I20, rx943_cstack
    unless $I20, rx943_jump2460
    elements $I18, rx943_bstack
    le $I18, 0, rx943_cut2461
    dec $I18
    set $I18, rx943_bstack[$I18]
  rx943_cut2461:
    assign rx943_cstack, $I18
  rx943_jump2460:
    jump $I19
  rx943_done2457:
    rx943_cur."!cursor_fail"()
    .return (rx943_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::const>" :subid("cuid_143_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1205
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx949_tgt
    .local int rx949_pos
    .local int rx949_off
    .local int rx949_eos
    .local int rx949_rep
    .local pmc rx949_cur
    .local pmc rx949_curclass
    .local pmc rx949_bstack
    .local pmc rx949_cstack
    (rx949_cur, rx949_tgt, rx949_pos, rx949_curclass, rx949_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx949_cur
    length rx949_eos, rx949_tgt
    eq $I19, 1, rx949_restart2476
    gt rx949_pos, rx949_eos, rx949_fail2477
    repr_get_attr_int $I11, self, rx949_curclass, "$!from"
    ne $I11, -1, rxscan950_done2483
    goto rxscan950_scan2482
  rxscan950_loop2481:
    inc rx949_pos
    gt rx949_pos, rx949_eos, rx949_fail2477
    repr_bind_attr_int rx949_cur, rx949_curclass, "$!from", rx949_pos
  rxscan950_scan2482:
    nqp_rxmark rx949_bstack, rxscan950_loop2481, rx949_pos, 0
  rxscan950_done2483:
    add $I11, rx949_pos, 12
    gt $I11, rx949_eos, rx949_fail2477
    substr $S10, rx949_tgt, rx949_pos, 12
    ne $S10, ucs4:"pir::const::", rx949_fail2477
    add rx949_pos, 12
    nqp_rxmark rx949_bstack, rxcap951_fail2485, rx949_pos, 0
    nqp_rxmark rx949_bstack, rxquantr952_done2487, -1, 0
  rxquantr952_loop2486:
    ge rx949_pos, rx949_eos, rx949_fail2477
    is_cclass $I11, .CCLASS_WORD, rx949_tgt, rx949_pos
    unless $I11, rx949_fail2477
    add rx949_pos, 1
    nqp_rxpeek $I19, rx949_bstack, rxquantr952_done2487
    inc $I19
    inc $I19
    set rx949_rep, rx949_bstack[$I19]
    nqp_rxcommit rx949_bstack, rxquantr952_done2487
    inc rx949_rep
    nqp_rxmark rx949_bstack, rxquantr952_done2487, rx949_pos, rx949_rep
    goto rxquantr952_loop2486
  rxquantr952_done2487:
    nqp_rxpeek $I19, rx949_bstack, rxcap951_fail2485
    inc $I19
    set $I11, rx949_bstack[$I19]
    repr_bind_attr_int rx949_cur, rx949_curclass, "$!pos", rx949_pos
    $P11 = rx949_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx949_pos)
    rx949_cstack = rx949_cur."!cursor_capture"($P11, "const")
    goto rxcap951_done2484
  rxcap951_fail2485:
    goto rx949_fail2477
  rxcap951_done2484:
    rx949_cur."!cursor_pass"(rx949_pos, "term:sym<pir::const>", 'backtrack'=>1)
    .return (rx949_cur)
  rx949_restart2476:
    repr_get_attr_obj rx949_cstack, rx949_cur, rx949_curclass, "$!cstack"
  rx949_fail2477:
    unless rx949_bstack, rx949_done2475
    pop $I19, rx949_bstack
    if_null rx949_cstack, rx949_cstack_done2480
    unless rx949_cstack, rx949_cstack_done2480
    dec $I19
    set $P11, rx949_cstack[$I19]
  rx949_cstack_done2480:
    pop rx949_rep, rx949_bstack
    pop rx949_pos, rx949_bstack
    pop $I19, rx949_bstack
    lt rx949_pos, -1, rx949_done2475
    lt rx949_pos, 0, rx949_fail2477
    eq $I19, 0, rx949_fail2477
    nqp_islist $I20, rx949_cstack
    unless $I20, rx949_jump2478
    elements $I18, rx949_bstack
    le $I18, 0, rx949_cut2479
    dec $I18
    set $I18, rx949_bstack[$I18]
  rx949_cut2479:
    assign rx949_cstack, $I18
  rx949_jump2478:
    jump $I19
  rx949_done2475:
    rx949_cur."!cursor_fail"()
    .return (rx949_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<nqp::op>" :subid("cuid_144_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1209
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx953_tgt
    .local int rx953_pos
    .local int rx953_off
    .local int rx953_eos
    .local int rx953_rep
    .local pmc rx953_cur
    .local pmc rx953_curclass
    .local pmc rx953_bstack
    .local pmc rx953_cstack
    (rx953_cur, rx953_tgt, rx953_pos, rx953_curclass, rx953_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx953_cur
    length rx953_eos, rx953_tgt
    eq $I19, 1, rx953_restart2490
    gt rx953_pos, rx953_eos, rx953_fail2491
    repr_get_attr_int $I11, self, rx953_curclass, "$!from"
    ne $I11, -1, rxscan954_done2497
    goto rxscan954_scan2496
  rxscan954_loop2495:
    inc rx953_pos
    gt rx953_pos, rx953_eos, rx953_fail2491
    repr_bind_attr_int rx953_cur, rx953_curclass, "$!from", rx953_pos
  rxscan954_scan2496:
    nqp_rxmark rx953_bstack, rxscan954_loop2495, rx953_pos, 0
  rxscan954_done2497:
    add $I11, rx953_pos, 5
    gt $I11, rx953_eos, rx953_fail2491
    substr $S10, rx953_tgt, rx953_pos, 5
    ne $S10, ucs4:"nqp::", rx953_fail2491
    add rx953_pos, 5
    nqp_rxmark rx953_bstack, rxcap955_fail2499, rx953_pos, 0
    nqp_rxmark rx953_bstack, rxquantr956_done2501, -1, 0
  rxquantr956_loop2500:
    ge rx953_pos, rx953_eos, rx953_fail2491
    is_cclass $I11, .CCLASS_WORD, rx953_tgt, rx953_pos
    unless $I11, rx953_fail2491
    add rx953_pos, 1
    nqp_rxpeek $I19, rx953_bstack, rxquantr956_done2501
    inc $I19
    inc $I19
    set rx953_rep, rx953_bstack[$I19]
    nqp_rxcommit rx953_bstack, rxquantr956_done2501
    inc rx953_rep
    nqp_rxmark rx953_bstack, rxquantr956_done2501, rx953_pos, rx953_rep
    goto rxquantr956_loop2500
  rxquantr956_done2501:
    nqp_rxpeek $I19, rx953_bstack, rxcap955_fail2499
    inc $I19
    set $I11, rx953_bstack[$I19]
    repr_bind_attr_int rx953_cur, rx953_curclass, "$!pos", rx953_pos
    $P11 = rx953_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx953_pos)
    rx953_cstack = rx953_cur."!cursor_capture"($P11, "op")
    goto rxcap955_done2498
  rxcap955_fail2499:
    goto rx953_fail2491
  rxcap955_done2498:
    nqp_rxmark rx953_bstack, rxquantr957_done2503, rx953_pos, 0
  rxquantr957_loop2502:
    repr_bind_attr_int rx953_cur, rx953_curclass, "$!pos", rx953_pos
    $P11 = rx953_cur."args"()
    repr_get_attr_int $I11, $P11, rx953_curclass, "$!pos"
    lt $I11, 0, rx953_fail2491
    goto rxsubrule958_pass2504
  rxsubrule958_back2505:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx953_curclass, "$!pos"
    lt $I11, 0, rx953_fail2491
  rxsubrule958_pass2504:
    rx953_cstack = rx953_cur."!cursor_capture"($P11, "args")
    set_addr $I11, rxsubrule958_back2505
    push rx953_bstack, $I11
    push rx953_bstack, 0
    push rx953_bstack, rx953_pos
    elements $I11, rx953_cstack
    push rx953_bstack, $I11
    repr_get_attr_int rx953_pos, $P11, rx953_curclass, "$!pos"
    nqp_rxpeek $I19, rx953_bstack, rxquantr957_done2503
    inc $I19
    inc $I19
    set rx953_rep, rx953_bstack[$I19]
    nqp_rxcommit rx953_bstack, rxquantr957_done2503
    inc rx953_rep
  rxquantr957_done2503:
    rx953_cur."!cursor_pass"(rx953_pos, "term:sym<nqp::op>", 'backtrack'=>1)
    .return (rx953_cur)
  rx953_restart2490:
    repr_get_attr_obj rx953_cstack, rx953_cur, rx953_curclass, "$!cstack"
  rx953_fail2491:
    unless rx953_bstack, rx953_done2489
    pop $I19, rx953_bstack
    if_null rx953_cstack, rx953_cstack_done2494
    unless rx953_cstack, rx953_cstack_done2494
    dec $I19
    set $P11, rx953_cstack[$I19]
  rx953_cstack_done2494:
    pop rx953_rep, rx953_bstack
    pop rx953_pos, rx953_bstack
    pop $I19, rx953_bstack
    lt rx953_pos, -1, rx953_done2489
    lt rx953_pos, 0, rx953_fail2491
    eq $I19, 0, rx953_fail2491
    nqp_islist $I20, rx953_cstack
    unless $I20, rx953_jump2492
    elements $I18, rx953_bstack
    le $I18, 0, rx953_cut2493
    dec $I18
    set $I18, rx953_bstack[$I18]
  rx953_cut2493:
    assign rx953_cstack, $I18
  rx953_jump2492:
    jump $I19
  rx953_done2489:
    rx953_cur."!cursor_fail"()
    .return (rx953_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<onlystar>" :subid("cuid_145_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1213
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_406_1358115338.889' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx959_tgt
    .local int rx959_pos
    .local int rx959_off
    .local int rx959_eos
    .local int rx959_rep
    .local pmc rx959_cur
    .local pmc rx959_curclass
    .local pmc rx959_bstack
    .local pmc rx959_cstack
    (rx959_cur, rx959_tgt, rx959_pos, rx959_curclass, rx959_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx959_cur
    length rx959_eos, rx959_tgt
    eq $I19, 1, rx959_restart2508
    gt rx959_pos, rx959_eos, rx959_fail2509
    repr_get_attr_int $I11, self, rx959_curclass, "$!from"
    ne $I11, -1, rxscan960_done2515
    goto rxscan960_scan2514
  rxscan960_loop2513:
    inc rx959_pos
    gt rx959_pos, rx959_eos, rx959_fail2509
    repr_bind_attr_int rx959_cur, rx959_curclass, "$!from", rx959_pos
  rxscan960_scan2514:
    nqp_rxmark rx959_bstack, rxscan960_loop2513, rx959_pos, 0
  rxscan960_done2515:
    add $I11, rx959_pos, 3
    gt $I11, rx959_eos, rx959_fail2509
    substr $S10, rx959_tgt, rx959_pos, 3
    ne $S10, ucs4:"{*}", rx959_fail2509
    add rx959_pos, 3
    repr_bind_attr_int rx959_cur, rx959_curclass, "$!pos", rx959_pos
    $P11 = rx959_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx959_curclass, "$!pos"
    lt $I11, 0, rx959_fail2509
  alt961_02517:
    nqp_rxmark rx959_bstack, alt961_12521, rx959_pos, 0
    repr_bind_attr_int rx959_cur, rx959_curclass, "$!pos", rx959_pos
    store_lex unicode:"$\x{a2}", rx959_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_406_1358115338.889' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx959_fail2509
    goto alt961_end2516
  alt961_12521:
    repr_bind_attr_int rx959_cur, rx959_curclass, "$!pos", rx959_pos
    $P11 = rx959_cur."panic"("{*} may only appear in proto")
    repr_get_attr_int $I11, $P11, rx959_curclass, "$!pos"
    lt $I11, 0, rx959_fail2509
    repr_get_attr_int rx959_pos, $P11, rx959_curclass, "$!pos"
  alt961_end2516:
    rx959_cur."!cursor_pass"(rx959_pos, "term:sym<onlystar>", 'backtrack'=>1)
    .return (rx959_cur)
  rx959_restart2508:
    repr_get_attr_obj rx959_cstack, rx959_cur, rx959_curclass, "$!cstack"
  rx959_fail2509:
    unless rx959_bstack, rx959_done2507
    pop $I19, rx959_bstack
    if_null rx959_cstack, rx959_cstack_done2512
    unless rx959_cstack, rx959_cstack_done2512
    dec $I19
    set $P11, rx959_cstack[$I19]
  rx959_cstack_done2512:
    pop rx959_rep, rx959_bstack
    pop rx959_pos, rx959_bstack
    pop $I19, rx959_bstack
    lt rx959_pos, -1, rx959_done2507
    lt rx959_pos, 0, rx959_fail2509
    eq $I19, 0, rx959_fail2509
    nqp_islist $I20, rx959_cstack
    unless $I20, rx959_jump2510
    elements $I18, rx959_bstack
    le $I18, 0, rx959_cut2511
    dec $I18
    set $I18, rx959_bstack[$I18]
  rx959_cut2511:
    assign rx959_cstack, $I18
  rx959_jump2510:
    jump $I19
  rx959_done2507:
    rx959_cur."!cursor_fail"()
    .return (rx959_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_406_1358115338.889") :anon :lex :outer("cuid_145_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1215

    find_dynamic_lex $P5001, "$*MULTINESS"
    unless_null $P5001, fallback2518
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$MULTINESS"]
    unless_null $P5002, fallback2519
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5005
  fallback2519:
    unless_null $P5002, vivi_9622520
    die "Contextual $*MULTINESS not found"
    box $P5006, "Contextual $*MULTINESS not found"
    set $P5002, $P5006
  vivi_9622520:
    set $P5001, $P5002
  fallback2518:
    set $S5001, $P5001
    iseq $I5001, $S5001, "proto"
    .return ($I5001) 
.end
.HLL "nqp"
.namespace []
.sub "args" :subid("cuid_146_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1218
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx964_tgt
    .local int rx964_pos
    .local int rx964_off
    .local int rx964_eos
    .local int rx964_rep
    .local pmc rx964_cur
    .local pmc rx964_curclass
    .local pmc rx964_bstack
    .local pmc rx964_cstack
    (rx964_cur, rx964_tgt, rx964_pos, rx964_curclass, rx964_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx964_cur
    length rx964_eos, rx964_tgt
    eq $I19, 1, rx964_restart2525
    gt rx964_pos, rx964_eos, rx964_fail2526
    repr_get_attr_int $I11, self, rx964_curclass, "$!from"
    ne $I11, -1, rxscan965_done2532
    goto rxscan965_scan2531
  rxscan965_loop2530:
    inc rx964_pos
    gt rx964_pos, rx964_eos, rx964_fail2526
    repr_bind_attr_int rx964_cur, rx964_curclass, "$!from", rx964_pos
  rxscan965_scan2531:
    nqp_rxmark rx964_bstack, rxscan965_loop2530, rx964_pos, 0
  rxscan965_done2532:
    add $I11, rx964_pos, 1
    gt $I11, rx964_eos, rx964_fail2526
    substr $S10, rx964_tgt, rx964_pos, 1
    ne $S10, ucs4:"(", rx964_fail2526
    add rx964_pos, 1
    repr_bind_attr_int rx964_cur, rx964_curclass, "$!pos", rx964_pos
    $P11 = rx964_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx964_curclass, "$!pos"
    lt $I11, 0, rx964_fail2526
    nqp_rxmark rx964_bstack, rxsubrule966_pass2533, -1, 0
  rxsubrule966_pass2533:
    rx964_cstack = rx964_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx964_pos, $P11, rx964_curclass, "$!pos"
    add $I11, rx964_pos, 1
    gt $I11, rx964_eos, rx964_fail2526
    substr $S10, rx964_tgt, rx964_pos, 1
    ne $S10, ucs4:")", rx964_fail2526
    add rx964_pos, 1
    rx964_cur."!cursor_pass"(rx964_pos, "args", 'backtrack'=>1)
    .return (rx964_cur)
  rx964_restart2525:
    repr_get_attr_obj rx964_cstack, rx964_cur, rx964_curclass, "$!cstack"
  rx964_fail2526:
    unless rx964_bstack, rx964_done2524
    pop $I19, rx964_bstack
    if_null rx964_cstack, rx964_cstack_done2529
    unless rx964_cstack, rx964_cstack_done2529
    dec $I19
    set $P11, rx964_cstack[$I19]
  rx964_cstack_done2529:
    pop rx964_rep, rx964_bstack
    pop rx964_pos, rx964_bstack
    pop $I19, rx964_bstack
    lt rx964_pos, -1, rx964_done2524
    lt rx964_pos, 0, rx964_fail2526
    eq $I19, 0, rx964_fail2526
    nqp_islist $I20, rx964_cstack
    unless $I20, rx964_jump2527
    elements $I18, rx964_bstack
    le $I18, 0, rx964_cut2528
    dec $I18
    set $I18, rx964_bstack[$I18]
  rx964_cut2528:
    assign rx964_cstack, $I18
  rx964_jump2527:
    jump $I19
  rx964_done2524:
    rx964_cur."!cursor_fail"()
    .return (rx964_cur) 
.end
.HLL "nqp"
.namespace []
.sub "arglist" :subid("cuid_147_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1222
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx967_tgt
    .local int rx967_pos
    .local int rx967_off
    .local int rx967_eos
    .local int rx967_rep
    .local pmc rx967_cur
    .local pmc rx967_curclass
    .local pmc rx967_bstack
    .local pmc rx967_cstack
    (rx967_cur, rx967_tgt, rx967_pos, rx967_curclass, rx967_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx967_cur
    length rx967_eos, rx967_tgt
    eq $I19, 1, rx967_restart2536
    gt rx967_pos, rx967_eos, rx967_fail2537
    repr_get_attr_int $I11, self, rx967_curclass, "$!from"
    ne $I11, -1, rxscan968_done2543
    goto rxscan968_scan2542
  rxscan968_loop2541:
    inc rx967_pos
    gt rx967_pos, rx967_eos, rx967_fail2537
    repr_bind_attr_int rx967_cur, rx967_curclass, "$!from", rx967_pos
  rxscan968_scan2542:
    nqp_rxmark rx967_bstack, rxscan968_loop2541, rx967_pos, 0
  rxscan968_done2543:
    repr_bind_attr_int rx967_cur, rx967_curclass, "$!pos", rx967_pos
    $P11 = rx967_cur."ws"()
    repr_get_attr_int $I11, $P11, rx967_curclass, "$!pos"
    lt $I11, 0, rx967_fail2537
    repr_get_attr_int rx967_pos, $P11, rx967_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt970_02546
    nqp_push_label $P11, alt970_12548
    nqp_rxmark rx967_bstack, alt970_end2545, -1, 0
    rx967_cur."!alt"(rx967_pos, "alt_nfa__36_1358115341.301", $P11)
    goto rx967_fail2537
  alt970_02546:
    repr_bind_attr_int rx967_cur, rx967_curclass, "$!pos", rx967_pos
    $P11 = rx967_cur."EXPR"("f=")
    repr_get_attr_int $I11, $P11, rx967_curclass, "$!pos"
    lt $I11, 0, rx967_fail2537
    nqp_rxmark rx967_bstack, rxsubrule971_pass2547, -1, 0
  rxsubrule971_pass2547:
    rx967_cstack = rx967_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx967_pos, $P11, rx967_curclass, "$!pos"
    goto alt970_end2545
  alt970_12548:
    goto alt970_end2545
  alt970_end2545:
    nqp_rxcommit rx967_bstack, alt970_end2545
    rx967_cur."!cursor_pass"(rx967_pos, "arglist", 'backtrack'=>1)
    .return (rx967_cur)
  rx967_restart2536:
    repr_get_attr_obj rx967_cstack, rx967_cur, rx967_curclass, "$!cstack"
  rx967_fail2537:
    unless rx967_bstack, rx967_done2535
    pop $I19, rx967_bstack
    if_null rx967_cstack, rx967_cstack_done2540
    unless rx967_cstack, rx967_cstack_done2540
    dec $I19
    set $P11, rx967_cstack[$I19]
  rx967_cstack_done2540:
    pop rx967_rep, rx967_bstack
    pop rx967_pos, rx967_bstack
    pop $I19, rx967_bstack
    lt rx967_pos, -1, rx967_done2535
    lt rx967_pos, 0, rx967_fail2537
    eq $I19, 0, rx967_fail2537
    nqp_islist $I20, rx967_cstack
    unless $I20, rx967_jump2538
    elements $I18, rx967_bstack
    le $I18, 0, rx967_cut2539
    dec $I18
    set $I18, rx967_bstack[$I18]
  rx967_cut2539:
    assign rx967_cstack, $I18
  rx967_jump2538:
    jump $I19
  rx967_done2535:
    rx967_cur."!cursor_fail"()
    .return (rx967_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<value>" :subid("cuid_148_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1231
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx973_tgt
    .local int rx973_pos
    .local int rx973_off
    .local int rx973_eos
    .local int rx973_rep
    .local pmc rx973_cur
    .local pmc rx973_curclass
    .local pmc rx973_bstack
    .local pmc rx973_cstack
    (rx973_cur, rx973_tgt, rx973_pos, rx973_curclass, rx973_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx973_cur
    length rx973_eos, rx973_tgt
    eq $I19, 1, rx973_restart2552
    gt rx973_pos, rx973_eos, rx973_fail2553
    repr_get_attr_int $I11, self, rx973_curclass, "$!from"
    ne $I11, -1, rxscan974_done2559
    goto rxscan974_scan2558
  rxscan974_loop2557:
    inc rx973_pos
    gt rx973_pos, rx973_eos, rx973_fail2553
    repr_bind_attr_int rx973_cur, rx973_curclass, "$!from", rx973_pos
  rxscan974_scan2558:
    nqp_rxmark rx973_bstack, rxscan974_loop2557, rx973_pos, 0
  rxscan974_done2559:
    repr_bind_attr_int rx973_cur, rx973_curclass, "$!pos", rx973_pos
    $P11 = rx973_cur."value"()
    repr_get_attr_int $I11, $P11, rx973_curclass, "$!pos"
    lt $I11, 0, rx973_fail2553
    nqp_rxmark rx973_bstack, rxsubrule975_pass2560, -1, 0
  rxsubrule975_pass2560:
    rx973_cstack = rx973_cur."!cursor_capture"($P11, "value")
    repr_get_attr_int rx973_pos, $P11, rx973_curclass, "$!pos"
    rx973_cur."!cursor_pass"(rx973_pos, "term:sym<value>", 'backtrack'=>1)
    .return (rx973_cur)
  rx973_restart2552:
    repr_get_attr_obj rx973_cstack, rx973_cur, rx973_curclass, "$!cstack"
  rx973_fail2553:
    unless rx973_bstack, rx973_done2551
    pop $I19, rx973_bstack
    if_null rx973_cstack, rx973_cstack_done2556
    unless rx973_cstack, rx973_cstack_done2556
    dec $I19
    set $P11, rx973_cstack[$I19]
  rx973_cstack_done2556:
    pop rx973_rep, rx973_bstack
    pop rx973_pos, rx973_bstack
    pop $I19, rx973_bstack
    lt rx973_pos, -1, rx973_done2551
    lt rx973_pos, 0, rx973_fail2553
    eq $I19, 0, rx973_fail2553
    nqp_islist $I20, rx973_cstack
    unless $I20, rx973_jump2554
    elements $I18, rx973_bstack
    le $I18, 0, rx973_cut2555
    dec $I18
    set $I18, rx973_bstack[$I18]
  rx973_cut2555:
    assign rx973_cstack, $I18
  rx973_jump2554:
    jump $I19
  rx973_done2551:
    rx973_cur."!cursor_fail"()
    .return (rx973_cur) 
.end
.HLL "nqp"
.namespace []
.sub "value" :subid("cuid_149_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1233
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx976_tgt
    .local int rx976_pos
    .local int rx976_off
    .local int rx976_eos
    .local int rx976_rep
    .local pmc rx976_cur
    .local pmc rx976_curclass
    .local pmc rx976_bstack
    .local pmc rx976_cstack
    (rx976_cur, rx976_tgt, rx976_pos, rx976_curclass, rx976_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx976_cur
    length rx976_eos, rx976_tgt
    eq $I19, 1, rx976_restart2563
    gt rx976_pos, rx976_eos, rx976_fail2564
    repr_get_attr_int $I11, self, rx976_curclass, "$!from"
    ne $I11, -1, rxscan977_done2570
    goto rxscan977_scan2569
  rxscan977_loop2568:
    inc rx976_pos
    gt rx976_pos, rx976_eos, rx976_fail2564
    repr_bind_attr_int rx976_cur, rx976_curclass, "$!from", rx976_pos
  rxscan977_scan2569:
    nqp_rxmark rx976_bstack, rxscan977_loop2568, rx976_pos, 0
  rxscan977_done2570:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt978_02572
    nqp_push_label $P11, alt978_12574
    nqp_rxmark rx976_bstack, alt978_end2571, -1, 0
    rx976_cur."!alt"(rx976_pos, "alt_nfa__37_1358115341.31", $P11)
    goto rx976_fail2564
  alt978_02572:
    repr_bind_attr_int rx976_cur, rx976_curclass, "$!pos", rx976_pos
    $P11 = rx976_cur."quote"()
    repr_get_attr_int $I11, $P11, rx976_curclass, "$!pos"
    lt $I11, 0, rx976_fail2564
    nqp_rxmark rx976_bstack, rxsubrule979_pass2573, -1, 0
  rxsubrule979_pass2573:
    rx976_cstack = rx976_cur."!cursor_capture"($P11, "quote")
    repr_get_attr_int rx976_pos, $P11, rx976_curclass, "$!pos"
    goto alt978_end2571
  alt978_12574:
    repr_bind_attr_int rx976_cur, rx976_curclass, "$!pos", rx976_pos
    $P11 = rx976_cur."number"()
    repr_get_attr_int $I11, $P11, rx976_curclass, "$!pos"
    lt $I11, 0, rx976_fail2564
    nqp_rxmark rx976_bstack, rxsubrule980_pass2575, -1, 0
  rxsubrule980_pass2575:
    rx976_cstack = rx976_cur."!cursor_capture"($P11, "number")
    repr_get_attr_int rx976_pos, $P11, rx976_curclass, "$!pos"
    goto alt978_end2571
  alt978_end2571:
    rx976_cur."!cursor_pass"(rx976_pos, "value", 'backtrack'=>1)
    .return (rx976_cur)
  rx976_restart2563:
    repr_get_attr_obj rx976_cstack, rx976_cur, rx976_curclass, "$!cstack"
  rx976_fail2564:
    unless rx976_bstack, rx976_done2562
    pop $I19, rx976_bstack
    if_null rx976_cstack, rx976_cstack_done2567
    unless rx976_cstack, rx976_cstack_done2567
    dec $I19
    set $P11, rx976_cstack[$I19]
  rx976_cstack_done2567:
    pop rx976_rep, rx976_bstack
    pop rx976_pos, rx976_bstack
    pop $I19, rx976_bstack
    lt rx976_pos, -1, rx976_done2562
    lt rx976_pos, 0, rx976_fail2564
    eq $I19, 0, rx976_fail2564
    nqp_islist $I20, rx976_cstack
    unless $I20, rx976_jump2565
    elements $I18, rx976_bstack
    le $I18, 0, rx976_cut2566
    dec $I18
    set $I18, rx976_bstack[$I18]
  rx976_cut2566:
    assign rx976_cstack, $I18
  rx976_jump2565:
    jump $I19
  rx976_done2562:
    rx976_cur."!cursor_fail"()
    .return (rx976_cur) 
.end
.HLL "nqp"
.namespace []
.sub "number" :subid("cuid_150_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1238
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx981_tgt
    .local int rx981_pos
    .local int rx981_off
    .local int rx981_eos
    .local int rx981_rep
    .local pmc rx981_cur
    .local pmc rx981_curclass
    .local pmc rx981_bstack
    .local pmc rx981_cstack
    (rx981_cur, rx981_tgt, rx981_pos, rx981_curclass, rx981_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx981_cur
    length rx981_eos, rx981_tgt
    eq $I19, 1, rx981_restart2578
    gt rx981_pos, rx981_eos, rx981_fail2579
    repr_get_attr_int $I11, self, rx981_curclass, "$!from"
    ne $I11, -1, rxscan982_done2585
    goto rxscan982_scan2584
  rxscan982_loop2583:
    inc rx981_pos
    gt rx981_pos, rx981_eos, rx981_fail2579
    repr_bind_attr_int rx981_cur, rx981_curclass, "$!from", rx981_pos
  rxscan982_scan2584:
    nqp_rxmark rx981_bstack, rxscan982_loop2583, rx981_pos, 0
  rxscan982_done2585:
    nqp_rxmark rx981_bstack, rxcap983_fail2587, rx981_pos, 0
    nqp_rxmark rx981_bstack, rxquantr984_done2589, rx981_pos, 0
  rxquantr984_loop2588:
  alt985_02591:
    nqp_rxmark rx981_bstack, alt985_12592, rx981_pos, 0
    add $I11, rx981_pos, 1
    gt $I11, rx981_eos, rx981_fail2579
    substr $S10, rx981_tgt, rx981_pos, 1
    ne $S10, ucs4:"-", rx981_fail2579
    add rx981_pos, 1
    goto alt985_end2590
  alt985_12592:
    ge rx981_pos, rx981_eos, rx981_fail2579
    substr $S11, rx981_tgt, rx981_pos, 1
    index $I11, ucs4:"+", $S11
    lt $I11, 0, rx981_fail2579
    inc rx981_pos
  alt985_end2590:
    nqp_rxpeek $I19, rx981_bstack, rxquantr984_done2589
    inc $I19
    inc $I19
    set rx981_rep, rx981_bstack[$I19]
    nqp_rxcommit rx981_bstack, rxquantr984_done2589
    inc rx981_rep
  rxquantr984_done2589:
    nqp_rxpeek $I19, rx981_bstack, rxcap983_fail2587
    inc $I19
    set $I11, rx981_bstack[$I19]
    repr_bind_attr_int rx981_cur, rx981_curclass, "$!pos", rx981_pos
    $P11 = rx981_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx981_pos)
    rx981_cstack = rx981_cur."!cursor_capture"($P11, "sign")
    goto rxcap983_done2586
  rxcap983_fail2587:
    goto rx981_fail2579
  rxcap983_done2586:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt986_02594
    nqp_push_label $P11, alt986_12596
    nqp_rxmark rx981_bstack, alt986_end2593, -1, 0
    rx981_cur."!alt"(rx981_pos, "alt_nfa__38_1358115341.319", $P11)
    goto rx981_fail2579
  alt986_02594:
    repr_bind_attr_int rx981_cur, rx981_curclass, "$!pos", rx981_pos
    $P11 = rx981_cur."dec_number"()
    repr_get_attr_int $I11, $P11, rx981_curclass, "$!pos"
    lt $I11, 0, rx981_fail2579
    nqp_rxmark rx981_bstack, rxsubrule987_pass2595, -1, 0
  rxsubrule987_pass2595:
    rx981_cstack = rx981_cur."!cursor_capture"($P11, "dec_number")
    repr_get_attr_int rx981_pos, $P11, rx981_curclass, "$!pos"
    goto alt986_end2593
  alt986_12596:
    repr_bind_attr_int rx981_cur, rx981_curclass, "$!pos", rx981_pos
    $P11 = rx981_cur."integer"()
    repr_get_attr_int $I11, $P11, rx981_curclass, "$!pos"
    lt $I11, 0, rx981_fail2579
    nqp_rxmark rx981_bstack, rxsubrule988_pass2597, -1, 0
  rxsubrule988_pass2597:
    rx981_cstack = rx981_cur."!cursor_capture"($P11, "integer")
    repr_get_attr_int rx981_pos, $P11, rx981_curclass, "$!pos"
    goto alt986_end2593
  alt986_end2593:
    nqp_rxcommit rx981_bstack, alt986_end2593
    rx981_cur."!cursor_pass"(rx981_pos, "number", 'backtrack'=>1)
    .return (rx981_cur)
  rx981_restart2578:
    repr_get_attr_obj rx981_cstack, rx981_cur, rx981_curclass, "$!cstack"
  rx981_fail2579:
    unless rx981_bstack, rx981_done2577
    pop $I19, rx981_bstack
    if_null rx981_cstack, rx981_cstack_done2582
    unless rx981_cstack, rx981_cstack_done2582
    dec $I19
    set $P11, rx981_cstack[$I19]
  rx981_cstack_done2582:
    pop rx981_rep, rx981_bstack
    pop rx981_pos, rx981_bstack
    pop $I19, rx981_bstack
    lt rx981_pos, -1, rx981_done2577
    lt rx981_pos, 0, rx981_fail2579
    eq $I19, 0, rx981_fail2579
    nqp_islist $I20, rx981_cstack
    unless $I20, rx981_jump2580
    elements $I18, rx981_bstack
    le $I18, 0, rx981_cut2581
    dec $I18
    set $I18, rx981_bstack[$I18]
  rx981_cut2581:
    assign rx981_cstack, $I18
  rx981_jump2580:
    jump $I19
  rx981_done2577:
    rx981_cur."!cursor_fail"()
    .return (rx981_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote" :subid("cuid_151_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1243
    .param pmc self 
    $P5001 = self."!protoregex"("quote")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<apos>" :subid("cuid_152_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1244
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx989_tgt
    .local int rx989_pos
    .local int rx989_off
    .local int rx989_eos
    .local int rx989_rep
    .local pmc rx989_cur
    .local pmc rx989_curclass
    .local pmc rx989_bstack
    .local pmc rx989_cstack
    (rx989_cur, rx989_tgt, rx989_pos, rx989_curclass, rx989_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx989_cur
    length rx989_eos, rx989_tgt
    eq $I19, 1, rx989_restart2600
    gt rx989_pos, rx989_eos, rx989_fail2601
    repr_get_attr_int $I11, self, rx989_curclass, "$!from"
    ne $I11, -1, rxscan990_done2607
    goto rxscan990_scan2606
  rxscan990_loop2605:
    inc rx989_pos
    gt rx989_pos, rx989_eos, rx989_fail2601
    repr_bind_attr_int rx989_cur, rx989_curclass, "$!from", rx989_pos
  rxscan990_scan2606:
    nqp_rxmark rx989_bstack, rxscan990_loop2605, rx989_pos, 0
  rxscan990_done2607:
    ge rx989_pos, rx989_eos, rx989_fail2601
    substr $S11, rx989_tgt, rx989_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx989_fail2601
    repr_bind_attr_int rx989_cur, rx989_curclass, "$!pos", rx989_pos
    $P11 = rx989_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx989_curclass, "$!pos"
    lt $I11, 0, rx989_fail2601
    nqp_rxmark rx989_bstack, rxsubrule991_pass2608, -1, 0
  rxsubrule991_pass2608:
    rx989_cstack = rx989_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx989_pos, $P11, rx989_curclass, "$!pos"
    rx989_cur."!cursor_pass"(rx989_pos, "quote:sym<apos>", 'backtrack'=>1)
    .return (rx989_cur)
  rx989_restart2600:
    repr_get_attr_obj rx989_cstack, rx989_cur, rx989_curclass, "$!cstack"
  rx989_fail2601:
    unless rx989_bstack, rx989_done2599
    pop $I19, rx989_bstack
    if_null rx989_cstack, rx989_cstack_done2604
    unless rx989_cstack, rx989_cstack_done2604
    dec $I19
    set $P11, rx989_cstack[$I19]
  rx989_cstack_done2604:
    pop rx989_rep, rx989_bstack
    pop rx989_pos, rx989_bstack
    pop $I19, rx989_bstack
    lt rx989_pos, -1, rx989_done2599
    lt rx989_pos, 0, rx989_fail2601
    eq $I19, 0, rx989_fail2601
    nqp_islist $I20, rx989_cstack
    unless $I20, rx989_jump2602
    elements $I18, rx989_bstack
    le $I18, 0, rx989_cut2603
    dec $I18
    set $I18, rx989_bstack[$I18]
  rx989_cut2603:
    assign rx989_cstack, $I18
  rx989_jump2602:
    jump $I19
  rx989_done2599:
    rx989_cur."!cursor_fail"()
    .return (rx989_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<dblq>" :subid("cuid_153_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1245
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx992_tgt
    .local int rx992_pos
    .local int rx992_off
    .local int rx992_eos
    .local int rx992_rep
    .local pmc rx992_cur
    .local pmc rx992_curclass
    .local pmc rx992_bstack
    .local pmc rx992_cstack
    (rx992_cur, rx992_tgt, rx992_pos, rx992_curclass, rx992_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx992_cur
    length rx992_eos, rx992_tgt
    eq $I19, 1, rx992_restart2611
    gt rx992_pos, rx992_eos, rx992_fail2612
    repr_get_attr_int $I11, self, rx992_curclass, "$!from"
    ne $I11, -1, rxscan993_done2618
    goto rxscan993_scan2617
  rxscan993_loop2616:
    inc rx992_pos
    gt rx992_pos, rx992_eos, rx992_fail2612
    repr_bind_attr_int rx992_cur, rx992_curclass, "$!from", rx992_pos
  rxscan993_scan2617:
    nqp_rxmark rx992_bstack, rxscan993_loop2616, rx992_pos, 0
  rxscan993_done2618:
    ge rx992_pos, rx992_eos, rx992_fail2612
    substr $S11, rx992_tgt, rx992_pos, 1
    index $I11, ucs4:"\"", $S11
    lt $I11, 0, rx992_fail2612
    repr_bind_attr_int rx992_cur, rx992_curclass, "$!pos", rx992_pos
    $P11 = rx992_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx992_curclass, "$!pos"
    lt $I11, 0, rx992_fail2612
    nqp_rxmark rx992_bstack, rxsubrule994_pass2619, -1, 0
  rxsubrule994_pass2619:
    rx992_cstack = rx992_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx992_pos, $P11, rx992_curclass, "$!pos"
    rx992_cur."!cursor_pass"(rx992_pos, "quote:sym<dblq>", 'backtrack'=>1)
    .return (rx992_cur)
  rx992_restart2611:
    repr_get_attr_obj rx992_cstack, rx992_cur, rx992_curclass, "$!cstack"
  rx992_fail2612:
    unless rx992_bstack, rx992_done2610
    pop $I19, rx992_bstack
    if_null rx992_cstack, rx992_cstack_done2615
    unless rx992_cstack, rx992_cstack_done2615
    dec $I19
    set $P11, rx992_cstack[$I19]
  rx992_cstack_done2615:
    pop rx992_rep, rx992_bstack
    pop rx992_pos, rx992_bstack
    pop $I19, rx992_bstack
    lt rx992_pos, -1, rx992_done2610
    lt rx992_pos, 0, rx992_fail2612
    eq $I19, 0, rx992_fail2612
    nqp_islist $I20, rx992_cstack
    unless $I20, rx992_jump2613
    elements $I18, rx992_bstack
    le $I18, 0, rx992_cut2614
    dec $I18
    set $I18, rx992_bstack[$I18]
  rx992_cut2614:
    assign rx992_cstack, $I18
  rx992_jump2613:
    jump $I19
  rx992_done2610:
    rx992_cur."!cursor_fail"()
    .return (rx992_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<q>" :subid("cuid_154_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1246
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx995_tgt
    .local int rx995_pos
    .local int rx995_off
    .local int rx995_eos
    .local int rx995_rep
    .local pmc rx995_cur
    .local pmc rx995_curclass
    .local pmc rx995_bstack
    .local pmc rx995_cstack
    (rx995_cur, rx995_tgt, rx995_pos, rx995_curclass, rx995_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx995_cur
    length rx995_eos, rx995_tgt
    eq $I19, 1, rx995_restart2622
    gt rx995_pos, rx995_eos, rx995_fail2623
    repr_get_attr_int $I11, self, rx995_curclass, "$!from"
    ne $I11, -1, rxscan996_done2629
    goto rxscan996_scan2628
  rxscan996_loop2627:
    inc rx995_pos
    gt rx995_pos, rx995_eos, rx995_fail2623
    repr_bind_attr_int rx995_cur, rx995_curclass, "$!from", rx995_pos
  rxscan996_scan2628:
    nqp_rxmark rx995_bstack, rxscan996_loop2627, rx995_pos, 0
  rxscan996_done2629:
    nqp_rxmark rx995_bstack, rxcap997_fail2631, rx995_pos, 0
    add $I11, rx995_pos, 1
    gt $I11, rx995_eos, rx995_fail2623
    substr $S10, rx995_tgt, rx995_pos, 1
    ne $S10, ucs4:"q", rx995_fail2623
    add rx995_pos, 1
    nqp_rxpeek $I19, rx995_bstack, rxcap997_fail2631
    inc $I19
    set $I11, rx995_bstack[$I19]
    repr_bind_attr_int rx995_cur, rx995_curclass, "$!pos", rx995_pos
    $P11 = rx995_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx995_pos)
    rx995_cstack = rx995_cur."!cursor_capture"($P11, "sym")
    goto rxcap997_done2630
  rxcap997_fail2631:
    goto rx995_fail2623
  rxcap997_done2630:
    le rx995_pos, 0, rx995_fail2623
    is_cclass $I11, .CCLASS_WORD, rx995_tgt, rx995_pos
    if $I11, rx995_fail2623
    sub $I11, rx995_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx995_tgt, $I11
    unless $I11, rx995_fail2623
    ge rx995_pos, rx995_eos, rx995_fail2623
    substr $S11, rx995_tgt, rx995_pos, 1
    index $I11, ucs4:"(", $S11
    ge $I11, 0, rx995_fail2623
    repr_bind_attr_int rx995_cur, rx995_curclass, "$!pos", rx995_pos
    $P11 = rx995_cur."ws"()
    repr_get_attr_int $I11, $P11, rx995_curclass, "$!pos"
    lt $I11, 0, rx995_fail2623
    repr_get_attr_int rx995_pos, $P11, rx995_curclass, "$!pos"
    repr_bind_attr_int rx995_cur, rx995_curclass, "$!pos", rx995_pos
    $P11 = rx995_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx995_curclass, "$!pos"
    lt $I11, 0, rx995_fail2623
    nqp_rxmark rx995_bstack, rxsubrule1000_pass2634, -1, 0
  rxsubrule1000_pass2634:
    rx995_cstack = rx995_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx995_pos, $P11, rx995_curclass, "$!pos"
    rx995_cur."!cursor_pass"(rx995_pos, "quote:sym<q>", 'backtrack'=>1)
    .return (rx995_cur)
  rx995_restart2622:
    repr_get_attr_obj rx995_cstack, rx995_cur, rx995_curclass, "$!cstack"
  rx995_fail2623:
    unless rx995_bstack, rx995_done2621
    pop $I19, rx995_bstack
    if_null rx995_cstack, rx995_cstack_done2626
    unless rx995_cstack, rx995_cstack_done2626
    dec $I19
    set $P11, rx995_cstack[$I19]
  rx995_cstack_done2626:
    pop rx995_rep, rx995_bstack
    pop rx995_pos, rx995_bstack
    pop $I19, rx995_bstack
    lt rx995_pos, -1, rx995_done2621
    lt rx995_pos, 0, rx995_fail2623
    eq $I19, 0, rx995_fail2623
    nqp_islist $I20, rx995_cstack
    unless $I20, rx995_jump2624
    elements $I18, rx995_bstack
    le $I18, 0, rx995_cut2625
    dec $I18
    set $I18, rx995_bstack[$I18]
  rx995_cut2625:
    assign rx995_cstack, $I18
  rx995_jump2624:
    jump $I19
  rx995_done2621:
    rx995_cur."!cursor_fail"()
    .return (rx995_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<qq>" :subid("cuid_155_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1247
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1001_tgt
    .local int rx1001_pos
    .local int rx1001_off
    .local int rx1001_eos
    .local int rx1001_rep
    .local pmc rx1001_cur
    .local pmc rx1001_curclass
    .local pmc rx1001_bstack
    .local pmc rx1001_cstack
    (rx1001_cur, rx1001_tgt, rx1001_pos, rx1001_curclass, rx1001_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1001_cur
    length rx1001_eos, rx1001_tgt
    eq $I19, 1, rx1001_restart2637
    gt rx1001_pos, rx1001_eos, rx1001_fail2638
    repr_get_attr_int $I11, self, rx1001_curclass, "$!from"
    ne $I11, -1, rxscan1002_done2644
    goto rxscan1002_scan2643
  rxscan1002_loop2642:
    inc rx1001_pos
    gt rx1001_pos, rx1001_eos, rx1001_fail2638
    repr_bind_attr_int rx1001_cur, rx1001_curclass, "$!from", rx1001_pos
  rxscan1002_scan2643:
    nqp_rxmark rx1001_bstack, rxscan1002_loop2642, rx1001_pos, 0
  rxscan1002_done2644:
    nqp_rxmark rx1001_bstack, rxcap1003_fail2646, rx1001_pos, 0
    add $I11, rx1001_pos, 2
    gt $I11, rx1001_eos, rx1001_fail2638
    substr $S10, rx1001_tgt, rx1001_pos, 2
    ne $S10, ucs4:"qq", rx1001_fail2638
    add rx1001_pos, 2
    nqp_rxpeek $I19, rx1001_bstack, rxcap1003_fail2646
    inc $I19
    set $I11, rx1001_bstack[$I19]
    repr_bind_attr_int rx1001_cur, rx1001_curclass, "$!pos", rx1001_pos
    $P11 = rx1001_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1001_pos)
    rx1001_cstack = rx1001_cur."!cursor_capture"($P11, "sym")
    goto rxcap1003_done2645
  rxcap1003_fail2646:
    goto rx1001_fail2638
  rxcap1003_done2645:
    le rx1001_pos, 0, rx1001_fail2638
    is_cclass $I11, .CCLASS_WORD, rx1001_tgt, rx1001_pos
    if $I11, rx1001_fail2638
    sub $I11, rx1001_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx1001_tgt, $I11
    unless $I11, rx1001_fail2638
    ge rx1001_pos, rx1001_eos, rx1001_fail2638
    substr $S11, rx1001_tgt, rx1001_pos, 1
    index $I11, ucs4:"(", $S11
    ge $I11, 0, rx1001_fail2638
    repr_bind_attr_int rx1001_cur, rx1001_curclass, "$!pos", rx1001_pos
    $P11 = rx1001_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1001_curclass, "$!pos"
    lt $I11, 0, rx1001_fail2638
    repr_get_attr_int rx1001_pos, $P11, rx1001_curclass, "$!pos"
    repr_bind_attr_int rx1001_cur, rx1001_curclass, "$!pos", rx1001_pos
    $P11 = rx1001_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx1001_curclass, "$!pos"
    lt $I11, 0, rx1001_fail2638
    nqp_rxmark rx1001_bstack, rxsubrule1006_pass2649, -1, 0
  rxsubrule1006_pass2649:
    rx1001_cstack = rx1001_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1001_pos, $P11, rx1001_curclass, "$!pos"
    rx1001_cur."!cursor_pass"(rx1001_pos, "quote:sym<qq>", 'backtrack'=>1)
    .return (rx1001_cur)
  rx1001_restart2637:
    repr_get_attr_obj rx1001_cstack, rx1001_cur, rx1001_curclass, "$!cstack"
  rx1001_fail2638:
    unless rx1001_bstack, rx1001_done2636
    pop $I19, rx1001_bstack
    if_null rx1001_cstack, rx1001_cstack_done2641
    unless rx1001_cstack, rx1001_cstack_done2641
    dec $I19
    set $P11, rx1001_cstack[$I19]
  rx1001_cstack_done2641:
    pop rx1001_rep, rx1001_bstack
    pop rx1001_pos, rx1001_bstack
    pop $I19, rx1001_bstack
    lt rx1001_pos, -1, rx1001_done2636
    lt rx1001_pos, 0, rx1001_fail2638
    eq $I19, 0, rx1001_fail2638
    nqp_islist $I20, rx1001_cstack
    unless $I20, rx1001_jump2639
    elements $I18, rx1001_bstack
    le $I18, 0, rx1001_cut2640
    dec $I18
    set $I18, rx1001_bstack[$I18]
  rx1001_cut2640:
    assign rx1001_cstack, $I18
  rx1001_jump2639:
    jump $I19
  rx1001_done2636:
    rx1001_cur."!cursor_fail"()
    .return (rx1001_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q>" :subid("cuid_156_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1248
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1007_tgt
    .local int rx1007_pos
    .local int rx1007_off
    .local int rx1007_eos
    .local int rx1007_rep
    .local pmc rx1007_cur
    .local pmc rx1007_curclass
    .local pmc rx1007_bstack
    .local pmc rx1007_cstack
    (rx1007_cur, rx1007_tgt, rx1007_pos, rx1007_curclass, rx1007_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1007_cur
    length rx1007_eos, rx1007_tgt
    eq $I19, 1, rx1007_restart2652
    gt rx1007_pos, rx1007_eos, rx1007_fail2653
    repr_get_attr_int $I11, self, rx1007_curclass, "$!from"
    ne $I11, -1, rxscan1008_done2659
    goto rxscan1008_scan2658
  rxscan1008_loop2657:
    inc rx1007_pos
    gt rx1007_pos, rx1007_eos, rx1007_fail2653
    repr_bind_attr_int rx1007_cur, rx1007_curclass, "$!from", rx1007_pos
  rxscan1008_scan2658:
    nqp_rxmark rx1007_bstack, rxscan1008_loop2657, rx1007_pos, 0
  rxscan1008_done2659:
    nqp_rxmark rx1007_bstack, rxcap1009_fail2661, rx1007_pos, 0
    add $I11, rx1007_pos, 1
    gt $I11, rx1007_eos, rx1007_fail2653
    substr $S10, rx1007_tgt, rx1007_pos, 1
    ne $S10, ucs4:"Q", rx1007_fail2653
    add rx1007_pos, 1
    nqp_rxpeek $I19, rx1007_bstack, rxcap1009_fail2661
    inc $I19
    set $I11, rx1007_bstack[$I19]
    repr_bind_attr_int rx1007_cur, rx1007_curclass, "$!pos", rx1007_pos
    $P11 = rx1007_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1007_pos)
    rx1007_cstack = rx1007_cur."!cursor_capture"($P11, "sym")
    goto rxcap1009_done2660
  rxcap1009_fail2661:
    goto rx1007_fail2653
  rxcap1009_done2660:
    le rx1007_pos, 0, rx1007_fail2653
    is_cclass $I11, .CCLASS_WORD, rx1007_tgt, rx1007_pos
    if $I11, rx1007_fail2653
    sub $I11, rx1007_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx1007_tgt, $I11
    unless $I11, rx1007_fail2653
    ge rx1007_pos, rx1007_eos, rx1007_fail2653
    substr $S11, rx1007_tgt, rx1007_pos, 1
    index $I11, ucs4:"(", $S11
    ge $I11, 0, rx1007_fail2653
    repr_bind_attr_int rx1007_cur, rx1007_curclass, "$!pos", rx1007_pos
    $P11 = rx1007_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1007_curclass, "$!pos"
    lt $I11, 0, rx1007_fail2653
    repr_get_attr_int rx1007_pos, $P11, rx1007_curclass, "$!pos"
    repr_bind_attr_int rx1007_cur, rx1007_curclass, "$!pos", rx1007_pos
    $P11 = rx1007_cur."quote_EXPR"()
    repr_get_attr_int $I11, $P11, rx1007_curclass, "$!pos"
    lt $I11, 0, rx1007_fail2653
    nqp_rxmark rx1007_bstack, rxsubrule1012_pass2664, -1, 0
  rxsubrule1012_pass2664:
    rx1007_cstack = rx1007_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1007_pos, $P11, rx1007_curclass, "$!pos"
    rx1007_cur."!cursor_pass"(rx1007_pos, "quote:sym<Q>", 'backtrack'=>1)
    .return (rx1007_cur)
  rx1007_restart2652:
    repr_get_attr_obj rx1007_cstack, rx1007_cur, rx1007_curclass, "$!cstack"
  rx1007_fail2653:
    unless rx1007_bstack, rx1007_done2651
    pop $I19, rx1007_bstack
    if_null rx1007_cstack, rx1007_cstack_done2656
    unless rx1007_cstack, rx1007_cstack_done2656
    dec $I19
    set $P11, rx1007_cstack[$I19]
  rx1007_cstack_done2656:
    pop rx1007_rep, rx1007_bstack
    pop rx1007_pos, rx1007_bstack
    pop $I19, rx1007_bstack
    lt rx1007_pos, -1, rx1007_done2651
    lt rx1007_pos, 0, rx1007_fail2653
    eq $I19, 0, rx1007_fail2653
    nqp_islist $I20, rx1007_cstack
    unless $I20, rx1007_jump2654
    elements $I18, rx1007_bstack
    le $I18, 0, rx1007_cut2655
    dec $I18
    set $I18, rx1007_bstack[$I18]
  rx1007_cut2655:
    assign rx1007_cstack, $I18
  rx1007_jump2654:
    jump $I19
  rx1007_done2651:
    rx1007_cur."!cursor_fail"()
    .return (rx1007_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q:PIR>" :subid("cuid_157_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1249
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1013_tgt
    .local int rx1013_pos
    .local int rx1013_off
    .local int rx1013_eos
    .local int rx1013_rep
    .local pmc rx1013_cur
    .local pmc rx1013_curclass
    .local pmc rx1013_bstack
    .local pmc rx1013_cstack
    (rx1013_cur, rx1013_tgt, rx1013_pos, rx1013_curclass, rx1013_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1013_cur
    length rx1013_eos, rx1013_tgt
    eq $I19, 1, rx1013_restart2667
    gt rx1013_pos, rx1013_eos, rx1013_fail2668
    repr_get_attr_int $I11, self, rx1013_curclass, "$!from"
    ne $I11, -1, rxscan1014_done2674
    goto rxscan1014_scan2673
  rxscan1014_loop2672:
    inc rx1013_pos
    gt rx1013_pos, rx1013_eos, rx1013_fail2668
    repr_bind_attr_int rx1013_cur, rx1013_curclass, "$!from", rx1013_pos
  rxscan1014_scan2673:
    nqp_rxmark rx1013_bstack, rxscan1014_loop2672, rx1013_pos, 0
  rxscan1014_done2674:
    nqp_rxmark rx1013_bstack, rxcap1015_fail2676, rx1013_pos, 0
    add $I11, rx1013_pos, 5
    gt $I11, rx1013_eos, rx1013_fail2668
    substr $S10, rx1013_tgt, rx1013_pos, 5
    ne $S10, ucs4:"Q:PIR", rx1013_fail2668
    add rx1013_pos, 5
    nqp_rxpeek $I19, rx1013_bstack, rxcap1015_fail2676
    inc $I19
    set $I11, rx1013_bstack[$I19]
    repr_bind_attr_int rx1013_cur, rx1013_curclass, "$!pos", rx1013_pos
    $P11 = rx1013_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1013_pos)
    rx1013_cstack = rx1013_cur."!cursor_capture"($P11, "sym")
    goto rxcap1015_done2675
  rxcap1015_fail2676:
    goto rx1013_fail2668
  rxcap1015_done2675:
    repr_bind_attr_int rx1013_cur, rx1013_curclass, "$!pos", rx1013_pos
    $P11 = rx1013_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1013_curclass, "$!pos"
    lt $I11, 0, rx1013_fail2668
    repr_get_attr_int rx1013_pos, $P11, rx1013_curclass, "$!pos"
    repr_bind_attr_int rx1013_cur, rx1013_curclass, "$!pos", rx1013_pos
    $P11 = rx1013_cur."quote_EXPR"()
    repr_get_attr_int $I11, $P11, rx1013_curclass, "$!pos"
    lt $I11, 0, rx1013_fail2668
    nqp_rxmark rx1013_bstack, rxsubrule1017_pass2678, -1, 0
  rxsubrule1017_pass2678:
    rx1013_cstack = rx1013_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1013_pos, $P11, rx1013_curclass, "$!pos"
    rx1013_cur."!cursor_pass"(rx1013_pos, "quote:sym<Q:PIR>", 'backtrack'=>1)
    .return (rx1013_cur)
  rx1013_restart2667:
    repr_get_attr_obj rx1013_cstack, rx1013_cur, rx1013_curclass, "$!cstack"
  rx1013_fail2668:
    unless rx1013_bstack, rx1013_done2666
    pop $I19, rx1013_bstack
    if_null rx1013_cstack, rx1013_cstack_done2671
    unless rx1013_cstack, rx1013_cstack_done2671
    dec $I19
    set $P11, rx1013_cstack[$I19]
  rx1013_cstack_done2671:
    pop rx1013_rep, rx1013_bstack
    pop rx1013_pos, rx1013_bstack
    pop $I19, rx1013_bstack
    lt rx1013_pos, -1, rx1013_done2666
    lt rx1013_pos, 0, rx1013_fail2668
    eq $I19, 0, rx1013_fail2668
    nqp_islist $I20, rx1013_cstack
    unless $I20, rx1013_jump2669
    elements $I18, rx1013_bstack
    le $I18, 0, rx1013_cut2670
    dec $I18
    set $I18, rx1013_bstack[$I18]
  rx1013_cut2670:
    assign rx1013_cstack, $I18
  rx1013_jump2669:
    jump $I19
  rx1013_done2666:
    rx1013_cur."!cursor_fail"()
    .return (rx1013_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym</ />" :subid("cuid_158_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1250
    .param pmc _lex_param_0 
    .lex "%*RX", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    new $P5001, 'Hash'
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx1018_tgt
    .local int rx1018_pos
    .local int rx1018_off
    .local int rx1018_eos
    .local int rx1018_rep
    .local pmc rx1018_cur
    .local pmc rx1018_curclass
    .local pmc rx1018_bstack
    .local pmc rx1018_cstack
    (rx1018_cur, rx1018_tgt, rx1018_pos, rx1018_curclass, rx1018_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1018_cur
    length rx1018_eos, rx1018_tgt
    eq $I19, 1, rx1018_restart2681
    gt rx1018_pos, rx1018_eos, rx1018_fail2682
    repr_get_attr_int $I11, self, rx1018_curclass, "$!from"
    ne $I11, -1, rxscan1019_done2688
    goto rxscan1019_scan2687
  rxscan1019_loop2686:
    inc rx1018_pos
    gt rx1018_pos, rx1018_eos, rx1018_fail2682
    repr_bind_attr_int rx1018_cur, rx1018_curclass, "$!from", rx1018_pos
  rxscan1019_scan2687:
    nqp_rxmark rx1018_bstack, rxscan1019_loop2686, rx1018_pos, 0
  rxscan1019_done2688:
    add $I11, rx1018_pos, 1
    gt $I11, rx1018_eos, rx1018_fail2682
    substr $S10, rx1018_tgt, rx1018_pos, 1
    ne $S10, ucs4:"/", rx1018_fail2682
    add rx1018_pos, 1
    repr_bind_attr_int rx1018_cur, rx1018_curclass, "$!pos", rx1018_pos
    $P11 = rx1018_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx1018_curclass, "$!pos"
    lt $I11, 0, rx1018_fail2682
    repr_get_attr_int rx1018_pos, $P11, rx1018_curclass, "$!pos"
    repr_bind_attr_int rx1018_cur, rx1018_curclass, "$!pos", rx1018_pos
    store_lex unicode:"$\x{a2}", rx1018_cur
    unless_null $P101, fallback2690
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%RX"]
    unless_null $P5002, fallback2691
    nqp_get_sc_object $P5006, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%RX"], $P5007
    set $P5002, $P5007
  fallback2691:
    unless_null $P5002, vivi_10212692
    die "Contextual %*RX not found"
    box $P5008, "Contextual %*RX not found"
    set $P5002, $P5008
  vivi_10212692:
    set $P101, $P5002
  fallback2690:
    repr_bind_attr_int rx1018_cur, rx1018_curclass, "$!pos", rx1018_pos
    $P11 = rx1018_cur."LANG"("Regex", "nibbler")
    repr_get_attr_int $I11, $P11, rx1018_curclass, "$!pos"
    lt $I11, 0, rx1018_fail2682
    nqp_rxmark rx1018_bstack, rxsubrule1022_pass2693, -1, 0
  rxsubrule1022_pass2693:
    rx1018_cstack = rx1018_cur."!cursor_capture"($P11, "p6regex")
    repr_get_attr_int rx1018_pos, $P11, rx1018_curclass, "$!pos"
    add $I11, rx1018_pos, 1
    gt $I11, rx1018_eos, rx1018_fail2682
    substr $S10, rx1018_tgt, rx1018_pos, 1
    ne $S10, ucs4:"/", rx1018_fail2682
    add rx1018_pos, 1
    rx1018_cur."!cursor_pass"(rx1018_pos, "quote:sym</ />", 'backtrack'=>1)
    .return (rx1018_cur)
  rx1018_restart2681:
    repr_get_attr_obj rx1018_cstack, rx1018_cur, rx1018_curclass, "$!cstack"
  rx1018_fail2682:
    unless rx1018_bstack, rx1018_done2680
    pop $I19, rx1018_bstack
    if_null rx1018_cstack, rx1018_cstack_done2685
    unless rx1018_cstack, rx1018_cstack_done2685
    dec $I19
    set $P11, rx1018_cstack[$I19]
  rx1018_cstack_done2685:
    pop rx1018_rep, rx1018_bstack
    pop rx1018_pos, rx1018_bstack
    pop $I19, rx1018_bstack
    lt rx1018_pos, -1, rx1018_done2680
    lt rx1018_pos, 0, rx1018_fail2682
    eq $I19, 0, rx1018_fail2682
    nqp_islist $I20, rx1018_cstack
    unless $I20, rx1018_jump2683
    elements $I18, rx1018_bstack
    le $I18, 0, rx1018_cut2684
    dec $I18
    set $I18, rx1018_bstack[$I18]
  rx1018_cut2684:
    assign rx1018_cstack, $I18
  rx1018_jump2683:
    jump $I19
  rx1018_done2680:
    rx1018_cur."!cursor_fail"()
    .return (rx1018_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<$>" :subid("cuid_159_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1258
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1023_tgt
    .local int rx1023_pos
    .local int rx1023_off
    .local int rx1023_eos
    .local int rx1023_rep
    .local pmc rx1023_cur
    .local pmc rx1023_curclass
    .local pmc rx1023_bstack
    .local pmc rx1023_cstack
    (rx1023_cur, rx1023_tgt, rx1023_pos, rx1023_curclass, rx1023_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1023_cur
    length rx1023_eos, rx1023_tgt
    eq $I19, 1, rx1023_restart2696
    gt rx1023_pos, rx1023_eos, rx1023_fail2697
    repr_get_attr_int $I11, self, rx1023_curclass, "$!from"
    ne $I11, -1, rxscan1024_done2703
    goto rxscan1024_scan2702
  rxscan1024_loop2701:
    inc rx1023_pos
    gt rx1023_pos, rx1023_eos, rx1023_fail2697
    repr_bind_attr_int rx1023_cur, rx1023_curclass, "$!from", rx1023_pos
  rxscan1024_scan2702:
    nqp_rxmark rx1023_bstack, rxscan1024_loop2701, rx1023_pos, 0
  rxscan1024_done2703:
    ge rx1023_pos, rx1023_eos, rx1023_fail2697
    substr $S11, rx1023_tgt, rx1023_pos, 1
    index $I11, ucs4:"$", $S11
    lt $I11, 0, rx1023_fail2697
    repr_bind_attr_int rx1023_cur, rx1023_curclass, "$!pos", rx1023_pos
    $P11 = rx1023_cur."quotemod_check"("s")
    repr_get_attr_int $I11, $P11, rx1023_curclass, "$!pos"
    lt $I11, 0, rx1023_fail2697
    repr_bind_attr_int rx1023_cur, rx1023_curclass, "$!pos", rx1023_pos
    $P11 = rx1023_cur."variable"()
    repr_get_attr_int $I11, $P11, rx1023_curclass, "$!pos"
    lt $I11, 0, rx1023_fail2697
    nqp_rxmark rx1023_bstack, rxsubrule1025_pass2704, -1, 0
  rxsubrule1025_pass2704:
    rx1023_cstack = rx1023_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx1023_pos, $P11, rx1023_curclass, "$!pos"
    rx1023_cur."!cursor_pass"(rx1023_pos, "quote_escape:sym<$>", 'backtrack'=>1)
    .return (rx1023_cur)
  rx1023_restart2696:
    repr_get_attr_obj rx1023_cstack, rx1023_cur, rx1023_curclass, "$!cstack"
  rx1023_fail2697:
    unless rx1023_bstack, rx1023_done2695
    pop $I19, rx1023_bstack
    if_null rx1023_cstack, rx1023_cstack_done2700
    unless rx1023_cstack, rx1023_cstack_done2700
    dec $I19
    set $P11, rx1023_cstack[$I19]
  rx1023_cstack_done2700:
    pop rx1023_rep, rx1023_bstack
    pop rx1023_pos, rx1023_bstack
    pop $I19, rx1023_bstack
    lt rx1023_pos, -1, rx1023_done2695
    lt rx1023_pos, 0, rx1023_fail2697
    eq $I19, 0, rx1023_fail2697
    nqp_islist $I20, rx1023_cstack
    unless $I20, rx1023_jump2698
    elements $I18, rx1023_bstack
    le $I18, 0, rx1023_cut2699
    dec $I18
    set $I18, rx1023_bstack[$I18]
  rx1023_cut2699:
    assign rx1023_cstack, $I18
  rx1023_jump2698:
    jump $I19
  rx1023_done2695:
    rx1023_cur."!cursor_fail"()
    .return (rx1023_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<{ }>" :subid("cuid_160_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1259
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1026_tgt
    .local int rx1026_pos
    .local int rx1026_off
    .local int rx1026_eos
    .local int rx1026_rep
    .local pmc rx1026_cur
    .local pmc rx1026_curclass
    .local pmc rx1026_bstack
    .local pmc rx1026_cstack
    (rx1026_cur, rx1026_tgt, rx1026_pos, rx1026_curclass, rx1026_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1026_cur
    length rx1026_eos, rx1026_tgt
    eq $I19, 1, rx1026_restart2707
    gt rx1026_pos, rx1026_eos, rx1026_fail2708
    repr_get_attr_int $I11, self, rx1026_curclass, "$!from"
    ne $I11, -1, rxscan1027_done2714
    goto rxscan1027_scan2713
  rxscan1027_loop2712:
    inc rx1026_pos
    gt rx1026_pos, rx1026_eos, rx1026_fail2708
    repr_bind_attr_int rx1026_cur, rx1026_curclass, "$!from", rx1026_pos
  rxscan1027_scan2713:
    nqp_rxmark rx1026_bstack, rxscan1027_loop2712, rx1026_pos, 0
  rxscan1027_done2714:
    ge rx1026_pos, rx1026_eos, rx1026_fail2708
    substr $S11, rx1026_tgt, rx1026_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx1026_fail2708
    repr_bind_attr_int rx1026_cur, rx1026_curclass, "$!pos", rx1026_pos
    $P11 = rx1026_cur."quotemod_check"("c")
    repr_get_attr_int $I11, $P11, rx1026_curclass, "$!pos"
    lt $I11, 0, rx1026_fail2708
    repr_bind_attr_int rx1026_cur, rx1026_curclass, "$!pos", rx1026_pos
    $P11 = rx1026_cur."block"()
    repr_get_attr_int $I11, $P11, rx1026_curclass, "$!pos"
    lt $I11, 0, rx1026_fail2708
    nqp_rxmark rx1026_bstack, rxsubrule1028_pass2715, -1, 0
  rxsubrule1028_pass2715:
    rx1026_cstack = rx1026_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx1026_pos, $P11, rx1026_curclass, "$!pos"
    rx1026_cur."!cursor_pass"(rx1026_pos, "quote_escape:sym<{ }>", 'backtrack'=>1)
    .return (rx1026_cur)
  rx1026_restart2707:
    repr_get_attr_obj rx1026_cstack, rx1026_cur, rx1026_curclass, "$!cstack"
  rx1026_fail2708:
    unless rx1026_bstack, rx1026_done2706
    pop $I19, rx1026_bstack
    if_null rx1026_cstack, rx1026_cstack_done2711
    unless rx1026_cstack, rx1026_cstack_done2711
    dec $I19
    set $P11, rx1026_cstack[$I19]
  rx1026_cstack_done2711:
    pop rx1026_rep, rx1026_bstack
    pop rx1026_pos, rx1026_bstack
    pop $I19, rx1026_bstack
    lt rx1026_pos, -1, rx1026_done2706
    lt rx1026_pos, 0, rx1026_fail2708
    eq $I19, 0, rx1026_fail2708
    nqp_islist $I20, rx1026_cstack
    unless $I20, rx1026_jump2709
    elements $I18, rx1026_bstack
    le $I18, 0, rx1026_cut2710
    dec $I18
    set $I18, rx1026_bstack[$I18]
  rx1026_cut2710:
    assign rx1026_cstack, $I18
  rx1026_jump2709:
    jump $I19
  rx1026_done2706:
    rx1026_cur."!cursor_fail"()
    .return (rx1026_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<esc>" :subid("cuid_161_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1260
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1029_tgt
    .local int rx1029_pos
    .local int rx1029_off
    .local int rx1029_eos
    .local int rx1029_rep
    .local pmc rx1029_cur
    .local pmc rx1029_curclass
    .local pmc rx1029_bstack
    .local pmc rx1029_cstack
    (rx1029_cur, rx1029_tgt, rx1029_pos, rx1029_curclass, rx1029_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1029_cur
    length rx1029_eos, rx1029_tgt
    eq $I19, 1, rx1029_restart2718
    gt rx1029_pos, rx1029_eos, rx1029_fail2719
    repr_get_attr_int $I11, self, rx1029_curclass, "$!from"
    ne $I11, -1, rxscan1030_done2725
    goto rxscan1030_scan2724
  rxscan1030_loop2723:
    inc rx1029_pos
    gt rx1029_pos, rx1029_eos, rx1029_fail2719
    repr_bind_attr_int rx1029_cur, rx1029_curclass, "$!from", rx1029_pos
  rxscan1030_scan2724:
    nqp_rxmark rx1029_bstack, rxscan1030_loop2723, rx1029_pos, 0
  rxscan1030_done2725:
    add $I11, rx1029_pos, 2
    gt $I11, rx1029_eos, rx1029_fail2719
    substr $S10, rx1029_tgt, rx1029_pos, 2
    ne $S10, ucs4:"\\e", rx1029_fail2719
    add rx1029_pos, 2
    repr_bind_attr_int rx1029_cur, rx1029_curclass, "$!pos", rx1029_pos
    $P11 = rx1029_cur."quotemod_check"("b")
    repr_get_attr_int $I11, $P11, rx1029_curclass, "$!pos"
    lt $I11, 0, rx1029_fail2719
    rx1029_cur."!cursor_pass"(rx1029_pos, "quote_escape:sym<esc>", 'backtrack'=>1)
    .return (rx1029_cur)
  rx1029_restart2718:
    repr_get_attr_obj rx1029_cstack, rx1029_cur, rx1029_curclass, "$!cstack"
  rx1029_fail2719:
    unless rx1029_bstack, rx1029_done2717
    pop $I19, rx1029_bstack
    if_null rx1029_cstack, rx1029_cstack_done2722
    unless rx1029_cstack, rx1029_cstack_done2722
    dec $I19
    set $P11, rx1029_cstack[$I19]
  rx1029_cstack_done2722:
    pop rx1029_rep, rx1029_bstack
    pop rx1029_pos, rx1029_bstack
    pop $I19, rx1029_bstack
    lt rx1029_pos, -1, rx1029_done2717
    lt rx1029_pos, 0, rx1029_fail2719
    eq $I19, 0, rx1029_fail2719
    nqp_islist $I20, rx1029_cstack
    unless $I20, rx1029_jump2720
    elements $I18, rx1029_bstack
    le $I18, 0, rx1029_cut2721
    dec $I18
    set $I18, rx1029_bstack[$I18]
  rx1029_cut2721:
    assign rx1029_cstack, $I18
  rx1029_jump2720:
    jump $I19
  rx1029_done2717:
    rx1029_cur."!cursor_fail"()
    .return (rx1029_cur) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<( )>" :subid("cuid_162_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1262
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1031_tgt
    .local int rx1031_pos
    .local int rx1031_off
    .local int rx1031_eos
    .local int rx1031_rep
    .local pmc rx1031_cur
    .local pmc rx1031_curclass
    .local pmc rx1031_bstack
    .local pmc rx1031_cstack
    (rx1031_cur, rx1031_tgt, rx1031_pos, rx1031_curclass, rx1031_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1031_cur
    length rx1031_eos, rx1031_tgt
    eq $I19, 1, rx1031_restart2728
    gt rx1031_pos, rx1031_eos, rx1031_fail2729
    repr_get_attr_int $I11, self, rx1031_curclass, "$!from"
    ne $I11, -1, rxscan1032_done2735
    goto rxscan1032_scan2734
  rxscan1032_loop2733:
    inc rx1031_pos
    gt rx1031_pos, rx1031_eos, rx1031_fail2729
    repr_bind_attr_int rx1031_cur, rx1031_curclass, "$!from", rx1031_pos
  rxscan1032_scan2734:
    nqp_rxmark rx1031_bstack, rxscan1032_loop2733, rx1031_pos, 0
  rxscan1032_done2735:
    add $I11, rx1031_pos, 1
    gt $I11, rx1031_eos, rx1031_fail2729
    substr $S10, rx1031_tgt, rx1031_pos, 1
    ne $S10, ucs4:"(", rx1031_fail2729
    add rx1031_pos, 1
    repr_bind_attr_int rx1031_cur, rx1031_curclass, "$!pos", rx1031_pos
    $P11 = rx1031_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1031_curclass, "$!pos"
    lt $I11, 0, rx1031_fail2729
    repr_get_attr_int rx1031_pos, $P11, rx1031_curclass, "$!pos"
    nqp_rxmark rx1031_bstack, rxquantr1034_done2738, rx1031_pos, 0
  rxquantr1034_loop2737:
    repr_bind_attr_int rx1031_cur, rx1031_curclass, "$!pos", rx1031_pos
    $P11 = rx1031_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx1031_curclass, "$!pos"
    lt $I11, 0, rx1031_fail2729
    goto rxsubrule1035_pass2739
  rxsubrule1035_back2740:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx1031_curclass, "$!pos"
    lt $I11, 0, rx1031_fail2729
  rxsubrule1035_pass2739:
    rx1031_cstack = rx1031_cur."!cursor_capture"($P11, "EXPR")
    set_addr $I11, rxsubrule1035_back2740
    push rx1031_bstack, $I11
    push rx1031_bstack, 0
    push rx1031_bstack, rx1031_pos
    elements $I11, rx1031_cstack
    push rx1031_bstack, $I11
    repr_get_attr_int rx1031_pos, $P11, rx1031_curclass, "$!pos"
    nqp_rxpeek $I19, rx1031_bstack, rxquantr1034_done2738
    inc $I19
    inc $I19
    set rx1031_rep, rx1031_bstack[$I19]
    nqp_rxcommit rx1031_bstack, rxquantr1034_done2738
    inc rx1031_rep
  rxquantr1034_done2738:
    add $I11, rx1031_pos, 1
    gt $I11, rx1031_eos, rx1031_fail2729
    substr $S10, rx1031_tgt, rx1031_pos, 1
    ne $S10, ucs4:")", rx1031_fail2729
    add rx1031_pos, 1
    rx1031_cur."!cursor_pass"(rx1031_pos, "circumfix:sym<( )>", 'backtrack'=>1)
    .return (rx1031_cur)
  rx1031_restart2728:
    repr_get_attr_obj rx1031_cstack, rx1031_cur, rx1031_curclass, "$!cstack"
  rx1031_fail2729:
    unless rx1031_bstack, rx1031_done2727
    pop $I19, rx1031_bstack
    if_null rx1031_cstack, rx1031_cstack_done2732
    unless rx1031_cstack, rx1031_cstack_done2732
    dec $I19
    set $P11, rx1031_cstack[$I19]
  rx1031_cstack_done2732:
    pop rx1031_rep, rx1031_bstack
    pop rx1031_pos, rx1031_bstack
    pop $I19, rx1031_bstack
    lt rx1031_pos, -1, rx1031_done2727
    lt rx1031_pos, 0, rx1031_fail2729
    eq $I19, 0, rx1031_fail2729
    nqp_islist $I20, rx1031_cstack
    unless $I20, rx1031_jump2730
    elements $I18, rx1031_bstack
    le $I18, 0, rx1031_cut2731
    dec $I18
    set $I18, rx1031_bstack[$I18]
  rx1031_cut2731:
    assign rx1031_cstack, $I18
  rx1031_jump2730:
    jump $I19
  rx1031_done2727:
    rx1031_cur."!cursor_fail"()
    .return (rx1031_cur) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<[ ]>" :subid("cuid_163_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1263
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1036_tgt
    .local int rx1036_pos
    .local int rx1036_off
    .local int rx1036_eos
    .local int rx1036_rep
    .local pmc rx1036_cur
    .local pmc rx1036_curclass
    .local pmc rx1036_bstack
    .local pmc rx1036_cstack
    (rx1036_cur, rx1036_tgt, rx1036_pos, rx1036_curclass, rx1036_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1036_cur
    length rx1036_eos, rx1036_tgt
    eq $I19, 1, rx1036_restart2743
    gt rx1036_pos, rx1036_eos, rx1036_fail2744
    repr_get_attr_int $I11, self, rx1036_curclass, "$!from"
    ne $I11, -1, rxscan1037_done2750
    goto rxscan1037_scan2749
  rxscan1037_loop2748:
    inc rx1036_pos
    gt rx1036_pos, rx1036_eos, rx1036_fail2744
    repr_bind_attr_int rx1036_cur, rx1036_curclass, "$!from", rx1036_pos
  rxscan1037_scan2749:
    nqp_rxmark rx1036_bstack, rxscan1037_loop2748, rx1036_pos, 0
  rxscan1037_done2750:
    add $I11, rx1036_pos, 1
    gt $I11, rx1036_eos, rx1036_fail2744
    substr $S10, rx1036_tgt, rx1036_pos, 1
    ne $S10, ucs4:"[", rx1036_fail2744
    add rx1036_pos, 1
    repr_bind_attr_int rx1036_cur, rx1036_curclass, "$!pos", rx1036_pos
    $P11 = rx1036_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1036_curclass, "$!pos"
    lt $I11, 0, rx1036_fail2744
    repr_get_attr_int rx1036_pos, $P11, rx1036_curclass, "$!pos"
    nqp_rxmark rx1036_bstack, rxquantr1039_done2753, rx1036_pos, 0
  rxquantr1039_loop2752:
    repr_bind_attr_int rx1036_cur, rx1036_curclass, "$!pos", rx1036_pos
    $P11 = rx1036_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx1036_curclass, "$!pos"
    lt $I11, 0, rx1036_fail2744
    goto rxsubrule1040_pass2754
  rxsubrule1040_back2755:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx1036_curclass, "$!pos"
    lt $I11, 0, rx1036_fail2744
  rxsubrule1040_pass2754:
    rx1036_cstack = rx1036_cur."!cursor_capture"($P11, "EXPR")
    set_addr $I11, rxsubrule1040_back2755
    push rx1036_bstack, $I11
    push rx1036_bstack, 0
    push rx1036_bstack, rx1036_pos
    elements $I11, rx1036_cstack
    push rx1036_bstack, $I11
    repr_get_attr_int rx1036_pos, $P11, rx1036_curclass, "$!pos"
    nqp_rxpeek $I19, rx1036_bstack, rxquantr1039_done2753
    inc $I19
    inc $I19
    set rx1036_rep, rx1036_bstack[$I19]
    nqp_rxcommit rx1036_bstack, rxquantr1039_done2753
    inc rx1036_rep
  rxquantr1039_done2753:
    add $I11, rx1036_pos, 1
    gt $I11, rx1036_eos, rx1036_fail2744
    substr $S10, rx1036_tgt, rx1036_pos, 1
    ne $S10, ucs4:"]", rx1036_fail2744
    add rx1036_pos, 1
    rx1036_cur."!cursor_pass"(rx1036_pos, "circumfix:sym<[ ]>", 'backtrack'=>1)
    .return (rx1036_cur)
  rx1036_restart2743:
    repr_get_attr_obj rx1036_cstack, rx1036_cur, rx1036_curclass, "$!cstack"
  rx1036_fail2744:
    unless rx1036_bstack, rx1036_done2742
    pop $I19, rx1036_bstack
    if_null rx1036_cstack, rx1036_cstack_done2747
    unless rx1036_cstack, rx1036_cstack_done2747
    dec $I19
    set $P11, rx1036_cstack[$I19]
  rx1036_cstack_done2747:
    pop rx1036_rep, rx1036_bstack
    pop rx1036_pos, rx1036_bstack
    pop $I19, rx1036_bstack
    lt rx1036_pos, -1, rx1036_done2742
    lt rx1036_pos, 0, rx1036_fail2744
    eq $I19, 0, rx1036_fail2744
    nqp_islist $I20, rx1036_cstack
    unless $I20, rx1036_jump2745
    elements $I18, rx1036_bstack
    le $I18, 0, rx1036_cut2746
    dec $I18
    set $I18, rx1036_bstack[$I18]
  rx1036_cut2746:
    assign rx1036_cstack, $I18
  rx1036_jump2745:
    jump $I19
  rx1036_done2742:
    rx1036_cur."!cursor_fail"()
    .return (rx1036_cur) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<ang>" :subid("cuid_164_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1264
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1041_tgt
    .local int rx1041_pos
    .local int rx1041_off
    .local int rx1041_eos
    .local int rx1041_rep
    .local pmc rx1041_cur
    .local pmc rx1041_curclass
    .local pmc rx1041_bstack
    .local pmc rx1041_cstack
    (rx1041_cur, rx1041_tgt, rx1041_pos, rx1041_curclass, rx1041_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1041_cur
    length rx1041_eos, rx1041_tgt
    eq $I19, 1, rx1041_restart2758
    gt rx1041_pos, rx1041_eos, rx1041_fail2759
    repr_get_attr_int $I11, self, rx1041_curclass, "$!from"
    ne $I11, -1, rxscan1042_done2765
    goto rxscan1042_scan2764
  rxscan1042_loop2763:
    inc rx1041_pos
    gt rx1041_pos, rx1041_eos, rx1041_fail2759
    repr_bind_attr_int rx1041_cur, rx1041_curclass, "$!from", rx1041_pos
  rxscan1042_scan2764:
    nqp_rxmark rx1041_bstack, rxscan1042_loop2763, rx1041_pos, 0
  rxscan1042_done2765:
    ge rx1041_pos, rx1041_eos, rx1041_fail2759
    substr $S11, rx1041_tgt, rx1041_pos, 1
    index $I11, ucs4:"<", $S11
    lt $I11, 0, rx1041_fail2759
    repr_bind_attr_int rx1041_cur, rx1041_curclass, "$!pos", rx1041_pos
    $P11 = rx1041_cur."quote_EXPR"(":q", ":w")
    repr_get_attr_int $I11, $P11, rx1041_curclass, "$!pos"
    lt $I11, 0, rx1041_fail2759
    nqp_rxmark rx1041_bstack, rxsubrule1043_pass2766, -1, 0
  rxsubrule1043_pass2766:
    rx1041_cstack = rx1041_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1041_pos, $P11, rx1041_curclass, "$!pos"
    rx1041_cur."!cursor_pass"(rx1041_pos, "circumfix:sym<ang>", 'backtrack'=>1)
    .return (rx1041_cur)
  rx1041_restart2758:
    repr_get_attr_obj rx1041_cstack, rx1041_cur, rx1041_curclass, "$!cstack"
  rx1041_fail2759:
    unless rx1041_bstack, rx1041_done2757
    pop $I19, rx1041_bstack
    if_null rx1041_cstack, rx1041_cstack_done2762
    unless rx1041_cstack, rx1041_cstack_done2762
    dec $I19
    set $P11, rx1041_cstack[$I19]
  rx1041_cstack_done2762:
    pop rx1041_rep, rx1041_bstack
    pop rx1041_pos, rx1041_bstack
    pop $I19, rx1041_bstack
    lt rx1041_pos, -1, rx1041_done2757
    lt rx1041_pos, 0, rx1041_fail2759
    eq $I19, 0, rx1041_fail2759
    nqp_islist $I20, rx1041_cstack
    unless $I20, rx1041_jump2760
    elements $I18, rx1041_bstack
    le $I18, 0, rx1041_cut2761
    dec $I18
    set $I18, rx1041_bstack[$I18]
  rx1041_cut2761:
    assign rx1041_cstack, $I18
  rx1041_jump2760:
    jump $I19
  rx1041_done2757:
    rx1041_cur."!cursor_fail"()
    .return (rx1041_cur) 
.end
.HLL "nqp"
.namespace []
.sub utf8:"circumfix:sym<\x{ab} \x{bb}>" :subid("cuid_165_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1265
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1044_tgt
    .local int rx1044_pos
    .local int rx1044_off
    .local int rx1044_eos
    .local int rx1044_rep
    .local pmc rx1044_cur
    .local pmc rx1044_curclass
    .local pmc rx1044_bstack
    .local pmc rx1044_cstack
    (rx1044_cur, rx1044_tgt, rx1044_pos, rx1044_curclass, rx1044_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1044_cur
    length rx1044_eos, rx1044_tgt
    eq $I19, 1, rx1044_restart2769
    gt rx1044_pos, rx1044_eos, rx1044_fail2770
    repr_get_attr_int $I11, self, rx1044_curclass, "$!from"
    ne $I11, -1, rxscan1045_done2776
    goto rxscan1045_scan2775
  rxscan1045_loop2774:
    inc rx1044_pos
    gt rx1044_pos, rx1044_eos, rx1044_fail2770
    repr_bind_attr_int rx1044_cur, rx1044_curclass, "$!from", rx1044_pos
  rxscan1045_scan2775:
    nqp_rxmark rx1044_bstack, rxscan1045_loop2774, rx1044_pos, 0
  rxscan1045_done2776:
    ge rx1044_pos, rx1044_eos, rx1044_fail2770
    substr $S11, rx1044_tgt, rx1044_pos, 1
    index $I11, ucs4:"\x{ab}", $S11
    lt $I11, 0, rx1044_fail2770
    repr_bind_attr_int rx1044_cur, rx1044_curclass, "$!pos", rx1044_pos
    $P11 = rx1044_cur."quote_EXPR"(":qq", ":w")
    repr_get_attr_int $I11, $P11, rx1044_curclass, "$!pos"
    lt $I11, 0, rx1044_fail2770
    nqp_rxmark rx1044_bstack, rxsubrule1046_pass2777, -1, 0
  rxsubrule1046_pass2777:
    rx1044_cstack = rx1044_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1044_pos, $P11, rx1044_curclass, "$!pos"
    rx1044_cur."!cursor_pass"(rx1044_pos, utf8:"circumfix:sym<\x{ab} \x{bb}>", 'backtrack'=>1)
    .return (rx1044_cur)
  rx1044_restart2769:
    repr_get_attr_obj rx1044_cstack, rx1044_cur, rx1044_curclass, "$!cstack"
  rx1044_fail2770:
    unless rx1044_bstack, rx1044_done2768
    pop $I19, rx1044_bstack
    if_null rx1044_cstack, rx1044_cstack_done2773
    unless rx1044_cstack, rx1044_cstack_done2773
    dec $I19
    set $P11, rx1044_cstack[$I19]
  rx1044_cstack_done2773:
    pop rx1044_rep, rx1044_bstack
    pop rx1044_pos, rx1044_bstack
    pop $I19, rx1044_bstack
    lt rx1044_pos, -1, rx1044_done2768
    lt rx1044_pos, 0, rx1044_fail2770
    eq $I19, 0, rx1044_fail2770
    nqp_islist $I20, rx1044_cstack
    unless $I20, rx1044_jump2771
    elements $I18, rx1044_bstack
    le $I18, 0, rx1044_cut2772
    dec $I18
    set $I18, rx1044_bstack[$I18]
  rx1044_cut2772:
    assign rx1044_cstack, $I18
  rx1044_jump2771:
    jump $I19
  rx1044_done2768:
    rx1044_cur."!cursor_fail"()
    .return (rx1044_cur) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<{ }>" :subid("cuid_166_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1266
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1047_tgt
    .local int rx1047_pos
    .local int rx1047_off
    .local int rx1047_eos
    .local int rx1047_rep
    .local pmc rx1047_cur
    .local pmc rx1047_curclass
    .local pmc rx1047_bstack
    .local pmc rx1047_cstack
    (rx1047_cur, rx1047_tgt, rx1047_pos, rx1047_curclass, rx1047_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1047_cur
    length rx1047_eos, rx1047_tgt
    eq $I19, 1, rx1047_restart2780
    gt rx1047_pos, rx1047_eos, rx1047_fail2781
    repr_get_attr_int $I11, self, rx1047_curclass, "$!from"
    ne $I11, -1, rxscan1048_done2787
    goto rxscan1048_scan2786
  rxscan1048_loop2785:
    inc rx1047_pos
    gt rx1047_pos, rx1047_eos, rx1047_fail2781
    repr_bind_attr_int rx1047_cur, rx1047_curclass, "$!from", rx1047_pos
  rxscan1048_scan2786:
    nqp_rxmark rx1047_bstack, rxscan1048_loop2785, rx1047_pos, 0
  rxscan1048_done2787:
    ge rx1047_pos, rx1047_eos, rx1047_fail2781
    substr $S11, rx1047_tgt, rx1047_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx1047_fail2781
    repr_bind_attr_int rx1047_cur, rx1047_curclass, "$!pos", rx1047_pos
    $P11 = rx1047_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx1047_curclass, "$!pos"
    lt $I11, 0, rx1047_fail2781
    nqp_rxmark rx1047_bstack, rxsubrule1049_pass2788, -1, 0
  rxsubrule1049_pass2788:
    rx1047_cstack = rx1047_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx1047_pos, $P11, rx1047_curclass, "$!pos"
    rx1047_cur."!cursor_pass"(rx1047_pos, "circumfix:sym<{ }>", 'backtrack'=>1)
    .return (rx1047_cur)
  rx1047_restart2780:
    repr_get_attr_obj rx1047_cstack, rx1047_cur, rx1047_curclass, "$!cstack"
  rx1047_fail2781:
    unless rx1047_bstack, rx1047_done2779
    pop $I19, rx1047_bstack
    if_null rx1047_cstack, rx1047_cstack_done2784
    unless rx1047_cstack, rx1047_cstack_done2784
    dec $I19
    set $P11, rx1047_cstack[$I19]
  rx1047_cstack_done2784:
    pop rx1047_rep, rx1047_bstack
    pop rx1047_pos, rx1047_bstack
    pop $I19, rx1047_bstack
    lt rx1047_pos, -1, rx1047_done2779
    lt rx1047_pos, 0, rx1047_fail2781
    eq $I19, 0, rx1047_fail2781
    nqp_islist $I20, rx1047_cstack
    unless $I20, rx1047_jump2782
    elements $I18, rx1047_bstack
    le $I18, 0, rx1047_cut2783
    dec $I18
    set $I18, rx1047_bstack[$I18]
  rx1047_cut2783:
    assign rx1047_cstack, $I18
  rx1047_jump2782:
    jump $I19
  rx1047_done2779:
    rx1047_cur."!cursor_fail"()
    .return (rx1047_cur) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<sigil>" :subid("cuid_167_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1267
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1050_tgt
    .local int rx1050_pos
    .local int rx1050_off
    .local int rx1050_eos
    .local int rx1050_rep
    .local pmc rx1050_cur
    .local pmc rx1050_curclass
    .local pmc rx1050_bstack
    .local pmc rx1050_cstack
    (rx1050_cur, rx1050_tgt, rx1050_pos, rx1050_curclass, rx1050_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1050_cur
    length rx1050_eos, rx1050_tgt
    eq $I19, 1, rx1050_restart2791
    gt rx1050_pos, rx1050_eos, rx1050_fail2792
    repr_get_attr_int $I11, self, rx1050_curclass, "$!from"
    ne $I11, -1, rxscan1051_done2798
    goto rxscan1051_scan2797
  rxscan1051_loop2796:
    inc rx1050_pos
    gt rx1050_pos, rx1050_eos, rx1050_fail2792
    repr_bind_attr_int rx1050_cur, rx1050_curclass, "$!from", rx1050_pos
  rxscan1051_scan2797:
    nqp_rxmark rx1050_bstack, rxscan1051_loop2796, rx1050_pos, 0
  rxscan1051_done2798:
    repr_bind_attr_int rx1050_cur, rx1050_curclass, "$!pos", rx1050_pos
    $P11 = rx1050_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx1050_curclass, "$!pos"
    lt $I11, 0, rx1050_fail2792
    nqp_rxmark rx1050_bstack, rxsubrule1052_pass2799, -1, 0
  rxsubrule1052_pass2799:
    rx1050_cstack = rx1050_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx1050_pos, $P11, rx1050_curclass, "$!pos"
    add $I11, rx1050_pos, 1
    gt $I11, rx1050_eos, rx1050_fail2792
    substr $S10, rx1050_tgt, rx1050_pos, 1
    ne $S10, ucs4:"(", rx1050_fail2792
    add rx1050_pos, 1
    repr_bind_attr_int rx1050_cur, rx1050_curclass, "$!pos", rx1050_pos
    $P11 = rx1050_cur."semilist"()
    repr_get_attr_int $I11, $P11, rx1050_curclass, "$!pos"
    lt $I11, 0, rx1050_fail2792
    nqp_rxmark rx1050_bstack, rxsubrule1053_pass2800, -1, 0
  rxsubrule1053_pass2800:
    rx1050_cstack = rx1050_cur."!cursor_capture"($P11, "semilist")
    repr_get_attr_int rx1050_pos, $P11, rx1050_curclass, "$!pos"
  alt1054_02802:
    nqp_rxmark rx1050_bstack, alt1054_12803, rx1050_pos, 0
    add $I11, rx1050_pos, 1
    gt $I11, rx1050_eos, rx1050_fail2792
    substr $S10, rx1050_tgt, rx1050_pos, 1
    ne $S10, ucs4:")", rx1050_fail2792
    add rx1050_pos, 1
    goto alt1054_end2801
  alt1054_12803:
    repr_bind_attr_int rx1050_cur, rx1050_curclass, "$!pos", rx1050_pos
    $P11 = rx1050_cur."FAILGOAL"("')'")
    repr_get_attr_int $I11, $P11, rx1050_curclass, "$!pos"
    lt $I11, 0, rx1050_fail2792
    goto rxsubrule1055_pass2804
  rxsubrule1055_back2805:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx1050_curclass, "$!pos"
    lt $I11, 0, rx1050_fail2792
  rxsubrule1055_pass2804:
    rx1050_cstack = rx1050_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule1055_back2805
    push rx1050_bstack, $I11
    push rx1050_bstack, 0
    push rx1050_bstack, rx1050_pos
    elements $I11, rx1050_cstack
    push rx1050_bstack, $I11
    repr_get_attr_int rx1050_pos, $P11, rx1050_curclass, "$!pos"
  alt1054_end2801:
    rx1050_cur."!cursor_pass"(rx1050_pos, "circumfix:sym<sigil>", 'backtrack'=>1)
    .return (rx1050_cur)
  rx1050_restart2791:
    repr_get_attr_obj rx1050_cstack, rx1050_cur, rx1050_curclass, "$!cstack"
  rx1050_fail2792:
    unless rx1050_bstack, rx1050_done2790
    pop $I19, rx1050_bstack
    if_null rx1050_cstack, rx1050_cstack_done2795
    unless rx1050_cstack, rx1050_cstack_done2795
    dec $I19
    set $P11, rx1050_cstack[$I19]
  rx1050_cstack_done2795:
    pop rx1050_rep, rx1050_bstack
    pop rx1050_pos, rx1050_bstack
    pop $I19, rx1050_bstack
    lt rx1050_pos, -1, rx1050_done2790
    lt rx1050_pos, 0, rx1050_fail2792
    eq $I19, 0, rx1050_fail2792
    nqp_islist $I20, rx1050_cstack
    unless $I20, rx1050_jump2793
    elements $I18, rx1050_bstack
    le $I18, 0, rx1050_cut2794
    dec $I18
    set $I18, rx1050_bstack[$I18]
  rx1050_cut2794:
    assign rx1050_cstack, $I18
  rx1050_jump2793:
    jump $I19
  rx1050_done2790:
    rx1050_cur."!cursor_fail"()
    .return (rx1050_cur) 
.end
.HLL "nqp"
.namespace []
.sub "semilist" :subid("cuid_168_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1269
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1056_tgt
    .local int rx1056_pos
    .local int rx1056_off
    .local int rx1056_eos
    .local int rx1056_rep
    .local pmc rx1056_cur
    .local pmc rx1056_curclass
    .local pmc rx1056_bstack
    .local pmc rx1056_cstack
    (rx1056_cur, rx1056_tgt, rx1056_pos, rx1056_curclass, rx1056_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1056_cur
    length rx1056_eos, rx1056_tgt
    eq $I19, 1, rx1056_restart2808
    gt rx1056_pos, rx1056_eos, rx1056_fail2809
    repr_get_attr_int $I11, self, rx1056_curclass, "$!from"
    ne $I11, -1, rxscan1057_done2815
    goto rxscan1057_scan2814
  rxscan1057_loop2813:
    inc rx1056_pos
    gt rx1056_pos, rx1056_eos, rx1056_fail2809
    repr_bind_attr_int rx1056_cur, rx1056_curclass, "$!from", rx1056_pos
  rxscan1057_scan2814:
    nqp_rxmark rx1056_bstack, rxscan1057_loop2813, rx1056_pos, 0
  rxscan1057_done2815:
    repr_bind_attr_int rx1056_cur, rx1056_curclass, "$!pos", rx1056_pos
    $P11 = rx1056_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1056_curclass, "$!pos"
    lt $I11, 0, rx1056_fail2809
    repr_get_attr_int rx1056_pos, $P11, rx1056_curclass, "$!pos"
    repr_bind_attr_int rx1056_cur, rx1056_curclass, "$!pos", rx1056_pos
    $P11 = rx1056_cur."statement"()
    repr_get_attr_int $I11, $P11, rx1056_curclass, "$!pos"
    lt $I11, 0, rx1056_fail2809
    nqp_rxmark rx1056_bstack, rxsubrule1059_pass2817, -1, 0
  rxsubrule1059_pass2817:
    rx1056_cstack = rx1056_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx1056_pos, $P11, rx1056_curclass, "$!pos"
    repr_bind_attr_int rx1056_cur, rx1056_curclass, "$!pos", rx1056_pos
    $P11 = rx1056_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1056_curclass, "$!pos"
    lt $I11, 0, rx1056_fail2809
    repr_get_attr_int rx1056_pos, $P11, rx1056_curclass, "$!pos"
    rx1056_cur."!cursor_pass"(rx1056_pos, "semilist", 'backtrack'=>1)
    .return (rx1056_cur)
  rx1056_restart2808:
    repr_get_attr_obj rx1056_cstack, rx1056_cur, rx1056_curclass, "$!cstack"
  rx1056_fail2809:
    unless rx1056_bstack, rx1056_done2807
    pop $I19, rx1056_bstack
    if_null rx1056_cstack, rx1056_cstack_done2812
    unless rx1056_cstack, rx1056_cstack_done2812
    dec $I19
    set $P11, rx1056_cstack[$I19]
  rx1056_cstack_done2812:
    pop rx1056_rep, rx1056_bstack
    pop rx1056_pos, rx1056_bstack
    pop $I19, rx1056_bstack
    lt rx1056_pos, -1, rx1056_done2807
    lt rx1056_pos, 0, rx1056_fail2809
    eq $I19, 0, rx1056_fail2809
    nqp_islist $I20, rx1056_cstack
    unless $I20, rx1056_jump2810
    elements $I18, rx1056_bstack
    le $I18, 0, rx1056_cut2811
    dec $I18
    set $I18, rx1056_bstack[$I18]
  rx1056_cut2811:
    assign rx1056_cstack, $I18
  rx1056_jump2810:
    jump $I19
  rx1056_done2807:
    rx1056_cur."!cursor_fail"()
    .return (rx1056_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infixish" :subid("cuid_169_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1292
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1061_tgt
    .local int rx1061_pos
    .local int rx1061_off
    .local int rx1061_eos
    .local int rx1061_rep
    .local pmc rx1061_cur
    .local pmc rx1061_curclass
    .local pmc rx1061_bstack
    .local pmc rx1061_cstack
    (rx1061_cur, rx1061_tgt, rx1061_pos, rx1061_curclass, rx1061_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1061_cur
    length rx1061_eos, rx1061_tgt
    eq $I19, 1, rx1061_restart2821
    gt rx1061_pos, rx1061_eos, rx1061_fail2822
    repr_get_attr_int $I11, self, rx1061_curclass, "$!from"
    ne $I11, -1, rxscan1062_done2828
    goto rxscan1062_scan2827
  rxscan1062_loop2826:
    inc rx1061_pos
    gt rx1061_pos, rx1061_eos, rx1061_fail2822
    repr_bind_attr_int rx1061_cur, rx1061_curclass, "$!from", rx1061_pos
  rxscan1062_scan2827:
    nqp_rxmark rx1061_bstack, rxscan1062_loop2826, rx1061_pos, 0
  rxscan1062_done2828:
    repr_bind_attr_int rx1061_cur, rx1061_curclass, "$!pos", rx1061_pos
    $P11 = rx1061_cur."infixstopper"()
    repr_get_attr_int $I11, $P11, rx1061_curclass, "$!pos"
    ge $I11, 0, rx1061_fail2822
    repr_bind_attr_int rx1061_cur, rx1061_curclass, "$!pos", rx1061_pos
    $P11 = rx1061_cur."infix"()
    repr_get_attr_int $I11, $P11, rx1061_curclass, "$!pos"
    lt $I11, 0, rx1061_fail2822
    nqp_rxmark rx1061_bstack, rxsubrule1063_pass2829, -1, 0
  rxsubrule1063_pass2829:
    rx1061_cstack = rx1061_cur."!cursor_capture"($P11, "OPER=infix")
    repr_get_attr_int rx1061_pos, $P11, rx1061_curclass, "$!pos"
    rx1061_cur."!cursor_pass"(rx1061_pos, "infixish", 'backtrack'=>1)
    .return (rx1061_cur)
  rx1061_restart2821:
    repr_get_attr_obj rx1061_cstack, rx1061_cur, rx1061_curclass, "$!cstack"
  rx1061_fail2822:
    unless rx1061_bstack, rx1061_done2820
    pop $I19, rx1061_bstack
    if_null rx1061_cstack, rx1061_cstack_done2825
    unless rx1061_cstack, rx1061_cstack_done2825
    dec $I19
    set $P11, rx1061_cstack[$I19]
  rx1061_cstack_done2825:
    pop rx1061_rep, rx1061_bstack
    pop rx1061_pos, rx1061_bstack
    pop $I19, rx1061_bstack
    lt rx1061_pos, -1, rx1061_done2820
    lt rx1061_pos, 0, rx1061_fail2822
    eq $I19, 0, rx1061_fail2822
    nqp_islist $I20, rx1061_cstack
    unless $I20, rx1061_jump2823
    elements $I18, rx1061_bstack
    le $I18, 0, rx1061_cut2824
    dec $I18
    set $I18, rx1061_bstack[$I18]
  rx1061_cut2824:
    assign rx1061_cstack, $I18
  rx1061_jump2823:
    jump $I19
  rx1061_done2820:
    rx1061_cur."!cursor_fail"()
    .return (rx1061_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infixstopper" :subid("cuid_170_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1293
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1064_tgt
    .local int rx1064_pos
    .local int rx1064_off
    .local int rx1064_eos
    .local int rx1064_rep
    .local pmc rx1064_cur
    .local pmc rx1064_curclass
    .local pmc rx1064_bstack
    .local pmc rx1064_cstack
    (rx1064_cur, rx1064_tgt, rx1064_pos, rx1064_curclass, rx1064_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1064_cur
    length rx1064_eos, rx1064_tgt
    eq $I19, 1, rx1064_restart2832
    gt rx1064_pos, rx1064_eos, rx1064_fail2833
    repr_get_attr_int $I11, self, rx1064_curclass, "$!from"
    ne $I11, -1, rxscan1065_done2839
    goto rxscan1065_scan2838
  rxscan1065_loop2837:
    inc rx1064_pos
    gt rx1064_pos, rx1064_eos, rx1064_fail2833
    repr_bind_attr_int rx1064_cur, rx1064_curclass, "$!from", rx1064_pos
  rxscan1065_scan2838:
    nqp_rxmark rx1064_bstack, rxscan1065_loop2837, rx1064_pos, 0
  rxscan1065_done2839:
    repr_bind_attr_int rx1064_cur, rx1064_curclass, "$!pos", rx1064_pos
    $P11 = rx1064_cur."lambda"()
    repr_get_attr_int $I11, $P11, rx1064_curclass, "$!pos"
    lt $I11, 0, rx1064_fail2833
    rx1064_cur."!cursor_pass"(rx1064_pos, "infixstopper", 'backtrack'=>1)
    .return (rx1064_cur)
  rx1064_restart2832:
    repr_get_attr_obj rx1064_cstack, rx1064_cur, rx1064_curclass, "$!cstack"
  rx1064_fail2833:
    unless rx1064_bstack, rx1064_done2831
    pop $I19, rx1064_bstack
    if_null rx1064_cstack, rx1064_cstack_done2836
    unless rx1064_cstack, rx1064_cstack_done2836
    dec $I19
    set $P11, rx1064_cstack[$I19]
  rx1064_cstack_done2836:
    pop rx1064_rep, rx1064_bstack
    pop rx1064_pos, rx1064_bstack
    pop $I19, rx1064_bstack
    lt rx1064_pos, -1, rx1064_done2831
    lt rx1064_pos, 0, rx1064_fail2833
    eq $I19, 0, rx1064_fail2833
    nqp_islist $I20, rx1064_cstack
    unless $I20, rx1064_jump2834
    elements $I18, rx1064_bstack
    le $I18, 0, rx1064_cut2835
    dec $I18
    set $I18, rx1064_bstack[$I18]
  rx1064_cut2835:
    assign rx1064_cstack, $I18
  rx1064_jump2834:
    jump $I19
  rx1064_done2831:
    rx1064_cur."!cursor_fail"()
    .return (rx1064_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<[ ]>" :subid("cuid_171_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1295
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1066_tgt
    .local int rx1066_pos
    .local int rx1066_off
    .local int rx1066_eos
    .local int rx1066_rep
    .local pmc rx1066_cur
    .local pmc rx1066_curclass
    .local pmc rx1066_bstack
    .local pmc rx1066_cstack
    (rx1066_cur, rx1066_tgt, rx1066_pos, rx1066_curclass, rx1066_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1066_cur
    length rx1066_eos, rx1066_tgt
    eq $I19, 1, rx1066_restart2842
    gt rx1066_pos, rx1066_eos, rx1066_fail2843
    repr_get_attr_int $I11, self, rx1066_curclass, "$!from"
    ne $I11, -1, rxscan1067_done2849
    goto rxscan1067_scan2848
  rxscan1067_loop2847:
    inc rx1066_pos
    gt rx1066_pos, rx1066_eos, rx1066_fail2843
    repr_bind_attr_int rx1066_cur, rx1066_curclass, "$!from", rx1066_pos
  rxscan1067_scan2848:
    nqp_rxmark rx1066_bstack, rxscan1067_loop2847, rx1066_pos, 0
  rxscan1067_done2849:
    add $I11, rx1066_pos, 1
    gt $I11, rx1066_eos, rx1066_fail2843
    substr $S10, rx1066_tgt, rx1066_pos, 1
    ne $S10, ucs4:"[", rx1066_fail2843
    add rx1066_pos, 1
    repr_bind_attr_int rx1066_cur, rx1066_curclass, "$!pos", rx1066_pos
    $P11 = rx1066_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1066_curclass, "$!pos"
    lt $I11, 0, rx1066_fail2843
    repr_get_attr_int rx1066_pos, $P11, rx1066_curclass, "$!pos"
    repr_bind_attr_int rx1066_cur, rx1066_curclass, "$!pos", rx1066_pos
    $P11 = rx1066_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx1066_curclass, "$!pos"
    lt $I11, 0, rx1066_fail2843
    nqp_rxmark rx1066_bstack, rxsubrule1069_pass2851, -1, 0
  rxsubrule1069_pass2851:
    rx1066_cstack = rx1066_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx1066_pos, $P11, rx1066_curclass, "$!pos"
    add $I11, rx1066_pos, 1
    gt $I11, rx1066_eos, rx1066_fail2843
    substr $S10, rx1066_tgt, rx1066_pos, 1
    ne $S10, ucs4:"]", rx1066_fail2843
    add rx1066_pos, 1
    repr_bind_attr_int rx1066_cur, rx1066_curclass, "$!pos", rx1066_pos
    $P11 = rx1066_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1066_curclass, "$!pos"
    lt $I11, 0, rx1066_fail2843
    nqp_rxmark rx1066_bstack, rxsubrule1070_pass2852, -1, 0
  rxsubrule1070_pass2852:
    rx1066_cstack = rx1066_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1066_pos, $P11, rx1066_curclass, "$!pos"
    rx1066_cur."!cursor_pass"(rx1066_pos, "postcircumfix:sym<[ ]>", 'backtrack'=>1)
    .return (rx1066_cur)
  rx1066_restart2842:
    repr_get_attr_obj rx1066_cstack, rx1066_cur, rx1066_curclass, "$!cstack"
  rx1066_fail2843:
    unless rx1066_bstack, rx1066_done2841
    pop $I19, rx1066_bstack
    if_null rx1066_cstack, rx1066_cstack_done2846
    unless rx1066_cstack, rx1066_cstack_done2846
    dec $I19
    set $P11, rx1066_cstack[$I19]
  rx1066_cstack_done2846:
    pop rx1066_rep, rx1066_bstack
    pop rx1066_pos, rx1066_bstack
    pop $I19, rx1066_bstack
    lt rx1066_pos, -1, rx1066_done2841
    lt rx1066_pos, 0, rx1066_fail2843
    eq $I19, 0, rx1066_fail2843
    nqp_islist $I20, rx1066_cstack
    unless $I20, rx1066_jump2844
    elements $I18, rx1066_bstack
    le $I18, 0, rx1066_cut2845
    dec $I18
    set $I18, rx1066_bstack[$I18]
  rx1066_cut2845:
    assign rx1066_cstack, $I18
  rx1066_jump2844:
    jump $I19
  rx1066_done2841:
    rx1066_cur."!cursor_fail"()
    .return (rx1066_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<{ }>" :subid("cuid_172_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1300
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1071_tgt
    .local int rx1071_pos
    .local int rx1071_off
    .local int rx1071_eos
    .local int rx1071_rep
    .local pmc rx1071_cur
    .local pmc rx1071_curclass
    .local pmc rx1071_bstack
    .local pmc rx1071_cstack
    (rx1071_cur, rx1071_tgt, rx1071_pos, rx1071_curclass, rx1071_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1071_cur
    length rx1071_eos, rx1071_tgt
    eq $I19, 1, rx1071_restart2855
    gt rx1071_pos, rx1071_eos, rx1071_fail2856
    repr_get_attr_int $I11, self, rx1071_curclass, "$!from"
    ne $I11, -1, rxscan1072_done2862
    goto rxscan1072_scan2861
  rxscan1072_loop2860:
    inc rx1071_pos
    gt rx1071_pos, rx1071_eos, rx1071_fail2856
    repr_bind_attr_int rx1071_cur, rx1071_curclass, "$!from", rx1071_pos
  rxscan1072_scan2861:
    nqp_rxmark rx1071_bstack, rxscan1072_loop2860, rx1071_pos, 0
  rxscan1072_done2862:
    add $I11, rx1071_pos, 1
    gt $I11, rx1071_eos, rx1071_fail2856
    substr $S10, rx1071_tgt, rx1071_pos, 1
    ne $S10, ucs4:"{", rx1071_fail2856
    add rx1071_pos, 1
    repr_bind_attr_int rx1071_cur, rx1071_curclass, "$!pos", rx1071_pos
    $P11 = rx1071_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1071_curclass, "$!pos"
    lt $I11, 0, rx1071_fail2856
    repr_get_attr_int rx1071_pos, $P11, rx1071_curclass, "$!pos"
    repr_bind_attr_int rx1071_cur, rx1071_curclass, "$!pos", rx1071_pos
    $P11 = rx1071_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx1071_curclass, "$!pos"
    lt $I11, 0, rx1071_fail2856
    nqp_rxmark rx1071_bstack, rxsubrule1074_pass2864, -1, 0
  rxsubrule1074_pass2864:
    rx1071_cstack = rx1071_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx1071_pos, $P11, rx1071_curclass, "$!pos"
    add $I11, rx1071_pos, 1
    gt $I11, rx1071_eos, rx1071_fail2856
    substr $S10, rx1071_tgt, rx1071_pos, 1
    ne $S10, ucs4:"}", rx1071_fail2856
    add rx1071_pos, 1
    repr_bind_attr_int rx1071_cur, rx1071_curclass, "$!pos", rx1071_pos
    $P11 = rx1071_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1071_curclass, "$!pos"
    lt $I11, 0, rx1071_fail2856
    nqp_rxmark rx1071_bstack, rxsubrule1075_pass2865, -1, 0
  rxsubrule1075_pass2865:
    rx1071_cstack = rx1071_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1071_pos, $P11, rx1071_curclass, "$!pos"
    rx1071_cur."!cursor_pass"(rx1071_pos, "postcircumfix:sym<{ }>", 'backtrack'=>1)
    .return (rx1071_cur)
  rx1071_restart2855:
    repr_get_attr_obj rx1071_cstack, rx1071_cur, rx1071_curclass, "$!cstack"
  rx1071_fail2856:
    unless rx1071_bstack, rx1071_done2854
    pop $I19, rx1071_bstack
    if_null rx1071_cstack, rx1071_cstack_done2859
    unless rx1071_cstack, rx1071_cstack_done2859
    dec $I19
    set $P11, rx1071_cstack[$I19]
  rx1071_cstack_done2859:
    pop rx1071_rep, rx1071_bstack
    pop rx1071_pos, rx1071_bstack
    pop $I19, rx1071_bstack
    lt rx1071_pos, -1, rx1071_done2854
    lt rx1071_pos, 0, rx1071_fail2856
    eq $I19, 0, rx1071_fail2856
    nqp_islist $I20, rx1071_cstack
    unless $I20, rx1071_jump2857
    elements $I18, rx1071_bstack
    le $I18, 0, rx1071_cut2858
    dec $I18
    set $I18, rx1071_bstack[$I18]
  rx1071_cut2858:
    assign rx1071_cstack, $I18
  rx1071_jump2857:
    jump $I19
  rx1071_done2854:
    rx1071_cur."!cursor_fail"()
    .return (rx1071_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<ang>" :subid("cuid_173_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1305
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1076_tgt
    .local int rx1076_pos
    .local int rx1076_off
    .local int rx1076_eos
    .local int rx1076_rep
    .local pmc rx1076_cur
    .local pmc rx1076_curclass
    .local pmc rx1076_bstack
    .local pmc rx1076_cstack
    (rx1076_cur, rx1076_tgt, rx1076_pos, rx1076_curclass, rx1076_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1076_cur
    length rx1076_eos, rx1076_tgt
    eq $I19, 1, rx1076_restart2868
    gt rx1076_pos, rx1076_eos, rx1076_fail2869
    repr_get_attr_int $I11, self, rx1076_curclass, "$!from"
    ne $I11, -1, rxscan1077_done2875
    goto rxscan1077_scan2874
  rxscan1077_loop2873:
    inc rx1076_pos
    gt rx1076_pos, rx1076_eos, rx1076_fail2869
    repr_bind_attr_int rx1076_cur, rx1076_curclass, "$!from", rx1076_pos
  rxscan1077_scan2874:
    nqp_rxmark rx1076_bstack, rxscan1077_loop2873, rx1076_pos, 0
  rxscan1077_done2875:
    ge rx1076_pos, rx1076_eos, rx1076_fail2869
    substr $S11, rx1076_tgt, rx1076_pos, 1
    index $I11, ucs4:"<", $S11
    lt $I11, 0, rx1076_fail2869
    repr_bind_attr_int rx1076_cur, rx1076_curclass, "$!pos", rx1076_pos
    $P11 = rx1076_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx1076_curclass, "$!pos"
    lt $I11, 0, rx1076_fail2869
    nqp_rxmark rx1076_bstack, rxsubrule1078_pass2876, -1, 0
  rxsubrule1078_pass2876:
    rx1076_cstack = rx1076_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1076_pos, $P11, rx1076_curclass, "$!pos"
    repr_bind_attr_int rx1076_cur, rx1076_curclass, "$!pos", rx1076_pos
    $P11 = rx1076_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1076_curclass, "$!pos"
    lt $I11, 0, rx1076_fail2869
    nqp_rxmark rx1076_bstack, rxsubrule1079_pass2877, -1, 0
  rxsubrule1079_pass2877:
    rx1076_cstack = rx1076_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1076_pos, $P11, rx1076_curclass, "$!pos"
    rx1076_cur."!cursor_pass"(rx1076_pos, "postcircumfix:sym<ang>", 'backtrack'=>1)
    .return (rx1076_cur)
  rx1076_restart2868:
    repr_get_attr_obj rx1076_cstack, rx1076_cur, rx1076_curclass, "$!cstack"
  rx1076_fail2869:
    unless rx1076_bstack, rx1076_done2867
    pop $I19, rx1076_bstack
    if_null rx1076_cstack, rx1076_cstack_done2872
    unless rx1076_cstack, rx1076_cstack_done2872
    dec $I19
    set $P11, rx1076_cstack[$I19]
  rx1076_cstack_done2872:
    pop rx1076_rep, rx1076_bstack
    pop rx1076_pos, rx1076_bstack
    pop $I19, rx1076_bstack
    lt rx1076_pos, -1, rx1076_done2867
    lt rx1076_pos, 0, rx1076_fail2869
    eq $I19, 0, rx1076_fail2869
    nqp_islist $I20, rx1076_cstack
    unless $I20, rx1076_jump2870
    elements $I18, rx1076_bstack
    le $I18, 0, rx1076_cut2871
    dec $I18
    set $I18, rx1076_bstack[$I18]
  rx1076_cut2871:
    assign rx1076_cstack, $I18
  rx1076_jump2870:
    jump $I19
  rx1076_done2867:
    rx1076_cur."!cursor_fail"()
    .return (rx1076_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<( )>" :subid("cuid_174_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1310
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1080_tgt
    .local int rx1080_pos
    .local int rx1080_off
    .local int rx1080_eos
    .local int rx1080_rep
    .local pmc rx1080_cur
    .local pmc rx1080_curclass
    .local pmc rx1080_bstack
    .local pmc rx1080_cstack
    (rx1080_cur, rx1080_tgt, rx1080_pos, rx1080_curclass, rx1080_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1080_cur
    length rx1080_eos, rx1080_tgt
    eq $I19, 1, rx1080_restart2880
    gt rx1080_pos, rx1080_eos, rx1080_fail2881
    repr_get_attr_int $I11, self, rx1080_curclass, "$!from"
    ne $I11, -1, rxscan1081_done2887
    goto rxscan1081_scan2886
  rxscan1081_loop2885:
    inc rx1080_pos
    gt rx1080_pos, rx1080_eos, rx1080_fail2881
    repr_bind_attr_int rx1080_cur, rx1080_curclass, "$!from", rx1080_pos
  rxscan1081_scan2886:
    nqp_rxmark rx1080_bstack, rxscan1081_loop2885, rx1080_pos, 0
  rxscan1081_done2887:
    add $I11, rx1080_pos, 1
    gt $I11, rx1080_eos, rx1080_fail2881
    substr $S10, rx1080_tgt, rx1080_pos, 1
    ne $S10, ucs4:"(", rx1080_fail2881
    add rx1080_pos, 1
    repr_bind_attr_int rx1080_cur, rx1080_curclass, "$!pos", rx1080_pos
    $P11 = rx1080_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1080_curclass, "$!pos"
    lt $I11, 0, rx1080_fail2881
    repr_get_attr_int rx1080_pos, $P11, rx1080_curclass, "$!pos"
    repr_bind_attr_int rx1080_cur, rx1080_curclass, "$!pos", rx1080_pos
    $P11 = rx1080_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx1080_curclass, "$!pos"
    lt $I11, 0, rx1080_fail2881
    nqp_rxmark rx1080_bstack, rxsubrule1083_pass2889, -1, 0
  rxsubrule1083_pass2889:
    rx1080_cstack = rx1080_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx1080_pos, $P11, rx1080_curclass, "$!pos"
    add $I11, rx1080_pos, 1
    gt $I11, rx1080_eos, rx1080_fail2881
    substr $S10, rx1080_tgt, rx1080_pos, 1
    ne $S10, ucs4:")", rx1080_fail2881
    add rx1080_pos, 1
    repr_bind_attr_int rx1080_cur, rx1080_curclass, "$!pos", rx1080_pos
    $P11 = rx1080_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1080_curclass, "$!pos"
    lt $I11, 0, rx1080_fail2881
    nqp_rxmark rx1080_bstack, rxsubrule1084_pass2890, -1, 0
  rxsubrule1084_pass2890:
    rx1080_cstack = rx1080_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1080_pos, $P11, rx1080_curclass, "$!pos"
    rx1080_cur."!cursor_pass"(rx1080_pos, "postcircumfix:sym<( )>", 'backtrack'=>1)
    .return (rx1080_cur)
  rx1080_restart2880:
    repr_get_attr_obj rx1080_cstack, rx1080_cur, rx1080_curclass, "$!cstack"
  rx1080_fail2881:
    unless rx1080_bstack, rx1080_done2879
    pop $I19, rx1080_bstack
    if_null rx1080_cstack, rx1080_cstack_done2884
    unless rx1080_cstack, rx1080_cstack_done2884
    dec $I19
    set $P11, rx1080_cstack[$I19]
  rx1080_cstack_done2884:
    pop rx1080_rep, rx1080_bstack
    pop rx1080_pos, rx1080_bstack
    pop $I19, rx1080_bstack
    lt rx1080_pos, -1, rx1080_done2879
    lt rx1080_pos, 0, rx1080_fail2881
    eq $I19, 0, rx1080_fail2881
    nqp_islist $I20, rx1080_cstack
    unless $I20, rx1080_jump2882
    elements $I18, rx1080_bstack
    le $I18, 0, rx1080_cut2883
    dec $I18
    set $I18, rx1080_bstack[$I18]
  rx1080_cut2883:
    assign rx1080_cstack, $I18
  rx1080_jump2882:
    jump $I19
  rx1080_done2879:
    rx1080_cur."!cursor_fail"()
    .return (rx1080_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<.>" :subid("cuid_175_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1315
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1085_tgt
    .local int rx1085_pos
    .local int rx1085_off
    .local int rx1085_eos
    .local int rx1085_rep
    .local pmc rx1085_cur
    .local pmc rx1085_curclass
    .local pmc rx1085_bstack
    .local pmc rx1085_cstack
    (rx1085_cur, rx1085_tgt, rx1085_pos, rx1085_curclass, rx1085_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1085_cur
    length rx1085_eos, rx1085_tgt
    eq $I19, 1, rx1085_restart2893
    gt rx1085_pos, rx1085_eos, rx1085_fail2894
    repr_get_attr_int $I11, self, rx1085_curclass, "$!from"
    ne $I11, -1, rxscan1086_done2900
    goto rxscan1086_scan2899
  rxscan1086_loop2898:
    inc rx1085_pos
    gt rx1085_pos, rx1085_eos, rx1085_fail2894
    repr_bind_attr_int rx1085_cur, rx1085_curclass, "$!from", rx1085_pos
  rxscan1086_scan2899:
    nqp_rxmark rx1085_bstack, rxscan1086_loop2898, rx1085_pos, 0
  rxscan1086_done2900:
    repr_bind_attr_int rx1085_cur, rx1085_curclass, "$!pos", rx1085_pos
    $P11 = rx1085_cur."dotty"()
    repr_get_attr_int $I11, $P11, rx1085_curclass, "$!pos"
    lt $I11, 0, rx1085_fail2894
    nqp_rxmark rx1085_bstack, rxsubrule1087_pass2901, -1, 0
  rxsubrule1087_pass2901:
    rx1085_cstack = rx1085_cur."!cursor_capture"($P11, "dotty")
    repr_get_attr_int rx1085_pos, $P11, rx1085_curclass, "$!pos"
    repr_bind_attr_int rx1085_cur, rx1085_curclass, "$!pos", rx1085_pos
    $P11 = rx1085_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1085_curclass, "$!pos"
    lt $I11, 0, rx1085_fail2894
    nqp_rxmark rx1085_bstack, rxsubrule1088_pass2902, -1, 0
  rxsubrule1088_pass2902:
    rx1085_cstack = rx1085_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1085_pos, $P11, rx1085_curclass, "$!pos"
    rx1085_cur."!cursor_pass"(rx1085_pos, "postfix:sym<.>", 'backtrack'=>1)
    .return (rx1085_cur)
  rx1085_restart2893:
    repr_get_attr_obj rx1085_cstack, rx1085_cur, rx1085_curclass, "$!cstack"
  rx1085_fail2894:
    unless rx1085_bstack, rx1085_done2892
    pop $I19, rx1085_bstack
    if_null rx1085_cstack, rx1085_cstack_done2897
    unless rx1085_cstack, rx1085_cstack_done2897
    dec $I19
    set $P11, rx1085_cstack[$I19]
  rx1085_cstack_done2897:
    pop rx1085_rep, rx1085_bstack
    pop rx1085_pos, rx1085_bstack
    pop $I19, rx1085_bstack
    lt rx1085_pos, -1, rx1085_done2892
    lt rx1085_pos, 0, rx1085_fail2894
    eq $I19, 0, rx1085_fail2894
    nqp_islist $I20, rx1085_cstack
    unless $I20, rx1085_jump2895
    elements $I18, rx1085_bstack
    le $I18, 0, rx1085_cut2896
    dec $I18
    set $I18, rx1085_bstack[$I18]
  rx1085_cut2896:
    assign rx1085_cstack, $I18
  rx1085_jump2895:
    jump $I19
  rx1085_done2892:
    rx1085_cur."!cursor_fail"()
    .return (rx1085_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<++>" :subid("cuid_176_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1317
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1089_tgt
    .local int rx1089_pos
    .local int rx1089_off
    .local int rx1089_eos
    .local int rx1089_rep
    .local pmc rx1089_cur
    .local pmc rx1089_curclass
    .local pmc rx1089_bstack
    .local pmc rx1089_cstack
    (rx1089_cur, rx1089_tgt, rx1089_pos, rx1089_curclass, rx1089_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1089_cur
    length rx1089_eos, rx1089_tgt
    eq $I19, 1, rx1089_restart2905
    gt rx1089_pos, rx1089_eos, rx1089_fail2906
    repr_get_attr_int $I11, self, rx1089_curclass, "$!from"
    ne $I11, -1, rxscan1090_done2912
    goto rxscan1090_scan2911
  rxscan1090_loop2910:
    inc rx1089_pos
    gt rx1089_pos, rx1089_eos, rx1089_fail2906
    repr_bind_attr_int rx1089_cur, rx1089_curclass, "$!from", rx1089_pos
  rxscan1090_scan2911:
    nqp_rxmark rx1089_bstack, rxscan1090_loop2910, rx1089_pos, 0
  rxscan1090_done2912:
    nqp_rxmark rx1089_bstack, rxcap1091_fail2914, rx1089_pos, 0
    add $I11, rx1089_pos, 2
    gt $I11, rx1089_eos, rx1089_fail2906
    substr $S10, rx1089_tgt, rx1089_pos, 2
    ne $S10, ucs4:"++", rx1089_fail2906
    add rx1089_pos, 2
    nqp_rxpeek $I19, rx1089_bstack, rxcap1091_fail2914
    inc $I19
    set $I11, rx1089_bstack[$I19]
    repr_bind_attr_int rx1089_cur, rx1089_curclass, "$!pos", rx1089_pos
    $P11 = rx1089_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1089_pos)
    rx1089_cstack = rx1089_cur."!cursor_capture"($P11, "sym")
    goto rxcap1091_done2913
  rxcap1091_fail2914:
    goto rx1089_fail2906
  rxcap1091_done2913:
    repr_bind_attr_int rx1089_cur, rx1089_curclass, "$!pos", rx1089_pos
    $P11 = rx1089_cur."O"("%autoincrement, :op<preinc>")
    repr_get_attr_int $I11, $P11, rx1089_curclass, "$!pos"
    lt $I11, 0, rx1089_fail2906
    nqp_rxmark rx1089_bstack, rxsubrule1092_pass2915, -1, 0
  rxsubrule1092_pass2915:
    rx1089_cstack = rx1089_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1089_pos, $P11, rx1089_curclass, "$!pos"
    rx1089_cur."!cursor_pass"(rx1089_pos, "prefix:sym<++>", 'backtrack'=>1)
    .return (rx1089_cur)
  rx1089_restart2905:
    repr_get_attr_obj rx1089_cstack, rx1089_cur, rx1089_curclass, "$!cstack"
  rx1089_fail2906:
    unless rx1089_bstack, rx1089_done2904
    pop $I19, rx1089_bstack
    if_null rx1089_cstack, rx1089_cstack_done2909
    unless rx1089_cstack, rx1089_cstack_done2909
    dec $I19
    set $P11, rx1089_cstack[$I19]
  rx1089_cstack_done2909:
    pop rx1089_rep, rx1089_bstack
    pop rx1089_pos, rx1089_bstack
    pop $I19, rx1089_bstack
    lt rx1089_pos, -1, rx1089_done2904
    lt rx1089_pos, 0, rx1089_fail2906
    eq $I19, 0, rx1089_fail2906
    nqp_islist $I20, rx1089_cstack
    unless $I20, rx1089_jump2907
    elements $I18, rx1089_bstack
    le $I18, 0, rx1089_cut2908
    dec $I18
    set $I18, rx1089_bstack[$I18]
  rx1089_cut2908:
    assign rx1089_cstack, $I18
  rx1089_jump2907:
    jump $I19
  rx1089_done2904:
    rx1089_cur."!cursor_fail"()
    .return (rx1089_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<-->" :subid("cuid_177_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1318
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1093_tgt
    .local int rx1093_pos
    .local int rx1093_off
    .local int rx1093_eos
    .local int rx1093_rep
    .local pmc rx1093_cur
    .local pmc rx1093_curclass
    .local pmc rx1093_bstack
    .local pmc rx1093_cstack
    (rx1093_cur, rx1093_tgt, rx1093_pos, rx1093_curclass, rx1093_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1093_cur
    length rx1093_eos, rx1093_tgt
    eq $I19, 1, rx1093_restart2918
    gt rx1093_pos, rx1093_eos, rx1093_fail2919
    repr_get_attr_int $I11, self, rx1093_curclass, "$!from"
    ne $I11, -1, rxscan1094_done2925
    goto rxscan1094_scan2924
  rxscan1094_loop2923:
    inc rx1093_pos
    gt rx1093_pos, rx1093_eos, rx1093_fail2919
    repr_bind_attr_int rx1093_cur, rx1093_curclass, "$!from", rx1093_pos
  rxscan1094_scan2924:
    nqp_rxmark rx1093_bstack, rxscan1094_loop2923, rx1093_pos, 0
  rxscan1094_done2925:
    nqp_rxmark rx1093_bstack, rxcap1095_fail2927, rx1093_pos, 0
    add $I11, rx1093_pos, 2
    gt $I11, rx1093_eos, rx1093_fail2919
    substr $S10, rx1093_tgt, rx1093_pos, 2
    ne $S10, ucs4:"--", rx1093_fail2919
    add rx1093_pos, 2
    nqp_rxpeek $I19, rx1093_bstack, rxcap1095_fail2927
    inc $I19
    set $I11, rx1093_bstack[$I19]
    repr_bind_attr_int rx1093_cur, rx1093_curclass, "$!pos", rx1093_pos
    $P11 = rx1093_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1093_pos)
    rx1093_cstack = rx1093_cur."!cursor_capture"($P11, "sym")
    goto rxcap1095_done2926
  rxcap1095_fail2927:
    goto rx1093_fail2919
  rxcap1095_done2926:
    repr_bind_attr_int rx1093_cur, rx1093_curclass, "$!pos", rx1093_pos
    $P11 = rx1093_cur."O"("%autoincrement, :op<predec>")
    repr_get_attr_int $I11, $P11, rx1093_curclass, "$!pos"
    lt $I11, 0, rx1093_fail2919
    nqp_rxmark rx1093_bstack, rxsubrule1096_pass2928, -1, 0
  rxsubrule1096_pass2928:
    rx1093_cstack = rx1093_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1093_pos, $P11, rx1093_curclass, "$!pos"
    rx1093_cur."!cursor_pass"(rx1093_pos, "prefix:sym<-->", 'backtrack'=>1)
    .return (rx1093_cur)
  rx1093_restart2918:
    repr_get_attr_obj rx1093_cstack, rx1093_cur, rx1093_curclass, "$!cstack"
  rx1093_fail2919:
    unless rx1093_bstack, rx1093_done2917
    pop $I19, rx1093_bstack
    if_null rx1093_cstack, rx1093_cstack_done2922
    unless rx1093_cstack, rx1093_cstack_done2922
    dec $I19
    set $P11, rx1093_cstack[$I19]
  rx1093_cstack_done2922:
    pop rx1093_rep, rx1093_bstack
    pop rx1093_pos, rx1093_bstack
    pop $I19, rx1093_bstack
    lt rx1093_pos, -1, rx1093_done2917
    lt rx1093_pos, 0, rx1093_fail2919
    eq $I19, 0, rx1093_fail2919
    nqp_islist $I20, rx1093_cstack
    unless $I20, rx1093_jump2920
    elements $I18, rx1093_bstack
    le $I18, 0, rx1093_cut2921
    dec $I18
    set $I18, rx1093_bstack[$I18]
  rx1093_cut2921:
    assign rx1093_cstack, $I18
  rx1093_jump2920:
    jump $I19
  rx1093_done2917:
    rx1093_cur."!cursor_fail"()
    .return (rx1093_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<++>" :subid("cuid_178_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1320
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1097_tgt
    .local int rx1097_pos
    .local int rx1097_off
    .local int rx1097_eos
    .local int rx1097_rep
    .local pmc rx1097_cur
    .local pmc rx1097_curclass
    .local pmc rx1097_bstack
    .local pmc rx1097_cstack
    (rx1097_cur, rx1097_tgt, rx1097_pos, rx1097_curclass, rx1097_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1097_cur
    length rx1097_eos, rx1097_tgt
    eq $I19, 1, rx1097_restart2931
    gt rx1097_pos, rx1097_eos, rx1097_fail2932
    repr_get_attr_int $I11, self, rx1097_curclass, "$!from"
    ne $I11, -1, rxscan1098_done2938
    goto rxscan1098_scan2937
  rxscan1098_loop2936:
    inc rx1097_pos
    gt rx1097_pos, rx1097_eos, rx1097_fail2932
    repr_bind_attr_int rx1097_cur, rx1097_curclass, "$!from", rx1097_pos
  rxscan1098_scan2937:
    nqp_rxmark rx1097_bstack, rxscan1098_loop2936, rx1097_pos, 0
  rxscan1098_done2938:
    nqp_rxmark rx1097_bstack, rxcap1099_fail2940, rx1097_pos, 0
    add $I11, rx1097_pos, 2
    gt $I11, rx1097_eos, rx1097_fail2932
    substr $S10, rx1097_tgt, rx1097_pos, 2
    ne $S10, ucs4:"++", rx1097_fail2932
    add rx1097_pos, 2
    nqp_rxpeek $I19, rx1097_bstack, rxcap1099_fail2940
    inc $I19
    set $I11, rx1097_bstack[$I19]
    repr_bind_attr_int rx1097_cur, rx1097_curclass, "$!pos", rx1097_pos
    $P11 = rx1097_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1097_pos)
    rx1097_cstack = rx1097_cur."!cursor_capture"($P11, "sym")
    goto rxcap1099_done2939
  rxcap1099_fail2940:
    goto rx1097_fail2932
  rxcap1099_done2939:
    repr_bind_attr_int rx1097_cur, rx1097_curclass, "$!pos", rx1097_pos
    $P11 = rx1097_cur."O"("%autoincrement, :op<postinc>")
    repr_get_attr_int $I11, $P11, rx1097_curclass, "$!pos"
    lt $I11, 0, rx1097_fail2932
    nqp_rxmark rx1097_bstack, rxsubrule1100_pass2941, -1, 0
  rxsubrule1100_pass2941:
    rx1097_cstack = rx1097_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1097_pos, $P11, rx1097_curclass, "$!pos"
    rx1097_cur."!cursor_pass"(rx1097_pos, "postfix:sym<++>", 'backtrack'=>1)
    .return (rx1097_cur)
  rx1097_restart2931:
    repr_get_attr_obj rx1097_cstack, rx1097_cur, rx1097_curclass, "$!cstack"
  rx1097_fail2932:
    unless rx1097_bstack, rx1097_done2930
    pop $I19, rx1097_bstack
    if_null rx1097_cstack, rx1097_cstack_done2935
    unless rx1097_cstack, rx1097_cstack_done2935
    dec $I19
    set $P11, rx1097_cstack[$I19]
  rx1097_cstack_done2935:
    pop rx1097_rep, rx1097_bstack
    pop rx1097_pos, rx1097_bstack
    pop $I19, rx1097_bstack
    lt rx1097_pos, -1, rx1097_done2930
    lt rx1097_pos, 0, rx1097_fail2932
    eq $I19, 0, rx1097_fail2932
    nqp_islist $I20, rx1097_cstack
    unless $I20, rx1097_jump2933
    elements $I18, rx1097_bstack
    le $I18, 0, rx1097_cut2934
    dec $I18
    set $I18, rx1097_bstack[$I18]
  rx1097_cut2934:
    assign rx1097_cstack, $I18
  rx1097_jump2933:
    jump $I19
  rx1097_done2930:
    rx1097_cur."!cursor_fail"()
    .return (rx1097_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<-->" :subid("cuid_179_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1321
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1101_tgt
    .local int rx1101_pos
    .local int rx1101_off
    .local int rx1101_eos
    .local int rx1101_rep
    .local pmc rx1101_cur
    .local pmc rx1101_curclass
    .local pmc rx1101_bstack
    .local pmc rx1101_cstack
    (rx1101_cur, rx1101_tgt, rx1101_pos, rx1101_curclass, rx1101_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1101_cur
    length rx1101_eos, rx1101_tgt
    eq $I19, 1, rx1101_restart2944
    gt rx1101_pos, rx1101_eos, rx1101_fail2945
    repr_get_attr_int $I11, self, rx1101_curclass, "$!from"
    ne $I11, -1, rxscan1102_done2951
    goto rxscan1102_scan2950
  rxscan1102_loop2949:
    inc rx1101_pos
    gt rx1101_pos, rx1101_eos, rx1101_fail2945
    repr_bind_attr_int rx1101_cur, rx1101_curclass, "$!from", rx1101_pos
  rxscan1102_scan2950:
    nqp_rxmark rx1101_bstack, rxscan1102_loop2949, rx1101_pos, 0
  rxscan1102_done2951:
    nqp_rxmark rx1101_bstack, rxcap1103_fail2953, rx1101_pos, 0
    add $I11, rx1101_pos, 2
    gt $I11, rx1101_eos, rx1101_fail2945
    substr $S10, rx1101_tgt, rx1101_pos, 2
    ne $S10, ucs4:"--", rx1101_fail2945
    add rx1101_pos, 2
    nqp_rxpeek $I19, rx1101_bstack, rxcap1103_fail2953
    inc $I19
    set $I11, rx1101_bstack[$I19]
    repr_bind_attr_int rx1101_cur, rx1101_curclass, "$!pos", rx1101_pos
    $P11 = rx1101_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1101_pos)
    rx1101_cstack = rx1101_cur."!cursor_capture"($P11, "sym")
    goto rxcap1103_done2952
  rxcap1103_fail2953:
    goto rx1101_fail2945
  rxcap1103_done2952:
    repr_bind_attr_int rx1101_cur, rx1101_curclass, "$!pos", rx1101_pos
    $P11 = rx1101_cur."O"("%autoincrement, :op<postdec>")
    repr_get_attr_int $I11, $P11, rx1101_curclass, "$!pos"
    lt $I11, 0, rx1101_fail2945
    nqp_rxmark rx1101_bstack, rxsubrule1104_pass2954, -1, 0
  rxsubrule1104_pass2954:
    rx1101_cstack = rx1101_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1101_pos, $P11, rx1101_curclass, "$!pos"
    rx1101_cur."!cursor_pass"(rx1101_pos, "postfix:sym<-->", 'backtrack'=>1)
    .return (rx1101_cur)
  rx1101_restart2944:
    repr_get_attr_obj rx1101_cstack, rx1101_cur, rx1101_curclass, "$!cstack"
  rx1101_fail2945:
    unless rx1101_bstack, rx1101_done2943
    pop $I19, rx1101_bstack
    if_null rx1101_cstack, rx1101_cstack_done2948
    unless rx1101_cstack, rx1101_cstack_done2948
    dec $I19
    set $P11, rx1101_cstack[$I19]
  rx1101_cstack_done2948:
    pop rx1101_rep, rx1101_bstack
    pop rx1101_pos, rx1101_bstack
    pop $I19, rx1101_bstack
    lt rx1101_pos, -1, rx1101_done2943
    lt rx1101_pos, 0, rx1101_fail2945
    eq $I19, 0, rx1101_fail2945
    nqp_islist $I20, rx1101_cstack
    unless $I20, rx1101_jump2946
    elements $I18, rx1101_bstack
    le $I18, 0, rx1101_cut2947
    dec $I18
    set $I18, rx1101_bstack[$I18]
  rx1101_cut2947:
    assign rx1101_cstack, $I18
  rx1101_jump2946:
    jump $I19
  rx1101_done2943:
    rx1101_cur."!cursor_fail"()
    .return (rx1101_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<**>" :subid("cuid_180_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1323
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1105_tgt
    .local int rx1105_pos
    .local int rx1105_off
    .local int rx1105_eos
    .local int rx1105_rep
    .local pmc rx1105_cur
    .local pmc rx1105_curclass
    .local pmc rx1105_bstack
    .local pmc rx1105_cstack
    (rx1105_cur, rx1105_tgt, rx1105_pos, rx1105_curclass, rx1105_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1105_cur
    length rx1105_eos, rx1105_tgt
    eq $I19, 1, rx1105_restart2957
    gt rx1105_pos, rx1105_eos, rx1105_fail2958
    repr_get_attr_int $I11, self, rx1105_curclass, "$!from"
    ne $I11, -1, rxscan1106_done2964
    goto rxscan1106_scan2963
  rxscan1106_loop2962:
    inc rx1105_pos
    gt rx1105_pos, rx1105_eos, rx1105_fail2958
    repr_bind_attr_int rx1105_cur, rx1105_curclass, "$!from", rx1105_pos
  rxscan1106_scan2963:
    nqp_rxmark rx1105_bstack, rxscan1106_loop2962, rx1105_pos, 0
  rxscan1106_done2964:
    nqp_rxmark rx1105_bstack, rxcap1107_fail2966, rx1105_pos, 0
    add $I11, rx1105_pos, 2
    gt $I11, rx1105_eos, rx1105_fail2958
    substr $S10, rx1105_tgt, rx1105_pos, 2
    ne $S10, ucs4:"**", rx1105_fail2958
    add rx1105_pos, 2
    nqp_rxpeek $I19, rx1105_bstack, rxcap1107_fail2966
    inc $I19
    set $I11, rx1105_bstack[$I19]
    repr_bind_attr_int rx1105_cur, rx1105_curclass, "$!pos", rx1105_pos
    $P11 = rx1105_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1105_pos)
    rx1105_cstack = rx1105_cur."!cursor_capture"($P11, "sym")
    goto rxcap1107_done2965
  rxcap1107_fail2966:
    goto rx1105_fail2958
  rxcap1107_done2965:
    repr_bind_attr_int rx1105_cur, rx1105_curclass, "$!pos", rx1105_pos
    $P11 = rx1105_cur."O"("%exponentiation, :op<pow_n>")
    repr_get_attr_int $I11, $P11, rx1105_curclass, "$!pos"
    lt $I11, 0, rx1105_fail2958
    nqp_rxmark rx1105_bstack, rxsubrule1108_pass2967, -1, 0
  rxsubrule1108_pass2967:
    rx1105_cstack = rx1105_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1105_pos, $P11, rx1105_curclass, "$!pos"
    rx1105_cur."!cursor_pass"(rx1105_pos, "infix:sym<**>", 'backtrack'=>1)
    .return (rx1105_cur)
  rx1105_restart2957:
    repr_get_attr_obj rx1105_cstack, rx1105_cur, rx1105_curclass, "$!cstack"
  rx1105_fail2958:
    unless rx1105_bstack, rx1105_done2956
    pop $I19, rx1105_bstack
    if_null rx1105_cstack, rx1105_cstack_done2961
    unless rx1105_cstack, rx1105_cstack_done2961
    dec $I19
    set $P11, rx1105_cstack[$I19]
  rx1105_cstack_done2961:
    pop rx1105_rep, rx1105_bstack
    pop rx1105_pos, rx1105_bstack
    pop $I19, rx1105_bstack
    lt rx1105_pos, -1, rx1105_done2956
    lt rx1105_pos, 0, rx1105_fail2958
    eq $I19, 0, rx1105_fail2958
    nqp_islist $I20, rx1105_cstack
    unless $I20, rx1105_jump2959
    elements $I18, rx1105_bstack
    le $I18, 0, rx1105_cut2960
    dec $I18
    set $I18, rx1105_bstack[$I18]
  rx1105_cut2960:
    assign rx1105_cstack, $I18
  rx1105_jump2959:
    jump $I19
  rx1105_done2956:
    rx1105_cur."!cursor_fail"()
    .return (rx1105_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<+>" :subid("cuid_181_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1325
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1109_tgt
    .local int rx1109_pos
    .local int rx1109_off
    .local int rx1109_eos
    .local int rx1109_rep
    .local pmc rx1109_cur
    .local pmc rx1109_curclass
    .local pmc rx1109_bstack
    .local pmc rx1109_cstack
    (rx1109_cur, rx1109_tgt, rx1109_pos, rx1109_curclass, rx1109_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1109_cur
    length rx1109_eos, rx1109_tgt
    eq $I19, 1, rx1109_restart2970
    gt rx1109_pos, rx1109_eos, rx1109_fail2971
    repr_get_attr_int $I11, self, rx1109_curclass, "$!from"
    ne $I11, -1, rxscan1110_done2977
    goto rxscan1110_scan2976
  rxscan1110_loop2975:
    inc rx1109_pos
    gt rx1109_pos, rx1109_eos, rx1109_fail2971
    repr_bind_attr_int rx1109_cur, rx1109_curclass, "$!from", rx1109_pos
  rxscan1110_scan2976:
    nqp_rxmark rx1109_bstack, rxscan1110_loop2975, rx1109_pos, 0
  rxscan1110_done2977:
    nqp_rxmark rx1109_bstack, rxcap1111_fail2979, rx1109_pos, 0
    add $I11, rx1109_pos, 1
    gt $I11, rx1109_eos, rx1109_fail2971
    substr $S10, rx1109_tgt, rx1109_pos, 1
    ne $S10, ucs4:"+", rx1109_fail2971
    add rx1109_pos, 1
    nqp_rxpeek $I19, rx1109_bstack, rxcap1111_fail2979
    inc $I19
    set $I11, rx1109_bstack[$I19]
    repr_bind_attr_int rx1109_cur, rx1109_curclass, "$!pos", rx1109_pos
    $P11 = rx1109_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1109_pos)
    rx1109_cstack = rx1109_cur."!cursor_capture"($P11, "sym")
    goto rxcap1111_done2978
  rxcap1111_fail2979:
    goto rx1109_fail2971
  rxcap1111_done2978:
    repr_bind_attr_int rx1109_cur, rx1109_curclass, "$!pos", rx1109_pos
    $P11 = rx1109_cur."O"("%symbolic_unary, :op<numify>")
    repr_get_attr_int $I11, $P11, rx1109_curclass, "$!pos"
    lt $I11, 0, rx1109_fail2971
    nqp_rxmark rx1109_bstack, rxsubrule1112_pass2980, -1, 0
  rxsubrule1112_pass2980:
    rx1109_cstack = rx1109_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1109_pos, $P11, rx1109_curclass, "$!pos"
    rx1109_cur."!cursor_pass"(rx1109_pos, "prefix:sym<+>", 'backtrack'=>1)
    .return (rx1109_cur)
  rx1109_restart2970:
    repr_get_attr_obj rx1109_cstack, rx1109_cur, rx1109_curclass, "$!cstack"
  rx1109_fail2971:
    unless rx1109_bstack, rx1109_done2969
    pop $I19, rx1109_bstack
    if_null rx1109_cstack, rx1109_cstack_done2974
    unless rx1109_cstack, rx1109_cstack_done2974
    dec $I19
    set $P11, rx1109_cstack[$I19]
  rx1109_cstack_done2974:
    pop rx1109_rep, rx1109_bstack
    pop rx1109_pos, rx1109_bstack
    pop $I19, rx1109_bstack
    lt rx1109_pos, -1, rx1109_done2969
    lt rx1109_pos, 0, rx1109_fail2971
    eq $I19, 0, rx1109_fail2971
    nqp_islist $I20, rx1109_cstack
    unless $I20, rx1109_jump2972
    elements $I18, rx1109_bstack
    le $I18, 0, rx1109_cut2973
    dec $I18
    set $I18, rx1109_bstack[$I18]
  rx1109_cut2973:
    assign rx1109_cstack, $I18
  rx1109_jump2972:
    jump $I19
  rx1109_done2969:
    rx1109_cur."!cursor_fail"()
    .return (rx1109_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<~>" :subid("cuid_182_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1326
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1113_tgt
    .local int rx1113_pos
    .local int rx1113_off
    .local int rx1113_eos
    .local int rx1113_rep
    .local pmc rx1113_cur
    .local pmc rx1113_curclass
    .local pmc rx1113_bstack
    .local pmc rx1113_cstack
    (rx1113_cur, rx1113_tgt, rx1113_pos, rx1113_curclass, rx1113_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1113_cur
    length rx1113_eos, rx1113_tgt
    eq $I19, 1, rx1113_restart2983
    gt rx1113_pos, rx1113_eos, rx1113_fail2984
    repr_get_attr_int $I11, self, rx1113_curclass, "$!from"
    ne $I11, -1, rxscan1114_done2990
    goto rxscan1114_scan2989
  rxscan1114_loop2988:
    inc rx1113_pos
    gt rx1113_pos, rx1113_eos, rx1113_fail2984
    repr_bind_attr_int rx1113_cur, rx1113_curclass, "$!from", rx1113_pos
  rxscan1114_scan2989:
    nqp_rxmark rx1113_bstack, rxscan1114_loop2988, rx1113_pos, 0
  rxscan1114_done2990:
    nqp_rxmark rx1113_bstack, rxcap1115_fail2992, rx1113_pos, 0
    add $I11, rx1113_pos, 1
    gt $I11, rx1113_eos, rx1113_fail2984
    substr $S10, rx1113_tgt, rx1113_pos, 1
    ne $S10, ucs4:"~", rx1113_fail2984
    add rx1113_pos, 1
    nqp_rxpeek $I19, rx1113_bstack, rxcap1115_fail2992
    inc $I19
    set $I11, rx1113_bstack[$I19]
    repr_bind_attr_int rx1113_cur, rx1113_curclass, "$!pos", rx1113_pos
    $P11 = rx1113_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1113_pos)
    rx1113_cstack = rx1113_cur."!cursor_capture"($P11, "sym")
    goto rxcap1115_done2991
  rxcap1115_fail2992:
    goto rx1113_fail2984
  rxcap1115_done2991:
    repr_bind_attr_int rx1113_cur, rx1113_curclass, "$!pos", rx1113_pos
    $P11 = rx1113_cur."O"("%symbolic_unary, :op<stringify>")
    repr_get_attr_int $I11, $P11, rx1113_curclass, "$!pos"
    lt $I11, 0, rx1113_fail2984
    nqp_rxmark rx1113_bstack, rxsubrule1116_pass2993, -1, 0
  rxsubrule1116_pass2993:
    rx1113_cstack = rx1113_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1113_pos, $P11, rx1113_curclass, "$!pos"
    rx1113_cur."!cursor_pass"(rx1113_pos, "prefix:sym<~>", 'backtrack'=>1)
    .return (rx1113_cur)
  rx1113_restart2983:
    repr_get_attr_obj rx1113_cstack, rx1113_cur, rx1113_curclass, "$!cstack"
  rx1113_fail2984:
    unless rx1113_bstack, rx1113_done2982
    pop $I19, rx1113_bstack
    if_null rx1113_cstack, rx1113_cstack_done2987
    unless rx1113_cstack, rx1113_cstack_done2987
    dec $I19
    set $P11, rx1113_cstack[$I19]
  rx1113_cstack_done2987:
    pop rx1113_rep, rx1113_bstack
    pop rx1113_pos, rx1113_bstack
    pop $I19, rx1113_bstack
    lt rx1113_pos, -1, rx1113_done2982
    lt rx1113_pos, 0, rx1113_fail2984
    eq $I19, 0, rx1113_fail2984
    nqp_islist $I20, rx1113_cstack
    unless $I20, rx1113_jump2985
    elements $I18, rx1113_bstack
    le $I18, 0, rx1113_cut2986
    dec $I18
    set $I18, rx1113_bstack[$I18]
  rx1113_cut2986:
    assign rx1113_cstack, $I18
  rx1113_jump2985:
    jump $I19
  rx1113_done2982:
    rx1113_cur."!cursor_fail"()
    .return (rx1113_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<->" :subid("cuid_183_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1327
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1117_tgt
    .local int rx1117_pos
    .local int rx1117_off
    .local int rx1117_eos
    .local int rx1117_rep
    .local pmc rx1117_cur
    .local pmc rx1117_curclass
    .local pmc rx1117_bstack
    .local pmc rx1117_cstack
    (rx1117_cur, rx1117_tgt, rx1117_pos, rx1117_curclass, rx1117_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1117_cur
    length rx1117_eos, rx1117_tgt
    eq $I19, 1, rx1117_restart2996
    gt rx1117_pos, rx1117_eos, rx1117_fail2997
    repr_get_attr_int $I11, self, rx1117_curclass, "$!from"
    ne $I11, -1, rxscan1118_done3003
    goto rxscan1118_scan3002
  rxscan1118_loop3001:
    inc rx1117_pos
    gt rx1117_pos, rx1117_eos, rx1117_fail2997
    repr_bind_attr_int rx1117_cur, rx1117_curclass, "$!from", rx1117_pos
  rxscan1118_scan3002:
    nqp_rxmark rx1117_bstack, rxscan1118_loop3001, rx1117_pos, 0
  rxscan1118_done3003:
    nqp_rxmark rx1117_bstack, rxcap1119_fail3005, rx1117_pos, 0
    add $I11, rx1117_pos, 1
    gt $I11, rx1117_eos, rx1117_fail2997
    substr $S10, rx1117_tgt, rx1117_pos, 1
    ne $S10, ucs4:"-", rx1117_fail2997
    add rx1117_pos, 1
    nqp_rxpeek $I19, rx1117_bstack, rxcap1119_fail3005
    inc $I19
    set $I11, rx1117_bstack[$I19]
    repr_bind_attr_int rx1117_cur, rx1117_curclass, "$!pos", rx1117_pos
    $P11 = rx1117_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1117_pos)
    rx1117_cstack = rx1117_cur."!cursor_capture"($P11, "sym")
    goto rxcap1119_done3004
  rxcap1119_fail3005:
    goto rx1117_fail2997
  rxcap1119_done3004:
    ge rx1117_pos, rx1117_eos, rx1117_fail2997
    substr $S11, rx1117_tgt, rx1117_pos, 1
    index $I11, ucs4:">", $S11
    ge $I11, 0, rx1117_fail2997
    repr_bind_attr_int rx1117_cur, rx1117_curclass, "$!pos", rx1117_pos
    $P11 = rx1117_cur."number"()
    repr_get_attr_int $I11, $P11, rx1117_curclass, "$!pos"
    ge $I11, 0, rx1117_fail2997
    repr_bind_attr_int rx1117_cur, rx1117_curclass, "$!pos", rx1117_pos
    $P11 = rx1117_cur."O"("%symbolic_unary, :op<neg_n>")
    repr_get_attr_int $I11, $P11, rx1117_curclass, "$!pos"
    lt $I11, 0, rx1117_fail2997
    nqp_rxmark rx1117_bstack, rxsubrule1120_pass3006, -1, 0
  rxsubrule1120_pass3006:
    rx1117_cstack = rx1117_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1117_pos, $P11, rx1117_curclass, "$!pos"
    rx1117_cur."!cursor_pass"(rx1117_pos, "prefix:sym<->", 'backtrack'=>1)
    .return (rx1117_cur)
  rx1117_restart2996:
    repr_get_attr_obj rx1117_cstack, rx1117_cur, rx1117_curclass, "$!cstack"
  rx1117_fail2997:
    unless rx1117_bstack, rx1117_done2995
    pop $I19, rx1117_bstack
    if_null rx1117_cstack, rx1117_cstack_done3000
    unless rx1117_cstack, rx1117_cstack_done3000
    dec $I19
    set $P11, rx1117_cstack[$I19]
  rx1117_cstack_done3000:
    pop rx1117_rep, rx1117_bstack
    pop rx1117_pos, rx1117_bstack
    pop $I19, rx1117_bstack
    lt rx1117_pos, -1, rx1117_done2995
    lt rx1117_pos, 0, rx1117_fail2997
    eq $I19, 0, rx1117_fail2997
    nqp_islist $I20, rx1117_cstack
    unless $I20, rx1117_jump2998
    elements $I18, rx1117_bstack
    le $I18, 0, rx1117_cut2999
    dec $I18
    set $I18, rx1117_bstack[$I18]
  rx1117_cut2999:
    assign rx1117_cstack, $I18
  rx1117_jump2998:
    jump $I19
  rx1117_done2995:
    rx1117_cur."!cursor_fail"()
    .return (rx1117_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<?>" :subid("cuid_184_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1328
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1121_tgt
    .local int rx1121_pos
    .local int rx1121_off
    .local int rx1121_eos
    .local int rx1121_rep
    .local pmc rx1121_cur
    .local pmc rx1121_curclass
    .local pmc rx1121_bstack
    .local pmc rx1121_cstack
    (rx1121_cur, rx1121_tgt, rx1121_pos, rx1121_curclass, rx1121_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1121_cur
    length rx1121_eos, rx1121_tgt
    eq $I19, 1, rx1121_restart3009
    gt rx1121_pos, rx1121_eos, rx1121_fail3010
    repr_get_attr_int $I11, self, rx1121_curclass, "$!from"
    ne $I11, -1, rxscan1122_done3016
    goto rxscan1122_scan3015
  rxscan1122_loop3014:
    inc rx1121_pos
    gt rx1121_pos, rx1121_eos, rx1121_fail3010
    repr_bind_attr_int rx1121_cur, rx1121_curclass, "$!from", rx1121_pos
  rxscan1122_scan3015:
    nqp_rxmark rx1121_bstack, rxscan1122_loop3014, rx1121_pos, 0
  rxscan1122_done3016:
    nqp_rxmark rx1121_bstack, rxcap1123_fail3018, rx1121_pos, 0
    add $I11, rx1121_pos, 1
    gt $I11, rx1121_eos, rx1121_fail3010
    substr $S10, rx1121_tgt, rx1121_pos, 1
    ne $S10, ucs4:"?", rx1121_fail3010
    add rx1121_pos, 1
    nqp_rxpeek $I19, rx1121_bstack, rxcap1123_fail3018
    inc $I19
    set $I11, rx1121_bstack[$I19]
    repr_bind_attr_int rx1121_cur, rx1121_curclass, "$!pos", rx1121_pos
    $P11 = rx1121_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1121_pos)
    rx1121_cstack = rx1121_cur."!cursor_capture"($P11, "sym")
    goto rxcap1123_done3017
  rxcap1123_fail3018:
    goto rx1121_fail3010
  rxcap1123_done3017:
    repr_bind_attr_int rx1121_cur, rx1121_curclass, "$!pos", rx1121_pos
    $P11 = rx1121_cur."O"("%symbolic_unary, :op<istrue>")
    repr_get_attr_int $I11, $P11, rx1121_curclass, "$!pos"
    lt $I11, 0, rx1121_fail3010
    nqp_rxmark rx1121_bstack, rxsubrule1124_pass3019, -1, 0
  rxsubrule1124_pass3019:
    rx1121_cstack = rx1121_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1121_pos, $P11, rx1121_curclass, "$!pos"
    rx1121_cur."!cursor_pass"(rx1121_pos, "prefix:sym<?>", 'backtrack'=>1)
    .return (rx1121_cur)
  rx1121_restart3009:
    repr_get_attr_obj rx1121_cstack, rx1121_cur, rx1121_curclass, "$!cstack"
  rx1121_fail3010:
    unless rx1121_bstack, rx1121_done3008
    pop $I19, rx1121_bstack
    if_null rx1121_cstack, rx1121_cstack_done3013
    unless rx1121_cstack, rx1121_cstack_done3013
    dec $I19
    set $P11, rx1121_cstack[$I19]
  rx1121_cstack_done3013:
    pop rx1121_rep, rx1121_bstack
    pop rx1121_pos, rx1121_bstack
    pop $I19, rx1121_bstack
    lt rx1121_pos, -1, rx1121_done3008
    lt rx1121_pos, 0, rx1121_fail3010
    eq $I19, 0, rx1121_fail3010
    nqp_islist $I20, rx1121_cstack
    unless $I20, rx1121_jump3011
    elements $I18, rx1121_bstack
    le $I18, 0, rx1121_cut3012
    dec $I18
    set $I18, rx1121_bstack[$I18]
  rx1121_cut3012:
    assign rx1121_cstack, $I18
  rx1121_jump3011:
    jump $I19
  rx1121_done3008:
    rx1121_cur."!cursor_fail"()
    .return (rx1121_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<!>" :subid("cuid_185_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1329
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1125_tgt
    .local int rx1125_pos
    .local int rx1125_off
    .local int rx1125_eos
    .local int rx1125_rep
    .local pmc rx1125_cur
    .local pmc rx1125_curclass
    .local pmc rx1125_bstack
    .local pmc rx1125_cstack
    (rx1125_cur, rx1125_tgt, rx1125_pos, rx1125_curclass, rx1125_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1125_cur
    length rx1125_eos, rx1125_tgt
    eq $I19, 1, rx1125_restart3022
    gt rx1125_pos, rx1125_eos, rx1125_fail3023
    repr_get_attr_int $I11, self, rx1125_curclass, "$!from"
    ne $I11, -1, rxscan1126_done3029
    goto rxscan1126_scan3028
  rxscan1126_loop3027:
    inc rx1125_pos
    gt rx1125_pos, rx1125_eos, rx1125_fail3023
    repr_bind_attr_int rx1125_cur, rx1125_curclass, "$!from", rx1125_pos
  rxscan1126_scan3028:
    nqp_rxmark rx1125_bstack, rxscan1126_loop3027, rx1125_pos, 0
  rxscan1126_done3029:
    nqp_rxmark rx1125_bstack, rxcap1127_fail3031, rx1125_pos, 0
    add $I11, rx1125_pos, 1
    gt $I11, rx1125_eos, rx1125_fail3023
    substr $S10, rx1125_tgt, rx1125_pos, 1
    ne $S10, ucs4:"!", rx1125_fail3023
    add rx1125_pos, 1
    nqp_rxpeek $I19, rx1125_bstack, rxcap1127_fail3031
    inc $I19
    set $I11, rx1125_bstack[$I19]
    repr_bind_attr_int rx1125_cur, rx1125_curclass, "$!pos", rx1125_pos
    $P11 = rx1125_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1125_pos)
    rx1125_cstack = rx1125_cur."!cursor_capture"($P11, "sym")
    goto rxcap1127_done3030
  rxcap1127_fail3031:
    goto rx1125_fail3023
  rxcap1127_done3030:
    repr_bind_attr_int rx1125_cur, rx1125_curclass, "$!pos", rx1125_pos
    $P11 = rx1125_cur."O"("%symbolic_unary, :op<falsey>")
    repr_get_attr_int $I11, $P11, rx1125_curclass, "$!pos"
    lt $I11, 0, rx1125_fail3023
    nqp_rxmark rx1125_bstack, rxsubrule1128_pass3032, -1, 0
  rxsubrule1128_pass3032:
    rx1125_cstack = rx1125_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1125_pos, $P11, rx1125_curclass, "$!pos"
    rx1125_cur."!cursor_pass"(rx1125_pos, "prefix:sym<!>", 'backtrack'=>1)
    .return (rx1125_cur)
  rx1125_restart3022:
    repr_get_attr_obj rx1125_cstack, rx1125_cur, rx1125_curclass, "$!cstack"
  rx1125_fail3023:
    unless rx1125_bstack, rx1125_done3021
    pop $I19, rx1125_bstack
    if_null rx1125_cstack, rx1125_cstack_done3026
    unless rx1125_cstack, rx1125_cstack_done3026
    dec $I19
    set $P11, rx1125_cstack[$I19]
  rx1125_cstack_done3026:
    pop rx1125_rep, rx1125_bstack
    pop rx1125_pos, rx1125_bstack
    pop $I19, rx1125_bstack
    lt rx1125_pos, -1, rx1125_done3021
    lt rx1125_pos, 0, rx1125_fail3023
    eq $I19, 0, rx1125_fail3023
    nqp_islist $I20, rx1125_cstack
    unless $I20, rx1125_jump3024
    elements $I18, rx1125_bstack
    le $I18, 0, rx1125_cut3025
    dec $I18
    set $I18, rx1125_bstack[$I18]
  rx1125_cut3025:
    assign rx1125_cstack, $I18
  rx1125_jump3024:
    jump $I19
  rx1125_done3021:
    rx1125_cur."!cursor_fail"()
    .return (rx1125_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<|>" :subid("cuid_186_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1330
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1129_tgt
    .local int rx1129_pos
    .local int rx1129_off
    .local int rx1129_eos
    .local int rx1129_rep
    .local pmc rx1129_cur
    .local pmc rx1129_curclass
    .local pmc rx1129_bstack
    .local pmc rx1129_cstack
    (rx1129_cur, rx1129_tgt, rx1129_pos, rx1129_curclass, rx1129_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1129_cur
    length rx1129_eos, rx1129_tgt
    eq $I19, 1, rx1129_restart3035
    gt rx1129_pos, rx1129_eos, rx1129_fail3036
    repr_get_attr_int $I11, self, rx1129_curclass, "$!from"
    ne $I11, -1, rxscan1130_done3042
    goto rxscan1130_scan3041
  rxscan1130_loop3040:
    inc rx1129_pos
    gt rx1129_pos, rx1129_eos, rx1129_fail3036
    repr_bind_attr_int rx1129_cur, rx1129_curclass, "$!from", rx1129_pos
  rxscan1130_scan3041:
    nqp_rxmark rx1129_bstack, rxscan1130_loop3040, rx1129_pos, 0
  rxscan1130_done3042:
    nqp_rxmark rx1129_bstack, rxcap1131_fail3044, rx1129_pos, 0
    add $I11, rx1129_pos, 1
    gt $I11, rx1129_eos, rx1129_fail3036
    substr $S10, rx1129_tgt, rx1129_pos, 1
    ne $S10, ucs4:"|", rx1129_fail3036
    add rx1129_pos, 1
    nqp_rxpeek $I19, rx1129_bstack, rxcap1131_fail3044
    inc $I19
    set $I11, rx1129_bstack[$I19]
    repr_bind_attr_int rx1129_cur, rx1129_curclass, "$!pos", rx1129_pos
    $P11 = rx1129_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1129_pos)
    rx1129_cstack = rx1129_cur."!cursor_capture"($P11, "sym")
    goto rxcap1131_done3043
  rxcap1131_fail3044:
    goto rx1129_fail3036
  rxcap1131_done3043:
    repr_bind_attr_int rx1129_cur, rx1129_curclass, "$!pos", rx1129_pos
    $P11 = rx1129_cur."O"("%symbolic_unary")
    repr_get_attr_int $I11, $P11, rx1129_curclass, "$!pos"
    lt $I11, 0, rx1129_fail3036
    nqp_rxmark rx1129_bstack, rxsubrule1132_pass3045, -1, 0
  rxsubrule1132_pass3045:
    rx1129_cstack = rx1129_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1129_pos, $P11, rx1129_curclass, "$!pos"
    rx1129_cur."!cursor_pass"(rx1129_pos, "prefix:sym<|>", 'backtrack'=>1)
    .return (rx1129_cur)
  rx1129_restart3035:
    repr_get_attr_obj rx1129_cstack, rx1129_cur, rx1129_curclass, "$!cstack"
  rx1129_fail3036:
    unless rx1129_bstack, rx1129_done3034
    pop $I19, rx1129_bstack
    if_null rx1129_cstack, rx1129_cstack_done3039
    unless rx1129_cstack, rx1129_cstack_done3039
    dec $I19
    set $P11, rx1129_cstack[$I19]
  rx1129_cstack_done3039:
    pop rx1129_rep, rx1129_bstack
    pop rx1129_pos, rx1129_bstack
    pop $I19, rx1129_bstack
    lt rx1129_pos, -1, rx1129_done3034
    lt rx1129_pos, 0, rx1129_fail3036
    eq $I19, 0, rx1129_fail3036
    nqp_islist $I20, rx1129_cstack
    unless $I20, rx1129_jump3037
    elements $I18, rx1129_bstack
    le $I18, 0, rx1129_cut3038
    dec $I18
    set $I18, rx1129_bstack[$I18]
  rx1129_cut3038:
    assign rx1129_cstack, $I18
  rx1129_jump3037:
    jump $I19
  rx1129_done3034:
    rx1129_cur."!cursor_fail"()
    .return (rx1129_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<*>" :subid("cuid_187_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1332
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1133_tgt
    .local int rx1133_pos
    .local int rx1133_off
    .local int rx1133_eos
    .local int rx1133_rep
    .local pmc rx1133_cur
    .local pmc rx1133_curclass
    .local pmc rx1133_bstack
    .local pmc rx1133_cstack
    (rx1133_cur, rx1133_tgt, rx1133_pos, rx1133_curclass, rx1133_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1133_cur
    length rx1133_eos, rx1133_tgt
    eq $I19, 1, rx1133_restart3048
    gt rx1133_pos, rx1133_eos, rx1133_fail3049
    repr_get_attr_int $I11, self, rx1133_curclass, "$!from"
    ne $I11, -1, rxscan1134_done3055
    goto rxscan1134_scan3054
  rxscan1134_loop3053:
    inc rx1133_pos
    gt rx1133_pos, rx1133_eos, rx1133_fail3049
    repr_bind_attr_int rx1133_cur, rx1133_curclass, "$!from", rx1133_pos
  rxscan1134_scan3054:
    nqp_rxmark rx1133_bstack, rxscan1134_loop3053, rx1133_pos, 0
  rxscan1134_done3055:
    nqp_rxmark rx1133_bstack, rxcap1135_fail3057, rx1133_pos, 0
    add $I11, rx1133_pos, 1
    gt $I11, rx1133_eos, rx1133_fail3049
    substr $S10, rx1133_tgt, rx1133_pos, 1
    ne $S10, ucs4:"*", rx1133_fail3049
    add rx1133_pos, 1
    nqp_rxpeek $I19, rx1133_bstack, rxcap1135_fail3057
    inc $I19
    set $I11, rx1133_bstack[$I19]
    repr_bind_attr_int rx1133_cur, rx1133_curclass, "$!pos", rx1133_pos
    $P11 = rx1133_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1133_pos)
    rx1133_cstack = rx1133_cur."!cursor_capture"($P11, "sym")
    goto rxcap1135_done3056
  rxcap1135_fail3057:
    goto rx1133_fail3049
  rxcap1135_done3056:
    repr_bind_attr_int rx1133_cur, rx1133_curclass, "$!pos", rx1133_pos
    $P11 = rx1133_cur."O"("%multiplicative, :op<mul_n>")
    repr_get_attr_int $I11, $P11, rx1133_curclass, "$!pos"
    lt $I11, 0, rx1133_fail3049
    nqp_rxmark rx1133_bstack, rxsubrule1136_pass3058, -1, 0
  rxsubrule1136_pass3058:
    rx1133_cstack = rx1133_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1133_pos, $P11, rx1133_curclass, "$!pos"
    rx1133_cur."!cursor_pass"(rx1133_pos, "infix:sym<*>", 'backtrack'=>1)
    .return (rx1133_cur)
  rx1133_restart3048:
    repr_get_attr_obj rx1133_cstack, rx1133_cur, rx1133_curclass, "$!cstack"
  rx1133_fail3049:
    unless rx1133_bstack, rx1133_done3047
    pop $I19, rx1133_bstack
    if_null rx1133_cstack, rx1133_cstack_done3052
    unless rx1133_cstack, rx1133_cstack_done3052
    dec $I19
    set $P11, rx1133_cstack[$I19]
  rx1133_cstack_done3052:
    pop rx1133_rep, rx1133_bstack
    pop rx1133_pos, rx1133_bstack
    pop $I19, rx1133_bstack
    lt rx1133_pos, -1, rx1133_done3047
    lt rx1133_pos, 0, rx1133_fail3049
    eq $I19, 0, rx1133_fail3049
    nqp_islist $I20, rx1133_cstack
    unless $I20, rx1133_jump3050
    elements $I18, rx1133_bstack
    le $I18, 0, rx1133_cut3051
    dec $I18
    set $I18, rx1133_bstack[$I18]
  rx1133_cut3051:
    assign rx1133_cstack, $I18
  rx1133_jump3050:
    jump $I19
  rx1133_done3047:
    rx1133_cur."!cursor_fail"()
    .return (rx1133_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym</>" :subid("cuid_188_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1333
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1137_tgt
    .local int rx1137_pos
    .local int rx1137_off
    .local int rx1137_eos
    .local int rx1137_rep
    .local pmc rx1137_cur
    .local pmc rx1137_curclass
    .local pmc rx1137_bstack
    .local pmc rx1137_cstack
    (rx1137_cur, rx1137_tgt, rx1137_pos, rx1137_curclass, rx1137_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1137_cur
    length rx1137_eos, rx1137_tgt
    eq $I19, 1, rx1137_restart3061
    gt rx1137_pos, rx1137_eos, rx1137_fail3062
    repr_get_attr_int $I11, self, rx1137_curclass, "$!from"
    ne $I11, -1, rxscan1138_done3068
    goto rxscan1138_scan3067
  rxscan1138_loop3066:
    inc rx1137_pos
    gt rx1137_pos, rx1137_eos, rx1137_fail3062
    repr_bind_attr_int rx1137_cur, rx1137_curclass, "$!from", rx1137_pos
  rxscan1138_scan3067:
    nqp_rxmark rx1137_bstack, rxscan1138_loop3066, rx1137_pos, 0
  rxscan1138_done3068:
    nqp_rxmark rx1137_bstack, rxcap1139_fail3070, rx1137_pos, 0
    add $I11, rx1137_pos, 1
    gt $I11, rx1137_eos, rx1137_fail3062
    substr $S10, rx1137_tgt, rx1137_pos, 1
    ne $S10, ucs4:"/", rx1137_fail3062
    add rx1137_pos, 1
    nqp_rxpeek $I19, rx1137_bstack, rxcap1139_fail3070
    inc $I19
    set $I11, rx1137_bstack[$I19]
    repr_bind_attr_int rx1137_cur, rx1137_curclass, "$!pos", rx1137_pos
    $P11 = rx1137_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1137_pos)
    rx1137_cstack = rx1137_cur."!cursor_capture"($P11, "sym")
    goto rxcap1139_done3069
  rxcap1139_fail3070:
    goto rx1137_fail3062
  rxcap1139_done3069:
    repr_bind_attr_int rx1137_cur, rx1137_curclass, "$!pos", rx1137_pos
    $P11 = rx1137_cur."O"("%multiplicative, :op<div_n>")
    repr_get_attr_int $I11, $P11, rx1137_curclass, "$!pos"
    lt $I11, 0, rx1137_fail3062
    nqp_rxmark rx1137_bstack, rxsubrule1140_pass3071, -1, 0
  rxsubrule1140_pass3071:
    rx1137_cstack = rx1137_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1137_pos, $P11, rx1137_curclass, "$!pos"
    rx1137_cur."!cursor_pass"(rx1137_pos, "infix:sym</>", 'backtrack'=>1)
    .return (rx1137_cur)
  rx1137_restart3061:
    repr_get_attr_obj rx1137_cstack, rx1137_cur, rx1137_curclass, "$!cstack"
  rx1137_fail3062:
    unless rx1137_bstack, rx1137_done3060
    pop $I19, rx1137_bstack
    if_null rx1137_cstack, rx1137_cstack_done3065
    unless rx1137_cstack, rx1137_cstack_done3065
    dec $I19
    set $P11, rx1137_cstack[$I19]
  rx1137_cstack_done3065:
    pop rx1137_rep, rx1137_bstack
    pop rx1137_pos, rx1137_bstack
    pop $I19, rx1137_bstack
    lt rx1137_pos, -1, rx1137_done3060
    lt rx1137_pos, 0, rx1137_fail3062
    eq $I19, 0, rx1137_fail3062
    nqp_islist $I20, rx1137_cstack
    unless $I20, rx1137_jump3063
    elements $I18, rx1137_bstack
    le $I18, 0, rx1137_cut3064
    dec $I18
    set $I18, rx1137_bstack[$I18]
  rx1137_cut3064:
    assign rx1137_cstack, $I18
  rx1137_jump3063:
    jump $I19
  rx1137_done3060:
    rx1137_cur."!cursor_fail"()
    .return (rx1137_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<%>" :subid("cuid_189_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1334
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1141_tgt
    .local int rx1141_pos
    .local int rx1141_off
    .local int rx1141_eos
    .local int rx1141_rep
    .local pmc rx1141_cur
    .local pmc rx1141_curclass
    .local pmc rx1141_bstack
    .local pmc rx1141_cstack
    (rx1141_cur, rx1141_tgt, rx1141_pos, rx1141_curclass, rx1141_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1141_cur
    length rx1141_eos, rx1141_tgt
    eq $I19, 1, rx1141_restart3074
    gt rx1141_pos, rx1141_eos, rx1141_fail3075
    repr_get_attr_int $I11, self, rx1141_curclass, "$!from"
    ne $I11, -1, rxscan1142_done3081
    goto rxscan1142_scan3080
  rxscan1142_loop3079:
    inc rx1141_pos
    gt rx1141_pos, rx1141_eos, rx1141_fail3075
    repr_bind_attr_int rx1141_cur, rx1141_curclass, "$!from", rx1141_pos
  rxscan1142_scan3080:
    nqp_rxmark rx1141_bstack, rxscan1142_loop3079, rx1141_pos, 0
  rxscan1142_done3081:
    nqp_rxmark rx1141_bstack, rxcap1143_fail3083, rx1141_pos, 0
    add $I11, rx1141_pos, 1
    gt $I11, rx1141_eos, rx1141_fail3075
    substr $S10, rx1141_tgt, rx1141_pos, 1
    ne $S10, ucs4:"%", rx1141_fail3075
    add rx1141_pos, 1
    nqp_rxpeek $I19, rx1141_bstack, rxcap1143_fail3083
    inc $I19
    set $I11, rx1141_bstack[$I19]
    repr_bind_attr_int rx1141_cur, rx1141_curclass, "$!pos", rx1141_pos
    $P11 = rx1141_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1141_pos)
    rx1141_cstack = rx1141_cur."!cursor_capture"($P11, "sym")
    goto rxcap1143_done3082
  rxcap1143_fail3083:
    goto rx1141_fail3075
  rxcap1143_done3082:
    repr_bind_attr_int rx1141_cur, rx1141_curclass, "$!pos", rx1141_pos
    $P11 = rx1141_cur."O"("%multiplicative, :op<mod_n>")
    repr_get_attr_int $I11, $P11, rx1141_curclass, "$!pos"
    lt $I11, 0, rx1141_fail3075
    nqp_rxmark rx1141_bstack, rxsubrule1144_pass3084, -1, 0
  rxsubrule1144_pass3084:
    rx1141_cstack = rx1141_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1141_pos, $P11, rx1141_curclass, "$!pos"
    rx1141_cur."!cursor_pass"(rx1141_pos, "infix:sym<%>", 'backtrack'=>1)
    .return (rx1141_cur)
  rx1141_restart3074:
    repr_get_attr_obj rx1141_cstack, rx1141_cur, rx1141_curclass, "$!cstack"
  rx1141_fail3075:
    unless rx1141_bstack, rx1141_done3073
    pop $I19, rx1141_bstack
    if_null rx1141_cstack, rx1141_cstack_done3078
    unless rx1141_cstack, rx1141_cstack_done3078
    dec $I19
    set $P11, rx1141_cstack[$I19]
  rx1141_cstack_done3078:
    pop rx1141_rep, rx1141_bstack
    pop rx1141_pos, rx1141_bstack
    pop $I19, rx1141_bstack
    lt rx1141_pos, -1, rx1141_done3073
    lt rx1141_pos, 0, rx1141_fail3075
    eq $I19, 0, rx1141_fail3075
    nqp_islist $I20, rx1141_cstack
    unless $I20, rx1141_jump3076
    elements $I18, rx1141_bstack
    le $I18, 0, rx1141_cut3077
    dec $I18
    set $I18, rx1141_bstack[$I18]
  rx1141_cut3077:
    assign rx1141_cstack, $I18
  rx1141_jump3076:
    jump $I19
  rx1141_done3073:
    rx1141_cur."!cursor_fail"()
    .return (rx1141_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+&>" :subid("cuid_190_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1335
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1145_tgt
    .local int rx1145_pos
    .local int rx1145_off
    .local int rx1145_eos
    .local int rx1145_rep
    .local pmc rx1145_cur
    .local pmc rx1145_curclass
    .local pmc rx1145_bstack
    .local pmc rx1145_cstack
    (rx1145_cur, rx1145_tgt, rx1145_pos, rx1145_curclass, rx1145_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1145_cur
    length rx1145_eos, rx1145_tgt
    eq $I19, 1, rx1145_restart3087
    gt rx1145_pos, rx1145_eos, rx1145_fail3088
    repr_get_attr_int $I11, self, rx1145_curclass, "$!from"
    ne $I11, -1, rxscan1146_done3094
    goto rxscan1146_scan3093
  rxscan1146_loop3092:
    inc rx1145_pos
    gt rx1145_pos, rx1145_eos, rx1145_fail3088
    repr_bind_attr_int rx1145_cur, rx1145_curclass, "$!from", rx1145_pos
  rxscan1146_scan3093:
    nqp_rxmark rx1145_bstack, rxscan1146_loop3092, rx1145_pos, 0
  rxscan1146_done3094:
    nqp_rxmark rx1145_bstack, rxcap1147_fail3096, rx1145_pos, 0
    add $I11, rx1145_pos, 2
    gt $I11, rx1145_eos, rx1145_fail3088
    substr $S10, rx1145_tgt, rx1145_pos, 2
    ne $S10, ucs4:"+&", rx1145_fail3088
    add rx1145_pos, 2
    nqp_rxpeek $I19, rx1145_bstack, rxcap1147_fail3096
    inc $I19
    set $I11, rx1145_bstack[$I19]
    repr_bind_attr_int rx1145_cur, rx1145_curclass, "$!pos", rx1145_pos
    $P11 = rx1145_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1145_pos)
    rx1145_cstack = rx1145_cur."!cursor_capture"($P11, "sym")
    goto rxcap1147_done3095
  rxcap1147_fail3096:
    goto rx1145_fail3088
  rxcap1147_done3095:
    repr_bind_attr_int rx1145_cur, rx1145_curclass, "$!pos", rx1145_pos
    $P11 = rx1145_cur."O"("%multiplicative, :op<bitand_i>")
    repr_get_attr_int $I11, $P11, rx1145_curclass, "$!pos"
    lt $I11, 0, rx1145_fail3088
    nqp_rxmark rx1145_bstack, rxsubrule1148_pass3097, -1, 0
  rxsubrule1148_pass3097:
    rx1145_cstack = rx1145_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1145_pos, $P11, rx1145_curclass, "$!pos"
    rx1145_cur."!cursor_pass"(rx1145_pos, "infix:sym<+&>", 'backtrack'=>1)
    .return (rx1145_cur)
  rx1145_restart3087:
    repr_get_attr_obj rx1145_cstack, rx1145_cur, rx1145_curclass, "$!cstack"
  rx1145_fail3088:
    unless rx1145_bstack, rx1145_done3086
    pop $I19, rx1145_bstack
    if_null rx1145_cstack, rx1145_cstack_done3091
    unless rx1145_cstack, rx1145_cstack_done3091
    dec $I19
    set $P11, rx1145_cstack[$I19]
  rx1145_cstack_done3091:
    pop rx1145_rep, rx1145_bstack
    pop rx1145_pos, rx1145_bstack
    pop $I19, rx1145_bstack
    lt rx1145_pos, -1, rx1145_done3086
    lt rx1145_pos, 0, rx1145_fail3088
    eq $I19, 0, rx1145_fail3088
    nqp_islist $I20, rx1145_cstack
    unless $I20, rx1145_jump3089
    elements $I18, rx1145_bstack
    le $I18, 0, rx1145_cut3090
    dec $I18
    set $I18, rx1145_bstack[$I18]
  rx1145_cut3090:
    assign rx1145_cstack, $I18
  rx1145_jump3089:
    jump $I19
  rx1145_done3086:
    rx1145_cur."!cursor_fail"()
    .return (rx1145_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+>" :subid("cuid_191_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1337
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1149_tgt
    .local int rx1149_pos
    .local int rx1149_off
    .local int rx1149_eos
    .local int rx1149_rep
    .local pmc rx1149_cur
    .local pmc rx1149_curclass
    .local pmc rx1149_bstack
    .local pmc rx1149_cstack
    (rx1149_cur, rx1149_tgt, rx1149_pos, rx1149_curclass, rx1149_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1149_cur
    length rx1149_eos, rx1149_tgt
    eq $I19, 1, rx1149_restart3100
    gt rx1149_pos, rx1149_eos, rx1149_fail3101
    repr_get_attr_int $I11, self, rx1149_curclass, "$!from"
    ne $I11, -1, rxscan1150_done3107
    goto rxscan1150_scan3106
  rxscan1150_loop3105:
    inc rx1149_pos
    gt rx1149_pos, rx1149_eos, rx1149_fail3101
    repr_bind_attr_int rx1149_cur, rx1149_curclass, "$!from", rx1149_pos
  rxscan1150_scan3106:
    nqp_rxmark rx1149_bstack, rxscan1150_loop3105, rx1149_pos, 0
  rxscan1150_done3107:
    nqp_rxmark rx1149_bstack, rxcap1151_fail3109, rx1149_pos, 0
    add $I11, rx1149_pos, 1
    gt $I11, rx1149_eos, rx1149_fail3101
    substr $S10, rx1149_tgt, rx1149_pos, 1
    ne $S10, ucs4:"+", rx1149_fail3101
    add rx1149_pos, 1
    nqp_rxpeek $I19, rx1149_bstack, rxcap1151_fail3109
    inc $I19
    set $I11, rx1149_bstack[$I19]
    repr_bind_attr_int rx1149_cur, rx1149_curclass, "$!pos", rx1149_pos
    $P11 = rx1149_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1149_pos)
    rx1149_cstack = rx1149_cur."!cursor_capture"($P11, "sym")
    goto rxcap1151_done3108
  rxcap1151_fail3109:
    goto rx1149_fail3101
  rxcap1151_done3108:
    repr_bind_attr_int rx1149_cur, rx1149_curclass, "$!pos", rx1149_pos
    $P11 = rx1149_cur."O"("%additive, :op<add_n>")
    repr_get_attr_int $I11, $P11, rx1149_curclass, "$!pos"
    lt $I11, 0, rx1149_fail3101
    nqp_rxmark rx1149_bstack, rxsubrule1152_pass3110, -1, 0
  rxsubrule1152_pass3110:
    rx1149_cstack = rx1149_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1149_pos, $P11, rx1149_curclass, "$!pos"
    rx1149_cur."!cursor_pass"(rx1149_pos, "infix:sym<+>", 'backtrack'=>1)
    .return (rx1149_cur)
  rx1149_restart3100:
    repr_get_attr_obj rx1149_cstack, rx1149_cur, rx1149_curclass, "$!cstack"
  rx1149_fail3101:
    unless rx1149_bstack, rx1149_done3099
    pop $I19, rx1149_bstack
    if_null rx1149_cstack, rx1149_cstack_done3104
    unless rx1149_cstack, rx1149_cstack_done3104
    dec $I19
    set $P11, rx1149_cstack[$I19]
  rx1149_cstack_done3104:
    pop rx1149_rep, rx1149_bstack
    pop rx1149_pos, rx1149_bstack
    pop $I19, rx1149_bstack
    lt rx1149_pos, -1, rx1149_done3099
    lt rx1149_pos, 0, rx1149_fail3101
    eq $I19, 0, rx1149_fail3101
    nqp_islist $I20, rx1149_cstack
    unless $I20, rx1149_jump3102
    elements $I18, rx1149_bstack
    le $I18, 0, rx1149_cut3103
    dec $I18
    set $I18, rx1149_bstack[$I18]
  rx1149_cut3103:
    assign rx1149_cstack, $I18
  rx1149_jump3102:
    jump $I19
  rx1149_done3099:
    rx1149_cur."!cursor_fail"()
    .return (rx1149_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<->" :subid("cuid_192_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1338
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1153_tgt
    .local int rx1153_pos
    .local int rx1153_off
    .local int rx1153_eos
    .local int rx1153_rep
    .local pmc rx1153_cur
    .local pmc rx1153_curclass
    .local pmc rx1153_bstack
    .local pmc rx1153_cstack
    (rx1153_cur, rx1153_tgt, rx1153_pos, rx1153_curclass, rx1153_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1153_cur
    length rx1153_eos, rx1153_tgt
    eq $I19, 1, rx1153_restart3113
    gt rx1153_pos, rx1153_eos, rx1153_fail3114
    repr_get_attr_int $I11, self, rx1153_curclass, "$!from"
    ne $I11, -1, rxscan1154_done3120
    goto rxscan1154_scan3119
  rxscan1154_loop3118:
    inc rx1153_pos
    gt rx1153_pos, rx1153_eos, rx1153_fail3114
    repr_bind_attr_int rx1153_cur, rx1153_curclass, "$!from", rx1153_pos
  rxscan1154_scan3119:
    nqp_rxmark rx1153_bstack, rxscan1154_loop3118, rx1153_pos, 0
  rxscan1154_done3120:
    nqp_rxmark rx1153_bstack, rxcap1155_fail3122, rx1153_pos, 0
    add $I11, rx1153_pos, 1
    gt $I11, rx1153_eos, rx1153_fail3114
    substr $S10, rx1153_tgt, rx1153_pos, 1
    ne $S10, ucs4:"-", rx1153_fail3114
    add rx1153_pos, 1
    nqp_rxpeek $I19, rx1153_bstack, rxcap1155_fail3122
    inc $I19
    set $I11, rx1153_bstack[$I19]
    repr_bind_attr_int rx1153_cur, rx1153_curclass, "$!pos", rx1153_pos
    $P11 = rx1153_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1153_pos)
    rx1153_cstack = rx1153_cur."!cursor_capture"($P11, "sym")
    goto rxcap1155_done3121
  rxcap1155_fail3122:
    goto rx1153_fail3114
  rxcap1155_done3121:
    repr_bind_attr_int rx1153_cur, rx1153_curclass, "$!pos", rx1153_pos
    $P11 = rx1153_cur."O"("%additive, :op<sub_n>")
    repr_get_attr_int $I11, $P11, rx1153_curclass, "$!pos"
    lt $I11, 0, rx1153_fail3114
    nqp_rxmark rx1153_bstack, rxsubrule1156_pass3123, -1, 0
  rxsubrule1156_pass3123:
    rx1153_cstack = rx1153_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1153_pos, $P11, rx1153_curclass, "$!pos"
    rx1153_cur."!cursor_pass"(rx1153_pos, "infix:sym<->", 'backtrack'=>1)
    .return (rx1153_cur)
  rx1153_restart3113:
    repr_get_attr_obj rx1153_cstack, rx1153_cur, rx1153_curclass, "$!cstack"
  rx1153_fail3114:
    unless rx1153_bstack, rx1153_done3112
    pop $I19, rx1153_bstack
    if_null rx1153_cstack, rx1153_cstack_done3117
    unless rx1153_cstack, rx1153_cstack_done3117
    dec $I19
    set $P11, rx1153_cstack[$I19]
  rx1153_cstack_done3117:
    pop rx1153_rep, rx1153_bstack
    pop rx1153_pos, rx1153_bstack
    pop $I19, rx1153_bstack
    lt rx1153_pos, -1, rx1153_done3112
    lt rx1153_pos, 0, rx1153_fail3114
    eq $I19, 0, rx1153_fail3114
    nqp_islist $I20, rx1153_cstack
    unless $I20, rx1153_jump3115
    elements $I18, rx1153_bstack
    le $I18, 0, rx1153_cut3116
    dec $I18
    set $I18, rx1153_bstack[$I18]
  rx1153_cut3116:
    assign rx1153_cstack, $I18
  rx1153_jump3115:
    jump $I19
  rx1153_done3112:
    rx1153_cur."!cursor_fail"()
    .return (rx1153_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+|>" :subid("cuid_193_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1339
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1157_tgt
    .local int rx1157_pos
    .local int rx1157_off
    .local int rx1157_eos
    .local int rx1157_rep
    .local pmc rx1157_cur
    .local pmc rx1157_curclass
    .local pmc rx1157_bstack
    .local pmc rx1157_cstack
    (rx1157_cur, rx1157_tgt, rx1157_pos, rx1157_curclass, rx1157_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1157_cur
    length rx1157_eos, rx1157_tgt
    eq $I19, 1, rx1157_restart3126
    gt rx1157_pos, rx1157_eos, rx1157_fail3127
    repr_get_attr_int $I11, self, rx1157_curclass, "$!from"
    ne $I11, -1, rxscan1158_done3133
    goto rxscan1158_scan3132
  rxscan1158_loop3131:
    inc rx1157_pos
    gt rx1157_pos, rx1157_eos, rx1157_fail3127
    repr_bind_attr_int rx1157_cur, rx1157_curclass, "$!from", rx1157_pos
  rxscan1158_scan3132:
    nqp_rxmark rx1157_bstack, rxscan1158_loop3131, rx1157_pos, 0
  rxscan1158_done3133:
    nqp_rxmark rx1157_bstack, rxcap1159_fail3135, rx1157_pos, 0
    add $I11, rx1157_pos, 2
    gt $I11, rx1157_eos, rx1157_fail3127
    substr $S10, rx1157_tgt, rx1157_pos, 2
    ne $S10, ucs4:"+|", rx1157_fail3127
    add rx1157_pos, 2
    nqp_rxpeek $I19, rx1157_bstack, rxcap1159_fail3135
    inc $I19
    set $I11, rx1157_bstack[$I19]
    repr_bind_attr_int rx1157_cur, rx1157_curclass, "$!pos", rx1157_pos
    $P11 = rx1157_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1157_pos)
    rx1157_cstack = rx1157_cur."!cursor_capture"($P11, "sym")
    goto rxcap1159_done3134
  rxcap1159_fail3135:
    goto rx1157_fail3127
  rxcap1159_done3134:
    repr_bind_attr_int rx1157_cur, rx1157_curclass, "$!pos", rx1157_pos
    $P11 = rx1157_cur."O"("%additive, :op<bitor_i>")
    repr_get_attr_int $I11, $P11, rx1157_curclass, "$!pos"
    lt $I11, 0, rx1157_fail3127
    nqp_rxmark rx1157_bstack, rxsubrule1160_pass3136, -1, 0
  rxsubrule1160_pass3136:
    rx1157_cstack = rx1157_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1157_pos, $P11, rx1157_curclass, "$!pos"
    rx1157_cur."!cursor_pass"(rx1157_pos, "infix:sym<+|>", 'backtrack'=>1)
    .return (rx1157_cur)
  rx1157_restart3126:
    repr_get_attr_obj rx1157_cstack, rx1157_cur, rx1157_curclass, "$!cstack"
  rx1157_fail3127:
    unless rx1157_bstack, rx1157_done3125
    pop $I19, rx1157_bstack
    if_null rx1157_cstack, rx1157_cstack_done3130
    unless rx1157_cstack, rx1157_cstack_done3130
    dec $I19
    set $P11, rx1157_cstack[$I19]
  rx1157_cstack_done3130:
    pop rx1157_rep, rx1157_bstack
    pop rx1157_pos, rx1157_bstack
    pop $I19, rx1157_bstack
    lt rx1157_pos, -1, rx1157_done3125
    lt rx1157_pos, 0, rx1157_fail3127
    eq $I19, 0, rx1157_fail3127
    nqp_islist $I20, rx1157_cstack
    unless $I20, rx1157_jump3128
    elements $I18, rx1157_bstack
    le $I18, 0, rx1157_cut3129
    dec $I18
    set $I18, rx1157_bstack[$I18]
  rx1157_cut3129:
    assign rx1157_cstack, $I18
  rx1157_jump3128:
    jump $I19
  rx1157_done3125:
    rx1157_cur."!cursor_fail"()
    .return (rx1157_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+^>" :subid("cuid_194_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1340
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1161_tgt
    .local int rx1161_pos
    .local int rx1161_off
    .local int rx1161_eos
    .local int rx1161_rep
    .local pmc rx1161_cur
    .local pmc rx1161_curclass
    .local pmc rx1161_bstack
    .local pmc rx1161_cstack
    (rx1161_cur, rx1161_tgt, rx1161_pos, rx1161_curclass, rx1161_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1161_cur
    length rx1161_eos, rx1161_tgt
    eq $I19, 1, rx1161_restart3139
    gt rx1161_pos, rx1161_eos, rx1161_fail3140
    repr_get_attr_int $I11, self, rx1161_curclass, "$!from"
    ne $I11, -1, rxscan1162_done3146
    goto rxscan1162_scan3145
  rxscan1162_loop3144:
    inc rx1161_pos
    gt rx1161_pos, rx1161_eos, rx1161_fail3140
    repr_bind_attr_int rx1161_cur, rx1161_curclass, "$!from", rx1161_pos
  rxscan1162_scan3145:
    nqp_rxmark rx1161_bstack, rxscan1162_loop3144, rx1161_pos, 0
  rxscan1162_done3146:
    nqp_rxmark rx1161_bstack, rxcap1163_fail3148, rx1161_pos, 0
    add $I11, rx1161_pos, 2
    gt $I11, rx1161_eos, rx1161_fail3140
    substr $S10, rx1161_tgt, rx1161_pos, 2
    ne $S10, ucs4:"+^", rx1161_fail3140
    add rx1161_pos, 2
    nqp_rxpeek $I19, rx1161_bstack, rxcap1163_fail3148
    inc $I19
    set $I11, rx1161_bstack[$I19]
    repr_bind_attr_int rx1161_cur, rx1161_curclass, "$!pos", rx1161_pos
    $P11 = rx1161_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1161_pos)
    rx1161_cstack = rx1161_cur."!cursor_capture"($P11, "sym")
    goto rxcap1163_done3147
  rxcap1163_fail3148:
    goto rx1161_fail3140
  rxcap1163_done3147:
    repr_bind_attr_int rx1161_cur, rx1161_curclass, "$!pos", rx1161_pos
    $P11 = rx1161_cur."O"("%additive, :op<bitxor_i>")
    repr_get_attr_int $I11, $P11, rx1161_curclass, "$!pos"
    lt $I11, 0, rx1161_fail3140
    nqp_rxmark rx1161_bstack, rxsubrule1164_pass3149, -1, 0
  rxsubrule1164_pass3149:
    rx1161_cstack = rx1161_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1161_pos, $P11, rx1161_curclass, "$!pos"
    rx1161_cur."!cursor_pass"(rx1161_pos, "infix:sym<+^>", 'backtrack'=>1)
    .return (rx1161_cur)
  rx1161_restart3139:
    repr_get_attr_obj rx1161_cstack, rx1161_cur, rx1161_curclass, "$!cstack"
  rx1161_fail3140:
    unless rx1161_bstack, rx1161_done3138
    pop $I19, rx1161_bstack
    if_null rx1161_cstack, rx1161_cstack_done3143
    unless rx1161_cstack, rx1161_cstack_done3143
    dec $I19
    set $P11, rx1161_cstack[$I19]
  rx1161_cstack_done3143:
    pop rx1161_rep, rx1161_bstack
    pop rx1161_pos, rx1161_bstack
    pop $I19, rx1161_bstack
    lt rx1161_pos, -1, rx1161_done3138
    lt rx1161_pos, 0, rx1161_fail3140
    eq $I19, 0, rx1161_fail3140
    nqp_islist $I20, rx1161_cstack
    unless $I20, rx1161_jump3141
    elements $I18, rx1161_bstack
    le $I18, 0, rx1161_cut3142
    dec $I18
    set $I18, rx1161_bstack[$I18]
  rx1161_cut3142:
    assign rx1161_cstack, $I18
  rx1161_jump3141:
    jump $I19
  rx1161_done3138:
    rx1161_cur."!cursor_fail"()
    .return (rx1161_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<~>" :subid("cuid_195_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1342
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1165_tgt
    .local int rx1165_pos
    .local int rx1165_off
    .local int rx1165_eos
    .local int rx1165_rep
    .local pmc rx1165_cur
    .local pmc rx1165_curclass
    .local pmc rx1165_bstack
    .local pmc rx1165_cstack
    (rx1165_cur, rx1165_tgt, rx1165_pos, rx1165_curclass, rx1165_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1165_cur
    length rx1165_eos, rx1165_tgt
    eq $I19, 1, rx1165_restart3152
    gt rx1165_pos, rx1165_eos, rx1165_fail3153
    repr_get_attr_int $I11, self, rx1165_curclass, "$!from"
    ne $I11, -1, rxscan1166_done3159
    goto rxscan1166_scan3158
  rxscan1166_loop3157:
    inc rx1165_pos
    gt rx1165_pos, rx1165_eos, rx1165_fail3153
    repr_bind_attr_int rx1165_cur, rx1165_curclass, "$!from", rx1165_pos
  rxscan1166_scan3158:
    nqp_rxmark rx1165_bstack, rxscan1166_loop3157, rx1165_pos, 0
  rxscan1166_done3159:
    nqp_rxmark rx1165_bstack, rxcap1167_fail3161, rx1165_pos, 0
    add $I11, rx1165_pos, 1
    gt $I11, rx1165_eos, rx1165_fail3153
    substr $S10, rx1165_tgt, rx1165_pos, 1
    ne $S10, ucs4:"~", rx1165_fail3153
    add rx1165_pos, 1
    nqp_rxpeek $I19, rx1165_bstack, rxcap1167_fail3161
    inc $I19
    set $I11, rx1165_bstack[$I19]
    repr_bind_attr_int rx1165_cur, rx1165_curclass, "$!pos", rx1165_pos
    $P11 = rx1165_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1165_pos)
    rx1165_cstack = rx1165_cur."!cursor_capture"($P11, "sym")
    goto rxcap1167_done3160
  rxcap1167_fail3161:
    goto rx1165_fail3153
  rxcap1167_done3160:
    repr_bind_attr_int rx1165_cur, rx1165_curclass, "$!pos", rx1165_pos
    $P11 = rx1165_cur."O"("%concatenation , :op<concat>")
    repr_get_attr_int $I11, $P11, rx1165_curclass, "$!pos"
    lt $I11, 0, rx1165_fail3153
    nqp_rxmark rx1165_bstack, rxsubrule1168_pass3162, -1, 0
  rxsubrule1168_pass3162:
    rx1165_cstack = rx1165_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1165_pos, $P11, rx1165_curclass, "$!pos"
    rx1165_cur."!cursor_pass"(rx1165_pos, "infix:sym<~>", 'backtrack'=>1)
    .return (rx1165_cur)
  rx1165_restart3152:
    repr_get_attr_obj rx1165_cstack, rx1165_cur, rx1165_curclass, "$!cstack"
  rx1165_fail3153:
    unless rx1165_bstack, rx1165_done3151
    pop $I19, rx1165_bstack
    if_null rx1165_cstack, rx1165_cstack_done3156
    unless rx1165_cstack, rx1165_cstack_done3156
    dec $I19
    set $P11, rx1165_cstack[$I19]
  rx1165_cstack_done3156:
    pop rx1165_rep, rx1165_bstack
    pop rx1165_pos, rx1165_bstack
    pop $I19, rx1165_bstack
    lt rx1165_pos, -1, rx1165_done3151
    lt rx1165_pos, 0, rx1165_fail3153
    eq $I19, 0, rx1165_fail3153
    nqp_islist $I20, rx1165_cstack
    unless $I20, rx1165_jump3154
    elements $I18, rx1165_bstack
    le $I18, 0, rx1165_cut3155
    dec $I18
    set $I18, rx1165_bstack[$I18]
  rx1165_cut3155:
    assign rx1165_cstack, $I18
  rx1165_jump3154:
    jump $I19
  rx1165_done3151:
    rx1165_cur."!cursor_fail"()
    .return (rx1165_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<==>" :subid("cuid_196_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1344
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1169_tgt
    .local int rx1169_pos
    .local int rx1169_off
    .local int rx1169_eos
    .local int rx1169_rep
    .local pmc rx1169_cur
    .local pmc rx1169_curclass
    .local pmc rx1169_bstack
    .local pmc rx1169_cstack
    (rx1169_cur, rx1169_tgt, rx1169_pos, rx1169_curclass, rx1169_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1169_cur
    length rx1169_eos, rx1169_tgt
    eq $I19, 1, rx1169_restart3165
    gt rx1169_pos, rx1169_eos, rx1169_fail3166
    repr_get_attr_int $I11, self, rx1169_curclass, "$!from"
    ne $I11, -1, rxscan1170_done3172
    goto rxscan1170_scan3171
  rxscan1170_loop3170:
    inc rx1169_pos
    gt rx1169_pos, rx1169_eos, rx1169_fail3166
    repr_bind_attr_int rx1169_cur, rx1169_curclass, "$!from", rx1169_pos
  rxscan1170_scan3171:
    nqp_rxmark rx1169_bstack, rxscan1170_loop3170, rx1169_pos, 0
  rxscan1170_done3172:
    nqp_rxmark rx1169_bstack, rxcap1171_fail3174, rx1169_pos, 0
    add $I11, rx1169_pos, 2
    gt $I11, rx1169_eos, rx1169_fail3166
    substr $S10, rx1169_tgt, rx1169_pos, 2
    ne $S10, ucs4:"==", rx1169_fail3166
    add rx1169_pos, 2
    nqp_rxpeek $I19, rx1169_bstack, rxcap1171_fail3174
    inc $I19
    set $I11, rx1169_bstack[$I19]
    repr_bind_attr_int rx1169_cur, rx1169_curclass, "$!pos", rx1169_pos
    $P11 = rx1169_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1169_pos)
    rx1169_cstack = rx1169_cur."!cursor_capture"($P11, "sym")
    goto rxcap1171_done3173
  rxcap1171_fail3174:
    goto rx1169_fail3166
  rxcap1171_done3173:
    repr_bind_attr_int rx1169_cur, rx1169_curclass, "$!pos", rx1169_pos
    $P11 = rx1169_cur."O"("%relational, :op<iseq_n>")
    repr_get_attr_int $I11, $P11, rx1169_curclass, "$!pos"
    lt $I11, 0, rx1169_fail3166
    nqp_rxmark rx1169_bstack, rxsubrule1172_pass3175, -1, 0
  rxsubrule1172_pass3175:
    rx1169_cstack = rx1169_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1169_pos, $P11, rx1169_curclass, "$!pos"
    rx1169_cur."!cursor_pass"(rx1169_pos, "infix:sym<==>", 'backtrack'=>1)
    .return (rx1169_cur)
  rx1169_restart3165:
    repr_get_attr_obj rx1169_cstack, rx1169_cur, rx1169_curclass, "$!cstack"
  rx1169_fail3166:
    unless rx1169_bstack, rx1169_done3164
    pop $I19, rx1169_bstack
    if_null rx1169_cstack, rx1169_cstack_done3169
    unless rx1169_cstack, rx1169_cstack_done3169
    dec $I19
    set $P11, rx1169_cstack[$I19]
  rx1169_cstack_done3169:
    pop rx1169_rep, rx1169_bstack
    pop rx1169_pos, rx1169_bstack
    pop $I19, rx1169_bstack
    lt rx1169_pos, -1, rx1169_done3164
    lt rx1169_pos, 0, rx1169_fail3166
    eq $I19, 0, rx1169_fail3166
    nqp_islist $I20, rx1169_cstack
    unless $I20, rx1169_jump3167
    elements $I18, rx1169_bstack
    le $I18, 0, rx1169_cut3168
    dec $I18
    set $I18, rx1169_bstack[$I18]
  rx1169_cut3168:
    assign rx1169_cstack, $I18
  rx1169_jump3167:
    jump $I19
  rx1169_done3164:
    rx1169_cur."!cursor_fail"()
    .return (rx1169_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<!=>" :subid("cuid_197_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1345
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1173_tgt
    .local int rx1173_pos
    .local int rx1173_off
    .local int rx1173_eos
    .local int rx1173_rep
    .local pmc rx1173_cur
    .local pmc rx1173_curclass
    .local pmc rx1173_bstack
    .local pmc rx1173_cstack
    (rx1173_cur, rx1173_tgt, rx1173_pos, rx1173_curclass, rx1173_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1173_cur
    length rx1173_eos, rx1173_tgt
    eq $I19, 1, rx1173_restart3178
    gt rx1173_pos, rx1173_eos, rx1173_fail3179
    repr_get_attr_int $I11, self, rx1173_curclass, "$!from"
    ne $I11, -1, rxscan1174_done3185
    goto rxscan1174_scan3184
  rxscan1174_loop3183:
    inc rx1173_pos
    gt rx1173_pos, rx1173_eos, rx1173_fail3179
    repr_bind_attr_int rx1173_cur, rx1173_curclass, "$!from", rx1173_pos
  rxscan1174_scan3184:
    nqp_rxmark rx1173_bstack, rxscan1174_loop3183, rx1173_pos, 0
  rxscan1174_done3185:
    nqp_rxmark rx1173_bstack, rxcap1175_fail3187, rx1173_pos, 0
    add $I11, rx1173_pos, 2
    gt $I11, rx1173_eos, rx1173_fail3179
    substr $S10, rx1173_tgt, rx1173_pos, 2
    ne $S10, ucs4:"!=", rx1173_fail3179
    add rx1173_pos, 2
    nqp_rxpeek $I19, rx1173_bstack, rxcap1175_fail3187
    inc $I19
    set $I11, rx1173_bstack[$I19]
    repr_bind_attr_int rx1173_cur, rx1173_curclass, "$!pos", rx1173_pos
    $P11 = rx1173_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1173_pos)
    rx1173_cstack = rx1173_cur."!cursor_capture"($P11, "sym")
    goto rxcap1175_done3186
  rxcap1175_fail3187:
    goto rx1173_fail3179
  rxcap1175_done3186:
    repr_bind_attr_int rx1173_cur, rx1173_curclass, "$!pos", rx1173_pos
    $P11 = rx1173_cur."O"("%relational, :op<isne_n>")
    repr_get_attr_int $I11, $P11, rx1173_curclass, "$!pos"
    lt $I11, 0, rx1173_fail3179
    nqp_rxmark rx1173_bstack, rxsubrule1176_pass3188, -1, 0
  rxsubrule1176_pass3188:
    rx1173_cstack = rx1173_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1173_pos, $P11, rx1173_curclass, "$!pos"
    rx1173_cur."!cursor_pass"(rx1173_pos, "infix:sym<!=>", 'backtrack'=>1)
    .return (rx1173_cur)
  rx1173_restart3178:
    repr_get_attr_obj rx1173_cstack, rx1173_cur, rx1173_curclass, "$!cstack"
  rx1173_fail3179:
    unless rx1173_bstack, rx1173_done3177
    pop $I19, rx1173_bstack
    if_null rx1173_cstack, rx1173_cstack_done3182
    unless rx1173_cstack, rx1173_cstack_done3182
    dec $I19
    set $P11, rx1173_cstack[$I19]
  rx1173_cstack_done3182:
    pop rx1173_rep, rx1173_bstack
    pop rx1173_pos, rx1173_bstack
    pop $I19, rx1173_bstack
    lt rx1173_pos, -1, rx1173_done3177
    lt rx1173_pos, 0, rx1173_fail3179
    eq $I19, 0, rx1173_fail3179
    nqp_islist $I20, rx1173_cstack
    unless $I20, rx1173_jump3180
    elements $I18, rx1173_bstack
    le $I18, 0, rx1173_cut3181
    dec $I18
    set $I18, rx1173_bstack[$I18]
  rx1173_cut3181:
    assign rx1173_cstack, $I18
  rx1173_jump3180:
    jump $I19
  rx1173_done3177:
    rx1173_cur."!cursor_fail"()
    .return (rx1173_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<<=>" :subid("cuid_198_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1346
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1177_tgt
    .local int rx1177_pos
    .local int rx1177_off
    .local int rx1177_eos
    .local int rx1177_rep
    .local pmc rx1177_cur
    .local pmc rx1177_curclass
    .local pmc rx1177_bstack
    .local pmc rx1177_cstack
    (rx1177_cur, rx1177_tgt, rx1177_pos, rx1177_curclass, rx1177_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1177_cur
    length rx1177_eos, rx1177_tgt
    eq $I19, 1, rx1177_restart3191
    gt rx1177_pos, rx1177_eos, rx1177_fail3192
    repr_get_attr_int $I11, self, rx1177_curclass, "$!from"
    ne $I11, -1, rxscan1178_done3198
    goto rxscan1178_scan3197
  rxscan1178_loop3196:
    inc rx1177_pos
    gt rx1177_pos, rx1177_eos, rx1177_fail3192
    repr_bind_attr_int rx1177_cur, rx1177_curclass, "$!from", rx1177_pos
  rxscan1178_scan3197:
    nqp_rxmark rx1177_bstack, rxscan1178_loop3196, rx1177_pos, 0
  rxscan1178_done3198:
    nqp_rxmark rx1177_bstack, rxcap1179_fail3200, rx1177_pos, 0
    add $I11, rx1177_pos, 2
    gt $I11, rx1177_eos, rx1177_fail3192
    substr $S10, rx1177_tgt, rx1177_pos, 2
    ne $S10, ucs4:"<=", rx1177_fail3192
    add rx1177_pos, 2
    nqp_rxpeek $I19, rx1177_bstack, rxcap1179_fail3200
    inc $I19
    set $I11, rx1177_bstack[$I19]
    repr_bind_attr_int rx1177_cur, rx1177_curclass, "$!pos", rx1177_pos
    $P11 = rx1177_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1177_pos)
    rx1177_cstack = rx1177_cur."!cursor_capture"($P11, "sym")
    goto rxcap1179_done3199
  rxcap1179_fail3200:
    goto rx1177_fail3192
  rxcap1179_done3199:
    repr_bind_attr_int rx1177_cur, rx1177_curclass, "$!pos", rx1177_pos
    $P11 = rx1177_cur."O"("%relational, :op<isle_n>")
    repr_get_attr_int $I11, $P11, rx1177_curclass, "$!pos"
    lt $I11, 0, rx1177_fail3192
    nqp_rxmark rx1177_bstack, rxsubrule1180_pass3201, -1, 0
  rxsubrule1180_pass3201:
    rx1177_cstack = rx1177_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1177_pos, $P11, rx1177_curclass, "$!pos"
    rx1177_cur."!cursor_pass"(rx1177_pos, "infix:sym<<=>", 'backtrack'=>1)
    .return (rx1177_cur)
  rx1177_restart3191:
    repr_get_attr_obj rx1177_cstack, rx1177_cur, rx1177_curclass, "$!cstack"
  rx1177_fail3192:
    unless rx1177_bstack, rx1177_done3190
    pop $I19, rx1177_bstack
    if_null rx1177_cstack, rx1177_cstack_done3195
    unless rx1177_cstack, rx1177_cstack_done3195
    dec $I19
    set $P11, rx1177_cstack[$I19]
  rx1177_cstack_done3195:
    pop rx1177_rep, rx1177_bstack
    pop rx1177_pos, rx1177_bstack
    pop $I19, rx1177_bstack
    lt rx1177_pos, -1, rx1177_done3190
    lt rx1177_pos, 0, rx1177_fail3192
    eq $I19, 0, rx1177_fail3192
    nqp_islist $I20, rx1177_cstack
    unless $I20, rx1177_jump3193
    elements $I18, rx1177_bstack
    le $I18, 0, rx1177_cut3194
    dec $I18
    set $I18, rx1177_bstack[$I18]
  rx1177_cut3194:
    assign rx1177_cstack, $I18
  rx1177_jump3193:
    jump $I19
  rx1177_done3190:
    rx1177_cur."!cursor_fail"()
    .return (rx1177_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<>=>" :subid("cuid_199_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1347
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1181_tgt
    .local int rx1181_pos
    .local int rx1181_off
    .local int rx1181_eos
    .local int rx1181_rep
    .local pmc rx1181_cur
    .local pmc rx1181_curclass
    .local pmc rx1181_bstack
    .local pmc rx1181_cstack
    (rx1181_cur, rx1181_tgt, rx1181_pos, rx1181_curclass, rx1181_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1181_cur
    length rx1181_eos, rx1181_tgt
    eq $I19, 1, rx1181_restart3204
    gt rx1181_pos, rx1181_eos, rx1181_fail3205
    repr_get_attr_int $I11, self, rx1181_curclass, "$!from"
    ne $I11, -1, rxscan1182_done3211
    goto rxscan1182_scan3210
  rxscan1182_loop3209:
    inc rx1181_pos
    gt rx1181_pos, rx1181_eos, rx1181_fail3205
    repr_bind_attr_int rx1181_cur, rx1181_curclass, "$!from", rx1181_pos
  rxscan1182_scan3210:
    nqp_rxmark rx1181_bstack, rxscan1182_loop3209, rx1181_pos, 0
  rxscan1182_done3211:
    nqp_rxmark rx1181_bstack, rxcap1183_fail3213, rx1181_pos, 0
    add $I11, rx1181_pos, 2
    gt $I11, rx1181_eos, rx1181_fail3205
    substr $S10, rx1181_tgt, rx1181_pos, 2
    ne $S10, ucs4:">=", rx1181_fail3205
    add rx1181_pos, 2
    nqp_rxpeek $I19, rx1181_bstack, rxcap1183_fail3213
    inc $I19
    set $I11, rx1181_bstack[$I19]
    repr_bind_attr_int rx1181_cur, rx1181_curclass, "$!pos", rx1181_pos
    $P11 = rx1181_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1181_pos)
    rx1181_cstack = rx1181_cur."!cursor_capture"($P11, "sym")
    goto rxcap1183_done3212
  rxcap1183_fail3213:
    goto rx1181_fail3205
  rxcap1183_done3212:
    repr_bind_attr_int rx1181_cur, rx1181_curclass, "$!pos", rx1181_pos
    $P11 = rx1181_cur."O"("%relational, :op<isge_n>")
    repr_get_attr_int $I11, $P11, rx1181_curclass, "$!pos"
    lt $I11, 0, rx1181_fail3205
    nqp_rxmark rx1181_bstack, rxsubrule1184_pass3214, -1, 0
  rxsubrule1184_pass3214:
    rx1181_cstack = rx1181_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1181_pos, $P11, rx1181_curclass, "$!pos"
    rx1181_cur."!cursor_pass"(rx1181_pos, "infix:sym<>=>", 'backtrack'=>1)
    .return (rx1181_cur)
  rx1181_restart3204:
    repr_get_attr_obj rx1181_cstack, rx1181_cur, rx1181_curclass, "$!cstack"
  rx1181_fail3205:
    unless rx1181_bstack, rx1181_done3203
    pop $I19, rx1181_bstack
    if_null rx1181_cstack, rx1181_cstack_done3208
    unless rx1181_cstack, rx1181_cstack_done3208
    dec $I19
    set $P11, rx1181_cstack[$I19]
  rx1181_cstack_done3208:
    pop rx1181_rep, rx1181_bstack
    pop rx1181_pos, rx1181_bstack
    pop $I19, rx1181_bstack
    lt rx1181_pos, -1, rx1181_done3203
    lt rx1181_pos, 0, rx1181_fail3205
    eq $I19, 0, rx1181_fail3205
    nqp_islist $I20, rx1181_cstack
    unless $I20, rx1181_jump3206
    elements $I18, rx1181_bstack
    le $I18, 0, rx1181_cut3207
    dec $I18
    set $I18, rx1181_bstack[$I18]
  rx1181_cut3207:
    assign rx1181_cstack, $I18
  rx1181_jump3206:
    jump $I19
  rx1181_done3203:
    rx1181_cur."!cursor_fail"()
    .return (rx1181_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<<>" :subid("cuid_200_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1348
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1185_tgt
    .local int rx1185_pos
    .local int rx1185_off
    .local int rx1185_eos
    .local int rx1185_rep
    .local pmc rx1185_cur
    .local pmc rx1185_curclass
    .local pmc rx1185_bstack
    .local pmc rx1185_cstack
    (rx1185_cur, rx1185_tgt, rx1185_pos, rx1185_curclass, rx1185_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1185_cur
    length rx1185_eos, rx1185_tgt
    eq $I19, 1, rx1185_restart3217
    gt rx1185_pos, rx1185_eos, rx1185_fail3218
    repr_get_attr_int $I11, self, rx1185_curclass, "$!from"
    ne $I11, -1, rxscan1186_done3224
    goto rxscan1186_scan3223
  rxscan1186_loop3222:
    inc rx1185_pos
    gt rx1185_pos, rx1185_eos, rx1185_fail3218
    repr_bind_attr_int rx1185_cur, rx1185_curclass, "$!from", rx1185_pos
  rxscan1186_scan3223:
    nqp_rxmark rx1185_bstack, rxscan1186_loop3222, rx1185_pos, 0
  rxscan1186_done3224:
    nqp_rxmark rx1185_bstack, rxcap1187_fail3226, rx1185_pos, 0
    add $I11, rx1185_pos, 1
    gt $I11, rx1185_eos, rx1185_fail3218
    substr $S10, rx1185_tgt, rx1185_pos, 1
    ne $S10, ucs4:"<", rx1185_fail3218
    add rx1185_pos, 1
    nqp_rxpeek $I19, rx1185_bstack, rxcap1187_fail3226
    inc $I19
    set $I11, rx1185_bstack[$I19]
    repr_bind_attr_int rx1185_cur, rx1185_curclass, "$!pos", rx1185_pos
    $P11 = rx1185_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1185_pos)
    rx1185_cstack = rx1185_cur."!cursor_capture"($P11, "sym")
    goto rxcap1187_done3225
  rxcap1187_fail3226:
    goto rx1185_fail3218
  rxcap1187_done3225:
    repr_bind_attr_int rx1185_cur, rx1185_curclass, "$!pos", rx1185_pos
    $P11 = rx1185_cur."O"("%relational, :op<islt_n>")
    repr_get_attr_int $I11, $P11, rx1185_curclass, "$!pos"
    lt $I11, 0, rx1185_fail3218
    nqp_rxmark rx1185_bstack, rxsubrule1188_pass3227, -1, 0
  rxsubrule1188_pass3227:
    rx1185_cstack = rx1185_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1185_pos, $P11, rx1185_curclass, "$!pos"
    rx1185_cur."!cursor_pass"(rx1185_pos, "infix:sym<<>", 'backtrack'=>1)
    .return (rx1185_cur)
  rx1185_restart3217:
    repr_get_attr_obj rx1185_cstack, rx1185_cur, rx1185_curclass, "$!cstack"
  rx1185_fail3218:
    unless rx1185_bstack, rx1185_done3216
    pop $I19, rx1185_bstack
    if_null rx1185_cstack, rx1185_cstack_done3221
    unless rx1185_cstack, rx1185_cstack_done3221
    dec $I19
    set $P11, rx1185_cstack[$I19]
  rx1185_cstack_done3221:
    pop rx1185_rep, rx1185_bstack
    pop rx1185_pos, rx1185_bstack
    pop $I19, rx1185_bstack
    lt rx1185_pos, -1, rx1185_done3216
    lt rx1185_pos, 0, rx1185_fail3218
    eq $I19, 0, rx1185_fail3218
    nqp_islist $I20, rx1185_cstack
    unless $I20, rx1185_jump3219
    elements $I18, rx1185_bstack
    le $I18, 0, rx1185_cut3220
    dec $I18
    set $I18, rx1185_bstack[$I18]
  rx1185_cut3220:
    assign rx1185_cstack, $I18
  rx1185_jump3219:
    jump $I19
  rx1185_done3216:
    rx1185_cur."!cursor_fail"()
    .return (rx1185_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<>>" :subid("cuid_201_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1349
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1189_tgt
    .local int rx1189_pos
    .local int rx1189_off
    .local int rx1189_eos
    .local int rx1189_rep
    .local pmc rx1189_cur
    .local pmc rx1189_curclass
    .local pmc rx1189_bstack
    .local pmc rx1189_cstack
    (rx1189_cur, rx1189_tgt, rx1189_pos, rx1189_curclass, rx1189_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1189_cur
    length rx1189_eos, rx1189_tgt
    eq $I19, 1, rx1189_restart3230
    gt rx1189_pos, rx1189_eos, rx1189_fail3231
    repr_get_attr_int $I11, self, rx1189_curclass, "$!from"
    ne $I11, -1, rxscan1190_done3237
    goto rxscan1190_scan3236
  rxscan1190_loop3235:
    inc rx1189_pos
    gt rx1189_pos, rx1189_eos, rx1189_fail3231
    repr_bind_attr_int rx1189_cur, rx1189_curclass, "$!from", rx1189_pos
  rxscan1190_scan3236:
    nqp_rxmark rx1189_bstack, rxscan1190_loop3235, rx1189_pos, 0
  rxscan1190_done3237:
    nqp_rxmark rx1189_bstack, rxcap1191_fail3239, rx1189_pos, 0
    add $I11, rx1189_pos, 1
    gt $I11, rx1189_eos, rx1189_fail3231
    substr $S10, rx1189_tgt, rx1189_pos, 1
    ne $S10, ucs4:">", rx1189_fail3231
    add rx1189_pos, 1
    nqp_rxpeek $I19, rx1189_bstack, rxcap1191_fail3239
    inc $I19
    set $I11, rx1189_bstack[$I19]
    repr_bind_attr_int rx1189_cur, rx1189_curclass, "$!pos", rx1189_pos
    $P11 = rx1189_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1189_pos)
    rx1189_cstack = rx1189_cur."!cursor_capture"($P11, "sym")
    goto rxcap1191_done3238
  rxcap1191_fail3239:
    goto rx1189_fail3231
  rxcap1191_done3238:
    repr_bind_attr_int rx1189_cur, rx1189_curclass, "$!pos", rx1189_pos
    $P11 = rx1189_cur."O"("%relational, :op<isgt_n>")
    repr_get_attr_int $I11, $P11, rx1189_curclass, "$!pos"
    lt $I11, 0, rx1189_fail3231
    nqp_rxmark rx1189_bstack, rxsubrule1192_pass3240, -1, 0
  rxsubrule1192_pass3240:
    rx1189_cstack = rx1189_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1189_pos, $P11, rx1189_curclass, "$!pos"
    rx1189_cur."!cursor_pass"(rx1189_pos, "infix:sym<>>", 'backtrack'=>1)
    .return (rx1189_cur)
  rx1189_restart3230:
    repr_get_attr_obj rx1189_cstack, rx1189_cur, rx1189_curclass, "$!cstack"
  rx1189_fail3231:
    unless rx1189_bstack, rx1189_done3229
    pop $I19, rx1189_bstack
    if_null rx1189_cstack, rx1189_cstack_done3234
    unless rx1189_cstack, rx1189_cstack_done3234
    dec $I19
    set $P11, rx1189_cstack[$I19]
  rx1189_cstack_done3234:
    pop rx1189_rep, rx1189_bstack
    pop rx1189_pos, rx1189_bstack
    pop $I19, rx1189_bstack
    lt rx1189_pos, -1, rx1189_done3229
    lt rx1189_pos, 0, rx1189_fail3231
    eq $I19, 0, rx1189_fail3231
    nqp_islist $I20, rx1189_cstack
    unless $I20, rx1189_jump3232
    elements $I18, rx1189_bstack
    le $I18, 0, rx1189_cut3233
    dec $I18
    set $I18, rx1189_bstack[$I18]
  rx1189_cut3233:
    assign rx1189_cstack, $I18
  rx1189_jump3232:
    jump $I19
  rx1189_done3229:
    rx1189_cur."!cursor_fail"()
    .return (rx1189_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<eq>" :subid("cuid_202_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1350
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1193_tgt
    .local int rx1193_pos
    .local int rx1193_off
    .local int rx1193_eos
    .local int rx1193_rep
    .local pmc rx1193_cur
    .local pmc rx1193_curclass
    .local pmc rx1193_bstack
    .local pmc rx1193_cstack
    (rx1193_cur, rx1193_tgt, rx1193_pos, rx1193_curclass, rx1193_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1193_cur
    length rx1193_eos, rx1193_tgt
    eq $I19, 1, rx1193_restart3243
    gt rx1193_pos, rx1193_eos, rx1193_fail3244
    repr_get_attr_int $I11, self, rx1193_curclass, "$!from"
    ne $I11, -1, rxscan1194_done3250
    goto rxscan1194_scan3249
  rxscan1194_loop3248:
    inc rx1193_pos
    gt rx1193_pos, rx1193_eos, rx1193_fail3244
    repr_bind_attr_int rx1193_cur, rx1193_curclass, "$!from", rx1193_pos
  rxscan1194_scan3249:
    nqp_rxmark rx1193_bstack, rxscan1194_loop3248, rx1193_pos, 0
  rxscan1194_done3250:
    nqp_rxmark rx1193_bstack, rxcap1195_fail3252, rx1193_pos, 0
    add $I11, rx1193_pos, 2
    gt $I11, rx1193_eos, rx1193_fail3244
    substr $S10, rx1193_tgt, rx1193_pos, 2
    ne $S10, ucs4:"eq", rx1193_fail3244
    add rx1193_pos, 2
    nqp_rxpeek $I19, rx1193_bstack, rxcap1195_fail3252
    inc $I19
    set $I11, rx1193_bstack[$I19]
    repr_bind_attr_int rx1193_cur, rx1193_curclass, "$!pos", rx1193_pos
    $P11 = rx1193_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1193_pos)
    rx1193_cstack = rx1193_cur."!cursor_capture"($P11, "sym")
    goto rxcap1195_done3251
  rxcap1195_fail3252:
    goto rx1193_fail3244
  rxcap1195_done3251:
    repr_bind_attr_int rx1193_cur, rx1193_curclass, "$!pos", rx1193_pos
    $P11 = rx1193_cur."O"("%relational, :op<iseq_s>")
    repr_get_attr_int $I11, $P11, rx1193_curclass, "$!pos"
    lt $I11, 0, rx1193_fail3244
    nqp_rxmark rx1193_bstack, rxsubrule1196_pass3253, -1, 0
  rxsubrule1196_pass3253:
    rx1193_cstack = rx1193_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1193_pos, $P11, rx1193_curclass, "$!pos"
    rx1193_cur."!cursor_pass"(rx1193_pos, "infix:sym<eq>", 'backtrack'=>1)
    .return (rx1193_cur)
  rx1193_restart3243:
    repr_get_attr_obj rx1193_cstack, rx1193_cur, rx1193_curclass, "$!cstack"
  rx1193_fail3244:
    unless rx1193_bstack, rx1193_done3242
    pop $I19, rx1193_bstack
    if_null rx1193_cstack, rx1193_cstack_done3247
    unless rx1193_cstack, rx1193_cstack_done3247
    dec $I19
    set $P11, rx1193_cstack[$I19]
  rx1193_cstack_done3247:
    pop rx1193_rep, rx1193_bstack
    pop rx1193_pos, rx1193_bstack
    pop $I19, rx1193_bstack
    lt rx1193_pos, -1, rx1193_done3242
    lt rx1193_pos, 0, rx1193_fail3244
    eq $I19, 0, rx1193_fail3244
    nqp_islist $I20, rx1193_cstack
    unless $I20, rx1193_jump3245
    elements $I18, rx1193_bstack
    le $I18, 0, rx1193_cut3246
    dec $I18
    set $I18, rx1193_bstack[$I18]
  rx1193_cut3246:
    assign rx1193_cstack, $I18
  rx1193_jump3245:
    jump $I19
  rx1193_done3242:
    rx1193_cur."!cursor_fail"()
    .return (rx1193_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<ne>" :subid("cuid_203_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1351
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1197_tgt
    .local int rx1197_pos
    .local int rx1197_off
    .local int rx1197_eos
    .local int rx1197_rep
    .local pmc rx1197_cur
    .local pmc rx1197_curclass
    .local pmc rx1197_bstack
    .local pmc rx1197_cstack
    (rx1197_cur, rx1197_tgt, rx1197_pos, rx1197_curclass, rx1197_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1197_cur
    length rx1197_eos, rx1197_tgt
    eq $I19, 1, rx1197_restart3256
    gt rx1197_pos, rx1197_eos, rx1197_fail3257
    repr_get_attr_int $I11, self, rx1197_curclass, "$!from"
    ne $I11, -1, rxscan1198_done3263
    goto rxscan1198_scan3262
  rxscan1198_loop3261:
    inc rx1197_pos
    gt rx1197_pos, rx1197_eos, rx1197_fail3257
    repr_bind_attr_int rx1197_cur, rx1197_curclass, "$!from", rx1197_pos
  rxscan1198_scan3262:
    nqp_rxmark rx1197_bstack, rxscan1198_loop3261, rx1197_pos, 0
  rxscan1198_done3263:
    nqp_rxmark rx1197_bstack, rxcap1199_fail3265, rx1197_pos, 0
    add $I11, rx1197_pos, 2
    gt $I11, rx1197_eos, rx1197_fail3257
    substr $S10, rx1197_tgt, rx1197_pos, 2
    ne $S10, ucs4:"ne", rx1197_fail3257
    add rx1197_pos, 2
    nqp_rxpeek $I19, rx1197_bstack, rxcap1199_fail3265
    inc $I19
    set $I11, rx1197_bstack[$I19]
    repr_bind_attr_int rx1197_cur, rx1197_curclass, "$!pos", rx1197_pos
    $P11 = rx1197_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1197_pos)
    rx1197_cstack = rx1197_cur."!cursor_capture"($P11, "sym")
    goto rxcap1199_done3264
  rxcap1199_fail3265:
    goto rx1197_fail3257
  rxcap1199_done3264:
    repr_bind_attr_int rx1197_cur, rx1197_curclass, "$!pos", rx1197_pos
    $P11 = rx1197_cur."O"("%relational, :op<isne_s>")
    repr_get_attr_int $I11, $P11, rx1197_curclass, "$!pos"
    lt $I11, 0, rx1197_fail3257
    nqp_rxmark rx1197_bstack, rxsubrule1200_pass3266, -1, 0
  rxsubrule1200_pass3266:
    rx1197_cstack = rx1197_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1197_pos, $P11, rx1197_curclass, "$!pos"
    rx1197_cur."!cursor_pass"(rx1197_pos, "infix:sym<ne>", 'backtrack'=>1)
    .return (rx1197_cur)
  rx1197_restart3256:
    repr_get_attr_obj rx1197_cstack, rx1197_cur, rx1197_curclass, "$!cstack"
  rx1197_fail3257:
    unless rx1197_bstack, rx1197_done3255
    pop $I19, rx1197_bstack
    if_null rx1197_cstack, rx1197_cstack_done3260
    unless rx1197_cstack, rx1197_cstack_done3260
    dec $I19
    set $P11, rx1197_cstack[$I19]
  rx1197_cstack_done3260:
    pop rx1197_rep, rx1197_bstack
    pop rx1197_pos, rx1197_bstack
    pop $I19, rx1197_bstack
    lt rx1197_pos, -1, rx1197_done3255
    lt rx1197_pos, 0, rx1197_fail3257
    eq $I19, 0, rx1197_fail3257
    nqp_islist $I20, rx1197_cstack
    unless $I20, rx1197_jump3258
    elements $I18, rx1197_bstack
    le $I18, 0, rx1197_cut3259
    dec $I18
    set $I18, rx1197_bstack[$I18]
  rx1197_cut3259:
    assign rx1197_cstack, $I18
  rx1197_jump3258:
    jump $I19
  rx1197_done3255:
    rx1197_cur."!cursor_fail"()
    .return (rx1197_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<le>" :subid("cuid_204_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1352
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1201_tgt
    .local int rx1201_pos
    .local int rx1201_off
    .local int rx1201_eos
    .local int rx1201_rep
    .local pmc rx1201_cur
    .local pmc rx1201_curclass
    .local pmc rx1201_bstack
    .local pmc rx1201_cstack
    (rx1201_cur, rx1201_tgt, rx1201_pos, rx1201_curclass, rx1201_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1201_cur
    length rx1201_eos, rx1201_tgt
    eq $I19, 1, rx1201_restart3269
    gt rx1201_pos, rx1201_eos, rx1201_fail3270
    repr_get_attr_int $I11, self, rx1201_curclass, "$!from"
    ne $I11, -1, rxscan1202_done3276
    goto rxscan1202_scan3275
  rxscan1202_loop3274:
    inc rx1201_pos
    gt rx1201_pos, rx1201_eos, rx1201_fail3270
    repr_bind_attr_int rx1201_cur, rx1201_curclass, "$!from", rx1201_pos
  rxscan1202_scan3275:
    nqp_rxmark rx1201_bstack, rxscan1202_loop3274, rx1201_pos, 0
  rxscan1202_done3276:
    nqp_rxmark rx1201_bstack, rxcap1203_fail3278, rx1201_pos, 0
    add $I11, rx1201_pos, 2
    gt $I11, rx1201_eos, rx1201_fail3270
    substr $S10, rx1201_tgt, rx1201_pos, 2
    ne $S10, ucs4:"le", rx1201_fail3270
    add rx1201_pos, 2
    nqp_rxpeek $I19, rx1201_bstack, rxcap1203_fail3278
    inc $I19
    set $I11, rx1201_bstack[$I19]
    repr_bind_attr_int rx1201_cur, rx1201_curclass, "$!pos", rx1201_pos
    $P11 = rx1201_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1201_pos)
    rx1201_cstack = rx1201_cur."!cursor_capture"($P11, "sym")
    goto rxcap1203_done3277
  rxcap1203_fail3278:
    goto rx1201_fail3270
  rxcap1203_done3277:
    repr_bind_attr_int rx1201_cur, rx1201_curclass, "$!pos", rx1201_pos
    $P11 = rx1201_cur."O"("%relational, :op<isle_s>")
    repr_get_attr_int $I11, $P11, rx1201_curclass, "$!pos"
    lt $I11, 0, rx1201_fail3270
    nqp_rxmark rx1201_bstack, rxsubrule1204_pass3279, -1, 0
  rxsubrule1204_pass3279:
    rx1201_cstack = rx1201_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1201_pos, $P11, rx1201_curclass, "$!pos"
    rx1201_cur."!cursor_pass"(rx1201_pos, "infix:sym<le>", 'backtrack'=>1)
    .return (rx1201_cur)
  rx1201_restart3269:
    repr_get_attr_obj rx1201_cstack, rx1201_cur, rx1201_curclass, "$!cstack"
  rx1201_fail3270:
    unless rx1201_bstack, rx1201_done3268
    pop $I19, rx1201_bstack
    if_null rx1201_cstack, rx1201_cstack_done3273
    unless rx1201_cstack, rx1201_cstack_done3273
    dec $I19
    set $P11, rx1201_cstack[$I19]
  rx1201_cstack_done3273:
    pop rx1201_rep, rx1201_bstack
    pop rx1201_pos, rx1201_bstack
    pop $I19, rx1201_bstack
    lt rx1201_pos, -1, rx1201_done3268
    lt rx1201_pos, 0, rx1201_fail3270
    eq $I19, 0, rx1201_fail3270
    nqp_islist $I20, rx1201_cstack
    unless $I20, rx1201_jump3271
    elements $I18, rx1201_bstack
    le $I18, 0, rx1201_cut3272
    dec $I18
    set $I18, rx1201_bstack[$I18]
  rx1201_cut3272:
    assign rx1201_cstack, $I18
  rx1201_jump3271:
    jump $I19
  rx1201_done3268:
    rx1201_cur."!cursor_fail"()
    .return (rx1201_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<ge>" :subid("cuid_205_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1353
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1205_tgt
    .local int rx1205_pos
    .local int rx1205_off
    .local int rx1205_eos
    .local int rx1205_rep
    .local pmc rx1205_cur
    .local pmc rx1205_curclass
    .local pmc rx1205_bstack
    .local pmc rx1205_cstack
    (rx1205_cur, rx1205_tgt, rx1205_pos, rx1205_curclass, rx1205_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1205_cur
    length rx1205_eos, rx1205_tgt
    eq $I19, 1, rx1205_restart3282
    gt rx1205_pos, rx1205_eos, rx1205_fail3283
    repr_get_attr_int $I11, self, rx1205_curclass, "$!from"
    ne $I11, -1, rxscan1206_done3289
    goto rxscan1206_scan3288
  rxscan1206_loop3287:
    inc rx1205_pos
    gt rx1205_pos, rx1205_eos, rx1205_fail3283
    repr_bind_attr_int rx1205_cur, rx1205_curclass, "$!from", rx1205_pos
  rxscan1206_scan3288:
    nqp_rxmark rx1205_bstack, rxscan1206_loop3287, rx1205_pos, 0
  rxscan1206_done3289:
    nqp_rxmark rx1205_bstack, rxcap1207_fail3291, rx1205_pos, 0
    add $I11, rx1205_pos, 2
    gt $I11, rx1205_eos, rx1205_fail3283
    substr $S10, rx1205_tgt, rx1205_pos, 2
    ne $S10, ucs4:"ge", rx1205_fail3283
    add rx1205_pos, 2
    nqp_rxpeek $I19, rx1205_bstack, rxcap1207_fail3291
    inc $I19
    set $I11, rx1205_bstack[$I19]
    repr_bind_attr_int rx1205_cur, rx1205_curclass, "$!pos", rx1205_pos
    $P11 = rx1205_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1205_pos)
    rx1205_cstack = rx1205_cur."!cursor_capture"($P11, "sym")
    goto rxcap1207_done3290
  rxcap1207_fail3291:
    goto rx1205_fail3283
  rxcap1207_done3290:
    repr_bind_attr_int rx1205_cur, rx1205_curclass, "$!pos", rx1205_pos
    $P11 = rx1205_cur."O"("%relational, :op<isge_s>")
    repr_get_attr_int $I11, $P11, rx1205_curclass, "$!pos"
    lt $I11, 0, rx1205_fail3283
    nqp_rxmark rx1205_bstack, rxsubrule1208_pass3292, -1, 0
  rxsubrule1208_pass3292:
    rx1205_cstack = rx1205_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1205_pos, $P11, rx1205_curclass, "$!pos"
    rx1205_cur."!cursor_pass"(rx1205_pos, "infix:sym<ge>", 'backtrack'=>1)
    .return (rx1205_cur)
  rx1205_restart3282:
    repr_get_attr_obj rx1205_cstack, rx1205_cur, rx1205_curclass, "$!cstack"
  rx1205_fail3283:
    unless rx1205_bstack, rx1205_done3281
    pop $I19, rx1205_bstack
    if_null rx1205_cstack, rx1205_cstack_done3286
    unless rx1205_cstack, rx1205_cstack_done3286
    dec $I19
    set $P11, rx1205_cstack[$I19]
  rx1205_cstack_done3286:
    pop rx1205_rep, rx1205_bstack
    pop rx1205_pos, rx1205_bstack
    pop $I19, rx1205_bstack
    lt rx1205_pos, -1, rx1205_done3281
    lt rx1205_pos, 0, rx1205_fail3283
    eq $I19, 0, rx1205_fail3283
    nqp_islist $I20, rx1205_cstack
    unless $I20, rx1205_jump3284
    elements $I18, rx1205_bstack
    le $I18, 0, rx1205_cut3285
    dec $I18
    set $I18, rx1205_bstack[$I18]
  rx1205_cut3285:
    assign rx1205_cstack, $I18
  rx1205_jump3284:
    jump $I19
  rx1205_done3281:
    rx1205_cur."!cursor_fail"()
    .return (rx1205_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<lt>" :subid("cuid_206_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1354
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1209_tgt
    .local int rx1209_pos
    .local int rx1209_off
    .local int rx1209_eos
    .local int rx1209_rep
    .local pmc rx1209_cur
    .local pmc rx1209_curclass
    .local pmc rx1209_bstack
    .local pmc rx1209_cstack
    (rx1209_cur, rx1209_tgt, rx1209_pos, rx1209_curclass, rx1209_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1209_cur
    length rx1209_eos, rx1209_tgt
    eq $I19, 1, rx1209_restart3295
    gt rx1209_pos, rx1209_eos, rx1209_fail3296
    repr_get_attr_int $I11, self, rx1209_curclass, "$!from"
    ne $I11, -1, rxscan1210_done3302
    goto rxscan1210_scan3301
  rxscan1210_loop3300:
    inc rx1209_pos
    gt rx1209_pos, rx1209_eos, rx1209_fail3296
    repr_bind_attr_int rx1209_cur, rx1209_curclass, "$!from", rx1209_pos
  rxscan1210_scan3301:
    nqp_rxmark rx1209_bstack, rxscan1210_loop3300, rx1209_pos, 0
  rxscan1210_done3302:
    nqp_rxmark rx1209_bstack, rxcap1211_fail3304, rx1209_pos, 0
    add $I11, rx1209_pos, 2
    gt $I11, rx1209_eos, rx1209_fail3296
    substr $S10, rx1209_tgt, rx1209_pos, 2
    ne $S10, ucs4:"lt", rx1209_fail3296
    add rx1209_pos, 2
    nqp_rxpeek $I19, rx1209_bstack, rxcap1211_fail3304
    inc $I19
    set $I11, rx1209_bstack[$I19]
    repr_bind_attr_int rx1209_cur, rx1209_curclass, "$!pos", rx1209_pos
    $P11 = rx1209_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1209_pos)
    rx1209_cstack = rx1209_cur."!cursor_capture"($P11, "sym")
    goto rxcap1211_done3303
  rxcap1211_fail3304:
    goto rx1209_fail3296
  rxcap1211_done3303:
    repr_bind_attr_int rx1209_cur, rx1209_curclass, "$!pos", rx1209_pos
    $P11 = rx1209_cur."O"("%relational, :op<islt_s>")
    repr_get_attr_int $I11, $P11, rx1209_curclass, "$!pos"
    lt $I11, 0, rx1209_fail3296
    nqp_rxmark rx1209_bstack, rxsubrule1212_pass3305, -1, 0
  rxsubrule1212_pass3305:
    rx1209_cstack = rx1209_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1209_pos, $P11, rx1209_curclass, "$!pos"
    rx1209_cur."!cursor_pass"(rx1209_pos, "infix:sym<lt>", 'backtrack'=>1)
    .return (rx1209_cur)
  rx1209_restart3295:
    repr_get_attr_obj rx1209_cstack, rx1209_cur, rx1209_curclass, "$!cstack"
  rx1209_fail3296:
    unless rx1209_bstack, rx1209_done3294
    pop $I19, rx1209_bstack
    if_null rx1209_cstack, rx1209_cstack_done3299
    unless rx1209_cstack, rx1209_cstack_done3299
    dec $I19
    set $P11, rx1209_cstack[$I19]
  rx1209_cstack_done3299:
    pop rx1209_rep, rx1209_bstack
    pop rx1209_pos, rx1209_bstack
    pop $I19, rx1209_bstack
    lt rx1209_pos, -1, rx1209_done3294
    lt rx1209_pos, 0, rx1209_fail3296
    eq $I19, 0, rx1209_fail3296
    nqp_islist $I20, rx1209_cstack
    unless $I20, rx1209_jump3297
    elements $I18, rx1209_bstack
    le $I18, 0, rx1209_cut3298
    dec $I18
    set $I18, rx1209_bstack[$I18]
  rx1209_cut3298:
    assign rx1209_cstack, $I18
  rx1209_jump3297:
    jump $I19
  rx1209_done3294:
    rx1209_cur."!cursor_fail"()
    .return (rx1209_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<gt>" :subid("cuid_207_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1355
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1213_tgt
    .local int rx1213_pos
    .local int rx1213_off
    .local int rx1213_eos
    .local int rx1213_rep
    .local pmc rx1213_cur
    .local pmc rx1213_curclass
    .local pmc rx1213_bstack
    .local pmc rx1213_cstack
    (rx1213_cur, rx1213_tgt, rx1213_pos, rx1213_curclass, rx1213_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1213_cur
    length rx1213_eos, rx1213_tgt
    eq $I19, 1, rx1213_restart3308
    gt rx1213_pos, rx1213_eos, rx1213_fail3309
    repr_get_attr_int $I11, self, rx1213_curclass, "$!from"
    ne $I11, -1, rxscan1214_done3315
    goto rxscan1214_scan3314
  rxscan1214_loop3313:
    inc rx1213_pos
    gt rx1213_pos, rx1213_eos, rx1213_fail3309
    repr_bind_attr_int rx1213_cur, rx1213_curclass, "$!from", rx1213_pos
  rxscan1214_scan3314:
    nqp_rxmark rx1213_bstack, rxscan1214_loop3313, rx1213_pos, 0
  rxscan1214_done3315:
    nqp_rxmark rx1213_bstack, rxcap1215_fail3317, rx1213_pos, 0
    add $I11, rx1213_pos, 2
    gt $I11, rx1213_eos, rx1213_fail3309
    substr $S10, rx1213_tgt, rx1213_pos, 2
    ne $S10, ucs4:"gt", rx1213_fail3309
    add rx1213_pos, 2
    nqp_rxpeek $I19, rx1213_bstack, rxcap1215_fail3317
    inc $I19
    set $I11, rx1213_bstack[$I19]
    repr_bind_attr_int rx1213_cur, rx1213_curclass, "$!pos", rx1213_pos
    $P11 = rx1213_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1213_pos)
    rx1213_cstack = rx1213_cur."!cursor_capture"($P11, "sym")
    goto rxcap1215_done3316
  rxcap1215_fail3317:
    goto rx1213_fail3309
  rxcap1215_done3316:
    repr_bind_attr_int rx1213_cur, rx1213_curclass, "$!pos", rx1213_pos
    $P11 = rx1213_cur."O"("%relational, :op<isgt_s>")
    repr_get_attr_int $I11, $P11, rx1213_curclass, "$!pos"
    lt $I11, 0, rx1213_fail3309
    nqp_rxmark rx1213_bstack, rxsubrule1216_pass3318, -1, 0
  rxsubrule1216_pass3318:
    rx1213_cstack = rx1213_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1213_pos, $P11, rx1213_curclass, "$!pos"
    rx1213_cur."!cursor_pass"(rx1213_pos, "infix:sym<gt>", 'backtrack'=>1)
    .return (rx1213_cur)
  rx1213_restart3308:
    repr_get_attr_obj rx1213_cstack, rx1213_cur, rx1213_curclass, "$!cstack"
  rx1213_fail3309:
    unless rx1213_bstack, rx1213_done3307
    pop $I19, rx1213_bstack
    if_null rx1213_cstack, rx1213_cstack_done3312
    unless rx1213_cstack, rx1213_cstack_done3312
    dec $I19
    set $P11, rx1213_cstack[$I19]
  rx1213_cstack_done3312:
    pop rx1213_rep, rx1213_bstack
    pop rx1213_pos, rx1213_bstack
    pop $I19, rx1213_bstack
    lt rx1213_pos, -1, rx1213_done3307
    lt rx1213_pos, 0, rx1213_fail3309
    eq $I19, 0, rx1213_fail3309
    nqp_islist $I20, rx1213_cstack
    unless $I20, rx1213_jump3310
    elements $I18, rx1213_bstack
    le $I18, 0, rx1213_cut3311
    dec $I18
    set $I18, rx1213_bstack[$I18]
  rx1213_cut3311:
    assign rx1213_cstack, $I18
  rx1213_jump3310:
    jump $I19
  rx1213_done3307:
    rx1213_cur."!cursor_fail"()
    .return (rx1213_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<=:=>" :subid("cuid_208_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1356
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1217_tgt
    .local int rx1217_pos
    .local int rx1217_off
    .local int rx1217_eos
    .local int rx1217_rep
    .local pmc rx1217_cur
    .local pmc rx1217_curclass
    .local pmc rx1217_bstack
    .local pmc rx1217_cstack
    (rx1217_cur, rx1217_tgt, rx1217_pos, rx1217_curclass, rx1217_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1217_cur
    length rx1217_eos, rx1217_tgt
    eq $I19, 1, rx1217_restart3321
    gt rx1217_pos, rx1217_eos, rx1217_fail3322
    repr_get_attr_int $I11, self, rx1217_curclass, "$!from"
    ne $I11, -1, rxscan1218_done3328
    goto rxscan1218_scan3327
  rxscan1218_loop3326:
    inc rx1217_pos
    gt rx1217_pos, rx1217_eos, rx1217_fail3322
    repr_bind_attr_int rx1217_cur, rx1217_curclass, "$!from", rx1217_pos
  rxscan1218_scan3327:
    nqp_rxmark rx1217_bstack, rxscan1218_loop3326, rx1217_pos, 0
  rxscan1218_done3328:
    nqp_rxmark rx1217_bstack, rxcap1219_fail3330, rx1217_pos, 0
    add $I11, rx1217_pos, 3
    gt $I11, rx1217_eos, rx1217_fail3322
    substr $S10, rx1217_tgt, rx1217_pos, 3
    ne $S10, ucs4:"=:=", rx1217_fail3322
    add rx1217_pos, 3
    nqp_rxpeek $I19, rx1217_bstack, rxcap1219_fail3330
    inc $I19
    set $I11, rx1217_bstack[$I19]
    repr_bind_attr_int rx1217_cur, rx1217_curclass, "$!pos", rx1217_pos
    $P11 = rx1217_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1217_pos)
    rx1217_cstack = rx1217_cur."!cursor_capture"($P11, "sym")
    goto rxcap1219_done3329
  rxcap1219_fail3330:
    goto rx1217_fail3322
  rxcap1219_done3329:
    repr_bind_attr_int rx1217_cur, rx1217_curclass, "$!pos", rx1217_pos
    $P11 = rx1217_cur."O"("%relational, :op<eqaddr>")
    repr_get_attr_int $I11, $P11, rx1217_curclass, "$!pos"
    lt $I11, 0, rx1217_fail3322
    nqp_rxmark rx1217_bstack, rxsubrule1220_pass3331, -1, 0
  rxsubrule1220_pass3331:
    rx1217_cstack = rx1217_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1217_pos, $P11, rx1217_curclass, "$!pos"
    rx1217_cur."!cursor_pass"(rx1217_pos, "infix:sym<=:=>", 'backtrack'=>1)
    .return (rx1217_cur)
  rx1217_restart3321:
    repr_get_attr_obj rx1217_cstack, rx1217_cur, rx1217_curclass, "$!cstack"
  rx1217_fail3322:
    unless rx1217_bstack, rx1217_done3320
    pop $I19, rx1217_bstack
    if_null rx1217_cstack, rx1217_cstack_done3325
    unless rx1217_cstack, rx1217_cstack_done3325
    dec $I19
    set $P11, rx1217_cstack[$I19]
  rx1217_cstack_done3325:
    pop rx1217_rep, rx1217_bstack
    pop rx1217_pos, rx1217_bstack
    pop $I19, rx1217_bstack
    lt rx1217_pos, -1, rx1217_done3320
    lt rx1217_pos, 0, rx1217_fail3322
    eq $I19, 0, rx1217_fail3322
    nqp_islist $I20, rx1217_cstack
    unless $I20, rx1217_jump3323
    elements $I18, rx1217_bstack
    le $I18, 0, rx1217_cut3324
    dec $I18
    set $I18, rx1217_bstack[$I18]
  rx1217_cut3324:
    assign rx1217_cstack, $I18
  rx1217_jump3323:
    jump $I19
  rx1217_done3320:
    rx1217_cur."!cursor_fail"()
    .return (rx1217_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<~~>" :subid("cuid_209_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1357
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1221_tgt
    .local int rx1221_pos
    .local int rx1221_off
    .local int rx1221_eos
    .local int rx1221_rep
    .local pmc rx1221_cur
    .local pmc rx1221_curclass
    .local pmc rx1221_bstack
    .local pmc rx1221_cstack
    (rx1221_cur, rx1221_tgt, rx1221_pos, rx1221_curclass, rx1221_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1221_cur
    length rx1221_eos, rx1221_tgt
    eq $I19, 1, rx1221_restart3334
    gt rx1221_pos, rx1221_eos, rx1221_fail3335
    repr_get_attr_int $I11, self, rx1221_curclass, "$!from"
    ne $I11, -1, rxscan1222_done3341
    goto rxscan1222_scan3340
  rxscan1222_loop3339:
    inc rx1221_pos
    gt rx1221_pos, rx1221_eos, rx1221_fail3335
    repr_bind_attr_int rx1221_cur, rx1221_curclass, "$!from", rx1221_pos
  rxscan1222_scan3340:
    nqp_rxmark rx1221_bstack, rxscan1222_loop3339, rx1221_pos, 0
  rxscan1222_done3341:
    nqp_rxmark rx1221_bstack, rxcap1223_fail3343, rx1221_pos, 0
    add $I11, rx1221_pos, 2
    gt $I11, rx1221_eos, rx1221_fail3335
    substr $S10, rx1221_tgt, rx1221_pos, 2
    ne $S10, ucs4:"~~", rx1221_fail3335
    add rx1221_pos, 2
    nqp_rxpeek $I19, rx1221_bstack, rxcap1223_fail3343
    inc $I19
    set $I11, rx1221_bstack[$I19]
    repr_bind_attr_int rx1221_cur, rx1221_curclass, "$!pos", rx1221_pos
    $P11 = rx1221_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1221_pos)
    rx1221_cstack = rx1221_cur."!cursor_capture"($P11, "sym")
    goto rxcap1223_done3342
  rxcap1223_fail3343:
    goto rx1221_fail3335
  rxcap1223_done3342:
    repr_bind_attr_int rx1221_cur, rx1221_curclass, "$!pos", rx1221_pos
    $P11 = rx1221_cur."O"("%relational, :reducecheck<smartmatch>")
    repr_get_attr_int $I11, $P11, rx1221_curclass, "$!pos"
    lt $I11, 0, rx1221_fail3335
    nqp_rxmark rx1221_bstack, rxsubrule1224_pass3344, -1, 0
  rxsubrule1224_pass3344:
    rx1221_cstack = rx1221_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1221_pos, $P11, rx1221_curclass, "$!pos"
    rx1221_cur."!cursor_pass"(rx1221_pos, "infix:sym<~~>", 'backtrack'=>1)
    .return (rx1221_cur)
  rx1221_restart3334:
    repr_get_attr_obj rx1221_cstack, rx1221_cur, rx1221_curclass, "$!cstack"
  rx1221_fail3335:
    unless rx1221_bstack, rx1221_done3333
    pop $I19, rx1221_bstack
    if_null rx1221_cstack, rx1221_cstack_done3338
    unless rx1221_cstack, rx1221_cstack_done3338
    dec $I19
    set $P11, rx1221_cstack[$I19]
  rx1221_cstack_done3338:
    pop rx1221_rep, rx1221_bstack
    pop rx1221_pos, rx1221_bstack
    pop $I19, rx1221_bstack
    lt rx1221_pos, -1, rx1221_done3333
    lt rx1221_pos, 0, rx1221_fail3335
    eq $I19, 0, rx1221_fail3335
    nqp_islist $I20, rx1221_cstack
    unless $I20, rx1221_jump3336
    elements $I18, rx1221_bstack
    le $I18, 0, rx1221_cut3337
    dec $I18
    set $I18, rx1221_bstack[$I18]
  rx1221_cut3337:
    assign rx1221_cstack, $I18
  rx1221_jump3336:
    jump $I19
  rx1221_done3333:
    rx1221_cur."!cursor_fail"()
    .return (rx1221_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<&&>" :subid("cuid_210_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1359
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1225_tgt
    .local int rx1225_pos
    .local int rx1225_off
    .local int rx1225_eos
    .local int rx1225_rep
    .local pmc rx1225_cur
    .local pmc rx1225_curclass
    .local pmc rx1225_bstack
    .local pmc rx1225_cstack
    (rx1225_cur, rx1225_tgt, rx1225_pos, rx1225_curclass, rx1225_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1225_cur
    length rx1225_eos, rx1225_tgt
    eq $I19, 1, rx1225_restart3347
    gt rx1225_pos, rx1225_eos, rx1225_fail3348
    repr_get_attr_int $I11, self, rx1225_curclass, "$!from"
    ne $I11, -1, rxscan1226_done3354
    goto rxscan1226_scan3353
  rxscan1226_loop3352:
    inc rx1225_pos
    gt rx1225_pos, rx1225_eos, rx1225_fail3348
    repr_bind_attr_int rx1225_cur, rx1225_curclass, "$!from", rx1225_pos
  rxscan1226_scan3353:
    nqp_rxmark rx1225_bstack, rxscan1226_loop3352, rx1225_pos, 0
  rxscan1226_done3354:
    nqp_rxmark rx1225_bstack, rxcap1227_fail3356, rx1225_pos, 0
    add $I11, rx1225_pos, 2
    gt $I11, rx1225_eos, rx1225_fail3348
    substr $S10, rx1225_tgt, rx1225_pos, 2
    ne $S10, ucs4:"&&", rx1225_fail3348
    add rx1225_pos, 2
    nqp_rxpeek $I19, rx1225_bstack, rxcap1227_fail3356
    inc $I19
    set $I11, rx1225_bstack[$I19]
    repr_bind_attr_int rx1225_cur, rx1225_curclass, "$!pos", rx1225_pos
    $P11 = rx1225_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1225_pos)
    rx1225_cstack = rx1225_cur."!cursor_capture"($P11, "sym")
    goto rxcap1227_done3355
  rxcap1227_fail3356:
    goto rx1225_fail3348
  rxcap1227_done3355:
    repr_bind_attr_int rx1225_cur, rx1225_curclass, "$!pos", rx1225_pos
    $P11 = rx1225_cur."O"("%tight_and, :op<if>")
    repr_get_attr_int $I11, $P11, rx1225_curclass, "$!pos"
    lt $I11, 0, rx1225_fail3348
    nqp_rxmark rx1225_bstack, rxsubrule1228_pass3357, -1, 0
  rxsubrule1228_pass3357:
    rx1225_cstack = rx1225_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1225_pos, $P11, rx1225_curclass, "$!pos"
    rx1225_cur."!cursor_pass"(rx1225_pos, "infix:sym<&&>", 'backtrack'=>1)
    .return (rx1225_cur)
  rx1225_restart3347:
    repr_get_attr_obj rx1225_cstack, rx1225_cur, rx1225_curclass, "$!cstack"
  rx1225_fail3348:
    unless rx1225_bstack, rx1225_done3346
    pop $I19, rx1225_bstack
    if_null rx1225_cstack, rx1225_cstack_done3351
    unless rx1225_cstack, rx1225_cstack_done3351
    dec $I19
    set $P11, rx1225_cstack[$I19]
  rx1225_cstack_done3351:
    pop rx1225_rep, rx1225_bstack
    pop rx1225_pos, rx1225_bstack
    pop $I19, rx1225_bstack
    lt rx1225_pos, -1, rx1225_done3346
    lt rx1225_pos, 0, rx1225_fail3348
    eq $I19, 0, rx1225_fail3348
    nqp_islist $I20, rx1225_cstack
    unless $I20, rx1225_jump3349
    elements $I18, rx1225_bstack
    le $I18, 0, rx1225_cut3350
    dec $I18
    set $I18, rx1225_bstack[$I18]
  rx1225_cut3350:
    assign rx1225_cstack, $I18
  rx1225_jump3349:
    jump $I19
  rx1225_done3346:
    rx1225_cur."!cursor_fail"()
    .return (rx1225_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<||>" :subid("cuid_211_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1361
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1229_tgt
    .local int rx1229_pos
    .local int rx1229_off
    .local int rx1229_eos
    .local int rx1229_rep
    .local pmc rx1229_cur
    .local pmc rx1229_curclass
    .local pmc rx1229_bstack
    .local pmc rx1229_cstack
    (rx1229_cur, rx1229_tgt, rx1229_pos, rx1229_curclass, rx1229_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1229_cur
    length rx1229_eos, rx1229_tgt
    eq $I19, 1, rx1229_restart3360
    gt rx1229_pos, rx1229_eos, rx1229_fail3361
    repr_get_attr_int $I11, self, rx1229_curclass, "$!from"
    ne $I11, -1, rxscan1230_done3367
    goto rxscan1230_scan3366
  rxscan1230_loop3365:
    inc rx1229_pos
    gt rx1229_pos, rx1229_eos, rx1229_fail3361
    repr_bind_attr_int rx1229_cur, rx1229_curclass, "$!from", rx1229_pos
  rxscan1230_scan3366:
    nqp_rxmark rx1229_bstack, rxscan1230_loop3365, rx1229_pos, 0
  rxscan1230_done3367:
    nqp_rxmark rx1229_bstack, rxcap1231_fail3369, rx1229_pos, 0
    add $I11, rx1229_pos, 2
    gt $I11, rx1229_eos, rx1229_fail3361
    substr $S10, rx1229_tgt, rx1229_pos, 2
    ne $S10, ucs4:"||", rx1229_fail3361
    add rx1229_pos, 2
    nqp_rxpeek $I19, rx1229_bstack, rxcap1231_fail3369
    inc $I19
    set $I11, rx1229_bstack[$I19]
    repr_bind_attr_int rx1229_cur, rx1229_curclass, "$!pos", rx1229_pos
    $P11 = rx1229_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1229_pos)
    rx1229_cstack = rx1229_cur."!cursor_capture"($P11, "sym")
    goto rxcap1231_done3368
  rxcap1231_fail3369:
    goto rx1229_fail3361
  rxcap1231_done3368:
    repr_bind_attr_int rx1229_cur, rx1229_curclass, "$!pos", rx1229_pos
    $P11 = rx1229_cur."O"("%tight_or, :op<unless>")
    repr_get_attr_int $I11, $P11, rx1229_curclass, "$!pos"
    lt $I11, 0, rx1229_fail3361
    nqp_rxmark rx1229_bstack, rxsubrule1232_pass3370, -1, 0
  rxsubrule1232_pass3370:
    rx1229_cstack = rx1229_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1229_pos, $P11, rx1229_curclass, "$!pos"
    rx1229_cur."!cursor_pass"(rx1229_pos, "infix:sym<||>", 'backtrack'=>1)
    .return (rx1229_cur)
  rx1229_restart3360:
    repr_get_attr_obj rx1229_cstack, rx1229_cur, rx1229_curclass, "$!cstack"
  rx1229_fail3361:
    unless rx1229_bstack, rx1229_done3359
    pop $I19, rx1229_bstack
    if_null rx1229_cstack, rx1229_cstack_done3364
    unless rx1229_cstack, rx1229_cstack_done3364
    dec $I19
    set $P11, rx1229_cstack[$I19]
  rx1229_cstack_done3364:
    pop rx1229_rep, rx1229_bstack
    pop rx1229_pos, rx1229_bstack
    pop $I19, rx1229_bstack
    lt rx1229_pos, -1, rx1229_done3359
    lt rx1229_pos, 0, rx1229_fail3361
    eq $I19, 0, rx1229_fail3361
    nqp_islist $I20, rx1229_cstack
    unless $I20, rx1229_jump3362
    elements $I18, rx1229_bstack
    le $I18, 0, rx1229_cut3363
    dec $I18
    set $I18, rx1229_bstack[$I18]
  rx1229_cut3363:
    assign rx1229_cstack, $I18
  rx1229_jump3362:
    jump $I19
  rx1229_done3359:
    rx1229_cur."!cursor_fail"()
    .return (rx1229_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<//>" :subid("cuid_212_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1362
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1233_tgt
    .local int rx1233_pos
    .local int rx1233_off
    .local int rx1233_eos
    .local int rx1233_rep
    .local pmc rx1233_cur
    .local pmc rx1233_curclass
    .local pmc rx1233_bstack
    .local pmc rx1233_cstack
    (rx1233_cur, rx1233_tgt, rx1233_pos, rx1233_curclass, rx1233_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1233_cur
    length rx1233_eos, rx1233_tgt
    eq $I19, 1, rx1233_restart3373
    gt rx1233_pos, rx1233_eos, rx1233_fail3374
    repr_get_attr_int $I11, self, rx1233_curclass, "$!from"
    ne $I11, -1, rxscan1234_done3380
    goto rxscan1234_scan3379
  rxscan1234_loop3378:
    inc rx1233_pos
    gt rx1233_pos, rx1233_eos, rx1233_fail3374
    repr_bind_attr_int rx1233_cur, rx1233_curclass, "$!from", rx1233_pos
  rxscan1234_scan3379:
    nqp_rxmark rx1233_bstack, rxscan1234_loop3378, rx1233_pos, 0
  rxscan1234_done3380:
    nqp_rxmark rx1233_bstack, rxcap1235_fail3382, rx1233_pos, 0
    add $I11, rx1233_pos, 2
    gt $I11, rx1233_eos, rx1233_fail3374
    substr $S10, rx1233_tgt, rx1233_pos, 2
    ne $S10, ucs4:"//", rx1233_fail3374
    add rx1233_pos, 2
    nqp_rxpeek $I19, rx1233_bstack, rxcap1235_fail3382
    inc $I19
    set $I11, rx1233_bstack[$I19]
    repr_bind_attr_int rx1233_cur, rx1233_curclass, "$!pos", rx1233_pos
    $P11 = rx1233_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1233_pos)
    rx1233_cstack = rx1233_cur."!cursor_capture"($P11, "sym")
    goto rxcap1235_done3381
  rxcap1235_fail3382:
    goto rx1233_fail3374
  rxcap1235_done3381:
    repr_bind_attr_int rx1233_cur, rx1233_curclass, "$!pos", rx1233_pos
    $P11 = rx1233_cur."O"("%tight_or, :op<defor>")
    repr_get_attr_int $I11, $P11, rx1233_curclass, "$!pos"
    lt $I11, 0, rx1233_fail3374
    nqp_rxmark rx1233_bstack, rxsubrule1236_pass3383, -1, 0
  rxsubrule1236_pass3383:
    rx1233_cstack = rx1233_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1233_pos, $P11, rx1233_curclass, "$!pos"
    rx1233_cur."!cursor_pass"(rx1233_pos, "infix:sym<//>", 'backtrack'=>1)
    .return (rx1233_cur)
  rx1233_restart3373:
    repr_get_attr_obj rx1233_cstack, rx1233_cur, rx1233_curclass, "$!cstack"
  rx1233_fail3374:
    unless rx1233_bstack, rx1233_done3372
    pop $I19, rx1233_bstack
    if_null rx1233_cstack, rx1233_cstack_done3377
    unless rx1233_cstack, rx1233_cstack_done3377
    dec $I19
    set $P11, rx1233_cstack[$I19]
  rx1233_cstack_done3377:
    pop rx1233_rep, rx1233_bstack
    pop rx1233_pos, rx1233_bstack
    pop $I19, rx1233_bstack
    lt rx1233_pos, -1, rx1233_done3372
    lt rx1233_pos, 0, rx1233_fail3374
    eq $I19, 0, rx1233_fail3374
    nqp_islist $I20, rx1233_cstack
    unless $I20, rx1233_jump3375
    elements $I18, rx1233_bstack
    le $I18, 0, rx1233_cut3376
    dec $I18
    set $I18, rx1233_bstack[$I18]
  rx1233_cut3376:
    assign rx1233_cstack, $I18
  rx1233_jump3375:
    jump $I19
  rx1233_done3372:
    rx1233_cur."!cursor_fail"()
    .return (rx1233_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<?? !!>" :subid("cuid_213_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1364
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1237_tgt
    .local int rx1237_pos
    .local int rx1237_off
    .local int rx1237_eos
    .local int rx1237_rep
    .local pmc rx1237_cur
    .local pmc rx1237_curclass
    .local pmc rx1237_bstack
    .local pmc rx1237_cstack
    (rx1237_cur, rx1237_tgt, rx1237_pos, rx1237_curclass, rx1237_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1237_cur
    length rx1237_eos, rx1237_tgt
    eq $I19, 1, rx1237_restart3386
    gt rx1237_pos, rx1237_eos, rx1237_fail3387
    repr_get_attr_int $I11, self, rx1237_curclass, "$!from"
    ne $I11, -1, rxscan1238_done3393
    goto rxscan1238_scan3392
  rxscan1238_loop3391:
    inc rx1237_pos
    gt rx1237_pos, rx1237_eos, rx1237_fail3387
    repr_bind_attr_int rx1237_cur, rx1237_curclass, "$!from", rx1237_pos
  rxscan1238_scan3392:
    nqp_rxmark rx1237_bstack, rxscan1238_loop3391, rx1237_pos, 0
  rxscan1238_done3393:
    add $I11, rx1237_pos, 2
    gt $I11, rx1237_eos, rx1237_fail3387
    substr $S10, rx1237_tgt, rx1237_pos, 2
    ne $S10, ucs4:"??", rx1237_fail3387
    add rx1237_pos, 2
    repr_bind_attr_int rx1237_cur, rx1237_curclass, "$!pos", rx1237_pos
    $P11 = rx1237_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1237_curclass, "$!pos"
    lt $I11, 0, rx1237_fail3387
    repr_get_attr_int rx1237_pos, $P11, rx1237_curclass, "$!pos"
    repr_bind_attr_int rx1237_cur, rx1237_curclass, "$!pos", rx1237_pos
    $P11 = rx1237_cur."EXPR"("i=")
    repr_get_attr_int $I11, $P11, rx1237_curclass, "$!pos"
    lt $I11, 0, rx1237_fail3387
    nqp_rxmark rx1237_bstack, rxsubrule1240_pass3395, -1, 0
  rxsubrule1240_pass3395:
    rx1237_cstack = rx1237_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx1237_pos, $P11, rx1237_curclass, "$!pos"
    add $I11, rx1237_pos, 2
    gt $I11, rx1237_eos, rx1237_fail3387
    substr $S10, rx1237_tgt, rx1237_pos, 2
    ne $S10, ucs4:"!!", rx1237_fail3387
    add rx1237_pos, 2
    repr_bind_attr_int rx1237_cur, rx1237_curclass, "$!pos", rx1237_pos
    $P11 = rx1237_cur."O"("%conditional, :reducecheck<ternary>, :op<if>")
    repr_get_attr_int $I11, $P11, rx1237_curclass, "$!pos"
    lt $I11, 0, rx1237_fail3387
    nqp_rxmark rx1237_bstack, rxsubrule1241_pass3396, -1, 0
  rxsubrule1241_pass3396:
    rx1237_cstack = rx1237_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1237_pos, $P11, rx1237_curclass, "$!pos"
    rx1237_cur."!cursor_pass"(rx1237_pos, "infix:sym<?? !!>", 'backtrack'=>1)
    .return (rx1237_cur)
  rx1237_restart3386:
    repr_get_attr_obj rx1237_cstack, rx1237_cur, rx1237_curclass, "$!cstack"
  rx1237_fail3387:
    unless rx1237_bstack, rx1237_done3385
    pop $I19, rx1237_bstack
    if_null rx1237_cstack, rx1237_cstack_done3390
    unless rx1237_cstack, rx1237_cstack_done3390
    dec $I19
    set $P11, rx1237_cstack[$I19]
  rx1237_cstack_done3390:
    pop rx1237_rep, rx1237_bstack
    pop rx1237_pos, rx1237_bstack
    pop $I19, rx1237_bstack
    lt rx1237_pos, -1, rx1237_done3385
    lt rx1237_pos, 0, rx1237_fail3387
    eq $I19, 0, rx1237_fail3387
    nqp_islist $I20, rx1237_cstack
    unless $I20, rx1237_jump3388
    elements $I18, rx1237_bstack
    le $I18, 0, rx1237_cut3389
    dec $I18
    set $I18, rx1237_bstack[$I18]
  rx1237_cut3389:
    assign rx1237_cstack, $I18
  rx1237_jump3388:
    jump $I19
  rx1237_done3385:
    rx1237_cur."!cursor_fail"()
    .return (rx1237_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<=>" :subid("cuid_214_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1372
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1242_tgt
    .local int rx1242_pos
    .local int rx1242_off
    .local int rx1242_eos
    .local int rx1242_rep
    .local pmc rx1242_cur
    .local pmc rx1242_curclass
    .local pmc rx1242_bstack
    .local pmc rx1242_cstack
    (rx1242_cur, rx1242_tgt, rx1242_pos, rx1242_curclass, rx1242_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1242_cur
    length rx1242_eos, rx1242_tgt
    eq $I19, 1, rx1242_restart3399
    gt rx1242_pos, rx1242_eos, rx1242_fail3400
    repr_get_attr_int $I11, self, rx1242_curclass, "$!from"
    ne $I11, -1, rxscan1243_done3406
    goto rxscan1243_scan3405
  rxscan1243_loop3404:
    inc rx1242_pos
    gt rx1242_pos, rx1242_eos, rx1242_fail3400
    repr_bind_attr_int rx1242_cur, rx1242_curclass, "$!from", rx1242_pos
  rxscan1243_scan3405:
    nqp_rxmark rx1242_bstack, rxscan1243_loop3404, rx1242_pos, 0
  rxscan1243_done3406:
    nqp_rxmark rx1242_bstack, rxcap1244_fail3408, rx1242_pos, 0
    add $I11, rx1242_pos, 1
    gt $I11, rx1242_eos, rx1242_fail3400
    substr $S10, rx1242_tgt, rx1242_pos, 1
    ne $S10, ucs4:"=", rx1242_fail3400
    add rx1242_pos, 1
    nqp_rxpeek $I19, rx1242_bstack, rxcap1244_fail3408
    inc $I19
    set $I11, rx1242_bstack[$I19]
    repr_bind_attr_int rx1242_cur, rx1242_curclass, "$!pos", rx1242_pos
    $P11 = rx1242_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1242_pos)
    rx1242_cstack = rx1242_cur."!cursor_capture"($P11, "sym")
    goto rxcap1244_done3407
  rxcap1244_fail3408:
    goto rx1242_fail3400
  rxcap1244_done3407:
    repr_bind_attr_int rx1242_cur, rx1242_curclass, "$!pos", rx1242_pos
    $P11 = rx1242_cur."panic"("Assignment (\"=\") not supported in NQP, use \":=\" instead")
    repr_get_attr_int $I11, $P11, rx1242_curclass, "$!pos"
    lt $I11, 0, rx1242_fail3400
    repr_get_attr_int rx1242_pos, $P11, rx1242_curclass, "$!pos"
    rx1242_cur."!cursor_pass"(rx1242_pos, "infix:sym<=>", 'backtrack'=>1)
    .return (rx1242_cur)
  rx1242_restart3399:
    repr_get_attr_obj rx1242_cstack, rx1242_cur, rx1242_curclass, "$!cstack"
  rx1242_fail3400:
    unless rx1242_bstack, rx1242_done3398
    pop $I19, rx1242_bstack
    if_null rx1242_cstack, rx1242_cstack_done3403
    unless rx1242_cstack, rx1242_cstack_done3403
    dec $I19
    set $P11, rx1242_cstack[$I19]
  rx1242_cstack_done3403:
    pop rx1242_rep, rx1242_bstack
    pop rx1242_pos, rx1242_bstack
    pop $I19, rx1242_bstack
    lt rx1242_pos, -1, rx1242_done3398
    lt rx1242_pos, 0, rx1242_fail3400
    eq $I19, 0, rx1242_fail3400
    nqp_islist $I20, rx1242_cstack
    unless $I20, rx1242_jump3401
    elements $I18, rx1242_bstack
    le $I18, 0, rx1242_cut3402
    dec $I18
    set $I18, rx1242_bstack[$I18]
  rx1242_cut3402:
    assign rx1242_cstack, $I18
  rx1242_jump3401:
    jump $I19
  rx1242_done3398:
    rx1242_cur."!cursor_fail"()
    .return (rx1242_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<:=>" :subid("cuid_215_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1375
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1246_tgt
    .local int rx1246_pos
    .local int rx1246_off
    .local int rx1246_eos
    .local int rx1246_rep
    .local pmc rx1246_cur
    .local pmc rx1246_curclass
    .local pmc rx1246_bstack
    .local pmc rx1246_cstack
    (rx1246_cur, rx1246_tgt, rx1246_pos, rx1246_curclass, rx1246_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1246_cur
    length rx1246_eos, rx1246_tgt
    eq $I19, 1, rx1246_restart3412
    gt rx1246_pos, rx1246_eos, rx1246_fail3413
    repr_get_attr_int $I11, self, rx1246_curclass, "$!from"
    ne $I11, -1, rxscan1247_done3419
    goto rxscan1247_scan3418
  rxscan1247_loop3417:
    inc rx1246_pos
    gt rx1246_pos, rx1246_eos, rx1246_fail3413
    repr_bind_attr_int rx1246_cur, rx1246_curclass, "$!from", rx1246_pos
  rxscan1247_scan3418:
    nqp_rxmark rx1246_bstack, rxscan1247_loop3417, rx1246_pos, 0
  rxscan1247_done3419:
    nqp_rxmark rx1246_bstack, rxcap1248_fail3421, rx1246_pos, 0
    add $I11, rx1246_pos, 2
    gt $I11, rx1246_eos, rx1246_fail3413
    substr $S10, rx1246_tgt, rx1246_pos, 2
    ne $S10, ucs4:":=", rx1246_fail3413
    add rx1246_pos, 2
    nqp_rxpeek $I19, rx1246_bstack, rxcap1248_fail3421
    inc $I19
    set $I11, rx1246_bstack[$I19]
    repr_bind_attr_int rx1246_cur, rx1246_curclass, "$!pos", rx1246_pos
    $P11 = rx1246_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1246_pos)
    rx1246_cstack = rx1246_cur."!cursor_capture"($P11, "sym")
    goto rxcap1248_done3420
  rxcap1248_fail3421:
    goto rx1246_fail3413
  rxcap1248_done3420:
    repr_bind_attr_int rx1246_cur, rx1246_curclass, "$!pos", rx1246_pos
    $P11 = rx1246_cur."O"("%assignment, :op<bind>")
    repr_get_attr_int $I11, $P11, rx1246_curclass, "$!pos"
    lt $I11, 0, rx1246_fail3413
    nqp_rxmark rx1246_bstack, rxsubrule1249_pass3422, -1, 0
  rxsubrule1249_pass3422:
    rx1246_cstack = rx1246_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1246_pos, $P11, rx1246_curclass, "$!pos"
    rx1246_cur."!cursor_pass"(rx1246_pos, "infix:sym<:=>", 'backtrack'=>1)
    .return (rx1246_cur)
  rx1246_restart3412:
    repr_get_attr_obj rx1246_cstack, rx1246_cur, rx1246_curclass, "$!cstack"
  rx1246_fail3413:
    unless rx1246_bstack, rx1246_done3411
    pop $I19, rx1246_bstack
    if_null rx1246_cstack, rx1246_cstack_done3416
    unless rx1246_cstack, rx1246_cstack_done3416
    dec $I19
    set $P11, rx1246_cstack[$I19]
  rx1246_cstack_done3416:
    pop rx1246_rep, rx1246_bstack
    pop rx1246_pos, rx1246_bstack
    pop $I19, rx1246_bstack
    lt rx1246_pos, -1, rx1246_done3411
    lt rx1246_pos, 0, rx1246_fail3413
    eq $I19, 0, rx1246_fail3413
    nqp_islist $I20, rx1246_cstack
    unless $I20, rx1246_jump3414
    elements $I18, rx1246_bstack
    le $I18, 0, rx1246_cut3415
    dec $I18
    set $I18, rx1246_bstack[$I18]
  rx1246_cut3415:
    assign rx1246_cstack, $I18
  rx1246_jump3414:
    jump $I19
  rx1246_done3411:
    rx1246_cur."!cursor_fail"()
    .return (rx1246_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<::=>" :subid("cuid_216_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1376
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1250_tgt
    .local int rx1250_pos
    .local int rx1250_off
    .local int rx1250_eos
    .local int rx1250_rep
    .local pmc rx1250_cur
    .local pmc rx1250_curclass
    .local pmc rx1250_bstack
    .local pmc rx1250_cstack
    (rx1250_cur, rx1250_tgt, rx1250_pos, rx1250_curclass, rx1250_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1250_cur
    length rx1250_eos, rx1250_tgt
    eq $I19, 1, rx1250_restart3425
    gt rx1250_pos, rx1250_eos, rx1250_fail3426
    repr_get_attr_int $I11, self, rx1250_curclass, "$!from"
    ne $I11, -1, rxscan1251_done3432
    goto rxscan1251_scan3431
  rxscan1251_loop3430:
    inc rx1250_pos
    gt rx1250_pos, rx1250_eos, rx1250_fail3426
    repr_bind_attr_int rx1250_cur, rx1250_curclass, "$!from", rx1250_pos
  rxscan1251_scan3431:
    nqp_rxmark rx1250_bstack, rxscan1251_loop3430, rx1250_pos, 0
  rxscan1251_done3432:
    nqp_rxmark rx1250_bstack, rxcap1252_fail3434, rx1250_pos, 0
    add $I11, rx1250_pos, 3
    gt $I11, rx1250_eos, rx1250_fail3426
    substr $S10, rx1250_tgt, rx1250_pos, 3
    ne $S10, ucs4:"::=", rx1250_fail3426
    add rx1250_pos, 3
    nqp_rxpeek $I19, rx1250_bstack, rxcap1252_fail3434
    inc $I19
    set $I11, rx1250_bstack[$I19]
    repr_bind_attr_int rx1250_cur, rx1250_curclass, "$!pos", rx1250_pos
    $P11 = rx1250_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1250_pos)
    rx1250_cstack = rx1250_cur."!cursor_capture"($P11, "sym")
    goto rxcap1252_done3433
  rxcap1252_fail3434:
    goto rx1250_fail3426
  rxcap1252_done3433:
    repr_bind_attr_int rx1250_cur, rx1250_curclass, "$!pos", rx1250_pos
    $P11 = rx1250_cur."O"("%assignment, :op<bind>")
    repr_get_attr_int $I11, $P11, rx1250_curclass, "$!pos"
    lt $I11, 0, rx1250_fail3426
    nqp_rxmark rx1250_bstack, rxsubrule1253_pass3435, -1, 0
  rxsubrule1253_pass3435:
    rx1250_cstack = rx1250_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1250_pos, $P11, rx1250_curclass, "$!pos"
    rx1250_cur."!cursor_pass"(rx1250_pos, "infix:sym<::=>", 'backtrack'=>1)
    .return (rx1250_cur)
  rx1250_restart3425:
    repr_get_attr_obj rx1250_cstack, rx1250_cur, rx1250_curclass, "$!cstack"
  rx1250_fail3426:
    unless rx1250_bstack, rx1250_done3424
    pop $I19, rx1250_bstack
    if_null rx1250_cstack, rx1250_cstack_done3429
    unless rx1250_cstack, rx1250_cstack_done3429
    dec $I19
    set $P11, rx1250_cstack[$I19]
  rx1250_cstack_done3429:
    pop rx1250_rep, rx1250_bstack
    pop rx1250_pos, rx1250_bstack
    pop $I19, rx1250_bstack
    lt rx1250_pos, -1, rx1250_done3424
    lt rx1250_pos, 0, rx1250_fail3426
    eq $I19, 0, rx1250_fail3426
    nqp_islist $I20, rx1250_cstack
    unless $I20, rx1250_jump3427
    elements $I18, rx1250_bstack
    le $I18, 0, rx1250_cut3428
    dec $I18
    set $I18, rx1250_bstack[$I18]
  rx1250_cut3428:
    assign rx1250_cstack, $I18
  rx1250_jump3427:
    jump $I19
  rx1250_done3424:
    rx1250_cur."!cursor_fail"()
    .return (rx1250_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<,>" :subid("cuid_217_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1378
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1254_tgt
    .local int rx1254_pos
    .local int rx1254_off
    .local int rx1254_eos
    .local int rx1254_rep
    .local pmc rx1254_cur
    .local pmc rx1254_curclass
    .local pmc rx1254_bstack
    .local pmc rx1254_cstack
    (rx1254_cur, rx1254_tgt, rx1254_pos, rx1254_curclass, rx1254_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1254_cur
    length rx1254_eos, rx1254_tgt
    eq $I19, 1, rx1254_restart3438
    gt rx1254_pos, rx1254_eos, rx1254_fail3439
    repr_get_attr_int $I11, self, rx1254_curclass, "$!from"
    ne $I11, -1, rxscan1255_done3445
    goto rxscan1255_scan3444
  rxscan1255_loop3443:
    inc rx1254_pos
    gt rx1254_pos, rx1254_eos, rx1254_fail3439
    repr_bind_attr_int rx1254_cur, rx1254_curclass, "$!from", rx1254_pos
  rxscan1255_scan3444:
    nqp_rxmark rx1254_bstack, rxscan1255_loop3443, rx1254_pos, 0
  rxscan1255_done3445:
    nqp_rxmark rx1254_bstack, rxcap1256_fail3447, rx1254_pos, 0
    add $I11, rx1254_pos, 1
    gt $I11, rx1254_eos, rx1254_fail3439
    substr $S10, rx1254_tgt, rx1254_pos, 1
    ne $S10, ucs4:",", rx1254_fail3439
    add rx1254_pos, 1
    nqp_rxpeek $I19, rx1254_bstack, rxcap1256_fail3447
    inc $I19
    set $I11, rx1254_bstack[$I19]
    repr_bind_attr_int rx1254_cur, rx1254_curclass, "$!pos", rx1254_pos
    $P11 = rx1254_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1254_pos)
    rx1254_cstack = rx1254_cur."!cursor_capture"($P11, "sym")
    goto rxcap1256_done3446
  rxcap1256_fail3447:
    goto rx1254_fail3439
  rxcap1256_done3446:
    repr_bind_attr_int rx1254_cur, rx1254_curclass, "$!pos", rx1254_pos
    $P11 = rx1254_cur."O"("%comma, :op<list>")
    repr_get_attr_int $I11, $P11, rx1254_curclass, "$!pos"
    lt $I11, 0, rx1254_fail3439
    nqp_rxmark rx1254_bstack, rxsubrule1257_pass3448, -1, 0
  rxsubrule1257_pass3448:
    rx1254_cstack = rx1254_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1254_pos, $P11, rx1254_curclass, "$!pos"
    rx1254_cur."!cursor_pass"(rx1254_pos, "infix:sym<,>", 'backtrack'=>1)
    .return (rx1254_cur)
  rx1254_restart3438:
    repr_get_attr_obj rx1254_cstack, rx1254_cur, rx1254_curclass, "$!cstack"
  rx1254_fail3439:
    unless rx1254_bstack, rx1254_done3437
    pop $I19, rx1254_bstack
    if_null rx1254_cstack, rx1254_cstack_done3442
    unless rx1254_cstack, rx1254_cstack_done3442
    dec $I19
    set $P11, rx1254_cstack[$I19]
  rx1254_cstack_done3442:
    pop rx1254_rep, rx1254_bstack
    pop rx1254_pos, rx1254_bstack
    pop $I19, rx1254_bstack
    lt rx1254_pos, -1, rx1254_done3437
    lt rx1254_pos, 0, rx1254_fail3439
    eq $I19, 0, rx1254_fail3439
    nqp_islist $I20, rx1254_cstack
    unless $I20, rx1254_jump3440
    elements $I18, rx1254_bstack
    le $I18, 0, rx1254_cut3441
    dec $I18
    set $I18, rx1254_bstack[$I18]
  rx1254_cut3441:
    assign rx1254_cstack, $I18
  rx1254_jump3440:
    jump $I19
  rx1254_done3437:
    rx1254_cur."!cursor_fail"()
    .return (rx1254_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<return>" :subid("cuid_218_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1380
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_407_1358115338.889' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1258_tgt
    .local int rx1258_pos
    .local int rx1258_off
    .local int rx1258_eos
    .local int rx1258_rep
    .local pmc rx1258_cur
    .local pmc rx1258_curclass
    .local pmc rx1258_bstack
    .local pmc rx1258_cstack
    (rx1258_cur, rx1258_tgt, rx1258_pos, rx1258_curclass, rx1258_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1258_cur
    length rx1258_eos, rx1258_tgt
    eq $I19, 1, rx1258_restart3451
    gt rx1258_pos, rx1258_eos, rx1258_fail3452
    repr_get_attr_int $I11, self, rx1258_curclass, "$!from"
    ne $I11, -1, rxscan1259_done3458
    goto rxscan1259_scan3457
  rxscan1259_loop3456:
    inc rx1258_pos
    gt rx1258_pos, rx1258_eos, rx1258_fail3452
    repr_bind_attr_int rx1258_cur, rx1258_curclass, "$!from", rx1258_pos
  rxscan1259_scan3457:
    nqp_rxmark rx1258_bstack, rxscan1259_loop3456, rx1258_pos, 0
  rxscan1259_done3458:
    nqp_rxmark rx1258_bstack, rxcap1260_fail3460, rx1258_pos, 0
    add $I11, rx1258_pos, 6
    gt $I11, rx1258_eos, rx1258_fail3452
    substr $S10, rx1258_tgt, rx1258_pos, 6
    ne $S10, ucs4:"return", rx1258_fail3452
    add rx1258_pos, 6
    nqp_rxpeek $I19, rx1258_bstack, rxcap1260_fail3460
    inc $I19
    set $I11, rx1258_bstack[$I19]
    repr_bind_attr_int rx1258_cur, rx1258_curclass, "$!pos", rx1258_pos
    $P11 = rx1258_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1258_pos)
    rx1258_cstack = rx1258_cur."!cursor_capture"($P11, "sym")
    goto rxcap1260_done3459
  rxcap1260_fail3460:
    goto rx1258_fail3452
  rxcap1260_done3459:
    ge rx1258_pos, rx1258_eos, rx1258_fail3452
    is_cclass $I11, .CCLASS_WHITESPACE, rx1258_tgt, rx1258_pos
    unless $I11, rx1258_fail3452
    add rx1258_pos, 1
    repr_bind_attr_int rx1258_cur, rx1258_curclass, "$!pos", rx1258_pos
    $P11 = rx1258_cur."O"("%list_prefix")
    repr_get_attr_int $I11, $P11, rx1258_curclass, "$!pos"
    lt $I11, 0, rx1258_fail3452
    nqp_rxmark rx1258_bstack, rxsubrule1261_pass3461, -1, 0
  rxsubrule1261_pass3461:
    rx1258_cstack = rx1258_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1258_pos, $P11, rx1258_curclass, "$!pos"
    repr_bind_attr_int rx1258_cur, rx1258_curclass, "$!pos", rx1258_pos
    store_lex unicode:"$\x{a2}", rx1258_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_407_1358115338.889' 
    capture_lex $P5002
    $P5003 = $P5002()
    rx1258_cur."!cursor_pass"(rx1258_pos, "prefix:sym<return>", 'backtrack'=>1)
    .return (rx1258_cur)
  rx1258_restart3451:
    repr_get_attr_obj rx1258_cstack, rx1258_cur, rx1258_curclass, "$!cstack"
  rx1258_fail3452:
    unless rx1258_bstack, rx1258_done3450
    pop $I19, rx1258_bstack
    if_null rx1258_cstack, rx1258_cstack_done3455
    unless rx1258_cstack, rx1258_cstack_done3455
    dec $I19
    set $P11, rx1258_cstack[$I19]
  rx1258_cstack_done3455:
    pop rx1258_rep, rx1258_bstack
    pop rx1258_pos, rx1258_bstack
    pop $I19, rx1258_bstack
    lt rx1258_pos, -1, rx1258_done3450
    lt rx1258_pos, 0, rx1258_fail3452
    eq $I19, 0, rx1258_fail3452
    nqp_islist $I20, rx1258_cstack
    unless $I20, rx1258_jump3453
    elements $I18, rx1258_bstack
    le $I18, 0, rx1258_cut3454
    dec $I18
    set $I18, rx1258_bstack[$I18]
  rx1258_cut3454:
    assign rx1258_cstack, $I18
  rx1258_jump3453:
    jump $I19
  rx1258_done3450:
    rx1258_cur."!cursor_fail"()
    .return (rx1258_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_407_1358115338.889") :anon :lex :outer("cuid_218_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1380

    box $P5001, 1
    store_dynamic_lex "$*RETURN_USED", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<make>" :subid("cuid_219_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1381
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1262_tgt
    .local int rx1262_pos
    .local int rx1262_off
    .local int rx1262_eos
    .local int rx1262_rep
    .local pmc rx1262_cur
    .local pmc rx1262_curclass
    .local pmc rx1262_bstack
    .local pmc rx1262_cstack
    (rx1262_cur, rx1262_tgt, rx1262_pos, rx1262_curclass, rx1262_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1262_cur
    length rx1262_eos, rx1262_tgt
    eq $I19, 1, rx1262_restart3464
    gt rx1262_pos, rx1262_eos, rx1262_fail3465
    repr_get_attr_int $I11, self, rx1262_curclass, "$!from"
    ne $I11, -1, rxscan1263_done3471
    goto rxscan1263_scan3470
  rxscan1263_loop3469:
    inc rx1262_pos
    gt rx1262_pos, rx1262_eos, rx1262_fail3465
    repr_bind_attr_int rx1262_cur, rx1262_curclass, "$!from", rx1262_pos
  rxscan1263_scan3470:
    nqp_rxmark rx1262_bstack, rxscan1263_loop3469, rx1262_pos, 0
  rxscan1263_done3471:
    nqp_rxmark rx1262_bstack, rxcap1264_fail3473, rx1262_pos, 0
    add $I11, rx1262_pos, 4
    gt $I11, rx1262_eos, rx1262_fail3465
    substr $S10, rx1262_tgt, rx1262_pos, 4
    ne $S10, ucs4:"make", rx1262_fail3465
    add rx1262_pos, 4
    nqp_rxpeek $I19, rx1262_bstack, rxcap1264_fail3473
    inc $I19
    set $I11, rx1262_bstack[$I19]
    repr_bind_attr_int rx1262_cur, rx1262_curclass, "$!pos", rx1262_pos
    $P11 = rx1262_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1262_pos)
    rx1262_cstack = rx1262_cur."!cursor_capture"($P11, "sym")
    goto rxcap1264_done3472
  rxcap1264_fail3473:
    goto rx1262_fail3465
  rxcap1264_done3472:
    ge rx1262_pos, rx1262_eos, rx1262_fail3465
    is_cclass $I11, .CCLASS_WHITESPACE, rx1262_tgt, rx1262_pos
    unless $I11, rx1262_fail3465
    add rx1262_pos, 1
    repr_bind_attr_int rx1262_cur, rx1262_curclass, "$!pos", rx1262_pos
    $P11 = rx1262_cur."O"("%list_prefix")
    repr_get_attr_int $I11, $P11, rx1262_curclass, "$!pos"
    lt $I11, 0, rx1262_fail3465
    nqp_rxmark rx1262_bstack, rxsubrule1265_pass3474, -1, 0
  rxsubrule1265_pass3474:
    rx1262_cstack = rx1262_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1262_pos, $P11, rx1262_curclass, "$!pos"
    rx1262_cur."!cursor_pass"(rx1262_pos, "prefix:sym<make>", 'backtrack'=>1)
    .return (rx1262_cur)
  rx1262_restart3464:
    repr_get_attr_obj rx1262_cstack, rx1262_cur, rx1262_curclass, "$!cstack"
  rx1262_fail3465:
    unless rx1262_bstack, rx1262_done3463
    pop $I19, rx1262_bstack
    if_null rx1262_cstack, rx1262_cstack_done3468
    unless rx1262_cstack, rx1262_cstack_done3468
    dec $I19
    set $P11, rx1262_cstack[$I19]
  rx1262_cstack_done3468:
    pop rx1262_rep, rx1262_bstack
    pop rx1262_pos, rx1262_bstack
    pop $I19, rx1262_bstack
    lt rx1262_pos, -1, rx1262_done3463
    lt rx1262_pos, 0, rx1262_fail3465
    eq $I19, 0, rx1262_fail3465
    nqp_islist $I20, rx1262_cstack
    unless $I20, rx1262_jump3466
    elements $I18, rx1262_bstack
    le $I18, 0, rx1262_cut3467
    dec $I18
    set $I18, rx1262_bstack[$I18]
  rx1262_cut3467:
    assign rx1262_cstack, $I18
  rx1262_jump3466:
    jump $I19
  rx1262_done3463:
    rx1262_cur."!cursor_fail"()
    .return (rx1262_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<last>" :subid("cuid_220_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1382
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_408_1358115338.889' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1266_tgt
    .local int rx1266_pos
    .local int rx1266_off
    .local int rx1266_eos
    .local int rx1266_rep
    .local pmc rx1266_cur
    .local pmc rx1266_curclass
    .local pmc rx1266_bstack
    .local pmc rx1266_cstack
    (rx1266_cur, rx1266_tgt, rx1266_pos, rx1266_curclass, rx1266_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1266_cur
    length rx1266_eos, rx1266_tgt
    eq $I19, 1, rx1266_restart3477
    gt rx1266_pos, rx1266_eos, rx1266_fail3478
    repr_get_attr_int $I11, self, rx1266_curclass, "$!from"
    ne $I11, -1, rxscan1267_done3484
    goto rxscan1267_scan3483
  rxscan1267_loop3482:
    inc rx1266_pos
    gt rx1266_pos, rx1266_eos, rx1266_fail3478
    repr_bind_attr_int rx1266_cur, rx1266_curclass, "$!from", rx1266_pos
  rxscan1267_scan3483:
    nqp_rxmark rx1266_bstack, rxscan1267_loop3482, rx1266_pos, 0
  rxscan1267_done3484:
    nqp_rxmark rx1266_bstack, rxcap1268_fail3486, rx1266_pos, 0
    add $I11, rx1266_pos, 4
    gt $I11, rx1266_eos, rx1266_fail3478
    substr $S10, rx1266_tgt, rx1266_pos, 4
    ne $S10, ucs4:"last", rx1266_fail3478
    add rx1266_pos, 4
    nqp_rxpeek $I19, rx1266_bstack, rxcap1268_fail3486
    inc $I19
    set $I11, rx1266_bstack[$I19]
    repr_bind_attr_int rx1266_cur, rx1266_curclass, "$!pos", rx1266_pos
    $P11 = rx1266_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1266_pos)
    rx1266_cstack = rx1266_cur."!cursor_capture"($P11, "sym")
    goto rxcap1268_done3485
  rxcap1268_fail3486:
    goto rx1266_fail3478
  rxcap1268_done3485:
    repr_bind_attr_int rx1266_cur, rx1266_curclass, "$!pos", rx1266_pos
    store_lex unicode:"$\x{a2}", rx1266_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_408_1358115338.889' 
    capture_lex $P5002
    $P5003 = $P5002()
    rx1266_cur."!cursor_pass"(rx1266_pos, "term:sym<last>", 'backtrack'=>1)
    .return (rx1266_cur)
  rx1266_restart3477:
    repr_get_attr_obj rx1266_cstack, rx1266_cur, rx1266_curclass, "$!cstack"
  rx1266_fail3478:
    unless rx1266_bstack, rx1266_done3476
    pop $I19, rx1266_bstack
    if_null rx1266_cstack, rx1266_cstack_done3481
    unless rx1266_cstack, rx1266_cstack_done3481
    dec $I19
    set $P11, rx1266_cstack[$I19]
  rx1266_cstack_done3481:
    pop rx1266_rep, rx1266_bstack
    pop rx1266_pos, rx1266_bstack
    pop $I19, rx1266_bstack
    lt rx1266_pos, -1, rx1266_done3476
    lt rx1266_pos, 0, rx1266_fail3478
    eq $I19, 0, rx1266_fail3478
    nqp_islist $I20, rx1266_cstack
    unless $I20, rx1266_jump3479
    elements $I18, rx1266_bstack
    le $I18, 0, rx1266_cut3480
    dec $I18
    set $I18, rx1266_bstack[$I18]
  rx1266_cut3480:
    assign rx1266_cstack, $I18
  rx1266_jump3479:
    jump $I19
  rx1266_done3476:
    rx1266_cur."!cursor_fail"()
    .return (rx1266_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_408_1358115338.889") :anon :lex :outer("cuid_220_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1382

    box $P5001, 1
    store_dynamic_lex "$*CONTROL_USED", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<next>" :subid("cuid_221_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1383
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_409_1358115338.889' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1269_tgt
    .local int rx1269_pos
    .local int rx1269_off
    .local int rx1269_eos
    .local int rx1269_rep
    .local pmc rx1269_cur
    .local pmc rx1269_curclass
    .local pmc rx1269_bstack
    .local pmc rx1269_cstack
    (rx1269_cur, rx1269_tgt, rx1269_pos, rx1269_curclass, rx1269_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1269_cur
    length rx1269_eos, rx1269_tgt
    eq $I19, 1, rx1269_restart3489
    gt rx1269_pos, rx1269_eos, rx1269_fail3490
    repr_get_attr_int $I11, self, rx1269_curclass, "$!from"
    ne $I11, -1, rxscan1270_done3496
    goto rxscan1270_scan3495
  rxscan1270_loop3494:
    inc rx1269_pos
    gt rx1269_pos, rx1269_eos, rx1269_fail3490
    repr_bind_attr_int rx1269_cur, rx1269_curclass, "$!from", rx1269_pos
  rxscan1270_scan3495:
    nqp_rxmark rx1269_bstack, rxscan1270_loop3494, rx1269_pos, 0
  rxscan1270_done3496:
    nqp_rxmark rx1269_bstack, rxcap1271_fail3498, rx1269_pos, 0
    add $I11, rx1269_pos, 4
    gt $I11, rx1269_eos, rx1269_fail3490
    substr $S10, rx1269_tgt, rx1269_pos, 4
    ne $S10, ucs4:"next", rx1269_fail3490
    add rx1269_pos, 4
    nqp_rxpeek $I19, rx1269_bstack, rxcap1271_fail3498
    inc $I19
    set $I11, rx1269_bstack[$I19]
    repr_bind_attr_int rx1269_cur, rx1269_curclass, "$!pos", rx1269_pos
    $P11 = rx1269_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1269_pos)
    rx1269_cstack = rx1269_cur."!cursor_capture"($P11, "sym")
    goto rxcap1271_done3497
  rxcap1271_fail3498:
    goto rx1269_fail3490
  rxcap1271_done3497:
    repr_bind_attr_int rx1269_cur, rx1269_curclass, "$!pos", rx1269_pos
    store_lex unicode:"$\x{a2}", rx1269_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_409_1358115338.889' 
    capture_lex $P5002
    $P5003 = $P5002()
    rx1269_cur."!cursor_pass"(rx1269_pos, "term:sym<next>", 'backtrack'=>1)
    .return (rx1269_cur)
  rx1269_restart3489:
    repr_get_attr_obj rx1269_cstack, rx1269_cur, rx1269_curclass, "$!cstack"
  rx1269_fail3490:
    unless rx1269_bstack, rx1269_done3488
    pop $I19, rx1269_bstack
    if_null rx1269_cstack, rx1269_cstack_done3493
    unless rx1269_cstack, rx1269_cstack_done3493
    dec $I19
    set $P11, rx1269_cstack[$I19]
  rx1269_cstack_done3493:
    pop rx1269_rep, rx1269_bstack
    pop rx1269_pos, rx1269_bstack
    pop $I19, rx1269_bstack
    lt rx1269_pos, -1, rx1269_done3488
    lt rx1269_pos, 0, rx1269_fail3490
    eq $I19, 0, rx1269_fail3490
    nqp_islist $I20, rx1269_cstack
    unless $I20, rx1269_jump3491
    elements $I18, rx1269_bstack
    le $I18, 0, rx1269_cut3492
    dec $I18
    set $I18, rx1269_bstack[$I18]
  rx1269_cut3492:
    assign rx1269_cstack, $I18
  rx1269_jump3491:
    jump $I19
  rx1269_done3488:
    rx1269_cur."!cursor_fail"()
    .return (rx1269_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_409_1358115338.889") :anon :lex :outer("cuid_221_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1383

    box $P5001, 1
    store_dynamic_lex "$*CONTROL_USED", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<redo>" :subid("cuid_222_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1384
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_410_1358115338.889' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1272_tgt
    .local int rx1272_pos
    .local int rx1272_off
    .local int rx1272_eos
    .local int rx1272_rep
    .local pmc rx1272_cur
    .local pmc rx1272_curclass
    .local pmc rx1272_bstack
    .local pmc rx1272_cstack
    (rx1272_cur, rx1272_tgt, rx1272_pos, rx1272_curclass, rx1272_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1272_cur
    length rx1272_eos, rx1272_tgt
    eq $I19, 1, rx1272_restart3501
    gt rx1272_pos, rx1272_eos, rx1272_fail3502
    repr_get_attr_int $I11, self, rx1272_curclass, "$!from"
    ne $I11, -1, rxscan1273_done3508
    goto rxscan1273_scan3507
  rxscan1273_loop3506:
    inc rx1272_pos
    gt rx1272_pos, rx1272_eos, rx1272_fail3502
    repr_bind_attr_int rx1272_cur, rx1272_curclass, "$!from", rx1272_pos
  rxscan1273_scan3507:
    nqp_rxmark rx1272_bstack, rxscan1273_loop3506, rx1272_pos, 0
  rxscan1273_done3508:
    nqp_rxmark rx1272_bstack, rxcap1274_fail3510, rx1272_pos, 0
    add $I11, rx1272_pos, 4
    gt $I11, rx1272_eos, rx1272_fail3502
    substr $S10, rx1272_tgt, rx1272_pos, 4
    ne $S10, ucs4:"redo", rx1272_fail3502
    add rx1272_pos, 4
    nqp_rxpeek $I19, rx1272_bstack, rxcap1274_fail3510
    inc $I19
    set $I11, rx1272_bstack[$I19]
    repr_bind_attr_int rx1272_cur, rx1272_curclass, "$!pos", rx1272_pos
    $P11 = rx1272_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1272_pos)
    rx1272_cstack = rx1272_cur."!cursor_capture"($P11, "sym")
    goto rxcap1274_done3509
  rxcap1274_fail3510:
    goto rx1272_fail3502
  rxcap1274_done3509:
    repr_bind_attr_int rx1272_cur, rx1272_curclass, "$!pos", rx1272_pos
    store_lex unicode:"$\x{a2}", rx1272_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_410_1358115338.889' 
    capture_lex $P5002
    $P5003 = $P5002()
    rx1272_cur."!cursor_pass"(rx1272_pos, "term:sym<redo>", 'backtrack'=>1)
    .return (rx1272_cur)
  rx1272_restart3501:
    repr_get_attr_obj rx1272_cstack, rx1272_cur, rx1272_curclass, "$!cstack"
  rx1272_fail3502:
    unless rx1272_bstack, rx1272_done3500
    pop $I19, rx1272_bstack
    if_null rx1272_cstack, rx1272_cstack_done3505
    unless rx1272_cstack, rx1272_cstack_done3505
    dec $I19
    set $P11, rx1272_cstack[$I19]
  rx1272_cstack_done3505:
    pop rx1272_rep, rx1272_bstack
    pop rx1272_pos, rx1272_bstack
    pop $I19, rx1272_bstack
    lt rx1272_pos, -1, rx1272_done3500
    lt rx1272_pos, 0, rx1272_fail3502
    eq $I19, 0, rx1272_fail3502
    nqp_islist $I20, rx1272_cstack
    unless $I20, rx1272_jump3503
    elements $I18, rx1272_bstack
    le $I18, 0, rx1272_cut3504
    dec $I18
    set $I18, rx1272_bstack[$I18]
  rx1272_cut3504:
    assign rx1272_cstack, $I18
  rx1272_jump3503:
    jump $I19
  rx1272_done3500:
    rx1272_cur."!cursor_fail"()
    .return (rx1272_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_410_1358115338.889") :anon :lex :outer("cuid_222_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1384

    box $P5001, 1
    store_dynamic_lex "$*CONTROL_USED", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "smartmatch" :subid("cuid_223_1358115338.889") :anon :lex :outer("cuid_224_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1386
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$t", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    set $P5002, _lex_param_1[0]
    unless_null $P5002, fallback3511
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5003
  fallback3511:
    set $P101, $P5002
    set $P5004, _lex_param_1[1]
    unless_null $P5004, fallback3512
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5005
  fallback3512:
    set _lex_param_1[0], $P5004
    set _lex_param_1[1], $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_245_1358115338.889") :anon :lex :outer("cuid_1_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1392
    .const 'Sub' $P5013 = 'cuid_225_1358115338.889' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_226_1358115338.889' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_228_1358115338.889' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_229_1358115338.889' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_231_1358115338.889' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_232_1358115338.889' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_235_1358115338.889' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_238_1358115338.889' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_240_1358115338.889' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_242_1358115338.889' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_243_1358115338.889' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_244_1358115338.889' 
    capture_lex $P5013 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    .const 'Sub' $P5001 = 'cuid_225_1358115338.889' 
    capture_lex $P5001
    .const 'Sub' $P5002 = 'cuid_226_1358115338.889' 
    capture_lex $P5002
    .const 'Sub' $P5003 = 'cuid_228_1358115338.889' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_229_1358115338.889' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_231_1358115338.889' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_232_1358115338.889' 
    capture_lex $P5006
    .const 'Sub' $P5007 = 'cuid_235_1358115338.889' 
    capture_lex $P5007
    .const 'Sub' $P5008 = 'cuid_238_1358115338.889' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_240_1358115338.889' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_242_1358115338.889' 
    capture_lex $P5010
    .const 'Sub' $P5011 = 'cuid_243_1358115338.889' 
    capture_lex $P5011
    .const 'Sub' $P5012 = 'cuid_244_1358115338.889' 
    capture_lex $P5012
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "rxstopper" :subid("cuid_225_1358115338.889") :anon :lex :outer("cuid_245_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1393
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1275_tgt
    .local int rx1275_pos
    .local int rx1275_off
    .local int rx1275_eos
    .local int rx1275_rep
    .local pmc rx1275_cur
    .local pmc rx1275_curclass
    .local pmc rx1275_bstack
    .local pmc rx1275_cstack
    (rx1275_cur, rx1275_tgt, rx1275_pos, rx1275_curclass, rx1275_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1275_cur
    length rx1275_eos, rx1275_tgt
    eq $I19, 1, rx1275_restart3515
    gt rx1275_pos, rx1275_eos, rx1275_fail3516
    repr_get_attr_int $I11, self, rx1275_curclass, "$!from"
    ne $I11, -1, rxscan1276_done3522
    goto rxscan1276_scan3521
  rxscan1276_loop3520:
    inc rx1275_pos
    gt rx1275_pos, rx1275_eos, rx1275_fail3516
    repr_bind_attr_int rx1275_cur, rx1275_curclass, "$!from", rx1275_pos
  rxscan1276_scan3521:
    nqp_rxmark rx1275_bstack, rxscan1276_loop3520, rx1275_pos, 0
  rxscan1276_done3522:
    ge rx1275_pos, rx1275_eos, rx1275_fail3516
    substr $S11, rx1275_tgt, rx1275_pos, 1
    index $I11, ucs4:"}/", $S11
    lt $I11, 0, rx1275_fail3516
    inc rx1275_pos
    rx1275_cur."!cursor_pass"(rx1275_pos, "rxstopper", 'backtrack'=>1)
    .return (rx1275_cur)
  rx1275_restart3515:
    repr_get_attr_obj rx1275_cstack, rx1275_cur, rx1275_curclass, "$!cstack"
  rx1275_fail3516:
    unless rx1275_bstack, rx1275_done3514
    pop $I19, rx1275_bstack
    if_null rx1275_cstack, rx1275_cstack_done3519
    unless rx1275_cstack, rx1275_cstack_done3519
    dec $I19
    set $P11, rx1275_cstack[$I19]
  rx1275_cstack_done3519:
    pop rx1275_rep, rx1275_bstack
    pop rx1275_pos, rx1275_bstack
    pop $I19, rx1275_bstack
    lt rx1275_pos, -1, rx1275_done3514
    lt rx1275_pos, 0, rx1275_fail3516
    eq $I19, 0, rx1275_fail3516
    nqp_islist $I20, rx1275_cstack
    unless $I20, rx1275_jump3517
    elements $I18, rx1275_bstack
    le $I18, 0, rx1275_cut3518
    dec $I18
    set $I18, rx1275_bstack[$I18]
  rx1275_cut3518:
    assign rx1275_cstack, $I18
  rx1275_jump3517:
    jump $I19
  rx1275_done3514:
    rx1275_cur."!cursor_fail"()
    .return (rx1275_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<:my>" :subid("cuid_226_1358115338.889") :anon :lex :outer("cuid_245_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1397
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_227_1358115338.889' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1277_tgt
    .local int rx1277_pos
    .local int rx1277_off
    .local int rx1277_eos
    .local int rx1277_rep
    .local pmc rx1277_cur
    .local pmc rx1277_curclass
    .local pmc rx1277_bstack
    .local pmc rx1277_cstack
    (rx1277_cur, rx1277_tgt, rx1277_pos, rx1277_curclass, rx1277_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1277_cur
    length rx1277_eos, rx1277_tgt
    eq $I19, 1, rx1277_restart3525
    gt rx1277_pos, rx1277_eos, rx1277_fail3526
    repr_get_attr_int $I11, self, rx1277_curclass, "$!from"
    ne $I11, -1, rxscan1278_done3532
    goto rxscan1278_scan3531
  rxscan1278_loop3530:
    inc rx1277_pos
    gt rx1277_pos, rx1277_eos, rx1277_fail3526
    repr_bind_attr_int rx1277_cur, rx1277_curclass, "$!from", rx1277_pos
  rxscan1278_scan3531:
    nqp_rxmark rx1277_bstack, rxscan1278_loop3530, rx1277_pos, 0
  rxscan1278_done3532:
    add $I11, rx1277_pos, 1
    gt $I11, rx1277_eos, rx1277_fail3526
    substr $S10, rx1277_tgt, rx1277_pos, 1
    ne $S10, ucs4:":", rx1277_fail3526
    add rx1277_pos, 1
    .const 'Sub' $P5001 = 'cuid_227_1358115338.889' 
    capture_lex $P5001
    repr_bind_attr_int rx1277_cur, rx1277_curclass, "$!pos", rx1277_pos
    $P11 = rx1277_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1277_curclass, "$!pos"
    lt $I11, 0, rx1277_fail3526
    repr_bind_attr_int rx1277_cur, rx1277_curclass, "$!pos", rx1277_pos
    $P11 = rx1277_cur."LANG"("MAIN", "statement")
    repr_get_attr_int $I11, $P11, rx1277_curclass, "$!pos"
    lt $I11, 0, rx1277_fail3526
    nqp_rxmark rx1277_bstack, rxsubrule1281_pass3543, -1, 0
  rxsubrule1281_pass3543:
    rx1277_cstack = rx1277_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx1277_pos, $P11, rx1277_curclass, "$!pos"
    repr_bind_attr_int rx1277_cur, rx1277_curclass, "$!pos", rx1277_pos
    $P11 = rx1277_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1277_curclass, "$!pos"
    lt $I11, 0, rx1277_fail3526
    repr_get_attr_int rx1277_pos, $P11, rx1277_curclass, "$!pos"
    add $I11, rx1277_pos, 1
    gt $I11, rx1277_eos, rx1277_fail3526
    substr $S10, rx1277_tgt, rx1277_pos, 1
    ne $S10, ucs4:";", rx1277_fail3526
    add rx1277_pos, 1
    rx1277_cur."!cursor_pass"(rx1277_pos, "metachar:sym<:my>", 'backtrack'=>1)
    .return (rx1277_cur)
  rx1277_restart3525:
    repr_get_attr_obj rx1277_cstack, rx1277_cur, rx1277_curclass, "$!cstack"
  rx1277_fail3526:
    unless rx1277_bstack, rx1277_done3524
    pop $I19, rx1277_bstack
    if_null rx1277_cstack, rx1277_cstack_done3529
    unless rx1277_cstack, rx1277_cstack_done3529
    dec $I19
    set $P11, rx1277_cstack[$I19]
  rx1277_cstack_done3529:
    pop rx1277_rep, rx1277_bstack
    pop rx1277_pos, rx1277_bstack
    pop $I19, rx1277_bstack
    lt rx1277_pos, -1, rx1277_done3524
    lt rx1277_pos, 0, rx1277_fail3526
    eq $I19, 0, rx1277_fail3526
    nqp_islist $I20, rx1277_cstack
    unless $I20, rx1277_jump3527
    elements $I18, rx1277_bstack
    le $I18, 0, rx1277_cut3528
    dec $I18
    set $I18, rx1277_bstack[$I18]
  rx1277_cut3528:
    assign rx1277_cstack, $I18
  rx1277_jump3527:
    jump $I19
  rx1277_done3524:
    rx1277_cur."!cursor_fail"()
    .return (rx1277_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_227_1358115338.889") :anon :lex :outer("cuid_226_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1279_tgt
    .local int rx1279_pos
    .local int rx1279_off
    .local int rx1279_eos
    .local int rx1279_rep
    .local pmc rx1279_cur
    .local pmc rx1279_curclass
    .local pmc rx1279_bstack
    .local pmc rx1279_cstack
    (rx1279_cur, rx1279_tgt, rx1279_pos, rx1279_curclass, rx1279_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1279_cur
    length rx1279_eos, rx1279_tgt
    eq $I19, 1, rx1279_restart3535
    gt rx1279_pos, rx1279_eos, rx1279_fail3536
    repr_get_attr_int $I11, self, rx1279_curclass, "$!from"
    ne $I11, -1, rxscan1280_done3542
    goto rxscan1280_scan3541
  rxscan1280_loop3540:
    inc rx1279_pos
    gt rx1279_pos, rx1279_eos, rx1279_fail3536
    repr_bind_attr_int rx1279_cur, rx1279_curclass, "$!from", rx1279_pos
  rxscan1280_scan3541:
    nqp_rxmark rx1279_bstack, rxscan1280_loop3540, rx1279_pos, 0
  rxscan1280_done3542:
    add $I11, rx1279_pos, 2
    gt $I11, rx1279_eos, rx1279_fail3536
    substr $S10, rx1279_tgt, rx1279_pos, 2
    ne $S10, ucs4:"my", rx1279_fail3536
    add rx1279_pos, 2
    rx1279_cur."!cursor_pass"(rx1279_pos, 'backtrack'=>1)
    .return (rx1279_cur)
  rx1279_restart3535:
    repr_get_attr_obj rx1279_cstack, rx1279_cur, rx1279_curclass, "$!cstack"
  rx1279_fail3536:
    unless rx1279_bstack, rx1279_done3534
    pop $I19, rx1279_bstack
    if_null rx1279_cstack, rx1279_cstack_done3539
    unless rx1279_cstack, rx1279_cstack_done3539
    dec $I19
    set $P11, rx1279_cstack[$I19]
  rx1279_cstack_done3539:
    pop rx1279_rep, rx1279_bstack
    pop rx1279_pos, rx1279_bstack
    pop $I19, rx1279_bstack
    lt rx1279_pos, -1, rx1279_done3534
    lt rx1279_pos, 0, rx1279_fail3536
    eq $I19, 0, rx1279_fail3536
    nqp_islist $I20, rx1279_cstack
    unless $I20, rx1279_jump3537
    elements $I18, rx1279_bstack
    le $I18, 0, rx1279_cut3538
    dec $I18
    set $I18, rx1279_bstack[$I18]
  rx1279_cut3538:
    assign rx1279_cstack, $I18
  rx1279_jump3537:
    jump $I19
  rx1279_done3534:
    rx1279_cur."!cursor_fail"()
    .return (rx1279_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<{ }>" :subid("cuid_228_1358115338.889") :anon :lex :outer("cuid_245_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1401
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1283_tgt
    .local int rx1283_pos
    .local int rx1283_off
    .local int rx1283_eos
    .local int rx1283_rep
    .local pmc rx1283_cur
    .local pmc rx1283_curclass
    .local pmc rx1283_bstack
    .local pmc rx1283_cstack
    (rx1283_cur, rx1283_tgt, rx1283_pos, rx1283_curclass, rx1283_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1283_cur
    length rx1283_eos, rx1283_tgt
    eq $I19, 1, rx1283_restart3547
    gt rx1283_pos, rx1283_eos, rx1283_fail3548
    repr_get_attr_int $I11, self, rx1283_curclass, "$!from"
    ne $I11, -1, rxscan1284_done3554
    goto rxscan1284_scan3553
  rxscan1284_loop3552:
    inc rx1283_pos
    gt rx1283_pos, rx1283_eos, rx1283_fail3548
    repr_bind_attr_int rx1283_cur, rx1283_curclass, "$!from", rx1283_pos
  rxscan1284_scan3553:
    nqp_rxmark rx1283_bstack, rxscan1284_loop3552, rx1283_pos, 0
  rxscan1284_done3554:
    ge rx1283_pos, rx1283_eos, rx1283_fail3548
    substr $S11, rx1283_tgt, rx1283_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx1283_fail3548
    repr_bind_attr_int rx1283_cur, rx1283_curclass, "$!pos", rx1283_pos
    $P11 = rx1283_cur."codeblock"()
    repr_get_attr_int $I11, $P11, rx1283_curclass, "$!pos"
    lt $I11, 0, rx1283_fail3548
    nqp_rxmark rx1283_bstack, rxsubrule1285_pass3555, -1, 0
  rxsubrule1285_pass3555:
    rx1283_cstack = rx1283_cur."!cursor_capture"($P11, "codeblock")
    repr_get_attr_int rx1283_pos, $P11, rx1283_curclass, "$!pos"
    rx1283_cur."!cursor_pass"(rx1283_pos, "metachar:sym<{ }>", 'backtrack'=>1)
    .return (rx1283_cur)
  rx1283_restart3547:
    repr_get_attr_obj rx1283_cstack, rx1283_cur, rx1283_curclass, "$!cstack"
  rx1283_fail3548:
    unless rx1283_bstack, rx1283_done3546
    pop $I19, rx1283_bstack
    if_null rx1283_cstack, rx1283_cstack_done3551
    unless rx1283_cstack, rx1283_cstack_done3551
    dec $I19
    set $P11, rx1283_cstack[$I19]
  rx1283_cstack_done3551:
    pop rx1283_rep, rx1283_bstack
    pop rx1283_pos, rx1283_bstack
    pop $I19, rx1283_bstack
    lt rx1283_pos, -1, rx1283_done3546
    lt rx1283_pos, 0, rx1283_fail3548
    eq $I19, 0, rx1283_fail3548
    nqp_islist $I20, rx1283_cstack
    unless $I20, rx1283_jump3549
    elements $I18, rx1283_bstack
    le $I18, 0, rx1283_cut3550
    dec $I18
    set $I18, rx1283_bstack[$I18]
  rx1283_cut3550:
    assign rx1283_cstack, $I18
  rx1283_jump3549:
    jump $I19
  rx1283_done3546:
    rx1283_cur."!cursor_fail"()
    .return (rx1283_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<nqpvar>" :subid("cuid_229_1358115338.889") :anon :lex :outer("cuid_245_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1405
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_230_1358115338.889' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1286_tgt
    .local int rx1286_pos
    .local int rx1286_off
    .local int rx1286_eos
    .local int rx1286_rep
    .local pmc rx1286_cur
    .local pmc rx1286_curclass
    .local pmc rx1286_bstack
    .local pmc rx1286_cstack
    (rx1286_cur, rx1286_tgt, rx1286_pos, rx1286_curclass, rx1286_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1286_cur
    length rx1286_eos, rx1286_tgt
    eq $I19, 1, rx1286_restart3558
    gt rx1286_pos, rx1286_eos, rx1286_fail3559
    repr_get_attr_int $I11, self, rx1286_curclass, "$!from"
    ne $I11, -1, rxscan1287_done3565
    goto rxscan1287_scan3564
  rxscan1287_loop3563:
    inc rx1286_pos
    gt rx1286_pos, rx1286_eos, rx1286_fail3559
    repr_bind_attr_int rx1286_cur, rx1286_curclass, "$!from", rx1286_pos
  rxscan1287_scan3564:
    nqp_rxmark rx1286_bstack, rxscan1287_loop3563, rx1286_pos, 0
  rxscan1287_done3565:
    .const 'Sub' $P5001 = 'cuid_230_1358115338.889' 
    capture_lex $P5001
    repr_bind_attr_int rx1286_cur, rx1286_curclass, "$!pos", rx1286_pos
    $P11 = rx1286_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1286_curclass, "$!pos"
    lt $I11, 0, rx1286_fail3559
    repr_bind_attr_int rx1286_cur, rx1286_curclass, "$!pos", rx1286_pos
    $P11 = rx1286_cur."LANG"("MAIN", "variable")
    repr_get_attr_int $I11, $P11, rx1286_curclass, "$!pos"
    lt $I11, 0, rx1286_fail3559
    nqp_rxmark rx1286_bstack, rxsubrule1291_pass3579, -1, 0
  rxsubrule1291_pass3579:
    rx1286_cstack = rx1286_cur."!cursor_capture"($P11, "var")
    repr_get_attr_int rx1286_pos, $P11, rx1286_curclass, "$!pos"
    rx1286_cur."!cursor_pass"(rx1286_pos, "metachar:sym<nqpvar>", 'backtrack'=>1)
    .return (rx1286_cur)
  rx1286_restart3558:
    repr_get_attr_obj rx1286_cstack, rx1286_cur, rx1286_curclass, "$!cstack"
  rx1286_fail3559:
    unless rx1286_bstack, rx1286_done3557
    pop $I19, rx1286_bstack
    if_null rx1286_cstack, rx1286_cstack_done3562
    unless rx1286_cstack, rx1286_cstack_done3562
    dec $I19
    set $P11, rx1286_cstack[$I19]
  rx1286_cstack_done3562:
    pop rx1286_rep, rx1286_bstack
    pop rx1286_pos, rx1286_bstack
    pop $I19, rx1286_bstack
    lt rx1286_pos, -1, rx1286_done3557
    lt rx1286_pos, 0, rx1286_fail3559
    eq $I19, 0, rx1286_fail3559
    nqp_islist $I20, rx1286_cstack
    unless $I20, rx1286_jump3560
    elements $I18, rx1286_bstack
    le $I18, 0, rx1286_cut3561
    dec $I18
    set $I18, rx1286_bstack[$I18]
  rx1286_cut3561:
    assign rx1286_cstack, $I18
  rx1286_jump3560:
    jump $I19
  rx1286_done3557:
    rx1286_cur."!cursor_fail"()
    .return (rx1286_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_230_1358115338.889") :anon :lex :outer("cuid_229_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1288_tgt
    .local int rx1288_pos
    .local int rx1288_off
    .local int rx1288_eos
    .local int rx1288_rep
    .local pmc rx1288_cur
    .local pmc rx1288_curclass
    .local pmc rx1288_bstack
    .local pmc rx1288_cstack
    (rx1288_cur, rx1288_tgt, rx1288_pos, rx1288_curclass, rx1288_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1288_cur
    length rx1288_eos, rx1288_tgt
    eq $I19, 1, rx1288_restart3568
    gt rx1288_pos, rx1288_eos, rx1288_fail3569
    repr_get_attr_int $I11, self, rx1288_curclass, "$!from"
    ne $I11, -1, rxscan1289_done3575
    goto rxscan1289_scan3574
  rxscan1289_loop3573:
    inc rx1288_pos
    gt rx1288_pos, rx1288_eos, rx1288_fail3569
    repr_bind_attr_int rx1288_cur, rx1288_curclass, "$!from", rx1288_pos
  rxscan1289_scan3574:
    nqp_rxmark rx1288_bstack, rxscan1289_loop3573, rx1288_pos, 0
  rxscan1289_done3575:
    ge rx1288_pos, rx1288_eos, rx1288_fail3569
    substr $S11, rx1288_tgt, rx1288_pos, 1
    index $I11, ucs4:"$@&", $S11
    lt $I11, 0, rx1288_fail3569
    inc rx1288_pos
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1290_03577
    nqp_push_label $P11, alt1290_13578
    nqp_rxmark rx1288_bstack, alt1290_end3576, -1, 0
    rx1288_cur."!alt"(rx1288_pos, "alt_nfa__39_1358115342.06", $P11)
    goto rx1288_fail3569
  alt1290_03577:
    ge rx1288_pos, rx1288_eos, rx1288_fail3569
    is_cclass $I11, .CCLASS_WORD, rx1288_tgt, rx1288_pos
    if $I11, rx1288_fail3569
    add rx1288_pos, 1
    ge rx1288_pos, rx1288_eos, rx1288_fail3569
    is_cclass $I11, .CCLASS_WORD, rx1288_tgt, rx1288_pos
    unless $I11, rx1288_fail3569
    add rx1288_pos, 1
    goto alt1290_end3576
  alt1290_13578:
    ge rx1288_pos, rx1288_eos, rx1288_fail3569
    is_cclass $I11, .CCLASS_WORD, rx1288_tgt, rx1288_pos
    unless $I11, rx1288_fail3569
    add rx1288_pos, 1
    goto alt1290_end3576
  alt1290_end3576:
    nqp_rxcommit rx1288_bstack, alt1290_end3576
    rx1288_cur."!cursor_pass"(rx1288_pos, 'backtrack'=>1)
    .return (rx1288_cur)
  rx1288_restart3568:
    repr_get_attr_obj rx1288_cstack, rx1288_cur, rx1288_curclass, "$!cstack"
  rx1288_fail3569:
    unless rx1288_bstack, rx1288_done3567
    pop $I19, rx1288_bstack
    if_null rx1288_cstack, rx1288_cstack_done3572
    unless rx1288_cstack, rx1288_cstack_done3572
    dec $I19
    set $P11, rx1288_cstack[$I19]
  rx1288_cstack_done3572:
    pop rx1288_rep, rx1288_bstack
    pop rx1288_pos, rx1288_bstack
    pop $I19, rx1288_bstack
    lt rx1288_pos, -1, rx1288_done3567
    lt rx1288_pos, 0, rx1288_fail3569
    eq $I19, 0, rx1288_fail3569
    nqp_islist $I20, rx1288_cstack
    unless $I20, rx1288_jump3570
    elements $I18, rx1288_bstack
    le $I18, 0, rx1288_cut3571
    dec $I18
    set $I18, rx1288_bstack[$I18]
  rx1288_cut3571:
    assign rx1288_cstack, $I18
  rx1288_jump3570:
    jump $I19
  rx1288_done3567:
    rx1288_cur."!cursor_fail"()
    .return (rx1288_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<{ }>" :subid("cuid_231_1358115338.889") :anon :lex :outer("cuid_245_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1409
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1292_tgt
    .local int rx1292_pos
    .local int rx1292_off
    .local int rx1292_eos
    .local int rx1292_rep
    .local pmc rx1292_cur
    .local pmc rx1292_curclass
    .local pmc rx1292_bstack
    .local pmc rx1292_cstack
    (rx1292_cur, rx1292_tgt, rx1292_pos, rx1292_curclass, rx1292_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1292_cur
    length rx1292_eos, rx1292_tgt
    eq $I19, 1, rx1292_restart3582
    gt rx1292_pos, rx1292_eos, rx1292_fail3583
    repr_get_attr_int $I11, self, rx1292_curclass, "$!from"
    ne $I11, -1, rxscan1293_done3589
    goto rxscan1293_scan3588
  rxscan1293_loop3587:
    inc rx1292_pos
    gt rx1292_pos, rx1292_eos, rx1292_fail3583
    repr_bind_attr_int rx1292_cur, rx1292_curclass, "$!from", rx1292_pos
  rxscan1293_scan3588:
    nqp_rxmark rx1292_bstack, rxscan1293_loop3587, rx1292_pos, 0
  rxscan1293_done3589:
    ge rx1292_pos, rx1292_eos, rx1292_fail3583
    substr $S11, rx1292_tgt, rx1292_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx1292_fail3583
    repr_bind_attr_int rx1292_cur, rx1292_curclass, "$!pos", rx1292_pos
    $P11 = rx1292_cur."codeblock"()
    repr_get_attr_int $I11, $P11, rx1292_curclass, "$!pos"
    lt $I11, 0, rx1292_fail3583
    nqp_rxmark rx1292_bstack, rxsubrule1294_pass3590, -1, 0
  rxsubrule1294_pass3590:
    rx1292_cstack = rx1292_cur."!cursor_capture"($P11, "codeblock")
    repr_get_attr_int rx1292_pos, $P11, rx1292_curclass, "$!pos"
    rx1292_cur."!cursor_pass"(rx1292_pos, "assertion:sym<{ }>", 'backtrack'=>1)
    .return (rx1292_cur)
  rx1292_restart3582:
    repr_get_attr_obj rx1292_cstack, rx1292_cur, rx1292_curclass, "$!cstack"
  rx1292_fail3583:
    unless rx1292_bstack, rx1292_done3581
    pop $I19, rx1292_bstack
    if_null rx1292_cstack, rx1292_cstack_done3586
    unless rx1292_cstack, rx1292_cstack_done3586
    dec $I19
    set $P11, rx1292_cstack[$I19]
  rx1292_cstack_done3586:
    pop rx1292_rep, rx1292_bstack
    pop rx1292_pos, rx1292_bstack
    pop $I19, rx1292_bstack
    lt rx1292_pos, -1, rx1292_done3581
    lt rx1292_pos, 0, rx1292_fail3583
    eq $I19, 0, rx1292_fail3583
    nqp_islist $I20, rx1292_cstack
    unless $I20, rx1292_jump3584
    elements $I18, rx1292_bstack
    le $I18, 0, rx1292_cut3585
    dec $I18
    set $I18, rx1292_bstack[$I18]
  rx1292_cut3585:
    assign rx1292_cstack, $I18
  rx1292_jump3584:
    jump $I19
  rx1292_done3581:
    rx1292_cur."!cursor_fail"()
    .return (rx1292_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?>" :subid("cuid_232_1358115338.889") :anon :lex :outer("cuid_245_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1413
    .param pmc _lex_param_0 
    .const 'Sub' $P5003 = 'cuid_233_1358115338.889' 
    capture_lex $P5003 
    .const 'Sub' $P5003 = 'cuid_234_1358115338.889' 
    capture_lex $P5003 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1295_tgt
    .local int rx1295_pos
    .local int rx1295_off
    .local int rx1295_eos
    .local int rx1295_rep
    .local pmc rx1295_cur
    .local pmc rx1295_curclass
    .local pmc rx1295_bstack
    .local pmc rx1295_cstack
    (rx1295_cur, rx1295_tgt, rx1295_pos, rx1295_curclass, rx1295_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1295_cur
    length rx1295_eos, rx1295_tgt
    eq $I19, 1, rx1295_restart3593
    gt rx1295_pos, rx1295_eos, rx1295_fail3594
    repr_get_attr_int $I11, self, rx1295_curclass, "$!from"
    ne $I11, -1, rxscan1296_done3600
    goto rxscan1296_scan3599
  rxscan1296_loop3598:
    inc rx1295_pos
    gt rx1295_pos, rx1295_eos, rx1295_fail3594
    repr_bind_attr_int rx1295_cur, rx1295_curclass, "$!from", rx1295_pos
  rxscan1296_scan3599:
    nqp_rxmark rx1295_bstack, rxscan1296_loop3598, rx1295_pos, 0
  rxscan1296_done3600:
    add $I11, rx1295_pos, 1
    gt $I11, rx1295_eos, rx1295_fail3594
    substr $S10, rx1295_tgt, rx1295_pos, 1
    ne $S10, ucs4:"?", rx1295_fail3594
    add rx1295_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1297_03602
    nqp_push_label $P11, alt1297_13613
    nqp_rxmark rx1295_bstack, alt1297_end3601, -1, 0
    rx1295_cur."!alt"(rx1295_pos, "alt_nfa__40_1358115342.082", $P11)
    goto rx1295_fail3594
  alt1297_03602:
    .const 'Sub' $P5001 = 'cuid_233_1358115338.889' 
    capture_lex $P5001
    repr_bind_attr_int rx1295_cur, rx1295_curclass, "$!pos", rx1295_pos
    $P11 = rx1295_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1295_curclass, "$!pos"
    lt $I11, 0, rx1295_fail3594
    goto alt1297_end3601
  alt1297_13613:
    .const 'Sub' $P5002 = 'cuid_234_1358115338.889' 
    capture_lex $P5002
    repr_bind_attr_int rx1295_cur, rx1295_curclass, "$!pos", rx1295_pos
    $P11 = rx1295_cur."before"($P5002)
    repr_get_attr_int $I11, $P11, rx1295_curclass, "$!pos"
    ge $I11, 0, rx1295_fail3594
    repr_bind_attr_int rx1295_cur, rx1295_curclass, "$!pos", rx1295_pos
    $P11 = rx1295_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx1295_curclass, "$!pos"
    lt $I11, 0, rx1295_fail3594
    nqp_rxmark rx1295_bstack, rxsubrule1302_pass3624, -1, 0
  rxsubrule1302_pass3624:
    rx1295_cstack = rx1295_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx1295_pos, $P11, rx1295_curclass, "$!pos"
    goto alt1297_end3601
  alt1297_end3601:
    nqp_rxcommit rx1295_bstack, alt1297_end3601
    rx1295_cur."!cursor_pass"(rx1295_pos, "assertion:sym<?>", 'backtrack'=>1)
    .return (rx1295_cur)
  rx1295_restart3593:
    repr_get_attr_obj rx1295_cstack, rx1295_cur, rx1295_curclass, "$!cstack"
  rx1295_fail3594:
    unless rx1295_bstack, rx1295_done3592
    pop $I19, rx1295_bstack
    if_null rx1295_cstack, rx1295_cstack_done3597
    unless rx1295_cstack, rx1295_cstack_done3597
    dec $I19
    set $P11, rx1295_cstack[$I19]
  rx1295_cstack_done3597:
    pop rx1295_rep, rx1295_bstack
    pop rx1295_pos, rx1295_bstack
    pop $I19, rx1295_bstack
    lt rx1295_pos, -1, rx1295_done3592
    lt rx1295_pos, 0, rx1295_fail3594
    eq $I19, 0, rx1295_fail3594
    nqp_islist $I20, rx1295_cstack
    unless $I20, rx1295_jump3595
    elements $I18, rx1295_bstack
    le $I18, 0, rx1295_cut3596
    dec $I18
    set $I18, rx1295_bstack[$I18]
  rx1295_cut3596:
    assign rx1295_cstack, $I18
  rx1295_jump3595:
    jump $I19
  rx1295_done3592:
    rx1295_cur."!cursor_fail"()
    .return (rx1295_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_233_1358115338.889") :anon :lex :outer("cuid_232_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1298_tgt
    .local int rx1298_pos
    .local int rx1298_off
    .local int rx1298_eos
    .local int rx1298_rep
    .local pmc rx1298_cur
    .local pmc rx1298_curclass
    .local pmc rx1298_bstack
    .local pmc rx1298_cstack
    (rx1298_cur, rx1298_tgt, rx1298_pos, rx1298_curclass, rx1298_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1298_cur
    length rx1298_eos, rx1298_tgt
    eq $I19, 1, rx1298_restart3605
    gt rx1298_pos, rx1298_eos, rx1298_fail3606
    repr_get_attr_int $I11, self, rx1298_curclass, "$!from"
    ne $I11, -1, rxscan1299_done3612
    goto rxscan1299_scan3611
  rxscan1299_loop3610:
    inc rx1298_pos
    gt rx1298_pos, rx1298_eos, rx1298_fail3606
    repr_bind_attr_int rx1298_cur, rx1298_curclass, "$!from", rx1298_pos
  rxscan1299_scan3611:
    nqp_rxmark rx1298_bstack, rxscan1299_loop3610, rx1298_pos, 0
  rxscan1299_done3612:
    add $I11, rx1298_pos, 1
    gt $I11, rx1298_eos, rx1298_fail3606
    substr $S10, rx1298_tgt, rx1298_pos, 1
    ne $S10, ucs4:">", rx1298_fail3606
    add rx1298_pos, 1
    rx1298_cur."!cursor_pass"(rx1298_pos, 'backtrack'=>1)
    .return (rx1298_cur)
  rx1298_restart3605:
    repr_get_attr_obj rx1298_cstack, rx1298_cur, rx1298_curclass, "$!cstack"
  rx1298_fail3606:
    unless rx1298_bstack, rx1298_done3604
    pop $I19, rx1298_bstack
    if_null rx1298_cstack, rx1298_cstack_done3609
    unless rx1298_cstack, rx1298_cstack_done3609
    dec $I19
    set $P11, rx1298_cstack[$I19]
  rx1298_cstack_done3609:
    pop rx1298_rep, rx1298_bstack
    pop rx1298_pos, rx1298_bstack
    pop $I19, rx1298_bstack
    lt rx1298_pos, -1, rx1298_done3604
    lt rx1298_pos, 0, rx1298_fail3606
    eq $I19, 0, rx1298_fail3606
    nqp_islist $I20, rx1298_cstack
    unless $I20, rx1298_jump3607
    elements $I18, rx1298_bstack
    le $I18, 0, rx1298_cut3608
    dec $I18
    set $I18, rx1298_bstack[$I18]
  rx1298_cut3608:
    assign rx1298_cstack, $I18
  rx1298_jump3607:
    jump $I19
  rx1298_done3604:
    rx1298_cur."!cursor_fail"()
    .return (rx1298_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_234_1358115338.889") :anon :lex :outer("cuid_232_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1300_tgt
    .local int rx1300_pos
    .local int rx1300_off
    .local int rx1300_eos
    .local int rx1300_rep
    .local pmc rx1300_cur
    .local pmc rx1300_curclass
    .local pmc rx1300_bstack
    .local pmc rx1300_cstack
    (rx1300_cur, rx1300_tgt, rx1300_pos, rx1300_curclass, rx1300_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1300_cur
    length rx1300_eos, rx1300_tgt
    eq $I19, 1, rx1300_restart3616
    gt rx1300_pos, rx1300_eos, rx1300_fail3617
    repr_get_attr_int $I11, self, rx1300_curclass, "$!from"
    ne $I11, -1, rxscan1301_done3623
    goto rxscan1301_scan3622
  rxscan1301_loop3621:
    inc rx1300_pos
    gt rx1300_pos, rx1300_eos, rx1300_fail3617
    repr_bind_attr_int rx1300_cur, rx1300_curclass, "$!from", rx1300_pos
  rxscan1301_scan3622:
    nqp_rxmark rx1300_bstack, rxscan1301_loop3621, rx1300_pos, 0
  rxscan1301_done3623:
    add $I11, rx1300_pos, 1
    gt $I11, rx1300_eos, rx1300_fail3617
    substr $S10, rx1300_tgt, rx1300_pos, 1
    ne $S10, ucs4:"{", rx1300_fail3617
    add rx1300_pos, 1
    rx1300_cur."!cursor_pass"(rx1300_pos, 'backtrack'=>1)
    .return (rx1300_cur)
  rx1300_restart3616:
    repr_get_attr_obj rx1300_cstack, rx1300_cur, rx1300_curclass, "$!cstack"
  rx1300_fail3617:
    unless rx1300_bstack, rx1300_done3615
    pop $I19, rx1300_bstack
    if_null rx1300_cstack, rx1300_cstack_done3620
    unless rx1300_cstack, rx1300_cstack_done3620
    dec $I19
    set $P11, rx1300_cstack[$I19]
  rx1300_cstack_done3620:
    pop rx1300_rep, rx1300_bstack
    pop rx1300_pos, rx1300_bstack
    pop $I19, rx1300_bstack
    lt rx1300_pos, -1, rx1300_done3615
    lt rx1300_pos, 0, rx1300_fail3617
    eq $I19, 0, rx1300_fail3617
    nqp_islist $I20, rx1300_cstack
    unless $I20, rx1300_jump3618
    elements $I18, rx1300_bstack
    le $I18, 0, rx1300_cut3619
    dec $I18
    set $I18, rx1300_bstack[$I18]
  rx1300_cut3619:
    assign rx1300_cstack, $I18
  rx1300_jump3618:
    jump $I19
  rx1300_done3615:
    rx1300_cur."!cursor_fail"()
    .return (rx1300_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<!>" :subid("cuid_235_1358115338.889") :anon :lex :outer("cuid_245_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1414
    .param pmc _lex_param_0 
    .const 'Sub' $P5003 = 'cuid_236_1358115338.889' 
    capture_lex $P5003 
    .const 'Sub' $P5003 = 'cuid_237_1358115338.889' 
    capture_lex $P5003 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1303_tgt
    .local int rx1303_pos
    .local int rx1303_off
    .local int rx1303_eos
    .local int rx1303_rep
    .local pmc rx1303_cur
    .local pmc rx1303_curclass
    .local pmc rx1303_bstack
    .local pmc rx1303_cstack
    (rx1303_cur, rx1303_tgt, rx1303_pos, rx1303_curclass, rx1303_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1303_cur
    length rx1303_eos, rx1303_tgt
    eq $I19, 1, rx1303_restart3627
    gt rx1303_pos, rx1303_eos, rx1303_fail3628
    repr_get_attr_int $I11, self, rx1303_curclass, "$!from"
    ne $I11, -1, rxscan1304_done3634
    goto rxscan1304_scan3633
  rxscan1304_loop3632:
    inc rx1303_pos
    gt rx1303_pos, rx1303_eos, rx1303_fail3628
    repr_bind_attr_int rx1303_cur, rx1303_curclass, "$!from", rx1303_pos
  rxscan1304_scan3633:
    nqp_rxmark rx1303_bstack, rxscan1304_loop3632, rx1303_pos, 0
  rxscan1304_done3634:
    add $I11, rx1303_pos, 1
    gt $I11, rx1303_eos, rx1303_fail3628
    substr $S10, rx1303_tgt, rx1303_pos, 1
    ne $S10, ucs4:"!", rx1303_fail3628
    add rx1303_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1305_03636
    nqp_push_label $P11, alt1305_13647
    nqp_rxmark rx1303_bstack, alt1305_end3635, -1, 0
    rx1303_cur."!alt"(rx1303_pos, "alt_nfa__41_1358115342.095", $P11)
    goto rx1303_fail3628
  alt1305_03636:
    .const 'Sub' $P5001 = 'cuid_236_1358115338.889' 
    capture_lex $P5001
    repr_bind_attr_int rx1303_cur, rx1303_curclass, "$!pos", rx1303_pos
    $P11 = rx1303_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1303_curclass, "$!pos"
    lt $I11, 0, rx1303_fail3628
    goto alt1305_end3635
  alt1305_13647:
    .const 'Sub' $P5002 = 'cuid_237_1358115338.889' 
    capture_lex $P5002
    repr_bind_attr_int rx1303_cur, rx1303_curclass, "$!pos", rx1303_pos
    $P11 = rx1303_cur."before"($P5002)
    repr_get_attr_int $I11, $P11, rx1303_curclass, "$!pos"
    ge $I11, 0, rx1303_fail3628
    repr_bind_attr_int rx1303_cur, rx1303_curclass, "$!pos", rx1303_pos
    $P11 = rx1303_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx1303_curclass, "$!pos"
    lt $I11, 0, rx1303_fail3628
    nqp_rxmark rx1303_bstack, rxsubrule1310_pass3658, -1, 0
  rxsubrule1310_pass3658:
    rx1303_cstack = rx1303_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx1303_pos, $P11, rx1303_curclass, "$!pos"
    goto alt1305_end3635
  alt1305_end3635:
    nqp_rxcommit rx1303_bstack, alt1305_end3635
    rx1303_cur."!cursor_pass"(rx1303_pos, "assertion:sym<!>", 'backtrack'=>1)
    .return (rx1303_cur)
  rx1303_restart3627:
    repr_get_attr_obj rx1303_cstack, rx1303_cur, rx1303_curclass, "$!cstack"
  rx1303_fail3628:
    unless rx1303_bstack, rx1303_done3626
    pop $I19, rx1303_bstack
    if_null rx1303_cstack, rx1303_cstack_done3631
    unless rx1303_cstack, rx1303_cstack_done3631
    dec $I19
    set $P11, rx1303_cstack[$I19]
  rx1303_cstack_done3631:
    pop rx1303_rep, rx1303_bstack
    pop rx1303_pos, rx1303_bstack
    pop $I19, rx1303_bstack
    lt rx1303_pos, -1, rx1303_done3626
    lt rx1303_pos, 0, rx1303_fail3628
    eq $I19, 0, rx1303_fail3628
    nqp_islist $I20, rx1303_cstack
    unless $I20, rx1303_jump3629
    elements $I18, rx1303_bstack
    le $I18, 0, rx1303_cut3630
    dec $I18
    set $I18, rx1303_bstack[$I18]
  rx1303_cut3630:
    assign rx1303_cstack, $I18
  rx1303_jump3629:
    jump $I19
  rx1303_done3626:
    rx1303_cur."!cursor_fail"()
    .return (rx1303_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_236_1358115338.889") :anon :lex :outer("cuid_235_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1306_tgt
    .local int rx1306_pos
    .local int rx1306_off
    .local int rx1306_eos
    .local int rx1306_rep
    .local pmc rx1306_cur
    .local pmc rx1306_curclass
    .local pmc rx1306_bstack
    .local pmc rx1306_cstack
    (rx1306_cur, rx1306_tgt, rx1306_pos, rx1306_curclass, rx1306_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1306_cur
    length rx1306_eos, rx1306_tgt
    eq $I19, 1, rx1306_restart3639
    gt rx1306_pos, rx1306_eos, rx1306_fail3640
    repr_get_attr_int $I11, self, rx1306_curclass, "$!from"
    ne $I11, -1, rxscan1307_done3646
    goto rxscan1307_scan3645
  rxscan1307_loop3644:
    inc rx1306_pos
    gt rx1306_pos, rx1306_eos, rx1306_fail3640
    repr_bind_attr_int rx1306_cur, rx1306_curclass, "$!from", rx1306_pos
  rxscan1307_scan3645:
    nqp_rxmark rx1306_bstack, rxscan1307_loop3644, rx1306_pos, 0
  rxscan1307_done3646:
    add $I11, rx1306_pos, 1
    gt $I11, rx1306_eos, rx1306_fail3640
    substr $S10, rx1306_tgt, rx1306_pos, 1
    ne $S10, ucs4:">", rx1306_fail3640
    add rx1306_pos, 1
    rx1306_cur."!cursor_pass"(rx1306_pos, 'backtrack'=>1)
    .return (rx1306_cur)
  rx1306_restart3639:
    repr_get_attr_obj rx1306_cstack, rx1306_cur, rx1306_curclass, "$!cstack"
  rx1306_fail3640:
    unless rx1306_bstack, rx1306_done3638
    pop $I19, rx1306_bstack
    if_null rx1306_cstack, rx1306_cstack_done3643
    unless rx1306_cstack, rx1306_cstack_done3643
    dec $I19
    set $P11, rx1306_cstack[$I19]
  rx1306_cstack_done3643:
    pop rx1306_rep, rx1306_bstack
    pop rx1306_pos, rx1306_bstack
    pop $I19, rx1306_bstack
    lt rx1306_pos, -1, rx1306_done3638
    lt rx1306_pos, 0, rx1306_fail3640
    eq $I19, 0, rx1306_fail3640
    nqp_islist $I20, rx1306_cstack
    unless $I20, rx1306_jump3641
    elements $I18, rx1306_bstack
    le $I18, 0, rx1306_cut3642
    dec $I18
    set $I18, rx1306_bstack[$I18]
  rx1306_cut3642:
    assign rx1306_cstack, $I18
  rx1306_jump3641:
    jump $I19
  rx1306_done3638:
    rx1306_cur."!cursor_fail"()
    .return (rx1306_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_237_1358115338.889") :anon :lex :outer("cuid_235_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1308_tgt
    .local int rx1308_pos
    .local int rx1308_off
    .local int rx1308_eos
    .local int rx1308_rep
    .local pmc rx1308_cur
    .local pmc rx1308_curclass
    .local pmc rx1308_bstack
    .local pmc rx1308_cstack
    (rx1308_cur, rx1308_tgt, rx1308_pos, rx1308_curclass, rx1308_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1308_cur
    length rx1308_eos, rx1308_tgt
    eq $I19, 1, rx1308_restart3650
    gt rx1308_pos, rx1308_eos, rx1308_fail3651
    repr_get_attr_int $I11, self, rx1308_curclass, "$!from"
    ne $I11, -1, rxscan1309_done3657
    goto rxscan1309_scan3656
  rxscan1309_loop3655:
    inc rx1308_pos
    gt rx1308_pos, rx1308_eos, rx1308_fail3651
    repr_bind_attr_int rx1308_cur, rx1308_curclass, "$!from", rx1308_pos
  rxscan1309_scan3656:
    nqp_rxmark rx1308_bstack, rxscan1309_loop3655, rx1308_pos, 0
  rxscan1309_done3657:
    add $I11, rx1308_pos, 1
    gt $I11, rx1308_eos, rx1308_fail3651
    substr $S10, rx1308_tgt, rx1308_pos, 1
    ne $S10, ucs4:"{", rx1308_fail3651
    add rx1308_pos, 1
    rx1308_cur."!cursor_pass"(rx1308_pos, 'backtrack'=>1)
    .return (rx1308_cur)
  rx1308_restart3650:
    repr_get_attr_obj rx1308_cstack, rx1308_cur, rx1308_curclass, "$!cstack"
  rx1308_fail3651:
    unless rx1308_bstack, rx1308_done3649
    pop $I19, rx1308_bstack
    if_null rx1308_cstack, rx1308_cstack_done3654
    unless rx1308_cstack, rx1308_cstack_done3654
    dec $I19
    set $P11, rx1308_cstack[$I19]
  rx1308_cstack_done3654:
    pop rx1308_rep, rx1308_bstack
    pop rx1308_pos, rx1308_bstack
    pop $I19, rx1308_bstack
    lt rx1308_pos, -1, rx1308_done3649
    lt rx1308_pos, 0, rx1308_fail3651
    eq $I19, 0, rx1308_fail3651
    nqp_islist $I20, rx1308_cstack
    unless $I20, rx1308_jump3652
    elements $I18, rx1308_bstack
    le $I18, 0, rx1308_cut3653
    dec $I18
    set $I18, rx1308_bstack[$I18]
  rx1308_cut3653:
    assign rx1308_cstack, $I18
  rx1308_jump3652:
    jump $I19
  rx1308_done3649:
    rx1308_cur."!cursor_fail"()
    .return (rx1308_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?{ }>" :subid("cuid_238_1358115338.889") :anon :lex :outer("cuid_245_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1416
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_239_1358115338.889' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1311_tgt
    .local int rx1311_pos
    .local int rx1311_off
    .local int rx1311_eos
    .local int rx1311_rep
    .local pmc rx1311_cur
    .local pmc rx1311_curclass
    .local pmc rx1311_bstack
    .local pmc rx1311_cstack
    (rx1311_cur, rx1311_tgt, rx1311_pos, rx1311_curclass, rx1311_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1311_cur
    length rx1311_eos, rx1311_tgt
    eq $I19, 1, rx1311_restart3661
    gt rx1311_pos, rx1311_eos, rx1311_fail3662
    repr_get_attr_int $I11, self, rx1311_curclass, "$!from"
    ne $I11, -1, rxscan1312_done3668
    goto rxscan1312_scan3667
  rxscan1312_loop3666:
    inc rx1311_pos
    gt rx1311_pos, rx1311_eos, rx1311_fail3662
    repr_bind_attr_int rx1311_cur, rx1311_curclass, "$!from", rx1311_pos
  rxscan1312_scan3667:
    nqp_rxmark rx1311_bstack, rxscan1312_loop3666, rx1311_pos, 0
  rxscan1312_done3668:
    nqp_rxmark rx1311_bstack, rxcap1313_fail3670, rx1311_pos, 0
    ge rx1311_pos, rx1311_eos, rx1311_fail3662
    substr $S11, rx1311_tgt, rx1311_pos, 1
    index $I11, ucs4:"?!", $S11
    lt $I11, 0, rx1311_fail3662
    inc rx1311_pos
    .const 'Sub' $P5001 = 'cuid_239_1358115338.889' 
    capture_lex $P5001
    repr_bind_attr_int rx1311_cur, rx1311_curclass, "$!pos", rx1311_pos
    $P11 = rx1311_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1311_curclass, "$!pos"
    lt $I11, 0, rx1311_fail3662
    nqp_rxpeek $I19, rx1311_bstack, rxcap1313_fail3670
    inc $I19
    set $I11, rx1311_bstack[$I19]
    repr_bind_attr_int rx1311_cur, rx1311_curclass, "$!pos", rx1311_pos
    $P11 = rx1311_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1311_pos)
    rx1311_cstack = rx1311_cur."!cursor_capture"($P11, "zw")
    goto rxcap1313_done3669
  rxcap1313_fail3670:
    goto rx1311_fail3662
  rxcap1313_done3669:
    repr_bind_attr_int rx1311_cur, rx1311_curclass, "$!pos", rx1311_pos
    $P11 = rx1311_cur."codeblock"()
    repr_get_attr_int $I11, $P11, rx1311_curclass, "$!pos"
    lt $I11, 0, rx1311_fail3662
    nqp_rxmark rx1311_bstack, rxsubrule1316_pass3681, -1, 0
  rxsubrule1316_pass3681:
    rx1311_cstack = rx1311_cur."!cursor_capture"($P11, "codeblock")
    repr_get_attr_int rx1311_pos, $P11, rx1311_curclass, "$!pos"
    rx1311_cur."!cursor_pass"(rx1311_pos, "assertion:sym<?{ }>", 'backtrack'=>1)
    .return (rx1311_cur)
  rx1311_restart3661:
    repr_get_attr_obj rx1311_cstack, rx1311_cur, rx1311_curclass, "$!cstack"
  rx1311_fail3662:
    unless rx1311_bstack, rx1311_done3660
    pop $I19, rx1311_bstack
    if_null rx1311_cstack, rx1311_cstack_done3665
    unless rx1311_cstack, rx1311_cstack_done3665
    dec $I19
    set $P11, rx1311_cstack[$I19]
  rx1311_cstack_done3665:
    pop rx1311_rep, rx1311_bstack
    pop rx1311_pos, rx1311_bstack
    pop $I19, rx1311_bstack
    lt rx1311_pos, -1, rx1311_done3660
    lt rx1311_pos, 0, rx1311_fail3662
    eq $I19, 0, rx1311_fail3662
    nqp_islist $I20, rx1311_cstack
    unless $I20, rx1311_jump3663
    elements $I18, rx1311_bstack
    le $I18, 0, rx1311_cut3664
    dec $I18
    set $I18, rx1311_bstack[$I18]
  rx1311_cut3664:
    assign rx1311_cstack, $I18
  rx1311_jump3663:
    jump $I19
  rx1311_done3660:
    rx1311_cur."!cursor_fail"()
    .return (rx1311_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_239_1358115338.889") :anon :lex :outer("cuid_238_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1314_tgt
    .local int rx1314_pos
    .local int rx1314_off
    .local int rx1314_eos
    .local int rx1314_rep
    .local pmc rx1314_cur
    .local pmc rx1314_curclass
    .local pmc rx1314_bstack
    .local pmc rx1314_cstack
    (rx1314_cur, rx1314_tgt, rx1314_pos, rx1314_curclass, rx1314_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1314_cur
    length rx1314_eos, rx1314_tgt
    eq $I19, 1, rx1314_restart3673
    gt rx1314_pos, rx1314_eos, rx1314_fail3674
    repr_get_attr_int $I11, self, rx1314_curclass, "$!from"
    ne $I11, -1, rxscan1315_done3680
    goto rxscan1315_scan3679
  rxscan1315_loop3678:
    inc rx1314_pos
    gt rx1314_pos, rx1314_eos, rx1314_fail3674
    repr_bind_attr_int rx1314_cur, rx1314_curclass, "$!from", rx1314_pos
  rxscan1315_scan3679:
    nqp_rxmark rx1314_bstack, rxscan1315_loop3678, rx1314_pos, 0
  rxscan1315_done3680:
    add $I11, rx1314_pos, 1
    gt $I11, rx1314_eos, rx1314_fail3674
    substr $S10, rx1314_tgt, rx1314_pos, 1
    ne $S10, ucs4:"{", rx1314_fail3674
    add rx1314_pos, 1
    rx1314_cur."!cursor_pass"(rx1314_pos, 'backtrack'=>1)
    .return (rx1314_cur)
  rx1314_restart3673:
    repr_get_attr_obj rx1314_cstack, rx1314_cur, rx1314_curclass, "$!cstack"
  rx1314_fail3674:
    unless rx1314_bstack, rx1314_done3672
    pop $I19, rx1314_bstack
    if_null rx1314_cstack, rx1314_cstack_done3677
    unless rx1314_cstack, rx1314_cstack_done3677
    dec $I19
    set $P11, rx1314_cstack[$I19]
  rx1314_cstack_done3677:
    pop rx1314_rep, rx1314_bstack
    pop rx1314_pos, rx1314_bstack
    pop $I19, rx1314_bstack
    lt rx1314_pos, -1, rx1314_done3672
    lt rx1314_pos, 0, rx1314_fail3674
    eq $I19, 0, rx1314_fail3674
    nqp_islist $I20, rx1314_cstack
    unless $I20, rx1314_jump3675
    elements $I18, rx1314_bstack
    le $I18, 0, rx1314_cut3676
    dec $I18
    set $I18, rx1314_bstack[$I18]
  rx1314_cut3676:
    assign rx1314_cstack, $I18
  rx1314_jump3675:
    jump $I19
  rx1314_done3672:
    rx1314_cur."!cursor_fail"()
    .return (rx1314_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<name>" :subid("cuid_240_1358115338.889") :anon :lex :outer("cuid_245_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1420
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_241_1358115338.889' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1317_tgt
    .local int rx1317_pos
    .local int rx1317_off
    .local int rx1317_eos
    .local int rx1317_rep
    .local pmc rx1317_cur
    .local pmc rx1317_curclass
    .local pmc rx1317_bstack
    .local pmc rx1317_cstack
    (rx1317_cur, rx1317_tgt, rx1317_pos, rx1317_curclass, rx1317_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1317_cur
    length rx1317_eos, rx1317_tgt
    eq $I19, 1, rx1317_restart3684
    gt rx1317_pos, rx1317_eos, rx1317_fail3685
    repr_get_attr_int $I11, self, rx1317_curclass, "$!from"
    ne $I11, -1, rxscan1318_done3691
    goto rxscan1318_scan3690
  rxscan1318_loop3689:
    inc rx1317_pos
    gt rx1317_pos, rx1317_eos, rx1317_fail3685
    repr_bind_attr_int rx1317_cur, rx1317_curclass, "$!from", rx1317_pos
  rxscan1318_scan3690:
    nqp_rxmark rx1317_bstack, rxscan1318_loop3689, rx1317_pos, 0
  rxscan1318_done3691:
    repr_bind_attr_int rx1317_cur, rx1317_curclass, "$!pos", rx1317_pos
    $P11 = rx1317_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx1317_curclass, "$!pos"
    lt $I11, 0, rx1317_fail3685
    nqp_rxmark rx1317_bstack, rxsubrule1319_pass3692, -1, 0
  rxsubrule1319_pass3692:
    rx1317_cstack = rx1317_cur."!cursor_capture"($P11, "longname")
    repr_get_attr_int rx1317_pos, $P11, rx1317_curclass, "$!pos"
    nqp_rxmark rx1317_bstack, rxquantr1320_done3694, rx1317_pos, 0
  rxquantr1320_loop3693:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1321_03696
    nqp_push_label $P11, alt1321_13707
    nqp_push_label $P11, alt1321_23709
    nqp_push_label $P11, alt1321_33711
    nqp_push_label $P11, alt1321_43713
    nqp_rxmark rx1317_bstack, alt1321_end3695, -1, 0
    rx1317_cur."!alt"(rx1317_pos, "alt_nfa__42_1358115342.125", $P11)
    goto rx1317_fail3685
  alt1321_03696:
    .const 'Sub' $P5001 = 'cuid_241_1358115338.889' 
    capture_lex $P5001
    repr_bind_attr_int rx1317_cur, rx1317_curclass, "$!pos", rx1317_pos
    $P11 = rx1317_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1317_curclass, "$!pos"
    lt $I11, 0, rx1317_fail3685
    goto alt1321_end3695
  alt1321_13707:
    add $I11, rx1317_pos, 1
    gt $I11, rx1317_eos, rx1317_fail3685
    substr $S10, rx1317_tgt, rx1317_pos, 1
    ne $S10, ucs4:"=", rx1317_fail3685
    add rx1317_pos, 1
    repr_bind_attr_int rx1317_cur, rx1317_curclass, "$!pos", rx1317_pos
    $P11 = rx1317_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx1317_curclass, "$!pos"
    lt $I11, 0, rx1317_fail3685
    nqp_rxmark rx1317_bstack, rxsubrule1324_pass3708, -1, 0
  rxsubrule1324_pass3708:
    rx1317_cstack = rx1317_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx1317_pos, $P11, rx1317_curclass, "$!pos"
    goto alt1321_end3695
  alt1321_23709:
    add $I11, rx1317_pos, 1
    gt $I11, rx1317_eos, rx1317_fail3685
    substr $S10, rx1317_tgt, rx1317_pos, 1
    ne $S10, ucs4:":", rx1317_fail3685
    add rx1317_pos, 1
    repr_bind_attr_int rx1317_cur, rx1317_curclass, "$!pos", rx1317_pos
    $P11 = rx1317_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx1317_curclass, "$!pos"
    lt $I11, 0, rx1317_fail3685
    nqp_rxmark rx1317_bstack, rxsubrule1325_pass3710, -1, 0
  rxsubrule1325_pass3710:
    rx1317_cstack = rx1317_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx1317_pos, $P11, rx1317_curclass, "$!pos"
    goto alt1321_end3695
  alt1321_33711:
    add $I11, rx1317_pos, 1
    gt $I11, rx1317_eos, rx1317_fail3685
    substr $S10, rx1317_tgt, rx1317_pos, 1
    ne $S10, ucs4:"(", rx1317_fail3685
    add rx1317_pos, 1
    repr_bind_attr_int rx1317_cur, rx1317_curclass, "$!pos", rx1317_pos
    $P11 = rx1317_cur."LANG"("MAIN", "arglist")
    repr_get_attr_int $I11, $P11, rx1317_curclass, "$!pos"
    lt $I11, 0, rx1317_fail3685
    nqp_rxmark rx1317_bstack, rxsubrule1326_pass3712, -1, 0
  rxsubrule1326_pass3712:
    rx1317_cstack = rx1317_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx1317_pos, $P11, rx1317_curclass, "$!pos"
    add $I11, rx1317_pos, 1
    gt $I11, rx1317_eos, rx1317_fail3685
    substr $S10, rx1317_tgt, rx1317_pos, 1
    ne $S10, ucs4:")", rx1317_fail3685
    add rx1317_pos, 1
    goto alt1321_end3695
  alt1321_43713:
    repr_bind_attr_int rx1317_cur, rx1317_curclass, "$!pos", rx1317_pos
    $P11 = rx1317_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx1317_curclass, "$!pos"
    lt $I11, 0, rx1317_fail3685
    repr_get_attr_int rx1317_pos, $P11, rx1317_curclass, "$!pos"
    repr_bind_attr_int rx1317_cur, rx1317_curclass, "$!pos", rx1317_pos
    $P11 = rx1317_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx1317_curclass, "$!pos"
    lt $I11, 0, rx1317_fail3685
    nqp_rxmark rx1317_bstack, rxsubrule1328_pass3715, -1, 0
  rxsubrule1328_pass3715:
    rx1317_cstack = rx1317_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx1317_pos, $P11, rx1317_curclass, "$!pos"
    goto alt1321_end3695
  alt1321_end3695:
    nqp_rxpeek $I19, rx1317_bstack, rxquantr1320_done3694
    inc $I19
    inc $I19
    set rx1317_rep, rx1317_bstack[$I19]
    nqp_rxcommit rx1317_bstack, rxquantr1320_done3694
    inc rx1317_rep
  rxquantr1320_done3694:
    rx1317_cur."!cursor_pass"(rx1317_pos, "assertion:sym<name>", 'backtrack'=>1)
    .return (rx1317_cur)
  rx1317_restart3684:
    repr_get_attr_obj rx1317_cstack, rx1317_cur, rx1317_curclass, "$!cstack"
  rx1317_fail3685:
    unless rx1317_bstack, rx1317_done3683
    pop $I19, rx1317_bstack
    if_null rx1317_cstack, rx1317_cstack_done3688
    unless rx1317_cstack, rx1317_cstack_done3688
    dec $I19
    set $P11, rx1317_cstack[$I19]
  rx1317_cstack_done3688:
    pop rx1317_rep, rx1317_bstack
    pop rx1317_pos, rx1317_bstack
    pop $I19, rx1317_bstack
    lt rx1317_pos, -1, rx1317_done3683
    lt rx1317_pos, 0, rx1317_fail3685
    eq $I19, 0, rx1317_fail3685
    nqp_islist $I20, rx1317_cstack
    unless $I20, rx1317_jump3686
    elements $I18, rx1317_bstack
    le $I18, 0, rx1317_cut3687
    dec $I18
    set $I18, rx1317_bstack[$I18]
  rx1317_cut3687:
    assign rx1317_cstack, $I18
  rx1317_jump3686:
    jump $I19
  rx1317_done3683:
    rx1317_cur."!cursor_fail"()
    .return (rx1317_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_241_1358115338.889") :anon :lex :outer("cuid_240_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1322_tgt
    .local int rx1322_pos
    .local int rx1322_off
    .local int rx1322_eos
    .local int rx1322_rep
    .local pmc rx1322_cur
    .local pmc rx1322_curclass
    .local pmc rx1322_bstack
    .local pmc rx1322_cstack
    (rx1322_cur, rx1322_tgt, rx1322_pos, rx1322_curclass, rx1322_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1322_cur
    length rx1322_eos, rx1322_tgt
    eq $I19, 1, rx1322_restart3699
    gt rx1322_pos, rx1322_eos, rx1322_fail3700
    repr_get_attr_int $I11, self, rx1322_curclass, "$!from"
    ne $I11, -1, rxscan1323_done3706
    goto rxscan1323_scan3705
  rxscan1323_loop3704:
    inc rx1322_pos
    gt rx1322_pos, rx1322_eos, rx1322_fail3700
    repr_bind_attr_int rx1322_cur, rx1322_curclass, "$!from", rx1322_pos
  rxscan1323_scan3705:
    nqp_rxmark rx1322_bstack, rxscan1323_loop3704, rx1322_pos, 0
  rxscan1323_done3706:
    add $I11, rx1322_pos, 1
    gt $I11, rx1322_eos, rx1322_fail3700
    substr $S10, rx1322_tgt, rx1322_pos, 1
    ne $S10, ucs4:">", rx1322_fail3700
    add rx1322_pos, 1
    rx1322_cur."!cursor_pass"(rx1322_pos, 'backtrack'=>1)
    .return (rx1322_cur)
  rx1322_restart3699:
    repr_get_attr_obj rx1322_cstack, rx1322_cur, rx1322_curclass, "$!cstack"
  rx1322_fail3700:
    unless rx1322_bstack, rx1322_done3698
    pop $I19, rx1322_bstack
    if_null rx1322_cstack, rx1322_cstack_done3703
    unless rx1322_cstack, rx1322_cstack_done3703
    dec $I19
    set $P11, rx1322_cstack[$I19]
  rx1322_cstack_done3703:
    pop rx1322_rep, rx1322_bstack
    pop rx1322_pos, rx1322_bstack
    pop $I19, rx1322_bstack
    lt rx1322_pos, -1, rx1322_done3698
    lt rx1322_pos, 0, rx1322_fail3700
    eq $I19, 0, rx1322_fail3700
    nqp_islist $I20, rx1322_cstack
    unless $I20, rx1322_jump3701
    elements $I18, rx1322_bstack
    le $I18, 0, rx1322_cut3702
    dec $I18
    set $I18, rx1322_bstack[$I18]
  rx1322_cut3702:
    assign rx1322_cstack, $I18
  rx1322_jump3701:
    jump $I19
  rx1322_done3698:
    rx1322_cur."!cursor_fail"()
    .return (rx1322_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<var>" :subid("cuid_242_1358115338.889") :anon :lex :outer("cuid_245_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1431
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1329_tgt
    .local int rx1329_pos
    .local int rx1329_off
    .local int rx1329_eos
    .local int rx1329_rep
    .local pmc rx1329_cur
    .local pmc rx1329_curclass
    .local pmc rx1329_bstack
    .local pmc rx1329_cstack
    (rx1329_cur, rx1329_tgt, rx1329_pos, rx1329_curclass, rx1329_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1329_cur
    length rx1329_eos, rx1329_tgt
    eq $I19, 1, rx1329_restart3718
    gt rx1329_pos, rx1329_eos, rx1329_fail3719
    repr_get_attr_int $I11, self, rx1329_curclass, "$!from"
    ne $I11, -1, rxscan1330_done3725
    goto rxscan1330_scan3724
  rxscan1330_loop3723:
    inc rx1329_pos
    gt rx1329_pos, rx1329_eos, rx1329_fail3719
    repr_bind_attr_int rx1329_cur, rx1329_curclass, "$!from", rx1329_pos
  rxscan1330_scan3724:
    nqp_rxmark rx1329_bstack, rxscan1330_loop3723, rx1329_pos, 0
  rxscan1330_done3725:
    ge rx1329_pos, rx1329_eos, rx1329_fail3719
    substr $S11, rx1329_tgt, rx1329_pos, 1
    index $I11, ucs4:"$@", $S11
    lt $I11, 0, rx1329_fail3719
    repr_bind_attr_int rx1329_cur, rx1329_curclass, "$!pos", rx1329_pos
    $P11 = rx1329_cur."LANG"("MAIN", "variable")
    repr_get_attr_int $I11, $P11, rx1329_curclass, "$!pos"
    lt $I11, 0, rx1329_fail3719
    nqp_rxmark rx1329_bstack, rxsubrule1331_pass3726, -1, 0
  rxsubrule1331_pass3726:
    rx1329_cstack = rx1329_cur."!cursor_capture"($P11, "var")
    repr_get_attr_int rx1329_pos, $P11, rx1329_curclass, "$!pos"
    rx1329_cur."!cursor_pass"(rx1329_pos, "assertion:sym<var>", 'backtrack'=>1)
    .return (rx1329_cur)
  rx1329_restart3718:
    repr_get_attr_obj rx1329_cstack, rx1329_cur, rx1329_curclass, "$!cstack"
  rx1329_fail3719:
    unless rx1329_bstack, rx1329_done3717
    pop $I19, rx1329_bstack
    if_null rx1329_cstack, rx1329_cstack_done3722
    unless rx1329_cstack, rx1329_cstack_done3722
    dec $I19
    set $P11, rx1329_cstack[$I19]
  rx1329_cstack_done3722:
    pop rx1329_rep, rx1329_bstack
    pop rx1329_pos, rx1329_bstack
    pop $I19, rx1329_bstack
    lt rx1329_pos, -1, rx1329_done3717
    lt rx1329_pos, 0, rx1329_fail3719
    eq $I19, 0, rx1329_fail3719
    nqp_islist $I20, rx1329_cstack
    unless $I20, rx1329_jump3720
    elements $I18, rx1329_bstack
    le $I18, 0, rx1329_cut3721
    dec $I18
    set $I18, rx1329_bstack[$I18]
  rx1329_cut3721:
    assign rx1329_cstack, $I18
  rx1329_jump3720:
    jump $I19
  rx1329_done3717:
    rx1329_cur."!cursor_fail"()
    .return (rx1329_cur) 
.end
.HLL "nqp"
.namespace []
.sub "codeblock" :subid("cuid_243_1358115338.889") :anon :lex :outer("cuid_245_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1435
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1332_tgt
    .local int rx1332_pos
    .local int rx1332_off
    .local int rx1332_eos
    .local int rx1332_rep
    .local pmc rx1332_cur
    .local pmc rx1332_curclass
    .local pmc rx1332_bstack
    .local pmc rx1332_cstack
    (rx1332_cur, rx1332_tgt, rx1332_pos, rx1332_curclass, rx1332_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1332_cur
    length rx1332_eos, rx1332_tgt
    eq $I19, 1, rx1332_restart3729
    gt rx1332_pos, rx1332_eos, rx1332_fail3730
    repr_get_attr_int $I11, self, rx1332_curclass, "$!from"
    ne $I11, -1, rxscan1333_done3736
    goto rxscan1333_scan3735
  rxscan1333_loop3734:
    inc rx1332_pos
    gt rx1332_pos, rx1332_eos, rx1332_fail3730
    repr_bind_attr_int rx1332_cur, rx1332_curclass, "$!from", rx1332_pos
  rxscan1333_scan3735:
    nqp_rxmark rx1332_bstack, rxscan1333_loop3734, rx1332_pos, 0
  rxscan1333_done3736:
    repr_bind_attr_int rx1332_cur, rx1332_curclass, "$!pos", rx1332_pos
    $P11 = rx1332_cur."LANG"("MAIN", "pblock")
    repr_get_attr_int $I11, $P11, rx1332_curclass, "$!pos"
    lt $I11, 0, rx1332_fail3730
    nqp_rxmark rx1332_bstack, rxsubrule1334_pass3737, -1, 0
  rxsubrule1334_pass3737:
    rx1332_cstack = rx1332_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx1332_pos, $P11, rx1332_curclass, "$!pos"
    rx1332_cur."!cursor_pass"(rx1332_pos, "codeblock", 'backtrack'=>1)
    .return (rx1332_cur)
  rx1332_restart3729:
    repr_get_attr_obj rx1332_cstack, rx1332_cur, rx1332_curclass, "$!cstack"
  rx1332_fail3730:
    unless rx1332_bstack, rx1332_done3728
    pop $I19, rx1332_bstack
    if_null rx1332_cstack, rx1332_cstack_done3733
    unless rx1332_cstack, rx1332_cstack_done3733
    dec $I19
    set $P11, rx1332_cstack[$I19]
  rx1332_cstack_done3733:
    pop rx1332_rep, rx1332_bstack
    pop rx1332_pos, rx1332_bstack
    pop $I19, rx1332_bstack
    lt rx1332_pos, -1, rx1332_done3728
    lt rx1332_pos, 0, rx1332_fail3730
    eq $I19, 0, rx1332_fail3730
    nqp_islist $I20, rx1332_cstack
    unless $I20, rx1332_jump3731
    elements $I18, rx1332_bstack
    le $I18, 0, rx1332_cut3732
    dec $I18
    set $I18, rx1332_bstack[$I18]
  rx1332_cut3732:
    assign rx1332_cstack, $I18
  rx1332_jump3731:
    jump $I19
  rx1332_done3728:
    rx1332_cur."!cursor_fail"()
    .return (rx1332_cur) 
.end
.HLL "nqp"
.namespace []
.sub "arg" :subid("cuid_244_1358115338.889") :anon :lex :outer("cuid_245_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1439
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1335_tgt
    .local int rx1335_pos
    .local int rx1335_off
    .local int rx1335_eos
    .local int rx1335_rep
    .local pmc rx1335_cur
    .local pmc rx1335_curclass
    .local pmc rx1335_bstack
    .local pmc rx1335_cstack
    (rx1335_cur, rx1335_tgt, rx1335_pos, rx1335_curclass, rx1335_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1335_cur
    length rx1335_eos, rx1335_tgt
    eq $I19, 1, rx1335_restart3740
    gt rx1335_pos, rx1335_eos, rx1335_fail3741
    repr_get_attr_int $I11, self, rx1335_curclass, "$!from"
    ne $I11, -1, rxscan1336_done3747
    goto rxscan1336_scan3746
  rxscan1336_loop3745:
    inc rx1335_pos
    gt rx1335_pos, rx1335_eos, rx1335_fail3741
    repr_bind_attr_int rx1335_cur, rx1335_curclass, "$!from", rx1335_pos
  rxscan1336_scan3746:
    nqp_rxmark rx1335_bstack, rxscan1336_loop3745, rx1335_pos, 0
  rxscan1336_done3747:
    repr_bind_attr_int rx1335_cur, rx1335_curclass, "$!pos", rx1335_pos
    $P11 = rx1335_cur."LANG"("MAIN", "quote_EXPR")
    repr_get_attr_int $I11, $P11, rx1335_curclass, "$!pos"
    lt $I11, 0, rx1335_fail3741
    nqp_rxmark rx1335_bstack, rxsubrule1337_pass3748, -1, 0
  rxsubrule1337_pass3748:
    rx1335_cstack = rx1335_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1335_pos, $P11, rx1335_curclass, "$!pos"
    rx1335_cur."!cursor_pass"(rx1335_pos, "arg", 'backtrack'=>1)
    .return (rx1335_cur)
  rx1335_restart3740:
    repr_get_attr_obj rx1335_cstack, rx1335_cur, rx1335_curclass, "$!cstack"
  rx1335_fail3741:
    unless rx1335_bstack, rx1335_done3739
    pop $I19, rx1335_bstack
    if_null rx1335_cstack, rx1335_cstack_done3744
    unless rx1335_cstack, rx1335_cstack_done3744
    dec $I19
    set $P11, rx1335_cstack[$I19]
  rx1335_cstack_done3744:
    pop rx1335_rep, rx1335_bstack
    pop rx1335_pos, rx1335_bstack
    pop $I19, rx1335_bstack
    lt rx1335_pos, -1, rx1335_done3739
    lt rx1335_pos, 0, rx1335_fail3741
    eq $I19, 0, rx1335_fail3741
    nqp_islist $I20, rx1335_cstack
    unless $I20, rx1335_jump3742
    elements $I18, rx1335_bstack
    le $I18, 0, rx1335_cut3743
    dec $I18
    set $I18, rx1335_bstack[$I18]
  rx1335_cut3743:
    assign rx1335_cstack, $I18
  rx1335_jump3742:
    jump $I19
  rx1335_done3739:
    rx1335_cur."!cursor_fail"()
    .return (rx1335_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_411_1358115338.889") :anon :lex :outer("cuid_1_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1450
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    set $P5002, _lex_param_1[0]
    unless_null $P5002, fallback3750
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5003
  fallback3750:
    set $P101, $P5002
    nqp_get_sc_object $P5007, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Var"]
    unless_null $P5004, fallback3753
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5008
  fallback3753:
    type_check $I5001, $P101, $P5004
    if $I5001 goto unless1338_end3752 
.annotate 'line', 1452
    box $P5009, "Pre-increment can only work on a variable"
    die $P5009
  unless1338_end3752:
.annotate 'line', 1455
    nqp_get_sc_object $P5013, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5012, $P5013, "QAST"
    get_who $P5011, $P5012
    set $P5010, $P5011["Op"]
    unless_null $P5010, fallback3754
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5010, $P5014
  fallback3754:
.annotate 'line', 1458
    nqp_get_sc_object $P5018, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["Op"]
    unless_null $P5015, fallback3755
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5015, $P5019
  fallback3755:
.annotate 'line', 1461
    nqp_get_sc_object $P5023, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["IVal"]
    unless_null $P5020, fallback3756
    nqp_get_sc_object $P5024, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5020, $P5024
  fallback3756:
    $P5025 = $P5020."new"(1 :named("value"))
    $P5026 = $P5015."new"($P101, $P5025, "add_n" :named("op"))
    $P5027 = $P5010."new"($P101, $P5026, "bind" :named("op"))
    $P5028 = _lex_param_0."as_post"($P5027)
    .return ($P5028) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_412_1358115338.889") :anon :lex :outer("cuid_1_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1465
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    set $P5002, _lex_param_1[0]
    unless_null $P5002, fallback3757
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5003
  fallback3757:
    set $P101, $P5002
    nqp_get_sc_object $P5007, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Var"]
    unless_null $P5004, fallback3760
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5008
  fallback3760:
    type_check $I5001, $P101, $P5004
    if $I5001 goto unless1339_end3759 
.annotate 'line', 1467
    box $P5009, "Pre-decrement can only work on a variable"
    die $P5009
  unless1339_end3759:
.annotate 'line', 1470
    nqp_get_sc_object $P5013, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5012, $P5013, "QAST"
    get_who $P5011, $P5012
    set $P5010, $P5011["Op"]
    unless_null $P5010, fallback3761
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5010, $P5014
  fallback3761:
.annotate 'line', 1473
    nqp_get_sc_object $P5018, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["Op"]
    unless_null $P5015, fallback3762
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5015, $P5019
  fallback3762:
.annotate 'line', 1476
    nqp_get_sc_object $P5023, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["IVal"]
    unless_null $P5020, fallback3763
    nqp_get_sc_object $P5024, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5020, $P5024
  fallback3763:
    $P5025 = $P5020."new"(1 :named("value"))
    $P5026 = $P5015."new"($P101, $P5025, "sub_n" :named("op"))
    $P5027 = $P5010."new"($P101, $P5026, "bind" :named("op"))
    $P5028 = _lex_param_0."as_post"($P5027)
    .return ($P5028) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_413_1358115338.889") :anon :lex :outer("cuid_1_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1480
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$tmp", $P102 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
    set $P5003, _lex_param_1[0]
    unless_null $P5003, fallback3764
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5003, $P5004
  fallback3764:
    set $P101, $P5003
.annotate 'line', 1482
    nqp_get_sc_object $P5008, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5007, $P5008, "QAST"
    get_who $P5006, $P5007
    set $P5005, $P5006["Op"]
    unless_null $P5005, fallback3765
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5005, $P5009
  fallback3765:
    $P5010 = $P5005."unique"("tmp")
    set $P102, $P5010
    nqp_get_sc_object $P5014, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Var"]
    unless_null $P5011, fallback3768
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5011, $P5015
  fallback3768:
    type_check $I5001, $P101, $P5011
    if $I5001 goto unless1340_end3767 
.annotate 'line', 1483
    box $P5016, "Post-increment can only work on a variable"
    die $P5016
  unless1340_end3767:
.annotate 'line', 1486
    nqp_get_sc_object $P5020, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Stmt"]
    unless_null $P5017, fallback3769
    nqp_get_sc_object $P5021, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5017, $P5021
  fallback3769:
.annotate 'line', 1488
    nqp_get_sc_object $P5025, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["Op"]
    unless_null $P5022, fallback3770
    nqp_get_sc_object $P5026, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5022, $P5026
  fallback3770:
.annotate 'line', 1490
    nqp_get_sc_object $P5030, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["Var"]
    unless_null $P5027, fallback3771
    nqp_get_sc_object $P5031, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5027, $P5031
  fallback3771:
    $P5032 = $P101."returns"()
    $P5033 = $P5027."new"($P102 :named("name"), "local" :named("scope"), "var" :named("decl"), $P5032 :named("returns"))
    $P5034 = $P5022."new"($P5033, $P101, "bind" :named("op"))
.annotate 'line', 1493
    nqp_get_sc_object $P5038, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["Op"]
    unless_null $P5035, fallback3772
    nqp_get_sc_object $P5039, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5035, $P5039
  fallback3772:
.annotate 'line', 1496
    nqp_get_sc_object $P5043, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5042, $P5043, "QAST"
    get_who $P5041, $P5042
    set $P5040, $P5041["Op"]
    unless_null $P5040, fallback3773
    nqp_get_sc_object $P5044, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5040, $P5044
  fallback3773:
.annotate 'line', 1498
    nqp_get_sc_object $P5048, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5047, $P5048, "QAST"
    get_who $P5046, $P5047
    set $P5045, $P5046["Var"]
    unless_null $P5045, fallback3774
    nqp_get_sc_object $P5049, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5045, $P5049
  fallback3774:
    $P5050 = $P101."returns"()
    $P5051 = $P5045."new"($P102 :named("name"), "local" :named("scope"), $P5050 :named("returns"))
.annotate 'line', 1499
    nqp_get_sc_object $P5055, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5054, $P5055, "QAST"
    get_who $P5053, $P5054
    set $P5052, $P5053["IVal"]
    unless_null $P5052, fallback3775
    nqp_get_sc_object $P5056, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5052, $P5056
  fallback3775:
    $P5057 = $P5052."new"(1 :named("value"))
    $P5058 = $P5040."new"($P5051, $P5057, "add_n" :named("op"))
    $P5059 = $P5035."new"($P101, $P5058, "bind" :named("op"))
    $P5060 = $P5017."new"($P5034, $P5059, 0 :named("resultchild"))
    $P5061 = _lex_param_0."as_post"($P5060)
    .return ($P5061) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_414_1358115338.889") :anon :lex :outer("cuid_1_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1504
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$tmp", $P102 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
    set $P5003, _lex_param_1[0]
    unless_null $P5003, fallback3776
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5003, $P5004
  fallback3776:
    set $P101, $P5003
.annotate 'line', 1506
    nqp_get_sc_object $P5008, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5007, $P5008, "QAST"
    get_who $P5006, $P5007
    set $P5005, $P5006["Op"]
    unless_null $P5005, fallback3777
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5005, $P5009
  fallback3777:
    $P5010 = $P5005."unique"("tmp")
    set $P102, $P5010
    nqp_get_sc_object $P5014, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Var"]
    unless_null $P5011, fallback3780
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5011, $P5015
  fallback3780:
    type_check $I5001, $P101, $P5011
    if $I5001 goto unless1341_end3779 
.annotate 'line', 1507
    box $P5016, "Post-decrement can only work on a variable"
    die $P5016
  unless1341_end3779:
.annotate 'line', 1510
    nqp_get_sc_object $P5020, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Stmt"]
    unless_null $P5017, fallback3781
    nqp_get_sc_object $P5021, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5017, $P5021
  fallback3781:
.annotate 'line', 1512
    nqp_get_sc_object $P5025, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["Op"]
    unless_null $P5022, fallback3782
    nqp_get_sc_object $P5026, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5022, $P5026
  fallback3782:
.annotate 'line', 1514
    nqp_get_sc_object $P5030, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["Var"]
    unless_null $P5027, fallback3783
    nqp_get_sc_object $P5031, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5027, $P5031
  fallback3783:
    $P5032 = $P5027."new"($P102 :named("name"), "local" :named("scope"), "var" :named("decl"))
    $P5033 = $P5022."new"($P5032, $P101, "bind" :named("op"))
.annotate 'line', 1517
    nqp_get_sc_object $P5037, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set $P5034, $P5035["Op"]
    unless_null $P5034, fallback3784
    nqp_get_sc_object $P5038, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5034, $P5038
  fallback3784:
.annotate 'line', 1520
    nqp_get_sc_object $P5042, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5041, $P5042, "QAST"
    get_who $P5040, $P5041
    set $P5039, $P5040["Op"]
    unless_null $P5039, fallback3785
    nqp_get_sc_object $P5043, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5039, $P5043
  fallback3785:
.annotate 'line', 1522
    nqp_get_sc_object $P5047, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5046, $P5047, "QAST"
    get_who $P5045, $P5046
    set $P5044, $P5045["Var"]
    unless_null $P5044, fallback3786
    nqp_get_sc_object $P5048, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5044, $P5048
  fallback3786:
    $P5049 = $P5044."new"($P102 :named("name"), "local" :named("scope"))
.annotate 'line', 1523
    nqp_get_sc_object $P5053, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5052, $P5053, "QAST"
    get_who $P5051, $P5052
    set $P5050, $P5051["IVal"]
    unless_null $P5050, fallback3787
    nqp_get_sc_object $P5054, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5050, $P5054
  fallback3787:
    $P5055 = $P5050."new"(1 :named("value"))
    $P5056 = $P5039."new"($P5049, $P5055, "sub_n" :named("op"))
    $P5057 = $P5034."new"($P101, $P5056, "bind" :named("op"))
    $P5058 = $P5017."new"($P5033, $P5057, 0 :named("resultchild"))
    $P5059 = _lex_param_0."as_post"($P5058)
    .return ($P5059) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_415_1358115338.889") :anon :lex :outer("cuid_1_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1528
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
.annotate 'line', 1529
    set $P5001, _lex_param_1[0]
    unless_null $P5001, fallback3788
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5002
  fallback3788:
    $P5003 = _lex_param_0."as_post"($P5001, "n" :named("want"))
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_416_1358115338.889") :anon :lex :outer("cuid_1_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1532
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
.annotate 'line', 1533
    set $P5001, _lex_param_1[0]
    unless_null $P5001, fallback3789
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5002
  fallback3789:
    $P5003 = _lex_param_0."as_post"($P5001, "s" :named("want"))
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_417_1358115338.889") :anon :lex :outer("cuid_1_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1536
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
.annotate 'line', 1537
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3790
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5005
  fallback3790:
.annotate 'line', 1539
    nqp_get_sc_object $P5009, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Op"]
    unless_null $P5006, fallback3791
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5006, $P5010
  fallback3791:
    set $P5011, _lex_param_1[0]
    unless_null $P5011, fallback3792
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5011, $P5012
  fallback3792:
    $P5013 = $P5006."new"($P5011, "where" :named("op"))
.annotate 'line', 1540
    nqp_get_sc_object $P5017, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5016, $P5017, "QAST"
    get_who $P5015, $P5016
    set $P5014, $P5015["Op"]
    unless_null $P5014, fallback3793
    nqp_get_sc_object $P5018, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5014, $P5018
  fallback3793:
    set $P5019, _lex_param_1[1]
    unless_null $P5019, fallback3794
    nqp_get_sc_object $P5020, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5019, $P5020
  fallback3794:
    $P5021 = $P5014."new"($P5019, "where" :named("op"))
    $P5022 = $P5001."new"($P5013, $P5021, "iseq_i" :named("op"))
    $P5023 = _lex_param_0."as_post"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_418_1358115338.889") :anon :lex :outer("cuid_1_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1544
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$res", $P101 
    .lex "$ops", $P102 
    .lex "$arg_post", $P103 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P103, $P5003
.annotate 'line', 1545
    find_dynamic_lex $P5004, "$*REGALLOC"
    unless_null $P5004, fallback3795
    nqp_get_sc_object $P5007, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["$REGALLOC"]
    unless_null $P5005, fallback3796
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5005, $P5008
  fallback3796:
    unless_null $P5005, vivi_13423797
    die "Contextual $*REGALLOC not found"
    box $P5009, "Contextual $*REGALLOC not found"
    set $P5005, $P5009
  vivi_13423797:
    set $P5004, $P5005
  fallback3795:
    $P5010 = $P5004."fresh_i"()
    set $P101, $P5010
.annotate 'line', 1546
    nqp_get_sc_object $P5014, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5013, $P5014, "PIRT"
    get_who $P5012, $P5013
    set $P5011, $P5012["Ops"]
    unless_null $P5011, fallback3798
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5011, $P5015
  fallback3798:
    $P5016 = $P5011."new"($P101 :named("result"))
    set $P102, $P5016
.annotate 'line', 1547
    set $P5017, _lex_param_1[0]
    unless_null $P5017, fallback3799
    nqp_get_sc_object $P5018, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5017, $P5018
  fallback3799:
    $P5019 = _lex_param_0."as_post"($P5017)
    set $P103, $P5019
.annotate 'line', 1548
    $P5020 = $P103."result"()
    $P5021 = _lex_param_0."infer_type"($P5020)
    set $S5002, $P5021
    downcase $S5001, $S5002
    iseq $I5001, $S5001, "i"
    unless $I5001 goto if1343_else3800 
.annotate 'line', 1549
    $P102."push"($P103)
.annotate 'line', 1550
    $P5022 = $P102."push_pirop"("not", $P101, $P103)
    goto if1343_end3801
  if1343_else3800:
.annotate 'line', 1552
.annotate 'line', 1553
    $P5023 = _lex_param_0."coerce"($P103, "P")
    set $P103, $P5023
.annotate 'line', 1554
    $P102."push"($P103)
.annotate 'line', 1555
    $P5024 = $P102."push_pirop"("isfalse", $P101, $P103)
  if1343_end3801:
    .return ($P102) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_358_1358115338.889") :anon :lex :outer("cuid_1_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1561
    .const 'Sub' $P5124 = 'cuid_419_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_422_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_425_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_426_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_429_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_431_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_432_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_433_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_435_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_436_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_441_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_246_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_247_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_248_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_249_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_250_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_251_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_252_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_253_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_254_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_255_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_256_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_257_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_258_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_259_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_260_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_261_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_262_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_263_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_264_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_265_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_266_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_267_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_268_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_269_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_270_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_271_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_272_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_273_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_274_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_275_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_276_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_277_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_278_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_279_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_280_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_281_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_282_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_283_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_284_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_285_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_286_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_287_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_288_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_289_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_290_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_291_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_292_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_293_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_294_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_295_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_296_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_297_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_298_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_299_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_300_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_301_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_302_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_303_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_304_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_305_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_306_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_307_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_308_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_309_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_310_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_311_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_312_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_313_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_314_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_315_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_316_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_317_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_318_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_319_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_320_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_321_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_322_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_323_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_324_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_325_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_326_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_327_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_328_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_329_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_330_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_331_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_332_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_333_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_334_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_335_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_336_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_337_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_338_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_339_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_340_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_341_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_342_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_343_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_344_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_345_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_346_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_347_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_348_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_349_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_350_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_351_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_352_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_353_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_354_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_355_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_356_1358115338.889' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_357_1358115338.889' 
    capture_lex $P5124 
    .lex "&xblock_immediate", $P101 
    .lex "&block_immediate", $P102 
    .lex "&default_for", $P103 
    .lex "&default_value_for_prim", $P104 
    .lex "&colonpair_str", $P105 
    .lex "&import_HOW_exports", $P106 
    .lex "&set_block_handler", $P107 
    .lex "&only_star_block", $P108 
    .lex "&attach_multi_signature", $P109 
    .lex "&wrap_return_handler", $P110 
    .lex "&lexical_package_lookup", $P111 
    .lex "$?PACKAGE", $P112 
    .lex "$?CLASS", $P113 
    .const 'Sub' $P5001 = 'cuid_419_1358115338.889' 
    capture_lex $P5001
    set $P101, $P5001
    .const 'Sub' $P5002 = 'cuid_422_1358115338.889' 
    capture_lex $P5002
    set $P102, $P5002
    .const 'Sub' $P5003 = 'cuid_425_1358115338.889' 
    capture_lex $P5003
    set $P103, $P5003
    .const 'Sub' $P5004 = 'cuid_426_1358115338.889' 
    capture_lex $P5004
    set $P104, $P5004
    .const 'Sub' $P5005 = 'cuid_429_1358115338.889' 
    capture_lex $P5005
    set $P105, $P5005
    .const 'Sub' $P5006 = 'cuid_431_1358115338.889' 
    capture_lex $P5006
    set $P106, $P5006
    .const 'Sub' $P5007 = 'cuid_432_1358115338.889' 
    capture_lex $P5007
    set $P107, $P5007
    .const 'Sub' $P5008 = 'cuid_433_1358115338.889' 
    capture_lex $P5008
    set $P108, $P5008
    .const 'Sub' $P5009 = 'cuid_435_1358115338.889' 
    capture_lex $P5009
    set $P109, $P5009
    .const 'Sub' $P5010 = 'cuid_436_1358115338.889' 
    capture_lex $P5010
    set $P110, $P5010
    .const 'Sub' $P5011 = 'cuid_441_1358115338.889' 
    capture_lex $P5011
    set $P111, $P5011
    .const 'Sub' $P5012 = 'cuid_246_1358115338.889' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_247_1358115338.889' 
    capture_lex $P5013
    .const 'Sub' $P5014 = 'cuid_248_1358115338.889' 
    capture_lex $P5014
    .const 'Sub' $P5015 = 'cuid_249_1358115338.889' 
    capture_lex $P5015
    .const 'Sub' $P5016 = 'cuid_250_1358115338.889' 
    capture_lex $P5016
    .const 'Sub' $P5017 = 'cuid_251_1358115338.889' 
    capture_lex $P5017
    .const 'Sub' $P5018 = 'cuid_252_1358115338.889' 
    capture_lex $P5018
    .const 'Sub' $P5019 = 'cuid_253_1358115338.889' 
    capture_lex $P5019
    .const 'Sub' $P5020 = 'cuid_254_1358115338.889' 
    capture_lex $P5020
    .const 'Sub' $P5021 = 'cuid_255_1358115338.889' 
    capture_lex $P5021
    .const 'Sub' $P5022 = 'cuid_256_1358115338.889' 
    capture_lex $P5022
    .const 'Sub' $P5023 = 'cuid_257_1358115338.889' 
    capture_lex $P5023
    .const 'Sub' $P5024 = 'cuid_258_1358115338.889' 
    capture_lex $P5024
    .const 'Sub' $P5025 = 'cuid_259_1358115338.889' 
    capture_lex $P5025
    .const 'Sub' $P5026 = 'cuid_260_1358115338.889' 
    capture_lex $P5026
    .const 'Sub' $P5027 = 'cuid_261_1358115338.889' 
    capture_lex $P5027
    .const 'Sub' $P5028 = 'cuid_262_1358115338.889' 
    capture_lex $P5028
    .const 'Sub' $P5029 = 'cuid_263_1358115338.889' 
    capture_lex $P5029
    .const 'Sub' $P5030 = 'cuid_264_1358115338.889' 
    capture_lex $P5030
    .const 'Sub' $P5031 = 'cuid_265_1358115338.889' 
    capture_lex $P5031
    .const 'Sub' $P5032 = 'cuid_266_1358115338.889' 
    capture_lex $P5032
    .const 'Sub' $P5033 = 'cuid_267_1358115338.889' 
    capture_lex $P5033
    .const 'Sub' $P5034 = 'cuid_268_1358115338.889' 
    capture_lex $P5034
    .const 'Sub' $P5035 = 'cuid_269_1358115338.889' 
    capture_lex $P5035
    .const 'Sub' $P5036 = 'cuid_270_1358115338.889' 
    capture_lex $P5036
    .const 'Sub' $P5037 = 'cuid_271_1358115338.889' 
    capture_lex $P5037
    .const 'Sub' $P5038 = 'cuid_272_1358115338.889' 
    capture_lex $P5038
    .const 'Sub' $P5039 = 'cuid_273_1358115338.889' 
    capture_lex $P5039
    .const 'Sub' $P5040 = 'cuid_274_1358115338.889' 
    capture_lex $P5040
    .const 'Sub' $P5041 = 'cuid_275_1358115338.889' 
    capture_lex $P5041
    .const 'Sub' $P5042 = 'cuid_276_1358115338.889' 
    capture_lex $P5042
    .const 'Sub' $P5043 = 'cuid_277_1358115338.889' 
    capture_lex $P5043
    .const 'Sub' $P5044 = 'cuid_278_1358115338.889' 
    capture_lex $P5044
    .const 'Sub' $P5045 = 'cuid_279_1358115338.889' 
    capture_lex $P5045
    .const 'Sub' $P5046 = 'cuid_280_1358115338.889' 
    capture_lex $P5046
    .const 'Sub' $P5047 = 'cuid_281_1358115338.889' 
    capture_lex $P5047
    .const 'Sub' $P5048 = 'cuid_282_1358115338.889' 
    capture_lex $P5048
    .const 'Sub' $P5049 = 'cuid_283_1358115338.889' 
    capture_lex $P5049
    .const 'Sub' $P5050 = 'cuid_284_1358115338.889' 
    capture_lex $P5050
    .const 'Sub' $P5051 = 'cuid_285_1358115338.889' 
    capture_lex $P5051
    .const 'Sub' $P5052 = 'cuid_286_1358115338.889' 
    capture_lex $P5052
    .const 'Sub' $P5053 = 'cuid_287_1358115338.889' 
    capture_lex $P5053
    .const 'Sub' $P5054 = 'cuid_288_1358115338.889' 
    capture_lex $P5054
    .const 'Sub' $P5055 = 'cuid_289_1358115338.889' 
    capture_lex $P5055
    .const 'Sub' $P5056 = 'cuid_290_1358115338.889' 
    capture_lex $P5056
    .const 'Sub' $P5057 = 'cuid_291_1358115338.889' 
    capture_lex $P5057
    .const 'Sub' $P5058 = 'cuid_292_1358115338.889' 
    capture_lex $P5058
    .const 'Sub' $P5059 = 'cuid_293_1358115338.889' 
    capture_lex $P5059
    .const 'Sub' $P5060 = 'cuid_294_1358115338.889' 
    capture_lex $P5060
    .const 'Sub' $P5061 = 'cuid_295_1358115338.889' 
    capture_lex $P5061
    .const 'Sub' $P5062 = 'cuid_296_1358115338.889' 
    capture_lex $P5062
    .const 'Sub' $P5063 = 'cuid_297_1358115338.889' 
    capture_lex $P5063
    .const 'Sub' $P5064 = 'cuid_298_1358115338.889' 
    capture_lex $P5064
    .const 'Sub' $P5065 = 'cuid_299_1358115338.889' 
    capture_lex $P5065
    .const 'Sub' $P5066 = 'cuid_300_1358115338.889' 
    capture_lex $P5066
    .const 'Sub' $P5067 = 'cuid_301_1358115338.889' 
    capture_lex $P5067
    .const 'Sub' $P5068 = 'cuid_302_1358115338.889' 
    capture_lex $P5068
    .const 'Sub' $P5069 = 'cuid_303_1358115338.889' 
    capture_lex $P5069
    .const 'Sub' $P5070 = 'cuid_304_1358115338.889' 
    capture_lex $P5070
    .const 'Sub' $P5071 = 'cuid_305_1358115338.889' 
    capture_lex $P5071
    .const 'Sub' $P5072 = 'cuid_306_1358115338.889' 
    capture_lex $P5072
    .const 'Sub' $P5073 = 'cuid_307_1358115338.889' 
    capture_lex $P5073
    .const 'Sub' $P5074 = 'cuid_308_1358115338.889' 
    capture_lex $P5074
    .const 'Sub' $P5075 = 'cuid_309_1358115338.889' 
    capture_lex $P5075
    .const 'Sub' $P5076 = 'cuid_310_1358115338.889' 
    capture_lex $P5076
    .const 'Sub' $P5077 = 'cuid_311_1358115338.889' 
    capture_lex $P5077
    .const 'Sub' $P5078 = 'cuid_312_1358115338.889' 
    capture_lex $P5078
    .const 'Sub' $P5079 = 'cuid_313_1358115338.889' 
    capture_lex $P5079
    .const 'Sub' $P5080 = 'cuid_314_1358115338.889' 
    capture_lex $P5080
    .const 'Sub' $P5081 = 'cuid_315_1358115338.889' 
    capture_lex $P5081
    .const 'Sub' $P5082 = 'cuid_316_1358115338.889' 
    capture_lex $P5082
    .const 'Sub' $P5083 = 'cuid_317_1358115338.889' 
    capture_lex $P5083
    .const 'Sub' $P5084 = 'cuid_318_1358115338.889' 
    capture_lex $P5084
    .const 'Sub' $P5085 = 'cuid_319_1358115338.889' 
    capture_lex $P5085
    .const 'Sub' $P5086 = 'cuid_320_1358115338.889' 
    capture_lex $P5086
    .const 'Sub' $P5087 = 'cuid_321_1358115338.889' 
    capture_lex $P5087
    .const 'Sub' $P5088 = 'cuid_322_1358115338.889' 
    capture_lex $P5088
    .const 'Sub' $P5089 = 'cuid_323_1358115338.889' 
    capture_lex $P5089
    .const 'Sub' $P5090 = 'cuid_324_1358115338.889' 
    capture_lex $P5090
    .const 'Sub' $P5091 = 'cuid_325_1358115338.889' 
    capture_lex $P5091
    .const 'Sub' $P5092 = 'cuid_326_1358115338.889' 
    capture_lex $P5092
    .const 'Sub' $P5093 = 'cuid_327_1358115338.889' 
    capture_lex $P5093
    .const 'Sub' $P5094 = 'cuid_328_1358115338.889' 
    capture_lex $P5094
    .const 'Sub' $P5095 = 'cuid_329_1358115338.889' 
    capture_lex $P5095
    .const 'Sub' $P5096 = 'cuid_330_1358115338.889' 
    capture_lex $P5096
    .const 'Sub' $P5097 = 'cuid_331_1358115338.889' 
    capture_lex $P5097
    .const 'Sub' $P5098 = 'cuid_332_1358115338.889' 
    capture_lex $P5098
    .const 'Sub' $P5099 = 'cuid_333_1358115338.889' 
    capture_lex $P5099
    .const 'Sub' $P5100 = 'cuid_334_1358115338.889' 
    capture_lex $P5100
    .const 'Sub' $P5101 = 'cuid_335_1358115338.889' 
    capture_lex $P5101
    .const 'Sub' $P5102 = 'cuid_336_1358115338.889' 
    capture_lex $P5102
    .const 'Sub' $P5103 = 'cuid_337_1358115338.889' 
    capture_lex $P5103
    .const 'Sub' $P5104 = 'cuid_338_1358115338.889' 
    capture_lex $P5104
    .const 'Sub' $P5105 = 'cuid_339_1358115338.889' 
    capture_lex $P5105
    .const 'Sub' $P5106 = 'cuid_340_1358115338.889' 
    capture_lex $P5106
    .const 'Sub' $P5107 = 'cuid_341_1358115338.889' 
    capture_lex $P5107
    .const 'Sub' $P5108 = 'cuid_342_1358115338.889' 
    capture_lex $P5108
    .const 'Sub' $P5109 = 'cuid_343_1358115338.889' 
    capture_lex $P5109
    .const 'Sub' $P5110 = 'cuid_344_1358115338.889' 
    capture_lex $P5110
    .const 'Sub' $P5111 = 'cuid_345_1358115338.889' 
    capture_lex $P5111
    .const 'Sub' $P5112 = 'cuid_346_1358115338.889' 
    capture_lex $P5112
    .const 'Sub' $P5113 = 'cuid_347_1358115338.889' 
    capture_lex $P5113
    .const 'Sub' $P5114 = 'cuid_348_1358115338.889' 
    capture_lex $P5114
    .const 'Sub' $P5115 = 'cuid_349_1358115338.889' 
    capture_lex $P5115
    .const 'Sub' $P5116 = 'cuid_350_1358115338.889' 
    capture_lex $P5116
    .const 'Sub' $P5117 = 'cuid_351_1358115338.889' 
    capture_lex $P5117
    .const 'Sub' $P5118 = 'cuid_352_1358115338.889' 
    capture_lex $P5118
    .const 'Sub' $P5119 = 'cuid_353_1358115338.889' 
    capture_lex $P5119
    .const 'Sub' $P5120 = 'cuid_354_1358115338.889' 
    capture_lex $P5120
    .const 'Sub' $P5121 = 'cuid_355_1358115338.889' 
    capture_lex $P5121
    .const 'Sub' $P5122 = 'cuid_356_1358115338.889' 
    capture_lex $P5122
    .const 'Sub' $P5123 = 'cuid_357_1358115338.889' 
    capture_lex $P5123
    .return ($P111) 
.end
.HLL "nqp"
.namespace []
.sub "xblock_immediate" :subid("cuid_419_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1562
    .param pmc _lex_param_0 
    .lex "$xblock", _lex_param_0 
.annotate 'line', 1563
    set $P5001, _lex_param_0[1]
    unless_null $P5001, fallback3802
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5002
  fallback3802:
    $P5003 = "&block_immediate"($P5001)
    set _lex_param_0[1], $P5003
    .return (_lex_param_0) 
.end
.HLL "nqp"
.namespace []
.sub "block_immediate" :subid("cuid_422_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1567
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_421_1358115338.889' 
    capture_lex $P5004 
    .lex "$block", _lex_param_0 
.annotate 'line', 1568
    _lex_param_0."blocktype"("immediate")
.annotate 'line', 1569
    $P5001 = _lex_param_0."symtable"()
    if $P5001 goto unless1344_end3804 
    .const 'Sub' $P5002 = 'cuid_421_1358115338.889' 
    capture_lex $P5002
    $P5003 = $P5002()
  unless1344_end3804:
    .return (_lex_param_0) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_421_1358115338.889") :anon :lex :outer("cuid_422_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1569
    .const 'Sub' $P5017 = 'cuid_420_1358115338.889' 
    capture_lex $P5017 
    .lex "$stmts", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
.annotate 'line', 1570
    nqp_get_sc_object $P5005, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Stmts"]
    unless_null $P5002, fallback3805
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5006
  fallback3805:
    find_lex $P5007, "$block"
    $P5008 = $P5007."node"()
    $P5009 = $P5002."new"($P5008 :named("node"))
    set $P101, $P5009
.annotate 'line', 1571
    find_lex $P5013, "$block"
    $P5014 = $P5013."list"()
    set $P5010, $P5014
    iter $P5012, $P5014
  for_next3806:
    unless $P5012, for_done3808
    shift $P5016, $P5012
  for_redo3807:
    .const 'Sub' $P5015 = 'cuid_420_1358115338.889' 
    capture_lex $P5015
    $P5010 = $P5015($P5016)
    goto for_next3806
  for_done3808:
    store_lex "$block", $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_420_1358115338.889") :anon :lex :outer("cuid_421_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1571
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$stmts"
    $P5002 = $P5001."push"(_lex_param_0)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "default_for" :subid("cuid_425_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1577
    .param pmc _lex_param_0 
    .const 'Sub' $P5017 = 'cuid_424_1358115338.889' 
    capture_lex $P5017 
    .lex "$sigil", _lex_param_0 
    set $S5001, _lex_param_0
    iseq $I5001, $S5001, "@"
    unless $I5001 goto if1345_else3809 
.annotate 'line', 1578
.annotate 'line', 1579
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3811
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5005
  fallback3811:
    $P5006 = $P5001."new"("list" :named("op"))
    set $P5016, $P5006
    goto if1345_end3810
  if1345_else3809:
    set $S5002, _lex_param_0
    iseq $I5002, $S5002, "%"
    unless $I5002 goto if1346_else3812 
.annotate 'line', 1581
.annotate 'line', 1582
    nqp_get_sc_object $P5010, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Op"]
    unless_null $P5007, fallback3814
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5007, $P5011
  fallback3814:
    $P5012 = $P5007."new"("hash" :named("op"))
    set $P5015, $P5012
    goto if1346_end3813
  if1346_else3812:
    .const 'Sub' $P5013 = 'cuid_424_1358115338.889' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5015, $P5014
  if1346_end3813:
    set $P5016, $P5015
  if1345_end3810:
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_424_1358115338.889") :anon :lex :outer("cuid_425_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1584
    .const 'Sub' $P5022 = 'cuid_423_1358115338.889' 
    capture_lex $P5022 
    .lex "$default", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    new $P5020, 'ExceptionHandler'
    set_label $P5020, catch_handler_13513823
    $P5020.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5020
.annotate 'line', 1586
    new $P5018, 'ExceptionHandler'
    set_label $P5018, catch_handler_13493820
    $P5018.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5018
.annotate 'line', 1587
    nqp_get_sc_object $P5005, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["WVal"]
    unless_null $P5002, fallback3815
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5006
  fallback3815:
    find_dynamic_lex $P5007, "$*W"
    unless_null $P5007, fallback3816
    nqp_get_sc_object $P5010, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5009, $P5010
    set $P5008, $P5009["$W"]
    unless_null $P5008, fallback3817
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5008, $P5011
  fallback3817:
    unless_null $P5008, vivi_13473818
    die "Contextual $*W not found"
    box $P5012, "Contextual $*W not found"
    set $P5008, $P5012
  vivi_13473818:
    set $P5007, $P5008
  fallback3816:
    new $P5013, 'ResizablePMCArray'
    box $P5014, "NQPMu"
    push $P5013, $P5014
    $P5015 = $P5007."find_sym"($P5013)
    $P5016 = $P5002."new"($P5015 :named("value"))
    set $P101, $P5016
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5019, $P5017
    pop_eh 
    goto skip_handler_13483819
  catch_handler_13493820:
    .get_results ($P5018) 
    .const 'Sub' $P10001 = 'cuid_423_1358115338.889' 
    capture_lex $P10001
    $P10001($P5018)
    set $I10001, 1
    set $P5018["handled"], $I10001
    nqp_get_sc_object $P10002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    finalize $P5018
    pop_upto_eh $P5018
    pop_eh 
    set $P5019, $P10002
    goto skip_handler_13483819
  skip_handler_13483819:
    set $P5021, $P5019
    pop_eh 
    goto skip_handler_13503822
  catch_handler_13513823:
    .get_results ($P5020) 
    set $I10001, 1
    set $P5020["handled"], $I10001
    nqp_get_sc_object $P10001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    finalize $P5020
    pop_upto_eh $P5020
    pop_eh 
    set $P5021, $P10001
    goto skip_handler_13503822
  skip_handler_13503822:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_423_1358115338.889") :anon :lex :outer("cuid_424_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1588
    .param pmc _lex_param_0 
    .lex "$!", $P101 
    .lex "$_", _lex_param_0 
    set $P101, _lex_param_0
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3821
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5005
  fallback3821:
    $P5006 = $P5001."new"("null" :named("op"))
    store_lex "$default", $P5006
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "default_value_for_prim" :subid("cuid_426_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1594
    .param pmc _lex_param_0 
    .lex "$prim", _lex_param_0 
    set $N5001, _lex_param_0
    set $N5002, 1
    iseq $I5001, $N5001, $N5002
    unless $I5001 goto if1352_else3824 
.annotate 'line', 1595
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["IVal"]
    unless_null $P5001, fallback3826
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5005
  fallback3826:
    $P5006 = $P5001."new"(0 :named("value"))
    set $P5020, $P5006
    goto if1352_end3825
  if1352_else3824:
    set $N5003, _lex_param_0
    set $N5004, 2
    iseq $I5002, $N5003, $N5004
    unless $I5002 goto if1353_else3827 
.annotate 'line', 1596
    nqp_get_sc_object $P5010, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["NVal"]
    unless_null $P5007, fallback3829
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5007, $P5011
  fallback3829:
    $P5012 = $P5007."new"(0.0 :named("value"))
    set $P5019, $P5012
    goto if1353_end3828
  if1353_else3827:
.annotate 'line', 1597
    nqp_get_sc_object $P5016, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["SVal"]
    unless_null $P5013, fallback3830
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5013, $P5017
  fallback3830:
    $P5018 = $P5013."new"("" :named("value"))
    set $P5019, $P5018
  if1353_end3828:
    set $P5020, $P5019
  if1352_end3825:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "colonpair_str" :subid("cuid_429_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1609
    .param pmc _lex_param_0 
    .const 'Sub' $P5010 = 'cuid_428_1358115338.889' 
    capture_lex $P5010 
    .lex "$ast", _lex_param_0 
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3833
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5005
  fallback3833:
    type_check $I5001, _lex_param_0, $P5001
    unless $I5001 goto if1354_else3831 
    .const 'Sub' $P5006 = 'cuid_428_1358115338.889' 
    capture_lex $P5006
    $P5007 = $P5006()
    set $P5009, $P5007
    goto if1354_end3832
  if1354_else3831:
.annotate 'line', 1614
.annotate 'line', 1615
    $P5008 = _lex_param_0."value"()
    set $P5009, $P5008
  if1354_end3832:
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_428_1358115338.889") :anon :lex :outer("cuid_429_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1610
    .const 'Sub' $P5009 = 'cuid_427_1358115338.889' 
    capture_lex $P5009 
    .lex "@parts", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
.annotate 'line', 1612
    find_lex $P5005, "$ast"
    $P5006 = $P5005."list"()
    set $P5002, $P5006
    iter $P5004, $P5006
  for_next3834:
    unless $P5004, for_done3836
    shift $P5008, $P5004
  for_redo3835:
    .const 'Sub' $P5007 = 'cuid_427_1358115338.889' 
    capture_lex $P5007
    $P5002 = $P5007($P5008)
    goto for_next3834
  for_done3836:
    join $S5001, " ", $P101
    .return ($S5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_427_1358115338.889") :anon :lex :outer("cuid_428_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1612
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "@parts"
    $P5002 = _lex_param_0."value"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "import_HOW_exports" :subid("cuid_431_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1800
    .param pmc _lex_param_0 
    .const 'Sub' $P5011 = 'cuid_430_1358115338.889' 
    capture_lex $P5011 
    .lex "$UNIT", _lex_param_0 
    exists $I5001, _lex_param_0["EXPORTHOW"]
    box $P5010, $I5001
    set $P5009, $P5010
    unless $I5001 goto if1355_end3838 
.annotate 'line', 1802
    set $P5005, _lex_param_0["EXPORTHOW"]
    unless_null $P5005, fallback3839
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5005, $P5006
  fallback3839:
    get_who $P5004, $P5005
    set $P5001, $P5004
    iter $P5003, $P5004
  for_next3843:
    unless $P5003, for_done3845
    shift $P5008, $P5003
  for_redo3844:
    .const 'Sub' $P5007 = 'cuid_430_1358115338.889' 
    capture_lex $P5007
    $P5001 = $P5007($P5008)
    goto for_next3843
  for_done3845:
    set $P5009, $P5001
  if1355_end3838:
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_430_1358115338.889") :anon :lex :outer("cuid_431_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1803
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_dynamic_lex $P5001, "%*HOW"
    unless_null $P5001, fallback3840
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%HOW"]
    unless_null $P5002, fallback3841
    nqp_get_sc_object $P5006, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%HOW"], $P5007
    set $P5002, $P5007
  fallback3841:
    unless_null $P5002, vivi_13563842
    die "Contextual %*HOW not found"
    box $P5008, "Contextual %*HOW not found"
    set $P5002, $P5008
  vivi_13563842:
    set $P5001, $P5002
  fallback3840:
.annotate 'line', 1804
    $P5009 = _lex_param_0."key"()
    set $S5001, $P5009
    $P5010 = _lex_param_0."value"()
    set $P5001[$S5001], $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "set_block_handler" :subid("cuid_432_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1902
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$/", _lex_param_0 
    .lex "$block", _lex_param_1 
    .lex "$type", _lex_param_2 
    find_dynamic_lex $P5001, "%*HANDLERS"
    unless_null $P5001, fallback3848
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%HANDLERS"]
    unless_null $P5002, fallback3849
    nqp_get_sc_object $P5006, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%HANDLERS"], $P5007
    set $P5002, $P5007
  fallback3849:
    unless_null $P5002, vivi_13583850
    die "Contextual %*HANDLERS not found"
    box $P5008, "Contextual %*HANDLERS not found"
    set $P5002, $P5008
  vivi_13583850:
    set $P5001, $P5002
  fallback3848:
    set $S5001, _lex_param_2
    exists $I5001, $P5001[$S5001]
    unless $I5001 goto if1357_end3847 
.annotate 'line', 1903
    set $S5004, _lex_param_2
    concat $S5003, "Duplicate ", $S5004
    concat $S5002, $S5003, " handler in block"
    box $P5009, $S5002
    die $P5009
  if1357_end3847:
.annotate 'line', 1906
    $P5010 = _lex_param_1."arity"()
    if $P5010 goto unless1359_end3852 
.annotate 'line', 1907
.annotate 'line', 1908
    nqp_get_sc_object $P5014, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback3853
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5011, $P5015
  fallback3853:
.annotate 'line', 1909
    nqp_get_sc_object $P5019, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Var"]
    unless_null $P5016, fallback3854
    nqp_get_sc_object $P5020, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5016, $P5020
  fallback3854:
    $P5021 = $P5016."new"("lexical" :named("scope"), "$!" :named("name"), "var" :named("decl"))
.annotate 'line', 1910
    nqp_get_sc_object $P5025, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["Var"]
    unless_null $P5022, fallback3855
    nqp_get_sc_object $P5026, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5022, $P5026
  fallback3855:
    $P5027 = $P5022."new"("lexical" :named("scope"), "$_" :named("name"))
    $P5028 = $P5011."new"($P5021, $P5027, "bind" :named("op"))
    _lex_param_1."unshift"($P5028)
.annotate 'line', 1913
    nqp_get_sc_object $P5032, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["Var"]
    unless_null $P5029, fallback3856
    nqp_get_sc_object $P5033, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5029, $P5033
  fallback3856:
    $P5034 = $P5029."new"("$_" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    _lex_param_1."unshift"($P5034)
.annotate 'line', 1914
    _lex_param_1."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1915
    _lex_param_1."symbol"("$!", "lexical" :named("scope"))
.annotate 'line', 1916
    $P5035 = _lex_param_1."arity"(1)
  unless1359_end3852:
.annotate 'line', 1918
    _lex_param_1."blocktype"("declaration")
    find_dynamic_lex $P5036, "%*HANDLERS"
    unless_null $P5036, fallback3857
    nqp_get_sc_object $P5039, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5038, $P5039
    set $P5037, $P5038["%HANDLERS"]
    unless_null $P5037, fallback3858
    nqp_get_sc_object $P5041, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5040, $P5041
    new $P5042, 'Hash'
    set $P5040["%HANDLERS"], $P5042
    set $P5037, $P5042
  fallback3858:
    unless_null $P5037, vivi_13603859
    die "Contextual %*HANDLERS not found"
    box $P5043, "Contextual %*HANDLERS not found"
    set $P5037, $P5043
  vivi_13603859:
    set $P5036, $P5037
  fallback3857:
    set $S5005, _lex_param_2
.annotate 'line', 1919
    nqp_get_sc_object $P5047, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5046, $P5047, "QAST"
    get_who $P5045, $P5046
    set $P5044, $P5045["Stmts"]
    unless_null $P5044, fallback3860
    nqp_get_sc_object $P5048, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5044, $P5048
  fallback3860:
.annotate 'line', 1920
    nqp_get_sc_object $P5052, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5051, $P5052, "QAST"
    get_who $P5050, $P5051
    set $P5049, $P5050["Op"]
    unless_null $P5049, fallback3861
    nqp_get_sc_object $P5053, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5049, $P5053
  fallback3861:
.annotate 'line', 1922
    nqp_get_sc_object $P5057, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5056, $P5057, "QAST"
    get_who $P5055, $P5056
    set $P5054, $P5055["Op"]
    unless_null $P5054, fallback3862
    nqp_get_sc_object $P5058, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5054, $P5058
  fallback3862:
    $P5059 = $P5054."new"("exception" :named("op"))
    $P5060 = $P5049."new"(_lex_param_1, $P5059, "call" :named("op"))
.annotate 'line', 1924
    nqp_get_sc_object $P5064, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5063, $P5064, "QAST"
    get_who $P5062, $P5063
    set $P5061, $P5062["Op"]
    unless_null $P5061, fallback3863
    nqp_get_sc_object $P5065, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5061, $P5065
  fallback3863:
.annotate 'line', 1926
    nqp_get_sc_object $P5069, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5068, $P5069, "QAST"
    get_who $P5067, $P5068
    set $P5066, $P5067["Op"]
    unless_null $P5066, fallback3864
    nqp_get_sc_object $P5070, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5066, $P5070
  fallback3864:
    $P5071 = $P5066."new"("exception" :named("op"))
.annotate 'line', 1927
    nqp_get_sc_object $P5075, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5074, $P5075, "QAST"
    get_who $P5073, $P5074
    set $P5072, $P5073["SVal"]
    unless_null $P5072, fallback3865
    nqp_get_sc_object $P5076, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5072, $P5076
  fallback3865:
    $P5077 = $P5072."new"("handled" :named("value"))
.annotate 'line', 1928
    nqp_get_sc_object $P5081, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5080, $P5081, "QAST"
    get_who $P5079, $P5080
    set $P5078, $P5079["IVal"]
    unless_null $P5078, fallback3866
    nqp_get_sc_object $P5082, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5078, $P5082
  fallback3866:
    $P5083 = $P5078."new"(1 :named("value"))
    $P5084 = $P5061."new"($P5071, $P5077, $P5083, "bindkey_i" :named("op"))
.annotate 'line', 1930
    $P5085 = "&default_for"("$")
    $P5086 = $P5044."new"($P5060, $P5084, $P5085)
    set $P5036[$S5005], $P5086
    .return ($P5086) 
.end
.HLL "nqp"
.namespace []
.sub "only_star_block" :subid("cuid_433_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2533
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
.annotate 'line', 2534
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback3867
    nqp_get_sc_object $P5005, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback3868
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5003, $P5006
  fallback3868:
    unless_null $P5003, vivi_13613869
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_13613869:
    set $P5002, $P5003
  fallback3867:
    $P5008 = $P5002."pop_lexpad"()
    set $P101, $P5008
.annotate 'line', 2535
    nqp_get_sc_object $P5012, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["Op"]
    unless_null $P5009, fallback3870
    nqp_get_sc_object $P5013, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5009, $P5013
  fallback3870:
    $P5014 = $P5009."new"("nqpmultidispatch" :named("op"))
    $P101."push"($P5014)
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "attach_multi_signature" :subid("cuid_435_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2539
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5020 = 'cuid_434_1358115338.889' 
    capture_lex $P5020 
    .lex "$types", $P101 
    .lex "$definednesses", $P102 
    .lex "$code_obj", _lex_param_0 
    .lex "$routine", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
    new $P5003, 'ResizablePMCArray'
    set $P101, $P5003
    new $P5004, 'ResizablePMCArray'
    set $P102, $P5004
    set $P5008, _lex_param_1[0]
    unless_null $P5008, fallback3871
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5008, $P5009
  fallback3871:
    $P5010 = $P5008."list"()
    set $P5005, $P5010
    iter $P5007, $P5010
  for_next3887:
    unless $P5007, for_done3889
    shift $P5012, $P5007
  for_redo3888:
    .const 'Sub' $P5011 = 'cuid_434_1358115338.889' 
    capture_lex $P5011
    $P5005 = $P5011($P5012)
    goto for_next3887
  for_done3889:
.annotate 'line', 2551
    find_dynamic_lex $P5013, "$*W"
    unless_null $P5013, fallback3890
    nqp_get_sc_object $P5016, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$W"]
    unless_null $P5014, fallback3891
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5014, $P5017
  fallback3891:
    unless_null $P5014, vivi_13683892
    die "Contextual $*W not found"
    box $P5018, "Contextual $*W not found"
    set $P5014, $P5018
  vivi_13683892:
    set $P5013, $P5014
  fallback3890:
    $P5019 = $P5013."set_routine_signature"(_lex_param_0, $P101, $P102)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_434_1358115338.889") :anon :lex :outer("cuid_435_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2542
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Var"]
    unless_null $P5001, fallback3878
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5005
  fallback3878:
    type_check $I5001, _lex_param_0, $P5001
    set $I5003, $I5001
    unless $I5001 goto if1364_end3877 
.annotate 'line', 2543
    $P5006 = _lex_param_0."decl"()
    set $S5001, $P5006
    iseq $I5002, $S5001, "param"
    set $I5003, $I5002
  if1364_end3877:
    set $I5005, $I5003
    unless $I5003 goto if1363_end3875 
    $P5007 = _lex_param_0."named"()
    isfalse $I5004, $P5007
    set $I5005, $I5004
  if1363_end3875:
    box $P5021, $I5005
    set $P5020, $P5021
    unless $I5005 goto if1362_end3873 
.annotate 'line', 2544
    find_lex $P5008, "$types"
    $P5009 = _lex_param_0."returns"()
    get_id $I5007, $P5009
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    get_id $I5008, $P5010
    iseq $I5006, $I5007, $I5008
    unless $I5006 goto if1365_else3879 
    null $P5011
    set $P5013, $P5011
    goto if1365_end3880
  if1365_else3879:
.annotate 'line', 2546
    $P5012 = _lex_param_0."returns"()
    set $P5013, $P5012
  if1365_end3880:
    $P5008."push"($P5013)
.annotate 'line', 2547
    find_lex $P5014, "$definednesses"
    set $P5015, _lex_param_0["definedness"]
    unless_null $P5015, fallback3883
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5015, $P5016
  fallback3883:
    set $S5002, $P5015
    iseq $I5009, $S5002, "D"
    unless $I5009 goto if1366_else3881 
    set $I5012, 1
    goto if1366_end3882
  if1366_else3881:
    set $P5017, _lex_param_0["definedness"]
    unless_null $P5017, fallback3886
    nqp_get_sc_object $P5018, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5017, $P5018
  fallback3886:
    set $S5003, $P5017
    iseq $I5010, $S5003, "U"
    unless $I5010 goto if1367_else3884 
    set $I5011, 2
    goto if1367_end3885
  if1367_else3884:
    set $I5011, 0
  if1367_end3885:
    set $I5012, $I5011
  if1366_end3882:
    $P5019 = $P5014."push"($I5012)
    set $P5020, $P5019
  if1362_end3873:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "wrap_return_handler" :subid("cuid_436_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2554
    .param pmc _lex_param_0 
    .lex "$past", _lex_param_0 
.annotate 'line', 2555
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3893
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5005
  fallback3893:
    $P5006 = $P5001."new"(_lex_param_0, "lexotic" :named("op"), "RETURN" :named("name"))
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "lexical_package_lookup" :subid("cuid_441_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3027
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5072 = 'cuid_439_1358115338.889' 
    capture_lex $P5072 
    .lex "$final_name", $P101 
    .lex "$lookup", $P102 
    .lex "@name", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
    root_new $P103, ['parrot';'Continuation']
    set_label $P103, lexotic_3894
    .lex "RETURN", $P103
    set $N5001, _lex_param_0
    set $N5002, 0
    iseq $I5001, $N5001, $N5002
    unless $I5001 goto if1369_end3897 
.annotate 'line', 3029
    $P5003 = _lex_param_1."CURSOR"()
    $P5004 = $P5003."panic"("Cannot compile empty name")
  if1369_end3897:
.annotate 'line', 3033
    $P5005 = _lex_param_0."pop"()
    set $P101, $P5005
.annotate 'line', 3034
    nqp_get_sc_object $P5009, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["VarWithFallback"]
    unless_null $P5006, fallback3898
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5006, $P5010
  fallback3898:
.annotate 'line', 3036
    nqp_get_sc_object $P5014, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback3899
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5011, $P5015
  fallback3899:
    set $S5001, $P101
    $P5016 = $P5011."new"($S5001 :named("value"))
    $P5017 = $P5006."new"($P5016, "associative" :named("scope"))
    set $P102, $P5017
    set $N5003, _lex_param_0
    set $N5004, 0
    iseq $I5002, $N5003, $N5004
    unless $I5002 goto if1370_else3900 
.annotate 'line', 3041
.annotate 'line', 3042
    nqp_get_sc_object $P5021, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5020, $P5021, "QAST"
    get_who $P5019, $P5020
    set $P5018, $P5019["Op"]
    unless_null $P5018, fallback3902
    nqp_get_sc_object $P5022, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5018, $P5022
  fallback3902:
.annotate 'line', 3044
    nqp_get_sc_object $P5026, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5025, $P5026, "QAST"
    get_who $P5024, $P5025
    set $P5023, $P5024["Var"]
    unless_null $P5023, fallback3903
    nqp_get_sc_object $P5027, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5023, $P5027
  fallback3903:
    $P5028 = $P5023."new"("$?PACKAGE" :named("name"), "lexical" :named("scope"))
    $P5029 = $P5018."new"($P5028, "who" :named("op"))
    $P102."unshift"($P5029)
.annotate 'line', 3046
    nqp_get_sc_object $P5033, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["Op"]
    unless_null $P5030, fallback3904
    nqp_get_sc_object $P5034, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5030, $P5034
  fallback3904:
.annotate 'line', 3048
    nqp_get_sc_object $P5038, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["Op"]
    unless_null $P5035, fallback3905
    nqp_get_sc_object $P5039, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5035, $P5039
  fallback3905:
.annotate 'line', 3050
    nqp_get_sc_object $P5043, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5042, $P5043, "QAST"
    get_who $P5041, $P5042
    set $P5040, $P5041["Op"]
    unless_null $P5040, fallback3906
    nqp_get_sc_object $P5044, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5040, $P5044
  fallback3906:
.annotate 'line', 3052
    nqp_get_sc_object $P5048, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5047, $P5048, "QAST"
    get_who $P5046, $P5047
    set $P5045, $P5046["WVal"]
    unless_null $P5045, fallback3907
    nqp_get_sc_object $P5049, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5045, $P5049
  fallback3907:
    find_dynamic_lex $P5050, "$*GLOBALish"
    unless_null $P5050, fallback3908
    nqp_get_sc_object $P5053, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5052, $P5053
    set $P5051, $P5052["$GLOBALish"]
    unless_null $P5051, fallback3909
    nqp_get_sc_object $P5054, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5051, $P5054
  fallback3909:
    unless_null $P5051, vivi_13713910
    die "Contextual $*GLOBALish not found"
    box $P5055, "Contextual $*GLOBALish not found"
    set $P5051, $P5055
  vivi_13713910:
    set $P5050, $P5051
  fallback3908:
    $P5056 = $P5045."new"($P5050 :named("value"))
    $P5057 = $P5040."new"($P5056, "who" :named("op"))
.annotate 'line', 3054
    nqp_get_sc_object $P5061, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5060, $P5061, "QAST"
    get_who $P5059, $P5060
    set $P5058, $P5059["SVal"]
    unless_null $P5058, fallback3911
    nqp_get_sc_object $P5062, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5058, $P5062
  fallback3911:
    set $S5002, $P101
    $P5063 = $P5058."new"($S5002 :named("value"))
    $P5064 = $P5035."new"($P5057, $P5063, "atkey" :named("op"))
.annotate 'line', 3056
    set $S5004, $P101
    substr $S5003, $S5004, 0, 1
    $P5065 = "&default_for"($S5003)
    $P5066 = $P5030."new"($P5064, $P5065, "ifnull" :named("op"))
    $P5067 = $P102."fallback"($P5066)
    goto if1370_end3901
  if1370_else3900:
    .const 'Sub' $P5068 = 'cuid_439_1358115338.889' 
    capture_lex $P5068
    $P5069 = $P5068()
  if1370_end3901:
    find_lex $P5070, "RETURN"
    $P5071 = $P5070($P102)
    goto lexotic_3895
  lexotic_3894:
    .get_results ($P5071)
  lexotic_3895:
    .return ($P5071) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_439_1358115338.889") :anon :lex :outer("cuid_441_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3062
    .const 'Sub' $P5066 = 'cuid_438_1358115338.889' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_440_1358115338.889' 
    capture_lex $P5066 
    .lex "$path", $P101 
    .lex "$sigil", $P102 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
.annotate 'line', 3064
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback3914
    nqp_get_sc_object $P5006, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback3915
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5007
  fallback3915:
    unless_null $P5004, vivi_13733916
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_13733916:
    set $P5003, $P5004
  fallback3914:
    find_lex $P5010, "@name"
    set $P5009, $P5010[0]
    unless_null $P5009, fallback3917
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5009, $P5011
  fallback3917:
    $P5012 = $P5003."is_lexical"($P5009)
    unless $P5012 goto if1372_else3912 
    .const 'Sub' $P5013 = 'cuid_438_1358115338.889' 
    capture_lex $P5013
    $P5014 = $P5013()
    goto if1372_end3913
  if1372_else3912:
.annotate 'line', 3073
.annotate 'line', 3074
    nqp_get_sc_object $P5018, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["WVal"]
    unless_null $P5015, fallback3925
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5015, $P5019
  fallback3925:
    find_dynamic_lex $P5020, "$*GLOBALish"
    unless_null $P5020, fallback3926
    nqp_get_sc_object $P5023, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5022, $P5023
    set $P5021, $P5022["$GLOBALish"]
    unless_null $P5021, fallback3927
    nqp_get_sc_object $P5024, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5021, $P5024
  fallback3927:
    unless_null $P5021, vivi_13773928
    die "Contextual $*GLOBALish not found"
    box $P5025, "Contextual $*GLOBALish not found"
    set $P5021, $P5025
  vivi_13773928:
    set $P5020, $P5021
  fallback3926:
    $P5026 = $P5015."new"($P5020 :named("value"))
    set $P101, $P5026
  if1372_end3913:
    find_lex $P5028, "@name"
    set $P5027, $P5028[0]
    unless_null $P5027, fallback3931
    nqp_get_sc_object $P5029, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5027, $P5029
  fallback3931:
    set $S5001, $P5027
    iseq $I5001, $S5001, "GLOBAL"
    unless $I5001 goto if1378_end3930 
.annotate 'line', 3076
.annotate 'line', 3077
    find_lex $P5030, "@name"
    $P5031 = $P5030."shift"()
  if1378_end3930:
    find_lex $P5035, "@name"
    set $P5032, $P5035
    iter $P5034, $P5035
  for_next3934:
    unless $P5034, for_done3936
    shift $P5037, $P5034
  for_redo3935:
    .const 'Sub' $P5036 = 'cuid_440_1358115338.889' 
    capture_lex $P5036
    $P5032 = $P5036($P5037)
    goto for_next3934
  for_done3936:
.annotate 'line', 3084
    find_lex $P5038, "$lookup"
    nqp_get_sc_object $P5042, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5041, $P5042, "QAST"
    get_who $P5040, $P5041
    set $P5039, $P5040["Op"]
    unless_null $P5039, fallback3937
    nqp_get_sc_object $P5043, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5039, $P5043
  fallback3937:
    $P5044 = $P5039."new"($P101, "who" :named("op"))
    $P5038."unshift"($P5044)
    find_lex $P5045, "$final_name"
    set $S5003, $P5045
    substr $S5002, $S5003, 0, 1
    box $P5046, $S5002
    set $P102, $P5046
    set $S5004, $P102
    iseq $I5002, $S5004, "@"
    set $I5004, $I5002
    if $I5002 goto unless1380_end3941 
    set $S5005, $P102
    iseq $I5003, $S5005, "%"
    set $I5004, $I5003
  unless1380_end3941:
    unless $I5004 goto if1379_else3938 
.annotate 'line', 3086
.annotate 'line', 3087
    find_lex $P5047, "$lookup"
    nqp_get_sc_object $P5051, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["Op"]
    unless_null $P5048, fallback3942
    nqp_get_sc_object $P5052, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5048, $P5052
  fallback3942:
    find_lex $P5054, "$lookup"
    set $P5053, $P5054[0]
    unless_null $P5053, fallback3943
    nqp_get_sc_object $P5055, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5053, $P5055
  fallback3943:
    find_lex $P5057, "$lookup"
    set $P5056, $P5057[1]
    unless_null $P5056, fallback3944
    nqp_get_sc_object $P5058, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5056, $P5058
  fallback3944:
.annotate 'line', 3091
    $P5059 = "&default_for"($P102)
    $P5060 = $P5048."new"($P5053, $P5056, $P5059, "bindkey" :named("op"))
    $P5061 = $P5047."fallback"($P5060)
    set $P5065, $P5061
    goto if1379_end3939
  if1379_else3938:
.annotate 'line', 3094
.annotate 'line', 3095
    find_lex $P5062, "$lookup"
    $P5063 = "&default_for"($P102)
    $P5064 = $P5062."fallback"($P5063)
    set $P5065, $P5064
  if1379_end3939:
    .return ($P5065) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_438_1358115338.889") :anon :lex :outer("cuid_439_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3065
    .const 'Sub' $P5021 = 'cuid_437_1358115338.889' 
    capture_lex $P5021 
    .lex "$first", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    new $P5019, 'ExceptionHandler'
    set_label $P5019, catch_handler_13763923
    $P5019.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5019
.annotate 'line', 3066
    find_lex $P5002, "@name"
    $P5003 = $P5002."shift"()
    set $P101, $P5003
.annotate 'line', 3067
    nqp_get_sc_object $P5007, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["WVal"]
    unless_null $P5004, fallback3918
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5008
  fallback3918:
    find_dynamic_lex $P5009, "$*W"
    unless_null $P5009, fallback3919
    nqp_get_sc_object $P5012, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5011, $P5012
    set $P5010, $P5011["$W"]
    unless_null $P5010, fallback3920
    nqp_get_sc_object $P5013, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5010, $P5013
  fallback3920:
    unless_null $P5010, vivi_13743921
    die "Contextual $*W not found"
    box $P5014, "Contextual $*W not found"
    set $P5010, $P5014
  vivi_13743921:
    set $P5009, $P5010
  fallback3919:
    new $P5015, 'ResizablePMCArray'
    push $P5015, $P101
    $P5016 = $P5009."find_sym"($P5015)
    $P5017 = $P5004."new"($P5016 :named("value"))
    store_lex "$path", $P5017
    nqp_get_sc_object $P5018, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5020, $P5018
    pop_eh 
    goto skip_handler_13753922
  catch_handler_13763923:
    .get_results ($P5019) 
    .const 'Sub' $P10001 = 'cuid_437_1358115338.889' 
    capture_lex $P10001
    $P10001($P5019)
    set $I10001, 1
    set $P5019["handled"], $I10001
    nqp_get_sc_object $P10002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    finalize $P5019
    pop_upto_eh $P5019
    pop_eh 
    set $P5020, $P10002
    goto skip_handler_13753922
  skip_handler_13753922:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_437_1358115338.889") :anon :lex :outer("cuid_438_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3068
    .param pmc _lex_param_0 
    .lex "$!", $P101 
    .lex "$_", _lex_param_0 
    set $P101, _lex_param_0
.annotate 'line', 3069
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Var"]
    unless_null $P5001, fallback3924
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5005
  fallback3924:
    find_lex $P5006, "$first"
    $P5007 = $P5001."new"($P5006 :named("name"), "lexical" :named("scope"))
    store_lex "$path", $P5007
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_440_1358115338.889") :anon :lex :outer("cuid_439_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3079
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 3080
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VM"]
    unless_null $P5001, fallback3932
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5005
  fallback3932:
    find_lex $P5006, "$path"
.annotate 'line', 3082
    nqp_get_sc_object $P5010, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["SVal"]
    unless_null $P5007, fallback3933
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5007, $P5011
  fallback3933:
    set $S5001, _lex_param_0
    $P5012 = $P5007."new"($S5001 :named("value"))
    $P5013 = $P5001."new"($P5006, $P5012, "nqp_get_package_through_who PPs" :named("pirop"))
    store_lex "$path", $P5013
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "TOP" :subid("cuid_246_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1600
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback3945
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback3945:
    set $P5001, _lex_param_1["comp_unit"]
    unless_null $P5001, fallback3946
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback3946:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "deflongname" :subid("cuid_247_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1602
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1603
    unless_null _lex_param_1, fallback3949
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback3949:
    set $P5001, _lex_param_1["colonpair"]
    unless_null $P5001, fallback3950
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback3950:
    unless $P5001 goto if1381_else3947 
    unless_null _lex_param_1, fallback3951
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5005
  fallback3951:
    set $P5004, _lex_param_1["identifier"]
    unless_null $P5004, fallback3952
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5006
  fallback3952:
    set $S5006, $P5004
    concat $S5005, $S5006, ":"
.annotate 'line', 1604
    unless_null _lex_param_1, fallback3953
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5009
  fallback3953:
    set $P5008, _lex_param_1["colonpair"]
    unless_null $P5008, fallback3954
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5008, $P5010
  fallback3954:
    set $P5007, $P5008[0]
    unless_null $P5007, fallback3955
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5007, $P5011
  fallback3955:
    $P5012 = $P5007."ast"()
    $P5013 = $P5012."named"()
    set $S5007, $P5013
    concat $S5004, $S5005, $S5007
    concat $S5003, $S5004, "<"
.annotate 'line', 1605
    unless_null _lex_param_1, fallback3956
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5016
  fallback3956:
    set $P5015, _lex_param_1["colonpair"]
    unless_null $P5015, fallback3957
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5015, $P5017
  fallback3957:
    set $P5014, $P5015[0]
    unless_null $P5014, fallback3958
    nqp_get_sc_object $P5018, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5014, $P5018
  fallback3958:
    $P5019 = $P5014."ast"()
    $P5020 = "&colonpair_str"($P5019)
    set $S5008, $P5020
    concat $S5002, $S5003, $S5008
    concat $S5001, $S5002, ">"
    set $S5010, $S5001
    goto if1381_end3948
  if1381_else3947:
    set $S5009, _lex_param_1
    set $S5010, $S5009
  if1381_end3948:
    $P5021 = _lex_param_1."!make"($S5010)
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "comp_unit" :subid("cuid_248_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1619
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$mainline", $P101 
    .lex "$unit", $P102 
    .lex "$compunit", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P103, $P5003
.annotate 'line', 1620
    unless_null _lex_param_1, fallback3959
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5005
  fallback3959:
    set $P5004, _lex_param_1["statementlist"]
    unless_null $P5004, fallback3960
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5006
  fallback3960:
    $P5007 = $P5004."ast"()
    set $P101, $P5007
.annotate 'line', 1621
    find_dynamic_lex $P5008, "$*W"
    unless_null $P5008, fallback3961
    nqp_get_sc_object $P5011, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5010, $P5011
    set $P5009, $P5010["$W"]
    unless_null $P5009, fallback3962
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5009, $P5012
  fallback3962:
    unless_null $P5009, vivi_13823963
    die "Contextual $*W not found"
    box $P5013, "Contextual $*W not found"
    set $P5009, $P5013
  vivi_13823963:
    set $P5008, $P5009
  fallback3961:
    $P5014 = $P5008."pop_lexpad"()
    set $P102, $P5014
    find_dynamic_lex $P5015, "$*HAS_YOU_ARE_HERE"
    unless_null $P5015, fallback3966
    nqp_get_sc_object $P5018, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["$HAS_YOU_ARE_HERE"]
    unless_null $P5016, fallback3967
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5016, $P5019
  fallback3967:
    unless_null $P5016, vivi_13843968
    die "Contextual $*HAS_YOU_ARE_HERE not found"
    box $P5020, "Contextual $*HAS_YOU_ARE_HERE not found"
    set $P5016, $P5020
  vivi_13843968:
    set $P5015, $P5016
  fallback3966:
    if $P5015 goto unless1383_end3965 
.annotate 'line', 1626
.annotate 'line', 1627
    nqp_decontainerize $P5021, _lex_param_0
    $P5022 = $P5021."CTXSAVE"()
    $P5023 = $P102."push"($P5022)
  unless1383_end3965:
.annotate 'line', 1634
    nqp_get_sc_object $P5027, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["Var"]
    unless_null $P5024, fallback3969
    nqp_get_sc_object $P5028, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5024, $P5028
  fallback3969:
    $P5029 = $P5024."new"("lexical" :named("scope"), "@ARGS" :named("name"), "param" :named("decl"), 1 :named("slurpy"))
    $P102."unshift"($P5029)
    find_dynamic_lex $P5030, "$*MAIN_SUB"
    unless_null $P5030, fallback3972
    nqp_get_sc_object $P5033, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5032, $P5033
    set $P5031, $P5032["$MAIN_SUB"]
    unless_null $P5031, fallback3973
    nqp_get_sc_object $P5034, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5031, $P5034
  fallback3973:
    unless_null $P5031, vivi_13863974
    die "Contextual $*MAIN_SUB not found"
    box $P5035, "Contextual $*MAIN_SUB not found"
    set $P5031, $P5035
  vivi_13863974:
    set $P5030, $P5031
  fallback3972:
    unless $P5030 goto if1385_end3971 
.annotate 'line', 1635
.annotate 'line', 1636
    nqp_get_sc_object $P5039, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Op"]
    unless_null $P5036, fallback3975
    nqp_get_sc_object $P5040, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5036, $P5040
  fallback3975:
.annotate 'line', 1638
    nqp_get_sc_object $P5044, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["Var"]
    unless_null $P5041, fallback3976
    nqp_get_sc_object $P5045, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5041, $P5045
  fallback3976:
    $P5046 = $P5041."new"("lexical" :named("scope"), "@ARGS" :named("name"))
.annotate 'line', 1639
    nqp_get_sc_object $P5050, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5049, $P5050, "QAST"
    get_who $P5048, $P5049
    set $P5047, $P5048["Op"]
    unless_null $P5047, fallback3977
    nqp_get_sc_object $P5051, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5047, $P5051
  fallback3977:
.annotate 'line', 1640
    nqp_get_sc_object $P5055, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5054, $P5055, "QAST"
    get_who $P5053, $P5054
    set $P5052, $P5053["BVal"]
    unless_null $P5052, fallback3978
    nqp_get_sc_object $P5056, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5052, $P5056
  fallback3978:
    find_dynamic_lex $P5057, "$*MAIN_SUB"
    unless_null $P5057, fallback3979
    nqp_get_sc_object $P5060, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5059, $P5060
    set $P5058, $P5059["$MAIN_SUB"]
    unless_null $P5058, fallback3980
    nqp_get_sc_object $P5061, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5058, $P5061
  fallback3980:
    unless_null $P5058, vivi_13873981
    die "Contextual $*MAIN_SUB not found"
    box $P5062, "Contextual $*MAIN_SUB not found"
    set $P5058, $P5062
  vivi_13873981:
    set $P5057, $P5058
  fallback3979:
    $P5063 = $P5052."new"($P5057 :named("value"))
.annotate 'line', 1641
    nqp_get_sc_object $P5067, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5066, $P5067, "QAST"
    get_who $P5065, $P5066
    set $P5064, $P5065["Var"]
    unless_null $P5064, fallback3982
    nqp_get_sc_object $P5068, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5064, $P5068
  fallback3982:
    $P5069 = $P5064."new"("lexical" :named("scope"), "@ARGS" :named("name"), 1 :named("flat"))
    $P5070 = $P5047."new"($P5063, $P5069, "call" :named("op"))
    $P5071 = $P5036."new"($P5046, $P5070, "if" :named("op"))
    $P5072 = $P101."push"($P5071)
  if1385_end3971:
.annotate 'line', 1647
    $P102."push"($P101)
.annotate 'line', 1650
    find_dynamic_lex $P5073, "$*W"
    unless_null $P5073, fallback3983
    nqp_get_sc_object $P5076, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5075, $P5076
    set $P5074, $P5075["$W"]
    unless_null $P5074, fallback3984
    nqp_get_sc_object $P5077, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5074, $P5077
  fallback3984:
    unless_null $P5074, vivi_13883985
    die "Contextual $*W not found"
    box $P5078, "Contextual $*W not found"
    set $P5074, $P5078
  vivi_13883985:
    set $P5073, $P5074
  fallback3983:
    $P5079 = $P5073."libs"()
    $P102."push"($P5079)
.annotate 'line', 1653
    nqp_get_sc_object $P5083, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5082, $P5083, "QAST"
    get_who $P5081, $P5082
    set $P5080, $P5081["CompUnit"]
    unless_null $P5080, fallback3986
    nqp_get_sc_object $P5084, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5080, $P5084
  fallback3986:
.annotate 'line', 1657
    find_dynamic_lex $P5085, "$*W"
    unless_null $P5085, fallback3987
    nqp_get_sc_object $P5088, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5087, $P5088
    set $P5086, $P5087["$W"]
    unless_null $P5086, fallback3988
    nqp_get_sc_object $P5089, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5086, $P5089
  fallback3988:
    unless_null $P5086, vivi_13893989
    die "Contextual $*W not found"
    box $P5090, "Contextual $*W not found"
    set $P5086, $P5090
  vivi_13893989:
    set $P5085, $P5086
  fallback3987:
    $P5091 = $P5085."sc"()
.annotate 'line', 1658
    find_dynamic_lex $P5092, "$*W"
    unless_null $P5092, fallback3990
    nqp_get_sc_object $P5095, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5094, $P5095
    set $P5093, $P5094["$W"]
    unless_null $P5093, fallback3991
    nqp_get_sc_object $P5096, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5093, $P5096
  fallback3991:
    unless_null $P5093, vivi_13903992
    die "Contextual $*W not found"
    box $P5097, "Contextual $*W not found"
    set $P5093, $P5097
  vivi_13903992:
    set $P5092, $P5093
  fallback3990:
    $P5098 = $P5092."code_ref_blocks"()
.annotate 'line', 1659
    find_dynamic_lex $P5099, "$*W"
    unless_null $P5099, fallback3993
    nqp_get_sc_object $P5102, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5101, $P5102
    set $P5100, $P5101["$W"]
    unless_null $P5100, fallback3994
    nqp_get_sc_object $P5103, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5100, $P5103
  fallback3994:
    unless_null $P5100, vivi_13913995
    die "Contextual $*W not found"
    box $P5104, "Contextual $*W not found"
    set $P5100, $P5104
  vivi_13913995:
    set $P5099, $P5100
  fallback3993:
    $P5105 = $P5099."is_precompilation_mode"()
.annotate 'line', 1660
    find_dynamic_lex $P5106, "$*W"
    unless_null $P5106, fallback3996
    nqp_get_sc_object $P5109, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5108, $P5109
    set $P5107, $P5108["$W"]
    unless_null $P5107, fallback3997
    nqp_get_sc_object $P5110, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5107, $P5110
  fallback3997:
    unless_null $P5107, vivi_13923998
    die "Contextual $*W not found"
    box $P5111, "Contextual $*W not found"
    set $P5107, $P5111
  vivi_13923998:
    set $P5106, $P5107
  fallback3996:
    $P5112 = $P5106."load_dependency_tasks"()
.annotate 'line', 1661
    find_dynamic_lex $P5113, "$*W"
    unless_null $P5113, fallback3999
    nqp_get_sc_object $P5116, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5115, $P5116
    set $P5114, $P5115["$W"]
    unless_null $P5114, fallback4000
    nqp_get_sc_object $P5117, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5114, $P5117
  fallback4000:
    unless_null $P5114, vivi_13934001
    die "Contextual $*W not found"
    box $P5118, "Contextual $*W not found"
    set $P5114, $P5118
  vivi_13934001:
    set $P5113, $P5114
  fallback3999:
    $P5119 = $P5113."fixup_tasks"()
.annotate 'line', 1666
    nqp_get_sc_object $P5123, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5122, $P5123, "QAST"
    get_who $P5121, $P5122
    set $P5120, $P5121["Op"]
    unless_null $P5120, fallback4002
    nqp_get_sc_object $P5124, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5120, $P5124
  fallback4002:
.annotate 'line', 1668
    nqp_get_sc_object $P5128, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5127, $P5128, "QAST"
    get_who $P5126, $P5127
    set $P5125, $P5126["BVal"]
    unless_null $P5125, fallback4003
    nqp_get_sc_object $P5129, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5125, $P5129
  fallback4003:
    $P5130 = $P5125."new"($P102 :named("value"))
    $P5131 = $P5120."new"($P5130, "call" :named("op"))
.annotate 'line', 1673
    nqp_get_sc_object $P5135, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5134, $P5135, "QAST"
    get_who $P5133, $P5134
    set $P5132, $P5133["Stmts"]
    unless_null $P5132, fallback4004
    nqp_get_sc_object $P5136, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5132, $P5136
  fallback4004:
.annotate 'line', 1674
    nqp_get_sc_object $P5140, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5139, $P5140, "QAST"
    get_who $P5138, $P5139
    set $P5137, $P5138["Op"]
    unless_null $P5137, fallback4005
    nqp_get_sc_object $P5141, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5137, $P5141
  fallback4005:
.annotate 'line', 1676
    nqp_get_sc_object $P5145, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5144, $P5145, "QAST"
    get_who $P5143, $P5144
    set $P5142, $P5143["BVal"]
    unless_null $P5142, fallback4006
    nqp_get_sc_object $P5146, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5142, $P5146
  fallback4006:
    $P5147 = $P5142."new"($P102 :named("value"))
.annotate 'line', 1677
    nqp_get_sc_object $P5151, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5150, $P5151, "QAST"
    get_who $P5149, $P5150
    set $P5148, $P5149["Var"]
    unless_null $P5148, fallback4007
    nqp_get_sc_object $P5152, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5148, $P5152
  fallback4007:
    $P5153 = $P5148."new"("ARGS" :named("name"), "local" :named("scope"), "param" :named("decl"), 1 :named("slurpy"), 1 :named("flat"))
    $P5154 = $P5137."new"($P5147, $P5153, "call" :named("op"))
    $P5155 = $P5132."new"($P5154)
    $P5156 = $P5080."new"($P102, "nqp" :named("hll"), $P5091 :named("sc"), $P5098 :named("code_ref_blocks"), $P5105 :named("compilation_mode"), $P5112 :named("pre_deserialize"), $P5119 :named("post_deserialize"), $P5131 :named("load"), $P5155 :named("main"))
    set $P103, $P5156
.annotate 'line', 1686
    $P5157 = _lex_param_1."!make"($P103)
    .return ($P5157) 
.end
.HLL "nqp"
.namespace []
.sub "statementlist" :subid("cuid_249_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1689
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5022 = 'cuid_442_1358115338.889' 
    capture_lex $P5022 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
.annotate 'line', 1690
    nqp_get_sc_object $P5005, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Stmts"]
    unless_null $P5002, fallback4008
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5006
  fallback4008:
    $P5007 = $P5002."new"(_lex_param_1 :named("node"))
    set $P101, $P5007
    unless_null _lex_param_1, fallback4011
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5009
  fallback4011:
    set $P5008, _lex_param_1["statement"]
    unless_null $P5008, fallback4012
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5008, $P5010
  fallback4012:
    unless $P5008 goto if1394_else4009 
.annotate 'line', 1691
    unless_null _lex_param_1, fallback4013
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5015
  fallback4013:
    set $P5014, _lex_param_1["statement"]
    unless_null $P5014, fallback4014
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5014, $P5016
  fallback4014:
    set $P5011, $P5014
    iter $P5013, $P5014
  for_next4027:
    unless $P5013, for_done4029
    shift $P5018, $P5013
  for_redo4028:
    .const 'Sub' $P5017 = 'cuid_442_1358115338.889' 
    capture_lex $P5017
    $P5011 = $P5017($P5018)
    goto for_next4027
  for_done4029:
    goto if1394_end4010
  if1394_else4009:
.annotate 'line', 1700
.annotate 'line', 1701
    $P5019 = "&default_for"("$")
    $P5020 = $P101."push"($P5019)
  if1394_end4010:
.annotate 'line', 1703
    $P5021 = _lex_param_1."!make"($P101)
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_442_1358115338.889") :anon :lex :outer("cuid_249_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1692
    .param pmc _lex_param_0 
    .lex "$ast", $P101 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
.annotate 'line', 1693
    $P5002 = _lex_param_0."ast"()
    set $P101, $P5002
    set $P5003, $P101["sink"]
    unless_null $P5003, fallback4017
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5003, $P5004
  fallback4017:
    defined $I5001, $P5003
    unless $I5001 goto if1395_end4016 
    set $P5005, $P101["sink"]
    unless_null $P5005, fallback4018
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5005, $P5006
  fallback4018:
    set $P101, $P5005
  if1395_end4016:
    set $P5007, $P101["bareblock"]
    unless_null $P5007, fallback4021
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5007, $P5008
  fallback4021:
    unless $P5007 goto if1396_end4020 
.annotate 'line', 1695
    set $P5009, $P101[0]
    unless_null $P5009, fallback4022
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5009, $P5010
  fallback4022:
    $P5011 = "&block_immediate"($P5009)
    set $P101, $P5011
  if1396_end4020:
    nqp_get_sc_object $P5015, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Node"]
    unless_null $P5012, fallback4025
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5012, $P5016
  fallback4025:
    type_check $I5002, $P101, $P5012
    unless $I5002 goto if1397_end4024 
.annotate 'line', 1696
    nqp_get_sc_object $P5020, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Stmts"]
    unless_null $P5017, fallback4026
    nqp_get_sc_object $P5021, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5017, $P5021
  fallback4026:
    $P5022 = $P5017."new"($P101)
    set $P101, $P5022
  if1397_end4024:
.annotate 'line', 1697
    find_lex $P5023, "$past"
    $P5024 = $P5023."push"($P101)
    .return ($P5024) 
.end
.HLL "nqp"
.namespace []
.sub "statement" :subid("cuid_250_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1706
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :optional 
    .param int haz_param_4 :opt_flag 
    .const 'Sub' $P5018 = 'cuid_443_1358115338.889' 
    capture_lex $P5018 
    if haz_param_4, default4066
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_2, $P5017
  default4066:
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .lex "$key", _lex_param_2 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    unless_null _lex_param_1, fallback4032
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5003
  fallback4032:
    set $P5002, _lex_param_1["EXPR"]
    unless_null $P5002, fallback4033
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5004
  fallback4033:
    unless $P5002 goto if1398_else4030 
    .const 'Sub' $P5005 = 'cuid_443_1358115338.889' 
    capture_lex $P5005
    $P5006 = $P5005()
    goto if1398_end4031
  if1398_else4030:
    unless_null _lex_param_1, fallback4062
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5008
  fallback4062:
    set $P5007, _lex_param_1["statement_control"]
    unless_null $P5007, fallback4063
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5007, $P5009
  fallback4063:
    unless $P5007 goto if1402_else4060 
.annotate 'line', 1729
    unless_null _lex_param_1, fallback4064
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5011
  fallback4064:
    set $P5010, _lex_param_1["statement_control"]
    unless_null $P5010, fallback4065
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5010, $P5012
  fallback4065:
    $P5013 = $P5010."ast"()
    set $P101, $P5013
    set $P5015, $P101
    goto if1402_end4061
  if1402_else4060:
.annotate 'line', 1730
    box $P5014, 0
    set $P101, $P5014
    set $P5015, $P101
  if1402_end4061:
  if1398_end4031:
.annotate 'line', 1731
    $P5016 = _lex_param_1."!make"($P101)
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_443_1358115338.889") :anon :lex :outer("cuid_250_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1708
    .lex "$mc", $P101 
    .lex "$ml", $P102 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
    find_lex $P5005, "$/"
    unless_null $P5005, fallback4034
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5005, $P5006
  fallback4034:
    set $P5004, $P5005["statement_mod_cond"]
    unless_null $P5004, fallback4035
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5007
  fallback4035:
    set $P5003, $P5004[0]
    unless_null $P5003, fallback4036
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5003, $P5008
  fallback4036:
    set $P101, $P5003
    find_lex $P5011, "$/"
    unless_null $P5011, fallback4037
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5011, $P5012
  fallback4037:
    set $P5010, $P5011["statement_mod_loop"]
    unless_null $P5010, fallback4038
    nqp_get_sc_object $P5013, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5010, $P5013
  fallback4038:
    set $P5009, $P5010[0]
    unless_null $P5009, fallback4039
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5009, $P5014
  fallback4039:
    set $P102, $P5009
.annotate 'line', 1711
    find_lex $P5016, "$/"
    unless_null $P5016, fallback4040
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5016, $P5017
  fallback4040:
    set $P5015, $P5016["EXPR"]
    unless_null $P5015, fallback4041
    nqp_get_sc_object $P5018, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5015, $P5018
  fallback4041:
    $P5019 = $P5015."ast"()
    store_lex "$past", $P5019
    unless $P101 goto if1399_end4043 
.annotate 'line', 1712
.annotate 'line', 1713
    nqp_get_sc_object $P5023, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback4044
    nqp_get_sc_object $P5024, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5020, $P5024
  fallback4044:
    set $P5025, $P101["cond"]
    unless_null $P5025, fallback4045
    nqp_get_sc_object $P5026, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5025, $P5026
  fallback4045:
    $P5027 = $P5025."ast"()
    find_lex $P5028, "$past"
    set $P5029, $P101["sym"]
    unless_null $P5029, fallback4046
    nqp_get_sc_object $P5030, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5029, $P5030
  fallback4046:
    set $S5001, $P5029
    find_lex $P5031, "$/"
    $P5032 = $P5020."new"($P5027, $P5028, $S5001 :named("op"), $P5031 :named("node"))
    store_lex "$past", $P5032
  if1399_end4043:
    set $P5077, $P102
    unless $P102 goto if1400_end4048 
.annotate 'line', 1715
    set $P5033, $P102["sym"]
    unless_null $P5033, fallback4051
    nqp_get_sc_object $P5034, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5033, $P5034
  fallback4051:
    set $S5002, $P5033
    iseq $I5001, $S5002, "for"
    unless $I5001 goto if1401_else4049 
.annotate 'line', 1716
.annotate 'line', 1717
    nqp_get_sc_object $P5038, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["Block"]
    unless_null $P5035, fallback4052
    nqp_get_sc_object $P5039, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5035, $P5039
  fallback4052:
.annotate 'line', 1718
    nqp_get_sc_object $P5043, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5042, $P5043, "QAST"
    get_who $P5041, $P5042
    set $P5040, $P5041["Var"]
    unless_null $P5040, fallback4053
    nqp_get_sc_object $P5044, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5040, $P5044
  fallback4053:
    $P5045 = $P5040."new"("$_" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    find_lex $P5046, "$past"
    $P5047 = $P5035."new"($P5045, $P5046, "immediate" :named("blocktype"))
    store_lex "$past", $P5047
.annotate 'line', 1720
    find_lex $P5048, "$past"
    $P5048."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1721
    find_lex $P5049, "$past"
    $P5049."arity"(1)
.annotate 'line', 1722
    nqp_get_sc_object $P5053, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5052, $P5053, "QAST"
    get_who $P5051, $P5052
    set $P5050, $P5051["Op"]
    unless_null $P5050, fallback4054
    nqp_get_sc_object $P5054, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5050, $P5054
  fallback4054:
    set $P5055, $P102["cond"]
    unless_null $P5055, fallback4055
    nqp_get_sc_object $P5056, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5055, $P5056
  fallback4055:
    $P5057 = $P5055."ast"()
    find_lex $P5058, "$past"
    set $P5059, $P102["sym"]
    unless_null $P5059, fallback4056
    nqp_get_sc_object $P5060, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5059, $P5060
  fallback4056:
    set $S5003, $P5059
    find_lex $P5061, "$/"
    $P5062 = $P5050."new"($P5057, $P5058, $S5003 :named("op"), $P5061 :named("node"))
    store_lex "$past", $P5062
    set $P5076, $P5062
    goto if1401_end4050
  if1401_else4049:
.annotate 'line', 1724
.annotate 'line', 1725
    nqp_get_sc_object $P5066, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5065, $P5066, "QAST"
    get_who $P5064, $P5065
    set $P5063, $P5064["Op"]
    unless_null $P5063, fallback4057
    nqp_get_sc_object $P5067, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5063, $P5067
  fallback4057:
    set $P5068, $P102["cond"]
    unless_null $P5068, fallback4058
    nqp_get_sc_object $P5069, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5068, $P5069
  fallback4058:
    $P5070 = $P5068."ast"()
    find_lex $P5071, "$past"
    set $P5072, $P102["sym"]
    unless_null $P5072, fallback4059
    nqp_get_sc_object $P5073, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5072, $P5073
  fallback4059:
    set $S5004, $P5072
    find_lex $P5074, "$/"
    $P5075 = $P5063."new"($P5070, $P5071, $S5004 :named("op"), $P5074 :named("node"))
    store_lex "$past", $P5075
    set $P5076, $P5075
  if1401_end4050:
    set $P5077, $P5076
  if1400_end4048:
    .return ($P5077) 
.end
.HLL "nqp"
.namespace []
.sub "xblock" :subid("cuid_251_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1734
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1735
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback4067
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5005
  fallback4067:
    unless_null _lex_param_1, fallback4068
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5007
  fallback4068:
    set $P5006, _lex_param_1["EXPR"]
    unless_null $P5006, fallback4069
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5006, $P5008
  fallback4069:
    $P5009 = $P5006."ast"()
    unless_null _lex_param_1, fallback4070
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5011
  fallback4070:
    set $P5010, _lex_param_1["pblock"]
    unless_null $P5010, fallback4071
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5010, $P5012
  fallback4071:
    $P5013 = $P5010."ast"()
    $P5014 = $P5001."new"($P5009, $P5013, "if" :named("op"), _lex_param_1 :named("node"))
    $P5015 = _lex_param_1."!make"($P5014)
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "pblock" :subid("cuid_252_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1738
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1739
    unless_null _lex_param_1, fallback4072
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback4072:
    set $P5001, _lex_param_1["blockoid"]
    unless_null $P5001, fallback4073
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback4073:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "block" :subid("cuid_253_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1742
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1743
    unless_null _lex_param_1, fallback4074
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback4074:
    set $P5001, _lex_param_1["blockoid"]
    unless_null $P5001, fallback4075
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback4075:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "blockoid" :subid("cuid_254_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1746
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5029 = 'cuid_445_1358115338.889' 
    capture_lex $P5029 
    .lex "$BLOCK", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
.annotate 'line', 1747
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback4076
    nqp_get_sc_object $P5005, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback4077
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5003, $P5006
  fallback4077:
    unless_null $P5003, vivi_14034078
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_14034078:
    set $P5002, $P5003
  fallback4076:
    $P5008 = $P5002."pop_lexpad"()
    set $P101, $P5008
    unless_null _lex_param_1, fallback4081
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5010
  fallback4081:
    set $P5009, _lex_param_1["statementlist"]
    unless_null $P5009, fallback4082
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5009, $P5011
  fallback4082:
    unless $P5009 goto if1404_else4079 
    .const 'Sub' $P5012 = 'cuid_445_1358115338.889' 
    capture_lex $P5012
    $P5013 = $P5012()
    set $P5028, $P5013
    goto if1404_end4080
  if1404_else4079:
.annotate 'line', 1762
    find_dynamic_lex $P5014, "$*HAS_YOU_ARE_HERE"
    unless_null $P5014, fallback4107
    nqp_get_sc_object $P5017, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5016, $P5017
    set $P5015, $P5016["$HAS_YOU_ARE_HERE"]
    unless_null $P5015, fallback4108
    nqp_get_sc_object $P5018, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5015, $P5018
  fallback4108:
    unless_null $P5015, vivi_14124109
    die "Contextual $*HAS_YOU_ARE_HERE not found"
    box $P5019, "Contextual $*HAS_YOU_ARE_HERE not found"
    set $P5015, $P5019
  vivi_14124109:
    set $P5014, $P5015
  fallback4107:
    unless $P5014 goto if1411_end4106 
.annotate 'line', 1763
.annotate 'line', 1764
    $P5020 = _lex_param_1."CURSOR"()
    $P5021 = $P5020."panic"("{YOU_ARE_HERE} may only appear once in a setting")
  if1411_end4106:
    box $P5022, 1
    store_dynamic_lex "$*HAS_YOU_ARE_HERE", $P5022
.annotate 'line', 1767
    unless_null _lex_param_1, fallback4110
    nqp_get_sc_object $P5024, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5024
  fallback4110:
    set $P5023, _lex_param_1["you_are_here"]
    unless_null $P5023, fallback4111
    nqp_get_sc_object $P5025, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5023, $P5025
  fallback4111:
    $P5026 = $P5023."ast"()
    $P5027 = _lex_param_1."!make"($P5026)
    set $P5028, $P5027
  if1404_end4080:
    .return ($P5028) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_445_1358115338.889") :anon :lex :outer("cuid_254_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1748
    .const 'Sub' $P5057 = 'cuid_444_1358115338.889' 
    capture_lex $P5057 
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
.annotate 'line', 1749
    find_lex $P5003, "$/"
    unless_null $P5003, fallback4083
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5003, $P5004
  fallback4083:
    set $P5002, $P5003["statementlist"]
    unless_null $P5002, fallback4084
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5005
  fallback4084:
    $P5006 = $P5002."ast"()
    set $P101, $P5006
    find_dynamic_lex $P5007, "%*HANDLERS"
    unless_null $P5007, fallback4087
    nqp_get_sc_object $P5010, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5009, $P5010
    set $P5008, $P5009["%HANDLERS"]
    unless_null $P5008, fallback4088
    nqp_get_sc_object $P5012, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5011, $P5012
    new $P5013, 'Hash'
    set $P5011["%HANDLERS"], $P5013
    set $P5008, $P5013
  fallback4088:
    unless_null $P5008, vivi_14064089
    die "Contextual %*HANDLERS not found"
    box $P5014, "Contextual %*HANDLERS not found"
    set $P5008, $P5014
  vivi_14064089:
    set $P5007, $P5008
  fallback4087:
    unless $P5007 goto if1405_end4086 
.annotate 'line', 1750
.annotate 'line', 1751
    nqp_get_sc_object $P5018, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["Op"]
    unless_null $P5015, fallback4090
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5015, $P5019
  fallback4090:
    $P5020 = $P5015."new"($P101, "handle" :named("op"))
    set $P101, $P5020
    find_dynamic_lex $P5024, "%*HANDLERS"
    unless_null $P5024, fallback4091
    nqp_get_sc_object $P5027, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5026, $P5027
    set $P5025, $P5026["%HANDLERS"]
    unless_null $P5025, fallback4092
    nqp_get_sc_object $P5029, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5028, $P5029
    new $P5030, 'Hash'
    set $P5028["%HANDLERS"], $P5030
    set $P5025, $P5030
  fallback4092:
    unless_null $P5025, vivi_14074093
    die "Contextual %*HANDLERS not found"
    box $P5031, "Contextual %*HANDLERS not found"
    set $P5025, $P5031
  vivi_14074093:
    set $P5024, $P5025
  fallback4091:
    set $P5021, $P5024
    iter $P5023, $P5024
  for_next4094:
    unless $P5023, for_done4096
    shift $P5033, $P5023
  for_redo4095:
    .const 'Sub' $P5032 = 'cuid_444_1358115338.889' 
    capture_lex $P5032
    $P5021 = $P5032($P5033)
    goto for_next4094
  for_done4096:
  if1405_end4086:
.annotate 'line', 1757
    find_lex $P5034, "$BLOCK"
    $P5034."push"($P101)
.annotate 'line', 1758
    find_lex $P5035, "$BLOCK"
    find_lex $P5036, "$/"
    $P5035."node"($P5036)
    find_dynamic_lex $P5037, "%*HANDLERS"
    unless_null $P5037, fallback4099
    nqp_get_sc_object $P5040, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5039, $P5040
    set $P5038, $P5039["%HANDLERS"]
    unless_null $P5038, fallback4100
    nqp_get_sc_object $P5042, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5041, $P5042
    new $P5043, 'Hash'
    set $P5041["%HANDLERS"], $P5043
    set $P5038, $P5043
  fallback4100:
    unless_null $P5038, vivi_14094101
    die "Contextual %*HANDLERS not found"
    box $P5044, "Contextual %*HANDLERS not found"
    set $P5038, $P5044
  vivi_14094101:
    set $P5037, $P5038
  fallback4099:
    unless $P5037 goto if1408_end4098 
    find_lex $P5045, "$BLOCK"
    find_dynamic_lex $P5046, "%*HANDLERS"
    unless_null $P5046, fallback4102
    nqp_get_sc_object $P5049, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5048, $P5049
    set $P5047, $P5048["%HANDLERS"]
    unless_null $P5047, fallback4103
    nqp_get_sc_object $P5051, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5050, $P5051
    new $P5052, 'Hash'
    set $P5050["%HANDLERS"], $P5052
    set $P5047, $P5052
  fallback4103:
    unless_null $P5047, vivi_14104104
    die "Contextual %*HANDLERS not found"
    box $P5053, "Contextual %*HANDLERS not found"
    set $P5047, $P5053
  vivi_14104104:
    set $P5046, $P5047
  fallback4102:
    set $P5045["handlers"], $P5046
  if1408_end4098:
.annotate 'line', 1760
    find_dynamic_lex $P5054, "$/"
    find_lex $P5055, "$BLOCK"
    $P5056 = $P5054."!make"($P5055)
    .return ($P5056) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_444_1358115338.889") :anon :lex :outer("cuid_445_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1752
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 1753
    find_lex $P5001, "$past"
    $P5002 = _lex_param_0."key"()
    $P5001."push"($P5002)
.annotate 'line', 1754
    find_lex $P5003, "$past"
    $P5004 = _lex_param_0."value"()
    $P5005 = $P5003."push"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "newpad" :subid("cuid_255_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1771
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1772
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback4112
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback4113
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5005
  fallback4113:
    unless_null $P5002, vivi_14134114
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_14134114:
    set $P5001, $P5002
  fallback4112:
    $P5007 = $P5001."push_lexpad"(_lex_param_1)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "outerctx" :subid("cuid_256_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1775
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5024 = 'cuid_446_1358115338.889' 
    capture_lex $P5024 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    find_dynamic_lex $P5003, "%*COMPILING"
    unless_null $P5003, fallback4117
    nqp_get_sc_object $P5006, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["%COMPILING"]
    unless_null $P5004, fallback4118
    nqp_get_sc_object $P5008, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5007, $P5008
    new $P5009, 'Hash'
    set $P5007["%COMPILING"], $P5009
    set $P5004, $P5009
  fallback4118:
    unless_null $P5004, vivi_14154119
    die "Contextual %*COMPILING not found"
    box $P5010, "Contextual %*COMPILING not found"
    set $P5004, $P5010
  vivi_14154119:
    set $P5003, $P5004
  fallback4117:
    set $P5002, $P5003["%?OPTIONS"]
    unless_null $P5002, fallback4120
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5011
  fallback4120:
    set $P5001, $P5002["outer_ctx"]
    unless_null $P5001, fallback4121
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5012
  fallback4121:
    defined $I5001, $P5001
    if $I5001 goto unless1414_end4116 
    .const 'Sub' $P5013 = 'cuid_446_1358115338.889' 
    capture_lex $P5013
    $P5014 = $P5013()
  unless1414_end4116:
.annotate 'line', 1797
    nqp_decontainerize $P5015, _lex_param_0
    find_dynamic_lex $P5016, "$*W"
    unless_null $P5016, fallback4177
    nqp_get_sc_object $P5019, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5018, $P5019
    set $P5017, $P5018["$W"]
    unless_null $P5017, fallback4178
    nqp_get_sc_object $P5020, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5017, $P5020
  fallback4178:
    unless_null $P5017, vivi_14324179
    die "Contextual $*W not found"
    box $P5021, "Contextual $*W not found"
    set $P5017, $P5021
  vivi_14324179:
    set $P5016, $P5017
  fallback4177:
    $P5022 = $P5016."cur_lexpad"()
    $P5023 = $P5015."SET_BLOCK_OUTER_CTX"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_446_1358115338.889") :anon :lex :outer("cuid_256_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1776
    .lex "$SETTING", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
.annotate 'line', 1779
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback4122
    nqp_get_sc_object $P5005, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback4123
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5003, $P5006
  fallback4123:
    unless_null $P5003, vivi_14164124
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_14164124:
    set $P5002, $P5003
  fallback4122:
    find_dynamic_lex $P5011, "%*COMPILING"
    unless_null $P5011, fallback4126
    nqp_get_sc_object $P5014, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["%COMPILING"]
    unless_null $P5012, fallback4127
    nqp_get_sc_object $P5016, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5015, $P5016
    new $P5017, 'Hash'
    set $P5015["%COMPILING"], $P5017
    set $P5012, $P5017
  fallback4127:
    unless_null $P5012, vivi_14174128
    die "Contextual %*COMPILING not found"
    box $P5018, "Contextual %*COMPILING not found"
    set $P5012, $P5018
  vivi_14174128:
    set $P5011, $P5012
  fallback4126:
    set $P5010, $P5011["%?OPTIONS"]
    unless_null $P5010, fallback4129
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5010, $P5019
  fallback4129:
    set $P5009, $P5010["setting"]
    unless_null $P5009, fallback4130
    nqp_get_sc_object $P5020, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5009, $P5020
  fallback4130:
    set $P5008, $P5009
    defined $I5001, $P5008
    if $I5001, defor4125
    box $P5021, "NQPCORE"
    set $P5008, $P5021
  defor4125:
    $P5022 = $P5002."load_setting"($P5008)
    set $P101, $P5022
    find_dynamic_lex $P5025, "%*COMPILING"
    unless_null $P5025, fallback4133
    nqp_get_sc_object $P5028, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5027, $P5028
    set $P5026, $P5027["%COMPILING"]
    unless_null $P5026, fallback4134
    nqp_get_sc_object $P5030, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5029, $P5030
    new $P5031, 'Hash'
    set $P5029["%COMPILING"], $P5031
    set $P5026, $P5031
  fallback4134:
    unless_null $P5026, vivi_14194135
    die "Contextual %*COMPILING not found"
    box $P5032, "Contextual %*COMPILING not found"
    set $P5026, $P5032
  vivi_14194135:
    set $P5025, $P5026
  fallback4133:
    set $P5024, $P5025["%?OPTIONS"]
    unless_null $P5024, fallback4136
    nqp_get_sc_object $P5033, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5024, $P5033
  fallback4136:
    set $P5023, $P5024["setting"]
    unless_null $P5023, fallback4137
    nqp_get_sc_object $P5034, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5023, $P5034
  fallback4137:
    set $S5001, $P5023
    iseq $I5002, $S5001, "NULL"
    box $P5112, $I5002
    set $P5111, $P5112
    if $I5002 goto unless1418_end4132 
.annotate 'line', 1784
.annotate 'line', 1785
    "&import_HOW_exports"($P101)
    find_dynamic_lex $P5037, "%*COMPILING"
    unless_null $P5037, fallback4140
    nqp_get_sc_object $P5040, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5039, $P5040
    set $P5038, $P5039["%COMPILING"]
    unless_null $P5038, fallback4141
    nqp_get_sc_object $P5042, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5041, $P5042
    new $P5043, 'Hash'
    set $P5041["%COMPILING"], $P5043
    set $P5038, $P5043
  fallback4141:
    unless_null $P5038, vivi_14214142
    die "Contextual %*COMPILING not found"
    box $P5044, "Contextual %*COMPILING not found"
    set $P5038, $P5044
  vivi_14214142:
    set $P5037, $P5038
  fallback4140:
    set $P5036, $P5037["%?OPTIONS"]
    unless_null $P5036, fallback4143
    nqp_get_sc_object $P5045, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5036, $P5045
  fallback4143:
    set $P5035, $P5036["old-regex-lib"]
    unless_null $P5035, fallback4144
    nqp_get_sc_object $P5046, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5035, $P5046
  fallback4144:
    unless $P5035 goto if1420_end4139 
.annotate 'line', 1786
.annotate 'line', 1787
    find_dynamic_lex $P5047, "$*W"
    unless_null $P5047, fallback4145
    nqp_get_sc_object $P5050, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5049, $P5050
    set $P5048, $P5049["$W"]
    unless_null $P5048, fallback4146
    nqp_get_sc_object $P5051, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5048, $P5051
  fallback4146:
    unless_null $P5048, vivi_14224147
    die "Contextual $*W not found"
    box $P5052, "Contextual $*W not found"
    set $P5048, $P5052
  vivi_14224147:
    set $P5047, $P5048
  fallback4145:
    find_dynamic_lex $P5053, "$*GLOBALish"
    unless_null $P5053, fallback4148
    nqp_get_sc_object $P5056, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5055, $P5056
    set $P5054, $P5055["$GLOBALish"]
    unless_null $P5054, fallback4149
    nqp_get_sc_object $P5057, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5054, $P5057
  fallback4149:
    unless_null $P5054, vivi_14234150
    die "Contextual $*GLOBALish not found"
    box $P5058, "Contextual $*GLOBALish not found"
    set $P5054, $P5058
  vivi_14234150:
    set $P5053, $P5054
  fallback4148:
    $P5059 = $P5047."load_module"("NQPRegex", $P5053)
  if1420_end4139:
    find_dynamic_lex $P5062, "%*COMPILING"
    unless_null $P5062, fallback4153
    nqp_get_sc_object $P5065, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5064, $P5065
    set $P5063, $P5064["%COMPILING"]
    unless_null $P5063, fallback4154
    nqp_get_sc_object $P5067, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5066, $P5067
    new $P5068, 'Hash'
    set $P5066["%COMPILING"], $P5068
    set $P5063, $P5068
  fallback4154:
    unless_null $P5063, vivi_14254155
    die "Contextual %*COMPILING not found"
    box $P5069, "Contextual %*COMPILING not found"
    set $P5063, $P5069
  vivi_14254155:
    set $P5062, $P5063
  fallback4153:
    set $P5061, $P5062["%?OPTIONS"]
    unless_null $P5061, fallback4156
    nqp_get_sc_object $P5070, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5061, $P5070
  fallback4156:
    set $P5060, $P5061["no-regex-lib"]
    unless_null $P5060, fallback4157
    nqp_get_sc_object $P5071, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5060, $P5071
  fallback4157:
    set $P5110, $P5060
    if $P5060 goto unless1424_end4152 
.annotate 'line', 1789
.annotate 'line', 1790
    find_dynamic_lex $P5072, "$*W"
    unless_null $P5072, fallback4158
    nqp_get_sc_object $P5075, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5074, $P5075
    set $P5073, $P5074["$W"]
    unless_null $P5073, fallback4159
    nqp_get_sc_object $P5076, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5073, $P5076
  fallback4159:
    unless_null $P5073, vivi_14264160
    die "Contextual $*W not found"
    box $P5077, "Contextual $*W not found"
    set $P5073, $P5077
  vivi_14264160:
    set $P5072, $P5073
  fallback4158:
    find_dynamic_lex $P5078, "$*GLOBALish"
    unless_null $P5078, fallback4161
    nqp_get_sc_object $P5081, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5080, $P5081
    set $P5079, $P5080["$GLOBALish"]
    unless_null $P5079, fallback4162
    nqp_get_sc_object $P5082, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5079, $P5082
  fallback4162:
    unless_null $P5079, vivi_14274163
    die "Contextual $*GLOBALish not found"
    box $P5083, "Contextual $*GLOBALish not found"
    set $P5079, $P5083
  vivi_14274163:
    set $P5078, $P5079
  fallback4161:
    $P5072."load_module"("QRegex", $P5078)
    find_dynamic_lex $P5086, "%*COMPILING"
    unless_null $P5086, fallback4166
    nqp_get_sc_object $P5089, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5088, $P5089
    set $P5087, $P5088["%COMPILING"]
    unless_null $P5087, fallback4167
    nqp_get_sc_object $P5091, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5090, $P5091
    new $P5092, 'Hash'
    set $P5090["%COMPILING"], $P5092
    set $P5087, $P5092
  fallback4167:
    unless_null $P5087, vivi_14294168
    die "Contextual %*COMPILING not found"
    box $P5093, "Contextual %*COMPILING not found"
    set $P5087, $P5093
  vivi_14294168:
    set $P5086, $P5087
  fallback4166:
    set $P5085, $P5086["%?OPTIONS"]
    unless_null $P5085, fallback4169
    nqp_get_sc_object $P5094, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5085, $P5094
  fallback4169:
    set $P5084, $P5085["old-regex-lib"]
    unless_null $P5084, fallback4170
    nqp_get_sc_object $P5095, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5084, $P5095
  fallback4170:
    set $P5109, $P5084
    if $P5084 goto unless1428_end4165 
.annotate 'line', 1791
.annotate 'line', 1792
    find_dynamic_lex $P5096, "$*W"
    unless_null $P5096, fallback4171
    nqp_get_sc_object $P5099, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5098, $P5099
    set $P5097, $P5098["$W"]
    unless_null $P5097, fallback4172
    nqp_get_sc_object $P5100, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5097, $P5100
  fallback4172:
    unless_null $P5097, vivi_14304173
    die "Contextual $*W not found"
    box $P5101, "Contextual $*W not found"
    set $P5097, $P5101
  vivi_14304173:
    set $P5096, $P5097
  fallback4171:
    find_dynamic_lex $P5102, "$*GLOBALish"
    unless_null $P5102, fallback4174
    nqp_get_sc_object $P5105, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5104, $P5105
    set $P5103, $P5104["$GLOBALish"]
    unless_null $P5103, fallback4175
    nqp_get_sc_object $P5106, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5103, $P5106
  fallback4175:
    unless_null $P5103, vivi_14314176
    die "Contextual $*GLOBALish not found"
    box $P5107, "Contextual $*GLOBALish not found"
    set $P5103, $P5107
  vivi_14314176:
    set $P5102, $P5103
  fallback4174:
    $P5108 = $P5096."load_module"("NQPP6QRegex", $P5102)
    set $P5109, $P5108
  unless1428_end4165:
    set $P5110, $P5109
  unless1424_end4152:
    set $P5111, $P5110
  unless1418_end4132:
    .return ($P5111) 
.end
.HLL "nqp"
.namespace []
.sub "you_are_here" :subid("cuid_257_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1809
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1810
    nqp_decontainerize $P5001, _lex_param_0
    $P5002 = $P5001."CTXSAVE"()
    $P5003 = _lex_param_1."!make"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<use>" :subid("cuid_258_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1815
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$module", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
.annotate 'line', 1816
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback4180
    nqp_get_sc_object $P5005, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback4181
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5003, $P5006
  fallback4181:
    unless_null $P5003, vivi_14334182
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_14334182:
    set $P5002, $P5003
  fallback4180:
    unless_null _lex_param_1, fallback4183
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5009
  fallback4183:
    set $P5008, _lex_param_1["name"]
    unless_null $P5008, fallback4184
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5008, $P5010
  fallback4184:
    set $S5001, $P5008
    find_dynamic_lex $P5011, "$*GLOBALish"
    unless_null $P5011, fallback4185
    nqp_get_sc_object $P5014, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["$GLOBALish"]
    unless_null $P5012, fallback4186
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5012, $P5015
  fallback4186:
    unless_null $P5012, vivi_14344187
    die "Contextual $*GLOBALish not found"
    box $P5016, "Contextual $*GLOBALish not found"
    set $P5012, $P5016
  vivi_14344187:
    set $P5011, $P5012
  fallback4185:
    $P5017 = $P5002."load_module"($S5001, $P5011)
    set $P101, $P5017
    defined $I5001, $P101
    unless $I5001 goto if1435_end4189 
.annotate 'line', 1817
    exists $I5002, $P101["EXPORT"]
    set $I5004, $I5002
    unless $I5002 goto if1437_end4193 
    set $P5019, $P101["EXPORT"]
    unless_null $P5019, fallback4194
    nqp_get_sc_object $P5020, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5019, $P5020
  fallback4194:
    get_who $P5018, $P5019
    exists $I5003, $P5018["DEFAULT"]
    set $I5004, $I5003
  if1437_end4193:
    unless $I5004 goto if1436_end4191 
.annotate 'line', 1818
    find_dynamic_lex $P5021, "$*W"
    unless_null $P5021, fallback4195
    nqp_get_sc_object $P5024, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5023, $P5024
    set $P5022, $P5023["$W"]
    unless_null $P5022, fallback4196
    nqp_get_sc_object $P5025, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5022, $P5025
  fallback4196:
    unless_null $P5022, vivi_14384197
    die "Contextual $*W not found"
    box $P5026, "Contextual $*W not found"
    set $P5022, $P5026
  vivi_14384197:
    set $P5021, $P5022
  fallback4195:
    set $P5030, $P101["EXPORT"]
    unless_null $P5030, fallback4198
    nqp_get_sc_object $P5031, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5030, $P5031
  fallback4198:
    get_who $P5029, $P5030
    set $P5028, $P5029["DEFAULT"]
    unless_null $P5028, fallback4199
    nqp_get_sc_object $P5032, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5028, $P5032
  fallback4199:
    get_who $P5027, $P5028
    $P5033 = $P5021."import"($P5027)
  if1436_end4191:
.annotate 'line', 1821
    $P5034 = "&import_HOW_exports"($P101)
  if1435_end4189:
.annotate 'line', 1823
    nqp_get_sc_object $P5038, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["Stmts"]
    unless_null $P5035, fallback4200
    nqp_get_sc_object $P5039, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5035, $P5039
  fallback4200:
    $P5040 = $P5035."new"()
    $P5041 = _lex_param_1."!make"($P5040)
    .return ($P5041) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<if>" :subid("cuid_259_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1826
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5030 = 'cuid_447_1358115338.889' 
    capture_lex $P5030 
    .lex "$count", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
    unless_null _lex_param_1, fallback4201
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5004
  fallback4201:
    set $P5003, _lex_param_1["xblock"]
    unless_null $P5003, fallback4202
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5003, $P5005
  fallback4202:
    set $N5002, $P5003
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5006, $N5001
    set $P101, $P5006
.annotate 'line', 1828
    unless_null _lex_param_1, fallback4203
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5009
  fallback4203:
    set $P5008, _lex_param_1["xblock"]
    unless_null $P5008, fallback4204
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5008, $P5010
  fallback4204:
    set $I5001, $P101
    set $P5007, $P5008[$I5001]
    unless_null $P5007, fallback4205
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5007, $P5011
  fallback4205:
    $P5012 = $P5007."ast"()
    $P5013 = "&xblock_immediate"($P5012)
    set $P102, $P5013
    unless_null _lex_param_1, fallback4208
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5015
  fallback4208:
    set $P5014, _lex_param_1["else"]
    unless_null $P5014, fallback4209
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5014, $P5016
  fallback4209:
    unless $P5014 goto if1439_end4207 
.annotate 'line', 1829
.annotate 'line', 1830
    unless_null _lex_param_1, fallback4210
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5019
  fallback4210:
    set $P5018, _lex_param_1["else"]
    unless_null $P5018, fallback4211
    nqp_get_sc_object $P5020, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5018, $P5020
  fallback4211:
    set $P5017, $P5018[0]
    unless_null $P5017, fallback4212
    nqp_get_sc_object $P5021, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5017, $P5021
  fallback4212:
    $P5022 = $P5017."ast"()
    $P5023 = "&block_immediate"($P5022)
    $P5024 = $P102."push"($P5023)
  if1439_end4207:
  while1440_test4213:
    set $N5004, $P101
    set $N5005, 0
    isgt $I5002, $N5004, $N5005
    box $P5028, $I5002
    set $P5027, $P5028
    unless $I5002 goto while1440_done4217 
  while1440_redo4215:
    .const 'Sub' $P5025 = 'cuid_447_1358115338.889' 
    capture_lex $P5025
    $P5026 = $P5025()
    set $P5027, $P5026
    goto while1440_test4213 
  while1440_done4217:
.annotate 'line', 1839
    $P5029 = _lex_param_1."!make"($P102)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_447_1358115338.889") :anon :lex :outer("cuid_259_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1833
    .lex "$else", $P101 
    .local pmc tmp_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    find_lex $P5002, "$count"
    set tmp_1, $P5002
    set $N5002, tmp_1
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$count", $P5003
    find_lex $P5002, "$past"
    set $P101, $P5002
.annotate 'line', 1836
    find_lex $P5005, "$/"
    unless_null $P5005, fallback4218
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5005, $P5006
  fallback4218:
    set $P5004, $P5005["xblock"]
    unless_null $P5004, fallback4219
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5007
  fallback4219:
    find_lex $P5008, "$count"
    set $I5001, $P5008
    set $P5003, $P5004[$I5001]
    unless_null $P5003, fallback4220
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5003, $P5009
  fallback4220:
    $P5010 = $P5003."ast"()
    $P5011 = "&xblock_immediate"($P5010)
    store_lex "$past", $P5011
.annotate 'line', 1837
    find_lex $P5012, "$past"
    $P5013 = $P5012."push"($P101)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<unless>" :subid("cuid_260_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1842
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
.annotate 'line', 1843
    unless_null _lex_param_1, fallback4221
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5003
  fallback4221:
    set $P5002, _lex_param_1["xblock"]
    unless_null $P5002, fallback4222
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5004
  fallback4222:
    $P5005 = $P5002."ast"()
    $P5006 = "&xblock_immediate"($P5005)
    set $P101, $P5006
.annotate 'line', 1844
    $P101."op"("unless")
.annotate 'line', 1845
    $P5007 = _lex_param_1."!make"($P101)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<while>" :subid("cuid_261_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1848
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
.annotate 'line', 1849
    unless_null _lex_param_1, fallback4223
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5003
  fallback4223:
    set $P5002, _lex_param_1["xblock"]
    unless_null $P5002, fallback4224
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5004
  fallback4224:
    $P5005 = $P5002."ast"()
    $P5006 = "&xblock_immediate"($P5005)
    set $P101, $P5006
.annotate 'line', 1850
    unless_null _lex_param_1, fallback4225
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5008
  fallback4225:
    set $P5007, _lex_param_1["sym"]
    unless_null $P5007, fallback4226
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5007, $P5009
  fallback4226:
    set $S5001, $P5007
    $P101."op"($S5001)
    find_dynamic_lex $P5010, "$*CONTROL_USED"
    unless_null $P5010, fallback4229
    nqp_get_sc_object $P5013, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5012, $P5013
    set $P5011, $P5012["$CONTROL_USED"]
    unless_null $P5011, fallback4230
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5011, $P5014
  fallback4230:
    unless_null $P5011, vivi_14424231
    die "Contextual $*CONTROL_USED not found"
    box $P5015, "Contextual $*CONTROL_USED not found"
    set $P5011, $P5015
  vivi_14424231:
    set $P5010, $P5011
  fallback4229:
    if $P5010 goto unless1441_end4228 
.annotate 'line', 1851
.annotate 'line', 1852
    nqp_get_sc_object $P5019, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["IVal"]
    unless_null $P5016, fallback4232
    nqp_get_sc_object $P5020, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5016, $P5020
  fallback4232:
    $P5021 = $P5016."new"(1 :named("value"), "nohandler" :named("named"))
    $P5022 = $P101."push"($P5021)
  unless1441_end4228:
.annotate 'line', 1854
    $P5023 = _lex_param_1."!make"($P101)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<repeat>" :subid("cuid_262_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1857
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$op", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
    unless_null _lex_param_1, fallback4233
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5004
  fallback4233:
    set $P5003, _lex_param_1["wu"]
    unless_null $P5003, fallback4234
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5003, $P5005
  fallback4234:
    set $S5002, $P5003
    concat $S5001, "repeat_", $S5002
    box $P5006, $S5001
    set $P101, $P5006
    unless_null _lex_param_1, fallback4237
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5008
  fallback4237:
    set $P5007, _lex_param_1["xblock"]
    unless_null $P5007, fallback4238
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5007, $P5009
  fallback4238:
    unless $P5007 goto if1443_else4235 
.annotate 'line', 1860
.annotate 'line', 1861
    unless_null _lex_param_1, fallback4239
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5011
  fallback4239:
    set $P5010, _lex_param_1["xblock"]
    unless_null $P5010, fallback4240
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5010, $P5012
  fallback4240:
    $P5013 = $P5010."ast"()
    $P5014 = "&xblock_immediate"($P5013)
    set $P102, $P5014
.annotate 'line', 1862
    $P5015 = $P102."op"($P101)
    goto if1443_end4236
  if1443_else4235:
.annotate 'line', 1864
.annotate 'line', 1865
    nqp_get_sc_object $P5019, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Op"]
    unless_null $P5016, fallback4241
    nqp_get_sc_object $P5020, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5016, $P5020
  fallback4241:
    unless_null _lex_param_1, fallback4242
    nqp_get_sc_object $P5022, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5022
  fallback4242:
    set $P5021, _lex_param_1["EXPR"]
    unless_null $P5021, fallback4243
    nqp_get_sc_object $P5023, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5021, $P5023
  fallback4243:
    $P5024 = $P5021."ast"()
    unless_null _lex_param_1, fallback4244
    nqp_get_sc_object $P5026, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5026
  fallback4244:
    set $P5025, _lex_param_1["pblock"]
    unless_null $P5025, fallback4245
    nqp_get_sc_object $P5027, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5025, $P5027
  fallback4245:
    $P5028 = $P5025."ast"()
    $P5029 = "&block_immediate"($P5028)
    $P5030 = $P5016."new"($P5024, $P5029, $P101 :named("op"), _lex_param_1 :named("node"))
    set $P102, $P5030
  if1443_end4236:
    find_dynamic_lex $P5031, "$*CONTROL_USED"
    unless_null $P5031, fallback4248
    nqp_get_sc_object $P5034, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["$CONTROL_USED"]
    unless_null $P5032, fallback4249
    nqp_get_sc_object $P5035, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5032, $P5035
  fallback4249:
    unless_null $P5032, vivi_14454250
    die "Contextual $*CONTROL_USED not found"
    box $P5036, "Contextual $*CONTROL_USED not found"
    set $P5032, $P5036
  vivi_14454250:
    set $P5031, $P5032
  fallback4248:
    if $P5031 goto unless1444_end4247 
.annotate 'line', 1868
.annotate 'line', 1869
    nqp_get_sc_object $P5040, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5039, $P5040, "QAST"
    get_who $P5038, $P5039
    set $P5037, $P5038["IVal"]
    unless_null $P5037, fallback4251
    nqp_get_sc_object $P5041, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5037, $P5041
  fallback4251:
    $P5042 = $P5037."new"(1 :named("value"), "nohandler" :named("named"))
    $P5043 = $P102."push"($P5042)
  unless1444_end4247:
.annotate 'line', 1871
    $P5044 = _lex_param_1."!make"($P102)
    .return ($P5044) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<for>" :subid("cuid_263_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1874
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "$block", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
.annotate 'line', 1875
    unless_null _lex_param_1, fallback4252
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5004
  fallback4252:
    set $P5003, _lex_param_1["xblock"]
    unless_null $P5003, fallback4253
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5003, $P5005
  fallback4253:
    $P5006 = $P5003."ast"()
    set $P101, $P5006
.annotate 'line', 1876
    $P101."op"("for")
    set $P5007, $P101[1]
    unless_null $P5007, fallback4254
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5007, $P5008
  fallback4254:
    set $P102, $P5007
.annotate 'line', 1878
    $P5009 = $P102."arity"()
    if $P5009 goto unless1446_end4256 
.annotate 'line', 1879
    set $P5010, $P102[0]
    unless_null $P5010, fallback4257
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5010, $P5011
  fallback4257:
    nqp_get_sc_object $P5015, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Var"]
    unless_null $P5012, fallback4258
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5012, $P5016
  fallback4258:
    $P5017 = $P5012."new"("$_" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5010."push"($P5017)
.annotate 'line', 1880
    $P102."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1881
    $P5018 = $P102."arity"(1)
  unless1446_end4256:
.annotate 'line', 1883
    $P102."blocktype"("immediate")
    find_dynamic_lex $P5019, "$*CONTROL_USED"
    unless_null $P5019, fallback4261
    nqp_get_sc_object $P5022, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["$CONTROL_USED"]
    unless_null $P5020, fallback4262
    nqp_get_sc_object $P5023, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5020, $P5023
  fallback4262:
    unless_null $P5020, vivi_14484263
    die "Contextual $*CONTROL_USED not found"
    box $P5024, "Contextual $*CONTROL_USED not found"
    set $P5020, $P5024
  vivi_14484263:
    set $P5019, $P5020
  fallback4261:
    if $P5019 goto unless1447_end4260 
.annotate 'line', 1884
.annotate 'line', 1885
    nqp_get_sc_object $P5028, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["IVal"]
    unless_null $P5025, fallback4264
    nqp_get_sc_object $P5029, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5025, $P5029
  fallback4264:
    $P5030 = $P5025."new"(1 :named("value"), "nohandler" :named("named"))
    $P5031 = $P101."push"($P5030)
  unless1447_end4260:
.annotate 'line', 1887
    $P5032 = _lex_param_1."!make"($P101)
    .return ($P5032) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CATCH>" :subid("cuid_264_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1890
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
.annotate 'line', 1891
    unless_null _lex_param_1, fallback4265
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5003
  fallback4265:
    set $P5002, _lex_param_1["block"]
    unless_null $P5002, fallback4266
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5004
  fallback4266:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 1892
    "&set_block_handler"(_lex_param_1, $P101, "CATCH")
.annotate 'line', 1893
    $P5006 = "&default_for"("$")
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CONTROL>" :subid("cuid_265_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1896
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
.annotate 'line', 1897
    unless_null _lex_param_1, fallback4267
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5003
  fallback4267:
    set $P5002, _lex_param_1["block"]
    unless_null $P5002, fallback4268
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5004
  fallback4268:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 1898
    "&set_block_handler"(_lex_param_1, $P101, "CONTROL")
.annotate 'line', 1899
    $P5006 = "&default_for"("$")
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<BEGIN>" :subid("cuid_266_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1933
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1934
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback4269
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback4270
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5005
  fallback4270:
    unless_null $P5002, vivi_14494271
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_14494271:
    set $P5001, $P5002
  fallback4269:
    unless_null _lex_param_1, fallback4272
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5008
  fallback4272:
    set $P5007, _lex_param_1["blorst"]
    unless_null $P5007, fallback4273
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5007, $P5009
  fallback4273:
    $P5010 = $P5007."ast"()
    $P5011 = $P5001."run_begin_block"($P5010)
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<INIT>" :subid("cuid_267_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1937
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1938
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback4274
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback4275
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5005
  fallback4275:
    unless_null $P5002, vivi_14504276
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_14504276:
    set $P5001, $P5002
  fallback4274:
    $P5007 = $P5001."cur_lexpad"()
    unless_null _lex_param_1, fallback4277
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5009
  fallback4277:
    set $P5008, _lex_param_1["blorst"]
    unless_null $P5008, fallback4278
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5008, $P5010
  fallback4278:
    $P5011 = $P5008."ast"()
    $P5007."push"($P5011)
.annotate 'line', 1939
    nqp_get_sc_object $P5015, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Stmts"]
    unless_null $P5012, fallback4279
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5012, $P5016
  fallback4279:
    $P5017 = $P5012."new"()
    $P5018 = _lex_param_1."!make"($P5017)
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<try>" :subid("cuid_268_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1942
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_4280
    .lex "RETURN", $P102
.annotate 'line', 1943
    unless_null _lex_param_1, fallback4282
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5003
  fallback4282:
    set $P5002, _lex_param_1["blorst"]
    unless_null $P5002, fallback4283
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5004
  fallback4283:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
    nqp_get_sc_object $P5009, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Block"]
    unless_null $P5006, fallback4286
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5006, $P5010
  fallback4286:
    type_check $I5001, $P101, $P5006
    unless $I5001 goto if1451_end4285 
.annotate 'line', 1944
    set $P5011, $P101["handlers"]
    unless_null $P5011, fallback4291
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5011, $P5012
  fallback4291:
    set $P5015, $P5011
    unless $P5011 goto if1453_end4290 
    set $P5013, $P101["handlers"]
    unless_null $P5013, fallback4292
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5013, $P5014
  fallback4292:
    exists $I5002, $P5013["CATCH"]
    box $P5016, $I5002
    set $P5015, $P5016
  if1453_end4290:
    unless $P5015 goto if1452_else4287 
.annotate 'line', 1945
.annotate 'line', 1946
    _lex_param_1."!make"($P101)
    find_lex $P5017, "RETURN"
    $P5018 = $P5017(1)
    set $P5020, $P5018
    goto if1452_end4288
  if1452_else4287:
.annotate 'line', 1949
.annotate 'line', 1950
    $P5019 = $P101."blocktype"("immediate")
    set $P5020, $P5019
  if1452_end4288:
  if1451_end4285:
.annotate 'line', 1953
    nqp_get_sc_object $P5024, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["Op"]
    unless_null $P5021, fallback4293
    nqp_get_sc_object $P5025, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5021, $P5025
  fallback4293:
.annotate 'line', 1957
    nqp_get_sc_object $P5029, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Stmts"]
    unless_null $P5026, fallback4294
    nqp_get_sc_object $P5030, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5026, $P5030
  fallback4294:
.annotate 'line', 1958
    nqp_get_sc_object $P5034, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5033, $P5034, "QAST"
    get_who $P5032, $P5033
    set $P5031, $P5032["Op"]
    unless_null $P5031, fallback4295
    nqp_get_sc_object $P5035, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5031, $P5035
  fallback4295:
.annotate 'line', 1960
    nqp_get_sc_object $P5039, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Op"]
    unless_null $P5036, fallback4296
    nqp_get_sc_object $P5040, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5036, $P5040
  fallback4296:
    $P5041 = $P5036."new"("exception" :named("op"))
.annotate 'line', 1961
    nqp_get_sc_object $P5045, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["SVal"]
    unless_null $P5042, fallback4297
    nqp_get_sc_object $P5046, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5042, $P5046
  fallback4297:
    $P5047 = $P5042."new"("handled" :named("value"))
.annotate 'line', 1962
    nqp_get_sc_object $P5051, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["IVal"]
    unless_null $P5048, fallback4298
    nqp_get_sc_object $P5052, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5048, $P5052
  fallback4298:
    $P5053 = $P5048."new"(1 :named("value"))
    $P5054 = $P5031."new"($P5041, $P5047, $P5053, "bindkey_i" :named("op"))
.annotate 'line', 1964
    $P5055 = "&default_for"("$")
    $P5056 = $P5026."new"($P5054, $P5055)
    $P5057 = $P5021."new"($P101, "CATCH", $P5056, "handle" :named("op"))
    $P5058 = _lex_param_1."!make"($P5057)
    goto lexotic_4281
  lexotic_4280:
    .get_results ($P5058)
  lexotic_4281:
    .return ($P5058) 
.end
.HLL "nqp"
.namespace []
.sub "blorst" :subid("cuid_269_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1968
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1969
    unless_null _lex_param_1, fallback4301
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback4301:
    set $P5001, _lex_param_1["block"]
    unless_null $P5001, fallback4302
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback4302:
    unless $P5001 goto if1454_else4299 
.annotate 'line', 1970
    unless_null _lex_param_1, fallback4303
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5005
  fallback4303:
    set $P5004, _lex_param_1["block"]
    unless_null $P5004, fallback4304
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5006
  fallback4304:
    $P5007 = $P5004."ast"()
    $P5008 = "&block_immediate"($P5007)
    set $P5013, $P5008
    goto if1454_end4300
  if1454_else4299:
.annotate 'line', 1971
    unless_null _lex_param_1, fallback4305
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5010
  fallback4305:
    set $P5009, _lex_param_1["statement"]
    unless_null $P5009, fallback4306
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5009, $P5011
  fallback4306:
    $P5012 = $P5009."ast"()
    set $P5013, $P5012
  if1454_end4300:
    $P5014 = _lex_param_1."!make"($P5013)
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<if>" :subid("cuid_270_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1976
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4307
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback4307:
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4308
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback4308:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<unless>" :subid("cuid_271_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1977
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4309
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback4309:
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4310
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback4310:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<while>" :subid("cuid_272_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1979
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4311
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback4311:
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4312
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback4312:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<until>" :subid("cuid_273_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1980
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4313
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback4313:
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4314
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback4314:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<fatarrow>" :subid("cuid_274_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1984
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4315
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback4315:
    set $P5001, _lex_param_1["fatarrow"]
    unless_null $P5001, fallback4316
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback4316:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<colonpair>" :subid("cuid_275_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1985
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4317
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback4317:
    set $P5001, _lex_param_1["colonpair"]
    unless_null $P5001, fallback4318
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback4318:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<variable>" :subid("cuid_276_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1986
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4319
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback4319:
    set $P5001, _lex_param_1["variable"]
    unless_null $P5001, fallback4320
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback4320:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<package_declarator>" :subid("cuid_277_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1987
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4321
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback4321:
    set $P5001, _lex_param_1["package_declarator"]
    unless_null $P5001, fallback4322
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback4322:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<scope_declarator>" :subid("cuid_278_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1988
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4323
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback4323:
    set $P5001, _lex_param_1["scope_declarator"]
    unless_null $P5001, fallback4324
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback4324:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<routine_declarator>" :subid("cuid_279_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1989
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4325
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback4325:
    set $P5001, _lex_param_1["routine_declarator"]
    unless_null $P5001, fallback4326
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback4326:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<regex_declarator>" :subid("cuid_280_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1990
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4327
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback4327:
    set $P5001, _lex_param_1["regex_declarator"]
    unless_null $P5001, fallback4328
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback4328:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<statement_prefix>" :subid("cuid_281_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1991
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4329
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback4329:
    set $P5001, _lex_param_1["statement_prefix"]
    unless_null $P5001, fallback4330
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback4330:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<lambda>" :subid("cuid_282_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1992
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1993
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback4331
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5005
  fallback4331:
    unless_null _lex_param_1, fallback4332
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5007
  fallback4332:
    set $P5006, _lex_param_1["pblock"]
    unless_null $P5006, fallback4333
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5006, $P5008
  fallback4333:
    $P5009 = $P5006."ast"()
    $P5010 = $P5001."new"($P5009, "takeclosure" :named("op"))
    $P5011 = _lex_param_1."!make"($P5010)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "fatarrow" :subid("cuid_283_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1996
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
.annotate 'line', 1997
    unless_null _lex_param_1, fallback4334
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5003
  fallback4334:
    set $P5002, _lex_param_1["val"]
    unless_null $P5002, fallback4335
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5004
  fallback4335:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 1998
    unless_null _lex_param_1, fallback4336
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5007
  fallback4336:
    set $P5006, _lex_param_1["key"]
    unless_null $P5006, fallback4337
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5006, $P5008
  fallback4337:
    $P5009 = $P5006."Str"()
    $P101."named"($P5009)
.annotate 'line', 1999
    $P5010 = _lex_param_1."!make"($P101)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "colonpair" :subid("cuid_284_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2002
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5021 = 'cuid_448_1358115338.889' 
    capture_lex $P5021 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4340
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback4340:
    set $P5001, _lex_param_1["variable"]
    unless_null $P5001, fallback4341
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback4341:
    unless $P5001 goto if1455_else4338 
.annotate 'line', 2003
.annotate 'line', 2004
    unless_null _lex_param_1, fallback4342
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5005
  fallback4342:
    set $P5004, _lex_param_1["variable"]
    unless_null $P5004, fallback4343
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5006
  fallback4343:
    $P5007 = $P5004."ast"()
    unless_null _lex_param_1, fallback4344
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5010
  fallback4344:
    set $P5009, _lex_param_1["variable"]
    unless_null $P5009, fallback4345
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5009, $P5011
  fallback4345:
    set $P5008, $P5009["desigilname"]
    unless_null $P5008, fallback4346
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5008, $P5012
  fallback4346:
    set $S5001, $P5008
    $P5007."named"($S5001)
.annotate 'line', 2005
    unless_null _lex_param_1, fallback4347
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5014
  fallback4347:
    set $P5013, _lex_param_1["variable"]
    unless_null $P5013, fallback4348
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5013, $P5015
  fallback4348:
    $P5016 = $P5013."ast"()
    $P5017 = _lex_param_1."!make"($P5016)
    set $P5020, $P5017
    goto if1455_end4339
  if1455_else4338:
    .const 'Sub' $P5018 = 'cuid_448_1358115338.889' 
    capture_lex $P5018
    $P5019 = $P5018()
    set $P5020, $P5019
  if1455_end4339:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_448_1358115338.889") :anon :lex :outer("cuid_284_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2006
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    find_lex $P5003, "$/"
    unless_null $P5003, fallback4351
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5003, $P5004
  fallback4351:
    set $P5002, $P5003["circumfix"]
    unless_null $P5002, fallback4352
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5005
  fallback4352:
    unless $P5002 goto if1456_else4349 
.annotate 'line', 2008
    find_lex $P5008, "$/"
    unless_null $P5008, fallback4353
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5008, $P5009
  fallback4353:
    set $P5007, $P5008["circumfix"]
    unless_null $P5007, fallback4354
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5007, $P5010
  fallback4354:
    set $P5006, $P5007[0]
    unless_null $P5006, fallback4355
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5006, $P5011
  fallback4355:
    $P5012 = $P5006."ast"()
    set $P5023, $P5012
    goto if1456_end4350
  if1456_else4349:
.annotate 'line', 2009
    nqp_get_sc_object $P5016, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["IVal"]
    unless_null $P5013, fallback4356
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5013, $P5017
  fallback4356:
    find_lex $P5019, "$/"
    unless_null $P5019, fallback4357
    nqp_get_sc_object $P5020, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5019, $P5020
  fallback4357:
    set $P5018, $P5019["not"]
    unless_null $P5018, fallback4358
    nqp_get_sc_object $P5021, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5018, $P5021
  fallback4358:
    isfalse $I5001, $P5018
    $P5022 = $P5013."new"($I5001 :named("value"))
    set $P5023, $P5022
  if1456_end4350:
    set $P101, $P5023
.annotate 'line', 2010
    find_lex $P5025, "$/"
    unless_null $P5025, fallback4359
    nqp_get_sc_object $P5026, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5025, $P5026
  fallback4359:
    set $P5024, $P5025["identifier"]
    unless_null $P5024, fallback4360
    nqp_get_sc_object $P5027, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5024, $P5027
  fallback4360:
    set $S5001, $P5024
    $P101."named"($S5001)
.annotate 'line', 2011
    find_dynamic_lex $P5028, "$/"
    $P5029 = $P5028."!make"($P101)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "variable" :subid("cuid_285_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2015
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5020 = 'cuid_450_1358115338.889' 
    capture_lex $P5020 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    unless_null _lex_param_1, fallback4363
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5003
  fallback4363:
    set $P5002, _lex_param_1["postcircumfix"]
    unless_null $P5002, fallback4364
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5004
  fallback4364:
    unless $P5002 goto if1457_else4361 
.annotate 'line', 2017
.annotate 'line', 2018
    unless_null _lex_param_1, fallback4365
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5006
  fallback4365:
    set $P5005, _lex_param_1["postcircumfix"]
    unless_null $P5005, fallback4366
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5005, $P5007
  fallback4366:
    $P5008 = $P5005."ast"()
    set $P101, $P5008
.annotate 'line', 2019
    nqp_get_sc_object $P5012, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["VarWithFallback"]
    unless_null $P5009, fallback4367
    nqp_get_sc_object $P5013, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5009, $P5013
  fallback4367:
.annotate 'line', 2020
    $P5014 = "&default_for"("$")
    $P5015 = $P5009."new"("$/" :named("name"), "lexical" :named("scope"), $P5014 :named("fallback"))
    $P5016 = $P101."unshift"($P5015)
    goto if1457_end4362
  if1457_else4361:
    .const 'Sub' $P5017 = 'cuid_450_1358115338.889' 
    capture_lex $P5017
    $P5018 = $P5017()
  if1457_end4362:
.annotate 'line', 2095
    $P5019 = _lex_param_1."!make"($P101)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_450_1358115338.889") :anon :lex :outer("cuid_285_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2023
    .const 'Sub' $P5058 = 'cuid_449_1358115338.889' 
    capture_lex $P5058 
    .const 'Sub' $P5058 = 'cuid_453_1358115338.889' 
    capture_lex $P5058 
    .const 'Sub' $P5058 = 'cuid_454_1358115338.889' 
    capture_lex $P5058 
    .lex "@name", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
.annotate 'line', 2024
    nqp_get_sc_object $P5005, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5004, $P5005, "NQP"
    get_who $P5003, $P5004
    set $P5002, $P5003["Compiler"]
    unless_null $P5002, fallback4368
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5006
  fallback4368:
    find_lex $P5007, "$/"
    set $S5001, $P5007
    $P5008 = $P5002."parse_name"($S5001)
    set $P101, $P5008
    set $N5001, $P101
    set $N5002, 1
    isgt $I5001, $N5001, $N5002
    unless $I5001 goto if1458_else4369 
.annotate 'line', 2025
    find_lex $P5010, "$/"
    unless_null $P5010, fallback4373
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5010, $P5011
  fallback4373:
    set $P5009, $P5010["twigil"]
    unless_null $P5009, fallback4374
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5009, $P5012
  fallback4374:
    unless $P5009 goto if1459_end4372 
.annotate 'line', 2026
.annotate 'line', 2027
    find_lex $P5013, "$/"
    $P5014 = $P5013."CURSOR"()
    $P5015 = $P5014."panic"("Twigil not allowed on multi-part name")
  if1459_end4372:
.annotate 'line', 2029
    find_lex $P5016, "$/"
    $P5017 = "&lexical_package_lookup"($P101, $P5016)
    store_lex "$past", $P5017
    set $P5057, $P5017
    goto if1458_end4370
  if1458_else4369:
    find_lex $P5020, "$/"
    unless_null $P5020, fallback4377
    nqp_get_sc_object $P5021, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5020, $P5021
  fallback4377:
    set $P5019, $P5020["twigil"]
    unless_null $P5019, fallback4378
    nqp_get_sc_object $P5022, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5019, $P5022
  fallback4378:
    set $P5018, $P5019[0]
    unless_null $P5018, fallback4379
    nqp_get_sc_object $P5023, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5018, $P5023
  fallback4379:
    set $S5002, $P5018
    iseq $I5002, $S5002, "*"
    unless $I5002 goto if1460_else4375 
    .const 'Sub' $P5024 = 'cuid_449_1358115338.889' 
    capture_lex $P5024
    $P5025 = $P5024()
    set $P5056, $P5025
    goto if1460_end4376
  if1460_else4375:
    find_lex $P5028, "$/"
    unless_null $P5028, fallback4390
    nqp_get_sc_object $P5029, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5028, $P5029
  fallback4390:
    set $P5027, $P5028["twigil"]
    unless_null $P5027, fallback4391
    nqp_get_sc_object $P5030, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5027, $P5030
  fallback4391:
    set $P5026, $P5027[0]
    unless_null $P5026, fallback4392
    nqp_get_sc_object $P5031, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5026, $P5031
  fallback4392:
    set $S5003, $P5026
    iseq $I5003, $S5003, "!"
    unless $I5003 goto if1461_else4388 
    .const 'Sub' $P5032 = 'cuid_453_1358115338.889' 
    capture_lex $P5032
    $P5033 = $P5032()
    set $P5055, $P5033
    goto if1461_end4389
  if1461_else4388:
.annotate 'line', 2080
    find_dynamic_lex $P5034, "$*W"
    unless_null $P5034, fallback4432
    nqp_get_sc_object $P5037, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5036, $P5037
    set $P5035, $P5036["$W"]
    unless_null $P5035, fallback4433
    nqp_get_sc_object $P5038, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5035, $P5038
  fallback4433:
    unless_null $P5035, vivi_14744434
    die "Contextual $*W not found"
    box $P5039, "Contextual $*W not found"
    set $P5035, $P5039
  vivi_14744434:
    set $P5034, $P5035
  fallback4432:
    set $P5040, $P101[0]
    unless_null $P5040, fallback4435
    nqp_get_sc_object $P5041, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5040, $P5041
  fallback4435:
    set $S5004, $P5040
    $P5042 = $P5034."is_package"($S5004)
    unless $P5042 goto if1473_else4430 
.annotate 'line', 2081
    find_lex $P5043, "$/"
    $P5044 = "&lexical_package_lookup"($P101, $P5043)
    store_lex "$past", $P5044
.annotate 'line', 2082
    find_lex $P5045, "$past"
    find_lex $P5047, "$/"
    unless_null $P5047, fallback4436
    nqp_get_sc_object $P5048, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5047, $P5048
  fallback4436:
    set $P5046, $P5047["sigil"]
    unless_null $P5046, fallback4437
    nqp_get_sc_object $P5049, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5046, $P5049
  fallback4437:
    $P5050 = "&default_for"($P5046)
    $P5051 = $P5045."fallback"($P5050)
    set $P5054, $P5051
    goto if1473_end4431
  if1473_else4430:
    .const 'Sub' $P5052 = 'cuid_454_1358115338.889' 
    capture_lex $P5052
    $P5053 = $P5052()
    set $P5054, $P5053
  if1473_end4431:
    set $P5055, $P5054
  if1461_end4389:
    set $P5056, $P5055
  if1460_end4376:
    set $P5057, $P5056
  if1458_end4370:
    .return ($P5057) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_449_1358115338.889") :anon :lex :outer("cuid_450_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2031
    .lex "$global_fallback", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
.annotate 'line', 2032
    nqp_get_sc_object $P5005, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Op"]
    unless_null $P5002, fallback4380
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5006
  fallback4380:
.annotate 'line', 2034
    new $P5007, 'ResizablePMCArray'
    box $P5008, "GLOBAL"
    push $P5007, $P5008
    find_lex $P5010, "$/"
    unless_null $P5010, fallback4381
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5010, $P5011
  fallback4381:
    set $P5009, $P5010["sigil"]
    unless_null $P5009, fallback4382
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5009, $P5012
  fallback4382:
    set $S5002, $P5009
    find_lex $P5014, "$/"
    unless_null $P5014, fallback4383
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5014, $P5015
  fallback4383:
    set $P5013, $P5014["desigilname"]
    unless_null $P5013, fallback4384
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5013, $P5016
  fallback4384:
    set $S5003, $P5013
    concat $S5001, $S5002, $S5003
    box $P5017, $S5001
    push $P5007, $P5017
    find_lex $P5018, "$/"
    $P5019 = "&lexical_package_lookup"($P5007, $P5018)
.annotate 'line', 2035
    nqp_get_sc_object $P5023, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback4385
    nqp_get_sc_object $P5024, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5020, $P5024
  fallback4385:
.annotate 'line', 2037
    nqp_get_sc_object $P5028, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["SVal"]
    unless_null $P5025, fallback4386
    nqp_get_sc_object $P5029, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5025, $P5029
  fallback4386:
    find_lex $P5030, "$/"
    set $S5006, $P5030
    concat $S5005, "Contextual ", $S5006
    concat $S5004, $S5005, " not found"
    $P5031 = $P5025."new"($S5004 :named("value"))
    $P5032 = $P5020."new"($P5031, "die_s" :named("op"))
    $P5033 = $P5002."new"($P5019, $P5032, "ifnull" :named("op"))
    set $P101, $P5033
.annotate 'line', 2039
    nqp_get_sc_object $P5037, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set $P5034, $P5035["VarWithFallback"]
    unless_null $P5034, fallback4387
    nqp_get_sc_object $P5038, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5034, $P5038
  fallback4387:
.annotate 'line', 2040
    find_lex $P5039, "@name"
    $P5040 = $P5039."pop"()
    set $S5007, $P5040
    $P5041 = $P5034."new"($S5007 :named("name"), "contextual" :named("scope"), $P101 :named("fallback"))
    store_lex "$past", $P5041
    .return ($P5041) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_453_1358115338.889") :anon :lex :outer("cuid_450_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2044
    .const 'Sub' $P5064 = 'cuid_452_1358115338.889' 
    capture_lex $P5064 
    .lex "$name", $P101 
    .lex "$ch", $P102 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
.annotate 'line', 2045
    find_lex $P5003, "@name"
    $P5004 = $P5003."pop"()
    set $S5001, $P5004
    box $P5005, $S5001
    set $P101, $P5005
    find_dynamic_lex $P5006, "$*PKGDECL"
    unless_null $P5006, fallback4395
    nqp_get_sc_object $P5009, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5008, $P5009
    set $P5007, $P5008["$PKGDECL"]
    unless_null $P5007, fallback4396
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5007, $P5010
  fallback4396:
    unless_null $P5007, vivi_14634397
    die "Contextual $*PKGDECL not found"
    box $P5011, "Contextual $*PKGDECL not found"
    set $P5007, $P5011
  vivi_14634397:
    set $P5006, $P5007
  fallback4395:
    set $S5002, $P5006
    iseq $I5001, $S5002, "role"
    unless $I5001 goto if1462_else4393 
.annotate 'line', 2047
.annotate 'line', 2048
    nqp_get_sc_object $P5015, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Var"]
    unless_null $P5012, fallback4398
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5012, $P5016
  fallback4398:
    $P5017 = $P5012."new"("$?CLASS" :named("name"), "lexical" :named("scope"))
    set $P102, $P5017
.annotate 'line', 2049
    find_dynamic_lex $P5018, "$*PACKAGE"
    unless_null $P5018, fallback4399
    nqp_get_sc_object $P5021, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["$PACKAGE"]
    unless_null $P5019, fallback4400
    nqp_get_sc_object $P5022, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5019, $P5022
  fallback4400:
    unless_null $P5019, vivi_14644401
    die "Contextual $*PACKAGE not found"
    box $P5023, "Contextual $*PACKAGE not found"
    set $P5019, $P5023
  vivi_14644401:
    set $P5018, $P5019
  fallback4399:
    $P5024 = $P102."set_compile_time_value"($P5018)
    goto if1462_end4394
  if1462_else4393:
.annotate 'line', 2051
.annotate 'line', 2052
    nqp_get_sc_object $P5028, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["WVal"]
    unless_null $P5025, fallback4402
    nqp_get_sc_object $P5029, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5025, $P5029
  fallback4402:
    find_dynamic_lex $P5030, "$*PACKAGE"
    unless_null $P5030, fallback4403
    nqp_get_sc_object $P5033, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5032, $P5033
    set $P5031, $P5032["$PACKAGE"]
    unless_null $P5031, fallback4404
    nqp_get_sc_object $P5034, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5031, $P5034
  fallback4404:
    unless_null $P5031, vivi_14654405
    die "Contextual $*PACKAGE not found"
    box $P5035, "Contextual $*PACKAGE not found"
    set $P5031, $P5035
  vivi_14654405:
    set $P5030, $P5031
  fallback4403:
    $P5036 = $P5025."new"($P5030 :named("value"))
    set $P102, $P5036
  if1462_end4394:
.annotate 'line', 2054
    nqp_get_sc_object $P5040, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5039, $P5040, "QAST"
    get_who $P5038, $P5039
    set $P5037, $P5038["Var"]
    unless_null $P5037, fallback4406
    nqp_get_sc_object $P5041, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5037, $P5041
  fallback4406:
.annotate 'line', 2056
    nqp_get_sc_object $P5045, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["VM"]
    unless_null $P5042, fallback4407
    nqp_get_sc_object $P5046, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5042, $P5046
  fallback4407:
.annotate 'line', 2057
    nqp_get_sc_object $P5050, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5049, $P5050, "QAST"
    get_who $P5048, $P5049
    set $P5047, $P5048["Var"]
    unless_null $P5047, fallback4408
    nqp_get_sc_object $P5051, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5047, $P5051
  fallback4408:
    $P5052 = $P5047."new"("self" :named("name"), "lexical" :named("scope"))
    $P5053 = $P5042."new"($P5052, "nqp_decontainerize PP" :named("pirop"))
    $P5054 = $P5037."new"($P5053, $P102, $P101 :named("name"), "attribute" :named("scope"))
    store_lex "$past", $P5054
    find_dynamic_lex $P5055, "$*IN_DECL"
    unless_null $P5055, fallback4411
    nqp_get_sc_object $P5058, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5057, $P5058
    set $P5056, $P5057["$IN_DECL"]
    unless_null $P5056, fallback4412
    nqp_get_sc_object $P5059, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5056, $P5059
  fallback4412:
    unless_null $P5056, vivi_14674413
    die "Contextual $*IN_DECL not found"
    box $P5060, "Contextual $*IN_DECL not found"
    set $P5056, $P5060
  vivi_14674413:
    set $P5055, $P5056
  fallback4411:
    set $P5063, $P5055
    if $P5055 goto unless1466_end4410 
    .const 'Sub' $P5061 = 'cuid_452_1358115338.889' 
    capture_lex $P5061
    $P5062 = $P5061()
    set $P5063, $P5062
  unless1466_end4410:
    .return ($P5063) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_452_1358115338.889") :anon :lex :outer("cuid_453_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2062
    .const 'Sub' $P5032 = 'cuid_451_1358115338.889' 
    capture_lex $P5032 
    .lex "$attr", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
.annotate 'line', 2064
    find_dynamic_lex $P5006, "$*PACKAGE"
    unless_null $P5006, fallback4414
    nqp_get_sc_object $P5009, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5008, $P5009
    set $P5007, $P5008["$PACKAGE"]
    unless_null $P5007, fallback4415
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5007, $P5010
  fallback4415:
    unless_null $P5007, vivi_14684416
    die "Contextual $*PACKAGE not found"
    box $P5011, "Contextual $*PACKAGE not found"
    set $P5007, $P5011
  vivi_14684416:
    set $P5006, $P5007
  fallback4414:
    get_how $P5005, $P5006
    find_dynamic_lex $P5012, "$*PACKAGE"
    unless_null $P5012, fallback4417
    nqp_get_sc_object $P5015, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5014, $P5015
    set $P5013, $P5014["$PACKAGE"]
    unless_null $P5013, fallback4418
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5013, $P5016
  fallback4418:
    unless_null $P5013, vivi_14694419
    die "Contextual $*PACKAGE not found"
    box $P5017, "Contextual $*PACKAGE not found"
    set $P5013, $P5017
  vivi_14694419:
    set $P5012, $P5013
  fallback4417:
    $P5018 = $P5005."attributes"($P5012, 1 :named("local"))
    set $P5002, $P5018
    iter $P5004, $P5018
    new $P5020, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5020, for_handlers4422
    push_eh $P5020
  for_next4423:
    unless $P5004, for_done4425
    shift $P5021, $P5004
  for_redo4424:
    .const 'Sub' $P5019 = 'cuid_451_1358115338.889' 
    capture_lex $P5019
    $P5002 = $P5019($P5021)
    goto for_next4423
  for_handlers4422:
    .get_results ($P5020)
    pop_upto_eh $P5020
    getattribute $P5020, $P5020, 'type'
    eq $P5020, .CONTROL_LOOP_NEXT, for_next4423
    eq $P5020, .CONTROL_LOOP_REDO, for_redo4424
  for_done4425:
    pop_eh 
    defined $I5001, $P101
    unless $I5001 goto if1471_else4426 
.annotate 'line', 2070
    can $I5002, $P101, "type"
    box $P5026, $I5002
    set $P5025, $P5026
    unless $I5002 goto if1472_end4429 
.annotate 'line', 2071
.annotate 'line', 2072
    find_lex $P5022, "$past"
    $P5023 = $P101."type"()
    $P5024 = $P5022."returns"($P5023)
    set $P5025, $P5024
  if1472_end4429:
    set $P5031, $P5025
    goto if1471_end4427
  if1471_else4426:
.annotate 'line', 2075
.annotate 'line', 2076
    find_lex $P5027, "$/"
    $P5028 = $P5027."CURSOR"()
    find_lex $P5029, "$name"
    set $S5003, $P5029
    concat $S5002, "Attribute '", $S5003
    concat $S5001, $S5002, "' not declared"
    $P5030 = $P5028."panic"($S5001)
    set $P5031, $P5030
  if1471_end4427:
    .return ($P5031) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_451_1358115338.889") :anon :lex :outer("cuid_452_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2064
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 2065
    $P5001 = _lex_param_0."name"()
    set $S5001, $P5001
    find_lex $P5002, "$name"
    set $S5002, $P5002
    iseq $I5001, $S5001, $S5002
    set $I5002, $I5001
    unless $I5001 goto if1470_end4421 
    store_lex "$attr", _lex_param_0
    die 0, .CONTROL_LOOP_LAST
    set $I5002, 0
  if1470_end4421:
    .return ($I5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_454_1358115338.889") :anon :lex :outer("cuid_450_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2084
    .lex "$name", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
.annotate 'line', 2085
    find_lex $P5002, "@name"
    $P5003 = $P5002."pop"()
    set $S5001, $P5003
    box $P5004, $S5001
    set $P101, $P5004
    find_dynamic_lex $P5005, "$*IN_DECL"
    unless_null $P5005, fallback4450
    nqp_get_sc_object $P5008, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["$IN_DECL"]
    unless_null $P5006, fallback4451
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5006, $P5009
  fallback4451:
    unless_null $P5006, vivi_14814452
    die "Contextual $*IN_DECL not found"
    box $P5010, "Contextual $*IN_DECL not found"
    set $P5006, $P5010
  vivi_14814452:
    set $P5005, $P5006
  fallback4450:
    set $S5002, $P5005
    iseq $I5001, $S5002, "variable"
    set $I5003, $I5001
    if $I5001 goto unless1480_end4449 
    set $S5003, $P101
    iseq $I5002, $S5003, "$_"
    set $I5003, $I5002
  unless1480_end4449:
    set $I5005, $I5003
    if $I5003 goto unless1479_end4447 
    set $S5004, $P101
    iseq $I5004, $S5004, "$/"
    set $I5005, $I5004
  unless1479_end4447:
    set $I5007, $I5005
    if $I5005 goto unless1478_end4445 
    set $S5005, $P101
    iseq $I5006, $S5005, "$!"
    set $I5007, $I5006
  unless1478_end4445:
    set $I5009, $I5007
    if $I5007 goto unless1477_end4443 
    find_lex $P5013, "$/"
    unless_null $P5013, fallback4453
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5013, $P5014
  fallback4453:
    set $P5012, $P5013["twigil"]
    unless_null $P5012, fallback4454
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5012, $P5015
  fallback4454:
    set $P5011, $P5012[0]
    unless_null $P5011, fallback4455
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5011, $P5016
  fallback4455:
    set $S5006, $P5011
    iseq $I5008, $S5006, "?"
    set $I5009, $I5008
  unless1477_end4443:
    box $P5025, $I5009
    set $P5024, $P5025
    if $I5009 goto unless1476_end4441 
.annotate 'line', 2087
    find_dynamic_lex $P5017, "$*W"
    unless_null $P5017, fallback4456
    nqp_get_sc_object $P5020, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5019, $P5020
    set $P5018, $P5019["$W"]
    unless_null $P5018, fallback4457
    nqp_get_sc_object $P5021, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5018, $P5021
  fallback4457:
    unless_null $P5018, vivi_14824458
    die "Contextual $*W not found"
    box $P5022, "Contextual $*W not found"
    set $P5018, $P5022
  vivi_14824458:
    set $P5017, $P5018
  fallback4456:
    $P5023 = $P5017."is_lexical"($P101)
    set $P5024, $P5023
  unless1476_end4441:
    unless $P5024 goto if1475_else4438 
.annotate 'line', 2088
    nqp_get_sc_object $P5029, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Var"]
    unless_null $P5026, fallback4459
    nqp_get_sc_object $P5030, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5026, $P5030
  fallback4459:
    $P5031 = $P5026."new"($P101 :named("name"), "lexical" :named("scope"))
    store_lex "$past", $P5031
    set $P5035, $P5031
    goto if1475_end4439
  if1475_else4438:
.annotate 'line', 2090
.annotate 'line', 2091
    find_lex $P5032, "$/"
    $P5033 = $P5032."CURSOR"()
    set $S5009, $P101
    concat $S5008, "Use of undeclared variable '", $S5009
    concat $S5007, $S5008, "'"
    $P5034 = $P5033."panic"($S5007)
    set $P5035, $P5034
  if1475_end4439:
    .return ($P5035) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<module>" :subid("cuid_286_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2098
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4460
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback4460:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4461
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback4461:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<knowhow>" :subid("cuid_287_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2099
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4462
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback4462:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4463
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback4463:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<class>" :subid("cuid_288_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2100
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4464
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback4464:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4465
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback4465:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<grammar>" :subid("cuid_289_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2101
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4466
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback4466:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4467
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback4467:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<role>" :subid("cuid_290_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2102
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4468
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback4468:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4469
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback4469:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<native>" :subid("cuid_291_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2103
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4470
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback4470:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4471
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback4471:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<stub>" :subid("cuid_292_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2105
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$HOW", $P101 
    .lex "$PACKAGE", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
.annotate 'line', 2108
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4472
    nqp_get_sc_object $P5006, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4473
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5007
  fallback4473:
    unless_null $P5004, vivi_14834474
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_14834474:
    set $P5003, $P5004
  fallback4472:
    unless_null _lex_param_1, fallback4475
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5011
  fallback4475:
    set $P5010, _lex_param_1["metaclass"]
    unless_null $P5010, fallback4476
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5010, $P5012
  fallback4476:
    set $P5009, $P5010["identifier"]
    unless_null $P5009, fallback4477
    nqp_get_sc_object $P5013, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5009, $P5013
  fallback4477:
    $P5014 = $P5003."find_sym"($P5009)
    set $P101, $P5014
.annotate 'line', 2109
    find_dynamic_lex $P5015, "$*W"
    unless_null $P5015, fallback4478
    nqp_get_sc_object $P5018, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["$W"]
    unless_null $P5016, fallback4479
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5016, $P5019
  fallback4479:
    unless_null $P5016, vivi_14844480
    die "Contextual $*W not found"
    box $P5020, "Contextual $*W not found"
    set $P5016, $P5020
  vivi_14844480:
    set $P5015, $P5016
  fallback4478:
    unless_null _lex_param_1, fallback4481
    nqp_get_sc_object $P5022, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5022
  fallback4481:
    set $P5021, _lex_param_1["name"]
    unless_null $P5021, fallback4482
    nqp_get_sc_object $P5023, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5021, $P5023
  fallback4482:
    set $S5001, $P5021
    $P5024 = $P5015."pkg_create_mo"($P101, $S5001 :named("name"))
    set $P102, $P5024
    find_dynamic_lex $P5025, "$*SCOPE"
    unless_null $P5025, fallback4487
    nqp_get_sc_object $P5028, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5027, $P5028
    set $P5026, $P5027["$SCOPE"]
    unless_null $P5026, fallback4488
    nqp_get_sc_object $P5029, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5026, $P5029
  fallback4488:
    unless_null $P5026, vivi_14874489
    die "Contextual $*SCOPE not found"
    box $P5030, "Contextual $*SCOPE not found"
    set $P5026, $P5030
  vivi_14874489:
    set $P5025, $P5026
  fallback4487:
    set $S5002, $P5025
    iseq $I5001, $S5002, "our"
    set $I5003, $I5001
    if $I5001 goto unless1486_end4486 
    find_dynamic_lex $P5031, "$*SCOPE"
    unless_null $P5031, fallback4490
    nqp_get_sc_object $P5034, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["$SCOPE"]
    unless_null $P5032, fallback4491
    nqp_get_sc_object $P5035, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5032, $P5035
  fallback4491:
    unless_null $P5032, vivi_14884492
    die "Contextual $*SCOPE not found"
    box $P5036, "Contextual $*SCOPE not found"
    set $P5032, $P5036
  vivi_14884492:
    set $P5031, $P5032
  fallback4490:
    set $S5003, $P5031
    iseq $I5002, $S5003, ""
    set $I5003, $I5002
  unless1486_end4486:
    unless $I5003 goto if1485_else4483 
.annotate 'line', 2112
.annotate 'line', 2113
    find_dynamic_lex $P5037, "$*W"
    unless_null $P5037, fallback4493
    nqp_get_sc_object $P5040, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5039, $P5040
    set $P5038, $P5039["$W"]
    unless_null $P5038, fallback4494
    nqp_get_sc_object $P5041, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5038, $P5041
  fallback4494:
    unless_null $P5038, vivi_14894495
    die "Contextual $*W not found"
    box $P5042, "Contextual $*W not found"
    set $P5038, $P5042
  vivi_14894495:
    set $P5037, $P5038
  fallback4493:
    find_dynamic_lex $P5043, "$*OUTERPACKAGE"
    unless_null $P5043, fallback4496
    nqp_get_sc_object $P5046, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5045, $P5046
    set $P5044, $P5045["$OUTERPACKAGE"]
    unless_null $P5044, fallback4497
    nqp_get_sc_object $P5047, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5044, $P5047
  fallback4497:
    unless_null $P5044, vivi_14904498
    die "Contextual $*OUTERPACKAGE not found"
    box $P5048, "Contextual $*OUTERPACKAGE not found"
    set $P5044, $P5048
  vivi_14904498:
    set $P5043, $P5044
  fallback4496:
    unless_null _lex_param_1, fallback4499
    nqp_get_sc_object $P5051, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5051
  fallback4499:
    set $P5050, _lex_param_1["name"]
    unless_null $P5050, fallback4500
    nqp_get_sc_object $P5052, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5050, $P5052
  fallback4500:
    set $P5049, $P5050["identifier"]
    unless_null $P5049, fallback4501
    nqp_get_sc_object $P5053, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5049, $P5053
  fallback4501:
    $P5037."install_package_symbol"($P5043, $P5049, $P102)
    unless_null _lex_param_1, fallback4504
    nqp_get_sc_object $P5056, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5056
  fallback4504:
    set $P5055, _lex_param_1["name"]
    unless_null $P5055, fallback4505
    nqp_get_sc_object $P5057, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5055, $P5057
  fallback4505:
    set $P5054, $P5055["identifier"]
    unless_null $P5054, fallback4506
    nqp_get_sc_object $P5058, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5054, $P5058
  fallback4506:
    set $N5001, $P5054
    set $N5002, 1
    iseq $I5004, $N5001, $N5002
    box $P5081, $I5004
    set $P5080, $P5081
    unless $I5004 goto if1491_end4503 
.annotate 'line', 2114
.annotate 'line', 2115
    find_dynamic_lex $P5059, "$*W"
    unless_null $P5059, fallback4507
    nqp_get_sc_object $P5062, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5061, $P5062
    set $P5060, $P5061["$W"]
    unless_null $P5060, fallback4508
    nqp_get_sc_object $P5063, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5060, $P5063
  fallback4508:
    unless_null $P5060, vivi_14924509
    die "Contextual $*W not found"
    box $P5064, "Contextual $*W not found"
    set $P5060, $P5064
  vivi_14924509:
    set $P5059, $P5060
  fallback4507:
    find_dynamic_lex $P5065, "$*W"
    unless_null $P5065, fallback4510
    nqp_get_sc_object $P5068, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5067, $P5068
    set $P5066, $P5067["$W"]
    unless_null $P5066, fallback4511
    nqp_get_sc_object $P5069, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5066, $P5069
  fallback4511:
    unless_null $P5066, vivi_14934512
    die "Contextual $*W not found"
    box $P5070, "Contextual $*W not found"
    set $P5066, $P5070
  vivi_14934512:
    set $P5065, $P5066
  fallback4510:
    $P5071 = $P5065."cur_lexpad"()
    unless_null _lex_param_1, fallback4513
    nqp_get_sc_object $P5075, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5075
  fallback4513:
    set $P5074, _lex_param_1["name"]
    unless_null $P5074, fallback4514
    nqp_get_sc_object $P5076, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5074, $P5076
  fallback4514:
    set $P5073, $P5074["identifier"]
    unless_null $P5073, fallback4515
    nqp_get_sc_object $P5077, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5073, $P5077
  fallback4515:
    set $P5072, $P5073[0]
    unless_null $P5072, fallback4516
    nqp_get_sc_object $P5078, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5072, $P5078
  fallback4516:
    $P5079 = $P5059."install_lexical_symbol"($P5071, $P5072, $P102)
    set $P5080, $P5079
  if1491_end4503:
    goto if1485_end4484
  if1485_else4483:
    find_dynamic_lex $P5082, "$*SCOPE"
    unless_null $P5082, fallback4519
    nqp_get_sc_object $P5085, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5084, $P5085
    set $P5083, $P5084["$SCOPE"]
    unless_null $P5083, fallback4520
    nqp_get_sc_object $P5086, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5083, $P5086
  fallback4520:
    unless_null $P5083, vivi_14954521
    die "Contextual $*SCOPE not found"
    box $P5087, "Contextual $*SCOPE not found"
    set $P5083, $P5087
  vivi_14954521:
    set $P5082, $P5083
  fallback4519:
    set $S5004, $P5082
    iseq $I5005, $S5004, "my"
    unless $I5005 goto if1494_else4517 
.annotate 'line', 2118
    unless_null _lex_param_1, fallback4524
    nqp_get_sc_object $P5090, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5090
  fallback4524:
    set $P5089, _lex_param_1["name"]
    unless_null $P5089, fallback4525
    nqp_get_sc_object $P5091, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5089, $P5091
  fallback4525:
    set $P5088, $P5089["identifier"]
    unless_null $P5088, fallback4526
    nqp_get_sc_object $P5092, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5088, $P5092
  fallback4526:
    set $N5003, $P5088
    set $N5004, 1
    isne $I5006, $N5003, $N5004
    unless $I5006 goto if1496_end4523 
.annotate 'line', 2119
.annotate 'line', 2120
    unless_null _lex_param_1, fallback4527
    nqp_get_sc_object $P5094, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5094
  fallback4527:
    set $P5093, _lex_param_1["name"]
    unless_null $P5093, fallback4528
    nqp_get_sc_object $P5095, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5093, $P5095
  fallback4528:
    $P5096 = $P5093."CURSOR"()
    $P5097 = $P5096."panic"("A my scoped package cannot have a multi-part name yet")
  if1496_end4523:
.annotate 'line', 2122
    find_dynamic_lex $P5098, "$*W"
    unless_null $P5098, fallback4529
    nqp_get_sc_object $P5101, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5100, $P5101
    set $P5099, $P5100["$W"]
    unless_null $P5099, fallback4530
    nqp_get_sc_object $P5102, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5099, $P5102
  fallback4530:
    unless_null $P5099, vivi_14974531
    die "Contextual $*W not found"
    box $P5103, "Contextual $*W not found"
    set $P5099, $P5103
  vivi_14974531:
    set $P5098, $P5099
  fallback4529:
    find_dynamic_lex $P5104, "$*W"
    unless_null $P5104, fallback4532
    nqp_get_sc_object $P5107, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5106, $P5107
    set $P5105, $P5106["$W"]
    unless_null $P5105, fallback4533
    nqp_get_sc_object $P5108, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5105, $P5108
  fallback4533:
    unless_null $P5105, vivi_14984534
    die "Contextual $*W not found"
    box $P5109, "Contextual $*W not found"
    set $P5105, $P5109
  vivi_14984534:
    set $P5104, $P5105
  fallback4532:
    $P5110 = $P5104."cur_lexpad"()
    unless_null _lex_param_1, fallback4535
    nqp_get_sc_object $P5114, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5114
  fallback4535:
    set $P5113, _lex_param_1["name"]
    unless_null $P5113, fallback4536
    nqp_get_sc_object $P5115, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5113, $P5115
  fallback4536:
    set $P5112, $P5113["identifier"]
    unless_null $P5112, fallback4537
    nqp_get_sc_object $P5116, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5112, $P5116
  fallback4537:
    set $P5111, $P5112[0]
    unless_null $P5111, fallback4538
    nqp_get_sc_object $P5117, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5111, $P5117
  fallback4538:
    $P5118 = $P5098."install_lexical_symbol"($P5110, $P5111, $P102)
    set $P5127, $P5118
    goto if1494_end4518
  if1494_else4517:
.annotate 'line', 2124
.annotate 'line', 2125
    $P5119 = _lex_param_1."CURSOR"()
    find_dynamic_lex $P5120, "$*SCOPE"
    unless_null $P5120, fallback4539
    nqp_get_sc_object $P5123, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5122, $P5123
    set $P5121, $P5122["$SCOPE"]
    unless_null $P5121, fallback4540
    nqp_get_sc_object $P5124, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5121, $P5124
  fallback4540:
    unless_null $P5121, vivi_14994541
    die "Contextual $*SCOPE not found"
    box $P5125, "Contextual $*SCOPE not found"
    set $P5121, $P5125
  vivi_14994541:
    set $P5120, $P5121
  fallback4539:
    set $S5006, $P5120
    concat $S5005, $S5006, " scoped packages are not supported"
    $P5126 = $P5119."panic"($S5005)
    set $P5127, $P5126
  if1494_end4518:
  if1485_end4484:
.annotate 'line', 2128
    nqp_get_sc_object $P5131, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5130, $P5131, "QAST"
    get_who $P5129, $P5130
    set $P5128, $P5129["Stmts"]
    unless_null $P5128, fallback4542
    nqp_get_sc_object $P5132, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5128, $P5132
  fallback4542:
    $P5133 = $P5128."new"()
    $P5134 = _lex_param_1."!make"($P5133)
    .return ($P5134) 
.end
.HLL "nqp"
.namespace []
.sub "package_def" :subid("cuid_293_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2131
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5149 = 'cuid_456_1358115338.889' 
    capture_lex $P5149 
    .const 'Sub' $P5149 = 'cuid_457_1358115338.889' 
    capture_lex $P5149 
    .const 'Sub' $P5149 = 'cuid_458_1358115338.889' 
    capture_lex $P5149 
    .const 'Sub' $P5149 = 'cuid_459_1358115338.889' 
    capture_lex $P5149 
    .lex "@ns", $P101 
    .lex "$name", $P102 
    .lex "$how", $P103 
    .lex "$past", $P104 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P104, $P5004
    unless_null _lex_param_1, fallback4543
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5008
  fallback4543:
    set $P5007, _lex_param_1["name"]
    unless_null $P5007, fallback4544
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5007, $P5009
  fallback4544:
    set $P5006, $P5007["identifier"]
    unless_null $P5006, fallback4545
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5006, $P5010
  fallback4545:
    clone $P5005, $P5006
    set $P101, $P5005
.annotate 'line', 2134
    $P5011 = $P101."pop"()
    set $S5001, $P5011
    box $P5012, $S5001
    set $P102, $P5012
    find_dynamic_lex $P5014, "%*HOW"
    unless_null $P5014, fallback4546
    nqp_get_sc_object $P5017, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5016, $P5017
    set $P5015, $P5016["%HOW"]
    unless_null $P5015, fallback4547
    nqp_get_sc_object $P5019, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5018, $P5019
    new $P5020, 'Hash'
    set $P5018["%HOW"], $P5020
    set $P5015, $P5020
  fallback4547:
    unless_null $P5015, vivi_15004548
    die "Contextual %*HOW not found"
    box $P5021, "Contextual %*HOW not found"
    set $P5015, $P5021
  vivi_15004548:
    set $P5014, $P5015
  fallback4546:
    find_dynamic_lex $P5022, "$*PKGDECL"
    unless_null $P5022, fallback4549
    nqp_get_sc_object $P5025, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["$PKGDECL"]
    unless_null $P5023, fallback4550
    nqp_get_sc_object $P5026, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5023, $P5026
  fallback4550:
    unless_null $P5023, vivi_15014551
    die "Contextual $*PKGDECL not found"
    box $P5027, "Contextual $*PKGDECL not found"
    set $P5023, $P5027
  vivi_15014551:
    set $P5022, $P5023
  fallback4549:
    set $S5002, $P5022
    set $P5013, $P5014[$S5002]
    unless_null $P5013, fallback4552
    nqp_get_sc_object $P5028, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5013, $P5028
  fallback4552:
    set $P103, $P5013
    unless_null _lex_param_1, fallback4555
    nqp_get_sc_object $P5030, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5030
  fallback4555:
    set $P5029, _lex_param_1["blockoid"]
    unless_null $P5029, fallback4556
    nqp_get_sc_object $P5031, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5029, $P5031
  fallback4556:
    unless $P5029 goto if1502_else4553 
.annotate 'line', 2139
.annotate 'line', 2140
    unless_null _lex_param_1, fallback4557
    nqp_get_sc_object $P5033, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5033
  fallback4557:
    set $P5032, _lex_param_1["blockoid"]
    unless_null $P5032, fallback4558
    nqp_get_sc_object $P5034, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5032, $P5034
  fallback4558:
    $P5035 = $P5032."ast"()
    set $P104, $P5035
    goto if1502_end4554
  if1502_else4553:
.annotate 'line', 2142
.annotate 'line', 2143
    find_dynamic_lex $P5036, "$*W"
    unless_null $P5036, fallback4559
    nqp_get_sc_object $P5039, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5038, $P5039
    set $P5037, $P5038["$W"]
    unless_null $P5037, fallback4560
    nqp_get_sc_object $P5040, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5037, $P5040
  fallback4560:
    unless_null $P5037, vivi_15034561
    die "Contextual $*W not found"
    box $P5041, "Contextual $*W not found"
    set $P5037, $P5041
  vivi_15034561:
    set $P5036, $P5037
  fallback4559:
    $P5042 = $P5036."pop_lexpad"()
    set $P104, $P5042
.annotate 'line', 2144
    unless_null _lex_param_1, fallback4562
    nqp_get_sc_object $P5044, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5044
  fallback4562:
    set $P5043, _lex_param_1["statementlist"]
    unless_null $P5043, fallback4563
    nqp_get_sc_object $P5045, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5043, $P5045
  fallback4563:
    $P5046 = $P5043."ast"()
    $P5047 = $P104."push"($P5046)
  if1502_end4554:
    can $I5001, $P103, "parametric"
    box $P5050, $I5001
    set $P5049, $P5050
    unless $I5001 goto if1505_end4567 
.annotate 'line', 2151
    $P5048 = $P103."parametric"($P103)
    set $P5049, $P5048
  if1505_end4567:
    unless $P5049 goto if1504_else4564 
    .const 'Sub' $P5051 = 'cuid_456_1358115338.889' 
    capture_lex $P5051
    $P5052 = $P5051()
    goto if1504_end4565
  if1504_else4564:
.annotate 'line', 2168
.annotate 'line', 2169
    $P104."blocktype"("immediate")
.annotate 'line', 2170
    find_dynamic_lex $P5053, "$*W"
    unless_null $P5053, fallback4600
    nqp_get_sc_object $P5056, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5055, $P5056
    set $P5054, $P5055["$W"]
    unless_null $P5054, fallback4601
    nqp_get_sc_object $P5057, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5054, $P5057
  fallback4601:
    unless_null $P5054, vivi_15134602
    die "Contextual $*W not found"
    box $P5058, "Contextual $*W not found"
    set $P5054, $P5058
  vivi_15134602:
    set $P5053, $P5054
  fallback4600:
    find_dynamic_lex $P5059, "$*PACKAGE"
    unless_null $P5059, fallback4603
    nqp_get_sc_object $P5062, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5061, $P5062
    set $P5060, $P5061["$PACKAGE"]
    unless_null $P5060, fallback4604
    nqp_get_sc_object $P5063, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5060, $P5063
  fallback4604:
    unless_null $P5060, vivi_15144605
    die "Contextual $*PACKAGE not found"
    box $P5064, "Contextual $*PACKAGE not found"
    set $P5060, $P5064
  vivi_15144605:
    set $P5059, $P5060
  fallback4603:
    $P5053."install_lexical_symbol"($P104, "$?PACKAGE", $P5059)
.annotate 'line', 2171
    find_dynamic_lex $P5065, "$*W"
    unless_null $P5065, fallback4606
    nqp_get_sc_object $P5068, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5067, $P5068
    set $P5066, $P5067["$W"]
    unless_null $P5066, fallback4607
    nqp_get_sc_object $P5069, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5066, $P5069
  fallback4607:
    unless_null $P5066, vivi_15154608
    die "Contextual $*W not found"
    box $P5070, "Contextual $*W not found"
    set $P5066, $P5070
  vivi_15154608:
    set $P5065, $P5066
  fallback4606:
    find_dynamic_lex $P5071, "$*PACKAGE"
    unless_null $P5071, fallback4609
    nqp_get_sc_object $P5074, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5073, $P5074
    set $P5072, $P5073["$PACKAGE"]
    unless_null $P5072, fallback4610
    nqp_get_sc_object $P5075, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5072, $P5075
  fallback4610:
    unless_null $P5072, vivi_15164611
    die "Contextual $*PACKAGE not found"
    box $P5076, "Contextual $*PACKAGE not found"
    set $P5072, $P5076
  vivi_15164611:
    set $P5071, $P5072
  fallback4609:
    $P5077 = $P5065."install_lexical_symbol"($P104, "$?CLASS", $P5071)
  if1504_end4565:
    unless_null _lex_param_1, fallback4614
    nqp_get_sc_object $P5079, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5079
  fallback4614:
    set $P5078, _lex_param_1["parent"]
    unless_null $P5078, fallback4615
    nqp_get_sc_object $P5080, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5078, $P5080
  fallback4615:
    unless $P5078 goto if1517_else4612 
    .const 'Sub' $P5081 = 'cuid_457_1358115338.889' 
    capture_lex $P5081
    $P5082 = $P5081()
    goto if1517_end4613
  if1517_else4612:
    can $I5002, $P103, "set_default_parent"
    box $P5086, $I5002
    set $P5085, $P5086
    unless $I5002 goto if1524_end4637 
    .const 'Sub' $P5083 = 'cuid_458_1358115338.889' 
    capture_lex $P5083
    $P5084 = $P5083()
    set $P5085, $P5084
  if1524_end4637:
  if1517_end4613:
    unless_null _lex_param_1, fallback4654
    nqp_get_sc_object $P5088, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5088
  fallback4654:
    set $P5087, _lex_param_1["role"]
    unless_null $P5087, fallback4655
    nqp_get_sc_object $P5089, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5087, $P5089
  fallback4655:
    unless $P5087 goto if1530_end4653 
.annotate 'line', 2196
    unless_null _lex_param_1, fallback4656
    nqp_get_sc_object $P5094, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5094
  fallback4656:
    set $P5093, _lex_param_1["role"]
    unless_null $P5093, fallback4657
    nqp_get_sc_object $P5095, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5093, $P5095
  fallback4657:
    set $P5090, $P5093
    iter $P5092, $P5093
  for_next4672:
    unless $P5092, for_done4674
    shift $P5097, $P5092
  for_redo4673:
    .const 'Sub' $P5096 = 'cuid_459_1358115338.889' 
    capture_lex $P5096
    $P5090 = $P5096($P5097)
    goto for_next4672
  for_done4674:
  if1530_end4653:
.annotate 'line', 2214
    find_dynamic_lex $P5098, "$*W"
    unless_null $P5098, fallback4675
    nqp_get_sc_object $P5101, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5100, $P5101
    set $P5099, $P5100["$W"]
    unless_null $P5099, fallback4676
    nqp_get_sc_object $P5102, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5099, $P5102
  fallback4676:
    unless_null $P5099, vivi_15374677
    die "Contextual $*W not found"
    box $P5103, "Contextual $*W not found"
    set $P5099, $P5103
  vivi_15374677:
    set $P5098, $P5099
  fallback4675:
    find_dynamic_lex $P5104, "$*PACKAGE"
    unless_null $P5104, fallback4678
    nqp_get_sc_object $P5107, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5106, $P5107
    set $P5105, $P5106["$PACKAGE"]
    unless_null $P5105, fallback4679
    nqp_get_sc_object $P5108, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5105, $P5108
  fallback4679:
    unless_null $P5105, vivi_15384680
    die "Contextual $*PACKAGE not found"
    box $P5109, "Contextual $*PACKAGE not found"
    set $P5105, $P5109
  vivi_15384680:
    set $P5104, $P5105
  fallback4678:
    $P5098."pkg_compose"($P5104)
    find_dynamic_lex $P5110, "$*PKGDECL"
    unless_null $P5110, fallback4685
    nqp_get_sc_object $P5113, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5112, $P5113
    set $P5111, $P5112["$PKGDECL"]
    unless_null $P5111, fallback4686
    nqp_get_sc_object $P5114, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5111, $P5114
  fallback4686:
    unless_null $P5111, vivi_15414687
    die "Contextual $*PKGDECL not found"
    box $P5115, "Contextual $*PKGDECL not found"
    set $P5111, $P5115
  vivi_15414687:
    set $P5110, $P5111
  fallback4685:
    set $S5003, $P5110
    iseq $I5003, $S5003, "grammar"
    set $I5005, $I5003
    unless $I5003 goto if1540_end4684 
    find_dynamic_lex $P5116, "$*PACKAGE"
    unless_null $P5116, fallback4688
    nqp_get_sc_object $P5119, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5118, $P5119
    set $P5117, $P5118["$PACKAGE"]
    unless_null $P5117, fallback4689
    nqp_get_sc_object $P5120, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5117, $P5120
  fallback4689:
    unless_null $P5117, vivi_15424690
    die "Contextual $*PACKAGE not found"
    box $P5121, "Contextual $*PACKAGE not found"
    set $P5117, $P5121
  vivi_15424690:
    set $P5116, $P5117
  fallback4688:
    can $I5004, $P5116, "!precompute_nfas"
    set $I5005, $I5004
  if1540_end4684:
    unless $I5005 goto if1539_end4682 
.annotate 'line', 2217
.annotate 'line', 2218
    find_dynamic_lex $P5122, "$*PACKAGE"
    unless_null $P5122, fallback4691
    nqp_get_sc_object $P5125, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5124, $P5125
    set $P5123, $P5124["$PACKAGE"]
    unless_null $P5123, fallback4692
    nqp_get_sc_object $P5126, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5123, $P5126
  fallback4692:
    unless_null $P5123, vivi_15434693
    die "Contextual $*PACKAGE not found"
    box $P5127, "Contextual $*PACKAGE not found"
    set $P5123, $P5127
  vivi_15434693:
    set $P5122, $P5123
  fallback4691:
    $P5128 = $P5122."!precompute_nfas"()
  if1539_end4682:
    unless_null _lex_param_1, fallback4696
    nqp_get_sc_object $P5130, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5130
  fallback4696:
    set $P5129, _lex_param_1["export"]
    unless_null $P5129, fallback4697
    nqp_get_sc_object $P5131, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5129, $P5131
  fallback4697:
    unless $P5129 goto if1544_end4695 
.annotate 'line', 2222
    find_dynamic_lex $P5135, "$*EXPORT"
    unless_null $P5135, fallback4698
    nqp_get_sc_object $P5138, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5137, $P5138
    set $P5136, $P5137["$EXPORT"]
    unless_null $P5136, fallback4699
    nqp_get_sc_object $P5139, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5136, $P5139
  fallback4699:
    unless_null $P5136, vivi_15454700
    die "Contextual $*EXPORT not found"
    box $P5140, "Contextual $*EXPORT not found"
    set $P5136, $P5140
  vivi_15454700:
    set $P5135, $P5136
  fallback4698:
    get_who $P5134, $P5135
    set $P5133, $P5134["DEFAULT"]
    unless_null $P5133, fallback4701
    nqp_get_sc_object $P5141, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5133, $P5141
  fallback4701:
    get_who $P5132, $P5133
    set $S5004, $P102
    find_dynamic_lex $P5142, "$*PACKAGE"
    unless_null $P5142, fallback4702
    nqp_get_sc_object $P5145, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5144, $P5145
    set $P5143, $P5144["$PACKAGE"]
    unless_null $P5143, fallback4703
    nqp_get_sc_object $P5146, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5143, $P5146
  fallback4703:
    unless_null $P5143, vivi_15464704
    die "Contextual $*PACKAGE not found"
    box $P5147, "Contextual $*PACKAGE not found"
    set $P5143, $P5147
  vivi_15464704:
    set $P5142, $P5143
  fallback4702:
    set $P5132[$S5004], $P5142
  if1544_end4695:
.annotate 'line', 2226
    $P5148 = _lex_param_1."!make"($P104)
    .return ($P5148) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_456_1358115338.889") :anon :lex :outer("cuid_293_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2151
    .const 'Sub' $P5081 = 'cuid_455_1358115338.889' 
    capture_lex $P5081 
    .lex "$params", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
.annotate 'line', 2152
    find_lex $P5002, "$past"
    $P5002."blocktype"("declaration")
.annotate 'line', 2153
    nqp_get_sc_object $P5006, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5005, $P5006, "QAST"
    get_who $P5004, $P5005
    set $P5003, $P5004["Stmts"]
    unless_null $P5003, fallback4568
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5003, $P5007
  fallback4568:
.annotate 'line', 2154
    nqp_get_sc_object $P5011, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5010, $P5011, "QAST"
    get_who $P5009, $P5010
    set $P5008, $P5009["Var"]
    unless_null $P5008, fallback4569
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5008, $P5012
  fallback4569:
    $P5013 = $P5008."new"("$?CLASS" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5014 = $P5003."new"($P5013)
    set $P101, $P5014
    find_lex $P5016, "$/"
    unless_null $P5016, fallback4572
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5016, $P5017
  fallback4572:
    set $P5015, $P5016["role_params"]
    unless_null $P5015, fallback4573
    nqp_get_sc_object $P5018, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5015, $P5018
  fallback4573:
    unless $P5015 goto if1506_end4571 
.annotate 'line', 2156
    find_lex $P5025, "$/"
    unless_null $P5025, fallback4574
    nqp_get_sc_object $P5026, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5025, $P5026
  fallback4574:
    set $P5024, $P5025["role_params"]
    unless_null $P5024, fallback4575
    nqp_get_sc_object $P5027, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5024, $P5027
  fallback4575:
    set $P5023, $P5024[0]
    unless_null $P5023, fallback4576
    nqp_get_sc_object $P5028, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5023, $P5028
  fallback4576:
    set $P5022, $P5023["variable"]
    unless_null $P5022, fallback4577
    nqp_get_sc_object $P5029, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5022, $P5029
  fallback4577:
    set $P5019, $P5022
    iter $P5021, $P5022
  for_next4578:
    unless $P5021, for_done4580
    shift $P5031, $P5021
  for_redo4579:
    .const 'Sub' $P5030 = 'cuid_455_1358115338.889' 
    capture_lex $P5030
    $P5019 = $P5030($P5031)
    goto for_next4578
  for_done4580:
  if1506_end4571:
.annotate 'line', 2161
    find_lex $P5032, "$past"
    $P5032."unshift"($P101)
.annotate 'line', 2162
    find_lex $P5033, "$past"
    nqp_get_sc_object $P5037, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set $P5034, $P5035["Op"]
    unless_null $P5034, fallback4581
    nqp_get_sc_object $P5038, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5034, $P5038
  fallback4581:
    $P5039 = $P5034."new"("curlexpad" :named("op"))
    $P5033."push"($P5039)
.annotate 'line', 2163
    find_lex $P5040, "$past"
    $P5040."symbol"("$?CLASS", "lexical" :named("scope"))
.annotate 'line', 2164
    find_dynamic_lex $P5041, "$*W"
    unless_null $P5041, fallback4582
    nqp_get_sc_object $P5044, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5043, $P5044
    set $P5042, $P5043["$W"]
    unless_null $P5042, fallback4583
    nqp_get_sc_object $P5045, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5042, $P5045
  fallback4583:
    unless_null $P5042, vivi_15074584
    die "Contextual $*W not found"
    box $P5046, "Contextual $*W not found"
    set $P5042, $P5046
  vivi_15074584:
    set $P5041, $P5042
  fallback4582:
    find_dynamic_lex $P5047, "$*PACKAGE"
    unless_null $P5047, fallback4585
    nqp_get_sc_object $P5050, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5049, $P5050
    set $P5048, $P5049["$PACKAGE"]
    unless_null $P5048, fallback4586
    nqp_get_sc_object $P5051, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5048, $P5051
  fallback4586:
    unless_null $P5048, vivi_15084587
    die "Contextual $*PACKAGE not found"
    box $P5052, "Contextual $*PACKAGE not found"
    set $P5048, $P5052
  vivi_15084587:
    set $P5047, $P5048
  fallback4585:
    find_lex $P5053, "$past"
    $P5041."pkg_set_body_block"($P5047, $P5053)
.annotate 'line', 2165
    find_dynamic_lex $P5054, "$*W"
    unless_null $P5054, fallback4588
    nqp_get_sc_object $P5057, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5056, $P5057
    set $P5055, $P5056["$W"]
    unless_null $P5055, fallback4589
    nqp_get_sc_object $P5058, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5055, $P5058
  fallback4589:
    unless_null $P5055, vivi_15094590
    die "Contextual $*W not found"
    box $P5059, "Contextual $*W not found"
    set $P5055, $P5059
  vivi_15094590:
    set $P5054, $P5055
  fallback4588:
    find_lex $P5060, "$past"
    find_dynamic_lex $P5061, "$*PACKAGE"
    unless_null $P5061, fallback4591
    nqp_get_sc_object $P5064, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5063, $P5064
    set $P5062, $P5063["$PACKAGE"]
    unless_null $P5062, fallback4592
    nqp_get_sc_object $P5065, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5062, $P5065
  fallback4592:
    unless_null $P5062, vivi_15104593
    die "Contextual $*PACKAGE not found"
    box $P5066, "Contextual $*PACKAGE not found"
    set $P5062, $P5066
  vivi_15104593:
    set $P5061, $P5062
  fallback4591:
    $P5054."install_lexical_symbol"($P5060, "$?PACKAGE", $P5061)
.annotate 'line', 2166
    find_dynamic_lex $P5067, "$*W"
    unless_null $P5067, fallback4594
    nqp_get_sc_object $P5070, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5069, $P5070
    set $P5068, $P5069["$W"]
    unless_null $P5068, fallback4595
    nqp_get_sc_object $P5071, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5068, $P5071
  fallback4595:
    unless_null $P5068, vivi_15114596
    die "Contextual $*W not found"
    box $P5072, "Contextual $*W not found"
    set $P5068, $P5072
  vivi_15114596:
    set $P5067, $P5068
  fallback4594:
    find_lex $P5073, "$past"
    find_dynamic_lex $P5074, "$*PACKAGE"
    unless_null $P5074, fallback4597
    nqp_get_sc_object $P5077, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5076, $P5077
    set $P5075, $P5076["$PACKAGE"]
    unless_null $P5075, fallback4598
    nqp_get_sc_object $P5078, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5075, $P5078
  fallback4598:
    unless_null $P5075, vivi_15124599
    die "Contextual $*PACKAGE not found"
    box $P5079, "Contextual $*PACKAGE not found"
    set $P5075, $P5079
  vivi_15124599:
    set $P5074, $P5075
  fallback4597:
    $P5080 = $P5067."install_lexical_symbol"($P5073, "$?ROLE", $P5074)
    .return ($P5080) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_455_1358115338.889") :anon :lex :outer("cuid_456_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2157
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 2158
    find_lex $P5001, "$params"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_457_1358115338.889") :anon :lex :outer("cuid_293_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2175
    .lex "$parent", $P101 
    .lex "$parent_found", $P102 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
    new $P5020, 'ExceptionHandler'
    set_label $P5020, catch_handler_15204624
    $P5020.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5020
.annotate 'line', 2178
.annotate 'line', 2179
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4616
    nqp_get_sc_object $P5006, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4617
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5007
  fallback4617:
    unless_null $P5004, vivi_15184618
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_15184618:
    set $P5003, $P5004
  fallback4616:
    find_lex $P5013, "$/"
    unless_null $P5013, fallback4619
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5013, $P5014
  fallback4619:
    set $P5012, $P5013["parent"]
    unless_null $P5012, fallback4620
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5012, $P5015
  fallback4620:
    set $P5011, $P5012[0]
    unless_null $P5011, fallback4621
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5011, $P5016
  fallback4621:
    set $P5010, $P5011["identifier"]
    unless_null $P5010, fallback4622
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5010, $P5017
  fallback4622:
    clone $P5009, $P5010
    $P5018 = $P5003."find_sym"($P5009)
    set $P101, $P5018
    box $P5019, 1
    set $P102, $P5019
    set $P5021, $P102
    pop_eh 
    goto skip_handler_15194623
  catch_handler_15204624:
    .get_results ($P5020) 
    set $I10001, 1
    set $P5020["handled"], $I10001
    nqp_get_sc_object $P10001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    finalize $P5020
    pop_upto_eh $P5020
    pop_eh 
    set $P5021, $P10001
    goto skip_handler_15194623
  skip_handler_15194623:
    unless $P102 goto if1521_else4625 
.annotate 'line', 2182
.annotate 'line', 2183
    find_dynamic_lex $P5022, "$*W"
    unless_null $P5022, fallback4627
    nqp_get_sc_object $P5025, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["$W"]
    unless_null $P5023, fallback4628
    nqp_get_sc_object $P5026, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5023, $P5026
  fallback4628:
    unless_null $P5023, vivi_15224629
    die "Contextual $*W not found"
    box $P5027, "Contextual $*W not found"
    set $P5023, $P5027
  vivi_15224629:
    set $P5022, $P5023
  fallback4627:
    find_dynamic_lex $P5028, "$*PACKAGE"
    unless_null $P5028, fallback4630
    nqp_get_sc_object $P5031, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5030, $P5031
    set $P5029, $P5030["$PACKAGE"]
    unless_null $P5029, fallback4631
    nqp_get_sc_object $P5032, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5029, $P5032
  fallback4631:
    unless_null $P5029, vivi_15234632
    die "Contextual $*PACKAGE not found"
    box $P5033, "Contextual $*PACKAGE not found"
    set $P5029, $P5033
  vivi_15234632:
    set $P5028, $P5029
  fallback4630:
    $P5034 = $P5022."pkg_add_parent_or_role"($P5028, "add_parent", $P101)
    set $P5044, $P5034
    goto if1521_end4626
  if1521_else4625:
.annotate 'line', 2185
.annotate 'line', 2186
    find_lex $P5035, "$/"
    $P5036 = $P5035."CURSOR"()
    find_lex $P5039, "$/"
    unless_null $P5039, fallback4633
    nqp_get_sc_object $P5040, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5039, $P5040
  fallback4633:
    set $P5038, $P5039["parent"]
    unless_null $P5038, fallback4634
    nqp_get_sc_object $P5041, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5038, $P5041
  fallback4634:
    set $P5037, $P5038[0]
    unless_null $P5037, fallback4635
    nqp_get_sc_object $P5042, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5037, $P5042
  fallback4635:
    set $S5003, $P5037
    concat $S5002, "Could not find parent class '", $S5003
    concat $S5001, $S5002, "'"
    $P5043 = $P5036."panic"($S5001)
    set $P5044, $P5043
  if1521_end4626:
    .return ($P5044) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_458_1358115338.889") :anon :lex :outer("cuid_293_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2189
    .lex "$default", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    find_dynamic_lex $P5002, "$*PKGDECL"
    unless_null $P5002, fallback4640
    nqp_get_sc_object $P5005, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$PKGDECL"]
    unless_null $P5003, fallback4641
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5003, $P5006
  fallback4641:
    unless_null $P5003, vivi_15264642
    die "Contextual $*PKGDECL not found"
    box $P5007, "Contextual $*PKGDECL not found"
    set $P5003, $P5007
  vivi_15264642:
    set $P5002, $P5003
  fallback4640:
    set $S5001, $P5002
    iseq $I5001, $S5001, "grammar"
    unless $I5001 goto if1525_else4638 
    new $P5008, 'ResizablePMCArray'
    box $P5009, "NQPCursor"
    push $P5008, $P5009
    set $P5012, $P5008
    goto if1525_end4639
  if1525_else4638:
    new $P5010, 'ResizablePMCArray'
    box $P5011, "NQPMu"
    push $P5010, $P5011
    set $P5012, $P5010
  if1525_end4639:
    set $P101, $P5012
.annotate 'line', 2191
    find_dynamic_lex $P5013, "$*W"
    unless_null $P5013, fallback4643
    nqp_get_sc_object $P5016, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$W"]
    unless_null $P5014, fallback4644
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5014, $P5017
  fallback4644:
    unless_null $P5014, vivi_15274645
    die "Contextual $*W not found"
    box $P5018, "Contextual $*W not found"
    set $P5014, $P5018
  vivi_15274645:
    set $P5013, $P5014
  fallback4643:
    find_dynamic_lex $P5019, "$*PACKAGE"
    unless_null $P5019, fallback4646
    nqp_get_sc_object $P5022, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["$PACKAGE"]
    unless_null $P5020, fallback4647
    nqp_get_sc_object $P5023, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5020, $P5023
  fallback4647:
    unless_null $P5020, vivi_15284648
    die "Contextual $*PACKAGE not found"
    box $P5024, "Contextual $*PACKAGE not found"
    set $P5020, $P5024
  vivi_15284648:
    set $P5019, $P5020
  fallback4646:
.annotate 'line', 2192
    find_dynamic_lex $P5025, "$*W"
    unless_null $P5025, fallback4649
    nqp_get_sc_object $P5028, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5027, $P5028
    set $P5026, $P5027["$W"]
    unless_null $P5026, fallback4650
    nqp_get_sc_object $P5029, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5026, $P5029
  fallback4650:
    unless_null $P5026, vivi_15294651
    die "Contextual $*W not found"
    box $P5030, "Contextual $*W not found"
    set $P5026, $P5030
  vivi_15294651:
    set $P5025, $P5026
  fallback4649:
    $P5031 = $P5025."find_sym"($P101)
    $P5032 = $P5013."pkg_add_parent_or_role"($P5019, "set_default_parent", $P5031)
    .return ($P5032) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_459_1358115338.889") :anon :lex :outer("cuid_293_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2197
    .param pmc _lex_param_0 
    .lex "$role", $P101 
    .lex "$role_found", $P102 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
    new $P5014, 'ExceptionHandler'
    set_label $P5014, catch_handler_15334663
    $P5014.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5014
.annotate 'line', 2200
.annotate 'line', 2201
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4658
    nqp_get_sc_object $P5006, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4659
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5007
  fallback4659:
    unless_null $P5004, vivi_15314660
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_15314660:
    set $P5003, $P5004
  fallback4658:
    set $P5010, _lex_param_0["identifier"]
    unless_null $P5010, fallback4661
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5010, $P5011
  fallback4661:
    clone $P5009, $P5010
    $P5012 = $P5003."find_sym"($P5009)
    set $P101, $P5012
    box $P5013, 1
    set $P102, $P5013
    set $P5015, $P102
    pop_eh 
    goto skip_handler_15324662
  catch_handler_15334663:
    .get_results ($P5014) 
    set $I10001, 1
    set $P5014["handled"], $I10001
    nqp_get_sc_object $P10001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    finalize $P5014
    pop_upto_eh $P5014
    pop_eh 
    set $P5015, $P10001
    goto skip_handler_15324662
  skip_handler_15324662:
    unless $P102 goto if1534_else4664 
.annotate 'line', 2204
.annotate 'line', 2205
    find_dynamic_lex $P5016, "$*W"
    unless_null $P5016, fallback4666
    nqp_get_sc_object $P5019, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5018, $P5019
    set $P5017, $P5018["$W"]
    unless_null $P5017, fallback4667
    nqp_get_sc_object $P5020, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5017, $P5020
  fallback4667:
    unless_null $P5017, vivi_15354668
    die "Contextual $*W not found"
    box $P5021, "Contextual $*W not found"
    set $P5017, $P5021
  vivi_15354668:
    set $P5016, $P5017
  fallback4666:
    find_dynamic_lex $P5022, "$*PACKAGE"
    unless_null $P5022, fallback4669
    nqp_get_sc_object $P5025, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["$PACKAGE"]
    unless_null $P5023, fallback4670
    nqp_get_sc_object $P5026, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5023, $P5026
  fallback4670:
    unless_null $P5023, vivi_15364671
    die "Contextual $*PACKAGE not found"
    box $P5027, "Contextual $*PACKAGE not found"
    set $P5023, $P5027
  vivi_15364671:
    set $P5022, $P5023
  fallback4669:
    $P5028 = $P5016."pkg_add_parent_or_role"($P5022, "add_role", $P101)
    set $P5032, $P5028
    goto if1534_end4665
  if1534_else4664:
.annotate 'line', 2207
.annotate 'line', 2208
    find_lex $P5029, "$/"
    $P5030 = $P5029."CURSOR"()
    set $S5003, _lex_param_0
    concat $S5002, "Could not find role '", $S5003
    concat $S5001, $S5002, "'"
    $P5031 = $P5030."panic"($S5001)
    set $P5032, $P5031
  if1534_end4665:
    .return ($P5032) 
.end
.HLL "nqp"
.namespace []
.sub "role_params" :subid("cuid_294_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2229
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5009 = 'cuid_460_1358115338.889' 
    capture_lex $P5009 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4705
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5005
  fallback4705:
    set $P5004, _lex_param_1["variable"]
    unless_null $P5004, fallback4706
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5006
  fallback4706:
    set $P5001, $P5004
    iter $P5003, $P5004
  for_next4710:
    unless $P5003, for_done4712
    shift $P5008, $P5003
  for_redo4711:
    .const 'Sub' $P5007 = 'cuid_460_1358115338.889' 
    capture_lex $P5007
    $P5001 = $P5007($P5008)
    goto for_next4710
  for_done4712:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_460_1358115338.889") :anon :lex :outer("cuid_294_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2230
    .param pmc _lex_param_0 
    .lex "$var", $P101 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
.annotate 'line', 2231
    $P5002 = _lex_param_0."ast"()
    set $P101, $P5002
.annotate 'line', 2232
    $P101."scope"("lexical")
.annotate 'line', 2233
    $P101."decl"("param")
.annotate 'line', 2234
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4707
    nqp_get_sc_object $P5006, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4708
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5007
  fallback4708:
    unless_null $P5004, vivi_15474709
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_15474709:
    set $P5003, $P5004
  fallback4707:
    $P5009 = $P5003."cur_lexpad"()
    $P5010 = $P101."name"()
    $P5011 = $P5009."symbol"($P5010, "lexical" :named("scope"))
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<my>" :subid("cuid_295_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2238
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4713
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback4713:
    set $P5001, _lex_param_1["scoped"]
    unless_null $P5001, fallback4714
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback4714:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<our>" :subid("cuid_296_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2239
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4715
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback4715:
    set $P5001, _lex_param_1["scoped"]
    unless_null $P5001, fallback4716
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback4716:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<has>" :subid("cuid_297_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2240
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4717
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback4717:
    set $P5001, _lex_param_1["scoped"]
    unless_null $P5001, fallback4718
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback4718:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "scoped" :subid("cuid_298_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2242
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2243
    unless_null _lex_param_1, fallback4721
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback4721:
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4722
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback4722:
    unless $P5001 goto if1548_else4719 
    unless_null _lex_param_1, fallback4723
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5005
  fallback4723:
    set $P5004, _lex_param_1["declarator"]
    unless_null $P5004, fallback4724
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5006
  fallback4724:
    $P5007 = $P5004."ast"()
    set $P5020, $P5007
    goto if1548_end4720
  if1548_else4719:
    unless_null _lex_param_1, fallback4727
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5009
  fallback4727:
    set $P5008, _lex_param_1["multi_declarator"]
    unless_null $P5008, fallback4728
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5008, $P5010
  fallback4728:
    unless $P5008 goto if1549_else4725 
.annotate 'line', 2244
    unless_null _lex_param_1, fallback4729
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5012
  fallback4729:
    set $P5011, _lex_param_1["multi_declarator"]
    unless_null $P5011, fallback4730
    nqp_get_sc_object $P5013, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5011, $P5013
  fallback4730:
    $P5014 = $P5011."ast"()
    set $P5019, $P5014
    goto if1549_end4726
  if1549_else4725:
.annotate 'line', 2245
    unless_null _lex_param_1, fallback4731
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5016
  fallback4731:
    set $P5015, _lex_param_1["package_declarator"]
    unless_null $P5015, fallback4732
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5015, $P5017
  fallback4732:
    $P5018 = $P5015."ast"()
    set $P5019, $P5018
  if1549_end4726:
    set $P5020, $P5019
  if1548_end4720:
    $P5021 = _lex_param_1."!make"($P5020)
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "declarator" :subid("cuid_299_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2248
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2249
    unless_null _lex_param_1, fallback4735
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback4735:
    set $P5001, _lex_param_1["routine_declarator"]
    unless_null $P5001, fallback4736
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback4736:
    unless $P5001 goto if1550_else4733 
.annotate 'line', 2250
    unless_null _lex_param_1, fallback4737
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5005
  fallback4737:
    set $P5004, _lex_param_1["routine_declarator"]
    unless_null $P5004, fallback4738
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5006
  fallback4738:
    $P5007 = $P5004."ast"()
    set $P5012, $P5007
    goto if1550_end4734
  if1550_else4733:
.annotate 'line', 2251
    unless_null _lex_param_1, fallback4739
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5009
  fallback4739:
    set $P5008, _lex_param_1["variable_declarator"]
    unless_null $P5008, fallback4740
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5008, $P5010
  fallback4740:
    $P5011 = $P5008."ast"()
    set $P5012, $P5011
  if1550_end4734:
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<multi>" :subid("cuid_300_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2254
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4743
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback4743:
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4744
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback4744:
    unless $P5001 goto if1551_else4741 
    unless_null _lex_param_1, fallback4745
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5005
  fallback4745:
    set $P5004, _lex_param_1["declarator"]
    unless_null $P5004, fallback4746
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5006
  fallback4746:
    $P5007 = $P5004."ast"()
    set $P5012, $P5007
    goto if1551_end4742
  if1551_else4741:
    unless_null _lex_param_1, fallback4747
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5009
  fallback4747:
    set $P5008, _lex_param_1["routine_def"]
    unless_null $P5008, fallback4748
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5008, $P5010
  fallback4748:
    $P5011 = $P5008."ast"()
    set $P5012, $P5011
  if1551_end4742:
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<proto>" :subid("cuid_301_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2255
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4751
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback4751:
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4752
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback4752:
    unless $P5001 goto if1552_else4749 
    unless_null _lex_param_1, fallback4753
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5005
  fallback4753:
    set $P5004, _lex_param_1["declarator"]
    unless_null $P5004, fallback4754
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5006
  fallback4754:
    $P5007 = $P5004."ast"()
    set $P5012, $P5007
    goto if1552_end4750
  if1552_else4749:
    unless_null _lex_param_1, fallback4755
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5009
  fallback4755:
    set $P5008, _lex_param_1["routine_def"]
    unless_null $P5008, fallback4756
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5008, $P5010
  fallback4756:
    $P5011 = $P5008."ast"()
    set $P5012, $P5011
  if1552_end4750:
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<null>" :subid("cuid_302_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2256
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4757
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback4757:
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4758
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback4758:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "variable_declarator" :subid("cuid_303_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2259
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5067 = 'cuid_461_1358115338.889' 
    capture_lex $P5067 
    .const 'Sub' $P5067 = 'cuid_463_1358115338.889' 
    capture_lex $P5067 
    .const 'Sub' $P5067 = 'cuid_464_1358115338.889' 
    capture_lex $P5067 
    .lex "$past", $P101 
    .lex "$sigil", $P102 
    .lex "$name", $P103 
    .lex "$BLOCK", $P104 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P104, $P5004
.annotate 'line', 2260
    unless_null _lex_param_1, fallback4759
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5006
  fallback4759:
    set $P5005, _lex_param_1["variable"]
    unless_null $P5005, fallback4760
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5005, $P5007
  fallback4760:
    $P5008 = $P5005."ast"()
    set $P101, $P5008
    unless_null _lex_param_1, fallback4761
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5011
  fallback4761:
    set $P5010, _lex_param_1["variable"]
    unless_null $P5010, fallback4762
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5010, $P5012
  fallback4762:
    set $P5009, $P5010["sigil"]
    unless_null $P5009, fallback4763
    nqp_get_sc_object $P5013, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5009, $P5013
  fallback4763:
    set $P102, $P5009
.annotate 'line', 2262
    $P5014 = $P101."name"()
    set $P103, $P5014
.annotate 'line', 2263
    find_dynamic_lex $P5015, "$*W"
    unless_null $P5015, fallback4764
    nqp_get_sc_object $P5018, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["$W"]
    unless_null $P5016, fallback4765
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5016, $P5019
  fallback4765:
    unless_null $P5016, vivi_15534766
    die "Contextual $*W not found"
    box $P5020, "Contextual $*W not found"
    set $P5016, $P5020
  vivi_15534766:
    set $P5015, $P5016
  fallback4764:
    $P5021 = $P5015."cur_lexpad"()
    set $P104, $P5021
    set $P5023, $P103
    unless $P103 goto if1555_end4770 
.annotate 'line', 2264
    $P5022 = $P104."symbol"($P103)
    set $P5023, $P5022
  if1555_end4770:
    unless $P5023 goto if1554_end4768 
.annotate 'line', 2265
    $P5024 = _lex_param_1."CURSOR"()
    $P5025 = $P5024."panic"("Redeclaration of symbol ", $P103)
  if1554_end4768:
    find_dynamic_lex $P5026, "$*SCOPE"
    unless_null $P5026, fallback4773
    nqp_get_sc_object $P5029, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["$SCOPE"]
    unless_null $P5027, fallback4774
    nqp_get_sc_object $P5030, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5027, $P5030
  fallback4774:
    unless_null $P5027, vivi_15574775
    die "Contextual $*SCOPE not found"
    box $P5031, "Contextual $*SCOPE not found"
    set $P5027, $P5031
  vivi_15574775:
    set $P5026, $P5027
  fallback4773:
    set $S5001, $P5026
    iseq $I5001, $S5001, "has"
    unless $I5001 goto if1556_else4771 
    .const 'Sub' $P5032 = 'cuid_461_1358115338.889' 
    capture_lex $P5032
    $P5033 = $P5032()
    goto if1556_end4772
  if1556_else4771:
    find_dynamic_lex $P5034, "$*SCOPE"
    unless_null $P5034, fallback4827
    nqp_get_sc_object $P5037, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5036, $P5037
    set $P5035, $P5036["$SCOPE"]
    unless_null $P5035, fallback4828
    nqp_get_sc_object $P5038, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5035, $P5038
  fallback4828:
    unless_null $P5035, vivi_15754829
    die "Contextual $*SCOPE not found"
    box $P5039, "Contextual $*SCOPE not found"
    set $P5035, $P5039
  vivi_15754829:
    set $P5034, $P5035
  fallback4827:
    set $S5002, $P5034
    iseq $I5002, $S5002, "our"
    unless $I5002 goto if1574_else4825 
.annotate 'line', 2295
    unless_null _lex_param_1, fallback4832
    nqp_get_sc_object $P5041, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5041
  fallback4832:
    set $P5040, _lex_param_1["typename"]
    unless_null $P5040, fallback4833
    nqp_get_sc_object $P5042, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5040, $P5042
  fallback4833:
    unless $P5040 goto if1576_end4831 
.annotate 'line', 2299
.annotate 'line', 2300
    $P5043 = _lex_param_1."CURSOR"()
    $P5044 = $P5043."panic"("Cannot put types on our-scoped variables")
  if1576_end4831:
    unless_null _lex_param_1, fallback4834
    nqp_get_sc_object $P5046, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5046
  fallback4834:
    set $P5045, _lex_param_1["variable"]
    unless_null $P5045, fallback4835
    nqp_get_sc_object $P5047, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5045, $P5047
  fallback4835:
    set $S5003, $P5045
    box $P5048, $S5003
    set $P103, $P5048
.annotate 'line', 2303
    new $P5049, 'ResizablePMCArray'
    push $P5049, $P103
    $P5050 = "&lexical_package_lookup"($P5049, _lex_param_1)
    set $P101, $P5050
.annotate 'line', 2304
    $P5051 = $P104."symbol"($P103, "package" :named("scope"))
    set $P5054, $P5051
    goto if1574_end4826
  if1574_else4825:
    .const 'Sub' $P5052 = 'cuid_463_1358115338.889' 
    capture_lex $P5052
    $P5053 = $P5052()
    set $P5054, $P5053
  if1574_end4826:
  if1556_end4772:
    unless_null _lex_param_1, fallback4855
    nqp_get_sc_object $P5056, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5056
  fallback4855:
    set $P5055, _lex_param_1["trait"]
    unless_null $P5055, fallback4856
    nqp_get_sc_object $P5057, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5055, $P5057
  fallback4856:
    unless $P5055 goto if1581_end4854 
.annotate 'line', 2333
    unless_null _lex_param_1, fallback4857
    nqp_get_sc_object $P5062, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5062
  fallback4857:
    set $P5061, _lex_param_1["trait"]
    unless_null $P5061, fallback4858
    nqp_get_sc_object $P5063, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5061, $P5063
  fallback4858:
    set $P5058, $P5061
    iter $P5060, $P5061
  for_next4859:
    unless $P5060, for_done4861
    shift $P5065, $P5060
  for_redo4860:
    .const 'Sub' $P5064 = 'cuid_464_1358115338.889' 
    capture_lex $P5064
    $P5058 = $P5064($P5065)
    goto for_next4859
  for_done4861:
  if1581_end4854:
.annotate 'line', 2337
    $P5066 = _lex_param_1."!make"($P101)
    .return ($P5066) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_461_1358115338.889") :anon :lex :outer("cuid_303_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2267
    .lex "%lit_args", $P101 
    .lex "%obj_args", $P102 
    new $P5001, 'Hash'
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    find_dynamic_lex $P5003, "%*HOW"
    unless_null $P5003, fallback4778
    nqp_get_sc_object $P5006, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["%HOW"]
    unless_null $P5004, fallback4779
    nqp_get_sc_object $P5008, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5007, $P5008
    new $P5009, 'Hash'
    set $P5007["%HOW"], $P5009
    set $P5004, $P5009
  fallback4779:
    unless_null $P5004, vivi_15594780
    die "Contextual %*HOW not found"
    box $P5010, "Contextual %*HOW not found"
    set $P5004, $P5010
  vivi_15594780:
    set $P5003, $P5004
  fallback4778:
    find_dynamic_lex $P5011, "$*PKGDECL"
    unless_null $P5011, fallback4781
    nqp_get_sc_object $P5014, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["$PKGDECL"]
    unless_null $P5012, fallback4782
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5012, $P5015
  fallback4782:
    unless_null $P5012, vivi_15604783
    die "Contextual $*PKGDECL not found"
    box $P5016, "Contextual $*PKGDECL not found"
    set $P5012, $P5016
  vivi_15604783:
    set $P5011, $P5012
  fallback4781:
    set $S5002, $P5011
    concat $S5001, $S5002, "-attr"
    exists $I5001, $P5003[$S5001]
    if $I5001 goto unless1558_end4777 
.annotate 'line', 2269
.annotate 'line', 2270
    find_lex $P5017, "$/"
    $P5018 = $P5017."CURSOR"()
    find_dynamic_lex $P5019, "$*PKGDECL"
    unless_null $P5019, fallback4784
    nqp_get_sc_object $P5022, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["$PKGDECL"]
    unless_null $P5020, fallback4785
    nqp_get_sc_object $P5023, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5020, $P5023
  fallback4785:
    unless_null $P5020, vivi_15614786
    die "Contextual $*PKGDECL not found"
    box $P5024, "Contextual $*PKGDECL not found"
    set $P5020, $P5024
  vivi_15614786:
    set $P5019, $P5020
  fallback4784:
    set $S5004, $P5019
    concat $S5003, $S5004, " packages do not support attributes"
    $P5025 = $P5018."panic"($S5003)
  unless1558_end4777:
    find_lex $P5026, "$name"
    set $P101["name"], $P5026
    find_lex $P5028, "$/"
    unless_null $P5028, fallback4789
    nqp_get_sc_object $P5029, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5028, $P5029
  fallback4789:
    set $P5027, $P5028["typename"]
    unless_null $P5027, fallback4790
    nqp_get_sc_object $P5030, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5027, $P5030
  fallback4790:
    unless $P5027 goto if1562_end4788 
.annotate 'line', 2277
.annotate 'line', 2278
    find_dynamic_lex $P5031, "$*W"
    unless_null $P5031, fallback4791
    nqp_get_sc_object $P5034, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["$W"]
    unless_null $P5032, fallback4792
    nqp_get_sc_object $P5035, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5032, $P5035
  fallback4792:
    unless_null $P5032, vivi_15634793
    die "Contextual $*W not found"
    box $P5036, "Contextual $*W not found"
    set $P5032, $P5036
  vivi_15634793:
    set $P5031, $P5032
  fallback4791:
    new $P5037, 'ResizablePMCArray'
    find_lex $P5040, "$/"
    unless_null $P5040, fallback4794
    nqp_get_sc_object $P5041, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5040, $P5041
  fallback4794:
    set $P5039, $P5040["typename"]
    unless_null $P5039, fallback4795
    nqp_get_sc_object $P5042, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5039, $P5042
  fallback4795:
    set $P5038, $P5039[0]
    unless_null $P5038, fallback4796
    nqp_get_sc_object $P5043, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5038, $P5043
  fallback4796:
    set $S5005, $P5038
    box $P5044, $S5005
    push $P5037, $P5044
    $P5045 = $P5031."find_sym"($P5037)
    set $P102["type"], $P5045
  if1562_end4788:
    find_lex $P5046, "$sigil"
    set $S5006, $P5046
    iseq $I5002, $S5006, "$"
    set $I5004, $I5002
    if $I5002 goto unless1565_end4800 
    find_lex $P5047, "$sigil"
    set $S5007, $P5047
    iseq $I5003, $S5007, "&"
    set $I5004, $I5003
  unless1565_end4800:
    unless $I5004 goto if1564_end4798 
.annotate 'line', 2280
    find_lex $P5049, "$/"
    unless_null $P5049, fallback4803
    nqp_get_sc_object $P5050, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5049, $P5050
  fallback4803:
    set $P5048, $P5049["typename"]
    unless_null $P5048, fallback4804
    nqp_get_sc_object $P5051, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5048, $P5051
  fallback4804:
    unless $P5048 goto if1566_else4801 
.annotate 'line', 2281
    set $P5052, $P102["type"]
    unless_null $P5052, fallback4805
    nqp_get_sc_object $P5053, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5052, $P5053
  fallback4805:
    set $P102["default"], $P5052
    set $P5065, $P5052
    goto if1566_end4802
  if1566_else4801:
.annotate 'line', 2284
    new $P5063, 'ExceptionHandler'
    set_label $P5063, catch_handler_15694810
    $P5063.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5063
.annotate 'line', 2285
    find_dynamic_lex $P5054, "$*W"
    unless_null $P5054, fallback4806
    nqp_get_sc_object $P5057, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5056, $P5057
    set $P5055, $P5056["$W"]
    unless_null $P5055, fallback4807
    nqp_get_sc_object $P5058, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5055, $P5058
  fallback4807:
    unless_null $P5055, vivi_15674808
    die "Contextual $*W not found"
    box $P5059, "Contextual $*W not found"
    set $P5055, $P5059
  vivi_15674808:
    set $P5054, $P5055
  fallback4806:
    new $P5060, 'ResizablePMCArray'
    box $P5061, "NQPMu"
    push $P5060, $P5061
    $P5062 = $P5054."find_sym"($P5060)
    set $P102["default"], $P5062
    set $P5064, $P5062
    pop_eh 
    goto skip_handler_15684809
  catch_handler_15694810:
    .get_results ($P5063) 
    set $I10001, 1
    set $P5063["handled"], $I10001
    nqp_get_sc_object $P10001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    finalize $P5063
    pop_upto_eh $P5063
    pop_eh 
    set $P5064, $P10001
    goto skip_handler_15684809
  skip_handler_15684809:
    set $P5065, $P5064
  if1566_end4802:
  if1564_end4798:
.annotate 'line', 2290
    find_dynamic_lex $P5066, "$*W"
    unless_null $P5066, fallback4811
    nqp_get_sc_object $P5069, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5068, $P5069
    set $P5067, $P5068["$W"]
    unless_null $P5067, fallback4812
    nqp_get_sc_object $P5070, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5067, $P5070
  fallback4812:
    unless_null $P5067, vivi_15704813
    die "Contextual $*W not found"
    box $P5071, "Contextual $*W not found"
    set $P5067, $P5071
  vivi_15704813:
    set $P5066, $P5067
  fallback4811:
    find_dynamic_lex $P5072, "$*PACKAGE"
    unless_null $P5072, fallback4814
    nqp_get_sc_object $P5075, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5074, $P5075
    set $P5073, $P5074["$PACKAGE"]
    unless_null $P5073, fallback4815
    nqp_get_sc_object $P5076, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5073, $P5076
  fallback4815:
    unless_null $P5073, vivi_15714816
    die "Contextual $*PACKAGE not found"
    box $P5077, "Contextual $*PACKAGE not found"
    set $P5073, $P5077
  vivi_15714816:
    set $P5072, $P5073
  fallback4814:
    find_dynamic_lex $P5079, "%*HOW"
    unless_null $P5079, fallback4817
    nqp_get_sc_object $P5082, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5081, $P5082
    set $P5080, $P5081["%HOW"]
    unless_null $P5080, fallback4818
    nqp_get_sc_object $P5084, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5083, $P5084
    new $P5085, 'Hash'
    set $P5083["%HOW"], $P5085
    set $P5080, $P5085
  fallback4818:
    unless_null $P5080, vivi_15724819
    die "Contextual %*HOW not found"
    box $P5086, "Contextual %*HOW not found"
    set $P5080, $P5086
  vivi_15724819:
    set $P5079, $P5080
  fallback4817:
    find_dynamic_lex $P5087, "$*PKGDECL"
    unless_null $P5087, fallback4820
    nqp_get_sc_object $P5090, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5089, $P5090
    set $P5088, $P5089["$PKGDECL"]
    unless_null $P5088, fallback4821
    nqp_get_sc_object $P5091, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5088, $P5091
  fallback4821:
    unless_null $P5088, vivi_15734822
    die "Contextual $*PKGDECL not found"
    box $P5092, "Contextual $*PKGDECL not found"
    set $P5088, $P5092
  vivi_15734822:
    set $P5087, $P5088
  fallback4820:
    set $S5009, $P5087
    concat $S5008, $S5009, "-attr"
    set $P5078, $P5079[$S5008]
    unless_null $P5078, fallback4823
    nqp_get_sc_object $P5093, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5078, $P5093
  fallback4823:
    $P5066."pkg_add_attribute"($P5072, $P5078, $P101, $P102)
.annotate 'line', 2293
    nqp_get_sc_object $P5097, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5096, $P5097, "QAST"
    get_who $P5095, $P5096
    set $P5094, $P5095["Stmts"]
    unless_null $P5094, fallback4824
    nqp_get_sc_object $P5098, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5094, $P5098
  fallback4824:
    $P5099 = $P5094."new"()
    store_lex "$past", $P5099
    .return ($P5099) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_463_1358115338.889") :anon :lex :outer("cuid_303_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2306
    .const 'Sub' $P5054 = 'cuid_462_1358115338.889' 
    capture_lex $P5054 
    .lex "$type", $P101 
    .lex "$default", $P102 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
    find_lex $P5004, "$/"
    unless_null $P5004, fallback4838
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5005
  fallback4838:
    set $P5003, $P5004["typename"]
    unless_null $P5003, fallback4839
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5003, $P5006
  fallback4839:
    unless $P5003 goto if1577_else4836 
.annotate 'line', 2309
    find_lex $P5007, "$sigil"
    set $S5001, $P5007
    iseq $I5001, $S5001, "$"
    if $I5001 goto unless1578_end4841 
.annotate 'line', 2310
.annotate 'line', 2311
    find_lex $P5008, "$/"
    $P5009 = $P5008."CURSOR"()
    $P5010 = $P5009."panic"("Only typed scalars are currently supported in NQP")
  unless1578_end4841:
.annotate 'line', 2313
    find_dynamic_lex $P5011, "$*W"
    unless_null $P5011, fallback4842
    nqp_get_sc_object $P5014, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["$W"]
    unless_null $P5012, fallback4843
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5012, $P5015
  fallback4843:
    unless_null $P5012, vivi_15794844
    die "Contextual $*W not found"
    box $P5016, "Contextual $*W not found"
    set $P5012, $P5016
  vivi_15794844:
    set $P5011, $P5012
  fallback4842:
    new $P5017, 'ResizablePMCArray'
    find_lex $P5020, "$/"
    unless_null $P5020, fallback4845
    nqp_get_sc_object $P5021, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5020, $P5021
  fallback4845:
    set $P5019, $P5020["typename"]
    unless_null $P5019, fallback4846
    nqp_get_sc_object $P5022, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5019, $P5022
  fallback4846:
    set $P5018, $P5019[0]
    unless_null $P5018, fallback4847
    nqp_get_sc_object $P5023, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5018, $P5023
  fallback4847:
    set $S5002, $P5018
    box $P5024, $S5002
    push $P5017, $P5024
    $P5025 = $P5011."find_sym"($P5017)
    set $P101, $P5025
    repr_get_primitive_type_spec $I5002, $P101
    unless $I5002 goto if1580_else4848 
    .const 'Sub' $P5026 = 'cuid_462_1358115338.889' 
    capture_lex $P5026
    $P5027 = $P5026($I5002)
    set $P5031, $P5027
    goto if1580_end4849
  if1580_else4848:
.annotate 'line', 2317
.annotate 'line', 2318
    find_lex $P5028, "$/"
    $P5029 = $P5028."CURSOR"()
    $P5030 = $P5029."panic"("Only native types are currently supported/checked")
    set $P5031, $P5030
  if1580_end4849:
    goto if1577_end4837
  if1577_else4836:
.annotate 'line', 2321
.annotate 'line', 2322
    find_lex $P5032, "$sigil"
    $P5033 = "&default_for"($P5032)
    set $P102, $P5033
  if1577_end4837:
.annotate 'line', 2324
    find_lex $P5035, "$BLOCK"
    set $P5034, $P5035[0]
    unless_null $P5034, fallback4850
    nqp_get_sc_object $P5036, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5034, $P5036
  fallback4850:
    nqp_get_sc_object $P5040, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5039, $P5040, "QAST"
    get_who $P5038, $P5039
    set $P5037, $P5038["Op"]
    unless_null $P5037, fallback4851
    nqp_get_sc_object $P5041, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5037, $P5041
  fallback4851:
    find_lex $P5042, "$/"
.annotate 'line', 2326
    nqp_get_sc_object $P5046, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5045, $P5046, "QAST"
    get_who $P5044, $P5045
    set $P5043, $P5044["Var"]
    unless_null $P5043, fallback4852
    nqp_get_sc_object $P5047, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5043, $P5047
  fallback4852:
    find_lex $P5048, "$name"
    $P5049 = $P5043."new"($P5048 :named("name"), "lexical" :named("scope"), "var" :named("decl"), $P101 :named("returns"))
    $P5050 = $P5037."new"($P5049, $P102, "bind" :named("op"), $P5042 :named("node"))
    $P5034."push"($P5050)
.annotate 'line', 2329
    find_lex $P5051, "$BLOCK"
    find_lex $P5052, "$name"
    $P5053 = $P5051."symbol"($P5052, "lexical" :named("scope"), $P101 :named("type"))
    .return ($P5053) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_462_1358115338.889") :anon :lex :outer("cuid_463_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2314
    .param pmc _lex_param_0 
    .lex "$prim_spec", _lex_param_0 
.annotate 'line', 2315
    $P5001 = "&default_value_for_prim"(_lex_param_0)
    store_lex "$default", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_464_1358115338.889") :anon :lex :outer("cuid_303_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2334
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$/"
    $P5001 = _lex_param_0."ast"()
    $P5003 = $P5001($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<sub>" :subid("cuid_304_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2340
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4862
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback4862:
    set $P5001, _lex_param_1["routine_def"]
    unless_null $P5001, fallback4863
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback4863:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<method>" :subid("cuid_305_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2341
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4864
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback4864:
    set $P5001, _lex_param_1["method_def"]
    unless_null $P5001, fallback4865
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback4865:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "routine_def" :subid("cuid_306_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2343
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5060 = 'cuid_468_1358115338.889' 
    capture_lex $P5060 
    .const 'Sub' $P5060 = 'cuid_471_1358115338.889' 
    capture_lex $P5060 
    .lex "$past", $P101 
    .lex "$block", $P102 
    .lex "$lexpast", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P103, $P5003
    unless_null _lex_param_1, fallback4868
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5005
  fallback4868:
    set $P5004, _lex_param_1["onlystar"]
    unless_null $P5004, fallback4869
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5006
  fallback4869:
    unless $P5004 goto if1582_else4866 
.annotate 'line', 2347
.annotate 'line', 2348
    $P5007 = "&only_star_block"()
    set $P101, $P5007
    goto if1582_end4867
  if1582_else4866:
.annotate 'line', 2350
.annotate 'line', 2351
    unless_null _lex_param_1, fallback4870
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5009
  fallback4870:
    set $P5008, _lex_param_1["blockoid"]
    unless_null $P5008, fallback4871
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5008, $P5010
  fallback4871:
    $P5011 = $P5008."ast"()
    set $P101, $P5011
.annotate 'line', 2352
    $P101."blocktype"("declaration")
    find_dynamic_lex $P5012, "$*RETURN_USED"
    unless_null $P5012, fallback4874
    nqp_get_sc_object $P5015, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5014, $P5015
    set $P5013, $P5014["$RETURN_USED"]
    unless_null $P5013, fallback4875
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5013, $P5016
  fallback4875:
    unless_null $P5013, vivi_15844876
    die "Contextual $*RETURN_USED not found"
    box $P5017, "Contextual $*RETURN_USED not found"
    set $P5013, $P5017
  vivi_15844876:
    set $P5012, $P5013
  fallback4874:
    set $P5021, $P5012
    unless $P5012 goto if1583_end4873 
.annotate 'line', 2353
.annotate 'line', 2354
    set $P5018, $P101[1]
    unless_null $P5018, fallback4877
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5018, $P5019
  fallback4877:
    $P5020 = "&wrap_return_handler"($P5018)
    set $P101[1], $P5020
    set $P5021, $P5020
  if1583_end4873:
  if1582_end4867:
    set $P102, $P101
    unless_null _lex_param_1, fallback4880
    nqp_get_sc_object $P5023, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5023
  fallback4880:
    set $P5022, _lex_param_1["deflongname"]
    unless_null $P5022, fallback4881
    nqp_get_sc_object $P5024, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5022, $P5024
  fallback4881:
    unless $P5022 goto if1585_else4878 
    .const 'Sub' $P5025 = 'cuid_468_1358115338.889' 
    capture_lex $P5025
    $P5026 = $P5025()
    goto if1585_end4879
  if1585_else4878:
.annotate 'line', 2451
.annotate 'line', 2452
    find_dynamic_lex $P5027, "$*W"
    unless_null $P5027, fallback4993
    nqp_get_sc_object $P5030, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5029, $P5030
    set $P5028, $P5029["$W"]
    unless_null $P5028, fallback4994
    nqp_get_sc_object $P5031, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5028, $P5031
  fallback4994:
    unless_null $P5028, vivi_16204995
    die "Contextual $*W not found"
    box $P5032, "Contextual $*W not found"
    set $P5028, $P5032
  vivi_16204995:
    set $P5027, $P5028
  fallback4993:
    $P5033 = $P5027."is_precompilation_mode"()
    set $P5041, $P5033
    unless $P5033 goto if1619_end4992 
.annotate 'line', 2453
    find_dynamic_lex $P5034, "$*W"
    unless_null $P5034, fallback4996
    nqp_get_sc_object $P5037, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5036, $P5037
    set $P5035, $P5036["$W"]
    unless_null $P5035, fallback4997
    nqp_get_sc_object $P5038, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5035, $P5038
  fallback4997:
    unless_null $P5035, vivi_16214998
    die "Contextual $*W not found"
    box $P5039, "Contextual $*W not found"
    set $P5035, $P5039
  vivi_16214998:
    set $P5034, $P5035
  fallback4996:
    $P5040 = $P5034."create_code"($P101, "<anon>", 0)
    set $P5041, $P5040
  if1619_end4992:
  if1585_end4879:
.annotate 'line', 2457
    nqp_get_sc_object $P5045, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["Op"]
    unless_null $P5042, fallback4999
    nqp_get_sc_object $P5046, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5042, $P5046
  fallback4999:
    $P5047 = $P5042."new"($P101, "takeclosure" :named("op"))
    set $P103, $P5047
    set $P103["sink"], $P101
    set $P103["block_past"], $P102
.annotate 'line', 2460
    _lex_param_1."!make"($P103)
    unless_null _lex_param_1, fallback5002
    nqp_get_sc_object $P5049, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5049
  fallback5002:
    set $P5048, _lex_param_1["trait"]
    unless_null $P5048, fallback5003
    nqp_get_sc_object $P5050, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5048, $P5050
  fallback5003:
    set $P5059, $P5048
    unless $P5048 goto if1622_end5001 
.annotate 'line', 2463
    unless_null _lex_param_1, fallback5004
    nqp_get_sc_object $P5055, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5055
  fallback5004:
    set $P5054, _lex_param_1["trait"]
    unless_null $P5054, fallback5005
    nqp_get_sc_object $P5056, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5054, $P5056
  fallback5005:
    set $P5051, $P5054
    iter $P5053, $P5054
  for_next5006:
    unless $P5053, for_done5008
    shift $P5058, $P5053
  for_redo5007:
    .const 'Sub' $P5057 = 'cuid_471_1358115338.889' 
    capture_lex $P5057
    $P5051 = $P5057($P5058)
    goto for_next5006
  for_done5008:
    set $P5059, $P5051
  if1622_end5001:
    .return ($P5059) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_468_1358115338.889") :anon :lex :outer("cuid_306_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2359
    .const 'Sub' $P5078 = 'cuid_467_1358115338.889' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_469_1358115338.889' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_470_1358115338.889' 
    capture_lex $P5078 
    .lex "$name", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    find_lex $P5004, "$/"
    unless_null $P5004, fallback4882
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5005
  fallback4882:
    set $P5003, $P5004["sigil"]
    unless_null $P5003, fallback4883
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5003, $P5006
  fallback4883:
    set $P5002, $P5003[0]
    unless_null $P5002, fallback4884
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5007
  fallback4884:
    set $S5002, $P5002
.annotate 'line', 2360
    find_lex $P5010, "$/"
    unless_null $P5010, fallback4885
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5010, $P5011
  fallback4885:
    set $P5009, $P5010["deflongname"]
    unless_null $P5009, fallback4886
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5009, $P5012
  fallback4886:
    set $P5008, $P5009[0]
    unless_null $P5008, fallback4887
    nqp_get_sc_object $P5013, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5008, $P5013
  fallback4887:
    $P5014 = $P5008."ast"()
    set $S5003, $P5014
    concat $S5001, $S5002, $S5003
    box $P5015, $S5001
    set $P101, $P5015
.annotate 'line', 2361
    find_lex $P5016, "$past"
    $P5016."name"($P101)
    find_dynamic_lex $P5017, "$*SCOPE"
    unless_null $P5017, fallback4894
    nqp_get_sc_object $P5020, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5019, $P5020
    set $P5018, $P5019["$SCOPE"]
    unless_null $P5018, fallback4895
    nqp_get_sc_object $P5021, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5018, $P5021
  fallback4895:
    unless_null $P5018, vivi_15894896
    die "Contextual $*SCOPE not found"
    box $P5022, "Contextual $*SCOPE not found"
    set $P5018, $P5022
  vivi_15894896:
    set $P5017, $P5018
  fallback4894:
    set $S5004, $P5017
    iseq $I5001, $S5004, ""
    set $I5003, $I5001
    if $I5001 goto unless1588_end4893 
    find_dynamic_lex $P5023, "$*SCOPE"
    unless_null $P5023, fallback4897
    nqp_get_sc_object $P5026, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5025, $P5026
    set $P5024, $P5025["$SCOPE"]
    unless_null $P5024, fallback4898
    nqp_get_sc_object $P5027, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5024, $P5027
  fallback4898:
    unless_null $P5024, vivi_15904899
    die "Contextual $*SCOPE not found"
    box $P5028, "Contextual $*SCOPE not found"
    set $P5024, $P5028
  vivi_15904899:
    set $P5023, $P5024
  fallback4897:
    set $S5005, $P5023
    iseq $I5002, $S5005, "my"
    set $I5003, $I5002
  unless1588_end4893:
    set $I5005, $I5003
    if $I5003 goto unless1587_end4891 
    find_dynamic_lex $P5029, "$*SCOPE"
    unless_null $P5029, fallback4900
    nqp_get_sc_object $P5032, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5031, $P5032
    set $P5030, $P5031["$SCOPE"]
    unless_null $P5030, fallback4901
    nqp_get_sc_object $P5033, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5030, $P5033
  fallback4901:
    unless_null $P5030, vivi_15914902
    die "Contextual $*SCOPE not found"
    box $P5034, "Contextual $*SCOPE not found"
    set $P5030, $P5034
  vivi_15914902:
    set $P5029, $P5030
  fallback4900:
    set $S5006, $P5029
    iseq $I5004, $S5006, "our"
    set $I5005, $I5004
  unless1587_end4891:
    unless $I5005 goto if1586_else4888 
.annotate 'line', 2362
    find_dynamic_lex $P5035, "$*MULTINESS"
    unless_null $P5035, fallback4905
    nqp_get_sc_object $P5038, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5037, $P5038
    set $P5036, $P5037["$MULTINESS"]
    unless_null $P5036, fallback4906
    nqp_get_sc_object $P5039, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5036, $P5039
  fallback4906:
    unless_null $P5036, vivi_15934907
    die "Contextual $*MULTINESS not found"
    box $P5040, "Contextual $*MULTINESS not found"
    set $P5036, $P5040
  vivi_15934907:
    set $P5035, $P5036
  fallback4905:
    set $S5007, $P5035
    iseq $I5006, $S5007, "multi"
    unless $I5006 goto if1592_else4903 
    .const 'Sub' $P5041 = 'cuid_467_1358115338.889' 
    capture_lex $P5041
    $P5042 = $P5041()
    goto if1592_end4904
  if1592_else4903:
    find_dynamic_lex $P5043, "$*MULTINESS"
    unless_null $P5043, fallback4943
    nqp_get_sc_object $P5046, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5045, $P5046
    set $P5044, $P5045["$MULTINESS"]
    unless_null $P5044, fallback4944
    nqp_get_sc_object $P5047, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5044, $P5047
  fallback4944:
    unless_null $P5044, vivi_16054945
    die "Contextual $*MULTINESS not found"
    box $P5048, "Contextual $*MULTINESS not found"
    set $P5044, $P5048
  vivi_16054945:
    set $P5043, $P5044
  fallback4943:
    set $S5008, $P5043
    iseq $I5007, $S5008, "proto"
    unless $I5007 goto if1604_else4941 
    .const 'Sub' $P5049 = 'cuid_469_1358115338.889' 
    capture_lex $P5049
    $P5050 = $P5049()
    set $P5053, $P5050
    goto if1604_end4942
  if1604_else4941:
    .const 'Sub' $P5051 = 'cuid_470_1358115338.889' 
    capture_lex $P5051
    $P5052 = $P5051()
    set $P5053, $P5052
  if1604_end4942:
  if1592_end4904:
.annotate 'line', 2440
    nqp_get_sc_object $P5057, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5056, $P5057, "QAST"
    get_who $P5055, $P5056
    set $P5054, $P5055["Var"]
    unless_null $P5054, fallback4980
    nqp_get_sc_object $P5058, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5054, $P5058
  fallback4980:
    set $S5010, $P101
    concat $S5009, "&", $S5010
    $P5059 = $P5054."new"($S5009 :named("name"), "lexical" :named("scope"))
    store_lex "$past", $P5059
    goto if1586_end4889
  if1586_else4888:
.annotate 'line', 2442
.annotate 'line', 2443
    find_lex $P5060, "$/"
    $P5061 = $P5060."CURSOR"()
    find_dynamic_lex $P5062, "$*SCOPE"
    unless_null $P5062, fallback4981
    nqp_get_sc_object $P5065, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5064, $P5065
    set $P5063, $P5064["$SCOPE"]
    unless_null $P5063, fallback4982
    nqp_get_sc_object $P5066, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5063, $P5066
  fallback4982:
    unless_null $P5063, vivi_16154983
    die "Contextual $*SCOPE not found"
    box $P5067, "Contextual $*SCOPE not found"
    set $P5063, $P5067
  vivi_16154983:
    set $P5062, $P5063
  fallback4981:
    set $S5012, $P5062
    concat $S5011, $S5012, " scoped routines are not supported yet"
    $P5068 = $P5061."panic"($S5011)
  if1586_end4889:
    set $S5013, $P101
    iseq $I5008, $S5013, "MAIN"
    set $I5010, $I5008
    unless $I5008 goto if1617_end4987 
    find_dynamic_lex $P5069, "$*MULTINESS"
    unless_null $P5069, fallback4988
    nqp_get_sc_object $P5072, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5071, $P5072
    set $P5070, $P5071["$MULTINESS"]
    unless_null $P5070, fallback4989
    nqp_get_sc_object $P5073, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5070, $P5073
  fallback4989:
    unless_null $P5070, vivi_16184990
    die "Contextual $*MULTINESS not found"
    box $P5074, "Contextual $*MULTINESS not found"
    set $P5070, $P5074
  vivi_16184990:
    set $P5069, $P5070
  fallback4988:
    set $S5014, $P5069
    isne $I5009, $S5014, "multi"
    set $I5010, $I5009
  if1617_end4987:
    box $P5077, $I5010
    set $P5076, $P5077
    unless $I5010 goto if1616_end4985 
.annotate 'line', 2447
    find_lex $P5075, "$block"
    store_dynamic_lex "$*MAIN_SUB", $P5075
    set $P5076, $P5075
  if1616_end4985:
    .return ($P5076) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_467_1358115338.889") :anon :lex :outer("cuid_468_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2363
    .const 'Sub' $P5048 = 'cuid_466_1358115338.889' 
    capture_lex $P5048 
    .lex "$proto", $P101 
    .lex "%sym", $P102 
    .lex "$code", $P103 
    .lex "$BLOCK", $P104 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P104, $P5004
    find_dynamic_lex $P5005, "$*SCOPE"
    unless_null $P5005, fallback4910
    nqp_get_sc_object $P5008, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["$SCOPE"]
    unless_null $P5006, fallback4911
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5006, $P5009
  fallback4911:
    unless_null $P5006, vivi_15954912
    die "Contextual $*SCOPE not found"
    box $P5010, "Contextual $*SCOPE not found"
    set $P5006, $P5010
  vivi_15954912:
    set $P5005, $P5006
  fallback4910:
    set $S5001, $P5005
    iseq $I5001, $S5001, "our"
    unless $I5001 goto if1594_end4909 
.annotate 'line', 2365
    box $P5011, "a multi can not be our-scoped"
    die $P5011
  if1594_end4909:
.annotate 'line', 2367
    find_dynamic_lex $P5012, "$*W"
    unless_null $P5012, fallback4913
    nqp_get_sc_object $P5015, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5014, $P5015
    set $P5013, $P5014["$W"]
    unless_null $P5013, fallback4914
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5013, $P5016
  fallback4914:
    unless_null $P5013, vivi_15964915
    die "Contextual $*W not found"
    box $P5017, "Contextual $*W not found"
    set $P5013, $P5017
  vivi_15964915:
    set $P5012, $P5013
  fallback4913:
    $P5018 = $P5012."cur_lexpad"()
    find_lex $P5019, "$name"
    set $S5003, $P5019
    concat $S5002, "&", $S5003
    $P5020 = $P5018."symbol"($S5002)
    set $P102, $P5020
    set $P5021, $P102["proto"]
    unless_null $P5021, fallback4918
    nqp_get_sc_object $P5022, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5021, $P5022
  fallback4918:
    unless $P5021 goto if1597_else4916 
.annotate 'line', 2368
    set $P5023, $P102["value"]
    unless_null $P5023, fallback4919
    nqp_get_sc_object $P5024, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5023, $P5024
  fallback4919:
    set $P101, $P5023
    goto if1597_end4917
  if1597_else4916:
    .const 'Sub' $P5025 = 'cuid_466_1358115338.889' 
    capture_lex $P5025
    $P5026 = $P5025()
  if1597_end4917:
.annotate 'line', 2397
    find_dynamic_lex $P5027, "$*W"
    unless_null $P5027, fallback4934
    nqp_get_sc_object $P5030, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5029, $P5030
    set $P5028, $P5029["$W"]
    unless_null $P5028, fallback4935
    nqp_get_sc_object $P5031, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5028, $P5031
  fallback4935:
    unless_null $P5028, vivi_16024936
    die "Contextual $*W not found"
    box $P5032, "Contextual $*W not found"
    set $P5028, $P5032
  vivi_16024936:
    set $P5027, $P5028
  fallback4934:
    find_lex $P5033, "$past"
    find_lex $P5034, "$name"
    $P5035 = $P5027."create_code"($P5033, $P5034, 0)
    set $P103, $P5035
.annotate 'line', 2398
    find_lex $P5036, "$past"
    "&attach_multi_signature"($P103, $P5036)
.annotate 'line', 2401
    $P101."add_dispatchee"($P103)
.annotate 'line', 2404
    find_dynamic_lex $P5037, "$*W"
    unless_null $P5037, fallback4937
    nqp_get_sc_object $P5040, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5039, $P5040
    set $P5038, $P5039["$W"]
    unless_null $P5038, fallback4938
    nqp_get_sc_object $P5041, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5038, $P5041
  fallback4938:
    unless_null $P5038, vivi_16034939
    die "Contextual $*W not found"
    box $P5042, "Contextual $*W not found"
    set $P5038, $P5042
  vivi_16034939:
    set $P5037, $P5038
  fallback4937:
    $P5043 = $P5037."cur_lexpad"()
    set $P104, $P5043
.annotate 'line', 2405
    set $P5044, $P104[0]
    unless_null $P5044, fallback4940
    nqp_get_sc_object $P5045, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5044, $P5045
  fallback4940:
    find_lex $P5046, "$past"
    $P5047 = $P5044."push"($P5046)
    .return ($P5047) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_466_1358115338.889") :anon :lex :outer("cuid_467_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2373
    .const 'Sub' $P5018 = 'cuid_465_1358115338.889' 
    capture_lex $P5018 
    .lex "$found_proto", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
.annotate 'line', 2376
    find_dynamic_lex $P5005, "$*W"
    unless_null $P5005, fallback4920
    nqp_get_sc_object $P5008, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["$W"]
    unless_null $P5006, fallback4921
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5006, $P5009
  fallback4921:
    unless_null $P5006, vivi_15984922
    die "Contextual $*W not found"
    box $P5010, "Contextual $*W not found"
    set $P5006, $P5010
  vivi_15984922:
    set $P5005, $P5006
  fallback4920:
    $P5011 = $P5005."get_legacy_block_list"()
    set $P5002, $P5011
    iter $P5004, $P5011
  for_next4929:
    unless $P5004, for_done4931
    shift $P5013, $P5004
  for_redo4930:
    .const 'Sub' $P5012 = 'cuid_465_1358115338.889' 
    capture_lex $P5012
    $P5002 = $P5012($P5013)
    goto for_next4929
  for_done4931:
    if $P101 goto unless1601_end4933 
.annotate 'line', 2388
.annotate 'line', 2389
    find_lex $P5014, "$/"
    $P5015 = $P5014."CURSOR"()
    $P5016 = $P5015."panic"("Sorry, no proto sub in scope, and auto-generation of protos is not yet implemented.")
  unless1601_end4933:
    box $P5017, "Dispatcher derivation NYI"
    die $P5017
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_465_1358115338.889") :anon :lex :outer("cuid_466_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2376
    .param pmc _lex_param_0 
    .lex "%sym", $P101 
    .lex "$_", _lex_param_0 
    new $P5001, 'Hash'
    set $P101, $P5001
.annotate 'line', 2377
    find_lex $P5002, "$name"
    set $S5002, $P5002
    concat $S5001, "&", $S5002
    $P5003 = _lex_param_0."symbol"($S5001)
    set $P101, $P5003
    set $P5004, $P101["proto"]
    unless_null $P5004, fallback4925
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5005
  fallback4925:
    unless $P5004 goto if1599_else4923 
.annotate 'line', 2378
    set $P5006, $P101["value"]
    unless_null $P5006, fallback4926
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5006, $P5007
  fallback4926:
    store_lex "$proto", $P5006
    box $P5008, 1
    store_lex "$found_proto", $P5008
    set $P5013, $P5008
    goto if1599_end4924
  if1599_else4923:
    set $P5012, $P101
    unless $P101 goto if1600_end4928 
.annotate 'line', 2382
.annotate 'line', 2383
    find_lex $P5009, "$/"
    $P5010 = $P5009."CURSOR"()
    $P5011 = $P5010."panic"("Cannot declare a multi when an only is already in scope.")
    set $P5012, $P5011
  if1600_end4928:
    set $P5013, $P5012
  if1599_end4924:
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_469_1358115338.889") :anon :lex :outer("cuid_468_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2407
    .lex "$code", $P101 
    .lex "$BLOCK", $P102 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
    find_dynamic_lex $P5003, "$*SCOPE"
    unless_null $P5003, fallback4948
    nqp_get_sc_object $P5006, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$SCOPE"]
    unless_null $P5004, fallback4949
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5007
  fallback4949:
    unless_null $P5004, vivi_16074950
    die "Contextual $*SCOPE not found"
    box $P5008, "Contextual $*SCOPE not found"
    set $P5004, $P5008
  vivi_16074950:
    set $P5003, $P5004
  fallback4948:
    set $S5001, $P5003
    iseq $I5001, $S5001, "our"
    unless $I5001 goto if1606_end4947 
.annotate 'line', 2411
    box $P5009, "our-scoped protos not yet implemented"
    die $P5009
  if1606_end4947:
.annotate 'line', 2412
    find_dynamic_lex $P5010, "$*W"
    unless_null $P5010, fallback4951
    nqp_get_sc_object $P5013, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5012, $P5013
    set $P5011, $P5012["$W"]
    unless_null $P5011, fallback4952
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5011, $P5014
  fallback4952:
    unless_null $P5011, vivi_16084953
    die "Contextual $*W not found"
    box $P5015, "Contextual $*W not found"
    set $P5011, $P5015
  vivi_16084953:
    set $P5010, $P5011
  fallback4951:
    find_lex $P5016, "$past"
    find_lex $P5017, "$name"
    $P5018 = $P5010."create_code"($P5016, $P5017, 1)
    set $P101, $P5018
.annotate 'line', 2413
    find_dynamic_lex $P5019, "$*W"
    unless_null $P5019, fallback4954
    nqp_get_sc_object $P5022, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["$W"]
    unless_null $P5020, fallback4955
    nqp_get_sc_object $P5023, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5020, $P5023
  fallback4955:
    unless_null $P5020, vivi_16094956
    die "Contextual $*W not found"
    box $P5024, "Contextual $*W not found"
    set $P5020, $P5024
  vivi_16094956:
    set $P5019, $P5020
  fallback4954:
    $P5025 = $P5019."cur_lexpad"()
    set $P102, $P5025
.annotate 'line', 2414
    set $P5026, $P102[0]
    unless_null $P5026, fallback4957
    nqp_get_sc_object $P5027, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5026, $P5027
  fallback4957:
    nqp_get_sc_object $P5031, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5030, $P5031, "QAST"
    get_who $P5029, $P5030
    set $P5028, $P5029["Op"]
    unless_null $P5028, fallback4958
    nqp_get_sc_object $P5032, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5028, $P5032
  fallback4958:
.annotate 'line', 2416
    nqp_get_sc_object $P5036, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5035, $P5036, "QAST"
    get_who $P5034, $P5035
    set $P5033, $P5034["Var"]
    unless_null $P5033, fallback4959
    nqp_get_sc_object $P5037, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5033, $P5037
  fallback4959:
    find_lex $P5038, "$name"
    set $S5003, $P5038
    concat $S5002, "&", $S5003
    $P5039 = $P5033."new"($S5002 :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    find_lex $P5040, "$past"
    $P5041 = $P5028."new"($P5039, $P5040, "bind" :named("op"))
    $P5026."push"($P5041)
.annotate 'line', 2419
    find_lex $P5042, "$name"
    set $S5005, $P5042
    concat $S5004, "&", $S5005
    $P5043 = $P102."symbol"($S5004, "lexical" :named("scope"), 1 :named("proto"), $P101 :named("value"))
    .return ($P5043) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_470_1358115338.889") :anon :lex :outer("cuid_468_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2421
    .lex "$BLOCK", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
.annotate 'line', 2422
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback4960
    nqp_get_sc_object $P5005, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback4961
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5003, $P5006
  fallback4961:
    unless_null $P5003, vivi_16104962
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_16104962:
    set $P5002, $P5003
  fallback4960:
    $P5008 = $P5002."cur_lexpad"()
    set $P101, $P5008
.annotate 'line', 2423
    set $P5009, $P101[0]
    unless_null $P5009, fallback4963
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5009, $P5010
  fallback4963:
    nqp_get_sc_object $P5014, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback4964
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5011, $P5015
  fallback4964:
.annotate 'line', 2425
    nqp_get_sc_object $P5019, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Var"]
    unless_null $P5016, fallback4965
    nqp_get_sc_object $P5020, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5016, $P5020
  fallback4965:
    find_lex $P5021, "$name"
    set $S5002, $P5021
    concat $S5001, "&", $S5002
    $P5022 = $P5016."new"($S5001 :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    find_lex $P5023, "$past"
    $P5024 = $P5011."new"($P5022, $P5023, "bind" :named("op"))
    $P5009."push"($P5024)
.annotate 'line', 2428
    find_lex $P5025, "$name"
    set $S5004, $P5025
    concat $S5003, "&", $S5004
    $P101."symbol"($S5003, "lexical" :named("scope"))
    find_dynamic_lex $P5026, "$*SCOPE"
    unless_null $P5026, fallback4968
    nqp_get_sc_object $P5029, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["$SCOPE"]
    unless_null $P5027, fallback4969
    nqp_get_sc_object $P5030, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5027, $P5030
  fallback4969:
    unless_null $P5027, vivi_16124970
    die "Contextual $*SCOPE not found"
    box $P5031, "Contextual $*SCOPE not found"
    set $P5027, $P5031
  vivi_16124970:
    set $P5026, $P5027
  fallback4968:
    set $S5005, $P5026
    iseq $I5001, $S5005, "our"
    box $P5067, $I5001
    set $P5066, $P5067
    unless $I5001 goto if1611_end4967 
.annotate 'line', 2429
.annotate 'line', 2432
    find_dynamic_lex $P5032, "$*W"
    unless_null $P5032, fallback4971
    nqp_get_sc_object $P5035, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5034, $P5035
    set $P5033, $P5034["$W"]
    unless_null $P5033, fallback4972
    nqp_get_sc_object $P5036, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5033, $P5036
  fallback4972:
    unless_null $P5033, vivi_16134973
    die "Contextual $*W not found"
    box $P5037, "Contextual $*W not found"
    set $P5033, $P5037
  vivi_16134973:
    set $P5032, $P5033
  fallback4971:
    find_dynamic_lex $P5038, "$*PACKAGE"
    unless_null $P5038, fallback4974
    nqp_get_sc_object $P5041, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5040, $P5041
    set $P5039, $P5040["$PACKAGE"]
    unless_null $P5039, fallback4975
    nqp_get_sc_object $P5042, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5039, $P5042
  fallback4975:
    unless_null $P5039, vivi_16144976
    die "Contextual $*PACKAGE not found"
    box $P5043, "Contextual $*PACKAGE not found"
    set $P5039, $P5043
  vivi_16144976:
    set $P5038, $P5039
  fallback4974:
    find_lex $P5044, "$name"
    find_lex $P5045, "$past"
    $P5032."install_package_routine"($P5038, $P5044, $P5045)
.annotate 'line', 2433
    set $P5046, $P101[0]
    unless_null $P5046, fallback4977
    nqp_get_sc_object $P5047, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5046, $P5047
  fallback4977:
    nqp_get_sc_object $P5051, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["Op"]
    unless_null $P5048, fallback4978
    nqp_get_sc_object $P5052, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5048, $P5052
  fallback4978:
.annotate 'line', 2435
    new $P5053, 'ResizablePMCArray'
    find_lex $P5054, "$name"
    push $P5053, $P5054
    find_lex $P5055, "$/"
    $P5056 = "&lexical_package_lookup"($P5053, $P5055)
.annotate 'line', 2436
    nqp_get_sc_object $P5060, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5059, $P5060, "QAST"
    get_who $P5058, $P5059
    set $P5057, $P5058["Var"]
    unless_null $P5057, fallback4979
    nqp_get_sc_object $P5061, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5057, $P5061
  fallback4979:
    find_lex $P5062, "$name"
    set $S5007, $P5062
    concat $S5006, "&", $S5007
    $P5063 = $P5057."new"($S5006 :named("name"), "lexical" :named("scope"))
    $P5064 = $P5048."new"($P5056, $P5063, "bind" :named("op"))
    $P5065 = $P5046."push"($P5064)
    set $P5066, $P5065
  if1611_end4967:
    .return ($P5066) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_471_1358115338.889") :anon :lex :outer("cuid_306_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2464
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$/"
    $P5001 = _lex_param_0."ast"()
    $P5003 = $P5001($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "method_def" :subid("cuid_307_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2469
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5091 = 'cuid_472_1358115338.889' 
    capture_lex $P5091 
    .const 'Sub' $P5091 = 'cuid_473_1358115338.889' 
    capture_lex $P5091 
    .lex "$past", $P101 
    .lex "$name", $P102 
    .lex "$lexpast", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P103, $P5003
    unless_null _lex_param_1, fallback5011
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5005
  fallback5011:
    set $P5004, _lex_param_1["onlystar"]
    unless_null $P5004, fallback5012
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5006
  fallback5012:
    unless $P5004 goto if1623_else5009 
.annotate 'line', 2473
.annotate 'line', 2474
    $P5007 = "&only_star_block"()
    set $P101, $P5007
    goto if1623_end5010
  if1623_else5009:
.annotate 'line', 2476
.annotate 'line', 2477
    unless_null _lex_param_1, fallback5013
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5009
  fallback5013:
    set $P5008, _lex_param_1["blockoid"]
    unless_null $P5008, fallback5014
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5008, $P5010
  fallback5014:
    $P5011 = $P5008."ast"()
    set $P101, $P5011
.annotate 'line', 2478
    $P101."blocktype"("declaration")
    find_dynamic_lex $P5012, "$*RETURN_USED"
    unless_null $P5012, fallback5017
    nqp_get_sc_object $P5015, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5014, $P5015
    set $P5013, $P5014["$RETURN_USED"]
    unless_null $P5013, fallback5018
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5013, $P5016
  fallback5018:
    unless_null $P5013, vivi_16255019
    die "Contextual $*RETURN_USED not found"
    box $P5017, "Contextual $*RETURN_USED not found"
    set $P5013, $P5017
  vivi_16255019:
    set $P5012, $P5013
  fallback5017:
    set $P5021, $P5012
    unless $P5012 goto if1624_end5016 
.annotate 'line', 2479
.annotate 'line', 2480
    set $P5018, $P101[1]
    unless_null $P5018, fallback5020
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5018, $P5019
  fallback5020:
    $P5020 = "&wrap_return_handler"($P5018)
    set $P101[1], $P5020
    set $P5021, $P5020
  if1624_end5016:
  if1623_end5010:
    set $P5022, $P101["signature_has_invocant"]
    unless_null $P5022, fallback5023
    nqp_get_sc_object $P5023, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5022, $P5023
  fallback5023:
    if $P5022 goto unless1626_end5022 
.annotate 'line', 2485
.annotate 'line', 2486
    set $P5024, $P101[0]
    unless_null $P5024, fallback5024
    nqp_get_sc_object $P5025, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5024, $P5025
  fallback5024:
    nqp_get_sc_object $P5029, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Var"]
    unless_null $P5026, fallback5025
    nqp_get_sc_object $P5030, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5026, $P5030
  fallback5025:
    find_dynamic_lex $P5031, "$*PACKAGE"
    unless_null $P5031, fallback5026
    nqp_get_sc_object $P5034, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["$PACKAGE"]
    unless_null $P5032, fallback5027
    nqp_get_sc_object $P5035, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5032, $P5035
  fallback5027:
    unless_null $P5032, vivi_16275028
    die "Contextual $*PACKAGE not found"
    box $P5036, "Contextual $*PACKAGE not found"
    set $P5032, $P5036
  vivi_16275028:
    set $P5031, $P5032
  fallback5026:
    $P5037 = $P5026."new"("self" :named("name"), "lexical" :named("scope"), "param" :named("decl"), $P5031 :named("returns"))
    $P5038 = $P5024."unshift"($P5037)
  unless1626_end5022:
.annotate 'line', 2491
    $P101."symbol"("self", "lexical" :named("scope"))
    box $P5039, ""
    set $P102, $P5039
    unless_null _lex_param_1, fallback5031
    nqp_get_sc_object $P5041, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5041
  fallback5031:
    set $P5040, _lex_param_1["deflongname"]
    unless_null $P5040, fallback5032
    nqp_get_sc_object $P5042, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5040, $P5042
  fallback5032:
    unless $P5040 goto if1628_else5029 
.annotate 'line', 2495
    unless_null _lex_param_1, fallback5033
    nqp_get_sc_object $P5044, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5044
  fallback5033:
    set $P5043, _lex_param_1["private"]
    unless_null $P5043, fallback5034
    nqp_get_sc_object $P5045, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5043, $P5045
  fallback5034:
    set $S5002, $P5043
.annotate 'line', 2496
    unless_null _lex_param_1, fallback5035
    nqp_get_sc_object $P5048, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5048
  fallback5035:
    set $P5047, _lex_param_1["deflongname"]
    unless_null $P5047, fallback5036
    nqp_get_sc_object $P5049, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5047, $P5049
  fallback5036:
    set $P5046, $P5047[0]
    unless_null $P5046, fallback5037
    nqp_get_sc_object $P5050, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5046, $P5050
  fallback5037:
    $P5051 = $P5046."ast"()
    set $S5003, $P5051
    concat $S5001, $S5002, $S5003
    box $P5052, $S5001
    set $P102, $P5052
    goto if1628_end5030
  if1628_else5029:
    unless_null _lex_param_1, fallback5040
    nqp_get_sc_object $P5054, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5054
  fallback5040:
    set $P5053, _lex_param_1["latename"]
    unless_null $P5053, fallback5041
    nqp_get_sc_object $P5055, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5053, $P5055
  fallback5041:
    set $P5068, $P5053
    unless $P5053 goto if1629_end5039 
.annotate 'line', 2498
    find_dynamic_lex $P5056, "$*PKGDECL"
    unless_null $P5056, fallback5044
    nqp_get_sc_object $P5059, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5058, $P5059
    set $P5057, $P5058["$PKGDECL"]
    unless_null $P5057, fallback5045
    nqp_get_sc_object $P5060, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5057, $P5060
  fallback5045:
    unless_null $P5057, vivi_16315046
    die "Contextual $*PKGDECL not found"
    box $P5061, "Contextual $*PKGDECL not found"
    set $P5057, $P5061
  vivi_16315046:
    set $P5056, $P5057
  fallback5044:
    set $S5004, $P5056
    isne $I5001, $S5004, "role"
    unless $I5001 goto if1630_end5043 
.annotate 'line', 2499
.annotate 'line', 2500
    $P5062 = _lex_param_1."CURSOR"()
    $P5063 = $P5062."panic"("Late-bound method name only valid in role")
  if1630_end5043:
    unless_null _lex_param_1, fallback5047
    nqp_get_sc_object $P5065, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5065
  fallback5047:
    set $P5064, _lex_param_1["latename"]
    unless_null $P5064, fallback5048
    nqp_get_sc_object $P5066, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5064, $P5066
  fallback5048:
    set $S5006, $P5064
    concat $S5005, "!!LATENAME!!", $S5006
    box $P5067, $S5005
    set $P102, $P5067
    set $P5068, $P102
  if1629_end5039:
  if1628_end5030:
    set $S5007, $P102
    isne $I5002, $S5007, ""
    unless $I5002 goto if1632_end5050 
    .const 'Sub' $P5069 = 'cuid_472_1358115338.889' 
    capture_lex $P5069
    $P5070 = $P5069()
  if1632_end5050:
.annotate 'line', 2523
    nqp_get_sc_object $P5074, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5073, $P5074, "QAST"
    get_who $P5072, $P5073
    set $P5071, $P5072["Op"]
    unless_null $P5071, fallback5084
    nqp_get_sc_object $P5075, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5071, $P5075
  fallback5084:
    $P5076 = $P5071."new"($P101, "takeclosure" :named("op"))
    set $P103, $P5076
    set $P103["sink"], $P101
    set $P103["block_past"], $P101
    set $P5077, $P101["code_obj"]
    unless_null $P5077, fallback5085
    nqp_get_sc_object $P5078, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5077, $P5078
  fallback5085:
    set $P103["code_obj"], $P5077
.annotate 'line', 2527
    _lex_param_1."!make"($P103)
    unless_null _lex_param_1, fallback5088
    nqp_get_sc_object $P5080, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5080
  fallback5088:
    set $P5079, _lex_param_1["trait"]
    unless_null $P5079, fallback5089
    nqp_get_sc_object $P5081, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5079, $P5081
  fallback5089:
    set $P5090, $P5079
    unless $P5079 goto if1645_end5087 
.annotate 'line', 2528
    unless_null _lex_param_1, fallback5090
    nqp_get_sc_object $P5086, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5086
  fallback5090:
    set $P5085, _lex_param_1["trait"]
    unless_null $P5085, fallback5091
    nqp_get_sc_object $P5087, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5085, $P5087
  fallback5091:
    set $P5082, $P5085
    iter $P5084, $P5085
  for_next5092:
    unless $P5084, for_done5094
    shift $P5089, $P5084
  for_redo5093:
    .const 'Sub' $P5088 = 'cuid_473_1358115338.889' 
    capture_lex $P5088
    $P5082 = $P5088($P5089)
    goto for_next5092
  for_done5094:
    set $P5090, $P5082
  if1645_end5087:
    .return ($P5090) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_472_1358115338.889") :anon :lex :outer("cuid_307_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2504
    .lex "$meta_meth", $P101 
    .lex "$is_dispatcher", $P102 
    .lex "$code", $P103 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P103, $P5003
.annotate 'line', 2506
    find_lex $P5004, "$past"
    find_lex $P5005, "$name"
    $P5004."name"($P5005)
    find_dynamic_lex $P5006, "$*MULTINESS"
    unless_null $P5006, fallback5053
    nqp_get_sc_object $P5009, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5008, $P5009
    set $P5007, $P5008["$MULTINESS"]
    unless_null $P5007, fallback5054
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5007, $P5010
  fallback5054:
    unless_null $P5007, vivi_16345055
    die "Contextual $*MULTINESS not found"
    box $P5011, "Contextual $*MULTINESS not found"
    set $P5007, $P5011
  vivi_16345055:
    set $P5006, $P5007
  fallback5053:
    set $S5001, $P5006
    iseq $I5001, $S5001, "multi"
    unless $I5001 goto if1633_else5051 
    set $S5002, "add_multi_method"
    goto if1633_end5052
  if1633_else5051:
    set $S5002, "add_method"
  if1633_end5052:
    box $P5012, $S5002
    set $P101, $P5012
    find_dynamic_lex $P5013, "$*MULTINESS"
    unless_null $P5013, fallback5056
    nqp_get_sc_object $P5016, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$MULTINESS"]
    unless_null $P5014, fallback5057
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5014, $P5017
  fallback5057:
    unless_null $P5014, vivi_16355058
    die "Contextual $*MULTINESS not found"
    box $P5018, "Contextual $*MULTINESS not found"
    set $P5014, $P5018
  vivi_16355058:
    set $P5013, $P5014
  fallback5056:
    set $S5003, $P5013
    iseq $I5002, $S5003, "proto"
    box $P5019, $I5002
    set $P102, $P5019
.annotate 'line', 2511
    find_dynamic_lex $P5020, "$*W"
    unless_null $P5020, fallback5059
    nqp_get_sc_object $P5023, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5022, $P5023
    set $P5021, $P5022["$W"]
    unless_null $P5021, fallback5060
    nqp_get_sc_object $P5024, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5021, $P5024
  fallback5060:
    unless_null $P5021, vivi_16365061
    die "Contextual $*W not found"
    box $P5025, "Contextual $*W not found"
    set $P5021, $P5025
  vivi_16365061:
    set $P5020, $P5021
  fallback5059:
    find_lex $P5026, "$past"
    find_lex $P5027, "$name"
    $P5028 = $P5020."create_code"($P5026, $P5027, $P102)
    set $P103, $P5028
    find_dynamic_lex $P5029, "$*MULTINESS"
    unless_null $P5029, fallback5064
    nqp_get_sc_object $P5032, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5031, $P5032
    set $P5030, $P5031["$MULTINESS"]
    unless_null $P5030, fallback5065
    nqp_get_sc_object $P5033, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5030, $P5033
  fallback5065:
    unless_null $P5030, vivi_16385066
    die "Contextual $*MULTINESS not found"
    box $P5034, "Contextual $*MULTINESS not found"
    set $P5030, $P5034
  vivi_16385066:
    set $P5029, $P5030
  fallback5064:
    set $S5004, $P5029
    iseq $I5003, $S5004, "multi"
    unless $I5003 goto if1637_end5063 
.annotate 'line', 2512
    find_lex $P5035, "$past"
    $P5036 = "&attach_multi_signature"($P103, $P5035)
  if1637_end5063:
.annotate 'line', 2513
    find_dynamic_lex $P5037, "$*W"
    unless_null $P5037, fallback5067
    nqp_get_sc_object $P5040, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5039, $P5040
    set $P5038, $P5039["$W"]
    unless_null $P5038, fallback5068
    nqp_get_sc_object $P5041, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5038, $P5041
  fallback5068:
    unless_null $P5038, vivi_16395069
    die "Contextual $*W not found"
    box $P5042, "Contextual $*W not found"
    set $P5038, $P5042
  vivi_16395069:
    set $P5037, $P5038
  fallback5067:
    find_dynamic_lex $P5043, "$*PACKAGE"
    unless_null $P5043, fallback5070
    nqp_get_sc_object $P5046, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5045, $P5046
    set $P5044, $P5045["$PACKAGE"]
    unless_null $P5044, fallback5071
    nqp_get_sc_object $P5047, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5044, $P5047
  fallback5071:
    unless_null $P5044, vivi_16405072
    die "Contextual $*PACKAGE not found"
    box $P5048, "Contextual $*PACKAGE not found"
    set $P5044, $P5048
  vivi_16405072:
    set $P5043, $P5044
  fallback5070:
    find_lex $P5049, "$name"
    $P5037."pkg_add_method"($P5043, $P101, $P5049, $P103)
    find_lex $P5050, "$past"
    set $P5050["code_obj"], $P103
    find_dynamic_lex $P5051, "$*SCOPE"
    unless_null $P5051, fallback5075
    nqp_get_sc_object $P5054, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5053, $P5054
    set $P5052, $P5053["$SCOPE"]
    unless_null $P5052, fallback5076
    nqp_get_sc_object $P5055, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5052, $P5055
  fallback5076:
    unless_null $P5052, vivi_16425077
    die "Contextual $*SCOPE not found"
    box $P5056, "Contextual $*SCOPE not found"
    set $P5052, $P5056
  vivi_16425077:
    set $P5051, $P5052
  fallback5075:
    set $S5005, $P5051
    iseq $I5004, $S5005, "our"
    box $P5073, $I5004
    set $P5072, $P5073
    unless $I5004 goto if1641_end5074 
.annotate 'line', 2517
.annotate 'line', 2518
    find_dynamic_lex $P5057, "$*W"
    unless_null $P5057, fallback5078
    nqp_get_sc_object $P5060, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5059, $P5060
    set $P5058, $P5059["$W"]
    unless_null $P5058, fallback5079
    nqp_get_sc_object $P5061, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5058, $P5061
  fallback5079:
    unless_null $P5058, vivi_16435080
    die "Contextual $*W not found"
    box $P5062, "Contextual $*W not found"
    set $P5058, $P5062
  vivi_16435080:
    set $P5057, $P5058
  fallback5078:
    find_dynamic_lex $P5063, "$*PACKAGE"
    unless_null $P5063, fallback5081
    nqp_get_sc_object $P5066, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5065, $P5066
    set $P5064, $P5065["$PACKAGE"]
    unless_null $P5064, fallback5082
    nqp_get_sc_object $P5067, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5064, $P5067
  fallback5082:
    unless_null $P5064, vivi_16445083
    die "Contextual $*PACKAGE not found"
    box $P5068, "Contextual $*PACKAGE not found"
    set $P5064, $P5068
  vivi_16445083:
    set $P5063, $P5064
  fallback5081:
    find_lex $P5069, "$name"
    find_lex $P5070, "$past"
    $P5071 = $P5057."install_package_routine"($P5063, $P5069, $P5070)
    set $P5072, $P5071
  if1641_end5074:
    .return ($P5072) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_473_1358115338.889") :anon :lex :outer("cuid_307_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2529
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$/"
    $P5001 = _lex_param_0."ast"()
    $P5003 = $P5001($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "signature" :subid("cuid_308_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2561
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5025 = 'cuid_474_1358115338.889' 
    capture_lex $P5025 
    .const 'Sub' $P5025 = 'cuid_475_1358115338.889' 
    capture_lex $P5025 
    .lex "$BLOCK", $P101 
    .lex "$BLOCKINIT", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
.annotate 'line', 2562
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback5095
    nqp_get_sc_object $P5006, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback5096
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5007
  fallback5096:
    unless_null $P5004, vivi_16465097
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_16465097:
    set $P5003, $P5004
  fallback5095:
    $P5009 = $P5003."cur_lexpad"()
    set $P101, $P5009
    set $P5010, $P101[0]
    unless_null $P5010, fallback5098
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5010, $P5011
  fallback5098:
    set $P102, $P5010
    unless_null _lex_param_1, fallback5101
    nqp_get_sc_object $P5013, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5013
  fallback5101:
    set $P5012, _lex_param_1["invocant"]
    unless_null $P5012, fallback5102
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5012, $P5014
  fallback5102:
    unless $P5012 goto if1647_end5100 
    .const 'Sub' $P5015 = 'cuid_474_1358115338.889' 
    capture_lex $P5015
    $P5016 = $P5015()
  if1647_end5100:
    unless_null _lex_param_1, fallback5109
    nqp_get_sc_object $P5021, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5021
  fallback5109:
    set $P5020, _lex_param_1["parameter"]
    unless_null $P5020, fallback5110
    nqp_get_sc_object $P5022, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5020, $P5022
  fallback5110:
    set $P5017, $P5020
    iter $P5019, $P5020
  for_next5111:
    unless $P5019, for_done5113
    shift $P5024, $P5019
  for_redo5112:
    .const 'Sub' $P5023 = 'cuid_475_1358115338.889' 
    capture_lex $P5023
    $P5017 = $P5023($P5024)
    goto for_next5111
  for_done5113:
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_474_1358115338.889") :anon :lex :outer("cuid_308_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2564
    .lex "$inv", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
.annotate 'line', 2565
    find_lex $P5004, "$/"
    unless_null $P5004, fallback5103
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5005
  fallback5103:
    set $P5003, $P5004["invocant"]
    unless_null $P5003, fallback5104
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5003, $P5006
  fallback5104:
    set $P5002, $P5003[0]
    unless_null $P5002, fallback5105
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5007
  fallback5105:
    $P5008 = $P5002."ast"()
    set $P101, $P5008
.annotate 'line', 2566
    find_lex $P5009, "$BLOCKINIT"
    $P5009."push"($P101)
.annotate 'line', 2567
    find_lex $P5010, "$BLOCKINIT"
    nqp_get_sc_object $P5014, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback5106
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5011, $P5015
  fallback5106:
.annotate 'line', 2569
    nqp_get_sc_object $P5019, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Var"]
    unless_null $P5016, fallback5107
    nqp_get_sc_object $P5020, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5016, $P5020
  fallback5107:
    $P5021 = $P5016."new"("self" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
.annotate 'line', 2570
    nqp_get_sc_object $P5025, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["Var"]
    unless_null $P5022, fallback5108
    nqp_get_sc_object $P5026, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5022, $P5026
  fallback5108:
    $P5027 = $P101."name"()
    $P5028 = $P5022."new"("lexical" :named("scope"), $P5027 :named("name"))
    $P5029 = $P5011."new"($P5021, $P5028, "bind" :named("op"))
    $P5010."push"($P5029)
    find_lex $P5030, "$BLOCK"
    box $P5031, 1
    set $P5030["signature_has_invocant"], $P5031
    .return ($P5031) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_475_1358115338.889") :anon :lex :outer("cuid_308_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2574
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$BLOCKINIT"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "parameter" :subid("cuid_309_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2577
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5092 = 'cuid_477_1358115338.889' 
    capture_lex $P5092 
    .lex "$quant", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
    unless_null _lex_param_1, fallback5114
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5004
  fallback5114:
    set $P5003, _lex_param_1["quant"]
    unless_null $P5003, fallback5115
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5003, $P5005
  fallback5115:
    set $P101, $P5003
    unless_null _lex_param_1, fallback5118
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5007
  fallback5118:
    set $P5006, _lex_param_1["named_param"]
    unless_null $P5006, fallback5119
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5006, $P5008
  fallback5119:
    unless $P5006 goto if1648_else5116 
.annotate 'line', 2580
.annotate 'line', 2581
    unless_null _lex_param_1, fallback5120
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5010
  fallback5120:
    set $P5009, _lex_param_1["named_param"]
    unless_null $P5009, fallback5121
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5009, $P5011
  fallback5121:
    $P5012 = $P5009."ast"()
    set $P102, $P5012
    set $S5001, $P101
    isne $I5001, $S5001, "!"
    box $P5023, $I5001
    set $P5022, $P5023
    unless $I5001 goto if1649_end5123 
.annotate 'line', 2582
.annotate 'line', 2583
    unless_null _lex_param_1, fallback5124
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5016
  fallback5124:
    set $P5015, _lex_param_1["named_param"]
    unless_null $P5015, fallback5125
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5015, $P5017
  fallback5125:
    set $P5014, $P5015["param_var"]
    unless_null $P5014, fallback5126
    nqp_get_sc_object $P5018, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5014, $P5018
  fallback5126:
    set $P5013, $P5014["sigil"]
    unless_null $P5013, fallback5127
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5013, $P5019
  fallback5127:
    $P5020 = "&default_for"($P5013)
    $P5021 = $P102."default"($P5020)
    set $P5022, $P5021
  if1649_end5123:
    goto if1648_end5117
  if1648_else5116:
.annotate 'line', 2586
.annotate 'line', 2587
    unless_null _lex_param_1, fallback5128
    nqp_get_sc_object $P5025, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5025
  fallback5128:
    set $P5024, _lex_param_1["param_var"]
    unless_null $P5024, fallback5129
    nqp_get_sc_object $P5026, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5024, $P5026
  fallback5129:
    $P5027 = $P5024."ast"()
    set $P102, $P5027
    set $S5002, $P101
    iseq $I5002, $S5002, "*"
    unless $I5002 goto if1650_else5130 
.annotate 'line', 2588
.annotate 'line', 2589
    $P102."slurpy"(1)
.annotate 'line', 2590
    unless_null _lex_param_1, fallback5132
    nqp_get_sc_object $P5030, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5030
  fallback5132:
    set $P5029, _lex_param_1["param_var"]
    unless_null $P5029, fallback5133
    nqp_get_sc_object $P5031, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5029, $P5031
  fallback5133:
    set $P5028, $P5029["sigil"]
    unless_null $P5028, fallback5134
    nqp_get_sc_object $P5032, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5028, $P5032
  fallback5134:
    set $S5003, $P5028
    iseq $I5003, $S5003, "%"
    $P5033 = $P102."named"($I5003)
    set $P5043, $P5033
    goto if1650_end5131
  if1650_else5130:
    set $S5004, $P101
    iseq $I5004, $S5004, "?"
    box $P5042, $I5004
    set $P5041, $P5042
    unless $I5004 goto if1651_end5136 
.annotate 'line', 2592
.annotate 'line', 2593
    unless_null _lex_param_1, fallback5137
    nqp_get_sc_object $P5036, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5036
  fallback5137:
    set $P5035, _lex_param_1["param_var"]
    unless_null $P5035, fallback5138
    nqp_get_sc_object $P5037, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5035, $P5037
  fallback5138:
    set $P5034, $P5035["sigil"]
    unless_null $P5034, fallback5139
    nqp_get_sc_object $P5038, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5034, $P5038
  fallback5139:
    $P5039 = "&default_for"($P5034)
    $P5040 = $P102."default"($P5039)
    set $P5041, $P5040
  if1651_end5136:
    set $P5043, $P5041
  if1650_end5131:
  if1648_end5117:
    unless_null _lex_param_1, fallback5142
    nqp_get_sc_object $P5045, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5045
  fallback5142:
    set $P5044, _lex_param_1["default_value"]
    unless_null $P5044, fallback5143
    nqp_get_sc_object $P5046, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5044, $P5046
  fallback5143:
    unless $P5044 goto if1652_end5141 
.annotate 'line', 2596
    set $S5005, $P101
    iseq $I5005, $S5005, "*"
    unless $I5005 goto if1653_end5145 
.annotate 'line', 2597
.annotate 'line', 2598
    $P5047 = _lex_param_1."CURSOR"()
    $P5048 = $P5047."panic"("Can't put default on slurpy parameter")
  if1653_end5145:
    set $S5006, $P101
    iseq $I5006, $S5006, "!"
    unless $I5006 goto if1654_end5147 
.annotate 'line', 2600
.annotate 'line', 2601
    $P5049 = _lex_param_1."CURSOR"()
    $P5050 = $P5049."panic"("Can't put default on required parameter")
  if1654_end5147:
.annotate 'line', 2603
    unless_null _lex_param_1, fallback5148
    nqp_get_sc_object $P5054, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5054
  fallback5148:
    set $P5053, _lex_param_1["default_value"]
    unless_null $P5053, fallback5149
    nqp_get_sc_object $P5055, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5053, $P5055
  fallback5149:
    set $P5052, $P5053[0]
    unless_null $P5052, fallback5150
    nqp_get_sc_object $P5056, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5052, $P5056
  fallback5150:
    set $P5051, $P5052["EXPR"]
    unless_null $P5051, fallback5151
    nqp_get_sc_object $P5057, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5051, $P5057
  fallback5151:
    $P5058 = $P5051."ast"()
    $P5059 = $P102."default"($P5058)
  if1652_end5141:
.annotate 'line', 2605
    $P5060 = $P102."default"()
    if $P5060 goto unless1655_end5153 
    find_dynamic_lex $P5061, "$*W"
    unless_null $P5061, fallback5154
    nqp_get_sc_object $P5064, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5063, $P5064
    set $P5062, $P5063["$W"]
    unless_null $P5062, fallback5155
    nqp_get_sc_object $P5065, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5062, $P5065
  fallback5155:
    unless_null $P5062, vivi_16565156
    die "Contextual $*W not found"
    box $P5066, "Contextual $*W not found"
    set $P5062, $P5066
  vivi_16565156:
    set $P5061, $P5062
  fallback5154:
    $P5067 = $P5061."cur_lexpad"()
    find_dynamic_lex $P5068, "$*W"
    unless_null $P5068, fallback5157
    nqp_get_sc_object $P5071, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5070, $P5071
    set $P5069, $P5070["$W"]
    unless_null $P5069, fallback5158
    nqp_get_sc_object $P5072, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5069, $P5072
  fallback5158:
    unless_null $P5069, vivi_16575159
    die "Contextual $*W not found"
    box $P5073, "Contextual $*W not found"
    set $P5069, $P5073
  vivi_16575159:
    set $P5068, $P5069
  fallback5157:
    $P5074 = $P5068."cur_lexpad"()
    $P5075 = $P5074."arity"()
    set $N5002, $P5075
    set $N5003, 1
    add $N5001, $N5002, $N5003
    $P5076 = $P5067."arity"($N5001)
  unless1655_end5153:
    unless_null _lex_param_1, fallback5162
    nqp_get_sc_object $P5078, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5078
  fallback5162:
    set $P5077, _lex_param_1["typename"]
    unless_null $P5077, fallback5163
    nqp_get_sc_object $P5079, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5077, $P5079
  fallback5163:
    unless $P5077 goto if1658_end5161 
    .const 'Sub' $P5080 = 'cuid_477_1358115338.889' 
    capture_lex $P5080
    $P5081 = $P5080()
  if1658_end5161:
    unless_null _lex_param_1, fallback5180
    nqp_get_sc_object $P5083, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5083
  fallback5180:
    set $P5082, _lex_param_1["definedness"]
    unless_null $P5082, fallback5181
    nqp_get_sc_object $P5084, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5082, $P5084
  fallback5181:
    unless $P5082 goto if1663_end5179 
.annotate 'line', 2620
    unless_null _lex_param_1, fallback5182
    nqp_get_sc_object $P5087, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5087
  fallback5182:
    set $P5086, _lex_param_1["definedness"]
    unless_null $P5086, fallback5183
    nqp_get_sc_object $P5088, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5086, $P5088
  fallback5183:
    set $P5085, $P5086[0]
    unless_null $P5085, fallback5184
    nqp_get_sc_object $P5089, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5085, $P5089
  fallback5184:
    set $S5007, $P5085
    box $P5090, $S5007
    set $P102["definedness"], $P5090
  if1663_end5179:
.annotate 'line', 2624
    $P5091 = _lex_param_1."!make"($P102)
    .return ($P5091) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_477_1358115338.889") :anon :lex :outer("cuid_309_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2608
    .const 'Sub' $P5015 = 'cuid_476_1358115338.889' 
    capture_lex $P5015 
    .lex "$type", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
.annotate 'line', 2609
    find_lex $P5004, "$/"
    unless_null $P5004, fallback5164
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5005
  fallback5164:
    set $P5003, $P5004["typename"]
    unless_null $P5003, fallback5165
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5003, $P5006
  fallback5165:
    set $P5002, $P5003[0]
    unless_null $P5002, fallback5166
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5007
  fallback5166:
    $P5008 = $P5002."ast"()
    $P5009 = $P5008."value"()
    set $P101, $P5009
.annotate 'line', 2610
    find_lex $P5010, "$past"
    $P5010."returns"($P101)
    repr_get_primitive_type_spec $I5001, $P101
    box $P5014, $I5001
    set $P5013, $P5014
    unless $I5001 goto if1659_end5168 
    .const 'Sub' $P5011 = 'cuid_476_1358115338.889' 
    capture_lex $P5011
    $P5012 = $P5011($P5014)
    set $P5013, $P5012
  if1659_end5168:
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_476_1358115338.889") :anon :lex :outer("cuid_477_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2611
    .param pmc _lex_param_0 
    .lex "$prim", _lex_param_0 
.annotate 'line', 2612
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback5169
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback5170
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5005
  fallback5170:
    unless_null $P5002, vivi_16605171
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_16605171:
    set $P5001, $P5002
  fallback5169:
    $P5007 = $P5001."cur_lexpad"()
    find_lex $P5008, "$past"
    $P5009 = $P5008."name"()
    find_lex $P5010, "$type"
    $P5007."symbol"($P5009, $P5010 :named("type"))
.annotate 'line', 2613
    find_lex $P5011, "$past"
    $P5012 = $P5011."default"()
    set $P5017, $P5012
    unless $P5012 goto if1662_end5175 
    find_lex $P5014, "$/"
    unless_null $P5014, fallback5176
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5014, $P5015
  fallback5176:
    set $P5013, $P5014["default_value"]
    unless_null $P5013, fallback5177
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5013, $P5016
  fallback5177:
    isfalse $I5001, $P5013
    box $P5018, $I5001
    set $P5017, $P5018
  if1662_end5175:
    set $P5022, $P5017
    unless $P5017 goto if1661_end5173 
.annotate 'line', 2614
    find_lex $P5019, "$past"
    $P5020 = "&default_value_for_prim"(_lex_param_0)
    $P5021 = $P5019."default"($P5020)
    set $P5022, $P5021
  if1661_end5173:
    .return ($P5022) 
.end
.HLL "nqp"
.namespace []
.sub "param_var" :subid("cuid_310_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2627
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$name", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
    set $S5001, _lex_param_1
    box $P5003, $S5001
    set $P101, $P5003
.annotate 'line', 2629
    nqp_get_sc_object $P5007, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Var"]
    unless_null $P5004, fallback5185
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5008
  fallback5185:
    $P5009 = $P5004."new"($P101 :named("name"), "lexical" :named("scope"), "param" :named("decl"), _lex_param_1 :named("node"))
    set $P102, $P5009
.annotate 'line', 2631
    find_dynamic_lex $P5010, "$*W"
    unless_null $P5010, fallback5186
    nqp_get_sc_object $P5013, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5012, $P5013
    set $P5011, $P5012["$W"]
    unless_null $P5011, fallback5187
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5011, $P5014
  fallback5187:
    unless_null $P5011, vivi_16645188
    die "Contextual $*W not found"
    box $P5015, "Contextual $*W not found"
    set $P5011, $P5015
  vivi_16645188:
    set $P5010, $P5011
  fallback5186:
    $P5016 = $P5010."cur_lexpad"()
    $P5016."symbol"($P101, "lexical" :named("scope"))
.annotate 'line', 2632
    $P5017 = _lex_param_1."!make"($P102)
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "named_param" :subid("cuid_311_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2635
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
.annotate 'line', 2636
    unless_null _lex_param_1, fallback5189
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5003
  fallback5189:
    set $P5002, _lex_param_1["param_var"]
    unless_null $P5002, fallback5190
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5004
  fallback5190:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 2637
    unless_null _lex_param_1, fallback5191
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5008
  fallback5191:
    set $P5007, _lex_param_1["param_var"]
    unless_null $P5007, fallback5192
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5007, $P5009
  fallback5192:
    set $P5006, $P5007["name"]
    unless_null $P5006, fallback5193
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5006, $P5010
  fallback5193:
    set $S5001, $P5006
    $P101."named"($S5001)
.annotate 'line', 2638
    $P5011 = _lex_param_1."!make"($P101)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "typename" :subid("cuid_312_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2641
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5017 = 'cuid_478_1358115338.889' 
    capture_lex $P5017 
    .lex "@name", $P101 
    .lex "$found", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
.annotate 'line', 2645
    nqp_get_sc_object $P5006, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5005, $P5006, "HLL"
    get_who $P5004, $P5005
    set $P5003, $P5004["Compiler"]
    unless_null $P5003, fallback5194
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5003, $P5007
  fallback5194:
    set $S5001, _lex_param_1
    $P5008 = $P5003."parse_name"($S5001)
    set $P101, $P5008
    box $P5009, 0
    set $P102, $P5009
    new $P5012, 'ExceptionHandler'
    set_label $P5012, catch_handler_16675200
    $P5012.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5012
    .const 'Sub' $P5010 = 'cuid_478_1358115338.889' 
    capture_lex $P5010
    $P5011 = $P5010()
    set $P5013, $P5011
    pop_eh 
    goto skip_handler_16665199
  catch_handler_16675200:
    .get_results ($P5012) 
    set $I10001, 1
    set $P5012["handled"], $I10001
    nqp_get_sc_object $P10001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    finalize $P5012
    pop_upto_eh $P5012
    pop_eh 
    set $P5013, $P10001
    goto skip_handler_16665199
  skip_handler_16665199:
    set $P5016, $P102
    if $P102 goto unless1668_end5202 
.annotate 'line', 2652
.annotate 'line', 2653
    $P5014 = _lex_param_1."CURSOR"()
    set $S5004, _lex_param_1
    concat $S5003, "Use of undeclared type '", $S5004
    concat $S5002, $S5003, "'"
    $P5015 = $P5014."panic"($S5002)
    set $P5016, $P5015
  unless1668_end5202:
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_478_1358115338.889") :anon :lex :outer("cuid_312_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2647
    .lex "$sym", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
.annotate 'line', 2648
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback5195
    nqp_get_sc_object $P5005, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback5196
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5003, $P5006
  fallback5196:
    unless_null $P5003, vivi_16655197
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_16655197:
    set $P5002, $P5003
  fallback5195:
    find_lex $P5008, "@name"
    $P5009 = $P5002."find_sym"($P5008)
    set $P101, $P5009
.annotate 'line', 2649
    find_dynamic_lex $P5010, "$/"
    nqp_get_sc_object $P5014, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["WVal"]
    unless_null $P5011, fallback5198
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5011, $P5015
  fallback5198:
    $P5016 = $P5011."new"($P101 :named("value"))
    $P5010."!make"($P5016)
    box $P5017, 1
    store_lex "$found", $P5017
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "trait" :subid("cuid_313_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2657
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2658
    unless_null _lex_param_1, fallback5203
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback5203:
    set $P5001, _lex_param_1["trait_mod"]
    unless_null $P5001, fallback5204
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback5204:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "trait_mod:sym<is>" :subid("cuid_314_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2661
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5025 = 'cuid_480_1358115338.889' 
    capture_lex $P5025 
    .const 'Sub' $P5025 = 'cuid_482_1358115338.889' 
    capture_lex $P5025 
    .const 'Sub' $P5025 = 'cuid_483_1358115338.889' 
    capture_lex $P5025 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5207
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback5207:
    set $P5001, _lex_param_1["longname"]
    unless_null $P5001, fallback5208
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback5208:
    set $S5001, $P5001
    iseq $I5001, $S5001, "parrot_vtable"
    unless $I5001 goto if1669_else5205 
    .const 'Sub' $P5004 = 'cuid_480_1358115338.889' 
    capture_lex $P5004
    $P5005 = $P5004()
    set $P5024, $P5005
    goto if1669_end5206
  if1669_else5205:
    unless_null _lex_param_1, fallback5232
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5007
  fallback5232:
    set $P5006, _lex_param_1["longname"]
    unless_null $P5006, fallback5233
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5006, $P5008
  fallback5233:
    set $S5002, $P5006
    iseq $I5002, $S5002, "parrot_vtable_handler"
    unless $I5002 goto if1675_else5230 
    .const 'Sub' $P5009 = 'cuid_482_1358115338.889' 
    capture_lex $P5009
    $P5010 = $P5009()
    set $P5023, $P5010
    goto if1675_end5231
  if1675_else5230:
    unless_null _lex_param_1, fallback5249
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5012
  fallback5249:
    set $P5011, _lex_param_1["longname"]
    unless_null $P5011, fallback5250
    nqp_get_sc_object $P5013, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5011, $P5013
  fallback5250:
    set $S5003, $P5011
    iseq $I5003, $S5003, "export"
    unless $I5003 goto if1679_else5247 
.annotate 'line', 2687
.annotate 'line', 2688
    .const 'Sub' $P5015 = 'cuid_483_1358115338.889' 
    capture_lex $P5015
    newclosure $P5014, $P5015
    $P5016 = _lex_param_1."!make"($P5014)
    set $P5022, $P5016
    goto if1679_end5248
  if1679_else5247:
.annotate 'line', 2695
.annotate 'line', 2696
    $P5017 = _lex_param_1."CURSOR"()
    unless_null _lex_param_1, fallback5262
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5019
  fallback5262:
    set $P5018, _lex_param_1["longname"]
    unless_null $P5018, fallback5263
    nqp_get_sc_object $P5020, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5018, $P5020
  fallback5263:
    set $S5006, $P5018
    concat $S5005, "Trait '", $S5006
    concat $S5004, $S5005, "' not implemented"
    $P5021 = $P5017."panic"($S5004)
    set $P5022, $P5021
  if1679_end5248:
    set $P5023, $P5022
  if1675_end5231:
    set $P5024, $P5023
  if1669_end5206:
    .return ($P5024) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_480_1358115338.889") :anon :lex :outer("cuid_314_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2662
    .const 'Sub' $P5039 = 'cuid_479_1358115338.889' 
    capture_lex $P5039 
    .lex "$cpast", $P101 
    .lex "$name", $P102 
    .lex "$package", $P103 
    .lex "$is_dispatcher", $P104 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P104, $P5004
.annotate 'line', 2664
    find_lex $P5007, "$/"
    unless_null $P5007, fallback5209
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5007, $P5008
  fallback5209:
    set $P5006, $P5007["circumfix"]
    unless_null $P5006, fallback5210
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5006, $P5009
  fallback5210:
    set $P5005, $P5006[0]
    unless_null $P5005, fallback5211
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5005, $P5010
  fallback5211:
    $P5011 = $P5005."ast"()
    set $P101, $P5011
.annotate 'line', 2666
    nqp_get_sc_object $P5015, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["SVal"]
    unless_null $P5012, fallback5214
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5012, $P5016
  fallback5214:
    $P5017 = $P5012."ACCEPTS"($P101)
    if $P5017 goto unless1670_end5213 
.annotate 'line', 2665
    find_lex $P5018, "$/"
    $P5019 = $P5018."CURSOR"()
    $P5020 = $P5019."panic"("Trait 'parrot_vtable' requires constant scalar argument")
  unless1670_end5213:
.annotate 'line', 2667
    $P5021 = $P101."value"()
    set $P102, $P5021
    find_dynamic_lex $P5022, "$*PACKAGE"
    unless_null $P5022, fallback5215
    nqp_get_sc_object $P5025, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["$PACKAGE"]
    unless_null $P5023, fallback5216
    nqp_get_sc_object $P5026, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5023, $P5026
  fallback5216:
    unless_null $P5023, vivi_16715217
    die "Contextual $*PACKAGE not found"
    box $P5027, "Contextual $*PACKAGE not found"
    set $P5023, $P5027
  vivi_16715217:
    set $P5022, $P5023
  fallback5215:
    set $P103, $P5022
    find_dynamic_lex $P5028, "$*SCOPE"
    unless_null $P5028, fallback5218
    nqp_get_sc_object $P5031, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5030, $P5031
    set $P5029, $P5030["$SCOPE"]
    unless_null $P5029, fallback5219
    nqp_get_sc_object $P5032, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5029, $P5032
  fallback5219:
    unless_null $P5029, vivi_16725220
    die "Contextual $*SCOPE not found"
    box $P5033, "Contextual $*SCOPE not found"
    set $P5029, $P5033
  vivi_16725220:
    set $P5028, $P5029
  fallback5218:
    set $S5001, $P5028
    iseq $I5001, $S5001, "proto"
    box $P5034, $I5001
    set $P104, $P5034
.annotate 'line', 2670
    find_dynamic_lex $P5035, "$/"
    .const 'Sub' $P5037 = 'cuid_479_1358115338.889' 
    capture_lex $P5037
    newclosure $P5036, $P5037
    $P5038 = $P5035."!make"($P5036)
    .return ($P5038) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_479_1358115338.889") :anon :lex :outer("cuid_480_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2670
    .param pmc _lex_param_0 
    .lex "$match", _lex_param_0 
.annotate 'line', 2671
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback5221
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback5222
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5005
  fallback5222:
    unless_null $P5002, vivi_16735223
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_16735223:
    set $P5001, $P5002
  fallback5221:
    find_lex $P5007, "$package"
    find_lex $P5008, "$name"
.annotate 'line', 2672
    $P5011 = _lex_param_0."ast"()
    set $P5010, $P5011["code_obj"]
    unless_null $P5010, fallback5225
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5010, $P5012
  fallback5225:
    set $P5009, $P5010
    defined $I5001, $P5009
    if $I5001, defor5224
.annotate 'line', 2673
    find_dynamic_lex $P5013, "$*W"
    unless_null $P5013, fallback5226
    nqp_get_sc_object $P5016, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$W"]
    unless_null $P5014, fallback5227
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5014, $P5017
  fallback5227:
    unless_null $P5014, vivi_16745228
    die "Contextual $*W not found"
    box $P5018, "Contextual $*W not found"
    set $P5014, $P5018
  vivi_16745228:
    set $P5013, $P5014
  fallback5226:
    $P5020 = _lex_param_0."ast"()
    set $P5019, $P5020["block_past"]
    unless_null $P5019, fallback5229
    nqp_get_sc_object $P5021, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5019, $P5021
  fallback5229:
    find_lex $P5022, "$name"
    find_lex $P5023, "$is_dispatcher"
    $P5024 = $P5013."create_code"($P5019, $P5022, $P5023)
    set $P5009, $P5024
  defor5224:
    $P5025 = $P5001."pkg_add_method"($P5007, "add_parrot_vtable_mapping", $P5008, $P5009)
    .return ($P5025) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_482_1358115338.889") :anon :lex :outer("cuid_314_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2676
    .const 'Sub' $P5031 = 'cuid_481_1358115338.889' 
    capture_lex $P5031 
    .lex "$cpast", $P101 
    .lex "$name", $P102 
    .lex "$package", $P103 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P103, $P5003
.annotate 'line', 2678
    find_lex $P5006, "$/"
    unless_null $P5006, fallback5234
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5006, $P5007
  fallback5234:
    set $P5005, $P5006["circumfix"]
    unless_null $P5005, fallback5235
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5005, $P5008
  fallback5235:
    set $P5004, $P5005[0]
    unless_null $P5004, fallback5236
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5009
  fallback5236:
    $P5010 = $P5004."ast"()
    set $P101, $P5010
.annotate 'line', 2680
    nqp_get_sc_object $P5014, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback5239
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5011, $P5015
  fallback5239:
    $P5016 = $P5011."ACCEPTS"($P101)
    if $P5016 goto unless1676_end5238 
.annotate 'line', 2679
    find_lex $P5017, "$/"
    $P5018 = $P5017."CURSOR"()
    $P5019 = $P5018."panic"("Trait 'parrot_vtable_handler' requires constant scalar argument")
  unless1676_end5238:
.annotate 'line', 2681
    $P5020 = $P101."value"()
    set $P102, $P5020
    find_dynamic_lex $P5021, "$*PACKAGE"
    unless_null $P5021, fallback5240
    nqp_get_sc_object $P5024, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5023, $P5024
    set $P5022, $P5023["$PACKAGE"]
    unless_null $P5022, fallback5241
    nqp_get_sc_object $P5025, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5022, $P5025
  fallback5241:
    unless_null $P5022, vivi_16775242
    die "Contextual $*PACKAGE not found"
    box $P5026, "Contextual $*PACKAGE not found"
    set $P5022, $P5026
  vivi_16775242:
    set $P5021, $P5022
  fallback5240:
    set $P103, $P5021
.annotate 'line', 2683
    find_dynamic_lex $P5027, "$/"
    .const 'Sub' $P5029 = 'cuid_481_1358115338.889' 
    capture_lex $P5029
    newclosure $P5028, $P5029
    $P5030 = $P5027."!make"($P5028)
    .return ($P5030) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_481_1358115338.889") :anon :lex :outer("cuid_482_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2683
    .param pmc _lex_param_0 
    .lex "$match", _lex_param_0 
.annotate 'line', 2684
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback5243
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback5244
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5005
  fallback5244:
    unless_null $P5002, vivi_16785245
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_16785245:
    set $P5001, $P5002
  fallback5243:
    find_lex $P5007, "$package"
    find_lex $P5008, "$name"
    set $P5009, _lex_param_0["variable"]
    unless_null $P5009, fallback5246
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5009, $P5010
  fallback5246:
    set $S5001, $P5009
    $P5011 = $P5001."pkg_add_parrot_vtable_handler_mapping"($P5007, $P5008, $S5001)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_483_1358115338.889") :anon :lex :outer("cuid_314_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2688
    .param pmc _lex_param_0 
    .lex "$ast", $P101 
    .lex "$name", $P102 
    .lex "$match", _lex_param_0 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
.annotate 'line', 2689
    $P5003 = _lex_param_0."ast"()
    set $P101, $P5003
.annotate 'line', 2690
    set $P5004, $P101["block_past"]
    unless_null $P5004, fallback5251
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5005
  fallback5251:
    $P5006 = $P5004."name"()
    set $P102, $P5006
    find_dynamic_lex $P5010, "$*EXPORT"
    unless_null $P5010, fallback5252
    nqp_get_sc_object $P5013, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5012, $P5013
    set $P5011, $P5012["$EXPORT"]
    unless_null $P5011, fallback5253
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5011, $P5014
  fallback5253:
    unless_null $P5011, vivi_16805254
    die "Contextual $*EXPORT not found"
    box $P5015, "Contextual $*EXPORT not found"
    set $P5011, $P5015
  vivi_16805254:
    set $P5010, $P5011
  fallback5252:
    get_who $P5009, $P5010
    set $P5008, $P5009["DEFAULT"]
    unless_null $P5008, fallback5255
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5008, $P5016
  fallback5255:
    get_who $P5007, $P5008
    set $S5002, $P102
    concat $S5001, "&", $S5002
    set $P5018, $P101["code_obj"]
    unless_null $P5018, fallback5257
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5018, $P5019
  fallback5257:
    set $P5017, $P5018
    defined $I5001, $P5017
    if $I5001, defor5256
.annotate 'line', 2692
    find_dynamic_lex $P5020, "$*W"
    unless_null $P5020, fallback5258
    nqp_get_sc_object $P5023, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5022, $P5023
    set $P5021, $P5022["$W"]
    unless_null $P5021, fallback5259
    nqp_get_sc_object $P5024, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5021, $P5024
  fallback5259:
    unless_null $P5021, vivi_16815260
    die "Contextual $*W not found"
    box $P5025, "Contextual $*W not found"
    set $P5021, $P5025
  vivi_16815260:
    set $P5020, $P5021
  fallback5258:
    set $P5026, $P101["block_past"]
    unless_null $P5026, fallback5261
    nqp_get_sc_object $P5027, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5026, $P5027
  fallback5261:
    $P5028 = $P5020."create_code"($P5026, $P102, 0)
    set $P5017, $P5028
  defor5256:
    set $P5007[$S5001], $P5017
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "regex_declarator" :subid("cuid_315_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2700
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :optional 
    .param int haz_param_5 :opt_flag 
    .const 'Sub' $P5074 = 'cuid_485_1358115338.889' 
    capture_lex $P5074 
    if haz_param_5, default5344
    nqp_get_sc_object $P5073, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_2, $P5073
  default5344:
    .lex "$name", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .lex "$key", _lex_param_2 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
    unless_null _lex_param_1, fallback5266
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5004
  fallback5266:
    set $P5003, _lex_param_1["deflongname"]
    unless_null $P5003, fallback5267
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5003, $P5005
  fallback5267:
    unless $P5003 goto if1682_else5264 
.annotate 'line', 2702
.annotate 'line', 2703
    unless_null _lex_param_1, fallback5268
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5007
  fallback5268:
    set $P5006, _lex_param_1["deflongname"]
    unless_null $P5006, fallback5269
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5006, $P5008
  fallback5269:
    $P5009 = $P5006."ast"()
    set $S5001, $P5009
    box $P5010, $S5001
    set $P101, $P5010
    goto if1682_end5265
  if1682_else5264:
.annotate 'line', 2705
    find_dynamic_lex $P5011, "$*PKGDECL"
    unless_null $P5011, fallback5272
    nqp_get_sc_object $P5014, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["$PKGDECL"]
    unless_null $P5012, fallback5273
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5012, $P5015
  fallback5273:
    unless_null $P5012, vivi_16845274
    die "Contextual $*PKGDECL not found"
    box $P5016, "Contextual $*PKGDECL not found"
    set $P5012, $P5016
  vivi_16845274:
    set $P5011, $P5012
  fallback5272:
    set $S5002, $P5011
    isne $I5001, $S5002, "role"
    unless $I5001 goto if1683_end5271 
.annotate 'line', 2706
.annotate 'line', 2707
    $P5017 = _lex_param_1."CURSOR"()
    $P5018 = $P5017."panic"("Late-bound method name only valid in role")
  if1683_end5271:
    unless_null _lex_param_1, fallback5275
    nqp_get_sc_object $P5020, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5020
  fallback5275:
    set $P5019, _lex_param_1["latename"]
    unless_null $P5019, fallback5276
    nqp_get_sc_object $P5021, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5019, $P5021
  fallback5276:
    set $S5004, $P5019
    concat $S5003, "!!LATENAME!!", $S5004
    box $P5022, $S5003
    set $P101, $P5022
  if1682_end5265:
    unless_null _lex_param_1, fallback5279
    nqp_get_sc_object $P5024, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5024
  fallback5279:
    set $P5023, _lex_param_1["proto"]
    unless_null $P5023, fallback5280
    nqp_get_sc_object $P5025, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5023, $P5025
  fallback5280:
    unless $P5023 goto if1685_else5277 
.annotate 'line', 2712
.annotate 'line', 2713
    nqp_get_sc_object $P5029, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Block"]
    unless_null $P5026, fallback5281
    nqp_get_sc_object $P5030, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5026, $P5030
  fallback5281:
.annotate 'line', 2715
    nqp_get_sc_object $P5034, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5033, $P5034, "QAST"
    get_who $P5032, $P5033
    set $P5031, $P5032["Op"]
    unless_null $P5031, fallback5282
    nqp_get_sc_object $P5035, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5031, $P5035
  fallback5282:
.annotate 'line', 2716
    nqp_get_sc_object $P5039, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Var"]
    unless_null $P5036, fallback5283
    nqp_get_sc_object $P5040, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5036, $P5040
  fallback5283:
    $P5041 = $P5036."new"("self" :named("name"), "local" :named("scope"), "param" :named("decl"))
.annotate 'line', 2717
    nqp_get_sc_object $P5045, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["SVal"]
    unless_null $P5042, fallback5284
    nqp_get_sc_object $P5046, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5042, $P5046
  fallback5284:
    $P5047 = $P5042."new"($P101 :named("value"))
    $P5048 = $P5031."new"($P5041, $P5047, "!protoregex" :named("name"), "callmethod" :named("op"))
    $P5049 = $P5026."new"($P5048, $P101 :named("name"), "declaration" :named("blocktype"), _lex_param_1 :named("node"))
    set $P102, $P5049
.annotate 'line', 2724
    find_dynamic_lex $P5050, "$*W"
    unless_null $P5050, fallback5285
    nqp_get_sc_object $P5053, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5052, $P5053
    set $P5051, $P5052["$W"]
    unless_null $P5051, fallback5286
    nqp_get_sc_object $P5054, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5051, $P5054
  fallback5286:
    unless_null $P5051, vivi_16865287
    die "Contextual $*W not found"
    box $P5055, "Contextual $*W not found"
    set $P5051, $P5055
  vivi_16865287:
    set $P5050, $P5051
  fallback5285:
    find_dynamic_lex $P5056, "$*PACKAGE"
    unless_null $P5056, fallback5288
    nqp_get_sc_object $P5059, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5058, $P5059
    set $P5057, $P5058["$PACKAGE"]
    unless_null $P5057, fallback5289
    nqp_get_sc_object $P5060, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5057, $P5060
  fallback5289:
    unless_null $P5057, vivi_16875290
    die "Contextual $*PACKAGE not found"
    box $P5061, "Contextual $*PACKAGE not found"
    set $P5057, $P5061
  vivi_16875290:
    set $P5056, $P5057
  fallback5288:
.annotate 'line', 2725
    find_dynamic_lex $P5062, "$*W"
    unless_null $P5062, fallback5291
    nqp_get_sc_object $P5065, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5064, $P5065
    set $P5063, $P5064["$W"]
    unless_null $P5063, fallback5292
    nqp_get_sc_object $P5066, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5063, $P5066
  fallback5292:
    unless_null $P5063, vivi_16885293
    die "Contextual $*W not found"
    box $P5067, "Contextual $*W not found"
    set $P5063, $P5067
  vivi_16885293:
    set $P5062, $P5063
  fallback5291:
    $P5068 = $P5062."create_code"($P102, $P101, 0, "NQPRegex" :named("code_type_name"))
    $P5069 = $P5050."pkg_add_method"($P5056, "add_method", $P101, $P5068)
    goto if1685_end5278
  if1685_else5277:
    .const 'Sub' $P5070 = 'cuid_485_1358115338.889' 
    capture_lex $P5070
    $P5071 = $P5070()
  if1685_end5278:
.annotate 'line', 2764
    $P5072 = _lex_param_1."!make"($P102)
    .return ($P5072) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_485_1358115338.889") :anon :lex :outer("cuid_315_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2727
    .const 'Sub' $P5130 = 'cuid_484_1358115338.889' 
    capture_lex $P5130 
    .lex "$block", $P101 
    .lex "$code", $P102 
    .lex "$regex", $P103 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P103, $P5003
.annotate 'line', 2728
    find_dynamic_lex $P5004, "$*W"
    unless_null $P5004, fallback5294
    nqp_get_sc_object $P5007, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["$W"]
    unless_null $P5005, fallback5295
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5005, $P5008
  fallback5295:
    unless_null $P5005, vivi_16895296
    die "Contextual $*W not found"
    box $P5009, "Contextual $*W not found"
    set $P5005, $P5009
  vivi_16895296:
    set $P5004, $P5005
  fallback5294:
    $P5010 = $P5004."pop_lexpad"()
    set $P101, $P5010
.annotate 'line', 2729
    set $P5011, $P101[0]
    unless_null $P5011, fallback5297
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5011, $P5012
  fallback5297:
    nqp_get_sc_object $P5016, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["Var"]
    unless_null $P5013, fallback5298
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5013, $P5017
  fallback5298:
    $P5018 = $P5013."new"("self" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5011."unshift"($P5018)
.annotate 'line', 2730
    set $P5019, $P101[0]
    unless_null $P5019, fallback5299
    nqp_get_sc_object $P5020, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5019, $P5020
  fallback5299:
    nqp_get_sc_object $P5024, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["Op"]
    unless_null $P5021, fallback5300
    nqp_get_sc_object $P5025, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5021, $P5025
  fallback5300:
.annotate 'line', 2732
    nqp_get_sc_object $P5029, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Var"]
    unless_null $P5026, fallback5301
    nqp_get_sc_object $P5030, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5026, $P5030
  fallback5301:
    $P5031 = $P5026."new"("self" :named("name"), "local" :named("scope"), "var" :named("decl"))
.annotate 'line', 2733
    nqp_get_sc_object $P5035, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5034, $P5035, "QAST"
    get_who $P5033, $P5034
    set $P5032, $P5033["Var"]
    unless_null $P5032, fallback5302
    nqp_get_sc_object $P5036, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5032, $P5036
  fallback5302:
    $P5037 = $P5032."new"("self" :named("name"), "lexical" :named("scope"))
    $P5038 = $P5021."new"($P5031, $P5037, "bind" :named("op"))
    $P5019."push"($P5038)
.annotate 'line', 2734
    set $P5039, $P101[0]
    unless_null $P5039, fallback5303
    nqp_get_sc_object $P5040, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5039, $P5040
  fallback5303:
    nqp_get_sc_object $P5044, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["Var"]
    unless_null $P5041, fallback5304
    nqp_get_sc_object $P5045, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5041, $P5045
  fallback5304:
    $P5046 = $P5041."new"(utf8:"$\x{a2}" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5039."push"($P5046)
.annotate 'line', 2735
    set $P5047, $P101[0]
    unless_null $P5047, fallback5305
    nqp_get_sc_object $P5048, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5047, $P5048
  fallback5305:
    nqp_get_sc_object $P5052, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5051, $P5052, "QAST"
    get_who $P5050, $P5051
    set $P5049, $P5050["Var"]
    unless_null $P5049, fallback5306
    nqp_get_sc_object $P5053, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5049, $P5053
  fallback5306:
    $P5054 = $P5049."new"("$/" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5047."push"($P5054)
.annotate 'line', 2736
    $P101."symbol"(utf8:"$\x{a2}", "lexical" :named("scope"))
.annotate 'line', 2737
    $P101."symbol"("$/", "lexical" :named("scope"))
    find_dynamic_lex $P5056, "%*RX"
    unless_null $P5056, fallback5307
    nqp_get_sc_object $P5059, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5058, $P5059
    set $P5057, $P5058["%RX"]
    unless_null $P5057, fallback5308
    nqp_get_sc_object $P5061, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5060, $P5061
    new $P5062, 'Hash'
    set $P5060["%RX"], $P5062
    set $P5057, $P5062
  fallback5308:
    unless_null $P5057, vivi_16905309
    die "Contextual %*RX not found"
    box $P5063, "Contextual %*RX not found"
    set $P5057, $P5063
  vivi_16905309:
    set $P5056, $P5057
  fallback5307:
    set $P5055, $P5056["code"]
    unless_null $P5055, fallback5310
    nqp_get_sc_object $P5064, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5055, $P5064
  fallback5310:
    set $P102, $P5055
.annotate 'line', 2739
    find_dynamic_lex $P5066, "%*LANG"
    unless_null $P5066, fallback5311
    nqp_get_sc_object $P5069, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5068, $P5069
    set $P5067, $P5068["%LANG"]
    unless_null $P5067, fallback5312
    nqp_get_sc_object $P5071, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5070, $P5071
    new $P5072, 'Hash'
    set $P5070["%LANG"], $P5072
    set $P5067, $P5072
  fallback5312:
    unless_null $P5067, vivi_16915313
    die "Contextual %*LANG not found"
    box $P5073, "Contextual %*LANG not found"
    set $P5067, $P5073
  vivi_16915313:
    set $P5066, $P5067
  fallback5311:
    set $P5065, $P5066["Regex-actions"]
    unless_null $P5065, fallback5314
    nqp_get_sc_object $P5074, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5065, $P5074
  fallback5314:
    find_lex $P5076, "$/"
    unless_null $P5076, fallback5315
    nqp_get_sc_object $P5077, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5076, $P5077
  fallback5315:
    set $P5075, $P5076["p6regex"]
    unless_null $P5075, fallback5316
    nqp_get_sc_object $P5078, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5075, $P5078
  fallback5316:
    $P5079 = $P5075."ast"()
    $P5080 = $P5065."qbuildsub"($P5079, $P101, $P102 :named("code_obj"))
    set $P103, $P5080
.annotate 'line', 2740
    find_lex $P5081, "$name"
    $P103."name"($P5081)
    find_dynamic_lex $P5082, "$*PKGDECL"
    unless_null $P5082, fallback5321
    nqp_get_sc_object $P5085, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5084, $P5085
    set $P5083, $P5084["$PKGDECL"]
    unless_null $P5083, fallback5322
    nqp_get_sc_object $P5086, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5083, $P5086
  fallback5322:
    unless_null $P5083, vivi_16945323
    die "Contextual $*PKGDECL not found"
    box $P5087, "Contextual $*PKGDECL not found"
    set $P5083, $P5087
  vivi_16945323:
    set $P5082, $P5083
  fallback5321:
    set $P5095, $P5082
    unless $P5082 goto if1693_end5320 
    find_dynamic_lex $P5089, "$*PACKAGE"
    unless_null $P5089, fallback5324
    nqp_get_sc_object $P5092, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5091, $P5092
    set $P5090, $P5091["$PACKAGE"]
    unless_null $P5090, fallback5325
    nqp_get_sc_object $P5093, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5090, $P5093
  fallback5325:
    unless_null $P5090, vivi_16955326
    die "Contextual $*PACKAGE not found"
    box $P5094, "Contextual $*PACKAGE not found"
    set $P5090, $P5094
  vivi_16955326:
    set $P5089, $P5090
  fallback5324:
    get_how $P5088, $P5089
    can $I5001, $P5088, "add_method"
    box $P5096, $I5001
    set $P5095, $P5096
  if1693_end5320:
    unless $P5095 goto if1692_end5318 
.annotate 'line', 2742
.annotate 'line', 2744
    find_dynamic_lex $P5097, "$*W"
    unless_null $P5097, fallback5327
    nqp_get_sc_object $P5100, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5099, $P5100
    set $P5098, $P5099["$W"]
    unless_null $P5098, fallback5328
    nqp_get_sc_object $P5101, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5098, $P5101
  fallback5328:
    unless_null $P5098, vivi_16965329
    die "Contextual $*W not found"
    box $P5102, "Contextual $*W not found"
    set $P5098, $P5102
  vivi_16965329:
    set $P5097, $P5098
  fallback5327:
    find_dynamic_lex $P5103, "$*PACKAGE"
    unless_null $P5103, fallback5330
    nqp_get_sc_object $P5106, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5105, $P5106
    set $P5104, $P5105["$PACKAGE"]
    unless_null $P5104, fallback5331
    nqp_get_sc_object $P5107, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5104, $P5107
  fallback5331:
    unless_null $P5104, vivi_16975332
    die "Contextual $*PACKAGE not found"
    box $P5108, "Contextual $*PACKAGE not found"
    set $P5104, $P5108
  vivi_16975332:
    set $P5103, $P5104
  fallback5330:
    find_lex $P5109, "$name"
    $P5110 = $P5097."pkg_add_method"($P5103, "add_method", $P5109, $P102)
  if1692_end5318:
    find_dynamic_lex $P5111, "$*PKGDECL"
    unless_null $P5111, fallback5335
    nqp_get_sc_object $P5114, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5113, $P5114
    set $P5112, $P5113["$PKGDECL"]
    unless_null $P5112, fallback5336
    nqp_get_sc_object $P5115, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5112, $P5115
  fallback5336:
    unless_null $P5112, vivi_16995337
    die "Contextual $*PKGDECL not found"
    box $P5116, "Contextual $*PKGDECL not found"
    set $P5112, $P5116
  vivi_16995337:
    set $P5111, $P5112
  fallback5335:
    set $S5001, $P5111
    iseq $I5002, $S5001, "role"
    unless $I5002 goto if1698_end5334 
    .const 'Sub' $P5117 = 'cuid_484_1358115338.889' 
    capture_lex $P5117
    $P5118 = $P5117()
  if1698_end5334:
.annotate 'line', 2758
    nqp_get_sc_object $P5122, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5121, $P5122, "QAST"
    get_who $P5120, $P5121
    set $P5119, $P5120["Op"]
    unless_null $P5119, fallback5343
    nqp_get_sc_object $P5123, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5119, $P5123
  fallback5343:
.annotate 'line', 2760
    new $P5124, 'ResizablePMCArray'
    box $P5125, "NQPRegexMethod"
    push $P5124, $P5125
    find_lex $P5126, "$/"
    $P5127 = "&lexical_package_lookup"($P5124, $P5126)
    $P5128 = $P5119."new"($P5127, $P103, "callmethod" :named("op"), "new" :named("name"))
    store_lex "$past", $P5128
    find_lex $P5129, "$past"
    set $P5129["sink"], $P103
    .return ($P103) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_484_1358115338.889") :anon :lex :outer("cuid_485_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2749
    .lex "$gen_nfa", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
.annotate 'line', 2750
    nqp_get_sc_object $P5005, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5004, $P5005, "QRegex"
    get_who $P5003, $P5004
    set $P5002, $P5003["NFA"]
    unless_null $P5002, fallback5338
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5006
  fallback5338:
    $P5007 = $P5002."new"()
    set $P101, $P5007
.annotate 'line', 2751
    find_lex $P5009, "$/"
    unless_null $P5009, fallback5339
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5009, $P5010
  fallback5339:
    set $P5008, $P5009["p6regex"]
    unless_null $P5008, fallback5340
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5008, $P5011
  fallback5340:
    $P5012 = $P5008."ast"()
    $P101."addnode"($P5012, 1 :named("vars_as_generic"))
.annotate 'line', 2752
    $P5013 = $P101."generic"()
    set $P5016, $P5013
    unless $P5013 goto if1700_end5342 
.annotate 'line', 2753
    find_lex $P5014, "$code"
    $P5015 = $P5014."SET_GENERIC_NFA"($P101)
    set $P5016, $P5015
  if1700_end5342:
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "dotty" :subid("cuid_316_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2768
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    unless_null _lex_param_1, fallback5347
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5003
  fallback5347:
    set $P5002, _lex_param_1["args"]
    unless_null $P5002, fallback5348
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5004
  fallback5348:
    unless $P5002 goto if1701_else5345 
.annotate 'line', 2769
    unless_null _lex_param_1, fallback5349
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5007
  fallback5349:
    set $P5006, _lex_param_1["args"]
    unless_null $P5006, fallback5350
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5006, $P5008
  fallback5350:
    set $P5005, $P5006[0]
    unless_null $P5005, fallback5351
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5005, $P5009
  fallback5351:
    $P5010 = $P5005."ast"()
    set $P5017, $P5010
    goto if1701_end5346
  if1701_else5345:
    nqp_get_sc_object $P5014, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback5352
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5011, $P5015
  fallback5352:
    $P5016 = $P5011."new"(_lex_param_1 :named("node"))
    set $P5017, $P5016
  if1701_end5346:
    set $P101, $P5017
    unless_null _lex_param_1, fallback5355
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5019
  fallback5355:
    set $P5018, _lex_param_1["quote"]
    unless_null $P5018, fallback5356
    nqp_get_sc_object $P5020, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5018, $P5020
  fallback5356:
    unless $P5018 goto if1702_else5353 
.annotate 'line', 2770
.annotate 'line', 2771
    unless_null _lex_param_1, fallback5357
    nqp_get_sc_object $P5022, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5022
  fallback5357:
    set $P5021, _lex_param_1["quote"]
    unless_null $P5021, fallback5358
    nqp_get_sc_object $P5023, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5021, $P5023
  fallback5358:
    $P5024 = $P5021."ast"()
    $P101."unshift"($P5024)
.annotate 'line', 2772
    $P5025 = $P101."op"("callmethod")
    goto if1702_end5354
  if1702_else5353:
    unless_null _lex_param_1, fallback5361
    nqp_get_sc_object $P5027, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5027
  fallback5361:
    set $P5026, _lex_param_1["longname"]
    unless_null $P5026, fallback5362
    nqp_get_sc_object $P5028, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5026, $P5028
  fallback5362:
    set $S5001, $P5026
    iseq $I5001, $S5001, "HOW"
    unless $I5001 goto if1703_else5359 
.annotate 'line', 2774
.annotate 'line', 2775
    $P5029 = $P101."op"("how")
    set $P5049, $P5029
    goto if1703_end5360
  if1703_else5359:
    unless_null _lex_param_1, fallback5365
    nqp_get_sc_object $P5031, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5031
  fallback5365:
    set $P5030, _lex_param_1["longname"]
    unless_null $P5030, fallback5366
    nqp_get_sc_object $P5032, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5030, $P5032
  fallback5366:
    set $S5002, $P5030
    iseq $I5002, $S5002, "WHAT"
    unless $I5002 goto if1704_else5363 
.annotate 'line', 2777
.annotate 'line', 2778
    $P5033 = $P101."op"("what")
    set $P5048, $P5033
    goto if1704_end5364
  if1704_else5363:
    unless_null _lex_param_1, fallback5369
    nqp_get_sc_object $P5035, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5035
  fallback5369:
    set $P5034, _lex_param_1["longname"]
    unless_null $P5034, fallback5370
    nqp_get_sc_object $P5036, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5034, $P5036
  fallback5370:
    set $S5003, $P5034
    iseq $I5003, $S5003, "WHO"
    unless $I5003 goto if1705_else5367 
.annotate 'line', 2780
.annotate 'line', 2781
    $P5037 = $P101."op"("who")
    set $P5047, $P5037
    goto if1705_end5368
  if1705_else5367:
    unless_null _lex_param_1, fallback5373
    nqp_get_sc_object $P5039, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5039
  fallback5373:
    set $P5038, _lex_param_1["longname"]
    unless_null $P5038, fallback5374
    nqp_get_sc_object $P5040, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5038, $P5040
  fallback5374:
    set $S5004, $P5038
    iseq $I5004, $S5004, "REPR"
    unless $I5004 goto if1706_else5371 
.annotate 'line', 2783
.annotate 'line', 2784
    $P5041 = $P101."op"("reprname")
    set $P5046, $P5041
    goto if1706_end5372
  if1706_else5371:
.annotate 'line', 2786
.annotate 'line', 2787
    unless_null _lex_param_1, fallback5375
    nqp_get_sc_object $P5043, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5043
  fallback5375:
    set $P5042, _lex_param_1["longname"]
    unless_null $P5042, fallback5376
    nqp_get_sc_object $P5044, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5042, $P5044
  fallback5376:
    set $S5005, $P5042
    $P101."name"($S5005)
.annotate 'line', 2788
    $P5045 = $P101."op"("callmethod")
    set $P5046, $P5045
  if1706_end5372:
    set $P5047, $P5046
  if1705_end5368:
    set $P5048, $P5047
  if1704_end5364:
    set $P5049, $P5048
  if1703_end5360:
  if1702_end5354:
.annotate 'line', 2790
    $P5050 = _lex_param_1."!make"($P101)
    .return ($P5050) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<self>" :subid("cuid_317_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2795
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2796
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VM"]
    unless_null $P5001, fallback5377
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5005
  fallback5377:
.annotate 'line', 2797
    nqp_get_sc_object $P5009, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Var"]
    unless_null $P5006, fallback5378
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5006, $P5010
  fallback5378:
    $P5011 = $P5006."new"("self" :named("name"), "lexical" :named("scope"))
    $P5012 = $P5001."new"($P5011, "nqp_decontainerize PP" :named("pirop"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<identifier>" :subid("cuid_318_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2800
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
.annotate 'line', 2801
    unless_null _lex_param_1, fallback5379
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5003
  fallback5379:
    set $P5002, _lex_param_1["args"]
    unless_null $P5002, fallback5380
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5004
  fallback5380:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 2802
    unless_null _lex_param_1, fallback5381
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5007
  fallback5381:
    set $P5006, _lex_param_1["deflongname"]
    unless_null $P5006, fallback5382
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5006, $P5008
  fallback5382:
    set $S5002, $P5006
    concat $S5001, "&", $S5002
    $P101."name"($S5001)
.annotate 'line', 2803
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<name>" :subid("cuid_319_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2806
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5049 = 'cuid_486_1358115338.889' 
    capture_lex $P5049 
    .const 'Sub' $P5049 = 'cuid_487_1358115338.889' 
    capture_lex $P5049 
    .lex "$var", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
.annotate 'line', 2809
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback5385
    nqp_get_sc_object $P5006, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback5386
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5007
  fallback5386:
    unless_null $P5004, vivi_17085387
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_17085387:
    set $P5003, $P5004
  fallback5385:
    unless_null _lex_param_1, fallback5388
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5010
  fallback5388:
    set $P5009, _lex_param_1["name"]
    unless_null $P5009, fallback5389
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5009, $P5011
  fallback5389:
    set $S5001, $P5009
    $P5012 = $P5003."is_lexical"($S5001)
    unless $P5012 goto if1707_else5383 
    new $P5034, 'ExceptionHandler'
    set_label $P5034, catch_handler_17135402
    $P5034.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5034
.annotate 'line', 2810
    new $P5032, 'ExceptionHandler'
    set_label $P5032, catch_handler_17115397
    $P5032.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5032
.annotate 'line', 2811
    nqp_get_sc_object $P5016, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["WVal"]
    unless_null $P5013, fallback5390
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5013, $P5017
  fallback5390:
    find_dynamic_lex $P5018, "$*W"
    unless_null $P5018, fallback5391
    nqp_get_sc_object $P5021, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["$W"]
    unless_null $P5019, fallback5392
    nqp_get_sc_object $P5022, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5019, $P5022
  fallback5392:
    unless_null $P5019, vivi_17095393
    die "Contextual $*W not found"
    box $P5023, "Contextual $*W not found"
    set $P5019, $P5023
  vivi_17095393:
    set $P5018, $P5019
  fallback5391:
    new $P5024, 'ResizablePMCArray'
    unless_null _lex_param_1, fallback5394
    nqp_get_sc_object $P5026, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5026
  fallback5394:
    set $P5025, _lex_param_1["name"]
    unless_null $P5025, fallback5395
    nqp_get_sc_object $P5027, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5025, $P5027
  fallback5395:
    set $S5002, $P5025
    box $P5028, $S5002
    push $P5024, $P5028
    $P5029 = $P5018."find_sym"($P5024)
    $P5030 = $P5013."new"($P5029 :named("value"))
    set $P101, $P5030
    nqp_get_sc_object $P5031, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5033, $P5031
    pop_eh 
    goto skip_handler_17105396
  catch_handler_17115397:
    .get_results ($P5032) 
    .const 'Sub' $P10001 = 'cuid_486_1358115338.889' 
    capture_lex $P10001
    $P10001($P5032)
    set $I10001, 1
    set $P5032["handled"], $I10001
    nqp_get_sc_object $P10002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    finalize $P5032
    pop_upto_eh $P5032
    pop_eh 
    set $P5033, $P10002
    goto skip_handler_17105396
  skip_handler_17105396:
    set $P5035, $P5033
    pop_eh 
    goto skip_handler_17125401
  catch_handler_17135402:
    .get_results ($P5034) 
    set $I10001, 1
    set $P5034["handled"], $I10001
    nqp_get_sc_object $P10001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    finalize $P5034
    pop_upto_eh $P5034
    pop_eh 
    set $P5035, $P10001
    goto skip_handler_17125401
  skip_handler_17125401:
    goto if1707_end5384
  if1707_else5383:
    .const 'Sub' $P5036 = 'cuid_487_1358115338.889' 
    capture_lex $P5036
    $P5037 = $P5036()
  if1707_end5384:
    set $P102, $P101
    unless_null _lex_param_1, fallback5408
    nqp_get_sc_object $P5039, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5039
  fallback5408:
    set $P5038, _lex_param_1["args"]
    unless_null $P5038, fallback5409
    nqp_get_sc_object $P5040, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5038, $P5040
  fallback5409:
    unless $P5038 goto if1714_end5407 
.annotate 'line', 2824
.annotate 'line', 2825
    unless_null _lex_param_1, fallback5410
    nqp_get_sc_object $P5043, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5043
  fallback5410:
    set $P5042, _lex_param_1["args"]
    unless_null $P5042, fallback5411
    nqp_get_sc_object $P5044, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5042, $P5044
  fallback5411:
    set $P5041, $P5042[0]
    unless_null $P5041, fallback5412
    nqp_get_sc_object $P5045, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5041, $P5045
  fallback5412:
    $P5046 = $P5041."ast"()
    set $P102, $P5046
.annotate 'line', 2826
    $P5047 = $P102."unshift"($P101)
  if1714_end5407:
.annotate 'line', 2828
    $P5048 = _lex_param_1."!make"($P102)
    .return ($P5048) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_486_1358115338.889") :anon :lex :outer("cuid_319_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2812
    .param pmc _lex_param_0 
    .lex "$!", $P101 
    .lex "$_", _lex_param_0 
    set $P101, _lex_param_0
.annotate 'line', 2813
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Var"]
    unless_null $P5001, fallback5398
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5005
  fallback5398:
    find_lex $P5007, "$/"
    unless_null $P5007, fallback5399
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5007, $P5008
  fallback5399:
    set $P5006, $P5007["name"]
    unless_null $P5006, fallback5400
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5006, $P5009
  fallback5400:
    set $S5001, $P5006
    $P5010 = $P5001."new"($S5001 :named("name"), "lexical" :named("scope"))
    store_lex "$var", $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_487_1358115338.889") :anon :lex :outer("cuid_319_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2817
    .lex "@ns", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    find_lex $P5005, "$/"
    unless_null $P5005, fallback5403
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5005, $P5006
  fallback5403:
    set $P5004, $P5005["name"]
    unless_null $P5004, fallback5404
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5007
  fallback5404:
    set $P5003, $P5004["identifier"]
    unless_null $P5003, fallback5405
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5003, $P5008
  fallback5405:
    clone $P5002, $P5003
    set $P101, $P5002
.annotate 'line', 2819
    find_lex $P5009, "$/"
    $P5010 = "&lexical_package_lookup"($P101, $P5009)
    store_lex "$var", $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::op>" :subid("cuid_320_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2831
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "@args", $P101 
    .lex "$pirop", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
    unless_null _lex_param_1, fallback5415
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5004
  fallback5415:
    set $P5003, _lex_param_1["args"]
    unless_null $P5003, fallback5416
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5003, $P5005
  fallback5416:
    unless $P5003 goto if1715_else5413 
.annotate 'line', 2832
    unless_null _lex_param_1, fallback5417
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5008
  fallback5417:
    set $P5007, _lex_param_1["args"]
    unless_null $P5007, fallback5418
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5007, $P5009
  fallback5418:
    set $P5006, $P5007[0]
    unless_null $P5006, fallback5419
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5006, $P5010
  fallback5419:
    $P5011 = $P5006."ast"()
    $P5012 = $P5011."list"()
    set $P5014, $P5012
    goto if1715_end5414
  if1715_else5413:
    new $P5013, 'ResizablePMCArray'
    set $P5014, $P5013
  if1715_end5414:
    set $P101, $P5014
    unless_null _lex_param_1, fallback5420
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5016
  fallback5420:
    set $P5015, _lex_param_1["op"]
    unless_null $P5015, fallback5421
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5015, $P5017
  fallback5421:
    set $S5001, $P5015
    box $P5018, $S5001
    set $P102, $P5018
    set $S5003, $P102
    split $P5019, "__", $S5003
    join $S5002, " ", $P5019
    box $P5020, $S5002
    set $P102, $P5020
.annotate 'line', 2835
    nqp_get_sc_object $P5024, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["VM"]
    unless_null $P5021, fallback5422
    nqp_get_sc_object $P5025, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5021, $P5025
  fallback5422:
    $P5026 = $P5021."new"($P101 :flat, $P102 :named("pirop"), _lex_param_1 :named("node"))
    $P5027 = _lex_param_1."!make"($P5026)
    .return ($P5027) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::const>" :subid("cuid_321_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2838
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2839
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VM"]
    unless_null $P5001, fallback5423
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5005
  fallback5423:
    unless_null _lex_param_1, fallback5424
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5007
  fallback5424:
    set $P5006, _lex_param_1["const"]
    unless_null $P5006, fallback5425
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5006, $P5008
  fallback5425:
    set $S5001, $P5006
    $P5009 = $P5001."new"($S5001 :named("pirconst"))
    $P5010 = _lex_param_1."!make"($P5009)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<nqp::op>" :subid("cuid_322_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2842
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$op", $P101 
    .lex "@args", $P102 
    .lex "$past", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P103, $P5003
    unless_null _lex_param_1, fallback5426
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5005
  fallback5426:
    set $P5004, _lex_param_1["op"]
    unless_null $P5004, fallback5427
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5006
  fallback5427:
    set $S5001, $P5004
    box $P5007, $S5001
    set $P101, $P5007
    unless_null _lex_param_1, fallback5430
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5009
  fallback5430:
    set $P5008, _lex_param_1["args"]
    unless_null $P5008, fallback5431
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5008, $P5010
  fallback5431:
    unless $P5008 goto if1716_else5428 
.annotate 'line', 2844
    unless_null _lex_param_1, fallback5432
    nqp_get_sc_object $P5013, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5013
  fallback5432:
    set $P5012, _lex_param_1["args"]
    unless_null $P5012, fallback5433
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5012, $P5014
  fallback5433:
    set $P5011, $P5012[0]
    unless_null $P5011, fallback5434
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5011, $P5015
  fallback5434:
    $P5016 = $P5011."ast"()
    $P5017 = $P5016."list"()
    set $P5019, $P5017
    goto if1716_end5429
  if1716_else5428:
    new $P5018, 'ResizablePMCArray'
    set $P5019, $P5018
  if1716_end5429:
    set $P102, $P5019
.annotate 'line', 2845
    nqp_get_sc_object $P5023, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback5435
    nqp_get_sc_object $P5024, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5020, $P5024
  fallback5435:
    $P5025 = $P5020."new"($P102 :flat, $P101 :named("op"), _lex_param_1 :named("node"))
    set $P103, $P5025
.annotate 'line', 2846
    $P5026 = _lex_param_1."!make"($P103)
    .return ($P5026) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<onlystar>" :subid("cuid_323_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2849
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2850
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5436
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5005
  fallback5436:
    $P5006 = $P5001."new"("nqpmultidispatch" :named("op"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "args" :subid("cuid_324_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2853
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5437
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback5437:
    set $P5001, _lex_param_1["arglist"]
    unless_null $P5001, fallback5438
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback5438:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "arglist" :subid("cuid_325_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2855
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5052 = 'cuid_489_1358115338.889' 
    capture_lex $P5052 
    .lex "$past", $P101 
    .lex "$i", $P102 
    .lex "$n", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc tmp_2 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P103, $P5003
.annotate 'line', 2856
    nqp_get_sc_object $P5007, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Op"]
    unless_null $P5004, fallback5439
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5008
  fallback5439:
    $P5009 = $P5004."new"("call" :named("op"), _lex_param_1 :named("node"))
    set $P101, $P5009
    unless_null _lex_param_1, fallback5442
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5011
  fallback5442:
    set $P5010, _lex_param_1["EXPR"]
    unless_null $P5010, fallback5443
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5010, $P5012
  fallback5443:
    unless $P5010 goto if1717_end5441 
    .const 'Sub' $P5013 = 'cuid_489_1358115338.889' 
    capture_lex $P5013
    $P5014 = $P5013()
  if1717_end5441:
    box $P5015, 0
    set $P102, $P5015
.annotate 'line', 2865
    $P5016 = $P101."list"()
    set $N5001, $P5016
    box $P5017, $N5001
    set $P103, $P5017
  while1721_test5456:
    set $N5002, $P102
    set $N5003, $P103
    islt $I5001, $N5002, $N5003
    box $P5050, $I5001
    set $P5049, $P5050
    unless $I5001 goto while1721_done5460 
  while1721_redo5458:
.annotate 'line', 2866
    set $I5003, $P102
    set $P5018, $P101[$I5003]
    unless_null $P5018, fallback5465
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5018, $P5019
  fallback5465:
    nqp_get_sc_object $P5023, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback5466
    nqp_get_sc_object $P5024, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5020, $P5024
  fallback5466:
    type_check $I5002, $P5018, $P5020
    set $I5006, $I5002
    unless $I5002 goto if1723_end5464 
.annotate 'line', 2867
    set $I5005, $P102
    set $P5025, $P101[$I5005]
    unless_null $P5025, fallback5467
    nqp_get_sc_object $P5026, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5025, $P5026
  fallback5467:
    $P5027 = $P5025."name"()
    set $S5001, $P5027
    iseq $I5004, $S5001, "&prefix:<|>"
    set $I5006, $I5004
  if1723_end5464:
    unless $I5006 goto if1722_end5462 
    set $I5007, $P102
    set $I5008, $P102
    set $P5029, $P101[$I5008]
    unless_null $P5029, fallback5468
    nqp_get_sc_object $P5030, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5029, $P5030
  fallback5468:
    set $P5028, $P5029[0]
    unless_null $P5028, fallback5469
    nqp_get_sc_object $P5031, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5028, $P5031
  fallback5469:
    set $P101[$I5007], $P5028
.annotate 'line', 2869
    set $I5009, $P102
    set $P5032, $P101[$I5009]
    unless_null $P5032, fallback5470
    nqp_get_sc_object $P5033, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5032, $P5033
  fallback5470:
    $P5032."flat"(1)
    set $I5011, $P102
    set $P5034, $P101[$I5011]
    unless_null $P5034, fallback5475
    nqp_get_sc_object $P5035, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5034, $P5035
  fallback5475:
    nqp_get_sc_object $P5039, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Var"]
    unless_null $P5036, fallback5476
    nqp_get_sc_object $P5040, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5036, $P5040
  fallback5476:
    type_check $I5010, $P5034, $P5036
    set $I5014, $I5010
    unless $I5010 goto if1725_end5474 
.annotate 'line', 2871
    set $I5013, $P102
    set $P5041, $P101[$I5013]
    unless_null $P5041, fallback5477
    nqp_get_sc_object $P5042, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5041, $P5042
  fallback5477:
    $P5043 = $P5041."name"()
    set $S5003, $P5043
    substr $S5002, $S5003, 0, 1
    iseq $I5012, $S5002, "%"
    set $I5014, $I5012
  if1725_end5474:
    box $P5048, $I5014
    set $P5047, $P5048
    unless $I5014 goto if1724_end5472 
.annotate 'line', 2870
    set $I5015, $P102
    set $P5044, $P101[$I5015]
    unless_null $P5044, fallback5478
    nqp_get_sc_object $P5045, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5044, $P5045
  fallback5478:
    $P5046 = $P5044."named"(1)
    set $P5047, $P5046
  if1724_end5472:
  if1722_end5462:
    set tmp_2, $P102
    set $N5005, tmp_2
    set $N5006, 1
    add $N5004, $N5005, $N5006
    box $P5049, $N5004
    set $P102, $P5049
    set $P5049, tmp_2
    goto while1721_test5456 
  while1721_done5460:
.annotate 'line', 2875
    $P5051 = _lex_param_1."!make"($P101)
    .return ($P5051) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_489_1358115338.889") :anon :lex :outer("cuid_325_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2857
    .const 'Sub' $P5023 = 'cuid_488_1358115338.889' 
    capture_lex $P5023 
    .lex "$expr", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
.annotate 'line', 2858
    find_lex $P5003, "$/"
    unless_null $P5003, fallback5444
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5003, $P5004
  fallback5444:
    set $P5002, $P5003["EXPR"]
    unless_null $P5002, fallback5445
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5005
  fallback5445:
    $P5006 = $P5002."ast"()
    set $P101, $P5006
    nqp_get_sc_object $P5010, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Op"]
    unless_null $P5007, fallback5452
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5007, $P5011
  fallback5452:
    type_check $I5001, $P101, $P5007
    set $I5003, $I5001
    unless $I5001 goto if1720_end5451 
.annotate 'line', 2859
    $P5012 = $P101."name"()
    set $S5001, $P5012
    iseq $I5002, $S5001, "&infix:<,>"
    set $I5003, $I5002
  if1720_end5451:
    set $I5005, $I5003
    unless $I5003 goto if1719_end5449 
    $P5013 = $P101."named"()
    isfalse $I5004, $P5013
    set $I5005, $I5004
  if1719_end5449:
    unless $I5005 goto if1718_else5446 
.annotate 'line', 2860
    $P5017 = $P101."list"()
    set $P5014, $P5017
    iter $P5016, $P5017
  for_next5453:
    unless $P5016, for_done5455
    shift $P5019, $P5016
  for_redo5454:
    .const 'Sub' $P5018 = 'cuid_488_1358115338.889' 
    capture_lex $P5018
    $P5014 = $P5018($P5019)
    goto for_next5453
  for_done5455:
    set $P5022, $P5014
    goto if1718_end5447
  if1718_else5446:
.annotate 'line', 2862
    find_lex $P5020, "$past"
    $P5021 = $P5020."push"($P101)
    set $P5022, $P5021
  if1718_end5447:
    .return ($P5022) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_488_1358115338.889") :anon :lex :outer("cuid_489_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2860
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$past"
    $P5002 = $P5001."push"(_lex_param_0)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<multi_declarator>" :subid("cuid_326_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2878
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5479
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback5479:
    set $P5001, _lex_param_1["multi_declarator"]
    unless_null $P5001, fallback5480
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback5480:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<value>" :subid("cuid_327_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2880
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5481
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback5481:
    set $P5001, _lex_param_1["value"]
    unless_null $P5001, fallback5482
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback5482:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<( )>" :subid("cuid_328_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2882
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2883
    unless_null _lex_param_1, fallback5485
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback5485:
    set $P5001, _lex_param_1["EXPR"]
    unless_null $P5001, fallback5486
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback5486:
    unless $P5001 goto if1726_else5483 
.annotate 'line', 2884
    unless_null _lex_param_1, fallback5487
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5006
  fallback5487:
    set $P5005, _lex_param_1["EXPR"]
    unless_null $P5005, fallback5488
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5005, $P5007
  fallback5488:
    set $P5004, $P5005[0]
    unless_null $P5004, fallback5489
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5008
  fallback5489:
    $P5009 = $P5004."ast"()
    set $P5016, $P5009
    goto if1726_end5484
  if1726_else5483:
.annotate 'line', 2885
    nqp_get_sc_object $P5013, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5012, $P5013, "QAST"
    get_who $P5011, $P5012
    set $P5010, $P5011["Op"]
    unless_null $P5010, fallback5490
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5010, $P5014
  fallback5490:
    $P5015 = $P5010."new"("list" :named("op"), _lex_param_1 :named("node"))
    set $P5016, $P5015
  if1726_end5484:
    $P5017 = _lex_param_1."!make"($P5016)
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<[ ]>" :subid("cuid_329_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2888
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    unless_null _lex_param_1, fallback5493
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5003
  fallback5493:
    set $P5002, _lex_param_1["EXPR"]
    unless_null $P5002, fallback5494
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5004
  fallback5494:
    unless $P5002 goto if1727_else5491 
.annotate 'line', 2890
.annotate 'line', 2891
    unless_null _lex_param_1, fallback5495
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5007
  fallback5495:
    set $P5006, _lex_param_1["EXPR"]
    unless_null $P5006, fallback5496
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5006, $P5008
  fallback5496:
    set $P5005, $P5006[0]
    unless_null $P5005, fallback5497
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5005, $P5009
  fallback5497:
    $P5010 = $P5005."ast"()
    set $P101, $P5010
    nqp_get_sc_object $P5014, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback5502
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5011, $P5015
  fallback5502:
    type_check $I5001, $P101, $P5011
    set $I5003, $I5001
    unless $I5001 goto if1729_end5501 
.annotate 'line', 2892
    $P5016 = $P101."name"()
    set $S5001, $P5016
    iseq $I5002, $S5001, "&infix:<,>"
    set $I5003, $I5002
  if1729_end5501:
    box $P5024, $I5003
    set $P5023, $P5024
    if $I5003 goto unless1728_end5499 
.annotate 'line', 2893
    nqp_get_sc_object $P5020, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Op"]
    unless_null $P5017, fallback5503
    nqp_get_sc_object $P5021, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5017, $P5021
  fallback5503:
    $P5022 = $P5017."new"($P101, "list" :named("op"))
    set $P101, $P5022
    set $P5023, $P101
  unless1728_end5499:
    goto if1727_end5492
  if1727_else5491:
.annotate 'line', 2896
.annotate 'line', 2897
    nqp_get_sc_object $P5028, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["Op"]
    unless_null $P5025, fallback5504
    nqp_get_sc_object $P5029, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5025, $P5029
  fallback5504:
    $P5030 = $P5025."new"("list" :named("op"))
    set $P101, $P5030
  if1727_end5492:
.annotate 'line', 2899
    $P101."name"("&circumfix:<[ ]>")
.annotate 'line', 2900
    $P5031 = _lex_param_1."!make"($P101)
    .return ($P5031) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<ang>" :subid("cuid_330_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2903
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5505
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback5505:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5506
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback5506:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub utf8:"circumfix:sym<\x{ab} \x{bb}>" :subid("cuid_331_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2904
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5507
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback5507:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5508
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback5508:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<{ }>" :subid("cuid_332_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2906
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5028 = 'cuid_490_1358115338.889' 
    capture_lex $P5028 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5511
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5005
  fallback5511:
    set $P5004, _lex_param_1["pblock"]
    unless_null $P5004, fallback5512
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5006
  fallback5512:
    set $P5003, $P5004["blockoid"]
    unless_null $P5003, fallback5513
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5003, $P5007
  fallback5513:
    set $P5002, $P5003["statementlist"]
    unless_null $P5002, fallback5514
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5008
  fallback5514:
    set $P5001, $P5002["statement"]
    unless_null $P5001, fallback5515
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5009
  fallback5515:
    set $N5001, $P5001
    set $N5002, 0
    isgt $I5001, $N5001, $N5002
    unless $I5001 goto if1730_else5509 
    .const 'Sub' $P5010 = 'cuid_490_1358115338.889' 
    capture_lex $P5010
    $P5011 = $P5010()
    set $P5027, $P5011
    goto if1730_end5510
  if1730_else5509:
    unless_null _lex_param_1, fallback5521
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5015
  fallback5521:
    set $P5014, _lex_param_1["pblock"]
    unless_null $P5014, fallback5522
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5014, $P5016
  fallback5522:
    set $P5013, $P5014["blockoid"]
    unless_null $P5013, fallback5523
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5013, $P5017
  fallback5523:
    set $P5012, $P5013["you_are_here"]
    unless_null $P5012, fallback5524
    nqp_get_sc_object $P5018, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5012, $P5018
  fallback5524:
    unless $P5012 goto if1731_else5519 
.annotate 'line', 2912
.annotate 'line', 2913
    unless_null _lex_param_1, fallback5525
    nqp_get_sc_object $P5020, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5020
  fallback5525:
    set $P5019, _lex_param_1["pblock"]
    unless_null $P5019, fallback5526
    nqp_get_sc_object $P5021, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5019, $P5021
  fallback5526:
    $P5022 = $P5019."ast"()
    $P5023 = _lex_param_1."!make"($P5022)
    set $P5026, $P5023
    goto if1731_end5520
  if1731_else5519:
.annotate 'line', 2915
.annotate 'line', 2916
    $P5024 = "&default_for"("%")
    $P5025 = _lex_param_1."!make"($P5024)
    set $P5026, $P5025
  if1731_end5520:
    set $P5027, $P5026
  if1730_end5510:
    .return ($P5027) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_490_1358115338.889") :anon :lex :outer("cuid_332_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2907
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
.annotate 'line', 2908
    nqp_get_sc_object $P5005, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Op"]
    unless_null $P5002, fallback5516
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5006
  fallback5516:
    find_lex $P5008, "$/"
    unless_null $P5008, fallback5517
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5008, $P5009
  fallback5517:
    set $P5007, $P5008["pblock"]
    unless_null $P5007, fallback5518
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5007, $P5010
  fallback5518:
    $P5011 = $P5007."ast"()
    $P5012 = $P5002."new"($P5011, "takeclosure" :named("op"))
    set $P101, $P5012
    box $P5013, 1
    set $P101["bareblock"], $P5013
.annotate 'line', 2910
    find_dynamic_lex $P5014, "$/"
    $P5015 = $P5014."!make"($P101)
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<sigil>" :subid("cuid_333_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2920
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$name", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    unless_null _lex_param_1, fallback5529
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5003
  fallback5529:
    set $P5002, _lex_param_1["sigil"]
    unless_null $P5002, fallback5530
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5004
  fallback5530:
    set $S5001, $P5002
    iseq $I5001, $S5001, "@"
    unless $I5001 goto if1732_else5527 
    set $S5004, "list"
    goto if1732_end5528
  if1732_else5527:
    unless_null _lex_param_1, fallback5533
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5006
  fallback5533:
    set $P5005, _lex_param_1["sigil"]
    unless_null $P5005, fallback5534
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5005, $P5007
  fallback5534:
    set $S5002, $P5005
    iseq $I5002, $S5002, "%"
    unless $I5002 goto if1733_else5531 
    set $S5003, "hash"
    goto if1733_end5532
  if1733_else5531:
    set $S5003, "item"
  if1733_end5532:
    set $S5004, $S5003
  if1732_end5528:
    box $P5008, $S5004
    set $P101, $P5008
.annotate 'line', 2924
    nqp_get_sc_object $P5012, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["Op"]
    unless_null $P5009, fallback5535
    nqp_get_sc_object $P5013, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5009, $P5013
  fallback5535:
    unless_null _lex_param_1, fallback5536
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5015
  fallback5536:
    set $P5014, _lex_param_1["semilist"]
    unless_null $P5014, fallback5537
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5014, $P5016
  fallback5537:
    $P5017 = $P5014."ast"()
    $P5018 = $P5009."new"($P5017, "callmethod" :named("op"), $P101 :named("name"))
    $P5019 = _lex_param_1."!make"($P5018)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "semilist" :subid("cuid_334_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2927
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5538
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback5538:
    set $P5001, _lex_param_1["statement"]
    unless_null $P5001, fallback5539
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback5539:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<[ ]>" :subid("cuid_335_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2929
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2930
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VarWithFallback"]
    unless_null $P5001, fallback5540
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5005
  fallback5540:
    unless_null _lex_param_1, fallback5541
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5007
  fallback5541:
    set $P5006, _lex_param_1["EXPR"]
    unless_null $P5006, fallback5542
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5006, $P5008
  fallback5542:
    $P5009 = $P5006."ast"()
    $P5010 = "&default_for"("$")
    $P5011 = $P5001."new"($P5009, "positional" :named("scope"), $P5010 :named("fallback"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<{ }>" :subid("cuid_336_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2933
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2934
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VarWithFallback"]
    unless_null $P5001, fallback5543
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5005
  fallback5543:
    unless_null _lex_param_1, fallback5544
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5007
  fallback5544:
    set $P5006, _lex_param_1["EXPR"]
    unless_null $P5006, fallback5545
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5006, $P5008
  fallback5545:
    $P5009 = $P5006."ast"()
    $P5010 = "&default_for"("$")
    $P5011 = $P5001."new"($P5009, "associative" :named("scope"), $P5010 :named("fallback"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<ang>" :subid("cuid_337_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2937
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2938
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VarWithFallback"]
    unless_null $P5001, fallback5546
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5005
  fallback5546:
    unless_null _lex_param_1, fallback5547
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5007
  fallback5547:
    set $P5006, _lex_param_1["quote_EXPR"]
    unless_null $P5006, fallback5548
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5006, $P5008
  fallback5548:
    $P5009 = $P5006."ast"()
    $P5010 = "&default_for"("$")
    $P5011 = $P5001."new"($P5009, "associative" :named("scope"), $P5010 :named("fallback"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<( )>" :subid("cuid_338_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2941
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2942
    unless_null _lex_param_1, fallback5549
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback5549:
    set $P5001, _lex_param_1["arglist"]
    unless_null $P5001, fallback5550
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback5550:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "value" :subid("cuid_339_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2945
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2946
    unless_null _lex_param_1, fallback5553
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback5553:
    set $P5001, _lex_param_1["quote"]
    unless_null $P5001, fallback5554
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback5554:
    unless $P5001 goto if1734_else5551 
    unless_null _lex_param_1, fallback5555
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5005
  fallback5555:
    set $P5004, _lex_param_1["quote"]
    unless_null $P5004, fallback5556
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5004, $P5006
  fallback5556:
    $P5007 = $P5004."ast"()
    set $P5012, $P5007
    goto if1734_end5552
  if1734_else5551:
    unless_null _lex_param_1, fallback5557
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5009
  fallback5557:
    set $P5008, _lex_param_1["number"]
    unless_null $P5008, fallback5558
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5008, $P5010
  fallback5558:
    $P5011 = $P5008."ast"()
    set $P5012, $P5011
  if1734_end5552:
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "number" :subid("cuid_340_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2949
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$value", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    unless_null _lex_param_1, fallback5561
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5003
  fallback5561:
    set $P5002, _lex_param_1["dec_number"]
    unless_null $P5002, fallback5562
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5004
  fallback5562:
    unless $P5002 goto if1735_else5559 
.annotate 'line', 2950
    unless_null _lex_param_1, fallback5563
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5006
  fallback5563:
    set $P5005, _lex_param_1["dec_number"]
    unless_null $P5005, fallback5564
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5005, $P5007
  fallback5564:
    $P5008 = $P5005."ast"()
    set $P5013, $P5008
    goto if1735_end5560
  if1735_else5559:
    unless_null _lex_param_1, fallback5565
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5010
  fallback5565:
    set $P5009, _lex_param_1["integer"]
    unless_null $P5009, fallback5566
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5009, $P5011
  fallback5566:
    $P5012 = $P5009."ast"()
    set $P5013, $P5012
  if1735_end5560:
    set $P101, $P5013
    unless_null _lex_param_1, fallback5569
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5015
  fallback5569:
    set $P5014, _lex_param_1["sign"]
    unless_null $P5014, fallback5570
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5014, $P5016
  fallback5570:
    set $S5001, $P5014
    iseq $I5001, $S5001, "-"
    unless $I5001 goto if1736_end5568 
.annotate 'line', 2951
    set $N5002, $P101
    neg $N5001, $N5002
    box $P5017, $N5001
    set $P101, $P5017
  if1736_end5568:
.annotate 'line', 2952
    unless_null _lex_param_1, fallback5573
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5019
  fallback5573:
    set $P5018, _lex_param_1["dec_number"]
    unless_null $P5018, fallback5574
    nqp_get_sc_object $P5020, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5018, $P5020
  fallback5574:
    unless $P5018 goto if1737_else5571 
.annotate 'line', 2953
    nqp_get_sc_object $P5024, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["NVal"]
    unless_null $P5021, fallback5575
    nqp_get_sc_object $P5025, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5021, $P5025
  fallback5575:
    $P5026 = $P5021."new"($P101 :named("value"))
    set $P5033, $P5026
    goto if1737_end5572
  if1737_else5571:
.annotate 'line', 2954
    nqp_get_sc_object $P5030, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["IVal"]
    unless_null $P5027, fallback5576
    nqp_get_sc_object $P5031, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5027, $P5031
  fallback5576:
    $P5032 = $P5027."new"($P101 :named("value"))
    set $P5033, $P5032
  if1737_end5572:
    $P5034 = _lex_param_1."!make"($P5033)
    .return ($P5034) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<apos>" :subid("cuid_341_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2957
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5577
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback5577:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5578
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback5578:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<dblq>" :subid("cuid_342_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2958
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5579
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback5579:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5580
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback5580:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<qq>" :subid("cuid_343_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2959
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5581
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback5581:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5582
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback5582:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<q>" :subid("cuid_344_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2960
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5583
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback5583:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5584
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback5584:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q>" :subid("cuid_345_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2961
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5585
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback5585:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5586
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback5586:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q:PIR>" :subid("cuid_346_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2962
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2963
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VM"]
    unless_null $P5001, fallback5587
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5005
  fallback5587:
    unless_null _lex_param_1, fallback5588
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5007
  fallback5588:
    set $P5006, _lex_param_1["quote_EXPR"]
    unless_null $P5006, fallback5589
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5006, $P5008
  fallback5589:
    $P5009 = $P5006."ast"()
    $P5010 = $P5009."value"()
    $P5011 = $P5001."new"($P5010 :named("pir"), _lex_param_1 :named("node"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym</ />" :subid("cuid_347_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2966
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "$regex", $P102 
    .lex "$past", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P103, $P5003
.annotate 'line', 2967
    find_dynamic_lex $P5004, "$*W"
    unless_null $P5004, fallback5590
    nqp_get_sc_object $P5007, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["$W"]
    unless_null $P5005, fallback5591
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5005, $P5008
  fallback5591:
    unless_null $P5005, vivi_17385592
    die "Contextual $*W not found"
    box $P5009, "Contextual $*W not found"
    set $P5005, $P5009
  vivi_17385592:
    set $P5004, $P5005
  fallback5590:
    $P5010 = $P5004."pop_lexpad"()
    set $P101, $P5010
.annotate 'line', 2968
    set $P5011, $P101[0]
    unless_null $P5011, fallback5593
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5011, $P5012
  fallback5593:
    nqp_get_sc_object $P5016, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["Var"]
    unless_null $P5013, fallback5594
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5013, $P5017
  fallback5594:
    $P5018 = $P5013."new"("self" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5011."push"($P5018)
.annotate 'line', 2969
    set $P5019, $P101[0]
    unless_null $P5019, fallback5595
    nqp_get_sc_object $P5020, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5019, $P5020
  fallback5595:
    nqp_get_sc_object $P5024, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["Op"]
    unless_null $P5021, fallback5596
    nqp_get_sc_object $P5025, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5021, $P5025
  fallback5596:
.annotate 'line', 2971
    nqp_get_sc_object $P5029, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Var"]
    unless_null $P5026, fallback5597
    nqp_get_sc_object $P5030, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5026, $P5030
  fallback5597:
    $P5031 = $P5026."new"("self" :named("name"), "local" :named("scope"), "var" :named("decl"))
.annotate 'line', 2972
    nqp_get_sc_object $P5035, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5034, $P5035, "QAST"
    get_who $P5033, $P5034
    set $P5032, $P5033["Var"]
    unless_null $P5032, fallback5598
    nqp_get_sc_object $P5036, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5032, $P5036
  fallback5598:
    $P5037 = $P5032."new"("self" :named("name"), "lexical" :named("scope"))
    $P5038 = $P5021."new"($P5031, $P5037, "bind" :named("op"))
    $P5019."push"($P5038)
.annotate 'line', 2973
    set $P5039, $P101[0]
    unless_null $P5039, fallback5599
    nqp_get_sc_object $P5040, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5039, $P5040
  fallback5599:
    nqp_get_sc_object $P5044, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["Var"]
    unless_null $P5041, fallback5600
    nqp_get_sc_object $P5045, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5041, $P5045
  fallback5600:
    $P5046 = $P5041."new"(utf8:"$\x{a2}" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5039."push"($P5046)
.annotate 'line', 2974
    set $P5047, $P101[0]
    unless_null $P5047, fallback5601
    nqp_get_sc_object $P5048, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5047, $P5048
  fallback5601:
    nqp_get_sc_object $P5052, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5051, $P5052, "QAST"
    get_who $P5050, $P5051
    set $P5049, $P5050["Var"]
    unless_null $P5049, fallback5602
    nqp_get_sc_object $P5053, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5049, $P5053
  fallback5602:
    $P5054 = $P5049."new"("$/" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5047."push"($P5054)
.annotate 'line', 2975
    $P101."symbol"(utf8:"$\x{a2}", "lexical" :named("scope"))
.annotate 'line', 2976
    $P101."symbol"("$/", "lexical" :named("scope"))
.annotate 'line', 2978
    find_dynamic_lex $P5056, "%*LANG"
    unless_null $P5056, fallback5603
    nqp_get_sc_object $P5059, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5058, $P5059
    set $P5057, $P5058["%LANG"]
    unless_null $P5057, fallback5604
    nqp_get_sc_object $P5061, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5060, $P5061
    new $P5062, 'Hash'
    set $P5060["%LANG"], $P5062
    set $P5057, $P5062
  fallback5604:
    unless_null $P5057, vivi_17395605
    die "Contextual %*LANG not found"
    box $P5063, "Contextual %*LANG not found"
    set $P5057, $P5063
  vivi_17395605:
    set $P5056, $P5057
  fallback5603:
    set $P5055, $P5056["Regex-actions"]
    unless_null $P5055, fallback5606
    nqp_get_sc_object $P5064, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5055, $P5064
  fallback5606:
    unless_null _lex_param_1, fallback5607
    nqp_get_sc_object $P5066, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5066
  fallback5607:
    set $P5065, _lex_param_1["p6regex"]
    unless_null $P5065, fallback5608
    nqp_get_sc_object $P5067, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5065, $P5067
  fallback5608:
    $P5068 = $P5065."ast"()
    $P5069 = $P5055."qbuildsub"($P5068, $P101)
    set $P102, $P5069
.annotate 'line', 2979
    nqp_get_sc_object $P5073, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5072, $P5073, "QAST"
    get_who $P5071, $P5072
    set $P5070, $P5071["Op"]
    unless_null $P5070, fallback5609
    nqp_get_sc_object $P5074, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5070, $P5074
  fallback5609:
.annotate 'line', 2981
    new $P5075, 'ResizablePMCArray'
    box $P5076, "NQPRegex"
    push $P5075, $P5076
    $P5077 = "&lexical_package_lookup"($P5075, _lex_param_1)
    $P5078 = $P5070."new"($P5077, $P102, "callmethod" :named("op"), "new" :named("name"))
    set $P103, $P5078
    set $P103["sink"], $P102
.annotate 'line', 2986
    $P5079 = _lex_param_1."!make"($P103)
    .return ($P5079) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<$>" :subid("cuid_348_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2989
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5610
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback5610:
    set $P5001, _lex_param_1["variable"]
    unless_null $P5001, fallback5611
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback5611:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<{ }>" :subid("cuid_349_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2990
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2991
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5612
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5005
  fallback5612:
.annotate 'line', 2992
    unless_null _lex_param_1, fallback5613
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5007
  fallback5613:
    set $P5006, _lex_param_1["block"]
    unless_null $P5006, fallback5614
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5006, $P5008
  fallback5614:
    $P5009 = $P5006."ast"()
    $P5010 = "&block_immediate"($P5009)
    $P5011 = $P5001."new"($P5010, "stringify" :named("op"), _lex_param_1 :named("node"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<esc>" :subid("cuid_350_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2995
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    $P5001 = _lex_param_1."!make"("\e")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<.>" :subid("cuid_351_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2999
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5615
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback5615:
    set $P5001, _lex_param_1["dotty"]
    unless_null $P5001, fallback5616
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback5616:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<return>" :subid("cuid_352_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3001
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3002
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5617
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5005
  fallback5617:
.annotate 'line', 3004
    nqp_get_sc_object $P5009, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Var"]
    unless_null $P5006, fallback5618
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5006, $P5010
  fallback5618:
    $P5011 = $P5006."new"("RETURN" :named("name"), "lexical" :named("scope"))
    $P5012 = $P5001."new"($P5011, "call" :named("op"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<make>" :subid("cuid_353_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3008
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3009
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5619
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5005
  fallback5619:
.annotate 'line', 3010
    nqp_get_sc_object $P5009, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Var"]
    unless_null $P5006, fallback5620
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5006, $P5010
  fallback5620:
    $P5011 = $P5006."new"("$/" :named("name"), "contextual" :named("scope"))
    $P5012 = $P5001."new"($P5011, "callmethod" :named("op"), "!make" :named("name"), _lex_param_1 :named("node"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<next>" :subid("cuid_354_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3017
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5621
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5005
  fallback5621:
    $P5006 = $P5001."new"("control" :named("op"), "next" :named("name"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<last>" :subid("cuid_355_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3018
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5622
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5005
  fallback5622:
    $P5006 = $P5001."new"("control" :named("op"), "last" :named("name"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<redo>" :subid("cuid_356_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3019
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5623
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5005
  fallback5623:
    $P5006 = $P5001."new"("control" :named("op"), "redo" :named("name"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<~~>" :subid("cuid_357_1358115338.889") :anon :lex :outer("cuid_358_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3021
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3022
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5624
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5005
  fallback5624:
    $P5006 = $P5001."new"("callmethod" :named("op"), "ACCEPTS" :named("name"), _lex_param_1 :named("node"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_372_1358115338.889") :anon :lex :outer("cuid_1_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3103
    .const 'Sub' $P5014 = 'cuid_359_1358115338.889' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_360_1358115338.889' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_361_1358115338.889' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_362_1358115338.889' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_363_1358115338.889' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_364_1358115338.889' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_365_1358115338.889' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_366_1358115338.889' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_367_1358115338.889' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_368_1358115338.889' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_369_1358115338.889' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_370_1358115338.889' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_371_1358115338.889' 
    capture_lex $P5014 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    .const 'Sub' $P5001 = 'cuid_359_1358115338.889' 
    capture_lex $P5001
    .const 'Sub' $P5002 = 'cuid_360_1358115338.889' 
    capture_lex $P5002
    .const 'Sub' $P5003 = 'cuid_361_1358115338.889' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_362_1358115338.889' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_363_1358115338.889' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_364_1358115338.889' 
    capture_lex $P5006
    .const 'Sub' $P5007 = 'cuid_365_1358115338.889' 
    capture_lex $P5007
    .const 'Sub' $P5008 = 'cuid_366_1358115338.889' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_367_1358115338.889' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_368_1358115338.889' 
    capture_lex $P5010
    .const 'Sub' $P5011 = 'cuid_369_1358115338.889' 
    capture_lex $P5011
    .const 'Sub' $P5012 = 'cuid_370_1358115338.889' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_371_1358115338.889' 
    capture_lex $P5013
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<:my>" :subid("cuid_359_1358115338.889") :anon :lex :outer("cuid_372_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3105
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
.annotate 'line', 3106
    unless_null _lex_param_1, fallback5625
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5003
  fallback5625:
    set $P5002, _lex_param_1["statement"]
    unless_null $P5002, fallback5626
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5002, $P5004
  fallback5626:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 3107
    nqp_get_sc_object $P5009, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Regex"]
    unless_null $P5006, fallback5627
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5006, $P5010
  fallback5627:
    $P5011 = $P5006."new"($P101, "qastnode" :named("rxtype"), "declarative" :named("subtype"), _lex_param_1 :named("node"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<{ }>" :subid("cuid_360_1358115338.889") :anon :lex :outer("cuid_372_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3111
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3112
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5628
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5005
  fallback5628:
    unless_null _lex_param_1, fallback5629
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5007
  fallback5629:
    set $P5006, _lex_param_1["codeblock"]
    unless_null $P5006, fallback5630
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5006, $P5008
  fallback5630:
    $P5009 = $P5006."ast"()
    $P5010 = $P5001."new"($P5009, "qastnode" :named("rxtype"), _lex_param_1 :named("node"))
    $P5011 = _lex_param_1."!make"($P5010)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<nqpvar>" :subid("cuid_361_1358115338.889") :anon :lex :outer("cuid_372_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3116
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3117
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5631
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5005
  fallback5631:
    nqp_get_sc_object $P5009, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Node"]
    unless_null $P5006, fallback5632
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5006, $P5010
  fallback5632:
.annotate 'line', 3118
    nqp_get_sc_object $P5014, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback5633
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5011, $P5015
  fallback5633:
    $P5016 = $P5011."new"("!INTERPOLATE" :named("value"))
.annotate 'line', 3119
    unless_null _lex_param_1, fallback5634
    nqp_get_sc_object $P5018, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5018
  fallback5634:
    set $P5017, _lex_param_1["var"]
    unless_null $P5017, fallback5635
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5017, $P5019
  fallback5635:
    $P5020 = $P5017."ast"()
    $P5021 = $P5006."new"($P5016, $P5020)
    $P5022 = $P5001."new"($P5021, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    $P5023 = _lex_param_1."!make"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<{ }>" :subid("cuid_362_1358115338.889") :anon :lex :outer("cuid_372_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3123
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3124
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5636
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5005
  fallback5636:
    nqp_get_sc_object $P5009, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Node"]
    unless_null $P5006, fallback5637
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5006, $P5010
  fallback5637:
.annotate 'line', 3125
    nqp_get_sc_object $P5014, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback5638
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5011, $P5015
  fallback5638:
    $P5016 = $P5011."new"("!INTERPOLATE_REGEX" :named("value"))
.annotate 'line', 3126
    unless_null _lex_param_1, fallback5639
    nqp_get_sc_object $P5018, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5018
  fallback5639:
    set $P5017, _lex_param_1["codeblock"]
    unless_null $P5017, fallback5640
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5017, $P5019
  fallback5640:
    $P5020 = $P5017."ast"()
    $P5021 = $P5006."new"($P5016, $P5020)
    $P5022 = $P5001."new"($P5021, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    $P5023 = _lex_param_1."!make"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?{ }>" :subid("cuid_363_1358115338.889") :anon :lex :outer("cuid_372_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3130
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3131
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5641
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5005
  fallback5641:
    unless_null _lex_param_1, fallback5642
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5007
  fallback5642:
    set $P5006, _lex_param_1["codeblock"]
    unless_null $P5006, fallback5643
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5006, $P5008
  fallback5643:
    $P5009 = $P5006."ast"()
    unless_null _lex_param_1, fallback5644
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5011
  fallback5644:
    set $P5010, _lex_param_1["zw"]
    unless_null $P5010, fallback5645
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5010, $P5012
  fallback5645:
    set $S5001, $P5010
    iseq $I5001, $S5001, "!"
    $P5013 = $P5001."new"($P5009, "zerowidth" :named("subtype"), $I5001 :named("negate"), "qastnode" :named("rxtype"), _lex_param_1 :named("node"))
    $P5014 = _lex_param_1."!make"($P5013)
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<var>" :subid("cuid_364_1358115338.889") :anon :lex :outer("cuid_372_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3136
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3137
    nqp_get_sc_object $P5004, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5646
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5005
  fallback5646:
    nqp_get_sc_object $P5009, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Node"]
    unless_null $P5006, fallback5647
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5006, $P5010
  fallback5647:
.annotate 'line', 3138
    nqp_get_sc_object $P5014, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback5648
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5011, $P5015
  fallback5648:
    $P5016 = $P5011."new"("!INTERPOLATE_REGEX" :named("value"))
.annotate 'line', 3139
    unless_null _lex_param_1, fallback5649
    nqp_get_sc_object $P5018, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5018
  fallback5649:
    set $P5017, _lex_param_1["var"]
    unless_null $P5017, fallback5650
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5017, $P5019
  fallback5650:
    $P5020 = $P5017."ast"()
    $P5021 = $P5006."new"($P5016, $P5020)
    $P5022 = $P5001."new"($P5021, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    $P5023 = _lex_param_1."!make"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "codeblock" :subid("cuid_365_1358115338.889") :anon :lex :outer("cuid_372_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3143
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
.annotate 'line', 3144
    unless_null _lex_param_1, fallback5651
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5004
  fallback5651:
    set $P5003, _lex_param_1["block"]
    unless_null $P5003, fallback5652
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5003, $P5005
  fallback5652:
    $P5006 = $P5003."ast"()
    set $P101, $P5006
.annotate 'line', 3145
    $P101."blocktype"("immediate")
.annotate 'line', 3147
    nqp_get_sc_object $P5010, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Stmts"]
    unless_null $P5007, fallback5653
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5007, $P5011
  fallback5653:
.annotate 'line', 3148
    nqp_get_sc_object $P5015, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Op"]
    unless_null $P5012, fallback5654
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5012, $P5016
  fallback5654:
.annotate 'line', 3150
    nqp_get_sc_object $P5020, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Var"]
    unless_null $P5017, fallback5655
    nqp_get_sc_object $P5021, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5017, $P5021
  fallback5655:
    $P5022 = $P5017."new"("$/" :named("name"), "contextual" :named("scope"))
.annotate 'line', 3151
    nqp_get_sc_object $P5026, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5025, $P5026, "QAST"
    get_who $P5024, $P5025
    set $P5023, $P5024["Op"]
    unless_null $P5023, fallback5656
    nqp_get_sc_object $P5027, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5023, $P5027
  fallback5656:
.annotate 'line', 3152
    nqp_get_sc_object $P5031, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5030, $P5031, "QAST"
    get_who $P5029, $P5030
    set $P5028, $P5029["Var"]
    unless_null $P5028, fallback5657
    nqp_get_sc_object $P5032, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5028, $P5032
  fallback5657:
    $P5033 = $P5028."new"(utf8:"$\x{a2}" :named("name"), "contextual" :named("scope"))
    $P5034 = $P5023."new"($P5033, "MATCH" :named("name"), "callmethod" :named("op"))
    $P5035 = $P5012."new"($P5022, $P5034, "bind" :named("op"))
    $P5036 = $P5007."new"($P5035, $P101)
    set $P102, $P5036
.annotate 'line', 3159
    $P5037 = _lex_param_1."!make"($P102)
    .return ($P5037) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<name>" :subid("cuid_366_1358115338.889") :anon :lex :outer("cuid_372_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3162
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5085 = 'cuid_491_1358115338.889' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_492_1358115338.889' 
    capture_lex $P5085 
    .lex "$name", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
    unless_null _lex_param_1, fallback5658
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5004
  fallback5658:
    set $P5003, _lex_param_1["longname"]
    unless_null $P5003, fallback5659
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5003, $P5005
  fallback5659:
    set $S5001, $P5003
    box $P5006, $S5001
    set $P101, $P5006
    unless_null _lex_param_1, fallback5662
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5008
  fallback5662:
    set $P5007, _lex_param_1["assertion"]
    unless_null $P5007, fallback5663
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5007, $P5009
  fallback5663:
    unless $P5007 goto if1740_else5660 
.annotate 'line', 3165
.annotate 'line', 3166
    unless_null _lex_param_1, fallback5664
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5012
  fallback5664:
    set $P5011, _lex_param_1["assertion"]
    unless_null $P5011, fallback5665
    nqp_get_sc_object $P5013, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5011, $P5013
  fallback5665:
    set $P5010, $P5011[0]
    unless_null $P5010, fallback5666
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5010, $P5014
  fallback5666:
    $P5015 = $P5010."ast"()
    set $P102, $P5015
.annotate 'line', 3167
    nqp_decontainerize $P5016, _lex_param_0
    $P5017 = $P5016."subrule_alias"($P102, $P101)
    goto if1740_end5661
  if1740_else5660:
    set $S5002, $P101
    iseq $I5001, $S5002, "sym"
    unless $I5001 goto if1741_else5667 
    .const 'Sub' $P5018 = 'cuid_491_1358115338.889' 
    capture_lex $P5018
    $P5019 = $P5018()
    set $P5083, $P5019
    goto if1741_end5668
  if1741_else5667:
.annotate 'line', 3177
.annotate 'line', 3178
    nqp_get_sc_object $P5023, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Regex"]
    unless_null $P5020, fallback5685
    nqp_get_sc_object $P5024, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5020, $P5024
  fallback5685:
.annotate 'line', 3180
    nqp_get_sc_object $P5028, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["Node"]
    unless_null $P5025, fallback5686
    nqp_get_sc_object $P5029, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5025, $P5029
  fallback5686:
    nqp_get_sc_object $P5033, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["SVal"]
    unless_null $P5030, fallback5687
    nqp_get_sc_object $P5034, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5030, $P5034
  fallback5687:
    $P5035 = $P5030."new"($P101 :named("value"))
    $P5036 = $P5025."new"($P5035)
    $P5037 = $P5020."new"($P5036, "subrule" :named("rxtype"), "capture" :named("subtype"), _lex_param_1 :named("node"), $P101 :named("name"))
    set $P102, $P5037
    unless_null _lex_param_1, fallback5690
    nqp_get_sc_object $P5039, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5039
  fallback5690:
    set $P5038, _lex_param_1["arglist"]
    unless_null $P5038, fallback5691
    nqp_get_sc_object $P5040, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5038, $P5040
  fallback5691:
    unless $P5038 goto if1746_else5688 
.annotate 'line', 3181
.annotate 'line', 3182
    unless_null _lex_param_1, fallback5692
    nqp_get_sc_object $P5046, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5046
  fallback5692:
    set $P5045, _lex_param_1["arglist"]
    unless_null $P5045, fallback5693
    nqp_get_sc_object $P5047, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5045, $P5047
  fallback5693:
    set $P5044, $P5045[0]
    unless_null $P5044, fallback5694
    nqp_get_sc_object $P5048, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5044, $P5048
  fallback5694:
    $P5049 = $P5044."ast"()
    $P5050 = $P5049."list"()
    set $P5041, $P5050
    iter $P5043, $P5050
  for_next5696:
    unless $P5043, for_done5698
    shift $P5052, $P5043
  for_redo5697:
    .const 'Sub' $P5051 = 'cuid_492_1358115338.889' 
    capture_lex $P5051
    $P5041 = $P5051($P5052)
    goto for_next5696
  for_done5698:
    set $P5082, $P5041
    goto if1746_end5689
  if1746_else5688:
    unless_null _lex_param_1, fallback5701
    nqp_get_sc_object $P5054, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5054
  fallback5701:
    set $P5053, _lex_param_1["nibbler"]
    unless_null $P5053, fallback5702
    nqp_get_sc_object $P5055, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5053, $P5055
  fallback5702:
    set $P5081, $P5053
    unless $P5053 goto if1747_end5700 
.annotate 'line', 3184
    set $S5003, $P101
    iseq $I5002, $S5003, "after"
    unless $I5002 goto if1748_else5703 
.annotate 'line', 3186
    set $P5056, $P102[0]
    unless_null $P5056, fallback5705
    nqp_get_sc_object $P5057, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5056, $P5057
  fallback5705:
    nqp_decontainerize $P5058, _lex_param_0
    nqp_decontainerize $P5059, _lex_param_0
    unless_null _lex_param_1, fallback5706
    nqp_get_sc_object $P5062, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5062
  fallback5706:
    set $P5061, _lex_param_1["nibbler"]
    unless_null $P5061, fallback5707
    nqp_get_sc_object $P5063, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5061, $P5063
  fallback5707:
    set $P5060, $P5061[0]
    unless_null $P5060, fallback5708
    nqp_get_sc_object $P5064, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5060, $P5064
  fallback5708:
    $P5065 = $P5060."ast"()
    $P5066 = $P5059."flip_ast"($P5065)
    $P5067 = $P5058."qbuildsub"($P5066, 1 :named("anon"), 1 :named("addself"))
    $P5068 = $P5056."push"($P5067)
    set $P5080, $P5068
    goto if1748_end5704
  if1748_else5703:
.annotate 'line', 3187
    set $P5069, $P102[0]
    unless_null $P5069, fallback5709
    nqp_get_sc_object $P5070, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5069, $P5070
  fallback5709:
    nqp_decontainerize $P5071, _lex_param_0
    unless_null _lex_param_1, fallback5710
    nqp_get_sc_object $P5074, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5074
  fallback5710:
    set $P5073, _lex_param_1["nibbler"]
    unless_null $P5073, fallback5711
    nqp_get_sc_object $P5075, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5073, $P5075
  fallback5711:
    set $P5072, $P5073[0]
    unless_null $P5072, fallback5712
    nqp_get_sc_object $P5076, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5072, $P5076
  fallback5712:
    $P5077 = $P5072."ast"()
    $P5078 = $P5071."qbuildsub"($P5077, 1 :named("anon"), 1 :named("addself"))
    $P5079 = $P5069."push"($P5078)
    set $P5080, $P5079
  if1748_end5704:
    set $P5081, $P5080
  if1747_end5700:
    set $P5082, $P5081
  if1746_end5689:
    set $P5083, $P5082
  if1741_end5668:
  if1740_end5661:
.annotate 'line', 3190
    $P5084 = _lex_param_1."!make"($P102)
    .return ($P5084) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_491_1358115338.889") :anon :lex :outer("cuid_366_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3169
    .lex "$loc", $P101 
    .lex "$rxname", $P102 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P102, $P5002
    find_dynamic_lex $P5004, "%*RX"
    unless_null $P5004, fallback5669
    nqp_get_sc_object $P5007, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["%RX"]
    unless_null $P5005, fallback5670
    nqp_get_sc_object $P5009, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5008, $P5009
    new $P5010, 'Hash'
    set $P5008["%RX"], $P5010
    set $P5005, $P5010
  fallback5670:
    unless_null $P5005, vivi_17425671
    die "Contextual %*RX not found"
    box $P5011, "Contextual %*RX not found"
    set $P5005, $P5011
  vivi_17425671:
    set $P5004, $P5005
  fallback5669:
    set $P5003, $P5004["name"]
    unless_null $P5003, fallback5672
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5003, $P5012
  fallback5672:
    set $S5001, $P5003
    index $I5001, $S5001, ":sym<", 0
    box $P5013, $I5001
    set $P101, $P5013
    set $N5001, $P101
    set $N5002, 0
    islt $I5002, $N5001, $N5002
    unless $I5002 goto if1743_end5674 
    find_dynamic_lex $P5015, "%*RX"
    unless_null $P5015, fallback5675
    nqp_get_sc_object $P5018, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["%RX"]
    unless_null $P5016, fallback5676
    nqp_get_sc_object $P5020, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5019, $P5020
    new $P5021, 'Hash'
    set $P5019["%RX"], $P5021
    set $P5016, $P5021
  fallback5676:
    unless_null $P5016, vivi_17445677
    die "Contextual %*RX not found"
    box $P5022, "Contextual %*RX not found"
    set $P5016, $P5022
  vivi_17445677:
    set $P5015, $P5016
  fallback5675:
    set $P5014, $P5015["name"]
    unless_null $P5014, fallback5678
    nqp_get_sc_object $P5023, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5014, $P5023
  fallback5678:
    set $S5002, $P5014
    index $I5003, $S5002, utf8:":sym\x{ab}", 0
    box $P5024, $I5003
    set $P101, $P5024
  if1743_end5674:
    find_dynamic_lex $P5026, "%*RX"
    unless_null $P5026, fallback5679
    nqp_get_sc_object $P5029, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["%RX"]
    unless_null $P5027, fallback5680
    nqp_get_sc_object $P5031, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5030, $P5031
    new $P5032, 'Hash'
    set $P5030["%RX"], $P5032
    set $P5027, $P5032
  fallback5680:
    unless_null $P5027, vivi_17455681
    die "Contextual %*RX not found"
    box $P5033, "Contextual %*RX not found"
    set $P5027, $P5033
  vivi_17455681:
    set $P5026, $P5027
  fallback5679:
    set $P5025, $P5026["name"]
    unless_null $P5025, fallback5682
    nqp_get_sc_object $P5034, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5025, $P5034
  fallback5682:
    set $S5005, $P5025
    set $N5004, $P101
    set $N5005, 5
    add $N5003, $N5004, $N5005
    set $I5004, $N5003
    substr $S5004, $S5005, $I5004
    chopn $S5003, $S5004, 1
    box $P5035, $S5003
    set $P102, $P5035
.annotate 'line', 3174
    nqp_get_sc_object $P5039, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Regex"]
    unless_null $P5036, fallback5683
    nqp_get_sc_object $P5040, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5036, $P5040
  fallback5683:
    find_lex $P5041, "$/"
.annotate 'line', 3175
    nqp_get_sc_object $P5045, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["Regex"]
    unless_null $P5042, fallback5684
    nqp_get_sc_object $P5046, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5042, $P5046
  fallback5684:
    find_lex $P5047, "$/"
    $P5048 = $P5042."new"($P102, "literal" :named("rxtype"), $P5047 :named("node"))
    $P5049 = $P5036."new"($P5048, "sym" :named("name"), "subcapture" :named("rxtype"), $P5041 :named("node"))
    store_lex "$qast", $P5049
    .return ($P5049) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_492_1358115338.889") :anon :lex :outer("cuid_366_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3182
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$qast"
    set $P5001, $P5002[0]
    unless_null $P5001, fallback5695
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback5695:
    $P5004 = $P5001."push"(_lex_param_0)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "arg" :subid("cuid_367_1358115338.889") :anon :lex :outer("cuid_372_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3193
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3194
    unless_null _lex_param_1, fallback5713
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set _lex_param_1, $P5002
  fallback5713:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5714
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5001, $P5003
  fallback5714:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "create_regex_code_object" :subid("cuid_368_1358115338.889") :anon :lex :outer("cuid_372_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3197
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$code", $P101 
    .lex "self", _lex_param_0 
    .lex "$block", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P101, $P5001
.annotate 'line', 3198
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback5715
    nqp_get_sc_object $P5005, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback5716
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5003, $P5006
  fallback5716:
    unless_null $P5003, vivi_17495717
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_17495717:
    set $P5002, $P5003
  fallback5715:
    $P5008 = $P5002."create_code"(_lex_param_1, "", 0, "NQPRegex" :named("code_type_name"))
    set $P101, $P5008
    find_dynamic_lex $P5009, "%*RX"
    unless_null $P5009, fallback5720
    nqp_get_sc_object $P5012, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5011, $P5012
    set $P5010, $P5011["%RX"]
    unless_null $P5010, fallback5721
    nqp_get_sc_object $P5014, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5013, $P5014
    new $P5015, 'Hash'
    set $P5013["%RX"], $P5015
    set $P5010, $P5015
  fallback5721:
    unless_null $P5010, vivi_17515722
    die "Contextual %*RX not found"
    box $P5016, "Contextual %*RX not found"
    set $P5010, $P5016
  vivi_17515722:
    set $P5009, $P5010
  fallback5720:
    exists $I5001, $P5009["code"]
    unless $I5001 goto if1750_end5719 
.annotate 'line', 3199
.annotate 'line', 3200
    find_dynamic_lex $P5018, "%*RX"
    unless_null $P5018, fallback5723
    nqp_get_sc_object $P5021, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["%RX"]
    unless_null $P5019, fallback5724
    nqp_get_sc_object $P5023, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    get_who $P5022, $P5023
    new $P5024, 'Hash'
    set $P5022["%RX"], $P5024
    set $P5019, $P5024
  fallback5724:
    unless_null $P5019, vivi_17525725
    die "Contextual %*RX not found"
    box $P5025, "Contextual %*RX not found"
    set $P5019, $P5025
  vivi_17525725:
    set $P5018, $P5019
  fallback5723:
    set $P5017, $P5018["code"]
    unless_null $P5017, fallback5726
    nqp_get_sc_object $P5026, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    set $P5017, $P5026
  fallback5726:
    $P5027 = $P5017."ADD_NESTED_CODE"($P101)
  if1750_end5719:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "store_regex_nfa" :subid("cuid_369_1358115338.889") :anon :lex :outer("cuid_372_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3205
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "$nfa", _lex_param_3 
.annotate 'line', 3206
    $P5001 = _lex_param_3."save"()
    $P5002 = _lex_param_1."SET_NFA"($P5001)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "store_regex_caps" :subid("cuid_370_1358115338.889") :anon :lex :outer("cuid_372_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3209
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "%caps", _lex_param_3 
.annotate 'line', 3210
    $P5001 = _lex_param_1."SET_CAPS"(_lex_param_3)
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "store_regex_alt_nfa" :subid("cuid_371_1358115338.889") :anon :lex :outer("cuid_372_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3213
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 
    .const 'Sub' $P5008 = 'cuid_493_1358115338.889' 
    capture_lex $P5008 
    .lex "@saved", $P101 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "$key", _lex_param_3 
    .lex "@alternatives", _lex_param_4 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    set $P5002, _lex_param_4
    iter $P5004, _lex_param_4
  for_next5727:
    unless $P5004, for_done5729
    shift $P5006, $P5004
  for_redo5728:
    .const 'Sub' $P5005 = 'cuid_493_1358115338.889' 
    capture_lex $P5005
    $P5002 = $P5005($P5006)
    goto for_next5727
  for_done5729:
.annotate 'line', 3218
    $P5007 = _lex_param_1."SET_ALT_NFA"(_lex_param_3, $P101)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_493_1358115338.889") :anon :lex :outer("cuid_371_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3215
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 3216
    find_lex $P5001, "@saved"
    $P5002 = _lex_param_0."save"(1 :named("non_empty"))
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_373_1358115338.889") :anon :lex :outer("cuid_1_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3223
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495", 22
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_495_1358115338.889") :load :init
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .const 'Sub' $P5001 = 'cuid_494_1358115338.889' 
    capture_lex $P5001 
    .local pmc cur_sc 
    .local pmc conflicts 
    nqp_dynop_setup 
    nqp_bigint_setup 
    getinterp $P5001
    get_class $P5002, "LexPad"
    get_class $P5003, "NQPLexPad"
    $P5001."hll_map"($P5002, $P5003)
    load_bytecode "ModuleLoader.pbc"
    .const 'Sub' $P5001 = "cuid_1_1358115338.889" 
    get_hll_global $P5002, "ModuleLoader"
    $P5003 = $P5002."load_setting"("NQPCORE")
    $P5001."set_outer_ctx"($P5003)
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("NQPP6QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("NQPP6QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("QAST")
    nqp_create_sc $P5001, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915"
    set cur_sc, $P5001
    cur_sc."set_description"("src\\stage2\\gen\\NQP.pm")
    new $P5002, 'ResizablePMCArray'
    set conflicts, $P5002
    new $P5003, 'ResizableStringArray'
    null $S5001
    push $P5003, $S5001
    push $P5003, "P6opaque"
    push $P5003, "QAST"
    push $P5003, "QRegex"
    push $P5003, "NQPCursorRole"
    push $P5003, "5AB04DFAFFF209D71179F6DD66C39F5290FAF9C0-1358115315.378"
    push $P5003, "src\\stage2\\QRegex.nqp"
    push $P5003, "NQPMatch"
    push $P5003, "NQPCursor"
    push $P5003, "NQPRegexMethod"
    push $P5003, "NQPRegex"
    push $P5003, "HLL"
    push $P5003, "PIRT"
    push $P5003, "NQP"
    push $P5003, "DEFAULT"
    push $P5003, "CREATE"
    push $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1358115312.495"
    push $P5003, "src\\stage2\\NQPCORE.setting"
    push $P5003, "bless"
    push $P5003, "BUILDALL"
    push $P5003, "new"
    push $P5003, "Str"
    push $P5003, "Numeric"
    push $P5003, "Int"
    push $P5003, "at_pos"
    push $P5003, "at_key"
    push $P5003, "defined"
    push $P5003, "ACCEPTS"
    push $P5003, "isa"
    push $P5003, "__dump"
    push $P5003, "BUILD"
    push $P5003, "slot_for_object"
    push $P5003, "136FF03B5C018B0CC48711F2755B04CCEADF48A4-1358115319.161"
    push $P5003, "src\\stage2\\gen\\NQPHLL.pm"
    push $P5003, "add_object"
    push $P5003, "add_root_code_ref"
    push $P5003, "update_root_code_ref"
    push $P5003, "is_precompilation_mode"
    push $P5003, "add_load_dependency_task"
    push $P5003, "add_fixup_task"
    push $P5003, "sc"
    push $P5003, "handle"
    push $P5003, "code_ref_blocks"
    push $P5003, "load_dependency_tasks"
    push $P5003, "fixup_tasks"
    push $P5003, "push_lexpad"
    push $P5003, "pop_lexpad"
    push $P5003, "cur_lexpad"
    push $P5003, "get_legacy_block_list"
    push $P5003, "load_setting"
    push $P5003, "load_module"
    push $P5003, "import"
    push $P5003, "install_package_symbol"
    push $P5003, "install_lexical_symbol"
    push $P5003, "install_package_routine"
    push $P5003, "create_code"
    push $P5003, "pkg_create_mo"
    push $P5003, "pkg_add_attribute"
    push $P5003, "pkg_add_method"
    push $P5003, "set_routine_signature"
    push $P5003, "pkg_set_body_block"
    push $P5003, "pkg_add_parent_or_role"
    push $P5003, "pkg_add_parrot_vtable_handler_mapping"
    push $P5003, "pkg_compose"
    push $P5003, "run_begin_block"
    push $P5003, "libs"
    push $P5003, "add_initializations"
    push $P5003, "is_lexical"
    push $P5003, "is_package"
    push $P5003, "is_scope"
    push $P5003, "known_sym"
    push $P5003, "find_sym"
    push $P5003, "$!sc"
    push $P5003, "$!handle"
    push $P5003, "$!precomp_mode"
    push $P5003, "$!num_code_refs"
    push $P5003, "$!code_ref_blocks"
    push $P5003, "@!load_dependency_tasks"
    push $P5003, "@!fixup_tasks"
    push $P5003, "%!addr_to_slot"
    push $P5003, "@!BLOCKS"
    push $P5003, "%!code_objects_to_fix_up"
    push $P5003, "%!code_object_types"
    push $P5003, "%!code_object_fixup_list"
    push $P5003, "%!code_stub_sc_idx"
    push $P5003, "MATCH"
    push $P5003, "Bool"
    push $P5003, "parse"
    push $P5003, "!INTERPOLATE"
    push $P5003, "!INTERPOLATE_REGEX"
    push $P5003, "orig"
    push $P5003, "target"
    push $P5003, "from"
    push $P5003, "pos"
    push $P5003, "CAPHASH"
    push $P5003, "!cursor_init"
    push $P5003, "!cursor_start"
    push $P5003, "!cursor_start_subcapture"
    push $P5003, "!cursor_capture"
    push $P5003, "!cursor_push_cstack"
    push $P5003, "!cursor_pass"
    push $P5003, "!cursor_fail"
    push $P5003, "!cursor_pos"
    push $P5003, "!cursor_next"
    push $P5003, "!cursor_more"
    push $P5003, "!reduce"
    push $P5003, "!reduce_with_match"
    push $P5003, "!shared"
    push $P5003, "!protoregex"
    push $P5003, "!protoregex_nfa"
    push $P5003, "!protoregex_table"
    push $P5003, "!alt"
    push $P5003, "!alt_nfa"
    push $P5003, "!precompute_nfas"
    push $P5003, "!dba"
    push $P5003, "!highwater"
    push $P5003, "!highexpect"
    push $P5003, "!fresh_highexpect"
    push $P5003, "!set_highexpect"
    push $P5003, "!clear_highwater"
    push $P5003, "!BACKREF"
    push $P5003, "!LITERAL"
    push $P5003, "at"
    push $P5003, "before"
    push $P5003, "after"
    push $P5003, "ws"
    push $P5003, "ww"
    push $P5003, "wb"
    push $P5003, "ident"
    push $P5003, "alpha"
    push $P5003, "alnum"
    push $P5003, "upper"
    push $P5003, "lower"
    push $P5003, "digit"
    push $P5003, "xdigit"
    push $P5003, "space"
    push $P5003, "blank"
    push $P5003, "cntrl"
    push $P5003, "punct"
    push $P5003, "FAILGOAL"
    push $P5003, "throw_unrecog_backslash_seq"
    push $P5003, "termish"
    push $P5003, "term"
    push $P5003, "infix"
    push $P5003, "prefix"
    push $P5003, "postfix"
    push $P5003, "circumfix"
    push $P5003, "postcircumfix"
    push $P5003, "term:sym<circumfix>"
    push $P5003, "infixish"
    push $P5003, "prefixish"
    push $P5003, "postfixish"
    push $P5003, "nullterm"
    push $P5003, "nullterm_alt"
    push $P5003, "nulltermish"
    push $P5003, "quote_delimited"
    push $P5003, "quote_atom"
    push $P5003, "decint"
    push $P5003, "decints"
    push $P5003, "hexint"
    push $P5003, "hexints"
    push $P5003, "octint"
    push $P5003, "octints"
    push $P5003, "binint"
    push $P5003, "binints"
    push $P5003, "integer"
    push $P5003, "dec_number"
    push $P5003, "escale"
    push $P5003, "quote_escape"
    push $P5003, "quote_escape:sym<backslash>"
    push $P5003, "quote_escape:sym<stopper>"
    push $P5003, "quote_escape:sym<bs>"
    push $P5003, "quote_escape:sym<nl>"
    push $P5003, "quote_escape:sym<cr>"
    push $P5003, "quote_escape:sym<tab>"
    push $P5003, "quote_escape:sym<ff>"
    push $P5003, "quote_escape:sym<esc>"
    push $P5003, "quote_escape:sym<hex>"
    push $P5003, "quote_escape:sym<oct>"
    push $P5003, "quote_escape:sym<chr>"
    push $P5003, "quote_escape:sym<0>"
    push $P5003, "quote_escape:sym<misc>"
    push $P5003, "charname"
    push $P5003, "charnames"
    push $P5003, "charspec"
    push $P5003, "O"
    push $P5003, "panic"
    push $P5003, "peek_delimiters"
    push $P5003, "quote_EXPR"
    push $P5003, "quotemod_check"
    push $P5003, "starter"
    push $P5003, "stopper"
    push $P5003, "split_words"
    push $P5003, "EXPR"
    push $P5003, "EXPR_reduce"
    push $P5003, "EXPR_nonassoc"
    push $P5003, "ternary"
    push $P5003, "MARKER"
    push $P5003, "MARKED"
    push $P5003, "LANG"
    push $P5003, "TOP"
    push $P5003, "identifier"
    push $P5003, "name"
    push $P5003, "deflongname"
    push $P5003, "ENDSTMT"
    push $P5003, "unv"
    push $P5003, "pod_comment"
    push $P5003, "comp_unit"
    push $P5003, "statementlist"
    push $P5003, "statement"
    push $P5003, "eat_terminator"
    push $P5003, "xblock"
    push $P5003, "pblock"
    push $P5003, "lambda"
    push $P5003, "block"
    push $P5003, "blockoid"
    push $P5003, "newpad"
    push $P5003, "outerctx"
    push $P5003, "finishpad"
    push $P5003, "you_are_here"
    push $P5003, "terminator"
    push $P5003, "terminator:sym<;>"
    push $P5003, "terminator:sym<}>"
    push $P5003, "statement_control"
    push $P5003, "statement_control:sym<use>"
    push $P5003, "statement_control:sym<if>"
    push $P5003, "statement_control:sym<unless>"
    push $P5003, "statement_control:sym<while>"
    push $P5003, "statement_control:sym<repeat>"
    push $P5003, "statement_control:sym<for>"
    push $P5003, "statement_control:sym<CATCH>"
    push $P5003, "statement_control:sym<CONTROL>"
    push $P5003, "statement_prefix"
    push $P5003, "statement_prefix:sym<BEGIN>"
    push $P5003, "statement_prefix:sym<INIT>"
    push $P5003, "statement_prefix:sym<try>"
    push $P5003, "blorst"
    push $P5003, "statement_mod_cond"
    push $P5003, "statement_mod_cond:sym<if>"
    push $P5003, "statement_mod_cond:sym<unless>"
    push $P5003, "statement_mod_loop"
    push $P5003, "statement_mod_loop:sym<while>"
    push $P5003, "statement_mod_loop:sym<until>"
    push $P5003, "statement_mod_loop:sym<for>"
    push $P5003, "term:sym<fatarrow>"
    push $P5003, "term:sym<colonpair>"
    push $P5003, "term:sym<variable>"
    push $P5003, "term:sym<package_declarator>"
    push $P5003, "term:sym<scope_declarator>"
    push $P5003, "term:sym<routine_declarator>"
    push $P5003, "term:sym<multi_declarator>"
    push $P5003, "term:sym<regex_declarator>"
    push $P5003, "term:sym<statement_prefix>"
    push $P5003, "term:sym<lambda>"
    push $P5003, "fatarrow"
    push $P5003, "colonpair"
    push $P5003, "variable"
    push $P5003, "sigil"
    push $P5003, "twigil"
    push $P5003, "package_declarator"
    push $P5003, "package_declarator:sym<module>"
    push $P5003, "package_declarator:sym<knowhow>"
    push $P5003, "package_declarator:sym<class>"
    push $P5003, "package_declarator:sym<grammar>"
    push $P5003, "package_declarator:sym<role>"
    push $P5003, "package_declarator:sym<native>"
    push $P5003, "package_declarator:sym<stub>"
    push $P5003, "package_def"
    push $P5003, "role_params"
    push $P5003, "scope_declarator"
    push $P5003, "scope_declarator:sym<my>"
    push $P5003, "scope_declarator:sym<our>"
    push $P5003, "scope_declarator:sym<has>"
    push $P5003, "scoped"
    push $P5003, "typename"
    push $P5003, "declarator"
    push $P5003, "variable_declarator"
    push $P5003, "routine_declarator"
    push $P5003, "routine_declarator:sym<sub>"
    push $P5003, "routine_declarator:sym<method>"
    push $P5003, "routine_def"
    push $P5003, "method_def"
    push $P5003, "onlystar"
    push $P5003, "multi_declarator"
    push $P5003, "multi_declarator:sym<multi>"
    push $P5003, "multi_declarator:sym<proto>"
    push $P5003, "multi_declarator:sym<null>"
    push $P5003, "signature"
    push $P5003, "parameter"
    push $P5003, "param_var"
    push $P5003, "named_param"
    push $P5003, "default_value"
    push $P5003, "trait"
    push $P5003, "trait_mod"
    push $P5003, "trait_mod:sym<is>"
    push $P5003, "regex_declarator"
    push $P5003, "dotty"
    push $P5003, "term:sym<self>"
    push $P5003, "term:sym<identifier>"
    push $P5003, "term:sym<name>"
    push $P5003, "term:sym<pir::op>"
    push $P5003, "term:sym<pir::const>"
    push $P5003, "term:sym<nqp::op>"
    push $P5003, "term:sym<onlystar>"
    push $P5003, "args"
    push $P5003, "arglist"
    push $P5003, "term:sym<value>"
    push $P5003, "value"
    push $P5003, "number"
    push $P5003, "quote"
    push $P5003, "quote:sym<apos>"
    push $P5003, "quote:sym<dblq>"
    push $P5003, "quote:sym<q>"
    push $P5003, "quote:sym<qq>"
    push $P5003, "quote:sym<Q>"
    push $P5003, "quote:sym<Q:PIR>"
    push $P5003, "quote:sym</ />"
    push $P5003, "quote_escape:sym<$>"
    push $P5003, "quote_escape:sym<{ }>"
    push $P5003, "circumfix:sym<( )>"
    push $P5003, "circumfix:sym<[ ]>"
    push $P5003, "circumfix:sym<ang>"
    push $P5003, utf8:"circumfix:sym<\x{ab} \x{bb}>"
    push $P5003, "circumfix:sym<{ }>"
    push $P5003, "circumfix:sym<sigil>"
    push $P5003, "semilist"
    push $P5003, "infixstopper"
    push $P5003, "postcircumfix:sym<[ ]>"
    push $P5003, "postcircumfix:sym<{ }>"
    push $P5003, "postcircumfix:sym<ang>"
    push $P5003, "postcircumfix:sym<( )>"
    push $P5003, "postfix:sym<.>"
    push $P5003, "prefix:sym<++>"
    push $P5003, "prefix:sym<-->"
    push $P5003, "postfix:sym<++>"
    push $P5003, "postfix:sym<-->"
    push $P5003, "infix:sym<**>"
    push $P5003, "prefix:sym<+>"
    push $P5003, "prefix:sym<~>"
    push $P5003, "prefix:sym<->"
    push $P5003, "prefix:sym<?>"
    push $P5003, "prefix:sym<!>"
    push $P5003, "prefix:sym<|>"
    push $P5003, "infix:sym<*>"
    push $P5003, "infix:sym</>"
    push $P5003, "infix:sym<%>"
    push $P5003, "infix:sym<+&>"
    push $P5003, "infix:sym<+>"
    push $P5003, "infix:sym<->"
    push $P5003, "infix:sym<+|>"
    push $P5003, "infix:sym<+^>"
    push $P5003, "infix:sym<~>"
    push $P5003, "infix:sym<==>"
    push $P5003, "infix:sym<!=>"
    push $P5003, "infix:sym<<=>"
    push $P5003, "infix:sym<>=>"
    push $P5003, "infix:sym<<>"
    push $P5003, "infix:sym<>>"
    push $P5003, "infix:sym<eq>"
    push $P5003, "infix:sym<ne>"
    push $P5003, "infix:sym<le>"
    push $P5003, "infix:sym<ge>"
    push $P5003, "infix:sym<lt>"
    push $P5003, "infix:sym<gt>"
    push $P5003, "infix:sym<=:=>"
    push $P5003, "infix:sym<~~>"
    push $P5003, "infix:sym<&&>"
    push $P5003, "infix:sym<||>"
    push $P5003, "infix:sym<//>"
    push $P5003, "infix:sym<?? !!>"
    push $P5003, "infix:sym<=>"
    push $P5003, "infix:sym<:=>"
    push $P5003, "infix:sym<::=>"
    push $P5003, "infix:sym<,>"
    push $P5003, "prefix:sym<return>"
    push $P5003, "prefix:sym<make>"
    push $P5003, "term:sym<last>"
    push $P5003, "term:sym<next>"
    push $P5003, "term:sym<redo>"
    push $P5003, "smartmatch"
    push $P5003, "$!shared"
    push $P5003, "$!from"
    push $P5003, "$!pos"
    push $P5003, "$!match"
    push $P5003, "$!name"
    push $P5003, "$!bstack"
    push $P5003, "$!cstack"
    push $P5003, "$!regexsub"
    push $P5003, "$!restart"
    push $P5003, "C2CD81D83DF37D8B79F9D773DC26EB5ED1B4DAE5-1358115335.085"
    push $P5003, "src\\stage2\\gen\\NQPP6QRegex.pm"
    push $P5003, "obs"
    push $P5003, "throw_unrecognized_metachar"
    push $P5003, "throw_null_pattern"
    push $P5003, "normspace"
    push $P5003, "arg"
    push $P5003, "nibbler"
    push $P5003, "rxstopper"
    push $P5003, "termaltseq"
    push $P5003, "termconjseq"
    push $P5003, "termalt"
    push $P5003, "termconj"
    push $P5003, "quantified_atom"
    push $P5003, "separator"
    push $P5003, "atom"
    push $P5003, "quantifier"
    push $P5003, "quantifier:sym<*>"
    push $P5003, "quantifier:sym<+>"
    push $P5003, "quantifier:sym<?>"
    push $P5003, "quantifier:sym<{N,M}>"
    push $P5003, "quantifier:sym<**>"
    push $P5003, "backmod"
    push $P5003, "metachar"
    push $P5003, "metachar:sym<ws>"
    push $P5003, "metachar:sym<[ ]>"
    push $P5003, "metachar:sym<( )>"
    push $P5003, "metachar:sym<'>"
    push $P5003, "metachar:sym<\">"
    push $P5003, "metachar:sym<.>"
    push $P5003, "metachar:sym<^>"
    push $P5003, "metachar:sym<^^>"
    push $P5003, "metachar:sym<$>"
    push $P5003, "metachar:sym<$$>"
    push $P5003, "metachar:sym<:::>"
    push $P5003, "metachar:sym<::>"
    push $P5003, "metachar:sym<lwb>"
    push $P5003, "metachar:sym<rwb>"
    push $P5003, "metachar:sym<from>"
    push $P5003, "metachar:sym<to>"
    push $P5003, "metachar:sym<bs>"
    push $P5003, "metachar:sym<mod>"
    push $P5003, "metachar:sym<quantifier>"
    push $P5003, "metachar:sym<~>"
    push $P5003, "metachar:sym<{*}>"
    push $P5003, "metachar:sym<assert>"
    push $P5003, "metachar:sym<var>"
    push $P5003, "backslash"
    push $P5003, "backslash:sym<s>"
    push $P5003, "backslash:sym<b>"
    push $P5003, "backslash:sym<e>"
    push $P5003, "backslash:sym<f>"
    push $P5003, "backslash:sym<h>"
    push $P5003, "backslash:sym<r>"
    push $P5003, "backslash:sym<t>"
    push $P5003, "backslash:sym<v>"
    push $P5003, "backslash:sym<o>"
    push $P5003, "backslash:sym<x>"
    push $P5003, "backslash:sym<c>"
    push $P5003, "backslash:sym<A>"
    push $P5003, "backslash:sym<z>"
    push $P5003, "backslash:sym<Z>"
    push $P5003, "backslash:sym<Q>"
    push $P5003, "backslash:sym<unrec>"
    push $P5003, "backslash:sym<misc>"
    push $P5003, "assertion"
    push $P5003, "assertion:sym<?>"
    push $P5003, "assertion:sym<!>"
    push $P5003, "assertion:sym<|>"
    push $P5003, "assertion:sym<method>"
    push $P5003, "assertion:sym<name>"
    push $P5003, "assertion:sym<[>"
    push $P5003, "cclass_elem"
    push $P5003, "mod_internal"
    push $P5003, "mod_ident"
    push $P5003, "mod_ident:sym<ignorecase>"
    push $P5003, "mod_ident:sym<ratchet>"
    push $P5003, "mod_ident:sym<sigspace>"
    push $P5003, "mod_ident:sym<dba>"
    push $P5003, "mod_ident:sym<oops>"
    push $P5003, "metachar:sym<:my>"
    push $P5003, "metachar:sym<{ }>"
    push $P5003, "metachar:sym<nqpvar>"
    push $P5003, "assertion:sym<{ }>"
    push $P5003, "assertion:sym<?{ }>"
    push $P5003, "assertion:sym<var>"
    push $P5003, "codeblock"
    push $P5003, "ints_to_string"
    push $P5003, "CTXSAVE"
    push $P5003, "SET_BLOCK_OUTER_CTX"
    push $P5003, "qbuildsub"
    push $P5003, "alt_nfas"
    push $P5003, "subrule_alias"
    push $P5003, "flip_ast"
    push $P5003, "create_regex_code_object"
    push $P5003, "store_regex_caps"
    push $P5003, "store_regex_nfa"
    push $P5003, "store_regex_alt_nfa"
    push $P5003, "language"
    push $P5003, "compiler"
    push $P5003, "config"
    push $P5003, "autoprint"
    push $P5003, "interactive"
    push $P5003, "eval"
    push $P5003, "ctxsave"
    push $P5003, "stages"
    push $P5003, "parsegrammar"
    push $P5003, "parseactions"
    push $P5003, "interactive_banner"
    push $P5003, "interactive_prompt"
    push $P5003, "compiler_progname"
    push $P5003, "commandline_options"
    push $P5003, "command_line"
    push $P5003, "command_eval"
    push $P5003, "process_args"
    push $P5003, "evalfiles"
    push $P5003, "compile"
    push $P5003, "start"
    push $P5003, "past"
    push $P5003, "post"
    push $P5003, "pirbegin"
    push $P5003, "pir"
    push $P5003, "evalpmc"
    push $P5003, "dumper"
    push $P5003, "usage"
    push $P5003, "version"
    push $P5003, "show-config"
    push $P5003, "verbose-config"
    push $P5003, "vmstat"
    push $P5003, "nqpevent"
    push $P5003, "removestage"
    push $P5003, "addstage"
    push $P5003, "parse_name"
    push $P5003, "lineof"
    push $P5003, "user-progname"
    push $P5003, "cli-options"
    push $P5003, "cli-arguments"
    push $P5003, "@!stages"
    push $P5003, "$!parsegrammar"
    push $P5003, "$!parseactions"
    push $P5003, "@!cmdoptions"
    push $P5003, "$!usage"
    push $P5003, "$!compiler_progname"
    push $P5003, "$!language"
    push $P5003, "%!config"
    push $P5003, "$!user_progname"
    push $P5003, "@!cli-arguments"
    push $P5003, "%!cli-options"
    push $P5003, ""
    push $P5003, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5003, "alt_nfa__1_1358115340.039"
    push $P5003, "alt_nfa__2_1358115340.055"
    push $P5003, utf8:"\n\x{b}\f\r\x{85}\u2028\u2029"
    push $P5003, "alt_nfa__4_1358115340.072"
    push $P5003, "alt_nfa__3_1358115340.064"
    push $P5003, "alt_nfa__6_1358115340.152"
    push $P5003, "alt_nfa__5_1358115340.14"
    push $P5003, "alt_nfa__7_1358115340.236"
    push $P5003, "alt_nfa__9_1358115340.255"
    push $P5003, "alt_nfa__8_1358115340.242"
    push $P5003, "{"
    push $P5003, "alt_nfa__10_1358115340.281"
    push $P5003, "alt_nfa__11_1358115340.287"
    push $P5003, ";"
    push $P5003, "}"
    push $P5003, "sym"
    push $P5003, "else"
    push $P5003, "alt_nfa__12_1358115340.382"
    push $P5003, "wu"
    push $P5003, "alt_nfa__13_1358115340.401"
    push $P5003, "alt_nfa__14_1358115340.401"
    push $P5003, "alt_nfa__15_1358115340.401"
    push $P5003, "alt_nfa__16_1358115340.449"
    push $P5003, "cond"
    push $P5003, "alt_nfa__17_1358115340.515"
    push $P5003, "alt_nfa__18_1358115340.523"
    push $P5003, "key"
    push $P5003, "val"
    push $P5003, "not"
    push $P5003, "alt_nfa__19_1358115340.56"
    push $P5003, "desigilname"
    push $P5003, "<["
    push $P5003, "/_!"
    push $P5003, "alt_nfa__20_1358115340.574"
    push $P5003, "$@%&"
    push $P5003, "*!?"
    push $P5003, "metaclass"
    push $P5003, "repr"
    push $P5003, "export"
    push $P5003, "parent"
    push $P5003, "role"
    push $P5003, "alt_nfa__21_1358115340.819"
    push $P5003, "alt_nfa__22_1358115340.832"
    push $P5003, "alt_nfa__23_1358115340.97"
    push $P5003, "latename"
    push $P5003, "private"
    push $P5003, "alt_nfa__24_1358115341.004"
    push $P5003, "invocant"
    push $P5003, "alt_nfa__26_1358115341.075"
    push $P5003, "alt_nfa__25_1358115341.071"
    push $P5003, "definedness"
    push $P5003, "quant"
    push $P5003, "_DU"
    push $P5003, "alt_nfa__27_1358115341.098"
    push $P5003, "alt_nfa__28_1358115341.099"
    push $P5003, "alt_nfa__29_1358115341.099"
    push $P5003, "/!"
    push $P5003, "alt_nfa__30_1358115341.109"
    push $P5003, "longname"
    push $P5003, "proto"
    push $P5003, "p6regex"
    push $P5003, "alt_nfa__31_1358115341.213"
    push $P5003, "alt_nfa__32_1358115341.214"
    push $P5003, "alt_nfa__33_1358115341.214"
    push $P5003, "'\""
    push $P5003, "("
    push $P5003, "alt_nfa__34_1358115341.236"
    push $P5003, "alt_nfa__35_1358115341.236"
    push $P5003, "op"
    push $P5003, "const"
    push $P5003, "alt_nfa__36_1358115341.301"
    push $P5003, "alt_nfa__37_1358115341.31"
    push $P5003, "sign"
    push $P5003, "alt_nfa__38_1358115341.319"
    push $P5003, "'"
    push $P5003, "\""
    push $P5003, "$"
    push $P5003, "<"
    push $P5003, utf8:"\x{ab}"
    push $P5003, "OPER"
    push $P5003, ">"
    push $P5003, "}/"
    push $P5003, "var"
    push $P5003, "$@&"
    push $P5003, "alt_nfa__39_1358115342.06"
    push $P5003, "alt_nfa__40_1358115342.082"
    push $P5003, "alt_nfa__41_1358115342.095"
    push $P5003, "zw"
    push $P5003, "?!"
    push $P5003, "alt_nfa__42_1358115342.125"
    push $P5003, "$@"
    push $P5003, "__6MODEL_CORE__"
    push $P5003, "GLOBALish"
    push $P5003, "EXPORT"
    push $P5003, "E60633096CF77B7390FCE5E36C3EEE91D71E477F-1358115309.233"
    push $P5003, "src\\stage2\\gen\\nqp-mo.pm"
    push $P5003, "NQP::World"
    push $P5003, "NQP::Grammar"
    push $P5003, "alt_nfa__1_1358115319.263"
    push $P5003, "alt_nfa__2_1358115319.294"
    push $P5003, "alt_nfa__3_1358115319.359"
    push $P5003, "alt_nfa__4_1358115319.359"
    push $P5003, "alt_nfa__5_1358115319.377"
    push $P5003, "alt_nfa__6_1358115319.446"
    push $P5003, "alt_nfa__7_1358115319.458"
    push $P5003, "alt_nfa__8_1358115319.492"
    push $P5003, "alt_nfa__9_1358115319.528"
    push $P5003, "shared"
    push $P5003, "match"
    push $P5003, "bstack"
    push $P5003, "cstack"
    push $P5003, "regexsub"
    push $P5003, "restart"
    push $P5003, "NQP::Regex"
    push $P5003, "alt_nfa__1_1358115335.203"
    push $P5003, "alt_nfa__2_1358115335.208"
    push $P5003, "alt_nfa__3_1358115335.229"
    push $P5003, "alt_nfa__4_1358115335.29"
    push $P5003, "alt_nfa__5_1358115335.307"
    push $P5003, "alt_nfa__6_1358115335.358"
    push $P5003, "alt_nfa__7_1358115335.382"
    push $P5003, "alt_nfa__8_1358115335.401"
    push $P5003, "alt_nfa__9_1358115335.466"
    push $P5003, "alt_nfa__10_1358115335.533"
    push $P5003, "alt_nfa__11_1358115335.54"
    push $P5003, "alt_nfa__12_1358115335.615"
    push $P5003, "alt_nfa__13_1358115335.672"
    push $P5003, "alt_nfa__14_1358115335.684"
    push $P5003, "alt_nfa__15_1358115335.747"
    push $P5003, "alt_nfa__16_1358115335.756"
    push $P5003, "alt_nfa__17_1358115335.785"
    push $P5003, "alt_nfa__18_1358115335.793"
    push $P5003, "alt_nfa__19_1358115335.851"
    push $P5003, "alt_nfa__20_1358115335.851"
    push $P5003, "alt_nfa__21_1358115335.852"
    push $P5003, "alt_nfa__23_1358115335.879"
    push $P5003, "alt_nfa__24_1358115335.879"
    push $P5003, "alt_nfa__22_1358115335.858"
    push $P5003, "NQP::Actions"
    push $P5003, "NQP::RegexActions"
    push $P5003, "NQP::Compiler"
    push $P5003, "CompileTimeValue"
    push $P5003, "2A5BD8D2F017911EBF2A5D1B91B7A8E3733D2938-1358115313.755"
    push $P5003, "src\\stage2\\QASTNode.nqp"
    push $P5003, "SpecialArg"
    push $P5003, "Node"
    push $P5003, "Regex"
    push $P5003, "IVal"
    push $P5003, "NVal"
    push $P5003, "SVal"
    push $P5003, "BVal"
    push $P5003, "WVal"
    push $P5003, "Want"
    push $P5003, "Var"
    push $P5003, "VarWithFallback"
    push $P5003, "Op"
    push $P5003, "VM"
    push $P5003, "Stmts"
    push $P5003, "Stmt"
    push $P5003, "Block"
    push $P5003, "Unquote"
    push $P5003, "CompUnit"
    push $P5003, "InlinePlaceholder"
    push $P5003, "Operations"
    push $P5003, "E46695D3579E1DA2FFC7DE8F685325592E2122A7-1358115323.701"
    push $P5003, "src\\stage2\\QAST.nqp"
    push $P5003, "Compiler"
    push $P5003, "NFA"
    push $P5003, "P6Regex"
    push $P5003, "Grammar"
    push $P5003, "Actions"
    push $P5003, "CommandLine"
    push $P5003, "World"
    push $P5003, "CallResult"
    push $P5003, "Sub"
    push $P5003, "Ops"
    push $P5003, "Label"
    push $P5003, "RegexActions"
    push $P5003, "Ee"
    push $P5003, "01"
    push $P5003, "01234567"
    push $P5003, "0123456789abcdefABCDEF"
    push $P5003, "?@ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    push $P5003, "dDnNsSwW"
    push $P5003, "bB"
    push $P5003, "eE"
    push $P5003, "fF"
    push $P5003, "hH"
    push $P5003, "rR"
    push $P5003, "tT"
    push $P5003, "vV"
    push $P5003, "oO"
    push $P5003, "xX"
    push $P5003, "cC"
    push $P5003, "&|~"
    .const 'Sub' $P5004 = 'cuid_494_1358115338.889' 
    capture_lex $P5004
    $P5005 = $P5004()
    nqp_deserialize_sc "", cur_sc, $P5003, $P5005, conflicts
    unless conflicts goto if1754_end5736 
    die "Repossession conflicts occurred during deserialization"
  if1754_end5736:
    .const "LexInfo" $P5001 = "cuid_1_1358115338.889"
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    $P5001."set_static_lexpad_value"("GLOBALish", $P5002)
    .const "LexInfo" $P5003 = "cuid_1_1358115338.889"
    $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_1_1358115338.889"
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 0
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_1_1358115338.889"
    $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_1_1358115338.889"
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 1
    $P5001."set_static_lexpad_value"("EXPORT", $P5002)
    .const "LexInfo" $P5003 = "cuid_1_1358115338.889"
    $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_2_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 4
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_3_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 5
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_4_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 6
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_5_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 7
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_6_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 8
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_7_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 9
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_8_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 10
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_9_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 11
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_10_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 12
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_11_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 13
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_12_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 14
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_13_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 15
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_14_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 16
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_15_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 17
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_16_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 18
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_17_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 19
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_18_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 20
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_19_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 21
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_20_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 22
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_21_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 23
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_22_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 24
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_23_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 25
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_24_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 26
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_25_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 27
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_26_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 28
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_27_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 29
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_28_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 30
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_29_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 31
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_30_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 32
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_31_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 33
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_32_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 34
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_33_1358115338.889"
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 3
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_33_1358115338.889"
    $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_33_1358115338.889"
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 3
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_33_1358115338.889"
    $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_34_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 36
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_35_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 37
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_36_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 38
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_37_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 39
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_38_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 40
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_39_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 41
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_40_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 42
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_41_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 43
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_42_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 44
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_43_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 45
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_44_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 46
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_45_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 47
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_46_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 48
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_47_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 49
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_48_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 50
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_49_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 51
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_50_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 52
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_51_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 53
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_52_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 54
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_53_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 55
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_54_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 56
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_55_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 57
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_56_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 58
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_57_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 59
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_58_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 60
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_59_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 61
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_60_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 62
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_61_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 63
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_62_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 64
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_63_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 65
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_64_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 66
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_65_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 67
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_66_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 68
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_67_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 69
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_68_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 70
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_69_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 71
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_70_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 72
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_71_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 73
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_72_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 74
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_73_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 75
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_74_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 76
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_75_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 77
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_76_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 78
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_77_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 79
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_78_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 80
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_79_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 81
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_80_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 82
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_81_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 83
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_82_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 84
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_83_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 85
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_84_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 86
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_85_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 87
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_86_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 88
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_87_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 89
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_88_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 90
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_89_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 91
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_90_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 92
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_91_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 93
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_92_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 94
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_93_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 95
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_94_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 96
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_95_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 97
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_96_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 98
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_97_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 99
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_98_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 100
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_99_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 101
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_100_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 102
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_101_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 103
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_102_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 104
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_103_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 105
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_104_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 106
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_105_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 107
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_106_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 108
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_107_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 109
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_108_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 110
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_109_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 111
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_110_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 112
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_111_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 113
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_112_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 114
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_113_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 115
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_114_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 116
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_115_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 117
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_116_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 118
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_117_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 119
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_118_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 120
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_119_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 121
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_120_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 122
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_121_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 123
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_122_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 124
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_123_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 125
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_124_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 126
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_125_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 127
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_126_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 128
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_127_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 129
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_128_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 130
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_129_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 131
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_130_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 132
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_131_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 133
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_132_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 134
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_133_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 135
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_134_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 136
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_135_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 137
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_136_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 138
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_137_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 139
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_138_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 140
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_139_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 141
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_140_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 142
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_141_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 143
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_142_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 144
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_143_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 145
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_144_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 146
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_145_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 147
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_146_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 148
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_147_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 149
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_148_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 150
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_149_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 151
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_150_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 152
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_151_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 153
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_152_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 154
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_153_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 155
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_154_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 156
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_155_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 157
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_156_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 158
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_157_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 159
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_158_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 160
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_159_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 161
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_160_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 162
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_161_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 163
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_162_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 164
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_163_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 165
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_164_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 166
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_165_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 167
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_166_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 168
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_167_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 169
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_168_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 170
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_169_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 171
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_170_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 172
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_171_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 173
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_172_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 174
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_173_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 175
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_174_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 176
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_175_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 177
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_176_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 178
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_177_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 179
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_178_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 180
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_179_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 181
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_180_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 182
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_181_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 183
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_182_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 184
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_183_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 185
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_184_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 186
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_185_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 187
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_186_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 188
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_187_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 189
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_188_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 190
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_189_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 191
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_190_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 192
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_191_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 193
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_192_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 194
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_193_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 195
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_194_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 196
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_195_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 197
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_196_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 198
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_197_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 199
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_198_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 200
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_199_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 201
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_200_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 202
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_201_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 203
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_202_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 204
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_203_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 205
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_204_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 206
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_205_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 207
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_206_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 208
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_207_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 209
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_208_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 210
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_209_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 211
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_210_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 212
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_211_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 213
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_212_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 214
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_213_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 215
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_214_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 216
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_215_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 217
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_216_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 218
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_217_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 219
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_218_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 220
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_219_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 221
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_220_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 222
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_221_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 223
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_222_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 224
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_223_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 225
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_224_1358115338.889"
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 35
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_224_1358115338.889"
    $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_224_1358115338.889"
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 35
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_224_1358115338.889"
    $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_225_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 227
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_226_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 228
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_227_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 229
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_228_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 230
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_229_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 231
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_230_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 232
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_231_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 233
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_232_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 234
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_233_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 235
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_234_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 236
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_235_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 237
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_236_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 238
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_237_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 239
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_238_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 240
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_239_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 241
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_240_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 242
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_241_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 243
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_242_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 244
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_243_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 245
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_244_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 246
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_245_1358115338.889"
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 226
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_245_1358115338.889"
    $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_245_1358115338.889"
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 226
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_245_1358115338.889"
    $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_246_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 248
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_247_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 249
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_248_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 250
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_249_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 251
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_250_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 252
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_251_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 253
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_252_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 254
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_253_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 255
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_254_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 256
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_255_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 257
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_256_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 258
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_257_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 259
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_258_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 260
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_259_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 261
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_260_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 262
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_261_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 263
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_262_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 264
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_263_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 265
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_264_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 266
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_265_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 267
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_266_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 268
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_267_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 269
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_268_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 270
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_269_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 271
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_270_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 272
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_271_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 273
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_272_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 274
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_273_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 275
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_274_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 276
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_275_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 277
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_276_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 278
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_277_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 279
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_278_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 280
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_279_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 281
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_280_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 282
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_281_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 283
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_282_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 284
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_283_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 285
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_284_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 286
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_285_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 287
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_286_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 288
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_287_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 289
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_288_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 290
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_289_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 291
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_290_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 292
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_291_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 293
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_292_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 294
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_293_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 295
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_294_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 296
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_295_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 297
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_296_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 298
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_297_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 299
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_298_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 300
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_299_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 301
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_300_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 302
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_301_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 303
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_302_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 304
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_303_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 305
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_304_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 306
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_305_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 307
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_306_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 308
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_307_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 309
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_308_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 310
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_309_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 311
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_310_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 312
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_311_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 313
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_312_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 314
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_313_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 315
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_314_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 316
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_315_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 317
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_316_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 318
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_317_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 319
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_318_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 320
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_319_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 321
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_320_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 322
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_321_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 323
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_322_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 324
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_323_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 325
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_324_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 326
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_325_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 327
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_326_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 328
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_327_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 329
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_328_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 330
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_329_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 331
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_330_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 332
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_331_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 333
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_332_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 334
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_333_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 335
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_334_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 336
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_335_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 337
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_336_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 338
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_337_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 339
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_338_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 340
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_339_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 341
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_340_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 342
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_341_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 343
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_342_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 344
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_343_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 345
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_344_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 346
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_345_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 347
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_346_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 348
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_347_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 349
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_348_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 350
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_349_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 351
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_350_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 352
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_351_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 353
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_352_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 354
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_353_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 355
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_354_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 356
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_355_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 357
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_356_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 358
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_357_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 359
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_358_1358115338.889"
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 247
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_358_1358115338.889"
    $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_358_1358115338.889"
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 247
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_358_1358115338.889"
    $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_359_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 361
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_360_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 362
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_361_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 363
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_362_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 364
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_363_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 365
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_364_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 366
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_365_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 367
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_366_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 368
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_367_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 369
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_368_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 370
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_369_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 371
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_370_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 372
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_371_1358115338.889" 
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 373
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_372_1358115338.889"
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 360
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_372_1358115338.889"
    $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_372_1358115338.889"
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 360
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_372_1358115338.889"
    $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_373_1358115338.889"
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 374
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_373_1358115338.889"
    $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_373_1358115338.889"
    nqp_get_sc_object $P5002, "0D8A6F79AB078D1B028D1683C1949DD38066CD1D-1358115338.915", 374
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_373_1358115338.889"
    $P5004 = $P5003."finish_static_lexpad"()
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_494_1358115338.889") :anon :lex :outer("cuid_495_1358115338.889")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    .const 'Sub' $P5002 = "cuid_2_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_3_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_4_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_5_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_6_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_7_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_8_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_9_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_10_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_11_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_12_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_13_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_14_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_15_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_16_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_17_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_18_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_19_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_20_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_21_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_22_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_23_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_24_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_25_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_26_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_27_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_28_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_29_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_30_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_31_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_32_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_34_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_35_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_36_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_37_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_38_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_39_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_40_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_41_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_42_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_43_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_44_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_45_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_46_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_47_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_48_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_49_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_50_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_51_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_52_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_53_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_54_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_55_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_56_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_57_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_58_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_59_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_60_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_61_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_62_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_63_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_64_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_65_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_66_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_67_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_68_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_69_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_70_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_71_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_72_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_73_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_74_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_75_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_76_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_77_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_78_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_79_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_80_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_81_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_82_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_83_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_84_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_85_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_86_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_87_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_88_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_89_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_90_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_91_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_92_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_93_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_94_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_95_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_96_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_97_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_98_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_99_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_100_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_101_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_102_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_103_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_104_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_105_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_106_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_107_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_108_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_109_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_110_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_111_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_112_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_113_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_114_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_115_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_116_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_117_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_118_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_119_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_120_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_121_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_122_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_123_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_124_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_125_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_126_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_127_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_128_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_129_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_130_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_131_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_132_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_133_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_134_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_135_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_136_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_137_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_138_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_139_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_140_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_141_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_142_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_143_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_144_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_145_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_146_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_147_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_148_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_149_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_150_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_151_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_152_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_153_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_154_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_155_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_156_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_157_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_158_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_159_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_160_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_161_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_162_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_163_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_164_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_165_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_166_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_167_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_168_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_169_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_170_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_171_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_172_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_173_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_174_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_175_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_176_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_177_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_178_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_179_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_180_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_181_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_182_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_183_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_184_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_185_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_186_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_187_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_188_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_189_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_190_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_191_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_192_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_193_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_194_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_195_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_196_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_197_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_198_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_199_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_200_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_201_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_202_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_203_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_204_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_205_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_206_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_207_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_208_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_209_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_210_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_211_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_212_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_213_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_214_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_215_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_216_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_217_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_218_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_219_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_220_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_221_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_222_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_223_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_225_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_226_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_227_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_228_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_229_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_230_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_231_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_232_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_233_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_234_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_235_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_236_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_237_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_238_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_239_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_240_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_241_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_242_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_243_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_244_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_246_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_247_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_248_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_249_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_250_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_251_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_252_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_253_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_254_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_255_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_256_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_257_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_258_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_259_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_260_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_261_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_262_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_263_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_264_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_265_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_266_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_267_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_268_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_269_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_270_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_271_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_272_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_273_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_274_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_275_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_276_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_277_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_278_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_279_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_280_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_281_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_282_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_283_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_284_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_285_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_286_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_287_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_288_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_289_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_290_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_291_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_292_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_293_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_294_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_295_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_296_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_297_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_298_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_299_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_300_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_301_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_302_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_303_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_304_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_305_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_306_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_307_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_308_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_309_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_310_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_311_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_312_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_313_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_314_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_315_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_316_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_317_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_318_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_319_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_320_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_321_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_322_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_323_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_324_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_325_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_326_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_327_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_328_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_329_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_330_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_331_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_332_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_333_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_334_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_335_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_336_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_337_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_338_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_339_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_340_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_341_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_342_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_343_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_344_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_345_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_346_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_347_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_348_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_349_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_350_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_351_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_352_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_353_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_354_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_355_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_356_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_357_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_359_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_360_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_361_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_362_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_363_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_364_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_365_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_366_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_367_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_368_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_369_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_370_1358115338.889" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_371_1358115338.889" 
    push $P5001, $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_496_1358115338.889") :load
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .const 'Sub' $P5001 = "cuid_1_1358115338.889" 
    $P5002 = $P5001()
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_497_1358115338.889") :main
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc ARGS :slurpy 
    .const 'Sub' $P5001 = "cuid_1_1358115338.889" 
    $P5002 = $P5001(ARGS :flat)
    .return ($P5002) 
.end