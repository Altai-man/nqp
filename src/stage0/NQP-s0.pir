.include 'cclass.pasm'
.include 'except_severity.pasm'
.include 'except_types.pasm'
.include 'iglobals.pasm'
.include 'interpinfo.pasm'
.include 'iterator.pasm'
.include 'sysinfo.pasm'
.include 'stat.pasm'
.include 'datatypes.pasm'
.loadlib "nqp_group"
.loadlib "nqp_ops"
.loadlib "nqp_bigint_ops"
.loadlib "trans_ops"
.loadlib "io_ops"
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_1_1349901750.327") :anon :lex
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc _lex_param_0 :slurpy 
    .const 'Sub' $P5057 = 'cuid_368_1349901750.327' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_369_1349901750.327' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_33_1349901750.327' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_223_1349901750.327' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_243_1349901750.327' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_403_1349901750.327' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_404_1349901750.327' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_405_1349901750.327' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_406_1349901750.327' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_407_1349901750.327' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_408_1349901750.327' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_409_1349901750.327' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_355_1349901750.327' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_366_1349901750.327' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_367_1349901750.327' 
    capture_lex $P5057 
    .lex "GLOBALish", $P101 
    .lex "$?PACKAGE", $P102 
    .lex "EXPORT", $P103 
    .lex "$ops", $P104 
    .lex "&MAIN", $P105 
    .lex "&hll-config", $P106 
    .lex "@ARGS", _lex_param_0 
    .local pmc ctxsave 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P104, $P5001
    .const 'Sub' $P5002 = 'cuid_368_1349901750.327' 
    capture_lex $P5002
    set $P105, $P5002
    .const 'Sub' $P5003 = 'cuid_369_1349901750.327' 
    capture_lex $P5003
    set $P106, $P5003
    find_dynamic_lex $P5004, "$*CTXSAVE"
    set ctxsave, $P5004
    isnull $I5001, ctxsave
    box $P5009, $I5001
    set $P5008, $P5009
    if $I5001 goto unless10_end14 
    can $I5002, ctxsave, "ctxsave"
    box $P5007, $I5002
    set $P5006, $P5007
    unless $I5002 goto if11_end16 
    $P5005 = ctxsave."ctxsave"()
    set $P5006, $P5005
  if11_end16:
    set $P5008, $P5006
  unless10_end14:
.annotate 'line', 1
    .const 'Sub' $P5010 = 'cuid_33_1349901750.327' 
    capture_lex $P5010
    $P5011 = $P5010()
    .const 'Sub' $P5012 = 'cuid_223_1349901750.327' 
    capture_lex $P5012
    $P5013 = $P5012()
    .const 'Sub' $P5014 = 'cuid_243_1349901750.327' 
    capture_lex $P5014
    $P5015 = $P5014()
.annotate 'line', 1410
    nqp_get_sc_object $P5019, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Compiler"]
    unless_null $P5016, fallback3630
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5016, $P5020
  fallback3630:
    $P5021 = $P5016."operations"()
    set $P104, $P5021
.annotate 'line', 1412
    $P5022 = $P104."add_hll_pirop_mapping"("nqp", "nqpmultidispatch", "multi_dispatch_over_lexical_candidates", "P")
.annotate 'line', 1414
    .const 'Sub' $P5024 = 'cuid_403_1349901750.327' 
    capture_lex $P5024
    newclosure $P5023, $P5024
    $P5025 = $P104."add_hll_op"("nqp", "preinc", $P5023)
.annotate 'line', 1429
    .const 'Sub' $P5027 = 'cuid_404_1349901750.327' 
    capture_lex $P5027
    newclosure $P5026, $P5027
    $P5028 = $P104."add_hll_op"("nqp", "predec", $P5026)
.annotate 'line', 1444
    .const 'Sub' $P5030 = 'cuid_405_1349901750.327' 
    capture_lex $P5030
    newclosure $P5029, $P5030
    $P5031 = $P104."add_hll_op"("nqp", "postinc", $P5029)
.annotate 'line', 1468
    .const 'Sub' $P5033 = 'cuid_406_1349901750.327' 
    capture_lex $P5033
    newclosure $P5032, $P5033
    $P5034 = $P104."add_hll_op"("nqp", "postdec", $P5032)
.annotate 'line', 1492
    .const 'Sub' $P5036 = 'cuid_407_1349901750.327' 
    capture_lex $P5036
    newclosure $P5035, $P5036
    $P5037 = $P104."add_hll_op"("nqp", "numify", $P5035)
.annotate 'line', 1496
    .const 'Sub' $P5039 = 'cuid_408_1349901750.327' 
    capture_lex $P5039
    newclosure $P5038, $P5039
    $P5040 = $P104."add_hll_op"("nqp", "stringify", $P5038)
.annotate 'line', 1500
    .const 'Sub' $P5042 = 'cuid_409_1349901750.327' 
    capture_lex $P5042
    newclosure $P5041, $P5042
    $P5043 = $P104."add_hll_op"("nqp", "eqaddr", $P5041)
    .const 'Sub' $P5044 = 'cuid_355_1349901750.327' 
    capture_lex $P5044
    $P5045 = $P5044()
    .const 'Sub' $P5046 = 'cuid_366_1349901750.327' 
    capture_lex $P5046
    $P5047 = $P5046()
    .const 'Sub' $P5048 = 'cuid_367_1349901750.327' 
    capture_lex $P5048
    $P5049 = $P5048()
    set $P5056, _lex_param_0
    unless _lex_param_0 goto if1662_end5530 
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5050, "ModuleLoader"
    getinterp $P5052
    set $P5051, $P5052["context"]
    $P5053 = $P5050."set_mainline_module"($P5051)
    .const 'Sub' $P5054 = "cuid_368_1349901750.327" 
    $P5055 = $P5054(_lex_param_0 :flat)
    set $P5056, $P5055
  if1662_end5530:
    .return () 
.end
.HLL "nqp"
.namespace []
.sub "MAIN" :subid("cuid_368_1349901750.327") :anon :lex :outer("cuid_1_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3115
    .param pmc _lex_param_0 
    .lex "$nqpcomp", $P101 
    .lex "@clo", $P102 
    .lex "@ARGS", _lex_param_0 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    set $P102, $P5002
.annotate 'line', 3117
    nqp_get_sc_object $P5006, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5005, $P5006, "NQP"
    get_who $P5004, $P5005
    set $P5003, $P5004["Compiler"]
    unless_null $P5003, fallback10
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5003, $P5007
  fallback10:
    $P5008 = $P5003."new"()
    set $P101, $P5008
.annotate 'line', 3118
    $P5009 = $P101."language"("nqp")
.annotate 'line', 3119
    nqp_get_sc_object $P5013, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5012, $P5013, "NQP"
    get_who $P5011, $P5012
    set $P5010, $P5011["Grammar"]
    unless_null $P5010, fallback11
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5010, $P5014
  fallback11:
    $P5015 = $P101."parsegrammar"($P5010)
.annotate 'line', 3120
    nqp_get_sc_object $P5019, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5018, $P5019, "NQP"
    get_who $P5017, $P5018
    set $P5016, $P5017["Actions"]
    unless_null $P5016, fallback12
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5016, $P5020
  fallback12:
    $P5021 = $P101."parseactions"($P5016)
.annotate 'line', 3121
    $P5022 = $P101."config"()
    $P5023 = "&hll-config"($P5022)
.annotate 'line', 3124
    $P5024 = $P101."commandline_options"()
    set $P102, $P5024
.annotate 'line', 3125
    $P5025 = $P102."push"("parsetrace")
.annotate 'line', 3126
    $P5026 = $P102."push"("setting=s")
.annotate 'line', 3127
    $P5027 = $P102."push"("setting-path=s")
.annotate 'line', 3128
    $P5028 = $P102."push"("module-path=s")
.annotate 'line', 3129
    $P5029 = $P102."push"("vmlibs=s")
.annotate 'line', 3130
    $P5030 = $P102."push"("no-regex-lib")
.annotate 'line', 3131
    $P5031 = $P102."push"("old-regex-lib")
.annotate 'line', 3134
    $P5032 = $P101."command_line"(_lex_param_0, "utf8" :named("encoding"), "ascii iso-8859-1" :named("transcode"))
.annotate 'line', 3137
    $P5033 = $P101."nqpevent"()
    .return ($P5033) 
.end
.HLL "nqp"
.namespace []
.sub "hll-config" :subid("cuid_369_1349901750.327") :anon :lex :outer("cuid_1_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3141
    .param pmc _lex_param_0 
    .lex "$config", _lex_param_0 
    box $P5001, "2012.09.1-28-g885cc4c"
    set _lex_param_0["version"], $P5001
    box $P5002, "2012-10-10T20:42:30Z"
    set _lex_param_0["build-date"], $P5002
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_33_1349901750.327") :anon :lex :outer("cuid_1_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 8
    .const 'Sub' $P5031 = 'cuid_2_1349901750.327' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_3_1349901750.327' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_4_1349901750.327' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_5_1349901750.327' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_6_1349901750.327' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_7_1349901750.327' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_8_1349901750.327' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_9_1349901750.327' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_10_1349901750.327' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_11_1349901750.327' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_12_1349901750.327' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_16_1349901750.327' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_17_1349901750.327' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_18_1349901750.327' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_19_1349901750.327' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_20_1349901750.327' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_21_1349901750.327' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_22_1349901750.327' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_23_1349901750.327' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_24_1349901750.327' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_25_1349901750.327' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_26_1349901750.327' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_27_1349901750.327' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_28_1349901750.327' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_29_1349901750.327' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_30_1349901750.327' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_31_1349901750.327' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_32_1349901750.327' 
    capture_lex $P5031 
    .lex "$loader", $P101 
    .lex "$?PACKAGE", $P102 
    .lex "$?CLASS", $P103 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    .const 'Sub' $P5002 = 'cuid_2_1349901750.327' 
    capture_lex $P5002
    .const 'Sub' $P5003 = 'cuid_3_1349901750.327' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_4_1349901750.327' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_5_1349901750.327' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_6_1349901750.327' 
    capture_lex $P5006
    get_hll_global $P5007, "ModuleLoader"
    set $P101, $P5007
    .const 'Sub' $P5008 = 'cuid_7_1349901750.327' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_8_1349901750.327' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_9_1349901750.327' 
    capture_lex $P5010
    .const 'Sub' $P5011 = 'cuid_10_1349901750.327' 
    capture_lex $P5011
    .const 'Sub' $P5012 = 'cuid_11_1349901750.327' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_12_1349901750.327' 
    capture_lex $P5013
    .const 'Sub' $P5014 = 'cuid_16_1349901750.327' 
    capture_lex $P5014
    .const 'Sub' $P5015 = 'cuid_17_1349901750.327' 
    capture_lex $P5015
    .const 'Sub' $P5016 = 'cuid_18_1349901750.327' 
    capture_lex $P5016
    .const 'Sub' $P5017 = 'cuid_19_1349901750.327' 
    capture_lex $P5017
    .const 'Sub' $P5018 = 'cuid_20_1349901750.327' 
    capture_lex $P5018
    .const 'Sub' $P5019 = 'cuid_21_1349901750.327' 
    capture_lex $P5019
    .const 'Sub' $P5020 = 'cuid_22_1349901750.327' 
    capture_lex $P5020
    .const 'Sub' $P5021 = 'cuid_23_1349901750.327' 
    capture_lex $P5021
    .const 'Sub' $P5022 = 'cuid_24_1349901750.327' 
    capture_lex $P5022
    .const 'Sub' $P5023 = 'cuid_25_1349901750.327' 
    capture_lex $P5023
    .const 'Sub' $P5024 = 'cuid_26_1349901750.327' 
    capture_lex $P5024
    .const 'Sub' $P5025 = 'cuid_27_1349901750.327' 
    capture_lex $P5025
    .const 'Sub' $P5026 = 'cuid_28_1349901750.327' 
    capture_lex $P5026
    .const 'Sub' $P5027 = 'cuid_29_1349901750.327' 
    capture_lex $P5027
    .const 'Sub' $P5028 = 'cuid_30_1349901750.327' 
    capture_lex $P5028
    .const 'Sub' $P5029 = 'cuid_31_1349901750.327' 
    capture_lex $P5029
    .const 'Sub' $P5030 = 'cuid_32_1349901750.327' 
    capture_lex $P5030
    .return ($P5030) 
.end
.HLL "nqp"
.namespace []
.sub "BUILD" :subid("cuid_2_1349901750.327") :anon :lex :outer("cuid_33_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 27
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 :slurpy :named 
    .lex "self", _lex_param_0 
    .lex "%opts", _lex_param_1 
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 3
    new $P5003, 'ResizablePMCArray'
    repr_bind_attr_obj $P5001, $P5002, "@!BLOCKS", $P5003
    nqp_decontainerize $P5004, _lex_param_0
    nqp_get_sc_object $P5005, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 3
    new $P5006, 'Hash'
    repr_bind_attr_obj $P5004, $P5005, "%!code_objects_to_fix_up", $P5006
    nqp_decontainerize $P5007, _lex_param_0
    nqp_get_sc_object $P5008, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 3
    new $P5009, 'Hash'
    repr_bind_attr_obj $P5007, $P5008, "%!code_object_fixup_list", $P5009
    nqp_decontainerize $P5010, _lex_param_0
    nqp_get_sc_object $P5011, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 3
    new $P5012, 'Hash'
    repr_bind_attr_obj $P5010, $P5011, "%!code_stub_sc_idx", $P5012
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "push_lexpad" :subid("cuid_3_1349901750.327") :anon :lex :outer("cuid_33_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 35
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$pad", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
.annotate 'line', 37
    nqp_get_sc_object $P5005, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Block"]
    unless_null $P5002, fallback17
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5006
  fallback17:
    nqp_get_sc_object $P5010, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Stmts"]
    unless_null $P5007, fallback18
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5007, $P5011
  fallback18:
    $P5012 = $P5007."new"()
    $P5013 = $P5002."new"($P5012, _lex_param_1 :named("node"))
    set $P101, $P5013
    nqp_decontainerize $P5014, _lex_param_0
    nqp_get_sc_object $P5015, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 3
    repr_get_attr_obj $P5016, $P5014, $P5015, "@!BLOCKS"
    set $N5001, $P5016
    box $P5026, $N5001
    set $P5025, $P5026
    unless $N5001 goto if12_end20 
.annotate 'line', 38
    nqp_decontainerize $P5018, _lex_param_0
    nqp_get_sc_object $P5019, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 3
    repr_get_attr_obj $P5020, $P5018, $P5019, "@!BLOCKS"
    nqp_decontainerize $P5021, _lex_param_0
    nqp_get_sc_object $P5022, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 3
    repr_get_attr_obj $P5023, $P5021, $P5022, "@!BLOCKS"
    set $N5003, $P5023
    set $N5004, 1
    sub $N5002, $N5003, $N5004
    set $I5001, $N5002
    set $P5017, $P5020[$I5001]
    unless_null $P5017, fallback21
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5017, $P5024
  fallback21:
    set $P101["outer"], $P5017
    set $P5025, $P5017
  if12_end20:
    nqp_decontainerize $P5027, _lex_param_0
    nqp_get_sc_object $P5028, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 3
    repr_get_attr_obj $P5029, $P5027, $P5028, "@!BLOCKS"
    nqp_decontainerize $P5030, _lex_param_0
    nqp_get_sc_object $P5031, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 3
    repr_get_attr_obj $P5032, $P5030, $P5031, "@!BLOCKS"
    set $N5005, $P5032
    set $I5002, $N5005
    set $P5029[$I5002], $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "pop_lexpad" :subid("cuid_4_1349901750.327") :anon :lex :outer("cuid_33_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 46
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
.annotate 'line', 47
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 3
    repr_get_attr_obj $P5003, $P5001, $P5002, "@!BLOCKS"
    $P5004 = $P5003."pop"()
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "cur_lexpad" :subid("cuid_5_1349901750.327") :anon :lex :outer("cuid_33_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 51
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
    nqp_decontainerize $P5002, _lex_param_0
    nqp_get_sc_object $P5003, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 3
    repr_get_attr_obj $P5004, $P5002, $P5003, "@!BLOCKS"
    nqp_decontainerize $P5005, _lex_param_0
    nqp_get_sc_object $P5006, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 3
    repr_get_attr_obj $P5007, $P5005, $P5006, "@!BLOCKS"
    set $N5002, $P5007
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    set $I5001, $N5001
    set $P5001, $P5004[$I5001]
    unless_null $P5001, fallback22
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5008
  fallback22:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "get_legacy_block_list" :subid("cuid_6_1349901750.327") :anon :lex :outer("cuid_33_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 56
    .param pmc _lex_param_0 
    .lex "@x", $P101 
    .lex "self", _lex_param_0 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_decontainerize $P5003, _lex_param_0
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 3
    repr_get_attr_obj $P5005, $P5003, $P5004, "@!BLOCKS"
    clone $P5002, $P5005
    set $P101, $P5002
.annotate 'line', 58
    $P5006 = $P101."reverse"()
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "load_setting" :subid("cuid_7_1349901750.327") :anon :lex :outer("cuid_33_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 69
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5005 = 'cuid_370_1349901750.327' 
    capture_lex $P5005 
    .lex "self", _lex_param_0 
    .lex "$setting_name", _lex_param_1 
    root_new $P101, ['parrot';'Continuation']
    set_label $P101, lexotic_23
    .lex "RETURN", $P101
    set $S5001, _lex_param_1
    isne $I5001, $S5001, "NULL"
    box $P5004, $I5001
    set $P5003, $P5004
    unless $I5001 goto if13_end26 
    .const 'Sub' $P5001 = 'cuid_370_1349901750.327' 
    capture_lex $P5001
    $P5002 = $P5001()
    set $P5003, $P5002
  if13_end26:
    goto lexotic_24
  lexotic_23:
    .get_results ($P5003)
  lexotic_24:
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_370_1349901750.327") :anon :lex :outer("cuid_7_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 71
    .lex "$setting", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    find_dynamic_lex $P5003, "%*COMPILING"
    unless_null $P5003, fallback27
    nqp_get_sc_object $P5006, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["%COMPILING"]
    unless_null $P5004, fallback28
    nqp_get_sc_object $P5008, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5007, $P5008
    new $P5009, 'Hash'
    set $P5007["%COMPILING"], $P5009
    set $P5004, $P5009
  fallback28:
    unless_null $P5004, vivi_1429
    die "Contextual %*COMPILING not found"
    box $P5010, "Contextual %*COMPILING not found"
    set $P5004, $P5010
  vivi_1429:
    set $P5003, $P5004
  fallback27:
    set $P5002, $P5003["%?OPTIONS"]
    unless_null $P5002, fallback30
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5011
  fallback30:
.annotate 'line', 76
    find_lex $P5012, "$loader"
    find_lex $P5013, "$setting_name"
    $P5014 = $P5012."load_setting"($P5013)
    set $P5002["outer_ctx"], $P5014
    set $P101, $P5014
.annotate 'line', 79
    find_lex $P5016, "self"
    nqp_decontainerize $P5015, $P5016
    $P5017 = $P5015."is_precompilation_mode"()
    unless $P5017 goto if15_else31 
.annotate 'line', 80
    find_lex $P5019, "self"
    nqp_decontainerize $P5018, $P5019
    nqp_get_sc_object $P5023, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Stmts"]
    unless_null $P5020, fallback33
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5020, $P5024
  fallback33:
.annotate 'line', 81
    nqp_get_sc_object $P5028, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["VM"]
    unless_null $P5025, fallback34
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5025, $P5029
  fallback34:
.annotate 'line', 83
    nqp_get_sc_object $P5033, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["SVal"]
    unless_null $P5030, fallback35
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5030, $P5034
  fallback35:
    $P5035 = $P5030."new"("ModuleLoader.pbc" :named("value"))
    $P5036 = $P5025."new"($P5035, "load_bytecode vs" :named("pirop"))
.annotate 'line', 85
    nqp_get_sc_object $P5040, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5039, $P5040, "QAST"
    get_who $P5038, $P5039
    set $P5037, $P5038["Op"]
    unless_null $P5037, fallback36
    nqp_get_sc_object $P5041, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5037, $P5041
  fallback36:
.annotate 'line', 87
    nqp_get_sc_object $P5045, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["BVal"]
    unless_null $P5042, fallback37
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5042, $P5046
  fallback37:
    find_dynamic_lex $P5047, "$*UNIT"
    unless_null $P5047, fallback38
    nqp_get_sc_object $P5050, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5049, $P5050
    set $P5048, $P5049["$UNIT"]
    unless_null $P5048, fallback39
    nqp_get_sc_object $P5051, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5048, $P5051
  fallback39:
    unless_null $P5048, vivi_1640
    die "Contextual $*UNIT not found"
    box $P5052, "Contextual $*UNIT not found"
    set $P5048, $P5052
  vivi_1640:
    set $P5047, $P5048
  fallback38:
    $P5053 = $P5042."new"($P5047 :named("value"))
.annotate 'line', 88
    nqp_get_sc_object $P5057, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5056, $P5057, "QAST"
    get_who $P5055, $P5056
    set $P5054, $P5055["Op"]
    unless_null $P5054, fallback41
    nqp_get_sc_object $P5058, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5054, $P5058
  fallback41:
.annotate 'line', 90
    nqp_get_sc_object $P5062, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5061, $P5062, "QAST"
    get_who $P5060, $P5061
    set $P5059, $P5060["VM"]
    unless_null $P5059, fallback42
    nqp_get_sc_object $P5063, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5059, $P5063
  fallback42:
.annotate 'line', 92
    nqp_get_sc_object $P5067, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5066, $P5067, "QAST"
    get_who $P5065, $P5066
    set $P5064, $P5065["SVal"]
    unless_null $P5064, fallback43
    nqp_get_sc_object $P5068, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5064, $P5068
  fallback43:
    $P5069 = $P5064."new"("ModuleLoader" :named("value"))
    $P5070 = $P5059."new"($P5069, "get_hll_global Ps" :named("pirop"))
.annotate 'line', 94
    nqp_get_sc_object $P5074, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5073, $P5074, "QAST"
    get_who $P5072, $P5073
    set $P5071, $P5072["SVal"]
    unless_null $P5071, fallback44
    nqp_get_sc_object $P5075, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5071, $P5075
  fallback44:
    find_lex $P5076, "$setting_name"
    $P5077 = $P5071."new"($P5076 :named("value"))
    $P5078 = $P5054."new"($P5070, $P5077, "callmethod" :named("op"), "load_setting" :named("name"))
    $P5079 = $P5037."new"($P5053, $P5078, "callmethod" :named("op"), "set_outer_ctx" :named("name"))
    $P5080 = $P5020."new"($P5036, $P5079)
    $P5081 = $P5018."add_load_dependency_task"($P5080 :named("deserialize_past"))
    set $P5128, $P5081
    goto if15_end32
  if15_else31:
.annotate 'line', 99
.annotate 'line', 101
    find_lex $P5083, "self"
    nqp_decontainerize $P5082, $P5083
    nqp_get_sc_object $P5087, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5086, $P5087, "QAST"
    get_who $P5085, $P5086
    set $P5084, $P5085["Op"]
    unless_null $P5084, fallback45
    nqp_get_sc_object $P5088, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5084, $P5088
  fallback45:
.annotate 'line', 103
    nqp_get_sc_object $P5092, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5091, $P5092, "QAST"
    get_who $P5090, $P5091
    set $P5089, $P5090["BVal"]
    unless_null $P5089, fallback46
    nqp_get_sc_object $P5093, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5089, $P5093
  fallback46:
    find_dynamic_lex $P5094, "$*UNIT"
    unless_null $P5094, fallback47
    nqp_get_sc_object $P5097, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5096, $P5097
    set $P5095, $P5096["$UNIT"]
    unless_null $P5095, fallback48
    nqp_get_sc_object $P5098, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5095, $P5098
  fallback48:
    unless_null $P5095, vivi_1749
    die "Contextual $*UNIT not found"
    box $P5099, "Contextual $*UNIT not found"
    set $P5095, $P5099
  vivi_1749:
    set $P5094, $P5095
  fallback47:
    $P5100 = $P5089."new"($P5094 :named("value"))
.annotate 'line', 104
    nqp_get_sc_object $P5104, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5103, $P5104, "QAST"
    get_who $P5102, $P5103
    set $P5101, $P5102["Op"]
    unless_null $P5101, fallback50
    nqp_get_sc_object $P5105, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5101, $P5105
  fallback50:
.annotate 'line', 106
    nqp_get_sc_object $P5109, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5108, $P5109, "QAST"
    get_who $P5107, $P5108
    set $P5106, $P5107["VM"]
    unless_null $P5106, fallback51
    nqp_get_sc_object $P5110, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5106, $P5110
  fallback51:
.annotate 'line', 108
    nqp_get_sc_object $P5114, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5113, $P5114, "QAST"
    get_who $P5112, $P5113
    set $P5111, $P5112["SVal"]
    unless_null $P5111, fallback52
    nqp_get_sc_object $P5115, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5111, $P5115
  fallback52:
    $P5116 = $P5111."new"("ModuleLoader" :named("value"))
    $P5117 = $P5106."new"($P5116, "get_hll_global Ps" :named("pirop"))
.annotate 'line', 110
    nqp_get_sc_object $P5121, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5120, $P5121, "QAST"
    get_who $P5119, $P5120
    set $P5118, $P5119["SVal"]
    unless_null $P5118, fallback53
    nqp_get_sc_object $P5122, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5118, $P5122
  fallback53:
    find_lex $P5123, "$setting_name"
    $P5124 = $P5118."new"($P5123 :named("value"))
    $P5125 = $P5101."new"($P5117, $P5124, "callmethod" :named("op"), "load_setting" :named("name"))
    $P5126 = $P5084."new"($P5100, $P5125, "callmethod" :named("op"), "set_outer_ctx" :named("name"))
    $P5127 = $P5082."add_fixup_task"($P5126 :named("fixup_past"))
    set $P5128, $P5127
  if15_end32:
    getattribute $P5130, $P101, "lex_pad"
    find_lex $P5129, "RETURN"
    $P5131 = $P5129($P5130)
    .return ($P5131) 
.end
.HLL "nqp"
.namespace []
.sub "load_module" :subid("cuid_8_1349901750.327") :anon :lex :outer("cuid_33_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 121
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$module", $P101 
    .lex "self", _lex_param_0 
    .lex "$module_name", _lex_param_1 
    .lex "$cur_GLOBALish", _lex_param_2 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_54
    .lex "RETURN", $P102
.annotate 'line', 123
    find_lex $P5002, "$loader"
    $P5003 = $P5002."load_module"(_lex_param_1, _lex_param_2)
    set $P101, $P5003
.annotate 'line', 126
    nqp_decontainerize $P5004, _lex_param_0
    $P5005 = $P5004."is_precompilation_mode"()
    set $P5050, $P5005
    unless $P5005 goto if18_end57 
.annotate 'line', 127
    nqp_decontainerize $P5006, _lex_param_0
    nqp_get_sc_object $P5010, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Stmts"]
    unless_null $P5007, fallback58
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5007, $P5011
  fallback58:
.annotate 'line', 128
    nqp_get_sc_object $P5015, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["VM"]
    unless_null $P5012, fallback59
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5012, $P5016
  fallback59:
.annotate 'line', 130
    nqp_get_sc_object $P5020, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["SVal"]
    unless_null $P5017, fallback60
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5017, $P5021
  fallback60:
    $P5022 = $P5017."new"("ModuleLoader.pbc" :named("value"))
    $P5023 = $P5012."new"($P5022, "load_bytecode vs" :named("pirop"))
.annotate 'line', 132
    nqp_get_sc_object $P5027, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["Op"]
    unless_null $P5024, fallback61
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5024, $P5028
  fallback61:
.annotate 'line', 134
    nqp_get_sc_object $P5032, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["VM"]
    unless_null $P5029, fallback62
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5029, $P5033
  fallback62:
.annotate 'line', 136
    nqp_get_sc_object $P5037, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set $P5034, $P5035["SVal"]
    unless_null $P5034, fallback63
    nqp_get_sc_object $P5038, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5034, $P5038
  fallback63:
    $P5039 = $P5034."new"("ModuleLoader" :named("value"))
    $P5040 = $P5029."new"($P5039, "get_hll_global Ps" :named("pirop"))
.annotate 'line', 138
    nqp_get_sc_object $P5044, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["SVal"]
    unless_null $P5041, fallback64
    nqp_get_sc_object $P5045, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5041, $P5045
  fallback64:
    $P5046 = $P5041."new"(_lex_param_1 :named("value"))
    $P5047 = $P5024."new"($P5040, $P5046, "callmethod" :named("op"), "load_module" :named("name"))
    $P5048 = $P5007."new"($P5023, $P5047)
    $P5049 = $P5006."add_load_dependency_task"($P5048 :named("deserialize_past"))
    set $P5050, $P5049
  if18_end57:
    getattribute $P5052, $P101, "lex_pad"
    find_lex $P5051, "RETURN"
    $P5053 = $P5051($P5052)
    goto lexotic_55
  lexotic_54:
    .get_results ($P5053)
  lexotic_55:
    .return ($P5053) 
.end
.HLL "nqp"
.namespace []
.sub "import" :subid("cuid_9_1349901750.327") :anon :lex :outer("cuid_33_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 145
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5009 = 'cuid_371_1349901750.327' 
    capture_lex $P5009 
    .lex "$target", $P101 
    .lex "self", _lex_param_0 
    .lex "$stash", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
.annotate 'line', 146
    nqp_decontainerize $P5002, _lex_param_0
    $P5003 = $P5002."cur_lexpad"()
    set $P101, $P5003
    set $P5004, _lex_param_1
    iter $P5006, _lex_param_1
  for_next65:
    unless $P5006, for_done67
    shift $P5008, $P5006
  for_redo66:
    .const 'Sub' $P5007 = 'cuid_371_1349901750.327' 
    capture_lex $P5007
    $P5004 = $P5007($P5008)
    goto for_next65
  for_done67:
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_371_1349901750.327") :anon :lex :outer("cuid_9_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 147
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 148
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    find_lex $P5003, "$target"
    $P5004 = _lex_param_0."key"()
    $P5005 = _lex_param_0."value"()
    $P5006 = $P5001."install_lexical_symbol"($P5003, $P5004, $P5005)
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "install_package_symbol" :subid("cuid_10_1349901750.327") :anon :lex :outer("cuid_33_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 154
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .const 'Sub' $P5012 = 'cuid_372_1349901750.327' 
    capture_lex $P5012 
    .lex "$name", $P101 
    .lex "$target", $P102 
    .lex "self", _lex_param_0 
    .lex "$package", _lex_param_1 
    .lex "@sym", _lex_param_2 
    .lex "$obj", _lex_param_3 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
    clone $P5003, _lex_param_2
    set _lex_param_2, $P5003
.annotate 'line', 156
    $P5004 = _lex_param_2."pop"()
    set $S5001, $P5004
    box $P5005, $S5001
    set $P101, $P5005
    set $P102, _lex_param_1
    set $P5006, _lex_param_2
    iter $P5008, _lex_param_2
  for_next68:
    unless $P5008, for_done70
    shift $P5010, $P5008
  for_redo69:
    .const 'Sub' $P5009 = 'cuid_372_1349901750.327' 
    capture_lex $P5009
    $P5006 = $P5009($P5010)
    goto for_next68
  for_done70:
    get_who $P5011, $P102
    set $S5002, $P101
    set $P5011[$S5002], _lex_param_3
    .return (_lex_param_3) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_372_1349901750.327") :anon :lex :outer("cuid_10_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 160
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$target"
    set $S5001, _lex_param_0
    nqp_get_package_through_who $P5001, $P5002, $S5001
    store_lex "$target", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "install_lexical_symbol" :subid("cuid_11_1349901750.327") :anon :lex :outer("cuid_33_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 170
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "$fixup", $P101 
    .lex "self", _lex_param_0 
    .lex "$block", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$obj", _lex_param_3 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
.annotate 'line', 172
    $P5002 = _lex_param_1."symbol"(_lex_param_2, "lexical" :named("scope"), _lex_param_3 :named("value"))
.annotate 'line', 173
    set $P5003, _lex_param_1[0]
    unless_null $P5003, fallback71
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5003, $P5004
  fallback71:
    nqp_get_sc_object $P5008, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5007, $P5008, "QAST"
    get_who $P5006, $P5007
    set $P5005, $P5006["Var"]
    unless_null $P5005, fallback72
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5005, $P5009
  fallback72:
    $P5010 = $P5005."new"("lexical" :named("scope"), _lex_param_2 :named("name"), "var" :named("decl"))
    $P5011 = $P5003."push"($P5010)
.annotate 'line', 176
    nqp_get_sc_object $P5015, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Stmts"]
    unless_null $P5012, fallback73
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5012, $P5016
  fallback73:
.annotate 'line', 177
    nqp_get_sc_object $P5020, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Op"]
    unless_null $P5017, fallback74
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5017, $P5021
  fallback74:
.annotate 'line', 179
    nqp_get_sc_object $P5025, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["VM"]
    unless_null $P5022, fallback75
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5022, $P5026
  fallback75:
.annotate 'line', 180
    $P5027 = _lex_param_1."cuid"()
    set $S5003, $P5027
    concat $S5002, "    .const \"LexInfo\" %r = \"", $S5003
    concat $S5001, $S5002, "\""
    $P5028 = $P5022."new"($S5001 :named("pir"))
.annotate 'line', 182
    nqp_get_sc_object $P5032, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["SVal"]
    unless_null $P5029, fallback76
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5029, $P5033
  fallback76:
    $P5034 = $P5029."new"(_lex_param_2 :named("value"))
.annotate 'line', 183
    nqp_get_sc_object $P5038, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["WVal"]
    unless_null $P5035, fallback77
    nqp_get_sc_object $P5039, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5035, $P5039
  fallback77:
    $P5040 = $P5035."new"(_lex_param_3 :named("value"))
    $P5041 = $P5017."new"($P5028, $P5034, $P5040, "callmethod" :named("op"), "set_static_lexpad_value" :named("name"))
.annotate 'line', 187
    nqp_get_sc_object $P5045, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["Op"]
    unless_null $P5042, fallback78
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5042, $P5046
  fallback78:
.annotate 'line', 189
    nqp_get_sc_object $P5050, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5049, $P5050, "QAST"
    get_who $P5048, $P5049
    set $P5047, $P5048["VM"]
    unless_null $P5047, fallback79
    nqp_get_sc_object $P5051, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5047, $P5051
  fallback79:
.annotate 'line', 190
    $P5052 = _lex_param_1."cuid"()
    set $S5006, $P5052
    concat $S5005, "    .const \"LexInfo\" %r = \"", $S5006
    concat $S5004, $S5005, "\""
    $P5053 = $P5047."new"($S5004 :named("pir"))
    $P5054 = $P5042."new"($P5053, "callmethod" :named("op"), "finish_static_lexpad" :named("name"))
    $P5055 = $P5012."new"($P5041, $P5054)
    set $P101, $P5055
.annotate 'line', 194
    nqp_decontainerize $P5056, _lex_param_0
    $P5057 = $P5056."add_fixup_task"($P101 :named("deserialize_past"), $P101 :named("fixup_past"))
    .return ($P5057) 
.end
.HLL "nqp"
.namespace []
.sub "install_package_routine" :subid("cuid_12_1349901750.327") :anon :lex :outer("cuid_33_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 199
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "$fixup", $P101 
    .lex "self", _lex_param_0 
    .lex "$package", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$past_block", _lex_param_3 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
.annotate 'line', 200
    nqp_get_sc_object $P5005, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Op"]
    unless_null $P5002, fallback80
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5006
  fallback80:
.annotate 'line', 202
    nqp_get_sc_object $P5010, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Op"]
    unless_null $P5007, fallback81
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5007, $P5011
  fallback81:
    nqp_get_sc_object $P5015, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["WVal"]
    unless_null $P5012, fallback82
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5012, $P5016
  fallback82:
    $P5017 = $P5012."new"(_lex_param_1 :named("value"))
    $P5018 = $P5007."new"($P5017, "who" :named("op"))
.annotate 'line', 203
    nqp_get_sc_object $P5022, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5021, $P5022, "QAST"
    get_who $P5020, $P5021
    set $P5019, $P5020["SVal"]
    unless_null $P5019, fallback83
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5019, $P5023
  fallback83:
    set $S5001, _lex_param_2
    $P5024 = $P5019."new"($S5001 :named("value"))
.annotate 'line', 204
    nqp_get_sc_object $P5028, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["BVal"]
    unless_null $P5025, fallback84
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5025, $P5029
  fallback84:
    $P5030 = $P5025."new"(_lex_param_3 :named("value"))
    $P5031 = $P5002."new"($P5018, $P5024, $P5030, "bindkey" :named("op"))
    set $P101, $P5031
.annotate 'line', 206
    nqp_decontainerize $P5032, _lex_param_0
    $P5033 = $P5032."add_fixup_task"($P101 :named("deserialize_past"), $P101 :named("fixup_past"))
    .return ($P5033) 
.end
.HLL "nqp"
.namespace []
.sub "create_code" :subid("cuid_16_1349901750.327") :anon :lex :outer("cuid_33_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 211
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .const 'Sub' $P5101 = 'cuid_13_1349901750.327' 
    capture_lex $P5101 
    .const 'Sub' $P5101 = 'cuid_14_1349901750.327' 
    capture_lex $P5101 
    .const 'Sub' $P5101 = 'cuid_15_1349901750.327' 
    capture_lex $P5101 
    .const 'Sub' $P5101 = 'cuid_376_1349901750.327' 
    capture_lex $P5101 
    .lex "$code_type", $P101 
    .lex "$have_code_type", $P102 
    .lex "$stub_code", $P103 
    .lex "$fixups", $P104 
    .lex "$dummy", $P105 
    .lex "$code_ref_idx", $P106 
    .lex "self", _lex_param_0 
    .lex "$past", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$is_dispatcher", _lex_param_3 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P104, $P5004
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P105, $P5005
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P106, $P5006
    root_new $P107, ['parrot';'Continuation']
    set_label $P107, lexotic_85
    .lex "RETURN", $P107
    box $P5007, 0
    set $P102, $P5007
    new $P5027, 'ExceptionHandler'
    set_label $P5027, catch_handler_2294
    $P5027.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5027
.annotate 'line', 215
.annotate 'line', 216
    nqp_decontainerize $P5008, _lex_param_0
    new $P5009, 'ResizablePMCArray'
    box $P5010, "NQPRoutine"
    push $P5009, $P5010
    $P5011 = $P5008."find_sym"($P5009)
    set $P101, $P5011
.annotate 'line', 217
    find_dynamic_lex $P5013, "$*PACKAGE"
    unless_null $P5013, fallback87
    nqp_get_sc_object $P5016, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$PACKAGE"]
    unless_null $P5014, fallback88
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5014, $P5017
  fallback88:
    unless_null $P5014, vivi_1989
    die "Contextual $*PACKAGE not found"
    box $P5018, "Contextual $*PACKAGE not found"
    set $P5014, $P5018
  vivi_1989:
    set $P5013, $P5014
  fallback87:
    get_how $P5012, $P5013
    find_dynamic_lex $P5019, "$*PACKAGE"
    unless_null $P5019, fallback90
    nqp_get_sc_object $P5022, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["$PACKAGE"]
    unless_null $P5020, fallback91
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5020, $P5023
  fallback91:
    unless_null $P5020, vivi_2092
    die "Contextual $*PACKAGE not found"
    box $P5024, "Contextual $*PACKAGE not found"
    set $P5020, $P5024
  vivi_2092:
    set $P5019, $P5020
  fallback90:
    $P5025 = $P5012."name"($P5019)
    set $S5001, $P5025
    isne $I5001, $S5001, "NQPRoutine"
    box $P5026, $I5001
    set $P102, $P5026
    set $P5028, $P102
    pop_eh 
    goto skip_handler_2193
  catch_handler_2294:
    .get_results ($P5027) 
    set $I10001, 1
    set $P5027["handled"], $I10001
    nqp_get_sc_object $P10001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    finalize $P5027
    pop_upto_eh $P5027
    pop_eh 
    set $P5028, $P10001
    goto skip_handler_2193
  skip_handler_2193:
    .const 'Sub' $P5030 = 'cuid_13_1349901750.327' 
    capture_lex $P5030
    newclosure $P5029, $P5030
    set $P103, $P5029
.annotate 'line', 260
    nqp_get_sc_object $P5034, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5033, $P5034, "QAST"
    get_who $P5032, $P5033
    set $P5031, $P5032["Stmts"]
    unless_null $P5031, fallback121
    nqp_get_sc_object $P5035, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5031, $P5035
  fallback121:
    $P5036 = $P5031."new"()
    set $P104, $P5036
    set $P5037, _lex_param_1["compile_time_dummy"]
    unless_null $P5037, fallback124
    nqp_get_sc_object $P5038, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5037, $P5038
  fallback124:
    defined $I5002, $P5037
    unless $I5002 goto if26_else122 
.annotate 'line', 263
    set $P5039, _lex_param_1["compile_time_dummy"]
    unless_null $P5039, fallback125
    nqp_get_sc_object $P5040, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5039, $P5040
  fallback125:
    set $P105, $P5039
    set $P5060, $P105
    goto if26_end123
  if26_else122:
.annotate 'line', 266
    nqp_fresh_stub $P5041, $P103
    set $P105, $P5041
    set $S5002, _lex_param_2
    assign $P105, $S5002
    setprop $P105, "STATIC_CODE_REF", $P105
.annotate 'line', 273
    nqp_decontainerize $P5042, _lex_param_0
    $P5043 = $P5042."add_root_code_ref"($P105, _lex_param_1)
    set $P106, $P5043
    nqp_decontainerize $P5044, _lex_param_0
    nqp_get_sc_object $P5045, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 3
    repr_get_attr_obj $P5046, $P5044, $P5045, "%!code_stub_sc_idx"
.annotate 'line', 274
    $P5047 = _lex_param_1."cuid"()
    set $S5003, $P5047
    set $P5046[$S5003], $P106
    set _lex_param_1["compile_time_dummy"], $P105
    set $P5059, $P102
    unless $P102 goto if27_end127 
.annotate 'line', 280
    nqp_decontainerize $P5048, _lex_param_0
    nqp_get_sc_object $P5049, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 3
    repr_get_attr_obj $P5050, $P5048, $P5049, "%!code_object_fixup_list"
.annotate 'line', 281
    $P5051 = _lex_param_1."cuid"()
    set $S5004, $P5051
    set $P5050[$S5004], $P104
.annotate 'line', 282
    nqp_decontainerize $P5052, _lex_param_0
    $P5053 = $P5052."is_precompilation_mode"()
    unless $P5053 goto if28_else128 
    .const 'Sub' $P5055 = 'cuid_14_1349901750.327' 
    capture_lex $P5055
    newclosure $P5054, $P5055
    setprop $P105, "CLONE_CALLBACK", $P5054
    set $P5058, $P105
    goto if28_end129
  if28_else128:
.annotate 'line', 287
    .const 'Sub' $P5057 = 'cuid_15_1349901750.327' 
    capture_lex $P5057
    newclosure $P5056, $P5057
    setprop $P105, "CLONE_CALLBACK", $P5056
    set $P5058, $P105
  if28_end129:
    set $P5059, $P5058
  if27_end127:
    set $P5060, $P5059
  if26_end123:
.annotate 'line', 311
    nqp_decontainerize $P5061, _lex_param_0
    $P5062 = $P5061."add_fixup_task"($P104 :named("fixup_past"))
    unless $P102 goto if29_else140 
    .const 'Sub' $P5063 = 'cuid_376_1349901750.327' 
    capture_lex $P5063
    $P5064 = $P5063()
    set $P5100, $P5064
    goto if29_end141
  if29_else140:
.annotate 'line', 350
.annotate 'line', 353
    nqp_get_sc_object $P5068, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5067, $P5068, "QAST"
    get_who $P5066, $P5067
    set $P5065, $P5066["VM"]
    unless_null $P5065, fallback155
    nqp_get_sc_object $P5069, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5065, $P5069
  fallback155:
.annotate 'line', 355
    nqp_get_sc_object $P5073, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5072, $P5073, "QAST"
    get_who $P5071, $P5072
    set $P5070, $P5071["VM"]
    unless_null $P5070, fallback156
    nqp_get_sc_object $P5074, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5070, $P5074
  fallback156:
.annotate 'line', 357
    nqp_get_sc_object $P5078, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5077, $P5078, "QAST"
    get_who $P5076, $P5077
    set $P5075, $P5076["SVal"]
    unless_null $P5075, fallback157
    nqp_get_sc_object $P5079, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5075, $P5079
  fallback157:
    nqp_decontainerize $P5080, _lex_param_0
    $P5081 = $P5080."handle"()
    $P5082 = $P5075."new"($P5081 :named("value"))
.annotate 'line', 358
    nqp_get_sc_object $P5086, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5085, $P5086, "QAST"
    get_who $P5084, $P5085
    set $P5083, $P5084["IVal"]
    unless_null $P5083, fallback158
    nqp_get_sc_object $P5087, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5083, $P5087
  fallback158:
    $P5088 = $P5083."new"($P106 :named("value"))
    $P5089 = $P5070."new"($P5082, $P5088, "nqp_get_sc_code_ref Psi" :named("pirop"))
.annotate 'line', 360
    nqp_get_sc_object $P5093, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5092, $P5093, "QAST"
    get_who $P5091, $P5092
    set $P5090, $P5091["BVal"]
    unless_null $P5090, fallback159
    nqp_get_sc_object $P5094, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5090, $P5094
  fallback159:
    $P5095 = $P5090."new"(_lex_param_1 :named("value"))
    $P5096 = $P5065."new"($P5089, $P5095, "assign vPP" :named("pirop"))
    $P5097 = $P104."push"($P5096)
    find_lex $P5098, "RETURN"
    $P5099 = $P5098($P105)
    set $P5100, $P5099
  if29_end141:
    goto lexotic_86
  lexotic_85:
    .get_results ($P5100)
  lexotic_86:
    .return ($P5100) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_13_1349901750.327") :anon :lex :outer("cuid_16_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 224
    .param pmc _lex_param_0 :slurpy 
    .param pmc _lex_param_1 :slurpy :named 
    .const 'Sub' $P5030 = 'cuid_375_1349901750.327' 
    capture_lex $P5030 
    .lex "$nqpcomp", $P101 
    .lex "$post", $P102 
    .lex "$pir", $P103 
    .lex "$compiled", $P104 
    .lex "$c", $P105 
    .lex "$i", $P106 
    .lex "@args", _lex_param_0 
    .lex "%named", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P104, $P5004
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P105, $P5005
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P106, $P5006
.annotate 'line', 226
    find_lex $P5007, "$past"
    find_lex $P5009, "self"
    nqp_decontainerize $P5008, $P5009
    $P5010 = $P5008."libs"()
    $P5011 = $P5007."unshift"($P5010)
    compreg $P5012, "nqp"
    set $P101, $P5012
.annotate 'line', 228
    nqp_get_sc_object $P5016, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["CompUnit"]
    unless_null $P5013, fallback95
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5013, $P5017
  fallback95:
    find_lex $P5018, "$past"
    $P5019 = $P5013."new"($P5018, "nqp" :named("hll"))
    $P5020 = $P101."post"($P5019)
    set $P102, $P5020
.annotate 'line', 229
    $P5021 = $P101."pir"($P102)
    set $P103, $P5021
.annotate 'line', 230
    $P5022 = $P101."evalpmc"($P103)
    set $P104, $P5022
    elements $I5001, $P104
    box $P5023, $I5001
    set $P105, $P5023
    box $P5024, 0
    set $P106, $P5024
  while23_test96:
    set $N5001, $P106
    set $N5002, $P105
    islt $I5002, $N5001, $N5002
    box $P5028, $I5002
    set $P5027, $P5028
    unless $I5002 goto while23_done100 
  while23_redo98:
    .const 'Sub' $P5025 = 'cuid_375_1349901750.327' 
    capture_lex $P5025
    $P5026 = $P5025()
    set $P5027, $P5026
    goto while23_test96 
  while23_done100:
.annotate 'line', 256
    $P5029 = $P104(_lex_param_0 :flat, _lex_param_1 :flat :named)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_375_1349901750.327") :anon :lex :outer("cuid_13_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 235
    .const 'Sub' $P5017 = 'cuid_374_1349901750.327' 
    capture_lex $P5017 
    .lex "$subid", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
.annotate 'line', 236
    find_lex $P5003, "$compiled"
    find_lex $P5004, "$i"
    set $I5001, $P5004
    set $P5002, $P5003[$I5001]
    unless_null $P5002, fallback101
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5005
  fallback101:
    $P5006 = $P5002."get_subid"()
    set $P101, $P5006
    find_lex $P5008, "self"
    nqp_decontainerize $P5007, $P5008
    nqp_get_sc_object $P5009, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 3
    repr_get_attr_obj $P5010, $P5007, $P5009, "%!code_objects_to_fix_up"
    set $S5001, $P101
    exists $I5002, $P5010[$S5001]
    box $P5014, $I5002
    set $P5013, $P5014
    unless $I5002 goto if24_end103 
    .const 'Sub' $P5011 = 'cuid_374_1349901750.327' 
    capture_lex $P5011
    $P5012 = $P5011()
    set $P5013, $P5012
  if24_end103:
    find_lex $P5015, "$i"
    set $N5002, $P5015
    set $N5003, 1
    add $N5001, $N5002, $N5003
    box $P5016, $N5001
    store_lex "$i", $P5016
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_374_1349901750.327") :anon :lex :outer("cuid_375_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 237
    .const 'Sub' $P5062 = 'cuid_373_1349901750.327' 
    capture_lex $P5062 
    .lex "$static", $P101 
    .lex "$fixup_stmts", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
.annotate 'line', 241
    find_lex $P5005, "self"
    nqp_decontainerize $P5004, $P5005
    nqp_get_sc_object $P5006, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 3
    repr_get_attr_obj $P5007, $P5004, $P5006, "%!code_objects_to_fix_up"
    find_lex $P5008, "$subid"
    set $S5001, $P5008
    set $P5003, $P5007[$S5001]
    unless_null $P5003, fallback104
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5003, $P5009
  fallback104:
    $P5010 = $P5003."shift"()
    set $P101, $P5010
    find_lex $P5011, "$code_type"
    find_lex $P5013, "$compiled"
    find_lex $P5014, "$i"
    set $I5001, $P5014
    set $P5012, $P5013[$I5001]
    unless_null $P5012, fallback105
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5012, $P5015
  fallback105:
    setattribute $P101, $P5011, "$!do", $P5012
    find_lex $P5021, "self"
    nqp_decontainerize $P5020, $P5021
    nqp_get_sc_object $P5022, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 3
    repr_get_attr_obj $P5023, $P5020, $P5022, "%!code_objects_to_fix_up"
    find_lex $P5024, "$subid"
    set $S5002, $P5024
    set $P5019, $P5023[$S5002]
    unless_null $P5019, fallback106
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5019, $P5025
  fallback106:
    set $P5016, $P5019
    iter $P5018, $P5019
  for_next108:
    unless $P5018, for_done110
    shift $P5027, $P5018
  for_redo109:
    .const 'Sub' $P5026 = 'cuid_373_1349901750.327' 
    capture_lex $P5026
    $P5016 = $P5026($P5027)
    goto for_next108
  for_done110:
    find_lex $P5029, "$compiled"
    find_lex $P5030, "$i"
    set $I5002, $P5030
    set $P5028, $P5029[$I5002]
    unless_null $P5028, fallback111
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5028, $P5031
  fallback111:
    find_lex $P5033, "$compiled"
    find_lex $P5034, "$i"
    set $I5003, $P5034
    set $P5032, $P5033[$I5003]
    unless_null $P5032, fallback112
    nqp_get_sc_object $P5035, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5032, $P5035
  fallback112:
    setprop $P5028, "STATIC_CODE_REF", $P5032
.annotate 'line', 247
    find_lex $P5037, "self"
    nqp_decontainerize $P5036, $P5037
    find_lex $P5040, "self"
    nqp_decontainerize $P5039, $P5040
    nqp_get_sc_object $P5041, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 3
    repr_get_attr_obj $P5042, $P5039, $P5041, "%!code_stub_sc_idx"
    find_lex $P5043, "$subid"
    set $S5003, $P5043
    set $P5038, $P5042[$S5003]
    unless_null $P5038, fallback113
    nqp_get_sc_object $P5044, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5038, $P5044
  fallback113:
    find_lex $P5046, "$compiled"
    find_lex $P5047, "$i"
    set $I5004, $P5047
    set $P5045, $P5046[$I5004]
    unless_null $P5045, fallback114
    nqp_get_sc_object $P5048, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5045, $P5048
  fallback114:
    $P5049 = $P5036."update_root_code_ref"($P5038, $P5045)
    find_lex $P5052, "self"
    nqp_decontainerize $P5051, $P5052
    nqp_get_sc_object $P5053, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 3
    repr_get_attr_obj $P5054, $P5051, $P5053, "%!code_object_fixup_list"
    find_lex $P5055, "$subid"
    set $S5004, $P5055
    set $P5050, $P5054[$S5004]
    unless_null $P5050, fallback115
    nqp_get_sc_object $P5056, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5050, $P5056
  fallback115:
    set $P102, $P5050
    new $P5060, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5060, while25_handlers119
    push_eh $P5060
  while25_test116:
    $P5057 = $P102."list"()
    set $N5001, $P5057
    box $P5061, $N5001
    set $P5059, $P5061
    unless $N5001 goto while25_done120 
  while25_redo118:
.annotate 'line', 251
    $P5058 = $P102."shift"()
    set $P5059, $P5058
    goto while25_test116 
  while25_handlers119:
    .get_results ($P5060)
    pop_upto_eh $P5060
    getattribute $P5060, $P5060, 'type'
    eq $P5060, .CONTROL_LOOP_NEXT, while25_test116
    eq $P5060, .CONTROL_LOOP_REDO, while25_redo118
  while25_done120:
    pop_eh 
    .return ($P5059) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_373_1349901750.327") :anon :lex :outer("cuid_374_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 243
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$code_type"
    find_lex $P5004, "$compiled"
    find_lex $P5005, "$i"
    set $I5001, $P5005
    set $P5003, $P5004[$I5001]
    unless_null $P5003, fallback107
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5003, $P5006
  fallback107:
    clone $P5002, $P5003
    setattribute _lex_param_0, $P5001, "$!do", $P5002
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_14_1349901750.327") :anon :lex :outer("cuid_16_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 283
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$orig", _lex_param_0 
    .lex "$clone", _lex_param_1 
    .lex "$code_obj", _lex_param_2 
.annotate 'line', 284
    find_lex $P5003, "self"
    nqp_decontainerize $P5002, $P5003
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 3
    repr_get_attr_obj $P5005, $P5002, $P5004, "%!code_objects_to_fix_up"
    find_lex $P5006, "$past"
    $P5007 = $P5006."cuid"()
    set $S5001, $P5007
    set $P5001, $P5005[$S5001]
    unless_null $P5001, fallback130
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5008
  fallback130:
    $P5009 = $P5001."push"(_lex_param_2)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_15_1349901750.327") :anon :lex :outer("cuid_16_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 288
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$orig", _lex_param_0 
    .lex "$clone", _lex_param_1 
    .lex "$code_obj", _lex_param_2 
.annotate 'line', 290
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    $P5003 = $P5001."add_object"(_lex_param_2)
.annotate 'line', 291
    find_lex $P5004, "$fixups"
    nqp_get_sc_object $P5008, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5007, $P5008, "QAST"
    get_who $P5006, $P5007
    set $P5005, $P5006["Op"]
    unless_null $P5005, fallback131
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5005, $P5009
  fallback131:
.annotate 'line', 293
    nqp_get_sc_object $P5013, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5012, $P5013, "QAST"
    get_who $P5011, $P5012
    set $P5010, $P5011["WVal"]
    unless_null $P5010, fallback132
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5010, $P5014
  fallback132:
    $P5015 = $P5010."new"(_lex_param_2 :named("value"))
.annotate 'line', 294
    nqp_get_sc_object $P5019, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["WVal"]
    unless_null $P5016, fallback133
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5016, $P5020
  fallback133:
    find_lex $P5021, "$code_type"
    $P5022 = $P5016."new"($P5021 :named("value"))
.annotate 'line', 295
    nqp_get_sc_object $P5026, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5025, $P5026, "QAST"
    get_who $P5024, $P5025
    set $P5023, $P5024["SVal"]
    unless_null $P5023, fallback134
    nqp_get_sc_object $P5027, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5023, $P5027
  fallback134:
    $P5028 = $P5023."new"("$!do" :named("value"))
.annotate 'line', 296
    nqp_get_sc_object $P5032, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["VM"]
    unless_null $P5029, fallback135
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5029, $P5033
  fallback135:
.annotate 'line', 298
    nqp_get_sc_object $P5037, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set $P5034, $P5035["Op"]
    unless_null $P5034, fallback136
    nqp_get_sc_object $P5038, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5034, $P5038
  fallback136:
    nqp_get_sc_object $P5042, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5041, $P5042, "QAST"
    get_who $P5040, $P5041
    set $P5039, $P5040["BVal"]
    unless_null $P5039, fallback137
    nqp_get_sc_object $P5043, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5039, $P5043
  fallback137:
    find_lex $P5044, "$past"
    $P5045 = $P5039."new"($P5044 :named("value"))
    $P5046 = $P5034."new"($P5045, "clone" :named("op"))
.annotate 'line', 299
    nqp_get_sc_object $P5050, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5049, $P5050, "QAST"
    get_who $P5048, $P5049
    set $P5047, $P5048["WVal"]
    unless_null $P5047, fallback138
    nqp_get_sc_object $P5051, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5047, $P5051
  fallback138:
    $P5052 = $P5047."new"(_lex_param_2 :named("value"))
    $P5053 = $P5029."new"($P5046, $P5052, "set_sub_code_object 0PP" :named("pirop"))
    $P5054 = $P5005."new"($P5015, $P5022, $P5028, $P5053, "bindattr" :named("op"))
    $P5055 = $P5004."push"($P5054)
.annotate 'line', 304
    find_lex $P5058, "self"
    nqp_decontainerize $P5057, $P5058
    nqp_get_sc_object $P5059, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 3
    repr_get_attr_obj $P5060, $P5057, $P5059, "%!code_objects_to_fix_up"
    find_lex $P5061, "$past"
    $P5062 = $P5061."cuid"()
    set $S5001, $P5062
    set $P5056, $P5060[$S5001]
    unless_null $P5056, fallback139
    nqp_get_sc_object $P5063, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5056, $P5063
  fallback139:
    $P5064 = $P5056."push"(_lex_param_2)
    .return ($P5064) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_376_1349901750.327") :anon :lex :outer("cuid_16_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 315
    .lex "$code_obj", $P101 
    .lex "$slot", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
    find_lex $P5004, "$code_type"
    repr_instance_of $P5003, $P5004
    set $P101, $P5003
    find_lex $P5005, "$code_type"
    find_lex $P5006, "$dummy"
    setattribute $P101, $P5005, "$!do", $P5006
    find_lex $P5007, "$is_dispatcher"
    set $P5010, $P5007
    unless $P5007 goto if30_end143 
    find_lex $P5008, "$code_type"
    new $P5009, 'ResizablePMCArray'
    setattribute $P101, $P5008, "$!dispatchees", $P5009
    set $P5010, $P5009
  if30_end143:
.annotate 'line', 321
    find_lex $P5012, "self"
    nqp_decontainerize $P5011, $P5012
    $P5013 = $P5011."add_object"($P101)
    set $P102, $P5013
.annotate 'line', 324
    find_lex $P5015, "self"
    nqp_decontainerize $P5014, $P5015
.annotate 'line', 325
    nqp_get_sc_object $P5019, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["VM"]
    unless_null $P5016, fallback144
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5016, $P5020
  fallback144:
.annotate 'line', 327
    nqp_get_sc_object $P5024, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["BVal"]
    unless_null $P5021, fallback145
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5021, $P5025
  fallback145:
    find_lex $P5026, "$past"
    $P5027 = $P5021."new"($P5026 :named("value"))
.annotate 'line', 328
    nqp_get_sc_object $P5031, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5030, $P5031, "QAST"
    get_who $P5029, $P5030
    set $P5028, $P5029["WVal"]
    unless_null $P5028, fallback146
    nqp_get_sc_object $P5032, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5028, $P5032
  fallback146:
    $P5033 = $P5028."new"($P101 :named("value"))
    $P5034 = $P5016."new"($P5027, $P5033, "set_sub_code_object vPP" :named("pirop"))
    $P5035 = $P5014."add_fixup_task"($P5034 :named("deserialize_past"))
.annotate 'line', 332
    find_lex $P5036, "$fixups"
    nqp_get_sc_object $P5040, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5039, $P5040, "QAST"
    get_who $P5038, $P5039
    set $P5037, $P5038["Op"]
    unless_null $P5037, fallback147
    nqp_get_sc_object $P5041, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5037, $P5041
  fallback147:
.annotate 'line', 334
    nqp_get_sc_object $P5045, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["WVal"]
    unless_null $P5042, fallback148
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5042, $P5046
  fallback148:
    $P5047 = $P5042."new"($P101 :named("value"))
.annotate 'line', 335
    nqp_get_sc_object $P5051, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["WVal"]
    unless_null $P5048, fallback149
    nqp_get_sc_object $P5052, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5048, $P5052
  fallback149:
    find_lex $P5053, "$code_type"
    $P5054 = $P5048."new"($P5053 :named("value"))
.annotate 'line', 336
    nqp_get_sc_object $P5058, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5057, $P5058, "QAST"
    get_who $P5056, $P5057
    set $P5055, $P5056["SVal"]
    unless_null $P5055, fallback150
    nqp_get_sc_object $P5059, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5055, $P5059
  fallback150:
    $P5060 = $P5055."new"("$!do" :named("value"))
.annotate 'line', 337
    nqp_get_sc_object $P5064, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5063, $P5064, "QAST"
    get_who $P5062, $P5063
    set $P5061, $P5062["BVal"]
    unless_null $P5061, fallback151
    nqp_get_sc_object $P5065, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5061, $P5065
  fallback151:
    find_lex $P5066, "$past"
    $P5067 = $P5061."new"($P5066 :named("value"))
    $P5068 = $P5037."new"($P5047, $P5054, $P5060, $P5067, "bindattr" :named("op"))
    $P5069 = $P5036."push"($P5068)
.annotate 'line', 339
    find_lex $P5070, "$fixups"
    nqp_get_sc_object $P5074, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5073, $P5074, "QAST"
    get_who $P5072, $P5073
    set $P5071, $P5072["VM"]
    unless_null $P5071, fallback152
    nqp_get_sc_object $P5075, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5071, $P5075
  fallback152:
.annotate 'line', 341
    nqp_get_sc_object $P5079, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5078, $P5079, "QAST"
    get_who $P5077, $P5078
    set $P5076, $P5077["BVal"]
    unless_null $P5076, fallback153
    nqp_get_sc_object $P5080, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5076, $P5080
  fallback153:
    find_lex $P5081, "$past"
    $P5082 = $P5076."new"($P5081 :named("value"))
.annotate 'line', 342
    nqp_get_sc_object $P5086, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5085, $P5086, "QAST"
    get_who $P5084, $P5085
    set $P5083, $P5084["WVal"]
    unless_null $P5083, fallback154
    nqp_get_sc_object $P5087, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5083, $P5087
  fallback154:
    $P5088 = $P5083."new"($P101 :named("value"))
    $P5089 = $P5071."new"($P5082, $P5088, "set_sub_code_object vPP" :named("pirop"))
    $P5090 = $P5070."push"($P5089)
    find_lex $P5092, "self"
    nqp_decontainerize $P5091, $P5092
    nqp_get_sc_object $P5093, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 3
    repr_get_attr_obj $P5094, $P5091, $P5093, "%!code_objects_to_fix_up"
.annotate 'line', 346
    find_lex $P5095, "$past"
    $P5096 = $P5095."cuid"()
    set $S5001, $P5096
    new $P5097, 'ResizablePMCArray'
    push $P5097, $P101
    set $P5094[$S5001], $P5097
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_create_mo" :subid("cuid_17_1349901750.327") :anon :lex :outer("cuid_33_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 368
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :named("name") :optional 
    .param int haz_param_1 :opt_flag 
    .param pmc _lex_param_3 :named("repr") :optional 
    .param int haz_param_2 :opt_flag 
    if haz_param_1, default166
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_2, $P5012
  default166:
    if haz_param_2, default167
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_3, $P5013
  default167:
    .lex "%args", $P101 
    .lex "$mo", $P102 
    .lex "self", _lex_param_0 
    .lex "$how", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$repr", _lex_param_3 
    new $P5001, 'Hash'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
    root_new $P103, ['parrot';'Continuation']
    set_label $P103, lexotic_160
    .lex "RETURN", $P103
    defined $I5001, _lex_param_2
    box $P5004, $I5001
    set $P5003, $P5004
    unless $I5001 goto if31_end163 
.annotate 'line', 371
    set $P101["name"], _lex_param_2
    set $P5003, _lex_param_2
  if31_end163:
    defined $I5002, _lex_param_3
    box $P5006, $I5002
    set $P5005, $P5006
    unless $I5002 goto if32_end165 
.annotate 'line', 372
    set $P101["repr"], _lex_param_3
    set $P5005, _lex_param_3
  if32_end165:
.annotate 'line', 373
    $P5007 = _lex_param_1."new_type"($P101 :flat :named)
    set $P102, $P5007
.annotate 'line', 374
    nqp_decontainerize $P5008, _lex_param_0
    $P5009 = $P5008."add_object"($P102)
    find_lex $P5010, "RETURN"
    $P5011 = $P5010($P102)
    goto lexotic_161
  lexotic_160:
    .get_results ($P5011)
  lexotic_161:
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_attribute" :subid("cuid_18_1349901750.327") :anon :lex :outer("cuid_33_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 385
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 
    .lex "$attr", $P101 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$meta_attr", _lex_param_2 
    .lex "%lit_args", _lex_param_3 
    .lex "%obj_args", _lex_param_4 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
.annotate 'line', 386
    $P5002 = _lex_param_2."new"(_lex_param_3 :flat :named, _lex_param_4 :flat :named)
    set $P101, $P5002
.annotate 'line', 387
    get_how $P5003, _lex_param_1
    $P5004 = $P5003."add_attribute"(_lex_param_1, $P101)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_method" :subid("cuid_19_1349901750.327") :anon :lex :outer("cuid_33_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 391
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$meta_method_name", _lex_param_2 
    .lex "$name", _lex_param_3 
    .lex "$code", _lex_param_4 
.annotate 'line', 392
    get_how $P5001, _lex_param_1
    set $S5001, _lex_param_2
    $P5002 = $P5001.$S5001(_lex_param_1, _lex_param_3, _lex_param_4)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "set_routine_signature" :subid("cuid_20_1349901750.327") :anon :lex :outer("cuid_33_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 396
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "$sig_type", $P101 
    .lex "$code_type", $P102 
    .lex "$sig_obj", $P103 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$types", _lex_param_2 
    .lex "$definednesses", _lex_param_3 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P103, $P5003
.annotate 'line', 397
    nqp_decontainerize $P5004, _lex_param_0
    new $P5005, 'ResizablePMCArray'
    box $P5006, "NQPSignature"
    push $P5005, $P5006
    $P5007 = $P5004."find_sym"($P5005)
    set $P101, $P5007
.annotate 'line', 398
    nqp_decontainerize $P5008, _lex_param_0
    new $P5009, 'ResizablePMCArray'
    box $P5010, "NQPRoutine"
    push $P5009, $P5010
    $P5011 = $P5008."find_sym"($P5009)
    set $P102, $P5011
    repr_instance_of $P5012, $P101
    set $P103, $P5012
    setattribute $P103, $P101, "$!types", _lex_param_2
    setattribute $P103, $P101, "$!definednesses", _lex_param_3
    setattribute _lex_param_1, $P102, "$!signature", $P103
    .return ($P103) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_set_body_block" :subid("cuid_21_1349901750.327") :anon :lex :outer("cuid_33_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 406
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$body_code_obj", $P101 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$body_past", _lex_param_2 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
.annotate 'line', 408
    nqp_decontainerize $P5002, _lex_param_0
    $P5003 = _lex_param_2."name"()
    $P5004 = $P5002."create_code"(_lex_param_2, $P5003, 0)
    set $P101, $P5004
.annotate 'line', 411
    get_how $P5005, _lex_param_1
    $P5006 = $P5005."set_body_block"(_lex_param_1, $P101)
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_parent_or_role" :subid("cuid_22_1349901750.327") :anon :lex :outer("cuid_33_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 415
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$meta_method_name", _lex_param_2 
    .lex "$to_add", _lex_param_3 
.annotate 'line', 416
    get_how $P5001, _lex_param_1
    set $S5001, _lex_param_2
    $P5002 = $P5001.$S5001(_lex_param_1, _lex_param_3)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_parrot_vtable_handler_mapping" :subid("cuid_23_1349901750.327") :anon :lex :outer("cuid_33_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 419
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$att_name", _lex_param_3 
.annotate 'line', 420
    get_how $P5001, _lex_param_1
    $P5002 = $P5001."add_parrot_vtable_handler_mapping"(_lex_param_1, _lex_param_2, _lex_param_3)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_compose" :subid("cuid_24_1349901750.327") :anon :lex :outer("cuid_33_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 424
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
.annotate 'line', 425
    get_how $P5001, _lex_param_1
    $P5002 = $P5001."compose"(_lex_param_1)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "run_begin_block" :subid("cuid_25_1349901750.327") :anon :lex :outer("cuid_33_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 429
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5042 = 'cuid_378_1349901750.327' 
    capture_lex $P5042 
    .lex "$wrapper", $P101 
    .lex "%seen", $P102 
    .lex "$i", $P103 
    .lex "$code", $P104 
    .lex "$old_global", $P105 
    .lex "self", _lex_param_0 
    .lex "$past", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P104, $P5004
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P105, $P5005
    root_new $P106, ['parrot';'Continuation']
    set_label $P106, lexotic_168
    .lex "RETURN", $P106
.annotate 'line', 431
    nqp_get_sc_object $P5009, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Block"]
    unless_null $P5006, fallback170
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5006, $P5010
  fallback170:
.annotate 'line', 432
    nqp_get_sc_object $P5014, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Stmts"]
    unless_null $P5011, fallback171
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5011, $P5015
  fallback171:
    $P5016 = $P5011."new"()
    $P5017 = $P5006."new"($P5016, _lex_param_1)
    set $P101, $P5017
    nqp_decontainerize $P5018, _lex_param_0
    nqp_get_sc_object $P5019, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 3
    repr_get_attr_obj $P5020, $P5018, $P5019, "@!BLOCKS"
    set $N5001, $P5020
    box $P5021, $N5001
    set $P103, $P5021
  while33_test172:
    set $N5002, $P103
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5025, $I5001
    set $P5024, $P5025
    unless $I5001 goto while33_done176 
  while33_redo174:
    .const 'Sub' $P5022 = 'cuid_378_1349901750.327' 
    capture_lex $P5022
    $P5023 = $P5022()
    set $P5024, $P5023
    goto while33_test172 
  while33_done176:
.annotate 'line', 455
    nqp_decontainerize $P5026, _lex_param_0
    $P5027 = $P5026."create_code"($P101, "BEGIN block", 0)
    set $P104, $P5027
    new $P5029, 'ResizablePMCArray'
    get_hll_global $P5028, $P5029, "GLOBAL"
    set $P105, $P5028
    new $P5030, 'ResizablePMCArray'
    find_dynamic_lex $P5031, "$*GLOBALish"
    unless_null $P5031, fallback193
    nqp_get_sc_object $P5034, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["$GLOBALish"]
    unless_null $P5032, fallback194
    nqp_get_sc_object $P5035, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5032, $P5035
  fallback194:
    unless_null $P5032, vivi_38195
    die "Contextual $*GLOBALish not found"
    box $P5036, "Contextual $*GLOBALish not found"
    set $P5032, $P5036
  vivi_38195:
    set $P5031, $P5032
  fallback193:
    set_hll_global $P5030, "GLOBAL", $P5031
.annotate 'line', 458
    $P5037 = $P104()
    new $P5038, 'ResizablePMCArray'
    set_hll_global $P5038, "GLOBAL", $P105
.annotate 'line', 463
    $P5039 = $P101."shift"()
    find_lex $P5040, "RETURN"
    $P5041 = $P5040($P101)
    goto lexotic_169
  lexotic_168:
    .get_results ($P5041)
  lexotic_169:
    .return ($P5041) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_378_1349901750.327") :anon :lex :outer("cuid_25_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 437
    .const 'Sub' $P5017 = 'cuid_377_1349901750.327' 
    capture_lex $P5017 
    .lex "%symbols", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 439
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 3
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback177
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5004, $P5010
  fallback177:
    $P5011 = $P5004."symtable"()
    set $P101, $P5011
    set $P5012, $P101
    iter $P5014, $P101
  for_next190:
    unless $P5014, for_done192
    shift $P5016, $P5014
  for_redo191:
    .const 'Sub' $P5015 = 'cuid_377_1349901750.327' 
    capture_lex $P5015
    $P5012 = $P5015($P5016)
    goto for_next190
  for_done192:
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_377_1349901750.327") :anon :lex :outer("cuid_378_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 440
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "%seen"
.annotate 'line', 441
    $P5003 = _lex_param_0."key"()
    set $S5001, $P5003
    set $P5001, $P5002[$S5001]
    unless_null $P5001, fallback182
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5004
  fallback182:
    isfalse $I5001, $P5001
    set $I5003, $I5001
    unless $I5001 goto if35_end181 
    $P5005 = _lex_param_0."value"()
    exists $I5002, $P5005["value"]
    set $I5003, $I5002
  if35_end181:
    box $P5038, $I5003
    set $P5037, $P5038
    unless $I5003 goto if34_end179 
    new $P5032, 'ExceptionHandler'
    set_label $P5032, catch_handler_37189
    $P5032.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5032
.annotate 'line', 442
.annotate 'line', 443
    find_lex $P5007, "$wrapper"
    set $P5006, $P5007[0]
    unless_null $P5006, fallback183
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5006, $P5008
  fallback183:
    nqp_get_sc_object $P5012, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["Op"]
    unless_null $P5009, fallback184
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5009, $P5013
  fallback184:
.annotate 'line', 445
    nqp_get_sc_object $P5017, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5016, $P5017, "QAST"
    get_who $P5015, $P5016
    set $P5014, $P5015["Var"]
    unless_null $P5014, fallback185
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5014, $P5018
  fallback185:
    $P5019 = _lex_param_0."key"()
    $P5020 = $P5014."new"($P5019 :named("name"), "lexical" :named("scope"), "var" :named("isdecl"))
.annotate 'line', 446
    nqp_get_sc_object $P5024, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["WVal"]
    unless_null $P5021, fallback186
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5021, $P5025
  fallback186:
    $P5027 = _lex_param_0."value"()
    set $P5026, $P5027["value"]
    unless_null $P5026, fallback187
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5026, $P5028
  fallback187:
    $P5029 = $P5021."new"($P5026 :named("value"))
    $P5030 = $P5009."new"($P5020, $P5029, "bind" :named("op"))
    $P5031 = $P5006."push"($P5030)
    set $P5033, $P5031
    pop_eh 
    goto skip_handler_36188
  catch_handler_37189:
    .get_results ($P5032) 
    set $I10001, 1
    set $P5032["handled"], $I10001
    nqp_get_sc_object $P10001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    finalize $P5032
    pop_upto_eh $P5032
    pop_eh 
    set $P5033, $P10001
    goto skip_handler_36188
  skip_handler_36188:
    find_lex $P5034, "%seen"
.annotate 'line', 449
    $P5035 = _lex_param_0."key"()
    set $S5002, $P5035
    box $P5036, 1
    set $P5034[$S5002], $P5036
    set $P5037, $P5036
  if34_end179:
    .return ($P5037) 
.end
.HLL "nqp"
.namespace []
.sub "libs" :subid("cuid_26_1349901750.327") :anon :lex :outer("cuid_33_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 468
    .param pmc _lex_param_0 
    .const 'Sub' $P5045 = 'cuid_379_1349901750.327' 
    capture_lex $P5045 
    .lex "@loadlibs", $P101 
    .lex "self", _lex_param_0 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    box $P5003, "nqp_group"
    push $P5002, $P5003
    box $P5004, "nqp_ops"
    push $P5002, $P5004
    box $P5005, "nqp_bigint_ops"
    push $P5002, $P5005
    box $P5006, "trans_ops"
    push $P5002, $P5006
    box $P5007, "io_ops"
    push $P5002, $P5007
    set $P101, $P5002
    find_dynamic_lex $P5010, "%*COMPILING"
    unless_null $P5010, fallback198
    nqp_get_sc_object $P5013, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5012, $P5013
    set $P5011, $P5012["%COMPILING"]
    unless_null $P5011, fallback199
    nqp_get_sc_object $P5015, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5014, $P5015
    new $P5016, 'Hash'
    set $P5014["%COMPILING"], $P5016
    set $P5011, $P5016
  fallback199:
    unless_null $P5011, vivi_40200
    die "Contextual %*COMPILING not found"
    box $P5017, "Contextual %*COMPILING not found"
    set $P5011, $P5017
  vivi_40200:
    set $P5010, $P5011
  fallback198:
    set $P5009, $P5010["%?OPTIONS"]
    unless_null $P5009, fallback201
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5009, $P5018
  fallback201:
    set $P5008, $P5009["vmlibs"]
    unless_null $P5008, fallback202
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5008, $P5019
  fallback202:
    set $P5038, $P5008
    unless $P5008 goto if39_end197 
.annotate 'line', 471
    find_dynamic_lex $P5026, "%*COMPILING"
    unless_null $P5026, fallback203
    nqp_get_sc_object $P5029, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["%COMPILING"]
    unless_null $P5027, fallback204
    nqp_get_sc_object $P5031, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5030, $P5031
    new $P5032, 'Hash'
    set $P5030["%COMPILING"], $P5032
    set $P5027, $P5032
  fallback204:
    unless_null $P5027, vivi_41205
    die "Contextual %*COMPILING not found"
    box $P5033, "Contextual %*COMPILING not found"
    set $P5027, $P5033
  vivi_41205:
    set $P5026, $P5027
  fallback203:
    set $P5025, $P5026["%?OPTIONS"]
    unless_null $P5025, fallback206
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5025, $P5034
  fallback206:
    set $P5024, $P5025["vmlibs"]
    unless_null $P5024, fallback207
    nqp_get_sc_object $P5035, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5024, $P5035
  fallback207:
    set $S5001, $P5024
    split $P5023, ",", $S5001
    set $P5020, $P5023
    iter $P5022, $P5023
  for_next208:
    unless $P5022, for_done210
    shift $P5037, $P5022
  for_redo209:
    .const 'Sub' $P5036 = 'cuid_379_1349901750.327' 
    capture_lex $P5036
    $P5020 = $P5036($P5037)
    goto for_next208
  for_done210:
    set $P5038, $P5020
  if39_end197:
.annotate 'line', 476
    nqp_get_sc_object $P5042, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5041, $P5042, "QAST"
    get_who $P5040, $P5041
    set $P5039, $P5040["VM"]
    unless_null $P5039, fallback211
    nqp_get_sc_object $P5043, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5039, $P5043
  fallback211:
    $P5044 = $P5039."new"($P101 :named("loadlibs"))
    .return ($P5044) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_379_1349901750.327") :anon :lex :outer("cuid_26_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 472
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 473
    find_lex $P5001, "@loadlibs"
    $P5002 = $P5001."push"(_lex_param_0)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "add_initializations" :subid("cuid_27_1349901750.327") :anon :lex :outer("cuid_33_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 480
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
.annotate 'line', 481
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5005, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Stmts"]
    unless_null $P5002, fallback212
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5006
  fallback212:
.annotate 'line', 482
    nqp_get_sc_object $P5010, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["VM"]
    unless_null $P5007, fallback213
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5007, $P5011
  fallback213:
    $P5012 = $P5007."new"("nqp_dynop_setup v" :named("pirop"))
.annotate 'line', 483
    nqp_get_sc_object $P5016, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["VM"]
    unless_null $P5013, fallback214
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5013, $P5017
  fallback214:
    $P5018 = $P5013."new"("nqp_bigint_setup v" :named("pirop"))
.annotate 'line', 484
    nqp_get_sc_object $P5022, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5021, $P5022, "QAST"
    get_who $P5020, $P5021
    set $P5019, $P5020["Op"]
    unless_null $P5019, fallback215
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5019, $P5023
  fallback215:
.annotate 'line', 486
    nqp_get_sc_object $P5027, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["VM"]
    unless_null $P5024, fallback216
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5024, $P5028
  fallback216:
    $P5029 = $P5024."new"("getinterp P" :named("pirop"))
.annotate 'line', 487
    nqp_get_sc_object $P5033, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["VM"]
    unless_null $P5030, fallback217
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5030, $P5034
  fallback217:
    nqp_get_sc_object $P5038, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["SVal"]
    unless_null $P5035, fallback218
    nqp_get_sc_object $P5039, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5035, $P5039
  fallback218:
    $P5040 = $P5035."new"("LexPad" :named("value"))
    $P5041 = $P5030."new"($P5040, "get_class Ps" :named("pirop"))
.annotate 'line', 488
    nqp_get_sc_object $P5045, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["VM"]
    unless_null $P5042, fallback219
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5042, $P5046
  fallback219:
    nqp_get_sc_object $P5050, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5049, $P5050, "QAST"
    get_who $P5048, $P5049
    set $P5047, $P5048["SVal"]
    unless_null $P5047, fallback220
    nqp_get_sc_object $P5051, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5047, $P5051
  fallback220:
    $P5052 = $P5047."new"("NQPLexPad" :named("value"))
    $P5053 = $P5042."new"($P5052, "get_class Ps" :named("pirop"))
    $P5054 = $P5019."new"($P5029, $P5041, $P5053, "callmethod" :named("op"), "hll_map" :named("name"))
    $P5055 = $P5002."new"($P5012, $P5018, $P5054)
    $P5056 = $P5001."add_load_dependency_task"($P5055 :named("deserialize_past"))
    .return ($P5056) 
.end
.HLL "nqp"
.namespace []
.sub "is_lexical" :subid("cuid_28_1349901750.327") :anon :lex :outer("cuid_33_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 494
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$name", _lex_param_1 
.annotate 'line', 495
    nqp_decontainerize $P5001, _lex_param_0
    $P5002 = $P5001."is_scope"(_lex_param_1, "lexical")
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "is_package" :subid("cuid_29_1349901750.327") :anon :lex :outer("cuid_33_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 500
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$name", _lex_param_1 
.annotate 'line', 501
    nqp_decontainerize $P5001, _lex_param_0
    $P5002 = $P5001."is_scope"(_lex_param_1, "package")
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "is_scope" :subid("cuid_30_1349901750.327") :anon :lex :outer("cuid_33_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 506
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .const 'Sub' $P5011 = 'cuid_380_1349901750.327' 
    capture_lex $P5011 
    .lex "$i", $P101 
    .lex "self", _lex_param_0 
    .lex "$name", _lex_param_1 
    .lex "$wanted_scope", _lex_param_2 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_221
    .lex "RETURN", $P102
    nqp_decontainerize $P5002, _lex_param_0
    nqp_get_sc_object $P5003, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 3
    repr_get_attr_obj $P5004, $P5002, $P5003, "@!BLOCKS"
    set $N5001, $P5004
    box $P5005, $N5001
    set $P101, $P5005
  while42_test223:
    set $N5002, $P101
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5009, $I5001
    set $P5008, $P5009
    unless $I5001 goto while42_done227 
  while42_redo225:
    .const 'Sub' $P5006 = 'cuid_380_1349901750.327' 
    capture_lex $P5006
    $P5007 = $P5006()
    set $P5008, $P5007
    goto while42_test223 
  while42_done227:
    box $P5010, 0
    goto lexotic_222
  lexotic_221:
    .get_results ($P5010)
  lexotic_222:
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_380_1349901750.327") :anon :lex :outer("cuid_30_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 508
    .lex "%sym", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 510
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 3
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback228
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5004, $P5010
  fallback228:
    find_lex $P5011, "$name"
    $P5012 = $P5004."symbol"($P5011)
    set $P101, $P5012
    set $N5004, $P101
    box $P5019, $N5004
    set $P5018, $P5019
    unless $N5004 goto if43_end230 
.annotate 'line', 511
    set $P5014, $P101["scope"]
    unless_null $P5014, fallback231
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5014, $P5015
  fallback231:
    set $S5001, $P5014
    find_lex $P5016, "$wanted_scope"
    set $S5002, $P5016
    iseq $I5002, $S5001, $S5002
    find_lex $P5013, "RETURN"
    $P5017 = $P5013($I5002)
    set $P5018, $P5017
  if43_end230:
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "known_sym" :subid("cuid_31_1349901750.327") :anon :lex :outer("cuid_33_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 519
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$known", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .lex "@name", _lex_param_2 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    box $P5002, 0
    set $P101, $P5002
    new $P5006, 'ExceptionHandler'
    set_label $P5006, catch_handler_45233
    $P5006.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5006
.annotate 'line', 521
.annotate 'line', 522
    nqp_decontainerize $P5003, _lex_param_0
    $P5004 = $P5003."find_sym"(_lex_param_2)
    box $P5005, 1
    set $P101, $P5005
    set $P5007, $P101
    pop_eh 
    goto skip_handler_44232
  catch_handler_45233:
    .get_results ($P5006) 
    set $I10001, 1
    set $P5006["handled"], $I10001
    nqp_get_sc_object $P10001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    finalize $P5006
    pop_upto_eh $P5006
    pop_eh 
    set $P5007, $P10001
    goto skip_handler_44232
  skip_handler_44232:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "find_sym" :subid("cuid_32_1349901750.327") :anon :lex :outer("cuid_33_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 531
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5024 = 'cuid_382_1349901750.327' 
    capture_lex $P5024 
    .const 'Sub' $P5024 = 'cuid_384_1349901750.327' 
    capture_lex $P5024 
    .const 'Sub' $P5024 = 'cuid_385_1349901750.327' 
    capture_lex $P5024 
    .lex "$result", $P101 
    .lex "self", _lex_param_0 
    .lex "@name", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_234
    .lex "RETURN", $P102
    set $N5001, _lex_param_1
    box $P5004, $N5001
    set $P5003, $P5004
    if $N5001 goto unless46_end237 
.annotate 'line', 533
    box $P5002, "Cannot look up empty name"
    die $P5002
    set $P5003, $P5002
  unless46_end237:
    set $N5002, _lex_param_1
    set $N5003, 1
    iseq $I5001, $N5002, $N5003
    box $P5008, $I5001
    set $P5007, $P5008
    unless $I5001 goto if47_end239 
    .const 'Sub' $P5005 = 'cuid_382_1349901750.327' 
    capture_lex $P5005
    $P5006 = $P5005()
    set $P5007, $P5006
  if47_end239:
    find_dynamic_lex $P5009, "$*GLOBALish"
    unless_null $P5009, fallback252
    nqp_get_sc_object $P5012, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5011, $P5012
    set $P5010, $P5011["$GLOBALish"]
    unless_null $P5010, fallback253
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5010, $P5013
  fallback253:
    unless_null $P5010, vivi_51254
    die "Contextual $*GLOBALish not found"
    box $P5014, "Contextual $*GLOBALish not found"
    set $P5010, $P5014
  vivi_51254:
    set $P5009, $P5010
  fallback252:
    set $P101, $P5009
    set $N5004, _lex_param_1
    set $N5005, 2
    isge $I5002, $N5004, $N5005
    box $P5018, $I5002
    set $P5017, $P5018
    unless $I5002 goto if52_end256 
    .const 'Sub' $P5015 = 'cuid_384_1349901750.327' 
    capture_lex $P5015
    $P5016 = $P5015()
    set $P5017, $P5016
  if52_end256:
    set $P5019, _lex_param_1
    iter $P5021, _lex_param_1
  for_next272:
    unless $P5021, for_done274
    shift $P5023, $P5021
  for_redo273:
    .const 'Sub' $P5022 = 'cuid_385_1349901750.327' 
    capture_lex $P5022
    $P5019 = $P5022($P5023)
    goto for_next272
  for_done274:
    goto lexotic_235
  lexotic_234:
    .get_results ($P101)
  lexotic_235:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_382_1349901750.327") :anon :lex :outer("cuid_32_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 537
    .const 'Sub' $P5015 = 'cuid_381_1349901750.327' 
    capture_lex $P5015 
    .lex "$final_name", $P101 
    .lex "$i", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
    find_lex $P5004, "@name"
    set $P5003, $P5004[0]
    unless_null $P5003, fallback240
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5003, $P5005
  fallback240:
    set $P101, $P5003
    find_lex $P5007, "self"
    nqp_decontainerize $P5006, $P5007
    nqp_get_sc_object $P5008, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 3
    repr_get_attr_obj $P5009, $P5006, $P5008, "@!BLOCKS"
    set $N5001, $P5009
    box $P5010, $N5001
    set $P102, $P5010
  while48_test241:
    set $N5002, $P102
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5014, $I5001
    set $P5013, $P5014
    unless $I5001 goto while48_done245 
  while48_redo243:
    .const 'Sub' $P5011 = 'cuid_381_1349901750.327' 
    capture_lex $P5011
    $P5012 = $P5011()
    set $P5013, $P5012
    goto while48_test241 
  while48_done245:
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_381_1349901750.327") :anon :lex :outer("cuid_382_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 540
    .lex "%sym", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 542
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 3
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback246
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5004, $P5010
  fallback246:
    find_lex $P5011, "$final_name"
    $P5012 = $P5004."symbol"($P5011)
    set $P101, $P5012
    set $N5004, $P101
    box $P5021, $N5004
    set $P5020, $P5021
    unless $N5004 goto if49_end248 
.annotate 'line', 543
    exists $I5002, $P101["value"]
    unless $I5002 goto if50_else249 
.annotate 'line', 544
    set $P5014, $P101["value"]
    unless_null $P5014, fallback251
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5014, $P5015
  fallback251:
    find_lex $P5013, "RETURN"
    $P5016 = $P5013($P5014)
    set $P5019, $P5016
    goto if50_end250
  if50_else249:
.annotate 'line', 547
    find_lex $P5017, "$final_name"
    set $S5002, $P5017
    concat $S5001, "No compile-time value for ", $S5002
    box $P5018, $S5001
    die $P5018
    set $P5019, $P5018
  if50_end250:
    set $P5020, $P5019
  if49_end248:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_384_1349901750.327") :anon :lex :outer("cuid_32_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 558
    .const 'Sub' $P5015 = 'cuid_383_1349901750.327' 
    capture_lex $P5015 
    .lex "$first", $P101 
    .lex "$i", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
    find_lex $P5004, "@name"
    set $P5003, $P5004[0]
    unless_null $P5003, fallback257
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5003, $P5005
  fallback257:
    set $P101, $P5003
    find_lex $P5007, "self"
    nqp_decontainerize $P5006, $P5007
    nqp_get_sc_object $P5008, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 3
    repr_get_attr_obj $P5009, $P5006, $P5008, "@!BLOCKS"
    set $N5001, $P5009
    box $P5010, $N5001
    set $P102, $P5010
  while53_test258:
    set $N5002, $P102
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5014, $I5001
    set $P5013, $P5014
    unless $I5001 goto while53_done262 
  while53_redo260:
    .const 'Sub' $P5011 = 'cuid_383_1349901750.327' 
    capture_lex $P5011
    $P5012 = $P5011()
    set $P5013, $P5012
    goto while53_test258 
  while53_done262:
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_383_1349901750.327") :anon :lex :outer("cuid_384_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 561
    .lex "%sym", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 563
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 3
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback263
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5004, $P5010
  fallback263:
    find_lex $P5011, "$first"
    $P5012 = $P5004."symbol"($P5011)
    set $P101, $P5012
    set $N5004, $P101
    box $P5022, $N5004
    set $P5021, $P5022
    unless $N5004 goto if54_end265 
.annotate 'line', 564
    exists $I5002, $P101["value"]
    unless $I5002 goto if55_else266 
.annotate 'line', 565
    set $P5013, $P101["value"]
    unless_null $P5013, fallback268
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5013, $P5014
  fallback268:
    store_lex "$result", $P5013
.annotate 'line', 567
    find_lex $P5015, "@name"
    $P5016 = $P5015."shift"()
    box $P5017, 0
    store_lex "$i", $P5017
    set $P5020, $P5017
    goto if55_end267
  if55_else266:
.annotate 'line', 570
    find_lex $P5018, "$first"
    set $S5002, $P5018
    concat $S5001, "No compile-time value for ", $S5002
    box $P5019, $S5001
    die $P5019
    set $P5020, $P5019
  if55_end267:
    set $P5021, $P5020
  if54_end265:
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_385_1349901750.327") :anon :lex :outer("cuid_32_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 578
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$result"
    get_who $P5001, $P5002
    set $S5001, _lex_param_0
    exists $I5001, $P5001[$S5001]
    unless $I5001 goto if56_else269 
.annotate 'line', 579
    find_lex $P5005, "$result"
    get_who $P5004, $P5005
    set $S5002, _lex_param_0
    set $P5003, $P5004[$S5002]
    unless_null $P5003, fallback271
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5003, $P5006
  fallback271:
    store_lex "$result", $P5003
    set $P5009, $P5003
    goto if56_end270
  if56_else269:
.annotate 'line', 582
    find_lex $P5007, "@name"
    join $S5004, "::", $P5007
    concat $S5003, "Could not locate compile-time value for symbol ", $S5004
    box $P5008, $S5003
    die $P5008
    set $P5009, $P5008
  if56_end270:
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_223_1349901750.327") :anon :lex :outer("cuid_1_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 593
    .const 'Sub' $P5273 = 'cuid_34_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_35_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_36_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_37_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_38_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_39_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_41_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_43_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_44_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_45_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_47_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_48_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_49_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_50_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_51_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_52_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_53_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_54_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_55_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_56_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_57_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_58_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_59_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_60_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_61_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_62_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_63_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_65_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_66_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_67_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_68_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_69_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_70_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_71_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_72_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_73_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_74_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_75_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_76_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_77_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_78_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_79_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_80_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_81_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_82_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_83_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_84_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_85_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_86_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_87_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_88_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_91_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_92_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_93_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_94_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_95_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_96_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_97_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_98_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_99_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_100_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_101_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_102_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_103_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_104_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_105_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_106_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_107_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_108_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_109_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_110_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_111_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_112_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_113_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_114_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_115_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_116_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_117_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_118_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_119_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_120_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_121_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_122_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_123_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_124_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_125_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_126_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_128_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_129_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_130_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_131_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_132_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_133_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_134_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_135_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_136_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_137_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_138_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_139_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_140_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_141_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_142_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_143_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_144_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_145_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_146_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_147_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_148_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_149_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_150_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_151_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_152_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_153_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_154_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_155_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_156_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_157_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_158_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_159_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_160_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_161_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_162_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_163_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_164_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_165_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_166_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_167_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_168_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_169_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_170_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_171_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_172_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_173_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_174_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_175_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_176_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_177_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_178_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_179_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_180_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_181_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_182_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_183_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_184_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_185_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_186_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_187_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_188_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_189_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_190_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_191_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_192_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_193_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_194_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_195_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_196_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_197_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_198_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_199_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_200_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_201_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_202_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_203_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_204_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_205_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_206_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_207_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_208_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_209_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_210_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_211_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_212_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_213_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_214_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_215_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_216_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_217_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_218_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_219_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_220_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_221_1349901750.327' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_222_1349901750.327' 
    capture_lex $P5273 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
.annotate 'line', 1241
.annotate 'line', 1242
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5003, $P5004, "NQP"
    get_who $P5002, $P5003
    set $P5001, $P5002["Grammar"]
    unless_null $P5001, fallback275
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5005
  fallback275:
    $P5006 = $P5001."O"(":prec<y=>, :assoc<unary>", "%methodop")
.annotate 'line', 1243
    nqp_get_sc_object $P5010, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5009, $P5010, "NQP"
    get_who $P5008, $P5009
    set $P5007, $P5008["Grammar"]
    unless_null $P5007, fallback276
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5007, $P5011
  fallback276:
    $P5012 = $P5007."O"(":prec<x=>, :assoc<unary>", "%autoincrement")
.annotate 'line', 1244
    nqp_get_sc_object $P5016, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5015, $P5016, "NQP"
    get_who $P5014, $P5015
    set $P5013, $P5014["Grammar"]
    unless_null $P5013, fallback277
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5013, $P5017
  fallback277:
    $P5018 = $P5013."O"(":prec<w=>, :assoc<left>", "%exponentiation")
.annotate 'line', 1245
    nqp_get_sc_object $P5022, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5021, $P5022, "NQP"
    get_who $P5020, $P5021
    set $P5019, $P5020["Grammar"]
    unless_null $P5019, fallback278
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5019, $P5023
  fallback278:
    $P5024 = $P5019."O"(":prec<v=>, :assoc<unary>", "%symbolic_unary")
.annotate 'line', 1246
    nqp_get_sc_object $P5028, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5027, $P5028, "NQP"
    get_who $P5026, $P5027
    set $P5025, $P5026["Grammar"]
    unless_null $P5025, fallback279
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5025, $P5029
  fallback279:
    $P5030 = $P5025."O"(":prec<u=>, :assoc<left>", "%multiplicative")
.annotate 'line', 1247
    nqp_get_sc_object $P5034, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5033, $P5034, "NQP"
    get_who $P5032, $P5033
    set $P5031, $P5032["Grammar"]
    unless_null $P5031, fallback280
    nqp_get_sc_object $P5035, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5031, $P5035
  fallback280:
    $P5036 = $P5031."O"(":prec<t=>, :assoc<left>", "%additive")
.annotate 'line', 1248
    nqp_get_sc_object $P5040, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5039, $P5040, "NQP"
    get_who $P5038, $P5039
    set $P5037, $P5038["Grammar"]
    unless_null $P5037, fallback281
    nqp_get_sc_object $P5041, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5037, $P5041
  fallback281:
    $P5042 = $P5037."O"(":prec<r=>, :assoc<left>", "%concatenation")
.annotate 'line', 1249
    nqp_get_sc_object $P5046, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5045, $P5046, "NQP"
    get_who $P5044, $P5045
    set $P5043, $P5044["Grammar"]
    unless_null $P5043, fallback282
    nqp_get_sc_object $P5047, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5043, $P5047
  fallback282:
    $P5048 = $P5043."O"(":prec<m=>, :assoc<left>", "%relational")
.annotate 'line', 1250
    nqp_get_sc_object $P5052, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5051, $P5052, "NQP"
    get_who $P5050, $P5051
    set $P5049, $P5050["Grammar"]
    unless_null $P5049, fallback283
    nqp_get_sc_object $P5053, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5049, $P5053
  fallback283:
    $P5054 = $P5049."O"(":prec<l=>, :assoc<left>", "%tight_and")
.annotate 'line', 1251
    nqp_get_sc_object $P5058, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5057, $P5058, "NQP"
    get_who $P5056, $P5057
    set $P5055, $P5056["Grammar"]
    unless_null $P5055, fallback284
    nqp_get_sc_object $P5059, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5055, $P5059
  fallback284:
    $P5060 = $P5055."O"(":prec<k=>, :assoc<left>", "%tight_or")
.annotate 'line', 1252
    nqp_get_sc_object $P5064, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5063, $P5064, "NQP"
    get_who $P5062, $P5063
    set $P5061, $P5062["Grammar"]
    unless_null $P5061, fallback285
    nqp_get_sc_object $P5065, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5061, $P5065
  fallback285:
    $P5066 = $P5061."O"(":prec<j=>, :assoc<right>", "%conditional")
.annotate 'line', 1253
    nqp_get_sc_object $P5070, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5069, $P5070, "NQP"
    get_who $P5068, $P5069
    set $P5067, $P5068["Grammar"]
    unless_null $P5067, fallback286
    nqp_get_sc_object $P5071, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5067, $P5071
  fallback286:
    $P5072 = $P5067."O"(":prec<i=>, :assoc<right>", "%assignment")
.annotate 'line', 1254
    nqp_get_sc_object $P5076, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5075, $P5076, "NQP"
    get_who $P5074, $P5075
    set $P5073, $P5074["Grammar"]
    unless_null $P5073, fallback287
    nqp_get_sc_object $P5077, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5073, $P5077
  fallback287:
    $P5078 = $P5073."O"(":prec<g=>, :assoc<list>, :nextterm<nulltermish>", "%comma")
.annotate 'line', 1255
    nqp_get_sc_object $P5082, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5081, $P5082, "NQP"
    get_who $P5080, $P5081
    set $P5079, $P5080["Grammar"]
    unless_null $P5079, fallback288
    nqp_get_sc_object $P5083, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5079, $P5083
  fallback288:
    $P5084 = $P5079."O"(":prec<f=>, :assoc<list>", "%list_infix")
.annotate 'line', 1256
    nqp_get_sc_object $P5088, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5087, $P5088, "NQP"
    get_who $P5086, $P5087
    set $P5085, $P5086["Grammar"]
    unless_null $P5085, fallback289
    nqp_get_sc_object $P5089, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5085, $P5089
  fallback289:
    $P5090 = $P5085."O"(":prec<e=>, :assoc<unary>", "%list_prefix")
.annotate 'line', 593
    .const 'Sub' $P5091 = 'cuid_34_1349901750.327' 
    capture_lex $P5091
    .const 'Sub' $P5092 = 'cuid_35_1349901750.327' 
    capture_lex $P5092
    .const 'Sub' $P5093 = 'cuid_36_1349901750.327' 
    capture_lex $P5093
    .const 'Sub' $P5094 = 'cuid_37_1349901750.327' 
    capture_lex $P5094
    .const 'Sub' $P5095 = 'cuid_38_1349901750.327' 
    capture_lex $P5095
    .const 'Sub' $P5096 = 'cuid_39_1349901750.327' 
    capture_lex $P5096
    .const 'Sub' $P5097 = 'cuid_41_1349901750.327' 
    capture_lex $P5097
    .const 'Sub' $P5098 = 'cuid_43_1349901750.327' 
    capture_lex $P5098
    .const 'Sub' $P5099 = 'cuid_44_1349901750.327' 
    capture_lex $P5099
    .const 'Sub' $P5100 = 'cuid_45_1349901750.327' 
    capture_lex $P5100
    .const 'Sub' $P5101 = 'cuid_47_1349901750.327' 
    capture_lex $P5101
    .const 'Sub' $P5102 = 'cuid_48_1349901750.327' 
    capture_lex $P5102
    .const 'Sub' $P5103 = 'cuid_49_1349901750.327' 
    capture_lex $P5103
    .const 'Sub' $P5104 = 'cuid_50_1349901750.327' 
    capture_lex $P5104
    .const 'Sub' $P5105 = 'cuid_51_1349901750.327' 
    capture_lex $P5105
    .const 'Sub' $P5106 = 'cuid_52_1349901750.327' 
    capture_lex $P5106
    .const 'Sub' $P5107 = 'cuid_53_1349901750.327' 
    capture_lex $P5107
    .const 'Sub' $P5108 = 'cuid_54_1349901750.327' 
    capture_lex $P5108
    .const 'Sub' $P5109 = 'cuid_55_1349901750.327' 
    capture_lex $P5109
    .const 'Sub' $P5110 = 'cuid_56_1349901750.327' 
    capture_lex $P5110
    .const 'Sub' $P5111 = 'cuid_57_1349901750.327' 
    capture_lex $P5111
    .const 'Sub' $P5112 = 'cuid_58_1349901750.327' 
    capture_lex $P5112
    .const 'Sub' $P5113 = 'cuid_59_1349901750.327' 
    capture_lex $P5113
    .const 'Sub' $P5114 = 'cuid_60_1349901750.327' 
    capture_lex $P5114
    .const 'Sub' $P5115 = 'cuid_61_1349901750.327' 
    capture_lex $P5115
    .const 'Sub' $P5116 = 'cuid_62_1349901750.327' 
    capture_lex $P5116
    .const 'Sub' $P5117 = 'cuid_63_1349901750.327' 
    capture_lex $P5117
    .const 'Sub' $P5118 = 'cuid_65_1349901750.327' 
    capture_lex $P5118
    .const 'Sub' $P5119 = 'cuid_66_1349901750.327' 
    capture_lex $P5119
    .const 'Sub' $P5120 = 'cuid_67_1349901750.327' 
    capture_lex $P5120
    .const 'Sub' $P5121 = 'cuid_68_1349901750.327' 
    capture_lex $P5121
    .const 'Sub' $P5122 = 'cuid_69_1349901750.327' 
    capture_lex $P5122
    .const 'Sub' $P5123 = 'cuid_70_1349901750.327' 
    capture_lex $P5123
    .const 'Sub' $P5124 = 'cuid_71_1349901750.327' 
    capture_lex $P5124
    .const 'Sub' $P5125 = 'cuid_72_1349901750.327' 
    capture_lex $P5125
    .const 'Sub' $P5126 = 'cuid_73_1349901750.327' 
    capture_lex $P5126
    .const 'Sub' $P5127 = 'cuid_74_1349901750.327' 
    capture_lex $P5127
    .const 'Sub' $P5128 = 'cuid_75_1349901750.327' 
    capture_lex $P5128
    .const 'Sub' $P5129 = 'cuid_76_1349901750.327' 
    capture_lex $P5129
    .const 'Sub' $P5130 = 'cuid_77_1349901750.327' 
    capture_lex $P5130
    .const 'Sub' $P5131 = 'cuid_78_1349901750.327' 
    capture_lex $P5131
    .const 'Sub' $P5132 = 'cuid_79_1349901750.327' 
    capture_lex $P5132
    .const 'Sub' $P5133 = 'cuid_80_1349901750.327' 
    capture_lex $P5133
    .const 'Sub' $P5134 = 'cuid_81_1349901750.327' 
    capture_lex $P5134
    .const 'Sub' $P5135 = 'cuid_82_1349901750.327' 
    capture_lex $P5135
    .const 'Sub' $P5136 = 'cuid_83_1349901750.327' 
    capture_lex $P5136
    .const 'Sub' $P5137 = 'cuid_84_1349901750.327' 
    capture_lex $P5137
    .const 'Sub' $P5138 = 'cuid_85_1349901750.327' 
    capture_lex $P5138
    .const 'Sub' $P5139 = 'cuid_86_1349901750.327' 
    capture_lex $P5139
    .const 'Sub' $P5140 = 'cuid_87_1349901750.327' 
    capture_lex $P5140
    .const 'Sub' $P5141 = 'cuid_88_1349901750.327' 
    capture_lex $P5141
    .const 'Sub' $P5142 = 'cuid_91_1349901750.327' 
    capture_lex $P5142
    .const 'Sub' $P5143 = 'cuid_92_1349901750.327' 
    capture_lex $P5143
    .const 'Sub' $P5144 = 'cuid_93_1349901750.327' 
    capture_lex $P5144
    .const 'Sub' $P5145 = 'cuid_94_1349901750.327' 
    capture_lex $P5145
    .const 'Sub' $P5146 = 'cuid_95_1349901750.327' 
    capture_lex $P5146
    .const 'Sub' $P5147 = 'cuid_96_1349901750.327' 
    capture_lex $P5147
    .const 'Sub' $P5148 = 'cuid_97_1349901750.327' 
    capture_lex $P5148
    .const 'Sub' $P5149 = 'cuid_98_1349901750.327' 
    capture_lex $P5149
    .const 'Sub' $P5150 = 'cuid_99_1349901750.327' 
    capture_lex $P5150
    .const 'Sub' $P5151 = 'cuid_100_1349901750.327' 
    capture_lex $P5151
    .const 'Sub' $P5152 = 'cuid_101_1349901750.327' 
    capture_lex $P5152
    .const 'Sub' $P5153 = 'cuid_102_1349901750.327' 
    capture_lex $P5153
    .const 'Sub' $P5154 = 'cuid_103_1349901750.327' 
    capture_lex $P5154
    .const 'Sub' $P5155 = 'cuid_104_1349901750.327' 
    capture_lex $P5155
    .const 'Sub' $P5156 = 'cuid_105_1349901750.327' 
    capture_lex $P5156
    .const 'Sub' $P5157 = 'cuid_106_1349901750.327' 
    capture_lex $P5157
    .const 'Sub' $P5158 = 'cuid_107_1349901750.327' 
    capture_lex $P5158
    .const 'Sub' $P5159 = 'cuid_108_1349901750.327' 
    capture_lex $P5159
    .const 'Sub' $P5160 = 'cuid_109_1349901750.327' 
    capture_lex $P5160
    .const 'Sub' $P5161 = 'cuid_110_1349901750.327' 
    capture_lex $P5161
    .const 'Sub' $P5162 = 'cuid_111_1349901750.327' 
    capture_lex $P5162
    .const 'Sub' $P5163 = 'cuid_112_1349901750.327' 
    capture_lex $P5163
    .const 'Sub' $P5164 = 'cuid_113_1349901750.327' 
    capture_lex $P5164
    .const 'Sub' $P5165 = 'cuid_114_1349901750.327' 
    capture_lex $P5165
    .const 'Sub' $P5166 = 'cuid_115_1349901750.327' 
    capture_lex $P5166
    .const 'Sub' $P5167 = 'cuid_116_1349901750.327' 
    capture_lex $P5167
    .const 'Sub' $P5168 = 'cuid_117_1349901750.327' 
    capture_lex $P5168
    .const 'Sub' $P5169 = 'cuid_118_1349901750.327' 
    capture_lex $P5169
    .const 'Sub' $P5170 = 'cuid_119_1349901750.327' 
    capture_lex $P5170
    .const 'Sub' $P5171 = 'cuid_120_1349901750.327' 
    capture_lex $P5171
    .const 'Sub' $P5172 = 'cuid_121_1349901750.327' 
    capture_lex $P5172
    .const 'Sub' $P5173 = 'cuid_122_1349901750.327' 
    capture_lex $P5173
    .const 'Sub' $P5174 = 'cuid_123_1349901750.327' 
    capture_lex $P5174
    .const 'Sub' $P5175 = 'cuid_124_1349901750.327' 
    capture_lex $P5175
    .const 'Sub' $P5176 = 'cuid_125_1349901750.327' 
    capture_lex $P5176
    .const 'Sub' $P5177 = 'cuid_126_1349901750.327' 
    capture_lex $P5177
    .const 'Sub' $P5178 = 'cuid_128_1349901750.327' 
    capture_lex $P5178
    .const 'Sub' $P5179 = 'cuid_129_1349901750.327' 
    capture_lex $P5179
    .const 'Sub' $P5180 = 'cuid_130_1349901750.327' 
    capture_lex $P5180
    .const 'Sub' $P5181 = 'cuid_131_1349901750.327' 
    capture_lex $P5181
    .const 'Sub' $P5182 = 'cuid_132_1349901750.327' 
    capture_lex $P5182
    .const 'Sub' $P5183 = 'cuid_133_1349901750.327' 
    capture_lex $P5183
    .const 'Sub' $P5184 = 'cuid_134_1349901750.327' 
    capture_lex $P5184
    .const 'Sub' $P5185 = 'cuid_135_1349901750.327' 
    capture_lex $P5185
    .const 'Sub' $P5186 = 'cuid_136_1349901750.327' 
    capture_lex $P5186
    .const 'Sub' $P5187 = 'cuid_137_1349901750.327' 
    capture_lex $P5187
    .const 'Sub' $P5188 = 'cuid_138_1349901750.327' 
    capture_lex $P5188
    .const 'Sub' $P5189 = 'cuid_139_1349901750.327' 
    capture_lex $P5189
    .const 'Sub' $P5190 = 'cuid_140_1349901750.327' 
    capture_lex $P5190
    .const 'Sub' $P5191 = 'cuid_141_1349901750.327' 
    capture_lex $P5191
    .const 'Sub' $P5192 = 'cuid_142_1349901750.327' 
    capture_lex $P5192
    .const 'Sub' $P5193 = 'cuid_143_1349901750.327' 
    capture_lex $P5193
    .const 'Sub' $P5194 = 'cuid_144_1349901750.327' 
    capture_lex $P5194
    .const 'Sub' $P5195 = 'cuid_145_1349901750.327' 
    capture_lex $P5195
    .const 'Sub' $P5196 = 'cuid_146_1349901750.327' 
    capture_lex $P5196
    .const 'Sub' $P5197 = 'cuid_147_1349901750.327' 
    capture_lex $P5197
    .const 'Sub' $P5198 = 'cuid_148_1349901750.327' 
    capture_lex $P5198
    .const 'Sub' $P5199 = 'cuid_149_1349901750.327' 
    capture_lex $P5199
    .const 'Sub' $P5200 = 'cuid_150_1349901750.327' 
    capture_lex $P5200
    .const 'Sub' $P5201 = 'cuid_151_1349901750.327' 
    capture_lex $P5201
    .const 'Sub' $P5202 = 'cuid_152_1349901750.327' 
    capture_lex $P5202
    .const 'Sub' $P5203 = 'cuid_153_1349901750.327' 
    capture_lex $P5203
    .const 'Sub' $P5204 = 'cuid_154_1349901750.327' 
    capture_lex $P5204
    .const 'Sub' $P5205 = 'cuid_155_1349901750.327' 
    capture_lex $P5205
    .const 'Sub' $P5206 = 'cuid_156_1349901750.327' 
    capture_lex $P5206
    .const 'Sub' $P5207 = 'cuid_157_1349901750.327' 
    capture_lex $P5207
    .const 'Sub' $P5208 = 'cuid_158_1349901750.327' 
    capture_lex $P5208
    .const 'Sub' $P5209 = 'cuid_159_1349901750.327' 
    capture_lex $P5209
    .const 'Sub' $P5210 = 'cuid_160_1349901750.327' 
    capture_lex $P5210
    .const 'Sub' $P5211 = 'cuid_161_1349901750.327' 
    capture_lex $P5211
    .const 'Sub' $P5212 = 'cuid_162_1349901750.327' 
    capture_lex $P5212
    .const 'Sub' $P5213 = 'cuid_163_1349901750.327' 
    capture_lex $P5213
    .const 'Sub' $P5214 = 'cuid_164_1349901750.327' 
    capture_lex $P5214
    .const 'Sub' $P5215 = 'cuid_165_1349901750.327' 
    capture_lex $P5215
    .const 'Sub' $P5216 = 'cuid_166_1349901750.327' 
    capture_lex $P5216
    .const 'Sub' $P5217 = 'cuid_167_1349901750.327' 
    capture_lex $P5217
    .const 'Sub' $P5218 = 'cuid_168_1349901750.327' 
    capture_lex $P5218
    .const 'Sub' $P5219 = 'cuid_169_1349901750.327' 
    capture_lex $P5219
    .const 'Sub' $P5220 = 'cuid_170_1349901750.327' 
    capture_lex $P5220
    .const 'Sub' $P5221 = 'cuid_171_1349901750.327' 
    capture_lex $P5221
    .const 'Sub' $P5222 = 'cuid_172_1349901750.327' 
    capture_lex $P5222
    .const 'Sub' $P5223 = 'cuid_173_1349901750.327' 
    capture_lex $P5223
    .const 'Sub' $P5224 = 'cuid_174_1349901750.327' 
    capture_lex $P5224
    .const 'Sub' $P5225 = 'cuid_175_1349901750.327' 
    capture_lex $P5225
    .const 'Sub' $P5226 = 'cuid_176_1349901750.327' 
    capture_lex $P5226
    .const 'Sub' $P5227 = 'cuid_177_1349901750.327' 
    capture_lex $P5227
    .const 'Sub' $P5228 = 'cuid_178_1349901750.327' 
    capture_lex $P5228
    .const 'Sub' $P5229 = 'cuid_179_1349901750.327' 
    capture_lex $P5229
    .const 'Sub' $P5230 = 'cuid_180_1349901750.327' 
    capture_lex $P5230
    .const 'Sub' $P5231 = 'cuid_181_1349901750.327' 
    capture_lex $P5231
    .const 'Sub' $P5232 = 'cuid_182_1349901750.327' 
    capture_lex $P5232
    .const 'Sub' $P5233 = 'cuid_183_1349901750.327' 
    capture_lex $P5233
    .const 'Sub' $P5234 = 'cuid_184_1349901750.327' 
    capture_lex $P5234
    .const 'Sub' $P5235 = 'cuid_185_1349901750.327' 
    capture_lex $P5235
    .const 'Sub' $P5236 = 'cuid_186_1349901750.327' 
    capture_lex $P5236
    .const 'Sub' $P5237 = 'cuid_187_1349901750.327' 
    capture_lex $P5237
    .const 'Sub' $P5238 = 'cuid_188_1349901750.327' 
    capture_lex $P5238
    .const 'Sub' $P5239 = 'cuid_189_1349901750.327' 
    capture_lex $P5239
    .const 'Sub' $P5240 = 'cuid_190_1349901750.327' 
    capture_lex $P5240
    .const 'Sub' $P5241 = 'cuid_191_1349901750.327' 
    capture_lex $P5241
    .const 'Sub' $P5242 = 'cuid_192_1349901750.327' 
    capture_lex $P5242
    .const 'Sub' $P5243 = 'cuid_193_1349901750.327' 
    capture_lex $P5243
    .const 'Sub' $P5244 = 'cuid_194_1349901750.327' 
    capture_lex $P5244
    .const 'Sub' $P5245 = 'cuid_195_1349901750.327' 
    capture_lex $P5245
    .const 'Sub' $P5246 = 'cuid_196_1349901750.327' 
    capture_lex $P5246
    .const 'Sub' $P5247 = 'cuid_197_1349901750.327' 
    capture_lex $P5247
    .const 'Sub' $P5248 = 'cuid_198_1349901750.327' 
    capture_lex $P5248
    .const 'Sub' $P5249 = 'cuid_199_1349901750.327' 
    capture_lex $P5249
    .const 'Sub' $P5250 = 'cuid_200_1349901750.327' 
    capture_lex $P5250
    .const 'Sub' $P5251 = 'cuid_201_1349901750.327' 
    capture_lex $P5251
    .const 'Sub' $P5252 = 'cuid_202_1349901750.327' 
    capture_lex $P5252
    .const 'Sub' $P5253 = 'cuid_203_1349901750.327' 
    capture_lex $P5253
    .const 'Sub' $P5254 = 'cuid_204_1349901750.327' 
    capture_lex $P5254
    .const 'Sub' $P5255 = 'cuid_205_1349901750.327' 
    capture_lex $P5255
    .const 'Sub' $P5256 = 'cuid_206_1349901750.327' 
    capture_lex $P5256
    .const 'Sub' $P5257 = 'cuid_207_1349901750.327' 
    capture_lex $P5257
    .const 'Sub' $P5258 = 'cuid_208_1349901750.327' 
    capture_lex $P5258
    .const 'Sub' $P5259 = 'cuid_209_1349901750.327' 
    capture_lex $P5259
    .const 'Sub' $P5260 = 'cuid_210_1349901750.327' 
    capture_lex $P5260
    .const 'Sub' $P5261 = 'cuid_211_1349901750.327' 
    capture_lex $P5261
    .const 'Sub' $P5262 = 'cuid_212_1349901750.327' 
    capture_lex $P5262
    .const 'Sub' $P5263 = 'cuid_213_1349901750.327' 
    capture_lex $P5263
    .const 'Sub' $P5264 = 'cuid_214_1349901750.327' 
    capture_lex $P5264
    .const 'Sub' $P5265 = 'cuid_215_1349901750.327' 
    capture_lex $P5265
    .const 'Sub' $P5266 = 'cuid_216_1349901750.327' 
    capture_lex $P5266
    .const 'Sub' $P5267 = 'cuid_217_1349901750.327' 
    capture_lex $P5267
    .const 'Sub' $P5268 = 'cuid_218_1349901750.327' 
    capture_lex $P5268
    .const 'Sub' $P5269 = 'cuid_219_1349901750.327' 
    capture_lex $P5269
    .const 'Sub' $P5270 = 'cuid_220_1349901750.327' 
    capture_lex $P5270
    .const 'Sub' $P5271 = 'cuid_221_1349901750.327' 
    capture_lex $P5271
    .const 'Sub' $P5272 = 'cuid_222_1349901750.327' 
    capture_lex $P5272
    .return ($P5272) 
.end
.HLL "nqp"
.namespace []
.sub "TOP" :subid("cuid_34_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 594
    .param pmc _lex_param_0 
    .lex "%*LANG", $P101 
    .lex "%*HOW", $P102 
    .lex "$file", $P103 
    .lex "$source_id", $P104 
    .lex "$*W", $P105 
    .lex "$*SCOPE", $P106 
    .lex "$*MULTINESS", $P107 
    .lex "$*PKGDECL", $P108 
    .lex "$*INVOCANT_OK", $P109 
    .lex "$*RETURN_USED", $P110 
    .lex "$*CONTROL_USED", $P111 
    .lex "%*HANDLERS", $P112 
    .lex "self", _lex_param_0 
    new $P5001, 'Hash'
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P104, $P5004
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P105, $P5005
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P106, $P5006
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P107, $P5007
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P108, $P5008
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P109, $P5009
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P110, $P5010
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P111, $P5011
    new $P5012, 'Hash'
    set $P112, $P5012
    unless_null $P101, fallback290
    nqp_get_sc_object $P5015, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5014, $P5015
    set $P5013, $P5014["%LANG"]
    unless_null $P5013, fallback291
    nqp_get_sc_object $P5017, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5016, $P5017
    new $P5018, 'Hash'
    set $P5016["%LANG"], $P5018
    set $P5013, $P5018
  fallback291:
    unless_null $P5013, vivi_57292
    die "Contextual %*LANG not found"
    box $P5019, "Contextual %*LANG not found"
    set $P5013, $P5019
  vivi_57292:
    set $P101, $P5013
  fallback290:
    unless_null $P101, fallback293
    nqp_get_sc_object $P5022, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["%LANG"]
    unless_null $P5020, fallback294
    nqp_get_sc_object $P5024, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5023, $P5024
    new $P5025, 'Hash'
    set $P5023["%LANG"], $P5025
    set $P5020, $P5025
  fallback294:
    unless_null $P5020, vivi_58295
    die "Contextual %*LANG not found"
    box $P5026, "Contextual %*LANG not found"
    set $P5020, $P5026
  vivi_58295:
    set $P101, $P5020
  fallback293:
    nqp_get_sc_object $P5030, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5029, $P5030, "NQP"
    get_who $P5028, $P5029
    set $P5027, $P5028["Regex"]
    unless_null $P5027, fallback296
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5027, $P5031
  fallback296:
    set $P101["Regex"], $P5027
    unless_null $P101, fallback297
    nqp_get_sc_object $P5034, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["%LANG"]
    unless_null $P5032, fallback298
    nqp_get_sc_object $P5036, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5035, $P5036
    new $P5037, 'Hash'
    set $P5035["%LANG"], $P5037
    set $P5032, $P5037
  fallback298:
    unless_null $P5032, vivi_59299
    die "Contextual %*LANG not found"
    box $P5038, "Contextual %*LANG not found"
    set $P5032, $P5038
  vivi_59299:
    set $P101, $P5032
  fallback297:
    nqp_get_sc_object $P5042, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5041, $P5042, "NQP"
    get_who $P5040, $P5041
    set $P5039, $P5040["RegexActions"]
    unless_null $P5039, fallback300
    nqp_get_sc_object $P5043, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5039, $P5043
  fallback300:
    set $P101["Regex-actions"], $P5039
    unless_null $P101, fallback301
    nqp_get_sc_object $P5046, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5045, $P5046
    set $P5044, $P5045["%LANG"]
    unless_null $P5044, fallback302
    nqp_get_sc_object $P5048, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5047, $P5048
    new $P5049, 'Hash'
    set $P5047["%LANG"], $P5049
    set $P5044, $P5049
  fallback302:
    unless_null $P5044, vivi_60303
    die "Contextual %*LANG not found"
    box $P5050, "Contextual %*LANG not found"
    set $P5044, $P5050
  vivi_60303:
    set $P101, $P5044
  fallback301:
    nqp_get_sc_object $P5054, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5053, $P5054, "NQP"
    get_who $P5052, $P5053
    set $P5051, $P5052["Grammar"]
    unless_null $P5051, fallback304
    nqp_get_sc_object $P5055, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5051, $P5055
  fallback304:
    set $P101["MAIN"], $P5051
    unless_null $P101, fallback305
    nqp_get_sc_object $P5058, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5057, $P5058
    set $P5056, $P5057["%LANG"]
    unless_null $P5056, fallback306
    nqp_get_sc_object $P5060, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5059, $P5060
    new $P5061, 'Hash'
    set $P5059["%LANG"], $P5061
    set $P5056, $P5061
  fallback306:
    unless_null $P5056, vivi_61307
    die "Contextual %*LANG not found"
    box $P5062, "Contextual %*LANG not found"
    set $P5056, $P5062
  vivi_61307:
    set $P101, $P5056
  fallback305:
    nqp_get_sc_object $P5066, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5065, $P5066, "NQP"
    get_who $P5064, $P5065
    set $P5063, $P5064["Actions"]
    unless_null $P5063, fallback308
    nqp_get_sc_object $P5067, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5063, $P5067
  fallback308:
    set $P101["MAIN-actions"], $P5063
    unless_null $P102, fallback309
    nqp_get_sc_object $P5070, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5069, $P5070
    set $P5068, $P5069["%HOW"]
    unless_null $P5068, fallback310
    nqp_get_sc_object $P5072, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5071, $P5072
    new $P5073, 'Hash'
    set $P5071["%HOW"], $P5073
    set $P5068, $P5073
  fallback310:
    unless_null $P5068, vivi_62311
    die "Contextual %*HOW not found"
    box $P5074, "Contextual %*HOW not found"
    set $P5068, $P5074
  vivi_62311:
    set $P102, $P5068
  fallback309:
    unless_null $P102, fallback312
    nqp_get_sc_object $P5077, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5076, $P5077
    set $P5075, $P5076["%HOW"]
    unless_null $P5075, fallback313
    nqp_get_sc_object $P5079, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5078, $P5079
    new $P5080, 'Hash'
    set $P5078["%HOW"], $P5080
    set $P5075, $P5080
  fallback313:
    unless_null $P5075, vivi_63314
    die "Contextual %*HOW not found"
    box $P5081, "Contextual %*HOW not found"
    set $P5075, $P5081
  vivi_63314:
    set $P102, $P5075
  fallback312:
    get_knowhow $P5082
    set $P102["knowhow"], $P5082
    unless_null $P102, fallback315
    nqp_get_sc_object $P5085, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5084, $P5085
    set $P5083, $P5084["%HOW"]
    unless_null $P5083, fallback316
    nqp_get_sc_object $P5087, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5086, $P5087
    new $P5088, 'Hash'
    set $P5086["%HOW"], $P5088
    set $P5083, $P5088
  fallback316:
    unless_null $P5083, vivi_64317
    die "Contextual %*HOW not found"
    box $P5089, "Contextual %*HOW not found"
    set $P5083, $P5089
  vivi_64317:
    set $P102, $P5083
  fallback315:
    get_knowhow_attribute $P5090
    set $P102["knowhow-attr"], $P5090
    find_caller_lex $P5091, "$?FILES"
    set $P103, $P5091
    nqp_decontainerize $P5092, _lex_param_0
    find_lex $P5095, "$?PACKAGE"
    get_who $P5094, $P5095
    set $P5093, $P5094["NQPCursor"]
    unless_null $P5093, fallback318
    nqp_get_sc_object $P5098, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5097, $P5098
    set $P5096, $P5097["NQPCursor"]
    unless_null $P5096, vivi_65319
    nqp_get_sc_object $P5099, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5096, $P5099
  vivi_65319:
    set $P5093, $P5096
  fallback318:
    repr_get_attr_str $S5004, $P5092, $P5093, "$!target"
    nqp_sha1 $S5003, $S5004
    concat $S5002, $S5003, "-"
    time $N5001
    set $S5005, $N5001
    concat $S5001, $S5002, $S5005
    box $P5100, $S5001
    set $P104, $P5100
    isnull $I5001, $P103
    unless $I5001 goto if66_else320 
.annotate 'line', 616
    nqp_get_sc_object $P5104, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5103, $P5104, "NQP"
    get_who $P5102, $P5103
    set $P5101, $P5102["World"]
    unless_null $P5101, fallback322
    nqp_get_sc_object $P5105, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5101, $P5105
  fallback322:
    $P5106 = $P5101."new"($P104 :named("handle"))
    set $P5113, $P5106
    goto if66_end321
  if66_else320:
.annotate 'line', 617
    nqp_get_sc_object $P5110, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5109, $P5110, "NQP"
    get_who $P5108, $P5109
    set $P5107, $P5108["World"]
    unless_null $P5107, fallback323
    nqp_get_sc_object $P5111, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5107, $P5111
  fallback323:
    $P5112 = $P5107."new"($P104 :named("handle"), $P103 :named("description"))
    set $P5113, $P5112
  if66_end321:
    set $P105, $P5113
    box $P5114, ""
    set $P106, $P5114
    box $P5115, ""
    set $P107, $P5115
    box $P5116, ""
    set $P108, $P5116
    box $P5117, 0
    set $P109, $P5117
    box $P5118, 0
    set $P110, $P5118
    box $P5119, 0
    set $P111, $P5119
    unless_null $P112, fallback324
    nqp_get_sc_object $P5122, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5121, $P5122
    set $P5120, $P5121["%HANDLERS"]
    unless_null $P5120, fallback325
    nqp_get_sc_object $P5124, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5123, $P5124
    new $P5125, 'Hash'
    set $P5123["%HANDLERS"], $P5125
    set $P5120, $P5125
  fallback325:
    unless_null $P5120, vivi_67326
    die "Contextual %*HANDLERS not found"
    box $P5126, "Contextual %*HANDLERS not found"
    set $P5120, $P5126
  vivi_67326:
    set $P112, $P5120
  fallback324:
.annotate 'line', 626
    nqp_decontainerize $P5127, _lex_param_0
    $P5128 = $P5127."comp_unit"()
    .return ($P5128) 
.end
.HLL "nqp"
.namespace []
.sub "identifier" :subid("cuid_35_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 631
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx68_tgt
    .local int rx68_pos
    .local int rx68_off
    .local int rx68_eos
    .local int rx68_rep
    .local pmc rx68_cur
    .local pmc rx68_curclass
    .local pmc rx68_bstack
    .local pmc rx68_cstack
    (rx68_cur, rx68_tgt, rx68_pos, rx68_curclass, rx68_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx68_cur
    length rx68_eos, rx68_tgt
    eq $I19, 1, rx68_restart329
    gt rx68_pos, rx68_eos, rx68_fail330
    repr_get_attr_int $I11, self, rx68_curclass, "$!from"
    ne $I11, -1, rxscan69_done336
    goto rxscan69_scan335
  rxscan69_loop334:
    inc rx68_pos
    gt rx68_pos, rx68_eos, rx68_fail330
    repr_bind_attr_int rx68_cur, rx68_curclass, "$!from", rx68_pos
  rxscan69_scan335:
    nqp_rxmark rx68_bstack, rxscan69_loop334, rx68_pos, 0
  rxscan69_done336:
    repr_bind_attr_int rx68_cur, rx68_curclass, "$!pos", rx68_pos
    $P11 = rx68_cur."ident"()
    repr_get_attr_int $I11, $P11, rx68_curclass, "$!pos"
    lt $I11, 0, rx68_fail330
    repr_get_attr_int rx68_pos, $P11, rx68_curclass, "$!pos"
    nqp_rxmark rx68_bstack, rxquantr71_done339, rx68_pos, 0
  rxquantr71_loop338:
  alt72_0341:
    nqp_rxmark rx68_bstack, alt72_1342, rx68_pos, 0
    add $I11, rx68_pos, 1
    gt $I11, rx68_eos, rx68_fail330
    substr $S10, rx68_tgt, rx68_pos, 1
    ne $S10, ucs4:"-", rx68_fail330
    add rx68_pos, 1
    goto alt72_end340
  alt72_1342:
    ge rx68_pos, rx68_eos, rx68_fail330
    substr $S11, rx68_tgt, rx68_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx68_fail330
    inc rx68_pos
  alt72_end340:
    repr_bind_attr_int rx68_cur, rx68_curclass, "$!pos", rx68_pos
    $P11 = rx68_cur."ident"()
    repr_get_attr_int $I11, $P11, rx68_curclass, "$!pos"
    lt $I11, 0, rx68_fail330
    repr_get_attr_int rx68_pos, $P11, rx68_curclass, "$!pos"
    nqp_rxpeek $I19, rx68_bstack, rxquantr71_done339
    inc $I19
    inc $I19
    set rx68_rep, rx68_bstack[$I19]
    nqp_rxcommit rx68_bstack, rxquantr71_done339
    inc rx68_rep
    nqp_rxmark rx68_bstack, rxquantr71_done339, rx68_pos, rx68_rep
    goto rxquantr71_loop338
  rxquantr71_done339:
    rx68_cur."!cursor_pass"(rx68_pos, "identifier", 'backtrack'=>1)
    .return (rx68_cur)
  rx68_restart329:
    repr_get_attr_obj rx68_cstack, rx68_cur, rx68_curclass, "$!cstack"
  rx68_fail330:
    unless rx68_bstack, rx68_done328
    pop $I19, rx68_bstack
    if_null rx68_cstack, rx68_cstack_done333
    unless rx68_cstack, rx68_cstack_done333
    dec $I19
    set $P11, rx68_cstack[$I19]
  rx68_cstack_done333:
    pop rx68_rep, rx68_bstack
    pop rx68_pos, rx68_bstack
    pop $I19, rx68_bstack
    lt rx68_pos, -1, rx68_done328
    lt rx68_pos, 0, rx68_fail330
    eq $I19, 0, rx68_fail330
    nqp_islist $I20, rx68_cstack
    unless $I20, rx68_jump331
    elements $I18, rx68_bstack
    le $I18, 0, rx68_cut332
    dec $I18
    set $I18, rx68_bstack[$I18]
  rx68_cut332:
    assign rx68_cstack, $I18
  rx68_jump331:
    jump $I19
  rx68_done328:
    rx68_cur."!cursor_fail"()
    .return (rx68_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_35_1349901750.327_caps" :subid("cuid_memo_1_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_35_1349901750.327_nfa" :subid("cuid_memo_2_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "ident"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    box $P5011, 1
    push $P5007, $P5011
    box $P5012, 0
    push $P5007, $P5012
    box $P5013, 0
    push $P5007, $P5013
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "name" :subid("cuid_36_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 633
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx74_tgt
    .local int rx74_pos
    .local int rx74_off
    .local int rx74_eos
    .local int rx74_rep
    .local pmc rx74_cur
    .local pmc rx74_curclass
    .local pmc rx74_bstack
    .local pmc rx74_cstack
    (rx74_cur, rx74_tgt, rx74_pos, rx74_curclass, rx74_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx74_cur
    length rx74_eos, rx74_tgt
    eq $I19, 1, rx74_restart346
    gt rx74_pos, rx74_eos, rx74_fail347
    repr_get_attr_int $I11, self, rx74_curclass, "$!from"
    ne $I11, -1, rxscan75_done353
    goto rxscan75_scan352
  rxscan75_loop351:
    inc rx74_pos
    gt rx74_pos, rx74_eos, rx74_fail347
    repr_bind_attr_int rx74_cur, rx74_curclass, "$!from", rx74_pos
  rxscan75_scan352:
    nqp_rxmark rx74_bstack, rxscan75_loop351, rx74_pos, 0
  rxscan75_done353:
    repr_bind_attr_int rx74_cur, rx74_curclass, "$!pos", rx74_pos
    $P11 = rx74_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx74_curclass, "$!pos"
    lt $I11, 0, rx74_fail347
    nqp_rxmark rx74_bstack, rxsubrule76_pass354, -1, 0
  rxsubrule76_pass354:
    rx74_cstack = rx74_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx74_pos, $P11, rx74_curclass, "$!pos"
    nqp_rxmark rx74_bstack, rxquantr77_done356, rx74_pos, 0
  rxquantr77_loop355:
    add $I11, rx74_pos, 2
    gt $I11, rx74_eos, rx74_fail347
    substr $S10, rx74_tgt, rx74_pos, 2
    ne $S10, ucs4:"::", rx74_fail347
    add rx74_pos, 2
    repr_bind_attr_int rx74_cur, rx74_curclass, "$!pos", rx74_pos
    $P11 = rx74_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx74_curclass, "$!pos"
    lt $I11, 0, rx74_fail347
    nqp_rxmark rx74_bstack, rxsubrule78_pass357, -1, 0
  rxsubrule78_pass357:
    rx74_cstack = rx74_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx74_pos, $P11, rx74_curclass, "$!pos"
    nqp_rxpeek $I19, rx74_bstack, rxquantr77_done356
    inc $I19
    inc $I19
    set rx74_rep, rx74_bstack[$I19]
    nqp_rxcommit rx74_bstack, rxquantr77_done356
    inc rx74_rep
    nqp_rxmark rx74_bstack, rxquantr77_done356, rx74_pos, rx74_rep
    goto rxquantr77_loop355
  rxquantr77_done356:
    rx74_cur."!cursor_pass"(rx74_pos, "name", 'backtrack'=>1)
    .return (rx74_cur)
  rx74_restart346:
    repr_get_attr_obj rx74_cstack, rx74_cur, rx74_curclass, "$!cstack"
  rx74_fail347:
    unless rx74_bstack, rx74_done345
    pop $I19, rx74_bstack
    if_null rx74_cstack, rx74_cstack_done350
    unless rx74_cstack, rx74_cstack_done350
    dec $I19
    set $P11, rx74_cstack[$I19]
  rx74_cstack_done350:
    pop rx74_rep, rx74_bstack
    pop rx74_pos, rx74_bstack
    pop $I19, rx74_bstack
    lt rx74_pos, -1, rx74_done345
    lt rx74_pos, 0, rx74_fail347
    eq $I19, 0, rx74_fail347
    nqp_islist $I20, rx74_cstack
    unless $I20, rx74_jump348
    elements $I18, rx74_bstack
    le $I18, 0, rx74_cut349
    dec $I18
    set $I18, rx74_bstack[$I18]
  rx74_cut349:
    assign rx74_cstack, $I18
  rx74_jump348:
    jump $I19
  rx74_done345:
    rx74_cur."!cursor_fail"()
    .return (rx74_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_36_1349901750.327_caps" :subid("cuid_memo_3_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 2
    set $P5001["identifier"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_36_1349901750.327_nfa" :subid("cuid_memo_4_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "identifier"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 58
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    box $P5011, 1
    push $P5007, $P5011
    box $P5012, 0
    push $P5007, $P5012
    box $P5013, 0
    push $P5007, $P5013
    push $P5001, $P5007
    new $P5014, 'ResizablePMCArray'
    box $P5015, 2
    push $P5014, $P5015
    box $P5016, 58
    push $P5014, $P5016
    box $P5017, 4
    push $P5014, $P5017
    push $P5001, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 8
    push $P5018, $P5019
    box $P5020, "identifier"
    push $P5018, $P5020
    box $P5021, 2
    push $P5018, $P5021
    push $P5001, $P5018
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "deflongname" :subid("cuid_37_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 635
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx79_tgt
    .local int rx79_pos
    .local int rx79_off
    .local int rx79_eos
    .local int rx79_rep
    .local pmc rx79_cur
    .local pmc rx79_curclass
    .local pmc rx79_bstack
    .local pmc rx79_cstack
    (rx79_cur, rx79_tgt, rx79_pos, rx79_curclass, rx79_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx79_cur
    length rx79_eos, rx79_tgt
    eq $I19, 1, rx79_restart360
    gt rx79_pos, rx79_eos, rx79_fail361
    repr_get_attr_int $I11, self, rx79_curclass, "$!from"
    ne $I11, -1, rxscan80_done367
    goto rxscan80_scan366
  rxscan80_loop365:
    inc rx79_pos
    gt rx79_pos, rx79_eos, rx79_fail361
    repr_bind_attr_int rx79_cur, rx79_curclass, "$!from", rx79_pos
  rxscan80_scan366:
    nqp_rxmark rx79_bstack, rxscan80_loop365, rx79_pos, 0
  rxscan80_done367:
    repr_bind_attr_int rx79_cur, rx79_curclass, "$!pos", rx79_pos
    $P11 = rx79_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx79_curclass, "$!pos"
    lt $I11, 0, rx79_fail361
    nqp_rxmark rx79_bstack, rxsubrule81_pass368, -1, 0
  rxsubrule81_pass368:
    rx79_cstack = rx79_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx79_pos, $P11, rx79_curclass, "$!pos"
    nqp_rxmark rx79_bstack, rxquantr82_done370, rx79_pos, 0
  rxquantr82_loop369:
    repr_bind_attr_int rx79_cur, rx79_curclass, "$!pos", rx79_pos
    $P11 = rx79_cur."colonpair"()
    repr_get_attr_int $I11, $P11, rx79_curclass, "$!pos"
    lt $I11, 0, rx79_fail361
    goto rxsubrule83_pass371
  rxsubrule83_back372:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx79_curclass, "$!pos"
    lt $I11, 0, rx79_fail361
  rxsubrule83_pass371:
    rx79_cstack = rx79_cur."!cursor_capture"($P11, "colonpair")
    set_addr $I11, rxsubrule83_back372
    push rx79_bstack, $I11
    push rx79_bstack, 0
    push rx79_bstack, rx79_pos
    elements $I11, rx79_cstack
    push rx79_bstack, $I11
    repr_get_attr_int rx79_pos, $P11, rx79_curclass, "$!pos"
    nqp_rxpeek $I19, rx79_bstack, rxquantr82_done370
    inc $I19
    inc $I19
    set rx79_rep, rx79_bstack[$I19]
    nqp_rxcommit rx79_bstack, rxquantr82_done370
    inc rx79_rep
  rxquantr82_done370:
    rx79_cur."!cursor_pass"(rx79_pos, "deflongname", 'backtrack'=>1)
    .return (rx79_cur)
  rx79_restart360:
    repr_get_attr_obj rx79_cstack, rx79_cur, rx79_curclass, "$!cstack"
  rx79_fail361:
    unless rx79_bstack, rx79_done359
    pop $I19, rx79_bstack
    if_null rx79_cstack, rx79_cstack_done364
    unless rx79_cstack, rx79_cstack_done364
    dec $I19
    set $P11, rx79_cstack[$I19]
  rx79_cstack_done364:
    pop rx79_rep, rx79_bstack
    pop rx79_pos, rx79_bstack
    pop $I19, rx79_bstack
    lt rx79_pos, -1, rx79_done359
    lt rx79_pos, 0, rx79_fail361
    eq $I19, 0, rx79_fail361
    nqp_islist $I20, rx79_cstack
    unless $I20, rx79_jump362
    elements $I18, rx79_bstack
    le $I18, 0, rx79_cut363
    dec $I18
    set $I18, rx79_bstack[$I18]
  rx79_cut363:
    assign rx79_cstack, $I18
  rx79_jump362:
    jump $I19
  rx79_done359:
    rx79_cur."!cursor_fail"()
    .return (rx79_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_37_1349901750.327_caps" :subid("cuid_memo_5_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["identifier"], $P5002
    box $P5003, 2
    set $P5001["colonpair"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_37_1349901750.327_nfa" :subid("cuid_memo_6_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "identifier"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "colonpair"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    box $P5011, 1
    push $P5007, $P5011
    box $P5012, 0
    push $P5007, $P5012
    box $P5013, 0
    push $P5007, $P5013
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "ENDSTMT" :subid("cuid_38_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 639
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx84_tgt
    .local int rx84_pos
    .local int rx84_off
    .local int rx84_eos
    .local int rx84_rep
    .local pmc rx84_cur
    .local pmc rx84_curclass
    .local pmc rx84_bstack
    .local pmc rx84_cstack
    (rx84_cur, rx84_tgt, rx84_pos, rx84_curclass, rx84_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx84_cur
    length rx84_eos, rx84_tgt
    eq $I19, 1, rx84_restart375
    gt rx84_pos, rx84_eos, rx84_fail376
    repr_get_attr_int $I11, self, rx84_curclass, "$!from"
    ne $I11, -1, rxscan85_done382
    goto rxscan85_scan381
  rxscan85_loop380:
    inc rx84_pos
    gt rx84_pos, rx84_eos, rx84_fail376
    repr_bind_attr_int rx84_cur, rx84_curclass, "$!from", rx84_pos
  rxscan85_scan381:
    nqp_rxmark rx84_bstack, rxscan85_loop380, rx84_pos, 0
  rxscan85_done382:
    nqp_rxmark rx84_bstack, rxquantr86_done384, rx84_pos, 0
  rxquantr86_loop383:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt87_0386
    nqp_push_label $P11, alt87_1391
    nqp_rxmark rx84_bstack, alt87_end385, -1, 0
    rx84_cur."!alt"(rx84_pos, "alt_nfa__1_1349901751.611", $P11)
    goto rx84_fail376
  alt87_0386:
    nqp_rxmark rx84_bstack, rxquantr88_done388, rx84_pos, 0
  rxquantr88_loop387:
    ge rx84_pos, rx84_eos, rx84_fail376
    substr $S11, rx84_tgt, rx84_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx84_fail376
    inc rx84_pos
    nqp_rxpeek $I19, rx84_bstack, rxquantr88_done388
    inc $I19
    inc $I19
    set rx84_rep, rx84_bstack[$I19]
    nqp_rxcommit rx84_bstack, rxquantr88_done388
    inc rx84_rep
    nqp_rxmark rx84_bstack, rxquantr88_done388, rx84_pos, rx84_rep
    goto rxquantr88_loop387
  rxquantr88_done388:
    is_cclass $I11, .CCLASS_NEWLINE, rx84_tgt, rx84_pos
    if $I11, rxanchor89_done389
    ne rx84_pos, rx84_eos, rx84_fail376
    eq rx84_pos, 0, rxanchor89_done389
    sub $I11, rx84_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx84_tgt, $I11
    if $I11, rx84_fail376
  rxanchor89_done389:
    repr_bind_attr_int rx84_cur, rx84_curclass, "$!pos", rx84_pos
    $P11 = rx84_cur."ws"()
    repr_get_attr_int $I11, $P11, rx84_curclass, "$!pos"
    lt $I11, 0, rx84_fail376
    repr_get_attr_int rx84_pos, $P11, rx84_curclass, "$!pos"
    repr_bind_attr_int rx84_cur, rx84_curclass, "$!pos", rx84_pos
    $P11 = rx84_cur."MARKER"("endstmt")
    repr_get_attr_int $I11, $P11, rx84_curclass, "$!pos"
    lt $I11, 0, rx84_fail376
    goto alt87_end385
  alt87_1391:
    nqp_rxmark rx84_bstack, rxquantr91_done393, rx84_pos, 0
  rxquantr91_loop392:
    repr_bind_attr_int rx84_cur, rx84_curclass, "$!pos", rx84_pos
    $P11 = rx84_cur."unv"()
    repr_get_attr_int $I11, $P11, rx84_curclass, "$!pos"
    lt $I11, 0, rx84_fail376
    goto rxsubrule92_pass394
  rxsubrule92_back395:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx84_curclass, "$!pos"
    lt $I11, 0, rx84_fail376
  rxsubrule92_pass394:
    rx84_cstack = rx84_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule92_back395
    push rx84_bstack, $I11
    push rx84_bstack, 0
    push rx84_bstack, rx84_pos
    elements $I11, rx84_cstack
    push rx84_bstack, $I11
    repr_get_attr_int rx84_pos, $P11, rx84_curclass, "$!pos"
    nqp_rxpeek $I19, rx84_bstack, rxquantr91_done393
    inc $I19
    inc $I19
    set rx84_rep, rx84_bstack[$I19]
    nqp_rxcommit rx84_bstack, rxquantr91_done393
    inc rx84_rep
  rxquantr91_done393:
    is_cclass $I11, .CCLASS_NEWLINE, rx84_tgt, rx84_pos
    if $I11, rxanchor93_done396
    ne rx84_pos, rx84_eos, rx84_fail376
    eq rx84_pos, 0, rxanchor93_done396
    sub $I11, rx84_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx84_tgt, $I11
    if $I11, rx84_fail376
  rxanchor93_done396:
    repr_bind_attr_int rx84_cur, rx84_curclass, "$!pos", rx84_pos
    $P11 = rx84_cur."ws"()
    repr_get_attr_int $I11, $P11, rx84_curclass, "$!pos"
    lt $I11, 0, rx84_fail376
    repr_get_attr_int rx84_pos, $P11, rx84_curclass, "$!pos"
    repr_bind_attr_int rx84_cur, rx84_curclass, "$!pos", rx84_pos
    $P11 = rx84_cur."MARKER"("endstmt")
    repr_get_attr_int $I11, $P11, rx84_curclass, "$!pos"
    lt $I11, 0, rx84_fail376
    goto alt87_end385
  alt87_end385:
    nqp_rxpeek $I19, rx84_bstack, rxquantr86_done384
    inc $I19
    inc $I19
    set rx84_rep, rx84_bstack[$I19]
    nqp_rxcommit rx84_bstack, rxquantr86_done384
    inc rx84_rep
  rxquantr86_done384:
    rx84_cur."!cursor_pass"(rx84_pos, "ENDSTMT", 'backtrack'=>1)
    .return (rx84_cur)
  rx84_restart375:
    repr_get_attr_obj rx84_cstack, rx84_cur, rx84_curclass, "$!cstack"
  rx84_fail376:
    unless rx84_bstack, rx84_done374
    pop $I19, rx84_bstack
    if_null rx84_cstack, rx84_cstack_done379
    unless rx84_cstack, rx84_cstack_done379
    dec $I19
    set $P11, rx84_cstack[$I19]
  rx84_cstack_done379:
    pop rx84_rep, rx84_bstack
    pop rx84_pos, rx84_bstack
    pop $I19, rx84_bstack
    lt rx84_pos, -1, rx84_done374
    lt rx84_pos, 0, rx84_fail376
    eq $I19, 0, rx84_fail376
    nqp_islist $I20, rx84_cstack
    unless $I20, rx84_jump377
    elements $I18, rx84_bstack
    le $I18, 0, rx84_cut378
    dec $I18
    set $I18, rx84_bstack[$I18]
  rx84_cut378:
    assign rx84_cstack, $I18
  rx84_jump377:
    jump $I19
  rx84_done374:
    rx84_cur."!cursor_fail"()
    .return (rx84_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_38_1349901750.327_caps" :subid("cuid_memo_7_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_38_1349901750.327_nfa" :subid("cuid_memo_8_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5003, $P5005
    box $P5006, 1
    push $P5003, $P5006
    box $P5007, 1
    push $P5003, $P5007
    box $P5008, 0
    push $P5003, $P5008
    box $P5009, 2
    push $P5003, $P5009
    box $P5010, 8
    push $P5003, $P5010
    box $P5011, "unv"
    push $P5003, $P5011
    box $P5012, 6
    push $P5003, $P5012
    box $P5013, 1
    push $P5003, $P5013
    box $P5014, 0
    push $P5003, $P5014
    box $P5015, 6
    push $P5003, $P5015
    box $P5016, 1
    push $P5003, $P5016
    box $P5017, 0
    push $P5003, $P5017
    box $P5018, 0
    push $P5003, $P5018
    push $P5001, $P5003
    new $P5019, 'ResizablePMCArray'
    box $P5020, 1
    push $P5019, $P5020
    box $P5021, 0
    push $P5019, $P5021
    box $P5022, 3
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 8
    push $P5023, $P5024
    box $P5025, "ws"
    push $P5023, $P5025
    box $P5026, 4
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "MARKER"
    push $P5027, $P5029
    box $P5030, 5
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 0
    push $P5031, $P5032
    box $P5033, 0
    push $P5031, $P5033
    box $P5034, 0
    push $P5031, $P5034
    push $P5001, $P5031
    new $P5035, 'ResizablePMCArray'
    box $P5036, 1
    push $P5035, $P5036
    box $P5037, 0
    push $P5035, $P5037
    box $P5038, 7
    push $P5035, $P5038
    push $P5001, $P5035
    new $P5039, 'ResizablePMCArray'
    box $P5040, 8
    push $P5039, $P5040
    box $P5041, "ws"
    push $P5039, $P5041
    box $P5042, 8
    push $P5039, $P5042
    push $P5001, $P5039
    new $P5043, 'ResizablePMCArray'
    box $P5044, 8
    push $P5043, $P5044
    box $P5045, "MARKER"
    push $P5043, $P5045
    box $P5046, 9
    push $P5043, $P5046
    push $P5001, $P5043
    new $P5047, 'ResizablePMCArray'
    box $P5048, 0
    push $P5047, $P5048
    box $P5049, 0
    push $P5047, $P5049
    box $P5050, 0
    push $P5047, $P5050
    push $P5001, $P5047
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_38_1349901750.327_alt_nfa__1_1349901751.611" :subid("cuid_memo_9_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 6
    push $P5004, $P5005
    box $P5006, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5004, $P5006
    box $P5007, 1
    push $P5004, $P5007
    box $P5008, 1
    push $P5004, $P5008
    box $P5009, 0
    push $P5004, $P5009
    box $P5010, 2
    push $P5004, $P5010
    push $P5002, $P5004
    new $P5011, 'ResizablePMCArray'
    box $P5012, 1
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 3
    push $P5011, $P5014
    push $P5002, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "ws"
    push $P5015, $P5017
    box $P5018, 4
    push $P5015, $P5018
    push $P5002, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 8
    push $P5019, $P5020
    box $P5021, "MARKER"
    push $P5019, $P5021
    box $P5022, 5
    push $P5019, $P5022
    push $P5002, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 0
    push $P5023, $P5024
    box $P5025, 0
    push $P5023, $P5025
    box $P5026, 0
    push $P5023, $P5026
    push $P5002, $P5023
    push $P5001, $P5002
    new $P5027, 'ResizablePMCArray'
    new $P5028, 'ResizablePMCArray'
    push $P5027, $P5028
    new $P5029, 'ResizablePMCArray'
    box $P5030, 8
    push $P5029, $P5030
    box $P5031, "unv"
    push $P5029, $P5031
    box $P5032, 2
    push $P5029, $P5032
    box $P5033, 1
    push $P5029, $P5033
    box $P5034, 0
    push $P5029, $P5034
    box $P5035, 2
    push $P5029, $P5035
    push $P5027, $P5029
    new $P5036, 'ResizablePMCArray'
    box $P5037, 1
    push $P5036, $P5037
    box $P5038, 0
    push $P5036, $P5038
    box $P5039, 3
    push $P5036, $P5039
    push $P5027, $P5036
    new $P5040, 'ResizablePMCArray'
    box $P5041, 8
    push $P5040, $P5041
    box $P5042, "ws"
    push $P5040, $P5042
    box $P5043, 4
    push $P5040, $P5043
    push $P5027, $P5040
    new $P5044, 'ResizablePMCArray'
    box $P5045, 8
    push $P5044, $P5045
    box $P5046, "MARKER"
    push $P5044, $P5046
    box $P5047, 5
    push $P5044, $P5047
    push $P5027, $P5044
    new $P5048, 'ResizablePMCArray'
    box $P5049, 0
    push $P5048, $P5049
    box $P5050, 0
    push $P5048, $P5050
    box $P5051, 0
    push $P5048, $P5051
    push $P5027, $P5048
    push $P5001, $P5027
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "ws" :subid("cuid_39_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 646
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx95_tgt
    .local int rx95_pos
    .local int rx95_off
    .local int rx95_eos
    .local int rx95_rep
    .local pmc rx95_cur
    .local pmc rx95_curclass
    .local pmc rx95_bstack
    .local pmc rx95_cstack
    (rx95_cur, rx95_tgt, rx95_pos, rx95_curclass, rx95_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx95_cur
    length rx95_eos, rx95_tgt
    eq $I19, 1, rx95_restart400
    gt rx95_pos, rx95_eos, rx95_fail401
    repr_get_attr_int $I11, self, rx95_curclass, "$!from"
    ne $I11, -1, rxscan96_done407
    goto rxscan96_scan406
  rxscan96_loop405:
    inc rx95_pos
    gt rx95_pos, rx95_eos, rx95_fail401
    repr_bind_attr_int rx95_cur, rx95_curclass, "$!from", rx95_pos
  rxscan96_scan406:
    nqp_rxmark rx95_bstack, rxscan96_loop405, rx95_pos, 0
  rxscan96_done407:
  alt97_0409:
    nqp_rxmark rx95_bstack, alt97_1410, rx95_pos, 0
    repr_bind_attr_int rx95_cur, rx95_curclass, "$!pos", rx95_pos
    $P11 = rx95_cur."MARKED"("ws")
    repr_get_attr_int $I11, $P11, rx95_curclass, "$!pos"
    lt $I11, 0, rx95_fail401
    goto alt97_end408
  alt97_1410:
    repr_bind_attr_int rx95_cur, rx95_curclass, "$!pos", rx95_pos
    $P11 = rx95_cur."ww"()
    repr_get_attr_int $I11, $P11, rx95_curclass, "$!pos"
    ge $I11, 0, rx95_fail401
    nqp_rxmark rx95_bstack, rxquantr98_done412, rx95_pos, 0
  rxquantr98_loop411:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt99_0414
    nqp_push_label $P11, alt99_1417
    nqp_push_label $P11, alt99_2420
    nqp_push_label $P11, alt99_3423
    nqp_rxmark rx95_bstack, alt99_end413, -1, 0
    rx95_cur."!alt"(rx95_pos, "alt_nfa__2_1349901751.628", $P11)
    goto rx95_fail401
  alt99_0414:
    nqp_rxmark rx95_bstack, rxquantr100_done416, -1, 0
  rxquantr100_loop415:
    ge rx95_pos, rx95_eos, rx95_fail401
    substr $S11, rx95_tgt, rx95_pos, 1
    index $I11, ucs4:"\n\x{b}\f\r\x{85}\u2028\u2029", $S11
    lt $I11, 0, rx95_fail401
    inc rx95_pos
    nqp_rxpeek $I19, rx95_bstack, rxquantr100_done416
    inc $I19
    inc $I19
    set rx95_rep, rx95_bstack[$I19]
    nqp_rxcommit rx95_bstack, rxquantr100_done416
    inc rx95_rep
    nqp_rxmark rx95_bstack, rxquantr100_done416, rx95_pos, rx95_rep
    goto rxquantr100_loop415
  rxquantr100_done416:
    goto alt99_end413
  alt99_1417:
    add $I11, rx95_pos, 1
    gt $I11, rx95_eos, rx95_fail401
    substr $S10, rx95_tgt, rx95_pos, 1
    ne $S10, ucs4:"#", rx95_fail401
    add rx95_pos, 1
    nqp_rxmark rx95_bstack, rxquantr101_done419, rx95_pos, 0
  rxquantr101_loop418:
    ge rx95_pos, rx95_eos, rx95_fail401
    is_cclass $I11, .CCLASS_NEWLINE, rx95_tgt, rx95_pos
    if $I11, rx95_fail401
    add rx95_pos, 1
    nqp_rxpeek $I19, rx95_bstack, rxquantr101_done419
    inc $I19
    inc $I19
    set rx95_rep, rx95_bstack[$I19]
    nqp_rxcommit rx95_bstack, rxquantr101_done419
    inc rx95_rep
    nqp_rxmark rx95_bstack, rxquantr101_done419, rx95_pos, rx95_rep
    goto rxquantr101_loop418
  rxquantr101_done419:
    goto alt99_end413
  alt99_2420:
    eq rx95_pos, 0, rxanchor102_done421
    ge rx95_pos, rx95_eos, rx95_fail401
    sub $I11, rx95_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx95_tgt, $I11
    unless $I11, rx95_fail401
  rxanchor102_done421:
    repr_bind_attr_int rx95_cur, rx95_curclass, "$!pos", rx95_pos
    $P11 = rx95_cur."pod_comment"()
    repr_get_attr_int $I11, $P11, rx95_curclass, "$!pos"
    lt $I11, 0, rx95_fail401
    repr_get_attr_int rx95_pos, $P11, rx95_curclass, "$!pos"
    goto alt99_end413
  alt99_3423:
    nqp_rxmark rx95_bstack, rxquantr104_done425, -1, 0
  rxquantr104_loop424:
    ge rx95_pos, rx95_eos, rx95_fail401
    substr $S11, rx95_tgt, rx95_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx95_fail401
    inc rx95_pos
    nqp_rxpeek $I19, rx95_bstack, rxquantr104_done425
    inc $I19
    inc $I19
    set rx95_rep, rx95_bstack[$I19]
    nqp_rxcommit rx95_bstack, rxquantr104_done425
    inc rx95_rep
    nqp_rxmark rx95_bstack, rxquantr104_done425, rx95_pos, rx95_rep
    goto rxquantr104_loop424
  rxquantr104_done425:
    goto alt99_end413
  alt99_end413:
    nqp_rxpeek $I19, rx95_bstack, rxquantr98_done412
    inc $I19
    inc $I19
    set rx95_rep, rx95_bstack[$I19]
    nqp_rxcommit rx95_bstack, rxquantr98_done412
    inc rx95_rep
    nqp_rxmark rx95_bstack, rxquantr98_done412, rx95_pos, rx95_rep
    goto rxquantr98_loop411
  rxquantr98_done412:
    repr_bind_attr_int rx95_cur, rx95_curclass, "$!pos", rx95_pos
    $P11 = rx95_cur."MARKER"("ws")
    repr_get_attr_int $I11, $P11, rx95_curclass, "$!pos"
    lt $I11, 0, rx95_fail401
  alt97_end408:
    rx95_cur."!cursor_pass"(rx95_pos, "ws", 'backtrack'=>1)
    .return (rx95_cur)
  rx95_restart400:
    repr_get_attr_obj rx95_cstack, rx95_cur, rx95_curclass, "$!cstack"
  rx95_fail401:
    unless rx95_bstack, rx95_done399
    pop $I19, rx95_bstack
    if_null rx95_cstack, rx95_cstack_done404
    unless rx95_cstack, rx95_cstack_done404
    dec $I19
    set $P11, rx95_cstack[$I19]
  rx95_cstack_done404:
    pop rx95_rep, rx95_bstack
    pop rx95_pos, rx95_bstack
    pop $I19, rx95_bstack
    lt rx95_pos, -1, rx95_done399
    lt rx95_pos, 0, rx95_fail401
    eq $I19, 0, rx95_fail401
    nqp_islist $I20, rx95_cstack
    unless $I20, rx95_jump402
    elements $I18, rx95_bstack
    le $I18, 0, rx95_cut403
    dec $I18
    set $I18, rx95_bstack[$I18]
  rx95_cut403:
    assign rx95_cstack, $I18
  rx95_jump402:
    jump $I19
  rx95_done399:
    rx95_cur."!cursor_fail"()
    .return (rx95_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_39_1349901750.327_caps" :subid("cuid_memo_10_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_39_1349901750.327_alt_nfa__2_1349901751.628" :subid("cuid_memo_11_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 1
    push $P5004, $P5005
    box $P5006, 0
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 6
    push $P5008, $P5009
    box $P5010, utf8:"\n\x{b}\f\r\x{85}\u2028\u2029"
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 1
    push $P5012, $P5013
    box $P5014, 0
    push $P5012, $P5014
    box $P5015, 2
    push $P5012, $P5015
    box $P5016, 1
    push $P5012, $P5016
    box $P5017, 0
    push $P5012, $P5017
    box $P5018, 0
    push $P5012, $P5018
    push $P5002, $P5012
    push $P5001, $P5002
    new $P5019, 'ResizablePMCArray'
    new $P5020, 'ResizablePMCArray'
    push $P5019, $P5020
    new $P5021, 'ResizablePMCArray'
    box $P5022, 2
    push $P5021, $P5022
    box $P5023, 35
    push $P5021, $P5023
    box $P5024, 2
    push $P5021, $P5024
    push $P5019, $P5021
    new $P5025, 'ResizablePMCArray'
    box $P5026, 5
    push $P5025, $P5026
    box $P5027, 4096
    push $P5025, $P5027
    box $P5028, 2
    push $P5025, $P5028
    box $P5029, 1
    push $P5025, $P5029
    box $P5030, 0
    push $P5025, $P5030
    box $P5031, 0
    push $P5025, $P5031
    push $P5019, $P5025
    push $P5001, $P5019
    new $P5032, 'ResizablePMCArray'
    new $P5033, 'ResizablePMCArray'
    push $P5032, $P5033
    new $P5034, 'ResizablePMCArray'
    box $P5035, 1
    push $P5034, $P5035
    box $P5036, 0
    push $P5034, $P5036
    box $P5037, 2
    push $P5034, $P5037
    push $P5032, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 8
    push $P5038, $P5039
    box $P5040, "pod_comment"
    push $P5038, $P5040
    box $P5041, 0
    push $P5038, $P5041
    push $P5032, $P5038
    push $P5001, $P5032
    new $P5042, 'ResizablePMCArray'
    new $P5043, 'ResizablePMCArray'
    push $P5042, $P5043
    new $P5044, 'ResizablePMCArray'
    box $P5045, 1
    push $P5044, $P5045
    box $P5046, 0
    push $P5044, $P5046
    box $P5047, 2
    push $P5044, $P5047
    push $P5042, $P5044
    new $P5048, 'ResizablePMCArray'
    box $P5049, 6
    push $P5048, $P5049
    box $P5050, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5048, $P5050
    box $P5051, 3
    push $P5048, $P5051
    push $P5042, $P5048
    new $P5052, 'ResizablePMCArray'
    box $P5053, 1
    push $P5052, $P5053
    box $P5054, 0
    push $P5052, $P5054
    box $P5055, 2
    push $P5052, $P5055
    box $P5056, 1
    push $P5052, $P5056
    box $P5057, 0
    push $P5052, $P5057
    box $P5058, 0
    push $P5052, $P5058
    push $P5042, $P5052
    push $P5001, $P5042
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "unv" :subid("cuid_41_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 657
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_40_1349901750.327' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx105_tgt
    .local int rx105_pos
    .local int rx105_off
    .local int rx105_eos
    .local int rx105_rep
    .local pmc rx105_cur
    .local pmc rx105_curclass
    .local pmc rx105_bstack
    .local pmc rx105_cstack
    (rx105_cur, rx105_tgt, rx105_pos, rx105_curclass, rx105_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx105_cur
    length rx105_eos, rx105_tgt
    eq $I19, 1, rx105_restart428
    gt rx105_pos, rx105_eos, rx105_fail429
    repr_get_attr_int $I11, self, rx105_curclass, "$!from"
    ne $I11, -1, rxscan106_done435
    goto rxscan106_scan434
  rxscan106_loop433:
    inc rx105_pos
    gt rx105_pos, rx105_eos, rx105_fail429
    repr_bind_attr_int rx105_cur, rx105_curclass, "$!from", rx105_pos
  rxscan106_scan434:
    nqp_rxmark rx105_bstack, rxscan106_loop433, rx105_pos, 0
  rxscan106_done435:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt107_0437
    nqp_push_label $P11, alt107_1455
    nqp_push_label $P11, alt107_2460
    nqp_rxmark rx105_bstack, alt107_end436, -1, 0
    rx105_cur."!alt"(rx105_pos, "alt_nfa__4_1349901751.648", $P11)
    goto rx105_fail429
  alt107_0437:
    eq rx105_pos, 0, rxanchor108_done438
    ge rx105_pos, rx105_eos, rx105_fail429
    sub $I11, rx105_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx105_tgt, $I11
    unless $I11, rx105_fail429
  rxanchor108_done438:
    .const 'Sub' $P5001 = 'cuid_40_1349901750.327' 
    capture_lex $P5001
    repr_bind_attr_int rx105_cur, rx105_curclass, "$!pos", rx105_pos
    $P11 = rx105_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx105_curclass, "$!pos"
    lt $I11, 0, rx105_fail429
    repr_bind_attr_int rx105_cur, rx105_curclass, "$!pos", rx105_pos
    $P11 = rx105_cur."pod_comment"()
    repr_get_attr_int $I11, $P11, rx105_curclass, "$!pos"
    lt $I11, 0, rx105_fail429
    repr_get_attr_int rx105_pos, $P11, rx105_curclass, "$!pos"
    goto alt107_end436
  alt107_1455:
    nqp_rxmark rx105_bstack, rxquantr114_done457, rx105_pos, 0
  rxquantr114_loop456:
    ge rx105_pos, rx105_eos, rx105_fail429
    substr $S11, rx105_tgt, rx105_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx105_fail429
    inc rx105_pos
    nqp_rxpeek $I19, rx105_bstack, rxquantr114_done457
    inc $I19
    inc $I19
    set rx105_rep, rx105_bstack[$I19]
    nqp_rxcommit rx105_bstack, rxquantr114_done457
    inc rx105_rep
    nqp_rxmark rx105_bstack, rxquantr114_done457, rx105_pos, rx105_rep
    goto rxquantr114_loop456
  rxquantr114_done457:
    add $I11, rx105_pos, 1
    gt $I11, rx105_eos, rx105_fail429
    substr $S10, rx105_tgt, rx105_pos, 1
    ne $S10, ucs4:"#", rx105_fail429
    add rx105_pos, 1
    nqp_rxmark rx105_bstack, rxquantr115_done459, rx105_pos, 0
  rxquantr115_loop458:
    ge rx105_pos, rx105_eos, rx105_fail429
    is_cclass $I11, .CCLASS_NEWLINE, rx105_tgt, rx105_pos
    if $I11, rx105_fail429
    add rx105_pos, 1
    nqp_rxpeek $I19, rx105_bstack, rxquantr115_done459
    inc $I19
    inc $I19
    set rx105_rep, rx105_bstack[$I19]
    nqp_rxcommit rx105_bstack, rxquantr115_done459
    inc rx105_rep
    nqp_rxmark rx105_bstack, rxquantr115_done459, rx105_pos, rx105_rep
    goto rxquantr115_loop458
  rxquantr115_done459:
    goto alt107_end436
  alt107_2460:
    nqp_rxmark rx105_bstack, rxquantr116_done462, -1, 0
  rxquantr116_loop461:
    ge rx105_pos, rx105_eos, rx105_fail429
    substr $S11, rx105_tgt, rx105_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx105_fail429
    inc rx105_pos
    nqp_rxpeek $I19, rx105_bstack, rxquantr116_done462
    inc $I19
    inc $I19
    set rx105_rep, rx105_bstack[$I19]
    nqp_rxcommit rx105_bstack, rxquantr116_done462
    inc rx105_rep
    nqp_rxmark rx105_bstack, rxquantr116_done462, rx105_pos, rx105_rep
    goto rxquantr116_loop461
  rxquantr116_done462:
    goto alt107_end436
  alt107_end436:
    nqp_rxcommit rx105_bstack, alt107_end436
    rx105_cur."!cursor_pass"(rx105_pos, "unv", 'backtrack'=>1)
    .return (rx105_cur)
  rx105_restart428:
    repr_get_attr_obj rx105_cstack, rx105_cur, rx105_curclass, "$!cstack"
  rx105_fail429:
    unless rx105_bstack, rx105_done427
    pop $I19, rx105_bstack
    if_null rx105_cstack, rx105_cstack_done432
    unless rx105_cstack, rx105_cstack_done432
    dec $I19
    set $P11, rx105_cstack[$I19]
  rx105_cstack_done432:
    pop rx105_rep, rx105_bstack
    pop rx105_pos, rx105_bstack
    pop $I19, rx105_bstack
    lt rx105_pos, -1, rx105_done427
    lt rx105_pos, 0, rx105_fail429
    eq $I19, 0, rx105_fail429
    nqp_islist $I20, rx105_cstack
    unless $I20, rx105_jump430
    elements $I18, rx105_bstack
    le $I18, 0, rx105_cut431
    dec $I18
    set $I18, rx105_bstack[$I18]
  rx105_cut431:
    assign rx105_cstack, $I18
  rx105_jump430:
    jump $I19
  rx105_done427:
    rx105_cur."!cursor_fail"()
    .return (rx105_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_41_1349901750.327_caps" :subid("cuid_memo_12_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_41_1349901750.327_nfa" :subid("cuid_memo_13_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    box $P5007, 6
    push $P5003, $P5007
    box $P5008, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5003, $P5008
    box $P5009, 1
    push $P5003, $P5009
    box $P5010, 1
    push $P5003, $P5010
    box $P5011, 0
    push $P5003, $P5011
    box $P5012, 6
    push $P5003, $P5012
    box $P5013, 1
    push $P5003, $P5013
    box $P5014, 0
    push $P5003, $P5014
    box $P5015, 8
    push $P5003, $P5015
    push $P5001, $P5003
    new $P5016, 'ResizablePMCArray'
    box $P5017, 6
    push $P5016, $P5017
    box $P5018, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5016, $P5018
    box $P5019, 2
    push $P5016, $P5019
    box $P5020, 1
    push $P5016, $P5020
    box $P5021, 0
    push $P5016, $P5021
    box $P5022, 4
    push $P5016, $P5022
    push $P5001, $P5016
    new $P5023, 'ResizablePMCArray'
    box $P5024, 0
    push $P5023, $P5024
    box $P5025, 0
    push $P5023, $P5025
    box $P5026, 0
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 2
    push $P5027, $P5028
    box $P5029, 61
    push $P5027, $P5029
    box $P5030, 5
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 4
    push $P5031, $P5032
    box $P5033, 8192
    push $P5031, $P5033
    box $P5034, 3
    push $P5031, $P5034
    box $P5035, 2
    push $P5031, $P5035
    box $P5036, 92
    push $P5031, $P5036
    box $P5037, 3
    push $P5031, $P5037
    push $P5001, $P5031
    new $P5038, 'ResizablePMCArray'
    box $P5039, 2
    push $P5038, $P5039
    box $P5040, 35
    push $P5038, $P5040
    box $P5041, 7
    push $P5038, $P5041
    push $P5001, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 5
    push $P5042, $P5043
    box $P5044, 4096
    push $P5042, $P5044
    box $P5045, 7
    push $P5042, $P5045
    box $P5046, 1
    push $P5042, $P5046
    box $P5047, 0
    push $P5042, $P5047
    box $P5048, 0
    push $P5042, $P5048
    push $P5001, $P5042
    new $P5049, 'ResizablePMCArray'
    box $P5050, 6
    push $P5049, $P5050
    box $P5051, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5049, $P5051
    box $P5052, 9
    push $P5049, $P5052
    push $P5001, $P5049
    new $P5053, 'ResizablePMCArray'
    box $P5054, 1
    push $P5053, $P5054
    box $P5055, 0
    push $P5053, $P5055
    box $P5056, 8
    push $P5053, $P5056
    box $P5057, 1
    push $P5053, $P5057
    box $P5058, 0
    push $P5053, $P5058
    box $P5059, 0
    push $P5053, $P5059
    push $P5001, $P5053
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_41_1349901750.327_alt_nfa__4_1349901751.648" :subid("cuid_memo_14_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 1
    push $P5004, $P5005
    box $P5006, 0
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 6
    push $P5008, $P5009
    box $P5010, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5008, $P5010
    box $P5011, 2
    push $P5008, $P5011
    box $P5012, 1
    push $P5008, $P5012
    box $P5013, 0
    push $P5008, $P5013
    box $P5014, 4
    push $P5008, $P5014
    push $P5002, $P5008
    new $P5015, 'ResizablePMCArray'
    box $P5016, 0
    push $P5015, $P5016
    box $P5017, 0
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5002, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 61
    push $P5019, $P5021
    box $P5022, 5
    push $P5019, $P5022
    push $P5002, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 4
    push $P5023, $P5024
    box $P5025, 8192
    push $P5023, $P5025
    box $P5026, 3
    push $P5023, $P5026
    box $P5027, 2
    push $P5023, $P5027
    box $P5028, 92
    push $P5023, $P5028
    box $P5029, 3
    push $P5023, $P5029
    push $P5002, $P5023
    push $P5001, $P5002
    new $P5030, 'ResizablePMCArray'
    new $P5031, 'ResizablePMCArray'
    push $P5030, $P5031
    new $P5032, 'ResizablePMCArray'
    box $P5033, 6
    push $P5032, $P5033
    box $P5034, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5032, $P5034
    box $P5035, 1
    push $P5032, $P5035
    box $P5036, 1
    push $P5032, $P5036
    box $P5037, 0
    push $P5032, $P5037
    box $P5038, 2
    push $P5032, $P5038
    push $P5030, $P5032
    new $P5039, 'ResizablePMCArray'
    box $P5040, 2
    push $P5039, $P5040
    box $P5041, 35
    push $P5039, $P5041
    box $P5042, 3
    push $P5039, $P5042
    push $P5030, $P5039
    new $P5043, 'ResizablePMCArray'
    box $P5044, 5
    push $P5043, $P5044
    box $P5045, 4096
    push $P5043, $P5045
    box $P5046, 3
    push $P5043, $P5046
    box $P5047, 1
    push $P5043, $P5047
    box $P5048, 0
    push $P5043, $P5048
    box $P5049, 0
    push $P5043, $P5049
    push $P5030, $P5043
    push $P5001, $P5030
    new $P5050, 'ResizablePMCArray'
    new $P5051, 'ResizablePMCArray'
    push $P5050, $P5051
    new $P5052, 'ResizablePMCArray'
    box $P5053, 1
    push $P5052, $P5053
    box $P5054, 0
    push $P5052, $P5054
    box $P5055, 2
    push $P5052, $P5055
    push $P5050, $P5052
    new $P5056, 'ResizablePMCArray'
    box $P5057, 6
    push $P5056, $P5057
    box $P5058, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5056, $P5058
    box $P5059, 3
    push $P5056, $P5059
    push $P5050, $P5056
    new $P5060, 'ResizablePMCArray'
    box $P5061, 1
    push $P5060, $P5061
    box $P5062, 0
    push $P5060, $P5062
    box $P5063, 2
    push $P5060, $P5063
    box $P5064, 1
    push $P5060, $P5064
    box $P5065, 0
    push $P5060, $P5065
    box $P5066, 0
    push $P5060, $P5066
    push $P5050, $P5060
    push $P5001, $P5050
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_40_1349901750.327") :anon :lex :outer("cuid_41_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx109_tgt
    .local int rx109_pos
    .local int rx109_off
    .local int rx109_eos
    .local int rx109_rep
    .local pmc rx109_cur
    .local pmc rx109_curclass
    .local pmc rx109_bstack
    .local pmc rx109_cstack
    (rx109_cur, rx109_tgt, rx109_pos, rx109_curclass, rx109_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx109_cur
    length rx109_eos, rx109_tgt
    eq $I19, 1, rx109_restart441
    gt rx109_pos, rx109_eos, rx109_fail442
    repr_get_attr_int $I11, self, rx109_curclass, "$!from"
    ne $I11, -1, rxscan110_done448
    goto rxscan110_scan447
  rxscan110_loop446:
    inc rx109_pos
    gt rx109_pos, rx109_eos, rx109_fail442
    repr_bind_attr_int rx109_cur, rx109_curclass, "$!from", rx109_pos
  rxscan110_scan447:
    nqp_rxmark rx109_bstack, rxscan110_loop446, rx109_pos, 0
  rxscan110_done448:
    nqp_rxmark rx109_bstack, rxquantr111_done450, rx109_pos, 0
  rxquantr111_loop449:
    ge rx109_pos, rx109_eos, rx109_fail442
    substr $S11, rx109_tgt, rx109_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx109_fail442
    inc rx109_pos
    nqp_rxpeek $I19, rx109_bstack, rxquantr111_done450
    inc $I19
    inc $I19
    set rx109_rep, rx109_bstack[$I19]
    nqp_rxcommit rx109_bstack, rxquantr111_done450
    inc rx109_rep
    nqp_rxmark rx109_bstack, rxquantr111_done450, rx109_pos, rx109_rep
    goto rxquantr111_loop449
  rxquantr111_done450:
    add $I11, rx109_pos, 1
    gt $I11, rx109_eos, rx109_fail442
    substr $S10, rx109_tgt, rx109_pos, 1
    ne $S10, ucs4:"=", rx109_fail442
    add rx109_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt112_0452
    nqp_push_label $P11, alt112_1453
    nqp_rxmark rx109_bstack, alt112_end451, -1, 0
    rx109_cur."!alt"(rx109_pos, "alt_nfa__3_1349901751.639", $P11)
    goto rx109_fail442
  alt112_0452:
    ge rx109_pos, rx109_eos, rx109_fail442
    is_cclass $I11, .CCLASS_WORD, rx109_tgt, rx109_pos
    unless $I11, rx109_fail442
    add rx109_pos, 1
    goto alt112_end451
  alt112_1453:
    add $I11, rx109_pos, 1
    gt $I11, rx109_eos, rx109_fail442
    substr $S10, rx109_tgt, rx109_pos, 1
    ne $S10, ucs4:"\\", rx109_fail442
    add rx109_pos, 1
    goto alt112_end451
  alt112_end451:
    nqp_rxcommit rx109_bstack, alt112_end451
    rx109_cur."!cursor_pass"(rx109_pos, 'backtrack'=>1)
    .return (rx109_cur)
  rx109_restart441:
    repr_get_attr_obj rx109_cstack, rx109_cur, rx109_curclass, "$!cstack"
  rx109_fail442:
    unless rx109_bstack, rx109_done440
    pop $I19, rx109_bstack
    if_null rx109_cstack, rx109_cstack_done445
    unless rx109_cstack, rx109_cstack_done445
    dec $I19
    set $P11, rx109_cstack[$I19]
  rx109_cstack_done445:
    pop rx109_rep, rx109_bstack
    pop rx109_pos, rx109_bstack
    pop $I19, rx109_bstack
    lt rx109_pos, -1, rx109_done440
    lt rx109_pos, 0, rx109_fail442
    eq $I19, 0, rx109_fail442
    nqp_islist $I20, rx109_cstack
    unless $I20, rx109_jump443
    elements $I18, rx109_bstack
    le $I18, 0, rx109_cut444
    dec $I18
    set $I18, rx109_bstack[$I18]
  rx109_cut444:
    assign rx109_cstack, $I18
  rx109_jump443:
    jump $I19
  rx109_done440:
    rx109_cur."!cursor_fail"()
    .return (rx109_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_40_1349901750.327_caps" :subid("cuid_memo_15_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_40_1349901750.327_nfa" :subid("cuid_memo_16_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5003, $P5005
    box $P5006, 1
    push $P5003, $P5006
    box $P5007, 1
    push $P5003, $P5007
    box $P5008, 0
    push $P5003, $P5008
    box $P5009, 2
    push $P5003, $P5009
    push $P5001, $P5003
    new $P5010, 'ResizablePMCArray'
    box $P5011, 2
    push $P5010, $P5011
    box $P5012, 61
    push $P5010, $P5012
    box $P5013, 3
    push $P5010, $P5013
    push $P5001, $P5010
    new $P5014, 'ResizablePMCArray'
    box $P5015, 4
    push $P5014, $P5015
    box $P5016, 8192
    push $P5014, $P5016
    box $P5017, 0
    push $P5014, $P5017
    box $P5018, 2
    push $P5014, $P5018
    box $P5019, 92
    push $P5014, $P5019
    box $P5020, 0
    push $P5014, $P5020
    push $P5001, $P5014
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_40_1349901750.327_alt_nfa__3_1349901751.639" :subid("cuid_memo_17_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 4
    push $P5004, $P5005
    box $P5006, 8192
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 2
    push $P5010, $P5011
    box $P5012, 92
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    push $P5008, $P5010
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "pod_comment" :subid("cuid_43_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 666
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_42_1349901750.327' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx117_tgt
    .local int rx117_pos
    .local int rx117_off
    .local int rx117_eos
    .local int rx117_rep
    .local pmc rx117_cur
    .local pmc rx117_curclass
    .local pmc rx117_bstack
    .local pmc rx117_cstack
    (rx117_cur, rx117_tgt, rx117_pos, rx117_curclass, rx117_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx117_cur
    length rx117_eos, rx117_tgt
    eq $I19, 1, rx117_restart465
    gt rx117_pos, rx117_eos, rx117_fail466
    repr_get_attr_int $I11, self, rx117_curclass, "$!from"
    ne $I11, -1, rxscan118_done472
    goto rxscan118_scan471
  rxscan118_loop470:
    inc rx117_pos
    gt rx117_pos, rx117_eos, rx117_fail466
    repr_bind_attr_int rx117_cur, rx117_curclass, "$!from", rx117_pos
  rxscan118_scan471:
    nqp_rxmark rx117_bstack, rxscan118_loop470, rx117_pos, 0
  rxscan118_done472:
    eq rx117_pos, 0, rxanchor119_done473
    ge rx117_pos, rx117_eos, rx117_fail466
    sub $I11, rx117_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx117_tgt, $I11
    unless $I11, rx117_fail466
  rxanchor119_done473:
    nqp_rxmark rx117_bstack, rxquantr120_done475, rx117_pos, 0
  rxquantr120_loop474:
    ge rx117_pos, rx117_eos, rx117_fail466
    substr $S11, rx117_tgt, rx117_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx117_fail466
    inc rx117_pos
    nqp_rxpeek $I19, rx117_bstack, rxquantr120_done475
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr120_done475
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr120_done475, rx117_pos, rx117_rep
    goto rxquantr120_loop474
  rxquantr120_done475:
    add $I11, rx117_pos, 1
    gt $I11, rx117_eos, rx117_fail466
    substr $S10, rx117_tgt, rx117_pos, 1
    ne $S10, ucs4:"=", rx117_fail466
    add rx117_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt121_0477
    nqp_push_label $P11, alt121_1496
    nqp_push_label $P11, alt121_2515
    nqp_push_label $P11, alt121_3537
    nqp_push_label $P11, alt121_4562
    nqp_rxmark rx117_bstack, alt121_end476, -1, 0
    rx117_cur."!alt"(rx117_pos, "alt_nfa__6_1349901751.735", $P11)
    goto rx117_fail466
  alt121_0477:
    add $I11, rx117_pos, 5
    gt $I11, rx117_eos, rx117_fail466
    substr $S10, rx117_tgt, rx117_pos, 5
    ne $S10, ucs4:"begin", rx117_fail466
    add rx117_pos, 5
    nqp_rxmark rx117_bstack, rxquantr122_done479, -1, 0
  rxquantr122_loop478:
    ge rx117_pos, rx117_eos, rx117_fail466
    substr $S11, rx117_tgt, rx117_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx117_fail466
    inc rx117_pos
    nqp_rxpeek $I19, rx117_bstack, rxquantr122_done479
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr122_done479
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr122_done479, rx117_pos, rx117_rep
    goto rxquantr122_loop478
  rxquantr122_done479:
    add $I11, rx117_pos, 3
    gt $I11, rx117_eos, rx117_fail466
    substr $S10, rx117_tgt, rx117_pos, 3
    ne $S10, ucs4:"END", rx117_fail466
    add rx117_pos, 3
    le rx117_pos, 0, rx117_fail466
    is_cclass $I11, .CCLASS_WORD, rx117_tgt, rx117_pos
    if $I11, rx117_fail466
    sub $I11, rx117_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx117_tgt, $I11
    unless $I11, rx117_fail466
  alt124_0482:
    nqp_rxmark rx117_bstack, alt124_1493, rx117_pos, 0
    set rx117_rep, 0
    nqp_rxmark rx117_bstack, rxquantf125_loop483, rx117_pos, rx117_rep
    goto rxquantf125_done484
  rxquantf125_loop483:
    set $I12, rx117_rep
    ge rx117_pos, rx117_eos, rx117_fail466
    add rx117_pos, 1
    set rx117_rep, $I12
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantf125_loop483, rx117_pos, rx117_rep
  rxquantf125_done484:
    ge rx117_pos, rx117_eos, rx117_fail466
    is_cclass $I11, .CCLASS_NEWLINE, rx117_tgt, rx117_pos
    unless $I11, rx117_fail466
    substr $S10, rx117_tgt, rx117_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx117_pos, $I11
    add rx117_pos, 1
    nqp_rxmark rx117_bstack, rxquantr126_done487, rx117_pos, 0
  rxquantr126_loop486:
    ge rx117_pos, rx117_eos, rx117_fail466
    substr $S11, rx117_tgt, rx117_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx117_fail466
    inc rx117_pos
    nqp_rxpeek $I19, rx117_bstack, rxquantr126_done487
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr126_done487
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr126_done487, rx117_pos, rx117_rep
    goto rxquantr126_loop486
  rxquantr126_done487:
    add $I11, rx117_pos, 4
    gt $I11, rx117_eos, rx117_fail466
    substr $S10, rx117_tgt, rx117_pos, 4
    ne $S10, ucs4:"=end", rx117_fail466
    add rx117_pos, 4
    nqp_rxmark rx117_bstack, rxquantr127_done489, -1, 0
  rxquantr127_loop488:
    ge rx117_pos, rx117_eos, rx117_fail466
    substr $S11, rx117_tgt, rx117_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx117_fail466
    inc rx117_pos
    nqp_rxpeek $I19, rx117_bstack, rxquantr127_done489
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr127_done489
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr127_done489, rx117_pos, rx117_rep
    goto rxquantr127_loop488
  rxquantr127_done489:
    add $I11, rx117_pos, 3
    gt $I11, rx117_eos, rx117_fail466
    substr $S10, rx117_tgt, rx117_pos, 3
    ne $S10, ucs4:"END", rx117_fail466
    add rx117_pos, 3
    le rx117_pos, 0, rx117_fail466
    is_cclass $I11, .CCLASS_WORD, rx117_tgt, rx117_pos
    if $I11, rx117_fail466
    sub $I11, rx117_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx117_tgt, $I11
    unless $I11, rx117_fail466
    nqp_rxmark rx117_bstack, rxquantr129_done492, rx117_pos, 0
  rxquantr129_loop491:
    ge rx117_pos, rx117_eos, rx117_fail466
    is_cclass $I11, .CCLASS_NEWLINE, rx117_tgt, rx117_pos
    if $I11, rx117_fail466
    add rx117_pos, 1
    nqp_rxpeek $I19, rx117_bstack, rxquantr129_done492
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr129_done492
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr129_done492, rx117_pos, rx117_rep
    goto rxquantr129_loop491
  rxquantr129_done492:
    goto alt124_end481
  alt124_1493:
    nqp_rxmark rx117_bstack, rxquantr130_done495, rx117_pos, 0
  rxquantr130_loop494:
    ge rx117_pos, rx117_eos, rx117_fail466
    add rx117_pos, 1
    nqp_rxpeek $I19, rx117_bstack, rxquantr130_done495
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr130_done495
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr130_done495, rx117_pos, rx117_rep
    goto rxquantr130_loop494
  rxquantr130_done495:
  alt124_end481:
    goto alt121_end476
  alt121_1496:
    add $I11, rx117_pos, 5
    gt $I11, rx117_eos, rx117_fail466
    substr $S10, rx117_tgt, rx117_pos, 5
    ne $S10, ucs4:"begin", rx117_fail466
    add rx117_pos, 5
    nqp_rxmark rx117_bstack, rxquantr131_done498, -1, 0
  rxquantr131_loop497:
    ge rx117_pos, rx117_eos, rx117_fail466
    substr $S11, rx117_tgt, rx117_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx117_fail466
    inc rx117_pos
    nqp_rxpeek $I19, rx117_bstack, rxquantr131_done498
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr131_done498
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr131_done498, rx117_pos, rx117_rep
    goto rxquantr131_loop497
  rxquantr131_done498:
    repr_bind_attr_int rx117_cur, rx117_curclass, "$!pos", rx117_pos
    $P11 = rx117_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx117_curclass, "$!pos"
    lt $I11, 0, rx117_fail466
    nqp_rxmark rx117_bstack, rxsubrule132_pass499, -1, 0
  rxsubrule132_pass499:
    rx117_cstack = rx117_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx117_pos, $P11, rx117_curclass, "$!pos"
  alt133_0501:
    nqp_rxmark rx117_bstack, alt133_1513, rx117_pos, 0
    set rx117_rep, 0
    nqp_rxmark rx117_bstack, rxquantf134_loop502, rx117_pos, rx117_rep
    goto rxquantf134_done503
  rxquantf134_loop502:
    set $I12, rx117_rep
    ge rx117_pos, rx117_eos, rx117_fail466
    add rx117_pos, 1
    set rx117_rep, $I12
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantf134_loop502, rx117_pos, rx117_rep
  rxquantf134_done503:
    ge rx117_pos, rx117_eos, rx117_fail466
    is_cclass $I11, .CCLASS_NEWLINE, rx117_tgt, rx117_pos
    unless $I11, rx117_fail466
    substr $S10, rx117_tgt, rx117_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx117_pos, $I11
    add rx117_pos, 1
    nqp_rxmark rx117_bstack, rxquantr135_done506, rx117_pos, 0
  rxquantr135_loop505:
    ge rx117_pos, rx117_eos, rx117_fail466
    substr $S11, rx117_tgt, rx117_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx117_fail466
    inc rx117_pos
    nqp_rxpeek $I19, rx117_bstack, rxquantr135_done506
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr135_done506
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr135_done506, rx117_pos, rx117_rep
    goto rxquantr135_loop505
  rxquantr135_done506:
    add $I11, rx117_pos, 4
    gt $I11, rx117_eos, rx117_fail466
    substr $S10, rx117_tgt, rx117_pos, 4
    ne $S10, ucs4:"=end", rx117_fail466
    add rx117_pos, 4
    nqp_rxmark rx117_bstack, rxquantr136_done508, -1, 0
  rxquantr136_loop507:
    ge rx117_pos, rx117_eos, rx117_fail466
    substr $S11, rx117_tgt, rx117_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx117_fail466
    inc rx117_pos
    nqp_rxpeek $I19, rx117_bstack, rxquantr136_done508
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr136_done508
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr136_done508, rx117_pos, rx117_rep
    goto rxquantr136_loop507
  rxquantr136_done508:
    repr_bind_attr_int rx117_cur, rx117_curclass, "$!pos", rx117_pos
    $P11 = rx117_cur."!BACKREF"("identifier")
    repr_get_attr_int $I11, $P11, rx117_curclass, "$!pos"
    lt $I11, 0, rx117_fail466
    repr_get_attr_int rx117_pos, $P11, rx117_curclass, "$!pos"
    le rx117_pos, 0, rx117_fail466
    is_cclass $I11, .CCLASS_WORD, rx117_tgt, rx117_pos
    if $I11, rx117_fail466
    sub $I11, rx117_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx117_tgt, $I11
    unless $I11, rx117_fail466
    nqp_rxmark rx117_bstack, rxquantr139_done512, rx117_pos, 0
  rxquantr139_loop511:
    ge rx117_pos, rx117_eos, rx117_fail466
    is_cclass $I11, .CCLASS_NEWLINE, rx117_tgt, rx117_pos
    if $I11, rx117_fail466
    add rx117_pos, 1
    nqp_rxpeek $I19, rx117_bstack, rxquantr139_done512
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr139_done512
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr139_done512, rx117_pos, rx117_rep
    goto rxquantr139_loop511
  rxquantr139_done512:
    goto alt133_end500
  alt133_1513:
    repr_bind_attr_int rx117_cur, rx117_curclass, "$!pos", rx117_pos
    $P11 = rx117_cur."panic"("=begin without matching =end")
    repr_get_attr_int $I11, $P11, rx117_curclass, "$!pos"
    lt $I11, 0, rx117_fail466
    repr_get_attr_int rx117_pos, $P11, rx117_curclass, "$!pos"
  alt133_end500:
    goto alt121_end476
  alt121_2515:
    add $I11, rx117_pos, 5
    gt $I11, rx117_eos, rx117_fail466
    substr $S10, rx117_tgt, rx117_pos, 5
    ne $S10, ucs4:"begin", rx117_fail466
    add rx117_pos, 5
    le rx117_pos, 0, rx117_fail466
    is_cclass $I11, .CCLASS_WORD, rx117_tgt, rx117_pos
    if $I11, rx117_fail466
    sub $I11, rx117_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx117_tgt, $I11
    unless $I11, rx117_fail466
    nqp_rxmark rx117_bstack, rxquantr142_done518, rx117_pos, 0
  rxquantr142_loop517:
    ge rx117_pos, rx117_eos, rx117_fail466
    substr $S11, rx117_tgt, rx117_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx117_fail466
    inc rx117_pos
    nqp_rxpeek $I19, rx117_bstack, rxquantr142_done518
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr142_done518
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr142_done518, rx117_pos, rx117_rep
    goto rxquantr142_loop517
  rxquantr142_done518:
  alt143_0520:
    nqp_rxmark rx117_bstack, alt143_1522, rx117_pos, 0
    is_cclass $I11, .CCLASS_NEWLINE, rx117_tgt, rx117_pos
    if $I11, rxanchor144_done521
    ne rx117_pos, rx117_eos, rx117_fail466
    eq rx117_pos, 0, rxanchor144_done521
    sub $I11, rx117_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx117_tgt, $I11
    if $I11, rx117_fail466
  rxanchor144_done521:
    goto alt143_end519
  alt143_1522:
    nqp_rxmark rx117_bstack, alt143_2523, rx117_pos, 0
    add $I11, rx117_pos, 1
    gt $I11, rx117_eos, rx117_fail466
    substr $S10, rx117_tgt, rx117_pos, 1
    ne $S10, ucs4:"#", rx117_fail466
    add rx117_pos, 1
    goto alt143_end519
  alt143_2523:
    repr_bind_attr_int rx117_cur, rx117_curclass, "$!pos", rx117_pos
    $P11 = rx117_cur."panic"("Unrecognized token after =begin")
    repr_get_attr_int $I11, $P11, rx117_curclass, "$!pos"
    lt $I11, 0, rx117_fail466
    repr_get_attr_int rx117_pos, $P11, rx117_curclass, "$!pos"
  alt143_end519:
  alt146_0526:
    nqp_rxmark rx117_bstack, alt146_1535, rx117_pos, 0
    set rx117_rep, 0
    nqp_rxmark rx117_bstack, rxquantf147_loop527, rx117_pos, rx117_rep
    goto rxquantf147_done528
  rxquantf147_loop527:
    set $I12, rx117_rep
    ge rx117_pos, rx117_eos, rx117_fail466
    add rx117_pos, 1
    set rx117_rep, $I12
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantf147_loop527, rx117_pos, rx117_rep
  rxquantf147_done528:
    ge rx117_pos, rx117_eos, rx117_fail466
    is_cclass $I11, .CCLASS_NEWLINE, rx117_tgt, rx117_pos
    unless $I11, rx117_fail466
    substr $S10, rx117_tgt, rx117_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx117_pos, $I11
    add rx117_pos, 1
    nqp_rxmark rx117_bstack, rxquantr148_done531, rx117_pos, 0
  rxquantr148_loop530:
    ge rx117_pos, rx117_eos, rx117_fail466
    substr $S11, rx117_tgt, rx117_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx117_fail466
    inc rx117_pos
    nqp_rxpeek $I19, rx117_bstack, rxquantr148_done531
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr148_done531
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr148_done531, rx117_pos, rx117_rep
    goto rxquantr148_loop530
  rxquantr148_done531:
    add $I11, rx117_pos, 4
    gt $I11, rx117_eos, rx117_fail466
    substr $S10, rx117_tgt, rx117_pos, 4
    ne $S10, ucs4:"=end", rx117_fail466
    add rx117_pos, 4
    le rx117_pos, 0, rx117_fail466
    is_cclass $I11, .CCLASS_WORD, rx117_tgt, rx117_pos
    if $I11, rx117_fail466
    sub $I11, rx117_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx117_tgt, $I11
    unless $I11, rx117_fail466
    nqp_rxmark rx117_bstack, rxquantr150_done534, rx117_pos, 0
  rxquantr150_loop533:
    ge rx117_pos, rx117_eos, rx117_fail466
    is_cclass $I11, .CCLASS_NEWLINE, rx117_tgt, rx117_pos
    if $I11, rx117_fail466
    add rx117_pos, 1
    nqp_rxpeek $I19, rx117_bstack, rxquantr150_done534
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr150_done534
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr150_done534, rx117_pos, rx117_rep
    goto rxquantr150_loop533
  rxquantr150_done534:
    goto alt146_end525
  alt146_1535:
    repr_bind_attr_int rx117_cur, rx117_curclass, "$!pos", rx117_pos
    $P11 = rx117_cur."panic"("=begin without matching =end")
    repr_get_attr_int $I11, $P11, rx117_curclass, "$!pos"
    lt $I11, 0, rx117_fail466
    repr_get_attr_int rx117_pos, $P11, rx117_curclass, "$!pos"
  alt146_end525:
    goto alt121_end476
  alt121_3537:
    repr_bind_attr_int rx117_cur, rx117_curclass, "$!pos", rx117_pos
    $P11 = rx117_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx117_curclass, "$!pos"
    lt $I11, 0, rx117_fail466
    nqp_rxmark rx117_bstack, rxsubrule152_pass538, -1, 0
  rxsubrule152_pass538:
    rx117_cstack = rx117_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx117_pos, $P11, rx117_curclass, "$!pos"
    set rx117_rep, 0
    nqp_rxmark rx117_bstack, rxquantf153_loop539, rx117_pos, rx117_rep
    goto rxquantf153_done540
  rxquantf153_loop539:
    set $I12, rx117_rep
    ge rx117_pos, rx117_eos, rx117_fail466
    add rx117_pos, 1
    set rx117_rep, $I12
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantf153_loop539, rx117_pos, rx117_rep
  rxquantf153_done540:
    eq rx117_pos, 0, rxanchor154_done542
    ge rx117_pos, rx117_eos, rx117_fail466
    sub $I11, rx117_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx117_tgt, $I11
    unless $I11, rx117_fail466
  rxanchor154_done542:
    .const 'Sub' $P5001 = 'cuid_42_1349901750.327' 
    capture_lex $P5001
    repr_bind_attr_int rx117_cur, rx117_curclass, "$!pos", rx117_pos
    $P11 = rx117_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx117_curclass, "$!pos"
    lt $I11, 0, rx117_fail466
    goto alt121_end476
  alt121_4562:
  alt162_0564:
    nqp_rxmark rx117_bstack, alt162_1565, rx117_pos, 0
    ge rx117_pos, rx117_eos, rx117_fail466
    is_cclass $I11, .CCLASS_WHITESPACE, rx117_tgt, rx117_pos
    unless $I11, rx117_fail466
    add rx117_pos, 1
    goto alt162_end563
  alt162_1565:
    repr_bind_attr_int rx117_cur, rx117_curclass, "$!pos", rx117_pos
    $P11 = rx117_cur."panic"("Illegal pod directive")
    repr_get_attr_int $I11, $P11, rx117_curclass, "$!pos"
    lt $I11, 0, rx117_fail466
    repr_get_attr_int rx117_pos, $P11, rx117_curclass, "$!pos"
  alt162_end563:
    nqp_rxmark rx117_bstack, rxquantr164_done568, rx117_pos, 0
  rxquantr164_loop567:
    ge rx117_pos, rx117_eos, rx117_fail466
    is_cclass $I11, .CCLASS_NEWLINE, rx117_tgt, rx117_pos
    if $I11, rx117_fail466
    add rx117_pos, 1
    nqp_rxpeek $I19, rx117_bstack, rxquantr164_done568
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr164_done568
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr164_done568, rx117_pos, rx117_rep
    goto rxquantr164_loop567
  rxquantr164_done568:
    goto alt121_end476
  alt121_end476:
    nqp_rxcommit rx117_bstack, alt121_end476
    rx117_cur."!cursor_pass"(rx117_pos, "pod_comment", 'backtrack'=>1)
    .return (rx117_cur)
  rx117_restart465:
    repr_get_attr_obj rx117_cstack, rx117_cur, rx117_curclass, "$!cstack"
  rx117_fail466:
    unless rx117_bstack, rx117_done464
    pop $I19, rx117_bstack
    if_null rx117_cstack, rx117_cstack_done469
    unless rx117_cstack, rx117_cstack_done469
    dec $I19
    set $P11, rx117_cstack[$I19]
  rx117_cstack_done469:
    pop rx117_rep, rx117_bstack
    pop rx117_pos, rx117_bstack
    pop $I19, rx117_bstack
    lt rx117_pos, -1, rx117_done464
    lt rx117_pos, 0, rx117_fail466
    eq $I19, 0, rx117_fail466
    nqp_islist $I20, rx117_cstack
    unless $I20, rx117_jump467
    elements $I18, rx117_bstack
    le $I18, 0, rx117_cut468
    dec $I18
    set $I18, rx117_bstack[$I18]
  rx117_cut468:
    assign rx117_cstack, $I18
  rx117_jump467:
    jump $I19
  rx117_done464:
    rx117_cur."!cursor_fail"()
    .return (rx117_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_43_1349901750.327_caps" :subid("cuid_memo_18_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["identifier"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_43_1349901750.327_nfa" :subid("cuid_memo_19_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 6
    push $P5007, $P5008
    box $P5009, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5007, $P5009
    box $P5010, 2
    push $P5007, $P5010
    box $P5011, 1
    push $P5007, $P5011
    box $P5012, 0
    push $P5007, $P5012
    box $P5013, 3
    push $P5007, $P5013
    push $P5001, $P5007
    new $P5014, 'ResizablePMCArray'
    box $P5015, 2
    push $P5014, $P5015
    box $P5016, 61
    push $P5014, $P5016
    box $P5017, 4
    push $P5014, $P5017
    push $P5001, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 2
    push $P5018, $P5019
    box $P5020, 98
    push $P5018, $P5020
    box $P5021, 5
    push $P5018, $P5021
    box $P5022, 2
    push $P5018, $P5022
    box $P5023, 98
    push $P5018, $P5023
    box $P5024, 17
    push $P5018, $P5024
    box $P5025, 2
    push $P5018, $P5025
    box $P5026, 98
    push $P5018, $P5026
    box $P5027, 26
    push $P5018, $P5027
    box $P5028, 8
    push $P5018, $P5028
    box $P5029, "identifier"
    push $P5018, $P5029
    box $P5030, 33
    push $P5018, $P5030
    box $P5031, 0
    push $P5018, $P5031
    box $P5032, 0
    push $P5018, $P5032
    box $P5033, 0
    push $P5018, $P5033
    push $P5001, $P5018
    new $P5034, 'ResizablePMCArray'
    box $P5035, 2
    push $P5034, $P5035
    box $P5036, 101
    push $P5034, $P5036
    box $P5037, 6
    push $P5034, $P5037
    push $P5001, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 2
    push $P5038, $P5039
    box $P5040, 103
    push $P5038, $P5040
    box $P5041, 7
    push $P5038, $P5041
    push $P5001, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 105
    push $P5042, $P5044
    box $P5045, 8
    push $P5042, $P5045
    push $P5001, $P5042
    new $P5046, 'ResizablePMCArray'
    box $P5047, 2
    push $P5046, $P5047
    box $P5048, 110
    push $P5046, $P5048
    box $P5049, 9
    push $P5046, $P5049
    push $P5001, $P5046
    new $P5050, 'ResizablePMCArray'
    box $P5051, 1
    push $P5050, $P5051
    box $P5052, 0
    push $P5050, $P5052
    box $P5053, 10
    push $P5050, $P5053
    push $P5001, $P5050
    new $P5054, 'ResizablePMCArray'
    box $P5055, 6
    push $P5054, $P5055
    box $P5056, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5054, $P5056
    box $P5057, 11
    push $P5054, $P5057
    push $P5001, $P5054
    new $P5058, 'ResizablePMCArray'
    box $P5059, 1
    push $P5058, $P5059
    box $P5060, 0
    push $P5058, $P5060
    box $P5061, 10
    push $P5058, $P5061
    box $P5062, 1
    push $P5058, $P5062
    box $P5063, 0
    push $P5058, $P5063
    box $P5064, 12
    push $P5058, $P5064
    box $P5065, 2
    push $P5058, $P5065
    box $P5066, 69
    push $P5058, $P5066
    box $P5067, 13
    push $P5058, $P5067
    push $P5001, $P5058
    new $P5068, 'ResizablePMCArray'
    push $P5001, $P5068
    new $P5069, 'ResizablePMCArray'
    box $P5070, 2
    push $P5069, $P5070
    box $P5071, 78
    push $P5069, $P5071
    box $P5072, 14
    push $P5069, $P5072
    push $P5001, $P5069
    new $P5073, 'ResizablePMCArray'
    box $P5074, 2
    push $P5073, $P5074
    box $P5075, 68
    push $P5073, $P5075
    box $P5076, 15
    push $P5073, $P5076
    push $P5001, $P5073
    new $P5077, 'ResizablePMCArray'
    box $P5078, 1
    push $P5077, $P5078
    box $P5079, 0
    push $P5077, $P5079
    box $P5080, 16
    push $P5077, $P5080
    push $P5001, $P5077
    new $P5081, 'ResizablePMCArray'
    box $P5082, 0
    push $P5081, $P5082
    box $P5083, 0
    push $P5081, $P5083
    box $P5084, 0
    push $P5081, $P5084
    push $P5001, $P5081
    new $P5085, 'ResizablePMCArray'
    box $P5086, 2
    push $P5085, $P5086
    box $P5087, 101
    push $P5085, $P5087
    box $P5088, 18
    push $P5085, $P5088
    push $P5001, $P5085
    new $P5089, 'ResizablePMCArray'
    box $P5090, 2
    push $P5089, $P5090
    box $P5091, 103
    push $P5089, $P5091
    box $P5092, 19
    push $P5089, $P5092
    push $P5001, $P5089
    new $P5093, 'ResizablePMCArray'
    box $P5094, 2
    push $P5093, $P5094
    box $P5095, 105
    push $P5093, $P5095
    box $P5096, 20
    push $P5093, $P5096
    push $P5001, $P5093
    new $P5097, 'ResizablePMCArray'
    box $P5098, 2
    push $P5097, $P5098
    box $P5099, 110
    push $P5097, $P5099
    box $P5100, 21
    push $P5097, $P5100
    push $P5001, $P5097
    new $P5101, 'ResizablePMCArray'
    box $P5102, 1
    push $P5101, $P5102
    box $P5103, 0
    push $P5101, $P5103
    box $P5104, 22
    push $P5101, $P5104
    push $P5001, $P5101
    new $P5105, 'ResizablePMCArray'
    box $P5106, 6
    push $P5105, $P5106
    box $P5107, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5105, $P5107
    box $P5108, 23
    push $P5105, $P5108
    push $P5001, $P5105
    new $P5109, 'ResizablePMCArray'
    box $P5110, 1
    push $P5109, $P5110
    box $P5111, 0
    push $P5109, $P5111
    box $P5112, 22
    push $P5109, $P5112
    box $P5113, 1
    push $P5109, $P5113
    box $P5114, 0
    push $P5109, $P5114
    box $P5115, 24
    push $P5109, $P5115
    box $P5116, 8
    push $P5109, $P5116
    box $P5117, "identifier"
    push $P5109, $P5117
    box $P5118, 25
    push $P5109, $P5118
    push $P5001, $P5109
    new $P5119, 'ResizablePMCArray'
    push $P5001, $P5119
    new $P5120, 'ResizablePMCArray'
    box $P5121, 0
    push $P5120, $P5121
    box $P5122, 0
    push $P5120, $P5122
    box $P5123, 0
    push $P5120, $P5123
    push $P5001, $P5120
    new $P5124, 'ResizablePMCArray'
    box $P5125, 2
    push $P5124, $P5125
    box $P5126, 101
    push $P5124, $P5126
    box $P5127, 27
    push $P5124, $P5127
    push $P5001, $P5124
    new $P5128, 'ResizablePMCArray'
    box $P5129, 2
    push $P5128, $P5129
    box $P5130, 103
    push $P5128, $P5130
    box $P5131, 28
    push $P5128, $P5131
    push $P5001, $P5128
    new $P5132, 'ResizablePMCArray'
    box $P5133, 2
    push $P5132, $P5133
    box $P5134, 105
    push $P5132, $P5134
    box $P5135, 29
    push $P5132, $P5135
    push $P5001, $P5132
    new $P5136, 'ResizablePMCArray'
    box $P5137, 2
    push $P5136, $P5137
    box $P5138, 110
    push $P5136, $P5138
    box $P5139, 30
    push $P5136, $P5139
    push $P5001, $P5136
    new $P5140, 'ResizablePMCArray'
    box $P5141, 1
    push $P5140, $P5141
    box $P5142, 0
    push $P5140, $P5142
    box $P5143, 31
    push $P5140, $P5143
    push $P5001, $P5140
    new $P5144, 'ResizablePMCArray'
    box $P5145, 6
    push $P5144, $P5145
    box $P5146, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5144, $P5146
    box $P5147, 31
    push $P5144, $P5147
    box $P5148, 1
    push $P5144, $P5148
    box $P5149, 0
    push $P5144, $P5149
    box $P5150, 32
    push $P5144, $P5150
    push $P5001, $P5144
    new $P5151, 'ResizablePMCArray'
    box $P5152, 0
    push $P5151, $P5152
    box $P5153, 0
    push $P5151, $P5153
    box $P5154, 0
    push $P5151, $P5154
    push $P5001, $P5151
    new $P5155, 'ResizablePMCArray'
    box $P5156, 4
    push $P5155, $P5156
    box $P5157, 65535
    push $P5155, $P5157
    box $P5158, 33
    push $P5155, $P5158
    box $P5159, 1
    push $P5155, $P5159
    box $P5160, 0
    push $P5155, $P5160
    box $P5161, 34
    push $P5155, $P5161
    push $P5001, $P5155
    new $P5162, 'ResizablePMCArray'
    box $P5163, 1
    push $P5162, $P5163
    box $P5164, 0
    push $P5162, $P5164
    box $P5165, 35
    push $P5162, $P5165
    push $P5001, $P5162
    new $P5166, 'ResizablePMCArray'
    box $P5167, 6
    push $P5166, $P5167
    box $P5168, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5166, $P5168
    box $P5169, 35
    push $P5166, $P5169
    box $P5170, 1
    push $P5166, $P5170
    box $P5171, 0
    push $P5166, $P5171
    box $P5172, 37
    push $P5166, $P5172
    push $P5001, $P5166
    new $P5173, 'ResizablePMCArray'
    box $P5174, 0
    push $P5173, $P5174
    box $P5175, 0
    push $P5173, $P5175
    box $P5176, 0
    push $P5173, $P5176
    push $P5001, $P5173
    new $P5177, 'ResizablePMCArray'
    box $P5178, 2
    push $P5177, $P5178
    box $P5179, 61
    push $P5177, $P5179
    box $P5180, 38
    push $P5177, $P5180
    box $P5181, 4
    push $P5177, $P5181
    box $P5182, 4096
    push $P5177, $P5182
    box $P5183, 36
    push $P5177, $P5183
    push $P5001, $P5177
    new $P5184, 'ResizablePMCArray'
    box $P5185, 2
    push $P5184, $P5185
    box $P5186, 99
    push $P5184, $P5186
    box $P5187, 39
    push $P5184, $P5187
    box $P5188, 1
    push $P5184, $P5188
    box $P5189, 0
    push $P5184, $P5189
    box $P5190, 36
    push $P5184, $P5190
    push $P5001, $P5184
    new $P5191, 'ResizablePMCArray'
    box $P5192, 2
    push $P5191, $P5192
    box $P5193, 117
    push $P5191, $P5193
    box $P5194, 40
    push $P5191, $P5194
    push $P5001, $P5191
    new $P5195, 'ResizablePMCArray'
    box $P5196, 2
    push $P5195, $P5196
    box $P5197, 116
    push $P5195, $P5197
    box $P5198, 41
    push $P5195, $P5198
    push $P5001, $P5195
    new $P5199, 'ResizablePMCArray'
    box $P5200, 1
    push $P5199, $P5200
    box $P5201, 0
    push $P5199, $P5201
    box $P5202, 42
    push $P5199, $P5202
    push $P5001, $P5199
    new $P5203, 'ResizablePMCArray'
    box $P5204, 8
    push $P5203, $P5204
    box $P5205, "panic"
    push $P5203, $P5205
    box $P5206, 36
    push $P5203, $P5206
    push $P5001, $P5203
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_43_1349901750.327_alt_nfa__6_1349901751.735" :subid("cuid_memo_20_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 98
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 101
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 2
    push $P5012, $P5013
    box $P5014, 103
    push $P5012, $P5014
    box $P5015, 4
    push $P5012, $P5015
    push $P5002, $P5012
    new $P5016, 'ResizablePMCArray'
    box $P5017, 2
    push $P5016, $P5017
    box $P5018, 105
    push $P5016, $P5018
    box $P5019, 5
    push $P5016, $P5019
    push $P5002, $P5016
    new $P5020, 'ResizablePMCArray'
    box $P5021, 2
    push $P5020, $P5021
    box $P5022, 110
    push $P5020, $P5022
    box $P5023, 6
    push $P5020, $P5023
    push $P5002, $P5020
    new $P5024, 'ResizablePMCArray'
    box $P5025, 1
    push $P5024, $P5025
    box $P5026, 0
    push $P5024, $P5026
    box $P5027, 7
    push $P5024, $P5027
    push $P5002, $P5024
    new $P5028, 'ResizablePMCArray'
    box $P5029, 6
    push $P5028, $P5029
    box $P5030, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5028, $P5030
    box $P5031, 8
    push $P5028, $P5031
    push $P5002, $P5028
    new $P5032, 'ResizablePMCArray'
    box $P5033, 1
    push $P5032, $P5033
    box $P5034, 0
    push $P5032, $P5034
    box $P5035, 7
    push $P5032, $P5035
    box $P5036, 1
    push $P5032, $P5036
    box $P5037, 0
    push $P5032, $P5037
    box $P5038, 9
    push $P5032, $P5038
    box $P5039, 2
    push $P5032, $P5039
    box $P5040, 69
    push $P5032, $P5040
    box $P5041, 10
    push $P5032, $P5041
    push $P5002, $P5032
    new $P5042, 'ResizablePMCArray'
    push $P5002, $P5042
    new $P5043, 'ResizablePMCArray'
    box $P5044, 2
    push $P5043, $P5044
    box $P5045, 78
    push $P5043, $P5045
    box $P5046, 11
    push $P5043, $P5046
    push $P5002, $P5043
    new $P5047, 'ResizablePMCArray'
    box $P5048, 2
    push $P5047, $P5048
    box $P5049, 68
    push $P5047, $P5049
    box $P5050, 12
    push $P5047, $P5050
    push $P5002, $P5047
    new $P5051, 'ResizablePMCArray'
    box $P5052, 1
    push $P5051, $P5052
    box $P5053, 0
    push $P5051, $P5053
    box $P5054, 13
    push $P5051, $P5054
    push $P5002, $P5051
    new $P5055, 'ResizablePMCArray'
    box $P5056, 0
    push $P5055, $P5056
    box $P5057, 0
    push $P5055, $P5057
    box $P5058, 0
    push $P5055, $P5058
    push $P5002, $P5055
    push $P5001, $P5002
    new $P5059, 'ResizablePMCArray'
    new $P5060, 'ResizablePMCArray'
    push $P5059, $P5060
    new $P5061, 'ResizablePMCArray'
    box $P5062, 2
    push $P5061, $P5062
    box $P5063, 98
    push $P5061, $P5063
    box $P5064, 2
    push $P5061, $P5064
    push $P5059, $P5061
    new $P5065, 'ResizablePMCArray'
    box $P5066, 2
    push $P5065, $P5066
    box $P5067, 101
    push $P5065, $P5067
    box $P5068, 3
    push $P5065, $P5068
    push $P5059, $P5065
    new $P5069, 'ResizablePMCArray'
    box $P5070, 2
    push $P5069, $P5070
    box $P5071, 103
    push $P5069, $P5071
    box $P5072, 4
    push $P5069, $P5072
    push $P5059, $P5069
    new $P5073, 'ResizablePMCArray'
    box $P5074, 2
    push $P5073, $P5074
    box $P5075, 105
    push $P5073, $P5075
    box $P5076, 5
    push $P5073, $P5076
    push $P5059, $P5073
    new $P5077, 'ResizablePMCArray'
    box $P5078, 2
    push $P5077, $P5078
    box $P5079, 110
    push $P5077, $P5079
    box $P5080, 6
    push $P5077, $P5080
    push $P5059, $P5077
    new $P5081, 'ResizablePMCArray'
    box $P5082, 1
    push $P5081, $P5082
    box $P5083, 0
    push $P5081, $P5083
    box $P5084, 7
    push $P5081, $P5084
    push $P5059, $P5081
    new $P5085, 'ResizablePMCArray'
    box $P5086, 6
    push $P5085, $P5086
    box $P5087, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5085, $P5087
    box $P5088, 8
    push $P5085, $P5088
    push $P5059, $P5085
    new $P5089, 'ResizablePMCArray'
    box $P5090, 1
    push $P5089, $P5090
    box $P5091, 0
    push $P5089, $P5091
    box $P5092, 7
    push $P5089, $P5092
    box $P5093, 1
    push $P5089, $P5093
    box $P5094, 0
    push $P5089, $P5094
    box $P5095, 9
    push $P5089, $P5095
    box $P5096, 8
    push $P5089, $P5096
    box $P5097, "identifier"
    push $P5089, $P5097
    box $P5098, 10
    push $P5089, $P5098
    push $P5059, $P5089
    new $P5099, 'ResizablePMCArray'
    push $P5059, $P5099
    new $P5100, 'ResizablePMCArray'
    box $P5101, 0
    push $P5100, $P5101
    box $P5102, 0
    push $P5100, $P5102
    box $P5103, 0
    push $P5100, $P5103
    push $P5059, $P5100
    push $P5001, $P5059
    new $P5104, 'ResizablePMCArray'
    new $P5105, 'ResizablePMCArray'
    push $P5104, $P5105
    new $P5106, 'ResizablePMCArray'
    box $P5107, 2
    push $P5106, $P5107
    box $P5108, 98
    push $P5106, $P5108
    box $P5109, 2
    push $P5106, $P5109
    push $P5104, $P5106
    new $P5110, 'ResizablePMCArray'
    box $P5111, 2
    push $P5110, $P5111
    box $P5112, 101
    push $P5110, $P5112
    box $P5113, 3
    push $P5110, $P5113
    push $P5104, $P5110
    new $P5114, 'ResizablePMCArray'
    box $P5115, 2
    push $P5114, $P5115
    box $P5116, 103
    push $P5114, $P5116
    box $P5117, 4
    push $P5114, $P5117
    push $P5104, $P5114
    new $P5118, 'ResizablePMCArray'
    box $P5119, 2
    push $P5118, $P5119
    box $P5120, 105
    push $P5118, $P5120
    box $P5121, 5
    push $P5118, $P5121
    push $P5104, $P5118
    new $P5122, 'ResizablePMCArray'
    box $P5123, 2
    push $P5122, $P5123
    box $P5124, 110
    push $P5122, $P5124
    box $P5125, 6
    push $P5122, $P5125
    push $P5104, $P5122
    new $P5126, 'ResizablePMCArray'
    box $P5127, 1
    push $P5126, $P5127
    box $P5128, 0
    push $P5126, $P5128
    box $P5129, 7
    push $P5126, $P5129
    push $P5104, $P5126
    new $P5130, 'ResizablePMCArray'
    box $P5131, 6
    push $P5130, $P5131
    box $P5132, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5130, $P5132
    box $P5133, 7
    push $P5130, $P5133
    box $P5134, 1
    push $P5130, $P5134
    box $P5135, 0
    push $P5130, $P5135
    box $P5136, 8
    push $P5130, $P5136
    push $P5104, $P5130
    new $P5137, 'ResizablePMCArray'
    box $P5138, 0
    push $P5137, $P5138
    box $P5139, 0
    push $P5137, $P5139
    box $P5140, 0
    push $P5137, $P5140
    push $P5104, $P5137
    push $P5001, $P5104
    new $P5141, 'ResizablePMCArray'
    new $P5142, 'ResizablePMCArray'
    push $P5141, $P5142
    new $P5143, 'ResizablePMCArray'
    box $P5144, 8
    push $P5143, $P5144
    box $P5145, "identifier"
    push $P5143, $P5145
    box $P5146, 2
    push $P5143, $P5146
    push $P5141, $P5143
    new $P5147, 'ResizablePMCArray'
    box $P5148, 4
    push $P5147, $P5148
    box $P5149, 65535
    push $P5147, $P5149
    box $P5150, 2
    push $P5147, $P5150
    box $P5151, 1
    push $P5147, $P5151
    box $P5152, 0
    push $P5147, $P5152
    box $P5153, 3
    push $P5147, $P5153
    push $P5141, $P5147
    new $P5154, 'ResizablePMCArray'
    box $P5155, 1
    push $P5154, $P5155
    box $P5156, 0
    push $P5154, $P5156
    box $P5157, 4
    push $P5154, $P5157
    push $P5141, $P5154
    new $P5158, 'ResizablePMCArray'
    box $P5159, 6
    push $P5158, $P5159
    box $P5160, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5158, $P5160
    box $P5161, 4
    push $P5158, $P5161
    box $P5162, 1
    push $P5158, $P5162
    box $P5163, 0
    push $P5158, $P5163
    box $P5164, 6
    push $P5158, $P5164
    push $P5141, $P5158
    new $P5165, 'ResizablePMCArray'
    box $P5166, 0
    push $P5165, $P5166
    box $P5167, 0
    push $P5165, $P5167
    box $P5168, 0
    push $P5165, $P5168
    push $P5141, $P5165
    new $P5169, 'ResizablePMCArray'
    box $P5170, 2
    push $P5169, $P5170
    box $P5171, 61
    push $P5169, $P5171
    box $P5172, 7
    push $P5169, $P5172
    box $P5173, 4
    push $P5169, $P5173
    box $P5174, 4096
    push $P5169, $P5174
    box $P5175, 5
    push $P5169, $P5175
    push $P5141, $P5169
    new $P5176, 'ResizablePMCArray'
    box $P5177, 2
    push $P5176, $P5177
    box $P5178, 99
    push $P5176, $P5178
    box $P5179, 8
    push $P5176, $P5179
    box $P5180, 1
    push $P5176, $P5180
    box $P5181, 0
    push $P5176, $P5181
    box $P5182, 5
    push $P5176, $P5182
    push $P5141, $P5176
    new $P5183, 'ResizablePMCArray'
    box $P5184, 2
    push $P5183, $P5184
    box $P5185, 117
    push $P5183, $P5185
    box $P5186, 9
    push $P5183, $P5186
    push $P5141, $P5183
    new $P5187, 'ResizablePMCArray'
    box $P5188, 2
    push $P5187, $P5188
    box $P5189, 116
    push $P5187, $P5189
    box $P5190, 10
    push $P5187, $P5190
    push $P5141, $P5187
    new $P5191, 'ResizablePMCArray'
    box $P5192, 1
    push $P5191, $P5192
    box $P5193, 0
    push $P5191, $P5193
    box $P5194, 11
    push $P5191, $P5194
    push $P5141, $P5191
    new $P5195, 'ResizablePMCArray'
    box $P5196, 8
    push $P5195, $P5196
    box $P5197, "panic"
    push $P5195, $P5197
    box $P5198, 5
    push $P5195, $P5198
    push $P5141, $P5195
    push $P5001, $P5141
    new $P5199, 'ResizablePMCArray'
    new $P5200, 'ResizablePMCArray'
    push $P5199, $P5200
    new $P5201, 'ResizablePMCArray'
    box $P5202, 0
    push $P5201, $P5202
    box $P5203, 0
    push $P5201, $P5203
    box $P5204, 0
    push $P5201, $P5204
    box $P5205, 0
    push $P5201, $P5205
    box $P5206, 0
    push $P5201, $P5206
    box $P5207, 0
    push $P5201, $P5207
    push $P5199, $P5201
    push $P5001, $P5199
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_42_1349901750.327") :anon :lex :outer("cuid_43_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx155_tgt
    .local int rx155_pos
    .local int rx155_off
    .local int rx155_eos
    .local int rx155_rep
    .local pmc rx155_cur
    .local pmc rx155_curclass
    .local pmc rx155_bstack
    .local pmc rx155_cstack
    (rx155_cur, rx155_tgt, rx155_pos, rx155_curclass, rx155_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx155_cur
    length rx155_eos, rx155_tgt
    eq $I19, 1, rx155_restart545
    gt rx155_pos, rx155_eos, rx155_fail546
    repr_get_attr_int $I11, self, rx155_curclass, "$!from"
    ne $I11, -1, rxscan156_done552
    goto rxscan156_scan551
  rxscan156_loop550:
    inc rx155_pos
    gt rx155_pos, rx155_eos, rx155_fail546
    repr_bind_attr_int rx155_cur, rx155_curclass, "$!from", rx155_pos
  rxscan156_scan551:
    nqp_rxmark rx155_bstack, rxscan156_loop550, rx155_pos, 0
  rxscan156_done552:
    nqp_rxmark rx155_bstack, rxquantr157_done554, rx155_pos, 0
  rxquantr157_loop553:
    ge rx155_pos, rx155_eos, rx155_fail546
    substr $S11, rx155_tgt, rx155_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx155_fail546
    inc rx155_pos
    nqp_rxpeek $I19, rx155_bstack, rxquantr157_done554
    inc $I19
    inc $I19
    set rx155_rep, rx155_bstack[$I19]
    nqp_rxcommit rx155_bstack, rxquantr157_done554
    inc rx155_rep
    nqp_rxmark rx155_bstack, rxquantr157_done554, rx155_pos, rx155_rep
    goto rxquantr157_loop553
  rxquantr157_done554:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt158_0556
    nqp_push_label $P11, alt158_1561
    nqp_rxmark rx155_bstack, alt158_end555, -1, 0
    rx155_cur."!alt"(rx155_pos, "alt_nfa__5_1349901751.72", $P11)
    goto rx155_fail546
  alt158_0556:
    add $I11, rx155_pos, 1
    gt $I11, rx155_eos, rx155_fail546
    substr $S10, rx155_tgt, rx155_pos, 1
    ne $S10, ucs4:"=", rx155_fail546
    add rx155_pos, 1
    nqp_rxmark rx155_bstack, rxquantr159_done558, rx155_pos, 0
  rxquantr159_loop557:
    add $I11, rx155_pos, 3
    gt $I11, rx155_eos, rx155_fail546
    substr $S10, rx155_tgt, rx155_pos, 3
    ne $S10, ucs4:"cut", rx155_fail546
    add rx155_pos, 3
    le rx155_pos, 0, rx155_fail546
    is_cclass $I11, .CCLASS_WORD, rx155_tgt, rx155_pos
    if $I11, rx155_fail546
    sub $I11, rx155_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx155_tgt, $I11
    unless $I11, rx155_fail546
    repr_bind_attr_int rx155_cur, rx155_curclass, "$!pos", rx155_pos
    $P11 = rx155_cur."panic"("Obsolete pod format, please use =begin/=end instead")
    repr_get_attr_int $I11, $P11, rx155_curclass, "$!pos"
    lt $I11, 0, rx155_fail546
    repr_get_attr_int rx155_pos, $P11, rx155_curclass, "$!pos"
    nqp_rxpeek $I19, rx155_bstack, rxquantr159_done558
    inc $I19
    inc $I19
    set rx155_rep, rx155_bstack[$I19]
    nqp_rxcommit rx155_bstack, rxquantr159_done558
    inc rx155_rep
  rxquantr159_done558:
    goto alt158_end555
  alt158_1561:
    ge rx155_pos, rx155_eos, rx155_fail546
    is_cclass $I11, .CCLASS_NEWLINE, rx155_tgt, rx155_pos
    unless $I11, rx155_fail546
    substr $S10, rx155_tgt, rx155_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx155_pos, $I11
    add rx155_pos, 1
    goto alt158_end555
  alt158_end555:
    nqp_rxcommit rx155_bstack, alt158_end555
    rx155_cur."!cursor_pass"(rx155_pos, 'backtrack'=>1)
    .return (rx155_cur)
  rx155_restart545:
    repr_get_attr_obj rx155_cstack, rx155_cur, rx155_curclass, "$!cstack"
  rx155_fail546:
    unless rx155_bstack, rx155_done544
    pop $I19, rx155_bstack
    if_null rx155_cstack, rx155_cstack_done549
    unless rx155_cstack, rx155_cstack_done549
    dec $I19
    set $P11, rx155_cstack[$I19]
  rx155_cstack_done549:
    pop rx155_rep, rx155_bstack
    pop rx155_pos, rx155_bstack
    pop $I19, rx155_bstack
    lt rx155_pos, -1, rx155_done544
    lt rx155_pos, 0, rx155_fail546
    eq $I19, 0, rx155_fail546
    nqp_islist $I20, rx155_cstack
    unless $I20, rx155_jump547
    elements $I18, rx155_bstack
    le $I18, 0, rx155_cut548
    dec $I18
    set $I18, rx155_bstack[$I18]
  rx155_cut548:
    assign rx155_cstack, $I18
  rx155_jump547:
    jump $I19
  rx155_done544:
    rx155_cur."!cursor_fail"()
    .return (rx155_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_42_1349901750.327_caps" :subid("cuid_memo_21_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_42_1349901750.327_nfa" :subid("cuid_memo_22_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5003, $P5005
    box $P5006, 1
    push $P5003, $P5006
    box $P5007, 1
    push $P5003, $P5007
    box $P5008, 0
    push $P5003, $P5008
    box $P5009, 2
    push $P5003, $P5009
    push $P5001, $P5003
    new $P5010, 'ResizablePMCArray'
    box $P5011, 2
    push $P5010, $P5011
    box $P5012, 61
    push $P5010, $P5012
    box $P5013, 3
    push $P5010, $P5013
    box $P5014, 4
    push $P5010, $P5014
    box $P5015, 4096
    push $P5010, $P5015
    box $P5016, 0
    push $P5010, $P5016
    push $P5001, $P5010
    new $P5017, 'ResizablePMCArray'
    box $P5018, 2
    push $P5017, $P5018
    box $P5019, 99
    push $P5017, $P5019
    box $P5020, 4
    push $P5017, $P5020
    box $P5021, 1
    push $P5017, $P5021
    box $P5022, 0
    push $P5017, $P5022
    box $P5023, 0
    push $P5017, $P5023
    push $P5001, $P5017
    new $P5024, 'ResizablePMCArray'
    box $P5025, 2
    push $P5024, $P5025
    box $P5026, 117
    push $P5024, $P5026
    box $P5027, 5
    push $P5024, $P5027
    push $P5001, $P5024
    new $P5028, 'ResizablePMCArray'
    box $P5029, 2
    push $P5028, $P5029
    box $P5030, 116
    push $P5028, $P5030
    box $P5031, 6
    push $P5028, $P5031
    push $P5001, $P5028
    new $P5032, 'ResizablePMCArray'
    box $P5033, 1
    push $P5032, $P5033
    box $P5034, 0
    push $P5032, $P5034
    box $P5035, 7
    push $P5032, $P5035
    push $P5001, $P5032
    new $P5036, 'ResizablePMCArray'
    box $P5037, 8
    push $P5036, $P5037
    box $P5038, "panic"
    push $P5036, $P5038
    box $P5039, 0
    push $P5036, $P5039
    push $P5001, $P5036
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_42_1349901750.327_alt_nfa__5_1349901751.72" :subid("cuid_memo_23_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 61
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 99
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    box $P5012, 1
    push $P5008, $P5012
    box $P5013, 0
    push $P5008, $P5013
    box $P5014, 0
    push $P5008, $P5014
    push $P5002, $P5008
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 117
    push $P5015, $P5017
    box $P5018, 4
    push $P5015, $P5018
    push $P5002, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 116
    push $P5019, $P5021
    box $P5022, 5
    push $P5019, $P5022
    push $P5002, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 1
    push $P5023, $P5024
    box $P5025, 0
    push $P5023, $P5025
    box $P5026, 6
    push $P5023, $P5026
    push $P5002, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "panic"
    push $P5027, $P5029
    box $P5030, 0
    push $P5027, $P5030
    push $P5002, $P5027
    push $P5001, $P5002
    new $P5031, 'ResizablePMCArray'
    new $P5032, 'ResizablePMCArray'
    push $P5031, $P5032
    new $P5033, 'ResizablePMCArray'
    box $P5034, 4
    push $P5033, $P5034
    box $P5035, 4096
    push $P5033, $P5035
    box $P5036, 0
    push $P5033, $P5036
    push $P5031, $P5033
    push $P5001, $P5031
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "comp_unit" :subid("cuid_44_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 697
    .param pmc _lex_param_0 
    .const 'Sub' $P5061 = 'cuid_386_1349901750.327' 
    capture_lex $P5061 
    .const 'Sub' $P5061 = 'cuid_387_1349901750.327' 
    capture_lex $P5061 
    .const 'Sub' $P5061 = 'cuid_389_1349901750.327' 
    capture_lex $P5061 
    .const 'Sub' $P5061 = 'cuid_390_1349901750.327' 
    capture_lex $P5061 
    .lex "$*IN_DECL", $P101 
    .lex "$*HAS_YOU_ARE_HERE", $P102 
    .lex "$*MAIN_SUB", $P103 
    .lex "$*UNIT", $P104 
    .lex "$*GLOBALish", $P105 
    .lex "$*PACKAGE", $P106 
    .lex "$*EXPORT", $P107 
    .lex utf8:"$\x{a2}", $P108 
    .lex "$/", $P109 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P104, $P5004
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P105, $P5005
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P106, $P5006
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P107, $P5007
    set self, _lex_param_0
    .local string rx165_tgt
    .local int rx165_pos
    .local int rx165_off
    .local int rx165_eos
    .local int rx165_rep
    .local pmc rx165_cur
    .local pmc rx165_curclass
    .local pmc rx165_bstack
    .local pmc rx165_cstack
    (rx165_cur, rx165_tgt, rx165_pos, rx165_curclass, rx165_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx165_cur
    length rx165_eos, rx165_tgt
    eq $I19, 1, rx165_restart571
    gt rx165_pos, rx165_eos, rx165_fail572
    repr_get_attr_int $I11, self, rx165_curclass, "$!from"
    ne $I11, -1, rxscan166_done578
    goto rxscan166_scan577
  rxscan166_loop576:
    inc rx165_pos
    gt rx165_pos, rx165_eos, rx165_fail572
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!from", rx165_pos
  rxscan166_scan577:
    nqp_rxmark rx165_bstack, rxscan166_loop576, rx165_pos, 0
  rxscan166_done578:
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    store_lex unicode:"$\x{a2}", rx165_cur
    box $P5008, ""
    set $P101, $P5008
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    store_lex unicode:"$\x{a2}", rx165_cur
    box $P5009, 0
    set $P102, $P5009
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    store_lex unicode:"$\x{a2}", rx165_cur
    unless_null $P103, fallback579
    nqp_get_sc_object $P5012, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5011, $P5012
    set $P5010, $P5011["$MAIN_SUB"]
    unless_null $P5010, fallback580
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5010, $P5013
  fallback580:
    unless_null $P5010, vivi_167581
    die "Contextual $*MAIN_SUB not found"
    box $P5014, "Contextual $*MAIN_SUB not found"
    set $P5010, $P5014
  vivi_167581:
    set $P103, $P5010
  fallback579:
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    store_lex unicode:"$\x{a2}", rx165_cur
.annotate 'line', 702
    find_dynamic_lex $P5015, "$*W"
    unless_null $P5015, fallback582
    nqp_get_sc_object $P5018, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["$W"]
    unless_null $P5016, fallback583
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5016, $P5019
  fallback583:
    unless_null $P5016, vivi_168584
    die "Contextual $*W not found"
    box $P5020, "Contextual $*W not found"
    set $P5016, $P5020
  vivi_168584:
    set $P5015, $P5016
  fallback582:
    $P5021 = $P5015."push_lexpad"($P109)
    set $P104, $P5021
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    store_lex unicode:"$\x{a2}", rx165_cur
.annotate 'line', 706
    find_dynamic_lex $P5022, "$*W"
    unless_null $P5022, fallback585
    nqp_get_sc_object $P5025, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["$W"]
    unless_null $P5023, fallback586
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5023, $P5026
  fallback586:
    unless_null $P5023, vivi_169587
    die "Contextual $*W not found"
    box $P5027, "Contextual $*W not found"
    set $P5023, $P5027
  vivi_169587:
    set $P5022, $P5023
  fallback585:
    find_dynamic_lex $P5029, "%*HOW"
    unless_null $P5029, fallback588
    nqp_get_sc_object $P5032, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5031, $P5032
    set $P5030, $P5031["%HOW"]
    unless_null $P5030, fallback589
    nqp_get_sc_object $P5034, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5033, $P5034
    new $P5035, 'Hash'
    set $P5033["%HOW"], $P5035
    set $P5030, $P5035
  fallback589:
    unless_null $P5030, vivi_170590
    die "Contextual %*HOW not found"
    box $P5036, "Contextual %*HOW not found"
    set $P5030, $P5036
  vivi_170590:
    set $P5029, $P5030
  fallback588:
    set $P5028, $P5029["knowhow"]
    unless_null $P5028, fallback591
    nqp_get_sc_object $P5037, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5028, $P5037
  fallback591:
    $P5038 = $P5022."pkg_create_mo"($P5028, "GLOBALish" :named("name"))
    set $P105, $P5038
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    store_lex unicode:"$\x{a2}", rx165_cur
    $P5039 = $P108."MATCH"()
    set $P109, $P5039
    .const 'Sub' $P5040 = 'cuid_386_1349901750.327' 
    capture_lex $P5040
    $P5041 = $P5040()
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    store_lex unicode:"$\x{a2}", rx165_cur
    unless_null $P105, fallback607
    nqp_get_sc_object $P5044, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5043, $P5044
    set $P5042, $P5043["$GLOBALish"]
    unless_null $P5042, fallback608
    nqp_get_sc_object $P5045, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5042, $P5045
  fallback608:
    unless_null $P5042, vivi_176609
    die "Contextual $*GLOBALish not found"
    box $P5046, "Contextual $*GLOBALish not found"
    set $P5042, $P5046
  vivi_176609:
    set $P105, $P5042
  fallback607:
    set $P106, $P105
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    store_lex unicode:"$\x{a2}", rx165_cur
    $P5047 = $P108."MATCH"()
    set $P109, $P5047
    .const 'Sub' $P5048 = 'cuid_387_1349901750.327' 
    capture_lex $P5048
    $P5049 = $P5048()
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    store_lex unicode:"$\x{a2}", rx165_cur
    unless_null $P107, fallback619
    nqp_get_sc_object $P5052, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5051, $P5052
    set $P5050, $P5051["$EXPORT"]
    unless_null $P5050, fallback620
    nqp_get_sc_object $P5053, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5050, $P5053
  fallback620:
    unless_null $P5050, vivi_180621
    die "Contextual $*EXPORT not found"
    box $P5054, "Contextual $*EXPORT not found"
    set $P5050, $P5054
  vivi_180621:
    set $P107, $P5050
  fallback619:
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    store_lex unicode:"$\x{a2}", rx165_cur
    $P5055 = $P108."MATCH"()
    set $P109, $P5055
    .const 'Sub' $P5056 = 'cuid_389_1349901750.327' 
    capture_lex $P5056
    $P5057 = $P5056()
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    store_lex unicode:"$\x{a2}", rx165_cur
    $P5058 = $P108."MATCH"()
    set $P109, $P5058
    .const 'Sub' $P5059 = 'cuid_390_1349901750.327' 
    capture_lex $P5059
    $P5060 = $P5059()
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    $P11 = rx165_cur."outerctx"()
    repr_get_attr_int $I11, $P11, rx165_curclass, "$!pos"
    lt $I11, 0, rx165_fail572
    repr_get_attr_int rx165_pos, $P11, rx165_curclass, "$!pos"
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    $P11 = rx165_cur."statementlist"()
    repr_get_attr_int $I11, $P11, rx165_curclass, "$!pos"
    lt $I11, 0, rx165_fail572
    nqp_rxmark rx165_bstack, rxsubrule195_pass665, -1, 0
  rxsubrule195_pass665:
    rx165_cstack = rx165_cur."!cursor_capture"($P11, "statementlist")
    repr_get_attr_int rx165_pos, $P11, rx165_curclass, "$!pos"
  alt196_0667:
    nqp_rxmark rx165_bstack, alt196_1669, rx165_pos, 0
    lt rx165_pos, rx165_eos, rx165_fail572
    goto alt196_end666
  alt196_1669:
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    $P11 = rx165_cur."panic"("Confused")
    repr_get_attr_int $I11, $P11, rx165_curclass, "$!pos"
    lt $I11, 0, rx165_fail572
    repr_get_attr_int rx165_pos, $P11, rx165_curclass, "$!pos"
  alt196_end666:
    rx165_cur."!cursor_pass"(rx165_pos, "comp_unit", 'backtrack'=>1)
    .return (rx165_cur)
  rx165_restart571:
    repr_get_attr_obj rx165_cstack, rx165_cur, rx165_curclass, "$!cstack"
  rx165_fail572:
    unless rx165_bstack, rx165_done570
    pop $I19, rx165_bstack
    if_null rx165_cstack, rx165_cstack_done575
    unless rx165_cstack, rx165_cstack_done575
    dec $I19
    set $P11, rx165_cstack[$I19]
  rx165_cstack_done575:
    pop rx165_rep, rx165_bstack
    pop rx165_pos, rx165_bstack
    pop $I19, rx165_bstack
    lt rx165_pos, -1, rx165_done570
    lt rx165_pos, 0, rx165_fail572
    eq $I19, 0, rx165_fail572
    nqp_islist $I20, rx165_cstack
    unless $I20, rx165_jump573
    elements $I18, rx165_bstack
    le $I18, 0, rx165_cut574
    dec $I18
    set $I18, rx165_bstack[$I18]
  rx165_cut574:
    assign rx165_cstack, $I18
  rx165_jump573:
    jump $I19
  rx165_done570:
    rx165_cur."!cursor_fail"()
    .return (rx165_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_44_1349901750.327_caps" :subid("cuid_memo_24_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["statementlist"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_44_1349901750.327_nfa" :subid("cuid_memo_25_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 1
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 1
    push $P5015, $P5016
    box $P5017, 0
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 1
    push $P5019, $P5020
    box $P5021, 0
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 0
    push $P5023, $P5024
    box $P5025, 0
    push $P5023, $P5025
    box $P5026, 0
    push $P5023, $P5026
    push $P5001, $P5023
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_386_1349901750.327") :anon :lex :outer("cuid_44_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 707

.annotate 'line', 708
    find_dynamic_lex $P5002, "$*GLOBALish"
    unless_null $P5002, fallback592
    nqp_get_sc_object $P5005, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$GLOBALish"]
    unless_null $P5003, fallback593
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5003, $P5006
  fallback593:
    unless_null $P5003, vivi_171594
    die "Contextual $*GLOBALish not found"
    box $P5007, "Contextual $*GLOBALish not found"
    set $P5003, $P5007
  vivi_171594:
    set $P5002, $P5003
  fallback592:
    get_how $P5001, $P5002
    find_dynamic_lex $P5008, "$*GLOBALish"
    unless_null $P5008, fallback595
    nqp_get_sc_object $P5011, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5010, $P5011
    set $P5009, $P5010["$GLOBALish"]
    unless_null $P5009, fallback596
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5009, $P5012
  fallback596:
    unless_null $P5009, vivi_172597
    die "Contextual $*GLOBALish not found"
    box $P5013, "Contextual $*GLOBALish not found"
    set $P5009, $P5013
  vivi_172597:
    set $P5008, $P5009
  fallback595:
    $P5014 = $P5001."compose"($P5008)
.annotate 'line', 709
    find_dynamic_lex $P5015, "$*W"
    unless_null $P5015, fallback598
    nqp_get_sc_object $P5018, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["$W"]
    unless_null $P5016, fallback599
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5016, $P5019
  fallback599:
    unless_null $P5016, vivi_173600
    die "Contextual $*W not found"
    box $P5020, "Contextual $*W not found"
    set $P5016, $P5020
  vivi_173600:
    set $P5015, $P5016
  fallback598:
    find_dynamic_lex $P5021, "$*UNIT"
    unless_null $P5021, fallback601
    nqp_get_sc_object $P5024, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5023, $P5024
    set $P5022, $P5023["$UNIT"]
    unless_null $P5022, fallback602
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5022, $P5025
  fallback602:
    unless_null $P5022, vivi_174603
    die "Contextual $*UNIT not found"
    box $P5026, "Contextual $*UNIT not found"
    set $P5022, $P5026
  vivi_174603:
    set $P5021, $P5022
  fallback601:
    find_dynamic_lex $P5027, "$*GLOBALish"
    unless_null $P5027, fallback604
    nqp_get_sc_object $P5030, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5029, $P5030
    set $P5028, $P5029["$GLOBALish"]
    unless_null $P5028, fallback605
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5028, $P5031
  fallback605:
    unless_null $P5028, vivi_175606
    die "Contextual $*GLOBALish not found"
    box $P5032, "Contextual $*GLOBALish not found"
    set $P5028, $P5032
  vivi_175606:
    set $P5027, $P5028
  fallback604:
    $P5033 = $P5015."install_lexical_symbol"($P5021, "GLOBALish", $P5027)
    .return ($P5033) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_387_1349901750.327") :anon :lex :outer("cuid_44_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 714

    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback610
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback611
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5005
  fallback611:
    unless_null $P5002, vivi_177612
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_177612:
    set $P5001, $P5002
  fallback610:
    find_dynamic_lex $P5007, "$*UNIT"
    unless_null $P5007, fallback613
    nqp_get_sc_object $P5010, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5009, $P5010
    set $P5008, $P5009["$UNIT"]
    unless_null $P5008, fallback614
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5008, $P5011
  fallback614:
    unless_null $P5008, vivi_178615
    die "Contextual $*UNIT not found"
    box $P5012, "Contextual $*UNIT not found"
    set $P5008, $P5012
  vivi_178615:
    set $P5007, $P5008
  fallback613:
    find_dynamic_lex $P5013, "$*PACKAGE"
    unless_null $P5013, fallback616
    nqp_get_sc_object $P5016, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$PACKAGE"]
    unless_null $P5014, fallback617
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5014, $P5017
  fallback617:
    unless_null $P5014, vivi_179618
    die "Contextual $*PACKAGE not found"
    box $P5018, "Contextual $*PACKAGE not found"
    set $P5014, $P5018
  vivi_179618:
    set $P5013, $P5014
  fallback616:
    $P5019 = $P5001."install_lexical_symbol"($P5007, "$?PACKAGE", $P5013)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_389_1349901750.327") :anon :lex :outer("cuid_44_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 718
    .const 'Sub' $P5017 = 'cuid_388_1349901750.327' 
    capture_lex $P5017 
    find_dynamic_lex $P5003, "%*COMPILING"
    unless_null $P5003, fallback624
    nqp_get_sc_object $P5006, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["%COMPILING"]
    unless_null $P5004, fallback625
    nqp_get_sc_object $P5008, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5007, $P5008
    new $P5009, 'Hash'
    set $P5007["%COMPILING"], $P5009
    set $P5004, $P5009
  fallback625:
    unless_null $P5004, vivi_182626
    die "Contextual %*COMPILING not found"
    box $P5010, "Contextual %*COMPILING not found"
    set $P5004, $P5010
  vivi_182626:
    set $P5003, $P5004
  fallback624:
    set $P5002, $P5003["%?OPTIONS"]
    unless_null $P5002, fallback627
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5011
  fallback627:
    set $P5001, $P5002["setting"]
    unless_null $P5001, fallback628
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5012
  fallback628:
    set $S5001, $P5001
    iseq $I5001, $S5001, "NULL"
    box $P5016, $I5001
    set $P5015, $P5016
    if $I5001 goto unless181_end623 
    .const 'Sub' $P5013 = 'cuid_388_1349901750.327' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5015, $P5014
  unless181_end623:
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_388_1349901750.327") :anon :lex :outer("cuid_389_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 719
    .lex "$DEFAULT", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
.annotate 'line', 720
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback629
    nqp_get_sc_object $P5005, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback630
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5003, $P5006
  fallback630:
    unless_null $P5003, vivi_183631
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_183631:
    set $P5002, $P5003
  fallback629:
    find_dynamic_lex $P5009, "%*HOW"
    unless_null $P5009, fallback632
    nqp_get_sc_object $P5012, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5011, $P5012
    set $P5010, $P5011["%HOW"]
    unless_null $P5010, fallback633
    nqp_get_sc_object $P5014, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5013, $P5014
    new $P5015, 'Hash'
    set $P5013["%HOW"], $P5015
    set $P5010, $P5015
  fallback633:
    unless_null $P5010, vivi_184634
    die "Contextual %*HOW not found"
    box $P5016, "Contextual %*HOW not found"
    set $P5010, $P5016
  vivi_184634:
    set $P5009, $P5010
  fallback632:
    set $P5008, $P5009["knowhow"]
    unless_null $P5008, fallback635
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5008, $P5017
  fallback635:
    $P5018 = $P5002."pkg_create_mo"($P5008, "EXPORT" :named("name"))
    store_dynamic_lex "$*EXPORT", $P5018
.annotate 'line', 721
    find_dynamic_lex $P5020, "$*EXPORT"
    unless_null $P5020, fallback636
    nqp_get_sc_object $P5023, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5022, $P5023
    set $P5021, $P5022["$EXPORT"]
    unless_null $P5021, fallback637
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5021, $P5024
  fallback637:
    unless_null $P5021, vivi_185638
    die "Contextual $*EXPORT not found"
    box $P5025, "Contextual $*EXPORT not found"
    set $P5021, $P5025
  vivi_185638:
    set $P5020, $P5021
  fallback636:
    get_how $P5019, $P5020
    find_dynamic_lex $P5026, "$*EXPORT"
    unless_null $P5026, fallback639
    nqp_get_sc_object $P5029, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["$EXPORT"]
    unless_null $P5027, fallback640
    nqp_get_sc_object $P5030, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5027, $P5030
  fallback640:
    unless_null $P5027, vivi_186641
    die "Contextual $*EXPORT not found"
    box $P5031, "Contextual $*EXPORT not found"
    set $P5027, $P5031
  vivi_186641:
    set $P5026, $P5027
  fallback639:
    $P5032 = $P5019."compose"($P5026)
.annotate 'line', 722
    find_dynamic_lex $P5033, "$*W"
    unless_null $P5033, fallback642
    nqp_get_sc_object $P5036, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5035, $P5036
    set $P5034, $P5035["$W"]
    unless_null $P5034, fallback643
    nqp_get_sc_object $P5037, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5034, $P5037
  fallback643:
    unless_null $P5034, vivi_187644
    die "Contextual $*W not found"
    box $P5038, "Contextual $*W not found"
    set $P5034, $P5038
  vivi_187644:
    set $P5033, $P5034
  fallback642:
    find_dynamic_lex $P5039, "$*UNIT"
    unless_null $P5039, fallback645
    nqp_get_sc_object $P5042, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5041, $P5042
    set $P5040, $P5041["$UNIT"]
    unless_null $P5040, fallback646
    nqp_get_sc_object $P5043, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5040, $P5043
  fallback646:
    unless_null $P5040, vivi_188647
    die "Contextual $*UNIT not found"
    box $P5044, "Contextual $*UNIT not found"
    set $P5040, $P5044
  vivi_188647:
    set $P5039, $P5040
  fallback645:
    find_dynamic_lex $P5045, "$*EXPORT"
    unless_null $P5045, fallback648
    nqp_get_sc_object $P5048, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5047, $P5048
    set $P5046, $P5047["$EXPORT"]
    unless_null $P5046, fallback649
    nqp_get_sc_object $P5049, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5046, $P5049
  fallback649:
    unless_null $P5046, vivi_189650
    die "Contextual $*EXPORT not found"
    box $P5050, "Contextual $*EXPORT not found"
    set $P5046, $P5050
  vivi_189650:
    set $P5045, $P5046
  fallback648:
    $P5051 = $P5033."install_lexical_symbol"($P5039, "EXPORT", $P5045)
.annotate 'line', 723
    find_dynamic_lex $P5052, "$*W"
    unless_null $P5052, fallback651
    nqp_get_sc_object $P5055, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5054, $P5055
    set $P5053, $P5054["$W"]
    unless_null $P5053, fallback652
    nqp_get_sc_object $P5056, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5053, $P5056
  fallback652:
    unless_null $P5053, vivi_190653
    die "Contextual $*W not found"
    box $P5057, "Contextual $*W not found"
    set $P5053, $P5057
  vivi_190653:
    set $P5052, $P5053
  fallback651:
    find_dynamic_lex $P5059, "%*HOW"
    unless_null $P5059, fallback654
    nqp_get_sc_object $P5062, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5061, $P5062
    set $P5060, $P5061["%HOW"]
    unless_null $P5060, fallback655
    nqp_get_sc_object $P5064, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5063, $P5064
    new $P5065, 'Hash'
    set $P5063["%HOW"], $P5065
    set $P5060, $P5065
  fallback655:
    unless_null $P5060, vivi_191656
    die "Contextual %*HOW not found"
    box $P5066, "Contextual %*HOW not found"
    set $P5060, $P5066
  vivi_191656:
    set $P5059, $P5060
  fallback654:
    set $P5058, $P5059["knowhow"]
    unless_null $P5058, fallback657
    nqp_get_sc_object $P5067, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5058, $P5067
  fallback657:
    $P5068 = $P5052."pkg_create_mo"($P5058, "DEFAULT" :named("name"))
    set $P101, $P5068
.annotate 'line', 724
    get_how $P5069, $P101
    $P5070 = $P5069."compose"($P101)
    find_dynamic_lex $P5072, "$*EXPORT"
    unless_null $P5072, fallback658
    nqp_get_sc_object $P5075, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5074, $P5075
    set $P5073, $P5074["$EXPORT"]
    unless_null $P5073, fallback659
    nqp_get_sc_object $P5076, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5073, $P5076
  fallback659:
    unless_null $P5073, vivi_192660
    die "Contextual $*EXPORT not found"
    box $P5077, "Contextual $*EXPORT not found"
    set $P5073, $P5077
  vivi_192660:
    set $P5072, $P5073
  fallback658:
    get_who $P5071, $P5072
    set $P5071["DEFAULT"], $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_390_1349901750.327") :anon :lex :outer("cuid_44_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 729

    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback661
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback662
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5005
  fallback662:
    unless_null $P5002, vivi_193663
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_193663:
    set $P5001, $P5002
  fallback661:
    $P5007 = $P5001."add_initializations"()
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "statementlist" :subid("cuid_45_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 737
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx199_tgt
    .local int rx199_pos
    .local int rx199_off
    .local int rx199_eos
    .local int rx199_rep
    .local pmc rx199_cur
    .local pmc rx199_curclass
    .local pmc rx199_bstack
    .local pmc rx199_cstack
    (rx199_cur, rx199_tgt, rx199_pos, rx199_curclass, rx199_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx199_cur
    length rx199_eos, rx199_tgt
    eq $I19, 1, rx199_restart673
    gt rx199_pos, rx199_eos, rx199_fail674
    repr_get_attr_int $I11, self, rx199_curclass, "$!from"
    ne $I11, -1, rxscan200_done680
    goto rxscan200_scan679
  rxscan200_loop678:
    inc rx199_pos
    gt rx199_pos, rx199_eos, rx199_fail674
    repr_bind_attr_int rx199_cur, rx199_curclass, "$!from", rx199_pos
  rxscan200_scan679:
    nqp_rxmark rx199_bstack, rxscan200_loop678, rx199_pos, 0
  rxscan200_done680:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt201_0682
    nqp_push_label $P11, alt201_1686
    nqp_rxmark rx199_bstack, alt201_end681, -1, 0
    rx199_cur."!alt"(rx199_pos, "alt_nfa__7_1349901751.827", $P11)
    goto rx199_fail674
  alt201_0682:
    repr_bind_attr_int rx199_cur, rx199_curclass, "$!pos", rx199_pos
    $P11 = rx199_cur."ws"()
    repr_get_attr_int $I11, $P11, rx199_curclass, "$!pos"
    lt $I11, 0, rx199_fail674
    repr_get_attr_int rx199_pos, $P11, rx199_curclass, "$!pos"
    lt rx199_pos, rx199_eos, rx199_fail674
    repr_bind_attr_int rx199_cur, rx199_curclass, "$!pos", rx199_pos
    $P11 = rx199_cur."ws"()
    repr_get_attr_int $I11, $P11, rx199_curclass, "$!pos"
    lt $I11, 0, rx199_fail674
    repr_get_attr_int rx199_pos, $P11, rx199_curclass, "$!pos"
    goto alt201_end681
  alt201_1686:
    repr_bind_attr_int rx199_cur, rx199_curclass, "$!pos", rx199_pos
    $P11 = rx199_cur."ws"()
    repr_get_attr_int $I11, $P11, rx199_curclass, "$!pos"
    lt $I11, 0, rx199_fail674
    repr_get_attr_int rx199_pos, $P11, rx199_curclass, "$!pos"
    nqp_rxmark rx199_bstack, rxquantr206_done689, rx199_pos, 0
  rxquantr206_loop688:
    repr_bind_attr_int rx199_cur, rx199_curclass, "$!pos", rx199_pos
    $P11 = rx199_cur."statement"()
    repr_get_attr_int $I11, $P11, rx199_curclass, "$!pos"
    lt $I11, 0, rx199_fail674
    nqp_rxmark rx199_bstack, rxsubrule207_pass690, -1, 0
  rxsubrule207_pass690:
    rx199_cstack = rx199_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx199_pos, $P11, rx199_curclass, "$!pos"
    repr_bind_attr_int rx199_cur, rx199_curclass, "$!pos", rx199_pos
    $P11 = rx199_cur."eat_terminator"()
    repr_get_attr_int $I11, $P11, rx199_curclass, "$!pos"
    lt $I11, 0, rx199_fail674
    repr_get_attr_int rx199_pos, $P11, rx199_curclass, "$!pos"
    repr_bind_attr_int rx199_cur, rx199_curclass, "$!pos", rx199_pos
    $P11 = rx199_cur."ws"()
    repr_get_attr_int $I11, $P11, rx199_curclass, "$!pos"
    lt $I11, 0, rx199_fail674
    repr_get_attr_int rx199_pos, $P11, rx199_curclass, "$!pos"
    nqp_rxpeek $I19, rx199_bstack, rxquantr206_done689
    inc $I19
    inc $I19
    set rx199_rep, rx199_bstack[$I19]
    nqp_rxcommit rx199_bstack, rxquantr206_done689
    inc rx199_rep
    nqp_rxmark rx199_bstack, rxquantr206_done689, rx199_pos, rx199_rep
    goto rxquantr206_loop688
  rxquantr206_done689:
    repr_bind_attr_int rx199_cur, rx199_curclass, "$!pos", rx199_pos
    $P11 = rx199_cur."ws"()
    repr_get_attr_int $I11, $P11, rx199_curclass, "$!pos"
    lt $I11, 0, rx199_fail674
    repr_get_attr_int rx199_pos, $P11, rx199_curclass, "$!pos"
    goto alt201_end681
  alt201_end681:
    rx199_cur."!cursor_pass"(rx199_pos, "statementlist", 'backtrack'=>1)
    .return (rx199_cur)
  rx199_restart673:
    repr_get_attr_obj rx199_cstack, rx199_cur, rx199_curclass, "$!cstack"
  rx199_fail674:
    unless rx199_bstack, rx199_done672
    pop $I19, rx199_bstack
    if_null rx199_cstack, rx199_cstack_done677
    unless rx199_cstack, rx199_cstack_done677
    dec $I19
    set $P11, rx199_cstack[$I19]
  rx199_cstack_done677:
    pop rx199_rep, rx199_bstack
    pop rx199_pos, rx199_bstack
    pop $I19, rx199_bstack
    lt rx199_pos, -1, rx199_done672
    lt rx199_pos, 0, rx199_fail674
    eq $I19, 0, rx199_fail674
    nqp_islist $I20, rx199_cstack
    unless $I20, rx199_jump675
    elements $I18, rx199_bstack
    le $I18, 0, rx199_cut676
    dec $I18
    set $I18, rx199_bstack[$I18]
  rx199_cut676:
    assign rx199_cstack, $I18
  rx199_jump675:
    jump $I19
  rx199_done672:
    rx199_cur."!cursor_fail"()
    .return (rx199_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_45_1349901750.327_caps" :subid("cuid_memo_26_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 2
    set $P5001["statement"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_45_1349901750.327_alt_nfa__7_1349901751.827" :subid("cuid_memo_27_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 0
    push $P5004, $P5005
    box $P5006, 0
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    box $P5008, 0
    push $P5004, $P5008
    box $P5009, 0
    push $P5004, $P5009
    box $P5010, 0
    push $P5004, $P5010
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5011, 'ResizablePMCArray'
    new $P5012, 'ResizablePMCArray'
    push $P5011, $P5012
    new $P5013, 'ResizablePMCArray'
    box $P5014, 0
    push $P5013, $P5014
    box $P5015, 0
    push $P5013, $P5015
    box $P5016, 0
    push $P5013, $P5016
    box $P5017, 0
    push $P5013, $P5017
    box $P5018, 0
    push $P5013, $P5018
    box $P5019, 0
    push $P5013, $P5019
    push $P5011, $P5013
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement" :subid("cuid_47_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 742
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_46_1349901750.327' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx211_tgt
    .local int rx211_pos
    .local int rx211_off
    .local int rx211_eos
    .local int rx211_rep
    .local pmc rx211_cur
    .local pmc rx211_curclass
    .local pmc rx211_bstack
    .local pmc rx211_cstack
    (rx211_cur, rx211_tgt, rx211_pos, rx211_curclass, rx211_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx211_cur
    length rx211_eos, rx211_tgt
    eq $I19, 1, rx211_restart696
    gt rx211_pos, rx211_eos, rx211_fail697
    repr_get_attr_int $I11, self, rx211_curclass, "$!from"
    ne $I11, -1, rxscan212_done703
    goto rxscan212_scan702
  rxscan212_loop701:
    inc rx211_pos
    gt rx211_pos, rx211_eos, rx211_fail697
    repr_bind_attr_int rx211_cur, rx211_curclass, "$!from", rx211_pos
  rxscan212_scan702:
    nqp_rxmark rx211_bstack, rxscan212_loop701, rx211_pos, 0
  rxscan212_done703:
    .const 'Sub' $P5001 = 'cuid_46_1349901750.327' 
    capture_lex $P5001
    repr_bind_attr_int rx211_cur, rx211_curclass, "$!pos", rx211_pos
    $P11 = rx211_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx211_curclass, "$!pos"
    ge $I11, 0, rx211_fail697
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt218_0722
    nqp_push_label $P11, alt218_1724
    nqp_rxmark rx211_bstack, alt218_end721, -1, 0
    rx211_cur."!alt"(rx211_pos, "alt_nfa__9_1349901751.846", $P11)
    goto rx211_fail697
  alt218_0722:
    repr_bind_attr_int rx211_cur, rx211_curclass, "$!pos", rx211_pos
    $P11 = rx211_cur."statement_control"()
    repr_get_attr_int $I11, $P11, rx211_curclass, "$!pos"
    lt $I11, 0, rx211_fail697
    nqp_rxmark rx211_bstack, rxsubrule219_pass723, -1, 0
  rxsubrule219_pass723:
    rx211_cstack = rx211_cur."!cursor_capture"($P11, "statement_control")
    repr_get_attr_int rx211_pos, $P11, rx211_curclass, "$!pos"
    goto alt218_end721
  alt218_1724:
    repr_bind_attr_int rx211_cur, rx211_curclass, "$!pos", rx211_pos
    $P11 = rx211_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx211_curclass, "$!pos"
    lt $I11, 0, rx211_fail697
    nqp_rxmark rx211_bstack, rxsubrule220_pass725, -1, 0
  rxsubrule220_pass725:
    rx211_cstack = rx211_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx211_pos, $P11, rx211_curclass, "$!pos"
    repr_bind_attr_int rx211_cur, rx211_curclass, "$!pos", rx211_pos
    $P11 = rx211_cur."ws"()
    repr_get_attr_int $I11, $P11, rx211_curclass, "$!pos"
    lt $I11, 0, rx211_fail697
    repr_get_attr_int rx211_pos, $P11, rx211_curclass, "$!pos"
    nqp_rxmark rx211_bstack, rxquantr222_done728, rx211_pos, 0
  rxquantr222_loop727:
  alt223_0730:
    nqp_rxmark rx211_bstack, alt223_1731, rx211_pos, 0
    repr_bind_attr_int rx211_cur, rx211_curclass, "$!pos", rx211_pos
    $P11 = rx211_cur."MARKED"("endstmt")
    repr_get_attr_int $I11, $P11, rx211_curclass, "$!pos"
    lt $I11, 0, rx211_fail697
    goto alt223_end729
  alt223_1731:
    nqp_rxmark rx211_bstack, alt223_2737, rx211_pos, 0
    repr_bind_attr_int rx211_cur, rx211_curclass, "$!pos", rx211_pos
    $P11 = rx211_cur."statement_mod_cond"()
    repr_get_attr_int $I11, $P11, rx211_curclass, "$!pos"
    lt $I11, 0, rx211_fail697
    nqp_rxmark rx211_bstack, rxsubrule224_pass732, -1, 0
  rxsubrule224_pass732:
    rx211_cstack = rx211_cur."!cursor_capture"($P11, "statement_mod_cond")
    repr_get_attr_int rx211_pos, $P11, rx211_curclass, "$!pos"
    nqp_rxmark rx211_bstack, rxquantr225_done734, rx211_pos, 0
  rxquantr225_loop733:
    repr_bind_attr_int rx211_cur, rx211_curclass, "$!pos", rx211_pos
    $P11 = rx211_cur."statement_mod_loop"()
    repr_get_attr_int $I11, $P11, rx211_curclass, "$!pos"
    lt $I11, 0, rx211_fail697
    goto rxsubrule226_pass735
  rxsubrule226_back736:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx211_curclass, "$!pos"
    lt $I11, 0, rx211_fail697
  rxsubrule226_pass735:
    rx211_cstack = rx211_cur."!cursor_capture"($P11, "statement_mod_loop")
    set_addr $I11, rxsubrule226_back736
    push rx211_bstack, $I11
    push rx211_bstack, 0
    push rx211_bstack, rx211_pos
    elements $I11, rx211_cstack
    push rx211_bstack, $I11
    repr_get_attr_int rx211_pos, $P11, rx211_curclass, "$!pos"
    nqp_rxpeek $I19, rx211_bstack, rxquantr225_done734
    inc $I19
    inc $I19
    set rx211_rep, rx211_bstack[$I19]
    nqp_rxcommit rx211_bstack, rxquantr225_done734
    inc rx211_rep
  rxquantr225_done734:
    goto alt223_end729
  alt223_2737:
    repr_bind_attr_int rx211_cur, rx211_curclass, "$!pos", rx211_pos
    $P11 = rx211_cur."statement_mod_loop"()
    repr_get_attr_int $I11, $P11, rx211_curclass, "$!pos"
    lt $I11, 0, rx211_fail697
    nqp_rxmark rx211_bstack, rxsubrule227_pass738, -1, 0
  rxsubrule227_pass738:
    rx211_cstack = rx211_cur."!cursor_capture"($P11, "statement_mod_loop")
    repr_get_attr_int rx211_pos, $P11, rx211_curclass, "$!pos"
  alt223_end729:
    nqp_rxpeek $I19, rx211_bstack, rxquantr222_done728
    inc $I19
    inc $I19
    set rx211_rep, rx211_bstack[$I19]
    nqp_rxcommit rx211_bstack, rxquantr222_done728
    inc rx211_rep
  rxquantr222_done728:
    goto alt218_end721
  alt218_end721:
    nqp_rxcommit rx211_bstack, alt218_end721
    rx211_cur."!cursor_pass"(rx211_pos, "statement", 'backtrack'=>1)
    .return (rx211_cur)
  rx211_restart696:
    repr_get_attr_obj rx211_cstack, rx211_cur, rx211_curclass, "$!cstack"
  rx211_fail697:
    unless rx211_bstack, rx211_done695
    pop $I19, rx211_bstack
    if_null rx211_cstack, rx211_cstack_done700
    unless rx211_cstack, rx211_cstack_done700
    dec $I19
    set $P11, rx211_cstack[$I19]
  rx211_cstack_done700:
    pop rx211_rep, rx211_bstack
    pop rx211_pos, rx211_bstack
    pop $I19, rx211_bstack
    lt rx211_pos, -1, rx211_done695
    lt rx211_pos, 0, rx211_fail697
    eq $I19, 0, rx211_fail697
    nqp_islist $I20, rx211_cstack
    unless $I20, rx211_jump698
    elements $I18, rx211_bstack
    le $I18, 0, rx211_cut699
    dec $I18
    set $I18, rx211_bstack[$I18]
  rx211_cut699:
    assign rx211_cstack, $I18
  rx211_jump698:
    jump $I19
  rx211_done695:
    rx211_cur."!cursor_fail"()
    .return (rx211_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_47_1349901750.327_caps" :subid("cuid_memo_28_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["statement_control"], $P5002
    box $P5003, 0
    set $P5001["EXPR"], $P5003
    box $P5004, 2
    set $P5001["statement_mod_cond"], $P5004
    box $P5005, 2
    set $P5001["statement_mod_loop"], $P5005
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_47_1349901750.327_alt_nfa__9_1349901751.846" :subid("cuid_memo_29_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 8
    push $P5004, $P5005
    box $P5006, "statement_control"
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 8
    push $P5010, $P5011
    box $P5012, "EXPR"
    push $P5010, $P5012
    box $P5013, 2
    push $P5010, $P5013
    push $P5008, $P5010
    new $P5014, 'ResizablePMCArray'
    box $P5015, 8
    push $P5014, $P5015
    box $P5016, "ws"
    push $P5014, $P5016
    box $P5017, 3
    push $P5014, $P5017
    push $P5008, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 0
    push $P5018, $P5019
    box $P5020, 0
    push $P5018, $P5020
    box $P5021, 0
    push $P5018, $P5021
    box $P5022, 1
    push $P5018, $P5022
    box $P5023, 0
    push $P5018, $P5023
    box $P5024, 0
    push $P5018, $P5024
    push $P5008, $P5018
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_46_1349901750.327") :anon :lex :outer("cuid_47_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx213_tgt
    .local int rx213_pos
    .local int rx213_off
    .local int rx213_eos
    .local int rx213_rep
    .local pmc rx213_cur
    .local pmc rx213_curclass
    .local pmc rx213_bstack
    .local pmc rx213_cstack
    (rx213_cur, rx213_tgt, rx213_pos, rx213_curclass, rx213_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx213_cur
    length rx213_eos, rx213_tgt
    eq $I19, 1, rx213_restart706
    gt rx213_pos, rx213_eos, rx213_fail707
    repr_get_attr_int $I11, self, rx213_curclass, "$!from"
    ne $I11, -1, rxscan214_done713
    goto rxscan214_scan712
  rxscan214_loop711:
    inc rx213_pos
    gt rx213_pos, rx213_eos, rx213_fail707
    repr_bind_attr_int rx213_cur, rx213_curclass, "$!from", rx213_pos
  rxscan214_scan712:
    nqp_rxmark rx213_bstack, rxscan214_loop711, rx213_pos, 0
  rxscan214_done713:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt215_0715
    nqp_push_label $P11, alt215_1719
    nqp_rxmark rx213_bstack, alt215_end714, -1, 0
    rx213_cur."!alt"(rx213_pos, "alt_nfa__8_1349901751.832", $P11)
    goto rx213_fail707
  alt215_0715:
  alt216_0717:
    nqp_rxmark rx213_bstack, alt216_1718, rx213_pos, 0
    add $I11, rx213_pos, 1
    gt $I11, rx213_eos, rx213_fail707
    substr $S10, rx213_tgt, rx213_pos, 1
    ne $S10, ucs4:"]", rx213_fail707
    add rx213_pos, 1
    goto alt216_end716
  alt216_1718:
    ge rx213_pos, rx213_eos, rx213_fail707
    substr $S11, rx213_tgt, rx213_pos, 1
    index $I11, ucs4:")}", $S11
    lt $I11, 0, rx213_fail707
    inc rx213_pos
  alt216_end716:
    goto alt215_end714
  alt215_1719:
    lt rx213_pos, rx213_eos, rx213_fail707
    goto alt215_end714
  alt215_end714:
    rx213_cur."!cursor_pass"(rx213_pos, 'backtrack'=>1)
    .return (rx213_cur)
  rx213_restart706:
    repr_get_attr_obj rx213_cstack, rx213_cur, rx213_curclass, "$!cstack"
  rx213_fail707:
    unless rx213_bstack, rx213_done705
    pop $I19, rx213_bstack
    if_null rx213_cstack, rx213_cstack_done710
    unless rx213_cstack, rx213_cstack_done710
    dec $I19
    set $P11, rx213_cstack[$I19]
  rx213_cstack_done710:
    pop rx213_rep, rx213_bstack
    pop rx213_pos, rx213_bstack
    pop $I19, rx213_bstack
    lt rx213_pos, -1, rx213_done705
    lt rx213_pos, 0, rx213_fail707
    eq $I19, 0, rx213_fail707
    nqp_islist $I20, rx213_cstack
    unless $I20, rx213_jump708
    elements $I18, rx213_bstack
    le $I18, 0, rx213_cut709
    dec $I18
    set $I18, rx213_bstack[$I18]
  rx213_cut709:
    assign rx213_cstack, $I18
  rx213_jump708:
    jump $I19
  rx213_done705:
    rx213_cur."!cursor_fail"()
    .return (rx213_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_46_1349901750.327_caps" :subid("cuid_memo_30_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_46_1349901750.327_nfa" :subid("cuid_memo_31_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 0
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    box $P5007, 1
    push $P5003, $P5007
    box $P5008, 0
    push $P5003, $P5008
    box $P5009, 0
    push $P5003, $P5009
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_46_1349901750.327_alt_nfa__8_1349901751.832" :subid("cuid_memo_32_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 0
    push $P5004, $P5005
    box $P5006, 0
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    box $P5008, 0
    push $P5004, $P5008
    box $P5009, 0
    push $P5004, $P5009
    box $P5010, 0
    push $P5004, $P5010
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5011, 'ResizablePMCArray'
    new $P5012, 'ResizablePMCArray'
    push $P5011, $P5012
    new $P5013, 'ResizablePMCArray'
    box $P5014, 1
    push $P5013, $P5014
    box $P5015, 0
    push $P5013, $P5015
    box $P5016, 0
    push $P5013, $P5016
    push $P5011, $P5013
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "eat_terminator" :subid("cuid_48_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 755
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx228_tgt
    .local int rx228_pos
    .local int rx228_off
    .local int rx228_eos
    .local int rx228_rep
    .local pmc rx228_cur
    .local pmc rx228_curclass
    .local pmc rx228_bstack
    .local pmc rx228_cstack
    (rx228_cur, rx228_tgt, rx228_pos, rx228_curclass, rx228_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx228_cur
    length rx228_eos, rx228_tgt
    eq $I19, 1, rx228_restart741
    gt rx228_pos, rx228_eos, rx228_fail742
    repr_get_attr_int $I11, self, rx228_curclass, "$!from"
    ne $I11, -1, rxscan229_done748
    goto rxscan229_scan747
  rxscan229_loop746:
    inc rx228_pos
    gt rx228_pos, rx228_eos, rx228_fail742
    repr_bind_attr_int rx228_cur, rx228_curclass, "$!from", rx228_pos
  rxscan229_scan747:
    nqp_rxmark rx228_bstack, rxscan229_loop746, rx228_pos, 0
  rxscan229_done748:
  alt230_0750:
    nqp_rxmark rx228_bstack, alt230_1751, rx228_pos, 0
    add $I11, rx228_pos, 1
    gt $I11, rx228_eos, rx228_fail742
    substr $S10, rx228_tgt, rx228_pos, 1
    ne $S10, ucs4:";", rx228_fail742
    add rx228_pos, 1
    goto alt230_end749
  alt230_1751:
    nqp_rxmark rx228_bstack, alt230_2752, rx228_pos, 0
    repr_bind_attr_int rx228_cur, rx228_curclass, "$!pos", rx228_pos
    $P11 = rx228_cur."MARKED"("endstmt")
    repr_get_attr_int $I11, $P11, rx228_curclass, "$!pos"
    lt $I11, 0, rx228_fail742
    goto alt230_end749
  alt230_2752:
    nqp_rxmark rx228_bstack, alt230_3753, rx228_pos, 0
    repr_bind_attr_int rx228_cur, rx228_curclass, "$!pos", rx228_pos
    $P11 = rx228_cur."terminator"()
    repr_get_attr_int $I11, $P11, rx228_curclass, "$!pos"
    lt $I11, 0, rx228_fail742
    goto alt230_end749
  alt230_3753:
    lt rx228_pos, rx228_eos, rx228_fail742
  alt230_end749:
    rx228_cur."!cursor_pass"(rx228_pos, "eat_terminator", 'backtrack'=>1)
    .return (rx228_cur)
  rx228_restart741:
    repr_get_attr_obj rx228_cstack, rx228_cur, rx228_curclass, "$!cstack"
  rx228_fail742:
    unless rx228_bstack, rx228_done740
    pop $I19, rx228_bstack
    if_null rx228_cstack, rx228_cstack_done745
    unless rx228_cstack, rx228_cstack_done745
    dec $I19
    set $P11, rx228_cstack[$I19]
  rx228_cstack_done745:
    pop rx228_rep, rx228_bstack
    pop rx228_pos, rx228_bstack
    pop $I19, rx228_bstack
    lt rx228_pos, -1, rx228_done740
    lt rx228_pos, 0, rx228_fail742
    eq $I19, 0, rx228_fail742
    nqp_islist $I20, rx228_cstack
    unless $I20, rx228_jump743
    elements $I18, rx228_bstack
    le $I18, 0, rx228_cut744
    dec $I18
    set $I18, rx228_bstack[$I18]
  rx228_cut744:
    assign rx228_cstack, $I18
  rx228_jump743:
    jump $I19
  rx228_done740:
    rx228_cur."!cursor_fail"()
    .return (rx228_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_48_1349901750.327_caps" :subid("cuid_memo_33_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "xblock" :subid("cuid_49_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 762
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx232_tgt
    .local int rx232_pos
    .local int rx232_off
    .local int rx232_eos
    .local int rx232_rep
    .local pmc rx232_cur
    .local pmc rx232_curclass
    .local pmc rx232_bstack
    .local pmc rx232_cstack
    (rx232_cur, rx232_tgt, rx232_pos, rx232_curclass, rx232_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx232_cur
    length rx232_eos, rx232_tgt
    eq $I19, 1, rx232_restart757
    gt rx232_pos, rx232_eos, rx232_fail758
    repr_get_attr_int $I11, self, rx232_curclass, "$!from"
    ne $I11, -1, rxscan233_done764
    goto rxscan233_scan763
  rxscan233_loop762:
    inc rx232_pos
    gt rx232_pos, rx232_eos, rx232_fail758
    repr_bind_attr_int rx232_cur, rx232_curclass, "$!from", rx232_pos
  rxscan233_scan763:
    nqp_rxmark rx232_bstack, rxscan233_loop762, rx232_pos, 0
  rxscan233_done764:
    repr_bind_attr_int rx232_cur, rx232_curclass, "$!pos", rx232_pos
    $P11 = rx232_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx232_curclass, "$!pos"
    lt $I11, 0, rx232_fail758
    nqp_rxmark rx232_bstack, rxsubrule234_pass765, -1, 0
  rxsubrule234_pass765:
    rx232_cstack = rx232_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx232_pos, $P11, rx232_curclass, "$!pos"
    repr_bind_attr_int rx232_cur, rx232_curclass, "$!pos", rx232_pos
    $P11 = rx232_cur."ws"()
    repr_get_attr_int $I11, $P11, rx232_curclass, "$!pos"
    lt $I11, 0, rx232_fail758
    repr_get_attr_int rx232_pos, $P11, rx232_curclass, "$!pos"
    repr_bind_attr_int rx232_cur, rx232_curclass, "$!pos", rx232_pos
    $P11 = rx232_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx232_curclass, "$!pos"
    lt $I11, 0, rx232_fail758
    nqp_rxmark rx232_bstack, rxsubrule236_pass767, -1, 0
  rxsubrule236_pass767:
    rx232_cstack = rx232_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx232_pos, $P11, rx232_curclass, "$!pos"
    rx232_cur."!cursor_pass"(rx232_pos, "xblock", 'backtrack'=>1)
    .return (rx232_cur)
  rx232_restart757:
    repr_get_attr_obj rx232_cstack, rx232_cur, rx232_curclass, "$!cstack"
  rx232_fail758:
    unless rx232_bstack, rx232_done756
    pop $I19, rx232_bstack
    if_null rx232_cstack, rx232_cstack_done761
    unless rx232_cstack, rx232_cstack_done761
    dec $I19
    set $P11, rx232_cstack[$I19]
  rx232_cstack_done761:
    pop rx232_rep, rx232_bstack
    pop rx232_pos, rx232_bstack
    pop $I19, rx232_bstack
    lt rx232_pos, -1, rx232_done756
    lt rx232_pos, 0, rx232_fail758
    eq $I19, 0, rx232_fail758
    nqp_islist $I20, rx232_cstack
    unless $I20, rx232_jump759
    elements $I18, rx232_bstack
    le $I18, 0, rx232_cut760
    dec $I18
    set $I18, rx232_bstack[$I18]
  rx232_cut760:
    assign rx232_cstack, $I18
  rx232_jump759:
    jump $I19
  rx232_done756:
    rx232_cur."!cursor_fail"()
    .return (rx232_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_49_1349901750.327_caps" :subid("cuid_memo_34_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["EXPR"], $P5002
    box $P5003, 0
    set $P5001["pblock"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_49_1349901750.327_nfa" :subid("cuid_memo_35_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "EXPR"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "ws"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "pblock"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "pblock" :subid("cuid_50_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 766
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx237_tgt
    .local int rx237_pos
    .local int rx237_off
    .local int rx237_eos
    .local int rx237_rep
    .local pmc rx237_cur
    .local pmc rx237_curclass
    .local pmc rx237_bstack
    .local pmc rx237_cstack
    (rx237_cur, rx237_tgt, rx237_pos, rx237_curclass, rx237_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx237_cur
    length rx237_eos, rx237_tgt
    eq $I19, 1, rx237_restart770
    gt rx237_pos, rx237_eos, rx237_fail771
    repr_get_attr_int $I11, self, rx237_curclass, "$!from"
    ne $I11, -1, rxscan238_done777
    goto rxscan238_scan776
  rxscan238_loop775:
    inc rx237_pos
    gt rx237_pos, rx237_eos, rx237_fail771
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!from", rx237_pos
  rxscan238_scan776:
    nqp_rxmark rx237_bstack, rxscan238_loop775, rx237_pos, 0
  rxscan238_done777:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt239_0779
    nqp_push_label $P11, alt239_1785
    nqp_push_label $P11, alt239_2788
    nqp_rxmark rx237_bstack, alt239_end778, -1, 0
    rx237_cur."!alt"(rx237_pos, "alt_nfa__10_1349901751.875", $P11)
    goto rx237_fail771
  alt239_0779:
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!pos", rx237_pos
    $P11 = rx237_cur."lambda"()
    repr_get_attr_int $I11, $P11, rx237_curclass, "$!pos"
    lt $I11, 0, rx237_fail771
    repr_get_attr_int rx237_pos, $P11, rx237_curclass, "$!pos"
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!pos", rx237_pos
    $P11 = rx237_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx237_curclass, "$!pos"
    lt $I11, 0, rx237_fail771
    repr_get_attr_int rx237_pos, $P11, rx237_curclass, "$!pos"
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!pos", rx237_pos
    $P11 = rx237_cur."signature"()
    repr_get_attr_int $I11, $P11, rx237_curclass, "$!pos"
    lt $I11, 0, rx237_fail771
    nqp_rxmark rx237_bstack, rxsubrule242_pass782, -1, 0
  rxsubrule242_pass782:
    rx237_cstack = rx237_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx237_pos, $P11, rx237_curclass, "$!pos"
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!pos", rx237_pos
    $P11 = rx237_cur."ws"()
    repr_get_attr_int $I11, $P11, rx237_curclass, "$!pos"
    lt $I11, 0, rx237_fail771
    repr_get_attr_int rx237_pos, $P11, rx237_curclass, "$!pos"
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!pos", rx237_pos
    $P11 = rx237_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx237_curclass, "$!pos"
    lt $I11, 0, rx237_fail771
    nqp_rxmark rx237_bstack, rxsubrule244_pass784, -1, 0
  rxsubrule244_pass784:
    rx237_cstack = rx237_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx237_pos, $P11, rx237_curclass, "$!pos"
    goto alt239_end778
  alt239_1785:
    ge rx237_pos, rx237_eos, rx237_fail771
    substr $S11, rx237_tgt, rx237_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx237_fail771
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!pos", rx237_pos
    $P11 = rx237_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx237_curclass, "$!pos"
    lt $I11, 0, rx237_fail771
    repr_get_attr_int rx237_pos, $P11, rx237_curclass, "$!pos"
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!pos", rx237_pos
    $P11 = rx237_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx237_curclass, "$!pos"
    lt $I11, 0, rx237_fail771
    nqp_rxmark rx237_bstack, rxsubrule246_pass787, -1, 0
  rxsubrule246_pass787:
    rx237_cstack = rx237_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx237_pos, $P11, rx237_curclass, "$!pos"
    goto alt239_end778
  alt239_2788:
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!pos", rx237_pos
    $P11 = rx237_cur."panic"("Missing block")
    repr_get_attr_int $I11, $P11, rx237_curclass, "$!pos"
    lt $I11, 0, rx237_fail771
    repr_get_attr_int rx237_pos, $P11, rx237_curclass, "$!pos"
    goto alt239_end778
  alt239_end778:
    rx237_cur."!cursor_pass"(rx237_pos, "pblock", 'backtrack'=>1)
    .return (rx237_cur)
  rx237_restart770:
    repr_get_attr_obj rx237_cstack, rx237_cur, rx237_curclass, "$!cstack"
  rx237_fail771:
    unless rx237_bstack, rx237_done769
    pop $I19, rx237_bstack
    if_null rx237_cstack, rx237_cstack_done774
    unless rx237_cstack, rx237_cstack_done774
    dec $I19
    set $P11, rx237_cstack[$I19]
  rx237_cstack_done774:
    pop rx237_rep, rx237_bstack
    pop rx237_pos, rx237_bstack
    pop $I19, rx237_bstack
    lt rx237_pos, -1, rx237_done769
    lt rx237_pos, 0, rx237_fail771
    eq $I19, 0, rx237_fail771
    nqp_islist $I20, rx237_cstack
    unless $I20, rx237_jump772
    elements $I18, rx237_bstack
    le $I18, 0, rx237_cut773
    dec $I18
    set $I18, rx237_bstack[$I18]
  rx237_cut773:
    assign rx237_cstack, $I18
  rx237_jump772:
    jump $I19
  rx237_done769:
    rx237_cur."!cursor_fail"()
    .return (rx237_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_50_1349901750.327_caps" :subid("cuid_memo_36_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["signature"], $P5002
    box $P5003, 0
    set $P5001["blockoid"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_50_1349901750.327_nfa" :subid("cuid_memo_37_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "lambda"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    box $P5007, 6
    push $P5003, $P5007
    box $P5008, "{"
    push $P5003, $P5008
    box $P5009, 6
    push $P5003, $P5009
    box $P5010, 8
    push $P5003, $P5010
    box $P5011, "panic"
    push $P5003, $P5011
    box $P5012, 0
    push $P5003, $P5012
    push $P5001, $P5003
    new $P5013, 'ResizablePMCArray'
    box $P5014, 8
    push $P5013, $P5014
    box $P5015, "newpad"
    push $P5013, $P5015
    box $P5016, 3
    push $P5013, $P5016
    push $P5001, $P5013
    new $P5017, 'ResizablePMCArray'
    box $P5018, 8
    push $P5017, $P5018
    box $P5019, "signature"
    push $P5017, $P5019
    box $P5020, 4
    push $P5017, $P5020
    push $P5001, $P5017
    new $P5021, 'ResizablePMCArray'
    box $P5022, 8
    push $P5021, $P5022
    box $P5023, "ws"
    push $P5021, $P5023
    box $P5024, 5
    push $P5021, $P5024
    push $P5001, $P5021
    new $P5025, 'ResizablePMCArray'
    box $P5026, 8
    push $P5025, $P5026
    box $P5027, "blockoid"
    push $P5025, $P5027
    box $P5028, 0
    push $P5025, $P5028
    push $P5001, $P5025
    new $P5029, 'ResizablePMCArray'
    box $P5030, 0
    push $P5029, $P5030
    box $P5031, 0
    push $P5029, $P5031
    box $P5032, 0
    push $P5029, $P5032
    push $P5001, $P5029
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_50_1349901750.327_alt_nfa__10_1349901751.875" :subid("cuid_memo_38_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 8
    push $P5004, $P5005
    box $P5006, "lambda"
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 8
    push $P5008, $P5009
    box $P5010, "newpad"
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 8
    push $P5012, $P5013
    box $P5014, "signature"
    push $P5012, $P5014
    box $P5015, 4
    push $P5012, $P5015
    push $P5002, $P5012
    new $P5016, 'ResizablePMCArray'
    box $P5017, 8
    push $P5016, $P5017
    box $P5018, "ws"
    push $P5016, $P5018
    box $P5019, 5
    push $P5016, $P5019
    push $P5002, $P5016
    new $P5020, 'ResizablePMCArray'
    box $P5021, 8
    push $P5020, $P5021
    box $P5022, "blockoid"
    push $P5020, $P5022
    box $P5023, 0
    push $P5020, $P5023
    push $P5002, $P5020
    push $P5001, $P5002
    new $P5024, 'ResizablePMCArray'
    new $P5025, 'ResizablePMCArray'
    push $P5024, $P5025
    new $P5026, 'ResizablePMCArray'
    box $P5027, 6
    push $P5026, $P5027
    box $P5028, "{"
    push $P5026, $P5028
    box $P5029, 2
    push $P5026, $P5029
    push $P5024, $P5026
    new $P5030, 'ResizablePMCArray'
    box $P5031, 0
    push $P5030, $P5031
    box $P5032, 0
    push $P5030, $P5032
    box $P5033, 0
    push $P5030, $P5033
    push $P5024, $P5030
    push $P5001, $P5024
    new $P5034, 'ResizablePMCArray'
    new $P5035, 'ResizablePMCArray'
    push $P5034, $P5035
    new $P5036, 'ResizablePMCArray'
    box $P5037, 8
    push $P5036, $P5037
    box $P5038, "panic"
    push $P5036, $P5038
    box $P5039, 0
    push $P5036, $P5039
    push $P5034, $P5036
    push $P5001, $P5034
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "lambda" :subid("cuid_51_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 777
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx248_tgt
    .local int rx248_pos
    .local int rx248_off
    .local int rx248_eos
    .local int rx248_rep
    .local pmc rx248_cur
    .local pmc rx248_curclass
    .local pmc rx248_bstack
    .local pmc rx248_cstack
    (rx248_cur, rx248_tgt, rx248_pos, rx248_curclass, rx248_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx248_cur
    length rx248_eos, rx248_tgt
    eq $I19, 1, rx248_restart792
    gt rx248_pos, rx248_eos, rx248_fail793
    repr_get_attr_int $I11, self, rx248_curclass, "$!from"
    ne $I11, -1, rxscan249_done799
    goto rxscan249_scan798
  rxscan249_loop797:
    inc rx248_pos
    gt rx248_pos, rx248_eos, rx248_fail793
    repr_bind_attr_int rx248_cur, rx248_curclass, "$!from", rx248_pos
  rxscan249_scan798:
    nqp_rxmark rx248_bstack, rxscan249_loop797, rx248_pos, 0
  rxscan249_done799:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt250_0801
    nqp_push_label $P11, alt250_1802
    nqp_rxmark rx248_bstack, alt250_end800, -1, 0
    rx248_cur."!alt"(rx248_pos, "alt_nfa__11_1349901751.881", $P11)
    goto rx248_fail793
  alt250_0801:
    add $I11, rx248_pos, 2
    gt $I11, rx248_eos, rx248_fail793
    substr $S10, rx248_tgt, rx248_pos, 2
    ne $S10, ucs4:"->", rx248_fail793
    add rx248_pos, 2
    goto alt250_end800
  alt250_1802:
    add $I11, rx248_pos, 3
    gt $I11, rx248_eos, rx248_fail793
    substr $S10, rx248_tgt, rx248_pos, 3
    ne $S10, ucs4:"<->", rx248_fail793
    add rx248_pos, 3
    goto alt250_end800
  alt250_end800:
    rx248_cur."!cursor_pass"(rx248_pos, "lambda", 'backtrack'=>1)
    .return (rx248_cur)
  rx248_restart792:
    repr_get_attr_obj rx248_cstack, rx248_cur, rx248_curclass, "$!cstack"
  rx248_fail793:
    unless rx248_bstack, rx248_done791
    pop $I19, rx248_bstack
    if_null rx248_cstack, rx248_cstack_done796
    unless rx248_cstack, rx248_cstack_done796
    dec $I19
    set $P11, rx248_cstack[$I19]
  rx248_cstack_done796:
    pop rx248_rep, rx248_bstack
    pop rx248_pos, rx248_bstack
    pop $I19, rx248_bstack
    lt rx248_pos, -1, rx248_done791
    lt rx248_pos, 0, rx248_fail793
    eq $I19, 0, rx248_fail793
    nqp_islist $I20, rx248_cstack
    unless $I20, rx248_jump794
    elements $I18, rx248_bstack
    le $I18, 0, rx248_cut795
    dec $I18
    set $I18, rx248_bstack[$I18]
  rx248_cut795:
    assign rx248_cstack, $I18
  rx248_jump794:
    jump $I19
  rx248_done791:
    rx248_cur."!cursor_fail"()
    .return (rx248_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_51_1349901750.327_caps" :subid("cuid_memo_39_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_51_1349901750.327_nfa" :subid("cuid_memo_40_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 45
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    box $P5007, 2
    push $P5003, $P5007
    box $P5008, 60
    push $P5003, $P5008
    box $P5009, 3
    push $P5003, $P5009
    push $P5001, $P5003
    new $P5010, 'ResizablePMCArray'
    box $P5011, 2
    push $P5010, $P5011
    box $P5012, 62
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    push $P5001, $P5010
    new $P5014, 'ResizablePMCArray'
    box $P5015, 2
    push $P5014, $P5015
    box $P5016, 45
    push $P5014, $P5016
    box $P5017, 4
    push $P5014, $P5017
    push $P5001, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 2
    push $P5018, $P5019
    box $P5020, 62
    push $P5018, $P5020
    box $P5021, 0
    push $P5018, $P5021
    push $P5001, $P5018
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_51_1349901750.327_alt_nfa__11_1349901751.881" :subid("cuid_memo_41_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 45
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 62
    push $P5008, $P5010
    box $P5011, 0
    push $P5008, $P5011
    push $P5002, $P5008
    push $P5001, $P5002
    new $P5012, 'ResizablePMCArray'
    new $P5013, 'ResizablePMCArray'
    push $P5012, $P5013
    new $P5014, 'ResizablePMCArray'
    box $P5015, 2
    push $P5014, $P5015
    box $P5016, 60
    push $P5014, $P5016
    box $P5017, 2
    push $P5014, $P5017
    push $P5012, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 2
    push $P5018, $P5019
    box $P5020, 45
    push $P5018, $P5020
    box $P5021, 3
    push $P5018, $P5021
    push $P5012, $P5018
    new $P5022, 'ResizablePMCArray'
    box $P5023, 2
    push $P5022, $P5023
    box $P5024, 62
    push $P5022, $P5024
    box $P5025, 0
    push $P5022, $P5025
    push $P5012, $P5022
    push $P5001, $P5012
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "block" :subid("cuid_52_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 779
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx251_tgt
    .local int rx251_pos
    .local int rx251_off
    .local int rx251_eos
    .local int rx251_rep
    .local pmc rx251_cur
    .local pmc rx251_curclass
    .local pmc rx251_bstack
    .local pmc rx251_cstack
    (rx251_cur, rx251_tgt, rx251_pos, rx251_curclass, rx251_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx251_cur
    length rx251_eos, rx251_tgt
    eq $I19, 1, rx251_restart805
    gt rx251_pos, rx251_eos, rx251_fail806
    repr_get_attr_int $I11, self, rx251_curclass, "$!from"
    ne $I11, -1, rxscan252_done812
    goto rxscan252_scan811
  rxscan252_loop810:
    inc rx251_pos
    gt rx251_pos, rx251_eos, rx251_fail806
    repr_bind_attr_int rx251_cur, rx251_curclass, "$!from", rx251_pos
  rxscan252_scan811:
    nqp_rxmark rx251_bstack, rxscan252_loop810, rx251_pos, 0
  rxscan252_done812:
  alt253_0814:
    nqp_rxmark rx251_bstack, alt253_1815, rx251_pos, 0
    ge rx251_pos, rx251_eos, rx251_fail806
    substr $S11, rx251_tgt, rx251_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx251_fail806
    goto alt253_end813
  alt253_1815:
    repr_bind_attr_int rx251_cur, rx251_curclass, "$!pos", rx251_pos
    $P11 = rx251_cur."panic"("Missing block")
    repr_get_attr_int $I11, $P11, rx251_curclass, "$!pos"
    lt $I11, 0, rx251_fail806
    repr_get_attr_int rx251_pos, $P11, rx251_curclass, "$!pos"
  alt253_end813:
    repr_bind_attr_int rx251_cur, rx251_curclass, "$!pos", rx251_pos
    $P11 = rx251_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx251_curclass, "$!pos"
    lt $I11, 0, rx251_fail806
    repr_get_attr_int rx251_pos, $P11, rx251_curclass, "$!pos"
    repr_bind_attr_int rx251_cur, rx251_curclass, "$!pos", rx251_pos
    $P11 = rx251_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx251_curclass, "$!pos"
    lt $I11, 0, rx251_fail806
    nqp_rxmark rx251_bstack, rxsubrule256_pass818, -1, 0
  rxsubrule256_pass818:
    rx251_cstack = rx251_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx251_pos, $P11, rx251_curclass, "$!pos"
    rx251_cur."!cursor_pass"(rx251_pos, "block", 'backtrack'=>1)
    .return (rx251_cur)
  rx251_restart805:
    repr_get_attr_obj rx251_cstack, rx251_cur, rx251_curclass, "$!cstack"
  rx251_fail806:
    unless rx251_bstack, rx251_done804
    pop $I19, rx251_bstack
    if_null rx251_cstack, rx251_cstack_done809
    unless rx251_cstack, rx251_cstack_done809
    dec $I19
    set $P11, rx251_cstack[$I19]
  rx251_cstack_done809:
    pop rx251_rep, rx251_bstack
    pop rx251_pos, rx251_bstack
    pop $I19, rx251_bstack
    lt rx251_pos, -1, rx251_done804
    lt rx251_pos, 0, rx251_fail806
    eq $I19, 0, rx251_fail806
    nqp_islist $I20, rx251_cstack
    unless $I20, rx251_jump807
    elements $I18, rx251_bstack
    le $I18, 0, rx251_cut808
    dec $I18
    set $I18, rx251_bstack[$I18]
  rx251_cut808:
    assign rx251_cstack, $I18
  rx251_jump807:
    jump $I19
  rx251_done804:
    rx251_cur."!cursor_fail"()
    .return (rx251_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_52_1349901750.327_caps" :subid("cuid_memo_42_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["blockoid"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "blockoid" :subid("cuid_53_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 785
    .param pmc _lex_param_0 
    .lex "%*HANDLERS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    new $P5001, 'Hash'
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx257_tgt
    .local int rx257_pos
    .local int rx257_off
    .local int rx257_eos
    .local int rx257_rep
    .local pmc rx257_cur
    .local pmc rx257_curclass
    .local pmc rx257_bstack
    .local pmc rx257_cstack
    (rx257_cur, rx257_tgt, rx257_pos, rx257_curclass, rx257_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx257_cur
    length rx257_eos, rx257_tgt
    eq $I19, 1, rx257_restart821
    gt rx257_pos, rx257_eos, rx257_fail822
    repr_get_attr_int $I11, self, rx257_curclass, "$!from"
    ne $I11, -1, rxscan258_done828
    goto rxscan258_scan827
  rxscan258_loop826:
    inc rx257_pos
    gt rx257_pos, rx257_eos, rx257_fail822
    repr_bind_attr_int rx257_cur, rx257_curclass, "$!from", rx257_pos
  rxscan258_scan827:
    nqp_rxmark rx257_bstack, rxscan258_loop826, rx257_pos, 0
  rxscan258_done828:
    repr_bind_attr_int rx257_cur, rx257_curclass, "$!pos", rx257_pos
    store_lex unicode:"$\x{a2}", rx257_cur
    unless_null $P101, fallback829
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%HANDLERS"]
    unless_null $P5002, fallback830
    nqp_get_sc_object $P5006, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%HANDLERS"], $P5007
    set $P5002, $P5007
  fallback830:
    unless_null $P5002, vivi_259831
    die "Contextual %*HANDLERS not found"
    box $P5008, "Contextual %*HANDLERS not found"
    set $P5002, $P5008
  vivi_259831:
    set $P101, $P5002
  fallback829:
    repr_bind_attr_int rx257_cur, rx257_curclass, "$!pos", rx257_pos
    $P11 = rx257_cur."finishpad"()
    repr_get_attr_int $I11, $P11, rx257_curclass, "$!pos"
    lt $I11, 0, rx257_fail822
    repr_get_attr_int rx257_pos, $P11, rx257_curclass, "$!pos"
  alt261_0834:
    nqp_rxmark rx257_bstack, alt261_1836, rx257_pos, 0
    add $I11, rx257_pos, 14
    gt $I11, rx257_eos, rx257_fail822
    substr $S10, rx257_tgt, rx257_pos, 14
    ne $S10, ucs4:"{YOU_ARE_HERE}", rx257_fail822
    add rx257_pos, 14
    repr_bind_attr_int rx257_cur, rx257_curclass, "$!pos", rx257_pos
    $P11 = rx257_cur."you_are_here"()
    repr_get_attr_int $I11, $P11, rx257_curclass, "$!pos"
    lt $I11, 0, rx257_fail822
    nqp_rxmark rx257_bstack, rxsubrule262_pass835, -1, 0
  rxsubrule262_pass835:
    rx257_cstack = rx257_cur."!cursor_capture"($P11, "you_are_here")
    repr_get_attr_int rx257_pos, $P11, rx257_curclass, "$!pos"
    goto alt261_end833
  alt261_1836:
    add $I11, rx257_pos, 1
    gt $I11, rx257_eos, rx257_fail822
    substr $S10, rx257_tgt, rx257_pos, 1
    ne $S10, ucs4:"{", rx257_fail822
    add rx257_pos, 1
    repr_bind_attr_int rx257_cur, rx257_curclass, "$!pos", rx257_pos
    $P11 = rx257_cur."statementlist"()
    repr_get_attr_int $I11, $P11, rx257_curclass, "$!pos"
    lt $I11, 0, rx257_fail822
    nqp_rxmark rx257_bstack, rxsubrule263_pass837, -1, 0
  rxsubrule263_pass837:
    rx257_cstack = rx257_cur."!cursor_capture"($P11, "statementlist")
    repr_get_attr_int rx257_pos, $P11, rx257_curclass, "$!pos"
  alt264_0839:
    nqp_rxmark rx257_bstack, alt264_1840, rx257_pos, 0
    add $I11, rx257_pos, 1
    gt $I11, rx257_eos, rx257_fail822
    substr $S10, rx257_tgt, rx257_pos, 1
    ne $S10, ucs4:"}", rx257_fail822
    add rx257_pos, 1
    goto alt264_end838
  alt264_1840:
    repr_bind_attr_int rx257_cur, rx257_curclass, "$!pos", rx257_pos
    $P11 = rx257_cur."FAILGOAL"("'}'")
    repr_get_attr_int $I11, $P11, rx257_curclass, "$!pos"
    lt $I11, 0, rx257_fail822
    goto rxsubrule265_pass841
  rxsubrule265_back842:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx257_curclass, "$!pos"
    lt $I11, 0, rx257_fail822
  rxsubrule265_pass841:
    rx257_cstack = rx257_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule265_back842
    push rx257_bstack, $I11
    push rx257_bstack, 0
    push rx257_bstack, rx257_pos
    elements $I11, rx257_cstack
    push rx257_bstack, $I11
    repr_get_attr_int rx257_pos, $P11, rx257_curclass, "$!pos"
  alt264_end838:
  alt261_end833:
    repr_bind_attr_int rx257_cur, rx257_curclass, "$!pos", rx257_pos
    $P11 = rx257_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx257_curclass, "$!pos"
    lt $I11, 0, rx257_fail822
    rx257_cur."!cursor_pass"(rx257_pos, "blockoid", 'backtrack'=>1)
    .return (rx257_cur)
  rx257_restart821:
    repr_get_attr_obj rx257_cstack, rx257_cur, rx257_curclass, "$!cstack"
  rx257_fail822:
    unless rx257_bstack, rx257_done820
    pop $I19, rx257_bstack
    if_null rx257_cstack, rx257_cstack_done825
    unless rx257_cstack, rx257_cstack_done825
    dec $I19
    set $P11, rx257_cstack[$I19]
  rx257_cstack_done825:
    pop rx257_rep, rx257_bstack
    pop rx257_pos, rx257_bstack
    pop $I19, rx257_bstack
    lt rx257_pos, -1, rx257_done820
    lt rx257_pos, 0, rx257_fail822
    eq $I19, 0, rx257_fail822
    nqp_islist $I20, rx257_cstack
    unless $I20, rx257_jump823
    elements $I18, rx257_bstack
    le $I18, 0, rx257_cut824
    dec $I18
    set $I18, rx257_bstack[$I18]
  rx257_cut824:
    assign rx257_cstack, $I18
  rx257_jump823:
    jump $I19
  rx257_done820:
    rx257_cur."!cursor_fail"()
    .return (rx257_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_53_1349901750.327_caps" :subid("cuid_memo_43_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["you_are_here"], $P5002
    box $P5003, 0
    set $P5001["statementlist"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_53_1349901750.327_nfa" :subid("cuid_memo_44_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "finishpad"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 0
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "newpad" :subid("cuid_54_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 795
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx266_tgt
    .local int rx266_pos
    .local int rx266_off
    .local int rx266_eos
    .local int rx266_rep
    .local pmc rx266_cur
    .local pmc rx266_curclass
    .local pmc rx266_bstack
    .local pmc rx266_cstack
    (rx266_cur, rx266_tgt, rx266_pos, rx266_curclass, rx266_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx266_cur
    length rx266_eos, rx266_tgt
    eq $I19, 1, rx266_restart845
    gt rx266_pos, rx266_eos, rx266_fail846
    repr_get_attr_int $I11, self, rx266_curclass, "$!from"
    ne $I11, -1, rxscan267_done852
    goto rxscan267_scan851
  rxscan267_loop850:
    inc rx266_pos
    gt rx266_pos, rx266_eos, rx266_fail846
    repr_bind_attr_int rx266_cur, rx266_curclass, "$!from", rx266_pos
  rxscan267_scan851:
    nqp_rxmark rx266_bstack, rxscan267_loop850, rx266_pos, 0
  rxscan267_done852:
    rx266_cur."!cursor_pass"(rx266_pos, "newpad", 'backtrack'=>1)
    .return (rx266_cur)
  rx266_restart845:
    repr_get_attr_obj rx266_cstack, rx266_cur, rx266_curclass, "$!cstack"
  rx266_fail846:
    unless rx266_bstack, rx266_done844
    pop $I19, rx266_bstack
    if_null rx266_cstack, rx266_cstack_done849
    unless rx266_cstack, rx266_cstack_done849
    dec $I19
    set $P11, rx266_cstack[$I19]
  rx266_cstack_done849:
    pop rx266_rep, rx266_bstack
    pop rx266_pos, rx266_bstack
    pop $I19, rx266_bstack
    lt rx266_pos, -1, rx266_done844
    lt rx266_pos, 0, rx266_fail846
    eq $I19, 0, rx266_fail846
    nqp_islist $I20, rx266_cstack
    unless $I20, rx266_jump847
    elements $I18, rx266_bstack
    le $I18, 0, rx266_cut848
    dec $I18
    set $I18, rx266_bstack[$I18]
  rx266_cut848:
    assign rx266_cstack, $I18
  rx266_jump847:
    jump $I19
  rx266_done844:
    rx266_cur."!cursor_fail"()
    .return (rx266_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_54_1349901750.327_caps" :subid("cuid_memo_45_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_54_1349901750.327_nfa" :subid("cuid_memo_46_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "outerctx" :subid("cuid_55_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 796
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx269_tgt
    .local int rx269_pos
    .local int rx269_off
    .local int rx269_eos
    .local int rx269_rep
    .local pmc rx269_cur
    .local pmc rx269_curclass
    .local pmc rx269_bstack
    .local pmc rx269_cstack
    (rx269_cur, rx269_tgt, rx269_pos, rx269_curclass, rx269_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx269_cur
    length rx269_eos, rx269_tgt
    eq $I19, 1, rx269_restart856
    gt rx269_pos, rx269_eos, rx269_fail857
    repr_get_attr_int $I11, self, rx269_curclass, "$!from"
    ne $I11, -1, rxscan270_done863
    goto rxscan270_scan862
  rxscan270_loop861:
    inc rx269_pos
    gt rx269_pos, rx269_eos, rx269_fail857
    repr_bind_attr_int rx269_cur, rx269_curclass, "$!from", rx269_pos
  rxscan270_scan862:
    nqp_rxmark rx269_bstack, rxscan270_loop861, rx269_pos, 0
  rxscan270_done863:
    rx269_cur."!cursor_pass"(rx269_pos, "outerctx", 'backtrack'=>1)
    .return (rx269_cur)
  rx269_restart856:
    repr_get_attr_obj rx269_cstack, rx269_cur, rx269_curclass, "$!cstack"
  rx269_fail857:
    unless rx269_bstack, rx269_done855
    pop $I19, rx269_bstack
    if_null rx269_cstack, rx269_cstack_done860
    unless rx269_cstack, rx269_cstack_done860
    dec $I19
    set $P11, rx269_cstack[$I19]
  rx269_cstack_done860:
    pop rx269_rep, rx269_bstack
    pop rx269_pos, rx269_bstack
    pop $I19, rx269_bstack
    lt rx269_pos, -1, rx269_done855
    lt rx269_pos, 0, rx269_fail857
    eq $I19, 0, rx269_fail857
    nqp_islist $I20, rx269_cstack
    unless $I20, rx269_jump858
    elements $I18, rx269_bstack
    le $I18, 0, rx269_cut859
    dec $I18
    set $I18, rx269_bstack[$I18]
  rx269_cut859:
    assign rx269_cstack, $I18
  rx269_jump858:
    jump $I19
  rx269_done855:
    rx269_cur."!cursor_fail"()
    .return (rx269_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_55_1349901750.327_caps" :subid("cuid_memo_47_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_55_1349901750.327_nfa" :subid("cuid_memo_48_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "finishpad" :subid("cuid_56_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 797
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx272_tgt
    .local int rx272_pos
    .local int rx272_off
    .local int rx272_eos
    .local int rx272_rep
    .local pmc rx272_cur
    .local pmc rx272_curclass
    .local pmc rx272_bstack
    .local pmc rx272_cstack
    (rx272_cur, rx272_tgt, rx272_pos, rx272_curclass, rx272_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx272_cur
    length rx272_eos, rx272_tgt
    eq $I19, 1, rx272_restart867
    gt rx272_pos, rx272_eos, rx272_fail868
    repr_get_attr_int $I11, self, rx272_curclass, "$!from"
    ne $I11, -1, rxscan273_done874
    goto rxscan273_scan873
  rxscan273_loop872:
    inc rx272_pos
    gt rx272_pos, rx272_eos, rx272_fail868
    repr_bind_attr_int rx272_cur, rx272_curclass, "$!from", rx272_pos
  rxscan273_scan873:
    nqp_rxmark rx272_bstack, rxscan273_loop872, rx272_pos, 0
  rxscan273_done874:
    rx272_cur."!cursor_pass"(rx272_pos, "finishpad", 'backtrack'=>1)
    .return (rx272_cur)
  rx272_restart867:
    repr_get_attr_obj rx272_cstack, rx272_cur, rx272_curclass, "$!cstack"
  rx272_fail868:
    unless rx272_bstack, rx272_done866
    pop $I19, rx272_bstack
    if_null rx272_cstack, rx272_cstack_done871
    unless rx272_cstack, rx272_cstack_done871
    dec $I19
    set $P11, rx272_cstack[$I19]
  rx272_cstack_done871:
    pop rx272_rep, rx272_bstack
    pop rx272_pos, rx272_bstack
    pop $I19, rx272_bstack
    lt rx272_pos, -1, rx272_done866
    lt rx272_pos, 0, rx272_fail868
    eq $I19, 0, rx272_fail868
    nqp_islist $I20, rx272_cstack
    unless $I20, rx272_jump869
    elements $I18, rx272_bstack
    le $I18, 0, rx272_cut870
    dec $I18
    set $I18, rx272_bstack[$I18]
  rx272_cut870:
    assign rx272_cstack, $I18
  rx272_jump869:
    jump $I19
  rx272_done866:
    rx272_cur."!cursor_fail"()
    .return (rx272_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_56_1349901750.327_caps" :subid("cuid_memo_49_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_56_1349901750.327_nfa" :subid("cuid_memo_50_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "you_are_here" :subid("cuid_57_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 798
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx275_tgt
    .local int rx275_pos
    .local int rx275_off
    .local int rx275_eos
    .local int rx275_rep
    .local pmc rx275_cur
    .local pmc rx275_curclass
    .local pmc rx275_bstack
    .local pmc rx275_cstack
    (rx275_cur, rx275_tgt, rx275_pos, rx275_curclass, rx275_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx275_cur
    length rx275_eos, rx275_tgt
    eq $I19, 1, rx275_restart878
    gt rx275_pos, rx275_eos, rx275_fail879
    repr_get_attr_int $I11, self, rx275_curclass, "$!from"
    ne $I11, -1, rxscan276_done885
    goto rxscan276_scan884
  rxscan276_loop883:
    inc rx275_pos
    gt rx275_pos, rx275_eos, rx275_fail879
    repr_bind_attr_int rx275_cur, rx275_curclass, "$!from", rx275_pos
  rxscan276_scan884:
    nqp_rxmark rx275_bstack, rxscan276_loop883, rx275_pos, 0
  rxscan276_done885:
    rx275_cur."!cursor_pass"(rx275_pos, "you_are_here", 'backtrack'=>1)
    .return (rx275_cur)
  rx275_restart878:
    repr_get_attr_obj rx275_cstack, rx275_cur, rx275_curclass, "$!cstack"
  rx275_fail879:
    unless rx275_bstack, rx275_done877
    pop $I19, rx275_bstack
    if_null rx275_cstack, rx275_cstack_done882
    unless rx275_cstack, rx275_cstack_done882
    dec $I19
    set $P11, rx275_cstack[$I19]
  rx275_cstack_done882:
    pop rx275_rep, rx275_bstack
    pop rx275_pos, rx275_bstack
    pop $I19, rx275_bstack
    lt rx275_pos, -1, rx275_done877
    lt rx275_pos, 0, rx275_fail879
    eq $I19, 0, rx275_fail879
    nqp_islist $I20, rx275_cstack
    unless $I20, rx275_jump880
    elements $I18, rx275_bstack
    le $I18, 0, rx275_cut881
    dec $I18
    set $I18, rx275_bstack[$I18]
  rx275_cut881:
    assign rx275_cstack, $I18
  rx275_jump880:
    jump $I19
  rx275_done877:
    rx275_cur."!cursor_fail"()
    .return (rx275_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_57_1349901750.327_caps" :subid("cuid_memo_51_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_57_1349901750.327_nfa" :subid("cuid_memo_52_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "terminator" :subid("cuid_58_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 800
    .param pmc self 
    $P5001 = self."!protoregex"("terminator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "terminator:sym<;>" :subid("cuid_59_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 802
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx278_tgt
    .local int rx278_pos
    .local int rx278_off
    .local int rx278_eos
    .local int rx278_rep
    .local pmc rx278_cur
    .local pmc rx278_curclass
    .local pmc rx278_bstack
    .local pmc rx278_cstack
    (rx278_cur, rx278_tgt, rx278_pos, rx278_curclass, rx278_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx278_cur
    length rx278_eos, rx278_tgt
    eq $I19, 1, rx278_restart889
    gt rx278_pos, rx278_eos, rx278_fail890
    repr_get_attr_int $I11, self, rx278_curclass, "$!from"
    ne $I11, -1, rxscan279_done896
    goto rxscan279_scan895
  rxscan279_loop894:
    inc rx278_pos
    gt rx278_pos, rx278_eos, rx278_fail890
    repr_bind_attr_int rx278_cur, rx278_curclass, "$!from", rx278_pos
  rxscan279_scan895:
    nqp_rxmark rx278_bstack, rxscan279_loop894, rx278_pos, 0
  rxscan279_done896:
    ge rx278_pos, rx278_eos, rx278_fail890
    substr $S11, rx278_tgt, rx278_pos, 1
    index $I11, ucs4:";", $S11
    lt $I11, 0, rx278_fail890
    rx278_cur."!cursor_pass"(rx278_pos, "terminator:sym<;>", 'backtrack'=>1)
    .return (rx278_cur)
  rx278_restart889:
    repr_get_attr_obj rx278_cstack, rx278_cur, rx278_curclass, "$!cstack"
  rx278_fail890:
    unless rx278_bstack, rx278_done888
    pop $I19, rx278_bstack
    if_null rx278_cstack, rx278_cstack_done893
    unless rx278_cstack, rx278_cstack_done893
    dec $I19
    set $P11, rx278_cstack[$I19]
  rx278_cstack_done893:
    pop rx278_rep, rx278_bstack
    pop rx278_pos, rx278_bstack
    pop $I19, rx278_bstack
    lt rx278_pos, -1, rx278_done888
    lt rx278_pos, 0, rx278_fail890
    eq $I19, 0, rx278_fail890
    nqp_islist $I20, rx278_cstack
    unless $I20, rx278_jump891
    elements $I18, rx278_bstack
    le $I18, 0, rx278_cut892
    dec $I18
    set $I18, rx278_bstack[$I18]
  rx278_cut892:
    assign rx278_cstack, $I18
  rx278_jump891:
    jump $I19
  rx278_done888:
    rx278_cur."!cursor_fail"()
    .return (rx278_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_59_1349901750.327_caps" :subid("cuid_memo_53_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_59_1349901750.327_nfa" :subid("cuid_memo_54_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, ";"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "terminator:sym<}>" :subid("cuid_60_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 803
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx280_tgt
    .local int rx280_pos
    .local int rx280_off
    .local int rx280_eos
    .local int rx280_rep
    .local pmc rx280_cur
    .local pmc rx280_curclass
    .local pmc rx280_bstack
    .local pmc rx280_cstack
    (rx280_cur, rx280_tgt, rx280_pos, rx280_curclass, rx280_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx280_cur
    length rx280_eos, rx280_tgt
    eq $I19, 1, rx280_restart899
    gt rx280_pos, rx280_eos, rx280_fail900
    repr_get_attr_int $I11, self, rx280_curclass, "$!from"
    ne $I11, -1, rxscan281_done906
    goto rxscan281_scan905
  rxscan281_loop904:
    inc rx280_pos
    gt rx280_pos, rx280_eos, rx280_fail900
    repr_bind_attr_int rx280_cur, rx280_curclass, "$!from", rx280_pos
  rxscan281_scan905:
    nqp_rxmark rx280_bstack, rxscan281_loop904, rx280_pos, 0
  rxscan281_done906:
    ge rx280_pos, rx280_eos, rx280_fail900
    substr $S11, rx280_tgt, rx280_pos, 1
    index $I11, ucs4:"}", $S11
    lt $I11, 0, rx280_fail900
    rx280_cur."!cursor_pass"(rx280_pos, "terminator:sym<}>", 'backtrack'=>1)
    .return (rx280_cur)
  rx280_restart899:
    repr_get_attr_obj rx280_cstack, rx280_cur, rx280_curclass, "$!cstack"
  rx280_fail900:
    unless rx280_bstack, rx280_done898
    pop $I19, rx280_bstack
    if_null rx280_cstack, rx280_cstack_done903
    unless rx280_cstack, rx280_cstack_done903
    dec $I19
    set $P11, rx280_cstack[$I19]
  rx280_cstack_done903:
    pop rx280_rep, rx280_bstack
    pop rx280_pos, rx280_bstack
    pop $I19, rx280_bstack
    lt rx280_pos, -1, rx280_done898
    lt rx280_pos, 0, rx280_fail900
    eq $I19, 0, rx280_fail900
    nqp_islist $I20, rx280_cstack
    unless $I20, rx280_jump901
    elements $I18, rx280_bstack
    le $I18, 0, rx280_cut902
    dec $I18
    set $I18, rx280_bstack[$I18]
  rx280_cut902:
    assign rx280_cstack, $I18
  rx280_jump901:
    jump $I19
  rx280_done898:
    rx280_cur."!cursor_fail"()
    .return (rx280_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_60_1349901750.327_caps" :subid("cuid_memo_55_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_60_1349901750.327_nfa" :subid("cuid_memo_56_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "}"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control" :subid("cuid_61_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 807
    .param pmc self 
    $P5001 = self."!protoregex"("statement_control")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<use>" :subid("cuid_62_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 809
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx282_tgt
    .local int rx282_pos
    .local int rx282_off
    .local int rx282_eos
    .local int rx282_rep
    .local pmc rx282_cur
    .local pmc rx282_curclass
    .local pmc rx282_bstack
    .local pmc rx282_cstack
    (rx282_cur, rx282_tgt, rx282_pos, rx282_curclass, rx282_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx282_cur
    length rx282_eos, rx282_tgt
    eq $I19, 1, rx282_restart909
    gt rx282_pos, rx282_eos, rx282_fail910
    repr_get_attr_int $I11, self, rx282_curclass, "$!from"
    ne $I11, -1, rxscan283_done916
    goto rxscan283_scan915
  rxscan283_loop914:
    inc rx282_pos
    gt rx282_pos, rx282_eos, rx282_fail910
    repr_bind_attr_int rx282_cur, rx282_curclass, "$!from", rx282_pos
  rxscan283_scan915:
    nqp_rxmark rx282_bstack, rxscan283_loop914, rx282_pos, 0
  rxscan283_done916:
    nqp_rxmark rx282_bstack, rxcap284_fail918, rx282_pos, 0
    add $I11, rx282_pos, 3
    gt $I11, rx282_eos, rx282_fail910
    substr $S10, rx282_tgt, rx282_pos, 3
    ne $S10, ucs4:"use", rx282_fail910
    add rx282_pos, 3
    nqp_rxpeek $I19, rx282_bstack, rxcap284_fail918
    inc $I19
    set $I11, rx282_bstack[$I19]
    repr_bind_attr_int rx282_cur, rx282_curclass, "$!pos", rx282_pos
    $P11 = rx282_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx282_pos)
    rx282_cstack = rx282_cur."!cursor_capture"($P11, "sym")
    goto rxcap284_done917
  rxcap284_fail918:
    goto rx282_fail910
  rxcap284_done917:
    ge rx282_pos, rx282_eos, rx282_fail910
    is_cclass $I11, .CCLASS_WHITESPACE, rx282_tgt, rx282_pos
    unless $I11, rx282_fail910
    add rx282_pos, 1
    repr_bind_attr_int rx282_cur, rx282_curclass, "$!pos", rx282_pos
    $P11 = rx282_cur."ws"()
    repr_get_attr_int $I11, $P11, rx282_curclass, "$!pos"
    lt $I11, 0, rx282_fail910
    repr_get_attr_int rx282_pos, $P11, rx282_curclass, "$!pos"
    repr_bind_attr_int rx282_cur, rx282_curclass, "$!pos", rx282_pos
    $P11 = rx282_cur."name"()
    repr_get_attr_int $I11, $P11, rx282_curclass, "$!pos"
    lt $I11, 0, rx282_fail910
    nqp_rxmark rx282_bstack, rxsubrule286_pass920, -1, 0
  rxsubrule286_pass920:
    rx282_cstack = rx282_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx282_pos, $P11, rx282_curclass, "$!pos"
    repr_bind_attr_int rx282_cur, rx282_curclass, "$!pos", rx282_pos
    $P11 = rx282_cur."ws"()
    repr_get_attr_int $I11, $P11, rx282_curclass, "$!pos"
    lt $I11, 0, rx282_fail910
    repr_get_attr_int rx282_pos, $P11, rx282_curclass, "$!pos"
    rx282_cur."!cursor_pass"(rx282_pos, "statement_control:sym<use>", 'backtrack'=>1)
    .return (rx282_cur)
  rx282_restart909:
    repr_get_attr_obj rx282_cstack, rx282_cur, rx282_curclass, "$!cstack"
  rx282_fail910:
    unless rx282_bstack, rx282_done908
    pop $I19, rx282_bstack
    if_null rx282_cstack, rx282_cstack_done913
    unless rx282_cstack, rx282_cstack_done913
    dec $I19
    set $P11, rx282_cstack[$I19]
  rx282_cstack_done913:
    pop rx282_rep, rx282_bstack
    pop rx282_pos, rx282_bstack
    pop $I19, rx282_bstack
    lt rx282_pos, -1, rx282_done908
    lt rx282_pos, 0, rx282_fail910
    eq $I19, 0, rx282_fail910
    nqp_islist $I20, rx282_cstack
    unless $I20, rx282_jump911
    elements $I18, rx282_bstack
    le $I18, 0, rx282_cut912
    dec $I18
    set $I18, rx282_bstack[$I18]
  rx282_cut912:
    assign rx282_cstack, $I18
  rx282_jump911:
    jump $I19
  rx282_done908:
    rx282_cur."!cursor_fail"()
    .return (rx282_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_62_1349901750.327_caps" :subid("cuid_memo_57_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["name"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_62_1349901750.327_nfa" :subid("cuid_memo_58_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 117
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 115
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 101
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 4
    push $P5015, $P5016
    box $P5017, 32
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 0
    push $P5019, $P5020
    box $P5021, 0
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<if>" :subid("cuid_63_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 813
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx288_tgt
    .local int rx288_pos
    .local int rx288_off
    .local int rx288_eos
    .local int rx288_rep
    .local pmc rx288_cur
    .local pmc rx288_curclass
    .local pmc rx288_bstack
    .local pmc rx288_cstack
    (rx288_cur, rx288_tgt, rx288_pos, rx288_curclass, rx288_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx288_cur
    length rx288_eos, rx288_tgt
    eq $I19, 1, rx288_restart924
    gt rx288_pos, rx288_eos, rx288_fail925
    repr_get_attr_int $I11, self, rx288_curclass, "$!from"
    ne $I11, -1, rxscan289_done931
    goto rxscan289_scan930
  rxscan289_loop929:
    inc rx288_pos
    gt rx288_pos, rx288_eos, rx288_fail925
    repr_bind_attr_int rx288_cur, rx288_curclass, "$!from", rx288_pos
  rxscan289_scan930:
    nqp_rxmark rx288_bstack, rxscan289_loop929, rx288_pos, 0
  rxscan289_done931:
    nqp_rxmark rx288_bstack, rxcap290_fail933, rx288_pos, 0
    add $I11, rx288_pos, 2
    gt $I11, rx288_eos, rx288_fail925
    substr $S10, rx288_tgt, rx288_pos, 2
    ne $S10, ucs4:"if", rx288_fail925
    add rx288_pos, 2
    nqp_rxpeek $I19, rx288_bstack, rxcap290_fail933
    inc $I19
    set $I11, rx288_bstack[$I19]
    repr_bind_attr_int rx288_cur, rx288_curclass, "$!pos", rx288_pos
    $P11 = rx288_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx288_pos)
    rx288_cstack = rx288_cur."!cursor_capture"($P11, "sym")
    goto rxcap290_done932
  rxcap290_fail933:
    goto rx288_fail925
  rxcap290_done932:
    ge rx288_pos, rx288_eos, rx288_fail925
    is_cclass $I11, .CCLASS_WHITESPACE, rx288_tgt, rx288_pos
    unless $I11, rx288_fail925
    add rx288_pos, 1
    repr_bind_attr_int rx288_cur, rx288_curclass, "$!pos", rx288_pos
    $P11 = rx288_cur."ws"()
    repr_get_attr_int $I11, $P11, rx288_curclass, "$!pos"
    lt $I11, 0, rx288_fail925
    repr_get_attr_int rx288_pos, $P11, rx288_curclass, "$!pos"
    repr_bind_attr_int rx288_cur, rx288_curclass, "$!pos", rx288_pos
    $P11 = rx288_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx288_curclass, "$!pos"
    lt $I11, 0, rx288_fail925
    nqp_rxmark rx288_bstack, rxsubrule292_pass935, -1, 0
  rxsubrule292_pass935:
    rx288_cstack = rx288_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx288_pos, $P11, rx288_curclass, "$!pos"
    repr_bind_attr_int rx288_cur, rx288_curclass, "$!pos", rx288_pos
    $P11 = rx288_cur."ws"()
    repr_get_attr_int $I11, $P11, rx288_curclass, "$!pos"
    lt $I11, 0, rx288_fail925
    repr_get_attr_int rx288_pos, $P11, rx288_curclass, "$!pos"
    nqp_rxmark rx288_bstack, rxquantr294_done938, rx288_pos, 0
  rxquantr294_loop937:
    repr_bind_attr_int rx288_cur, rx288_curclass, "$!pos", rx288_pos
    $P11 = rx288_cur."ws"()
    repr_get_attr_int $I11, $P11, rx288_curclass, "$!pos"
    lt $I11, 0, rx288_fail925
    repr_get_attr_int rx288_pos, $P11, rx288_curclass, "$!pos"
    add $I11, rx288_pos, 5
    gt $I11, rx288_eos, rx288_fail925
    substr $S10, rx288_tgt, rx288_pos, 5
    ne $S10, ucs4:"elsif", rx288_fail925
    add rx288_pos, 5
    ge rx288_pos, rx288_eos, rx288_fail925
    is_cclass $I11, .CCLASS_WHITESPACE, rx288_tgt, rx288_pos
    unless $I11, rx288_fail925
    add rx288_pos, 1
    repr_bind_attr_int rx288_cur, rx288_curclass, "$!pos", rx288_pos
    $P11 = rx288_cur."ws"()
    repr_get_attr_int $I11, $P11, rx288_curclass, "$!pos"
    lt $I11, 0, rx288_fail925
    repr_get_attr_int rx288_pos, $P11, rx288_curclass, "$!pos"
    repr_bind_attr_int rx288_cur, rx288_curclass, "$!pos", rx288_pos
    $P11 = rx288_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx288_curclass, "$!pos"
    lt $I11, 0, rx288_fail925
    nqp_rxmark rx288_bstack, rxsubrule297_pass941, -1, 0
  rxsubrule297_pass941:
    rx288_cstack = rx288_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx288_pos, $P11, rx288_curclass, "$!pos"
    repr_bind_attr_int rx288_cur, rx288_curclass, "$!pos", rx288_pos
    $P11 = rx288_cur."ws"()
    repr_get_attr_int $I11, $P11, rx288_curclass, "$!pos"
    lt $I11, 0, rx288_fail925
    repr_get_attr_int rx288_pos, $P11, rx288_curclass, "$!pos"
    nqp_rxpeek $I19, rx288_bstack, rxquantr294_done938
    inc $I19
    inc $I19
    set rx288_rep, rx288_bstack[$I19]
    nqp_rxcommit rx288_bstack, rxquantr294_done938
    inc rx288_rep
    nqp_rxmark rx288_bstack, rxquantr294_done938, rx288_pos, rx288_rep
    goto rxquantr294_loop937
  rxquantr294_done938:
    repr_bind_attr_int rx288_cur, rx288_curclass, "$!pos", rx288_pos
    $P11 = rx288_cur."ws"()
    repr_get_attr_int $I11, $P11, rx288_curclass, "$!pos"
    lt $I11, 0, rx288_fail925
    repr_get_attr_int rx288_pos, $P11, rx288_curclass, "$!pos"
    nqp_rxmark rx288_bstack, rxquantr300_done945, rx288_pos, 0
  rxquantr300_loop944:
    repr_bind_attr_int rx288_cur, rx288_curclass, "$!pos", rx288_pos
    $P11 = rx288_cur."ws"()
    repr_get_attr_int $I11, $P11, rx288_curclass, "$!pos"
    lt $I11, 0, rx288_fail925
    repr_get_attr_int rx288_pos, $P11, rx288_curclass, "$!pos"
    add $I11, rx288_pos, 4
    gt $I11, rx288_eos, rx288_fail925
    substr $S10, rx288_tgt, rx288_pos, 4
    ne $S10, ucs4:"else", rx288_fail925
    add rx288_pos, 4
    ge rx288_pos, rx288_eos, rx288_fail925
    is_cclass $I11, .CCLASS_WHITESPACE, rx288_tgt, rx288_pos
    unless $I11, rx288_fail925
    add rx288_pos, 1
    repr_bind_attr_int rx288_cur, rx288_curclass, "$!pos", rx288_pos
    $P11 = rx288_cur."ws"()
    repr_get_attr_int $I11, $P11, rx288_curclass, "$!pos"
    lt $I11, 0, rx288_fail925
    repr_get_attr_int rx288_pos, $P11, rx288_curclass, "$!pos"
    repr_bind_attr_int rx288_cur, rx288_curclass, "$!pos", rx288_pos
    $P11 = rx288_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx288_curclass, "$!pos"
    lt $I11, 0, rx288_fail925
    nqp_rxmark rx288_bstack, rxsubrule303_pass948, -1, 0
  rxsubrule303_pass948:
    rx288_cstack = rx288_cur."!cursor_capture"($P11, "else")
    repr_get_attr_int rx288_pos, $P11, rx288_curclass, "$!pos"
    repr_bind_attr_int rx288_cur, rx288_curclass, "$!pos", rx288_pos
    $P11 = rx288_cur."ws"()
    repr_get_attr_int $I11, $P11, rx288_curclass, "$!pos"
    lt $I11, 0, rx288_fail925
    repr_get_attr_int rx288_pos, $P11, rx288_curclass, "$!pos"
    nqp_rxpeek $I19, rx288_bstack, rxquantr300_done945
    inc $I19
    inc $I19
    set rx288_rep, rx288_bstack[$I19]
    nqp_rxcommit rx288_bstack, rxquantr300_done945
    inc rx288_rep
  rxquantr300_done945:
    repr_bind_attr_int rx288_cur, rx288_curclass, "$!pos", rx288_pos
    $P11 = rx288_cur."ws"()
    repr_get_attr_int $I11, $P11, rx288_curclass, "$!pos"
    lt $I11, 0, rx288_fail925
    repr_get_attr_int rx288_pos, $P11, rx288_curclass, "$!pos"
    rx288_cur."!cursor_pass"(rx288_pos, "statement_control:sym<if>", 'backtrack'=>1)
    .return (rx288_cur)
  rx288_restart924:
    repr_get_attr_obj rx288_cstack, rx288_cur, rx288_curclass, "$!cstack"
  rx288_fail925:
    unless rx288_bstack, rx288_done923
    pop $I19, rx288_bstack
    if_null rx288_cstack, rx288_cstack_done928
    unless rx288_cstack, rx288_cstack_done928
    dec $I19
    set $P11, rx288_cstack[$I19]
  rx288_cstack_done928:
    pop rx288_rep, rx288_bstack
    pop rx288_pos, rx288_bstack
    pop $I19, rx288_bstack
    lt rx288_pos, -1, rx288_done923
    lt rx288_pos, 0, rx288_fail925
    eq $I19, 0, rx288_fail925
    nqp_islist $I20, rx288_cstack
    unless $I20, rx288_jump926
    elements $I18, rx288_bstack
    le $I18, 0, rx288_cut927
    dec $I18
    set $I18, rx288_bstack[$I18]
  rx288_cut927:
    assign rx288_cstack, $I18
  rx288_jump926:
    jump $I19
  rx288_done923:
    rx288_cur."!cursor_fail"()
    .return (rx288_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_63_1349901750.327_caps" :subid("cuid_memo_59_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 2
    set $P5001["xblock"], $P5003
    box $P5004, 2
    set $P5001["else"], $P5004
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_63_1349901750.327_nfa" :subid("cuid_memo_60_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 105
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 102
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 4
    push $P5011, $P5012
    box $P5013, 32
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 0
    push $P5015, $P5016
    box $P5017, 0
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<unless>" :subid("cuid_65_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 820
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_64_1349901750.327' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx306_tgt
    .local int rx306_pos
    .local int rx306_off
    .local int rx306_eos
    .local int rx306_rep
    .local pmc rx306_cur
    .local pmc rx306_curclass
    .local pmc rx306_bstack
    .local pmc rx306_cstack
    (rx306_cur, rx306_tgt, rx306_pos, rx306_curclass, rx306_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx306_cur
    length rx306_eos, rx306_tgt
    eq $I19, 1, rx306_restart953
    gt rx306_pos, rx306_eos, rx306_fail954
    repr_get_attr_int $I11, self, rx306_curclass, "$!from"
    ne $I11, -1, rxscan307_done960
    goto rxscan307_scan959
  rxscan307_loop958:
    inc rx306_pos
    gt rx306_pos, rx306_eos, rx306_fail954
    repr_bind_attr_int rx306_cur, rx306_curclass, "$!from", rx306_pos
  rxscan307_scan959:
    nqp_rxmark rx306_bstack, rxscan307_loop958, rx306_pos, 0
  rxscan307_done960:
    nqp_rxmark rx306_bstack, rxcap308_fail962, rx306_pos, 0
    add $I11, rx306_pos, 6
    gt $I11, rx306_eos, rx306_fail954
    substr $S10, rx306_tgt, rx306_pos, 6
    ne $S10, ucs4:"unless", rx306_fail954
    add rx306_pos, 6
    nqp_rxpeek $I19, rx306_bstack, rxcap308_fail962
    inc $I19
    set $I11, rx306_bstack[$I19]
    repr_bind_attr_int rx306_cur, rx306_curclass, "$!pos", rx306_pos
    $P11 = rx306_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx306_pos)
    rx306_cstack = rx306_cur."!cursor_capture"($P11, "sym")
    goto rxcap308_done961
  rxcap308_fail962:
    goto rx306_fail954
  rxcap308_done961:
    ge rx306_pos, rx306_eos, rx306_fail954
    is_cclass $I11, .CCLASS_WHITESPACE, rx306_tgt, rx306_pos
    unless $I11, rx306_fail954
    add rx306_pos, 1
    repr_bind_attr_int rx306_cur, rx306_curclass, "$!pos", rx306_pos
    $P11 = rx306_cur."ws"()
    repr_get_attr_int $I11, $P11, rx306_curclass, "$!pos"
    lt $I11, 0, rx306_fail954
    repr_get_attr_int rx306_pos, $P11, rx306_curclass, "$!pos"
    repr_bind_attr_int rx306_cur, rx306_curclass, "$!pos", rx306_pos
    $P11 = rx306_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx306_curclass, "$!pos"
    lt $I11, 0, rx306_fail954
    nqp_rxmark rx306_bstack, rxsubrule310_pass964, -1, 0
  rxsubrule310_pass964:
    rx306_cstack = rx306_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx306_pos, $P11, rx306_curclass, "$!pos"
    repr_bind_attr_int rx306_cur, rx306_curclass, "$!pos", rx306_pos
    $P11 = rx306_cur."ws"()
    repr_get_attr_int $I11, $P11, rx306_curclass, "$!pos"
    lt $I11, 0, rx306_fail954
    repr_get_attr_int rx306_pos, $P11, rx306_curclass, "$!pos"
  alt312_0967:
    nqp_rxmark rx306_bstack, alt312_1980, rx306_pos, 0
    repr_bind_attr_int rx306_cur, rx306_curclass, "$!pos", rx306_pos
    $P11 = rx306_cur."ws"()
    repr_get_attr_int $I11, $P11, rx306_curclass, "$!pos"
    lt $I11, 0, rx306_fail954
    repr_get_attr_int rx306_pos, $P11, rx306_curclass, "$!pos"
    .const 'Sub' $P5001 = 'cuid_64_1349901750.327' 
    capture_lex $P5001
    repr_bind_attr_int rx306_cur, rx306_curclass, "$!pos", rx306_pos
    $P11 = rx306_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx306_curclass, "$!pos"
    ge $I11, 0, rx306_fail954
    repr_bind_attr_int rx306_cur, rx306_curclass, "$!pos", rx306_pos
    $P11 = rx306_cur."ws"()
    repr_get_attr_int $I11, $P11, rx306_curclass, "$!pos"
    lt $I11, 0, rx306_fail954
    repr_get_attr_int rx306_pos, $P11, rx306_curclass, "$!pos"
    goto alt312_end966
  alt312_1980:
    repr_bind_attr_int rx306_cur, rx306_curclass, "$!pos", rx306_pos
    $P11 = rx306_cur."ws"()
    repr_get_attr_int $I11, $P11, rx306_curclass, "$!pos"
    lt $I11, 0, rx306_fail954
    repr_get_attr_int rx306_pos, $P11, rx306_curclass, "$!pos"
    repr_bind_attr_int rx306_cur, rx306_curclass, "$!pos", rx306_pos
    $P11 = rx306_cur."panic"("unless does not take \"else\", please rewrite using \"if\"")
    repr_get_attr_int $I11, $P11, rx306_curclass, "$!pos"
    lt $I11, 0, rx306_fail954
    repr_get_attr_int rx306_pos, $P11, rx306_curclass, "$!pos"
    repr_bind_attr_int rx306_cur, rx306_curclass, "$!pos", rx306_pos
    $P11 = rx306_cur."ws"()
    repr_get_attr_int $I11, $P11, rx306_curclass, "$!pos"
    lt $I11, 0, rx306_fail954
    repr_get_attr_int rx306_pos, $P11, rx306_curclass, "$!pos"
  alt312_end966:
    repr_bind_attr_int rx306_cur, rx306_curclass, "$!pos", rx306_pos
    $P11 = rx306_cur."ws"()
    repr_get_attr_int $I11, $P11, rx306_curclass, "$!pos"
    lt $I11, 0, rx306_fail954
    repr_get_attr_int rx306_pos, $P11, rx306_curclass, "$!pos"
    rx306_cur."!cursor_pass"(rx306_pos, "statement_control:sym<unless>", 'backtrack'=>1)
    .return (rx306_cur)
  rx306_restart953:
    repr_get_attr_obj rx306_cstack, rx306_cur, rx306_curclass, "$!cstack"
  rx306_fail954:
    unless rx306_bstack, rx306_done952
    pop $I19, rx306_bstack
    if_null rx306_cstack, rx306_cstack_done957
    unless rx306_cstack, rx306_cstack_done957
    dec $I19
    set $P11, rx306_cstack[$I19]
  rx306_cstack_done957:
    pop rx306_rep, rx306_bstack
    pop rx306_pos, rx306_bstack
    pop $I19, rx306_bstack
    lt rx306_pos, -1, rx306_done952
    lt rx306_pos, 0, rx306_fail954
    eq $I19, 0, rx306_fail954
    nqp_islist $I20, rx306_cstack
    unless $I20, rx306_jump955
    elements $I18, rx306_bstack
    le $I18, 0, rx306_cut956
    dec $I18
    set $I18, rx306_bstack[$I18]
  rx306_cut956:
    assign rx306_cstack, $I18
  rx306_jump955:
    jump $I19
  rx306_done952:
    rx306_cur."!cursor_fail"()
    .return (rx306_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_65_1349901750.327_caps" :subid("cuid_memo_61_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["xblock"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_65_1349901750.327_nfa" :subid("cuid_memo_62_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 117
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 110
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 108
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 101
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 115
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 115
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 4
    push $P5027, $P5028
    box $P5029, 32
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 0
    push $P5031, $P5032
    box $P5033, 0
    push $P5031, $P5033
    box $P5034, 0
    push $P5031, $P5034
    push $P5001, $P5031
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_64_1349901750.327") :anon :lex :outer("cuid_65_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx314_tgt
    .local int rx314_pos
    .local int rx314_off
    .local int rx314_eos
    .local int rx314_rep
    .local pmc rx314_cur
    .local pmc rx314_curclass
    .local pmc rx314_bstack
    .local pmc rx314_cstack
    (rx314_cur, rx314_tgt, rx314_pos, rx314_curclass, rx314_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx314_cur
    length rx314_eos, rx314_tgt
    eq $I19, 1, rx314_restart971
    gt rx314_pos, rx314_eos, rx314_fail972
    repr_get_attr_int $I11, self, rx314_curclass, "$!from"
    ne $I11, -1, rxscan315_done978
    goto rxscan315_scan977
  rxscan315_loop976:
    inc rx314_pos
    gt rx314_pos, rx314_eos, rx314_fail972
    repr_bind_attr_int rx314_cur, rx314_curclass, "$!from", rx314_pos
  rxscan315_scan977:
    nqp_rxmark rx314_bstack, rxscan315_loop976, rx314_pos, 0
  rxscan315_done978:
    add $I11, rx314_pos, 4
    gt $I11, rx314_eos, rx314_fail972
    substr $S10, rx314_tgt, rx314_pos, 4
    ne $S10, ucs4:"else", rx314_fail972
    add rx314_pos, 4
    rx314_cur."!cursor_pass"(rx314_pos, 'backtrack'=>1)
    .return (rx314_cur)
  rx314_restart971:
    repr_get_attr_obj rx314_cstack, rx314_cur, rx314_curclass, "$!cstack"
  rx314_fail972:
    unless rx314_bstack, rx314_done970
    pop $I19, rx314_bstack
    if_null rx314_cstack, rx314_cstack_done975
    unless rx314_cstack, rx314_cstack_done975
    dec $I19
    set $P11, rx314_cstack[$I19]
  rx314_cstack_done975:
    pop rx314_rep, rx314_bstack
    pop rx314_pos, rx314_bstack
    pop $I19, rx314_bstack
    lt rx314_pos, -1, rx314_done970
    lt rx314_pos, 0, rx314_fail972
    eq $I19, 0, rx314_fail972
    nqp_islist $I20, rx314_cstack
    unless $I20, rx314_jump973
    elements $I18, rx314_bstack
    le $I18, 0, rx314_cut974
    dec $I18
    set $I18, rx314_bstack[$I18]
  rx314_cut974:
    assign rx314_cstack, $I18
  rx314_jump973:
    jump $I19
  rx314_done970:
    rx314_cur."!cursor_fail"()
    .return (rx314_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_64_1349901750.327_caps" :subid("cuid_memo_63_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_64_1349901750.327_nfa" :subid("cuid_memo_64_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 101
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 108
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 115
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 101
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<while>" :subid("cuid_66_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 826
    .param pmc _lex_param_0 
    .lex "$*CONTROL_USED", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx321_tgt
    .local int rx321_pos
    .local int rx321_off
    .local int rx321_eos
    .local int rx321_rep
    .local pmc rx321_cur
    .local pmc rx321_curclass
    .local pmc rx321_bstack
    .local pmc rx321_cstack
    (rx321_cur, rx321_tgt, rx321_pos, rx321_curclass, rx321_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx321_cur
    length rx321_eos, rx321_tgt
    eq $I19, 1, rx321_restart987
    gt rx321_pos, rx321_eos, rx321_fail988
    repr_get_attr_int $I11, self, rx321_curclass, "$!from"
    ne $I11, -1, rxscan322_done994
    goto rxscan322_scan993
  rxscan322_loop992:
    inc rx321_pos
    gt rx321_pos, rx321_eos, rx321_fail988
    repr_bind_attr_int rx321_cur, rx321_curclass, "$!from", rx321_pos
  rxscan322_scan993:
    nqp_rxmark rx321_bstack, rxscan322_loop992, rx321_pos, 0
  rxscan322_done994:
    repr_bind_attr_int rx321_cur, rx321_curclass, "$!pos", rx321_pos
    store_lex unicode:"$\x{a2}", rx321_cur
    box $P5002, 0
    set $P101, $P5002
    nqp_rxmark rx321_bstack, rxcap323_fail996, rx321_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt324_0998
    nqp_push_label $P11, alt324_1999
    nqp_rxmark rx321_bstack, alt324_end997, -1, 0
    rx321_cur."!alt"(rx321_pos, "alt_nfa__12_1349901751.983", $P11)
    goto rx321_fail988
  alt324_0998:
    add $I11, rx321_pos, 5
    gt $I11, rx321_eos, rx321_fail988
    substr $S10, rx321_tgt, rx321_pos, 5
    ne $S10, ucs4:"while", rx321_fail988
    add rx321_pos, 5
    goto alt324_end997
  alt324_1999:
    add $I11, rx321_pos, 5
    gt $I11, rx321_eos, rx321_fail988
    substr $S10, rx321_tgt, rx321_pos, 5
    ne $S10, ucs4:"until", rx321_fail988
    add rx321_pos, 5
    goto alt324_end997
  alt324_end997:
    nqp_rxcommit rx321_bstack, alt324_end997
    nqp_rxpeek $I19, rx321_bstack, rxcap323_fail996
    inc $I19
    set $I11, rx321_bstack[$I19]
    repr_bind_attr_int rx321_cur, rx321_curclass, "$!pos", rx321_pos
    $P11 = rx321_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx321_pos)
    rx321_cstack = rx321_cur."!cursor_capture"($P11, "sym")
    goto rxcap323_done995
  rxcap323_fail996:
    goto rx321_fail988
  rxcap323_done995:
    ge rx321_pos, rx321_eos, rx321_fail988
    is_cclass $I11, .CCLASS_WHITESPACE, rx321_tgt, rx321_pos
    unless $I11, rx321_fail988
    add rx321_pos, 1
    repr_bind_attr_int rx321_cur, rx321_curclass, "$!pos", rx321_pos
    $P11 = rx321_cur."ws"()
    repr_get_attr_int $I11, $P11, rx321_curclass, "$!pos"
    lt $I11, 0, rx321_fail988
    repr_get_attr_int rx321_pos, $P11, rx321_curclass, "$!pos"
    repr_bind_attr_int rx321_cur, rx321_curclass, "$!pos", rx321_pos
    $P11 = rx321_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx321_curclass, "$!pos"
    lt $I11, 0, rx321_fail988
    nqp_rxmark rx321_bstack, rxsubrule326_pass1001, -1, 0
  rxsubrule326_pass1001:
    rx321_cstack = rx321_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx321_pos, $P11, rx321_curclass, "$!pos"
    repr_bind_attr_int rx321_cur, rx321_curclass, "$!pos", rx321_pos
    $P11 = rx321_cur."ws"()
    repr_get_attr_int $I11, $P11, rx321_curclass, "$!pos"
    lt $I11, 0, rx321_fail988
    repr_get_attr_int rx321_pos, $P11, rx321_curclass, "$!pos"
    rx321_cur."!cursor_pass"(rx321_pos, "statement_control:sym<while>", 'backtrack'=>1)
    .return (rx321_cur)
  rx321_restart987:
    repr_get_attr_obj rx321_cstack, rx321_cur, rx321_curclass, "$!cstack"
  rx321_fail988:
    unless rx321_bstack, rx321_done986
    pop $I19, rx321_bstack
    if_null rx321_cstack, rx321_cstack_done991
    unless rx321_cstack, rx321_cstack_done991
    dec $I19
    set $P11, rx321_cstack[$I19]
  rx321_cstack_done991:
    pop rx321_rep, rx321_bstack
    pop rx321_pos, rx321_bstack
    pop $I19, rx321_bstack
    lt rx321_pos, -1, rx321_done986
    lt rx321_pos, 0, rx321_fail988
    eq $I19, 0, rx321_fail988
    nqp_islist $I20, rx321_cstack
    unless $I20, rx321_jump989
    elements $I18, rx321_bstack
    le $I18, 0, rx321_cut990
    dec $I18
    set $I18, rx321_bstack[$I18]
  rx321_cut990:
    assign rx321_cstack, $I18
  rx321_jump989:
    jump $I19
  rx321_done986:
    rx321_cur."!cursor_fail"()
    .return (rx321_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_66_1349901750.327_caps" :subid("cuid_memo_65_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["xblock"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_66_1349901750.327_nfa" :subid("cuid_memo_66_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 119
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    box $P5011, 2
    push $P5007, $P5011
    box $P5012, 117
    push $P5007, $P5012
    box $P5013, 8
    push $P5007, $P5013
    push $P5001, $P5007
    new $P5014, 'ResizablePMCArray'
    box $P5015, 2
    push $P5014, $P5015
    box $P5016, 104
    push $P5014, $P5016
    box $P5017, 4
    push $P5014, $P5017
    push $P5001, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 2
    push $P5018, $P5019
    box $P5020, 105
    push $P5018, $P5020
    box $P5021, 5
    push $P5018, $P5021
    push $P5001, $P5018
    new $P5022, 'ResizablePMCArray'
    box $P5023, 2
    push $P5022, $P5023
    box $P5024, 108
    push $P5022, $P5024
    box $P5025, 6
    push $P5022, $P5025
    push $P5001, $P5022
    new $P5026, 'ResizablePMCArray'
    box $P5027, 2
    push $P5026, $P5027
    box $P5028, 101
    push $P5026, $P5028
    box $P5029, 7
    push $P5026, $P5029
    push $P5001, $P5026
    new $P5030, 'ResizablePMCArray'
    box $P5031, 4
    push $P5030, $P5031
    box $P5032, 32
    push $P5030, $P5032
    box $P5033, 12
    push $P5030, $P5033
    push $P5001, $P5030
    new $P5034, 'ResizablePMCArray'
    box $P5035, 2
    push $P5034, $P5035
    box $P5036, 110
    push $P5034, $P5036
    box $P5037, 9
    push $P5034, $P5037
    push $P5001, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 2
    push $P5038, $P5039
    box $P5040, 116
    push $P5038, $P5040
    box $P5041, 10
    push $P5038, $P5041
    push $P5001, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 105
    push $P5042, $P5044
    box $P5045, 11
    push $P5042, $P5045
    push $P5001, $P5042
    new $P5046, 'ResizablePMCArray'
    box $P5047, 2
    push $P5046, $P5047
    box $P5048, 108
    push $P5046, $P5048
    box $P5049, 7
    push $P5046, $P5049
    push $P5001, $P5046
    new $P5050, 'ResizablePMCArray'
    box $P5051, 0
    push $P5050, $P5051
    box $P5052, 0
    push $P5050, $P5052
    box $P5053, 0
    push $P5050, $P5053
    push $P5001, $P5050
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_66_1349901750.327_alt_nfa__12_1349901751.983" :subid("cuid_memo_67_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 119
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 104
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 2
    push $P5012, $P5013
    box $P5014, 105
    push $P5012, $P5014
    box $P5015, 4
    push $P5012, $P5015
    push $P5002, $P5012
    new $P5016, 'ResizablePMCArray'
    box $P5017, 2
    push $P5016, $P5017
    box $P5018, 108
    push $P5016, $P5018
    box $P5019, 5
    push $P5016, $P5019
    push $P5002, $P5016
    new $P5020, 'ResizablePMCArray'
    box $P5021, 2
    push $P5020, $P5021
    box $P5022, 101
    push $P5020, $P5022
    box $P5023, 0
    push $P5020, $P5023
    push $P5002, $P5020
    push $P5001, $P5002
    new $P5024, 'ResizablePMCArray'
    new $P5025, 'ResizablePMCArray'
    push $P5024, $P5025
    new $P5026, 'ResizablePMCArray'
    box $P5027, 2
    push $P5026, $P5027
    box $P5028, 117
    push $P5026, $P5028
    box $P5029, 2
    push $P5026, $P5029
    push $P5024, $P5026
    new $P5030, 'ResizablePMCArray'
    box $P5031, 2
    push $P5030, $P5031
    box $P5032, 110
    push $P5030, $P5032
    box $P5033, 3
    push $P5030, $P5033
    push $P5024, $P5030
    new $P5034, 'ResizablePMCArray'
    box $P5035, 2
    push $P5034, $P5035
    box $P5036, 116
    push $P5034, $P5036
    box $P5037, 4
    push $P5034, $P5037
    push $P5024, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 2
    push $P5038, $P5039
    box $P5040, 105
    push $P5038, $P5040
    box $P5041, 5
    push $P5038, $P5041
    push $P5024, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 108
    push $P5042, $P5044
    box $P5045, 0
    push $P5042, $P5045
    push $P5024, $P5042
    push $P5001, $P5024
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<repeat>" :subid("cuid_67_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 832
    .param pmc _lex_param_0 
    .lex "$*CONTROL_USED", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx328_tgt
    .local int rx328_pos
    .local int rx328_off
    .local int rx328_eos
    .local int rx328_rep
    .local pmc rx328_cur
    .local pmc rx328_curclass
    .local pmc rx328_bstack
    .local pmc rx328_cstack
    (rx328_cur, rx328_tgt, rx328_pos, rx328_curclass, rx328_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx328_cur
    length rx328_eos, rx328_tgt
    eq $I19, 1, rx328_restart1005
    gt rx328_pos, rx328_eos, rx328_fail1006
    repr_get_attr_int $I11, self, rx328_curclass, "$!from"
    ne $I11, -1, rxscan329_done1012
    goto rxscan329_scan1011
  rxscan329_loop1010:
    inc rx328_pos
    gt rx328_pos, rx328_eos, rx328_fail1006
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!from", rx328_pos
  rxscan329_scan1011:
    nqp_rxmark rx328_bstack, rxscan329_loop1010, rx328_pos, 0
  rxscan329_done1012:
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!pos", rx328_pos
    store_lex unicode:"$\x{a2}", rx328_cur
    box $P5002, 0
    set $P101, $P5002
    nqp_rxmark rx328_bstack, rxcap330_fail1014, rx328_pos, 0
    add $I11, rx328_pos, 6
    gt $I11, rx328_eos, rx328_fail1006
    substr $S10, rx328_tgt, rx328_pos, 6
    ne $S10, ucs4:"repeat", rx328_fail1006
    add rx328_pos, 6
    nqp_rxpeek $I19, rx328_bstack, rxcap330_fail1014
    inc $I19
    set $I11, rx328_bstack[$I19]
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!pos", rx328_pos
    $P11 = rx328_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx328_pos)
    rx328_cstack = rx328_cur."!cursor_capture"($P11, "sym")
    goto rxcap330_done1013
  rxcap330_fail1014:
    goto rx328_fail1006
  rxcap330_done1013:
    ge rx328_pos, rx328_eos, rx328_fail1006
    is_cclass $I11, .CCLASS_WHITESPACE, rx328_tgt, rx328_pos
    unless $I11, rx328_fail1006
    add rx328_pos, 1
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!pos", rx328_pos
    $P11 = rx328_cur."ws"()
    repr_get_attr_int $I11, $P11, rx328_curclass, "$!pos"
    lt $I11, 0, rx328_fail1006
    repr_get_attr_int rx328_pos, $P11, rx328_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt332_01017
    nqp_push_label $P11, alt332_11027
    nqp_rxmark rx328_bstack, alt332_end1016, -1, 0
    rx328_cur."!alt"(rx328_pos, "alt_nfa__13_1349901752.005", $P11)
    goto rx328_fail1006
  alt332_01017:
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!pos", rx328_pos
    $P11 = rx328_cur."ws"()
    repr_get_attr_int $I11, $P11, rx328_curclass, "$!pos"
    lt $I11, 0, rx328_fail1006
    repr_get_attr_int rx328_pos, $P11, rx328_curclass, "$!pos"
    nqp_rxmark rx328_bstack, rxcap334_fail1020, rx328_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt335_01022
    nqp_push_label $P11, alt335_11023
    nqp_rxmark rx328_bstack, alt335_end1021, -1, 0
    rx328_cur."!alt"(rx328_pos, "alt_nfa__14_1349901752.005", $P11)
    goto rx328_fail1006
  alt335_01022:
    add $I11, rx328_pos, 5
    gt $I11, rx328_eos, rx328_fail1006
    substr $S10, rx328_tgt, rx328_pos, 5
    ne $S10, ucs4:"while", rx328_fail1006
    add rx328_pos, 5
    goto alt335_end1021
  alt335_11023:
    add $I11, rx328_pos, 5
    gt $I11, rx328_eos, rx328_fail1006
    substr $S10, rx328_tgt, rx328_pos, 5
    ne $S10, ucs4:"until", rx328_fail1006
    add rx328_pos, 5
    goto alt335_end1021
  alt335_end1021:
    nqp_rxcommit rx328_bstack, alt335_end1021
    nqp_rxpeek $I19, rx328_bstack, rxcap334_fail1020
    inc $I19
    set $I11, rx328_bstack[$I19]
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!pos", rx328_pos
    $P11 = rx328_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx328_pos)
    rx328_cstack = rx328_cur."!cursor_capture"($P11, "wu")
    goto rxcap334_done1019
  rxcap334_fail1020:
    goto rx328_fail1006
  rxcap334_done1019:
    ge rx328_pos, rx328_eos, rx328_fail1006
    is_cclass $I11, .CCLASS_WHITESPACE, rx328_tgt, rx328_pos
    unless $I11, rx328_fail1006
    add rx328_pos, 1
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!pos", rx328_pos
    $P11 = rx328_cur."ws"()
    repr_get_attr_int $I11, $P11, rx328_curclass, "$!pos"
    lt $I11, 0, rx328_fail1006
    repr_get_attr_int rx328_pos, $P11, rx328_curclass, "$!pos"
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!pos", rx328_pos
    $P11 = rx328_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx328_curclass, "$!pos"
    lt $I11, 0, rx328_fail1006
    nqp_rxmark rx328_bstack, rxsubrule337_pass1025, -1, 0
  rxsubrule337_pass1025:
    rx328_cstack = rx328_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx328_pos, $P11, rx328_curclass, "$!pos"
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!pos", rx328_pos
    $P11 = rx328_cur."ws"()
    repr_get_attr_int $I11, $P11, rx328_curclass, "$!pos"
    lt $I11, 0, rx328_fail1006
    repr_get_attr_int rx328_pos, $P11, rx328_curclass, "$!pos"
    goto alt332_end1016
  alt332_11027:
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!pos", rx328_pos
    $P11 = rx328_cur."ws"()
    repr_get_attr_int $I11, $P11, rx328_curclass, "$!pos"
    lt $I11, 0, rx328_fail1006
    repr_get_attr_int rx328_pos, $P11, rx328_curclass, "$!pos"
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!pos", rx328_pos
    $P11 = rx328_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx328_curclass, "$!pos"
    lt $I11, 0, rx328_fail1006
    nqp_rxmark rx328_bstack, rxsubrule340_pass1029, -1, 0
  rxsubrule340_pass1029:
    rx328_cstack = rx328_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx328_pos, $P11, rx328_curclass, "$!pos"
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!pos", rx328_pos
    $P11 = rx328_cur."ws"()
    repr_get_attr_int $I11, $P11, rx328_curclass, "$!pos"
    lt $I11, 0, rx328_fail1006
    repr_get_attr_int rx328_pos, $P11, rx328_curclass, "$!pos"
    nqp_rxmark rx328_bstack, rxcap342_fail1032, rx328_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt343_01034
    nqp_push_label $P11, alt343_11035
    nqp_rxmark rx328_bstack, alt343_end1033, -1, 0
    rx328_cur."!alt"(rx328_pos, "alt_nfa__15_1349901752.006", $P11)
    goto rx328_fail1006
  alt343_01034:
    add $I11, rx328_pos, 5
    gt $I11, rx328_eos, rx328_fail1006
    substr $S10, rx328_tgt, rx328_pos, 5
    ne $S10, ucs4:"while", rx328_fail1006
    add rx328_pos, 5
    goto alt343_end1033
  alt343_11035:
    add $I11, rx328_pos, 5
    gt $I11, rx328_eos, rx328_fail1006
    substr $S10, rx328_tgt, rx328_pos, 5
    ne $S10, ucs4:"until", rx328_fail1006
    add rx328_pos, 5
    goto alt343_end1033
  alt343_end1033:
    nqp_rxcommit rx328_bstack, alt343_end1033
    nqp_rxpeek $I19, rx328_bstack, rxcap342_fail1032
    inc $I19
    set $I11, rx328_bstack[$I19]
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!pos", rx328_pos
    $P11 = rx328_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx328_pos)
    rx328_cstack = rx328_cur."!cursor_capture"($P11, "wu")
    goto rxcap342_done1031
  rxcap342_fail1032:
    goto rx328_fail1006
  rxcap342_done1031:
    ge rx328_pos, rx328_eos, rx328_fail1006
    is_cclass $I11, .CCLASS_WHITESPACE, rx328_tgt, rx328_pos
    unless $I11, rx328_fail1006
    add rx328_pos, 1
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!pos", rx328_pos
    $P11 = rx328_cur."ws"()
    repr_get_attr_int $I11, $P11, rx328_curclass, "$!pos"
    lt $I11, 0, rx328_fail1006
    repr_get_attr_int rx328_pos, $P11, rx328_curclass, "$!pos"
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!pos", rx328_pos
    $P11 = rx328_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx328_curclass, "$!pos"
    lt $I11, 0, rx328_fail1006
    nqp_rxmark rx328_bstack, rxsubrule345_pass1037, -1, 0
  rxsubrule345_pass1037:
    rx328_cstack = rx328_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx328_pos, $P11, rx328_curclass, "$!pos"
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!pos", rx328_pos
    $P11 = rx328_cur."ws"()
    repr_get_attr_int $I11, $P11, rx328_curclass, "$!pos"
    lt $I11, 0, rx328_fail1006
    repr_get_attr_int rx328_pos, $P11, rx328_curclass, "$!pos"
    goto alt332_end1016
  alt332_end1016:
    nqp_rxcommit rx328_bstack, alt332_end1016
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!pos", rx328_pos
    $P11 = rx328_cur."ws"()
    repr_get_attr_int $I11, $P11, rx328_curclass, "$!pos"
    lt $I11, 0, rx328_fail1006
    repr_get_attr_int rx328_pos, $P11, rx328_curclass, "$!pos"
    rx328_cur."!cursor_pass"(rx328_pos, "statement_control:sym<repeat>", 'backtrack'=>1)
    .return (rx328_cur)
  rx328_restart1005:
    repr_get_attr_obj rx328_cstack, rx328_cur, rx328_curclass, "$!cstack"
  rx328_fail1006:
    unless rx328_bstack, rx328_done1004
    pop $I19, rx328_bstack
    if_null rx328_cstack, rx328_cstack_done1009
    unless rx328_cstack, rx328_cstack_done1009
    dec $I19
    set $P11, rx328_cstack[$I19]
  rx328_cstack_done1009:
    pop rx328_rep, rx328_bstack
    pop rx328_pos, rx328_bstack
    pop $I19, rx328_bstack
    lt rx328_pos, -1, rx328_done1004
    lt rx328_pos, 0, rx328_fail1006
    eq $I19, 0, rx328_fail1006
    nqp_islist $I20, rx328_cstack
    unless $I20, rx328_jump1007
    elements $I18, rx328_bstack
    le $I18, 0, rx328_cut1008
    dec $I18
    set $I18, rx328_bstack[$I18]
  rx328_cut1008:
    assign rx328_cstack, $I18
  rx328_jump1007:
    jump $I19
  rx328_done1004:
    rx328_cur."!cursor_fail"()
    .return (rx328_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_67_1349901750.327_caps" :subid("cuid_memo_68_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["wu"], $P5003
    box $P5004, 0
    set $P5001["xblock"], $P5004
    box $P5005, 0
    set $P5001["pblock"], $P5005
    box $P5006, 0
    set $P5001["EXPR"], $P5006
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_67_1349901750.327_nfa" :subid("cuid_memo_69_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 114
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 101
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 112
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 101
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 97
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 2
    push $P5027, $P5028
    box $P5029, 116
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 4
    push $P5031, $P5032
    box $P5033, 32
    push $P5031, $P5033
    box $P5034, 9
    push $P5031, $P5034
    push $P5001, $P5031
    new $P5035, 'ResizablePMCArray'
    box $P5036, 0
    push $P5035, $P5036
    box $P5037, 0
    push $P5035, $P5037
    box $P5038, 0
    push $P5035, $P5038
    push $P5001, $P5035
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_67_1349901750.327_alt_nfa__14_1349901752.005" :subid("cuid_memo_70_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 119
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 104
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 2
    push $P5012, $P5013
    box $P5014, 105
    push $P5012, $P5014
    box $P5015, 4
    push $P5012, $P5015
    push $P5002, $P5012
    new $P5016, 'ResizablePMCArray'
    box $P5017, 2
    push $P5016, $P5017
    box $P5018, 108
    push $P5016, $P5018
    box $P5019, 5
    push $P5016, $P5019
    push $P5002, $P5016
    new $P5020, 'ResizablePMCArray'
    box $P5021, 2
    push $P5020, $P5021
    box $P5022, 101
    push $P5020, $P5022
    box $P5023, 0
    push $P5020, $P5023
    push $P5002, $P5020
    push $P5001, $P5002
    new $P5024, 'ResizablePMCArray'
    new $P5025, 'ResizablePMCArray'
    push $P5024, $P5025
    new $P5026, 'ResizablePMCArray'
    box $P5027, 2
    push $P5026, $P5027
    box $P5028, 117
    push $P5026, $P5028
    box $P5029, 2
    push $P5026, $P5029
    push $P5024, $P5026
    new $P5030, 'ResizablePMCArray'
    box $P5031, 2
    push $P5030, $P5031
    box $P5032, 110
    push $P5030, $P5032
    box $P5033, 3
    push $P5030, $P5033
    push $P5024, $P5030
    new $P5034, 'ResizablePMCArray'
    box $P5035, 2
    push $P5034, $P5035
    box $P5036, 116
    push $P5034, $P5036
    box $P5037, 4
    push $P5034, $P5037
    push $P5024, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 2
    push $P5038, $P5039
    box $P5040, 105
    push $P5038, $P5040
    box $P5041, 5
    push $P5038, $P5041
    push $P5024, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 108
    push $P5042, $P5044
    box $P5045, 0
    push $P5042, $P5045
    push $P5024, $P5042
    push $P5001, $P5024
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_67_1349901750.327_alt_nfa__15_1349901752.006" :subid("cuid_memo_71_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 119
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 104
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 2
    push $P5012, $P5013
    box $P5014, 105
    push $P5012, $P5014
    box $P5015, 4
    push $P5012, $P5015
    push $P5002, $P5012
    new $P5016, 'ResizablePMCArray'
    box $P5017, 2
    push $P5016, $P5017
    box $P5018, 108
    push $P5016, $P5018
    box $P5019, 5
    push $P5016, $P5019
    push $P5002, $P5016
    new $P5020, 'ResizablePMCArray'
    box $P5021, 2
    push $P5020, $P5021
    box $P5022, 101
    push $P5020, $P5022
    box $P5023, 0
    push $P5020, $P5023
    push $P5002, $P5020
    push $P5001, $P5002
    new $P5024, 'ResizablePMCArray'
    new $P5025, 'ResizablePMCArray'
    push $P5024, $P5025
    new $P5026, 'ResizablePMCArray'
    box $P5027, 2
    push $P5026, $P5027
    box $P5028, 117
    push $P5026, $P5028
    box $P5029, 2
    push $P5026, $P5029
    push $P5024, $P5026
    new $P5030, 'ResizablePMCArray'
    box $P5031, 2
    push $P5030, $P5031
    box $P5032, 110
    push $P5030, $P5032
    box $P5033, 3
    push $P5030, $P5033
    push $P5024, $P5030
    new $P5034, 'ResizablePMCArray'
    box $P5035, 2
    push $P5034, $P5035
    box $P5036, 116
    push $P5034, $P5036
    box $P5037, 4
    push $P5034, $P5037
    push $P5024, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 2
    push $P5038, $P5039
    box $P5040, 105
    push $P5038, $P5040
    box $P5041, 5
    push $P5038, $P5041
    push $P5024, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 108
    push $P5042, $P5044
    box $P5045, 0
    push $P5042, $P5045
    push $P5024, $P5042
    push $P5001, $P5024
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_67_1349901750.327_alt_nfa__13_1349901752.005" :subid("cuid_memo_72_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 0
    push $P5004, $P5005
    box $P5006, 0
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    box $P5008, 0
    push $P5004, $P5008
    box $P5009, 0
    push $P5004, $P5009
    box $P5010, 0
    push $P5004, $P5010
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5011, 'ResizablePMCArray'
    new $P5012, 'ResizablePMCArray'
    push $P5011, $P5012
    new $P5013, 'ResizablePMCArray'
    box $P5014, 0
    push $P5013, $P5014
    box $P5015, 0
    push $P5013, $P5015
    box $P5016, 0
    push $P5013, $P5016
    box $P5017, 0
    push $P5013, $P5017
    box $P5018, 0
    push $P5013, $P5018
    box $P5019, 0
    push $P5013, $P5019
    push $P5011, $P5013
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<for>" :subid("cuid_68_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 841
    .param pmc _lex_param_0 
    .lex "$*CONTROL_USED", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx348_tgt
    .local int rx348_pos
    .local int rx348_off
    .local int rx348_eos
    .local int rx348_rep
    .local pmc rx348_cur
    .local pmc rx348_curclass
    .local pmc rx348_bstack
    .local pmc rx348_cstack
    (rx348_cur, rx348_tgt, rx348_pos, rx348_curclass, rx348_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx348_cur
    length rx348_eos, rx348_tgt
    eq $I19, 1, rx348_restart1042
    gt rx348_pos, rx348_eos, rx348_fail1043
    repr_get_attr_int $I11, self, rx348_curclass, "$!from"
    ne $I11, -1, rxscan349_done1049
    goto rxscan349_scan1048
  rxscan349_loop1047:
    inc rx348_pos
    gt rx348_pos, rx348_eos, rx348_fail1043
    repr_bind_attr_int rx348_cur, rx348_curclass, "$!from", rx348_pos
  rxscan349_scan1048:
    nqp_rxmark rx348_bstack, rxscan349_loop1047, rx348_pos, 0
  rxscan349_done1049:
    repr_bind_attr_int rx348_cur, rx348_curclass, "$!pos", rx348_pos
    store_lex unicode:"$\x{a2}", rx348_cur
    box $P5002, 0
    set $P101, $P5002
    nqp_rxmark rx348_bstack, rxcap350_fail1051, rx348_pos, 0
    add $I11, rx348_pos, 3
    gt $I11, rx348_eos, rx348_fail1043
    substr $S10, rx348_tgt, rx348_pos, 3
    ne $S10, ucs4:"for", rx348_fail1043
    add rx348_pos, 3
    nqp_rxpeek $I19, rx348_bstack, rxcap350_fail1051
    inc $I19
    set $I11, rx348_bstack[$I19]
    repr_bind_attr_int rx348_cur, rx348_curclass, "$!pos", rx348_pos
    $P11 = rx348_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx348_pos)
    rx348_cstack = rx348_cur."!cursor_capture"($P11, "sym")
    goto rxcap350_done1050
  rxcap350_fail1051:
    goto rx348_fail1043
  rxcap350_done1050:
    ge rx348_pos, rx348_eos, rx348_fail1043
    is_cclass $I11, .CCLASS_WHITESPACE, rx348_tgt, rx348_pos
    unless $I11, rx348_fail1043
    add rx348_pos, 1
    repr_bind_attr_int rx348_cur, rx348_curclass, "$!pos", rx348_pos
    $P11 = rx348_cur."ws"()
    repr_get_attr_int $I11, $P11, rx348_curclass, "$!pos"
    lt $I11, 0, rx348_fail1043
    repr_get_attr_int rx348_pos, $P11, rx348_curclass, "$!pos"
    repr_bind_attr_int rx348_cur, rx348_curclass, "$!pos", rx348_pos
    $P11 = rx348_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx348_curclass, "$!pos"
    lt $I11, 0, rx348_fail1043
    nqp_rxmark rx348_bstack, rxsubrule352_pass1053, -1, 0
  rxsubrule352_pass1053:
    rx348_cstack = rx348_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx348_pos, $P11, rx348_curclass, "$!pos"
    repr_bind_attr_int rx348_cur, rx348_curclass, "$!pos", rx348_pos
    $P11 = rx348_cur."ws"()
    repr_get_attr_int $I11, $P11, rx348_curclass, "$!pos"
    lt $I11, 0, rx348_fail1043
    repr_get_attr_int rx348_pos, $P11, rx348_curclass, "$!pos"
    rx348_cur."!cursor_pass"(rx348_pos, "statement_control:sym<for>", 'backtrack'=>1)
    .return (rx348_cur)
  rx348_restart1042:
    repr_get_attr_obj rx348_cstack, rx348_cur, rx348_curclass, "$!cstack"
  rx348_fail1043:
    unless rx348_bstack, rx348_done1041
    pop $I19, rx348_bstack
    if_null rx348_cstack, rx348_cstack_done1046
    unless rx348_cstack, rx348_cstack_done1046
    dec $I19
    set $P11, rx348_cstack[$I19]
  rx348_cstack_done1046:
    pop rx348_rep, rx348_bstack
    pop rx348_pos, rx348_bstack
    pop $I19, rx348_bstack
    lt rx348_pos, -1, rx348_done1041
    lt rx348_pos, 0, rx348_fail1043
    eq $I19, 0, rx348_fail1043
    nqp_islist $I20, rx348_cstack
    unless $I20, rx348_jump1044
    elements $I18, rx348_bstack
    le $I18, 0, rx348_cut1045
    dec $I18
    set $I18, rx348_bstack[$I18]
  rx348_cut1045:
    assign rx348_cstack, $I18
  rx348_jump1044:
    jump $I19
  rx348_done1041:
    rx348_cur."!cursor_fail"()
    .return (rx348_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_68_1349901750.327_caps" :subid("cuid_memo_73_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["xblock"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_68_1349901750.327_nfa" :subid("cuid_memo_74_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 102
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 111
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 114
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 4
    push $P5019, $P5020
    box $P5021, 32
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 0
    push $P5023, $P5024
    box $P5025, 0
    push $P5023, $P5025
    box $P5026, 0
    push $P5023, $P5026
    push $P5001, $P5023
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CATCH>" :subid("cuid_69_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 847
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx354_tgt
    .local int rx354_pos
    .local int rx354_off
    .local int rx354_eos
    .local int rx354_rep
    .local pmc rx354_cur
    .local pmc rx354_curclass
    .local pmc rx354_bstack
    .local pmc rx354_cstack
    (rx354_cur, rx354_tgt, rx354_pos, rx354_curclass, rx354_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx354_cur
    length rx354_eos, rx354_tgt
    eq $I19, 1, rx354_restart1057
    gt rx354_pos, rx354_eos, rx354_fail1058
    repr_get_attr_int $I11, self, rx354_curclass, "$!from"
    ne $I11, -1, rxscan355_done1064
    goto rxscan355_scan1063
  rxscan355_loop1062:
    inc rx354_pos
    gt rx354_pos, rx354_eos, rx354_fail1058
    repr_bind_attr_int rx354_cur, rx354_curclass, "$!from", rx354_pos
  rxscan355_scan1063:
    nqp_rxmark rx354_bstack, rxscan355_loop1062, rx354_pos, 0
  rxscan355_done1064:
    nqp_rxmark rx354_bstack, rxcap356_fail1066, rx354_pos, 0
    add $I11, rx354_pos, 5
    gt $I11, rx354_eos, rx354_fail1058
    substr $S10, rx354_tgt, rx354_pos, 5
    ne $S10, ucs4:"CATCH", rx354_fail1058
    add rx354_pos, 5
    nqp_rxpeek $I19, rx354_bstack, rxcap356_fail1066
    inc $I19
    set $I11, rx354_bstack[$I19]
    repr_bind_attr_int rx354_cur, rx354_curclass, "$!pos", rx354_pos
    $P11 = rx354_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx354_pos)
    rx354_cstack = rx354_cur."!cursor_capture"($P11, "sym")
    goto rxcap356_done1065
  rxcap356_fail1066:
    goto rx354_fail1058
  rxcap356_done1065:
    ge rx354_pos, rx354_eos, rx354_fail1058
    is_cclass $I11, .CCLASS_WHITESPACE, rx354_tgt, rx354_pos
    unless $I11, rx354_fail1058
    add rx354_pos, 1
    repr_bind_attr_int rx354_cur, rx354_curclass, "$!pos", rx354_pos
    $P11 = rx354_cur."ws"()
    repr_get_attr_int $I11, $P11, rx354_curclass, "$!pos"
    lt $I11, 0, rx354_fail1058
    repr_get_attr_int rx354_pos, $P11, rx354_curclass, "$!pos"
    repr_bind_attr_int rx354_cur, rx354_curclass, "$!pos", rx354_pos
    $P11 = rx354_cur."block"()
    repr_get_attr_int $I11, $P11, rx354_curclass, "$!pos"
    lt $I11, 0, rx354_fail1058
    nqp_rxmark rx354_bstack, rxsubrule358_pass1068, -1, 0
  rxsubrule358_pass1068:
    rx354_cstack = rx354_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx354_pos, $P11, rx354_curclass, "$!pos"
    repr_bind_attr_int rx354_cur, rx354_curclass, "$!pos", rx354_pos
    $P11 = rx354_cur."ws"()
    repr_get_attr_int $I11, $P11, rx354_curclass, "$!pos"
    lt $I11, 0, rx354_fail1058
    repr_get_attr_int rx354_pos, $P11, rx354_curclass, "$!pos"
    rx354_cur."!cursor_pass"(rx354_pos, "statement_control:sym<CATCH>", 'backtrack'=>1)
    .return (rx354_cur)
  rx354_restart1057:
    repr_get_attr_obj rx354_cstack, rx354_cur, rx354_curclass, "$!cstack"
  rx354_fail1058:
    unless rx354_bstack, rx354_done1056
    pop $I19, rx354_bstack
    if_null rx354_cstack, rx354_cstack_done1061
    unless rx354_cstack, rx354_cstack_done1061
    dec $I19
    set $P11, rx354_cstack[$I19]
  rx354_cstack_done1061:
    pop rx354_rep, rx354_bstack
    pop rx354_pos, rx354_bstack
    pop $I19, rx354_bstack
    lt rx354_pos, -1, rx354_done1056
    lt rx354_pos, 0, rx354_fail1058
    eq $I19, 0, rx354_fail1058
    nqp_islist $I20, rx354_cstack
    unless $I20, rx354_jump1059
    elements $I18, rx354_bstack
    le $I18, 0, rx354_cut1060
    dec $I18
    set $I18, rx354_bstack[$I18]
  rx354_cut1060:
    assign rx354_cstack, $I18
  rx354_jump1059:
    jump $I19
  rx354_done1056:
    rx354_cur."!cursor_fail"()
    .return (rx354_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_69_1349901750.327_caps" :subid("cuid_memo_75_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["block"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_69_1349901750.327_nfa" :subid("cuid_memo_76_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 67
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 65
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 84
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 67
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 72
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 4
    push $P5023, $P5024
    box $P5025, 32
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 0
    push $P5027, $P5028
    box $P5029, 0
    push $P5027, $P5029
    box $P5030, 0
    push $P5027, $P5030
    push $P5001, $P5027
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CONTROL>" :subid("cuid_70_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 852
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx360_tgt
    .local int rx360_pos
    .local int rx360_off
    .local int rx360_eos
    .local int rx360_rep
    .local pmc rx360_cur
    .local pmc rx360_curclass
    .local pmc rx360_bstack
    .local pmc rx360_cstack
    (rx360_cur, rx360_tgt, rx360_pos, rx360_curclass, rx360_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx360_cur
    length rx360_eos, rx360_tgt
    eq $I19, 1, rx360_restart1072
    gt rx360_pos, rx360_eos, rx360_fail1073
    repr_get_attr_int $I11, self, rx360_curclass, "$!from"
    ne $I11, -1, rxscan361_done1079
    goto rxscan361_scan1078
  rxscan361_loop1077:
    inc rx360_pos
    gt rx360_pos, rx360_eos, rx360_fail1073
    repr_bind_attr_int rx360_cur, rx360_curclass, "$!from", rx360_pos
  rxscan361_scan1078:
    nqp_rxmark rx360_bstack, rxscan361_loop1077, rx360_pos, 0
  rxscan361_done1079:
    nqp_rxmark rx360_bstack, rxcap362_fail1081, rx360_pos, 0
    add $I11, rx360_pos, 7
    gt $I11, rx360_eos, rx360_fail1073
    substr $S10, rx360_tgt, rx360_pos, 7
    ne $S10, ucs4:"CONTROL", rx360_fail1073
    add rx360_pos, 7
    nqp_rxpeek $I19, rx360_bstack, rxcap362_fail1081
    inc $I19
    set $I11, rx360_bstack[$I19]
    repr_bind_attr_int rx360_cur, rx360_curclass, "$!pos", rx360_pos
    $P11 = rx360_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx360_pos)
    rx360_cstack = rx360_cur."!cursor_capture"($P11, "sym")
    goto rxcap362_done1080
  rxcap362_fail1081:
    goto rx360_fail1073
  rxcap362_done1080:
    ge rx360_pos, rx360_eos, rx360_fail1073
    is_cclass $I11, .CCLASS_WHITESPACE, rx360_tgt, rx360_pos
    unless $I11, rx360_fail1073
    add rx360_pos, 1
    repr_bind_attr_int rx360_cur, rx360_curclass, "$!pos", rx360_pos
    $P11 = rx360_cur."ws"()
    repr_get_attr_int $I11, $P11, rx360_curclass, "$!pos"
    lt $I11, 0, rx360_fail1073
    repr_get_attr_int rx360_pos, $P11, rx360_curclass, "$!pos"
    repr_bind_attr_int rx360_cur, rx360_curclass, "$!pos", rx360_pos
    $P11 = rx360_cur."block"()
    repr_get_attr_int $I11, $P11, rx360_curclass, "$!pos"
    lt $I11, 0, rx360_fail1073
    nqp_rxmark rx360_bstack, rxsubrule364_pass1083, -1, 0
  rxsubrule364_pass1083:
    rx360_cstack = rx360_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx360_pos, $P11, rx360_curclass, "$!pos"
    repr_bind_attr_int rx360_cur, rx360_curclass, "$!pos", rx360_pos
    $P11 = rx360_cur."ws"()
    repr_get_attr_int $I11, $P11, rx360_curclass, "$!pos"
    lt $I11, 0, rx360_fail1073
    repr_get_attr_int rx360_pos, $P11, rx360_curclass, "$!pos"
    rx360_cur."!cursor_pass"(rx360_pos, "statement_control:sym<CONTROL>", 'backtrack'=>1)
    .return (rx360_cur)
  rx360_restart1072:
    repr_get_attr_obj rx360_cstack, rx360_cur, rx360_curclass, "$!cstack"
  rx360_fail1073:
    unless rx360_bstack, rx360_done1071
    pop $I19, rx360_bstack
    if_null rx360_cstack, rx360_cstack_done1076
    unless rx360_cstack, rx360_cstack_done1076
    dec $I19
    set $P11, rx360_cstack[$I19]
  rx360_cstack_done1076:
    pop rx360_rep, rx360_bstack
    pop rx360_pos, rx360_bstack
    pop $I19, rx360_bstack
    lt rx360_pos, -1, rx360_done1071
    lt rx360_pos, 0, rx360_fail1073
    eq $I19, 0, rx360_fail1073
    nqp_islist $I20, rx360_cstack
    unless $I20, rx360_jump1074
    elements $I18, rx360_bstack
    le $I18, 0, rx360_cut1075
    dec $I18
    set $I18, rx360_bstack[$I18]
  rx360_cut1075:
    assign rx360_cstack, $I18
  rx360_jump1074:
    jump $I19
  rx360_done1071:
    rx360_cur."!cursor_fail"()
    .return (rx360_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_70_1349901750.327_caps" :subid("cuid_memo_77_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["block"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_70_1349901750.327_nfa" :subid("cuid_memo_78_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 67
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 79
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 78
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 84
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 82
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 79
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 2
    push $P5027, $P5028
    box $P5029, 76
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 4
    push $P5031, $P5032
    box $P5033, 32
    push $P5031, $P5033
    box $P5034, 9
    push $P5031, $P5034
    push $P5001, $P5031
    new $P5035, 'ResizablePMCArray'
    box $P5036, 0
    push $P5035, $P5036
    box $P5037, 0
    push $P5035, $P5037
    box $P5038, 0
    push $P5035, $P5038
    push $P5001, $P5035
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix" :subid("cuid_71_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 857
    .param pmc self 
    $P5001 = self."!protoregex"("statement_prefix")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<BEGIN>" :subid("cuid_72_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 858
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx366_tgt
    .local int rx366_pos
    .local int rx366_off
    .local int rx366_eos
    .local int rx366_rep
    .local pmc rx366_cur
    .local pmc rx366_curclass
    .local pmc rx366_bstack
    .local pmc rx366_cstack
    (rx366_cur, rx366_tgt, rx366_pos, rx366_curclass, rx366_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx366_cur
    length rx366_eos, rx366_tgt
    eq $I19, 1, rx366_restart1087
    gt rx366_pos, rx366_eos, rx366_fail1088
    repr_get_attr_int $I11, self, rx366_curclass, "$!from"
    ne $I11, -1, rxscan367_done1094
    goto rxscan367_scan1093
  rxscan367_loop1092:
    inc rx366_pos
    gt rx366_pos, rx366_eos, rx366_fail1088
    repr_bind_attr_int rx366_cur, rx366_curclass, "$!from", rx366_pos
  rxscan367_scan1093:
    nqp_rxmark rx366_bstack, rxscan367_loop1092, rx366_pos, 0
  rxscan367_done1094:
    nqp_rxmark rx366_bstack, rxcap368_fail1096, rx366_pos, 0
    add $I11, rx366_pos, 5
    gt $I11, rx366_eos, rx366_fail1088
    substr $S10, rx366_tgt, rx366_pos, 5
    ne $S10, ucs4:"BEGIN", rx366_fail1088
    add rx366_pos, 5
    nqp_rxpeek $I19, rx366_bstack, rxcap368_fail1096
    inc $I19
    set $I11, rx366_bstack[$I19]
    repr_bind_attr_int rx366_cur, rx366_curclass, "$!pos", rx366_pos
    $P11 = rx366_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx366_pos)
    rx366_cstack = rx366_cur."!cursor_capture"($P11, "sym")
    goto rxcap368_done1095
  rxcap368_fail1096:
    goto rx366_fail1088
  rxcap368_done1095:
    repr_bind_attr_int rx366_cur, rx366_curclass, "$!pos", rx366_pos
    $P11 = rx366_cur."blorst"()
    repr_get_attr_int $I11, $P11, rx366_curclass, "$!pos"
    lt $I11, 0, rx366_fail1088
    nqp_rxmark rx366_bstack, rxsubrule369_pass1097, -1, 0
  rxsubrule369_pass1097:
    rx366_cstack = rx366_cur."!cursor_capture"($P11, "blorst")
    repr_get_attr_int rx366_pos, $P11, rx366_curclass, "$!pos"
    rx366_cur."!cursor_pass"(rx366_pos, "statement_prefix:sym<BEGIN>", 'backtrack'=>1)
    .return (rx366_cur)
  rx366_restart1087:
    repr_get_attr_obj rx366_cstack, rx366_cur, rx366_curclass, "$!cstack"
  rx366_fail1088:
    unless rx366_bstack, rx366_done1086
    pop $I19, rx366_bstack
    if_null rx366_cstack, rx366_cstack_done1091
    unless rx366_cstack, rx366_cstack_done1091
    dec $I19
    set $P11, rx366_cstack[$I19]
  rx366_cstack_done1091:
    pop rx366_rep, rx366_bstack
    pop rx366_pos, rx366_bstack
    pop $I19, rx366_bstack
    lt rx366_pos, -1, rx366_done1086
    lt rx366_pos, 0, rx366_fail1088
    eq $I19, 0, rx366_fail1088
    nqp_islist $I20, rx366_cstack
    unless $I20, rx366_jump1089
    elements $I18, rx366_bstack
    le $I18, 0, rx366_cut1090
    dec $I18
    set $I18, rx366_bstack[$I18]
  rx366_cut1090:
    assign rx366_cstack, $I18
  rx366_jump1089:
    jump $I19
  rx366_done1086:
    rx366_cur."!cursor_fail"()
    .return (rx366_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_72_1349901750.327_caps" :subid("cuid_memo_79_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["blorst"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_72_1349901750.327_nfa" :subid("cuid_memo_80_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 66
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 69
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 71
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 73
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 78
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 8
    push $P5023, $P5024
    box $P5025, "blorst"
    push $P5023, $P5025
    box $P5026, 0
    push $P5023, $P5026
    push $P5001, $P5023
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<INIT>" :subid("cuid_73_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 859
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx370_tgt
    .local int rx370_pos
    .local int rx370_off
    .local int rx370_eos
    .local int rx370_rep
    .local pmc rx370_cur
    .local pmc rx370_curclass
    .local pmc rx370_bstack
    .local pmc rx370_cstack
    (rx370_cur, rx370_tgt, rx370_pos, rx370_curclass, rx370_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx370_cur
    length rx370_eos, rx370_tgt
    eq $I19, 1, rx370_restart1100
    gt rx370_pos, rx370_eos, rx370_fail1101
    repr_get_attr_int $I11, self, rx370_curclass, "$!from"
    ne $I11, -1, rxscan371_done1107
    goto rxscan371_scan1106
  rxscan371_loop1105:
    inc rx370_pos
    gt rx370_pos, rx370_eos, rx370_fail1101
    repr_bind_attr_int rx370_cur, rx370_curclass, "$!from", rx370_pos
  rxscan371_scan1106:
    nqp_rxmark rx370_bstack, rxscan371_loop1105, rx370_pos, 0
  rxscan371_done1107:
    nqp_rxmark rx370_bstack, rxcap372_fail1109, rx370_pos, 0
    add $I11, rx370_pos, 4
    gt $I11, rx370_eos, rx370_fail1101
    substr $S10, rx370_tgt, rx370_pos, 4
    ne $S10, ucs4:"INIT", rx370_fail1101
    add rx370_pos, 4
    nqp_rxpeek $I19, rx370_bstack, rxcap372_fail1109
    inc $I19
    set $I11, rx370_bstack[$I19]
    repr_bind_attr_int rx370_cur, rx370_curclass, "$!pos", rx370_pos
    $P11 = rx370_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx370_pos)
    rx370_cstack = rx370_cur."!cursor_capture"($P11, "sym")
    goto rxcap372_done1108
  rxcap372_fail1109:
    goto rx370_fail1101
  rxcap372_done1108:
    repr_bind_attr_int rx370_cur, rx370_curclass, "$!pos", rx370_pos
    $P11 = rx370_cur."blorst"()
    repr_get_attr_int $I11, $P11, rx370_curclass, "$!pos"
    lt $I11, 0, rx370_fail1101
    nqp_rxmark rx370_bstack, rxsubrule373_pass1110, -1, 0
  rxsubrule373_pass1110:
    rx370_cstack = rx370_cur."!cursor_capture"($P11, "blorst")
    repr_get_attr_int rx370_pos, $P11, rx370_curclass, "$!pos"
    rx370_cur."!cursor_pass"(rx370_pos, "statement_prefix:sym<INIT>", 'backtrack'=>1)
    .return (rx370_cur)
  rx370_restart1100:
    repr_get_attr_obj rx370_cstack, rx370_cur, rx370_curclass, "$!cstack"
  rx370_fail1101:
    unless rx370_bstack, rx370_done1099
    pop $I19, rx370_bstack
    if_null rx370_cstack, rx370_cstack_done1104
    unless rx370_cstack, rx370_cstack_done1104
    dec $I19
    set $P11, rx370_cstack[$I19]
  rx370_cstack_done1104:
    pop rx370_rep, rx370_bstack
    pop rx370_pos, rx370_bstack
    pop $I19, rx370_bstack
    lt rx370_pos, -1, rx370_done1099
    lt rx370_pos, 0, rx370_fail1101
    eq $I19, 0, rx370_fail1101
    nqp_islist $I20, rx370_cstack
    unless $I20, rx370_jump1102
    elements $I18, rx370_bstack
    le $I18, 0, rx370_cut1103
    dec $I18
    set $I18, rx370_bstack[$I18]
  rx370_cut1103:
    assign rx370_cstack, $I18
  rx370_jump1102:
    jump $I19
  rx370_done1099:
    rx370_cur."!cursor_fail"()
    .return (rx370_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_73_1349901750.327_caps" :subid("cuid_memo_81_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["blorst"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_73_1349901750.327_nfa" :subid("cuid_memo_82_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 73
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 78
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 73
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 84
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 8
    push $P5019, $P5020
    box $P5021, "blorst"
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<try>" :subid("cuid_74_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 861
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx374_tgt
    .local int rx374_pos
    .local int rx374_off
    .local int rx374_eos
    .local int rx374_rep
    .local pmc rx374_cur
    .local pmc rx374_curclass
    .local pmc rx374_bstack
    .local pmc rx374_cstack
    (rx374_cur, rx374_tgt, rx374_pos, rx374_curclass, rx374_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx374_cur
    length rx374_eos, rx374_tgt
    eq $I19, 1, rx374_restart1113
    gt rx374_pos, rx374_eos, rx374_fail1114
    repr_get_attr_int $I11, self, rx374_curclass, "$!from"
    ne $I11, -1, rxscan375_done1120
    goto rxscan375_scan1119
  rxscan375_loop1118:
    inc rx374_pos
    gt rx374_pos, rx374_eos, rx374_fail1114
    repr_bind_attr_int rx374_cur, rx374_curclass, "$!from", rx374_pos
  rxscan375_scan1119:
    nqp_rxmark rx374_bstack, rxscan375_loop1118, rx374_pos, 0
  rxscan375_done1120:
    nqp_rxmark rx374_bstack, rxcap376_fail1122, rx374_pos, 0
    add $I11, rx374_pos, 3
    gt $I11, rx374_eos, rx374_fail1114
    substr $S10, rx374_tgt, rx374_pos, 3
    ne $S10, ucs4:"try", rx374_fail1114
    add rx374_pos, 3
    nqp_rxpeek $I19, rx374_bstack, rxcap376_fail1122
    inc $I19
    set $I11, rx374_bstack[$I19]
    repr_bind_attr_int rx374_cur, rx374_curclass, "$!pos", rx374_pos
    $P11 = rx374_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx374_pos)
    rx374_cstack = rx374_cur."!cursor_capture"($P11, "sym")
    goto rxcap376_done1121
  rxcap376_fail1122:
    goto rx374_fail1114
  rxcap376_done1121:
    repr_bind_attr_int rx374_cur, rx374_curclass, "$!pos", rx374_pos
    $P11 = rx374_cur."blorst"()
    repr_get_attr_int $I11, $P11, rx374_curclass, "$!pos"
    lt $I11, 0, rx374_fail1114
    nqp_rxmark rx374_bstack, rxsubrule377_pass1123, -1, 0
  rxsubrule377_pass1123:
    rx374_cstack = rx374_cur."!cursor_capture"($P11, "blorst")
    repr_get_attr_int rx374_pos, $P11, rx374_curclass, "$!pos"
    rx374_cur."!cursor_pass"(rx374_pos, "statement_prefix:sym<try>", 'backtrack'=>1)
    .return (rx374_cur)
  rx374_restart1113:
    repr_get_attr_obj rx374_cstack, rx374_cur, rx374_curclass, "$!cstack"
  rx374_fail1114:
    unless rx374_bstack, rx374_done1112
    pop $I19, rx374_bstack
    if_null rx374_cstack, rx374_cstack_done1117
    unless rx374_cstack, rx374_cstack_done1117
    dec $I19
    set $P11, rx374_cstack[$I19]
  rx374_cstack_done1117:
    pop rx374_rep, rx374_bstack
    pop rx374_pos, rx374_bstack
    pop $I19, rx374_bstack
    lt rx374_pos, -1, rx374_done1112
    lt rx374_pos, 0, rx374_fail1114
    eq $I19, 0, rx374_fail1114
    nqp_islist $I20, rx374_cstack
    unless $I20, rx374_jump1115
    elements $I18, rx374_bstack
    le $I18, 0, rx374_cut1116
    dec $I18
    set $I18, rx374_bstack[$I18]
  rx374_cut1116:
    assign rx374_cstack, $I18
  rx374_jump1115:
    jump $I19
  rx374_done1112:
    rx374_cur."!cursor_fail"()
    .return (rx374_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_74_1349901750.327_caps" :subid("cuid_memo_83_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["blorst"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_74_1349901750.327_nfa" :subid("cuid_memo_84_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 116
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 114
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 121
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "blorst"
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "blorst" :subid("cuid_75_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 866
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx378_tgt
    .local int rx378_pos
    .local int rx378_off
    .local int rx378_eos
    .local int rx378_rep
    .local pmc rx378_cur
    .local pmc rx378_curclass
    .local pmc rx378_bstack
    .local pmc rx378_cstack
    (rx378_cur, rx378_tgt, rx378_pos, rx378_curclass, rx378_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx378_cur
    length rx378_eos, rx378_tgt
    eq $I19, 1, rx378_restart1126
    gt rx378_pos, rx378_eos, rx378_fail1127
    repr_get_attr_int $I11, self, rx378_curclass, "$!from"
    ne $I11, -1, rxscan379_done1133
    goto rxscan379_scan1132
  rxscan379_loop1131:
    inc rx378_pos
    gt rx378_pos, rx378_eos, rx378_fail1127
    repr_bind_attr_int rx378_cur, rx378_curclass, "$!from", rx378_pos
  rxscan379_scan1132:
    nqp_rxmark rx378_bstack, rxscan379_loop1131, rx378_pos, 0
  rxscan379_done1133:
    ge rx378_pos, rx378_eos, rx378_fail1127
    is_cclass $I11, .CCLASS_WHITESPACE, rx378_tgt, rx378_pos
    unless $I11, rx378_fail1127
    add rx378_pos, 1
    repr_bind_attr_int rx378_cur, rx378_curclass, "$!pos", rx378_pos
    $P11 = rx378_cur."ws"()
    repr_get_attr_int $I11, $P11, rx378_curclass, "$!pos"
    lt $I11, 0, rx378_fail1127
    repr_get_attr_int rx378_pos, $P11, rx378_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt381_01136
    nqp_push_label $P11, alt381_11138
    nqp_rxmark rx378_bstack, alt381_end1135, -1, 0
    rx378_cur."!alt"(rx378_pos, "alt_nfa__16_1349901752.059", $P11)
    goto rx378_fail1127
  alt381_01136:
    ge rx378_pos, rx378_eos, rx378_fail1127
    substr $S11, rx378_tgt, rx378_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx378_fail1127
    repr_bind_attr_int rx378_cur, rx378_curclass, "$!pos", rx378_pos
    $P11 = rx378_cur."block"()
    repr_get_attr_int $I11, $P11, rx378_curclass, "$!pos"
    lt $I11, 0, rx378_fail1127
    nqp_rxmark rx378_bstack, rxsubrule382_pass1137, -1, 0
  rxsubrule382_pass1137:
    rx378_cstack = rx378_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx378_pos, $P11, rx378_curclass, "$!pos"
    goto alt381_end1135
  alt381_11138:
    repr_bind_attr_int rx378_cur, rx378_curclass, "$!pos", rx378_pos
    $P11 = rx378_cur."statement"()
    repr_get_attr_int $I11, $P11, rx378_curclass, "$!pos"
    lt $I11, 0, rx378_fail1127
    nqp_rxmark rx378_bstack, rxsubrule383_pass1139, -1, 0
  rxsubrule383_pass1139:
    rx378_cstack = rx378_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx378_pos, $P11, rx378_curclass, "$!pos"
    goto alt381_end1135
  alt381_end1135:
    nqp_rxcommit rx378_bstack, alt381_end1135
    rx378_cur."!cursor_pass"(rx378_pos, "blorst", 'backtrack'=>1)
    .return (rx378_cur)
  rx378_restart1126:
    repr_get_attr_obj rx378_cstack, rx378_cur, rx378_curclass, "$!cstack"
  rx378_fail1127:
    unless rx378_bstack, rx378_done1125
    pop $I19, rx378_bstack
    if_null rx378_cstack, rx378_cstack_done1130
    unless rx378_cstack, rx378_cstack_done1130
    dec $I19
    set $P11, rx378_cstack[$I19]
  rx378_cstack_done1130:
    pop rx378_rep, rx378_bstack
    pop rx378_pos, rx378_bstack
    pop $I19, rx378_bstack
    lt rx378_pos, -1, rx378_done1125
    lt rx378_pos, 0, rx378_fail1127
    eq $I19, 0, rx378_fail1127
    nqp_islist $I20, rx378_cstack
    unless $I20, rx378_jump1128
    elements $I18, rx378_bstack
    le $I18, 0, rx378_cut1129
    dec $I18
    set $I18, rx378_bstack[$I18]
  rx378_cut1129:
    assign rx378_cstack, $I18
  rx378_jump1128:
    jump $I19
  rx378_done1125:
    rx378_cur."!cursor_fail"()
    .return (rx378_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_75_1349901750.327_caps" :subid("cuid_memo_85_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["block"], $P5002
    box $P5003, 0
    set $P5001["statement"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_75_1349901750.327_nfa" :subid("cuid_memo_86_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 4
    push $P5003, $P5004
    box $P5005, 32
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "ws"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 6
    push $P5011, $P5012
    box $P5013, "{"
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    box $P5015, 8
    push $P5011, $P5015
    box $P5016, "statement"
    push $P5011, $P5016
    box $P5017, 0
    push $P5011, $P5017
    push $P5001, $P5011
    new $P5018, 'ResizablePMCArray'
    box $P5019, 0
    push $P5018, $P5019
    box $P5020, 0
    push $P5018, $P5020
    box $P5021, 0
    push $P5018, $P5021
    push $P5001, $P5018
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_75_1349901750.327_alt_nfa__16_1349901752.059" :subid("cuid_memo_87_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 6
    push $P5004, $P5005
    box $P5006, "{"
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 0
    push $P5008, $P5009
    box $P5010, 0
    push $P5008, $P5010
    box $P5011, 0
    push $P5008, $P5011
    push $P5002, $P5008
    push $P5001, $P5002
    new $P5012, 'ResizablePMCArray'
    new $P5013, 'ResizablePMCArray'
    push $P5012, $P5013
    new $P5014, 'ResizablePMCArray'
    box $P5015, 8
    push $P5014, $P5015
    box $P5016, "statement"
    push $P5014, $P5016
    box $P5017, 0
    push $P5014, $P5017
    push $P5012, $P5014
    push $P5001, $P5012
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond" :subid("cuid_76_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 872
    .param pmc self 
    $P5001 = self."!protoregex"("statement_mod_cond")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<if>" :subid("cuid_77_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 874
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx384_tgt
    .local int rx384_pos
    .local int rx384_off
    .local int rx384_eos
    .local int rx384_rep
    .local pmc rx384_cur
    .local pmc rx384_curclass
    .local pmc rx384_bstack
    .local pmc rx384_cstack
    (rx384_cur, rx384_tgt, rx384_pos, rx384_curclass, rx384_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx384_cur
    length rx384_eos, rx384_tgt
    eq $I19, 1, rx384_restart1142
    gt rx384_pos, rx384_eos, rx384_fail1143
    repr_get_attr_int $I11, self, rx384_curclass, "$!from"
    ne $I11, -1, rxscan385_done1149
    goto rxscan385_scan1148
  rxscan385_loop1147:
    inc rx384_pos
    gt rx384_pos, rx384_eos, rx384_fail1143
    repr_bind_attr_int rx384_cur, rx384_curclass, "$!from", rx384_pos
  rxscan385_scan1148:
    nqp_rxmark rx384_bstack, rxscan385_loop1147, rx384_pos, 0
  rxscan385_done1149:
    nqp_rxmark rx384_bstack, rxcap386_fail1151, rx384_pos, 0
    add $I11, rx384_pos, 2
    gt $I11, rx384_eos, rx384_fail1143
    substr $S10, rx384_tgt, rx384_pos, 2
    ne $S10, ucs4:"if", rx384_fail1143
    add rx384_pos, 2
    nqp_rxpeek $I19, rx384_bstack, rxcap386_fail1151
    inc $I19
    set $I11, rx384_bstack[$I19]
    repr_bind_attr_int rx384_cur, rx384_curclass, "$!pos", rx384_pos
    $P11 = rx384_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx384_pos)
    rx384_cstack = rx384_cur."!cursor_capture"($P11, "sym")
    goto rxcap386_done1150
  rxcap386_fail1151:
    goto rx384_fail1143
  rxcap386_done1150:
    repr_bind_attr_int rx384_cur, rx384_curclass, "$!pos", rx384_pos
    $P11 = rx384_cur."ws"()
    repr_get_attr_int $I11, $P11, rx384_curclass, "$!pos"
    lt $I11, 0, rx384_fail1143
    repr_get_attr_int rx384_pos, $P11, rx384_curclass, "$!pos"
    repr_bind_attr_int rx384_cur, rx384_curclass, "$!pos", rx384_pos
    $P11 = rx384_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx384_curclass, "$!pos"
    lt $I11, 0, rx384_fail1143
    nqp_rxmark rx384_bstack, rxsubrule388_pass1153, -1, 0
  rxsubrule388_pass1153:
    rx384_cstack = rx384_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx384_pos, $P11, rx384_curclass, "$!pos"
    repr_bind_attr_int rx384_cur, rx384_curclass, "$!pos", rx384_pos
    $P11 = rx384_cur."ws"()
    repr_get_attr_int $I11, $P11, rx384_curclass, "$!pos"
    lt $I11, 0, rx384_fail1143
    repr_get_attr_int rx384_pos, $P11, rx384_curclass, "$!pos"
    rx384_cur."!cursor_pass"(rx384_pos, "statement_mod_cond:sym<if>", 'backtrack'=>1)
    .return (rx384_cur)
  rx384_restart1142:
    repr_get_attr_obj rx384_cstack, rx384_cur, rx384_curclass, "$!cstack"
  rx384_fail1143:
    unless rx384_bstack, rx384_done1141
    pop $I19, rx384_bstack
    if_null rx384_cstack, rx384_cstack_done1146
    unless rx384_cstack, rx384_cstack_done1146
    dec $I19
    set $P11, rx384_cstack[$I19]
  rx384_cstack_done1146:
    pop rx384_rep, rx384_bstack
    pop rx384_pos, rx384_bstack
    pop $I19, rx384_bstack
    lt rx384_pos, -1, rx384_done1141
    lt rx384_pos, 0, rx384_fail1143
    eq $I19, 0, rx384_fail1143
    nqp_islist $I20, rx384_cstack
    unless $I20, rx384_jump1144
    elements $I18, rx384_bstack
    le $I18, 0, rx384_cut1145
    dec $I18
    set $I18, rx384_bstack[$I18]
  rx384_cut1145:
    assign rx384_cstack, $I18
  rx384_jump1144:
    jump $I19
  rx384_done1141:
    rx384_cur."!cursor_fail"()
    .return (rx384_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_77_1349901750.327_caps" :subid("cuid_memo_88_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["cond"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_77_1349901750.327_nfa" :subid("cuid_memo_89_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 105
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 102
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 0
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<unless>" :subid("cuid_78_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 875
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx390_tgt
    .local int rx390_pos
    .local int rx390_off
    .local int rx390_eos
    .local int rx390_rep
    .local pmc rx390_cur
    .local pmc rx390_curclass
    .local pmc rx390_bstack
    .local pmc rx390_cstack
    (rx390_cur, rx390_tgt, rx390_pos, rx390_curclass, rx390_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx390_cur
    length rx390_eos, rx390_tgt
    eq $I19, 1, rx390_restart1157
    gt rx390_pos, rx390_eos, rx390_fail1158
    repr_get_attr_int $I11, self, rx390_curclass, "$!from"
    ne $I11, -1, rxscan391_done1164
    goto rxscan391_scan1163
  rxscan391_loop1162:
    inc rx390_pos
    gt rx390_pos, rx390_eos, rx390_fail1158
    repr_bind_attr_int rx390_cur, rx390_curclass, "$!from", rx390_pos
  rxscan391_scan1163:
    nqp_rxmark rx390_bstack, rxscan391_loop1162, rx390_pos, 0
  rxscan391_done1164:
    nqp_rxmark rx390_bstack, rxcap392_fail1166, rx390_pos, 0
    add $I11, rx390_pos, 6
    gt $I11, rx390_eos, rx390_fail1158
    substr $S10, rx390_tgt, rx390_pos, 6
    ne $S10, ucs4:"unless", rx390_fail1158
    add rx390_pos, 6
    nqp_rxpeek $I19, rx390_bstack, rxcap392_fail1166
    inc $I19
    set $I11, rx390_bstack[$I19]
    repr_bind_attr_int rx390_cur, rx390_curclass, "$!pos", rx390_pos
    $P11 = rx390_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx390_pos)
    rx390_cstack = rx390_cur."!cursor_capture"($P11, "sym")
    goto rxcap392_done1165
  rxcap392_fail1166:
    goto rx390_fail1158
  rxcap392_done1165:
    repr_bind_attr_int rx390_cur, rx390_curclass, "$!pos", rx390_pos
    $P11 = rx390_cur."ws"()
    repr_get_attr_int $I11, $P11, rx390_curclass, "$!pos"
    lt $I11, 0, rx390_fail1158
    repr_get_attr_int rx390_pos, $P11, rx390_curclass, "$!pos"
    repr_bind_attr_int rx390_cur, rx390_curclass, "$!pos", rx390_pos
    $P11 = rx390_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx390_curclass, "$!pos"
    lt $I11, 0, rx390_fail1158
    nqp_rxmark rx390_bstack, rxsubrule394_pass1168, -1, 0
  rxsubrule394_pass1168:
    rx390_cstack = rx390_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx390_pos, $P11, rx390_curclass, "$!pos"
    repr_bind_attr_int rx390_cur, rx390_curclass, "$!pos", rx390_pos
    $P11 = rx390_cur."ws"()
    repr_get_attr_int $I11, $P11, rx390_curclass, "$!pos"
    lt $I11, 0, rx390_fail1158
    repr_get_attr_int rx390_pos, $P11, rx390_curclass, "$!pos"
    rx390_cur."!cursor_pass"(rx390_pos, "statement_mod_cond:sym<unless>", 'backtrack'=>1)
    .return (rx390_cur)
  rx390_restart1157:
    repr_get_attr_obj rx390_cstack, rx390_cur, rx390_curclass, "$!cstack"
  rx390_fail1158:
    unless rx390_bstack, rx390_done1156
    pop $I19, rx390_bstack
    if_null rx390_cstack, rx390_cstack_done1161
    unless rx390_cstack, rx390_cstack_done1161
    dec $I19
    set $P11, rx390_cstack[$I19]
  rx390_cstack_done1161:
    pop rx390_rep, rx390_bstack
    pop rx390_pos, rx390_bstack
    pop $I19, rx390_bstack
    lt rx390_pos, -1, rx390_done1156
    lt rx390_pos, 0, rx390_fail1158
    eq $I19, 0, rx390_fail1158
    nqp_islist $I20, rx390_cstack
    unless $I20, rx390_jump1159
    elements $I18, rx390_bstack
    le $I18, 0, rx390_cut1160
    dec $I18
    set $I18, rx390_bstack[$I18]
  rx390_cut1160:
    assign rx390_cstack, $I18
  rx390_jump1159:
    jump $I19
  rx390_done1156:
    rx390_cur."!cursor_fail"()
    .return (rx390_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_78_1349901750.327_caps" :subid("cuid_memo_90_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["cond"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_78_1349901750.327_nfa" :subid("cuid_memo_91_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 117
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 110
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 108
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 101
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 115
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 115
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 0
    push $P5027, $P5028
    box $P5029, 0
    push $P5027, $P5029
    box $P5030, 0
    push $P5027, $P5030
    push $P5001, $P5027
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop" :subid("cuid_79_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 877
    .param pmc self 
    $P5001 = self."!protoregex"("statement_mod_loop")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<while>" :subid("cuid_80_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 879
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx396_tgt
    .local int rx396_pos
    .local int rx396_off
    .local int rx396_eos
    .local int rx396_rep
    .local pmc rx396_cur
    .local pmc rx396_curclass
    .local pmc rx396_bstack
    .local pmc rx396_cstack
    (rx396_cur, rx396_tgt, rx396_pos, rx396_curclass, rx396_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx396_cur
    length rx396_eos, rx396_tgt
    eq $I19, 1, rx396_restart1172
    gt rx396_pos, rx396_eos, rx396_fail1173
    repr_get_attr_int $I11, self, rx396_curclass, "$!from"
    ne $I11, -1, rxscan397_done1179
    goto rxscan397_scan1178
  rxscan397_loop1177:
    inc rx396_pos
    gt rx396_pos, rx396_eos, rx396_fail1173
    repr_bind_attr_int rx396_cur, rx396_curclass, "$!from", rx396_pos
  rxscan397_scan1178:
    nqp_rxmark rx396_bstack, rxscan397_loop1177, rx396_pos, 0
  rxscan397_done1179:
    nqp_rxmark rx396_bstack, rxcap398_fail1181, rx396_pos, 0
    add $I11, rx396_pos, 5
    gt $I11, rx396_eos, rx396_fail1173
    substr $S10, rx396_tgt, rx396_pos, 5
    ne $S10, ucs4:"while", rx396_fail1173
    add rx396_pos, 5
    nqp_rxpeek $I19, rx396_bstack, rxcap398_fail1181
    inc $I19
    set $I11, rx396_bstack[$I19]
    repr_bind_attr_int rx396_cur, rx396_curclass, "$!pos", rx396_pos
    $P11 = rx396_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx396_pos)
    rx396_cstack = rx396_cur."!cursor_capture"($P11, "sym")
    goto rxcap398_done1180
  rxcap398_fail1181:
    goto rx396_fail1173
  rxcap398_done1180:
    repr_bind_attr_int rx396_cur, rx396_curclass, "$!pos", rx396_pos
    $P11 = rx396_cur."ws"()
    repr_get_attr_int $I11, $P11, rx396_curclass, "$!pos"
    lt $I11, 0, rx396_fail1173
    repr_get_attr_int rx396_pos, $P11, rx396_curclass, "$!pos"
    repr_bind_attr_int rx396_cur, rx396_curclass, "$!pos", rx396_pos
    $P11 = rx396_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx396_curclass, "$!pos"
    lt $I11, 0, rx396_fail1173
    nqp_rxmark rx396_bstack, rxsubrule400_pass1183, -1, 0
  rxsubrule400_pass1183:
    rx396_cstack = rx396_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx396_pos, $P11, rx396_curclass, "$!pos"
    repr_bind_attr_int rx396_cur, rx396_curclass, "$!pos", rx396_pos
    $P11 = rx396_cur."ws"()
    repr_get_attr_int $I11, $P11, rx396_curclass, "$!pos"
    lt $I11, 0, rx396_fail1173
    repr_get_attr_int rx396_pos, $P11, rx396_curclass, "$!pos"
    rx396_cur."!cursor_pass"(rx396_pos, "statement_mod_loop:sym<while>", 'backtrack'=>1)
    .return (rx396_cur)
  rx396_restart1172:
    repr_get_attr_obj rx396_cstack, rx396_cur, rx396_curclass, "$!cstack"
  rx396_fail1173:
    unless rx396_bstack, rx396_done1171
    pop $I19, rx396_bstack
    if_null rx396_cstack, rx396_cstack_done1176
    unless rx396_cstack, rx396_cstack_done1176
    dec $I19
    set $P11, rx396_cstack[$I19]
  rx396_cstack_done1176:
    pop rx396_rep, rx396_bstack
    pop rx396_pos, rx396_bstack
    pop $I19, rx396_bstack
    lt rx396_pos, -1, rx396_done1171
    lt rx396_pos, 0, rx396_fail1173
    eq $I19, 0, rx396_fail1173
    nqp_islist $I20, rx396_cstack
    unless $I20, rx396_jump1174
    elements $I18, rx396_bstack
    le $I18, 0, rx396_cut1175
    dec $I18
    set $I18, rx396_bstack[$I18]
  rx396_cut1175:
    assign rx396_cstack, $I18
  rx396_jump1174:
    jump $I19
  rx396_done1171:
    rx396_cur."!cursor_fail"()
    .return (rx396_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_80_1349901750.327_caps" :subid("cuid_memo_92_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["cond"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_80_1349901750.327_nfa" :subid("cuid_memo_93_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 119
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 104
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 105
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 108
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 101
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 0
    push $P5023, $P5024
    box $P5025, 0
    push $P5023, $P5025
    box $P5026, 0
    push $P5023, $P5026
    push $P5001, $P5023
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<until>" :subid("cuid_81_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 880
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx402_tgt
    .local int rx402_pos
    .local int rx402_off
    .local int rx402_eos
    .local int rx402_rep
    .local pmc rx402_cur
    .local pmc rx402_curclass
    .local pmc rx402_bstack
    .local pmc rx402_cstack
    (rx402_cur, rx402_tgt, rx402_pos, rx402_curclass, rx402_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx402_cur
    length rx402_eos, rx402_tgt
    eq $I19, 1, rx402_restart1187
    gt rx402_pos, rx402_eos, rx402_fail1188
    repr_get_attr_int $I11, self, rx402_curclass, "$!from"
    ne $I11, -1, rxscan403_done1194
    goto rxscan403_scan1193
  rxscan403_loop1192:
    inc rx402_pos
    gt rx402_pos, rx402_eos, rx402_fail1188
    repr_bind_attr_int rx402_cur, rx402_curclass, "$!from", rx402_pos
  rxscan403_scan1193:
    nqp_rxmark rx402_bstack, rxscan403_loop1192, rx402_pos, 0
  rxscan403_done1194:
    nqp_rxmark rx402_bstack, rxcap404_fail1196, rx402_pos, 0
    add $I11, rx402_pos, 5
    gt $I11, rx402_eos, rx402_fail1188
    substr $S10, rx402_tgt, rx402_pos, 5
    ne $S10, ucs4:"until", rx402_fail1188
    add rx402_pos, 5
    nqp_rxpeek $I19, rx402_bstack, rxcap404_fail1196
    inc $I19
    set $I11, rx402_bstack[$I19]
    repr_bind_attr_int rx402_cur, rx402_curclass, "$!pos", rx402_pos
    $P11 = rx402_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx402_pos)
    rx402_cstack = rx402_cur."!cursor_capture"($P11, "sym")
    goto rxcap404_done1195
  rxcap404_fail1196:
    goto rx402_fail1188
  rxcap404_done1195:
    repr_bind_attr_int rx402_cur, rx402_curclass, "$!pos", rx402_pos
    $P11 = rx402_cur."ws"()
    repr_get_attr_int $I11, $P11, rx402_curclass, "$!pos"
    lt $I11, 0, rx402_fail1188
    repr_get_attr_int rx402_pos, $P11, rx402_curclass, "$!pos"
    repr_bind_attr_int rx402_cur, rx402_curclass, "$!pos", rx402_pos
    $P11 = rx402_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx402_curclass, "$!pos"
    lt $I11, 0, rx402_fail1188
    nqp_rxmark rx402_bstack, rxsubrule406_pass1198, -1, 0
  rxsubrule406_pass1198:
    rx402_cstack = rx402_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx402_pos, $P11, rx402_curclass, "$!pos"
    repr_bind_attr_int rx402_cur, rx402_curclass, "$!pos", rx402_pos
    $P11 = rx402_cur."ws"()
    repr_get_attr_int $I11, $P11, rx402_curclass, "$!pos"
    lt $I11, 0, rx402_fail1188
    repr_get_attr_int rx402_pos, $P11, rx402_curclass, "$!pos"
    rx402_cur."!cursor_pass"(rx402_pos, "statement_mod_loop:sym<until>", 'backtrack'=>1)
    .return (rx402_cur)
  rx402_restart1187:
    repr_get_attr_obj rx402_cstack, rx402_cur, rx402_curclass, "$!cstack"
  rx402_fail1188:
    unless rx402_bstack, rx402_done1186
    pop $I19, rx402_bstack
    if_null rx402_cstack, rx402_cstack_done1191
    unless rx402_cstack, rx402_cstack_done1191
    dec $I19
    set $P11, rx402_cstack[$I19]
  rx402_cstack_done1191:
    pop rx402_rep, rx402_bstack
    pop rx402_pos, rx402_bstack
    pop $I19, rx402_bstack
    lt rx402_pos, -1, rx402_done1186
    lt rx402_pos, 0, rx402_fail1188
    eq $I19, 0, rx402_fail1188
    nqp_islist $I20, rx402_cstack
    unless $I20, rx402_jump1189
    elements $I18, rx402_bstack
    le $I18, 0, rx402_cut1190
    dec $I18
    set $I18, rx402_bstack[$I18]
  rx402_cut1190:
    assign rx402_cstack, $I18
  rx402_jump1189:
    jump $I19
  rx402_done1186:
    rx402_cur."!cursor_fail"()
    .return (rx402_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_81_1349901750.327_caps" :subid("cuid_memo_94_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["cond"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_81_1349901750.327_nfa" :subid("cuid_memo_95_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 117
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 110
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 116
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 105
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 108
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 0
    push $P5023, $P5024
    box $P5025, 0
    push $P5023, $P5025
    box $P5026, 0
    push $P5023, $P5026
    push $P5001, $P5023
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<for>" :subid("cuid_82_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 881
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx408_tgt
    .local int rx408_pos
    .local int rx408_off
    .local int rx408_eos
    .local int rx408_rep
    .local pmc rx408_cur
    .local pmc rx408_curclass
    .local pmc rx408_bstack
    .local pmc rx408_cstack
    (rx408_cur, rx408_tgt, rx408_pos, rx408_curclass, rx408_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx408_cur
    length rx408_eos, rx408_tgt
    eq $I19, 1, rx408_restart1202
    gt rx408_pos, rx408_eos, rx408_fail1203
    repr_get_attr_int $I11, self, rx408_curclass, "$!from"
    ne $I11, -1, rxscan409_done1209
    goto rxscan409_scan1208
  rxscan409_loop1207:
    inc rx408_pos
    gt rx408_pos, rx408_eos, rx408_fail1203
    repr_bind_attr_int rx408_cur, rx408_curclass, "$!from", rx408_pos
  rxscan409_scan1208:
    nqp_rxmark rx408_bstack, rxscan409_loop1207, rx408_pos, 0
  rxscan409_done1209:
    nqp_rxmark rx408_bstack, rxcap410_fail1211, rx408_pos, 0
    add $I11, rx408_pos, 3
    gt $I11, rx408_eos, rx408_fail1203
    substr $S10, rx408_tgt, rx408_pos, 3
    ne $S10, ucs4:"for", rx408_fail1203
    add rx408_pos, 3
    nqp_rxpeek $I19, rx408_bstack, rxcap410_fail1211
    inc $I19
    set $I11, rx408_bstack[$I19]
    repr_bind_attr_int rx408_cur, rx408_curclass, "$!pos", rx408_pos
    $P11 = rx408_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx408_pos)
    rx408_cstack = rx408_cur."!cursor_capture"($P11, "sym")
    goto rxcap410_done1210
  rxcap410_fail1211:
    goto rx408_fail1203
  rxcap410_done1210:
    repr_bind_attr_int rx408_cur, rx408_curclass, "$!pos", rx408_pos
    $P11 = rx408_cur."ws"()
    repr_get_attr_int $I11, $P11, rx408_curclass, "$!pos"
    lt $I11, 0, rx408_fail1203
    repr_get_attr_int rx408_pos, $P11, rx408_curclass, "$!pos"
    repr_bind_attr_int rx408_cur, rx408_curclass, "$!pos", rx408_pos
    $P11 = rx408_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx408_curclass, "$!pos"
    lt $I11, 0, rx408_fail1203
    nqp_rxmark rx408_bstack, rxsubrule412_pass1213, -1, 0
  rxsubrule412_pass1213:
    rx408_cstack = rx408_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx408_pos, $P11, rx408_curclass, "$!pos"
    repr_bind_attr_int rx408_cur, rx408_curclass, "$!pos", rx408_pos
    $P11 = rx408_cur."ws"()
    repr_get_attr_int $I11, $P11, rx408_curclass, "$!pos"
    lt $I11, 0, rx408_fail1203
    repr_get_attr_int rx408_pos, $P11, rx408_curclass, "$!pos"
    rx408_cur."!cursor_pass"(rx408_pos, "statement_mod_loop:sym<for>", 'backtrack'=>1)
    .return (rx408_cur)
  rx408_restart1202:
    repr_get_attr_obj rx408_cstack, rx408_cur, rx408_curclass, "$!cstack"
  rx408_fail1203:
    unless rx408_bstack, rx408_done1201
    pop $I19, rx408_bstack
    if_null rx408_cstack, rx408_cstack_done1206
    unless rx408_cstack, rx408_cstack_done1206
    dec $I19
    set $P11, rx408_cstack[$I19]
  rx408_cstack_done1206:
    pop rx408_rep, rx408_bstack
    pop rx408_pos, rx408_bstack
    pop $I19, rx408_bstack
    lt rx408_pos, -1, rx408_done1201
    lt rx408_pos, 0, rx408_fail1203
    eq $I19, 0, rx408_fail1203
    nqp_islist $I20, rx408_cstack
    unless $I20, rx408_jump1204
    elements $I18, rx408_bstack
    le $I18, 0, rx408_cut1205
    dec $I18
    set $I18, rx408_bstack[$I18]
  rx408_cut1205:
    assign rx408_cstack, $I18
  rx408_jump1204:
    jump $I19
  rx408_done1201:
    rx408_cur."!cursor_fail"()
    .return (rx408_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_82_1349901750.327_caps" :subid("cuid_memo_96_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["cond"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_82_1349901750.327_nfa" :subid("cuid_memo_97_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 102
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 111
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 114
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 0
    push $P5015, $P5016
    box $P5017, 0
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<fatarrow>" :subid("cuid_83_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 885
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx414_tgt
    .local int rx414_pos
    .local int rx414_off
    .local int rx414_eos
    .local int rx414_rep
    .local pmc rx414_cur
    .local pmc rx414_curclass
    .local pmc rx414_bstack
    .local pmc rx414_cstack
    (rx414_cur, rx414_tgt, rx414_pos, rx414_curclass, rx414_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx414_cur
    length rx414_eos, rx414_tgt
    eq $I19, 1, rx414_restart1217
    gt rx414_pos, rx414_eos, rx414_fail1218
    repr_get_attr_int $I11, self, rx414_curclass, "$!from"
    ne $I11, -1, rxscan415_done1224
    goto rxscan415_scan1223
  rxscan415_loop1222:
    inc rx414_pos
    gt rx414_pos, rx414_eos, rx414_fail1218
    repr_bind_attr_int rx414_cur, rx414_curclass, "$!from", rx414_pos
  rxscan415_scan1223:
    nqp_rxmark rx414_bstack, rxscan415_loop1222, rx414_pos, 0
  rxscan415_done1224:
    repr_bind_attr_int rx414_cur, rx414_curclass, "$!pos", rx414_pos
    $P11 = rx414_cur."fatarrow"()
    repr_get_attr_int $I11, $P11, rx414_curclass, "$!pos"
    lt $I11, 0, rx414_fail1218
    nqp_rxmark rx414_bstack, rxsubrule416_pass1225, -1, 0
  rxsubrule416_pass1225:
    rx414_cstack = rx414_cur."!cursor_capture"($P11, "fatarrow")
    repr_get_attr_int rx414_pos, $P11, rx414_curclass, "$!pos"
    rx414_cur."!cursor_pass"(rx414_pos, "term:sym<fatarrow>", 'backtrack'=>1)
    .return (rx414_cur)
  rx414_restart1217:
    repr_get_attr_obj rx414_cstack, rx414_cur, rx414_curclass, "$!cstack"
  rx414_fail1218:
    unless rx414_bstack, rx414_done1216
    pop $I19, rx414_bstack
    if_null rx414_cstack, rx414_cstack_done1221
    unless rx414_cstack, rx414_cstack_done1221
    dec $I19
    set $P11, rx414_cstack[$I19]
  rx414_cstack_done1221:
    pop rx414_rep, rx414_bstack
    pop rx414_pos, rx414_bstack
    pop $I19, rx414_bstack
    lt rx414_pos, -1, rx414_done1216
    lt rx414_pos, 0, rx414_fail1218
    eq $I19, 0, rx414_fail1218
    nqp_islist $I20, rx414_cstack
    unless $I20, rx414_jump1219
    elements $I18, rx414_bstack
    le $I18, 0, rx414_cut1220
    dec $I18
    set $I18, rx414_bstack[$I18]
  rx414_cut1220:
    assign rx414_cstack, $I18
  rx414_jump1219:
    jump $I19
  rx414_done1216:
    rx414_cur."!cursor_fail"()
    .return (rx414_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_83_1349901750.327_caps" :subid("cuid_memo_98_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["fatarrow"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_83_1349901750.327_nfa" :subid("cuid_memo_99_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "fatarrow"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<colonpair>" :subid("cuid_84_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 886
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx417_tgt
    .local int rx417_pos
    .local int rx417_off
    .local int rx417_eos
    .local int rx417_rep
    .local pmc rx417_cur
    .local pmc rx417_curclass
    .local pmc rx417_bstack
    .local pmc rx417_cstack
    (rx417_cur, rx417_tgt, rx417_pos, rx417_curclass, rx417_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx417_cur
    length rx417_eos, rx417_tgt
    eq $I19, 1, rx417_restart1228
    gt rx417_pos, rx417_eos, rx417_fail1229
    repr_get_attr_int $I11, self, rx417_curclass, "$!from"
    ne $I11, -1, rxscan418_done1235
    goto rxscan418_scan1234
  rxscan418_loop1233:
    inc rx417_pos
    gt rx417_pos, rx417_eos, rx417_fail1229
    repr_bind_attr_int rx417_cur, rx417_curclass, "$!from", rx417_pos
  rxscan418_scan1234:
    nqp_rxmark rx417_bstack, rxscan418_loop1233, rx417_pos, 0
  rxscan418_done1235:
    repr_bind_attr_int rx417_cur, rx417_curclass, "$!pos", rx417_pos
    $P11 = rx417_cur."colonpair"()
    repr_get_attr_int $I11, $P11, rx417_curclass, "$!pos"
    lt $I11, 0, rx417_fail1229
    nqp_rxmark rx417_bstack, rxsubrule419_pass1236, -1, 0
  rxsubrule419_pass1236:
    rx417_cstack = rx417_cur."!cursor_capture"($P11, "colonpair")
    repr_get_attr_int rx417_pos, $P11, rx417_curclass, "$!pos"
    rx417_cur."!cursor_pass"(rx417_pos, "term:sym<colonpair>", 'backtrack'=>1)
    .return (rx417_cur)
  rx417_restart1228:
    repr_get_attr_obj rx417_cstack, rx417_cur, rx417_curclass, "$!cstack"
  rx417_fail1229:
    unless rx417_bstack, rx417_done1227
    pop $I19, rx417_bstack
    if_null rx417_cstack, rx417_cstack_done1232
    unless rx417_cstack, rx417_cstack_done1232
    dec $I19
    set $P11, rx417_cstack[$I19]
  rx417_cstack_done1232:
    pop rx417_rep, rx417_bstack
    pop rx417_pos, rx417_bstack
    pop $I19, rx417_bstack
    lt rx417_pos, -1, rx417_done1227
    lt rx417_pos, 0, rx417_fail1229
    eq $I19, 0, rx417_fail1229
    nqp_islist $I20, rx417_cstack
    unless $I20, rx417_jump1230
    elements $I18, rx417_bstack
    le $I18, 0, rx417_cut1231
    dec $I18
    set $I18, rx417_bstack[$I18]
  rx417_cut1231:
    assign rx417_cstack, $I18
  rx417_jump1230:
    jump $I19
  rx417_done1227:
    rx417_cur."!cursor_fail"()
    .return (rx417_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_84_1349901750.327_caps" :subid("cuid_memo_100_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["colonpair"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_84_1349901750.327_nfa" :subid("cuid_memo_101_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "colonpair"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<variable>" :subid("cuid_85_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 887
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx420_tgt
    .local int rx420_pos
    .local int rx420_off
    .local int rx420_eos
    .local int rx420_rep
    .local pmc rx420_cur
    .local pmc rx420_curclass
    .local pmc rx420_bstack
    .local pmc rx420_cstack
    (rx420_cur, rx420_tgt, rx420_pos, rx420_curclass, rx420_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx420_cur
    length rx420_eos, rx420_tgt
    eq $I19, 1, rx420_restart1239
    gt rx420_pos, rx420_eos, rx420_fail1240
    repr_get_attr_int $I11, self, rx420_curclass, "$!from"
    ne $I11, -1, rxscan421_done1246
    goto rxscan421_scan1245
  rxscan421_loop1244:
    inc rx420_pos
    gt rx420_pos, rx420_eos, rx420_fail1240
    repr_bind_attr_int rx420_cur, rx420_curclass, "$!from", rx420_pos
  rxscan421_scan1245:
    nqp_rxmark rx420_bstack, rxscan421_loop1244, rx420_pos, 0
  rxscan421_done1246:
    repr_bind_attr_int rx420_cur, rx420_curclass, "$!pos", rx420_pos
    $P11 = rx420_cur."variable"()
    repr_get_attr_int $I11, $P11, rx420_curclass, "$!pos"
    lt $I11, 0, rx420_fail1240
    nqp_rxmark rx420_bstack, rxsubrule422_pass1247, -1, 0
  rxsubrule422_pass1247:
    rx420_cstack = rx420_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx420_pos, $P11, rx420_curclass, "$!pos"
    rx420_cur."!cursor_pass"(rx420_pos, "term:sym<variable>", 'backtrack'=>1)
    .return (rx420_cur)
  rx420_restart1239:
    repr_get_attr_obj rx420_cstack, rx420_cur, rx420_curclass, "$!cstack"
  rx420_fail1240:
    unless rx420_bstack, rx420_done1238
    pop $I19, rx420_bstack
    if_null rx420_cstack, rx420_cstack_done1243
    unless rx420_cstack, rx420_cstack_done1243
    dec $I19
    set $P11, rx420_cstack[$I19]
  rx420_cstack_done1243:
    pop rx420_rep, rx420_bstack
    pop rx420_pos, rx420_bstack
    pop $I19, rx420_bstack
    lt rx420_pos, -1, rx420_done1238
    lt rx420_pos, 0, rx420_fail1240
    eq $I19, 0, rx420_fail1240
    nqp_islist $I20, rx420_cstack
    unless $I20, rx420_jump1241
    elements $I18, rx420_bstack
    le $I18, 0, rx420_cut1242
    dec $I18
    set $I18, rx420_bstack[$I18]
  rx420_cut1242:
    assign rx420_cstack, $I18
  rx420_jump1241:
    jump $I19
  rx420_done1238:
    rx420_cur."!cursor_fail"()
    .return (rx420_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_85_1349901750.327_caps" :subid("cuid_memo_102_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["variable"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_85_1349901750.327_nfa" :subid("cuid_memo_103_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "variable"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<package_declarator>" :subid("cuid_86_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 888
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx423_tgt
    .local int rx423_pos
    .local int rx423_off
    .local int rx423_eos
    .local int rx423_rep
    .local pmc rx423_cur
    .local pmc rx423_curclass
    .local pmc rx423_bstack
    .local pmc rx423_cstack
    (rx423_cur, rx423_tgt, rx423_pos, rx423_curclass, rx423_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx423_cur
    length rx423_eos, rx423_tgt
    eq $I19, 1, rx423_restart1250
    gt rx423_pos, rx423_eos, rx423_fail1251
    repr_get_attr_int $I11, self, rx423_curclass, "$!from"
    ne $I11, -1, rxscan424_done1257
    goto rxscan424_scan1256
  rxscan424_loop1255:
    inc rx423_pos
    gt rx423_pos, rx423_eos, rx423_fail1251
    repr_bind_attr_int rx423_cur, rx423_curclass, "$!from", rx423_pos
  rxscan424_scan1256:
    nqp_rxmark rx423_bstack, rxscan424_loop1255, rx423_pos, 0
  rxscan424_done1257:
    repr_bind_attr_int rx423_cur, rx423_curclass, "$!pos", rx423_pos
    $P11 = rx423_cur."package_declarator"()
    repr_get_attr_int $I11, $P11, rx423_curclass, "$!pos"
    lt $I11, 0, rx423_fail1251
    nqp_rxmark rx423_bstack, rxsubrule425_pass1258, -1, 0
  rxsubrule425_pass1258:
    rx423_cstack = rx423_cur."!cursor_capture"($P11, "package_declarator")
    repr_get_attr_int rx423_pos, $P11, rx423_curclass, "$!pos"
    rx423_cur."!cursor_pass"(rx423_pos, "term:sym<package_declarator>", 'backtrack'=>1)
    .return (rx423_cur)
  rx423_restart1250:
    repr_get_attr_obj rx423_cstack, rx423_cur, rx423_curclass, "$!cstack"
  rx423_fail1251:
    unless rx423_bstack, rx423_done1249
    pop $I19, rx423_bstack
    if_null rx423_cstack, rx423_cstack_done1254
    unless rx423_cstack, rx423_cstack_done1254
    dec $I19
    set $P11, rx423_cstack[$I19]
  rx423_cstack_done1254:
    pop rx423_rep, rx423_bstack
    pop rx423_pos, rx423_bstack
    pop $I19, rx423_bstack
    lt rx423_pos, -1, rx423_done1249
    lt rx423_pos, 0, rx423_fail1251
    eq $I19, 0, rx423_fail1251
    nqp_islist $I20, rx423_cstack
    unless $I20, rx423_jump1252
    elements $I18, rx423_bstack
    le $I18, 0, rx423_cut1253
    dec $I18
    set $I18, rx423_bstack[$I18]
  rx423_cut1253:
    assign rx423_cstack, $I18
  rx423_jump1252:
    jump $I19
  rx423_done1249:
    rx423_cur."!cursor_fail"()
    .return (rx423_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_86_1349901750.327_caps" :subid("cuid_memo_104_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["package_declarator"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_86_1349901750.327_nfa" :subid("cuid_memo_105_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "package_declarator"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<scope_declarator>" :subid("cuid_87_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 889
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx426_tgt
    .local int rx426_pos
    .local int rx426_off
    .local int rx426_eos
    .local int rx426_rep
    .local pmc rx426_cur
    .local pmc rx426_curclass
    .local pmc rx426_bstack
    .local pmc rx426_cstack
    (rx426_cur, rx426_tgt, rx426_pos, rx426_curclass, rx426_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx426_cur
    length rx426_eos, rx426_tgt
    eq $I19, 1, rx426_restart1261
    gt rx426_pos, rx426_eos, rx426_fail1262
    repr_get_attr_int $I11, self, rx426_curclass, "$!from"
    ne $I11, -1, rxscan427_done1268
    goto rxscan427_scan1267
  rxscan427_loop1266:
    inc rx426_pos
    gt rx426_pos, rx426_eos, rx426_fail1262
    repr_bind_attr_int rx426_cur, rx426_curclass, "$!from", rx426_pos
  rxscan427_scan1267:
    nqp_rxmark rx426_bstack, rxscan427_loop1266, rx426_pos, 0
  rxscan427_done1268:
    repr_bind_attr_int rx426_cur, rx426_curclass, "$!pos", rx426_pos
    $P11 = rx426_cur."scope_declarator"()
    repr_get_attr_int $I11, $P11, rx426_curclass, "$!pos"
    lt $I11, 0, rx426_fail1262
    nqp_rxmark rx426_bstack, rxsubrule428_pass1269, -1, 0
  rxsubrule428_pass1269:
    rx426_cstack = rx426_cur."!cursor_capture"($P11, "scope_declarator")
    repr_get_attr_int rx426_pos, $P11, rx426_curclass, "$!pos"
    rx426_cur."!cursor_pass"(rx426_pos, "term:sym<scope_declarator>", 'backtrack'=>1)
    .return (rx426_cur)
  rx426_restart1261:
    repr_get_attr_obj rx426_cstack, rx426_cur, rx426_curclass, "$!cstack"
  rx426_fail1262:
    unless rx426_bstack, rx426_done1260
    pop $I19, rx426_bstack
    if_null rx426_cstack, rx426_cstack_done1265
    unless rx426_cstack, rx426_cstack_done1265
    dec $I19
    set $P11, rx426_cstack[$I19]
  rx426_cstack_done1265:
    pop rx426_rep, rx426_bstack
    pop rx426_pos, rx426_bstack
    pop $I19, rx426_bstack
    lt rx426_pos, -1, rx426_done1260
    lt rx426_pos, 0, rx426_fail1262
    eq $I19, 0, rx426_fail1262
    nqp_islist $I20, rx426_cstack
    unless $I20, rx426_jump1263
    elements $I18, rx426_bstack
    le $I18, 0, rx426_cut1264
    dec $I18
    set $I18, rx426_bstack[$I18]
  rx426_cut1264:
    assign rx426_cstack, $I18
  rx426_jump1263:
    jump $I19
  rx426_done1260:
    rx426_cur."!cursor_fail"()
    .return (rx426_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_87_1349901750.327_caps" :subid("cuid_memo_106_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["scope_declarator"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_87_1349901750.327_nfa" :subid("cuid_memo_107_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "scope_declarator"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<routine_declarator>" :subid("cuid_88_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 890
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx429_tgt
    .local int rx429_pos
    .local int rx429_off
    .local int rx429_eos
    .local int rx429_rep
    .local pmc rx429_cur
    .local pmc rx429_curclass
    .local pmc rx429_bstack
    .local pmc rx429_cstack
    (rx429_cur, rx429_tgt, rx429_pos, rx429_curclass, rx429_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx429_cur
    length rx429_eos, rx429_tgt
    eq $I19, 1, rx429_restart1272
    gt rx429_pos, rx429_eos, rx429_fail1273
    repr_get_attr_int $I11, self, rx429_curclass, "$!from"
    ne $I11, -1, rxscan430_done1279
    goto rxscan430_scan1278
  rxscan430_loop1277:
    inc rx429_pos
    gt rx429_pos, rx429_eos, rx429_fail1273
    repr_bind_attr_int rx429_cur, rx429_curclass, "$!from", rx429_pos
  rxscan430_scan1278:
    nqp_rxmark rx429_bstack, rxscan430_loop1277, rx429_pos, 0
  rxscan430_done1279:
    repr_bind_attr_int rx429_cur, rx429_curclass, "$!pos", rx429_pos
    $P11 = rx429_cur."routine_declarator"()
    repr_get_attr_int $I11, $P11, rx429_curclass, "$!pos"
    lt $I11, 0, rx429_fail1273
    nqp_rxmark rx429_bstack, rxsubrule431_pass1280, -1, 0
  rxsubrule431_pass1280:
    rx429_cstack = rx429_cur."!cursor_capture"($P11, "routine_declarator")
    repr_get_attr_int rx429_pos, $P11, rx429_curclass, "$!pos"
    rx429_cur."!cursor_pass"(rx429_pos, "term:sym<routine_declarator>", 'backtrack'=>1)
    .return (rx429_cur)
  rx429_restart1272:
    repr_get_attr_obj rx429_cstack, rx429_cur, rx429_curclass, "$!cstack"
  rx429_fail1273:
    unless rx429_bstack, rx429_done1271
    pop $I19, rx429_bstack
    if_null rx429_cstack, rx429_cstack_done1276
    unless rx429_cstack, rx429_cstack_done1276
    dec $I19
    set $P11, rx429_cstack[$I19]
  rx429_cstack_done1276:
    pop rx429_rep, rx429_bstack
    pop rx429_pos, rx429_bstack
    pop $I19, rx429_bstack
    lt rx429_pos, -1, rx429_done1271
    lt rx429_pos, 0, rx429_fail1273
    eq $I19, 0, rx429_fail1273
    nqp_islist $I20, rx429_cstack
    unless $I20, rx429_jump1274
    elements $I18, rx429_bstack
    le $I18, 0, rx429_cut1275
    dec $I18
    set $I18, rx429_bstack[$I18]
  rx429_cut1275:
    assign rx429_cstack, $I18
  rx429_jump1274:
    jump $I19
  rx429_done1271:
    rx429_cur."!cursor_fail"()
    .return (rx429_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_88_1349901750.327_caps" :subid("cuid_memo_108_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["routine_declarator"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_88_1349901750.327_nfa" :subid("cuid_memo_109_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "routine_declarator"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<multi_declarator>" :subid("cuid_91_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 891
    .param pmc _lex_param_0 
    .const 'Sub' $P5003 = 'cuid_89_1349901750.327' 
    capture_lex $P5003 
    .const 'Sub' $P5003 = 'cuid_90_1349901750.327' 
    capture_lex $P5003 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx432_tgt
    .local int rx432_pos
    .local int rx432_off
    .local int rx432_eos
    .local int rx432_rep
    .local pmc rx432_cur
    .local pmc rx432_curclass
    .local pmc rx432_bstack
    .local pmc rx432_cstack
    (rx432_cur, rx432_tgt, rx432_pos, rx432_curclass, rx432_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx432_cur
    length rx432_eos, rx432_tgt
    eq $I19, 1, rx432_restart1283
    gt rx432_pos, rx432_eos, rx432_fail1284
    repr_get_attr_int $I11, self, rx432_curclass, "$!from"
    ne $I11, -1, rxscan433_done1290
    goto rxscan433_scan1289
  rxscan433_loop1288:
    inc rx432_pos
    gt rx432_pos, rx432_eos, rx432_fail1284
    repr_bind_attr_int rx432_cur, rx432_curclass, "$!from", rx432_pos
  rxscan433_scan1289:
    nqp_rxmark rx432_bstack, rxscan433_loop1288, rx432_pos, 0
  rxscan433_done1290:
    .const 'Sub' $P5001 = 'cuid_89_1349901750.327' 
    capture_lex $P5001
    repr_bind_attr_int rx432_cur, rx432_curclass, "$!pos", rx432_pos
    $P11 = rx432_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx432_curclass, "$!pos"
    lt $I11, 0, rx432_fail1284
    .const 'Sub' $P5002 = 'cuid_90_1349901750.327' 
    capture_lex $P5002
    repr_bind_attr_int rx432_cur, rx432_curclass, "$!pos", rx432_pos
    $P11 = rx432_cur."before"($P5002)
    repr_get_attr_int $I11, $P11, rx432_curclass, "$!pos"
    ge $I11, 0, rx432_fail1284
    repr_bind_attr_int rx432_cur, rx432_curclass, "$!pos", rx432_pos
    $P11 = rx432_cur."multi_declarator"()
    repr_get_attr_int $I11, $P11, rx432_curclass, "$!pos"
    lt $I11, 0, rx432_fail1284
    nqp_rxmark rx432_bstack, rxsubrule441_pass1320, -1, 0
  rxsubrule441_pass1320:
    rx432_cstack = rx432_cur."!cursor_capture"($P11, "multi_declarator")
    repr_get_attr_int rx432_pos, $P11, rx432_curclass, "$!pos"
    rx432_cur."!cursor_pass"(rx432_pos, "term:sym<multi_declarator>", 'backtrack'=>1)
    .return (rx432_cur)
  rx432_restart1283:
    repr_get_attr_obj rx432_cstack, rx432_cur, rx432_curclass, "$!cstack"
  rx432_fail1284:
    unless rx432_bstack, rx432_done1282
    pop $I19, rx432_bstack
    if_null rx432_cstack, rx432_cstack_done1287
    unless rx432_cstack, rx432_cstack_done1287
    dec $I19
    set $P11, rx432_cstack[$I19]
  rx432_cstack_done1287:
    pop rx432_rep, rx432_bstack
    pop rx432_pos, rx432_bstack
    pop $I19, rx432_bstack
    lt rx432_pos, -1, rx432_done1282
    lt rx432_pos, 0, rx432_fail1284
    eq $I19, 0, rx432_fail1284
    nqp_islist $I20, rx432_cstack
    unless $I20, rx432_jump1285
    elements $I18, rx432_bstack
    le $I18, 0, rx432_cut1286
    dec $I18
    set $I18, rx432_bstack[$I18]
  rx432_cut1286:
    assign rx432_cstack, $I18
  rx432_jump1285:
    jump $I19
  rx432_done1282:
    rx432_cur."!cursor_fail"()
    .return (rx432_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_91_1349901750.327_caps" :subid("cuid_memo_110_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["multi_declarator"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_91_1349901750.327_nfa" :subid("cuid_memo_111_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 109
    push $P5003, $P5005
    box $P5006, 3
    push $P5003, $P5006
    box $P5007, 2
    push $P5003, $P5007
    box $P5008, 112
    push $P5003, $P5008
    box $P5009, 7
    push $P5003, $P5009
    box $P5010, 2
    push $P5003, $P5010
    box $P5011, 111
    push $P5003, $P5011
    box $P5012, 11
    push $P5003, $P5012
    push $P5001, $P5003
    new $P5013, 'ResizablePMCArray'
    box $P5014, 0
    push $P5013, $P5014
    box $P5015, 0
    push $P5013, $P5015
    box $P5016, 0
    push $P5013, $P5016
    push $P5001, $P5013
    new $P5017, 'ResizablePMCArray'
    box $P5018, 2
    push $P5017, $P5018
    box $P5019, 117
    push $P5017, $P5019
    box $P5020, 4
    push $P5017, $P5020
    push $P5001, $P5017
    new $P5021, 'ResizablePMCArray'
    box $P5022, 2
    push $P5021, $P5022
    box $P5023, 108
    push $P5021, $P5023
    box $P5024, 5
    push $P5021, $P5024
    push $P5001, $P5021
    new $P5025, 'ResizablePMCArray'
    box $P5026, 2
    push $P5025, $P5026
    box $P5027, 116
    push $P5025, $P5027
    box $P5028, 6
    push $P5025, $P5028
    push $P5001, $P5025
    new $P5029, 'ResizablePMCArray'
    box $P5030, 2
    push $P5029, $P5030
    box $P5031, 105
    push $P5029, $P5031
    box $P5032, 2
    push $P5029, $P5032
    push $P5001, $P5029
    new $P5033, 'ResizablePMCArray'
    box $P5034, 2
    push $P5033, $P5034
    box $P5035, 114
    push $P5033, $P5035
    box $P5036, 8
    push $P5033, $P5036
    push $P5001, $P5033
    new $P5037, 'ResizablePMCArray'
    box $P5038, 2
    push $P5037, $P5038
    box $P5039, 111
    push $P5037, $P5039
    box $P5040, 9
    push $P5037, $P5040
    push $P5001, $P5037
    new $P5041, 'ResizablePMCArray'
    box $P5042, 2
    push $P5041, $P5042
    box $P5043, 116
    push $P5041, $P5043
    box $P5044, 10
    push $P5041, $P5044
    push $P5001, $P5041
    new $P5045, 'ResizablePMCArray'
    box $P5046, 2
    push $P5045, $P5046
    box $P5047, 111
    push $P5045, $P5047
    box $P5048, 2
    push $P5045, $P5048
    push $P5001, $P5045
    new $P5049, 'ResizablePMCArray'
    box $P5050, 2
    push $P5049, $P5050
    box $P5051, 110
    push $P5049, $P5051
    box $P5052, 12
    push $P5049, $P5052
    push $P5001, $P5049
    new $P5053, 'ResizablePMCArray'
    box $P5054, 2
    push $P5053, $P5054
    box $P5055, 108
    push $P5053, $P5055
    box $P5056, 13
    push $P5053, $P5056
    push $P5001, $P5053
    new $P5057, 'ResizablePMCArray'
    box $P5058, 2
    push $P5057, $P5058
    box $P5059, 121
    push $P5057, $P5059
    box $P5060, 2
    push $P5057, $P5060
    push $P5001, $P5057
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_89_1349901750.327") :anon :lex :outer("cuid_91_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx434_tgt
    .local int rx434_pos
    .local int rx434_off
    .local int rx434_eos
    .local int rx434_rep
    .local pmc rx434_cur
    .local pmc rx434_curclass
    .local pmc rx434_bstack
    .local pmc rx434_cstack
    (rx434_cur, rx434_tgt, rx434_pos, rx434_curclass, rx434_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx434_cur
    length rx434_eos, rx434_tgt
    eq $I19, 1, rx434_restart1293
    gt rx434_pos, rx434_eos, rx434_fail1294
    repr_get_attr_int $I11, self, rx434_curclass, "$!from"
    ne $I11, -1, rxscan435_done1300
    goto rxscan435_scan1299
  rxscan435_loop1298:
    inc rx434_pos
    gt rx434_pos, rx434_eos, rx434_fail1294
    repr_bind_attr_int rx434_cur, rx434_curclass, "$!from", rx434_pos
  rxscan435_scan1299:
    nqp_rxmark rx434_bstack, rxscan435_loop1298, rx434_pos, 0
  rxscan435_done1300:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt436_01302
    nqp_push_label $P11, alt436_11303
    nqp_push_label $P11, alt436_21304
    nqp_rxmark rx434_bstack, alt436_end1301, -1, 0
    rx434_cur."!alt"(rx434_pos, "alt_nfa__17_1349901752.13", $P11)
    goto rx434_fail1294
  alt436_01302:
    add $I11, rx434_pos, 5
    gt $I11, rx434_eos, rx434_fail1294
    substr $S10, rx434_tgt, rx434_pos, 5
    ne $S10, ucs4:"multi", rx434_fail1294
    add rx434_pos, 5
    goto alt436_end1301
  alt436_11303:
    add $I11, rx434_pos, 5
    gt $I11, rx434_eos, rx434_fail1294
    substr $S10, rx434_tgt, rx434_pos, 5
    ne $S10, ucs4:"proto", rx434_fail1294
    add rx434_pos, 5
    goto alt436_end1301
  alt436_21304:
    add $I11, rx434_pos, 4
    gt $I11, rx434_eos, rx434_fail1294
    substr $S10, rx434_tgt, rx434_pos, 4
    ne $S10, ucs4:"only", rx434_fail1294
    add rx434_pos, 4
    goto alt436_end1301
  alt436_end1301:
    rx434_cur."!cursor_pass"(rx434_pos, 'backtrack'=>1)
    .return (rx434_cur)
  rx434_restart1293:
    repr_get_attr_obj rx434_cstack, rx434_cur, rx434_curclass, "$!cstack"
  rx434_fail1294:
    unless rx434_bstack, rx434_done1292
    pop $I19, rx434_bstack
    if_null rx434_cstack, rx434_cstack_done1297
    unless rx434_cstack, rx434_cstack_done1297
    dec $I19
    set $P11, rx434_cstack[$I19]
  rx434_cstack_done1297:
    pop rx434_rep, rx434_bstack
    pop rx434_pos, rx434_bstack
    pop $I19, rx434_bstack
    lt rx434_pos, -1, rx434_done1292
    lt rx434_pos, 0, rx434_fail1294
    eq $I19, 0, rx434_fail1294
    nqp_islist $I20, rx434_cstack
    unless $I20, rx434_jump1295
    elements $I18, rx434_bstack
    le $I18, 0, rx434_cut1296
    dec $I18
    set $I18, rx434_bstack[$I18]
  rx434_cut1296:
    assign rx434_cstack, $I18
  rx434_jump1295:
    jump $I19
  rx434_done1292:
    rx434_cur."!cursor_fail"()
    .return (rx434_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_89_1349901750.327_caps" :subid("cuid_memo_112_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_89_1349901750.327_nfa" :subid("cuid_memo_113_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 109
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    box $P5007, 2
    push $P5003, $P5007
    box $P5008, 112
    push $P5003, $P5008
    box $P5009, 6
    push $P5003, $P5009
    box $P5010, 2
    push $P5003, $P5010
    box $P5011, 111
    push $P5003, $P5011
    box $P5012, 10
    push $P5003, $P5012
    push $P5001, $P5003
    new $P5013, 'ResizablePMCArray'
    box $P5014, 2
    push $P5013, $P5014
    box $P5015, 117
    push $P5013, $P5015
    box $P5016, 3
    push $P5013, $P5016
    push $P5001, $P5013
    new $P5017, 'ResizablePMCArray'
    box $P5018, 2
    push $P5017, $P5018
    box $P5019, 108
    push $P5017, $P5019
    box $P5020, 4
    push $P5017, $P5020
    push $P5001, $P5017
    new $P5021, 'ResizablePMCArray'
    box $P5022, 2
    push $P5021, $P5022
    box $P5023, 116
    push $P5021, $P5023
    box $P5024, 5
    push $P5021, $P5024
    push $P5001, $P5021
    new $P5025, 'ResizablePMCArray'
    box $P5026, 2
    push $P5025, $P5026
    box $P5027, 105
    push $P5025, $P5027
    box $P5028, 0
    push $P5025, $P5028
    push $P5001, $P5025
    new $P5029, 'ResizablePMCArray'
    box $P5030, 2
    push $P5029, $P5030
    box $P5031, 114
    push $P5029, $P5031
    box $P5032, 7
    push $P5029, $P5032
    push $P5001, $P5029
    new $P5033, 'ResizablePMCArray'
    box $P5034, 2
    push $P5033, $P5034
    box $P5035, 111
    push $P5033, $P5035
    box $P5036, 8
    push $P5033, $P5036
    push $P5001, $P5033
    new $P5037, 'ResizablePMCArray'
    box $P5038, 2
    push $P5037, $P5038
    box $P5039, 116
    push $P5037, $P5039
    box $P5040, 9
    push $P5037, $P5040
    push $P5001, $P5037
    new $P5041, 'ResizablePMCArray'
    box $P5042, 2
    push $P5041, $P5042
    box $P5043, 111
    push $P5041, $P5043
    box $P5044, 0
    push $P5041, $P5044
    push $P5001, $P5041
    new $P5045, 'ResizablePMCArray'
    box $P5046, 2
    push $P5045, $P5046
    box $P5047, 110
    push $P5045, $P5047
    box $P5048, 11
    push $P5045, $P5048
    push $P5001, $P5045
    new $P5049, 'ResizablePMCArray'
    box $P5050, 2
    push $P5049, $P5050
    box $P5051, 108
    push $P5049, $P5051
    box $P5052, 12
    push $P5049, $P5052
    push $P5001, $P5049
    new $P5053, 'ResizablePMCArray'
    box $P5054, 2
    push $P5053, $P5054
    box $P5055, 121
    push $P5053, $P5055
    box $P5056, 0
    push $P5053, $P5056
    push $P5001, $P5053
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_89_1349901750.327_alt_nfa__17_1349901752.13" :subid("cuid_memo_114_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 109
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 117
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 2
    push $P5012, $P5013
    box $P5014, 108
    push $P5012, $P5014
    box $P5015, 4
    push $P5012, $P5015
    push $P5002, $P5012
    new $P5016, 'ResizablePMCArray'
    box $P5017, 2
    push $P5016, $P5017
    box $P5018, 116
    push $P5016, $P5018
    box $P5019, 5
    push $P5016, $P5019
    push $P5002, $P5016
    new $P5020, 'ResizablePMCArray'
    box $P5021, 2
    push $P5020, $P5021
    box $P5022, 105
    push $P5020, $P5022
    box $P5023, 0
    push $P5020, $P5023
    push $P5002, $P5020
    push $P5001, $P5002
    new $P5024, 'ResizablePMCArray'
    new $P5025, 'ResizablePMCArray'
    push $P5024, $P5025
    new $P5026, 'ResizablePMCArray'
    box $P5027, 2
    push $P5026, $P5027
    box $P5028, 112
    push $P5026, $P5028
    box $P5029, 2
    push $P5026, $P5029
    push $P5024, $P5026
    new $P5030, 'ResizablePMCArray'
    box $P5031, 2
    push $P5030, $P5031
    box $P5032, 114
    push $P5030, $P5032
    box $P5033, 3
    push $P5030, $P5033
    push $P5024, $P5030
    new $P5034, 'ResizablePMCArray'
    box $P5035, 2
    push $P5034, $P5035
    box $P5036, 111
    push $P5034, $P5036
    box $P5037, 4
    push $P5034, $P5037
    push $P5024, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 2
    push $P5038, $P5039
    box $P5040, 116
    push $P5038, $P5040
    box $P5041, 5
    push $P5038, $P5041
    push $P5024, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 111
    push $P5042, $P5044
    box $P5045, 0
    push $P5042, $P5045
    push $P5024, $P5042
    push $P5001, $P5024
    new $P5046, 'ResizablePMCArray'
    new $P5047, 'ResizablePMCArray'
    push $P5046, $P5047
    new $P5048, 'ResizablePMCArray'
    box $P5049, 2
    push $P5048, $P5049
    box $P5050, 111
    push $P5048, $P5050
    box $P5051, 2
    push $P5048, $P5051
    push $P5046, $P5048
    new $P5052, 'ResizablePMCArray'
    box $P5053, 2
    push $P5052, $P5053
    box $P5054, 110
    push $P5052, $P5054
    box $P5055, 3
    push $P5052, $P5055
    push $P5046, $P5052
    new $P5056, 'ResizablePMCArray'
    box $P5057, 2
    push $P5056, $P5057
    box $P5058, 108
    push $P5056, $P5058
    box $P5059, 4
    push $P5056, $P5059
    push $P5046, $P5056
    new $P5060, 'ResizablePMCArray'
    box $P5061, 2
    push $P5060, $P5061
    box $P5062, 121
    push $P5060, $P5062
    box $P5063, 0
    push $P5060, $P5063
    push $P5046, $P5060
    push $P5001, $P5046
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_90_1349901750.327") :anon :lex :outer("cuid_91_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx437_tgt
    .local int rx437_pos
    .local int rx437_off
    .local int rx437_eos
    .local int rx437_rep
    .local pmc rx437_cur
    .local pmc rx437_curclass
    .local pmc rx437_bstack
    .local pmc rx437_cstack
    (rx437_cur, rx437_tgt, rx437_pos, rx437_curclass, rx437_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx437_cur
    length rx437_eos, rx437_tgt
    eq $I19, 1, rx437_restart1307
    gt rx437_pos, rx437_eos, rx437_fail1308
    repr_get_attr_int $I11, self, rx437_curclass, "$!from"
    ne $I11, -1, rxscan438_done1314
    goto rxscan438_scan1313
  rxscan438_loop1312:
    inc rx437_pos
    gt rx437_pos, rx437_eos, rx437_fail1308
    repr_bind_attr_int rx437_cur, rx437_curclass, "$!from", rx437_pos
  rxscan438_scan1313:
    nqp_rxmark rx437_bstack, rxscan438_loop1312, rx437_pos, 0
  rxscan438_done1314:
    add $I11, rx437_pos, 5
    gt $I11, rx437_eos, rx437_fail1308
    substr $S10, rx437_tgt, rx437_pos, 5
    ne $S10, ucs4:"proto", rx437_fail1308
    add rx437_pos, 5
    repr_bind_attr_int rx437_cur, rx437_curclass, "$!pos", rx437_pos
    $P11 = rx437_cur."ws"()
    repr_get_attr_int $I11, $P11, rx437_curclass, "$!pos"
    lt $I11, 0, rx437_fail1308
    repr_get_attr_int rx437_pos, $P11, rx437_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt440_01317
    nqp_push_label $P11, alt440_11318
    nqp_push_label $P11, alt440_21319
    nqp_rxmark rx437_bstack, alt440_end1316, -1, 0
    rx437_cur."!alt"(rx437_pos, "alt_nfa__18_1349901752.14", $P11)
    goto rx437_fail1308
  alt440_01317:
    add $I11, rx437_pos, 5
    gt $I11, rx437_eos, rx437_fail1308
    substr $S10, rx437_tgt, rx437_pos, 5
    ne $S10, ucs4:"regex", rx437_fail1308
    add rx437_pos, 5
    goto alt440_end1316
  alt440_11318:
    add $I11, rx437_pos, 5
    gt $I11, rx437_eos, rx437_fail1308
    substr $S10, rx437_tgt, rx437_pos, 5
    ne $S10, ucs4:"token", rx437_fail1308
    add rx437_pos, 5
    goto alt440_end1316
  alt440_21319:
    add $I11, rx437_pos, 4
    gt $I11, rx437_eos, rx437_fail1308
    substr $S10, rx437_tgt, rx437_pos, 4
    ne $S10, ucs4:"rule", rx437_fail1308
    add rx437_pos, 4
    goto alt440_end1316
  alt440_end1316:
    nqp_rxcommit rx437_bstack, alt440_end1316
    rx437_cur."!cursor_pass"(rx437_pos, 'backtrack'=>1)
    .return (rx437_cur)
  rx437_restart1307:
    repr_get_attr_obj rx437_cstack, rx437_cur, rx437_curclass, "$!cstack"
  rx437_fail1308:
    unless rx437_bstack, rx437_done1306
    pop $I19, rx437_bstack
    if_null rx437_cstack, rx437_cstack_done1311
    unless rx437_cstack, rx437_cstack_done1311
    dec $I19
    set $P11, rx437_cstack[$I19]
  rx437_cstack_done1311:
    pop rx437_rep, rx437_bstack
    pop rx437_pos, rx437_bstack
    pop $I19, rx437_bstack
    lt rx437_pos, -1, rx437_done1306
    lt rx437_pos, 0, rx437_fail1308
    eq $I19, 0, rx437_fail1308
    nqp_islist $I20, rx437_cstack
    unless $I20, rx437_jump1309
    elements $I18, rx437_bstack
    le $I18, 0, rx437_cut1310
    dec $I18
    set $I18, rx437_bstack[$I18]
  rx437_cut1310:
    assign rx437_cstack, $I18
  rx437_jump1309:
    jump $I19
  rx437_done1306:
    rx437_cur."!cursor_fail"()
    .return (rx437_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_90_1349901750.327_caps" :subid("cuid_memo_115_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_90_1349901750.327_nfa" :subid("cuid_memo_116_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 112
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 114
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 111
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 116
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 111
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 8
    push $P5023, $P5024
    box $P5025, "ws"
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 2
    push $P5027, $P5028
    box $P5029, 114
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    box $P5031, 2
    push $P5027, $P5031
    box $P5032, 116
    push $P5027, $P5032
    box $P5033, 12
    push $P5027, $P5033
    box $P5034, 2
    push $P5027, $P5034
    box $P5035, 114
    push $P5027, $P5035
    box $P5036, 16
    push $P5027, $P5036
    push $P5001, $P5027
    new $P5037, 'ResizablePMCArray'
    box $P5038, 2
    push $P5037, $P5038
    box $P5039, 101
    push $P5037, $P5039
    box $P5040, 9
    push $P5037, $P5040
    push $P5001, $P5037
    new $P5041, 'ResizablePMCArray'
    box $P5042, 2
    push $P5041, $P5042
    box $P5043, 103
    push $P5041, $P5043
    box $P5044, 10
    push $P5041, $P5044
    push $P5001, $P5041
    new $P5045, 'ResizablePMCArray'
    box $P5046, 2
    push $P5045, $P5046
    box $P5047, 101
    push $P5045, $P5047
    box $P5048, 11
    push $P5045, $P5048
    push $P5001, $P5045
    new $P5049, 'ResizablePMCArray'
    box $P5050, 2
    push $P5049, $P5050
    box $P5051, 120
    push $P5049, $P5051
    box $P5052, 0
    push $P5049, $P5052
    push $P5001, $P5049
    new $P5053, 'ResizablePMCArray'
    box $P5054, 2
    push $P5053, $P5054
    box $P5055, 111
    push $P5053, $P5055
    box $P5056, 13
    push $P5053, $P5056
    push $P5001, $P5053
    new $P5057, 'ResizablePMCArray'
    box $P5058, 2
    push $P5057, $P5058
    box $P5059, 107
    push $P5057, $P5059
    box $P5060, 14
    push $P5057, $P5060
    push $P5001, $P5057
    new $P5061, 'ResizablePMCArray'
    box $P5062, 2
    push $P5061, $P5062
    box $P5063, 101
    push $P5061, $P5063
    box $P5064, 15
    push $P5061, $P5064
    push $P5001, $P5061
    new $P5065, 'ResizablePMCArray'
    box $P5066, 2
    push $P5065, $P5066
    box $P5067, 110
    push $P5065, $P5067
    box $P5068, 0
    push $P5065, $P5068
    push $P5001, $P5065
    new $P5069, 'ResizablePMCArray'
    box $P5070, 2
    push $P5069, $P5070
    box $P5071, 117
    push $P5069, $P5071
    box $P5072, 17
    push $P5069, $P5072
    push $P5001, $P5069
    new $P5073, 'ResizablePMCArray'
    box $P5074, 2
    push $P5073, $P5074
    box $P5075, 108
    push $P5073, $P5075
    box $P5076, 18
    push $P5073, $P5076
    push $P5001, $P5073
    new $P5077, 'ResizablePMCArray'
    box $P5078, 2
    push $P5077, $P5078
    box $P5079, 101
    push $P5077, $P5079
    box $P5080, 0
    push $P5077, $P5080
    push $P5001, $P5077
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_90_1349901750.327_alt_nfa__18_1349901752.14" :subid("cuid_memo_117_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 114
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 101
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 2
    push $P5012, $P5013
    box $P5014, 103
    push $P5012, $P5014
    box $P5015, 4
    push $P5012, $P5015
    push $P5002, $P5012
    new $P5016, 'ResizablePMCArray'
    box $P5017, 2
    push $P5016, $P5017
    box $P5018, 101
    push $P5016, $P5018
    box $P5019, 5
    push $P5016, $P5019
    push $P5002, $P5016
    new $P5020, 'ResizablePMCArray'
    box $P5021, 2
    push $P5020, $P5021
    box $P5022, 120
    push $P5020, $P5022
    box $P5023, 0
    push $P5020, $P5023
    push $P5002, $P5020
    push $P5001, $P5002
    new $P5024, 'ResizablePMCArray'
    new $P5025, 'ResizablePMCArray'
    push $P5024, $P5025
    new $P5026, 'ResizablePMCArray'
    box $P5027, 2
    push $P5026, $P5027
    box $P5028, 116
    push $P5026, $P5028
    box $P5029, 2
    push $P5026, $P5029
    push $P5024, $P5026
    new $P5030, 'ResizablePMCArray'
    box $P5031, 2
    push $P5030, $P5031
    box $P5032, 111
    push $P5030, $P5032
    box $P5033, 3
    push $P5030, $P5033
    push $P5024, $P5030
    new $P5034, 'ResizablePMCArray'
    box $P5035, 2
    push $P5034, $P5035
    box $P5036, 107
    push $P5034, $P5036
    box $P5037, 4
    push $P5034, $P5037
    push $P5024, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 2
    push $P5038, $P5039
    box $P5040, 101
    push $P5038, $P5040
    box $P5041, 5
    push $P5038, $P5041
    push $P5024, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 110
    push $P5042, $P5044
    box $P5045, 0
    push $P5042, $P5045
    push $P5024, $P5042
    push $P5001, $P5024
    new $P5046, 'ResizablePMCArray'
    new $P5047, 'ResizablePMCArray'
    push $P5046, $P5047
    new $P5048, 'ResizablePMCArray'
    box $P5049, 2
    push $P5048, $P5049
    box $P5050, 114
    push $P5048, $P5050
    box $P5051, 2
    push $P5048, $P5051
    push $P5046, $P5048
    new $P5052, 'ResizablePMCArray'
    box $P5053, 2
    push $P5052, $P5053
    box $P5054, 117
    push $P5052, $P5054
    box $P5055, 3
    push $P5052, $P5055
    push $P5046, $P5052
    new $P5056, 'ResizablePMCArray'
    box $P5057, 2
    push $P5056, $P5057
    box $P5058, 108
    push $P5056, $P5058
    box $P5059, 4
    push $P5056, $P5059
    push $P5046, $P5056
    new $P5060, 'ResizablePMCArray'
    box $P5061, 2
    push $P5060, $P5061
    box $P5062, 101
    push $P5060, $P5062
    box $P5063, 0
    push $P5060, $P5063
    push $P5046, $P5060
    push $P5001, $P5046
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<regex_declarator>" :subid("cuid_92_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 896
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx442_tgt
    .local int rx442_pos
    .local int rx442_off
    .local int rx442_eos
    .local int rx442_rep
    .local pmc rx442_cur
    .local pmc rx442_curclass
    .local pmc rx442_bstack
    .local pmc rx442_cstack
    (rx442_cur, rx442_tgt, rx442_pos, rx442_curclass, rx442_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx442_cur
    length rx442_eos, rx442_tgt
    eq $I19, 1, rx442_restart1323
    gt rx442_pos, rx442_eos, rx442_fail1324
    repr_get_attr_int $I11, self, rx442_curclass, "$!from"
    ne $I11, -1, rxscan443_done1330
    goto rxscan443_scan1329
  rxscan443_loop1328:
    inc rx442_pos
    gt rx442_pos, rx442_eos, rx442_fail1324
    repr_bind_attr_int rx442_cur, rx442_curclass, "$!from", rx442_pos
  rxscan443_scan1329:
    nqp_rxmark rx442_bstack, rxscan443_loop1328, rx442_pos, 0
  rxscan443_done1330:
    repr_bind_attr_int rx442_cur, rx442_curclass, "$!pos", rx442_pos
    $P11 = rx442_cur."regex_declarator"()
    repr_get_attr_int $I11, $P11, rx442_curclass, "$!pos"
    lt $I11, 0, rx442_fail1324
    nqp_rxmark rx442_bstack, rxsubrule444_pass1331, -1, 0
  rxsubrule444_pass1331:
    rx442_cstack = rx442_cur."!cursor_capture"($P11, "regex_declarator")
    repr_get_attr_int rx442_pos, $P11, rx442_curclass, "$!pos"
    rx442_cur."!cursor_pass"(rx442_pos, "term:sym<regex_declarator>", 'backtrack'=>1)
    .return (rx442_cur)
  rx442_restart1323:
    repr_get_attr_obj rx442_cstack, rx442_cur, rx442_curclass, "$!cstack"
  rx442_fail1324:
    unless rx442_bstack, rx442_done1322
    pop $I19, rx442_bstack
    if_null rx442_cstack, rx442_cstack_done1327
    unless rx442_cstack, rx442_cstack_done1327
    dec $I19
    set $P11, rx442_cstack[$I19]
  rx442_cstack_done1327:
    pop rx442_rep, rx442_bstack
    pop rx442_pos, rx442_bstack
    pop $I19, rx442_bstack
    lt rx442_pos, -1, rx442_done1322
    lt rx442_pos, 0, rx442_fail1324
    eq $I19, 0, rx442_fail1324
    nqp_islist $I20, rx442_cstack
    unless $I20, rx442_jump1325
    elements $I18, rx442_bstack
    le $I18, 0, rx442_cut1326
    dec $I18
    set $I18, rx442_bstack[$I18]
  rx442_cut1326:
    assign rx442_cstack, $I18
  rx442_jump1325:
    jump $I19
  rx442_done1322:
    rx442_cur."!cursor_fail"()
    .return (rx442_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_92_1349901750.327_caps" :subid("cuid_memo_118_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["regex_declarator"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_92_1349901750.327_nfa" :subid("cuid_memo_119_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "regex_declarator"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<statement_prefix>" :subid("cuid_93_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 897
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx445_tgt
    .local int rx445_pos
    .local int rx445_off
    .local int rx445_eos
    .local int rx445_rep
    .local pmc rx445_cur
    .local pmc rx445_curclass
    .local pmc rx445_bstack
    .local pmc rx445_cstack
    (rx445_cur, rx445_tgt, rx445_pos, rx445_curclass, rx445_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx445_cur
    length rx445_eos, rx445_tgt
    eq $I19, 1, rx445_restart1334
    gt rx445_pos, rx445_eos, rx445_fail1335
    repr_get_attr_int $I11, self, rx445_curclass, "$!from"
    ne $I11, -1, rxscan446_done1341
    goto rxscan446_scan1340
  rxscan446_loop1339:
    inc rx445_pos
    gt rx445_pos, rx445_eos, rx445_fail1335
    repr_bind_attr_int rx445_cur, rx445_curclass, "$!from", rx445_pos
  rxscan446_scan1340:
    nqp_rxmark rx445_bstack, rxscan446_loop1339, rx445_pos, 0
  rxscan446_done1341:
    repr_bind_attr_int rx445_cur, rx445_curclass, "$!pos", rx445_pos
    $P11 = rx445_cur."statement_prefix"()
    repr_get_attr_int $I11, $P11, rx445_curclass, "$!pos"
    lt $I11, 0, rx445_fail1335
    nqp_rxmark rx445_bstack, rxsubrule447_pass1342, -1, 0
  rxsubrule447_pass1342:
    rx445_cstack = rx445_cur."!cursor_capture"($P11, "statement_prefix")
    repr_get_attr_int rx445_pos, $P11, rx445_curclass, "$!pos"
    rx445_cur."!cursor_pass"(rx445_pos, "term:sym<statement_prefix>", 'backtrack'=>1)
    .return (rx445_cur)
  rx445_restart1334:
    repr_get_attr_obj rx445_cstack, rx445_cur, rx445_curclass, "$!cstack"
  rx445_fail1335:
    unless rx445_bstack, rx445_done1333
    pop $I19, rx445_bstack
    if_null rx445_cstack, rx445_cstack_done1338
    unless rx445_cstack, rx445_cstack_done1338
    dec $I19
    set $P11, rx445_cstack[$I19]
  rx445_cstack_done1338:
    pop rx445_rep, rx445_bstack
    pop rx445_pos, rx445_bstack
    pop $I19, rx445_bstack
    lt rx445_pos, -1, rx445_done1333
    lt rx445_pos, 0, rx445_fail1335
    eq $I19, 0, rx445_fail1335
    nqp_islist $I20, rx445_cstack
    unless $I20, rx445_jump1336
    elements $I18, rx445_bstack
    le $I18, 0, rx445_cut1337
    dec $I18
    set $I18, rx445_bstack[$I18]
  rx445_cut1337:
    assign rx445_cstack, $I18
  rx445_jump1336:
    jump $I19
  rx445_done1333:
    rx445_cur."!cursor_fail"()
    .return (rx445_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_93_1349901750.327_caps" :subid("cuid_memo_120_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["statement_prefix"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_93_1349901750.327_nfa" :subid("cuid_memo_121_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "statement_prefix"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<lambda>" :subid("cuid_94_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 898
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx448_tgt
    .local int rx448_pos
    .local int rx448_off
    .local int rx448_eos
    .local int rx448_rep
    .local pmc rx448_cur
    .local pmc rx448_curclass
    .local pmc rx448_bstack
    .local pmc rx448_cstack
    (rx448_cur, rx448_tgt, rx448_pos, rx448_curclass, rx448_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx448_cur
    length rx448_eos, rx448_tgt
    eq $I19, 1, rx448_restart1345
    gt rx448_pos, rx448_eos, rx448_fail1346
    repr_get_attr_int $I11, self, rx448_curclass, "$!from"
    ne $I11, -1, rxscan449_done1352
    goto rxscan449_scan1351
  rxscan449_loop1350:
    inc rx448_pos
    gt rx448_pos, rx448_eos, rx448_fail1346
    repr_bind_attr_int rx448_cur, rx448_curclass, "$!from", rx448_pos
  rxscan449_scan1351:
    nqp_rxmark rx448_bstack, rxscan449_loop1350, rx448_pos, 0
  rxscan449_done1352:
    repr_bind_attr_int rx448_cur, rx448_curclass, "$!pos", rx448_pos
    $P11 = rx448_cur."lambda"()
    repr_get_attr_int $I11, $P11, rx448_curclass, "$!pos"
    lt $I11, 0, rx448_fail1346
    repr_bind_attr_int rx448_cur, rx448_curclass, "$!pos", rx448_pos
    $P11 = rx448_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx448_curclass, "$!pos"
    lt $I11, 0, rx448_fail1346
    nqp_rxmark rx448_bstack, rxsubrule450_pass1353, -1, 0
  rxsubrule450_pass1353:
    rx448_cstack = rx448_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx448_pos, $P11, rx448_curclass, "$!pos"
    rx448_cur."!cursor_pass"(rx448_pos, "term:sym<lambda>", 'backtrack'=>1)
    .return (rx448_cur)
  rx448_restart1345:
    repr_get_attr_obj rx448_cstack, rx448_cur, rx448_curclass, "$!cstack"
  rx448_fail1346:
    unless rx448_bstack, rx448_done1344
    pop $I19, rx448_bstack
    if_null rx448_cstack, rx448_cstack_done1349
    unless rx448_cstack, rx448_cstack_done1349
    dec $I19
    set $P11, rx448_cstack[$I19]
  rx448_cstack_done1349:
    pop rx448_rep, rx448_bstack
    pop rx448_pos, rx448_bstack
    pop $I19, rx448_bstack
    lt rx448_pos, -1, rx448_done1344
    lt rx448_pos, 0, rx448_fail1346
    eq $I19, 0, rx448_fail1346
    nqp_islist $I20, rx448_cstack
    unless $I20, rx448_jump1347
    elements $I18, rx448_bstack
    le $I18, 0, rx448_cut1348
    dec $I18
    set $I18, rx448_bstack[$I18]
  rx448_cut1348:
    assign rx448_cstack, $I18
  rx448_jump1347:
    jump $I19
  rx448_done1344:
    rx448_cur."!cursor_fail"()
    .return (rx448_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_94_1349901750.327_caps" :subid("cuid_memo_122_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["pblock"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_94_1349901750.327_nfa" :subid("cuid_memo_123_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "lambda"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "fatarrow" :subid("cuid_95_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 900
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx451_tgt
    .local int rx451_pos
    .local int rx451_off
    .local int rx451_eos
    .local int rx451_rep
    .local pmc rx451_cur
    .local pmc rx451_curclass
    .local pmc rx451_bstack
    .local pmc rx451_cstack
    (rx451_cur, rx451_tgt, rx451_pos, rx451_curclass, rx451_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx451_cur
    length rx451_eos, rx451_tgt
    eq $I19, 1, rx451_restart1356
    gt rx451_pos, rx451_eos, rx451_fail1357
    repr_get_attr_int $I11, self, rx451_curclass, "$!from"
    ne $I11, -1, rxscan452_done1363
    goto rxscan452_scan1362
  rxscan452_loop1361:
    inc rx451_pos
    gt rx451_pos, rx451_eos, rx451_fail1357
    repr_bind_attr_int rx451_cur, rx451_curclass, "$!from", rx451_pos
  rxscan452_scan1362:
    nqp_rxmark rx451_bstack, rxscan452_loop1361, rx451_pos, 0
  rxscan452_done1363:
    repr_bind_attr_int rx451_cur, rx451_curclass, "$!pos", rx451_pos
    $P11 = rx451_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx451_curclass, "$!pos"
    lt $I11, 0, rx451_fail1357
    nqp_rxmark rx451_bstack, rxsubrule453_pass1364, -1, 0
  rxsubrule453_pass1364:
    rx451_cstack = rx451_cur."!cursor_capture"($P11, "key")
    repr_get_attr_int rx451_pos, $P11, rx451_curclass, "$!pos"
    nqp_rxmark rx451_bstack, rxquantr454_done1366, rx451_pos, 0
  rxquantr454_loop1365:
    ge rx451_pos, rx451_eos, rx451_fail1357
    substr $S11, rx451_tgt, rx451_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx451_fail1357
    inc rx451_pos
    nqp_rxpeek $I19, rx451_bstack, rxquantr454_done1366
    inc $I19
    inc $I19
    set rx451_rep, rx451_bstack[$I19]
    nqp_rxcommit rx451_bstack, rxquantr454_done1366
    inc rx451_rep
    nqp_rxmark rx451_bstack, rxquantr454_done1366, rx451_pos, rx451_rep
    goto rxquantr454_loop1365
  rxquantr454_done1366:
    add $I11, rx451_pos, 2
    gt $I11, rx451_eos, rx451_fail1357
    substr $S10, rx451_tgt, rx451_pos, 2
    ne $S10, ucs4:"=>", rx451_fail1357
    add rx451_pos, 2
    repr_bind_attr_int rx451_cur, rx451_curclass, "$!pos", rx451_pos
    $P11 = rx451_cur."ws"()
    repr_get_attr_int $I11, $P11, rx451_curclass, "$!pos"
    lt $I11, 0, rx451_fail1357
    repr_get_attr_int rx451_pos, $P11, rx451_curclass, "$!pos"
    repr_bind_attr_int rx451_cur, rx451_curclass, "$!pos", rx451_pos
    $P11 = rx451_cur."EXPR"("i=")
    repr_get_attr_int $I11, $P11, rx451_curclass, "$!pos"
    lt $I11, 0, rx451_fail1357
    nqp_rxmark rx451_bstack, rxsubrule456_pass1368, -1, 0
  rxsubrule456_pass1368:
    rx451_cstack = rx451_cur."!cursor_capture"($P11, "val")
    repr_get_attr_int rx451_pos, $P11, rx451_curclass, "$!pos"
    rx451_cur."!cursor_pass"(rx451_pos, "fatarrow", 'backtrack'=>1)
    .return (rx451_cur)
  rx451_restart1356:
    repr_get_attr_obj rx451_cstack, rx451_cur, rx451_curclass, "$!cstack"
  rx451_fail1357:
    unless rx451_bstack, rx451_done1355
    pop $I19, rx451_bstack
    if_null rx451_cstack, rx451_cstack_done1360
    unless rx451_cstack, rx451_cstack_done1360
    dec $I19
    set $P11, rx451_cstack[$I19]
  rx451_cstack_done1360:
    pop rx451_rep, rx451_bstack
    pop rx451_pos, rx451_bstack
    pop $I19, rx451_bstack
    lt rx451_pos, -1, rx451_done1355
    lt rx451_pos, 0, rx451_fail1357
    eq $I19, 0, rx451_fail1357
    nqp_islist $I20, rx451_cstack
    unless $I20, rx451_jump1358
    elements $I18, rx451_bstack
    le $I18, 0, rx451_cut1359
    dec $I18
    set $I18, rx451_bstack[$I18]
  rx451_cut1359:
    assign rx451_cstack, $I18
  rx451_jump1358:
    jump $I19
  rx451_done1355:
    rx451_cur."!cursor_fail"()
    .return (rx451_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_95_1349901750.327_caps" :subid("cuid_memo_124_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["key"], $P5002
    box $P5003, 0
    set $P5001["val"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_95_1349901750.327_nfa" :subid("cuid_memo_125_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "identifier"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 6
    push $P5007, $P5008
    box $P5009, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5007, $P5009
    box $P5010, 2
    push $P5007, $P5010
    box $P5011, 1
    push $P5007, $P5011
    box $P5012, 0
    push $P5007, $P5012
    box $P5013, 3
    push $P5007, $P5013
    push $P5001, $P5007
    new $P5014, 'ResizablePMCArray'
    box $P5015, 2
    push $P5014, $P5015
    box $P5016, 61
    push $P5014, $P5016
    box $P5017, 4
    push $P5014, $P5017
    push $P5001, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 2
    push $P5018, $P5019
    box $P5020, 62
    push $P5018, $P5020
    box $P5021, 5
    push $P5018, $P5021
    push $P5001, $P5018
    new $P5022, 'ResizablePMCArray'
    box $P5023, 8
    push $P5022, $P5023
    box $P5024, "ws"
    push $P5022, $P5024
    box $P5025, 6
    push $P5022, $P5025
    push $P5001, $P5022
    new $P5026, 'ResizablePMCArray'
    box $P5027, 8
    push $P5026, $P5027
    box $P5028, "EXPR"
    push $P5026, $P5028
    box $P5029, 0
    push $P5026, $P5029
    push $P5001, $P5026
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "colonpair" :subid("cuid_96_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 904
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx457_tgt
    .local int rx457_pos
    .local int rx457_off
    .local int rx457_eos
    .local int rx457_rep
    .local pmc rx457_cur
    .local pmc rx457_curclass
    .local pmc rx457_bstack
    .local pmc rx457_cstack
    (rx457_cur, rx457_tgt, rx457_pos, rx457_curclass, rx457_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx457_cur
    length rx457_eos, rx457_tgt
    eq $I19, 1, rx457_restart1371
    gt rx457_pos, rx457_eos, rx457_fail1372
    repr_get_attr_int $I11, self, rx457_curclass, "$!from"
    ne $I11, -1, rxscan458_done1378
    goto rxscan458_scan1377
  rxscan458_loop1376:
    inc rx457_pos
    gt rx457_pos, rx457_eos, rx457_fail1372
    repr_bind_attr_int rx457_cur, rx457_curclass, "$!from", rx457_pos
  rxscan458_scan1377:
    nqp_rxmark rx457_bstack, rxscan458_loop1376, rx457_pos, 0
  rxscan458_done1378:
    add $I11, rx457_pos, 1
    gt $I11, rx457_eos, rx457_fail1372
    substr $S10, rx457_tgt, rx457_pos, 1
    ne $S10, ucs4:":", rx457_fail1372
    add rx457_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt459_01380
    nqp_push_label $P11, alt459_11384
    nqp_push_label $P11, alt459_21390
    nqp_push_label $P11, alt459_31392
    nqp_rxmark rx457_bstack, alt459_end1379, -1, 0
    rx457_cur."!alt"(rx457_pos, "alt_nfa__19_1349901752.182", $P11)
    goto rx457_fail1372
  alt459_01380:
    nqp_rxmark rx457_bstack, rxcap460_fail1382, rx457_pos, 0
    add $I11, rx457_pos, 1
    gt $I11, rx457_eos, rx457_fail1372
    substr $S10, rx457_tgt, rx457_pos, 1
    ne $S10, ucs4:"!", rx457_fail1372
    add rx457_pos, 1
    nqp_rxpeek $I19, rx457_bstack, rxcap460_fail1382
    inc $I19
    set $I11, rx457_bstack[$I19]
    repr_bind_attr_int rx457_cur, rx457_curclass, "$!pos", rx457_pos
    $P11 = rx457_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx457_pos)
    rx457_cstack = rx457_cur."!cursor_capture"($P11, "not")
    goto rxcap460_done1381
  rxcap460_fail1382:
    goto rx457_fail1372
  rxcap460_done1381:
    repr_bind_attr_int rx457_cur, rx457_curclass, "$!pos", rx457_pos
    $P11 = rx457_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx457_curclass, "$!pos"
    lt $I11, 0, rx457_fail1372
    nqp_rxmark rx457_bstack, rxsubrule461_pass1383, -1, 0
  rxsubrule461_pass1383:
    rx457_cstack = rx457_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx457_pos, $P11, rx457_curclass, "$!pos"
    goto alt459_end1379
  alt459_11384:
    repr_bind_attr_int rx457_cur, rx457_curclass, "$!pos", rx457_pos
    $P11 = rx457_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx457_curclass, "$!pos"
    lt $I11, 0, rx457_fail1372
    nqp_rxmark rx457_bstack, rxsubrule462_pass1385, -1, 0
  rxsubrule462_pass1385:
    rx457_cstack = rx457_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx457_pos, $P11, rx457_curclass, "$!pos"
    nqp_rxmark rx457_bstack, rxquantr463_done1387, rx457_pos, 0
  rxquantr463_loop1386:
    repr_bind_attr_int rx457_cur, rx457_curclass, "$!pos", rx457_pos
    $P11 = rx457_cur."circumfix"()
    repr_get_attr_int $I11, $P11, rx457_curclass, "$!pos"
    lt $I11, 0, rx457_fail1372
    goto rxsubrule464_pass1388
  rxsubrule464_back1389:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx457_curclass, "$!pos"
    lt $I11, 0, rx457_fail1372
  rxsubrule464_pass1388:
    rx457_cstack = rx457_cur."!cursor_capture"($P11, "circumfix")
    set_addr $I11, rxsubrule464_back1389
    push rx457_bstack, $I11
    push rx457_bstack, 0
    push rx457_bstack, rx457_pos
    elements $I11, rx457_cstack
    push rx457_bstack, $I11
    repr_get_attr_int rx457_pos, $P11, rx457_curclass, "$!pos"
    nqp_rxpeek $I19, rx457_bstack, rxquantr463_done1387
    inc $I19
    inc $I19
    set rx457_rep, rx457_bstack[$I19]
    nqp_rxcommit rx457_bstack, rxquantr463_done1387
    inc rx457_rep
  rxquantr463_done1387:
    goto alt459_end1379
  alt459_21390:
    repr_bind_attr_int rx457_cur, rx457_curclass, "$!pos", rx457_pos
    $P11 = rx457_cur."circumfix"()
    repr_get_attr_int $I11, $P11, rx457_curclass, "$!pos"
    lt $I11, 0, rx457_fail1372
    nqp_rxmark rx457_bstack, rxsubrule465_pass1391, -1, 0
  rxsubrule465_pass1391:
    rx457_cstack = rx457_cur."!cursor_capture"($P11, "circumfix")
    repr_get_attr_int rx457_pos, $P11, rx457_curclass, "$!pos"
    goto alt459_end1379
  alt459_31392:
    repr_bind_attr_int rx457_cur, rx457_curclass, "$!pos", rx457_pos
    $P11 = rx457_cur."variable"()
    repr_get_attr_int $I11, $P11, rx457_curclass, "$!pos"
    lt $I11, 0, rx457_fail1372
    nqp_rxmark rx457_bstack, rxsubrule466_pass1393, -1, 0
  rxsubrule466_pass1393:
    rx457_cstack = rx457_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx457_pos, $P11, rx457_curclass, "$!pos"
    goto alt459_end1379
  alt459_end1379:
    nqp_rxcommit rx457_bstack, alt459_end1379
    rx457_cur."!cursor_pass"(rx457_pos, "colonpair", 'backtrack'=>1)
    .return (rx457_cur)
  rx457_restart1371:
    repr_get_attr_obj rx457_cstack, rx457_cur, rx457_curclass, "$!cstack"
  rx457_fail1372:
    unless rx457_bstack, rx457_done1370
    pop $I19, rx457_bstack
    if_null rx457_cstack, rx457_cstack_done1375
    unless rx457_cstack, rx457_cstack_done1375
    dec $I19
    set $P11, rx457_cstack[$I19]
  rx457_cstack_done1375:
    pop rx457_rep, rx457_bstack
    pop rx457_pos, rx457_bstack
    pop $I19, rx457_bstack
    lt rx457_pos, -1, rx457_done1370
    lt rx457_pos, 0, rx457_fail1372
    eq $I19, 0, rx457_fail1372
    nqp_islist $I20, rx457_cstack
    unless $I20, rx457_jump1373
    elements $I18, rx457_bstack
    le $I18, 0, rx457_cut1374
    dec $I18
    set $I18, rx457_bstack[$I18]
  rx457_cut1374:
    assign rx457_cstack, $I18
  rx457_jump1373:
    jump $I19
  rx457_done1370:
    rx457_cur."!cursor_fail"()
    .return (rx457_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_96_1349901750.327_caps" :subid("cuid_memo_126_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["not"], $P5002
    box $P5003, 0
    set $P5001["identifier"], $P5003
    box $P5004, 2
    set $P5001["circumfix"], $P5004
    box $P5005, 0
    set $P5001["variable"], $P5005
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_96_1349901750.327_nfa" :subid("cuid_memo_127_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 58
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 33
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    box $P5011, 8
    push $P5007, $P5011
    box $P5012, "identifier"
    push $P5007, $P5012
    box $P5013, 4
    push $P5007, $P5013
    box $P5014, 8
    push $P5007, $P5014
    box $P5015, "circumfix"
    push $P5007, $P5015
    box $P5016, 0
    push $P5007, $P5016
    box $P5017, 8
    push $P5007, $P5017
    box $P5018, "variable"
    push $P5007, $P5018
    box $P5019, 0
    push $P5007, $P5019
    push $P5001, $P5007
    new $P5020, 'ResizablePMCArray'
    box $P5021, 8
    push $P5020, $P5021
    box $P5022, "identifier"
    push $P5020, $P5022
    box $P5023, 0
    push $P5020, $P5023
    push $P5001, $P5020
    new $P5024, 'ResizablePMCArray'
    box $P5025, 8
    push $P5024, $P5025
    box $P5026, "circumfix"
    push $P5024, $P5026
    box $P5027, 0
    push $P5024, $P5027
    box $P5028, 1
    push $P5024, $P5028
    box $P5029, 0
    push $P5024, $P5029
    box $P5030, 0
    push $P5024, $P5030
    push $P5001, $P5024
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_96_1349901750.327_alt_nfa__19_1349901752.182" :subid("cuid_memo_128_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 33
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 8
    push $P5008, $P5009
    box $P5010, "identifier"
    push $P5008, $P5010
    box $P5011, 0
    push $P5008, $P5011
    push $P5002, $P5008
    push $P5001, $P5002
    new $P5012, 'ResizablePMCArray'
    new $P5013, 'ResizablePMCArray'
    push $P5012, $P5013
    new $P5014, 'ResizablePMCArray'
    box $P5015, 8
    push $P5014, $P5015
    box $P5016, "identifier"
    push $P5014, $P5016
    box $P5017, 2
    push $P5014, $P5017
    push $P5012, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 8
    push $P5018, $P5019
    box $P5020, "circumfix"
    push $P5018, $P5020
    box $P5021, 0
    push $P5018, $P5021
    box $P5022, 1
    push $P5018, $P5022
    box $P5023, 0
    push $P5018, $P5023
    box $P5024, 0
    push $P5018, $P5024
    push $P5012, $P5018
    push $P5001, $P5012
    new $P5025, 'ResizablePMCArray'
    new $P5026, 'ResizablePMCArray'
    push $P5025, $P5026
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "circumfix"
    push $P5027, $P5029
    box $P5030, 0
    push $P5027, $P5030
    push $P5025, $P5027
    push $P5001, $P5025
    new $P5031, 'ResizablePMCArray'
    new $P5032, 'ResizablePMCArray'
    push $P5031, $P5032
    new $P5033, 'ResizablePMCArray'
    box $P5034, 8
    push $P5033, $P5034
    box $P5035, "variable"
    push $P5033, $P5035
    box $P5036, 0
    push $P5033, $P5036
    push $P5031, $P5033
    push $P5001, $P5031
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "variable" :subid("cuid_97_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 914
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx467_tgt
    .local int rx467_pos
    .local int rx467_off
    .local int rx467_eos
    .local int rx467_rep
    .local pmc rx467_cur
    .local pmc rx467_curclass
    .local pmc rx467_bstack
    .local pmc rx467_cstack
    (rx467_cur, rx467_tgt, rx467_pos, rx467_curclass, rx467_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx467_cur
    length rx467_eos, rx467_tgt
    eq $I19, 1, rx467_restart1396
    gt rx467_pos, rx467_eos, rx467_fail1397
    repr_get_attr_int $I11, self, rx467_curclass, "$!from"
    ne $I11, -1, rxscan468_done1403
    goto rxscan468_scan1402
  rxscan468_loop1401:
    inc rx467_pos
    gt rx467_pos, rx467_eos, rx467_fail1397
    repr_bind_attr_int rx467_cur, rx467_curclass, "$!from", rx467_pos
  rxscan468_scan1402:
    nqp_rxmark rx467_bstack, rxscan468_loop1401, rx467_pos, 0
  rxscan468_done1403:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt469_01405
    nqp_push_label $P11, alt469_11412
    nqp_push_label $P11, alt469_21415
    nqp_rxmark rx467_bstack, alt469_end1404, -1, 0
    rx467_cur."!alt"(rx467_pos, "alt_nfa__20_1349901752.197", $P11)
    goto rx467_fail1397
  alt469_01405:
    repr_bind_attr_int rx467_cur, rx467_curclass, "$!pos", rx467_pos
    $P11 = rx467_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx467_curclass, "$!pos"
    lt $I11, 0, rx467_fail1397
    nqp_rxmark rx467_bstack, rxsubrule470_pass1406, -1, 0
  rxsubrule470_pass1406:
    rx467_cstack = rx467_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx467_pos, $P11, rx467_curclass, "$!pos"
    nqp_rxmark rx467_bstack, rxquantr471_done1408, rx467_pos, 0
  rxquantr471_loop1407:
    repr_bind_attr_int rx467_cur, rx467_curclass, "$!pos", rx467_pos
    $P11 = rx467_cur."twigil"()
    repr_get_attr_int $I11, $P11, rx467_curclass, "$!pos"
    lt $I11, 0, rx467_fail1397
    goto rxsubrule472_pass1409
  rxsubrule472_back1410:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx467_curclass, "$!pos"
    lt $I11, 0, rx467_fail1397
  rxsubrule472_pass1409:
    rx467_cstack = rx467_cur."!cursor_capture"($P11, "twigil")
    set_addr $I11, rxsubrule472_back1410
    push rx467_bstack, $I11
    push rx467_bstack, 0
    push rx467_bstack, rx467_pos
    elements $I11, rx467_cstack
    push rx467_bstack, $I11
    repr_get_attr_int rx467_pos, $P11, rx467_curclass, "$!pos"
    nqp_rxpeek $I19, rx467_bstack, rxquantr471_done1408
    inc $I19
    inc $I19
    set rx467_rep, rx467_bstack[$I19]
    nqp_rxcommit rx467_bstack, rxquantr471_done1408
    inc rx467_rep
  rxquantr471_done1408:
    repr_bind_attr_int rx467_cur, rx467_curclass, "$!pos", rx467_pos
    $P11 = rx467_cur."name"()
    repr_get_attr_int $I11, $P11, rx467_curclass, "$!pos"
    lt $I11, 0, rx467_fail1397
    nqp_rxmark rx467_bstack, rxsubrule473_pass1411, -1, 0
  rxsubrule473_pass1411:
    rx467_cstack = rx467_cur."!cursor_capture"($P11, "desigilname")
    repr_get_attr_int rx467_pos, $P11, rx467_curclass, "$!pos"
    goto alt469_end1404
  alt469_11412:
    repr_bind_attr_int rx467_cur, rx467_curclass, "$!pos", rx467_pos
    $P11 = rx467_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx467_curclass, "$!pos"
    lt $I11, 0, rx467_fail1397
    nqp_rxmark rx467_bstack, rxsubrule474_pass1413, -1, 0
  rxsubrule474_pass1413:
    rx467_cstack = rx467_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx467_pos, $P11, rx467_curclass, "$!pos"
    ge rx467_pos, rx467_eos, rx467_fail1397
    substr $S11, rx467_tgt, rx467_pos, 1
    index $I11, ucs4:"<[", $S11
    lt $I11, 0, rx467_fail1397
    repr_bind_attr_int rx467_cur, rx467_curclass, "$!pos", rx467_pos
    $P11 = rx467_cur."postcircumfix"()
    repr_get_attr_int $I11, $P11, rx467_curclass, "$!pos"
    lt $I11, 0, rx467_fail1397
    nqp_rxmark rx467_bstack, rxsubrule475_pass1414, -1, 0
  rxsubrule475_pass1414:
    rx467_cstack = rx467_cur."!cursor_capture"($P11, "postcircumfix")
    repr_get_attr_int rx467_pos, $P11, rx467_curclass, "$!pos"
    goto alt469_end1404
  alt469_21415:
    nqp_rxmark rx467_bstack, rxcap476_fail1417, rx467_pos, 0
    add $I11, rx467_pos, 1
    gt $I11, rx467_eos, rx467_fail1397
    substr $S10, rx467_tgt, rx467_pos, 1
    ne $S10, ucs4:"$", rx467_fail1397
    add rx467_pos, 1
    nqp_rxpeek $I19, rx467_bstack, rxcap476_fail1417
    inc $I19
    set $I11, rx467_bstack[$I19]
    repr_bind_attr_int rx467_cur, rx467_curclass, "$!pos", rx467_pos
    $P11 = rx467_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx467_pos)
    rx467_cstack = rx467_cur."!cursor_capture"($P11, "sigil")
    goto rxcap476_done1416
  rxcap476_fail1417:
    goto rx467_fail1397
  rxcap476_done1416:
    nqp_rxmark rx467_bstack, rxcap477_fail1419, rx467_pos, 0
    ge rx467_pos, rx467_eos, rx467_fail1397
    substr $S11, rx467_tgt, rx467_pos, 1
    index $I11, ucs4:"/_!", $S11
    lt $I11, 0, rx467_fail1397
    inc rx467_pos
    nqp_rxpeek $I19, rx467_bstack, rxcap477_fail1419
    inc $I19
    set $I11, rx467_bstack[$I19]
    repr_bind_attr_int rx467_cur, rx467_curclass, "$!pos", rx467_pos
    $P11 = rx467_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx467_pos)
    rx467_cstack = rx467_cur."!cursor_capture"($P11, "desigilname")
    goto rxcap477_done1418
  rxcap477_fail1419:
    goto rx467_fail1397
  rxcap477_done1418:
    goto alt469_end1404
  alt469_end1404:
    rx467_cur."!cursor_pass"(rx467_pos, "variable", 'backtrack'=>1)
    .return (rx467_cur)
  rx467_restart1396:
    repr_get_attr_obj rx467_cstack, rx467_cur, rx467_curclass, "$!cstack"
  rx467_fail1397:
    unless rx467_bstack, rx467_done1395
    pop $I19, rx467_bstack
    if_null rx467_cstack, rx467_cstack_done1400
    unless rx467_cstack, rx467_cstack_done1400
    dec $I19
    set $P11, rx467_cstack[$I19]
  rx467_cstack_done1400:
    pop rx467_rep, rx467_bstack
    pop rx467_pos, rx467_bstack
    pop $I19, rx467_bstack
    lt rx467_pos, -1, rx467_done1395
    lt rx467_pos, 0, rx467_fail1397
    eq $I19, 0, rx467_fail1397
    nqp_islist $I20, rx467_cstack
    unless $I20, rx467_jump1398
    elements $I18, rx467_bstack
    le $I18, 0, rx467_cut1399
    dec $I18
    set $I18, rx467_bstack[$I18]
  rx467_cut1399:
    assign rx467_cstack, $I18
  rx467_jump1398:
    jump $I19
  rx467_done1395:
    rx467_cur."!cursor_fail"()
    .return (rx467_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_97_1349901750.327_caps" :subid("cuid_memo_129_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sigil"], $P5002
    box $P5003, 2
    set $P5001["twigil"], $P5003
    box $P5004, 0
    set $P5001["desigilname"], $P5004
    box $P5005, 0
    set $P5001["postcircumfix"], $P5005
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_97_1349901750.327_nfa" :subid("cuid_memo_130_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "sigil"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    box $P5007, 8
    push $P5003, $P5007
    box $P5008, "sigil"
    push $P5003, $P5008
    box $P5009, 4
    push $P5003, $P5009
    box $P5010, 2
    push $P5003, $P5010
    box $P5011, 36
    push $P5003, $P5011
    box $P5012, 6
    push $P5003, $P5012
    push $P5001, $P5003
    new $P5013, 'ResizablePMCArray'
    box $P5014, 8
    push $P5013, $P5014
    box $P5015, "twigil"
    push $P5013, $P5015
    box $P5016, 3
    push $P5013, $P5016
    box $P5017, 1
    push $P5013, $P5017
    box $P5018, 0
    push $P5013, $P5018
    box $P5019, 3
    push $P5013, $P5019
    push $P5001, $P5013
    new $P5020, 'ResizablePMCArray'
    box $P5021, 8
    push $P5020, $P5021
    box $P5022, "name"
    push $P5020, $P5022
    box $P5023, 0
    push $P5020, $P5023
    push $P5001, $P5020
    new $P5024, 'ResizablePMCArray'
    box $P5025, 6
    push $P5024, $P5025
    box $P5026, "<["
    push $P5024, $P5026
    box $P5027, 5
    push $P5024, $P5027
    push $P5001, $P5024
    new $P5028, 'ResizablePMCArray'
    box $P5029, 0
    push $P5028, $P5029
    box $P5030, 0
    push $P5028, $P5030
    box $P5031, 0
    push $P5028, $P5031
    push $P5001, $P5028
    new $P5032, 'ResizablePMCArray'
    box $P5033, 6
    push $P5032, $P5033
    box $P5034, "/_!"
    push $P5032, $P5034
    box $P5035, 0
    push $P5032, $P5035
    push $P5001, $P5032
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_97_1349901750.327_alt_nfa__20_1349901752.197" :subid("cuid_memo_131_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 8
    push $P5004, $P5005
    box $P5006, "sigil"
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 8
    push $P5008, $P5009
    box $P5010, "twigil"
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    box $P5012, 1
    push $P5008, $P5012
    box $P5013, 0
    push $P5008, $P5013
    box $P5014, 3
    push $P5008, $P5014
    push $P5002, $P5008
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "name"
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5002, $P5015
    push $P5001, $P5002
    new $P5019, 'ResizablePMCArray'
    new $P5020, 'ResizablePMCArray'
    push $P5019, $P5020
    new $P5021, 'ResizablePMCArray'
    box $P5022, 8
    push $P5021, $P5022
    box $P5023, "sigil"
    push $P5021, $P5023
    box $P5024, 2
    push $P5021, $P5024
    push $P5019, $P5021
    new $P5025, 'ResizablePMCArray'
    box $P5026, 6
    push $P5025, $P5026
    box $P5027, "<["
    push $P5025, $P5027
    box $P5028, 3
    push $P5025, $P5028
    push $P5019, $P5025
    new $P5029, 'ResizablePMCArray'
    box $P5030, 0
    push $P5029, $P5030
    box $P5031, 0
    push $P5029, $P5031
    box $P5032, 0
    push $P5029, $P5032
    push $P5019, $P5029
    push $P5001, $P5019
    new $P5033, 'ResizablePMCArray'
    new $P5034, 'ResizablePMCArray'
    push $P5033, $P5034
    new $P5035, 'ResizablePMCArray'
    box $P5036, 2
    push $P5035, $P5036
    box $P5037, 36
    push $P5035, $P5037
    box $P5038, 2
    push $P5035, $P5038
    push $P5033, $P5035
    new $P5039, 'ResizablePMCArray'
    box $P5040, 6
    push $P5039, $P5040
    box $P5041, "/_!"
    push $P5039, $P5041
    box $P5042, 0
    push $P5039, $P5042
    push $P5033, $P5039
    push $P5001, $P5033
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "sigil" :subid("cuid_98_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 920
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx478_tgt
    .local int rx478_pos
    .local int rx478_off
    .local int rx478_eos
    .local int rx478_rep
    .local pmc rx478_cur
    .local pmc rx478_curclass
    .local pmc rx478_bstack
    .local pmc rx478_cstack
    (rx478_cur, rx478_tgt, rx478_pos, rx478_curclass, rx478_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx478_cur
    length rx478_eos, rx478_tgt
    eq $I19, 1, rx478_restart1422
    gt rx478_pos, rx478_eos, rx478_fail1423
    repr_get_attr_int $I11, self, rx478_curclass, "$!from"
    ne $I11, -1, rxscan479_done1429
    goto rxscan479_scan1428
  rxscan479_loop1427:
    inc rx478_pos
    gt rx478_pos, rx478_eos, rx478_fail1423
    repr_bind_attr_int rx478_cur, rx478_curclass, "$!from", rx478_pos
  rxscan479_scan1428:
    nqp_rxmark rx478_bstack, rxscan479_loop1427, rx478_pos, 0
  rxscan479_done1429:
    ge rx478_pos, rx478_eos, rx478_fail1423
    substr $S11, rx478_tgt, rx478_pos, 1
    index $I11, ucs4:"$@%&", $S11
    lt $I11, 0, rx478_fail1423
    inc rx478_pos
    rx478_cur."!cursor_pass"(rx478_pos, "sigil", 'backtrack'=>1)
    .return (rx478_cur)
  rx478_restart1422:
    repr_get_attr_obj rx478_cstack, rx478_cur, rx478_curclass, "$!cstack"
  rx478_fail1423:
    unless rx478_bstack, rx478_done1421
    pop $I19, rx478_bstack
    if_null rx478_cstack, rx478_cstack_done1426
    unless rx478_cstack, rx478_cstack_done1426
    dec $I19
    set $P11, rx478_cstack[$I19]
  rx478_cstack_done1426:
    pop rx478_rep, rx478_bstack
    pop rx478_pos, rx478_bstack
    pop $I19, rx478_bstack
    lt rx478_pos, -1, rx478_done1421
    lt rx478_pos, 0, rx478_fail1423
    eq $I19, 0, rx478_fail1423
    nqp_islist $I20, rx478_cstack
    unless $I20, rx478_jump1424
    elements $I18, rx478_bstack
    le $I18, 0, rx478_cut1425
    dec $I18
    set $I18, rx478_bstack[$I18]
  rx478_cut1425:
    assign rx478_cstack, $I18
  rx478_jump1424:
    jump $I19
  rx478_done1421:
    rx478_cur."!cursor_fail"()
    .return (rx478_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_98_1349901750.327_caps" :subid("cuid_memo_132_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_98_1349901750.327_nfa" :subid("cuid_memo_133_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "$@%&"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "twigil" :subid("cuid_99_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 922
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx480_tgt
    .local int rx480_pos
    .local int rx480_off
    .local int rx480_eos
    .local int rx480_rep
    .local pmc rx480_cur
    .local pmc rx480_curclass
    .local pmc rx480_bstack
    .local pmc rx480_cstack
    (rx480_cur, rx480_tgt, rx480_pos, rx480_curclass, rx480_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx480_cur
    length rx480_eos, rx480_tgt
    eq $I19, 1, rx480_restart1432
    gt rx480_pos, rx480_eos, rx480_fail1433
    repr_get_attr_int $I11, self, rx480_curclass, "$!from"
    ne $I11, -1, rxscan481_done1439
    goto rxscan481_scan1438
  rxscan481_loop1437:
    inc rx480_pos
    gt rx480_pos, rx480_eos, rx480_fail1433
    repr_bind_attr_int rx480_cur, rx480_curclass, "$!from", rx480_pos
  rxscan481_scan1438:
    nqp_rxmark rx480_bstack, rxscan481_loop1437, rx480_pos, 0
  rxscan481_done1439:
    ge rx480_pos, rx480_eos, rx480_fail1433
    substr $S11, rx480_tgt, rx480_pos, 1
    index $I11, ucs4:"*!?", $S11
    lt $I11, 0, rx480_fail1433
    inc rx480_pos
    rx480_cur."!cursor_pass"(rx480_pos, "twigil", 'backtrack'=>1)
    .return (rx480_cur)
  rx480_restart1432:
    repr_get_attr_obj rx480_cstack, rx480_cur, rx480_curclass, "$!cstack"
  rx480_fail1433:
    unless rx480_bstack, rx480_done1431
    pop $I19, rx480_bstack
    if_null rx480_cstack, rx480_cstack_done1436
    unless rx480_cstack, rx480_cstack_done1436
    dec $I19
    set $P11, rx480_cstack[$I19]
  rx480_cstack_done1436:
    pop rx480_rep, rx480_bstack
    pop rx480_pos, rx480_bstack
    pop $I19, rx480_bstack
    lt rx480_pos, -1, rx480_done1431
    lt rx480_pos, 0, rx480_fail1433
    eq $I19, 0, rx480_fail1433
    nqp_islist $I20, rx480_cstack
    unless $I20, rx480_jump1434
    elements $I18, rx480_bstack
    le $I18, 0, rx480_cut1435
    dec $I18
    set $I18, rx480_bstack[$I18]
  rx480_cut1435:
    assign rx480_cstack, $I18
  rx480_jump1434:
    jump $I19
  rx480_done1431:
    rx480_cur."!cursor_fail"()
    .return (rx480_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_99_1349901750.327_caps" :subid("cuid_memo_134_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_99_1349901750.327_nfa" :subid("cuid_memo_135_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "*!?"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator" :subid("cuid_100_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 924
    .param pmc self 
    $P5001 = self."!protoregex"("package_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<module>" :subid("cuid_101_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 925
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx482_tgt
    .local int rx482_pos
    .local int rx482_off
    .local int rx482_eos
    .local int rx482_rep
    .local pmc rx482_cur
    .local pmc rx482_curclass
    .local pmc rx482_bstack
    .local pmc rx482_cstack
    (rx482_cur, rx482_tgt, rx482_pos, rx482_curclass, rx482_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx482_cur
    length rx482_eos, rx482_tgt
    eq $I19, 1, rx482_restart1442
    gt rx482_pos, rx482_eos, rx482_fail1443
    repr_get_attr_int $I11, self, rx482_curclass, "$!from"
    ne $I11, -1, rxscan483_done1449
    goto rxscan483_scan1448
  rxscan483_loop1447:
    inc rx482_pos
    gt rx482_pos, rx482_eos, rx482_fail1443
    repr_bind_attr_int rx482_cur, rx482_curclass, "$!from", rx482_pos
  rxscan483_scan1448:
    nqp_rxmark rx482_bstack, rxscan483_loop1447, rx482_pos, 0
  rxscan483_done1449:
    repr_bind_attr_int rx482_cur, rx482_curclass, "$!pos", rx482_pos
    store_lex unicode:"$\x{a2}", rx482_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1450
    nqp_get_sc_object $P5006, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1451
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5004, $P5007
  fallback1451:
    unless_null $P5004, vivi_4841452
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4841452:
    set $P5003, $P5004
  fallback1450:
    set $P101, $P5003
    repr_bind_attr_int rx482_cur, rx482_curclass, "$!pos", rx482_pos
    store_lex unicode:"$\x{a2}", rx482_cur
    box $P5009, "module"
    set $P102, $P5009
    nqp_rxmark rx482_bstack, rxcap485_fail1454, rx482_pos, 0
    add $I11, rx482_pos, 6
    gt $I11, rx482_eos, rx482_fail1443
    substr $S10, rx482_tgt, rx482_pos, 6
    ne $S10, ucs4:"module", rx482_fail1443
    add rx482_pos, 6
    nqp_rxpeek $I19, rx482_bstack, rxcap485_fail1454
    inc $I19
    set $I11, rx482_bstack[$I19]
    repr_bind_attr_int rx482_cur, rx482_curclass, "$!pos", rx482_pos
    $P11 = rx482_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx482_pos)
    rx482_cstack = rx482_cur."!cursor_capture"($P11, "sym")
    goto rxcap485_done1453
  rxcap485_fail1454:
    goto rx482_fail1443
  rxcap485_done1453:
    repr_bind_attr_int rx482_cur, rx482_curclass, "$!pos", rx482_pos
    $P11 = rx482_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx482_curclass, "$!pos"
    lt $I11, 0, rx482_fail1443
    nqp_rxmark rx482_bstack, rxsubrule486_pass1455, -1, 0
  rxsubrule486_pass1455:
    rx482_cstack = rx482_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx482_pos, $P11, rx482_curclass, "$!pos"
    rx482_cur."!cursor_pass"(rx482_pos, "package_declarator:sym<module>", 'backtrack'=>1)
    .return (rx482_cur)
  rx482_restart1442:
    repr_get_attr_obj rx482_cstack, rx482_cur, rx482_curclass, "$!cstack"
  rx482_fail1443:
    unless rx482_bstack, rx482_done1441
    pop $I19, rx482_bstack
    if_null rx482_cstack, rx482_cstack_done1446
    unless rx482_cstack, rx482_cstack_done1446
    dec $I19
    set $P11, rx482_cstack[$I19]
  rx482_cstack_done1446:
    pop rx482_rep, rx482_bstack
    pop rx482_pos, rx482_bstack
    pop $I19, rx482_bstack
    lt rx482_pos, -1, rx482_done1441
    lt rx482_pos, 0, rx482_fail1443
    eq $I19, 0, rx482_fail1443
    nqp_islist $I20, rx482_cstack
    unless $I20, rx482_jump1444
    elements $I18, rx482_bstack
    le $I18, 0, rx482_cut1445
    dec $I18
    set $I18, rx482_bstack[$I18]
  rx482_cut1445:
    assign rx482_cstack, $I18
  rx482_jump1444:
    jump $I19
  rx482_done1441:
    rx482_cur."!cursor_fail"()
    .return (rx482_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_101_1349901750.327_caps" :subid("cuid_memo_136_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["package_def"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_101_1349901750.327_nfa" :subid("cuid_memo_137_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 109
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 111
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 100
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 117
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 2
    push $P5027, $P5028
    box $P5029, 108
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 2
    push $P5031, $P5032
    box $P5033, 101
    push $P5031, $P5033
    box $P5034, 9
    push $P5031, $P5034
    push $P5001, $P5031
    new $P5035, 'ResizablePMCArray'
    box $P5036, 8
    push $P5035, $P5036
    box $P5037, "package_def"
    push $P5035, $P5037
    box $P5038, 0
    push $P5035, $P5038
    push $P5001, $P5035
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<knowhow>" :subid("cuid_102_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 930
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx487_tgt
    .local int rx487_pos
    .local int rx487_off
    .local int rx487_eos
    .local int rx487_rep
    .local pmc rx487_cur
    .local pmc rx487_curclass
    .local pmc rx487_bstack
    .local pmc rx487_cstack
    (rx487_cur, rx487_tgt, rx487_pos, rx487_curclass, rx487_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx487_cur
    length rx487_eos, rx487_tgt
    eq $I19, 1, rx487_restart1458
    gt rx487_pos, rx487_eos, rx487_fail1459
    repr_get_attr_int $I11, self, rx487_curclass, "$!from"
    ne $I11, -1, rxscan488_done1465
    goto rxscan488_scan1464
  rxscan488_loop1463:
    inc rx487_pos
    gt rx487_pos, rx487_eos, rx487_fail1459
    repr_bind_attr_int rx487_cur, rx487_curclass, "$!from", rx487_pos
  rxscan488_scan1464:
    nqp_rxmark rx487_bstack, rxscan488_loop1463, rx487_pos, 0
  rxscan488_done1465:
    repr_bind_attr_int rx487_cur, rx487_curclass, "$!pos", rx487_pos
    store_lex unicode:"$\x{a2}", rx487_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1466
    nqp_get_sc_object $P5006, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1467
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5004, $P5007
  fallback1467:
    unless_null $P5004, vivi_4891468
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4891468:
    set $P5003, $P5004
  fallback1466:
    set $P101, $P5003
    repr_bind_attr_int rx487_cur, rx487_curclass, "$!pos", rx487_pos
    store_lex unicode:"$\x{a2}", rx487_cur
    box $P5009, "knowhow"
    set $P102, $P5009
    nqp_rxmark rx487_bstack, rxcap490_fail1470, rx487_pos, 0
    add $I11, rx487_pos, 7
    gt $I11, rx487_eos, rx487_fail1459
    substr $S10, rx487_tgt, rx487_pos, 7
    ne $S10, ucs4:"knowhow", rx487_fail1459
    add rx487_pos, 7
    nqp_rxpeek $I19, rx487_bstack, rxcap490_fail1470
    inc $I19
    set $I11, rx487_bstack[$I19]
    repr_bind_attr_int rx487_cur, rx487_curclass, "$!pos", rx487_pos
    $P11 = rx487_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx487_pos)
    rx487_cstack = rx487_cur."!cursor_capture"($P11, "sym")
    goto rxcap490_done1469
  rxcap490_fail1470:
    goto rx487_fail1459
  rxcap490_done1469:
    repr_bind_attr_int rx487_cur, rx487_curclass, "$!pos", rx487_pos
    $P11 = rx487_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx487_curclass, "$!pos"
    lt $I11, 0, rx487_fail1459
    nqp_rxmark rx487_bstack, rxsubrule491_pass1471, -1, 0
  rxsubrule491_pass1471:
    rx487_cstack = rx487_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx487_pos, $P11, rx487_curclass, "$!pos"
    rx487_cur."!cursor_pass"(rx487_pos, "package_declarator:sym<knowhow>", 'backtrack'=>1)
    .return (rx487_cur)
  rx487_restart1458:
    repr_get_attr_obj rx487_cstack, rx487_cur, rx487_curclass, "$!cstack"
  rx487_fail1459:
    unless rx487_bstack, rx487_done1457
    pop $I19, rx487_bstack
    if_null rx487_cstack, rx487_cstack_done1462
    unless rx487_cstack, rx487_cstack_done1462
    dec $I19
    set $P11, rx487_cstack[$I19]
  rx487_cstack_done1462:
    pop rx487_rep, rx487_bstack
    pop rx487_pos, rx487_bstack
    pop $I19, rx487_bstack
    lt rx487_pos, -1, rx487_done1457
    lt rx487_pos, 0, rx487_fail1459
    eq $I19, 0, rx487_fail1459
    nqp_islist $I20, rx487_cstack
    unless $I20, rx487_jump1460
    elements $I18, rx487_bstack
    le $I18, 0, rx487_cut1461
    dec $I18
    set $I18, rx487_bstack[$I18]
  rx487_cut1461:
    assign rx487_cstack, $I18
  rx487_jump1460:
    jump $I19
  rx487_done1457:
    rx487_cur."!cursor_fail"()
    .return (rx487_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_102_1349901750.327_caps" :subid("cuid_memo_138_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["package_def"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_102_1349901750.327_nfa" :subid("cuid_memo_139_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 107
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 110
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 111
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 119
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 2
    push $P5027, $P5028
    box $P5029, 104
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 2
    push $P5031, $P5032
    box $P5033, 111
    push $P5031, $P5033
    box $P5034, 9
    push $P5031, $P5034
    push $P5001, $P5031
    new $P5035, 'ResizablePMCArray'
    box $P5036, 2
    push $P5035, $P5036
    box $P5037, 119
    push $P5035, $P5037
    box $P5038, 10
    push $P5035, $P5038
    push $P5001, $P5035
    new $P5039, 'ResizablePMCArray'
    box $P5040, 8
    push $P5039, $P5040
    box $P5041, "package_def"
    push $P5039, $P5041
    box $P5042, 0
    push $P5039, $P5042
    push $P5001, $P5039
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<class>" :subid("cuid_103_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 935
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx492_tgt
    .local int rx492_pos
    .local int rx492_off
    .local int rx492_eos
    .local int rx492_rep
    .local pmc rx492_cur
    .local pmc rx492_curclass
    .local pmc rx492_bstack
    .local pmc rx492_cstack
    (rx492_cur, rx492_tgt, rx492_pos, rx492_curclass, rx492_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx492_cur
    length rx492_eos, rx492_tgt
    eq $I19, 1, rx492_restart1474
    gt rx492_pos, rx492_eos, rx492_fail1475
    repr_get_attr_int $I11, self, rx492_curclass, "$!from"
    ne $I11, -1, rxscan493_done1481
    goto rxscan493_scan1480
  rxscan493_loop1479:
    inc rx492_pos
    gt rx492_pos, rx492_eos, rx492_fail1475
    repr_bind_attr_int rx492_cur, rx492_curclass, "$!from", rx492_pos
  rxscan493_scan1480:
    nqp_rxmark rx492_bstack, rxscan493_loop1479, rx492_pos, 0
  rxscan493_done1481:
    repr_bind_attr_int rx492_cur, rx492_curclass, "$!pos", rx492_pos
    store_lex unicode:"$\x{a2}", rx492_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1482
    nqp_get_sc_object $P5006, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1483
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5004, $P5007
  fallback1483:
    unless_null $P5004, vivi_4941484
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4941484:
    set $P5003, $P5004
  fallback1482:
    set $P101, $P5003
    repr_bind_attr_int rx492_cur, rx492_curclass, "$!pos", rx492_pos
    store_lex unicode:"$\x{a2}", rx492_cur
    box $P5009, "class"
    set $P102, $P5009
    nqp_rxmark rx492_bstack, rxcap495_fail1486, rx492_pos, 0
    add $I11, rx492_pos, 5
    gt $I11, rx492_eos, rx492_fail1475
    substr $S10, rx492_tgt, rx492_pos, 5
    ne $S10, ucs4:"class", rx492_fail1475
    add rx492_pos, 5
    nqp_rxpeek $I19, rx492_bstack, rxcap495_fail1486
    inc $I19
    set $I11, rx492_bstack[$I19]
    repr_bind_attr_int rx492_cur, rx492_curclass, "$!pos", rx492_pos
    $P11 = rx492_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx492_pos)
    rx492_cstack = rx492_cur."!cursor_capture"($P11, "sym")
    goto rxcap495_done1485
  rxcap495_fail1486:
    goto rx492_fail1475
  rxcap495_done1485:
    repr_bind_attr_int rx492_cur, rx492_curclass, "$!pos", rx492_pos
    $P11 = rx492_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx492_curclass, "$!pos"
    lt $I11, 0, rx492_fail1475
    nqp_rxmark rx492_bstack, rxsubrule496_pass1487, -1, 0
  rxsubrule496_pass1487:
    rx492_cstack = rx492_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx492_pos, $P11, rx492_curclass, "$!pos"
    rx492_cur."!cursor_pass"(rx492_pos, "package_declarator:sym<class>", 'backtrack'=>1)
    .return (rx492_cur)
  rx492_restart1474:
    repr_get_attr_obj rx492_cstack, rx492_cur, rx492_curclass, "$!cstack"
  rx492_fail1475:
    unless rx492_bstack, rx492_done1473
    pop $I19, rx492_bstack
    if_null rx492_cstack, rx492_cstack_done1478
    unless rx492_cstack, rx492_cstack_done1478
    dec $I19
    set $P11, rx492_cstack[$I19]
  rx492_cstack_done1478:
    pop rx492_rep, rx492_bstack
    pop rx492_pos, rx492_bstack
    pop $I19, rx492_bstack
    lt rx492_pos, -1, rx492_done1473
    lt rx492_pos, 0, rx492_fail1475
    eq $I19, 0, rx492_fail1475
    nqp_islist $I20, rx492_cstack
    unless $I20, rx492_jump1476
    elements $I18, rx492_bstack
    le $I18, 0, rx492_cut1477
    dec $I18
    set $I18, rx492_bstack[$I18]
  rx492_cut1477:
    assign rx492_cstack, $I18
  rx492_jump1476:
    jump $I19
  rx492_done1473:
    rx492_cur."!cursor_fail"()
    .return (rx492_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_103_1349901750.327_caps" :subid("cuid_memo_140_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["package_def"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_103_1349901750.327_nfa" :subid("cuid_memo_141_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 99
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 108
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 97
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 115
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 2
    push $P5027, $P5028
    box $P5029, 115
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 8
    push $P5031, $P5032
    box $P5033, "package_def"
    push $P5031, $P5033
    box $P5034, 0
    push $P5031, $P5034
    push $P5001, $P5031
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<grammar>" :subid("cuid_104_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 940
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx497_tgt
    .local int rx497_pos
    .local int rx497_off
    .local int rx497_eos
    .local int rx497_rep
    .local pmc rx497_cur
    .local pmc rx497_curclass
    .local pmc rx497_bstack
    .local pmc rx497_cstack
    (rx497_cur, rx497_tgt, rx497_pos, rx497_curclass, rx497_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx497_cur
    length rx497_eos, rx497_tgt
    eq $I19, 1, rx497_restart1490
    gt rx497_pos, rx497_eos, rx497_fail1491
    repr_get_attr_int $I11, self, rx497_curclass, "$!from"
    ne $I11, -1, rxscan498_done1497
    goto rxscan498_scan1496
  rxscan498_loop1495:
    inc rx497_pos
    gt rx497_pos, rx497_eos, rx497_fail1491
    repr_bind_attr_int rx497_cur, rx497_curclass, "$!from", rx497_pos
  rxscan498_scan1496:
    nqp_rxmark rx497_bstack, rxscan498_loop1495, rx497_pos, 0
  rxscan498_done1497:
    repr_bind_attr_int rx497_cur, rx497_curclass, "$!pos", rx497_pos
    store_lex unicode:"$\x{a2}", rx497_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1498
    nqp_get_sc_object $P5006, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1499
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5004, $P5007
  fallback1499:
    unless_null $P5004, vivi_4991500
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4991500:
    set $P5003, $P5004
  fallback1498:
    set $P101, $P5003
    repr_bind_attr_int rx497_cur, rx497_curclass, "$!pos", rx497_pos
    store_lex unicode:"$\x{a2}", rx497_cur
    box $P5009, "grammar"
    set $P102, $P5009
    nqp_rxmark rx497_bstack, rxcap500_fail1502, rx497_pos, 0
    add $I11, rx497_pos, 7
    gt $I11, rx497_eos, rx497_fail1491
    substr $S10, rx497_tgt, rx497_pos, 7
    ne $S10, ucs4:"grammar", rx497_fail1491
    add rx497_pos, 7
    nqp_rxpeek $I19, rx497_bstack, rxcap500_fail1502
    inc $I19
    set $I11, rx497_bstack[$I19]
    repr_bind_attr_int rx497_cur, rx497_curclass, "$!pos", rx497_pos
    $P11 = rx497_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx497_pos)
    rx497_cstack = rx497_cur."!cursor_capture"($P11, "sym")
    goto rxcap500_done1501
  rxcap500_fail1502:
    goto rx497_fail1491
  rxcap500_done1501:
    repr_bind_attr_int rx497_cur, rx497_curclass, "$!pos", rx497_pos
    $P11 = rx497_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx497_curclass, "$!pos"
    lt $I11, 0, rx497_fail1491
    nqp_rxmark rx497_bstack, rxsubrule501_pass1503, -1, 0
  rxsubrule501_pass1503:
    rx497_cstack = rx497_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx497_pos, $P11, rx497_curclass, "$!pos"
    rx497_cur."!cursor_pass"(rx497_pos, "package_declarator:sym<grammar>", 'backtrack'=>1)
    .return (rx497_cur)
  rx497_restart1490:
    repr_get_attr_obj rx497_cstack, rx497_cur, rx497_curclass, "$!cstack"
  rx497_fail1491:
    unless rx497_bstack, rx497_done1489
    pop $I19, rx497_bstack
    if_null rx497_cstack, rx497_cstack_done1494
    unless rx497_cstack, rx497_cstack_done1494
    dec $I19
    set $P11, rx497_cstack[$I19]
  rx497_cstack_done1494:
    pop rx497_rep, rx497_bstack
    pop rx497_pos, rx497_bstack
    pop $I19, rx497_bstack
    lt rx497_pos, -1, rx497_done1489
    lt rx497_pos, 0, rx497_fail1491
    eq $I19, 0, rx497_fail1491
    nqp_islist $I20, rx497_cstack
    unless $I20, rx497_jump1492
    elements $I18, rx497_bstack
    le $I18, 0, rx497_cut1493
    dec $I18
    set $I18, rx497_bstack[$I18]
  rx497_cut1493:
    assign rx497_cstack, $I18
  rx497_jump1492:
    jump $I19
  rx497_done1489:
    rx497_cur."!cursor_fail"()
    .return (rx497_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_104_1349901750.327_caps" :subid("cuid_memo_142_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["package_def"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_104_1349901750.327_nfa" :subid("cuid_memo_143_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 103
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 114
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 97
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 109
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 2
    push $P5027, $P5028
    box $P5029, 109
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 2
    push $P5031, $P5032
    box $P5033, 97
    push $P5031, $P5033
    box $P5034, 9
    push $P5031, $P5034
    push $P5001, $P5031
    new $P5035, 'ResizablePMCArray'
    box $P5036, 2
    push $P5035, $P5036
    box $P5037, 114
    push $P5035, $P5037
    box $P5038, 10
    push $P5035, $P5038
    push $P5001, $P5035
    new $P5039, 'ResizablePMCArray'
    box $P5040, 8
    push $P5039, $P5040
    box $P5041, "package_def"
    push $P5039, $P5041
    box $P5042, 0
    push $P5039, $P5042
    push $P5001, $P5039
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<role>" :subid("cuid_105_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 945
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx502_tgt
    .local int rx502_pos
    .local int rx502_off
    .local int rx502_eos
    .local int rx502_rep
    .local pmc rx502_cur
    .local pmc rx502_curclass
    .local pmc rx502_bstack
    .local pmc rx502_cstack
    (rx502_cur, rx502_tgt, rx502_pos, rx502_curclass, rx502_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx502_cur
    length rx502_eos, rx502_tgt
    eq $I19, 1, rx502_restart1506
    gt rx502_pos, rx502_eos, rx502_fail1507
    repr_get_attr_int $I11, self, rx502_curclass, "$!from"
    ne $I11, -1, rxscan503_done1513
    goto rxscan503_scan1512
  rxscan503_loop1511:
    inc rx502_pos
    gt rx502_pos, rx502_eos, rx502_fail1507
    repr_bind_attr_int rx502_cur, rx502_curclass, "$!from", rx502_pos
  rxscan503_scan1512:
    nqp_rxmark rx502_bstack, rxscan503_loop1511, rx502_pos, 0
  rxscan503_done1513:
    repr_bind_attr_int rx502_cur, rx502_curclass, "$!pos", rx502_pos
    store_lex unicode:"$\x{a2}", rx502_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1514
    nqp_get_sc_object $P5006, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1515
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5004, $P5007
  fallback1515:
    unless_null $P5004, vivi_5041516
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_5041516:
    set $P5003, $P5004
  fallback1514:
    set $P101, $P5003
    repr_bind_attr_int rx502_cur, rx502_curclass, "$!pos", rx502_pos
    store_lex unicode:"$\x{a2}", rx502_cur
    box $P5009, "role"
    set $P102, $P5009
    nqp_rxmark rx502_bstack, rxcap505_fail1518, rx502_pos, 0
    add $I11, rx502_pos, 4
    gt $I11, rx502_eos, rx502_fail1507
    substr $S10, rx502_tgt, rx502_pos, 4
    ne $S10, ucs4:"role", rx502_fail1507
    add rx502_pos, 4
    nqp_rxpeek $I19, rx502_bstack, rxcap505_fail1518
    inc $I19
    set $I11, rx502_bstack[$I19]
    repr_bind_attr_int rx502_cur, rx502_curclass, "$!pos", rx502_pos
    $P11 = rx502_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx502_pos)
    rx502_cstack = rx502_cur."!cursor_capture"($P11, "sym")
    goto rxcap505_done1517
  rxcap505_fail1518:
    goto rx502_fail1507
  rxcap505_done1517:
    repr_bind_attr_int rx502_cur, rx502_curclass, "$!pos", rx502_pos
    $P11 = rx502_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx502_curclass, "$!pos"
    lt $I11, 0, rx502_fail1507
    nqp_rxmark rx502_bstack, rxsubrule506_pass1519, -1, 0
  rxsubrule506_pass1519:
    rx502_cstack = rx502_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx502_pos, $P11, rx502_curclass, "$!pos"
    rx502_cur."!cursor_pass"(rx502_pos, "package_declarator:sym<role>", 'backtrack'=>1)
    .return (rx502_cur)
  rx502_restart1506:
    repr_get_attr_obj rx502_cstack, rx502_cur, rx502_curclass, "$!cstack"
  rx502_fail1507:
    unless rx502_bstack, rx502_done1505
    pop $I19, rx502_bstack
    if_null rx502_cstack, rx502_cstack_done1510
    unless rx502_cstack, rx502_cstack_done1510
    dec $I19
    set $P11, rx502_cstack[$I19]
  rx502_cstack_done1510:
    pop rx502_rep, rx502_bstack
    pop rx502_pos, rx502_bstack
    pop $I19, rx502_bstack
    lt rx502_pos, -1, rx502_done1505
    lt rx502_pos, 0, rx502_fail1507
    eq $I19, 0, rx502_fail1507
    nqp_islist $I20, rx502_cstack
    unless $I20, rx502_jump1508
    elements $I18, rx502_bstack
    le $I18, 0, rx502_cut1509
    dec $I18
    set $I18, rx502_bstack[$I18]
  rx502_cut1509:
    assign rx502_cstack, $I18
  rx502_jump1508:
    jump $I19
  rx502_done1505:
    rx502_cur."!cursor_fail"()
    .return (rx502_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_105_1349901750.327_caps" :subid("cuid_memo_144_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["package_def"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_105_1349901750.327_nfa" :subid("cuid_memo_145_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 114
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 111
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 108
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 101
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "package_def"
    push $P5027, $P5029
    box $P5030, 0
    push $P5027, $P5030
    push $P5001, $P5027
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<native>" :subid("cuid_106_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 950
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx507_tgt
    .local int rx507_pos
    .local int rx507_off
    .local int rx507_eos
    .local int rx507_rep
    .local pmc rx507_cur
    .local pmc rx507_curclass
    .local pmc rx507_bstack
    .local pmc rx507_cstack
    (rx507_cur, rx507_tgt, rx507_pos, rx507_curclass, rx507_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx507_cur
    length rx507_eos, rx507_tgt
    eq $I19, 1, rx507_restart1522
    gt rx507_pos, rx507_eos, rx507_fail1523
    repr_get_attr_int $I11, self, rx507_curclass, "$!from"
    ne $I11, -1, rxscan508_done1529
    goto rxscan508_scan1528
  rxscan508_loop1527:
    inc rx507_pos
    gt rx507_pos, rx507_eos, rx507_fail1523
    repr_bind_attr_int rx507_cur, rx507_curclass, "$!from", rx507_pos
  rxscan508_scan1528:
    nqp_rxmark rx507_bstack, rxscan508_loop1527, rx507_pos, 0
  rxscan508_done1529:
    repr_bind_attr_int rx507_cur, rx507_curclass, "$!pos", rx507_pos
    store_lex unicode:"$\x{a2}", rx507_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1530
    nqp_get_sc_object $P5006, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1531
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5004, $P5007
  fallback1531:
    unless_null $P5004, vivi_5091532
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_5091532:
    set $P5003, $P5004
  fallback1530:
    set $P101, $P5003
    repr_bind_attr_int rx507_cur, rx507_curclass, "$!pos", rx507_pos
    store_lex unicode:"$\x{a2}", rx507_cur
    box $P5009, "native"
    set $P102, $P5009
    nqp_rxmark rx507_bstack, rxcap510_fail1534, rx507_pos, 0
    add $I11, rx507_pos, 6
    gt $I11, rx507_eos, rx507_fail1523
    substr $S10, rx507_tgt, rx507_pos, 6
    ne $S10, ucs4:"native", rx507_fail1523
    add rx507_pos, 6
    nqp_rxpeek $I19, rx507_bstack, rxcap510_fail1534
    inc $I19
    set $I11, rx507_bstack[$I19]
    repr_bind_attr_int rx507_cur, rx507_curclass, "$!pos", rx507_pos
    $P11 = rx507_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx507_pos)
    rx507_cstack = rx507_cur."!cursor_capture"($P11, "sym")
    goto rxcap510_done1533
  rxcap510_fail1534:
    goto rx507_fail1523
  rxcap510_done1533:
    repr_bind_attr_int rx507_cur, rx507_curclass, "$!pos", rx507_pos
    $P11 = rx507_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx507_curclass, "$!pos"
    lt $I11, 0, rx507_fail1523
    nqp_rxmark rx507_bstack, rxsubrule511_pass1535, -1, 0
  rxsubrule511_pass1535:
    rx507_cstack = rx507_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx507_pos, $P11, rx507_curclass, "$!pos"
    rx507_cur."!cursor_pass"(rx507_pos, "package_declarator:sym<native>", 'backtrack'=>1)
    .return (rx507_cur)
  rx507_restart1522:
    repr_get_attr_obj rx507_cstack, rx507_cur, rx507_curclass, "$!cstack"
  rx507_fail1523:
    unless rx507_bstack, rx507_done1521
    pop $I19, rx507_bstack
    if_null rx507_cstack, rx507_cstack_done1526
    unless rx507_cstack, rx507_cstack_done1526
    dec $I19
    set $P11, rx507_cstack[$I19]
  rx507_cstack_done1526:
    pop rx507_rep, rx507_bstack
    pop rx507_pos, rx507_bstack
    pop $I19, rx507_bstack
    lt rx507_pos, -1, rx507_done1521
    lt rx507_pos, 0, rx507_fail1523
    eq $I19, 0, rx507_fail1523
    nqp_islist $I20, rx507_cstack
    unless $I20, rx507_jump1524
    elements $I18, rx507_bstack
    le $I18, 0, rx507_cut1525
    dec $I18
    set $I18, rx507_bstack[$I18]
  rx507_cut1525:
    assign rx507_cstack, $I18
  rx507_jump1524:
    jump $I19
  rx507_done1521:
    rx507_cur."!cursor_fail"()
    .return (rx507_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_106_1349901750.327_caps" :subid("cuid_memo_146_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["package_def"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_106_1349901750.327_nfa" :subid("cuid_memo_147_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 110
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 97
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 116
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 105
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 2
    push $P5027, $P5028
    box $P5029, 118
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 2
    push $P5031, $P5032
    box $P5033, 101
    push $P5031, $P5033
    box $P5034, 9
    push $P5031, $P5034
    push $P5001, $P5031
    new $P5035, 'ResizablePMCArray'
    box $P5036, 8
    push $P5035, $P5036
    box $P5037, "package_def"
    push $P5035, $P5037
    box $P5038, 0
    push $P5035, $P5038
    push $P5001, $P5035
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<stub>" :subid("cuid_107_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 955
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx512_tgt
    .local int rx512_pos
    .local int rx512_off
    .local int rx512_eos
    .local int rx512_rep
    .local pmc rx512_cur
    .local pmc rx512_curclass
    .local pmc rx512_bstack
    .local pmc rx512_cstack
    (rx512_cur, rx512_tgt, rx512_pos, rx512_curclass, rx512_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx512_cur
    length rx512_eos, rx512_tgt
    eq $I19, 1, rx512_restart1538
    gt rx512_pos, rx512_eos, rx512_fail1539
    repr_get_attr_int $I11, self, rx512_curclass, "$!from"
    ne $I11, -1, rxscan513_done1545
    goto rxscan513_scan1544
  rxscan513_loop1543:
    inc rx512_pos
    gt rx512_pos, rx512_eos, rx512_fail1539
    repr_bind_attr_int rx512_cur, rx512_curclass, "$!from", rx512_pos
  rxscan513_scan1544:
    nqp_rxmark rx512_bstack, rxscan513_loop1543, rx512_pos, 0
  rxscan513_done1545:
    repr_bind_attr_int rx512_cur, rx512_curclass, "$!pos", rx512_pos
    store_lex unicode:"$\x{a2}", rx512_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1546
    nqp_get_sc_object $P5006, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1547
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5004, $P5007
  fallback1547:
    unless_null $P5004, vivi_5141548
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_5141548:
    set $P5003, $P5004
  fallback1546:
    set $P101, $P5003
    repr_bind_attr_int rx512_cur, rx512_curclass, "$!pos", rx512_pos
    store_lex unicode:"$\x{a2}", rx512_cur
    box $P5009, "stub"
    set $P102, $P5009
    nqp_rxmark rx512_bstack, rxcap515_fail1550, rx512_pos, 0
    add $I11, rx512_pos, 4
    gt $I11, rx512_eos, rx512_fail1539
    substr $S10, rx512_tgt, rx512_pos, 4
    ne $S10, ucs4:"stub", rx512_fail1539
    add rx512_pos, 4
    nqp_rxpeek $I19, rx512_bstack, rxcap515_fail1550
    inc $I19
    set $I11, rx512_bstack[$I19]
    repr_bind_attr_int rx512_cur, rx512_curclass, "$!pos", rx512_pos
    $P11 = rx512_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx512_pos)
    rx512_cstack = rx512_cur."!cursor_capture"($P11, "sym")
    goto rxcap515_done1549
  rxcap515_fail1550:
    goto rx512_fail1539
  rxcap515_done1549:
    repr_bind_attr_int rx512_cur, rx512_curclass, "$!pos", rx512_pos
    $P11 = rx512_cur."ws"()
    repr_get_attr_int $I11, $P11, rx512_curclass, "$!pos"
    lt $I11, 0, rx512_fail1539
    repr_get_attr_int rx512_pos, $P11, rx512_curclass, "$!pos"
    repr_bind_attr_int rx512_cur, rx512_curclass, "$!pos", rx512_pos
    $P11 = rx512_cur."name"()
    repr_get_attr_int $I11, $P11, rx512_curclass, "$!pos"
    lt $I11, 0, rx512_fail1539
    nqp_rxmark rx512_bstack, rxsubrule517_pass1552, -1, 0
  rxsubrule517_pass1552:
    rx512_cstack = rx512_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx512_pos, $P11, rx512_curclass, "$!pos"
    repr_bind_attr_int rx512_cur, rx512_curclass, "$!pos", rx512_pos
    $P11 = rx512_cur."ws"()
    repr_get_attr_int $I11, $P11, rx512_curclass, "$!pos"
    lt $I11, 0, rx512_fail1539
    repr_get_attr_int rx512_pos, $P11, rx512_curclass, "$!pos"
    add $I11, rx512_pos, 9
    gt $I11, rx512_eos, rx512_fail1539
    substr $S10, rx512_tgt, rx512_pos, 9
    ne $S10, ucs4:"metaclass", rx512_fail1539
    add rx512_pos, 9
    repr_bind_attr_int rx512_cur, rx512_curclass, "$!pos", rx512_pos
    $P11 = rx512_cur."ws"()
    repr_get_attr_int $I11, $P11, rx512_curclass, "$!pos"
    lt $I11, 0, rx512_fail1539
    repr_get_attr_int rx512_pos, $P11, rx512_curclass, "$!pos"
    repr_bind_attr_int rx512_cur, rx512_curclass, "$!pos", rx512_pos
    $P11 = rx512_cur."name"()
    repr_get_attr_int $I11, $P11, rx512_curclass, "$!pos"
    lt $I11, 0, rx512_fail1539
    nqp_rxmark rx512_bstack, rxsubrule520_pass1555, -1, 0
  rxsubrule520_pass1555:
    rx512_cstack = rx512_cur."!cursor_capture"($P11, "metaclass")
    repr_get_attr_int rx512_pos, $P11, rx512_curclass, "$!pos"
    repr_bind_attr_int rx512_cur, rx512_curclass, "$!pos", rx512_pos
    $P11 = rx512_cur."ws"()
    repr_get_attr_int $I11, $P11, rx512_curclass, "$!pos"
    lt $I11, 0, rx512_fail1539
    repr_get_attr_int rx512_pos, $P11, rx512_curclass, "$!pos"
    add $I11, rx512_pos, 1
    gt $I11, rx512_eos, rx512_fail1539
    substr $S10, rx512_tgt, rx512_pos, 1
    ne $S10, ucs4:"{", rx512_fail1539
    add rx512_pos, 1
    repr_bind_attr_int rx512_cur, rx512_curclass, "$!pos", rx512_pos
    $P11 = rx512_cur."ws"()
    repr_get_attr_int $I11, $P11, rx512_curclass, "$!pos"
    lt $I11, 0, rx512_fail1539
    repr_get_attr_int rx512_pos, $P11, rx512_curclass, "$!pos"
    add $I11, rx512_pos, 3
    gt $I11, rx512_eos, rx512_fail1539
    substr $S10, rx512_tgt, rx512_pos, 3
    ne $S10, ucs4:"...", rx512_fail1539
    add rx512_pos, 3
    repr_bind_attr_int rx512_cur, rx512_curclass, "$!pos", rx512_pos
    $P11 = rx512_cur."ws"()
    repr_get_attr_int $I11, $P11, rx512_curclass, "$!pos"
    lt $I11, 0, rx512_fail1539
    repr_get_attr_int rx512_pos, $P11, rx512_curclass, "$!pos"
    add $I11, rx512_pos, 1
    gt $I11, rx512_eos, rx512_fail1539
    substr $S10, rx512_tgt, rx512_pos, 1
    ne $S10, ucs4:"}", rx512_fail1539
    add rx512_pos, 1
    repr_bind_attr_int rx512_cur, rx512_curclass, "$!pos", rx512_pos
    $P11 = rx512_cur."ws"()
    repr_get_attr_int $I11, $P11, rx512_curclass, "$!pos"
    lt $I11, 0, rx512_fail1539
    repr_get_attr_int rx512_pos, $P11, rx512_curclass, "$!pos"
    rx512_cur."!cursor_pass"(rx512_pos, "package_declarator:sym<stub>", 'backtrack'=>1)
    .return (rx512_cur)
  rx512_restart1538:
    repr_get_attr_obj rx512_cstack, rx512_cur, rx512_curclass, "$!cstack"
  rx512_fail1539:
    unless rx512_bstack, rx512_done1537
    pop $I19, rx512_bstack
    if_null rx512_cstack, rx512_cstack_done1542
    unless rx512_cstack, rx512_cstack_done1542
    dec $I19
    set $P11, rx512_cstack[$I19]
  rx512_cstack_done1542:
    pop rx512_rep, rx512_bstack
    pop rx512_pos, rx512_bstack
    pop $I19, rx512_bstack
    lt rx512_pos, -1, rx512_done1537
    lt rx512_pos, 0, rx512_fail1539
    eq $I19, 0, rx512_fail1539
    nqp_islist $I20, rx512_cstack
    unless $I20, rx512_jump1540
    elements $I18, rx512_bstack
    le $I18, 0, rx512_cut1541
    dec $I18
    set $I18, rx512_bstack[$I18]
  rx512_cut1541:
    assign rx512_cstack, $I18
  rx512_jump1540:
    jump $I19
  rx512_done1537:
    rx512_cur."!cursor_fail"()
    .return (rx512_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_107_1349901750.327_caps" :subid("cuid_memo_148_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["name"], $P5003
    box $P5004, 0
    set $P5001["metaclass"], $P5004
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_107_1349901750.327_nfa" :subid("cuid_memo_149_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 115
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 116
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 117
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 98
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 0
    push $P5027, $P5028
    box $P5029, 0
    push $P5027, $P5029
    box $P5030, 0
    push $P5027, $P5030
    push $P5001, $P5027
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_def" :subid("cuid_108_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 963
    .param pmc _lex_param_0 
    .const 'Sub' $P5010 = 'cuid_391_1349901750.327' 
    capture_lex $P5010 
    .lex "$*PACKAGE", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx525_tgt
    .local int rx525_pos
    .local int rx525_off
    .local int rx525_eos
    .local int rx525_rep
    .local pmc rx525_cur
    .local pmc rx525_curclass
    .local pmc rx525_bstack
    .local pmc rx525_cstack
    (rx525_cur, rx525_tgt, rx525_pos, rx525_curclass, rx525_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx525_cur
    length rx525_eos, rx525_tgt
    eq $I19, 1, rx525_restart1562
    gt rx525_pos, rx525_eos, rx525_fail1563
    repr_get_attr_int $I11, self, rx525_curclass, "$!from"
    ne $I11, -1, rxscan526_done1569
    goto rxscan526_scan1568
  rxscan526_loop1567:
    inc rx525_pos
    gt rx525_pos, rx525_eos, rx525_fail1563
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!from", rx525_pos
  rxscan526_scan1568:
    nqp_rxmark rx525_bstack, rxscan526_loop1567, rx525_pos, 0
  rxscan526_done1569:
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1563
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    store_lex unicode:"$\x{a2}", rx525_cur
    unless_null $P101, fallback1571
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$PACKAGE"]
    unless_null $P5002, fallback1572
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5005
  fallback1572:
    unless_null $P5002, vivi_5281573
    die "Contextual $*PACKAGE not found"
    box $P5006, "Contextual $*PACKAGE not found"
    set $P5002, $P5006
  vivi_5281573:
    set $P101, $P5002
  fallback1571:
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1563
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."name"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1563
    nqp_rxmark rx525_bstack, rxsubrule530_pass1575, -1, 0
  rxsubrule530_pass1575:
    rx525_cstack = rx525_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1563
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    nqp_rxmark rx525_bstack, rxquantr532_done1578, rx525_pos, 0
  rxquantr532_loop1577:
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1563
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    add $I11, rx525_pos, 2
    gt $I11, rx525_eos, rx525_fail1563
    substr $S10, rx525_tgt, rx525_pos, 2
    ne $S10, ucs4:"is", rx525_fail1563
    add rx525_pos, 2
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1563
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    add $I11, rx525_pos, 5
    gt $I11, rx525_eos, rx525_fail1563
    substr $S10, rx525_tgt, rx525_pos, 5
    ne $S10, ucs4:"repr(", rx525_fail1563
    add rx525_pos, 5
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1563
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."quote_EXPR"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1563
    nqp_rxmark rx525_bstack, rxsubrule536_pass1582, -1, 0
  rxsubrule536_pass1582:
    rx525_cstack = rx525_cur."!cursor_capture"($P11, "repr")
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1563
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    add $I11, rx525_pos, 1
    gt $I11, rx525_eos, rx525_fail1563
    substr $S10, rx525_tgt, rx525_pos, 1
    ne $S10, ucs4:")", rx525_fail1563
    add rx525_pos, 1
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1563
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    nqp_rxpeek $I19, rx525_bstack, rxquantr532_done1578
    inc $I19
    inc $I19
    set rx525_rep, rx525_bstack[$I19]
    nqp_rxcommit rx525_bstack, rxquantr532_done1578
    inc rx525_rep
  rxquantr532_done1578:
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1563
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    store_lex unicode:"$\x{a2}", rx525_cur
    $P5007 = $P102."MATCH"()
    set $P103, $P5007
    .const 'Sub' $P5008 = 'cuid_391_1349901750.327' 
    capture_lex $P5008
    $P5009 = $P5008()
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1563
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    nqp_rxmark rx525_bstack, rxquantr563_done1678, rx525_pos, 0
  rxquantr563_loop1677:
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1563
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    nqp_rxmark rx525_bstack, rxcap565_fail1681, rx525_pos, 0
    add $I11, rx525_pos, 9
    gt $I11, rx525_eos, rx525_fail1563
    substr $S10, rx525_tgt, rx525_pos, 9
    ne $S10, ucs4:"is export", rx525_fail1563
    add rx525_pos, 9
    nqp_rxpeek $I19, rx525_bstack, rxcap565_fail1681
    inc $I19
    set $I11, rx525_bstack[$I19]
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx525_pos)
    rx525_cstack = rx525_cur."!cursor_capture"($P11, "export")
    goto rxcap565_done1680
  rxcap565_fail1681:
    goto rx525_fail1563
  rxcap565_done1680:
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1563
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    nqp_rxpeek $I19, rx525_bstack, rxquantr563_done1678
    inc $I19
    inc $I19
    set rx525_rep, rx525_bstack[$I19]
    nqp_rxcommit rx525_bstack, rxquantr563_done1678
    inc rx525_rep
  rxquantr563_done1678:
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1563
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    nqp_rxmark rx525_bstack, rxquantr568_done1685, rx525_pos, 0
  rxquantr568_loop1684:
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1563
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    add $I11, rx525_pos, 2
    gt $I11, rx525_eos, rx525_fail1563
    substr $S10, rx525_tgt, rx525_pos, 2
    ne $S10, ucs4:"is", rx525_fail1563
    add rx525_pos, 2
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1563
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."name"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1563
    nqp_rxmark rx525_bstack, rxsubrule571_pass1688, -1, 0
  rxsubrule571_pass1688:
    rx525_cstack = rx525_cur."!cursor_capture"($P11, "parent")
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1563
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    nqp_rxpeek $I19, rx525_bstack, rxquantr568_done1685
    inc $I19
    inc $I19
    set rx525_rep, rx525_bstack[$I19]
    nqp_rxcommit rx525_bstack, rxquantr568_done1685
    inc rx525_rep
  rxquantr568_done1685:
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1563
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    nqp_rxmark rx525_bstack, rxquantr574_done1692, rx525_pos, 0
  rxquantr574_loop1691:
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1563
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    add $I11, rx525_pos, 4
    gt $I11, rx525_eos, rx525_fail1563
    substr $S10, rx525_tgt, rx525_pos, 4
    ne $S10, ucs4:"does", rx525_fail1563
    add rx525_pos, 4
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1563
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."name"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1563
    nqp_rxmark rx525_bstack, rxsubrule577_pass1695, -1, 0
  rxsubrule577_pass1695:
    rx525_cstack = rx525_cur."!cursor_capture"($P11, "role")
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1563
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    nqp_rxpeek $I19, rx525_bstack, rxquantr574_done1692
    inc $I19
    inc $I19
    set rx525_rep, rx525_bstack[$I19]
    nqp_rxcommit rx525_bstack, rxquantr574_done1692
    inc rx525_rep
    nqp_rxmark rx525_bstack, rxquantr574_done1692, rx525_pos, rx525_rep
    goto rxquantr574_loop1691
  rxquantr574_done1692:
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1563
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
  alt580_01699:
    nqp_rxmark rx525_bstack, alt580_11704, rx525_pos, 0
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1563
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    add $I11, rx525_pos, 1
    gt $I11, rx525_eos, rx525_fail1563
    substr $S10, rx525_tgt, rx525_pos, 1
    ne $S10, ucs4:";", rx525_fail1563
    add rx525_pos, 1
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1563
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."comp_unit"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1563
    nqp_rxmark rx525_bstack, rxsubrule583_pass1702, -1, 0
  rxsubrule583_pass1702:
    rx525_cstack = rx525_cur."!cursor_capture"($P11, "comp_unit")
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1563
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    goto alt580_end1698
  alt580_11704:
    nqp_rxmark rx525_bstack, alt580_21709, rx525_pos, 0
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1563
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    ge rx525_pos, rx525_eos, rx525_fail1563
    substr $S11, rx525_tgt, rx525_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx525_fail1563
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1563
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."block"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1563
    nqp_rxmark rx525_bstack, rxsubrule587_pass1707, -1, 0
  rxsubrule587_pass1707:
    rx525_cstack = rx525_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1563
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    goto alt580_end1698
  alt580_21709:
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1563
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."panic"("Malformed package declaration")
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1563
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1563
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
  alt580_end1698:
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1563
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    rx525_cur."!cursor_pass"(rx525_pos, "package_def", 'backtrack'=>1)
    .return (rx525_cur)
  rx525_restart1562:
    repr_get_attr_obj rx525_cstack, rx525_cur, rx525_curclass, "$!cstack"
  rx525_fail1563:
    unless rx525_bstack, rx525_done1561
    pop $I19, rx525_bstack
    if_null rx525_cstack, rx525_cstack_done1566
    unless rx525_cstack, rx525_cstack_done1566
    dec $I19
    set $P11, rx525_cstack[$I19]
  rx525_cstack_done1566:
    pop rx525_rep, rx525_bstack
    pop rx525_pos, rx525_bstack
    pop $I19, rx525_bstack
    lt rx525_pos, -1, rx525_done1561
    lt rx525_pos, 0, rx525_fail1563
    eq $I19, 0, rx525_fail1563
    nqp_islist $I20, rx525_cstack
    unless $I20, rx525_jump1564
    elements $I18, rx525_bstack
    le $I18, 0, rx525_cut1565
    dec $I18
    set $I18, rx525_bstack[$I18]
  rx525_cut1565:
    assign rx525_cstack, $I18
  rx525_jump1564:
    jump $I19
  rx525_done1561:
    rx525_cur."!cursor_fail"()
    .return (rx525_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_108_1349901750.327_caps" :subid("cuid_memo_150_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["name"], $P5002
    box $P5003, 2
    set $P5001["repr"], $P5003
    box $P5004, 2
    set $P5001["export"], $P5004
    box $P5005, 2
    set $P5001["parent"], $P5005
    box $P5006, 2
    set $P5001["role"], $P5006
    box $P5007, 0
    set $P5001["comp_unit"], $P5007
    box $P5008, 0
    set $P5001["block"], $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_391_1349901750.327") :anon :lex :outer("cuid_108_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 969
    .lex "%args", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5003, "$/"
    unless_null $P5003, fallback1586
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5003, $P5004
  fallback1586:
    set $P5002, $P5003["name"]
    unless_null $P5002, fallback1587
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5005
  fallback1587:
    set $S5001, $P5002
    box $P5006, $S5001
    set $P101["name"], $P5006
    find_lex $P5008, "$/"
    unless_null $P5008, fallback1590
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5008, $P5009
  fallback1590:
    set $P5007, $P5008["repr"]
    unless_null $P5007, fallback1591
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5007, $P5010
  fallback1591:
    set $P5024, $P5007
    unless $P5007 goto if540_end1589 
.annotate 'line', 974
    find_lex $P5016, "$/"
    unless_null $P5016, fallback1592
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5016, $P5017
  fallback1592:
    set $P5015, $P5016["repr"]
    unless_null $P5015, fallback1593
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5015, $P5018
  fallback1593:
    set $P5014, $P5015[0]
    unless_null $P5014, fallback1594
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5014, $P5019
  fallback1594:
    set $P5013, $P5014["quote_delimited"]
    unless_null $P5013, fallback1595
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5013, $P5020
  fallback1595:
    set $P5012, $P5013["quote_atom"]
    unless_null $P5012, fallback1596
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5012, $P5021
  fallback1596:
    set $P5011, $P5012[0]
    unless_null $P5011, fallback1597
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5011, $P5022
  fallback1597:
    set $S5002, $P5011
    box $P5023, $S5002
    set $P101["repr"], $P5023
    set $P5024, $P5023
  if540_end1589:
.annotate 'line', 977
    find_dynamic_lex $P5025, "$*W"
    unless_null $P5025, fallback1598
    nqp_get_sc_object $P5028, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5027, $P5028
    set $P5026, $P5027["$W"]
    unless_null $P5026, fallback1599
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5026, $P5029
  fallback1599:
    unless_null $P5026, vivi_5411600
    die "Contextual $*W not found"
    box $P5030, "Contextual $*W not found"
    set $P5026, $P5030
  vivi_5411600:
    set $P5025, $P5026
  fallback1598:
    find_dynamic_lex $P5032, "%*HOW"
    unless_null $P5032, fallback1601
    nqp_get_sc_object $P5035, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5034, $P5035
    set $P5033, $P5034["%HOW"]
    unless_null $P5033, fallback1602
    nqp_get_sc_object $P5037, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5036, $P5037
    new $P5038, 'Hash'
    set $P5036["%HOW"], $P5038
    set $P5033, $P5038
  fallback1602:
    unless_null $P5033, vivi_5421603
    die "Contextual %*HOW not found"
    box $P5039, "Contextual %*HOW not found"
    set $P5033, $P5039
  vivi_5421603:
    set $P5032, $P5033
  fallback1601:
    find_dynamic_lex $P5040, "$*PKGDECL"
    unless_null $P5040, fallback1604
    nqp_get_sc_object $P5043, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5042, $P5043
    set $P5041, $P5042["$PKGDECL"]
    unless_null $P5041, fallback1605
    nqp_get_sc_object $P5044, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5041, $P5044
  fallback1605:
    unless_null $P5041, vivi_5431606
    die "Contextual $*PKGDECL not found"
    box $P5045, "Contextual $*PKGDECL not found"
    set $P5041, $P5045
  vivi_5431606:
    set $P5040, $P5041
  fallback1604:
    set $S5003, $P5040
    set $P5031, $P5032[$S5003]
    unless_null $P5031, fallback1607
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5031, $P5046
  fallback1607:
    $P5047 = $P5025."pkg_create_mo"($P5031, $P101 :flat :named)
    store_dynamic_lex "$*PACKAGE", $P5047
    find_dynamic_lex $P5048, "$*SCOPE"
    unless_null $P5048, fallback1612
    nqp_get_sc_object $P5051, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5050, $P5051
    set $P5049, $P5050["$SCOPE"]
    unless_null $P5049, fallback1613
    nqp_get_sc_object $P5052, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5049, $P5052
  fallback1613:
    unless_null $P5049, vivi_5461614
    die "Contextual $*SCOPE not found"
    box $P5053, "Contextual $*SCOPE not found"
    set $P5049, $P5053
  vivi_5461614:
    set $P5048, $P5049
  fallback1612:
    set $S5004, $P5048
    iseq $I5001, $S5004, "our"
    set $I5003, $I5001
    if $I5001 goto unless545_end1611 
    find_dynamic_lex $P5054, "$*SCOPE"
    unless_null $P5054, fallback1615
    nqp_get_sc_object $P5057, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5056, $P5057
    set $P5055, $P5056["$SCOPE"]
    unless_null $P5055, fallback1616
    nqp_get_sc_object $P5058, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5055, $P5058
  fallback1616:
    unless_null $P5055, vivi_5471617
    die "Contextual $*SCOPE not found"
    box $P5059, "Contextual $*SCOPE not found"
    set $P5055, $P5059
  vivi_5471617:
    set $P5054, $P5055
  fallback1615:
    set $S5005, $P5054
    iseq $I5002, $S5005, ""
    set $I5003, $I5002
  unless545_end1611:
    unless $I5003 goto if544_else1608 
.annotate 'line', 980
.annotate 'line', 981
    find_dynamic_lex $P5060, "$*W"
    unless_null $P5060, fallback1618
    nqp_get_sc_object $P5063, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5062, $P5063
    set $P5061, $P5062["$W"]
    unless_null $P5061, fallback1619
    nqp_get_sc_object $P5064, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5061, $P5064
  fallback1619:
    unless_null $P5061, vivi_5481620
    die "Contextual $*W not found"
    box $P5065, "Contextual $*W not found"
    set $P5061, $P5065
  vivi_5481620:
    set $P5060, $P5061
  fallback1618:
    find_dynamic_lex $P5066, "$*OUTERPACKAGE"
    unless_null $P5066, fallback1621
    nqp_get_sc_object $P5069, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5068, $P5069
    set $P5067, $P5068["$OUTERPACKAGE"]
    unless_null $P5067, fallback1622
    nqp_get_sc_object $P5070, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5067, $P5070
  fallback1622:
    unless_null $P5067, vivi_5491623
    die "Contextual $*OUTERPACKAGE not found"
    box $P5071, "Contextual $*OUTERPACKAGE not found"
    set $P5067, $P5071
  vivi_5491623:
    set $P5066, $P5067
  fallback1621:
    find_lex $P5074, "$/"
    unless_null $P5074, fallback1624
    nqp_get_sc_object $P5075, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5074, $P5075
  fallback1624:
    set $P5073, $P5074["name"]
    unless_null $P5073, fallback1625
    nqp_get_sc_object $P5076, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5073, $P5076
  fallback1625:
    set $P5072, $P5073["identifier"]
    unless_null $P5072, fallback1626
    nqp_get_sc_object $P5077, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5072, $P5077
  fallback1626:
    find_dynamic_lex $P5078, "$*PACKAGE"
    unless_null $P5078, fallback1627
    nqp_get_sc_object $P5081, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5080, $P5081
    set $P5079, $P5080["$PACKAGE"]
    unless_null $P5079, fallback1628
    nqp_get_sc_object $P5082, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5079, $P5082
  fallback1628:
    unless_null $P5079, vivi_5501629
    die "Contextual $*PACKAGE not found"
    box $P5083, "Contextual $*PACKAGE not found"
    set $P5079, $P5083
  vivi_5501629:
    set $P5078, $P5079
  fallback1627:
    $P5084 = $P5060."install_package_symbol"($P5066, $P5072, $P5078)
    find_lex $P5087, "$/"
    unless_null $P5087, fallback1632
    nqp_get_sc_object $P5088, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5087, $P5088
  fallback1632:
    set $P5086, $P5087["name"]
    unless_null $P5086, fallback1633
    nqp_get_sc_object $P5089, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5086, $P5089
  fallback1633:
    set $P5085, $P5086["identifier"]
    unless_null $P5085, fallback1634
    nqp_get_sc_object $P5090, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5085, $P5090
  fallback1634:
    set $N5001, $P5085
    set $N5002, 1
    iseq $I5004, $N5001, $N5002
    box $P5120, $I5004
    set $P5119, $P5120
    unless $I5004 goto if551_end1631 
.annotate 'line', 982
.annotate 'line', 983
    find_dynamic_lex $P5091, "$*W"
    unless_null $P5091, fallback1635
    nqp_get_sc_object $P5094, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5093, $P5094
    set $P5092, $P5093["$W"]
    unless_null $P5092, fallback1636
    nqp_get_sc_object $P5095, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5092, $P5095
  fallback1636:
    unless_null $P5092, vivi_5521637
    die "Contextual $*W not found"
    box $P5096, "Contextual $*W not found"
    set $P5092, $P5096
  vivi_5521637:
    set $P5091, $P5092
  fallback1635:
    find_dynamic_lex $P5097, "$*W"
    unless_null $P5097, fallback1638
    nqp_get_sc_object $P5100, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5099, $P5100
    set $P5098, $P5099["$W"]
    unless_null $P5098, fallback1639
    nqp_get_sc_object $P5101, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5098, $P5101
  fallback1639:
    unless_null $P5098, vivi_5531640
    die "Contextual $*W not found"
    box $P5102, "Contextual $*W not found"
    set $P5098, $P5102
  vivi_5531640:
    set $P5097, $P5098
  fallback1638:
    $P5103 = $P5097."cur_lexpad"()
    find_lex $P5107, "$/"
    unless_null $P5107, fallback1641
    nqp_get_sc_object $P5108, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5107, $P5108
  fallback1641:
    set $P5106, $P5107["name"]
    unless_null $P5106, fallback1642
    nqp_get_sc_object $P5109, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5106, $P5109
  fallback1642:
    set $P5105, $P5106["identifier"]
    unless_null $P5105, fallback1643
    nqp_get_sc_object $P5110, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5105, $P5110
  fallback1643:
    set $P5104, $P5105[0]
    unless_null $P5104, fallback1644
    nqp_get_sc_object $P5111, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5104, $P5111
  fallback1644:
    find_dynamic_lex $P5112, "$*PACKAGE"
    unless_null $P5112, fallback1645
    nqp_get_sc_object $P5115, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5114, $P5115
    set $P5113, $P5114["$PACKAGE"]
    unless_null $P5113, fallback1646
    nqp_get_sc_object $P5116, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5113, $P5116
  fallback1646:
    unless_null $P5113, vivi_5541647
    die "Contextual $*PACKAGE not found"
    box $P5117, "Contextual $*PACKAGE not found"
    set $P5113, $P5117
  vivi_5541647:
    set $P5112, $P5113
  fallback1645:
    $P5118 = $P5091."install_lexical_symbol"($P5103, $P5104, $P5112)
    set $P5119, $P5118
  if551_end1631:
    set $P5179, $P5119
    goto if544_end1609
  if544_else1608:
    find_dynamic_lex $P5121, "$*SCOPE"
    unless_null $P5121, fallback1650
    nqp_get_sc_object $P5124, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5123, $P5124
    set $P5122, $P5123["$SCOPE"]
    unless_null $P5122, fallback1651
    nqp_get_sc_object $P5125, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5122, $P5125
  fallback1651:
    unless_null $P5122, vivi_5561652
    die "Contextual $*SCOPE not found"
    box $P5126, "Contextual $*SCOPE not found"
    set $P5122, $P5126
  vivi_5561652:
    set $P5121, $P5122
  fallback1650:
    set $S5006, $P5121
    iseq $I5005, $S5006, "my"
    unless $I5005 goto if555_else1648 
.annotate 'line', 986
    find_lex $P5129, "$/"
    unless_null $P5129, fallback1655
    nqp_get_sc_object $P5130, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5129, $P5130
  fallback1655:
    set $P5128, $P5129["name"]
    unless_null $P5128, fallback1656
    nqp_get_sc_object $P5131, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5128, $P5131
  fallback1656:
    set $P5127, $P5128["identifier"]
    unless_null $P5127, fallback1657
    nqp_get_sc_object $P5132, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5127, $P5132
  fallback1657:
    set $N5003, $P5127
    set $N5004, 1
    isne $I5006, $N5003, $N5004
    box $P5140, $I5006
    set $P5139, $P5140
    unless $I5006 goto if557_end1654 
.annotate 'line', 987
.annotate 'line', 988
    find_lex $P5134, "$/"
    unless_null $P5134, fallback1658
    nqp_get_sc_object $P5135, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5134, $P5135
  fallback1658:
    set $P5133, $P5134["name"]
    unless_null $P5133, fallback1659
    nqp_get_sc_object $P5136, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5133, $P5136
  fallback1659:
    $P5137 = $P5133."CURSOR"()
    $P5138 = $P5137."panic"("A my scoped package cannot have a multi-part name yet")
    set $P5139, $P5138
  if557_end1654:
.annotate 'line', 990
    find_dynamic_lex $P5141, "$*W"
    unless_null $P5141, fallback1660
    nqp_get_sc_object $P5144, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5143, $P5144
    set $P5142, $P5143["$W"]
    unless_null $P5142, fallback1661
    nqp_get_sc_object $P5145, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5142, $P5145
  fallback1661:
    unless_null $P5142, vivi_5581662
    die "Contextual $*W not found"
    box $P5146, "Contextual $*W not found"
    set $P5142, $P5146
  vivi_5581662:
    set $P5141, $P5142
  fallback1660:
    find_dynamic_lex $P5147, "$*W"
    unless_null $P5147, fallback1663
    nqp_get_sc_object $P5150, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5149, $P5150
    set $P5148, $P5149["$W"]
    unless_null $P5148, fallback1664
    nqp_get_sc_object $P5151, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5148, $P5151
  fallback1664:
    unless_null $P5148, vivi_5591665
    die "Contextual $*W not found"
    box $P5152, "Contextual $*W not found"
    set $P5148, $P5152
  vivi_5591665:
    set $P5147, $P5148
  fallback1663:
    $P5153 = $P5147."cur_lexpad"()
    find_lex $P5157, "$/"
    unless_null $P5157, fallback1666
    nqp_get_sc_object $P5158, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5157, $P5158
  fallback1666:
    set $P5156, $P5157["name"]
    unless_null $P5156, fallback1667
    nqp_get_sc_object $P5159, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5156, $P5159
  fallback1667:
    set $P5155, $P5156["identifier"]
    unless_null $P5155, fallback1668
    nqp_get_sc_object $P5160, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5155, $P5160
  fallback1668:
    set $P5154, $P5155[0]
    unless_null $P5154, fallback1669
    nqp_get_sc_object $P5161, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5154, $P5161
  fallback1669:
    find_dynamic_lex $P5162, "$*PACKAGE"
    unless_null $P5162, fallback1670
    nqp_get_sc_object $P5165, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5164, $P5165
    set $P5163, $P5164["$PACKAGE"]
    unless_null $P5163, fallback1671
    nqp_get_sc_object $P5166, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5163, $P5166
  fallback1671:
    unless_null $P5163, vivi_5601672
    die "Contextual $*PACKAGE not found"
    box $P5167, "Contextual $*PACKAGE not found"
    set $P5163, $P5167
  vivi_5601672:
    set $P5162, $P5163
  fallback1670:
    $P5168 = $P5141."install_lexical_symbol"($P5153, $P5154, $P5162)
    set $P5178, $P5168
    goto if555_end1649
  if555_else1648:
.annotate 'line', 992
.annotate 'line', 993
    find_lex $P5169, "$/"
    $P5170 = $P5169."CURSOR"()
    find_dynamic_lex $P5171, "$*SCOPE"
    unless_null $P5171, fallback1673
    nqp_get_sc_object $P5174, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5173, $P5174
    set $P5172, $P5173["$SCOPE"]
    unless_null $P5172, fallback1674
    nqp_get_sc_object $P5175, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5172, $P5175
  fallback1674:
    unless_null $P5172, vivi_5611675
    die "Contextual $*SCOPE not found"
    box $P5176, "Contextual $*SCOPE not found"
    set $P5172, $P5176
  vivi_5611675:
    set $P5171, $P5172
  fallback1673:
    set $S5008, $P5171
    concat $S5007, $S5008, " scoped packages are not supported"
    $P5177 = $P5170."panic"($S5007)
    set $P5178, $P5177
  if555_end1649:
    set $P5179, $P5178
  if544_end1609:
    .return ($P5179) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator" :subid("cuid_109_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1007
    .param pmc self 
    $P5001 = self."!protoregex"("scope_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<my>" :subid("cuid_110_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1008
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx593_tgt
    .local int rx593_pos
    .local int rx593_off
    .local int rx593_eos
    .local int rx593_rep
    .local pmc rx593_cur
    .local pmc rx593_curclass
    .local pmc rx593_bstack
    .local pmc rx593_cstack
    (rx593_cur, rx593_tgt, rx593_pos, rx593_curclass, rx593_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx593_cur
    length rx593_eos, rx593_tgt
    eq $I19, 1, rx593_restart1716
    gt rx593_pos, rx593_eos, rx593_fail1717
    repr_get_attr_int $I11, self, rx593_curclass, "$!from"
    ne $I11, -1, rxscan594_done1723
    goto rxscan594_scan1722
  rxscan594_loop1721:
    inc rx593_pos
    gt rx593_pos, rx593_eos, rx593_fail1717
    repr_bind_attr_int rx593_cur, rx593_curclass, "$!from", rx593_pos
  rxscan594_scan1722:
    nqp_rxmark rx593_bstack, rxscan594_loop1721, rx593_pos, 0
  rxscan594_done1723:
    nqp_rxmark rx593_bstack, rxcap595_fail1725, rx593_pos, 0
    add $I11, rx593_pos, 2
    gt $I11, rx593_eos, rx593_fail1717
    substr $S10, rx593_tgt, rx593_pos, 2
    ne $S10, ucs4:"my", rx593_fail1717
    add rx593_pos, 2
    nqp_rxpeek $I19, rx593_bstack, rxcap595_fail1725
    inc $I19
    set $I11, rx593_bstack[$I19]
    repr_bind_attr_int rx593_cur, rx593_curclass, "$!pos", rx593_pos
    $P11 = rx593_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx593_pos)
    rx593_cstack = rx593_cur."!cursor_capture"($P11, "sym")
    goto rxcap595_done1724
  rxcap595_fail1725:
    goto rx593_fail1717
  rxcap595_done1724:
    repr_bind_attr_int rx593_cur, rx593_curclass, "$!pos", rx593_pos
    $P11 = rx593_cur."scoped"("my")
    repr_get_attr_int $I11, $P11, rx593_curclass, "$!pos"
    lt $I11, 0, rx593_fail1717
    nqp_rxmark rx593_bstack, rxsubrule596_pass1726, -1, 0
  rxsubrule596_pass1726:
    rx593_cstack = rx593_cur."!cursor_capture"($P11, "scoped")
    repr_get_attr_int rx593_pos, $P11, rx593_curclass, "$!pos"
    rx593_cur."!cursor_pass"(rx593_pos, "scope_declarator:sym<my>", 'backtrack'=>1)
    .return (rx593_cur)
  rx593_restart1716:
    repr_get_attr_obj rx593_cstack, rx593_cur, rx593_curclass, "$!cstack"
  rx593_fail1717:
    unless rx593_bstack, rx593_done1715
    pop $I19, rx593_bstack
    if_null rx593_cstack, rx593_cstack_done1720
    unless rx593_cstack, rx593_cstack_done1720
    dec $I19
    set $P11, rx593_cstack[$I19]
  rx593_cstack_done1720:
    pop rx593_rep, rx593_bstack
    pop rx593_pos, rx593_bstack
    pop $I19, rx593_bstack
    lt rx593_pos, -1, rx593_done1715
    lt rx593_pos, 0, rx593_fail1717
    eq $I19, 0, rx593_fail1717
    nqp_islist $I20, rx593_cstack
    unless $I20, rx593_jump1718
    elements $I18, rx593_bstack
    le $I18, 0, rx593_cut1719
    dec $I18
    set $I18, rx593_bstack[$I18]
  rx593_cut1719:
    assign rx593_cstack, $I18
  rx593_jump1718:
    jump $I19
  rx593_done1715:
    rx593_cur."!cursor_fail"()
    .return (rx593_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_110_1349901750.327_caps" :subid("cuid_memo_151_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["scoped"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_110_1349901750.327_nfa" :subid("cuid_memo_152_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 109
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 121
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "scoped"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<our>" :subid("cuid_111_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1009
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx597_tgt
    .local int rx597_pos
    .local int rx597_off
    .local int rx597_eos
    .local int rx597_rep
    .local pmc rx597_cur
    .local pmc rx597_curclass
    .local pmc rx597_bstack
    .local pmc rx597_cstack
    (rx597_cur, rx597_tgt, rx597_pos, rx597_curclass, rx597_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx597_cur
    length rx597_eos, rx597_tgt
    eq $I19, 1, rx597_restart1729
    gt rx597_pos, rx597_eos, rx597_fail1730
    repr_get_attr_int $I11, self, rx597_curclass, "$!from"
    ne $I11, -1, rxscan598_done1736
    goto rxscan598_scan1735
  rxscan598_loop1734:
    inc rx597_pos
    gt rx597_pos, rx597_eos, rx597_fail1730
    repr_bind_attr_int rx597_cur, rx597_curclass, "$!from", rx597_pos
  rxscan598_scan1735:
    nqp_rxmark rx597_bstack, rxscan598_loop1734, rx597_pos, 0
  rxscan598_done1736:
    nqp_rxmark rx597_bstack, rxcap599_fail1738, rx597_pos, 0
    add $I11, rx597_pos, 3
    gt $I11, rx597_eos, rx597_fail1730
    substr $S10, rx597_tgt, rx597_pos, 3
    ne $S10, ucs4:"our", rx597_fail1730
    add rx597_pos, 3
    nqp_rxpeek $I19, rx597_bstack, rxcap599_fail1738
    inc $I19
    set $I11, rx597_bstack[$I19]
    repr_bind_attr_int rx597_cur, rx597_curclass, "$!pos", rx597_pos
    $P11 = rx597_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx597_pos)
    rx597_cstack = rx597_cur."!cursor_capture"($P11, "sym")
    goto rxcap599_done1737
  rxcap599_fail1738:
    goto rx597_fail1730
  rxcap599_done1737:
    repr_bind_attr_int rx597_cur, rx597_curclass, "$!pos", rx597_pos
    $P11 = rx597_cur."scoped"("our")
    repr_get_attr_int $I11, $P11, rx597_curclass, "$!pos"
    lt $I11, 0, rx597_fail1730
    nqp_rxmark rx597_bstack, rxsubrule600_pass1739, -1, 0
  rxsubrule600_pass1739:
    rx597_cstack = rx597_cur."!cursor_capture"($P11, "scoped")
    repr_get_attr_int rx597_pos, $P11, rx597_curclass, "$!pos"
    rx597_cur."!cursor_pass"(rx597_pos, "scope_declarator:sym<our>", 'backtrack'=>1)
    .return (rx597_cur)
  rx597_restart1729:
    repr_get_attr_obj rx597_cstack, rx597_cur, rx597_curclass, "$!cstack"
  rx597_fail1730:
    unless rx597_bstack, rx597_done1728
    pop $I19, rx597_bstack
    if_null rx597_cstack, rx597_cstack_done1733
    unless rx597_cstack, rx597_cstack_done1733
    dec $I19
    set $P11, rx597_cstack[$I19]
  rx597_cstack_done1733:
    pop rx597_rep, rx597_bstack
    pop rx597_pos, rx597_bstack
    pop $I19, rx597_bstack
    lt rx597_pos, -1, rx597_done1728
    lt rx597_pos, 0, rx597_fail1730
    eq $I19, 0, rx597_fail1730
    nqp_islist $I20, rx597_cstack
    unless $I20, rx597_jump1731
    elements $I18, rx597_bstack
    le $I18, 0, rx597_cut1732
    dec $I18
    set $I18, rx597_bstack[$I18]
  rx597_cut1732:
    assign rx597_cstack, $I18
  rx597_jump1731:
    jump $I19
  rx597_done1728:
    rx597_cur."!cursor_fail"()
    .return (rx597_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_111_1349901750.327_caps" :subid("cuid_memo_153_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["scoped"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_111_1349901750.327_nfa" :subid("cuid_memo_154_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 111
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 117
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 114
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "scoped"
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<has>" :subid("cuid_112_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1010
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx601_tgt
    .local int rx601_pos
    .local int rx601_off
    .local int rx601_eos
    .local int rx601_rep
    .local pmc rx601_cur
    .local pmc rx601_curclass
    .local pmc rx601_bstack
    .local pmc rx601_cstack
    (rx601_cur, rx601_tgt, rx601_pos, rx601_curclass, rx601_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx601_cur
    length rx601_eos, rx601_tgt
    eq $I19, 1, rx601_restart1742
    gt rx601_pos, rx601_eos, rx601_fail1743
    repr_get_attr_int $I11, self, rx601_curclass, "$!from"
    ne $I11, -1, rxscan602_done1749
    goto rxscan602_scan1748
  rxscan602_loop1747:
    inc rx601_pos
    gt rx601_pos, rx601_eos, rx601_fail1743
    repr_bind_attr_int rx601_cur, rx601_curclass, "$!from", rx601_pos
  rxscan602_scan1748:
    nqp_rxmark rx601_bstack, rxscan602_loop1747, rx601_pos, 0
  rxscan602_done1749:
    nqp_rxmark rx601_bstack, rxcap603_fail1751, rx601_pos, 0
    add $I11, rx601_pos, 3
    gt $I11, rx601_eos, rx601_fail1743
    substr $S10, rx601_tgt, rx601_pos, 3
    ne $S10, ucs4:"has", rx601_fail1743
    add rx601_pos, 3
    nqp_rxpeek $I19, rx601_bstack, rxcap603_fail1751
    inc $I19
    set $I11, rx601_bstack[$I19]
    repr_bind_attr_int rx601_cur, rx601_curclass, "$!pos", rx601_pos
    $P11 = rx601_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx601_pos)
    rx601_cstack = rx601_cur."!cursor_capture"($P11, "sym")
    goto rxcap603_done1750
  rxcap603_fail1751:
    goto rx601_fail1743
  rxcap603_done1750:
    repr_bind_attr_int rx601_cur, rx601_curclass, "$!pos", rx601_pos
    $P11 = rx601_cur."scoped"("has")
    repr_get_attr_int $I11, $P11, rx601_curclass, "$!pos"
    lt $I11, 0, rx601_fail1743
    nqp_rxmark rx601_bstack, rxsubrule604_pass1752, -1, 0
  rxsubrule604_pass1752:
    rx601_cstack = rx601_cur."!cursor_capture"($P11, "scoped")
    repr_get_attr_int rx601_pos, $P11, rx601_curclass, "$!pos"
    rx601_cur."!cursor_pass"(rx601_pos, "scope_declarator:sym<has>", 'backtrack'=>1)
    .return (rx601_cur)
  rx601_restart1742:
    repr_get_attr_obj rx601_cstack, rx601_cur, rx601_curclass, "$!cstack"
  rx601_fail1743:
    unless rx601_bstack, rx601_done1741
    pop $I19, rx601_bstack
    if_null rx601_cstack, rx601_cstack_done1746
    unless rx601_cstack, rx601_cstack_done1746
    dec $I19
    set $P11, rx601_cstack[$I19]
  rx601_cstack_done1746:
    pop rx601_rep, rx601_bstack
    pop rx601_pos, rx601_bstack
    pop $I19, rx601_bstack
    lt rx601_pos, -1, rx601_done1741
    lt rx601_pos, 0, rx601_fail1743
    eq $I19, 0, rx601_fail1743
    nqp_islist $I20, rx601_cstack
    unless $I20, rx601_jump1744
    elements $I18, rx601_bstack
    le $I18, 0, rx601_cut1745
    dec $I18
    set $I18, rx601_bstack[$I18]
  rx601_cut1745:
    assign rx601_cstack, $I18
  rx601_jump1744:
    jump $I19
  rx601_done1741:
    rx601_cur."!cursor_fail"()
    .return (rx601_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_112_1349901750.327_caps" :subid("cuid_memo_155_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["scoped"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_112_1349901750.327_nfa" :subid("cuid_memo_156_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 104
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 97
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 115
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "scoped"
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "scoped" :subid("cuid_113_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1012
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .lex "$*SCOPE", _lex_param_1 
    .local pmc self 
    set self, _lex_param_0
    .local string rx605_tgt
    .local int rx605_pos
    .local int rx605_off
    .local int rx605_eos
    .local int rx605_rep
    .local pmc rx605_cur
    .local pmc rx605_curclass
    .local pmc rx605_bstack
    .local pmc rx605_cstack
    (rx605_cur, rx605_tgt, rx605_pos, rx605_curclass, rx605_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx605_cur
    length rx605_eos, rx605_tgt
    eq $I19, 1, rx605_restart1755
    gt rx605_pos, rx605_eos, rx605_fail1756
    repr_get_attr_int $I11, self, rx605_curclass, "$!from"
    ne $I11, -1, rxscan606_done1762
    goto rxscan606_scan1761
  rxscan606_loop1760:
    inc rx605_pos
    gt rx605_pos, rx605_eos, rx605_fail1756
    repr_bind_attr_int rx605_cur, rx605_curclass, "$!from", rx605_pos
  rxscan606_scan1761:
    nqp_rxmark rx605_bstack, rxscan606_loop1760, rx605_pos, 0
  rxscan606_done1762:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt607_01764
    nqp_push_label $P11, alt607_11768
    nqp_push_label $P11, alt607_21772
    nqp_rxmark rx605_bstack, alt607_end1763, -1, 0
    rx605_cur."!alt"(rx605_pos, "alt_nfa__21_1349901752.425", $P11)
    goto rx605_fail1756
  alt607_01764:
    repr_bind_attr_int rx605_cur, rx605_curclass, "$!pos", rx605_pos
    $P11 = rx605_cur."ws"()
    repr_get_attr_int $I11, $P11, rx605_curclass, "$!pos"
    lt $I11, 0, rx605_fail1756
    repr_get_attr_int rx605_pos, $P11, rx605_curclass, "$!pos"
    repr_bind_attr_int rx605_cur, rx605_curclass, "$!pos", rx605_pos
    $P11 = rx605_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx605_curclass, "$!pos"
    lt $I11, 0, rx605_fail1756
    nqp_rxmark rx605_bstack, rxsubrule609_pass1766, -1, 0
  rxsubrule609_pass1766:
    rx605_cstack = rx605_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx605_pos, $P11, rx605_curclass, "$!pos"
    repr_bind_attr_int rx605_cur, rx605_curclass, "$!pos", rx605_pos
    $P11 = rx605_cur."ws"()
    repr_get_attr_int $I11, $P11, rx605_curclass, "$!pos"
    lt $I11, 0, rx605_fail1756
    repr_get_attr_int rx605_pos, $P11, rx605_curclass, "$!pos"
    goto alt607_end1763
  alt607_11768:
    repr_bind_attr_int rx605_cur, rx605_curclass, "$!pos", rx605_pos
    $P11 = rx605_cur."ws"()
    repr_get_attr_int $I11, $P11, rx605_curclass, "$!pos"
    lt $I11, 0, rx605_fail1756
    repr_get_attr_int rx605_pos, $P11, rx605_curclass, "$!pos"
    repr_bind_attr_int rx605_cur, rx605_curclass, "$!pos", rx605_pos
    $P11 = rx605_cur."multi_declarator"()
    repr_get_attr_int $I11, $P11, rx605_curclass, "$!pos"
    lt $I11, 0, rx605_fail1756
    nqp_rxmark rx605_bstack, rxsubrule612_pass1770, -1, 0
  rxsubrule612_pass1770:
    rx605_cstack = rx605_cur."!cursor_capture"($P11, "multi_declarator")
    repr_get_attr_int rx605_pos, $P11, rx605_curclass, "$!pos"
    repr_bind_attr_int rx605_cur, rx605_curclass, "$!pos", rx605_pos
    $P11 = rx605_cur."ws"()
    repr_get_attr_int $I11, $P11, rx605_curclass, "$!pos"
    lt $I11, 0, rx605_fail1756
    repr_get_attr_int rx605_pos, $P11, rx605_curclass, "$!pos"
    goto alt607_end1763
  alt607_21772:
    repr_bind_attr_int rx605_cur, rx605_curclass, "$!pos", rx605_pos
    $P11 = rx605_cur."ws"()
    repr_get_attr_int $I11, $P11, rx605_curclass, "$!pos"
    lt $I11, 0, rx605_fail1756
    repr_get_attr_int rx605_pos, $P11, rx605_curclass, "$!pos"
    repr_bind_attr_int rx605_cur, rx605_curclass, "$!pos", rx605_pos
    $P11 = rx605_cur."package_declarator"()
    repr_get_attr_int $I11, $P11, rx605_curclass, "$!pos"
    lt $I11, 0, rx605_fail1756
    nqp_rxmark rx605_bstack, rxsubrule615_pass1774, -1, 0
  rxsubrule615_pass1774:
    rx605_cstack = rx605_cur."!cursor_capture"($P11, "package_declarator")
    repr_get_attr_int rx605_pos, $P11, rx605_curclass, "$!pos"
    repr_bind_attr_int rx605_cur, rx605_curclass, "$!pos", rx605_pos
    $P11 = rx605_cur."ws"()
    repr_get_attr_int $I11, $P11, rx605_curclass, "$!pos"
    lt $I11, 0, rx605_fail1756
    repr_get_attr_int rx605_pos, $P11, rx605_curclass, "$!pos"
    goto alt607_end1763
  alt607_end1763:
    rx605_cur."!cursor_pass"(rx605_pos, "scoped", 'backtrack'=>1)
    .return (rx605_cur)
  rx605_restart1755:
    repr_get_attr_obj rx605_cstack, rx605_cur, rx605_curclass, "$!cstack"
  rx605_fail1756:
    unless rx605_bstack, rx605_done1754
    pop $I19, rx605_bstack
    if_null rx605_cstack, rx605_cstack_done1759
    unless rx605_cstack, rx605_cstack_done1759
    dec $I19
    set $P11, rx605_cstack[$I19]
  rx605_cstack_done1759:
    pop rx605_rep, rx605_bstack
    pop rx605_pos, rx605_bstack
    pop $I19, rx605_bstack
    lt rx605_pos, -1, rx605_done1754
    lt rx605_pos, 0, rx605_fail1756
    eq $I19, 0, rx605_fail1756
    nqp_islist $I20, rx605_cstack
    unless $I20, rx605_jump1757
    elements $I18, rx605_bstack
    le $I18, 0, rx605_cut1758
    dec $I18
    set $I18, rx605_bstack[$I18]
  rx605_cut1758:
    assign rx605_cstack, $I18
  rx605_jump1757:
    jump $I19
  rx605_done1754:
    rx605_cur."!cursor_fail"()
    .return (rx605_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_113_1349901750.327_caps" :subid("cuid_memo_157_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["declarator"], $P5002
    box $P5003, 0
    set $P5001["multi_declarator"], $P5003
    box $P5004, 0
    set $P5001["package_declarator"], $P5004
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_113_1349901750.327_alt_nfa__21_1349901752.425" :subid("cuid_memo_158_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 0
    push $P5004, $P5005
    box $P5006, 0
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    box $P5008, 0
    push $P5004, $P5008
    box $P5009, 0
    push $P5004, $P5009
    box $P5010, 0
    push $P5004, $P5010
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5011, 'ResizablePMCArray'
    new $P5012, 'ResizablePMCArray'
    push $P5011, $P5012
    new $P5013, 'ResizablePMCArray'
    box $P5014, 0
    push $P5013, $P5014
    box $P5015, 0
    push $P5013, $P5015
    box $P5016, 0
    push $P5013, $P5016
    box $P5017, 0
    push $P5013, $P5017
    box $P5018, 0
    push $P5013, $P5018
    box $P5019, 0
    push $P5013, $P5019
    push $P5011, $P5013
    push $P5001, $P5011
    new $P5020, 'ResizablePMCArray'
    new $P5021, 'ResizablePMCArray'
    push $P5020, $P5021
    new $P5022, 'ResizablePMCArray'
    box $P5023, 0
    push $P5022, $P5023
    box $P5024, 0
    push $P5022, $P5024
    box $P5025, 0
    push $P5022, $P5025
    box $P5026, 0
    push $P5022, $P5026
    box $P5027, 0
    push $P5022, $P5027
    box $P5028, 0
    push $P5022, $P5028
    push $P5020, $P5022
    push $P5001, $P5020
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "typename" :subid("cuid_114_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1018
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_392_1349901750.327' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx617_tgt
    .local int rx617_pos
    .local int rx617_off
    .local int rx617_eos
    .local int rx617_rep
    .local pmc rx617_cur
    .local pmc rx617_curclass
    .local pmc rx617_bstack
    .local pmc rx617_cstack
    (rx617_cur, rx617_tgt, rx617_pos, rx617_curclass, rx617_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx617_cur
    length rx617_eos, rx617_tgt
    eq $I19, 1, rx617_restart1778
    gt rx617_pos, rx617_eos, rx617_fail1779
    repr_get_attr_int $I11, self, rx617_curclass, "$!from"
    ne $I11, -1, rxscan618_done1785
    goto rxscan618_scan1784
  rxscan618_loop1783:
    inc rx617_pos
    gt rx617_pos, rx617_eos, rx617_fail1779
    repr_bind_attr_int rx617_cur, rx617_curclass, "$!from", rx617_pos
  rxscan618_scan1784:
    nqp_rxmark rx617_bstack, rxscan618_loop1783, rx617_pos, 0
  rxscan618_done1785:
    repr_bind_attr_int rx617_cur, rx617_curclass, "$!pos", rx617_pos
    $P11 = rx617_cur."name"()
    repr_get_attr_int $I11, $P11, rx617_curclass, "$!pos"
    lt $I11, 0, rx617_fail1779
    nqp_rxmark rx617_bstack, rxsubrule619_pass1786, -1, 0
  rxsubrule619_pass1786:
    rx617_cstack = rx617_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx617_pos, $P11, rx617_curclass, "$!pos"
    repr_bind_attr_int rx617_cur, rx617_curclass, "$!pos", rx617_pos
    store_lex unicode:"$\x{a2}", rx617_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_392_1349901750.327' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx617_fail1779
    rx617_cur."!cursor_pass"(rx617_pos, "typename", 'backtrack'=>1)
    .return (rx617_cur)
  rx617_restart1778:
    repr_get_attr_obj rx617_cstack, rx617_cur, rx617_curclass, "$!cstack"
  rx617_fail1779:
    unless rx617_bstack, rx617_done1777
    pop $I19, rx617_bstack
    if_null rx617_cstack, rx617_cstack_done1782
    unless rx617_cstack, rx617_cstack_done1782
    dec $I19
    set $P11, rx617_cstack[$I19]
  rx617_cstack_done1782:
    pop rx617_rep, rx617_bstack
    pop rx617_pos, rx617_bstack
    pop $I19, rx617_bstack
    lt rx617_pos, -1, rx617_done1777
    lt rx617_pos, 0, rx617_fail1779
    eq $I19, 0, rx617_fail1779
    nqp_islist $I20, rx617_cstack
    unless $I20, rx617_jump1780
    elements $I18, rx617_bstack
    le $I18, 0, rx617_cut1781
    dec $I18
    set $I18, rx617_bstack[$I18]
  rx617_cut1781:
    assign rx617_cstack, $I18
  rx617_jump1780:
    jump $I19
  rx617_done1777:
    rx617_cur."!cursor_fail"()
    .return (rx617_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_114_1349901750.327_caps" :subid("cuid_memo_159_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["name"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_114_1349901750.327_nfa" :subid("cuid_memo_160_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "name"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_392_1349901750.327") :anon :lex :outer("cuid_114_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1020

    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback1787
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback1788
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5005
  fallback1788:
    unless_null $P5002, vivi_6201789
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_6201789:
    set $P5001, $P5002
  fallback1787:
    find_lex $P5007, "$/"
    find_lex $P5010, "$/"
    unless_null $P5010, fallback1790
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5010, $P5011
  fallback1790:
    set $P5009, $P5010["name"]
    unless_null $P5009, fallback1791
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5009, $P5012
  fallback1791:
    set $P5008, $P5009["identifier"]
    unless_null $P5008, fallback1792
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5008, $P5013
  fallback1792:
    $P5014 = $P5001."known_sym"($P5007, $P5008)
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "declarator" :subid("cuid_115_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1023
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx621_tgt
    .local int rx621_pos
    .local int rx621_off
    .local int rx621_eos
    .local int rx621_rep
    .local pmc rx621_cur
    .local pmc rx621_curclass
    .local pmc rx621_bstack
    .local pmc rx621_cstack
    (rx621_cur, rx621_tgt, rx621_pos, rx621_curclass, rx621_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx621_cur
    length rx621_eos, rx621_tgt
    eq $I19, 1, rx621_restart1795
    gt rx621_pos, rx621_eos, rx621_fail1796
    repr_get_attr_int $I11, self, rx621_curclass, "$!from"
    ne $I11, -1, rxscan622_done1802
    goto rxscan622_scan1801
  rxscan622_loop1800:
    inc rx621_pos
    gt rx621_pos, rx621_eos, rx621_fail1796
    repr_bind_attr_int rx621_cur, rx621_curclass, "$!from", rx621_pos
  rxscan622_scan1801:
    nqp_rxmark rx621_bstack, rxscan622_loop1800, rx621_pos, 0
  rxscan622_done1802:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt623_01804
    nqp_push_label $P11, alt623_11806
    nqp_rxmark rx621_bstack, alt623_end1803, -1, 0
    rx621_cur."!alt"(rx621_pos, "alt_nfa__22_1349901752.441", $P11)
    goto rx621_fail1796
  alt623_01804:
    repr_bind_attr_int rx621_cur, rx621_curclass, "$!pos", rx621_pos
    $P11 = rx621_cur."variable_declarator"()
    repr_get_attr_int $I11, $P11, rx621_curclass, "$!pos"
    lt $I11, 0, rx621_fail1796
    nqp_rxmark rx621_bstack, rxsubrule624_pass1805, -1, 0
  rxsubrule624_pass1805:
    rx621_cstack = rx621_cur."!cursor_capture"($P11, "variable_declarator")
    repr_get_attr_int rx621_pos, $P11, rx621_curclass, "$!pos"
    goto alt623_end1803
  alt623_11806:
    repr_bind_attr_int rx621_cur, rx621_curclass, "$!pos", rx621_pos
    $P11 = rx621_cur."routine_declarator"()
    repr_get_attr_int $I11, $P11, rx621_curclass, "$!pos"
    lt $I11, 0, rx621_fail1796
    nqp_rxmark rx621_bstack, rxsubrule625_pass1807, -1, 0
  rxsubrule625_pass1807:
    rx621_cstack = rx621_cur."!cursor_capture"($P11, "routine_declarator")
    repr_get_attr_int rx621_pos, $P11, rx621_curclass, "$!pos"
    goto alt623_end1803
  alt623_end1803:
    rx621_cur."!cursor_pass"(rx621_pos, "declarator", 'backtrack'=>1)
    .return (rx621_cur)
  rx621_restart1795:
    repr_get_attr_obj rx621_cstack, rx621_cur, rx621_curclass, "$!cstack"
  rx621_fail1796:
    unless rx621_bstack, rx621_done1794
    pop $I19, rx621_bstack
    if_null rx621_cstack, rx621_cstack_done1799
    unless rx621_cstack, rx621_cstack_done1799
    dec $I19
    set $P11, rx621_cstack[$I19]
  rx621_cstack_done1799:
    pop rx621_rep, rx621_bstack
    pop rx621_pos, rx621_bstack
    pop $I19, rx621_bstack
    lt rx621_pos, -1, rx621_done1794
    lt rx621_pos, 0, rx621_fail1796
    eq $I19, 0, rx621_fail1796
    nqp_islist $I20, rx621_cstack
    unless $I20, rx621_jump1797
    elements $I18, rx621_bstack
    le $I18, 0, rx621_cut1798
    dec $I18
    set $I18, rx621_bstack[$I18]
  rx621_cut1798:
    assign rx621_cstack, $I18
  rx621_jump1797:
    jump $I19
  rx621_done1794:
    rx621_cur."!cursor_fail"()
    .return (rx621_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_115_1349901750.327_caps" :subid("cuid_memo_161_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["variable_declarator"], $P5002
    box $P5003, 0
    set $P5001["routine_declarator"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_115_1349901750.327_nfa" :subid("cuid_memo_162_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "variable_declarator"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    box $P5007, 8
    push $P5003, $P5007
    box $P5008, "routine_declarator"
    push $P5003, $P5008
    box $P5009, 0
    push $P5003, $P5009
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_115_1349901750.327_alt_nfa__22_1349901752.441" :subid("cuid_memo_163_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 8
    push $P5004, $P5005
    box $P5006, "variable_declarator"
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 8
    push $P5010, $P5011
    box $P5012, "routine_declarator"
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    push $P5008, $P5010
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "variable_declarator" :subid("cuid_116_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1028
    .param pmc _lex_param_0 
    .const 'Sub' $P5006 = 'cuid_393_1349901750.327' 
    capture_lex $P5006 
    .lex "$*IN_DECL", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx626_tgt
    .local int rx626_pos
    .local int rx626_off
    .local int rx626_eos
    .local int rx626_rep
    .local pmc rx626_cur
    .local pmc rx626_curclass
    .local pmc rx626_bstack
    .local pmc rx626_cstack
    (rx626_cur, rx626_tgt, rx626_pos, rx626_curclass, rx626_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx626_cur
    length rx626_eos, rx626_tgt
    eq $I19, 1, rx626_restart1810
    gt rx626_pos, rx626_eos, rx626_fail1811
    repr_get_attr_int $I11, self, rx626_curclass, "$!from"
    ne $I11, -1, rxscan627_done1817
    goto rxscan627_scan1816
  rxscan627_loop1815:
    inc rx626_pos
    gt rx626_pos, rx626_eos, rx626_fail1811
    repr_bind_attr_int rx626_cur, rx626_curclass, "$!from", rx626_pos
  rxscan627_scan1816:
    nqp_rxmark rx626_bstack, rxscan627_loop1815, rx626_pos, 0
  rxscan627_done1817:
    repr_bind_attr_int rx626_cur, rx626_curclass, "$!pos", rx626_pos
    $P11 = rx626_cur."ws"()
    repr_get_attr_int $I11, $P11, rx626_curclass, "$!pos"
    lt $I11, 0, rx626_fail1811
    repr_get_attr_int rx626_pos, $P11, rx626_curclass, "$!pos"
    nqp_rxmark rx626_bstack, rxquantr629_done1820, rx626_pos, 0
  rxquantr629_loop1819:
    repr_bind_attr_int rx626_cur, rx626_curclass, "$!pos", rx626_pos
    $P11 = rx626_cur."typename"()
    repr_get_attr_int $I11, $P11, rx626_curclass, "$!pos"
    lt $I11, 0, rx626_fail1811
    goto rxsubrule630_pass1821
  rxsubrule630_back1822:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx626_curclass, "$!pos"
    lt $I11, 0, rx626_fail1811
  rxsubrule630_pass1821:
    rx626_cstack = rx626_cur."!cursor_capture"($P11, "typename")
    set_addr $I11, rxsubrule630_back1822
    push rx626_bstack, $I11
    push rx626_bstack, 0
    push rx626_bstack, rx626_pos
    elements $I11, rx626_cstack
    push rx626_bstack, $I11
    repr_get_attr_int rx626_pos, $P11, rx626_curclass, "$!pos"
    nqp_rxpeek $I19, rx626_bstack, rxquantr629_done1820
    inc $I19
    inc $I19
    set rx626_rep, rx626_bstack[$I19]
    nqp_rxcommit rx626_bstack, rxquantr629_done1820
    inc rx626_rep
  rxquantr629_done1820:
    repr_bind_attr_int rx626_cur, rx626_curclass, "$!pos", rx626_pos
    $P11 = rx626_cur."ws"()
    repr_get_attr_int $I11, $P11, rx626_curclass, "$!pos"
    lt $I11, 0, rx626_fail1811
    repr_get_attr_int rx626_pos, $P11, rx626_curclass, "$!pos"
    repr_bind_attr_int rx626_cur, rx626_curclass, "$!pos", rx626_pos
    store_lex unicode:"$\x{a2}", rx626_cur
    box $P5002, "variable"
    set $P101, $P5002
    repr_bind_attr_int rx626_cur, rx626_curclass, "$!pos", rx626_pos
    $P11 = rx626_cur."ws"()
    repr_get_attr_int $I11, $P11, rx626_curclass, "$!pos"
    lt $I11, 0, rx626_fail1811
    repr_get_attr_int rx626_pos, $P11, rx626_curclass, "$!pos"
    repr_bind_attr_int rx626_cur, rx626_curclass, "$!pos", rx626_pos
    $P11 = rx626_cur."variable"()
    repr_get_attr_int $I11, $P11, rx626_curclass, "$!pos"
    lt $I11, 0, rx626_fail1811
    nqp_rxmark rx626_bstack, rxsubrule633_pass1825, -1, 0
  rxsubrule633_pass1825:
    rx626_cstack = rx626_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx626_pos, $P11, rx626_curclass, "$!pos"
    repr_bind_attr_int rx626_cur, rx626_curclass, "$!pos", rx626_pos
    $P11 = rx626_cur."ws"()
    repr_get_attr_int $I11, $P11, rx626_curclass, "$!pos"
    lt $I11, 0, rx626_fail1811
    repr_get_attr_int rx626_pos, $P11, rx626_curclass, "$!pos"
    repr_bind_attr_int rx626_cur, rx626_curclass, "$!pos", rx626_pos
    store_lex unicode:"$\x{a2}", rx626_cur
    $P5003 = $P102."MATCH"()
    set $P103, $P5003
    .const 'Sub' $P5004 = 'cuid_393_1349901750.327' 
    capture_lex $P5004
    $P5005 = $P5004()
    repr_bind_attr_int rx626_cur, rx626_curclass, "$!pos", rx626_pos
    $P11 = rx626_cur."ws"()
    repr_get_attr_int $I11, $P11, rx626_curclass, "$!pos"
    lt $I11, 0, rx626_fail1811
    repr_get_attr_int rx626_pos, $P11, rx626_curclass, "$!pos"
    nqp_rxmark rx626_bstack, rxquantr636_done1829, rx626_pos, 0
  rxquantr636_loop1828:
    repr_bind_attr_int rx626_cur, rx626_curclass, "$!pos", rx626_pos
    $P11 = rx626_cur."trait"()
    repr_get_attr_int $I11, $P11, rx626_curclass, "$!pos"
    lt $I11, 0, rx626_fail1811
    goto rxsubrule637_pass1830
  rxsubrule637_back1831:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx626_curclass, "$!pos"
    lt $I11, 0, rx626_fail1811
  rxsubrule637_pass1830:
    rx626_cstack = rx626_cur."!cursor_capture"($P11, "trait")
    set_addr $I11, rxsubrule637_back1831
    push rx626_bstack, $I11
    push rx626_bstack, 0
    push rx626_bstack, rx626_pos
    elements $I11, rx626_cstack
    push rx626_bstack, $I11
    repr_get_attr_int rx626_pos, $P11, rx626_curclass, "$!pos"
    nqp_rxpeek $I19, rx626_bstack, rxquantr636_done1829
    inc $I19
    inc $I19
    set rx626_rep, rx626_bstack[$I19]
    nqp_rxcommit rx626_bstack, rxquantr636_done1829
    inc rx626_rep
    nqp_rxmark rx626_bstack, rxquantr636_done1829, rx626_pos, rx626_rep
    goto rxquantr636_loop1828
  rxquantr636_done1829:
    repr_bind_attr_int rx626_cur, rx626_curclass, "$!pos", rx626_pos
    $P11 = rx626_cur."ws"()
    repr_get_attr_int $I11, $P11, rx626_curclass, "$!pos"
    lt $I11, 0, rx626_fail1811
    repr_get_attr_int rx626_pos, $P11, rx626_curclass, "$!pos"
    rx626_cur."!cursor_pass"(rx626_pos, "variable_declarator", 'backtrack'=>1)
    .return (rx626_cur)
  rx626_restart1810:
    repr_get_attr_obj rx626_cstack, rx626_cur, rx626_curclass, "$!cstack"
  rx626_fail1811:
    unless rx626_bstack, rx626_done1809
    pop $I19, rx626_bstack
    if_null rx626_cstack, rx626_cstack_done1814
    unless rx626_cstack, rx626_cstack_done1814
    dec $I19
    set $P11, rx626_cstack[$I19]
  rx626_cstack_done1814:
    pop rx626_rep, rx626_bstack
    pop rx626_pos, rx626_bstack
    pop $I19, rx626_bstack
    lt rx626_pos, -1, rx626_done1809
    lt rx626_pos, 0, rx626_fail1811
    eq $I19, 0, rx626_fail1811
    nqp_islist $I20, rx626_cstack
    unless $I20, rx626_jump1812
    elements $I18, rx626_bstack
    le $I18, 0, rx626_cut1813
    dec $I18
    set $I18, rx626_bstack[$I18]
  rx626_cut1813:
    assign rx626_cstack, $I18
  rx626_jump1812:
    jump $I19
  rx626_done1809:
    rx626_cur."!cursor_fail"()
    .return (rx626_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_116_1349901750.327_caps" :subid("cuid_memo_164_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 2
    set $P5001["typename"], $P5002
    box $P5003, 0
    set $P5001["variable"], $P5003
    box $P5004, 2
    set $P5001["trait"], $P5004
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_393_1349901750.327") :anon :lex :outer("cuid_116_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1032

    box $P5001, 0
    store_dynamic_lex "$*IN_DECL", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator" :subid("cuid_117_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1036
    .param pmc self 
    $P5001 = self."!protoregex"("routine_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<sub>" :subid("cuid_118_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1037
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx639_tgt
    .local int rx639_pos
    .local int rx639_off
    .local int rx639_eos
    .local int rx639_rep
    .local pmc rx639_cur
    .local pmc rx639_curclass
    .local pmc rx639_bstack
    .local pmc rx639_cstack
    (rx639_cur, rx639_tgt, rx639_pos, rx639_curclass, rx639_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx639_cur
    length rx639_eos, rx639_tgt
    eq $I19, 1, rx639_restart1835
    gt rx639_pos, rx639_eos, rx639_fail1836
    repr_get_attr_int $I11, self, rx639_curclass, "$!from"
    ne $I11, -1, rxscan640_done1842
    goto rxscan640_scan1841
  rxscan640_loop1840:
    inc rx639_pos
    gt rx639_pos, rx639_eos, rx639_fail1836
    repr_bind_attr_int rx639_cur, rx639_curclass, "$!from", rx639_pos
  rxscan640_scan1841:
    nqp_rxmark rx639_bstack, rxscan640_loop1840, rx639_pos, 0
  rxscan640_done1842:
    nqp_rxmark rx639_bstack, rxcap641_fail1844, rx639_pos, 0
    add $I11, rx639_pos, 3
    gt $I11, rx639_eos, rx639_fail1836
    substr $S10, rx639_tgt, rx639_pos, 3
    ne $S10, ucs4:"sub", rx639_fail1836
    add rx639_pos, 3
    nqp_rxpeek $I19, rx639_bstack, rxcap641_fail1844
    inc $I19
    set $I11, rx639_bstack[$I19]
    repr_bind_attr_int rx639_cur, rx639_curclass, "$!pos", rx639_pos
    $P11 = rx639_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx639_pos)
    rx639_cstack = rx639_cur."!cursor_capture"($P11, "sym")
    goto rxcap641_done1843
  rxcap641_fail1844:
    goto rx639_fail1836
  rxcap641_done1843:
    repr_bind_attr_int rx639_cur, rx639_curclass, "$!pos", rx639_pos
    $P11 = rx639_cur."routine_def"()
    repr_get_attr_int $I11, $P11, rx639_curclass, "$!pos"
    lt $I11, 0, rx639_fail1836
    nqp_rxmark rx639_bstack, rxsubrule642_pass1845, -1, 0
  rxsubrule642_pass1845:
    rx639_cstack = rx639_cur."!cursor_capture"($P11, "routine_def")
    repr_get_attr_int rx639_pos, $P11, rx639_curclass, "$!pos"
    rx639_cur."!cursor_pass"(rx639_pos, "routine_declarator:sym<sub>", 'backtrack'=>1)
    .return (rx639_cur)
  rx639_restart1835:
    repr_get_attr_obj rx639_cstack, rx639_cur, rx639_curclass, "$!cstack"
  rx639_fail1836:
    unless rx639_bstack, rx639_done1834
    pop $I19, rx639_bstack
    if_null rx639_cstack, rx639_cstack_done1839
    unless rx639_cstack, rx639_cstack_done1839
    dec $I19
    set $P11, rx639_cstack[$I19]
  rx639_cstack_done1839:
    pop rx639_rep, rx639_bstack
    pop rx639_pos, rx639_bstack
    pop $I19, rx639_bstack
    lt rx639_pos, -1, rx639_done1834
    lt rx639_pos, 0, rx639_fail1836
    eq $I19, 0, rx639_fail1836
    nqp_islist $I20, rx639_cstack
    unless $I20, rx639_jump1837
    elements $I18, rx639_bstack
    le $I18, 0, rx639_cut1838
    dec $I18
    set $I18, rx639_bstack[$I18]
  rx639_cut1838:
    assign rx639_cstack, $I18
  rx639_jump1837:
    jump $I19
  rx639_done1834:
    rx639_cur."!cursor_fail"()
    .return (rx639_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_118_1349901750.327_caps" :subid("cuid_memo_165_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["routine_def"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_118_1349901750.327_nfa" :subid("cuid_memo_166_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 115
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 117
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 98
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "routine_def"
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<method>" :subid("cuid_119_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1038
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx643_tgt
    .local int rx643_pos
    .local int rx643_off
    .local int rx643_eos
    .local int rx643_rep
    .local pmc rx643_cur
    .local pmc rx643_curclass
    .local pmc rx643_bstack
    .local pmc rx643_cstack
    (rx643_cur, rx643_tgt, rx643_pos, rx643_curclass, rx643_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx643_cur
    length rx643_eos, rx643_tgt
    eq $I19, 1, rx643_restart1848
    gt rx643_pos, rx643_eos, rx643_fail1849
    repr_get_attr_int $I11, self, rx643_curclass, "$!from"
    ne $I11, -1, rxscan644_done1855
    goto rxscan644_scan1854
  rxscan644_loop1853:
    inc rx643_pos
    gt rx643_pos, rx643_eos, rx643_fail1849
    repr_bind_attr_int rx643_cur, rx643_curclass, "$!from", rx643_pos
  rxscan644_scan1854:
    nqp_rxmark rx643_bstack, rxscan644_loop1853, rx643_pos, 0
  rxscan644_done1855:
    nqp_rxmark rx643_bstack, rxcap645_fail1857, rx643_pos, 0
    add $I11, rx643_pos, 6
    gt $I11, rx643_eos, rx643_fail1849
    substr $S10, rx643_tgt, rx643_pos, 6
    ne $S10, ucs4:"method", rx643_fail1849
    add rx643_pos, 6
    nqp_rxpeek $I19, rx643_bstack, rxcap645_fail1857
    inc $I19
    set $I11, rx643_bstack[$I19]
    repr_bind_attr_int rx643_cur, rx643_curclass, "$!pos", rx643_pos
    $P11 = rx643_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx643_pos)
    rx643_cstack = rx643_cur."!cursor_capture"($P11, "sym")
    goto rxcap645_done1856
  rxcap645_fail1857:
    goto rx643_fail1849
  rxcap645_done1856:
    repr_bind_attr_int rx643_cur, rx643_curclass, "$!pos", rx643_pos
    $P11 = rx643_cur."method_def"()
    repr_get_attr_int $I11, $P11, rx643_curclass, "$!pos"
    lt $I11, 0, rx643_fail1849
    nqp_rxmark rx643_bstack, rxsubrule646_pass1858, -1, 0
  rxsubrule646_pass1858:
    rx643_cstack = rx643_cur."!cursor_capture"($P11, "method_def")
    repr_get_attr_int rx643_pos, $P11, rx643_curclass, "$!pos"
    rx643_cur."!cursor_pass"(rx643_pos, "routine_declarator:sym<method>", 'backtrack'=>1)
    .return (rx643_cur)
  rx643_restart1848:
    repr_get_attr_obj rx643_cstack, rx643_cur, rx643_curclass, "$!cstack"
  rx643_fail1849:
    unless rx643_bstack, rx643_done1847
    pop $I19, rx643_bstack
    if_null rx643_cstack, rx643_cstack_done1852
    unless rx643_cstack, rx643_cstack_done1852
    dec $I19
    set $P11, rx643_cstack[$I19]
  rx643_cstack_done1852:
    pop rx643_rep, rx643_bstack
    pop rx643_pos, rx643_bstack
    pop $I19, rx643_bstack
    lt rx643_pos, -1, rx643_done1847
    lt rx643_pos, 0, rx643_fail1849
    eq $I19, 0, rx643_fail1849
    nqp_islist $I20, rx643_cstack
    unless $I20, rx643_jump1850
    elements $I18, rx643_bstack
    le $I18, 0, rx643_cut1851
    dec $I18
    set $I18, rx643_bstack[$I18]
  rx643_cut1851:
    assign rx643_cstack, $I18
  rx643_jump1850:
    jump $I19
  rx643_done1847:
    rx643_cur."!cursor_fail"()
    .return (rx643_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_119_1349901750.327_caps" :subid("cuid_memo_167_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["method_def"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_119_1349901750.327_nfa" :subid("cuid_memo_168_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 109
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 101
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 116
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 104
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 111
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 100
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "method_def"
    push $P5027, $P5029
    box $P5030, 0
    push $P5027, $P5030
    push $P5001, $P5027
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "routine_def" :subid("cuid_120_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1040
    .param pmc _lex_param_0 
    .lex "$*RETURN_USED", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx647_tgt
    .local int rx647_pos
    .local int rx647_off
    .local int rx647_eos
    .local int rx647_rep
    .local pmc rx647_cur
    .local pmc rx647_curclass
    .local pmc rx647_bstack
    .local pmc rx647_cstack
    (rx647_cur, rx647_tgt, rx647_pos, rx647_curclass, rx647_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx647_cur
    length rx647_eos, rx647_tgt
    eq $I19, 1, rx647_restart1861
    gt rx647_pos, rx647_eos, rx647_fail1862
    repr_get_attr_int $I11, self, rx647_curclass, "$!from"
    ne $I11, -1, rxscan648_done1868
    goto rxscan648_scan1867
  rxscan648_loop1866:
    inc rx647_pos
    gt rx647_pos, rx647_eos, rx647_fail1862
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!from", rx647_pos
  rxscan648_scan1867:
    nqp_rxmark rx647_bstack, rxscan648_loop1866, rx647_pos, 0
  rxscan648_done1868:
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."ws"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1862
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    store_lex unicode:"$\x{a2}", rx647_cur
    box $P5002, 0
    set $P101, $P5002
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."ws"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1862
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
    nqp_rxmark rx647_bstack, rxquantr651_done1872, rx647_pos, 0
  rxquantr651_loop1871:
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."ws"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1862
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
    nqp_rxmark rx647_bstack, rxcap653_fail1875, rx647_pos, 0
    nqp_rxmark rx647_bstack, rxquantr654_done1877, rx647_pos, 0
  rxquantr654_loop1876:
    add $I11, rx647_pos, 1
    gt $I11, rx647_eos, rx647_fail1862
    substr $S10, rx647_tgt, rx647_pos, 1
    ne $S10, ucs4:"&", rx647_fail1862
    add rx647_pos, 1
    nqp_rxpeek $I19, rx647_bstack, rxquantr654_done1877
    inc $I19
    inc $I19
    set rx647_rep, rx647_bstack[$I19]
    nqp_rxcommit rx647_bstack, rxquantr654_done1877
    inc rx647_rep
  rxquantr654_done1877:
    nqp_rxpeek $I19, rx647_bstack, rxcap653_fail1875
    inc $I19
    set $I11, rx647_bstack[$I19]
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx647_pos)
    rx647_cstack = rx647_cur."!cursor_capture"($P11, "sigil")
    goto rxcap653_done1874
  rxcap653_fail1875:
    goto rx647_fail1862
  rxcap653_done1874:
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1862
    nqp_rxmark rx647_bstack, rxsubrule655_pass1878, -1, 0
  rxsubrule655_pass1878:
    rx647_cstack = rx647_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."ws"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1862
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
    nqp_rxpeek $I19, rx647_bstack, rxquantr651_done1872
    inc $I19
    inc $I19
    set rx647_rep, rx647_bstack[$I19]
    nqp_rxcommit rx647_bstack, rxquantr651_done1872
    inc rx647_rep
  rxquantr651_done1872:
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."ws"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1862
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1862
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."ws"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1862
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
  alt660_01884:
    nqp_rxmark rx647_bstack, alt660_11890, rx647_pos, 0
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."ws"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1862
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
    add $I11, rx647_pos, 1
    gt $I11, rx647_eos, rx647_fail1862
    substr $S10, rx647_tgt, rx647_pos, 1
    ne $S10, ucs4:"(", rx647_fail1862
    add rx647_pos, 1
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."ws"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1862
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."signature"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1862
    nqp_rxmark rx647_bstack, rxsubrule663_pass1887, -1, 0
  rxsubrule663_pass1887:
    rx647_cstack = rx647_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."ws"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1862
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
    add $I11, rx647_pos, 1
    gt $I11, rx647_eos, rx647_fail1862
    substr $S10, rx647_tgt, rx647_pos, 1
    ne $S10, ucs4:")", rx647_fail1862
    add rx647_pos, 1
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."ws"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1862
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
    goto alt660_end1883
  alt660_11890:
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."ws"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1862
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."panic"("Routine declaration requires a signature")
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1862
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."ws"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1862
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
  alt660_end1883:
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."ws"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1862
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
    nqp_rxmark rx647_bstack, rxquantr670_done1896, rx647_pos, 0
  rxquantr670_loop1895:
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."trait"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1862
    goto rxsubrule671_pass1897
  rxsubrule671_back1898:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1862
  rxsubrule671_pass1897:
    rx647_cstack = rx647_cur."!cursor_capture"($P11, "trait")
    set_addr $I11, rxsubrule671_back1898
    push rx647_bstack, $I11
    push rx647_bstack, 0
    push rx647_bstack, rx647_pos
    elements $I11, rx647_cstack
    push rx647_bstack, $I11
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
    nqp_rxpeek $I19, rx647_bstack, rxquantr670_done1896
    inc $I19
    inc $I19
    set rx647_rep, rx647_bstack[$I19]
    nqp_rxcommit rx647_bstack, rxquantr670_done1896
    inc rx647_rep
    nqp_rxmark rx647_bstack, rxquantr670_done1896, rx647_pos, rx647_rep
    goto rxquantr670_loop1895
  rxquantr670_done1896:
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."ws"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1862
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt673_01901
    nqp_push_label $P11, alt673_11905
    nqp_rxmark rx647_bstack, alt673_end1900, -1, 0
    rx647_cur."!alt"(rx647_pos, "alt_nfa__23_1349901752.592", $P11)
    goto rx647_fail1862
  alt673_01901:
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."ws"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1862
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."onlystar"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1862
    nqp_rxmark rx647_bstack, rxsubrule675_pass1903, -1, 0
  rxsubrule675_pass1903:
    rx647_cstack = rx647_cur."!cursor_capture"($P11, "onlystar")
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."ws"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1862
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
    goto alt673_end1900
  alt673_11905:
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."ws"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1862
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1862
    nqp_rxmark rx647_bstack, rxsubrule678_pass1907, -1, 0
  rxsubrule678_pass1907:
    rx647_cstack = rx647_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."ws"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1862
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
    goto alt673_end1900
  alt673_end1900:
    nqp_rxcommit rx647_bstack, alt673_end1900
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."ws"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1862
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
    rx647_cur."!cursor_pass"(rx647_pos, "routine_def", 'backtrack'=>1)
    .return (rx647_cur)
  rx647_restart1861:
    repr_get_attr_obj rx647_cstack, rx647_cur, rx647_curclass, "$!cstack"
  rx647_fail1862:
    unless rx647_bstack, rx647_done1860
    pop $I19, rx647_bstack
    if_null rx647_cstack, rx647_cstack_done1865
    unless rx647_cstack, rx647_cstack_done1865
    dec $I19
    set $P11, rx647_cstack[$I19]
  rx647_cstack_done1865:
    pop rx647_rep, rx647_bstack
    pop rx647_pos, rx647_bstack
    pop $I19, rx647_bstack
    lt rx647_pos, -1, rx647_done1860
    lt rx647_pos, 0, rx647_fail1862
    eq $I19, 0, rx647_fail1862
    nqp_islist $I20, rx647_cstack
    unless $I20, rx647_jump1863
    elements $I18, rx647_bstack
    le $I18, 0, rx647_cut1864
    dec $I18
    set $I18, rx647_bstack[$I18]
  rx647_cut1864:
    assign rx647_cstack, $I18
  rx647_jump1863:
    jump $I19
  rx647_done1860:
    rx647_cur."!cursor_fail"()
    .return (rx647_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_120_1349901750.327_caps" :subid("cuid_memo_169_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 2
    set $P5001["sigil"], $P5002
    box $P5003, 2
    set $P5001["deflongname"], $P5003
    box $P5004, 0
    set $P5001["signature"], $P5004
    box $P5005, 2
    set $P5001["trait"], $P5005
    box $P5006, 0
    set $P5001["onlystar"], $P5006
    box $P5007, 0
    set $P5001["blockoid"], $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_120_1349901750.327_alt_nfa__23_1349901752.592" :subid("cuid_memo_170_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 0
    push $P5004, $P5005
    box $P5006, 0
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    box $P5008, 0
    push $P5004, $P5008
    box $P5009, 0
    push $P5004, $P5009
    box $P5010, 0
    push $P5004, $P5010
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5011, 'ResizablePMCArray'
    new $P5012, 'ResizablePMCArray'
    push $P5011, $P5012
    new $P5013, 'ResizablePMCArray'
    box $P5014, 0
    push $P5013, $P5014
    box $P5015, 0
    push $P5013, $P5015
    box $P5016, 0
    push $P5013, $P5016
    box $P5017, 0
    push $P5013, $P5017
    box $P5018, 0
    push $P5013, $P5018
    box $P5019, 0
    push $P5013, $P5019
    push $P5011, $P5013
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "method_def" :subid("cuid_121_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1053
    .param pmc _lex_param_0 
    .const 'Sub' $P5008 = 'cuid_394_1349901750.327' 
    capture_lex $P5008 
    .lex "$*RETURN_USED", $P101 
    .lex "$*INVOCANT_OK", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx681_tgt
    .local int rx681_pos
    .local int rx681_off
    .local int rx681_eos
    .local int rx681_rep
    .local pmc rx681_cur
    .local pmc rx681_curclass
    .local pmc rx681_bstack
    .local pmc rx681_cstack
    (rx681_cur, rx681_tgt, rx681_pos, rx681_curclass, rx681_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx681_cur
    length rx681_eos, rx681_tgt
    eq $I19, 1, rx681_restart1912
    gt rx681_pos, rx681_eos, rx681_fail1913
    repr_get_attr_int $I11, self, rx681_curclass, "$!from"
    ne $I11, -1, rxscan682_done1919
    goto rxscan682_scan1918
  rxscan682_loop1917:
    inc rx681_pos
    gt rx681_pos, rx681_eos, rx681_fail1913
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!from", rx681_pos
  rxscan682_scan1918:
    nqp_rxmark rx681_bstack, rxscan682_loop1917, rx681_pos, 0
  rxscan682_done1919:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1913
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    store_lex unicode:"$\x{a2}", rx681_cur
    box $P5003, 0
    set $P101, $P5003
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1913
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    store_lex unicode:"$\x{a2}", rx681_cur
    box $P5004, 1
    set $P102, $P5004
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1913
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    nqp_rxmark rx681_bstack, rxcap686_fail1924, rx681_pos, 0
    nqp_rxmark rx681_bstack, rxquantr687_done1926, rx681_pos, 0
  rxquantr687_loop1925:
    add $I11, rx681_pos, 1
    gt $I11, rx681_eos, rx681_fail1913
    substr $S10, rx681_tgt, rx681_pos, 1
    ne $S10, ucs4:"!", rx681_fail1913
    add rx681_pos, 1
    nqp_rxpeek $I19, rx681_bstack, rxquantr687_done1926
    inc $I19
    inc $I19
    set rx681_rep, rx681_bstack[$I19]
    nqp_rxcommit rx681_bstack, rxquantr687_done1926
    inc rx681_rep
  rxquantr687_done1926:
    nqp_rxpeek $I19, rx681_bstack, rxcap686_fail1924
    inc $I19
    set $I11, rx681_bstack[$I19]
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx681_pos)
    rx681_cstack = rx681_cur."!cursor_capture"($P11, "private")
    goto rxcap686_done1923
  rxcap686_fail1924:
    goto rx681_fail1913
  rxcap686_done1923:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1913
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    nqp_rxmark rx681_bstack, rxquantr689_done1929, rx681_pos, 0
  rxquantr689_loop1928:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1913
    goto rxsubrule690_pass1930
  rxsubrule690_back1931:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1913
  rxsubrule690_pass1930:
    rx681_cstack = rx681_cur."!cursor_capture"($P11, "deflongname")
    set_addr $I11, rxsubrule690_back1931
    push rx681_bstack, $I11
    push rx681_bstack, 0
    push rx681_bstack, rx681_pos
    elements $I11, rx681_cstack
    push rx681_bstack, $I11
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    nqp_rxpeek $I19, rx681_bstack, rxquantr689_done1929
    inc $I19
    inc $I19
    set rx681_rep, rx681_bstack[$I19]
    nqp_rxcommit rx681_bstack, rxquantr689_done1929
    inc rx681_rep
  rxquantr689_done1929:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1913
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1913
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1913
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
  alt694_01936:
    nqp_rxmark rx681_bstack, alt694_11942, rx681_pos, 0
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1913
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    add $I11, rx681_pos, 1
    gt $I11, rx681_eos, rx681_fail1913
    substr $S10, rx681_tgt, rx681_pos, 1
    ne $S10, ucs4:"(", rx681_fail1913
    add rx681_pos, 1
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1913
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."signature"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1913
    nqp_rxmark rx681_bstack, rxsubrule697_pass1939, -1, 0
  rxsubrule697_pass1939:
    rx681_cstack = rx681_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1913
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    add $I11, rx681_pos, 1
    gt $I11, rx681_eos, rx681_fail1913
    substr $S10, rx681_tgt, rx681_pos, 1
    ne $S10, ucs4:")", rx681_fail1913
    add rx681_pos, 1
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1913
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    goto alt694_end1935
  alt694_11942:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1913
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."panic"("Routine declaration requires a signature")
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1913
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1913
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
  alt694_end1935:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1913
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    store_lex unicode:"$\x{a2}", rx681_cur
    $P5005 = $P103."MATCH"()
    set $P104, $P5005
    .const 'Sub' $P5006 = 'cuid_394_1349901750.327' 
    capture_lex $P5006
    $P5007 = $P5006()
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1913
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    nqp_rxmark rx681_bstack, rxquantr705_done1949, rx681_pos, 0
  rxquantr705_loop1948:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."trait"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1913
    goto rxsubrule706_pass1950
  rxsubrule706_back1951:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1913
  rxsubrule706_pass1950:
    rx681_cstack = rx681_cur."!cursor_capture"($P11, "trait")
    set_addr $I11, rxsubrule706_back1951
    push rx681_bstack, $I11
    push rx681_bstack, 0
    push rx681_bstack, rx681_pos
    elements $I11, rx681_cstack
    push rx681_bstack, $I11
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    nqp_rxpeek $I19, rx681_bstack, rxquantr705_done1949
    inc $I19
    inc $I19
    set rx681_rep, rx681_bstack[$I19]
    nqp_rxcommit rx681_bstack, rxquantr705_done1949
    inc rx681_rep
    nqp_rxmark rx681_bstack, rxquantr705_done1949, rx681_pos, rx681_rep
    goto rxquantr705_loop1948
  rxquantr705_done1949:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1913
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt708_01954
    nqp_push_label $P11, alt708_11958
    nqp_rxmark rx681_bstack, alt708_end1953, -1, 0
    rx681_cur."!alt"(rx681_pos, "alt_nfa__24_1349901752.621", $P11)
    goto rx681_fail1913
  alt708_01954:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1913
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."onlystar"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1913
    nqp_rxmark rx681_bstack, rxsubrule710_pass1956, -1, 0
  rxsubrule710_pass1956:
    rx681_cstack = rx681_cur."!cursor_capture"($P11, "onlystar")
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1913
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    goto alt708_end1953
  alt708_11958:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1913
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1913
    nqp_rxmark rx681_bstack, rxsubrule713_pass1960, -1, 0
  rxsubrule713_pass1960:
    rx681_cstack = rx681_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1913
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    goto alt708_end1953
  alt708_end1953:
    nqp_rxcommit rx681_bstack, alt708_end1953
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1913
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    rx681_cur."!cursor_pass"(rx681_pos, "method_def", 'backtrack'=>1)
    .return (rx681_cur)
  rx681_restart1912:
    repr_get_attr_obj rx681_cstack, rx681_cur, rx681_curclass, "$!cstack"
  rx681_fail1913:
    unless rx681_bstack, rx681_done1911
    pop $I19, rx681_bstack
    if_null rx681_cstack, rx681_cstack_done1916
    unless rx681_cstack, rx681_cstack_done1916
    dec $I19
    set $P11, rx681_cstack[$I19]
  rx681_cstack_done1916:
    pop rx681_rep, rx681_bstack
    pop rx681_pos, rx681_bstack
    pop $I19, rx681_bstack
    lt rx681_pos, -1, rx681_done1911
    lt rx681_pos, 0, rx681_fail1913
    eq $I19, 0, rx681_fail1913
    nqp_islist $I20, rx681_cstack
    unless $I20, rx681_jump1914
    elements $I18, rx681_bstack
    le $I18, 0, rx681_cut1915
    dec $I18
    set $I18, rx681_bstack[$I18]
  rx681_cut1915:
    assign rx681_cstack, $I18
  rx681_jump1914:
    jump $I19
  rx681_done1911:
    rx681_cur."!cursor_fail"()
    .return (rx681_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_121_1349901750.327_caps" :subid("cuid_memo_171_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["private"], $P5002
    box $P5003, 2
    set $P5001["deflongname"], $P5003
    box $P5004, 0
    set $P5001["signature"], $P5004
    box $P5005, 2
    set $P5001["trait"], $P5005
    box $P5006, 0
    set $P5001["onlystar"], $P5006
    box $P5007, 0
    set $P5001["blockoid"], $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_121_1349901750.327_alt_nfa__24_1349901752.621" :subid("cuid_memo_172_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 0
    push $P5004, $P5005
    box $P5006, 0
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    box $P5008, 0
    push $P5004, $P5008
    box $P5009, 0
    push $P5004, $P5009
    box $P5010, 0
    push $P5004, $P5010
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5011, 'ResizablePMCArray'
    new $P5012, 'ResizablePMCArray'
    push $P5011, $P5012
    new $P5013, 'ResizablePMCArray'
    box $P5014, 0
    push $P5013, $P5014
    box $P5015, 0
    push $P5013, $P5015
    box $P5016, 0
    push $P5013, $P5016
    box $P5017, 0
    push $P5013, $P5017
    box $P5018, 0
    push $P5013, $P5018
    box $P5019, 0
    push $P5013, $P5019
    push $P5011, $P5013
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_394_1349901750.327") :anon :lex :outer("cuid_121_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1061

    box $P5001, 0
    store_dynamic_lex "$*INVOCANT_OK", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "onlystar" :subid("cuid_122_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1069
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_395_1349901750.327' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx716_tgt
    .local int rx716_pos
    .local int rx716_off
    .local int rx716_eos
    .local int rx716_rep
    .local pmc rx716_cur
    .local pmc rx716_curclass
    .local pmc rx716_bstack
    .local pmc rx716_cstack
    (rx716_cur, rx716_tgt, rx716_pos, rx716_curclass, rx716_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx716_cur
    length rx716_eos, rx716_tgt
    eq $I19, 1, rx716_restart1965
    gt rx716_pos, rx716_eos, rx716_fail1966
    repr_get_attr_int $I11, self, rx716_curclass, "$!from"
    ne $I11, -1, rxscan717_done1972
    goto rxscan717_scan1971
  rxscan717_loop1970:
    inc rx716_pos
    gt rx716_pos, rx716_eos, rx716_fail1966
    repr_bind_attr_int rx716_cur, rx716_curclass, "$!from", rx716_pos
  rxscan717_scan1971:
    nqp_rxmark rx716_bstack, rxscan717_loop1970, rx716_pos, 0
  rxscan717_done1972:
    repr_bind_attr_int rx716_cur, rx716_curclass, "$!pos", rx716_pos
    store_lex unicode:"$\x{a2}", rx716_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_395_1349901750.327' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx716_fail1966
    add $I11, rx716_pos, 1
    gt $I11, rx716_eos, rx716_fail1966
    substr $S10, rx716_tgt, rx716_pos, 1
    ne $S10, ucs4:"{", rx716_fail1966
    add rx716_pos, 1
    repr_bind_attr_int rx716_cur, rx716_curclass, "$!pos", rx716_pos
    $P11 = rx716_cur."ws"()
    repr_get_attr_int $I11, $P11, rx716_curclass, "$!pos"
    lt $I11, 0, rx716_fail1966
    repr_get_attr_int rx716_pos, $P11, rx716_curclass, "$!pos"
    add $I11, rx716_pos, 1
    gt $I11, rx716_eos, rx716_fail1966
    substr $S10, rx716_tgt, rx716_pos, 1
    ne $S10, ucs4:"*", rx716_fail1966
    add rx716_pos, 1
    repr_bind_attr_int rx716_cur, rx716_curclass, "$!pos", rx716_pos
    $P11 = rx716_cur."ws"()
    repr_get_attr_int $I11, $P11, rx716_curclass, "$!pos"
    lt $I11, 0, rx716_fail1966
    repr_get_attr_int rx716_pos, $P11, rx716_curclass, "$!pos"
    add $I11, rx716_pos, 1
    gt $I11, rx716_eos, rx716_fail1966
    substr $S10, rx716_tgt, rx716_pos, 1
    ne $S10, ucs4:"}", rx716_fail1966
    add rx716_pos, 1
    repr_bind_attr_int rx716_cur, rx716_curclass, "$!pos", rx716_pos
    $P11 = rx716_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx716_curclass, "$!pos"
    lt $I11, 0, rx716_fail1966
    repr_bind_attr_int rx716_cur, rx716_curclass, "$!pos", rx716_pos
    $P11 = rx716_cur."finishpad"()
    repr_get_attr_int $I11, $P11, rx716_curclass, "$!pos"
    lt $I11, 0, rx716_fail1966
    repr_get_attr_int rx716_pos, $P11, rx716_curclass, "$!pos"
    rx716_cur."!cursor_pass"(rx716_pos, "onlystar", 'backtrack'=>1)
    .return (rx716_cur)
  rx716_restart1965:
    repr_get_attr_obj rx716_cstack, rx716_cur, rx716_curclass, "$!cstack"
  rx716_fail1966:
    unless rx716_bstack, rx716_done1964
    pop $I19, rx716_bstack
    if_null rx716_cstack, rx716_cstack_done1969
    unless rx716_cstack, rx716_cstack_done1969
    dec $I19
    set $P11, rx716_cstack[$I19]
  rx716_cstack_done1969:
    pop rx716_rep, rx716_bstack
    pop rx716_pos, rx716_bstack
    pop $I19, rx716_bstack
    lt rx716_pos, -1, rx716_done1964
    lt rx716_pos, 0, rx716_fail1966
    eq $I19, 0, rx716_fail1966
    nqp_islist $I20, rx716_cstack
    unless $I20, rx716_jump1967
    elements $I18, rx716_bstack
    le $I18, 0, rx716_cut1968
    dec $I18
    set $I18, rx716_bstack[$I18]
  rx716_cut1968:
    assign rx716_cstack, $I18
  rx716_jump1967:
    jump $I19
  rx716_done1964:
    rx716_cur."!cursor_fail"()
    .return (rx716_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_122_1349901750.327_caps" :subid("cuid_memo_173_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_122_1349901750.327_nfa" :subid("cuid_memo_174_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 123
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "ws"
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 42
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 8
    push $P5019, $P5020
    box $P5021, "ws"
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 125
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "ENDSTMT"
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 0
    push $P5031, $P5032
    box $P5033, 0
    push $P5031, $P5033
    box $P5034, 0
    push $P5031, $P5034
    push $P5001, $P5031
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_395_1349901750.327") :anon :lex :outer("cuid_122_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1070

    find_dynamic_lex $P5001, "$*MULTINESS"
    unless_null $P5001, fallback1973
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$MULTINESS"]
    unless_null $P5002, fallback1974
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5005
  fallback1974:
    unless_null $P5002, vivi_7181975
    die "Contextual $*MULTINESS not found"
    box $P5006, "Contextual $*MULTINESS not found"
    set $P5002, $P5006
  vivi_7181975:
    set $P5001, $P5002
  fallback1973:
    set $S5001, $P5001
    iseq $I5001, $S5001, "proto"
    .return ($I5001) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator" :subid("cuid_123_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1076
    .param pmc self 
    $P5001 = self."!protoregex"("multi_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<multi>" :subid("cuid_124_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1077
    .param pmc _lex_param_0 
    .lex "$*MULTINESS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx722_tgt
    .local int rx722_pos
    .local int rx722_off
    .local int rx722_eos
    .local int rx722_rep
    .local pmc rx722_cur
    .local pmc rx722_curclass
    .local pmc rx722_bstack
    .local pmc rx722_cstack
    (rx722_cur, rx722_tgt, rx722_pos, rx722_curclass, rx722_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx722_cur
    length rx722_eos, rx722_tgt
    eq $I19, 1, rx722_restart1981
    gt rx722_pos, rx722_eos, rx722_fail1982
    repr_get_attr_int $I11, self, rx722_curclass, "$!from"
    ne $I11, -1, rxscan723_done1988
    goto rxscan723_scan1987
  rxscan723_loop1986:
    inc rx722_pos
    gt rx722_pos, rx722_eos, rx722_fail1982
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!from", rx722_pos
  rxscan723_scan1987:
    nqp_rxmark rx722_bstack, rxscan723_loop1986, rx722_pos, 0
  rxscan723_done1988:
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!pos", rx722_pos
    store_lex unicode:"$\x{a2}", rx722_cur
    box $P5002, "multi"
    set $P101, $P5002
    nqp_rxmark rx722_bstack, rxcap724_fail1990, rx722_pos, 0
    add $I11, rx722_pos, 5
    gt $I11, rx722_eos, rx722_fail1982
    substr $S10, rx722_tgt, rx722_pos, 5
    ne $S10, ucs4:"multi", rx722_fail1982
    add rx722_pos, 5
    nqp_rxpeek $I19, rx722_bstack, rxcap724_fail1990
    inc $I19
    set $I11, rx722_bstack[$I19]
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!pos", rx722_pos
    $P11 = rx722_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx722_pos)
    rx722_cstack = rx722_cur."!cursor_capture"($P11, "sym")
    goto rxcap724_done1989
  rxcap724_fail1990:
    goto rx722_fail1982
  rxcap724_done1989:
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!pos", rx722_pos
    $P11 = rx722_cur."ws"()
    repr_get_attr_int $I11, $P11, rx722_curclass, "$!pos"
    lt $I11, 0, rx722_fail1982
    repr_get_attr_int rx722_pos, $P11, rx722_curclass, "$!pos"
  alt726_01993:
    nqp_rxmark rx722_bstack, alt726_11995, rx722_pos, 0
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!pos", rx722_pos
    $P11 = rx722_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx722_curclass, "$!pos"
    lt $I11, 0, rx722_fail1982
    nqp_rxmark rx722_bstack, rxsubrule727_pass1994, -1, 0
  rxsubrule727_pass1994:
    rx722_cstack = rx722_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx722_pos, $P11, rx722_curclass, "$!pos"
    goto alt726_end1992
  alt726_11995:
    nqp_rxmark rx722_bstack, alt726_21997, rx722_pos, 0
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!pos", rx722_pos
    $P11 = rx722_cur."routine_def"()
    repr_get_attr_int $I11, $P11, rx722_curclass, "$!pos"
    lt $I11, 0, rx722_fail1982
    nqp_rxmark rx722_bstack, rxsubrule728_pass1996, -1, 0
  rxsubrule728_pass1996:
    rx722_cstack = rx722_cur."!cursor_capture"($P11, "routine_def")
    repr_get_attr_int rx722_pos, $P11, rx722_curclass, "$!pos"
    goto alt726_end1992
  alt726_21997:
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!pos", rx722_pos
    $P11 = rx722_cur."panic"("Malformed multi")
    repr_get_attr_int $I11, $P11, rx722_curclass, "$!pos"
    lt $I11, 0, rx722_fail1982
    repr_get_attr_int rx722_pos, $P11, rx722_curclass, "$!pos"
  alt726_end1992:
    rx722_cur."!cursor_pass"(rx722_pos, "multi_declarator:sym<multi>", 'backtrack'=>1)
    .return (rx722_cur)
  rx722_restart1981:
    repr_get_attr_obj rx722_cstack, rx722_cur, rx722_curclass, "$!cstack"
  rx722_fail1982:
    unless rx722_bstack, rx722_done1980
    pop $I19, rx722_bstack
    if_null rx722_cstack, rx722_cstack_done1985
    unless rx722_cstack, rx722_cstack_done1985
    dec $I19
    set $P11, rx722_cstack[$I19]
  rx722_cstack_done1985:
    pop rx722_rep, rx722_bstack
    pop rx722_pos, rx722_bstack
    pop $I19, rx722_bstack
    lt rx722_pos, -1, rx722_done1980
    lt rx722_pos, 0, rx722_fail1982
    eq $I19, 0, rx722_fail1982
    nqp_islist $I20, rx722_cstack
    unless $I20, rx722_jump1983
    elements $I18, rx722_bstack
    le $I18, 0, rx722_cut1984
    dec $I18
    set $I18, rx722_bstack[$I18]
  rx722_cut1984:
    assign rx722_cstack, $I18
  rx722_jump1983:
    jump $I19
  rx722_done1980:
    rx722_cur."!cursor_fail"()
    .return (rx722_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_124_1349901750.327_caps" :subid("cuid_memo_175_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["declarator"], $P5003
    box $P5004, 0
    set $P5001["routine_def"], $P5004
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_124_1349901750.327_nfa" :subid("cuid_memo_176_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 109
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 117
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 108
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 116
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 105
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "ws"
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 0
    push $P5031, $P5032
    box $P5033, 0
    push $P5031, $P5033
    box $P5034, 0
    push $P5031, $P5034
    push $P5001, $P5031
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<proto>" :subid("cuid_125_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1082
    .param pmc _lex_param_0 
    .lex "$*MULTINESS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx730_tgt
    .local int rx730_pos
    .local int rx730_off
    .local int rx730_eos
    .local int rx730_rep
    .local pmc rx730_cur
    .local pmc rx730_curclass
    .local pmc rx730_bstack
    .local pmc rx730_cstack
    (rx730_cur, rx730_tgt, rx730_pos, rx730_curclass, rx730_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx730_cur
    length rx730_eos, rx730_tgt
    eq $I19, 1, rx730_restart2001
    gt rx730_pos, rx730_eos, rx730_fail2002
    repr_get_attr_int $I11, self, rx730_curclass, "$!from"
    ne $I11, -1, rxscan731_done2008
    goto rxscan731_scan2007
  rxscan731_loop2006:
    inc rx730_pos
    gt rx730_pos, rx730_eos, rx730_fail2002
    repr_bind_attr_int rx730_cur, rx730_curclass, "$!from", rx730_pos
  rxscan731_scan2007:
    nqp_rxmark rx730_bstack, rxscan731_loop2006, rx730_pos, 0
  rxscan731_done2008:
    repr_bind_attr_int rx730_cur, rx730_curclass, "$!pos", rx730_pos
    store_lex unicode:"$\x{a2}", rx730_cur
    box $P5002, "proto"
    set $P101, $P5002
    nqp_rxmark rx730_bstack, rxcap732_fail2010, rx730_pos, 0
    add $I11, rx730_pos, 5
    gt $I11, rx730_eos, rx730_fail2002
    substr $S10, rx730_tgt, rx730_pos, 5
    ne $S10, ucs4:"proto", rx730_fail2002
    add rx730_pos, 5
    nqp_rxpeek $I19, rx730_bstack, rxcap732_fail2010
    inc $I19
    set $I11, rx730_bstack[$I19]
    repr_bind_attr_int rx730_cur, rx730_curclass, "$!pos", rx730_pos
    $P11 = rx730_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx730_pos)
    rx730_cstack = rx730_cur."!cursor_capture"($P11, "sym")
    goto rxcap732_done2009
  rxcap732_fail2010:
    goto rx730_fail2002
  rxcap732_done2009:
    repr_bind_attr_int rx730_cur, rx730_curclass, "$!pos", rx730_pos
    $P11 = rx730_cur."ws"()
    repr_get_attr_int $I11, $P11, rx730_curclass, "$!pos"
    lt $I11, 0, rx730_fail2002
    repr_get_attr_int rx730_pos, $P11, rx730_curclass, "$!pos"
  alt734_02013:
    nqp_rxmark rx730_bstack, alt734_12015, rx730_pos, 0
    repr_bind_attr_int rx730_cur, rx730_curclass, "$!pos", rx730_pos
    $P11 = rx730_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx730_curclass, "$!pos"
    lt $I11, 0, rx730_fail2002
    nqp_rxmark rx730_bstack, rxsubrule735_pass2014, -1, 0
  rxsubrule735_pass2014:
    rx730_cstack = rx730_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx730_pos, $P11, rx730_curclass, "$!pos"
    goto alt734_end2012
  alt734_12015:
    nqp_rxmark rx730_bstack, alt734_22017, rx730_pos, 0
    repr_bind_attr_int rx730_cur, rx730_curclass, "$!pos", rx730_pos
    $P11 = rx730_cur."routine_def"()
    repr_get_attr_int $I11, $P11, rx730_curclass, "$!pos"
    lt $I11, 0, rx730_fail2002
    nqp_rxmark rx730_bstack, rxsubrule736_pass2016, -1, 0
  rxsubrule736_pass2016:
    rx730_cstack = rx730_cur."!cursor_capture"($P11, "routine_def")
    repr_get_attr_int rx730_pos, $P11, rx730_curclass, "$!pos"
    goto alt734_end2012
  alt734_22017:
    repr_bind_attr_int rx730_cur, rx730_curclass, "$!pos", rx730_pos
    $P11 = rx730_cur."panic"("Malformed proto")
    repr_get_attr_int $I11, $P11, rx730_curclass, "$!pos"
    lt $I11, 0, rx730_fail2002
    repr_get_attr_int rx730_pos, $P11, rx730_curclass, "$!pos"
  alt734_end2012:
    rx730_cur."!cursor_pass"(rx730_pos, "multi_declarator:sym<proto>", 'backtrack'=>1)
    .return (rx730_cur)
  rx730_restart2001:
    repr_get_attr_obj rx730_cstack, rx730_cur, rx730_curclass, "$!cstack"
  rx730_fail2002:
    unless rx730_bstack, rx730_done2000
    pop $I19, rx730_bstack
    if_null rx730_cstack, rx730_cstack_done2005
    unless rx730_cstack, rx730_cstack_done2005
    dec $I19
    set $P11, rx730_cstack[$I19]
  rx730_cstack_done2005:
    pop rx730_rep, rx730_bstack
    pop rx730_pos, rx730_bstack
    pop $I19, rx730_bstack
    lt rx730_pos, -1, rx730_done2000
    lt rx730_pos, 0, rx730_fail2002
    eq $I19, 0, rx730_fail2002
    nqp_islist $I20, rx730_cstack
    unless $I20, rx730_jump2003
    elements $I18, rx730_bstack
    le $I18, 0, rx730_cut2004
    dec $I18
    set $I18, rx730_bstack[$I18]
  rx730_cut2004:
    assign rx730_cstack, $I18
  rx730_jump2003:
    jump $I19
  rx730_done2000:
    rx730_cur."!cursor_fail"()
    .return (rx730_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_125_1349901750.327_caps" :subid("cuid_memo_177_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["declarator"], $P5003
    box $P5004, 0
    set $P5001["routine_def"], $P5004
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_125_1349901750.327_nfa" :subid("cuid_memo_178_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 112
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 114
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 111
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 116
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 111
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "ws"
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 0
    push $P5031, $P5032
    box $P5033, 0
    push $P5031, $P5033
    box $P5034, 0
    push $P5031, $P5034
    push $P5001, $P5031
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<null>" :subid("cuid_126_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1087
    .param pmc _lex_param_0 
    .lex "$*MULTINESS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx738_tgt
    .local int rx738_pos
    .local int rx738_off
    .local int rx738_eos
    .local int rx738_rep
    .local pmc rx738_cur
    .local pmc rx738_curclass
    .local pmc rx738_bstack
    .local pmc rx738_cstack
    (rx738_cur, rx738_tgt, rx738_pos, rx738_curclass, rx738_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx738_cur
    length rx738_eos, rx738_tgt
    eq $I19, 1, rx738_restart2021
    gt rx738_pos, rx738_eos, rx738_fail2022
    repr_get_attr_int $I11, self, rx738_curclass, "$!from"
    ne $I11, -1, rxscan739_done2028
    goto rxscan739_scan2027
  rxscan739_loop2026:
    inc rx738_pos
    gt rx738_pos, rx738_eos, rx738_fail2022
    repr_bind_attr_int rx738_cur, rx738_curclass, "$!from", rx738_pos
  rxscan739_scan2027:
    nqp_rxmark rx738_bstack, rxscan739_loop2026, rx738_pos, 0
  rxscan739_done2028:
    repr_bind_attr_int rx738_cur, rx738_curclass, "$!pos", rx738_pos
    store_lex unicode:"$\x{a2}", rx738_cur
    box $P5002, ""
    set $P101, $P5002
    repr_bind_attr_int rx738_cur, rx738_curclass, "$!pos", rx738_pos
    $P11 = rx738_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx738_curclass, "$!pos"
    lt $I11, 0, rx738_fail2022
    nqp_rxmark rx738_bstack, rxsubrule740_pass2029, -1, 0
  rxsubrule740_pass2029:
    rx738_cstack = rx738_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx738_pos, $P11, rx738_curclass, "$!pos"
    rx738_cur."!cursor_pass"(rx738_pos, "multi_declarator:sym<null>", 'backtrack'=>1)
    .return (rx738_cur)
  rx738_restart2021:
    repr_get_attr_obj rx738_cstack, rx738_cur, rx738_curclass, "$!cstack"
  rx738_fail2022:
    unless rx738_bstack, rx738_done2020
    pop $I19, rx738_bstack
    if_null rx738_cstack, rx738_cstack_done2025
    unless rx738_cstack, rx738_cstack_done2025
    dec $I19
    set $P11, rx738_cstack[$I19]
  rx738_cstack_done2025:
    pop rx738_rep, rx738_bstack
    pop rx738_pos, rx738_bstack
    pop $I19, rx738_bstack
    lt rx738_pos, -1, rx738_done2020
    lt rx738_pos, 0, rx738_fail2022
    eq $I19, 0, rx738_fail2022
    nqp_islist $I20, rx738_cstack
    unless $I20, rx738_jump2023
    elements $I18, rx738_bstack
    le $I18, 0, rx738_cut2024
    dec $I18
    set $I18, rx738_bstack[$I18]
  rx738_cut2024:
    assign rx738_cstack, $I18
  rx738_jump2023:
    jump $I19
  rx738_done2020:
    rx738_cur."!cursor_fail"()
    .return (rx738_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_126_1349901750.327_caps" :subid("cuid_memo_179_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["declarator"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_126_1349901750.327_nfa" :subid("cuid_memo_180_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "declarator"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "signature" :subid("cuid_128_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1092
    .param pmc _lex_param_0 
    .const 'Sub' $P5005 = 'cuid_396_1349901750.327' 
    capture_lex $P5005 
    .const 'Sub' $P5005 = 'cuid_127_1349901750.327' 
    capture_lex $P5005 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx741_tgt
    .local int rx741_pos
    .local int rx741_off
    .local int rx741_eos
    .local int rx741_rep
    .local pmc rx741_cur
    .local pmc rx741_curclass
    .local pmc rx741_bstack
    .local pmc rx741_cstack
    (rx741_cur, rx741_tgt, rx741_pos, rx741_curclass, rx741_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx741_cur
    length rx741_eos, rx741_tgt
    eq $I19, 1, rx741_restart2032
    gt rx741_pos, rx741_eos, rx741_fail2033
    repr_get_attr_int $I11, self, rx741_curclass, "$!from"
    ne $I11, -1, rxscan742_done2039
    goto rxscan742_scan2038
  rxscan742_loop2037:
    inc rx741_pos
    gt rx741_pos, rx741_eos, rx741_fail2033
    repr_bind_attr_int rx741_cur, rx741_curclass, "$!from", rx741_pos
  rxscan742_scan2038:
    nqp_rxmark rx741_bstack, rxscan742_loop2037, rx741_pos, 0
  rxscan742_done2039:
    nqp_rxmark rx741_bstack, rxquantr743_done2041, rx741_pos, 0
  rxquantr743_loop2040:
    repr_bind_attr_int rx741_cur, rx741_curclass, "$!pos", rx741_pos
    store_lex unicode:"$\x{a2}", rx741_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_396_1349901750.327' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx741_fail2033
    repr_bind_attr_int rx741_cur, rx741_curclass, "$!pos", rx741_pos
    $P11 = rx741_cur."ws"()
    repr_get_attr_int $I11, $P11, rx741_curclass, "$!pos"
    lt $I11, 0, rx741_fail2033
    repr_get_attr_int rx741_pos, $P11, rx741_curclass, "$!pos"
    repr_bind_attr_int rx741_cur, rx741_curclass, "$!pos", rx741_pos
    $P11 = rx741_cur."parameter"()
    repr_get_attr_int $I11, $P11, rx741_curclass, "$!pos"
    lt $I11, 0, rx741_fail2033
    nqp_rxmark rx741_bstack, rxsubrule746_pass2046, -1, 0
  rxsubrule746_pass2046:
    rx741_cstack = rx741_cur."!cursor_capture"($P11, "invocant")
    repr_get_attr_int rx741_pos, $P11, rx741_curclass, "$!pos"
    repr_bind_attr_int rx741_cur, rx741_curclass, "$!pos", rx741_pos
    $P11 = rx741_cur."ws"()
    repr_get_attr_int $I11, $P11, rx741_curclass, "$!pos"
    lt $I11, 0, rx741_fail2033
    repr_get_attr_int rx741_pos, $P11, rx741_curclass, "$!pos"
    add $I11, rx741_pos, 1
    gt $I11, rx741_eos, rx741_fail2033
    substr $S10, rx741_tgt, rx741_pos, 1
    ne $S10, ucs4:":", rx741_fail2033
    add rx741_pos, 1
    nqp_rxpeek $I19, rx741_bstack, rxquantr743_done2041
    inc $I19
    inc $I19
    set rx741_rep, rx741_bstack[$I19]
    nqp_rxcommit rx741_bstack, rxquantr743_done2041
    inc rx741_rep
  rxquantr743_done2041:
    nqp_rxmark rx741_bstack, rxquantr748_done2049, rx741_pos, 0
  rxquantr748_loop2048:
    nqp_rxmark rx741_bstack, rxquantr749_done2051, rx741_pos, 0
  rxquantr749_loop2050:
    repr_bind_attr_int rx741_cur, rx741_curclass, "$!pos", rx741_pos
    $P11 = rx741_cur."ws"()
    repr_get_attr_int $I11, $P11, rx741_curclass, "$!pos"
    lt $I11, 0, rx741_fail2033
    repr_get_attr_int rx741_pos, $P11, rx741_curclass, "$!pos"
    repr_bind_attr_int rx741_cur, rx741_curclass, "$!pos", rx741_pos
    $P11 = rx741_cur."parameter"()
    repr_get_attr_int $I11, $P11, rx741_curclass, "$!pos"
    lt $I11, 0, rx741_fail2033
    nqp_rxmark rx741_bstack, rxsubrule751_pass2053, -1, 0
  rxsubrule751_pass2053:
    rx741_cstack = rx741_cur."!cursor_capture"($P11, "parameter")
    repr_get_attr_int rx741_pos, $P11, rx741_curclass, "$!pos"
    repr_bind_attr_int rx741_cur, rx741_curclass, "$!pos", rx741_pos
    $P11 = rx741_cur."ws"()
    repr_get_attr_int $I11, $P11, rx741_curclass, "$!pos"
    lt $I11, 0, rx741_fail2033
    repr_get_attr_int rx741_pos, $P11, rx741_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt753_02056
    nqp_push_label $P11, alt753_12057
    nqp_rxmark rx741_bstack, alt753_end2055, -1, 0
    rx741_cur."!alt"(rx741_pos, "alt_nfa__26_1349901752.698", $P11)
    goto rx741_fail2033
  alt753_02056:
    add $I11, rx741_pos, 1
    gt $I11, rx741_eos, rx741_fail2033
    substr $S10, rx741_tgt, rx741_pos, 1
    ne $S10, ucs4:",", rx741_fail2033
    add rx741_pos, 1
    goto alt753_end2055
  alt753_12057:
    .const 'Sub' $P5004 = 'cuid_127_1349901750.327' 
    capture_lex $P5004
    repr_bind_attr_int rx741_cur, rx741_curclass, "$!pos", rx741_pos
    $P11 = rx741_cur."before"($P5004)
    repr_get_attr_int $I11, $P11, rx741_curclass, "$!pos"
    lt $I11, 0, rx741_fail2033
    nqp_rxmark rx741_bstack, rxsubrule758_pass2073, -1, 0
  rxsubrule758_pass2073:
    rx741_cstack = rx741_cur."!cursor_capture"($P11, "before")
    repr_get_attr_int rx741_pos, $P11, rx741_curclass, "$!pos"
    goto alt753_end2055
  alt753_end2055:
    nqp_rxcommit rx741_bstack, alt753_end2055
    nqp_rxpeek $I19, rx741_bstack, rxquantr749_done2051
    inc $I19
    inc $I19
    set rx741_rep, rx741_bstack[$I19]
    nqp_rxcommit rx741_bstack, rxquantr749_done2051
    inc rx741_rep
    nqp_rxmark rx741_bstack, rxquantr749_done2051, rx741_pos, rx741_rep
    goto rxquantr749_loop2050
  rxquantr749_done2051:
    nqp_rxpeek $I19, rx741_bstack, rxquantr748_done2049
    inc $I19
    inc $I19
    set rx741_rep, rx741_bstack[$I19]
    nqp_rxcommit rx741_bstack, rxquantr748_done2049
    inc rx741_rep
  rxquantr748_done2049:
    rx741_cur."!cursor_pass"(rx741_pos, "signature", 'backtrack'=>1)
    .return (rx741_cur)
  rx741_restart2032:
    repr_get_attr_obj rx741_cstack, rx741_cur, rx741_curclass, "$!cstack"
  rx741_fail2033:
    unless rx741_bstack, rx741_done2031
    pop $I19, rx741_bstack
    if_null rx741_cstack, rx741_cstack_done2036
    unless rx741_cstack, rx741_cstack_done2036
    dec $I19
    set $P11, rx741_cstack[$I19]
  rx741_cstack_done2036:
    pop rx741_rep, rx741_bstack
    pop rx741_pos, rx741_bstack
    pop $I19, rx741_bstack
    lt rx741_pos, -1, rx741_done2031
    lt rx741_pos, 0, rx741_fail2033
    eq $I19, 0, rx741_fail2033
    nqp_islist $I20, rx741_cstack
    unless $I20, rx741_jump2034
    elements $I18, rx741_bstack
    le $I18, 0, rx741_cut2035
    dec $I18
    set $I18, rx741_bstack[$I18]
  rx741_cut2035:
    assign rx741_cstack, $I18
  rx741_jump2034:
    jump $I19
  rx741_done2031:
    rx741_cur."!cursor_fail"()
    .return (rx741_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_128_1349901750.327_caps" :subid("cuid_memo_181_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 2
    set $P5001["invocant"], $P5002
    box $P5003, 2
    set $P5001["parameter"], $P5003
    box $P5004, 2
    set $P5001["before"], $P5004
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_128_1349901750.327_nfa" :subid("cuid_memo_182_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    box $P5007, 1
    push $P5003, $P5007
    box $P5008, 0
    push $P5003, $P5008
    box $P5009, 6
    push $P5003, $P5009
    push $P5001, $P5003
    new $P5010, 'ResizablePMCArray'
    box $P5011, 8
    push $P5010, $P5011
    box $P5012, "ws"
    push $P5010, $P5012
    box $P5013, 3
    push $P5010, $P5013
    push $P5001, $P5010
    new $P5014, 'ResizablePMCArray'
    box $P5015, 8
    push $P5014, $P5015
    box $P5016, "parameter"
    push $P5014, $P5016
    box $P5017, 4
    push $P5014, $P5017
    push $P5001, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 8
    push $P5018, $P5019
    box $P5020, "ws"
    push $P5018, $P5020
    box $P5021, 5
    push $P5018, $P5021
    push $P5001, $P5018
    new $P5022, 'ResizablePMCArray'
    box $P5023, 2
    push $P5022, $P5023
    box $P5024, 58
    push $P5022, $P5024
    box $P5025, 6
    push $P5022, $P5025
    push $P5001, $P5022
    new $P5026, 'ResizablePMCArray'
    box $P5027, 8
    push $P5026, $P5027
    box $P5028, "ws"
    push $P5026, $P5028
    box $P5029, 7
    push $P5026, $P5029
    box $P5030, 1
    push $P5026, $P5030
    box $P5031, 0
    push $P5026, $P5031
    box $P5032, 0
    push $P5026, $P5032
    box $P5033, 1
    push $P5026, $P5033
    box $P5034, 0
    push $P5026, $P5034
    box $P5035, 0
    push $P5026, $P5035
    push $P5001, $P5026
    new $P5036, 'ResizablePMCArray'
    box $P5037, 8
    push $P5036, $P5037
    box $P5038, "parameter"
    push $P5036, $P5038
    box $P5039, 8
    push $P5036, $P5039
    push $P5001, $P5036
    new $P5040, 'ResizablePMCArray'
    box $P5041, 8
    push $P5040, $P5041
    box $P5042, "ws"
    push $P5040, $P5042
    box $P5043, 9
    push $P5040, $P5043
    push $P5001, $P5040
    new $P5044, 'ResizablePMCArray'
    box $P5045, 2
    push $P5044, $P5045
    box $P5046, 44
    push $P5044, $P5046
    box $P5047, 6
    push $P5044, $P5047
    box $P5048, 4
    push $P5044, $P5048
    box $P5049, 32
    push $P5044, $P5049
    box $P5050, 9
    push $P5044, $P5050
    box $P5051, 1
    push $P5044, $P5051
    box $P5052, 0
    push $P5044, $P5052
    box $P5053, 11
    push $P5044, $P5053
    push $P5001, $P5044
    new $P5054, 'ResizablePMCArray'
    box $P5055, 0
    push $P5054, $P5055
    box $P5056, 0
    push $P5054, $P5056
    box $P5057, 0
    push $P5054, $P5057
    push $P5001, $P5054
    new $P5058, 'ResizablePMCArray'
    box $P5059, 2
    push $P5058, $P5059
    box $P5060, 41
    push $P5058, $P5060
    box $P5061, 10
    push $P5058, $P5061
    box $P5062, 2
    push $P5058, $P5062
    box $P5063, 123
    push $P5058, $P5063
    box $P5064, 10
    push $P5058, $P5064
    push $P5001, $P5058
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_128_1349901750.327_alt_nfa__26_1349901752.698" :subid("cuid_memo_183_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 44
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 4
    push $P5010, $P5011
    box $P5012, 32
    push $P5010, $P5012
    box $P5013, 1
    push $P5010, $P5013
    box $P5014, 1
    push $P5010, $P5014
    box $P5015, 0
    push $P5010, $P5015
    box $P5016, 3
    push $P5010, $P5016
    push $P5008, $P5010
    new $P5017, 'ResizablePMCArray'
    box $P5018, 0
    push $P5017, $P5018
    box $P5019, 0
    push $P5017, $P5019
    box $P5020, 0
    push $P5017, $P5020
    push $P5008, $P5017
    new $P5021, 'ResizablePMCArray'
    box $P5022, 2
    push $P5021, $P5022
    box $P5023, 41
    push $P5021, $P5023
    box $P5024, 2
    push $P5021, $P5024
    box $P5025, 2
    push $P5021, $P5025
    box $P5026, 123
    push $P5021, $P5026
    box $P5027, 2
    push $P5021, $P5027
    push $P5008, $P5021
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_396_1349901750.327") :anon :lex :outer("cuid_128_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1093

    find_dynamic_lex $P5001, "$*INVOCANT_OK"
    unless_null $P5001, fallback2042
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$INVOCANT_OK"]
    unless_null $P5002, fallback2043
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5005
  fallback2043:
    unless_null $P5002, vivi_7442044
    die "Contextual $*INVOCANT_OK not found"
    box $P5006, "Contextual $*INVOCANT_OK not found"
    set $P5002, $P5006
  vivi_7442044:
    set $P5001, $P5002
  fallback2042:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_127_1349901750.327") :anon :lex :outer("cuid_128_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx754_tgt
    .local int rx754_pos
    .local int rx754_off
    .local int rx754_eos
    .local int rx754_rep
    .local pmc rx754_cur
    .local pmc rx754_curclass
    .local pmc rx754_bstack
    .local pmc rx754_cstack
    (rx754_cur, rx754_tgt, rx754_pos, rx754_curclass, rx754_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx754_cur
    length rx754_eos, rx754_tgt
    eq $I19, 1, rx754_restart2060
    gt rx754_pos, rx754_eos, rx754_fail2061
    repr_get_attr_int $I11, self, rx754_curclass, "$!from"
    ne $I11, -1, rxscan755_done2067
    goto rxscan755_scan2066
  rxscan755_loop2065:
    inc rx754_pos
    gt rx754_pos, rx754_eos, rx754_fail2061
    repr_bind_attr_int rx754_cur, rx754_curclass, "$!from", rx754_pos
  rxscan755_scan2066:
    nqp_rxmark rx754_bstack, rxscan755_loop2065, rx754_pos, 0
  rxscan755_done2067:
    nqp_rxmark rx754_bstack, rxquantr756_done2069, rx754_pos, 0
  rxquantr756_loop2068:
    ge rx754_pos, rx754_eos, rx754_fail2061
    is_cclass $I11, .CCLASS_WHITESPACE, rx754_tgt, rx754_pos
    unless $I11, rx754_fail2061
    add rx754_pos, 1
    nqp_rxpeek $I19, rx754_bstack, rxquantr756_done2069
    inc $I19
    inc $I19
    set rx754_rep, rx754_bstack[$I19]
    nqp_rxcommit rx754_bstack, rxquantr756_done2069
    inc rx754_rep
    nqp_rxmark rx754_bstack, rxquantr756_done2069, rx754_pos, rx754_rep
    goto rxquantr756_loop2068
  rxquantr756_done2069:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt757_02071
    nqp_push_label $P11, alt757_12072
    nqp_rxmark rx754_bstack, alt757_end2070, -1, 0
    rx754_cur."!alt"(rx754_pos, "alt_nfa__25_1349901752.692", $P11)
    goto rx754_fail2061
  alt757_02071:
    add $I11, rx754_pos, 1
    gt $I11, rx754_eos, rx754_fail2061
    substr $S10, rx754_tgt, rx754_pos, 1
    ne $S10, ucs4:")", rx754_fail2061
    add rx754_pos, 1
    goto alt757_end2070
  alt757_12072:
    add $I11, rx754_pos, 1
    gt $I11, rx754_eos, rx754_fail2061
    substr $S10, rx754_tgt, rx754_pos, 1
    ne $S10, ucs4:"{", rx754_fail2061
    add rx754_pos, 1
    goto alt757_end2070
  alt757_end2070:
    nqp_rxcommit rx754_bstack, alt757_end2070
    rx754_cur."!cursor_pass"(rx754_pos, 'backtrack'=>1)
    .return (rx754_cur)
  rx754_restart2060:
    repr_get_attr_obj rx754_cstack, rx754_cur, rx754_curclass, "$!cstack"
  rx754_fail2061:
    unless rx754_bstack, rx754_done2059
    pop $I19, rx754_bstack
    if_null rx754_cstack, rx754_cstack_done2064
    unless rx754_cstack, rx754_cstack_done2064
    dec $I19
    set $P11, rx754_cstack[$I19]
  rx754_cstack_done2064:
    pop rx754_rep, rx754_bstack
    pop rx754_pos, rx754_bstack
    pop $I19, rx754_bstack
    lt rx754_pos, -1, rx754_done2059
    lt rx754_pos, 0, rx754_fail2061
    eq $I19, 0, rx754_fail2061
    nqp_islist $I20, rx754_cstack
    unless $I20, rx754_jump2062
    elements $I18, rx754_bstack
    le $I18, 0, rx754_cut2063
    dec $I18
    set $I18, rx754_bstack[$I18]
  rx754_cut2063:
    assign rx754_cstack, $I18
  rx754_jump2062:
    jump $I19
  rx754_done2059:
    rx754_cur."!cursor_fail"()
    .return (rx754_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_127_1349901750.327_caps" :subid("cuid_memo_184_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_127_1349901750.327_nfa" :subid("cuid_memo_185_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 4
    push $P5003, $P5004
    box $P5005, 32
    push $P5003, $P5005
    box $P5006, 1
    push $P5003, $P5006
    box $P5007, 1
    push $P5003, $P5007
    box $P5008, 0
    push $P5003, $P5008
    box $P5009, 2
    push $P5003, $P5009
    push $P5001, $P5003
    new $P5010, 'ResizablePMCArray'
    box $P5011, 2
    push $P5010, $P5011
    box $P5012, 41
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    box $P5014, 2
    push $P5010, $P5014
    box $P5015, 123
    push $P5010, $P5015
    box $P5016, 0
    push $P5010, $P5016
    push $P5001, $P5010
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_127_1349901750.327_alt_nfa__25_1349901752.692" :subid("cuid_memo_186_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 41
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 2
    push $P5010, $P5011
    box $P5012, 123
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    push $P5008, $P5010
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "parameter" :subid("cuid_129_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1097
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx759_tgt
    .local int rx759_pos
    .local int rx759_off
    .local int rx759_eos
    .local int rx759_rep
    .local pmc rx759_cur
    .local pmc rx759_curclass
    .local pmc rx759_bstack
    .local pmc rx759_cstack
    (rx759_cur, rx759_tgt, rx759_pos, rx759_curclass, rx759_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx759_cur
    length rx759_eos, rx759_tgt
    eq $I19, 1, rx759_restart2076
    gt rx759_pos, rx759_eos, rx759_fail2077
    repr_get_attr_int $I11, self, rx759_curclass, "$!from"
    ne $I11, -1, rxscan760_done2083
    goto rxscan760_scan2082
  rxscan760_loop2081:
    inc rx759_pos
    gt rx759_pos, rx759_eos, rx759_fail2077
    repr_bind_attr_int rx759_cur, rx759_curclass, "$!from", rx759_pos
  rxscan760_scan2082:
    nqp_rxmark rx759_bstack, rxscan760_loop2081, rx759_pos, 0
  rxscan760_done2083:
    nqp_rxmark rx759_bstack, rxquantr761_done2085, rx759_pos, 0
  rxquantr761_loop2084:
    repr_bind_attr_int rx759_cur, rx759_curclass, "$!pos", rx759_pos
    $P11 = rx759_cur."typename"()
    repr_get_attr_int $I11, $P11, rx759_curclass, "$!pos"
    lt $I11, 0, rx759_fail2077
    nqp_rxmark rx759_bstack, rxsubrule762_pass2086, -1, 0
  rxsubrule762_pass2086:
    rx759_cstack = rx759_cur."!cursor_capture"($P11, "typename")
    repr_get_attr_int rx759_pos, $P11, rx759_curclass, "$!pos"
    nqp_rxmark rx759_bstack, rxquantr763_done2088, rx759_pos, 0
  rxquantr763_loop2087:
    add $I11, rx759_pos, 1
    gt $I11, rx759_eos, rx759_fail2077
    substr $S10, rx759_tgt, rx759_pos, 1
    ne $S10, ucs4:":", rx759_fail2077
    add rx759_pos, 1
    nqp_rxmark rx759_bstack, rxcap764_fail2090, rx759_pos, 0
    ge rx759_pos, rx759_eos, rx759_fail2077
    substr $S11, rx759_tgt, rx759_pos, 1
    index $I11, ucs4:"_DU", $S11
    lt $I11, 0, rx759_fail2077
    inc rx759_pos
    nqp_rxpeek $I19, rx759_bstack, rxcap764_fail2090
    inc $I19
    set $I11, rx759_bstack[$I19]
    repr_bind_attr_int rx759_cur, rx759_curclass, "$!pos", rx759_pos
    $P11 = rx759_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx759_pos)
    rx759_cstack = rx759_cur."!cursor_capture"($P11, "definedness")
    goto rxcap764_done2089
  rxcap764_fail2090:
    goto rx759_fail2077
  rxcap764_done2089:
    nqp_rxpeek $I19, rx759_bstack, rxquantr763_done2088
    inc $I19
    inc $I19
    set rx759_rep, rx759_bstack[$I19]
    nqp_rxcommit rx759_bstack, rxquantr763_done2088
    inc rx759_rep
  rxquantr763_done2088:
    repr_bind_attr_int rx759_cur, rx759_curclass, "$!pos", rx759_pos
    $P11 = rx759_cur."ws"()
    repr_get_attr_int $I11, $P11, rx759_curclass, "$!pos"
    lt $I11, 0, rx759_fail2077
    repr_get_attr_int rx759_pos, $P11, rx759_curclass, "$!pos"
    nqp_rxpeek $I19, rx759_bstack, rxquantr761_done2085
    inc $I19
    inc $I19
    set rx759_rep, rx759_bstack[$I19]
    nqp_rxcommit rx759_bstack, rxquantr761_done2085
    inc rx759_rep
    nqp_rxmark rx759_bstack, rxquantr761_done2085, rx759_pos, rx759_rep
    goto rxquantr761_loop2084
  rxquantr761_done2085:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt766_02093
    nqp_push_label $P11, alt766_12097
    nqp_rxmark rx759_bstack, alt766_end2092, -1, 0
    rx759_cur."!alt"(rx759_pos, "alt_nfa__27_1349901752.723", $P11)
    goto rx759_fail2077
  alt766_02093:
    nqp_rxmark rx759_bstack, rxcap767_fail2095, rx759_pos, 0
    add $I11, rx759_pos, 1
    gt $I11, rx759_eos, rx759_fail2077
    substr $S10, rx759_tgt, rx759_pos, 1
    ne $S10, ucs4:"*", rx759_fail2077
    add rx759_pos, 1
    nqp_rxpeek $I19, rx759_bstack, rxcap767_fail2095
    inc $I19
    set $I11, rx759_bstack[$I19]
    repr_bind_attr_int rx759_cur, rx759_curclass, "$!pos", rx759_pos
    $P11 = rx759_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx759_pos)
    rx759_cstack = rx759_cur."!cursor_capture"($P11, "quant")
    goto rxcap767_done2094
  rxcap767_fail2095:
    goto rx759_fail2077
  rxcap767_done2094:
    repr_bind_attr_int rx759_cur, rx759_curclass, "$!pos", rx759_pos
    $P11 = rx759_cur."param_var"()
    repr_get_attr_int $I11, $P11, rx759_curclass, "$!pos"
    lt $I11, 0, rx759_fail2077
    nqp_rxmark rx759_bstack, rxsubrule768_pass2096, -1, 0
  rxsubrule768_pass2096:
    rx759_cstack = rx759_cur."!cursor_capture"($P11, "param_var")
    repr_get_attr_int rx759_pos, $P11, rx759_curclass, "$!pos"
    goto alt766_end2092
  alt766_12097:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt769_02099
    nqp_push_label $P11, alt769_12101
    nqp_rxmark rx759_bstack, alt769_end2098, -1, 0
    rx759_cur."!alt"(rx759_pos, "alt_nfa__28_1349901752.723", $P11)
    goto rx759_fail2077
  alt769_02099:
    repr_bind_attr_int rx759_cur, rx759_curclass, "$!pos", rx759_pos
    $P11 = rx759_cur."param_var"()
    repr_get_attr_int $I11, $P11, rx759_curclass, "$!pos"
    lt $I11, 0, rx759_fail2077
    nqp_rxmark rx759_bstack, rxsubrule770_pass2100, -1, 0
  rxsubrule770_pass2100:
    rx759_cstack = rx759_cur."!cursor_capture"($P11, "param_var")
    repr_get_attr_int rx759_pos, $P11, rx759_curclass, "$!pos"
    goto alt769_end2098
  alt769_12101:
    repr_bind_attr_int rx759_cur, rx759_curclass, "$!pos", rx759_pos
    $P11 = rx759_cur."named_param"()
    repr_get_attr_int $I11, $P11, rx759_curclass, "$!pos"
    lt $I11, 0, rx759_fail2077
    nqp_rxmark rx759_bstack, rxsubrule771_pass2102, -1, 0
  rxsubrule771_pass2102:
    rx759_cstack = rx759_cur."!cursor_capture"($P11, "named_param")
    repr_get_attr_int rx759_pos, $P11, rx759_curclass, "$!pos"
    goto alt769_end2098
  alt769_end2098:
    nqp_rxcommit rx759_bstack, alt769_end2098
    nqp_rxmark rx759_bstack, rxcap772_fail2104, rx759_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt773_02106
    nqp_push_label $P11, alt773_12107
    nqp_push_label $P11, alt773_22108
    nqp_rxmark rx759_bstack, alt773_end2105, -1, 0
    rx759_cur."!alt"(rx759_pos, "alt_nfa__29_1349901752.724", $P11)
    goto rx759_fail2077
  alt773_02106:
    add $I11, rx759_pos, 1
    gt $I11, rx759_eos, rx759_fail2077
    substr $S10, rx759_tgt, rx759_pos, 1
    ne $S10, ucs4:"?", rx759_fail2077
    add rx759_pos, 1
    goto alt773_end2105
  alt773_12107:
    add $I11, rx759_pos, 1
    gt $I11, rx759_eos, rx759_fail2077
    substr $S10, rx759_tgt, rx759_pos, 1
    ne $S10, ucs4:"!", rx759_fail2077
    add rx759_pos, 1
    goto alt773_end2105
  alt773_22108:
    goto alt773_end2105
  alt773_end2105:
    nqp_rxcommit rx759_bstack, alt773_end2105
    nqp_rxpeek $I19, rx759_bstack, rxcap772_fail2104
    inc $I19
    set $I11, rx759_bstack[$I19]
    repr_bind_attr_int rx759_cur, rx759_curclass, "$!pos", rx759_pos
    $P11 = rx759_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx759_pos)
    rx759_cstack = rx759_cur."!cursor_capture"($P11, "quant")
    goto rxcap772_done2103
  rxcap772_fail2104:
    goto rx759_fail2077
  rxcap772_done2103:
    goto alt766_end2092
  alt766_end2092:
    nqp_rxcommit rx759_bstack, alt766_end2092
    nqp_rxmark rx759_bstack, rxquantr775_done2111, rx759_pos, 0
  rxquantr775_loop2110:
    repr_bind_attr_int rx759_cur, rx759_curclass, "$!pos", rx759_pos
    $P11 = rx759_cur."default_value"()
    repr_get_attr_int $I11, $P11, rx759_curclass, "$!pos"
    lt $I11, 0, rx759_fail2077
    goto rxsubrule776_pass2112
  rxsubrule776_back2113:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx759_curclass, "$!pos"
    lt $I11, 0, rx759_fail2077
  rxsubrule776_pass2112:
    rx759_cstack = rx759_cur."!cursor_capture"($P11, "default_value")
    set_addr $I11, rxsubrule776_back2113
    push rx759_bstack, $I11
    push rx759_bstack, 0
    push rx759_bstack, rx759_pos
    elements $I11, rx759_cstack
    push rx759_bstack, $I11
    repr_get_attr_int rx759_pos, $P11, rx759_curclass, "$!pos"
    nqp_rxpeek $I19, rx759_bstack, rxquantr775_done2111
    inc $I19
    inc $I19
    set rx759_rep, rx759_bstack[$I19]
    nqp_rxcommit rx759_bstack, rxquantr775_done2111
    inc rx759_rep
  rxquantr775_done2111:
    rx759_cur."!cursor_pass"(rx759_pos, "parameter", 'backtrack'=>1)
    .return (rx759_cur)
  rx759_restart2076:
    repr_get_attr_obj rx759_cstack, rx759_cur, rx759_curclass, "$!cstack"
  rx759_fail2077:
    unless rx759_bstack, rx759_done2075
    pop $I19, rx759_bstack
    if_null rx759_cstack, rx759_cstack_done2080
    unless rx759_cstack, rx759_cstack_done2080
    dec $I19
    set $P11, rx759_cstack[$I19]
  rx759_cstack_done2080:
    pop rx759_rep, rx759_bstack
    pop rx759_pos, rx759_bstack
    pop $I19, rx759_bstack
    lt rx759_pos, -1, rx759_done2075
    lt rx759_pos, 0, rx759_fail2077
    eq $I19, 0, rx759_fail2077
    nqp_islist $I20, rx759_cstack
    unless $I20, rx759_jump2078
    elements $I18, rx759_bstack
    le $I18, 0, rx759_cut2079
    dec $I18
    set $I18, rx759_bstack[$I18]
  rx759_cut2079:
    assign rx759_cstack, $I18
  rx759_jump2078:
    jump $I19
  rx759_done2075:
    rx759_cur."!cursor_fail"()
    .return (rx759_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_129_1349901750.327_caps" :subid("cuid_memo_187_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 2
    set $P5001["typename"], $P5002
    box $P5003, 2
    set $P5001["definedness"], $P5003
    box $P5004, 0
    set $P5001["quant"], $P5004
    box $P5005, 0
    set $P5001["param_var"], $P5005
    box $P5006, 0
    set $P5001["named_param"], $P5006
    box $P5007, 2
    set $P5001["default_value"], $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_129_1349901750.327_nfa" :subid("cuid_memo_188_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "typename"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    box $P5007, 1
    push $P5003, $P5007
    box $P5008, 0
    push $P5003, $P5008
    box $P5009, 5
    push $P5003, $P5009
    push $P5001, $P5003
    new $P5010, 'ResizablePMCArray'
    box $P5011, 2
    push $P5010, $P5011
    box $P5012, 58
    push $P5010, $P5012
    box $P5013, 3
    push $P5010, $P5013
    box $P5014, 1
    push $P5010, $P5014
    box $P5015, 0
    push $P5010, $P5015
    box $P5016, 4
    push $P5010, $P5016
    push $P5001, $P5010
    new $P5017, 'ResizablePMCArray'
    box $P5018, 6
    push $P5017, $P5018
    box $P5019, "_DU"
    push $P5017, $P5019
    box $P5020, 4
    push $P5017, $P5020
    push $P5001, $P5017
    new $P5021, 'ResizablePMCArray'
    box $P5022, 8
    push $P5021, $P5022
    box $P5023, "ws"
    push $P5021, $P5023
    box $P5024, 1
    push $P5021, $P5024
    push $P5001, $P5021
    new $P5025, 'ResizablePMCArray'
    box $P5026, 2
    push $P5025, $P5026
    box $P5027, 42
    push $P5025, $P5027
    box $P5028, 6
    push $P5025, $P5028
    box $P5029, 8
    push $P5025, $P5029
    box $P5030, "param_var"
    push $P5025, $P5030
    box $P5031, 8
    push $P5025, $P5031
    box $P5032, 8
    push $P5025, $P5032
    box $P5033, "named_param"
    push $P5025, $P5033
    box $P5034, 8
    push $P5025, $P5034
    push $P5001, $P5025
    new $P5035, 'ResizablePMCArray'
    box $P5036, 8
    push $P5035, $P5036
    box $P5037, "param_var"
    push $P5035, $P5037
    box $P5038, 7
    push $P5035, $P5038
    push $P5001, $P5035
    new $P5039, 'ResizablePMCArray'
    box $P5040, 8
    push $P5039, $P5040
    box $P5041, "default_value"
    push $P5039, $P5041
    box $P5042, 0
    push $P5039, $P5042
    box $P5043, 1
    push $P5039, $P5043
    box $P5044, 0
    push $P5039, $P5044
    box $P5045, 0
    push $P5039, $P5045
    push $P5001, $P5039
    new $P5046, 'ResizablePMCArray'
    box $P5047, 2
    push $P5046, $P5047
    box $P5048, 63
    push $P5046, $P5048
    box $P5049, 7
    push $P5046, $P5049
    box $P5050, 2
    push $P5046, $P5050
    box $P5051, 33
    push $P5046, $P5051
    box $P5052, 7
    push $P5046, $P5052
    box $P5053, 1
    push $P5046, $P5053
    box $P5054, 0
    push $P5046, $P5054
    box $P5055, 7
    push $P5046, $P5055
    push $P5001, $P5046
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_129_1349901750.327_alt_nfa__28_1349901752.723" :subid("cuid_memo_189_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 8
    push $P5004, $P5005
    box $P5006, "param_var"
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 8
    push $P5010, $P5011
    box $P5012, "named_param"
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    push $P5008, $P5010
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_129_1349901750.327_alt_nfa__29_1349901752.724" :subid("cuid_memo_190_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 63
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 2
    push $P5010, $P5011
    box $P5012, 33
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    push $P5008, $P5010
    push $P5001, $P5008
    new $P5014, 'ResizablePMCArray'
    new $P5015, 'ResizablePMCArray'
    push $P5014, $P5015
    new $P5016, 'ResizablePMCArray'
    box $P5017, 1
    push $P5016, $P5017
    box $P5018, 0
    push $P5016, $P5018
    box $P5019, 0
    push $P5016, $P5019
    push $P5014, $P5016
    push $P5001, $P5014
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_129_1349901750.327_alt_nfa__27_1349901752.723" :subid("cuid_memo_191_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 42
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 8
    push $P5008, $P5009
    box $P5010, "param_var"
    push $P5008, $P5010
    box $P5011, 0
    push $P5008, $P5011
    push $P5002, $P5008
    push $P5001, $P5002
    new $P5012, 'ResizablePMCArray'
    new $P5013, 'ResizablePMCArray'
    push $P5012, $P5013
    new $P5014, 'ResizablePMCArray'
    box $P5015, 8
    push $P5014, $P5015
    box $P5016, "param_var"
    push $P5014, $P5016
    box $P5017, 2
    push $P5014, $P5017
    box $P5018, 8
    push $P5014, $P5018
    box $P5019, "named_param"
    push $P5014, $P5019
    box $P5020, 2
    push $P5014, $P5020
    push $P5012, $P5014
    new $P5021, 'ResizablePMCArray'
    box $P5022, 2
    push $P5021, $P5022
    box $P5023, 63
    push $P5021, $P5023
    box $P5024, 0
    push $P5021, $P5024
    box $P5025, 2
    push $P5021, $P5025
    box $P5026, 33
    push $P5021, $P5026
    box $P5027, 0
    push $P5021, $P5027
    box $P5028, 1
    push $P5021, $P5028
    box $P5029, 0
    push $P5021, $P5029
    box $P5030, 0
    push $P5021, $P5030
    push $P5012, $P5021
    push $P5001, $P5012
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "param_var" :subid("cuid_130_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1106
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx777_tgt
    .local int rx777_pos
    .local int rx777_off
    .local int rx777_eos
    .local int rx777_rep
    .local pmc rx777_cur
    .local pmc rx777_curclass
    .local pmc rx777_bstack
    .local pmc rx777_cstack
    (rx777_cur, rx777_tgt, rx777_pos, rx777_curclass, rx777_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx777_cur
    length rx777_eos, rx777_tgt
    eq $I19, 1, rx777_restart2116
    gt rx777_pos, rx777_eos, rx777_fail2117
    repr_get_attr_int $I11, self, rx777_curclass, "$!from"
    ne $I11, -1, rxscan778_done2123
    goto rxscan778_scan2122
  rxscan778_loop2121:
    inc rx777_pos
    gt rx777_pos, rx777_eos, rx777_fail2117
    repr_bind_attr_int rx777_cur, rx777_curclass, "$!from", rx777_pos
  rxscan778_scan2122:
    nqp_rxmark rx777_bstack, rxscan778_loop2121, rx777_pos, 0
  rxscan778_done2123:
    repr_bind_attr_int rx777_cur, rx777_curclass, "$!pos", rx777_pos
    $P11 = rx777_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx777_curclass, "$!pos"
    lt $I11, 0, rx777_fail2117
    nqp_rxmark rx777_bstack, rxsubrule779_pass2124, -1, 0
  rxsubrule779_pass2124:
    rx777_cstack = rx777_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx777_pos, $P11, rx777_curclass, "$!pos"
    nqp_rxmark rx777_bstack, rxquantr780_done2126, rx777_pos, 0
  rxquantr780_loop2125:
    repr_bind_attr_int rx777_cur, rx777_curclass, "$!pos", rx777_pos
    $P11 = rx777_cur."twigil"()
    repr_get_attr_int $I11, $P11, rx777_curclass, "$!pos"
    lt $I11, 0, rx777_fail2117
    goto rxsubrule781_pass2127
  rxsubrule781_back2128:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx777_curclass, "$!pos"
    lt $I11, 0, rx777_fail2117
  rxsubrule781_pass2127:
    rx777_cstack = rx777_cur."!cursor_capture"($P11, "twigil")
    set_addr $I11, rxsubrule781_back2128
    push rx777_bstack, $I11
    push rx777_bstack, 0
    push rx777_bstack, rx777_pos
    elements $I11, rx777_cstack
    push rx777_bstack, $I11
    repr_get_attr_int rx777_pos, $P11, rx777_curclass, "$!pos"
    nqp_rxpeek $I19, rx777_bstack, rxquantr780_done2126
    inc $I19
    inc $I19
    set rx777_rep, rx777_bstack[$I19]
    nqp_rxcommit rx777_bstack, rxquantr780_done2126
    inc rx777_rep
  rxquantr780_done2126:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt782_02130
    nqp_push_label $P11, alt782_12132
    nqp_rxmark rx777_bstack, alt782_end2129, -1, 0
    rx777_cur."!alt"(rx777_pos, "alt_nfa__30_1349901752.735", $P11)
    goto rx777_fail2117
  alt782_02130:
    repr_bind_attr_int rx777_cur, rx777_curclass, "$!pos", rx777_pos
    $P11 = rx777_cur."ident"()
    repr_get_attr_int $I11, $P11, rx777_curclass, "$!pos"
    lt $I11, 0, rx777_fail2117
    nqp_rxmark rx777_bstack, rxsubrule783_pass2131, -1, 0
  rxsubrule783_pass2131:
    rx777_cstack = rx777_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx777_pos, $P11, rx777_curclass, "$!pos"
    goto alt782_end2129
  alt782_12132:
    nqp_rxmark rx777_bstack, rxcap784_fail2134, rx777_pos, 0
    ge rx777_pos, rx777_eos, rx777_fail2117
    substr $S11, rx777_tgt, rx777_pos, 1
    index $I11, ucs4:"/!", $S11
    lt $I11, 0, rx777_fail2117
    inc rx777_pos
    nqp_rxpeek $I19, rx777_bstack, rxcap784_fail2134
    inc $I19
    set $I11, rx777_bstack[$I19]
    repr_bind_attr_int rx777_cur, rx777_curclass, "$!pos", rx777_pos
    $P11 = rx777_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx777_pos)
    rx777_cstack = rx777_cur."!cursor_capture"($P11, "name")
    goto rxcap784_done2133
  rxcap784_fail2134:
    goto rx777_fail2117
  rxcap784_done2133:
    goto alt782_end2129
  alt782_end2129:
    nqp_rxcommit rx777_bstack, alt782_end2129
    rx777_cur."!cursor_pass"(rx777_pos, "param_var", 'backtrack'=>1)
    .return (rx777_cur)
  rx777_restart2116:
    repr_get_attr_obj rx777_cstack, rx777_cur, rx777_curclass, "$!cstack"
  rx777_fail2117:
    unless rx777_bstack, rx777_done2115
    pop $I19, rx777_bstack
    if_null rx777_cstack, rx777_cstack_done2120
    unless rx777_cstack, rx777_cstack_done2120
    dec $I19
    set $P11, rx777_cstack[$I19]
  rx777_cstack_done2120:
    pop rx777_rep, rx777_bstack
    pop rx777_pos, rx777_bstack
    pop $I19, rx777_bstack
    lt rx777_pos, -1, rx777_done2115
    lt rx777_pos, 0, rx777_fail2117
    eq $I19, 0, rx777_fail2117
    nqp_islist $I20, rx777_cstack
    unless $I20, rx777_jump2118
    elements $I18, rx777_bstack
    le $I18, 0, rx777_cut2119
    dec $I18
    set $I18, rx777_bstack[$I18]
  rx777_cut2119:
    assign rx777_cstack, $I18
  rx777_jump2118:
    jump $I19
  rx777_done2115:
    rx777_cur."!cursor_fail"()
    .return (rx777_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_130_1349901750.327_caps" :subid("cuid_memo_192_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sigil"], $P5002
    box $P5003, 2
    set $P5001["twigil"], $P5003
    box $P5004, 0
    set $P5001["name"], $P5004
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_130_1349901750.327_nfa" :subid("cuid_memo_193_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "sigil"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "twigil"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    box $P5011, 1
    push $P5007, $P5011
    box $P5012, 0
    push $P5007, $P5012
    box $P5013, 3
    push $P5007, $P5013
    push $P5001, $P5007
    new $P5014, 'ResizablePMCArray'
    box $P5015, 8
    push $P5014, $P5015
    box $P5016, "ident"
    push $P5014, $P5016
    box $P5017, 0
    push $P5014, $P5017
    box $P5018, 6
    push $P5014, $P5018
    box $P5019, "/!"
    push $P5014, $P5019
    box $P5020, 0
    push $P5014, $P5020
    push $P5001, $P5014
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_130_1349901750.327_alt_nfa__30_1349901752.735" :subid("cuid_memo_194_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 8
    push $P5004, $P5005
    box $P5006, "ident"
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 6
    push $P5010, $P5011
    box $P5012, "/!"
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    push $P5008, $P5010
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "named_param" :subid("cuid_131_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1111
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx785_tgt
    .local int rx785_pos
    .local int rx785_off
    .local int rx785_eos
    .local int rx785_rep
    .local pmc rx785_cur
    .local pmc rx785_curclass
    .local pmc rx785_bstack
    .local pmc rx785_cstack
    (rx785_cur, rx785_tgt, rx785_pos, rx785_curclass, rx785_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx785_cur
    length rx785_eos, rx785_tgt
    eq $I19, 1, rx785_restart2137
    gt rx785_pos, rx785_eos, rx785_fail2138
    repr_get_attr_int $I11, self, rx785_curclass, "$!from"
    ne $I11, -1, rxscan786_done2144
    goto rxscan786_scan2143
  rxscan786_loop2142:
    inc rx785_pos
    gt rx785_pos, rx785_eos, rx785_fail2138
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!from", rx785_pos
  rxscan786_scan2143:
    nqp_rxmark rx785_bstack, rxscan786_loop2142, rx785_pos, 0
  rxscan786_done2144:
    add $I11, rx785_pos, 1
    gt $I11, rx785_eos, rx785_fail2138
    substr $S10, rx785_tgt, rx785_pos, 1
    ne $S10, ucs4:":", rx785_fail2138
    add rx785_pos, 1
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."param_var"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2138
    nqp_rxmark rx785_bstack, rxsubrule787_pass2145, -1, 0
  rxsubrule787_pass2145:
    rx785_cstack = rx785_cur."!cursor_capture"($P11, "param_var")
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    rx785_cur."!cursor_pass"(rx785_pos, "named_param", 'backtrack'=>1)
    .return (rx785_cur)
  rx785_restart2137:
    repr_get_attr_obj rx785_cstack, rx785_cur, rx785_curclass, "$!cstack"
  rx785_fail2138:
    unless rx785_bstack, rx785_done2136
    pop $I19, rx785_bstack
    if_null rx785_cstack, rx785_cstack_done2141
    unless rx785_cstack, rx785_cstack_done2141
    dec $I19
    set $P11, rx785_cstack[$I19]
  rx785_cstack_done2141:
    pop rx785_rep, rx785_bstack
    pop rx785_pos, rx785_bstack
    pop $I19, rx785_bstack
    lt rx785_pos, -1, rx785_done2136
    lt rx785_pos, 0, rx785_fail2138
    eq $I19, 0, rx785_fail2138
    nqp_islist $I20, rx785_cstack
    unless $I20, rx785_jump2139
    elements $I18, rx785_bstack
    le $I18, 0, rx785_cut2140
    dec $I18
    set $I18, rx785_bstack[$I18]
  rx785_cut2140:
    assign rx785_cstack, $I18
  rx785_jump2139:
    jump $I19
  rx785_done2136:
    rx785_cur."!cursor_fail"()
    .return (rx785_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_131_1349901750.327_caps" :subid("cuid_memo_195_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["param_var"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_131_1349901750.327_nfa" :subid("cuid_memo_196_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 58
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "param_var"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "default_value" :subid("cuid_132_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1115
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx788_tgt
    .local int rx788_pos
    .local int rx788_off
    .local int rx788_eos
    .local int rx788_rep
    .local pmc rx788_cur
    .local pmc rx788_curclass
    .local pmc rx788_bstack
    .local pmc rx788_cstack
    (rx788_cur, rx788_tgt, rx788_pos, rx788_curclass, rx788_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx788_cur
    length rx788_eos, rx788_tgt
    eq $I19, 1, rx788_restart2148
    gt rx788_pos, rx788_eos, rx788_fail2149
    repr_get_attr_int $I11, self, rx788_curclass, "$!from"
    ne $I11, -1, rxscan789_done2155
    goto rxscan789_scan2154
  rxscan789_loop2153:
    inc rx788_pos
    gt rx788_pos, rx788_eos, rx788_fail2149
    repr_bind_attr_int rx788_cur, rx788_curclass, "$!from", rx788_pos
  rxscan789_scan2154:
    nqp_rxmark rx788_bstack, rxscan789_loop2153, rx788_pos, 0
  rxscan789_done2155:
    repr_bind_attr_int rx788_cur, rx788_curclass, "$!pos", rx788_pos
    $P11 = rx788_cur."ws"()
    repr_get_attr_int $I11, $P11, rx788_curclass, "$!pos"
    lt $I11, 0, rx788_fail2149
    repr_get_attr_int rx788_pos, $P11, rx788_curclass, "$!pos"
    add $I11, rx788_pos, 1
    gt $I11, rx788_eos, rx788_fail2149
    substr $S10, rx788_tgt, rx788_pos, 1
    ne $S10, ucs4:"=", rx788_fail2149
    add rx788_pos, 1
    repr_bind_attr_int rx788_cur, rx788_curclass, "$!pos", rx788_pos
    $P11 = rx788_cur."ws"()
    repr_get_attr_int $I11, $P11, rx788_curclass, "$!pos"
    lt $I11, 0, rx788_fail2149
    repr_get_attr_int rx788_pos, $P11, rx788_curclass, "$!pos"
    repr_bind_attr_int rx788_cur, rx788_curclass, "$!pos", rx788_pos
    $P11 = rx788_cur."EXPR"("i=")
    repr_get_attr_int $I11, $P11, rx788_curclass, "$!pos"
    lt $I11, 0, rx788_fail2149
    nqp_rxmark rx788_bstack, rxsubrule792_pass2158, -1, 0
  rxsubrule792_pass2158:
    rx788_cstack = rx788_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx788_pos, $P11, rx788_curclass, "$!pos"
    repr_bind_attr_int rx788_cur, rx788_curclass, "$!pos", rx788_pos
    $P11 = rx788_cur."ws"()
    repr_get_attr_int $I11, $P11, rx788_curclass, "$!pos"
    lt $I11, 0, rx788_fail2149
    repr_get_attr_int rx788_pos, $P11, rx788_curclass, "$!pos"
    rx788_cur."!cursor_pass"(rx788_pos, "default_value", 'backtrack'=>1)
    .return (rx788_cur)
  rx788_restart2148:
    repr_get_attr_obj rx788_cstack, rx788_cur, rx788_curclass, "$!cstack"
  rx788_fail2149:
    unless rx788_bstack, rx788_done2147
    pop $I19, rx788_bstack
    if_null rx788_cstack, rx788_cstack_done2152
    unless rx788_cstack, rx788_cstack_done2152
    dec $I19
    set $P11, rx788_cstack[$I19]
  rx788_cstack_done2152:
    pop rx788_rep, rx788_bstack
    pop rx788_pos, rx788_bstack
    pop $I19, rx788_bstack
    lt rx788_pos, -1, rx788_done2147
    lt rx788_pos, 0, rx788_fail2149
    eq $I19, 0, rx788_fail2149
    nqp_islist $I20, rx788_cstack
    unless $I20, rx788_jump2150
    elements $I18, rx788_bstack
    le $I18, 0, rx788_cut2151
    dec $I18
    set $I18, rx788_bstack[$I18]
  rx788_cut2151:
    assign rx788_cstack, $I18
  rx788_jump2150:
    jump $I19
  rx788_done2147:
    rx788_cur."!cursor_fail"()
    .return (rx788_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_132_1349901750.327_caps" :subid("cuid_memo_197_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["EXPR"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "trait" :subid("cuid_133_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1117
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx794_tgt
    .local int rx794_pos
    .local int rx794_off
    .local int rx794_eos
    .local int rx794_rep
    .local pmc rx794_cur
    .local pmc rx794_curclass
    .local pmc rx794_bstack
    .local pmc rx794_cstack
    (rx794_cur, rx794_tgt, rx794_pos, rx794_curclass, rx794_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx794_cur
    length rx794_eos, rx794_tgt
    eq $I19, 1, rx794_restart2162
    gt rx794_pos, rx794_eos, rx794_fail2163
    repr_get_attr_int $I11, self, rx794_curclass, "$!from"
    ne $I11, -1, rxscan795_done2169
    goto rxscan795_scan2168
  rxscan795_loop2167:
    inc rx794_pos
    gt rx794_pos, rx794_eos, rx794_fail2163
    repr_bind_attr_int rx794_cur, rx794_curclass, "$!from", rx794_pos
  rxscan795_scan2168:
    nqp_rxmark rx794_bstack, rxscan795_loop2167, rx794_pos, 0
  rxscan795_done2169:
    repr_bind_attr_int rx794_cur, rx794_curclass, "$!pos", rx794_pos
    $P11 = rx794_cur."ws"()
    repr_get_attr_int $I11, $P11, rx794_curclass, "$!pos"
    lt $I11, 0, rx794_fail2163
    repr_get_attr_int rx794_pos, $P11, rx794_curclass, "$!pos"
    repr_bind_attr_int rx794_cur, rx794_curclass, "$!pos", rx794_pos
    $P11 = rx794_cur."trait_mod"()
    repr_get_attr_int $I11, $P11, rx794_curclass, "$!pos"
    lt $I11, 0, rx794_fail2163
    nqp_rxmark rx794_bstack, rxsubrule797_pass2171, -1, 0
  rxsubrule797_pass2171:
    rx794_cstack = rx794_cur."!cursor_capture"($P11, "trait_mod")
    repr_get_attr_int rx794_pos, $P11, rx794_curclass, "$!pos"
    repr_bind_attr_int rx794_cur, rx794_curclass, "$!pos", rx794_pos
    $P11 = rx794_cur."ws"()
    repr_get_attr_int $I11, $P11, rx794_curclass, "$!pos"
    lt $I11, 0, rx794_fail2163
    repr_get_attr_int rx794_pos, $P11, rx794_curclass, "$!pos"
    rx794_cur."!cursor_pass"(rx794_pos, "trait", 'backtrack'=>1)
    .return (rx794_cur)
  rx794_restart2162:
    repr_get_attr_obj rx794_cstack, rx794_cur, rx794_curclass, "$!cstack"
  rx794_fail2163:
    unless rx794_bstack, rx794_done2161
    pop $I19, rx794_bstack
    if_null rx794_cstack, rx794_cstack_done2166
    unless rx794_cstack, rx794_cstack_done2166
    dec $I19
    set $P11, rx794_cstack[$I19]
  rx794_cstack_done2166:
    pop rx794_rep, rx794_bstack
    pop rx794_pos, rx794_bstack
    pop $I19, rx794_bstack
    lt rx794_pos, -1, rx794_done2161
    lt rx794_pos, 0, rx794_fail2163
    eq $I19, 0, rx794_fail2163
    nqp_islist $I20, rx794_cstack
    unless $I20, rx794_jump2164
    elements $I18, rx794_bstack
    le $I18, 0, rx794_cut2165
    dec $I18
    set $I18, rx794_bstack[$I18]
  rx794_cut2165:
    assign rx794_cstack, $I18
  rx794_jump2164:
    jump $I19
  rx794_done2161:
    rx794_cur."!cursor_fail"()
    .return (rx794_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_133_1349901750.327_caps" :subid("cuid_memo_198_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["trait_mod"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "trait_mod" :subid("cuid_134_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1119
    .param pmc self 
    $P5001 = self."!protoregex"("trait_mod")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "trait_mod:sym<is>" :subid("cuid_135_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1120
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx799_tgt
    .local int rx799_pos
    .local int rx799_off
    .local int rx799_eos
    .local int rx799_rep
    .local pmc rx799_cur
    .local pmc rx799_curclass
    .local pmc rx799_bstack
    .local pmc rx799_cstack
    (rx799_cur, rx799_tgt, rx799_pos, rx799_curclass, rx799_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx799_cur
    length rx799_eos, rx799_tgt
    eq $I19, 1, rx799_restart2175
    gt rx799_pos, rx799_eos, rx799_fail2176
    repr_get_attr_int $I11, self, rx799_curclass, "$!from"
    ne $I11, -1, rxscan800_done2182
    goto rxscan800_scan2181
  rxscan800_loop2180:
    inc rx799_pos
    gt rx799_pos, rx799_eos, rx799_fail2176
    repr_bind_attr_int rx799_cur, rx799_curclass, "$!from", rx799_pos
  rxscan800_scan2181:
    nqp_rxmark rx799_bstack, rxscan800_loop2180, rx799_pos, 0
  rxscan800_done2182:
    nqp_rxmark rx799_bstack, rxcap801_fail2184, rx799_pos, 0
    add $I11, rx799_pos, 2
    gt $I11, rx799_eos, rx799_fail2176
    substr $S10, rx799_tgt, rx799_pos, 2
    ne $S10, ucs4:"is", rx799_fail2176
    add rx799_pos, 2
    nqp_rxpeek $I19, rx799_bstack, rxcap801_fail2184
    inc $I19
    set $I11, rx799_bstack[$I19]
    repr_bind_attr_int rx799_cur, rx799_curclass, "$!pos", rx799_pos
    $P11 = rx799_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx799_pos)
    rx799_cstack = rx799_cur."!cursor_capture"($P11, "sym")
    goto rxcap801_done2183
  rxcap801_fail2184:
    goto rx799_fail2176
  rxcap801_done2183:
    repr_bind_attr_int rx799_cur, rx799_curclass, "$!pos", rx799_pos
    $P11 = rx799_cur."ws"()
    repr_get_attr_int $I11, $P11, rx799_curclass, "$!pos"
    lt $I11, 0, rx799_fail2176
    repr_get_attr_int rx799_pos, $P11, rx799_curclass, "$!pos"
    repr_bind_attr_int rx799_cur, rx799_curclass, "$!pos", rx799_pos
    $P11 = rx799_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx799_curclass, "$!pos"
    lt $I11, 0, rx799_fail2176
    nqp_rxmark rx799_bstack, rxsubrule803_pass2186, -1, 0
  rxsubrule803_pass2186:
    rx799_cstack = rx799_cur."!cursor_capture"($P11, "longname")
    repr_get_attr_int rx799_pos, $P11, rx799_curclass, "$!pos"
    nqp_rxmark rx799_bstack, rxquantr804_done2188, rx799_pos, 0
  rxquantr804_loop2187:
    repr_bind_attr_int rx799_cur, rx799_curclass, "$!pos", rx799_pos
    $P11 = rx799_cur."circumfix"()
    repr_get_attr_int $I11, $P11, rx799_curclass, "$!pos"
    lt $I11, 0, rx799_fail2176
    goto rxsubrule805_pass2189
  rxsubrule805_back2190:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx799_curclass, "$!pos"
    lt $I11, 0, rx799_fail2176
  rxsubrule805_pass2189:
    rx799_cstack = rx799_cur."!cursor_capture"($P11, "circumfix")
    set_addr $I11, rxsubrule805_back2190
    push rx799_bstack, $I11
    push rx799_bstack, 0
    push rx799_bstack, rx799_pos
    elements $I11, rx799_cstack
    push rx799_bstack, $I11
    repr_get_attr_int rx799_pos, $P11, rx799_curclass, "$!pos"
    nqp_rxpeek $I19, rx799_bstack, rxquantr804_done2188
    inc $I19
    inc $I19
    set rx799_rep, rx799_bstack[$I19]
    nqp_rxcommit rx799_bstack, rxquantr804_done2188
    inc rx799_rep
  rxquantr804_done2188:
    repr_bind_attr_int rx799_cur, rx799_curclass, "$!pos", rx799_pos
    $P11 = rx799_cur."ws"()
    repr_get_attr_int $I11, $P11, rx799_curclass, "$!pos"
    lt $I11, 0, rx799_fail2176
    repr_get_attr_int rx799_pos, $P11, rx799_curclass, "$!pos"
    rx799_cur."!cursor_pass"(rx799_pos, "trait_mod:sym<is>", 'backtrack'=>1)
    .return (rx799_cur)
  rx799_restart2175:
    repr_get_attr_obj rx799_cstack, rx799_cur, rx799_curclass, "$!cstack"
  rx799_fail2176:
    unless rx799_bstack, rx799_done2174
    pop $I19, rx799_bstack
    if_null rx799_cstack, rx799_cstack_done2179
    unless rx799_cstack, rx799_cstack_done2179
    dec $I19
    set $P11, rx799_cstack[$I19]
  rx799_cstack_done2179:
    pop rx799_rep, rx799_bstack
    pop rx799_pos, rx799_bstack
    pop $I19, rx799_bstack
    lt rx799_pos, -1, rx799_done2174
    lt rx799_pos, 0, rx799_fail2176
    eq $I19, 0, rx799_fail2176
    nqp_islist $I20, rx799_cstack
    unless $I20, rx799_jump2177
    elements $I18, rx799_bstack
    le $I18, 0, rx799_cut2178
    dec $I18
    set $I18, rx799_bstack[$I18]
  rx799_cut2178:
    assign rx799_cstack, $I18
  rx799_jump2177:
    jump $I19
  rx799_done2174:
    rx799_cur."!cursor_fail"()
    .return (rx799_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_135_1349901750.327_caps" :subid("cuid_memo_199_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["longname"], $P5003
    box $P5004, 2
    set $P5001["circumfix"], $P5004
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_135_1349901750.327_nfa" :subid("cuid_memo_200_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 105
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 115
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 0
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "regex_declarator" :subid("cuid_136_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1122
    .param pmc _lex_param_0 
    .const 'Sub' $P5012 = 'cuid_397_1349901750.327' 
    capture_lex $P5012 
    .lex "%*RX", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    new $P5001, 'Hash'
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx807_tgt
    .local int rx807_pos
    .local int rx807_off
    .local int rx807_eos
    .local int rx807_rep
    .local pmc rx807_cur
    .local pmc rx807_curclass
    .local pmc rx807_bstack
    .local pmc rx807_cstack
    (rx807_cur, rx807_tgt, rx807_pos, rx807_curclass, rx807_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx807_cur
    length rx807_eos, rx807_tgt
    eq $I19, 1, rx807_restart2194
    gt rx807_pos, rx807_eos, rx807_fail2195
    repr_get_attr_int $I11, self, rx807_curclass, "$!from"
    ne $I11, -1, rxscan808_done2201
    goto rxscan808_scan2200
  rxscan808_loop2199:
    inc rx807_pos
    gt rx807_pos, rx807_eos, rx807_fail2195
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!from", rx807_pos
  rxscan808_scan2200:
    nqp_rxmark rx807_bstack, rxscan808_loop2199, rx807_pos, 0
  rxscan808_done2201:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt809_02203
    nqp_push_label $P11, alt809_12233
    nqp_rxmark rx807_bstack, alt809_end2202, -1, 0
    rx807_cur."!alt"(rx807_pos, "alt_nfa__31_1349901752.82", $P11)
    goto rx807_fail2195
  alt809_02203:
    nqp_rxmark rx807_bstack, rxcap810_fail2205, rx807_pos, 0
    add $I11, rx807_pos, 5
    gt $I11, rx807_eos, rx807_fail2195
    substr $S10, rx807_tgt, rx807_pos, 5
    ne $S10, ucs4:"proto", rx807_fail2195
    add rx807_pos, 5
    nqp_rxpeek $I19, rx807_bstack, rxcap810_fail2205
    inc $I19
    set $I11, rx807_bstack[$I19]
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx807_pos)
    rx807_cstack = rx807_cur."!cursor_capture"($P11, "proto")
    goto rxcap810_done2204
  rxcap810_fail2205:
    goto rx807_fail2195
  rxcap810_done2204:
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2195
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt812_02208
    nqp_push_label $P11, alt812_12209
    nqp_push_label $P11, alt812_22210
    nqp_rxmark rx807_bstack, alt812_end2207, -1, 0
    rx807_cur."!alt"(rx807_pos, "alt_nfa__32_1349901752.82", $P11)
    goto rx807_fail2195
  alt812_02208:
    add $I11, rx807_pos, 5
    gt $I11, rx807_eos, rx807_fail2195
    substr $S10, rx807_tgt, rx807_pos, 5
    ne $S10, ucs4:"regex", rx807_fail2195
    add rx807_pos, 5
    goto alt812_end2207
  alt812_12209:
    add $I11, rx807_pos, 5
    gt $I11, rx807_eos, rx807_fail2195
    substr $S10, rx807_tgt, rx807_pos, 5
    ne $S10, ucs4:"token", rx807_fail2195
    add rx807_pos, 5
    goto alt812_end2207
  alt812_22210:
    add $I11, rx807_pos, 4
    gt $I11, rx807_eos, rx807_fail2195
    substr $S10, rx807_tgt, rx807_pos, 4
    ne $S10, ucs4:"rule", rx807_fail2195
    add rx807_pos, 4
    goto alt812_end2207
  alt812_end2207:
    nqp_rxcommit rx807_bstack, alt812_end2207
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2195
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2195
    nqp_rxmark rx807_bstack, rxsubrule814_pass2212, -1, 0
  rxsubrule814_pass2212:
    rx807_cstack = rx807_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2195
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
  alt816_02215:
    nqp_rxmark rx807_bstack, alt816_12218, rx807_pos, 0
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2195
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    add $I11, rx807_pos, 3
    gt $I11, rx807_eos, rx807_fail2195
    substr $S10, rx807_tgt, rx807_pos, 3
    ne $S10, ucs4:"{*}", rx807_fail2195
    add rx807_pos, 3
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2195
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2195
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    goto alt816_end2214
  alt816_12218:
    nqp_rxmark rx807_bstack, alt816_22223, rx807_pos, 0
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2195
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    add $I11, rx807_pos, 1
    gt $I11, rx807_eos, rx807_fail2195
    substr $S10, rx807_tgt, rx807_pos, 1
    ne $S10, ucs4:"{", rx807_fail2195
    add rx807_pos, 1
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2195
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    add $I11, rx807_pos, 5
    gt $I11, rx807_eos, rx807_fail2195
    substr $S10, rx807_tgt, rx807_pos, 5
    ne $S10, ucs4:"<...>", rx807_fail2195
    add rx807_pos, 5
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2195
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    add $I11, rx807_pos, 1
    gt $I11, rx807_eos, rx807_fail2195
    substr $S10, rx807_tgt, rx807_pos, 1
    ne $S10, ucs4:"}", rx807_fail2195
    add rx807_pos, 1
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2195
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2195
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    goto alt816_end2214
  alt816_22223:
    nqp_rxmark rx807_bstack, alt816_32228, rx807_pos, 0
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2195
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    add $I11, rx807_pos, 1
    gt $I11, rx807_eos, rx807_fail2195
    substr $S10, rx807_tgt, rx807_pos, 1
    ne $S10, ucs4:"{", rx807_fail2195
    add rx807_pos, 1
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2195
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    add $I11, rx807_pos, 3
    gt $I11, rx807_eos, rx807_fail2195
    substr $S10, rx807_tgt, rx807_pos, 3
    ne $S10, ucs4:"<*>", rx807_fail2195
    add rx807_pos, 3
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2195
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    add $I11, rx807_pos, 1
    gt $I11, rx807_eos, rx807_fail2195
    substr $S10, rx807_tgt, rx807_pos, 1
    ne $S10, ucs4:"}", rx807_fail2195
    add rx807_pos, 1
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2195
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2195
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    goto alt816_end2214
  alt816_32228:
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2195
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."panic"("Proto regex body must be \\{*\\} (or <*> or <...>, which are deprecated)")
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2195
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2195
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
  alt816_end2214:
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2195
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    goto alt809_end2202
  alt809_12233:
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2195
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    nqp_rxmark rx807_bstack, rxcap832_fail2236, rx807_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt833_02238
    nqp_push_label $P11, alt833_12239
    nqp_push_label $P11, alt833_22240
    nqp_rxmark rx807_bstack, alt833_end2237, -1, 0
    rx807_cur."!alt"(rx807_pos, "alt_nfa__33_1349901752.822", $P11)
    goto rx807_fail2195
  alt833_02238:
    add $I11, rx807_pos, 5
    gt $I11, rx807_eos, rx807_fail2195
    substr $S10, rx807_tgt, rx807_pos, 5
    ne $S10, ucs4:"regex", rx807_fail2195
    add rx807_pos, 5
    goto alt833_end2237
  alt833_12239:
    add $I11, rx807_pos, 5
    gt $I11, rx807_eos, rx807_fail2195
    substr $S10, rx807_tgt, rx807_pos, 5
    ne $S10, ucs4:"token", rx807_fail2195
    add rx807_pos, 5
    goto alt833_end2237
  alt833_22240:
    add $I11, rx807_pos, 4
    gt $I11, rx807_eos, rx807_fail2195
    substr $S10, rx807_tgt, rx807_pos, 4
    ne $S10, ucs4:"rule", rx807_fail2195
    add rx807_pos, 4
    goto alt833_end2237
  alt833_end2237:
    nqp_rxcommit rx807_bstack, alt833_end2237
    nqp_rxpeek $I19, rx807_bstack, rxcap832_fail2236
    inc $I19
    set $I11, rx807_bstack[$I19]
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx807_pos)
    rx807_cstack = rx807_cur."!cursor_capture"($P11, "sym")
    goto rxcap832_done2235
  rxcap832_fail2236:
    goto rx807_fail2195
  rxcap832_done2235:
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2195
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2195
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2195
    nqp_rxmark rx807_bstack, rxsubrule836_pass2243, -1, 0
  rxsubrule836_pass2243:
    rx807_cstack = rx807_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2195
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2195
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2195
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    nqp_rxmark rx807_bstack, rxquantr840_done2248, rx807_pos, 0
  rxquantr840_loop2247:
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2195
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    add $I11, rx807_pos, 1
    gt $I11, rx807_eos, rx807_fail2195
    substr $S10, rx807_tgt, rx807_pos, 1
    ne $S10, ucs4:"(", rx807_fail2195
    add rx807_pos, 1
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2195
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."signature"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2195
    nqp_rxmark rx807_bstack, rxsubrule843_pass2251, -1, 0
  rxsubrule843_pass2251:
    rx807_cstack = rx807_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2195
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    add $I11, rx807_pos, 1
    gt $I11, rx807_eos, rx807_fail2195
    substr $S10, rx807_tgt, rx807_pos, 1
    ne $S10, ucs4:")", rx807_fail2195
    add rx807_pos, 1
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2195
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    nqp_rxpeek $I19, rx807_bstack, rxquantr840_done2248
    inc $I19
    inc $I19
    set rx807_rep, rx807_bstack[$I19]
    nqp_rxcommit rx807_bstack, rxquantr840_done2248
    inc rx807_rep
  rxquantr840_done2248:
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2195
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    store_lex unicode:"$\x{a2}", rx807_cur
    unless_null $P101, fallback2255
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%RX"]
    unless_null $P5002, fallback2256
    nqp_get_sc_object $P5006, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%RX"], $P5007
    set $P5002, $P5007
  fallback2256:
    unless_null $P5002, vivi_8472257
    die "Contextual %*RX not found"
    box $P5008, "Contextual %*RX not found"
    set $P5002, $P5008
  vivi_8472257:
    set $P101, $P5002
  fallback2255:
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2195
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    store_lex unicode:"$\x{a2}", rx807_cur
    $P5009 = $P102."MATCH"()
    set $P103, $P5009
    .const 'Sub' $P5010 = 'cuid_397_1349901750.327' 
    capture_lex $P5010
    $P5011 = $P5010()
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2195
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    add $I11, rx807_pos, 1
    gt $I11, rx807_eos, rx807_fail2195
    substr $S10, rx807_tgt, rx807_pos, 1
    ne $S10, ucs4:"{", rx807_fail2195
    add rx807_pos, 1
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."LANG"("Regex", "nibbler")
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2195
    nqp_rxmark rx807_bstack, rxsubrule854_pass2279, -1, 0
  rxsubrule854_pass2279:
    rx807_cstack = rx807_cur."!cursor_capture"($P11, "p6regex")
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    add $I11, rx807_pos, 1
    gt $I11, rx807_eos, rx807_fail2195
    substr $S10, rx807_tgt, rx807_pos, 1
    ne $S10, ucs4:"}", rx807_fail2195
    add rx807_pos, 1
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2195
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2195
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    goto alt809_end2202
  alt809_end2202:
    nqp_rxcommit rx807_bstack, alt809_end2202
    rx807_cur."!cursor_pass"(rx807_pos, "regex_declarator", 'backtrack'=>1)
    .return (rx807_cur)
  rx807_restart2194:
    repr_get_attr_obj rx807_cstack, rx807_cur, rx807_curclass, "$!cstack"
  rx807_fail2195:
    unless rx807_bstack, rx807_done2193
    pop $I19, rx807_bstack
    if_null rx807_cstack, rx807_cstack_done2198
    unless rx807_cstack, rx807_cstack_done2198
    dec $I19
    set $P11, rx807_cstack[$I19]
  rx807_cstack_done2198:
    pop rx807_rep, rx807_bstack
    pop rx807_pos, rx807_bstack
    pop $I19, rx807_bstack
    lt rx807_pos, -1, rx807_done2193
    lt rx807_pos, 0, rx807_fail2195
    eq $I19, 0, rx807_fail2195
    nqp_islist $I20, rx807_cstack
    unless $I20, rx807_jump2196
    elements $I18, rx807_bstack
    le $I18, 0, rx807_cut2197
    dec $I18
    set $I18, rx807_bstack[$I18]
  rx807_cut2197:
    assign rx807_cstack, $I18
  rx807_jump2196:
    jump $I19
  rx807_done2193:
    rx807_cur."!cursor_fail"()
    .return (rx807_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_136_1349901750.327_caps" :subid("cuid_memo_201_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["proto"], $P5002
    box $P5003, 0
    set $P5001["deflongname"], $P5003
    box $P5004, 0
    set $P5001["sym"], $P5004
    box $P5005, 2
    set $P5001["signature"], $P5005
    box $P5006, 0
    set $P5001["p6regex"], $P5006
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_136_1349901750.327_nfa" :subid("cuid_memo_202_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 112
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    box $P5007, 0
    push $P5003, $P5007
    box $P5008, 0
    push $P5003, $P5008
    box $P5009, 0
    push $P5003, $P5009
    push $P5001, $P5003
    new $P5010, 'ResizablePMCArray'
    box $P5011, 2
    push $P5010, $P5011
    box $P5012, 114
    push $P5010, $P5012
    box $P5013, 3
    push $P5010, $P5013
    push $P5001, $P5010
    new $P5014, 'ResizablePMCArray'
    box $P5015, 2
    push $P5014, $P5015
    box $P5016, 111
    push $P5014, $P5016
    box $P5017, 4
    push $P5014, $P5017
    push $P5001, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 2
    push $P5018, $P5019
    box $P5020, 116
    push $P5018, $P5020
    box $P5021, 5
    push $P5018, $P5021
    push $P5001, $P5018
    new $P5022, 'ResizablePMCArray'
    box $P5023, 2
    push $P5022, $P5023
    box $P5024, 111
    push $P5022, $P5024
    box $P5025, 6
    push $P5022, $P5025
    push $P5001, $P5022
    new $P5026, 'ResizablePMCArray'
    box $P5027, 0
    push $P5026, $P5027
    box $P5028, 0
    push $P5026, $P5028
    box $P5029, 0
    push $P5026, $P5029
    push $P5001, $P5026
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_136_1349901750.327_alt_nfa__32_1349901752.82" :subid("cuid_memo_203_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 114
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 101
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 2
    push $P5012, $P5013
    box $P5014, 103
    push $P5012, $P5014
    box $P5015, 4
    push $P5012, $P5015
    push $P5002, $P5012
    new $P5016, 'ResizablePMCArray'
    box $P5017, 2
    push $P5016, $P5017
    box $P5018, 101
    push $P5016, $P5018
    box $P5019, 5
    push $P5016, $P5019
    push $P5002, $P5016
    new $P5020, 'ResizablePMCArray'
    box $P5021, 2
    push $P5020, $P5021
    box $P5022, 120
    push $P5020, $P5022
    box $P5023, 0
    push $P5020, $P5023
    push $P5002, $P5020
    push $P5001, $P5002
    new $P5024, 'ResizablePMCArray'
    new $P5025, 'ResizablePMCArray'
    push $P5024, $P5025
    new $P5026, 'ResizablePMCArray'
    box $P5027, 2
    push $P5026, $P5027
    box $P5028, 116
    push $P5026, $P5028
    box $P5029, 2
    push $P5026, $P5029
    push $P5024, $P5026
    new $P5030, 'ResizablePMCArray'
    box $P5031, 2
    push $P5030, $P5031
    box $P5032, 111
    push $P5030, $P5032
    box $P5033, 3
    push $P5030, $P5033
    push $P5024, $P5030
    new $P5034, 'ResizablePMCArray'
    box $P5035, 2
    push $P5034, $P5035
    box $P5036, 107
    push $P5034, $P5036
    box $P5037, 4
    push $P5034, $P5037
    push $P5024, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 2
    push $P5038, $P5039
    box $P5040, 101
    push $P5038, $P5040
    box $P5041, 5
    push $P5038, $P5041
    push $P5024, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 110
    push $P5042, $P5044
    box $P5045, 0
    push $P5042, $P5045
    push $P5024, $P5042
    push $P5001, $P5024
    new $P5046, 'ResizablePMCArray'
    new $P5047, 'ResizablePMCArray'
    push $P5046, $P5047
    new $P5048, 'ResizablePMCArray'
    box $P5049, 2
    push $P5048, $P5049
    box $P5050, 114
    push $P5048, $P5050
    box $P5051, 2
    push $P5048, $P5051
    push $P5046, $P5048
    new $P5052, 'ResizablePMCArray'
    box $P5053, 2
    push $P5052, $P5053
    box $P5054, 117
    push $P5052, $P5054
    box $P5055, 3
    push $P5052, $P5055
    push $P5046, $P5052
    new $P5056, 'ResizablePMCArray'
    box $P5057, 2
    push $P5056, $P5057
    box $P5058, 108
    push $P5056, $P5058
    box $P5059, 4
    push $P5056, $P5059
    push $P5046, $P5056
    new $P5060, 'ResizablePMCArray'
    box $P5061, 2
    push $P5060, $P5061
    box $P5062, 101
    push $P5060, $P5062
    box $P5063, 0
    push $P5060, $P5063
    push $P5046, $P5060
    push $P5001, $P5046
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_136_1349901750.327_alt_nfa__33_1349901752.822" :subid("cuid_memo_204_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 114
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 101
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 2
    push $P5012, $P5013
    box $P5014, 103
    push $P5012, $P5014
    box $P5015, 4
    push $P5012, $P5015
    push $P5002, $P5012
    new $P5016, 'ResizablePMCArray'
    box $P5017, 2
    push $P5016, $P5017
    box $P5018, 101
    push $P5016, $P5018
    box $P5019, 5
    push $P5016, $P5019
    push $P5002, $P5016
    new $P5020, 'ResizablePMCArray'
    box $P5021, 2
    push $P5020, $P5021
    box $P5022, 120
    push $P5020, $P5022
    box $P5023, 0
    push $P5020, $P5023
    push $P5002, $P5020
    push $P5001, $P5002
    new $P5024, 'ResizablePMCArray'
    new $P5025, 'ResizablePMCArray'
    push $P5024, $P5025
    new $P5026, 'ResizablePMCArray'
    box $P5027, 2
    push $P5026, $P5027
    box $P5028, 116
    push $P5026, $P5028
    box $P5029, 2
    push $P5026, $P5029
    push $P5024, $P5026
    new $P5030, 'ResizablePMCArray'
    box $P5031, 2
    push $P5030, $P5031
    box $P5032, 111
    push $P5030, $P5032
    box $P5033, 3
    push $P5030, $P5033
    push $P5024, $P5030
    new $P5034, 'ResizablePMCArray'
    box $P5035, 2
    push $P5034, $P5035
    box $P5036, 107
    push $P5034, $P5036
    box $P5037, 4
    push $P5034, $P5037
    push $P5024, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 2
    push $P5038, $P5039
    box $P5040, 101
    push $P5038, $P5040
    box $P5041, 5
    push $P5038, $P5041
    push $P5024, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 110
    push $P5042, $P5044
    box $P5045, 0
    push $P5042, $P5045
    push $P5024, $P5042
    push $P5001, $P5024
    new $P5046, 'ResizablePMCArray'
    new $P5047, 'ResizablePMCArray'
    push $P5046, $P5047
    new $P5048, 'ResizablePMCArray'
    box $P5049, 2
    push $P5048, $P5049
    box $P5050, 114
    push $P5048, $P5050
    box $P5051, 2
    push $P5048, $P5051
    push $P5046, $P5048
    new $P5052, 'ResizablePMCArray'
    box $P5053, 2
    push $P5052, $P5053
    box $P5054, 117
    push $P5052, $P5054
    box $P5055, 3
    push $P5052, $P5055
    push $P5046, $P5052
    new $P5056, 'ResizablePMCArray'
    box $P5057, 2
    push $P5056, $P5057
    box $P5058, 108
    push $P5056, $P5058
    box $P5059, 4
    push $P5056, $P5059
    push $P5046, $P5056
    new $P5060, 'ResizablePMCArray'
    box $P5061, 2
    push $P5060, $P5061
    box $P5062, 101
    push $P5060, $P5062
    box $P5063, 0
    push $P5060, $P5063
    push $P5046, $P5060
    push $P5001, $P5046
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_136_1349901750.327_alt_nfa__31_1349901752.82" :subid("cuid_memo_205_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 112
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 114
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 2
    push $P5012, $P5013
    box $P5014, 111
    push $P5012, $P5014
    box $P5015, 4
    push $P5012, $P5015
    push $P5002, $P5012
    new $P5016, 'ResizablePMCArray'
    box $P5017, 2
    push $P5016, $P5017
    box $P5018, 116
    push $P5016, $P5018
    box $P5019, 5
    push $P5016, $P5019
    push $P5002, $P5016
    new $P5020, 'ResizablePMCArray'
    box $P5021, 2
    push $P5020, $P5021
    box $P5022, 111
    push $P5020, $P5022
    box $P5023, 6
    push $P5020, $P5023
    push $P5002, $P5020
    new $P5024, 'ResizablePMCArray'
    box $P5025, 0
    push $P5024, $P5025
    box $P5026, 0
    push $P5024, $P5026
    box $P5027, 0
    push $P5024, $P5027
    push $P5002, $P5024
    push $P5001, $P5002
    new $P5028, 'ResizablePMCArray'
    new $P5029, 'ResizablePMCArray'
    push $P5028, $P5029
    new $P5030, 'ResizablePMCArray'
    box $P5031, 0
    push $P5030, $P5031
    box $P5032, 0
    push $P5030, $P5032
    box $P5033, 0
    push $P5030, $P5033
    box $P5034, 0
    push $P5030, $P5034
    box $P5035, 0
    push $P5030, $P5035
    box $P5036, 0
    push $P5030, $P5036
    push $P5028, $P5030
    push $P5001, $P5028
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_397_1349901750.327") :anon :lex :outer("cuid_136_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1137

    find_dynamic_lex $P5001, "%*RX"
    unless_null $P5001, fallback2259
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%RX"]
    unless_null $P5002, fallback2260
    nqp_get_sc_object $P5006, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%RX"], $P5007
    set $P5002, $P5007
  fallback2260:
    unless_null $P5002, vivi_8492261
    die "Contextual %*RX not found"
    box $P5008, "Contextual %*RX not found"
    set $P5002, $P5008
  vivi_8492261:
    set $P5001, $P5002
  fallback2259:
    find_lex $P5010, "$/"
    unless_null $P5010, fallback2262
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5010, $P5011
  fallback2262:
    set $P5009, $P5010["sym"]
    unless_null $P5009, fallback2263
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5009, $P5012
  fallback2263:
    set $S5001, $P5009
    iseq $I5001, $S5001, "rule"
    box $P5013, $I5001
    set $P5001["s"], $P5013
    find_dynamic_lex $P5014, "%*RX"
    unless_null $P5014, fallback2264
    nqp_get_sc_object $P5017, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5016, $P5017
    set $P5015, $P5016["%RX"]
    unless_null $P5015, fallback2265
    nqp_get_sc_object $P5019, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5018, $P5019
    new $P5020, 'Hash'
    set $P5018["%RX"], $P5020
    set $P5015, $P5020
  fallback2265:
    unless_null $P5015, vivi_8502266
    die "Contextual %*RX not found"
    box $P5021, "Contextual %*RX not found"
    set $P5015, $P5021
  vivi_8502266:
    set $P5014, $P5015
  fallback2264:
    find_lex $P5023, "$/"
    unless_null $P5023, fallback2269
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5023, $P5024
  fallback2269:
    set $P5022, $P5023["sym"]
    unless_null $P5022, fallback2270
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5022, $P5025
  fallback2270:
    set $S5002, $P5022
    iseq $I5002, $S5002, "token"
    set $I5004, $I5002
    if $I5002 goto unless851_end2268 
    find_lex $P5027, "$/"
    unless_null $P5027, fallback2271
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5027, $P5028
  fallback2271:
    set $P5026, $P5027["sym"]
    unless_null $P5026, fallback2272
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5026, $P5029
  fallback2272:
    set $S5003, $P5026
    iseq $I5003, $S5003, "rule"
    set $I5004, $I5003
  unless851_end2268:
    box $P5030, $I5004
    set $P5014["r"], $P5030
    find_dynamic_lex $P5031, "%*RX"
    unless_null $P5031, fallback2273
    nqp_get_sc_object $P5034, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["%RX"]
    unless_null $P5032, fallback2274
    nqp_get_sc_object $P5036, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5035, $P5036
    new $P5037, 'Hash'
    set $P5035["%RX"], $P5037
    set $P5032, $P5037
  fallback2274:
    unless_null $P5032, vivi_8522275
    die "Contextual %*RX not found"
    box $P5038, "Contextual %*RX not found"
    set $P5032, $P5038
  vivi_8522275:
    set $P5031, $P5032
  fallback2273:
.annotate 'line', 1140
    find_lex $P5040, "$/"
    unless_null $P5040, fallback2276
    nqp_get_sc_object $P5041, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5040, $P5041
  fallback2276:
    set $P5039, $P5040["deflongname"]
    unless_null $P5039, fallback2277
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5039, $P5042
  fallback2277:
    $P5043 = $P5039."ast"()
    set $P5031["name"], $P5043
    .return ($P5043) 
.end
.HLL "nqp"
.namespace []
.sub "dotty" :subid("cuid_137_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1146
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx856_tgt
    .local int rx856_pos
    .local int rx856_off
    .local int rx856_eos
    .local int rx856_rep
    .local pmc rx856_cur
    .local pmc rx856_curclass
    .local pmc rx856_bstack
    .local pmc rx856_cstack
    (rx856_cur, rx856_tgt, rx856_pos, rx856_curclass, rx856_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx856_cur
    length rx856_eos, rx856_tgt
    eq $I19, 1, rx856_restart2283
    gt rx856_pos, rx856_eos, rx856_fail2284
    repr_get_attr_int $I11, self, rx856_curclass, "$!from"
    ne $I11, -1, rxscan857_done2290
    goto rxscan857_scan2289
  rxscan857_loop2288:
    inc rx856_pos
    gt rx856_pos, rx856_eos, rx856_fail2284
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!from", rx856_pos
  rxscan857_scan2289:
    nqp_rxmark rx856_bstack, rxscan857_loop2288, rx856_pos, 0
  rxscan857_done2290:
    add $I11, rx856_pos, 1
    gt $I11, rx856_eos, rx856_fail2284
    substr $S10, rx856_tgt, rx856_pos, 1
    ne $S10, ucs4:".", rx856_fail2284
    add rx856_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt858_02292
    nqp_push_label $P11, alt858_12294
    nqp_rxmark rx856_bstack, alt858_end2291, -1, 0
    rx856_cur."!alt"(rx856_pos, "alt_nfa__34_1349901752.847", $P11)
    goto rx856_fail2284
  alt858_02292:
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2284
    nqp_rxmark rx856_bstack, rxsubrule859_pass2293, -1, 0
  rxsubrule859_pass2293:
    rx856_cstack = rx856_cur."!cursor_capture"($P11, "longname=deflongname")
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
    goto alt858_end2291
  alt858_12294:
    ge rx856_pos, rx856_eos, rx856_fail2284
    substr $S11, rx856_tgt, rx856_pos, 1
    index $I11, ucs4:"'\"", $S11
    lt $I11, 0, rx856_fail2284
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."quote"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2284
    nqp_rxmark rx856_bstack, rxsubrule860_pass2295, -1, 0
  rxsubrule860_pass2295:
    rx856_cstack = rx856_cur."!cursor_capture"($P11, "quote")
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
  alt861_02297:
    nqp_rxmark rx856_bstack, alt861_12298, rx856_pos, 0
    ge rx856_pos, rx856_eos, rx856_fail2284
    substr $S11, rx856_tgt, rx856_pos, 1
    index $I11, ucs4:"(", $S11
    lt $I11, 0, rx856_fail2284
    goto alt861_end2296
  alt861_12298:
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."panic"("Quoted method name requires parenthesized arguments")
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2284
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
  alt861_end2296:
    goto alt858_end2291
  alt858_end2291:
    nqp_rxcommit rx856_bstack, alt858_end2291
    nqp_rxmark rx856_bstack, rxquantr863_done2301, rx856_pos, 0
  rxquantr863_loop2300:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt864_02303
    nqp_push_label $P11, alt864_12305
    nqp_rxmark rx856_bstack, alt864_end2302, -1, 0
    rx856_cur."!alt"(rx856_pos, "alt_nfa__35_1349901752.847", $P11)
    goto rx856_fail2284
  alt864_02303:
    ge rx856_pos, rx856_eos, rx856_fail2284
    substr $S11, rx856_tgt, rx856_pos, 1
    index $I11, ucs4:"(", $S11
    lt $I11, 0, rx856_fail2284
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."args"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2284
    nqp_rxmark rx856_bstack, rxsubrule865_pass2304, -1, 0
  rxsubrule865_pass2304:
    rx856_cstack = rx856_cur."!cursor_capture"($P11, "args")
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
    goto alt864_end2302
  alt864_12305:
    add $I11, rx856_pos, 1
    gt $I11, rx856_eos, rx856_fail2284
    substr $S10, rx856_tgt, rx856_pos, 1
    ne $S10, ucs4:":", rx856_fail2284
    add rx856_pos, 1
    ge rx856_pos, rx856_eos, rx856_fail2284
    is_cclass $I11, .CCLASS_WHITESPACE, rx856_tgt, rx856_pos
    unless $I11, rx856_fail2284
    add rx856_pos, 1
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2284
    nqp_rxmark rx856_bstack, rxsubrule866_pass2306, -1, 0
  rxsubrule866_pass2306:
    rx856_cstack = rx856_cur."!cursor_capture"($P11, "args")
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
    goto alt864_end2302
  alt864_end2302:
    nqp_rxpeek $I19, rx856_bstack, rxquantr863_done2301
    inc $I19
    inc $I19
    set rx856_rep, rx856_bstack[$I19]
    nqp_rxcommit rx856_bstack, rxquantr863_done2301
    inc rx856_rep
  rxquantr863_done2301:
    rx856_cur."!cursor_pass"(rx856_pos, "dotty", 'backtrack'=>1)
    .return (rx856_cur)
  rx856_restart2283:
    repr_get_attr_obj rx856_cstack, rx856_cur, rx856_curclass, "$!cstack"
  rx856_fail2284:
    unless rx856_bstack, rx856_done2282
    pop $I19, rx856_bstack
    if_null rx856_cstack, rx856_cstack_done2287
    unless rx856_cstack, rx856_cstack_done2287
    dec $I19
    set $P11, rx856_cstack[$I19]
  rx856_cstack_done2287:
    pop rx856_rep, rx856_bstack
    pop rx856_pos, rx856_bstack
    pop $I19, rx856_bstack
    lt rx856_pos, -1, rx856_done2282
    lt rx856_pos, 0, rx856_fail2284
    eq $I19, 0, rx856_fail2284
    nqp_islist $I20, rx856_cstack
    unless $I20, rx856_jump2285
    elements $I18, rx856_bstack
    le $I18, 0, rx856_cut2286
    dec $I18
    set $I18, rx856_bstack[$I18]
  rx856_cut2286:
    assign rx856_cstack, $I18
  rx856_jump2285:
    jump $I19
  rx856_done2282:
    rx856_cur."!cursor_fail"()
    .return (rx856_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_137_1349901750.327_caps" :subid("cuid_memo_206_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["longname"], $P5002
    box $P5003, 0
    set $P5001["deflongname"], $P5003
    box $P5004, 0
    set $P5001["quote"], $P5004
    box $P5005, 2
    set $P5001["args"], $P5005
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_137_1349901750.327_nfa" :subid("cuid_memo_207_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 46
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "deflongname"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    box $P5011, 6
    push $P5007, $P5011
    box $P5012, "'\""
    push $P5007, $P5012
    box $P5013, 4
    push $P5007, $P5013
    push $P5001, $P5007
    new $P5014, 'ResizablePMCArray'
    box $P5015, 6
    push $P5014, $P5015
    box $P5016, "("
    push $P5014, $P5016
    box $P5017, 5
    push $P5014, $P5017
    box $P5018, 2
    push $P5014, $P5018
    box $P5019, 58
    push $P5014, $P5019
    box $P5020, 6
    push $P5014, $P5020
    box $P5021, 1
    push $P5014, $P5021
    box $P5022, 0
    push $P5014, $P5022
    box $P5023, 0
    push $P5014, $P5023
    push $P5001, $P5014
    new $P5024, 'ResizablePMCArray'
    box $P5025, 0
    push $P5024, $P5025
    box $P5026, 0
    push $P5024, $P5026
    box $P5027, 0
    push $P5024, $P5027
    push $P5001, $P5024
    new $P5028, 'ResizablePMCArray'
    box $P5029, 0
    push $P5028, $P5029
    box $P5030, 0
    push $P5028, $P5030
    box $P5031, 0
    push $P5028, $P5031
    push $P5001, $P5028
    new $P5032, 'ResizablePMCArray'
    box $P5033, 4
    push $P5032, $P5033
    box $P5034, 32
    push $P5032, $P5034
    box $P5035, 7
    push $P5032, $P5035
    push $P5001, $P5032
    new $P5036, 'ResizablePMCArray'
    box $P5037, 8
    push $P5036, $P5037
    box $P5038, "arglist"
    push $P5036, $P5038
    box $P5039, 0
    push $P5036, $P5039
    push $P5001, $P5036
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_137_1349901750.327_alt_nfa__34_1349901752.847" :subid("cuid_memo_208_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 8
    push $P5004, $P5005
    box $P5006, "deflongname"
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 6
    push $P5010, $P5011
    box $P5012, "'\""
    push $P5010, $P5012
    box $P5013, 2
    push $P5010, $P5013
    push $P5008, $P5010
    new $P5014, 'ResizablePMCArray'
    box $P5015, 0
    push $P5014, $P5015
    box $P5016, 0
    push $P5014, $P5016
    box $P5017, 0
    push $P5014, $P5017
    push $P5008, $P5014
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_137_1349901750.327_alt_nfa__35_1349901752.847" :subid("cuid_memo_209_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 6
    push $P5004, $P5005
    box $P5006, "("
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 0
    push $P5008, $P5009
    box $P5010, 0
    push $P5008, $P5010
    box $P5011, 0
    push $P5008, $P5011
    push $P5002, $P5008
    push $P5001, $P5002
    new $P5012, 'ResizablePMCArray'
    new $P5013, 'ResizablePMCArray'
    push $P5012, $P5013
    new $P5014, 'ResizablePMCArray'
    box $P5015, 2
    push $P5014, $P5015
    box $P5016, 58
    push $P5014, $P5016
    box $P5017, 2
    push $P5014, $P5017
    push $P5012, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 4
    push $P5018, $P5019
    box $P5020, 32
    push $P5018, $P5020
    box $P5021, 3
    push $P5018, $P5021
    push $P5012, $P5018
    new $P5022, 'ResizablePMCArray'
    box $P5023, 8
    push $P5022, $P5023
    box $P5024, "arglist"
    push $P5022, $P5024
    box $P5025, 0
    push $P5022, $P5025
    push $P5012, $P5022
    push $P5001, $P5012
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<self>" :subid("cuid_138_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1159
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx867_tgt
    .local int rx867_pos
    .local int rx867_off
    .local int rx867_eos
    .local int rx867_rep
    .local pmc rx867_cur
    .local pmc rx867_curclass
    .local pmc rx867_bstack
    .local pmc rx867_cstack
    (rx867_cur, rx867_tgt, rx867_pos, rx867_curclass, rx867_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx867_cur
    length rx867_eos, rx867_tgt
    eq $I19, 1, rx867_restart2309
    gt rx867_pos, rx867_eos, rx867_fail2310
    repr_get_attr_int $I11, self, rx867_curclass, "$!from"
    ne $I11, -1, rxscan868_done2316
    goto rxscan868_scan2315
  rxscan868_loop2314:
    inc rx867_pos
    gt rx867_pos, rx867_eos, rx867_fail2310
    repr_bind_attr_int rx867_cur, rx867_curclass, "$!from", rx867_pos
  rxscan868_scan2315:
    nqp_rxmark rx867_bstack, rxscan868_loop2314, rx867_pos, 0
  rxscan868_done2316:
    nqp_rxmark rx867_bstack, rxcap869_fail2318, rx867_pos, 0
    add $I11, rx867_pos, 4
    gt $I11, rx867_eos, rx867_fail2310
    substr $S10, rx867_tgt, rx867_pos, 4
    ne $S10, ucs4:"self", rx867_fail2310
    add rx867_pos, 4
    nqp_rxpeek $I19, rx867_bstack, rxcap869_fail2318
    inc $I19
    set $I11, rx867_bstack[$I19]
    repr_bind_attr_int rx867_cur, rx867_curclass, "$!pos", rx867_pos
    $P11 = rx867_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx867_pos)
    rx867_cstack = rx867_cur."!cursor_capture"($P11, "sym")
    goto rxcap869_done2317
  rxcap869_fail2318:
    goto rx867_fail2310
  rxcap869_done2317:
    le rx867_pos, 0, rx867_fail2310
    is_cclass $I11, .CCLASS_WORD, rx867_tgt, rx867_pos
    if $I11, rx867_fail2310
    sub $I11, rx867_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx867_tgt, $I11
    unless $I11, rx867_fail2310
    rx867_cur."!cursor_pass"(rx867_pos, "term:sym<self>", 'backtrack'=>1)
    .return (rx867_cur)
  rx867_restart2309:
    repr_get_attr_obj rx867_cstack, rx867_cur, rx867_curclass, "$!cstack"
  rx867_fail2310:
    unless rx867_bstack, rx867_done2308
    pop $I19, rx867_bstack
    if_null rx867_cstack, rx867_cstack_done2313
    unless rx867_cstack, rx867_cstack_done2313
    dec $I19
    set $P11, rx867_cstack[$I19]
  rx867_cstack_done2313:
    pop rx867_rep, rx867_bstack
    pop rx867_pos, rx867_bstack
    pop $I19, rx867_bstack
    lt rx867_pos, -1, rx867_done2308
    lt rx867_pos, 0, rx867_fail2310
    eq $I19, 0, rx867_fail2310
    nqp_islist $I20, rx867_cstack
    unless $I20, rx867_jump2311
    elements $I18, rx867_bstack
    le $I18, 0, rx867_cut2312
    dec $I18
    set $I18, rx867_bstack[$I18]
  rx867_cut2312:
    assign rx867_cstack, $I18
  rx867_jump2311:
    jump $I19
  rx867_done2308:
    rx867_cur."!cursor_fail"()
    .return (rx867_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_138_1349901750.327_caps" :subid("cuid_memo_210_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_138_1349901750.327_nfa" :subid("cuid_memo_211_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 115
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 101
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 108
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 102
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 1
    push $P5019, $P5020
    box $P5021, 0
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<identifier>" :subid("cuid_139_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1161
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx871_tgt
    .local int rx871_pos
    .local int rx871_off
    .local int rx871_eos
    .local int rx871_rep
    .local pmc rx871_cur
    .local pmc rx871_curclass
    .local pmc rx871_bstack
    .local pmc rx871_cstack
    (rx871_cur, rx871_tgt, rx871_pos, rx871_curclass, rx871_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx871_cur
    length rx871_eos, rx871_tgt
    eq $I19, 1, rx871_restart2322
    gt rx871_pos, rx871_eos, rx871_fail2323
    repr_get_attr_int $I11, self, rx871_curclass, "$!from"
    ne $I11, -1, rxscan872_done2329
    goto rxscan872_scan2328
  rxscan872_loop2327:
    inc rx871_pos
    gt rx871_pos, rx871_eos, rx871_fail2323
    repr_bind_attr_int rx871_cur, rx871_curclass, "$!from", rx871_pos
  rxscan872_scan2328:
    nqp_rxmark rx871_bstack, rxscan872_loop2327, rx871_pos, 0
  rxscan872_done2329:
    repr_bind_attr_int rx871_cur, rx871_curclass, "$!pos", rx871_pos
    $P11 = rx871_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx871_curclass, "$!pos"
    lt $I11, 0, rx871_fail2323
    nqp_rxmark rx871_bstack, rxsubrule873_pass2330, -1, 0
  rxsubrule873_pass2330:
    rx871_cstack = rx871_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx871_pos, $P11, rx871_curclass, "$!pos"
    ge rx871_pos, rx871_eos, rx871_fail2323
    substr $S11, rx871_tgt, rx871_pos, 1
    index $I11, ucs4:"(", $S11
    lt $I11, 0, rx871_fail2323
    repr_bind_attr_int rx871_cur, rx871_curclass, "$!pos", rx871_pos
    $P11 = rx871_cur."args"()
    repr_get_attr_int $I11, $P11, rx871_curclass, "$!pos"
    lt $I11, 0, rx871_fail2323
    nqp_rxmark rx871_bstack, rxsubrule874_pass2331, -1, 0
  rxsubrule874_pass2331:
    rx871_cstack = rx871_cur."!cursor_capture"($P11, "args")
    repr_get_attr_int rx871_pos, $P11, rx871_curclass, "$!pos"
    rx871_cur."!cursor_pass"(rx871_pos, "term:sym<identifier>", 'backtrack'=>1)
    .return (rx871_cur)
  rx871_restart2322:
    repr_get_attr_obj rx871_cstack, rx871_cur, rx871_curclass, "$!cstack"
  rx871_fail2323:
    unless rx871_bstack, rx871_done2321
    pop $I19, rx871_bstack
    if_null rx871_cstack, rx871_cstack_done2326
    unless rx871_cstack, rx871_cstack_done2326
    dec $I19
    set $P11, rx871_cstack[$I19]
  rx871_cstack_done2326:
    pop rx871_rep, rx871_bstack
    pop rx871_pos, rx871_bstack
    pop $I19, rx871_bstack
    lt rx871_pos, -1, rx871_done2321
    lt rx871_pos, 0, rx871_fail2323
    eq $I19, 0, rx871_fail2323
    nqp_islist $I20, rx871_cstack
    unless $I20, rx871_jump2324
    elements $I18, rx871_bstack
    le $I18, 0, rx871_cut2325
    dec $I18
    set $I18, rx871_bstack[$I18]
  rx871_cut2325:
    assign rx871_cstack, $I18
  rx871_jump2324:
    jump $I19
  rx871_done2321:
    rx871_cur."!cursor_fail"()
    .return (rx871_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_139_1349901750.327_caps" :subid("cuid_memo_212_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["deflongname"], $P5002
    box $P5003, 0
    set $P5001["args"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_139_1349901750.327_nfa" :subid("cuid_memo_213_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "deflongname"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 6
    push $P5007, $P5008
    box $P5009, "("
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 0
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<name>" :subid("cuid_140_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1165
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx875_tgt
    .local int rx875_pos
    .local int rx875_off
    .local int rx875_eos
    .local int rx875_rep
    .local pmc rx875_cur
    .local pmc rx875_curclass
    .local pmc rx875_bstack
    .local pmc rx875_cstack
    (rx875_cur, rx875_tgt, rx875_pos, rx875_curclass, rx875_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx875_cur
    length rx875_eos, rx875_tgt
    eq $I19, 1, rx875_restart2334
    gt rx875_pos, rx875_eos, rx875_fail2335
    repr_get_attr_int $I11, self, rx875_curclass, "$!from"
    ne $I11, -1, rxscan876_done2341
    goto rxscan876_scan2340
  rxscan876_loop2339:
    inc rx875_pos
    gt rx875_pos, rx875_eos, rx875_fail2335
    repr_bind_attr_int rx875_cur, rx875_curclass, "$!from", rx875_pos
  rxscan876_scan2340:
    nqp_rxmark rx875_bstack, rxscan876_loop2339, rx875_pos, 0
  rxscan876_done2341:
    repr_bind_attr_int rx875_cur, rx875_curclass, "$!pos", rx875_pos
    $P11 = rx875_cur."name"()
    repr_get_attr_int $I11, $P11, rx875_curclass, "$!pos"
    lt $I11, 0, rx875_fail2335
    nqp_rxmark rx875_bstack, rxsubrule877_pass2342, -1, 0
  rxsubrule877_pass2342:
    rx875_cstack = rx875_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx875_pos, $P11, rx875_curclass, "$!pos"
    nqp_rxmark rx875_bstack, rxquantr878_done2344, rx875_pos, 0
  rxquantr878_loop2343:
    repr_bind_attr_int rx875_cur, rx875_curclass, "$!pos", rx875_pos
    $P11 = rx875_cur."args"()
    repr_get_attr_int $I11, $P11, rx875_curclass, "$!pos"
    lt $I11, 0, rx875_fail2335
    goto rxsubrule879_pass2345
  rxsubrule879_back2346:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx875_curclass, "$!pos"
    lt $I11, 0, rx875_fail2335
  rxsubrule879_pass2345:
    rx875_cstack = rx875_cur."!cursor_capture"($P11, "args")
    set_addr $I11, rxsubrule879_back2346
    push rx875_bstack, $I11
    push rx875_bstack, 0
    push rx875_bstack, rx875_pos
    elements $I11, rx875_cstack
    push rx875_bstack, $I11
    repr_get_attr_int rx875_pos, $P11, rx875_curclass, "$!pos"
    nqp_rxpeek $I19, rx875_bstack, rxquantr878_done2344
    inc $I19
    inc $I19
    set rx875_rep, rx875_bstack[$I19]
    nqp_rxcommit rx875_bstack, rxquantr878_done2344
    inc rx875_rep
  rxquantr878_done2344:
    rx875_cur."!cursor_pass"(rx875_pos, "term:sym<name>", 'backtrack'=>1)
    .return (rx875_cur)
  rx875_restart2334:
    repr_get_attr_obj rx875_cstack, rx875_cur, rx875_curclass, "$!cstack"
  rx875_fail2335:
    unless rx875_bstack, rx875_done2333
    pop $I19, rx875_bstack
    if_null rx875_cstack, rx875_cstack_done2338
    unless rx875_cstack, rx875_cstack_done2338
    dec $I19
    set $P11, rx875_cstack[$I19]
  rx875_cstack_done2338:
    pop rx875_rep, rx875_bstack
    pop rx875_pos, rx875_bstack
    pop $I19, rx875_bstack
    lt rx875_pos, -1, rx875_done2333
    lt rx875_pos, 0, rx875_fail2335
    eq $I19, 0, rx875_fail2335
    nqp_islist $I20, rx875_cstack
    unless $I20, rx875_jump2336
    elements $I18, rx875_bstack
    le $I18, 0, rx875_cut2337
    dec $I18
    set $I18, rx875_bstack[$I18]
  rx875_cut2337:
    assign rx875_cstack, $I18
  rx875_jump2336:
    jump $I19
  rx875_done2333:
    rx875_cur."!cursor_fail"()
    .return (rx875_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_140_1349901750.327_caps" :subid("cuid_memo_214_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["name"], $P5002
    box $P5003, 2
    set $P5001["args"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_140_1349901750.327_nfa" :subid("cuid_memo_215_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "name"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "args"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    box $P5011, 1
    push $P5007, $P5011
    box $P5012, 0
    push $P5007, $P5012
    box $P5013, 0
    push $P5007, $P5013
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::op>" :subid("cuid_141_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1169
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx880_tgt
    .local int rx880_pos
    .local int rx880_off
    .local int rx880_eos
    .local int rx880_rep
    .local pmc rx880_cur
    .local pmc rx880_curclass
    .local pmc rx880_bstack
    .local pmc rx880_cstack
    (rx880_cur, rx880_tgt, rx880_pos, rx880_curclass, rx880_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx880_cur
    length rx880_eos, rx880_tgt
    eq $I19, 1, rx880_restart2349
    gt rx880_pos, rx880_eos, rx880_fail2350
    repr_get_attr_int $I11, self, rx880_curclass, "$!from"
    ne $I11, -1, rxscan881_done2356
    goto rxscan881_scan2355
  rxscan881_loop2354:
    inc rx880_pos
    gt rx880_pos, rx880_eos, rx880_fail2350
    repr_bind_attr_int rx880_cur, rx880_curclass, "$!from", rx880_pos
  rxscan881_scan2355:
    nqp_rxmark rx880_bstack, rxscan881_loop2354, rx880_pos, 0
  rxscan881_done2356:
    add $I11, rx880_pos, 5
    gt $I11, rx880_eos, rx880_fail2350
    substr $S10, rx880_tgt, rx880_pos, 5
    ne $S10, ucs4:"pir::", rx880_fail2350
    add rx880_pos, 5
    nqp_rxmark rx880_bstack, rxcap882_fail2358, rx880_pos, 0
    nqp_rxmark rx880_bstack, rxquantr883_done2360, -1, 0
  rxquantr883_loop2359:
    ge rx880_pos, rx880_eos, rx880_fail2350
    is_cclass $I11, .CCLASS_WORD, rx880_tgt, rx880_pos
    unless $I11, rx880_fail2350
    add rx880_pos, 1
    nqp_rxpeek $I19, rx880_bstack, rxquantr883_done2360
    inc $I19
    inc $I19
    set rx880_rep, rx880_bstack[$I19]
    nqp_rxcommit rx880_bstack, rxquantr883_done2360
    inc rx880_rep
    nqp_rxmark rx880_bstack, rxquantr883_done2360, rx880_pos, rx880_rep
    goto rxquantr883_loop2359
  rxquantr883_done2360:
    nqp_rxpeek $I19, rx880_bstack, rxcap882_fail2358
    inc $I19
    set $I11, rx880_bstack[$I19]
    repr_bind_attr_int rx880_cur, rx880_curclass, "$!pos", rx880_pos
    $P11 = rx880_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx880_pos)
    rx880_cstack = rx880_cur."!cursor_capture"($P11, "op")
    goto rxcap882_done2357
  rxcap882_fail2358:
    goto rx880_fail2350
  rxcap882_done2357:
    nqp_rxmark rx880_bstack, rxquantr884_done2362, rx880_pos, 0
  rxquantr884_loop2361:
    repr_bind_attr_int rx880_cur, rx880_curclass, "$!pos", rx880_pos
    $P11 = rx880_cur."args"()
    repr_get_attr_int $I11, $P11, rx880_curclass, "$!pos"
    lt $I11, 0, rx880_fail2350
    goto rxsubrule885_pass2363
  rxsubrule885_back2364:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx880_curclass, "$!pos"
    lt $I11, 0, rx880_fail2350
  rxsubrule885_pass2363:
    rx880_cstack = rx880_cur."!cursor_capture"($P11, "args")
    set_addr $I11, rxsubrule885_back2364
    push rx880_bstack, $I11
    push rx880_bstack, 0
    push rx880_bstack, rx880_pos
    elements $I11, rx880_cstack
    push rx880_bstack, $I11
    repr_get_attr_int rx880_pos, $P11, rx880_curclass, "$!pos"
    nqp_rxpeek $I19, rx880_bstack, rxquantr884_done2362
    inc $I19
    inc $I19
    set rx880_rep, rx880_bstack[$I19]
    nqp_rxcommit rx880_bstack, rxquantr884_done2362
    inc rx880_rep
  rxquantr884_done2362:
    rx880_cur."!cursor_pass"(rx880_pos, "term:sym<pir::op>", 'backtrack'=>1)
    .return (rx880_cur)
  rx880_restart2349:
    repr_get_attr_obj rx880_cstack, rx880_cur, rx880_curclass, "$!cstack"
  rx880_fail2350:
    unless rx880_bstack, rx880_done2348
    pop $I19, rx880_bstack
    if_null rx880_cstack, rx880_cstack_done2353
    unless rx880_cstack, rx880_cstack_done2353
    dec $I19
    set $P11, rx880_cstack[$I19]
  rx880_cstack_done2353:
    pop rx880_rep, rx880_bstack
    pop rx880_pos, rx880_bstack
    pop $I19, rx880_bstack
    lt rx880_pos, -1, rx880_done2348
    lt rx880_pos, 0, rx880_fail2350
    eq $I19, 0, rx880_fail2350
    nqp_islist $I20, rx880_cstack
    unless $I20, rx880_jump2351
    elements $I18, rx880_bstack
    le $I18, 0, rx880_cut2352
    dec $I18
    set $I18, rx880_bstack[$I18]
  rx880_cut2352:
    assign rx880_cstack, $I18
  rx880_jump2351:
    jump $I19
  rx880_done2348:
    rx880_cur."!cursor_fail"()
    .return (rx880_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_141_1349901750.327_caps" :subid("cuid_memo_216_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["op"], $P5002
    box $P5003, 2
    set $P5001["args"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_141_1349901750.327_nfa" :subid("cuid_memo_217_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 112
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 105
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 114
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 58
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 58
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 1
    push $P5023, $P5024
    box $P5025, 0
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 4
    push $P5027, $P5028
    box $P5029, 8192
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 1
    push $P5031, $P5032
    box $P5033, 0
    push $P5031, $P5033
    box $P5034, 7
    push $P5031, $P5034
    box $P5035, 1
    push $P5031, $P5035
    box $P5036, 0
    push $P5031, $P5036
    box $P5037, 9
    push $P5031, $P5037
    box $P5038, 8
    push $P5031, $P5038
    box $P5039, "args"
    push $P5031, $P5039
    box $P5040, 0
    push $P5031, $P5040
    box $P5041, 1
    push $P5031, $P5041
    box $P5042, 0
    push $P5031, $P5042
    box $P5043, 0
    push $P5031, $P5043
    push $P5001, $P5031
    new $P5044, 'ResizablePMCArray'
    push $P5001, $P5044
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::const>" :subid("cuid_142_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1173
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx886_tgt
    .local int rx886_pos
    .local int rx886_off
    .local int rx886_eos
    .local int rx886_rep
    .local pmc rx886_cur
    .local pmc rx886_curclass
    .local pmc rx886_bstack
    .local pmc rx886_cstack
    (rx886_cur, rx886_tgt, rx886_pos, rx886_curclass, rx886_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx886_cur
    length rx886_eos, rx886_tgt
    eq $I19, 1, rx886_restart2367
    gt rx886_pos, rx886_eos, rx886_fail2368
    repr_get_attr_int $I11, self, rx886_curclass, "$!from"
    ne $I11, -1, rxscan887_done2374
    goto rxscan887_scan2373
  rxscan887_loop2372:
    inc rx886_pos
    gt rx886_pos, rx886_eos, rx886_fail2368
    repr_bind_attr_int rx886_cur, rx886_curclass, "$!from", rx886_pos
  rxscan887_scan2373:
    nqp_rxmark rx886_bstack, rxscan887_loop2372, rx886_pos, 0
  rxscan887_done2374:
    add $I11, rx886_pos, 12
    gt $I11, rx886_eos, rx886_fail2368
    substr $S10, rx886_tgt, rx886_pos, 12
    ne $S10, ucs4:"pir::const::", rx886_fail2368
    add rx886_pos, 12
    nqp_rxmark rx886_bstack, rxcap888_fail2376, rx886_pos, 0
    nqp_rxmark rx886_bstack, rxquantr889_done2378, -1, 0
  rxquantr889_loop2377:
    ge rx886_pos, rx886_eos, rx886_fail2368
    is_cclass $I11, .CCLASS_WORD, rx886_tgt, rx886_pos
    unless $I11, rx886_fail2368
    add rx886_pos, 1
    nqp_rxpeek $I19, rx886_bstack, rxquantr889_done2378
    inc $I19
    inc $I19
    set rx886_rep, rx886_bstack[$I19]
    nqp_rxcommit rx886_bstack, rxquantr889_done2378
    inc rx886_rep
    nqp_rxmark rx886_bstack, rxquantr889_done2378, rx886_pos, rx886_rep
    goto rxquantr889_loop2377
  rxquantr889_done2378:
    nqp_rxpeek $I19, rx886_bstack, rxcap888_fail2376
    inc $I19
    set $I11, rx886_bstack[$I19]
    repr_bind_attr_int rx886_cur, rx886_curclass, "$!pos", rx886_pos
    $P11 = rx886_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx886_pos)
    rx886_cstack = rx886_cur."!cursor_capture"($P11, "const")
    goto rxcap888_done2375
  rxcap888_fail2376:
    goto rx886_fail2368
  rxcap888_done2375:
    rx886_cur."!cursor_pass"(rx886_pos, "term:sym<pir::const>", 'backtrack'=>1)
    .return (rx886_cur)
  rx886_restart2367:
    repr_get_attr_obj rx886_cstack, rx886_cur, rx886_curclass, "$!cstack"
  rx886_fail2368:
    unless rx886_bstack, rx886_done2366
    pop $I19, rx886_bstack
    if_null rx886_cstack, rx886_cstack_done2371
    unless rx886_cstack, rx886_cstack_done2371
    dec $I19
    set $P11, rx886_cstack[$I19]
  rx886_cstack_done2371:
    pop rx886_rep, rx886_bstack
    pop rx886_pos, rx886_bstack
    pop $I19, rx886_bstack
    lt rx886_pos, -1, rx886_done2366
    lt rx886_pos, 0, rx886_fail2368
    eq $I19, 0, rx886_fail2368
    nqp_islist $I20, rx886_cstack
    unless $I20, rx886_jump2369
    elements $I18, rx886_bstack
    le $I18, 0, rx886_cut2370
    dec $I18
    set $I18, rx886_bstack[$I18]
  rx886_cut2370:
    assign rx886_cstack, $I18
  rx886_jump2369:
    jump $I19
  rx886_done2366:
    rx886_cur."!cursor_fail"()
    .return (rx886_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_142_1349901750.327_caps" :subid("cuid_memo_218_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["const"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_142_1349901750.327_nfa" :subid("cuid_memo_219_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 112
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 105
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 114
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 58
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 58
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 99
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 2
    push $P5027, $P5028
    box $P5029, 111
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 2
    push $P5031, $P5032
    box $P5033, 110
    push $P5031, $P5033
    box $P5034, 9
    push $P5031, $P5034
    push $P5001, $P5031
    new $P5035, 'ResizablePMCArray'
    box $P5036, 2
    push $P5035, $P5036
    box $P5037, 115
    push $P5035, $P5037
    box $P5038, 10
    push $P5035, $P5038
    push $P5001, $P5035
    new $P5039, 'ResizablePMCArray'
    box $P5040, 2
    push $P5039, $P5040
    box $P5041, 116
    push $P5039, $P5041
    box $P5042, 11
    push $P5039, $P5042
    push $P5001, $P5039
    new $P5043, 'ResizablePMCArray'
    box $P5044, 2
    push $P5043, $P5044
    box $P5045, 58
    push $P5043, $P5045
    box $P5046, 12
    push $P5043, $P5046
    push $P5001, $P5043
    new $P5047, 'ResizablePMCArray'
    box $P5048, 2
    push $P5047, $P5048
    box $P5049, 58
    push $P5047, $P5049
    box $P5050, 13
    push $P5047, $P5050
    push $P5001, $P5047
    new $P5051, 'ResizablePMCArray'
    box $P5052, 1
    push $P5051, $P5052
    box $P5053, 0
    push $P5051, $P5053
    box $P5054, 14
    push $P5051, $P5054
    push $P5001, $P5051
    new $P5055, 'ResizablePMCArray'
    box $P5056, 4
    push $P5055, $P5056
    box $P5057, 8192
    push $P5055, $P5057
    box $P5058, 15
    push $P5055, $P5058
    push $P5001, $P5055
    new $P5059, 'ResizablePMCArray'
    box $P5060, 1
    push $P5059, $P5060
    box $P5061, 0
    push $P5059, $P5061
    box $P5062, 14
    push $P5059, $P5062
    box $P5063, 1
    push $P5059, $P5063
    box $P5064, 0
    push $P5059, $P5064
    box $P5065, 0
    push $P5059, $P5065
    push $P5001, $P5059
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<nqp::op>" :subid("cuid_143_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1177
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx890_tgt
    .local int rx890_pos
    .local int rx890_off
    .local int rx890_eos
    .local int rx890_rep
    .local pmc rx890_cur
    .local pmc rx890_curclass
    .local pmc rx890_bstack
    .local pmc rx890_cstack
    (rx890_cur, rx890_tgt, rx890_pos, rx890_curclass, rx890_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx890_cur
    length rx890_eos, rx890_tgt
    eq $I19, 1, rx890_restart2381
    gt rx890_pos, rx890_eos, rx890_fail2382
    repr_get_attr_int $I11, self, rx890_curclass, "$!from"
    ne $I11, -1, rxscan891_done2388
    goto rxscan891_scan2387
  rxscan891_loop2386:
    inc rx890_pos
    gt rx890_pos, rx890_eos, rx890_fail2382
    repr_bind_attr_int rx890_cur, rx890_curclass, "$!from", rx890_pos
  rxscan891_scan2387:
    nqp_rxmark rx890_bstack, rxscan891_loop2386, rx890_pos, 0
  rxscan891_done2388:
    add $I11, rx890_pos, 5
    gt $I11, rx890_eos, rx890_fail2382
    substr $S10, rx890_tgt, rx890_pos, 5
    ne $S10, ucs4:"nqp::", rx890_fail2382
    add rx890_pos, 5
    nqp_rxmark rx890_bstack, rxcap892_fail2390, rx890_pos, 0
    nqp_rxmark rx890_bstack, rxquantr893_done2392, -1, 0
  rxquantr893_loop2391:
    ge rx890_pos, rx890_eos, rx890_fail2382
    is_cclass $I11, .CCLASS_WORD, rx890_tgt, rx890_pos
    unless $I11, rx890_fail2382
    add rx890_pos, 1
    nqp_rxpeek $I19, rx890_bstack, rxquantr893_done2392
    inc $I19
    inc $I19
    set rx890_rep, rx890_bstack[$I19]
    nqp_rxcommit rx890_bstack, rxquantr893_done2392
    inc rx890_rep
    nqp_rxmark rx890_bstack, rxquantr893_done2392, rx890_pos, rx890_rep
    goto rxquantr893_loop2391
  rxquantr893_done2392:
    nqp_rxpeek $I19, rx890_bstack, rxcap892_fail2390
    inc $I19
    set $I11, rx890_bstack[$I19]
    repr_bind_attr_int rx890_cur, rx890_curclass, "$!pos", rx890_pos
    $P11 = rx890_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx890_pos)
    rx890_cstack = rx890_cur."!cursor_capture"($P11, "op")
    goto rxcap892_done2389
  rxcap892_fail2390:
    goto rx890_fail2382
  rxcap892_done2389:
    nqp_rxmark rx890_bstack, rxquantr894_done2394, rx890_pos, 0
  rxquantr894_loop2393:
    repr_bind_attr_int rx890_cur, rx890_curclass, "$!pos", rx890_pos
    $P11 = rx890_cur."args"()
    repr_get_attr_int $I11, $P11, rx890_curclass, "$!pos"
    lt $I11, 0, rx890_fail2382
    goto rxsubrule895_pass2395
  rxsubrule895_back2396:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx890_curclass, "$!pos"
    lt $I11, 0, rx890_fail2382
  rxsubrule895_pass2395:
    rx890_cstack = rx890_cur."!cursor_capture"($P11, "args")
    set_addr $I11, rxsubrule895_back2396
    push rx890_bstack, $I11
    push rx890_bstack, 0
    push rx890_bstack, rx890_pos
    elements $I11, rx890_cstack
    push rx890_bstack, $I11
    repr_get_attr_int rx890_pos, $P11, rx890_curclass, "$!pos"
    nqp_rxpeek $I19, rx890_bstack, rxquantr894_done2394
    inc $I19
    inc $I19
    set rx890_rep, rx890_bstack[$I19]
    nqp_rxcommit rx890_bstack, rxquantr894_done2394
    inc rx890_rep
  rxquantr894_done2394:
    rx890_cur."!cursor_pass"(rx890_pos, "term:sym<nqp::op>", 'backtrack'=>1)
    .return (rx890_cur)
  rx890_restart2381:
    repr_get_attr_obj rx890_cstack, rx890_cur, rx890_curclass, "$!cstack"
  rx890_fail2382:
    unless rx890_bstack, rx890_done2380
    pop $I19, rx890_bstack
    if_null rx890_cstack, rx890_cstack_done2385
    unless rx890_cstack, rx890_cstack_done2385
    dec $I19
    set $P11, rx890_cstack[$I19]
  rx890_cstack_done2385:
    pop rx890_rep, rx890_bstack
    pop rx890_pos, rx890_bstack
    pop $I19, rx890_bstack
    lt rx890_pos, -1, rx890_done2380
    lt rx890_pos, 0, rx890_fail2382
    eq $I19, 0, rx890_fail2382
    nqp_islist $I20, rx890_cstack
    unless $I20, rx890_jump2383
    elements $I18, rx890_bstack
    le $I18, 0, rx890_cut2384
    dec $I18
    set $I18, rx890_bstack[$I18]
  rx890_cut2384:
    assign rx890_cstack, $I18
  rx890_jump2383:
    jump $I19
  rx890_done2380:
    rx890_cur."!cursor_fail"()
    .return (rx890_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_143_1349901750.327_caps" :subid("cuid_memo_220_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["op"], $P5002
    box $P5003, 2
    set $P5001["args"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_143_1349901750.327_nfa" :subid("cuid_memo_221_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 110
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 113
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 112
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 58
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 58
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 1
    push $P5023, $P5024
    box $P5025, 0
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 4
    push $P5027, $P5028
    box $P5029, 8192
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 1
    push $P5031, $P5032
    box $P5033, 0
    push $P5031, $P5033
    box $P5034, 7
    push $P5031, $P5034
    box $P5035, 1
    push $P5031, $P5035
    box $P5036, 0
    push $P5031, $P5036
    box $P5037, 9
    push $P5031, $P5037
    box $P5038, 8
    push $P5031, $P5038
    box $P5039, "args"
    push $P5031, $P5039
    box $P5040, 0
    push $P5031, $P5040
    box $P5041, 1
    push $P5031, $P5041
    box $P5042, 0
    push $P5031, $P5042
    box $P5043, 0
    push $P5031, $P5043
    push $P5001, $P5031
    new $P5044, 'ResizablePMCArray'
    push $P5001, $P5044
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<onlystar>" :subid("cuid_144_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1181
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_398_1349901750.327' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx896_tgt
    .local int rx896_pos
    .local int rx896_off
    .local int rx896_eos
    .local int rx896_rep
    .local pmc rx896_cur
    .local pmc rx896_curclass
    .local pmc rx896_bstack
    .local pmc rx896_cstack
    (rx896_cur, rx896_tgt, rx896_pos, rx896_curclass, rx896_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx896_cur
    length rx896_eos, rx896_tgt
    eq $I19, 1, rx896_restart2399
    gt rx896_pos, rx896_eos, rx896_fail2400
    repr_get_attr_int $I11, self, rx896_curclass, "$!from"
    ne $I11, -1, rxscan897_done2406
    goto rxscan897_scan2405
  rxscan897_loop2404:
    inc rx896_pos
    gt rx896_pos, rx896_eos, rx896_fail2400
    repr_bind_attr_int rx896_cur, rx896_curclass, "$!from", rx896_pos
  rxscan897_scan2405:
    nqp_rxmark rx896_bstack, rxscan897_loop2404, rx896_pos, 0
  rxscan897_done2406:
    add $I11, rx896_pos, 3
    gt $I11, rx896_eos, rx896_fail2400
    substr $S10, rx896_tgt, rx896_pos, 3
    ne $S10, ucs4:"{*}", rx896_fail2400
    add rx896_pos, 3
    repr_bind_attr_int rx896_cur, rx896_curclass, "$!pos", rx896_pos
    $P11 = rx896_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx896_curclass, "$!pos"
    lt $I11, 0, rx896_fail2400
  alt898_02408:
    nqp_rxmark rx896_bstack, alt898_12412, rx896_pos, 0
    repr_bind_attr_int rx896_cur, rx896_curclass, "$!pos", rx896_pos
    store_lex unicode:"$\x{a2}", rx896_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_398_1349901750.327' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx896_fail2400
    goto alt898_end2407
  alt898_12412:
    repr_bind_attr_int rx896_cur, rx896_curclass, "$!pos", rx896_pos
    $P11 = rx896_cur."panic"("{*} may only appear in proto")
    repr_get_attr_int $I11, $P11, rx896_curclass, "$!pos"
    lt $I11, 0, rx896_fail2400
    repr_get_attr_int rx896_pos, $P11, rx896_curclass, "$!pos"
  alt898_end2407:
    rx896_cur."!cursor_pass"(rx896_pos, "term:sym<onlystar>", 'backtrack'=>1)
    .return (rx896_cur)
  rx896_restart2399:
    repr_get_attr_obj rx896_cstack, rx896_cur, rx896_curclass, "$!cstack"
  rx896_fail2400:
    unless rx896_bstack, rx896_done2398
    pop $I19, rx896_bstack
    if_null rx896_cstack, rx896_cstack_done2403
    unless rx896_cstack, rx896_cstack_done2403
    dec $I19
    set $P11, rx896_cstack[$I19]
  rx896_cstack_done2403:
    pop rx896_rep, rx896_bstack
    pop rx896_pos, rx896_bstack
    pop $I19, rx896_bstack
    lt rx896_pos, -1, rx896_done2398
    lt rx896_pos, 0, rx896_fail2400
    eq $I19, 0, rx896_fail2400
    nqp_islist $I20, rx896_cstack
    unless $I20, rx896_jump2401
    elements $I18, rx896_bstack
    le $I18, 0, rx896_cut2402
    dec $I18
    set $I18, rx896_bstack[$I18]
  rx896_cut2402:
    assign rx896_cstack, $I18
  rx896_jump2401:
    jump $I19
  rx896_done2398:
    rx896_cur."!cursor_fail"()
    .return (rx896_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_144_1349901750.327_caps" :subid("cuid_memo_222_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_144_1349901750.327_nfa" :subid("cuid_memo_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 123
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 42
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 125
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "ENDSTMT"
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 0
    push $P5019, $P5020
    box $P5021, 0
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_398_1349901750.327") :anon :lex :outer("cuid_144_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1183

    find_dynamic_lex $P5001, "$*MULTINESS"
    unless_null $P5001, fallback2409
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$MULTINESS"]
    unless_null $P5002, fallback2410
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5005
  fallback2410:
    unless_null $P5002, vivi_8992411
    die "Contextual $*MULTINESS not found"
    box $P5006, "Contextual $*MULTINESS not found"
    set $P5002, $P5006
  vivi_8992411:
    set $P5001, $P5002
  fallback2409:
    set $S5001, $P5001
    iseq $I5001, $S5001, "proto"
    .return ($I5001) 
.end
.HLL "nqp"
.namespace []
.sub "args" :subid("cuid_145_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1186
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx901_tgt
    .local int rx901_pos
    .local int rx901_off
    .local int rx901_eos
    .local int rx901_rep
    .local pmc rx901_cur
    .local pmc rx901_curclass
    .local pmc rx901_bstack
    .local pmc rx901_cstack
    (rx901_cur, rx901_tgt, rx901_pos, rx901_curclass, rx901_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx901_cur
    length rx901_eos, rx901_tgt
    eq $I19, 1, rx901_restart2416
    gt rx901_pos, rx901_eos, rx901_fail2417
    repr_get_attr_int $I11, self, rx901_curclass, "$!from"
    ne $I11, -1, rxscan902_done2423
    goto rxscan902_scan2422
  rxscan902_loop2421:
    inc rx901_pos
    gt rx901_pos, rx901_eos, rx901_fail2417
    repr_bind_attr_int rx901_cur, rx901_curclass, "$!from", rx901_pos
  rxscan902_scan2422:
    nqp_rxmark rx901_bstack, rxscan902_loop2421, rx901_pos, 0
  rxscan902_done2423:
    add $I11, rx901_pos, 1
    gt $I11, rx901_eos, rx901_fail2417
    substr $S10, rx901_tgt, rx901_pos, 1
    ne $S10, ucs4:"(", rx901_fail2417
    add rx901_pos, 1
    repr_bind_attr_int rx901_cur, rx901_curclass, "$!pos", rx901_pos
    $P11 = rx901_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx901_curclass, "$!pos"
    lt $I11, 0, rx901_fail2417
    nqp_rxmark rx901_bstack, rxsubrule903_pass2424, -1, 0
  rxsubrule903_pass2424:
    rx901_cstack = rx901_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx901_pos, $P11, rx901_curclass, "$!pos"
    add $I11, rx901_pos, 1
    gt $I11, rx901_eos, rx901_fail2417
    substr $S10, rx901_tgt, rx901_pos, 1
    ne $S10, ucs4:")", rx901_fail2417
    add rx901_pos, 1
    rx901_cur."!cursor_pass"(rx901_pos, "args", 'backtrack'=>1)
    .return (rx901_cur)
  rx901_restart2416:
    repr_get_attr_obj rx901_cstack, rx901_cur, rx901_curclass, "$!cstack"
  rx901_fail2417:
    unless rx901_bstack, rx901_done2415
    pop $I19, rx901_bstack
    if_null rx901_cstack, rx901_cstack_done2420
    unless rx901_cstack, rx901_cstack_done2420
    dec $I19
    set $P11, rx901_cstack[$I19]
  rx901_cstack_done2420:
    pop rx901_rep, rx901_bstack
    pop rx901_pos, rx901_bstack
    pop $I19, rx901_bstack
    lt rx901_pos, -1, rx901_done2415
    lt rx901_pos, 0, rx901_fail2417
    eq $I19, 0, rx901_fail2417
    nqp_islist $I20, rx901_cstack
    unless $I20, rx901_jump2418
    elements $I18, rx901_bstack
    le $I18, 0, rx901_cut2419
    dec $I18
    set $I18, rx901_bstack[$I18]
  rx901_cut2419:
    assign rx901_cstack, $I18
  rx901_jump2418:
    jump $I19
  rx901_done2415:
    rx901_cur."!cursor_fail"()
    .return (rx901_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_145_1349901750.327_caps" :subid("cuid_memo_224_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["arglist"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_145_1349901750.327_nfa" :subid("cuid_memo_225_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 40
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "arglist"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 41
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "arglist" :subid("cuid_146_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1190
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx904_tgt
    .local int rx904_pos
    .local int rx904_off
    .local int rx904_eos
    .local int rx904_rep
    .local pmc rx904_cur
    .local pmc rx904_curclass
    .local pmc rx904_bstack
    .local pmc rx904_cstack
    (rx904_cur, rx904_tgt, rx904_pos, rx904_curclass, rx904_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx904_cur
    length rx904_eos, rx904_tgt
    eq $I19, 1, rx904_restart2427
    gt rx904_pos, rx904_eos, rx904_fail2428
    repr_get_attr_int $I11, self, rx904_curclass, "$!from"
    ne $I11, -1, rxscan905_done2434
    goto rxscan905_scan2433
  rxscan905_loop2432:
    inc rx904_pos
    gt rx904_pos, rx904_eos, rx904_fail2428
    repr_bind_attr_int rx904_cur, rx904_curclass, "$!from", rx904_pos
  rxscan905_scan2433:
    nqp_rxmark rx904_bstack, rxscan905_loop2432, rx904_pos, 0
  rxscan905_done2434:
    repr_bind_attr_int rx904_cur, rx904_curclass, "$!pos", rx904_pos
    $P11 = rx904_cur."ws"()
    repr_get_attr_int $I11, $P11, rx904_curclass, "$!pos"
    lt $I11, 0, rx904_fail2428
    repr_get_attr_int rx904_pos, $P11, rx904_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt907_02437
    nqp_push_label $P11, alt907_12439
    nqp_rxmark rx904_bstack, alt907_end2436, -1, 0
    rx904_cur."!alt"(rx904_pos, "alt_nfa__36_1349901752.919", $P11)
    goto rx904_fail2428
  alt907_02437:
    repr_bind_attr_int rx904_cur, rx904_curclass, "$!pos", rx904_pos
    $P11 = rx904_cur."EXPR"("f=")
    repr_get_attr_int $I11, $P11, rx904_curclass, "$!pos"
    lt $I11, 0, rx904_fail2428
    nqp_rxmark rx904_bstack, rxsubrule908_pass2438, -1, 0
  rxsubrule908_pass2438:
    rx904_cstack = rx904_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx904_pos, $P11, rx904_curclass, "$!pos"
    goto alt907_end2436
  alt907_12439:
    goto alt907_end2436
  alt907_end2436:
    nqp_rxcommit rx904_bstack, alt907_end2436
    rx904_cur."!cursor_pass"(rx904_pos, "arglist", 'backtrack'=>1)
    .return (rx904_cur)
  rx904_restart2427:
    repr_get_attr_obj rx904_cstack, rx904_cur, rx904_curclass, "$!cstack"
  rx904_fail2428:
    unless rx904_bstack, rx904_done2426
    pop $I19, rx904_bstack
    if_null rx904_cstack, rx904_cstack_done2431
    unless rx904_cstack, rx904_cstack_done2431
    dec $I19
    set $P11, rx904_cstack[$I19]
  rx904_cstack_done2431:
    pop rx904_rep, rx904_bstack
    pop rx904_pos, rx904_bstack
    pop $I19, rx904_bstack
    lt rx904_pos, -1, rx904_done2426
    lt rx904_pos, 0, rx904_fail2428
    eq $I19, 0, rx904_fail2428
    nqp_islist $I20, rx904_cstack
    unless $I20, rx904_jump2429
    elements $I18, rx904_bstack
    le $I18, 0, rx904_cut2430
    dec $I18
    set $I18, rx904_bstack[$I18]
  rx904_cut2430:
    assign rx904_cstack, $I18
  rx904_jump2429:
    jump $I19
  rx904_done2426:
    rx904_cur."!cursor_fail"()
    .return (rx904_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_146_1349901750.327_caps" :subid("cuid_memo_226_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["EXPR"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_146_1349901750.327_nfa" :subid("cuid_memo_227_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "ws"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "EXPR"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    box $P5011, 1
    push $P5007, $P5011
    box $P5012, 0
    push $P5007, $P5012
    box $P5013, 0
    push $P5007, $P5013
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_146_1349901750.327_alt_nfa__36_1349901752.919" :subid("cuid_memo_228_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 8
    push $P5004, $P5005
    box $P5006, "EXPR"
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 1
    push $P5010, $P5011
    box $P5012, 0
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    push $P5008, $P5010
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<value>" :subid("cuid_147_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1199
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx910_tgt
    .local int rx910_pos
    .local int rx910_off
    .local int rx910_eos
    .local int rx910_rep
    .local pmc rx910_cur
    .local pmc rx910_curclass
    .local pmc rx910_bstack
    .local pmc rx910_cstack
    (rx910_cur, rx910_tgt, rx910_pos, rx910_curclass, rx910_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx910_cur
    length rx910_eos, rx910_tgt
    eq $I19, 1, rx910_restart2443
    gt rx910_pos, rx910_eos, rx910_fail2444
    repr_get_attr_int $I11, self, rx910_curclass, "$!from"
    ne $I11, -1, rxscan911_done2450
    goto rxscan911_scan2449
  rxscan911_loop2448:
    inc rx910_pos
    gt rx910_pos, rx910_eos, rx910_fail2444
    repr_bind_attr_int rx910_cur, rx910_curclass, "$!from", rx910_pos
  rxscan911_scan2449:
    nqp_rxmark rx910_bstack, rxscan911_loop2448, rx910_pos, 0
  rxscan911_done2450:
    repr_bind_attr_int rx910_cur, rx910_curclass, "$!pos", rx910_pos
    $P11 = rx910_cur."value"()
    repr_get_attr_int $I11, $P11, rx910_curclass, "$!pos"
    lt $I11, 0, rx910_fail2444
    nqp_rxmark rx910_bstack, rxsubrule912_pass2451, -1, 0
  rxsubrule912_pass2451:
    rx910_cstack = rx910_cur."!cursor_capture"($P11, "value")
    repr_get_attr_int rx910_pos, $P11, rx910_curclass, "$!pos"
    rx910_cur."!cursor_pass"(rx910_pos, "term:sym<value>", 'backtrack'=>1)
    .return (rx910_cur)
  rx910_restart2443:
    repr_get_attr_obj rx910_cstack, rx910_cur, rx910_curclass, "$!cstack"
  rx910_fail2444:
    unless rx910_bstack, rx910_done2442
    pop $I19, rx910_bstack
    if_null rx910_cstack, rx910_cstack_done2447
    unless rx910_cstack, rx910_cstack_done2447
    dec $I19
    set $P11, rx910_cstack[$I19]
  rx910_cstack_done2447:
    pop rx910_rep, rx910_bstack
    pop rx910_pos, rx910_bstack
    pop $I19, rx910_bstack
    lt rx910_pos, -1, rx910_done2442
    lt rx910_pos, 0, rx910_fail2444
    eq $I19, 0, rx910_fail2444
    nqp_islist $I20, rx910_cstack
    unless $I20, rx910_jump2445
    elements $I18, rx910_bstack
    le $I18, 0, rx910_cut2446
    dec $I18
    set $I18, rx910_bstack[$I18]
  rx910_cut2446:
    assign rx910_cstack, $I18
  rx910_jump2445:
    jump $I19
  rx910_done2442:
    rx910_cur."!cursor_fail"()
    .return (rx910_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_147_1349901750.327_caps" :subid("cuid_memo_229_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["value"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_147_1349901750.327_nfa" :subid("cuid_memo_230_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "value"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "value" :subid("cuid_148_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1201
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx913_tgt
    .local int rx913_pos
    .local int rx913_off
    .local int rx913_eos
    .local int rx913_rep
    .local pmc rx913_cur
    .local pmc rx913_curclass
    .local pmc rx913_bstack
    .local pmc rx913_cstack
    (rx913_cur, rx913_tgt, rx913_pos, rx913_curclass, rx913_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx913_cur
    length rx913_eos, rx913_tgt
    eq $I19, 1, rx913_restart2454
    gt rx913_pos, rx913_eos, rx913_fail2455
    repr_get_attr_int $I11, self, rx913_curclass, "$!from"
    ne $I11, -1, rxscan914_done2461
    goto rxscan914_scan2460
  rxscan914_loop2459:
    inc rx913_pos
    gt rx913_pos, rx913_eos, rx913_fail2455
    repr_bind_attr_int rx913_cur, rx913_curclass, "$!from", rx913_pos
  rxscan914_scan2460:
    nqp_rxmark rx913_bstack, rxscan914_loop2459, rx913_pos, 0
  rxscan914_done2461:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt915_02463
    nqp_push_label $P11, alt915_12465
    nqp_rxmark rx913_bstack, alt915_end2462, -1, 0
    rx913_cur."!alt"(rx913_pos, "alt_nfa__37_1349901752.929", $P11)
    goto rx913_fail2455
  alt915_02463:
    repr_bind_attr_int rx913_cur, rx913_curclass, "$!pos", rx913_pos
    $P11 = rx913_cur."quote"()
    repr_get_attr_int $I11, $P11, rx913_curclass, "$!pos"
    lt $I11, 0, rx913_fail2455
    nqp_rxmark rx913_bstack, rxsubrule916_pass2464, -1, 0
  rxsubrule916_pass2464:
    rx913_cstack = rx913_cur."!cursor_capture"($P11, "quote")
    repr_get_attr_int rx913_pos, $P11, rx913_curclass, "$!pos"
    goto alt915_end2462
  alt915_12465:
    repr_bind_attr_int rx913_cur, rx913_curclass, "$!pos", rx913_pos
    $P11 = rx913_cur."number"()
    repr_get_attr_int $I11, $P11, rx913_curclass, "$!pos"
    lt $I11, 0, rx913_fail2455
    nqp_rxmark rx913_bstack, rxsubrule917_pass2466, -1, 0
  rxsubrule917_pass2466:
    rx913_cstack = rx913_cur."!cursor_capture"($P11, "number")
    repr_get_attr_int rx913_pos, $P11, rx913_curclass, "$!pos"
    goto alt915_end2462
  alt915_end2462:
    rx913_cur."!cursor_pass"(rx913_pos, "value", 'backtrack'=>1)
    .return (rx913_cur)
  rx913_restart2454:
    repr_get_attr_obj rx913_cstack, rx913_cur, rx913_curclass, "$!cstack"
  rx913_fail2455:
    unless rx913_bstack, rx913_done2453
    pop $I19, rx913_bstack
    if_null rx913_cstack, rx913_cstack_done2458
    unless rx913_cstack, rx913_cstack_done2458
    dec $I19
    set $P11, rx913_cstack[$I19]
  rx913_cstack_done2458:
    pop rx913_rep, rx913_bstack
    pop rx913_pos, rx913_bstack
    pop $I19, rx913_bstack
    lt rx913_pos, -1, rx913_done2453
    lt rx913_pos, 0, rx913_fail2455
    eq $I19, 0, rx913_fail2455
    nqp_islist $I20, rx913_cstack
    unless $I20, rx913_jump2456
    elements $I18, rx913_bstack
    le $I18, 0, rx913_cut2457
    dec $I18
    set $I18, rx913_bstack[$I18]
  rx913_cut2457:
    assign rx913_cstack, $I18
  rx913_jump2456:
    jump $I19
  rx913_done2453:
    rx913_cur."!cursor_fail"()
    .return (rx913_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_148_1349901750.327_caps" :subid("cuid_memo_231_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["quote"], $P5002
    box $P5003, 0
    set $P5001["number"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_148_1349901750.327_nfa" :subid("cuid_memo_232_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "quote"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    box $P5007, 8
    push $P5003, $P5007
    box $P5008, "number"
    push $P5003, $P5008
    box $P5009, 0
    push $P5003, $P5009
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_148_1349901750.327_alt_nfa__37_1349901752.929" :subid("cuid_memo_233_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 8
    push $P5004, $P5005
    box $P5006, "quote"
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 8
    push $P5010, $P5011
    box $P5012, "number"
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    push $P5008, $P5010
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "number" :subid("cuid_149_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1206
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx918_tgt
    .local int rx918_pos
    .local int rx918_off
    .local int rx918_eos
    .local int rx918_rep
    .local pmc rx918_cur
    .local pmc rx918_curclass
    .local pmc rx918_bstack
    .local pmc rx918_cstack
    (rx918_cur, rx918_tgt, rx918_pos, rx918_curclass, rx918_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx918_cur
    length rx918_eos, rx918_tgt
    eq $I19, 1, rx918_restart2469
    gt rx918_pos, rx918_eos, rx918_fail2470
    repr_get_attr_int $I11, self, rx918_curclass, "$!from"
    ne $I11, -1, rxscan919_done2476
    goto rxscan919_scan2475
  rxscan919_loop2474:
    inc rx918_pos
    gt rx918_pos, rx918_eos, rx918_fail2470
    repr_bind_attr_int rx918_cur, rx918_curclass, "$!from", rx918_pos
  rxscan919_scan2475:
    nqp_rxmark rx918_bstack, rxscan919_loop2474, rx918_pos, 0
  rxscan919_done2476:
    nqp_rxmark rx918_bstack, rxcap920_fail2478, rx918_pos, 0
    nqp_rxmark rx918_bstack, rxquantr921_done2480, rx918_pos, 0
  rxquantr921_loop2479:
  alt922_02482:
    nqp_rxmark rx918_bstack, alt922_12483, rx918_pos, 0
    add $I11, rx918_pos, 1
    gt $I11, rx918_eos, rx918_fail2470
    substr $S10, rx918_tgt, rx918_pos, 1
    ne $S10, ucs4:"-", rx918_fail2470
    add rx918_pos, 1
    goto alt922_end2481
  alt922_12483:
    ge rx918_pos, rx918_eos, rx918_fail2470
    substr $S11, rx918_tgt, rx918_pos, 1
    index $I11, ucs4:"+", $S11
    lt $I11, 0, rx918_fail2470
    inc rx918_pos
  alt922_end2481:
    nqp_rxpeek $I19, rx918_bstack, rxquantr921_done2480
    inc $I19
    inc $I19
    set rx918_rep, rx918_bstack[$I19]
    nqp_rxcommit rx918_bstack, rxquantr921_done2480
    inc rx918_rep
  rxquantr921_done2480:
    nqp_rxpeek $I19, rx918_bstack, rxcap920_fail2478
    inc $I19
    set $I11, rx918_bstack[$I19]
    repr_bind_attr_int rx918_cur, rx918_curclass, "$!pos", rx918_pos
    $P11 = rx918_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx918_pos)
    rx918_cstack = rx918_cur."!cursor_capture"($P11, "sign")
    goto rxcap920_done2477
  rxcap920_fail2478:
    goto rx918_fail2470
  rxcap920_done2477:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt923_02485
    nqp_push_label $P11, alt923_12487
    nqp_rxmark rx918_bstack, alt923_end2484, -1, 0
    rx918_cur."!alt"(rx918_pos, "alt_nfa__38_1349901752.938", $P11)
    goto rx918_fail2470
  alt923_02485:
    repr_bind_attr_int rx918_cur, rx918_curclass, "$!pos", rx918_pos
    $P11 = rx918_cur."dec_number"()
    repr_get_attr_int $I11, $P11, rx918_curclass, "$!pos"
    lt $I11, 0, rx918_fail2470
    nqp_rxmark rx918_bstack, rxsubrule924_pass2486, -1, 0
  rxsubrule924_pass2486:
    rx918_cstack = rx918_cur."!cursor_capture"($P11, "dec_number")
    repr_get_attr_int rx918_pos, $P11, rx918_curclass, "$!pos"
    goto alt923_end2484
  alt923_12487:
    repr_bind_attr_int rx918_cur, rx918_curclass, "$!pos", rx918_pos
    $P11 = rx918_cur."integer"()
    repr_get_attr_int $I11, $P11, rx918_curclass, "$!pos"
    lt $I11, 0, rx918_fail2470
    nqp_rxmark rx918_bstack, rxsubrule925_pass2488, -1, 0
  rxsubrule925_pass2488:
    rx918_cstack = rx918_cur."!cursor_capture"($P11, "integer")
    repr_get_attr_int rx918_pos, $P11, rx918_curclass, "$!pos"
    goto alt923_end2484
  alt923_end2484:
    nqp_rxcommit rx918_bstack, alt923_end2484
    rx918_cur."!cursor_pass"(rx918_pos, "number", 'backtrack'=>1)
    .return (rx918_cur)
  rx918_restart2469:
    repr_get_attr_obj rx918_cstack, rx918_cur, rx918_curclass, "$!cstack"
  rx918_fail2470:
    unless rx918_bstack, rx918_done2468
    pop $I19, rx918_bstack
    if_null rx918_cstack, rx918_cstack_done2473
    unless rx918_cstack, rx918_cstack_done2473
    dec $I19
    set $P11, rx918_cstack[$I19]
  rx918_cstack_done2473:
    pop rx918_rep, rx918_bstack
    pop rx918_pos, rx918_bstack
    pop $I19, rx918_bstack
    lt rx918_pos, -1, rx918_done2468
    lt rx918_pos, 0, rx918_fail2470
    eq $I19, 0, rx918_fail2470
    nqp_islist $I20, rx918_cstack
    unless $I20, rx918_jump2471
    elements $I18, rx918_bstack
    le $I18, 0, rx918_cut2472
    dec $I18
    set $I18, rx918_bstack[$I18]
  rx918_cut2472:
    assign rx918_cstack, $I18
  rx918_jump2471:
    jump $I19
  rx918_done2468:
    rx918_cur."!cursor_fail"()
    .return (rx918_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_149_1349901750.327_caps" :subid("cuid_memo_234_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sign"], $P5002
    box $P5003, 0
    set $P5001["dec_number"], $P5003
    box $P5004, 0
    set $P5001["integer"], $P5004
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_149_1349901750.327_nfa" :subid("cuid_memo_235_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 0
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    box $P5007, 1
    push $P5003, $P5007
    box $P5008, 0
    push $P5003, $P5008
    box $P5009, 2
    push $P5003, $P5009
    push $P5001, $P5003
    new $P5010, 'ResizablePMCArray'
    box $P5011, 8
    push $P5010, $P5011
    box $P5012, "dec_number"
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    box $P5014, 8
    push $P5010, $P5014
    box $P5015, "integer"
    push $P5010, $P5015
    box $P5016, 0
    push $P5010, $P5016
    push $P5001, $P5010
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_149_1349901750.327_alt_nfa__38_1349901752.938" :subid("cuid_memo_236_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 8
    push $P5004, $P5005
    box $P5006, "dec_number"
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 8
    push $P5010, $P5011
    box $P5012, "integer"
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    push $P5008, $P5010
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote" :subid("cuid_150_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1211
    .param pmc self 
    $P5001 = self."!protoregex"("quote")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<apos>" :subid("cuid_151_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1212
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx926_tgt
    .local int rx926_pos
    .local int rx926_off
    .local int rx926_eos
    .local int rx926_rep
    .local pmc rx926_cur
    .local pmc rx926_curclass
    .local pmc rx926_bstack
    .local pmc rx926_cstack
    (rx926_cur, rx926_tgt, rx926_pos, rx926_curclass, rx926_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx926_cur
    length rx926_eos, rx926_tgt
    eq $I19, 1, rx926_restart2491
    gt rx926_pos, rx926_eos, rx926_fail2492
    repr_get_attr_int $I11, self, rx926_curclass, "$!from"
    ne $I11, -1, rxscan927_done2498
    goto rxscan927_scan2497
  rxscan927_loop2496:
    inc rx926_pos
    gt rx926_pos, rx926_eos, rx926_fail2492
    repr_bind_attr_int rx926_cur, rx926_curclass, "$!from", rx926_pos
  rxscan927_scan2497:
    nqp_rxmark rx926_bstack, rxscan927_loop2496, rx926_pos, 0
  rxscan927_done2498:
    ge rx926_pos, rx926_eos, rx926_fail2492
    substr $S11, rx926_tgt, rx926_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx926_fail2492
    repr_bind_attr_int rx926_cur, rx926_curclass, "$!pos", rx926_pos
    $P11 = rx926_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx926_curclass, "$!pos"
    lt $I11, 0, rx926_fail2492
    nqp_rxmark rx926_bstack, rxsubrule928_pass2499, -1, 0
  rxsubrule928_pass2499:
    rx926_cstack = rx926_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx926_pos, $P11, rx926_curclass, "$!pos"
    rx926_cur."!cursor_pass"(rx926_pos, "quote:sym<apos>", 'backtrack'=>1)
    .return (rx926_cur)
  rx926_restart2491:
    repr_get_attr_obj rx926_cstack, rx926_cur, rx926_curclass, "$!cstack"
  rx926_fail2492:
    unless rx926_bstack, rx926_done2490
    pop $I19, rx926_bstack
    if_null rx926_cstack, rx926_cstack_done2495
    unless rx926_cstack, rx926_cstack_done2495
    dec $I19
    set $P11, rx926_cstack[$I19]
  rx926_cstack_done2495:
    pop rx926_rep, rx926_bstack
    pop rx926_pos, rx926_bstack
    pop $I19, rx926_bstack
    lt rx926_pos, -1, rx926_done2490
    lt rx926_pos, 0, rx926_fail2492
    eq $I19, 0, rx926_fail2492
    nqp_islist $I20, rx926_cstack
    unless $I20, rx926_jump2493
    elements $I18, rx926_bstack
    le $I18, 0, rx926_cut2494
    dec $I18
    set $I18, rx926_bstack[$I18]
  rx926_cut2494:
    assign rx926_cstack, $I18
  rx926_jump2493:
    jump $I19
  rx926_done2490:
    rx926_cur."!cursor_fail"()
    .return (rx926_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_151_1349901750.327_caps" :subid("cuid_memo_237_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["quote_EXPR"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_151_1349901750.327_nfa" :subid("cuid_memo_238_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "'"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<dblq>" :subid("cuid_152_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1213
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx929_tgt
    .local int rx929_pos
    .local int rx929_off
    .local int rx929_eos
    .local int rx929_rep
    .local pmc rx929_cur
    .local pmc rx929_curclass
    .local pmc rx929_bstack
    .local pmc rx929_cstack
    (rx929_cur, rx929_tgt, rx929_pos, rx929_curclass, rx929_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx929_cur
    length rx929_eos, rx929_tgt
    eq $I19, 1, rx929_restart2502
    gt rx929_pos, rx929_eos, rx929_fail2503
    repr_get_attr_int $I11, self, rx929_curclass, "$!from"
    ne $I11, -1, rxscan930_done2509
    goto rxscan930_scan2508
  rxscan930_loop2507:
    inc rx929_pos
    gt rx929_pos, rx929_eos, rx929_fail2503
    repr_bind_attr_int rx929_cur, rx929_curclass, "$!from", rx929_pos
  rxscan930_scan2508:
    nqp_rxmark rx929_bstack, rxscan930_loop2507, rx929_pos, 0
  rxscan930_done2509:
    ge rx929_pos, rx929_eos, rx929_fail2503
    substr $S11, rx929_tgt, rx929_pos, 1
    index $I11, ucs4:"\"", $S11
    lt $I11, 0, rx929_fail2503
    repr_bind_attr_int rx929_cur, rx929_curclass, "$!pos", rx929_pos
    $P11 = rx929_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx929_curclass, "$!pos"
    lt $I11, 0, rx929_fail2503
    nqp_rxmark rx929_bstack, rxsubrule931_pass2510, -1, 0
  rxsubrule931_pass2510:
    rx929_cstack = rx929_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx929_pos, $P11, rx929_curclass, "$!pos"
    rx929_cur."!cursor_pass"(rx929_pos, "quote:sym<dblq>", 'backtrack'=>1)
    .return (rx929_cur)
  rx929_restart2502:
    repr_get_attr_obj rx929_cstack, rx929_cur, rx929_curclass, "$!cstack"
  rx929_fail2503:
    unless rx929_bstack, rx929_done2501
    pop $I19, rx929_bstack
    if_null rx929_cstack, rx929_cstack_done2506
    unless rx929_cstack, rx929_cstack_done2506
    dec $I19
    set $P11, rx929_cstack[$I19]
  rx929_cstack_done2506:
    pop rx929_rep, rx929_bstack
    pop rx929_pos, rx929_bstack
    pop $I19, rx929_bstack
    lt rx929_pos, -1, rx929_done2501
    lt rx929_pos, 0, rx929_fail2503
    eq $I19, 0, rx929_fail2503
    nqp_islist $I20, rx929_cstack
    unless $I20, rx929_jump2504
    elements $I18, rx929_bstack
    le $I18, 0, rx929_cut2505
    dec $I18
    set $I18, rx929_bstack[$I18]
  rx929_cut2505:
    assign rx929_cstack, $I18
  rx929_jump2504:
    jump $I19
  rx929_done2501:
    rx929_cur."!cursor_fail"()
    .return (rx929_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_152_1349901750.327_caps" :subid("cuid_memo_239_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["quote_EXPR"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_152_1349901750.327_nfa" :subid("cuid_memo_240_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "\""
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<q>" :subid("cuid_153_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1214
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx932_tgt
    .local int rx932_pos
    .local int rx932_off
    .local int rx932_eos
    .local int rx932_rep
    .local pmc rx932_cur
    .local pmc rx932_curclass
    .local pmc rx932_bstack
    .local pmc rx932_cstack
    (rx932_cur, rx932_tgt, rx932_pos, rx932_curclass, rx932_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx932_cur
    length rx932_eos, rx932_tgt
    eq $I19, 1, rx932_restart2513
    gt rx932_pos, rx932_eos, rx932_fail2514
    repr_get_attr_int $I11, self, rx932_curclass, "$!from"
    ne $I11, -1, rxscan933_done2520
    goto rxscan933_scan2519
  rxscan933_loop2518:
    inc rx932_pos
    gt rx932_pos, rx932_eos, rx932_fail2514
    repr_bind_attr_int rx932_cur, rx932_curclass, "$!from", rx932_pos
  rxscan933_scan2519:
    nqp_rxmark rx932_bstack, rxscan933_loop2518, rx932_pos, 0
  rxscan933_done2520:
    nqp_rxmark rx932_bstack, rxcap934_fail2522, rx932_pos, 0
    add $I11, rx932_pos, 1
    gt $I11, rx932_eos, rx932_fail2514
    substr $S10, rx932_tgt, rx932_pos, 1
    ne $S10, ucs4:"q", rx932_fail2514
    add rx932_pos, 1
    nqp_rxpeek $I19, rx932_bstack, rxcap934_fail2522
    inc $I19
    set $I11, rx932_bstack[$I19]
    repr_bind_attr_int rx932_cur, rx932_curclass, "$!pos", rx932_pos
    $P11 = rx932_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx932_pos)
    rx932_cstack = rx932_cur."!cursor_capture"($P11, "sym")
    goto rxcap934_done2521
  rxcap934_fail2522:
    goto rx932_fail2514
  rxcap934_done2521:
    le rx932_pos, 0, rx932_fail2514
    is_cclass $I11, .CCLASS_WORD, rx932_tgt, rx932_pos
    if $I11, rx932_fail2514
    sub $I11, rx932_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx932_tgt, $I11
    unless $I11, rx932_fail2514
    ge rx932_pos, rx932_eos, rx932_fail2514
    substr $S11, rx932_tgt, rx932_pos, 1
    index $I11, ucs4:"(", $S11
    ge $I11, 0, rx932_fail2514
    repr_bind_attr_int rx932_cur, rx932_curclass, "$!pos", rx932_pos
    $P11 = rx932_cur."ws"()
    repr_get_attr_int $I11, $P11, rx932_curclass, "$!pos"
    lt $I11, 0, rx932_fail2514
    repr_get_attr_int rx932_pos, $P11, rx932_curclass, "$!pos"
    repr_bind_attr_int rx932_cur, rx932_curclass, "$!pos", rx932_pos
    $P11 = rx932_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx932_curclass, "$!pos"
    lt $I11, 0, rx932_fail2514
    nqp_rxmark rx932_bstack, rxsubrule937_pass2525, -1, 0
  rxsubrule937_pass2525:
    rx932_cstack = rx932_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx932_pos, $P11, rx932_curclass, "$!pos"
    rx932_cur."!cursor_pass"(rx932_pos, "quote:sym<q>", 'backtrack'=>1)
    .return (rx932_cur)
  rx932_restart2513:
    repr_get_attr_obj rx932_cstack, rx932_cur, rx932_curclass, "$!cstack"
  rx932_fail2514:
    unless rx932_bstack, rx932_done2512
    pop $I19, rx932_bstack
    if_null rx932_cstack, rx932_cstack_done2517
    unless rx932_cstack, rx932_cstack_done2517
    dec $I19
    set $P11, rx932_cstack[$I19]
  rx932_cstack_done2517:
    pop rx932_rep, rx932_bstack
    pop rx932_pos, rx932_bstack
    pop $I19, rx932_bstack
    lt rx932_pos, -1, rx932_done2512
    lt rx932_pos, 0, rx932_fail2514
    eq $I19, 0, rx932_fail2514
    nqp_islist $I20, rx932_cstack
    unless $I20, rx932_jump2515
    elements $I18, rx932_bstack
    le $I18, 0, rx932_cut2516
    dec $I18
    set $I18, rx932_bstack[$I18]
  rx932_cut2516:
    assign rx932_cstack, $I18
  rx932_jump2515:
    jump $I19
  rx932_done2512:
    rx932_cur."!cursor_fail"()
    .return (rx932_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_153_1349901750.327_caps" :subid("cuid_memo_241_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["quote_EXPR"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_153_1349901750.327_nfa" :subid("cuid_memo_242_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 113
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 7
    push $P5011, $P5012
    box $P5013, "("
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 0
    push $P5015, $P5016
    box $P5017, 0
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<qq>" :subid("cuid_154_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1215
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx938_tgt
    .local int rx938_pos
    .local int rx938_off
    .local int rx938_eos
    .local int rx938_rep
    .local pmc rx938_cur
    .local pmc rx938_curclass
    .local pmc rx938_bstack
    .local pmc rx938_cstack
    (rx938_cur, rx938_tgt, rx938_pos, rx938_curclass, rx938_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx938_cur
    length rx938_eos, rx938_tgt
    eq $I19, 1, rx938_restart2528
    gt rx938_pos, rx938_eos, rx938_fail2529
    repr_get_attr_int $I11, self, rx938_curclass, "$!from"
    ne $I11, -1, rxscan939_done2535
    goto rxscan939_scan2534
  rxscan939_loop2533:
    inc rx938_pos
    gt rx938_pos, rx938_eos, rx938_fail2529
    repr_bind_attr_int rx938_cur, rx938_curclass, "$!from", rx938_pos
  rxscan939_scan2534:
    nqp_rxmark rx938_bstack, rxscan939_loop2533, rx938_pos, 0
  rxscan939_done2535:
    nqp_rxmark rx938_bstack, rxcap940_fail2537, rx938_pos, 0
    add $I11, rx938_pos, 2
    gt $I11, rx938_eos, rx938_fail2529
    substr $S10, rx938_tgt, rx938_pos, 2
    ne $S10, ucs4:"qq", rx938_fail2529
    add rx938_pos, 2
    nqp_rxpeek $I19, rx938_bstack, rxcap940_fail2537
    inc $I19
    set $I11, rx938_bstack[$I19]
    repr_bind_attr_int rx938_cur, rx938_curclass, "$!pos", rx938_pos
    $P11 = rx938_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx938_pos)
    rx938_cstack = rx938_cur."!cursor_capture"($P11, "sym")
    goto rxcap940_done2536
  rxcap940_fail2537:
    goto rx938_fail2529
  rxcap940_done2536:
    le rx938_pos, 0, rx938_fail2529
    is_cclass $I11, .CCLASS_WORD, rx938_tgt, rx938_pos
    if $I11, rx938_fail2529
    sub $I11, rx938_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx938_tgt, $I11
    unless $I11, rx938_fail2529
    ge rx938_pos, rx938_eos, rx938_fail2529
    substr $S11, rx938_tgt, rx938_pos, 1
    index $I11, ucs4:"(", $S11
    ge $I11, 0, rx938_fail2529
    repr_bind_attr_int rx938_cur, rx938_curclass, "$!pos", rx938_pos
    $P11 = rx938_cur."ws"()
    repr_get_attr_int $I11, $P11, rx938_curclass, "$!pos"
    lt $I11, 0, rx938_fail2529
    repr_get_attr_int rx938_pos, $P11, rx938_curclass, "$!pos"
    repr_bind_attr_int rx938_cur, rx938_curclass, "$!pos", rx938_pos
    $P11 = rx938_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx938_curclass, "$!pos"
    lt $I11, 0, rx938_fail2529
    nqp_rxmark rx938_bstack, rxsubrule943_pass2540, -1, 0
  rxsubrule943_pass2540:
    rx938_cstack = rx938_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx938_pos, $P11, rx938_curclass, "$!pos"
    rx938_cur."!cursor_pass"(rx938_pos, "quote:sym<qq>", 'backtrack'=>1)
    .return (rx938_cur)
  rx938_restart2528:
    repr_get_attr_obj rx938_cstack, rx938_cur, rx938_curclass, "$!cstack"
  rx938_fail2529:
    unless rx938_bstack, rx938_done2527
    pop $I19, rx938_bstack
    if_null rx938_cstack, rx938_cstack_done2532
    unless rx938_cstack, rx938_cstack_done2532
    dec $I19
    set $P11, rx938_cstack[$I19]
  rx938_cstack_done2532:
    pop rx938_rep, rx938_bstack
    pop rx938_pos, rx938_bstack
    pop $I19, rx938_bstack
    lt rx938_pos, -1, rx938_done2527
    lt rx938_pos, 0, rx938_fail2529
    eq $I19, 0, rx938_fail2529
    nqp_islist $I20, rx938_cstack
    unless $I20, rx938_jump2530
    elements $I18, rx938_bstack
    le $I18, 0, rx938_cut2531
    dec $I18
    set $I18, rx938_bstack[$I18]
  rx938_cut2531:
    assign rx938_cstack, $I18
  rx938_jump2530:
    jump $I19
  rx938_done2527:
    rx938_cur."!cursor_fail"()
    .return (rx938_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_154_1349901750.327_caps" :subid("cuid_memo_243_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["quote_EXPR"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_154_1349901750.327_nfa" :subid("cuid_memo_244_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 113
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 113
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 1
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 7
    push $P5015, $P5016
    box $P5017, "("
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 0
    push $P5019, $P5020
    box $P5021, 0
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q>" :subid("cuid_155_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1216
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx944_tgt
    .local int rx944_pos
    .local int rx944_off
    .local int rx944_eos
    .local int rx944_rep
    .local pmc rx944_cur
    .local pmc rx944_curclass
    .local pmc rx944_bstack
    .local pmc rx944_cstack
    (rx944_cur, rx944_tgt, rx944_pos, rx944_curclass, rx944_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx944_cur
    length rx944_eos, rx944_tgt
    eq $I19, 1, rx944_restart2543
    gt rx944_pos, rx944_eos, rx944_fail2544
    repr_get_attr_int $I11, self, rx944_curclass, "$!from"
    ne $I11, -1, rxscan945_done2550
    goto rxscan945_scan2549
  rxscan945_loop2548:
    inc rx944_pos
    gt rx944_pos, rx944_eos, rx944_fail2544
    repr_bind_attr_int rx944_cur, rx944_curclass, "$!from", rx944_pos
  rxscan945_scan2549:
    nqp_rxmark rx944_bstack, rxscan945_loop2548, rx944_pos, 0
  rxscan945_done2550:
    nqp_rxmark rx944_bstack, rxcap946_fail2552, rx944_pos, 0
    add $I11, rx944_pos, 1
    gt $I11, rx944_eos, rx944_fail2544
    substr $S10, rx944_tgt, rx944_pos, 1
    ne $S10, ucs4:"Q", rx944_fail2544
    add rx944_pos, 1
    nqp_rxpeek $I19, rx944_bstack, rxcap946_fail2552
    inc $I19
    set $I11, rx944_bstack[$I19]
    repr_bind_attr_int rx944_cur, rx944_curclass, "$!pos", rx944_pos
    $P11 = rx944_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx944_pos)
    rx944_cstack = rx944_cur."!cursor_capture"($P11, "sym")
    goto rxcap946_done2551
  rxcap946_fail2552:
    goto rx944_fail2544
  rxcap946_done2551:
    le rx944_pos, 0, rx944_fail2544
    is_cclass $I11, .CCLASS_WORD, rx944_tgt, rx944_pos
    if $I11, rx944_fail2544
    sub $I11, rx944_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx944_tgt, $I11
    unless $I11, rx944_fail2544
    ge rx944_pos, rx944_eos, rx944_fail2544
    substr $S11, rx944_tgt, rx944_pos, 1
    index $I11, ucs4:"(", $S11
    ge $I11, 0, rx944_fail2544
    repr_bind_attr_int rx944_cur, rx944_curclass, "$!pos", rx944_pos
    $P11 = rx944_cur."ws"()
    repr_get_attr_int $I11, $P11, rx944_curclass, "$!pos"
    lt $I11, 0, rx944_fail2544
    repr_get_attr_int rx944_pos, $P11, rx944_curclass, "$!pos"
    repr_bind_attr_int rx944_cur, rx944_curclass, "$!pos", rx944_pos
    $P11 = rx944_cur."quote_EXPR"()
    repr_get_attr_int $I11, $P11, rx944_curclass, "$!pos"
    lt $I11, 0, rx944_fail2544
    nqp_rxmark rx944_bstack, rxsubrule949_pass2555, -1, 0
  rxsubrule949_pass2555:
    rx944_cstack = rx944_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx944_pos, $P11, rx944_curclass, "$!pos"
    rx944_cur."!cursor_pass"(rx944_pos, "quote:sym<Q>", 'backtrack'=>1)
    .return (rx944_cur)
  rx944_restart2543:
    repr_get_attr_obj rx944_cstack, rx944_cur, rx944_curclass, "$!cstack"
  rx944_fail2544:
    unless rx944_bstack, rx944_done2542
    pop $I19, rx944_bstack
    if_null rx944_cstack, rx944_cstack_done2547
    unless rx944_cstack, rx944_cstack_done2547
    dec $I19
    set $P11, rx944_cstack[$I19]
  rx944_cstack_done2547:
    pop rx944_rep, rx944_bstack
    pop rx944_pos, rx944_bstack
    pop $I19, rx944_bstack
    lt rx944_pos, -1, rx944_done2542
    lt rx944_pos, 0, rx944_fail2544
    eq $I19, 0, rx944_fail2544
    nqp_islist $I20, rx944_cstack
    unless $I20, rx944_jump2545
    elements $I18, rx944_bstack
    le $I18, 0, rx944_cut2546
    dec $I18
    set $I18, rx944_bstack[$I18]
  rx944_cut2546:
    assign rx944_cstack, $I18
  rx944_jump2545:
    jump $I19
  rx944_done2542:
    rx944_cur."!cursor_fail"()
    .return (rx944_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_155_1349901750.327_caps" :subid("cuid_memo_245_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["quote_EXPR"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_155_1349901750.327_nfa" :subid("cuid_memo_246_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 81
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 7
    push $P5011, $P5012
    box $P5013, "("
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 0
    push $P5015, $P5016
    box $P5017, 0
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q:PIR>" :subid("cuid_156_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1217
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx950_tgt
    .local int rx950_pos
    .local int rx950_off
    .local int rx950_eos
    .local int rx950_rep
    .local pmc rx950_cur
    .local pmc rx950_curclass
    .local pmc rx950_bstack
    .local pmc rx950_cstack
    (rx950_cur, rx950_tgt, rx950_pos, rx950_curclass, rx950_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx950_cur
    length rx950_eos, rx950_tgt
    eq $I19, 1, rx950_restart2558
    gt rx950_pos, rx950_eos, rx950_fail2559
    repr_get_attr_int $I11, self, rx950_curclass, "$!from"
    ne $I11, -1, rxscan951_done2565
    goto rxscan951_scan2564
  rxscan951_loop2563:
    inc rx950_pos
    gt rx950_pos, rx950_eos, rx950_fail2559
    repr_bind_attr_int rx950_cur, rx950_curclass, "$!from", rx950_pos
  rxscan951_scan2564:
    nqp_rxmark rx950_bstack, rxscan951_loop2563, rx950_pos, 0
  rxscan951_done2565:
    nqp_rxmark rx950_bstack, rxcap952_fail2567, rx950_pos, 0
    add $I11, rx950_pos, 5
    gt $I11, rx950_eos, rx950_fail2559
    substr $S10, rx950_tgt, rx950_pos, 5
    ne $S10, ucs4:"Q:PIR", rx950_fail2559
    add rx950_pos, 5
    nqp_rxpeek $I19, rx950_bstack, rxcap952_fail2567
    inc $I19
    set $I11, rx950_bstack[$I19]
    repr_bind_attr_int rx950_cur, rx950_curclass, "$!pos", rx950_pos
    $P11 = rx950_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx950_pos)
    rx950_cstack = rx950_cur."!cursor_capture"($P11, "sym")
    goto rxcap952_done2566
  rxcap952_fail2567:
    goto rx950_fail2559
  rxcap952_done2566:
    repr_bind_attr_int rx950_cur, rx950_curclass, "$!pos", rx950_pos
    $P11 = rx950_cur."ws"()
    repr_get_attr_int $I11, $P11, rx950_curclass, "$!pos"
    lt $I11, 0, rx950_fail2559
    repr_get_attr_int rx950_pos, $P11, rx950_curclass, "$!pos"
    repr_bind_attr_int rx950_cur, rx950_curclass, "$!pos", rx950_pos
    $P11 = rx950_cur."quote_EXPR"()
    repr_get_attr_int $I11, $P11, rx950_curclass, "$!pos"
    lt $I11, 0, rx950_fail2559
    nqp_rxmark rx950_bstack, rxsubrule954_pass2569, -1, 0
  rxsubrule954_pass2569:
    rx950_cstack = rx950_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx950_pos, $P11, rx950_curclass, "$!pos"
    rx950_cur."!cursor_pass"(rx950_pos, "quote:sym<Q:PIR>", 'backtrack'=>1)
    .return (rx950_cur)
  rx950_restart2558:
    repr_get_attr_obj rx950_cstack, rx950_cur, rx950_curclass, "$!cstack"
  rx950_fail2559:
    unless rx950_bstack, rx950_done2557
    pop $I19, rx950_bstack
    if_null rx950_cstack, rx950_cstack_done2562
    unless rx950_cstack, rx950_cstack_done2562
    dec $I19
    set $P11, rx950_cstack[$I19]
  rx950_cstack_done2562:
    pop rx950_rep, rx950_bstack
    pop rx950_pos, rx950_bstack
    pop $I19, rx950_bstack
    lt rx950_pos, -1, rx950_done2557
    lt rx950_pos, 0, rx950_fail2559
    eq $I19, 0, rx950_fail2559
    nqp_islist $I20, rx950_cstack
    unless $I20, rx950_jump2560
    elements $I18, rx950_bstack
    le $I18, 0, rx950_cut2561
    dec $I18
    set $I18, rx950_bstack[$I18]
  rx950_cut2561:
    assign rx950_cstack, $I18
  rx950_jump2560:
    jump $I19
  rx950_done2557:
    rx950_cur."!cursor_fail"()
    .return (rx950_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_156_1349901750.327_caps" :subid("cuid_memo_247_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["quote_EXPR"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_156_1349901750.327_nfa" :subid("cuid_memo_248_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 81
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 58
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 80
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 73
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 82
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 8
    push $P5023, $P5024
    box $P5025, "ws"
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "quote_EXPR"
    push $P5027, $P5029
    box $P5030, 0
    push $P5027, $P5030
    push $P5001, $P5027
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym</ />" :subid("cuid_157_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1218
    .param pmc _lex_param_0 
    .lex "%*RX", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    new $P5001, 'Hash'
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx955_tgt
    .local int rx955_pos
    .local int rx955_off
    .local int rx955_eos
    .local int rx955_rep
    .local pmc rx955_cur
    .local pmc rx955_curclass
    .local pmc rx955_bstack
    .local pmc rx955_cstack
    (rx955_cur, rx955_tgt, rx955_pos, rx955_curclass, rx955_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx955_cur
    length rx955_eos, rx955_tgt
    eq $I19, 1, rx955_restart2572
    gt rx955_pos, rx955_eos, rx955_fail2573
    repr_get_attr_int $I11, self, rx955_curclass, "$!from"
    ne $I11, -1, rxscan956_done2579
    goto rxscan956_scan2578
  rxscan956_loop2577:
    inc rx955_pos
    gt rx955_pos, rx955_eos, rx955_fail2573
    repr_bind_attr_int rx955_cur, rx955_curclass, "$!from", rx955_pos
  rxscan956_scan2578:
    nqp_rxmark rx955_bstack, rxscan956_loop2577, rx955_pos, 0
  rxscan956_done2579:
    add $I11, rx955_pos, 1
    gt $I11, rx955_eos, rx955_fail2573
    substr $S10, rx955_tgt, rx955_pos, 1
    ne $S10, ucs4:"/", rx955_fail2573
    add rx955_pos, 1
    repr_bind_attr_int rx955_cur, rx955_curclass, "$!pos", rx955_pos
    $P11 = rx955_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx955_curclass, "$!pos"
    lt $I11, 0, rx955_fail2573
    repr_get_attr_int rx955_pos, $P11, rx955_curclass, "$!pos"
    repr_bind_attr_int rx955_cur, rx955_curclass, "$!pos", rx955_pos
    store_lex unicode:"$\x{a2}", rx955_cur
    unless_null $P101, fallback2581
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%RX"]
    unless_null $P5002, fallback2582
    nqp_get_sc_object $P5006, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%RX"], $P5007
    set $P5002, $P5007
  fallback2582:
    unless_null $P5002, vivi_9582583
    die "Contextual %*RX not found"
    box $P5008, "Contextual %*RX not found"
    set $P5002, $P5008
  vivi_9582583:
    set $P101, $P5002
  fallback2581:
    repr_bind_attr_int rx955_cur, rx955_curclass, "$!pos", rx955_pos
    $P11 = rx955_cur."LANG"("Regex", "nibbler")
    repr_get_attr_int $I11, $P11, rx955_curclass, "$!pos"
    lt $I11, 0, rx955_fail2573
    nqp_rxmark rx955_bstack, rxsubrule959_pass2584, -1, 0
  rxsubrule959_pass2584:
    rx955_cstack = rx955_cur."!cursor_capture"($P11, "p6regex")
    repr_get_attr_int rx955_pos, $P11, rx955_curclass, "$!pos"
    add $I11, rx955_pos, 1
    gt $I11, rx955_eos, rx955_fail2573
    substr $S10, rx955_tgt, rx955_pos, 1
    ne $S10, ucs4:"/", rx955_fail2573
    add rx955_pos, 1
    rx955_cur."!cursor_pass"(rx955_pos, "quote:sym</ />", 'backtrack'=>1)
    .return (rx955_cur)
  rx955_restart2572:
    repr_get_attr_obj rx955_cstack, rx955_cur, rx955_curclass, "$!cstack"
  rx955_fail2573:
    unless rx955_bstack, rx955_done2571
    pop $I19, rx955_bstack
    if_null rx955_cstack, rx955_cstack_done2576
    unless rx955_cstack, rx955_cstack_done2576
    dec $I19
    set $P11, rx955_cstack[$I19]
  rx955_cstack_done2576:
    pop rx955_rep, rx955_bstack
    pop rx955_pos, rx955_bstack
    pop $I19, rx955_bstack
    lt rx955_pos, -1, rx955_done2571
    lt rx955_pos, 0, rx955_fail2573
    eq $I19, 0, rx955_fail2573
    nqp_islist $I20, rx955_cstack
    unless $I20, rx955_jump2574
    elements $I18, rx955_bstack
    le $I18, 0, rx955_cut2575
    dec $I18
    set $I18, rx955_bstack[$I18]
  rx955_cut2575:
    assign rx955_cstack, $I18
  rx955_jump2574:
    jump $I19
  rx955_done2571:
    rx955_cur."!cursor_fail"()
    .return (rx955_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_157_1349901750.327_caps" :subid("cuid_memo_249_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["p6regex"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_157_1349901750.327_nfa" :subid("cuid_memo_250_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 47
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "newpad"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 1
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "LANG"
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 47
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<$>" :subid("cuid_158_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1226
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx960_tgt
    .local int rx960_pos
    .local int rx960_off
    .local int rx960_eos
    .local int rx960_rep
    .local pmc rx960_cur
    .local pmc rx960_curclass
    .local pmc rx960_bstack
    .local pmc rx960_cstack
    (rx960_cur, rx960_tgt, rx960_pos, rx960_curclass, rx960_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx960_cur
    length rx960_eos, rx960_tgt
    eq $I19, 1, rx960_restart2587
    gt rx960_pos, rx960_eos, rx960_fail2588
    repr_get_attr_int $I11, self, rx960_curclass, "$!from"
    ne $I11, -1, rxscan961_done2594
    goto rxscan961_scan2593
  rxscan961_loop2592:
    inc rx960_pos
    gt rx960_pos, rx960_eos, rx960_fail2588
    repr_bind_attr_int rx960_cur, rx960_curclass, "$!from", rx960_pos
  rxscan961_scan2593:
    nqp_rxmark rx960_bstack, rxscan961_loop2592, rx960_pos, 0
  rxscan961_done2594:
    ge rx960_pos, rx960_eos, rx960_fail2588
    substr $S11, rx960_tgt, rx960_pos, 1
    index $I11, ucs4:"$", $S11
    lt $I11, 0, rx960_fail2588
    repr_bind_attr_int rx960_cur, rx960_curclass, "$!pos", rx960_pos
    $P11 = rx960_cur."quotemod_check"("s")
    repr_get_attr_int $I11, $P11, rx960_curclass, "$!pos"
    lt $I11, 0, rx960_fail2588
    repr_bind_attr_int rx960_cur, rx960_curclass, "$!pos", rx960_pos
    $P11 = rx960_cur."variable"()
    repr_get_attr_int $I11, $P11, rx960_curclass, "$!pos"
    lt $I11, 0, rx960_fail2588
    nqp_rxmark rx960_bstack, rxsubrule962_pass2595, -1, 0
  rxsubrule962_pass2595:
    rx960_cstack = rx960_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx960_pos, $P11, rx960_curclass, "$!pos"
    rx960_cur."!cursor_pass"(rx960_pos, "quote_escape:sym<$>", 'backtrack'=>1)
    .return (rx960_cur)
  rx960_restart2587:
    repr_get_attr_obj rx960_cstack, rx960_cur, rx960_curclass, "$!cstack"
  rx960_fail2588:
    unless rx960_bstack, rx960_done2586
    pop $I19, rx960_bstack
    if_null rx960_cstack, rx960_cstack_done2591
    unless rx960_cstack, rx960_cstack_done2591
    dec $I19
    set $P11, rx960_cstack[$I19]
  rx960_cstack_done2591:
    pop rx960_rep, rx960_bstack
    pop rx960_pos, rx960_bstack
    pop $I19, rx960_bstack
    lt rx960_pos, -1, rx960_done2586
    lt rx960_pos, 0, rx960_fail2588
    eq $I19, 0, rx960_fail2588
    nqp_islist $I20, rx960_cstack
    unless $I20, rx960_jump2589
    elements $I18, rx960_bstack
    le $I18, 0, rx960_cut2590
    dec $I18
    set $I18, rx960_bstack[$I18]
  rx960_cut2590:
    assign rx960_cstack, $I18
  rx960_jump2589:
    jump $I19
  rx960_done2586:
    rx960_cur."!cursor_fail"()
    .return (rx960_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_158_1349901750.327_caps" :subid("cuid_memo_251_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["variable"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_158_1349901750.327_nfa" :subid("cuid_memo_252_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "$"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<{ }>" :subid("cuid_159_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1227
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx963_tgt
    .local int rx963_pos
    .local int rx963_off
    .local int rx963_eos
    .local int rx963_rep
    .local pmc rx963_cur
    .local pmc rx963_curclass
    .local pmc rx963_bstack
    .local pmc rx963_cstack
    (rx963_cur, rx963_tgt, rx963_pos, rx963_curclass, rx963_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx963_cur
    length rx963_eos, rx963_tgt
    eq $I19, 1, rx963_restart2598
    gt rx963_pos, rx963_eos, rx963_fail2599
    repr_get_attr_int $I11, self, rx963_curclass, "$!from"
    ne $I11, -1, rxscan964_done2605
    goto rxscan964_scan2604
  rxscan964_loop2603:
    inc rx963_pos
    gt rx963_pos, rx963_eos, rx963_fail2599
    repr_bind_attr_int rx963_cur, rx963_curclass, "$!from", rx963_pos
  rxscan964_scan2604:
    nqp_rxmark rx963_bstack, rxscan964_loop2603, rx963_pos, 0
  rxscan964_done2605:
    ge rx963_pos, rx963_eos, rx963_fail2599
    substr $S11, rx963_tgt, rx963_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx963_fail2599
    repr_bind_attr_int rx963_cur, rx963_curclass, "$!pos", rx963_pos
    $P11 = rx963_cur."quotemod_check"("c")
    repr_get_attr_int $I11, $P11, rx963_curclass, "$!pos"
    lt $I11, 0, rx963_fail2599
    repr_bind_attr_int rx963_cur, rx963_curclass, "$!pos", rx963_pos
    $P11 = rx963_cur."block"()
    repr_get_attr_int $I11, $P11, rx963_curclass, "$!pos"
    lt $I11, 0, rx963_fail2599
    nqp_rxmark rx963_bstack, rxsubrule965_pass2606, -1, 0
  rxsubrule965_pass2606:
    rx963_cstack = rx963_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx963_pos, $P11, rx963_curclass, "$!pos"
    rx963_cur."!cursor_pass"(rx963_pos, "quote_escape:sym<{ }>", 'backtrack'=>1)
    .return (rx963_cur)
  rx963_restart2598:
    repr_get_attr_obj rx963_cstack, rx963_cur, rx963_curclass, "$!cstack"
  rx963_fail2599:
    unless rx963_bstack, rx963_done2597
    pop $I19, rx963_bstack
    if_null rx963_cstack, rx963_cstack_done2602
    unless rx963_cstack, rx963_cstack_done2602
    dec $I19
    set $P11, rx963_cstack[$I19]
  rx963_cstack_done2602:
    pop rx963_rep, rx963_bstack
    pop rx963_pos, rx963_bstack
    pop $I19, rx963_bstack
    lt rx963_pos, -1, rx963_done2597
    lt rx963_pos, 0, rx963_fail2599
    eq $I19, 0, rx963_fail2599
    nqp_islist $I20, rx963_cstack
    unless $I20, rx963_jump2600
    elements $I18, rx963_bstack
    le $I18, 0, rx963_cut2601
    dec $I18
    set $I18, rx963_bstack[$I18]
  rx963_cut2601:
    assign rx963_cstack, $I18
  rx963_jump2600:
    jump $I19
  rx963_done2597:
    rx963_cur."!cursor_fail"()
    .return (rx963_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_159_1349901750.327_caps" :subid("cuid_memo_253_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["block"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_159_1349901750.327_nfa" :subid("cuid_memo_254_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "{"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<esc>" :subid("cuid_160_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1228
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx966_tgt
    .local int rx966_pos
    .local int rx966_off
    .local int rx966_eos
    .local int rx966_rep
    .local pmc rx966_cur
    .local pmc rx966_curclass
    .local pmc rx966_bstack
    .local pmc rx966_cstack
    (rx966_cur, rx966_tgt, rx966_pos, rx966_curclass, rx966_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx966_cur
    length rx966_eos, rx966_tgt
    eq $I19, 1, rx966_restart2609
    gt rx966_pos, rx966_eos, rx966_fail2610
    repr_get_attr_int $I11, self, rx966_curclass, "$!from"
    ne $I11, -1, rxscan967_done2616
    goto rxscan967_scan2615
  rxscan967_loop2614:
    inc rx966_pos
    gt rx966_pos, rx966_eos, rx966_fail2610
    repr_bind_attr_int rx966_cur, rx966_curclass, "$!from", rx966_pos
  rxscan967_scan2615:
    nqp_rxmark rx966_bstack, rxscan967_loop2614, rx966_pos, 0
  rxscan967_done2616:
    add $I11, rx966_pos, 2
    gt $I11, rx966_eos, rx966_fail2610
    substr $S10, rx966_tgt, rx966_pos, 2
    ne $S10, ucs4:"\\e", rx966_fail2610
    add rx966_pos, 2
    repr_bind_attr_int rx966_cur, rx966_curclass, "$!pos", rx966_pos
    $P11 = rx966_cur."quotemod_check"("b")
    repr_get_attr_int $I11, $P11, rx966_curclass, "$!pos"
    lt $I11, 0, rx966_fail2610
    rx966_cur."!cursor_pass"(rx966_pos, "quote_escape:sym<esc>", 'backtrack'=>1)
    .return (rx966_cur)
  rx966_restart2609:
    repr_get_attr_obj rx966_cstack, rx966_cur, rx966_curclass, "$!cstack"
  rx966_fail2610:
    unless rx966_bstack, rx966_done2608
    pop $I19, rx966_bstack
    if_null rx966_cstack, rx966_cstack_done2613
    unless rx966_cstack, rx966_cstack_done2613
    dec $I19
    set $P11, rx966_cstack[$I19]
  rx966_cstack_done2613:
    pop rx966_rep, rx966_bstack
    pop rx966_pos, rx966_bstack
    pop $I19, rx966_bstack
    lt rx966_pos, -1, rx966_done2608
    lt rx966_pos, 0, rx966_fail2610
    eq $I19, 0, rx966_fail2610
    nqp_islist $I20, rx966_cstack
    unless $I20, rx966_jump2611
    elements $I18, rx966_bstack
    le $I18, 0, rx966_cut2612
    dec $I18
    set $I18, rx966_bstack[$I18]
  rx966_cut2612:
    assign rx966_cstack, $I18
  rx966_jump2611:
    jump $I19
  rx966_done2608:
    rx966_cur."!cursor_fail"()
    .return (rx966_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_160_1349901750.327_caps" :subid("cuid_memo_255_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_160_1349901750.327_nfa" :subid("cuid_memo_256_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 92
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 101
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "quotemod_check"
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 0
    push $P5015, $P5016
    box $P5017, 0
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<( )>" :subid("cuid_161_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1230
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx968_tgt
    .local int rx968_pos
    .local int rx968_off
    .local int rx968_eos
    .local int rx968_rep
    .local pmc rx968_cur
    .local pmc rx968_curclass
    .local pmc rx968_bstack
    .local pmc rx968_cstack
    (rx968_cur, rx968_tgt, rx968_pos, rx968_curclass, rx968_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx968_cur
    length rx968_eos, rx968_tgt
    eq $I19, 1, rx968_restart2619
    gt rx968_pos, rx968_eos, rx968_fail2620
    repr_get_attr_int $I11, self, rx968_curclass, "$!from"
    ne $I11, -1, rxscan969_done2626
    goto rxscan969_scan2625
  rxscan969_loop2624:
    inc rx968_pos
    gt rx968_pos, rx968_eos, rx968_fail2620
    repr_bind_attr_int rx968_cur, rx968_curclass, "$!from", rx968_pos
  rxscan969_scan2625:
    nqp_rxmark rx968_bstack, rxscan969_loop2624, rx968_pos, 0
  rxscan969_done2626:
    add $I11, rx968_pos, 1
    gt $I11, rx968_eos, rx968_fail2620
    substr $S10, rx968_tgt, rx968_pos, 1
    ne $S10, ucs4:"(", rx968_fail2620
    add rx968_pos, 1
    repr_bind_attr_int rx968_cur, rx968_curclass, "$!pos", rx968_pos
    $P11 = rx968_cur."ws"()
    repr_get_attr_int $I11, $P11, rx968_curclass, "$!pos"
    lt $I11, 0, rx968_fail2620
    repr_get_attr_int rx968_pos, $P11, rx968_curclass, "$!pos"
    nqp_rxmark rx968_bstack, rxquantr971_done2629, rx968_pos, 0
  rxquantr971_loop2628:
    repr_bind_attr_int rx968_cur, rx968_curclass, "$!pos", rx968_pos
    $P11 = rx968_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx968_curclass, "$!pos"
    lt $I11, 0, rx968_fail2620
    goto rxsubrule972_pass2630
  rxsubrule972_back2631:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx968_curclass, "$!pos"
    lt $I11, 0, rx968_fail2620
  rxsubrule972_pass2630:
    rx968_cstack = rx968_cur."!cursor_capture"($P11, "EXPR")
    set_addr $I11, rxsubrule972_back2631
    push rx968_bstack, $I11
    push rx968_bstack, 0
    push rx968_bstack, rx968_pos
    elements $I11, rx968_cstack
    push rx968_bstack, $I11
    repr_get_attr_int rx968_pos, $P11, rx968_curclass, "$!pos"
    nqp_rxpeek $I19, rx968_bstack, rxquantr971_done2629
    inc $I19
    inc $I19
    set rx968_rep, rx968_bstack[$I19]
    nqp_rxcommit rx968_bstack, rxquantr971_done2629
    inc rx968_rep
  rxquantr971_done2629:
    add $I11, rx968_pos, 1
    gt $I11, rx968_eos, rx968_fail2620
    substr $S10, rx968_tgt, rx968_pos, 1
    ne $S10, ucs4:")", rx968_fail2620
    add rx968_pos, 1
    rx968_cur."!cursor_pass"(rx968_pos, "circumfix:sym<( )>", 'backtrack'=>1)
    .return (rx968_cur)
  rx968_restart2619:
    repr_get_attr_obj rx968_cstack, rx968_cur, rx968_curclass, "$!cstack"
  rx968_fail2620:
    unless rx968_bstack, rx968_done2618
    pop $I19, rx968_bstack
    if_null rx968_cstack, rx968_cstack_done2623
    unless rx968_cstack, rx968_cstack_done2623
    dec $I19
    set $P11, rx968_cstack[$I19]
  rx968_cstack_done2623:
    pop rx968_rep, rx968_bstack
    pop rx968_pos, rx968_bstack
    pop $I19, rx968_bstack
    lt rx968_pos, -1, rx968_done2618
    lt rx968_pos, 0, rx968_fail2620
    eq $I19, 0, rx968_fail2620
    nqp_islist $I20, rx968_cstack
    unless $I20, rx968_jump2621
    elements $I18, rx968_bstack
    le $I18, 0, rx968_cut2622
    dec $I18
    set $I18, rx968_bstack[$I18]
  rx968_cut2622:
    assign rx968_cstack, $I18
  rx968_jump2621:
    jump $I19
  rx968_done2618:
    rx968_cur."!cursor_fail"()
    .return (rx968_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_161_1349901750.327_caps" :subid("cuid_memo_257_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 2
    set $P5001["EXPR"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_161_1349901750.327_nfa" :subid("cuid_memo_258_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 40
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "ws"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "EXPR"
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    box $P5015, 1
    push $P5011, $P5015
    box $P5016, 0
    push $P5011, $P5016
    box $P5017, 4
    push $P5011, $P5017
    push $P5001, $P5011
    new $P5018, 'ResizablePMCArray'
    box $P5019, 2
    push $P5018, $P5019
    box $P5020, 41
    push $P5018, $P5020
    box $P5021, 0
    push $P5018, $P5021
    push $P5001, $P5018
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<[ ]>" :subid("cuid_162_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1231
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx973_tgt
    .local int rx973_pos
    .local int rx973_off
    .local int rx973_eos
    .local int rx973_rep
    .local pmc rx973_cur
    .local pmc rx973_curclass
    .local pmc rx973_bstack
    .local pmc rx973_cstack
    (rx973_cur, rx973_tgt, rx973_pos, rx973_curclass, rx973_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx973_cur
    length rx973_eos, rx973_tgt
    eq $I19, 1, rx973_restart2634
    gt rx973_pos, rx973_eos, rx973_fail2635
    repr_get_attr_int $I11, self, rx973_curclass, "$!from"
    ne $I11, -1, rxscan974_done2641
    goto rxscan974_scan2640
  rxscan974_loop2639:
    inc rx973_pos
    gt rx973_pos, rx973_eos, rx973_fail2635
    repr_bind_attr_int rx973_cur, rx973_curclass, "$!from", rx973_pos
  rxscan974_scan2640:
    nqp_rxmark rx973_bstack, rxscan974_loop2639, rx973_pos, 0
  rxscan974_done2641:
    add $I11, rx973_pos, 1
    gt $I11, rx973_eos, rx973_fail2635
    substr $S10, rx973_tgt, rx973_pos, 1
    ne $S10, ucs4:"[", rx973_fail2635
    add rx973_pos, 1
    repr_bind_attr_int rx973_cur, rx973_curclass, "$!pos", rx973_pos
    $P11 = rx973_cur."ws"()
    repr_get_attr_int $I11, $P11, rx973_curclass, "$!pos"
    lt $I11, 0, rx973_fail2635
    repr_get_attr_int rx973_pos, $P11, rx973_curclass, "$!pos"
    nqp_rxmark rx973_bstack, rxquantr976_done2644, rx973_pos, 0
  rxquantr976_loop2643:
    repr_bind_attr_int rx973_cur, rx973_curclass, "$!pos", rx973_pos
    $P11 = rx973_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx973_curclass, "$!pos"
    lt $I11, 0, rx973_fail2635
    goto rxsubrule977_pass2645
  rxsubrule977_back2646:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx973_curclass, "$!pos"
    lt $I11, 0, rx973_fail2635
  rxsubrule977_pass2645:
    rx973_cstack = rx973_cur."!cursor_capture"($P11, "EXPR")
    set_addr $I11, rxsubrule977_back2646
    push rx973_bstack, $I11
    push rx973_bstack, 0
    push rx973_bstack, rx973_pos
    elements $I11, rx973_cstack
    push rx973_bstack, $I11
    repr_get_attr_int rx973_pos, $P11, rx973_curclass, "$!pos"
    nqp_rxpeek $I19, rx973_bstack, rxquantr976_done2644
    inc $I19
    inc $I19
    set rx973_rep, rx973_bstack[$I19]
    nqp_rxcommit rx973_bstack, rxquantr976_done2644
    inc rx973_rep
  rxquantr976_done2644:
    add $I11, rx973_pos, 1
    gt $I11, rx973_eos, rx973_fail2635
    substr $S10, rx973_tgt, rx973_pos, 1
    ne $S10, ucs4:"]", rx973_fail2635
    add rx973_pos, 1
    rx973_cur."!cursor_pass"(rx973_pos, "circumfix:sym<[ ]>", 'backtrack'=>1)
    .return (rx973_cur)
  rx973_restart2634:
    repr_get_attr_obj rx973_cstack, rx973_cur, rx973_curclass, "$!cstack"
  rx973_fail2635:
    unless rx973_bstack, rx973_done2633
    pop $I19, rx973_bstack
    if_null rx973_cstack, rx973_cstack_done2638
    unless rx973_cstack, rx973_cstack_done2638
    dec $I19
    set $P11, rx973_cstack[$I19]
  rx973_cstack_done2638:
    pop rx973_rep, rx973_bstack
    pop rx973_pos, rx973_bstack
    pop $I19, rx973_bstack
    lt rx973_pos, -1, rx973_done2633
    lt rx973_pos, 0, rx973_fail2635
    eq $I19, 0, rx973_fail2635
    nqp_islist $I20, rx973_cstack
    unless $I20, rx973_jump2636
    elements $I18, rx973_bstack
    le $I18, 0, rx973_cut2637
    dec $I18
    set $I18, rx973_bstack[$I18]
  rx973_cut2637:
    assign rx973_cstack, $I18
  rx973_jump2636:
    jump $I19
  rx973_done2633:
    rx973_cur."!cursor_fail"()
    .return (rx973_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_162_1349901750.327_caps" :subid("cuid_memo_259_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 2
    set $P5001["EXPR"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_162_1349901750.327_nfa" :subid("cuid_memo_260_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 91
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "ws"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "EXPR"
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    box $P5015, 1
    push $P5011, $P5015
    box $P5016, 0
    push $P5011, $P5016
    box $P5017, 4
    push $P5011, $P5017
    push $P5001, $P5011
    new $P5018, 'ResizablePMCArray'
    box $P5019, 2
    push $P5018, $P5019
    box $P5020, 93
    push $P5018, $P5020
    box $P5021, 0
    push $P5018, $P5021
    push $P5001, $P5018
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<ang>" :subid("cuid_163_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1232
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx978_tgt
    .local int rx978_pos
    .local int rx978_off
    .local int rx978_eos
    .local int rx978_rep
    .local pmc rx978_cur
    .local pmc rx978_curclass
    .local pmc rx978_bstack
    .local pmc rx978_cstack
    (rx978_cur, rx978_tgt, rx978_pos, rx978_curclass, rx978_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx978_cur
    length rx978_eos, rx978_tgt
    eq $I19, 1, rx978_restart2649
    gt rx978_pos, rx978_eos, rx978_fail2650
    repr_get_attr_int $I11, self, rx978_curclass, "$!from"
    ne $I11, -1, rxscan979_done2656
    goto rxscan979_scan2655
  rxscan979_loop2654:
    inc rx978_pos
    gt rx978_pos, rx978_eos, rx978_fail2650
    repr_bind_attr_int rx978_cur, rx978_curclass, "$!from", rx978_pos
  rxscan979_scan2655:
    nqp_rxmark rx978_bstack, rxscan979_loop2654, rx978_pos, 0
  rxscan979_done2656:
    ge rx978_pos, rx978_eos, rx978_fail2650
    substr $S11, rx978_tgt, rx978_pos, 1
    index $I11, ucs4:"<", $S11
    lt $I11, 0, rx978_fail2650
    repr_bind_attr_int rx978_cur, rx978_curclass, "$!pos", rx978_pos
    $P11 = rx978_cur."quote_EXPR"(":q", ":w")
    repr_get_attr_int $I11, $P11, rx978_curclass, "$!pos"
    lt $I11, 0, rx978_fail2650
    nqp_rxmark rx978_bstack, rxsubrule980_pass2657, -1, 0
  rxsubrule980_pass2657:
    rx978_cstack = rx978_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx978_pos, $P11, rx978_curclass, "$!pos"
    rx978_cur."!cursor_pass"(rx978_pos, "circumfix:sym<ang>", 'backtrack'=>1)
    .return (rx978_cur)
  rx978_restart2649:
    repr_get_attr_obj rx978_cstack, rx978_cur, rx978_curclass, "$!cstack"
  rx978_fail2650:
    unless rx978_bstack, rx978_done2648
    pop $I19, rx978_bstack
    if_null rx978_cstack, rx978_cstack_done2653
    unless rx978_cstack, rx978_cstack_done2653
    dec $I19
    set $P11, rx978_cstack[$I19]
  rx978_cstack_done2653:
    pop rx978_rep, rx978_bstack
    pop rx978_pos, rx978_bstack
    pop $I19, rx978_bstack
    lt rx978_pos, -1, rx978_done2648
    lt rx978_pos, 0, rx978_fail2650
    eq $I19, 0, rx978_fail2650
    nqp_islist $I20, rx978_cstack
    unless $I20, rx978_jump2651
    elements $I18, rx978_bstack
    le $I18, 0, rx978_cut2652
    dec $I18
    set $I18, rx978_bstack[$I18]
  rx978_cut2652:
    assign rx978_cstack, $I18
  rx978_jump2651:
    jump $I19
  rx978_done2648:
    rx978_cur."!cursor_fail"()
    .return (rx978_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_163_1349901750.327_caps" :subid("cuid_memo_261_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["quote_EXPR"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_163_1349901750.327_nfa" :subid("cuid_memo_262_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "<"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub utf8:"circumfix:sym<\x{ab} \x{bb}>" :subid("cuid_164_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1233
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx981_tgt
    .local int rx981_pos
    .local int rx981_off
    .local int rx981_eos
    .local int rx981_rep
    .local pmc rx981_cur
    .local pmc rx981_curclass
    .local pmc rx981_bstack
    .local pmc rx981_cstack
    (rx981_cur, rx981_tgt, rx981_pos, rx981_curclass, rx981_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx981_cur
    length rx981_eos, rx981_tgt
    eq $I19, 1, rx981_restart2660
    gt rx981_pos, rx981_eos, rx981_fail2661
    repr_get_attr_int $I11, self, rx981_curclass, "$!from"
    ne $I11, -1, rxscan982_done2667
    goto rxscan982_scan2666
  rxscan982_loop2665:
    inc rx981_pos
    gt rx981_pos, rx981_eos, rx981_fail2661
    repr_bind_attr_int rx981_cur, rx981_curclass, "$!from", rx981_pos
  rxscan982_scan2666:
    nqp_rxmark rx981_bstack, rxscan982_loop2665, rx981_pos, 0
  rxscan982_done2667:
    ge rx981_pos, rx981_eos, rx981_fail2661
    substr $S11, rx981_tgt, rx981_pos, 1
    index $I11, ucs4:"\x{ab}", $S11
    lt $I11, 0, rx981_fail2661
    repr_bind_attr_int rx981_cur, rx981_curclass, "$!pos", rx981_pos
    $P11 = rx981_cur."quote_EXPR"(":qq", ":w")
    repr_get_attr_int $I11, $P11, rx981_curclass, "$!pos"
    lt $I11, 0, rx981_fail2661
    nqp_rxmark rx981_bstack, rxsubrule983_pass2668, -1, 0
  rxsubrule983_pass2668:
    rx981_cstack = rx981_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx981_pos, $P11, rx981_curclass, "$!pos"
    rx981_cur."!cursor_pass"(rx981_pos, utf8:"circumfix:sym<\x{ab} \x{bb}>", 'backtrack'=>1)
    .return (rx981_cur)
  rx981_restart2660:
    repr_get_attr_obj rx981_cstack, rx981_cur, rx981_curclass, "$!cstack"
  rx981_fail2661:
    unless rx981_bstack, rx981_done2659
    pop $I19, rx981_bstack
    if_null rx981_cstack, rx981_cstack_done2664
    unless rx981_cstack, rx981_cstack_done2664
    dec $I19
    set $P11, rx981_cstack[$I19]
  rx981_cstack_done2664:
    pop rx981_rep, rx981_bstack
    pop rx981_pos, rx981_bstack
    pop $I19, rx981_bstack
    lt rx981_pos, -1, rx981_done2659
    lt rx981_pos, 0, rx981_fail2661
    eq $I19, 0, rx981_fail2661
    nqp_islist $I20, rx981_cstack
    unless $I20, rx981_jump2662
    elements $I18, rx981_bstack
    le $I18, 0, rx981_cut2663
    dec $I18
    set $I18, rx981_bstack[$I18]
  rx981_cut2663:
    assign rx981_cstack, $I18
  rx981_jump2662:
    jump $I19
  rx981_done2659:
    rx981_cur."!cursor_fail"()
    .return (rx981_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_164_1349901750.327_caps" :subid("cuid_memo_263_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["quote_EXPR"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_164_1349901750.327_nfa" :subid("cuid_memo_264_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, utf8:"\x{ab}"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<{ }>" :subid("cuid_165_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1234
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx984_tgt
    .local int rx984_pos
    .local int rx984_off
    .local int rx984_eos
    .local int rx984_rep
    .local pmc rx984_cur
    .local pmc rx984_curclass
    .local pmc rx984_bstack
    .local pmc rx984_cstack
    (rx984_cur, rx984_tgt, rx984_pos, rx984_curclass, rx984_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx984_cur
    length rx984_eos, rx984_tgt
    eq $I19, 1, rx984_restart2671
    gt rx984_pos, rx984_eos, rx984_fail2672
    repr_get_attr_int $I11, self, rx984_curclass, "$!from"
    ne $I11, -1, rxscan985_done2678
    goto rxscan985_scan2677
  rxscan985_loop2676:
    inc rx984_pos
    gt rx984_pos, rx984_eos, rx984_fail2672
    repr_bind_attr_int rx984_cur, rx984_curclass, "$!from", rx984_pos
  rxscan985_scan2677:
    nqp_rxmark rx984_bstack, rxscan985_loop2676, rx984_pos, 0
  rxscan985_done2678:
    ge rx984_pos, rx984_eos, rx984_fail2672
    substr $S11, rx984_tgt, rx984_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx984_fail2672
    repr_bind_attr_int rx984_cur, rx984_curclass, "$!pos", rx984_pos
    $P11 = rx984_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx984_curclass, "$!pos"
    lt $I11, 0, rx984_fail2672
    nqp_rxmark rx984_bstack, rxsubrule986_pass2679, -1, 0
  rxsubrule986_pass2679:
    rx984_cstack = rx984_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx984_pos, $P11, rx984_curclass, "$!pos"
    rx984_cur."!cursor_pass"(rx984_pos, "circumfix:sym<{ }>", 'backtrack'=>1)
    .return (rx984_cur)
  rx984_restart2671:
    repr_get_attr_obj rx984_cstack, rx984_cur, rx984_curclass, "$!cstack"
  rx984_fail2672:
    unless rx984_bstack, rx984_done2670
    pop $I19, rx984_bstack
    if_null rx984_cstack, rx984_cstack_done2675
    unless rx984_cstack, rx984_cstack_done2675
    dec $I19
    set $P11, rx984_cstack[$I19]
  rx984_cstack_done2675:
    pop rx984_rep, rx984_bstack
    pop rx984_pos, rx984_bstack
    pop $I19, rx984_bstack
    lt rx984_pos, -1, rx984_done2670
    lt rx984_pos, 0, rx984_fail2672
    eq $I19, 0, rx984_fail2672
    nqp_islist $I20, rx984_cstack
    unless $I20, rx984_jump2673
    elements $I18, rx984_bstack
    le $I18, 0, rx984_cut2674
    dec $I18
    set $I18, rx984_bstack[$I18]
  rx984_cut2674:
    assign rx984_cstack, $I18
  rx984_jump2673:
    jump $I19
  rx984_done2670:
    rx984_cur."!cursor_fail"()
    .return (rx984_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_165_1349901750.327_caps" :subid("cuid_memo_265_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["pblock"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_165_1349901750.327_nfa" :subid("cuid_memo_266_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "{"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<sigil>" :subid("cuid_166_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1235
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx987_tgt
    .local int rx987_pos
    .local int rx987_off
    .local int rx987_eos
    .local int rx987_rep
    .local pmc rx987_cur
    .local pmc rx987_curclass
    .local pmc rx987_bstack
    .local pmc rx987_cstack
    (rx987_cur, rx987_tgt, rx987_pos, rx987_curclass, rx987_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx987_cur
    length rx987_eos, rx987_tgt
    eq $I19, 1, rx987_restart2682
    gt rx987_pos, rx987_eos, rx987_fail2683
    repr_get_attr_int $I11, self, rx987_curclass, "$!from"
    ne $I11, -1, rxscan988_done2689
    goto rxscan988_scan2688
  rxscan988_loop2687:
    inc rx987_pos
    gt rx987_pos, rx987_eos, rx987_fail2683
    repr_bind_attr_int rx987_cur, rx987_curclass, "$!from", rx987_pos
  rxscan988_scan2688:
    nqp_rxmark rx987_bstack, rxscan988_loop2687, rx987_pos, 0
  rxscan988_done2689:
    repr_bind_attr_int rx987_cur, rx987_curclass, "$!pos", rx987_pos
    $P11 = rx987_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx987_curclass, "$!pos"
    lt $I11, 0, rx987_fail2683
    nqp_rxmark rx987_bstack, rxsubrule989_pass2690, -1, 0
  rxsubrule989_pass2690:
    rx987_cstack = rx987_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx987_pos, $P11, rx987_curclass, "$!pos"
    add $I11, rx987_pos, 1
    gt $I11, rx987_eos, rx987_fail2683
    substr $S10, rx987_tgt, rx987_pos, 1
    ne $S10, ucs4:"(", rx987_fail2683
    add rx987_pos, 1
    repr_bind_attr_int rx987_cur, rx987_curclass, "$!pos", rx987_pos
    $P11 = rx987_cur."semilist"()
    repr_get_attr_int $I11, $P11, rx987_curclass, "$!pos"
    lt $I11, 0, rx987_fail2683
    nqp_rxmark rx987_bstack, rxsubrule990_pass2691, -1, 0
  rxsubrule990_pass2691:
    rx987_cstack = rx987_cur."!cursor_capture"($P11, "semilist")
    repr_get_attr_int rx987_pos, $P11, rx987_curclass, "$!pos"
  alt991_02693:
    nqp_rxmark rx987_bstack, alt991_12694, rx987_pos, 0
    add $I11, rx987_pos, 1
    gt $I11, rx987_eos, rx987_fail2683
    substr $S10, rx987_tgt, rx987_pos, 1
    ne $S10, ucs4:")", rx987_fail2683
    add rx987_pos, 1
    goto alt991_end2692
  alt991_12694:
    repr_bind_attr_int rx987_cur, rx987_curclass, "$!pos", rx987_pos
    $P11 = rx987_cur."FAILGOAL"("')'")
    repr_get_attr_int $I11, $P11, rx987_curclass, "$!pos"
    lt $I11, 0, rx987_fail2683
    goto rxsubrule992_pass2695
  rxsubrule992_back2696:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx987_curclass, "$!pos"
    lt $I11, 0, rx987_fail2683
  rxsubrule992_pass2695:
    rx987_cstack = rx987_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule992_back2696
    push rx987_bstack, $I11
    push rx987_bstack, 0
    push rx987_bstack, rx987_pos
    elements $I11, rx987_cstack
    push rx987_bstack, $I11
    repr_get_attr_int rx987_pos, $P11, rx987_curclass, "$!pos"
  alt991_end2692:
    rx987_cur."!cursor_pass"(rx987_pos, "circumfix:sym<sigil>", 'backtrack'=>1)
    .return (rx987_cur)
  rx987_restart2682:
    repr_get_attr_obj rx987_cstack, rx987_cur, rx987_curclass, "$!cstack"
  rx987_fail2683:
    unless rx987_bstack, rx987_done2681
    pop $I19, rx987_bstack
    if_null rx987_cstack, rx987_cstack_done2686
    unless rx987_cstack, rx987_cstack_done2686
    dec $I19
    set $P11, rx987_cstack[$I19]
  rx987_cstack_done2686:
    pop rx987_rep, rx987_bstack
    pop rx987_pos, rx987_bstack
    pop $I19, rx987_bstack
    lt rx987_pos, -1, rx987_done2681
    lt rx987_pos, 0, rx987_fail2683
    eq $I19, 0, rx987_fail2683
    nqp_islist $I20, rx987_cstack
    unless $I20, rx987_jump2684
    elements $I18, rx987_bstack
    le $I18, 0, rx987_cut2685
    dec $I18
    set $I18, rx987_bstack[$I18]
  rx987_cut2685:
    assign rx987_cstack, $I18
  rx987_jump2684:
    jump $I19
  rx987_done2681:
    rx987_cur."!cursor_fail"()
    .return (rx987_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_166_1349901750.327_caps" :subid("cuid_memo_267_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sigil"], $P5002
    box $P5003, 0
    set $P5001["semilist"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_166_1349901750.327_nfa" :subid("cuid_memo_268_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "sigil"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 40
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "semilist"
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 0
    push $P5015, $P5016
    box $P5017, 0
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "semilist" :subid("cuid_167_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1237
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx993_tgt
    .local int rx993_pos
    .local int rx993_off
    .local int rx993_eos
    .local int rx993_rep
    .local pmc rx993_cur
    .local pmc rx993_curclass
    .local pmc rx993_bstack
    .local pmc rx993_cstack
    (rx993_cur, rx993_tgt, rx993_pos, rx993_curclass, rx993_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx993_cur
    length rx993_eos, rx993_tgt
    eq $I19, 1, rx993_restart2699
    gt rx993_pos, rx993_eos, rx993_fail2700
    repr_get_attr_int $I11, self, rx993_curclass, "$!from"
    ne $I11, -1, rxscan994_done2706
    goto rxscan994_scan2705
  rxscan994_loop2704:
    inc rx993_pos
    gt rx993_pos, rx993_eos, rx993_fail2700
    repr_bind_attr_int rx993_cur, rx993_curclass, "$!from", rx993_pos
  rxscan994_scan2705:
    nqp_rxmark rx993_bstack, rxscan994_loop2704, rx993_pos, 0
  rxscan994_done2706:
    repr_bind_attr_int rx993_cur, rx993_curclass, "$!pos", rx993_pos
    $P11 = rx993_cur."ws"()
    repr_get_attr_int $I11, $P11, rx993_curclass, "$!pos"
    lt $I11, 0, rx993_fail2700
    repr_get_attr_int rx993_pos, $P11, rx993_curclass, "$!pos"
    repr_bind_attr_int rx993_cur, rx993_curclass, "$!pos", rx993_pos
    $P11 = rx993_cur."statement"()
    repr_get_attr_int $I11, $P11, rx993_curclass, "$!pos"
    lt $I11, 0, rx993_fail2700
    nqp_rxmark rx993_bstack, rxsubrule996_pass2708, -1, 0
  rxsubrule996_pass2708:
    rx993_cstack = rx993_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx993_pos, $P11, rx993_curclass, "$!pos"
    repr_bind_attr_int rx993_cur, rx993_curclass, "$!pos", rx993_pos
    $P11 = rx993_cur."ws"()
    repr_get_attr_int $I11, $P11, rx993_curclass, "$!pos"
    lt $I11, 0, rx993_fail2700
    repr_get_attr_int rx993_pos, $P11, rx993_curclass, "$!pos"
    rx993_cur."!cursor_pass"(rx993_pos, "semilist", 'backtrack'=>1)
    .return (rx993_cur)
  rx993_restart2699:
    repr_get_attr_obj rx993_cstack, rx993_cur, rx993_curclass, "$!cstack"
  rx993_fail2700:
    unless rx993_bstack, rx993_done2698
    pop $I19, rx993_bstack
    if_null rx993_cstack, rx993_cstack_done2703
    unless rx993_cstack, rx993_cstack_done2703
    dec $I19
    set $P11, rx993_cstack[$I19]
  rx993_cstack_done2703:
    pop rx993_rep, rx993_bstack
    pop rx993_pos, rx993_bstack
    pop $I19, rx993_bstack
    lt rx993_pos, -1, rx993_done2698
    lt rx993_pos, 0, rx993_fail2700
    eq $I19, 0, rx993_fail2700
    nqp_islist $I20, rx993_cstack
    unless $I20, rx993_jump2701
    elements $I18, rx993_bstack
    le $I18, 0, rx993_cut2702
    dec $I18
    set $I18, rx993_bstack[$I18]
  rx993_cut2702:
    assign rx993_cstack, $I18
  rx993_jump2701:
    jump $I19
  rx993_done2698:
    rx993_cur."!cursor_fail"()
    .return (rx993_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_167_1349901750.327_caps" :subid("cuid_memo_269_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["statement"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infixish" :subid("cuid_168_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1260
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx998_tgt
    .local int rx998_pos
    .local int rx998_off
    .local int rx998_eos
    .local int rx998_rep
    .local pmc rx998_cur
    .local pmc rx998_curclass
    .local pmc rx998_bstack
    .local pmc rx998_cstack
    (rx998_cur, rx998_tgt, rx998_pos, rx998_curclass, rx998_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx998_cur
    length rx998_eos, rx998_tgt
    eq $I19, 1, rx998_restart2712
    gt rx998_pos, rx998_eos, rx998_fail2713
    repr_get_attr_int $I11, self, rx998_curclass, "$!from"
    ne $I11, -1, rxscan999_done2719
    goto rxscan999_scan2718
  rxscan999_loop2717:
    inc rx998_pos
    gt rx998_pos, rx998_eos, rx998_fail2713
    repr_bind_attr_int rx998_cur, rx998_curclass, "$!from", rx998_pos
  rxscan999_scan2718:
    nqp_rxmark rx998_bstack, rxscan999_loop2717, rx998_pos, 0
  rxscan999_done2719:
    repr_bind_attr_int rx998_cur, rx998_curclass, "$!pos", rx998_pos
    $P11 = rx998_cur."infixstopper"()
    repr_get_attr_int $I11, $P11, rx998_curclass, "$!pos"
    ge $I11, 0, rx998_fail2713
    repr_bind_attr_int rx998_cur, rx998_curclass, "$!pos", rx998_pos
    $P11 = rx998_cur."infix"()
    repr_get_attr_int $I11, $P11, rx998_curclass, "$!pos"
    lt $I11, 0, rx998_fail2713
    nqp_rxmark rx998_bstack, rxsubrule1000_pass2720, -1, 0
  rxsubrule1000_pass2720:
    rx998_cstack = rx998_cur."!cursor_capture"($P11, "OPER=infix")
    repr_get_attr_int rx998_pos, $P11, rx998_curclass, "$!pos"
    rx998_cur."!cursor_pass"(rx998_pos, "infixish", 'backtrack'=>1)
    .return (rx998_cur)
  rx998_restart2712:
    repr_get_attr_obj rx998_cstack, rx998_cur, rx998_curclass, "$!cstack"
  rx998_fail2713:
    unless rx998_bstack, rx998_done2711
    pop $I19, rx998_bstack
    if_null rx998_cstack, rx998_cstack_done2716
    unless rx998_cstack, rx998_cstack_done2716
    dec $I19
    set $P11, rx998_cstack[$I19]
  rx998_cstack_done2716:
    pop rx998_rep, rx998_bstack
    pop rx998_pos, rx998_bstack
    pop $I19, rx998_bstack
    lt rx998_pos, -1, rx998_done2711
    lt rx998_pos, 0, rx998_fail2713
    eq $I19, 0, rx998_fail2713
    nqp_islist $I20, rx998_cstack
    unless $I20, rx998_jump2714
    elements $I18, rx998_bstack
    le $I18, 0, rx998_cut2715
    dec $I18
    set $I18, rx998_bstack[$I18]
  rx998_cut2715:
    assign rx998_cstack, $I18
  rx998_jump2714:
    jump $I19
  rx998_done2711:
    rx998_cur."!cursor_fail"()
    .return (rx998_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_168_1349901750.327_caps" :subid("cuid_memo_270_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["OPER"], $P5002
    box $P5003, 0
    set $P5001["infix"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infixstopper" :subid("cuid_169_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1261
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1001_tgt
    .local int rx1001_pos
    .local int rx1001_off
    .local int rx1001_eos
    .local int rx1001_rep
    .local pmc rx1001_cur
    .local pmc rx1001_curclass
    .local pmc rx1001_bstack
    .local pmc rx1001_cstack
    (rx1001_cur, rx1001_tgt, rx1001_pos, rx1001_curclass, rx1001_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1001_cur
    length rx1001_eos, rx1001_tgt
    eq $I19, 1, rx1001_restart2723
    gt rx1001_pos, rx1001_eos, rx1001_fail2724
    repr_get_attr_int $I11, self, rx1001_curclass, "$!from"
    ne $I11, -1, rxscan1002_done2730
    goto rxscan1002_scan2729
  rxscan1002_loop2728:
    inc rx1001_pos
    gt rx1001_pos, rx1001_eos, rx1001_fail2724
    repr_bind_attr_int rx1001_cur, rx1001_curclass, "$!from", rx1001_pos
  rxscan1002_scan2729:
    nqp_rxmark rx1001_bstack, rxscan1002_loop2728, rx1001_pos, 0
  rxscan1002_done2730:
    repr_bind_attr_int rx1001_cur, rx1001_curclass, "$!pos", rx1001_pos
    $P11 = rx1001_cur."lambda"()
    repr_get_attr_int $I11, $P11, rx1001_curclass, "$!pos"
    lt $I11, 0, rx1001_fail2724
    rx1001_cur."!cursor_pass"(rx1001_pos, "infixstopper", 'backtrack'=>1)
    .return (rx1001_cur)
  rx1001_restart2723:
    repr_get_attr_obj rx1001_cstack, rx1001_cur, rx1001_curclass, "$!cstack"
  rx1001_fail2724:
    unless rx1001_bstack, rx1001_done2722
    pop $I19, rx1001_bstack
    if_null rx1001_cstack, rx1001_cstack_done2727
    unless rx1001_cstack, rx1001_cstack_done2727
    dec $I19
    set $P11, rx1001_cstack[$I19]
  rx1001_cstack_done2727:
    pop rx1001_rep, rx1001_bstack
    pop rx1001_pos, rx1001_bstack
    pop $I19, rx1001_bstack
    lt rx1001_pos, -1, rx1001_done2722
    lt rx1001_pos, 0, rx1001_fail2724
    eq $I19, 0, rx1001_fail2724
    nqp_islist $I20, rx1001_cstack
    unless $I20, rx1001_jump2725
    elements $I18, rx1001_bstack
    le $I18, 0, rx1001_cut2726
    dec $I18
    set $I18, rx1001_bstack[$I18]
  rx1001_cut2726:
    assign rx1001_cstack, $I18
  rx1001_jump2725:
    jump $I19
  rx1001_done2722:
    rx1001_cur."!cursor_fail"()
    .return (rx1001_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_169_1349901750.327_caps" :subid("cuid_memo_271_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_169_1349901750.327_nfa" :subid("cuid_memo_272_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "lambda"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<[ ]>" :subid("cuid_170_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1263
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1003_tgt
    .local int rx1003_pos
    .local int rx1003_off
    .local int rx1003_eos
    .local int rx1003_rep
    .local pmc rx1003_cur
    .local pmc rx1003_curclass
    .local pmc rx1003_bstack
    .local pmc rx1003_cstack
    (rx1003_cur, rx1003_tgt, rx1003_pos, rx1003_curclass, rx1003_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1003_cur
    length rx1003_eos, rx1003_tgt
    eq $I19, 1, rx1003_restart2733
    gt rx1003_pos, rx1003_eos, rx1003_fail2734
    repr_get_attr_int $I11, self, rx1003_curclass, "$!from"
    ne $I11, -1, rxscan1004_done2740
    goto rxscan1004_scan2739
  rxscan1004_loop2738:
    inc rx1003_pos
    gt rx1003_pos, rx1003_eos, rx1003_fail2734
    repr_bind_attr_int rx1003_cur, rx1003_curclass, "$!from", rx1003_pos
  rxscan1004_scan2739:
    nqp_rxmark rx1003_bstack, rxscan1004_loop2738, rx1003_pos, 0
  rxscan1004_done2740:
    add $I11, rx1003_pos, 1
    gt $I11, rx1003_eos, rx1003_fail2734
    substr $S10, rx1003_tgt, rx1003_pos, 1
    ne $S10, ucs4:"[", rx1003_fail2734
    add rx1003_pos, 1
    repr_bind_attr_int rx1003_cur, rx1003_curclass, "$!pos", rx1003_pos
    $P11 = rx1003_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1003_curclass, "$!pos"
    lt $I11, 0, rx1003_fail2734
    repr_get_attr_int rx1003_pos, $P11, rx1003_curclass, "$!pos"
    repr_bind_attr_int rx1003_cur, rx1003_curclass, "$!pos", rx1003_pos
    $P11 = rx1003_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx1003_curclass, "$!pos"
    lt $I11, 0, rx1003_fail2734
    nqp_rxmark rx1003_bstack, rxsubrule1006_pass2742, -1, 0
  rxsubrule1006_pass2742:
    rx1003_cstack = rx1003_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx1003_pos, $P11, rx1003_curclass, "$!pos"
    add $I11, rx1003_pos, 1
    gt $I11, rx1003_eos, rx1003_fail2734
    substr $S10, rx1003_tgt, rx1003_pos, 1
    ne $S10, ucs4:"]", rx1003_fail2734
    add rx1003_pos, 1
    repr_bind_attr_int rx1003_cur, rx1003_curclass, "$!pos", rx1003_pos
    $P11 = rx1003_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1003_curclass, "$!pos"
    lt $I11, 0, rx1003_fail2734
    nqp_rxmark rx1003_bstack, rxsubrule1007_pass2743, -1, 0
  rxsubrule1007_pass2743:
    rx1003_cstack = rx1003_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1003_pos, $P11, rx1003_curclass, "$!pos"
    rx1003_cur."!cursor_pass"(rx1003_pos, "postcircumfix:sym<[ ]>", 'backtrack'=>1)
    .return (rx1003_cur)
  rx1003_restart2733:
    repr_get_attr_obj rx1003_cstack, rx1003_cur, rx1003_curclass, "$!cstack"
  rx1003_fail2734:
    unless rx1003_bstack, rx1003_done2732
    pop $I19, rx1003_bstack
    if_null rx1003_cstack, rx1003_cstack_done2737
    unless rx1003_cstack, rx1003_cstack_done2737
    dec $I19
    set $P11, rx1003_cstack[$I19]
  rx1003_cstack_done2737:
    pop rx1003_rep, rx1003_bstack
    pop rx1003_pos, rx1003_bstack
    pop $I19, rx1003_bstack
    lt rx1003_pos, -1, rx1003_done2732
    lt rx1003_pos, 0, rx1003_fail2734
    eq $I19, 0, rx1003_fail2734
    nqp_islist $I20, rx1003_cstack
    unless $I20, rx1003_jump2735
    elements $I18, rx1003_bstack
    le $I18, 0, rx1003_cut2736
    dec $I18
    set $I18, rx1003_bstack[$I18]
  rx1003_cut2736:
    assign rx1003_cstack, $I18
  rx1003_jump2735:
    jump $I19
  rx1003_done2732:
    rx1003_cur."!cursor_fail"()
    .return (rx1003_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_170_1349901750.327_caps" :subid("cuid_memo_273_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["EXPR"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_170_1349901750.327_nfa" :subid("cuid_memo_274_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 91
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "ws"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "EXPR"
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 93
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 8
    push $P5019, $P5020
    box $P5021, "O"
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<{ }>" :subid("cuid_171_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1268
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1008_tgt
    .local int rx1008_pos
    .local int rx1008_off
    .local int rx1008_eos
    .local int rx1008_rep
    .local pmc rx1008_cur
    .local pmc rx1008_curclass
    .local pmc rx1008_bstack
    .local pmc rx1008_cstack
    (rx1008_cur, rx1008_tgt, rx1008_pos, rx1008_curclass, rx1008_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1008_cur
    length rx1008_eos, rx1008_tgt
    eq $I19, 1, rx1008_restart2746
    gt rx1008_pos, rx1008_eos, rx1008_fail2747
    repr_get_attr_int $I11, self, rx1008_curclass, "$!from"
    ne $I11, -1, rxscan1009_done2753
    goto rxscan1009_scan2752
  rxscan1009_loop2751:
    inc rx1008_pos
    gt rx1008_pos, rx1008_eos, rx1008_fail2747
    repr_bind_attr_int rx1008_cur, rx1008_curclass, "$!from", rx1008_pos
  rxscan1009_scan2752:
    nqp_rxmark rx1008_bstack, rxscan1009_loop2751, rx1008_pos, 0
  rxscan1009_done2753:
    add $I11, rx1008_pos, 1
    gt $I11, rx1008_eos, rx1008_fail2747
    substr $S10, rx1008_tgt, rx1008_pos, 1
    ne $S10, ucs4:"{", rx1008_fail2747
    add rx1008_pos, 1
    repr_bind_attr_int rx1008_cur, rx1008_curclass, "$!pos", rx1008_pos
    $P11 = rx1008_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1008_curclass, "$!pos"
    lt $I11, 0, rx1008_fail2747
    repr_get_attr_int rx1008_pos, $P11, rx1008_curclass, "$!pos"
    repr_bind_attr_int rx1008_cur, rx1008_curclass, "$!pos", rx1008_pos
    $P11 = rx1008_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx1008_curclass, "$!pos"
    lt $I11, 0, rx1008_fail2747
    nqp_rxmark rx1008_bstack, rxsubrule1011_pass2755, -1, 0
  rxsubrule1011_pass2755:
    rx1008_cstack = rx1008_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx1008_pos, $P11, rx1008_curclass, "$!pos"
    add $I11, rx1008_pos, 1
    gt $I11, rx1008_eos, rx1008_fail2747
    substr $S10, rx1008_tgt, rx1008_pos, 1
    ne $S10, ucs4:"}", rx1008_fail2747
    add rx1008_pos, 1
    repr_bind_attr_int rx1008_cur, rx1008_curclass, "$!pos", rx1008_pos
    $P11 = rx1008_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1008_curclass, "$!pos"
    lt $I11, 0, rx1008_fail2747
    nqp_rxmark rx1008_bstack, rxsubrule1012_pass2756, -1, 0
  rxsubrule1012_pass2756:
    rx1008_cstack = rx1008_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1008_pos, $P11, rx1008_curclass, "$!pos"
    rx1008_cur."!cursor_pass"(rx1008_pos, "postcircumfix:sym<{ }>", 'backtrack'=>1)
    .return (rx1008_cur)
  rx1008_restart2746:
    repr_get_attr_obj rx1008_cstack, rx1008_cur, rx1008_curclass, "$!cstack"
  rx1008_fail2747:
    unless rx1008_bstack, rx1008_done2745
    pop $I19, rx1008_bstack
    if_null rx1008_cstack, rx1008_cstack_done2750
    unless rx1008_cstack, rx1008_cstack_done2750
    dec $I19
    set $P11, rx1008_cstack[$I19]
  rx1008_cstack_done2750:
    pop rx1008_rep, rx1008_bstack
    pop rx1008_pos, rx1008_bstack
    pop $I19, rx1008_bstack
    lt rx1008_pos, -1, rx1008_done2745
    lt rx1008_pos, 0, rx1008_fail2747
    eq $I19, 0, rx1008_fail2747
    nqp_islist $I20, rx1008_cstack
    unless $I20, rx1008_jump2748
    elements $I18, rx1008_bstack
    le $I18, 0, rx1008_cut2749
    dec $I18
    set $I18, rx1008_bstack[$I18]
  rx1008_cut2749:
    assign rx1008_cstack, $I18
  rx1008_jump2748:
    jump $I19
  rx1008_done2745:
    rx1008_cur."!cursor_fail"()
    .return (rx1008_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_171_1349901750.327_caps" :subid("cuid_memo_275_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["EXPR"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_171_1349901750.327_nfa" :subid("cuid_memo_276_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 123
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "ws"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "EXPR"
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 125
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 8
    push $P5019, $P5020
    box $P5021, "O"
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<ang>" :subid("cuid_172_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1273
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1013_tgt
    .local int rx1013_pos
    .local int rx1013_off
    .local int rx1013_eos
    .local int rx1013_rep
    .local pmc rx1013_cur
    .local pmc rx1013_curclass
    .local pmc rx1013_bstack
    .local pmc rx1013_cstack
    (rx1013_cur, rx1013_tgt, rx1013_pos, rx1013_curclass, rx1013_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1013_cur
    length rx1013_eos, rx1013_tgt
    eq $I19, 1, rx1013_restart2759
    gt rx1013_pos, rx1013_eos, rx1013_fail2760
    repr_get_attr_int $I11, self, rx1013_curclass, "$!from"
    ne $I11, -1, rxscan1014_done2766
    goto rxscan1014_scan2765
  rxscan1014_loop2764:
    inc rx1013_pos
    gt rx1013_pos, rx1013_eos, rx1013_fail2760
    repr_bind_attr_int rx1013_cur, rx1013_curclass, "$!from", rx1013_pos
  rxscan1014_scan2765:
    nqp_rxmark rx1013_bstack, rxscan1014_loop2764, rx1013_pos, 0
  rxscan1014_done2766:
    ge rx1013_pos, rx1013_eos, rx1013_fail2760
    substr $S11, rx1013_tgt, rx1013_pos, 1
    index $I11, ucs4:"<", $S11
    lt $I11, 0, rx1013_fail2760
    repr_bind_attr_int rx1013_cur, rx1013_curclass, "$!pos", rx1013_pos
    $P11 = rx1013_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx1013_curclass, "$!pos"
    lt $I11, 0, rx1013_fail2760
    nqp_rxmark rx1013_bstack, rxsubrule1015_pass2767, -1, 0
  rxsubrule1015_pass2767:
    rx1013_cstack = rx1013_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1013_pos, $P11, rx1013_curclass, "$!pos"
    repr_bind_attr_int rx1013_cur, rx1013_curclass, "$!pos", rx1013_pos
    $P11 = rx1013_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1013_curclass, "$!pos"
    lt $I11, 0, rx1013_fail2760
    nqp_rxmark rx1013_bstack, rxsubrule1016_pass2768, -1, 0
  rxsubrule1016_pass2768:
    rx1013_cstack = rx1013_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1013_pos, $P11, rx1013_curclass, "$!pos"
    rx1013_cur."!cursor_pass"(rx1013_pos, "postcircumfix:sym<ang>", 'backtrack'=>1)
    .return (rx1013_cur)
  rx1013_restart2759:
    repr_get_attr_obj rx1013_cstack, rx1013_cur, rx1013_curclass, "$!cstack"
  rx1013_fail2760:
    unless rx1013_bstack, rx1013_done2758
    pop $I19, rx1013_bstack
    if_null rx1013_cstack, rx1013_cstack_done2763
    unless rx1013_cstack, rx1013_cstack_done2763
    dec $I19
    set $P11, rx1013_cstack[$I19]
  rx1013_cstack_done2763:
    pop rx1013_rep, rx1013_bstack
    pop rx1013_pos, rx1013_bstack
    pop $I19, rx1013_bstack
    lt rx1013_pos, -1, rx1013_done2758
    lt rx1013_pos, 0, rx1013_fail2760
    eq $I19, 0, rx1013_fail2760
    nqp_islist $I20, rx1013_cstack
    unless $I20, rx1013_jump2761
    elements $I18, rx1013_bstack
    le $I18, 0, rx1013_cut2762
    dec $I18
    set $I18, rx1013_bstack[$I18]
  rx1013_cut2762:
    assign rx1013_cstack, $I18
  rx1013_jump2761:
    jump $I19
  rx1013_done2758:
    rx1013_cur."!cursor_fail"()
    .return (rx1013_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_172_1349901750.327_caps" :subid("cuid_memo_277_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["quote_EXPR"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_172_1349901750.327_nfa" :subid("cuid_memo_278_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "<"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<( )>" :subid("cuid_173_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1278
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1017_tgt
    .local int rx1017_pos
    .local int rx1017_off
    .local int rx1017_eos
    .local int rx1017_rep
    .local pmc rx1017_cur
    .local pmc rx1017_curclass
    .local pmc rx1017_bstack
    .local pmc rx1017_cstack
    (rx1017_cur, rx1017_tgt, rx1017_pos, rx1017_curclass, rx1017_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1017_cur
    length rx1017_eos, rx1017_tgt
    eq $I19, 1, rx1017_restart2771
    gt rx1017_pos, rx1017_eos, rx1017_fail2772
    repr_get_attr_int $I11, self, rx1017_curclass, "$!from"
    ne $I11, -1, rxscan1018_done2778
    goto rxscan1018_scan2777
  rxscan1018_loop2776:
    inc rx1017_pos
    gt rx1017_pos, rx1017_eos, rx1017_fail2772
    repr_bind_attr_int rx1017_cur, rx1017_curclass, "$!from", rx1017_pos
  rxscan1018_scan2777:
    nqp_rxmark rx1017_bstack, rxscan1018_loop2776, rx1017_pos, 0
  rxscan1018_done2778:
    add $I11, rx1017_pos, 1
    gt $I11, rx1017_eos, rx1017_fail2772
    substr $S10, rx1017_tgt, rx1017_pos, 1
    ne $S10, ucs4:"(", rx1017_fail2772
    add rx1017_pos, 1
    repr_bind_attr_int rx1017_cur, rx1017_curclass, "$!pos", rx1017_pos
    $P11 = rx1017_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1017_curclass, "$!pos"
    lt $I11, 0, rx1017_fail2772
    repr_get_attr_int rx1017_pos, $P11, rx1017_curclass, "$!pos"
    repr_bind_attr_int rx1017_cur, rx1017_curclass, "$!pos", rx1017_pos
    $P11 = rx1017_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx1017_curclass, "$!pos"
    lt $I11, 0, rx1017_fail2772
    nqp_rxmark rx1017_bstack, rxsubrule1020_pass2780, -1, 0
  rxsubrule1020_pass2780:
    rx1017_cstack = rx1017_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx1017_pos, $P11, rx1017_curclass, "$!pos"
    add $I11, rx1017_pos, 1
    gt $I11, rx1017_eos, rx1017_fail2772
    substr $S10, rx1017_tgt, rx1017_pos, 1
    ne $S10, ucs4:")", rx1017_fail2772
    add rx1017_pos, 1
    repr_bind_attr_int rx1017_cur, rx1017_curclass, "$!pos", rx1017_pos
    $P11 = rx1017_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1017_curclass, "$!pos"
    lt $I11, 0, rx1017_fail2772
    nqp_rxmark rx1017_bstack, rxsubrule1021_pass2781, -1, 0
  rxsubrule1021_pass2781:
    rx1017_cstack = rx1017_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1017_pos, $P11, rx1017_curclass, "$!pos"
    rx1017_cur."!cursor_pass"(rx1017_pos, "postcircumfix:sym<( )>", 'backtrack'=>1)
    .return (rx1017_cur)
  rx1017_restart2771:
    repr_get_attr_obj rx1017_cstack, rx1017_cur, rx1017_curclass, "$!cstack"
  rx1017_fail2772:
    unless rx1017_bstack, rx1017_done2770
    pop $I19, rx1017_bstack
    if_null rx1017_cstack, rx1017_cstack_done2775
    unless rx1017_cstack, rx1017_cstack_done2775
    dec $I19
    set $P11, rx1017_cstack[$I19]
  rx1017_cstack_done2775:
    pop rx1017_rep, rx1017_bstack
    pop rx1017_pos, rx1017_bstack
    pop $I19, rx1017_bstack
    lt rx1017_pos, -1, rx1017_done2770
    lt rx1017_pos, 0, rx1017_fail2772
    eq $I19, 0, rx1017_fail2772
    nqp_islist $I20, rx1017_cstack
    unless $I20, rx1017_jump2773
    elements $I18, rx1017_bstack
    le $I18, 0, rx1017_cut2774
    dec $I18
    set $I18, rx1017_bstack[$I18]
  rx1017_cut2774:
    assign rx1017_cstack, $I18
  rx1017_jump2773:
    jump $I19
  rx1017_done2770:
    rx1017_cur."!cursor_fail"()
    .return (rx1017_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_173_1349901750.327_caps" :subid("cuid_memo_279_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["arglist"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_173_1349901750.327_nfa" :subid("cuid_memo_280_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 40
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "ws"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "arglist"
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 41
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 8
    push $P5019, $P5020
    box $P5021, "O"
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<.>" :subid("cuid_174_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1283
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1022_tgt
    .local int rx1022_pos
    .local int rx1022_off
    .local int rx1022_eos
    .local int rx1022_rep
    .local pmc rx1022_cur
    .local pmc rx1022_curclass
    .local pmc rx1022_bstack
    .local pmc rx1022_cstack
    (rx1022_cur, rx1022_tgt, rx1022_pos, rx1022_curclass, rx1022_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1022_cur
    length rx1022_eos, rx1022_tgt
    eq $I19, 1, rx1022_restart2784
    gt rx1022_pos, rx1022_eos, rx1022_fail2785
    repr_get_attr_int $I11, self, rx1022_curclass, "$!from"
    ne $I11, -1, rxscan1023_done2791
    goto rxscan1023_scan2790
  rxscan1023_loop2789:
    inc rx1022_pos
    gt rx1022_pos, rx1022_eos, rx1022_fail2785
    repr_bind_attr_int rx1022_cur, rx1022_curclass, "$!from", rx1022_pos
  rxscan1023_scan2790:
    nqp_rxmark rx1022_bstack, rxscan1023_loop2789, rx1022_pos, 0
  rxscan1023_done2791:
    repr_bind_attr_int rx1022_cur, rx1022_curclass, "$!pos", rx1022_pos
    $P11 = rx1022_cur."dotty"()
    repr_get_attr_int $I11, $P11, rx1022_curclass, "$!pos"
    lt $I11, 0, rx1022_fail2785
    nqp_rxmark rx1022_bstack, rxsubrule1024_pass2792, -1, 0
  rxsubrule1024_pass2792:
    rx1022_cstack = rx1022_cur."!cursor_capture"($P11, "dotty")
    repr_get_attr_int rx1022_pos, $P11, rx1022_curclass, "$!pos"
    repr_bind_attr_int rx1022_cur, rx1022_curclass, "$!pos", rx1022_pos
    $P11 = rx1022_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1022_curclass, "$!pos"
    lt $I11, 0, rx1022_fail2785
    nqp_rxmark rx1022_bstack, rxsubrule1025_pass2793, -1, 0
  rxsubrule1025_pass2793:
    rx1022_cstack = rx1022_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1022_pos, $P11, rx1022_curclass, "$!pos"
    rx1022_cur."!cursor_pass"(rx1022_pos, "postfix:sym<.>", 'backtrack'=>1)
    .return (rx1022_cur)
  rx1022_restart2784:
    repr_get_attr_obj rx1022_cstack, rx1022_cur, rx1022_curclass, "$!cstack"
  rx1022_fail2785:
    unless rx1022_bstack, rx1022_done2783
    pop $I19, rx1022_bstack
    if_null rx1022_cstack, rx1022_cstack_done2788
    unless rx1022_cstack, rx1022_cstack_done2788
    dec $I19
    set $P11, rx1022_cstack[$I19]
  rx1022_cstack_done2788:
    pop rx1022_rep, rx1022_bstack
    pop rx1022_pos, rx1022_bstack
    pop $I19, rx1022_bstack
    lt rx1022_pos, -1, rx1022_done2783
    lt rx1022_pos, 0, rx1022_fail2785
    eq $I19, 0, rx1022_fail2785
    nqp_islist $I20, rx1022_cstack
    unless $I20, rx1022_jump2786
    elements $I18, rx1022_bstack
    le $I18, 0, rx1022_cut2787
    dec $I18
    set $I18, rx1022_bstack[$I18]
  rx1022_cut2787:
    assign rx1022_cstack, $I18
  rx1022_jump2786:
    jump $I19
  rx1022_done2783:
    rx1022_cur."!cursor_fail"()
    .return (rx1022_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_174_1349901750.327_caps" :subid("cuid_memo_281_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["dotty"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_174_1349901750.327_nfa" :subid("cuid_memo_282_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "dotty"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<++>" :subid("cuid_175_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1285
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1026_tgt
    .local int rx1026_pos
    .local int rx1026_off
    .local int rx1026_eos
    .local int rx1026_rep
    .local pmc rx1026_cur
    .local pmc rx1026_curclass
    .local pmc rx1026_bstack
    .local pmc rx1026_cstack
    (rx1026_cur, rx1026_tgt, rx1026_pos, rx1026_curclass, rx1026_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1026_cur
    length rx1026_eos, rx1026_tgt
    eq $I19, 1, rx1026_restart2796
    gt rx1026_pos, rx1026_eos, rx1026_fail2797
    repr_get_attr_int $I11, self, rx1026_curclass, "$!from"
    ne $I11, -1, rxscan1027_done2803
    goto rxscan1027_scan2802
  rxscan1027_loop2801:
    inc rx1026_pos
    gt rx1026_pos, rx1026_eos, rx1026_fail2797
    repr_bind_attr_int rx1026_cur, rx1026_curclass, "$!from", rx1026_pos
  rxscan1027_scan2802:
    nqp_rxmark rx1026_bstack, rxscan1027_loop2801, rx1026_pos, 0
  rxscan1027_done2803:
    nqp_rxmark rx1026_bstack, rxcap1028_fail2805, rx1026_pos, 0
    add $I11, rx1026_pos, 2
    gt $I11, rx1026_eos, rx1026_fail2797
    substr $S10, rx1026_tgt, rx1026_pos, 2
    ne $S10, ucs4:"++", rx1026_fail2797
    add rx1026_pos, 2
    nqp_rxpeek $I19, rx1026_bstack, rxcap1028_fail2805
    inc $I19
    set $I11, rx1026_bstack[$I19]
    repr_bind_attr_int rx1026_cur, rx1026_curclass, "$!pos", rx1026_pos
    $P11 = rx1026_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1026_pos)
    rx1026_cstack = rx1026_cur."!cursor_capture"($P11, "sym")
    goto rxcap1028_done2804
  rxcap1028_fail2805:
    goto rx1026_fail2797
  rxcap1028_done2804:
    repr_bind_attr_int rx1026_cur, rx1026_curclass, "$!pos", rx1026_pos
    $P11 = rx1026_cur."O"("%autoincrement, :op<preinc>")
    repr_get_attr_int $I11, $P11, rx1026_curclass, "$!pos"
    lt $I11, 0, rx1026_fail2797
    nqp_rxmark rx1026_bstack, rxsubrule1029_pass2806, -1, 0
  rxsubrule1029_pass2806:
    rx1026_cstack = rx1026_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1026_pos, $P11, rx1026_curclass, "$!pos"
    rx1026_cur."!cursor_pass"(rx1026_pos, "prefix:sym<++>", 'backtrack'=>1)
    .return (rx1026_cur)
  rx1026_restart2796:
    repr_get_attr_obj rx1026_cstack, rx1026_cur, rx1026_curclass, "$!cstack"
  rx1026_fail2797:
    unless rx1026_bstack, rx1026_done2795
    pop $I19, rx1026_bstack
    if_null rx1026_cstack, rx1026_cstack_done2800
    unless rx1026_cstack, rx1026_cstack_done2800
    dec $I19
    set $P11, rx1026_cstack[$I19]
  rx1026_cstack_done2800:
    pop rx1026_rep, rx1026_bstack
    pop rx1026_pos, rx1026_bstack
    pop $I19, rx1026_bstack
    lt rx1026_pos, -1, rx1026_done2795
    lt rx1026_pos, 0, rx1026_fail2797
    eq $I19, 0, rx1026_fail2797
    nqp_islist $I20, rx1026_cstack
    unless $I20, rx1026_jump2798
    elements $I18, rx1026_bstack
    le $I18, 0, rx1026_cut2799
    dec $I18
    set $I18, rx1026_bstack[$I18]
  rx1026_cut2799:
    assign rx1026_cstack, $I18
  rx1026_jump2798:
    jump $I19
  rx1026_done2795:
    rx1026_cur."!cursor_fail"()
    .return (rx1026_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_175_1349901750.327_caps" :subid("cuid_memo_283_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_175_1349901750.327_nfa" :subid("cuid_memo_284_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 43
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 43
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<-->" :subid("cuid_176_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1286
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1030_tgt
    .local int rx1030_pos
    .local int rx1030_off
    .local int rx1030_eos
    .local int rx1030_rep
    .local pmc rx1030_cur
    .local pmc rx1030_curclass
    .local pmc rx1030_bstack
    .local pmc rx1030_cstack
    (rx1030_cur, rx1030_tgt, rx1030_pos, rx1030_curclass, rx1030_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1030_cur
    length rx1030_eos, rx1030_tgt
    eq $I19, 1, rx1030_restart2809
    gt rx1030_pos, rx1030_eos, rx1030_fail2810
    repr_get_attr_int $I11, self, rx1030_curclass, "$!from"
    ne $I11, -1, rxscan1031_done2816
    goto rxscan1031_scan2815
  rxscan1031_loop2814:
    inc rx1030_pos
    gt rx1030_pos, rx1030_eos, rx1030_fail2810
    repr_bind_attr_int rx1030_cur, rx1030_curclass, "$!from", rx1030_pos
  rxscan1031_scan2815:
    nqp_rxmark rx1030_bstack, rxscan1031_loop2814, rx1030_pos, 0
  rxscan1031_done2816:
    nqp_rxmark rx1030_bstack, rxcap1032_fail2818, rx1030_pos, 0
    add $I11, rx1030_pos, 2
    gt $I11, rx1030_eos, rx1030_fail2810
    substr $S10, rx1030_tgt, rx1030_pos, 2
    ne $S10, ucs4:"--", rx1030_fail2810
    add rx1030_pos, 2
    nqp_rxpeek $I19, rx1030_bstack, rxcap1032_fail2818
    inc $I19
    set $I11, rx1030_bstack[$I19]
    repr_bind_attr_int rx1030_cur, rx1030_curclass, "$!pos", rx1030_pos
    $P11 = rx1030_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1030_pos)
    rx1030_cstack = rx1030_cur."!cursor_capture"($P11, "sym")
    goto rxcap1032_done2817
  rxcap1032_fail2818:
    goto rx1030_fail2810
  rxcap1032_done2817:
    repr_bind_attr_int rx1030_cur, rx1030_curclass, "$!pos", rx1030_pos
    $P11 = rx1030_cur."O"("%autoincrement, :op<predec>")
    repr_get_attr_int $I11, $P11, rx1030_curclass, "$!pos"
    lt $I11, 0, rx1030_fail2810
    nqp_rxmark rx1030_bstack, rxsubrule1033_pass2819, -1, 0
  rxsubrule1033_pass2819:
    rx1030_cstack = rx1030_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1030_pos, $P11, rx1030_curclass, "$!pos"
    rx1030_cur."!cursor_pass"(rx1030_pos, "prefix:sym<-->", 'backtrack'=>1)
    .return (rx1030_cur)
  rx1030_restart2809:
    repr_get_attr_obj rx1030_cstack, rx1030_cur, rx1030_curclass, "$!cstack"
  rx1030_fail2810:
    unless rx1030_bstack, rx1030_done2808
    pop $I19, rx1030_bstack
    if_null rx1030_cstack, rx1030_cstack_done2813
    unless rx1030_cstack, rx1030_cstack_done2813
    dec $I19
    set $P11, rx1030_cstack[$I19]
  rx1030_cstack_done2813:
    pop rx1030_rep, rx1030_bstack
    pop rx1030_pos, rx1030_bstack
    pop $I19, rx1030_bstack
    lt rx1030_pos, -1, rx1030_done2808
    lt rx1030_pos, 0, rx1030_fail2810
    eq $I19, 0, rx1030_fail2810
    nqp_islist $I20, rx1030_cstack
    unless $I20, rx1030_jump2811
    elements $I18, rx1030_bstack
    le $I18, 0, rx1030_cut2812
    dec $I18
    set $I18, rx1030_bstack[$I18]
  rx1030_cut2812:
    assign rx1030_cstack, $I18
  rx1030_jump2811:
    jump $I19
  rx1030_done2808:
    rx1030_cur."!cursor_fail"()
    .return (rx1030_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_176_1349901750.327_caps" :subid("cuid_memo_285_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_176_1349901750.327_nfa" :subid("cuid_memo_286_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 45
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 45
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<++>" :subid("cuid_177_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1288
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1034_tgt
    .local int rx1034_pos
    .local int rx1034_off
    .local int rx1034_eos
    .local int rx1034_rep
    .local pmc rx1034_cur
    .local pmc rx1034_curclass
    .local pmc rx1034_bstack
    .local pmc rx1034_cstack
    (rx1034_cur, rx1034_tgt, rx1034_pos, rx1034_curclass, rx1034_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1034_cur
    length rx1034_eos, rx1034_tgt
    eq $I19, 1, rx1034_restart2822
    gt rx1034_pos, rx1034_eos, rx1034_fail2823
    repr_get_attr_int $I11, self, rx1034_curclass, "$!from"
    ne $I11, -1, rxscan1035_done2829
    goto rxscan1035_scan2828
  rxscan1035_loop2827:
    inc rx1034_pos
    gt rx1034_pos, rx1034_eos, rx1034_fail2823
    repr_bind_attr_int rx1034_cur, rx1034_curclass, "$!from", rx1034_pos
  rxscan1035_scan2828:
    nqp_rxmark rx1034_bstack, rxscan1035_loop2827, rx1034_pos, 0
  rxscan1035_done2829:
    nqp_rxmark rx1034_bstack, rxcap1036_fail2831, rx1034_pos, 0
    add $I11, rx1034_pos, 2
    gt $I11, rx1034_eos, rx1034_fail2823
    substr $S10, rx1034_tgt, rx1034_pos, 2
    ne $S10, ucs4:"++", rx1034_fail2823
    add rx1034_pos, 2
    nqp_rxpeek $I19, rx1034_bstack, rxcap1036_fail2831
    inc $I19
    set $I11, rx1034_bstack[$I19]
    repr_bind_attr_int rx1034_cur, rx1034_curclass, "$!pos", rx1034_pos
    $P11 = rx1034_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1034_pos)
    rx1034_cstack = rx1034_cur."!cursor_capture"($P11, "sym")
    goto rxcap1036_done2830
  rxcap1036_fail2831:
    goto rx1034_fail2823
  rxcap1036_done2830:
    repr_bind_attr_int rx1034_cur, rx1034_curclass, "$!pos", rx1034_pos
    $P11 = rx1034_cur."O"("%autoincrement, :op<postinc>")
    repr_get_attr_int $I11, $P11, rx1034_curclass, "$!pos"
    lt $I11, 0, rx1034_fail2823
    nqp_rxmark rx1034_bstack, rxsubrule1037_pass2832, -1, 0
  rxsubrule1037_pass2832:
    rx1034_cstack = rx1034_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1034_pos, $P11, rx1034_curclass, "$!pos"
    rx1034_cur."!cursor_pass"(rx1034_pos, "postfix:sym<++>", 'backtrack'=>1)
    .return (rx1034_cur)
  rx1034_restart2822:
    repr_get_attr_obj rx1034_cstack, rx1034_cur, rx1034_curclass, "$!cstack"
  rx1034_fail2823:
    unless rx1034_bstack, rx1034_done2821
    pop $I19, rx1034_bstack
    if_null rx1034_cstack, rx1034_cstack_done2826
    unless rx1034_cstack, rx1034_cstack_done2826
    dec $I19
    set $P11, rx1034_cstack[$I19]
  rx1034_cstack_done2826:
    pop rx1034_rep, rx1034_bstack
    pop rx1034_pos, rx1034_bstack
    pop $I19, rx1034_bstack
    lt rx1034_pos, -1, rx1034_done2821
    lt rx1034_pos, 0, rx1034_fail2823
    eq $I19, 0, rx1034_fail2823
    nqp_islist $I20, rx1034_cstack
    unless $I20, rx1034_jump2824
    elements $I18, rx1034_bstack
    le $I18, 0, rx1034_cut2825
    dec $I18
    set $I18, rx1034_bstack[$I18]
  rx1034_cut2825:
    assign rx1034_cstack, $I18
  rx1034_jump2824:
    jump $I19
  rx1034_done2821:
    rx1034_cur."!cursor_fail"()
    .return (rx1034_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_177_1349901750.327_caps" :subid("cuid_memo_287_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_177_1349901750.327_nfa" :subid("cuid_memo_288_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 43
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 43
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<-->" :subid("cuid_178_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1289
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1038_tgt
    .local int rx1038_pos
    .local int rx1038_off
    .local int rx1038_eos
    .local int rx1038_rep
    .local pmc rx1038_cur
    .local pmc rx1038_curclass
    .local pmc rx1038_bstack
    .local pmc rx1038_cstack
    (rx1038_cur, rx1038_tgt, rx1038_pos, rx1038_curclass, rx1038_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1038_cur
    length rx1038_eos, rx1038_tgt
    eq $I19, 1, rx1038_restart2835
    gt rx1038_pos, rx1038_eos, rx1038_fail2836
    repr_get_attr_int $I11, self, rx1038_curclass, "$!from"
    ne $I11, -1, rxscan1039_done2842
    goto rxscan1039_scan2841
  rxscan1039_loop2840:
    inc rx1038_pos
    gt rx1038_pos, rx1038_eos, rx1038_fail2836
    repr_bind_attr_int rx1038_cur, rx1038_curclass, "$!from", rx1038_pos
  rxscan1039_scan2841:
    nqp_rxmark rx1038_bstack, rxscan1039_loop2840, rx1038_pos, 0
  rxscan1039_done2842:
    nqp_rxmark rx1038_bstack, rxcap1040_fail2844, rx1038_pos, 0
    add $I11, rx1038_pos, 2
    gt $I11, rx1038_eos, rx1038_fail2836
    substr $S10, rx1038_tgt, rx1038_pos, 2
    ne $S10, ucs4:"--", rx1038_fail2836
    add rx1038_pos, 2
    nqp_rxpeek $I19, rx1038_bstack, rxcap1040_fail2844
    inc $I19
    set $I11, rx1038_bstack[$I19]
    repr_bind_attr_int rx1038_cur, rx1038_curclass, "$!pos", rx1038_pos
    $P11 = rx1038_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1038_pos)
    rx1038_cstack = rx1038_cur."!cursor_capture"($P11, "sym")
    goto rxcap1040_done2843
  rxcap1040_fail2844:
    goto rx1038_fail2836
  rxcap1040_done2843:
    repr_bind_attr_int rx1038_cur, rx1038_curclass, "$!pos", rx1038_pos
    $P11 = rx1038_cur."O"("%autoincrement, :op<postdec>")
    repr_get_attr_int $I11, $P11, rx1038_curclass, "$!pos"
    lt $I11, 0, rx1038_fail2836
    nqp_rxmark rx1038_bstack, rxsubrule1041_pass2845, -1, 0
  rxsubrule1041_pass2845:
    rx1038_cstack = rx1038_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1038_pos, $P11, rx1038_curclass, "$!pos"
    rx1038_cur."!cursor_pass"(rx1038_pos, "postfix:sym<-->", 'backtrack'=>1)
    .return (rx1038_cur)
  rx1038_restart2835:
    repr_get_attr_obj rx1038_cstack, rx1038_cur, rx1038_curclass, "$!cstack"
  rx1038_fail2836:
    unless rx1038_bstack, rx1038_done2834
    pop $I19, rx1038_bstack
    if_null rx1038_cstack, rx1038_cstack_done2839
    unless rx1038_cstack, rx1038_cstack_done2839
    dec $I19
    set $P11, rx1038_cstack[$I19]
  rx1038_cstack_done2839:
    pop rx1038_rep, rx1038_bstack
    pop rx1038_pos, rx1038_bstack
    pop $I19, rx1038_bstack
    lt rx1038_pos, -1, rx1038_done2834
    lt rx1038_pos, 0, rx1038_fail2836
    eq $I19, 0, rx1038_fail2836
    nqp_islist $I20, rx1038_cstack
    unless $I20, rx1038_jump2837
    elements $I18, rx1038_bstack
    le $I18, 0, rx1038_cut2838
    dec $I18
    set $I18, rx1038_bstack[$I18]
  rx1038_cut2838:
    assign rx1038_cstack, $I18
  rx1038_jump2837:
    jump $I19
  rx1038_done2834:
    rx1038_cur."!cursor_fail"()
    .return (rx1038_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_178_1349901750.327_caps" :subid("cuid_memo_289_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_178_1349901750.327_nfa" :subid("cuid_memo_290_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 45
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 45
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<**>" :subid("cuid_179_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1291
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1042_tgt
    .local int rx1042_pos
    .local int rx1042_off
    .local int rx1042_eos
    .local int rx1042_rep
    .local pmc rx1042_cur
    .local pmc rx1042_curclass
    .local pmc rx1042_bstack
    .local pmc rx1042_cstack
    (rx1042_cur, rx1042_tgt, rx1042_pos, rx1042_curclass, rx1042_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1042_cur
    length rx1042_eos, rx1042_tgt
    eq $I19, 1, rx1042_restart2848
    gt rx1042_pos, rx1042_eos, rx1042_fail2849
    repr_get_attr_int $I11, self, rx1042_curclass, "$!from"
    ne $I11, -1, rxscan1043_done2855
    goto rxscan1043_scan2854
  rxscan1043_loop2853:
    inc rx1042_pos
    gt rx1042_pos, rx1042_eos, rx1042_fail2849
    repr_bind_attr_int rx1042_cur, rx1042_curclass, "$!from", rx1042_pos
  rxscan1043_scan2854:
    nqp_rxmark rx1042_bstack, rxscan1043_loop2853, rx1042_pos, 0
  rxscan1043_done2855:
    nqp_rxmark rx1042_bstack, rxcap1044_fail2857, rx1042_pos, 0
    add $I11, rx1042_pos, 2
    gt $I11, rx1042_eos, rx1042_fail2849
    substr $S10, rx1042_tgt, rx1042_pos, 2
    ne $S10, ucs4:"**", rx1042_fail2849
    add rx1042_pos, 2
    nqp_rxpeek $I19, rx1042_bstack, rxcap1044_fail2857
    inc $I19
    set $I11, rx1042_bstack[$I19]
    repr_bind_attr_int rx1042_cur, rx1042_curclass, "$!pos", rx1042_pos
    $P11 = rx1042_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1042_pos)
    rx1042_cstack = rx1042_cur."!cursor_capture"($P11, "sym")
    goto rxcap1044_done2856
  rxcap1044_fail2857:
    goto rx1042_fail2849
  rxcap1044_done2856:
    repr_bind_attr_int rx1042_cur, rx1042_curclass, "$!pos", rx1042_pos
    $P11 = rx1042_cur."O"("%exponentiation, :op<pow_n>")
    repr_get_attr_int $I11, $P11, rx1042_curclass, "$!pos"
    lt $I11, 0, rx1042_fail2849
    nqp_rxmark rx1042_bstack, rxsubrule1045_pass2858, -1, 0
  rxsubrule1045_pass2858:
    rx1042_cstack = rx1042_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1042_pos, $P11, rx1042_curclass, "$!pos"
    rx1042_cur."!cursor_pass"(rx1042_pos, "infix:sym<**>", 'backtrack'=>1)
    .return (rx1042_cur)
  rx1042_restart2848:
    repr_get_attr_obj rx1042_cstack, rx1042_cur, rx1042_curclass, "$!cstack"
  rx1042_fail2849:
    unless rx1042_bstack, rx1042_done2847
    pop $I19, rx1042_bstack
    if_null rx1042_cstack, rx1042_cstack_done2852
    unless rx1042_cstack, rx1042_cstack_done2852
    dec $I19
    set $P11, rx1042_cstack[$I19]
  rx1042_cstack_done2852:
    pop rx1042_rep, rx1042_bstack
    pop rx1042_pos, rx1042_bstack
    pop $I19, rx1042_bstack
    lt rx1042_pos, -1, rx1042_done2847
    lt rx1042_pos, 0, rx1042_fail2849
    eq $I19, 0, rx1042_fail2849
    nqp_islist $I20, rx1042_cstack
    unless $I20, rx1042_jump2850
    elements $I18, rx1042_bstack
    le $I18, 0, rx1042_cut2851
    dec $I18
    set $I18, rx1042_bstack[$I18]
  rx1042_cut2851:
    assign rx1042_cstack, $I18
  rx1042_jump2850:
    jump $I19
  rx1042_done2847:
    rx1042_cur."!cursor_fail"()
    .return (rx1042_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_179_1349901750.327_caps" :subid("cuid_memo_291_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_179_1349901750.327_nfa" :subid("cuid_memo_292_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 42
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 42
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<+>" :subid("cuid_180_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1293
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1046_tgt
    .local int rx1046_pos
    .local int rx1046_off
    .local int rx1046_eos
    .local int rx1046_rep
    .local pmc rx1046_cur
    .local pmc rx1046_curclass
    .local pmc rx1046_bstack
    .local pmc rx1046_cstack
    (rx1046_cur, rx1046_tgt, rx1046_pos, rx1046_curclass, rx1046_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1046_cur
    length rx1046_eos, rx1046_tgt
    eq $I19, 1, rx1046_restart2861
    gt rx1046_pos, rx1046_eos, rx1046_fail2862
    repr_get_attr_int $I11, self, rx1046_curclass, "$!from"
    ne $I11, -1, rxscan1047_done2868
    goto rxscan1047_scan2867
  rxscan1047_loop2866:
    inc rx1046_pos
    gt rx1046_pos, rx1046_eos, rx1046_fail2862
    repr_bind_attr_int rx1046_cur, rx1046_curclass, "$!from", rx1046_pos
  rxscan1047_scan2867:
    nqp_rxmark rx1046_bstack, rxscan1047_loop2866, rx1046_pos, 0
  rxscan1047_done2868:
    nqp_rxmark rx1046_bstack, rxcap1048_fail2870, rx1046_pos, 0
    add $I11, rx1046_pos, 1
    gt $I11, rx1046_eos, rx1046_fail2862
    substr $S10, rx1046_tgt, rx1046_pos, 1
    ne $S10, ucs4:"+", rx1046_fail2862
    add rx1046_pos, 1
    nqp_rxpeek $I19, rx1046_bstack, rxcap1048_fail2870
    inc $I19
    set $I11, rx1046_bstack[$I19]
    repr_bind_attr_int rx1046_cur, rx1046_curclass, "$!pos", rx1046_pos
    $P11 = rx1046_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1046_pos)
    rx1046_cstack = rx1046_cur."!cursor_capture"($P11, "sym")
    goto rxcap1048_done2869
  rxcap1048_fail2870:
    goto rx1046_fail2862
  rxcap1048_done2869:
    repr_bind_attr_int rx1046_cur, rx1046_curclass, "$!pos", rx1046_pos
    $P11 = rx1046_cur."O"("%symbolic_unary, :op<numify>")
    repr_get_attr_int $I11, $P11, rx1046_curclass, "$!pos"
    lt $I11, 0, rx1046_fail2862
    nqp_rxmark rx1046_bstack, rxsubrule1049_pass2871, -1, 0
  rxsubrule1049_pass2871:
    rx1046_cstack = rx1046_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1046_pos, $P11, rx1046_curclass, "$!pos"
    rx1046_cur."!cursor_pass"(rx1046_pos, "prefix:sym<+>", 'backtrack'=>1)
    .return (rx1046_cur)
  rx1046_restart2861:
    repr_get_attr_obj rx1046_cstack, rx1046_cur, rx1046_curclass, "$!cstack"
  rx1046_fail2862:
    unless rx1046_bstack, rx1046_done2860
    pop $I19, rx1046_bstack
    if_null rx1046_cstack, rx1046_cstack_done2865
    unless rx1046_cstack, rx1046_cstack_done2865
    dec $I19
    set $P11, rx1046_cstack[$I19]
  rx1046_cstack_done2865:
    pop rx1046_rep, rx1046_bstack
    pop rx1046_pos, rx1046_bstack
    pop $I19, rx1046_bstack
    lt rx1046_pos, -1, rx1046_done2860
    lt rx1046_pos, 0, rx1046_fail2862
    eq $I19, 0, rx1046_fail2862
    nqp_islist $I20, rx1046_cstack
    unless $I20, rx1046_jump2863
    elements $I18, rx1046_bstack
    le $I18, 0, rx1046_cut2864
    dec $I18
    set $I18, rx1046_bstack[$I18]
  rx1046_cut2864:
    assign rx1046_cstack, $I18
  rx1046_jump2863:
    jump $I19
  rx1046_done2860:
    rx1046_cur."!cursor_fail"()
    .return (rx1046_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_180_1349901750.327_caps" :subid("cuid_memo_293_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_180_1349901750.327_nfa" :subid("cuid_memo_294_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 43
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<~>" :subid("cuid_181_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1294
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1050_tgt
    .local int rx1050_pos
    .local int rx1050_off
    .local int rx1050_eos
    .local int rx1050_rep
    .local pmc rx1050_cur
    .local pmc rx1050_curclass
    .local pmc rx1050_bstack
    .local pmc rx1050_cstack
    (rx1050_cur, rx1050_tgt, rx1050_pos, rx1050_curclass, rx1050_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1050_cur
    length rx1050_eos, rx1050_tgt
    eq $I19, 1, rx1050_restart2874
    gt rx1050_pos, rx1050_eos, rx1050_fail2875
    repr_get_attr_int $I11, self, rx1050_curclass, "$!from"
    ne $I11, -1, rxscan1051_done2881
    goto rxscan1051_scan2880
  rxscan1051_loop2879:
    inc rx1050_pos
    gt rx1050_pos, rx1050_eos, rx1050_fail2875
    repr_bind_attr_int rx1050_cur, rx1050_curclass, "$!from", rx1050_pos
  rxscan1051_scan2880:
    nqp_rxmark rx1050_bstack, rxscan1051_loop2879, rx1050_pos, 0
  rxscan1051_done2881:
    nqp_rxmark rx1050_bstack, rxcap1052_fail2883, rx1050_pos, 0
    add $I11, rx1050_pos, 1
    gt $I11, rx1050_eos, rx1050_fail2875
    substr $S10, rx1050_tgt, rx1050_pos, 1
    ne $S10, ucs4:"~", rx1050_fail2875
    add rx1050_pos, 1
    nqp_rxpeek $I19, rx1050_bstack, rxcap1052_fail2883
    inc $I19
    set $I11, rx1050_bstack[$I19]
    repr_bind_attr_int rx1050_cur, rx1050_curclass, "$!pos", rx1050_pos
    $P11 = rx1050_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1050_pos)
    rx1050_cstack = rx1050_cur."!cursor_capture"($P11, "sym")
    goto rxcap1052_done2882
  rxcap1052_fail2883:
    goto rx1050_fail2875
  rxcap1052_done2882:
    repr_bind_attr_int rx1050_cur, rx1050_curclass, "$!pos", rx1050_pos
    $P11 = rx1050_cur."O"("%symbolic_unary, :op<stringify>")
    repr_get_attr_int $I11, $P11, rx1050_curclass, "$!pos"
    lt $I11, 0, rx1050_fail2875
    nqp_rxmark rx1050_bstack, rxsubrule1053_pass2884, -1, 0
  rxsubrule1053_pass2884:
    rx1050_cstack = rx1050_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1050_pos, $P11, rx1050_curclass, "$!pos"
    rx1050_cur."!cursor_pass"(rx1050_pos, "prefix:sym<~>", 'backtrack'=>1)
    .return (rx1050_cur)
  rx1050_restart2874:
    repr_get_attr_obj rx1050_cstack, rx1050_cur, rx1050_curclass, "$!cstack"
  rx1050_fail2875:
    unless rx1050_bstack, rx1050_done2873
    pop $I19, rx1050_bstack
    if_null rx1050_cstack, rx1050_cstack_done2878
    unless rx1050_cstack, rx1050_cstack_done2878
    dec $I19
    set $P11, rx1050_cstack[$I19]
  rx1050_cstack_done2878:
    pop rx1050_rep, rx1050_bstack
    pop rx1050_pos, rx1050_bstack
    pop $I19, rx1050_bstack
    lt rx1050_pos, -1, rx1050_done2873
    lt rx1050_pos, 0, rx1050_fail2875
    eq $I19, 0, rx1050_fail2875
    nqp_islist $I20, rx1050_cstack
    unless $I20, rx1050_jump2876
    elements $I18, rx1050_bstack
    le $I18, 0, rx1050_cut2877
    dec $I18
    set $I18, rx1050_bstack[$I18]
  rx1050_cut2877:
    assign rx1050_cstack, $I18
  rx1050_jump2876:
    jump $I19
  rx1050_done2873:
    rx1050_cur."!cursor_fail"()
    .return (rx1050_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_181_1349901750.327_caps" :subid("cuid_memo_295_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_181_1349901750.327_nfa" :subid("cuid_memo_296_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 126
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<->" :subid("cuid_182_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1295
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1054_tgt
    .local int rx1054_pos
    .local int rx1054_off
    .local int rx1054_eos
    .local int rx1054_rep
    .local pmc rx1054_cur
    .local pmc rx1054_curclass
    .local pmc rx1054_bstack
    .local pmc rx1054_cstack
    (rx1054_cur, rx1054_tgt, rx1054_pos, rx1054_curclass, rx1054_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1054_cur
    length rx1054_eos, rx1054_tgt
    eq $I19, 1, rx1054_restart2887
    gt rx1054_pos, rx1054_eos, rx1054_fail2888
    repr_get_attr_int $I11, self, rx1054_curclass, "$!from"
    ne $I11, -1, rxscan1055_done2894
    goto rxscan1055_scan2893
  rxscan1055_loop2892:
    inc rx1054_pos
    gt rx1054_pos, rx1054_eos, rx1054_fail2888
    repr_bind_attr_int rx1054_cur, rx1054_curclass, "$!from", rx1054_pos
  rxscan1055_scan2893:
    nqp_rxmark rx1054_bstack, rxscan1055_loop2892, rx1054_pos, 0
  rxscan1055_done2894:
    nqp_rxmark rx1054_bstack, rxcap1056_fail2896, rx1054_pos, 0
    add $I11, rx1054_pos, 1
    gt $I11, rx1054_eos, rx1054_fail2888
    substr $S10, rx1054_tgt, rx1054_pos, 1
    ne $S10, ucs4:"-", rx1054_fail2888
    add rx1054_pos, 1
    nqp_rxpeek $I19, rx1054_bstack, rxcap1056_fail2896
    inc $I19
    set $I11, rx1054_bstack[$I19]
    repr_bind_attr_int rx1054_cur, rx1054_curclass, "$!pos", rx1054_pos
    $P11 = rx1054_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1054_pos)
    rx1054_cstack = rx1054_cur."!cursor_capture"($P11, "sym")
    goto rxcap1056_done2895
  rxcap1056_fail2896:
    goto rx1054_fail2888
  rxcap1056_done2895:
    ge rx1054_pos, rx1054_eos, rx1054_fail2888
    substr $S11, rx1054_tgt, rx1054_pos, 1
    index $I11, ucs4:">", $S11
    ge $I11, 0, rx1054_fail2888
    repr_bind_attr_int rx1054_cur, rx1054_curclass, "$!pos", rx1054_pos
    $P11 = rx1054_cur."number"()
    repr_get_attr_int $I11, $P11, rx1054_curclass, "$!pos"
    ge $I11, 0, rx1054_fail2888
    repr_bind_attr_int rx1054_cur, rx1054_curclass, "$!pos", rx1054_pos
    $P11 = rx1054_cur."O"("%symbolic_unary, :op<neg_n>")
    repr_get_attr_int $I11, $P11, rx1054_curclass, "$!pos"
    lt $I11, 0, rx1054_fail2888
    nqp_rxmark rx1054_bstack, rxsubrule1057_pass2897, -1, 0
  rxsubrule1057_pass2897:
    rx1054_cstack = rx1054_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1054_pos, $P11, rx1054_curclass, "$!pos"
    rx1054_cur."!cursor_pass"(rx1054_pos, "prefix:sym<->", 'backtrack'=>1)
    .return (rx1054_cur)
  rx1054_restart2887:
    repr_get_attr_obj rx1054_cstack, rx1054_cur, rx1054_curclass, "$!cstack"
  rx1054_fail2888:
    unless rx1054_bstack, rx1054_done2886
    pop $I19, rx1054_bstack
    if_null rx1054_cstack, rx1054_cstack_done2891
    unless rx1054_cstack, rx1054_cstack_done2891
    dec $I19
    set $P11, rx1054_cstack[$I19]
  rx1054_cstack_done2891:
    pop rx1054_rep, rx1054_bstack
    pop rx1054_pos, rx1054_bstack
    pop $I19, rx1054_bstack
    lt rx1054_pos, -1, rx1054_done2886
    lt rx1054_pos, 0, rx1054_fail2888
    eq $I19, 0, rx1054_fail2888
    nqp_islist $I20, rx1054_cstack
    unless $I20, rx1054_jump2889
    elements $I18, rx1054_bstack
    le $I18, 0, rx1054_cut2890
    dec $I18
    set $I18, rx1054_bstack[$I18]
  rx1054_cut2890:
    assign rx1054_cstack, $I18
  rx1054_jump2889:
    jump $I19
  rx1054_done2886:
    rx1054_cur."!cursor_fail"()
    .return (rx1054_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_182_1349901750.327_caps" :subid("cuid_memo_297_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_182_1349901750.327_nfa" :subid("cuid_memo_298_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 45
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 7
    push $P5007, $P5008
    box $P5009, ">"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 0
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<?>" :subid("cuid_183_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1296
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1058_tgt
    .local int rx1058_pos
    .local int rx1058_off
    .local int rx1058_eos
    .local int rx1058_rep
    .local pmc rx1058_cur
    .local pmc rx1058_curclass
    .local pmc rx1058_bstack
    .local pmc rx1058_cstack
    (rx1058_cur, rx1058_tgt, rx1058_pos, rx1058_curclass, rx1058_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1058_cur
    length rx1058_eos, rx1058_tgt
    eq $I19, 1, rx1058_restart2900
    gt rx1058_pos, rx1058_eos, rx1058_fail2901
    repr_get_attr_int $I11, self, rx1058_curclass, "$!from"
    ne $I11, -1, rxscan1059_done2907
    goto rxscan1059_scan2906
  rxscan1059_loop2905:
    inc rx1058_pos
    gt rx1058_pos, rx1058_eos, rx1058_fail2901
    repr_bind_attr_int rx1058_cur, rx1058_curclass, "$!from", rx1058_pos
  rxscan1059_scan2906:
    nqp_rxmark rx1058_bstack, rxscan1059_loop2905, rx1058_pos, 0
  rxscan1059_done2907:
    nqp_rxmark rx1058_bstack, rxcap1060_fail2909, rx1058_pos, 0
    add $I11, rx1058_pos, 1
    gt $I11, rx1058_eos, rx1058_fail2901
    substr $S10, rx1058_tgt, rx1058_pos, 1
    ne $S10, ucs4:"?", rx1058_fail2901
    add rx1058_pos, 1
    nqp_rxpeek $I19, rx1058_bstack, rxcap1060_fail2909
    inc $I19
    set $I11, rx1058_bstack[$I19]
    repr_bind_attr_int rx1058_cur, rx1058_curclass, "$!pos", rx1058_pos
    $P11 = rx1058_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1058_pos)
    rx1058_cstack = rx1058_cur."!cursor_capture"($P11, "sym")
    goto rxcap1060_done2908
  rxcap1060_fail2909:
    goto rx1058_fail2901
  rxcap1060_done2908:
    repr_bind_attr_int rx1058_cur, rx1058_curclass, "$!pos", rx1058_pos
    $P11 = rx1058_cur."O"("%symbolic_unary, :op<istrue>")
    repr_get_attr_int $I11, $P11, rx1058_curclass, "$!pos"
    lt $I11, 0, rx1058_fail2901
    nqp_rxmark rx1058_bstack, rxsubrule1061_pass2910, -1, 0
  rxsubrule1061_pass2910:
    rx1058_cstack = rx1058_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1058_pos, $P11, rx1058_curclass, "$!pos"
    rx1058_cur."!cursor_pass"(rx1058_pos, "prefix:sym<?>", 'backtrack'=>1)
    .return (rx1058_cur)
  rx1058_restart2900:
    repr_get_attr_obj rx1058_cstack, rx1058_cur, rx1058_curclass, "$!cstack"
  rx1058_fail2901:
    unless rx1058_bstack, rx1058_done2899
    pop $I19, rx1058_bstack
    if_null rx1058_cstack, rx1058_cstack_done2904
    unless rx1058_cstack, rx1058_cstack_done2904
    dec $I19
    set $P11, rx1058_cstack[$I19]
  rx1058_cstack_done2904:
    pop rx1058_rep, rx1058_bstack
    pop rx1058_pos, rx1058_bstack
    pop $I19, rx1058_bstack
    lt rx1058_pos, -1, rx1058_done2899
    lt rx1058_pos, 0, rx1058_fail2901
    eq $I19, 0, rx1058_fail2901
    nqp_islist $I20, rx1058_cstack
    unless $I20, rx1058_jump2902
    elements $I18, rx1058_bstack
    le $I18, 0, rx1058_cut2903
    dec $I18
    set $I18, rx1058_bstack[$I18]
  rx1058_cut2903:
    assign rx1058_cstack, $I18
  rx1058_jump2902:
    jump $I19
  rx1058_done2899:
    rx1058_cur."!cursor_fail"()
    .return (rx1058_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_183_1349901750.327_caps" :subid("cuid_memo_299_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_183_1349901750.327_nfa" :subid("cuid_memo_300_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 63
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<!>" :subid("cuid_184_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1297
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1062_tgt
    .local int rx1062_pos
    .local int rx1062_off
    .local int rx1062_eos
    .local int rx1062_rep
    .local pmc rx1062_cur
    .local pmc rx1062_curclass
    .local pmc rx1062_bstack
    .local pmc rx1062_cstack
    (rx1062_cur, rx1062_tgt, rx1062_pos, rx1062_curclass, rx1062_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1062_cur
    length rx1062_eos, rx1062_tgt
    eq $I19, 1, rx1062_restart2913
    gt rx1062_pos, rx1062_eos, rx1062_fail2914
    repr_get_attr_int $I11, self, rx1062_curclass, "$!from"
    ne $I11, -1, rxscan1063_done2920
    goto rxscan1063_scan2919
  rxscan1063_loop2918:
    inc rx1062_pos
    gt rx1062_pos, rx1062_eos, rx1062_fail2914
    repr_bind_attr_int rx1062_cur, rx1062_curclass, "$!from", rx1062_pos
  rxscan1063_scan2919:
    nqp_rxmark rx1062_bstack, rxscan1063_loop2918, rx1062_pos, 0
  rxscan1063_done2920:
    nqp_rxmark rx1062_bstack, rxcap1064_fail2922, rx1062_pos, 0
    add $I11, rx1062_pos, 1
    gt $I11, rx1062_eos, rx1062_fail2914
    substr $S10, rx1062_tgt, rx1062_pos, 1
    ne $S10, ucs4:"!", rx1062_fail2914
    add rx1062_pos, 1
    nqp_rxpeek $I19, rx1062_bstack, rxcap1064_fail2922
    inc $I19
    set $I11, rx1062_bstack[$I19]
    repr_bind_attr_int rx1062_cur, rx1062_curclass, "$!pos", rx1062_pos
    $P11 = rx1062_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1062_pos)
    rx1062_cstack = rx1062_cur."!cursor_capture"($P11, "sym")
    goto rxcap1064_done2921
  rxcap1064_fail2922:
    goto rx1062_fail2914
  rxcap1064_done2921:
    repr_bind_attr_int rx1062_cur, rx1062_curclass, "$!pos", rx1062_pos
    $P11 = rx1062_cur."O"("%symbolic_unary, :op<isfalse>")
    repr_get_attr_int $I11, $P11, rx1062_curclass, "$!pos"
    lt $I11, 0, rx1062_fail2914
    nqp_rxmark rx1062_bstack, rxsubrule1065_pass2923, -1, 0
  rxsubrule1065_pass2923:
    rx1062_cstack = rx1062_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1062_pos, $P11, rx1062_curclass, "$!pos"
    rx1062_cur."!cursor_pass"(rx1062_pos, "prefix:sym<!>", 'backtrack'=>1)
    .return (rx1062_cur)
  rx1062_restart2913:
    repr_get_attr_obj rx1062_cstack, rx1062_cur, rx1062_curclass, "$!cstack"
  rx1062_fail2914:
    unless rx1062_bstack, rx1062_done2912
    pop $I19, rx1062_bstack
    if_null rx1062_cstack, rx1062_cstack_done2917
    unless rx1062_cstack, rx1062_cstack_done2917
    dec $I19
    set $P11, rx1062_cstack[$I19]
  rx1062_cstack_done2917:
    pop rx1062_rep, rx1062_bstack
    pop rx1062_pos, rx1062_bstack
    pop $I19, rx1062_bstack
    lt rx1062_pos, -1, rx1062_done2912
    lt rx1062_pos, 0, rx1062_fail2914
    eq $I19, 0, rx1062_fail2914
    nqp_islist $I20, rx1062_cstack
    unless $I20, rx1062_jump2915
    elements $I18, rx1062_bstack
    le $I18, 0, rx1062_cut2916
    dec $I18
    set $I18, rx1062_bstack[$I18]
  rx1062_cut2916:
    assign rx1062_cstack, $I18
  rx1062_jump2915:
    jump $I19
  rx1062_done2912:
    rx1062_cur."!cursor_fail"()
    .return (rx1062_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_184_1349901750.327_caps" :subid("cuid_memo_301_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_184_1349901750.327_nfa" :subid("cuid_memo_302_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 33
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<|>" :subid("cuid_185_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1298
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1066_tgt
    .local int rx1066_pos
    .local int rx1066_off
    .local int rx1066_eos
    .local int rx1066_rep
    .local pmc rx1066_cur
    .local pmc rx1066_curclass
    .local pmc rx1066_bstack
    .local pmc rx1066_cstack
    (rx1066_cur, rx1066_tgt, rx1066_pos, rx1066_curclass, rx1066_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1066_cur
    length rx1066_eos, rx1066_tgt
    eq $I19, 1, rx1066_restart2926
    gt rx1066_pos, rx1066_eos, rx1066_fail2927
    repr_get_attr_int $I11, self, rx1066_curclass, "$!from"
    ne $I11, -1, rxscan1067_done2933
    goto rxscan1067_scan2932
  rxscan1067_loop2931:
    inc rx1066_pos
    gt rx1066_pos, rx1066_eos, rx1066_fail2927
    repr_bind_attr_int rx1066_cur, rx1066_curclass, "$!from", rx1066_pos
  rxscan1067_scan2932:
    nqp_rxmark rx1066_bstack, rxscan1067_loop2931, rx1066_pos, 0
  rxscan1067_done2933:
    nqp_rxmark rx1066_bstack, rxcap1068_fail2935, rx1066_pos, 0
    add $I11, rx1066_pos, 1
    gt $I11, rx1066_eos, rx1066_fail2927
    substr $S10, rx1066_tgt, rx1066_pos, 1
    ne $S10, ucs4:"|", rx1066_fail2927
    add rx1066_pos, 1
    nqp_rxpeek $I19, rx1066_bstack, rxcap1068_fail2935
    inc $I19
    set $I11, rx1066_bstack[$I19]
    repr_bind_attr_int rx1066_cur, rx1066_curclass, "$!pos", rx1066_pos
    $P11 = rx1066_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1066_pos)
    rx1066_cstack = rx1066_cur."!cursor_capture"($P11, "sym")
    goto rxcap1068_done2934
  rxcap1068_fail2935:
    goto rx1066_fail2927
  rxcap1068_done2934:
    repr_bind_attr_int rx1066_cur, rx1066_curclass, "$!pos", rx1066_pos
    $P11 = rx1066_cur."O"("%symbolic_unary")
    repr_get_attr_int $I11, $P11, rx1066_curclass, "$!pos"
    lt $I11, 0, rx1066_fail2927
    nqp_rxmark rx1066_bstack, rxsubrule1069_pass2936, -1, 0
  rxsubrule1069_pass2936:
    rx1066_cstack = rx1066_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1066_pos, $P11, rx1066_curclass, "$!pos"
    rx1066_cur."!cursor_pass"(rx1066_pos, "prefix:sym<|>", 'backtrack'=>1)
    .return (rx1066_cur)
  rx1066_restart2926:
    repr_get_attr_obj rx1066_cstack, rx1066_cur, rx1066_curclass, "$!cstack"
  rx1066_fail2927:
    unless rx1066_bstack, rx1066_done2925
    pop $I19, rx1066_bstack
    if_null rx1066_cstack, rx1066_cstack_done2930
    unless rx1066_cstack, rx1066_cstack_done2930
    dec $I19
    set $P11, rx1066_cstack[$I19]
  rx1066_cstack_done2930:
    pop rx1066_rep, rx1066_bstack
    pop rx1066_pos, rx1066_bstack
    pop $I19, rx1066_bstack
    lt rx1066_pos, -1, rx1066_done2925
    lt rx1066_pos, 0, rx1066_fail2927
    eq $I19, 0, rx1066_fail2927
    nqp_islist $I20, rx1066_cstack
    unless $I20, rx1066_jump2928
    elements $I18, rx1066_bstack
    le $I18, 0, rx1066_cut2929
    dec $I18
    set $I18, rx1066_bstack[$I18]
  rx1066_cut2929:
    assign rx1066_cstack, $I18
  rx1066_jump2928:
    jump $I19
  rx1066_done2925:
    rx1066_cur."!cursor_fail"()
    .return (rx1066_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_185_1349901750.327_caps" :subid("cuid_memo_303_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_185_1349901750.327_nfa" :subid("cuid_memo_304_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 124
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<*>" :subid("cuid_186_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1300
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1070_tgt
    .local int rx1070_pos
    .local int rx1070_off
    .local int rx1070_eos
    .local int rx1070_rep
    .local pmc rx1070_cur
    .local pmc rx1070_curclass
    .local pmc rx1070_bstack
    .local pmc rx1070_cstack
    (rx1070_cur, rx1070_tgt, rx1070_pos, rx1070_curclass, rx1070_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1070_cur
    length rx1070_eos, rx1070_tgt
    eq $I19, 1, rx1070_restart2939
    gt rx1070_pos, rx1070_eos, rx1070_fail2940
    repr_get_attr_int $I11, self, rx1070_curclass, "$!from"
    ne $I11, -1, rxscan1071_done2946
    goto rxscan1071_scan2945
  rxscan1071_loop2944:
    inc rx1070_pos
    gt rx1070_pos, rx1070_eos, rx1070_fail2940
    repr_bind_attr_int rx1070_cur, rx1070_curclass, "$!from", rx1070_pos
  rxscan1071_scan2945:
    nqp_rxmark rx1070_bstack, rxscan1071_loop2944, rx1070_pos, 0
  rxscan1071_done2946:
    nqp_rxmark rx1070_bstack, rxcap1072_fail2948, rx1070_pos, 0
    add $I11, rx1070_pos, 1
    gt $I11, rx1070_eos, rx1070_fail2940
    substr $S10, rx1070_tgt, rx1070_pos, 1
    ne $S10, ucs4:"*", rx1070_fail2940
    add rx1070_pos, 1
    nqp_rxpeek $I19, rx1070_bstack, rxcap1072_fail2948
    inc $I19
    set $I11, rx1070_bstack[$I19]
    repr_bind_attr_int rx1070_cur, rx1070_curclass, "$!pos", rx1070_pos
    $P11 = rx1070_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1070_pos)
    rx1070_cstack = rx1070_cur."!cursor_capture"($P11, "sym")
    goto rxcap1072_done2947
  rxcap1072_fail2948:
    goto rx1070_fail2940
  rxcap1072_done2947:
    repr_bind_attr_int rx1070_cur, rx1070_curclass, "$!pos", rx1070_pos
    $P11 = rx1070_cur."O"("%multiplicative, :op<mul_n>")
    repr_get_attr_int $I11, $P11, rx1070_curclass, "$!pos"
    lt $I11, 0, rx1070_fail2940
    nqp_rxmark rx1070_bstack, rxsubrule1073_pass2949, -1, 0
  rxsubrule1073_pass2949:
    rx1070_cstack = rx1070_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1070_pos, $P11, rx1070_curclass, "$!pos"
    rx1070_cur."!cursor_pass"(rx1070_pos, "infix:sym<*>", 'backtrack'=>1)
    .return (rx1070_cur)
  rx1070_restart2939:
    repr_get_attr_obj rx1070_cstack, rx1070_cur, rx1070_curclass, "$!cstack"
  rx1070_fail2940:
    unless rx1070_bstack, rx1070_done2938
    pop $I19, rx1070_bstack
    if_null rx1070_cstack, rx1070_cstack_done2943
    unless rx1070_cstack, rx1070_cstack_done2943
    dec $I19
    set $P11, rx1070_cstack[$I19]
  rx1070_cstack_done2943:
    pop rx1070_rep, rx1070_bstack
    pop rx1070_pos, rx1070_bstack
    pop $I19, rx1070_bstack
    lt rx1070_pos, -1, rx1070_done2938
    lt rx1070_pos, 0, rx1070_fail2940
    eq $I19, 0, rx1070_fail2940
    nqp_islist $I20, rx1070_cstack
    unless $I20, rx1070_jump2941
    elements $I18, rx1070_bstack
    le $I18, 0, rx1070_cut2942
    dec $I18
    set $I18, rx1070_bstack[$I18]
  rx1070_cut2942:
    assign rx1070_cstack, $I18
  rx1070_jump2941:
    jump $I19
  rx1070_done2938:
    rx1070_cur."!cursor_fail"()
    .return (rx1070_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_186_1349901750.327_caps" :subid("cuid_memo_305_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_186_1349901750.327_nfa" :subid("cuid_memo_306_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 42
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym</>" :subid("cuid_187_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1301
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1074_tgt
    .local int rx1074_pos
    .local int rx1074_off
    .local int rx1074_eos
    .local int rx1074_rep
    .local pmc rx1074_cur
    .local pmc rx1074_curclass
    .local pmc rx1074_bstack
    .local pmc rx1074_cstack
    (rx1074_cur, rx1074_tgt, rx1074_pos, rx1074_curclass, rx1074_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1074_cur
    length rx1074_eos, rx1074_tgt
    eq $I19, 1, rx1074_restart2952
    gt rx1074_pos, rx1074_eos, rx1074_fail2953
    repr_get_attr_int $I11, self, rx1074_curclass, "$!from"
    ne $I11, -1, rxscan1075_done2959
    goto rxscan1075_scan2958
  rxscan1075_loop2957:
    inc rx1074_pos
    gt rx1074_pos, rx1074_eos, rx1074_fail2953
    repr_bind_attr_int rx1074_cur, rx1074_curclass, "$!from", rx1074_pos
  rxscan1075_scan2958:
    nqp_rxmark rx1074_bstack, rxscan1075_loop2957, rx1074_pos, 0
  rxscan1075_done2959:
    nqp_rxmark rx1074_bstack, rxcap1076_fail2961, rx1074_pos, 0
    add $I11, rx1074_pos, 1
    gt $I11, rx1074_eos, rx1074_fail2953
    substr $S10, rx1074_tgt, rx1074_pos, 1
    ne $S10, ucs4:"/", rx1074_fail2953
    add rx1074_pos, 1
    nqp_rxpeek $I19, rx1074_bstack, rxcap1076_fail2961
    inc $I19
    set $I11, rx1074_bstack[$I19]
    repr_bind_attr_int rx1074_cur, rx1074_curclass, "$!pos", rx1074_pos
    $P11 = rx1074_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1074_pos)
    rx1074_cstack = rx1074_cur."!cursor_capture"($P11, "sym")
    goto rxcap1076_done2960
  rxcap1076_fail2961:
    goto rx1074_fail2953
  rxcap1076_done2960:
    repr_bind_attr_int rx1074_cur, rx1074_curclass, "$!pos", rx1074_pos
    $P11 = rx1074_cur."O"("%multiplicative, :op<div_n>")
    repr_get_attr_int $I11, $P11, rx1074_curclass, "$!pos"
    lt $I11, 0, rx1074_fail2953
    nqp_rxmark rx1074_bstack, rxsubrule1077_pass2962, -1, 0
  rxsubrule1077_pass2962:
    rx1074_cstack = rx1074_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1074_pos, $P11, rx1074_curclass, "$!pos"
    rx1074_cur."!cursor_pass"(rx1074_pos, "infix:sym</>", 'backtrack'=>1)
    .return (rx1074_cur)
  rx1074_restart2952:
    repr_get_attr_obj rx1074_cstack, rx1074_cur, rx1074_curclass, "$!cstack"
  rx1074_fail2953:
    unless rx1074_bstack, rx1074_done2951
    pop $I19, rx1074_bstack
    if_null rx1074_cstack, rx1074_cstack_done2956
    unless rx1074_cstack, rx1074_cstack_done2956
    dec $I19
    set $P11, rx1074_cstack[$I19]
  rx1074_cstack_done2956:
    pop rx1074_rep, rx1074_bstack
    pop rx1074_pos, rx1074_bstack
    pop $I19, rx1074_bstack
    lt rx1074_pos, -1, rx1074_done2951
    lt rx1074_pos, 0, rx1074_fail2953
    eq $I19, 0, rx1074_fail2953
    nqp_islist $I20, rx1074_cstack
    unless $I20, rx1074_jump2954
    elements $I18, rx1074_bstack
    le $I18, 0, rx1074_cut2955
    dec $I18
    set $I18, rx1074_bstack[$I18]
  rx1074_cut2955:
    assign rx1074_cstack, $I18
  rx1074_jump2954:
    jump $I19
  rx1074_done2951:
    rx1074_cur."!cursor_fail"()
    .return (rx1074_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_187_1349901750.327_caps" :subid("cuid_memo_307_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_187_1349901750.327_nfa" :subid("cuid_memo_308_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 47
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<%>" :subid("cuid_188_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1302
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1078_tgt
    .local int rx1078_pos
    .local int rx1078_off
    .local int rx1078_eos
    .local int rx1078_rep
    .local pmc rx1078_cur
    .local pmc rx1078_curclass
    .local pmc rx1078_bstack
    .local pmc rx1078_cstack
    (rx1078_cur, rx1078_tgt, rx1078_pos, rx1078_curclass, rx1078_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1078_cur
    length rx1078_eos, rx1078_tgt
    eq $I19, 1, rx1078_restart2965
    gt rx1078_pos, rx1078_eos, rx1078_fail2966
    repr_get_attr_int $I11, self, rx1078_curclass, "$!from"
    ne $I11, -1, rxscan1079_done2972
    goto rxscan1079_scan2971
  rxscan1079_loop2970:
    inc rx1078_pos
    gt rx1078_pos, rx1078_eos, rx1078_fail2966
    repr_bind_attr_int rx1078_cur, rx1078_curclass, "$!from", rx1078_pos
  rxscan1079_scan2971:
    nqp_rxmark rx1078_bstack, rxscan1079_loop2970, rx1078_pos, 0
  rxscan1079_done2972:
    nqp_rxmark rx1078_bstack, rxcap1080_fail2974, rx1078_pos, 0
    add $I11, rx1078_pos, 1
    gt $I11, rx1078_eos, rx1078_fail2966
    substr $S10, rx1078_tgt, rx1078_pos, 1
    ne $S10, ucs4:"%", rx1078_fail2966
    add rx1078_pos, 1
    nqp_rxpeek $I19, rx1078_bstack, rxcap1080_fail2974
    inc $I19
    set $I11, rx1078_bstack[$I19]
    repr_bind_attr_int rx1078_cur, rx1078_curclass, "$!pos", rx1078_pos
    $P11 = rx1078_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1078_pos)
    rx1078_cstack = rx1078_cur."!cursor_capture"($P11, "sym")
    goto rxcap1080_done2973
  rxcap1080_fail2974:
    goto rx1078_fail2966
  rxcap1080_done2973:
    repr_bind_attr_int rx1078_cur, rx1078_curclass, "$!pos", rx1078_pos
    $P11 = rx1078_cur."O"("%multiplicative, :op<mod_n>")
    repr_get_attr_int $I11, $P11, rx1078_curclass, "$!pos"
    lt $I11, 0, rx1078_fail2966
    nqp_rxmark rx1078_bstack, rxsubrule1081_pass2975, -1, 0
  rxsubrule1081_pass2975:
    rx1078_cstack = rx1078_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1078_pos, $P11, rx1078_curclass, "$!pos"
    rx1078_cur."!cursor_pass"(rx1078_pos, "infix:sym<%>", 'backtrack'=>1)
    .return (rx1078_cur)
  rx1078_restart2965:
    repr_get_attr_obj rx1078_cstack, rx1078_cur, rx1078_curclass, "$!cstack"
  rx1078_fail2966:
    unless rx1078_bstack, rx1078_done2964
    pop $I19, rx1078_bstack
    if_null rx1078_cstack, rx1078_cstack_done2969
    unless rx1078_cstack, rx1078_cstack_done2969
    dec $I19
    set $P11, rx1078_cstack[$I19]
  rx1078_cstack_done2969:
    pop rx1078_rep, rx1078_bstack
    pop rx1078_pos, rx1078_bstack
    pop $I19, rx1078_bstack
    lt rx1078_pos, -1, rx1078_done2964
    lt rx1078_pos, 0, rx1078_fail2966
    eq $I19, 0, rx1078_fail2966
    nqp_islist $I20, rx1078_cstack
    unless $I20, rx1078_jump2967
    elements $I18, rx1078_bstack
    le $I18, 0, rx1078_cut2968
    dec $I18
    set $I18, rx1078_bstack[$I18]
  rx1078_cut2968:
    assign rx1078_cstack, $I18
  rx1078_jump2967:
    jump $I19
  rx1078_done2964:
    rx1078_cur."!cursor_fail"()
    .return (rx1078_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_188_1349901750.327_caps" :subid("cuid_memo_309_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_188_1349901750.327_nfa" :subid("cuid_memo_310_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 37
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+&>" :subid("cuid_189_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1303
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1082_tgt
    .local int rx1082_pos
    .local int rx1082_off
    .local int rx1082_eos
    .local int rx1082_rep
    .local pmc rx1082_cur
    .local pmc rx1082_curclass
    .local pmc rx1082_bstack
    .local pmc rx1082_cstack
    (rx1082_cur, rx1082_tgt, rx1082_pos, rx1082_curclass, rx1082_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1082_cur
    length rx1082_eos, rx1082_tgt
    eq $I19, 1, rx1082_restart2978
    gt rx1082_pos, rx1082_eos, rx1082_fail2979
    repr_get_attr_int $I11, self, rx1082_curclass, "$!from"
    ne $I11, -1, rxscan1083_done2985
    goto rxscan1083_scan2984
  rxscan1083_loop2983:
    inc rx1082_pos
    gt rx1082_pos, rx1082_eos, rx1082_fail2979
    repr_bind_attr_int rx1082_cur, rx1082_curclass, "$!from", rx1082_pos
  rxscan1083_scan2984:
    nqp_rxmark rx1082_bstack, rxscan1083_loop2983, rx1082_pos, 0
  rxscan1083_done2985:
    nqp_rxmark rx1082_bstack, rxcap1084_fail2987, rx1082_pos, 0
    add $I11, rx1082_pos, 2
    gt $I11, rx1082_eos, rx1082_fail2979
    substr $S10, rx1082_tgt, rx1082_pos, 2
    ne $S10, ucs4:"+&", rx1082_fail2979
    add rx1082_pos, 2
    nqp_rxpeek $I19, rx1082_bstack, rxcap1084_fail2987
    inc $I19
    set $I11, rx1082_bstack[$I19]
    repr_bind_attr_int rx1082_cur, rx1082_curclass, "$!pos", rx1082_pos
    $P11 = rx1082_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1082_pos)
    rx1082_cstack = rx1082_cur."!cursor_capture"($P11, "sym")
    goto rxcap1084_done2986
  rxcap1084_fail2987:
    goto rx1082_fail2979
  rxcap1084_done2986:
    repr_bind_attr_int rx1082_cur, rx1082_curclass, "$!pos", rx1082_pos
    $P11 = rx1082_cur."O"("%multiplicative, :op<bitand_i>")
    repr_get_attr_int $I11, $P11, rx1082_curclass, "$!pos"
    lt $I11, 0, rx1082_fail2979
    nqp_rxmark rx1082_bstack, rxsubrule1085_pass2988, -1, 0
  rxsubrule1085_pass2988:
    rx1082_cstack = rx1082_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1082_pos, $P11, rx1082_curclass, "$!pos"
    rx1082_cur."!cursor_pass"(rx1082_pos, "infix:sym<+&>", 'backtrack'=>1)
    .return (rx1082_cur)
  rx1082_restart2978:
    repr_get_attr_obj rx1082_cstack, rx1082_cur, rx1082_curclass, "$!cstack"
  rx1082_fail2979:
    unless rx1082_bstack, rx1082_done2977
    pop $I19, rx1082_bstack
    if_null rx1082_cstack, rx1082_cstack_done2982
    unless rx1082_cstack, rx1082_cstack_done2982
    dec $I19
    set $P11, rx1082_cstack[$I19]
  rx1082_cstack_done2982:
    pop rx1082_rep, rx1082_bstack
    pop rx1082_pos, rx1082_bstack
    pop $I19, rx1082_bstack
    lt rx1082_pos, -1, rx1082_done2977
    lt rx1082_pos, 0, rx1082_fail2979
    eq $I19, 0, rx1082_fail2979
    nqp_islist $I20, rx1082_cstack
    unless $I20, rx1082_jump2980
    elements $I18, rx1082_bstack
    le $I18, 0, rx1082_cut2981
    dec $I18
    set $I18, rx1082_bstack[$I18]
  rx1082_cut2981:
    assign rx1082_cstack, $I18
  rx1082_jump2980:
    jump $I19
  rx1082_done2977:
    rx1082_cur."!cursor_fail"()
    .return (rx1082_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_189_1349901750.327_caps" :subid("cuid_memo_311_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_189_1349901750.327_nfa" :subid("cuid_memo_312_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 43
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 38
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+>" :subid("cuid_190_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1305
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1086_tgt
    .local int rx1086_pos
    .local int rx1086_off
    .local int rx1086_eos
    .local int rx1086_rep
    .local pmc rx1086_cur
    .local pmc rx1086_curclass
    .local pmc rx1086_bstack
    .local pmc rx1086_cstack
    (rx1086_cur, rx1086_tgt, rx1086_pos, rx1086_curclass, rx1086_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1086_cur
    length rx1086_eos, rx1086_tgt
    eq $I19, 1, rx1086_restart2991
    gt rx1086_pos, rx1086_eos, rx1086_fail2992
    repr_get_attr_int $I11, self, rx1086_curclass, "$!from"
    ne $I11, -1, rxscan1087_done2998
    goto rxscan1087_scan2997
  rxscan1087_loop2996:
    inc rx1086_pos
    gt rx1086_pos, rx1086_eos, rx1086_fail2992
    repr_bind_attr_int rx1086_cur, rx1086_curclass, "$!from", rx1086_pos
  rxscan1087_scan2997:
    nqp_rxmark rx1086_bstack, rxscan1087_loop2996, rx1086_pos, 0
  rxscan1087_done2998:
    nqp_rxmark rx1086_bstack, rxcap1088_fail3000, rx1086_pos, 0
    add $I11, rx1086_pos, 1
    gt $I11, rx1086_eos, rx1086_fail2992
    substr $S10, rx1086_tgt, rx1086_pos, 1
    ne $S10, ucs4:"+", rx1086_fail2992
    add rx1086_pos, 1
    nqp_rxpeek $I19, rx1086_bstack, rxcap1088_fail3000
    inc $I19
    set $I11, rx1086_bstack[$I19]
    repr_bind_attr_int rx1086_cur, rx1086_curclass, "$!pos", rx1086_pos
    $P11 = rx1086_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1086_pos)
    rx1086_cstack = rx1086_cur."!cursor_capture"($P11, "sym")
    goto rxcap1088_done2999
  rxcap1088_fail3000:
    goto rx1086_fail2992
  rxcap1088_done2999:
    repr_bind_attr_int rx1086_cur, rx1086_curclass, "$!pos", rx1086_pos
    $P11 = rx1086_cur."O"("%additive, :op<add_n>")
    repr_get_attr_int $I11, $P11, rx1086_curclass, "$!pos"
    lt $I11, 0, rx1086_fail2992
    nqp_rxmark rx1086_bstack, rxsubrule1089_pass3001, -1, 0
  rxsubrule1089_pass3001:
    rx1086_cstack = rx1086_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1086_pos, $P11, rx1086_curclass, "$!pos"
    rx1086_cur."!cursor_pass"(rx1086_pos, "infix:sym<+>", 'backtrack'=>1)
    .return (rx1086_cur)
  rx1086_restart2991:
    repr_get_attr_obj rx1086_cstack, rx1086_cur, rx1086_curclass, "$!cstack"
  rx1086_fail2992:
    unless rx1086_bstack, rx1086_done2990
    pop $I19, rx1086_bstack
    if_null rx1086_cstack, rx1086_cstack_done2995
    unless rx1086_cstack, rx1086_cstack_done2995
    dec $I19
    set $P11, rx1086_cstack[$I19]
  rx1086_cstack_done2995:
    pop rx1086_rep, rx1086_bstack
    pop rx1086_pos, rx1086_bstack
    pop $I19, rx1086_bstack
    lt rx1086_pos, -1, rx1086_done2990
    lt rx1086_pos, 0, rx1086_fail2992
    eq $I19, 0, rx1086_fail2992
    nqp_islist $I20, rx1086_cstack
    unless $I20, rx1086_jump2993
    elements $I18, rx1086_bstack
    le $I18, 0, rx1086_cut2994
    dec $I18
    set $I18, rx1086_bstack[$I18]
  rx1086_cut2994:
    assign rx1086_cstack, $I18
  rx1086_jump2993:
    jump $I19
  rx1086_done2990:
    rx1086_cur."!cursor_fail"()
    .return (rx1086_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_190_1349901750.327_caps" :subid("cuid_memo_313_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_190_1349901750.327_nfa" :subid("cuid_memo_314_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 43
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<->" :subid("cuid_191_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1306
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1090_tgt
    .local int rx1090_pos
    .local int rx1090_off
    .local int rx1090_eos
    .local int rx1090_rep
    .local pmc rx1090_cur
    .local pmc rx1090_curclass
    .local pmc rx1090_bstack
    .local pmc rx1090_cstack
    (rx1090_cur, rx1090_tgt, rx1090_pos, rx1090_curclass, rx1090_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1090_cur
    length rx1090_eos, rx1090_tgt
    eq $I19, 1, rx1090_restart3004
    gt rx1090_pos, rx1090_eos, rx1090_fail3005
    repr_get_attr_int $I11, self, rx1090_curclass, "$!from"
    ne $I11, -1, rxscan1091_done3011
    goto rxscan1091_scan3010
  rxscan1091_loop3009:
    inc rx1090_pos
    gt rx1090_pos, rx1090_eos, rx1090_fail3005
    repr_bind_attr_int rx1090_cur, rx1090_curclass, "$!from", rx1090_pos
  rxscan1091_scan3010:
    nqp_rxmark rx1090_bstack, rxscan1091_loop3009, rx1090_pos, 0
  rxscan1091_done3011:
    nqp_rxmark rx1090_bstack, rxcap1092_fail3013, rx1090_pos, 0
    add $I11, rx1090_pos, 1
    gt $I11, rx1090_eos, rx1090_fail3005
    substr $S10, rx1090_tgt, rx1090_pos, 1
    ne $S10, ucs4:"-", rx1090_fail3005
    add rx1090_pos, 1
    nqp_rxpeek $I19, rx1090_bstack, rxcap1092_fail3013
    inc $I19
    set $I11, rx1090_bstack[$I19]
    repr_bind_attr_int rx1090_cur, rx1090_curclass, "$!pos", rx1090_pos
    $P11 = rx1090_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1090_pos)
    rx1090_cstack = rx1090_cur."!cursor_capture"($P11, "sym")
    goto rxcap1092_done3012
  rxcap1092_fail3013:
    goto rx1090_fail3005
  rxcap1092_done3012:
    repr_bind_attr_int rx1090_cur, rx1090_curclass, "$!pos", rx1090_pos
    $P11 = rx1090_cur."O"("%additive, :op<sub_n>")
    repr_get_attr_int $I11, $P11, rx1090_curclass, "$!pos"
    lt $I11, 0, rx1090_fail3005
    nqp_rxmark rx1090_bstack, rxsubrule1093_pass3014, -1, 0
  rxsubrule1093_pass3014:
    rx1090_cstack = rx1090_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1090_pos, $P11, rx1090_curclass, "$!pos"
    rx1090_cur."!cursor_pass"(rx1090_pos, "infix:sym<->", 'backtrack'=>1)
    .return (rx1090_cur)
  rx1090_restart3004:
    repr_get_attr_obj rx1090_cstack, rx1090_cur, rx1090_curclass, "$!cstack"
  rx1090_fail3005:
    unless rx1090_bstack, rx1090_done3003
    pop $I19, rx1090_bstack
    if_null rx1090_cstack, rx1090_cstack_done3008
    unless rx1090_cstack, rx1090_cstack_done3008
    dec $I19
    set $P11, rx1090_cstack[$I19]
  rx1090_cstack_done3008:
    pop rx1090_rep, rx1090_bstack
    pop rx1090_pos, rx1090_bstack
    pop $I19, rx1090_bstack
    lt rx1090_pos, -1, rx1090_done3003
    lt rx1090_pos, 0, rx1090_fail3005
    eq $I19, 0, rx1090_fail3005
    nqp_islist $I20, rx1090_cstack
    unless $I20, rx1090_jump3006
    elements $I18, rx1090_bstack
    le $I18, 0, rx1090_cut3007
    dec $I18
    set $I18, rx1090_bstack[$I18]
  rx1090_cut3007:
    assign rx1090_cstack, $I18
  rx1090_jump3006:
    jump $I19
  rx1090_done3003:
    rx1090_cur."!cursor_fail"()
    .return (rx1090_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_191_1349901750.327_caps" :subid("cuid_memo_315_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_191_1349901750.327_nfa" :subid("cuid_memo_316_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 45
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+|>" :subid("cuid_192_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1307
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1094_tgt
    .local int rx1094_pos
    .local int rx1094_off
    .local int rx1094_eos
    .local int rx1094_rep
    .local pmc rx1094_cur
    .local pmc rx1094_curclass
    .local pmc rx1094_bstack
    .local pmc rx1094_cstack
    (rx1094_cur, rx1094_tgt, rx1094_pos, rx1094_curclass, rx1094_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1094_cur
    length rx1094_eos, rx1094_tgt
    eq $I19, 1, rx1094_restart3017
    gt rx1094_pos, rx1094_eos, rx1094_fail3018
    repr_get_attr_int $I11, self, rx1094_curclass, "$!from"
    ne $I11, -1, rxscan1095_done3024
    goto rxscan1095_scan3023
  rxscan1095_loop3022:
    inc rx1094_pos
    gt rx1094_pos, rx1094_eos, rx1094_fail3018
    repr_bind_attr_int rx1094_cur, rx1094_curclass, "$!from", rx1094_pos
  rxscan1095_scan3023:
    nqp_rxmark rx1094_bstack, rxscan1095_loop3022, rx1094_pos, 0
  rxscan1095_done3024:
    nqp_rxmark rx1094_bstack, rxcap1096_fail3026, rx1094_pos, 0
    add $I11, rx1094_pos, 2
    gt $I11, rx1094_eos, rx1094_fail3018
    substr $S10, rx1094_tgt, rx1094_pos, 2
    ne $S10, ucs4:"+|", rx1094_fail3018
    add rx1094_pos, 2
    nqp_rxpeek $I19, rx1094_bstack, rxcap1096_fail3026
    inc $I19
    set $I11, rx1094_bstack[$I19]
    repr_bind_attr_int rx1094_cur, rx1094_curclass, "$!pos", rx1094_pos
    $P11 = rx1094_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1094_pos)
    rx1094_cstack = rx1094_cur."!cursor_capture"($P11, "sym")
    goto rxcap1096_done3025
  rxcap1096_fail3026:
    goto rx1094_fail3018
  rxcap1096_done3025:
    repr_bind_attr_int rx1094_cur, rx1094_curclass, "$!pos", rx1094_pos
    $P11 = rx1094_cur."O"("%additive, :op<bitor_i>")
    repr_get_attr_int $I11, $P11, rx1094_curclass, "$!pos"
    lt $I11, 0, rx1094_fail3018
    nqp_rxmark rx1094_bstack, rxsubrule1097_pass3027, -1, 0
  rxsubrule1097_pass3027:
    rx1094_cstack = rx1094_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1094_pos, $P11, rx1094_curclass, "$!pos"
    rx1094_cur."!cursor_pass"(rx1094_pos, "infix:sym<+|>", 'backtrack'=>1)
    .return (rx1094_cur)
  rx1094_restart3017:
    repr_get_attr_obj rx1094_cstack, rx1094_cur, rx1094_curclass, "$!cstack"
  rx1094_fail3018:
    unless rx1094_bstack, rx1094_done3016
    pop $I19, rx1094_bstack
    if_null rx1094_cstack, rx1094_cstack_done3021
    unless rx1094_cstack, rx1094_cstack_done3021
    dec $I19
    set $P11, rx1094_cstack[$I19]
  rx1094_cstack_done3021:
    pop rx1094_rep, rx1094_bstack
    pop rx1094_pos, rx1094_bstack
    pop $I19, rx1094_bstack
    lt rx1094_pos, -1, rx1094_done3016
    lt rx1094_pos, 0, rx1094_fail3018
    eq $I19, 0, rx1094_fail3018
    nqp_islist $I20, rx1094_cstack
    unless $I20, rx1094_jump3019
    elements $I18, rx1094_bstack
    le $I18, 0, rx1094_cut3020
    dec $I18
    set $I18, rx1094_bstack[$I18]
  rx1094_cut3020:
    assign rx1094_cstack, $I18
  rx1094_jump3019:
    jump $I19
  rx1094_done3016:
    rx1094_cur."!cursor_fail"()
    .return (rx1094_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_192_1349901750.327_caps" :subid("cuid_memo_317_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_192_1349901750.327_nfa" :subid("cuid_memo_318_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 43
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 124
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+^>" :subid("cuid_193_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1308
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1098_tgt
    .local int rx1098_pos
    .local int rx1098_off
    .local int rx1098_eos
    .local int rx1098_rep
    .local pmc rx1098_cur
    .local pmc rx1098_curclass
    .local pmc rx1098_bstack
    .local pmc rx1098_cstack
    (rx1098_cur, rx1098_tgt, rx1098_pos, rx1098_curclass, rx1098_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1098_cur
    length rx1098_eos, rx1098_tgt
    eq $I19, 1, rx1098_restart3030
    gt rx1098_pos, rx1098_eos, rx1098_fail3031
    repr_get_attr_int $I11, self, rx1098_curclass, "$!from"
    ne $I11, -1, rxscan1099_done3037
    goto rxscan1099_scan3036
  rxscan1099_loop3035:
    inc rx1098_pos
    gt rx1098_pos, rx1098_eos, rx1098_fail3031
    repr_bind_attr_int rx1098_cur, rx1098_curclass, "$!from", rx1098_pos
  rxscan1099_scan3036:
    nqp_rxmark rx1098_bstack, rxscan1099_loop3035, rx1098_pos, 0
  rxscan1099_done3037:
    nqp_rxmark rx1098_bstack, rxcap1100_fail3039, rx1098_pos, 0
    add $I11, rx1098_pos, 2
    gt $I11, rx1098_eos, rx1098_fail3031
    substr $S10, rx1098_tgt, rx1098_pos, 2
    ne $S10, ucs4:"+^", rx1098_fail3031
    add rx1098_pos, 2
    nqp_rxpeek $I19, rx1098_bstack, rxcap1100_fail3039
    inc $I19
    set $I11, rx1098_bstack[$I19]
    repr_bind_attr_int rx1098_cur, rx1098_curclass, "$!pos", rx1098_pos
    $P11 = rx1098_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1098_pos)
    rx1098_cstack = rx1098_cur."!cursor_capture"($P11, "sym")
    goto rxcap1100_done3038
  rxcap1100_fail3039:
    goto rx1098_fail3031
  rxcap1100_done3038:
    repr_bind_attr_int rx1098_cur, rx1098_curclass, "$!pos", rx1098_pos
    $P11 = rx1098_cur."O"("%additive, :op<bitxor_i>")
    repr_get_attr_int $I11, $P11, rx1098_curclass, "$!pos"
    lt $I11, 0, rx1098_fail3031
    nqp_rxmark rx1098_bstack, rxsubrule1101_pass3040, -1, 0
  rxsubrule1101_pass3040:
    rx1098_cstack = rx1098_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1098_pos, $P11, rx1098_curclass, "$!pos"
    rx1098_cur."!cursor_pass"(rx1098_pos, "infix:sym<+^>", 'backtrack'=>1)
    .return (rx1098_cur)
  rx1098_restart3030:
    repr_get_attr_obj rx1098_cstack, rx1098_cur, rx1098_curclass, "$!cstack"
  rx1098_fail3031:
    unless rx1098_bstack, rx1098_done3029
    pop $I19, rx1098_bstack
    if_null rx1098_cstack, rx1098_cstack_done3034
    unless rx1098_cstack, rx1098_cstack_done3034
    dec $I19
    set $P11, rx1098_cstack[$I19]
  rx1098_cstack_done3034:
    pop rx1098_rep, rx1098_bstack
    pop rx1098_pos, rx1098_bstack
    pop $I19, rx1098_bstack
    lt rx1098_pos, -1, rx1098_done3029
    lt rx1098_pos, 0, rx1098_fail3031
    eq $I19, 0, rx1098_fail3031
    nqp_islist $I20, rx1098_cstack
    unless $I20, rx1098_jump3032
    elements $I18, rx1098_bstack
    le $I18, 0, rx1098_cut3033
    dec $I18
    set $I18, rx1098_bstack[$I18]
  rx1098_cut3033:
    assign rx1098_cstack, $I18
  rx1098_jump3032:
    jump $I19
  rx1098_done3029:
    rx1098_cur."!cursor_fail"()
    .return (rx1098_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_193_1349901750.327_caps" :subid("cuid_memo_319_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_193_1349901750.327_nfa" :subid("cuid_memo_320_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 43
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 94
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<~>" :subid("cuid_194_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1310
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1102_tgt
    .local int rx1102_pos
    .local int rx1102_off
    .local int rx1102_eos
    .local int rx1102_rep
    .local pmc rx1102_cur
    .local pmc rx1102_curclass
    .local pmc rx1102_bstack
    .local pmc rx1102_cstack
    (rx1102_cur, rx1102_tgt, rx1102_pos, rx1102_curclass, rx1102_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1102_cur
    length rx1102_eos, rx1102_tgt
    eq $I19, 1, rx1102_restart3043
    gt rx1102_pos, rx1102_eos, rx1102_fail3044
    repr_get_attr_int $I11, self, rx1102_curclass, "$!from"
    ne $I11, -1, rxscan1103_done3050
    goto rxscan1103_scan3049
  rxscan1103_loop3048:
    inc rx1102_pos
    gt rx1102_pos, rx1102_eos, rx1102_fail3044
    repr_bind_attr_int rx1102_cur, rx1102_curclass, "$!from", rx1102_pos
  rxscan1103_scan3049:
    nqp_rxmark rx1102_bstack, rxscan1103_loop3048, rx1102_pos, 0
  rxscan1103_done3050:
    nqp_rxmark rx1102_bstack, rxcap1104_fail3052, rx1102_pos, 0
    add $I11, rx1102_pos, 1
    gt $I11, rx1102_eos, rx1102_fail3044
    substr $S10, rx1102_tgt, rx1102_pos, 1
    ne $S10, ucs4:"~", rx1102_fail3044
    add rx1102_pos, 1
    nqp_rxpeek $I19, rx1102_bstack, rxcap1104_fail3052
    inc $I19
    set $I11, rx1102_bstack[$I19]
    repr_bind_attr_int rx1102_cur, rx1102_curclass, "$!pos", rx1102_pos
    $P11 = rx1102_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1102_pos)
    rx1102_cstack = rx1102_cur."!cursor_capture"($P11, "sym")
    goto rxcap1104_done3051
  rxcap1104_fail3052:
    goto rx1102_fail3044
  rxcap1104_done3051:
    repr_bind_attr_int rx1102_cur, rx1102_curclass, "$!pos", rx1102_pos
    $P11 = rx1102_cur."O"("%concatenation , :op<concat>")
    repr_get_attr_int $I11, $P11, rx1102_curclass, "$!pos"
    lt $I11, 0, rx1102_fail3044
    nqp_rxmark rx1102_bstack, rxsubrule1105_pass3053, -1, 0
  rxsubrule1105_pass3053:
    rx1102_cstack = rx1102_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1102_pos, $P11, rx1102_curclass, "$!pos"
    rx1102_cur."!cursor_pass"(rx1102_pos, "infix:sym<~>", 'backtrack'=>1)
    .return (rx1102_cur)
  rx1102_restart3043:
    repr_get_attr_obj rx1102_cstack, rx1102_cur, rx1102_curclass, "$!cstack"
  rx1102_fail3044:
    unless rx1102_bstack, rx1102_done3042
    pop $I19, rx1102_bstack
    if_null rx1102_cstack, rx1102_cstack_done3047
    unless rx1102_cstack, rx1102_cstack_done3047
    dec $I19
    set $P11, rx1102_cstack[$I19]
  rx1102_cstack_done3047:
    pop rx1102_rep, rx1102_bstack
    pop rx1102_pos, rx1102_bstack
    pop $I19, rx1102_bstack
    lt rx1102_pos, -1, rx1102_done3042
    lt rx1102_pos, 0, rx1102_fail3044
    eq $I19, 0, rx1102_fail3044
    nqp_islist $I20, rx1102_cstack
    unless $I20, rx1102_jump3045
    elements $I18, rx1102_bstack
    le $I18, 0, rx1102_cut3046
    dec $I18
    set $I18, rx1102_bstack[$I18]
  rx1102_cut3046:
    assign rx1102_cstack, $I18
  rx1102_jump3045:
    jump $I19
  rx1102_done3042:
    rx1102_cur."!cursor_fail"()
    .return (rx1102_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_194_1349901750.327_caps" :subid("cuid_memo_321_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_194_1349901750.327_nfa" :subid("cuid_memo_322_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 126
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<==>" :subid("cuid_195_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1312
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1106_tgt
    .local int rx1106_pos
    .local int rx1106_off
    .local int rx1106_eos
    .local int rx1106_rep
    .local pmc rx1106_cur
    .local pmc rx1106_curclass
    .local pmc rx1106_bstack
    .local pmc rx1106_cstack
    (rx1106_cur, rx1106_tgt, rx1106_pos, rx1106_curclass, rx1106_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1106_cur
    length rx1106_eos, rx1106_tgt
    eq $I19, 1, rx1106_restart3056
    gt rx1106_pos, rx1106_eos, rx1106_fail3057
    repr_get_attr_int $I11, self, rx1106_curclass, "$!from"
    ne $I11, -1, rxscan1107_done3063
    goto rxscan1107_scan3062
  rxscan1107_loop3061:
    inc rx1106_pos
    gt rx1106_pos, rx1106_eos, rx1106_fail3057
    repr_bind_attr_int rx1106_cur, rx1106_curclass, "$!from", rx1106_pos
  rxscan1107_scan3062:
    nqp_rxmark rx1106_bstack, rxscan1107_loop3061, rx1106_pos, 0
  rxscan1107_done3063:
    nqp_rxmark rx1106_bstack, rxcap1108_fail3065, rx1106_pos, 0
    add $I11, rx1106_pos, 2
    gt $I11, rx1106_eos, rx1106_fail3057
    substr $S10, rx1106_tgt, rx1106_pos, 2
    ne $S10, ucs4:"==", rx1106_fail3057
    add rx1106_pos, 2
    nqp_rxpeek $I19, rx1106_bstack, rxcap1108_fail3065
    inc $I19
    set $I11, rx1106_bstack[$I19]
    repr_bind_attr_int rx1106_cur, rx1106_curclass, "$!pos", rx1106_pos
    $P11 = rx1106_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1106_pos)
    rx1106_cstack = rx1106_cur."!cursor_capture"($P11, "sym")
    goto rxcap1108_done3064
  rxcap1108_fail3065:
    goto rx1106_fail3057
  rxcap1108_done3064:
    repr_bind_attr_int rx1106_cur, rx1106_curclass, "$!pos", rx1106_pos
    $P11 = rx1106_cur."O"("%relational, :op<iseq_n>")
    repr_get_attr_int $I11, $P11, rx1106_curclass, "$!pos"
    lt $I11, 0, rx1106_fail3057
    nqp_rxmark rx1106_bstack, rxsubrule1109_pass3066, -1, 0
  rxsubrule1109_pass3066:
    rx1106_cstack = rx1106_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1106_pos, $P11, rx1106_curclass, "$!pos"
    rx1106_cur."!cursor_pass"(rx1106_pos, "infix:sym<==>", 'backtrack'=>1)
    .return (rx1106_cur)
  rx1106_restart3056:
    repr_get_attr_obj rx1106_cstack, rx1106_cur, rx1106_curclass, "$!cstack"
  rx1106_fail3057:
    unless rx1106_bstack, rx1106_done3055
    pop $I19, rx1106_bstack
    if_null rx1106_cstack, rx1106_cstack_done3060
    unless rx1106_cstack, rx1106_cstack_done3060
    dec $I19
    set $P11, rx1106_cstack[$I19]
  rx1106_cstack_done3060:
    pop rx1106_rep, rx1106_bstack
    pop rx1106_pos, rx1106_bstack
    pop $I19, rx1106_bstack
    lt rx1106_pos, -1, rx1106_done3055
    lt rx1106_pos, 0, rx1106_fail3057
    eq $I19, 0, rx1106_fail3057
    nqp_islist $I20, rx1106_cstack
    unless $I20, rx1106_jump3058
    elements $I18, rx1106_bstack
    le $I18, 0, rx1106_cut3059
    dec $I18
    set $I18, rx1106_bstack[$I18]
  rx1106_cut3059:
    assign rx1106_cstack, $I18
  rx1106_jump3058:
    jump $I19
  rx1106_done3055:
    rx1106_cur."!cursor_fail"()
    .return (rx1106_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_195_1349901750.327_caps" :subid("cuid_memo_323_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_195_1349901750.327_nfa" :subid("cuid_memo_324_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 61
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 61
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<!=>" :subid("cuid_196_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1313
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1110_tgt
    .local int rx1110_pos
    .local int rx1110_off
    .local int rx1110_eos
    .local int rx1110_rep
    .local pmc rx1110_cur
    .local pmc rx1110_curclass
    .local pmc rx1110_bstack
    .local pmc rx1110_cstack
    (rx1110_cur, rx1110_tgt, rx1110_pos, rx1110_curclass, rx1110_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1110_cur
    length rx1110_eos, rx1110_tgt
    eq $I19, 1, rx1110_restart3069
    gt rx1110_pos, rx1110_eos, rx1110_fail3070
    repr_get_attr_int $I11, self, rx1110_curclass, "$!from"
    ne $I11, -1, rxscan1111_done3076
    goto rxscan1111_scan3075
  rxscan1111_loop3074:
    inc rx1110_pos
    gt rx1110_pos, rx1110_eos, rx1110_fail3070
    repr_bind_attr_int rx1110_cur, rx1110_curclass, "$!from", rx1110_pos
  rxscan1111_scan3075:
    nqp_rxmark rx1110_bstack, rxscan1111_loop3074, rx1110_pos, 0
  rxscan1111_done3076:
    nqp_rxmark rx1110_bstack, rxcap1112_fail3078, rx1110_pos, 0
    add $I11, rx1110_pos, 2
    gt $I11, rx1110_eos, rx1110_fail3070
    substr $S10, rx1110_tgt, rx1110_pos, 2
    ne $S10, ucs4:"!=", rx1110_fail3070
    add rx1110_pos, 2
    nqp_rxpeek $I19, rx1110_bstack, rxcap1112_fail3078
    inc $I19
    set $I11, rx1110_bstack[$I19]
    repr_bind_attr_int rx1110_cur, rx1110_curclass, "$!pos", rx1110_pos
    $P11 = rx1110_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1110_pos)
    rx1110_cstack = rx1110_cur."!cursor_capture"($P11, "sym")
    goto rxcap1112_done3077
  rxcap1112_fail3078:
    goto rx1110_fail3070
  rxcap1112_done3077:
    repr_bind_attr_int rx1110_cur, rx1110_curclass, "$!pos", rx1110_pos
    $P11 = rx1110_cur."O"("%relational, :op<isne_n>")
    repr_get_attr_int $I11, $P11, rx1110_curclass, "$!pos"
    lt $I11, 0, rx1110_fail3070
    nqp_rxmark rx1110_bstack, rxsubrule1113_pass3079, -1, 0
  rxsubrule1113_pass3079:
    rx1110_cstack = rx1110_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1110_pos, $P11, rx1110_curclass, "$!pos"
    rx1110_cur."!cursor_pass"(rx1110_pos, "infix:sym<!=>", 'backtrack'=>1)
    .return (rx1110_cur)
  rx1110_restart3069:
    repr_get_attr_obj rx1110_cstack, rx1110_cur, rx1110_curclass, "$!cstack"
  rx1110_fail3070:
    unless rx1110_bstack, rx1110_done3068
    pop $I19, rx1110_bstack
    if_null rx1110_cstack, rx1110_cstack_done3073
    unless rx1110_cstack, rx1110_cstack_done3073
    dec $I19
    set $P11, rx1110_cstack[$I19]
  rx1110_cstack_done3073:
    pop rx1110_rep, rx1110_bstack
    pop rx1110_pos, rx1110_bstack
    pop $I19, rx1110_bstack
    lt rx1110_pos, -1, rx1110_done3068
    lt rx1110_pos, 0, rx1110_fail3070
    eq $I19, 0, rx1110_fail3070
    nqp_islist $I20, rx1110_cstack
    unless $I20, rx1110_jump3071
    elements $I18, rx1110_bstack
    le $I18, 0, rx1110_cut3072
    dec $I18
    set $I18, rx1110_bstack[$I18]
  rx1110_cut3072:
    assign rx1110_cstack, $I18
  rx1110_jump3071:
    jump $I19
  rx1110_done3068:
    rx1110_cur."!cursor_fail"()
    .return (rx1110_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_196_1349901750.327_caps" :subid("cuid_memo_325_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_196_1349901750.327_nfa" :subid("cuid_memo_326_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 33
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 61
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<<=>" :subid("cuid_197_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1314
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1114_tgt
    .local int rx1114_pos
    .local int rx1114_off
    .local int rx1114_eos
    .local int rx1114_rep
    .local pmc rx1114_cur
    .local pmc rx1114_curclass
    .local pmc rx1114_bstack
    .local pmc rx1114_cstack
    (rx1114_cur, rx1114_tgt, rx1114_pos, rx1114_curclass, rx1114_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1114_cur
    length rx1114_eos, rx1114_tgt
    eq $I19, 1, rx1114_restart3082
    gt rx1114_pos, rx1114_eos, rx1114_fail3083
    repr_get_attr_int $I11, self, rx1114_curclass, "$!from"
    ne $I11, -1, rxscan1115_done3089
    goto rxscan1115_scan3088
  rxscan1115_loop3087:
    inc rx1114_pos
    gt rx1114_pos, rx1114_eos, rx1114_fail3083
    repr_bind_attr_int rx1114_cur, rx1114_curclass, "$!from", rx1114_pos
  rxscan1115_scan3088:
    nqp_rxmark rx1114_bstack, rxscan1115_loop3087, rx1114_pos, 0
  rxscan1115_done3089:
    nqp_rxmark rx1114_bstack, rxcap1116_fail3091, rx1114_pos, 0
    add $I11, rx1114_pos, 2
    gt $I11, rx1114_eos, rx1114_fail3083
    substr $S10, rx1114_tgt, rx1114_pos, 2
    ne $S10, ucs4:"<=", rx1114_fail3083
    add rx1114_pos, 2
    nqp_rxpeek $I19, rx1114_bstack, rxcap1116_fail3091
    inc $I19
    set $I11, rx1114_bstack[$I19]
    repr_bind_attr_int rx1114_cur, rx1114_curclass, "$!pos", rx1114_pos
    $P11 = rx1114_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1114_pos)
    rx1114_cstack = rx1114_cur."!cursor_capture"($P11, "sym")
    goto rxcap1116_done3090
  rxcap1116_fail3091:
    goto rx1114_fail3083
  rxcap1116_done3090:
    repr_bind_attr_int rx1114_cur, rx1114_curclass, "$!pos", rx1114_pos
    $P11 = rx1114_cur."O"("%relational, :op<isle_n>")
    repr_get_attr_int $I11, $P11, rx1114_curclass, "$!pos"
    lt $I11, 0, rx1114_fail3083
    nqp_rxmark rx1114_bstack, rxsubrule1117_pass3092, -1, 0
  rxsubrule1117_pass3092:
    rx1114_cstack = rx1114_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1114_pos, $P11, rx1114_curclass, "$!pos"
    rx1114_cur."!cursor_pass"(rx1114_pos, "infix:sym<<=>", 'backtrack'=>1)
    .return (rx1114_cur)
  rx1114_restart3082:
    repr_get_attr_obj rx1114_cstack, rx1114_cur, rx1114_curclass, "$!cstack"
  rx1114_fail3083:
    unless rx1114_bstack, rx1114_done3081
    pop $I19, rx1114_bstack
    if_null rx1114_cstack, rx1114_cstack_done3086
    unless rx1114_cstack, rx1114_cstack_done3086
    dec $I19
    set $P11, rx1114_cstack[$I19]
  rx1114_cstack_done3086:
    pop rx1114_rep, rx1114_bstack
    pop rx1114_pos, rx1114_bstack
    pop $I19, rx1114_bstack
    lt rx1114_pos, -1, rx1114_done3081
    lt rx1114_pos, 0, rx1114_fail3083
    eq $I19, 0, rx1114_fail3083
    nqp_islist $I20, rx1114_cstack
    unless $I20, rx1114_jump3084
    elements $I18, rx1114_bstack
    le $I18, 0, rx1114_cut3085
    dec $I18
    set $I18, rx1114_bstack[$I18]
  rx1114_cut3085:
    assign rx1114_cstack, $I18
  rx1114_jump3084:
    jump $I19
  rx1114_done3081:
    rx1114_cur."!cursor_fail"()
    .return (rx1114_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_197_1349901750.327_caps" :subid("cuid_memo_327_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_197_1349901750.327_nfa" :subid("cuid_memo_328_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 60
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 61
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<>=>" :subid("cuid_198_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1315
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1118_tgt
    .local int rx1118_pos
    .local int rx1118_off
    .local int rx1118_eos
    .local int rx1118_rep
    .local pmc rx1118_cur
    .local pmc rx1118_curclass
    .local pmc rx1118_bstack
    .local pmc rx1118_cstack
    (rx1118_cur, rx1118_tgt, rx1118_pos, rx1118_curclass, rx1118_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1118_cur
    length rx1118_eos, rx1118_tgt
    eq $I19, 1, rx1118_restart3095
    gt rx1118_pos, rx1118_eos, rx1118_fail3096
    repr_get_attr_int $I11, self, rx1118_curclass, "$!from"
    ne $I11, -1, rxscan1119_done3102
    goto rxscan1119_scan3101
  rxscan1119_loop3100:
    inc rx1118_pos
    gt rx1118_pos, rx1118_eos, rx1118_fail3096
    repr_bind_attr_int rx1118_cur, rx1118_curclass, "$!from", rx1118_pos
  rxscan1119_scan3101:
    nqp_rxmark rx1118_bstack, rxscan1119_loop3100, rx1118_pos, 0
  rxscan1119_done3102:
    nqp_rxmark rx1118_bstack, rxcap1120_fail3104, rx1118_pos, 0
    add $I11, rx1118_pos, 2
    gt $I11, rx1118_eos, rx1118_fail3096
    substr $S10, rx1118_tgt, rx1118_pos, 2
    ne $S10, ucs4:">=", rx1118_fail3096
    add rx1118_pos, 2
    nqp_rxpeek $I19, rx1118_bstack, rxcap1120_fail3104
    inc $I19
    set $I11, rx1118_bstack[$I19]
    repr_bind_attr_int rx1118_cur, rx1118_curclass, "$!pos", rx1118_pos
    $P11 = rx1118_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1118_pos)
    rx1118_cstack = rx1118_cur."!cursor_capture"($P11, "sym")
    goto rxcap1120_done3103
  rxcap1120_fail3104:
    goto rx1118_fail3096
  rxcap1120_done3103:
    repr_bind_attr_int rx1118_cur, rx1118_curclass, "$!pos", rx1118_pos
    $P11 = rx1118_cur."O"("%relational, :op<isge_n>")
    repr_get_attr_int $I11, $P11, rx1118_curclass, "$!pos"
    lt $I11, 0, rx1118_fail3096
    nqp_rxmark rx1118_bstack, rxsubrule1121_pass3105, -1, 0
  rxsubrule1121_pass3105:
    rx1118_cstack = rx1118_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1118_pos, $P11, rx1118_curclass, "$!pos"
    rx1118_cur."!cursor_pass"(rx1118_pos, "infix:sym<>=>", 'backtrack'=>1)
    .return (rx1118_cur)
  rx1118_restart3095:
    repr_get_attr_obj rx1118_cstack, rx1118_cur, rx1118_curclass, "$!cstack"
  rx1118_fail3096:
    unless rx1118_bstack, rx1118_done3094
    pop $I19, rx1118_bstack
    if_null rx1118_cstack, rx1118_cstack_done3099
    unless rx1118_cstack, rx1118_cstack_done3099
    dec $I19
    set $P11, rx1118_cstack[$I19]
  rx1118_cstack_done3099:
    pop rx1118_rep, rx1118_bstack
    pop rx1118_pos, rx1118_bstack
    pop $I19, rx1118_bstack
    lt rx1118_pos, -1, rx1118_done3094
    lt rx1118_pos, 0, rx1118_fail3096
    eq $I19, 0, rx1118_fail3096
    nqp_islist $I20, rx1118_cstack
    unless $I20, rx1118_jump3097
    elements $I18, rx1118_bstack
    le $I18, 0, rx1118_cut3098
    dec $I18
    set $I18, rx1118_bstack[$I18]
  rx1118_cut3098:
    assign rx1118_cstack, $I18
  rx1118_jump3097:
    jump $I19
  rx1118_done3094:
    rx1118_cur."!cursor_fail"()
    .return (rx1118_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_198_1349901750.327_caps" :subid("cuid_memo_329_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_198_1349901750.327_nfa" :subid("cuid_memo_330_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 62
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 61
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<<>" :subid("cuid_199_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1316
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1122_tgt
    .local int rx1122_pos
    .local int rx1122_off
    .local int rx1122_eos
    .local int rx1122_rep
    .local pmc rx1122_cur
    .local pmc rx1122_curclass
    .local pmc rx1122_bstack
    .local pmc rx1122_cstack
    (rx1122_cur, rx1122_tgt, rx1122_pos, rx1122_curclass, rx1122_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1122_cur
    length rx1122_eos, rx1122_tgt
    eq $I19, 1, rx1122_restart3108
    gt rx1122_pos, rx1122_eos, rx1122_fail3109
    repr_get_attr_int $I11, self, rx1122_curclass, "$!from"
    ne $I11, -1, rxscan1123_done3115
    goto rxscan1123_scan3114
  rxscan1123_loop3113:
    inc rx1122_pos
    gt rx1122_pos, rx1122_eos, rx1122_fail3109
    repr_bind_attr_int rx1122_cur, rx1122_curclass, "$!from", rx1122_pos
  rxscan1123_scan3114:
    nqp_rxmark rx1122_bstack, rxscan1123_loop3113, rx1122_pos, 0
  rxscan1123_done3115:
    nqp_rxmark rx1122_bstack, rxcap1124_fail3117, rx1122_pos, 0
    add $I11, rx1122_pos, 1
    gt $I11, rx1122_eos, rx1122_fail3109
    substr $S10, rx1122_tgt, rx1122_pos, 1
    ne $S10, ucs4:"<", rx1122_fail3109
    add rx1122_pos, 1
    nqp_rxpeek $I19, rx1122_bstack, rxcap1124_fail3117
    inc $I19
    set $I11, rx1122_bstack[$I19]
    repr_bind_attr_int rx1122_cur, rx1122_curclass, "$!pos", rx1122_pos
    $P11 = rx1122_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1122_pos)
    rx1122_cstack = rx1122_cur."!cursor_capture"($P11, "sym")
    goto rxcap1124_done3116
  rxcap1124_fail3117:
    goto rx1122_fail3109
  rxcap1124_done3116:
    repr_bind_attr_int rx1122_cur, rx1122_curclass, "$!pos", rx1122_pos
    $P11 = rx1122_cur."O"("%relational, :op<islt_n>")
    repr_get_attr_int $I11, $P11, rx1122_curclass, "$!pos"
    lt $I11, 0, rx1122_fail3109
    nqp_rxmark rx1122_bstack, rxsubrule1125_pass3118, -1, 0
  rxsubrule1125_pass3118:
    rx1122_cstack = rx1122_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1122_pos, $P11, rx1122_curclass, "$!pos"
    rx1122_cur."!cursor_pass"(rx1122_pos, "infix:sym<<>", 'backtrack'=>1)
    .return (rx1122_cur)
  rx1122_restart3108:
    repr_get_attr_obj rx1122_cstack, rx1122_cur, rx1122_curclass, "$!cstack"
  rx1122_fail3109:
    unless rx1122_bstack, rx1122_done3107
    pop $I19, rx1122_bstack
    if_null rx1122_cstack, rx1122_cstack_done3112
    unless rx1122_cstack, rx1122_cstack_done3112
    dec $I19
    set $P11, rx1122_cstack[$I19]
  rx1122_cstack_done3112:
    pop rx1122_rep, rx1122_bstack
    pop rx1122_pos, rx1122_bstack
    pop $I19, rx1122_bstack
    lt rx1122_pos, -1, rx1122_done3107
    lt rx1122_pos, 0, rx1122_fail3109
    eq $I19, 0, rx1122_fail3109
    nqp_islist $I20, rx1122_cstack
    unless $I20, rx1122_jump3110
    elements $I18, rx1122_bstack
    le $I18, 0, rx1122_cut3111
    dec $I18
    set $I18, rx1122_bstack[$I18]
  rx1122_cut3111:
    assign rx1122_cstack, $I18
  rx1122_jump3110:
    jump $I19
  rx1122_done3107:
    rx1122_cur."!cursor_fail"()
    .return (rx1122_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_199_1349901750.327_caps" :subid("cuid_memo_331_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_199_1349901750.327_nfa" :subid("cuid_memo_332_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 60
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<>>" :subid("cuid_200_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1317
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1126_tgt
    .local int rx1126_pos
    .local int rx1126_off
    .local int rx1126_eos
    .local int rx1126_rep
    .local pmc rx1126_cur
    .local pmc rx1126_curclass
    .local pmc rx1126_bstack
    .local pmc rx1126_cstack
    (rx1126_cur, rx1126_tgt, rx1126_pos, rx1126_curclass, rx1126_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1126_cur
    length rx1126_eos, rx1126_tgt
    eq $I19, 1, rx1126_restart3121
    gt rx1126_pos, rx1126_eos, rx1126_fail3122
    repr_get_attr_int $I11, self, rx1126_curclass, "$!from"
    ne $I11, -1, rxscan1127_done3128
    goto rxscan1127_scan3127
  rxscan1127_loop3126:
    inc rx1126_pos
    gt rx1126_pos, rx1126_eos, rx1126_fail3122
    repr_bind_attr_int rx1126_cur, rx1126_curclass, "$!from", rx1126_pos
  rxscan1127_scan3127:
    nqp_rxmark rx1126_bstack, rxscan1127_loop3126, rx1126_pos, 0
  rxscan1127_done3128:
    nqp_rxmark rx1126_bstack, rxcap1128_fail3130, rx1126_pos, 0
    add $I11, rx1126_pos, 1
    gt $I11, rx1126_eos, rx1126_fail3122
    substr $S10, rx1126_tgt, rx1126_pos, 1
    ne $S10, ucs4:">", rx1126_fail3122
    add rx1126_pos, 1
    nqp_rxpeek $I19, rx1126_bstack, rxcap1128_fail3130
    inc $I19
    set $I11, rx1126_bstack[$I19]
    repr_bind_attr_int rx1126_cur, rx1126_curclass, "$!pos", rx1126_pos
    $P11 = rx1126_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1126_pos)
    rx1126_cstack = rx1126_cur."!cursor_capture"($P11, "sym")
    goto rxcap1128_done3129
  rxcap1128_fail3130:
    goto rx1126_fail3122
  rxcap1128_done3129:
    repr_bind_attr_int rx1126_cur, rx1126_curclass, "$!pos", rx1126_pos
    $P11 = rx1126_cur."O"("%relational, :op<isgt_n>")
    repr_get_attr_int $I11, $P11, rx1126_curclass, "$!pos"
    lt $I11, 0, rx1126_fail3122
    nqp_rxmark rx1126_bstack, rxsubrule1129_pass3131, -1, 0
  rxsubrule1129_pass3131:
    rx1126_cstack = rx1126_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1126_pos, $P11, rx1126_curclass, "$!pos"
    rx1126_cur."!cursor_pass"(rx1126_pos, "infix:sym<>>", 'backtrack'=>1)
    .return (rx1126_cur)
  rx1126_restart3121:
    repr_get_attr_obj rx1126_cstack, rx1126_cur, rx1126_curclass, "$!cstack"
  rx1126_fail3122:
    unless rx1126_bstack, rx1126_done3120
    pop $I19, rx1126_bstack
    if_null rx1126_cstack, rx1126_cstack_done3125
    unless rx1126_cstack, rx1126_cstack_done3125
    dec $I19
    set $P11, rx1126_cstack[$I19]
  rx1126_cstack_done3125:
    pop rx1126_rep, rx1126_bstack
    pop rx1126_pos, rx1126_bstack
    pop $I19, rx1126_bstack
    lt rx1126_pos, -1, rx1126_done3120
    lt rx1126_pos, 0, rx1126_fail3122
    eq $I19, 0, rx1126_fail3122
    nqp_islist $I20, rx1126_cstack
    unless $I20, rx1126_jump3123
    elements $I18, rx1126_bstack
    le $I18, 0, rx1126_cut3124
    dec $I18
    set $I18, rx1126_bstack[$I18]
  rx1126_cut3124:
    assign rx1126_cstack, $I18
  rx1126_jump3123:
    jump $I19
  rx1126_done3120:
    rx1126_cur."!cursor_fail"()
    .return (rx1126_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_200_1349901750.327_caps" :subid("cuid_memo_333_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_200_1349901750.327_nfa" :subid("cuid_memo_334_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 62
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<eq>" :subid("cuid_201_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1318
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1130_tgt
    .local int rx1130_pos
    .local int rx1130_off
    .local int rx1130_eos
    .local int rx1130_rep
    .local pmc rx1130_cur
    .local pmc rx1130_curclass
    .local pmc rx1130_bstack
    .local pmc rx1130_cstack
    (rx1130_cur, rx1130_tgt, rx1130_pos, rx1130_curclass, rx1130_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1130_cur
    length rx1130_eos, rx1130_tgt
    eq $I19, 1, rx1130_restart3134
    gt rx1130_pos, rx1130_eos, rx1130_fail3135
    repr_get_attr_int $I11, self, rx1130_curclass, "$!from"
    ne $I11, -1, rxscan1131_done3141
    goto rxscan1131_scan3140
  rxscan1131_loop3139:
    inc rx1130_pos
    gt rx1130_pos, rx1130_eos, rx1130_fail3135
    repr_bind_attr_int rx1130_cur, rx1130_curclass, "$!from", rx1130_pos
  rxscan1131_scan3140:
    nqp_rxmark rx1130_bstack, rxscan1131_loop3139, rx1130_pos, 0
  rxscan1131_done3141:
    nqp_rxmark rx1130_bstack, rxcap1132_fail3143, rx1130_pos, 0
    add $I11, rx1130_pos, 2
    gt $I11, rx1130_eos, rx1130_fail3135
    substr $S10, rx1130_tgt, rx1130_pos, 2
    ne $S10, ucs4:"eq", rx1130_fail3135
    add rx1130_pos, 2
    nqp_rxpeek $I19, rx1130_bstack, rxcap1132_fail3143
    inc $I19
    set $I11, rx1130_bstack[$I19]
    repr_bind_attr_int rx1130_cur, rx1130_curclass, "$!pos", rx1130_pos
    $P11 = rx1130_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1130_pos)
    rx1130_cstack = rx1130_cur."!cursor_capture"($P11, "sym")
    goto rxcap1132_done3142
  rxcap1132_fail3143:
    goto rx1130_fail3135
  rxcap1132_done3142:
    repr_bind_attr_int rx1130_cur, rx1130_curclass, "$!pos", rx1130_pos
    $P11 = rx1130_cur."O"("%relational, :op<iseq_s>")
    repr_get_attr_int $I11, $P11, rx1130_curclass, "$!pos"
    lt $I11, 0, rx1130_fail3135
    nqp_rxmark rx1130_bstack, rxsubrule1133_pass3144, -1, 0
  rxsubrule1133_pass3144:
    rx1130_cstack = rx1130_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1130_pos, $P11, rx1130_curclass, "$!pos"
    rx1130_cur."!cursor_pass"(rx1130_pos, "infix:sym<eq>", 'backtrack'=>1)
    .return (rx1130_cur)
  rx1130_restart3134:
    repr_get_attr_obj rx1130_cstack, rx1130_cur, rx1130_curclass, "$!cstack"
  rx1130_fail3135:
    unless rx1130_bstack, rx1130_done3133
    pop $I19, rx1130_bstack
    if_null rx1130_cstack, rx1130_cstack_done3138
    unless rx1130_cstack, rx1130_cstack_done3138
    dec $I19
    set $P11, rx1130_cstack[$I19]
  rx1130_cstack_done3138:
    pop rx1130_rep, rx1130_bstack
    pop rx1130_pos, rx1130_bstack
    pop $I19, rx1130_bstack
    lt rx1130_pos, -1, rx1130_done3133
    lt rx1130_pos, 0, rx1130_fail3135
    eq $I19, 0, rx1130_fail3135
    nqp_islist $I20, rx1130_cstack
    unless $I20, rx1130_jump3136
    elements $I18, rx1130_bstack
    le $I18, 0, rx1130_cut3137
    dec $I18
    set $I18, rx1130_bstack[$I18]
  rx1130_cut3137:
    assign rx1130_cstack, $I18
  rx1130_jump3136:
    jump $I19
  rx1130_done3133:
    rx1130_cur."!cursor_fail"()
    .return (rx1130_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_201_1349901750.327_caps" :subid("cuid_memo_335_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_201_1349901750.327_nfa" :subid("cuid_memo_336_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 101
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 113
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<ne>" :subid("cuid_202_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1319
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1134_tgt
    .local int rx1134_pos
    .local int rx1134_off
    .local int rx1134_eos
    .local int rx1134_rep
    .local pmc rx1134_cur
    .local pmc rx1134_curclass
    .local pmc rx1134_bstack
    .local pmc rx1134_cstack
    (rx1134_cur, rx1134_tgt, rx1134_pos, rx1134_curclass, rx1134_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1134_cur
    length rx1134_eos, rx1134_tgt
    eq $I19, 1, rx1134_restart3147
    gt rx1134_pos, rx1134_eos, rx1134_fail3148
    repr_get_attr_int $I11, self, rx1134_curclass, "$!from"
    ne $I11, -1, rxscan1135_done3154
    goto rxscan1135_scan3153
  rxscan1135_loop3152:
    inc rx1134_pos
    gt rx1134_pos, rx1134_eos, rx1134_fail3148
    repr_bind_attr_int rx1134_cur, rx1134_curclass, "$!from", rx1134_pos
  rxscan1135_scan3153:
    nqp_rxmark rx1134_bstack, rxscan1135_loop3152, rx1134_pos, 0
  rxscan1135_done3154:
    nqp_rxmark rx1134_bstack, rxcap1136_fail3156, rx1134_pos, 0
    add $I11, rx1134_pos, 2
    gt $I11, rx1134_eos, rx1134_fail3148
    substr $S10, rx1134_tgt, rx1134_pos, 2
    ne $S10, ucs4:"ne", rx1134_fail3148
    add rx1134_pos, 2
    nqp_rxpeek $I19, rx1134_bstack, rxcap1136_fail3156
    inc $I19
    set $I11, rx1134_bstack[$I19]
    repr_bind_attr_int rx1134_cur, rx1134_curclass, "$!pos", rx1134_pos
    $P11 = rx1134_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1134_pos)
    rx1134_cstack = rx1134_cur."!cursor_capture"($P11, "sym")
    goto rxcap1136_done3155
  rxcap1136_fail3156:
    goto rx1134_fail3148
  rxcap1136_done3155:
    repr_bind_attr_int rx1134_cur, rx1134_curclass, "$!pos", rx1134_pos
    $P11 = rx1134_cur."O"("%relational, :op<isne_s>")
    repr_get_attr_int $I11, $P11, rx1134_curclass, "$!pos"
    lt $I11, 0, rx1134_fail3148
    nqp_rxmark rx1134_bstack, rxsubrule1137_pass3157, -1, 0
  rxsubrule1137_pass3157:
    rx1134_cstack = rx1134_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1134_pos, $P11, rx1134_curclass, "$!pos"
    rx1134_cur."!cursor_pass"(rx1134_pos, "infix:sym<ne>", 'backtrack'=>1)
    .return (rx1134_cur)
  rx1134_restart3147:
    repr_get_attr_obj rx1134_cstack, rx1134_cur, rx1134_curclass, "$!cstack"
  rx1134_fail3148:
    unless rx1134_bstack, rx1134_done3146
    pop $I19, rx1134_bstack
    if_null rx1134_cstack, rx1134_cstack_done3151
    unless rx1134_cstack, rx1134_cstack_done3151
    dec $I19
    set $P11, rx1134_cstack[$I19]
  rx1134_cstack_done3151:
    pop rx1134_rep, rx1134_bstack
    pop rx1134_pos, rx1134_bstack
    pop $I19, rx1134_bstack
    lt rx1134_pos, -1, rx1134_done3146
    lt rx1134_pos, 0, rx1134_fail3148
    eq $I19, 0, rx1134_fail3148
    nqp_islist $I20, rx1134_cstack
    unless $I20, rx1134_jump3149
    elements $I18, rx1134_bstack
    le $I18, 0, rx1134_cut3150
    dec $I18
    set $I18, rx1134_bstack[$I18]
  rx1134_cut3150:
    assign rx1134_cstack, $I18
  rx1134_jump3149:
    jump $I19
  rx1134_done3146:
    rx1134_cur."!cursor_fail"()
    .return (rx1134_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_202_1349901750.327_caps" :subid("cuid_memo_337_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_202_1349901750.327_nfa" :subid("cuid_memo_338_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 110
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 101
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<le>" :subid("cuid_203_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1320
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1138_tgt
    .local int rx1138_pos
    .local int rx1138_off
    .local int rx1138_eos
    .local int rx1138_rep
    .local pmc rx1138_cur
    .local pmc rx1138_curclass
    .local pmc rx1138_bstack
    .local pmc rx1138_cstack
    (rx1138_cur, rx1138_tgt, rx1138_pos, rx1138_curclass, rx1138_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1138_cur
    length rx1138_eos, rx1138_tgt
    eq $I19, 1, rx1138_restart3160
    gt rx1138_pos, rx1138_eos, rx1138_fail3161
    repr_get_attr_int $I11, self, rx1138_curclass, "$!from"
    ne $I11, -1, rxscan1139_done3167
    goto rxscan1139_scan3166
  rxscan1139_loop3165:
    inc rx1138_pos
    gt rx1138_pos, rx1138_eos, rx1138_fail3161
    repr_bind_attr_int rx1138_cur, rx1138_curclass, "$!from", rx1138_pos
  rxscan1139_scan3166:
    nqp_rxmark rx1138_bstack, rxscan1139_loop3165, rx1138_pos, 0
  rxscan1139_done3167:
    nqp_rxmark rx1138_bstack, rxcap1140_fail3169, rx1138_pos, 0
    add $I11, rx1138_pos, 2
    gt $I11, rx1138_eos, rx1138_fail3161
    substr $S10, rx1138_tgt, rx1138_pos, 2
    ne $S10, ucs4:"le", rx1138_fail3161
    add rx1138_pos, 2
    nqp_rxpeek $I19, rx1138_bstack, rxcap1140_fail3169
    inc $I19
    set $I11, rx1138_bstack[$I19]
    repr_bind_attr_int rx1138_cur, rx1138_curclass, "$!pos", rx1138_pos
    $P11 = rx1138_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1138_pos)
    rx1138_cstack = rx1138_cur."!cursor_capture"($P11, "sym")
    goto rxcap1140_done3168
  rxcap1140_fail3169:
    goto rx1138_fail3161
  rxcap1140_done3168:
    repr_bind_attr_int rx1138_cur, rx1138_curclass, "$!pos", rx1138_pos
    $P11 = rx1138_cur."O"("%relational, :op<isle_s>")
    repr_get_attr_int $I11, $P11, rx1138_curclass, "$!pos"
    lt $I11, 0, rx1138_fail3161
    nqp_rxmark rx1138_bstack, rxsubrule1141_pass3170, -1, 0
  rxsubrule1141_pass3170:
    rx1138_cstack = rx1138_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1138_pos, $P11, rx1138_curclass, "$!pos"
    rx1138_cur."!cursor_pass"(rx1138_pos, "infix:sym<le>", 'backtrack'=>1)
    .return (rx1138_cur)
  rx1138_restart3160:
    repr_get_attr_obj rx1138_cstack, rx1138_cur, rx1138_curclass, "$!cstack"
  rx1138_fail3161:
    unless rx1138_bstack, rx1138_done3159
    pop $I19, rx1138_bstack
    if_null rx1138_cstack, rx1138_cstack_done3164
    unless rx1138_cstack, rx1138_cstack_done3164
    dec $I19
    set $P11, rx1138_cstack[$I19]
  rx1138_cstack_done3164:
    pop rx1138_rep, rx1138_bstack
    pop rx1138_pos, rx1138_bstack
    pop $I19, rx1138_bstack
    lt rx1138_pos, -1, rx1138_done3159
    lt rx1138_pos, 0, rx1138_fail3161
    eq $I19, 0, rx1138_fail3161
    nqp_islist $I20, rx1138_cstack
    unless $I20, rx1138_jump3162
    elements $I18, rx1138_bstack
    le $I18, 0, rx1138_cut3163
    dec $I18
    set $I18, rx1138_bstack[$I18]
  rx1138_cut3163:
    assign rx1138_cstack, $I18
  rx1138_jump3162:
    jump $I19
  rx1138_done3159:
    rx1138_cur."!cursor_fail"()
    .return (rx1138_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_203_1349901750.327_caps" :subid("cuid_memo_339_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_203_1349901750.327_nfa" :subid("cuid_memo_340_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 108
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 101
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<ge>" :subid("cuid_204_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1321
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1142_tgt
    .local int rx1142_pos
    .local int rx1142_off
    .local int rx1142_eos
    .local int rx1142_rep
    .local pmc rx1142_cur
    .local pmc rx1142_curclass
    .local pmc rx1142_bstack
    .local pmc rx1142_cstack
    (rx1142_cur, rx1142_tgt, rx1142_pos, rx1142_curclass, rx1142_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1142_cur
    length rx1142_eos, rx1142_tgt
    eq $I19, 1, rx1142_restart3173
    gt rx1142_pos, rx1142_eos, rx1142_fail3174
    repr_get_attr_int $I11, self, rx1142_curclass, "$!from"
    ne $I11, -1, rxscan1143_done3180
    goto rxscan1143_scan3179
  rxscan1143_loop3178:
    inc rx1142_pos
    gt rx1142_pos, rx1142_eos, rx1142_fail3174
    repr_bind_attr_int rx1142_cur, rx1142_curclass, "$!from", rx1142_pos
  rxscan1143_scan3179:
    nqp_rxmark rx1142_bstack, rxscan1143_loop3178, rx1142_pos, 0
  rxscan1143_done3180:
    nqp_rxmark rx1142_bstack, rxcap1144_fail3182, rx1142_pos, 0
    add $I11, rx1142_pos, 2
    gt $I11, rx1142_eos, rx1142_fail3174
    substr $S10, rx1142_tgt, rx1142_pos, 2
    ne $S10, ucs4:"ge", rx1142_fail3174
    add rx1142_pos, 2
    nqp_rxpeek $I19, rx1142_bstack, rxcap1144_fail3182
    inc $I19
    set $I11, rx1142_bstack[$I19]
    repr_bind_attr_int rx1142_cur, rx1142_curclass, "$!pos", rx1142_pos
    $P11 = rx1142_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1142_pos)
    rx1142_cstack = rx1142_cur."!cursor_capture"($P11, "sym")
    goto rxcap1144_done3181
  rxcap1144_fail3182:
    goto rx1142_fail3174
  rxcap1144_done3181:
    repr_bind_attr_int rx1142_cur, rx1142_curclass, "$!pos", rx1142_pos
    $P11 = rx1142_cur."O"("%relational, :op<isge_s>")
    repr_get_attr_int $I11, $P11, rx1142_curclass, "$!pos"
    lt $I11, 0, rx1142_fail3174
    nqp_rxmark rx1142_bstack, rxsubrule1145_pass3183, -1, 0
  rxsubrule1145_pass3183:
    rx1142_cstack = rx1142_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1142_pos, $P11, rx1142_curclass, "$!pos"
    rx1142_cur."!cursor_pass"(rx1142_pos, "infix:sym<ge>", 'backtrack'=>1)
    .return (rx1142_cur)
  rx1142_restart3173:
    repr_get_attr_obj rx1142_cstack, rx1142_cur, rx1142_curclass, "$!cstack"
  rx1142_fail3174:
    unless rx1142_bstack, rx1142_done3172
    pop $I19, rx1142_bstack
    if_null rx1142_cstack, rx1142_cstack_done3177
    unless rx1142_cstack, rx1142_cstack_done3177
    dec $I19
    set $P11, rx1142_cstack[$I19]
  rx1142_cstack_done3177:
    pop rx1142_rep, rx1142_bstack
    pop rx1142_pos, rx1142_bstack
    pop $I19, rx1142_bstack
    lt rx1142_pos, -1, rx1142_done3172
    lt rx1142_pos, 0, rx1142_fail3174
    eq $I19, 0, rx1142_fail3174
    nqp_islist $I20, rx1142_cstack
    unless $I20, rx1142_jump3175
    elements $I18, rx1142_bstack
    le $I18, 0, rx1142_cut3176
    dec $I18
    set $I18, rx1142_bstack[$I18]
  rx1142_cut3176:
    assign rx1142_cstack, $I18
  rx1142_jump3175:
    jump $I19
  rx1142_done3172:
    rx1142_cur."!cursor_fail"()
    .return (rx1142_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_204_1349901750.327_caps" :subid("cuid_memo_341_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_204_1349901750.327_nfa" :subid("cuid_memo_342_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 103
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 101
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<lt>" :subid("cuid_205_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1322
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1146_tgt
    .local int rx1146_pos
    .local int rx1146_off
    .local int rx1146_eos
    .local int rx1146_rep
    .local pmc rx1146_cur
    .local pmc rx1146_curclass
    .local pmc rx1146_bstack
    .local pmc rx1146_cstack
    (rx1146_cur, rx1146_tgt, rx1146_pos, rx1146_curclass, rx1146_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1146_cur
    length rx1146_eos, rx1146_tgt
    eq $I19, 1, rx1146_restart3186
    gt rx1146_pos, rx1146_eos, rx1146_fail3187
    repr_get_attr_int $I11, self, rx1146_curclass, "$!from"
    ne $I11, -1, rxscan1147_done3193
    goto rxscan1147_scan3192
  rxscan1147_loop3191:
    inc rx1146_pos
    gt rx1146_pos, rx1146_eos, rx1146_fail3187
    repr_bind_attr_int rx1146_cur, rx1146_curclass, "$!from", rx1146_pos
  rxscan1147_scan3192:
    nqp_rxmark rx1146_bstack, rxscan1147_loop3191, rx1146_pos, 0
  rxscan1147_done3193:
    nqp_rxmark rx1146_bstack, rxcap1148_fail3195, rx1146_pos, 0
    add $I11, rx1146_pos, 2
    gt $I11, rx1146_eos, rx1146_fail3187
    substr $S10, rx1146_tgt, rx1146_pos, 2
    ne $S10, ucs4:"lt", rx1146_fail3187
    add rx1146_pos, 2
    nqp_rxpeek $I19, rx1146_bstack, rxcap1148_fail3195
    inc $I19
    set $I11, rx1146_bstack[$I19]
    repr_bind_attr_int rx1146_cur, rx1146_curclass, "$!pos", rx1146_pos
    $P11 = rx1146_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1146_pos)
    rx1146_cstack = rx1146_cur."!cursor_capture"($P11, "sym")
    goto rxcap1148_done3194
  rxcap1148_fail3195:
    goto rx1146_fail3187
  rxcap1148_done3194:
    repr_bind_attr_int rx1146_cur, rx1146_curclass, "$!pos", rx1146_pos
    $P11 = rx1146_cur."O"("%relational, :op<islt_s>")
    repr_get_attr_int $I11, $P11, rx1146_curclass, "$!pos"
    lt $I11, 0, rx1146_fail3187
    nqp_rxmark rx1146_bstack, rxsubrule1149_pass3196, -1, 0
  rxsubrule1149_pass3196:
    rx1146_cstack = rx1146_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1146_pos, $P11, rx1146_curclass, "$!pos"
    rx1146_cur."!cursor_pass"(rx1146_pos, "infix:sym<lt>", 'backtrack'=>1)
    .return (rx1146_cur)
  rx1146_restart3186:
    repr_get_attr_obj rx1146_cstack, rx1146_cur, rx1146_curclass, "$!cstack"
  rx1146_fail3187:
    unless rx1146_bstack, rx1146_done3185
    pop $I19, rx1146_bstack
    if_null rx1146_cstack, rx1146_cstack_done3190
    unless rx1146_cstack, rx1146_cstack_done3190
    dec $I19
    set $P11, rx1146_cstack[$I19]
  rx1146_cstack_done3190:
    pop rx1146_rep, rx1146_bstack
    pop rx1146_pos, rx1146_bstack
    pop $I19, rx1146_bstack
    lt rx1146_pos, -1, rx1146_done3185
    lt rx1146_pos, 0, rx1146_fail3187
    eq $I19, 0, rx1146_fail3187
    nqp_islist $I20, rx1146_cstack
    unless $I20, rx1146_jump3188
    elements $I18, rx1146_bstack
    le $I18, 0, rx1146_cut3189
    dec $I18
    set $I18, rx1146_bstack[$I18]
  rx1146_cut3189:
    assign rx1146_cstack, $I18
  rx1146_jump3188:
    jump $I19
  rx1146_done3185:
    rx1146_cur."!cursor_fail"()
    .return (rx1146_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_205_1349901750.327_caps" :subid("cuid_memo_343_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_205_1349901750.327_nfa" :subid("cuid_memo_344_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 108
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 116
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<gt>" :subid("cuid_206_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1323
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1150_tgt
    .local int rx1150_pos
    .local int rx1150_off
    .local int rx1150_eos
    .local int rx1150_rep
    .local pmc rx1150_cur
    .local pmc rx1150_curclass
    .local pmc rx1150_bstack
    .local pmc rx1150_cstack
    (rx1150_cur, rx1150_tgt, rx1150_pos, rx1150_curclass, rx1150_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1150_cur
    length rx1150_eos, rx1150_tgt
    eq $I19, 1, rx1150_restart3199
    gt rx1150_pos, rx1150_eos, rx1150_fail3200
    repr_get_attr_int $I11, self, rx1150_curclass, "$!from"
    ne $I11, -1, rxscan1151_done3206
    goto rxscan1151_scan3205
  rxscan1151_loop3204:
    inc rx1150_pos
    gt rx1150_pos, rx1150_eos, rx1150_fail3200
    repr_bind_attr_int rx1150_cur, rx1150_curclass, "$!from", rx1150_pos
  rxscan1151_scan3205:
    nqp_rxmark rx1150_bstack, rxscan1151_loop3204, rx1150_pos, 0
  rxscan1151_done3206:
    nqp_rxmark rx1150_bstack, rxcap1152_fail3208, rx1150_pos, 0
    add $I11, rx1150_pos, 2
    gt $I11, rx1150_eos, rx1150_fail3200
    substr $S10, rx1150_tgt, rx1150_pos, 2
    ne $S10, ucs4:"gt", rx1150_fail3200
    add rx1150_pos, 2
    nqp_rxpeek $I19, rx1150_bstack, rxcap1152_fail3208
    inc $I19
    set $I11, rx1150_bstack[$I19]
    repr_bind_attr_int rx1150_cur, rx1150_curclass, "$!pos", rx1150_pos
    $P11 = rx1150_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1150_pos)
    rx1150_cstack = rx1150_cur."!cursor_capture"($P11, "sym")
    goto rxcap1152_done3207
  rxcap1152_fail3208:
    goto rx1150_fail3200
  rxcap1152_done3207:
    repr_bind_attr_int rx1150_cur, rx1150_curclass, "$!pos", rx1150_pos
    $P11 = rx1150_cur."O"("%relational, :op<isgt_s>")
    repr_get_attr_int $I11, $P11, rx1150_curclass, "$!pos"
    lt $I11, 0, rx1150_fail3200
    nqp_rxmark rx1150_bstack, rxsubrule1153_pass3209, -1, 0
  rxsubrule1153_pass3209:
    rx1150_cstack = rx1150_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1150_pos, $P11, rx1150_curclass, "$!pos"
    rx1150_cur."!cursor_pass"(rx1150_pos, "infix:sym<gt>", 'backtrack'=>1)
    .return (rx1150_cur)
  rx1150_restart3199:
    repr_get_attr_obj rx1150_cstack, rx1150_cur, rx1150_curclass, "$!cstack"
  rx1150_fail3200:
    unless rx1150_bstack, rx1150_done3198
    pop $I19, rx1150_bstack
    if_null rx1150_cstack, rx1150_cstack_done3203
    unless rx1150_cstack, rx1150_cstack_done3203
    dec $I19
    set $P11, rx1150_cstack[$I19]
  rx1150_cstack_done3203:
    pop rx1150_rep, rx1150_bstack
    pop rx1150_pos, rx1150_bstack
    pop $I19, rx1150_bstack
    lt rx1150_pos, -1, rx1150_done3198
    lt rx1150_pos, 0, rx1150_fail3200
    eq $I19, 0, rx1150_fail3200
    nqp_islist $I20, rx1150_cstack
    unless $I20, rx1150_jump3201
    elements $I18, rx1150_bstack
    le $I18, 0, rx1150_cut3202
    dec $I18
    set $I18, rx1150_bstack[$I18]
  rx1150_cut3202:
    assign rx1150_cstack, $I18
  rx1150_jump3201:
    jump $I19
  rx1150_done3198:
    rx1150_cur."!cursor_fail"()
    .return (rx1150_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_206_1349901750.327_caps" :subid("cuid_memo_345_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_206_1349901750.327_nfa" :subid("cuid_memo_346_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 103
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 116
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<=:=>" :subid("cuid_207_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1324
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1154_tgt
    .local int rx1154_pos
    .local int rx1154_off
    .local int rx1154_eos
    .local int rx1154_rep
    .local pmc rx1154_cur
    .local pmc rx1154_curclass
    .local pmc rx1154_bstack
    .local pmc rx1154_cstack
    (rx1154_cur, rx1154_tgt, rx1154_pos, rx1154_curclass, rx1154_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1154_cur
    length rx1154_eos, rx1154_tgt
    eq $I19, 1, rx1154_restart3212
    gt rx1154_pos, rx1154_eos, rx1154_fail3213
    repr_get_attr_int $I11, self, rx1154_curclass, "$!from"
    ne $I11, -1, rxscan1155_done3219
    goto rxscan1155_scan3218
  rxscan1155_loop3217:
    inc rx1154_pos
    gt rx1154_pos, rx1154_eos, rx1154_fail3213
    repr_bind_attr_int rx1154_cur, rx1154_curclass, "$!from", rx1154_pos
  rxscan1155_scan3218:
    nqp_rxmark rx1154_bstack, rxscan1155_loop3217, rx1154_pos, 0
  rxscan1155_done3219:
    nqp_rxmark rx1154_bstack, rxcap1156_fail3221, rx1154_pos, 0
    add $I11, rx1154_pos, 3
    gt $I11, rx1154_eos, rx1154_fail3213
    substr $S10, rx1154_tgt, rx1154_pos, 3
    ne $S10, ucs4:"=:=", rx1154_fail3213
    add rx1154_pos, 3
    nqp_rxpeek $I19, rx1154_bstack, rxcap1156_fail3221
    inc $I19
    set $I11, rx1154_bstack[$I19]
    repr_bind_attr_int rx1154_cur, rx1154_curclass, "$!pos", rx1154_pos
    $P11 = rx1154_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1154_pos)
    rx1154_cstack = rx1154_cur."!cursor_capture"($P11, "sym")
    goto rxcap1156_done3220
  rxcap1156_fail3221:
    goto rx1154_fail3213
  rxcap1156_done3220:
    repr_bind_attr_int rx1154_cur, rx1154_curclass, "$!pos", rx1154_pos
    $P11 = rx1154_cur."O"("%relational, :op<eqaddr>")
    repr_get_attr_int $I11, $P11, rx1154_curclass, "$!pos"
    lt $I11, 0, rx1154_fail3213
    nqp_rxmark rx1154_bstack, rxsubrule1157_pass3222, -1, 0
  rxsubrule1157_pass3222:
    rx1154_cstack = rx1154_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1154_pos, $P11, rx1154_curclass, "$!pos"
    rx1154_cur."!cursor_pass"(rx1154_pos, "infix:sym<=:=>", 'backtrack'=>1)
    .return (rx1154_cur)
  rx1154_restart3212:
    repr_get_attr_obj rx1154_cstack, rx1154_cur, rx1154_curclass, "$!cstack"
  rx1154_fail3213:
    unless rx1154_bstack, rx1154_done3211
    pop $I19, rx1154_bstack
    if_null rx1154_cstack, rx1154_cstack_done3216
    unless rx1154_cstack, rx1154_cstack_done3216
    dec $I19
    set $P11, rx1154_cstack[$I19]
  rx1154_cstack_done3216:
    pop rx1154_rep, rx1154_bstack
    pop rx1154_pos, rx1154_bstack
    pop $I19, rx1154_bstack
    lt rx1154_pos, -1, rx1154_done3211
    lt rx1154_pos, 0, rx1154_fail3213
    eq $I19, 0, rx1154_fail3213
    nqp_islist $I20, rx1154_cstack
    unless $I20, rx1154_jump3214
    elements $I18, rx1154_bstack
    le $I18, 0, rx1154_cut3215
    dec $I18
    set $I18, rx1154_bstack[$I18]
  rx1154_cut3215:
    assign rx1154_cstack, $I18
  rx1154_jump3214:
    jump $I19
  rx1154_done3211:
    rx1154_cur."!cursor_fail"()
    .return (rx1154_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_207_1349901750.327_caps" :subid("cuid_memo_347_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_207_1349901750.327_nfa" :subid("cuid_memo_348_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 61
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 58
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 61
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "O"
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<~~>" :subid("cuid_208_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1325
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1158_tgt
    .local int rx1158_pos
    .local int rx1158_off
    .local int rx1158_eos
    .local int rx1158_rep
    .local pmc rx1158_cur
    .local pmc rx1158_curclass
    .local pmc rx1158_bstack
    .local pmc rx1158_cstack
    (rx1158_cur, rx1158_tgt, rx1158_pos, rx1158_curclass, rx1158_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1158_cur
    length rx1158_eos, rx1158_tgt
    eq $I19, 1, rx1158_restart3225
    gt rx1158_pos, rx1158_eos, rx1158_fail3226
    repr_get_attr_int $I11, self, rx1158_curclass, "$!from"
    ne $I11, -1, rxscan1159_done3232
    goto rxscan1159_scan3231
  rxscan1159_loop3230:
    inc rx1158_pos
    gt rx1158_pos, rx1158_eos, rx1158_fail3226
    repr_bind_attr_int rx1158_cur, rx1158_curclass, "$!from", rx1158_pos
  rxscan1159_scan3231:
    nqp_rxmark rx1158_bstack, rxscan1159_loop3230, rx1158_pos, 0
  rxscan1159_done3232:
    nqp_rxmark rx1158_bstack, rxcap1160_fail3234, rx1158_pos, 0
    add $I11, rx1158_pos, 2
    gt $I11, rx1158_eos, rx1158_fail3226
    substr $S10, rx1158_tgt, rx1158_pos, 2
    ne $S10, ucs4:"~~", rx1158_fail3226
    add rx1158_pos, 2
    nqp_rxpeek $I19, rx1158_bstack, rxcap1160_fail3234
    inc $I19
    set $I11, rx1158_bstack[$I19]
    repr_bind_attr_int rx1158_cur, rx1158_curclass, "$!pos", rx1158_pos
    $P11 = rx1158_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1158_pos)
    rx1158_cstack = rx1158_cur."!cursor_capture"($P11, "sym")
    goto rxcap1160_done3233
  rxcap1160_fail3234:
    goto rx1158_fail3226
  rxcap1160_done3233:
    repr_bind_attr_int rx1158_cur, rx1158_curclass, "$!pos", rx1158_pos
    $P11 = rx1158_cur."O"("%relational, :reducecheck<smartmatch>")
    repr_get_attr_int $I11, $P11, rx1158_curclass, "$!pos"
    lt $I11, 0, rx1158_fail3226
    nqp_rxmark rx1158_bstack, rxsubrule1161_pass3235, -1, 0
  rxsubrule1161_pass3235:
    rx1158_cstack = rx1158_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1158_pos, $P11, rx1158_curclass, "$!pos"
    rx1158_cur."!cursor_pass"(rx1158_pos, "infix:sym<~~>", 'backtrack'=>1)
    .return (rx1158_cur)
  rx1158_restart3225:
    repr_get_attr_obj rx1158_cstack, rx1158_cur, rx1158_curclass, "$!cstack"
  rx1158_fail3226:
    unless rx1158_bstack, rx1158_done3224
    pop $I19, rx1158_bstack
    if_null rx1158_cstack, rx1158_cstack_done3229
    unless rx1158_cstack, rx1158_cstack_done3229
    dec $I19
    set $P11, rx1158_cstack[$I19]
  rx1158_cstack_done3229:
    pop rx1158_rep, rx1158_bstack
    pop rx1158_pos, rx1158_bstack
    pop $I19, rx1158_bstack
    lt rx1158_pos, -1, rx1158_done3224
    lt rx1158_pos, 0, rx1158_fail3226
    eq $I19, 0, rx1158_fail3226
    nqp_islist $I20, rx1158_cstack
    unless $I20, rx1158_jump3227
    elements $I18, rx1158_bstack
    le $I18, 0, rx1158_cut3228
    dec $I18
    set $I18, rx1158_bstack[$I18]
  rx1158_cut3228:
    assign rx1158_cstack, $I18
  rx1158_jump3227:
    jump $I19
  rx1158_done3224:
    rx1158_cur."!cursor_fail"()
    .return (rx1158_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_208_1349901750.327_caps" :subid("cuid_memo_349_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_208_1349901750.327_nfa" :subid("cuid_memo_350_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 126
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 126
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<&&>" :subid("cuid_209_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1327
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1162_tgt
    .local int rx1162_pos
    .local int rx1162_off
    .local int rx1162_eos
    .local int rx1162_rep
    .local pmc rx1162_cur
    .local pmc rx1162_curclass
    .local pmc rx1162_bstack
    .local pmc rx1162_cstack
    (rx1162_cur, rx1162_tgt, rx1162_pos, rx1162_curclass, rx1162_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1162_cur
    length rx1162_eos, rx1162_tgt
    eq $I19, 1, rx1162_restart3238
    gt rx1162_pos, rx1162_eos, rx1162_fail3239
    repr_get_attr_int $I11, self, rx1162_curclass, "$!from"
    ne $I11, -1, rxscan1163_done3245
    goto rxscan1163_scan3244
  rxscan1163_loop3243:
    inc rx1162_pos
    gt rx1162_pos, rx1162_eos, rx1162_fail3239
    repr_bind_attr_int rx1162_cur, rx1162_curclass, "$!from", rx1162_pos
  rxscan1163_scan3244:
    nqp_rxmark rx1162_bstack, rxscan1163_loop3243, rx1162_pos, 0
  rxscan1163_done3245:
    nqp_rxmark rx1162_bstack, rxcap1164_fail3247, rx1162_pos, 0
    add $I11, rx1162_pos, 2
    gt $I11, rx1162_eos, rx1162_fail3239
    substr $S10, rx1162_tgt, rx1162_pos, 2
    ne $S10, ucs4:"&&", rx1162_fail3239
    add rx1162_pos, 2
    nqp_rxpeek $I19, rx1162_bstack, rxcap1164_fail3247
    inc $I19
    set $I11, rx1162_bstack[$I19]
    repr_bind_attr_int rx1162_cur, rx1162_curclass, "$!pos", rx1162_pos
    $P11 = rx1162_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1162_pos)
    rx1162_cstack = rx1162_cur."!cursor_capture"($P11, "sym")
    goto rxcap1164_done3246
  rxcap1164_fail3247:
    goto rx1162_fail3239
  rxcap1164_done3246:
    repr_bind_attr_int rx1162_cur, rx1162_curclass, "$!pos", rx1162_pos
    $P11 = rx1162_cur."O"("%tight_and, :op<if>")
    repr_get_attr_int $I11, $P11, rx1162_curclass, "$!pos"
    lt $I11, 0, rx1162_fail3239
    nqp_rxmark rx1162_bstack, rxsubrule1165_pass3248, -1, 0
  rxsubrule1165_pass3248:
    rx1162_cstack = rx1162_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1162_pos, $P11, rx1162_curclass, "$!pos"
    rx1162_cur."!cursor_pass"(rx1162_pos, "infix:sym<&&>", 'backtrack'=>1)
    .return (rx1162_cur)
  rx1162_restart3238:
    repr_get_attr_obj rx1162_cstack, rx1162_cur, rx1162_curclass, "$!cstack"
  rx1162_fail3239:
    unless rx1162_bstack, rx1162_done3237
    pop $I19, rx1162_bstack
    if_null rx1162_cstack, rx1162_cstack_done3242
    unless rx1162_cstack, rx1162_cstack_done3242
    dec $I19
    set $P11, rx1162_cstack[$I19]
  rx1162_cstack_done3242:
    pop rx1162_rep, rx1162_bstack
    pop rx1162_pos, rx1162_bstack
    pop $I19, rx1162_bstack
    lt rx1162_pos, -1, rx1162_done3237
    lt rx1162_pos, 0, rx1162_fail3239
    eq $I19, 0, rx1162_fail3239
    nqp_islist $I20, rx1162_cstack
    unless $I20, rx1162_jump3240
    elements $I18, rx1162_bstack
    le $I18, 0, rx1162_cut3241
    dec $I18
    set $I18, rx1162_bstack[$I18]
  rx1162_cut3241:
    assign rx1162_cstack, $I18
  rx1162_jump3240:
    jump $I19
  rx1162_done3237:
    rx1162_cur."!cursor_fail"()
    .return (rx1162_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_209_1349901750.327_caps" :subid("cuid_memo_351_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_209_1349901750.327_nfa" :subid("cuid_memo_352_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 38
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 38
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<||>" :subid("cuid_210_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1329
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1166_tgt
    .local int rx1166_pos
    .local int rx1166_off
    .local int rx1166_eos
    .local int rx1166_rep
    .local pmc rx1166_cur
    .local pmc rx1166_curclass
    .local pmc rx1166_bstack
    .local pmc rx1166_cstack
    (rx1166_cur, rx1166_tgt, rx1166_pos, rx1166_curclass, rx1166_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1166_cur
    length rx1166_eos, rx1166_tgt
    eq $I19, 1, rx1166_restart3251
    gt rx1166_pos, rx1166_eos, rx1166_fail3252
    repr_get_attr_int $I11, self, rx1166_curclass, "$!from"
    ne $I11, -1, rxscan1167_done3258
    goto rxscan1167_scan3257
  rxscan1167_loop3256:
    inc rx1166_pos
    gt rx1166_pos, rx1166_eos, rx1166_fail3252
    repr_bind_attr_int rx1166_cur, rx1166_curclass, "$!from", rx1166_pos
  rxscan1167_scan3257:
    nqp_rxmark rx1166_bstack, rxscan1167_loop3256, rx1166_pos, 0
  rxscan1167_done3258:
    nqp_rxmark rx1166_bstack, rxcap1168_fail3260, rx1166_pos, 0
    add $I11, rx1166_pos, 2
    gt $I11, rx1166_eos, rx1166_fail3252
    substr $S10, rx1166_tgt, rx1166_pos, 2
    ne $S10, ucs4:"||", rx1166_fail3252
    add rx1166_pos, 2
    nqp_rxpeek $I19, rx1166_bstack, rxcap1168_fail3260
    inc $I19
    set $I11, rx1166_bstack[$I19]
    repr_bind_attr_int rx1166_cur, rx1166_curclass, "$!pos", rx1166_pos
    $P11 = rx1166_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1166_pos)
    rx1166_cstack = rx1166_cur."!cursor_capture"($P11, "sym")
    goto rxcap1168_done3259
  rxcap1168_fail3260:
    goto rx1166_fail3252
  rxcap1168_done3259:
    repr_bind_attr_int rx1166_cur, rx1166_curclass, "$!pos", rx1166_pos
    $P11 = rx1166_cur."O"("%tight_or, :op<unless>")
    repr_get_attr_int $I11, $P11, rx1166_curclass, "$!pos"
    lt $I11, 0, rx1166_fail3252
    nqp_rxmark rx1166_bstack, rxsubrule1169_pass3261, -1, 0
  rxsubrule1169_pass3261:
    rx1166_cstack = rx1166_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1166_pos, $P11, rx1166_curclass, "$!pos"
    rx1166_cur."!cursor_pass"(rx1166_pos, "infix:sym<||>", 'backtrack'=>1)
    .return (rx1166_cur)
  rx1166_restart3251:
    repr_get_attr_obj rx1166_cstack, rx1166_cur, rx1166_curclass, "$!cstack"
  rx1166_fail3252:
    unless rx1166_bstack, rx1166_done3250
    pop $I19, rx1166_bstack
    if_null rx1166_cstack, rx1166_cstack_done3255
    unless rx1166_cstack, rx1166_cstack_done3255
    dec $I19
    set $P11, rx1166_cstack[$I19]
  rx1166_cstack_done3255:
    pop rx1166_rep, rx1166_bstack
    pop rx1166_pos, rx1166_bstack
    pop $I19, rx1166_bstack
    lt rx1166_pos, -1, rx1166_done3250
    lt rx1166_pos, 0, rx1166_fail3252
    eq $I19, 0, rx1166_fail3252
    nqp_islist $I20, rx1166_cstack
    unless $I20, rx1166_jump3253
    elements $I18, rx1166_bstack
    le $I18, 0, rx1166_cut3254
    dec $I18
    set $I18, rx1166_bstack[$I18]
  rx1166_cut3254:
    assign rx1166_cstack, $I18
  rx1166_jump3253:
    jump $I19
  rx1166_done3250:
    rx1166_cur."!cursor_fail"()
    .return (rx1166_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_210_1349901750.327_caps" :subid("cuid_memo_353_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_210_1349901750.327_nfa" :subid("cuid_memo_354_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 124
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 124
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<//>" :subid("cuid_211_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1330
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1170_tgt
    .local int rx1170_pos
    .local int rx1170_off
    .local int rx1170_eos
    .local int rx1170_rep
    .local pmc rx1170_cur
    .local pmc rx1170_curclass
    .local pmc rx1170_bstack
    .local pmc rx1170_cstack
    (rx1170_cur, rx1170_tgt, rx1170_pos, rx1170_curclass, rx1170_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1170_cur
    length rx1170_eos, rx1170_tgt
    eq $I19, 1, rx1170_restart3264
    gt rx1170_pos, rx1170_eos, rx1170_fail3265
    repr_get_attr_int $I11, self, rx1170_curclass, "$!from"
    ne $I11, -1, rxscan1171_done3271
    goto rxscan1171_scan3270
  rxscan1171_loop3269:
    inc rx1170_pos
    gt rx1170_pos, rx1170_eos, rx1170_fail3265
    repr_bind_attr_int rx1170_cur, rx1170_curclass, "$!from", rx1170_pos
  rxscan1171_scan3270:
    nqp_rxmark rx1170_bstack, rxscan1171_loop3269, rx1170_pos, 0
  rxscan1171_done3271:
    nqp_rxmark rx1170_bstack, rxcap1172_fail3273, rx1170_pos, 0
    add $I11, rx1170_pos, 2
    gt $I11, rx1170_eos, rx1170_fail3265
    substr $S10, rx1170_tgt, rx1170_pos, 2
    ne $S10, ucs4:"//", rx1170_fail3265
    add rx1170_pos, 2
    nqp_rxpeek $I19, rx1170_bstack, rxcap1172_fail3273
    inc $I19
    set $I11, rx1170_bstack[$I19]
    repr_bind_attr_int rx1170_cur, rx1170_curclass, "$!pos", rx1170_pos
    $P11 = rx1170_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1170_pos)
    rx1170_cstack = rx1170_cur."!cursor_capture"($P11, "sym")
    goto rxcap1172_done3272
  rxcap1172_fail3273:
    goto rx1170_fail3265
  rxcap1172_done3272:
    repr_bind_attr_int rx1170_cur, rx1170_curclass, "$!pos", rx1170_pos
    $P11 = rx1170_cur."O"("%tight_or, :op<defor>")
    repr_get_attr_int $I11, $P11, rx1170_curclass, "$!pos"
    lt $I11, 0, rx1170_fail3265
    nqp_rxmark rx1170_bstack, rxsubrule1173_pass3274, -1, 0
  rxsubrule1173_pass3274:
    rx1170_cstack = rx1170_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1170_pos, $P11, rx1170_curclass, "$!pos"
    rx1170_cur."!cursor_pass"(rx1170_pos, "infix:sym<//>", 'backtrack'=>1)
    .return (rx1170_cur)
  rx1170_restart3264:
    repr_get_attr_obj rx1170_cstack, rx1170_cur, rx1170_curclass, "$!cstack"
  rx1170_fail3265:
    unless rx1170_bstack, rx1170_done3263
    pop $I19, rx1170_bstack
    if_null rx1170_cstack, rx1170_cstack_done3268
    unless rx1170_cstack, rx1170_cstack_done3268
    dec $I19
    set $P11, rx1170_cstack[$I19]
  rx1170_cstack_done3268:
    pop rx1170_rep, rx1170_bstack
    pop rx1170_pos, rx1170_bstack
    pop $I19, rx1170_bstack
    lt rx1170_pos, -1, rx1170_done3263
    lt rx1170_pos, 0, rx1170_fail3265
    eq $I19, 0, rx1170_fail3265
    nqp_islist $I20, rx1170_cstack
    unless $I20, rx1170_jump3266
    elements $I18, rx1170_bstack
    le $I18, 0, rx1170_cut3267
    dec $I18
    set $I18, rx1170_bstack[$I18]
  rx1170_cut3267:
    assign rx1170_cstack, $I18
  rx1170_jump3266:
    jump $I19
  rx1170_done3263:
    rx1170_cur."!cursor_fail"()
    .return (rx1170_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_211_1349901750.327_caps" :subid("cuid_memo_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_211_1349901750.327_nfa" :subid("cuid_memo_356_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 47
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 47
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<?? !!>" :subid("cuid_212_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1332
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1174_tgt
    .local int rx1174_pos
    .local int rx1174_off
    .local int rx1174_eos
    .local int rx1174_rep
    .local pmc rx1174_cur
    .local pmc rx1174_curclass
    .local pmc rx1174_bstack
    .local pmc rx1174_cstack
    (rx1174_cur, rx1174_tgt, rx1174_pos, rx1174_curclass, rx1174_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1174_cur
    length rx1174_eos, rx1174_tgt
    eq $I19, 1, rx1174_restart3277
    gt rx1174_pos, rx1174_eos, rx1174_fail3278
    repr_get_attr_int $I11, self, rx1174_curclass, "$!from"
    ne $I11, -1, rxscan1175_done3284
    goto rxscan1175_scan3283
  rxscan1175_loop3282:
    inc rx1174_pos
    gt rx1174_pos, rx1174_eos, rx1174_fail3278
    repr_bind_attr_int rx1174_cur, rx1174_curclass, "$!from", rx1174_pos
  rxscan1175_scan3283:
    nqp_rxmark rx1174_bstack, rxscan1175_loop3282, rx1174_pos, 0
  rxscan1175_done3284:
    add $I11, rx1174_pos, 2
    gt $I11, rx1174_eos, rx1174_fail3278
    substr $S10, rx1174_tgt, rx1174_pos, 2
    ne $S10, ucs4:"??", rx1174_fail3278
    add rx1174_pos, 2
    repr_bind_attr_int rx1174_cur, rx1174_curclass, "$!pos", rx1174_pos
    $P11 = rx1174_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1174_curclass, "$!pos"
    lt $I11, 0, rx1174_fail3278
    repr_get_attr_int rx1174_pos, $P11, rx1174_curclass, "$!pos"
    repr_bind_attr_int rx1174_cur, rx1174_curclass, "$!pos", rx1174_pos
    $P11 = rx1174_cur."EXPR"("i=")
    repr_get_attr_int $I11, $P11, rx1174_curclass, "$!pos"
    lt $I11, 0, rx1174_fail3278
    nqp_rxmark rx1174_bstack, rxsubrule1177_pass3286, -1, 0
  rxsubrule1177_pass3286:
    rx1174_cstack = rx1174_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx1174_pos, $P11, rx1174_curclass, "$!pos"
    add $I11, rx1174_pos, 2
    gt $I11, rx1174_eos, rx1174_fail3278
    substr $S10, rx1174_tgt, rx1174_pos, 2
    ne $S10, ucs4:"!!", rx1174_fail3278
    add rx1174_pos, 2
    repr_bind_attr_int rx1174_cur, rx1174_curclass, "$!pos", rx1174_pos
    $P11 = rx1174_cur."O"("%conditional, :reducecheck<ternary>, :op<if>")
    repr_get_attr_int $I11, $P11, rx1174_curclass, "$!pos"
    lt $I11, 0, rx1174_fail3278
    nqp_rxmark rx1174_bstack, rxsubrule1178_pass3287, -1, 0
  rxsubrule1178_pass3287:
    rx1174_cstack = rx1174_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1174_pos, $P11, rx1174_curclass, "$!pos"
    rx1174_cur."!cursor_pass"(rx1174_pos, "infix:sym<?? !!>", 'backtrack'=>1)
    .return (rx1174_cur)
  rx1174_restart3277:
    repr_get_attr_obj rx1174_cstack, rx1174_cur, rx1174_curclass, "$!cstack"
  rx1174_fail3278:
    unless rx1174_bstack, rx1174_done3276
    pop $I19, rx1174_bstack
    if_null rx1174_cstack, rx1174_cstack_done3281
    unless rx1174_cstack, rx1174_cstack_done3281
    dec $I19
    set $P11, rx1174_cstack[$I19]
  rx1174_cstack_done3281:
    pop rx1174_rep, rx1174_bstack
    pop rx1174_pos, rx1174_bstack
    pop $I19, rx1174_bstack
    lt rx1174_pos, -1, rx1174_done3276
    lt rx1174_pos, 0, rx1174_fail3278
    eq $I19, 0, rx1174_fail3278
    nqp_islist $I20, rx1174_cstack
    unless $I20, rx1174_jump3279
    elements $I18, rx1174_bstack
    le $I18, 0, rx1174_cut3280
    dec $I18
    set $I18, rx1174_bstack[$I18]
  rx1174_cut3280:
    assign rx1174_cstack, $I18
  rx1174_jump3279:
    jump $I19
  rx1174_done3276:
    rx1174_cur."!cursor_fail"()
    .return (rx1174_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_212_1349901750.327_caps" :subid("cuid_memo_357_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["EXPR"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_212_1349901750.327_nfa" :subid("cuid_memo_358_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 63
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 63
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "ws"
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "EXPR"
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 33
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 33
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "O"
    push $P5027, $P5029
    box $P5030, 0
    push $P5027, $P5030
    push $P5001, $P5027
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<=>" :subid("cuid_213_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1340
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1179_tgt
    .local int rx1179_pos
    .local int rx1179_off
    .local int rx1179_eos
    .local int rx1179_rep
    .local pmc rx1179_cur
    .local pmc rx1179_curclass
    .local pmc rx1179_bstack
    .local pmc rx1179_cstack
    (rx1179_cur, rx1179_tgt, rx1179_pos, rx1179_curclass, rx1179_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1179_cur
    length rx1179_eos, rx1179_tgt
    eq $I19, 1, rx1179_restart3290
    gt rx1179_pos, rx1179_eos, rx1179_fail3291
    repr_get_attr_int $I11, self, rx1179_curclass, "$!from"
    ne $I11, -1, rxscan1180_done3297
    goto rxscan1180_scan3296
  rxscan1180_loop3295:
    inc rx1179_pos
    gt rx1179_pos, rx1179_eos, rx1179_fail3291
    repr_bind_attr_int rx1179_cur, rx1179_curclass, "$!from", rx1179_pos
  rxscan1180_scan3296:
    nqp_rxmark rx1179_bstack, rxscan1180_loop3295, rx1179_pos, 0
  rxscan1180_done3297:
    nqp_rxmark rx1179_bstack, rxcap1181_fail3299, rx1179_pos, 0
    add $I11, rx1179_pos, 1
    gt $I11, rx1179_eos, rx1179_fail3291
    substr $S10, rx1179_tgt, rx1179_pos, 1
    ne $S10, ucs4:"=", rx1179_fail3291
    add rx1179_pos, 1
    nqp_rxpeek $I19, rx1179_bstack, rxcap1181_fail3299
    inc $I19
    set $I11, rx1179_bstack[$I19]
    repr_bind_attr_int rx1179_cur, rx1179_curclass, "$!pos", rx1179_pos
    $P11 = rx1179_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1179_pos)
    rx1179_cstack = rx1179_cur."!cursor_capture"($P11, "sym")
    goto rxcap1181_done3298
  rxcap1181_fail3299:
    goto rx1179_fail3291
  rxcap1181_done3298:
    repr_bind_attr_int rx1179_cur, rx1179_curclass, "$!pos", rx1179_pos
    $P11 = rx1179_cur."panic"("Assignment (\"=\") not supported in NQP, use \":=\" instead")
    repr_get_attr_int $I11, $P11, rx1179_curclass, "$!pos"
    lt $I11, 0, rx1179_fail3291
    repr_get_attr_int rx1179_pos, $P11, rx1179_curclass, "$!pos"
    rx1179_cur."!cursor_pass"(rx1179_pos, "infix:sym<=>", 'backtrack'=>1)
    .return (rx1179_cur)
  rx1179_restart3290:
    repr_get_attr_obj rx1179_cstack, rx1179_cur, rx1179_curclass, "$!cstack"
  rx1179_fail3291:
    unless rx1179_bstack, rx1179_done3289
    pop $I19, rx1179_bstack
    if_null rx1179_cstack, rx1179_cstack_done3294
    unless rx1179_cstack, rx1179_cstack_done3294
    dec $I19
    set $P11, rx1179_cstack[$I19]
  rx1179_cstack_done3294:
    pop rx1179_rep, rx1179_bstack
    pop rx1179_pos, rx1179_bstack
    pop $I19, rx1179_bstack
    lt rx1179_pos, -1, rx1179_done3289
    lt rx1179_pos, 0, rx1179_fail3291
    eq $I19, 0, rx1179_fail3291
    nqp_islist $I20, rx1179_cstack
    unless $I20, rx1179_jump3292
    elements $I18, rx1179_bstack
    le $I18, 0, rx1179_cut3293
    dec $I18
    set $I18, rx1179_bstack[$I18]
  rx1179_cut3293:
    assign rx1179_cstack, $I18
  rx1179_jump3292:
    jump $I19
  rx1179_done3289:
    rx1179_cur."!cursor_fail"()
    .return (rx1179_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_213_1349901750.327_caps" :subid("cuid_memo_359_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_213_1349901750.327_nfa" :subid("cuid_memo_360_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 61
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "panic"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<:=>" :subid("cuid_214_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1343
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1183_tgt
    .local int rx1183_pos
    .local int rx1183_off
    .local int rx1183_eos
    .local int rx1183_rep
    .local pmc rx1183_cur
    .local pmc rx1183_curclass
    .local pmc rx1183_bstack
    .local pmc rx1183_cstack
    (rx1183_cur, rx1183_tgt, rx1183_pos, rx1183_curclass, rx1183_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1183_cur
    length rx1183_eos, rx1183_tgt
    eq $I19, 1, rx1183_restart3303
    gt rx1183_pos, rx1183_eos, rx1183_fail3304
    repr_get_attr_int $I11, self, rx1183_curclass, "$!from"
    ne $I11, -1, rxscan1184_done3310
    goto rxscan1184_scan3309
  rxscan1184_loop3308:
    inc rx1183_pos
    gt rx1183_pos, rx1183_eos, rx1183_fail3304
    repr_bind_attr_int rx1183_cur, rx1183_curclass, "$!from", rx1183_pos
  rxscan1184_scan3309:
    nqp_rxmark rx1183_bstack, rxscan1184_loop3308, rx1183_pos, 0
  rxscan1184_done3310:
    nqp_rxmark rx1183_bstack, rxcap1185_fail3312, rx1183_pos, 0
    add $I11, rx1183_pos, 2
    gt $I11, rx1183_eos, rx1183_fail3304
    substr $S10, rx1183_tgt, rx1183_pos, 2
    ne $S10, ucs4:":=", rx1183_fail3304
    add rx1183_pos, 2
    nqp_rxpeek $I19, rx1183_bstack, rxcap1185_fail3312
    inc $I19
    set $I11, rx1183_bstack[$I19]
    repr_bind_attr_int rx1183_cur, rx1183_curclass, "$!pos", rx1183_pos
    $P11 = rx1183_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1183_pos)
    rx1183_cstack = rx1183_cur."!cursor_capture"($P11, "sym")
    goto rxcap1185_done3311
  rxcap1185_fail3312:
    goto rx1183_fail3304
  rxcap1185_done3311:
    repr_bind_attr_int rx1183_cur, rx1183_curclass, "$!pos", rx1183_pos
    $P11 = rx1183_cur."O"("%assignment, :op<bind>")
    repr_get_attr_int $I11, $P11, rx1183_curclass, "$!pos"
    lt $I11, 0, rx1183_fail3304
    nqp_rxmark rx1183_bstack, rxsubrule1186_pass3313, -1, 0
  rxsubrule1186_pass3313:
    rx1183_cstack = rx1183_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1183_pos, $P11, rx1183_curclass, "$!pos"
    rx1183_cur."!cursor_pass"(rx1183_pos, "infix:sym<:=>", 'backtrack'=>1)
    .return (rx1183_cur)
  rx1183_restart3303:
    repr_get_attr_obj rx1183_cstack, rx1183_cur, rx1183_curclass, "$!cstack"
  rx1183_fail3304:
    unless rx1183_bstack, rx1183_done3302
    pop $I19, rx1183_bstack
    if_null rx1183_cstack, rx1183_cstack_done3307
    unless rx1183_cstack, rx1183_cstack_done3307
    dec $I19
    set $P11, rx1183_cstack[$I19]
  rx1183_cstack_done3307:
    pop rx1183_rep, rx1183_bstack
    pop rx1183_pos, rx1183_bstack
    pop $I19, rx1183_bstack
    lt rx1183_pos, -1, rx1183_done3302
    lt rx1183_pos, 0, rx1183_fail3304
    eq $I19, 0, rx1183_fail3304
    nqp_islist $I20, rx1183_cstack
    unless $I20, rx1183_jump3305
    elements $I18, rx1183_bstack
    le $I18, 0, rx1183_cut3306
    dec $I18
    set $I18, rx1183_bstack[$I18]
  rx1183_cut3306:
    assign rx1183_cstack, $I18
  rx1183_jump3305:
    jump $I19
  rx1183_done3302:
    rx1183_cur."!cursor_fail"()
    .return (rx1183_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_214_1349901750.327_caps" :subid("cuid_memo_361_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_214_1349901750.327_nfa" :subid("cuid_memo_362_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 58
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 61
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<::=>" :subid("cuid_215_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1344
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1187_tgt
    .local int rx1187_pos
    .local int rx1187_off
    .local int rx1187_eos
    .local int rx1187_rep
    .local pmc rx1187_cur
    .local pmc rx1187_curclass
    .local pmc rx1187_bstack
    .local pmc rx1187_cstack
    (rx1187_cur, rx1187_tgt, rx1187_pos, rx1187_curclass, rx1187_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1187_cur
    length rx1187_eos, rx1187_tgt
    eq $I19, 1, rx1187_restart3316
    gt rx1187_pos, rx1187_eos, rx1187_fail3317
    repr_get_attr_int $I11, self, rx1187_curclass, "$!from"
    ne $I11, -1, rxscan1188_done3323
    goto rxscan1188_scan3322
  rxscan1188_loop3321:
    inc rx1187_pos
    gt rx1187_pos, rx1187_eos, rx1187_fail3317
    repr_bind_attr_int rx1187_cur, rx1187_curclass, "$!from", rx1187_pos
  rxscan1188_scan3322:
    nqp_rxmark rx1187_bstack, rxscan1188_loop3321, rx1187_pos, 0
  rxscan1188_done3323:
    nqp_rxmark rx1187_bstack, rxcap1189_fail3325, rx1187_pos, 0
    add $I11, rx1187_pos, 3
    gt $I11, rx1187_eos, rx1187_fail3317
    substr $S10, rx1187_tgt, rx1187_pos, 3
    ne $S10, ucs4:"::=", rx1187_fail3317
    add rx1187_pos, 3
    nqp_rxpeek $I19, rx1187_bstack, rxcap1189_fail3325
    inc $I19
    set $I11, rx1187_bstack[$I19]
    repr_bind_attr_int rx1187_cur, rx1187_curclass, "$!pos", rx1187_pos
    $P11 = rx1187_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1187_pos)
    rx1187_cstack = rx1187_cur."!cursor_capture"($P11, "sym")
    goto rxcap1189_done3324
  rxcap1189_fail3325:
    goto rx1187_fail3317
  rxcap1189_done3324:
    repr_bind_attr_int rx1187_cur, rx1187_curclass, "$!pos", rx1187_pos
    $P11 = rx1187_cur."O"("%assignment, :op<bind>")
    repr_get_attr_int $I11, $P11, rx1187_curclass, "$!pos"
    lt $I11, 0, rx1187_fail3317
    nqp_rxmark rx1187_bstack, rxsubrule1190_pass3326, -1, 0
  rxsubrule1190_pass3326:
    rx1187_cstack = rx1187_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1187_pos, $P11, rx1187_curclass, "$!pos"
    rx1187_cur."!cursor_pass"(rx1187_pos, "infix:sym<::=>", 'backtrack'=>1)
    .return (rx1187_cur)
  rx1187_restart3316:
    repr_get_attr_obj rx1187_cstack, rx1187_cur, rx1187_curclass, "$!cstack"
  rx1187_fail3317:
    unless rx1187_bstack, rx1187_done3315
    pop $I19, rx1187_bstack
    if_null rx1187_cstack, rx1187_cstack_done3320
    unless rx1187_cstack, rx1187_cstack_done3320
    dec $I19
    set $P11, rx1187_cstack[$I19]
  rx1187_cstack_done3320:
    pop rx1187_rep, rx1187_bstack
    pop rx1187_pos, rx1187_bstack
    pop $I19, rx1187_bstack
    lt rx1187_pos, -1, rx1187_done3315
    lt rx1187_pos, 0, rx1187_fail3317
    eq $I19, 0, rx1187_fail3317
    nqp_islist $I20, rx1187_cstack
    unless $I20, rx1187_jump3318
    elements $I18, rx1187_bstack
    le $I18, 0, rx1187_cut3319
    dec $I18
    set $I18, rx1187_bstack[$I18]
  rx1187_cut3319:
    assign rx1187_cstack, $I18
  rx1187_jump3318:
    jump $I19
  rx1187_done3315:
    rx1187_cur."!cursor_fail"()
    .return (rx1187_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_215_1349901750.327_caps" :subid("cuid_memo_363_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_215_1349901750.327_nfa" :subid("cuid_memo_364_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 58
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 58
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 61
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "O"
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<,>" :subid("cuid_216_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1346
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1191_tgt
    .local int rx1191_pos
    .local int rx1191_off
    .local int rx1191_eos
    .local int rx1191_rep
    .local pmc rx1191_cur
    .local pmc rx1191_curclass
    .local pmc rx1191_bstack
    .local pmc rx1191_cstack
    (rx1191_cur, rx1191_tgt, rx1191_pos, rx1191_curclass, rx1191_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1191_cur
    length rx1191_eos, rx1191_tgt
    eq $I19, 1, rx1191_restart3329
    gt rx1191_pos, rx1191_eos, rx1191_fail3330
    repr_get_attr_int $I11, self, rx1191_curclass, "$!from"
    ne $I11, -1, rxscan1192_done3336
    goto rxscan1192_scan3335
  rxscan1192_loop3334:
    inc rx1191_pos
    gt rx1191_pos, rx1191_eos, rx1191_fail3330
    repr_bind_attr_int rx1191_cur, rx1191_curclass, "$!from", rx1191_pos
  rxscan1192_scan3335:
    nqp_rxmark rx1191_bstack, rxscan1192_loop3334, rx1191_pos, 0
  rxscan1192_done3336:
    nqp_rxmark rx1191_bstack, rxcap1193_fail3338, rx1191_pos, 0
    add $I11, rx1191_pos, 1
    gt $I11, rx1191_eos, rx1191_fail3330
    substr $S10, rx1191_tgt, rx1191_pos, 1
    ne $S10, ucs4:",", rx1191_fail3330
    add rx1191_pos, 1
    nqp_rxpeek $I19, rx1191_bstack, rxcap1193_fail3338
    inc $I19
    set $I11, rx1191_bstack[$I19]
    repr_bind_attr_int rx1191_cur, rx1191_curclass, "$!pos", rx1191_pos
    $P11 = rx1191_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1191_pos)
    rx1191_cstack = rx1191_cur."!cursor_capture"($P11, "sym")
    goto rxcap1193_done3337
  rxcap1193_fail3338:
    goto rx1191_fail3330
  rxcap1193_done3337:
    repr_bind_attr_int rx1191_cur, rx1191_curclass, "$!pos", rx1191_pos
    $P11 = rx1191_cur."O"("%comma, :op<list>")
    repr_get_attr_int $I11, $P11, rx1191_curclass, "$!pos"
    lt $I11, 0, rx1191_fail3330
    nqp_rxmark rx1191_bstack, rxsubrule1194_pass3339, -1, 0
  rxsubrule1194_pass3339:
    rx1191_cstack = rx1191_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1191_pos, $P11, rx1191_curclass, "$!pos"
    rx1191_cur."!cursor_pass"(rx1191_pos, "infix:sym<,>", 'backtrack'=>1)
    .return (rx1191_cur)
  rx1191_restart3329:
    repr_get_attr_obj rx1191_cstack, rx1191_cur, rx1191_curclass, "$!cstack"
  rx1191_fail3330:
    unless rx1191_bstack, rx1191_done3328
    pop $I19, rx1191_bstack
    if_null rx1191_cstack, rx1191_cstack_done3333
    unless rx1191_cstack, rx1191_cstack_done3333
    dec $I19
    set $P11, rx1191_cstack[$I19]
  rx1191_cstack_done3333:
    pop rx1191_rep, rx1191_bstack
    pop rx1191_pos, rx1191_bstack
    pop $I19, rx1191_bstack
    lt rx1191_pos, -1, rx1191_done3328
    lt rx1191_pos, 0, rx1191_fail3330
    eq $I19, 0, rx1191_fail3330
    nqp_islist $I20, rx1191_cstack
    unless $I20, rx1191_jump3331
    elements $I18, rx1191_bstack
    le $I18, 0, rx1191_cut3332
    dec $I18
    set $I18, rx1191_bstack[$I18]
  rx1191_cut3332:
    assign rx1191_cstack, $I18
  rx1191_jump3331:
    jump $I19
  rx1191_done3328:
    rx1191_cur."!cursor_fail"()
    .return (rx1191_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_216_1349901750.327_caps" :subid("cuid_memo_365_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_216_1349901750.327_nfa" :subid("cuid_memo_366_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 44
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<return>" :subid("cuid_217_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1348
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_399_1349901750.327' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1195_tgt
    .local int rx1195_pos
    .local int rx1195_off
    .local int rx1195_eos
    .local int rx1195_rep
    .local pmc rx1195_cur
    .local pmc rx1195_curclass
    .local pmc rx1195_bstack
    .local pmc rx1195_cstack
    (rx1195_cur, rx1195_tgt, rx1195_pos, rx1195_curclass, rx1195_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1195_cur
    length rx1195_eos, rx1195_tgt
    eq $I19, 1, rx1195_restart3342
    gt rx1195_pos, rx1195_eos, rx1195_fail3343
    repr_get_attr_int $I11, self, rx1195_curclass, "$!from"
    ne $I11, -1, rxscan1196_done3349
    goto rxscan1196_scan3348
  rxscan1196_loop3347:
    inc rx1195_pos
    gt rx1195_pos, rx1195_eos, rx1195_fail3343
    repr_bind_attr_int rx1195_cur, rx1195_curclass, "$!from", rx1195_pos
  rxscan1196_scan3348:
    nqp_rxmark rx1195_bstack, rxscan1196_loop3347, rx1195_pos, 0
  rxscan1196_done3349:
    nqp_rxmark rx1195_bstack, rxcap1197_fail3351, rx1195_pos, 0
    add $I11, rx1195_pos, 6
    gt $I11, rx1195_eos, rx1195_fail3343
    substr $S10, rx1195_tgt, rx1195_pos, 6
    ne $S10, ucs4:"return", rx1195_fail3343
    add rx1195_pos, 6
    nqp_rxpeek $I19, rx1195_bstack, rxcap1197_fail3351
    inc $I19
    set $I11, rx1195_bstack[$I19]
    repr_bind_attr_int rx1195_cur, rx1195_curclass, "$!pos", rx1195_pos
    $P11 = rx1195_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1195_pos)
    rx1195_cstack = rx1195_cur."!cursor_capture"($P11, "sym")
    goto rxcap1197_done3350
  rxcap1197_fail3351:
    goto rx1195_fail3343
  rxcap1197_done3350:
    ge rx1195_pos, rx1195_eos, rx1195_fail3343
    is_cclass $I11, .CCLASS_WHITESPACE, rx1195_tgt, rx1195_pos
    unless $I11, rx1195_fail3343
    add rx1195_pos, 1
    repr_bind_attr_int rx1195_cur, rx1195_curclass, "$!pos", rx1195_pos
    $P11 = rx1195_cur."O"("%list_prefix")
    repr_get_attr_int $I11, $P11, rx1195_curclass, "$!pos"
    lt $I11, 0, rx1195_fail3343
    nqp_rxmark rx1195_bstack, rxsubrule1198_pass3352, -1, 0
  rxsubrule1198_pass3352:
    rx1195_cstack = rx1195_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1195_pos, $P11, rx1195_curclass, "$!pos"
    repr_bind_attr_int rx1195_cur, rx1195_curclass, "$!pos", rx1195_pos
    store_lex unicode:"$\x{a2}", rx1195_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_399_1349901750.327' 
    capture_lex $P5002
    $P5003 = $P5002()
    rx1195_cur."!cursor_pass"(rx1195_pos, "prefix:sym<return>", 'backtrack'=>1)
    .return (rx1195_cur)
  rx1195_restart3342:
    repr_get_attr_obj rx1195_cstack, rx1195_cur, rx1195_curclass, "$!cstack"
  rx1195_fail3343:
    unless rx1195_bstack, rx1195_done3341
    pop $I19, rx1195_bstack
    if_null rx1195_cstack, rx1195_cstack_done3346
    unless rx1195_cstack, rx1195_cstack_done3346
    dec $I19
    set $P11, rx1195_cstack[$I19]
  rx1195_cstack_done3346:
    pop rx1195_rep, rx1195_bstack
    pop rx1195_pos, rx1195_bstack
    pop $I19, rx1195_bstack
    lt rx1195_pos, -1, rx1195_done3341
    lt rx1195_pos, 0, rx1195_fail3343
    eq $I19, 0, rx1195_fail3343
    nqp_islist $I20, rx1195_cstack
    unless $I20, rx1195_jump3344
    elements $I18, rx1195_bstack
    le $I18, 0, rx1195_cut3345
    dec $I18
    set $I18, rx1195_bstack[$I18]
  rx1195_cut3345:
    assign rx1195_cstack, $I18
  rx1195_jump3344:
    jump $I19
  rx1195_done3341:
    rx1195_cur."!cursor_fail"()
    .return (rx1195_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_217_1349901750.327_caps" :subid("cuid_memo_367_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_217_1349901750.327_nfa" :subid("cuid_memo_368_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 114
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 101
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 116
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 117
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 114
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 110
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 4
    push $P5027, $P5028
    box $P5029, 32
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 8
    push $P5031, $P5032
    box $P5033, "O"
    push $P5031, $P5033
    box $P5034, 9
    push $P5031, $P5034
    push $P5001, $P5031
    new $P5035, 'ResizablePMCArray'
    box $P5036, 0
    push $P5035, $P5036
    box $P5037, 0
    push $P5035, $P5037
    box $P5038, 0
    push $P5035, $P5038
    push $P5001, $P5035
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_399_1349901750.327") :anon :lex :outer("cuid_217_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1348

    box $P5001, 1
    store_dynamic_lex "$*RETURN_USED", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<make>" :subid("cuid_218_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1349
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1199_tgt
    .local int rx1199_pos
    .local int rx1199_off
    .local int rx1199_eos
    .local int rx1199_rep
    .local pmc rx1199_cur
    .local pmc rx1199_curclass
    .local pmc rx1199_bstack
    .local pmc rx1199_cstack
    (rx1199_cur, rx1199_tgt, rx1199_pos, rx1199_curclass, rx1199_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1199_cur
    length rx1199_eos, rx1199_tgt
    eq $I19, 1, rx1199_restart3355
    gt rx1199_pos, rx1199_eos, rx1199_fail3356
    repr_get_attr_int $I11, self, rx1199_curclass, "$!from"
    ne $I11, -1, rxscan1200_done3362
    goto rxscan1200_scan3361
  rxscan1200_loop3360:
    inc rx1199_pos
    gt rx1199_pos, rx1199_eos, rx1199_fail3356
    repr_bind_attr_int rx1199_cur, rx1199_curclass, "$!from", rx1199_pos
  rxscan1200_scan3361:
    nqp_rxmark rx1199_bstack, rxscan1200_loop3360, rx1199_pos, 0
  rxscan1200_done3362:
    nqp_rxmark rx1199_bstack, rxcap1201_fail3364, rx1199_pos, 0
    add $I11, rx1199_pos, 4
    gt $I11, rx1199_eos, rx1199_fail3356
    substr $S10, rx1199_tgt, rx1199_pos, 4
    ne $S10, ucs4:"make", rx1199_fail3356
    add rx1199_pos, 4
    nqp_rxpeek $I19, rx1199_bstack, rxcap1201_fail3364
    inc $I19
    set $I11, rx1199_bstack[$I19]
    repr_bind_attr_int rx1199_cur, rx1199_curclass, "$!pos", rx1199_pos
    $P11 = rx1199_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1199_pos)
    rx1199_cstack = rx1199_cur."!cursor_capture"($P11, "sym")
    goto rxcap1201_done3363
  rxcap1201_fail3364:
    goto rx1199_fail3356
  rxcap1201_done3363:
    ge rx1199_pos, rx1199_eos, rx1199_fail3356
    is_cclass $I11, .CCLASS_WHITESPACE, rx1199_tgt, rx1199_pos
    unless $I11, rx1199_fail3356
    add rx1199_pos, 1
    repr_bind_attr_int rx1199_cur, rx1199_curclass, "$!pos", rx1199_pos
    $P11 = rx1199_cur."O"("%list_prefix")
    repr_get_attr_int $I11, $P11, rx1199_curclass, "$!pos"
    lt $I11, 0, rx1199_fail3356
    nqp_rxmark rx1199_bstack, rxsubrule1202_pass3365, -1, 0
  rxsubrule1202_pass3365:
    rx1199_cstack = rx1199_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1199_pos, $P11, rx1199_curclass, "$!pos"
    rx1199_cur."!cursor_pass"(rx1199_pos, "prefix:sym<make>", 'backtrack'=>1)
    .return (rx1199_cur)
  rx1199_restart3355:
    repr_get_attr_obj rx1199_cstack, rx1199_cur, rx1199_curclass, "$!cstack"
  rx1199_fail3356:
    unless rx1199_bstack, rx1199_done3354
    pop $I19, rx1199_bstack
    if_null rx1199_cstack, rx1199_cstack_done3359
    unless rx1199_cstack, rx1199_cstack_done3359
    dec $I19
    set $P11, rx1199_cstack[$I19]
  rx1199_cstack_done3359:
    pop rx1199_rep, rx1199_bstack
    pop rx1199_pos, rx1199_bstack
    pop $I19, rx1199_bstack
    lt rx1199_pos, -1, rx1199_done3354
    lt rx1199_pos, 0, rx1199_fail3356
    eq $I19, 0, rx1199_fail3356
    nqp_islist $I20, rx1199_cstack
    unless $I20, rx1199_jump3357
    elements $I18, rx1199_bstack
    le $I18, 0, rx1199_cut3358
    dec $I18
    set $I18, rx1199_bstack[$I18]
  rx1199_cut3358:
    assign rx1199_cstack, $I18
  rx1199_jump3357:
    jump $I19
  rx1199_done3354:
    rx1199_cur."!cursor_fail"()
    .return (rx1199_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_218_1349901750.327_caps" :subid("cuid_memo_369_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_218_1349901750.327_nfa" :subid("cuid_memo_370_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 109
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 97
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 107
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 101
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 4
    push $P5019, $P5020
    box $P5021, 32
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 8
    push $P5023, $P5024
    box $P5025, "O"
    push $P5023, $P5025
    box $P5026, 0
    push $P5023, $P5026
    push $P5001, $P5023
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<last>" :subid("cuid_219_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1350
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_400_1349901750.327' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1203_tgt
    .local int rx1203_pos
    .local int rx1203_off
    .local int rx1203_eos
    .local int rx1203_rep
    .local pmc rx1203_cur
    .local pmc rx1203_curclass
    .local pmc rx1203_bstack
    .local pmc rx1203_cstack
    (rx1203_cur, rx1203_tgt, rx1203_pos, rx1203_curclass, rx1203_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1203_cur
    length rx1203_eos, rx1203_tgt
    eq $I19, 1, rx1203_restart3368
    gt rx1203_pos, rx1203_eos, rx1203_fail3369
    repr_get_attr_int $I11, self, rx1203_curclass, "$!from"
    ne $I11, -1, rxscan1204_done3375
    goto rxscan1204_scan3374
  rxscan1204_loop3373:
    inc rx1203_pos
    gt rx1203_pos, rx1203_eos, rx1203_fail3369
    repr_bind_attr_int rx1203_cur, rx1203_curclass, "$!from", rx1203_pos
  rxscan1204_scan3374:
    nqp_rxmark rx1203_bstack, rxscan1204_loop3373, rx1203_pos, 0
  rxscan1204_done3375:
    nqp_rxmark rx1203_bstack, rxcap1205_fail3377, rx1203_pos, 0
    add $I11, rx1203_pos, 4
    gt $I11, rx1203_eos, rx1203_fail3369
    substr $S10, rx1203_tgt, rx1203_pos, 4
    ne $S10, ucs4:"last", rx1203_fail3369
    add rx1203_pos, 4
    nqp_rxpeek $I19, rx1203_bstack, rxcap1205_fail3377
    inc $I19
    set $I11, rx1203_bstack[$I19]
    repr_bind_attr_int rx1203_cur, rx1203_curclass, "$!pos", rx1203_pos
    $P11 = rx1203_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1203_pos)
    rx1203_cstack = rx1203_cur."!cursor_capture"($P11, "sym")
    goto rxcap1205_done3376
  rxcap1205_fail3377:
    goto rx1203_fail3369
  rxcap1205_done3376:
    repr_bind_attr_int rx1203_cur, rx1203_curclass, "$!pos", rx1203_pos
    store_lex unicode:"$\x{a2}", rx1203_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_400_1349901750.327' 
    capture_lex $P5002
    $P5003 = $P5002()
    rx1203_cur."!cursor_pass"(rx1203_pos, "term:sym<last>", 'backtrack'=>1)
    .return (rx1203_cur)
  rx1203_restart3368:
    repr_get_attr_obj rx1203_cstack, rx1203_cur, rx1203_curclass, "$!cstack"
  rx1203_fail3369:
    unless rx1203_bstack, rx1203_done3367
    pop $I19, rx1203_bstack
    if_null rx1203_cstack, rx1203_cstack_done3372
    unless rx1203_cstack, rx1203_cstack_done3372
    dec $I19
    set $P11, rx1203_cstack[$I19]
  rx1203_cstack_done3372:
    pop rx1203_rep, rx1203_bstack
    pop rx1203_pos, rx1203_bstack
    pop $I19, rx1203_bstack
    lt rx1203_pos, -1, rx1203_done3367
    lt rx1203_pos, 0, rx1203_fail3369
    eq $I19, 0, rx1203_fail3369
    nqp_islist $I20, rx1203_cstack
    unless $I20, rx1203_jump3370
    elements $I18, rx1203_bstack
    le $I18, 0, rx1203_cut3371
    dec $I18
    set $I18, rx1203_bstack[$I18]
  rx1203_cut3371:
    assign rx1203_cstack, $I18
  rx1203_jump3370:
    jump $I19
  rx1203_done3367:
    rx1203_cur."!cursor_fail"()
    .return (rx1203_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_219_1349901750.327_caps" :subid("cuid_memo_371_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_219_1349901750.327_nfa" :subid("cuid_memo_372_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 108
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 97
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 115
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 116
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 0
    push $P5019, $P5020
    box $P5021, 0
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_400_1349901750.327") :anon :lex :outer("cuid_219_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1350

    box $P5001, 1
    store_dynamic_lex "$*CONTROL_USED", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<next>" :subid("cuid_220_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1351
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_401_1349901750.327' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1206_tgt
    .local int rx1206_pos
    .local int rx1206_off
    .local int rx1206_eos
    .local int rx1206_rep
    .local pmc rx1206_cur
    .local pmc rx1206_curclass
    .local pmc rx1206_bstack
    .local pmc rx1206_cstack
    (rx1206_cur, rx1206_tgt, rx1206_pos, rx1206_curclass, rx1206_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1206_cur
    length rx1206_eos, rx1206_tgt
    eq $I19, 1, rx1206_restart3380
    gt rx1206_pos, rx1206_eos, rx1206_fail3381
    repr_get_attr_int $I11, self, rx1206_curclass, "$!from"
    ne $I11, -1, rxscan1207_done3387
    goto rxscan1207_scan3386
  rxscan1207_loop3385:
    inc rx1206_pos
    gt rx1206_pos, rx1206_eos, rx1206_fail3381
    repr_bind_attr_int rx1206_cur, rx1206_curclass, "$!from", rx1206_pos
  rxscan1207_scan3386:
    nqp_rxmark rx1206_bstack, rxscan1207_loop3385, rx1206_pos, 0
  rxscan1207_done3387:
    nqp_rxmark rx1206_bstack, rxcap1208_fail3389, rx1206_pos, 0
    add $I11, rx1206_pos, 4
    gt $I11, rx1206_eos, rx1206_fail3381
    substr $S10, rx1206_tgt, rx1206_pos, 4
    ne $S10, ucs4:"next", rx1206_fail3381
    add rx1206_pos, 4
    nqp_rxpeek $I19, rx1206_bstack, rxcap1208_fail3389
    inc $I19
    set $I11, rx1206_bstack[$I19]
    repr_bind_attr_int rx1206_cur, rx1206_curclass, "$!pos", rx1206_pos
    $P11 = rx1206_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1206_pos)
    rx1206_cstack = rx1206_cur."!cursor_capture"($P11, "sym")
    goto rxcap1208_done3388
  rxcap1208_fail3389:
    goto rx1206_fail3381
  rxcap1208_done3388:
    repr_bind_attr_int rx1206_cur, rx1206_curclass, "$!pos", rx1206_pos
    store_lex unicode:"$\x{a2}", rx1206_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_401_1349901750.327' 
    capture_lex $P5002
    $P5003 = $P5002()
    rx1206_cur."!cursor_pass"(rx1206_pos, "term:sym<next>", 'backtrack'=>1)
    .return (rx1206_cur)
  rx1206_restart3380:
    repr_get_attr_obj rx1206_cstack, rx1206_cur, rx1206_curclass, "$!cstack"
  rx1206_fail3381:
    unless rx1206_bstack, rx1206_done3379
    pop $I19, rx1206_bstack
    if_null rx1206_cstack, rx1206_cstack_done3384
    unless rx1206_cstack, rx1206_cstack_done3384
    dec $I19
    set $P11, rx1206_cstack[$I19]
  rx1206_cstack_done3384:
    pop rx1206_rep, rx1206_bstack
    pop rx1206_pos, rx1206_bstack
    pop $I19, rx1206_bstack
    lt rx1206_pos, -1, rx1206_done3379
    lt rx1206_pos, 0, rx1206_fail3381
    eq $I19, 0, rx1206_fail3381
    nqp_islist $I20, rx1206_cstack
    unless $I20, rx1206_jump3382
    elements $I18, rx1206_bstack
    le $I18, 0, rx1206_cut3383
    dec $I18
    set $I18, rx1206_bstack[$I18]
  rx1206_cut3383:
    assign rx1206_cstack, $I18
  rx1206_jump3382:
    jump $I19
  rx1206_done3379:
    rx1206_cur."!cursor_fail"()
    .return (rx1206_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_220_1349901750.327_caps" :subid("cuid_memo_373_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_220_1349901750.327_nfa" :subid("cuid_memo_374_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 110
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 101
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 120
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 116
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 0
    push $P5019, $P5020
    box $P5021, 0
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_401_1349901750.327") :anon :lex :outer("cuid_220_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1351

    box $P5001, 1
    store_dynamic_lex "$*CONTROL_USED", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<redo>" :subid("cuid_221_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1352
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_402_1349901750.327' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1209_tgt
    .local int rx1209_pos
    .local int rx1209_off
    .local int rx1209_eos
    .local int rx1209_rep
    .local pmc rx1209_cur
    .local pmc rx1209_curclass
    .local pmc rx1209_bstack
    .local pmc rx1209_cstack
    (rx1209_cur, rx1209_tgt, rx1209_pos, rx1209_curclass, rx1209_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1209_cur
    length rx1209_eos, rx1209_tgt
    eq $I19, 1, rx1209_restart3392
    gt rx1209_pos, rx1209_eos, rx1209_fail3393
    repr_get_attr_int $I11, self, rx1209_curclass, "$!from"
    ne $I11, -1, rxscan1210_done3399
    goto rxscan1210_scan3398
  rxscan1210_loop3397:
    inc rx1209_pos
    gt rx1209_pos, rx1209_eos, rx1209_fail3393
    repr_bind_attr_int rx1209_cur, rx1209_curclass, "$!from", rx1209_pos
  rxscan1210_scan3398:
    nqp_rxmark rx1209_bstack, rxscan1210_loop3397, rx1209_pos, 0
  rxscan1210_done3399:
    nqp_rxmark rx1209_bstack, rxcap1211_fail3401, rx1209_pos, 0
    add $I11, rx1209_pos, 4
    gt $I11, rx1209_eos, rx1209_fail3393
    substr $S10, rx1209_tgt, rx1209_pos, 4
    ne $S10, ucs4:"redo", rx1209_fail3393
    add rx1209_pos, 4
    nqp_rxpeek $I19, rx1209_bstack, rxcap1211_fail3401
    inc $I19
    set $I11, rx1209_bstack[$I19]
    repr_bind_attr_int rx1209_cur, rx1209_curclass, "$!pos", rx1209_pos
    $P11 = rx1209_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1209_pos)
    rx1209_cstack = rx1209_cur."!cursor_capture"($P11, "sym")
    goto rxcap1211_done3400
  rxcap1211_fail3401:
    goto rx1209_fail3393
  rxcap1211_done3400:
    repr_bind_attr_int rx1209_cur, rx1209_curclass, "$!pos", rx1209_pos
    store_lex unicode:"$\x{a2}", rx1209_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_402_1349901750.327' 
    capture_lex $P5002
    $P5003 = $P5002()
    rx1209_cur."!cursor_pass"(rx1209_pos, "term:sym<redo>", 'backtrack'=>1)
    .return (rx1209_cur)
  rx1209_restart3392:
    repr_get_attr_obj rx1209_cstack, rx1209_cur, rx1209_curclass, "$!cstack"
  rx1209_fail3393:
    unless rx1209_bstack, rx1209_done3391
    pop $I19, rx1209_bstack
    if_null rx1209_cstack, rx1209_cstack_done3396
    unless rx1209_cstack, rx1209_cstack_done3396
    dec $I19
    set $P11, rx1209_cstack[$I19]
  rx1209_cstack_done3396:
    pop rx1209_rep, rx1209_bstack
    pop rx1209_pos, rx1209_bstack
    pop $I19, rx1209_bstack
    lt rx1209_pos, -1, rx1209_done3391
    lt rx1209_pos, 0, rx1209_fail3393
    eq $I19, 0, rx1209_fail3393
    nqp_islist $I20, rx1209_cstack
    unless $I20, rx1209_jump3394
    elements $I18, rx1209_bstack
    le $I18, 0, rx1209_cut3395
    dec $I18
    set $I18, rx1209_bstack[$I18]
  rx1209_cut3395:
    assign rx1209_cstack, $I18
  rx1209_jump3394:
    jump $I19
  rx1209_done3391:
    rx1209_cur."!cursor_fail"()
    .return (rx1209_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_221_1349901750.327_caps" :subid("cuid_memo_375_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_221_1349901750.327_nfa" :subid("cuid_memo_376_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 114
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 101
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 100
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 111
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 0
    push $P5019, $P5020
    box $P5021, 0
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_402_1349901750.327") :anon :lex :outer("cuid_221_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1352

    box $P5001, 1
    store_dynamic_lex "$*CONTROL_USED", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "smartmatch" :subid("cuid_222_1349901750.327") :anon :lex :outer("cuid_223_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1354
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$t", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    set $P5002, _lex_param_1[0]
    unless_null $P5002, fallback3402
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5003
  fallback3402:
    set $P101, $P5002
    set $P5004, _lex_param_1[1]
    unless_null $P5004, fallback3403
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5004, $P5005
  fallback3403:
    set _lex_param_1[0], $P5004
    set _lex_param_1[1], $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_243_1349901750.327") :anon :lex :outer("cuid_1_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1360
    .const 'Sub' $P5012 = 'cuid_225_1349901750.327' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_226_1349901750.327' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_228_1349901750.327' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_229_1349901750.327' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_232_1349901750.327' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_235_1349901750.327' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_237_1349901750.327' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_239_1349901750.327' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_240_1349901750.327' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_241_1349901750.327' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_242_1349901750.327' 
    capture_lex $P5012 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    .const 'Sub' $P5001 = 'cuid_225_1349901750.327' 
    capture_lex $P5001
    .const 'Sub' $P5002 = 'cuid_226_1349901750.327' 
    capture_lex $P5002
    .const 'Sub' $P5003 = 'cuid_228_1349901750.327' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_229_1349901750.327' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_232_1349901750.327' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_235_1349901750.327' 
    capture_lex $P5006
    .const 'Sub' $P5007 = 'cuid_237_1349901750.327' 
    capture_lex $P5007
    .const 'Sub' $P5008 = 'cuid_239_1349901750.327' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_240_1349901750.327' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_241_1349901750.327' 
    capture_lex $P5010
    .const 'Sub' $P5011 = 'cuid_242_1349901750.327' 
    capture_lex $P5011
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<:my>" :subid("cuid_225_1349901750.327") :anon :lex :outer("cuid_243_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1361
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_224_1349901750.327' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1212_tgt
    .local int rx1212_pos
    .local int rx1212_off
    .local int rx1212_eos
    .local int rx1212_rep
    .local pmc rx1212_cur
    .local pmc rx1212_curclass
    .local pmc rx1212_bstack
    .local pmc rx1212_cstack
    (rx1212_cur, rx1212_tgt, rx1212_pos, rx1212_curclass, rx1212_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1212_cur
    length rx1212_eos, rx1212_tgt
    eq $I19, 1, rx1212_restart3406
    gt rx1212_pos, rx1212_eos, rx1212_fail3407
    repr_get_attr_int $I11, self, rx1212_curclass, "$!from"
    ne $I11, -1, rxscan1213_done3413
    goto rxscan1213_scan3412
  rxscan1213_loop3411:
    inc rx1212_pos
    gt rx1212_pos, rx1212_eos, rx1212_fail3407
    repr_bind_attr_int rx1212_cur, rx1212_curclass, "$!from", rx1212_pos
  rxscan1213_scan3412:
    nqp_rxmark rx1212_bstack, rxscan1213_loop3411, rx1212_pos, 0
  rxscan1213_done3413:
    add $I11, rx1212_pos, 1
    gt $I11, rx1212_eos, rx1212_fail3407
    substr $S10, rx1212_tgt, rx1212_pos, 1
    ne $S10, ucs4:":", rx1212_fail3407
    add rx1212_pos, 1
    .const 'Sub' $P5001 = 'cuid_224_1349901750.327' 
    capture_lex $P5001
    repr_bind_attr_int rx1212_cur, rx1212_curclass, "$!pos", rx1212_pos
    $P11 = rx1212_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1212_curclass, "$!pos"
    lt $I11, 0, rx1212_fail3407
    repr_bind_attr_int rx1212_cur, rx1212_curclass, "$!pos", rx1212_pos
    $P11 = rx1212_cur."LANG"("MAIN", "statement")
    repr_get_attr_int $I11, $P11, rx1212_curclass, "$!pos"
    lt $I11, 0, rx1212_fail3407
    nqp_rxmark rx1212_bstack, rxsubrule1216_pass3424, -1, 0
  rxsubrule1216_pass3424:
    rx1212_cstack = rx1212_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx1212_pos, $P11, rx1212_curclass, "$!pos"
    repr_bind_attr_int rx1212_cur, rx1212_curclass, "$!pos", rx1212_pos
    $P11 = rx1212_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1212_curclass, "$!pos"
    lt $I11, 0, rx1212_fail3407
    repr_get_attr_int rx1212_pos, $P11, rx1212_curclass, "$!pos"
    add $I11, rx1212_pos, 1
    gt $I11, rx1212_eos, rx1212_fail3407
    substr $S10, rx1212_tgt, rx1212_pos, 1
    ne $S10, ucs4:";", rx1212_fail3407
    add rx1212_pos, 1
    rx1212_cur."!cursor_pass"(rx1212_pos, "metachar:sym<:my>", 'backtrack'=>1)
    .return (rx1212_cur)
  rx1212_restart3406:
    repr_get_attr_obj rx1212_cstack, rx1212_cur, rx1212_curclass, "$!cstack"
  rx1212_fail3407:
    unless rx1212_bstack, rx1212_done3405
    pop $I19, rx1212_bstack
    if_null rx1212_cstack, rx1212_cstack_done3410
    unless rx1212_cstack, rx1212_cstack_done3410
    dec $I19
    set $P11, rx1212_cstack[$I19]
  rx1212_cstack_done3410:
    pop rx1212_rep, rx1212_bstack
    pop rx1212_pos, rx1212_bstack
    pop $I19, rx1212_bstack
    lt rx1212_pos, -1, rx1212_done3405
    lt rx1212_pos, 0, rx1212_fail3407
    eq $I19, 0, rx1212_fail3407
    nqp_islist $I20, rx1212_cstack
    unless $I20, rx1212_jump3408
    elements $I18, rx1212_bstack
    le $I18, 0, rx1212_cut3409
    dec $I18
    set $I18, rx1212_bstack[$I18]
  rx1212_cut3409:
    assign rx1212_cstack, $I18
  rx1212_jump3408:
    jump $I19
  rx1212_done3405:
    rx1212_cur."!cursor_fail"()
    .return (rx1212_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_225_1349901750.327_caps" :subid("cuid_memo_377_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["statement"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_225_1349901750.327_nfa" :subid("cuid_memo_378_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 58
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 109
    push $P5007, $P5009
    box $P5010, 4
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 0
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 121
    push $P5015, $P5017
    box $P5018, 3
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_224_1349901750.327") :anon :lex :outer("cuid_225_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1214_tgt
    .local int rx1214_pos
    .local int rx1214_off
    .local int rx1214_eos
    .local int rx1214_rep
    .local pmc rx1214_cur
    .local pmc rx1214_curclass
    .local pmc rx1214_bstack
    .local pmc rx1214_cstack
    (rx1214_cur, rx1214_tgt, rx1214_pos, rx1214_curclass, rx1214_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1214_cur
    length rx1214_eos, rx1214_tgt
    eq $I19, 1, rx1214_restart3416
    gt rx1214_pos, rx1214_eos, rx1214_fail3417
    repr_get_attr_int $I11, self, rx1214_curclass, "$!from"
    ne $I11, -1, rxscan1215_done3423
    goto rxscan1215_scan3422
  rxscan1215_loop3421:
    inc rx1214_pos
    gt rx1214_pos, rx1214_eos, rx1214_fail3417
    repr_bind_attr_int rx1214_cur, rx1214_curclass, "$!from", rx1214_pos
  rxscan1215_scan3422:
    nqp_rxmark rx1214_bstack, rxscan1215_loop3421, rx1214_pos, 0
  rxscan1215_done3423:
    add $I11, rx1214_pos, 2
    gt $I11, rx1214_eos, rx1214_fail3417
    substr $S10, rx1214_tgt, rx1214_pos, 2
    ne $S10, ucs4:"my", rx1214_fail3417
    add rx1214_pos, 2
    rx1214_cur."!cursor_pass"(rx1214_pos, 'backtrack'=>1)
    .return (rx1214_cur)
  rx1214_restart3416:
    repr_get_attr_obj rx1214_cstack, rx1214_cur, rx1214_curclass, "$!cstack"
  rx1214_fail3417:
    unless rx1214_bstack, rx1214_done3415
    pop $I19, rx1214_bstack
    if_null rx1214_cstack, rx1214_cstack_done3420
    unless rx1214_cstack, rx1214_cstack_done3420
    dec $I19
    set $P11, rx1214_cstack[$I19]
  rx1214_cstack_done3420:
    pop rx1214_rep, rx1214_bstack
    pop rx1214_pos, rx1214_bstack
    pop $I19, rx1214_bstack
    lt rx1214_pos, -1, rx1214_done3415
    lt rx1214_pos, 0, rx1214_fail3417
    eq $I19, 0, rx1214_fail3417
    nqp_islist $I20, rx1214_cstack
    unless $I20, rx1214_jump3418
    elements $I18, rx1214_bstack
    le $I18, 0, rx1214_cut3419
    dec $I18
    set $I18, rx1214_bstack[$I18]
  rx1214_cut3419:
    assign rx1214_cstack, $I18
  rx1214_jump3418:
    jump $I19
  rx1214_done3415:
    rx1214_cur."!cursor_fail"()
    .return (rx1214_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_224_1349901750.327_caps" :subid("cuid_memo_379_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_224_1349901750.327_nfa" :subid("cuid_memo_380_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 109
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 121
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<{ }>" :subid("cuid_226_1349901750.327") :anon :lex :outer("cuid_243_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1365
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1218_tgt
    .local int rx1218_pos
    .local int rx1218_off
    .local int rx1218_eos
    .local int rx1218_rep
    .local pmc rx1218_cur
    .local pmc rx1218_curclass
    .local pmc rx1218_bstack
    .local pmc rx1218_cstack
    (rx1218_cur, rx1218_tgt, rx1218_pos, rx1218_curclass, rx1218_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1218_cur
    length rx1218_eos, rx1218_tgt
    eq $I19, 1, rx1218_restart3428
    gt rx1218_pos, rx1218_eos, rx1218_fail3429
    repr_get_attr_int $I11, self, rx1218_curclass, "$!from"
    ne $I11, -1, rxscan1219_done3435
    goto rxscan1219_scan3434
  rxscan1219_loop3433:
    inc rx1218_pos
    gt rx1218_pos, rx1218_eos, rx1218_fail3429
    repr_bind_attr_int rx1218_cur, rx1218_curclass, "$!from", rx1218_pos
  rxscan1219_scan3434:
    nqp_rxmark rx1218_bstack, rxscan1219_loop3433, rx1218_pos, 0
  rxscan1219_done3435:
    ge rx1218_pos, rx1218_eos, rx1218_fail3429
    substr $S11, rx1218_tgt, rx1218_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx1218_fail3429
    repr_bind_attr_int rx1218_cur, rx1218_curclass, "$!pos", rx1218_pos
    $P11 = rx1218_cur."codeblock"()
    repr_get_attr_int $I11, $P11, rx1218_curclass, "$!pos"
    lt $I11, 0, rx1218_fail3429
    nqp_rxmark rx1218_bstack, rxsubrule1220_pass3436, -1, 0
  rxsubrule1220_pass3436:
    rx1218_cstack = rx1218_cur."!cursor_capture"($P11, "codeblock")
    repr_get_attr_int rx1218_pos, $P11, rx1218_curclass, "$!pos"
    rx1218_cur."!cursor_pass"(rx1218_pos, "metachar:sym<{ }>", 'backtrack'=>1)
    .return (rx1218_cur)
  rx1218_restart3428:
    repr_get_attr_obj rx1218_cstack, rx1218_cur, rx1218_curclass, "$!cstack"
  rx1218_fail3429:
    unless rx1218_bstack, rx1218_done3427
    pop $I19, rx1218_bstack
    if_null rx1218_cstack, rx1218_cstack_done3432
    unless rx1218_cstack, rx1218_cstack_done3432
    dec $I19
    set $P11, rx1218_cstack[$I19]
  rx1218_cstack_done3432:
    pop rx1218_rep, rx1218_bstack
    pop rx1218_pos, rx1218_bstack
    pop $I19, rx1218_bstack
    lt rx1218_pos, -1, rx1218_done3427
    lt rx1218_pos, 0, rx1218_fail3429
    eq $I19, 0, rx1218_fail3429
    nqp_islist $I20, rx1218_cstack
    unless $I20, rx1218_jump3430
    elements $I18, rx1218_bstack
    le $I18, 0, rx1218_cut3431
    dec $I18
    set $I18, rx1218_bstack[$I18]
  rx1218_cut3431:
    assign rx1218_cstack, $I18
  rx1218_jump3430:
    jump $I19
  rx1218_done3427:
    rx1218_cur."!cursor_fail"()
    .return (rx1218_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_226_1349901750.327_caps" :subid("cuid_memo_381_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["codeblock"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_226_1349901750.327_nfa" :subid("cuid_memo_382_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "{"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<nqpvar>" :subid("cuid_228_1349901750.327") :anon :lex :outer("cuid_243_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1369
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_227_1349901750.327' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1221_tgt
    .local int rx1221_pos
    .local int rx1221_off
    .local int rx1221_eos
    .local int rx1221_rep
    .local pmc rx1221_cur
    .local pmc rx1221_curclass
    .local pmc rx1221_bstack
    .local pmc rx1221_cstack
    (rx1221_cur, rx1221_tgt, rx1221_pos, rx1221_curclass, rx1221_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1221_cur
    length rx1221_eos, rx1221_tgt
    eq $I19, 1, rx1221_restart3439
    gt rx1221_pos, rx1221_eos, rx1221_fail3440
    repr_get_attr_int $I11, self, rx1221_curclass, "$!from"
    ne $I11, -1, rxscan1222_done3446
    goto rxscan1222_scan3445
  rxscan1222_loop3444:
    inc rx1221_pos
    gt rx1221_pos, rx1221_eos, rx1221_fail3440
    repr_bind_attr_int rx1221_cur, rx1221_curclass, "$!from", rx1221_pos
  rxscan1222_scan3445:
    nqp_rxmark rx1221_bstack, rxscan1222_loop3444, rx1221_pos, 0
  rxscan1222_done3446:
    .const 'Sub' $P5001 = 'cuid_227_1349901750.327' 
    capture_lex $P5001
    repr_bind_attr_int rx1221_cur, rx1221_curclass, "$!pos", rx1221_pos
    $P11 = rx1221_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1221_curclass, "$!pos"
    lt $I11, 0, rx1221_fail3440
    repr_bind_attr_int rx1221_cur, rx1221_curclass, "$!pos", rx1221_pos
    $P11 = rx1221_cur."LANG"("MAIN", "variable")
    repr_get_attr_int $I11, $P11, rx1221_curclass, "$!pos"
    lt $I11, 0, rx1221_fail3440
    nqp_rxmark rx1221_bstack, rxsubrule1226_pass3460, -1, 0
  rxsubrule1226_pass3460:
    rx1221_cstack = rx1221_cur."!cursor_capture"($P11, "var")
    repr_get_attr_int rx1221_pos, $P11, rx1221_curclass, "$!pos"
    rx1221_cur."!cursor_pass"(rx1221_pos, "metachar:sym<nqpvar>", 'backtrack'=>1)
    .return (rx1221_cur)
  rx1221_restart3439:
    repr_get_attr_obj rx1221_cstack, rx1221_cur, rx1221_curclass, "$!cstack"
  rx1221_fail3440:
    unless rx1221_bstack, rx1221_done3438
    pop $I19, rx1221_bstack
    if_null rx1221_cstack, rx1221_cstack_done3443
    unless rx1221_cstack, rx1221_cstack_done3443
    dec $I19
    set $P11, rx1221_cstack[$I19]
  rx1221_cstack_done3443:
    pop rx1221_rep, rx1221_bstack
    pop rx1221_pos, rx1221_bstack
    pop $I19, rx1221_bstack
    lt rx1221_pos, -1, rx1221_done3438
    lt rx1221_pos, 0, rx1221_fail3440
    eq $I19, 0, rx1221_fail3440
    nqp_islist $I20, rx1221_cstack
    unless $I20, rx1221_jump3441
    elements $I18, rx1221_bstack
    le $I18, 0, rx1221_cut3442
    dec $I18
    set $I18, rx1221_bstack[$I18]
  rx1221_cut3442:
    assign rx1221_cstack, $I18
  rx1221_jump3441:
    jump $I19
  rx1221_done3438:
    rx1221_cur."!cursor_fail"()
    .return (rx1221_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_228_1349901750.327_caps" :subid("cuid_memo_383_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["var"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_228_1349901750.327_nfa" :subid("cuid_memo_384_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "$@&"
    push $P5003, $P5005
    box $P5006, 3
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 5
    push $P5011, $P5012
    box $P5013, 8192
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    box $P5015, 4
    push $P5011, $P5015
    box $P5016, 8192
    push $P5011, $P5016
    box $P5017, 2
    push $P5011, $P5017
    push $P5001, $P5011
    new $P5018, 'ResizablePMCArray'
    box $P5019, 4
    push $P5018, $P5019
    box $P5020, 8192
    push $P5018, $P5020
    box $P5021, 2
    push $P5018, $P5021
    push $P5001, $P5018
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_227_1349901750.327") :anon :lex :outer("cuid_228_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1223_tgt
    .local int rx1223_pos
    .local int rx1223_off
    .local int rx1223_eos
    .local int rx1223_rep
    .local pmc rx1223_cur
    .local pmc rx1223_curclass
    .local pmc rx1223_bstack
    .local pmc rx1223_cstack
    (rx1223_cur, rx1223_tgt, rx1223_pos, rx1223_curclass, rx1223_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1223_cur
    length rx1223_eos, rx1223_tgt
    eq $I19, 1, rx1223_restart3449
    gt rx1223_pos, rx1223_eos, rx1223_fail3450
    repr_get_attr_int $I11, self, rx1223_curclass, "$!from"
    ne $I11, -1, rxscan1224_done3456
    goto rxscan1224_scan3455
  rxscan1224_loop3454:
    inc rx1223_pos
    gt rx1223_pos, rx1223_eos, rx1223_fail3450
    repr_bind_attr_int rx1223_cur, rx1223_curclass, "$!from", rx1223_pos
  rxscan1224_scan3455:
    nqp_rxmark rx1223_bstack, rxscan1224_loop3454, rx1223_pos, 0
  rxscan1224_done3456:
    ge rx1223_pos, rx1223_eos, rx1223_fail3450
    substr $S11, rx1223_tgt, rx1223_pos, 1
    index $I11, ucs4:"$@&", $S11
    lt $I11, 0, rx1223_fail3450
    inc rx1223_pos
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1225_03458
    nqp_push_label $P11, alt1225_13459
    nqp_rxmark rx1223_bstack, alt1225_end3457, -1, 0
    rx1223_cur."!alt"(rx1223_pos, "alt_nfa__39_1349901753.665", $P11)
    goto rx1223_fail3450
  alt1225_03458:
    ge rx1223_pos, rx1223_eos, rx1223_fail3450
    is_cclass $I11, .CCLASS_WORD, rx1223_tgt, rx1223_pos
    if $I11, rx1223_fail3450
    add rx1223_pos, 1
    ge rx1223_pos, rx1223_eos, rx1223_fail3450
    is_cclass $I11, .CCLASS_WORD, rx1223_tgt, rx1223_pos
    unless $I11, rx1223_fail3450
    add rx1223_pos, 1
    goto alt1225_end3457
  alt1225_13459:
    ge rx1223_pos, rx1223_eos, rx1223_fail3450
    is_cclass $I11, .CCLASS_WORD, rx1223_tgt, rx1223_pos
    unless $I11, rx1223_fail3450
    add rx1223_pos, 1
    goto alt1225_end3457
  alt1225_end3457:
    nqp_rxcommit rx1223_bstack, alt1225_end3457
    rx1223_cur."!cursor_pass"(rx1223_pos, 'backtrack'=>1)
    .return (rx1223_cur)
  rx1223_restart3449:
    repr_get_attr_obj rx1223_cstack, rx1223_cur, rx1223_curclass, "$!cstack"
  rx1223_fail3450:
    unless rx1223_bstack, rx1223_done3448
    pop $I19, rx1223_bstack
    if_null rx1223_cstack, rx1223_cstack_done3453
    unless rx1223_cstack, rx1223_cstack_done3453
    dec $I19
    set $P11, rx1223_cstack[$I19]
  rx1223_cstack_done3453:
    pop rx1223_rep, rx1223_bstack
    pop rx1223_pos, rx1223_bstack
    pop $I19, rx1223_bstack
    lt rx1223_pos, -1, rx1223_done3448
    lt rx1223_pos, 0, rx1223_fail3450
    eq $I19, 0, rx1223_fail3450
    nqp_islist $I20, rx1223_cstack
    unless $I20, rx1223_jump3451
    elements $I18, rx1223_bstack
    le $I18, 0, rx1223_cut3452
    dec $I18
    set $I18, rx1223_bstack[$I18]
  rx1223_cut3452:
    assign rx1223_cstack, $I18
  rx1223_jump3451:
    jump $I19
  rx1223_done3448:
    rx1223_cur."!cursor_fail"()
    .return (rx1223_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_227_1349901750.327_caps" :subid("cuid_memo_385_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_227_1349901750.327_nfa" :subid("cuid_memo_386_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "$@&"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 5
    push $P5007, $P5008
    box $P5009, 8192
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    box $P5011, 4
    push $P5007, $P5011
    box $P5012, 8192
    push $P5007, $P5012
    box $P5013, 0
    push $P5007, $P5013
    push $P5001, $P5007
    new $P5014, 'ResizablePMCArray'
    box $P5015, 4
    push $P5014, $P5015
    box $P5016, 8192
    push $P5014, $P5016
    box $P5017, 0
    push $P5014, $P5017
    push $P5001, $P5014
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_227_1349901750.327_alt_nfa__39_1349901753.665" :subid("cuid_memo_387_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 5
    push $P5004, $P5005
    box $P5006, 8192
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 4
    push $P5008, $P5009
    box $P5010, 8192
    push $P5008, $P5010
    box $P5011, 0
    push $P5008, $P5011
    push $P5002, $P5008
    push $P5001, $P5002
    new $P5012, 'ResizablePMCArray'
    new $P5013, 'ResizablePMCArray'
    push $P5012, $P5013
    new $P5014, 'ResizablePMCArray'
    box $P5015, 4
    push $P5014, $P5015
    box $P5016, 8192
    push $P5014, $P5016
    box $P5017, 0
    push $P5014, $P5017
    push $P5012, $P5014
    push $P5001, $P5012
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<{ }>" :subid("cuid_229_1349901750.327") :anon :lex :outer("cuid_243_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1373
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1227_tgt
    .local int rx1227_pos
    .local int rx1227_off
    .local int rx1227_eos
    .local int rx1227_rep
    .local pmc rx1227_cur
    .local pmc rx1227_curclass
    .local pmc rx1227_bstack
    .local pmc rx1227_cstack
    (rx1227_cur, rx1227_tgt, rx1227_pos, rx1227_curclass, rx1227_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1227_cur
    length rx1227_eos, rx1227_tgt
    eq $I19, 1, rx1227_restart3463
    gt rx1227_pos, rx1227_eos, rx1227_fail3464
    repr_get_attr_int $I11, self, rx1227_curclass, "$!from"
    ne $I11, -1, rxscan1228_done3470
    goto rxscan1228_scan3469
  rxscan1228_loop3468:
    inc rx1227_pos
    gt rx1227_pos, rx1227_eos, rx1227_fail3464
    repr_bind_attr_int rx1227_cur, rx1227_curclass, "$!from", rx1227_pos
  rxscan1228_scan3469:
    nqp_rxmark rx1227_bstack, rxscan1228_loop3468, rx1227_pos, 0
  rxscan1228_done3470:
    ge rx1227_pos, rx1227_eos, rx1227_fail3464
    substr $S11, rx1227_tgt, rx1227_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx1227_fail3464
    repr_bind_attr_int rx1227_cur, rx1227_curclass, "$!pos", rx1227_pos
    $P11 = rx1227_cur."codeblock"()
    repr_get_attr_int $I11, $P11, rx1227_curclass, "$!pos"
    lt $I11, 0, rx1227_fail3464
    nqp_rxmark rx1227_bstack, rxsubrule1229_pass3471, -1, 0
  rxsubrule1229_pass3471:
    rx1227_cstack = rx1227_cur."!cursor_capture"($P11, "codeblock")
    repr_get_attr_int rx1227_pos, $P11, rx1227_curclass, "$!pos"
    rx1227_cur."!cursor_pass"(rx1227_pos, "assertion:sym<{ }>", 'backtrack'=>1)
    .return (rx1227_cur)
  rx1227_restart3463:
    repr_get_attr_obj rx1227_cstack, rx1227_cur, rx1227_curclass, "$!cstack"
  rx1227_fail3464:
    unless rx1227_bstack, rx1227_done3462
    pop $I19, rx1227_bstack
    if_null rx1227_cstack, rx1227_cstack_done3467
    unless rx1227_cstack, rx1227_cstack_done3467
    dec $I19
    set $P11, rx1227_cstack[$I19]
  rx1227_cstack_done3467:
    pop rx1227_rep, rx1227_bstack
    pop rx1227_pos, rx1227_bstack
    pop $I19, rx1227_bstack
    lt rx1227_pos, -1, rx1227_done3462
    lt rx1227_pos, 0, rx1227_fail3464
    eq $I19, 0, rx1227_fail3464
    nqp_islist $I20, rx1227_cstack
    unless $I20, rx1227_jump3465
    elements $I18, rx1227_bstack
    le $I18, 0, rx1227_cut3466
    dec $I18
    set $I18, rx1227_bstack[$I18]
  rx1227_cut3466:
    assign rx1227_cstack, $I18
  rx1227_jump3465:
    jump $I19
  rx1227_done3462:
    rx1227_cur."!cursor_fail"()
    .return (rx1227_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_229_1349901750.327_caps" :subid("cuid_memo_388_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["codeblock"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_229_1349901750.327_nfa" :subid("cuid_memo_389_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "{"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?>" :subid("cuid_232_1349901750.327") :anon :lex :outer("cuid_243_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1377
    .param pmc _lex_param_0 
    .const 'Sub' $P5003 = 'cuid_230_1349901750.327' 
    capture_lex $P5003 
    .const 'Sub' $P5003 = 'cuid_231_1349901750.327' 
    capture_lex $P5003 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1230_tgt
    .local int rx1230_pos
    .local int rx1230_off
    .local int rx1230_eos
    .local int rx1230_rep
    .local pmc rx1230_cur
    .local pmc rx1230_curclass
    .local pmc rx1230_bstack
    .local pmc rx1230_cstack
    (rx1230_cur, rx1230_tgt, rx1230_pos, rx1230_curclass, rx1230_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1230_cur
    length rx1230_eos, rx1230_tgt
    eq $I19, 1, rx1230_restart3474
    gt rx1230_pos, rx1230_eos, rx1230_fail3475
    repr_get_attr_int $I11, self, rx1230_curclass, "$!from"
    ne $I11, -1, rxscan1231_done3481
    goto rxscan1231_scan3480
  rxscan1231_loop3479:
    inc rx1230_pos
    gt rx1230_pos, rx1230_eos, rx1230_fail3475
    repr_bind_attr_int rx1230_cur, rx1230_curclass, "$!from", rx1230_pos
  rxscan1231_scan3480:
    nqp_rxmark rx1230_bstack, rxscan1231_loop3479, rx1230_pos, 0
  rxscan1231_done3481:
    add $I11, rx1230_pos, 1
    gt $I11, rx1230_eos, rx1230_fail3475
    substr $S10, rx1230_tgt, rx1230_pos, 1
    ne $S10, ucs4:"?", rx1230_fail3475
    add rx1230_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1232_03483
    nqp_push_label $P11, alt1232_13494
    nqp_rxmark rx1230_bstack, alt1232_end3482, -1, 0
    rx1230_cur."!alt"(rx1230_pos, "alt_nfa__40_1349901753.688", $P11)
    goto rx1230_fail3475
  alt1232_03483:
    .const 'Sub' $P5001 = 'cuid_230_1349901750.327' 
    capture_lex $P5001
    repr_bind_attr_int rx1230_cur, rx1230_curclass, "$!pos", rx1230_pos
    $P11 = rx1230_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1230_curclass, "$!pos"
    lt $I11, 0, rx1230_fail3475
    goto alt1232_end3482
  alt1232_13494:
    .const 'Sub' $P5002 = 'cuid_231_1349901750.327' 
    capture_lex $P5002
    repr_bind_attr_int rx1230_cur, rx1230_curclass, "$!pos", rx1230_pos
    $P11 = rx1230_cur."before"($P5002)
    repr_get_attr_int $I11, $P11, rx1230_curclass, "$!pos"
    ge $I11, 0, rx1230_fail3475
    repr_bind_attr_int rx1230_cur, rx1230_curclass, "$!pos", rx1230_pos
    $P11 = rx1230_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx1230_curclass, "$!pos"
    lt $I11, 0, rx1230_fail3475
    nqp_rxmark rx1230_bstack, rxsubrule1237_pass3505, -1, 0
  rxsubrule1237_pass3505:
    rx1230_cstack = rx1230_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx1230_pos, $P11, rx1230_curclass, "$!pos"
    goto alt1232_end3482
  alt1232_end3482:
    nqp_rxcommit rx1230_bstack, alt1232_end3482
    rx1230_cur."!cursor_pass"(rx1230_pos, "assertion:sym<?>", 'backtrack'=>1)
    .return (rx1230_cur)
  rx1230_restart3474:
    repr_get_attr_obj rx1230_cstack, rx1230_cur, rx1230_curclass, "$!cstack"
  rx1230_fail3475:
    unless rx1230_bstack, rx1230_done3473
    pop $I19, rx1230_bstack
    if_null rx1230_cstack, rx1230_cstack_done3478
    unless rx1230_cstack, rx1230_cstack_done3478
    dec $I19
    set $P11, rx1230_cstack[$I19]
  rx1230_cstack_done3478:
    pop rx1230_rep, rx1230_bstack
    pop rx1230_pos, rx1230_bstack
    pop $I19, rx1230_bstack
    lt rx1230_pos, -1, rx1230_done3473
    lt rx1230_pos, 0, rx1230_fail3475
    eq $I19, 0, rx1230_fail3475
    nqp_islist $I20, rx1230_cstack
    unless $I20, rx1230_jump3476
    elements $I18, rx1230_bstack
    le $I18, 0, rx1230_cut3477
    dec $I18
    set $I18, rx1230_bstack[$I18]
  rx1230_cut3477:
    assign rx1230_cstack, $I18
  rx1230_jump3476:
    jump $I19
  rx1230_done3473:
    rx1230_cur."!cursor_fail"()
    .return (rx1230_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_232_1349901750.327_caps" :subid("cuid_memo_390_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["assertion"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_232_1349901750.327_nfa" :subid("cuid_memo_391_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 63
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 62
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    box $P5011, 0
    push $P5007, $P5011
    box $P5012, 0
    push $P5007, $P5012
    box $P5013, 0
    push $P5007, $P5013
    push $P5001, $P5007
    new $P5014, 'ResizablePMCArray'
    box $P5015, 0
    push $P5014, $P5015
    box $P5016, 0
    push $P5014, $P5016
    box $P5017, 0
    push $P5014, $P5017
    push $P5001, $P5014
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_232_1349901750.327_alt_nfa__40_1349901753.688" :subid("cuid_memo_392_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 62
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 0
    push $P5008, $P5009
    box $P5010, 0
    push $P5008, $P5010
    box $P5011, 0
    push $P5008, $P5011
    push $P5002, $P5008
    push $P5001, $P5002
    new $P5012, 'ResizablePMCArray'
    new $P5013, 'ResizablePMCArray'
    push $P5012, $P5013
    new $P5014, 'ResizablePMCArray'
    box $P5015, 0
    push $P5014, $P5015
    box $P5016, 0
    push $P5014, $P5016
    box $P5017, 0
    push $P5014, $P5017
    box $P5018, 0
    push $P5014, $P5018
    box $P5019, 0
    push $P5014, $P5019
    box $P5020, 0
    push $P5014, $P5020
    push $P5012, $P5014
    push $P5001, $P5012
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_230_1349901750.327") :anon :lex :outer("cuid_232_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1233_tgt
    .local int rx1233_pos
    .local int rx1233_off
    .local int rx1233_eos
    .local int rx1233_rep
    .local pmc rx1233_cur
    .local pmc rx1233_curclass
    .local pmc rx1233_bstack
    .local pmc rx1233_cstack
    (rx1233_cur, rx1233_tgt, rx1233_pos, rx1233_curclass, rx1233_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1233_cur
    length rx1233_eos, rx1233_tgt
    eq $I19, 1, rx1233_restart3486
    gt rx1233_pos, rx1233_eos, rx1233_fail3487
    repr_get_attr_int $I11, self, rx1233_curclass, "$!from"
    ne $I11, -1, rxscan1234_done3493
    goto rxscan1234_scan3492
  rxscan1234_loop3491:
    inc rx1233_pos
    gt rx1233_pos, rx1233_eos, rx1233_fail3487
    repr_bind_attr_int rx1233_cur, rx1233_curclass, "$!from", rx1233_pos
  rxscan1234_scan3492:
    nqp_rxmark rx1233_bstack, rxscan1234_loop3491, rx1233_pos, 0
  rxscan1234_done3493:
    add $I11, rx1233_pos, 1
    gt $I11, rx1233_eos, rx1233_fail3487
    substr $S10, rx1233_tgt, rx1233_pos, 1
    ne $S10, ucs4:">", rx1233_fail3487
    add rx1233_pos, 1
    rx1233_cur."!cursor_pass"(rx1233_pos, 'backtrack'=>1)
    .return (rx1233_cur)
  rx1233_restart3486:
    repr_get_attr_obj rx1233_cstack, rx1233_cur, rx1233_curclass, "$!cstack"
  rx1233_fail3487:
    unless rx1233_bstack, rx1233_done3485
    pop $I19, rx1233_bstack
    if_null rx1233_cstack, rx1233_cstack_done3490
    unless rx1233_cstack, rx1233_cstack_done3490
    dec $I19
    set $P11, rx1233_cstack[$I19]
  rx1233_cstack_done3490:
    pop rx1233_rep, rx1233_bstack
    pop rx1233_pos, rx1233_bstack
    pop $I19, rx1233_bstack
    lt rx1233_pos, -1, rx1233_done3485
    lt rx1233_pos, 0, rx1233_fail3487
    eq $I19, 0, rx1233_fail3487
    nqp_islist $I20, rx1233_cstack
    unless $I20, rx1233_jump3488
    elements $I18, rx1233_bstack
    le $I18, 0, rx1233_cut3489
    dec $I18
    set $I18, rx1233_bstack[$I18]
  rx1233_cut3489:
    assign rx1233_cstack, $I18
  rx1233_jump3488:
    jump $I19
  rx1233_done3485:
    rx1233_cur."!cursor_fail"()
    .return (rx1233_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_230_1349901750.327_caps" :subid("cuid_memo_393_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_230_1349901750.327_nfa" :subid("cuid_memo_394_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 62
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_231_1349901750.327") :anon :lex :outer("cuid_232_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1235_tgt
    .local int rx1235_pos
    .local int rx1235_off
    .local int rx1235_eos
    .local int rx1235_rep
    .local pmc rx1235_cur
    .local pmc rx1235_curclass
    .local pmc rx1235_bstack
    .local pmc rx1235_cstack
    (rx1235_cur, rx1235_tgt, rx1235_pos, rx1235_curclass, rx1235_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1235_cur
    length rx1235_eos, rx1235_tgt
    eq $I19, 1, rx1235_restart3497
    gt rx1235_pos, rx1235_eos, rx1235_fail3498
    repr_get_attr_int $I11, self, rx1235_curclass, "$!from"
    ne $I11, -1, rxscan1236_done3504
    goto rxscan1236_scan3503
  rxscan1236_loop3502:
    inc rx1235_pos
    gt rx1235_pos, rx1235_eos, rx1235_fail3498
    repr_bind_attr_int rx1235_cur, rx1235_curclass, "$!from", rx1235_pos
  rxscan1236_scan3503:
    nqp_rxmark rx1235_bstack, rxscan1236_loop3502, rx1235_pos, 0
  rxscan1236_done3504:
    add $I11, rx1235_pos, 1
    gt $I11, rx1235_eos, rx1235_fail3498
    substr $S10, rx1235_tgt, rx1235_pos, 1
    ne $S10, ucs4:"{", rx1235_fail3498
    add rx1235_pos, 1
    rx1235_cur."!cursor_pass"(rx1235_pos, 'backtrack'=>1)
    .return (rx1235_cur)
  rx1235_restart3497:
    repr_get_attr_obj rx1235_cstack, rx1235_cur, rx1235_curclass, "$!cstack"
  rx1235_fail3498:
    unless rx1235_bstack, rx1235_done3496
    pop $I19, rx1235_bstack
    if_null rx1235_cstack, rx1235_cstack_done3501
    unless rx1235_cstack, rx1235_cstack_done3501
    dec $I19
    set $P11, rx1235_cstack[$I19]
  rx1235_cstack_done3501:
    pop rx1235_rep, rx1235_bstack
    pop rx1235_pos, rx1235_bstack
    pop $I19, rx1235_bstack
    lt rx1235_pos, -1, rx1235_done3496
    lt rx1235_pos, 0, rx1235_fail3498
    eq $I19, 0, rx1235_fail3498
    nqp_islist $I20, rx1235_cstack
    unless $I20, rx1235_jump3499
    elements $I18, rx1235_bstack
    le $I18, 0, rx1235_cut3500
    dec $I18
    set $I18, rx1235_bstack[$I18]
  rx1235_cut3500:
    assign rx1235_cstack, $I18
  rx1235_jump3499:
    jump $I19
  rx1235_done3496:
    rx1235_cur."!cursor_fail"()
    .return (rx1235_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_231_1349901750.327_caps" :subid("cuid_memo_395_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_231_1349901750.327_nfa" :subid("cuid_memo_396_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 123
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<!>" :subid("cuid_235_1349901750.327") :anon :lex :outer("cuid_243_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1378
    .param pmc _lex_param_0 
    .const 'Sub' $P5003 = 'cuid_233_1349901750.327' 
    capture_lex $P5003 
    .const 'Sub' $P5003 = 'cuid_234_1349901750.327' 
    capture_lex $P5003 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1238_tgt
    .local int rx1238_pos
    .local int rx1238_off
    .local int rx1238_eos
    .local int rx1238_rep
    .local pmc rx1238_cur
    .local pmc rx1238_curclass
    .local pmc rx1238_bstack
    .local pmc rx1238_cstack
    (rx1238_cur, rx1238_tgt, rx1238_pos, rx1238_curclass, rx1238_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1238_cur
    length rx1238_eos, rx1238_tgt
    eq $I19, 1, rx1238_restart3508
    gt rx1238_pos, rx1238_eos, rx1238_fail3509
    repr_get_attr_int $I11, self, rx1238_curclass, "$!from"
    ne $I11, -1, rxscan1239_done3515
    goto rxscan1239_scan3514
  rxscan1239_loop3513:
    inc rx1238_pos
    gt rx1238_pos, rx1238_eos, rx1238_fail3509
    repr_bind_attr_int rx1238_cur, rx1238_curclass, "$!from", rx1238_pos
  rxscan1239_scan3514:
    nqp_rxmark rx1238_bstack, rxscan1239_loop3513, rx1238_pos, 0
  rxscan1239_done3515:
    add $I11, rx1238_pos, 1
    gt $I11, rx1238_eos, rx1238_fail3509
    substr $S10, rx1238_tgt, rx1238_pos, 1
    ne $S10, ucs4:"!", rx1238_fail3509
    add rx1238_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1240_03517
    nqp_push_label $P11, alt1240_13528
    nqp_rxmark rx1238_bstack, alt1240_end3516, -1, 0
    rx1238_cur."!alt"(rx1238_pos, "alt_nfa__41_1349901753.701", $P11)
    goto rx1238_fail3509
  alt1240_03517:
    .const 'Sub' $P5001 = 'cuid_233_1349901750.327' 
    capture_lex $P5001
    repr_bind_attr_int rx1238_cur, rx1238_curclass, "$!pos", rx1238_pos
    $P11 = rx1238_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1238_curclass, "$!pos"
    lt $I11, 0, rx1238_fail3509
    goto alt1240_end3516
  alt1240_13528:
    .const 'Sub' $P5002 = 'cuid_234_1349901750.327' 
    capture_lex $P5002
    repr_bind_attr_int rx1238_cur, rx1238_curclass, "$!pos", rx1238_pos
    $P11 = rx1238_cur."before"($P5002)
    repr_get_attr_int $I11, $P11, rx1238_curclass, "$!pos"
    ge $I11, 0, rx1238_fail3509
    repr_bind_attr_int rx1238_cur, rx1238_curclass, "$!pos", rx1238_pos
    $P11 = rx1238_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx1238_curclass, "$!pos"
    lt $I11, 0, rx1238_fail3509
    nqp_rxmark rx1238_bstack, rxsubrule1245_pass3539, -1, 0
  rxsubrule1245_pass3539:
    rx1238_cstack = rx1238_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx1238_pos, $P11, rx1238_curclass, "$!pos"
    goto alt1240_end3516
  alt1240_end3516:
    nqp_rxcommit rx1238_bstack, alt1240_end3516
    rx1238_cur."!cursor_pass"(rx1238_pos, "assertion:sym<!>", 'backtrack'=>1)
    .return (rx1238_cur)
  rx1238_restart3508:
    repr_get_attr_obj rx1238_cstack, rx1238_cur, rx1238_curclass, "$!cstack"
  rx1238_fail3509:
    unless rx1238_bstack, rx1238_done3507
    pop $I19, rx1238_bstack
    if_null rx1238_cstack, rx1238_cstack_done3512
    unless rx1238_cstack, rx1238_cstack_done3512
    dec $I19
    set $P11, rx1238_cstack[$I19]
  rx1238_cstack_done3512:
    pop rx1238_rep, rx1238_bstack
    pop rx1238_pos, rx1238_bstack
    pop $I19, rx1238_bstack
    lt rx1238_pos, -1, rx1238_done3507
    lt rx1238_pos, 0, rx1238_fail3509
    eq $I19, 0, rx1238_fail3509
    nqp_islist $I20, rx1238_cstack
    unless $I20, rx1238_jump3510
    elements $I18, rx1238_bstack
    le $I18, 0, rx1238_cut3511
    dec $I18
    set $I18, rx1238_bstack[$I18]
  rx1238_cut3511:
    assign rx1238_cstack, $I18
  rx1238_jump3510:
    jump $I19
  rx1238_done3507:
    rx1238_cur."!cursor_fail"()
    .return (rx1238_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_235_1349901750.327_caps" :subid("cuid_memo_397_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["assertion"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_235_1349901750.327_nfa" :subid("cuid_memo_398_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 33
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 62
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    box $P5011, 0
    push $P5007, $P5011
    box $P5012, 0
    push $P5007, $P5012
    box $P5013, 0
    push $P5007, $P5013
    push $P5001, $P5007
    new $P5014, 'ResizablePMCArray'
    box $P5015, 0
    push $P5014, $P5015
    box $P5016, 0
    push $P5014, $P5016
    box $P5017, 0
    push $P5014, $P5017
    push $P5001, $P5014
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_235_1349901750.327_alt_nfa__41_1349901753.701" :subid("cuid_memo_399_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 62
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 0
    push $P5008, $P5009
    box $P5010, 0
    push $P5008, $P5010
    box $P5011, 0
    push $P5008, $P5011
    push $P5002, $P5008
    push $P5001, $P5002
    new $P5012, 'ResizablePMCArray'
    new $P5013, 'ResizablePMCArray'
    push $P5012, $P5013
    new $P5014, 'ResizablePMCArray'
    box $P5015, 0
    push $P5014, $P5015
    box $P5016, 0
    push $P5014, $P5016
    box $P5017, 0
    push $P5014, $P5017
    box $P5018, 0
    push $P5014, $P5018
    box $P5019, 0
    push $P5014, $P5019
    box $P5020, 0
    push $P5014, $P5020
    push $P5012, $P5014
    push $P5001, $P5012
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_233_1349901750.327") :anon :lex :outer("cuid_235_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1241_tgt
    .local int rx1241_pos
    .local int rx1241_off
    .local int rx1241_eos
    .local int rx1241_rep
    .local pmc rx1241_cur
    .local pmc rx1241_curclass
    .local pmc rx1241_bstack
    .local pmc rx1241_cstack
    (rx1241_cur, rx1241_tgt, rx1241_pos, rx1241_curclass, rx1241_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1241_cur
    length rx1241_eos, rx1241_tgt
    eq $I19, 1, rx1241_restart3520
    gt rx1241_pos, rx1241_eos, rx1241_fail3521
    repr_get_attr_int $I11, self, rx1241_curclass, "$!from"
    ne $I11, -1, rxscan1242_done3527
    goto rxscan1242_scan3526
  rxscan1242_loop3525:
    inc rx1241_pos
    gt rx1241_pos, rx1241_eos, rx1241_fail3521
    repr_bind_attr_int rx1241_cur, rx1241_curclass, "$!from", rx1241_pos
  rxscan1242_scan3526:
    nqp_rxmark rx1241_bstack, rxscan1242_loop3525, rx1241_pos, 0
  rxscan1242_done3527:
    add $I11, rx1241_pos, 1
    gt $I11, rx1241_eos, rx1241_fail3521
    substr $S10, rx1241_tgt, rx1241_pos, 1
    ne $S10, ucs4:">", rx1241_fail3521
    add rx1241_pos, 1
    rx1241_cur."!cursor_pass"(rx1241_pos, 'backtrack'=>1)
    .return (rx1241_cur)
  rx1241_restart3520:
    repr_get_attr_obj rx1241_cstack, rx1241_cur, rx1241_curclass, "$!cstack"
  rx1241_fail3521:
    unless rx1241_bstack, rx1241_done3519
    pop $I19, rx1241_bstack
    if_null rx1241_cstack, rx1241_cstack_done3524
    unless rx1241_cstack, rx1241_cstack_done3524
    dec $I19
    set $P11, rx1241_cstack[$I19]
  rx1241_cstack_done3524:
    pop rx1241_rep, rx1241_bstack
    pop rx1241_pos, rx1241_bstack
    pop $I19, rx1241_bstack
    lt rx1241_pos, -1, rx1241_done3519
    lt rx1241_pos, 0, rx1241_fail3521
    eq $I19, 0, rx1241_fail3521
    nqp_islist $I20, rx1241_cstack
    unless $I20, rx1241_jump3522
    elements $I18, rx1241_bstack
    le $I18, 0, rx1241_cut3523
    dec $I18
    set $I18, rx1241_bstack[$I18]
  rx1241_cut3523:
    assign rx1241_cstack, $I18
  rx1241_jump3522:
    jump $I19
  rx1241_done3519:
    rx1241_cur."!cursor_fail"()
    .return (rx1241_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_233_1349901750.327_caps" :subid("cuid_memo_400_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_233_1349901750.327_nfa" :subid("cuid_memo_401_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 62
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_234_1349901750.327") :anon :lex :outer("cuid_235_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1243_tgt
    .local int rx1243_pos
    .local int rx1243_off
    .local int rx1243_eos
    .local int rx1243_rep
    .local pmc rx1243_cur
    .local pmc rx1243_curclass
    .local pmc rx1243_bstack
    .local pmc rx1243_cstack
    (rx1243_cur, rx1243_tgt, rx1243_pos, rx1243_curclass, rx1243_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1243_cur
    length rx1243_eos, rx1243_tgt
    eq $I19, 1, rx1243_restart3531
    gt rx1243_pos, rx1243_eos, rx1243_fail3532
    repr_get_attr_int $I11, self, rx1243_curclass, "$!from"
    ne $I11, -1, rxscan1244_done3538
    goto rxscan1244_scan3537
  rxscan1244_loop3536:
    inc rx1243_pos
    gt rx1243_pos, rx1243_eos, rx1243_fail3532
    repr_bind_attr_int rx1243_cur, rx1243_curclass, "$!from", rx1243_pos
  rxscan1244_scan3537:
    nqp_rxmark rx1243_bstack, rxscan1244_loop3536, rx1243_pos, 0
  rxscan1244_done3538:
    add $I11, rx1243_pos, 1
    gt $I11, rx1243_eos, rx1243_fail3532
    substr $S10, rx1243_tgt, rx1243_pos, 1
    ne $S10, ucs4:"{", rx1243_fail3532
    add rx1243_pos, 1
    rx1243_cur."!cursor_pass"(rx1243_pos, 'backtrack'=>1)
    .return (rx1243_cur)
  rx1243_restart3531:
    repr_get_attr_obj rx1243_cstack, rx1243_cur, rx1243_curclass, "$!cstack"
  rx1243_fail3532:
    unless rx1243_bstack, rx1243_done3530
    pop $I19, rx1243_bstack
    if_null rx1243_cstack, rx1243_cstack_done3535
    unless rx1243_cstack, rx1243_cstack_done3535
    dec $I19
    set $P11, rx1243_cstack[$I19]
  rx1243_cstack_done3535:
    pop rx1243_rep, rx1243_bstack
    pop rx1243_pos, rx1243_bstack
    pop $I19, rx1243_bstack
    lt rx1243_pos, -1, rx1243_done3530
    lt rx1243_pos, 0, rx1243_fail3532
    eq $I19, 0, rx1243_fail3532
    nqp_islist $I20, rx1243_cstack
    unless $I20, rx1243_jump3533
    elements $I18, rx1243_bstack
    le $I18, 0, rx1243_cut3534
    dec $I18
    set $I18, rx1243_bstack[$I18]
  rx1243_cut3534:
    assign rx1243_cstack, $I18
  rx1243_jump3533:
    jump $I19
  rx1243_done3530:
    rx1243_cur."!cursor_fail"()
    .return (rx1243_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_234_1349901750.327_caps" :subid("cuid_memo_402_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_234_1349901750.327_nfa" :subid("cuid_memo_403_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 123
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?{ }>" :subid("cuid_237_1349901750.327") :anon :lex :outer("cuid_243_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1380
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_236_1349901750.327' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1246_tgt
    .local int rx1246_pos
    .local int rx1246_off
    .local int rx1246_eos
    .local int rx1246_rep
    .local pmc rx1246_cur
    .local pmc rx1246_curclass
    .local pmc rx1246_bstack
    .local pmc rx1246_cstack
    (rx1246_cur, rx1246_tgt, rx1246_pos, rx1246_curclass, rx1246_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1246_cur
    length rx1246_eos, rx1246_tgt
    eq $I19, 1, rx1246_restart3542
    gt rx1246_pos, rx1246_eos, rx1246_fail3543
    repr_get_attr_int $I11, self, rx1246_curclass, "$!from"
    ne $I11, -1, rxscan1247_done3549
    goto rxscan1247_scan3548
  rxscan1247_loop3547:
    inc rx1246_pos
    gt rx1246_pos, rx1246_eos, rx1246_fail3543
    repr_bind_attr_int rx1246_cur, rx1246_curclass, "$!from", rx1246_pos
  rxscan1247_scan3548:
    nqp_rxmark rx1246_bstack, rxscan1247_loop3547, rx1246_pos, 0
  rxscan1247_done3549:
    nqp_rxmark rx1246_bstack, rxcap1248_fail3551, rx1246_pos, 0
    ge rx1246_pos, rx1246_eos, rx1246_fail3543
    substr $S11, rx1246_tgt, rx1246_pos, 1
    index $I11, ucs4:"?!", $S11
    lt $I11, 0, rx1246_fail3543
    inc rx1246_pos
    .const 'Sub' $P5001 = 'cuid_236_1349901750.327' 
    capture_lex $P5001
    repr_bind_attr_int rx1246_cur, rx1246_curclass, "$!pos", rx1246_pos
    $P11 = rx1246_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1246_curclass, "$!pos"
    lt $I11, 0, rx1246_fail3543
    nqp_rxpeek $I19, rx1246_bstack, rxcap1248_fail3551
    inc $I19
    set $I11, rx1246_bstack[$I19]
    repr_bind_attr_int rx1246_cur, rx1246_curclass, "$!pos", rx1246_pos
    $P11 = rx1246_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1246_pos)
    rx1246_cstack = rx1246_cur."!cursor_capture"($P11, "zw")
    goto rxcap1248_done3550
  rxcap1248_fail3551:
    goto rx1246_fail3543
  rxcap1248_done3550:
    repr_bind_attr_int rx1246_cur, rx1246_curclass, "$!pos", rx1246_pos
    $P11 = rx1246_cur."codeblock"()
    repr_get_attr_int $I11, $P11, rx1246_curclass, "$!pos"
    lt $I11, 0, rx1246_fail3543
    nqp_rxmark rx1246_bstack, rxsubrule1251_pass3562, -1, 0
  rxsubrule1251_pass3562:
    rx1246_cstack = rx1246_cur."!cursor_capture"($P11, "codeblock")
    repr_get_attr_int rx1246_pos, $P11, rx1246_curclass, "$!pos"
    rx1246_cur."!cursor_pass"(rx1246_pos, "assertion:sym<?{ }>", 'backtrack'=>1)
    .return (rx1246_cur)
  rx1246_restart3542:
    repr_get_attr_obj rx1246_cstack, rx1246_cur, rx1246_curclass, "$!cstack"
  rx1246_fail3543:
    unless rx1246_bstack, rx1246_done3541
    pop $I19, rx1246_bstack
    if_null rx1246_cstack, rx1246_cstack_done3546
    unless rx1246_cstack, rx1246_cstack_done3546
    dec $I19
    set $P11, rx1246_cstack[$I19]
  rx1246_cstack_done3546:
    pop rx1246_rep, rx1246_bstack
    pop rx1246_pos, rx1246_bstack
    pop $I19, rx1246_bstack
    lt rx1246_pos, -1, rx1246_done3541
    lt rx1246_pos, 0, rx1246_fail3543
    eq $I19, 0, rx1246_fail3543
    nqp_islist $I20, rx1246_cstack
    unless $I20, rx1246_jump3544
    elements $I18, rx1246_bstack
    le $I18, 0, rx1246_cut3545
    dec $I18
    set $I18, rx1246_bstack[$I18]
  rx1246_cut3545:
    assign rx1246_cstack, $I18
  rx1246_jump3544:
    jump $I19
  rx1246_done3541:
    rx1246_cur."!cursor_fail"()
    .return (rx1246_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_237_1349901750.327_caps" :subid("cuid_memo_404_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["zw"], $P5002
    box $P5003, 0
    set $P5001["codeblock"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_237_1349901750.327_nfa" :subid("cuid_memo_405_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "?!"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 123
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 0
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_236_1349901750.327") :anon :lex :outer("cuid_237_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1249_tgt
    .local int rx1249_pos
    .local int rx1249_off
    .local int rx1249_eos
    .local int rx1249_rep
    .local pmc rx1249_cur
    .local pmc rx1249_curclass
    .local pmc rx1249_bstack
    .local pmc rx1249_cstack
    (rx1249_cur, rx1249_tgt, rx1249_pos, rx1249_curclass, rx1249_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1249_cur
    length rx1249_eos, rx1249_tgt
    eq $I19, 1, rx1249_restart3554
    gt rx1249_pos, rx1249_eos, rx1249_fail3555
    repr_get_attr_int $I11, self, rx1249_curclass, "$!from"
    ne $I11, -1, rxscan1250_done3561
    goto rxscan1250_scan3560
  rxscan1250_loop3559:
    inc rx1249_pos
    gt rx1249_pos, rx1249_eos, rx1249_fail3555
    repr_bind_attr_int rx1249_cur, rx1249_curclass, "$!from", rx1249_pos
  rxscan1250_scan3560:
    nqp_rxmark rx1249_bstack, rxscan1250_loop3559, rx1249_pos, 0
  rxscan1250_done3561:
    add $I11, rx1249_pos, 1
    gt $I11, rx1249_eos, rx1249_fail3555
    substr $S10, rx1249_tgt, rx1249_pos, 1
    ne $S10, ucs4:"{", rx1249_fail3555
    add rx1249_pos, 1
    rx1249_cur."!cursor_pass"(rx1249_pos, 'backtrack'=>1)
    .return (rx1249_cur)
  rx1249_restart3554:
    repr_get_attr_obj rx1249_cstack, rx1249_cur, rx1249_curclass, "$!cstack"
  rx1249_fail3555:
    unless rx1249_bstack, rx1249_done3553
    pop $I19, rx1249_bstack
    if_null rx1249_cstack, rx1249_cstack_done3558
    unless rx1249_cstack, rx1249_cstack_done3558
    dec $I19
    set $P11, rx1249_cstack[$I19]
  rx1249_cstack_done3558:
    pop rx1249_rep, rx1249_bstack
    pop rx1249_pos, rx1249_bstack
    pop $I19, rx1249_bstack
    lt rx1249_pos, -1, rx1249_done3553
    lt rx1249_pos, 0, rx1249_fail3555
    eq $I19, 0, rx1249_fail3555
    nqp_islist $I20, rx1249_cstack
    unless $I20, rx1249_jump3556
    elements $I18, rx1249_bstack
    le $I18, 0, rx1249_cut3557
    dec $I18
    set $I18, rx1249_bstack[$I18]
  rx1249_cut3557:
    assign rx1249_cstack, $I18
  rx1249_jump3556:
    jump $I19
  rx1249_done3553:
    rx1249_cur."!cursor_fail"()
    .return (rx1249_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_236_1349901750.327_caps" :subid("cuid_memo_406_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_236_1349901750.327_nfa" :subid("cuid_memo_407_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 123
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<name>" :subid("cuid_239_1349901750.327") :anon :lex :outer("cuid_243_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1384
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_238_1349901750.327' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1252_tgt
    .local int rx1252_pos
    .local int rx1252_off
    .local int rx1252_eos
    .local int rx1252_rep
    .local pmc rx1252_cur
    .local pmc rx1252_curclass
    .local pmc rx1252_bstack
    .local pmc rx1252_cstack
    (rx1252_cur, rx1252_tgt, rx1252_pos, rx1252_curclass, rx1252_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1252_cur
    length rx1252_eos, rx1252_tgt
    eq $I19, 1, rx1252_restart3565
    gt rx1252_pos, rx1252_eos, rx1252_fail3566
    repr_get_attr_int $I11, self, rx1252_curclass, "$!from"
    ne $I11, -1, rxscan1253_done3572
    goto rxscan1253_scan3571
  rxscan1253_loop3570:
    inc rx1252_pos
    gt rx1252_pos, rx1252_eos, rx1252_fail3566
    repr_bind_attr_int rx1252_cur, rx1252_curclass, "$!from", rx1252_pos
  rxscan1253_scan3571:
    nqp_rxmark rx1252_bstack, rxscan1253_loop3570, rx1252_pos, 0
  rxscan1253_done3572:
    repr_bind_attr_int rx1252_cur, rx1252_curclass, "$!pos", rx1252_pos
    $P11 = rx1252_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx1252_curclass, "$!pos"
    lt $I11, 0, rx1252_fail3566
    nqp_rxmark rx1252_bstack, rxsubrule1254_pass3573, -1, 0
  rxsubrule1254_pass3573:
    rx1252_cstack = rx1252_cur."!cursor_capture"($P11, "longname")
    repr_get_attr_int rx1252_pos, $P11, rx1252_curclass, "$!pos"
    nqp_rxmark rx1252_bstack, rxquantr1255_done3575, rx1252_pos, 0
  rxquantr1255_loop3574:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1256_03577
    nqp_push_label $P11, alt1256_13588
    nqp_push_label $P11, alt1256_23590
    nqp_push_label $P11, alt1256_33592
    nqp_push_label $P11, alt1256_43594
    nqp_rxmark rx1252_bstack, alt1256_end3576, -1, 0
    rx1252_cur."!alt"(rx1252_pos, "alt_nfa__42_1349901753.734", $P11)
    goto rx1252_fail3566
  alt1256_03577:
    .const 'Sub' $P5001 = 'cuid_238_1349901750.327' 
    capture_lex $P5001
    repr_bind_attr_int rx1252_cur, rx1252_curclass, "$!pos", rx1252_pos
    $P11 = rx1252_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1252_curclass, "$!pos"
    lt $I11, 0, rx1252_fail3566
    goto alt1256_end3576
  alt1256_13588:
    add $I11, rx1252_pos, 1
    gt $I11, rx1252_eos, rx1252_fail3566
    substr $S10, rx1252_tgt, rx1252_pos, 1
    ne $S10, ucs4:"=", rx1252_fail3566
    add rx1252_pos, 1
    repr_bind_attr_int rx1252_cur, rx1252_curclass, "$!pos", rx1252_pos
    $P11 = rx1252_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx1252_curclass, "$!pos"
    lt $I11, 0, rx1252_fail3566
    nqp_rxmark rx1252_bstack, rxsubrule1259_pass3589, -1, 0
  rxsubrule1259_pass3589:
    rx1252_cstack = rx1252_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx1252_pos, $P11, rx1252_curclass, "$!pos"
    goto alt1256_end3576
  alt1256_23590:
    add $I11, rx1252_pos, 1
    gt $I11, rx1252_eos, rx1252_fail3566
    substr $S10, rx1252_tgt, rx1252_pos, 1
    ne $S10, ucs4:":", rx1252_fail3566
    add rx1252_pos, 1
    repr_bind_attr_int rx1252_cur, rx1252_curclass, "$!pos", rx1252_pos
    $P11 = rx1252_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx1252_curclass, "$!pos"
    lt $I11, 0, rx1252_fail3566
    nqp_rxmark rx1252_bstack, rxsubrule1260_pass3591, -1, 0
  rxsubrule1260_pass3591:
    rx1252_cstack = rx1252_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx1252_pos, $P11, rx1252_curclass, "$!pos"
    goto alt1256_end3576
  alt1256_33592:
    add $I11, rx1252_pos, 1
    gt $I11, rx1252_eos, rx1252_fail3566
    substr $S10, rx1252_tgt, rx1252_pos, 1
    ne $S10, ucs4:"(", rx1252_fail3566
    add rx1252_pos, 1
    repr_bind_attr_int rx1252_cur, rx1252_curclass, "$!pos", rx1252_pos
    $P11 = rx1252_cur."LANG"("MAIN", "arglist")
    repr_get_attr_int $I11, $P11, rx1252_curclass, "$!pos"
    lt $I11, 0, rx1252_fail3566
    nqp_rxmark rx1252_bstack, rxsubrule1261_pass3593, -1, 0
  rxsubrule1261_pass3593:
    rx1252_cstack = rx1252_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx1252_pos, $P11, rx1252_curclass, "$!pos"
    add $I11, rx1252_pos, 1
    gt $I11, rx1252_eos, rx1252_fail3566
    substr $S10, rx1252_tgt, rx1252_pos, 1
    ne $S10, ucs4:")", rx1252_fail3566
    add rx1252_pos, 1
    goto alt1256_end3576
  alt1256_43594:
    repr_bind_attr_int rx1252_cur, rx1252_curclass, "$!pos", rx1252_pos
    $P11 = rx1252_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx1252_curclass, "$!pos"
    lt $I11, 0, rx1252_fail3566
    repr_get_attr_int rx1252_pos, $P11, rx1252_curclass, "$!pos"
    repr_bind_attr_int rx1252_cur, rx1252_curclass, "$!pos", rx1252_pos
    $P11 = rx1252_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx1252_curclass, "$!pos"
    lt $I11, 0, rx1252_fail3566
    nqp_rxmark rx1252_bstack, rxsubrule1263_pass3596, -1, 0
  rxsubrule1263_pass3596:
    rx1252_cstack = rx1252_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx1252_pos, $P11, rx1252_curclass, "$!pos"
    goto alt1256_end3576
  alt1256_end3576:
    nqp_rxpeek $I19, rx1252_bstack, rxquantr1255_done3575
    inc $I19
    inc $I19
    set rx1252_rep, rx1252_bstack[$I19]
    nqp_rxcommit rx1252_bstack, rxquantr1255_done3575
    inc rx1252_rep
  rxquantr1255_done3575:
    rx1252_cur."!cursor_pass"(rx1252_pos, "assertion:sym<name>", 'backtrack'=>1)
    .return (rx1252_cur)
  rx1252_restart3565:
    repr_get_attr_obj rx1252_cstack, rx1252_cur, rx1252_curclass, "$!cstack"
  rx1252_fail3566:
    unless rx1252_bstack, rx1252_done3564
    pop $I19, rx1252_bstack
    if_null rx1252_cstack, rx1252_cstack_done3569
    unless rx1252_cstack, rx1252_cstack_done3569
    dec $I19
    set $P11, rx1252_cstack[$I19]
  rx1252_cstack_done3569:
    pop rx1252_rep, rx1252_bstack
    pop rx1252_pos, rx1252_bstack
    pop $I19, rx1252_bstack
    lt rx1252_pos, -1, rx1252_done3564
    lt rx1252_pos, 0, rx1252_fail3566
    eq $I19, 0, rx1252_fail3566
    nqp_islist $I20, rx1252_cstack
    unless $I20, rx1252_jump3567
    elements $I18, rx1252_bstack
    le $I18, 0, rx1252_cut3568
    dec $I18
    set $I18, rx1252_bstack[$I18]
  rx1252_cut3568:
    assign rx1252_cstack, $I18
  rx1252_jump3567:
    jump $I19
  rx1252_done3564:
    rx1252_cur."!cursor_fail"()
    .return (rx1252_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_239_1349901750.327_caps" :subid("cuid_memo_408_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["longname"], $P5002
    box $P5003, 2
    set $P5001["assertion"], $P5003
    box $P5004, 2
    set $P5001["arglist"], $P5004
    box $P5005, 2
    set $P5001["nibbler"], $P5005
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_239_1349901750.327_nfa" :subid("cuid_memo_409_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "identifier"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 62
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    box $P5011, 2
    push $P5007, $P5011
    box $P5012, 61
    push $P5007, $P5012
    box $P5013, 4
    push $P5007, $P5013
    box $P5014, 2
    push $P5007, $P5014
    box $P5015, 58
    push $P5007, $P5015
    box $P5016, 5
    push $P5007, $P5016
    box $P5017, 2
    push $P5007, $P5017
    box $P5018, 40
    push $P5007, $P5018
    box $P5019, 6
    push $P5007, $P5019
    box $P5020, 8
    push $P5007, $P5020
    box $P5021, "normspace"
    push $P5007, $P5021
    box $P5022, 8
    push $P5007, $P5022
    box $P5023, 1
    push $P5007, $P5023
    box $P5024, 0
    push $P5007, $P5024
    box $P5025, 0
    push $P5007, $P5025
    push $P5001, $P5007
    new $P5026, 'ResizablePMCArray'
    box $P5027, 0
    push $P5026, $P5027
    box $P5028, 0
    push $P5026, $P5028
    box $P5029, 0
    push $P5026, $P5029
    push $P5001, $P5026
    new $P5030, 'ResizablePMCArray'
    box $P5031, 8
    push $P5030, $P5031
    box $P5032, "assertion"
    push $P5030, $P5032
    box $P5033, 0
    push $P5030, $P5033
    push $P5001, $P5030
    new $P5034, 'ResizablePMCArray'
    box $P5035, 8
    push $P5034, $P5035
    box $P5036, "arglist"
    push $P5034, $P5036
    box $P5037, 0
    push $P5034, $P5037
    push $P5001, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 8
    push $P5038, $P5039
    box $P5040, "LANG"
    push $P5038, $P5040
    box $P5041, 7
    push $P5038, $P5041
    push $P5001, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 41
    push $P5042, $P5044
    box $P5045, 0
    push $P5042, $P5045
    push $P5001, $P5042
    new $P5046, 'ResizablePMCArray'
    box $P5047, 8
    push $P5046, $P5047
    box $P5048, "nibbler"
    push $P5046, $P5048
    box $P5049, 0
    push $P5046, $P5049
    push $P5001, $P5046
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_239_1349901750.327_alt_nfa__42_1349901753.734" :subid("cuid_memo_410_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 62
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 0
    push $P5008, $P5009
    box $P5010, 0
    push $P5008, $P5010
    box $P5011, 0
    push $P5008, $P5011
    push $P5002, $P5008
    push $P5001, $P5002
    new $P5012, 'ResizablePMCArray'
    new $P5013, 'ResizablePMCArray'
    push $P5012, $P5013
    new $P5014, 'ResizablePMCArray'
    box $P5015, 2
    push $P5014, $P5015
    box $P5016, 61
    push $P5014, $P5016
    box $P5017, 2
    push $P5014, $P5017
    push $P5012, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 8
    push $P5018, $P5019
    box $P5020, "assertion"
    push $P5018, $P5020
    box $P5021, 0
    push $P5018, $P5021
    push $P5012, $P5018
    push $P5001, $P5012
    new $P5022, 'ResizablePMCArray'
    new $P5023, 'ResizablePMCArray'
    push $P5022, $P5023
    new $P5024, 'ResizablePMCArray'
    box $P5025, 2
    push $P5024, $P5025
    box $P5026, 58
    push $P5024, $P5026
    box $P5027, 2
    push $P5024, $P5027
    push $P5022, $P5024
    new $P5028, 'ResizablePMCArray'
    box $P5029, 8
    push $P5028, $P5029
    box $P5030, "arglist"
    push $P5028, $P5030
    box $P5031, 0
    push $P5028, $P5031
    push $P5022, $P5028
    push $P5001, $P5022
    new $P5032, 'ResizablePMCArray'
    new $P5033, 'ResizablePMCArray'
    push $P5032, $P5033
    new $P5034, 'ResizablePMCArray'
    box $P5035, 2
    push $P5034, $P5035
    box $P5036, 40
    push $P5034, $P5036
    box $P5037, 2
    push $P5034, $P5037
    push $P5032, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 8
    push $P5038, $P5039
    box $P5040, "LANG"
    push $P5038, $P5040
    box $P5041, 3
    push $P5038, $P5041
    push $P5032, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 41
    push $P5042, $P5044
    box $P5045, 0
    push $P5042, $P5045
    push $P5032, $P5042
    push $P5001, $P5032
    new $P5046, 'ResizablePMCArray'
    new $P5047, 'ResizablePMCArray'
    push $P5046, $P5047
    new $P5048, 'ResizablePMCArray'
    box $P5049, 8
    push $P5048, $P5049
    box $P5050, "normspace"
    push $P5048, $P5050
    box $P5051, 2
    push $P5048, $P5051
    push $P5046, $P5048
    new $P5052, 'ResizablePMCArray'
    box $P5053, 8
    push $P5052, $P5053
    box $P5054, "nibbler"
    push $P5052, $P5054
    box $P5055, 0
    push $P5052, $P5055
    push $P5046, $P5052
    push $P5001, $P5046
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_238_1349901750.327") :anon :lex :outer("cuid_239_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1257_tgt
    .local int rx1257_pos
    .local int rx1257_off
    .local int rx1257_eos
    .local int rx1257_rep
    .local pmc rx1257_cur
    .local pmc rx1257_curclass
    .local pmc rx1257_bstack
    .local pmc rx1257_cstack
    (rx1257_cur, rx1257_tgt, rx1257_pos, rx1257_curclass, rx1257_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1257_cur
    length rx1257_eos, rx1257_tgt
    eq $I19, 1, rx1257_restart3580
    gt rx1257_pos, rx1257_eos, rx1257_fail3581
    repr_get_attr_int $I11, self, rx1257_curclass, "$!from"
    ne $I11, -1, rxscan1258_done3587
    goto rxscan1258_scan3586
  rxscan1258_loop3585:
    inc rx1257_pos
    gt rx1257_pos, rx1257_eos, rx1257_fail3581
    repr_bind_attr_int rx1257_cur, rx1257_curclass, "$!from", rx1257_pos
  rxscan1258_scan3586:
    nqp_rxmark rx1257_bstack, rxscan1258_loop3585, rx1257_pos, 0
  rxscan1258_done3587:
    add $I11, rx1257_pos, 1
    gt $I11, rx1257_eos, rx1257_fail3581
    substr $S10, rx1257_tgt, rx1257_pos, 1
    ne $S10, ucs4:">", rx1257_fail3581
    add rx1257_pos, 1
    rx1257_cur."!cursor_pass"(rx1257_pos, 'backtrack'=>1)
    .return (rx1257_cur)
  rx1257_restart3580:
    repr_get_attr_obj rx1257_cstack, rx1257_cur, rx1257_curclass, "$!cstack"
  rx1257_fail3581:
    unless rx1257_bstack, rx1257_done3579
    pop $I19, rx1257_bstack
    if_null rx1257_cstack, rx1257_cstack_done3584
    unless rx1257_cstack, rx1257_cstack_done3584
    dec $I19
    set $P11, rx1257_cstack[$I19]
  rx1257_cstack_done3584:
    pop rx1257_rep, rx1257_bstack
    pop rx1257_pos, rx1257_bstack
    pop $I19, rx1257_bstack
    lt rx1257_pos, -1, rx1257_done3579
    lt rx1257_pos, 0, rx1257_fail3581
    eq $I19, 0, rx1257_fail3581
    nqp_islist $I20, rx1257_cstack
    unless $I20, rx1257_jump3582
    elements $I18, rx1257_bstack
    le $I18, 0, rx1257_cut3583
    dec $I18
    set $I18, rx1257_bstack[$I18]
  rx1257_cut3583:
    assign rx1257_cstack, $I18
  rx1257_jump3582:
    jump $I19
  rx1257_done3579:
    rx1257_cur."!cursor_fail"()
    .return (rx1257_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_238_1349901750.327_caps" :subid("cuid_memo_411_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_238_1349901750.327_nfa" :subid("cuid_memo_412_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 62
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<var>" :subid("cuid_240_1349901750.327") :anon :lex :outer("cuid_243_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1395
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1264_tgt
    .local int rx1264_pos
    .local int rx1264_off
    .local int rx1264_eos
    .local int rx1264_rep
    .local pmc rx1264_cur
    .local pmc rx1264_curclass
    .local pmc rx1264_bstack
    .local pmc rx1264_cstack
    (rx1264_cur, rx1264_tgt, rx1264_pos, rx1264_curclass, rx1264_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1264_cur
    length rx1264_eos, rx1264_tgt
    eq $I19, 1, rx1264_restart3599
    gt rx1264_pos, rx1264_eos, rx1264_fail3600
    repr_get_attr_int $I11, self, rx1264_curclass, "$!from"
    ne $I11, -1, rxscan1265_done3606
    goto rxscan1265_scan3605
  rxscan1265_loop3604:
    inc rx1264_pos
    gt rx1264_pos, rx1264_eos, rx1264_fail3600
    repr_bind_attr_int rx1264_cur, rx1264_curclass, "$!from", rx1264_pos
  rxscan1265_scan3605:
    nqp_rxmark rx1264_bstack, rxscan1265_loop3604, rx1264_pos, 0
  rxscan1265_done3606:
    ge rx1264_pos, rx1264_eos, rx1264_fail3600
    substr $S11, rx1264_tgt, rx1264_pos, 1
    index $I11, ucs4:"$@", $S11
    lt $I11, 0, rx1264_fail3600
    repr_bind_attr_int rx1264_cur, rx1264_curclass, "$!pos", rx1264_pos
    $P11 = rx1264_cur."LANG"("MAIN", "variable")
    repr_get_attr_int $I11, $P11, rx1264_curclass, "$!pos"
    lt $I11, 0, rx1264_fail3600
    nqp_rxmark rx1264_bstack, rxsubrule1266_pass3607, -1, 0
  rxsubrule1266_pass3607:
    rx1264_cstack = rx1264_cur."!cursor_capture"($P11, "var")
    repr_get_attr_int rx1264_pos, $P11, rx1264_curclass, "$!pos"
    rx1264_cur."!cursor_pass"(rx1264_pos, "assertion:sym<var>", 'backtrack'=>1)
    .return (rx1264_cur)
  rx1264_restart3599:
    repr_get_attr_obj rx1264_cstack, rx1264_cur, rx1264_curclass, "$!cstack"
  rx1264_fail3600:
    unless rx1264_bstack, rx1264_done3598
    pop $I19, rx1264_bstack
    if_null rx1264_cstack, rx1264_cstack_done3603
    unless rx1264_cstack, rx1264_cstack_done3603
    dec $I19
    set $P11, rx1264_cstack[$I19]
  rx1264_cstack_done3603:
    pop rx1264_rep, rx1264_bstack
    pop rx1264_pos, rx1264_bstack
    pop $I19, rx1264_bstack
    lt rx1264_pos, -1, rx1264_done3598
    lt rx1264_pos, 0, rx1264_fail3600
    eq $I19, 0, rx1264_fail3600
    nqp_islist $I20, rx1264_cstack
    unless $I20, rx1264_jump3601
    elements $I18, rx1264_bstack
    le $I18, 0, rx1264_cut3602
    dec $I18
    set $I18, rx1264_bstack[$I18]
  rx1264_cut3602:
    assign rx1264_cstack, $I18
  rx1264_jump3601:
    jump $I19
  rx1264_done3598:
    rx1264_cur."!cursor_fail"()
    .return (rx1264_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_240_1349901750.327_caps" :subid("cuid_memo_413_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["var"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_240_1349901750.327_nfa" :subid("cuid_memo_414_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "$@"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "codeblock" :subid("cuid_241_1349901750.327") :anon :lex :outer("cuid_243_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1399
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1267_tgt
    .local int rx1267_pos
    .local int rx1267_off
    .local int rx1267_eos
    .local int rx1267_rep
    .local pmc rx1267_cur
    .local pmc rx1267_curclass
    .local pmc rx1267_bstack
    .local pmc rx1267_cstack
    (rx1267_cur, rx1267_tgt, rx1267_pos, rx1267_curclass, rx1267_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1267_cur
    length rx1267_eos, rx1267_tgt
    eq $I19, 1, rx1267_restart3610
    gt rx1267_pos, rx1267_eos, rx1267_fail3611
    repr_get_attr_int $I11, self, rx1267_curclass, "$!from"
    ne $I11, -1, rxscan1268_done3617
    goto rxscan1268_scan3616
  rxscan1268_loop3615:
    inc rx1267_pos
    gt rx1267_pos, rx1267_eos, rx1267_fail3611
    repr_bind_attr_int rx1267_cur, rx1267_curclass, "$!from", rx1267_pos
  rxscan1268_scan3616:
    nqp_rxmark rx1267_bstack, rxscan1268_loop3615, rx1267_pos, 0
  rxscan1268_done3617:
    repr_bind_attr_int rx1267_cur, rx1267_curclass, "$!pos", rx1267_pos
    $P11 = rx1267_cur."LANG"("MAIN", "pblock")
    repr_get_attr_int $I11, $P11, rx1267_curclass, "$!pos"
    lt $I11, 0, rx1267_fail3611
    nqp_rxmark rx1267_bstack, rxsubrule1269_pass3618, -1, 0
  rxsubrule1269_pass3618:
    rx1267_cstack = rx1267_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx1267_pos, $P11, rx1267_curclass, "$!pos"
    rx1267_cur."!cursor_pass"(rx1267_pos, "codeblock", 'backtrack'=>1)
    .return (rx1267_cur)
  rx1267_restart3610:
    repr_get_attr_obj rx1267_cstack, rx1267_cur, rx1267_curclass, "$!cstack"
  rx1267_fail3611:
    unless rx1267_bstack, rx1267_done3609
    pop $I19, rx1267_bstack
    if_null rx1267_cstack, rx1267_cstack_done3614
    unless rx1267_cstack, rx1267_cstack_done3614
    dec $I19
    set $P11, rx1267_cstack[$I19]
  rx1267_cstack_done3614:
    pop rx1267_rep, rx1267_bstack
    pop rx1267_pos, rx1267_bstack
    pop $I19, rx1267_bstack
    lt rx1267_pos, -1, rx1267_done3609
    lt rx1267_pos, 0, rx1267_fail3611
    eq $I19, 0, rx1267_fail3611
    nqp_islist $I20, rx1267_cstack
    unless $I20, rx1267_jump3612
    elements $I18, rx1267_bstack
    le $I18, 0, rx1267_cut3613
    dec $I18
    set $I18, rx1267_bstack[$I18]
  rx1267_cut3613:
    assign rx1267_cstack, $I18
  rx1267_jump3612:
    jump $I19
  rx1267_done3609:
    rx1267_cur."!cursor_fail"()
    .return (rx1267_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_241_1349901750.327_caps" :subid("cuid_memo_415_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["block"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_241_1349901750.327_nfa" :subid("cuid_memo_416_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "LANG"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "arg" :subid("cuid_242_1349901750.327") :anon :lex :outer("cuid_243_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1403
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1270_tgt
    .local int rx1270_pos
    .local int rx1270_off
    .local int rx1270_eos
    .local int rx1270_rep
    .local pmc rx1270_cur
    .local pmc rx1270_curclass
    .local pmc rx1270_bstack
    .local pmc rx1270_cstack
    (rx1270_cur, rx1270_tgt, rx1270_pos, rx1270_curclass, rx1270_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1270_cur
    length rx1270_eos, rx1270_tgt
    eq $I19, 1, rx1270_restart3621
    gt rx1270_pos, rx1270_eos, rx1270_fail3622
    repr_get_attr_int $I11, self, rx1270_curclass, "$!from"
    ne $I11, -1, rxscan1271_done3628
    goto rxscan1271_scan3627
  rxscan1271_loop3626:
    inc rx1270_pos
    gt rx1270_pos, rx1270_eos, rx1270_fail3622
    repr_bind_attr_int rx1270_cur, rx1270_curclass, "$!from", rx1270_pos
  rxscan1271_scan3627:
    nqp_rxmark rx1270_bstack, rxscan1271_loop3626, rx1270_pos, 0
  rxscan1271_done3628:
    repr_bind_attr_int rx1270_cur, rx1270_curclass, "$!pos", rx1270_pos
    $P11 = rx1270_cur."LANG"("MAIN", "quote_EXPR")
    repr_get_attr_int $I11, $P11, rx1270_curclass, "$!pos"
    lt $I11, 0, rx1270_fail3622
    nqp_rxmark rx1270_bstack, rxsubrule1272_pass3629, -1, 0
  rxsubrule1272_pass3629:
    rx1270_cstack = rx1270_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1270_pos, $P11, rx1270_curclass, "$!pos"
    rx1270_cur."!cursor_pass"(rx1270_pos, "arg", 'backtrack'=>1)
    .return (rx1270_cur)
  rx1270_restart3621:
    repr_get_attr_obj rx1270_cstack, rx1270_cur, rx1270_curclass, "$!cstack"
  rx1270_fail3622:
    unless rx1270_bstack, rx1270_done3620
    pop $I19, rx1270_bstack
    if_null rx1270_cstack, rx1270_cstack_done3625
    unless rx1270_cstack, rx1270_cstack_done3625
    dec $I19
    set $P11, rx1270_cstack[$I19]
  rx1270_cstack_done3625:
    pop rx1270_rep, rx1270_bstack
    pop rx1270_pos, rx1270_bstack
    pop $I19, rx1270_bstack
    lt rx1270_pos, -1, rx1270_done3620
    lt rx1270_pos, 0, rx1270_fail3622
    eq $I19, 0, rx1270_fail3622
    nqp_islist $I20, rx1270_cstack
    unless $I20, rx1270_jump3623
    elements $I18, rx1270_bstack
    le $I18, 0, rx1270_cut3624
    dec $I18
    set $I18, rx1270_bstack[$I18]
  rx1270_cut3624:
    assign rx1270_cstack, $I18
  rx1270_jump3623:
    jump $I19
  rx1270_done3620:
    rx1270_cur."!cursor_fail"()
    .return (rx1270_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_242_1349901750.327_caps" :subid("cuid_memo_417_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["quote_EXPR"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_242_1349901750.327_nfa" :subid("cuid_memo_418_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "LANG"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_403_1349901750.327") :anon :lex :outer("cuid_1_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1414
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    set $P5002, _lex_param_1[0]
    unless_null $P5002, fallback3631
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5003
  fallback3631:
    set $P101, $P5002
    nqp_get_sc_object $P5007, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Var"]
    unless_null $P5004, fallback3634
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5004, $P5008
  fallback3634:
    type_check $I5001, $P101, $P5004
    box $P5011, $I5001
    set $P5010, $P5011
    if $I5001 goto unless1273_end3633 
.annotate 'line', 1416
    box $P5009, "Pre-increment can only work on a variable"
    die $P5009
    set $P5010, $P5009
  unless1273_end3633:
.annotate 'line', 1419
    nqp_get_sc_object $P5015, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Op"]
    unless_null $P5012, fallback3635
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5012, $P5016
  fallback3635:
.annotate 'line', 1422
    nqp_get_sc_object $P5020, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Op"]
    unless_null $P5017, fallback3636
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5017, $P5021
  fallback3636:
.annotate 'line', 1425
    nqp_get_sc_object $P5025, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["IVal"]
    unless_null $P5022, fallback3637
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5022, $P5026
  fallback3637:
    $P5027 = $P5022."new"(1 :named("value"))
    $P5028 = $P5017."new"($P101, $P5027, "add_n" :named("op"))
    $P5029 = $P5012."new"($P101, $P5028, "bind" :named("op"))
    $P5030 = _lex_param_0."as_post"($P5029)
    .return ($P5030) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_404_1349901750.327") :anon :lex :outer("cuid_1_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1429
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    set $P5002, _lex_param_1[0]
    unless_null $P5002, fallback3638
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5003
  fallback3638:
    set $P101, $P5002
    nqp_get_sc_object $P5007, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Var"]
    unless_null $P5004, fallback3641
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5004, $P5008
  fallback3641:
    type_check $I5001, $P101, $P5004
    box $P5011, $I5001
    set $P5010, $P5011
    if $I5001 goto unless1274_end3640 
.annotate 'line', 1431
    box $P5009, "Pre-decrement can only work on a variable"
    die $P5009
    set $P5010, $P5009
  unless1274_end3640:
.annotate 'line', 1434
    nqp_get_sc_object $P5015, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Op"]
    unless_null $P5012, fallback3642
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5012, $P5016
  fallback3642:
.annotate 'line', 1437
    nqp_get_sc_object $P5020, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Op"]
    unless_null $P5017, fallback3643
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5017, $P5021
  fallback3643:
.annotate 'line', 1440
    nqp_get_sc_object $P5025, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["IVal"]
    unless_null $P5022, fallback3644
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5022, $P5026
  fallback3644:
    $P5027 = $P5022."new"(1 :named("value"))
    $P5028 = $P5017."new"($P101, $P5027, "sub_n" :named("op"))
    $P5029 = $P5012."new"($P101, $P5028, "bind" :named("op"))
    $P5030 = _lex_param_0."as_post"($P5029)
    .return ($P5030) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_405_1349901750.327") :anon :lex :outer("cuid_1_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1444
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$tmp", $P102 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
    set $P5003, _lex_param_1[0]
    unless_null $P5003, fallback3645
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5003, $P5004
  fallback3645:
    set $P101, $P5003
.annotate 'line', 1446
    nqp_get_sc_object $P5008, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5007, $P5008, "QAST"
    get_who $P5006, $P5007
    set $P5005, $P5006["Op"]
    unless_null $P5005, fallback3646
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5005, $P5009
  fallback3646:
    $P5010 = $P5005."unique"("tmp")
    set $P102, $P5010
    nqp_get_sc_object $P5014, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Var"]
    unless_null $P5011, fallback3649
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5011, $P5015
  fallback3649:
    type_check $I5001, $P101, $P5011
    box $P5018, $I5001
    set $P5017, $P5018
    if $I5001 goto unless1275_end3648 
.annotate 'line', 1447
    box $P5016, "Post-increment can only work on a variable"
    die $P5016
    set $P5017, $P5016
  unless1275_end3648:
.annotate 'line', 1450
    nqp_get_sc_object $P5022, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5021, $P5022, "QAST"
    get_who $P5020, $P5021
    set $P5019, $P5020["Stmt"]
    unless_null $P5019, fallback3650
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5019, $P5023
  fallback3650:
.annotate 'line', 1452
    nqp_get_sc_object $P5027, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["Op"]
    unless_null $P5024, fallback3651
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5024, $P5028
  fallback3651:
.annotate 'line', 1454
    nqp_get_sc_object $P5032, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["Var"]
    unless_null $P5029, fallback3652
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5029, $P5033
  fallback3652:
    $P5034 = $P101."returns"()
    $P5035 = $P5029."new"($P102 :named("name"), "local" :named("scope"), "var" :named("decl"), $P5034 :named("returns"))
    $P5036 = $P5024."new"($P5035, $P101, "bind" :named("op"))
.annotate 'line', 1457
    nqp_get_sc_object $P5040, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5039, $P5040, "QAST"
    get_who $P5038, $P5039
    set $P5037, $P5038["Op"]
    unless_null $P5037, fallback3653
    nqp_get_sc_object $P5041, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5037, $P5041
  fallback3653:
.annotate 'line', 1460
    nqp_get_sc_object $P5045, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["Op"]
    unless_null $P5042, fallback3654
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5042, $P5046
  fallback3654:
.annotate 'line', 1462
    nqp_get_sc_object $P5050, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5049, $P5050, "QAST"
    get_who $P5048, $P5049
    set $P5047, $P5048["Var"]
    unless_null $P5047, fallback3655
    nqp_get_sc_object $P5051, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5047, $P5051
  fallback3655:
    $P5052 = $P101."returns"()
    $P5053 = $P5047."new"($P102 :named("name"), "local" :named("scope"), $P5052 :named("returns"))
.annotate 'line', 1463
    nqp_get_sc_object $P5057, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5056, $P5057, "QAST"
    get_who $P5055, $P5056
    set $P5054, $P5055["IVal"]
    unless_null $P5054, fallback3656
    nqp_get_sc_object $P5058, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5054, $P5058
  fallback3656:
    $P5059 = $P5054."new"(1 :named("value"))
    $P5060 = $P5042."new"($P5053, $P5059, "add_n" :named("op"))
    $P5061 = $P5037."new"($P101, $P5060, "bind" :named("op"))
    $P5062 = $P5019."new"($P5036, $P5061, 0 :named("resultchild"))
    $P5063 = _lex_param_0."as_post"($P5062)
    .return ($P5063) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_406_1349901750.327") :anon :lex :outer("cuid_1_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1468
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$tmp", $P102 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
    set $P5003, _lex_param_1[0]
    unless_null $P5003, fallback3657
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5003, $P5004
  fallback3657:
    set $P101, $P5003
.annotate 'line', 1470
    nqp_get_sc_object $P5008, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5007, $P5008, "QAST"
    get_who $P5006, $P5007
    set $P5005, $P5006["Op"]
    unless_null $P5005, fallback3658
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5005, $P5009
  fallback3658:
    $P5010 = $P5005."unique"("tmp")
    set $P102, $P5010
    nqp_get_sc_object $P5014, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Var"]
    unless_null $P5011, fallback3661
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5011, $P5015
  fallback3661:
    type_check $I5001, $P101, $P5011
    box $P5018, $I5001
    set $P5017, $P5018
    if $I5001 goto unless1276_end3660 
.annotate 'line', 1471
    box $P5016, "Post-decrement can only work on a variable"
    die $P5016
    set $P5017, $P5016
  unless1276_end3660:
.annotate 'line', 1474
    nqp_get_sc_object $P5022, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5021, $P5022, "QAST"
    get_who $P5020, $P5021
    set $P5019, $P5020["Stmt"]
    unless_null $P5019, fallback3662
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5019, $P5023
  fallback3662:
.annotate 'line', 1476
    nqp_get_sc_object $P5027, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["Op"]
    unless_null $P5024, fallback3663
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5024, $P5028
  fallback3663:
.annotate 'line', 1478
    nqp_get_sc_object $P5032, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["Var"]
    unless_null $P5029, fallback3664
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5029, $P5033
  fallback3664:
    $P5034 = $P5029."new"($P102 :named("name"), "local" :named("scope"), "var" :named("decl"))
    $P5035 = $P5024."new"($P5034, $P101, "bind" :named("op"))
.annotate 'line', 1481
    nqp_get_sc_object $P5039, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Op"]
    unless_null $P5036, fallback3665
    nqp_get_sc_object $P5040, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5036, $P5040
  fallback3665:
.annotate 'line', 1484
    nqp_get_sc_object $P5044, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["Op"]
    unless_null $P5041, fallback3666
    nqp_get_sc_object $P5045, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5041, $P5045
  fallback3666:
.annotate 'line', 1486
    nqp_get_sc_object $P5049, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5048, $P5049, "QAST"
    get_who $P5047, $P5048
    set $P5046, $P5047["Var"]
    unless_null $P5046, fallback3667
    nqp_get_sc_object $P5050, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5046, $P5050
  fallback3667:
    $P5051 = $P5046."new"($P102 :named("name"), "local" :named("scope"))
.annotate 'line', 1487
    nqp_get_sc_object $P5055, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5054, $P5055, "QAST"
    get_who $P5053, $P5054
    set $P5052, $P5053["IVal"]
    unless_null $P5052, fallback3668
    nqp_get_sc_object $P5056, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5052, $P5056
  fallback3668:
    $P5057 = $P5052."new"(1 :named("value"))
    $P5058 = $P5041."new"($P5051, $P5057, "sub_n" :named("op"))
    $P5059 = $P5036."new"($P101, $P5058, "bind" :named("op"))
    $P5060 = $P5019."new"($P5035, $P5059, 0 :named("resultchild"))
    $P5061 = _lex_param_0."as_post"($P5060)
    .return ($P5061) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_407_1349901750.327") :anon :lex :outer("cuid_1_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1492
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
.annotate 'line', 1493
    set $P5001, _lex_param_1[0]
    unless_null $P5001, fallback3669
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5002
  fallback3669:
    $P5003 = _lex_param_0."as_post"($P5001, "n" :named("want"))
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_408_1349901750.327") :anon :lex :outer("cuid_1_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1496
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
.annotate 'line', 1497
    set $P5001, _lex_param_1[0]
    unless_null $P5001, fallback3670
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5002
  fallback3670:
    $P5003 = _lex_param_0."as_post"($P5001, "s" :named("want"))
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_409_1349901750.327") :anon :lex :outer("cuid_1_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1500
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
.annotate 'line', 1501
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3671
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5005
  fallback3671:
.annotate 'line', 1503
    nqp_get_sc_object $P5009, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Op"]
    unless_null $P5006, fallback3672
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5006, $P5010
  fallback3672:
    set $P5011, _lex_param_1[0]
    unless_null $P5011, fallback3673
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5011, $P5012
  fallback3673:
    $P5013 = $P5006."new"($P5011, "where" :named("op"))
.annotate 'line', 1504
    nqp_get_sc_object $P5017, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5016, $P5017, "QAST"
    get_who $P5015, $P5016
    set $P5014, $P5015["Op"]
    unless_null $P5014, fallback3674
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5014, $P5018
  fallback3674:
    set $P5019, _lex_param_1[1]
    unless_null $P5019, fallback3675
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5019, $P5020
  fallback3675:
    $P5021 = $P5014."new"($P5019, "where" :named("op"))
    $P5022 = $P5001."new"($P5013, $P5021, "iseq_i" :named("op"))
    $P5023 = _lex_param_0."as_post"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_355_1349901750.327") :anon :lex :outer("cuid_1_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1509
    .const 'Sub' $P5123 = 'cuid_410_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_413_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_416_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_417_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_420_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_422_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_423_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_424_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_426_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_427_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_432_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_244_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_245_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_246_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_247_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_248_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_249_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_250_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_251_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_252_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_253_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_254_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_255_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_256_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_257_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_258_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_259_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_260_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_261_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_262_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_263_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_264_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_265_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_266_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_267_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_268_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_269_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_270_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_271_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_272_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_273_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_274_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_275_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_276_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_277_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_278_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_279_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_280_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_281_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_282_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_283_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_284_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_285_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_286_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_287_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_288_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_289_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_290_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_291_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_292_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_293_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_294_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_295_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_296_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_297_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_298_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_299_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_300_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_301_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_302_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_303_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_304_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_305_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_306_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_307_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_308_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_309_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_310_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_311_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_312_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_313_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_314_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_315_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_316_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_317_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_318_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_319_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_320_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_321_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_322_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_323_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_324_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_325_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_326_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_327_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_328_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_329_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_330_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_331_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_332_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_333_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_334_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_335_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_336_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_337_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_338_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_339_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_340_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_341_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_342_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_343_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_344_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_345_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_346_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_347_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_348_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_349_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_350_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_351_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_352_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_353_1349901750.327' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_354_1349901750.327' 
    capture_lex $P5123 
    .lex "&xblock_immediate", $P101 
    .lex "&block_immediate", $P102 
    .lex "&default_for", $P103 
    .lex "&default_value_for_prim", $P104 
    .lex "&colonpair_str", $P105 
    .lex "&import_HOW_exports", $P106 
    .lex "&set_block_handler", $P107 
    .lex "&only_star_block", $P108 
    .lex "&attach_multi_signature", $P109 
    .lex "&wrap_return_handler", $P110 
    .lex "&lexical_package_lookup", $P111 
    .lex "$?PACKAGE", $P112 
    .lex "$?CLASS", $P113 
    .const 'Sub' $P5001 = 'cuid_410_1349901750.327' 
    capture_lex $P5001
    set $P101, $P5001
    .const 'Sub' $P5002 = 'cuid_413_1349901750.327' 
    capture_lex $P5002
    set $P102, $P5002
    .const 'Sub' $P5003 = 'cuid_416_1349901750.327' 
    capture_lex $P5003
    set $P103, $P5003
    .const 'Sub' $P5004 = 'cuid_417_1349901750.327' 
    capture_lex $P5004
    set $P104, $P5004
    .const 'Sub' $P5005 = 'cuid_420_1349901750.327' 
    capture_lex $P5005
    set $P105, $P5005
    .const 'Sub' $P5006 = 'cuid_422_1349901750.327' 
    capture_lex $P5006
    set $P106, $P5006
    .const 'Sub' $P5007 = 'cuid_423_1349901750.327' 
    capture_lex $P5007
    set $P107, $P5007
    .const 'Sub' $P5008 = 'cuid_424_1349901750.327' 
    capture_lex $P5008
    set $P108, $P5008
    .const 'Sub' $P5009 = 'cuid_426_1349901750.327' 
    capture_lex $P5009
    set $P109, $P5009
    .const 'Sub' $P5010 = 'cuid_427_1349901750.327' 
    capture_lex $P5010
    set $P110, $P5010
    .const 'Sub' $P5011 = 'cuid_432_1349901750.327' 
    capture_lex $P5011
    set $P111, $P5011
    .const 'Sub' $P5012 = 'cuid_244_1349901750.327' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_245_1349901750.327' 
    capture_lex $P5013
    .const 'Sub' $P5014 = 'cuid_246_1349901750.327' 
    capture_lex $P5014
    .const 'Sub' $P5015 = 'cuid_247_1349901750.327' 
    capture_lex $P5015
    .const 'Sub' $P5016 = 'cuid_248_1349901750.327' 
    capture_lex $P5016
    .const 'Sub' $P5017 = 'cuid_249_1349901750.327' 
    capture_lex $P5017
    .const 'Sub' $P5018 = 'cuid_250_1349901750.327' 
    capture_lex $P5018
    .const 'Sub' $P5019 = 'cuid_251_1349901750.327' 
    capture_lex $P5019
    .const 'Sub' $P5020 = 'cuid_252_1349901750.327' 
    capture_lex $P5020
    .const 'Sub' $P5021 = 'cuid_253_1349901750.327' 
    capture_lex $P5021
    .const 'Sub' $P5022 = 'cuid_254_1349901750.327' 
    capture_lex $P5022
    .const 'Sub' $P5023 = 'cuid_255_1349901750.327' 
    capture_lex $P5023
    .const 'Sub' $P5024 = 'cuid_256_1349901750.327' 
    capture_lex $P5024
    .const 'Sub' $P5025 = 'cuid_257_1349901750.327' 
    capture_lex $P5025
    .const 'Sub' $P5026 = 'cuid_258_1349901750.327' 
    capture_lex $P5026
    .const 'Sub' $P5027 = 'cuid_259_1349901750.327' 
    capture_lex $P5027
    .const 'Sub' $P5028 = 'cuid_260_1349901750.327' 
    capture_lex $P5028
    .const 'Sub' $P5029 = 'cuid_261_1349901750.327' 
    capture_lex $P5029
    .const 'Sub' $P5030 = 'cuid_262_1349901750.327' 
    capture_lex $P5030
    .const 'Sub' $P5031 = 'cuid_263_1349901750.327' 
    capture_lex $P5031
    .const 'Sub' $P5032 = 'cuid_264_1349901750.327' 
    capture_lex $P5032
    .const 'Sub' $P5033 = 'cuid_265_1349901750.327' 
    capture_lex $P5033
    .const 'Sub' $P5034 = 'cuid_266_1349901750.327' 
    capture_lex $P5034
    .const 'Sub' $P5035 = 'cuid_267_1349901750.327' 
    capture_lex $P5035
    .const 'Sub' $P5036 = 'cuid_268_1349901750.327' 
    capture_lex $P5036
    .const 'Sub' $P5037 = 'cuid_269_1349901750.327' 
    capture_lex $P5037
    .const 'Sub' $P5038 = 'cuid_270_1349901750.327' 
    capture_lex $P5038
    .const 'Sub' $P5039 = 'cuid_271_1349901750.327' 
    capture_lex $P5039
    .const 'Sub' $P5040 = 'cuid_272_1349901750.327' 
    capture_lex $P5040
    .const 'Sub' $P5041 = 'cuid_273_1349901750.327' 
    capture_lex $P5041
    .const 'Sub' $P5042 = 'cuid_274_1349901750.327' 
    capture_lex $P5042
    .const 'Sub' $P5043 = 'cuid_275_1349901750.327' 
    capture_lex $P5043
    .const 'Sub' $P5044 = 'cuid_276_1349901750.327' 
    capture_lex $P5044
    .const 'Sub' $P5045 = 'cuid_277_1349901750.327' 
    capture_lex $P5045
    .const 'Sub' $P5046 = 'cuid_278_1349901750.327' 
    capture_lex $P5046
    .const 'Sub' $P5047 = 'cuid_279_1349901750.327' 
    capture_lex $P5047
    .const 'Sub' $P5048 = 'cuid_280_1349901750.327' 
    capture_lex $P5048
    .const 'Sub' $P5049 = 'cuid_281_1349901750.327' 
    capture_lex $P5049
    .const 'Sub' $P5050 = 'cuid_282_1349901750.327' 
    capture_lex $P5050
    .const 'Sub' $P5051 = 'cuid_283_1349901750.327' 
    capture_lex $P5051
    .const 'Sub' $P5052 = 'cuid_284_1349901750.327' 
    capture_lex $P5052
    .const 'Sub' $P5053 = 'cuid_285_1349901750.327' 
    capture_lex $P5053
    .const 'Sub' $P5054 = 'cuid_286_1349901750.327' 
    capture_lex $P5054
    .const 'Sub' $P5055 = 'cuid_287_1349901750.327' 
    capture_lex $P5055
    .const 'Sub' $P5056 = 'cuid_288_1349901750.327' 
    capture_lex $P5056
    .const 'Sub' $P5057 = 'cuid_289_1349901750.327' 
    capture_lex $P5057
    .const 'Sub' $P5058 = 'cuid_290_1349901750.327' 
    capture_lex $P5058
    .const 'Sub' $P5059 = 'cuid_291_1349901750.327' 
    capture_lex $P5059
    .const 'Sub' $P5060 = 'cuid_292_1349901750.327' 
    capture_lex $P5060
    .const 'Sub' $P5061 = 'cuid_293_1349901750.327' 
    capture_lex $P5061
    .const 'Sub' $P5062 = 'cuid_294_1349901750.327' 
    capture_lex $P5062
    .const 'Sub' $P5063 = 'cuid_295_1349901750.327' 
    capture_lex $P5063
    .const 'Sub' $P5064 = 'cuid_296_1349901750.327' 
    capture_lex $P5064
    .const 'Sub' $P5065 = 'cuid_297_1349901750.327' 
    capture_lex $P5065
    .const 'Sub' $P5066 = 'cuid_298_1349901750.327' 
    capture_lex $P5066
    .const 'Sub' $P5067 = 'cuid_299_1349901750.327' 
    capture_lex $P5067
    .const 'Sub' $P5068 = 'cuid_300_1349901750.327' 
    capture_lex $P5068
    .const 'Sub' $P5069 = 'cuid_301_1349901750.327' 
    capture_lex $P5069
    .const 'Sub' $P5070 = 'cuid_302_1349901750.327' 
    capture_lex $P5070
    .const 'Sub' $P5071 = 'cuid_303_1349901750.327' 
    capture_lex $P5071
    .const 'Sub' $P5072 = 'cuid_304_1349901750.327' 
    capture_lex $P5072
    .const 'Sub' $P5073 = 'cuid_305_1349901750.327' 
    capture_lex $P5073
    .const 'Sub' $P5074 = 'cuid_306_1349901750.327' 
    capture_lex $P5074
    .const 'Sub' $P5075 = 'cuid_307_1349901750.327' 
    capture_lex $P5075
    .const 'Sub' $P5076 = 'cuid_308_1349901750.327' 
    capture_lex $P5076
    .const 'Sub' $P5077 = 'cuid_309_1349901750.327' 
    capture_lex $P5077
    .const 'Sub' $P5078 = 'cuid_310_1349901750.327' 
    capture_lex $P5078
    .const 'Sub' $P5079 = 'cuid_311_1349901750.327' 
    capture_lex $P5079
    .const 'Sub' $P5080 = 'cuid_312_1349901750.327' 
    capture_lex $P5080
    .const 'Sub' $P5081 = 'cuid_313_1349901750.327' 
    capture_lex $P5081
    .const 'Sub' $P5082 = 'cuid_314_1349901750.327' 
    capture_lex $P5082
    .const 'Sub' $P5083 = 'cuid_315_1349901750.327' 
    capture_lex $P5083
    .const 'Sub' $P5084 = 'cuid_316_1349901750.327' 
    capture_lex $P5084
    .const 'Sub' $P5085 = 'cuid_317_1349901750.327' 
    capture_lex $P5085
    .const 'Sub' $P5086 = 'cuid_318_1349901750.327' 
    capture_lex $P5086
    .const 'Sub' $P5087 = 'cuid_319_1349901750.327' 
    capture_lex $P5087
    .const 'Sub' $P5088 = 'cuid_320_1349901750.327' 
    capture_lex $P5088
    .const 'Sub' $P5089 = 'cuid_321_1349901750.327' 
    capture_lex $P5089
    .const 'Sub' $P5090 = 'cuid_322_1349901750.327' 
    capture_lex $P5090
    .const 'Sub' $P5091 = 'cuid_323_1349901750.327' 
    capture_lex $P5091
    .const 'Sub' $P5092 = 'cuid_324_1349901750.327' 
    capture_lex $P5092
    .const 'Sub' $P5093 = 'cuid_325_1349901750.327' 
    capture_lex $P5093
    .const 'Sub' $P5094 = 'cuid_326_1349901750.327' 
    capture_lex $P5094
    .const 'Sub' $P5095 = 'cuid_327_1349901750.327' 
    capture_lex $P5095
    .const 'Sub' $P5096 = 'cuid_328_1349901750.327' 
    capture_lex $P5096
    .const 'Sub' $P5097 = 'cuid_329_1349901750.327' 
    capture_lex $P5097
    .const 'Sub' $P5098 = 'cuid_330_1349901750.327' 
    capture_lex $P5098
    .const 'Sub' $P5099 = 'cuid_331_1349901750.327' 
    capture_lex $P5099
    .const 'Sub' $P5100 = 'cuid_332_1349901750.327' 
    capture_lex $P5100
    .const 'Sub' $P5101 = 'cuid_333_1349901750.327' 
    capture_lex $P5101
    .const 'Sub' $P5102 = 'cuid_334_1349901750.327' 
    capture_lex $P5102
    .const 'Sub' $P5103 = 'cuid_335_1349901750.327' 
    capture_lex $P5103
    .const 'Sub' $P5104 = 'cuid_336_1349901750.327' 
    capture_lex $P5104
    .const 'Sub' $P5105 = 'cuid_337_1349901750.327' 
    capture_lex $P5105
    .const 'Sub' $P5106 = 'cuid_338_1349901750.327' 
    capture_lex $P5106
    .const 'Sub' $P5107 = 'cuid_339_1349901750.327' 
    capture_lex $P5107
    .const 'Sub' $P5108 = 'cuid_340_1349901750.327' 
    capture_lex $P5108
    .const 'Sub' $P5109 = 'cuid_341_1349901750.327' 
    capture_lex $P5109
    .const 'Sub' $P5110 = 'cuid_342_1349901750.327' 
    capture_lex $P5110
    .const 'Sub' $P5111 = 'cuid_343_1349901750.327' 
    capture_lex $P5111
    .const 'Sub' $P5112 = 'cuid_344_1349901750.327' 
    capture_lex $P5112
    .const 'Sub' $P5113 = 'cuid_345_1349901750.327' 
    capture_lex $P5113
    .const 'Sub' $P5114 = 'cuid_346_1349901750.327' 
    capture_lex $P5114
    .const 'Sub' $P5115 = 'cuid_347_1349901750.327' 
    capture_lex $P5115
    .const 'Sub' $P5116 = 'cuid_348_1349901750.327' 
    capture_lex $P5116
    .const 'Sub' $P5117 = 'cuid_349_1349901750.327' 
    capture_lex $P5117
    .const 'Sub' $P5118 = 'cuid_350_1349901750.327' 
    capture_lex $P5118
    .const 'Sub' $P5119 = 'cuid_351_1349901750.327' 
    capture_lex $P5119
    .const 'Sub' $P5120 = 'cuid_352_1349901750.327' 
    capture_lex $P5120
    .const 'Sub' $P5121 = 'cuid_353_1349901750.327' 
    capture_lex $P5121
    .const 'Sub' $P5122 = 'cuid_354_1349901750.327' 
    capture_lex $P5122
    .return ($P111) 
.end
.HLL "nqp"
.namespace []
.sub "xblock_immediate" :subid("cuid_410_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1510
    .param pmc _lex_param_0 
    .lex "$xblock", _lex_param_0 
.annotate 'line', 1511
    set $P5001, _lex_param_0[1]
    unless_null $P5001, fallback3676
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5002
  fallback3676:
    $P5003 = "&block_immediate"($P5001)
    set _lex_param_0[1], $P5003
    .return (_lex_param_0) 
.end
.HLL "nqp"
.namespace []
.sub "block_immediate" :subid("cuid_413_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1515
    .param pmc _lex_param_0 
    .const 'Sub' $P5006 = 'cuid_412_1349901750.327' 
    capture_lex $P5006 
    .lex "$block", _lex_param_0 
.annotate 'line', 1516
    $P5001 = _lex_param_0."blocktype"("immediate")
.annotate 'line', 1517
    $P5002 = _lex_param_0."symtable"()
    set $P5005, $P5002
    if $P5002 goto unless1277_end3678 
    .const 'Sub' $P5003 = 'cuid_412_1349901750.327' 
    capture_lex $P5003
    $P5004 = $P5003()
    set $P5005, $P5004
  unless1277_end3678:
    .return (_lex_param_0) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_412_1349901750.327") :anon :lex :outer("cuid_413_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1517
    .const 'Sub' $P5017 = 'cuid_411_1349901750.327' 
    capture_lex $P5017 
    .lex "$stmts", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
.annotate 'line', 1518
    nqp_get_sc_object $P5005, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Stmts"]
    unless_null $P5002, fallback3679
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5006
  fallback3679:
    find_lex $P5007, "$block"
    $P5008 = $P5007."node"()
    $P5009 = $P5002."new"($P5008 :named("node"))
    set $P101, $P5009
.annotate 'line', 1519
    find_lex $P5013, "$block"
    $P5014 = $P5013."list"()
    set $P5010, $P5014
    iter $P5012, $P5014
  for_next3680:
    unless $P5012, for_done3682
    shift $P5016, $P5012
  for_redo3681:
    .const 'Sub' $P5015 = 'cuid_411_1349901750.327' 
    capture_lex $P5015
    $P5010 = $P5015($P5016)
    goto for_next3680
  for_done3682:
    store_lex "$block", $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_411_1349901750.327") :anon :lex :outer("cuid_412_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1519
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$stmts"
    $P5002 = $P5001."push"(_lex_param_0)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "default_for" :subid("cuid_416_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1525
    .param pmc _lex_param_0 
    .const 'Sub' $P5017 = 'cuid_415_1349901750.327' 
    capture_lex $P5017 
    .lex "$sigil", _lex_param_0 
    set $S5001, _lex_param_0
    iseq $I5001, $S5001, "@"
    unless $I5001 goto if1278_else3683 
.annotate 'line', 1526
.annotate 'line', 1527
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3685
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5005
  fallback3685:
    $P5006 = $P5001."new"("list" :named("op"))
    set $P5016, $P5006
    goto if1278_end3684
  if1278_else3683:
    set $S5002, _lex_param_0
    iseq $I5002, $S5002, "%"
    unless $I5002 goto if1279_else3686 
.annotate 'line', 1529
.annotate 'line', 1530
    nqp_get_sc_object $P5010, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Op"]
    unless_null $P5007, fallback3688
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5007, $P5011
  fallback3688:
    $P5012 = $P5007."new"("hash" :named("op"))
    set $P5015, $P5012
    goto if1279_end3687
  if1279_else3686:
    .const 'Sub' $P5013 = 'cuid_415_1349901750.327' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5015, $P5014
  if1279_end3687:
    set $P5016, $P5015
  if1278_end3684:
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_415_1349901750.327") :anon :lex :outer("cuid_416_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1532
    .const 'Sub' $P5022 = 'cuid_414_1349901750.327' 
    capture_lex $P5022 
    .lex "$default", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    new $P5020, 'ExceptionHandler'
    set_label $P5020, catch_handler_12843697
    $P5020.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5020
.annotate 'line', 1534
    new $P5018, 'ExceptionHandler'
    set_label $P5018, catch_handler_12823694
    $P5018.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5018
.annotate 'line', 1535
    nqp_get_sc_object $P5005, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["WVal"]
    unless_null $P5002, fallback3689
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5006
  fallback3689:
    find_dynamic_lex $P5007, "$*W"
    unless_null $P5007, fallback3690
    nqp_get_sc_object $P5010, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5009, $P5010
    set $P5008, $P5009["$W"]
    unless_null $P5008, fallback3691
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5008, $P5011
  fallback3691:
    unless_null $P5008, vivi_12803692
    die "Contextual $*W not found"
    box $P5012, "Contextual $*W not found"
    set $P5008, $P5012
  vivi_12803692:
    set $P5007, $P5008
  fallback3690:
    new $P5013, 'ResizablePMCArray'
    box $P5014, "NQPMu"
    push $P5013, $P5014
    $P5015 = $P5007."find_sym"($P5013)
    $P5016 = $P5002."new"($P5015 :named("value"))
    set $P101, $P5016
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5019, $P5017
    pop_eh 
    goto skip_handler_12813693
  catch_handler_12823694:
    .get_results ($P5018) 
    .const 'Sub' $P10001 = 'cuid_414_1349901750.327' 
    capture_lex $P10001
    $P10002 = $P10001($P5018)
    set $I10001, 1
    set $P5018["handled"], $I10001
    nqp_get_sc_object $P10003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    finalize $P5018
    pop_upto_eh $P5018
    pop_eh 
    set $P5019, $P10003
    goto skip_handler_12813693
  skip_handler_12813693:
    set $P5021, $P5019
    pop_eh 
    goto skip_handler_12833696
  catch_handler_12843697:
    .get_results ($P5020) 
    set $I10001, 1
    set $P5020["handled"], $I10001
    nqp_get_sc_object $P10001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    finalize $P5020
    pop_upto_eh $P5020
    pop_eh 
    set $P5021, $P10001
    goto skip_handler_12833696
  skip_handler_12833696:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_414_1349901750.327") :anon :lex :outer("cuid_415_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1536
    .param pmc _lex_param_0 
    .lex "$!", $P101 
    .lex "$_", _lex_param_0 
    set $P101, _lex_param_0
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3695
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5005
  fallback3695:
    $P5006 = $P5001."new"("null" :named("op"))
    store_lex "$default", $P5006
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "default_value_for_prim" :subid("cuid_417_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1542
    .param pmc _lex_param_0 
    .lex "$prim", _lex_param_0 
    set $N5001, _lex_param_0
    set $N5002, 1
    iseq $I5001, $N5001, $N5002
    unless $I5001 goto if1285_else3698 
.annotate 'line', 1543
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["IVal"]
    unless_null $P5001, fallback3700
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5005
  fallback3700:
    $P5006 = $P5001."new"(0 :named("value"))
    set $P5020, $P5006
    goto if1285_end3699
  if1285_else3698:
    set $N5003, _lex_param_0
    set $N5004, 2
    iseq $I5002, $N5003, $N5004
    unless $I5002 goto if1286_else3701 
.annotate 'line', 1544
    nqp_get_sc_object $P5010, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["NVal"]
    unless_null $P5007, fallback3703
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5007, $P5011
  fallback3703:
    $P5012 = $P5007."new"(0.0 :named("value"))
    set $P5019, $P5012
    goto if1286_end3702
  if1286_else3701:
.annotate 'line', 1545
    nqp_get_sc_object $P5016, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["SVal"]
    unless_null $P5013, fallback3704
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5013, $P5017
  fallback3704:
    $P5018 = $P5013."new"("" :named("value"))
    set $P5019, $P5018
  if1286_end3702:
    set $P5020, $P5019
  if1285_end3699:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "colonpair_str" :subid("cuid_420_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1558
    .param pmc _lex_param_0 
    .const 'Sub' $P5010 = 'cuid_419_1349901750.327' 
    capture_lex $P5010 
    .lex "$ast", _lex_param_0 
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3707
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5005
  fallback3707:
    type_check $I5001, _lex_param_0, $P5001
    unless $I5001 goto if1287_else3705 
    .const 'Sub' $P5006 = 'cuid_419_1349901750.327' 
    capture_lex $P5006
    $P5007 = $P5006()
    set $P5009, $P5007
    goto if1287_end3706
  if1287_else3705:
.annotate 'line', 1563
.annotate 'line', 1564
    $P5008 = _lex_param_0."value"()
    set $P5009, $P5008
  if1287_end3706:
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_419_1349901750.327") :anon :lex :outer("cuid_420_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1559
    .const 'Sub' $P5009 = 'cuid_418_1349901750.327' 
    capture_lex $P5009 
    .lex "@parts", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
.annotate 'line', 1561
    find_lex $P5005, "$ast"
    $P5006 = $P5005."list"()
    set $P5002, $P5006
    iter $P5004, $P5006
  for_next3708:
    unless $P5004, for_done3710
    shift $P5008, $P5004
  for_redo3709:
    .const 'Sub' $P5007 = 'cuid_418_1349901750.327' 
    capture_lex $P5007
    $P5002 = $P5007($P5008)
    goto for_next3708
  for_done3710:
    join $S5001, " ", $P101
    .return ($S5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_418_1349901750.327") :anon :lex :outer("cuid_419_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1561
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "@parts"
    $P5002 = _lex_param_0."value"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "import_HOW_exports" :subid("cuid_422_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1758
    .param pmc _lex_param_0 
    .const 'Sub' $P5011 = 'cuid_421_1349901750.327' 
    capture_lex $P5011 
    .lex "$UNIT", _lex_param_0 
    exists $I5001, _lex_param_0["EXPORTHOW"]
    box $P5010, $I5001
    set $P5009, $P5010
    unless $I5001 goto if1288_end3712 
.annotate 'line', 1760
    set $P5005, _lex_param_0["EXPORTHOW"]
    unless_null $P5005, fallback3713
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5005, $P5006
  fallback3713:
    get_who $P5004, $P5005
    set $P5001, $P5004
    iter $P5003, $P5004
  for_next3717:
    unless $P5003, for_done3719
    shift $P5008, $P5003
  for_redo3718:
    .const 'Sub' $P5007 = 'cuid_421_1349901750.327' 
    capture_lex $P5007
    $P5001 = $P5007($P5008)
    goto for_next3717
  for_done3719:
    set $P5009, $P5001
  if1288_end3712:
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_421_1349901750.327") :anon :lex :outer("cuid_422_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1761
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_dynamic_lex $P5001, "%*HOW"
    unless_null $P5001, fallback3714
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%HOW"]
    unless_null $P5002, fallback3715
    nqp_get_sc_object $P5006, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%HOW"], $P5007
    set $P5002, $P5007
  fallback3715:
    unless_null $P5002, vivi_12893716
    die "Contextual %*HOW not found"
    box $P5008, "Contextual %*HOW not found"
    set $P5002, $P5008
  vivi_12893716:
    set $P5001, $P5002
  fallback3714:
.annotate 'line', 1762
    $P5009 = _lex_param_0."key"()
    set $S5001, $P5009
    $P5010 = _lex_param_0."value"()
    set $P5001[$S5001], $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "set_block_handler" :subid("cuid_423_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1860
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$/", _lex_param_0 
    .lex "$block", _lex_param_1 
    .lex "$type", _lex_param_2 
    find_dynamic_lex $P5001, "%*HANDLERS"
    unless_null $P5001, fallback3722
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%HANDLERS"]
    unless_null $P5002, fallback3723
    nqp_get_sc_object $P5006, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%HANDLERS"], $P5007
    set $P5002, $P5007
  fallback3723:
    unless_null $P5002, vivi_12913724
    die "Contextual %*HANDLERS not found"
    box $P5008, "Contextual %*HANDLERS not found"
    set $P5002, $P5008
  vivi_12913724:
    set $P5001, $P5002
  fallback3722:
    set $S5001, _lex_param_2
    exists $I5001, $P5001[$S5001]
    box $P5011, $I5001
    set $P5010, $P5011
    unless $I5001 goto if1290_end3721 
.annotate 'line', 1861
    set $S5004, _lex_param_2
    concat $S5003, "Duplicate ", $S5004
    concat $S5002, $S5003, " handler in block"
    box $P5009, $S5002
    die $P5009
    set $P5010, $P5009
  if1290_end3721:
.annotate 'line', 1864
    $P5012 = _lex_param_1."arity"()
    set $P5042, $P5012
    if $P5012 goto unless1292_end3726 
.annotate 'line', 1865
.annotate 'line', 1866
    nqp_get_sc_object $P5016, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["Op"]
    unless_null $P5013, fallback3727
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5013, $P5017
  fallback3727:
.annotate 'line', 1867
    nqp_get_sc_object $P5021, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5020, $P5021, "QAST"
    get_who $P5019, $P5020
    set $P5018, $P5019["Var"]
    unless_null $P5018, fallback3728
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5018, $P5022
  fallback3728:
    $P5023 = $P5018."new"("lexical" :named("scope"), "$!" :named("name"), "var" :named("decl"))
.annotate 'line', 1868
    nqp_get_sc_object $P5027, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["Var"]
    unless_null $P5024, fallback3729
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5024, $P5028
  fallback3729:
    $P5029 = $P5024."new"("lexical" :named("scope"), "$_" :named("name"))
    $P5030 = $P5013."new"($P5023, $P5029, "bind" :named("op"))
    $P5031 = _lex_param_1."unshift"($P5030)
.annotate 'line', 1871
    nqp_get_sc_object $P5035, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5034, $P5035, "QAST"
    get_who $P5033, $P5034
    set $P5032, $P5033["Var"]
    unless_null $P5032, fallback3730
    nqp_get_sc_object $P5036, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5032, $P5036
  fallback3730:
    $P5037 = $P5032."new"("$_" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5038 = _lex_param_1."unshift"($P5037)
.annotate 'line', 1872
    $P5039 = _lex_param_1."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1873
    $P5040 = _lex_param_1."symbol"("$!", "lexical" :named("scope"))
.annotate 'line', 1874
    $P5041 = _lex_param_1."arity"(1)
    set $P5042, $P5041
  unless1292_end3726:
.annotate 'line', 1876
    $P5043 = _lex_param_1."blocktype"("declaration")
    find_dynamic_lex $P5044, "%*HANDLERS"
    unless_null $P5044, fallback3731
    nqp_get_sc_object $P5047, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5046, $P5047
    set $P5045, $P5046["%HANDLERS"]
    unless_null $P5045, fallback3732
    nqp_get_sc_object $P5049, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5048, $P5049
    new $P5050, 'Hash'
    set $P5048["%HANDLERS"], $P5050
    set $P5045, $P5050
  fallback3732:
    unless_null $P5045, vivi_12933733
    die "Contextual %*HANDLERS not found"
    box $P5051, "Contextual %*HANDLERS not found"
    set $P5045, $P5051
  vivi_12933733:
    set $P5044, $P5045
  fallback3731:
    set $S5005, _lex_param_2
.annotate 'line', 1877
    nqp_get_sc_object $P5055, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5054, $P5055, "QAST"
    get_who $P5053, $P5054
    set $P5052, $P5053["Stmts"]
    unless_null $P5052, fallback3734
    nqp_get_sc_object $P5056, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5052, $P5056
  fallback3734:
.annotate 'line', 1878
    nqp_get_sc_object $P5060, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5059, $P5060, "QAST"
    get_who $P5058, $P5059
    set $P5057, $P5058["Op"]
    unless_null $P5057, fallback3735
    nqp_get_sc_object $P5061, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5057, $P5061
  fallback3735:
.annotate 'line', 1880
    nqp_get_sc_object $P5065, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5064, $P5065, "QAST"
    get_who $P5063, $P5064
    set $P5062, $P5063["Op"]
    unless_null $P5062, fallback3736
    nqp_get_sc_object $P5066, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5062, $P5066
  fallback3736:
    $P5067 = $P5062."new"("exception" :named("op"))
    $P5068 = $P5057."new"(_lex_param_1, $P5067, "call" :named("op"))
.annotate 'line', 1882
    nqp_get_sc_object $P5072, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5071, $P5072, "QAST"
    get_who $P5070, $P5071
    set $P5069, $P5070["Op"]
    unless_null $P5069, fallback3737
    nqp_get_sc_object $P5073, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5069, $P5073
  fallback3737:
.annotate 'line', 1884
    nqp_get_sc_object $P5077, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5076, $P5077, "QAST"
    get_who $P5075, $P5076
    set $P5074, $P5075["Op"]
    unless_null $P5074, fallback3738
    nqp_get_sc_object $P5078, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5074, $P5078
  fallback3738:
    $P5079 = $P5074."new"("exception" :named("op"))
.annotate 'line', 1885
    nqp_get_sc_object $P5083, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5082, $P5083, "QAST"
    get_who $P5081, $P5082
    set $P5080, $P5081["SVal"]
    unless_null $P5080, fallback3739
    nqp_get_sc_object $P5084, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5080, $P5084
  fallback3739:
    $P5085 = $P5080."new"("handled" :named("value"))
.annotate 'line', 1886
    nqp_get_sc_object $P5089, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5088, $P5089, "QAST"
    get_who $P5087, $P5088
    set $P5086, $P5087["IVal"]
    unless_null $P5086, fallback3740
    nqp_get_sc_object $P5090, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5086, $P5090
  fallback3740:
    $P5091 = $P5086."new"(1 :named("value"))
    $P5092 = $P5069."new"($P5079, $P5085, $P5091, "bindkey_i" :named("op"))
.annotate 'line', 1888
    $P5093 = "&default_for"("$")
    $P5094 = $P5052."new"($P5068, $P5092, $P5093)
    set $P5044[$S5005], $P5094
    .return ($P5094) 
.end
.HLL "nqp"
.namespace []
.sub "only_star_block" :subid("cuid_424_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2453
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
.annotate 'line', 2454
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback3741
    nqp_get_sc_object $P5005, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback3742
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5003, $P5006
  fallback3742:
    unless_null $P5003, vivi_12943743
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_12943743:
    set $P5002, $P5003
  fallback3741:
    $P5008 = $P5002."pop_lexpad"()
    set $P101, $P5008
.annotate 'line', 2455
    nqp_get_sc_object $P5012, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["Op"]
    unless_null $P5009, fallback3744
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5009, $P5013
  fallback3744:
    $P5014 = $P5009."new"("nqpmultidispatch" :named("op"))
    $P5015 = $P101."push"($P5014)
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "attach_multi_signature" :subid("cuid_426_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2459
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5020 = 'cuid_425_1349901750.327' 
    capture_lex $P5020 
    .lex "$types", $P101 
    .lex "$definednesses", $P102 
    .lex "$code_obj", _lex_param_0 
    .lex "$routine", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
    new $P5003, 'ResizablePMCArray'
    set $P101, $P5003
    new $P5004, 'ResizablePMCArray'
    set $P102, $P5004
    set $P5008, _lex_param_1[0]
    unless_null $P5008, fallback3745
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5008, $P5009
  fallback3745:
    $P5010 = $P5008."list"()
    set $P5005, $P5010
    iter $P5007, $P5010
  for_next3761:
    unless $P5007, for_done3763
    shift $P5012, $P5007
  for_redo3762:
    .const 'Sub' $P5011 = 'cuid_425_1349901750.327' 
    capture_lex $P5011
    $P5005 = $P5011($P5012)
    goto for_next3761
  for_done3763:
.annotate 'line', 2471
    find_dynamic_lex $P5013, "$*W"
    unless_null $P5013, fallback3764
    nqp_get_sc_object $P5016, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$W"]
    unless_null $P5014, fallback3765
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5014, $P5017
  fallback3765:
    unless_null $P5014, vivi_13013766
    die "Contextual $*W not found"
    box $P5018, "Contextual $*W not found"
    set $P5014, $P5018
  vivi_13013766:
    set $P5013, $P5014
  fallback3764:
    $P5019 = $P5013."set_routine_signature"(_lex_param_0, $P101, $P102)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_425_1349901750.327") :anon :lex :outer("cuid_426_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2462
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Var"]
    unless_null $P5001, fallback3752
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5005
  fallback3752:
    type_check $I5001, _lex_param_0, $P5001
    set $I5003, $I5001
    unless $I5001 goto if1297_end3751 
.annotate 'line', 2463
    $P5006 = _lex_param_0."decl"()
    set $S5001, $P5006
    iseq $I5002, $S5001, "param"
    set $I5003, $I5002
  if1297_end3751:
    set $I5005, $I5003
    unless $I5003 goto if1296_end3749 
    $P5007 = _lex_param_0."named"()
    isfalse $I5004, $P5007
    set $I5005, $I5004
  if1296_end3749:
    box $P5022, $I5005
    set $P5021, $P5022
    unless $I5005 goto if1295_end3747 
.annotate 'line', 2464
    find_lex $P5008, "$types"
    $P5009 = _lex_param_0."returns"()
    get_id $I5007, $P5009
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    get_id $I5008, $P5010
    iseq $I5006, $I5007, $I5008
    unless $I5006 goto if1298_else3753 
    null $P5011
    set $P5013, $P5011
    goto if1298_end3754
  if1298_else3753:
.annotate 'line', 2466
    $P5012 = _lex_param_0."returns"()
    set $P5013, $P5012
  if1298_end3754:
    $P5014 = $P5008."push"($P5013)
.annotate 'line', 2467
    find_lex $P5015, "$definednesses"
    set $P5016, _lex_param_0["definedness"]
    unless_null $P5016, fallback3757
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5016, $P5017
  fallback3757:
    set $S5002, $P5016
    iseq $I5009, $S5002, "D"
    unless $I5009 goto if1299_else3755 
    set $I5012, 1
    goto if1299_end3756
  if1299_else3755:
    set $P5018, _lex_param_0["definedness"]
    unless_null $P5018, fallback3760
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5018, $P5019
  fallback3760:
    set $S5003, $P5018
    iseq $I5010, $S5003, "U"
    unless $I5010 goto if1300_else3758 
    set $I5011, 2
    goto if1300_end3759
  if1300_else3758:
    set $I5011, 0
  if1300_end3759:
    set $I5012, $I5011
  if1299_end3756:
    $P5020 = $P5015."push"($I5012)
    set $P5021, $P5020
  if1295_end3747:
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "wrap_return_handler" :subid("cuid_427_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2474
    .param pmc _lex_param_0 
    .lex "$past", _lex_param_0 
.annotate 'line', 2475
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3767
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5005
  fallback3767:
    $P5006 = $P5001."new"(_lex_param_0, "lexotic" :named("op"), "RETURN" :named("name"))
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "lexical_package_lookup" :subid("cuid_432_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2931
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5076 = 'cuid_430_1349901750.327' 
    capture_lex $P5076 
    .lex "$final_name", $P101 
    .lex "$lookup", $P102 
    .lex "@name", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
    root_new $P103, ['parrot';'Continuation']
    set_label $P103, lexotic_3768
    .lex "RETURN", $P103
    set $N5001, _lex_param_0
    set $N5002, 0
    iseq $I5001, $N5001, $N5002
    box $P5006, $I5001
    set $P5005, $P5006
    unless $I5001 goto if1302_end3771 
.annotate 'line', 2933
    $P5003 = _lex_param_1."CURSOR"()
    $P5004 = $P5003."panic"("Cannot compile empty name")
    set $P5005, $P5004
  if1302_end3771:
.annotate 'line', 2937
    $P5007 = _lex_param_0."pop"()
    set $P101, $P5007
.annotate 'line', 2938
    nqp_get_sc_object $P5011, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5010, $P5011, "QAST"
    get_who $P5009, $P5010
    set $P5008, $P5009["VarWithFallback"]
    unless_null $P5008, fallback3772
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5008, $P5012
  fallback3772:
.annotate 'line', 2940
    nqp_get_sc_object $P5016, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["SVal"]
    unless_null $P5013, fallback3773
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5013, $P5017
  fallback3773:
    set $S5001, $P101
    $P5018 = $P5013."new"($S5001 :named("value"))
    $P5019 = $P5008."new"($P5018, "associative" :named("scope"))
    set $P102, $P5019
    set $N5003, _lex_param_0
    set $N5004, 0
    iseq $I5002, $N5003, $N5004
    unless $I5002 goto if1303_else3774 
.annotate 'line', 2945
.annotate 'line', 2946
    nqp_get_sc_object $P5023, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback3776
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5020, $P5024
  fallback3776:
.annotate 'line', 2948
    nqp_get_sc_object $P5028, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["Var"]
    unless_null $P5025, fallback3777
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5025, $P5029
  fallback3777:
    $P5030 = $P5025."new"("$?PACKAGE" :named("name"), "lexical" :named("scope"))
    $P5031 = $P5020."new"($P5030, "who" :named("op"))
    $P5032 = $P102."unshift"($P5031)
.annotate 'line', 2950
    nqp_get_sc_object $P5036, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5035, $P5036, "QAST"
    get_who $P5034, $P5035
    set $P5033, $P5034["Op"]
    unless_null $P5033, fallback3778
    nqp_get_sc_object $P5037, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5033, $P5037
  fallback3778:
.annotate 'line', 2952
    nqp_get_sc_object $P5041, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5040, $P5041, "QAST"
    get_who $P5039, $P5040
    set $P5038, $P5039["Op"]
    unless_null $P5038, fallback3779
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5038, $P5042
  fallback3779:
.annotate 'line', 2954
    nqp_get_sc_object $P5046, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5045, $P5046, "QAST"
    get_who $P5044, $P5045
    set $P5043, $P5044["Op"]
    unless_null $P5043, fallback3780
    nqp_get_sc_object $P5047, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5043, $P5047
  fallback3780:
.annotate 'line', 2956
    nqp_get_sc_object $P5051, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["WVal"]
    unless_null $P5048, fallback3781
    nqp_get_sc_object $P5052, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5048, $P5052
  fallback3781:
    find_dynamic_lex $P5053, "$*GLOBALish"
    unless_null $P5053, fallback3782
    nqp_get_sc_object $P5056, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5055, $P5056
    set $P5054, $P5055["$GLOBALish"]
    unless_null $P5054, fallback3783
    nqp_get_sc_object $P5057, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5054, $P5057
  fallback3783:
    unless_null $P5054, vivi_13043784
    die "Contextual $*GLOBALish not found"
    box $P5058, "Contextual $*GLOBALish not found"
    set $P5054, $P5058
  vivi_13043784:
    set $P5053, $P5054
  fallback3782:
    $P5059 = $P5048."new"($P5053 :named("value"))
    $P5060 = $P5043."new"($P5059, "who" :named("op"))
.annotate 'line', 2958
    nqp_get_sc_object $P5064, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5063, $P5064, "QAST"
    get_who $P5062, $P5063
    set $P5061, $P5062["SVal"]
    unless_null $P5061, fallback3785
    nqp_get_sc_object $P5065, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5061, $P5065
  fallback3785:
    set $S5002, $P101
    $P5066 = $P5061."new"($S5002 :named("value"))
    $P5067 = $P5038."new"($P5060, $P5066, "atkey" :named("op"))
.annotate 'line', 2960
    set $S5004, $P101
    substr $S5003, $S5004, 0, 1
    $P5068 = "&default_for"($S5003)
    $P5069 = $P5033."new"($P5067, $P5068, "ifnull" :named("op"))
    $P5070 = $P102."fallback"($P5069)
    set $P5073, $P5070
    goto if1303_end3775
  if1303_else3774:
    .const 'Sub' $P5071 = 'cuid_430_1349901750.327' 
    capture_lex $P5071
    $P5072 = $P5071()
    set $P5073, $P5072
  if1303_end3775:
    find_lex $P5074, "RETURN"
    $P5075 = $P5074($P102)
    goto lexotic_3769
  lexotic_3768:
    .get_results ($P5075)
  lexotic_3769:
    .return ($P5075) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_430_1349901750.327") :anon :lex :outer("cuid_432_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2966
    .const 'Sub' $P5070 = 'cuid_429_1349901750.327' 
    capture_lex $P5070 
    .const 'Sub' $P5070 = 'cuid_431_1349901750.327' 
    capture_lex $P5070 
    .lex "$path", $P101 
    .lex "$sigil", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
.annotate 'line', 2968
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback3788
    nqp_get_sc_object $P5006, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback3789
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5004, $P5007
  fallback3789:
    unless_null $P5004, vivi_13063790
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_13063790:
    set $P5003, $P5004
  fallback3788:
    find_lex $P5010, "@name"
    set $P5009, $P5010[0]
    unless_null $P5009, fallback3791
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5009, $P5011
  fallback3791:
    $P5012 = $P5003."is_lexical"($P5009)
    unless $P5012 goto if1305_else3786 
    .const 'Sub' $P5013 = 'cuid_429_1349901750.327' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5027, $P5014
    goto if1305_end3787
  if1305_else3786:
.annotate 'line', 2977
.annotate 'line', 2978
    nqp_get_sc_object $P5018, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["WVal"]
    unless_null $P5015, fallback3799
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5015, $P5019
  fallback3799:
    find_dynamic_lex $P5020, "$*GLOBALish"
    unless_null $P5020, fallback3800
    nqp_get_sc_object $P5023, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5022, $P5023
    set $P5021, $P5022["$GLOBALish"]
    unless_null $P5021, fallback3801
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5021, $P5024
  fallback3801:
    unless_null $P5021, vivi_13103802
    die "Contextual $*GLOBALish not found"
    box $P5025, "Contextual $*GLOBALish not found"
    set $P5021, $P5025
  vivi_13103802:
    set $P5020, $P5021
  fallback3800:
    $P5026 = $P5015."new"($P5020 :named("value"))
    set $P101, $P5026
    set $P5027, $P101
  if1305_end3787:
    find_lex $P5029, "@name"
    set $P5028, $P5029[0]
    unless_null $P5028, fallback3805
    nqp_get_sc_object $P5030, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5028, $P5030
  fallback3805:
    set $S5001, $P5028
    iseq $I5001, $S5001, "GLOBAL"
    box $P5034, $I5001
    set $P5033, $P5034
    unless $I5001 goto if1311_end3804 
.annotate 'line', 2980
.annotate 'line', 2981
    find_lex $P5031, "@name"
    $P5032 = $P5031."shift"()
    set $P5033, $P5032
  if1311_end3804:
    find_lex $P5038, "@name"
    set $P5035, $P5038
    iter $P5037, $P5038
  for_next3808:
    unless $P5037, for_done3810
    shift $P5040, $P5037
  for_redo3809:
    .const 'Sub' $P5039 = 'cuid_431_1349901750.327' 
    capture_lex $P5039
    $P5035 = $P5039($P5040)
    goto for_next3808
  for_done3810:
.annotate 'line', 2988
    find_lex $P5041, "$lookup"
    nqp_get_sc_object $P5045, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["Op"]
    unless_null $P5042, fallback3811
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5042, $P5046
  fallback3811:
    $P5047 = $P5042."new"($P101, "who" :named("op"))
    $P5048 = $P5041."unshift"($P5047)
    find_lex $P5049, "$final_name"
    set $S5003, $P5049
    substr $S5002, $S5003, 0, 1
    box $P5050, $S5002
    set $P102, $P5050
    set $S5004, $P102
    iseq $I5002, $S5004, "@"
    set $I5004, $I5002
    if $I5002 goto unless1313_end3815 
    set $S5005, $P102
    iseq $I5003, $S5005, "%"
    set $I5004, $I5003
  unless1313_end3815:
    unless $I5004 goto if1312_else3812 
.annotate 'line', 2990
.annotate 'line', 2991
    find_lex $P5051, "$lookup"
    nqp_get_sc_object $P5055, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5054, $P5055, "QAST"
    get_who $P5053, $P5054
    set $P5052, $P5053["Op"]
    unless_null $P5052, fallback3816
    nqp_get_sc_object $P5056, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5052, $P5056
  fallback3816:
    find_lex $P5058, "$lookup"
    set $P5057, $P5058[0]
    unless_null $P5057, fallback3817
    nqp_get_sc_object $P5059, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5057, $P5059
  fallback3817:
    find_lex $P5061, "$lookup"
    set $P5060, $P5061[1]
    unless_null $P5060, fallback3818
    nqp_get_sc_object $P5062, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5060, $P5062
  fallback3818:
.annotate 'line', 2995
    $P5063 = "&default_for"($P102)
    $P5064 = $P5052."new"($P5057, $P5060, $P5063, "bindkey" :named("op"))
    $P5065 = $P5051."fallback"($P5064)
    set $P5069, $P5065
    goto if1312_end3813
  if1312_else3812:
.annotate 'line', 2998
.annotate 'line', 2999
    find_lex $P5066, "$lookup"
    $P5067 = "&default_for"($P102)
    $P5068 = $P5066."fallback"($P5067)
    set $P5069, $P5068
  if1312_end3813:
    .return ($P5069) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_429_1349901750.327") :anon :lex :outer("cuid_430_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2969
    .const 'Sub' $P5021 = 'cuid_428_1349901750.327' 
    capture_lex $P5021 
    .lex "$first", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    new $P5019, 'ExceptionHandler'
    set_label $P5019, catch_handler_13093797
    $P5019.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5019
.annotate 'line', 2970
    find_lex $P5002, "@name"
    $P5003 = $P5002."shift"()
    set $P101, $P5003
.annotate 'line', 2971
    nqp_get_sc_object $P5007, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["WVal"]
    unless_null $P5004, fallback3792
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5004, $P5008
  fallback3792:
    find_dynamic_lex $P5009, "$*W"
    unless_null $P5009, fallback3793
    nqp_get_sc_object $P5012, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5011, $P5012
    set $P5010, $P5011["$W"]
    unless_null $P5010, fallback3794
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5010, $P5013
  fallback3794:
    unless_null $P5010, vivi_13073795
    die "Contextual $*W not found"
    box $P5014, "Contextual $*W not found"
    set $P5010, $P5014
  vivi_13073795:
    set $P5009, $P5010
  fallback3793:
    new $P5015, 'ResizablePMCArray'
    push $P5015, $P101
    $P5016 = $P5009."find_sym"($P5015)
    $P5017 = $P5004."new"($P5016 :named("value"))
    store_lex "$path", $P5017
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5020, $P5018
    pop_eh 
    goto skip_handler_13083796
  catch_handler_13093797:
    .get_results ($P5019) 
    .const 'Sub' $P10001 = 'cuid_428_1349901750.327' 
    capture_lex $P10001
    $P10002 = $P10001($P5019)
    set $I10001, 1
    set $P5019["handled"], $I10001
    nqp_get_sc_object $P10003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    finalize $P5019
    pop_upto_eh $P5019
    pop_eh 
    set $P5020, $P10003
    goto skip_handler_13083796
  skip_handler_13083796:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_428_1349901750.327") :anon :lex :outer("cuid_429_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2972
    .param pmc _lex_param_0 
    .lex "$!", $P101 
    .lex "$_", _lex_param_0 
    set $P101, _lex_param_0
.annotate 'line', 2973
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Var"]
    unless_null $P5001, fallback3798
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5005
  fallback3798:
    find_lex $P5006, "$first"
    $P5007 = $P5001."new"($P5006 :named("name"), "lexical" :named("scope"))
    store_lex "$path", $P5007
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_431_1349901750.327") :anon :lex :outer("cuid_430_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2983
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 2984
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VM"]
    unless_null $P5001, fallback3806
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5005
  fallback3806:
    find_lex $P5006, "$path"
.annotate 'line', 2986
    nqp_get_sc_object $P5010, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["SVal"]
    unless_null $P5007, fallback3807
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5007, $P5011
  fallback3807:
    set $S5001, _lex_param_0
    $P5012 = $P5007."new"($S5001 :named("value"))
    $P5013 = $P5001."new"($P5006, $P5012, "nqp_get_package_through_who PPs" :named("pirop"))
    store_lex "$path", $P5013
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "TOP" :subid("cuid_244_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1548
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback3819
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback3819:
    set $P5001, _lex_param_1["comp_unit"]
    unless_null $P5001, fallback3820
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback3820:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "deflongname" :subid("cuid_245_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1550
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1551
    unless_null _lex_param_1, fallback3823
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback3823:
    set $P5001, _lex_param_1["colonpair"]
    unless_null $P5001, fallback3824
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback3824:
    unless $P5001 goto if1314_else3821 
    unless_null _lex_param_1, fallback3825
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5005
  fallback3825:
    set $P5004, _lex_param_1["identifier"]
    unless_null $P5004, fallback3826
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5004, $P5006
  fallback3826:
    set $S5006, $P5004
    concat $S5005, $S5006, ":"
.annotate 'line', 1552
    unless_null _lex_param_1, fallback3827
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5009
  fallback3827:
    set $P5008, _lex_param_1["colonpair"]
    unless_null $P5008, fallback3828
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5008, $P5010
  fallback3828:
    set $P5007, $P5008[0]
    unless_null $P5007, fallback3829
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5007, $P5011
  fallback3829:
    $P5012 = $P5007."ast"()
    $P5013 = $P5012."named"()
    set $S5007, $P5013
    concat $S5004, $S5005, $S5007
    concat $S5003, $S5004, "<"
.annotate 'line', 1553
    unless_null _lex_param_1, fallback3830
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5016
  fallback3830:
    set $P5015, _lex_param_1["colonpair"]
    unless_null $P5015, fallback3831
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5015, $P5017
  fallback3831:
    set $P5014, $P5015[0]
    unless_null $P5014, fallback3832
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5014, $P5018
  fallback3832:
    $P5019 = $P5014."ast"()
    $P5020 = "&colonpair_str"($P5019)
    set $S5008, $P5020
    concat $S5002, $S5003, $S5008
    concat $S5001, $S5002, ">"
    set $S5010, $S5001
    goto if1314_end3822
  if1314_else3821:
    set $S5009, _lex_param_1
    set $S5010, $S5009
  if1314_end3822:
    $P5021 = _lex_param_1."!make"($S5010)
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "comp_unit" :subid("cuid_246_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1568
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$mainline", $P101 
    .lex "$unit", $P102 
    .lex "$main_tasks", $P103 
    .lex "$compunit", $P104 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P104, $P5004
.annotate 'line', 1569
    unless_null _lex_param_1, fallback3833
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5006
  fallback3833:
    set $P5005, _lex_param_1["statementlist"]
    unless_null $P5005, fallback3834
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5005, $P5007
  fallback3834:
    $P5008 = $P5005."ast"()
    set $P101, $P5008
.annotate 'line', 1570
    find_dynamic_lex $P5009, "$*W"
    unless_null $P5009, fallback3835
    nqp_get_sc_object $P5012, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5011, $P5012
    set $P5010, $P5011["$W"]
    unless_null $P5010, fallback3836
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5010, $P5013
  fallback3836:
    unless_null $P5010, vivi_13153837
    die "Contextual $*W not found"
    box $P5014, "Contextual $*W not found"
    set $P5010, $P5014
  vivi_13153837:
    set $P5009, $P5010
  fallback3835:
    $P5015 = $P5009."pop_lexpad"()
    set $P102, $P5015
    find_dynamic_lex $P5016, "$*HAS_YOU_ARE_HERE"
    unless_null $P5016, fallback3840
    nqp_get_sc_object $P5019, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5018, $P5019
    set $P5017, $P5018["$HAS_YOU_ARE_HERE"]
    unless_null $P5017, fallback3841
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5017, $P5020
  fallback3841:
    unless_null $P5017, vivi_13173842
    die "Contextual $*HAS_YOU_ARE_HERE not found"
    box $P5021, "Contextual $*HAS_YOU_ARE_HERE not found"
    set $P5017, $P5021
  vivi_13173842:
    set $P5016, $P5017
  fallback3840:
    set $P5025, $P5016
    if $P5016 goto unless1316_end3839 
.annotate 'line', 1575
.annotate 'line', 1576
    nqp_decontainerize $P5022, _lex_param_0
    $P5023 = $P5022."CTXSAVE"()
    $P5024 = $P102."push"($P5023)
    set $P5025, $P5024
  unless1316_end3839:
.annotate 'line', 1583
    nqp_get_sc_object $P5029, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Var"]
    unless_null $P5026, fallback3843
    nqp_get_sc_object $P5030, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5026, $P5030
  fallback3843:
    $P5031 = $P5026."new"("lexical" :named("scope"), "@ARGS" :named("name"), "param" :named("decl"), 1 :named("slurpy"))
    $P5032 = $P102."unshift"($P5031)
.annotate 'line', 1584
    nqp_get_sc_object $P5036, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5035, $P5036, "QAST"
    get_who $P5034, $P5035
    set $P5033, $P5034["Stmts"]
    unless_null $P5033, fallback3844
    nqp_get_sc_object $P5037, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5033, $P5037
  fallback3844:
.annotate 'line', 1585
    nqp_get_sc_object $P5041, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5040, $P5041, "QAST"
    get_who $P5039, $P5040
    set $P5038, $P5039["VM"]
    unless_null $P5038, fallback3845
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5038, $P5042
  fallback3845:
.annotate 'line', 1587
    nqp_get_sc_object $P5046, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5045, $P5046, "QAST"
    get_who $P5044, $P5045
    set $P5043, $P5044["SVal"]
    unless_null $P5043, fallback3846
    nqp_get_sc_object $P5047, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5043, $P5047
  fallback3846:
    $P5048 = $P5043."new"("ModuleLoader.pbc" :named("value"))
    $P5049 = $P5038."new"($P5048, "load_bytecode vs" :named("pirop"))
.annotate 'line', 1589
    nqp_get_sc_object $P5053, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5052, $P5053, "QAST"
    get_who $P5051, $P5052
    set $P5050, $P5051["Op"]
    unless_null $P5050, fallback3847
    nqp_get_sc_object $P5054, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5050, $P5054
  fallback3847:
.annotate 'line', 1591
    nqp_get_sc_object $P5058, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5057, $P5058, "QAST"
    get_who $P5056, $P5057
    set $P5055, $P5056["VM"]
    unless_null $P5055, fallback3848
    nqp_get_sc_object $P5059, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5055, $P5059
  fallback3848:
.annotate 'line', 1593
    nqp_get_sc_object $P5063, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5062, $P5063, "QAST"
    get_who $P5061, $P5062
    set $P5060, $P5061["SVal"]
    unless_null $P5060, fallback3849
    nqp_get_sc_object $P5064, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5060, $P5064
  fallback3849:
    $P5065 = $P5060."new"("ModuleLoader" :named("value"))
    $P5066 = $P5055."new"($P5065, "get_hll_global Ps" :named("pirop"))
.annotate 'line', 1595
    nqp_get_sc_object $P5070, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5069, $P5070, "QAST"
    get_who $P5068, $P5069
    set $P5067, $P5068["Op"]
    unless_null $P5067, fallback3850
    nqp_get_sc_object $P5071, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5067, $P5071
  fallback3850:
.annotate 'line', 1597
    nqp_get_sc_object $P5075, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5074, $P5075, "QAST"
    get_who $P5073, $P5074
    set $P5072, $P5073["VM"]
    unless_null $P5072, fallback3851
    nqp_get_sc_object $P5076, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5072, $P5076
  fallback3851:
    $P5077 = $P5072."new"("getinterp P" :named("pirop"))
.annotate 'line', 1598
    nqp_get_sc_object $P5081, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5080, $P5081, "QAST"
    get_who $P5079, $P5080
    set $P5078, $P5079["SVal"]
    unless_null $P5078, fallback3852
    nqp_get_sc_object $P5082, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5078, $P5082
  fallback3852:
    $P5083 = $P5078."new"("context" :named("value"))
    $P5084 = $P5067."new"($P5077, $P5083, "atkey" :named("op"))
    $P5085 = $P5050."new"($P5066, $P5084, "callmethod" :named("op"), "set_mainline_module" :named("name"))
    $P5086 = $P5033."new"($P5049, $P5085)
    set $P103, $P5086
    find_dynamic_lex $P5087, "$*MAIN_SUB"
    unless_null $P5087, fallback3855
    nqp_get_sc_object $P5090, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5089, $P5090
    set $P5088, $P5089["$MAIN_SUB"]
    unless_null $P5088, fallback3856
    nqp_get_sc_object $P5091, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5088, $P5091
  fallback3856:
    unless_null $P5088, vivi_13193857
    die "Contextual $*MAIN_SUB not found"
    box $P5092, "Contextual $*MAIN_SUB not found"
    set $P5088, $P5092
  vivi_13193857:
    set $P5087, $P5088
  fallback3855:
    set $P5118, $P5087
    unless $P5087 goto if1318_end3854 
.annotate 'line', 1602
.annotate 'line', 1603
    nqp_get_sc_object $P5096, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5095, $P5096, "QAST"
    get_who $P5094, $P5095
    set $P5093, $P5094["Op"]
    unless_null $P5093, fallback3858
    nqp_get_sc_object $P5097, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5093, $P5097
  fallback3858:
.annotate 'line', 1604
    nqp_get_sc_object $P5101, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5100, $P5101, "QAST"
    get_who $P5099, $P5100
    set $P5098, $P5099["BVal"]
    unless_null $P5098, fallback3859
    nqp_get_sc_object $P5102, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5098, $P5102
  fallback3859:
    find_dynamic_lex $P5103, "$*MAIN_SUB"
    unless_null $P5103, fallback3860
    nqp_get_sc_object $P5106, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5105, $P5106
    set $P5104, $P5105["$MAIN_SUB"]
    unless_null $P5104, fallback3861
    nqp_get_sc_object $P5107, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5104, $P5107
  fallback3861:
    unless_null $P5104, vivi_13203862
    die "Contextual $*MAIN_SUB not found"
    box $P5108, "Contextual $*MAIN_SUB not found"
    set $P5104, $P5108
  vivi_13203862:
    set $P5103, $P5104
  fallback3860:
    $P5109 = $P5098."new"($P5103 :named("value"))
.annotate 'line', 1605
    nqp_get_sc_object $P5113, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5112, $P5113, "QAST"
    get_who $P5111, $P5112
    set $P5110, $P5111["Var"]
    unless_null $P5110, fallback3863
    nqp_get_sc_object $P5114, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5110, $P5114
  fallback3863:
    $P5115 = $P5110."new"("lexical" :named("scope"), "@ARGS" :named("name"), 1 :named("flat"))
    $P5116 = $P5093."new"($P5109, $P5115, "call" :named("op"))
    $P5117 = $P103."push"($P5116)
    set $P5118, $P5117
  if1318_end3854:
.annotate 'line', 1608
    nqp_get_sc_object $P5122, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5121, $P5122, "QAST"
    get_who $P5120, $P5121
    set $P5119, $P5120["Op"]
    unless_null $P5119, fallback3864
    nqp_get_sc_object $P5123, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5119, $P5123
  fallback3864:
.annotate 'line', 1610
    nqp_get_sc_object $P5127, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5126, $P5127, "QAST"
    get_who $P5125, $P5126
    set $P5124, $P5125["Var"]
    unless_null $P5124, fallback3865
    nqp_get_sc_object $P5128, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5124, $P5128
  fallback3865:
    $P5129 = $P5124."new"("lexical" :named("scope"), "@ARGS" :named("name"))
    $P5130 = $P5119."new"($P5129, $P103, "if" :named("op"))
    $P5131 = $P101."push"($P5130)
.annotate 'line', 1615
    $P5132 = $P102."push"($P101)
.annotate 'line', 1618
    find_dynamic_lex $P5133, "$*W"
    unless_null $P5133, fallback3866
    nqp_get_sc_object $P5136, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5135, $P5136
    set $P5134, $P5135["$W"]
    unless_null $P5134, fallback3867
    nqp_get_sc_object $P5137, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5134, $P5137
  fallback3867:
    unless_null $P5134, vivi_13213868
    die "Contextual $*W not found"
    box $P5138, "Contextual $*W not found"
    set $P5134, $P5138
  vivi_13213868:
    set $P5133, $P5134
  fallback3866:
    $P5139 = $P5133."libs"()
    $P5140 = $P102."push"($P5139)
.annotate 'line', 1621
    nqp_get_sc_object $P5144, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5143, $P5144, "QAST"
    get_who $P5142, $P5143
    set $P5141, $P5142["CompUnit"]
    unless_null $P5141, fallback3869
    nqp_get_sc_object $P5145, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5141, $P5145
  fallback3869:
.annotate 'line', 1625
    find_dynamic_lex $P5146, "$*W"
    unless_null $P5146, fallback3870
    nqp_get_sc_object $P5149, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5148, $P5149
    set $P5147, $P5148["$W"]
    unless_null $P5147, fallback3871
    nqp_get_sc_object $P5150, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5147, $P5150
  fallback3871:
    unless_null $P5147, vivi_13223872
    die "Contextual $*W not found"
    box $P5151, "Contextual $*W not found"
    set $P5147, $P5151
  vivi_13223872:
    set $P5146, $P5147
  fallback3870:
    $P5152 = $P5146."sc"()
.annotate 'line', 1626
    find_dynamic_lex $P5153, "$*W"
    unless_null $P5153, fallback3873
    nqp_get_sc_object $P5156, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5155, $P5156
    set $P5154, $P5155["$W"]
    unless_null $P5154, fallback3874
    nqp_get_sc_object $P5157, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5154, $P5157
  fallback3874:
    unless_null $P5154, vivi_13233875
    die "Contextual $*W not found"
    box $P5158, "Contextual $*W not found"
    set $P5154, $P5158
  vivi_13233875:
    set $P5153, $P5154
  fallback3873:
    $P5159 = $P5153."code_ref_blocks"()
.annotate 'line', 1627
    find_dynamic_lex $P5160, "$*W"
    unless_null $P5160, fallback3876
    nqp_get_sc_object $P5163, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5162, $P5163
    set $P5161, $P5162["$W"]
    unless_null $P5161, fallback3877
    nqp_get_sc_object $P5164, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5161, $P5164
  fallback3877:
    unless_null $P5161, vivi_13243878
    die "Contextual $*W not found"
    box $P5165, "Contextual $*W not found"
    set $P5161, $P5165
  vivi_13243878:
    set $P5160, $P5161
  fallback3876:
    $P5166 = $P5160."is_precompilation_mode"()
.annotate 'line', 1628
    find_dynamic_lex $P5167, "$*W"
    unless_null $P5167, fallback3879
    nqp_get_sc_object $P5170, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5169, $P5170
    set $P5168, $P5169["$W"]
    unless_null $P5168, fallback3880
    nqp_get_sc_object $P5171, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5168, $P5171
  fallback3880:
    unless_null $P5168, vivi_13253881
    die "Contextual $*W not found"
    box $P5172, "Contextual $*W not found"
    set $P5168, $P5172
  vivi_13253881:
    set $P5167, $P5168
  fallback3879:
    $P5173 = $P5167."load_dependency_tasks"()
.annotate 'line', 1629
    find_dynamic_lex $P5174, "$*W"
    unless_null $P5174, fallback3882
    nqp_get_sc_object $P5177, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5176, $P5177
    set $P5175, $P5176["$W"]
    unless_null $P5175, fallback3883
    nqp_get_sc_object $P5178, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5175, $P5178
  fallback3883:
    unless_null $P5175, vivi_13263884
    die "Contextual $*W not found"
    box $P5179, "Contextual $*W not found"
    set $P5175, $P5179
  vivi_13263884:
    set $P5174, $P5175
  fallback3882:
    $P5180 = $P5174."fixup_tasks"()
.annotate 'line', 1634
    nqp_get_sc_object $P5184, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5183, $P5184, "QAST"
    get_who $P5182, $P5183
    set $P5181, $P5182["Op"]
    unless_null $P5181, fallback3885
    nqp_get_sc_object $P5185, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5181, $P5185
  fallback3885:
.annotate 'line', 1636
    nqp_get_sc_object $P5189, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5188, $P5189, "QAST"
    get_who $P5187, $P5188
    set $P5186, $P5187["BVal"]
    unless_null $P5186, fallback3886
    nqp_get_sc_object $P5190, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5186, $P5190
  fallback3886:
    $P5191 = $P5186."new"($P102 :named("value"))
    $P5192 = $P5181."new"($P5191, "call" :named("op"))
    $P5193 = $P5141."new"($P102, "nqp" :named("hll"), $P5152 :named("sc"), $P5159 :named("code_ref_blocks"), $P5166 :named("compilation_mode"), $P5173 :named("pre_deserialize"), $P5180 :named("post_deserialize"), $P5192 :named("load"))
    set $P104, $P5193
.annotate 'line', 1644
    $P5194 = _lex_param_1."!make"($P104)
    .return ($P5194) 
.end
.HLL "nqp"
.namespace []
.sub "statementlist" :subid("cuid_247_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1647
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5023 = 'cuid_433_1349901750.327' 
    capture_lex $P5023 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
.annotate 'line', 1648
    nqp_get_sc_object $P5005, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Stmts"]
    unless_null $P5002, fallback3887
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5006
  fallback3887:
    $P5007 = $P5002."new"(_lex_param_1 :named("node"))
    set $P101, $P5007
    unless_null _lex_param_1, fallback3890
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5009
  fallback3890:
    set $P5008, _lex_param_1["statement"]
    unless_null $P5008, fallback3891
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5008, $P5010
  fallback3891:
    unless $P5008 goto if1327_else3888 
.annotate 'line', 1649
    unless_null _lex_param_1, fallback3892
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5015
  fallback3892:
    set $P5014, _lex_param_1["statement"]
    unless_null $P5014, fallback3893
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5014, $P5016
  fallback3893:
    set $P5011, $P5014
    iter $P5013, $P5014
  for_next3906:
    unless $P5013, for_done3908
    shift $P5018, $P5013
  for_redo3907:
    .const 'Sub' $P5017 = 'cuid_433_1349901750.327' 
    capture_lex $P5017
    $P5011 = $P5017($P5018)
    goto for_next3906
  for_done3908:
    set $P5021, $P5011
    goto if1327_end3889
  if1327_else3888:
.annotate 'line', 1658
.annotate 'line', 1659
    $P5019 = "&default_for"("$")
    $P5020 = $P101."push"($P5019)
    set $P5021, $P5020
  if1327_end3889:
.annotate 'line', 1661
    $P5022 = _lex_param_1."!make"($P101)
    .return ($P5022) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_433_1349901750.327") :anon :lex :outer("cuid_247_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1650
    .param pmc _lex_param_0 
    .lex "$ast", $P101 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
.annotate 'line', 1651
    $P5002 = _lex_param_0."ast"()
    set $P101, $P5002
    set $P5003, $P101["sink"]
    unless_null $P5003, fallback3896
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5003, $P5004
  fallback3896:
    defined $I5001, $P5003
    box $P5008, $I5001
    set $P5007, $P5008
    unless $I5001 goto if1328_end3895 
    set $P5005, $P101["sink"]
    unless_null $P5005, fallback3897
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5005, $P5006
  fallback3897:
    set $P101, $P5005
    set $P5007, $P101
  if1328_end3895:
    set $P5009, $P101["bareblock"]
    unless_null $P5009, fallback3900
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5009, $P5010
  fallback3900:
    set $P5014, $P5009
    unless $P5009 goto if1329_end3899 
.annotate 'line', 1653
    set $P5011, $P101[0]
    unless_null $P5011, fallback3901
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5011, $P5012
  fallback3901:
    $P5013 = "&block_immediate"($P5011)
    set $P101, $P5013
    set $P5014, $P101
  if1329_end3899:
    nqp_get_sc_object $P5018, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["Node"]
    unless_null $P5015, fallback3904
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5015, $P5019
  fallback3904:
    type_check $I5002, $P101, $P5015
    box $P5027, $I5002
    set $P5026, $P5027
    unless $I5002 goto if1330_end3903 
.annotate 'line', 1654
    nqp_get_sc_object $P5023, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Stmts"]
    unless_null $P5020, fallback3905
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5020, $P5024
  fallback3905:
    $P5025 = $P5020."new"($P101)
    set $P101, $P5025
    set $P5026, $P101
  if1330_end3903:
.annotate 'line', 1655
    find_lex $P5028, "$past"
    $P5029 = $P5028."push"($P101)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "statement" :subid("cuid_248_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1664
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :optional 
    .param int haz_param_3 :opt_flag 
    .const 'Sub' $P5019 = 'cuid_434_1349901750.327' 
    capture_lex $P5019 
    if haz_param_3, default3945
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_2, $P5018
  default3945:
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .lex "$key", _lex_param_2 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    unless_null _lex_param_1, fallback3911
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5003
  fallback3911:
    set $P5002, _lex_param_1["EXPR"]
    unless_null $P5002, fallback3912
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5004
  fallback3912:
    unless $P5002 goto if1331_else3909 
    .const 'Sub' $P5005 = 'cuid_434_1349901750.327' 
    capture_lex $P5005
    $P5006 = $P5005()
    set $P5016, $P5006
    goto if1331_end3910
  if1331_else3909:
    unless_null _lex_param_1, fallback3941
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5008
  fallback3941:
    set $P5007, _lex_param_1["statement_control"]
    unless_null $P5007, fallback3942
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5007, $P5009
  fallback3942:
    unless $P5007 goto if1335_else3939 
.annotate 'line', 1687
    unless_null _lex_param_1, fallback3943
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5011
  fallback3943:
    set $P5010, _lex_param_1["statement_control"]
    unless_null $P5010, fallback3944
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5010, $P5012
  fallback3944:
    $P5013 = $P5010."ast"()
    set $P101, $P5013
    set $P5015, $P101
    goto if1335_end3940
  if1335_else3939:
.annotate 'line', 1688
    box $P5014, 0
    set $P101, $P5014
    set $P5015, $P101
  if1335_end3940:
    set $P5016, $P5015
  if1331_end3910:
.annotate 'line', 1689
    $P5017 = _lex_param_1."!make"($P101)
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_434_1349901750.327") :anon :lex :outer("cuid_248_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1666
    .lex "$mc", $P101 
    .lex "$ml", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
    find_lex $P5005, "$/"
    unless_null $P5005, fallback3913
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5005, $P5006
  fallback3913:
    set $P5004, $P5005["statement_mod_cond"]
    unless_null $P5004, fallback3914
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5004, $P5007
  fallback3914:
    set $P5003, $P5004[0]
    unless_null $P5003, fallback3915
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5003, $P5008
  fallback3915:
    set $P101, $P5003
    find_lex $P5011, "$/"
    unless_null $P5011, fallback3916
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5011, $P5012
  fallback3916:
    set $P5010, $P5011["statement_mod_loop"]
    unless_null $P5010, fallback3917
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5010, $P5013
  fallback3917:
    set $P5009, $P5010[0]
    unless_null $P5009, fallback3918
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5009, $P5014
  fallback3918:
    set $P102, $P5009
.annotate 'line', 1669
    find_lex $P5016, "$/"
    unless_null $P5016, fallback3919
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5016, $P5017
  fallback3919:
    set $P5015, $P5016["EXPR"]
    unless_null $P5015, fallback3920
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5015, $P5018
  fallback3920:
    $P5019 = $P5015."ast"()
    store_lex "$past", $P5019
    set $P5033, $P101
    unless $P101 goto if1332_end3922 
.annotate 'line', 1670
.annotate 'line', 1671
    nqp_get_sc_object $P5023, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback3923
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5020, $P5024
  fallback3923:
    set $P5025, $P101["cond"]
    unless_null $P5025, fallback3924
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5025, $P5026
  fallback3924:
    $P5027 = $P5025."ast"()
    find_lex $P5028, "$past"
    set $P5029, $P101["sym"]
    unless_null $P5029, fallback3925
    nqp_get_sc_object $P5030, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5029, $P5030
  fallback3925:
    set $S5001, $P5029
    find_lex $P5031, "$/"
    $P5032 = $P5020."new"($P5027, $P5028, $S5001 :named("op"), $P5031 :named("node"))
    store_lex "$past", $P5032
    set $P5033, $P5032
  if1332_end3922:
    set $P5080, $P102
    unless $P102 goto if1333_end3927 
.annotate 'line', 1673
    set $P5034, $P102["sym"]
    unless_null $P5034, fallback3930
    nqp_get_sc_object $P5035, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5034, $P5035
  fallback3930:
    set $S5002, $P5034
    iseq $I5001, $S5002, "for"
    unless $I5001 goto if1334_else3928 
.annotate 'line', 1674
.annotate 'line', 1675
    nqp_get_sc_object $P5039, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Block"]
    unless_null $P5036, fallback3931
    nqp_get_sc_object $P5040, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5036, $P5040
  fallback3931:
.annotate 'line', 1676
    nqp_get_sc_object $P5044, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["Var"]
    unless_null $P5041, fallback3932
    nqp_get_sc_object $P5045, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5041, $P5045
  fallback3932:
    $P5046 = $P5041."new"("$_" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    find_lex $P5047, "$past"
    $P5048 = $P5036."new"($P5046, $P5047, "immediate" :named("blocktype"))
    store_lex "$past", $P5048
.annotate 'line', 1678
    find_lex $P5049, "$past"
    $P5050 = $P5049."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1679
    find_lex $P5051, "$past"
    $P5052 = $P5051."arity"(1)
.annotate 'line', 1680
    nqp_get_sc_object $P5056, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5055, $P5056, "QAST"
    get_who $P5054, $P5055
    set $P5053, $P5054["Op"]
    unless_null $P5053, fallback3933
    nqp_get_sc_object $P5057, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5053, $P5057
  fallback3933:
    set $P5058, $P102["cond"]
    unless_null $P5058, fallback3934
    nqp_get_sc_object $P5059, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5058, $P5059
  fallback3934:
    $P5060 = $P5058."ast"()
    find_lex $P5061, "$past"
    set $P5062, $P102["sym"]
    unless_null $P5062, fallback3935
    nqp_get_sc_object $P5063, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5062, $P5063
  fallback3935:
    set $S5003, $P5062
    find_lex $P5064, "$/"
    $P5065 = $P5053."new"($P5060, $P5061, $S5003 :named("op"), $P5064 :named("node"))
    store_lex "$past", $P5065
    set $P5079, $P5065
    goto if1334_end3929
  if1334_else3928:
.annotate 'line', 1682
.annotate 'line', 1683
    nqp_get_sc_object $P5069, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5068, $P5069, "QAST"
    get_who $P5067, $P5068
    set $P5066, $P5067["Op"]
    unless_null $P5066, fallback3936
    nqp_get_sc_object $P5070, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5066, $P5070
  fallback3936:
    set $P5071, $P102["cond"]
    unless_null $P5071, fallback3937
    nqp_get_sc_object $P5072, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5071, $P5072
  fallback3937:
    $P5073 = $P5071."ast"()
    find_lex $P5074, "$past"
    set $P5075, $P102["sym"]
    unless_null $P5075, fallback3938
    nqp_get_sc_object $P5076, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5075, $P5076
  fallback3938:
    set $S5004, $P5075
    find_lex $P5077, "$/"
    $P5078 = $P5066."new"($P5073, $P5074, $S5004 :named("op"), $P5077 :named("node"))
    store_lex "$past", $P5078
    set $P5079, $P5078
  if1334_end3929:
    set $P5080, $P5079
  if1333_end3927:
    .return ($P5080) 
.end
.HLL "nqp"
.namespace []
.sub "xblock" :subid("cuid_249_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1692
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1693
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3946
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5005
  fallback3946:
    unless_null _lex_param_1, fallback3947
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5007
  fallback3947:
    set $P5006, _lex_param_1["EXPR"]
    unless_null $P5006, fallback3948
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5006, $P5008
  fallback3948:
    $P5009 = $P5006."ast"()
    unless_null _lex_param_1, fallback3949
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5011
  fallback3949:
    set $P5010, _lex_param_1["pblock"]
    unless_null $P5010, fallback3950
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5010, $P5012
  fallback3950:
    $P5013 = $P5010."ast"()
    $P5014 = $P5001."new"($P5009, $P5013, "if" :named("op"), _lex_param_1 :named("node"))
    $P5015 = _lex_param_1."!make"($P5014)
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "pblock" :subid("cuid_250_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1696
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1697
    unless_null _lex_param_1, fallback3951
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback3951:
    set $P5001, _lex_param_1["blockoid"]
    unless_null $P5001, fallback3952
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback3952:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "block" :subid("cuid_251_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1700
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1701
    unless_null _lex_param_1, fallback3953
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback3953:
    set $P5001, _lex_param_1["blockoid"]
    unless_null $P5001, fallback3954
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback3954:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "blockoid" :subid("cuid_252_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1704
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5030 = 'cuid_436_1349901750.327' 
    capture_lex $P5030 
    .lex "$BLOCK", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
.annotate 'line', 1705
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback3955
    nqp_get_sc_object $P5005, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback3956
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5003, $P5006
  fallback3956:
    unless_null $P5003, vivi_13363957
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_13363957:
    set $P5002, $P5003
  fallback3955:
    $P5008 = $P5002."pop_lexpad"()
    set $P101, $P5008
    unless_null _lex_param_1, fallback3960
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5010
  fallback3960:
    set $P5009, _lex_param_1["statementlist"]
    unless_null $P5009, fallback3961
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5009, $P5011
  fallback3961:
    unless $P5009 goto if1337_else3958 
    .const 'Sub' $P5012 = 'cuid_436_1349901750.327' 
    capture_lex $P5012
    $P5013 = $P5012()
    set $P5029, $P5013
    goto if1337_end3959
  if1337_else3958:
.annotate 'line', 1720
    find_dynamic_lex $P5014, "$*HAS_YOU_ARE_HERE"
    unless_null $P5014, fallback3986
    nqp_get_sc_object $P5017, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5016, $P5017
    set $P5015, $P5016["$HAS_YOU_ARE_HERE"]
    unless_null $P5015, fallback3987
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5015, $P5018
  fallback3987:
    unless_null $P5015, vivi_13453988
    die "Contextual $*HAS_YOU_ARE_HERE not found"
    box $P5019, "Contextual $*HAS_YOU_ARE_HERE not found"
    set $P5015, $P5019
  vivi_13453988:
    set $P5014, $P5015
  fallback3986:
    set $P5022, $P5014
    unless $P5014 goto if1344_end3985 
.annotate 'line', 1721
.annotate 'line', 1722
    $P5020 = _lex_param_1."CURSOR"()
    $P5021 = $P5020."panic"("{YOU_ARE_HERE} may only appear once in a setting")
    set $P5022, $P5021
  if1344_end3985:
    box $P5023, 1
    store_dynamic_lex "$*HAS_YOU_ARE_HERE", $P5023
.annotate 'line', 1725
    unless_null _lex_param_1, fallback3989
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5025
  fallback3989:
    set $P5024, _lex_param_1["you_are_here"]
    unless_null $P5024, fallback3990
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5024, $P5026
  fallback3990:
    $P5027 = $P5024."ast"()
    $P5028 = _lex_param_1."!make"($P5027)
    set $P5029, $P5028
  if1337_end3959:
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_436_1349901750.327") :anon :lex :outer("cuid_252_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1706
    .const 'Sub' $P5061 = 'cuid_435_1349901750.327' 
    capture_lex $P5061 
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
.annotate 'line', 1707
    find_lex $P5003, "$/"
    unless_null $P5003, fallback3962
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5003, $P5004
  fallback3962:
    set $P5002, $P5003["statementlist"]
    unless_null $P5002, fallback3963
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5005
  fallback3963:
    $P5006 = $P5002."ast"()
    set $P101, $P5006
    find_dynamic_lex $P5007, "%*HANDLERS"
    unless_null $P5007, fallback3966
    nqp_get_sc_object $P5010, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5009, $P5010
    set $P5008, $P5009["%HANDLERS"]
    unless_null $P5008, fallback3967
    nqp_get_sc_object $P5012, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5011, $P5012
    new $P5013, 'Hash'
    set $P5011["%HANDLERS"], $P5013
    set $P5008, $P5013
  fallback3967:
    unless_null $P5008, vivi_13393968
    die "Contextual %*HANDLERS not found"
    box $P5014, "Contextual %*HANDLERS not found"
    set $P5008, $P5014
  vivi_13393968:
    set $P5007, $P5008
  fallback3966:
    set $P5034, $P5007
    unless $P5007 goto if1338_end3965 
.annotate 'line', 1708
.annotate 'line', 1709
    nqp_get_sc_object $P5018, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["Op"]
    unless_null $P5015, fallback3969
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5015, $P5019
  fallback3969:
    $P5020 = $P5015."new"($P101, "handle" :named("op"))
    set $P101, $P5020
    find_dynamic_lex $P5024, "%*HANDLERS"
    unless_null $P5024, fallback3970
    nqp_get_sc_object $P5027, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5026, $P5027
    set $P5025, $P5026["%HANDLERS"]
    unless_null $P5025, fallback3971
    nqp_get_sc_object $P5029, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5028, $P5029
    new $P5030, 'Hash'
    set $P5028["%HANDLERS"], $P5030
    set $P5025, $P5030
  fallback3971:
    unless_null $P5025, vivi_13403972
    die "Contextual %*HANDLERS not found"
    box $P5031, "Contextual %*HANDLERS not found"
    set $P5025, $P5031
  vivi_13403972:
    set $P5024, $P5025
  fallback3970:
    set $P5021, $P5024
    iter $P5023, $P5024
  for_next3973:
    unless $P5023, for_done3975
    shift $P5033, $P5023
  for_redo3974:
    .const 'Sub' $P5032 = 'cuid_435_1349901750.327' 
    capture_lex $P5032
    $P5021 = $P5032($P5033)
    goto for_next3973
  for_done3975:
    set $P5034, $P5021
  if1338_end3965:
.annotate 'line', 1715
    find_lex $P5035, "$BLOCK"
    $P5036 = $P5035."push"($P101)
.annotate 'line', 1716
    find_lex $P5037, "$BLOCK"
    find_lex $P5038, "$/"
    $P5039 = $P5037."node"($P5038)
    find_dynamic_lex $P5040, "%*HANDLERS"
    unless_null $P5040, fallback3978
    nqp_get_sc_object $P5043, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5042, $P5043
    set $P5041, $P5042["%HANDLERS"]
    unless_null $P5041, fallback3979
    nqp_get_sc_object $P5045, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5044, $P5045
    new $P5046, 'Hash'
    set $P5044["%HANDLERS"], $P5046
    set $P5041, $P5046
  fallback3979:
    unless_null $P5041, vivi_13423980
    die "Contextual %*HANDLERS not found"
    box $P5047, "Contextual %*HANDLERS not found"
    set $P5041, $P5047
  vivi_13423980:
    set $P5040, $P5041
  fallback3978:
    set $P5057, $P5040
    unless $P5040 goto if1341_end3977 
    find_lex $P5048, "$BLOCK"
    find_dynamic_lex $P5049, "%*HANDLERS"
    unless_null $P5049, fallback3981
    nqp_get_sc_object $P5052, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5051, $P5052
    set $P5050, $P5051["%HANDLERS"]
    unless_null $P5050, fallback3982
    nqp_get_sc_object $P5054, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5053, $P5054
    new $P5055, 'Hash'
    set $P5053["%HANDLERS"], $P5055
    set $P5050, $P5055
  fallback3982:
    unless_null $P5050, vivi_13433983
    die "Contextual %*HANDLERS not found"
    box $P5056, "Contextual %*HANDLERS not found"
    set $P5050, $P5056
  vivi_13433983:
    set $P5049, $P5050
  fallback3981:
    set $P5048["handlers"], $P5049
    set $P5057, $P5049
  if1341_end3977:
.annotate 'line', 1718
    find_dynamic_lex $P5058, "$/"
    find_lex $P5059, "$BLOCK"
    $P5060 = $P5058."!make"($P5059)
    .return ($P5060) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_435_1349901750.327") :anon :lex :outer("cuid_436_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1710
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 1711
    find_lex $P5001, "$past"
    $P5002 = _lex_param_0."key"()
    $P5003 = $P5001."push"($P5002)
.annotate 'line', 1712
    find_lex $P5004, "$past"
    $P5005 = _lex_param_0."value"()
    $P5006 = $P5004."push"($P5005)
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "newpad" :subid("cuid_253_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1729
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1730
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback3991
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback3992
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5005
  fallback3992:
    unless_null $P5002, vivi_13463993
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_13463993:
    set $P5001, $P5002
  fallback3991:
    $P5007 = $P5001."push_lexpad"(_lex_param_1)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "outerctx" :subid("cuid_254_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1733
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5026 = 'cuid_437_1349901750.327' 
    capture_lex $P5026 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    find_dynamic_lex $P5003, "%*COMPILING"
    unless_null $P5003, fallback3996
    nqp_get_sc_object $P5006, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["%COMPILING"]
    unless_null $P5004, fallback3997
    nqp_get_sc_object $P5008, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5007, $P5008
    new $P5009, 'Hash'
    set $P5007["%COMPILING"], $P5009
    set $P5004, $P5009
  fallback3997:
    unless_null $P5004, vivi_13483998
    die "Contextual %*COMPILING not found"
    box $P5010, "Contextual %*COMPILING not found"
    set $P5004, $P5010
  vivi_13483998:
    set $P5003, $P5004
  fallback3996:
    set $P5002, $P5003["%?OPTIONS"]
    unless_null $P5002, fallback3999
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5011
  fallback3999:
    set $P5001, $P5002["outer_ctx"]
    unless_null $P5001, fallback4000
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5012
  fallback4000:
    defined $I5001, $P5001
    box $P5016, $I5001
    set $P5015, $P5016
    if $I5001 goto unless1347_end3995 
    .const 'Sub' $P5013 = 'cuid_437_1349901750.327' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5015, $P5014
  unless1347_end3995:
.annotate 'line', 1755
    nqp_decontainerize $P5017, _lex_param_0
    find_dynamic_lex $P5018, "$*W"
    unless_null $P5018, fallback4056
    nqp_get_sc_object $P5021, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["$W"]
    unless_null $P5019, fallback4057
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5019, $P5022
  fallback4057:
    unless_null $P5019, vivi_13654058
    die "Contextual $*W not found"
    box $P5023, "Contextual $*W not found"
    set $P5019, $P5023
  vivi_13654058:
    set $P5018, $P5019
  fallback4056:
    $P5024 = $P5018."cur_lexpad"()
    $P5025 = $P5017."SET_BLOCK_OUTER_CTX"($P5024)
    .return ($P5025) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_437_1349901750.327") :anon :lex :outer("cuid_254_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1734
    .lex "$SETTING", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
.annotate 'line', 1737
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback4001
    nqp_get_sc_object $P5005, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback4002
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5003, $P5006
  fallback4002:
    unless_null $P5003, vivi_13494003
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_13494003:
    set $P5002, $P5003
  fallback4001:
    find_dynamic_lex $P5011, "%*COMPILING"
    unless_null $P5011, fallback4005
    nqp_get_sc_object $P5014, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["%COMPILING"]
    unless_null $P5012, fallback4006
    nqp_get_sc_object $P5016, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5015, $P5016
    new $P5017, 'Hash'
    set $P5015["%COMPILING"], $P5017
    set $P5012, $P5017
  fallback4006:
    unless_null $P5012, vivi_13504007
    die "Contextual %*COMPILING not found"
    box $P5018, "Contextual %*COMPILING not found"
    set $P5012, $P5018
  vivi_13504007:
    set $P5011, $P5012
  fallback4005:
    set $P5010, $P5011["%?OPTIONS"]
    unless_null $P5010, fallback4008
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5010, $P5019
  fallback4008:
    set $P5009, $P5010["setting"]
    unless_null $P5009, fallback4009
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5009, $P5020
  fallback4009:
    set $P5008, $P5009
    defined $I5001, $P5008
    if $I5001, defor4004
    box $P5021, "NQPCORE"
    set $P5008, $P5021
  defor4004:
    $P5022 = $P5002."load_setting"($P5008)
    set $P101, $P5022
    find_dynamic_lex $P5025, "%*COMPILING"
    unless_null $P5025, fallback4012
    nqp_get_sc_object $P5028, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5027, $P5028
    set $P5026, $P5027["%COMPILING"]
    unless_null $P5026, fallback4013
    nqp_get_sc_object $P5030, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5029, $P5030
    new $P5031, 'Hash'
    set $P5029["%COMPILING"], $P5031
    set $P5026, $P5031
  fallback4013:
    unless_null $P5026, vivi_13524014
    die "Contextual %*COMPILING not found"
    box $P5032, "Contextual %*COMPILING not found"
    set $P5026, $P5032
  vivi_13524014:
    set $P5025, $P5026
  fallback4012:
    set $P5024, $P5025["%?OPTIONS"]
    unless_null $P5024, fallback4015
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5024, $P5033
  fallback4015:
    set $P5023, $P5024["setting"]
    unless_null $P5023, fallback4016
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5023, $P5034
  fallback4016:
    set $S5001, $P5023
    iseq $I5002, $S5001, "NULL"
    box $P5115, $I5002
    set $P5114, $P5115
    if $I5002 goto unless1351_end4011 
.annotate 'line', 1742
.annotate 'line', 1743
    $P5035 = "&import_HOW_exports"($P101)
    find_dynamic_lex $P5038, "%*COMPILING"
    unless_null $P5038, fallback4019
    nqp_get_sc_object $P5041, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5040, $P5041
    set $P5039, $P5040["%COMPILING"]
    unless_null $P5039, fallback4020
    nqp_get_sc_object $P5043, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5042, $P5043
    new $P5044, 'Hash'
    set $P5042["%COMPILING"], $P5044
    set $P5039, $P5044
  fallback4020:
    unless_null $P5039, vivi_13544021
    die "Contextual %*COMPILING not found"
    box $P5045, "Contextual %*COMPILING not found"
    set $P5039, $P5045
  vivi_13544021:
    set $P5038, $P5039
  fallback4019:
    set $P5037, $P5038["%?OPTIONS"]
    unless_null $P5037, fallback4022
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5037, $P5046
  fallback4022:
    set $P5036, $P5037["old-regex-lib"]
    unless_null $P5036, fallback4023
    nqp_get_sc_object $P5047, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5036, $P5047
  fallback4023:
    set $P5061, $P5036
    unless $P5036 goto if1353_end4018 
.annotate 'line', 1744
.annotate 'line', 1745
    find_dynamic_lex $P5048, "$*W"
    unless_null $P5048, fallback4024
    nqp_get_sc_object $P5051, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5050, $P5051
    set $P5049, $P5050["$W"]
    unless_null $P5049, fallback4025
    nqp_get_sc_object $P5052, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5049, $P5052
  fallback4025:
    unless_null $P5049, vivi_13554026
    die "Contextual $*W not found"
    box $P5053, "Contextual $*W not found"
    set $P5049, $P5053
  vivi_13554026:
    set $P5048, $P5049
  fallback4024:
    find_dynamic_lex $P5054, "$*GLOBALish"
    unless_null $P5054, fallback4027
    nqp_get_sc_object $P5057, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5056, $P5057
    set $P5055, $P5056["$GLOBALish"]
    unless_null $P5055, fallback4028
    nqp_get_sc_object $P5058, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5055, $P5058
  fallback4028:
    unless_null $P5055, vivi_13564029
    die "Contextual $*GLOBALish not found"
    box $P5059, "Contextual $*GLOBALish not found"
    set $P5055, $P5059
  vivi_13564029:
    set $P5054, $P5055
  fallback4027:
    $P5060 = $P5048."load_module"("NQPRegex", $P5054)
    set $P5061, $P5060
  if1353_end4018:
    find_dynamic_lex $P5064, "%*COMPILING"
    unless_null $P5064, fallback4032
    nqp_get_sc_object $P5067, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5066, $P5067
    set $P5065, $P5066["%COMPILING"]
    unless_null $P5065, fallback4033
    nqp_get_sc_object $P5069, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5068, $P5069
    new $P5070, 'Hash'
    set $P5068["%COMPILING"], $P5070
    set $P5065, $P5070
  fallback4033:
    unless_null $P5065, vivi_13584034
    die "Contextual %*COMPILING not found"
    box $P5071, "Contextual %*COMPILING not found"
    set $P5065, $P5071
  vivi_13584034:
    set $P5064, $P5065
  fallback4032:
    set $P5063, $P5064["%?OPTIONS"]
    unless_null $P5063, fallback4035
    nqp_get_sc_object $P5072, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5063, $P5072
  fallback4035:
    set $P5062, $P5063["no-regex-lib"]
    unless_null $P5062, fallback4036
    nqp_get_sc_object $P5073, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5062, $P5073
  fallback4036:
    set $P5113, $P5062
    if $P5062 goto unless1357_end4031 
.annotate 'line', 1747
.annotate 'line', 1748
    find_dynamic_lex $P5074, "$*W"
    unless_null $P5074, fallback4037
    nqp_get_sc_object $P5077, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5076, $P5077
    set $P5075, $P5076["$W"]
    unless_null $P5075, fallback4038
    nqp_get_sc_object $P5078, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5075, $P5078
  fallback4038:
    unless_null $P5075, vivi_13594039
    die "Contextual $*W not found"
    box $P5079, "Contextual $*W not found"
    set $P5075, $P5079
  vivi_13594039:
    set $P5074, $P5075
  fallback4037:
    find_dynamic_lex $P5080, "$*GLOBALish"
    unless_null $P5080, fallback4040
    nqp_get_sc_object $P5083, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5082, $P5083
    set $P5081, $P5082["$GLOBALish"]
    unless_null $P5081, fallback4041
    nqp_get_sc_object $P5084, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5081, $P5084
  fallback4041:
    unless_null $P5081, vivi_13604042
    die "Contextual $*GLOBALish not found"
    box $P5085, "Contextual $*GLOBALish not found"
    set $P5081, $P5085
  vivi_13604042:
    set $P5080, $P5081
  fallback4040:
    $P5086 = $P5074."load_module"("QRegex", $P5080)
    find_dynamic_lex $P5089, "%*COMPILING"
    unless_null $P5089, fallback4045
    nqp_get_sc_object $P5092, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5091, $P5092
    set $P5090, $P5091["%COMPILING"]
    unless_null $P5090, fallback4046
    nqp_get_sc_object $P5094, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5093, $P5094
    new $P5095, 'Hash'
    set $P5093["%COMPILING"], $P5095
    set $P5090, $P5095
  fallback4046:
    unless_null $P5090, vivi_13624047
    die "Contextual %*COMPILING not found"
    box $P5096, "Contextual %*COMPILING not found"
    set $P5090, $P5096
  vivi_13624047:
    set $P5089, $P5090
  fallback4045:
    set $P5088, $P5089["%?OPTIONS"]
    unless_null $P5088, fallback4048
    nqp_get_sc_object $P5097, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5088, $P5097
  fallback4048:
    set $P5087, $P5088["old-regex-lib"]
    unless_null $P5087, fallback4049
    nqp_get_sc_object $P5098, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5087, $P5098
  fallback4049:
    set $P5112, $P5087
    if $P5087 goto unless1361_end4044 
.annotate 'line', 1749
.annotate 'line', 1750
    find_dynamic_lex $P5099, "$*W"
    unless_null $P5099, fallback4050
    nqp_get_sc_object $P5102, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5101, $P5102
    set $P5100, $P5101["$W"]
    unless_null $P5100, fallback4051
    nqp_get_sc_object $P5103, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5100, $P5103
  fallback4051:
    unless_null $P5100, vivi_13634052
    die "Contextual $*W not found"
    box $P5104, "Contextual $*W not found"
    set $P5100, $P5104
  vivi_13634052:
    set $P5099, $P5100
  fallback4050:
    find_dynamic_lex $P5105, "$*GLOBALish"
    unless_null $P5105, fallback4053
    nqp_get_sc_object $P5108, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5107, $P5108
    set $P5106, $P5107["$GLOBALish"]
    unless_null $P5106, fallback4054
    nqp_get_sc_object $P5109, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5106, $P5109
  fallback4054:
    unless_null $P5106, vivi_13644055
    die "Contextual $*GLOBALish not found"
    box $P5110, "Contextual $*GLOBALish not found"
    set $P5106, $P5110
  vivi_13644055:
    set $P5105, $P5106
  fallback4053:
    $P5111 = $P5099."load_module"("NQPP6QRegex", $P5105)
    set $P5112, $P5111
  unless1361_end4044:
    set $P5113, $P5112
  unless1357_end4031:
    set $P5114, $P5113
  unless1351_end4011:
    .return ($P5114) 
.end
.HLL "nqp"
.namespace []
.sub "you_are_here" :subid("cuid_255_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1767
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1768
    nqp_decontainerize $P5001, _lex_param_0
    $P5002 = $P5001."CTXSAVE"()
    $P5003 = _lex_param_1."!make"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<use>" :subid("cuid_256_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1773
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$module", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
.annotate 'line', 1774
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback4059
    nqp_get_sc_object $P5005, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback4060
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5003, $P5006
  fallback4060:
    unless_null $P5003, vivi_13664061
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_13664061:
    set $P5002, $P5003
  fallback4059:
    unless_null _lex_param_1, fallback4062
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5009
  fallback4062:
    set $P5008, _lex_param_1["name"]
    unless_null $P5008, fallback4063
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5008, $P5010
  fallback4063:
    set $S5001, $P5008
    find_dynamic_lex $P5011, "$*GLOBALish"
    unless_null $P5011, fallback4064
    nqp_get_sc_object $P5014, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["$GLOBALish"]
    unless_null $P5012, fallback4065
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5012, $P5015
  fallback4065:
    unless_null $P5012, vivi_13674066
    die "Contextual $*GLOBALish not found"
    box $P5016, "Contextual $*GLOBALish not found"
    set $P5012, $P5016
  vivi_13674066:
    set $P5011, $P5012
  fallback4064:
    $P5017 = $P5002."load_module"($S5001, $P5011)
    set $P101, $P5017
    defined $I5001, $P101
    box $P5038, $I5001
    set $P5037, $P5038
    unless $I5001 goto if1368_end4068 
.annotate 'line', 1775
    exists $I5002, $P101["EXPORT"]
    set $I5004, $I5002
    unless $I5002 goto if1370_end4072 
    set $P5019, $P101["EXPORT"]
    unless_null $P5019, fallback4073
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5019, $P5020
  fallback4073:
    get_who $P5018, $P5019
    exists $I5003, $P5018["DEFAULT"]
    set $I5004, $I5003
  if1370_end4072:
    box $P5035, $I5004
    set $P5034, $P5035
    unless $I5004 goto if1369_end4070 
.annotate 'line', 1776
    find_dynamic_lex $P5021, "$*W"
    unless_null $P5021, fallback4074
    nqp_get_sc_object $P5024, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5023, $P5024
    set $P5022, $P5023["$W"]
    unless_null $P5022, fallback4075
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5022, $P5025
  fallback4075:
    unless_null $P5022, vivi_13714076
    die "Contextual $*W not found"
    box $P5026, "Contextual $*W not found"
    set $P5022, $P5026
  vivi_13714076:
    set $P5021, $P5022
  fallback4074:
    set $P5030, $P101["EXPORT"]
    unless_null $P5030, fallback4077
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5030, $P5031
  fallback4077:
    get_who $P5029, $P5030
    set $P5028, $P5029["DEFAULT"]
    unless_null $P5028, fallback4078
    nqp_get_sc_object $P5032, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5028, $P5032
  fallback4078:
    get_who $P5027, $P5028
    $P5033 = $P5021."import"($P5027)
    set $P5034, $P5033
  if1369_end4070:
.annotate 'line', 1779
    $P5036 = "&import_HOW_exports"($P101)
    set $P5037, $P5036
  if1368_end4068:
.annotate 'line', 1781
    nqp_get_sc_object $P5042, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5041, $P5042, "QAST"
    get_who $P5040, $P5041
    set $P5039, $P5040["Stmts"]
    unless_null $P5039, fallback4079
    nqp_get_sc_object $P5043, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5039, $P5043
  fallback4079:
    $P5044 = $P5039."new"()
    $P5045 = _lex_param_1."!make"($P5044)
    .return ($P5045) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<if>" :subid("cuid_257_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1784
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5031 = 'cuid_438_1349901750.327' 
    capture_lex $P5031 
    .lex "$count", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
    unless_null _lex_param_1, fallback4080
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5004
  fallback4080:
    set $P5003, _lex_param_1["xblock"]
    unless_null $P5003, fallback4081
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5003, $P5005
  fallback4081:
    set $N5002, $P5003
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5006, $N5001
    set $P101, $P5006
.annotate 'line', 1786
    unless_null _lex_param_1, fallback4082
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5009
  fallback4082:
    set $P5008, _lex_param_1["xblock"]
    unless_null $P5008, fallback4083
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5008, $P5010
  fallback4083:
    set $I5001, $P101
    set $P5007, $P5008[$I5001]
    unless_null $P5007, fallback4084
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5007, $P5011
  fallback4084:
    $P5012 = $P5007."ast"()
    $P5013 = "&xblock_immediate"($P5012)
    set $P102, $P5013
    unless_null _lex_param_1, fallback4087
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5015
  fallback4087:
    set $P5014, _lex_param_1["else"]
    unless_null $P5014, fallback4088
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5014, $P5016
  fallback4088:
    set $P5025, $P5014
    unless $P5014 goto if1372_end4086 
.annotate 'line', 1787
.annotate 'line', 1788
    unless_null _lex_param_1, fallback4089
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5019
  fallback4089:
    set $P5018, _lex_param_1["else"]
    unless_null $P5018, fallback4090
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5018, $P5020
  fallback4090:
    set $P5017, $P5018[0]
    unless_null $P5017, fallback4091
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5017, $P5021
  fallback4091:
    $P5022 = $P5017."ast"()
    $P5023 = "&block_immediate"($P5022)
    $P5024 = $P102."push"($P5023)
    set $P5025, $P5024
  if1372_end4086:
  while1373_test4092:
    set $N5004, $P101
    set $N5005, 0
    isgt $I5002, $N5004, $N5005
    box $P5029, $I5002
    set $P5028, $P5029
    unless $I5002 goto while1373_done4096 
  while1373_redo4094:
    .const 'Sub' $P5026 = 'cuid_438_1349901750.327' 
    capture_lex $P5026
    $P5027 = $P5026()
    set $P5028, $P5027
    goto while1373_test4092 
  while1373_done4096:
.annotate 'line', 1797
    $P5030 = _lex_param_1."!make"($P102)
    .return ($P5030) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_438_1349901750.327") :anon :lex :outer("cuid_257_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1791
    .lex "$else", $P101 
    .local pmc tmp_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    find_lex $P5002, "$count"
    set tmp_1, $P5002
    set $N5002, tmp_1
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$count", $P5003
    find_lex $P5002, "$past"
    set $P101, $P5002
.annotate 'line', 1794
    find_lex $P5005, "$/"
    unless_null $P5005, fallback4097
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5005, $P5006
  fallback4097:
    set $P5004, $P5005["xblock"]
    unless_null $P5004, fallback4098
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5004, $P5007
  fallback4098:
    find_lex $P5008, "$count"
    set $I5001, $P5008
    set $P5003, $P5004[$I5001]
    unless_null $P5003, fallback4099
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5003, $P5009
  fallback4099:
    $P5010 = $P5003."ast"()
    $P5011 = "&xblock_immediate"($P5010)
    store_lex "$past", $P5011
.annotate 'line', 1795
    find_lex $P5012, "$past"
    $P5013 = $P5012."push"($P101)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<unless>" :subid("cuid_258_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1800
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
.annotate 'line', 1801
    unless_null _lex_param_1, fallback4100
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5003
  fallback4100:
    set $P5002, _lex_param_1["xblock"]
    unless_null $P5002, fallback4101
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5004
  fallback4101:
    $P5005 = $P5002."ast"()
    $P5006 = "&xblock_immediate"($P5005)
    set $P101, $P5006
.annotate 'line', 1802
    $P5007 = $P101."op"("unless")
.annotate 'line', 1803
    $P5008 = _lex_param_1."!make"($P101)
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<while>" :subid("cuid_259_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1806
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
.annotate 'line', 1807
    unless_null _lex_param_1, fallback4102
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5003
  fallback4102:
    set $P5002, _lex_param_1["xblock"]
    unless_null $P5002, fallback4103
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5004
  fallback4103:
    $P5005 = $P5002."ast"()
    $P5006 = "&xblock_immediate"($P5005)
    set $P101, $P5006
.annotate 'line', 1808
    unless_null _lex_param_1, fallback4104
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5008
  fallback4104:
    set $P5007, _lex_param_1["sym"]
    unless_null $P5007, fallback4105
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5007, $P5009
  fallback4105:
    set $S5001, $P5007
    $P5010 = $P101."op"($S5001)
    find_dynamic_lex $P5011, "$*CONTROL_USED"
    unless_null $P5011, fallback4108
    nqp_get_sc_object $P5014, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["$CONTROL_USED"]
    unless_null $P5012, fallback4109
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5012, $P5015
  fallback4109:
    unless_null $P5012, vivi_13754110
    die "Contextual $*CONTROL_USED not found"
    box $P5016, "Contextual $*CONTROL_USED not found"
    set $P5012, $P5016
  vivi_13754110:
    set $P5011, $P5012
  fallback4108:
    set $P5024, $P5011
    if $P5011 goto unless1374_end4107 
.annotate 'line', 1809
.annotate 'line', 1810
    nqp_get_sc_object $P5020, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["IVal"]
    unless_null $P5017, fallback4111
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5017, $P5021
  fallback4111:
    $P5022 = $P5017."new"(1 :named("value"), "nohandler" :named("named"))
    $P5023 = $P101."push"($P5022)
    set $P5024, $P5023
  unless1374_end4107:
.annotate 'line', 1812
    $P5025 = _lex_param_1."!make"($P101)
    .return ($P5025) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<repeat>" :subid("cuid_260_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1815
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$op", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
    unless_null _lex_param_1, fallback4112
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5004
  fallback4112:
    set $P5003, _lex_param_1["wu"]
    unless_null $P5003, fallback4113
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5003, $P5005
  fallback4113:
    set $S5002, $P5003
    concat $S5001, "repeat_", $S5002
    box $P5006, $S5001
    set $P101, $P5006
    unless_null _lex_param_1, fallback4116
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5008
  fallback4116:
    set $P5007, _lex_param_1["xblock"]
    unless_null $P5007, fallback4117
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5007, $P5009
  fallback4117:
    unless $P5007 goto if1376_else4114 
.annotate 'line', 1818
.annotate 'line', 1819
    unless_null _lex_param_1, fallback4118
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5011
  fallback4118:
    set $P5010, _lex_param_1["xblock"]
    unless_null $P5010, fallback4119
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5010, $P5012
  fallback4119:
    $P5013 = $P5010."ast"()
    $P5014 = "&xblock_immediate"($P5013)
    set $P102, $P5014
.annotate 'line', 1820
    $P5015 = $P102."op"($P101)
    set $P5031, $P5015
    goto if1376_end4115
  if1376_else4114:
.annotate 'line', 1822
.annotate 'line', 1823
    nqp_get_sc_object $P5019, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Op"]
    unless_null $P5016, fallback4120
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5016, $P5020
  fallback4120:
    unless_null _lex_param_1, fallback4121
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5022
  fallback4121:
    set $P5021, _lex_param_1["EXPR"]
    unless_null $P5021, fallback4122
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5021, $P5023
  fallback4122:
    $P5024 = $P5021."ast"()
    unless_null _lex_param_1, fallback4123
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5026
  fallback4123:
    set $P5025, _lex_param_1["pblock"]
    unless_null $P5025, fallback4124
    nqp_get_sc_object $P5027, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5025, $P5027
  fallback4124:
    $P5028 = $P5025."ast"()
    $P5029 = "&block_immediate"($P5028)
    $P5030 = $P5016."new"($P5024, $P5029, $P101 :named("op"), _lex_param_1 :named("node"))
    set $P102, $P5030
    set $P5031, $P102
  if1376_end4115:
    find_dynamic_lex $P5032, "$*CONTROL_USED"
    unless_null $P5032, fallback4127
    nqp_get_sc_object $P5035, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5034, $P5035
    set $P5033, $P5034["$CONTROL_USED"]
    unless_null $P5033, fallback4128
    nqp_get_sc_object $P5036, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5033, $P5036
  fallback4128:
    unless_null $P5033, vivi_13784129
    die "Contextual $*CONTROL_USED not found"
    box $P5037, "Contextual $*CONTROL_USED not found"
    set $P5033, $P5037
  vivi_13784129:
    set $P5032, $P5033
  fallback4127:
    set $P5045, $P5032
    if $P5032 goto unless1377_end4126 
.annotate 'line', 1826
.annotate 'line', 1827
    nqp_get_sc_object $P5041, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5040, $P5041, "QAST"
    get_who $P5039, $P5040
    set $P5038, $P5039["IVal"]
    unless_null $P5038, fallback4130
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5038, $P5042
  fallback4130:
    $P5043 = $P5038."new"(1 :named("value"), "nohandler" :named("named"))
    $P5044 = $P102."push"($P5043)
    set $P5045, $P5044
  unless1377_end4126:
.annotate 'line', 1829
    $P5046 = _lex_param_1."!make"($P102)
    .return ($P5046) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<for>" :subid("cuid_261_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1832
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "$block", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
.annotate 'line', 1833
    unless_null _lex_param_1, fallback4131
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5004
  fallback4131:
    set $P5003, _lex_param_1["xblock"]
    unless_null $P5003, fallback4132
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5003, $P5005
  fallback4132:
    $P5006 = $P5003."ast"()
    set $P101, $P5006
.annotate 'line', 1834
    $P5007 = $P101."op"("for")
    set $P5008, $P101[1]
    unless_null $P5008, fallback4133
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5008, $P5009
  fallback4133:
    set $P102, $P5008
.annotate 'line', 1836
    $P5010 = $P102."arity"()
    set $P5022, $P5010
    if $P5010 goto unless1379_end4135 
.annotate 'line', 1837
    set $P5011, $P102[0]
    unless_null $P5011, fallback4136
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5011, $P5012
  fallback4136:
    nqp_get_sc_object $P5016, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["Var"]
    unless_null $P5013, fallback4137
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5013, $P5017
  fallback4137:
    $P5018 = $P5013."new"("$_" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5019 = $P5011."push"($P5018)
.annotate 'line', 1838
    $P5020 = $P102."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1839
    $P5021 = $P102."arity"(1)
    set $P5022, $P5021
  unless1379_end4135:
.annotate 'line', 1841
    $P5023 = $P102."blocktype"("immediate")
    find_dynamic_lex $P5024, "$*CONTROL_USED"
    unless_null $P5024, fallback4140
    nqp_get_sc_object $P5027, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5026, $P5027
    set $P5025, $P5026["$CONTROL_USED"]
    unless_null $P5025, fallback4141
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5025, $P5028
  fallback4141:
    unless_null $P5025, vivi_13814142
    die "Contextual $*CONTROL_USED not found"
    box $P5029, "Contextual $*CONTROL_USED not found"
    set $P5025, $P5029
  vivi_13814142:
    set $P5024, $P5025
  fallback4140:
    set $P5037, $P5024
    if $P5024 goto unless1380_end4139 
.annotate 'line', 1842
.annotate 'line', 1843
    nqp_get_sc_object $P5033, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["IVal"]
    unless_null $P5030, fallback4143
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5030, $P5034
  fallback4143:
    $P5035 = $P5030."new"(1 :named("value"), "nohandler" :named("named"))
    $P5036 = $P101."push"($P5035)
    set $P5037, $P5036
  unless1380_end4139:
.annotate 'line', 1845
    $P5038 = _lex_param_1."!make"($P101)
    .return ($P5038) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CATCH>" :subid("cuid_262_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1848
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
.annotate 'line', 1849
    unless_null _lex_param_1, fallback4144
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5003
  fallback4144:
    set $P5002, _lex_param_1["block"]
    unless_null $P5002, fallback4145
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5004
  fallback4145:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 1850
    $P5006 = "&set_block_handler"(_lex_param_1, $P101, "CATCH")
.annotate 'line', 1851
    $P5007 = "&default_for"("$")
    $P5008 = _lex_param_1."!make"($P5007)
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CONTROL>" :subid("cuid_263_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1854
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
.annotate 'line', 1855
    unless_null _lex_param_1, fallback4146
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5003
  fallback4146:
    set $P5002, _lex_param_1["block"]
    unless_null $P5002, fallback4147
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5004
  fallback4147:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 1856
    $P5006 = "&set_block_handler"(_lex_param_1, $P101, "CONTROL")
.annotate 'line', 1857
    $P5007 = "&default_for"("$")
    $P5008 = _lex_param_1."!make"($P5007)
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<BEGIN>" :subid("cuid_264_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1891
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1892
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback4148
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback4149
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5005
  fallback4149:
    unless_null $P5002, vivi_13824150
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_13824150:
    set $P5001, $P5002
  fallback4148:
    unless_null _lex_param_1, fallback4151
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5008
  fallback4151:
    set $P5007, _lex_param_1["blorst"]
    unless_null $P5007, fallback4152
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5007, $P5009
  fallback4152:
    $P5010 = $P5007."ast"()
    $P5011 = $P5001."run_begin_block"($P5010)
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<INIT>" :subid("cuid_265_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1895
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1896
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback4153
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback4154
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5005
  fallback4154:
    unless_null $P5002, vivi_13834155
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_13834155:
    set $P5001, $P5002
  fallback4153:
    $P5007 = $P5001."cur_lexpad"()
    unless_null _lex_param_1, fallback4156
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5009
  fallback4156:
    set $P5008, _lex_param_1["blorst"]
    unless_null $P5008, fallback4157
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5008, $P5010
  fallback4157:
    $P5011 = $P5008."ast"()
    $P5012 = $P5007."push"($P5011)
.annotate 'line', 1897
    nqp_get_sc_object $P5016, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["Stmts"]
    unless_null $P5013, fallback4158
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5013, $P5017
  fallback4158:
    $P5018 = $P5013."new"()
    $P5019 = _lex_param_1."!make"($P5018)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<try>" :subid("cuid_266_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1900
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_4159
    .lex "RETURN", $P102
.annotate 'line', 1901
    unless_null _lex_param_1, fallback4161
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5003
  fallback4161:
    set $P5002, _lex_param_1["blorst"]
    unless_null $P5002, fallback4162
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5004
  fallback4162:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
    nqp_get_sc_object $P5009, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Block"]
    unless_null $P5006, fallback4165
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5006, $P5010
  fallback4165:
    type_check $I5001, $P101, $P5006
    box $P5023, $I5001
    set $P5022, $P5023
    unless $I5001 goto if1384_end4164 
.annotate 'line', 1902
    set $P5011, $P101["handlers"]
    unless_null $P5011, fallback4170
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5011, $P5012
  fallback4170:
    set $P5015, $P5011
    unless $P5011 goto if1386_end4169 
    set $P5013, $P101["handlers"]
    unless_null $P5013, fallback4171
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5013, $P5014
  fallback4171:
    exists $I5002, $P5013["CATCH"]
    box $P5016, $I5002
    set $P5015, $P5016
  if1386_end4169:
    unless $P5015 goto if1385_else4166 
.annotate 'line', 1903
.annotate 'line', 1904
    $P5017 = _lex_param_1."!make"($P101)
    find_lex $P5018, "RETURN"
    $P5019 = $P5018(1)
    set $P5021, $P5019
    goto if1385_end4167
  if1385_else4166:
.annotate 'line', 1907
.annotate 'line', 1908
    $P5020 = $P101."blocktype"("immediate")
    set $P5021, $P5020
  if1385_end4167:
    set $P5022, $P5021
  if1384_end4164:
.annotate 'line', 1911
    nqp_get_sc_object $P5027, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["Op"]
    unless_null $P5024, fallback4172
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5024, $P5028
  fallback4172:
.annotate 'line', 1915
    nqp_get_sc_object $P5032, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["Stmts"]
    unless_null $P5029, fallback4173
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5029, $P5033
  fallback4173:
.annotate 'line', 1916
    nqp_get_sc_object $P5037, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set $P5034, $P5035["Op"]
    unless_null $P5034, fallback4174
    nqp_get_sc_object $P5038, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5034, $P5038
  fallback4174:
.annotate 'line', 1918
    nqp_get_sc_object $P5042, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5041, $P5042, "QAST"
    get_who $P5040, $P5041
    set $P5039, $P5040["Op"]
    unless_null $P5039, fallback4175
    nqp_get_sc_object $P5043, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5039, $P5043
  fallback4175:
    $P5044 = $P5039."new"("exception" :named("op"))
.annotate 'line', 1919
    nqp_get_sc_object $P5048, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5047, $P5048, "QAST"
    get_who $P5046, $P5047
    set $P5045, $P5046["SVal"]
    unless_null $P5045, fallback4176
    nqp_get_sc_object $P5049, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5045, $P5049
  fallback4176:
    $P5050 = $P5045."new"("handled" :named("value"))
.annotate 'line', 1920
    nqp_get_sc_object $P5054, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5053, $P5054, "QAST"
    get_who $P5052, $P5053
    set $P5051, $P5052["IVal"]
    unless_null $P5051, fallback4177
    nqp_get_sc_object $P5055, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5051, $P5055
  fallback4177:
    $P5056 = $P5051."new"(1 :named("value"))
    $P5057 = $P5034."new"($P5044, $P5050, $P5056, "bindkey_i" :named("op"))
.annotate 'line', 1922
    $P5058 = "&default_for"("$")
    $P5059 = $P5029."new"($P5057, $P5058)
    $P5060 = $P5024."new"($P101, "CATCH", $P5059, "handle" :named("op"))
    $P5061 = _lex_param_1."!make"($P5060)
    goto lexotic_4160
  lexotic_4159:
    .get_results ($P5061)
  lexotic_4160:
    .return ($P5061) 
.end
.HLL "nqp"
.namespace []
.sub "blorst" :subid("cuid_267_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1926
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1927
    unless_null _lex_param_1, fallback4180
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback4180:
    set $P5001, _lex_param_1["block"]
    unless_null $P5001, fallback4181
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback4181:
    unless $P5001 goto if1387_else4178 
.annotate 'line', 1928
    unless_null _lex_param_1, fallback4182
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5005
  fallback4182:
    set $P5004, _lex_param_1["block"]
    unless_null $P5004, fallback4183
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5004, $P5006
  fallback4183:
    $P5007 = $P5004."ast"()
    $P5008 = "&block_immediate"($P5007)
    set $P5013, $P5008
    goto if1387_end4179
  if1387_else4178:
.annotate 'line', 1929
    unless_null _lex_param_1, fallback4184
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5010
  fallback4184:
    set $P5009, _lex_param_1["statement"]
    unless_null $P5009, fallback4185
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5009, $P5011
  fallback4185:
    $P5012 = $P5009."ast"()
    set $P5013, $P5012
  if1387_end4179:
    $P5014 = _lex_param_1."!make"($P5013)
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<if>" :subid("cuid_268_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1934
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4186
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback4186:
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4187
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback4187:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<unless>" :subid("cuid_269_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1935
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4188
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback4188:
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4189
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback4189:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<while>" :subid("cuid_270_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1937
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4190
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback4190:
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4191
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback4191:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<until>" :subid("cuid_271_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1938
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4192
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback4192:
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4193
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback4193:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<fatarrow>" :subid("cuid_272_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1942
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4194
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback4194:
    set $P5001, _lex_param_1["fatarrow"]
    unless_null $P5001, fallback4195
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback4195:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<colonpair>" :subid("cuid_273_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1943
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4196
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback4196:
    set $P5001, _lex_param_1["colonpair"]
    unless_null $P5001, fallback4197
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback4197:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<variable>" :subid("cuid_274_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1944
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4198
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback4198:
    set $P5001, _lex_param_1["variable"]
    unless_null $P5001, fallback4199
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback4199:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<package_declarator>" :subid("cuid_275_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1945
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4200
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback4200:
    set $P5001, _lex_param_1["package_declarator"]
    unless_null $P5001, fallback4201
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback4201:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<scope_declarator>" :subid("cuid_276_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1946
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4202
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback4202:
    set $P5001, _lex_param_1["scope_declarator"]
    unless_null $P5001, fallback4203
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback4203:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<routine_declarator>" :subid("cuid_277_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1947
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4204
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback4204:
    set $P5001, _lex_param_1["routine_declarator"]
    unless_null $P5001, fallback4205
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback4205:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<regex_declarator>" :subid("cuid_278_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1948
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4206
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback4206:
    set $P5001, _lex_param_1["regex_declarator"]
    unless_null $P5001, fallback4207
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback4207:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<statement_prefix>" :subid("cuid_279_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1949
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4208
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback4208:
    set $P5001, _lex_param_1["statement_prefix"]
    unless_null $P5001, fallback4209
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback4209:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<lambda>" :subid("cuid_280_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1950
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1951
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback4210
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5005
  fallback4210:
    unless_null _lex_param_1, fallback4211
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5007
  fallback4211:
    set $P5006, _lex_param_1["pblock"]
    unless_null $P5006, fallback4212
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5006, $P5008
  fallback4212:
    $P5009 = $P5006."ast"()
    $P5010 = $P5001."new"($P5009, "takeclosure" :named("op"))
    $P5011 = _lex_param_1."!make"($P5010)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "fatarrow" :subid("cuid_281_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1954
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
.annotate 'line', 1955
    unless_null _lex_param_1, fallback4213
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5003
  fallback4213:
    set $P5002, _lex_param_1["val"]
    unless_null $P5002, fallback4214
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5004
  fallback4214:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 1956
    unless_null _lex_param_1, fallback4215
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5007
  fallback4215:
    set $P5006, _lex_param_1["key"]
    unless_null $P5006, fallback4216
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5006, $P5008
  fallback4216:
    $P5009 = $P5006."Str"()
    $P5010 = $P101."named"($P5009)
.annotate 'line', 1957
    $P5011 = _lex_param_1."!make"($P101)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "colonpair" :subid("cuid_282_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1960
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5022 = 'cuid_439_1349901750.327' 
    capture_lex $P5022 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4219
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback4219:
    set $P5001, _lex_param_1["variable"]
    unless_null $P5001, fallback4220
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback4220:
    unless $P5001 goto if1388_else4217 
.annotate 'line', 1961
.annotate 'line', 1962
    unless_null _lex_param_1, fallback4221
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5005
  fallback4221:
    set $P5004, _lex_param_1["variable"]
    unless_null $P5004, fallback4222
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5004, $P5006
  fallback4222:
    $P5007 = $P5004."ast"()
    unless_null _lex_param_1, fallback4223
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5010
  fallback4223:
    set $P5009, _lex_param_1["variable"]
    unless_null $P5009, fallback4224
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5009, $P5011
  fallback4224:
    set $P5008, $P5009["desigilname"]
    unless_null $P5008, fallback4225
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5008, $P5012
  fallback4225:
    set $S5001, $P5008
    $P5013 = $P5007."named"($S5001)
.annotate 'line', 1963
    unless_null _lex_param_1, fallback4226
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5015
  fallback4226:
    set $P5014, _lex_param_1["variable"]
    unless_null $P5014, fallback4227
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5014, $P5016
  fallback4227:
    $P5017 = $P5014."ast"()
    $P5018 = _lex_param_1."!make"($P5017)
    set $P5021, $P5018
    goto if1388_end4218
  if1388_else4217:
    .const 'Sub' $P5019 = 'cuid_439_1349901750.327' 
    capture_lex $P5019
    $P5020 = $P5019()
    set $P5021, $P5020
  if1388_end4218:
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_439_1349901750.327") :anon :lex :outer("cuid_282_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1964
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    find_lex $P5003, "$/"
    unless_null $P5003, fallback4230
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5003, $P5004
  fallback4230:
    set $P5002, $P5003["circumfix"]
    unless_null $P5002, fallback4231
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5005
  fallback4231:
    unless $P5002 goto if1389_else4228 
.annotate 'line', 1966
    find_lex $P5008, "$/"
    unless_null $P5008, fallback4232
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5008, $P5009
  fallback4232:
    set $P5007, $P5008["circumfix"]
    unless_null $P5007, fallback4233
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5007, $P5010
  fallback4233:
    set $P5006, $P5007[0]
    unless_null $P5006, fallback4234
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5006, $P5011
  fallback4234:
    $P5012 = $P5006."ast"()
    set $P5023, $P5012
    goto if1389_end4229
  if1389_else4228:
.annotate 'line', 1967
    nqp_get_sc_object $P5016, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["IVal"]
    unless_null $P5013, fallback4235
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5013, $P5017
  fallback4235:
    find_lex $P5019, "$/"
    unless_null $P5019, fallback4236
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5019, $P5020
  fallback4236:
    set $P5018, $P5019["not"]
    unless_null $P5018, fallback4237
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5018, $P5021
  fallback4237:
    isfalse $I5001, $P5018
    $P5022 = $P5013."new"($I5001 :named("value"))
    set $P5023, $P5022
  if1389_end4229:
    set $P101, $P5023
.annotate 'line', 1968
    find_lex $P5025, "$/"
    unless_null $P5025, fallback4238
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5025, $P5026
  fallback4238:
    set $P5024, $P5025["identifier"]
    unless_null $P5024, fallback4239
    nqp_get_sc_object $P5027, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5024, $P5027
  fallback4239:
    set $S5001, $P5024
    $P5028 = $P101."named"($S5001)
.annotate 'line', 1969
    find_dynamic_lex $P5029, "$/"
    $P5030 = $P5029."!make"($P101)
    .return ($P5030) 
.end
.HLL "nqp"
.namespace []
.sub "variable" :subid("cuid_283_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1973
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5021 = 'cuid_441_1349901750.327' 
    capture_lex $P5021 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    unless_null _lex_param_1, fallback4242
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5003
  fallback4242:
    set $P5002, _lex_param_1["postcircumfix"]
    unless_null $P5002, fallback4243
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5004
  fallback4243:
    unless $P5002 goto if1390_else4240 
.annotate 'line', 1975
.annotate 'line', 1976
    unless_null _lex_param_1, fallback4244
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5006
  fallback4244:
    set $P5005, _lex_param_1["postcircumfix"]
    unless_null $P5005, fallback4245
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5005, $P5007
  fallback4245:
    $P5008 = $P5005."ast"()
    set $P101, $P5008
.annotate 'line', 1977
    nqp_get_sc_object $P5012, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["VarWithFallback"]
    unless_null $P5009, fallback4246
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5009, $P5013
  fallback4246:
.annotate 'line', 1978
    $P5014 = "&default_for"("$")
    $P5015 = $P5009."new"("$/" :named("name"), "lexical" :named("scope"), $P5014 :named("fallback"))
    $P5016 = $P101."unshift"($P5015)
    set $P5019, $P5016
    goto if1390_end4241
  if1390_else4240:
    .const 'Sub' $P5017 = 'cuid_441_1349901750.327' 
    capture_lex $P5017
    $P5018 = $P5017()
    set $P5019, $P5018
  if1390_end4241:
.annotate 'line', 2053
    $P5020 = _lex_param_1."!make"($P101)
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_441_1349901750.327") :anon :lex :outer("cuid_283_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1981
    .const 'Sub' $P5059 = 'cuid_440_1349901750.327' 
    capture_lex $P5059 
    .const 'Sub' $P5059 = 'cuid_444_1349901750.327' 
    capture_lex $P5059 
    .const 'Sub' $P5059 = 'cuid_445_1349901750.327' 
    capture_lex $P5059 
    .lex "@name", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
.annotate 'line', 1982
    nqp_get_sc_object $P5005, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5004, $P5005, "NQP"
    get_who $P5003, $P5004
    set $P5002, $P5003["Compiler"]
    unless_null $P5002, fallback4247
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5006
  fallback4247:
    find_lex $P5007, "$/"
    set $S5001, $P5007
    $P5008 = $P5002."parse_name"($S5001)
    set $P101, $P5008
    set $N5001, $P101
    set $N5002, 1
    isgt $I5001, $N5001, $N5002
    unless $I5001 goto if1391_else4248 
.annotate 'line', 1983
    find_lex $P5010, "$/"
    unless_null $P5010, fallback4252
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5010, $P5011
  fallback4252:
    set $P5009, $P5010["twigil"]
    unless_null $P5009, fallback4253
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5009, $P5012
  fallback4253:
    set $P5016, $P5009
    unless $P5009 goto if1392_end4251 
.annotate 'line', 1984
.annotate 'line', 1985
    find_lex $P5013, "$/"
    $P5014 = $P5013."CURSOR"()
    $P5015 = $P5014."panic"("Twigil not allowed on multi-part name")
    set $P5016, $P5015
  if1392_end4251:
.annotate 'line', 1987
    find_lex $P5017, "$/"
    $P5018 = "&lexical_package_lookup"($P101, $P5017)
    store_lex "$past", $P5018
    set $P5058, $P5018
    goto if1391_end4249
  if1391_else4248:
    find_lex $P5021, "$/"
    unless_null $P5021, fallback4256
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5021, $P5022
  fallback4256:
    set $P5020, $P5021["twigil"]
    unless_null $P5020, fallback4257
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5020, $P5023
  fallback4257:
    set $P5019, $P5020[0]
    unless_null $P5019, fallback4258
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5019, $P5024
  fallback4258:
    set $S5002, $P5019
    iseq $I5002, $S5002, "*"
    unless $I5002 goto if1393_else4254 
    .const 'Sub' $P5025 = 'cuid_440_1349901750.327' 
    capture_lex $P5025
    $P5026 = $P5025()
    set $P5057, $P5026
    goto if1393_end4255
  if1393_else4254:
    find_lex $P5029, "$/"
    unless_null $P5029, fallback4269
    nqp_get_sc_object $P5030, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5029, $P5030
  fallback4269:
    set $P5028, $P5029["twigil"]
    unless_null $P5028, fallback4270
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5028, $P5031
  fallback4270:
    set $P5027, $P5028[0]
    unless_null $P5027, fallback4271
    nqp_get_sc_object $P5032, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5027, $P5032
  fallback4271:
    set $S5003, $P5027
    iseq $I5003, $S5003, "!"
    unless $I5003 goto if1394_else4267 
    .const 'Sub' $P5033 = 'cuid_444_1349901750.327' 
    capture_lex $P5033
    $P5034 = $P5033()
    set $P5056, $P5034
    goto if1394_end4268
  if1394_else4267:
.annotate 'line', 2038
    find_dynamic_lex $P5035, "$*W"
    unless_null $P5035, fallback4311
    nqp_get_sc_object $P5038, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5037, $P5038
    set $P5036, $P5037["$W"]
    unless_null $P5036, fallback4312
    nqp_get_sc_object $P5039, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5036, $P5039
  fallback4312:
    unless_null $P5036, vivi_14074313
    die "Contextual $*W not found"
    box $P5040, "Contextual $*W not found"
    set $P5036, $P5040
  vivi_14074313:
    set $P5035, $P5036
  fallback4311:
    set $P5041, $P101[0]
    unless_null $P5041, fallback4314
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5041, $P5042
  fallback4314:
    set $S5004, $P5041
    $P5043 = $P5035."is_package"($S5004)
    unless $P5043 goto if1406_else4309 
.annotate 'line', 2039
    find_lex $P5044, "$/"
    $P5045 = "&lexical_package_lookup"($P101, $P5044)
    store_lex "$past", $P5045
.annotate 'line', 2040
    find_lex $P5046, "$past"
    find_lex $P5048, "$/"
    unless_null $P5048, fallback4315
    nqp_get_sc_object $P5049, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5048, $P5049
  fallback4315:
    set $P5047, $P5048["sigil"]
    unless_null $P5047, fallback4316
    nqp_get_sc_object $P5050, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5047, $P5050
  fallback4316:
    $P5051 = "&default_for"($P5047)
    $P5052 = $P5046."fallback"($P5051)
    set $P5055, $P5052
    goto if1406_end4310
  if1406_else4309:
    .const 'Sub' $P5053 = 'cuid_445_1349901750.327' 
    capture_lex $P5053
    $P5054 = $P5053()
    set $P5055, $P5054
  if1406_end4310:
    set $P5056, $P5055
  if1394_end4268:
    set $P5057, $P5056
  if1393_end4255:
    set $P5058, $P5057
  if1391_end4249:
    .return ($P5058) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_440_1349901750.327") :anon :lex :outer("cuid_441_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1989
    .lex "$global_fallback", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
.annotate 'line', 1990
    nqp_get_sc_object $P5005, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Op"]
    unless_null $P5002, fallback4259
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5006
  fallback4259:
.annotate 'line', 1992
    new $P5007, 'ResizablePMCArray'
    box $P5008, "GLOBAL"
    push $P5007, $P5008
    find_lex $P5010, "$/"
    unless_null $P5010, fallback4260
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5010, $P5011
  fallback4260:
    set $P5009, $P5010["sigil"]
    unless_null $P5009, fallback4261
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5009, $P5012
  fallback4261:
    set $S5002, $P5009
    find_lex $P5014, "$/"
    unless_null $P5014, fallback4262
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5014, $P5015
  fallback4262:
    set $P5013, $P5014["desigilname"]
    unless_null $P5013, fallback4263
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5013, $P5016
  fallback4263:
    set $S5003, $P5013
    concat $S5001, $S5002, $S5003
    box $P5017, $S5001
    push $P5007, $P5017
    find_lex $P5018, "$/"
    $P5019 = "&lexical_package_lookup"($P5007, $P5018)
.annotate 'line', 1993
    nqp_get_sc_object $P5023, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback4264
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5020, $P5024
  fallback4264:
.annotate 'line', 1995
    nqp_get_sc_object $P5028, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["SVal"]
    unless_null $P5025, fallback4265
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5025, $P5029
  fallback4265:
    find_lex $P5030, "$/"
    set $S5006, $P5030
    concat $S5005, "Contextual ", $S5006
    concat $S5004, $S5005, " not found"
    $P5031 = $P5025."new"($S5004 :named("value"))
    $P5032 = $P5020."new"($P5031, "die_s" :named("op"))
    $P5033 = $P5002."new"($P5019, $P5032, "ifnull" :named("op"))
    set $P101, $P5033
.annotate 'line', 1997
    nqp_get_sc_object $P5037, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set $P5034, $P5035["VarWithFallback"]
    unless_null $P5034, fallback4266
    nqp_get_sc_object $P5038, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5034, $P5038
  fallback4266:
.annotate 'line', 1998
    find_lex $P5039, "@name"
    $P5040 = $P5039."pop"()
    set $S5007, $P5040
    $P5041 = $P5034."new"($S5007 :named("name"), "contextual" :named("scope"), $P101 :named("fallback"))
    store_lex "$past", $P5041
    .return ($P5041) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_444_1349901750.327") :anon :lex :outer("cuid_441_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2002
    .const 'Sub' $P5065 = 'cuid_443_1349901750.327' 
    capture_lex $P5065 
    .lex "$name", $P101 
    .lex "$ch", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
.annotate 'line', 2003
    find_lex $P5003, "@name"
    $P5004 = $P5003."pop"()
    set $S5001, $P5004
    box $P5005, $S5001
    set $P101, $P5005
    find_dynamic_lex $P5006, "$*PKGDECL"
    unless_null $P5006, fallback4274
    nqp_get_sc_object $P5009, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5008, $P5009
    set $P5007, $P5008["$PKGDECL"]
    unless_null $P5007, fallback4275
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5007, $P5010
  fallback4275:
    unless_null $P5007, vivi_13964276
    die "Contextual $*PKGDECL not found"
    box $P5011, "Contextual $*PKGDECL not found"
    set $P5007, $P5011
  vivi_13964276:
    set $P5006, $P5007
  fallback4274:
    set $S5002, $P5006
    iseq $I5001, $S5002, "role"
    unless $I5001 goto if1395_else4272 
.annotate 'line', 2005
.annotate 'line', 2006
    nqp_get_sc_object $P5015, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Var"]
    unless_null $P5012, fallback4277
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5012, $P5016
  fallback4277:
    $P5017 = $P5012."new"("$?CLASS" :named("name"), "lexical" :named("scope"))
    set $P102, $P5017
.annotate 'line', 2007
    find_dynamic_lex $P5018, "$*PACKAGE"
    unless_null $P5018, fallback4278
    nqp_get_sc_object $P5021, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["$PACKAGE"]
    unless_null $P5019, fallback4279
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5019, $P5022
  fallback4279:
    unless_null $P5019, vivi_13974280
    die "Contextual $*PACKAGE not found"
    box $P5023, "Contextual $*PACKAGE not found"
    set $P5019, $P5023
  vivi_13974280:
    set $P5018, $P5019
  fallback4278:
    $P5024 = $P102."set_compile_time_value"($P5018)
    set $P5037, $P5024
    goto if1395_end4273
  if1395_else4272:
.annotate 'line', 2009
.annotate 'line', 2010
    nqp_get_sc_object $P5028, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["WVal"]
    unless_null $P5025, fallback4281
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5025, $P5029
  fallback4281:
    find_dynamic_lex $P5030, "$*PACKAGE"
    unless_null $P5030, fallback4282
    nqp_get_sc_object $P5033, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5032, $P5033
    set $P5031, $P5032["$PACKAGE"]
    unless_null $P5031, fallback4283
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5031, $P5034
  fallback4283:
    unless_null $P5031, vivi_13984284
    die "Contextual $*PACKAGE not found"
    box $P5035, "Contextual $*PACKAGE not found"
    set $P5031, $P5035
  vivi_13984284:
    set $P5030, $P5031
  fallback4282:
    $P5036 = $P5025."new"($P5030 :named("value"))
    set $P102, $P5036
    set $P5037, $P102
  if1395_end4273:
.annotate 'line', 2012
    nqp_get_sc_object $P5041, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5040, $P5041, "QAST"
    get_who $P5039, $P5040
    set $P5038, $P5039["Var"]
    unless_null $P5038, fallback4285
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5038, $P5042
  fallback4285:
.annotate 'line', 2014
    nqp_get_sc_object $P5046, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5045, $P5046, "QAST"
    get_who $P5044, $P5045
    set $P5043, $P5044["VM"]
    unless_null $P5043, fallback4286
    nqp_get_sc_object $P5047, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5043, $P5047
  fallback4286:
.annotate 'line', 2015
    nqp_get_sc_object $P5051, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["Var"]
    unless_null $P5048, fallback4287
    nqp_get_sc_object $P5052, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5048, $P5052
  fallback4287:
    $P5053 = $P5048."new"("self" :named("name"), "lexical" :named("scope"))
    $P5054 = $P5043."new"($P5053, "nqp_decontainerize PP" :named("pirop"))
    $P5055 = $P5038."new"($P5054, $P102, $P101 :named("name"), "attribute" :named("scope"))
    store_lex "$past", $P5055
    find_dynamic_lex $P5056, "$*IN_DECL"
    unless_null $P5056, fallback4290
    nqp_get_sc_object $P5059, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5058, $P5059
    set $P5057, $P5058["$IN_DECL"]
    unless_null $P5057, fallback4291
    nqp_get_sc_object $P5060, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5057, $P5060
  fallback4291:
    unless_null $P5057, vivi_14004292
    die "Contextual $*IN_DECL not found"
    box $P5061, "Contextual $*IN_DECL not found"
    set $P5057, $P5061
  vivi_14004292:
    set $P5056, $P5057
  fallback4290:
    set $P5064, $P5056
    if $P5056 goto unless1399_end4289 
    .const 'Sub' $P5062 = 'cuid_443_1349901750.327' 
    capture_lex $P5062
    $P5063 = $P5062()
    set $P5064, $P5063
  unless1399_end4289:
    .return ($P5064) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_443_1349901750.327") :anon :lex :outer("cuid_444_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2020
    .const 'Sub' $P5032 = 'cuid_442_1349901750.327' 
    capture_lex $P5032 
    .lex "$attr", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
.annotate 'line', 2022
    find_dynamic_lex $P5006, "$*PACKAGE"
    unless_null $P5006, fallback4293
    nqp_get_sc_object $P5009, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5008, $P5009
    set $P5007, $P5008["$PACKAGE"]
    unless_null $P5007, fallback4294
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5007, $P5010
  fallback4294:
    unless_null $P5007, vivi_14014295
    die "Contextual $*PACKAGE not found"
    box $P5011, "Contextual $*PACKAGE not found"
    set $P5007, $P5011
  vivi_14014295:
    set $P5006, $P5007
  fallback4293:
    get_how $P5005, $P5006
    find_dynamic_lex $P5012, "$*PACKAGE"
    unless_null $P5012, fallback4296
    nqp_get_sc_object $P5015, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5014, $P5015
    set $P5013, $P5014["$PACKAGE"]
    unless_null $P5013, fallback4297
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5013, $P5016
  fallback4297:
    unless_null $P5013, vivi_14024298
    die "Contextual $*PACKAGE not found"
    box $P5017, "Contextual $*PACKAGE not found"
    set $P5013, $P5017
  vivi_14024298:
    set $P5012, $P5013
  fallback4296:
    $P5018 = $P5005."attributes"($P5012, 1 :named("local"))
    set $P5002, $P5018
    iter $P5004, $P5018
    new $P5020, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5020, for_handlers4301
    push_eh $P5020
  for_next4302:
    unless $P5004, for_done4304
    shift $P5021, $P5004
  for_redo4303:
    .const 'Sub' $P5019 = 'cuid_442_1349901750.327' 
    capture_lex $P5019
    $P5002 = $P5019($P5021)
    goto for_next4302
  for_handlers4301:
    .get_results ($P5020)
    pop_upto_eh $P5020
    getattribute $P5020, $P5020, 'type'
    eq $P5020, .CONTROL_LOOP_NEXT, for_next4302
    eq $P5020, .CONTROL_LOOP_REDO, for_redo4303
  for_done4304:
    pop_eh 
    defined $I5001, $P101
    unless $I5001 goto if1404_else4305 
.annotate 'line', 2028
    can $I5002, $P101, "type"
    box $P5026, $I5002
    set $P5025, $P5026
    unless $I5002 goto if1405_end4308 
.annotate 'line', 2029
.annotate 'line', 2030
    find_lex $P5022, "$past"
    $P5023 = $P101."type"()
    $P5024 = $P5022."returns"($P5023)
    set $P5025, $P5024
  if1405_end4308:
    set $P5031, $P5025
    goto if1404_end4306
  if1404_else4305:
.annotate 'line', 2033
.annotate 'line', 2034
    find_lex $P5027, "$/"
    $P5028 = $P5027."CURSOR"()
    find_lex $P5029, "$name"
    set $S5003, $P5029
    concat $S5002, "Attribute '", $S5003
    concat $S5001, $S5002, "' not declared"
    $P5030 = $P5028."panic"($S5001)
    set $P5031, $P5030
  if1404_end4306:
    .return ($P5031) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_442_1349901750.327") :anon :lex :outer("cuid_443_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2022
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 2023
    $P5001 = _lex_param_0."name"()
    set $S5001, $P5001
    find_lex $P5002, "$name"
    set $S5002, $P5002
    iseq $I5001, $S5001, $S5002
    set $I5002, $I5001
    unless $I5001 goto if1403_end4300 
    store_lex "$attr", _lex_param_0
    die 0, .CONTROL_LOOP_LAST
    set $I5002, 0
  if1403_end4300:
    .return ($I5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_445_1349901750.327") :anon :lex :outer("cuid_441_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2042
    .lex "$name", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
.annotate 'line', 2043
    find_lex $P5002, "@name"
    $P5003 = $P5002."pop"()
    set $S5001, $P5003
    box $P5004, $S5001
    set $P101, $P5004
    find_dynamic_lex $P5005, "$*IN_DECL"
    unless_null $P5005, fallback4329
    nqp_get_sc_object $P5008, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["$IN_DECL"]
    unless_null $P5006, fallback4330
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5006, $P5009
  fallback4330:
    unless_null $P5006, vivi_14144331
    die "Contextual $*IN_DECL not found"
    box $P5010, "Contextual $*IN_DECL not found"
    set $P5006, $P5010
  vivi_14144331:
    set $P5005, $P5006
  fallback4329:
    set $S5002, $P5005
    iseq $I5001, $S5002, "variable"
    set $I5003, $I5001
    if $I5001 goto unless1413_end4328 
    set $S5003, $P101
    iseq $I5002, $S5003, "$_"
    set $I5003, $I5002
  unless1413_end4328:
    set $I5005, $I5003
    if $I5003 goto unless1412_end4326 
    set $S5004, $P101
    iseq $I5004, $S5004, "$/"
    set $I5005, $I5004
  unless1412_end4326:
    set $I5007, $I5005
    if $I5005 goto unless1411_end4324 
    set $S5005, $P101
    iseq $I5006, $S5005, "$!"
    set $I5007, $I5006
  unless1411_end4324:
    set $I5009, $I5007
    if $I5007 goto unless1410_end4322 
    find_lex $P5013, "$/"
    unless_null $P5013, fallback4332
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5013, $P5014
  fallback4332:
    set $P5012, $P5013["twigil"]
    unless_null $P5012, fallback4333
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5012, $P5015
  fallback4333:
    set $P5011, $P5012[0]
    unless_null $P5011, fallback4334
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5011, $P5016
  fallback4334:
    set $S5006, $P5011
    iseq $I5008, $S5006, "?"
    set $I5009, $I5008
  unless1410_end4322:
    box $P5025, $I5009
    set $P5024, $P5025
    if $I5009 goto unless1409_end4320 
.annotate 'line', 2045
    find_dynamic_lex $P5017, "$*W"
    unless_null $P5017, fallback4335
    nqp_get_sc_object $P5020, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5019, $P5020
    set $P5018, $P5019["$W"]
    unless_null $P5018, fallback4336
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5018, $P5021
  fallback4336:
    unless_null $P5018, vivi_14154337
    die "Contextual $*W not found"
    box $P5022, "Contextual $*W not found"
    set $P5018, $P5022
  vivi_14154337:
    set $P5017, $P5018
  fallback4335:
    $P5023 = $P5017."is_lexical"($P101)
    set $P5024, $P5023
  unless1409_end4320:
    unless $P5024 goto if1408_else4317 
.annotate 'line', 2046
    nqp_get_sc_object $P5029, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Var"]
    unless_null $P5026, fallback4338
    nqp_get_sc_object $P5030, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5026, $P5030
  fallback4338:
    $P5031 = $P5026."new"($P101 :named("name"), "lexical" :named("scope"))
    store_lex "$past", $P5031
    set $P5035, $P5031
    goto if1408_end4318
  if1408_else4317:
.annotate 'line', 2048
.annotate 'line', 2049
    find_lex $P5032, "$/"
    $P5033 = $P5032."CURSOR"()
    set $S5009, $P101
    concat $S5008, "Use of undeclared variable '", $S5009
    concat $S5007, $S5008, "'"
    $P5034 = $P5033."panic"($S5007)
    set $P5035, $P5034
  if1408_end4318:
    .return ($P5035) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<module>" :subid("cuid_284_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2056
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4339
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback4339:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4340
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback4340:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<knowhow>" :subid("cuid_285_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2057
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4341
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback4341:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4342
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback4342:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<class>" :subid("cuid_286_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2058
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4343
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback4343:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4344
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback4344:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<grammar>" :subid("cuid_287_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2059
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4345
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback4345:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4346
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback4346:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<role>" :subid("cuid_288_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2060
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4347
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback4347:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4348
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback4348:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<native>" :subid("cuid_289_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2061
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4349
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback4349:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4350
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback4350:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<stub>" :subid("cuid_290_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2063
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$HOW", $P101 
    .lex "$PACKAGE", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
.annotate 'line', 2066
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4351
    nqp_get_sc_object $P5006, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4352
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5004, $P5007
  fallback4352:
    unless_null $P5004, vivi_14164353
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_14164353:
    set $P5003, $P5004
  fallback4351:
    unless_null _lex_param_1, fallback4354
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5011
  fallback4354:
    set $P5010, _lex_param_1["metaclass"]
    unless_null $P5010, fallback4355
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5010, $P5012
  fallback4355:
    set $P5009, $P5010["identifier"]
    unless_null $P5009, fallback4356
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5009, $P5013
  fallback4356:
    $P5014 = $P5003."find_sym"($P5009)
    set $P101, $P5014
.annotate 'line', 2067
    find_dynamic_lex $P5015, "$*W"
    unless_null $P5015, fallback4357
    nqp_get_sc_object $P5018, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["$W"]
    unless_null $P5016, fallback4358
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5016, $P5019
  fallback4358:
    unless_null $P5016, vivi_14174359
    die "Contextual $*W not found"
    box $P5020, "Contextual $*W not found"
    set $P5016, $P5020
  vivi_14174359:
    set $P5015, $P5016
  fallback4357:
    unless_null _lex_param_1, fallback4360
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5022
  fallback4360:
    set $P5021, _lex_param_1["name"]
    unless_null $P5021, fallback4361
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5021, $P5023
  fallback4361:
    set $S5001, $P5021
    $P5024 = $P5015."pkg_create_mo"($P101, $S5001 :named("name"))
    set $P102, $P5024
    find_dynamic_lex $P5025, "$*SCOPE"
    unless_null $P5025, fallback4366
    nqp_get_sc_object $P5028, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5027, $P5028
    set $P5026, $P5027["$SCOPE"]
    unless_null $P5026, fallback4367
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5026, $P5029
  fallback4367:
    unless_null $P5026, vivi_14204368
    die "Contextual $*SCOPE not found"
    box $P5030, "Contextual $*SCOPE not found"
    set $P5026, $P5030
  vivi_14204368:
    set $P5025, $P5026
  fallback4366:
    set $S5002, $P5025
    iseq $I5001, $S5002, "our"
    set $I5003, $I5001
    if $I5001 goto unless1419_end4365 
    find_dynamic_lex $P5031, "$*SCOPE"
    unless_null $P5031, fallback4369
    nqp_get_sc_object $P5034, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["$SCOPE"]
    unless_null $P5032, fallback4370
    nqp_get_sc_object $P5035, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5032, $P5035
  fallback4370:
    unless_null $P5032, vivi_14214371
    die "Contextual $*SCOPE not found"
    box $P5036, "Contextual $*SCOPE not found"
    set $P5032, $P5036
  vivi_14214371:
    set $P5031, $P5032
  fallback4369:
    set $S5003, $P5031
    iseq $I5002, $S5003, ""
    set $I5003, $I5002
  unless1419_end4365:
    unless $I5003 goto if1418_else4362 
.annotate 'line', 2070
.annotate 'line', 2071
    find_dynamic_lex $P5037, "$*W"
    unless_null $P5037, fallback4372
    nqp_get_sc_object $P5040, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5039, $P5040
    set $P5038, $P5039["$W"]
    unless_null $P5038, fallback4373
    nqp_get_sc_object $P5041, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5038, $P5041
  fallback4373:
    unless_null $P5038, vivi_14224374
    die "Contextual $*W not found"
    box $P5042, "Contextual $*W not found"
    set $P5038, $P5042
  vivi_14224374:
    set $P5037, $P5038
  fallback4372:
    find_dynamic_lex $P5043, "$*OUTERPACKAGE"
    unless_null $P5043, fallback4375
    nqp_get_sc_object $P5046, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5045, $P5046
    set $P5044, $P5045["$OUTERPACKAGE"]
    unless_null $P5044, fallback4376
    nqp_get_sc_object $P5047, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5044, $P5047
  fallback4376:
    unless_null $P5044, vivi_14234377
    die "Contextual $*OUTERPACKAGE not found"
    box $P5048, "Contextual $*OUTERPACKAGE not found"
    set $P5044, $P5048
  vivi_14234377:
    set $P5043, $P5044
  fallback4375:
    unless_null _lex_param_1, fallback4378
    nqp_get_sc_object $P5051, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5051
  fallback4378:
    set $P5050, _lex_param_1["name"]
    unless_null $P5050, fallback4379
    nqp_get_sc_object $P5052, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5050, $P5052
  fallback4379:
    set $P5049, $P5050["identifier"]
    unless_null $P5049, fallback4380
    nqp_get_sc_object $P5053, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5049, $P5053
  fallback4380:
    $P5054 = $P5037."install_package_symbol"($P5043, $P5049, $P102)
    unless_null _lex_param_1, fallback4383
    nqp_get_sc_object $P5057, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5057
  fallback4383:
    set $P5056, _lex_param_1["name"]
    unless_null $P5056, fallback4384
    nqp_get_sc_object $P5058, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5056, $P5058
  fallback4384:
    set $P5055, $P5056["identifier"]
    unless_null $P5055, fallback4385
    nqp_get_sc_object $P5059, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5055, $P5059
  fallback4385:
    set $N5001, $P5055
    set $N5002, 1
    iseq $I5004, $N5001, $N5002
    box $P5082, $I5004
    set $P5081, $P5082
    unless $I5004 goto if1424_end4382 
.annotate 'line', 2072
.annotate 'line', 2073
    find_dynamic_lex $P5060, "$*W"
    unless_null $P5060, fallback4386
    nqp_get_sc_object $P5063, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5062, $P5063
    set $P5061, $P5062["$W"]
    unless_null $P5061, fallback4387
    nqp_get_sc_object $P5064, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5061, $P5064
  fallback4387:
    unless_null $P5061, vivi_14254388
    die "Contextual $*W not found"
    box $P5065, "Contextual $*W not found"
    set $P5061, $P5065
  vivi_14254388:
    set $P5060, $P5061
  fallback4386:
    find_dynamic_lex $P5066, "$*W"
    unless_null $P5066, fallback4389
    nqp_get_sc_object $P5069, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5068, $P5069
    set $P5067, $P5068["$W"]
    unless_null $P5067, fallback4390
    nqp_get_sc_object $P5070, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5067, $P5070
  fallback4390:
    unless_null $P5067, vivi_14264391
    die "Contextual $*W not found"
    box $P5071, "Contextual $*W not found"
    set $P5067, $P5071
  vivi_14264391:
    set $P5066, $P5067
  fallback4389:
    $P5072 = $P5066."cur_lexpad"()
    unless_null _lex_param_1, fallback4392
    nqp_get_sc_object $P5076, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5076
  fallback4392:
    set $P5075, _lex_param_1["name"]
    unless_null $P5075, fallback4393
    nqp_get_sc_object $P5077, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5075, $P5077
  fallback4393:
    set $P5074, $P5075["identifier"]
    unless_null $P5074, fallback4394
    nqp_get_sc_object $P5078, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5074, $P5078
  fallback4394:
    set $P5073, $P5074[0]
    unless_null $P5073, fallback4395
    nqp_get_sc_object $P5079, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5073, $P5079
  fallback4395:
    $P5080 = $P5060."install_lexical_symbol"($P5072, $P5073, $P102)
    set $P5081, $P5080
  if1424_end4382:
    set $P5131, $P5081
    goto if1418_end4363
  if1418_else4362:
    find_dynamic_lex $P5083, "$*SCOPE"
    unless_null $P5083, fallback4398
    nqp_get_sc_object $P5086, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5085, $P5086
    set $P5084, $P5085["$SCOPE"]
    unless_null $P5084, fallback4399
    nqp_get_sc_object $P5087, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5084, $P5087
  fallback4399:
    unless_null $P5084, vivi_14284400
    die "Contextual $*SCOPE not found"
    box $P5088, "Contextual $*SCOPE not found"
    set $P5084, $P5088
  vivi_14284400:
    set $P5083, $P5084
  fallback4398:
    set $S5004, $P5083
    iseq $I5005, $S5004, "my"
    unless $I5005 goto if1427_else4396 
.annotate 'line', 2076
    unless_null _lex_param_1, fallback4403
    nqp_get_sc_object $P5091, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5091
  fallback4403:
    set $P5090, _lex_param_1["name"]
    unless_null $P5090, fallback4404
    nqp_get_sc_object $P5092, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5090, $P5092
  fallback4404:
    set $P5089, $P5090["identifier"]
    unless_null $P5089, fallback4405
    nqp_get_sc_object $P5093, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5089, $P5093
  fallback4405:
    set $N5003, $P5089
    set $N5004, 1
    isne $I5006, $N5003, $N5004
    box $P5100, $I5006
    set $P5099, $P5100
    unless $I5006 goto if1429_end4402 
.annotate 'line', 2077
.annotate 'line', 2078
    unless_null _lex_param_1, fallback4406
    nqp_get_sc_object $P5095, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5095
  fallback4406:
    set $P5094, _lex_param_1["name"]
    unless_null $P5094, fallback4407
    nqp_get_sc_object $P5096, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5094, $P5096
  fallback4407:
    $P5097 = $P5094."CURSOR"()
    $P5098 = $P5097."panic"("A my scoped package cannot have a multi-part name yet")
    set $P5099, $P5098
  if1429_end4402:
.annotate 'line', 2080
    find_dynamic_lex $P5101, "$*W"
    unless_null $P5101, fallback4408
    nqp_get_sc_object $P5104, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5103, $P5104
    set $P5102, $P5103["$W"]
    unless_null $P5102, fallback4409
    nqp_get_sc_object $P5105, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5102, $P5105
  fallback4409:
    unless_null $P5102, vivi_14304410
    die "Contextual $*W not found"
    box $P5106, "Contextual $*W not found"
    set $P5102, $P5106
  vivi_14304410:
    set $P5101, $P5102
  fallback4408:
    find_dynamic_lex $P5107, "$*W"
    unless_null $P5107, fallback4411
    nqp_get_sc_object $P5110, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5109, $P5110
    set $P5108, $P5109["$W"]
    unless_null $P5108, fallback4412
    nqp_get_sc_object $P5111, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5108, $P5111
  fallback4412:
    unless_null $P5108, vivi_14314413
    die "Contextual $*W not found"
    box $P5112, "Contextual $*W not found"
    set $P5108, $P5112
  vivi_14314413:
    set $P5107, $P5108
  fallback4411:
    $P5113 = $P5107."cur_lexpad"()
    unless_null _lex_param_1, fallback4414
    nqp_get_sc_object $P5117, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5117
  fallback4414:
    set $P5116, _lex_param_1["name"]
    unless_null $P5116, fallback4415
    nqp_get_sc_object $P5118, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5116, $P5118
  fallback4415:
    set $P5115, $P5116["identifier"]
    unless_null $P5115, fallback4416
    nqp_get_sc_object $P5119, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5115, $P5119
  fallback4416:
    set $P5114, $P5115[0]
    unless_null $P5114, fallback4417
    nqp_get_sc_object $P5120, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5114, $P5120
  fallback4417:
    $P5121 = $P5101."install_lexical_symbol"($P5113, $P5114, $P102)
    set $P5130, $P5121
    goto if1427_end4397
  if1427_else4396:
.annotate 'line', 2082
.annotate 'line', 2083
    $P5122 = _lex_param_1."CURSOR"()
    find_dynamic_lex $P5123, "$*SCOPE"
    unless_null $P5123, fallback4418
    nqp_get_sc_object $P5126, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5125, $P5126
    set $P5124, $P5125["$SCOPE"]
    unless_null $P5124, fallback4419
    nqp_get_sc_object $P5127, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5124, $P5127
  fallback4419:
    unless_null $P5124, vivi_14324420
    die "Contextual $*SCOPE not found"
    box $P5128, "Contextual $*SCOPE not found"
    set $P5124, $P5128
  vivi_14324420:
    set $P5123, $P5124
  fallback4418:
    set $S5006, $P5123
    concat $S5005, $S5006, " scoped packages are not supported"
    $P5129 = $P5122."panic"($S5005)
    set $P5130, $P5129
  if1427_end4397:
    set $P5131, $P5130
  if1418_end4363:
.annotate 'line', 2086
    nqp_get_sc_object $P5135, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5134, $P5135, "QAST"
    get_who $P5133, $P5134
    set $P5132, $P5133["Stmts"]
    unless_null $P5132, fallback4421
    nqp_get_sc_object $P5136, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5132, $P5136
  fallback4421:
    $P5137 = $P5132."new"()
    $P5138 = _lex_param_1."!make"($P5137)
    .return ($P5138) 
.end
.HLL "nqp"
.namespace []
.sub "package_def" :subid("cuid_291_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2089
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5176 = 'cuid_446_1349901750.327' 
    capture_lex $P5176 
    .const 'Sub' $P5176 = 'cuid_447_1349901750.327' 
    capture_lex $P5176 
    .const 'Sub' $P5176 = 'cuid_448_1349901750.327' 
    capture_lex $P5176 
    .lex "@ns", $P101 
    .lex "$name", $P102 
    .lex "$how", $P103 
    .lex "$past", $P104 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P104, $P5004
    unless_null _lex_param_1, fallback4422
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5008
  fallback4422:
    set $P5007, _lex_param_1["name"]
    unless_null $P5007, fallback4423
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5007, $P5009
  fallback4423:
    set $P5006, $P5007["identifier"]
    unless_null $P5006, fallback4424
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5006, $P5010
  fallback4424:
    clone $P5005, $P5006
    set $P101, $P5005
.annotate 'line', 2092
    $P5011 = $P101."pop"()
    set $S5001, $P5011
    box $P5012, $S5001
    set $P102, $P5012
    find_dynamic_lex $P5014, "%*HOW"
    unless_null $P5014, fallback4425
    nqp_get_sc_object $P5017, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5016, $P5017
    set $P5015, $P5016["%HOW"]
    unless_null $P5015, fallback4426
    nqp_get_sc_object $P5019, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5018, $P5019
    new $P5020, 'Hash'
    set $P5018["%HOW"], $P5020
    set $P5015, $P5020
  fallback4426:
    unless_null $P5015, vivi_14334427
    die "Contextual %*HOW not found"
    box $P5021, "Contextual %*HOW not found"
    set $P5015, $P5021
  vivi_14334427:
    set $P5014, $P5015
  fallback4425:
    find_dynamic_lex $P5022, "$*PKGDECL"
    unless_null $P5022, fallback4428
    nqp_get_sc_object $P5025, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["$PKGDECL"]
    unless_null $P5023, fallback4429
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5023, $P5026
  fallback4429:
    unless_null $P5023, vivi_14344430
    die "Contextual $*PKGDECL not found"
    box $P5027, "Contextual $*PKGDECL not found"
    set $P5023, $P5027
  vivi_14344430:
    set $P5022, $P5023
  fallback4428:
    set $S5002, $P5022
    set $P5013, $P5014[$S5002]
    unless_null $P5013, fallback4431
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5013, $P5028
  fallback4431:
    set $P103, $P5013
    unless_null _lex_param_1, fallback4434
    nqp_get_sc_object $P5030, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5030
  fallback4434:
    set $P5029, _lex_param_1["block"]
    unless_null $P5029, fallback4435
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5029, $P5031
  fallback4435:
    unless $P5029 goto if1435_else4432 
.annotate 'line', 2096
    unless_null _lex_param_1, fallback4436
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5033
  fallback4436:
    set $P5032, _lex_param_1["block"]
    unless_null $P5032, fallback4437
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5032, $P5034
  fallback4437:
    $P5035 = $P5032."ast"()
    set $P5040, $P5035
    goto if1435_end4433
  if1435_else4432:
    unless_null _lex_param_1, fallback4438
    nqp_get_sc_object $P5037, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5037
  fallback4438:
    set $P5036, _lex_param_1["comp_unit"]
    unless_null $P5036, fallback4439
    nqp_get_sc_object $P5038, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5036, $P5038
  fallback4439:
    $P5039 = $P5036."ast"()
    set $P5040, $P5039
  if1435_end4433:
    set $P104, $P5040
    can $I5001, $P103, "parametric"
    box $P5043, $I5001
    set $P5042, $P5043
    unless $I5001 goto if1437_end4443 
.annotate 'line', 2102
    $P5041 = $P103."parametric"($P103)
    set $P5042, $P5041
  if1437_end4443:
    unless $P5042 goto if1436_else4440 
.annotate 'line', 2103
    $P5044 = $P104."blocktype"("declaration")
.annotate 'line', 2104
    nqp_get_sc_object $P5048, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5047, $P5048, "QAST"
    get_who $P5046, $P5047
    set $P5045, $P5046["Var"]
    unless_null $P5045, fallback4444
    nqp_get_sc_object $P5049, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5045, $P5049
  fallback4444:
    $P5050 = $P5045."new"("$?CLASS" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5051 = $P104."unshift"($P5050)
.annotate 'line', 2106
    $P5052 = $P104."symbol"("$?CLASS", "lexical" :named("scope"))
.annotate 'line', 2107
    find_dynamic_lex $P5053, "$*W"
    unless_null $P5053, fallback4445
    nqp_get_sc_object $P5056, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5055, $P5056
    set $P5054, $P5055["$W"]
    unless_null $P5054, fallback4446
    nqp_get_sc_object $P5057, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5054, $P5057
  fallback4446:
    unless_null $P5054, vivi_14384447
    die "Contextual $*W not found"
    box $P5058, "Contextual $*W not found"
    set $P5054, $P5058
  vivi_14384447:
    set $P5053, $P5054
  fallback4445:
    find_dynamic_lex $P5059, "$*PACKAGE"
    unless_null $P5059, fallback4448
    nqp_get_sc_object $P5062, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5061, $P5062
    set $P5060, $P5061["$PACKAGE"]
    unless_null $P5060, fallback4449
    nqp_get_sc_object $P5063, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5060, $P5063
  fallback4449:
    unless_null $P5060, vivi_14394450
    die "Contextual $*PACKAGE not found"
    box $P5064, "Contextual $*PACKAGE not found"
    set $P5060, $P5064
  vivi_14394450:
    set $P5059, $P5060
  fallback4448:
    $P5065 = $P5053."pkg_set_body_block"($P5059, $P104)
.annotate 'line', 2108
    find_dynamic_lex $P5066, "$*W"
    unless_null $P5066, fallback4451
    nqp_get_sc_object $P5069, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5068, $P5069
    set $P5067, $P5068["$W"]
    unless_null $P5067, fallback4452
    nqp_get_sc_object $P5070, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5067, $P5070
  fallback4452:
    unless_null $P5067, vivi_14404453
    die "Contextual $*W not found"
    box $P5071, "Contextual $*W not found"
    set $P5067, $P5071
  vivi_14404453:
    set $P5066, $P5067
  fallback4451:
    find_dynamic_lex $P5072, "$*PACKAGE"
    unless_null $P5072, fallback4454
    nqp_get_sc_object $P5075, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5074, $P5075
    set $P5073, $P5074["$PACKAGE"]
    unless_null $P5073, fallback4455
    nqp_get_sc_object $P5076, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5073, $P5076
  fallback4455:
    unless_null $P5073, vivi_14414456
    die "Contextual $*PACKAGE not found"
    box $P5077, "Contextual $*PACKAGE not found"
    set $P5073, $P5077
  vivi_14414456:
    set $P5072, $P5073
  fallback4454:
    $P5078 = $P5066."install_lexical_symbol"($P104, "$?PACKAGE", $P5072)
.annotate 'line', 2109
    find_dynamic_lex $P5079, "$*W"
    unless_null $P5079, fallback4457
    nqp_get_sc_object $P5082, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5081, $P5082
    set $P5080, $P5081["$W"]
    unless_null $P5080, fallback4458
    nqp_get_sc_object $P5083, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5080, $P5083
  fallback4458:
    unless_null $P5080, vivi_14424459
    die "Contextual $*W not found"
    box $P5084, "Contextual $*W not found"
    set $P5080, $P5084
  vivi_14424459:
    set $P5079, $P5080
  fallback4457:
    find_dynamic_lex $P5085, "$*PACKAGE"
    unless_null $P5085, fallback4460
    nqp_get_sc_object $P5088, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5087, $P5088
    set $P5086, $P5087["$PACKAGE"]
    unless_null $P5086, fallback4461
    nqp_get_sc_object $P5089, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5086, $P5089
  fallback4461:
    unless_null $P5086, vivi_14434462
    die "Contextual $*PACKAGE not found"
    box $P5090, "Contextual $*PACKAGE not found"
    set $P5086, $P5090
  vivi_14434462:
    set $P5085, $P5086
  fallback4460:
    $P5091 = $P5079."install_lexical_symbol"($P104, "$?ROLE", $P5085)
    set $P5119, $P5091
    goto if1436_end4441
  if1436_else4440:
.annotate 'line', 2111
.annotate 'line', 2112
    $P5092 = $P104."blocktype"("immediate")
.annotate 'line', 2113
    find_dynamic_lex $P5093, "$*W"
    unless_null $P5093, fallback4463
    nqp_get_sc_object $P5096, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5095, $P5096
    set $P5094, $P5095["$W"]
    unless_null $P5094, fallback4464
    nqp_get_sc_object $P5097, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5094, $P5097
  fallback4464:
    unless_null $P5094, vivi_14444465
    die "Contextual $*W not found"
    box $P5098, "Contextual $*W not found"
    set $P5094, $P5098
  vivi_14444465:
    set $P5093, $P5094
  fallback4463:
    find_dynamic_lex $P5099, "$*PACKAGE"
    unless_null $P5099, fallback4466
    nqp_get_sc_object $P5102, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5101, $P5102
    set $P5100, $P5101["$PACKAGE"]
    unless_null $P5100, fallback4467
    nqp_get_sc_object $P5103, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5100, $P5103
  fallback4467:
    unless_null $P5100, vivi_14454468
    die "Contextual $*PACKAGE not found"
    box $P5104, "Contextual $*PACKAGE not found"
    set $P5100, $P5104
  vivi_14454468:
    set $P5099, $P5100
  fallback4466:
    $P5105 = $P5093."install_lexical_symbol"($P104, "$?PACKAGE", $P5099)
.annotate 'line', 2114
    find_dynamic_lex $P5106, "$*W"
    unless_null $P5106, fallback4469
    nqp_get_sc_object $P5109, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5108, $P5109
    set $P5107, $P5108["$W"]
    unless_null $P5107, fallback4470
    nqp_get_sc_object $P5110, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5107, $P5110
  fallback4470:
    unless_null $P5107, vivi_14464471
    die "Contextual $*W not found"
    box $P5111, "Contextual $*W not found"
    set $P5107, $P5111
  vivi_14464471:
    set $P5106, $P5107
  fallback4469:
    find_dynamic_lex $P5112, "$*PACKAGE"
    unless_null $P5112, fallback4472
    nqp_get_sc_object $P5115, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5114, $P5115
    set $P5113, $P5114["$PACKAGE"]
    unless_null $P5113, fallback4473
    nqp_get_sc_object $P5116, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5113, $P5116
  fallback4473:
    unless_null $P5113, vivi_14474474
    die "Contextual $*PACKAGE not found"
    box $P5117, "Contextual $*PACKAGE not found"
    set $P5113, $P5117
  vivi_14474474:
    set $P5112, $P5113
  fallback4472:
    $P5118 = $P5106."install_lexical_symbol"($P104, "$?CLASS", $P5112)
    set $P5119, $P5118
  if1436_end4441:
    unless_null _lex_param_1, fallback4477
    nqp_get_sc_object $P5121, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5121
  fallback4477:
    set $P5120, _lex_param_1["parent"]
    unless_null $P5120, fallback4478
    nqp_get_sc_object $P5122, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5120, $P5122
  fallback4478:
    unless $P5120 goto if1448_else4475 
    .const 'Sub' $P5123 = 'cuid_446_1349901750.327' 
    capture_lex $P5123
    $P5124 = $P5123()
    set $P5129, $P5124
    goto if1448_end4476
  if1448_else4475:
    can $I5002, $P103, "set_default_parent"
    box $P5128, $I5002
    set $P5127, $P5128
    unless $I5002 goto if1455_end4500 
    .const 'Sub' $P5125 = 'cuid_447_1349901750.327' 
    capture_lex $P5125
    $P5126 = $P5125()
    set $P5127, $P5126
  if1455_end4500:
    set $P5129, $P5127
  if1448_end4476:
    unless_null _lex_param_1, fallback4517
    nqp_get_sc_object $P5131, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5131
  fallback4517:
    set $P5130, _lex_param_1["role"]
    unless_null $P5130, fallback4518
    nqp_get_sc_object $P5132, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5130, $P5132
  fallback4518:
    set $P5141, $P5130
    unless $P5130 goto if1461_end4516 
.annotate 'line', 2139
    unless_null _lex_param_1, fallback4519
    nqp_get_sc_object $P5137, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5137
  fallback4519:
    set $P5136, _lex_param_1["role"]
    unless_null $P5136, fallback4520
    nqp_get_sc_object $P5138, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5136, $P5138
  fallback4520:
    set $P5133, $P5136
    iter $P5135, $P5136
  for_next4535:
    unless $P5135, for_done4537
    shift $P5140, $P5135
  for_redo4536:
    .const 'Sub' $P5139 = 'cuid_448_1349901750.327' 
    capture_lex $P5139
    $P5133 = $P5139($P5140)
    goto for_next4535
  for_done4537:
    set $P5141, $P5133
  if1461_end4516:
.annotate 'line', 2157
    find_dynamic_lex $P5142, "$*W"
    unless_null $P5142, fallback4538
    nqp_get_sc_object $P5145, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5144, $P5145
    set $P5143, $P5144["$W"]
    unless_null $P5143, fallback4539
    nqp_get_sc_object $P5146, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5143, $P5146
  fallback4539:
    unless_null $P5143, vivi_14684540
    die "Contextual $*W not found"
    box $P5147, "Contextual $*W not found"
    set $P5143, $P5147
  vivi_14684540:
    set $P5142, $P5143
  fallback4538:
    find_dynamic_lex $P5148, "$*PACKAGE"
    unless_null $P5148, fallback4541
    nqp_get_sc_object $P5151, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5150, $P5151
    set $P5149, $P5150["$PACKAGE"]
    unless_null $P5149, fallback4542
    nqp_get_sc_object $P5152, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5149, $P5152
  fallback4542:
    unless_null $P5149, vivi_14694543
    die "Contextual $*PACKAGE not found"
    box $P5153, "Contextual $*PACKAGE not found"
    set $P5149, $P5153
  vivi_14694543:
    set $P5148, $P5149
  fallback4541:
    $P5154 = $P5142."pkg_compose"($P5148)
    unless_null _lex_param_1, fallback4546
    nqp_get_sc_object $P5156, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5156
  fallback4546:
    set $P5155, _lex_param_1["export"]
    unless_null $P5155, fallback4547
    nqp_get_sc_object $P5157, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5155, $P5157
  fallback4547:
    set $P5174, $P5155
    unless $P5155 goto if1470_end4545 
.annotate 'line', 2160
    find_dynamic_lex $P5161, "$*EXPORT"
    unless_null $P5161, fallback4548
    nqp_get_sc_object $P5164, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5163, $P5164
    set $P5162, $P5163["$EXPORT"]
    unless_null $P5162, fallback4549
    nqp_get_sc_object $P5165, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5162, $P5165
  fallback4549:
    unless_null $P5162, vivi_14714550
    die "Contextual $*EXPORT not found"
    box $P5166, "Contextual $*EXPORT not found"
    set $P5162, $P5166
  vivi_14714550:
    set $P5161, $P5162
  fallback4548:
    get_who $P5160, $P5161
    set $P5159, $P5160["DEFAULT"]
    unless_null $P5159, fallback4551
    nqp_get_sc_object $P5167, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5159, $P5167
  fallback4551:
    get_who $P5158, $P5159
    set $S5003, $P102
    find_dynamic_lex $P5168, "$*PACKAGE"
    unless_null $P5168, fallback4552
    nqp_get_sc_object $P5171, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5170, $P5171
    set $P5169, $P5170["$PACKAGE"]
    unless_null $P5169, fallback4553
    nqp_get_sc_object $P5172, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5169, $P5172
  fallback4553:
    unless_null $P5169, vivi_14724554
    die "Contextual $*PACKAGE not found"
    box $P5173, "Contextual $*PACKAGE not found"
    set $P5169, $P5173
  vivi_14724554:
    set $P5168, $P5169
  fallback4552:
    set $P5158[$S5003], $P5168
    set $P5174, $P5168
  if1470_end4545:
.annotate 'line', 2164
    $P5175 = _lex_param_1."!make"($P104)
    .return ($P5175) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_446_1349901750.327") :anon :lex :outer("cuid_291_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2118
    .lex "$parent", $P101 
    .lex "$parent_found", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
    new $P5020, 'ExceptionHandler'
    set_label $P5020, catch_handler_14514487
    $P5020.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5020
.annotate 'line', 2121
.annotate 'line', 2122
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4479
    nqp_get_sc_object $P5006, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4480
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5004, $P5007
  fallback4480:
    unless_null $P5004, vivi_14494481
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_14494481:
    set $P5003, $P5004
  fallback4479:
    find_lex $P5013, "$/"
    unless_null $P5013, fallback4482
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5013, $P5014
  fallback4482:
    set $P5012, $P5013["parent"]
    unless_null $P5012, fallback4483
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5012, $P5015
  fallback4483:
    set $P5011, $P5012[0]
    unless_null $P5011, fallback4484
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5011, $P5016
  fallback4484:
    set $P5010, $P5011["identifier"]
    unless_null $P5010, fallback4485
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5010, $P5017
  fallback4485:
    clone $P5009, $P5010
    $P5018 = $P5003."find_sym"($P5009)
    set $P101, $P5018
    box $P5019, 1
    set $P102, $P5019
    set $P5021, $P102
    pop_eh 
    goto skip_handler_14504486
  catch_handler_14514487:
    .get_results ($P5020) 
    set $I10001, 1
    set $P5020["handled"], $I10001
    nqp_get_sc_object $P10001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    finalize $P5020
    pop_upto_eh $P5020
    pop_eh 
    set $P5021, $P10001
    goto skip_handler_14504486
  skip_handler_14504486:
    unless $P102 goto if1452_else4488 
.annotate 'line', 2125
.annotate 'line', 2126
    find_dynamic_lex $P5022, "$*W"
    unless_null $P5022, fallback4490
    nqp_get_sc_object $P5025, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["$W"]
    unless_null $P5023, fallback4491
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5023, $P5026
  fallback4491:
    unless_null $P5023, vivi_14534492
    die "Contextual $*W not found"
    box $P5027, "Contextual $*W not found"
    set $P5023, $P5027
  vivi_14534492:
    set $P5022, $P5023
  fallback4490:
    find_dynamic_lex $P5028, "$*PACKAGE"
    unless_null $P5028, fallback4493
    nqp_get_sc_object $P5031, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5030, $P5031
    set $P5029, $P5030["$PACKAGE"]
    unless_null $P5029, fallback4494
    nqp_get_sc_object $P5032, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5029, $P5032
  fallback4494:
    unless_null $P5029, vivi_14544495
    die "Contextual $*PACKAGE not found"
    box $P5033, "Contextual $*PACKAGE not found"
    set $P5029, $P5033
  vivi_14544495:
    set $P5028, $P5029
  fallback4493:
    $P5034 = $P5022."pkg_add_parent_or_role"($P5028, "add_parent", $P101)
    set $P5044, $P5034
    goto if1452_end4489
  if1452_else4488:
.annotate 'line', 2128
.annotate 'line', 2129
    find_lex $P5035, "$/"
    $P5036 = $P5035."CURSOR"()
    find_lex $P5039, "$/"
    unless_null $P5039, fallback4496
    nqp_get_sc_object $P5040, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5039, $P5040
  fallback4496:
    set $P5038, $P5039["parent"]
    unless_null $P5038, fallback4497
    nqp_get_sc_object $P5041, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5038, $P5041
  fallback4497:
    set $P5037, $P5038[0]
    unless_null $P5037, fallback4498
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5037, $P5042
  fallback4498:
    set $S5003, $P5037
    concat $S5002, "Could not find parent class '", $S5003
    concat $S5001, $S5002, "'"
    $P5043 = $P5036."panic"($S5001)
    set $P5044, $P5043
  if1452_end4489:
    .return ($P5044) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_447_1349901750.327") :anon :lex :outer("cuid_291_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2132
    .lex "$default", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    find_dynamic_lex $P5002, "$*PKGDECL"
    unless_null $P5002, fallback4503
    nqp_get_sc_object $P5005, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$PKGDECL"]
    unless_null $P5003, fallback4504
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5003, $P5006
  fallback4504:
    unless_null $P5003, vivi_14574505
    die "Contextual $*PKGDECL not found"
    box $P5007, "Contextual $*PKGDECL not found"
    set $P5003, $P5007
  vivi_14574505:
    set $P5002, $P5003
  fallback4503:
    set $S5001, $P5002
    iseq $I5001, $S5001, "grammar"
    unless $I5001 goto if1456_else4501 
    new $P5008, 'ResizablePMCArray'
    box $P5009, "NQPCursor"
    push $P5008, $P5009
    set $P5012, $P5008
    goto if1456_end4502
  if1456_else4501:
    new $P5010, 'ResizablePMCArray'
    box $P5011, "NQPMu"
    push $P5010, $P5011
    set $P5012, $P5010
  if1456_end4502:
    set $P101, $P5012
.annotate 'line', 2134
    find_dynamic_lex $P5013, "$*W"
    unless_null $P5013, fallback4506
    nqp_get_sc_object $P5016, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$W"]
    unless_null $P5014, fallback4507
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5014, $P5017
  fallback4507:
    unless_null $P5014, vivi_14584508
    die "Contextual $*W not found"
    box $P5018, "Contextual $*W not found"
    set $P5014, $P5018
  vivi_14584508:
    set $P5013, $P5014
  fallback4506:
    find_dynamic_lex $P5019, "$*PACKAGE"
    unless_null $P5019, fallback4509
    nqp_get_sc_object $P5022, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["$PACKAGE"]
    unless_null $P5020, fallback4510
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5020, $P5023
  fallback4510:
    unless_null $P5020, vivi_14594511
    die "Contextual $*PACKAGE not found"
    box $P5024, "Contextual $*PACKAGE not found"
    set $P5020, $P5024
  vivi_14594511:
    set $P5019, $P5020
  fallback4509:
.annotate 'line', 2135
    find_dynamic_lex $P5025, "$*W"
    unless_null $P5025, fallback4512
    nqp_get_sc_object $P5028, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5027, $P5028
    set $P5026, $P5027["$W"]
    unless_null $P5026, fallback4513
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5026, $P5029
  fallback4513:
    unless_null $P5026, vivi_14604514
    die "Contextual $*W not found"
    box $P5030, "Contextual $*W not found"
    set $P5026, $P5030
  vivi_14604514:
    set $P5025, $P5026
  fallback4512:
    $P5031 = $P5025."find_sym"($P101)
    $P5032 = $P5013."pkg_add_parent_or_role"($P5019, "set_default_parent", $P5031)
    .return ($P5032) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_448_1349901750.327") :anon :lex :outer("cuid_291_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2140
    .param pmc _lex_param_0 
    .lex "$role", $P101 
    .lex "$role_found", $P102 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
    new $P5014, 'ExceptionHandler'
    set_label $P5014, catch_handler_14644526
    $P5014.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5014
.annotate 'line', 2143
.annotate 'line', 2144
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4521
    nqp_get_sc_object $P5006, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4522
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5004, $P5007
  fallback4522:
    unless_null $P5004, vivi_14624523
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_14624523:
    set $P5003, $P5004
  fallback4521:
    set $P5010, _lex_param_0["identifier"]
    unless_null $P5010, fallback4524
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5010, $P5011
  fallback4524:
    clone $P5009, $P5010
    $P5012 = $P5003."find_sym"($P5009)
    set $P101, $P5012
    box $P5013, 1
    set $P102, $P5013
    set $P5015, $P102
    pop_eh 
    goto skip_handler_14634525
  catch_handler_14644526:
    .get_results ($P5014) 
    set $I10001, 1
    set $P5014["handled"], $I10001
    nqp_get_sc_object $P10001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    finalize $P5014
    pop_upto_eh $P5014
    pop_eh 
    set $P5015, $P10001
    goto skip_handler_14634525
  skip_handler_14634525:
    unless $P102 goto if1465_else4527 
.annotate 'line', 2147
.annotate 'line', 2148
    find_dynamic_lex $P5016, "$*W"
    unless_null $P5016, fallback4529
    nqp_get_sc_object $P5019, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5018, $P5019
    set $P5017, $P5018["$W"]
    unless_null $P5017, fallback4530
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5017, $P5020
  fallback4530:
    unless_null $P5017, vivi_14664531
    die "Contextual $*W not found"
    box $P5021, "Contextual $*W not found"
    set $P5017, $P5021
  vivi_14664531:
    set $P5016, $P5017
  fallback4529:
    find_dynamic_lex $P5022, "$*PACKAGE"
    unless_null $P5022, fallback4532
    nqp_get_sc_object $P5025, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["$PACKAGE"]
    unless_null $P5023, fallback4533
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5023, $P5026
  fallback4533:
    unless_null $P5023, vivi_14674534
    die "Contextual $*PACKAGE not found"
    box $P5027, "Contextual $*PACKAGE not found"
    set $P5023, $P5027
  vivi_14674534:
    set $P5022, $P5023
  fallback4532:
    $P5028 = $P5016."pkg_add_parent_or_role"($P5022, "add_role", $P101)
    set $P5032, $P5028
    goto if1465_end4528
  if1465_else4527:
.annotate 'line', 2150
.annotate 'line', 2151
    find_lex $P5029, "$/"
    $P5030 = $P5029."CURSOR"()
    set $S5003, _lex_param_0
    concat $S5002, "Could not find role '", $S5003
    concat $S5001, $S5002, "'"
    $P5031 = $P5030."panic"($S5001)
    set $P5032, $P5031
  if1465_end4528:
    .return ($P5032) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<my>" :subid("cuid_292_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2167
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4555
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback4555:
    set $P5001, _lex_param_1["scoped"]
    unless_null $P5001, fallback4556
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback4556:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<our>" :subid("cuid_293_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2168
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4557
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback4557:
    set $P5001, _lex_param_1["scoped"]
    unless_null $P5001, fallback4558
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback4558:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<has>" :subid("cuid_294_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2169
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4559
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback4559:
    set $P5001, _lex_param_1["scoped"]
    unless_null $P5001, fallback4560
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback4560:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "scoped" :subid("cuid_295_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2171
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2172
    unless_null _lex_param_1, fallback4563
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback4563:
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4564
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback4564:
    unless $P5001 goto if1473_else4561 
    unless_null _lex_param_1, fallback4565
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5005
  fallback4565:
    set $P5004, _lex_param_1["declarator"]
    unless_null $P5004, fallback4566
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5004, $P5006
  fallback4566:
    $P5007 = $P5004."ast"()
    set $P5020, $P5007
    goto if1473_end4562
  if1473_else4561:
    unless_null _lex_param_1, fallback4569
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5009
  fallback4569:
    set $P5008, _lex_param_1["multi_declarator"]
    unless_null $P5008, fallback4570
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5008, $P5010
  fallback4570:
    unless $P5008 goto if1474_else4567 
.annotate 'line', 2173
    unless_null _lex_param_1, fallback4571
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5012
  fallback4571:
    set $P5011, _lex_param_1["multi_declarator"]
    unless_null $P5011, fallback4572
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5011, $P5013
  fallback4572:
    $P5014 = $P5011."ast"()
    set $P5019, $P5014
    goto if1474_end4568
  if1474_else4567:
.annotate 'line', 2174
    unless_null _lex_param_1, fallback4573
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5016
  fallback4573:
    set $P5015, _lex_param_1["package_declarator"]
    unless_null $P5015, fallback4574
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5015, $P5017
  fallback4574:
    $P5018 = $P5015."ast"()
    set $P5019, $P5018
  if1474_end4568:
    set $P5020, $P5019
  if1473_end4562:
    $P5021 = _lex_param_1."!make"($P5020)
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "declarator" :subid("cuid_296_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2177
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2178
    unless_null _lex_param_1, fallback4577
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback4577:
    set $P5001, _lex_param_1["routine_declarator"]
    unless_null $P5001, fallback4578
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback4578:
    unless $P5001 goto if1475_else4575 
.annotate 'line', 2179
    unless_null _lex_param_1, fallback4579
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5005
  fallback4579:
    set $P5004, _lex_param_1["routine_declarator"]
    unless_null $P5004, fallback4580
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5004, $P5006
  fallback4580:
    $P5007 = $P5004."ast"()
    set $P5012, $P5007
    goto if1475_end4576
  if1475_else4575:
.annotate 'line', 2180
    unless_null _lex_param_1, fallback4581
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5009
  fallback4581:
    set $P5008, _lex_param_1["variable_declarator"]
    unless_null $P5008, fallback4582
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5008, $P5010
  fallback4582:
    $P5011 = $P5008."ast"()
    set $P5012, $P5011
  if1475_end4576:
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<multi>" :subid("cuid_297_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2183
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4585
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback4585:
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4586
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback4586:
    unless $P5001 goto if1476_else4583 
    unless_null _lex_param_1, fallback4587
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5005
  fallback4587:
    set $P5004, _lex_param_1["declarator"]
    unless_null $P5004, fallback4588
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5004, $P5006
  fallback4588:
    $P5007 = $P5004."ast"()
    set $P5012, $P5007
    goto if1476_end4584
  if1476_else4583:
    unless_null _lex_param_1, fallback4589
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5009
  fallback4589:
    set $P5008, _lex_param_1["routine_def"]
    unless_null $P5008, fallback4590
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5008, $P5010
  fallback4590:
    $P5011 = $P5008."ast"()
    set $P5012, $P5011
  if1476_end4584:
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<proto>" :subid("cuid_298_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2184
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4593
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback4593:
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4594
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback4594:
    unless $P5001 goto if1477_else4591 
    unless_null _lex_param_1, fallback4595
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5005
  fallback4595:
    set $P5004, _lex_param_1["declarator"]
    unless_null $P5004, fallback4596
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5004, $P5006
  fallback4596:
    $P5007 = $P5004."ast"()
    set $P5012, $P5007
    goto if1477_end4592
  if1477_else4591:
    unless_null _lex_param_1, fallback4597
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5009
  fallback4597:
    set $P5008, _lex_param_1["routine_def"]
    unless_null $P5008, fallback4598
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5008, $P5010
  fallback4598:
    $P5011 = $P5008."ast"()
    set $P5012, $P5011
  if1477_end4592:
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<null>" :subid("cuid_299_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2185
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4599
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback4599:
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4600
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback4600:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "variable_declarator" :subid("cuid_300_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2188
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5071 = 'cuid_449_1349901750.327' 
    capture_lex $P5071 
    .const 'Sub' $P5071 = 'cuid_451_1349901750.327' 
    capture_lex $P5071 
    .const 'Sub' $P5071 = 'cuid_452_1349901750.327' 
    capture_lex $P5071 
    .lex "$past", $P101 
    .lex "$sigil", $P102 
    .lex "$name", $P103 
    .lex "$BLOCK", $P104 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P104, $P5004
.annotate 'line', 2189
    unless_null _lex_param_1, fallback4601
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5006
  fallback4601:
    set $P5005, _lex_param_1["variable"]
    unless_null $P5005, fallback4602
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5005, $P5007
  fallback4602:
    $P5008 = $P5005."ast"()
    set $P101, $P5008
    unless_null _lex_param_1, fallback4603
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5011
  fallback4603:
    set $P5010, _lex_param_1["variable"]
    unless_null $P5010, fallback4604
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5010, $P5012
  fallback4604:
    set $P5009, $P5010["sigil"]
    unless_null $P5009, fallback4605
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5009, $P5013
  fallback4605:
    set $P102, $P5009
.annotate 'line', 2191
    $P5014 = $P101."name"()
    set $P103, $P5014
.annotate 'line', 2192
    find_dynamic_lex $P5015, "$*W"
    unless_null $P5015, fallback4606
    nqp_get_sc_object $P5018, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["$W"]
    unless_null $P5016, fallback4607
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5016, $P5019
  fallback4607:
    unless_null $P5016, vivi_14784608
    die "Contextual $*W not found"
    box $P5020, "Contextual $*W not found"
    set $P5016, $P5020
  vivi_14784608:
    set $P5015, $P5016
  fallback4606:
    $P5021 = $P5015."cur_lexpad"()
    set $P104, $P5021
    set $P5023, $P103
    unless $P103 goto if1480_end4612 
.annotate 'line', 2193
    $P5022 = $P104."symbol"($P103)
    set $P5023, $P5022
  if1480_end4612:
    set $P5026, $P5023
    unless $P5023 goto if1479_end4610 
.annotate 'line', 2194
    $P5024 = _lex_param_1."CURSOR"()
    $P5025 = $P5024."panic"("Redeclaration of symbol ", $P103)
    set $P5026, $P5025
  if1479_end4610:
    find_dynamic_lex $P5027, "$*SCOPE"
    unless_null $P5027, fallback4615
    nqp_get_sc_object $P5030, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5029, $P5030
    set $P5028, $P5029["$SCOPE"]
    unless_null $P5028, fallback4616
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5028, $P5031
  fallback4616:
    unless_null $P5028, vivi_14824617
    die "Contextual $*SCOPE not found"
    box $P5032, "Contextual $*SCOPE not found"
    set $P5028, $P5032
  vivi_14824617:
    set $P5027, $P5028
  fallback4615:
    set $S5001, $P5027
    iseq $I5001, $S5001, "has"
    unless $I5001 goto if1481_else4613 
    .const 'Sub' $P5033 = 'cuid_449_1349901750.327' 
    capture_lex $P5033
    $P5034 = $P5033()
    set $P5057, $P5034
    goto if1481_end4614
  if1481_else4613:
    find_dynamic_lex $P5035, "$*SCOPE"
    unless_null $P5035, fallback4669
    nqp_get_sc_object $P5038, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5037, $P5038
    set $P5036, $P5037["$SCOPE"]
    unless_null $P5036, fallback4670
    nqp_get_sc_object $P5039, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5036, $P5039
  fallback4670:
    unless_null $P5036, vivi_15004671
    die "Contextual $*SCOPE not found"
    box $P5040, "Contextual $*SCOPE not found"
    set $P5036, $P5040
  vivi_15004671:
    set $P5035, $P5036
  fallback4669:
    set $S5002, $P5035
    iseq $I5002, $S5002, "our"
    unless $I5002 goto if1499_else4667 
.annotate 'line', 2224
    unless_null _lex_param_1, fallback4674
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5042
  fallback4674:
    set $P5041, _lex_param_1["typename"]
    unless_null $P5041, fallback4675
    nqp_get_sc_object $P5043, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5041, $P5043
  fallback4675:
    set $P5046, $P5041
    unless $P5041 goto if1501_end4673 
.annotate 'line', 2228
.annotate 'line', 2229
    $P5044 = _lex_param_1."CURSOR"()
    $P5045 = $P5044."panic"("Cannot put types on our-scoped variables")
    set $P5046, $P5045
  if1501_end4673:
    unless_null _lex_param_1, fallback4676
    nqp_get_sc_object $P5048, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5048
  fallback4676:
    set $P5047, _lex_param_1["variable"]
    unless_null $P5047, fallback4677
    nqp_get_sc_object $P5049, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5047, $P5049
  fallback4677:
    set $S5003, $P5047
    box $P5050, $S5003
    set $P103, $P5050
.annotate 'line', 2232
    new $P5051, 'ResizablePMCArray'
    push $P5051, $P103
    $P5052 = "&lexical_package_lookup"($P5051, _lex_param_1)
    set $P101, $P5052
.annotate 'line', 2233
    $P5053 = $P104."symbol"($P103, "package" :named("scope"))
    set $P5056, $P5053
    goto if1499_end4668
  if1499_else4667:
    .const 'Sub' $P5054 = 'cuid_451_1349901750.327' 
    capture_lex $P5054
    $P5055 = $P5054()
    set $P5056, $P5055
  if1499_end4668:
    set $P5057, $P5056
  if1481_end4614:
    unless_null _lex_param_1, fallback4697
    nqp_get_sc_object $P5059, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5059
  fallback4697:
    set $P5058, _lex_param_1["trait"]
    unless_null $P5058, fallback4698
    nqp_get_sc_object $P5060, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5058, $P5060
  fallback4698:
    set $P5069, $P5058
    unless $P5058 goto if1506_end4696 
.annotate 'line', 2262
    unless_null _lex_param_1, fallback4699
    nqp_get_sc_object $P5065, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5065
  fallback4699:
    set $P5064, _lex_param_1["trait"]
    unless_null $P5064, fallback4700
    nqp_get_sc_object $P5066, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5064, $P5066
  fallback4700:
    set $P5061, $P5064
    iter $P5063, $P5064
  for_next4701:
    unless $P5063, for_done4703
    shift $P5068, $P5063
  for_redo4702:
    .const 'Sub' $P5067 = 'cuid_452_1349901750.327' 
    capture_lex $P5067
    $P5061 = $P5067($P5068)
    goto for_next4701
  for_done4703:
    set $P5069, $P5061
  if1506_end4696:
.annotate 'line', 2266
    $P5070 = _lex_param_1."!make"($P101)
    .return ($P5070) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_449_1349901750.327") :anon :lex :outer("cuid_300_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2196
    .lex "%lit_args", $P101 
    .lex "%obj_args", $P102 
    new $P5001, 'Hash'
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    find_dynamic_lex $P5003, "%*HOW"
    unless_null $P5003, fallback4620
    nqp_get_sc_object $P5006, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["%HOW"]
    unless_null $P5004, fallback4621
    nqp_get_sc_object $P5008, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5007, $P5008
    new $P5009, 'Hash'
    set $P5007["%HOW"], $P5009
    set $P5004, $P5009
  fallback4621:
    unless_null $P5004, vivi_14844622
    die "Contextual %*HOW not found"
    box $P5010, "Contextual %*HOW not found"
    set $P5004, $P5010
  vivi_14844622:
    set $P5003, $P5004
  fallback4620:
    find_dynamic_lex $P5011, "$*PKGDECL"
    unless_null $P5011, fallback4623
    nqp_get_sc_object $P5014, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["$PKGDECL"]
    unless_null $P5012, fallback4624
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5012, $P5015
  fallback4624:
    unless_null $P5012, vivi_14854625
    die "Contextual $*PKGDECL not found"
    box $P5016, "Contextual $*PKGDECL not found"
    set $P5012, $P5016
  vivi_14854625:
    set $P5011, $P5012
  fallback4623:
    set $S5002, $P5011
    concat $S5001, $S5002, "-attr"
    exists $I5001, $P5003[$S5001]
    box $P5027, $I5001
    set $P5026, $P5027
    if $I5001 goto unless1483_end4619 
.annotate 'line', 2198
.annotate 'line', 2199
    find_lex $P5017, "$/"
    $P5018 = $P5017."CURSOR"()
    find_dynamic_lex $P5019, "$*PKGDECL"
    unless_null $P5019, fallback4626
    nqp_get_sc_object $P5022, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["$PKGDECL"]
    unless_null $P5020, fallback4627
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5020, $P5023
  fallback4627:
    unless_null $P5020, vivi_14864628
    die "Contextual $*PKGDECL not found"
    box $P5024, "Contextual $*PKGDECL not found"
    set $P5020, $P5024
  vivi_14864628:
    set $P5019, $P5020
  fallback4626:
    set $S5004, $P5019
    concat $S5003, $S5004, " packages do not support attributes"
    $P5025 = $P5018."panic"($S5003)
    set $P5026, $P5025
  unless1483_end4619:
    find_lex $P5028, "$name"
    set $P101["name"], $P5028
    find_lex $P5030, "$/"
    unless_null $P5030, fallback4631
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5030, $P5031
  fallback4631:
    set $P5029, $P5030["typename"]
    unless_null $P5029, fallback4632
    nqp_get_sc_object $P5032, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5029, $P5032
  fallback4632:
    set $P5048, $P5029
    unless $P5029 goto if1487_end4630 
.annotate 'line', 2206
.annotate 'line', 2207
    find_dynamic_lex $P5033, "$*W"
    unless_null $P5033, fallback4633
    nqp_get_sc_object $P5036, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5035, $P5036
    set $P5034, $P5035["$W"]
    unless_null $P5034, fallback4634
    nqp_get_sc_object $P5037, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5034, $P5037
  fallback4634:
    unless_null $P5034, vivi_14884635
    die "Contextual $*W not found"
    box $P5038, "Contextual $*W not found"
    set $P5034, $P5038
  vivi_14884635:
    set $P5033, $P5034
  fallback4633:
    new $P5039, 'ResizablePMCArray'
    find_lex $P5042, "$/"
    unless_null $P5042, fallback4636
    nqp_get_sc_object $P5043, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5042, $P5043
  fallback4636:
    set $P5041, $P5042["typename"]
    unless_null $P5041, fallback4637
    nqp_get_sc_object $P5044, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5041, $P5044
  fallback4637:
    set $P5040, $P5041[0]
    unless_null $P5040, fallback4638
    nqp_get_sc_object $P5045, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5040, $P5045
  fallback4638:
    set $S5005, $P5040
    box $P5046, $S5005
    push $P5039, $P5046
    $P5047 = $P5033."find_sym"($P5039)
    set $P102["type"], $P5047
    set $P5048, $P5047
  if1487_end4630:
    find_lex $P5049, "$sigil"
    set $S5006, $P5049
    iseq $I5002, $S5006, "$"
    set $I5004, $I5002
    if $I5002 goto unless1490_end4642 
    find_lex $P5050, "$sigil"
    set $S5007, $P5050
    iseq $I5003, $S5007, "&"
    set $I5004, $I5003
  unless1490_end4642:
    box $P5070, $I5004
    set $P5069, $P5070
    unless $I5004 goto if1489_end4640 
.annotate 'line', 2209
    find_lex $P5052, "$/"
    unless_null $P5052, fallback4645
    nqp_get_sc_object $P5053, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5052, $P5053
  fallback4645:
    set $P5051, $P5052["typename"]
    unless_null $P5051, fallback4646
    nqp_get_sc_object $P5054, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5051, $P5054
  fallback4646:
    unless $P5051 goto if1491_else4643 
.annotate 'line', 2210
    set $P5055, $P102["type"]
    unless_null $P5055, fallback4647
    nqp_get_sc_object $P5056, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5055, $P5056
  fallback4647:
    set $P102["default"], $P5055
    set $P5068, $P5055
    goto if1491_end4644
  if1491_else4643:
.annotate 'line', 2213
    new $P5066, 'ExceptionHandler'
    set_label $P5066, catch_handler_14944652
    $P5066.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5066
.annotate 'line', 2214
    find_dynamic_lex $P5057, "$*W"
    unless_null $P5057, fallback4648
    nqp_get_sc_object $P5060, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5059, $P5060
    set $P5058, $P5059["$W"]
    unless_null $P5058, fallback4649
    nqp_get_sc_object $P5061, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5058, $P5061
  fallback4649:
    unless_null $P5058, vivi_14924650
    die "Contextual $*W not found"
    box $P5062, "Contextual $*W not found"
    set $P5058, $P5062
  vivi_14924650:
    set $P5057, $P5058
  fallback4648:
    new $P5063, 'ResizablePMCArray'
    box $P5064, "NQPMu"
    push $P5063, $P5064
    $P5065 = $P5057."find_sym"($P5063)
    set $P102["default"], $P5065
    set $P5067, $P5065
    pop_eh 
    goto skip_handler_14934651
  catch_handler_14944652:
    .get_results ($P5066) 
    set $I10001, 1
    set $P5066["handled"], $I10001
    nqp_get_sc_object $P10001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    finalize $P5066
    pop_upto_eh $P5066
    pop_eh 
    set $P5067, $P10001
    goto skip_handler_14934651
  skip_handler_14934651:
    set $P5068, $P5067
  if1491_end4644:
    set $P5069, $P5068
  if1489_end4640:
.annotate 'line', 2219
    find_dynamic_lex $P5071, "$*W"
    unless_null $P5071, fallback4653
    nqp_get_sc_object $P5074, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5073, $P5074
    set $P5072, $P5073["$W"]
    unless_null $P5072, fallback4654
    nqp_get_sc_object $P5075, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5072, $P5075
  fallback4654:
    unless_null $P5072, vivi_14954655
    die "Contextual $*W not found"
    box $P5076, "Contextual $*W not found"
    set $P5072, $P5076
  vivi_14954655:
    set $P5071, $P5072
  fallback4653:
    find_dynamic_lex $P5077, "$*PACKAGE"
    unless_null $P5077, fallback4656
    nqp_get_sc_object $P5080, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5079, $P5080
    set $P5078, $P5079["$PACKAGE"]
    unless_null $P5078, fallback4657
    nqp_get_sc_object $P5081, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5078, $P5081
  fallback4657:
    unless_null $P5078, vivi_14964658
    die "Contextual $*PACKAGE not found"
    box $P5082, "Contextual $*PACKAGE not found"
    set $P5078, $P5082
  vivi_14964658:
    set $P5077, $P5078
  fallback4656:
    find_dynamic_lex $P5084, "%*HOW"
    unless_null $P5084, fallback4659
    nqp_get_sc_object $P5087, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5086, $P5087
    set $P5085, $P5086["%HOW"]
    unless_null $P5085, fallback4660
    nqp_get_sc_object $P5089, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5088, $P5089
    new $P5090, 'Hash'
    set $P5088["%HOW"], $P5090
    set $P5085, $P5090
  fallback4660:
    unless_null $P5085, vivi_14974661
    die "Contextual %*HOW not found"
    box $P5091, "Contextual %*HOW not found"
    set $P5085, $P5091
  vivi_14974661:
    set $P5084, $P5085
  fallback4659:
    find_dynamic_lex $P5092, "$*PKGDECL"
    unless_null $P5092, fallback4662
    nqp_get_sc_object $P5095, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5094, $P5095
    set $P5093, $P5094["$PKGDECL"]
    unless_null $P5093, fallback4663
    nqp_get_sc_object $P5096, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5093, $P5096
  fallback4663:
    unless_null $P5093, vivi_14984664
    die "Contextual $*PKGDECL not found"
    box $P5097, "Contextual $*PKGDECL not found"
    set $P5093, $P5097
  vivi_14984664:
    set $P5092, $P5093
  fallback4662:
    set $S5009, $P5092
    concat $S5008, $S5009, "-attr"
    set $P5083, $P5084[$S5008]
    unless_null $P5083, fallback4665
    nqp_get_sc_object $P5098, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5083, $P5098
  fallback4665:
    $P5099 = $P5071."pkg_add_attribute"($P5077, $P5083, $P101, $P102)
.annotate 'line', 2222
    nqp_get_sc_object $P5103, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5102, $P5103, "QAST"
    get_who $P5101, $P5102
    set $P5100, $P5101["Stmts"]
    unless_null $P5100, fallback4666
    nqp_get_sc_object $P5104, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5100, $P5104
  fallback4666:
    $P5105 = $P5100."new"()
    store_lex "$past", $P5105
    .return ($P5105) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_451_1349901750.327") :anon :lex :outer("cuid_300_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2235
    .const 'Sub' $P5058 = 'cuid_450_1349901750.327' 
    capture_lex $P5058 
    .lex "$type", $P101 
    .lex "$default", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
    find_lex $P5004, "$/"
    unless_null $P5004, fallback4680
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5004, $P5005
  fallback4680:
    set $P5003, $P5004["typename"]
    unless_null $P5003, fallback4681
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5003, $P5006
  fallback4681:
    unless $P5003 goto if1502_else4678 
.annotate 'line', 2238
    find_lex $P5007, "$sigil"
    set $S5001, $P5007
    iseq $I5001, $S5001, "$"
    box $P5012, $I5001
    set $P5011, $P5012
    if $I5001 goto unless1503_end4683 
.annotate 'line', 2239
.annotate 'line', 2240
    find_lex $P5008, "$/"
    $P5009 = $P5008."CURSOR"()
    $P5010 = $P5009."panic"("Only typed scalars are currently supported in NQP")
    set $P5011, $P5010
  unless1503_end4683:
.annotate 'line', 2242
    find_dynamic_lex $P5013, "$*W"
    unless_null $P5013, fallback4684
    nqp_get_sc_object $P5016, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$W"]
    unless_null $P5014, fallback4685
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5014, $P5017
  fallback4685:
    unless_null $P5014, vivi_15044686
    die "Contextual $*W not found"
    box $P5018, "Contextual $*W not found"
    set $P5014, $P5018
  vivi_15044686:
    set $P5013, $P5014
  fallback4684:
    new $P5019, 'ResizablePMCArray'
    find_lex $P5022, "$/"
    unless_null $P5022, fallback4687
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5022, $P5023
  fallback4687:
    set $P5021, $P5022["typename"]
    unless_null $P5021, fallback4688
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5021, $P5024
  fallback4688:
    set $P5020, $P5021[0]
    unless_null $P5020, fallback4689
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5020, $P5025
  fallback4689:
    set $S5002, $P5020
    box $P5026, $S5002
    push $P5019, $P5026
    $P5027 = $P5013."find_sym"($P5019)
    set $P101, $P5027
    repr_get_primitive_type_spec $I5002, $P101
    unless $I5002 goto if1505_else4690 
    .const 'Sub' $P5028 = 'cuid_450_1349901750.327' 
    capture_lex $P5028
    $P5029 = $P5028($I5002)
    set $P5033, $P5029
    goto if1505_end4691
  if1505_else4690:
.annotate 'line', 2246
.annotate 'line', 2247
    find_lex $P5030, "$/"
    $P5031 = $P5030."CURSOR"()
    $P5032 = $P5031."panic"("Only native types are currently supported/checked")
    set $P5033, $P5032
  if1505_end4691:
    set $P5036, $P5033
    goto if1502_end4679
  if1502_else4678:
.annotate 'line', 2250
.annotate 'line', 2251
    find_lex $P5034, "$sigil"
    $P5035 = "&default_for"($P5034)
    set $P102, $P5035
    set $P5036, $P102
  if1502_end4679:
.annotate 'line', 2253
    find_lex $P5038, "$BLOCK"
    set $P5037, $P5038[0]
    unless_null $P5037, fallback4692
    nqp_get_sc_object $P5039, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5037, $P5039
  fallback4692:
    nqp_get_sc_object $P5043, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5042, $P5043, "QAST"
    get_who $P5041, $P5042
    set $P5040, $P5041["Op"]
    unless_null $P5040, fallback4693
    nqp_get_sc_object $P5044, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5040, $P5044
  fallback4693:
    find_lex $P5045, "$/"
.annotate 'line', 2255
    nqp_get_sc_object $P5049, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5048, $P5049, "QAST"
    get_who $P5047, $P5048
    set $P5046, $P5047["Var"]
    unless_null $P5046, fallback4694
    nqp_get_sc_object $P5050, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5046, $P5050
  fallback4694:
    find_lex $P5051, "$name"
    $P5052 = $P5046."new"($P5051 :named("name"), "lexical" :named("scope"), "var" :named("decl"), $P101 :named("returns"))
    $P5053 = $P5040."new"($P5052, $P102, "bind" :named("op"), $P5045 :named("node"))
    $P5054 = $P5037."push"($P5053)
.annotate 'line', 2258
    find_lex $P5055, "$BLOCK"
    find_lex $P5056, "$name"
    $P5057 = $P5055."symbol"($P5056, "lexical" :named("scope"), $P101 :named("type"))
    .return ($P5057) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_450_1349901750.327") :anon :lex :outer("cuid_451_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2243
    .param pmc _lex_param_0 
    .lex "$prim_spec", _lex_param_0 
.annotate 'line', 2244
    $P5001 = "&default_value_for_prim"(_lex_param_0)
    store_lex "$default", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_452_1349901750.327") :anon :lex :outer("cuid_300_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2263
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$/"
    $P5001 = _lex_param_0."ast"()
    $P5003 = $P5001($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<sub>" :subid("cuid_301_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2269
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4704
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback4704:
    set $P5001, _lex_param_1["routine_def"]
    unless_null $P5001, fallback4705
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback4705:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<method>" :subid("cuid_302_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2270
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4706
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback4706:
    set $P5001, _lex_param_1["method_def"]
    unless_null $P5001, fallback4707
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback4707:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "routine_def" :subid("cuid_303_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2272
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5064 = 'cuid_456_1349901750.327' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_459_1349901750.327' 
    capture_lex $P5064 
    .lex "$past", $P101 
    .lex "$block", $P102 
    .lex "$lexpast", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P103, $P5003
    unless_null _lex_param_1, fallback4710
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5005
  fallback4710:
    set $P5004, _lex_param_1["onlystar"]
    unless_null $P5004, fallback4711
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5004, $P5006
  fallback4711:
    unless $P5004 goto if1507_else4708 
.annotate 'line', 2276
.annotate 'line', 2277
    $P5007 = "&only_star_block"()
    set $P101, $P5007
    set $P5023, $P101
    goto if1507_end4709
  if1507_else4708:
.annotate 'line', 2279
.annotate 'line', 2280
    unless_null _lex_param_1, fallback4712
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5009
  fallback4712:
    set $P5008, _lex_param_1["blockoid"]
    unless_null $P5008, fallback4713
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5008, $P5010
  fallback4713:
    $P5011 = $P5008."ast"()
    set $P101, $P5011
.annotate 'line', 2281
    $P5012 = $P101."blocktype"("declaration")
    find_dynamic_lex $P5013, "$*RETURN_USED"
    unless_null $P5013, fallback4716
    nqp_get_sc_object $P5016, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$RETURN_USED"]
    unless_null $P5014, fallback4717
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5014, $P5017
  fallback4717:
    unless_null $P5014, vivi_15094718
    die "Contextual $*RETURN_USED not found"
    box $P5018, "Contextual $*RETURN_USED not found"
    set $P5014, $P5018
  vivi_15094718:
    set $P5013, $P5014
  fallback4716:
    set $P5022, $P5013
    unless $P5013 goto if1508_end4715 
.annotate 'line', 2282
.annotate 'line', 2283
    set $P5019, $P101[1]
    unless_null $P5019, fallback4719
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5019, $P5020
  fallback4719:
    $P5021 = "&wrap_return_handler"($P5019)
    set $P101[1], $P5021
    set $P5022, $P5021
  if1508_end4715:
    set $P5023, $P5022
  if1507_end4709:
    set $P102, $P101
    unless_null _lex_param_1, fallback4722
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5025
  fallback4722:
    set $P5024, _lex_param_1["deflongname"]
    unless_null $P5024, fallback4723
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5024, $P5026
  fallback4723:
    unless $P5024 goto if1510_else4720 
    .const 'Sub' $P5027 = 'cuid_456_1349901750.327' 
    capture_lex $P5027
    $P5028 = $P5027()
    set $P5044, $P5028
    goto if1510_end4721
  if1510_else4720:
.annotate 'line', 2380
.annotate 'line', 2381
    find_dynamic_lex $P5029, "$*W"
    unless_null $P5029, fallback4835
    nqp_get_sc_object $P5032, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5031, $P5032
    set $P5030, $P5031["$W"]
    unless_null $P5030, fallback4836
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5030, $P5033
  fallback4836:
    unless_null $P5030, vivi_15454837
    die "Contextual $*W not found"
    box $P5034, "Contextual $*W not found"
    set $P5030, $P5034
  vivi_15454837:
    set $P5029, $P5030
  fallback4835:
    $P5035 = $P5029."is_precompilation_mode"()
    set $P5043, $P5035
    unless $P5035 goto if1544_end4834 
.annotate 'line', 2382
    find_dynamic_lex $P5036, "$*W"
    unless_null $P5036, fallback4838
    nqp_get_sc_object $P5039, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5038, $P5039
    set $P5037, $P5038["$W"]
    unless_null $P5037, fallback4839
    nqp_get_sc_object $P5040, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5037, $P5040
  fallback4839:
    unless_null $P5037, vivi_15464840
    die "Contextual $*W not found"
    box $P5041, "Contextual $*W not found"
    set $P5037, $P5041
  vivi_15464840:
    set $P5036, $P5037
  fallback4838:
    $P5042 = $P5036."create_code"($P101, "<anon>", 0)
    set $P5043, $P5042
  if1544_end4834:
    set $P5044, $P5043
  if1510_end4721:
.annotate 'line', 2386
    nqp_get_sc_object $P5048, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5047, $P5048, "QAST"
    get_who $P5046, $P5047
    set $P5045, $P5046["Op"]
    unless_null $P5045, fallback4841
    nqp_get_sc_object $P5049, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5045, $P5049
  fallback4841:
    $P5050 = $P5045."new"($P101, "takeclosure" :named("op"))
    set $P103, $P5050
    set $P103["sink"], $P101
    set $P103["block_past"], $P102
.annotate 'line', 2389
    $P5051 = _lex_param_1."!make"($P103)
    unless_null _lex_param_1, fallback4844
    nqp_get_sc_object $P5053, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5053
  fallback4844:
    set $P5052, _lex_param_1["trait"]
    unless_null $P5052, fallback4845
    nqp_get_sc_object $P5054, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5052, $P5054
  fallback4845:
    set $P5063, $P5052
    unless $P5052 goto if1547_end4843 
.annotate 'line', 2392
    unless_null _lex_param_1, fallback4846
    nqp_get_sc_object $P5059, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5059
  fallback4846:
    set $P5058, _lex_param_1["trait"]
    unless_null $P5058, fallback4847
    nqp_get_sc_object $P5060, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5058, $P5060
  fallback4847:
    set $P5055, $P5058
    iter $P5057, $P5058
  for_next4848:
    unless $P5057, for_done4850
    shift $P5062, $P5057
  for_redo4849:
    .const 'Sub' $P5061 = 'cuid_459_1349901750.327' 
    capture_lex $P5061
    $P5055 = $P5061($P5062)
    goto for_next4848
  for_done4850:
    set $P5063, $P5055
  if1547_end4843:
    .return ($P5063) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_456_1349901750.327") :anon :lex :outer("cuid_303_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2288
    .const 'Sub' $P5081 = 'cuid_455_1349901750.327' 
    capture_lex $P5081 
    .const 'Sub' $P5081 = 'cuid_457_1349901750.327' 
    capture_lex $P5081 
    .const 'Sub' $P5081 = 'cuid_458_1349901750.327' 
    capture_lex $P5081 
    .lex "$name", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    find_lex $P5004, "$/"
    unless_null $P5004, fallback4724
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5004, $P5005
  fallback4724:
    set $P5003, $P5004["sigil"]
    unless_null $P5003, fallback4725
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5003, $P5006
  fallback4725:
    set $P5002, $P5003[0]
    unless_null $P5002, fallback4726
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5007
  fallback4726:
    set $S5002, $P5002
.annotate 'line', 2289
    find_lex $P5010, "$/"
    unless_null $P5010, fallback4727
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5010, $P5011
  fallback4727:
    set $P5009, $P5010["deflongname"]
    unless_null $P5009, fallback4728
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5009, $P5012
  fallback4728:
    set $P5008, $P5009[0]
    unless_null $P5008, fallback4729
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5008, $P5013
  fallback4729:
    $P5014 = $P5008."ast"()
    set $S5003, $P5014
    concat $S5001, $S5002, $S5003
    box $P5015, $S5001
    set $P101, $P5015
.annotate 'line', 2290
    find_lex $P5016, "$past"
    $P5017 = $P5016."name"($P101)
    find_dynamic_lex $P5018, "$*SCOPE"
    unless_null $P5018, fallback4736
    nqp_get_sc_object $P5021, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["$SCOPE"]
    unless_null $P5019, fallback4737
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5019, $P5022
  fallback4737:
    unless_null $P5019, vivi_15144738
    die "Contextual $*SCOPE not found"
    box $P5023, "Contextual $*SCOPE not found"
    set $P5019, $P5023
  vivi_15144738:
    set $P5018, $P5019
  fallback4736:
    set $S5004, $P5018
    iseq $I5001, $S5004, ""
    set $I5003, $I5001
    if $I5001 goto unless1513_end4735 
    find_dynamic_lex $P5024, "$*SCOPE"
    unless_null $P5024, fallback4739
    nqp_get_sc_object $P5027, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5026, $P5027
    set $P5025, $P5026["$SCOPE"]
    unless_null $P5025, fallback4740
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5025, $P5028
  fallback4740:
    unless_null $P5025, vivi_15154741
    die "Contextual $*SCOPE not found"
    box $P5029, "Contextual $*SCOPE not found"
    set $P5025, $P5029
  vivi_15154741:
    set $P5024, $P5025
  fallback4739:
    set $S5005, $P5024
    iseq $I5002, $S5005, "my"
    set $I5003, $I5002
  unless1513_end4735:
    set $I5005, $I5003
    if $I5003 goto unless1512_end4733 
    find_dynamic_lex $P5030, "$*SCOPE"
    unless_null $P5030, fallback4742
    nqp_get_sc_object $P5033, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5032, $P5033
    set $P5031, $P5032["$SCOPE"]
    unless_null $P5031, fallback4743
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5031, $P5034
  fallback4743:
    unless_null $P5031, vivi_15164744
    die "Contextual $*SCOPE not found"
    box $P5035, "Contextual $*SCOPE not found"
    set $P5031, $P5035
  vivi_15164744:
    set $P5030, $P5031
  fallback4742:
    set $S5006, $P5030
    iseq $I5004, $S5006, "our"
    set $I5005, $I5004
  unless1512_end4733:
    unless $I5005 goto if1511_else4730 
.annotate 'line', 2291
    find_dynamic_lex $P5036, "$*MULTINESS"
    unless_null $P5036, fallback4747
    nqp_get_sc_object $P5039, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5038, $P5039
    set $P5037, $P5038["$MULTINESS"]
    unless_null $P5037, fallback4748
    nqp_get_sc_object $P5040, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5037, $P5040
  fallback4748:
    unless_null $P5037, vivi_15184749
    die "Contextual $*MULTINESS not found"
    box $P5041, "Contextual $*MULTINESS not found"
    set $P5037, $P5041
  vivi_15184749:
    set $P5036, $P5037
  fallback4747:
    set $S5007, $P5036
    iseq $I5006, $S5007, "multi"
    unless $I5006 goto if1517_else4745 
    .const 'Sub' $P5042 = 'cuid_455_1349901750.327' 
    capture_lex $P5042
    $P5043 = $P5042()
    set $P5055, $P5043
    goto if1517_end4746
  if1517_else4745:
    find_dynamic_lex $P5044, "$*MULTINESS"
    unless_null $P5044, fallback4785
    nqp_get_sc_object $P5047, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5046, $P5047
    set $P5045, $P5046["$MULTINESS"]
    unless_null $P5045, fallback4786
    nqp_get_sc_object $P5048, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5045, $P5048
  fallback4786:
    unless_null $P5045, vivi_15304787
    die "Contextual $*MULTINESS not found"
    box $P5049, "Contextual $*MULTINESS not found"
    set $P5045, $P5049
  vivi_15304787:
    set $P5044, $P5045
  fallback4785:
    set $S5008, $P5044
    iseq $I5007, $S5008, "proto"
    unless $I5007 goto if1529_else4783 
    .const 'Sub' $P5050 = 'cuid_457_1349901750.327' 
    capture_lex $P5050
    $P5051 = $P5050()
    set $P5054, $P5051
    goto if1529_end4784
  if1529_else4783:
    .const 'Sub' $P5052 = 'cuid_458_1349901750.327' 
    capture_lex $P5052
    $P5053 = $P5052()
    set $P5054, $P5053
  if1529_end4784:
    set $P5055, $P5054
  if1517_end4746:
.annotate 'line', 2369
    nqp_get_sc_object $P5059, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5058, $P5059, "QAST"
    get_who $P5057, $P5058
    set $P5056, $P5057["Var"]
    unless_null $P5056, fallback4822
    nqp_get_sc_object $P5060, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5056, $P5060
  fallback4822:
    set $S5010, $P101
    concat $S5009, "&", $S5010
    $P5061 = $P5056."new"($S5009 :named("name"), "lexical" :named("scope"))
    store_lex "$past", $P5061
    set $P5071, $P5061
    goto if1511_end4731
  if1511_else4730:
.annotate 'line', 2371
.annotate 'line', 2372
    find_lex $P5062, "$/"
    $P5063 = $P5062."CURSOR"()
    find_dynamic_lex $P5064, "$*SCOPE"
    unless_null $P5064, fallback4823
    nqp_get_sc_object $P5067, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5066, $P5067
    set $P5065, $P5066["$SCOPE"]
    unless_null $P5065, fallback4824
    nqp_get_sc_object $P5068, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5065, $P5068
  fallback4824:
    unless_null $P5065, vivi_15404825
    die "Contextual $*SCOPE not found"
    box $P5069, "Contextual $*SCOPE not found"
    set $P5065, $P5069
  vivi_15404825:
    set $P5064, $P5065
  fallback4823:
    set $S5012, $P5064
    concat $S5011, $S5012, " scoped routines are not supported yet"
    $P5070 = $P5063."panic"($S5011)
    set $P5071, $P5070
  if1511_end4731:
    set $S5013, $P101
    iseq $I5008, $S5013, "MAIN"
    set $I5010, $I5008
    unless $I5008 goto if1542_end4829 
    find_dynamic_lex $P5072, "$*MULTINESS"
    unless_null $P5072, fallback4830
    nqp_get_sc_object $P5075, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5074, $P5075
    set $P5073, $P5074["$MULTINESS"]
    unless_null $P5073, fallback4831
    nqp_get_sc_object $P5076, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5073, $P5076
  fallback4831:
    unless_null $P5073, vivi_15434832
    die "Contextual $*MULTINESS not found"
    box $P5077, "Contextual $*MULTINESS not found"
    set $P5073, $P5077
  vivi_15434832:
    set $P5072, $P5073
  fallback4830:
    set $S5014, $P5072
    isne $I5009, $S5014, "multi"
    set $I5010, $I5009
  if1542_end4829:
    box $P5080, $I5010
    set $P5079, $P5080
    unless $I5010 goto if1541_end4827 
.annotate 'line', 2376
    find_lex $P5078, "$block"
    store_dynamic_lex "$*MAIN_SUB", $P5078
    set $P5079, $P5078
  if1541_end4827:
    .return ($P5079) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_455_1349901750.327") :anon :lex :outer("cuid_456_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2292
    .const 'Sub' $P5053 = 'cuid_454_1349901750.327' 
    capture_lex $P5053 
    .lex "$proto", $P101 
    .lex "%sym", $P102 
    .lex "$code", $P103 
    .lex "$BLOCK", $P104 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P104, $P5004
    find_dynamic_lex $P5005, "$*SCOPE"
    unless_null $P5005, fallback4752
    nqp_get_sc_object $P5008, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["$SCOPE"]
    unless_null $P5006, fallback4753
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5006, $P5009
  fallback4753:
    unless_null $P5006, vivi_15204754
    die "Contextual $*SCOPE not found"
    box $P5010, "Contextual $*SCOPE not found"
    set $P5006, $P5010
  vivi_15204754:
    set $P5005, $P5006
  fallback4752:
    set $S5001, $P5005
    iseq $I5001, $S5001, "our"
    box $P5013, $I5001
    set $P5012, $P5013
    unless $I5001 goto if1519_end4751 
.annotate 'line', 2294
    box $P5011, "a multi can not be our-scoped"
    die $P5011
    set $P5012, $P5011
  if1519_end4751:
.annotate 'line', 2296
    find_dynamic_lex $P5014, "$*W"
    unless_null $P5014, fallback4755
    nqp_get_sc_object $P5017, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5016, $P5017
    set $P5015, $P5016["$W"]
    unless_null $P5015, fallback4756
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5015, $P5018
  fallback4756:
    unless_null $P5015, vivi_15214757
    die "Contextual $*W not found"
    box $P5019, "Contextual $*W not found"
    set $P5015, $P5019
  vivi_15214757:
    set $P5014, $P5015
  fallback4755:
    $P5020 = $P5014."cur_lexpad"()
    find_lex $P5021, "$name"
    set $S5003, $P5021
    concat $S5002, "&", $S5003
    $P5022 = $P5020."symbol"($S5002)
    set $P102, $P5022
    set $P5023, $P102["proto"]
    unless_null $P5023, fallback4760
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5023, $P5024
  fallback4760:
    unless $P5023 goto if1522_else4758 
.annotate 'line', 2297
    set $P5025, $P102["value"]
    unless_null $P5025, fallback4761
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5025, $P5026
  fallback4761:
    set $P101, $P5025
    set $P5029, $P101
    goto if1522_end4759
  if1522_else4758:
    .const 'Sub' $P5027 = 'cuid_454_1349901750.327' 
    capture_lex $P5027
    $P5028 = $P5027()
    set $P5029, $P5028
  if1522_end4759:
.annotate 'line', 2326
    find_dynamic_lex $P5030, "$*W"
    unless_null $P5030, fallback4776
    nqp_get_sc_object $P5033, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5032, $P5033
    set $P5031, $P5032["$W"]
    unless_null $P5031, fallback4777
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5031, $P5034
  fallback4777:
    unless_null $P5031, vivi_15274778
    die "Contextual $*W not found"
    box $P5035, "Contextual $*W not found"
    set $P5031, $P5035
  vivi_15274778:
    set $P5030, $P5031
  fallback4776:
    find_lex $P5036, "$past"
    find_lex $P5037, "$name"
    $P5038 = $P5030."create_code"($P5036, $P5037, 0)
    set $P103, $P5038
.annotate 'line', 2327
    find_lex $P5039, "$past"
    $P5040 = "&attach_multi_signature"($P103, $P5039)
.annotate 'line', 2330
    $P5041 = $P101."add_dispatchee"($P103)
.annotate 'line', 2333
    find_dynamic_lex $P5042, "$*W"
    unless_null $P5042, fallback4779
    nqp_get_sc_object $P5045, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5044, $P5045
    set $P5043, $P5044["$W"]
    unless_null $P5043, fallback4780
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5043, $P5046
  fallback4780:
    unless_null $P5043, vivi_15284781
    die "Contextual $*W not found"
    box $P5047, "Contextual $*W not found"
    set $P5043, $P5047
  vivi_15284781:
    set $P5042, $P5043
  fallback4779:
    $P5048 = $P5042."cur_lexpad"()
    set $P104, $P5048
.annotate 'line', 2334
    set $P5049, $P104[0]
    unless_null $P5049, fallback4782
    nqp_get_sc_object $P5050, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5049, $P5050
  fallback4782:
    find_lex $P5051, "$past"
    $P5052 = $P5049."push"($P5051)
    .return ($P5052) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_454_1349901750.327") :anon :lex :outer("cuid_455_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2302
    .const 'Sub' $P5019 = 'cuid_453_1349901750.327' 
    capture_lex $P5019 
    .lex "$found_proto", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
.annotate 'line', 2305
    find_dynamic_lex $P5005, "$*W"
    unless_null $P5005, fallback4762
    nqp_get_sc_object $P5008, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["$W"]
    unless_null $P5006, fallback4763
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5006, $P5009
  fallback4763:
    unless_null $P5006, vivi_15234764
    die "Contextual $*W not found"
    box $P5010, "Contextual $*W not found"
    set $P5006, $P5010
  vivi_15234764:
    set $P5005, $P5006
  fallback4762:
    $P5011 = $P5005."get_legacy_block_list"()
    set $P5002, $P5011
    iter $P5004, $P5011
  for_next4771:
    unless $P5004, for_done4773
    shift $P5013, $P5004
  for_redo4772:
    .const 'Sub' $P5012 = 'cuid_453_1349901750.327' 
    capture_lex $P5012
    $P5002 = $P5012($P5013)
    goto for_next4771
  for_done4773:
    set $P5017, $P101
    if $P101 goto unless1526_end4775 
.annotate 'line', 2317
.annotate 'line', 2318
    find_lex $P5014, "$/"
    $P5015 = $P5014."CURSOR"()
    $P5016 = $P5015."panic"("Sorry, no proto sub in scope, and auto-generation of protos is not yet implemented.")
    set $P5017, $P5016
  unless1526_end4775:
    box $P5018, "Dispatcher derivation NYI"
    die $P5018
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_453_1349901750.327") :anon :lex :outer("cuid_454_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2305
    .param pmc _lex_param_0 
    .lex "%sym", $P101 
    .lex "$_", _lex_param_0 
    new $P5001, 'Hash'
    set $P101, $P5001
.annotate 'line', 2306
    find_lex $P5002, "$name"
    set $S5002, $P5002
    concat $S5001, "&", $S5002
    $P5003 = _lex_param_0."symbol"($S5001)
    set $P101, $P5003
    set $P5004, $P101["proto"]
    unless_null $P5004, fallback4767
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5004, $P5005
  fallback4767:
    unless $P5004 goto if1524_else4765 
.annotate 'line', 2307
    set $P5006, $P101["value"]
    unless_null $P5006, fallback4768
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5006, $P5007
  fallback4768:
    store_lex "$proto", $P5006
    box $P5008, 1
    store_lex "$found_proto", $P5008
    set $P5013, $P5008
    goto if1524_end4766
  if1524_else4765:
    set $P5012, $P101
    unless $P101 goto if1525_end4770 
.annotate 'line', 2311
.annotate 'line', 2312
    find_lex $P5009, "$/"
    $P5010 = $P5009."CURSOR"()
    $P5011 = $P5010."panic"("Cannot declare a multi when an only is already in scope.")
    set $P5012, $P5011
  if1525_end4770:
    set $P5013, $P5012
  if1524_end4766:
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_457_1349901750.327") :anon :lex :outer("cuid_456_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2336
    .lex "$code", $P101 
    .lex "$BLOCK", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
    find_dynamic_lex $P5003, "$*SCOPE"
    unless_null $P5003, fallback4790
    nqp_get_sc_object $P5006, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$SCOPE"]
    unless_null $P5004, fallback4791
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5004, $P5007
  fallback4791:
    unless_null $P5004, vivi_15324792
    die "Contextual $*SCOPE not found"
    box $P5008, "Contextual $*SCOPE not found"
    set $P5004, $P5008
  vivi_15324792:
    set $P5003, $P5004
  fallback4790:
    set $S5001, $P5003
    iseq $I5001, $S5001, "our"
    box $P5011, $I5001
    set $P5010, $P5011
    unless $I5001 goto if1531_end4789 
.annotate 'line', 2340
    box $P5009, "our-scoped protos not yet implemented"
    die $P5009
    set $P5010, $P5009
  if1531_end4789:
.annotate 'line', 2341
    find_dynamic_lex $P5012, "$*W"
    unless_null $P5012, fallback4793
    nqp_get_sc_object $P5015, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5014, $P5015
    set $P5013, $P5014["$W"]
    unless_null $P5013, fallback4794
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5013, $P5016
  fallback4794:
    unless_null $P5013, vivi_15334795
    die "Contextual $*W not found"
    box $P5017, "Contextual $*W not found"
    set $P5013, $P5017
  vivi_15334795:
    set $P5012, $P5013
  fallback4793:
    find_lex $P5018, "$past"
    find_lex $P5019, "$name"
    $P5020 = $P5012."create_code"($P5018, $P5019, 1)
    set $P101, $P5020
.annotate 'line', 2342
    find_dynamic_lex $P5021, "$*W"
    unless_null $P5021, fallback4796
    nqp_get_sc_object $P5024, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5023, $P5024
    set $P5022, $P5023["$W"]
    unless_null $P5022, fallback4797
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5022, $P5025
  fallback4797:
    unless_null $P5022, vivi_15344798
    die "Contextual $*W not found"
    box $P5026, "Contextual $*W not found"
    set $P5022, $P5026
  vivi_15344798:
    set $P5021, $P5022
  fallback4796:
    $P5027 = $P5021."cur_lexpad"()
    set $P102, $P5027
.annotate 'line', 2343
    set $P5028, $P102[0]
    unless_null $P5028, fallback4799
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5028, $P5029
  fallback4799:
    nqp_get_sc_object $P5033, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["Op"]
    unless_null $P5030, fallback4800
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5030, $P5034
  fallback4800:
.annotate 'line', 2345
    nqp_get_sc_object $P5038, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["Var"]
    unless_null $P5035, fallback4801
    nqp_get_sc_object $P5039, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5035, $P5039
  fallback4801:
    find_lex $P5040, "$name"
    set $S5003, $P5040
    concat $S5002, "&", $S5003
    $P5041 = $P5035."new"($S5002 :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    find_lex $P5042, "$past"
    $P5043 = $P5030."new"($P5041, $P5042, "bind" :named("op"))
    $P5044 = $P5028."push"($P5043)
.annotate 'line', 2348
    find_lex $P5045, "$name"
    set $S5005, $P5045
    concat $S5004, "&", $S5005
    $P5046 = $P102."symbol"($S5004, "lexical" :named("scope"), 1 :named("proto"), $P101 :named("value"))
    .return ($P5046) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_458_1349901750.327") :anon :lex :outer("cuid_456_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2350
    .lex "$BLOCK", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
.annotate 'line', 2351
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback4802
    nqp_get_sc_object $P5005, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback4803
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5003, $P5006
  fallback4803:
    unless_null $P5003, vivi_15354804
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_15354804:
    set $P5002, $P5003
  fallback4802:
    $P5008 = $P5002."cur_lexpad"()
    set $P101, $P5008
.annotate 'line', 2352
    set $P5009, $P101[0]
    unless_null $P5009, fallback4805
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5009, $P5010
  fallback4805:
    nqp_get_sc_object $P5014, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback4806
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5011, $P5015
  fallback4806:
.annotate 'line', 2354
    nqp_get_sc_object $P5019, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Var"]
    unless_null $P5016, fallback4807
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5016, $P5020
  fallback4807:
    find_lex $P5021, "$name"
    set $S5002, $P5021
    concat $S5001, "&", $S5002
    $P5022 = $P5016."new"($S5001 :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    find_lex $P5023, "$past"
    $P5024 = $P5011."new"($P5022, $P5023, "bind" :named("op"))
    $P5025 = $P5009."push"($P5024)
.annotate 'line', 2357
    find_lex $P5026, "$name"
    set $S5004, $P5026
    concat $S5003, "&", $S5004
    $P5027 = $P101."symbol"($S5003, "lexical" :named("scope"))
    find_dynamic_lex $P5028, "$*SCOPE"
    unless_null $P5028, fallback4810
    nqp_get_sc_object $P5031, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5030, $P5031
    set $P5029, $P5030["$SCOPE"]
    unless_null $P5029, fallback4811
    nqp_get_sc_object $P5032, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5029, $P5032
  fallback4811:
    unless_null $P5029, vivi_15374812
    die "Contextual $*SCOPE not found"
    box $P5033, "Contextual $*SCOPE not found"
    set $P5029, $P5033
  vivi_15374812:
    set $P5028, $P5029
  fallback4810:
    set $S5005, $P5028
    iseq $I5001, $S5005, "our"
    box $P5070, $I5001
    set $P5069, $P5070
    unless $I5001 goto if1536_end4809 
.annotate 'line', 2358
.annotate 'line', 2361
    find_dynamic_lex $P5034, "$*W"
    unless_null $P5034, fallback4813
    nqp_get_sc_object $P5037, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5036, $P5037
    set $P5035, $P5036["$W"]
    unless_null $P5035, fallback4814
    nqp_get_sc_object $P5038, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5035, $P5038
  fallback4814:
    unless_null $P5035, vivi_15384815
    die "Contextual $*W not found"
    box $P5039, "Contextual $*W not found"
    set $P5035, $P5039
  vivi_15384815:
    set $P5034, $P5035
  fallback4813:
    find_dynamic_lex $P5040, "$*PACKAGE"
    unless_null $P5040, fallback4816
    nqp_get_sc_object $P5043, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5042, $P5043
    set $P5041, $P5042["$PACKAGE"]
    unless_null $P5041, fallback4817
    nqp_get_sc_object $P5044, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5041, $P5044
  fallback4817:
    unless_null $P5041, vivi_15394818
    die "Contextual $*PACKAGE not found"
    box $P5045, "Contextual $*PACKAGE not found"
    set $P5041, $P5045
  vivi_15394818:
    set $P5040, $P5041
  fallback4816:
    find_lex $P5046, "$name"
    find_lex $P5047, "$past"
    $P5048 = $P5034."install_package_routine"($P5040, $P5046, $P5047)
.annotate 'line', 2362
    set $P5049, $P101[0]
    unless_null $P5049, fallback4819
    nqp_get_sc_object $P5050, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5049, $P5050
  fallback4819:
    nqp_get_sc_object $P5054, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5053, $P5054, "QAST"
    get_who $P5052, $P5053
    set $P5051, $P5052["Op"]
    unless_null $P5051, fallback4820
    nqp_get_sc_object $P5055, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5051, $P5055
  fallback4820:
.annotate 'line', 2364
    new $P5056, 'ResizablePMCArray'
    find_lex $P5057, "$name"
    push $P5056, $P5057
    find_lex $P5058, "$/"
    $P5059 = "&lexical_package_lookup"($P5056, $P5058)
.annotate 'line', 2365
    nqp_get_sc_object $P5063, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5062, $P5063, "QAST"
    get_who $P5061, $P5062
    set $P5060, $P5061["Var"]
    unless_null $P5060, fallback4821
    nqp_get_sc_object $P5064, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5060, $P5064
  fallback4821:
    find_lex $P5065, "$name"
    set $S5007, $P5065
    concat $S5006, "&", $S5007
    $P5066 = $P5060."new"($S5006 :named("name"), "lexical" :named("scope"))
    $P5067 = $P5051."new"($P5059, $P5066, "bind" :named("op"))
    $P5068 = $P5049."push"($P5067)
    set $P5069, $P5068
  if1536_end4809:
    .return ($P5069) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_459_1349901750.327") :anon :lex :outer("cuid_303_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2393
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$/"
    $P5001 = _lex_param_0."ast"()
    $P5003 = $P5001($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "method_def" :subid("cuid_304_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2398
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5069 = 'cuid_460_1349901750.327' 
    capture_lex $P5069 
    .const 'Sub' $P5069 = 'cuid_461_1349901750.327' 
    capture_lex $P5069 
    .lex "$past", $P101 
    .lex "$lexpast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
    unless_null _lex_param_1, fallback4853
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5004
  fallback4853:
    set $P5003, _lex_param_1["onlystar"]
    unless_null $P5003, fallback4854
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5003, $P5005
  fallback4854:
    unless $P5003 goto if1548_else4851 
.annotate 'line', 2402
.annotate 'line', 2403
    $P5006 = "&only_star_block"()
    set $P101, $P5006
    set $P5022, $P101
    goto if1548_end4852
  if1548_else4851:
.annotate 'line', 2405
.annotate 'line', 2406
    unless_null _lex_param_1, fallback4855
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5008
  fallback4855:
    set $P5007, _lex_param_1["blockoid"]
    unless_null $P5007, fallback4856
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5007, $P5009
  fallback4856:
    $P5010 = $P5007."ast"()
    set $P101, $P5010
.annotate 'line', 2407
    $P5011 = $P101."blocktype"("declaration")
    find_dynamic_lex $P5012, "$*RETURN_USED"
    unless_null $P5012, fallback4859
    nqp_get_sc_object $P5015, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5014, $P5015
    set $P5013, $P5014["$RETURN_USED"]
    unless_null $P5013, fallback4860
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5013, $P5016
  fallback4860:
    unless_null $P5013, vivi_15504861
    die "Contextual $*RETURN_USED not found"
    box $P5017, "Contextual $*RETURN_USED not found"
    set $P5013, $P5017
  vivi_15504861:
    set $P5012, $P5013
  fallback4859:
    set $P5021, $P5012
    unless $P5012 goto if1549_end4858 
.annotate 'line', 2408
.annotate 'line', 2409
    set $P5018, $P101[1]
    unless_null $P5018, fallback4862
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5018, $P5019
  fallback4862:
    $P5020 = "&wrap_return_handler"($P5018)
    set $P101[1], $P5020
    set $P5021, $P5020
  if1549_end4858:
    set $P5022, $P5021
  if1548_end4852:
    set $P5023, $P101["signature_has_invocant"]
    unless_null $P5023, fallback4865
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5023, $P5024
  fallback4865:
    set $P5040, $P5023
    if $P5023 goto unless1551_end4864 
.annotate 'line', 2414
.annotate 'line', 2415
    set $P5025, $P101[0]
    unless_null $P5025, fallback4866
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5025, $P5026
  fallback4866:
    nqp_get_sc_object $P5030, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["Var"]
    unless_null $P5027, fallback4867
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5027, $P5031
  fallback4867:
    find_dynamic_lex $P5032, "$*PACKAGE"
    unless_null $P5032, fallback4868
    nqp_get_sc_object $P5035, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5034, $P5035
    set $P5033, $P5034["$PACKAGE"]
    unless_null $P5033, fallback4869
    nqp_get_sc_object $P5036, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5033, $P5036
  fallback4869:
    unless_null $P5033, vivi_15524870
    die "Contextual $*PACKAGE not found"
    box $P5037, "Contextual $*PACKAGE not found"
    set $P5033, $P5037
  vivi_15524870:
    set $P5032, $P5033
  fallback4868:
    $P5038 = $P5027."new"("self" :named("name"), "lexical" :named("scope"), "param" :named("decl"), $P5032 :named("returns"))
    $P5039 = $P5025."unshift"($P5038)
    set $P5040, $P5039
  unless1551_end4864:
.annotate 'line', 2420
    $P5041 = $P101."symbol"("self", "lexical" :named("scope"))
    unless_null _lex_param_1, fallback4873
    nqp_get_sc_object $P5043, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5043
  fallback4873:
    set $P5042, _lex_param_1["deflongname"]
    unless_null $P5042, fallback4874
    nqp_get_sc_object $P5044, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5042, $P5044
  fallback4874:
    set $P5047, $P5042
    unless $P5042 goto if1553_end4872 
    .const 'Sub' $P5045 = 'cuid_460_1349901750.327' 
    capture_lex $P5045
    $P5046 = $P5045()
    set $P5047, $P5046
  if1553_end4872:
.annotate 'line', 2443
    nqp_get_sc_object $P5051, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["Op"]
    unless_null $P5048, fallback4913
    nqp_get_sc_object $P5052, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5048, $P5052
  fallback4913:
    $P5053 = $P5048."new"($P101, "takeclosure" :named("op"))
    set $P102, $P5053
    set $P102["sink"], $P101
    set $P102["block_past"], $P101
    set $P5054, $P101["code_obj"]
    unless_null $P5054, fallback4914
    nqp_get_sc_object $P5055, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5054, $P5055
  fallback4914:
    set $P102["code_obj"], $P5054
.annotate 'line', 2447
    $P5056 = _lex_param_1."!make"($P102)
    unless_null _lex_param_1, fallback4917
    nqp_get_sc_object $P5058, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5058
  fallback4917:
    set $P5057, _lex_param_1["trait"]
    unless_null $P5057, fallback4918
    nqp_get_sc_object $P5059, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5057, $P5059
  fallback4918:
    set $P5068, $P5057
    unless $P5057 goto if1566_end4916 
.annotate 'line', 2448
    unless_null _lex_param_1, fallback4919
    nqp_get_sc_object $P5064, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5064
  fallback4919:
    set $P5063, _lex_param_1["trait"]
    unless_null $P5063, fallback4920
    nqp_get_sc_object $P5065, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5063, $P5065
  fallback4920:
    set $P5060, $P5063
    iter $P5062, $P5063
  for_next4921:
    unless $P5062, for_done4923
    shift $P5067, $P5062
  for_redo4922:
    .const 'Sub' $P5066 = 'cuid_461_1349901750.327' 
    capture_lex $P5066
    $P5060 = $P5066($P5067)
    goto for_next4921
  for_done4923:
    set $P5068, $P5060
  if1566_end4916:
    .return ($P5068) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_460_1349901750.327") :anon :lex :outer("cuid_304_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2423
    .lex "$name", $P101 
    .lex "$meta_meth", $P102 
    .lex "$is_dispatcher", $P103 
    .lex "$code", $P104 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P104, $P5004
    find_lex $P5006, "$/"
    unless_null $P5006, fallback4875
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5006, $P5007
  fallback4875:
    set $P5005, $P5006["private"]
    unless_null $P5005, fallback4876
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5005, $P5008
  fallback4876:
    set $S5002, $P5005
.annotate 'line', 2425
    find_lex $P5011, "$/"
    unless_null $P5011, fallback4877
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5011, $P5012
  fallback4877:
    set $P5010, $P5011["deflongname"]
    unless_null $P5010, fallback4878
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5010, $P5013
  fallback4878:
    set $P5009, $P5010[0]
    unless_null $P5009, fallback4879
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5009, $P5014
  fallback4879:
    $P5015 = $P5009."ast"()
    set $S5003, $P5015
    concat $S5001, $S5002, $S5003
    box $P5016, $S5001
    set $P101, $P5016
.annotate 'line', 2426
    find_lex $P5017, "$past"
    $P5018 = $P5017."name"($P101)
    find_dynamic_lex $P5019, "$*MULTINESS"
    unless_null $P5019, fallback4882
    nqp_get_sc_object $P5022, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["$MULTINESS"]
    unless_null $P5020, fallback4883
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5020, $P5023
  fallback4883:
    unless_null $P5020, vivi_15554884
    die "Contextual $*MULTINESS not found"
    box $P5024, "Contextual $*MULTINESS not found"
    set $P5020, $P5024
  vivi_15554884:
    set $P5019, $P5020
  fallback4882:
    set $S5004, $P5019
    iseq $I5001, $S5004, "multi"
    unless $I5001 goto if1554_else4880 
    set $S5005, "add_multi_method"
    goto if1554_end4881
  if1554_else4880:
    set $S5005, "add_method"
  if1554_end4881:
    box $P5025, $S5005
    set $P102, $P5025
    find_dynamic_lex $P5026, "$*MULTINESS"
    unless_null $P5026, fallback4885
    nqp_get_sc_object $P5029, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["$MULTINESS"]
    unless_null $P5027, fallback4886
    nqp_get_sc_object $P5030, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5027, $P5030
  fallback4886:
    unless_null $P5027, vivi_15564887
    die "Contextual $*MULTINESS not found"
    box $P5031, "Contextual $*MULTINESS not found"
    set $P5027, $P5031
  vivi_15564887:
    set $P5026, $P5027
  fallback4885:
    set $S5006, $P5026
    iseq $I5002, $S5006, "proto"
    box $P5032, $I5002
    set $P103, $P5032
.annotate 'line', 2431
    find_dynamic_lex $P5033, "$*W"
    unless_null $P5033, fallback4888
    nqp_get_sc_object $P5036, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5035, $P5036
    set $P5034, $P5035["$W"]
    unless_null $P5034, fallback4889
    nqp_get_sc_object $P5037, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5034, $P5037
  fallback4889:
    unless_null $P5034, vivi_15574890
    die "Contextual $*W not found"
    box $P5038, "Contextual $*W not found"
    set $P5034, $P5038
  vivi_15574890:
    set $P5033, $P5034
  fallback4888:
    find_lex $P5039, "$past"
    $P5040 = $P5033."create_code"($P5039, $P101, $P103)
    set $P104, $P5040
    find_dynamic_lex $P5041, "$*MULTINESS"
    unless_null $P5041, fallback4893
    nqp_get_sc_object $P5044, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5043, $P5044
    set $P5042, $P5043["$MULTINESS"]
    unless_null $P5042, fallback4894
    nqp_get_sc_object $P5045, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5042, $P5045
  fallback4894:
    unless_null $P5042, vivi_15594895
    die "Contextual $*MULTINESS not found"
    box $P5046, "Contextual $*MULTINESS not found"
    set $P5042, $P5046
  vivi_15594895:
    set $P5041, $P5042
  fallback4893:
    set $S5007, $P5041
    iseq $I5003, $S5007, "multi"
    box $P5050, $I5003
    set $P5049, $P5050
    unless $I5003 goto if1558_end4892 
.annotate 'line', 2432
    find_lex $P5047, "$past"
    $P5048 = "&attach_multi_signature"($P104, $P5047)
    set $P5049, $P5048
  if1558_end4892:
.annotate 'line', 2433
    find_dynamic_lex $P5051, "$*W"
    unless_null $P5051, fallback4896
    nqp_get_sc_object $P5054, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5053, $P5054
    set $P5052, $P5053["$W"]
    unless_null $P5052, fallback4897
    nqp_get_sc_object $P5055, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5052, $P5055
  fallback4897:
    unless_null $P5052, vivi_15604898
    die "Contextual $*W not found"
    box $P5056, "Contextual $*W not found"
    set $P5052, $P5056
  vivi_15604898:
    set $P5051, $P5052
  fallback4896:
    find_dynamic_lex $P5057, "$*PACKAGE"
    unless_null $P5057, fallback4899
    nqp_get_sc_object $P5060, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5059, $P5060
    set $P5058, $P5059["$PACKAGE"]
    unless_null $P5058, fallback4900
    nqp_get_sc_object $P5061, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5058, $P5061
  fallback4900:
    unless_null $P5058, vivi_15614901
    die "Contextual $*PACKAGE not found"
    box $P5062, "Contextual $*PACKAGE not found"
    set $P5058, $P5062
  vivi_15614901:
    set $P5057, $P5058
  fallback4899:
    $P5063 = $P5051."pkg_add_method"($P5057, $P102, $P101, $P104)
    find_lex $P5064, "$past"
    set $P5064["code_obj"], $P104
    find_dynamic_lex $P5065, "$*SCOPE"
    unless_null $P5065, fallback4904
    nqp_get_sc_object $P5068, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5067, $P5068
    set $P5066, $P5067["$SCOPE"]
    unless_null $P5066, fallback4905
    nqp_get_sc_object $P5069, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5066, $P5069
  fallback4905:
    unless_null $P5066, vivi_15634906
    die "Contextual $*SCOPE not found"
    box $P5070, "Contextual $*SCOPE not found"
    set $P5066, $P5070
  vivi_15634906:
    set $P5065, $P5066
  fallback4904:
    set $S5008, $P5065
    iseq $I5004, $S5008, "our"
    box $P5086, $I5004
    set $P5085, $P5086
    unless $I5004 goto if1562_end4903 
.annotate 'line', 2437
.annotate 'line', 2438
    find_dynamic_lex $P5071, "$*W"
    unless_null $P5071, fallback4907
    nqp_get_sc_object $P5074, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5073, $P5074
    set $P5072, $P5073["$W"]
    unless_null $P5072, fallback4908
    nqp_get_sc_object $P5075, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5072, $P5075
  fallback4908:
    unless_null $P5072, vivi_15644909
    die "Contextual $*W not found"
    box $P5076, "Contextual $*W not found"
    set $P5072, $P5076
  vivi_15644909:
    set $P5071, $P5072
  fallback4907:
    find_dynamic_lex $P5077, "$*PACKAGE"
    unless_null $P5077, fallback4910
    nqp_get_sc_object $P5080, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5079, $P5080
    set $P5078, $P5079["$PACKAGE"]
    unless_null $P5078, fallback4911
    nqp_get_sc_object $P5081, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5078, $P5081
  fallback4911:
    unless_null $P5078, vivi_15654912
    die "Contextual $*PACKAGE not found"
    box $P5082, "Contextual $*PACKAGE not found"
    set $P5078, $P5082
  vivi_15654912:
    set $P5077, $P5078
  fallback4910:
    find_lex $P5083, "$past"
    $P5084 = $P5071."install_package_routine"($P5077, $P101, $P5083)
    set $P5085, $P5084
  if1562_end4903:
    .return ($P5085) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_461_1349901750.327") :anon :lex :outer("cuid_304_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2449
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$/"
    $P5001 = _lex_param_0."ast"()
    $P5003 = $P5001($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "signature" :subid("cuid_305_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2481
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5026 = 'cuid_462_1349901750.327' 
    capture_lex $P5026 
    .const 'Sub' $P5026 = 'cuid_463_1349901750.327' 
    capture_lex $P5026 
    .lex "$BLOCK", $P101 
    .lex "$BLOCKINIT", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
.annotate 'line', 2482
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4924
    nqp_get_sc_object $P5006, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4925
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5004, $P5007
  fallback4925:
    unless_null $P5004, vivi_15674926
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_15674926:
    set $P5003, $P5004
  fallback4924:
    $P5009 = $P5003."cur_lexpad"()
    set $P101, $P5009
    set $P5010, $P101[0]
    unless_null $P5010, fallback4927
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5010, $P5011
  fallback4927:
    set $P102, $P5010
    unless_null _lex_param_1, fallback4930
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5013
  fallback4930:
    set $P5012, _lex_param_1["invocant"]
    unless_null $P5012, fallback4931
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5012, $P5014
  fallback4931:
    set $P5017, $P5012
    unless $P5012 goto if1568_end4929 
    .const 'Sub' $P5015 = 'cuid_462_1349901750.327' 
    capture_lex $P5015
    $P5016 = $P5015()
    set $P5017, $P5016
  if1568_end4929:
    unless_null _lex_param_1, fallback4938
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5022
  fallback4938:
    set $P5021, _lex_param_1["parameter"]
    unless_null $P5021, fallback4939
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5021, $P5023
  fallback4939:
    set $P5018, $P5021
    iter $P5020, $P5021
  for_next4940:
    unless $P5020, for_done4942
    shift $P5025, $P5020
  for_redo4941:
    .const 'Sub' $P5024 = 'cuid_463_1349901750.327' 
    capture_lex $P5024
    $P5018 = $P5024($P5025)
    goto for_next4940
  for_done4942:
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_462_1349901750.327") :anon :lex :outer("cuid_305_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2484
    .lex "$inv", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
.annotate 'line', 2485
    find_lex $P5004, "$/"
    unless_null $P5004, fallback4932
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5004, $P5005
  fallback4932:
    set $P5003, $P5004["invocant"]
    unless_null $P5003, fallback4933
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5003, $P5006
  fallback4933:
    set $P5002, $P5003[0]
    unless_null $P5002, fallback4934
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5007
  fallback4934:
    $P5008 = $P5002."ast"()
    set $P101, $P5008
.annotate 'line', 2486
    find_lex $P5009, "$BLOCKINIT"
    $P5010 = $P5009."push"($P101)
.annotate 'line', 2487
    find_lex $P5011, "$BLOCKINIT"
    nqp_get_sc_object $P5015, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Op"]
    unless_null $P5012, fallback4935
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5012, $P5016
  fallback4935:
.annotate 'line', 2489
    nqp_get_sc_object $P5020, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Var"]
    unless_null $P5017, fallback4936
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5017, $P5021
  fallback4936:
    $P5022 = $P5017."new"("self" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
.annotate 'line', 2490
    nqp_get_sc_object $P5026, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5025, $P5026, "QAST"
    get_who $P5024, $P5025
    set $P5023, $P5024["Var"]
    unless_null $P5023, fallback4937
    nqp_get_sc_object $P5027, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5023, $P5027
  fallback4937:
    $P5028 = $P101."name"()
    $P5029 = $P5023."new"("lexical" :named("scope"), $P5028 :named("name"))
    $P5030 = $P5012."new"($P5022, $P5029, "bind" :named("op"))
    $P5031 = $P5011."push"($P5030)
    find_lex $P5032, "$BLOCK"
    box $P5033, 1
    set $P5032["signature_has_invocant"], $P5033
    .return ($P5033) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_463_1349901750.327") :anon :lex :outer("cuid_305_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2494
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$BLOCKINIT"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "parameter" :subid("cuid_306_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2497
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5102 = 'cuid_465_1349901750.327' 
    capture_lex $P5102 
    .lex "$quant", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
    unless_null _lex_param_1, fallback4943
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5004
  fallback4943:
    set $P5003, _lex_param_1["quant"]
    unless_null $P5003, fallback4944
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5003, $P5005
  fallback4944:
    set $P101, $P5003
    unless_null _lex_param_1, fallback4947
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5007
  fallback4947:
    set $P5006, _lex_param_1["named_param"]
    unless_null $P5006, fallback4948
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5006, $P5008
  fallback4948:
    unless $P5006 goto if1569_else4945 
.annotate 'line', 2500
.annotate 'line', 2501
    unless_null _lex_param_1, fallback4949
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5010
  fallback4949:
    set $P5009, _lex_param_1["named_param"]
    unless_null $P5009, fallback4950
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5009, $P5011
  fallback4950:
    $P5012 = $P5009."ast"()
    set $P102, $P5012
    set $S5001, $P101
    isne $I5001, $S5001, "!"
    box $P5023, $I5001
    set $P5022, $P5023
    unless $I5001 goto if1570_end4952 
.annotate 'line', 2502
.annotate 'line', 2503
    unless_null _lex_param_1, fallback4953
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5016
  fallback4953:
    set $P5015, _lex_param_1["named_param"]
    unless_null $P5015, fallback4954
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5015, $P5017
  fallback4954:
    set $P5014, $P5015["param_var"]
    unless_null $P5014, fallback4955
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5014, $P5018
  fallback4955:
    set $P5013, $P5014["sigil"]
    unless_null $P5013, fallback4956
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5013, $P5019
  fallback4956:
    $P5020 = "&default_for"($P5013)
    $P5021 = $P102."default"($P5020)
    set $P5022, $P5021
  if1570_end4952:
    set $P5045, $P5022
    goto if1569_end4946
  if1569_else4945:
.annotate 'line', 2506
.annotate 'line', 2507
    unless_null _lex_param_1, fallback4957
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5025
  fallback4957:
    set $P5024, _lex_param_1["param_var"]
    unless_null $P5024, fallback4958
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5024, $P5026
  fallback4958:
    $P5027 = $P5024."ast"()
    set $P102, $P5027
    set $S5002, $P101
    iseq $I5002, $S5002, "*"
    unless $I5002 goto if1571_else4959 
.annotate 'line', 2508
.annotate 'line', 2509
    $P5028 = $P102."slurpy"(1)
.annotate 'line', 2510
    unless_null _lex_param_1, fallback4961
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5031
  fallback4961:
    set $P5030, _lex_param_1["param_var"]
    unless_null $P5030, fallback4962
    nqp_get_sc_object $P5032, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5030, $P5032
  fallback4962:
    set $P5029, $P5030["sigil"]
    unless_null $P5029, fallback4963
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5029, $P5033
  fallback4963:
    set $S5003, $P5029
    iseq $I5003, $S5003, "%"
    $P5034 = $P102."named"($I5003)
    set $P5044, $P5034
    goto if1571_end4960
  if1571_else4959:
    set $S5004, $P101
    iseq $I5004, $S5004, "?"
    box $P5043, $I5004
    set $P5042, $P5043
    unless $I5004 goto if1572_end4965 
.annotate 'line', 2512
.annotate 'line', 2513
    unless_null _lex_param_1, fallback4966
    nqp_get_sc_object $P5037, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5037
  fallback4966:
    set $P5036, _lex_param_1["param_var"]
    unless_null $P5036, fallback4967
    nqp_get_sc_object $P5038, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5036, $P5038
  fallback4967:
    set $P5035, $P5036["sigil"]
    unless_null $P5035, fallback4968
    nqp_get_sc_object $P5039, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5035, $P5039
  fallback4968:
    $P5040 = "&default_for"($P5035)
    $P5041 = $P102."default"($P5040)
    set $P5042, $P5041
  if1572_end4965:
    set $P5044, $P5042
  if1571_end4960:
    set $P5045, $P5044
  if1569_end4946:
    unless_null _lex_param_1, fallback4971
    nqp_get_sc_object $P5047, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5047
  fallback4971:
    set $P5046, _lex_param_1["default_value"]
    unless_null $P5046, fallback4972
    nqp_get_sc_object $P5048, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5046, $P5048
  fallback4972:
    set $P5066, $P5046
    unless $P5046 goto if1573_end4970 
.annotate 'line', 2516
    set $S5005, $P101
    iseq $I5005, $S5005, "*"
    box $P5052, $I5005
    set $P5051, $P5052
    unless $I5005 goto if1574_end4974 
.annotate 'line', 2517
.annotate 'line', 2518
    $P5049 = _lex_param_1."CURSOR"()
    $P5050 = $P5049."panic"("Can't put default on slurpy parameter")
    set $P5051, $P5050
  if1574_end4974:
    set $S5006, $P101
    iseq $I5006, $S5006, "!"
    box $P5056, $I5006
    set $P5055, $P5056
    unless $I5006 goto if1575_end4976 
.annotate 'line', 2520
.annotate 'line', 2521
    $P5053 = _lex_param_1."CURSOR"()
    $P5054 = $P5053."panic"("Can't put default on required parameter")
    set $P5055, $P5054
  if1575_end4976:
.annotate 'line', 2523
    unless_null _lex_param_1, fallback4977
    nqp_get_sc_object $P5060, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5060
  fallback4977:
    set $P5059, _lex_param_1["default_value"]
    unless_null $P5059, fallback4978
    nqp_get_sc_object $P5061, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5059, $P5061
  fallback4978:
    set $P5058, $P5059[0]
    unless_null $P5058, fallback4979
    nqp_get_sc_object $P5062, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5058, $P5062
  fallback4979:
    set $P5057, $P5058["EXPR"]
    unless_null $P5057, fallback4980
    nqp_get_sc_object $P5063, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5057, $P5063
  fallback4980:
    $P5064 = $P5057."ast"()
    $P5065 = $P102."default"($P5064)
    set $P5066, $P5065
  if1573_end4970:
.annotate 'line', 2525
    $P5067 = $P102."default"()
    set $P5084, $P5067
    if $P5067 goto unless1576_end4982 
    find_dynamic_lex $P5068, "$*W"
    unless_null $P5068, fallback4983
    nqp_get_sc_object $P5071, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5070, $P5071
    set $P5069, $P5070["$W"]
    unless_null $P5069, fallback4984
    nqp_get_sc_object $P5072, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5069, $P5072
  fallback4984:
    unless_null $P5069, vivi_15774985
    die "Contextual $*W not found"
    box $P5073, "Contextual $*W not found"
    set $P5069, $P5073
  vivi_15774985:
    set $P5068, $P5069
  fallback4983:
    $P5074 = $P5068."cur_lexpad"()
    find_dynamic_lex $P5075, "$*W"
    unless_null $P5075, fallback4986
    nqp_get_sc_object $P5078, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5077, $P5078
    set $P5076, $P5077["$W"]
    unless_null $P5076, fallback4987
    nqp_get_sc_object $P5079, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5076, $P5079
  fallback4987:
    unless_null $P5076, vivi_15784988
    die "Contextual $*W not found"
    box $P5080, "Contextual $*W not found"
    set $P5076, $P5080
  vivi_15784988:
    set $P5075, $P5076
  fallback4986:
    $P5081 = $P5075."cur_lexpad"()
    $P5082 = $P5081."arity"()
    set $N5002, $P5082
    set $N5003, 1
    add $N5001, $N5002, $N5003
    $P5083 = $P5074."arity"($N5001)
    set $P5084, $P5083
  unless1576_end4982:
    unless_null _lex_param_1, fallback4991
    nqp_get_sc_object $P5086, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5086
  fallback4991:
    set $P5085, _lex_param_1["typename"]
    unless_null $P5085, fallback4992
    nqp_get_sc_object $P5087, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5085, $P5087
  fallback4992:
    set $P5090, $P5085
    unless $P5085 goto if1579_end4990 
    .const 'Sub' $P5088 = 'cuid_465_1349901750.327' 
    capture_lex $P5088
    $P5089 = $P5088()
    set $P5090, $P5089
  if1579_end4990:
    unless_null _lex_param_1, fallback5009
    nqp_get_sc_object $P5092, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5092
  fallback5009:
    set $P5091, _lex_param_1["definedness"]
    unless_null $P5091, fallback5010
    nqp_get_sc_object $P5093, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5091, $P5093
  fallback5010:
    set $P5100, $P5091
    unless $P5091 goto if1584_end5008 
.annotate 'line', 2540
    unless_null _lex_param_1, fallback5011
    nqp_get_sc_object $P5096, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5096
  fallback5011:
    set $P5095, _lex_param_1["definedness"]
    unless_null $P5095, fallback5012
    nqp_get_sc_object $P5097, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5095, $P5097
  fallback5012:
    set $P5094, $P5095[0]
    unless_null $P5094, fallback5013
    nqp_get_sc_object $P5098, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5094, $P5098
  fallback5013:
    set $S5007, $P5094
    box $P5099, $S5007
    set $P102["definedness"], $P5099
    set $P5100, $P5099
  if1584_end5008:
.annotate 'line', 2544
    $P5101 = _lex_param_1."!make"($P102)
    .return ($P5101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_465_1349901750.327") :anon :lex :outer("cuid_306_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2528
    .const 'Sub' $P5016 = 'cuid_464_1349901750.327' 
    capture_lex $P5016 
    .lex "$type", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
.annotate 'line', 2529
    find_lex $P5004, "$/"
    unless_null $P5004, fallback4993
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5004, $P5005
  fallback4993:
    set $P5003, $P5004["typename"]
    unless_null $P5003, fallback4994
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5003, $P5006
  fallback4994:
    set $P5002, $P5003[0]
    unless_null $P5002, fallback4995
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5007
  fallback4995:
    $P5008 = $P5002."ast"()
    $P5009 = $P5008."value"()
    set $P101, $P5009
.annotate 'line', 2530
    find_lex $P5010, "$past"
    $P5011 = $P5010."returns"($P101)
    repr_get_primitive_type_spec $I5001, $P101
    box $P5015, $I5001
    set $P5014, $P5015
    unless $I5001 goto if1580_end4997 
    .const 'Sub' $P5012 = 'cuid_464_1349901750.327' 
    capture_lex $P5012
    $P5013 = $P5012($P5015)
    set $P5014, $P5013
  if1580_end4997:
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_464_1349901750.327") :anon :lex :outer("cuid_465_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2531
    .param pmc _lex_param_0 
    .lex "$prim", _lex_param_0 
.annotate 'line', 2532
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback4998
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback4999
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5005
  fallback4999:
    unless_null $P5002, vivi_15815000
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_15815000:
    set $P5001, $P5002
  fallback4998:
    $P5007 = $P5001."cur_lexpad"()
    find_lex $P5008, "$past"
    $P5009 = $P5008."name"()
    find_lex $P5010, "$type"
    $P5011 = $P5007."symbol"($P5009, $P5010 :named("type"))
.annotate 'line', 2533
    find_lex $P5012, "$past"
    $P5013 = $P5012."default"()
    set $P5018, $P5013
    unless $P5013 goto if1583_end5004 
    find_lex $P5015, "$/"
    unless_null $P5015, fallback5005
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5015, $P5016
  fallback5005:
    set $P5014, $P5015["default_value"]
    unless_null $P5014, fallback5006
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5014, $P5017
  fallback5006:
    isfalse $I5001, $P5014
    box $P5019, $I5001
    set $P5018, $P5019
  if1583_end5004:
    set $P5023, $P5018
    unless $P5018 goto if1582_end5002 
.annotate 'line', 2534
    find_lex $P5020, "$past"
    $P5021 = "&default_value_for_prim"(_lex_param_0)
    $P5022 = $P5020."default"($P5021)
    set $P5023, $P5022
  if1582_end5002:
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "param_var" :subid("cuid_307_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2547
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$name", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
    set $S5001, _lex_param_1
    box $P5003, $S5001
    set $P101, $P5003
.annotate 'line', 2549
    nqp_get_sc_object $P5007, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Var"]
    unless_null $P5004, fallback5014
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5004, $P5008
  fallback5014:
    $P5009 = $P5004."new"($P101 :named("name"), "lexical" :named("scope"), "param" :named("decl"), _lex_param_1 :named("node"))
    set $P102, $P5009
.annotate 'line', 2551
    find_dynamic_lex $P5010, "$*W"
    unless_null $P5010, fallback5015
    nqp_get_sc_object $P5013, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5012, $P5013
    set $P5011, $P5012["$W"]
    unless_null $P5011, fallback5016
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5011, $P5014
  fallback5016:
    unless_null $P5011, vivi_15855017
    die "Contextual $*W not found"
    box $P5015, "Contextual $*W not found"
    set $P5011, $P5015
  vivi_15855017:
    set $P5010, $P5011
  fallback5015:
    $P5016 = $P5010."cur_lexpad"()
    $P5017 = $P5016."symbol"($P101, "lexical" :named("scope"))
.annotate 'line', 2552
    $P5018 = _lex_param_1."!make"($P102)
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "named_param" :subid("cuid_308_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2555
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
.annotate 'line', 2556
    unless_null _lex_param_1, fallback5018
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5003
  fallback5018:
    set $P5002, _lex_param_1["param_var"]
    unless_null $P5002, fallback5019
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5004
  fallback5019:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 2557
    unless_null _lex_param_1, fallback5020
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5008
  fallback5020:
    set $P5007, _lex_param_1["param_var"]
    unless_null $P5007, fallback5021
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5007, $P5009
  fallback5021:
    set $P5006, $P5007["name"]
    unless_null $P5006, fallback5022
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5006, $P5010
  fallback5022:
    set $S5001, $P5006
    $P5011 = $P101."named"($S5001)
.annotate 'line', 2558
    $P5012 = _lex_param_1."!make"($P101)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "typename" :subid("cuid_309_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2561
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5017 = 'cuid_466_1349901750.327' 
    capture_lex $P5017 
    .lex "@name", $P101 
    .lex "$found", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
.annotate 'line', 2565
    nqp_get_sc_object $P5006, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5005, $P5006, "HLL"
    get_who $P5004, $P5005
    set $P5003, $P5004["Compiler"]
    unless_null $P5003, fallback5023
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5003, $P5007
  fallback5023:
    set $S5001, _lex_param_1
    $P5008 = $P5003."parse_name"($S5001)
    set $P101, $P5008
    box $P5009, 0
    set $P102, $P5009
    new $P5012, 'ExceptionHandler'
    set_label $P5012, catch_handler_15885029
    $P5012.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5012
    .const 'Sub' $P5010 = 'cuid_466_1349901750.327' 
    capture_lex $P5010
    $P5011 = $P5010()
    set $P5013, $P5011
    pop_eh 
    goto skip_handler_15875028
  catch_handler_15885029:
    .get_results ($P5012) 
    set $I10001, 1
    set $P5012["handled"], $I10001
    nqp_get_sc_object $P10001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    finalize $P5012
    pop_upto_eh $P5012
    pop_eh 
    set $P5013, $P10001
    goto skip_handler_15875028
  skip_handler_15875028:
    set $P5016, $P102
    if $P102 goto unless1589_end5031 
.annotate 'line', 2572
.annotate 'line', 2573
    $P5014 = _lex_param_1."CURSOR"()
    set $S5004, _lex_param_1
    concat $S5003, "Use of undeclared type '", $S5004
    concat $S5002, $S5003, "'"
    $P5015 = $P5014."panic"($S5002)
    set $P5016, $P5015
  unless1589_end5031:
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_466_1349901750.327") :anon :lex :outer("cuid_309_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2567
    .lex "$sym", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
.annotate 'line', 2568
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback5024
    nqp_get_sc_object $P5005, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback5025
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5003, $P5006
  fallback5025:
    unless_null $P5003, vivi_15865026
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_15865026:
    set $P5002, $P5003
  fallback5024:
    find_lex $P5008, "@name"
    $P5009 = $P5002."find_sym"($P5008)
    set $P101, $P5009
.annotate 'line', 2569
    find_dynamic_lex $P5010, "$/"
    nqp_get_sc_object $P5014, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["WVal"]
    unless_null $P5011, fallback5027
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5011, $P5015
  fallback5027:
    $P5016 = $P5011."new"($P101 :named("value"))
    $P5017 = $P5010."!make"($P5016)
    box $P5018, 1
    store_lex "$found", $P5018
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "trait" :subid("cuid_310_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2577
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2578
    unless_null _lex_param_1, fallback5032
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback5032:
    set $P5001, _lex_param_1["trait_mod"]
    unless_null $P5001, fallback5033
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback5033:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "trait_mod:sym<is>" :subid("cuid_311_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2581
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5025 = 'cuid_468_1349901750.327' 
    capture_lex $P5025 
    .const 'Sub' $P5025 = 'cuid_470_1349901750.327' 
    capture_lex $P5025 
    .const 'Sub' $P5025 = 'cuid_471_1349901750.327' 
    capture_lex $P5025 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5036
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback5036:
    set $P5001, _lex_param_1["longname"]
    unless_null $P5001, fallback5037
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback5037:
    set $S5001, $P5001
    iseq $I5001, $S5001, "parrot_vtable"
    unless $I5001 goto if1590_else5034 
    .const 'Sub' $P5004 = 'cuid_468_1349901750.327' 
    capture_lex $P5004
    $P5005 = $P5004()
    set $P5024, $P5005
    goto if1590_end5035
  if1590_else5034:
    unless_null _lex_param_1, fallback5061
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5007
  fallback5061:
    set $P5006, _lex_param_1["longname"]
    unless_null $P5006, fallback5062
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5006, $P5008
  fallback5062:
    set $S5002, $P5006
    iseq $I5002, $S5002, "parrot_vtable_handler"
    unless $I5002 goto if1596_else5059 
    .const 'Sub' $P5009 = 'cuid_470_1349901750.327' 
    capture_lex $P5009
    $P5010 = $P5009()
    set $P5023, $P5010
    goto if1596_end5060
  if1596_else5059:
    unless_null _lex_param_1, fallback5078
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5012
  fallback5078:
    set $P5011, _lex_param_1["longname"]
    unless_null $P5011, fallback5079
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5011, $P5013
  fallback5079:
    set $S5003, $P5011
    iseq $I5003, $S5003, "export"
    unless $I5003 goto if1600_else5076 
.annotate 'line', 2607
.annotate 'line', 2608
    .const 'Sub' $P5015 = 'cuid_471_1349901750.327' 
    capture_lex $P5015
    newclosure $P5014, $P5015
    $P5016 = _lex_param_1."!make"($P5014)
    set $P5022, $P5016
    goto if1600_end5077
  if1600_else5076:
.annotate 'line', 2615
.annotate 'line', 2616
    $P5017 = _lex_param_1."CURSOR"()
    unless_null _lex_param_1, fallback5091
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5019
  fallback5091:
    set $P5018, _lex_param_1["longname"]
    unless_null $P5018, fallback5092
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5018, $P5020
  fallback5092:
    set $S5006, $P5018
    concat $S5005, "Trait '", $S5006
    concat $S5004, $S5005, "' not implemented"
    $P5021 = $P5017."panic"($S5004)
    set $P5022, $P5021
  if1600_end5077:
    set $P5023, $P5022
  if1596_end5060:
    set $P5024, $P5023
  if1590_end5035:
    .return ($P5024) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_468_1349901750.327") :anon :lex :outer("cuid_311_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2582
    .const 'Sub' $P5040 = 'cuid_467_1349901750.327' 
    capture_lex $P5040 
    .lex "$cpast", $P101 
    .lex "$name", $P102 
    .lex "$package", $P103 
    .lex "$is_dispatcher", $P104 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P104, $P5004
.annotate 'line', 2584
    find_lex $P5007, "$/"
    unless_null $P5007, fallback5038
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5007, $P5008
  fallback5038:
    set $P5006, $P5007["circumfix"]
    unless_null $P5006, fallback5039
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5006, $P5009
  fallback5039:
    set $P5005, $P5006[0]
    unless_null $P5005, fallback5040
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5005, $P5010
  fallback5040:
    $P5011 = $P5005."ast"()
    set $P101, $P5011
.annotate 'line', 2586
    nqp_get_sc_object $P5015, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["SVal"]
    unless_null $P5012, fallback5043
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5012, $P5016
  fallback5043:
    $P5017 = $P5012."ACCEPTS"($P101)
    set $P5021, $P5017
    if $P5017 goto unless1591_end5042 
.annotate 'line', 2585
    find_lex $P5018, "$/"
    $P5019 = $P5018."CURSOR"()
    $P5020 = $P5019."panic"("Trait 'parrot_vtable' requires constant scalar argument")
    set $P5021, $P5020
  unless1591_end5042:
.annotate 'line', 2587
    $P5022 = $P101."value"()
    set $P102, $P5022
    find_dynamic_lex $P5023, "$*PACKAGE"
    unless_null $P5023, fallback5044
    nqp_get_sc_object $P5026, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5025, $P5026
    set $P5024, $P5025["$PACKAGE"]
    unless_null $P5024, fallback5045
    nqp_get_sc_object $P5027, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5024, $P5027
  fallback5045:
    unless_null $P5024, vivi_15925046
    die "Contextual $*PACKAGE not found"
    box $P5028, "Contextual $*PACKAGE not found"
    set $P5024, $P5028
  vivi_15925046:
    set $P5023, $P5024
  fallback5044:
    set $P103, $P5023
    find_dynamic_lex $P5029, "$*SCOPE"
    unless_null $P5029, fallback5047
    nqp_get_sc_object $P5032, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5031, $P5032
    set $P5030, $P5031["$SCOPE"]
    unless_null $P5030, fallback5048
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5030, $P5033
  fallback5048:
    unless_null $P5030, vivi_15935049
    die "Contextual $*SCOPE not found"
    box $P5034, "Contextual $*SCOPE not found"
    set $P5030, $P5034
  vivi_15935049:
    set $P5029, $P5030
  fallback5047:
    set $S5001, $P5029
    iseq $I5001, $S5001, "proto"
    box $P5035, $I5001
    set $P104, $P5035
.annotate 'line', 2590
    find_dynamic_lex $P5036, "$/"
    .const 'Sub' $P5038 = 'cuid_467_1349901750.327' 
    capture_lex $P5038
    newclosure $P5037, $P5038
    $P5039 = $P5036."!make"($P5037)
    .return ($P5039) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_467_1349901750.327") :anon :lex :outer("cuid_468_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2590
    .param pmc _lex_param_0 
    .lex "$match", _lex_param_0 
.annotate 'line', 2591
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback5050
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback5051
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5005
  fallback5051:
    unless_null $P5002, vivi_15945052
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_15945052:
    set $P5001, $P5002
  fallback5050:
    find_lex $P5007, "$package"
    find_lex $P5008, "$name"
.annotate 'line', 2592
    $P5011 = _lex_param_0."ast"()
    set $P5010, $P5011["code_obj"]
    unless_null $P5010, fallback5054
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5010, $P5012
  fallback5054:
    set $P5009, $P5010
    defined $I5001, $P5009
    if $I5001, defor5053
.annotate 'line', 2593
    find_dynamic_lex $P5013, "$*W"
    unless_null $P5013, fallback5055
    nqp_get_sc_object $P5016, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$W"]
    unless_null $P5014, fallback5056
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5014, $P5017
  fallback5056:
    unless_null $P5014, vivi_15955057
    die "Contextual $*W not found"
    box $P5018, "Contextual $*W not found"
    set $P5014, $P5018
  vivi_15955057:
    set $P5013, $P5014
  fallback5055:
    $P5020 = _lex_param_0."ast"()
    set $P5019, $P5020["block_past"]
    unless_null $P5019, fallback5058
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5019, $P5021
  fallback5058:
    find_lex $P5022, "$name"
    find_lex $P5023, "$is_dispatcher"
    $P5024 = $P5013."create_code"($P5019, $P5022, $P5023)
    set $P5009, $P5024
  defor5053:
    $P5025 = $P5001."pkg_add_method"($P5007, "add_parrot_vtable_mapping", $P5008, $P5009)
    .return ($P5025) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_470_1349901750.327") :anon :lex :outer("cuid_311_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2596
    .const 'Sub' $P5032 = 'cuid_469_1349901750.327' 
    capture_lex $P5032 
    .lex "$cpast", $P101 
    .lex "$name", $P102 
    .lex "$package", $P103 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P103, $P5003
.annotate 'line', 2598
    find_lex $P5006, "$/"
    unless_null $P5006, fallback5063
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5006, $P5007
  fallback5063:
    set $P5005, $P5006["circumfix"]
    unless_null $P5005, fallback5064
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5005, $P5008
  fallback5064:
    set $P5004, $P5005[0]
    unless_null $P5004, fallback5065
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5004, $P5009
  fallback5065:
    $P5010 = $P5004."ast"()
    set $P101, $P5010
.annotate 'line', 2600
    nqp_get_sc_object $P5014, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback5068
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5011, $P5015
  fallback5068:
    $P5016 = $P5011."ACCEPTS"($P101)
    set $P5020, $P5016
    if $P5016 goto unless1597_end5067 
.annotate 'line', 2599
    find_lex $P5017, "$/"
    $P5018 = $P5017."CURSOR"()
    $P5019 = $P5018."panic"("Trait 'parrot_vtable_handler' requires constant scalar argument")
    set $P5020, $P5019
  unless1597_end5067:
.annotate 'line', 2601
    $P5021 = $P101."value"()
    set $P102, $P5021
    find_dynamic_lex $P5022, "$*PACKAGE"
    unless_null $P5022, fallback5069
    nqp_get_sc_object $P5025, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["$PACKAGE"]
    unless_null $P5023, fallback5070
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5023, $P5026
  fallback5070:
    unless_null $P5023, vivi_15985071
    die "Contextual $*PACKAGE not found"
    box $P5027, "Contextual $*PACKAGE not found"
    set $P5023, $P5027
  vivi_15985071:
    set $P5022, $P5023
  fallback5069:
    set $P103, $P5022
.annotate 'line', 2603
    find_dynamic_lex $P5028, "$/"
    .const 'Sub' $P5030 = 'cuid_469_1349901750.327' 
    capture_lex $P5030
    newclosure $P5029, $P5030
    $P5031 = $P5028."!make"($P5029)
    .return ($P5031) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_469_1349901750.327") :anon :lex :outer("cuid_470_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2603
    .param pmc _lex_param_0 
    .lex "$match", _lex_param_0 
.annotate 'line', 2604
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback5072
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback5073
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5005
  fallback5073:
    unless_null $P5002, vivi_15995074
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_15995074:
    set $P5001, $P5002
  fallback5072:
    find_lex $P5007, "$package"
    find_lex $P5008, "$name"
    set $P5009, _lex_param_0["variable"]
    unless_null $P5009, fallback5075
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5009, $P5010
  fallback5075:
    set $S5001, $P5009
    $P5011 = $P5001."pkg_add_parrot_vtable_handler_mapping"($P5007, $P5008, $S5001)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_471_1349901750.327") :anon :lex :outer("cuid_311_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2608
    .param pmc _lex_param_0 
    .lex "$ast", $P101 
    .lex "$name", $P102 
    .lex "$match", _lex_param_0 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
.annotate 'line', 2609
    $P5003 = _lex_param_0."ast"()
    set $P101, $P5003
.annotate 'line', 2610
    set $P5004, $P101["block_past"]
    unless_null $P5004, fallback5080
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5004, $P5005
  fallback5080:
    $P5006 = $P5004."name"()
    set $P102, $P5006
    find_dynamic_lex $P5010, "$*EXPORT"
    unless_null $P5010, fallback5081
    nqp_get_sc_object $P5013, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5012, $P5013
    set $P5011, $P5012["$EXPORT"]
    unless_null $P5011, fallback5082
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5011, $P5014
  fallback5082:
    unless_null $P5011, vivi_16015083
    die "Contextual $*EXPORT not found"
    box $P5015, "Contextual $*EXPORT not found"
    set $P5011, $P5015
  vivi_16015083:
    set $P5010, $P5011
  fallback5081:
    get_who $P5009, $P5010
    set $P5008, $P5009["DEFAULT"]
    unless_null $P5008, fallback5084
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5008, $P5016
  fallback5084:
    get_who $P5007, $P5008
    set $S5002, $P102
    concat $S5001, "&", $S5002
    set $P5018, $P101["code_obj"]
    unless_null $P5018, fallback5086
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5018, $P5019
  fallback5086:
    set $P5017, $P5018
    defined $I5001, $P5017
    if $I5001, defor5085
.annotate 'line', 2612
    find_dynamic_lex $P5020, "$*W"
    unless_null $P5020, fallback5087
    nqp_get_sc_object $P5023, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5022, $P5023
    set $P5021, $P5022["$W"]
    unless_null $P5021, fallback5088
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5021, $P5024
  fallback5088:
    unless_null $P5021, vivi_16025089
    die "Contextual $*W not found"
    box $P5025, "Contextual $*W not found"
    set $P5021, $P5025
  vivi_16025089:
    set $P5020, $P5021
  fallback5087:
    set $P5026, $P101["block_past"]
    unless_null $P5026, fallback5090
    nqp_get_sc_object $P5027, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5026, $P5027
  fallback5090:
    $P5028 = $P5020."create_code"($P5026, $P102, 0)
    set $P5017, $P5028
  defor5085:
    set $P5007[$S5001], $P5017
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "regex_declarator" :subid("cuid_312_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2620
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :optional 
    .param int haz_param_4 :opt_flag 
    .const 'Sub' $P5052 = 'cuid_472_1349901750.327' 
    capture_lex $P5052 
    .const 'Sub' $P5052 = 'cuid_473_1349901750.327' 
    capture_lex $P5052 
    if haz_param_4, default5152
    nqp_get_sc_object $P5051, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_2, $P5051
  default5152:
    .lex "$name", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .lex "$key", _lex_param_2 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
.annotate 'line', 2621
    unless_null _lex_param_1, fallback5093
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5004
  fallback5093:
    set $P5003, _lex_param_1["deflongname"]
    unless_null $P5003, fallback5094
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5003, $P5005
  fallback5094:
    $P5006 = $P5003."ast"()
    set $S5001, $P5006
    box $P5007, $S5001
    set $P101, $P5007
    unless_null _lex_param_1, fallback5097
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5009
  fallback5097:
    set $P5008, _lex_param_1["proto"]
    unless_null $P5008, fallback5098
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5008, $P5010
  fallback5098:
    unless $P5008 goto if1603_else5095 
.annotate 'line', 2623
.annotate 'line', 2625
    nqp_get_sc_object $P5014, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Stmts"]
    unless_null $P5011, fallback5099
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5011, $P5015
  fallback5099:
.annotate 'line', 2626
    nqp_get_sc_object $P5019, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Block"]
    unless_null $P5016, fallback5100
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5016, $P5020
  fallback5100:
.annotate 'line', 2628
    nqp_get_sc_object $P5024, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["Op"]
    unless_null $P5021, fallback5101
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5021, $P5025
  fallback5101:
.annotate 'line', 2629
    nqp_get_sc_object $P5029, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Var"]
    unless_null $P5026, fallback5102
    nqp_get_sc_object $P5030, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5026, $P5030
  fallback5102:
    $P5031 = $P5026."new"("self" :named("name"), "local" :named("scope"), "param" :named("decl"))
.annotate 'line', 2630
    nqp_get_sc_object $P5035, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5034, $P5035, "QAST"
    get_who $P5033, $P5034
    set $P5032, $P5033["SVal"]
    unless_null $P5032, fallback5103
    nqp_get_sc_object $P5036, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5032, $P5036
  fallback5103:
    $P5037 = $P5032."new"($P101 :named("value"))
    $P5038 = $P5021."new"($P5031, $P5037, "!protoregex" :named("name"), "callmethod" :named("op"))
    $P5039 = $P5016."new"($P5038, $P101 :named("name"), "declaration" :named("blocktype"), _lex_param_1 :named("node"))
    $P5040 = $P5011."new"($P5039)
    set $P102, $P5040
    $P5044 = $P102."list"()
    set $P5041, $P5044
    iter $P5043, $P5044
  for_next5113:
    unless $P5043, for_done5115
    shift $P5046, $P5043
  for_redo5114:
    .const 'Sub' $P5045 = 'cuid_472_1349901750.327' 
    capture_lex $P5045
    $P5041 = $P5045($P5046)
    goto for_next5113
  for_done5115:
    set $P5049, $P5041
    goto if1603_end5096
  if1603_else5095:
    .const 'Sub' $P5047 = 'cuid_473_1349901750.327' 
    capture_lex $P5047
    $P5048 = $P5047()
    set $P5049, $P5048
  if1603_end5096:
.annotate 'line', 2668
    $P5050 = _lex_param_1."!make"($P102)
    .return ($P5050) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_472_1349901750.327") :anon :lex :outer("cuid_312_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2638
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 2639
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback5104
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback5105
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5005
  fallback5105:
    unless_null $P5002, vivi_16045106
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_16045106:
    set $P5001, $P5002
  fallback5104:
    find_dynamic_lex $P5007, "$*PACKAGE"
    unless_null $P5007, fallback5107
    nqp_get_sc_object $P5010, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5009, $P5010
    set $P5008, $P5009["$PACKAGE"]
    unless_null $P5008, fallback5108
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5008, $P5011
  fallback5108:
    unless_null $P5008, vivi_16055109
    die "Contextual $*PACKAGE not found"
    box $P5012, "Contextual $*PACKAGE not found"
    set $P5008, $P5012
  vivi_16055109:
    set $P5007, $P5008
  fallback5107:
    $P5013 = _lex_param_0."name"()
    find_dynamic_lex $P5014, "$*W"
    unless_null $P5014, fallback5110
    nqp_get_sc_object $P5017, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5016, $P5017
    set $P5015, $P5016["$W"]
    unless_null $P5015, fallback5111
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5015, $P5018
  fallback5111:
    unless_null $P5015, vivi_16065112
    die "Contextual $*W not found"
    box $P5019, "Contextual $*W not found"
    set $P5015, $P5019
  vivi_16065112:
    set $P5014, $P5015
  fallback5110:
    $P5020 = _lex_param_0."name"()
    $P5021 = $P5014."create_code"(_lex_param_0, $P5020, 0)
    $P5022 = $P5001."pkg_add_method"($P5007, "add_method", $P5013, $P5021)
    .return ($P5022) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_473_1349901750.327") :anon :lex :outer("cuid_312_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2642
    .lex "$block", $P101 
    .lex "$regex", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
.annotate 'line', 2643
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback5116
    nqp_get_sc_object $P5006, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback5117
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5004, $P5007
  fallback5117:
    unless_null $P5004, vivi_16075118
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_16075118:
    set $P5003, $P5004
  fallback5116:
    $P5009 = $P5003."pop_lexpad"()
    set $P101, $P5009
.annotate 'line', 2644
    set $P5010, $P101[0]
    unless_null $P5010, fallback5119
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5010, $P5011
  fallback5119:
    nqp_get_sc_object $P5015, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Var"]
    unless_null $P5012, fallback5120
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5012, $P5016
  fallback5120:
    $P5017 = $P5012."new"("self" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5018 = $P5010."unshift"($P5017)
.annotate 'line', 2645
    set $P5019, $P101[0]
    unless_null $P5019, fallback5121
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5019, $P5020
  fallback5121:
    nqp_get_sc_object $P5024, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["Op"]
    unless_null $P5021, fallback5122
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5021, $P5025
  fallback5122:
.annotate 'line', 2647
    nqp_get_sc_object $P5029, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Var"]
    unless_null $P5026, fallback5123
    nqp_get_sc_object $P5030, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5026, $P5030
  fallback5123:
    $P5031 = $P5026."new"("self" :named("name"), "local" :named("scope"), "var" :named("decl"))
.annotate 'line', 2648
    nqp_get_sc_object $P5035, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5034, $P5035, "QAST"
    get_who $P5033, $P5034
    set $P5032, $P5033["Var"]
    unless_null $P5032, fallback5124
    nqp_get_sc_object $P5036, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5032, $P5036
  fallback5124:
    $P5037 = $P5032."new"("self" :named("name"), "lexical" :named("scope"))
    $P5038 = $P5021."new"($P5031, $P5037, "bind" :named("op"))
    $P5039 = $P5019."push"($P5038)
.annotate 'line', 2649
    set $P5040, $P101[0]
    unless_null $P5040, fallback5125
    nqp_get_sc_object $P5041, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5040, $P5041
  fallback5125:
    nqp_get_sc_object $P5045, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["Var"]
    unless_null $P5042, fallback5126
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5042, $P5046
  fallback5126:
    $P5047 = $P5042."new"(utf8:"$\x{a2}" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5048 = $P5040."push"($P5047)
.annotate 'line', 2650
    set $P5049, $P101[0]
    unless_null $P5049, fallback5127
    nqp_get_sc_object $P5050, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5049, $P5050
  fallback5127:
    nqp_get_sc_object $P5054, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5053, $P5054, "QAST"
    get_who $P5052, $P5053
    set $P5051, $P5052["Var"]
    unless_null $P5051, fallback5128
    nqp_get_sc_object $P5055, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5051, $P5055
  fallback5128:
    $P5056 = $P5051."new"("$/" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5057 = $P5049."push"($P5056)
.annotate 'line', 2651
    $P5058 = $P101."symbol"(utf8:"$\x{a2}", "lexical" :named("scope"))
.annotate 'line', 2652
    $P5059 = $P101."symbol"("$/", "lexical" :named("scope"))
.annotate 'line', 2653
    find_lex $P5068, "$/"
    unless_null $P5068, fallback5130
    nqp_get_sc_object $P5069, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5068, $P5069
  fallback5130:
    set $P5067, $P5068["p6regex"]
    unless_null $P5067, fallback5131
    nqp_get_sc_object $P5070, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5067, $P5070
  fallback5131:
    $P5071 = $P5067."ast"()
    nqp_get_sc_object $P5065, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5064, $P5065, "QRegex"
    nqp_get_package_through_who $P5063, $P5064, "P6Regex"
    nqp_get_package_through_who $P5062, $P5063, "Actions"
    get_who $P5061, $P5062
    set $P5060, $P5061["qbuildsub"]
    unless_null $P5060, fallback5129
    nqp_get_sc_object $P5066, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5060, $P5066
  fallback5129:
    $P5072 = $P5060($P5071, $P101)
    set $P102, $P5072
.annotate 'line', 2654
    find_lex $P5073, "$name"
    $P5074 = $P102."name"($P5073)
    find_dynamic_lex $P5075, "$*PKGDECL"
    unless_null $P5075, fallback5136
    nqp_get_sc_object $P5078, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5077, $P5078
    set $P5076, $P5077["$PKGDECL"]
    unless_null $P5076, fallback5137
    nqp_get_sc_object $P5079, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5076, $P5079
  fallback5137:
    unless_null $P5076, vivi_16105138
    die "Contextual $*PKGDECL not found"
    box $P5080, "Contextual $*PKGDECL not found"
    set $P5076, $P5080
  vivi_16105138:
    set $P5075, $P5076
  fallback5136:
    set $P5088, $P5075
    unless $P5075 goto if1609_end5135 
    find_dynamic_lex $P5082, "$*PACKAGE"
    unless_null $P5082, fallback5139
    nqp_get_sc_object $P5085, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5084, $P5085
    set $P5083, $P5084["$PACKAGE"]
    unless_null $P5083, fallback5140
    nqp_get_sc_object $P5086, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5083, $P5086
  fallback5140:
    unless_null $P5083, vivi_16115141
    die "Contextual $*PACKAGE not found"
    box $P5087, "Contextual $*PACKAGE not found"
    set $P5083, $P5087
  vivi_16115141:
    set $P5082, $P5083
  fallback5139:
    get_how $P5081, $P5082
    can $I5001, $P5081, "add_method"
    box $P5089, $I5001
    set $P5088, $P5089
  if1609_end5135:
    set $P5112, $P5088
    unless $P5088 goto if1608_end5133 
.annotate 'line', 2656
.annotate 'line', 2658
    find_dynamic_lex $P5090, "$*W"
    unless_null $P5090, fallback5142
    nqp_get_sc_object $P5093, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5092, $P5093
    set $P5091, $P5092["$W"]
    unless_null $P5091, fallback5143
    nqp_get_sc_object $P5094, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5091, $P5094
  fallback5143:
    unless_null $P5091, vivi_16125144
    die "Contextual $*W not found"
    box $P5095, "Contextual $*W not found"
    set $P5091, $P5095
  vivi_16125144:
    set $P5090, $P5091
  fallback5142:
    find_dynamic_lex $P5096, "$*PACKAGE"
    unless_null $P5096, fallback5145
    nqp_get_sc_object $P5099, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5098, $P5099
    set $P5097, $P5098["$PACKAGE"]
    unless_null $P5097, fallback5146
    nqp_get_sc_object $P5100, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5097, $P5100
  fallback5146:
    unless_null $P5097, vivi_16135147
    die "Contextual $*PACKAGE not found"
    box $P5101, "Contextual $*PACKAGE not found"
    set $P5097, $P5101
  vivi_16135147:
    set $P5096, $P5097
  fallback5145:
    find_lex $P5102, "$name"
    find_dynamic_lex $P5103, "$*W"
    unless_null $P5103, fallback5148
    nqp_get_sc_object $P5106, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5105, $P5106
    set $P5104, $P5105["$W"]
    unless_null $P5104, fallback5149
    nqp_get_sc_object $P5107, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5104, $P5107
  fallback5149:
    unless_null $P5104, vivi_16145150
    die "Contextual $*W not found"
    box $P5108, "Contextual $*W not found"
    set $P5104, $P5108
  vivi_16145150:
    set $P5103, $P5104
  fallback5148:
    find_lex $P5109, "$name"
    $P5110 = $P5103."create_code"($P102, $P5109, 0)
    $P5111 = $P5090."pkg_add_method"($P5096, "add_method", $P5102, $P5110)
    set $P5112, $P5111
  if1608_end5133:
.annotate 'line', 2662
    nqp_get_sc_object $P5116, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5115, $P5116, "QAST"
    get_who $P5114, $P5115
    set $P5113, $P5114["Op"]
    unless_null $P5113, fallback5151
    nqp_get_sc_object $P5117, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5113, $P5117
  fallback5151:
.annotate 'line', 2664
    new $P5118, 'ResizablePMCArray'
    box $P5119, "NQPRegexMethod"
    push $P5118, $P5119
    find_lex $P5120, "$/"
    $P5121 = "&lexical_package_lookup"($P5118, $P5120)
    $P5122 = $P5113."new"($P5121, $P102, "callmethod" :named("op"), "new" :named("name"))
    store_lex "$past", $P5122
    find_lex $P5123, "$past"
    set $P5123["sink"], $P102
    .return ($P102) 
.end
.HLL "nqp"
.namespace []
.sub "dotty" :subid("cuid_313_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2672
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    unless_null _lex_param_1, fallback5155
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5003
  fallback5155:
    set $P5002, _lex_param_1["args"]
    unless_null $P5002, fallback5156
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5004
  fallback5156:
    unless $P5002 goto if1615_else5153 
.annotate 'line', 2673
    unless_null _lex_param_1, fallback5157
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5007
  fallback5157:
    set $P5006, _lex_param_1["args"]
    unless_null $P5006, fallback5158
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5006, $P5008
  fallback5158:
    set $P5005, $P5006[0]
    unless_null $P5005, fallback5159
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5005, $P5009
  fallback5159:
    $P5010 = $P5005."ast"()
    set $P5017, $P5010
    goto if1615_end5154
  if1615_else5153:
    nqp_get_sc_object $P5014, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback5160
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5011, $P5015
  fallback5160:
    $P5016 = $P5011."new"(_lex_param_1 :named("node"))
    set $P5017, $P5016
  if1615_end5154:
    set $P101, $P5017
    unless_null _lex_param_1, fallback5163
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5019
  fallback5163:
    set $P5018, _lex_param_1["quote"]
    unless_null $P5018, fallback5164
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5018, $P5020
  fallback5164:
    unless $P5018 goto if1616_else5161 
.annotate 'line', 2674
.annotate 'line', 2675
    unless_null _lex_param_1, fallback5165
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5022
  fallback5165:
    set $P5021, _lex_param_1["quote"]
    unless_null $P5021, fallback5166
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5021, $P5023
  fallback5166:
    $P5024 = $P5021."ast"()
    $P5025 = $P101."unshift"($P5024)
.annotate 'line', 2676
    $P5026 = $P101."op"("callmethod")
    set $P5052, $P5026
    goto if1616_end5162
  if1616_else5161:
    unless_null _lex_param_1, fallback5169
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5028
  fallback5169:
    set $P5027, _lex_param_1["longname"]
    unless_null $P5027, fallback5170
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5027, $P5029
  fallback5170:
    set $S5001, $P5027
    iseq $I5001, $S5001, "HOW"
    unless $I5001 goto if1617_else5167 
.annotate 'line', 2678
.annotate 'line', 2679
    $P5030 = $P101."op"("how")
    set $P5051, $P5030
    goto if1617_end5168
  if1617_else5167:
    unless_null _lex_param_1, fallback5173
    nqp_get_sc_object $P5032, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5032
  fallback5173:
    set $P5031, _lex_param_1["longname"]
    unless_null $P5031, fallback5174
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5031, $P5033
  fallback5174:
    set $S5002, $P5031
    iseq $I5002, $S5002, "WHAT"
    unless $I5002 goto if1618_else5171 
.annotate 'line', 2681
.annotate 'line', 2682
    $P5034 = $P101."op"("what")
    set $P5050, $P5034
    goto if1618_end5172
  if1618_else5171:
    unless_null _lex_param_1, fallback5177
    nqp_get_sc_object $P5036, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5036
  fallback5177:
    set $P5035, _lex_param_1["longname"]
    unless_null $P5035, fallback5178
    nqp_get_sc_object $P5037, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5035, $P5037
  fallback5178:
    set $S5003, $P5035
    iseq $I5003, $S5003, "WHO"
    unless $I5003 goto if1619_else5175 
.annotate 'line', 2684
.annotate 'line', 2685
    $P5038 = $P101."op"("who")
    set $P5049, $P5038
    goto if1619_end5176
  if1619_else5175:
    unless_null _lex_param_1, fallback5181
    nqp_get_sc_object $P5040, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5040
  fallback5181:
    set $P5039, _lex_param_1["longname"]
    unless_null $P5039, fallback5182
    nqp_get_sc_object $P5041, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5039, $P5041
  fallback5182:
    set $S5004, $P5039
    iseq $I5004, $S5004, "REPR"
    unless $I5004 goto if1620_else5179 
.annotate 'line', 2687
.annotate 'line', 2688
    $P5042 = $P101."op"("reprname")
    set $P5048, $P5042
    goto if1620_end5180
  if1620_else5179:
.annotate 'line', 2690
.annotate 'line', 2691
    unless_null _lex_param_1, fallback5183
    nqp_get_sc_object $P5044, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5044
  fallback5183:
    set $P5043, _lex_param_1["longname"]
    unless_null $P5043, fallback5184
    nqp_get_sc_object $P5045, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5043, $P5045
  fallback5184:
    set $S5005, $P5043
    $P5046 = $P101."name"($S5005)
.annotate 'line', 2692
    $P5047 = $P101."op"("callmethod")
    set $P5048, $P5047
  if1620_end5180:
    set $P5049, $P5048
  if1619_end5176:
    set $P5050, $P5049
  if1618_end5172:
    set $P5051, $P5050
  if1617_end5168:
    set $P5052, $P5051
  if1616_end5162:
.annotate 'line', 2694
    $P5053 = _lex_param_1."!make"($P101)
    .return ($P5053) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<self>" :subid("cuid_314_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2699
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2700
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VM"]
    unless_null $P5001, fallback5185
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5005
  fallback5185:
.annotate 'line', 2701
    nqp_get_sc_object $P5009, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Var"]
    unless_null $P5006, fallback5186
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5006, $P5010
  fallback5186:
    $P5011 = $P5006."new"("self" :named("name"), "lexical" :named("scope"))
    $P5012 = $P5001."new"($P5011, "nqp_decontainerize PP" :named("pirop"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<identifier>" :subid("cuid_315_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2704
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
.annotate 'line', 2705
    unless_null _lex_param_1, fallback5187
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5003
  fallback5187:
    set $P5002, _lex_param_1["args"]
    unless_null $P5002, fallback5188
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5004
  fallback5188:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 2706
    unless_null _lex_param_1, fallback5189
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5007
  fallback5189:
    set $P5006, _lex_param_1["deflongname"]
    unless_null $P5006, fallback5190
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5006, $P5008
  fallback5190:
    set $S5002, $P5006
    concat $S5001, "&", $S5002
    $P5009 = $P101."name"($S5001)
.annotate 'line', 2707
    $P5010 = _lex_param_1."!make"($P101)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<name>" :subid("cuid_316_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2710
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5051 = 'cuid_474_1349901750.327' 
    capture_lex $P5051 
    .const 'Sub' $P5051 = 'cuid_475_1349901750.327' 
    capture_lex $P5051 
    .lex "$var", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
.annotate 'line', 2713
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback5193
    nqp_get_sc_object $P5006, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback5194
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5004, $P5007
  fallback5194:
    unless_null $P5004, vivi_16225195
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_16225195:
    set $P5003, $P5004
  fallback5193:
    unless_null _lex_param_1, fallback5196
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5010
  fallback5196:
    set $P5009, _lex_param_1["name"]
    unless_null $P5009, fallback5197
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5009, $P5011
  fallback5197:
    set $S5001, $P5009
    $P5012 = $P5003."is_lexical"($S5001)
    unless $P5012 goto if1621_else5191 
    new $P5034, 'ExceptionHandler'
    set_label $P5034, catch_handler_16275210
    $P5034.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5034
.annotate 'line', 2714
    new $P5032, 'ExceptionHandler'
    set_label $P5032, catch_handler_16255205
    $P5032.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5032
.annotate 'line', 2715
    nqp_get_sc_object $P5016, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["WVal"]
    unless_null $P5013, fallback5198
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5013, $P5017
  fallback5198:
    find_dynamic_lex $P5018, "$*W"
    unless_null $P5018, fallback5199
    nqp_get_sc_object $P5021, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["$W"]
    unless_null $P5019, fallback5200
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5019, $P5022
  fallback5200:
    unless_null $P5019, vivi_16235201
    die "Contextual $*W not found"
    box $P5023, "Contextual $*W not found"
    set $P5019, $P5023
  vivi_16235201:
    set $P5018, $P5019
  fallback5199:
    new $P5024, 'ResizablePMCArray'
    unless_null _lex_param_1, fallback5202
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5026
  fallback5202:
    set $P5025, _lex_param_1["name"]
    unless_null $P5025, fallback5203
    nqp_get_sc_object $P5027, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5025, $P5027
  fallback5203:
    set $S5002, $P5025
    box $P5028, $S5002
    push $P5024, $P5028
    $P5029 = $P5018."find_sym"($P5024)
    $P5030 = $P5013."new"($P5029 :named("value"))
    set $P101, $P5030
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5033, $P5031
    pop_eh 
    goto skip_handler_16245204
  catch_handler_16255205:
    .get_results ($P5032) 
    .const 'Sub' $P10001 = 'cuid_474_1349901750.327' 
    capture_lex $P10001
    $P10002 = $P10001($P5032)
    set $I10001, 1
    set $P5032["handled"], $I10001
    nqp_get_sc_object $P10003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    finalize $P5032
    pop_upto_eh $P5032
    pop_eh 
    set $P5033, $P10003
    goto skip_handler_16245204
  skip_handler_16245204:
    set $P5035, $P5033
    pop_eh 
    goto skip_handler_16265209
  catch_handler_16275210:
    .get_results ($P5034) 
    set $I10001, 1
    set $P5034["handled"], $I10001
    nqp_get_sc_object $P10001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    finalize $P5034
    pop_upto_eh $P5034
    pop_eh 
    set $P5035, $P10001
    goto skip_handler_16265209
  skip_handler_16265209:
    set $P5038, $P5035
    goto if1621_end5192
  if1621_else5191:
    .const 'Sub' $P5036 = 'cuid_475_1349901750.327' 
    capture_lex $P5036
    $P5037 = $P5036()
    set $P5038, $P5037
  if1621_end5192:
    set $P102, $P101
    unless_null _lex_param_1, fallback5216
    nqp_get_sc_object $P5040, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5040
  fallback5216:
    set $P5039, _lex_param_1["args"]
    unless_null $P5039, fallback5217
    nqp_get_sc_object $P5041, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5039, $P5041
  fallback5217:
    set $P5049, $P5039
    unless $P5039 goto if1628_end5215 
.annotate 'line', 2728
.annotate 'line', 2729
    unless_null _lex_param_1, fallback5218
    nqp_get_sc_object $P5044, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5044
  fallback5218:
    set $P5043, _lex_param_1["args"]
    unless_null $P5043, fallback5219
    nqp_get_sc_object $P5045, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5043, $P5045
  fallback5219:
    set $P5042, $P5043[0]
    unless_null $P5042, fallback5220
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5042, $P5046
  fallback5220:
    $P5047 = $P5042."ast"()
    set $P102, $P5047
.annotate 'line', 2730
    $P5048 = $P102."unshift"($P101)
    set $P5049, $P5048
  if1628_end5215:
.annotate 'line', 2732
    $P5050 = _lex_param_1."!make"($P102)
    .return ($P5050) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_474_1349901750.327") :anon :lex :outer("cuid_316_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2716
    .param pmc _lex_param_0 
    .lex "$!", $P101 
    .lex "$_", _lex_param_0 
    set $P101, _lex_param_0
.annotate 'line', 2717
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Var"]
    unless_null $P5001, fallback5206
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5005
  fallback5206:
    find_lex $P5007, "$/"
    unless_null $P5007, fallback5207
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5007, $P5008
  fallback5207:
    set $P5006, $P5007["name"]
    unless_null $P5006, fallback5208
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5006, $P5009
  fallback5208:
    set $S5001, $P5006
    $P5010 = $P5001."new"($S5001 :named("name"), "lexical" :named("scope"))
    store_lex "$var", $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_475_1349901750.327") :anon :lex :outer("cuid_316_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2721
    .lex "@ns", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    find_lex $P5005, "$/"
    unless_null $P5005, fallback5211
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5005, $P5006
  fallback5211:
    set $P5004, $P5005["name"]
    unless_null $P5004, fallback5212
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5004, $P5007
  fallback5212:
    set $P5003, $P5004["identifier"]
    unless_null $P5003, fallback5213
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5003, $P5008
  fallback5213:
    clone $P5002, $P5003
    set $P101, $P5002
.annotate 'line', 2723
    find_lex $P5009, "$/"
    $P5010 = "&lexical_package_lookup"($P101, $P5009)
    store_lex "$var", $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::op>" :subid("cuid_317_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2735
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "@args", $P101 
    .lex "$pirop", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
    unless_null _lex_param_1, fallback5223
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5004
  fallback5223:
    set $P5003, _lex_param_1["args"]
    unless_null $P5003, fallback5224
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5003, $P5005
  fallback5224:
    unless $P5003 goto if1629_else5221 
.annotate 'line', 2736
    unless_null _lex_param_1, fallback5225
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5008
  fallback5225:
    set $P5007, _lex_param_1["args"]
    unless_null $P5007, fallback5226
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5007, $P5009
  fallback5226:
    set $P5006, $P5007[0]
    unless_null $P5006, fallback5227
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5006, $P5010
  fallback5227:
    $P5011 = $P5006."ast"()
    $P5012 = $P5011."list"()
    set $P5014, $P5012
    goto if1629_end5222
  if1629_else5221:
    new $P5013, 'ResizablePMCArray'
    set $P5014, $P5013
  if1629_end5222:
    set $P101, $P5014
    unless_null _lex_param_1, fallback5228
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5016
  fallback5228:
    set $P5015, _lex_param_1["op"]
    unless_null $P5015, fallback5229
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5015, $P5017
  fallback5229:
    set $S5001, $P5015
    box $P5018, $S5001
    set $P102, $P5018
    set $S5003, $P102
    split $P5019, "__", $S5003
    join $S5002, " ", $P5019
    box $P5020, $S5002
    set $P102, $P5020
.annotate 'line', 2739
    nqp_get_sc_object $P5024, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["VM"]
    unless_null $P5021, fallback5230
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5021, $P5025
  fallback5230:
    $P5026 = $P5021."new"($P101 :flat, $P102 :named("pirop"), _lex_param_1 :named("node"))
    $P5027 = _lex_param_1."!make"($P5026)
    .return ($P5027) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::const>" :subid("cuid_318_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2742
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2743
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VM"]
    unless_null $P5001, fallback5231
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5005
  fallback5231:
    unless_null _lex_param_1, fallback5232
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5007
  fallback5232:
    set $P5006, _lex_param_1["const"]
    unless_null $P5006, fallback5233
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5006, $P5008
  fallback5233:
    set $S5001, $P5006
    $P5009 = $P5001."new"($S5001 :named("pirconst"))
    $P5010 = _lex_param_1."!make"($P5009)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<nqp::op>" :subid("cuid_319_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2746
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$op", $P101 
    .lex "@args", $P102 
    .lex "$past", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P103, $P5003
    unless_null _lex_param_1, fallback5234
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5005
  fallback5234:
    set $P5004, _lex_param_1["op"]
    unless_null $P5004, fallback5235
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5004, $P5006
  fallback5235:
    set $S5001, $P5004
    box $P5007, $S5001
    set $P101, $P5007
    unless_null _lex_param_1, fallback5238
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5009
  fallback5238:
    set $P5008, _lex_param_1["args"]
    unless_null $P5008, fallback5239
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5008, $P5010
  fallback5239:
    unless $P5008 goto if1630_else5236 
.annotate 'line', 2748
    unless_null _lex_param_1, fallback5240
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5013
  fallback5240:
    set $P5012, _lex_param_1["args"]
    unless_null $P5012, fallback5241
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5012, $P5014
  fallback5241:
    set $P5011, $P5012[0]
    unless_null $P5011, fallback5242
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5011, $P5015
  fallback5242:
    $P5016 = $P5011."ast"()
    $P5017 = $P5016."list"()
    set $P5019, $P5017
    goto if1630_end5237
  if1630_else5236:
    new $P5018, 'ResizablePMCArray'
    set $P5019, $P5018
  if1630_end5237:
    set $P102, $P5019
.annotate 'line', 2749
    nqp_get_sc_object $P5023, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback5243
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5020, $P5024
  fallback5243:
    $P5025 = $P5020."new"($P102 :flat, $P101 :named("op"), _lex_param_1 :named("node"))
    set $P103, $P5025
.annotate 'line', 2750
    $P5026 = _lex_param_1."!make"($P103)
    .return ($P5026) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<onlystar>" :subid("cuid_320_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2753
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2754
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5244
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5005
  fallback5244:
    $P5006 = $P5001."new"("nqpmultidispatch" :named("op"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "args" :subid("cuid_321_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2757
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5245
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback5245:
    set $P5001, _lex_param_1["arglist"]
    unless_null $P5001, fallback5246
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback5246:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "arglist" :subid("cuid_322_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2759
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5056 = 'cuid_477_1349901750.327' 
    capture_lex $P5056 
    .lex "$past", $P101 
    .lex "$i", $P102 
    .lex "$n", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc tmp_2 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P103, $P5003
.annotate 'line', 2760
    nqp_get_sc_object $P5007, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Op"]
    unless_null $P5004, fallback5247
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5004, $P5008
  fallback5247:
    $P5009 = $P5004."new"("call" :named("op"), _lex_param_1 :named("node"))
    set $P101, $P5009
    unless_null _lex_param_1, fallback5250
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5011
  fallback5250:
    set $P5010, _lex_param_1["EXPR"]
    unless_null $P5010, fallback5251
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5010, $P5012
  fallback5251:
    set $P5015, $P5010
    unless $P5010 goto if1631_end5249 
    .const 'Sub' $P5013 = 'cuid_477_1349901750.327' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5015, $P5014
  if1631_end5249:
    box $P5016, 0
    set $P102, $P5016
.annotate 'line', 2769
    $P5017 = $P101."list"()
    set $N5001, $P5017
    box $P5018, $N5001
    set $P103, $P5018
  while1635_test5264:
    set $N5002, $P102
    set $N5003, $P103
    islt $I5001, $N5002, $N5003
    box $P5054, $I5001
    set $P5053, $P5054
    unless $I5001 goto while1635_done5268 
  while1635_redo5266:
.annotate 'line', 2770
    set $I5003, $P102
    set $P5019, $P101[$I5003]
    unless_null $P5019, fallback5273
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5019, $P5020
  fallback5273:
    nqp_get_sc_object $P5024, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["Op"]
    unless_null $P5021, fallback5274
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5021, $P5025
  fallback5274:
    type_check $I5002, $P5019, $P5021
    set $I5006, $I5002
    unless $I5002 goto if1637_end5272 
.annotate 'line', 2771
    set $I5005, $P102
    set $P5026, $P101[$I5005]
    unless_null $P5026, fallback5275
    nqp_get_sc_object $P5027, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5026, $P5027
  fallback5275:
    $P5028 = $P5026."name"()
    set $S5001, $P5028
    iseq $I5004, $S5001, "&prefix:<|>"
    set $I5006, $I5004
  if1637_end5272:
    box $P5052, $I5006
    set $P5051, $P5052
    unless $I5006 goto if1636_end5270 
    set $I5007, $P102
    set $I5008, $P102
    set $P5030, $P101[$I5008]
    unless_null $P5030, fallback5276
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5030, $P5031
  fallback5276:
    set $P5029, $P5030[0]
    unless_null $P5029, fallback5277
    nqp_get_sc_object $P5032, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5029, $P5032
  fallback5277:
    set $P101[$I5007], $P5029
.annotate 'line', 2773
    set $I5009, $P102
    set $P5033, $P101[$I5009]
    unless_null $P5033, fallback5278
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5033, $P5034
  fallback5278:
    $P5035 = $P5033."flat"(1)
    set $I5011, $P102
    set $P5036, $P101[$I5011]
    unless_null $P5036, fallback5283
    nqp_get_sc_object $P5037, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5036, $P5037
  fallback5283:
    nqp_get_sc_object $P5041, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5040, $P5041, "QAST"
    get_who $P5039, $P5040
    set $P5038, $P5039["Var"]
    unless_null $P5038, fallback5284
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5038, $P5042
  fallback5284:
    type_check $I5010, $P5036, $P5038
    set $I5014, $I5010
    unless $I5010 goto if1639_end5282 
.annotate 'line', 2775
    set $I5013, $P102
    set $P5043, $P101[$I5013]
    unless_null $P5043, fallback5285
    nqp_get_sc_object $P5044, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5043, $P5044
  fallback5285:
    $P5045 = $P5043."name"()
    set $S5003, $P5045
    substr $S5002, $S5003, 0, 1
    iseq $I5012, $S5002, "%"
    set $I5014, $I5012
  if1639_end5282:
    box $P5050, $I5014
    set $P5049, $P5050
    unless $I5014 goto if1638_end5280 
.annotate 'line', 2774
    set $I5015, $P102
    set $P5046, $P101[$I5015]
    unless_null $P5046, fallback5286
    nqp_get_sc_object $P5047, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5046, $P5047
  fallback5286:
    $P5048 = $P5046."named"(1)
    set $P5049, $P5048
  if1638_end5280:
    set $P5051, $P5049
  if1636_end5270:
    set tmp_2, $P102
    set $N5005, tmp_2
    set $N5006, 1
    add $N5004, $N5005, $N5006
    box $P5053, $N5004
    set $P102, $P5053
    set $P5053, tmp_2
    goto while1635_test5264 
  while1635_done5268:
.annotate 'line', 2779
    $P5055 = _lex_param_1."!make"($P101)
    .return ($P5055) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_477_1349901750.327") :anon :lex :outer("cuid_322_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2761
    .const 'Sub' $P5023 = 'cuid_476_1349901750.327' 
    capture_lex $P5023 
    .lex "$expr", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
.annotate 'line', 2762
    find_lex $P5003, "$/"
    unless_null $P5003, fallback5252
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5003, $P5004
  fallback5252:
    set $P5002, $P5003["EXPR"]
    unless_null $P5002, fallback5253
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5005
  fallback5253:
    $P5006 = $P5002."ast"()
    set $P101, $P5006
    nqp_get_sc_object $P5010, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Op"]
    unless_null $P5007, fallback5260
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5007, $P5011
  fallback5260:
    type_check $I5001, $P101, $P5007
    set $I5003, $I5001
    unless $I5001 goto if1634_end5259 
.annotate 'line', 2763
    $P5012 = $P101."name"()
    set $S5001, $P5012
    iseq $I5002, $S5001, "&infix:<,>"
    set $I5003, $I5002
  if1634_end5259:
    set $I5005, $I5003
    unless $I5003 goto if1633_end5257 
    $P5013 = $P101."named"()
    isfalse $I5004, $P5013
    set $I5005, $I5004
  if1633_end5257:
    unless $I5005 goto if1632_else5254 
.annotate 'line', 2764
    $P5017 = $P101."list"()
    set $P5014, $P5017
    iter $P5016, $P5017
  for_next5261:
    unless $P5016, for_done5263
    shift $P5019, $P5016
  for_redo5262:
    .const 'Sub' $P5018 = 'cuid_476_1349901750.327' 
    capture_lex $P5018
    $P5014 = $P5018($P5019)
    goto for_next5261
  for_done5263:
    set $P5022, $P5014
    goto if1632_end5255
  if1632_else5254:
.annotate 'line', 2766
    find_lex $P5020, "$past"
    $P5021 = $P5020."push"($P101)
    set $P5022, $P5021
  if1632_end5255:
    .return ($P5022) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_476_1349901750.327") :anon :lex :outer("cuid_477_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2764
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$past"
    $P5002 = $P5001."push"(_lex_param_0)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<multi_declarator>" :subid("cuid_323_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2782
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5287
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback5287:
    set $P5001, _lex_param_1["multi_declarator"]
    unless_null $P5001, fallback5288
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback5288:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<value>" :subid("cuid_324_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2784
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5289
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback5289:
    set $P5001, _lex_param_1["value"]
    unless_null $P5001, fallback5290
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback5290:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<( )>" :subid("cuid_325_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2786
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2787
    unless_null _lex_param_1, fallback5293
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback5293:
    set $P5001, _lex_param_1["EXPR"]
    unless_null $P5001, fallback5294
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback5294:
    unless $P5001 goto if1640_else5291 
.annotate 'line', 2788
    unless_null _lex_param_1, fallback5295
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5006
  fallback5295:
    set $P5005, _lex_param_1["EXPR"]
    unless_null $P5005, fallback5296
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5005, $P5007
  fallback5296:
    set $P5004, $P5005[0]
    unless_null $P5004, fallback5297
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5004, $P5008
  fallback5297:
    $P5009 = $P5004."ast"()
    set $P5016, $P5009
    goto if1640_end5292
  if1640_else5291:
.annotate 'line', 2789
    nqp_get_sc_object $P5013, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5012, $P5013, "QAST"
    get_who $P5011, $P5012
    set $P5010, $P5011["Op"]
    unless_null $P5010, fallback5298
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5010, $P5014
  fallback5298:
    $P5015 = $P5010."new"("list" :named("op"), _lex_param_1 :named("node"))
    set $P5016, $P5015
  if1640_end5292:
    $P5017 = _lex_param_1."!make"($P5016)
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<[ ]>" :subid("cuid_326_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2792
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    unless_null _lex_param_1, fallback5301
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5003
  fallback5301:
    set $P5002, _lex_param_1["EXPR"]
    unless_null $P5002, fallback5302
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5004
  fallback5302:
    unless $P5002 goto if1641_else5299 
.annotate 'line', 2794
.annotate 'line', 2795
    unless_null _lex_param_1, fallback5303
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5007
  fallback5303:
    set $P5006, _lex_param_1["EXPR"]
    unless_null $P5006, fallback5304
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5006, $P5008
  fallback5304:
    set $P5005, $P5006[0]
    unless_null $P5005, fallback5305
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5005, $P5009
  fallback5305:
    $P5010 = $P5005."ast"()
    set $P101, $P5010
    nqp_get_sc_object $P5014, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback5310
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5011, $P5015
  fallback5310:
    type_check $I5001, $P101, $P5011
    set $I5003, $I5001
    unless $I5001 goto if1643_end5309 
.annotate 'line', 2796
    $P5016 = $P101."name"()
    set $S5001, $P5016
    iseq $I5002, $S5001, "&infix:<,>"
    set $I5003, $I5002
  if1643_end5309:
    box $P5024, $I5003
    set $P5023, $P5024
    if $I5003 goto unless1642_end5307 
.annotate 'line', 2797
    nqp_get_sc_object $P5020, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Op"]
    unless_null $P5017, fallback5311
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5017, $P5021
  fallback5311:
    $P5022 = $P5017."new"($P101, "list" :named("op"))
    set $P101, $P5022
    set $P5023, $P101
  unless1642_end5307:
    set $P5031, $P5023
    goto if1641_end5300
  if1641_else5299:
.annotate 'line', 2800
.annotate 'line', 2801
    nqp_get_sc_object $P5028, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["Op"]
    unless_null $P5025, fallback5312
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5025, $P5029
  fallback5312:
    $P5030 = $P5025."new"("list" :named("op"))
    set $P101, $P5030
    set $P5031, $P101
  if1641_end5300:
.annotate 'line', 2803
    $P5032 = $P101."name"("&circumfix:<[ ]>")
.annotate 'line', 2804
    $P5033 = _lex_param_1."!make"($P101)
    .return ($P5033) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<ang>" :subid("cuid_327_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2807
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5313
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback5313:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5314
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback5314:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub utf8:"circumfix:sym<\x{ab} \x{bb}>" :subid("cuid_328_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2808
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5315
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback5315:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5316
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback5316:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<{ }>" :subid("cuid_329_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2810
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5028 = 'cuid_478_1349901750.327' 
    capture_lex $P5028 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5319
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5005
  fallback5319:
    set $P5004, _lex_param_1["pblock"]
    unless_null $P5004, fallback5320
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5004, $P5006
  fallback5320:
    set $P5003, $P5004["blockoid"]
    unless_null $P5003, fallback5321
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5003, $P5007
  fallback5321:
    set $P5002, $P5003["statementlist"]
    unless_null $P5002, fallback5322
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5008
  fallback5322:
    set $P5001, $P5002["statement"]
    unless_null $P5001, fallback5323
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5009
  fallback5323:
    set $N5001, $P5001
    set $N5002, 0
    isgt $I5001, $N5001, $N5002
    unless $I5001 goto if1644_else5317 
    .const 'Sub' $P5010 = 'cuid_478_1349901750.327' 
    capture_lex $P5010
    $P5011 = $P5010()
    set $P5027, $P5011
    goto if1644_end5318
  if1644_else5317:
    unless_null _lex_param_1, fallback5329
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5015
  fallback5329:
    set $P5014, _lex_param_1["pblock"]
    unless_null $P5014, fallback5330
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5014, $P5016
  fallback5330:
    set $P5013, $P5014["blockoid"]
    unless_null $P5013, fallback5331
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5013, $P5017
  fallback5331:
    set $P5012, $P5013["you_are_here"]
    unless_null $P5012, fallback5332
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5012, $P5018
  fallback5332:
    unless $P5012 goto if1645_else5327 
.annotate 'line', 2816
.annotate 'line', 2817
    unless_null _lex_param_1, fallback5333
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5020
  fallback5333:
    set $P5019, _lex_param_1["pblock"]
    unless_null $P5019, fallback5334
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5019, $P5021
  fallback5334:
    $P5022 = $P5019."ast"()
    $P5023 = _lex_param_1."!make"($P5022)
    set $P5026, $P5023
    goto if1645_end5328
  if1645_else5327:
.annotate 'line', 2819
.annotate 'line', 2820
    $P5024 = "&default_for"("%")
    $P5025 = _lex_param_1."!make"($P5024)
    set $P5026, $P5025
  if1645_end5328:
    set $P5027, $P5026
  if1644_end5318:
    .return ($P5027) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_478_1349901750.327") :anon :lex :outer("cuid_329_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2811
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
.annotate 'line', 2812
    nqp_get_sc_object $P5005, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Op"]
    unless_null $P5002, fallback5324
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5006
  fallback5324:
    find_lex $P5008, "$/"
    unless_null $P5008, fallback5325
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5008, $P5009
  fallback5325:
    set $P5007, $P5008["pblock"]
    unless_null $P5007, fallback5326
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5007, $P5010
  fallback5326:
    $P5011 = $P5007."ast"()
    $P5012 = $P5002."new"($P5011, "takeclosure" :named("op"))
    set $P101, $P5012
    box $P5013, 1
    set $P101["bareblock"], $P5013
.annotate 'line', 2814
    find_dynamic_lex $P5014, "$/"
    $P5015 = $P5014."!make"($P101)
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<sigil>" :subid("cuid_330_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2824
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$name", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    unless_null _lex_param_1, fallback5337
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5003
  fallback5337:
    set $P5002, _lex_param_1["sigil"]
    unless_null $P5002, fallback5338
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5004
  fallback5338:
    set $S5001, $P5002
    iseq $I5001, $S5001, "@"
    unless $I5001 goto if1646_else5335 
    set $S5004, "list"
    goto if1646_end5336
  if1646_else5335:
    unless_null _lex_param_1, fallback5341
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5006
  fallback5341:
    set $P5005, _lex_param_1["sigil"]
    unless_null $P5005, fallback5342
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5005, $P5007
  fallback5342:
    set $S5002, $P5005
    iseq $I5002, $S5002, "%"
    unless $I5002 goto if1647_else5339 
    set $S5003, "hash"
    goto if1647_end5340
  if1647_else5339:
    set $S5003, "item"
  if1647_end5340:
    set $S5004, $S5003
  if1646_end5336:
    box $P5008, $S5004
    set $P101, $P5008
.annotate 'line', 2828
    nqp_get_sc_object $P5012, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["Op"]
    unless_null $P5009, fallback5343
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5009, $P5013
  fallback5343:
    unless_null _lex_param_1, fallback5344
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5015
  fallback5344:
    set $P5014, _lex_param_1["semilist"]
    unless_null $P5014, fallback5345
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5014, $P5016
  fallback5345:
    $P5017 = $P5014."ast"()
    $P5018 = $P5009."new"($P5017, "callmethod" :named("op"), $P101 :named("name"))
    $P5019 = _lex_param_1."!make"($P5018)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "semilist" :subid("cuid_331_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2831
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5346
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback5346:
    set $P5001, _lex_param_1["statement"]
    unless_null $P5001, fallback5347
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback5347:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<[ ]>" :subid("cuid_332_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2833
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2834
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VarWithFallback"]
    unless_null $P5001, fallback5348
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5005
  fallback5348:
    unless_null _lex_param_1, fallback5349
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5007
  fallback5349:
    set $P5006, _lex_param_1["EXPR"]
    unless_null $P5006, fallback5350
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5006, $P5008
  fallback5350:
    $P5009 = $P5006."ast"()
    $P5010 = "&default_for"("$")
    $P5011 = $P5001."new"($P5009, "positional" :named("scope"), $P5010 :named("fallback"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<{ }>" :subid("cuid_333_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2837
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2838
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VarWithFallback"]
    unless_null $P5001, fallback5351
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5005
  fallback5351:
    unless_null _lex_param_1, fallback5352
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5007
  fallback5352:
    set $P5006, _lex_param_1["EXPR"]
    unless_null $P5006, fallback5353
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5006, $P5008
  fallback5353:
    $P5009 = $P5006."ast"()
    $P5010 = "&default_for"("$")
    $P5011 = $P5001."new"($P5009, "associative" :named("scope"), $P5010 :named("fallback"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<ang>" :subid("cuid_334_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2841
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2842
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VarWithFallback"]
    unless_null $P5001, fallback5354
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5005
  fallback5354:
    unless_null _lex_param_1, fallback5355
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5007
  fallback5355:
    set $P5006, _lex_param_1["quote_EXPR"]
    unless_null $P5006, fallback5356
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5006, $P5008
  fallback5356:
    $P5009 = $P5006."ast"()
    $P5010 = "&default_for"("$")
    $P5011 = $P5001."new"($P5009, "associative" :named("scope"), $P5010 :named("fallback"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<( )>" :subid("cuid_335_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2845
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2846
    unless_null _lex_param_1, fallback5357
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback5357:
    set $P5001, _lex_param_1["arglist"]
    unless_null $P5001, fallback5358
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback5358:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "value" :subid("cuid_336_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2849
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2850
    unless_null _lex_param_1, fallback5361
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback5361:
    set $P5001, _lex_param_1["quote"]
    unless_null $P5001, fallback5362
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback5362:
    unless $P5001 goto if1648_else5359 
    unless_null _lex_param_1, fallback5363
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5005
  fallback5363:
    set $P5004, _lex_param_1["quote"]
    unless_null $P5004, fallback5364
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5004, $P5006
  fallback5364:
    $P5007 = $P5004."ast"()
    set $P5012, $P5007
    goto if1648_end5360
  if1648_else5359:
    unless_null _lex_param_1, fallback5365
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5009
  fallback5365:
    set $P5008, _lex_param_1["number"]
    unless_null $P5008, fallback5366
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5008, $P5010
  fallback5366:
    $P5011 = $P5008."ast"()
    set $P5012, $P5011
  if1648_end5360:
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "number" :subid("cuid_337_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2853
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$value", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    unless_null _lex_param_1, fallback5369
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5003
  fallback5369:
    set $P5002, _lex_param_1["dec_number"]
    unless_null $P5002, fallback5370
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5004
  fallback5370:
    unless $P5002 goto if1649_else5367 
.annotate 'line', 2854
    unless_null _lex_param_1, fallback5371
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5006
  fallback5371:
    set $P5005, _lex_param_1["dec_number"]
    unless_null $P5005, fallback5372
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5005, $P5007
  fallback5372:
    $P5008 = $P5005."ast"()
    set $P5013, $P5008
    goto if1649_end5368
  if1649_else5367:
    unless_null _lex_param_1, fallback5373
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5010
  fallback5373:
    set $P5009, _lex_param_1["integer"]
    unless_null $P5009, fallback5374
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5009, $P5011
  fallback5374:
    $P5012 = $P5009."ast"()
    set $P5013, $P5012
  if1649_end5368:
    set $P101, $P5013
    unless_null _lex_param_1, fallback5377
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5015
  fallback5377:
    set $P5014, _lex_param_1["sign"]
    unless_null $P5014, fallback5378
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5014, $P5016
  fallback5378:
    set $S5001, $P5014
    iseq $I5001, $S5001, "-"
    box $P5019, $I5001
    set $P5018, $P5019
    unless $I5001 goto if1650_end5376 
.annotate 'line', 2855
    set $N5002, $P101
    neg $N5001, $N5002
    box $P5017, $N5001
    set $P101, $P5017
    set $P5018, $P101
  if1650_end5376:
.annotate 'line', 2856
    unless_null _lex_param_1, fallback5381
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5021
  fallback5381:
    set $P5020, _lex_param_1["dec_number"]
    unless_null $P5020, fallback5382
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5020, $P5022
  fallback5382:
    unless $P5020 goto if1651_else5379 
.annotate 'line', 2857
    nqp_get_sc_object $P5026, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5025, $P5026, "QAST"
    get_who $P5024, $P5025
    set $P5023, $P5024["NVal"]
    unless_null $P5023, fallback5383
    nqp_get_sc_object $P5027, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5023, $P5027
  fallback5383:
    $P5028 = $P5023."new"($P101 :named("value"))
    set $P5035, $P5028
    goto if1651_end5380
  if1651_else5379:
.annotate 'line', 2858
    nqp_get_sc_object $P5032, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["IVal"]
    unless_null $P5029, fallback5384
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5029, $P5033
  fallback5384:
    $P5034 = $P5029."new"($P101 :named("value"))
    set $P5035, $P5034
  if1651_end5380:
    $P5036 = _lex_param_1."!make"($P5035)
    .return ($P5036) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<apos>" :subid("cuid_338_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2861
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5385
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback5385:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5386
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback5386:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<dblq>" :subid("cuid_339_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2862
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5387
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback5387:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5388
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback5388:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<qq>" :subid("cuid_340_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2863
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5389
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback5389:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5390
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback5390:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<q>" :subid("cuid_341_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2864
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5391
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback5391:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5392
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback5392:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q>" :subid("cuid_342_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2865
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5393
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback5393:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5394
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback5394:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q:PIR>" :subid("cuid_343_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2866
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2867
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VM"]
    unless_null $P5001, fallback5395
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5005
  fallback5395:
    unless_null _lex_param_1, fallback5396
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5007
  fallback5396:
    set $P5006, _lex_param_1["quote_EXPR"]
    unless_null $P5006, fallback5397
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5006, $P5008
  fallback5397:
    $P5009 = $P5006."ast"()
    $P5010 = $P5009."value"()
    $P5011 = $P5001."new"($P5010 :named("pir"), _lex_param_1 :named("node"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym</ />" :subid("cuid_344_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2870
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "$regex", $P102 
    .lex "$past", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P103, $P5003
.annotate 'line', 2871
    find_dynamic_lex $P5004, "$*W"
    unless_null $P5004, fallback5398
    nqp_get_sc_object $P5007, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["$W"]
    unless_null $P5005, fallback5399
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5005, $P5008
  fallback5399:
    unless_null $P5005, vivi_16525400
    die "Contextual $*W not found"
    box $P5009, "Contextual $*W not found"
    set $P5005, $P5009
  vivi_16525400:
    set $P5004, $P5005
  fallback5398:
    $P5010 = $P5004."pop_lexpad"()
    set $P101, $P5010
.annotate 'line', 2872
    set $P5011, $P101[0]
    unless_null $P5011, fallback5401
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5011, $P5012
  fallback5401:
    nqp_get_sc_object $P5016, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["Var"]
    unless_null $P5013, fallback5402
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5013, $P5017
  fallback5402:
    $P5018 = $P5013."new"("self" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5019 = $P5011."push"($P5018)
.annotate 'line', 2873
    set $P5020, $P101[0]
    unless_null $P5020, fallback5403
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5020, $P5021
  fallback5403:
    nqp_get_sc_object $P5025, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["Op"]
    unless_null $P5022, fallback5404
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5022, $P5026
  fallback5404:
.annotate 'line', 2875
    nqp_get_sc_object $P5030, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["Var"]
    unless_null $P5027, fallback5405
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5027, $P5031
  fallback5405:
    $P5032 = $P5027."new"("self" :named("name"), "local" :named("scope"), "var" :named("decl"))
.annotate 'line', 2876
    nqp_get_sc_object $P5036, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5035, $P5036, "QAST"
    get_who $P5034, $P5035
    set $P5033, $P5034["Var"]
    unless_null $P5033, fallback5406
    nqp_get_sc_object $P5037, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5033, $P5037
  fallback5406:
    $P5038 = $P5033."new"("self" :named("name"), "lexical" :named("scope"))
    $P5039 = $P5022."new"($P5032, $P5038, "bind" :named("op"))
    $P5040 = $P5020."push"($P5039)
.annotate 'line', 2877
    set $P5041, $P101[0]
    unless_null $P5041, fallback5407
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5041, $P5042
  fallback5407:
    nqp_get_sc_object $P5046, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5045, $P5046, "QAST"
    get_who $P5044, $P5045
    set $P5043, $P5044["Var"]
    unless_null $P5043, fallback5408
    nqp_get_sc_object $P5047, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5043, $P5047
  fallback5408:
    $P5048 = $P5043."new"(utf8:"$\x{a2}" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5049 = $P5041."push"($P5048)
.annotate 'line', 2878
    set $P5050, $P101[0]
    unless_null $P5050, fallback5409
    nqp_get_sc_object $P5051, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5050, $P5051
  fallback5409:
    nqp_get_sc_object $P5055, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5054, $P5055, "QAST"
    get_who $P5053, $P5054
    set $P5052, $P5053["Var"]
    unless_null $P5052, fallback5410
    nqp_get_sc_object $P5056, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5052, $P5056
  fallback5410:
    $P5057 = $P5052."new"("$/" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5058 = $P5050."push"($P5057)
.annotate 'line', 2879
    $P5059 = $P101."symbol"(utf8:"$\x{a2}", "lexical" :named("scope"))
.annotate 'line', 2880
    $P5060 = $P101."symbol"("$/", "lexical" :named("scope"))
.annotate 'line', 2882
    unless_null _lex_param_1, fallback5412
    nqp_get_sc_object $P5069, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5069
  fallback5412:
    set $P5068, _lex_param_1["p6regex"]
    unless_null $P5068, fallback5413
    nqp_get_sc_object $P5070, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5068, $P5070
  fallback5413:
    $P5071 = $P5068."ast"()
    nqp_get_sc_object $P5066, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5065, $P5066, "QRegex"
    nqp_get_package_through_who $P5064, $P5065, "P6Regex"
    nqp_get_package_through_who $P5063, $P5064, "Actions"
    get_who $P5062, $P5063
    set $P5061, $P5062["qbuildsub"]
    unless_null $P5061, fallback5411
    nqp_get_sc_object $P5067, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5061, $P5067
  fallback5411:
    $P5072 = $P5061($P5071, $P101)
    set $P102, $P5072
.annotate 'line', 2883
    nqp_get_sc_object $P5076, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5075, $P5076, "QAST"
    get_who $P5074, $P5075
    set $P5073, $P5074["Op"]
    unless_null $P5073, fallback5414
    nqp_get_sc_object $P5077, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5073, $P5077
  fallback5414:
.annotate 'line', 2885
    new $P5078, 'ResizablePMCArray'
    box $P5079, "NQPRegex"
    push $P5078, $P5079
    $P5080 = "&lexical_package_lookup"($P5078, _lex_param_1)
    $P5081 = $P5073."new"($P5080, $P102, "callmethod" :named("op"), "new" :named("name"))
    set $P103, $P5081
    set $P103["sink"], $P102
.annotate 'line', 2890
    $P5082 = _lex_param_1."!make"($P103)
    .return ($P5082) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<$>" :subid("cuid_345_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2893
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5415
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback5415:
    set $P5001, _lex_param_1["variable"]
    unless_null $P5001, fallback5416
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback5416:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<{ }>" :subid("cuid_346_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2894
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2895
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5417
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5005
  fallback5417:
.annotate 'line', 2896
    unless_null _lex_param_1, fallback5418
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5007
  fallback5418:
    set $P5006, _lex_param_1["block"]
    unless_null $P5006, fallback5419
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5006, $P5008
  fallback5419:
    $P5009 = $P5006."ast"()
    $P5010 = "&block_immediate"($P5009)
    $P5011 = $P5001."new"($P5010, "stringify" :named("op"), _lex_param_1 :named("node"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<esc>" :subid("cuid_347_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2899
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    $P5001 = _lex_param_1."!make"("\e")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<.>" :subid("cuid_348_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2903
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5420
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback5420:
    set $P5001, _lex_param_1["dotty"]
    unless_null $P5001, fallback5421
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback5421:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<return>" :subid("cuid_349_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2905
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2906
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5422
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5005
  fallback5422:
.annotate 'line', 2908
    nqp_get_sc_object $P5009, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Var"]
    unless_null $P5006, fallback5423
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5006, $P5010
  fallback5423:
    $P5011 = $P5006."new"("RETURN" :named("name"), "lexical" :named("scope"))
    $P5012 = $P5001."new"($P5011, "call" :named("op"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<make>" :subid("cuid_350_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2912
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2913
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5424
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5005
  fallback5424:
.annotate 'line', 2914
    nqp_get_sc_object $P5009, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Var"]
    unless_null $P5006, fallback5425
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5006, $P5010
  fallback5425:
    $P5011 = $P5006."new"("$/" :named("name"), "contextual" :named("scope"))
    $P5012 = $P5001."new"($P5011, "callmethod" :named("op"), "!make" :named("name"), _lex_param_1 :named("node"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<next>" :subid("cuid_351_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2921
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5426
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5005
  fallback5426:
    $P5006 = $P5001."new"("control" :named("op"), "next" :named("name"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<last>" :subid("cuid_352_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2922
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5427
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5005
  fallback5427:
    $P5006 = $P5001."new"("control" :named("op"), "last" :named("name"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<redo>" :subid("cuid_353_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2923
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5428
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5005
  fallback5428:
    $P5006 = $P5001."new"("control" :named("op"), "redo" :named("name"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<~~>" :subid("cuid_354_1349901750.327") :anon :lex :outer("cuid_355_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2925
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2926
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5429
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5005
  fallback5429:
    $P5006 = $P5001."new"("callmethod" :named("op"), "ACCEPTS" :named("name"), _lex_param_1 :named("node"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_366_1349901750.327") :anon :lex :outer("cuid_1_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3007
    .const 'Sub' $P5011 = 'cuid_356_1349901750.327' 
    capture_lex $P5011 
    .const 'Sub' $P5011 = 'cuid_357_1349901750.327' 
    capture_lex $P5011 
    .const 'Sub' $P5011 = 'cuid_358_1349901750.327' 
    capture_lex $P5011 
    .const 'Sub' $P5011 = 'cuid_359_1349901750.327' 
    capture_lex $P5011 
    .const 'Sub' $P5011 = 'cuid_360_1349901750.327' 
    capture_lex $P5011 
    .const 'Sub' $P5011 = 'cuid_361_1349901750.327' 
    capture_lex $P5011 
    .const 'Sub' $P5011 = 'cuid_362_1349901750.327' 
    capture_lex $P5011 
    .const 'Sub' $P5011 = 'cuid_363_1349901750.327' 
    capture_lex $P5011 
    .const 'Sub' $P5011 = 'cuid_364_1349901750.327' 
    capture_lex $P5011 
    .const 'Sub' $P5011 = 'cuid_365_1349901750.327' 
    capture_lex $P5011 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    .const 'Sub' $P5001 = 'cuid_356_1349901750.327' 
    capture_lex $P5001
    .const 'Sub' $P5002 = 'cuid_357_1349901750.327' 
    capture_lex $P5002
    .const 'Sub' $P5003 = 'cuid_358_1349901750.327' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_359_1349901750.327' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_360_1349901750.327' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_361_1349901750.327' 
    capture_lex $P5006
    .const 'Sub' $P5007 = 'cuid_362_1349901750.327' 
    capture_lex $P5007
    .const 'Sub' $P5008 = 'cuid_363_1349901750.327' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_364_1349901750.327' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_365_1349901750.327' 
    capture_lex $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<:my>" :subid("cuid_356_1349901750.327") :anon :lex :outer("cuid_366_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3009
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
.annotate 'line', 3010
    unless_null _lex_param_1, fallback5430
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5003
  fallback5430:
    set $P5002, _lex_param_1["statement"]
    unless_null $P5002, fallback5431
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5002, $P5004
  fallback5431:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 3011
    nqp_get_sc_object $P5009, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Regex"]
    unless_null $P5006, fallback5432
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5006, $P5010
  fallback5432:
    $P5011 = $P5006."new"($P101, "qastnode" :named("rxtype"), "declarative" :named("subtype"), _lex_param_1 :named("node"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<{ }>" :subid("cuid_357_1349901750.327") :anon :lex :outer("cuid_366_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3015
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3016
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5433
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5005
  fallback5433:
    unless_null _lex_param_1, fallback5434
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5007
  fallback5434:
    set $P5006, _lex_param_1["codeblock"]
    unless_null $P5006, fallback5435
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5006, $P5008
  fallback5435:
    $P5009 = $P5006."ast"()
    $P5010 = $P5001."new"($P5009, "qastnode" :named("rxtype"), _lex_param_1 :named("node"))
    $P5011 = _lex_param_1."!make"($P5010)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<nqpvar>" :subid("cuid_358_1349901750.327") :anon :lex :outer("cuid_366_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3020
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3021
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5436
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5005
  fallback5436:
    nqp_get_sc_object $P5009, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Node"]
    unless_null $P5006, fallback5437
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5006, $P5010
  fallback5437:
.annotate 'line', 3022
    nqp_get_sc_object $P5014, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback5438
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5011, $P5015
  fallback5438:
    $P5016 = $P5011."new"("!INTERPOLATE" :named("value"))
.annotate 'line', 3023
    unless_null _lex_param_1, fallback5439
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5018
  fallback5439:
    set $P5017, _lex_param_1["var"]
    unless_null $P5017, fallback5440
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5017, $P5019
  fallback5440:
    $P5020 = $P5017."ast"()
    $P5021 = $P5006."new"($P5016, $P5020)
    $P5022 = $P5001."new"($P5021, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    $P5023 = _lex_param_1."!make"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<{ }>" :subid("cuid_359_1349901750.327") :anon :lex :outer("cuid_366_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3027
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3028
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5441
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5005
  fallback5441:
    nqp_get_sc_object $P5009, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Node"]
    unless_null $P5006, fallback5442
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5006, $P5010
  fallback5442:
.annotate 'line', 3029
    nqp_get_sc_object $P5014, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback5443
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5011, $P5015
  fallback5443:
    $P5016 = $P5011."new"("!INTERPOLATE_REGEX" :named("value"))
.annotate 'line', 3030
    unless_null _lex_param_1, fallback5444
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5018
  fallback5444:
    set $P5017, _lex_param_1["codeblock"]
    unless_null $P5017, fallback5445
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5017, $P5019
  fallback5445:
    $P5020 = $P5017."ast"()
    $P5021 = $P5006."new"($P5016, $P5020)
    $P5022 = $P5001."new"($P5021, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    $P5023 = _lex_param_1."!make"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?{ }>" :subid("cuid_360_1349901750.327") :anon :lex :outer("cuid_366_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3034
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3035
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5446
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5005
  fallback5446:
    unless_null _lex_param_1, fallback5447
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5007
  fallback5447:
    set $P5006, _lex_param_1["codeblock"]
    unless_null $P5006, fallback5448
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5006, $P5008
  fallback5448:
    $P5009 = $P5006."ast"()
    unless_null _lex_param_1, fallback5449
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5011
  fallback5449:
    set $P5010, _lex_param_1["zw"]
    unless_null $P5010, fallback5450
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5010, $P5012
  fallback5450:
    set $S5001, $P5010
    iseq $I5001, $S5001, "!"
    $P5013 = $P5001."new"($P5009, "zerowidth" :named("subtype"), $I5001 :named("negate"), "qastnode" :named("rxtype"), _lex_param_1 :named("node"))
    $P5014 = _lex_param_1."!make"($P5013)
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<var>" :subid("cuid_361_1349901750.327") :anon :lex :outer("cuid_366_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3040
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3041
    nqp_get_sc_object $P5004, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5451
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5005
  fallback5451:
    nqp_get_sc_object $P5009, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Node"]
    unless_null $P5006, fallback5452
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5006, $P5010
  fallback5452:
.annotate 'line', 3042
    nqp_get_sc_object $P5014, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback5453
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5011, $P5015
  fallback5453:
    $P5016 = $P5011."new"("!INTERPOLATE_REGEX" :named("value"))
.annotate 'line', 3043
    unless_null _lex_param_1, fallback5454
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5018
  fallback5454:
    set $P5017, _lex_param_1["var"]
    unless_null $P5017, fallback5455
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5017, $P5019
  fallback5455:
    $P5020 = $P5017."ast"()
    $P5021 = $P5006."new"($P5016, $P5020)
    $P5022 = $P5001."new"($P5021, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    $P5023 = _lex_param_1."!make"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "codeblock" :subid("cuid_362_1349901750.327") :anon :lex :outer("cuid_366_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3047
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
.annotate 'line', 3048
    unless_null _lex_param_1, fallback5456
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5004
  fallback5456:
    set $P5003, _lex_param_1["block"]
    unless_null $P5003, fallback5457
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5003, $P5005
  fallback5457:
    $P5006 = $P5003."ast"()
    set $P101, $P5006
.annotate 'line', 3049
    $P5007 = $P101."blocktype"("immediate")
.annotate 'line', 3051
    nqp_get_sc_object $P5011, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5010, $P5011, "QAST"
    get_who $P5009, $P5010
    set $P5008, $P5009["Stmts"]
    unless_null $P5008, fallback5458
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5008, $P5012
  fallback5458:
.annotate 'line', 3052
    nqp_get_sc_object $P5016, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["Op"]
    unless_null $P5013, fallback5459
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5013, $P5017
  fallback5459:
.annotate 'line', 3054
    nqp_get_sc_object $P5021, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5020, $P5021, "QAST"
    get_who $P5019, $P5020
    set $P5018, $P5019["Var"]
    unless_null $P5018, fallback5460
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5018, $P5022
  fallback5460:
    $P5023 = $P5018."new"("$/" :named("name"), "contextual" :named("scope"))
.annotate 'line', 3055
    nqp_get_sc_object $P5027, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["Op"]
    unless_null $P5024, fallback5461
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5024, $P5028
  fallback5461:
.annotate 'line', 3056
    nqp_get_sc_object $P5032, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["Var"]
    unless_null $P5029, fallback5462
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5029, $P5033
  fallback5462:
    $P5034 = $P5029."new"(utf8:"$\x{a2}" :named("name"), "contextual" :named("scope"))
    $P5035 = $P5024."new"($P5034, "MATCH" :named("name"), "callmethod" :named("op"))
    $P5036 = $P5013."new"($P5023, $P5035, "bind" :named("op"))
    $P5037 = $P5008."new"($P5036, $P101)
    set $P102, $P5037
.annotate 'line', 3063
    $P5038 = _lex_param_1."!make"($P102)
    .return ($P5038) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<( )>" :subid("cuid_363_1349901750.327") :anon :lex :outer("cuid_366_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3067
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$subpast", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
.annotate 'line', 3068
    nqp_get_sc_object $P5006, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5005, $P5006, "QAST"
    get_who $P5004, $P5005
    set $P5003, $P5004["Node"]
    unless_null $P5003, fallback5463
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5003, $P5007
  fallback5463:
.annotate 'line', 3069
    unless_null _lex_param_1, fallback5465
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5016
  fallback5465:
    set $P5015, _lex_param_1["nibbler"]
    unless_null $P5015, fallback5466
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5015, $P5017
  fallback5466:
    $P5018 = $P5015."ast"()
    nqp_get_sc_object $P5013, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5012, $P5013, "QRegex"
    nqp_get_package_through_who $P5011, $P5012, "P6Regex"
    nqp_get_package_through_who $P5010, $P5011, "Actions"
    get_who $P5009, $P5010
    set $P5008, $P5009["qbuildsub"]
    unless_null $P5008, fallback5464
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5008, $P5014
  fallback5464:
    $P5019 = $P5008($P5018, 1 :named("anon"), 1 :named("addself"))
    $P5020 = $P5003."new"($P5019)
    set $P101, $P5020
.annotate 'line', 3070
    nqp_get_sc_object $P5024, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["Regex"]
    unless_null $P5021, fallback5467
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5021, $P5025
  fallback5467:
    unless_null _lex_param_1, fallback5468
    nqp_get_sc_object $P5027, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5027
  fallback5468:
    set $P5026, _lex_param_1["nibbler"]
    unless_null $P5026, fallback5469
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5026, $P5028
  fallback5469:
    $P5029 = $P5026."ast"()
    $P5030 = $P5021."new"($P101, $P5029, "subrule" :named("rxtype"), "capture" :named("subtype"), _lex_param_1 :named("node"))
    set $P102, $P5030
.annotate 'line', 3072
    $P5031 = _lex_param_1."!make"($P102)
    .return ($P5031) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<name>" :subid("cuid_364_1349901750.327") :anon :lex :outer("cuid_366_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3075
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5098 = 'cuid_479_1349901750.327' 
    capture_lex $P5098 
    .const 'Sub' $P5098 = 'cuid_480_1349901750.327' 
    capture_lex $P5098 
    .lex "$name", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
    unless_null _lex_param_1, fallback5470
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5004
  fallback5470:
    set $P5003, _lex_param_1["longname"]
    unless_null $P5003, fallback5471
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5003, $P5005
  fallback5471:
    set $S5001, $P5003
    box $P5006, $S5001
    set $P101, $P5006
    unless_null _lex_param_1, fallback5474
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5008
  fallback5474:
    set $P5007, _lex_param_1["assertion"]
    unless_null $P5007, fallback5475
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5007, $P5009
  fallback5475:
    unless $P5007 goto if1653_else5472 
.annotate 'line', 3078
.annotate 'line', 3079
    unless_null _lex_param_1, fallback5476
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5012
  fallback5476:
    set $P5011, _lex_param_1["assertion"]
    unless_null $P5011, fallback5477
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5011, $P5013
  fallback5477:
    set $P5010, $P5011[0]
    unless_null $P5010, fallback5478
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5010, $P5014
  fallback5478:
    $P5015 = $P5010."ast"()
    set $P102, $P5015
.annotate 'line', 3080
    nqp_decontainerize $P5016, _lex_param_0
    $P5017 = $P5016."subrule_alias"($P102, $P101)
    set $P5096, $P5017
    goto if1653_end5473
  if1653_else5472:
    set $S5002, $P101
    iseq $I5001, $S5002, "sym"
    unless $I5001 goto if1654_else5479 
    .const 'Sub' $P5018 = 'cuid_479_1349901750.327' 
    capture_lex $P5018
    $P5019 = $P5018()
    set $P5095, $P5019
    goto if1654_end5480
  if1654_else5479:
.annotate 'line', 3090
.annotate 'line', 3091
    nqp_get_sc_object $P5023, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Regex"]
    unless_null $P5020, fallback5497
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5020, $P5024
  fallback5497:
.annotate 'line', 3093
    nqp_get_sc_object $P5028, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["Node"]
    unless_null $P5025, fallback5498
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5025, $P5029
  fallback5498:
    nqp_get_sc_object $P5033, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["SVal"]
    unless_null $P5030, fallback5499
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5030, $P5034
  fallback5499:
    $P5035 = $P5030."new"($P101 :named("value"))
    $P5036 = $P5025."new"($P5035)
    $P5037 = $P5020."new"($P5036, "subrule" :named("rxtype"), "capture" :named("subtype"), _lex_param_1 :named("node"), $P101 :named("name"))
    set $P102, $P5037
    unless_null _lex_param_1, fallback5502
    nqp_get_sc_object $P5039, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5039
  fallback5502:
    set $P5038, _lex_param_1["arglist"]
    unless_null $P5038, fallback5503
    nqp_get_sc_object $P5040, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5038, $P5040
  fallback5503:
    unless $P5038 goto if1659_else5500 
.annotate 'line', 3094
.annotate 'line', 3095
    unless_null _lex_param_1, fallback5504
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5046
  fallback5504:
    set $P5045, _lex_param_1["arglist"]
    unless_null $P5045, fallback5505
    nqp_get_sc_object $P5047, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5045, $P5047
  fallback5505:
    set $P5044, $P5045[0]
    unless_null $P5044, fallback5506
    nqp_get_sc_object $P5048, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5044, $P5048
  fallback5506:
    $P5049 = $P5044."ast"()
    $P5050 = $P5049."list"()
    set $P5041, $P5050
    iter $P5043, $P5050
  for_next5508:
    unless $P5043, for_done5510
    shift $P5052, $P5043
  for_redo5509:
    .const 'Sub' $P5051 = 'cuid_480_1349901750.327' 
    capture_lex $P5051
    $P5041 = $P5051($P5052)
    goto for_next5508
  for_done5510:
    set $P5094, $P5041
    goto if1659_end5501
  if1659_else5500:
    unless_null _lex_param_1, fallback5513
    nqp_get_sc_object $P5054, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5054
  fallback5513:
    set $P5053, _lex_param_1["nibbler"]
    unless_null $P5053, fallback5514
    nqp_get_sc_object $P5055, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5053, $P5055
  fallback5514:
    set $P5093, $P5053
    unless $P5053 goto if1660_end5512 
.annotate 'line', 3097
    set $S5003, $P101
    iseq $I5002, $S5003, "after"
    unless $I5002 goto if1661_else5515 
.annotate 'line', 3099
    set $P5056, $P102[0]
    unless_null $P5056, fallback5517
    nqp_get_sc_object $P5057, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5056, $P5057
  fallback5517:
    nqp_decontainerize $P5065, _lex_param_0
    unless_null _lex_param_1, fallback5519
    nqp_get_sc_object $P5068, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5068
  fallback5519:
    set $P5067, _lex_param_1["nibbler"]
    unless_null $P5067, fallback5520
    nqp_get_sc_object $P5069, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5067, $P5069
  fallback5520:
    set $P5066, $P5067[0]
    unless_null $P5066, fallback5521
    nqp_get_sc_object $P5070, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5066, $P5070
  fallback5521:
    $P5071 = $P5066."ast"()
    $P5072 = $P5065."flip_ast"($P5071)
    nqp_get_sc_object $P5063, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5062, $P5063, "QRegex"
    nqp_get_package_through_who $P5061, $P5062, "P6Regex"
    nqp_get_package_through_who $P5060, $P5061, "Actions"
    get_who $P5059, $P5060
    set $P5058, $P5059["qbuildsub"]
    unless_null $P5058, fallback5518
    nqp_get_sc_object $P5064, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5058, $P5064
  fallback5518:
    $P5073 = $P5058($P5072, 1 :named("anon"), 1 :named("addself"))
    $P5074 = $P5056."push"($P5073)
    set $P5092, $P5074
    goto if1661_end5516
  if1661_else5515:
.annotate 'line', 3100
    set $P5075, $P102[0]
    unless_null $P5075, fallback5522
    nqp_get_sc_object $P5076, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5075, $P5076
  fallback5522:
    unless_null _lex_param_1, fallback5524
    nqp_get_sc_object $P5086, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5086
  fallback5524:
    set $P5085, _lex_param_1["nibbler"]
    unless_null $P5085, fallback5525
    nqp_get_sc_object $P5087, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5085, $P5087
  fallback5525:
    set $P5084, $P5085[0]
    unless_null $P5084, fallback5526
    nqp_get_sc_object $P5088, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5084, $P5088
  fallback5526:
    $P5089 = $P5084."ast"()
    nqp_get_sc_object $P5082, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5081, $P5082, "QRegex"
    nqp_get_package_through_who $P5080, $P5081, "P6Regex"
    nqp_get_package_through_who $P5079, $P5080, "Actions"
    get_who $P5078, $P5079
    set $P5077, $P5078["qbuildsub"]
    unless_null $P5077, fallback5523
    nqp_get_sc_object $P5083, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5077, $P5083
  fallback5523:
    $P5090 = $P5077($P5089, 1 :named("anon"), 1 :named("addself"))
    $P5091 = $P5075."push"($P5090)
    set $P5092, $P5091
  if1661_end5516:
    set $P5093, $P5092
  if1660_end5512:
    set $P5094, $P5093
  if1659_end5501:
    set $P5095, $P5094
  if1654_end5480:
    set $P5096, $P5095
  if1653_end5473:
.annotate 'line', 3103
    $P5097 = _lex_param_1."!make"($P102)
    .return ($P5097) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_479_1349901750.327") :anon :lex :outer("cuid_364_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3082
    .lex "$loc", $P101 
    .lex "$rxname", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P102, $P5002
    find_dynamic_lex $P5004, "%*RX"
    unless_null $P5004, fallback5481
    nqp_get_sc_object $P5007, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["%RX"]
    unless_null $P5005, fallback5482
    nqp_get_sc_object $P5009, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5008, $P5009
    new $P5010, 'Hash'
    set $P5008["%RX"], $P5010
    set $P5005, $P5010
  fallback5482:
    unless_null $P5005, vivi_16555483
    die "Contextual %*RX not found"
    box $P5011, "Contextual %*RX not found"
    set $P5005, $P5011
  vivi_16555483:
    set $P5004, $P5005
  fallback5481:
    set $P5003, $P5004["name"]
    unless_null $P5003, fallback5484
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5003, $P5012
  fallback5484:
    set $S5001, $P5003
    index $I5001, $S5001, ":sym<", 0
    box $P5013, $I5001
    set $P101, $P5013
    set $N5001, $P101
    set $N5002, 0
    islt $I5002, $N5001, $N5002
    box $P5026, $I5002
    set $P5025, $P5026
    unless $I5002 goto if1656_end5486 
    find_dynamic_lex $P5015, "%*RX"
    unless_null $P5015, fallback5487
    nqp_get_sc_object $P5018, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["%RX"]
    unless_null $P5016, fallback5488
    nqp_get_sc_object $P5020, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5019, $P5020
    new $P5021, 'Hash'
    set $P5019["%RX"], $P5021
    set $P5016, $P5021
  fallback5488:
    unless_null $P5016, vivi_16575489
    die "Contextual %*RX not found"
    box $P5022, "Contextual %*RX not found"
    set $P5016, $P5022
  vivi_16575489:
    set $P5015, $P5016
  fallback5487:
    set $P5014, $P5015["name"]
    unless_null $P5014, fallback5490
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5014, $P5023
  fallback5490:
    set $S5002, $P5014
    index $I5003, $S5002, utf8:":sym\x{ab}", 0
    box $P5024, $I5003
    set $P101, $P5024
    set $P5025, $P101
  if1656_end5486:
    find_dynamic_lex $P5028, "%*RX"
    unless_null $P5028, fallback5491
    nqp_get_sc_object $P5031, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5030, $P5031
    set $P5029, $P5030["%RX"]
    unless_null $P5029, fallback5492
    nqp_get_sc_object $P5033, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    get_who $P5032, $P5033
    new $P5034, 'Hash'
    set $P5032["%RX"], $P5034
    set $P5029, $P5034
  fallback5492:
    unless_null $P5029, vivi_16585493
    die "Contextual %*RX not found"
    box $P5035, "Contextual %*RX not found"
    set $P5029, $P5035
  vivi_16585493:
    set $P5028, $P5029
  fallback5491:
    set $P5027, $P5028["name"]
    unless_null $P5027, fallback5494
    nqp_get_sc_object $P5036, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5027, $P5036
  fallback5494:
    set $S5005, $P5027
    set $N5004, $P101
    set $N5005, 5
    add $N5003, $N5004, $N5005
    set $I5004, $N5003
    substr $S5004, $S5005, $I5004
    chopn $S5003, $S5004, 1
    box $P5037, $S5003
    set $P102, $P5037
.annotate 'line', 3087
    nqp_get_sc_object $P5041, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5040, $P5041, "QAST"
    get_who $P5039, $P5040
    set $P5038, $P5039["Regex"]
    unless_null $P5038, fallback5495
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5038, $P5042
  fallback5495:
    find_lex $P5043, "$/"
.annotate 'line', 3088
    nqp_get_sc_object $P5047, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    nqp_get_package_through_who $P5046, $P5047, "QAST"
    get_who $P5045, $P5046
    set $P5044, $P5045["Regex"]
    unless_null $P5044, fallback5496
    nqp_get_sc_object $P5048, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5044, $P5048
  fallback5496:
    find_lex $P5049, "$/"
    $P5050 = $P5044."new"($P102, "literal" :named("rxtype"), $P5049 :named("node"))
    $P5051 = $P5038."new"($P5050, "sym" :named("name"), "subcapture" :named("rxtype"), $P5043 :named("node"))
    store_lex "$qast", $P5051
    .return ($P5051) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_480_1349901750.327") :anon :lex :outer("cuid_364_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3095
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$qast"
    set $P5001, $P5002[0]
    unless_null $P5001, fallback5507
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback5507:
    $P5004 = $P5001."push"(_lex_param_0)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "arg" :subid("cuid_365_1349901750.327") :anon :lex :outer("cuid_366_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3106
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3107
    unless_null _lex_param_1, fallback5527
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set _lex_param_1, $P5002
  fallback5527:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5528
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    set $P5001, $P5003
  fallback5528:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_367_1349901750.327") :anon :lex :outer("cuid_1_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3112
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999", 7
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_482_1349901750.327") :load :init
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .const 'Sub' $P5001 = 'cuid_481_1349901750.327' 
    capture_lex $P5001 
    .local pmc cur_sc 
    nqp_dynop_setup 
    nqp_bigint_setup 
    getinterp $P5001
    get_class $P5002, "LexPad"
    get_class $P5003, "NQPLexPad"
    $P5004 = $P5001."hll_map"($P5002, $P5003)
    load_bytecode "ModuleLoader.pbc"
    .const 'Sub' $P5001 = "cuid_1_1349901750.327" 
    get_hll_global $P5002, "ModuleLoader"
    $P5003 = $P5002."load_setting"("NQPCORE")
    $P5004 = $P5001."set_outer_ctx"($P5003)
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5002 = $P5001."load_module"("QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5002 = $P5001."load_module"("NQPP6QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5002 = $P5001."load_module"("NQPP6QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5002 = $P5001."load_module"("QAST")
    nqp_create_sc $P5001, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343"
    set cur_sc, $P5001
    $P5002 = cur_sc."set_description"("src\\stage2\\gen\\NQP.pm")
    new $P5003, 'ResizableStringArray'
    null $S5001
    push $P5003, $S5001
    push $P5003, "P6opaque"
    push $P5003, "QAST"
    push $P5003, "QRegex"
    push $P5003, "NQPCursorRole"
    push $P5003, "BDAF195F9A328EEA7908B67B6DA35935692329D3-1349901726.644"
    push $P5003, "src\\stage2\\QRegex.nqp"
    push $P5003, "NQPMatch"
    push $P5003, "NQPCursor"
    push $P5003, "NQPRegexMethod"
    push $P5003, "NQPRegex"
    push $P5003, "HLL"
    push $P5003, "PIRT"
    push $P5003, "NQP"
    push $P5003, "DEFAULT"
    push $P5003, "CREATE"
    push $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1349901723.999"
    push $P5003, "src\\stage2\\NQPCORE.setting"
    push $P5003, "bless"
    push $P5003, "BUILDALL"
    push $P5003, "new"
    push $P5003, "Str"
    push $P5003, "Numeric"
    push $P5003, "Int"
    push $P5003, "at_pos"
    push $P5003, "at_key"
    push $P5003, "defined"
    push $P5003, "ACCEPTS"
    push $P5003, "isa"
    push $P5003, "__dump"
    push $P5003, "BUILD"
    push $P5003, "slot_for_object"
    push $P5003, "B199118D856E2F2067FCB01A3B528D24DF31B6BC-1349901730.021"
    push $P5003, "src\\stage2\\gen\\NQPHLL.pm"
    push $P5003, "add_object"
    push $P5003, "add_root_code_ref"
    push $P5003, "update_root_code_ref"
    push $P5003, "is_precompilation_mode"
    push $P5003, "add_load_dependency_task"
    push $P5003, "add_fixup_task"
    push $P5003, "sc"
    push $P5003, "handle"
    push $P5003, "code_ref_blocks"
    push $P5003, "load_dependency_tasks"
    push $P5003, "fixup_tasks"
    push $P5003, "push_lexpad"
    push $P5003, "pop_lexpad"
    push $P5003, "cur_lexpad"
    push $P5003, "get_legacy_block_list"
    push $P5003, "load_setting"
    push $P5003, "load_module"
    push $P5003, "import"
    push $P5003, "install_package_symbol"
    push $P5003, "install_lexical_symbol"
    push $P5003, "install_package_routine"
    push $P5003, "create_code"
    push $P5003, "pkg_create_mo"
    push $P5003, "pkg_add_attribute"
    push $P5003, "pkg_add_method"
    push $P5003, "set_routine_signature"
    push $P5003, "pkg_set_body_block"
    push $P5003, "pkg_add_parent_or_role"
    push $P5003, "pkg_add_parrot_vtable_handler_mapping"
    push $P5003, "pkg_compose"
    push $P5003, "run_begin_block"
    push $P5003, "libs"
    push $P5003, "add_initializations"
    push $P5003, "is_lexical"
    push $P5003, "is_package"
    push $P5003, "is_scope"
    push $P5003, "known_sym"
    push $P5003, "find_sym"
    push $P5003, "$!sc"
    push $P5003, "$!handle"
    push $P5003, "$!precomp_mode"
    push $P5003, "$!num_code_refs"
    push $P5003, "$!code_ref_blocks"
    push $P5003, "@!load_dependency_tasks"
    push $P5003, "@!fixup_tasks"
    push $P5003, "%!addr_to_slot"
    push $P5003, "@!BLOCKS"
    push $P5003, "%!code_objects_to_fix_up"
    push $P5003, "%!code_object_fixup_list"
    push $P5003, "%!code_stub_sc_idx"
    push $P5003, "MATCH"
    push $P5003, "Bool"
    push $P5003, "parse"
    push $P5003, "!INTERPOLATE"
    push $P5003, "!INTERPOLATE_REGEX"
    push $P5003, "target"
    push $P5003, "from"
    push $P5003, "pos"
    push $P5003, "CAPHASH"
    push $P5003, "!cursor_init"
    push $P5003, "!cursor_start"
    push $P5003, "!cursor_start_subcapture"
    push $P5003, "!cursor_capture"
    push $P5003, "!cursor_push_cstack"
    push $P5003, "!cursor_pass"
    push $P5003, "!cursor_fail"
    push $P5003, "!cursor_next"
    push $P5003, "!cursor_more"
    push $P5003, "!reduce"
    push $P5003, "!reduce_with_match"
    push $P5003, "!protoregex"
    push $P5003, "!protoregex_nfa"
    push $P5003, "!protoregex_table"
    push $P5003, "!alt"
    push $P5003, "!alt_nfa"
    push $P5003, "!BACKREF"
    push $P5003, "!LITERAL"
    push $P5003, "at"
    push $P5003, "before"
    push $P5003, "after"
    push $P5003, "ws"
    push $P5003, "ww"
    push $P5003, "wb"
    push $P5003, "ident"
    push $P5003, "alpha"
    push $P5003, "alnum"
    push $P5003, "upper"
    push $P5003, "lower"
    push $P5003, "digit"
    push $P5003, "xdigit"
    push $P5003, "space"
    push $P5003, "blank"
    push $P5003, "cntrl"
    push $P5003, "punct"
    push $P5003, "FAILGOAL"
    push $P5003, "termish"
    push $P5003, "term"
    push $P5003, "infix"
    push $P5003, "prefix"
    push $P5003, "postfix"
    push $P5003, "circumfix"
    push $P5003, "postcircumfix"
    push $P5003, "term:sym<circumfix>"
    push $P5003, "infixish"
    push $P5003, "prefixish"
    push $P5003, "postfixish"
    push $P5003, "nullterm"
    push $P5003, "nullterm_alt"
    push $P5003, "nulltermish"
    push $P5003, "quote_delimited"
    push $P5003, "quote_atom"
    push $P5003, "decint"
    push $P5003, "decints"
    push $P5003, "hexint"
    push $P5003, "hexints"
    push $P5003, "octint"
    push $P5003, "octints"
    push $P5003, "binint"
    push $P5003, "binints"
    push $P5003, "integer"
    push $P5003, "dec_number"
    push $P5003, "escale"
    push $P5003, "quote_escape"
    push $P5003, "quote_escape:sym<backslash>"
    push $P5003, "quote_escape:sym<stopper>"
    push $P5003, "quote_escape:sym<bs>"
    push $P5003, "quote_escape:sym<nl>"
    push $P5003, "quote_escape:sym<cr>"
    push $P5003, "quote_escape:sym<tab>"
    push $P5003, "quote_escape:sym<ff>"
    push $P5003, "quote_escape:sym<esc>"
    push $P5003, "quote_escape:sym<hex>"
    push $P5003, "quote_escape:sym<oct>"
    push $P5003, "quote_escape:sym<chr>"
    push $P5003, "quote_escape:sym<0>"
    push $P5003, "quote_escape:sym<misc>"
    push $P5003, "charname"
    push $P5003, "charnames"
    push $P5003, "charspec"
    push $P5003, "O"
    push $P5003, "panic"
    push $P5003, "peek_delimiters"
    push $P5003, "quote_EXPR"
    push $P5003, "quotemod_check"
    push $P5003, "starter"
    push $P5003, "stopper"
    push $P5003, "split_words"
    push $P5003, "EXPR"
    push $P5003, "EXPR_reduce"
    push $P5003, "ternary"
    push $P5003, "MARKER"
    push $P5003, "MARKED"
    push $P5003, "LANG"
    push $P5003, "TOP"
    push $P5003, "identifier"
    push $P5003, "name"
    push $P5003, "deflongname"
    push $P5003, "ENDSTMT"
    push $P5003, "unv"
    push $P5003, "pod_comment"
    push $P5003, "comp_unit"
    push $P5003, "statementlist"
    push $P5003, "statement"
    push $P5003, "eat_terminator"
    push $P5003, "xblock"
    push $P5003, "pblock"
    push $P5003, "lambda"
    push $P5003, "block"
    push $P5003, "blockoid"
    push $P5003, "newpad"
    push $P5003, "outerctx"
    push $P5003, "finishpad"
    push $P5003, "you_are_here"
    push $P5003, "terminator"
    push $P5003, "terminator:sym<;>"
    push $P5003, "terminator:sym<}>"
    push $P5003, "statement_control"
    push $P5003, "statement_control:sym<use>"
    push $P5003, "statement_control:sym<if>"
    push $P5003, "statement_control:sym<unless>"
    push $P5003, "statement_control:sym<while>"
    push $P5003, "statement_control:sym<repeat>"
    push $P5003, "statement_control:sym<for>"
    push $P5003, "statement_control:sym<CATCH>"
    push $P5003, "statement_control:sym<CONTROL>"
    push $P5003, "statement_prefix"
    push $P5003, "statement_prefix:sym<BEGIN>"
    push $P5003, "statement_prefix:sym<INIT>"
    push $P5003, "statement_prefix:sym<try>"
    push $P5003, "blorst"
    push $P5003, "statement_mod_cond"
    push $P5003, "statement_mod_cond:sym<if>"
    push $P5003, "statement_mod_cond:sym<unless>"
    push $P5003, "statement_mod_loop"
    push $P5003, "statement_mod_loop:sym<while>"
    push $P5003, "statement_mod_loop:sym<until>"
    push $P5003, "statement_mod_loop:sym<for>"
    push $P5003, "term:sym<fatarrow>"
    push $P5003, "term:sym<colonpair>"
    push $P5003, "term:sym<variable>"
    push $P5003, "term:sym<package_declarator>"
    push $P5003, "term:sym<scope_declarator>"
    push $P5003, "term:sym<routine_declarator>"
    push $P5003, "term:sym<multi_declarator>"
    push $P5003, "term:sym<regex_declarator>"
    push $P5003, "term:sym<statement_prefix>"
    push $P5003, "term:sym<lambda>"
    push $P5003, "fatarrow"
    push $P5003, "colonpair"
    push $P5003, "variable"
    push $P5003, "sigil"
    push $P5003, "twigil"
    push $P5003, "package_declarator"
    push $P5003, "package_declarator:sym<module>"
    push $P5003, "package_declarator:sym<knowhow>"
    push $P5003, "package_declarator:sym<class>"
    push $P5003, "package_declarator:sym<grammar>"
    push $P5003, "package_declarator:sym<role>"
    push $P5003, "package_declarator:sym<native>"
    push $P5003, "package_declarator:sym<stub>"
    push $P5003, "package_def"
    push $P5003, "scope_declarator"
    push $P5003, "scope_declarator:sym<my>"
    push $P5003, "scope_declarator:sym<our>"
    push $P5003, "scope_declarator:sym<has>"
    push $P5003, "scoped"
    push $P5003, "typename"
    push $P5003, "declarator"
    push $P5003, "variable_declarator"
    push $P5003, "routine_declarator"
    push $P5003, "routine_declarator:sym<sub>"
    push $P5003, "routine_declarator:sym<method>"
    push $P5003, "routine_def"
    push $P5003, "method_def"
    push $P5003, "onlystar"
    push $P5003, "multi_declarator"
    push $P5003, "multi_declarator:sym<multi>"
    push $P5003, "multi_declarator:sym<proto>"
    push $P5003, "multi_declarator:sym<null>"
    push $P5003, "signature"
    push $P5003, "parameter"
    push $P5003, "param_var"
    push $P5003, "named_param"
    push $P5003, "default_value"
    push $P5003, "trait"
    push $P5003, "trait_mod"
    push $P5003, "trait_mod:sym<is>"
    push $P5003, "regex_declarator"
    push $P5003, "dotty"
    push $P5003, "term:sym<self>"
    push $P5003, "term:sym<identifier>"
    push $P5003, "term:sym<name>"
    push $P5003, "term:sym<pir::op>"
    push $P5003, "term:sym<pir::const>"
    push $P5003, "term:sym<nqp::op>"
    push $P5003, "term:sym<onlystar>"
    push $P5003, "args"
    push $P5003, "arglist"
    push $P5003, "term:sym<value>"
    push $P5003, "value"
    push $P5003, "number"
    push $P5003, "quote"
    push $P5003, "quote:sym<apos>"
    push $P5003, "quote:sym<dblq>"
    push $P5003, "quote:sym<q>"
    push $P5003, "quote:sym<qq>"
    push $P5003, "quote:sym<Q>"
    push $P5003, "quote:sym<Q:PIR>"
    push $P5003, "quote:sym</ />"
    push $P5003, "quote_escape:sym<$>"
    push $P5003, "quote_escape:sym<{ }>"
    push $P5003, "circumfix:sym<( )>"
    push $P5003, "circumfix:sym<[ ]>"
    push $P5003, "circumfix:sym<ang>"
    push $P5003, utf8:"circumfix:sym<\x{ab} \x{bb}>"
    push $P5003, "circumfix:sym<{ }>"
    push $P5003, "circumfix:sym<sigil>"
    push $P5003, "semilist"
    push $P5003, "infixstopper"
    push $P5003, "postcircumfix:sym<[ ]>"
    push $P5003, "postcircumfix:sym<{ }>"
    push $P5003, "postcircumfix:sym<ang>"
    push $P5003, "postcircumfix:sym<( )>"
    push $P5003, "postfix:sym<.>"
    push $P5003, "prefix:sym<++>"
    push $P5003, "prefix:sym<-->"
    push $P5003, "postfix:sym<++>"
    push $P5003, "postfix:sym<-->"
    push $P5003, "infix:sym<**>"
    push $P5003, "prefix:sym<+>"
    push $P5003, "prefix:sym<~>"
    push $P5003, "prefix:sym<->"
    push $P5003, "prefix:sym<?>"
    push $P5003, "prefix:sym<!>"
    push $P5003, "prefix:sym<|>"
    push $P5003, "infix:sym<*>"
    push $P5003, "infix:sym</>"
    push $P5003, "infix:sym<%>"
    push $P5003, "infix:sym<+&>"
    push $P5003, "infix:sym<+>"
    push $P5003, "infix:sym<->"
    push $P5003, "infix:sym<+|>"
    push $P5003, "infix:sym<+^>"
    push $P5003, "infix:sym<~>"
    push $P5003, "infix:sym<==>"
    push $P5003, "infix:sym<!=>"
    push $P5003, "infix:sym<<=>"
    push $P5003, "infix:sym<>=>"
    push $P5003, "infix:sym<<>"
    push $P5003, "infix:sym<>>"
    push $P5003, "infix:sym<eq>"
    push $P5003, "infix:sym<ne>"
    push $P5003, "infix:sym<le>"
    push $P5003, "infix:sym<ge>"
    push $P5003, "infix:sym<lt>"
    push $P5003, "infix:sym<gt>"
    push $P5003, "infix:sym<=:=>"
    push $P5003, "infix:sym<~~>"
    push $P5003, "infix:sym<&&>"
    push $P5003, "infix:sym<||>"
    push $P5003, "infix:sym<//>"
    push $P5003, "infix:sym<?? !!>"
    push $P5003, "infix:sym<=>"
    push $P5003, "infix:sym<:=>"
    push $P5003, "infix:sym<::=>"
    push $P5003, "infix:sym<,>"
    push $P5003, "prefix:sym<return>"
    push $P5003, "prefix:sym<make>"
    push $P5003, "term:sym<last>"
    push $P5003, "term:sym<next>"
    push $P5003, "term:sym<redo>"
    push $P5003, "smartmatch"
    push $P5003, "$!orig"
    push $P5003, "$!target"
    push $P5003, "$!from"
    push $P5003, "$!pos"
    push $P5003, "$!match"
    push $P5003, "$!name"
    push $P5003, "$!bstack"
    push $P5003, "$!cstack"
    push $P5003, "$!regexsub"
    push $P5003, "$!restart"
    push $P5003, "57EE68019641AF08F37A546E9D6EFA3CC1C0694E-1349901746.354"
    push $P5003, "src\\stage2\\gen\\NQPP6QRegex.pm"
    push $P5003, "obs"
    push $P5003, "normspace"
    push $P5003, "arg"
    push $P5003, "nibbler"
    push $P5003, "termaltseq"
    push $P5003, "termconjseq"
    push $P5003, "termalt"
    push $P5003, "termconj"
    push $P5003, "quantified_atom"
    push $P5003, "separator"
    push $P5003, "atom"
    push $P5003, "quantifier"
    push $P5003, "quantifier:sym<*>"
    push $P5003, "quantifier:sym<+>"
    push $P5003, "quantifier:sym<?>"
    push $P5003, "quantifier:sym<{N,M}>"
    push $P5003, "quantifier:sym<**>"
    push $P5003, "backmod"
    push $P5003, "metachar"
    push $P5003, "metachar:sym<ws>"
    push $P5003, "metachar:sym<[ ]>"
    push $P5003, "metachar:sym<( )>"
    push $P5003, "metachar:sym<'>"
    push $P5003, "metachar:sym<\">"
    push $P5003, "metachar:sym<.>"
    push $P5003, "metachar:sym<^>"
    push $P5003, "metachar:sym<^^>"
    push $P5003, "metachar:sym<$>"
    push $P5003, "metachar:sym<$$>"
    push $P5003, "metachar:sym<:::>"
    push $P5003, "metachar:sym<::>"
    push $P5003, "metachar:sym<lwb>"
    push $P5003, "metachar:sym<rwb>"
    push $P5003, "metachar:sym<from>"
    push $P5003, "metachar:sym<to>"
    push $P5003, "metachar:sym<bs>"
    push $P5003, "metachar:sym<mod>"
    push $P5003, "metachar:sym<quantifier>"
    push $P5003, "metachar:sym<~>"
    push $P5003, "metachar:sym<{*}>"
    push $P5003, "metachar:sym<assert>"
    push $P5003, "metachar:sym<var>"
    push $P5003, "backslash"
    push $P5003, "backslash:sym<s>"
    push $P5003, "backslash:sym<b>"
    push $P5003, "backslash:sym<e>"
    push $P5003, "backslash:sym<f>"
    push $P5003, "backslash:sym<h>"
    push $P5003, "backslash:sym<r>"
    push $P5003, "backslash:sym<t>"
    push $P5003, "backslash:sym<v>"
    push $P5003, "backslash:sym<o>"
    push $P5003, "backslash:sym<x>"
    push $P5003, "backslash:sym<c>"
    push $P5003, "backslash:sym<A>"
    push $P5003, "backslash:sym<z>"
    push $P5003, "backslash:sym<Z>"
    push $P5003, "backslash:sym<Q>"
    push $P5003, "backslash:sym<unrec>"
    push $P5003, "backslash:sym<misc>"
    push $P5003, "assertion"
    push $P5003, "assertion:sym<?>"
    push $P5003, "assertion:sym<!>"
    push $P5003, "assertion:sym<|>"
    push $P5003, "assertion:sym<method>"
    push $P5003, "assertion:sym<name>"
    push $P5003, "assertion:sym<[>"
    push $P5003, "cclass_elem"
    push $P5003, "mod_internal"
    push $P5003, "mod_ident"
    push $P5003, "mod_ident:sym<ignorecase>"
    push $P5003, "mod_ident:sym<ratchet>"
    push $P5003, "mod_ident:sym<sigspace>"
    push $P5003, "mod_ident:sym<dba>"
    push $P5003, "metachar:sym<:my>"
    push $P5003, "metachar:sym<{ }>"
    push $P5003, "metachar:sym<nqpvar>"
    push $P5003, "assertion:sym<{ }>"
    push $P5003, "assertion:sym<?{ }>"
    push $P5003, "assertion:sym<var>"
    push $P5003, "codeblock"
    push $P5003, "ints_to_string"
    push $P5003, "CTXSAVE"
    push $P5003, "SET_BLOCK_OUTER_CTX"
    push $P5003, "subrule_alias"
    push $P5003, "flip_ast"
    push $P5003, "language"
    push $P5003, "compiler"
    push $P5003, "config"
    push $P5003, "autoprint"
    push $P5003, "interactive"
    push $P5003, "eval"
    push $P5003, "ctxsave"
    push $P5003, "stages"
    push $P5003, "parsegrammar"
    push $P5003, "parseactions"
    push $P5003, "interactive_banner"
    push $P5003, "interactive_prompt"
    push $P5003, "compiler_progname"
    push $P5003, "commandline_options"
    push $P5003, "command_line"
    push $P5003, "command_eval"
    push $P5003, "process_args"
    push $P5003, "evalfiles"
    push $P5003, "compile"
    push $P5003, "start"
    push $P5003, "past"
    push $P5003, "post"
    push $P5003, "pirbegin"
    push $P5003, "pir"
    push $P5003, "evalpmc"
    push $P5003, "dumper"
    push $P5003, "usage"
    push $P5003, "version"
    push $P5003, "show-config"
    push $P5003, "verbose-config"
    push $P5003, "vmstat"
    push $P5003, "nqpevent"
    push $P5003, "removestage"
    push $P5003, "addstage"
    push $P5003, "parse_name"
    push $P5003, "lineof"
    push $P5003, "user-progname"
    push $P5003, "cli-options"
    push $P5003, "cli-arguments"
    push $P5003, "@!stages"
    push $P5003, "$!parsegrammar"
    push $P5003, "$!parseactions"
    push $P5003, "@!cmdoptions"
    push $P5003, "$!usage"
    push $P5003, "$!compiler_progname"
    push $P5003, "$!language"
    push $P5003, "%!config"
    push $P5003, "$!user_progname"
    push $P5003, "@!cli-arguments"
    push $P5003, "%!cli-options"
    push $P5003, "__6MODEL_CORE__"
    push $P5003, "GLOBALish"
    push $P5003, "EXPORT"
    push $P5003, "569A1B419F724EEF275BC7729D702142D988A435-1349901720.709"
    push $P5003, "src\\stage2\\gen\\nqp-mo.pm"
    push $P5003, "NQP::World"
    push $P5003, "NQP::Grammar"
    push $P5003, "orig"
    push $P5003, "match"
    push $P5003, "bstack"
    push $P5003, "cstack"
    push $P5003, "regexsub"
    push $P5003, "restart"
    push $P5003, "NQP::Regex"
    push $P5003, "NQP::Actions"
    push $P5003, "NQP::RegexActions"
    push $P5003, "NQP::Compiler"
    push $P5003, "CompileTimeValue"
    push $P5003, "5999FA70DED24A5080F4680C3CF5A9B13CAD7450-1349901725.026"
    push $P5003, "src\\stage2\\QASTNode.nqp"
    push $P5003, "SpecialArg"
    push $P5003, "Node"
    push $P5003, "Regex"
    push $P5003, "IVal"
    push $P5003, "NVal"
    push $P5003, "SVal"
    push $P5003, "BVal"
    push $P5003, "WVal"
    push $P5003, "Want"
    push $P5003, "Var"
    push $P5003, "VarWithFallback"
    push $P5003, "Op"
    push $P5003, "VM"
    push $P5003, "Stmts"
    push $P5003, "Stmt"
    push $P5003, "Block"
    push $P5003, "BlockMemo"
    push $P5003, "Unquote"
    push $P5003, "CompUnit"
    push $P5003, "InlinePlaceholder"
    push $P5003, "Operations"
    push $P5003, "DC3516E3547FFAE754E522DE3431F0A50B4E7979-1349901734.745"
    push $P5003, "src\\stage2\\QAST.nqp"
    push $P5003, "Compiler"
    push $P5003, "NFA"
    push $P5003, "P6Regex"
    push $P5003, "Grammar"
    push $P5003, "Actions"
    push $P5003, "CommandLine"
    push $P5003, "World"
    push $P5003, "CallResult"
    push $P5003, "Sub"
    push $P5003, "Ops"
    push $P5003, "Label"
    push $P5003, "RegexActions"
    .const 'Sub' $P5004 = 'cuid_481_1349901750.327' 
    capture_lex $P5004
    $P5005 = $P5004()
    nqp_deserialize_sc "", cur_sc, $P5003, $P5005
    .const "LexInfo" $P5001 = "cuid_1_1349901750.327"
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    $P5003 = $P5001."set_static_lexpad_value"("GLOBALish", $P5002)
    .const "LexInfo" $P5004 = "cuid_1_1349901750.327"
    $P5005 = $P5004."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_1_1349901750.327"
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 0
    $P5003 = $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5004 = "cuid_1_1349901750.327"
    $P5005 = $P5004."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_1_1349901750.327"
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 1
    $P5003 = $P5001."set_static_lexpad_value"("EXPORT", $P5002)
    .const "LexInfo" $P5004 = "cuid_1_1349901750.327"
    $P5005 = $P5004."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_2_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 4
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_3_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 5
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_4_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 6
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_5_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 7
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_6_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 8
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_7_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 9
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_8_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 10
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_9_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 11
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_10_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 12
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_11_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 13
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_12_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 14
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_13_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 15
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_14_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 16
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_15_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 17
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_16_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 18
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_17_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 19
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_18_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 20
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_19_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 21
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_20_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 22
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_21_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 23
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_22_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 24
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_23_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 25
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_24_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 26
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_25_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 27
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_26_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 28
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_27_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 29
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_28_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 30
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_29_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 31
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_30_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 32
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_31_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 33
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_32_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 34
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_33_1349901750.327"
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 3
    $P5003 = $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5004 = "cuid_33_1349901750.327"
    $P5005 = $P5004."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_33_1349901750.327"
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 3
    $P5003 = $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5004 = "cuid_33_1349901750.327"
    $P5005 = $P5004."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_34_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 36
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_35_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 37
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_36_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 38
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_37_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 39
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_38_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 40
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_39_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 41
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_41_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 42
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_43_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 43
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_44_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 44
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_45_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 45
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_47_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 46
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_48_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 47
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_49_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 48
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_50_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 49
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_51_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 50
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_52_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 51
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_53_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 52
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_54_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 53
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_55_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 54
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_56_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 55
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_57_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 56
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_58_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 57
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_59_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 58
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_60_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 59
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_61_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 60
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_62_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 61
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_63_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 62
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_65_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 63
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_66_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 64
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_67_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 65
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_68_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 66
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_69_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 67
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_70_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 68
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_71_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 69
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_72_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 70
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_73_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 71
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_74_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 72
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_75_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 73
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_76_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 74
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_77_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 75
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_78_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 76
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_79_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 77
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_80_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 78
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_81_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 79
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_82_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 80
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_83_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 81
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_84_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 82
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_85_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 83
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_86_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 84
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_87_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 85
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_88_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 86
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_91_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 87
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_92_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 88
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_93_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 89
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_94_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 90
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_95_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 91
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_96_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 92
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_97_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 93
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_98_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 94
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_99_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 95
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_100_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 96
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_101_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 97
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_102_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 98
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_103_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 99
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_104_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 100
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_105_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 101
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_106_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 102
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_107_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 103
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_108_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 104
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_109_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 105
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_110_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 106
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_111_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 107
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_112_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 108
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_113_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 109
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_114_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 110
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_115_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 111
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_116_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 112
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_117_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 113
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_118_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 114
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_119_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 115
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_120_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 116
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_121_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 117
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_122_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 118
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_123_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 119
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_124_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 120
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_125_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 121
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_126_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 122
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_128_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 123
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_129_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 124
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_130_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 125
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_131_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 126
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_132_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 127
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_133_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 128
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_134_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 129
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_135_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 130
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_136_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 131
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_137_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 132
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_138_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 133
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_139_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 134
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_140_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 135
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_141_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 136
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_142_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 137
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_143_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 138
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_144_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 139
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_145_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 140
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_146_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 141
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_147_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 142
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_148_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 143
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_149_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 144
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_150_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 145
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_151_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 146
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_152_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 147
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_153_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 148
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_154_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 149
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_155_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 150
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_156_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 151
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_157_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 152
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_158_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 153
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_159_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 154
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_160_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 155
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_161_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 156
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_162_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 157
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_163_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 158
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_164_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 159
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_165_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 160
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_166_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 161
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_167_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 162
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_168_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 163
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_169_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 164
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_170_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 165
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_171_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 166
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_172_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 167
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_173_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 168
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_174_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 169
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_175_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 170
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_176_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 171
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_177_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 172
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_178_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 173
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_179_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 174
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_180_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 175
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_181_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 176
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_182_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 177
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_183_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 178
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_184_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 179
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_185_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 180
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_186_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 181
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_187_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 182
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_188_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 183
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_189_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 184
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_190_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 185
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_191_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 186
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_192_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 187
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_193_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 188
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_194_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 189
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_195_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 190
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_196_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 191
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_197_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 192
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_198_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 193
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_199_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 194
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_200_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 195
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_201_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 196
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_202_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 197
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_203_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 198
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_204_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 199
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_205_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 200
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_206_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 201
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_207_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 202
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_208_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 203
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_209_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 204
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_210_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 205
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_211_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 206
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_212_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 207
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_213_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 208
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_214_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 209
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_215_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 210
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_216_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 211
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_217_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 212
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_218_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 213
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_219_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 214
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_220_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 215
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_221_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 216
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_222_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 217
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_223_1349901750.327"
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 35
    $P5003 = $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5004 = "cuid_223_1349901750.327"
    $P5005 = $P5004."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_223_1349901750.327"
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 35
    $P5003 = $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5004 = "cuid_223_1349901750.327"
    $P5005 = $P5004."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_225_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 219
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_226_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 220
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_228_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 221
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_229_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 222
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_232_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 223
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_235_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 224
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_237_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 225
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_239_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 226
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_240_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 227
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_241_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 228
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_242_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 229
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_243_1349901750.327"
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 218
    $P5003 = $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5004 = "cuid_243_1349901750.327"
    $P5005 = $P5004."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_243_1349901750.327"
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 218
    $P5003 = $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5004 = "cuid_243_1349901750.327"
    $P5005 = $P5004."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_244_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 231
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_245_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 232
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_246_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 233
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_247_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 234
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_248_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 235
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_249_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 236
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_250_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 237
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_251_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 238
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_252_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 239
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_253_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 240
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_254_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 241
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_255_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 242
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_256_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 243
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_257_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 244
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_258_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 245
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_259_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 246
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_260_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 247
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_261_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 248
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_262_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 249
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_263_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 250
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_264_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 251
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_265_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 252
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_266_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 253
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_267_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 254
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_268_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 255
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_269_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 256
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_270_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 257
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_271_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 258
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_272_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 259
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_273_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 260
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_274_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 261
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_275_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 262
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_276_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 263
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_277_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 264
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_278_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 265
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_279_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 266
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_280_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 267
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_281_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 268
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_282_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 269
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_283_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 270
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_284_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 271
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_285_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 272
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_286_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 273
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_287_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 274
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_288_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 275
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_289_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 276
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_290_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 277
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_291_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 278
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_292_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 279
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_293_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 280
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_294_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 281
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_295_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 282
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_296_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 283
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_297_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 284
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_298_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 285
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_299_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 286
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_300_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 287
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_301_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 288
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_302_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 289
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_303_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 290
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_304_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 291
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_305_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 292
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_306_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 293
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_307_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 294
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_308_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 295
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_309_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 296
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_310_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 297
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_311_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 298
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_312_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 299
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_313_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 300
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_314_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 301
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_315_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 302
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_316_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 303
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_317_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 304
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_318_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 305
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_319_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 306
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_320_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 307
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_321_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 308
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_322_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 309
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_323_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 310
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_324_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 311
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_325_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 312
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_326_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 313
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_327_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 314
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_328_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 315
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_329_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 316
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_330_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 317
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_331_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 318
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_332_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 319
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_333_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 320
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_334_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 321
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_335_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 322
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_336_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 323
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_337_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 324
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_338_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 325
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_339_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 326
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_340_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 327
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_341_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 328
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_342_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 329
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_343_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 330
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_344_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 331
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_345_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 332
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_346_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 333
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_347_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 334
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_348_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 335
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_349_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 336
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_350_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 337
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_351_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 338
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_352_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 339
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_353_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 340
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_354_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 341
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_355_1349901750.327"
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 230
    $P5003 = $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5004 = "cuid_355_1349901750.327"
    $P5005 = $P5004."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_355_1349901750.327"
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 230
    $P5003 = $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5004 = "cuid_355_1349901750.327"
    $P5005 = $P5004."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_356_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 343
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_357_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 344
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_358_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 345
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_359_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 346
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_360_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 347
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_361_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 348
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_362_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 349
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_363_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 350
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_364_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 351
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_365_1349901750.327" 
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 352
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_366_1349901750.327"
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 342
    $P5003 = $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5004 = "cuid_366_1349901750.327"
    $P5005 = $P5004."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_366_1349901750.327"
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 342
    $P5003 = $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5004 = "cuid_366_1349901750.327"
    $P5005 = $P5004."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_367_1349901750.327"
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 353
    $P5003 = $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5004 = "cuid_367_1349901750.327"
    $P5005 = $P5004."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_367_1349901750.327"
    nqp_get_sc_object $P5002, "FC698E47F935BCC29242334736F703405C78F9CF-1349901750.343", 353
    $P5003 = $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5004 = "cuid_367_1349901750.327"
    $P5005 = $P5004."finish_static_lexpad"()
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_481_1349901750.327") :anon :lex :outer("cuid_482_1349901750.327")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    .const 'Sub' $P5002 = "cuid_2_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_3_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_4_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_5_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_6_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_7_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_8_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_9_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_10_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_11_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_12_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_13_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_14_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_15_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_16_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_17_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_18_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_19_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_20_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_21_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_22_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_23_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_24_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_25_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_26_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_27_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_28_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_29_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_30_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_31_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_32_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_34_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_35_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_36_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_37_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_38_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_39_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_41_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_43_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_44_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_45_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_47_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_48_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_49_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_50_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_51_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_52_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_53_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_54_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_55_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_56_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_57_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_58_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_59_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_60_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_61_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_62_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_63_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_65_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_66_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_67_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_68_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_69_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_70_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_71_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_72_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_73_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_74_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_75_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_76_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_77_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_78_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_79_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_80_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_81_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_82_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_83_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_84_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_85_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_86_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_87_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_88_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_91_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_92_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_93_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_94_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_95_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_96_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_97_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_98_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_99_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_100_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_101_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_102_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_103_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_104_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_105_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_106_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_107_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_108_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_109_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_110_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_111_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_112_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_113_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_114_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_115_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_116_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_117_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_118_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_119_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_120_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_121_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_122_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_123_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_124_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_125_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_126_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_128_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_129_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_130_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_131_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_132_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_133_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_134_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_135_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_136_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_137_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_138_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_139_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_140_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_141_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_142_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_143_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_144_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_145_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_146_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_147_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_148_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_149_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_150_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_151_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_152_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_153_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_154_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_155_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_156_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_157_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_158_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_159_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_160_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_161_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_162_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_163_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_164_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_165_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_166_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_167_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_168_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_169_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_170_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_171_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_172_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_173_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_174_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_175_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_176_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_177_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_178_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_179_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_180_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_181_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_182_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_183_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_184_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_185_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_186_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_187_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_188_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_189_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_190_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_191_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_192_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_193_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_194_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_195_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_196_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_197_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_198_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_199_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_200_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_201_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_202_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_203_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_204_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_205_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_206_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_207_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_208_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_209_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_210_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_211_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_212_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_213_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_214_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_215_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_216_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_217_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_218_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_219_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_220_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_221_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_222_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_225_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_226_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_228_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_229_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_232_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_235_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_237_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_239_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_240_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_241_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_242_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_244_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_245_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_246_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_247_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_248_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_249_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_250_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_251_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_252_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_253_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_254_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_255_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_256_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_257_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_258_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_259_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_260_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_261_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_262_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_263_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_264_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_265_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_266_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_267_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_268_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_269_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_270_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_271_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_272_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_273_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_274_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_275_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_276_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_277_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_278_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_279_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_280_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_281_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_282_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_283_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_284_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_285_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_286_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_287_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_288_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_289_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_290_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_291_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_292_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_293_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_294_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_295_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_296_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_297_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_298_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_299_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_300_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_301_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_302_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_303_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_304_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_305_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_306_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_307_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_308_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_309_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_310_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_311_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_312_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_313_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_314_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_315_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_316_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_317_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_318_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_319_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_320_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_321_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_322_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_323_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_324_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_325_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_326_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_327_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_328_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_329_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_330_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_331_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_332_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_333_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_334_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_335_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_336_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_337_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_338_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_339_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_340_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_341_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_342_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_343_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_344_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_345_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_346_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_347_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_348_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_349_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_350_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_351_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_352_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_353_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_354_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_356_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_357_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_358_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_359_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_360_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_361_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_362_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_363_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_364_1349901750.327" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_365_1349901750.327" 
    push $P5001, $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_483_1349901750.327") :load
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .const 'Sub' $P5001 = "cuid_1_1349901750.327" 
    $P5002 = $P5001()
    .return ($P5002) 
.end