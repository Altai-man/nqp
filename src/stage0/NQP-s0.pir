.include 'cclass.pasm'
.include 'except_severity.pasm'
.include 'except_types.pasm'
.include 'iglobals.pasm'
.include 'interpinfo.pasm'
.include 'iterator.pasm'
.include 'sysinfo.pasm'
.include 'stat.pasm'
.include 'datatypes.pasm'

.HLL "nqp"

.loadlib "nqp_group"

.loadlib "nqp_ops"

.loadlib "nqp_bigint_ops"

.loadlib "trans_ops"

.loadlib "io_ops"

.namespace []
.sub "_block1000"  :anon :subid("368_1337966799.879")
    .param pmc param_1002 :slurpy
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 0
    .const 'Sub' $P3999 = "843_1337966799.879" 
    capture_lex $P3999
    .const 'Sub' $P3990 = "841_1337966799.879" 
    capture_lex $P3990
    .const 'Sub' $P3953 = "840_1337966799.879" 
    capture_lex $P3953
    .const 'Sub' $P2728 = "781_1337966799.879" 
    capture_lex $P2728
    .const 'Sub' $P2624 = "744_1337966799.879" 
    capture_lex $P2624
    .const 'Sub' $P1447 = "398_1337966799.879" 
    capture_lex $P1447
    .const 'Sub' $P1036 = "372_1337966799.879" 
    capture_lex $P1036
    .const 'Sub' $P1030 = "371_1337966799.879" 
    capture_lex $P1030
    .const 'Sub' $P1006 = "369_1337966799.879" 
    capture_lex $P1006
.annotate 'line', 1
    .lex "@ARGS", param_1002
    .lex "GLOBALish", $P1003
    .lex "$?PACKAGE", $P1004
.annotate 'line', 2911
    .const 'Sub' $P1006 = "369_1337966799.879" 
    newclosure $P1028, $P1006
    set $P1005, $P1028
    .lex "MAIN", $P1005
.annotate 'line', 2942
    .const 'Sub' $P1030 = "371_1337966799.879" 
    newclosure $P1034, $P1030
    set $P1029, $P1034
    .lex "hll-config", $P1029
.annotate 'line', 1
    $P0 = find_dynamic_lex "$*CTXSAVE"
    if null $P0 goto ctxsave_done
    $I0 = can $P0, "ctxsave"
    unless $I0 goto ctxsave_done
    $P0."ctxsave"()
  ctxsave_done:
.annotate 'line', 7
    .const 'Sub' $P1036 = "372_1337966799.879" 
    capture_lex $P1036
    $P1036()
.annotate 'line', 632
    .const 'Sub' $P1447 = "398_1337966799.879" 
    capture_lex $P1447
    $P1447()
.annotate 'line', 1374
    .const 'Sub' $P2624 = "744_1337966799.879" 
    capture_lex $P2624
    $P2624()
.annotate 'line', 1420
    .const 'Sub' $P2728 = "781_1337966799.879" 
    capture_lex $P2728
    $P2728()
.annotate 'line', 2853
    .const 'Sub' $P3953 = "840_1337966799.879" 
    capture_lex $P3953
    $P3953()
.annotate 'line', 2908
    .const 'Sub' $P3990 = "841_1337966799.879" 
    capture_lex $P3990
    $P3990()
.annotate 'line', 1
    set $P103, $P1005
    set $P103, $P1029
    set $P104, param_1002
    if $P104, if_3993
    set $P103, $P104
    goto if_3993_end
  if_3993:
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P105, "ModuleLoader"
    getinterp $P106
    set $P107, $P106["context"]
    $P105."set_mainline_module"($P107)
    .const '' $P3994 = "369_1337966799.879" 
    set $P108, param_1002
    $P109 = $P3994($P108 :flat)
    set $P103, $P109
  if_3993_end:
    .return ($P103)
    .const 'Sub' $P3996 = "842_1337966799.879" 
    .return ($P3996)
.end


.HLL "nqp"

.namespace []
.sub "" :load :init :subid("post844") :outer("368_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 0
    .const 'Sub' $P1001 = "368_1337966799.879" 
    .local pmc block
    set block, $P1001
    nqp_dynop_setup 
    nqp_bigint_setup 
    getinterp $P111
    get_class $P112, "LexPad"
    get_class $P113, "NQPLexPad"
    $P111."hll_map"($P112, $P113)
    nqp_create_sc $P114, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741"
    .local pmc cur_sc
    set cur_sc, $P114
    cur_sc."set_description"("src\\stage2\\gen\\NQP.pm")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P115, "ModuleLoader"
    $P116 = $P115."load_setting"("NQPCORE")
    block."set_outer_ctx"($P116)
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P115, "ModuleLoader"
    $P115."load_module"("QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P115, "ModuleLoader"
    $P115."load_module"("NQPP6QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P115, "ModuleLoader"
    $P115."load_module"("NQPP6QRegex")
    set $S100, ""
    new $P115, "ResizableStringArray"
    .local pmc string_heap
    set string_heap, $P115
    null $S101
    push string_heap, $S101
    push string_heap, "P6opaque"
    push string_heap, "QRegex"
    push string_heap, "NQPCursorRole"
    push string_heap, "3561418F14B9DE62E1BFBA13A83EFEE010689949-1337966781.579"
    push string_heap, "src\\stage2\\QRegex.nqp"
    push string_heap, "NQPMatch"
    push string_heap, "NQPCursor"
    push string_heap, "NQPRegexMethod"
    push string_heap, "NQPRegex"
    push string_heap, "HLL"
    push string_heap, "QAST"
    push string_heap, "NQP"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "2DEE75AFD50ED67BDF162F6BA56A80FA8956D48C-1337966780.537"
    push string_heap, "src\\stage2\\NQPCORE.setting"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "BC3B59D39ADC8F2D8C75405F1DD1E83CD4BCDEB4-1337966785.134"
    push string_heap, "src\\stage2\\gen\\NQPHLL.pm"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "BUILD"
    push string_heap, "slot_for_object"
    push string_heap, "get_slot_past_for_object"
    push string_heap, "get_slot_past_for_code_ref_at"
    push string_heap, "set_slot_past"
    push string_heap, "set_cur_sc"
    push string_heap, "add_object_to_cur_sc_past"
    push string_heap, "add_object"
    push string_heap, "add_root_code_ref"
    push string_heap, "update_root_code_ref"
    push string_heap, "is_precompilation_mode"
    push string_heap, "add_load_dependency_task"
    push string_heap, "add_fixup_task"
    push string_heap, "get_ref"
    push string_heap, "sc"
    push string_heap, "handle"
    push string_heap, "load_dependency_tasks"
    push string_heap, "fixup_tasks"
    push string_heap, "serialize_and_produce_deserialization_past"
    push string_heap, "push_lexpad"
    push string_heap, "pop_lexpad"
    push string_heap, "cur_lexpad"
    push string_heap, "get_legacy_block_list"
    push string_heap, "load_setting"
    push string_heap, "load_module"
    push string_heap, "install_package_symbol"
    push string_heap, "install_lexical_symbol"
    push string_heap, "install_package_routine"
    push string_heap, "create_code"
    push string_heap, "pkg_create_mo"
    push string_heap, "pkg_add_attribute"
    push string_heap, "pkg_add_method"
    push string_heap, "set_routine_signature"
    push string_heap, "set_routine_signature_on_parrot_sub"
    push string_heap, "pkg_set_body_block"
    push string_heap, "pkg_add_parent_or_role"
    push string_heap, "pkg_add_parrot_vtable_handler_mapping"
    push string_heap, "pkg_compose"
    push string_heap, "run_begin_block"
    push string_heap, "set_nqp_language_defaults"
    push string_heap, "to_past"
    push string_heap, "is_lexical"
    push string_heap, "is_package"
    push string_heap, "is_scope"
    push string_heap, "known_sym"
    push string_heap, "find_sym"
    push string_heap, "$!sc"
    push string_heap, "$!handle"
    push string_heap, "$!precomp_mode"
    push string_heap, "$!num_code_refs"
    push string_heap, "$!code_ref_blocks"
    push string_heap, "@!load_dependency_tasks"
    push string_heap, "@!fixup_tasks"
    push string_heap, "%!addr_to_slot"
    push string_heap, "@!BLOCKS"
    push string_heap, "%!code_objects_to_fix_up"
    push string_heap, "%!code_object_fixup_list"
    push string_heap, "%!code_stub_sc_idx"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "MATCH"
    push string_heap, "Bool"
    push string_heap, "parse"
    push string_heap, "!INTERPOLATE"
    push string_heap, "!INTERPOLATE_REGEX"
    push string_heap, "target"
    push string_heap, "from"
    push string_heap, "pos"
    push string_heap, "CAPHASH"
    push string_heap, "!cursor_init"
    push string_heap, "!cursor_start"
    push string_heap, "!cursor_start_subcapture"
    push string_heap, "!cursor_capture"
    push string_heap, "!cursor_push_cstack"
    push string_heap, "!cursor_pass"
    push string_heap, "!cursor_fail"
    push string_heap, "!cursor_next"
    push string_heap, "!reduce"
    push string_heap, "!reduce_with_match"
    push string_heap, "!protoregex"
    push string_heap, "!protoregex_nfa"
    push string_heap, "!protoregex_table"
    push string_heap, "!BACKREF"
    push string_heap, "!LITERAL"
    push string_heap, "at"
    push string_heap, "before"
    push string_heap, "after"
    push string_heap, "ws"
    push string_heap, "ww"
    push string_heap, "wb"
    push string_heap, "ident"
    push string_heap, "alpha"
    push string_heap, "alnum"
    push string_heap, "upper"
    push string_heap, "lower"
    push string_heap, "digit"
    push string_heap, "xdigit"
    push string_heap, "space"
    push string_heap, "blank"
    push string_heap, "cntrl"
    push string_heap, "punct"
    push string_heap, "FAILGOAL"
    push string_heap, "termish"
    push string_heap, "term"
    push string_heap, "infix"
    push string_heap, "prefix"
    push string_heap, "postfix"
    push string_heap, "circumfix"
    push string_heap, "postcircumfix"
    push string_heap, "term:sym<circumfix>"
    push string_heap, "infixish"
    push string_heap, "prefixish"
    push string_heap, "postfixish"
    push string_heap, "nullterm"
    push string_heap, "nullterm_alt"
    push string_heap, "nulltermish"
    push string_heap, "quote_delimited"
    push string_heap, "quote_atom"
    push string_heap, "decint"
    push string_heap, "decints"
    push string_heap, "hexint"
    push string_heap, "hexints"
    push string_heap, "octint"
    push string_heap, "octints"
    push string_heap, "binint"
    push string_heap, "binints"
    push string_heap, "integer"
    push string_heap, "dec_number"
    push string_heap, "escale"
    push string_heap, "quote_escape"
    push string_heap, "quote_escape:sym<backslash>"
    push string_heap, "quote_escape:sym<stopper>"
    push string_heap, "quote_escape:sym<bs>"
    push string_heap, "quote_escape:sym<nl>"
    push string_heap, "quote_escape:sym<cr>"
    push string_heap, "quote_escape:sym<tab>"
    push string_heap, "quote_escape:sym<ff>"
    push string_heap, "quote_escape:sym<esc>"
    push string_heap, "quote_escape:sym<hex>"
    push string_heap, "quote_escape:sym<oct>"
    push string_heap, "quote_escape:sym<chr>"
    push string_heap, "quote_escape:sym<0>"
    push string_heap, "quote_escape:sym<misc>"
    push string_heap, "charname"
    push string_heap, "charnames"
    push string_heap, "charspec"
    push string_heap, "O"
    push string_heap, "panic"
    push string_heap, "peek_delimiters"
    push string_heap, "quote_EXPR"
    push string_heap, "quotemod_check"
    push string_heap, "starter"
    push string_heap, "stopper"
    push string_heap, "split_words"
    push string_heap, "EXPR"
    push string_heap, "EXPR_reduce"
    push string_heap, "ternary"
    push string_heap, "MARKER"
    push string_heap, "MARKED"
    push string_heap, "LANG"
    push string_heap, "TOP"
    push string_heap, "identifier"
    push string_heap, "name"
    push string_heap, "deflongname"
    push string_heap, "ENDSTMT"
    push string_heap, "unv"
    push string_heap, "pod_comment"
    push string_heap, "comp_unit"
    push string_heap, "statementlist"
    push string_heap, "statement"
    push string_heap, "eat_terminator"
    push string_heap, "xblock"
    push string_heap, "pblock"
    push string_heap, "lambda"
    push string_heap, "block"
    push string_heap, "blockoid"
    push string_heap, "newpad"
    push string_heap, "outerctx"
    push string_heap, "GLOBALish"
    push string_heap, "finishpad"
    push string_heap, "you_are_here"
    push string_heap, "terminator"
    push string_heap, "terminator:sym<;>"
    push string_heap, "terminator:sym<}>"
    push string_heap, "statement_control"
    push string_heap, "statement_control:sym<use>"
    push string_heap, "statement_control:sym<if>"
    push string_heap, "statement_control:sym<unless>"
    push string_heap, "statement_control:sym<while>"
    push string_heap, "statement_control:sym<repeat>"
    push string_heap, "statement_control:sym<for>"
    push string_heap, "statement_control:sym<CATCH>"
    push string_heap, "statement_control:sym<CONTROL>"
    push string_heap, "statement_prefix"
    push string_heap, "statement_prefix:sym<BEGIN>"
    push string_heap, "statement_prefix:sym<INIT>"
    push string_heap, "statement_prefix:sym<try>"
    push string_heap, "blorst"
    push string_heap, "statement_mod_cond"
    push string_heap, "statement_mod_cond:sym<if>"
    push string_heap, "statement_mod_cond:sym<unless>"
    push string_heap, "statement_mod_loop"
    push string_heap, "statement_mod_loop:sym<while>"
    push string_heap, "statement_mod_loop:sym<until>"
    push string_heap, "statement_mod_loop:sym<for>"
    push string_heap, "term:sym<fatarrow>"
    push string_heap, "term:sym<colonpair>"
    push string_heap, "term:sym<variable>"
    push string_heap, "term:sym<package_declarator>"
    push string_heap, "term:sym<scope_declarator>"
    push string_heap, "term:sym<routine_declarator>"
    push string_heap, "term:sym<multi_declarator>"
    push string_heap, "term:sym<regex_declarator>"
    push string_heap, "term:sym<statement_prefix>"
    push string_heap, "term:sym<lambda>"
    push string_heap, "fatarrow"
    push string_heap, "colonpair"
    push string_heap, "variable"
    push string_heap, "sigil"
    push string_heap, "twigil"
    push string_heap, "package_declarator"
    push string_heap, "package_declarator:sym<module>"
    push string_heap, "package_declarator:sym<knowhow>"
    push string_heap, "package_declarator:sym<class>"
    push string_heap, "package_declarator:sym<grammar>"
    push string_heap, "package_declarator:sym<role>"
    push string_heap, "package_declarator:sym<native>"
    push string_heap, "package_declarator:sym<stub>"
    push string_heap, "package_def"
    push string_heap, "scope_declarator"
    push string_heap, "scope_declarator:sym<my>"
    push string_heap, "scope_declarator:sym<our>"
    push string_heap, "scope_declarator:sym<has>"
    push string_heap, "scoped"
    push string_heap, "typename"
    push string_heap, "declarator"
    push string_heap, "variable_declarator"
    push string_heap, "routine_declarator"
    push string_heap, "routine_declarator:sym<sub>"
    push string_heap, "routine_declarator:sym<method>"
    push string_heap, "routine_def"
    push string_heap, "method_def"
    push string_heap, "onlystar"
    push string_heap, "multi_declarator"
    push string_heap, "multi_declarator:sym<multi>"
    push string_heap, "multi_declarator:sym<proto>"
    push string_heap, "multi_declarator:sym<null>"
    push string_heap, "signature"
    push string_heap, "parameter"
    push string_heap, "param_var"
    push string_heap, "named_param"
    push string_heap, "default_value"
    push string_heap, "trait"
    push string_heap, "trait_mod"
    push string_heap, "trait_mod:sym<is>"
    push string_heap, "regex_declarator"
    push string_heap, "dotty"
    push string_heap, "term:sym<self>"
    push string_heap, "term:sym<identifier>"
    push string_heap, "term:sym<name>"
    push string_heap, "term:sym<pir::op>"
    push string_heap, "term:sym<pir::const>"
    push string_heap, "term:sym<nqp::op>"
    push string_heap, "term:sym<onlystar>"
    push string_heap, "args"
    push string_heap, "arglist"
    push string_heap, "term:sym<value>"
    push string_heap, "value"
    push string_heap, "number"
    push string_heap, "quote"
    push string_heap, "quote:sym<apos>"
    push string_heap, "quote:sym<dblq>"
    push string_heap, "quote:sym<q>"
    push string_heap, "quote:sym<qq>"
    push string_heap, "quote:sym<Q>"
    push string_heap, "quote:sym<Q:PIR>"
    push string_heap, "quote:sym</ />"
    push string_heap, "quote_escape:sym<$>"
    push string_heap, "quote_escape:sym<{ }>"
    push string_heap, "circumfix:sym<( )>"
    push string_heap, "circumfix:sym<[ ]>"
    push string_heap, "circumfix:sym<ang>"
    push string_heap, unicode:"circumfix:sym<\x{ab} \x{bb}>"
    push string_heap, "circumfix:sym<{ }>"
    push string_heap, "circumfix:sym<sigil>"
    push string_heap, "semilist"
    push string_heap, "infixstopper"
    push string_heap, "postcircumfix:sym<[ ]>"
    push string_heap, "postcircumfix:sym<{ }>"
    push string_heap, "postcircumfix:sym<ang>"
    push string_heap, "postcircumfix:sym<( )>"
    push string_heap, "postfix:sym<.>"
    push string_heap, "prefix:sym<++>"
    push string_heap, "prefix:sym<-->"
    push string_heap, "postfix:sym<++>"
    push string_heap, "postfix:sym<-->"
    push string_heap, "infix:sym<**>"
    push string_heap, "prefix:sym<+>"
    push string_heap, "prefix:sym<~>"
    push string_heap, "prefix:sym<->"
    push string_heap, "prefix:sym<?>"
    push string_heap, "prefix:sym<!>"
    push string_heap, "prefix:sym<|>"
    push string_heap, "infix:sym<*>"
    push string_heap, "infix:sym</>"
    push string_heap, "infix:sym<%>"
    push string_heap, "infix:sym<+&>"
    push string_heap, "infix:sym<+>"
    push string_heap, "infix:sym<->"
    push string_heap, "infix:sym<+|>"
    push string_heap, "infix:sym<+^>"
    push string_heap, "infix:sym<~>"
    push string_heap, "infix:sym<==>"
    push string_heap, "infix:sym<!=>"
    push string_heap, "infix:sym<<=>"
    push string_heap, "infix:sym<>=>"
    push string_heap, "infix:sym<<>"
    push string_heap, "infix:sym<>>"
    push string_heap, "infix:sym<eq>"
    push string_heap, "infix:sym<ne>"
    push string_heap, "infix:sym<le>"
    push string_heap, "infix:sym<ge>"
    push string_heap, "infix:sym<lt>"
    push string_heap, "infix:sym<gt>"
    push string_heap, "infix:sym<=:=>"
    push string_heap, "infix:sym<~~>"
    push string_heap, "infix:sym<&&>"
    push string_heap, "infix:sym<||>"
    push string_heap, "infix:sym<//>"
    push string_heap, "infix:sym<?? !!>"
    push string_heap, "infix:sym<=>"
    push string_heap, "infix:sym<:=>"
    push string_heap, "infix:sym<::=>"
    push string_heap, "infix:sym<,>"
    push string_heap, "prefix:sym<return>"
    push string_heap, "prefix:sym<make>"
    push string_heap, "term:sym<last>"
    push string_heap, "term:sym<next>"
    push string_heap, "term:sym<redo>"
    push string_heap, "smartmatch"
    push string_heap, "$!orig"
    push string_heap, "$!target"
    push string_heap, "$!from"
    push string_heap, "$!pos"
    push string_heap, "$!match"
    push string_heap, "$!name"
    push string_heap, "$!bstack"
    push string_heap, "$!cstack"
    push string_heap, "$!regexsub"
    push string_heap, "$!restart"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "MATCH"
    push string_heap, "Bool"
    push string_heap, "parse"
    push string_heap, "!INTERPOLATE"
    push string_heap, "!INTERPOLATE_REGEX"
    push string_heap, "target"
    push string_heap, "from"
    push string_heap, "pos"
    push string_heap, "CAPHASH"
    push string_heap, "!cursor_init"
    push string_heap, "!cursor_start"
    push string_heap, "!cursor_start_subcapture"
    push string_heap, "!cursor_capture"
    push string_heap, "!cursor_push_cstack"
    push string_heap, "!cursor_pass"
    push string_heap, "!cursor_fail"
    push string_heap, "!cursor_next"
    push string_heap, "!reduce"
    push string_heap, "!reduce_with_match"
    push string_heap, "!protoregex"
    push string_heap, "!protoregex_nfa"
    push string_heap, "!protoregex_table"
    push string_heap, "!BACKREF"
    push string_heap, "!LITERAL"
    push string_heap, "at"
    push string_heap, "before"
    push string_heap, "after"
    push string_heap, "ws"
    push string_heap, "93CAC232C0C690958BF18876CF59084AC6A2F0E3-1337966795.298"
    push string_heap, "src\\stage2\\gen\\NQPP6QRegex.pm"
    push string_heap, "ww"
    push string_heap, "wb"
    push string_heap, "ident"
    push string_heap, "alpha"
    push string_heap, "alnum"
    push string_heap, "upper"
    push string_heap, "lower"
    push string_heap, "digit"
    push string_heap, "xdigit"
    push string_heap, "space"
    push string_heap, "blank"
    push string_heap, "cntrl"
    push string_heap, "punct"
    push string_heap, "FAILGOAL"
    push string_heap, "termish"
    push string_heap, "term"
    push string_heap, "infix"
    push string_heap, "prefix"
    push string_heap, "postfix"
    push string_heap, "circumfix"
    push string_heap, "postcircumfix"
    push string_heap, "term:sym<circumfix>"
    push string_heap, "infixish"
    push string_heap, "prefixish"
    push string_heap, "postfixish"
    push string_heap, "nullterm"
    push string_heap, "nullterm_alt"
    push string_heap, "nulltermish"
    push string_heap, "quote_delimited"
    push string_heap, "quote_atom"
    push string_heap, "decint"
    push string_heap, "decints"
    push string_heap, "hexint"
    push string_heap, "hexints"
    push string_heap, "octint"
    push string_heap, "octints"
    push string_heap, "binint"
    push string_heap, "binints"
    push string_heap, "integer"
    push string_heap, "dec_number"
    push string_heap, "escale"
    push string_heap, "quote_escape"
    push string_heap, "quote_escape:sym<backslash>"
    push string_heap, "quote_escape:sym<stopper>"
    push string_heap, "quote_escape:sym<bs>"
    push string_heap, "quote_escape:sym<nl>"
    push string_heap, "quote_escape:sym<cr>"
    push string_heap, "quote_escape:sym<tab>"
    push string_heap, "quote_escape:sym<ff>"
    push string_heap, "quote_escape:sym<esc>"
    push string_heap, "quote_escape:sym<hex>"
    push string_heap, "quote_escape:sym<oct>"
    push string_heap, "quote_escape:sym<chr>"
    push string_heap, "quote_escape:sym<0>"
    push string_heap, "quote_escape:sym<misc>"
    push string_heap, "charname"
    push string_heap, "charnames"
    push string_heap, "charspec"
    push string_heap, "O"
    push string_heap, "panic"
    push string_heap, "peek_delimiters"
    push string_heap, "quote_EXPR"
    push string_heap, "quotemod_check"
    push string_heap, "starter"
    push string_heap, "stopper"
    push string_heap, "split_words"
    push string_heap, "EXPR"
    push string_heap, "EXPR_reduce"
    push string_heap, "ternary"
    push string_heap, "MARKER"
    push string_heap, "MARKED"
    push string_heap, "LANG"
    push string_heap, "obs"
    push string_heap, "normspace"
    push string_heap, "identifier"
    push string_heap, "arg"
    push string_heap, "arglist"
    push string_heap, "TOP"
    push string_heap, "nibbler"
    push string_heap, "termaltseq"
    push string_heap, "termconjseq"
    push string_heap, "termalt"
    push string_heap, "termconj"
    push string_heap, "quantified_atom"
    push string_heap, "separator"
    push string_heap, "atom"
    push string_heap, "quantifier"
    push string_heap, "quantifier:sym<*>"
    push string_heap, "quantifier:sym<+>"
    push string_heap, "quantifier:sym<?>"
    push string_heap, "quantifier:sym<{N,M}>"
    push string_heap, "quantifier:sym<**>"
    push string_heap, "backmod"
    push string_heap, "metachar"
    push string_heap, "metachar:sym<ws>"
    push string_heap, "metachar:sym<[ ]>"
    push string_heap, "metachar:sym<( )>"
    push string_heap, "metachar:sym<'>"
    push string_heap, "metachar:sym<\">"
    push string_heap, "metachar:sym<.>"
    push string_heap, "metachar:sym<^>"
    push string_heap, "metachar:sym<^^>"
    push string_heap, "metachar:sym<$>"
    push string_heap, "metachar:sym<$$>"
    push string_heap, "metachar:sym<:::>"
    push string_heap, "metachar:sym<::>"
    push string_heap, "metachar:sym<lwb>"
    push string_heap, "metachar:sym<rwb>"
    push string_heap, "metachar:sym<bs>"
    push string_heap, "metachar:sym<mod>"
    push string_heap, "metachar:sym<quantifier>"
    push string_heap, "metachar:sym<~>"
    push string_heap, "metachar:sym<{*}>"
    push string_heap, "metachar:sym<assert>"
    push string_heap, "metachar:sym<var>"
    push string_heap, "metachar:sym<PIR>"
    push string_heap, "backslash"
    push string_heap, "backslash:sym<s>"
    push string_heap, "backslash:sym<b>"
    push string_heap, "backslash:sym<e>"
    push string_heap, "backslash:sym<f>"
    push string_heap, "backslash:sym<h>"
    push string_heap, "backslash:sym<r>"
    push string_heap, "backslash:sym<t>"
    push string_heap, "backslash:sym<v>"
    push string_heap, "backslash:sym<o>"
    push string_heap, "backslash:sym<x>"
    push string_heap, "backslash:sym<c>"
    push string_heap, "backslash:sym<A>"
    push string_heap, "backslash:sym<z>"
    push string_heap, "backslash:sym<Z>"
    push string_heap, "backslash:sym<Q>"
    push string_heap, "backslash:sym<unrec>"
    push string_heap, "backslash:sym<misc>"
    push string_heap, "assertion"
    push string_heap, "assertion:sym<?>"
    push string_heap, "assertion:sym<!>"
    push string_heap, "assertion:sym<|>"
    push string_heap, "assertion:sym<method>"
    push string_heap, "assertion:sym<name>"
    push string_heap, "assertion:sym<[>"
    push string_heap, "cclass_elem"
    push string_heap, "mod_internal"
    push string_heap, "mod_ident"
    push string_heap, "mod_ident:sym<ignorecase>"
    push string_heap, "mod_ident:sym<ratchet>"
    push string_heap, "mod_ident:sym<sigspace>"
    push string_heap, "metachar:sym<:my>"
    push string_heap, "metachar:sym<{ }>"
    push string_heap, "metachar:sym<nqpvar>"
    push string_heap, "assertion:sym<{ }>"
    push string_heap, "assertion:sym<?{ }>"
    push string_heap, "assertion:sym<var>"
    push string_heap, "codeblock"
    push string_heap, "$!orig"
    push string_heap, "$!target"
    push string_heap, "$!from"
    push string_heap, "$!pos"
    push string_heap, "$!match"
    push string_heap, "$!name"
    push string_heap, "$!bstack"
    push string_heap, "$!cstack"
    push string_heap, "$!regexsub"
    push string_heap, "$!restart"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "ints_to_string"
    push string_heap, "CTXSAVE"
    push string_heap, "SET_BLOCK_OUTER_CTX"
    push string_heap, "EXPR"
    push string_heap, "term:sym<circumfix>"
    push string_heap, "termish"
    push string_heap, "nullterm"
    push string_heap, "nullterm_alt"
    push string_heap, "integer"
    push string_heap, "dec_number"
    push string_heap, "decint"
    push string_heap, "hexint"
    push string_heap, "octint"
    push string_heap, "binint"
    push string_heap, "quote_EXPR"
    push string_heap, "quote_delimited"
    push string_heap, "quote_atom"
    push string_heap, "quote_escape:sym<backslash>"
    push string_heap, "quote_escape:sym<stopper>"
    push string_heap, "quote_escape:sym<bs>"
    push string_heap, "quote_escape:sym<nl>"
    push string_heap, "quote_escape:sym<cr>"
    push string_heap, "quote_escape:sym<tab>"
    push string_heap, "quote_escape:sym<ff>"
    push string_heap, "quote_escape:sym<esc>"
    push string_heap, "quote_escape:sym<hex>"
    push string_heap, "quote_escape:sym<oct>"
    push string_heap, "quote_escape:sym<chr>"
    push string_heap, "quote_escape:sym<0>"
    push string_heap, "quote_escape:sym<misc>"
    push string_heap, "charname"
    push string_heap, "charnames"
    push string_heap, "charspec"
    push string_heap, "TOP"
    push string_heap, "deflongname"
    push string_heap, "comp_unit"
    push string_heap, "statementlist"
    push string_heap, "statement"
    push string_heap, "xblock"
    push string_heap, "pblock"
    push string_heap, "block"
    push string_heap, "blockoid"
    push string_heap, "newpad"
    push string_heap, "outerctx"
    push string_heap, "GLOBALish"
    push string_heap, "you_are_here"
    push string_heap, "statement_control:sym<use>"
    push string_heap, "statement_control:sym<if>"
    push string_heap, "statement_control:sym<unless>"
    push string_heap, "statement_control:sym<while>"
    push string_heap, "statement_control:sym<repeat>"
    push string_heap, "statement_control:sym<for>"
    push string_heap, "statement_control:sym<CATCH>"
    push string_heap, "statement_control:sym<CONTROL>"
    push string_heap, "statement_prefix:sym<BEGIN>"
    push string_heap, "statement_prefix:sym<INIT>"
    push string_heap, "statement_prefix:sym<try>"
    push string_heap, "blorst"
    push string_heap, "statement_mod_cond:sym<if>"
    push string_heap, "statement_mod_cond:sym<unless>"
    push string_heap, "statement_mod_loop:sym<while>"
    push string_heap, "statement_mod_loop:sym<until>"
    push string_heap, "term:sym<fatarrow>"
    push string_heap, "term:sym<colonpair>"
    push string_heap, "term:sym<variable>"
    push string_heap, "term:sym<package_declarator>"
    push string_heap, "term:sym<scope_declarator>"
    push string_heap, "term:sym<routine_declarator>"
    push string_heap, "term:sym<regex_declarator>"
    push string_heap, "term:sym<statement_prefix>"
    push string_heap, "term:sym<lambda>"
    push string_heap, "fatarrow"
    push string_heap, "colonpair"
    push string_heap, "variable"
    push string_heap, "package_declarator:sym<module>"
    push string_heap, "package_declarator:sym<knowhow>"
    push string_heap, "package_declarator:sym<class>"
    push string_heap, "package_declarator:sym<grammar>"
    push string_heap, "package_declarator:sym<role>"
    push string_heap, "package_declarator:sym<native>"
    push string_heap, "package_declarator:sym<stub>"
    push string_heap, "package_def"
    push string_heap, "scope_declarator:sym<my>"
    push string_heap, "scope_declarator:sym<our>"
    push string_heap, "scope_declarator:sym<has>"
    push string_heap, "scoped"
    push string_heap, "declarator"
    push string_heap, "multi_declarator:sym<multi>"
    push string_heap, "multi_declarator:sym<proto>"
    push string_heap, "multi_declarator:sym<null>"
    push string_heap, "variable_declarator"
    push string_heap, "routine_declarator:sym<sub>"
    push string_heap, "routine_declarator:sym<method>"
    push string_heap, "routine_def"
    push string_heap, "method_def"
    push string_heap, "signature"
    push string_heap, "parameter"
    push string_heap, "param_var"
    push string_heap, "named_param"
    push string_heap, "typename"
    push string_heap, "trait"
    push string_heap, "trait_mod:sym<is>"
    push string_heap, "regex_declarator"
    push string_heap, "dotty"
    push string_heap, "term:sym<self>"
    push string_heap, "term:sym<identifier>"
    push string_heap, "term:sym<name>"
    push string_heap, "term:sym<pir::op>"
    push string_heap, "term:sym<pir::const>"
    push string_heap, "term:sym<nqp::op>"
    push string_heap, "term:sym<onlystar>"
    push string_heap, "args"
    push string_heap, "arglist"
    push string_heap, "term:sym<multi_declarator>"
    push string_heap, "term:sym<value>"
    push string_heap, "circumfix:sym<( )>"
    push string_heap, "circumfix:sym<[ ]>"
    push string_heap, "circumfix:sym<ang>"
    push string_heap, unicode:"circumfix:sym<\x{ab} \x{bb}>"
    push string_heap, "circumfix:sym<{ }>"
    push string_heap, "circumfix:sym<sigil>"
    push string_heap, "semilist"
    push string_heap, "postcircumfix:sym<[ ]>"
    push string_heap, "postcircumfix:sym<{ }>"
    push string_heap, "postcircumfix:sym<ang>"
    push string_heap, "postcircumfix:sym<( )>"
    push string_heap, "value"
    push string_heap, "number"
    push string_heap, "quote:sym<apos>"
    push string_heap, "quote:sym<dblq>"
    push string_heap, "quote:sym<qq>"
    push string_heap, "quote:sym<q>"
    push string_heap, "quote:sym<Q>"
    push string_heap, "quote:sym<Q:PIR>"
    push string_heap, "quote:sym</ />"
    push string_heap, "quote_escape:sym<$>"
    push string_heap, "quote_escape:sym<{ }>"
    push string_heap, "postfix:sym<.>"
    push string_heap, "postfix:sym<++>"
    push string_heap, "postfix:sym<-->"
    push string_heap, "prefix:sym<make>"
    push string_heap, "term:sym<next>"
    push string_heap, "term:sym<last>"
    push string_heap, "term:sym<redo>"
    push string_heap, "infix:sym<~~>"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "ints_to_string"
    push string_heap, "CTXSAVE"
    push string_heap, "SET_BLOCK_OUTER_CTX"
    push string_heap, "EXPR"
    push string_heap, "term:sym<circumfix>"
    push string_heap, "termish"
    push string_heap, "nullterm"
    push string_heap, "nullterm_alt"
    push string_heap, "integer"
    push string_heap, "dec_number"
    push string_heap, "decint"
    push string_heap, "hexint"
    push string_heap, "octint"
    push string_heap, "binint"
    push string_heap, "quote_EXPR"
    push string_heap, "quote_delimited"
    push string_heap, "quote_atom"
    push string_heap, "quote_escape:sym<backslash>"
    push string_heap, "quote_escape:sym<stopper>"
    push string_heap, "quote_escape:sym<bs>"
    push string_heap, "quote_escape:sym<nl>"
    push string_heap, "quote_escape:sym<cr>"
    push string_heap, "quote_escape:sym<tab>"
    push string_heap, "quote_escape:sym<ff>"
    push string_heap, "quote_escape:sym<esc>"
    push string_heap, "quote_escape:sym<hex>"
    push string_heap, "quote_escape:sym<oct>"
    push string_heap, "quote_escape:sym<chr>"
    push string_heap, "quote_escape:sym<0>"
    push string_heap, "quote_escape:sym<misc>"
    push string_heap, "charname"
    push string_heap, "charnames"
    push string_heap, "charspec"
    push string_heap, "TOP"
    push string_heap, "nibbler"
    push string_heap, "termaltseq"
    push string_heap, "termconjseq"
    push string_heap, "termalt"
    push string_heap, "termconj"
    push string_heap, "quantified_atom"
    push string_heap, "separator"
    push string_heap, "atom"
    push string_heap, "quantifier:sym<*>"
    push string_heap, "quantifier:sym<+>"
    push string_heap, "quantifier:sym<?>"
    push string_heap, "quantifier:sym<**>"
    push string_heap, "metachar:sym<ws>"
    push string_heap, "metachar:sym<[ ]>"
    push string_heap, "metachar:sym<( )>"
    push string_heap, "metachar:sym<'>"
    push string_heap, "metachar:sym<\">"
    push string_heap, "metachar:sym<.>"
    push string_heap, "metachar:sym<^>"
    push string_heap, "metachar:sym<^^>"
    push string_heap, "metachar:sym<$>"
    push string_heap, "metachar:sym<$$>"
    push string_heap, "metachar:sym<lwb>"
    push string_heap, "metachar:sym<rwb>"
    push string_heap, "metachar:sym<bs>"
    push string_heap, "metachar:sym<assert>"
    push string_heap, "metachar:sym<var>"
    push string_heap, "metachar:sym<~>"
    push string_heap, "backslash:sym<s>"
    push string_heap, "backslash:sym<b>"
    push string_heap, "backslash:sym<e>"
    push string_heap, "backslash:sym<f>"
    push string_heap, "backslash:sym<h>"
    push string_heap, "backslash:sym<r>"
    push string_heap, "backslash:sym<t>"
    push string_heap, "backslash:sym<v>"
    push string_heap, "backslash:sym<o>"
    push string_heap, "backslash:sym<x>"
    push string_heap, "backslash:sym<c>"
    push string_heap, "backslash:sym<misc>"
    push string_heap, "assertion:sym<?>"
    push string_heap, "assertion:sym<!>"
    push string_heap, "assertion:sym<|>"
    push string_heap, "assertion:sym<method>"
    push string_heap, "assertion:sym<name>"
    push string_heap, "assertion:sym<[>"
    push string_heap, "arg"
    push string_heap, "arglist"
    push string_heap, "cclass_elem"
    push string_heap, "mod_internal"
    push string_heap, "subrule_alias"
    push string_heap, "flip_ast"
    push string_heap, "metachar:sym<:my>"
    push string_heap, "metachar:sym<{ }>"
    push string_heap, "metachar:sym<nqpvar>"
    push string_heap, "assertion:sym<{ }>"
    push string_heap, "assertion:sym<?{ }>"
    push string_heap, "assertion:sym<var>"
    push string_heap, "codeblock"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "BUILD"
    push string_heap, "get_exports"
    push string_heap, "get_module"
    push string_heap, "language"
    push string_heap, "compiler"
    push string_heap, "config"
    push string_heap, "load_module"
    push string_heap, "import"
    push string_heap, "autoprint"
    push string_heap, "interactive"
    push string_heap, "eval"
    push string_heap, "ctxsave"
    push string_heap, "panic"
    push string_heap, "stages"
    push string_heap, "parsegrammar"
    push string_heap, "parseactions"
    push string_heap, "interactive_banner"
    push string_heap, "interactive_prompt"
    push string_heap, "compiler_progname"
    push string_heap, "commandline_options"
    push string_heap, "command_line"
    push string_heap, "command_eval"
    push string_heap, "process_args"
    push string_heap, "evalfiles"
    push string_heap, "compile"
    push string_heap, "parse"
    push string_heap, "past"
    push string_heap, "post"
    push string_heap, "pirbegin"
    push string_heap, "pir"
    push string_heap, "evalpmc"
    push string_heap, "dumper"
    push string_heap, "usage"
    push string_heap, "version"
    push string_heap, "show-config"
    push string_heap, "nqpevent"
    push string_heap, "removestage"
    push string_heap, "addstage"
    push string_heap, "parse_name"
    push string_heap, "lineof"
    push string_heap, "@!stages"
    push string_heap, "$!parsegrammar"
    push string_heap, "$!parseactions"
    push string_heap, "@!cmdoptions"
    push string_heap, "$!usage"
    push string_heap, "$!compiler_progname"
    push string_heap, "$!language"
    push string_heap, "%!config"
    push string_heap, "__6MODEL_CORE__"
    push string_heap, "GLOBALish"
    push string_heap, "5B6BCDEB97207A8A1AF979F9510A88333D9459D9-1337966776.937"
    push string_heap, "src\\stage2\\gen\\nqp-mo.pm"
    push string_heap, "NQP::World"
    push string_heap, "@!BLOCKS"
    push string_heap, "%!code_objects_to_fix_up"
    push string_heap, "%!code_object_fixup_list"
    push string_heap, "%!code_stub_sc_idx"
    push string_heap, "push_lexpad"
    push string_heap, "pop_lexpad"
    push string_heap, "cur_lexpad"
    push string_heap, "get_legacy_block_list"
    push string_heap, "load_setting"
    push string_heap, "load_module"
    push string_heap, "install_package_symbol"
    push string_heap, "install_lexical_symbol"
    push string_heap, "install_package_routine"
    push string_heap, "create_code"
    push string_heap, "pkg_create_mo"
    push string_heap, "pkg_add_attribute"
    push string_heap, "pkg_add_method"
    push string_heap, "set_routine_signature"
    push string_heap, "set_routine_signature_on_parrot_sub"
    push string_heap, "pkg_set_body_block"
    push string_heap, "pkg_add_parent_or_role"
    push string_heap, "pkg_add_parrot_vtable_handler_mapping"
    push string_heap, "pkg_compose"
    push string_heap, "run_begin_block"
    push string_heap, "set_nqp_language_defaults"
    push string_heap, "to_past"
    push string_heap, "is_lexical"
    push string_heap, "is_package"
    push string_heap, "is_scope"
    push string_heap, "known_sym"
    push string_heap, "find_sym"
    push string_heap, "NQP::Grammar"
    push string_heap, "TOP"
    push string_heap, "identifier"
    push string_heap, "name"
    push string_heap, "deflongname"
    push string_heap, "ENDSTMT"
    push string_heap, "ws"
    push string_heap, "unv"
    push string_heap, "pod_comment"
    push string_heap, "comp_unit"
    push string_heap, "statementlist"
    push string_heap, "statement"
    push string_heap, "eat_terminator"
    push string_heap, "xblock"
    push string_heap, "pblock"
    push string_heap, "lambda"
    push string_heap, "block"
    push string_heap, "blockoid"
    push string_heap, "newpad"
    push string_heap, "outerctx"
    push string_heap, "GLOBALish"
    push string_heap, "finishpad"
    push string_heap, "you_are_here"
    push string_heap, "terminator"
    push string_heap, "terminator:sym<;>"
    push string_heap, "terminator:sym<}>"
    push string_heap, "statement_control"
    push string_heap, "statement_control:sym<use>"
    push string_heap, "statement_control:sym<if>"
    push string_heap, "statement_control:sym<unless>"
    push string_heap, "statement_control:sym<while>"
    push string_heap, "statement_control:sym<repeat>"
    push string_heap, "statement_control:sym<for>"
    push string_heap, "statement_control:sym<CATCH>"
    push string_heap, "statement_control:sym<CONTROL>"
    push string_heap, "statement_prefix"
    push string_heap, "statement_prefix:sym<BEGIN>"
    push string_heap, "statement_prefix:sym<INIT>"
    push string_heap, "statement_prefix:sym<try>"
    push string_heap, "blorst"
    push string_heap, "statement_mod_cond"
    push string_heap, "statement_mod_cond:sym<if>"
    push string_heap, "statement_mod_cond:sym<unless>"
    push string_heap, "statement_mod_loop"
    push string_heap, "statement_mod_loop:sym<while>"
    push string_heap, "statement_mod_loop:sym<until>"
    push string_heap, "statement_mod_loop:sym<for>"
    push string_heap, "term:sym<fatarrow>"
    push string_heap, "term:sym<colonpair>"
    push string_heap, "term:sym<variable>"
    push string_heap, "term:sym<package_declarator>"
    push string_heap, "term:sym<scope_declarator>"
    push string_heap, "term:sym<routine_declarator>"
    push string_heap, "term:sym<multi_declarator>"
    push string_heap, "term:sym<regex_declarator>"
    push string_heap, "term:sym<statement_prefix>"
    push string_heap, "term:sym<lambda>"
    push string_heap, "fatarrow"
    push string_heap, "colonpair"
    push string_heap, "variable"
    push string_heap, "sigil"
    push string_heap, "twigil"
    push string_heap, "package_declarator"
    push string_heap, "package_declarator:sym<module>"
    push string_heap, "package_declarator:sym<knowhow>"
    push string_heap, "package_declarator:sym<class>"
    push string_heap, "package_declarator:sym<grammar>"
    push string_heap, "package_declarator:sym<role>"
    push string_heap, "package_declarator:sym<native>"
    push string_heap, "package_declarator:sym<stub>"
    push string_heap, "package_def"
    push string_heap, "scope_declarator"
    push string_heap, "scope_declarator:sym<my>"
    push string_heap, "scope_declarator:sym<our>"
    push string_heap, "scope_declarator:sym<has>"
    push string_heap, "scoped"
    push string_heap, "typename"
    push string_heap, "declarator"
    push string_heap, "variable_declarator"
    push string_heap, "routine_declarator"
    push string_heap, "routine_declarator:sym<sub>"
    push string_heap, "routine_declarator:sym<method>"
    push string_heap, "routine_def"
    push string_heap, "method_def"
    push string_heap, "onlystar"
    push string_heap, "multi_declarator"
    push string_heap, "multi_declarator:sym<multi>"
    push string_heap, "multi_declarator:sym<proto>"
    push string_heap, "multi_declarator:sym<null>"
    push string_heap, "signature"
    push string_heap, "parameter"
    push string_heap, "param_var"
    push string_heap, "named_param"
    push string_heap, "default_value"
    push string_heap, "trait"
    push string_heap, "trait_mod"
    push string_heap, "trait_mod:sym<is>"
    push string_heap, "regex_declarator"
    push string_heap, "dotty"
    push string_heap, "term:sym<self>"
    push string_heap, "term:sym<identifier>"
    push string_heap, "term:sym<name>"
    push string_heap, "term:sym<pir::op>"
    push string_heap, "term:sym<pir::const>"
    push string_heap, "term:sym<nqp::op>"
    push string_heap, "term:sym<onlystar>"
    push string_heap, "args"
    push string_heap, "arglist"
    push string_heap, "term:sym<value>"
    push string_heap, "value"
    push string_heap, "number"
    push string_heap, "quote"
    push string_heap, "quote:sym<apos>"
    push string_heap, "quote:sym<dblq>"
    push string_heap, "quote:sym<q>"
    push string_heap, "quote:sym<qq>"
    push string_heap, "quote:sym<Q>"
    push string_heap, "quote:sym<Q:PIR>"
    push string_heap, "quote:sym</ />"
    push string_heap, "quote_escape:sym<$>"
    push string_heap, "quote_escape:sym<{ }>"
    push string_heap, "quote_escape:sym<esc>"
    push string_heap, "circumfix:sym<( )>"
    push string_heap, "circumfix:sym<[ ]>"
    push string_heap, "circumfix:sym<ang>"
    push string_heap, unicode:"circumfix:sym<\x{ab} \x{bb}>"
    push string_heap, "circumfix:sym<{ }>"
    push string_heap, "circumfix:sym<sigil>"
    push string_heap, "semilist"
    push string_heap, "infixish"
    push string_heap, "infixstopper"
    push string_heap, "postcircumfix:sym<[ ]>"
    push string_heap, "postcircumfix:sym<{ }>"
    push string_heap, "postcircumfix:sym<ang>"
    push string_heap, "postcircumfix:sym<( )>"
    push string_heap, "postfix:sym<.>"
    push string_heap, "prefix:sym<++>"
    push string_heap, "prefix:sym<-->"
    push string_heap, "postfix:sym<++>"
    push string_heap, "postfix:sym<-->"
    push string_heap, "infix:sym<**>"
    push string_heap, "prefix:sym<+>"
    push string_heap, "prefix:sym<~>"
    push string_heap, "prefix:sym<->"
    push string_heap, "prefix:sym<?>"
    push string_heap, "prefix:sym<!>"
    push string_heap, "prefix:sym<|>"
    push string_heap, "infix:sym<*>"
    push string_heap, "infix:sym</>"
    push string_heap, "infix:sym<%>"
    push string_heap, "infix:sym<+&>"
    push string_heap, "infix:sym<+>"
    push string_heap, "infix:sym<->"
    push string_heap, "infix:sym<+|>"
    push string_heap, "infix:sym<+^>"
    push string_heap, "infix:sym<~>"
    push string_heap, "infix:sym<==>"
    push string_heap, "infix:sym<!=>"
    push string_heap, "infix:sym<<=>"
    push string_heap, "infix:sym<>=>"
    push string_heap, "infix:sym<<>"
    push string_heap, "infix:sym<>>"
    push string_heap, "infix:sym<eq>"
    push string_heap, "infix:sym<ne>"
    push string_heap, "infix:sym<le>"
    push string_heap, "infix:sym<ge>"
    push string_heap, "infix:sym<lt>"
    push string_heap, "infix:sym<gt>"
    push string_heap, "infix:sym<=:=>"
    push string_heap, "infix:sym<~~>"
    push string_heap, "infix:sym<&&>"
    push string_heap, "infix:sym<||>"
    push string_heap, "infix:sym<//>"
    push string_heap, "infix:sym<?? !!>"
    push string_heap, "infix:sym<=>"
    push string_heap, "infix:sym<:=>"
    push string_heap, "infix:sym<::=>"
    push string_heap, "infix:sym<,>"
    push string_heap, "prefix:sym<return>"
    push string_heap, "prefix:sym<make>"
    push string_heap, "term:sym<last>"
    push string_heap, "term:sym<next>"
    push string_heap, "term:sym<redo>"
    push string_heap, "smartmatch"
    push string_heap, "NQP::Regex"
    push string_heap, "metachar:sym<:my>"
    push string_heap, "metachar:sym<{ }>"
    push string_heap, "metachar:sym<nqpvar>"
    push string_heap, "assertion:sym<{ }>"
    push string_heap, "assertion:sym<?>"
    push string_heap, "assertion:sym<!>"
    push string_heap, "assertion:sym<?{ }>"
    push string_heap, "assertion:sym<name>"
    push string_heap, "assertion:sym<var>"
    push string_heap, "codeblock"
    push string_heap, "NQP::Actions"
    push string_heap, "TOP"
    push string_heap, "deflongname"
    push string_heap, "comp_unit"
    push string_heap, "statementlist"
    push string_heap, "statement"
    push string_heap, "xblock"
    push string_heap, "pblock"
    push string_heap, "block"
    push string_heap, "blockoid"
    push string_heap, "newpad"
    push string_heap, "outerctx"
    push string_heap, "GLOBALish"
    push string_heap, "you_are_here"
    push string_heap, "statement_control:sym<use>"
    push string_heap, "statement_control:sym<if>"
    push string_heap, "statement_control:sym<unless>"
    push string_heap, "statement_control:sym<while>"
    push string_heap, "statement_control:sym<repeat>"
    push string_heap, "statement_control:sym<for>"
    push string_heap, "statement_control:sym<CATCH>"
    push string_heap, "statement_control:sym<CONTROL>"
    push string_heap, "statement_prefix:sym<BEGIN>"
    push string_heap, "statement_prefix:sym<INIT>"
    push string_heap, "statement_prefix:sym<try>"
    push string_heap, "blorst"
    push string_heap, "statement_mod_cond:sym<if>"
    push string_heap, "statement_mod_cond:sym<unless>"
    push string_heap, "statement_mod_loop:sym<while>"
    push string_heap, "statement_mod_loop:sym<until>"
    push string_heap, "term:sym<fatarrow>"
    push string_heap, "term:sym<colonpair>"
    push string_heap, "term:sym<variable>"
    push string_heap, "term:sym<package_declarator>"
    push string_heap, "term:sym<scope_declarator>"
    push string_heap, "term:sym<routine_declarator>"
    push string_heap, "term:sym<regex_declarator>"
    push string_heap, "term:sym<statement_prefix>"
    push string_heap, "term:sym<lambda>"
    push string_heap, "fatarrow"
    push string_heap, "colonpair"
    push string_heap, "variable"
    push string_heap, "package_declarator:sym<module>"
    push string_heap, "package_declarator:sym<knowhow>"
    push string_heap, "package_declarator:sym<class>"
    push string_heap, "package_declarator:sym<grammar>"
    push string_heap, "package_declarator:sym<role>"
    push string_heap, "package_declarator:sym<native>"
    push string_heap, "package_declarator:sym<stub>"
    push string_heap, "package_def"
    push string_heap, "scope_declarator:sym<my>"
    push string_heap, "scope_declarator:sym<our>"
    push string_heap, "scope_declarator:sym<has>"
    push string_heap, "scoped"
    push string_heap, "declarator"
    push string_heap, "multi_declarator:sym<multi>"
    push string_heap, "multi_declarator:sym<proto>"
    push string_heap, "multi_declarator:sym<null>"
    push string_heap, "variable_declarator"
    push string_heap, "routine_declarator:sym<sub>"
    push string_heap, "routine_declarator:sym<method>"
    push string_heap, "routine_def"
    push string_heap, "method_def"
    push string_heap, "signature"
    push string_heap, "parameter"
    push string_heap, "param_var"
    push string_heap, "named_param"
    push string_heap, "typename"
    push string_heap, "trait"
    push string_heap, "trait_mod:sym<is>"
    push string_heap, "regex_declarator"
    push string_heap, "dotty"
    push string_heap, "term:sym<self>"
    push string_heap, "term:sym<identifier>"
    push string_heap, "term:sym<name>"
    push string_heap, "term:sym<pir::op>"
    push string_heap, "term:sym<pir::const>"
    push string_heap, "term:sym<nqp::op>"
    push string_heap, "term:sym<onlystar>"
    push string_heap, "args"
    push string_heap, "arglist"
    push string_heap, "term:sym<multi_declarator>"
    push string_heap, "term:sym<value>"
    push string_heap, "circumfix:sym<( )>"
    push string_heap, "circumfix:sym<[ ]>"
    push string_heap, "circumfix:sym<ang>"
    push string_heap, unicode:"circumfix:sym<\x{ab} \x{bb}>"
    push string_heap, "circumfix:sym<{ }>"
    push string_heap, "circumfix:sym<sigil>"
    push string_heap, "semilist"
    push string_heap, "postcircumfix:sym<[ ]>"
    push string_heap, "postcircumfix:sym<{ }>"
    push string_heap, "postcircumfix:sym<ang>"
    push string_heap, "postcircumfix:sym<( )>"
    push string_heap, "value"
    push string_heap, "number"
    push string_heap, "quote:sym<apos>"
    push string_heap, "quote:sym<dblq>"
    push string_heap, "quote:sym<qq>"
    push string_heap, "quote:sym<q>"
    push string_heap, "quote:sym<Q>"
    push string_heap, "quote:sym<Q:PIR>"
    push string_heap, "quote:sym</ />"
    push string_heap, "quote_escape:sym<$>"
    push string_heap, "quote_escape:sym<{ }>"
    push string_heap, "quote_escape:sym<esc>"
    push string_heap, "postfix:sym<.>"
    push string_heap, "postfix:sym<++>"
    push string_heap, "postfix:sym<-->"
    push string_heap, "prefix:sym<make>"
    push string_heap, "term:sym<next>"
    push string_heap, "term:sym<last>"
    push string_heap, "term:sym<redo>"
    push string_heap, "infix:sym<~~>"
    push string_heap, "NQP::RegexActions"
    push string_heap, "metachar:sym<:my>"
    push string_heap, "metachar:sym<{ }>"
    push string_heap, "metachar:sym<nqpvar>"
    push string_heap, "assertion:sym<{ }>"
    push string_heap, "assertion:sym<?{ }>"
    push string_heap, "assertion:sym<var>"
    push string_heap, "codeblock"
    push string_heap, "NQP::Compiler"
    push string_heap, "P6opaque"
    push string_heap, "NFA"
    push string_heap, "P6Regex"
    push string_heap, "P6opaque"
    push string_heap, "Grammar"
    push string_heap, "Actions"
    push string_heap, "Compiler"
    push string_heap, "CommandLine"
    push string_heap, "World"
    push string_heap, "P6opaque"
    push string_heap, "Node"
    push string_heap, "F5FDAA09D866B2026EBA9586B919320AC111E8C1-1337966792.156"
    push string_heap, "src\\stage2\\QAST.nqp"
    push string_heap, "Regex"
    push string_heap, "Compiler"
    push string_heap, "P6opaque"
    push string_heap, "World"
    push string_heap, "Grammar"
    push string_heap, "Regex"
    push string_heap, "Actions"
    push string_heap, "RegexActions"
    push string_heap, "Compiler"
    push string_heap, "@!BLOCKS"
    push string_heap, "%!code_objects_to_fix_up"
    push string_heap, "%!code_object_fixup_list"
    push string_heap, "%!code_stub_sc_idx"
    push string_heap, "QRegex"
    push string_heap, "HLL"
    push string_heap, "QAST"
    push string_heap, "NQP"
    push string_heap, "P6opaque"
    push string_heap, "Grammar"
    push string_heap, "Actions"
    push string_heap, "Compiler"
    push string_heap, "P6Regex"
    .const 'Sub' $P3999 = "843_1337966799.879" 
    capture_lex $P3999
    $P117 = $P3999()
    nqp_deserialize_sc $S100, cur_sc, string_heap, $P117
    .const 'LexInfo' $P4343 = "368_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 0
    $P4343."set_static_lexpad_value"("GLOBALish", $P118)
    .const 'LexInfo' $P4344 = "368_1337966799.879" 
    $P4344."finish_static_lexpad"()
    .const 'LexInfo' $P4345 = "368_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 0
    $P4345."set_static_lexpad_value"("$?PACKAGE", $P118)
    .const 'LexInfo' $P4346 = "368_1337966799.879" 
    $P4346."finish_static_lexpad"()
    .const '' $P4347 = "10_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 2
    set_sub_code_object $P4347, $P118
    .const '' $P4348 = "11_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 3
    set_sub_code_object $P4348, $P118
    .const '' $P4349 = "12_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 4
    set_sub_code_object $P4349, $P118
    .const '' $P4350 = "13_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 5
    set_sub_code_object $P4350, $P118
    .const '' $P4351 = "14_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 6
    set_sub_code_object $P4351, $P118
    .const '' $P4352 = "15_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 7
    set_sub_code_object $P4352, $P118
    .const '' $P4353 = "16_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 8
    set_sub_code_object $P4353, $P118
    .const '' $P4354 = "17_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 9
    set_sub_code_object $P4354, $P118
    .const '' $P4355 = "18_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 10
    set_sub_code_object $P4355, $P118
    .const '' $P4356 = "19_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 11
    set_sub_code_object $P4356, $P118
    .const '' $P4357 = "20_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 12
    set_sub_code_object $P4357, $P118
    .const '' $P4358 = "21_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 13
    set_sub_code_object $P4358, $P118
    .const '' $P4359 = "22_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 14
    set_sub_code_object $P4359, $P118
    .const '' $P4360 = "23_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 15
    set_sub_code_object $P4360, $P118
    .const '' $P4361 = "24_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 16
    set_sub_code_object $P4361, $P118
    .const '' $P4362 = "25_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 17
    set_sub_code_object $P4362, $P118
    .const '' $P4363 = "26_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 18
    set_sub_code_object $P4363, $P118
    .const '' $P4364 = "27_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 19
    set_sub_code_object $P4364, $P118
    .const '' $P4365 = "28_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 20
    set_sub_code_object $P4365, $P118
    .const '' $P4366 = "29_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 21
    set_sub_code_object $P4366, $P118
    .const '' $P4367 = "30_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 22
    set_sub_code_object $P4367, $P118
    .const '' $P4368 = "31_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 23
    set_sub_code_object $P4368, $P118
    .const '' $P4369 = "32_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 24
    set_sub_code_object $P4369, $P118
    .const '' $P4370 = "33_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 25
    set_sub_code_object $P4370, $P118
    .const '' $P4371 = "34_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 26
    set_sub_code_object $P4371, $P118
    .const '' $P4372 = "35_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 27
    set_sub_code_object $P4372, $P118
    .const '' $P4373 = "36_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 28
    set_sub_code_object $P4373, $P118
    .const '' $P4374 = "37_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 29
    set_sub_code_object $P4374, $P118
    .const '' $P4375 = "38_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 30
    set_sub_code_object $P4375, $P118
    .const '' $P4376 = "39_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 31
    set_sub_code_object $P4376, $P118
    .const 'LexInfo' $P4377 = "372_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 1
    $P4377."set_static_lexpad_value"("$?PACKAGE", $P118)
    .const 'LexInfo' $P4378 = "372_1337966799.879" 
    $P4378."finish_static_lexpad"()
    .const 'LexInfo' $P4379 = "372_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 1
    $P4379."set_static_lexpad_value"("$?CLASS", $P118)
    .const 'LexInfo' $P4380 = "372_1337966799.879" 
    $P4380."finish_static_lexpad"()
    .const '' $P4381 = "40_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 33
    set_sub_code_object $P4381, $P118
    .const '' $P4382 = "41_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 34
    set_sub_code_object $P4382, $P118
    .const '' $P4383 = "42_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 35
    set_sub_code_object $P4383, $P118
    .const '' $P4384 = "43_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 36
    set_sub_code_object $P4384, $P118
    .const '' $P4385 = "44_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 37
    set_sub_code_object $P4385, $P118
    .const '' $P4386 = "45_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 38
    set_sub_code_object $P4386, $P118
    .const '' $P4387 = "47_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 39
    set_sub_code_object $P4387, $P118
    .const '' $P4388 = "49_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 40
    set_sub_code_object $P4388, $P118
    .const '' $P4389 = "50_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 41
    set_sub_code_object $P4389, $P118
    .const '' $P4390 = "51_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 42
    set_sub_code_object $P4390, $P118
    .const '' $P4391 = "53_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 43
    set_sub_code_object $P4391, $P118
    .const '' $P4392 = "54_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 44
    set_sub_code_object $P4392, $P118
    .const '' $P4393 = "55_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 45
    set_sub_code_object $P4393, $P118
    .const '' $P4394 = "56_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 46
    set_sub_code_object $P4394, $P118
    .const '' $P4395 = "57_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 47
    set_sub_code_object $P4395, $P118
    .const '' $P4396 = "58_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 48
    set_sub_code_object $P4396, $P118
    .const '' $P4397 = "59_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 49
    set_sub_code_object $P4397, $P118
    .const '' $P4398 = "60_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 50
    set_sub_code_object $P4398, $P118
    .const '' $P4399 = "61_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 51
    set_sub_code_object $P4399, $P118
    .const '' $P4400 = "62_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 52
    set_sub_code_object $P4400, $P118
    .const '' $P4401 = "63_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 53
    set_sub_code_object $P4401, $P118
    .const '' $P4402 = "64_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 54
    set_sub_code_object $P4402, $P118
    .const '' $P4403 = "65_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 55
    set_sub_code_object $P4403, $P118
    .const '' $P4404 = "66_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 56
    set_sub_code_object $P4404, $P118
    .const '' $P4405 = "67_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 57
    set_sub_code_object $P4405, $P118
    .const '' $P4406 = "68_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 58
    set_sub_code_object $P4406, $P118
    .const '' $P4407 = "69_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 59
    set_sub_code_object $P4407, $P118
    .const '' $P4408 = "70_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 60
    set_sub_code_object $P4408, $P118
    .const '' $P4409 = "72_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 61
    set_sub_code_object $P4409, $P118
    .const '' $P4410 = "73_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 62
    set_sub_code_object $P4410, $P118
    .const '' $P4411 = "74_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 63
    set_sub_code_object $P4411, $P118
    .const '' $P4412 = "75_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 64
    set_sub_code_object $P4412, $P118
    .const '' $P4413 = "76_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 65
    set_sub_code_object $P4413, $P118
    .const '' $P4414 = "77_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 66
    set_sub_code_object $P4414, $P118
    .const '' $P4415 = "78_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 67
    set_sub_code_object $P4415, $P118
    .const '' $P4416 = "79_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 68
    set_sub_code_object $P4416, $P118
    .const '' $P4417 = "80_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 69
    set_sub_code_object $P4417, $P118
    .const '' $P4418 = "81_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 70
    set_sub_code_object $P4418, $P118
    .const '' $P4419 = "82_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 71
    set_sub_code_object $P4419, $P118
    .const '' $P4420 = "83_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 72
    set_sub_code_object $P4420, $P118
    .const '' $P4421 = "84_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 73
    set_sub_code_object $P4421, $P118
    .const '' $P4422 = "85_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 74
    set_sub_code_object $P4422, $P118
    .const '' $P4423 = "86_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 75
    set_sub_code_object $P4423, $P118
    .const '' $P4424 = "87_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 76
    set_sub_code_object $P4424, $P118
    .const '' $P4425 = "88_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 77
    set_sub_code_object $P4425, $P118
    .const '' $P4426 = "89_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 78
    set_sub_code_object $P4426, $P118
    .const '' $P4427 = "90_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 79
    set_sub_code_object $P4427, $P118
    .const '' $P4428 = "91_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 80
    set_sub_code_object $P4428, $P118
    .const '' $P4429 = "92_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 81
    set_sub_code_object $P4429, $P118
    .const '' $P4430 = "93_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 82
    set_sub_code_object $P4430, $P118
    .const '' $P4431 = "94_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 83
    set_sub_code_object $P4431, $P118
    .const '' $P4432 = "95_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 84
    set_sub_code_object $P4432, $P118
    .const '' $P4433 = "98_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 85
    set_sub_code_object $P4433, $P118
    .const '' $P4434 = "99_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 86
    set_sub_code_object $P4434, $P118
    .const '' $P4435 = "100_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 87
    set_sub_code_object $P4435, $P118
    .const '' $P4436 = "101_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 88
    set_sub_code_object $P4436, $P118
    .const '' $P4437 = "102_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 89
    set_sub_code_object $P4437, $P118
    .const '' $P4438 = "103_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 90
    set_sub_code_object $P4438, $P118
    .const '' $P4439 = "104_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 91
    set_sub_code_object $P4439, $P118
    .const '' $P4440 = "105_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 92
    set_sub_code_object $P4440, $P118
    .const '' $P4441 = "106_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 93
    set_sub_code_object $P4441, $P118
    .const '' $P4442 = "107_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 94
    set_sub_code_object $P4442, $P118
    .const '' $P4443 = "108_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 95
    set_sub_code_object $P4443, $P118
    .const '' $P4444 = "109_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 96
    set_sub_code_object $P4444, $P118
    .const '' $P4445 = "110_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 97
    set_sub_code_object $P4445, $P118
    .const '' $P4446 = "111_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 98
    set_sub_code_object $P4446, $P118
    .const '' $P4447 = "112_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 99
    set_sub_code_object $P4447, $P118
    .const '' $P4448 = "113_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 100
    set_sub_code_object $P4448, $P118
    .const '' $P4449 = "114_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 101
    set_sub_code_object $P4449, $P118
    .const '' $P4450 = "115_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 102
    set_sub_code_object $P4450, $P118
    .const '' $P4451 = "116_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 103
    set_sub_code_object $P4451, $P118
    .const '' $P4452 = "117_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 104
    set_sub_code_object $P4452, $P118
    .const '' $P4453 = "118_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 105
    set_sub_code_object $P4453, $P118
    .const '' $P4454 = "119_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 106
    set_sub_code_object $P4454, $P118
    .const '' $P4455 = "120_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 107
    set_sub_code_object $P4455, $P118
    .const '' $P4456 = "121_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 108
    set_sub_code_object $P4456, $P118
    .const '' $P4457 = "122_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 109
    set_sub_code_object $P4457, $P118
    .const '' $P4458 = "123_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 110
    set_sub_code_object $P4458, $P118
    .const '' $P4459 = "124_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 111
    set_sub_code_object $P4459, $P118
    .const '' $P4460 = "125_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 112
    set_sub_code_object $P4460, $P118
    .const '' $P4461 = "126_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 113
    set_sub_code_object $P4461, $P118
    .const '' $P4462 = "127_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 114
    set_sub_code_object $P4462, $P118
    .const '' $P4463 = "128_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 115
    set_sub_code_object $P4463, $P118
    .const '' $P4464 = "129_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 116
    set_sub_code_object $P4464, $P118
    .const '' $P4465 = "130_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 117
    set_sub_code_object $P4465, $P118
    .const '' $P4466 = "131_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 118
    set_sub_code_object $P4466, $P118
    .const '' $P4467 = "132_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 119
    set_sub_code_object $P4467, $P118
    .const '' $P4468 = "133_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 120
    set_sub_code_object $P4468, $P118
    .const '' $P4469 = "135_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 121
    set_sub_code_object $P4469, $P118
    .const '' $P4470 = "136_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 122
    set_sub_code_object $P4470, $P118
    .const '' $P4471 = "137_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 123
    set_sub_code_object $P4471, $P118
    .const '' $P4472 = "138_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 124
    set_sub_code_object $P4472, $P118
    .const '' $P4473 = "139_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 125
    set_sub_code_object $P4473, $P118
    .const '' $P4474 = "140_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 126
    set_sub_code_object $P4474, $P118
    .const '' $P4475 = "141_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 127
    set_sub_code_object $P4475, $P118
    .const '' $P4476 = "142_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 128
    set_sub_code_object $P4476, $P118
    .const '' $P4477 = "143_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 129
    set_sub_code_object $P4477, $P118
    .const '' $P4478 = "144_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 130
    set_sub_code_object $P4478, $P118
    .const '' $P4479 = "145_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 131
    set_sub_code_object $P4479, $P118
    .const '' $P4480 = "146_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 132
    set_sub_code_object $P4480, $P118
    .const '' $P4481 = "147_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 133
    set_sub_code_object $P4481, $P118
    .const '' $P4482 = "148_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 134
    set_sub_code_object $P4482, $P118
    .const '' $P4483 = "149_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 135
    set_sub_code_object $P4483, $P118
    .const '' $P4484 = "150_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 136
    set_sub_code_object $P4484, $P118
    .const '' $P4485 = "151_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 137
    set_sub_code_object $P4485, $P118
    .const '' $P4486 = "152_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 138
    set_sub_code_object $P4486, $P118
    .const '' $P4487 = "153_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 139
    set_sub_code_object $P4487, $P118
    .const '' $P4488 = "154_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 140
    set_sub_code_object $P4488, $P118
    .const '' $P4489 = "155_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 141
    set_sub_code_object $P4489, $P118
    .const '' $P4490 = "156_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 142
    set_sub_code_object $P4490, $P118
    .const '' $P4491 = "157_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 143
    set_sub_code_object $P4491, $P118
    .const '' $P4492 = "158_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 144
    set_sub_code_object $P4492, $P118
    .const '' $P4493 = "159_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 145
    set_sub_code_object $P4493, $P118
    .const '' $P4494 = "160_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 146
    set_sub_code_object $P4494, $P118
    .const '' $P4495 = "161_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 147
    set_sub_code_object $P4495, $P118
    .const '' $P4496 = "162_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 148
    set_sub_code_object $P4496, $P118
    .const '' $P4497 = "163_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 149
    set_sub_code_object $P4497, $P118
    .const '' $P4498 = "164_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 150
    set_sub_code_object $P4498, $P118
    .const '' $P4499 = "165_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 151
    set_sub_code_object $P4499, $P118
    .const '' $P4500 = "166_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 152
    set_sub_code_object $P4500, $P118
    .const '' $P4501 = "167_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 153
    set_sub_code_object $P4501, $P118
    .const '' $P4502 = "168_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 154
    set_sub_code_object $P4502, $P118
    .const '' $P4503 = "169_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 155
    set_sub_code_object $P4503, $P118
    .const '' $P4504 = "170_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 156
    set_sub_code_object $P4504, $P118
    .const '' $P4505 = "171_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 157
    set_sub_code_object $P4505, $P118
    .const '' $P4506 = "172_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 158
    set_sub_code_object $P4506, $P118
    .const '' $P4507 = "173_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 159
    set_sub_code_object $P4507, $P118
    .const '' $P4508 = "174_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 160
    set_sub_code_object $P4508, $P118
    .const '' $P4509 = "175_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 161
    set_sub_code_object $P4509, $P118
    .const '' $P4510 = "176_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 162
    set_sub_code_object $P4510, $P118
    .const '' $P4511 = "177_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 163
    set_sub_code_object $P4511, $P118
    .const '' $P4512 = "178_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 164
    set_sub_code_object $P4512, $P118
    .const '' $P4513 = "179_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 165
    set_sub_code_object $P4513, $P118
    .const '' $P4514 = "180_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 166
    set_sub_code_object $P4514, $P118
    .const '' $P4515 = "181_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 167
    set_sub_code_object $P4515, $P118
    .const '' $P4516 = "182_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 168
    set_sub_code_object $P4516, $P118
    .const '' $P4517 = "183_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 169
    set_sub_code_object $P4517, $P118
    .const '' $P4518 = "184_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 170
    set_sub_code_object $P4518, $P118
    .const '' $P4519 = "185_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 171
    set_sub_code_object $P4519, $P118
    .const '' $P4520 = "186_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 172
    set_sub_code_object $P4520, $P118
    .const '' $P4521 = "187_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 173
    set_sub_code_object $P4521, $P118
    .const '' $P4522 = "188_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 174
    set_sub_code_object $P4522, $P118
    .const '' $P4523 = "189_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 175
    set_sub_code_object $P4523, $P118
    .const '' $P4524 = "190_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 176
    set_sub_code_object $P4524, $P118
    .const '' $P4525 = "191_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 177
    set_sub_code_object $P4525, $P118
    .const '' $P4526 = "192_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 178
    set_sub_code_object $P4526, $P118
    .const '' $P4527 = "193_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 179
    set_sub_code_object $P4527, $P118
    .const '' $P4528 = "194_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 180
    set_sub_code_object $P4528, $P118
    .const '' $P4529 = "195_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 181
    set_sub_code_object $P4529, $P118
    .const '' $P4530 = "196_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 182
    set_sub_code_object $P4530, $P118
    .const '' $P4531 = "197_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 183
    set_sub_code_object $P4531, $P118
    .const '' $P4532 = "198_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 184
    set_sub_code_object $P4532, $P118
    .const '' $P4533 = "199_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 185
    set_sub_code_object $P4533, $P118
    .const '' $P4534 = "200_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 186
    set_sub_code_object $P4534, $P118
    .const '' $P4535 = "201_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 187
    set_sub_code_object $P4535, $P118
    .const '' $P4536 = "202_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 188
    set_sub_code_object $P4536, $P118
    .const '' $P4537 = "203_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 189
    set_sub_code_object $P4537, $P118
    .const '' $P4538 = "204_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 190
    set_sub_code_object $P4538, $P118
    .const '' $P4539 = "205_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 191
    set_sub_code_object $P4539, $P118
    .const '' $P4540 = "206_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 192
    set_sub_code_object $P4540, $P118
    .const '' $P4541 = "207_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 193
    set_sub_code_object $P4541, $P118
    .const '' $P4542 = "208_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 194
    set_sub_code_object $P4542, $P118
    .const '' $P4543 = "209_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 195
    set_sub_code_object $P4543, $P118
    .const '' $P4544 = "210_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 196
    set_sub_code_object $P4544, $P118
    .const '' $P4545 = "211_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 197
    set_sub_code_object $P4545, $P118
    .const '' $P4546 = "212_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 198
    set_sub_code_object $P4546, $P118
    .const '' $P4547 = "213_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 199
    set_sub_code_object $P4547, $P118
    .const '' $P4548 = "214_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 200
    set_sub_code_object $P4548, $P118
    .const '' $P4549 = "215_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 201
    set_sub_code_object $P4549, $P118
    .const '' $P4550 = "216_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 202
    set_sub_code_object $P4550, $P118
    .const '' $P4551 = "217_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 203
    set_sub_code_object $P4551, $P118
    .const '' $P4552 = "218_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 204
    set_sub_code_object $P4552, $P118
    .const '' $P4553 = "219_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 205
    set_sub_code_object $P4553, $P118
    .const '' $P4554 = "220_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 206
    set_sub_code_object $P4554, $P118
    .const '' $P4555 = "221_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 207
    set_sub_code_object $P4555, $P118
    .const '' $P4556 = "222_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 208
    set_sub_code_object $P4556, $P118
    .const '' $P4557 = "223_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 209
    set_sub_code_object $P4557, $P118
    .const '' $P4558 = "224_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 210
    set_sub_code_object $P4558, $P118
    .const '' $P4559 = "225_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 211
    set_sub_code_object $P4559, $P118
    .const '' $P4560 = "226_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 212
    set_sub_code_object $P4560, $P118
    .const '' $P4561 = "227_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 213
    set_sub_code_object $P4561, $P118
    .const '' $P4562 = "228_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 214
    set_sub_code_object $P4562, $P118
    .const '' $P4563 = "229_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 215
    set_sub_code_object $P4563, $P118
    .const 'LexInfo' $P4564 = "398_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 32
    $P4564."set_static_lexpad_value"("$?PACKAGE", $P118)
    .const 'LexInfo' $P4565 = "398_1337966799.879" 
    $P4565."finish_static_lexpad"()
    .const 'LexInfo' $P4566 = "398_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 32
    $P4566."set_static_lexpad_value"("$?CLASS", $P118)
    .const 'LexInfo' $P4567 = "398_1337966799.879" 
    $P4567."finish_static_lexpad"()
    .const '' $P4568 = "231_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 217
    set_sub_code_object $P4568, $P118
    .const '' $P4569 = "232_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 218
    set_sub_code_object $P4569, $P118
    .const '' $P4570 = "234_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 219
    set_sub_code_object $P4570, $P118
    .const '' $P4571 = "235_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 220
    set_sub_code_object $P4571, $P118
    .const '' $P4572 = "238_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 221
    set_sub_code_object $P4572, $P118
    .const '' $P4573 = "241_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 222
    set_sub_code_object $P4573, $P118
    .const '' $P4574 = "243_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 223
    set_sub_code_object $P4574, $P118
    .const '' $P4575 = "245_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 224
    set_sub_code_object $P4575, $P118
    .const '' $P4576 = "246_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 225
    set_sub_code_object $P4576, $P118
    .const '' $P4577 = "247_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 226
    set_sub_code_object $P4577, $P118
    .const 'LexInfo' $P4578 = "744_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 216
    $P4578."set_static_lexpad_value"("$?PACKAGE", $P118)
    .const 'LexInfo' $P4579 = "744_1337966799.879" 
    $P4579."finish_static_lexpad"()
    .const 'LexInfo' $P4580 = "744_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 216
    $P4580."set_static_lexpad_value"("$?CLASS", $P118)
    .const 'LexInfo' $P4581 = "744_1337966799.879" 
    $P4581."finish_static_lexpad"()
    .const '' $P4582 = "248_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 228
    set_sub_code_object $P4582, $P118
    .const '' $P4583 = "249_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 229
    set_sub_code_object $P4583, $P118
    .const '' $P4584 = "250_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 230
    set_sub_code_object $P4584, $P118
    .const '' $P4585 = "251_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 231
    set_sub_code_object $P4585, $P118
    .const '' $P4586 = "252_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 232
    set_sub_code_object $P4586, $P118
    .const '' $P4587 = "253_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 233
    set_sub_code_object $P4587, $P118
    .const '' $P4588 = "254_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 234
    set_sub_code_object $P4588, $P118
    .const '' $P4589 = "255_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 235
    set_sub_code_object $P4589, $P118
    .const '' $P4590 = "256_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 236
    set_sub_code_object $P4590, $P118
    .const '' $P4591 = "257_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 237
    set_sub_code_object $P4591, $P118
    .const '' $P4592 = "258_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 238
    set_sub_code_object $P4592, $P118
    .const '' $P4593 = "259_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 239
    set_sub_code_object $P4593, $P118
    .const '' $P4594 = "260_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 240
    set_sub_code_object $P4594, $P118
    .const '' $P4595 = "261_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 241
    set_sub_code_object $P4595, $P118
    .const '' $P4596 = "262_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 242
    set_sub_code_object $P4596, $P118
    .const '' $P4597 = "263_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 243
    set_sub_code_object $P4597, $P118
    .const '' $P4598 = "264_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 244
    set_sub_code_object $P4598, $P118
    .const '' $P4599 = "265_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 245
    set_sub_code_object $P4599, $P118
    .const '' $P4600 = "266_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 246
    set_sub_code_object $P4600, $P118
    .const '' $P4601 = "267_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 247
    set_sub_code_object $P4601, $P118
    .const '' $P4602 = "268_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 248
    set_sub_code_object $P4602, $P118
    .const '' $P4603 = "269_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 249
    set_sub_code_object $P4603, $P118
    .const '' $P4604 = "270_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 250
    set_sub_code_object $P4604, $P118
    .const '' $P4605 = "271_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 251
    set_sub_code_object $P4605, $P118
    .const '' $P4606 = "272_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 252
    set_sub_code_object $P4606, $P118
    .const '' $P4607 = "273_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 253
    set_sub_code_object $P4607, $P118
    .const '' $P4608 = "274_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 254
    set_sub_code_object $P4608, $P118
    .const '' $P4609 = "275_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 255
    set_sub_code_object $P4609, $P118
    .const '' $P4610 = "276_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 256
    set_sub_code_object $P4610, $P118
    .const '' $P4611 = "277_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 257
    set_sub_code_object $P4611, $P118
    .const '' $P4612 = "278_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 258
    set_sub_code_object $P4612, $P118
    .const '' $P4613 = "279_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 259
    set_sub_code_object $P4613, $P118
    .const '' $P4614 = "280_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 260
    set_sub_code_object $P4614, $P118
    .const '' $P4615 = "281_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 261
    set_sub_code_object $P4615, $P118
    .const '' $P4616 = "282_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 262
    set_sub_code_object $P4616, $P118
    .const '' $P4617 = "283_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 263
    set_sub_code_object $P4617, $P118
    .const '' $P4618 = "284_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 264
    set_sub_code_object $P4618, $P118
    .const '' $P4619 = "285_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 265
    set_sub_code_object $P4619, $P118
    .const '' $P4620 = "286_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 266
    set_sub_code_object $P4620, $P118
    .const '' $P4621 = "287_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 267
    set_sub_code_object $P4621, $P118
    .const '' $P4622 = "288_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 268
    set_sub_code_object $P4622, $P118
    .const '' $P4623 = "289_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 269
    set_sub_code_object $P4623, $P118
    .const '' $P4624 = "290_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 270
    set_sub_code_object $P4624, $P118
    .const '' $P4625 = "291_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 271
    set_sub_code_object $P4625, $P118
    .const '' $P4626 = "292_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 272
    set_sub_code_object $P4626, $P118
    .const '' $P4627 = "293_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 273
    set_sub_code_object $P4627, $P118
    .const '' $P4628 = "294_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 274
    set_sub_code_object $P4628, $P118
    .const '' $P4629 = "295_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 275
    set_sub_code_object $P4629, $P118
    .const '' $P4630 = "296_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 276
    set_sub_code_object $P4630, $P118
    .const '' $P4631 = "297_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 277
    set_sub_code_object $P4631, $P118
    .const '' $P4632 = "298_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 278
    set_sub_code_object $P4632, $P118
    .const '' $P4633 = "299_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 279
    set_sub_code_object $P4633, $P118
    .const '' $P4634 = "300_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 280
    set_sub_code_object $P4634, $P118
    .const '' $P4635 = "301_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 281
    set_sub_code_object $P4635, $P118
    .const '' $P4636 = "302_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 282
    set_sub_code_object $P4636, $P118
    .const '' $P4637 = "303_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 283
    set_sub_code_object $P4637, $P118
    .const '' $P4638 = "304_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 284
    set_sub_code_object $P4638, $P118
    .const '' $P4639 = "305_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 285
    set_sub_code_object $P4639, $P118
    .const '' $P4640 = "306_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 286
    set_sub_code_object $P4640, $P118
    .const '' $P4641 = "307_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 287
    set_sub_code_object $P4641, $P118
    .const '' $P4642 = "308_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 288
    set_sub_code_object $P4642, $P118
    .const '' $P4643 = "309_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 289
    set_sub_code_object $P4643, $P118
    .const '' $P4644 = "310_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 290
    set_sub_code_object $P4644, $P118
    .const '' $P4645 = "311_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 291
    set_sub_code_object $P4645, $P118
    .const '' $P4646 = "312_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 292
    set_sub_code_object $P4646, $P118
    .const '' $P4647 = "313_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 293
    set_sub_code_object $P4647, $P118
    .const '' $P4648 = "314_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 294
    set_sub_code_object $P4648, $P118
    .const '' $P4649 = "315_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 295
    set_sub_code_object $P4649, $P118
    .const '' $P4650 = "316_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 296
    set_sub_code_object $P4650, $P118
    .const '' $P4651 = "317_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 297
    set_sub_code_object $P4651, $P118
    .const '' $P4652 = "318_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 298
    set_sub_code_object $P4652, $P118
    .const '' $P4653 = "319_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 299
    set_sub_code_object $P4653, $P118
    .const '' $P4654 = "320_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 300
    set_sub_code_object $P4654, $P118
    .const '' $P4655 = "321_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 301
    set_sub_code_object $P4655, $P118
    .const '' $P4656 = "322_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 302
    set_sub_code_object $P4656, $P118
    .const '' $P4657 = "323_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 303
    set_sub_code_object $P4657, $P118
    .const '' $P4658 = "324_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 304
    set_sub_code_object $P4658, $P118
    .const '' $P4659 = "325_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 305
    set_sub_code_object $P4659, $P118
    .const '' $P4660 = "326_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 306
    set_sub_code_object $P4660, $P118
    .const '' $P4661 = "327_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 307
    set_sub_code_object $P4661, $P118
    .const '' $P4662 = "328_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 308
    set_sub_code_object $P4662, $P118
    .const '' $P4663 = "329_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 309
    set_sub_code_object $P4663, $P118
    .const '' $P4664 = "330_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 310
    set_sub_code_object $P4664, $P118
    .const '' $P4665 = "331_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 311
    set_sub_code_object $P4665, $P118
    .const '' $P4666 = "332_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 312
    set_sub_code_object $P4666, $P118
    .const '' $P4667 = "333_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 313
    set_sub_code_object $P4667, $P118
    .const '' $P4668 = "334_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 314
    set_sub_code_object $P4668, $P118
    .const '' $P4669 = "335_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 315
    set_sub_code_object $P4669, $P118
    .const '' $P4670 = "336_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 316
    set_sub_code_object $P4670, $P118
    .const '' $P4671 = "337_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 317
    set_sub_code_object $P4671, $P118
    .const '' $P4672 = "338_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 318
    set_sub_code_object $P4672, $P118
    .const '' $P4673 = "339_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 319
    set_sub_code_object $P4673, $P118
    .const '' $P4674 = "340_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 320
    set_sub_code_object $P4674, $P118
    .const '' $P4675 = "341_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 321
    set_sub_code_object $P4675, $P118
    .const '' $P4676 = "342_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 322
    set_sub_code_object $P4676, $P118
    .const '' $P4677 = "343_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 323
    set_sub_code_object $P4677, $P118
    .const '' $P4678 = "344_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 324
    set_sub_code_object $P4678, $P118
    .const '' $P4679 = "345_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 325
    set_sub_code_object $P4679, $P118
    .const '' $P4680 = "346_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 326
    set_sub_code_object $P4680, $P118
    .const '' $P4681 = "347_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 327
    set_sub_code_object $P4681, $P118
    .const '' $P4682 = "348_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 328
    set_sub_code_object $P4682, $P118
    .const '' $P4683 = "349_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 329
    set_sub_code_object $P4683, $P118
    .const '' $P4684 = "350_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 330
    set_sub_code_object $P4684, $P118
    .const '' $P4685 = "351_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 331
    set_sub_code_object $P4685, $P118
    .const '' $P4686 = "352_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 332
    set_sub_code_object $P4686, $P118
    .const '' $P4687 = "353_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 333
    set_sub_code_object $P4687, $P118
    .const '' $P4688 = "354_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 334
    set_sub_code_object $P4688, $P118
    .const '' $P4689 = "355_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 335
    set_sub_code_object $P4689, $P118
    .const '' $P4690 = "356_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 336
    set_sub_code_object $P4690, $P118
    .const '' $P4691 = "357_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 337
    set_sub_code_object $P4691, $P118
    .const '' $P4692 = "358_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 338
    set_sub_code_object $P4692, $P118
    .const '' $P4693 = "359_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 339
    set_sub_code_object $P4693, $P118
    .const '' $P4694 = "360_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 340
    set_sub_code_object $P4694, $P118
    .const 'LexInfo' $P4695 = "781_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 227
    $P4695."set_static_lexpad_value"("$?PACKAGE", $P118)
    .const 'LexInfo' $P4696 = "781_1337966799.879" 
    $P4696."finish_static_lexpad"()
    .const 'LexInfo' $P4697 = "781_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 227
    $P4697."set_static_lexpad_value"("$?CLASS", $P118)
    .const 'LexInfo' $P4698 = "781_1337966799.879" 
    $P4698."finish_static_lexpad"()
    .const '' $P4699 = "361_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 342
    set_sub_code_object $P4699, $P118
    .const '' $P4700 = "362_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 343
    set_sub_code_object $P4700, $P118
    .const '' $P4701 = "363_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 344
    set_sub_code_object $P4701, $P118
    .const '' $P4702 = "364_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 345
    set_sub_code_object $P4702, $P118
    .const '' $P4703 = "365_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 346
    set_sub_code_object $P4703, $P118
    .const '' $P4704 = "366_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 347
    set_sub_code_object $P4704, $P118
    .const '' $P4705 = "367_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 348
    set_sub_code_object $P4705, $P118
    .const 'LexInfo' $P4706 = "840_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 341
    $P4706."set_static_lexpad_value"("$?PACKAGE", $P118)
    .const 'LexInfo' $P4707 = "840_1337966799.879" 
    $P4707."finish_static_lexpad"()
    .const 'LexInfo' $P4708 = "840_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 341
    $P4708."set_static_lexpad_value"("$?CLASS", $P118)
    .const 'LexInfo' $P4709 = "840_1337966799.879" 
    $P4709."finish_static_lexpad"()
    .const 'LexInfo' $P4710 = "841_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 349
    $P4710."set_static_lexpad_value"("$?PACKAGE", $P118)
    .const 'LexInfo' $P4711 = "841_1337966799.879" 
    $P4711."finish_static_lexpad"()
    .const 'LexInfo' $P4712 = "841_1337966799.879" 
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 349
    $P4712."set_static_lexpad_value"("$?CLASS", $P118)
    .const 'LexInfo' $P4713 = "841_1337966799.879" 
    $P4713."finish_static_lexpad"()
    nqp_get_sc_object $P118, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 0
    set_hll_global "GLOBAL", $P118
.end


.HLL "nqp"

.namespace []
.sub "_block3998"  :anon :subid("843_1337966799.879") :outer("368_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 0
    .const 'Sub' $P4000 = "10_1337966799.879" 
    .const 'Sub' $P4001 = "11_1337966799.879" 
    .const 'Sub' $P4002 = "12_1337966799.879" 
    .const 'Sub' $P4003 = "13_1337966799.879" 
    .const 'Sub' $P4004 = "14_1337966799.879" 
    .const 'Sub' $P4005 = "15_1337966799.879" 
    .const 'Sub' $P4006 = "16_1337966799.879" 
    .const 'Sub' $P4007 = "17_1337966799.879" 
    .const 'Sub' $P4008 = "18_1337966799.879" 
    .const 'Sub' $P4009 = "19_1337966799.879" 
    .const 'Sub' $P4010 = "20_1337966799.879" 
    .const 'Sub' $P4011 = "21_1337966799.879" 
    .const 'Sub' $P4012 = "22_1337966799.879" 
    .const 'Sub' $P4013 = "23_1337966799.879" 
    .const 'Sub' $P4014 = "24_1337966799.879" 
    .const 'Sub' $P4015 = "25_1337966799.879" 
    .const 'Sub' $P4016 = "26_1337966799.879" 
    .const 'Sub' $P4017 = "27_1337966799.879" 
    .const 'Sub' $P4018 = "28_1337966799.879" 
    .const 'Sub' $P4019 = "29_1337966799.879" 
    .const 'Sub' $P4020 = "30_1337966799.879" 
    .const 'Sub' $P4021 = "31_1337966799.879" 
    .const 'Sub' $P4022 = "32_1337966799.879" 
    .const 'Sub' $P4023 = "33_1337966799.879" 
    .const 'Sub' $P4024 = "34_1337966799.879" 
    .const 'Sub' $P4025 = "35_1337966799.879" 
    .const 'Sub' $P4026 = "36_1337966799.879" 
    .const 'Sub' $P4027 = "37_1337966799.879" 
    .const 'Sub' $P4028 = "38_1337966799.879" 
    .const 'Sub' $P4029 = "39_1337966799.879" 
    .const 'Sub' $P4030 = "40_1337966799.879" 
    .const 'Sub' $P4031 = "41_1337966799.879" 
    .const 'Sub' $P4032 = "42_1337966799.879" 
    .const 'Sub' $P4033 = "43_1337966799.879" 
    .const 'Sub' $P4034 = "44_1337966799.879" 
    .const 'Sub' $P4035 = "45_1337966799.879" 
    .const 'Sub' $P4036 = "47_1337966799.879" 
    .const 'Sub' $P4037 = "49_1337966799.879" 
    .const 'Sub' $P4038 = "50_1337966799.879" 
    .const 'Sub' $P4039 = "51_1337966799.879" 
    .const 'Sub' $P4040 = "53_1337966799.879" 
    .const 'Sub' $P4041 = "54_1337966799.879" 
    .const 'Sub' $P4042 = "55_1337966799.879" 
    .const 'Sub' $P4043 = "56_1337966799.879" 
    .const 'Sub' $P4044 = "57_1337966799.879" 
    .const 'Sub' $P4045 = "58_1337966799.879" 
    .const 'Sub' $P4046 = "59_1337966799.879" 
    .const 'Sub' $P4047 = "60_1337966799.879" 
    .const 'Sub' $P4048 = "61_1337966799.879" 
    .const 'Sub' $P4049 = "62_1337966799.879" 
    .const 'Sub' $P4050 = "63_1337966799.879" 
    .const 'Sub' $P4051 = "64_1337966799.879" 
    .const 'Sub' $P4052 = "65_1337966799.879" 
    .const 'Sub' $P4053 = "66_1337966799.879" 
    .const 'Sub' $P4054 = "67_1337966799.879" 
    .const 'Sub' $P4055 = "68_1337966799.879" 
    .const 'Sub' $P4056 = "69_1337966799.879" 
    .const 'Sub' $P4057 = "70_1337966799.879" 
    .const 'Sub' $P4058 = "72_1337966799.879" 
    .const 'Sub' $P4059 = "73_1337966799.879" 
    .const 'Sub' $P4060 = "74_1337966799.879" 
    .const 'Sub' $P4061 = "75_1337966799.879" 
    .const 'Sub' $P4062 = "76_1337966799.879" 
    .const 'Sub' $P4063 = "77_1337966799.879" 
    .const 'Sub' $P4064 = "78_1337966799.879" 
    .const 'Sub' $P4065 = "79_1337966799.879" 
    .const 'Sub' $P4066 = "80_1337966799.879" 
    .const 'Sub' $P4067 = "81_1337966799.879" 
    .const 'Sub' $P4068 = "82_1337966799.879" 
    .const 'Sub' $P4069 = "83_1337966799.879" 
    .const 'Sub' $P4070 = "84_1337966799.879" 
    .const 'Sub' $P4071 = "85_1337966799.879" 
    .const 'Sub' $P4072 = "86_1337966799.879" 
    .const 'Sub' $P4073 = "87_1337966799.879" 
    .const 'Sub' $P4074 = "88_1337966799.879" 
    .const 'Sub' $P4075 = "89_1337966799.879" 
    .const 'Sub' $P4076 = "90_1337966799.879" 
    .const 'Sub' $P4077 = "91_1337966799.879" 
    .const 'Sub' $P4078 = "92_1337966799.879" 
    .const 'Sub' $P4079 = "93_1337966799.879" 
    .const 'Sub' $P4080 = "94_1337966799.879" 
    .const 'Sub' $P4081 = "95_1337966799.879" 
    .const 'Sub' $P4082 = "98_1337966799.879" 
    .const 'Sub' $P4083 = "99_1337966799.879" 
    .const 'Sub' $P4084 = "100_1337966799.879" 
    .const 'Sub' $P4085 = "101_1337966799.879" 
    .const 'Sub' $P4086 = "102_1337966799.879" 
    .const 'Sub' $P4087 = "103_1337966799.879" 
    .const 'Sub' $P4088 = "104_1337966799.879" 
    .const 'Sub' $P4089 = "105_1337966799.879" 
    .const 'Sub' $P4090 = "106_1337966799.879" 
    .const 'Sub' $P4091 = "107_1337966799.879" 
    .const 'Sub' $P4092 = "108_1337966799.879" 
    .const 'Sub' $P4093 = "109_1337966799.879" 
    .const 'Sub' $P4094 = "110_1337966799.879" 
    .const 'Sub' $P4095 = "111_1337966799.879" 
    .const 'Sub' $P4096 = "112_1337966799.879" 
    .const 'Sub' $P4097 = "113_1337966799.879" 
    .const 'Sub' $P4098 = "114_1337966799.879" 
    .const 'Sub' $P4099 = "115_1337966799.879" 
    .const 'Sub' $P4100 = "116_1337966799.879" 
    .const 'Sub' $P4101 = "117_1337966799.879" 
    .const 'Sub' $P4102 = "118_1337966799.879" 
    .const 'Sub' $P4103 = "119_1337966799.879" 
    .const 'Sub' $P4104 = "120_1337966799.879" 
    .const 'Sub' $P4105 = "121_1337966799.879" 
    .const 'Sub' $P4106 = "122_1337966799.879" 
    .const 'Sub' $P4107 = "123_1337966799.879" 
    .const 'Sub' $P4108 = "124_1337966799.879" 
    .const 'Sub' $P4109 = "125_1337966799.879" 
    .const 'Sub' $P4110 = "126_1337966799.879" 
    .const 'Sub' $P4111 = "127_1337966799.879" 
    .const 'Sub' $P4112 = "128_1337966799.879" 
    .const 'Sub' $P4113 = "129_1337966799.879" 
    .const 'Sub' $P4114 = "130_1337966799.879" 
    .const 'Sub' $P4115 = "131_1337966799.879" 
    .const 'Sub' $P4116 = "132_1337966799.879" 
    .const 'Sub' $P4117 = "133_1337966799.879" 
    .const 'Sub' $P4118 = "135_1337966799.879" 
    .const 'Sub' $P4119 = "136_1337966799.879" 
    .const 'Sub' $P4120 = "137_1337966799.879" 
    .const 'Sub' $P4121 = "138_1337966799.879" 
    .const 'Sub' $P4122 = "139_1337966799.879" 
    .const 'Sub' $P4123 = "140_1337966799.879" 
    .const 'Sub' $P4124 = "141_1337966799.879" 
    .const 'Sub' $P4125 = "142_1337966799.879" 
    .const 'Sub' $P4126 = "143_1337966799.879" 
    .const 'Sub' $P4127 = "144_1337966799.879" 
    .const 'Sub' $P4128 = "145_1337966799.879" 
    .const 'Sub' $P4129 = "146_1337966799.879" 
    .const 'Sub' $P4130 = "147_1337966799.879" 
    .const 'Sub' $P4131 = "148_1337966799.879" 
    .const 'Sub' $P4132 = "149_1337966799.879" 
    .const 'Sub' $P4133 = "150_1337966799.879" 
    .const 'Sub' $P4134 = "151_1337966799.879" 
    .const 'Sub' $P4135 = "152_1337966799.879" 
    .const 'Sub' $P4136 = "153_1337966799.879" 
    .const 'Sub' $P4137 = "154_1337966799.879" 
    .const 'Sub' $P4138 = "155_1337966799.879" 
    .const 'Sub' $P4139 = "156_1337966799.879" 
    .const 'Sub' $P4140 = "157_1337966799.879" 
    .const 'Sub' $P4141 = "158_1337966799.879" 
    .const 'Sub' $P4142 = "159_1337966799.879" 
    .const 'Sub' $P4143 = "160_1337966799.879" 
    .const 'Sub' $P4144 = "161_1337966799.879" 
    .const 'Sub' $P4145 = "162_1337966799.879" 
    .const 'Sub' $P4146 = "163_1337966799.879" 
    .const 'Sub' $P4147 = "164_1337966799.879" 
    .const 'Sub' $P4148 = "165_1337966799.879" 
    .const 'Sub' $P4149 = "166_1337966799.879" 
    .const 'Sub' $P4150 = "167_1337966799.879" 
    .const 'Sub' $P4151 = "168_1337966799.879" 
    .const 'Sub' $P4152 = "169_1337966799.879" 
    .const 'Sub' $P4153 = "170_1337966799.879" 
    .const 'Sub' $P4154 = "171_1337966799.879" 
    .const 'Sub' $P4155 = "172_1337966799.879" 
    .const 'Sub' $P4156 = "173_1337966799.879" 
    .const 'Sub' $P4157 = "174_1337966799.879" 
    .const 'Sub' $P4158 = "175_1337966799.879" 
    .const 'Sub' $P4159 = "176_1337966799.879" 
    .const 'Sub' $P4160 = "177_1337966799.879" 
    .const 'Sub' $P4161 = "178_1337966799.879" 
    .const 'Sub' $P4162 = "179_1337966799.879" 
    .const 'Sub' $P4163 = "180_1337966799.879" 
    .const 'Sub' $P4164 = "181_1337966799.879" 
    .const 'Sub' $P4165 = "182_1337966799.879" 
    .const 'Sub' $P4166 = "183_1337966799.879" 
    .const 'Sub' $P4167 = "184_1337966799.879" 
    .const 'Sub' $P4168 = "185_1337966799.879" 
    .const 'Sub' $P4169 = "186_1337966799.879" 
    .const 'Sub' $P4170 = "187_1337966799.879" 
    .const 'Sub' $P4171 = "188_1337966799.879" 
    .const 'Sub' $P4172 = "189_1337966799.879" 
    .const 'Sub' $P4173 = "190_1337966799.879" 
    .const 'Sub' $P4174 = "191_1337966799.879" 
    .const 'Sub' $P4175 = "192_1337966799.879" 
    .const 'Sub' $P4176 = "193_1337966799.879" 
    .const 'Sub' $P4177 = "194_1337966799.879" 
    .const 'Sub' $P4178 = "195_1337966799.879" 
    .const 'Sub' $P4179 = "196_1337966799.879" 
    .const 'Sub' $P4180 = "197_1337966799.879" 
    .const 'Sub' $P4181 = "198_1337966799.879" 
    .const 'Sub' $P4182 = "199_1337966799.879" 
    .const 'Sub' $P4183 = "200_1337966799.879" 
    .const 'Sub' $P4184 = "201_1337966799.879" 
    .const 'Sub' $P4185 = "202_1337966799.879" 
    .const 'Sub' $P4186 = "203_1337966799.879" 
    .const 'Sub' $P4187 = "204_1337966799.879" 
    .const 'Sub' $P4188 = "205_1337966799.879" 
    .const 'Sub' $P4189 = "206_1337966799.879" 
    .const 'Sub' $P4190 = "207_1337966799.879" 
    .const 'Sub' $P4191 = "208_1337966799.879" 
    .const 'Sub' $P4192 = "209_1337966799.879" 
    .const 'Sub' $P4193 = "210_1337966799.879" 
    .const 'Sub' $P4194 = "211_1337966799.879" 
    .const 'Sub' $P4195 = "212_1337966799.879" 
    .const 'Sub' $P4196 = "213_1337966799.879" 
    .const 'Sub' $P4197 = "214_1337966799.879" 
    .const 'Sub' $P4198 = "215_1337966799.879" 
    .const 'Sub' $P4199 = "216_1337966799.879" 
    .const 'Sub' $P4200 = "217_1337966799.879" 
    .const 'Sub' $P4201 = "218_1337966799.879" 
    .const 'Sub' $P4202 = "219_1337966799.879" 
    .const 'Sub' $P4203 = "220_1337966799.879" 
    .const 'Sub' $P4204 = "221_1337966799.879" 
    .const 'Sub' $P4205 = "222_1337966799.879" 
    .const 'Sub' $P4206 = "223_1337966799.879" 
    .const 'Sub' $P4207 = "224_1337966799.879" 
    .const 'Sub' $P4208 = "225_1337966799.879" 
    .const 'Sub' $P4209 = "226_1337966799.879" 
    .const 'Sub' $P4210 = "227_1337966799.879" 
    .const 'Sub' $P4211 = "228_1337966799.879" 
    .const 'Sub' $P4212 = "229_1337966799.879" 
    .const 'Sub' $P4213 = "231_1337966799.879" 
    .const 'Sub' $P4214 = "232_1337966799.879" 
    .const 'Sub' $P4215 = "234_1337966799.879" 
    .const 'Sub' $P4216 = "235_1337966799.879" 
    .const 'Sub' $P4217 = "238_1337966799.879" 
    .const 'Sub' $P4218 = "241_1337966799.879" 
    .const 'Sub' $P4219 = "243_1337966799.879" 
    .const 'Sub' $P4220 = "245_1337966799.879" 
    .const 'Sub' $P4221 = "246_1337966799.879" 
    .const 'Sub' $P4222 = "247_1337966799.879" 
    .const 'Sub' $P4223 = "248_1337966799.879" 
    .const 'Sub' $P4224 = "249_1337966799.879" 
    .const 'Sub' $P4225 = "250_1337966799.879" 
    .const 'Sub' $P4226 = "251_1337966799.879" 
    .const 'Sub' $P4227 = "252_1337966799.879" 
    .const 'Sub' $P4228 = "253_1337966799.879" 
    .const 'Sub' $P4229 = "254_1337966799.879" 
    .const 'Sub' $P4230 = "255_1337966799.879" 
    .const 'Sub' $P4231 = "256_1337966799.879" 
    .const 'Sub' $P4232 = "257_1337966799.879" 
    .const 'Sub' $P4233 = "258_1337966799.879" 
    .const 'Sub' $P4234 = "259_1337966799.879" 
    .const 'Sub' $P4235 = "260_1337966799.879" 
    .const 'Sub' $P4236 = "261_1337966799.879" 
    .const 'Sub' $P4237 = "262_1337966799.879" 
    .const 'Sub' $P4238 = "263_1337966799.879" 
    .const 'Sub' $P4239 = "264_1337966799.879" 
    .const 'Sub' $P4240 = "265_1337966799.879" 
    .const 'Sub' $P4241 = "266_1337966799.879" 
    .const 'Sub' $P4242 = "267_1337966799.879" 
    .const 'Sub' $P4243 = "268_1337966799.879" 
    .const 'Sub' $P4244 = "269_1337966799.879" 
    .const 'Sub' $P4245 = "270_1337966799.879" 
    .const 'Sub' $P4246 = "271_1337966799.879" 
    .const 'Sub' $P4247 = "272_1337966799.879" 
    .const 'Sub' $P4248 = "273_1337966799.879" 
    .const 'Sub' $P4249 = "274_1337966799.879" 
    .const 'Sub' $P4250 = "275_1337966799.879" 
    .const 'Sub' $P4251 = "276_1337966799.879" 
    .const 'Sub' $P4252 = "277_1337966799.879" 
    .const 'Sub' $P4253 = "278_1337966799.879" 
    .const 'Sub' $P4254 = "279_1337966799.879" 
    .const 'Sub' $P4255 = "280_1337966799.879" 
    .const 'Sub' $P4256 = "281_1337966799.879" 
    .const 'Sub' $P4257 = "282_1337966799.879" 
    .const 'Sub' $P4258 = "283_1337966799.879" 
    .const 'Sub' $P4259 = "284_1337966799.879" 
    .const 'Sub' $P4260 = "285_1337966799.879" 
    .const 'Sub' $P4261 = "286_1337966799.879" 
    .const 'Sub' $P4262 = "287_1337966799.879" 
    .const 'Sub' $P4263 = "288_1337966799.879" 
    .const 'Sub' $P4264 = "289_1337966799.879" 
    .const 'Sub' $P4265 = "290_1337966799.879" 
    .const 'Sub' $P4266 = "291_1337966799.879" 
    .const 'Sub' $P4267 = "292_1337966799.879" 
    .const 'Sub' $P4268 = "293_1337966799.879" 
    .const 'Sub' $P4269 = "294_1337966799.879" 
    .const 'Sub' $P4270 = "295_1337966799.879" 
    .const 'Sub' $P4271 = "296_1337966799.879" 
    .const 'Sub' $P4272 = "297_1337966799.879" 
    .const 'Sub' $P4273 = "298_1337966799.879" 
    .const 'Sub' $P4274 = "299_1337966799.879" 
    .const 'Sub' $P4275 = "300_1337966799.879" 
    .const 'Sub' $P4276 = "301_1337966799.879" 
    .const 'Sub' $P4277 = "302_1337966799.879" 
    .const 'Sub' $P4278 = "303_1337966799.879" 
    .const 'Sub' $P4279 = "304_1337966799.879" 
    .const 'Sub' $P4280 = "305_1337966799.879" 
    .const 'Sub' $P4281 = "306_1337966799.879" 
    .const 'Sub' $P4282 = "307_1337966799.879" 
    .const 'Sub' $P4283 = "308_1337966799.879" 
    .const 'Sub' $P4284 = "309_1337966799.879" 
    .const 'Sub' $P4285 = "310_1337966799.879" 
    .const 'Sub' $P4286 = "311_1337966799.879" 
    .const 'Sub' $P4287 = "312_1337966799.879" 
    .const 'Sub' $P4288 = "313_1337966799.879" 
    .const 'Sub' $P4289 = "314_1337966799.879" 
    .const 'Sub' $P4290 = "315_1337966799.879" 
    .const 'Sub' $P4291 = "316_1337966799.879" 
    .const 'Sub' $P4292 = "317_1337966799.879" 
    .const 'Sub' $P4293 = "318_1337966799.879" 
    .const 'Sub' $P4294 = "319_1337966799.879" 
    .const 'Sub' $P4295 = "320_1337966799.879" 
    .const 'Sub' $P4296 = "321_1337966799.879" 
    .const 'Sub' $P4297 = "322_1337966799.879" 
    .const 'Sub' $P4298 = "323_1337966799.879" 
    .const 'Sub' $P4299 = "324_1337966799.879" 
    .const 'Sub' $P4300 = "325_1337966799.879" 
    .const 'Sub' $P4301 = "326_1337966799.879" 
    .const 'Sub' $P4302 = "327_1337966799.879" 
    .const 'Sub' $P4303 = "328_1337966799.879" 
    .const 'Sub' $P4304 = "329_1337966799.879" 
    .const 'Sub' $P4305 = "330_1337966799.879" 
    .const 'Sub' $P4306 = "331_1337966799.879" 
    .const 'Sub' $P4307 = "332_1337966799.879" 
    .const 'Sub' $P4308 = "333_1337966799.879" 
    .const 'Sub' $P4309 = "334_1337966799.879" 
    .const 'Sub' $P4310 = "335_1337966799.879" 
    .const 'Sub' $P4311 = "336_1337966799.879" 
    .const 'Sub' $P4312 = "337_1337966799.879" 
    .const 'Sub' $P4313 = "338_1337966799.879" 
    .const 'Sub' $P4314 = "339_1337966799.879" 
    .const 'Sub' $P4315 = "340_1337966799.879" 
    .const 'Sub' $P4316 = "341_1337966799.879" 
    .const 'Sub' $P4317 = "342_1337966799.879" 
    .const 'Sub' $P4318 = "343_1337966799.879" 
    .const 'Sub' $P4319 = "344_1337966799.879" 
    .const 'Sub' $P4320 = "345_1337966799.879" 
    .const 'Sub' $P4321 = "346_1337966799.879" 
    .const 'Sub' $P4322 = "347_1337966799.879" 
    .const 'Sub' $P4323 = "348_1337966799.879" 
    .const 'Sub' $P4324 = "349_1337966799.879" 
    .const 'Sub' $P4325 = "350_1337966799.879" 
    .const 'Sub' $P4326 = "351_1337966799.879" 
    .const 'Sub' $P4327 = "352_1337966799.879" 
    .const 'Sub' $P4328 = "353_1337966799.879" 
    .const 'Sub' $P4329 = "354_1337966799.879" 
    .const 'Sub' $P4330 = "355_1337966799.879" 
    .const 'Sub' $P4331 = "356_1337966799.879" 
    .const 'Sub' $P4332 = "357_1337966799.879" 
    .const 'Sub' $P4333 = "358_1337966799.879" 
    .const 'Sub' $P4334 = "359_1337966799.879" 
    .const 'Sub' $P4335 = "360_1337966799.879" 
    .const 'Sub' $P4336 = "361_1337966799.879" 
    .const 'Sub' $P4337 = "362_1337966799.879" 
    .const 'Sub' $P4338 = "363_1337966799.879" 
    .const 'Sub' $P4339 = "364_1337966799.879" 
    .const 'Sub' $P4340 = "365_1337966799.879" 
    .const 'Sub' $P4341 = "366_1337966799.879" 
    .const 'Sub' $P4342 = "367_1337966799.879" 
    new $P116, "ResizablePMCArray"
    push $P116, $P4000
    push $P116, $P4001
    push $P116, $P4002
    push $P116, $P4003
    push $P116, $P4004
    push $P116, $P4005
    push $P116, $P4006
    push $P116, $P4007
    push $P116, $P4008
    push $P116, $P4009
    push $P116, $P4010
    push $P116, $P4011
    push $P116, $P4012
    push $P116, $P4013
    push $P116, $P4014
    push $P116, $P4015
    push $P116, $P4016
    push $P116, $P4017
    push $P116, $P4018
    push $P116, $P4019
    push $P116, $P4020
    push $P116, $P4021
    push $P116, $P4022
    push $P116, $P4023
    push $P116, $P4024
    push $P116, $P4025
    push $P116, $P4026
    push $P116, $P4027
    push $P116, $P4028
    push $P116, $P4029
    push $P116, $P4030
    push $P116, $P4031
    push $P116, $P4032
    push $P116, $P4033
    push $P116, $P4034
    push $P116, $P4035
    push $P116, $P4036
    push $P116, $P4037
    push $P116, $P4038
    push $P116, $P4039
    push $P116, $P4040
    push $P116, $P4041
    push $P116, $P4042
    push $P116, $P4043
    push $P116, $P4044
    push $P116, $P4045
    push $P116, $P4046
    push $P116, $P4047
    push $P116, $P4048
    push $P116, $P4049
    push $P116, $P4050
    push $P116, $P4051
    push $P116, $P4052
    push $P116, $P4053
    push $P116, $P4054
    push $P116, $P4055
    push $P116, $P4056
    push $P116, $P4057
    push $P116, $P4058
    push $P116, $P4059
    push $P116, $P4060
    push $P116, $P4061
    push $P116, $P4062
    push $P116, $P4063
    push $P116, $P4064
    push $P116, $P4065
    push $P116, $P4066
    push $P116, $P4067
    push $P116, $P4068
    push $P116, $P4069
    push $P116, $P4070
    push $P116, $P4071
    push $P116, $P4072
    push $P116, $P4073
    push $P116, $P4074
    push $P116, $P4075
    push $P116, $P4076
    push $P116, $P4077
    push $P116, $P4078
    push $P116, $P4079
    push $P116, $P4080
    push $P116, $P4081
    push $P116, $P4082
    push $P116, $P4083
    push $P116, $P4084
    push $P116, $P4085
    push $P116, $P4086
    push $P116, $P4087
    push $P116, $P4088
    push $P116, $P4089
    push $P116, $P4090
    push $P116, $P4091
    push $P116, $P4092
    push $P116, $P4093
    push $P116, $P4094
    push $P116, $P4095
    push $P116, $P4096
    push $P116, $P4097
    push $P116, $P4098
    push $P116, $P4099
    push $P116, $P4100
    push $P116, $P4101
    push $P116, $P4102
    push $P116, $P4103
    push $P116, $P4104
    push $P116, $P4105
    push $P116, $P4106
    push $P116, $P4107
    push $P116, $P4108
    push $P116, $P4109
    push $P116, $P4110
    push $P116, $P4111
    push $P116, $P4112
    push $P116, $P4113
    push $P116, $P4114
    push $P116, $P4115
    push $P116, $P4116
    push $P116, $P4117
    push $P116, $P4118
    push $P116, $P4119
    push $P116, $P4120
    push $P116, $P4121
    push $P116, $P4122
    push $P116, $P4123
    push $P116, $P4124
    push $P116, $P4125
    push $P116, $P4126
    push $P116, $P4127
    push $P116, $P4128
    push $P116, $P4129
    push $P116, $P4130
    push $P116, $P4131
    push $P116, $P4132
    push $P116, $P4133
    push $P116, $P4134
    push $P116, $P4135
    push $P116, $P4136
    push $P116, $P4137
    push $P116, $P4138
    push $P116, $P4139
    push $P116, $P4140
    push $P116, $P4141
    push $P116, $P4142
    push $P116, $P4143
    push $P116, $P4144
    push $P116, $P4145
    push $P116, $P4146
    push $P116, $P4147
    push $P116, $P4148
    push $P116, $P4149
    push $P116, $P4150
    push $P116, $P4151
    push $P116, $P4152
    push $P116, $P4153
    push $P116, $P4154
    push $P116, $P4155
    push $P116, $P4156
    push $P116, $P4157
    push $P116, $P4158
    push $P116, $P4159
    push $P116, $P4160
    push $P116, $P4161
    push $P116, $P4162
    push $P116, $P4163
    push $P116, $P4164
    push $P116, $P4165
    push $P116, $P4166
    push $P116, $P4167
    push $P116, $P4168
    push $P116, $P4169
    push $P116, $P4170
    push $P116, $P4171
    push $P116, $P4172
    push $P116, $P4173
    push $P116, $P4174
    push $P116, $P4175
    push $P116, $P4176
    push $P116, $P4177
    push $P116, $P4178
    push $P116, $P4179
    push $P116, $P4180
    push $P116, $P4181
    push $P116, $P4182
    push $P116, $P4183
    push $P116, $P4184
    push $P116, $P4185
    push $P116, $P4186
    push $P116, $P4187
    push $P116, $P4188
    push $P116, $P4189
    push $P116, $P4190
    push $P116, $P4191
    push $P116, $P4192
    push $P116, $P4193
    push $P116, $P4194
    push $P116, $P4195
    push $P116, $P4196
    push $P116, $P4197
    push $P116, $P4198
    push $P116, $P4199
    push $P116, $P4200
    push $P116, $P4201
    push $P116, $P4202
    push $P116, $P4203
    push $P116, $P4204
    push $P116, $P4205
    push $P116, $P4206
    push $P116, $P4207
    push $P116, $P4208
    push $P116, $P4209
    push $P116, $P4210
    push $P116, $P4211
    push $P116, $P4212
    push $P116, $P4213
    push $P116, $P4214
    push $P116, $P4215
    push $P116, $P4216
    push $P116, $P4217
    push $P116, $P4218
    push $P116, $P4219
    push $P116, $P4220
    push $P116, $P4221
    push $P116, $P4222
    push $P116, $P4223
    push $P116, $P4224
    push $P116, $P4225
    push $P116, $P4226
    push $P116, $P4227
    push $P116, $P4228
    push $P116, $P4229
    push $P116, $P4230
    push $P116, $P4231
    push $P116, $P4232
    push $P116, $P4233
    push $P116, $P4234
    push $P116, $P4235
    push $P116, $P4236
    push $P116, $P4237
    push $P116, $P4238
    push $P116, $P4239
    push $P116, $P4240
    push $P116, $P4241
    push $P116, $P4242
    push $P116, $P4243
    push $P116, $P4244
    push $P116, $P4245
    push $P116, $P4246
    push $P116, $P4247
    push $P116, $P4248
    push $P116, $P4249
    push $P116, $P4250
    push $P116, $P4251
    push $P116, $P4252
    push $P116, $P4253
    push $P116, $P4254
    push $P116, $P4255
    push $P116, $P4256
    push $P116, $P4257
    push $P116, $P4258
    push $P116, $P4259
    push $P116, $P4260
    push $P116, $P4261
    push $P116, $P4262
    push $P116, $P4263
    push $P116, $P4264
    push $P116, $P4265
    push $P116, $P4266
    push $P116, $P4267
    push $P116, $P4268
    push $P116, $P4269
    push $P116, $P4270
    push $P116, $P4271
    push $P116, $P4272
    push $P116, $P4273
    push $P116, $P4274
    push $P116, $P4275
    push $P116, $P4276
    push $P116, $P4277
    push $P116, $P4278
    push $P116, $P4279
    push $P116, $P4280
    push $P116, $P4281
    push $P116, $P4282
    push $P116, $P4283
    push $P116, $P4284
    push $P116, $P4285
    push $P116, $P4286
    push $P116, $P4287
    push $P116, $P4288
    push $P116, $P4289
    push $P116, $P4290
    push $P116, $P4291
    push $P116, $P4292
    push $P116, $P4293
    push $P116, $P4294
    push $P116, $P4295
    push $P116, $P4296
    push $P116, $P4297
    push $P116, $P4298
    push $P116, $P4299
    push $P116, $P4300
    push $P116, $P4301
    push $P116, $P4302
    push $P116, $P4303
    push $P116, $P4304
    push $P116, $P4305
    push $P116, $P4306
    push $P116, $P4307
    push $P116, $P4308
    push $P116, $P4309
    push $P116, $P4310
    push $P116, $P4311
    push $P116, $P4312
    push $P116, $P4313
    push $P116, $P4314
    push $P116, $P4315
    push $P116, $P4316
    push $P116, $P4317
    push $P116, $P4318
    push $P116, $P4319
    push $P116, $P4320
    push $P116, $P4321
    push $P116, $P4322
    push $P116, $P4323
    push $P116, $P4324
    push $P116, $P4325
    push $P116, $P4326
    push $P116, $P4327
    push $P116, $P4328
    push $P116, $P4329
    push $P116, $P4330
    push $P116, $P4331
    push $P116, $P4332
    push $P116, $P4333
    push $P116, $P4334
    push $P116, $P4335
    push $P116, $P4336
    push $P116, $P4337
    push $P116, $P4338
    push $P116, $P4339
    push $P116, $P4340
    push $P116, $P4341
    push $P116, $P4342
    .return ($P116)
.end


.HLL "nqp"

.namespace []
.sub "MAIN"  :subid("369_1337966799.879") :outer("368_1337966799.879")
    .param pmc param_1007
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2911
    .const 'Sub' $P1019 = "370_1337966799.879" 
    capture_lex $P1019
    .lex "@ARGS", param_1007
.annotate 'line', 2913
    new $P100, "Undef"
    set $P1008, $P100
    .lex "$nqpcomp", $P1008
.annotate 'line', 2920
    $P1010 = root_new ['parrot';'ResizablePMCArray']
    set $P1009, $P1010
    .lex "@clo", $P1009
.annotate 'line', 2913
    get_hll_global $P101, "GLOBAL"
    nqp_get_package_through_who $P102, $P101, "NQP"
    get_who $P103, $P102
    set $P104, $P103["Compiler"]
    $P105 = $P104."new"()
    set $P1008, $P105
.annotate 'line', 2914
    set $P101, $P1008
    unless_null $P101, vivify_845
    new $P101, "Undef"
  vivify_845:
    $P101."language"("nqp")
.annotate 'line', 2915
    set $P101, $P1008
    unless_null $P101, vivify_846
    new $P101, "Undef"
  vivify_846:
    get_hll_global $P102, "GLOBAL"
    nqp_get_package_through_who $P103, $P102, "NQP"
    get_who $P104, $P103
    set $P105, $P104["Grammar"]
    $P101."parsegrammar"($P105)
.annotate 'line', 2916
    set $P101, $P1008
    unless_null $P101, vivify_847
    new $P101, "Undef"
  vivify_847:
    get_hll_global $P102, "GLOBAL"
    nqp_get_package_through_who $P103, $P102, "NQP"
    get_who $P104, $P103
    set $P105, $P104["Actions"]
    $P101."parseactions"($P105)
.annotate 'line', 2917
    set $P101, $P1008
    unless_null $P101, vivify_848
    new $P101, "Undef"
  vivify_848:
    $P102 = $P101."config"()
    "hll-config"($P102)
.annotate 'line', 2920
    set $P101, $P1008
    unless_null $P101, vivify_849
    new $P101, "Undef"
  vivify_849:
    $P102 = $P101."commandline_options"()
    set $P1009, $P102
.annotate 'line', 2921
    set $P1011, $P1009
    unless_null $P1011, vivify_850
    $P1011 = root_new ['parrot';'ResizablePMCArray']
  vivify_850:
    $P1011."push"("parsetrace")
.annotate 'line', 2922
    set $P1012, $P1009
    unless_null $P1012, vivify_851
    $P1012 = root_new ['parrot';'ResizablePMCArray']
  vivify_851:
    $P1012."push"("setting=s")
.annotate 'line', 2923
    set $P1013, $P1009
    unless_null $P1013, vivify_852
    $P1013 = root_new ['parrot';'ResizablePMCArray']
  vivify_852:
    $P1013."push"("setting-path=s")
.annotate 'line', 2924
    set $P1014, $P1009
    unless_null $P1014, vivify_853
    $P1014 = root_new ['parrot';'ResizablePMCArray']
  vivify_853:
    $P1014."push"("module-path=s")
.annotate 'line', 2925
    set $P1015, $P1009
    unless_null $P1015, vivify_854
    $P1015 = root_new ['parrot';'ResizablePMCArray']
  vivify_854:
    $P1015."push"("vmlibs=s")
.annotate 'line', 2926
    set $P1016, $P1009
    unless_null $P1016, vivify_855
    $P1016 = root_new ['parrot';'ResizablePMCArray']
  vivify_855:
    $P1016."push"("no-regex-lib")
.annotate 'line', 2927
    set $P1017, $P1009
    unless_null $P1017, vivify_856
    $P1017 = root_new ['parrot';'ResizablePMCArray']
  vivify_856:
    $P1017."push"("old-regex-lib")
.annotate 'line', 2931
    .const 'Sub' $P1019 = "370_1337966799.879" 
    capture_lex $P1019
    $P1019()
.annotate 'line', 2936
    set $P101, $P1008
    unless_null $P101, vivify_857
    new $P101, "Undef"
  vivify_857:
    set $P1027, param_1007
    unless_null $P1027, vivify_858
    $P1027 = root_new ['parrot';'ResizablePMCArray']
  vivify_858:
    $P101."command_line"($P1027, "utf8" :named("encoding"), "ascii iso-8859-1" :named("transcode"))
.annotate 'line', 2938
    set $P101, $P1008
    unless_null $P101, vivify_859
    new $P101, "Undef"
  vivify_859:
    $P102 = $P101."nqpevent"()
.annotate 'line', 2911
    .return ($P102)
.end


.HLL "nqp"

.namespace []
.include "except_types.pasm"
.sub "_block1018"  :anon :subid("370_1337966799.879") :outer("369_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2931
    new $P1022, 'ExceptionHandler'
    set_label $P1022, control_1021
    $P1022."handle_types_except"(.CONTROL_ALL)
    push_eh $P1022
.annotate 'line', 2932
    get_hll_global $P101, "ModuleLoader"
    find_lex $P102, "GLOBALish"
    $P103 = $P101."load_module"("PASTRegex", $P102)
.annotate 'line', 2931
    pop_eh 
    goto skip_handler_1020
  control_1021:
    peek_exception $P1023
    .local pmc exception 
    .get_results (exception) 
    new $P1025, 'Integer'
    set $P1025, 1
    set exception["handled"], $P1025
    set $I1026, exception["handled"]
    eq $I1026, 1, handled_1024
    rethrow exception
  handled_1024:
    finalize $P1023
    .return (exception)
  skip_handler_1020:
    .return ($P103)
.end


.HLL "nqp"

.namespace []
.sub "hll-config"  :subid("371_1337966799.879") :outer("368_1337966799.879")
    .param pmc param_1031
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2942
    .lex "$config", param_1031
.annotate 'line', 2943
    new $P101, "String"
    assign $P101, "2012.05-83-g4fd22b2"
    set $P1032, param_1031
    unless_null $P1032, vivify_860
    $P1032 = root_new ['parrot';'Hash']
    set param_1031, $P1032
  vivify_860:
    set $P1032["version"], $P101
.annotate 'line', 2944
    new $P101, "String"
    assign $P101, "2012-05-25T17:26:39Z"
    set $P1033, param_1031
    unless_null $P1033, vivify_861
    $P1033 = root_new ['parrot';'Hash']
    set param_1031, $P1033
  vivify_861:
    set $P1033["build-date"], $P101
.annotate 'line', 2942
    .return ($P101)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1035"  :subid("372_1337966799.879") :outer("368_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 7
    .const 'Sub' $P1391 = "39_1337966799.879" 
    capture_lex $P1391
    .const 'Sub' $P1376 = "38_1337966799.879" 
    capture_lex $P1376
    .const 'Sub' $P1359 = "37_1337966799.879" 
    capture_lex $P1359
    .const 'Sub' $P1356 = "36_1337966799.879" 
    capture_lex $P1356
    .const 'Sub' $P1353 = "35_1337966799.879" 
    capture_lex $P1353
    .const 'Sub' $P1325 = "34_1337966799.879" 
    capture_lex $P1325
    .const 'Sub' $P1311 = "33_1337966799.879" 
    capture_lex $P1311
    .const 'Sub' $P1273 = "32_1337966799.879" 
    capture_lex $P1273
    .const 'Sub' $P1270 = "31_1337966799.879" 
    capture_lex $P1270
    .const 'Sub' $P1265 = "30_1337966799.879" 
    capture_lex $P1265
    .const 'Sub' $P1260 = "29_1337966799.879" 
    capture_lex $P1260
    .const 'Sub' $P1255 = "28_1337966799.879" 
    capture_lex $P1255
    .const 'Sub' $P1240 = "27_1337966799.879" 
    capture_lex $P1240
    .const 'Sub' $P1232 = "26_1337966799.879" 
    capture_lex $P1232
    .const 'Sub' $P1226 = "25_1337966799.879" 
    capture_lex $P1226
    .const 'Sub' $P1217 = "24_1337966799.879" 
    capture_lex $P1217
    .const 'Sub' $P1200 = "23_1337966799.879" 
    capture_lex $P1200
    .const 'Sub' $P1111 = "22_1337966799.879" 
    capture_lex $P1111
    .const 'Sub' $P1105 = "18_1337966799.879" 
    capture_lex $P1105
    .const 'Sub' $P1098 = "17_1337966799.879" 
    capture_lex $P1098
    .const 'Sub' $P1084 = "16_1337966799.879" 
    capture_lex $P1084
    .const 'Sub' $P1076 = "15_1337966799.879" 
    capture_lex $P1076
    .const 'Sub' $P1065 = "14_1337966799.879" 
    capture_lex $P1065
    .const 'Sub' $P1058 = "13_1337966799.879" 
    capture_lex $P1058
    .const 'Sub' $P1054 = "12_1337966799.879" 
    capture_lex $P1054
    .const 'Sub' $P1051 = "11_1337966799.879" 
    capture_lex $P1051
    .const 'Sub' $P1040 = "10_1337966799.879" 
    capture_lex $P1040
.annotate 'line', 58
    new $P103, "Undef"
    set $P1037, $P103
    .lex "$loader", $P1037
    .lex "$?PACKAGE", $P1038
    .lex "$?CLASS", $P1039
    get_hll_global $P104, "ModuleLoader"
    set $P1037, $P104
.annotate 'line', 570
    .const 'Sub' $P1391 = "39_1337966799.879" 
    newclosure $P1445, $P1391
.annotate 'line', 7
    .return ($P1445)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "push_lexpad" :anon :subid("10_1337966799.879") :outer("372_1337966799.879")
    .param pmc param_1041
    .param pmc param_1042
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 27
    .lex "self", param_1041
    .lex "$/", param_1042
.annotate 'line', 29
    new $P104, "Undef"
    set $P1043, $P104
    .lex "$pad", $P1043
    get_hll_global $P105, "GLOBAL"
    nqp_get_package_through_who $P106, $P105, "PAST"
    get_who $P107, $P106
    set $P108, $P107["Block"]
    get_hll_global $P109, "GLOBAL"
    nqp_get_package_through_who $P110, $P109, "PAST"
    get_who $P111, $P110
    set $P112, $P111["Stmts"]
    $P113 = $P112."new"()
    set $P114, param_1042
    unless_null $P114, vivify_862
    new $P114, "Undef"
  vivify_862:
    $P115 = $P108."new"($P113, $P114 :named("node"))
    set $P1043, $P115
.annotate 'line', 30
    set $P105, param_1041
    nqp_decontainerize $P106, $P105
    nqp_get_sc_object $P107, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 1
    repr_get_attr_obj $P1045, $P106, $P107, "@!BLOCKS", 8
    unless_null $P1045, vivify_863
    $P1045 = root_new ['parrot';'ResizablePMCArray']
  vivify_863:
    set $N100, $P1045
    unless $N100, if_1044_end
.annotate 'line', 31
    set $P108, param_1041
    nqp_decontainerize $P109, $P108
    nqp_get_sc_object $P110, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 1
    repr_get_attr_obj $P1046, $P109, $P110, "@!BLOCKS", 8
    unless_null $P1046, vivify_864
    $P1046 = root_new ['parrot';'ResizablePMCArray']
  vivify_864:
    set $N101, $P1046
    new $P111, 'Float'
    set $P111, $N101
    sub $P112, $P111, 1
    set $I100, $P112
    set $P113, param_1041
    nqp_decontainerize $P114, $P113
    nqp_get_sc_object $P115, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 1
    repr_get_attr_obj $P1047, $P114, $P115, "@!BLOCKS", 8
    unless_null $P1047, vivify_865
    $P1047 = root_new ['parrot';'ResizablePMCArray']
  vivify_865:
    set $P116, $P1047[$I100]
    unless_null $P116, vivify_866
    new $P116, "Undef"
  vivify_866:
    set $P1048, $P1043
    unless_null $P1048, vivify_867
    $P1048 = root_new ['parrot';'Hash']
    set $P1043, $P1048
  vivify_867:
    set $P1048["outer"], $P116
  if_1044_end:
.annotate 'line', 33
    set $P105, $P1043
    unless_null $P105, vivify_868
    new $P105, "Undef"
  vivify_868:
    set $P106, param_1041
    nqp_decontainerize $P107, $P106
    nqp_get_sc_object $P108, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 1
    repr_get_attr_obj $P1049, $P107, $P108, "@!BLOCKS", 8
    unless_null $P1049, vivify_869
    $P1049 = root_new ['parrot';'ResizablePMCArray']
  vivify_869:
    set $N100, $P1049
    set $I100, $N100
    set $P109, param_1041
    nqp_decontainerize $P110, $P109
    nqp_get_sc_object $P111, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 1
    repr_get_attr_obj $P1050, $P110, $P111, "@!BLOCKS", 8
    unless_null $P1050, vivify_870
    $P1050 = root_new ['parrot';'ResizablePMCArray']
    repr_bind_attr_obj $P110, $P111, "@!BLOCKS", 8, $P1050
  vivify_870:
    set $P1050[$I100], $P105
.annotate 'line', 27
    set $P105, $P1043
    unless_null $P105, vivify_871
    new $P105, "Undef"
  vivify_871:
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "pop_lexpad" :anon :subid("11_1337966799.879") :outer("372_1337966799.879")
    .param pmc param_1052
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 38
    .lex "self", param_1052
.annotate 'line', 39
    set $P104, param_1052
    nqp_decontainerize $P105, $P104
    nqp_get_sc_object $P106, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 1
    repr_get_attr_obj $P1053, $P105, $P106, "@!BLOCKS", 8
    unless_null $P1053, vivify_872
    $P1053 = root_new ['parrot';'ResizablePMCArray']
  vivify_872:
    $P107 = $P1053."pop"()
.annotate 'line', 38
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "cur_lexpad" :anon :subid("12_1337966799.879") :outer("372_1337966799.879")
    .param pmc param_1055
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 43
    .lex "self", param_1055
.annotate 'line', 44
    set $P104, param_1055
    nqp_decontainerize $P105, $P104
    nqp_get_sc_object $P106, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 1
    repr_get_attr_obj $P1056, $P105, $P106, "@!BLOCKS", 8
    unless_null $P1056, vivify_873
    $P1056 = root_new ['parrot';'ResizablePMCArray']
  vivify_873:
    set $N100, $P1056
    new $P107, 'Float'
    set $P107, $N100
    sub $P108, $P107, 1
    set $I100, $P108
.annotate 'line', 43
    set $P109, param_1055
    nqp_decontainerize $P110, $P109
    nqp_get_sc_object $P111, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 1
    repr_get_attr_obj $P1057, $P110, $P111, "@!BLOCKS", 8
    unless_null $P1057, vivify_874
    $P1057 = root_new ['parrot';'ResizablePMCArray']
  vivify_874:
    set $P112, $P1057[$I100]
    unless_null $P112, vivify_875
    new $P112, "Undef"
  vivify_875:
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "get_legacy_block_list" :anon :subid("13_1337966799.879") :outer("372_1337966799.879")
    .param pmc param_1059
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 48
    .lex "self", param_1059
.annotate 'line', 49
    $P1061 = root_new ['parrot';'ResizablePMCArray']
    set $P1060, $P1061
    .lex "@x", $P1060
    set $P104, param_1059
    nqp_decontainerize $P105, $P104
    nqp_get_sc_object $P106, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 1
    repr_get_attr_obj $P1062, $P105, $P106, "@!BLOCKS", 8
    unless_null $P1062, vivify_876
    $P1062 = root_new ['parrot';'ResizablePMCArray']
  vivify_876:
    clone $P107, $P1062
    set $P1060, $P107
.annotate 'line', 50
    set $P1063, $P1060
    unless_null $P1063, vivify_877
    $P1063 = root_new ['parrot';'ResizablePMCArray']
  vivify_877:
    $P1063."reverse"()
.annotate 'line', 48
    set $P1064, $P1060
    unless_null $P1064, vivify_878
    $P1064 = root_new ['parrot';'ResizablePMCArray']
  vivify_878:
    .return ($P1064)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "load_setting" :anon :subid("14_1337966799.879") :outer("372_1337966799.879")
    .param pmc param_1068
    .param pmc param_1069
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 61
    .const 'Sub' $P1072 = "373_1337966799.879" 
    capture_lex $P1072
    new $P1067, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P1067, control_1066
    push_eh $P1067
    .lex "self", param_1068
    .lex "$setting_name", param_1069
.annotate 'line', 63
    set $P105, param_1069
    unless_null $P105, vivify_879
    new $P105, "Undef"
  vivify_879:
    set $S100, $P105
    isne $I100, $S100, "NULL"
    if $I100, if_1070
    new $P104, 'Integer'
    set $P104, $I100
    goto if_1070_end
  if_1070:
    .const 'Sub' $P1072 = "373_1337966799.879" 
    capture_lex $P1072
    $P107 = $P1072()
    set $P104, $P107
  if_1070_end:
.annotate 'line', 61
    .return ($P104)
  control_1066:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P105, exception, "payload"
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1071"  :anon :subid("373_1337966799.879") :outer("14_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 67
    new $P106, "Undef"
    set $P1073, $P106
    .lex "$setting", $P1073
.annotate 'line', 68
    find_lex $P107, "$loader"
    unless_null $P107, vivify_880
    new $P107, "Undef"
  vivify_880:
    find_lex $P108, "$setting_name"
    unless_null $P108, vivify_881
    new $P108, "Undef"
  vivify_881:
    $P109 = $P107."load_setting"($P108)
    find_dynamic_lex $P112, "%*COMPILING"
    unless_null $P112, vivify_882
    get_hll_global $P110, "GLOBAL"
    get_who $P111, $P110
    set $P112, $P111["%COMPILING"]
    unless_null $P112, vivify_883
    die "Contextual %*COMPILING not found"
  vivify_883:
    store_dynamic_lex "%*COMPILING", $P112
  vivify_882:
    set $P1074, $P112["%?OPTIONS"]
    unless_null $P1074, vivify_884
    $P1074 = root_new ['parrot';'Hash']
    set $P112["%?OPTIONS"], $P1074
  vivify_884:
    set $P1074["outer_ctx"], $P109
    set $P1073, $P109
.annotate 'line', 71
    find_lex $P107, "self"
    nqp_decontainerize $P108, $P107
    $P109 = $P108."is_precompilation_mode"()
    if $P109, if_1075
.annotate 'line', 89
    find_lex $P110, "self"
    nqp_decontainerize $P111, $P110
    get_hll_global $P112, "GLOBAL"
    nqp_get_package_through_who $P113, $P112, "PAST"
    get_who $P114, $P113
    set $P115, $P114["Op"]
.annotate 'line', 91
    get_hll_global $P116, "GLOBAL"
    nqp_get_package_through_who $P117, $P116, "PAST"
    get_who $P118, $P117
    set $P119, $P118["Var"]
    $P120 = $P119."new"("block" :named("name"), "register" :named("scope"))
.annotate 'line', 92
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "PAST"
    get_who $P123, $P122
    set $P124, $P123["Op"]
.annotate 'line', 94
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P128, $P127["Var"]
    new $P129, "ResizablePMCArray"
    $P130 = $P128."new"("ModuleLoader" :named("name"), $P129 :named("namespace"), "package" :named("scope"))
    find_lex $P131, "$setting_name"
    unless_null $P131, vivify_885
    new $P131, "Undef"
  vivify_885:
    $P132 = $P124."new"($P130, $P131, "callmethod" :named("pasttype"), "load_setting" :named("name"))
.annotate 'line', 92
    $P133 = $P115."new"($P120, $P132, "callmethod" :named("pasttype"), "set_outer_ctx" :named("name"))
.annotate 'line', 89
    $P111."add_fixup_task"($P133 :named("fixup_past"))
.annotate 'line', 87
    goto if_1075_end
  if_1075:
.annotate 'line', 72
    find_lex $P110, "self"
    nqp_decontainerize $P111, $P110
    get_hll_global $P112, "GLOBAL"
    nqp_get_package_through_who $P113, $P112, "PAST"
    get_who $P114, $P113
    set $P115, $P114["Stmts"]
.annotate 'line', 73
    get_hll_global $P116, "GLOBAL"
    nqp_get_package_through_who $P117, $P116, "PAST"
    get_who $P118, $P117
    set $P119, $P118["Op"]
    $P120 = $P119."new"("ModuleLoader.pbc", "load_bytecode vs" :named("pirop"))
.annotate 'line', 76
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "PAST"
    get_who $P123, $P122
    set $P124, $P123["Op"]
.annotate 'line', 78
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P128, $P127["Var"]
    $P129 = $P128."new"("block" :named("name"), "register" :named("scope"))
.annotate 'line', 79
    get_hll_global $P130, "GLOBAL"
    nqp_get_package_through_who $P131, $P130, "PAST"
    get_who $P132, $P131
    set $P133, $P132["Op"]
.annotate 'line', 81
    get_hll_global $P134, "GLOBAL"
    nqp_get_package_through_who $P135, $P134, "PAST"
    get_who $P136, $P135
    set $P137, $P136["Var"]
    new $P138, "ResizablePMCArray"
    $P139 = $P137."new"("ModuleLoader" :named("name"), $P138 :named("namespace"), "package" :named("scope"))
    find_lex $P140, "$setting_name"
    unless_null $P140, vivify_886
    new $P140, "Undef"
  vivify_886:
    $P141 = $P133."new"($P139, $P140, "callmethod" :named("pasttype"), "load_setting" :named("name"))
.annotate 'line', 79
    $P142 = $P124."new"($P129, $P141, "callmethod" :named("pasttype"), "set_outer_ctx" :named("name"))
.annotate 'line', 76
    $P143 = $P115."new"($P120, $P142)
.annotate 'line', 72
    $P111."add_load_dependency_task"($P143 :named("deserialize_past"))
  if_1075_end:
.annotate 'line', 100
    new $P107, "Exception"
    set $P107['type'], .CONTROL_RETURN
    set $P108, $P1073
    unless_null $P108, vivify_887
    new $P108, "Undef"
  vivify_887:
    getattribute $P109, $P108, "lex_pad"
    setattribute $P107, 'payload', $P109
    throw $P107
.annotate 'line', 63
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "load_module" :anon :subid("15_1337966799.879") :outer("372_1337966799.879")
    .param pmc param_1079
    .param pmc param_1080
    .param pmc param_1081
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 106
    new $P1078, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P1078, control_1077
    push_eh $P1078
    .lex "self", param_1079
    .lex "$module_name", param_1080
    .lex "$cur_GLOBALish", param_1081
.annotate 'line', 108
    new $P104, "Undef"
    set $P1082, $P104
    .lex "$module", $P1082
    find_lex $P105, "$loader"
    unless_null $P105, vivify_888
    new $P105, "Undef"
  vivify_888:
    set $P106, param_1080
    unless_null $P106, vivify_889
    new $P106, "Undef"
  vivify_889:
    set $P107, param_1081
    unless_null $P107, vivify_890
    new $P107, "Undef"
  vivify_890:
    $P108 = $P105."load_module"($P106, $P107)
    set $P1082, $P108
.annotate 'line', 111
    set $P105, param_1079
    nqp_decontainerize $P106, $P105
    $P107 = $P106."is_precompilation_mode"()
    unless $P107, if_1083_end
.annotate 'line', 112
    set $P108, param_1079
    nqp_decontainerize $P109, $P108
    get_hll_global $P110, "GLOBAL"
    nqp_get_package_through_who $P111, $P110, "PAST"
    get_who $P112, $P111
    set $P113, $P112["Stmts"]
.annotate 'line', 113
    get_hll_global $P114, "GLOBAL"
    nqp_get_package_through_who $P115, $P114, "PAST"
    get_who $P116, $P115
    set $P117, $P116["Op"]
    $P118 = $P117."new"("ModuleLoader.pbc", "load_bytecode vs" :named("pirop"))
.annotate 'line', 116
    get_hll_global $P119, "GLOBAL"
    nqp_get_package_through_who $P120, $P119, "PAST"
    get_who $P121, $P120
    set $P122, $P121["Op"]
.annotate 'line', 118
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Var"]
    new $P127, "ResizablePMCArray"
    $P128 = $P126."new"("ModuleLoader" :named("name"), $P127 :named("namespace"), "package" :named("scope"))
    set $P129, param_1080
    unless_null $P129, vivify_891
    new $P129, "Undef"
  vivify_891:
    $P130 = $P122."new"($P128, $P129, "callmethod" :named("pasttype"), "load_module" :named("name"))
.annotate 'line', 116
    $P131 = $P113."new"($P118, $P130)
.annotate 'line', 112
    $P109."add_load_dependency_task"($P131 :named("deserialize_past"))
  if_1083_end:
.annotate 'line', 123
    new $P105, "Exception"
    set $P105['type'], .CONTROL_RETURN
    set $P106, $P1082
    unless_null $P106, vivify_892
    new $P106, "Undef"
  vivify_892:
    getattribute $P107, $P106, "lex_pad"
    setattribute $P105, 'payload', $P107
    throw $P105
.annotate 'line', 106
    .return ()
  control_1077:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P105, exception, "payload"
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "install_package_symbol" :anon :subid("16_1337966799.879") :outer("372_1337966799.879")
    .param pmc param_1085
    .param pmc param_1086
    .param pmc param_1087
    .param pmc param_1088
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 128
    .const 'Sub' $P1095 = "374_1337966799.879" 
    capture_lex $P1095
    .lex "self", param_1085
    .lex "$package", param_1086
    .lex "@sym", param_1087
    .lex "$obj", param_1088
.annotate 'line', 130
    new $P104, "Undef"
    set $P1089, $P104
    .lex "$name", $P1089
.annotate 'line', 133
    new $P105, "Undef"
    set $P1090, $P105
    .lex "$target", $P1090
.annotate 'line', 129
    set $P1091, param_1087
    unless_null $P1091, vivify_893
    $P1091 = root_new ['parrot';'ResizablePMCArray']
  vivify_893:
    clone $P106, $P1091
    set param_1087, $P106
.annotate 'line', 130
    set $P1092, param_1087
    unless_null $P1092, vivify_894
    $P1092 = root_new ['parrot';'ResizablePMCArray']
  vivify_894:
    $P106 = $P1092."pop"()
    set $S100, $P106
    new $P107, 'String'
    set $P107, $S100
    set $P1089, $P107
.annotate 'line', 133
    set $P106, param_1086
    unless_null $P106, vivify_895
    new $P106, "Undef"
  vivify_895:
    set $P1090, $P106
.annotate 'line', 134
    set $P1093, param_1087
    unless_null $P1093, vivify_896
    $P1093 = root_new ['parrot';'ResizablePMCArray']
  vivify_896:
    defined $I100, $P1093
    unless $I100, for_undef_897
    iter $P106, $P1093
    new $P108, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P108, loop1097_handler
    push_eh $P108
  loop1097_test:
    unless $P106, loop1097_done
    shift $P107, $P106
  loop1097_redo:
    .const 'Sub' $P1095 = "374_1337966799.879" 
    capture_lex $P1095
    $P1095($P107)
  loop1097_next:
    goto loop1097_test
  loop1097_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P109, exception, 'type'
    eq $P109, .CONTROL_LOOP_NEXT, loop1097_next
    eq $P109, .CONTROL_LOOP_REDO, loop1097_redo
  loop1097_done:
    pop_eh 
  for_undef_897:
.annotate 'line', 137
    set $P106, param_1088
    unless_null $P106, vivify_900
    new $P106, "Undef"
  vivify_900:
    set $P107, $P1089
    unless_null $P107, vivify_901
    new $P107, "Undef"
  vivify_901:
    set $P108, $P1090
    unless_null $P108, vivify_902
    new $P108, "Undef"
    set $P1090, $P108
  vivify_902:
    get_who $P109, $P108
    set $P109[$P107], $P106
.annotate 'line', 128
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1094"  :anon :subid("374_1337966799.879") :outer("16_1337966799.879")
    .param pmc param_1096
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 134
    .lex "$_", param_1096
.annotate 'line', 135
    find_lex $P108, "$target"
    unless_null $P108, vivify_898
    new $P108, "Undef"
  vivify_898:
    find_lex $P109, "$_"
    unless_null $P109, vivify_899
    new $P109, "Undef"
  vivify_899:
    set $S100, $P109
    nqp_get_package_through_who $P110, $P108, $S100
    store_lex "$target", $P110
.annotate 'line', 134
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "install_lexical_symbol" :anon :subid("17_1337966799.879") :outer("372_1337966799.879")
    .param pmc param_1099
    .param pmc param_1100
    .param pmc param_1101
    .param pmc param_1102
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 144
    .lex "self", param_1099
    .lex "$block", param_1100
    .lex "$name", param_1101
    .lex "$obj", param_1102
.annotate 'line', 151
    new $P104, "Undef"
    set $P1103, $P104
    .lex "$fixup", $P1103
.annotate 'line', 146
    set $P105, param_1100
    unless_null $P105, vivify_903
    new $P105, "Undef"
  vivify_903:
    set $P106, param_1101
    unless_null $P106, vivify_904
    new $P106, "Undef"
  vivify_904:
    set $P107, param_1102
    unless_null $P107, vivify_905
    new $P107, "Undef"
  vivify_905:
    $P105."symbol"($P106, "lexical" :named("scope"), $P107 :named("value"))
.annotate 'line', 147
    set $P1104, param_1100
    unless_null $P1104, vivify_906
    $P1104 = root_new ['parrot';'ResizablePMCArray']
  vivify_906:
    set $P105, $P1104[0]
    unless_null $P105, vivify_907
    new $P105, "Undef"
  vivify_907:
    get_hll_global $P106, "GLOBAL"
    nqp_get_package_through_who $P107, $P106, "PAST"
    get_who $P108, $P107
    set $P109, $P108["Var"]
    set $P110, param_1101
    unless_null $P110, vivify_908
    new $P110, "Undef"
  vivify_908:
    $P111 = $P109."new"("lexical" :named("scope"), $P110 :named("name"), 1 :named("isdecl"), 1 :named("directaccess"))
    $P105."push"($P111)
.annotate 'line', 151
    get_hll_global $P105, "GLOBAL"
    nqp_get_package_through_who $P106, $P105, "PAST"
    get_who $P107, $P106
    set $P108, $P107["Stmts"]
.annotate 'line', 152
    get_hll_global $P109, "GLOBAL"
    nqp_get_package_through_who $P110, $P109, "PAST"
    get_who $P111, $P110
    set $P112, $P111["Op"]
.annotate 'line', 154
    get_hll_global $P113, "GLOBAL"
    nqp_get_package_through_who $P114, $P113, "PAST"
    get_who $P115, $P114
    set $P116, $P115["Val"]
    set $P117, param_1100
    unless_null $P117, vivify_909
    new $P117, "Undef"
  vivify_909:
    $P118 = $P116."new"($P117 :named("value"), "LexInfo" :named("returns"))
.annotate 'line', 155
    set $P119, param_1101
    unless_null $P119, vivify_910
    new $P119, "Undef"
  vivify_910:
    set $S100, $P119
    set $P120, param_1099
    nqp_decontainerize $P121, $P120
    set $P122, param_1102
    unless_null $P122, vivify_911
    new $P122, "Undef"
  vivify_911:
    $P123 = $P121."get_slot_past_for_object"($P122)
    $P124 = $P112."new"($P118, $S100, $P123, "callmethod" :named("pasttype"), "set_static_lexpad_value" :named("name"))
.annotate 'line', 159
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P128, $P127["Op"]
.annotate 'line', 161
    get_hll_global $P129, "GLOBAL"
    nqp_get_package_through_who $P130, $P129, "PAST"
    get_who $P131, $P130
    set $P132, $P131["Val"]
    set $P133, param_1100
    unless_null $P133, vivify_912
    new $P133, "Undef"
  vivify_912:
    $P134 = $P132."new"($P133 :named("value"), "LexInfo" :named("returns"))
    $P135 = $P128."new"($P134, "callmethod" :named("pasttype"), "finish_static_lexpad" :named("name"))
.annotate 'line', 159
    $P136 = $P108."new"($P124, $P135)
.annotate 'line', 151
    set $P1103, $P136
.annotate 'line', 164
    set $P105, param_1099
    nqp_decontainerize $P106, $P105
    set $P107, $P1103
    unless_null $P107, vivify_913
    new $P107, "Undef"
  vivify_913:
    set $P108, $P1103
    unless_null $P108, vivify_914
    new $P108, "Undef"
  vivify_914:
    $P109 = $P106."add_fixup_task"($P107 :named("deserialize_past"), $P108 :named("fixup_past"))
.annotate 'line', 144
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "install_package_routine" :anon :subid("18_1337966799.879") :outer("372_1337966799.879")
    .param pmc param_1106
    .param pmc param_1107
    .param pmc param_1108
    .param pmc param_1109
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 169
    .lex "self", param_1106
    .lex "$package", param_1107
    .lex "$name", param_1108
    .lex "$past_block", param_1109
.annotate 'line', 170
    new $P104, "Undef"
    set $P1110, $P104
    .lex "$fixup", $P1110
    get_hll_global $P105, "GLOBAL"
    nqp_get_package_through_who $P106, $P105, "PAST"
    get_who $P107, $P106
    set $P108, $P107["Op"]
.annotate 'line', 172
    get_hll_global $P109, "GLOBAL"
    nqp_get_package_through_who $P110, $P109, "PAST"
    get_who $P111, $P110
    set $P112, $P111["Var"]
.annotate 'line', 174
    get_hll_global $P113, "GLOBAL"
    nqp_get_package_through_who $P114, $P113, "PAST"
    get_who $P115, $P114
    set $P116, $P115["Op"]
    set $P117, param_1106
    nqp_decontainerize $P118, $P117
    set $P119, param_1107
    unless_null $P119, vivify_915
    new $P119, "Undef"
  vivify_915:
    $P120 = $P118."get_slot_past_for_object"($P119)
    $P121 = $P116."new"($P120, "get_who PP" :named("pirop"))
.annotate 'line', 175
    set $P122, param_1108
    unless_null $P122, vivify_916
    new $P122, "Undef"
  vivify_916:
    set $S100, $P122
    $P123 = $P112."new"($P121, $S100, "keyed" :named("scope"))
.annotate 'line', 177
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Val"]
    set $P128, param_1109
    unless_null $P128, vivify_917
    new $P128, "Undef"
  vivify_917:
    $P129 = $P127."new"($P128 :named("value"))
    $P130 = $P108."new"($P123, $P129, "bind_6model" :named("pasttype"))
.annotate 'line', 170
    set $P1110, $P130
.annotate 'line', 179
    set $P105, param_1106
    nqp_decontainerize $P106, $P105
    set $P107, $P1110
    unless_null $P107, vivify_918
    new $P107, "Undef"
  vivify_918:
    set $P108, $P1110
    unless_null $P108, vivify_919
    new $P108, "Undef"
  vivify_919:
    $P109 = $P106."add_fixup_task"($P107 :named("deserialize_past"), $P108 :named("fixup_past"))
.annotate 'line', 169
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "create_code" :anon :subid("22_1337966799.879") :outer("372_1337966799.879")
    .param pmc param_1114
    .param pmc param_1115
    .param pmc param_1116
    .param pmc param_1117
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 184
    .const 'Sub' $P1195 = "379_1337966799.879" 
    capture_lex $P1195
    .const 'Sub' $P1187 = "21_1337966799.879" 
    capture_lex $P1187
    .const 'Sub' $P1180 = "20_1337966799.879" 
    capture_lex $P1180
    .const 'Sub' $P1134 = "19_1337966799.879" 
    capture_lex $P1134
    .const 'Sub' $P1125 = "375_1337966799.879" 
    capture_lex $P1125
    new $P1113, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P1113, control_1112
    push_eh $P1113
    .lex "self", param_1114
    .lex "$past", param_1115
    .lex "$name", param_1116
    .lex "$is_dispatcher", param_1117
.annotate 'line', 186
    new $P104, "Undef"
    set $P1118, $P104
    .lex "$code_type", $P1118
.annotate 'line', 187
    new $P105, "Undef"
    set $P1119, $P105
    .lex "$have_code_type", $P1119
.annotate 'line', 197
    new $P106, "Undef"
    set $P1120, $P106
    .lex "$stub_code", $P1120
.annotate 'line', 233
    new $P107, "Undef"
    set $P1121, $P107
    .lex "$fixups", $P1121
.annotate 'line', 234
    new $P108, "Undef"
    set $P1122, $P108
    .lex "$dummy", $P1122
.annotate 'line', 235
    new $P109, "Undef"
    set $P1123, $P109
    .lex "$code_ref_idx", $P1123
.annotate 'line', 184
    set $P110, $P1118
    unless_null $P110, vivify_920
    new $P110, "Undef"
  vivify_920:
.annotate 'line', 187
    new $P110, "Float"
    assign $P110, 0
    set $P1119, $P110
.annotate 'line', 188
    .const 'Sub' $P1125 = "375_1337966799.879" 
    capture_lex $P1125
    $P1125()
.annotate 'line', 197
    .const 'Sub' $P1134 = "19_1337966799.879" 
    newclosure $P1170, $P1134
    set $P1120, $P1170
.annotate 'line', 233
    get_hll_global $P110, "GLOBAL"
    nqp_get_package_through_who $P111, $P110, "PAST"
    get_who $P112, $P111
    set $P113, $P112["Stmts"]
    $P114 = $P113."new"()
    set $P1121, $P114
.annotate 'line', 184
    set $P110, $P1122
    unless_null $P110, vivify_978
    new $P110, "Undef"
  vivify_978:
    set $P110, $P1123
    unless_null $P110, vivify_979
    new $P110, "Undef"
  vivify_979:
.annotate 'line', 236
    set $P1172, param_1115
    unless_null $P1172, vivify_980
    $P1172 = root_new ['parrot';'Hash']
  vivify_980:
    set $P110, $P1172["compile_time_dummy"]
    unless_null $P110, vivify_981
    new $P110, "Undef"
  vivify_981:
    defined $I100, $P110
    if $I100, if_1171
.annotate 'line', 241
    set $P111, $P1120
    unless_null $P111, vivify_982
    new $P111, "Undef"
  vivify_982:
    nqp_fresh_stub $P112, $P111
    set $P1122, $P112
.annotate 'line', 242
    set $P111, $P1122
    unless_null $P111, vivify_983
    new $P111, "Undef"
  vivify_983:
    set $P112, param_1116
    unless_null $P112, vivify_984
    new $P112, "Undef"
  vivify_984:
    set $S100, $P112
    assign $P111, $S100
.annotate 'line', 245
    set $P111, $P1122
    unless_null $P111, vivify_985
    new $P111, "Undef"
  vivify_985:
    set $P112, $P1122
    unless_null $P112, vivify_986
    new $P112, "Undef"
  vivify_986:
    setprop $P111, "STATIC_CODE_REF", $P112
.annotate 'line', 246
    set $P111, param_1114
    nqp_decontainerize $P112, $P111
    set $P113, $P1122
    unless_null $P113, vivify_987
    new $P113, "Undef"
  vivify_987:
    set $P114, param_1115
    unless_null $P114, vivify_988
    new $P114, "Undef"
  vivify_988:
    $P115 = $P112."add_root_code_ref"($P113, $P114)
    set $P1123, $P115
.annotate 'line', 247
    set $P111, $P1123
    unless_null $P111, vivify_989
    new $P111, "Undef"
  vivify_989:
    set $P112, param_1115
    unless_null $P112, vivify_990
    new $P112, "Undef"
  vivify_990:
    $P113 = $P112."subid"()
    set $P114, param_1114
    nqp_decontainerize $P115, $P114
    nqp_get_sc_object $P116, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 1
    repr_get_attr_obj $P1174, $P115, $P116, "%!code_stub_sc_idx", 11
    unless_null $P1174, vivify_991
    $P1174 = root_new ['parrot';'Hash']
    repr_bind_attr_obj $P115, $P116, "%!code_stub_sc_idx", 11, $P1174
  vivify_991:
    set $P1174[$P113], $P111
.annotate 'line', 248
    set $P111, $P1122
    unless_null $P111, vivify_992
    new $P111, "Undef"
  vivify_992:
    set $P1175, param_1115
    unless_null $P1175, vivify_993
    $P1175 = root_new ['parrot';'Hash']
    set param_1115, $P1175
  vivify_993:
    set $P1175["compile_time_dummy"], $P111
.annotate 'line', 251
    set $P111, $P1122
    unless_null $P111, vivify_994
    new $P111, "Undef"
  vivify_994:
    set $P112, param_1115
    unless_null $P112, vivify_995
    new $P112, "Undef"
  vivify_995:
    setprop $P111, "PAST", $P112
.annotate 'line', 256
    set $P111, $P1119
    unless_null $P111, vivify_996
    new $P111, "Undef"
  vivify_996:
    unless $P111, if_1176_end
.annotate 'line', 257
    set $P112, $P1121
    unless_null $P112, vivify_997
    new $P112, "Undef"
  vivify_997:
    set $P113, param_1115
    unless_null $P113, vivify_998
    new $P113, "Undef"
  vivify_998:
    $P114 = $P113."subid"()
    set $P115, param_1114
    nqp_decontainerize $P116, $P115
    nqp_get_sc_object $P117, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 1
    repr_get_attr_obj $P1177, $P116, $P117, "%!code_object_fixup_list", 10
    unless_null $P1177, vivify_999
    $P1177 = root_new ['parrot';'Hash']
    repr_bind_attr_obj $P116, $P117, "%!code_object_fixup_list", 10, $P1177
  vivify_999:
    set $P1177[$P114], $P112
.annotate 'line', 258
    set $P112, param_1114
    nqp_decontainerize $P113, $P112
    $P114 = $P113."is_precompilation_mode"()
    if $P114, if_1178
.annotate 'line', 264
    set $P115, $P1122
    unless_null $P115, vivify_1000
    new $P115, "Undef"
  vivify_1000:
    .const 'Sub' $P1187 = "21_1337966799.879" 
    newclosure $P1192, $P1187
    setprop $P115, "CLONE_CALLBACK", $P1192
.annotate 'line', 263
    goto if_1178_end
  if_1178:
.annotate 'line', 259
    set $P115, $P1122
    unless_null $P115, vivify_1011
    new $P115, "Undef"
  vivify_1011:
    .const 'Sub' $P1180 = "20_1337966799.879" 
    newclosure $P1185, $P1180
    setprop $P115, "CLONE_CALLBACK", $P1185
  if_1178_end:
  if_1176_end:
.annotate 'line', 239
    goto if_1171_end
  if_1171:
.annotate 'line', 237
    set $P1173, param_1115
    unless_null $P1173, vivify_1016
    $P1173 = root_new ['parrot';'Hash']
  vivify_1016:
    set $P111, $P1173["compile_time_dummy"]
    unless_null $P111, vivify_1017
    new $P111, "Undef"
  vivify_1017:
    set $P1122, $P111
  if_1171_end:
.annotate 'line', 287
    set $P110, param_1114
    nqp_decontainerize $P111, $P110
    set $P112, $P1121
    unless_null $P112, vivify_1018
    new $P112, "Undef"
  vivify_1018:
    $P111."add_fixup_task"($P112 :named("fixup_past"))
.annotate 'line', 291
    set $P111, $P1119
    unless_null $P111, vivify_1019
    new $P111, "Undef"
  vivify_1019:
    if $P111, if_1193
.annotate 'line', 329
    set $P116, $P1121
    unless_null $P116, vivify_1020
    new $P116, "Undef"
  vivify_1020:
    get_hll_global $P117, "GLOBAL"
    nqp_get_package_through_who $P118, $P117, "PAST"
    get_who $P119, $P118
    set $P120, $P119["Op"]
.annotate 'line', 331
    set $P121, param_1114
    nqp_decontainerize $P122, $P121
    set $P123, $P1123
    unless_null $P123, vivify_1021
    new $P123, "Undef"
  vivify_1021:
    $P124 = $P122."get_slot_past_for_code_ref_at"($P123)
.annotate 'line', 332
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P128, $P127["Val"]
    set $P129, param_1115
    unless_null $P129, vivify_1022
    new $P129, "Undef"
  vivify_1022:
    $P130 = $P128."new"($P129 :named("value"))
    $P131 = $P120."new"($P124, $P130, "assign vPP" :named("pirop"))
.annotate 'line', 329
    $P116."push"($P131)
.annotate 'line', 334
    new $P116, "Exception"
    set $P116['type'], .CONTROL_RETURN
    set $P117, $P1122
    unless_null $P117, vivify_1023
    new $P117, "Undef"
  vivify_1023:
    setattribute $P116, 'payload', $P117
    throw $P116
.annotate 'line', 326
    goto if_1193_end
  if_1193:
.annotate 'line', 291
    .const 'Sub' $P1195 = "379_1337966799.879" 
    capture_lex $P1195
    $P115 = $P1195()
    set $P110, $P115
  if_1193_end:
.annotate 'line', 184
    .return ($P110)
  control_1112:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P111, exception, "payload"
    .return ($P111)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1124"  :anon :subid("375_1337966799.879") :outer("22_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 188
    new $P1128, 'ExceptionHandler'
    set_label $P1128, control_1127
    $P1128."handle_types_except"(.CONTROL_ALL)
    push_eh $P1128
.annotate 'line', 189
    find_lex $P110, "self"
    nqp_decontainerize $P111, $P110
    new $P112, "ResizablePMCArray"
    push $P112, "NQPRoutine"
    $P113 = $P111."find_sym"($P112)
    store_lex "$code_type", $P113
.annotate 'line', 190
    find_dynamic_lex $P112, "$*PACKAGE"
    unless_null $P112, vivify_921
    get_hll_global $P110, "GLOBAL"
    get_who $P111, $P110
    set $P112, $P111["$PACKAGE"]
    unless_null $P112, vivify_922
    die "Contextual $*PACKAGE not found"
  vivify_922:
  vivify_921:
    get_how $P113, $P112
    find_dynamic_lex $P116, "$*PACKAGE"
    unless_null $P116, vivify_923
    get_hll_global $P114, "GLOBAL"
    get_who $P115, $P114
    set $P116, $P115["$PACKAGE"]
    unless_null $P116, vivify_924
    die "Contextual $*PACKAGE not found"
  vivify_924:
  vivify_923:
    $S100 = $P113."name"($P116)
    isne $I100, $S100, "NQPRoutine"
    new $P117, 'Integer'
    set $P117, $I100
    store_lex "$have_code_type", $P117
.annotate 'line', 188
    pop_eh 
    goto skip_handler_1126
  control_1127:
    peek_exception $P1129
    .local pmc exception 
    .get_results (exception) 
    new $P1131, 'Integer'
    set $P1131, 1
    set exception["handled"], $P1131
    set $I1132, exception["handled"]
    eq $I1132, 1, handled_1130
    rethrow exception
  handled_1130:
    finalize $P1129
    .return (exception)
  skip_handler_1126:
    .return ($P117)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1133"  :anon :subid("19_1337966799.879") :outer("22_1337966799.879")
    .param pmc param_1135 :slurpy
    .param pmc param_1136 :slurpy :named
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 197
    .const 'Sub' $P1144 = "376_1337966799.879" 
    capture_lex $P1144
    .lex "@args", param_1135
    .lex "%named", param_1136
.annotate 'line', 200
    new $P110, "Undef"
    set $P1137, $P110
    .lex "$nqpcomp", $P1137
.annotate 'line', 201
    new $P111, "Undef"
    set $P1138, $P111
    .lex "$post", $P1138
.annotate 'line', 202
    new $P112, "Undef"
    set $P1139, $P112
    .lex "$pir", $P1139
.annotate 'line', 203
    new $P113, "Undef"
    set $P1140, $P113
    .lex "$compiled", $P1140
.annotate 'line', 206
    new $P114, "Undef"
    set $P1141, $P114
    .lex "$c", $P1141
.annotate 'line', 207
    new $P115, "Undef"
    set $P1142, $P115
    .lex "$i", $P1142
.annotate 'line', 199
    find_lex $P116, "self"
    nqp_decontainerize $P117, $P116
    find_lex $P118, "$past"
    unless_null $P118, vivify_925
    new $P118, "Undef"
  vivify_925:
    $P117."set_nqp_language_defaults"($P118)
.annotate 'line', 200
    compreg $P116, "nqp"
    set $P1137, $P116
.annotate 'line', 201
    set $P116, $P1137
    unless_null $P116, vivify_926
    new $P116, "Undef"
  vivify_926:
    find_lex $P117, "$past"
    unless_null $P117, vivify_927
    new $P117, "Undef"
  vivify_927:
    $P118 = $P116."post"($P117)
    set $P1138, $P118
.annotate 'line', 202
    set $P116, $P1137
    unless_null $P116, vivify_928
    new $P116, "Undef"
  vivify_928:
    set $P117, $P1138
    unless_null $P117, vivify_929
    new $P117, "Undef"
  vivify_929:
    $P118 = $P116."pir"($P117)
    set $P1139, $P118
.annotate 'line', 203
    set $P116, $P1137
    unless_null $P116, vivify_930
    new $P116, "Undef"
  vivify_930:
    set $P117, $P1139
    unless_null $P117, vivify_931
    new $P117, "Undef"
  vivify_931:
    $P118 = $P116."evalpmc"($P117)
    set $P1140, $P118
.annotate 'line', 206
    set $P116, $P1140
    unless_null $P116, vivify_932
    new $P116, "Undef"
  vivify_932:
    elements $I100, $P116
    new $P117, 'Integer'
    set $P117, $I100
    set $P1141, $P117
.annotate 'line', 207
    new $P116, "Float"
    assign $P116, 0
    set $P1142, $P116
.annotate 'line', 208
    new $P119, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P119, loop1167_handler
    push_eh $P119
  loop1167_test:
    set $P116, $P1142
    unless_null $P116, vivify_933
    new $P116, "Undef"
  vivify_933:
    set $N100, $P116
    set $P117, $P1141
    unless_null $P117, vivify_934
    new $P117, "Undef"
  vivify_934:
    set $N101, $P117
    islt $I100, $N100, $N101
    unless $I100, loop1167_done
  loop1167_redo:
    .const 'Sub' $P1144 = "376_1337966799.879" 
    capture_lex $P1144
    $P1144()
  loop1167_next:
    goto loop1167_test
  loop1167_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P121, exception, 'type'
    eq $P121, .CONTROL_LOOP_NEXT, loop1167_next
    eq $P121, .CONTROL_LOOP_REDO, loop1167_redo
  loop1167_done:
    pop_eh 
.annotate 'line', 229
    set $P116, $P1140
    unless_null $P116, vivify_975
    new $P116, "Undef"
  vivify_975:
    set $P1168, param_1135
    unless_null $P1168, vivify_976
    $P1168 = root_new ['parrot';'ResizablePMCArray']
  vivify_976:
    set $P1169, param_1136
    unless_null $P1169, vivify_977
    $P1169 = root_new ['parrot';'Hash']
  vivify_977:
    $P117 = $P116($P1168 :flat, $P1169 :flat)
.annotate 'line', 197
    .return ($P117)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1143"  :anon :subid("376_1337966799.879") :outer("19_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 208
    .const 'Sub' $P1150 = "377_1337966799.879" 
    capture_lex $P1150
.annotate 'line', 209
    new $P118, "Undef"
    set $P1145, $P118
    .lex "$subid", $P1145
    find_lex $P119, "$i"
    unless_null $P119, vivify_935
    new $P119, "Undef"
  vivify_935:
    set $I101, $P119
    find_lex $P1146, "$compiled"
    unless_null $P1146, vivify_936
    $P1146 = root_new ['parrot';'ResizablePMCArray']
  vivify_936:
    set $P120, $P1146[$I101]
    unless_null $P120, vivify_937
    new $P120, "Undef"
  vivify_937:
    $P121 = $P120."get_subid"()
    set $P1145, $P121
.annotate 'line', 210
    set $P122, $P1145
    unless_null $P122, vivify_938
    new $P122, "Undef"
  vivify_938:
    find_lex $P119, "self"
    nqp_decontainerize $P120, $P119
    nqp_get_sc_object $P121, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 1
    repr_get_attr_obj $P1148, $P120, $P121, "%!code_objects_to_fix_up", 9
    unless_null $P1148, vivify_939
    $P1148 = root_new ['parrot';'Hash']
  vivify_939:
    exists $I101, $P1148[$P122]
    unless $I101, if_1147_end
    .const 'Sub' $P1150 = "377_1337966799.879" 
    capture_lex $P1150
    $P1150()
  if_1147_end:
.annotate 'line', 226
    find_lex $P119, "$i"
    unless_null $P119, vivify_974
    new $P119, "Undef"
  vivify_974:
    add $P120, $P119, 1
    store_lex "$i", $P120
.annotate 'line', 208
    .return ($P120)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1149"  :anon :subid("377_1337966799.879") :outer("376_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 210
    .const 'Sub' $P1157 = "378_1337966799.879" 
    capture_lex $P1157
.annotate 'line', 214
    new $P123, "Undef"
    set $P1151, $P123
    .lex "$static", $P1151
.annotate 'line', 223
    new $P124, "Undef"
    set $P1152, $P124
    .lex "$fixup_stmts", $P1152
.annotate 'line', 214
    find_lex $P125, "$subid"
    unless_null $P125, vivify_940
    new $P125, "Undef"
  vivify_940:
    find_lex $P126, "self"
    nqp_decontainerize $P127, $P126
    nqp_get_sc_object $P128, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 1
    repr_get_attr_obj $P1153, $P127, $P128, "%!code_objects_to_fix_up", 9
    unless_null $P1153, vivify_941
    $P1153 = root_new ['parrot';'Hash']
  vivify_941:
    set $P129, $P1153[$P125]
    unless_null $P129, vivify_942
    new $P129, "Undef"
  vivify_942:
    $P130 = $P129."shift"()
    set $P1151, $P130
.annotate 'line', 215
    set $P125, $P1151
    unless_null $P125, vivify_943
    new $P125, "Undef"
  vivify_943:
    find_lex $P126, "$code_type"
    unless_null $P126, vivify_944
    new $P126, "Undef"
  vivify_944:
    find_lex $P127, "$i"
    unless_null $P127, vivify_945
    new $P127, "Undef"
  vivify_945:
    set $I102, $P127
    find_lex $P1154, "$compiled"
    unless_null $P1154, vivify_946
    $P1154 = root_new ['parrot';'ResizablePMCArray']
  vivify_946:
    set $P128, $P1154[$I102]
    unless_null $P128, vivify_947
    new $P128, "Undef"
  vivify_947:
    setattribute $P125, $P126, "$!do", $P128
.annotate 'line', 216
    find_lex $P126, "$subid"
    unless_null $P126, vivify_948
    new $P126, "Undef"
  vivify_948:
    find_lex $P127, "self"
    nqp_decontainerize $P128, $P127
    nqp_get_sc_object $P129, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 1
    repr_get_attr_obj $P1155, $P128, $P129, "%!code_objects_to_fix_up", 9
    unless_null $P1155, vivify_949
    $P1155 = root_new ['parrot';'Hash']
  vivify_949:
    set $P130, $P1155[$P126]
    unless_null $P130, vivify_950
    new $P130, "Undef"
  vivify_950:
    defined $I102, $P130
    unless $I102, for_undef_951
    iter $P125, $P130
    new $P132, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P132, loop1160_handler
    push_eh $P132
  loop1160_test:
    unless $P125, loop1160_done
    shift $P131, $P125
  loop1160_redo:
    .const 'Sub' $P1157 = "378_1337966799.879" 
    capture_lex $P1157
    $P1157($P131)
  loop1160_next:
    goto loop1160_test
  loop1160_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P133, exception, 'type'
    eq $P133, .CONTROL_LOOP_NEXT, loop1160_next
    eq $P133, .CONTROL_LOOP_REDO, loop1160_redo
  loop1160_done:
    pop_eh 
  for_undef_951:
.annotate 'line', 219
    find_lex $P125, "$i"
    unless_null $P125, vivify_957
    new $P125, "Undef"
  vivify_957:
    set $I102, $P125
    find_lex $P1161, "$compiled"
    unless_null $P1161, vivify_958
    $P1161 = root_new ['parrot';'ResizablePMCArray']
  vivify_958:
    set $P126, $P1161[$I102]
    unless_null $P126, vivify_959
    new $P126, "Undef"
  vivify_959:
    find_lex $P127, "$i"
    unless_null $P127, vivify_960
    new $P127, "Undef"
  vivify_960:
    set $I103, $P127
    find_lex $P1162, "$compiled"
    unless_null $P1162, vivify_961
    $P1162 = root_new ['parrot';'ResizablePMCArray']
  vivify_961:
    set $P128, $P1162[$I103]
    unless_null $P128, vivify_962
    new $P128, "Undef"
  vivify_962:
    setprop $P126, "STATIC_CODE_REF", $P128
.annotate 'line', 220
    find_lex $P125, "self"
    nqp_decontainerize $P126, $P125
    find_lex $P127, "$subid"
    unless_null $P127, vivify_963
    new $P127, "Undef"
  vivify_963:
    find_lex $P128, "self"
    nqp_decontainerize $P129, $P128
    nqp_get_sc_object $P130, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 1
    repr_get_attr_obj $P1163, $P129, $P130, "%!code_stub_sc_idx", 11
    unless_null $P1163, vivify_964
    $P1163 = root_new ['parrot';'Hash']
  vivify_964:
    set $P131, $P1163[$P127]
    unless_null $P131, vivify_965
    new $P131, "Undef"
  vivify_965:
    find_lex $P132, "$i"
    unless_null $P132, vivify_966
    new $P132, "Undef"
  vivify_966:
    set $I102, $P132
    find_lex $P1164, "$compiled"
    unless_null $P1164, vivify_967
    $P1164 = root_new ['parrot';'ResizablePMCArray']
  vivify_967:
    set $P133, $P1164[$I102]
    unless_null $P133, vivify_968
    new $P133, "Undef"
  vivify_968:
    $P126."update_root_code_ref"($P131, $P133)
.annotate 'line', 223
    find_lex $P125, "$subid"
    unless_null $P125, vivify_969
    new $P125, "Undef"
  vivify_969:
    find_lex $P126, "self"
    nqp_decontainerize $P127, $P126
    nqp_get_sc_object $P128, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 1
    repr_get_attr_obj $P1165, $P127, $P128, "%!code_object_fixup_list", 10
    unless_null $P1165, vivify_970
    $P1165 = root_new ['parrot';'Hash']
  vivify_970:
    set $P129, $P1165[$P125]
    unless_null $P129, vivify_971
    new $P129, "Undef"
  vivify_971:
    set $P1152, $P129
.annotate 'line', 224
    new $P128, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P128, loop1166_handler
    push_eh $P128
  loop1166_test:
    set $P125, $P1152
    unless_null $P125, vivify_972
    new $P125, "Undef"
  vivify_972:
    $P126 = $P125."list"()
    set $N102, $P126
    unless $N102, loop1166_done
  loop1166_redo:
    set $P127, $P1152
    unless_null $P127, vivify_973
    new $P127, "Undef"
  vivify_973:
    $P127."shift"()
  loop1166_next:
    goto loop1166_test
  loop1166_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P129, exception, 'type'
    eq $P129, .CONTROL_LOOP_NEXT, loop1166_next
    eq $P129, .CONTROL_LOOP_REDO, loop1166_redo
  loop1166_done:
    pop_eh 
.annotate 'line', 210
    .return ($N102)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1156"  :anon :subid("378_1337966799.879") :outer("377_1337966799.879")
    .param pmc param_1158
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 216
    .lex "$_", param_1158
.annotate 'line', 217
    find_lex $P132, "$_"
    unless_null $P132, vivify_952
    new $P132, "Undef"
  vivify_952:
    find_lex $P133, "$code_type"
    unless_null $P133, vivify_953
    new $P133, "Undef"
  vivify_953:
    find_lex $P134, "$i"
    unless_null $P134, vivify_954
    new $P134, "Undef"
  vivify_954:
    set $I103, $P134
    find_lex $P1159, "$compiled"
    unless_null $P1159, vivify_955
    $P1159 = root_new ['parrot';'ResizablePMCArray']
  vivify_955:
    set $P135, $P1159[$I103]
    unless_null $P135, vivify_956
    new $P135, "Undef"
  vivify_956:
    clone $P136, $P135
    setattribute $P132, $P133, "$!do", $P136
.annotate 'line', 216
    .return ($P136)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1186"  :anon :subid("21_1337966799.879") :outer("22_1337966799.879")
    .param pmc param_1188
    .param pmc param_1189
    .param pmc param_1190
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 264
    .lex "$orig", param_1188
    .lex "$clone", param_1189
    .lex "$code_obj", param_1190
.annotate 'line', 266
    find_lex $P116, "self"
    nqp_decontainerize $P117, $P116
    set $P118, param_1190
    unless_null $P118, vivify_1001
    new $P118, "Undef"
  vivify_1001:
    $P117."add_object"($P118)
.annotate 'line', 267
    find_lex $P116, "$fixups"
    unless_null $P116, vivify_1002
    new $P116, "Undef"
  vivify_1002:
    get_hll_global $P117, "GLOBAL"
    nqp_get_package_through_who $P118, $P117, "PAST"
    get_who $P119, $P118
    set $P120, $P119["Op"]
.annotate 'line', 269
    find_lex $P121, "self"
    nqp_decontainerize $P122, $P121
    set $P123, param_1190
    unless_null $P123, vivify_1003
    new $P123, "Undef"
  vivify_1003:
    $P124 = $P122."get_ref"($P123)
.annotate 'line', 270
    find_lex $P125, "self"
    nqp_decontainerize $P126, $P125
    find_lex $P127, "$code_type"
    unless_null $P127, vivify_1004
    new $P127, "Undef"
  vivify_1004:
    $P128 = $P126."get_ref"($P127)
.annotate 'line', 272
    get_hll_global $P129, "GLOBAL"
    nqp_get_package_through_who $P130, $P129, "PAST"
    get_who $P131, $P130
    set $P132, $P131["Op"]
.annotate 'line', 274
    get_hll_global $P133, "GLOBAL"
    nqp_get_package_through_who $P134, $P133, "PAST"
    get_who $P135, $P134
    set $P136, $P135["Op"]
    get_hll_global $P137, "GLOBAL"
    nqp_get_package_through_who $P138, $P137, "PAST"
    get_who $P139, $P138
    set $P140, $P139["Val"]
    find_lex $P141, "$past"
    unless_null $P141, vivify_1005
    new $P141, "Undef"
  vivify_1005:
    $P142 = $P140."new"($P141 :named("value"))
    $P143 = $P136."new"($P142, "clone PP" :named("pirop"))
.annotate 'line', 275
    find_lex $P144, "self"
    nqp_decontainerize $P145, $P144
    set $P146, param_1190
    unless_null $P146, vivify_1006
    new $P146, "Undef"
  vivify_1006:
    $P147 = $P145."get_ref"($P146)
    $P148 = $P132."new"($P143, $P147, "set_sub_code_object 0PP" :named("pirop"))
.annotate 'line', 272
    $P149 = $P120."new"($P124, $P128, "$!do", $P148, "setattribute vPPsP" :named("pirop"))
.annotate 'line', 267
    $P116."push"($P149)
.annotate 'line', 280
    find_lex $P116, "$past"
    unless_null $P116, vivify_1007
    new $P116, "Undef"
  vivify_1007:
    $P117 = $P116."subid"()
    find_lex $P118, "self"
    nqp_decontainerize $P119, $P118
    nqp_get_sc_object $P120, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 1
    repr_get_attr_obj $P1191, $P119, $P120, "%!code_objects_to_fix_up", 9
    unless_null $P1191, vivify_1008
    $P1191 = root_new ['parrot';'Hash']
  vivify_1008:
    set $P121, $P1191[$P117]
    unless_null $P121, vivify_1009
    new $P121, "Undef"
  vivify_1009:
    set $P122, param_1190
    unless_null $P122, vivify_1010
    new $P122, "Undef"
  vivify_1010:
    $P123 = $P121."push"($P122)
.annotate 'line', 264
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1179"  :anon :subid("20_1337966799.879") :outer("22_1337966799.879")
    .param pmc param_1181
    .param pmc param_1182
    .param pmc param_1183
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 259
    .lex "$orig", param_1181
    .lex "$clone", param_1182
    .lex "$code_obj", param_1183
.annotate 'line', 260
    find_lex $P116, "$past"
    unless_null $P116, vivify_1012
    new $P116, "Undef"
  vivify_1012:
    $P117 = $P116."subid"()
    find_lex $P118, "self"
    nqp_decontainerize $P119, $P118
    nqp_get_sc_object $P120, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 1
    repr_get_attr_obj $P1184, $P119, $P120, "%!code_objects_to_fix_up", 9
    unless_null $P1184, vivify_1013
    $P1184 = root_new ['parrot';'Hash']
  vivify_1013:
    set $P121, $P1184[$P117]
    unless_null $P121, vivify_1014
    new $P121, "Undef"
  vivify_1014:
    set $P122, param_1183
    unless_null $P122, vivify_1015
    new $P122, "Undef"
  vivify_1015:
    $P123 = $P121."push"($P122)
.annotate 'line', 259
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1194"  :anon :subid("379_1337966799.879") :outer("22_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 293
    new $P112, "Undef"
    set $P1196, $P112
    .lex "$code_obj", $P1196
.annotate 'line', 297
    new $P113, "Undef"
    set $P1197, $P113
    .lex "$slot", $P1197
.annotate 'line', 293
    find_lex $P114, "$code_type"
    unless_null $P114, vivify_1024
    new $P114, "Undef"
  vivify_1024:
    repr_instance_of $P115, $P114
    set $P1196, $P115
.annotate 'line', 294
    set $P114, $P1196
    unless_null $P114, vivify_1025
    new $P114, "Undef"
  vivify_1025:
    find_lex $P115, "$code_type"
    unless_null $P115, vivify_1026
    new $P115, "Undef"
  vivify_1026:
    find_lex $P116, "$dummy"
    unless_null $P116, vivify_1027
    new $P116, "Undef"
  vivify_1027:
    setattribute $P114, $P115, "$!do", $P116
.annotate 'line', 295
    find_lex $P114, "$is_dispatcher"
    unless_null $P114, vivify_1028
    new $P114, "Undef"
  vivify_1028:
    unless $P114, if_1198_end
    set $P115, $P1196
    unless_null $P115, vivify_1029
    new $P115, "Undef"
  vivify_1029:
    find_lex $P116, "$code_type"
    unless_null $P116, vivify_1030
    new $P116, "Undef"
  vivify_1030:
    new $P117, "ResizablePMCArray"
    setattribute $P115, $P116, "$!dispatchees", $P117
  if_1198_end:
.annotate 'line', 297
    find_lex $P114, "self"
    nqp_decontainerize $P115, $P114
    set $P116, $P1196
    unless_null $P116, vivify_1031
    new $P116, "Undef"
  vivify_1031:
    $P117 = $P115."add_object"($P116)
    set $P1197, $P117
.annotate 'line', 300
    find_lex $P114, "self"
    nqp_decontainerize $P115, $P114
.annotate 'line', 301
    get_hll_global $P116, "GLOBAL"
    nqp_get_package_through_who $P117, $P116, "PAST"
    get_who $P118, $P117
    set $P119, $P118["Op"]
.annotate 'line', 303
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P122, $P121
    set $P123, $P122["Val"]
    find_lex $P124, "$past"
    unless_null $P124, vivify_1032
    new $P124, "Undef"
  vivify_1032:
    $P125 = $P123."new"($P124 :named("value"))
.annotate 'line', 304
    find_lex $P126, "self"
    nqp_decontainerize $P127, $P126
    set $P128, $P1196
    unless_null $P128, vivify_1033
    new $P128, "Undef"
  vivify_1033:
    $P129 = $P127."get_ref"($P128)
    $P130 = $P119."new"($P125, $P129, "set_sub_code_object vPP" :named("pirop"))
.annotate 'line', 300
    $P115."add_fixup_task"($P130 :named("deserialize_past"))
.annotate 'line', 308
    find_lex $P114, "$fixups"
    unless_null $P114, vivify_1034
    new $P114, "Undef"
  vivify_1034:
    get_hll_global $P115, "GLOBAL"
    nqp_get_package_through_who $P116, $P115, "PAST"
    get_who $P117, $P116
    set $P118, $P117["Op"]
.annotate 'line', 310
    find_lex $P119, "self"
    nqp_decontainerize $P120, $P119
    set $P121, $P1196
    unless_null $P121, vivify_1035
    new $P121, "Undef"
  vivify_1035:
    $P122 = $P120."get_ref"($P121)
.annotate 'line', 311
    find_lex $P123, "self"
    nqp_decontainerize $P124, $P123
    find_lex $P125, "$code_type"
    unless_null $P125, vivify_1036
    new $P125, "Undef"
  vivify_1036:
    $P126 = $P124."get_ref"($P125)
.annotate 'line', 313
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P128, $P127, "PAST"
    get_who $P129, $P128
    set $P130, $P129["Val"]
    find_lex $P131, "$past"
    unless_null $P131, vivify_1037
    new $P131, "Undef"
  vivify_1037:
    $P132 = $P130."new"($P131 :named("value"))
    $P133 = $P118."new"($P122, $P126, "$!do", $P132, "setattribute vPPsP" :named("pirop"))
.annotate 'line', 308
    $P114."push"($P133)
.annotate 'line', 315
    find_lex $P114, "$fixups"
    unless_null $P114, vivify_1038
    new $P114, "Undef"
  vivify_1038:
    get_hll_global $P115, "GLOBAL"
    nqp_get_package_through_who $P116, $P115, "PAST"
    get_who $P117, $P116
    set $P118, $P117["Op"]
.annotate 'line', 317
    get_hll_global $P119, "GLOBAL"
    nqp_get_package_through_who $P120, $P119, "PAST"
    get_who $P121, $P120
    set $P122, $P121["Val"]
    find_lex $P123, "$past"
    unless_null $P123, vivify_1039
    new $P123, "Undef"
  vivify_1039:
    $P124 = $P122."new"($P123 :named("value"))
.annotate 'line', 318
    find_lex $P125, "self"
    nqp_decontainerize $P126, $P125
    set $P127, $P1196
    unless_null $P127, vivify_1040
    new $P127, "Undef"
  vivify_1040:
    $P128 = $P126."get_ref"($P127)
    $P129 = $P118."new"($P124, $P128, "set_sub_code_object vPP" :named("pirop"))
.annotate 'line', 315
    $P114."push"($P129)
.annotate 'line', 322
    set $P114, $P1196
    unless_null $P114, vivify_1041
    new $P114, "Undef"
  vivify_1041:
    new $P115, "ResizablePMCArray"
    push $P115, $P114
    find_lex $P116, "$past"
    unless_null $P116, vivify_1042
    new $P116, "Undef"
  vivify_1042:
    $P117 = $P116."subid"()
    find_lex $P118, "self"
    nqp_decontainerize $P119, $P118
    nqp_get_sc_object $P120, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 1
    repr_get_attr_obj $P1199, $P119, $P120, "%!code_objects_to_fix_up", 9
    unless_null $P1199, vivify_1043
    $P1199 = root_new ['parrot';'Hash']
    repr_bind_attr_obj $P119, $P120, "%!code_objects_to_fix_up", 9, $P1199
  vivify_1043:
    set $P1199[$P117], $P115
.annotate 'line', 291
    set $P114, $P1196
    unless_null $P114, vivify_1044
    new $P114, "Undef"
  vivify_1044:
    .return ($P114)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "pkg_create_mo" :anon :subid("23_1337966799.879") :outer("372_1337966799.879")
    .param pmc param_1203
    .param pmc param_1204
    .param pmc param_1205 :optional :named("name")
    .param int has_param_1205 :opt_flag
    .param pmc param_1206 :optional :named("repr")
    .param int has_param_1206 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 340
    new $P1202, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P1202, control_1201
    push_eh $P1202
    .lex "self", param_1203
    .lex "$how", param_1204
    if has_param_1205, optparam_1045
    new $P104, "Undef"
    set param_1205, $P104
  optparam_1045:
    .lex "$name", param_1205
    if has_param_1206, optparam_1046
    new $P105, "Undef"
    set param_1206, $P105
  optparam_1046:
    .lex "$repr", param_1206
.annotate 'line', 342
    $P1208 = root_new ['parrot';'Hash']
    set $P1207, $P1208
    .lex "%args", $P1207
.annotate 'line', 345
    new $P106, "Undef"
    set $P1209, $P106
    .lex "$mo", $P1209
.annotate 'line', 346
    new $P107, "Undef"
    set $P1210, $P107
    .lex "$slot", $P1210
.annotate 'line', 340
    set $P1211, $P1207
    unless_null $P1211, vivify_1047
    $P1211 = root_new ['parrot';'Hash']
  vivify_1047:
.annotate 'line', 343
    set $P108, param_1205
    unless_null $P108, vivify_1048
    new $P108, "Undef"
  vivify_1048:
    defined $I100, $P108
    unless $I100, if_1212_end
    set $P109, param_1205
    unless_null $P109, vivify_1049
    new $P109, "Undef"
  vivify_1049:
    set $P1213, $P1207
    unless_null $P1213, vivify_1050
    $P1213 = root_new ['parrot';'Hash']
    set $P1207, $P1213
  vivify_1050:
    set $P1213["name"], $P109
  if_1212_end:
.annotate 'line', 344
    set $P108, param_1206
    unless_null $P108, vivify_1051
    new $P108, "Undef"
  vivify_1051:
    defined $I100, $P108
    unless $I100, if_1214_end
    set $P109, param_1206
    unless_null $P109, vivify_1052
    new $P109, "Undef"
  vivify_1052:
    set $P1215, $P1207
    unless_null $P1215, vivify_1053
    $P1215 = root_new ['parrot';'Hash']
    set $P1207, $P1215
  vivify_1053:
    set $P1215["repr"], $P109
  if_1214_end:
.annotate 'line', 345
    set $P108, param_1204
    unless_null $P108, vivify_1054
    new $P108, "Undef"
  vivify_1054:
    set $P1216, $P1207
    unless_null $P1216, vivify_1055
    $P1216 = root_new ['parrot';'Hash']
  vivify_1055:
    $P109 = $P108."new_type"($P1216 :flat)
    set $P1209, $P109
.annotate 'line', 346
    set $P108, param_1203
    nqp_decontainerize $P109, $P108
    set $P110, $P1209
    unless_null $P110, vivify_1056
    new $P110, "Undef"
  vivify_1056:
    $P111 = $P109."add_object"($P110)
    set $P1210, $P111
.annotate 'line', 349
    new $P108, "Exception"
    set $P108['type'], .CONTROL_RETURN
    set $P109, $P1209
    unless_null $P109, vivify_1057
    new $P109, "Undef"
  vivify_1057:
    setattribute $P108, 'payload', $P109
    throw $P108
.annotate 'line', 340
    .return ()
  control_1201:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P108, exception, "payload"
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "pkg_add_attribute" :anon :subid("24_1337966799.879") :outer("372_1337966799.879")
    .param pmc param_1218
    .param pmc param_1219
    .param pmc param_1220
    .param pmc param_1221
    .param pmc param_1222
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 357
    .lex "self", param_1218
    .lex "$obj", param_1219
    .lex "$meta_attr", param_1220
    .lex "%lit_args", param_1221
    .lex "%obj_args", param_1222
.annotate 'line', 358
    new $P104, "Undef"
    set $P1223, $P104
    .lex "$attr", $P1223
    set $P105, param_1220
    unless_null $P105, vivify_1058
    new $P105, "Undef"
  vivify_1058:
    set $P1224, param_1221
    unless_null $P1224, vivify_1059
    $P1224 = root_new ['parrot';'Hash']
  vivify_1059:
    set $P1225, param_1222
    unless_null $P1225, vivify_1060
    $P1225 = root_new ['parrot';'Hash']
  vivify_1060:
    $P106 = $P105."new"($P1224 :flat, $P1225 :flat)
    set $P1223, $P106
.annotate 'line', 359
    set $P105, param_1219
    unless_null $P105, vivify_1061
    new $P105, "Undef"
  vivify_1061:
    get_how $P106, $P105
    set $P107, param_1219
    unless_null $P107, vivify_1062
    new $P107, "Undef"
  vivify_1062:
    set $P108, $P1223
    unless_null $P108, vivify_1063
    new $P108, "Undef"
  vivify_1063:
    $P109 = $P106."add_attribute"($P107, $P108)
.annotate 'line', 357
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "pkg_add_method" :anon :subid("25_1337966799.879") :outer("372_1337966799.879")
    .param pmc param_1227
    .param pmc param_1228
    .param pmc param_1229
    .param pmc param_1230
    .param pmc param_1231
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 363
    .lex "self", param_1227
    .lex "$obj", param_1228
    .lex "$meta_method_name", param_1229
    .lex "$name", param_1230
    .lex "$code", param_1231
.annotate 'line', 364
    set $P104, param_1228
    unless_null $P104, vivify_1064
    new $P104, "Undef"
  vivify_1064:
    get_how $P105, $P104
    set $P106, param_1228
    unless_null $P106, vivify_1065
    new $P106, "Undef"
  vivify_1065:
    set $P107, param_1230
    unless_null $P107, vivify_1066
    new $P107, "Undef"
  vivify_1066:
    set $P108, param_1231
    unless_null $P108, vivify_1067
    new $P108, "Undef"
  vivify_1067:
    set $P109, param_1229
    unless_null $P109, vivify_1068
    new $P109, "Undef"
  vivify_1068:
    set $S100, $P109
    $P110 = $P105.$S100($P106, $P107, $P108)
.annotate 'line', 363
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "set_routine_signature" :anon :subid("26_1337966799.879") :outer("372_1337966799.879")
    .param pmc param_1233
    .param pmc param_1234
    .param pmc param_1235
    .param pmc param_1236
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 368
    .lex "self", param_1233
    .lex "$code_obj", param_1234
    .lex "$types", param_1235
    .lex "$definednesses", param_1236
.annotate 'line', 369
    new $P104, "Undef"
    set $P1237, $P104
    .lex "$sig_type", $P1237
.annotate 'line', 370
    new $P105, "Undef"
    set $P1238, $P105
    .lex "$code_type", $P1238
.annotate 'line', 371
    new $P106, "Undef"
    set $P1239, $P106
    .lex "$sig_obj", $P1239
.annotate 'line', 369
    set $P107, param_1233
    nqp_decontainerize $P108, $P107
    new $P109, "ResizablePMCArray"
    push $P109, "NQPSignature"
    $P110 = $P108."find_sym"($P109)
    set $P1237, $P110
.annotate 'line', 370
    set $P107, param_1233
    nqp_decontainerize $P108, $P107
    new $P109, "ResizablePMCArray"
    push $P109, "NQPRoutine"
    $P110 = $P108."find_sym"($P109)
    set $P1238, $P110
.annotate 'line', 371
    set $P107, $P1237
    unless_null $P107, vivify_1069
    new $P107, "Undef"
  vivify_1069:
    repr_instance_of $P108, $P107
    set $P1239, $P108
.annotate 'line', 372
    set $P107, $P1239
    unless_null $P107, vivify_1070
    new $P107, "Undef"
  vivify_1070:
    set $P108, $P1237
    unless_null $P108, vivify_1071
    new $P108, "Undef"
  vivify_1071:
    set $P109, param_1235
    unless_null $P109, vivify_1072
    new $P109, "Undef"
  vivify_1072:
    setattribute $P107, $P108, "$!types", $P109
.annotate 'line', 373
    set $P107, $P1239
    unless_null $P107, vivify_1073
    new $P107, "Undef"
  vivify_1073:
    set $P108, $P1237
    unless_null $P108, vivify_1074
    new $P108, "Undef"
  vivify_1074:
    set $P109, param_1236
    unless_null $P109, vivify_1075
    new $P109, "Undef"
  vivify_1075:
    setattribute $P107, $P108, "$!definednesses", $P109
.annotate 'line', 374
    set $P107, param_1234
    unless_null $P107, vivify_1076
    new $P107, "Undef"
  vivify_1076:
    set $P108, $P1238
    unless_null $P108, vivify_1077
    new $P108, "Undef"
  vivify_1077:
    set $P109, $P1239
    unless_null $P109, vivify_1078
    new $P109, "Undef"
  vivify_1078:
    setattribute $P107, $P108, "$!signature", $P109
.annotate 'line', 368
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "set_routine_signature_on_parrot_sub" :anon :subid("27_1337966799.879") :outer("372_1337966799.879")
    .param pmc param_1241
    .param pmc param_1242
    .param pmc param_1243
    .param pmc param_1244
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 378
    .const 'Sub' $P1250 = "380_1337966799.879" 
    capture_lex $P1250
    .lex "self", param_1241
    .lex "$routine", param_1242
    .lex "$types", param_1243
    .lex "$definednesses", param_1244
.annotate 'line', 380
    new $P104, "Undef"
    set $P1245, $P104
    .lex "$sig_type", $P1245
.annotate 'line', 381
    new $P105, "Undef"
    set $P1246, $P105
    .lex "$sig_obj", $P1246
.annotate 'line', 384
    new $P106, "Undef"
    set $P1247, $P106
    .lex "$slot", $P1247
.annotate 'line', 380
    set $P107, param_1241
    nqp_decontainerize $P108, $P107
    new $P109, "ResizablePMCArray"
    push $P109, "NQPSignature"
    $P110 = $P108."find_sym"($P109)
    set $P1245, $P110
.annotate 'line', 381
    set $P107, $P1245
    unless_null $P107, vivify_1079
    new $P107, "Undef"
  vivify_1079:
    repr_instance_of $P108, $P107
    set $P1246, $P108
.annotate 'line', 382
    set $P107, $P1246
    unless_null $P107, vivify_1080
    new $P107, "Undef"
  vivify_1080:
    set $P108, $P1245
    unless_null $P108, vivify_1081
    new $P108, "Undef"
  vivify_1081:
    set $P109, param_1243
    unless_null $P109, vivify_1082
    new $P109, "Undef"
  vivify_1082:
    setattribute $P107, $P108, "$!types", $P109
.annotate 'line', 383
    set $P107, $P1246
    unless_null $P107, vivify_1083
    new $P107, "Undef"
  vivify_1083:
    set $P108, $P1245
    unless_null $P108, vivify_1084
    new $P108, "Undef"
  vivify_1084:
    set $P109, param_1244
    unless_null $P109, vivify_1085
    new $P109, "Undef"
  vivify_1085:
    setattribute $P107, $P108, "$!definednesses", $P109
.annotate 'line', 384
    set $P107, param_1241
    nqp_decontainerize $P108, $P107
    set $P109, $P1246
    unless_null $P109, vivify_1086
    new $P109, "Undef"
  vivify_1086:
    $P110 = $P108."add_object"($P109)
    set $P1247, $P110
.annotate 'line', 386
    set $P108, param_1241
    nqp_decontainerize $P109, $P108
    $P110 = $P109."is_precompilation_mode"()
    if $P110, if_1248
.annotate 'line', 393
    .const 'Sub' $P1250 = "380_1337966799.879" 
    capture_lex $P1250
    $P112 = $P1250()
    set $P107, $P112
.annotate 'line', 386
    goto if_1248_end
  if_1248:
.annotate 'line', 387
    set $P111, param_1241
    nqp_decontainerize $P112, $P111
    get_hll_global $P113, "GLOBAL"
    nqp_get_package_through_who $P114, $P113, "PAST"
    get_who $P115, $P114
    set $P116, $P115["Op"]
.annotate 'line', 389
    get_hll_global $P117, "GLOBAL"
    nqp_get_package_through_who $P118, $P117, "PAST"
    get_who $P119, $P118
    set $P120, $P119["Val"]
    set $P121, param_1242
    unless_null $P121, vivify_1096
    new $P121, "Undef"
  vivify_1096:
    $P122 = $P120."new"($P121 :named("value"))
.annotate 'line', 390
    set $P123, param_1241
    nqp_decontainerize $P124, $P123
    set $P125, $P1246
    unless_null $P125, vivify_1097
    new $P125, "Undef"
  vivify_1097:
    $P126 = $P124."get_ref"($P125)
    $P127 = $P116."new"($P122, $P126, "set_sub_multisig vPP" :named("pirop"))
.annotate 'line', 387
    $P128 = $P112."add_fixup_task"($P127 :named("deserialize_past"))
.annotate 'line', 386
    set $P107, $P128
  if_1248_end:
.annotate 'line', 378
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1249"  :anon :subid("380_1337966799.879") :outer("27_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 396
    new $P111, "Undef"
    set $P1251, $P111
    .lex "$fixup", $P1251
    get_hll_global $P112, "GLOBAL"
    nqp_get_package_through_who $P113, $P112, "PAST"
    get_who $P114, $P113
    set $P115, $P114["Op"]
    find_lex $P116, "self"
    nqp_decontainerize $P117, $P116
    find_lex $P118, "$sig_obj"
    unless_null $P118, vivify_1087
    new $P118, "Undef"
  vivify_1087:
    $P119 = $P117."get_ref"($P118)
    $P120 = $P115."new"($P119, "set_sub_multisig vPP" :named("pirop"))
    set $P1251, $P120
.annotate 'line', 397
    find_lex $P1253, "$routine"
    unless_null $P1253, vivify_1088
    $P1253 = root_new ['parrot';'Hash']
  vivify_1088:
    set $P112, $P1253["compile_time_dummy"]
    unless_null $P112, vivify_1089
    new $P112, "Undef"
  vivify_1089:
    defined $I100, $P112
    if $I100, if_1252
.annotate 'line', 401
    set $P113, $P1251
    unless_null $P113, vivify_1090
    new $P113, "Undef"
  vivify_1090:
    get_hll_global $P114, "GLOBAL"
    nqp_get_package_through_who $P115, $P114, "PAST"
    get_who $P116, $P115
    set $P117, $P116["Val"]
    find_lex $P118, "$routine"
    unless_null $P118, vivify_1091
    new $P118, "Undef"
  vivify_1091:
    $P119 = $P117."new"($P118 :named("value"))
    $P113."unshift"($P119)
.annotate 'line', 400
    goto if_1252_end
  if_1252:
.annotate 'line', 398
    set $P113, $P1251
    unless_null $P113, vivify_1092
    new $P113, "Undef"
  vivify_1092:
    find_lex $P114, "self"
    nqp_decontainerize $P115, $P114
    find_lex $P1254, "$routine"
    unless_null $P1254, vivify_1093
    $P1254 = root_new ['parrot';'Hash']
  vivify_1093:
    set $P116, $P1254["compile_time_dummy"]
    unless_null $P116, vivify_1094
    new $P116, "Undef"
  vivify_1094:
    $P117 = $P115."get_slot_past_for_object"($P116)
    $P113."unshift"($P117)
  if_1252_end:
.annotate 'line', 403
    find_lex $P112, "self"
    nqp_decontainerize $P113, $P112
    set $P114, $P1251
    unless_null $P114, vivify_1095
    new $P114, "Undef"
  vivify_1095:
    $P115 = $P113."add_fixup_task"($P114 :named("fixup_past"))
.annotate 'line', 393
    .return ($P115)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "pkg_set_body_block" :anon :subid("28_1337966799.879") :outer("372_1337966799.879")
    .param pmc param_1256
    .param pmc param_1257
    .param pmc param_1258
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 408
    .lex "self", param_1256
    .lex "$obj", param_1257
    .lex "$body_past", param_1258
.annotate 'line', 410
    new $P104, "Undef"
    set $P1259, $P104
    .lex "$body_code_obj", $P1259
    set $P105, param_1256
    nqp_decontainerize $P106, $P105
    set $P107, param_1258
    unless_null $P107, vivify_1098
    new $P107, "Undef"
  vivify_1098:
    set $P108, param_1258
    unless_null $P108, vivify_1099
    new $P108, "Undef"
  vivify_1099:
    $P109 = $P108."name"()
    $P110 = $P106."create_code"($P107, $P109, 0)
    set $P1259, $P110
.annotate 'line', 413
    set $P105, param_1257
    unless_null $P105, vivify_1100
    new $P105, "Undef"
  vivify_1100:
    get_how $P106, $P105
    set $P107, param_1257
    unless_null $P107, vivify_1101
    new $P107, "Undef"
  vivify_1101:
    set $P108, $P1259
    unless_null $P108, vivify_1102
    new $P108, "Undef"
  vivify_1102:
    $P109 = $P106."set_body_block"($P107, $P108)
.annotate 'line', 408
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "pkg_add_parent_or_role" :anon :subid("29_1337966799.879") :outer("372_1337966799.879")
    .param pmc param_1261
    .param pmc param_1262
    .param pmc param_1263
    .param pmc param_1264
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 417
    .lex "self", param_1261
    .lex "$obj", param_1262
    .lex "$meta_method_name", param_1263
    .lex "$to_add", param_1264
.annotate 'line', 418
    set $P104, param_1262
    unless_null $P104, vivify_1103
    new $P104, "Undef"
  vivify_1103:
    get_how $P105, $P104
    set $P106, param_1262
    unless_null $P106, vivify_1104
    new $P106, "Undef"
  vivify_1104:
    set $P107, param_1264
    unless_null $P107, vivify_1105
    new $P107, "Undef"
  vivify_1105:
    set $P108, param_1263
    unless_null $P108, vivify_1106
    new $P108, "Undef"
  vivify_1106:
    set $S100, $P108
    $P109 = $P105.$S100($P106, $P107)
.annotate 'line', 417
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "pkg_add_parrot_vtable_handler_mapping" :anon :subid("30_1337966799.879") :outer("372_1337966799.879")
    .param pmc param_1266
    .param pmc param_1267
    .param pmc param_1268
    .param pmc param_1269
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 421
    .lex "self", param_1266
    .lex "$obj", param_1267
    .lex "$name", param_1268
    .lex "$att_name", param_1269
.annotate 'line', 422
    set $P104, param_1267
    unless_null $P104, vivify_1107
    new $P104, "Undef"
  vivify_1107:
    get_how $P105, $P104
    set $P106, param_1267
    unless_null $P106, vivify_1108
    new $P106, "Undef"
  vivify_1108:
    set $P107, param_1268
    unless_null $P107, vivify_1109
    new $P107, "Undef"
  vivify_1109:
    set $P108, param_1269
    unless_null $P108, vivify_1110
    new $P108, "Undef"
  vivify_1110:
    $P109 = $P105."add_parrot_vtable_handler_mapping"($P106, $P107, $P108)
.annotate 'line', 421
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "pkg_compose" :anon :subid("31_1337966799.879") :outer("372_1337966799.879")
    .param pmc param_1271
    .param pmc param_1272
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 426
    .lex "self", param_1271
    .lex "$obj", param_1272
.annotate 'line', 427
    set $P104, param_1272
    unless_null $P104, vivify_1111
    new $P104, "Undef"
  vivify_1111:
    get_how $P105, $P104
    set $P106, param_1272
    unless_null $P106, vivify_1112
    new $P106, "Undef"
  vivify_1112:
    $P107 = $P105."compose"($P106)
.annotate 'line', 426
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "run_begin_block" :anon :subid("32_1337966799.879") :outer("372_1337966799.879")
    .param pmc param_1276
    .param pmc param_1277
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 431
    .const 'Sub' $P1287 = "381_1337966799.879" 
    capture_lex $P1287
    new $P1275, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P1275, control_1274
    push_eh $P1275
    .lex "self", param_1276
    .lex "$past", param_1277
.annotate 'line', 433
    new $P104, "Undef"
    set $P1278, $P104
    .lex "$wrapper", $P1278
.annotate 'line', 437
    $P1280 = root_new ['parrot';'Hash']
    set $P1279, $P1280
    .lex "%seen", $P1279
.annotate 'line', 438
    new $P105, "Undef"
    set $P1281, $P105
    .lex "$i", $P1281
.annotate 'line', 456
    new $P106, "Undef"
    set $P1282, $P106
    .lex "$code", $P1282
.annotate 'line', 457
    new $P107, "Undef"
    set $P1283, $P107
    .lex "$old_global", $P1283
.annotate 'line', 433
    get_hll_global $P108, "GLOBAL"
    nqp_get_package_through_who $P109, $P108, "PAST"
    get_who $P110, $P109
    set $P111, $P110["Block"]
.annotate 'line', 434
    get_hll_global $P112, "GLOBAL"
    nqp_get_package_through_who $P113, $P112, "PAST"
    get_who $P114, $P113
    set $P115, $P114["Stmts"]
    $P116 = $P115."new"()
    set $P117, param_1277
    unless_null $P117, vivify_1113
    new $P117, "Undef"
  vivify_1113:
    $P118 = $P111."new"($P116, $P117)
.annotate 'line', 433
    set $P1278, $P118
.annotate 'line', 431
    set $P1284, $P1279
    unless_null $P1284, vivify_1114
    $P1284 = root_new ['parrot';'Hash']
  vivify_1114:
.annotate 'line', 438
    set $P108, param_1276
    nqp_decontainerize $P109, $P108
    nqp_get_sc_object $P110, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 1
    repr_get_attr_obj $P1285, $P109, $P110, "@!BLOCKS", 8
    unless_null $P1285, vivify_1115
    $P1285 = root_new ['parrot';'ResizablePMCArray']
  vivify_1115:
    set $N100, $P1285
    new $P111, 'Float'
    set $P111, $N100
    set $P1281, $P111
.annotate 'line', 439
    new $P110, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P110, loop1310_handler
    push_eh $P110
  loop1310_test:
    set $P108, $P1281
    unless_null $P108, vivify_1116
    new $P108, "Undef"
  vivify_1116:
    set $N100, $P108
    set $N101, 0
    isgt $I100, $N100, $N101
    unless $I100, loop1310_done
  loop1310_redo:
    .const 'Sub' $P1287 = "381_1337966799.879" 
    capture_lex $P1287
    $P1287()
  loop1310_next:
    goto loop1310_test
  loop1310_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P111, exception, 'type'
    eq $P111, .CONTROL_LOOP_NEXT, loop1310_next
    eq $P111, .CONTROL_LOOP_REDO, loop1310_redo
  loop1310_done:
    pop_eh 
.annotate 'line', 456
    set $P108, param_1276
    nqp_decontainerize $P109, $P108
    set $P110, $P1278
    unless_null $P110, vivify_1134
    new $P110, "Undef"
  vivify_1134:
    $P111 = $P109."create_code"($P110, "BEGIN block", 0)
    set $P1282, $P111
.annotate 'line', 457
    new $P108, "ResizablePMCArray"
    get_hll_global $P109, $P108, "GLOBAL"
    set $P1283, $P109
.annotate 'line', 458
    new $P108, "ResizablePMCArray"
    find_dynamic_lex $P111, "$*GLOBALish"
    unless_null $P111, vivify_1135
    get_hll_global $P109, "GLOBAL"
    get_who $P110, $P109
    set $P111, $P110["$GLOBALish"]
    unless_null $P111, vivify_1136
    die "Contextual $*GLOBALish not found"
  vivify_1136:
  vivify_1135:
    set_hll_global $P108, "GLOBAL", $P111
.annotate 'line', 459
    set $P108, $P1282
    unless_null $P108, vivify_1137
    new $P108, "Undef"
  vivify_1137:
    $P108()
.annotate 'line', 460
    new $P108, "ResizablePMCArray"
    set $P109, $P1283
    unless_null $P109, vivify_1138
    new $P109, "Undef"
  vivify_1138:
    set_hll_global $P108, "GLOBAL", $P109
.annotate 'line', 464
    set $P108, $P1278
    unless_null $P108, vivify_1139
    new $P108, "Undef"
  vivify_1139:
    $P108."shift"()
.annotate 'line', 465
    new $P108, "Exception"
    set $P108['type'], .CONTROL_RETURN
    set $P109, $P1278
    unless_null $P109, vivify_1140
    new $P109, "Undef"
  vivify_1140:
    setattribute $P108, 'payload', $P109
    throw $P108
.annotate 'line', 431
    .return ()
  control_1274:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P108, exception, "payload"
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1286"  :anon :subid("381_1337966799.879") :outer("32_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 439
    .const 'Sub' $P1293 = "382_1337966799.879" 
    capture_lex $P1293
.annotate 'line', 441
    $P1289 = root_new ['parrot';'Hash']
    set $P1288, $P1289
    .lex "%symbols", $P1288
.annotate 'line', 440
    find_lex $P109, "$i"
    unless_null $P109, vivify_1117
    new $P109, "Undef"
  vivify_1117:
    sub $P110, $P109, 1
    store_lex "$i", $P110
.annotate 'line', 441
    find_lex $P109, "$i"
    unless_null $P109, vivify_1118
    new $P109, "Undef"
  vivify_1118:
    set $I101, $P109
    find_lex $P110, "self"
    nqp_decontainerize $P111, $P110
    nqp_get_sc_object $P112, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 1
    repr_get_attr_obj $P1290, $P111, $P112, "@!BLOCKS", 8
    unless_null $P1290, vivify_1119
    $P1290 = root_new ['parrot';'ResizablePMCArray']
  vivify_1119:
    set $P113, $P1290[$I101]
    unless_null $P113, vivify_1120
    new $P113, "Undef"
  vivify_1120:
    $P114 = $P113."symtable"()
    set $P1288, $P114
.annotate 'line', 442
    set $P1291, $P1288
    unless_null $P1291, vivify_1121
    $P1291 = root_new ['parrot';'Hash']
  vivify_1121:
    defined $I101, $P1291
    unless $I101, for_undef_1122
    iter $P109, $P1291
    new $P112, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P112, loop1309_handler
    push_eh $P112
  loop1309_test:
    unless $P109, loop1309_done
    shift $P110, $P109
  loop1309_redo:
    .const 'Sub' $P1293 = "382_1337966799.879" 
    capture_lex $P1293
    $P1293($P110)
  loop1309_next:
    goto loop1309_test
  loop1309_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P113, exception, 'type'
    eq $P113, .CONTROL_LOOP_NEXT, loop1309_next
    eq $P113, .CONTROL_LOOP_REDO, loop1309_redo
  loop1309_done:
    pop_eh 
  for_undef_1122:
.annotate 'line', 439
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1292"  :anon :subid("382_1337966799.879") :outer("381_1337966799.879")
    .param pmc param_1294
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 442
    .const 'Sub' $P1299 = "383_1337966799.879" 
    capture_lex $P1299
    .lex "$_", param_1294
.annotate 'line', 443
    find_lex $P113, "$_"
    unless_null $P113, vivify_1123
    new $P113, "Undef"
  vivify_1123:
    $P114 = $P113."key"()
    find_lex $P1297, "%seen"
    unless_null $P1297, vivify_1124
    $P1297 = root_new ['parrot';'Hash']
  vivify_1124:
    set $P115, $P1297[$P114]
    unless_null $P115, vivify_1125
    new $P115, "Undef"
  vivify_1125:
    isfalse $I102, $P115
    if $I102, if_1296
    new $P112, 'Integer'
    set $P112, $I102
    goto if_1296_end
  if_1296:
    find_lex $P116, "$_"
    unless_null $P116, vivify_1126
    new $P116, "Undef"
  vivify_1126:
    $P117 = $P116."value"()
    exists $I103, $P117["value"]
    new $P112, 'Integer'
    set $P112, $I103
  if_1296_end:
    if $P112, if_1295
    set $P111, $P112
    goto if_1295_end
  if_1295:
.annotate 'line', 444
    .const 'Sub' $P1299 = "383_1337966799.879" 
    capture_lex $P1299
    $P1299()
.annotate 'line', 450
    new $P118, "Float"
    assign $P118, 1
    find_lex $P119, "$_"
    unless_null $P119, vivify_1132
    new $P119, "Undef"
  vivify_1132:
    $P120 = $P119."key"()
    find_lex $P1308, "%seen"
    unless_null $P1308, vivify_1133
    $P1308 = root_new ['parrot';'Hash']
    store_lex "%seen", $P1308
  vivify_1133:
    set $P1308[$P120], $P118
.annotate 'line', 443
    set $P111, $P118
  if_1295_end:
.annotate 'line', 442
    .return ($P111)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1298"  :anon :subid("383_1337966799.879") :outer("382_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 444
    new $P1303, 'ExceptionHandler'
    set_label $P1303, control_1302
    $P1303."handle_types_except"(.CONTROL_ALL)
    push_eh $P1303
.annotate 'line', 445
    find_lex $P1300, "$wrapper"
    unless_null $P1300, vivify_1127
    $P1300 = root_new ['parrot';'ResizablePMCArray']
  vivify_1127:
    set $P118, $P1300[0]
    unless_null $P118, vivify_1128
    new $P118, "Undef"
  vivify_1128:
    get_hll_global $P119, "GLOBAL"
    nqp_get_package_through_who $P120, $P119, "PAST"
    get_who $P121, $P120
    set $P122, $P121["Var"]
.annotate 'line', 446
    find_lex $P123, "$_"
    unless_null $P123, vivify_1129
    new $P123, "Undef"
  vivify_1129:
    $P124 = $P123."key"()
.annotate 'line', 447
    find_lex $P125, "self"
    nqp_decontainerize $P126, $P125
    find_lex $P127, "$_"
    unless_null $P127, vivify_1130
    new $P127, "Undef"
  vivify_1130:
    $P128 = $P127."value"()
    set $P129, $P128["value"]
    unless_null $P129, vivify_1131
    new $P129, "Undef"
  vivify_1131:
    $P130 = $P126."get_ref"($P129)
.annotate 'line', 445
    $P131 = $P122."new"($P124 :named("name"), "lexical_6model" :named("scope"), 1 :named("isdecl"), $P130 :named("viviself"))
    $P132 = $P118."push"($P131)
.annotate 'line', 444
    pop_eh 
    goto skip_handler_1301
  control_1302:
    peek_exception $P1304
    .local pmc exception 
    .get_results (exception) 
    new $P1306, 'Integer'
    set $P1306, 1
    set exception["handled"], $P1306
    set $I1307, exception["handled"]
    eq $I1307, 1, handled_1305
    rethrow exception
  handled_1305:
    finalize $P1304
    .return (exception)
  skip_handler_1301:
    .return ($P132)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "set_nqp_language_defaults" :anon :subid("33_1337966799.879") :outer("372_1337966799.879")
    .param pmc param_1312
    .param pmc param_1313
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 469
    .const 'Sub' $P1320 = "384_1337966799.879" 
    capture_lex $P1320
    .lex "self", param_1312
    .lex "$block", param_1313
.annotate 'line', 471
    $P1315 = root_new ['parrot';'ResizablePMCArray']
    set $P1314, $P1315
    .lex "@loadlibs", $P1314
    new $P104, "ResizablePMCArray"
    push $P104, "nqp_group"
    push $P104, "nqp_ops"
    push $P104, "nqp_bigint_ops"
    push $P104, "trans_ops"
    push $P104, "io_ops"
    set $P1314, $P104
.annotate 'line', 472
    find_dynamic_lex $P106, "%*COMPILING"
    unless_null $P106, vivify_1141
    get_hll_global $P104, "GLOBAL"
    get_who $P105, $P104
    set $P106, $P105["%COMPILING"]
    unless_null $P106, vivify_1142
    die "Contextual %*COMPILING not found"
  vivify_1142:
  vivify_1141:
    set $P1317, $P106["%?OPTIONS"]
    unless_null $P1317, vivify_1143
    $P1317 = root_new ['parrot';'Hash']
  vivify_1143:
    set $P107, $P1317["vmlibs"]
    unless_null $P107, vivify_1144
    new $P107, "Undef"
  vivify_1144:
    unless $P107, if_1316_end
.annotate 'line', 473
    find_dynamic_lex $P111, "%*COMPILING"
    unless_null $P111, vivify_1145
    get_hll_global $P109, "GLOBAL"
    get_who $P110, $P109
    set $P111, $P110["%COMPILING"]
    unless_null $P111, vivify_1146
    die "Contextual %*COMPILING not found"
  vivify_1146:
  vivify_1145:
    set $P1318, $P111["%?OPTIONS"]
    unless_null $P1318, vivify_1147
    $P1318 = root_new ['parrot';'Hash']
  vivify_1147:
    set $P112, $P1318["vmlibs"]
    unless_null $P112, vivify_1148
    new $P112, "Undef"
  vivify_1148:
    set $S100, $P112
    split $P113, ",", $S100
    defined $I100, $P113
    unless $I100, for_undef_1149
    iter $P108, $P113
    new $P115, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P115, loop1323_handler
    push_eh $P115
  loop1323_test:
    unless $P108, loop1323_done
    shift $P114, $P108
  loop1323_redo:
    .const 'Sub' $P1320 = "384_1337966799.879" 
    capture_lex $P1320
    $P1320($P114)
  loop1323_next:
    goto loop1323_test
  loop1323_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P117, exception, 'type'
    eq $P117, .CONTROL_LOOP_NEXT, loop1323_next
    eq $P117, .CONTROL_LOOP_REDO, loop1323_redo
  loop1323_done:
    pop_eh 
  for_undef_1149:
  if_1316_end:
.annotate 'line', 477
    set $P104, param_1313
    unless_null $P104, vivify_1152
    new $P104, "Undef"
  vivify_1152:
    set $P1324, $P1314
    unless_null $P1324, vivify_1153
    $P1324 = root_new ['parrot';'ResizablePMCArray']
  vivify_1153:
    $P104."loadlibs"($P1324 :flat)
.annotate 'line', 480
    set $P104, param_1313
    unless_null $P104, vivify_1154
    new $P104, "Undef"
  vivify_1154:
    $P105 = $P104."hll"("nqp")
.annotate 'line', 469
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1319"  :anon :subid("384_1337966799.879") :outer("33_1337966799.879")
    .param pmc param_1321
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 473
    .lex "$_", param_1321
.annotate 'line', 474
    find_lex $P1322, "@loadlibs"
    unless_null $P1322, vivify_1150
    $P1322 = root_new ['parrot';'ResizablePMCArray']
  vivify_1150:
    find_lex $P115, "$_"
    unless_null $P115, vivify_1151
    new $P115, "Undef"
  vivify_1151:
    $P116 = $P1322."push"($P115)
.annotate 'line', 473
    .return ($P116)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "to_past" :anon :subid("34_1337966799.879") :outer("372_1337966799.879")
    .param pmc param_1328
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 485
    .const 'Sub' $P1343 = "388_1337966799.879" 
    capture_lex $P1343
    .const 'Sub' $P1331 = "385_1337966799.879" 
    capture_lex $P1331
    new $P1327, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P1327, control_1326
    push_eh $P1327
    .lex "self", param_1328
.annotate 'line', 486
    set $P105, param_1328
    nqp_decontainerize $P106, $P105
    $P107 = $P106."is_precompilation_mode"()
    if $P107, if_1329
.annotate 'line', 519
    .const 'Sub' $P1343 = "388_1337966799.879" 
    capture_lex $P1343
    $P112 = $P1343()
    set $P104, $P112
.annotate 'line', 486
    goto if_1329_end
  if_1329:
    .const 'Sub' $P1331 = "385_1337966799.879" 
    capture_lex $P1331
    $P110 = $P1331()
    set $P104, $P110
  if_1329_end:
.annotate 'line', 485
    .return ($P104)
  control_1326:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P105, exception, "payload"
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1342"  :anon :subid("388_1337966799.879") :outer("34_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 519
    .const 'Sub' $P1350 = "390_1337966799.879" 
    capture_lex $P1350
    .const 'Sub' $P1346 = "389_1337966799.879" 
    capture_lex $P1346
.annotate 'line', 520
    new $P111, "Undef"
    set $P1344, $P111
    .lex "$tasks", $P1344
    get_hll_global $P112, "GLOBAL"
    nqp_get_package_through_who $P113, $P112, "PAST"
    get_who $P114, $P113
    set $P115, $P114["Stmts"]
    $P116 = $P115."new"()
    set $P1344, $P116
.annotate 'line', 521
    find_lex $P113, "self"
    nqp_decontainerize $P114, $P113
    $P115 = $P114."load_dependency_tasks"()
    defined $I100, $P115
    unless $I100, for_undef_1155
    iter $P112, $P115
    new $P117, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P117, loop1348_handler
    push_eh $P117
  loop1348_test:
    unless $P112, loop1348_done
    shift $P116, $P112
  loop1348_redo:
    .const 'Sub' $P1346 = "389_1337966799.879" 
    capture_lex $P1346
    $P1346($P116)
  loop1348_next:
    goto loop1348_test
  loop1348_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P118, exception, 'type'
    eq $P118, .CONTROL_LOOP_NEXT, loop1348_next
    eq $P118, .CONTROL_LOOP_REDO, loop1348_redo
  loop1348_done:
    pop_eh 
  for_undef_1155:
.annotate 'line', 524
    find_lex $P113, "self"
    nqp_decontainerize $P114, $P113
    $P115 = $P114."fixup_tasks"()
    defined $I100, $P115
    unless $I100, for_undef_1158
    iter $P112, $P115
    new $P117, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P117, loop1352_handler
    push_eh $P117
  loop1352_test:
    unless $P112, loop1352_done
    shift $P116, $P112
  loop1352_redo:
    .const 'Sub' $P1350 = "390_1337966799.879" 
    capture_lex $P1350
    $P1350($P116)
  loop1352_next:
    goto loop1352_test
  loop1352_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P118, exception, 'type'
    eq $P118, .CONTROL_LOOP_NEXT, loop1352_next
    eq $P118, .CONTROL_LOOP_REDO, loop1352_redo
  loop1352_done:
    pop_eh 
  for_undef_1158:
.annotate 'line', 527
    new $P112, "Exception"
    set $P112['type'], .CONTROL_RETURN
    set $P113, $P1344
    unless_null $P113, vivify_1161
    new $P113, "Undef"
  vivify_1161:
    setattribute $P112, 'payload', $P113
    throw $P112
.annotate 'line', 519
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1345"  :anon :subid("389_1337966799.879") :outer("388_1337966799.879")
    .param pmc param_1347
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 521
    .lex "$_", param_1347
.annotate 'line', 522
    find_lex $P117, "$tasks"
    unless_null $P117, vivify_1156
    new $P117, "Undef"
  vivify_1156:
    get_hll_global $P118, "GLOBAL"
    nqp_get_package_through_who $P119, $P118, "PAST"
    get_who $P120, $P119
    set $P121, $P120["Stmt"]
    find_lex $P122, "$_"
    unless_null $P122, vivify_1157
    new $P122, "Undef"
  vivify_1157:
    $P123 = $P121."new"($P122)
    $P124 = $P117."push"($P123)
.annotate 'line', 521
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1349"  :anon :subid("390_1337966799.879") :outer("388_1337966799.879")
    .param pmc param_1351
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 524
    .lex "$_", param_1351
.annotate 'line', 525
    find_lex $P117, "$tasks"
    unless_null $P117, vivify_1159
    new $P117, "Undef"
  vivify_1159:
    get_hll_global $P118, "GLOBAL"
    nqp_get_package_through_who $P119, $P118, "PAST"
    get_who $P120, $P119
    set $P121, $P120["Stmt"]
    find_lex $P122, "$_"
    unless_null $P122, vivify_1160
    new $P122, "Undef"
  vivify_1160:
    $P123 = $P121."new"($P122)
    $P124 = $P117."push"($P123)
.annotate 'line', 524
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1330"  :anon :subid("385_1337966799.879") :outer("34_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 486
    .const 'Sub' $P1339 = "387_1337966799.879" 
    capture_lex $P1339
    .const 'Sub' $P1335 = "386_1337966799.879" 
    capture_lex $P1335
.annotate 'line', 487
    new $P108, "Undef"
    set $P1332, $P108
    .lex "$load_tasks", $P1332
.annotate 'line', 491
    new $P109, "Undef"
    set $P1333, $P109
    .lex "$fixup_tasks", $P1333
.annotate 'line', 487
    get_hll_global $P110, "GLOBAL"
    nqp_get_package_through_who $P111, $P110, "PAST"
    get_who $P112, $P111
    set $P113, $P112["Stmts"]
    $P114 = $P113."new"()
    set $P1332, $P114
.annotate 'line', 488
    find_lex $P111, "self"
    nqp_decontainerize $P112, $P111
    $P113 = $P112."load_dependency_tasks"()
    defined $I100, $P113
    unless $I100, for_undef_1162
    iter $P110, $P113
    new $P115, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P115, loop1337_handler
    push_eh $P115
  loop1337_test:
    unless $P110, loop1337_done
    shift $P114, $P110
  loop1337_redo:
    .const 'Sub' $P1335 = "386_1337966799.879" 
    capture_lex $P1335
    $P1335($P114)
  loop1337_next:
    goto loop1337_test
  loop1337_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P116, exception, 'type'
    eq $P116, .CONTROL_LOOP_NEXT, loop1337_next
    eq $P116, .CONTROL_LOOP_REDO, loop1337_redo
  loop1337_done:
    pop_eh 
  for_undef_1162:
.annotate 'line', 491
    get_hll_global $P110, "GLOBAL"
    nqp_get_package_through_who $P111, $P110, "PAST"
    get_who $P112, $P111
    set $P113, $P112["Stmts"]
    $P114 = $P113."new"()
    set $P1333, $P114
.annotate 'line', 492
    find_lex $P111, "self"
    nqp_decontainerize $P112, $P111
    $P113 = $P112."fixup_tasks"()
    defined $I100, $P113
    unless $I100, for_undef_1165
    iter $P110, $P113
    new $P115, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P115, loop1341_handler
    push_eh $P115
  loop1341_test:
    unless $P110, loop1341_done
    shift $P114, $P110
  loop1341_redo:
    .const 'Sub' $P1339 = "387_1337966799.879" 
    capture_lex $P1339
    $P1339($P114)
  loop1341_next:
    goto loop1341_test
  loop1341_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P116, exception, 'type'
    eq $P116, .CONTROL_LOOP_NEXT, loop1341_next
    eq $P116, .CONTROL_LOOP_REDO, loop1341_redo
  loop1341_done:
    pop_eh 
  for_undef_1165:
.annotate 'line', 495
    new $P110, "Exception"
    set $P110['type'], .CONTROL_RETURN
    get_hll_global $P111, "GLOBAL"
    nqp_get_package_through_who $P112, $P111, "PAST"
    get_who $P113, $P112
    set $P114, $P113["Stmts"]
.annotate 'line', 496
    get_hll_global $P115, "GLOBAL"
    nqp_get_package_through_who $P116, $P115, "PAST"
    get_who $P117, $P116
    set $P118, $P117["Op"]
    $P119 = $P118."new"("nqp_dynop_setup v" :named("pirop"))
.annotate 'line', 497
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P122, $P121
    set $P123, $P122["Op"]
    $P124 = $P123."new"("nqp_bigint_setup v" :named("pirop"))
.annotate 'line', 498
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P128, $P127["Op"]
.annotate 'line', 500
    get_hll_global $P129, "GLOBAL"
    nqp_get_package_through_who $P130, $P129, "PAST"
    get_who $P131, $P130
    set $P132, $P131["Op"]
    $P133 = $P132."new"("getinterp P" :named("pirop"))
.annotate 'line', 501
    get_hll_global $P134, "GLOBAL"
    nqp_get_package_through_who $P135, $P134, "PAST"
    get_who $P136, $P135
    set $P137, $P136["Op"]
    $P138 = $P137."new"("LexPad", "get_class Ps" :named("pirop"))
.annotate 'line', 502
    get_hll_global $P139, "GLOBAL"
    nqp_get_package_through_who $P140, $P139, "PAST"
    get_who $P141, $P140
    set $P142, $P141["Op"]
    $P143 = $P142."new"("NQPLexPad", "get_class Ps" :named("pirop"))
    $P144 = $P128."new"($P133, $P138, $P143, "callmethod" :named("pasttype"), "hll_map" :named("name"))
.annotate 'line', 504
    get_hll_global $P145, "GLOBAL"
    nqp_get_package_through_who $P146, $P145, "PAST"
    get_who $P147, $P146
    set $P148, $P147["Op"]
.annotate 'line', 506
    get_hll_global $P149, "GLOBAL"
    nqp_get_package_through_who $P150, $P149, "PAST"
    get_who $P151, $P150
    set $P152, $P151["Var"]
    $P153 = $P152."new"("cur_sc" :named("name"), "register" :named("scope"), 1 :named("isdecl"))
.annotate 'line', 507
    get_hll_global $P154, "GLOBAL"
    nqp_get_package_through_who $P155, $P154, "PAST"
    get_who $P156, $P155
    set $P157, $P156["Op"]
    find_lex $P158, "self"
    nqp_decontainerize $P159, $P158
    $P160 = $P159."handle"()
    $P161 = $P157."new"($P160, "nqp_create_sc Ps" :named("pirop"))
    $P162 = $P148."new"($P153, $P161, "bind_6model" :named("pasttype"))
.annotate 'line', 509
    get_hll_global $P163, "GLOBAL"
    nqp_get_package_through_who $P164, $P163, "PAST"
    get_who $P165, $P164
    set $P166, $P165["Op"]
.annotate 'line', 511
    get_hll_global $P167, "GLOBAL"
    nqp_get_package_through_who $P168, $P167, "PAST"
    get_who $P169, $P168
    set $P170, $P169["Var"]
    $P171 = $P170."new"("cur_sc" :named("name"), "register" :named("scope"))
.annotate 'line', 512
    find_lex $P172, "self"
    nqp_decontainerize $P173, $P172
    $P174 = $P173."sc"()
    $P175 = $P174."description"()
    $P176 = $P166."new"($P171, $P175, "callmethod" :named("pasttype"), "set_description" :named("name"))
.annotate 'line', 509
    set $P177, $P1332
    unless_null $P177, vivify_1168
    new $P177, "Undef"
  vivify_1168:
.annotate 'line', 515
    find_lex $P178, "self"
    nqp_decontainerize $P179, $P178
    $P180 = $P179."serialize_and_produce_deserialization_past"("cur_sc")
    set $P181, $P1333
    unless_null $P181, vivify_1169
    new $P181, "Undef"
  vivify_1169:
    $P182 = $P114."new"($P119, $P124, $P144, $P162, $P176, $P177, $P180, $P181)
.annotate 'line', 495
    setattribute $P110, 'payload', $P182
    throw $P110
.annotate 'line', 486
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1334"  :anon :subid("386_1337966799.879") :outer("385_1337966799.879")
    .param pmc param_1336
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 488
    .lex "$_", param_1336
.annotate 'line', 489
    find_lex $P115, "$load_tasks"
    unless_null $P115, vivify_1163
    new $P115, "Undef"
  vivify_1163:
    get_hll_global $P116, "GLOBAL"
    nqp_get_package_through_who $P117, $P116, "PAST"
    get_who $P118, $P117
    set $P119, $P118["Stmt"]
    find_lex $P120, "$_"
    unless_null $P120, vivify_1164
    new $P120, "Undef"
  vivify_1164:
    $P121 = $P119."new"($P120)
    $P122 = $P115."push"($P121)
.annotate 'line', 488
    .return ($P122)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1338"  :anon :subid("387_1337966799.879") :outer("385_1337966799.879")
    .param pmc param_1340
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 492
    .lex "$_", param_1340
.annotate 'line', 493
    find_lex $P115, "$fixup_tasks"
    unless_null $P115, vivify_1166
    new $P115, "Undef"
  vivify_1166:
    get_hll_global $P116, "GLOBAL"
    nqp_get_package_through_who $P117, $P116, "PAST"
    get_who $P118, $P117
    set $P119, $P118["Stmt"]
    find_lex $P120, "$_"
    unless_null $P120, vivify_1167
    new $P120, "Undef"
  vivify_1167:
    $P121 = $P119."new"($P120)
    $P122 = $P115."push"($P121)
.annotate 'line', 492
    .return ($P122)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "is_lexical" :anon :subid("35_1337966799.879") :outer("372_1337966799.879")
    .param pmc param_1354
    .param pmc param_1355
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 533
    .lex "self", param_1354
    .lex "$name", param_1355
.annotate 'line', 534
    set $P104, param_1354
    nqp_decontainerize $P105, $P104
    set $P106, param_1355
    unless_null $P106, vivify_1170
    new $P106, "Undef"
  vivify_1170:
    $P107 = $P105."is_scope"($P106, "lexical")
.annotate 'line', 533
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "is_package" :anon :subid("36_1337966799.879") :outer("372_1337966799.879")
    .param pmc param_1357
    .param pmc param_1358
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 539
    .lex "self", param_1357
    .lex "$name", param_1358
.annotate 'line', 540
    set $P104, param_1357
    nqp_decontainerize $P105, $P104
    set $P106, param_1358
    unless_null $P106, vivify_1171
    new $P106, "Undef"
  vivify_1171:
    $P107 = $P105."is_scope"($P106, "package")
.annotate 'line', 539
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "is_scope" :anon :subid("37_1337966799.879") :outer("372_1337966799.879")
    .param pmc param_1362
    .param pmc param_1363
    .param pmc param_1364
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 545
    .const 'Sub' $P1368 = "391_1337966799.879" 
    capture_lex $P1368
    new $P1361, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P1361, control_1360
    push_eh $P1361
    .lex "self", param_1362
    .lex "$name", param_1363
    .lex "$wanted_scope", param_1364
.annotate 'line', 546
    new $P104, "Undef"
    set $P1365, $P104
    .lex "$i", $P1365
    set $P105, param_1362
    nqp_decontainerize $P106, $P105
    nqp_get_sc_object $P107, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 1
    repr_get_attr_obj $P1366, $P106, $P107, "@!BLOCKS", 8
    unless_null $P1366, vivify_1172
    $P1366 = root_new ['parrot';'ResizablePMCArray']
  vivify_1172:
    set $N100, $P1366
    new $P108, 'Float'
    set $P108, $N100
    set $P1365, $P108
.annotate 'line', 547
    new $P107, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P107, loop1375_handler
    push_eh $P107
  loop1375_test:
    set $P105, $P1365
    unless_null $P105, vivify_1173
    new $P105, "Undef"
  vivify_1173:
    set $N100, $P105
    set $N101, 0
    isgt $I100, $N100, $N101
    unless $I100, loop1375_done
  loop1375_redo:
    .const 'Sub' $P1368 = "391_1337966799.879" 
    capture_lex $P1368
    $P1368()
  loop1375_next:
    goto loop1375_test
  loop1375_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P108, exception, 'type'
    eq $P108, .CONTROL_LOOP_NEXT, loop1375_next
    eq $P108, .CONTROL_LOOP_REDO, loop1375_redo
  loop1375_done:
    pop_eh 
.annotate 'line', 545
    .return (0)
  control_1360:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P105, exception, "payload"
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1367"  :anon :subid("391_1337966799.879") :outer("37_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 549
    $P1370 = root_new ['parrot';'Hash']
    set $P1369, $P1370
    .lex "%sym", $P1369
.annotate 'line', 548
    find_lex $P106, "$i"
    unless_null $P106, vivify_1174
    new $P106, "Undef"
  vivify_1174:
    sub $P107, $P106, 1
    store_lex "$i", $P107
.annotate 'line', 549
    find_lex $P106, "$i"
    unless_null $P106, vivify_1175
    new $P106, "Undef"
  vivify_1175:
    set $I101, $P106
    find_lex $P107, "self"
    nqp_decontainerize $P108, $P107
    nqp_get_sc_object $P109, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 1
    repr_get_attr_obj $P1371, $P108, $P109, "@!BLOCKS", 8
    unless_null $P1371, vivify_1176
    $P1371 = root_new ['parrot';'ResizablePMCArray']
  vivify_1176:
    set $P110, $P1371[$I101]
    unless_null $P110, vivify_1177
    new $P110, "Undef"
  vivify_1177:
    find_lex $P111, "$name"
    unless_null $P111, vivify_1178
    new $P111, "Undef"
  vivify_1178:
    $P112 = $P110."symbol"($P111)
    set $P1369, $P112
.annotate 'line', 550
    set $P1373, $P1369
    unless_null $P1373, vivify_1179
    $P1373 = root_new ['parrot';'Hash']
  vivify_1179:
    set $N102, $P1373
    if $N102, if_1372
    new $P106, 'Float'
    set $P106, $N102
    goto if_1372_end
  if_1372:
.annotate 'line', 551
    new $P107, "Exception"
    set $P107['type'], .CONTROL_RETURN
    set $P1374, $P1369
    unless_null $P1374, vivify_1180
    $P1374 = root_new ['parrot';'Hash']
  vivify_1180:
    set $P108, $P1374["scope"]
    unless_null $P108, vivify_1181
    new $P108, "Undef"
  vivify_1181:
    set $S100, $P108
    find_lex $P109, "$wanted_scope"
    unless_null $P109, vivify_1182
    new $P109, "Undef"
  vivify_1182:
    set $S101, $P109
    iseq $I101, $S100, $S101
    new $P110, 'Integer'
    set $P110, $I101
    setattribute $P107, 'payload', $P110
    throw $P107
  if_1372_end:
.annotate 'line', 547
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "known_sym" :anon :subid("38_1337966799.879") :outer("372_1337966799.879")
    .param pmc param_1377
    .param pmc param_1378
    .param pmc param_1379
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 558
    .const 'Sub' $P1382 = "392_1337966799.879" 
    capture_lex $P1382
    .lex "self", param_1377
    .lex "$/", param_1378
    .lex "@name", param_1379
.annotate 'line', 559
    new $P104, "Undef"
    set $P1380, $P104
    .lex "$known", $P1380
    new $P105, "Float"
    assign $P105, 0
    set $P1380, $P105
.annotate 'line', 560
    .const 'Sub' $P1382 = "392_1337966799.879" 
    capture_lex $P1382
    $P1382()
.annotate 'line', 558
    set $P105, $P1380
    unless_null $P105, vivify_1184
    new $P105, "Undef"
  vivify_1184:
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1381"  :anon :subid("392_1337966799.879") :outer("38_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 560
    new $P1386, 'ExceptionHandler'
    set_label $P1386, control_1385
    $P1386."handle_types_except"(.CONTROL_ALL)
    push_eh $P1386
.annotate 'line', 561
    find_lex $P105, "self"
    nqp_decontainerize $P106, $P105
    find_lex $P1383, "@name"
    unless_null $P1383, vivify_1183
    $P1383 = root_new ['parrot';'ResizablePMCArray']
  vivify_1183:
    $P106."find_sym"($P1383)
.annotate 'line', 562
    new $P105, "Float"
    assign $P105, 1
    store_lex "$known", $P105
.annotate 'line', 560
    pop_eh 
    goto skip_handler_1384
  control_1385:
    peek_exception $P1387
    .local pmc exception 
    .get_results (exception) 
    new $P1389, 'Integer'
    set $P1389, 1
    set exception["handled"], $P1389
    set $I1390, exception["handled"]
    eq $I1390, 1, handled_1388
    rethrow exception
  handled_1388:
    finalize $P1387
    .return (exception)
  skip_handler_1384:
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "find_sym" :anon :subid("39_1337966799.879") :outer("372_1337966799.879")
    .param pmc param_1394
    .param pmc param_1395
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 570
    .const 'Sub' $P1440 = "397_1337966799.879" 
    capture_lex $P1440
    .const 'Sub' $P1421 = "395_1337966799.879" 
    capture_lex $P1421
    .const 'Sub' $P1402 = "393_1337966799.879" 
    capture_lex $P1402
    new $P1393, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P1393, control_1392
    push_eh $P1393
    .lex "self", param_1394
    .lex "@name", param_1395
.annotate 'line', 596
    new $P104, "Undef"
    set $P1396, $P104
    .lex "$result", $P1396
.annotate 'line', 572
    set $P1398, param_1395
    unless_null $P1398, vivify_1185
    $P1398 = root_new ['parrot';'ResizablePMCArray']
  vivify_1185:
    set $N100, $P1398
    if $N100, unless_1397_end
    die "Cannot look up empty name"
  unless_1397_end:
.annotate 'line', 576
    set $P1400, param_1395
    unless_null $P1400, vivify_1186
    $P1400 = root_new ['parrot';'ResizablePMCArray']
  vivify_1186:
    set $N100, $P1400
    set $N101, 1
    iseq $I100, $N100, $N101
    unless $I100, if_1399_end
    .const 'Sub' $P1402 = "393_1337966799.879" 
    capture_lex $P1402
    $P1402()
  if_1399_end:
.annotate 'line', 596
    find_dynamic_lex $P107, "$*GLOBALish"
    unless_null $P107, vivify_1201
    get_hll_global $P105, "GLOBAL"
    get_who $P106, $P105
    set $P107, $P106["$GLOBALish"]
    unless_null $P107, vivify_1202
    die "Contextual $*GLOBALish not found"
  vivify_1202:
  vivify_1201:
    set $P1396, $P107
.annotate 'line', 597
    set $P1419, param_1395
    unless_null $P1419, vivify_1203
    $P1419 = root_new ['parrot';'ResizablePMCArray']
  vivify_1203:
    set $N100, $P1419
    set $N101, 2
    isge $I100, $N100, $N101
    unless $I100, if_1418_end
    .const 'Sub' $P1421 = "395_1337966799.879" 
    capture_lex $P1421
    $P1421()
  if_1418_end:
.annotate 'line', 617
    set $P1438, param_1395
    unless_null $P1438, vivify_1219
    $P1438 = root_new ['parrot';'ResizablePMCArray']
  vivify_1219:
    defined $I100, $P1438
    unless $I100, for_undef_1220
    iter $P105, $P1438
    new $P108, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P108, loop1444_handler
    push_eh $P108
  loop1444_test:
    unless $P105, loop1444_done
    shift $P106, $P105
  loop1444_redo:
    .const 'Sub' $P1440 = "397_1337966799.879" 
    capture_lex $P1440
    $P1440($P106)
  loop1444_next:
    goto loop1444_test
  loop1444_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P109, exception, 'type'
    eq $P109, .CONTROL_LOOP_NEXT, loop1444_next
    eq $P109, .CONTROL_LOOP_REDO, loop1444_redo
  loop1444_done:
    pop_eh 
  for_undef_1220:
.annotate 'line', 570
    set $P105, $P1396
    unless_null $P105, vivify_1227
    new $P105, "Undef"
  vivify_1227:
    .return ($P105)
  control_1392:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P106, exception, "payload"
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1401"  :anon :subid("393_1337966799.879") :outer("39_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 576
    .const 'Sub' $P1408 = "394_1337966799.879" 
    capture_lex $P1408
.annotate 'line', 577
    new $P105, "Undef"
    set $P1403, $P105
    .lex "$final_name", $P1403
.annotate 'line', 578
    new $P106, "Undef"
    set $P1404, $P106
    .lex "$i", $P1404
.annotate 'line', 577
    find_lex $P1405, "@name"
    unless_null $P1405, vivify_1187
    $P1405 = root_new ['parrot';'ResizablePMCArray']
  vivify_1187:
    set $P107, $P1405[0]
    unless_null $P107, vivify_1188
    new $P107, "Undef"
  vivify_1188:
    set $P1403, $P107
.annotate 'line', 578
    find_lex $P107, "self"
    nqp_decontainerize $P108, $P107
    nqp_get_sc_object $P109, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 1
    repr_get_attr_obj $P1406, $P108, $P109, "@!BLOCKS", 8
    unless_null $P1406, vivify_1189
    $P1406 = root_new ['parrot';'ResizablePMCArray']
  vivify_1189:
    set $N102, $P1406
    new $P110, 'Float'
    set $P110, $N102
    set $P1404, $P110
.annotate 'line', 579
    new $P109, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P109, loop1417_handler
    push_eh $P109
  loop1417_test:
    set $P107, $P1404
    unless_null $P107, vivify_1190
    new $P107, "Undef"
  vivify_1190:
    set $N102, $P107
    set $N103, 0
    isgt $I101, $N102, $N103
    unless $I101, loop1417_done
  loop1417_redo:
    .const 'Sub' $P1408 = "394_1337966799.879" 
    capture_lex $P1408
    $P1408()
  loop1417_next:
    goto loop1417_test
  loop1417_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P110, exception, 'type'
    eq $P110, .CONTROL_LOOP_NEXT, loop1417_next
    eq $P110, .CONTROL_LOOP_REDO, loop1417_redo
  loop1417_done:
    pop_eh 
.annotate 'line', 576
    .return ($I101)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1407"  :anon :subid("394_1337966799.879") :outer("393_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 581
    $P1410 = root_new ['parrot';'Hash']
    set $P1409, $P1410
    .lex "%sym", $P1409
.annotate 'line', 580
    find_lex $P108, "$i"
    unless_null $P108, vivify_1191
    new $P108, "Undef"
  vivify_1191:
    sub $P109, $P108, 1
    store_lex "$i", $P109
.annotate 'line', 581
    find_lex $P108, "$i"
    unless_null $P108, vivify_1192
    new $P108, "Undef"
  vivify_1192:
    set $I102, $P108
    find_lex $P109, "self"
    nqp_decontainerize $P110, $P109
    nqp_get_sc_object $P111, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 1
    repr_get_attr_obj $P1411, $P110, $P111, "@!BLOCKS", 8
    unless_null $P1411, vivify_1193
    $P1411 = root_new ['parrot';'ResizablePMCArray']
  vivify_1193:
    set $P112, $P1411[$I102]
    unless_null $P112, vivify_1194
    new $P112, "Undef"
  vivify_1194:
    find_lex $P113, "$final_name"
    unless_null $P113, vivify_1195
    new $P113, "Undef"
  vivify_1195:
    $P114 = $P112."symbol"($P113)
    set $P1409, $P114
.annotate 'line', 582
    set $P1413, $P1409
    unless_null $P1413, vivify_1196
    $P1413 = root_new ['parrot';'Hash']
  vivify_1196:
    set $N104, $P1413
    if $N104, if_1412
    new $P108, 'Float'
    set $P108, $N104
    goto if_1412_end
  if_1412:
.annotate 'line', 583
    set $P1415, $P1409
    unless_null $P1415, vivify_1197
    $P1415 = root_new ['parrot';'Hash']
  vivify_1197:
    exists $I102, $P1415["value"]
    if $I102, if_1414
.annotate 'line', 587
    new $P110, 'String'
    set $P110, "No compile-time value for "
    find_lex $P111, "$final_name"
    unless_null $P111, vivify_1198
    new $P111, "Undef"
  vivify_1198:
    concat $P112, $P110, $P111
    die $P112
.annotate 'line', 586
    goto if_1414_end
  if_1414:
.annotate 'line', 584
    new $P110, "Exception"
    set $P110['type'], .CONTROL_RETURN
    set $P1416, $P1409
    unless_null $P1416, vivify_1199
    $P1416 = root_new ['parrot';'Hash']
  vivify_1199:
    set $P111, $P1416["value"]
    unless_null $P111, vivify_1200
    new $P111, "Undef"
  vivify_1200:
    setattribute $P110, 'payload', $P111
    throw $P110
  if_1414_end:
.annotate 'line', 582
    set $P108, $P109
  if_1412_end:
.annotate 'line', 579
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1420"  :anon :subid("395_1337966799.879") :outer("39_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 597
    .const 'Sub' $P1427 = "396_1337966799.879" 
    capture_lex $P1427
.annotate 'line', 598
    new $P105, "Undef"
    set $P1422, $P105
    .lex "$first", $P1422
.annotate 'line', 599
    new $P106, "Undef"
    set $P1423, $P106
    .lex "$i", $P1423
.annotate 'line', 598
    find_lex $P1424, "@name"
    unless_null $P1424, vivify_1204
    $P1424 = root_new ['parrot';'ResizablePMCArray']
  vivify_1204:
    set $P107, $P1424[0]
    unless_null $P107, vivify_1205
    new $P107, "Undef"
  vivify_1205:
    set $P1422, $P107
.annotate 'line', 599
    find_lex $P107, "self"
    nqp_decontainerize $P108, $P107
    nqp_get_sc_object $P109, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 1
    repr_get_attr_obj $P1425, $P108, $P109, "@!BLOCKS", 8
    unless_null $P1425, vivify_1206
    $P1425 = root_new ['parrot';'ResizablePMCArray']
  vivify_1206:
    set $N102, $P1425
    new $P110, 'Float'
    set $P110, $N102
    set $P1423, $P110
.annotate 'line', 600
    new $P109, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P109, loop1437_handler
    push_eh $P109
  loop1437_test:
    set $P107, $P1423
    unless_null $P107, vivify_1207
    new $P107, "Undef"
  vivify_1207:
    set $N102, $P107
    set $N103, 0
    isgt $I101, $N102, $N103
    unless $I101, loop1437_done
  loop1437_redo:
    .const 'Sub' $P1427 = "396_1337966799.879" 
    capture_lex $P1427
    $P1427()
  loop1437_next:
    goto loop1437_test
  loop1437_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P110, exception, 'type'
    eq $P110, .CONTROL_LOOP_NEXT, loop1437_next
    eq $P110, .CONTROL_LOOP_REDO, loop1437_redo
  loop1437_done:
    pop_eh 
.annotate 'line', 597
    .return ($I101)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1426"  :anon :subid("396_1337966799.879") :outer("395_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 602
    $P1429 = root_new ['parrot';'Hash']
    set $P1428, $P1429
    .lex "%sym", $P1428
.annotate 'line', 601
    find_lex $P108, "$i"
    unless_null $P108, vivify_1208
    new $P108, "Undef"
  vivify_1208:
    sub $P109, $P108, 1
    store_lex "$i", $P109
.annotate 'line', 602
    find_lex $P108, "$i"
    unless_null $P108, vivify_1209
    new $P108, "Undef"
  vivify_1209:
    set $I102, $P108
    find_lex $P109, "self"
    nqp_decontainerize $P110, $P109
    nqp_get_sc_object $P111, "A3E4D9D2303BE4C3734235DEAEB7C61E04B0AABA-1337966799.741", 1
    repr_get_attr_obj $P1430, $P110, $P111, "@!BLOCKS", 8
    unless_null $P1430, vivify_1210
    $P1430 = root_new ['parrot';'ResizablePMCArray']
  vivify_1210:
    set $P112, $P1430[$I102]
    unless_null $P112, vivify_1211
    new $P112, "Undef"
  vivify_1211:
    find_lex $P113, "$first"
    unless_null $P113, vivify_1212
    new $P113, "Undef"
  vivify_1212:
    $P114 = $P112."symbol"($P113)
    set $P1428, $P114
.annotate 'line', 603
    set $P1432, $P1428
    unless_null $P1432, vivify_1213
    $P1432 = root_new ['parrot';'Hash']
  vivify_1213:
    set $N104, $P1432
    if $N104, if_1431
    new $P108, 'Float'
    set $P108, $N104
    goto if_1431_end
  if_1431:
.annotate 'line', 604
    set $P1434, $P1428
    unless_null $P1434, vivify_1214
    $P1434 = root_new ['parrot';'Hash']
  vivify_1214:
    exists $I102, $P1434["value"]
    if $I102, if_1433
.annotate 'line', 610
    new $P111, 'String'
    set $P111, "No compile-time value for "
    find_lex $P112, "$first"
    unless_null $P112, vivify_1215
    new $P112, "Undef"
  vivify_1215:
    concat $P113, $P111, $P112
    die $P113
.annotate 'line', 609
    goto if_1433_end
  if_1433:
.annotate 'line', 605
    set $P1435, $P1428
    unless_null $P1435, vivify_1216
    $P1435 = root_new ['parrot';'Hash']
  vivify_1216:
    set $P110, $P1435["value"]
    unless_null $P110, vivify_1217
    new $P110, "Undef"
  vivify_1217:
    store_lex "$result", $P110
.annotate 'line', 606
    find_lex $P1436, "@name"
    unless_null $P1436, vivify_1218
    $P1436 = root_new ['parrot';'ResizablePMCArray']
  vivify_1218:
    $P1436."shift"()
.annotate 'line', 607
    new $P110, "Float"
    assign $P110, 0
    store_lex "$i", $P110
.annotate 'line', 604
    set $P109, $P110
  if_1433_end:
.annotate 'line', 603
    set $P108, $P109
  if_1431_end:
.annotate 'line', 600
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1439"  :anon :subid("397_1337966799.879") :outer("39_1337966799.879")
    .param pmc param_1441
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 617
    .lex "$_", param_1441
.annotate 'line', 618
    find_lex $P110, "$_"
    unless_null $P110, vivify_1221
    new $P110, "Undef"
  vivify_1221:
    set $S100, $P110
    find_lex $P108, "$result"
    unless_null $P108, vivify_1222
    new $P108, "Undef"
  vivify_1222:
    get_who $P109, $P108
    exists $I101, $P109[$S100]
    if $I101, if_1442
.annotate 'line', 622
    new $P111, "String"
    assign $P111, "Could not locate compile-time value for symbol "
.annotate 'line', 623
    find_lex $P1443, "@name"
    unless_null $P1443, vivify_1223
    $P1443 = root_new ['parrot';'ResizablePMCArray']
  vivify_1223:
    join $S101, "::", $P1443
    concat $P112, $P111, $S101
.annotate 'line', 622
    die $P112
.annotate 'line', 621
    goto if_1442_end
  if_1442:
.annotate 'line', 619
    find_lex $P111, "$_"
    unless_null $P111, vivify_1224
    new $P111, "Undef"
  vivify_1224:
    find_lex $P112, "$result"
    unless_null $P112, vivify_1225
    new $P112, "Undef"
  vivify_1225:
    get_who $P113, $P112
    set $P114, $P113[$P111]
    unless_null $P114, vivify_1226
    new $P114, "Undef"
  vivify_1226:
    store_lex "$result", $P114
.annotate 'line', 618
    set $P107, $P114
  if_1442_end:
.annotate 'line', 617
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1446"  :subid("398_1337966799.879") :outer("368_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 632
    .const 'Sub' $P2614 = "229_1337966799.879" 
    capture_lex $P2614
    .const 'Sub' $P2608 = "228_1337966799.879" 
    capture_lex $P2608
    .const 'Sub' $P2602 = "227_1337966799.879" 
    capture_lex $P2602
    .const 'Sub' $P2596 = "226_1337966799.879" 
    capture_lex $P2596
    .const 'Sub' $P2590 = "225_1337966799.879" 
    capture_lex $P2590
    .const 'Sub' $P2582 = "224_1337966799.879" 
    capture_lex $P2582
    .const 'Sub' $P2576 = "223_1337966799.879" 
    capture_lex $P2576
    .const 'Sub' $P2570 = "222_1337966799.879" 
    capture_lex $P2570
    .const 'Sub' $P2564 = "221_1337966799.879" 
    capture_lex $P2564
    .const 'Sub' $P2558 = "220_1337966799.879" 
    capture_lex $P2558
    .const 'Sub' $P2552 = "219_1337966799.879" 
    capture_lex $P2552
    .const 'Sub' $P2546 = "218_1337966799.879" 
    capture_lex $P2546
    .const 'Sub' $P2540 = "217_1337966799.879" 
    capture_lex $P2540
    .const 'Sub' $P2534 = "216_1337966799.879" 
    capture_lex $P2534
    .const 'Sub' $P2528 = "215_1337966799.879" 
    capture_lex $P2528
    .const 'Sub' $P2522 = "214_1337966799.879" 
    capture_lex $P2522
    .const 'Sub' $P2516 = "213_1337966799.879" 
    capture_lex $P2516
    .const 'Sub' $P2510 = "212_1337966799.879" 
    capture_lex $P2510
    .const 'Sub' $P2504 = "211_1337966799.879" 
    capture_lex $P2504
    .const 'Sub' $P2498 = "210_1337966799.879" 
    capture_lex $P2498
    .const 'Sub' $P2492 = "209_1337966799.879" 
    capture_lex $P2492
    .const 'Sub' $P2486 = "208_1337966799.879" 
    capture_lex $P2486
    .const 'Sub' $P2480 = "207_1337966799.879" 
    capture_lex $P2480
    .const 'Sub' $P2474 = "206_1337966799.879" 
    capture_lex $P2474
    .const 'Sub' $P2468 = "205_1337966799.879" 
    capture_lex $P2468
    .const 'Sub' $P2462 = "204_1337966799.879" 
    capture_lex $P2462
    .const 'Sub' $P2456 = "203_1337966799.879" 
    capture_lex $P2456
    .const 'Sub' $P2450 = "202_1337966799.879" 
    capture_lex $P2450
    .const 'Sub' $P2444 = "201_1337966799.879" 
    capture_lex $P2444
    .const 'Sub' $P2438 = "200_1337966799.879" 
    capture_lex $P2438
    .const 'Sub' $P2432 = "199_1337966799.879" 
    capture_lex $P2432
    .const 'Sub' $P2426 = "198_1337966799.879" 
    capture_lex $P2426
    .const 'Sub' $P2420 = "197_1337966799.879" 
    capture_lex $P2420
    .const 'Sub' $P2414 = "196_1337966799.879" 
    capture_lex $P2414
    .const 'Sub' $P2408 = "195_1337966799.879" 
    capture_lex $P2408
    .const 'Sub' $P2402 = "194_1337966799.879" 
    capture_lex $P2402
    .const 'Sub' $P2396 = "193_1337966799.879" 
    capture_lex $P2396
    .const 'Sub' $P2390 = "192_1337966799.879" 
    capture_lex $P2390
    .const 'Sub' $P2384 = "191_1337966799.879" 
    capture_lex $P2384
    .const 'Sub' $P2378 = "190_1337966799.879" 
    capture_lex $P2378
    .const 'Sub' $P2372 = "189_1337966799.879" 
    capture_lex $P2372
    .const 'Sub' $P2366 = "188_1337966799.879" 
    capture_lex $P2366
    .const 'Sub' $P2360 = "187_1337966799.879" 
    capture_lex $P2360
    .const 'Sub' $P2354 = "186_1337966799.879" 
    capture_lex $P2354
    .const 'Sub' $P2348 = "185_1337966799.879" 
    capture_lex $P2348
    .const 'Sub' $P2342 = "184_1337966799.879" 
    capture_lex $P2342
    .const 'Sub' $P2336 = "183_1337966799.879" 
    capture_lex $P2336
    .const 'Sub' $P2330 = "182_1337966799.879" 
    capture_lex $P2330
    .const 'Sub' $P2324 = "181_1337966799.879" 
    capture_lex $P2324
    .const 'Sub' $P2318 = "180_1337966799.879" 
    capture_lex $P2318
    .const 'Sub' $P2312 = "179_1337966799.879" 
    capture_lex $P2312
    .const 'Sub' $P2306 = "178_1337966799.879" 
    capture_lex $P2306
    .const 'Sub' $P2300 = "177_1337966799.879" 
    capture_lex $P2300
    .const 'Sub' $P2294 = "176_1337966799.879" 
    capture_lex $P2294
    .const 'Sub' $P2289 = "175_1337966799.879" 
    capture_lex $P2289
    .const 'Sub' $P2284 = "174_1337966799.879" 
    capture_lex $P2284
    .const 'Sub' $P2278 = "173_1337966799.879" 
    capture_lex $P2278
    .const 'Sub' $P2272 = "172_1337966799.879" 
    capture_lex $P2272
    .const 'Sub' $P2266 = "171_1337966799.879" 
    capture_lex $P2266
    .const 'Sub' $P2260 = "170_1337966799.879" 
    capture_lex $P2260
    .const 'Sub' $P2254 = "169_1337966799.879" 
    capture_lex $P2254
    .const 'Sub' $P2248 = "168_1337966799.879" 
    capture_lex $P2248
    .const 'Sub' $P2242 = "167_1337966799.879" 
    capture_lex $P2242
    .const 'Sub' $P2236 = "166_1337966799.879" 
    capture_lex $P2236
    .const 'Sub' $P2230 = "165_1337966799.879" 
    capture_lex $P2230
    .const 'Sub' $P2222 = "164_1337966799.879" 
    capture_lex $P2222
    .const 'Sub' $P2216 = "163_1337966799.879" 
    capture_lex $P2216
    .const 'Sub' $P2210 = "162_1337966799.879" 
    capture_lex $P2210
    .const 'Sub' $P2204 = "161_1337966799.879" 
    capture_lex $P2204
    .const 'Sub' $P2198 = "160_1337966799.879" 
    capture_lex $P2198
    .const 'Sub' $P2192 = "159_1337966799.879" 
    capture_lex $P2192
    .const 'Sub' $P2186 = "158_1337966799.879" 
    capture_lex $P2186
    .const 'Sub' $P2178 = "156_1337966799.879" 
    capture_lex $P2178
    .const 'Sub' $P2172 = "155_1337966799.879" 
    capture_lex $P2172
    .const 'Sub' $P2166 = "154_1337966799.879" 
    capture_lex $P2166
    .const 'Sub' $P2160 = "153_1337966799.879" 
    capture_lex $P2160
    .const 'Sub' $P2154 = "152_1337966799.879" 
    capture_lex $P2154
    .const 'Sub' $P2146 = "151_1337966799.879" 
    capture_lex $P2146
    .const 'Sub' $P2140 = "150_1337966799.879" 
    capture_lex $P2140
    .const 'Sub' $P2134 = "149_1337966799.879" 
    capture_lex $P2134
    .const 'Sub' $P2128 = "148_1337966799.879" 
    capture_lex $P2128
    .const 'Sub' $P2122 = "147_1337966799.879" 
    capture_lex $P2122
    .const 'Sub' $P2116 = "146_1337966799.879" 
    capture_lex $P2116
    .const 'Sub' $P2110 = "145_1337966799.879" 
    capture_lex $P2110
    .const 'Sub' $P2104 = "144_1337966799.879" 
    capture_lex $P2104
    .const 'Sub' $P2089 = "143_1337966799.879" 
    capture_lex $P2089
    .const 'Sub' $P2083 = "142_1337966799.879" 
    capture_lex $P2083
    .const 'Sub' $P2076 = "140_1337966799.879" 
    capture_lex $P2076
    .const 'Sub' $P2071 = "139_1337966799.879" 
    capture_lex $P2071
    .const 'Sub' $P2065 = "138_1337966799.879" 
    capture_lex $P2065
    .const 'Sub' $P2059 = "137_1337966799.879" 
    capture_lex $P2059
    .const 'Sub' $P2053 = "136_1337966799.879" 
    capture_lex $P2053
    .const 'Sub' $P2040 = "135_1337966799.879" 
    capture_lex $P2040
    .const 'Sub' $P2033 = "133_1337966799.879" 
    capture_lex $P2033
    .const 'Sub' $P2026 = "132_1337966799.879" 
    capture_lex $P2026
    .const 'Sub' $P2019 = "131_1337966799.879" 
    capture_lex $P2019
    .const 'Sub' $P2009 = "129_1337966799.879" 
    capture_lex $P2009
    .const 'Sub' $P2000 = "128_1337966799.879" 
    capture_lex $P2000
    .const 'Sub' $P1994 = "127_1337966799.879" 
    capture_lex $P1994
    .const 'Sub' $P1988 = "126_1337966799.879" 
    capture_lex $P1988
    .const 'Sub' $P1982 = "125_1337966799.879" 
    capture_lex $P1982
    .const 'Sub' $P1972 = "123_1337966799.879" 
    capture_lex $P1972
    .const 'Sub' $P1966 = "122_1337966799.879" 
    capture_lex $P1966
    .const 'Sub' $P1956 = "121_1337966799.879" 
    capture_lex $P1956
    .const 'Sub' $P1950 = "120_1337966799.879" 
    capture_lex $P1950
    .const 'Sub' $P1944 = "119_1337966799.879" 
    capture_lex $P1944
    .const 'Sub' $P1938 = "118_1337966799.879" 
    capture_lex $P1938
    .const 'Sub' $P1932 = "117_1337966799.879" 
    capture_lex $P1932
    .const 'Sub' $P1890 = "115_1337966799.879" 
    capture_lex $P1890
    .const 'Sub' $P1882 = "114_1337966799.879" 
    capture_lex $P1882
    .const 'Sub' $P1874 = "113_1337966799.879" 
    capture_lex $P1874
    .const 'Sub' $P1866 = "112_1337966799.879" 
    capture_lex $P1866
    .const 'Sub' $P1858 = "111_1337966799.879" 
    capture_lex $P1858
    .const 'Sub' $P1850 = "110_1337966799.879" 
    capture_lex $P1850
    .const 'Sub' $P1842 = "109_1337966799.879" 
    capture_lex $P1842
    .const 'Sub' $P1834 = "108_1337966799.879" 
    capture_lex $P1834
    .const 'Sub' $P1826 = "106_1337966799.879" 
    capture_lex $P1826
    .const 'Sub' $P1820 = "105_1337966799.879" 
    capture_lex $P1820
    .const 'Sub' $P1814 = "104_1337966799.879" 
    capture_lex $P1814
    .const 'Sub' $P1808 = "103_1337966799.879" 
    capture_lex $P1808
    .const 'Sub' $P1802 = "102_1337966799.879" 
    capture_lex $P1802
    .const 'Sub' $P1796 = "101_1337966799.879" 
    capture_lex $P1796
    .const 'Sub' $P1790 = "100_1337966799.879" 
    capture_lex $P1790
    .const 'Sub' $P1784 = "99_1337966799.879" 
    capture_lex $P1784
    .const 'Sub' $P1768 = "98_1337966799.879" 
    capture_lex $P1768
    .const 'Sub' $P1762 = "95_1337966799.879" 
    capture_lex $P1762
    .const 'Sub' $P1756 = "94_1337966799.879" 
    capture_lex $P1756
    .const 'Sub' $P1750 = "93_1337966799.879" 
    capture_lex $P1750
    .const 'Sub' $P1744 = "92_1337966799.879" 
    capture_lex $P1744
    .const 'Sub' $P1738 = "91_1337966799.879" 
    capture_lex $P1738
    .const 'Sub' $P1732 = "90_1337966799.879" 
    capture_lex $P1732
    .const 'Sub' $P1726 = "89_1337966799.879" 
    capture_lex $P1726
    .const 'Sub' $P1720 = "88_1337966799.879" 
    capture_lex $P1720
    .const 'Sub' $P1714 = "87_1337966799.879" 
    capture_lex $P1714
    .const 'Sub' $P1706 = "85_1337966799.879" 
    capture_lex $P1706
    .const 'Sub' $P1700 = "84_1337966799.879" 
    capture_lex $P1700
    .const 'Sub' $P1692 = "82_1337966799.879" 
    capture_lex $P1692
    .const 'Sub' $P1686 = "81_1337966799.879" 
    capture_lex $P1686
    .const 'Sub' $P1680 = "80_1337966799.879" 
    capture_lex $P1680
    .const 'Sub' $P1674 = "79_1337966799.879" 
    capture_lex $P1674
    .const 'Sub' $P1666 = "77_1337966799.879" 
    capture_lex $P1666
    .const 'Sub' $P1660 = "76_1337966799.879" 
    capture_lex $P1660
    .const 'Sub' $P1654 = "75_1337966799.879" 
    capture_lex $P1654
    .const 'Sub' $P1648 = "74_1337966799.879" 
    capture_lex $P1648
    .const 'Sub' $P1642 = "73_1337966799.879" 
    capture_lex $P1642
    .const 'Sub' $P1631 = "72_1337966799.879" 
    capture_lex $P1631
    .const 'Sub' $P1625 = "70_1337966799.879" 
    capture_lex $P1625
    .const 'Sub' $P1619 = "69_1337966799.879" 
    capture_lex $P1619
    .const 'Sub' $P1611 = "67_1337966799.879" 
    capture_lex $P1611
    .const 'Sub' $P1605 = "66_1337966799.879" 
    capture_lex $P1605
    .const 'Sub' $P1598 = "64_1337966799.879" 
    capture_lex $P1598
    .const 'Sub' $P1593 = "63_1337966799.879" 
    capture_lex $P1593
    .const 'Sub' $P1588 = "62_1337966799.879" 
    capture_lex $P1588
    .const 'Sub' $P1583 = "61_1337966799.879" 
    capture_lex $P1583
    .const 'Sub' $P1578 = "60_1337966799.879" 
    capture_lex $P1578
    .const 'Sub' $P1572 = "59_1337966799.879" 
    capture_lex $P1572
    .const 'Sub' $P1567 = "58_1337966799.879" 
    capture_lex $P1567
    .const 'Sub' $P1561 = "57_1337966799.879" 
    capture_lex $P1561
    .const 'Sub' $P1555 = "56_1337966799.879" 
    capture_lex $P1555
    .const 'Sub' $P1549 = "55_1337966799.879" 
    capture_lex $P1549
    .const 'Sub' $P1543 = "54_1337966799.879" 
    capture_lex $P1543
    .const 'Sub' $P1533 = "53_1337966799.879" 
    capture_lex $P1533
    .const 'Sub' $P1528 = "51_1337966799.879" 
    capture_lex $P1528
    .const 'Sub' $P1517 = "50_1337966799.879" 
    capture_lex $P1517
    .const 'Sub' $P1506 = "49_1337966799.879" 
    capture_lex $P1506
    .const 'Sub' $P1495 = "47_1337966799.879" 
    capture_lex $P1495
    .const 'Sub' $P1490 = "45_1337966799.879" 
    capture_lex $P1490
    .const 'Sub' $P1484 = "44_1337966799.879" 
    capture_lex $P1484
    .const 'Sub' $P1478 = "43_1337966799.879" 
    capture_lex $P1478
    .const 'Sub' $P1472 = "42_1337966799.879" 
    capture_lex $P1472
    .const 'Sub' $P1466 = "41_1337966799.879" 
    capture_lex $P1466
    .const 'Sub' $P1450 = "40_1337966799.879" 
    capture_lex $P1450
    .lex "$?PACKAGE", $P1448
    .lex "$?CLASS", $P1449
.annotate 'line', 1255
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<y=>, :assoc<unary>", "%methodop")
.annotate 'line', 1256
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<x=>, :assoc<unary>", "%autoincrement")
.annotate 'line', 1257
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<w=>, :assoc<left>", "%exponentiation")
.annotate 'line', 1258
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<v=>, :assoc<unary>", "%symbolic_unary")
.annotate 'line', 1259
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<u=>, :assoc<left>", "%multiplicative")
.annotate 'line', 1260
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<t=>, :assoc<left>", "%additive")
.annotate 'line', 1261
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<r=>, :assoc<left>", "%concatenation")
.annotate 'line', 1262
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<m=>, :assoc<left>", "%relational")
.annotate 'line', 1263
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<l=>, :assoc<left>", "%tight_and")
.annotate 'line', 1264
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<k=>, :assoc<left>", "%tight_or")
.annotate 'line', 1265
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<j=>, :assoc<right>", "%conditional")
.annotate 'line', 1266
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<i=>, :assoc<right>", "%assignment")
.annotate 'line', 1267
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<g=>, :assoc<list>, :nextterm<nulltermish>", "%comma")
.annotate 'line', 1268
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<f=>, :assoc<list>", "%list_infix")
.annotate 'line', 1269
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<e=>, :assoc<unary>", "%list_prefix")
.annotate 'line', 1368
    .const 'Sub' $P2614 = "229_1337966799.879" 
    newclosure $P2622, $P2614
.annotate 'line', 632
    .return ($P2622)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "TOP" :anon :subid("40_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1451
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 633
    .lex "self", param_1451
.annotate 'line', 635
    $P1453 = root_new ['parrot';'Hash']
    set $P1452, $P1453
    .lex "%*LANG", $P1452
.annotate 'line', 644
    $P1455 = root_new ['parrot';'Hash']
    set $P1454, $P1455
    .lex "%*HOW", $P1454
.annotate 'line', 651
    new $P103, "Undef"
    set $P1456, $P103
    .lex "$file", $P1456
.annotate 'line', 653
    new $P104, "Undef"
    set $P1457, $P104
    .lex "$source_id", $P1457
.annotate 'line', 657
    new $P105, "Undef"
    set $P1458, $P105
    .lex "$*W", $P1458
.annotate 'line', 661
    new $P106, "Undef"
    set $P1459, $P106
    .lex "$*SCOPE", $P1459
.annotate 'line', 662
    new $P107, "Undef"
    set $P1460, $P107
    .lex "$*MULTINESS", $P1460
.annotate 'line', 663
    new $P108, "Undef"
    set $P1461, $P108
    .lex "$*PKGDECL", $P1461
.annotate 'line', 664
    new $P109, "Undef"
    set $P1462, $P109
    .lex "$*INVOCANT_OK", $P1462
.annotate 'line', 665
    new $P110, "Undef"
    set $P1463, $P110
    .lex "$*RETURN_USED", $P1463
.annotate 'line', 633
    set $P113, $P1452
    unless_null $P113, vivify_1228
    get_hll_global $P111, "GLOBAL"
    get_who $P112, $P111
    set $P113, $P112["%LANG"]
    unless_null $P113, vivify_1229
    die "Contextual %*LANG not found"
  vivify_1229:
  vivify_1228:
.annotate 'line', 636
    get_hll_global $P111, "GLOBAL"
    nqp_get_package_through_who $P112, $P111, "NQP"
    get_who $P113, $P112
    set $P114, $P113["Regex"]
    set $P117, $P1452
    unless_null $P117, vivify_1230
    get_hll_global $P115, "GLOBAL"
    get_who $P116, $P115
    set $P117, $P116["%LANG"]
    unless_null $P117, vivify_1231
    die "Contextual %*LANG not found"
  vivify_1231:
    set $P1452, $P117
  vivify_1230:
    set $P117["Regex"], $P114
.annotate 'line', 637
    get_hll_global $P111, "GLOBAL"
    nqp_get_package_through_who $P112, $P111, "NQP"
    get_who $P113, $P112
    set $P114, $P113["RegexActions"]
    set $P117, $P1452
    unless_null $P117, vivify_1232
    get_hll_global $P115, "GLOBAL"
    get_who $P116, $P115
    set $P117, $P116["%LANG"]
    unless_null $P117, vivify_1233
    die "Contextual %*LANG not found"
  vivify_1233:
    set $P1452, $P117
  vivify_1232:
    set $P117["Regex-actions"], $P114
.annotate 'line', 638
    get_hll_global $P111, "GLOBAL"
    nqp_get_package_through_who $P112, $P111, "NQP"
    get_who $P113, $P112
    set $P114, $P113["Grammar"]
    set $P117, $P1452
    unless_null $P117, vivify_1234
    get_hll_global $P115, "GLOBAL"
    get_who $P116, $P115
    set $P117, $P116["%LANG"]
    unless_null $P117, vivify_1235
    die "Contextual %*LANG not found"
  vivify_1235:
    set $P1452, $P117
  vivify_1234:
    set $P117["MAIN"], $P114
.annotate 'line', 639
    get_hll_global $P111, "GLOBAL"
    nqp_get_package_through_who $P112, $P111, "NQP"
    get_who $P113, $P112
    set $P114, $P113["Actions"]
    set $P117, $P1452
    unless_null $P117, vivify_1236
    get_hll_global $P115, "GLOBAL"
    get_who $P116, $P115
    set $P117, $P116["%LANG"]
    unless_null $P117, vivify_1237
    die "Contextual %*LANG not found"
  vivify_1237:
    set $P1452, $P117
  vivify_1236:
    set $P117["MAIN-actions"], $P114
.annotate 'line', 633
    set $P113, $P1454
    unless_null $P113, vivify_1238
    get_hll_global $P111, "GLOBAL"
    get_who $P112, $P111
    set $P113, $P112["%HOW"]
    unless_null $P113, vivify_1239
    die "Contextual %*HOW not found"
  vivify_1239:
  vivify_1238:
.annotate 'line', 645
    get_knowhow $P111
    set $P114, $P1454
    unless_null $P114, vivify_1240
    get_hll_global $P112, "GLOBAL"
    get_who $P113, $P112
    set $P114, $P113["%HOW"]
    unless_null $P114, vivify_1241
    die "Contextual %*HOW not found"
  vivify_1241:
    set $P1454, $P114
  vivify_1240:
    set $P114["knowhow"], $P111
.annotate 'line', 646
    get_knowhow_attribute $P111
    set $P114, $P1454
    unless_null $P114, vivify_1242
    get_hll_global $P112, "GLOBAL"
    get_who $P113, $P112
    set $P114, $P113["%HOW"]
    unless_null $P114, vivify_1243
    die "Contextual %*HOW not found"
  vivify_1243:
    set $P1454, $P114
  vivify_1242:
    set $P114["knowhow-attr"], $P111
.annotate 'line', 651
    find_caller_lex $P111, "$?FILES"
    set $P1456, $P111
.annotate 'line', 653
    set $P111, param_1451
    nqp_decontainerize $P112, $P111
    find_lex $P113, "$?PACKAGE"
    get_who $P114, $P113
    set $P117, $P114["NQPCursor"]
    unless_null $P117, vivify_1244
    get_hll_global $P115, "GLOBAL"
    get_who $P116, $P115
    set $P117, $P116["NQPCursor"]
  vivify_1244:
    type_check $I100, $P112, $P117
    if $I100, if_1464
.annotate 'line', 655
    set $P125, param_1451
    nqp_decontainerize $P126, $P125
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P128, $P127, "Regex"
    get_who $P129, $P128
    set $P130, $P129["Cursor"]
    getattribute $P131, $P126, $P130, "$!target"
    set $S100, $P131
.annotate 'line', 653
    goto if_1464_end
  if_1464:
.annotate 'line', 654
    set $P118, param_1451
    nqp_decontainerize $P119, $P118
    find_lex $P120, "$?PACKAGE"
    get_who $P121, $P120
    set $P124, $P121["NQPCursor"]
    unless_null $P124, vivify_1245
    get_hll_global $P122, "GLOBAL"
    get_who $P123, $P122
    set $P124, $P123["NQPCursor"]
  vivify_1245:
    repr_get_attr_str $S101, $P119, $P124, "$!target"
    set $S100, $S101
  if_1464_end:
.annotate 'line', 653
    nqp_sha1 $S102, $S100
    new $P132, 'String'
    set $P132, $S102
.annotate 'line', 655
    concat $P133, $P132, "-"
.annotate 'line', 656
    time $N100
    set $S103, $N100
    concat $P134, $P133, $S103
    set $P1457, $P134
.annotate 'line', 657
    set $P112, $P1456
    unless_null $P112, vivify_1246
    new $P112, "Undef"
  vivify_1246:
    isnull $I100, $P112
    if $I100, if_1465
.annotate 'line', 659
    get_hll_global $P119, "GLOBAL"
    nqp_get_package_through_who $P120, $P119, "NQP"
    get_who $P121, $P120
    set $P122, $P121["World"]
    set $P123, $P1457
    unless_null $P123, vivify_1247
    new $P123, "Undef"
  vivify_1247:
    set $P124, $P1456
    unless_null $P124, vivify_1248
    new $P124, "Undef"
  vivify_1248:
    $P125 = $P122."new"($P123 :named("handle"), $P124 :named("description"))
    set $P111, $P125
.annotate 'line', 657
    goto if_1465_end
  if_1465:
.annotate 'line', 658
    get_hll_global $P113, "GLOBAL"
    nqp_get_package_through_who $P114, $P113, "NQP"
    get_who $P115, $P114
    set $P116, $P115["World"]
    set $P117, $P1457
    unless_null $P117, vivify_1249
    new $P117, "Undef"
  vivify_1249:
    $P118 = $P116."new"($P117 :named("handle"))
    set $P111, $P118
  if_1465_end:
.annotate 'line', 657
    set $P1458, $P111
.annotate 'line', 661
    new $P111, "String"
    assign $P111, ""
    set $P1459, $P111
.annotate 'line', 662
    new $P111, "String"
    assign $P111, ""
    set $P1460, $P111
.annotate 'line', 663
    new $P111, "String"
    assign $P111, ""
    set $P1461, $P111
.annotate 'line', 664
    new $P111, "Float"
    assign $P111, 0
    set $P1462, $P111
.annotate 'line', 665
    new $P111, "Float"
    assign $P111, 0
    set $P1463, $P111
.annotate 'line', 666
    set $P111, param_1451
    nqp_decontainerize $P112, $P111
    $P113 = $P112."comp_unit"()
.annotate 'line', 633
    .return ($P113)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "identifier"  :subid("41_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1467
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 671
    .lex "self", param_1467
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1468
    .lex "$/", $P1469
    .local string rx10_tgt
    .local int rx10_pos
    .local int rx10_off
    .local int rx10_eos
    .local int rx10_rep
    .local pmc rx10_cur
    .local pmc rx10_curclass
    .local pmc rx10_bstack
    .local pmc rx10_cstack
    (rx10_cur, rx10_tgt, rx10_pos, rx10_curclass, rx10_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx10_cur
    length rx10_eos, rx10_tgt
    eq $I19, 1, rx10_restart
    repr_get_attr_int $I11, self, rx10_curclass, "$!from"
    ne $I11, -1, rxscan11_done
    goto rxscan11_scan
  rxscan11_loop:
    inc rx10_pos
    gt rx10_pos, rx10_eos, rx10_fail
    repr_bind_attr_int rx10_cur, rx10_curclass, "$!from", rx10_pos
  rxscan11_scan:
    nqp_rxmark rx10_bstack, rxscan11_loop, rx10_pos, 0
  rxscan11_done:
    repr_bind_attr_int rx10_cur, rx10_curclass, "$!pos", rx10_pos
    $P11 = rx10_cur."ident"()
    repr_get_attr_int $I11, $P11, rx10_curclass, "$!pos"
    lt $I11, 0, rx10_fail
    repr_get_attr_int rx10_pos, $P11, rx10_curclass, "$!pos"
  # rx rxquantr13 ** 0..-1
    nqp_rxmark rx10_bstack, rxquantr13_done, rx10_pos, 0
  rxquantr13_loop:
  alt14_0:
    nqp_rxmark rx10_bstack, alt14_1, rx10_pos, 0
    add $I11, rx10_pos, 1
    gt $I11, rx10_eos, rx10_fail
    substr $S10, rx10_tgt, rx10_pos, 1
    ne $S10, ucs4:"-", rx10_fail
    add rx10_pos, 1
    goto alt14_end
  alt14_1:
    ge rx10_pos, rx10_eos, rx10_fail
    substr $S11, rx10_tgt, rx10_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx10_fail
    inc rx10_pos
  alt14_end:
    repr_bind_attr_int rx10_cur, rx10_curclass, "$!pos", rx10_pos
    $P11 = rx10_cur."ident"()
    repr_get_attr_int $I11, $P11, rx10_curclass, "$!pos"
    lt $I11, 0, rx10_fail
    repr_get_attr_int rx10_pos, $P11, rx10_curclass, "$!pos"
    nqp_rxpeek $I19, rx10_bstack, rxquantr13_done
    inc $I19
    inc $I19
    set rx10_rep, rx10_bstack[$I19]
    nqp_rxcommit rx10_bstack, rxquantr13_done
    inc rx10_rep
    nqp_rxmark rx10_bstack, rxquantr13_done, rx10_pos, rx10_rep
    goto rxquantr13_loop
  rxquantr13_done:
    rx10_cur."!cursor_pass"(rx10_pos, "identifier", 'backtrack'=>1)
    .return (rx10_cur)
  rx10_restart:
    repr_get_attr_obj rx10_cstack, rx10_cur, rx10_curclass, "$!cstack"
  rx10_fail:
    unless rx10_bstack, rx10_done
    pop $I19, rx10_bstack
    if_null rx10_cstack, rx10_cstack_done
    unless rx10_cstack, rx10_cstack_done
    dec $I19
    set $P11, rx10_cstack[$I19]
  rx10_cstack_done:
    pop rx10_rep, rx10_bstack
    pop rx10_pos, rx10_bstack
    pop $I19, rx10_bstack
    lt rx10_pos, -1, rx10_done
    lt rx10_pos, 0, rx10_fail
    eq $I19, 0, rx10_fail
    if_null rx10_cstack, rx10_jump
    elements $I18, rx10_bstack
    le $I18, 0, rx10_cut
    dec $I18
    set $I18, rx10_bstack[$I18]
  rx10_cut:
    assign rx10_cstack, $I18
  rx10_jump:
    jump $I19
  rx10_done:
    rx10_cur."!cursor_fail"()
    .return (rx10_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "41_1337966799.879_caps"  :subid("399_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 671
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "41_1337966799.879_nfa"  :subid("400_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 671
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "ident"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 45
    push $P106, 3
    push $P106, 6
    push $P106, "'"
    push $P106, 3
    push $P106, 1
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "ident"
    push $P107, 2
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "name"  :subid("42_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1473
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 673
    .lex "self", param_1473
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1474
    .lex "$/", $P1475
    .local string rx16_tgt
    .local int rx16_pos
    .local int rx16_off
    .local int rx16_eos
    .local int rx16_rep
    .local pmc rx16_cur
    .local pmc rx16_curclass
    .local pmc rx16_bstack
    .local pmc rx16_cstack
    (rx16_cur, rx16_tgt, rx16_pos, rx16_curclass, rx16_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx16_cur
    length rx16_eos, rx16_tgt
    eq $I19, 1, rx16_restart
    repr_get_attr_int $I11, self, rx16_curclass, "$!from"
    ne $I11, -1, rxscan17_done
    goto rxscan17_scan
  rxscan17_loop:
    inc rx16_pos
    gt rx16_pos, rx16_eos, rx16_fail
    repr_bind_attr_int rx16_cur, rx16_curclass, "$!from", rx16_pos
  rxscan17_scan:
    nqp_rxmark rx16_bstack, rxscan17_loop, rx16_pos, 0
  rxscan17_done:
    repr_bind_attr_int rx16_cur, rx16_curclass, "$!pos", rx16_pos
    $P11 = rx16_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx16_curclass, "$!pos"
    lt $I11, 0, rx16_fail
    nqp_rxmark rx16_bstack, rxsubrule18_pass, -1, 0
  rxsubrule18_pass:
    rx16_cstack = rx16_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx16_pos, $P11, rx16_curclass, "$!pos"
  # rx rxquantr19 ** 0..-1
    nqp_rxmark rx16_bstack, rxquantr19_done, rx16_pos, 0
  rxquantr19_loop:
    add $I11, rx16_pos, 2
    gt $I11, rx16_eos, rx16_fail
    substr $S10, rx16_tgt, rx16_pos, 2
    ne $S10, ucs4:"::", rx16_fail
    add rx16_pos, 2
    repr_bind_attr_int rx16_cur, rx16_curclass, "$!pos", rx16_pos
    $P11 = rx16_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx16_curclass, "$!pos"
    lt $I11, 0, rx16_fail
    nqp_rxmark rx16_bstack, rxsubrule20_pass, -1, 0
  rxsubrule20_pass:
    rx16_cstack = rx16_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx16_pos, $P11, rx16_curclass, "$!pos"
    nqp_rxpeek $I19, rx16_bstack, rxquantr19_done
    inc $I19
    inc $I19
    set rx16_rep, rx16_bstack[$I19]
    nqp_rxcommit rx16_bstack, rxquantr19_done
    inc rx16_rep
    nqp_rxmark rx16_bstack, rxquantr19_done, rx16_pos, rx16_rep
    goto rxquantr19_loop
  rxquantr19_done:
    rx16_cur."!cursor_pass"(rx16_pos, "name", 'backtrack'=>1)
    .return (rx16_cur)
  rx16_restart:
    repr_get_attr_obj rx16_cstack, rx16_cur, rx16_curclass, "$!cstack"
  rx16_fail:
    unless rx16_bstack, rx16_done
    pop $I19, rx16_bstack
    if_null rx16_cstack, rx16_cstack_done
    unless rx16_cstack, rx16_cstack_done
    dec $I19
    set $P11, rx16_cstack[$I19]
  rx16_cstack_done:
    pop rx16_rep, rx16_bstack
    pop rx16_pos, rx16_bstack
    pop $I19, rx16_bstack
    lt rx16_pos, -1, rx16_done
    lt rx16_pos, 0, rx16_fail
    eq $I19, 0, rx16_fail
    if_null rx16_cstack, rx16_jump
    elements $I18, rx16_bstack
    le $I18, 0, rx16_cut
    dec $I18
    set $I18, rx16_bstack[$I18]
  rx16_cut:
    assign rx16_cstack, $I18
  rx16_jump:
    jump $I19
  rx16_done:
    rx16_cur."!cursor_fail"()
    .return (rx16_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "42_1337966799.879_caps"  :subid("401_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 673
    new $P104, "Hash"
    set $P104["identifier"], 2
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "42_1337966799.879_nfa"  :subid("402_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 673
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "identifier"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 58
    push $P106, 3
    push $P106, 1
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 58
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "identifier"
    push $P108, 2
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "deflongname"  :subid("43_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1479
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 675
    .lex "self", param_1479
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1480
    .lex "$/", $P1481
    .local string rx21_tgt
    .local int rx21_pos
    .local int rx21_off
    .local int rx21_eos
    .local int rx21_rep
    .local pmc rx21_cur
    .local pmc rx21_curclass
    .local pmc rx21_bstack
    .local pmc rx21_cstack
    (rx21_cur, rx21_tgt, rx21_pos, rx21_curclass, rx21_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx21_cur
    length rx21_eos, rx21_tgt
    eq $I19, 1, rx21_restart
    repr_get_attr_int $I11, self, rx21_curclass, "$!from"
    ne $I11, -1, rxscan22_done
    goto rxscan22_scan
  rxscan22_loop:
    inc rx21_pos
    gt rx21_pos, rx21_eos, rx21_fail
    repr_bind_attr_int rx21_cur, rx21_curclass, "$!from", rx21_pos
  rxscan22_scan:
    nqp_rxmark rx21_bstack, rxscan22_loop, rx21_pos, 0
  rxscan22_done:
    repr_bind_attr_int rx21_cur, rx21_curclass, "$!pos", rx21_pos
    $P11 = rx21_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx21_curclass, "$!pos"
    lt $I11, 0, rx21_fail
    nqp_rxmark rx21_bstack, rxsubrule23_pass, -1, 0
  rxsubrule23_pass:
    rx21_cstack = rx21_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx21_pos, $P11, rx21_curclass, "$!pos"
  # rx rxquantr24 ** 0..1
    nqp_rxmark rx21_bstack, rxquantr24_done, rx21_pos, 0
  rxquantr24_loop:
    repr_bind_attr_int rx21_cur, rx21_curclass, "$!pos", rx21_pos
    $P11 = rx21_cur."colonpair"()
    repr_get_attr_int $I11, $P11, rx21_curclass, "$!pos"
    lt $I11, 0, rx21_fail
    goto rxsubrule25_pass
  rxsubrule25_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx21_curclass, "$!pos"
    lt $I11, 0, rx21_fail
  rxsubrule25_pass:
    rx21_cstack = rx21_cur."!cursor_capture"($P11, "colonpair")
    set_addr $I11, rxsubrule25_back
    push rx21_bstack, $I11
    push rx21_bstack, 0
    push rx21_bstack, rx21_pos
    elements $I11, rx21_cstack
    push rx21_bstack, $I11
    repr_get_attr_int rx21_pos, $P11, rx21_curclass, "$!pos"
    nqp_rxpeek $I19, rx21_bstack, rxquantr24_done
    inc $I19
    inc $I19
    set rx21_rep, rx21_bstack[$I19]
    nqp_rxcommit rx21_bstack, rxquantr24_done
    inc rx21_rep
  rxquantr24_done:
    rx21_cur."!cursor_pass"(rx21_pos, "deflongname", 'backtrack'=>1)
    .return (rx21_cur)
  rx21_restart:
    repr_get_attr_obj rx21_cstack, rx21_cur, rx21_curclass, "$!cstack"
  rx21_fail:
    unless rx21_bstack, rx21_done
    pop $I19, rx21_bstack
    if_null rx21_cstack, rx21_cstack_done
    unless rx21_cstack, rx21_cstack_done
    dec $I19
    set $P11, rx21_cstack[$I19]
  rx21_cstack_done:
    pop rx21_rep, rx21_bstack
    pop rx21_pos, rx21_bstack
    pop $I19, rx21_bstack
    lt rx21_pos, -1, rx21_done
    lt rx21_pos, 0, rx21_fail
    eq $I19, 0, rx21_fail
    if_null rx21_cstack, rx21_jump
    elements $I18, rx21_bstack
    le $I18, 0, rx21_cut
    dec $I18
    set $I18, rx21_bstack[$I18]
  rx21_cut:
    assign rx21_cstack, $I18
  rx21_jump:
    jump $I19
  rx21_done:
    rx21_cur."!cursor_fail"()
    .return (rx21_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "43_1337966799.879_caps"  :subid("403_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 675
    new $P104, "Hash"
    set $P104["identifier"], 0
    set $P104["colonpair"], 2
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "43_1337966799.879_nfa"  :subid("404_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 675
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "identifier"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "colonpair"
    push $P106, 0
    push $P106, 1
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "ENDSTMT"  :subid("44_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1485
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 679
    .lex "self", param_1485
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1486
    .lex "$/", $P1487
    .local string rx26_tgt
    .local int rx26_pos
    .local int rx26_off
    .local int rx26_eos
    .local int rx26_rep
    .local pmc rx26_cur
    .local pmc rx26_curclass
    .local pmc rx26_bstack
    .local pmc rx26_cstack
    (rx26_cur, rx26_tgt, rx26_pos, rx26_curclass, rx26_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx26_cur
    length rx26_eos, rx26_tgt
    eq $I19, 1, rx26_restart
    repr_get_attr_int $I11, self, rx26_curclass, "$!from"
    ne $I11, -1, rxscan27_done
    goto rxscan27_scan
  rxscan27_loop:
    inc rx26_pos
    gt rx26_pos, rx26_eos, rx26_fail
    repr_bind_attr_int rx26_cur, rx26_curclass, "$!from", rx26_pos
  rxscan27_scan:
    nqp_rxmark rx26_bstack, rxscan27_loop, rx26_pos, 0
  rxscan27_done:
  # rx rxquantr28 ** 0..1
    nqp_rxmark rx26_bstack, rxquantr28_done, rx26_pos, 0
  rxquantr28_loop:
  alt29_0:
    nqp_rxmark rx26_bstack, alt29_1, rx26_pos, 0
  # rx rxquantr30 ** 0..-1
    nqp_rxmark rx26_bstack, rxquantr30_done, rx26_pos, 0
  rxquantr30_loop:
    ge rx26_pos, rx26_eos, rx26_fail
    substr $S11, rx26_tgt, rx26_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx26_fail
    inc rx26_pos
    nqp_rxpeek $I19, rx26_bstack, rxquantr30_done
    inc $I19
    inc $I19
    set rx26_rep, rx26_bstack[$I19]
    nqp_rxcommit rx26_bstack, rxquantr30_done
    inc rx26_rep
    nqp_rxmark rx26_bstack, rxquantr30_done, rx26_pos, rx26_rep
    goto rxquantr30_loop
  rxquantr30_done:
    is_cclass $I11, .CCLASS_NEWLINE, rx26_tgt, rx26_pos
    if $I11, rxanchor31_done
    ne rx26_pos, rx26_eos, rx26_fail
    eq rx26_pos, 0, rxanchor31_done
    sub $I11, rx26_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx26_tgt, $I11
    if $I11, rx26_fail
  rxanchor31_done:
    repr_bind_attr_int rx26_cur, rx26_curclass, "$!pos", rx26_pos
    $P11 = rx26_cur."ws"()
    repr_get_attr_int $I11, $P11, rx26_curclass, "$!pos"
    lt $I11, 0, rx26_fail
    repr_get_attr_int rx26_pos, $P11, rx26_curclass, "$!pos"
    repr_bind_attr_int rx26_cur, rx26_curclass, "$!pos", rx26_pos
    $P11 = rx26_cur."MARKER"("endstmt")
    repr_get_attr_int $I11, $P11, rx26_curclass, "$!pos"
    lt $I11, 0, rx26_fail
    goto alt29_end
  alt29_1:
  # rx rxquantr33 ** 0..1
    nqp_rxmark rx26_bstack, rxquantr33_done, rx26_pos, 0
  rxquantr33_loop:
    repr_bind_attr_int rx26_cur, rx26_curclass, "$!pos", rx26_pos
    $P11 = rx26_cur."unv"()
    repr_get_attr_int $I11, $P11, rx26_curclass, "$!pos"
    lt $I11, 0, rx26_fail
    goto rxsubrule34_pass
  rxsubrule34_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx26_curclass, "$!pos"
    lt $I11, 0, rx26_fail
  rxsubrule34_pass:
    rx26_cstack = rx26_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule34_back
    push rx26_bstack, $I11
    push rx26_bstack, 0
    push rx26_bstack, rx26_pos
    elements $I11, rx26_cstack
    push rx26_bstack, $I11
    repr_get_attr_int rx26_pos, $P11, rx26_curclass, "$!pos"
    nqp_rxpeek $I19, rx26_bstack, rxquantr33_done
    inc $I19
    inc $I19
    set rx26_rep, rx26_bstack[$I19]
    nqp_rxcommit rx26_bstack, rxquantr33_done
    inc rx26_rep
  rxquantr33_done:
    is_cclass $I11, .CCLASS_NEWLINE, rx26_tgt, rx26_pos
    if $I11, rxanchor35_done
    ne rx26_pos, rx26_eos, rx26_fail
    eq rx26_pos, 0, rxanchor35_done
    sub $I11, rx26_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx26_tgt, $I11
    if $I11, rx26_fail
  rxanchor35_done:
    repr_bind_attr_int rx26_cur, rx26_curclass, "$!pos", rx26_pos
    $P11 = rx26_cur."ws"()
    repr_get_attr_int $I11, $P11, rx26_curclass, "$!pos"
    lt $I11, 0, rx26_fail
    repr_get_attr_int rx26_pos, $P11, rx26_curclass, "$!pos"
    repr_bind_attr_int rx26_cur, rx26_curclass, "$!pos", rx26_pos
    $P11 = rx26_cur."MARKER"("endstmt")
    repr_get_attr_int $I11, $P11, rx26_curclass, "$!pos"
    lt $I11, 0, rx26_fail
  alt29_end:
    nqp_rxpeek $I19, rx26_bstack, rxquantr28_done
    inc $I19
    inc $I19
    set rx26_rep, rx26_bstack[$I19]
    nqp_rxcommit rx26_bstack, rxquantr28_done
    inc rx26_rep
  rxquantr28_done:
    rx26_cur."!cursor_pass"(rx26_pos, "ENDSTMT", 'backtrack'=>1)
    .return (rx26_cur)
  rx26_restart:
    repr_get_attr_obj rx26_cstack, rx26_cur, rx26_curclass, "$!cstack"
  rx26_fail:
    unless rx26_bstack, rx26_done
    pop $I19, rx26_bstack
    if_null rx26_cstack, rx26_cstack_done
    unless rx26_cstack, rx26_cstack_done
    dec $I19
    set $P11, rx26_cstack[$I19]
  rx26_cstack_done:
    pop rx26_rep, rx26_bstack
    pop rx26_pos, rx26_bstack
    pop $I19, rx26_bstack
    lt rx26_pos, -1, rx26_done
    lt rx26_pos, 0, rx26_fail
    eq $I19, 0, rx26_fail
    if_null rx26_cstack, rx26_jump
    elements $I18, rx26_bstack
    le $I18, 0, rx26_cut
    dec $I18
    set $I18, rx26_bstack[$I18]
  rx26_cut:
    assign rx26_cstack, $I18
  rx26_jump:
    jump $I19
  rx26_done:
    rx26_cur."!cursor_fail"()
    .return (rx26_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "44_1337966799.879_caps"  :subid("405_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 679
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "44_1337966799.879_nfa"  :subid("406_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 679
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 6
    push $P105, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P105, 1
    push $P105, 1
    push $P105, 0
    push $P105, 2
    push $P105, 8
    push $P105, "unv"
    push $P105, 5
    push $P105, 1
    push $P105, 0
    push $P105, 5
    push $P105, 1
    push $P105, 0
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, 1
    push $P106, 0
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "ws"
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "MARKER"
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, 1
    push $P109, 0
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 8
    push $P110, "ws"
    push $P110, 7
    new $P111, "ResizablePMCArray"
    push $P111, 8
    push $P111, "MARKER"
    push $P111, 0
    new $P112, "ResizablePMCArray"
    push $P112, $P104
    push $P112, $P105
    push $P112, $P106
    push $P112, $P107
    push $P112, $P108
    push $P112, $P109
    push $P112, $P110
    push $P112, $P111
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "ws"  :subid("45_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1491
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 686
    .lex "self", param_1491
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1492
    .lex "$/", $P1493
    .local string rx37_tgt
    .local int rx37_pos
    .local int rx37_off
    .local int rx37_eos
    .local int rx37_rep
    .local pmc rx37_cur
    .local pmc rx37_curclass
    .local pmc rx37_bstack
    .local pmc rx37_cstack
    (rx37_cur, rx37_tgt, rx37_pos, rx37_curclass, rx37_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx37_cur
    length rx37_eos, rx37_tgt
    eq $I19, 1, rx37_restart
    repr_get_attr_int $I11, self, rx37_curclass, "$!from"
    ne $I11, -1, rxscan38_done
    goto rxscan38_scan
  rxscan38_loop:
    inc rx37_pos
    gt rx37_pos, rx37_eos, rx37_fail
    repr_bind_attr_int rx37_cur, rx37_curclass, "$!from", rx37_pos
  rxscan38_scan:
    nqp_rxmark rx37_bstack, rxscan38_loop, rx37_pos, 0
  rxscan38_done:
  alt39_0:
    nqp_rxmark rx37_bstack, alt39_1, rx37_pos, 0
    repr_bind_attr_int rx37_cur, rx37_curclass, "$!pos", rx37_pos
    $P11 = rx37_cur."MARKED"("ws")
    repr_get_attr_int $I11, $P11, rx37_curclass, "$!pos"
    lt $I11, 0, rx37_fail
    goto alt39_end
  alt39_1:
    repr_bind_attr_int rx37_cur, rx37_curclass, "$!pos", rx37_pos
    $P11 = rx37_cur."ww"()
    repr_get_attr_int $I11, $P11, rx37_curclass, "$!pos"
    ge $I11, 0, rx37_fail
  # rx rxquantr40 ** 0..-1
    nqp_rxmark rx37_bstack, rxquantr40_done, rx37_pos, 0
  rxquantr40_loop:
  alt41_0:
    nqp_rxmark rx37_bstack, alt41_1, rx37_pos, 0
  # rx rxquantr42 ** 1..-1
    nqp_rxmark rx37_bstack, rxquantr42_done, -1, 0
  rxquantr42_loop:
    ge rx37_pos, rx37_eos, rx37_fail
    substr $S11, rx37_tgt, rx37_pos, 1
    index $I11, ucs4:"\n\x{b}\f\r\x{85}\u2028\u2029", $S11
    lt $I11, 0, rx37_fail
    inc rx37_pos
    nqp_rxpeek $I19, rx37_bstack, rxquantr42_done
    inc $I19
    inc $I19
    set rx37_rep, rx37_bstack[$I19]
    nqp_rxcommit rx37_bstack, rxquantr42_done
    inc rx37_rep
    nqp_rxmark rx37_bstack, rxquantr42_done, rx37_pos, rx37_rep
    goto rxquantr42_loop
  rxquantr42_done:
    goto alt41_end
  alt41_1:
    nqp_rxmark rx37_bstack, alt41_2, rx37_pos, 0
    add $I11, rx37_pos, 1
    gt $I11, rx37_eos, rx37_fail
    substr $S10, rx37_tgt, rx37_pos, 1
    ne $S10, ucs4:"#", rx37_fail
    add rx37_pos, 1
  # rx rxquantr43 ** 0..-1
    nqp_rxmark rx37_bstack, rxquantr43_done, rx37_pos, 0
  rxquantr43_loop:
    ge rx37_pos, rx37_eos, rx37_fail
    is_cclass $I11, .CCLASS_NEWLINE, rx37_tgt, rx37_pos
    if $I11, rx37_fail
    add rx37_pos, 1
    nqp_rxpeek $I19, rx37_bstack, rxquantr43_done
    inc $I19
    inc $I19
    set rx37_rep, rx37_bstack[$I19]
    nqp_rxcommit rx37_bstack, rxquantr43_done
    inc rx37_rep
    nqp_rxmark rx37_bstack, rxquantr43_done, rx37_pos, rx37_rep
    goto rxquantr43_loop
  rxquantr43_done:
    goto alt41_end
  alt41_2:
    nqp_rxmark rx37_bstack, alt41_3, rx37_pos, 0
    eq rx37_pos, 0, rxanchor44_done
    ge rx37_pos, rx37_eos, rx37_fail
    sub $I11, rx37_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx37_tgt, $I11
    unless $I11, rx37_fail
  rxanchor44_done:
    repr_bind_attr_int rx37_cur, rx37_curclass, "$!pos", rx37_pos
    $P11 = rx37_cur."pod_comment"()
    repr_get_attr_int $I11, $P11, rx37_curclass, "$!pos"
    lt $I11, 0, rx37_fail
    repr_get_attr_int rx37_pos, $P11, rx37_curclass, "$!pos"
    goto alt41_end
  alt41_3:
  # rx rxquantr46 ** 1..-1
    nqp_rxmark rx37_bstack, rxquantr46_done, -1, 0
  rxquantr46_loop:
    ge rx37_pos, rx37_eos, rx37_fail
    substr $S11, rx37_tgt, rx37_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx37_fail
    inc rx37_pos
    nqp_rxpeek $I19, rx37_bstack, rxquantr46_done
    inc $I19
    inc $I19
    set rx37_rep, rx37_bstack[$I19]
    nqp_rxcommit rx37_bstack, rxquantr46_done
    inc rx37_rep
    nqp_rxmark rx37_bstack, rxquantr46_done, rx37_pos, rx37_rep
    goto rxquantr46_loop
  rxquantr46_done:
  alt41_end:
    nqp_rxpeek $I19, rx37_bstack, rxquantr40_done
    inc $I19
    inc $I19
    set rx37_rep, rx37_bstack[$I19]
    nqp_rxcommit rx37_bstack, rxquantr40_done
    inc rx37_rep
    nqp_rxmark rx37_bstack, rxquantr40_done, rx37_pos, rx37_rep
    goto rxquantr40_loop
  rxquantr40_done:
    repr_bind_attr_int rx37_cur, rx37_curclass, "$!pos", rx37_pos
    $P11 = rx37_cur."MARKER"("ws")
    repr_get_attr_int $I11, $P11, rx37_curclass, "$!pos"
    lt $I11, 0, rx37_fail
  alt39_end:
    rx37_cur."!cursor_pass"(rx37_pos, "ws", 'backtrack'=>1)
    .return (rx37_cur)
  rx37_restart:
    repr_get_attr_obj rx37_cstack, rx37_cur, rx37_curclass, "$!cstack"
  rx37_fail:
    unless rx37_bstack, rx37_done
    pop $I19, rx37_bstack
    if_null rx37_cstack, rx37_cstack_done
    unless rx37_cstack, rx37_cstack_done
    dec $I19
    set $P11, rx37_cstack[$I19]
  rx37_cstack_done:
    pop rx37_rep, rx37_bstack
    pop rx37_pos, rx37_bstack
    pop $I19, rx37_bstack
    lt rx37_pos, -1, rx37_done
    lt rx37_pos, 0, rx37_fail
    eq $I19, 0, rx37_fail
    if_null rx37_cstack, rx37_jump
    elements $I18, rx37_bstack
    le $I18, 0, rx37_cut
    dec $I18
    set $I18, rx37_bstack[$I18]
  rx37_cut:
    assign rx37_cstack, $I18
  rx37_jump:
    jump $I19
  rx37_done:
    rx37_cur."!cursor_fail"()
    .return (rx37_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "45_1337966799.879_caps"  :subid("407_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 686
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "unv"  :subid("47_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1496
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 697
    .const 'Sub' $P1502 = "46_1337966799.879" 
    capture_lex $P1502
    .lex "self", param_1496
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1497
    .lex "$/", $P1498
    .local string rx47_tgt
    .local int rx47_pos
    .local int rx47_off
    .local int rx47_eos
    .local int rx47_rep
    .local pmc rx47_cur
    .local pmc rx47_curclass
    .local pmc rx47_bstack
    .local pmc rx47_cstack
    (rx47_cur, rx47_tgt, rx47_pos, rx47_curclass, rx47_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx47_cur
    length rx47_eos, rx47_tgt
    eq $I19, 1, rx47_restart
    repr_get_attr_int $I11, self, rx47_curclass, "$!from"
    ne $I11, -1, rxscan48_done
    goto rxscan48_scan
  rxscan48_loop:
    inc rx47_pos
    gt rx47_pos, rx47_eos, rx47_fail
    repr_bind_attr_int rx47_cur, rx47_curclass, "$!from", rx47_pos
  rxscan48_scan:
    nqp_rxmark rx47_bstack, rxscan48_loop, rx47_pos, 0
  rxscan48_done:
  alt49_0:
    nqp_rxmark rx47_bstack, alt49_1, rx47_pos, 0
    eq rx47_pos, 0, rxanchor50_done
    ge rx47_pos, rx47_eos, rx47_fail
    sub $I11, rx47_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx47_tgt, $I11
    unless $I11, rx47_fail
  rxanchor50_done:
    .const 'Sub' $P1502 = "46_1337966799.879" 
    capture_lex $P1502
    repr_bind_attr_int rx47_cur, rx47_curclass, "$!pos", rx47_pos
    $P11 = rx47_cur."before"($P1502)
    repr_get_attr_int $I11, $P11, rx47_curclass, "$!pos"
    lt $I11, 0, rx47_fail
    repr_bind_attr_int rx47_cur, rx47_curclass, "$!pos", rx47_pos
    $P11 = rx47_cur."pod_comment"()
    repr_get_attr_int $I11, $P11, rx47_curclass, "$!pos"
    lt $I11, 0, rx47_fail
    repr_get_attr_int rx47_pos, $P11, rx47_curclass, "$!pos"
    goto alt49_end
  alt49_1:
    nqp_rxmark rx47_bstack, alt49_2, rx47_pos, 0
  # rx rxquantr56 ** 0..-1
    nqp_rxmark rx47_bstack, rxquantr56_done, rx47_pos, 0
  rxquantr56_loop:
    ge rx47_pos, rx47_eos, rx47_fail
    substr $S11, rx47_tgt, rx47_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx47_fail
    inc rx47_pos
    nqp_rxpeek $I19, rx47_bstack, rxquantr56_done
    inc $I19
    inc $I19
    set rx47_rep, rx47_bstack[$I19]
    nqp_rxcommit rx47_bstack, rxquantr56_done
    inc rx47_rep
    nqp_rxmark rx47_bstack, rxquantr56_done, rx47_pos, rx47_rep
    goto rxquantr56_loop
  rxquantr56_done:
    add $I11, rx47_pos, 1
    gt $I11, rx47_eos, rx47_fail
    substr $S10, rx47_tgt, rx47_pos, 1
    ne $S10, ucs4:"#", rx47_fail
    add rx47_pos, 1
  # rx rxquantr57 ** 0..-1
    nqp_rxmark rx47_bstack, rxquantr57_done, rx47_pos, 0
  rxquantr57_loop:
    ge rx47_pos, rx47_eos, rx47_fail
    is_cclass $I11, .CCLASS_NEWLINE, rx47_tgt, rx47_pos
    if $I11, rx47_fail
    add rx47_pos, 1
    nqp_rxpeek $I19, rx47_bstack, rxquantr57_done
    inc $I19
    inc $I19
    set rx47_rep, rx47_bstack[$I19]
    nqp_rxcommit rx47_bstack, rxquantr57_done
    inc rx47_rep
    nqp_rxmark rx47_bstack, rxquantr57_done, rx47_pos, rx47_rep
    goto rxquantr57_loop
  rxquantr57_done:
    goto alt49_end
  alt49_2:
  # rx rxquantr58 ** 1..-1
    nqp_rxmark rx47_bstack, rxquantr58_done, -1, 0
  rxquantr58_loop:
    ge rx47_pos, rx47_eos, rx47_fail
    substr $S11, rx47_tgt, rx47_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx47_fail
    inc rx47_pos
    nqp_rxpeek $I19, rx47_bstack, rxquantr58_done
    inc $I19
    inc $I19
    set rx47_rep, rx47_bstack[$I19]
    nqp_rxcommit rx47_bstack, rxquantr58_done
    inc rx47_rep
    nqp_rxmark rx47_bstack, rxquantr58_done, rx47_pos, rx47_rep
    goto rxquantr58_loop
  rxquantr58_done:
  alt49_end:
    rx47_cur."!cursor_pass"(rx47_pos, "unv", 'backtrack'=>1)
    .return (rx47_cur)
  rx47_restart:
    repr_get_attr_obj rx47_cstack, rx47_cur, rx47_curclass, "$!cstack"
  rx47_fail:
    unless rx47_bstack, rx47_done
    pop $I19, rx47_bstack
    if_null rx47_cstack, rx47_cstack_done
    unless rx47_cstack, rx47_cstack_done
    dec $I19
    set $P11, rx47_cstack[$I19]
  rx47_cstack_done:
    pop rx47_rep, rx47_bstack
    pop rx47_pos, rx47_bstack
    pop $I19, rx47_bstack
    lt rx47_pos, -1, rx47_done
    lt rx47_pos, 0, rx47_fail
    eq $I19, 0, rx47_fail
    if_null rx47_cstack, rx47_jump
    elements $I18, rx47_bstack
    le $I18, 0, rx47_cut
    dec $I18
    set $I18, rx47_bstack[$I18]
  rx47_cut:
    assign rx47_cstack, $I18
  rx47_jump:
    jump $I19
  rx47_done:
    rx47_cur."!cursor_fail"()
    .return (rx47_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "47_1337966799.879_caps"  :subid("408_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 697
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "47_1337966799.879_nfa"  :subid("409_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 697
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 1
    push $P105, 0
    push $P105, 2
    push $P105, 6
    push $P105, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P105, 1
    push $P105, 1
    push $P105, 0
    push $P105, 3
    push $P105, 1
    push $P105, 0
    push $P105, 5
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "before"
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 35
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 5
    push $P108, 4096
    push $P108, 4
    push $P108, 1
    push $P108, 0
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, 6
    push $P109, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 1
    push $P110, 0
    push $P110, 5
    push $P110, 1
    push $P110, 0
    push $P110, 0
    new $P111, "ResizablePMCArray"
    push $P111, $P104
    push $P111, $P105
    push $P111, $P106
    push $P111, $P107
    push $P111, $P108
    push $P111, $P109
    push $P111, $P110
    .return ($P111)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1501"  :anon :subid("46_1337966799.879") :method :outer("47_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 697
    .lex unicode:"$\x{a2}", $P1505
    .local string rx51_tgt
    .local int rx51_pos
    .local int rx51_off
    .local int rx51_eos
    .local int rx51_rep
    .local pmc rx51_cur
    .local pmc rx51_curclass
    .local pmc rx51_bstack
    .local pmc rx51_cstack
    (rx51_cur, rx51_tgt, rx51_pos, rx51_curclass, rx51_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx51_cur
    length rx51_eos, rx51_tgt
    eq $I19, 1, rx51_restart
    repr_get_attr_int $I11, self, rx51_curclass, "$!from"
    ne $I11, -1, rxscan52_done
    goto rxscan52_scan
  rxscan52_loop:
    inc rx51_pos
    gt rx51_pos, rx51_eos, rx51_fail
    repr_bind_attr_int rx51_cur, rx51_curclass, "$!from", rx51_pos
  rxscan52_scan:
    nqp_rxmark rx51_bstack, rxscan52_loop, rx51_pos, 0
  rxscan52_done:
  # rx rxquantr53 ** 0..-1
    nqp_rxmark rx51_bstack, rxquantr53_done, rx51_pos, 0
  rxquantr53_loop:
    ge rx51_pos, rx51_eos, rx51_fail
    substr $S11, rx51_tgt, rx51_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx51_fail
    inc rx51_pos
    nqp_rxpeek $I19, rx51_bstack, rxquantr53_done
    inc $I19
    inc $I19
    set rx51_rep, rx51_bstack[$I19]
    nqp_rxcommit rx51_bstack, rxquantr53_done
    inc rx51_rep
    nqp_rxmark rx51_bstack, rxquantr53_done, rx51_pos, rx51_rep
    goto rxquantr53_loop
  rxquantr53_done:
    add $I11, rx51_pos, 1
    gt $I11, rx51_eos, rx51_fail
    substr $S10, rx51_tgt, rx51_pos, 1
    ne $S10, ucs4:"=", rx51_fail
    add rx51_pos, 1
  alt54_0:
    nqp_rxmark rx51_bstack, alt54_1, rx51_pos, 0
    ge rx51_pos, rx51_eos, rx51_fail
    is_cclass $I11, .CCLASS_WORD, rx51_tgt, rx51_pos
    unless $I11, rx51_fail
    add rx51_pos, 1
    goto alt54_end
  alt54_1:
    add $I11, rx51_pos, 1
    gt $I11, rx51_eos, rx51_fail
    substr $S10, rx51_tgt, rx51_pos, 1
    ne $S10, ucs4:"\\", rx51_fail
    add rx51_pos, 1
  alt54_end:
    rx51_cur."!cursor_pass"(rx51_pos, 'backtrack'=>1)
    .return (rx51_cur)
  rx51_restart:
    repr_get_attr_obj rx51_cstack, rx51_cur, rx51_curclass, "$!cstack"
  rx51_fail:
    unless rx51_bstack, rx51_done
    pop $I19, rx51_bstack
    if_null rx51_cstack, rx51_cstack_done
    unless rx51_cstack, rx51_cstack_done
    dec $I19
    set $P11, rx51_cstack[$I19]
  rx51_cstack_done:
    pop rx51_rep, rx51_bstack
    pop rx51_pos, rx51_bstack
    pop $I19, rx51_bstack
    lt rx51_pos, -1, rx51_done
    lt rx51_pos, 0, rx51_fail
    eq $I19, 0, rx51_fail
    if_null rx51_cstack, rx51_jump
    elements $I18, rx51_bstack
    le $I18, 0, rx51_cut
    dec $I18
    set $I18, rx51_bstack[$I18]
  rx51_cut:
    assign rx51_cstack, $I18
  rx51_jump:
    jump $I19
  rx51_done:
    rx51_cur."!cursor_fail"()
    .return (rx51_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "46_1337966799.879_caps"  :subid("410_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 697
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "46_1337966799.879_nfa"  :subid("411_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 697
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 6
    push $P105, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P105, 1
    push $P105, 1
    push $P105, 0
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 61
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 4
    push $P107, 8192
    push $P107, 0
    push $P107, 2
    push $P107, 92
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "pod_comment"  :subid("49_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1507
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 706
    .const 'Sub' $P1513 = "48_1337966799.879" 
    capture_lex $P1513
    .lex "self", param_1507
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1508
    .lex "$/", $P1509
    .local string rx59_tgt
    .local int rx59_pos
    .local int rx59_off
    .local int rx59_eos
    .local int rx59_rep
    .local pmc rx59_cur
    .local pmc rx59_curclass
    .local pmc rx59_bstack
    .local pmc rx59_cstack
    (rx59_cur, rx59_tgt, rx59_pos, rx59_curclass, rx59_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx59_cur
    length rx59_eos, rx59_tgt
    eq $I19, 1, rx59_restart
    repr_get_attr_int $I11, self, rx59_curclass, "$!from"
    ne $I11, -1, rxscan60_done
    goto rxscan60_scan
  rxscan60_loop:
    inc rx59_pos
    gt rx59_pos, rx59_eos, rx59_fail
    repr_bind_attr_int rx59_cur, rx59_curclass, "$!from", rx59_pos
  rxscan60_scan:
    nqp_rxmark rx59_bstack, rxscan60_loop, rx59_pos, 0
  rxscan60_done:
    eq rx59_pos, 0, rxanchor61_done
    ge rx59_pos, rx59_eos, rx59_fail
    sub $I11, rx59_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx59_tgt, $I11
    unless $I11, rx59_fail
  rxanchor61_done:
  # rx rxquantr62 ** 0..-1
    nqp_rxmark rx59_bstack, rxquantr62_done, rx59_pos, 0
  rxquantr62_loop:
    ge rx59_pos, rx59_eos, rx59_fail
    substr $S11, rx59_tgt, rx59_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx59_fail
    inc rx59_pos
    nqp_rxpeek $I19, rx59_bstack, rxquantr62_done
    inc $I19
    inc $I19
    set rx59_rep, rx59_bstack[$I19]
    nqp_rxcommit rx59_bstack, rxquantr62_done
    inc rx59_rep
    nqp_rxmark rx59_bstack, rxquantr62_done, rx59_pos, rx59_rep
    goto rxquantr62_loop
  rxquantr62_done:
    add $I11, rx59_pos, 1
    gt $I11, rx59_eos, rx59_fail
    substr $S10, rx59_tgt, rx59_pos, 1
    ne $S10, ucs4:"=", rx59_fail
    add rx59_pos, 1
  alt63_0:
    nqp_rxmark rx59_bstack, alt63_1, rx59_pos, 0
    add $I11, rx59_pos, 5
    gt $I11, rx59_eos, rx59_fail
    substr $S10, rx59_tgt, rx59_pos, 5
    ne $S10, ucs4:"begin", rx59_fail
    add rx59_pos, 5
  # rx rxquantr64 ** 1..-1
    nqp_rxmark rx59_bstack, rxquantr64_done, -1, 0
  rxquantr64_loop:
    ge rx59_pos, rx59_eos, rx59_fail
    substr $S11, rx59_tgt, rx59_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx59_fail
    inc rx59_pos
    nqp_rxpeek $I19, rx59_bstack, rxquantr64_done
    inc $I19
    inc $I19
    set rx59_rep, rx59_bstack[$I19]
    nqp_rxcommit rx59_bstack, rxquantr64_done
    inc rx59_rep
    nqp_rxmark rx59_bstack, rxquantr64_done, rx59_pos, rx59_rep
    goto rxquantr64_loop
  rxquantr64_done:
    add $I11, rx59_pos, 3
    gt $I11, rx59_eos, rx59_fail
    substr $S10, rx59_tgt, rx59_pos, 3
    ne $S10, ucs4:"END", rx59_fail
    add rx59_pos, 3
    le rx59_pos, 0, rx59_fail
    is_cclass $I11, .CCLASS_WORD, rx59_tgt, rx59_pos
    if $I11, rx59_fail
    sub $I11, rx59_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx59_tgt, $I11
    unless $I11, rx59_fail
  alt66_0:
    nqp_rxmark rx59_bstack, alt66_1, rx59_pos, 0
  # rx rxquantf67 ** 0..-1
    set rx59_rep, 0
    nqp_rxmark rx59_bstack, rxquantf67_loop, rx59_pos, rx59_rep
    goto rxquantf67_done
  rxquantf67_loop:
    set $I12, rx59_rep
    ge rx59_pos, rx59_eos, rx59_fail
    add rx59_pos, 1
    set rx59_rep, $I12
    inc rx59_rep
    nqp_rxmark rx59_bstack, rxquantf67_loop, rx59_pos, rx59_rep
  rxquantf67_done:
    ge rx59_pos, rx59_eos, rx59_fail
    is_cclass $I11, .CCLASS_NEWLINE, rx59_tgt, rx59_pos
    unless $I11, rx59_fail
    substr $S10, rx59_tgt, rx59_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx59_pos, $I11
    add rx59_pos, 1
  # rx rxquantr68 ** 0..-1
    nqp_rxmark rx59_bstack, rxquantr68_done, rx59_pos, 0
  rxquantr68_loop:
    ge rx59_pos, rx59_eos, rx59_fail
    substr $S11, rx59_tgt, rx59_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx59_fail
    inc rx59_pos
    nqp_rxpeek $I19, rx59_bstack, rxquantr68_done
    inc $I19
    inc $I19
    set rx59_rep, rx59_bstack[$I19]
    nqp_rxcommit rx59_bstack, rxquantr68_done
    inc rx59_rep
    nqp_rxmark rx59_bstack, rxquantr68_done, rx59_pos, rx59_rep
    goto rxquantr68_loop
  rxquantr68_done:
    add $I11, rx59_pos, 4
    gt $I11, rx59_eos, rx59_fail
    substr $S10, rx59_tgt, rx59_pos, 4
    ne $S10, ucs4:"=end", rx59_fail
    add rx59_pos, 4
  # rx rxquantr69 ** 1..-1
    nqp_rxmark rx59_bstack, rxquantr69_done, -1, 0
  rxquantr69_loop:
    ge rx59_pos, rx59_eos, rx59_fail
    substr $S11, rx59_tgt, rx59_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx59_fail
    inc rx59_pos
    nqp_rxpeek $I19, rx59_bstack, rxquantr69_done
    inc $I19
    inc $I19
    set rx59_rep, rx59_bstack[$I19]
    nqp_rxcommit rx59_bstack, rxquantr69_done
    inc rx59_rep
    nqp_rxmark rx59_bstack, rxquantr69_done, rx59_pos, rx59_rep
    goto rxquantr69_loop
  rxquantr69_done:
    add $I11, rx59_pos, 3
    gt $I11, rx59_eos, rx59_fail
    substr $S10, rx59_tgt, rx59_pos, 3
    ne $S10, ucs4:"END", rx59_fail
    add rx59_pos, 3
    le rx59_pos, 0, rx59_fail
    is_cclass $I11, .CCLASS_WORD, rx59_tgt, rx59_pos
    if $I11, rx59_fail
    sub $I11, rx59_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx59_tgt, $I11
    unless $I11, rx59_fail
  # rx rxquantr71 ** 0..-1
    nqp_rxmark rx59_bstack, rxquantr71_done, rx59_pos, 0
  rxquantr71_loop:
    ge rx59_pos, rx59_eos, rx59_fail
    is_cclass $I11, .CCLASS_NEWLINE, rx59_tgt, rx59_pos
    if $I11, rx59_fail
    add rx59_pos, 1
    nqp_rxpeek $I19, rx59_bstack, rxquantr71_done
    inc $I19
    inc $I19
    set rx59_rep, rx59_bstack[$I19]
    nqp_rxcommit rx59_bstack, rxquantr71_done
    inc rx59_rep
    nqp_rxmark rx59_bstack, rxquantr71_done, rx59_pos, rx59_rep
    goto rxquantr71_loop
  rxquantr71_done:
    goto alt66_end
  alt66_1:
  # rx rxquantr72 ** 0..-1
    nqp_rxmark rx59_bstack, rxquantr72_done, rx59_pos, 0
  rxquantr72_loop:
    ge rx59_pos, rx59_eos, rx59_fail
    add rx59_pos, 1
    nqp_rxpeek $I19, rx59_bstack, rxquantr72_done
    inc $I19
    inc $I19
    set rx59_rep, rx59_bstack[$I19]
    nqp_rxcommit rx59_bstack, rxquantr72_done
    inc rx59_rep
    nqp_rxmark rx59_bstack, rxquantr72_done, rx59_pos, rx59_rep
    goto rxquantr72_loop
  rxquantr72_done:
  alt66_end:
    goto alt63_end
  alt63_1:
    nqp_rxmark rx59_bstack, alt63_2, rx59_pos, 0
    add $I11, rx59_pos, 5
    gt $I11, rx59_eos, rx59_fail
    substr $S10, rx59_tgt, rx59_pos, 5
    ne $S10, ucs4:"begin", rx59_fail
    add rx59_pos, 5
  # rx rxquantr73 ** 1..-1
    nqp_rxmark rx59_bstack, rxquantr73_done, -1, 0
  rxquantr73_loop:
    ge rx59_pos, rx59_eos, rx59_fail
    substr $S11, rx59_tgt, rx59_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx59_fail
    inc rx59_pos
    nqp_rxpeek $I19, rx59_bstack, rxquantr73_done
    inc $I19
    inc $I19
    set rx59_rep, rx59_bstack[$I19]
    nqp_rxcommit rx59_bstack, rxquantr73_done
    inc rx59_rep
    nqp_rxmark rx59_bstack, rxquantr73_done, rx59_pos, rx59_rep
    goto rxquantr73_loop
  rxquantr73_done:
    repr_bind_attr_int rx59_cur, rx59_curclass, "$!pos", rx59_pos
    $P11 = rx59_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx59_curclass, "$!pos"
    lt $I11, 0, rx59_fail
    nqp_rxmark rx59_bstack, rxsubrule74_pass, -1, 0
  rxsubrule74_pass:
    rx59_cstack = rx59_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx59_pos, $P11, rx59_curclass, "$!pos"
  alt75_0:
    nqp_rxmark rx59_bstack, alt75_1, rx59_pos, 0
  # rx rxquantf76 ** 0..-1
    set rx59_rep, 0
    nqp_rxmark rx59_bstack, rxquantf76_loop, rx59_pos, rx59_rep
    goto rxquantf76_done
  rxquantf76_loop:
    set $I12, rx59_rep
    ge rx59_pos, rx59_eos, rx59_fail
    add rx59_pos, 1
    set rx59_rep, $I12
    inc rx59_rep
    nqp_rxmark rx59_bstack, rxquantf76_loop, rx59_pos, rx59_rep
  rxquantf76_done:
    ge rx59_pos, rx59_eos, rx59_fail
    is_cclass $I11, .CCLASS_NEWLINE, rx59_tgt, rx59_pos
    unless $I11, rx59_fail
    substr $S10, rx59_tgt, rx59_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx59_pos, $I11
    add rx59_pos, 1
  # rx rxquantr77 ** 0..-1
    nqp_rxmark rx59_bstack, rxquantr77_done, rx59_pos, 0
  rxquantr77_loop:
    ge rx59_pos, rx59_eos, rx59_fail
    substr $S11, rx59_tgt, rx59_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx59_fail
    inc rx59_pos
    nqp_rxpeek $I19, rx59_bstack, rxquantr77_done
    inc $I19
    inc $I19
    set rx59_rep, rx59_bstack[$I19]
    nqp_rxcommit rx59_bstack, rxquantr77_done
    inc rx59_rep
    nqp_rxmark rx59_bstack, rxquantr77_done, rx59_pos, rx59_rep
    goto rxquantr77_loop
  rxquantr77_done:
    add $I11, rx59_pos, 4
    gt $I11, rx59_eos, rx59_fail
    substr $S10, rx59_tgt, rx59_pos, 4
    ne $S10, ucs4:"=end", rx59_fail
    add rx59_pos, 4
  # rx rxquantr78 ** 1..-1
    nqp_rxmark rx59_bstack, rxquantr78_done, -1, 0
  rxquantr78_loop:
    ge rx59_pos, rx59_eos, rx59_fail
    substr $S11, rx59_tgt, rx59_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx59_fail
    inc rx59_pos
    nqp_rxpeek $I19, rx59_bstack, rxquantr78_done
    inc $I19
    inc $I19
    set rx59_rep, rx59_bstack[$I19]
    nqp_rxcommit rx59_bstack, rxquantr78_done
    inc rx59_rep
    nqp_rxmark rx59_bstack, rxquantr78_done, rx59_pos, rx59_rep
    goto rxquantr78_loop
  rxquantr78_done:
    repr_bind_attr_int rx59_cur, rx59_curclass, "$!pos", rx59_pos
    $P11 = rx59_cur."!BACKREF"("identifier")
    repr_get_attr_int $I11, $P11, rx59_curclass, "$!pos"
    lt $I11, 0, rx59_fail
    repr_get_attr_int rx59_pos, $P11, rx59_curclass, "$!pos"
    le rx59_pos, 0, rx59_fail
    is_cclass $I11, .CCLASS_WORD, rx59_tgt, rx59_pos
    if $I11, rx59_fail
    sub $I11, rx59_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx59_tgt, $I11
    unless $I11, rx59_fail
  # rx rxquantr81 ** 0..-1
    nqp_rxmark rx59_bstack, rxquantr81_done, rx59_pos, 0
  rxquantr81_loop:
    ge rx59_pos, rx59_eos, rx59_fail
    is_cclass $I11, .CCLASS_NEWLINE, rx59_tgt, rx59_pos
    if $I11, rx59_fail
    add rx59_pos, 1
    nqp_rxpeek $I19, rx59_bstack, rxquantr81_done
    inc $I19
    inc $I19
    set rx59_rep, rx59_bstack[$I19]
    nqp_rxcommit rx59_bstack, rxquantr81_done
    inc rx59_rep
    nqp_rxmark rx59_bstack, rxquantr81_done, rx59_pos, rx59_rep
    goto rxquantr81_loop
  rxquantr81_done:
    goto alt75_end
  alt75_1:
    repr_bind_attr_int rx59_cur, rx59_curclass, "$!pos", rx59_pos
    $P11 = rx59_cur."panic"("=begin without matching =end")
    repr_get_attr_int $I11, $P11, rx59_curclass, "$!pos"
    lt $I11, 0, rx59_fail
    repr_get_attr_int rx59_pos, $P11, rx59_curclass, "$!pos"
  alt75_end:
    goto alt63_end
  alt63_2:
    nqp_rxmark rx59_bstack, alt63_3, rx59_pos, 0
    add $I11, rx59_pos, 5
    gt $I11, rx59_eos, rx59_fail
    substr $S10, rx59_tgt, rx59_pos, 5
    ne $S10, ucs4:"begin", rx59_fail
    add rx59_pos, 5
    le rx59_pos, 0, rx59_fail
    is_cclass $I11, .CCLASS_WORD, rx59_tgt, rx59_pos
    if $I11, rx59_fail
    sub $I11, rx59_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx59_tgt, $I11
    unless $I11, rx59_fail
  # rx rxquantr84 ** 0..-1
    nqp_rxmark rx59_bstack, rxquantr84_done, rx59_pos, 0
  rxquantr84_loop:
    ge rx59_pos, rx59_eos, rx59_fail
    substr $S11, rx59_tgt, rx59_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx59_fail
    inc rx59_pos
    nqp_rxpeek $I19, rx59_bstack, rxquantr84_done
    inc $I19
    inc $I19
    set rx59_rep, rx59_bstack[$I19]
    nqp_rxcommit rx59_bstack, rxquantr84_done
    inc rx59_rep
    nqp_rxmark rx59_bstack, rxquantr84_done, rx59_pos, rx59_rep
    goto rxquantr84_loop
  rxquantr84_done:
  alt85_0:
    nqp_rxmark rx59_bstack, alt85_1, rx59_pos, 0
    is_cclass $I11, .CCLASS_NEWLINE, rx59_tgt, rx59_pos
    if $I11, rxanchor86_done
    ne rx59_pos, rx59_eos, rx59_fail
    eq rx59_pos, 0, rxanchor86_done
    sub $I11, rx59_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx59_tgt, $I11
    if $I11, rx59_fail
  rxanchor86_done:
    goto alt85_end
  alt85_1:
    nqp_rxmark rx59_bstack, alt85_2, rx59_pos, 0
    add $I11, rx59_pos, 1
    gt $I11, rx59_eos, rx59_fail
    substr $S10, rx59_tgt, rx59_pos, 1
    ne $S10, ucs4:"#", rx59_fail
    add rx59_pos, 1
    goto alt85_end
  alt85_2:
    repr_bind_attr_int rx59_cur, rx59_curclass, "$!pos", rx59_pos
    $P11 = rx59_cur."panic"("Unrecognized token after =begin")
    repr_get_attr_int $I11, $P11, rx59_curclass, "$!pos"
    lt $I11, 0, rx59_fail
    repr_get_attr_int rx59_pos, $P11, rx59_curclass, "$!pos"
  alt85_end:
  alt88_0:
    nqp_rxmark rx59_bstack, alt88_1, rx59_pos, 0
  # rx rxquantf89 ** 0..-1
    set rx59_rep, 0
    nqp_rxmark rx59_bstack, rxquantf89_loop, rx59_pos, rx59_rep
    goto rxquantf89_done
  rxquantf89_loop:
    set $I12, rx59_rep
    ge rx59_pos, rx59_eos, rx59_fail
    add rx59_pos, 1
    set rx59_rep, $I12
    inc rx59_rep
    nqp_rxmark rx59_bstack, rxquantf89_loop, rx59_pos, rx59_rep
  rxquantf89_done:
    ge rx59_pos, rx59_eos, rx59_fail
    is_cclass $I11, .CCLASS_NEWLINE, rx59_tgt, rx59_pos
    unless $I11, rx59_fail
    substr $S10, rx59_tgt, rx59_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx59_pos, $I11
    add rx59_pos, 1
  # rx rxquantr90 ** 0..-1
    nqp_rxmark rx59_bstack, rxquantr90_done, rx59_pos, 0
  rxquantr90_loop:
    ge rx59_pos, rx59_eos, rx59_fail
    substr $S11, rx59_tgt, rx59_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx59_fail
    inc rx59_pos
    nqp_rxpeek $I19, rx59_bstack, rxquantr90_done
    inc $I19
    inc $I19
    set rx59_rep, rx59_bstack[$I19]
    nqp_rxcommit rx59_bstack, rxquantr90_done
    inc rx59_rep
    nqp_rxmark rx59_bstack, rxquantr90_done, rx59_pos, rx59_rep
    goto rxquantr90_loop
  rxquantr90_done:
    add $I11, rx59_pos, 4
    gt $I11, rx59_eos, rx59_fail
    substr $S10, rx59_tgt, rx59_pos, 4
    ne $S10, ucs4:"=end", rx59_fail
    add rx59_pos, 4
    le rx59_pos, 0, rx59_fail
    is_cclass $I11, .CCLASS_WORD, rx59_tgt, rx59_pos
    if $I11, rx59_fail
    sub $I11, rx59_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx59_tgt, $I11
    unless $I11, rx59_fail
  # rx rxquantr92 ** 0..-1
    nqp_rxmark rx59_bstack, rxquantr92_done, rx59_pos, 0
  rxquantr92_loop:
    ge rx59_pos, rx59_eos, rx59_fail
    is_cclass $I11, .CCLASS_NEWLINE, rx59_tgt, rx59_pos
    if $I11, rx59_fail
    add rx59_pos, 1
    nqp_rxpeek $I19, rx59_bstack, rxquantr92_done
    inc $I19
    inc $I19
    set rx59_rep, rx59_bstack[$I19]
    nqp_rxcommit rx59_bstack, rxquantr92_done
    inc rx59_rep
    nqp_rxmark rx59_bstack, rxquantr92_done, rx59_pos, rx59_rep
    goto rxquantr92_loop
  rxquantr92_done:
    goto alt88_end
  alt88_1:
    repr_bind_attr_int rx59_cur, rx59_curclass, "$!pos", rx59_pos
    $P11 = rx59_cur."panic"("=begin without matching =end")
    repr_get_attr_int $I11, $P11, rx59_curclass, "$!pos"
    lt $I11, 0, rx59_fail
    repr_get_attr_int rx59_pos, $P11, rx59_curclass, "$!pos"
  alt88_end:
    goto alt63_end
  alt63_3:
    nqp_rxmark rx59_bstack, alt63_4, rx59_pos, 0
    repr_bind_attr_int rx59_cur, rx59_curclass, "$!pos", rx59_pos
    $P11 = rx59_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx59_curclass, "$!pos"
    lt $I11, 0, rx59_fail
    nqp_rxmark rx59_bstack, rxsubrule94_pass, -1, 0
  rxsubrule94_pass:
    rx59_cstack = rx59_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx59_pos, $P11, rx59_curclass, "$!pos"
  # rx rxquantf95 ** 0..-1
    set rx59_rep, 0
    nqp_rxmark rx59_bstack, rxquantf95_loop, rx59_pos, rx59_rep
    goto rxquantf95_done
  rxquantf95_loop:
    set $I12, rx59_rep
    ge rx59_pos, rx59_eos, rx59_fail
    add rx59_pos, 1
    set rx59_rep, $I12
    inc rx59_rep
    nqp_rxmark rx59_bstack, rxquantf95_loop, rx59_pos, rx59_rep
  rxquantf95_done:
    eq rx59_pos, 0, rxanchor96_done
    ge rx59_pos, rx59_eos, rx59_fail
    sub $I11, rx59_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx59_tgt, $I11
    unless $I11, rx59_fail
  rxanchor96_done:
    .const 'Sub' $P1513 = "48_1337966799.879" 
    capture_lex $P1513
    repr_bind_attr_int rx59_cur, rx59_curclass, "$!pos", rx59_pos
    $P11 = rx59_cur."before"($P1513)
    repr_get_attr_int $I11, $P11, rx59_curclass, "$!pos"
    lt $I11, 0, rx59_fail
    goto alt63_end
  alt63_4:
  alt104_0:
    nqp_rxmark rx59_bstack, alt104_1, rx59_pos, 0
    ge rx59_pos, rx59_eos, rx59_fail
    is_cclass $I11, .CCLASS_WHITESPACE, rx59_tgt, rx59_pos
    unless $I11, rx59_fail
    add rx59_pos, 1
    goto alt104_end
  alt104_1:
    repr_bind_attr_int rx59_cur, rx59_curclass, "$!pos", rx59_pos
    $P11 = rx59_cur."panic"("Illegal pod directive")
    repr_get_attr_int $I11, $P11, rx59_curclass, "$!pos"
    lt $I11, 0, rx59_fail
    repr_get_attr_int rx59_pos, $P11, rx59_curclass, "$!pos"
  alt104_end:
  # rx rxquantr106 ** 0..-1
    nqp_rxmark rx59_bstack, rxquantr106_done, rx59_pos, 0
  rxquantr106_loop:
    ge rx59_pos, rx59_eos, rx59_fail
    is_cclass $I11, .CCLASS_NEWLINE, rx59_tgt, rx59_pos
    if $I11, rx59_fail
    add rx59_pos, 1
    nqp_rxpeek $I19, rx59_bstack, rxquantr106_done
    inc $I19
    inc $I19
    set rx59_rep, rx59_bstack[$I19]
    nqp_rxcommit rx59_bstack, rxquantr106_done
    inc rx59_rep
    nqp_rxmark rx59_bstack, rxquantr106_done, rx59_pos, rx59_rep
    goto rxquantr106_loop
  rxquantr106_done:
  alt63_end:
    rx59_cur."!cursor_pass"(rx59_pos, "pod_comment", 'backtrack'=>1)
    .return (rx59_cur)
  rx59_restart:
    repr_get_attr_obj rx59_cstack, rx59_cur, rx59_curclass, "$!cstack"
  rx59_fail:
    unless rx59_bstack, rx59_done
    pop $I19, rx59_bstack
    if_null rx59_cstack, rx59_cstack_done
    unless rx59_cstack, rx59_cstack_done
    dec $I19
    set $P11, rx59_cstack[$I19]
  rx59_cstack_done:
    pop rx59_rep, rx59_bstack
    pop rx59_pos, rx59_bstack
    pop $I19, rx59_bstack
    lt rx59_pos, -1, rx59_done
    lt rx59_pos, 0, rx59_fail
    eq $I19, 0, rx59_fail
    if_null rx59_cstack, rx59_jump
    elements $I18, rx59_bstack
    le $I18, 0, rx59_cut
    dec $I18
    set $I18, rx59_bstack[$I18]
  rx59_cut:
    assign rx59_cstack, $I18
  rx59_jump:
    jump $I19
  rx59_done:
    rx59_cur."!cursor_fail"()
    .return (rx59_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "49_1337966799.879_caps"  :subid("412_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 706
    new $P104, "Hash"
    set $P104["identifier"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "49_1337966799.879_nfa"  :subid("413_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 706
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 1
    push $P105, 0
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 6
    push $P106, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P106, 2
    push $P106, 1
    push $P106, 0
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 61
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 98
    push $P108, 5
    push $P108, 2
    push $P108, 98
    push $P108, 17
    push $P108, 2
    push $P108, 98
    push $P108, 26
    push $P108, 8
    push $P108, "identifier"
    push $P108, 33
    push $P108, 0
    push $P108, 0
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 101
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 103
    push $P110, 7
    new $P111, "ResizablePMCArray"
    push $P111, 2
    push $P111, 105
    push $P111, 8
    new $P112, "ResizablePMCArray"
    push $P112, 2
    push $P112, 110
    push $P112, 9
    new $P113, "ResizablePMCArray"
    push $P113, 1
    push $P113, 0
    push $P113, 10
    new $P114, "ResizablePMCArray"
    push $P114, 6
    push $P114, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P114, 11
    new $P115, "ResizablePMCArray"
    push $P115, 1
    push $P115, 0
    push $P115, 10
    push $P115, 1
    push $P115, 0
    push $P115, 12
    push $P115, 2
    push $P115, 69
    push $P115, 13
    new $P116, "ResizablePMCArray"
    new $P117, "ResizablePMCArray"
    push $P117, 2
    push $P117, 78
    push $P117, 14
    new $P118, "ResizablePMCArray"
    push $P118, 2
    push $P118, 68
    push $P118, 15
    new $P119, "ResizablePMCArray"
    push $P119, 1
    push $P119, 0
    push $P119, 16
    new $P120, "ResizablePMCArray"
    push $P120, 0
    push $P120, 0
    push $P120, 0
    new $P121, "ResizablePMCArray"
    push $P121, 2
    push $P121, 101
    push $P121, 18
    new $P122, "ResizablePMCArray"
    push $P122, 2
    push $P122, 103
    push $P122, 19
    new $P123, "ResizablePMCArray"
    push $P123, 2
    push $P123, 105
    push $P123, 20
    new $P124, "ResizablePMCArray"
    push $P124, 2
    push $P124, 110
    push $P124, 21
    new $P125, "ResizablePMCArray"
    push $P125, 1
    push $P125, 0
    push $P125, 22
    new $P126, "ResizablePMCArray"
    push $P126, 6
    push $P126, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P126, 23
    new $P127, "ResizablePMCArray"
    push $P127, 1
    push $P127, 0
    push $P127, 22
    push $P127, 1
    push $P127, 0
    push $P127, 24
    push $P127, 8
    push $P127, "identifier"
    push $P127, 25
    new $P128, "ResizablePMCArray"
    new $P129, "ResizablePMCArray"
    push $P129, 0
    push $P129, 0
    push $P129, 0
    new $P130, "ResizablePMCArray"
    push $P130, 2
    push $P130, 101
    push $P130, 27
    new $P131, "ResizablePMCArray"
    push $P131, 2
    push $P131, 103
    push $P131, 28
    new $P132, "ResizablePMCArray"
    push $P132, 2
    push $P132, 105
    push $P132, 29
    new $P133, "ResizablePMCArray"
    push $P133, 2
    push $P133, 110
    push $P133, 30
    new $P134, "ResizablePMCArray"
    push $P134, 1
    push $P134, 0
    push $P134, 31
    new $P135, "ResizablePMCArray"
    push $P135, 6
    push $P135, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P135, 31
    push $P135, 1
    push $P135, 0
    push $P135, 32
    new $P136, "ResizablePMCArray"
    push $P136, 0
    push $P136, 0
    push $P136, 0
    new $P137, "ResizablePMCArray"
    push $P137, 4
    push $P137, 65535
    push $P137, 33
    push $P137, 1
    push $P137, 0
    push $P137, 34
    new $P138, "ResizablePMCArray"
    push $P138, 1
    push $P138, 0
    push $P138, 35
    new $P139, "ResizablePMCArray"
    push $P139, 8
    push $P139, "before"
    push $P139, 0
    new $P140, "ResizablePMCArray"
    push $P140, $P104
    push $P140, $P105
    push $P140, $P106
    push $P140, $P107
    push $P140, $P108
    push $P140, $P109
    push $P140, $P110
    push $P140, $P111
    push $P140, $P112
    push $P140, $P113
    push $P140, $P114
    push $P140, $P115
    push $P140, $P116
    push $P140, $P117
    push $P140, $P118
    push $P140, $P119
    push $P140, $P120
    push $P140, $P121
    push $P140, $P122
    push $P140, $P123
    push $P140, $P124
    push $P140, $P125
    push $P140, $P126
    push $P140, $P127
    push $P140, $P128
    push $P140, $P129
    push $P140, $P130
    push $P140, $P131
    push $P140, $P132
    push $P140, $P133
    push $P140, $P134
    push $P140, $P135
    push $P140, $P136
    push $P140, $P137
    push $P140, $P138
    push $P140, $P139
    .return ($P140)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1512"  :anon :subid("48_1337966799.879") :method :outer("49_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 706
    .lex unicode:"$\x{a2}", $P1516
    .local string rx97_tgt
    .local int rx97_pos
    .local int rx97_off
    .local int rx97_eos
    .local int rx97_rep
    .local pmc rx97_cur
    .local pmc rx97_curclass
    .local pmc rx97_bstack
    .local pmc rx97_cstack
    (rx97_cur, rx97_tgt, rx97_pos, rx97_curclass, rx97_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx97_cur
    length rx97_eos, rx97_tgt
    eq $I19, 1, rx97_restart
    repr_get_attr_int $I11, self, rx97_curclass, "$!from"
    ne $I11, -1, rxscan98_done
    goto rxscan98_scan
  rxscan98_loop:
    inc rx97_pos
    gt rx97_pos, rx97_eos, rx97_fail
    repr_bind_attr_int rx97_cur, rx97_curclass, "$!from", rx97_pos
  rxscan98_scan:
    nqp_rxmark rx97_bstack, rxscan98_loop, rx97_pos, 0
  rxscan98_done:
  # rx rxquantr99 ** 0..-1
    nqp_rxmark rx97_bstack, rxquantr99_done, rx97_pos, 0
  rxquantr99_loop:
    ge rx97_pos, rx97_eos, rx97_fail
    substr $S11, rx97_tgt, rx97_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx97_fail
    inc rx97_pos
    nqp_rxpeek $I19, rx97_bstack, rxquantr99_done
    inc $I19
    inc $I19
    set rx97_rep, rx97_bstack[$I19]
    nqp_rxcommit rx97_bstack, rxquantr99_done
    inc rx97_rep
    nqp_rxmark rx97_bstack, rxquantr99_done, rx97_pos, rx97_rep
    goto rxquantr99_loop
  rxquantr99_done:
  alt100_0:
    nqp_rxmark rx97_bstack, alt100_1, rx97_pos, 0
    add $I11, rx97_pos, 1
    gt $I11, rx97_eos, rx97_fail
    substr $S10, rx97_tgt, rx97_pos, 1
    ne $S10, ucs4:"=", rx97_fail
    add rx97_pos, 1
  # rx rxquantr101 ** 0..1
    nqp_rxmark rx97_bstack, rxquantr101_done, rx97_pos, 0
  rxquantr101_loop:
    add $I11, rx97_pos, 3
    gt $I11, rx97_eos, rx97_fail
    substr $S10, rx97_tgt, rx97_pos, 3
    ne $S10, ucs4:"cut", rx97_fail
    add rx97_pos, 3
    le rx97_pos, 0, rx97_fail
    is_cclass $I11, .CCLASS_WORD, rx97_tgt, rx97_pos
    if $I11, rx97_fail
    sub $I11, rx97_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx97_tgt, $I11
    unless $I11, rx97_fail
    repr_bind_attr_int rx97_cur, rx97_curclass, "$!pos", rx97_pos
    $P11 = rx97_cur."panic"("Obsolete pod format, please use =begin/=end instead")
    repr_get_attr_int $I11, $P11, rx97_curclass, "$!pos"
    lt $I11, 0, rx97_fail
    repr_get_attr_int rx97_pos, $P11, rx97_curclass, "$!pos"
    nqp_rxpeek $I19, rx97_bstack, rxquantr101_done
    inc $I19
    inc $I19
    set rx97_rep, rx97_bstack[$I19]
    nqp_rxcommit rx97_bstack, rxquantr101_done
    inc rx97_rep
  rxquantr101_done:
    goto alt100_end
  alt100_1:
    ge rx97_pos, rx97_eos, rx97_fail
    is_cclass $I11, .CCLASS_NEWLINE, rx97_tgt, rx97_pos
    unless $I11, rx97_fail
    substr $S10, rx97_tgt, rx97_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx97_pos, $I11
    add rx97_pos, 1
  alt100_end:
    rx97_cur."!cursor_pass"(rx97_pos, 'backtrack'=>1)
    .return (rx97_cur)
  rx97_restart:
    repr_get_attr_obj rx97_cstack, rx97_cur, rx97_curclass, "$!cstack"
  rx97_fail:
    unless rx97_bstack, rx97_done
    pop $I19, rx97_bstack
    if_null rx97_cstack, rx97_cstack_done
    unless rx97_cstack, rx97_cstack_done
    dec $I19
    set $P11, rx97_cstack[$I19]
  rx97_cstack_done:
    pop rx97_rep, rx97_bstack
    pop rx97_pos, rx97_bstack
    pop $I19, rx97_bstack
    lt rx97_pos, -1, rx97_done
    lt rx97_pos, 0, rx97_fail
    eq $I19, 0, rx97_fail
    if_null rx97_cstack, rx97_jump
    elements $I18, rx97_bstack
    le $I18, 0, rx97_cut
    dec $I18
    set $I18, rx97_bstack[$I18]
  rx97_cut:
    assign rx97_cstack, $I18
  rx97_jump:
    jump $I19
  rx97_done:
    rx97_cur."!cursor_fail"()
    .return (rx97_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "48_1337966799.879_caps"  :subid("414_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 706
    new $P105, "Hash"
    .return ($P105)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "48_1337966799.879_nfa"  :subid("415_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 706
    new $P105, "ResizablePMCArray"
    new $P106, "ResizablePMCArray"
    push $P106, 6
    push $P106, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P106, 1
    push $P106, 1
    push $P106, 0
    push $P106, 2
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 61
    push $P107, 3
    push $P107, 4
    push $P107, 4096
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 99
    push $P108, 4
    push $P108, 1
    push $P108, 0
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 117
    push $P109, 5
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 116
    push $P110, 6
    new $P111, "ResizablePMCArray"
    push $P111, 1
    push $P111, 0
    push $P111, 7
    new $P112, "ResizablePMCArray"
    push $P112, 8
    push $P112, "panic"
    push $P112, 0
    new $P113, "ResizablePMCArray"
    push $P113, $P105
    push $P113, $P106
    push $P113, $P107
    push $P113, $P108
    push $P113, $P109
    push $P113, $P110
    push $P113, $P111
    push $P113, $P112
    .return ($P113)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "comp_unit"  :subid("50_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1518
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 737
    .lex "self", param_1518
.annotate 'line', 738
    new $P103, "Undef"
    set $P1519, $P103
    .lex "$*IN_DECL", $P1519
.annotate 'line', 740
    new $P104, "Undef"
    set $P1520, $P104
    .lex "$*HAS_YOU_ARE_HERE", $P1520
.annotate 'line', 741
    new $P105, "Undef"
    set $P1521, $P105
    .lex "$*MAIN_SUB", $P1521
.annotate 'line', 744
    new $P106, "Undef"
    set $P1522, $P106
    .lex "$*PACKAGE", $P1522
.annotate 'line', 745
    new $P107, "Undef"
    set $P1523, $P107
    .lex "$*GLOBALish", $P1523
    .local pmc self
    find_lex $P108, "self"
    set self, $P108
    .lex unicode:"$\x{a2}", $P1524
    .lex "$/", $P1525
.annotate 'line', 737
    .local string rx107_tgt
    .local int rx107_pos
    .local int rx107_off
    .local int rx107_eos
    .local int rx107_rep
    .local pmc rx107_cur
    .local pmc rx107_curclass
    .local pmc rx107_bstack
    .local pmc rx107_cstack
    (rx107_cur, rx107_tgt, rx107_pos, rx107_curclass, rx107_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx107_cur
    length rx107_eos, rx107_tgt
    eq $I19, 1, rx107_restart
    repr_get_attr_int $I11, self, rx107_curclass, "$!from"
    ne $I11, -1, rxscan108_done
    goto rxscan108_scan
  rxscan108_loop:
    inc rx107_pos
    gt rx107_pos, rx107_eos, rx107_fail
    repr_bind_attr_int rx107_cur, rx107_curclass, "$!from", rx107_pos
  rxscan108_scan:
    nqp_rxmark rx107_bstack, rxscan108_loop, rx107_pos, 0
  rxscan108_done:
    repr_bind_attr_int rx107_cur, rx107_curclass, "$!pos", rx107_pos
    store_lex unicode:"$\x{a2}", rx107_cur
.annotate 'line', 738
    new $P109, "String"
    assign $P109, ""
    set $P1519, $P109
.annotate 'line', 737
    repr_bind_attr_int rx107_cur, rx107_curclass, "$!pos", rx107_pos
    store_lex unicode:"$\x{a2}", rx107_cur
.annotate 'line', 740
    new $P110, "Float"
    assign $P110, 0
    set $P1520, $P110
.annotate 'line', 737
    repr_bind_attr_int rx107_cur, rx107_curclass, "$!pos", rx107_pos
    store_lex unicode:"$\x{a2}", rx107_cur
    set $P113, $P1521
    unless_null $P113, vivify_1250
    get_hll_global $P111, "GLOBAL"
    get_who $P112, $P111
    set $P113, $P112["$MAIN_SUB"]
    unless_null $P113, vivify_1251
    die "Contextual $*MAIN_SUB not found"
  vivify_1251:
  vivify_1250:
    repr_bind_attr_int rx107_cur, rx107_curclass, "$!pos", rx107_pos
    $P11 = rx107_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx107_curclass, "$!pos"
    lt $I11, 0, rx107_fail
    repr_get_attr_int rx107_pos, $P11, rx107_curclass, "$!pos"
    repr_bind_attr_int rx107_cur, rx107_curclass, "$!pos", rx107_pos
    store_lex unicode:"$\x{a2}", rx107_cur
    set $P116, $P1522
    unless_null $P116, vivify_1252
    get_hll_global $P114, "GLOBAL"
    get_who $P115, $P114
    set $P116, $P115["$PACKAGE"]
    unless_null $P116, vivify_1253
    die "Contextual $*PACKAGE not found"
  vivify_1253:
  vivify_1252:
    repr_bind_attr_int rx107_cur, rx107_curclass, "$!pos", rx107_pos
    store_lex unicode:"$\x{a2}", rx107_cur
    set $P119, $P1523
    unless_null $P119, vivify_1254
    get_hll_global $P117, "GLOBAL"
    get_who $P118, $P117
    set $P119, $P118["$GLOBALish"]
    unless_null $P119, vivify_1255
    die "Contextual $*GLOBALish not found"
  vivify_1255:
  vivify_1254:
    repr_bind_attr_int rx107_cur, rx107_curclass, "$!pos", rx107_pos
    $P11 = rx107_cur."GLOBALish"()
    repr_get_attr_int $I11, $P11, rx107_curclass, "$!pos"
    lt $I11, 0, rx107_fail
    repr_get_attr_int rx107_pos, $P11, rx107_curclass, "$!pos"
    repr_bind_attr_int rx107_cur, rx107_curclass, "$!pos", rx107_pos
    $P11 = rx107_cur."outerctx"()
    repr_get_attr_int $I11, $P11, rx107_curclass, "$!pos"
    lt $I11, 0, rx107_fail
    repr_get_attr_int rx107_pos, $P11, rx107_curclass, "$!pos"
    repr_bind_attr_int rx107_cur, rx107_curclass, "$!pos", rx107_pos
    $P11 = rx107_cur."statementlist"()
    repr_get_attr_int $I11, $P11, rx107_curclass, "$!pos"
    lt $I11, 0, rx107_fail
    nqp_rxmark rx107_bstack, rxsubrule112_pass, -1, 0
  rxsubrule112_pass:
    rx107_cstack = rx107_cur."!cursor_capture"($P11, "statementlist")
    repr_get_attr_int rx107_pos, $P11, rx107_curclass, "$!pos"
  alt113_0:
    nqp_rxmark rx107_bstack, alt113_1, rx107_pos, 0
    lt rx107_pos, rx107_eos, rx107_fail
    goto alt113_end
  alt113_1:
    repr_bind_attr_int rx107_cur, rx107_curclass, "$!pos", rx107_pos
    $P11 = rx107_cur."panic"("Confused")
    repr_get_attr_int $I11, $P11, rx107_curclass, "$!pos"
    lt $I11, 0, rx107_fail
    repr_get_attr_int rx107_pos, $P11, rx107_curclass, "$!pos"
  alt113_end:
    rx107_cur."!cursor_pass"(rx107_pos, "comp_unit", 'backtrack'=>1)
    .return (rx107_cur)
  rx107_restart:
    repr_get_attr_obj rx107_cstack, rx107_cur, rx107_curclass, "$!cstack"
  rx107_fail:
    unless rx107_bstack, rx107_done
    pop $I19, rx107_bstack
    if_null rx107_cstack, rx107_cstack_done
    unless rx107_cstack, rx107_cstack_done
    dec $I19
    set $P11, rx107_cstack[$I19]
  rx107_cstack_done:
    pop rx107_rep, rx107_bstack
    pop rx107_pos, rx107_bstack
    pop $I19, rx107_bstack
    lt rx107_pos, -1, rx107_done
    lt rx107_pos, 0, rx107_fail
    eq $I19, 0, rx107_fail
    if_null rx107_cstack, rx107_jump
    elements $I18, rx107_bstack
    le $I18, 0, rx107_cut
    dec $I18
    set $I18, rx107_bstack[$I18]
  rx107_cut:
    assign rx107_cstack, $I18
  rx107_jump:
    jump $I19
  rx107_done:
    rx107_cur."!cursor_fail"()
    .return (rx107_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "50_1337966799.879_caps"  :subid("416_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 737
    new $P109, "Hash"
    set $P109["statementlist"], 0
    .return ($P109)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "50_1337966799.879_nfa"  :subid("417_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 737
    new $P109, "ResizablePMCArray"
    new $P110, "ResizablePMCArray"
    push $P110, 1
    push $P110, 0
    push $P110, 2
    new $P111, "ResizablePMCArray"
    push $P111, 1
    push $P111, 0
    push $P111, 3
    new $P112, "ResizablePMCArray"
    push $P112, 1
    push $P112, 0
    push $P112, 4
    new $P113, "ResizablePMCArray"
    push $P113, 8
    push $P113, "newpad"
    push $P113, 5
    new $P114, "ResizablePMCArray"
    push $P114, 1
    push $P114, 0
    push $P114, 6
    new $P115, "ResizablePMCArray"
    push $P115, 1
    push $P115, 0
    push $P115, 7
    new $P116, "ResizablePMCArray"
    push $P116, 8
    push $P116, "GLOBALish"
    push $P116, 8
    new $P117, "ResizablePMCArray"
    push $P117, 8
    push $P117, "outerctx"
    push $P117, 9
    new $P118, "ResizablePMCArray"
    push $P118, 8
    push $P118, "statementlist"
    push $P118, 10
    new $P119, "ResizablePMCArray"
    push $P119, 0
    push $P119, 0
    push $P119, 0
    new $P120, "ResizablePMCArray"
    push $P120, $P109
    push $P120, $P110
    push $P120, $P111
    push $P120, $P112
    push $P120, $P113
    push $P120, $P114
    push $P120, $P115
    push $P120, $P116
    push $P120, $P117
    push $P120, $P118
    push $P120, $P119
    .return ($P120)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statementlist"  :subid("51_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1529
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 754
    .lex "self", param_1529
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1530
    .lex "$/", $P1531
    .local string rx116_tgt
    .local int rx116_pos
    .local int rx116_off
    .local int rx116_eos
    .local int rx116_rep
    .local pmc rx116_cur
    .local pmc rx116_curclass
    .local pmc rx116_bstack
    .local pmc rx116_cstack
    (rx116_cur, rx116_tgt, rx116_pos, rx116_curclass, rx116_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx116_cur
    length rx116_eos, rx116_tgt
    eq $I19, 1, rx116_restart
    repr_get_attr_int $I11, self, rx116_curclass, "$!from"
    ne $I11, -1, rxscan117_done
    goto rxscan117_scan
  rxscan117_loop:
    inc rx116_pos
    gt rx116_pos, rx116_eos, rx116_fail
    repr_bind_attr_int rx116_cur, rx116_curclass, "$!from", rx116_pos
  rxscan117_scan:
    nqp_rxmark rx116_bstack, rxscan117_loop, rx116_pos, 0
  rxscan117_done:
  alt118_0:
    nqp_rxmark rx116_bstack, alt118_1, rx116_pos, 0
    repr_bind_attr_int rx116_cur, rx116_curclass, "$!pos", rx116_pos
    $P11 = rx116_cur."ws"()
    repr_get_attr_int $I11, $P11, rx116_curclass, "$!pos"
    lt $I11, 0, rx116_fail
    repr_get_attr_int rx116_pos, $P11, rx116_curclass, "$!pos"
    lt rx116_pos, rx116_eos, rx116_fail
    repr_bind_attr_int rx116_cur, rx116_curclass, "$!pos", rx116_pos
    $P11 = rx116_cur."ws"()
    repr_get_attr_int $I11, $P11, rx116_curclass, "$!pos"
    lt $I11, 0, rx116_fail
    repr_get_attr_int rx116_pos, $P11, rx116_curclass, "$!pos"
    goto alt118_end
  alt118_1:
    repr_bind_attr_int rx116_cur, rx116_curclass, "$!pos", rx116_pos
    $P11 = rx116_cur."ws"()
    repr_get_attr_int $I11, $P11, rx116_curclass, "$!pos"
    lt $I11, 0, rx116_fail
    repr_get_attr_int rx116_pos, $P11, rx116_curclass, "$!pos"
  # rx rxquantr123 ** 0..-1
    nqp_rxmark rx116_bstack, rxquantr123_done, rx116_pos, 0
  rxquantr123_loop:
    repr_bind_attr_int rx116_cur, rx116_curclass, "$!pos", rx116_pos
    $P11 = rx116_cur."statement"()
    repr_get_attr_int $I11, $P11, rx116_curclass, "$!pos"
    lt $I11, 0, rx116_fail
    nqp_rxmark rx116_bstack, rxsubrule124_pass, -1, 0
  rxsubrule124_pass:
    rx116_cstack = rx116_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx116_pos, $P11, rx116_curclass, "$!pos"
    repr_bind_attr_int rx116_cur, rx116_curclass, "$!pos", rx116_pos
    $P11 = rx116_cur."eat_terminator"()
    repr_get_attr_int $I11, $P11, rx116_curclass, "$!pos"
    lt $I11, 0, rx116_fail
    repr_get_attr_int rx116_pos, $P11, rx116_curclass, "$!pos"
    repr_bind_attr_int rx116_cur, rx116_curclass, "$!pos", rx116_pos
    $P11 = rx116_cur."ws"()
    repr_get_attr_int $I11, $P11, rx116_curclass, "$!pos"
    lt $I11, 0, rx116_fail
    repr_get_attr_int rx116_pos, $P11, rx116_curclass, "$!pos"
    nqp_rxpeek $I19, rx116_bstack, rxquantr123_done
    inc $I19
    inc $I19
    set rx116_rep, rx116_bstack[$I19]
    nqp_rxcommit rx116_bstack, rxquantr123_done
    inc rx116_rep
    nqp_rxmark rx116_bstack, rxquantr123_done, rx116_pos, rx116_rep
    goto rxquantr123_loop
  rxquantr123_done:
    repr_bind_attr_int rx116_cur, rx116_curclass, "$!pos", rx116_pos
    $P11 = rx116_cur."ws"()
    repr_get_attr_int $I11, $P11, rx116_curclass, "$!pos"
    lt $I11, 0, rx116_fail
    repr_get_attr_int rx116_pos, $P11, rx116_curclass, "$!pos"
  alt118_end:
    rx116_cur."!cursor_pass"(rx116_pos, "statementlist", 'backtrack'=>1)
    .return (rx116_cur)
  rx116_restart:
    repr_get_attr_obj rx116_cstack, rx116_cur, rx116_curclass, "$!cstack"
  rx116_fail:
    unless rx116_bstack, rx116_done
    pop $I19, rx116_bstack
    if_null rx116_cstack, rx116_cstack_done
    unless rx116_cstack, rx116_cstack_done
    dec $I19
    set $P11, rx116_cstack[$I19]
  rx116_cstack_done:
    pop rx116_rep, rx116_bstack
    pop rx116_pos, rx116_bstack
    pop $I19, rx116_bstack
    lt rx116_pos, -1, rx116_done
    lt rx116_pos, 0, rx116_fail
    eq $I19, 0, rx116_fail
    if_null rx116_cstack, rx116_jump
    elements $I18, rx116_bstack
    le $I18, 0, rx116_cut
    dec $I18
    set $I18, rx116_bstack[$I18]
  rx116_cut:
    assign rx116_cstack, $I18
  rx116_jump:
    jump $I19
  rx116_done:
    rx116_cur."!cursor_fail"()
    .return (rx116_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "51_1337966799.879_caps"  :subid("418_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 754
    new $P104, "Hash"
    set $P104["statement"], 2
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement"  :subid("53_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1534
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 759
    .const 'Sub' $P1539 = "52_1337966799.879" 
    capture_lex $P1539
    .lex "self", param_1534
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1535
    .lex "$/", $P1536
    .local string rx128_tgt
    .local int rx128_pos
    .local int rx128_off
    .local int rx128_eos
    .local int rx128_rep
    .local pmc rx128_cur
    .local pmc rx128_curclass
    .local pmc rx128_bstack
    .local pmc rx128_cstack
    (rx128_cur, rx128_tgt, rx128_pos, rx128_curclass, rx128_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx128_cur
    length rx128_eos, rx128_tgt
    eq $I19, 1, rx128_restart
    repr_get_attr_int $I11, self, rx128_curclass, "$!from"
    ne $I11, -1, rxscan129_done
    goto rxscan129_scan
  rxscan129_loop:
    inc rx128_pos
    gt rx128_pos, rx128_eos, rx128_fail
    repr_bind_attr_int rx128_cur, rx128_curclass, "$!from", rx128_pos
  rxscan129_scan:
    nqp_rxmark rx128_bstack, rxscan129_loop, rx128_pos, 0
  rxscan129_done:
    .const 'Sub' $P1539 = "52_1337966799.879" 
    capture_lex $P1539
    repr_bind_attr_int rx128_cur, rx128_curclass, "$!pos", rx128_pos
    $P11 = rx128_cur."before"($P1539)
    repr_get_attr_int $I11, $P11, rx128_curclass, "$!pos"
    ge $I11, 0, rx128_fail
  alt135_0:
    nqp_rxmark rx128_bstack, alt135_1, rx128_pos, 0
    repr_bind_attr_int rx128_cur, rx128_curclass, "$!pos", rx128_pos
    $P11 = rx128_cur."statement_control"()
    repr_get_attr_int $I11, $P11, rx128_curclass, "$!pos"
    lt $I11, 0, rx128_fail
    nqp_rxmark rx128_bstack, rxsubrule136_pass, -1, 0
  rxsubrule136_pass:
    rx128_cstack = rx128_cur."!cursor_capture"($P11, "statement_control")
    repr_get_attr_int rx128_pos, $P11, rx128_curclass, "$!pos"
    goto alt135_end
  alt135_1:
    repr_bind_attr_int rx128_cur, rx128_curclass, "$!pos", rx128_pos
    $P11 = rx128_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx128_curclass, "$!pos"
    lt $I11, 0, rx128_fail
    nqp_rxmark rx128_bstack, rxsubrule137_pass, -1, 0
  rxsubrule137_pass:
    rx128_cstack = rx128_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx128_pos, $P11, rx128_curclass, "$!pos"
    repr_bind_attr_int rx128_cur, rx128_curclass, "$!pos", rx128_pos
    $P11 = rx128_cur."ws"()
    repr_get_attr_int $I11, $P11, rx128_curclass, "$!pos"
    lt $I11, 0, rx128_fail
    repr_get_attr_int rx128_pos, $P11, rx128_curclass, "$!pos"
  # rx rxquantr139 ** 0..1
    nqp_rxmark rx128_bstack, rxquantr139_done, rx128_pos, 0
  rxquantr139_loop:
  alt140_0:
    nqp_rxmark rx128_bstack, alt140_1, rx128_pos, 0
    repr_bind_attr_int rx128_cur, rx128_curclass, "$!pos", rx128_pos
    $P11 = rx128_cur."MARKED"("endstmt")
    repr_get_attr_int $I11, $P11, rx128_curclass, "$!pos"
    lt $I11, 0, rx128_fail
    goto alt140_end
  alt140_1:
    nqp_rxmark rx128_bstack, alt140_2, rx128_pos, 0
    repr_bind_attr_int rx128_cur, rx128_curclass, "$!pos", rx128_pos
    $P11 = rx128_cur."statement_mod_cond"()
    repr_get_attr_int $I11, $P11, rx128_curclass, "$!pos"
    lt $I11, 0, rx128_fail
    nqp_rxmark rx128_bstack, rxsubrule141_pass, -1, 0
  rxsubrule141_pass:
    rx128_cstack = rx128_cur."!cursor_capture"($P11, "statement_mod_cond")
    repr_get_attr_int rx128_pos, $P11, rx128_curclass, "$!pos"
  # rx rxquantr142 ** 0..1
    nqp_rxmark rx128_bstack, rxquantr142_done, rx128_pos, 0
  rxquantr142_loop:
    repr_bind_attr_int rx128_cur, rx128_curclass, "$!pos", rx128_pos
    $P11 = rx128_cur."statement_mod_loop"()
    repr_get_attr_int $I11, $P11, rx128_curclass, "$!pos"
    lt $I11, 0, rx128_fail
    goto rxsubrule143_pass
  rxsubrule143_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx128_curclass, "$!pos"
    lt $I11, 0, rx128_fail
  rxsubrule143_pass:
    rx128_cstack = rx128_cur."!cursor_capture"($P11, "statement_mod_loop")
    set_addr $I11, rxsubrule143_back
    push rx128_bstack, $I11
    push rx128_bstack, 0
    push rx128_bstack, rx128_pos
    elements $I11, rx128_cstack
    push rx128_bstack, $I11
    repr_get_attr_int rx128_pos, $P11, rx128_curclass, "$!pos"
    nqp_rxpeek $I19, rx128_bstack, rxquantr142_done
    inc $I19
    inc $I19
    set rx128_rep, rx128_bstack[$I19]
    nqp_rxcommit rx128_bstack, rxquantr142_done
    inc rx128_rep
  rxquantr142_done:
    goto alt140_end
  alt140_2:
    repr_bind_attr_int rx128_cur, rx128_curclass, "$!pos", rx128_pos
    $P11 = rx128_cur."statement_mod_loop"()
    repr_get_attr_int $I11, $P11, rx128_curclass, "$!pos"
    lt $I11, 0, rx128_fail
    nqp_rxmark rx128_bstack, rxsubrule144_pass, -1, 0
  rxsubrule144_pass:
    rx128_cstack = rx128_cur."!cursor_capture"($P11, "statement_mod_loop")
    repr_get_attr_int rx128_pos, $P11, rx128_curclass, "$!pos"
  alt140_end:
    nqp_rxpeek $I19, rx128_bstack, rxquantr139_done
    inc $I19
    inc $I19
    set rx128_rep, rx128_bstack[$I19]
    nqp_rxcommit rx128_bstack, rxquantr139_done
    inc rx128_rep
  rxquantr139_done:
  alt135_end:
    rx128_cur."!cursor_pass"(rx128_pos, "statement", 'backtrack'=>1)
    .return (rx128_cur)
  rx128_restart:
    repr_get_attr_obj rx128_cstack, rx128_cur, rx128_curclass, "$!cstack"
  rx128_fail:
    unless rx128_bstack, rx128_done
    pop $I19, rx128_bstack
    if_null rx128_cstack, rx128_cstack_done
    unless rx128_cstack, rx128_cstack_done
    dec $I19
    set $P11, rx128_cstack[$I19]
  rx128_cstack_done:
    pop rx128_rep, rx128_bstack
    pop rx128_pos, rx128_bstack
    pop $I19, rx128_bstack
    lt rx128_pos, -1, rx128_done
    lt rx128_pos, 0, rx128_fail
    eq $I19, 0, rx128_fail
    if_null rx128_cstack, rx128_jump
    elements $I18, rx128_bstack
    le $I18, 0, rx128_cut
    dec $I18
    set $I18, rx128_bstack[$I18]
  rx128_cut:
    assign rx128_cstack, $I18
  rx128_jump:
    jump $I19
  rx128_done:
    rx128_cur."!cursor_fail"()
    .return (rx128_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "53_1337966799.879_caps"  :subid("419_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 759
    new $P104, "Hash"
    set $P104["statement_control"], 0
    set $P104["EXPR"], 0
    set $P104["statement_mod_cond"], 2
    set $P104["statement_mod_loop"], 2
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1538"  :anon :subid("52_1337966799.879") :method :outer("53_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 759
    .lex unicode:"$\x{a2}", $P1542
    .local string rx130_tgt
    .local int rx130_pos
    .local int rx130_off
    .local int rx130_eos
    .local int rx130_rep
    .local pmc rx130_cur
    .local pmc rx130_curclass
    .local pmc rx130_bstack
    .local pmc rx130_cstack
    (rx130_cur, rx130_tgt, rx130_pos, rx130_curclass, rx130_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx130_cur
    length rx130_eos, rx130_tgt
    eq $I19, 1, rx130_restart
    repr_get_attr_int $I11, self, rx130_curclass, "$!from"
    ne $I11, -1, rxscan131_done
    goto rxscan131_scan
  rxscan131_loop:
    inc rx130_pos
    gt rx130_pos, rx130_eos, rx130_fail
    repr_bind_attr_int rx130_cur, rx130_curclass, "$!from", rx130_pos
  rxscan131_scan:
    nqp_rxmark rx130_bstack, rxscan131_loop, rx130_pos, 0
  rxscan131_done:
  alt132_0:
    nqp_rxmark rx130_bstack, alt132_1, rx130_pos, 0
  alt133_0:
    nqp_rxmark rx130_bstack, alt133_1, rx130_pos, 0
    add $I11, rx130_pos, 1
    gt $I11, rx130_eos, rx130_fail
    substr $S10, rx130_tgt, rx130_pos, 1
    ne $S10, ucs4:"]", rx130_fail
    add rx130_pos, 1
    goto alt133_end
  alt133_1:
    ge rx130_pos, rx130_eos, rx130_fail
    substr $S11, rx130_tgt, rx130_pos, 1
    index $I11, ucs4:")}", $S11
    lt $I11, 0, rx130_fail
    inc rx130_pos
  alt133_end:
    goto alt132_end
  alt132_1:
    lt rx130_pos, rx130_eos, rx130_fail
  alt132_end:
    rx130_cur."!cursor_pass"(rx130_pos, 'backtrack'=>1)
    .return (rx130_cur)
  rx130_restart:
    repr_get_attr_obj rx130_cstack, rx130_cur, rx130_curclass, "$!cstack"
  rx130_fail:
    unless rx130_bstack, rx130_done
    pop $I19, rx130_bstack
    if_null rx130_cstack, rx130_cstack_done
    unless rx130_cstack, rx130_cstack_done
    dec $I19
    set $P11, rx130_cstack[$I19]
  rx130_cstack_done:
    pop rx130_rep, rx130_bstack
    pop rx130_pos, rx130_bstack
    pop $I19, rx130_bstack
    lt rx130_pos, -1, rx130_done
    lt rx130_pos, 0, rx130_fail
    eq $I19, 0, rx130_fail
    if_null rx130_cstack, rx130_jump
    elements $I18, rx130_bstack
    le $I18, 0, rx130_cut
    dec $I18
    set $I18, rx130_bstack[$I18]
  rx130_cut:
    assign rx130_cstack, $I18
  rx130_jump:
    jump $I19
  rx130_done:
    rx130_cur."!cursor_fail"()
    .return (rx130_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "52_1337966799.879_caps"  :subid("420_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 759
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "52_1337966799.879_nfa"  :subid("421_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 759
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 93
    push $P105, 0
    push $P105, 6
    push $P105, ")}"
    push $P105, 0
    push $P105, 1
    push $P105, 0
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "eat_terminator"  :subid("54_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1544
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 772
    .lex "self", param_1544
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1545
    .lex "$/", $P1546
    .local string rx145_tgt
    .local int rx145_pos
    .local int rx145_off
    .local int rx145_eos
    .local int rx145_rep
    .local pmc rx145_cur
    .local pmc rx145_curclass
    .local pmc rx145_bstack
    .local pmc rx145_cstack
    (rx145_cur, rx145_tgt, rx145_pos, rx145_curclass, rx145_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx145_cur
    length rx145_eos, rx145_tgt
    eq $I19, 1, rx145_restart
    repr_get_attr_int $I11, self, rx145_curclass, "$!from"
    ne $I11, -1, rxscan146_done
    goto rxscan146_scan
  rxscan146_loop:
    inc rx145_pos
    gt rx145_pos, rx145_eos, rx145_fail
    repr_bind_attr_int rx145_cur, rx145_curclass, "$!from", rx145_pos
  rxscan146_scan:
    nqp_rxmark rx145_bstack, rxscan146_loop, rx145_pos, 0
  rxscan146_done:
  alt147_0:
    nqp_rxmark rx145_bstack, alt147_1, rx145_pos, 0
    add $I11, rx145_pos, 1
    gt $I11, rx145_eos, rx145_fail
    substr $S10, rx145_tgt, rx145_pos, 1
    ne $S10, ucs4:";", rx145_fail
    add rx145_pos, 1
    goto alt147_end
  alt147_1:
    nqp_rxmark rx145_bstack, alt147_2, rx145_pos, 0
    repr_bind_attr_int rx145_cur, rx145_curclass, "$!pos", rx145_pos
    $P11 = rx145_cur."MARKED"("endstmt")
    repr_get_attr_int $I11, $P11, rx145_curclass, "$!pos"
    lt $I11, 0, rx145_fail
    goto alt147_end
  alt147_2:
    nqp_rxmark rx145_bstack, alt147_3, rx145_pos, 0
    repr_bind_attr_int rx145_cur, rx145_curclass, "$!pos", rx145_pos
    $P11 = rx145_cur."terminator"()
    repr_get_attr_int $I11, $P11, rx145_curclass, "$!pos"
    lt $I11, 0, rx145_fail
    goto alt147_end
  alt147_3:
    lt rx145_pos, rx145_eos, rx145_fail
  alt147_end:
    rx145_cur."!cursor_pass"(rx145_pos, "eat_terminator", 'backtrack'=>1)
    .return (rx145_cur)
  rx145_restart:
    repr_get_attr_obj rx145_cstack, rx145_cur, rx145_curclass, "$!cstack"
  rx145_fail:
    unless rx145_bstack, rx145_done
    pop $I19, rx145_bstack
    if_null rx145_cstack, rx145_cstack_done
    unless rx145_cstack, rx145_cstack_done
    dec $I19
    set $P11, rx145_cstack[$I19]
  rx145_cstack_done:
    pop rx145_rep, rx145_bstack
    pop rx145_pos, rx145_bstack
    pop $I19, rx145_bstack
    lt rx145_pos, -1, rx145_done
    lt rx145_pos, 0, rx145_fail
    eq $I19, 0, rx145_fail
    if_null rx145_cstack, rx145_jump
    elements $I18, rx145_bstack
    le $I18, 0, rx145_cut
    dec $I18
    set $I18, rx145_bstack[$I18]
  rx145_cut:
    assign rx145_cstack, $I18
  rx145_jump:
    jump $I19
  rx145_done:
    rx145_cur."!cursor_fail"()
    .return (rx145_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "54_1337966799.879_caps"  :subid("422_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 772
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "54_1337966799.879_nfa"  :subid("423_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 772
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 59
    push $P105, 0
    push $P105, 8
    push $P105, "MARKED"
    push $P105, 0
    push $P105, 8
    push $P105, "terminator"
    push $P105, 0
    push $P105, 1
    push $P105, 0
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "xblock"  :subid("55_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1550
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 779
    .lex "self", param_1550
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1551
    .lex "$/", $P1552
    .local string rx149_tgt
    .local int rx149_pos
    .local int rx149_off
    .local int rx149_eos
    .local int rx149_rep
    .local pmc rx149_cur
    .local pmc rx149_curclass
    .local pmc rx149_bstack
    .local pmc rx149_cstack
    (rx149_cur, rx149_tgt, rx149_pos, rx149_curclass, rx149_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx149_cur
    length rx149_eos, rx149_tgt
    eq $I19, 1, rx149_restart
    repr_get_attr_int $I11, self, rx149_curclass, "$!from"
    ne $I11, -1, rxscan150_done
    goto rxscan150_scan
  rxscan150_loop:
    inc rx149_pos
    gt rx149_pos, rx149_eos, rx149_fail
    repr_bind_attr_int rx149_cur, rx149_curclass, "$!from", rx149_pos
  rxscan150_scan:
    nqp_rxmark rx149_bstack, rxscan150_loop, rx149_pos, 0
  rxscan150_done:
    repr_bind_attr_int rx149_cur, rx149_curclass, "$!pos", rx149_pos
    $P11 = rx149_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx149_curclass, "$!pos"
    lt $I11, 0, rx149_fail
    nqp_rxmark rx149_bstack, rxsubrule151_pass, -1, 0
  rxsubrule151_pass:
    rx149_cstack = rx149_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx149_pos, $P11, rx149_curclass, "$!pos"
    repr_bind_attr_int rx149_cur, rx149_curclass, "$!pos", rx149_pos
    $P11 = rx149_cur."ws"()
    repr_get_attr_int $I11, $P11, rx149_curclass, "$!pos"
    lt $I11, 0, rx149_fail
    repr_get_attr_int rx149_pos, $P11, rx149_curclass, "$!pos"
    repr_bind_attr_int rx149_cur, rx149_curclass, "$!pos", rx149_pos
    $P11 = rx149_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx149_curclass, "$!pos"
    lt $I11, 0, rx149_fail
    nqp_rxmark rx149_bstack, rxsubrule153_pass, -1, 0
  rxsubrule153_pass:
    rx149_cstack = rx149_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx149_pos, $P11, rx149_curclass, "$!pos"
    rx149_cur."!cursor_pass"(rx149_pos, "xblock", 'backtrack'=>1)
    .return (rx149_cur)
  rx149_restart:
    repr_get_attr_obj rx149_cstack, rx149_cur, rx149_curclass, "$!cstack"
  rx149_fail:
    unless rx149_bstack, rx149_done
    pop $I19, rx149_bstack
    if_null rx149_cstack, rx149_cstack_done
    unless rx149_cstack, rx149_cstack_done
    dec $I19
    set $P11, rx149_cstack[$I19]
  rx149_cstack_done:
    pop rx149_rep, rx149_bstack
    pop rx149_pos, rx149_bstack
    pop $I19, rx149_bstack
    lt rx149_pos, -1, rx149_done
    lt rx149_pos, 0, rx149_fail
    eq $I19, 0, rx149_fail
    if_null rx149_cstack, rx149_jump
    elements $I18, rx149_bstack
    le $I18, 0, rx149_cut
    dec $I18
    set $I18, rx149_bstack[$I18]
  rx149_cut:
    assign rx149_cstack, $I18
  rx149_jump:
    jump $I19
  rx149_done:
    rx149_cur."!cursor_fail"()
    .return (rx149_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "55_1337966799.879_caps"  :subid("424_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 779
    new $P104, "Hash"
    set $P104["EXPR"], 0
    set $P104["pblock"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "55_1337966799.879_nfa"  :subid("425_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 779
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "EXPR"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "ws"
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "pblock"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "pblock"  :subid("56_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1556
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 783
    .lex "self", param_1556
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1557
    .lex "$/", $P1558
    .local string rx154_tgt
    .local int rx154_pos
    .local int rx154_off
    .local int rx154_eos
    .local int rx154_rep
    .local pmc rx154_cur
    .local pmc rx154_curclass
    .local pmc rx154_bstack
    .local pmc rx154_cstack
    (rx154_cur, rx154_tgt, rx154_pos, rx154_curclass, rx154_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx154_cur
    length rx154_eos, rx154_tgt
    eq $I19, 1, rx154_restart
    repr_get_attr_int $I11, self, rx154_curclass, "$!from"
    ne $I11, -1, rxscan155_done
    goto rxscan155_scan
  rxscan155_loop:
    inc rx154_pos
    gt rx154_pos, rx154_eos, rx154_fail
    repr_bind_attr_int rx154_cur, rx154_curclass, "$!from", rx154_pos
  rxscan155_scan:
    nqp_rxmark rx154_bstack, rxscan155_loop, rx154_pos, 0
  rxscan155_done:
  alt156_0:
    nqp_rxmark rx154_bstack, alt156_1, rx154_pos, 0
    repr_bind_attr_int rx154_cur, rx154_curclass, "$!pos", rx154_pos
    $P11 = rx154_cur."lambda"()
    repr_get_attr_int $I11, $P11, rx154_curclass, "$!pos"
    lt $I11, 0, rx154_fail
    repr_get_attr_int rx154_pos, $P11, rx154_curclass, "$!pos"
    repr_bind_attr_int rx154_cur, rx154_curclass, "$!pos", rx154_pos
    $P11 = rx154_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx154_curclass, "$!pos"
    lt $I11, 0, rx154_fail
    repr_get_attr_int rx154_pos, $P11, rx154_curclass, "$!pos"
    repr_bind_attr_int rx154_cur, rx154_curclass, "$!pos", rx154_pos
    $P11 = rx154_cur."signature"()
    repr_get_attr_int $I11, $P11, rx154_curclass, "$!pos"
    lt $I11, 0, rx154_fail
    nqp_rxmark rx154_bstack, rxsubrule159_pass, -1, 0
  rxsubrule159_pass:
    rx154_cstack = rx154_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx154_pos, $P11, rx154_curclass, "$!pos"
    repr_bind_attr_int rx154_cur, rx154_curclass, "$!pos", rx154_pos
    $P11 = rx154_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx154_curclass, "$!pos"
    lt $I11, 0, rx154_fail
    nqp_rxmark rx154_bstack, rxsubrule160_pass, -1, 0
  rxsubrule160_pass:
    rx154_cstack = rx154_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx154_pos, $P11, rx154_curclass, "$!pos"
    goto alt156_end
  alt156_1:
    nqp_rxmark rx154_bstack, alt156_2, rx154_pos, 0
    ge rx154_pos, rx154_eos, rx154_fail
    substr $S11, rx154_tgt, rx154_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx154_fail
    repr_bind_attr_int rx154_cur, rx154_curclass, "$!pos", rx154_pos
    $P11 = rx154_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx154_curclass, "$!pos"
    lt $I11, 0, rx154_fail
    repr_get_attr_int rx154_pos, $P11, rx154_curclass, "$!pos"
    repr_bind_attr_int rx154_cur, rx154_curclass, "$!pos", rx154_pos
    $P11 = rx154_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx154_curclass, "$!pos"
    lt $I11, 0, rx154_fail
    nqp_rxmark rx154_bstack, rxsubrule162_pass, -1, 0
  rxsubrule162_pass:
    rx154_cstack = rx154_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx154_pos, $P11, rx154_curclass, "$!pos"
    goto alt156_end
  alt156_2:
    repr_bind_attr_int rx154_cur, rx154_curclass, "$!pos", rx154_pos
    $P11 = rx154_cur."panic"("Missing block")
    repr_get_attr_int $I11, $P11, rx154_curclass, "$!pos"
    lt $I11, 0, rx154_fail
    repr_get_attr_int rx154_pos, $P11, rx154_curclass, "$!pos"
  alt156_end:
    rx154_cur."!cursor_pass"(rx154_pos, "pblock", 'backtrack'=>1)
    .return (rx154_cur)
  rx154_restart:
    repr_get_attr_obj rx154_cstack, rx154_cur, rx154_curclass, "$!cstack"
  rx154_fail:
    unless rx154_bstack, rx154_done
    pop $I19, rx154_bstack
    if_null rx154_cstack, rx154_cstack_done
    unless rx154_cstack, rx154_cstack_done
    dec $I19
    set $P11, rx154_cstack[$I19]
  rx154_cstack_done:
    pop rx154_rep, rx154_bstack
    pop rx154_pos, rx154_bstack
    pop $I19, rx154_bstack
    lt rx154_pos, -1, rx154_done
    lt rx154_pos, 0, rx154_fail
    eq $I19, 0, rx154_fail
    if_null rx154_cstack, rx154_jump
    elements $I18, rx154_bstack
    le $I18, 0, rx154_cut
    dec $I18
    set $I18, rx154_bstack[$I18]
  rx154_cut:
    assign rx154_cstack, $I18
  rx154_jump:
    jump $I19
  rx154_done:
    rx154_cur."!cursor_fail"()
    .return (rx154_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "56_1337966799.879_caps"  :subid("426_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 783
    new $P104, "Hash"
    set $P104["signature"], 0
    set $P104["blockoid"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "56_1337966799.879_nfa"  :subid("427_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 783
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "lambda"
    push $P105, 2
    push $P105, 6
    push $P105, "{"
    push $P105, 5
    push $P105, 8
    push $P105, "panic"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "newpad"
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "signature"
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "blockoid"
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, 0
    push $P109, 0
    push $P109, 0
    new $P110, "ResizablePMCArray"
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "lambda"  :subid("57_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1562
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 794
    .lex "self", param_1562
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1563
    .lex "$/", $P1564
    .local string rx164_tgt
    .local int rx164_pos
    .local int rx164_off
    .local int rx164_eos
    .local int rx164_rep
    .local pmc rx164_cur
    .local pmc rx164_curclass
    .local pmc rx164_bstack
    .local pmc rx164_cstack
    (rx164_cur, rx164_tgt, rx164_pos, rx164_curclass, rx164_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx164_cur
    length rx164_eos, rx164_tgt
    eq $I19, 1, rx164_restart
    repr_get_attr_int $I11, self, rx164_curclass, "$!from"
    ne $I11, -1, rxscan165_done
    goto rxscan165_scan
  rxscan165_loop:
    inc rx164_pos
    gt rx164_pos, rx164_eos, rx164_fail
    repr_bind_attr_int rx164_cur, rx164_curclass, "$!from", rx164_pos
  rxscan165_scan:
    nqp_rxmark rx164_bstack, rxscan165_loop, rx164_pos, 0
  rxscan165_done:
  alt166_0:
    nqp_rxmark rx164_bstack, alt166_1, rx164_pos, 0
    add $I11, rx164_pos, 2
    gt $I11, rx164_eos, rx164_fail
    substr $S10, rx164_tgt, rx164_pos, 2
    ne $S10, ucs4:"->", rx164_fail
    add rx164_pos, 2
    goto alt166_end
  alt166_1:
    add $I11, rx164_pos, 3
    gt $I11, rx164_eos, rx164_fail
    substr $S10, rx164_tgt, rx164_pos, 3
    ne $S10, ucs4:"<->", rx164_fail
    add rx164_pos, 3
  alt166_end:
    rx164_cur."!cursor_pass"(rx164_pos, "lambda", 'backtrack'=>1)
    .return (rx164_cur)
  rx164_restart:
    repr_get_attr_obj rx164_cstack, rx164_cur, rx164_curclass, "$!cstack"
  rx164_fail:
    unless rx164_bstack, rx164_done
    pop $I19, rx164_bstack
    if_null rx164_cstack, rx164_cstack_done
    unless rx164_cstack, rx164_cstack_done
    dec $I19
    set $P11, rx164_cstack[$I19]
  rx164_cstack_done:
    pop rx164_rep, rx164_bstack
    pop rx164_pos, rx164_bstack
    pop $I19, rx164_bstack
    lt rx164_pos, -1, rx164_done
    lt rx164_pos, 0, rx164_fail
    eq $I19, 0, rx164_fail
    if_null rx164_cstack, rx164_jump
    elements $I18, rx164_bstack
    le $I18, 0, rx164_cut
    dec $I18
    set $I18, rx164_bstack[$I18]
  rx164_cut:
    assign rx164_cstack, $I18
  rx164_jump:
    jump $I19
  rx164_done:
    rx164_cur."!cursor_fail"()
    .return (rx164_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "57_1337966799.879_caps"  :subid("428_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 794
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "57_1337966799.879_nfa"  :subid("429_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 794
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 45
    push $P105, 2
    push $P105, 2
    push $P105, 60
    push $P105, 3
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 62
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 45
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 62
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "block"  :subid("58_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1568
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 796
    .lex "self", param_1568
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1569
    .lex "$/", $P1570
    .local string rx167_tgt
    .local int rx167_pos
    .local int rx167_off
    .local int rx167_eos
    .local int rx167_rep
    .local pmc rx167_cur
    .local pmc rx167_curclass
    .local pmc rx167_bstack
    .local pmc rx167_cstack
    (rx167_cur, rx167_tgt, rx167_pos, rx167_curclass, rx167_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx167_cur
    length rx167_eos, rx167_tgt
    eq $I19, 1, rx167_restart
    repr_get_attr_int $I11, self, rx167_curclass, "$!from"
    ne $I11, -1, rxscan168_done
    goto rxscan168_scan
  rxscan168_loop:
    inc rx167_pos
    gt rx167_pos, rx167_eos, rx167_fail
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!from", rx167_pos
  rxscan168_scan:
    nqp_rxmark rx167_bstack, rxscan168_loop, rx167_pos, 0
  rxscan168_done:
  alt169_0:
    nqp_rxmark rx167_bstack, alt169_1, rx167_pos, 0
    ge rx167_pos, rx167_eos, rx167_fail
    substr $S11, rx167_tgt, rx167_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx167_fail
    goto alt169_end
  alt169_1:
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    $P11 = rx167_cur."panic"("Missing block")
    repr_get_attr_int $I11, $P11, rx167_curclass, "$!pos"
    lt $I11, 0, rx167_fail
    repr_get_attr_int rx167_pos, $P11, rx167_curclass, "$!pos"
  alt169_end:
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    $P11 = rx167_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx167_curclass, "$!pos"
    lt $I11, 0, rx167_fail
    repr_get_attr_int rx167_pos, $P11, rx167_curclass, "$!pos"
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    $P11 = rx167_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx167_curclass, "$!pos"
    lt $I11, 0, rx167_fail
    nqp_rxmark rx167_bstack, rxsubrule172_pass, -1, 0
  rxsubrule172_pass:
    rx167_cstack = rx167_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx167_pos, $P11, rx167_curclass, "$!pos"
    rx167_cur."!cursor_pass"(rx167_pos, "block", 'backtrack'=>1)
    .return (rx167_cur)
  rx167_restart:
    repr_get_attr_obj rx167_cstack, rx167_cur, rx167_curclass, "$!cstack"
  rx167_fail:
    unless rx167_bstack, rx167_done
    pop $I19, rx167_bstack
    if_null rx167_cstack, rx167_cstack_done
    unless rx167_cstack, rx167_cstack_done
    dec $I19
    set $P11, rx167_cstack[$I19]
  rx167_cstack_done:
    pop rx167_rep, rx167_bstack
    pop rx167_pos, rx167_bstack
    pop $I19, rx167_bstack
    lt rx167_pos, -1, rx167_done
    lt rx167_pos, 0, rx167_fail
    eq $I19, 0, rx167_fail
    if_null rx167_cstack, rx167_jump
    elements $I18, rx167_bstack
    le $I18, 0, rx167_cut
    dec $I18
    set $I18, rx167_bstack[$I18]
  rx167_cut:
    assign rx167_cstack, $I18
  rx167_jump:
    jump $I19
  rx167_done:
    rx167_cur."!cursor_fail"()
    .return (rx167_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "58_1337966799.879_caps"  :subid("430_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 796
    new $P104, "Hash"
    set $P104["blockoid"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "blockoid"  :subid("59_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1573
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 802
    .lex "self", param_1573
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1574
    .lex "$/", $P1575
    .local string rx173_tgt
    .local int rx173_pos
    .local int rx173_off
    .local int rx173_eos
    .local int rx173_rep
    .local pmc rx173_cur
    .local pmc rx173_curclass
    .local pmc rx173_bstack
    .local pmc rx173_cstack
    (rx173_cur, rx173_tgt, rx173_pos, rx173_curclass, rx173_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx173_cur
    length rx173_eos, rx173_tgt
    eq $I19, 1, rx173_restart
    repr_get_attr_int $I11, self, rx173_curclass, "$!from"
    ne $I11, -1, rxscan174_done
    goto rxscan174_scan
  rxscan174_loop:
    inc rx173_pos
    gt rx173_pos, rx173_eos, rx173_fail
    repr_bind_attr_int rx173_cur, rx173_curclass, "$!from", rx173_pos
  rxscan174_scan:
    nqp_rxmark rx173_bstack, rxscan174_loop, rx173_pos, 0
  rxscan174_done:
    repr_bind_attr_int rx173_cur, rx173_curclass, "$!pos", rx173_pos
    $P11 = rx173_cur."finishpad"()
    repr_get_attr_int $I11, $P11, rx173_curclass, "$!pos"
    lt $I11, 0, rx173_fail
    repr_get_attr_int rx173_pos, $P11, rx173_curclass, "$!pos"
  alt176_0:
    nqp_rxmark rx173_bstack, alt176_1, rx173_pos, 0
    add $I11, rx173_pos, 14
    gt $I11, rx173_eos, rx173_fail
    substr $S10, rx173_tgt, rx173_pos, 14
    ne $S10, ucs4:"{YOU_ARE_HERE}", rx173_fail
    add rx173_pos, 14
    repr_bind_attr_int rx173_cur, rx173_curclass, "$!pos", rx173_pos
    $P11 = rx173_cur."you_are_here"()
    repr_get_attr_int $I11, $P11, rx173_curclass, "$!pos"
    lt $I11, 0, rx173_fail
    nqp_rxmark rx173_bstack, rxsubrule177_pass, -1, 0
  rxsubrule177_pass:
    rx173_cstack = rx173_cur."!cursor_capture"($P11, "you_are_here")
    repr_get_attr_int rx173_pos, $P11, rx173_curclass, "$!pos"
    goto alt176_end
  alt176_1:
    add $I11, rx173_pos, 1
    gt $I11, rx173_eos, rx173_fail
    substr $S10, rx173_tgt, rx173_pos, 1
    ne $S10, ucs4:"{", rx173_fail
    add rx173_pos, 1
    repr_bind_attr_int rx173_cur, rx173_curclass, "$!pos", rx173_pos
    $P11 = rx173_cur."statementlist"()
    repr_get_attr_int $I11, $P11, rx173_curclass, "$!pos"
    lt $I11, 0, rx173_fail
    nqp_rxmark rx173_bstack, rxsubrule178_pass, -1, 0
  rxsubrule178_pass:
    rx173_cstack = rx173_cur."!cursor_capture"($P11, "statementlist")
    repr_get_attr_int rx173_pos, $P11, rx173_curclass, "$!pos"
  alt179_0:
    nqp_rxmark rx173_bstack, alt179_1, rx173_pos, 0
    add $I11, rx173_pos, 1
    gt $I11, rx173_eos, rx173_fail
    substr $S10, rx173_tgt, rx173_pos, 1
    ne $S10, ucs4:"}", rx173_fail
    add rx173_pos, 1
    goto alt179_end
  alt179_1:
    repr_bind_attr_int rx173_cur, rx173_curclass, "$!pos", rx173_pos
    $P11 = rx173_cur."FAILGOAL"("'}'")
    repr_get_attr_int $I11, $P11, rx173_curclass, "$!pos"
    lt $I11, 0, rx173_fail
    goto rxsubrule180_pass
  rxsubrule180_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx173_curclass, "$!pos"
    lt $I11, 0, rx173_fail
  rxsubrule180_pass:
    rx173_cstack = rx173_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule180_back
    push rx173_bstack, $I11
    push rx173_bstack, 0
    push rx173_bstack, rx173_pos
    elements $I11, rx173_cstack
    push rx173_bstack, $I11
    repr_get_attr_int rx173_pos, $P11, rx173_curclass, "$!pos"
  alt179_end:
  alt176_end:
    repr_bind_attr_int rx173_cur, rx173_curclass, "$!pos", rx173_pos
    $P11 = rx173_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx173_curclass, "$!pos"
    lt $I11, 0, rx173_fail
    rx173_cur."!cursor_pass"(rx173_pos, "blockoid", 'backtrack'=>1)
    .return (rx173_cur)
  rx173_restart:
    repr_get_attr_obj rx173_cstack, rx173_cur, rx173_curclass, "$!cstack"
  rx173_fail:
    unless rx173_bstack, rx173_done
    pop $I19, rx173_bstack
    if_null rx173_cstack, rx173_cstack_done
    unless rx173_cstack, rx173_cstack_done
    dec $I19
    set $P11, rx173_cstack[$I19]
  rx173_cstack_done:
    pop rx173_rep, rx173_bstack
    pop rx173_pos, rx173_bstack
    pop $I19, rx173_bstack
    lt rx173_pos, -1, rx173_done
    lt rx173_pos, 0, rx173_fail
    eq $I19, 0, rx173_fail
    if_null rx173_cstack, rx173_jump
    elements $I18, rx173_bstack
    le $I18, 0, rx173_cut
    dec $I18
    set $I18, rx173_bstack[$I18]
  rx173_cut:
    assign rx173_cstack, $I18
  rx173_jump:
    jump $I19
  rx173_done:
    rx173_cur."!cursor_fail"()
    .return (rx173_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "59_1337966799.879_caps"  :subid("431_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 802
    new $P104, "Hash"
    set $P104["you_are_here"], 0
    set $P104["statementlist"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "59_1337966799.879_nfa"  :subid("432_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 802
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "finishpad"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 0
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "newpad"  :subid("60_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1579
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 811
    .lex "self", param_1579
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1580
    .lex "$/", $P1581
    .local string rx181_tgt
    .local int rx181_pos
    .local int rx181_off
    .local int rx181_eos
    .local int rx181_rep
    .local pmc rx181_cur
    .local pmc rx181_curclass
    .local pmc rx181_bstack
    .local pmc rx181_cstack
    (rx181_cur, rx181_tgt, rx181_pos, rx181_curclass, rx181_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx181_cur
    length rx181_eos, rx181_tgt
    eq $I19, 1, rx181_restart
    repr_get_attr_int $I11, self, rx181_curclass, "$!from"
    ne $I11, -1, rxscan182_done
    goto rxscan182_scan
  rxscan182_loop:
    inc rx181_pos
    gt rx181_pos, rx181_eos, rx181_fail
    repr_bind_attr_int rx181_cur, rx181_curclass, "$!from", rx181_pos
  rxscan182_scan:
    nqp_rxmark rx181_bstack, rxscan182_loop, rx181_pos, 0
  rxscan182_done:
    rx181_cur."!cursor_pass"(rx181_pos, "newpad", 'backtrack'=>1)
    .return (rx181_cur)
  rx181_restart:
    repr_get_attr_obj rx181_cstack, rx181_cur, rx181_curclass, "$!cstack"
  rx181_fail:
    unless rx181_bstack, rx181_done
    pop $I19, rx181_bstack
    if_null rx181_cstack, rx181_cstack_done
    unless rx181_cstack, rx181_cstack_done
    dec $I19
    set $P11, rx181_cstack[$I19]
  rx181_cstack_done:
    pop rx181_rep, rx181_bstack
    pop rx181_pos, rx181_bstack
    pop $I19, rx181_bstack
    lt rx181_pos, -1, rx181_done
    lt rx181_pos, 0, rx181_fail
    eq $I19, 0, rx181_fail
    if_null rx181_cstack, rx181_jump
    elements $I18, rx181_bstack
    le $I18, 0, rx181_cut
    dec $I18
    set $I18, rx181_bstack[$I18]
  rx181_cut:
    assign rx181_cstack, $I18
  rx181_jump:
    jump $I19
  rx181_done:
    rx181_cur."!cursor_fail"()
    .return (rx181_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "60_1337966799.879_caps"  :subid("433_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 811
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "outerctx"  :subid("61_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1584
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 812
    .lex "self", param_1584
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1585
    .lex "$/", $P1586
    .local string rx183_tgt
    .local int rx183_pos
    .local int rx183_off
    .local int rx183_eos
    .local int rx183_rep
    .local pmc rx183_cur
    .local pmc rx183_curclass
    .local pmc rx183_bstack
    .local pmc rx183_cstack
    (rx183_cur, rx183_tgt, rx183_pos, rx183_curclass, rx183_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx183_cur
    length rx183_eos, rx183_tgt
    eq $I19, 1, rx183_restart
    repr_get_attr_int $I11, self, rx183_curclass, "$!from"
    ne $I11, -1, rxscan184_done
    goto rxscan184_scan
  rxscan184_loop:
    inc rx183_pos
    gt rx183_pos, rx183_eos, rx183_fail
    repr_bind_attr_int rx183_cur, rx183_curclass, "$!from", rx183_pos
  rxscan184_scan:
    nqp_rxmark rx183_bstack, rxscan184_loop, rx183_pos, 0
  rxscan184_done:
    rx183_cur."!cursor_pass"(rx183_pos, "outerctx", 'backtrack'=>1)
    .return (rx183_cur)
  rx183_restart:
    repr_get_attr_obj rx183_cstack, rx183_cur, rx183_curclass, "$!cstack"
  rx183_fail:
    unless rx183_bstack, rx183_done
    pop $I19, rx183_bstack
    if_null rx183_cstack, rx183_cstack_done
    unless rx183_cstack, rx183_cstack_done
    dec $I19
    set $P11, rx183_cstack[$I19]
  rx183_cstack_done:
    pop rx183_rep, rx183_bstack
    pop rx183_pos, rx183_bstack
    pop $I19, rx183_bstack
    lt rx183_pos, -1, rx183_done
    lt rx183_pos, 0, rx183_fail
    eq $I19, 0, rx183_fail
    if_null rx183_cstack, rx183_jump
    elements $I18, rx183_bstack
    le $I18, 0, rx183_cut
    dec $I18
    set $I18, rx183_bstack[$I18]
  rx183_cut:
    assign rx183_cstack, $I18
  rx183_jump:
    jump $I19
  rx183_done:
    rx183_cur."!cursor_fail"()
    .return (rx183_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "61_1337966799.879_caps"  :subid("434_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 812
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "GLOBALish"  :subid("62_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1589
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 813
    .lex "self", param_1589
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1590
    .lex "$/", $P1591
    .local string rx185_tgt
    .local int rx185_pos
    .local int rx185_off
    .local int rx185_eos
    .local int rx185_rep
    .local pmc rx185_cur
    .local pmc rx185_curclass
    .local pmc rx185_bstack
    .local pmc rx185_cstack
    (rx185_cur, rx185_tgt, rx185_pos, rx185_curclass, rx185_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx185_cur
    length rx185_eos, rx185_tgt
    eq $I19, 1, rx185_restart
    repr_get_attr_int $I11, self, rx185_curclass, "$!from"
    ne $I11, -1, rxscan186_done
    goto rxscan186_scan
  rxscan186_loop:
    inc rx185_pos
    gt rx185_pos, rx185_eos, rx185_fail
    repr_bind_attr_int rx185_cur, rx185_curclass, "$!from", rx185_pos
  rxscan186_scan:
    nqp_rxmark rx185_bstack, rxscan186_loop, rx185_pos, 0
  rxscan186_done:
    rx185_cur."!cursor_pass"(rx185_pos, "GLOBALish", 'backtrack'=>1)
    .return (rx185_cur)
  rx185_restart:
    repr_get_attr_obj rx185_cstack, rx185_cur, rx185_curclass, "$!cstack"
  rx185_fail:
    unless rx185_bstack, rx185_done
    pop $I19, rx185_bstack
    if_null rx185_cstack, rx185_cstack_done
    unless rx185_cstack, rx185_cstack_done
    dec $I19
    set $P11, rx185_cstack[$I19]
  rx185_cstack_done:
    pop rx185_rep, rx185_bstack
    pop rx185_pos, rx185_bstack
    pop $I19, rx185_bstack
    lt rx185_pos, -1, rx185_done
    lt rx185_pos, 0, rx185_fail
    eq $I19, 0, rx185_fail
    if_null rx185_cstack, rx185_jump
    elements $I18, rx185_bstack
    le $I18, 0, rx185_cut
    dec $I18
    set $I18, rx185_bstack[$I18]
  rx185_cut:
    assign rx185_cstack, $I18
  rx185_jump:
    jump $I19
  rx185_done:
    rx185_cur."!cursor_fail"()
    .return (rx185_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "62_1337966799.879_caps"  :subid("435_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 813
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "finishpad"  :subid("63_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1594
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 814
    .lex "self", param_1594
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1595
    .lex "$/", $P1596
    .local string rx187_tgt
    .local int rx187_pos
    .local int rx187_off
    .local int rx187_eos
    .local int rx187_rep
    .local pmc rx187_cur
    .local pmc rx187_curclass
    .local pmc rx187_bstack
    .local pmc rx187_cstack
    (rx187_cur, rx187_tgt, rx187_pos, rx187_curclass, rx187_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx187_cur
    length rx187_eos, rx187_tgt
    eq $I19, 1, rx187_restart
    repr_get_attr_int $I11, self, rx187_curclass, "$!from"
    ne $I11, -1, rxscan188_done
    goto rxscan188_scan
  rxscan188_loop:
    inc rx187_pos
    gt rx187_pos, rx187_eos, rx187_fail
    repr_bind_attr_int rx187_cur, rx187_curclass, "$!from", rx187_pos
  rxscan188_scan:
    nqp_rxmark rx187_bstack, rxscan188_loop, rx187_pos, 0
  rxscan188_done:
    rx187_cur."!cursor_pass"(rx187_pos, "finishpad", 'backtrack'=>1)
    .return (rx187_cur)
  rx187_restart:
    repr_get_attr_obj rx187_cstack, rx187_cur, rx187_curclass, "$!cstack"
  rx187_fail:
    unless rx187_bstack, rx187_done
    pop $I19, rx187_bstack
    if_null rx187_cstack, rx187_cstack_done
    unless rx187_cstack, rx187_cstack_done
    dec $I19
    set $P11, rx187_cstack[$I19]
  rx187_cstack_done:
    pop rx187_rep, rx187_bstack
    pop rx187_pos, rx187_bstack
    pop $I19, rx187_bstack
    lt rx187_pos, -1, rx187_done
    lt rx187_pos, 0, rx187_fail
    eq $I19, 0, rx187_fail
    if_null rx187_cstack, rx187_jump
    elements $I18, rx187_bstack
    le $I18, 0, rx187_cut
    dec $I18
    set $I18, rx187_bstack[$I18]
  rx187_cut:
    assign rx187_cstack, $I18
  rx187_jump:
    jump $I19
  rx187_done:
    rx187_cur."!cursor_fail"()
    .return (rx187_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "63_1337966799.879_caps"  :subid("436_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 814
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "you_are_here"  :subid("64_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1599
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 815
    .lex "self", param_1599
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1600
    .lex "$/", $P1601
    .local string rx189_tgt
    .local int rx189_pos
    .local int rx189_off
    .local int rx189_eos
    .local int rx189_rep
    .local pmc rx189_cur
    .local pmc rx189_curclass
    .local pmc rx189_bstack
    .local pmc rx189_cstack
    (rx189_cur, rx189_tgt, rx189_pos, rx189_curclass, rx189_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx189_cur
    length rx189_eos, rx189_tgt
    eq $I19, 1, rx189_restart
    repr_get_attr_int $I11, self, rx189_curclass, "$!from"
    ne $I11, -1, rxscan190_done
    goto rxscan190_scan
  rxscan190_loop:
    inc rx189_pos
    gt rx189_pos, rx189_eos, rx189_fail
    repr_bind_attr_int rx189_cur, rx189_curclass, "$!from", rx189_pos
  rxscan190_scan:
    nqp_rxmark rx189_bstack, rxscan190_loop, rx189_pos, 0
  rxscan190_done:
    rx189_cur."!cursor_pass"(rx189_pos, "you_are_here", 'backtrack'=>1)
    .return (rx189_cur)
  rx189_restart:
    repr_get_attr_obj rx189_cstack, rx189_cur, rx189_curclass, "$!cstack"
  rx189_fail:
    unless rx189_bstack, rx189_done
    pop $I19, rx189_bstack
    if_null rx189_cstack, rx189_cstack_done
    unless rx189_cstack, rx189_cstack_done
    dec $I19
    set $P11, rx189_cstack[$I19]
  rx189_cstack_done:
    pop rx189_rep, rx189_bstack
    pop rx189_pos, rx189_bstack
    pop $I19, rx189_bstack
    lt rx189_pos, -1, rx189_done
    lt rx189_pos, 0, rx189_fail
    eq $I19, 0, rx189_fail
    if_null rx189_cstack, rx189_jump
    elements $I18, rx189_bstack
    le $I18, 0, rx189_cut
    dec $I18
    set $I18, rx189_bstack[$I18]
  rx189_cut:
    assign rx189_cstack, $I18
  rx189_jump:
    jump $I19
  rx189_done:
    rx189_cur."!cursor_fail"()
    .return (rx189_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "64_1337966799.879_caps"  :subid("437_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 815
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "terminator"  :subid("65_1337966799.879")
    .param pmc param_1604
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 817
    .lex "self", param_1604
    $P103 = param_1604."!protoregex"("terminator")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "terminator:sym<;>"  :subid("66_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1606
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 819
    .lex "self", param_1606
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1607
    .lex "$/", $P1608
    .local string rx191_tgt
    .local int rx191_pos
    .local int rx191_off
    .local int rx191_eos
    .local int rx191_rep
    .local pmc rx191_cur
    .local pmc rx191_curclass
    .local pmc rx191_bstack
    .local pmc rx191_cstack
    (rx191_cur, rx191_tgt, rx191_pos, rx191_curclass, rx191_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx191_cur
    length rx191_eos, rx191_tgt
    eq $I19, 1, rx191_restart
    repr_get_attr_int $I11, self, rx191_curclass, "$!from"
    ne $I11, -1, rxscan192_done
    goto rxscan192_scan
  rxscan192_loop:
    inc rx191_pos
    gt rx191_pos, rx191_eos, rx191_fail
    repr_bind_attr_int rx191_cur, rx191_curclass, "$!from", rx191_pos
  rxscan192_scan:
    nqp_rxmark rx191_bstack, rxscan192_loop, rx191_pos, 0
  rxscan192_done:
    ge rx191_pos, rx191_eos, rx191_fail
    substr $S11, rx191_tgt, rx191_pos, 1
    index $I11, ucs4:";", $S11
    lt $I11, 0, rx191_fail
    rx191_cur."!cursor_pass"(rx191_pos, "terminator:sym<;>", 'backtrack'=>1)
    .return (rx191_cur)
  rx191_restart:
    repr_get_attr_obj rx191_cstack, rx191_cur, rx191_curclass, "$!cstack"
  rx191_fail:
    unless rx191_bstack, rx191_done
    pop $I19, rx191_bstack
    if_null rx191_cstack, rx191_cstack_done
    unless rx191_cstack, rx191_cstack_done
    dec $I19
    set $P11, rx191_cstack[$I19]
  rx191_cstack_done:
    pop rx191_rep, rx191_bstack
    pop rx191_pos, rx191_bstack
    pop $I19, rx191_bstack
    lt rx191_pos, -1, rx191_done
    lt rx191_pos, 0, rx191_fail
    eq $I19, 0, rx191_fail
    if_null rx191_cstack, rx191_jump
    elements $I18, rx191_bstack
    le $I18, 0, rx191_cut
    dec $I18
    set $I18, rx191_bstack[$I18]
  rx191_cut:
    assign rx191_cstack, $I18
  rx191_jump:
    jump $I19
  rx191_done:
    rx191_cur."!cursor_fail"()
    .return (rx191_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "66_1337966799.879_caps"  :subid("438_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 819
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "66_1337966799.879_nfa"  :subid("439_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 819
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 6
    push $P105, ";"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 0
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "terminator:sym<}>"  :subid("67_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1612
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 820
    .lex "self", param_1612
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1613
    .lex "$/", $P1614
    .local string rx193_tgt
    .local int rx193_pos
    .local int rx193_off
    .local int rx193_eos
    .local int rx193_rep
    .local pmc rx193_cur
    .local pmc rx193_curclass
    .local pmc rx193_bstack
    .local pmc rx193_cstack
    (rx193_cur, rx193_tgt, rx193_pos, rx193_curclass, rx193_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx193_cur
    length rx193_eos, rx193_tgt
    eq $I19, 1, rx193_restart
    repr_get_attr_int $I11, self, rx193_curclass, "$!from"
    ne $I11, -1, rxscan194_done
    goto rxscan194_scan
  rxscan194_loop:
    inc rx193_pos
    gt rx193_pos, rx193_eos, rx193_fail
    repr_bind_attr_int rx193_cur, rx193_curclass, "$!from", rx193_pos
  rxscan194_scan:
    nqp_rxmark rx193_bstack, rxscan194_loop, rx193_pos, 0
  rxscan194_done:
    ge rx193_pos, rx193_eos, rx193_fail
    substr $S11, rx193_tgt, rx193_pos, 1
    index $I11, ucs4:"}", $S11
    lt $I11, 0, rx193_fail
    rx193_cur."!cursor_pass"(rx193_pos, "terminator:sym<}>", 'backtrack'=>1)
    .return (rx193_cur)
  rx193_restart:
    repr_get_attr_obj rx193_cstack, rx193_cur, rx193_curclass, "$!cstack"
  rx193_fail:
    unless rx193_bstack, rx193_done
    pop $I19, rx193_bstack
    if_null rx193_cstack, rx193_cstack_done
    unless rx193_cstack, rx193_cstack_done
    dec $I19
    set $P11, rx193_cstack[$I19]
  rx193_cstack_done:
    pop rx193_rep, rx193_bstack
    pop rx193_pos, rx193_bstack
    pop $I19, rx193_bstack
    lt rx193_pos, -1, rx193_done
    lt rx193_pos, 0, rx193_fail
    eq $I19, 0, rx193_fail
    if_null rx193_cstack, rx193_jump
    elements $I18, rx193_bstack
    le $I18, 0, rx193_cut
    dec $I18
    set $I18, rx193_bstack[$I18]
  rx193_cut:
    assign rx193_cstack, $I18
  rx193_jump:
    jump $I19
  rx193_done:
    rx193_cur."!cursor_fail"()
    .return (rx193_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "67_1337966799.879_caps"  :subid("440_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 820
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "67_1337966799.879_nfa"  :subid("441_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 820
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 6
    push $P105, "}"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 0
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control"  :subid("68_1337966799.879")
    .param pmc param_1618
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 824
    .lex "self", param_1618
    $P103 = param_1618."!protoregex"("statement_control")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<use>"  :subid("69_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1620
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 826
    .lex "self", param_1620
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1621
    .lex "$/", $P1622
    .local string rx195_tgt
    .local int rx195_pos
    .local int rx195_off
    .local int rx195_eos
    .local int rx195_rep
    .local pmc rx195_cur
    .local pmc rx195_curclass
    .local pmc rx195_bstack
    .local pmc rx195_cstack
    (rx195_cur, rx195_tgt, rx195_pos, rx195_curclass, rx195_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx195_cur
    length rx195_eos, rx195_tgt
    eq $I19, 1, rx195_restart
    repr_get_attr_int $I11, self, rx195_curclass, "$!from"
    ne $I11, -1, rxscan196_done
    goto rxscan196_scan
  rxscan196_loop:
    inc rx195_pos
    gt rx195_pos, rx195_eos, rx195_fail
    repr_bind_attr_int rx195_cur, rx195_curclass, "$!from", rx195_pos
  rxscan196_scan:
    nqp_rxmark rx195_bstack, rxscan196_loop, rx195_pos, 0
  rxscan196_done:
    nqp_rxmark rx195_bstack, rxcap197_fail, rx195_pos, 0
    add $I11, rx195_pos, 3
    gt $I11, rx195_eos, rx195_fail
    substr $S10, rx195_tgt, rx195_pos, 3
    ne $S10, ucs4:"use", rx195_fail
    add rx195_pos, 3
    nqp_rxpeek $I19, rx195_bstack, rxcap197_fail
    inc $I19
    set $I11, rx195_bstack[$I19]
    $P11 = rx195_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx195_pos)
    rx195_cstack = rx195_cur."!cursor_capture"($P11, "sym")
    goto rxcap197_done
  rxcap197_fail:
    goto rx195_fail
  rxcap197_done:
    ge rx195_pos, rx195_eos, rx195_fail
    is_cclass $I11, .CCLASS_WHITESPACE, rx195_tgt, rx195_pos
    unless $I11, rx195_fail
    add rx195_pos, 1
    repr_bind_attr_int rx195_cur, rx195_curclass, "$!pos", rx195_pos
    $P11 = rx195_cur."ws"()
    repr_get_attr_int $I11, $P11, rx195_curclass, "$!pos"
    lt $I11, 0, rx195_fail
    repr_get_attr_int rx195_pos, $P11, rx195_curclass, "$!pos"
    repr_bind_attr_int rx195_cur, rx195_curclass, "$!pos", rx195_pos
    $P11 = rx195_cur."name"()
    repr_get_attr_int $I11, $P11, rx195_curclass, "$!pos"
    lt $I11, 0, rx195_fail
    nqp_rxmark rx195_bstack, rxsubrule199_pass, -1, 0
  rxsubrule199_pass:
    rx195_cstack = rx195_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx195_pos, $P11, rx195_curclass, "$!pos"
    repr_bind_attr_int rx195_cur, rx195_curclass, "$!pos", rx195_pos
    $P11 = rx195_cur."ws"()
    repr_get_attr_int $I11, $P11, rx195_curclass, "$!pos"
    lt $I11, 0, rx195_fail
    repr_get_attr_int rx195_pos, $P11, rx195_curclass, "$!pos"
    rx195_cur."!cursor_pass"(rx195_pos, "statement_control:sym<use>", 'backtrack'=>1)
    .return (rx195_cur)
  rx195_restart:
    repr_get_attr_obj rx195_cstack, rx195_cur, rx195_curclass, "$!cstack"
  rx195_fail:
    unless rx195_bstack, rx195_done
    pop $I19, rx195_bstack
    if_null rx195_cstack, rx195_cstack_done
    unless rx195_cstack, rx195_cstack_done
    dec $I19
    set $P11, rx195_cstack[$I19]
  rx195_cstack_done:
    pop rx195_rep, rx195_bstack
    pop rx195_pos, rx195_bstack
    pop $I19, rx195_bstack
    lt rx195_pos, -1, rx195_done
    lt rx195_pos, 0, rx195_fail
    eq $I19, 0, rx195_fail
    if_null rx195_cstack, rx195_jump
    elements $I18, rx195_bstack
    le $I18, 0, rx195_cut
    dec $I18
    set $I18, rx195_bstack[$I18]
  rx195_cut:
    assign rx195_cstack, $I18
  rx195_jump:
    jump $I19
  rx195_done:
    rx195_cur."!cursor_fail"()
    .return (rx195_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "69_1337966799.879_caps"  :subid("442_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 826
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["name"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "69_1337966799.879_nfa"  :subid("443_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 826
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 117
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 115
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 101
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 4
    push $P108, 32
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 0
    push $P109, 0
    push $P109, 0
    new $P110, "ResizablePMCArray"
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<if>"  :subid("70_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1626
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 830
    .lex "self", param_1626
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1627
    .lex "$/", $P1628
    .local string rx201_tgt
    .local int rx201_pos
    .local int rx201_off
    .local int rx201_eos
    .local int rx201_rep
    .local pmc rx201_cur
    .local pmc rx201_curclass
    .local pmc rx201_bstack
    .local pmc rx201_cstack
    (rx201_cur, rx201_tgt, rx201_pos, rx201_curclass, rx201_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx201_cur
    length rx201_eos, rx201_tgt
    eq $I19, 1, rx201_restart
    repr_get_attr_int $I11, self, rx201_curclass, "$!from"
    ne $I11, -1, rxscan202_done
    goto rxscan202_scan
  rxscan202_loop:
    inc rx201_pos
    gt rx201_pos, rx201_eos, rx201_fail
    repr_bind_attr_int rx201_cur, rx201_curclass, "$!from", rx201_pos
  rxscan202_scan:
    nqp_rxmark rx201_bstack, rxscan202_loop, rx201_pos, 0
  rxscan202_done:
    nqp_rxmark rx201_bstack, rxcap203_fail, rx201_pos, 0
    add $I11, rx201_pos, 2
    gt $I11, rx201_eos, rx201_fail
    substr $S10, rx201_tgt, rx201_pos, 2
    ne $S10, ucs4:"if", rx201_fail
    add rx201_pos, 2
    nqp_rxpeek $I19, rx201_bstack, rxcap203_fail
    inc $I19
    set $I11, rx201_bstack[$I19]
    $P11 = rx201_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx201_pos)
    rx201_cstack = rx201_cur."!cursor_capture"($P11, "sym")
    goto rxcap203_done
  rxcap203_fail:
    goto rx201_fail
  rxcap203_done:
    ge rx201_pos, rx201_eos, rx201_fail
    is_cclass $I11, .CCLASS_WHITESPACE, rx201_tgt, rx201_pos
    unless $I11, rx201_fail
    add rx201_pos, 1
    repr_bind_attr_int rx201_cur, rx201_curclass, "$!pos", rx201_pos
    $P11 = rx201_cur."ws"()
    repr_get_attr_int $I11, $P11, rx201_curclass, "$!pos"
    lt $I11, 0, rx201_fail
    repr_get_attr_int rx201_pos, $P11, rx201_curclass, "$!pos"
    repr_bind_attr_int rx201_cur, rx201_curclass, "$!pos", rx201_pos
    $P11 = rx201_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx201_curclass, "$!pos"
    lt $I11, 0, rx201_fail
    nqp_rxmark rx201_bstack, rxsubrule205_pass, -1, 0
  rxsubrule205_pass:
    rx201_cstack = rx201_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx201_pos, $P11, rx201_curclass, "$!pos"
    repr_bind_attr_int rx201_cur, rx201_curclass, "$!pos", rx201_pos
    $P11 = rx201_cur."ws"()
    repr_get_attr_int $I11, $P11, rx201_curclass, "$!pos"
    lt $I11, 0, rx201_fail
    repr_get_attr_int rx201_pos, $P11, rx201_curclass, "$!pos"
  # rx rxquantr207 ** 0..-1
    nqp_rxmark rx201_bstack, rxquantr207_done, rx201_pos, 0
  rxquantr207_loop:
    repr_bind_attr_int rx201_cur, rx201_curclass, "$!pos", rx201_pos
    $P11 = rx201_cur."ws"()
    repr_get_attr_int $I11, $P11, rx201_curclass, "$!pos"
    lt $I11, 0, rx201_fail
    repr_get_attr_int rx201_pos, $P11, rx201_curclass, "$!pos"
    add $I11, rx201_pos, 5
    gt $I11, rx201_eos, rx201_fail
    substr $S10, rx201_tgt, rx201_pos, 5
    ne $S10, ucs4:"elsif", rx201_fail
    add rx201_pos, 5
    ge rx201_pos, rx201_eos, rx201_fail
    is_cclass $I11, .CCLASS_WHITESPACE, rx201_tgt, rx201_pos
    unless $I11, rx201_fail
    add rx201_pos, 1
    repr_bind_attr_int rx201_cur, rx201_curclass, "$!pos", rx201_pos
    $P11 = rx201_cur."ws"()
    repr_get_attr_int $I11, $P11, rx201_curclass, "$!pos"
    lt $I11, 0, rx201_fail
    repr_get_attr_int rx201_pos, $P11, rx201_curclass, "$!pos"
    repr_bind_attr_int rx201_cur, rx201_curclass, "$!pos", rx201_pos
    $P11 = rx201_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx201_curclass, "$!pos"
    lt $I11, 0, rx201_fail
    nqp_rxmark rx201_bstack, rxsubrule210_pass, -1, 0
  rxsubrule210_pass:
    rx201_cstack = rx201_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx201_pos, $P11, rx201_curclass, "$!pos"
    repr_bind_attr_int rx201_cur, rx201_curclass, "$!pos", rx201_pos
    $P11 = rx201_cur."ws"()
    repr_get_attr_int $I11, $P11, rx201_curclass, "$!pos"
    lt $I11, 0, rx201_fail
    repr_get_attr_int rx201_pos, $P11, rx201_curclass, "$!pos"
    nqp_rxpeek $I19, rx201_bstack, rxquantr207_done
    inc $I19
    inc $I19
    set rx201_rep, rx201_bstack[$I19]
    nqp_rxcommit rx201_bstack, rxquantr207_done
    inc rx201_rep
    nqp_rxmark rx201_bstack, rxquantr207_done, rx201_pos, rx201_rep
    goto rxquantr207_loop
  rxquantr207_done:
    repr_bind_attr_int rx201_cur, rx201_curclass, "$!pos", rx201_pos
    $P11 = rx201_cur."ws"()
    repr_get_attr_int $I11, $P11, rx201_curclass, "$!pos"
    lt $I11, 0, rx201_fail
    repr_get_attr_int rx201_pos, $P11, rx201_curclass, "$!pos"
  # rx rxquantr213 ** 0..1
    nqp_rxmark rx201_bstack, rxquantr213_done, rx201_pos, 0
  rxquantr213_loop:
    repr_bind_attr_int rx201_cur, rx201_curclass, "$!pos", rx201_pos
    $P11 = rx201_cur."ws"()
    repr_get_attr_int $I11, $P11, rx201_curclass, "$!pos"
    lt $I11, 0, rx201_fail
    repr_get_attr_int rx201_pos, $P11, rx201_curclass, "$!pos"
    add $I11, rx201_pos, 4
    gt $I11, rx201_eos, rx201_fail
    substr $S10, rx201_tgt, rx201_pos, 4
    ne $S10, ucs4:"else", rx201_fail
    add rx201_pos, 4
    ge rx201_pos, rx201_eos, rx201_fail
    is_cclass $I11, .CCLASS_WHITESPACE, rx201_tgt, rx201_pos
    unless $I11, rx201_fail
    add rx201_pos, 1
    repr_bind_attr_int rx201_cur, rx201_curclass, "$!pos", rx201_pos
    $P11 = rx201_cur."ws"()
    repr_get_attr_int $I11, $P11, rx201_curclass, "$!pos"
    lt $I11, 0, rx201_fail
    repr_get_attr_int rx201_pos, $P11, rx201_curclass, "$!pos"
    repr_bind_attr_int rx201_cur, rx201_curclass, "$!pos", rx201_pos
    $P11 = rx201_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx201_curclass, "$!pos"
    lt $I11, 0, rx201_fail
    nqp_rxmark rx201_bstack, rxsubrule216_pass, -1, 0
  rxsubrule216_pass:
    rx201_cstack = rx201_cur."!cursor_capture"($P11, "else")
    repr_get_attr_int rx201_pos, $P11, rx201_curclass, "$!pos"
    repr_bind_attr_int rx201_cur, rx201_curclass, "$!pos", rx201_pos
    $P11 = rx201_cur."ws"()
    repr_get_attr_int $I11, $P11, rx201_curclass, "$!pos"
    lt $I11, 0, rx201_fail
    repr_get_attr_int rx201_pos, $P11, rx201_curclass, "$!pos"
    nqp_rxpeek $I19, rx201_bstack, rxquantr213_done
    inc $I19
    inc $I19
    set rx201_rep, rx201_bstack[$I19]
    nqp_rxcommit rx201_bstack, rxquantr213_done
    inc rx201_rep
  rxquantr213_done:
    repr_bind_attr_int rx201_cur, rx201_curclass, "$!pos", rx201_pos
    $P11 = rx201_cur."ws"()
    repr_get_attr_int $I11, $P11, rx201_curclass, "$!pos"
    lt $I11, 0, rx201_fail
    repr_get_attr_int rx201_pos, $P11, rx201_curclass, "$!pos"
    rx201_cur."!cursor_pass"(rx201_pos, "statement_control:sym<if>", 'backtrack'=>1)
    .return (rx201_cur)
  rx201_restart:
    repr_get_attr_obj rx201_cstack, rx201_cur, rx201_curclass, "$!cstack"
  rx201_fail:
    unless rx201_bstack, rx201_done
    pop $I19, rx201_bstack
    if_null rx201_cstack, rx201_cstack_done
    unless rx201_cstack, rx201_cstack_done
    dec $I19
    set $P11, rx201_cstack[$I19]
  rx201_cstack_done:
    pop rx201_rep, rx201_bstack
    pop rx201_pos, rx201_bstack
    pop $I19, rx201_bstack
    lt rx201_pos, -1, rx201_done
    lt rx201_pos, 0, rx201_fail
    eq $I19, 0, rx201_fail
    if_null rx201_cstack, rx201_jump
    elements $I18, rx201_bstack
    le $I18, 0, rx201_cut
    dec $I18
    set $I18, rx201_bstack[$I18]
  rx201_cut:
    assign rx201_cstack, $I18
  rx201_jump:
    jump $I19
  rx201_done:
    rx201_cur."!cursor_fail"()
    .return (rx201_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "70_1337966799.879_caps"  :subid("444_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 830
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["xblock"], 2
    set $P104["else"], 2
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "70_1337966799.879_nfa"  :subid("445_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 830
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 105
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 102
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 4
    push $P107, 32
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 0
    push $P108, 0
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<unless>"  :subid("72_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1632
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 837
    .const 'Sub' $P1638 = "71_1337966799.879" 
    capture_lex $P1638
    .lex "self", param_1632
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1633
    .lex "$/", $P1634
    .local string rx219_tgt
    .local int rx219_pos
    .local int rx219_off
    .local int rx219_eos
    .local int rx219_rep
    .local pmc rx219_cur
    .local pmc rx219_curclass
    .local pmc rx219_bstack
    .local pmc rx219_cstack
    (rx219_cur, rx219_tgt, rx219_pos, rx219_curclass, rx219_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx219_cur
    length rx219_eos, rx219_tgt
    eq $I19, 1, rx219_restart
    repr_get_attr_int $I11, self, rx219_curclass, "$!from"
    ne $I11, -1, rxscan220_done
    goto rxscan220_scan
  rxscan220_loop:
    inc rx219_pos
    gt rx219_pos, rx219_eos, rx219_fail
    repr_bind_attr_int rx219_cur, rx219_curclass, "$!from", rx219_pos
  rxscan220_scan:
    nqp_rxmark rx219_bstack, rxscan220_loop, rx219_pos, 0
  rxscan220_done:
    nqp_rxmark rx219_bstack, rxcap221_fail, rx219_pos, 0
    add $I11, rx219_pos, 6
    gt $I11, rx219_eos, rx219_fail
    substr $S10, rx219_tgt, rx219_pos, 6
    ne $S10, ucs4:"unless", rx219_fail
    add rx219_pos, 6
    nqp_rxpeek $I19, rx219_bstack, rxcap221_fail
    inc $I19
    set $I11, rx219_bstack[$I19]
    $P11 = rx219_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx219_pos)
    rx219_cstack = rx219_cur."!cursor_capture"($P11, "sym")
    goto rxcap221_done
  rxcap221_fail:
    goto rx219_fail
  rxcap221_done:
    ge rx219_pos, rx219_eos, rx219_fail
    is_cclass $I11, .CCLASS_WHITESPACE, rx219_tgt, rx219_pos
    unless $I11, rx219_fail
    add rx219_pos, 1
    repr_bind_attr_int rx219_cur, rx219_curclass, "$!pos", rx219_pos
    $P11 = rx219_cur."ws"()
    repr_get_attr_int $I11, $P11, rx219_curclass, "$!pos"
    lt $I11, 0, rx219_fail
    repr_get_attr_int rx219_pos, $P11, rx219_curclass, "$!pos"
    repr_bind_attr_int rx219_cur, rx219_curclass, "$!pos", rx219_pos
    $P11 = rx219_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx219_curclass, "$!pos"
    lt $I11, 0, rx219_fail
    nqp_rxmark rx219_bstack, rxsubrule223_pass, -1, 0
  rxsubrule223_pass:
    rx219_cstack = rx219_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx219_pos, $P11, rx219_curclass, "$!pos"
    repr_bind_attr_int rx219_cur, rx219_curclass, "$!pos", rx219_pos
    $P11 = rx219_cur."ws"()
    repr_get_attr_int $I11, $P11, rx219_curclass, "$!pos"
    lt $I11, 0, rx219_fail
    repr_get_attr_int rx219_pos, $P11, rx219_curclass, "$!pos"
  alt225_0:
    nqp_rxmark rx219_bstack, alt225_1, rx219_pos, 0
    repr_bind_attr_int rx219_cur, rx219_curclass, "$!pos", rx219_pos
    $P11 = rx219_cur."ws"()
    repr_get_attr_int $I11, $P11, rx219_curclass, "$!pos"
    lt $I11, 0, rx219_fail
    repr_get_attr_int rx219_pos, $P11, rx219_curclass, "$!pos"
    .const 'Sub' $P1638 = "71_1337966799.879" 
    capture_lex $P1638
    repr_bind_attr_int rx219_cur, rx219_curclass, "$!pos", rx219_pos
    $P11 = rx219_cur."before"($P1638)
    repr_get_attr_int $I11, $P11, rx219_curclass, "$!pos"
    ge $I11, 0, rx219_fail
    repr_bind_attr_int rx219_cur, rx219_curclass, "$!pos", rx219_pos
    $P11 = rx219_cur."ws"()
    repr_get_attr_int $I11, $P11, rx219_curclass, "$!pos"
    lt $I11, 0, rx219_fail
    repr_get_attr_int rx219_pos, $P11, rx219_curclass, "$!pos"
    goto alt225_end
  alt225_1:
    repr_bind_attr_int rx219_cur, rx219_curclass, "$!pos", rx219_pos
    $P11 = rx219_cur."ws"()
    repr_get_attr_int $I11, $P11, rx219_curclass, "$!pos"
    lt $I11, 0, rx219_fail
    repr_get_attr_int rx219_pos, $P11, rx219_curclass, "$!pos"
    repr_bind_attr_int rx219_cur, rx219_curclass, "$!pos", rx219_pos
    $P11 = rx219_cur."panic"("unless does not take \"else\", please rewrite using \"if\"")
    repr_get_attr_int $I11, $P11, rx219_curclass, "$!pos"
    lt $I11, 0, rx219_fail
    repr_get_attr_int rx219_pos, $P11, rx219_curclass, "$!pos"
    repr_bind_attr_int rx219_cur, rx219_curclass, "$!pos", rx219_pos
    $P11 = rx219_cur."ws"()
    repr_get_attr_int $I11, $P11, rx219_curclass, "$!pos"
    lt $I11, 0, rx219_fail
    repr_get_attr_int rx219_pos, $P11, rx219_curclass, "$!pos"
  alt225_end:
    repr_bind_attr_int rx219_cur, rx219_curclass, "$!pos", rx219_pos
    $P11 = rx219_cur."ws"()
    repr_get_attr_int $I11, $P11, rx219_curclass, "$!pos"
    lt $I11, 0, rx219_fail
    repr_get_attr_int rx219_pos, $P11, rx219_curclass, "$!pos"
    rx219_cur."!cursor_pass"(rx219_pos, "statement_control:sym<unless>", 'backtrack'=>1)
    .return (rx219_cur)
  rx219_restart:
    repr_get_attr_obj rx219_cstack, rx219_cur, rx219_curclass, "$!cstack"
  rx219_fail:
    unless rx219_bstack, rx219_done
    pop $I19, rx219_bstack
    if_null rx219_cstack, rx219_cstack_done
    unless rx219_cstack, rx219_cstack_done
    dec $I19
    set $P11, rx219_cstack[$I19]
  rx219_cstack_done:
    pop rx219_rep, rx219_bstack
    pop rx219_pos, rx219_bstack
    pop $I19, rx219_bstack
    lt rx219_pos, -1, rx219_done
    lt rx219_pos, 0, rx219_fail
    eq $I19, 0, rx219_fail
    if_null rx219_cstack, rx219_jump
    elements $I18, rx219_bstack
    le $I18, 0, rx219_cut
    dec $I18
    set $I18, rx219_bstack[$I18]
  rx219_cut:
    assign rx219_cstack, $I18
  rx219_jump:
    jump $I19
  rx219_done:
    rx219_cur."!cursor_fail"()
    .return (rx219_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "72_1337966799.879_caps"  :subid("446_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 837
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["xblock"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "72_1337966799.879_nfa"  :subid("447_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 837
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 117
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 110
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 108
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 101
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 115
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 115
    push $P110, 7
    new $P111, "ResizablePMCArray"
    push $P111, 4
    push $P111, 32
    push $P111, 8
    new $P112, "ResizablePMCArray"
    push $P112, 0
    push $P112, 0
    push $P112, 0
    new $P113, "ResizablePMCArray"
    push $P113, $P104
    push $P113, $P105
    push $P113, $P106
    push $P113, $P107
    push $P113, $P108
    push $P113, $P109
    push $P113, $P110
    push $P113, $P111
    push $P113, $P112
    .return ($P113)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1637"  :anon :subid("71_1337966799.879") :method :outer("72_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 837
    .lex unicode:"$\x{a2}", $P1641
    .local string rx227_tgt
    .local int rx227_pos
    .local int rx227_off
    .local int rx227_eos
    .local int rx227_rep
    .local pmc rx227_cur
    .local pmc rx227_curclass
    .local pmc rx227_bstack
    .local pmc rx227_cstack
    (rx227_cur, rx227_tgt, rx227_pos, rx227_curclass, rx227_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx227_cur
    length rx227_eos, rx227_tgt
    eq $I19, 1, rx227_restart
    repr_get_attr_int $I11, self, rx227_curclass, "$!from"
    ne $I11, -1, rxscan228_done
    goto rxscan228_scan
  rxscan228_loop:
    inc rx227_pos
    gt rx227_pos, rx227_eos, rx227_fail
    repr_bind_attr_int rx227_cur, rx227_curclass, "$!from", rx227_pos
  rxscan228_scan:
    nqp_rxmark rx227_bstack, rxscan228_loop, rx227_pos, 0
  rxscan228_done:
    add $I11, rx227_pos, 4
    gt $I11, rx227_eos, rx227_fail
    substr $S10, rx227_tgt, rx227_pos, 4
    ne $S10, ucs4:"else", rx227_fail
    add rx227_pos, 4
    rx227_cur."!cursor_pass"(rx227_pos, 'backtrack'=>1)
    .return (rx227_cur)
  rx227_restart:
    repr_get_attr_obj rx227_cstack, rx227_cur, rx227_curclass, "$!cstack"
  rx227_fail:
    unless rx227_bstack, rx227_done
    pop $I19, rx227_bstack
    if_null rx227_cstack, rx227_cstack_done
    unless rx227_cstack, rx227_cstack_done
    dec $I19
    set $P11, rx227_cstack[$I19]
  rx227_cstack_done:
    pop rx227_rep, rx227_bstack
    pop rx227_pos, rx227_bstack
    pop $I19, rx227_bstack
    lt rx227_pos, -1, rx227_done
    lt rx227_pos, 0, rx227_fail
    eq $I19, 0, rx227_fail
    if_null rx227_cstack, rx227_jump
    elements $I18, rx227_bstack
    le $I18, 0, rx227_cut
    dec $I18
    set $I18, rx227_bstack[$I18]
  rx227_cut:
    assign rx227_cstack, $I18
  rx227_jump:
    jump $I19
  rx227_done:
    rx227_cur."!cursor_fail"()
    .return (rx227_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "71_1337966799.879_caps"  :subid("448_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 837
    new $P107, "Hash"
    .return ($P107)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "71_1337966799.879_nfa"  :subid("449_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 837
    new $P107, "ResizablePMCArray"
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 101
    push $P108, 2
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 108
    push $P109, 3
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 115
    push $P110, 4
    new $P111, "ResizablePMCArray"
    push $P111, 2
    push $P111, 101
    push $P111, 0
    new $P112, "ResizablePMCArray"
    push $P112, $P107
    push $P112, $P108
    push $P112, $P109
    push $P112, $P110
    push $P112, $P111
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<while>"  :subid("73_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1643
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 843
    .lex "self", param_1643
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1644
    .lex "$/", $P1645
    .local string rx234_tgt
    .local int rx234_pos
    .local int rx234_off
    .local int rx234_eos
    .local int rx234_rep
    .local pmc rx234_cur
    .local pmc rx234_curclass
    .local pmc rx234_bstack
    .local pmc rx234_cstack
    (rx234_cur, rx234_tgt, rx234_pos, rx234_curclass, rx234_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx234_cur
    length rx234_eos, rx234_tgt
    eq $I19, 1, rx234_restart
    repr_get_attr_int $I11, self, rx234_curclass, "$!from"
    ne $I11, -1, rxscan235_done
    goto rxscan235_scan
  rxscan235_loop:
    inc rx234_pos
    gt rx234_pos, rx234_eos, rx234_fail
    repr_bind_attr_int rx234_cur, rx234_curclass, "$!from", rx234_pos
  rxscan235_scan:
    nqp_rxmark rx234_bstack, rxscan235_loop, rx234_pos, 0
  rxscan235_done:
    nqp_rxmark rx234_bstack, rxcap236_fail, rx234_pos, 0
  alt237_0:
    nqp_rxmark rx234_bstack, alt237_1, rx234_pos, 0
    add $I11, rx234_pos, 5
    gt $I11, rx234_eos, rx234_fail
    substr $S10, rx234_tgt, rx234_pos, 5
    ne $S10, ucs4:"while", rx234_fail
    add rx234_pos, 5
    goto alt237_end
  alt237_1:
    add $I11, rx234_pos, 5
    gt $I11, rx234_eos, rx234_fail
    substr $S10, rx234_tgt, rx234_pos, 5
    ne $S10, ucs4:"until", rx234_fail
    add rx234_pos, 5
  alt237_end:
    nqp_rxpeek $I19, rx234_bstack, rxcap236_fail
    inc $I19
    set $I11, rx234_bstack[$I19]
    $P11 = rx234_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx234_pos)
    rx234_cstack = rx234_cur."!cursor_capture"($P11, "sym")
    goto rxcap236_done
  rxcap236_fail:
    goto rx234_fail
  rxcap236_done:
    ge rx234_pos, rx234_eos, rx234_fail
    is_cclass $I11, .CCLASS_WHITESPACE, rx234_tgt, rx234_pos
    unless $I11, rx234_fail
    add rx234_pos, 1
    repr_bind_attr_int rx234_cur, rx234_curclass, "$!pos", rx234_pos
    $P11 = rx234_cur."ws"()
    repr_get_attr_int $I11, $P11, rx234_curclass, "$!pos"
    lt $I11, 0, rx234_fail
    repr_get_attr_int rx234_pos, $P11, rx234_curclass, "$!pos"
    repr_bind_attr_int rx234_cur, rx234_curclass, "$!pos", rx234_pos
    $P11 = rx234_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx234_curclass, "$!pos"
    lt $I11, 0, rx234_fail
    nqp_rxmark rx234_bstack, rxsubrule239_pass, -1, 0
  rxsubrule239_pass:
    rx234_cstack = rx234_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx234_pos, $P11, rx234_curclass, "$!pos"
    repr_bind_attr_int rx234_cur, rx234_curclass, "$!pos", rx234_pos
    $P11 = rx234_cur."ws"()
    repr_get_attr_int $I11, $P11, rx234_curclass, "$!pos"
    lt $I11, 0, rx234_fail
    repr_get_attr_int rx234_pos, $P11, rx234_curclass, "$!pos"
    rx234_cur."!cursor_pass"(rx234_pos, "statement_control:sym<while>", 'backtrack'=>1)
    .return (rx234_cur)
  rx234_restart:
    repr_get_attr_obj rx234_cstack, rx234_cur, rx234_curclass, "$!cstack"
  rx234_fail:
    unless rx234_bstack, rx234_done
    pop $I19, rx234_bstack
    if_null rx234_cstack, rx234_cstack_done
    unless rx234_cstack, rx234_cstack_done
    dec $I19
    set $P11, rx234_cstack[$I19]
  rx234_cstack_done:
    pop rx234_rep, rx234_bstack
    pop rx234_pos, rx234_bstack
    pop $I19, rx234_bstack
    lt rx234_pos, -1, rx234_done
    lt rx234_pos, 0, rx234_fail
    eq $I19, 0, rx234_fail
    if_null rx234_cstack, rx234_jump
    elements $I18, rx234_bstack
    le $I18, 0, rx234_cut
    dec $I18
    set $I18, rx234_bstack[$I18]
  rx234_cut:
    assign rx234_cstack, $I18
  rx234_jump:
    jump $I19
  rx234_done:
    rx234_cur."!cursor_fail"()
    .return (rx234_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "73_1337966799.879_caps"  :subid("450_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 843
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["xblock"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "73_1337966799.879_nfa"  :subid("451_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 843
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 119
    push $P105, 2
    push $P105, 2
    push $P105, 117
    push $P105, 7
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 104
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 105
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 108
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 101
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 4
    push $P110, 32
    push $P110, 11
    new $P111, "ResizablePMCArray"
    push $P111, 2
    push $P111, 110
    push $P111, 8
    new $P112, "ResizablePMCArray"
    push $P112, 2
    push $P112, 116
    push $P112, 9
    new $P113, "ResizablePMCArray"
    push $P113, 2
    push $P113, 105
    push $P113, 10
    new $P114, "ResizablePMCArray"
    push $P114, 2
    push $P114, 108
    push $P114, 6
    new $P115, "ResizablePMCArray"
    push $P115, 0
    push $P115, 0
    push $P115, 0
    new $P116, "ResizablePMCArray"
    push $P116, $P104
    push $P116, $P105
    push $P116, $P106
    push $P116, $P107
    push $P116, $P108
    push $P116, $P109
    push $P116, $P110
    push $P116, $P111
    push $P116, $P112
    push $P116, $P113
    push $P116, $P114
    push $P116, $P115
    .return ($P116)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<repeat>"  :subid("74_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1649
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 848
    .lex "self", param_1649
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1650
    .lex "$/", $P1651
    .local string rx241_tgt
    .local int rx241_pos
    .local int rx241_off
    .local int rx241_eos
    .local int rx241_rep
    .local pmc rx241_cur
    .local pmc rx241_curclass
    .local pmc rx241_bstack
    .local pmc rx241_cstack
    (rx241_cur, rx241_tgt, rx241_pos, rx241_curclass, rx241_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx241_cur
    length rx241_eos, rx241_tgt
    eq $I19, 1, rx241_restart
    repr_get_attr_int $I11, self, rx241_curclass, "$!from"
    ne $I11, -1, rxscan242_done
    goto rxscan242_scan
  rxscan242_loop:
    inc rx241_pos
    gt rx241_pos, rx241_eos, rx241_fail
    repr_bind_attr_int rx241_cur, rx241_curclass, "$!from", rx241_pos
  rxscan242_scan:
    nqp_rxmark rx241_bstack, rxscan242_loop, rx241_pos, 0
  rxscan242_done:
    nqp_rxmark rx241_bstack, rxcap243_fail, rx241_pos, 0
    add $I11, rx241_pos, 6
    gt $I11, rx241_eos, rx241_fail
    substr $S10, rx241_tgt, rx241_pos, 6
    ne $S10, ucs4:"repeat", rx241_fail
    add rx241_pos, 6
    nqp_rxpeek $I19, rx241_bstack, rxcap243_fail
    inc $I19
    set $I11, rx241_bstack[$I19]
    $P11 = rx241_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx241_pos)
    rx241_cstack = rx241_cur."!cursor_capture"($P11, "sym")
    goto rxcap243_done
  rxcap243_fail:
    goto rx241_fail
  rxcap243_done:
    ge rx241_pos, rx241_eos, rx241_fail
    is_cclass $I11, .CCLASS_WHITESPACE, rx241_tgt, rx241_pos
    unless $I11, rx241_fail
    add rx241_pos, 1
    repr_bind_attr_int rx241_cur, rx241_curclass, "$!pos", rx241_pos
    $P11 = rx241_cur."ws"()
    repr_get_attr_int $I11, $P11, rx241_curclass, "$!pos"
    lt $I11, 0, rx241_fail
    repr_get_attr_int rx241_pos, $P11, rx241_curclass, "$!pos"
  alt245_0:
    nqp_rxmark rx241_bstack, alt245_1, rx241_pos, 0
    repr_bind_attr_int rx241_cur, rx241_curclass, "$!pos", rx241_pos
    $P11 = rx241_cur."ws"()
    repr_get_attr_int $I11, $P11, rx241_curclass, "$!pos"
    lt $I11, 0, rx241_fail
    repr_get_attr_int rx241_pos, $P11, rx241_curclass, "$!pos"
    nqp_rxmark rx241_bstack, rxcap247_fail, rx241_pos, 0
  alt248_0:
    nqp_rxmark rx241_bstack, alt248_1, rx241_pos, 0
    add $I11, rx241_pos, 5
    gt $I11, rx241_eos, rx241_fail
    substr $S10, rx241_tgt, rx241_pos, 5
    ne $S10, ucs4:"while", rx241_fail
    add rx241_pos, 5
    goto alt248_end
  alt248_1:
    add $I11, rx241_pos, 5
    gt $I11, rx241_eos, rx241_fail
    substr $S10, rx241_tgt, rx241_pos, 5
    ne $S10, ucs4:"until", rx241_fail
    add rx241_pos, 5
  alt248_end:
    nqp_rxpeek $I19, rx241_bstack, rxcap247_fail
    inc $I19
    set $I11, rx241_bstack[$I19]
    $P11 = rx241_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx241_pos)
    rx241_cstack = rx241_cur."!cursor_capture"($P11, "wu")
    goto rxcap247_done
  rxcap247_fail:
    goto rx241_fail
  rxcap247_done:
    ge rx241_pos, rx241_eos, rx241_fail
    is_cclass $I11, .CCLASS_WHITESPACE, rx241_tgt, rx241_pos
    unless $I11, rx241_fail
    add rx241_pos, 1
    repr_bind_attr_int rx241_cur, rx241_curclass, "$!pos", rx241_pos
    $P11 = rx241_cur."ws"()
    repr_get_attr_int $I11, $P11, rx241_curclass, "$!pos"
    lt $I11, 0, rx241_fail
    repr_get_attr_int rx241_pos, $P11, rx241_curclass, "$!pos"
    repr_bind_attr_int rx241_cur, rx241_curclass, "$!pos", rx241_pos
    $P11 = rx241_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx241_curclass, "$!pos"
    lt $I11, 0, rx241_fail
    nqp_rxmark rx241_bstack, rxsubrule250_pass, -1, 0
  rxsubrule250_pass:
    rx241_cstack = rx241_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx241_pos, $P11, rx241_curclass, "$!pos"
    repr_bind_attr_int rx241_cur, rx241_curclass, "$!pos", rx241_pos
    $P11 = rx241_cur."ws"()
    repr_get_attr_int $I11, $P11, rx241_curclass, "$!pos"
    lt $I11, 0, rx241_fail
    repr_get_attr_int rx241_pos, $P11, rx241_curclass, "$!pos"
    goto alt245_end
  alt245_1:
    repr_bind_attr_int rx241_cur, rx241_curclass, "$!pos", rx241_pos
    $P11 = rx241_cur."ws"()
    repr_get_attr_int $I11, $P11, rx241_curclass, "$!pos"
    lt $I11, 0, rx241_fail
    repr_get_attr_int rx241_pos, $P11, rx241_curclass, "$!pos"
    repr_bind_attr_int rx241_cur, rx241_curclass, "$!pos", rx241_pos
    $P11 = rx241_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx241_curclass, "$!pos"
    lt $I11, 0, rx241_fail
    nqp_rxmark rx241_bstack, rxsubrule253_pass, -1, 0
  rxsubrule253_pass:
    rx241_cstack = rx241_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx241_pos, $P11, rx241_curclass, "$!pos"
    repr_bind_attr_int rx241_cur, rx241_curclass, "$!pos", rx241_pos
    $P11 = rx241_cur."ws"()
    repr_get_attr_int $I11, $P11, rx241_curclass, "$!pos"
    lt $I11, 0, rx241_fail
    repr_get_attr_int rx241_pos, $P11, rx241_curclass, "$!pos"
    nqp_rxmark rx241_bstack, rxcap255_fail, rx241_pos, 0
  alt256_0:
    nqp_rxmark rx241_bstack, alt256_1, rx241_pos, 0
    add $I11, rx241_pos, 5
    gt $I11, rx241_eos, rx241_fail
    substr $S10, rx241_tgt, rx241_pos, 5
    ne $S10, ucs4:"while", rx241_fail
    add rx241_pos, 5
    goto alt256_end
  alt256_1:
    add $I11, rx241_pos, 5
    gt $I11, rx241_eos, rx241_fail
    substr $S10, rx241_tgt, rx241_pos, 5
    ne $S10, ucs4:"until", rx241_fail
    add rx241_pos, 5
  alt256_end:
    nqp_rxpeek $I19, rx241_bstack, rxcap255_fail
    inc $I19
    set $I11, rx241_bstack[$I19]
    $P11 = rx241_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx241_pos)
    rx241_cstack = rx241_cur."!cursor_capture"($P11, "wu")
    goto rxcap255_done
  rxcap255_fail:
    goto rx241_fail
  rxcap255_done:
    ge rx241_pos, rx241_eos, rx241_fail
    is_cclass $I11, .CCLASS_WHITESPACE, rx241_tgt, rx241_pos
    unless $I11, rx241_fail
    add rx241_pos, 1
    repr_bind_attr_int rx241_cur, rx241_curclass, "$!pos", rx241_pos
    $P11 = rx241_cur."ws"()
    repr_get_attr_int $I11, $P11, rx241_curclass, "$!pos"
    lt $I11, 0, rx241_fail
    repr_get_attr_int rx241_pos, $P11, rx241_curclass, "$!pos"
    repr_bind_attr_int rx241_cur, rx241_curclass, "$!pos", rx241_pos
    $P11 = rx241_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx241_curclass, "$!pos"
    lt $I11, 0, rx241_fail
    nqp_rxmark rx241_bstack, rxsubrule258_pass, -1, 0
  rxsubrule258_pass:
    rx241_cstack = rx241_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx241_pos, $P11, rx241_curclass, "$!pos"
    repr_bind_attr_int rx241_cur, rx241_curclass, "$!pos", rx241_pos
    $P11 = rx241_cur."ws"()
    repr_get_attr_int $I11, $P11, rx241_curclass, "$!pos"
    lt $I11, 0, rx241_fail
    repr_get_attr_int rx241_pos, $P11, rx241_curclass, "$!pos"
  alt245_end:
    repr_bind_attr_int rx241_cur, rx241_curclass, "$!pos", rx241_pos
    $P11 = rx241_cur."ws"()
    repr_get_attr_int $I11, $P11, rx241_curclass, "$!pos"
    lt $I11, 0, rx241_fail
    repr_get_attr_int rx241_pos, $P11, rx241_curclass, "$!pos"
    rx241_cur."!cursor_pass"(rx241_pos, "statement_control:sym<repeat>", 'backtrack'=>1)
    .return (rx241_cur)
  rx241_restart:
    repr_get_attr_obj rx241_cstack, rx241_cur, rx241_curclass, "$!cstack"
  rx241_fail:
    unless rx241_bstack, rx241_done
    pop $I19, rx241_bstack
    if_null rx241_cstack, rx241_cstack_done
    unless rx241_cstack, rx241_cstack_done
    dec $I19
    set $P11, rx241_cstack[$I19]
  rx241_cstack_done:
    pop rx241_rep, rx241_bstack
    pop rx241_pos, rx241_bstack
    pop $I19, rx241_bstack
    lt rx241_pos, -1, rx241_done
    lt rx241_pos, 0, rx241_fail
    eq $I19, 0, rx241_fail
    if_null rx241_cstack, rx241_jump
    elements $I18, rx241_bstack
    le $I18, 0, rx241_cut
    dec $I18
    set $I18, rx241_bstack[$I18]
  rx241_cut:
    assign rx241_cstack, $I18
  rx241_jump:
    jump $I19
  rx241_done:
    rx241_cur."!cursor_fail"()
    .return (rx241_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "74_1337966799.879_caps"  :subid("452_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 848
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["wu"], 0
    set $P104["xblock"], 0
    set $P104["pblock"], 0
    set $P104["EXPR"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "74_1337966799.879_nfa"  :subid("453_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 848
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 114
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 101
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 112
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 101
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 97
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 116
    push $P110, 7
    new $P111, "ResizablePMCArray"
    push $P111, 4
    push $P111, 32
    push $P111, 8
    new $P112, "ResizablePMCArray"
    push $P112, 0
    push $P112, 0
    push $P112, 0
    new $P113, "ResizablePMCArray"
    push $P113, $P104
    push $P113, $P105
    push $P113, $P106
    push $P113, $P107
    push $P113, $P108
    push $P113, $P109
    push $P113, $P110
    push $P113, $P111
    push $P113, $P112
    .return ($P113)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<for>"  :subid("75_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1655
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 856
    .lex "self", param_1655
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1656
    .lex "$/", $P1657
    .local string rx261_tgt
    .local int rx261_pos
    .local int rx261_off
    .local int rx261_eos
    .local int rx261_rep
    .local pmc rx261_cur
    .local pmc rx261_curclass
    .local pmc rx261_bstack
    .local pmc rx261_cstack
    (rx261_cur, rx261_tgt, rx261_pos, rx261_curclass, rx261_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx261_cur
    length rx261_eos, rx261_tgt
    eq $I19, 1, rx261_restart
    repr_get_attr_int $I11, self, rx261_curclass, "$!from"
    ne $I11, -1, rxscan262_done
    goto rxscan262_scan
  rxscan262_loop:
    inc rx261_pos
    gt rx261_pos, rx261_eos, rx261_fail
    repr_bind_attr_int rx261_cur, rx261_curclass, "$!from", rx261_pos
  rxscan262_scan:
    nqp_rxmark rx261_bstack, rxscan262_loop, rx261_pos, 0
  rxscan262_done:
    nqp_rxmark rx261_bstack, rxcap263_fail, rx261_pos, 0
    add $I11, rx261_pos, 3
    gt $I11, rx261_eos, rx261_fail
    substr $S10, rx261_tgt, rx261_pos, 3
    ne $S10, ucs4:"for", rx261_fail
    add rx261_pos, 3
    nqp_rxpeek $I19, rx261_bstack, rxcap263_fail
    inc $I19
    set $I11, rx261_bstack[$I19]
    $P11 = rx261_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx261_pos)
    rx261_cstack = rx261_cur."!cursor_capture"($P11, "sym")
    goto rxcap263_done
  rxcap263_fail:
    goto rx261_fail
  rxcap263_done:
    ge rx261_pos, rx261_eos, rx261_fail
    is_cclass $I11, .CCLASS_WHITESPACE, rx261_tgt, rx261_pos
    unless $I11, rx261_fail
    add rx261_pos, 1
    repr_bind_attr_int rx261_cur, rx261_curclass, "$!pos", rx261_pos
    $P11 = rx261_cur."ws"()
    repr_get_attr_int $I11, $P11, rx261_curclass, "$!pos"
    lt $I11, 0, rx261_fail
    repr_get_attr_int rx261_pos, $P11, rx261_curclass, "$!pos"
    repr_bind_attr_int rx261_cur, rx261_curclass, "$!pos", rx261_pos
    $P11 = rx261_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx261_curclass, "$!pos"
    lt $I11, 0, rx261_fail
    nqp_rxmark rx261_bstack, rxsubrule265_pass, -1, 0
  rxsubrule265_pass:
    rx261_cstack = rx261_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx261_pos, $P11, rx261_curclass, "$!pos"
    repr_bind_attr_int rx261_cur, rx261_curclass, "$!pos", rx261_pos
    $P11 = rx261_cur."ws"()
    repr_get_attr_int $I11, $P11, rx261_curclass, "$!pos"
    lt $I11, 0, rx261_fail
    repr_get_attr_int rx261_pos, $P11, rx261_curclass, "$!pos"
    rx261_cur."!cursor_pass"(rx261_pos, "statement_control:sym<for>", 'backtrack'=>1)
    .return (rx261_cur)
  rx261_restart:
    repr_get_attr_obj rx261_cstack, rx261_cur, rx261_curclass, "$!cstack"
  rx261_fail:
    unless rx261_bstack, rx261_done
    pop $I19, rx261_bstack
    if_null rx261_cstack, rx261_cstack_done
    unless rx261_cstack, rx261_cstack_done
    dec $I19
    set $P11, rx261_cstack[$I19]
  rx261_cstack_done:
    pop rx261_rep, rx261_bstack
    pop rx261_pos, rx261_bstack
    pop $I19, rx261_bstack
    lt rx261_pos, -1, rx261_done
    lt rx261_pos, 0, rx261_fail
    eq $I19, 0, rx261_fail
    if_null rx261_cstack, rx261_jump
    elements $I18, rx261_bstack
    le $I18, 0, rx261_cut
    dec $I18
    set $I18, rx261_bstack[$I18]
  rx261_cut:
    assign rx261_cstack, $I18
  rx261_jump:
    jump $I19
  rx261_done:
    rx261_cur."!cursor_fail"()
    .return (rx261_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "75_1337966799.879_caps"  :subid("454_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 856
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["xblock"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "75_1337966799.879_nfa"  :subid("455_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 856
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 102
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 111
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 114
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 4
    push $P108, 32
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 0
    push $P109, 0
    push $P109, 0
    new $P110, "ResizablePMCArray"
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<CATCH>"  :subid("76_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1661
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 861
    .lex "self", param_1661
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1662
    .lex "$/", $P1663
    .local string rx267_tgt
    .local int rx267_pos
    .local int rx267_off
    .local int rx267_eos
    .local int rx267_rep
    .local pmc rx267_cur
    .local pmc rx267_curclass
    .local pmc rx267_bstack
    .local pmc rx267_cstack
    (rx267_cur, rx267_tgt, rx267_pos, rx267_curclass, rx267_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx267_cur
    length rx267_eos, rx267_tgt
    eq $I19, 1, rx267_restart
    repr_get_attr_int $I11, self, rx267_curclass, "$!from"
    ne $I11, -1, rxscan268_done
    goto rxscan268_scan
  rxscan268_loop:
    inc rx267_pos
    gt rx267_pos, rx267_eos, rx267_fail
    repr_bind_attr_int rx267_cur, rx267_curclass, "$!from", rx267_pos
  rxscan268_scan:
    nqp_rxmark rx267_bstack, rxscan268_loop, rx267_pos, 0
  rxscan268_done:
    nqp_rxmark rx267_bstack, rxcap269_fail, rx267_pos, 0
    add $I11, rx267_pos, 5
    gt $I11, rx267_eos, rx267_fail
    substr $S10, rx267_tgt, rx267_pos, 5
    ne $S10, ucs4:"CATCH", rx267_fail
    add rx267_pos, 5
    nqp_rxpeek $I19, rx267_bstack, rxcap269_fail
    inc $I19
    set $I11, rx267_bstack[$I19]
    $P11 = rx267_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx267_pos)
    rx267_cstack = rx267_cur."!cursor_capture"($P11, "sym")
    goto rxcap269_done
  rxcap269_fail:
    goto rx267_fail
  rxcap269_done:
    ge rx267_pos, rx267_eos, rx267_fail
    is_cclass $I11, .CCLASS_WHITESPACE, rx267_tgt, rx267_pos
    unless $I11, rx267_fail
    add rx267_pos, 1
    repr_bind_attr_int rx267_cur, rx267_curclass, "$!pos", rx267_pos
    $P11 = rx267_cur."ws"()
    repr_get_attr_int $I11, $P11, rx267_curclass, "$!pos"
    lt $I11, 0, rx267_fail
    repr_get_attr_int rx267_pos, $P11, rx267_curclass, "$!pos"
    repr_bind_attr_int rx267_cur, rx267_curclass, "$!pos", rx267_pos
    $P11 = rx267_cur."block"()
    repr_get_attr_int $I11, $P11, rx267_curclass, "$!pos"
    lt $I11, 0, rx267_fail
    nqp_rxmark rx267_bstack, rxsubrule271_pass, -1, 0
  rxsubrule271_pass:
    rx267_cstack = rx267_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx267_pos, $P11, rx267_curclass, "$!pos"
    repr_bind_attr_int rx267_cur, rx267_curclass, "$!pos", rx267_pos
    $P11 = rx267_cur."ws"()
    repr_get_attr_int $I11, $P11, rx267_curclass, "$!pos"
    lt $I11, 0, rx267_fail
    repr_get_attr_int rx267_pos, $P11, rx267_curclass, "$!pos"
    rx267_cur."!cursor_pass"(rx267_pos, "statement_control:sym<CATCH>", 'backtrack'=>1)
    .return (rx267_cur)
  rx267_restart:
    repr_get_attr_obj rx267_cstack, rx267_cur, rx267_curclass, "$!cstack"
  rx267_fail:
    unless rx267_bstack, rx267_done
    pop $I19, rx267_bstack
    if_null rx267_cstack, rx267_cstack_done
    unless rx267_cstack, rx267_cstack_done
    dec $I19
    set $P11, rx267_cstack[$I19]
  rx267_cstack_done:
    pop rx267_rep, rx267_bstack
    pop rx267_pos, rx267_bstack
    pop $I19, rx267_bstack
    lt rx267_pos, -1, rx267_done
    lt rx267_pos, 0, rx267_fail
    eq $I19, 0, rx267_fail
    if_null rx267_cstack, rx267_jump
    elements $I18, rx267_bstack
    le $I18, 0, rx267_cut
    dec $I18
    set $I18, rx267_bstack[$I18]
  rx267_cut:
    assign rx267_cstack, $I18
  rx267_jump:
    jump $I19
  rx267_done:
    rx267_cur."!cursor_fail"()
    .return (rx267_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "76_1337966799.879_caps"  :subid("456_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 861
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["block"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "76_1337966799.879_nfa"  :subid("457_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 861
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 67
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 65
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 84
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 67
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 72
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 4
    push $P110, 32
    push $P110, 7
    new $P111, "ResizablePMCArray"
    push $P111, 0
    push $P111, 0
    push $P111, 0
    new $P112, "ResizablePMCArray"
    push $P112, $P104
    push $P112, $P105
    push $P112, $P106
    push $P112, $P107
    push $P112, $P108
    push $P112, $P109
    push $P112, $P110
    push $P112, $P111
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<CONTROL>"  :subid("77_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1667
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 866
    .lex "self", param_1667
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1668
    .lex "$/", $P1669
    .local string rx273_tgt
    .local int rx273_pos
    .local int rx273_off
    .local int rx273_eos
    .local int rx273_rep
    .local pmc rx273_cur
    .local pmc rx273_curclass
    .local pmc rx273_bstack
    .local pmc rx273_cstack
    (rx273_cur, rx273_tgt, rx273_pos, rx273_curclass, rx273_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx273_cur
    length rx273_eos, rx273_tgt
    eq $I19, 1, rx273_restart
    repr_get_attr_int $I11, self, rx273_curclass, "$!from"
    ne $I11, -1, rxscan274_done
    goto rxscan274_scan
  rxscan274_loop:
    inc rx273_pos
    gt rx273_pos, rx273_eos, rx273_fail
    repr_bind_attr_int rx273_cur, rx273_curclass, "$!from", rx273_pos
  rxscan274_scan:
    nqp_rxmark rx273_bstack, rxscan274_loop, rx273_pos, 0
  rxscan274_done:
    nqp_rxmark rx273_bstack, rxcap275_fail, rx273_pos, 0
    add $I11, rx273_pos, 7
    gt $I11, rx273_eos, rx273_fail
    substr $S10, rx273_tgt, rx273_pos, 7
    ne $S10, ucs4:"CONTROL", rx273_fail
    add rx273_pos, 7
    nqp_rxpeek $I19, rx273_bstack, rxcap275_fail
    inc $I19
    set $I11, rx273_bstack[$I19]
    $P11 = rx273_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx273_pos)
    rx273_cstack = rx273_cur."!cursor_capture"($P11, "sym")
    goto rxcap275_done
  rxcap275_fail:
    goto rx273_fail
  rxcap275_done:
    ge rx273_pos, rx273_eos, rx273_fail
    is_cclass $I11, .CCLASS_WHITESPACE, rx273_tgt, rx273_pos
    unless $I11, rx273_fail
    add rx273_pos, 1
    repr_bind_attr_int rx273_cur, rx273_curclass, "$!pos", rx273_pos
    $P11 = rx273_cur."ws"()
    repr_get_attr_int $I11, $P11, rx273_curclass, "$!pos"
    lt $I11, 0, rx273_fail
    repr_get_attr_int rx273_pos, $P11, rx273_curclass, "$!pos"
    repr_bind_attr_int rx273_cur, rx273_curclass, "$!pos", rx273_pos
    $P11 = rx273_cur."block"()
    repr_get_attr_int $I11, $P11, rx273_curclass, "$!pos"
    lt $I11, 0, rx273_fail
    nqp_rxmark rx273_bstack, rxsubrule277_pass, -1, 0
  rxsubrule277_pass:
    rx273_cstack = rx273_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx273_pos, $P11, rx273_curclass, "$!pos"
    repr_bind_attr_int rx273_cur, rx273_curclass, "$!pos", rx273_pos
    $P11 = rx273_cur."ws"()
    repr_get_attr_int $I11, $P11, rx273_curclass, "$!pos"
    lt $I11, 0, rx273_fail
    repr_get_attr_int rx273_pos, $P11, rx273_curclass, "$!pos"
    rx273_cur."!cursor_pass"(rx273_pos, "statement_control:sym<CONTROL>", 'backtrack'=>1)
    .return (rx273_cur)
  rx273_restart:
    repr_get_attr_obj rx273_cstack, rx273_cur, rx273_curclass, "$!cstack"
  rx273_fail:
    unless rx273_bstack, rx273_done
    pop $I19, rx273_bstack
    if_null rx273_cstack, rx273_cstack_done
    unless rx273_cstack, rx273_cstack_done
    dec $I19
    set $P11, rx273_cstack[$I19]
  rx273_cstack_done:
    pop rx273_rep, rx273_bstack
    pop rx273_pos, rx273_bstack
    pop $I19, rx273_bstack
    lt rx273_pos, -1, rx273_done
    lt rx273_pos, 0, rx273_fail
    eq $I19, 0, rx273_fail
    if_null rx273_cstack, rx273_jump
    elements $I18, rx273_bstack
    le $I18, 0, rx273_cut
    dec $I18
    set $I18, rx273_bstack[$I18]
  rx273_cut:
    assign rx273_cstack, $I18
  rx273_jump:
    jump $I19
  rx273_done:
    rx273_cur."!cursor_fail"()
    .return (rx273_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "77_1337966799.879_caps"  :subid("458_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 866
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["block"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "77_1337966799.879_nfa"  :subid("459_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 866
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 67
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 79
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 78
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 84
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 82
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 79
    push $P110, 7
    new $P111, "ResizablePMCArray"
    push $P111, 2
    push $P111, 76
    push $P111, 8
    new $P112, "ResizablePMCArray"
    push $P112, 4
    push $P112, 32
    push $P112, 9
    new $P113, "ResizablePMCArray"
    push $P113, 0
    push $P113, 0
    push $P113, 0
    new $P114, "ResizablePMCArray"
    push $P114, $P104
    push $P114, $P105
    push $P114, $P106
    push $P114, $P107
    push $P114, $P108
    push $P114, $P109
    push $P114, $P110
    push $P114, $P111
    push $P114, $P112
    push $P114, $P113
    .return ($P114)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_prefix"  :subid("78_1337966799.879")
    .param pmc param_1673
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 871
    .lex "self", param_1673
    $P103 = param_1673."!protoregex"("statement_prefix")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_prefix:sym<BEGIN>"  :subid("79_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1675
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 872
    .lex "self", param_1675
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1676
    .lex "$/", $P1677
    .local string rx279_tgt
    .local int rx279_pos
    .local int rx279_off
    .local int rx279_eos
    .local int rx279_rep
    .local pmc rx279_cur
    .local pmc rx279_curclass
    .local pmc rx279_bstack
    .local pmc rx279_cstack
    (rx279_cur, rx279_tgt, rx279_pos, rx279_curclass, rx279_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx279_cur
    length rx279_eos, rx279_tgt
    eq $I19, 1, rx279_restart
    repr_get_attr_int $I11, self, rx279_curclass, "$!from"
    ne $I11, -1, rxscan280_done
    goto rxscan280_scan
  rxscan280_loop:
    inc rx279_pos
    gt rx279_pos, rx279_eos, rx279_fail
    repr_bind_attr_int rx279_cur, rx279_curclass, "$!from", rx279_pos
  rxscan280_scan:
    nqp_rxmark rx279_bstack, rxscan280_loop, rx279_pos, 0
  rxscan280_done:
    nqp_rxmark rx279_bstack, rxcap281_fail, rx279_pos, 0
    add $I11, rx279_pos, 5
    gt $I11, rx279_eos, rx279_fail
    substr $S10, rx279_tgt, rx279_pos, 5
    ne $S10, ucs4:"BEGIN", rx279_fail
    add rx279_pos, 5
    nqp_rxpeek $I19, rx279_bstack, rxcap281_fail
    inc $I19
    set $I11, rx279_bstack[$I19]
    $P11 = rx279_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx279_pos)
    rx279_cstack = rx279_cur."!cursor_capture"($P11, "sym")
    goto rxcap281_done
  rxcap281_fail:
    goto rx279_fail
  rxcap281_done:
    repr_bind_attr_int rx279_cur, rx279_curclass, "$!pos", rx279_pos
    $P11 = rx279_cur."blorst"()
    repr_get_attr_int $I11, $P11, rx279_curclass, "$!pos"
    lt $I11, 0, rx279_fail
    nqp_rxmark rx279_bstack, rxsubrule282_pass, -1, 0
  rxsubrule282_pass:
    rx279_cstack = rx279_cur."!cursor_capture"($P11, "blorst")
    repr_get_attr_int rx279_pos, $P11, rx279_curclass, "$!pos"
    rx279_cur."!cursor_pass"(rx279_pos, "statement_prefix:sym<BEGIN>", 'backtrack'=>1)
    .return (rx279_cur)
  rx279_restart:
    repr_get_attr_obj rx279_cstack, rx279_cur, rx279_curclass, "$!cstack"
  rx279_fail:
    unless rx279_bstack, rx279_done
    pop $I19, rx279_bstack
    if_null rx279_cstack, rx279_cstack_done
    unless rx279_cstack, rx279_cstack_done
    dec $I19
    set $P11, rx279_cstack[$I19]
  rx279_cstack_done:
    pop rx279_rep, rx279_bstack
    pop rx279_pos, rx279_bstack
    pop $I19, rx279_bstack
    lt rx279_pos, -1, rx279_done
    lt rx279_pos, 0, rx279_fail
    eq $I19, 0, rx279_fail
    if_null rx279_cstack, rx279_jump
    elements $I18, rx279_bstack
    le $I18, 0, rx279_cut
    dec $I18
    set $I18, rx279_bstack[$I18]
  rx279_cut:
    assign rx279_cstack, $I18
  rx279_jump:
    jump $I19
  rx279_done:
    rx279_cur."!cursor_fail"()
    .return (rx279_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "79_1337966799.879_caps"  :subid("460_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 872
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["blorst"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "79_1337966799.879_nfa"  :subid("461_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 872
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 66
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 69
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 71
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 73
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 78
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 8
    push $P110, "blorst"
    push $P110, 0
    new $P111, "ResizablePMCArray"
    push $P111, $P104
    push $P111, $P105
    push $P111, $P106
    push $P111, $P107
    push $P111, $P108
    push $P111, $P109
    push $P111, $P110
    .return ($P111)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_prefix:sym<INIT>"  :subid("80_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1681
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 873
    .lex "self", param_1681
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1682
    .lex "$/", $P1683
    .local string rx283_tgt
    .local int rx283_pos
    .local int rx283_off
    .local int rx283_eos
    .local int rx283_rep
    .local pmc rx283_cur
    .local pmc rx283_curclass
    .local pmc rx283_bstack
    .local pmc rx283_cstack
    (rx283_cur, rx283_tgt, rx283_pos, rx283_curclass, rx283_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx283_cur
    length rx283_eos, rx283_tgt
    eq $I19, 1, rx283_restart
    repr_get_attr_int $I11, self, rx283_curclass, "$!from"
    ne $I11, -1, rxscan284_done
    goto rxscan284_scan
  rxscan284_loop:
    inc rx283_pos
    gt rx283_pos, rx283_eos, rx283_fail
    repr_bind_attr_int rx283_cur, rx283_curclass, "$!from", rx283_pos
  rxscan284_scan:
    nqp_rxmark rx283_bstack, rxscan284_loop, rx283_pos, 0
  rxscan284_done:
    nqp_rxmark rx283_bstack, rxcap285_fail, rx283_pos, 0
    add $I11, rx283_pos, 4
    gt $I11, rx283_eos, rx283_fail
    substr $S10, rx283_tgt, rx283_pos, 4
    ne $S10, ucs4:"INIT", rx283_fail
    add rx283_pos, 4
    nqp_rxpeek $I19, rx283_bstack, rxcap285_fail
    inc $I19
    set $I11, rx283_bstack[$I19]
    $P11 = rx283_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx283_pos)
    rx283_cstack = rx283_cur."!cursor_capture"($P11, "sym")
    goto rxcap285_done
  rxcap285_fail:
    goto rx283_fail
  rxcap285_done:
    repr_bind_attr_int rx283_cur, rx283_curclass, "$!pos", rx283_pos
    $P11 = rx283_cur."blorst"()
    repr_get_attr_int $I11, $P11, rx283_curclass, "$!pos"
    lt $I11, 0, rx283_fail
    nqp_rxmark rx283_bstack, rxsubrule286_pass, -1, 0
  rxsubrule286_pass:
    rx283_cstack = rx283_cur."!cursor_capture"($P11, "blorst")
    repr_get_attr_int rx283_pos, $P11, rx283_curclass, "$!pos"
    rx283_cur."!cursor_pass"(rx283_pos, "statement_prefix:sym<INIT>", 'backtrack'=>1)
    .return (rx283_cur)
  rx283_restart:
    repr_get_attr_obj rx283_cstack, rx283_cur, rx283_curclass, "$!cstack"
  rx283_fail:
    unless rx283_bstack, rx283_done
    pop $I19, rx283_bstack
    if_null rx283_cstack, rx283_cstack_done
    unless rx283_cstack, rx283_cstack_done
    dec $I19
    set $P11, rx283_cstack[$I19]
  rx283_cstack_done:
    pop rx283_rep, rx283_bstack
    pop rx283_pos, rx283_bstack
    pop $I19, rx283_bstack
    lt rx283_pos, -1, rx283_done
    lt rx283_pos, 0, rx283_fail
    eq $I19, 0, rx283_fail
    if_null rx283_cstack, rx283_jump
    elements $I18, rx283_bstack
    le $I18, 0, rx283_cut
    dec $I18
    set $I18, rx283_bstack[$I18]
  rx283_cut:
    assign rx283_cstack, $I18
  rx283_jump:
    jump $I19
  rx283_done:
    rx283_cur."!cursor_fail"()
    .return (rx283_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "80_1337966799.879_caps"  :subid("462_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 873
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["blorst"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "80_1337966799.879_nfa"  :subid("463_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 873
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 73
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 78
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 73
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 84
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 8
    push $P109, "blorst"
    push $P109, 0
    new $P110, "ResizablePMCArray"
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_prefix:sym<try>"  :subid("81_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1687
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 875
    .lex "self", param_1687
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1688
    .lex "$/", $P1689
    .local string rx287_tgt
    .local int rx287_pos
    .local int rx287_off
    .local int rx287_eos
    .local int rx287_rep
    .local pmc rx287_cur
    .local pmc rx287_curclass
    .local pmc rx287_bstack
    .local pmc rx287_cstack
    (rx287_cur, rx287_tgt, rx287_pos, rx287_curclass, rx287_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx287_cur
    length rx287_eos, rx287_tgt
    eq $I19, 1, rx287_restart
    repr_get_attr_int $I11, self, rx287_curclass, "$!from"
    ne $I11, -1, rxscan288_done
    goto rxscan288_scan
  rxscan288_loop:
    inc rx287_pos
    gt rx287_pos, rx287_eos, rx287_fail
    repr_bind_attr_int rx287_cur, rx287_curclass, "$!from", rx287_pos
  rxscan288_scan:
    nqp_rxmark rx287_bstack, rxscan288_loop, rx287_pos, 0
  rxscan288_done:
    nqp_rxmark rx287_bstack, rxcap289_fail, rx287_pos, 0
    add $I11, rx287_pos, 3
    gt $I11, rx287_eos, rx287_fail
    substr $S10, rx287_tgt, rx287_pos, 3
    ne $S10, ucs4:"try", rx287_fail
    add rx287_pos, 3
    nqp_rxpeek $I19, rx287_bstack, rxcap289_fail
    inc $I19
    set $I11, rx287_bstack[$I19]
    $P11 = rx287_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx287_pos)
    rx287_cstack = rx287_cur."!cursor_capture"($P11, "sym")
    goto rxcap289_done
  rxcap289_fail:
    goto rx287_fail
  rxcap289_done:
    repr_bind_attr_int rx287_cur, rx287_curclass, "$!pos", rx287_pos
    $P11 = rx287_cur."blorst"()
    repr_get_attr_int $I11, $P11, rx287_curclass, "$!pos"
    lt $I11, 0, rx287_fail
    nqp_rxmark rx287_bstack, rxsubrule290_pass, -1, 0
  rxsubrule290_pass:
    rx287_cstack = rx287_cur."!cursor_capture"($P11, "blorst")
    repr_get_attr_int rx287_pos, $P11, rx287_curclass, "$!pos"
    rx287_cur."!cursor_pass"(rx287_pos, "statement_prefix:sym<try>", 'backtrack'=>1)
    .return (rx287_cur)
  rx287_restart:
    repr_get_attr_obj rx287_cstack, rx287_cur, rx287_curclass, "$!cstack"
  rx287_fail:
    unless rx287_bstack, rx287_done
    pop $I19, rx287_bstack
    if_null rx287_cstack, rx287_cstack_done
    unless rx287_cstack, rx287_cstack_done
    dec $I19
    set $P11, rx287_cstack[$I19]
  rx287_cstack_done:
    pop rx287_rep, rx287_bstack
    pop rx287_pos, rx287_bstack
    pop $I19, rx287_bstack
    lt rx287_pos, -1, rx287_done
    lt rx287_pos, 0, rx287_fail
    eq $I19, 0, rx287_fail
    if_null rx287_cstack, rx287_jump
    elements $I18, rx287_bstack
    le $I18, 0, rx287_cut
    dec $I18
    set $I18, rx287_bstack[$I18]
  rx287_cut:
    assign rx287_cstack, $I18
  rx287_jump:
    jump $I19
  rx287_done:
    rx287_cur."!cursor_fail"()
    .return (rx287_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "81_1337966799.879_caps"  :subid("464_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 875
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["blorst"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "81_1337966799.879_nfa"  :subid("465_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 875
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 116
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 114
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 121
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "blorst"
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "blorst"  :subid("82_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1693
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 880
    .lex "self", param_1693
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1694
    .lex "$/", $P1695
    .local string rx291_tgt
    .local int rx291_pos
    .local int rx291_off
    .local int rx291_eos
    .local int rx291_rep
    .local pmc rx291_cur
    .local pmc rx291_curclass
    .local pmc rx291_bstack
    .local pmc rx291_cstack
    (rx291_cur, rx291_tgt, rx291_pos, rx291_curclass, rx291_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx291_cur
    length rx291_eos, rx291_tgt
    eq $I19, 1, rx291_restart
    repr_get_attr_int $I11, self, rx291_curclass, "$!from"
    ne $I11, -1, rxscan292_done
    goto rxscan292_scan
  rxscan292_loop:
    inc rx291_pos
    gt rx291_pos, rx291_eos, rx291_fail
    repr_bind_attr_int rx291_cur, rx291_curclass, "$!from", rx291_pos
  rxscan292_scan:
    nqp_rxmark rx291_bstack, rxscan292_loop, rx291_pos, 0
  rxscan292_done:
    ge rx291_pos, rx291_eos, rx291_fail
    is_cclass $I11, .CCLASS_WHITESPACE, rx291_tgt, rx291_pos
    unless $I11, rx291_fail
    add rx291_pos, 1
    repr_bind_attr_int rx291_cur, rx291_curclass, "$!pos", rx291_pos
    $P11 = rx291_cur."ws"()
    repr_get_attr_int $I11, $P11, rx291_curclass, "$!pos"
    lt $I11, 0, rx291_fail
    repr_get_attr_int rx291_pos, $P11, rx291_curclass, "$!pos"
  alt294_0:
    nqp_rxmark rx291_bstack, alt294_1, rx291_pos, 0
    ge rx291_pos, rx291_eos, rx291_fail
    substr $S11, rx291_tgt, rx291_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx291_fail
    repr_bind_attr_int rx291_cur, rx291_curclass, "$!pos", rx291_pos
    $P11 = rx291_cur."block"()
    repr_get_attr_int $I11, $P11, rx291_curclass, "$!pos"
    lt $I11, 0, rx291_fail
    nqp_rxmark rx291_bstack, rxsubrule295_pass, -1, 0
  rxsubrule295_pass:
    rx291_cstack = rx291_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx291_pos, $P11, rx291_curclass, "$!pos"
    goto alt294_end
  alt294_1:
    repr_bind_attr_int rx291_cur, rx291_curclass, "$!pos", rx291_pos
    $P11 = rx291_cur."statement"()
    repr_get_attr_int $I11, $P11, rx291_curclass, "$!pos"
    lt $I11, 0, rx291_fail
    nqp_rxmark rx291_bstack, rxsubrule296_pass, -1, 0
  rxsubrule296_pass:
    rx291_cstack = rx291_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx291_pos, $P11, rx291_curclass, "$!pos"
  alt294_end:
    rx291_cur."!cursor_pass"(rx291_pos, "blorst", 'backtrack'=>1)
    .return (rx291_cur)
  rx291_restart:
    repr_get_attr_obj rx291_cstack, rx291_cur, rx291_curclass, "$!cstack"
  rx291_fail:
    unless rx291_bstack, rx291_done
    pop $I19, rx291_bstack
    if_null rx291_cstack, rx291_cstack_done
    unless rx291_cstack, rx291_cstack_done
    dec $I19
    set $P11, rx291_cstack[$I19]
  rx291_cstack_done:
    pop rx291_rep, rx291_bstack
    pop rx291_pos, rx291_bstack
    pop $I19, rx291_bstack
    lt rx291_pos, -1, rx291_done
    lt rx291_pos, 0, rx291_fail
    eq $I19, 0, rx291_fail
    if_null rx291_cstack, rx291_jump
    elements $I18, rx291_bstack
    le $I18, 0, rx291_cut
    dec $I18
    set $I18, rx291_bstack[$I18]
  rx291_cut:
    assign rx291_cstack, $I18
  rx291_jump:
    jump $I19
  rx291_done:
    rx291_cur."!cursor_fail"()
    .return (rx291_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "82_1337966799.879_caps"  :subid("466_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 880
    new $P104, "Hash"
    set $P104["block"], 0
    set $P104["statement"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "82_1337966799.879_nfa"  :subid("467_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 880
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 4
    push $P105, 32
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "ws"
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 6
    push $P107, "{"
    push $P107, 4
    push $P107, 8
    push $P107, "statement"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, 0
    push $P108, 0
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_cond"  :subid("83_1337966799.879")
    .param pmc param_1699
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 886
    .lex "self", param_1699
    $P103 = param_1699."!protoregex"("statement_mod_cond")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_cond:sym<if>"  :subid("84_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1701
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 888
    .lex "self", param_1701
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1702
    .lex "$/", $P1703
    .local string rx297_tgt
    .local int rx297_pos
    .local int rx297_off
    .local int rx297_eos
    .local int rx297_rep
    .local pmc rx297_cur
    .local pmc rx297_curclass
    .local pmc rx297_bstack
    .local pmc rx297_cstack
    (rx297_cur, rx297_tgt, rx297_pos, rx297_curclass, rx297_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx297_cur
    length rx297_eos, rx297_tgt
    eq $I19, 1, rx297_restart
    repr_get_attr_int $I11, self, rx297_curclass, "$!from"
    ne $I11, -1, rxscan298_done
    goto rxscan298_scan
  rxscan298_loop:
    inc rx297_pos
    gt rx297_pos, rx297_eos, rx297_fail
    repr_bind_attr_int rx297_cur, rx297_curclass, "$!from", rx297_pos
  rxscan298_scan:
    nqp_rxmark rx297_bstack, rxscan298_loop, rx297_pos, 0
  rxscan298_done:
    nqp_rxmark rx297_bstack, rxcap299_fail, rx297_pos, 0
    add $I11, rx297_pos, 2
    gt $I11, rx297_eos, rx297_fail
    substr $S10, rx297_tgt, rx297_pos, 2
    ne $S10, ucs4:"if", rx297_fail
    add rx297_pos, 2
    nqp_rxpeek $I19, rx297_bstack, rxcap299_fail
    inc $I19
    set $I11, rx297_bstack[$I19]
    $P11 = rx297_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx297_pos)
    rx297_cstack = rx297_cur."!cursor_capture"($P11, "sym")
    goto rxcap299_done
  rxcap299_fail:
    goto rx297_fail
  rxcap299_done:
    repr_bind_attr_int rx297_cur, rx297_curclass, "$!pos", rx297_pos
    $P11 = rx297_cur."ws"()
    repr_get_attr_int $I11, $P11, rx297_curclass, "$!pos"
    lt $I11, 0, rx297_fail
    repr_get_attr_int rx297_pos, $P11, rx297_curclass, "$!pos"
    repr_bind_attr_int rx297_cur, rx297_curclass, "$!pos", rx297_pos
    $P11 = rx297_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx297_curclass, "$!pos"
    lt $I11, 0, rx297_fail
    nqp_rxmark rx297_bstack, rxsubrule301_pass, -1, 0
  rxsubrule301_pass:
    rx297_cstack = rx297_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx297_pos, $P11, rx297_curclass, "$!pos"
    repr_bind_attr_int rx297_cur, rx297_curclass, "$!pos", rx297_pos
    $P11 = rx297_cur."ws"()
    repr_get_attr_int $I11, $P11, rx297_curclass, "$!pos"
    lt $I11, 0, rx297_fail
    repr_get_attr_int rx297_pos, $P11, rx297_curclass, "$!pos"
    rx297_cur."!cursor_pass"(rx297_pos, "statement_mod_cond:sym<if>", 'backtrack'=>1)
    .return (rx297_cur)
  rx297_restart:
    repr_get_attr_obj rx297_cstack, rx297_cur, rx297_curclass, "$!cstack"
  rx297_fail:
    unless rx297_bstack, rx297_done
    pop $I19, rx297_bstack
    if_null rx297_cstack, rx297_cstack_done
    unless rx297_cstack, rx297_cstack_done
    dec $I19
    set $P11, rx297_cstack[$I19]
  rx297_cstack_done:
    pop rx297_rep, rx297_bstack
    pop rx297_pos, rx297_bstack
    pop $I19, rx297_bstack
    lt rx297_pos, -1, rx297_done
    lt rx297_pos, 0, rx297_fail
    eq $I19, 0, rx297_fail
    if_null rx297_cstack, rx297_jump
    elements $I18, rx297_bstack
    le $I18, 0, rx297_cut
    dec $I18
    set $I18, rx297_bstack[$I18]
  rx297_cut:
    assign rx297_cstack, $I18
  rx297_jump:
    jump $I19
  rx297_done:
    rx297_cur."!cursor_fail"()
    .return (rx297_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "84_1337966799.879_caps"  :subid("468_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 888
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["cond"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "84_1337966799.879_nfa"  :subid("469_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 888
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 105
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 102
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 0
    push $P107, 0
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_cond:sym<unless>"  :subid("85_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1707
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 889
    .lex "self", param_1707
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1708
    .lex "$/", $P1709
    .local string rx303_tgt
    .local int rx303_pos
    .local int rx303_off
    .local int rx303_eos
    .local int rx303_rep
    .local pmc rx303_cur
    .local pmc rx303_curclass
    .local pmc rx303_bstack
    .local pmc rx303_cstack
    (rx303_cur, rx303_tgt, rx303_pos, rx303_curclass, rx303_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx303_cur
    length rx303_eos, rx303_tgt
    eq $I19, 1, rx303_restart
    repr_get_attr_int $I11, self, rx303_curclass, "$!from"
    ne $I11, -1, rxscan304_done
    goto rxscan304_scan
  rxscan304_loop:
    inc rx303_pos
    gt rx303_pos, rx303_eos, rx303_fail
    repr_bind_attr_int rx303_cur, rx303_curclass, "$!from", rx303_pos
  rxscan304_scan:
    nqp_rxmark rx303_bstack, rxscan304_loop, rx303_pos, 0
  rxscan304_done:
    nqp_rxmark rx303_bstack, rxcap305_fail, rx303_pos, 0
    add $I11, rx303_pos, 6
    gt $I11, rx303_eos, rx303_fail
    substr $S10, rx303_tgt, rx303_pos, 6
    ne $S10, ucs4:"unless", rx303_fail
    add rx303_pos, 6
    nqp_rxpeek $I19, rx303_bstack, rxcap305_fail
    inc $I19
    set $I11, rx303_bstack[$I19]
    $P11 = rx303_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx303_pos)
    rx303_cstack = rx303_cur."!cursor_capture"($P11, "sym")
    goto rxcap305_done
  rxcap305_fail:
    goto rx303_fail
  rxcap305_done:
    repr_bind_attr_int rx303_cur, rx303_curclass, "$!pos", rx303_pos
    $P11 = rx303_cur."ws"()
    repr_get_attr_int $I11, $P11, rx303_curclass, "$!pos"
    lt $I11, 0, rx303_fail
    repr_get_attr_int rx303_pos, $P11, rx303_curclass, "$!pos"
    repr_bind_attr_int rx303_cur, rx303_curclass, "$!pos", rx303_pos
    $P11 = rx303_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx303_curclass, "$!pos"
    lt $I11, 0, rx303_fail
    nqp_rxmark rx303_bstack, rxsubrule307_pass, -1, 0
  rxsubrule307_pass:
    rx303_cstack = rx303_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx303_pos, $P11, rx303_curclass, "$!pos"
    repr_bind_attr_int rx303_cur, rx303_curclass, "$!pos", rx303_pos
    $P11 = rx303_cur."ws"()
    repr_get_attr_int $I11, $P11, rx303_curclass, "$!pos"
    lt $I11, 0, rx303_fail
    repr_get_attr_int rx303_pos, $P11, rx303_curclass, "$!pos"
    rx303_cur."!cursor_pass"(rx303_pos, "statement_mod_cond:sym<unless>", 'backtrack'=>1)
    .return (rx303_cur)
  rx303_restart:
    repr_get_attr_obj rx303_cstack, rx303_cur, rx303_curclass, "$!cstack"
  rx303_fail:
    unless rx303_bstack, rx303_done
    pop $I19, rx303_bstack
    if_null rx303_cstack, rx303_cstack_done
    unless rx303_cstack, rx303_cstack_done
    dec $I19
    set $P11, rx303_cstack[$I19]
  rx303_cstack_done:
    pop rx303_rep, rx303_bstack
    pop rx303_pos, rx303_bstack
    pop $I19, rx303_bstack
    lt rx303_pos, -1, rx303_done
    lt rx303_pos, 0, rx303_fail
    eq $I19, 0, rx303_fail
    if_null rx303_cstack, rx303_jump
    elements $I18, rx303_bstack
    le $I18, 0, rx303_cut
    dec $I18
    set $I18, rx303_bstack[$I18]
  rx303_cut:
    assign rx303_cstack, $I18
  rx303_jump:
    jump $I19
  rx303_done:
    rx303_cur."!cursor_fail"()
    .return (rx303_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "85_1337966799.879_caps"  :subid("470_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 889
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["cond"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "85_1337966799.879_nfa"  :subid("471_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 889
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 117
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 110
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 108
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 101
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 115
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 115
    push $P110, 7
    new $P111, "ResizablePMCArray"
    push $P111, 0
    push $P111, 0
    push $P111, 0
    new $P112, "ResizablePMCArray"
    push $P112, $P104
    push $P112, $P105
    push $P112, $P106
    push $P112, $P107
    push $P112, $P108
    push $P112, $P109
    push $P112, $P110
    push $P112, $P111
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_loop"  :subid("86_1337966799.879")
    .param pmc param_1713
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 891
    .lex "self", param_1713
    $P103 = param_1713."!protoregex"("statement_mod_loop")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_loop:sym<while>"  :subid("87_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1715
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 893
    .lex "self", param_1715
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1716
    .lex "$/", $P1717
    .local string rx309_tgt
    .local int rx309_pos
    .local int rx309_off
    .local int rx309_eos
    .local int rx309_rep
    .local pmc rx309_cur
    .local pmc rx309_curclass
    .local pmc rx309_bstack
    .local pmc rx309_cstack
    (rx309_cur, rx309_tgt, rx309_pos, rx309_curclass, rx309_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx309_cur
    length rx309_eos, rx309_tgt
    eq $I19, 1, rx309_restart
    repr_get_attr_int $I11, self, rx309_curclass, "$!from"
    ne $I11, -1, rxscan310_done
    goto rxscan310_scan
  rxscan310_loop:
    inc rx309_pos
    gt rx309_pos, rx309_eos, rx309_fail
    repr_bind_attr_int rx309_cur, rx309_curclass, "$!from", rx309_pos
  rxscan310_scan:
    nqp_rxmark rx309_bstack, rxscan310_loop, rx309_pos, 0
  rxscan310_done:
    nqp_rxmark rx309_bstack, rxcap311_fail, rx309_pos, 0
    add $I11, rx309_pos, 5
    gt $I11, rx309_eos, rx309_fail
    substr $S10, rx309_tgt, rx309_pos, 5
    ne $S10, ucs4:"while", rx309_fail
    add rx309_pos, 5
    nqp_rxpeek $I19, rx309_bstack, rxcap311_fail
    inc $I19
    set $I11, rx309_bstack[$I19]
    $P11 = rx309_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx309_pos)
    rx309_cstack = rx309_cur."!cursor_capture"($P11, "sym")
    goto rxcap311_done
  rxcap311_fail:
    goto rx309_fail
  rxcap311_done:
    repr_bind_attr_int rx309_cur, rx309_curclass, "$!pos", rx309_pos
    $P11 = rx309_cur."ws"()
    repr_get_attr_int $I11, $P11, rx309_curclass, "$!pos"
    lt $I11, 0, rx309_fail
    repr_get_attr_int rx309_pos, $P11, rx309_curclass, "$!pos"
    repr_bind_attr_int rx309_cur, rx309_curclass, "$!pos", rx309_pos
    $P11 = rx309_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx309_curclass, "$!pos"
    lt $I11, 0, rx309_fail
    nqp_rxmark rx309_bstack, rxsubrule313_pass, -1, 0
  rxsubrule313_pass:
    rx309_cstack = rx309_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx309_pos, $P11, rx309_curclass, "$!pos"
    repr_bind_attr_int rx309_cur, rx309_curclass, "$!pos", rx309_pos
    $P11 = rx309_cur."ws"()
    repr_get_attr_int $I11, $P11, rx309_curclass, "$!pos"
    lt $I11, 0, rx309_fail
    repr_get_attr_int rx309_pos, $P11, rx309_curclass, "$!pos"
    rx309_cur."!cursor_pass"(rx309_pos, "statement_mod_loop:sym<while>", 'backtrack'=>1)
    .return (rx309_cur)
  rx309_restart:
    repr_get_attr_obj rx309_cstack, rx309_cur, rx309_curclass, "$!cstack"
  rx309_fail:
    unless rx309_bstack, rx309_done
    pop $I19, rx309_bstack
    if_null rx309_cstack, rx309_cstack_done
    unless rx309_cstack, rx309_cstack_done
    dec $I19
    set $P11, rx309_cstack[$I19]
  rx309_cstack_done:
    pop rx309_rep, rx309_bstack
    pop rx309_pos, rx309_bstack
    pop $I19, rx309_bstack
    lt rx309_pos, -1, rx309_done
    lt rx309_pos, 0, rx309_fail
    eq $I19, 0, rx309_fail
    if_null rx309_cstack, rx309_jump
    elements $I18, rx309_bstack
    le $I18, 0, rx309_cut
    dec $I18
    set $I18, rx309_bstack[$I18]
  rx309_cut:
    assign rx309_cstack, $I18
  rx309_jump:
    jump $I19
  rx309_done:
    rx309_cur."!cursor_fail"()
    .return (rx309_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "87_1337966799.879_caps"  :subid("472_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 893
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["cond"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "87_1337966799.879_nfa"  :subid("473_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 893
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 119
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 104
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 105
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 108
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 101
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 0
    push $P110, 0
    push $P110, 0
    new $P111, "ResizablePMCArray"
    push $P111, $P104
    push $P111, $P105
    push $P111, $P106
    push $P111, $P107
    push $P111, $P108
    push $P111, $P109
    push $P111, $P110
    .return ($P111)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_loop:sym<until>"  :subid("88_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1721
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 894
    .lex "self", param_1721
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1722
    .lex "$/", $P1723
    .local string rx315_tgt
    .local int rx315_pos
    .local int rx315_off
    .local int rx315_eos
    .local int rx315_rep
    .local pmc rx315_cur
    .local pmc rx315_curclass
    .local pmc rx315_bstack
    .local pmc rx315_cstack
    (rx315_cur, rx315_tgt, rx315_pos, rx315_curclass, rx315_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx315_cur
    length rx315_eos, rx315_tgt
    eq $I19, 1, rx315_restart
    repr_get_attr_int $I11, self, rx315_curclass, "$!from"
    ne $I11, -1, rxscan316_done
    goto rxscan316_scan
  rxscan316_loop:
    inc rx315_pos
    gt rx315_pos, rx315_eos, rx315_fail
    repr_bind_attr_int rx315_cur, rx315_curclass, "$!from", rx315_pos
  rxscan316_scan:
    nqp_rxmark rx315_bstack, rxscan316_loop, rx315_pos, 0
  rxscan316_done:
    nqp_rxmark rx315_bstack, rxcap317_fail, rx315_pos, 0
    add $I11, rx315_pos, 5
    gt $I11, rx315_eos, rx315_fail
    substr $S10, rx315_tgt, rx315_pos, 5
    ne $S10, ucs4:"until", rx315_fail
    add rx315_pos, 5
    nqp_rxpeek $I19, rx315_bstack, rxcap317_fail
    inc $I19
    set $I11, rx315_bstack[$I19]
    $P11 = rx315_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx315_pos)
    rx315_cstack = rx315_cur."!cursor_capture"($P11, "sym")
    goto rxcap317_done
  rxcap317_fail:
    goto rx315_fail
  rxcap317_done:
    repr_bind_attr_int rx315_cur, rx315_curclass, "$!pos", rx315_pos
    $P11 = rx315_cur."ws"()
    repr_get_attr_int $I11, $P11, rx315_curclass, "$!pos"
    lt $I11, 0, rx315_fail
    repr_get_attr_int rx315_pos, $P11, rx315_curclass, "$!pos"
    repr_bind_attr_int rx315_cur, rx315_curclass, "$!pos", rx315_pos
    $P11 = rx315_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx315_curclass, "$!pos"
    lt $I11, 0, rx315_fail
    nqp_rxmark rx315_bstack, rxsubrule319_pass, -1, 0
  rxsubrule319_pass:
    rx315_cstack = rx315_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx315_pos, $P11, rx315_curclass, "$!pos"
    repr_bind_attr_int rx315_cur, rx315_curclass, "$!pos", rx315_pos
    $P11 = rx315_cur."ws"()
    repr_get_attr_int $I11, $P11, rx315_curclass, "$!pos"
    lt $I11, 0, rx315_fail
    repr_get_attr_int rx315_pos, $P11, rx315_curclass, "$!pos"
    rx315_cur."!cursor_pass"(rx315_pos, "statement_mod_loop:sym<until>", 'backtrack'=>1)
    .return (rx315_cur)
  rx315_restart:
    repr_get_attr_obj rx315_cstack, rx315_cur, rx315_curclass, "$!cstack"
  rx315_fail:
    unless rx315_bstack, rx315_done
    pop $I19, rx315_bstack
    if_null rx315_cstack, rx315_cstack_done
    unless rx315_cstack, rx315_cstack_done
    dec $I19
    set $P11, rx315_cstack[$I19]
  rx315_cstack_done:
    pop rx315_rep, rx315_bstack
    pop rx315_pos, rx315_bstack
    pop $I19, rx315_bstack
    lt rx315_pos, -1, rx315_done
    lt rx315_pos, 0, rx315_fail
    eq $I19, 0, rx315_fail
    if_null rx315_cstack, rx315_jump
    elements $I18, rx315_bstack
    le $I18, 0, rx315_cut
    dec $I18
    set $I18, rx315_bstack[$I18]
  rx315_cut:
    assign rx315_cstack, $I18
  rx315_jump:
    jump $I19
  rx315_done:
    rx315_cur."!cursor_fail"()
    .return (rx315_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "88_1337966799.879_caps"  :subid("474_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 894
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["cond"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "88_1337966799.879_nfa"  :subid("475_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 894
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 117
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 110
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 116
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 105
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 108
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 0
    push $P110, 0
    push $P110, 0
    new $P111, "ResizablePMCArray"
    push $P111, $P104
    push $P111, $P105
    push $P111, $P106
    push $P111, $P107
    push $P111, $P108
    push $P111, $P109
    push $P111, $P110
    .return ($P111)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_loop:sym<for>"  :subid("89_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1727
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 895
    .lex "self", param_1727
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1728
    .lex "$/", $P1729
    .local string rx321_tgt
    .local int rx321_pos
    .local int rx321_off
    .local int rx321_eos
    .local int rx321_rep
    .local pmc rx321_cur
    .local pmc rx321_curclass
    .local pmc rx321_bstack
    .local pmc rx321_cstack
    (rx321_cur, rx321_tgt, rx321_pos, rx321_curclass, rx321_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx321_cur
    length rx321_eos, rx321_tgt
    eq $I19, 1, rx321_restart
    repr_get_attr_int $I11, self, rx321_curclass, "$!from"
    ne $I11, -1, rxscan322_done
    goto rxscan322_scan
  rxscan322_loop:
    inc rx321_pos
    gt rx321_pos, rx321_eos, rx321_fail
    repr_bind_attr_int rx321_cur, rx321_curclass, "$!from", rx321_pos
  rxscan322_scan:
    nqp_rxmark rx321_bstack, rxscan322_loop, rx321_pos, 0
  rxscan322_done:
    nqp_rxmark rx321_bstack, rxcap323_fail, rx321_pos, 0
    add $I11, rx321_pos, 3
    gt $I11, rx321_eos, rx321_fail
    substr $S10, rx321_tgt, rx321_pos, 3
    ne $S10, ucs4:"for", rx321_fail
    add rx321_pos, 3
    nqp_rxpeek $I19, rx321_bstack, rxcap323_fail
    inc $I19
    set $I11, rx321_bstack[$I19]
    $P11 = rx321_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx321_pos)
    rx321_cstack = rx321_cur."!cursor_capture"($P11, "sym")
    goto rxcap323_done
  rxcap323_fail:
    goto rx321_fail
  rxcap323_done:
    repr_bind_attr_int rx321_cur, rx321_curclass, "$!pos", rx321_pos
    $P11 = rx321_cur."ws"()
    repr_get_attr_int $I11, $P11, rx321_curclass, "$!pos"
    lt $I11, 0, rx321_fail
    repr_get_attr_int rx321_pos, $P11, rx321_curclass, "$!pos"
    repr_bind_attr_int rx321_cur, rx321_curclass, "$!pos", rx321_pos
    $P11 = rx321_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx321_curclass, "$!pos"
    lt $I11, 0, rx321_fail
    nqp_rxmark rx321_bstack, rxsubrule325_pass, -1, 0
  rxsubrule325_pass:
    rx321_cstack = rx321_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx321_pos, $P11, rx321_curclass, "$!pos"
    repr_bind_attr_int rx321_cur, rx321_curclass, "$!pos", rx321_pos
    $P11 = rx321_cur."ws"()
    repr_get_attr_int $I11, $P11, rx321_curclass, "$!pos"
    lt $I11, 0, rx321_fail
    repr_get_attr_int rx321_pos, $P11, rx321_curclass, "$!pos"
    rx321_cur."!cursor_pass"(rx321_pos, "statement_mod_loop:sym<for>", 'backtrack'=>1)
    .return (rx321_cur)
  rx321_restart:
    repr_get_attr_obj rx321_cstack, rx321_cur, rx321_curclass, "$!cstack"
  rx321_fail:
    unless rx321_bstack, rx321_done
    pop $I19, rx321_bstack
    if_null rx321_cstack, rx321_cstack_done
    unless rx321_cstack, rx321_cstack_done
    dec $I19
    set $P11, rx321_cstack[$I19]
  rx321_cstack_done:
    pop rx321_rep, rx321_bstack
    pop rx321_pos, rx321_bstack
    pop $I19, rx321_bstack
    lt rx321_pos, -1, rx321_done
    lt rx321_pos, 0, rx321_fail
    eq $I19, 0, rx321_fail
    if_null rx321_cstack, rx321_jump
    elements $I18, rx321_bstack
    le $I18, 0, rx321_cut
    dec $I18
    set $I18, rx321_bstack[$I18]
  rx321_cut:
    assign rx321_cstack, $I18
  rx321_jump:
    jump $I19
  rx321_done:
    rx321_cur."!cursor_fail"()
    .return (rx321_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "89_1337966799.879_caps"  :subid("476_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 895
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["cond"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "89_1337966799.879_nfa"  :subid("477_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 895
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 102
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 111
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 114
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 0
    push $P108, 0
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<fatarrow>"  :subid("90_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1733
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 899
    .lex "self", param_1733
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1734
    .lex "$/", $P1735
    .local string rx327_tgt
    .local int rx327_pos
    .local int rx327_off
    .local int rx327_eos
    .local int rx327_rep
    .local pmc rx327_cur
    .local pmc rx327_curclass
    .local pmc rx327_bstack
    .local pmc rx327_cstack
    (rx327_cur, rx327_tgt, rx327_pos, rx327_curclass, rx327_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx327_cur
    length rx327_eos, rx327_tgt
    eq $I19, 1, rx327_restart
    repr_get_attr_int $I11, self, rx327_curclass, "$!from"
    ne $I11, -1, rxscan328_done
    goto rxscan328_scan
  rxscan328_loop:
    inc rx327_pos
    gt rx327_pos, rx327_eos, rx327_fail
    repr_bind_attr_int rx327_cur, rx327_curclass, "$!from", rx327_pos
  rxscan328_scan:
    nqp_rxmark rx327_bstack, rxscan328_loop, rx327_pos, 0
  rxscan328_done:
    repr_bind_attr_int rx327_cur, rx327_curclass, "$!pos", rx327_pos
    $P11 = rx327_cur."fatarrow"()
    repr_get_attr_int $I11, $P11, rx327_curclass, "$!pos"
    lt $I11, 0, rx327_fail
    nqp_rxmark rx327_bstack, rxsubrule329_pass, -1, 0
  rxsubrule329_pass:
    rx327_cstack = rx327_cur."!cursor_capture"($P11, "fatarrow")
    repr_get_attr_int rx327_pos, $P11, rx327_curclass, "$!pos"
    rx327_cur."!cursor_pass"(rx327_pos, "term:sym<fatarrow>", 'backtrack'=>1)
    .return (rx327_cur)
  rx327_restart:
    repr_get_attr_obj rx327_cstack, rx327_cur, rx327_curclass, "$!cstack"
  rx327_fail:
    unless rx327_bstack, rx327_done
    pop $I19, rx327_bstack
    if_null rx327_cstack, rx327_cstack_done
    unless rx327_cstack, rx327_cstack_done
    dec $I19
    set $P11, rx327_cstack[$I19]
  rx327_cstack_done:
    pop rx327_rep, rx327_bstack
    pop rx327_pos, rx327_bstack
    pop $I19, rx327_bstack
    lt rx327_pos, -1, rx327_done
    lt rx327_pos, 0, rx327_fail
    eq $I19, 0, rx327_fail
    if_null rx327_cstack, rx327_jump
    elements $I18, rx327_bstack
    le $I18, 0, rx327_cut
    dec $I18
    set $I18, rx327_bstack[$I18]
  rx327_cut:
    assign rx327_cstack, $I18
  rx327_jump:
    jump $I19
  rx327_done:
    rx327_cur."!cursor_fail"()
    .return (rx327_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "90_1337966799.879_caps"  :subid("478_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 899
    new $P104, "Hash"
    set $P104["fatarrow"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "90_1337966799.879_nfa"  :subid("479_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 899
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "fatarrow"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<colonpair>"  :subid("91_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1739
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 900
    .lex "self", param_1739
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1740
    .lex "$/", $P1741
    .local string rx330_tgt
    .local int rx330_pos
    .local int rx330_off
    .local int rx330_eos
    .local int rx330_rep
    .local pmc rx330_cur
    .local pmc rx330_curclass
    .local pmc rx330_bstack
    .local pmc rx330_cstack
    (rx330_cur, rx330_tgt, rx330_pos, rx330_curclass, rx330_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx330_cur
    length rx330_eos, rx330_tgt
    eq $I19, 1, rx330_restart
    repr_get_attr_int $I11, self, rx330_curclass, "$!from"
    ne $I11, -1, rxscan331_done
    goto rxscan331_scan
  rxscan331_loop:
    inc rx330_pos
    gt rx330_pos, rx330_eos, rx330_fail
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!from", rx330_pos
  rxscan331_scan:
    nqp_rxmark rx330_bstack, rxscan331_loop, rx330_pos, 0
  rxscan331_done:
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    $P11 = rx330_cur."colonpair"()
    repr_get_attr_int $I11, $P11, rx330_curclass, "$!pos"
    lt $I11, 0, rx330_fail
    nqp_rxmark rx330_bstack, rxsubrule332_pass, -1, 0
  rxsubrule332_pass:
    rx330_cstack = rx330_cur."!cursor_capture"($P11, "colonpair")
    repr_get_attr_int rx330_pos, $P11, rx330_curclass, "$!pos"
    rx330_cur."!cursor_pass"(rx330_pos, "term:sym<colonpair>", 'backtrack'=>1)
    .return (rx330_cur)
  rx330_restart:
    repr_get_attr_obj rx330_cstack, rx330_cur, rx330_curclass, "$!cstack"
  rx330_fail:
    unless rx330_bstack, rx330_done
    pop $I19, rx330_bstack
    if_null rx330_cstack, rx330_cstack_done
    unless rx330_cstack, rx330_cstack_done
    dec $I19
    set $P11, rx330_cstack[$I19]
  rx330_cstack_done:
    pop rx330_rep, rx330_bstack
    pop rx330_pos, rx330_bstack
    pop $I19, rx330_bstack
    lt rx330_pos, -1, rx330_done
    lt rx330_pos, 0, rx330_fail
    eq $I19, 0, rx330_fail
    if_null rx330_cstack, rx330_jump
    elements $I18, rx330_bstack
    le $I18, 0, rx330_cut
    dec $I18
    set $I18, rx330_bstack[$I18]
  rx330_cut:
    assign rx330_cstack, $I18
  rx330_jump:
    jump $I19
  rx330_done:
    rx330_cur."!cursor_fail"()
    .return (rx330_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "91_1337966799.879_caps"  :subid("480_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 900
    new $P104, "Hash"
    set $P104["colonpair"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "91_1337966799.879_nfa"  :subid("481_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 900
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "colonpair"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<variable>"  :subid("92_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1745
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 901
    .lex "self", param_1745
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1746
    .lex "$/", $P1747
    .local string rx333_tgt
    .local int rx333_pos
    .local int rx333_off
    .local int rx333_eos
    .local int rx333_rep
    .local pmc rx333_cur
    .local pmc rx333_curclass
    .local pmc rx333_bstack
    .local pmc rx333_cstack
    (rx333_cur, rx333_tgt, rx333_pos, rx333_curclass, rx333_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx333_cur
    length rx333_eos, rx333_tgt
    eq $I19, 1, rx333_restart
    repr_get_attr_int $I11, self, rx333_curclass, "$!from"
    ne $I11, -1, rxscan334_done
    goto rxscan334_scan
  rxscan334_loop:
    inc rx333_pos
    gt rx333_pos, rx333_eos, rx333_fail
    repr_bind_attr_int rx333_cur, rx333_curclass, "$!from", rx333_pos
  rxscan334_scan:
    nqp_rxmark rx333_bstack, rxscan334_loop, rx333_pos, 0
  rxscan334_done:
    repr_bind_attr_int rx333_cur, rx333_curclass, "$!pos", rx333_pos
    $P11 = rx333_cur."variable"()
    repr_get_attr_int $I11, $P11, rx333_curclass, "$!pos"
    lt $I11, 0, rx333_fail
    nqp_rxmark rx333_bstack, rxsubrule335_pass, -1, 0
  rxsubrule335_pass:
    rx333_cstack = rx333_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx333_pos, $P11, rx333_curclass, "$!pos"
    rx333_cur."!cursor_pass"(rx333_pos, "term:sym<variable>", 'backtrack'=>1)
    .return (rx333_cur)
  rx333_restart:
    repr_get_attr_obj rx333_cstack, rx333_cur, rx333_curclass, "$!cstack"
  rx333_fail:
    unless rx333_bstack, rx333_done
    pop $I19, rx333_bstack
    if_null rx333_cstack, rx333_cstack_done
    unless rx333_cstack, rx333_cstack_done
    dec $I19
    set $P11, rx333_cstack[$I19]
  rx333_cstack_done:
    pop rx333_rep, rx333_bstack
    pop rx333_pos, rx333_bstack
    pop $I19, rx333_bstack
    lt rx333_pos, -1, rx333_done
    lt rx333_pos, 0, rx333_fail
    eq $I19, 0, rx333_fail
    if_null rx333_cstack, rx333_jump
    elements $I18, rx333_bstack
    le $I18, 0, rx333_cut
    dec $I18
    set $I18, rx333_bstack[$I18]
  rx333_cut:
    assign rx333_cstack, $I18
  rx333_jump:
    jump $I19
  rx333_done:
    rx333_cur."!cursor_fail"()
    .return (rx333_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "92_1337966799.879_caps"  :subid("482_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 901
    new $P104, "Hash"
    set $P104["variable"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "92_1337966799.879_nfa"  :subid("483_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 901
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "variable"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<package_declarator>"  :subid("93_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1751
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 902
    .lex "self", param_1751
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1752
    .lex "$/", $P1753
    .local string rx336_tgt
    .local int rx336_pos
    .local int rx336_off
    .local int rx336_eos
    .local int rx336_rep
    .local pmc rx336_cur
    .local pmc rx336_curclass
    .local pmc rx336_bstack
    .local pmc rx336_cstack
    (rx336_cur, rx336_tgt, rx336_pos, rx336_curclass, rx336_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx336_cur
    length rx336_eos, rx336_tgt
    eq $I19, 1, rx336_restart
    repr_get_attr_int $I11, self, rx336_curclass, "$!from"
    ne $I11, -1, rxscan337_done
    goto rxscan337_scan
  rxscan337_loop:
    inc rx336_pos
    gt rx336_pos, rx336_eos, rx336_fail
    repr_bind_attr_int rx336_cur, rx336_curclass, "$!from", rx336_pos
  rxscan337_scan:
    nqp_rxmark rx336_bstack, rxscan337_loop, rx336_pos, 0
  rxscan337_done:
    repr_bind_attr_int rx336_cur, rx336_curclass, "$!pos", rx336_pos
    $P11 = rx336_cur."package_declarator"()
    repr_get_attr_int $I11, $P11, rx336_curclass, "$!pos"
    lt $I11, 0, rx336_fail
    nqp_rxmark rx336_bstack, rxsubrule338_pass, -1, 0
  rxsubrule338_pass:
    rx336_cstack = rx336_cur."!cursor_capture"($P11, "package_declarator")
    repr_get_attr_int rx336_pos, $P11, rx336_curclass, "$!pos"
    rx336_cur."!cursor_pass"(rx336_pos, "term:sym<package_declarator>", 'backtrack'=>1)
    .return (rx336_cur)
  rx336_restart:
    repr_get_attr_obj rx336_cstack, rx336_cur, rx336_curclass, "$!cstack"
  rx336_fail:
    unless rx336_bstack, rx336_done
    pop $I19, rx336_bstack
    if_null rx336_cstack, rx336_cstack_done
    unless rx336_cstack, rx336_cstack_done
    dec $I19
    set $P11, rx336_cstack[$I19]
  rx336_cstack_done:
    pop rx336_rep, rx336_bstack
    pop rx336_pos, rx336_bstack
    pop $I19, rx336_bstack
    lt rx336_pos, -1, rx336_done
    lt rx336_pos, 0, rx336_fail
    eq $I19, 0, rx336_fail
    if_null rx336_cstack, rx336_jump
    elements $I18, rx336_bstack
    le $I18, 0, rx336_cut
    dec $I18
    set $I18, rx336_bstack[$I18]
  rx336_cut:
    assign rx336_cstack, $I18
  rx336_jump:
    jump $I19
  rx336_done:
    rx336_cur."!cursor_fail"()
    .return (rx336_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "93_1337966799.879_caps"  :subid("484_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 902
    new $P104, "Hash"
    set $P104["package_declarator"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "93_1337966799.879_nfa"  :subid("485_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 902
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "package_declarator"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<scope_declarator>"  :subid("94_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1757
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 903
    .lex "self", param_1757
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1758
    .lex "$/", $P1759
    .local string rx339_tgt
    .local int rx339_pos
    .local int rx339_off
    .local int rx339_eos
    .local int rx339_rep
    .local pmc rx339_cur
    .local pmc rx339_curclass
    .local pmc rx339_bstack
    .local pmc rx339_cstack
    (rx339_cur, rx339_tgt, rx339_pos, rx339_curclass, rx339_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx339_cur
    length rx339_eos, rx339_tgt
    eq $I19, 1, rx339_restart
    repr_get_attr_int $I11, self, rx339_curclass, "$!from"
    ne $I11, -1, rxscan340_done
    goto rxscan340_scan
  rxscan340_loop:
    inc rx339_pos
    gt rx339_pos, rx339_eos, rx339_fail
    repr_bind_attr_int rx339_cur, rx339_curclass, "$!from", rx339_pos
  rxscan340_scan:
    nqp_rxmark rx339_bstack, rxscan340_loop, rx339_pos, 0
  rxscan340_done:
    repr_bind_attr_int rx339_cur, rx339_curclass, "$!pos", rx339_pos
    $P11 = rx339_cur."scope_declarator"()
    repr_get_attr_int $I11, $P11, rx339_curclass, "$!pos"
    lt $I11, 0, rx339_fail
    nqp_rxmark rx339_bstack, rxsubrule341_pass, -1, 0
  rxsubrule341_pass:
    rx339_cstack = rx339_cur."!cursor_capture"($P11, "scope_declarator")
    repr_get_attr_int rx339_pos, $P11, rx339_curclass, "$!pos"
    rx339_cur."!cursor_pass"(rx339_pos, "term:sym<scope_declarator>", 'backtrack'=>1)
    .return (rx339_cur)
  rx339_restart:
    repr_get_attr_obj rx339_cstack, rx339_cur, rx339_curclass, "$!cstack"
  rx339_fail:
    unless rx339_bstack, rx339_done
    pop $I19, rx339_bstack
    if_null rx339_cstack, rx339_cstack_done
    unless rx339_cstack, rx339_cstack_done
    dec $I19
    set $P11, rx339_cstack[$I19]
  rx339_cstack_done:
    pop rx339_rep, rx339_bstack
    pop rx339_pos, rx339_bstack
    pop $I19, rx339_bstack
    lt rx339_pos, -1, rx339_done
    lt rx339_pos, 0, rx339_fail
    eq $I19, 0, rx339_fail
    if_null rx339_cstack, rx339_jump
    elements $I18, rx339_bstack
    le $I18, 0, rx339_cut
    dec $I18
    set $I18, rx339_bstack[$I18]
  rx339_cut:
    assign rx339_cstack, $I18
  rx339_jump:
    jump $I19
  rx339_done:
    rx339_cur."!cursor_fail"()
    .return (rx339_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "94_1337966799.879_caps"  :subid("486_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 903
    new $P104, "Hash"
    set $P104["scope_declarator"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "94_1337966799.879_nfa"  :subid("487_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 903
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "scope_declarator"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<routine_declarator>"  :subid("95_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1763
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 904
    .lex "self", param_1763
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1764
    .lex "$/", $P1765
    .local string rx342_tgt
    .local int rx342_pos
    .local int rx342_off
    .local int rx342_eos
    .local int rx342_rep
    .local pmc rx342_cur
    .local pmc rx342_curclass
    .local pmc rx342_bstack
    .local pmc rx342_cstack
    (rx342_cur, rx342_tgt, rx342_pos, rx342_curclass, rx342_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx342_cur
    length rx342_eos, rx342_tgt
    eq $I19, 1, rx342_restart
    repr_get_attr_int $I11, self, rx342_curclass, "$!from"
    ne $I11, -1, rxscan343_done
    goto rxscan343_scan
  rxscan343_loop:
    inc rx342_pos
    gt rx342_pos, rx342_eos, rx342_fail
    repr_bind_attr_int rx342_cur, rx342_curclass, "$!from", rx342_pos
  rxscan343_scan:
    nqp_rxmark rx342_bstack, rxscan343_loop, rx342_pos, 0
  rxscan343_done:
    repr_bind_attr_int rx342_cur, rx342_curclass, "$!pos", rx342_pos
    $P11 = rx342_cur."routine_declarator"()
    repr_get_attr_int $I11, $P11, rx342_curclass, "$!pos"
    lt $I11, 0, rx342_fail
    nqp_rxmark rx342_bstack, rxsubrule344_pass, -1, 0
  rxsubrule344_pass:
    rx342_cstack = rx342_cur."!cursor_capture"($P11, "routine_declarator")
    repr_get_attr_int rx342_pos, $P11, rx342_curclass, "$!pos"
    rx342_cur."!cursor_pass"(rx342_pos, "term:sym<routine_declarator>", 'backtrack'=>1)
    .return (rx342_cur)
  rx342_restart:
    repr_get_attr_obj rx342_cstack, rx342_cur, rx342_curclass, "$!cstack"
  rx342_fail:
    unless rx342_bstack, rx342_done
    pop $I19, rx342_bstack
    if_null rx342_cstack, rx342_cstack_done
    unless rx342_cstack, rx342_cstack_done
    dec $I19
    set $P11, rx342_cstack[$I19]
  rx342_cstack_done:
    pop rx342_rep, rx342_bstack
    pop rx342_pos, rx342_bstack
    pop $I19, rx342_bstack
    lt rx342_pos, -1, rx342_done
    lt rx342_pos, 0, rx342_fail
    eq $I19, 0, rx342_fail
    if_null rx342_cstack, rx342_jump
    elements $I18, rx342_bstack
    le $I18, 0, rx342_cut
    dec $I18
    set $I18, rx342_bstack[$I18]
  rx342_cut:
    assign rx342_cstack, $I18
  rx342_jump:
    jump $I19
  rx342_done:
    rx342_cur."!cursor_fail"()
    .return (rx342_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "95_1337966799.879_caps"  :subid("488_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 904
    new $P104, "Hash"
    set $P104["routine_declarator"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "95_1337966799.879_nfa"  :subid("489_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 904
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "routine_declarator"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<multi_declarator>"  :subid("98_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1769
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 905
    .const 'Sub' $P1780 = "97_1337966799.879" 
    capture_lex $P1780
    .const 'Sub' $P1775 = "96_1337966799.879" 
    capture_lex $P1775
    .lex "self", param_1769
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1770
    .lex "$/", $P1771
    .local string rx345_tgt
    .local int rx345_pos
    .local int rx345_off
    .local int rx345_eos
    .local int rx345_rep
    .local pmc rx345_cur
    .local pmc rx345_curclass
    .local pmc rx345_bstack
    .local pmc rx345_cstack
    (rx345_cur, rx345_tgt, rx345_pos, rx345_curclass, rx345_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx345_cur
    length rx345_eos, rx345_tgt
    eq $I19, 1, rx345_restart
    repr_get_attr_int $I11, self, rx345_curclass, "$!from"
    ne $I11, -1, rxscan346_done
    goto rxscan346_scan
  rxscan346_loop:
    inc rx345_pos
    gt rx345_pos, rx345_eos, rx345_fail
    repr_bind_attr_int rx345_cur, rx345_curclass, "$!from", rx345_pos
  rxscan346_scan:
    nqp_rxmark rx345_bstack, rxscan346_loop, rx345_pos, 0
  rxscan346_done:
    .const 'Sub' $P1775 = "96_1337966799.879" 
    capture_lex $P1775
    repr_bind_attr_int rx345_cur, rx345_curclass, "$!pos", rx345_pos
    $P11 = rx345_cur."before"($P1775)
    repr_get_attr_int $I11, $P11, rx345_curclass, "$!pos"
    lt $I11, 0, rx345_fail
    .const 'Sub' $P1780 = "97_1337966799.879" 
    capture_lex $P1780
    repr_bind_attr_int rx345_cur, rx345_curclass, "$!pos", rx345_pos
    $P11 = rx345_cur."before"($P1780)
    repr_get_attr_int $I11, $P11, rx345_curclass, "$!pos"
    ge $I11, 0, rx345_fail
    repr_bind_attr_int rx345_cur, rx345_curclass, "$!pos", rx345_pos
    $P11 = rx345_cur."multi_declarator"()
    repr_get_attr_int $I11, $P11, rx345_curclass, "$!pos"
    lt $I11, 0, rx345_fail
    nqp_rxmark rx345_bstack, rxsubrule354_pass, -1, 0
  rxsubrule354_pass:
    rx345_cstack = rx345_cur."!cursor_capture"($P11, "multi_declarator")
    repr_get_attr_int rx345_pos, $P11, rx345_curclass, "$!pos"
    rx345_cur."!cursor_pass"(rx345_pos, "term:sym<multi_declarator>", 'backtrack'=>1)
    .return (rx345_cur)
  rx345_restart:
    repr_get_attr_obj rx345_cstack, rx345_cur, rx345_curclass, "$!cstack"
  rx345_fail:
    unless rx345_bstack, rx345_done
    pop $I19, rx345_bstack
    if_null rx345_cstack, rx345_cstack_done
    unless rx345_cstack, rx345_cstack_done
    dec $I19
    set $P11, rx345_cstack[$I19]
  rx345_cstack_done:
    pop rx345_rep, rx345_bstack
    pop rx345_pos, rx345_bstack
    pop $I19, rx345_bstack
    lt rx345_pos, -1, rx345_done
    lt rx345_pos, 0, rx345_fail
    eq $I19, 0, rx345_fail
    if_null rx345_cstack, rx345_jump
    elements $I18, rx345_bstack
    le $I18, 0, rx345_cut
    dec $I18
    set $I18, rx345_bstack[$I18]
  rx345_cut:
    assign rx345_cstack, $I18
  rx345_jump:
    jump $I19
  rx345_done:
    rx345_cur."!cursor_fail"()
    .return (rx345_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "98_1337966799.879_caps"  :subid("490_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 905
    new $P104, "Hash"
    set $P104["multi_declarator"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "98_1337966799.879_nfa"  :subid("491_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 905
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "before"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1774"  :anon :subid("96_1337966799.879") :method :outer("98_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 905
    .lex unicode:"$\x{a2}", $P1778
    .local string rx347_tgt
    .local int rx347_pos
    .local int rx347_off
    .local int rx347_eos
    .local int rx347_rep
    .local pmc rx347_cur
    .local pmc rx347_curclass
    .local pmc rx347_bstack
    .local pmc rx347_cstack
    (rx347_cur, rx347_tgt, rx347_pos, rx347_curclass, rx347_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx347_cur
    length rx347_eos, rx347_tgt
    eq $I19, 1, rx347_restart
    repr_get_attr_int $I11, self, rx347_curclass, "$!from"
    ne $I11, -1, rxscan348_done
    goto rxscan348_scan
  rxscan348_loop:
    inc rx347_pos
    gt rx347_pos, rx347_eos, rx347_fail
    repr_bind_attr_int rx347_cur, rx347_curclass, "$!from", rx347_pos
  rxscan348_scan:
    nqp_rxmark rx347_bstack, rxscan348_loop, rx347_pos, 0
  rxscan348_done:
  alt349_0:
    nqp_rxmark rx347_bstack, alt349_1, rx347_pos, 0
    add $I11, rx347_pos, 5
    gt $I11, rx347_eos, rx347_fail
    substr $S10, rx347_tgt, rx347_pos, 5
    ne $S10, ucs4:"multi", rx347_fail
    add rx347_pos, 5
    goto alt349_end
  alt349_1:
    nqp_rxmark rx347_bstack, alt349_2, rx347_pos, 0
    add $I11, rx347_pos, 5
    gt $I11, rx347_eos, rx347_fail
    substr $S10, rx347_tgt, rx347_pos, 5
    ne $S10, ucs4:"proto", rx347_fail
    add rx347_pos, 5
    goto alt349_end
  alt349_2:
    add $I11, rx347_pos, 4
    gt $I11, rx347_eos, rx347_fail
    substr $S10, rx347_tgt, rx347_pos, 4
    ne $S10, ucs4:"only", rx347_fail
    add rx347_pos, 4
  alt349_end:
    rx347_cur."!cursor_pass"(rx347_pos, 'backtrack'=>1)
    .return (rx347_cur)
  rx347_restart:
    repr_get_attr_obj rx347_cstack, rx347_cur, rx347_curclass, "$!cstack"
  rx347_fail:
    unless rx347_bstack, rx347_done
    pop $I19, rx347_bstack
    if_null rx347_cstack, rx347_cstack_done
    unless rx347_cstack, rx347_cstack_done
    dec $I19
    set $P11, rx347_cstack[$I19]
  rx347_cstack_done:
    pop rx347_rep, rx347_bstack
    pop rx347_pos, rx347_bstack
    pop $I19, rx347_bstack
    lt rx347_pos, -1, rx347_done
    lt rx347_pos, 0, rx347_fail
    eq $I19, 0, rx347_fail
    if_null rx347_cstack, rx347_jump
    elements $I18, rx347_bstack
    le $I18, 0, rx347_cut
    dec $I18
    set $I18, rx347_bstack[$I18]
  rx347_cut:
    assign rx347_cstack, $I18
  rx347_jump:
    jump $I19
  rx347_done:
    rx347_cur."!cursor_fail"()
    .return (rx347_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "96_1337966799.879_caps"  :subid("492_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 905
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "96_1337966799.879_nfa"  :subid("493_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 905
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 109
    push $P105, 2
    push $P105, 2
    push $P105, 112
    push $P105, 6
    push $P105, 2
    push $P105, 111
    push $P105, 10
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 117
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 108
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 116
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 105
    push $P109, 0
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 114
    push $P110, 7
    new $P111, "ResizablePMCArray"
    push $P111, 2
    push $P111, 111
    push $P111, 8
    new $P112, "ResizablePMCArray"
    push $P112, 2
    push $P112, 116
    push $P112, 9
    new $P113, "ResizablePMCArray"
    push $P113, 2
    push $P113, 111
    push $P113, 0
    new $P114, "ResizablePMCArray"
    push $P114, 2
    push $P114, 110
    push $P114, 11
    new $P115, "ResizablePMCArray"
    push $P115, 2
    push $P115, 108
    push $P115, 12
    new $P116, "ResizablePMCArray"
    push $P116, 2
    push $P116, 121
    push $P116, 0
    new $P117, "ResizablePMCArray"
    push $P117, $P104
    push $P117, $P105
    push $P117, $P106
    push $P117, $P107
    push $P117, $P108
    push $P117, $P109
    push $P117, $P110
    push $P117, $P111
    push $P117, $P112
    push $P117, $P113
    push $P117, $P114
    push $P117, $P115
    push $P117, $P116
    .return ($P117)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1779"  :anon :subid("97_1337966799.879") :method :outer("98_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 905
    .lex unicode:"$\x{a2}", $P1783
    .local string rx350_tgt
    .local int rx350_pos
    .local int rx350_off
    .local int rx350_eos
    .local int rx350_rep
    .local pmc rx350_cur
    .local pmc rx350_curclass
    .local pmc rx350_bstack
    .local pmc rx350_cstack
    (rx350_cur, rx350_tgt, rx350_pos, rx350_curclass, rx350_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx350_cur
    length rx350_eos, rx350_tgt
    eq $I19, 1, rx350_restart
    repr_get_attr_int $I11, self, rx350_curclass, "$!from"
    ne $I11, -1, rxscan351_done
    goto rxscan351_scan
  rxscan351_loop:
    inc rx350_pos
    gt rx350_pos, rx350_eos, rx350_fail
    repr_bind_attr_int rx350_cur, rx350_curclass, "$!from", rx350_pos
  rxscan351_scan:
    nqp_rxmark rx350_bstack, rxscan351_loop, rx350_pos, 0
  rxscan351_done:
    add $I11, rx350_pos, 5
    gt $I11, rx350_eos, rx350_fail
    substr $S10, rx350_tgt, rx350_pos, 5
    ne $S10, ucs4:"proto", rx350_fail
    add rx350_pos, 5
    repr_bind_attr_int rx350_cur, rx350_curclass, "$!pos", rx350_pos
    $P11 = rx350_cur."ws"()
    repr_get_attr_int $I11, $P11, rx350_curclass, "$!pos"
    lt $I11, 0, rx350_fail
    repr_get_attr_int rx350_pos, $P11, rx350_curclass, "$!pos"
  alt353_0:
    nqp_rxmark rx350_bstack, alt353_1, rx350_pos, 0
    add $I11, rx350_pos, 5
    gt $I11, rx350_eos, rx350_fail
    substr $S10, rx350_tgt, rx350_pos, 5
    ne $S10, ucs4:"regex", rx350_fail
    add rx350_pos, 5
    goto alt353_end
  alt353_1:
    nqp_rxmark rx350_bstack, alt353_2, rx350_pos, 0
    add $I11, rx350_pos, 5
    gt $I11, rx350_eos, rx350_fail
    substr $S10, rx350_tgt, rx350_pos, 5
    ne $S10, ucs4:"token", rx350_fail
    add rx350_pos, 5
    goto alt353_end
  alt353_2:
    add $I11, rx350_pos, 4
    gt $I11, rx350_eos, rx350_fail
    substr $S10, rx350_tgt, rx350_pos, 4
    ne $S10, ucs4:"rule", rx350_fail
    add rx350_pos, 4
  alt353_end:
    rx350_cur."!cursor_pass"(rx350_pos, 'backtrack'=>1)
    .return (rx350_cur)
  rx350_restart:
    repr_get_attr_obj rx350_cstack, rx350_cur, rx350_curclass, "$!cstack"
  rx350_fail:
    unless rx350_bstack, rx350_done
    pop $I19, rx350_bstack
    if_null rx350_cstack, rx350_cstack_done
    unless rx350_cstack, rx350_cstack_done
    dec $I19
    set $P11, rx350_cstack[$I19]
  rx350_cstack_done:
    pop rx350_rep, rx350_bstack
    pop rx350_pos, rx350_bstack
    pop $I19, rx350_bstack
    lt rx350_pos, -1, rx350_done
    lt rx350_pos, 0, rx350_fail
    eq $I19, 0, rx350_fail
    if_null rx350_cstack, rx350_jump
    elements $I18, rx350_bstack
    le $I18, 0, rx350_cut
    dec $I18
    set $I18, rx350_bstack[$I18]
  rx350_cut:
    assign rx350_cstack, $I18
  rx350_jump:
    jump $I19
  rx350_done:
    rx350_cur."!cursor_fail"()
    .return (rx350_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "97_1337966799.879_caps"  :subid("494_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 905
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "97_1337966799.879_nfa"  :subid("495_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 905
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 112
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 114
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 111
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 116
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 111
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 8
    push $P110, "ws"
    push $P110, 7
    new $P111, "ResizablePMCArray"
    push $P111, 2
    push $P111, 114
    push $P111, 8
    push $P111, 2
    push $P111, 116
    push $P111, 12
    push $P111, 2
    push $P111, 114
    push $P111, 16
    new $P112, "ResizablePMCArray"
    push $P112, 2
    push $P112, 101
    push $P112, 9
    new $P113, "ResizablePMCArray"
    push $P113, 2
    push $P113, 103
    push $P113, 10
    new $P114, "ResizablePMCArray"
    push $P114, 2
    push $P114, 101
    push $P114, 11
    new $P115, "ResizablePMCArray"
    push $P115, 2
    push $P115, 120
    push $P115, 0
    new $P116, "ResizablePMCArray"
    push $P116, 2
    push $P116, 111
    push $P116, 13
    new $P117, "ResizablePMCArray"
    push $P117, 2
    push $P117, 107
    push $P117, 14
    new $P118, "ResizablePMCArray"
    push $P118, 2
    push $P118, 101
    push $P118, 15
    new $P119, "ResizablePMCArray"
    push $P119, 2
    push $P119, 110
    push $P119, 0
    new $P120, "ResizablePMCArray"
    push $P120, 2
    push $P120, 117
    push $P120, 17
    new $P121, "ResizablePMCArray"
    push $P121, 2
    push $P121, 108
    push $P121, 18
    new $P122, "ResizablePMCArray"
    push $P122, 2
    push $P122, 101
    push $P122, 0
    new $P123, "ResizablePMCArray"
    push $P123, $P104
    push $P123, $P105
    push $P123, $P106
    push $P123, $P107
    push $P123, $P108
    push $P123, $P109
    push $P123, $P110
    push $P123, $P111
    push $P123, $P112
    push $P123, $P113
    push $P123, $P114
    push $P123, $P115
    push $P123, $P116
    push $P123, $P117
    push $P123, $P118
    push $P123, $P119
    push $P123, $P120
    push $P123, $P121
    push $P123, $P122
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<regex_declarator>"  :subid("99_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1785
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 910
    .lex "self", param_1785
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1786
    .lex "$/", $P1787
    .local string rx355_tgt
    .local int rx355_pos
    .local int rx355_off
    .local int rx355_eos
    .local int rx355_rep
    .local pmc rx355_cur
    .local pmc rx355_curclass
    .local pmc rx355_bstack
    .local pmc rx355_cstack
    (rx355_cur, rx355_tgt, rx355_pos, rx355_curclass, rx355_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx355_cur
    length rx355_eos, rx355_tgt
    eq $I19, 1, rx355_restart
    repr_get_attr_int $I11, self, rx355_curclass, "$!from"
    ne $I11, -1, rxscan356_done
    goto rxscan356_scan
  rxscan356_loop:
    inc rx355_pos
    gt rx355_pos, rx355_eos, rx355_fail
    repr_bind_attr_int rx355_cur, rx355_curclass, "$!from", rx355_pos
  rxscan356_scan:
    nqp_rxmark rx355_bstack, rxscan356_loop, rx355_pos, 0
  rxscan356_done:
    repr_bind_attr_int rx355_cur, rx355_curclass, "$!pos", rx355_pos
    $P11 = rx355_cur."regex_declarator"()
    repr_get_attr_int $I11, $P11, rx355_curclass, "$!pos"
    lt $I11, 0, rx355_fail
    nqp_rxmark rx355_bstack, rxsubrule357_pass, -1, 0
  rxsubrule357_pass:
    rx355_cstack = rx355_cur."!cursor_capture"($P11, "regex_declarator")
    repr_get_attr_int rx355_pos, $P11, rx355_curclass, "$!pos"
    rx355_cur."!cursor_pass"(rx355_pos, "term:sym<regex_declarator>", 'backtrack'=>1)
    .return (rx355_cur)
  rx355_restart:
    repr_get_attr_obj rx355_cstack, rx355_cur, rx355_curclass, "$!cstack"
  rx355_fail:
    unless rx355_bstack, rx355_done
    pop $I19, rx355_bstack
    if_null rx355_cstack, rx355_cstack_done
    unless rx355_cstack, rx355_cstack_done
    dec $I19
    set $P11, rx355_cstack[$I19]
  rx355_cstack_done:
    pop rx355_rep, rx355_bstack
    pop rx355_pos, rx355_bstack
    pop $I19, rx355_bstack
    lt rx355_pos, -1, rx355_done
    lt rx355_pos, 0, rx355_fail
    eq $I19, 0, rx355_fail
    if_null rx355_cstack, rx355_jump
    elements $I18, rx355_bstack
    le $I18, 0, rx355_cut
    dec $I18
    set $I18, rx355_bstack[$I18]
  rx355_cut:
    assign rx355_cstack, $I18
  rx355_jump:
    jump $I19
  rx355_done:
    rx355_cur."!cursor_fail"()
    .return (rx355_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "99_1337966799.879_caps"  :subid("496_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 910
    new $P104, "Hash"
    set $P104["regex_declarator"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "99_1337966799.879_nfa"  :subid("497_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 910
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "regex_declarator"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<statement_prefix>"  :subid("100_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1791
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 911
    .lex "self", param_1791
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1792
    .lex "$/", $P1793
    .local string rx358_tgt
    .local int rx358_pos
    .local int rx358_off
    .local int rx358_eos
    .local int rx358_rep
    .local pmc rx358_cur
    .local pmc rx358_curclass
    .local pmc rx358_bstack
    .local pmc rx358_cstack
    (rx358_cur, rx358_tgt, rx358_pos, rx358_curclass, rx358_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx358_cur
    length rx358_eos, rx358_tgt
    eq $I19, 1, rx358_restart
    repr_get_attr_int $I11, self, rx358_curclass, "$!from"
    ne $I11, -1, rxscan359_done
    goto rxscan359_scan
  rxscan359_loop:
    inc rx358_pos
    gt rx358_pos, rx358_eos, rx358_fail
    repr_bind_attr_int rx358_cur, rx358_curclass, "$!from", rx358_pos
  rxscan359_scan:
    nqp_rxmark rx358_bstack, rxscan359_loop, rx358_pos, 0
  rxscan359_done:
    repr_bind_attr_int rx358_cur, rx358_curclass, "$!pos", rx358_pos
    $P11 = rx358_cur."statement_prefix"()
    repr_get_attr_int $I11, $P11, rx358_curclass, "$!pos"
    lt $I11, 0, rx358_fail
    nqp_rxmark rx358_bstack, rxsubrule360_pass, -1, 0
  rxsubrule360_pass:
    rx358_cstack = rx358_cur."!cursor_capture"($P11, "statement_prefix")
    repr_get_attr_int rx358_pos, $P11, rx358_curclass, "$!pos"
    rx358_cur."!cursor_pass"(rx358_pos, "term:sym<statement_prefix>", 'backtrack'=>1)
    .return (rx358_cur)
  rx358_restart:
    repr_get_attr_obj rx358_cstack, rx358_cur, rx358_curclass, "$!cstack"
  rx358_fail:
    unless rx358_bstack, rx358_done
    pop $I19, rx358_bstack
    if_null rx358_cstack, rx358_cstack_done
    unless rx358_cstack, rx358_cstack_done
    dec $I19
    set $P11, rx358_cstack[$I19]
  rx358_cstack_done:
    pop rx358_rep, rx358_bstack
    pop rx358_pos, rx358_bstack
    pop $I19, rx358_bstack
    lt rx358_pos, -1, rx358_done
    lt rx358_pos, 0, rx358_fail
    eq $I19, 0, rx358_fail
    if_null rx358_cstack, rx358_jump
    elements $I18, rx358_bstack
    le $I18, 0, rx358_cut
    dec $I18
    set $I18, rx358_bstack[$I18]
  rx358_cut:
    assign rx358_cstack, $I18
  rx358_jump:
    jump $I19
  rx358_done:
    rx358_cur."!cursor_fail"()
    .return (rx358_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "100_1337966799.879_caps"  :subid("498_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 911
    new $P104, "Hash"
    set $P104["statement_prefix"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "100_1337966799.879_nfa"  :subid("499_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 911
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "statement_prefix"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<lambda>"  :subid("101_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1797
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 912
    .lex "self", param_1797
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1798
    .lex "$/", $P1799
    .local string rx361_tgt
    .local int rx361_pos
    .local int rx361_off
    .local int rx361_eos
    .local int rx361_rep
    .local pmc rx361_cur
    .local pmc rx361_curclass
    .local pmc rx361_bstack
    .local pmc rx361_cstack
    (rx361_cur, rx361_tgt, rx361_pos, rx361_curclass, rx361_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx361_cur
    length rx361_eos, rx361_tgt
    eq $I19, 1, rx361_restart
    repr_get_attr_int $I11, self, rx361_curclass, "$!from"
    ne $I11, -1, rxscan362_done
    goto rxscan362_scan
  rxscan362_loop:
    inc rx361_pos
    gt rx361_pos, rx361_eos, rx361_fail
    repr_bind_attr_int rx361_cur, rx361_curclass, "$!from", rx361_pos
  rxscan362_scan:
    nqp_rxmark rx361_bstack, rxscan362_loop, rx361_pos, 0
  rxscan362_done:
    repr_bind_attr_int rx361_cur, rx361_curclass, "$!pos", rx361_pos
    $P11 = rx361_cur."lambda"()
    repr_get_attr_int $I11, $P11, rx361_curclass, "$!pos"
    lt $I11, 0, rx361_fail
    repr_bind_attr_int rx361_cur, rx361_curclass, "$!pos", rx361_pos
    $P11 = rx361_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx361_curclass, "$!pos"
    lt $I11, 0, rx361_fail
    nqp_rxmark rx361_bstack, rxsubrule363_pass, -1, 0
  rxsubrule363_pass:
    rx361_cstack = rx361_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx361_pos, $P11, rx361_curclass, "$!pos"
    rx361_cur."!cursor_pass"(rx361_pos, "term:sym<lambda>", 'backtrack'=>1)
    .return (rx361_cur)
  rx361_restart:
    repr_get_attr_obj rx361_cstack, rx361_cur, rx361_curclass, "$!cstack"
  rx361_fail:
    unless rx361_bstack, rx361_done
    pop $I19, rx361_bstack
    if_null rx361_cstack, rx361_cstack_done
    unless rx361_cstack, rx361_cstack_done
    dec $I19
    set $P11, rx361_cstack[$I19]
  rx361_cstack_done:
    pop rx361_rep, rx361_bstack
    pop rx361_pos, rx361_bstack
    pop $I19, rx361_bstack
    lt rx361_pos, -1, rx361_done
    lt rx361_pos, 0, rx361_fail
    eq $I19, 0, rx361_fail
    if_null rx361_cstack, rx361_jump
    elements $I18, rx361_bstack
    le $I18, 0, rx361_cut
    dec $I18
    set $I18, rx361_bstack[$I18]
  rx361_cut:
    assign rx361_cstack, $I18
  rx361_jump:
    jump $I19
  rx361_done:
    rx361_cur."!cursor_fail"()
    .return (rx361_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "101_1337966799.879_caps"  :subid("500_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 912
    new $P104, "Hash"
    set $P104["pblock"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "101_1337966799.879_nfa"  :subid("501_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 912
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "lambda"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "fatarrow"  :subid("102_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1803
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 914
    .lex "self", param_1803
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1804
    .lex "$/", $P1805
    .local string rx364_tgt
    .local int rx364_pos
    .local int rx364_off
    .local int rx364_eos
    .local int rx364_rep
    .local pmc rx364_cur
    .local pmc rx364_curclass
    .local pmc rx364_bstack
    .local pmc rx364_cstack
    (rx364_cur, rx364_tgt, rx364_pos, rx364_curclass, rx364_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx364_cur
    length rx364_eos, rx364_tgt
    eq $I19, 1, rx364_restart
    repr_get_attr_int $I11, self, rx364_curclass, "$!from"
    ne $I11, -1, rxscan365_done
    goto rxscan365_scan
  rxscan365_loop:
    inc rx364_pos
    gt rx364_pos, rx364_eos, rx364_fail
    repr_bind_attr_int rx364_cur, rx364_curclass, "$!from", rx364_pos
  rxscan365_scan:
    nqp_rxmark rx364_bstack, rxscan365_loop, rx364_pos, 0
  rxscan365_done:
    repr_bind_attr_int rx364_cur, rx364_curclass, "$!pos", rx364_pos
    $P11 = rx364_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx364_curclass, "$!pos"
    lt $I11, 0, rx364_fail
    nqp_rxmark rx364_bstack, rxsubrule366_pass, -1, 0
  rxsubrule366_pass:
    rx364_cstack = rx364_cur."!cursor_capture"($P11, "key")
    repr_get_attr_int rx364_pos, $P11, rx364_curclass, "$!pos"
  # rx rxquantr367 ** 0..-1
    nqp_rxmark rx364_bstack, rxquantr367_done, rx364_pos, 0
  rxquantr367_loop:
    ge rx364_pos, rx364_eos, rx364_fail
    substr $S11, rx364_tgt, rx364_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx364_fail
    inc rx364_pos
    nqp_rxpeek $I19, rx364_bstack, rxquantr367_done
    inc $I19
    inc $I19
    set rx364_rep, rx364_bstack[$I19]
    nqp_rxcommit rx364_bstack, rxquantr367_done
    inc rx364_rep
    nqp_rxmark rx364_bstack, rxquantr367_done, rx364_pos, rx364_rep
    goto rxquantr367_loop
  rxquantr367_done:
    add $I11, rx364_pos, 2
    gt $I11, rx364_eos, rx364_fail
    substr $S10, rx364_tgt, rx364_pos, 2
    ne $S10, ucs4:"=>", rx364_fail
    add rx364_pos, 2
    repr_bind_attr_int rx364_cur, rx364_curclass, "$!pos", rx364_pos
    $P11 = rx364_cur."ws"()
    repr_get_attr_int $I11, $P11, rx364_curclass, "$!pos"
    lt $I11, 0, rx364_fail
    repr_get_attr_int rx364_pos, $P11, rx364_curclass, "$!pos"
    repr_bind_attr_int rx364_cur, rx364_curclass, "$!pos", rx364_pos
    $P11 = rx364_cur."EXPR"("i=")
    repr_get_attr_int $I11, $P11, rx364_curclass, "$!pos"
    lt $I11, 0, rx364_fail
    nqp_rxmark rx364_bstack, rxsubrule369_pass, -1, 0
  rxsubrule369_pass:
    rx364_cstack = rx364_cur."!cursor_capture"($P11, "val")
    repr_get_attr_int rx364_pos, $P11, rx364_curclass, "$!pos"
    rx364_cur."!cursor_pass"(rx364_pos, "fatarrow", 'backtrack'=>1)
    .return (rx364_cur)
  rx364_restart:
    repr_get_attr_obj rx364_cstack, rx364_cur, rx364_curclass, "$!cstack"
  rx364_fail:
    unless rx364_bstack, rx364_done
    pop $I19, rx364_bstack
    if_null rx364_cstack, rx364_cstack_done
    unless rx364_cstack, rx364_cstack_done
    dec $I19
    set $P11, rx364_cstack[$I19]
  rx364_cstack_done:
    pop rx364_rep, rx364_bstack
    pop rx364_pos, rx364_bstack
    pop $I19, rx364_bstack
    lt rx364_pos, -1, rx364_done
    lt rx364_pos, 0, rx364_fail
    eq $I19, 0, rx364_fail
    if_null rx364_cstack, rx364_jump
    elements $I18, rx364_bstack
    le $I18, 0, rx364_cut
    dec $I18
    set $I18, rx364_bstack[$I18]
  rx364_cut:
    assign rx364_cstack, $I18
  rx364_jump:
    jump $I19
  rx364_done:
    rx364_cur."!cursor_fail"()
    .return (rx364_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "102_1337966799.879_caps"  :subid("502_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 914
    new $P104, "Hash"
    set $P104["key"], 0
    set $P104["val"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "102_1337966799.879_nfa"  :subid("503_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 914
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "identifier"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 6
    push $P106, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P106, 2
    push $P106, 1
    push $P106, 0
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 61
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 62
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 8
    push $P109, "ws"
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 8
    push $P110, "EXPR"
    push $P110, 0
    new $P111, "ResizablePMCArray"
    push $P111, $P104
    push $P111, $P105
    push $P111, $P106
    push $P111, $P107
    push $P111, $P108
    push $P111, $P109
    push $P111, $P110
    .return ($P111)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "colonpair"  :subid("103_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1809
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 918
    .lex "self", param_1809
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1810
    .lex "$/", $P1811
    .local string rx370_tgt
    .local int rx370_pos
    .local int rx370_off
    .local int rx370_eos
    .local int rx370_rep
    .local pmc rx370_cur
    .local pmc rx370_curclass
    .local pmc rx370_bstack
    .local pmc rx370_cstack
    (rx370_cur, rx370_tgt, rx370_pos, rx370_curclass, rx370_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx370_cur
    length rx370_eos, rx370_tgt
    eq $I19, 1, rx370_restart
    repr_get_attr_int $I11, self, rx370_curclass, "$!from"
    ne $I11, -1, rxscan371_done
    goto rxscan371_scan
  rxscan371_loop:
    inc rx370_pos
    gt rx370_pos, rx370_eos, rx370_fail
    repr_bind_attr_int rx370_cur, rx370_curclass, "$!from", rx370_pos
  rxscan371_scan:
    nqp_rxmark rx370_bstack, rxscan371_loop, rx370_pos, 0
  rxscan371_done:
    add $I11, rx370_pos, 1
    gt $I11, rx370_eos, rx370_fail
    substr $S10, rx370_tgt, rx370_pos, 1
    ne $S10, ucs4:":", rx370_fail
    add rx370_pos, 1
  alt372_0:
    nqp_rxmark rx370_bstack, alt372_1, rx370_pos, 0
    nqp_rxmark rx370_bstack, rxcap373_fail, rx370_pos, 0
    add $I11, rx370_pos, 1
    gt $I11, rx370_eos, rx370_fail
    substr $S10, rx370_tgt, rx370_pos, 1
    ne $S10, ucs4:"!", rx370_fail
    add rx370_pos, 1
    nqp_rxpeek $I19, rx370_bstack, rxcap373_fail
    inc $I19
    set $I11, rx370_bstack[$I19]
    $P11 = rx370_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx370_pos)
    rx370_cstack = rx370_cur."!cursor_capture"($P11, "not")
    goto rxcap373_done
  rxcap373_fail:
    goto rx370_fail
  rxcap373_done:
    repr_bind_attr_int rx370_cur, rx370_curclass, "$!pos", rx370_pos
    $P11 = rx370_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx370_curclass, "$!pos"
    lt $I11, 0, rx370_fail
    nqp_rxmark rx370_bstack, rxsubrule374_pass, -1, 0
  rxsubrule374_pass:
    rx370_cstack = rx370_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx370_pos, $P11, rx370_curclass, "$!pos"
    goto alt372_end
  alt372_1:
    nqp_rxmark rx370_bstack, alt372_2, rx370_pos, 0
    repr_bind_attr_int rx370_cur, rx370_curclass, "$!pos", rx370_pos
    $P11 = rx370_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx370_curclass, "$!pos"
    lt $I11, 0, rx370_fail
    nqp_rxmark rx370_bstack, rxsubrule375_pass, -1, 0
  rxsubrule375_pass:
    rx370_cstack = rx370_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx370_pos, $P11, rx370_curclass, "$!pos"
  # rx rxquantr376 ** 0..1
    nqp_rxmark rx370_bstack, rxquantr376_done, rx370_pos, 0
  rxquantr376_loop:
    repr_bind_attr_int rx370_cur, rx370_curclass, "$!pos", rx370_pos
    $P11 = rx370_cur."circumfix"()
    repr_get_attr_int $I11, $P11, rx370_curclass, "$!pos"
    lt $I11, 0, rx370_fail
    goto rxsubrule377_pass
  rxsubrule377_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx370_curclass, "$!pos"
    lt $I11, 0, rx370_fail
  rxsubrule377_pass:
    rx370_cstack = rx370_cur."!cursor_capture"($P11, "circumfix")
    set_addr $I11, rxsubrule377_back
    push rx370_bstack, $I11
    push rx370_bstack, 0
    push rx370_bstack, rx370_pos
    elements $I11, rx370_cstack
    push rx370_bstack, $I11
    repr_get_attr_int rx370_pos, $P11, rx370_curclass, "$!pos"
    nqp_rxpeek $I19, rx370_bstack, rxquantr376_done
    inc $I19
    inc $I19
    set rx370_rep, rx370_bstack[$I19]
    nqp_rxcommit rx370_bstack, rxquantr376_done
    inc rx370_rep
  rxquantr376_done:
    goto alt372_end
  alt372_2:
    nqp_rxmark rx370_bstack, alt372_3, rx370_pos, 0
    repr_bind_attr_int rx370_cur, rx370_curclass, "$!pos", rx370_pos
    $P11 = rx370_cur."circumfix"()
    repr_get_attr_int $I11, $P11, rx370_curclass, "$!pos"
    lt $I11, 0, rx370_fail
    nqp_rxmark rx370_bstack, rxsubrule378_pass, -1, 0
  rxsubrule378_pass:
    rx370_cstack = rx370_cur."!cursor_capture"($P11, "circumfix")
    repr_get_attr_int rx370_pos, $P11, rx370_curclass, "$!pos"
    goto alt372_end
  alt372_3:
    repr_bind_attr_int rx370_cur, rx370_curclass, "$!pos", rx370_pos
    $P11 = rx370_cur."variable"()
    repr_get_attr_int $I11, $P11, rx370_curclass, "$!pos"
    lt $I11, 0, rx370_fail
    nqp_rxmark rx370_bstack, rxsubrule379_pass, -1, 0
  rxsubrule379_pass:
    rx370_cstack = rx370_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx370_pos, $P11, rx370_curclass, "$!pos"
  alt372_end:
    rx370_cur."!cursor_pass"(rx370_pos, "colonpair", 'backtrack'=>1)
    .return (rx370_cur)
  rx370_restart:
    repr_get_attr_obj rx370_cstack, rx370_cur, rx370_curclass, "$!cstack"
  rx370_fail:
    unless rx370_bstack, rx370_done
    pop $I19, rx370_bstack
    if_null rx370_cstack, rx370_cstack_done
    unless rx370_cstack, rx370_cstack_done
    dec $I19
    set $P11, rx370_cstack[$I19]
  rx370_cstack_done:
    pop rx370_rep, rx370_bstack
    pop rx370_pos, rx370_bstack
    pop $I19, rx370_bstack
    lt rx370_pos, -1, rx370_done
    lt rx370_pos, 0, rx370_fail
    eq $I19, 0, rx370_fail
    if_null rx370_cstack, rx370_jump
    elements $I18, rx370_bstack
    le $I18, 0, rx370_cut
    dec $I18
    set $I18, rx370_bstack[$I18]
  rx370_cut:
    assign rx370_cstack, $I18
  rx370_jump:
    jump $I19
  rx370_done:
    rx370_cur."!cursor_fail"()
    .return (rx370_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "103_1337966799.879_caps"  :subid("504_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 918
    new $P104, "Hash"
    set $P104["not"], 0
    set $P104["identifier"], 0
    set $P104["circumfix"], 2
    set $P104["variable"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "103_1337966799.879_nfa"  :subid("505_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 918
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 58
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 33
    push $P106, 3
    push $P106, 8
    push $P106, "identifier"
    push $P106, 4
    push $P106, 8
    push $P106, "circumfix"
    push $P106, 0
    push $P106, 8
    push $P106, "variable"
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "identifier"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "circumfix"
    push $P108, 0
    push $P108, 1
    push $P108, 0
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "variable"  :subid("104_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1815
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 928
    .lex "self", param_1815
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1816
    .lex "$/", $P1817
    .local string rx380_tgt
    .local int rx380_pos
    .local int rx380_off
    .local int rx380_eos
    .local int rx380_rep
    .local pmc rx380_cur
    .local pmc rx380_curclass
    .local pmc rx380_bstack
    .local pmc rx380_cstack
    (rx380_cur, rx380_tgt, rx380_pos, rx380_curclass, rx380_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx380_cur
    length rx380_eos, rx380_tgt
    eq $I19, 1, rx380_restart
    repr_get_attr_int $I11, self, rx380_curclass, "$!from"
    ne $I11, -1, rxscan381_done
    goto rxscan381_scan
  rxscan381_loop:
    inc rx380_pos
    gt rx380_pos, rx380_eos, rx380_fail
    repr_bind_attr_int rx380_cur, rx380_curclass, "$!from", rx380_pos
  rxscan381_scan:
    nqp_rxmark rx380_bstack, rxscan381_loop, rx380_pos, 0
  rxscan381_done:
  alt382_0:
    nqp_rxmark rx380_bstack, alt382_1, rx380_pos, 0
    repr_bind_attr_int rx380_cur, rx380_curclass, "$!pos", rx380_pos
    $P11 = rx380_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx380_curclass, "$!pos"
    lt $I11, 0, rx380_fail
    nqp_rxmark rx380_bstack, rxsubrule383_pass, -1, 0
  rxsubrule383_pass:
    rx380_cstack = rx380_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx380_pos, $P11, rx380_curclass, "$!pos"
  # rx rxquantr384 ** 0..1
    nqp_rxmark rx380_bstack, rxquantr384_done, rx380_pos, 0
  rxquantr384_loop:
    repr_bind_attr_int rx380_cur, rx380_curclass, "$!pos", rx380_pos
    $P11 = rx380_cur."twigil"()
    repr_get_attr_int $I11, $P11, rx380_curclass, "$!pos"
    lt $I11, 0, rx380_fail
    goto rxsubrule385_pass
  rxsubrule385_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx380_curclass, "$!pos"
    lt $I11, 0, rx380_fail
  rxsubrule385_pass:
    rx380_cstack = rx380_cur."!cursor_capture"($P11, "twigil")
    set_addr $I11, rxsubrule385_back
    push rx380_bstack, $I11
    push rx380_bstack, 0
    push rx380_bstack, rx380_pos
    elements $I11, rx380_cstack
    push rx380_bstack, $I11
    repr_get_attr_int rx380_pos, $P11, rx380_curclass, "$!pos"
    nqp_rxpeek $I19, rx380_bstack, rxquantr384_done
    inc $I19
    inc $I19
    set rx380_rep, rx380_bstack[$I19]
    nqp_rxcommit rx380_bstack, rxquantr384_done
    inc rx380_rep
  rxquantr384_done:
    repr_bind_attr_int rx380_cur, rx380_curclass, "$!pos", rx380_pos
    $P11 = rx380_cur."name"()
    repr_get_attr_int $I11, $P11, rx380_curclass, "$!pos"
    lt $I11, 0, rx380_fail
    nqp_rxmark rx380_bstack, rxsubrule386_pass, -1, 0
  rxsubrule386_pass:
    rx380_cstack = rx380_cur."!cursor_capture"($P11, "desigilname")
    repr_get_attr_int rx380_pos, $P11, rx380_curclass, "$!pos"
    goto alt382_end
  alt382_1:
    nqp_rxmark rx380_bstack, alt382_2, rx380_pos, 0
    repr_bind_attr_int rx380_cur, rx380_curclass, "$!pos", rx380_pos
    $P11 = rx380_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx380_curclass, "$!pos"
    lt $I11, 0, rx380_fail
    nqp_rxmark rx380_bstack, rxsubrule387_pass, -1, 0
  rxsubrule387_pass:
    rx380_cstack = rx380_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx380_pos, $P11, rx380_curclass, "$!pos"
    ge rx380_pos, rx380_eos, rx380_fail
    substr $S11, rx380_tgt, rx380_pos, 1
    index $I11, ucs4:"<[", $S11
    lt $I11, 0, rx380_fail
    repr_bind_attr_int rx380_cur, rx380_curclass, "$!pos", rx380_pos
    $P11 = rx380_cur."postcircumfix"()
    repr_get_attr_int $I11, $P11, rx380_curclass, "$!pos"
    lt $I11, 0, rx380_fail
    nqp_rxmark rx380_bstack, rxsubrule388_pass, -1, 0
  rxsubrule388_pass:
    rx380_cstack = rx380_cur."!cursor_capture"($P11, "postcircumfix")
    repr_get_attr_int rx380_pos, $P11, rx380_curclass, "$!pos"
    goto alt382_end
  alt382_2:
    nqp_rxmark rx380_bstack, rxcap389_fail, rx380_pos, 0
    add $I11, rx380_pos, 1
    gt $I11, rx380_eos, rx380_fail
    substr $S10, rx380_tgt, rx380_pos, 1
    ne $S10, ucs4:"$", rx380_fail
    add rx380_pos, 1
    nqp_rxpeek $I19, rx380_bstack, rxcap389_fail
    inc $I19
    set $I11, rx380_bstack[$I19]
    $P11 = rx380_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx380_pos)
    rx380_cstack = rx380_cur."!cursor_capture"($P11, "sigil")
    goto rxcap389_done
  rxcap389_fail:
    goto rx380_fail
  rxcap389_done:
    nqp_rxmark rx380_bstack, rxcap390_fail, rx380_pos, 0
    ge rx380_pos, rx380_eos, rx380_fail
    substr $S11, rx380_tgt, rx380_pos, 1
    index $I11, ucs4:"/_!", $S11
    lt $I11, 0, rx380_fail
    inc rx380_pos
    nqp_rxpeek $I19, rx380_bstack, rxcap390_fail
    inc $I19
    set $I11, rx380_bstack[$I19]
    $P11 = rx380_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx380_pos)
    rx380_cstack = rx380_cur."!cursor_capture"($P11, "desigilname")
    goto rxcap390_done
  rxcap390_fail:
    goto rx380_fail
  rxcap390_done:
  alt382_end:
    rx380_cur."!cursor_pass"(rx380_pos, "variable", 'backtrack'=>1)
    .return (rx380_cur)
  rx380_restart:
    repr_get_attr_obj rx380_cstack, rx380_cur, rx380_curclass, "$!cstack"
  rx380_fail:
    unless rx380_bstack, rx380_done
    pop $I19, rx380_bstack
    if_null rx380_cstack, rx380_cstack_done
    unless rx380_cstack, rx380_cstack_done
    dec $I19
    set $P11, rx380_cstack[$I19]
  rx380_cstack_done:
    pop rx380_rep, rx380_bstack
    pop rx380_pos, rx380_bstack
    pop $I19, rx380_bstack
    lt rx380_pos, -1, rx380_done
    lt rx380_pos, 0, rx380_fail
    eq $I19, 0, rx380_fail
    if_null rx380_cstack, rx380_jump
    elements $I18, rx380_bstack
    le $I18, 0, rx380_cut
    dec $I18
    set $I18, rx380_bstack[$I18]
  rx380_cut:
    assign rx380_cstack, $I18
  rx380_jump:
    jump $I19
  rx380_done:
    rx380_cur."!cursor_fail"()
    .return (rx380_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "104_1337966799.879_caps"  :subid("506_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 928
    new $P104, "Hash"
    set $P104["sigil"], 0
    set $P104["twigil"], 2
    set $P104["desigilname"], 0
    set $P104["postcircumfix"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "104_1337966799.879_nfa"  :subid("507_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 928
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "sigil"
    push $P105, 2
    push $P105, 8
    push $P105, "sigil"
    push $P105, 4
    push $P105, 2
    push $P105, 36
    push $P105, 6
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "twigil"
    push $P106, 3
    push $P106, 1
    push $P106, 0
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "name"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, 6
    push $P108, "<["
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 0
    push $P109, 0
    push $P109, 0
    new $P110, "ResizablePMCArray"
    push $P110, 6
    push $P110, "/_!"
    push $P110, 0
    new $P111, "ResizablePMCArray"
    push $P111, $P104
    push $P111, $P105
    push $P111, $P106
    push $P111, $P107
    push $P111, $P108
    push $P111, $P109
    push $P111, $P110
    .return ($P111)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "sigil"  :subid("105_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1821
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 934
    .lex "self", param_1821
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1822
    .lex "$/", $P1823
    .local string rx391_tgt
    .local int rx391_pos
    .local int rx391_off
    .local int rx391_eos
    .local int rx391_rep
    .local pmc rx391_cur
    .local pmc rx391_curclass
    .local pmc rx391_bstack
    .local pmc rx391_cstack
    (rx391_cur, rx391_tgt, rx391_pos, rx391_curclass, rx391_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx391_cur
    length rx391_eos, rx391_tgt
    eq $I19, 1, rx391_restart
    repr_get_attr_int $I11, self, rx391_curclass, "$!from"
    ne $I11, -1, rxscan392_done
    goto rxscan392_scan
  rxscan392_loop:
    inc rx391_pos
    gt rx391_pos, rx391_eos, rx391_fail
    repr_bind_attr_int rx391_cur, rx391_curclass, "$!from", rx391_pos
  rxscan392_scan:
    nqp_rxmark rx391_bstack, rxscan392_loop, rx391_pos, 0
  rxscan392_done:
    ge rx391_pos, rx391_eos, rx391_fail
    substr $S11, rx391_tgt, rx391_pos, 1
    index $I11, ucs4:"$@%&", $S11
    lt $I11, 0, rx391_fail
    inc rx391_pos
    rx391_cur."!cursor_pass"(rx391_pos, "sigil", 'backtrack'=>1)
    .return (rx391_cur)
  rx391_restart:
    repr_get_attr_obj rx391_cstack, rx391_cur, rx391_curclass, "$!cstack"
  rx391_fail:
    unless rx391_bstack, rx391_done
    pop $I19, rx391_bstack
    if_null rx391_cstack, rx391_cstack_done
    unless rx391_cstack, rx391_cstack_done
    dec $I19
    set $P11, rx391_cstack[$I19]
  rx391_cstack_done:
    pop rx391_rep, rx391_bstack
    pop rx391_pos, rx391_bstack
    pop $I19, rx391_bstack
    lt rx391_pos, -1, rx391_done
    lt rx391_pos, 0, rx391_fail
    eq $I19, 0, rx391_fail
    if_null rx391_cstack, rx391_jump
    elements $I18, rx391_bstack
    le $I18, 0, rx391_cut
    dec $I18
    set $I18, rx391_bstack[$I18]
  rx391_cut:
    assign rx391_cstack, $I18
  rx391_jump:
    jump $I19
  rx391_done:
    rx391_cur."!cursor_fail"()
    .return (rx391_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "105_1337966799.879_caps"  :subid("508_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 934
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "105_1337966799.879_nfa"  :subid("509_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 934
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 6
    push $P105, "$@%&"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "twigil"  :subid("106_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1827
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 936
    .lex "self", param_1827
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1828
    .lex "$/", $P1829
    .local string rx393_tgt
    .local int rx393_pos
    .local int rx393_off
    .local int rx393_eos
    .local int rx393_rep
    .local pmc rx393_cur
    .local pmc rx393_curclass
    .local pmc rx393_bstack
    .local pmc rx393_cstack
    (rx393_cur, rx393_tgt, rx393_pos, rx393_curclass, rx393_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx393_cur
    length rx393_eos, rx393_tgt
    eq $I19, 1, rx393_restart
    repr_get_attr_int $I11, self, rx393_curclass, "$!from"
    ne $I11, -1, rxscan394_done
    goto rxscan394_scan
  rxscan394_loop:
    inc rx393_pos
    gt rx393_pos, rx393_eos, rx393_fail
    repr_bind_attr_int rx393_cur, rx393_curclass, "$!from", rx393_pos
  rxscan394_scan:
    nqp_rxmark rx393_bstack, rxscan394_loop, rx393_pos, 0
  rxscan394_done:
    ge rx393_pos, rx393_eos, rx393_fail
    substr $S11, rx393_tgt, rx393_pos, 1
    index $I11, ucs4:"*!?", $S11
    lt $I11, 0, rx393_fail
    inc rx393_pos
    rx393_cur."!cursor_pass"(rx393_pos, "twigil", 'backtrack'=>1)
    .return (rx393_cur)
  rx393_restart:
    repr_get_attr_obj rx393_cstack, rx393_cur, rx393_curclass, "$!cstack"
  rx393_fail:
    unless rx393_bstack, rx393_done
    pop $I19, rx393_bstack
    if_null rx393_cstack, rx393_cstack_done
    unless rx393_cstack, rx393_cstack_done
    dec $I19
    set $P11, rx393_cstack[$I19]
  rx393_cstack_done:
    pop rx393_rep, rx393_bstack
    pop rx393_pos, rx393_bstack
    pop $I19, rx393_bstack
    lt rx393_pos, -1, rx393_done
    lt rx393_pos, 0, rx393_fail
    eq $I19, 0, rx393_fail
    if_null rx393_cstack, rx393_jump
    elements $I18, rx393_bstack
    le $I18, 0, rx393_cut
    dec $I18
    set $I18, rx393_bstack[$I18]
  rx393_cut:
    assign rx393_cstack, $I18
  rx393_jump:
    jump $I19
  rx393_done:
    rx393_cur."!cursor_fail"()
    .return (rx393_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "106_1337966799.879_caps"  :subid("510_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 936
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "106_1337966799.879_nfa"  :subid("511_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 936
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 6
    push $P105, "*!?"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator"  :subid("107_1337966799.879")
    .param pmc param_1833
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 938
    .lex "self", param_1833
    $P103 = param_1833."!protoregex"("package_declarator")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<module>"  :subid("108_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1835
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 939
    .lex "self", param_1835
.annotate 'line', 940
    new $P103, "Undef"
    set $P1836, $P103
    .lex "$*OUTERPACKAGE", $P1836
.annotate 'line', 941
    new $P104, "Undef"
    set $P1837, $P104
    .lex "$*PKGDECL", $P1837
    .local pmc self
    find_lex $P105, "self"
    set self, $P105
    .lex unicode:"$\x{a2}", $P1838
    .lex "$/", $P1839
.annotate 'line', 939
    .local string rx395_tgt
    .local int rx395_pos
    .local int rx395_off
    .local int rx395_eos
    .local int rx395_rep
    .local pmc rx395_cur
    .local pmc rx395_curclass
    .local pmc rx395_bstack
    .local pmc rx395_cstack
    (rx395_cur, rx395_tgt, rx395_pos, rx395_curclass, rx395_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx395_cur
    length rx395_eos, rx395_tgt
    eq $I19, 1, rx395_restart
    repr_get_attr_int $I11, self, rx395_curclass, "$!from"
    ne $I11, -1, rxscan396_done
    goto rxscan396_scan
  rxscan396_loop:
    inc rx395_pos
    gt rx395_pos, rx395_eos, rx395_fail
    repr_bind_attr_int rx395_cur, rx395_curclass, "$!from", rx395_pos
  rxscan396_scan:
    nqp_rxmark rx395_bstack, rxscan396_loop, rx395_pos, 0
  rxscan396_done:
    repr_bind_attr_int rx395_cur, rx395_curclass, "$!pos", rx395_pos
    store_lex unicode:"$\x{a2}", rx395_cur
.annotate 'line', 940
    find_dynamic_lex $P108, "$*PACKAGE"
    unless_null $P108, vivify_1256
    get_hll_global $P106, "GLOBAL"
    get_who $P107, $P106
    set $P108, $P107["$PACKAGE"]
    unless_null $P108, vivify_1257
    die "Contextual $*PACKAGE not found"
  vivify_1257:
  vivify_1256:
    set $P1836, $P108
.annotate 'line', 939
    repr_bind_attr_int rx395_cur, rx395_curclass, "$!pos", rx395_pos
    store_lex unicode:"$\x{a2}", rx395_cur
.annotate 'line', 941
    new $P109, "String"
    assign $P109, "module"
    set $P1837, $P109
.annotate 'line', 939
    nqp_rxmark rx395_bstack, rxcap397_fail, rx395_pos, 0
    add $I11, rx395_pos, 6
    gt $I11, rx395_eos, rx395_fail
    substr $S10, rx395_tgt, rx395_pos, 6
    ne $S10, ucs4:"module", rx395_fail
    add rx395_pos, 6
    nqp_rxpeek $I19, rx395_bstack, rxcap397_fail
    inc $I19
    set $I11, rx395_bstack[$I19]
    $P11 = rx395_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx395_pos)
    rx395_cstack = rx395_cur."!cursor_capture"($P11, "sym")
    goto rxcap397_done
  rxcap397_fail:
    goto rx395_fail
  rxcap397_done:
    repr_bind_attr_int rx395_cur, rx395_curclass, "$!pos", rx395_pos
    $P11 = rx395_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx395_curclass, "$!pos"
    lt $I11, 0, rx395_fail
    nqp_rxmark rx395_bstack, rxsubrule398_pass, -1, 0
  rxsubrule398_pass:
    rx395_cstack = rx395_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx395_pos, $P11, rx395_curclass, "$!pos"
    rx395_cur."!cursor_pass"(rx395_pos, "package_declarator:sym<module>", 'backtrack'=>1)
    .return (rx395_cur)
  rx395_restart:
    repr_get_attr_obj rx395_cstack, rx395_cur, rx395_curclass, "$!cstack"
  rx395_fail:
    unless rx395_bstack, rx395_done
    pop $I19, rx395_bstack
    if_null rx395_cstack, rx395_cstack_done
    unless rx395_cstack, rx395_cstack_done
    dec $I19
    set $P11, rx395_cstack[$I19]
  rx395_cstack_done:
    pop rx395_rep, rx395_bstack
    pop rx395_pos, rx395_bstack
    pop $I19, rx395_bstack
    lt rx395_pos, -1, rx395_done
    lt rx395_pos, 0, rx395_fail
    eq $I19, 0, rx395_fail
    if_null rx395_cstack, rx395_jump
    elements $I18, rx395_bstack
    le $I18, 0, rx395_cut
    dec $I18
    set $I18, rx395_bstack[$I18]
  rx395_cut:
    assign rx395_cstack, $I18
  rx395_jump:
    jump $I19
  rx395_done:
    rx395_cur."!cursor_fail"()
    .return (rx395_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "108_1337966799.879_caps"  :subid("512_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 939
    new $P106, "Hash"
    set $P106["sym"], 0
    set $P106["package_def"], 0
    .return ($P106)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "108_1337966799.879_nfa"  :subid("513_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 939
    new $P106, "ResizablePMCArray"
    new $P107, "ResizablePMCArray"
    push $P107, 1
    push $P107, 0
    push $P107, 2
    new $P108, "ResizablePMCArray"
    push $P108, 1
    push $P108, 0
    push $P108, 3
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 109
    push $P109, 4
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 111
    push $P110, 5
    new $P111, "ResizablePMCArray"
    push $P111, 2
    push $P111, 100
    push $P111, 6
    new $P112, "ResizablePMCArray"
    push $P112, 2
    push $P112, 117
    push $P112, 7
    new $P113, "ResizablePMCArray"
    push $P113, 2
    push $P113, 108
    push $P113, 8
    new $P114, "ResizablePMCArray"
    push $P114, 2
    push $P114, 101
    push $P114, 9
    new $P115, "ResizablePMCArray"
    push $P115, 8
    push $P115, "package_def"
    push $P115, 0
    new $P116, "ResizablePMCArray"
    push $P116, $P106
    push $P116, $P107
    push $P116, $P108
    push $P116, $P109
    push $P116, $P110
    push $P116, $P111
    push $P116, $P112
    push $P116, $P113
    push $P116, $P114
    push $P116, $P115
    .return ($P116)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<knowhow>"  :subid("109_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1843
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 944
    .lex "self", param_1843
.annotate 'line', 945
    new $P103, "Undef"
    set $P1844, $P103
    .lex "$*OUTERPACKAGE", $P1844
.annotate 'line', 946
    new $P104, "Undef"
    set $P1845, $P104
    .lex "$*PKGDECL", $P1845
    .local pmc self
    find_lex $P105, "self"
    set self, $P105
    .lex unicode:"$\x{a2}", $P1846
    .lex "$/", $P1847
.annotate 'line', 944
    .local string rx399_tgt
    .local int rx399_pos
    .local int rx399_off
    .local int rx399_eos
    .local int rx399_rep
    .local pmc rx399_cur
    .local pmc rx399_curclass
    .local pmc rx399_bstack
    .local pmc rx399_cstack
    (rx399_cur, rx399_tgt, rx399_pos, rx399_curclass, rx399_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx399_cur
    length rx399_eos, rx399_tgt
    eq $I19, 1, rx399_restart
    repr_get_attr_int $I11, self, rx399_curclass, "$!from"
    ne $I11, -1, rxscan400_done
    goto rxscan400_scan
  rxscan400_loop:
    inc rx399_pos
    gt rx399_pos, rx399_eos, rx399_fail
    repr_bind_attr_int rx399_cur, rx399_curclass, "$!from", rx399_pos
  rxscan400_scan:
    nqp_rxmark rx399_bstack, rxscan400_loop, rx399_pos, 0
  rxscan400_done:
    repr_bind_attr_int rx399_cur, rx399_curclass, "$!pos", rx399_pos
    store_lex unicode:"$\x{a2}", rx399_cur
.annotate 'line', 945
    find_dynamic_lex $P108, "$*PACKAGE"
    unless_null $P108, vivify_1258
    get_hll_global $P106, "GLOBAL"
    get_who $P107, $P106
    set $P108, $P107["$PACKAGE"]
    unless_null $P108, vivify_1259
    die "Contextual $*PACKAGE not found"
  vivify_1259:
  vivify_1258:
    set $P1844, $P108
.annotate 'line', 944
    repr_bind_attr_int rx399_cur, rx399_curclass, "$!pos", rx399_pos
    store_lex unicode:"$\x{a2}", rx399_cur
.annotate 'line', 946
    new $P109, "String"
    assign $P109, "knowhow"
    set $P1845, $P109
.annotate 'line', 944
    nqp_rxmark rx399_bstack, rxcap401_fail, rx399_pos, 0
    add $I11, rx399_pos, 7
    gt $I11, rx399_eos, rx399_fail
    substr $S10, rx399_tgt, rx399_pos, 7
    ne $S10, ucs4:"knowhow", rx399_fail
    add rx399_pos, 7
    nqp_rxpeek $I19, rx399_bstack, rxcap401_fail
    inc $I19
    set $I11, rx399_bstack[$I19]
    $P11 = rx399_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx399_pos)
    rx399_cstack = rx399_cur."!cursor_capture"($P11, "sym")
    goto rxcap401_done
  rxcap401_fail:
    goto rx399_fail
  rxcap401_done:
    repr_bind_attr_int rx399_cur, rx399_curclass, "$!pos", rx399_pos
    $P11 = rx399_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx399_curclass, "$!pos"
    lt $I11, 0, rx399_fail
    nqp_rxmark rx399_bstack, rxsubrule402_pass, -1, 0
  rxsubrule402_pass:
    rx399_cstack = rx399_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx399_pos, $P11, rx399_curclass, "$!pos"
    rx399_cur."!cursor_pass"(rx399_pos, "package_declarator:sym<knowhow>", 'backtrack'=>1)
    .return (rx399_cur)
  rx399_restart:
    repr_get_attr_obj rx399_cstack, rx399_cur, rx399_curclass, "$!cstack"
  rx399_fail:
    unless rx399_bstack, rx399_done
    pop $I19, rx399_bstack
    if_null rx399_cstack, rx399_cstack_done
    unless rx399_cstack, rx399_cstack_done
    dec $I19
    set $P11, rx399_cstack[$I19]
  rx399_cstack_done:
    pop rx399_rep, rx399_bstack
    pop rx399_pos, rx399_bstack
    pop $I19, rx399_bstack
    lt rx399_pos, -1, rx399_done
    lt rx399_pos, 0, rx399_fail
    eq $I19, 0, rx399_fail
    if_null rx399_cstack, rx399_jump
    elements $I18, rx399_bstack
    le $I18, 0, rx399_cut
    dec $I18
    set $I18, rx399_bstack[$I18]
  rx399_cut:
    assign rx399_cstack, $I18
  rx399_jump:
    jump $I19
  rx399_done:
    rx399_cur."!cursor_fail"()
    .return (rx399_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "109_1337966799.879_caps"  :subid("514_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 944
    new $P106, "Hash"
    set $P106["sym"], 0
    set $P106["package_def"], 0
    .return ($P106)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "109_1337966799.879_nfa"  :subid("515_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 944
    new $P106, "ResizablePMCArray"
    new $P107, "ResizablePMCArray"
    push $P107, 1
    push $P107, 0
    push $P107, 2
    new $P108, "ResizablePMCArray"
    push $P108, 1
    push $P108, 0
    push $P108, 3
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 107
    push $P109, 4
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 110
    push $P110, 5
    new $P111, "ResizablePMCArray"
    push $P111, 2
    push $P111, 111
    push $P111, 6
    new $P112, "ResizablePMCArray"
    push $P112, 2
    push $P112, 119
    push $P112, 7
    new $P113, "ResizablePMCArray"
    push $P113, 2
    push $P113, 104
    push $P113, 8
    new $P114, "ResizablePMCArray"
    push $P114, 2
    push $P114, 111
    push $P114, 9
    new $P115, "ResizablePMCArray"
    push $P115, 2
    push $P115, 119
    push $P115, 10
    new $P116, "ResizablePMCArray"
    push $P116, 8
    push $P116, "package_def"
    push $P116, 0
    new $P117, "ResizablePMCArray"
    push $P117, $P106
    push $P117, $P107
    push $P117, $P108
    push $P117, $P109
    push $P117, $P110
    push $P117, $P111
    push $P117, $P112
    push $P117, $P113
    push $P117, $P114
    push $P117, $P115
    push $P117, $P116
    .return ($P117)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<class>"  :subid("110_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1851
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 949
    .lex "self", param_1851
.annotate 'line', 950
    new $P103, "Undef"
    set $P1852, $P103
    .lex "$*OUTERPACKAGE", $P1852
.annotate 'line', 951
    new $P104, "Undef"
    set $P1853, $P104
    .lex "$*PKGDECL", $P1853
    .local pmc self
    find_lex $P105, "self"
    set self, $P105
    .lex unicode:"$\x{a2}", $P1854
    .lex "$/", $P1855
.annotate 'line', 949
    .local string rx403_tgt
    .local int rx403_pos
    .local int rx403_off
    .local int rx403_eos
    .local int rx403_rep
    .local pmc rx403_cur
    .local pmc rx403_curclass
    .local pmc rx403_bstack
    .local pmc rx403_cstack
    (rx403_cur, rx403_tgt, rx403_pos, rx403_curclass, rx403_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx403_cur
    length rx403_eos, rx403_tgt
    eq $I19, 1, rx403_restart
    repr_get_attr_int $I11, self, rx403_curclass, "$!from"
    ne $I11, -1, rxscan404_done
    goto rxscan404_scan
  rxscan404_loop:
    inc rx403_pos
    gt rx403_pos, rx403_eos, rx403_fail
    repr_bind_attr_int rx403_cur, rx403_curclass, "$!from", rx403_pos
  rxscan404_scan:
    nqp_rxmark rx403_bstack, rxscan404_loop, rx403_pos, 0
  rxscan404_done:
    repr_bind_attr_int rx403_cur, rx403_curclass, "$!pos", rx403_pos
    store_lex unicode:"$\x{a2}", rx403_cur
.annotate 'line', 950
    find_dynamic_lex $P108, "$*PACKAGE"
    unless_null $P108, vivify_1260
    get_hll_global $P106, "GLOBAL"
    get_who $P107, $P106
    set $P108, $P107["$PACKAGE"]
    unless_null $P108, vivify_1261
    die "Contextual $*PACKAGE not found"
  vivify_1261:
  vivify_1260:
    set $P1852, $P108
.annotate 'line', 949
    repr_bind_attr_int rx403_cur, rx403_curclass, "$!pos", rx403_pos
    store_lex unicode:"$\x{a2}", rx403_cur
.annotate 'line', 951
    new $P109, "String"
    assign $P109, "class"
    set $P1853, $P109
.annotate 'line', 949
    nqp_rxmark rx403_bstack, rxcap405_fail, rx403_pos, 0
    add $I11, rx403_pos, 5
    gt $I11, rx403_eos, rx403_fail
    substr $S10, rx403_tgt, rx403_pos, 5
    ne $S10, ucs4:"class", rx403_fail
    add rx403_pos, 5
    nqp_rxpeek $I19, rx403_bstack, rxcap405_fail
    inc $I19
    set $I11, rx403_bstack[$I19]
    $P11 = rx403_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx403_pos)
    rx403_cstack = rx403_cur."!cursor_capture"($P11, "sym")
    goto rxcap405_done
  rxcap405_fail:
    goto rx403_fail
  rxcap405_done:
    repr_bind_attr_int rx403_cur, rx403_curclass, "$!pos", rx403_pos
    $P11 = rx403_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx403_curclass, "$!pos"
    lt $I11, 0, rx403_fail
    nqp_rxmark rx403_bstack, rxsubrule406_pass, -1, 0
  rxsubrule406_pass:
    rx403_cstack = rx403_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx403_pos, $P11, rx403_curclass, "$!pos"
    rx403_cur."!cursor_pass"(rx403_pos, "package_declarator:sym<class>", 'backtrack'=>1)
    .return (rx403_cur)
  rx403_restart:
    repr_get_attr_obj rx403_cstack, rx403_cur, rx403_curclass, "$!cstack"
  rx403_fail:
    unless rx403_bstack, rx403_done
    pop $I19, rx403_bstack
    if_null rx403_cstack, rx403_cstack_done
    unless rx403_cstack, rx403_cstack_done
    dec $I19
    set $P11, rx403_cstack[$I19]
  rx403_cstack_done:
    pop rx403_rep, rx403_bstack
    pop rx403_pos, rx403_bstack
    pop $I19, rx403_bstack
    lt rx403_pos, -1, rx403_done
    lt rx403_pos, 0, rx403_fail
    eq $I19, 0, rx403_fail
    if_null rx403_cstack, rx403_jump
    elements $I18, rx403_bstack
    le $I18, 0, rx403_cut
    dec $I18
    set $I18, rx403_bstack[$I18]
  rx403_cut:
    assign rx403_cstack, $I18
  rx403_jump:
    jump $I19
  rx403_done:
    rx403_cur."!cursor_fail"()
    .return (rx403_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "110_1337966799.879_caps"  :subid("516_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 949
    new $P106, "Hash"
    set $P106["sym"], 0
    set $P106["package_def"], 0
    .return ($P106)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "110_1337966799.879_nfa"  :subid("517_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 949
    new $P106, "ResizablePMCArray"
    new $P107, "ResizablePMCArray"
    push $P107, 1
    push $P107, 0
    push $P107, 2
    new $P108, "ResizablePMCArray"
    push $P108, 1
    push $P108, 0
    push $P108, 3
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 99
    push $P109, 4
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 108
    push $P110, 5
    new $P111, "ResizablePMCArray"
    push $P111, 2
    push $P111, 97
    push $P111, 6
    new $P112, "ResizablePMCArray"
    push $P112, 2
    push $P112, 115
    push $P112, 7
    new $P113, "ResizablePMCArray"
    push $P113, 2
    push $P113, 115
    push $P113, 8
    new $P114, "ResizablePMCArray"
    push $P114, 8
    push $P114, "package_def"
    push $P114, 0
    new $P115, "ResizablePMCArray"
    push $P115, $P106
    push $P115, $P107
    push $P115, $P108
    push $P115, $P109
    push $P115, $P110
    push $P115, $P111
    push $P115, $P112
    push $P115, $P113
    push $P115, $P114
    .return ($P115)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<grammar>"  :subid("111_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1859
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 954
    .lex "self", param_1859
.annotate 'line', 955
    new $P103, "Undef"
    set $P1860, $P103
    .lex "$*OUTERPACKAGE", $P1860
.annotate 'line', 956
    new $P104, "Undef"
    set $P1861, $P104
    .lex "$*PKGDECL", $P1861
    .local pmc self
    find_lex $P105, "self"
    set self, $P105
    .lex unicode:"$\x{a2}", $P1862
    .lex "$/", $P1863
.annotate 'line', 954
    .local string rx407_tgt
    .local int rx407_pos
    .local int rx407_off
    .local int rx407_eos
    .local int rx407_rep
    .local pmc rx407_cur
    .local pmc rx407_curclass
    .local pmc rx407_bstack
    .local pmc rx407_cstack
    (rx407_cur, rx407_tgt, rx407_pos, rx407_curclass, rx407_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx407_cur
    length rx407_eos, rx407_tgt
    eq $I19, 1, rx407_restart
    repr_get_attr_int $I11, self, rx407_curclass, "$!from"
    ne $I11, -1, rxscan408_done
    goto rxscan408_scan
  rxscan408_loop:
    inc rx407_pos
    gt rx407_pos, rx407_eos, rx407_fail
    repr_bind_attr_int rx407_cur, rx407_curclass, "$!from", rx407_pos
  rxscan408_scan:
    nqp_rxmark rx407_bstack, rxscan408_loop, rx407_pos, 0
  rxscan408_done:
    repr_bind_attr_int rx407_cur, rx407_curclass, "$!pos", rx407_pos
    store_lex unicode:"$\x{a2}", rx407_cur
.annotate 'line', 955
    find_dynamic_lex $P108, "$*PACKAGE"
    unless_null $P108, vivify_1262
    get_hll_global $P106, "GLOBAL"
    get_who $P107, $P106
    set $P108, $P107["$PACKAGE"]
    unless_null $P108, vivify_1263
    die "Contextual $*PACKAGE not found"
  vivify_1263:
  vivify_1262:
    set $P1860, $P108
.annotate 'line', 954
    repr_bind_attr_int rx407_cur, rx407_curclass, "$!pos", rx407_pos
    store_lex unicode:"$\x{a2}", rx407_cur
.annotate 'line', 956
    new $P109, "String"
    assign $P109, "grammar"
    set $P1861, $P109
.annotate 'line', 954
    nqp_rxmark rx407_bstack, rxcap409_fail, rx407_pos, 0
    add $I11, rx407_pos, 7
    gt $I11, rx407_eos, rx407_fail
    substr $S10, rx407_tgt, rx407_pos, 7
    ne $S10, ucs4:"grammar", rx407_fail
    add rx407_pos, 7
    nqp_rxpeek $I19, rx407_bstack, rxcap409_fail
    inc $I19
    set $I11, rx407_bstack[$I19]
    $P11 = rx407_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx407_pos)
    rx407_cstack = rx407_cur."!cursor_capture"($P11, "sym")
    goto rxcap409_done
  rxcap409_fail:
    goto rx407_fail
  rxcap409_done:
    repr_bind_attr_int rx407_cur, rx407_curclass, "$!pos", rx407_pos
    $P11 = rx407_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx407_curclass, "$!pos"
    lt $I11, 0, rx407_fail
    nqp_rxmark rx407_bstack, rxsubrule410_pass, -1, 0
  rxsubrule410_pass:
    rx407_cstack = rx407_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx407_pos, $P11, rx407_curclass, "$!pos"
    rx407_cur."!cursor_pass"(rx407_pos, "package_declarator:sym<grammar>", 'backtrack'=>1)
    .return (rx407_cur)
  rx407_restart:
    repr_get_attr_obj rx407_cstack, rx407_cur, rx407_curclass, "$!cstack"
  rx407_fail:
    unless rx407_bstack, rx407_done
    pop $I19, rx407_bstack
    if_null rx407_cstack, rx407_cstack_done
    unless rx407_cstack, rx407_cstack_done
    dec $I19
    set $P11, rx407_cstack[$I19]
  rx407_cstack_done:
    pop rx407_rep, rx407_bstack
    pop rx407_pos, rx407_bstack
    pop $I19, rx407_bstack
    lt rx407_pos, -1, rx407_done
    lt rx407_pos, 0, rx407_fail
    eq $I19, 0, rx407_fail
    if_null rx407_cstack, rx407_jump
    elements $I18, rx407_bstack
    le $I18, 0, rx407_cut
    dec $I18
    set $I18, rx407_bstack[$I18]
  rx407_cut:
    assign rx407_cstack, $I18
  rx407_jump:
    jump $I19
  rx407_done:
    rx407_cur."!cursor_fail"()
    .return (rx407_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "111_1337966799.879_caps"  :subid("518_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 954
    new $P106, "Hash"
    set $P106["sym"], 0
    set $P106["package_def"], 0
    .return ($P106)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "111_1337966799.879_nfa"  :subid("519_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 954
    new $P106, "ResizablePMCArray"
    new $P107, "ResizablePMCArray"
    push $P107, 1
    push $P107, 0
    push $P107, 2
    new $P108, "ResizablePMCArray"
    push $P108, 1
    push $P108, 0
    push $P108, 3
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 103
    push $P109, 4
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 114
    push $P110, 5
    new $P111, "ResizablePMCArray"
    push $P111, 2
    push $P111, 97
    push $P111, 6
    new $P112, "ResizablePMCArray"
    push $P112, 2
    push $P112, 109
    push $P112, 7
    new $P113, "ResizablePMCArray"
    push $P113, 2
    push $P113, 109
    push $P113, 8
    new $P114, "ResizablePMCArray"
    push $P114, 2
    push $P114, 97
    push $P114, 9
    new $P115, "ResizablePMCArray"
    push $P115, 2
    push $P115, 114
    push $P115, 10
    new $P116, "ResizablePMCArray"
    push $P116, 8
    push $P116, "package_def"
    push $P116, 0
    new $P117, "ResizablePMCArray"
    push $P117, $P106
    push $P117, $P107
    push $P117, $P108
    push $P117, $P109
    push $P117, $P110
    push $P117, $P111
    push $P117, $P112
    push $P117, $P113
    push $P117, $P114
    push $P117, $P115
    push $P117, $P116
    .return ($P117)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<role>"  :subid("112_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1867
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 959
    .lex "self", param_1867
.annotate 'line', 960
    new $P103, "Undef"
    set $P1868, $P103
    .lex "$*OUTERPACKAGE", $P1868
.annotate 'line', 961
    new $P104, "Undef"
    set $P1869, $P104
    .lex "$*PKGDECL", $P1869
    .local pmc self
    find_lex $P105, "self"
    set self, $P105
    .lex unicode:"$\x{a2}", $P1870
    .lex "$/", $P1871
.annotate 'line', 959
    .local string rx411_tgt
    .local int rx411_pos
    .local int rx411_off
    .local int rx411_eos
    .local int rx411_rep
    .local pmc rx411_cur
    .local pmc rx411_curclass
    .local pmc rx411_bstack
    .local pmc rx411_cstack
    (rx411_cur, rx411_tgt, rx411_pos, rx411_curclass, rx411_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx411_cur
    length rx411_eos, rx411_tgt
    eq $I19, 1, rx411_restart
    repr_get_attr_int $I11, self, rx411_curclass, "$!from"
    ne $I11, -1, rxscan412_done
    goto rxscan412_scan
  rxscan412_loop:
    inc rx411_pos
    gt rx411_pos, rx411_eos, rx411_fail
    repr_bind_attr_int rx411_cur, rx411_curclass, "$!from", rx411_pos
  rxscan412_scan:
    nqp_rxmark rx411_bstack, rxscan412_loop, rx411_pos, 0
  rxscan412_done:
    repr_bind_attr_int rx411_cur, rx411_curclass, "$!pos", rx411_pos
    store_lex unicode:"$\x{a2}", rx411_cur
.annotate 'line', 960
    find_dynamic_lex $P108, "$*PACKAGE"
    unless_null $P108, vivify_1264
    get_hll_global $P106, "GLOBAL"
    get_who $P107, $P106
    set $P108, $P107["$PACKAGE"]
    unless_null $P108, vivify_1265
    die "Contextual $*PACKAGE not found"
  vivify_1265:
  vivify_1264:
    set $P1868, $P108
.annotate 'line', 959
    repr_bind_attr_int rx411_cur, rx411_curclass, "$!pos", rx411_pos
    store_lex unicode:"$\x{a2}", rx411_cur
.annotate 'line', 961
    new $P109, "String"
    assign $P109, "role"
    set $P1869, $P109
.annotate 'line', 959
    nqp_rxmark rx411_bstack, rxcap413_fail, rx411_pos, 0
    add $I11, rx411_pos, 4
    gt $I11, rx411_eos, rx411_fail
    substr $S10, rx411_tgt, rx411_pos, 4
    ne $S10, ucs4:"role", rx411_fail
    add rx411_pos, 4
    nqp_rxpeek $I19, rx411_bstack, rxcap413_fail
    inc $I19
    set $I11, rx411_bstack[$I19]
    $P11 = rx411_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx411_pos)
    rx411_cstack = rx411_cur."!cursor_capture"($P11, "sym")
    goto rxcap413_done
  rxcap413_fail:
    goto rx411_fail
  rxcap413_done:
    repr_bind_attr_int rx411_cur, rx411_curclass, "$!pos", rx411_pos
    $P11 = rx411_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx411_curclass, "$!pos"
    lt $I11, 0, rx411_fail
    nqp_rxmark rx411_bstack, rxsubrule414_pass, -1, 0
  rxsubrule414_pass:
    rx411_cstack = rx411_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx411_pos, $P11, rx411_curclass, "$!pos"
    rx411_cur."!cursor_pass"(rx411_pos, "package_declarator:sym<role>", 'backtrack'=>1)
    .return (rx411_cur)
  rx411_restart:
    repr_get_attr_obj rx411_cstack, rx411_cur, rx411_curclass, "$!cstack"
  rx411_fail:
    unless rx411_bstack, rx411_done
    pop $I19, rx411_bstack
    if_null rx411_cstack, rx411_cstack_done
    unless rx411_cstack, rx411_cstack_done
    dec $I19
    set $P11, rx411_cstack[$I19]
  rx411_cstack_done:
    pop rx411_rep, rx411_bstack
    pop rx411_pos, rx411_bstack
    pop $I19, rx411_bstack
    lt rx411_pos, -1, rx411_done
    lt rx411_pos, 0, rx411_fail
    eq $I19, 0, rx411_fail
    if_null rx411_cstack, rx411_jump
    elements $I18, rx411_bstack
    le $I18, 0, rx411_cut
    dec $I18
    set $I18, rx411_bstack[$I18]
  rx411_cut:
    assign rx411_cstack, $I18
  rx411_jump:
    jump $I19
  rx411_done:
    rx411_cur."!cursor_fail"()
    .return (rx411_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "112_1337966799.879_caps"  :subid("520_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 959
    new $P106, "Hash"
    set $P106["sym"], 0
    set $P106["package_def"], 0
    .return ($P106)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "112_1337966799.879_nfa"  :subid("521_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 959
    new $P106, "ResizablePMCArray"
    new $P107, "ResizablePMCArray"
    push $P107, 1
    push $P107, 0
    push $P107, 2
    new $P108, "ResizablePMCArray"
    push $P108, 1
    push $P108, 0
    push $P108, 3
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 114
    push $P109, 4
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 111
    push $P110, 5
    new $P111, "ResizablePMCArray"
    push $P111, 2
    push $P111, 108
    push $P111, 6
    new $P112, "ResizablePMCArray"
    push $P112, 2
    push $P112, 101
    push $P112, 7
    new $P113, "ResizablePMCArray"
    push $P113, 8
    push $P113, "package_def"
    push $P113, 0
    new $P114, "ResizablePMCArray"
    push $P114, $P106
    push $P114, $P107
    push $P114, $P108
    push $P114, $P109
    push $P114, $P110
    push $P114, $P111
    push $P114, $P112
    push $P114, $P113
    .return ($P114)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<native>"  :subid("113_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1875
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 964
    .lex "self", param_1875
.annotate 'line', 965
    new $P103, "Undef"
    set $P1876, $P103
    .lex "$*OUTERPACKAGE", $P1876
.annotate 'line', 966
    new $P104, "Undef"
    set $P1877, $P104
    .lex "$*PKGDECL", $P1877
    .local pmc self
    find_lex $P105, "self"
    set self, $P105
    .lex unicode:"$\x{a2}", $P1878
    .lex "$/", $P1879
.annotate 'line', 964
    .local string rx415_tgt
    .local int rx415_pos
    .local int rx415_off
    .local int rx415_eos
    .local int rx415_rep
    .local pmc rx415_cur
    .local pmc rx415_curclass
    .local pmc rx415_bstack
    .local pmc rx415_cstack
    (rx415_cur, rx415_tgt, rx415_pos, rx415_curclass, rx415_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx415_cur
    length rx415_eos, rx415_tgt
    eq $I19, 1, rx415_restart
    repr_get_attr_int $I11, self, rx415_curclass, "$!from"
    ne $I11, -1, rxscan416_done
    goto rxscan416_scan
  rxscan416_loop:
    inc rx415_pos
    gt rx415_pos, rx415_eos, rx415_fail
    repr_bind_attr_int rx415_cur, rx415_curclass, "$!from", rx415_pos
  rxscan416_scan:
    nqp_rxmark rx415_bstack, rxscan416_loop, rx415_pos, 0
  rxscan416_done:
    repr_bind_attr_int rx415_cur, rx415_curclass, "$!pos", rx415_pos
    store_lex unicode:"$\x{a2}", rx415_cur
.annotate 'line', 965
    find_dynamic_lex $P108, "$*PACKAGE"
    unless_null $P108, vivify_1266
    get_hll_global $P106, "GLOBAL"
    get_who $P107, $P106
    set $P108, $P107["$PACKAGE"]
    unless_null $P108, vivify_1267
    die "Contextual $*PACKAGE not found"
  vivify_1267:
  vivify_1266:
    set $P1876, $P108
.annotate 'line', 964
    repr_bind_attr_int rx415_cur, rx415_curclass, "$!pos", rx415_pos
    store_lex unicode:"$\x{a2}", rx415_cur
.annotate 'line', 966
    new $P109, "String"
    assign $P109, "native"
    set $P1877, $P109
.annotate 'line', 964
    nqp_rxmark rx415_bstack, rxcap417_fail, rx415_pos, 0
    add $I11, rx415_pos, 6
    gt $I11, rx415_eos, rx415_fail
    substr $S10, rx415_tgt, rx415_pos, 6
    ne $S10, ucs4:"native", rx415_fail
    add rx415_pos, 6
    nqp_rxpeek $I19, rx415_bstack, rxcap417_fail
    inc $I19
    set $I11, rx415_bstack[$I19]
    $P11 = rx415_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx415_pos)
    rx415_cstack = rx415_cur."!cursor_capture"($P11, "sym")
    goto rxcap417_done
  rxcap417_fail:
    goto rx415_fail
  rxcap417_done:
    repr_bind_attr_int rx415_cur, rx415_curclass, "$!pos", rx415_pos
    $P11 = rx415_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx415_curclass, "$!pos"
    lt $I11, 0, rx415_fail
    nqp_rxmark rx415_bstack, rxsubrule418_pass, -1, 0
  rxsubrule418_pass:
    rx415_cstack = rx415_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx415_pos, $P11, rx415_curclass, "$!pos"
    rx415_cur."!cursor_pass"(rx415_pos, "package_declarator:sym<native>", 'backtrack'=>1)
    .return (rx415_cur)
  rx415_restart:
    repr_get_attr_obj rx415_cstack, rx415_cur, rx415_curclass, "$!cstack"
  rx415_fail:
    unless rx415_bstack, rx415_done
    pop $I19, rx415_bstack
    if_null rx415_cstack, rx415_cstack_done
    unless rx415_cstack, rx415_cstack_done
    dec $I19
    set $P11, rx415_cstack[$I19]
  rx415_cstack_done:
    pop rx415_rep, rx415_bstack
    pop rx415_pos, rx415_bstack
    pop $I19, rx415_bstack
    lt rx415_pos, -1, rx415_done
    lt rx415_pos, 0, rx415_fail
    eq $I19, 0, rx415_fail
    if_null rx415_cstack, rx415_jump
    elements $I18, rx415_bstack
    le $I18, 0, rx415_cut
    dec $I18
    set $I18, rx415_bstack[$I18]
  rx415_cut:
    assign rx415_cstack, $I18
  rx415_jump:
    jump $I19
  rx415_done:
    rx415_cur."!cursor_fail"()
    .return (rx415_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "113_1337966799.879_caps"  :subid("522_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 964
    new $P106, "Hash"
    set $P106["sym"], 0
    set $P106["package_def"], 0
    .return ($P106)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "113_1337966799.879_nfa"  :subid("523_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 964
    new $P106, "ResizablePMCArray"
    new $P107, "ResizablePMCArray"
    push $P107, 1
    push $P107, 0
    push $P107, 2
    new $P108, "ResizablePMCArray"
    push $P108, 1
    push $P108, 0
    push $P108, 3
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 110
    push $P109, 4
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 97
    push $P110, 5
    new $P111, "ResizablePMCArray"
    push $P111, 2
    push $P111, 116
    push $P111, 6
    new $P112, "ResizablePMCArray"
    push $P112, 2
    push $P112, 105
    push $P112, 7
    new $P113, "ResizablePMCArray"
    push $P113, 2
    push $P113, 118
    push $P113, 8
    new $P114, "ResizablePMCArray"
    push $P114, 2
    push $P114, 101
    push $P114, 9
    new $P115, "ResizablePMCArray"
    push $P115, 8
    push $P115, "package_def"
    push $P115, 0
    new $P116, "ResizablePMCArray"
    push $P116, $P106
    push $P116, $P107
    push $P116, $P108
    push $P116, $P109
    push $P116, $P110
    push $P116, $P111
    push $P116, $P112
    push $P116, $P113
    push $P116, $P114
    push $P116, $P115
    .return ($P116)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<stub>"  :subid("114_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1883
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 969
    .lex "self", param_1883
.annotate 'line', 970
    new $P103, "Undef"
    set $P1884, $P103
    .lex "$*OUTERPACKAGE", $P1884
.annotate 'line', 971
    new $P104, "Undef"
    set $P1885, $P104
    .lex "$*PKGDECL", $P1885
    .local pmc self
    find_lex $P105, "self"
    set self, $P105
    .lex unicode:"$\x{a2}", $P1886
    .lex "$/", $P1887
.annotate 'line', 969
    .local string rx419_tgt
    .local int rx419_pos
    .local int rx419_off
    .local int rx419_eos
    .local int rx419_rep
    .local pmc rx419_cur
    .local pmc rx419_curclass
    .local pmc rx419_bstack
    .local pmc rx419_cstack
    (rx419_cur, rx419_tgt, rx419_pos, rx419_curclass, rx419_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx419_cur
    length rx419_eos, rx419_tgt
    eq $I19, 1, rx419_restart
    repr_get_attr_int $I11, self, rx419_curclass, "$!from"
    ne $I11, -1, rxscan420_done
    goto rxscan420_scan
  rxscan420_loop:
    inc rx419_pos
    gt rx419_pos, rx419_eos, rx419_fail
    repr_bind_attr_int rx419_cur, rx419_curclass, "$!from", rx419_pos
  rxscan420_scan:
    nqp_rxmark rx419_bstack, rxscan420_loop, rx419_pos, 0
  rxscan420_done:
    repr_bind_attr_int rx419_cur, rx419_curclass, "$!pos", rx419_pos
    store_lex unicode:"$\x{a2}", rx419_cur
.annotate 'line', 970
    find_dynamic_lex $P108, "$*PACKAGE"
    unless_null $P108, vivify_1268
    get_hll_global $P106, "GLOBAL"
    get_who $P107, $P106
    set $P108, $P107["$PACKAGE"]
    unless_null $P108, vivify_1269
    die "Contextual $*PACKAGE not found"
  vivify_1269:
  vivify_1268:
    set $P1884, $P108
.annotate 'line', 969
    repr_bind_attr_int rx419_cur, rx419_curclass, "$!pos", rx419_pos
    store_lex unicode:"$\x{a2}", rx419_cur
.annotate 'line', 971
    new $P109, "String"
    assign $P109, "stub"
    set $P1885, $P109
.annotate 'line', 969
    nqp_rxmark rx419_bstack, rxcap421_fail, rx419_pos, 0
    add $I11, rx419_pos, 4
    gt $I11, rx419_eos, rx419_fail
    substr $S10, rx419_tgt, rx419_pos, 4
    ne $S10, ucs4:"stub", rx419_fail
    add rx419_pos, 4
    nqp_rxpeek $I19, rx419_bstack, rxcap421_fail
    inc $I19
    set $I11, rx419_bstack[$I19]
    $P11 = rx419_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx419_pos)
    rx419_cstack = rx419_cur."!cursor_capture"($P11, "sym")
    goto rxcap421_done
  rxcap421_fail:
    goto rx419_fail
  rxcap421_done:
    repr_bind_attr_int rx419_cur, rx419_curclass, "$!pos", rx419_pos
    $P11 = rx419_cur."ws"()
    repr_get_attr_int $I11, $P11, rx419_curclass, "$!pos"
    lt $I11, 0, rx419_fail
    repr_get_attr_int rx419_pos, $P11, rx419_curclass, "$!pos"
    repr_bind_attr_int rx419_cur, rx419_curclass, "$!pos", rx419_pos
    $P11 = rx419_cur."name"()
    repr_get_attr_int $I11, $P11, rx419_curclass, "$!pos"
    lt $I11, 0, rx419_fail
    nqp_rxmark rx419_bstack, rxsubrule423_pass, -1, 0
  rxsubrule423_pass:
    rx419_cstack = rx419_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx419_pos, $P11, rx419_curclass, "$!pos"
    repr_bind_attr_int rx419_cur, rx419_curclass, "$!pos", rx419_pos
    $P11 = rx419_cur."ws"()
    repr_get_attr_int $I11, $P11, rx419_curclass, "$!pos"
    lt $I11, 0, rx419_fail
    repr_get_attr_int rx419_pos, $P11, rx419_curclass, "$!pos"
    add $I11, rx419_pos, 9
    gt $I11, rx419_eos, rx419_fail
    substr $S10, rx419_tgt, rx419_pos, 9
    ne $S10, ucs4:"metaclass", rx419_fail
    add rx419_pos, 9
    repr_bind_attr_int rx419_cur, rx419_curclass, "$!pos", rx419_pos
    $P11 = rx419_cur."ws"()
    repr_get_attr_int $I11, $P11, rx419_curclass, "$!pos"
    lt $I11, 0, rx419_fail
    repr_get_attr_int rx419_pos, $P11, rx419_curclass, "$!pos"
    repr_bind_attr_int rx419_cur, rx419_curclass, "$!pos", rx419_pos
    $P11 = rx419_cur."name"()
    repr_get_attr_int $I11, $P11, rx419_curclass, "$!pos"
    lt $I11, 0, rx419_fail
    nqp_rxmark rx419_bstack, rxsubrule426_pass, -1, 0
  rxsubrule426_pass:
    rx419_cstack = rx419_cur."!cursor_capture"($P11, "metaclass")
    repr_get_attr_int rx419_pos, $P11, rx419_curclass, "$!pos"
    repr_bind_attr_int rx419_cur, rx419_curclass, "$!pos", rx419_pos
    $P11 = rx419_cur."ws"()
    repr_get_attr_int $I11, $P11, rx419_curclass, "$!pos"
    lt $I11, 0, rx419_fail
    repr_get_attr_int rx419_pos, $P11, rx419_curclass, "$!pos"
    add $I11, rx419_pos, 1
    gt $I11, rx419_eos, rx419_fail
    substr $S10, rx419_tgt, rx419_pos, 1
    ne $S10, ucs4:"{", rx419_fail
    add rx419_pos, 1
    repr_bind_attr_int rx419_cur, rx419_curclass, "$!pos", rx419_pos
    $P11 = rx419_cur."ws"()
    repr_get_attr_int $I11, $P11, rx419_curclass, "$!pos"
    lt $I11, 0, rx419_fail
    repr_get_attr_int rx419_pos, $P11, rx419_curclass, "$!pos"
    add $I11, rx419_pos, 3
    gt $I11, rx419_eos, rx419_fail
    substr $S10, rx419_tgt, rx419_pos, 3
    ne $S10, ucs4:"...", rx419_fail
    add rx419_pos, 3
    repr_bind_attr_int rx419_cur, rx419_curclass, "$!pos", rx419_pos
    $P11 = rx419_cur."ws"()
    repr_get_attr_int $I11, $P11, rx419_curclass, "$!pos"
    lt $I11, 0, rx419_fail
    repr_get_attr_int rx419_pos, $P11, rx419_curclass, "$!pos"
    add $I11, rx419_pos, 1
    gt $I11, rx419_eos, rx419_fail
    substr $S10, rx419_tgt, rx419_pos, 1
    ne $S10, ucs4:"}", rx419_fail
    add rx419_pos, 1
    repr_bind_attr_int rx419_cur, rx419_curclass, "$!pos", rx419_pos
    $P11 = rx419_cur."ws"()
    repr_get_attr_int $I11, $P11, rx419_curclass, "$!pos"
    lt $I11, 0, rx419_fail
    repr_get_attr_int rx419_pos, $P11, rx419_curclass, "$!pos"
    rx419_cur."!cursor_pass"(rx419_pos, "package_declarator:sym<stub>", 'backtrack'=>1)
    .return (rx419_cur)
  rx419_restart:
    repr_get_attr_obj rx419_cstack, rx419_cur, rx419_curclass, "$!cstack"
  rx419_fail:
    unless rx419_bstack, rx419_done
    pop $I19, rx419_bstack
    if_null rx419_cstack, rx419_cstack_done
    unless rx419_cstack, rx419_cstack_done
    dec $I19
    set $P11, rx419_cstack[$I19]
  rx419_cstack_done:
    pop rx419_rep, rx419_bstack
    pop rx419_pos, rx419_bstack
    pop $I19, rx419_bstack
    lt rx419_pos, -1, rx419_done
    lt rx419_pos, 0, rx419_fail
    eq $I19, 0, rx419_fail
    if_null rx419_cstack, rx419_jump
    elements $I18, rx419_bstack
    le $I18, 0, rx419_cut
    dec $I18
    set $I18, rx419_bstack[$I18]
  rx419_cut:
    assign rx419_cstack, $I18
  rx419_jump:
    jump $I19
  rx419_done:
    rx419_cur."!cursor_fail"()
    .return (rx419_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "114_1337966799.879_caps"  :subid("524_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 969
    new $P106, "Hash"
    set $P106["sym"], 0
    set $P106["name"], 0
    set $P106["metaclass"], 0
    .return ($P106)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "114_1337966799.879_nfa"  :subid("525_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 969
    new $P106, "ResizablePMCArray"
    new $P107, "ResizablePMCArray"
    push $P107, 1
    push $P107, 0
    push $P107, 2
    new $P108, "ResizablePMCArray"
    push $P108, 1
    push $P108, 0
    push $P108, 3
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 115
    push $P109, 4
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 116
    push $P110, 5
    new $P111, "ResizablePMCArray"
    push $P111, 2
    push $P111, 117
    push $P111, 6
    new $P112, "ResizablePMCArray"
    push $P112, 2
    push $P112, 98
    push $P112, 7
    new $P113, "ResizablePMCArray"
    push $P113, 0
    push $P113, 0
    push $P113, 0
    new $P114, "ResizablePMCArray"
    push $P114, $P106
    push $P114, $P107
    push $P114, $P108
    push $P114, $P109
    push $P114, $P110
    push $P114, $P111
    push $P114, $P112
    push $P114, $P113
    .return ($P114)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_def"  :subid("115_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1891
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 977
    .const 'Sub' $P1897 = "527_1337966799.879" 
    capture_lex $P1897
    .lex "self", param_1891
.annotate 'line', 978
    new $P103, "Undef"
    set $P1892, $P103
    .lex "$*PACKAGE", $P1892
    .local pmc self
    find_lex $P104, "self"
    set self, $P104
    .lex unicode:"$\x{a2}", $P1893
    .lex "$/", $P1894
.annotate 'line', 977
    .local string rx431_tgt
    .local int rx431_pos
    .local int rx431_off
    .local int rx431_eos
    .local int rx431_rep
    .local pmc rx431_cur
    .local pmc rx431_curclass
    .local pmc rx431_bstack
    .local pmc rx431_cstack
    (rx431_cur, rx431_tgt, rx431_pos, rx431_curclass, rx431_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx431_cur
    length rx431_eos, rx431_tgt
    eq $I19, 1, rx431_restart
    repr_get_attr_int $I11, self, rx431_curclass, "$!from"
    ne $I11, -1, rxscan432_done
    goto rxscan432_scan
  rxscan432_loop:
    inc rx431_pos
    gt rx431_pos, rx431_eos, rx431_fail
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!from", rx431_pos
  rxscan432_scan:
    nqp_rxmark rx431_bstack, rxscan432_loop, rx431_pos, 0
  rxscan432_done:
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!pos", rx431_pos
    $P11 = rx431_cur."ws"()
    repr_get_attr_int $I11, $P11, rx431_curclass, "$!pos"
    lt $I11, 0, rx431_fail
    repr_get_attr_int rx431_pos, $P11, rx431_curclass, "$!pos"
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!pos", rx431_pos
    store_lex unicode:"$\x{a2}", rx431_cur
    set $P108, $P1892
    unless_null $P108, vivify_1270
    get_hll_global $P106, "GLOBAL"
    get_who $P107, $P106
    set $P108, $P107["$PACKAGE"]
    unless_null $P108, vivify_1271
    die "Contextual $*PACKAGE not found"
  vivify_1271:
  vivify_1270:
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!pos", rx431_pos
    $P11 = rx431_cur."ws"()
    repr_get_attr_int $I11, $P11, rx431_curclass, "$!pos"
    lt $I11, 0, rx431_fail
    repr_get_attr_int rx431_pos, $P11, rx431_curclass, "$!pos"
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!pos", rx431_pos
    $P11 = rx431_cur."name"()
    repr_get_attr_int $I11, $P11, rx431_curclass, "$!pos"
    lt $I11, 0, rx431_fail
    nqp_rxmark rx431_bstack, rxsubrule435_pass, -1, 0
  rxsubrule435_pass:
    rx431_cstack = rx431_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx431_pos, $P11, rx431_curclass, "$!pos"
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!pos", rx431_pos
    $P11 = rx431_cur."ws"()
    repr_get_attr_int $I11, $P11, rx431_curclass, "$!pos"
    lt $I11, 0, rx431_fail
    repr_get_attr_int rx431_pos, $P11, rx431_curclass, "$!pos"
  # rx rxquantr437 ** 0..1
    nqp_rxmark rx431_bstack, rxquantr437_done, rx431_pos, 0
  rxquantr437_loop:
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!pos", rx431_pos
    $P11 = rx431_cur."ws"()
    repr_get_attr_int $I11, $P11, rx431_curclass, "$!pos"
    lt $I11, 0, rx431_fail
    repr_get_attr_int rx431_pos, $P11, rx431_curclass, "$!pos"
    add $I11, rx431_pos, 2
    gt $I11, rx431_eos, rx431_fail
    substr $S10, rx431_tgt, rx431_pos, 2
    ne $S10, ucs4:"is", rx431_fail
    add rx431_pos, 2
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!pos", rx431_pos
    $P11 = rx431_cur."ws"()
    repr_get_attr_int $I11, $P11, rx431_curclass, "$!pos"
    lt $I11, 0, rx431_fail
    repr_get_attr_int rx431_pos, $P11, rx431_curclass, "$!pos"
    add $I11, rx431_pos, 5
    gt $I11, rx431_eos, rx431_fail
    substr $S10, rx431_tgt, rx431_pos, 5
    ne $S10, ucs4:"repr(", rx431_fail
    add rx431_pos, 5
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!pos", rx431_pos
    $P11 = rx431_cur."ws"()
    repr_get_attr_int $I11, $P11, rx431_curclass, "$!pos"
    lt $I11, 0, rx431_fail
    repr_get_attr_int rx431_pos, $P11, rx431_curclass, "$!pos"
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!pos", rx431_pos
    $P11 = rx431_cur."quote_EXPR"()
    repr_get_attr_int $I11, $P11, rx431_curclass, "$!pos"
    lt $I11, 0, rx431_fail
    nqp_rxmark rx431_bstack, rxsubrule441_pass, -1, 0
  rxsubrule441_pass:
    rx431_cstack = rx431_cur."!cursor_capture"($P11, "repr")
    repr_get_attr_int rx431_pos, $P11, rx431_curclass, "$!pos"
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!pos", rx431_pos
    $P11 = rx431_cur."ws"()
    repr_get_attr_int $I11, $P11, rx431_curclass, "$!pos"
    lt $I11, 0, rx431_fail
    repr_get_attr_int rx431_pos, $P11, rx431_curclass, "$!pos"
    add $I11, rx431_pos, 1
    gt $I11, rx431_eos, rx431_fail
    substr $S10, rx431_tgt, rx431_pos, 1
    ne $S10, ucs4:")", rx431_fail
    add rx431_pos, 1
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!pos", rx431_pos
    $P11 = rx431_cur."ws"()
    repr_get_attr_int $I11, $P11, rx431_curclass, "$!pos"
    lt $I11, 0, rx431_fail
    repr_get_attr_int rx431_pos, $P11, rx431_curclass, "$!pos"
    nqp_rxpeek $I19, rx431_bstack, rxquantr437_done
    inc $I19
    inc $I19
    set rx431_rep, rx431_bstack[$I19]
    nqp_rxcommit rx431_bstack, rxquantr437_done
    inc rx431_rep
  rxquantr437_done:
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!pos", rx431_pos
    $P11 = rx431_cur."ws"()
    repr_get_attr_int $I11, $P11, rx431_curclass, "$!pos"
    lt $I11, 0, rx431_fail
    repr_get_attr_int rx431_pos, $P11, rx431_curclass, "$!pos"
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!pos", rx431_pos
    store_lex unicode:"$\x{a2}", rx431_cur
    find_lex $P117, unicode:"$\x{a2}"
    $P118 = $P117."MATCH"()
    store_lex "$/", $P118
.annotate 'line', 983
    .const 'Sub' $P1897 = "527_1337966799.879" 
    capture_lex $P1897
    $P120 = $P1897()
.annotate 'line', 977
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!pos", rx431_pos
    $P11 = rx431_cur."ws"()
    repr_get_attr_int $I11, $P11, rx431_curclass, "$!pos"
    lt $I11, 0, rx431_fail
    repr_get_attr_int rx431_pos, $P11, rx431_curclass, "$!pos"
  # rx rxquantr446 ** 0..1
    nqp_rxmark rx431_bstack, rxquantr446_done, rx431_pos, 0
  rxquantr446_loop:
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!pos", rx431_pos
    $P11 = rx431_cur."ws"()
    repr_get_attr_int $I11, $P11, rx431_curclass, "$!pos"
    lt $I11, 0, rx431_fail
    repr_get_attr_int rx431_pos, $P11, rx431_curclass, "$!pos"
    add $I11, rx431_pos, 2
    gt $I11, rx431_eos, rx431_fail
    substr $S10, rx431_tgt, rx431_pos, 2
    ne $S10, ucs4:"is", rx431_fail
    add rx431_pos, 2
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!pos", rx431_pos
    $P11 = rx431_cur."ws"()
    repr_get_attr_int $I11, $P11, rx431_curclass, "$!pos"
    lt $I11, 0, rx431_fail
    repr_get_attr_int rx431_pos, $P11, rx431_curclass, "$!pos"
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!pos", rx431_pos
    $P11 = rx431_cur."name"()
    repr_get_attr_int $I11, $P11, rx431_curclass, "$!pos"
    lt $I11, 0, rx431_fail
    nqp_rxmark rx431_bstack, rxsubrule449_pass, -1, 0
  rxsubrule449_pass:
    rx431_cstack = rx431_cur."!cursor_capture"($P11, "parent")
    repr_get_attr_int rx431_pos, $P11, rx431_curclass, "$!pos"
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!pos", rx431_pos
    $P11 = rx431_cur."ws"()
    repr_get_attr_int $I11, $P11, rx431_curclass, "$!pos"
    lt $I11, 0, rx431_fail
    repr_get_attr_int rx431_pos, $P11, rx431_curclass, "$!pos"
    nqp_rxpeek $I19, rx431_bstack, rxquantr446_done
    inc $I19
    inc $I19
    set rx431_rep, rx431_bstack[$I19]
    nqp_rxcommit rx431_bstack, rxquantr446_done
    inc rx431_rep
  rxquantr446_done:
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!pos", rx431_pos
    $P11 = rx431_cur."ws"()
    repr_get_attr_int $I11, $P11, rx431_curclass, "$!pos"
    lt $I11, 0, rx431_fail
    repr_get_attr_int rx431_pos, $P11, rx431_curclass, "$!pos"
  # rx rxquantr452 ** 0..-1
    nqp_rxmark rx431_bstack, rxquantr452_done, rx431_pos, 0
  rxquantr452_loop:
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!pos", rx431_pos
    $P11 = rx431_cur."ws"()
    repr_get_attr_int $I11, $P11, rx431_curclass, "$!pos"
    lt $I11, 0, rx431_fail
    repr_get_attr_int rx431_pos, $P11, rx431_curclass, "$!pos"
    add $I11, rx431_pos, 4
    gt $I11, rx431_eos, rx431_fail
    substr $S10, rx431_tgt, rx431_pos, 4
    ne $S10, ucs4:"does", rx431_fail
    add rx431_pos, 4
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!pos", rx431_pos
    $P11 = rx431_cur."ws"()
    repr_get_attr_int $I11, $P11, rx431_curclass, "$!pos"
    lt $I11, 0, rx431_fail
    repr_get_attr_int rx431_pos, $P11, rx431_curclass, "$!pos"
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!pos", rx431_pos
    $P11 = rx431_cur."name"()
    repr_get_attr_int $I11, $P11, rx431_curclass, "$!pos"
    lt $I11, 0, rx431_fail
    nqp_rxmark rx431_bstack, rxsubrule455_pass, -1, 0
  rxsubrule455_pass:
    rx431_cstack = rx431_cur."!cursor_capture"($P11, "role")
    repr_get_attr_int rx431_pos, $P11, rx431_curclass, "$!pos"
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!pos", rx431_pos
    $P11 = rx431_cur."ws"()
    repr_get_attr_int $I11, $P11, rx431_curclass, "$!pos"
    lt $I11, 0, rx431_fail
    repr_get_attr_int rx431_pos, $P11, rx431_curclass, "$!pos"
    nqp_rxpeek $I19, rx431_bstack, rxquantr452_done
    inc $I19
    inc $I19
    set rx431_rep, rx431_bstack[$I19]
    nqp_rxcommit rx431_bstack, rxquantr452_done
    inc rx431_rep
    nqp_rxmark rx431_bstack, rxquantr452_done, rx431_pos, rx431_rep
    goto rxquantr452_loop
  rxquantr452_done:
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!pos", rx431_pos
    $P11 = rx431_cur."ws"()
    repr_get_attr_int $I11, $P11, rx431_curclass, "$!pos"
    lt $I11, 0, rx431_fail
    repr_get_attr_int rx431_pos, $P11, rx431_curclass, "$!pos"
  alt458_0:
    nqp_rxmark rx431_bstack, alt458_1, rx431_pos, 0
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!pos", rx431_pos
    $P11 = rx431_cur."ws"()
    repr_get_attr_int $I11, $P11, rx431_curclass, "$!pos"
    lt $I11, 0, rx431_fail
    repr_get_attr_int rx431_pos, $P11, rx431_curclass, "$!pos"
    add $I11, rx431_pos, 1
    gt $I11, rx431_eos, rx431_fail
    substr $S10, rx431_tgt, rx431_pos, 1
    ne $S10, ucs4:";", rx431_fail
    add rx431_pos, 1
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!pos", rx431_pos
    $P11 = rx431_cur."ws"()
    repr_get_attr_int $I11, $P11, rx431_curclass, "$!pos"
    lt $I11, 0, rx431_fail
    repr_get_attr_int rx431_pos, $P11, rx431_curclass, "$!pos"
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!pos", rx431_pos
    $P11 = rx431_cur."comp_unit"()
    repr_get_attr_int $I11, $P11, rx431_curclass, "$!pos"
    lt $I11, 0, rx431_fail
    nqp_rxmark rx431_bstack, rxsubrule461_pass, -1, 0
  rxsubrule461_pass:
    rx431_cstack = rx431_cur."!cursor_capture"($P11, "comp_unit")
    repr_get_attr_int rx431_pos, $P11, rx431_curclass, "$!pos"
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!pos", rx431_pos
    $P11 = rx431_cur."ws"()
    repr_get_attr_int $I11, $P11, rx431_curclass, "$!pos"
    lt $I11, 0, rx431_fail
    repr_get_attr_int rx431_pos, $P11, rx431_curclass, "$!pos"
    goto alt458_end
  alt458_1:
    nqp_rxmark rx431_bstack, alt458_2, rx431_pos, 0
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!pos", rx431_pos
    $P11 = rx431_cur."ws"()
    repr_get_attr_int $I11, $P11, rx431_curclass, "$!pos"
    lt $I11, 0, rx431_fail
    repr_get_attr_int rx431_pos, $P11, rx431_curclass, "$!pos"
    ge rx431_pos, rx431_eos, rx431_fail
    substr $S11, rx431_tgt, rx431_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx431_fail
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!pos", rx431_pos
    $P11 = rx431_cur."ws"()
    repr_get_attr_int $I11, $P11, rx431_curclass, "$!pos"
    lt $I11, 0, rx431_fail
    repr_get_attr_int rx431_pos, $P11, rx431_curclass, "$!pos"
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!pos", rx431_pos
    $P11 = rx431_cur."block"()
    repr_get_attr_int $I11, $P11, rx431_curclass, "$!pos"
    lt $I11, 0, rx431_fail
    nqp_rxmark rx431_bstack, rxsubrule465_pass, -1, 0
  rxsubrule465_pass:
    rx431_cstack = rx431_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx431_pos, $P11, rx431_curclass, "$!pos"
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!pos", rx431_pos
    $P11 = rx431_cur."ws"()
    repr_get_attr_int $I11, $P11, rx431_curclass, "$!pos"
    lt $I11, 0, rx431_fail
    repr_get_attr_int rx431_pos, $P11, rx431_curclass, "$!pos"
    goto alt458_end
  alt458_2:
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!pos", rx431_pos
    $P11 = rx431_cur."ws"()
    repr_get_attr_int $I11, $P11, rx431_curclass, "$!pos"
    lt $I11, 0, rx431_fail
    repr_get_attr_int rx431_pos, $P11, rx431_curclass, "$!pos"
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!pos", rx431_pos
    $P11 = rx431_cur."panic"("Malformed package declaration")
    repr_get_attr_int $I11, $P11, rx431_curclass, "$!pos"
    lt $I11, 0, rx431_fail
    repr_get_attr_int rx431_pos, $P11, rx431_curclass, "$!pos"
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!pos", rx431_pos
    $P11 = rx431_cur."ws"()
    repr_get_attr_int $I11, $P11, rx431_curclass, "$!pos"
    lt $I11, 0, rx431_fail
    repr_get_attr_int rx431_pos, $P11, rx431_curclass, "$!pos"
  alt458_end:
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!pos", rx431_pos
    $P11 = rx431_cur."ws"()
    repr_get_attr_int $I11, $P11, rx431_curclass, "$!pos"
    lt $I11, 0, rx431_fail
    repr_get_attr_int rx431_pos, $P11, rx431_curclass, "$!pos"
    rx431_cur."!cursor_pass"(rx431_pos, "package_def", 'backtrack'=>1)
    .return (rx431_cur)
  rx431_restart:
    repr_get_attr_obj rx431_cstack, rx431_cur, rx431_curclass, "$!cstack"
  rx431_fail:
    unless rx431_bstack, rx431_done
    pop $I19, rx431_bstack
    if_null rx431_cstack, rx431_cstack_done
    unless rx431_cstack, rx431_cstack_done
    dec $I19
    set $P11, rx431_cstack[$I19]
  rx431_cstack_done:
    pop rx431_rep, rx431_bstack
    pop rx431_pos, rx431_bstack
    pop $I19, rx431_bstack
    lt rx431_pos, -1, rx431_done
    lt rx431_pos, 0, rx431_fail
    eq $I19, 0, rx431_fail
    if_null rx431_cstack, rx431_jump
    elements $I18, rx431_bstack
    le $I18, 0, rx431_cut
    dec $I18
    set $I18, rx431_bstack[$I18]
  rx431_cut:
    assign rx431_cstack, $I18
  rx431_jump:
    jump $I19
  rx431_done:
    rx431_cur."!cursor_fail"()
    .return (rx431_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "115_1337966799.879_caps"  :subid("526_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 977
    new $P105, "Hash"
    set $P105["name"], 0
    set $P105["repr"], 2
    set $P105["parent"], 2
    set $P105["role"], 2
    set $P105["comp_unit"], 0
    set $P105["block"], 0
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1896"  :anon :subid("527_1337966799.879") :outer("115_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 986
    $P1899 = root_new ['parrot';'Hash']
    set $P1898, $P1899
    .lex "%args", $P1898
.annotate 'line', 983
    set $P1900, $P1898
    unless_null $P1900, vivify_1272
    $P1900 = root_new ['parrot';'Hash']
  vivify_1272:
.annotate 'line', 987
    find_lex $P1901, "$/"
    unless_null $P1901, vivify_1273
    $P1901 = root_new ['parrot';'Hash']
  vivify_1273:
    set $P119, $P1901["name"]
    unless_null $P119, vivify_1274
    new $P119, "Undef"
  vivify_1274:
    set $S100, $P119
    new $P120, 'String'
    set $P120, $S100
    set $P1902, $P1898
    unless_null $P1902, vivify_1275
    $P1902 = root_new ['parrot';'Hash']
    set $P1898, $P1902
  vivify_1275:
    set $P1902["name"], $P120
.annotate 'line', 988
    find_lex $P1904, "$/"
    unless_null $P1904, vivify_1276
    $P1904 = root_new ['parrot';'Hash']
  vivify_1276:
    set $P119, $P1904["repr"]
    unless_null $P119, vivify_1277
    new $P119, "Undef"
  vivify_1277:
    unless $P119, if_1903_end
.annotate 'line', 989
    find_lex $P1905, "$/"
    unless_null $P1905, vivify_1278
    $P1905 = root_new ['parrot';'Hash']
  vivify_1278:
    set $P1906, $P1905["repr"]
    unless_null $P1906, vivify_1279
    $P1906 = root_new ['parrot';'ResizablePMCArray']
  vivify_1279:
    set $P1907, $P1906[0]
    unless_null $P1907, vivify_1280
    $P1907 = root_new ['parrot';'Hash']
  vivify_1280:
    set $P1908, $P1907["quote_delimited"]
    unless_null $P1908, vivify_1281
    $P1908 = root_new ['parrot';'Hash']
  vivify_1281:
    set $P1909, $P1908["quote_atom"]
    unless_null $P1909, vivify_1282
    $P1909 = root_new ['parrot';'ResizablePMCArray']
  vivify_1282:
    set $P120, $P1909[0]
    unless_null $P120, vivify_1283
    new $P120, "Undef"
  vivify_1283:
    set $S100, $P120
    new $P121, 'String'
    set $P121, $S100
    set $P1910, $P1898
    unless_null $P1910, vivify_1284
    $P1910 = root_new ['parrot';'Hash']
    set $P1898, $P1910
  vivify_1284:
    set $P1910["repr"], $P121
  if_1903_end:
.annotate 'line', 991
    find_dynamic_lex $P121, "$*W"
    unless_null $P121, vivify_1285
    get_hll_global $P119, "GLOBAL"
    get_who $P120, $P119
    set $P121, $P120["$W"]
    unless_null $P121, vivify_1286
    die "Contextual $*W not found"
  vivify_1286:
  vivify_1285:
    find_dynamic_lex $P124, "$*PKGDECL"
    unless_null $P124, vivify_1287
    get_hll_global $P122, "GLOBAL"
    get_who $P123, $P122
    set $P124, $P123["$PKGDECL"]
    unless_null $P124, vivify_1288
    die "Contextual $*PKGDECL not found"
  vivify_1288:
  vivify_1287:
    find_dynamic_lex $P127, "%*HOW"
    unless_null $P127, vivify_1289
    get_hll_global $P125, "GLOBAL"
    get_who $P126, $P125
    set $P127, $P126["%HOW"]
    unless_null $P127, vivify_1290
    die "Contextual %*HOW not found"
  vivify_1290:
  vivify_1289:
    set $P128, $P127[$P124]
    unless_null $P128, vivify_1291
    new $P128, "Undef"
  vivify_1291:
    set $P1911, $P1898
    unless_null $P1911, vivify_1292
    $P1911 = root_new ['parrot';'Hash']
  vivify_1292:
    $P129 = $P121."pkg_create_mo"($P128, $P1911 :flat)
    store_dynamic_lex "$*PACKAGE", $P129
.annotate 'line', 994
    find_dynamic_lex $P123, "$*SCOPE"
    unless_null $P123, vivify_1293
    get_hll_global $P121, "GLOBAL"
    get_who $P122, $P121
    set $P123, $P122["$SCOPE"]
    unless_null $P123, vivify_1294
    die "Contextual $*SCOPE not found"
  vivify_1294:
  vivify_1293:
    set $S100, $P123
    iseq $I100, $S100, "our"
    unless $I100, unless_1913
    new $P120, 'Integer'
    set $P120, $I100
    goto unless_1913_end
  unless_1913:
    find_dynamic_lex $P126, "$*SCOPE"
    unless_null $P126, vivify_1295
    get_hll_global $P124, "GLOBAL"
    get_who $P125, $P124
    set $P126, $P125["$SCOPE"]
    unless_null $P126, vivify_1296
    die "Contextual $*SCOPE not found"
  vivify_1296:
  vivify_1295:
    set $S101, $P126
    iseq $I101, $S101, ""
    new $P120, 'Integer'
    set $P120, $I101
  unless_1913_end:
    if $P120, if_1912
.annotate 'line', 1000
    find_dynamic_lex $P131, "$*SCOPE"
    unless_null $P131, vivify_1297
    get_hll_global $P129, "GLOBAL"
    get_who $P130, $P129
    set $P131, $P130["$SCOPE"]
    unless_null $P131, vivify_1298
    die "Contextual $*SCOPE not found"
  vivify_1298:
  vivify_1297:
    set $S102, $P131
    iseq $I102, $S102, "my"
    if $I102, if_1922
.annotate 'line', 1007
    find_lex $P132, "$/"
    unless_null $P132, vivify_1299
    new $P132, "Undef"
  vivify_1299:
    $P133 = $P132."CURSOR"()
    find_dynamic_lex $P136, "$*SCOPE"
    unless_null $P136, vivify_1300
    get_hll_global $P134, "GLOBAL"
    get_who $P135, $P134
    set $P136, $P135["$SCOPE"]
    unless_null $P136, vivify_1301
    die "Contextual $*SCOPE not found"
  vivify_1301:
  vivify_1300:
    concat $P137, $P136, " scoped packages are not supported"
    $P138 = $P133."panic"($P137)
.annotate 'line', 1006
    set $P128, $P138
.annotate 'line', 1000
    goto if_1922_end
  if_1922:
.annotate 'line', 1001
    find_lex $P1924, "$/"
    unless_null $P1924, vivify_1302
    $P1924 = root_new ['parrot';'Hash']
  vivify_1302:
    set $P1925, $P1924["name"]
    unless_null $P1925, vivify_1303
    $P1925 = root_new ['parrot';'Hash']
  vivify_1303:
    set $P132, $P1925["identifier"]
    unless_null $P132, vivify_1304
    new $P132, "Undef"
  vivify_1304:
    set $N100, $P132
    set $N101, 1
    isne $I103, $N100, $N101
    unless $I103, if_1923_end
.annotate 'line', 1002
    find_lex $P1926, "$/"
    unless_null $P1926, vivify_1305
    $P1926 = root_new ['parrot';'Hash']
  vivify_1305:
    set $P133, $P1926["name"]
    unless_null $P133, vivify_1306
    new $P133, "Undef"
  vivify_1306:
    $P134 = $P133."CURSOR"()
    $P134."panic"("A my scoped package cannot have a multi-part name yet")
  if_1923_end:
.annotate 'line', 1004
    find_dynamic_lex $P134, "$*W"
    unless_null $P134, vivify_1307
    get_hll_global $P132, "GLOBAL"
    get_who $P133, $P132
    set $P134, $P133["$W"]
    unless_null $P134, vivify_1308
    die "Contextual $*W not found"
  vivify_1308:
  vivify_1307:
    find_dynamic_lex $P137, "$*W"
    unless_null $P137, vivify_1309
    get_hll_global $P135, "GLOBAL"
    get_who $P136, $P135
    set $P137, $P136["$W"]
    unless_null $P137, vivify_1310
    die "Contextual $*W not found"
  vivify_1310:
  vivify_1309:
    $P138 = $P137."cur_lexpad"()
    find_lex $P1927, "$/"
    unless_null $P1927, vivify_1311
    $P1927 = root_new ['parrot';'Hash']
  vivify_1311:
    set $P1928, $P1927["name"]
    unless_null $P1928, vivify_1312
    $P1928 = root_new ['parrot';'Hash']
  vivify_1312:
    set $P1929, $P1928["identifier"]
    unless_null $P1929, vivify_1313
    $P1929 = root_new ['parrot';'ResizablePMCArray']
  vivify_1313:
    set $P139, $P1929[0]
    unless_null $P139, vivify_1314
    new $P139, "Undef"
  vivify_1314:
    find_dynamic_lex $P142, "$*PACKAGE"
    unless_null $P142, vivify_1315
    get_hll_global $P140, "GLOBAL"
    get_who $P141, $P140
    set $P142, $P141["$PACKAGE"]
    unless_null $P142, vivify_1316
    die "Contextual $*PACKAGE not found"
  vivify_1316:
  vivify_1315:
    $P143 = $P134."install_lexical_symbol"($P138, $P139, $P142)
.annotate 'line', 1000
    set $P128, $P143
  if_1922_end:
    set $P119, $P128
.annotate 'line', 994
    goto if_1912_end
  if_1912:
.annotate 'line', 995
    find_dynamic_lex $P129, "$*W"
    unless_null $P129, vivify_1317
    get_hll_global $P127, "GLOBAL"
    get_who $P128, $P127
    set $P129, $P128["$W"]
    unless_null $P129, vivify_1318
    die "Contextual $*W not found"
  vivify_1318:
  vivify_1317:
    find_dynamic_lex $P132, "$*OUTERPACKAGE"
    unless_null $P132, vivify_1319
    get_hll_global $P130, "GLOBAL"
    get_who $P131, $P130
    set $P132, $P131["$OUTERPACKAGE"]
    unless_null $P132, vivify_1320
    die "Contextual $*OUTERPACKAGE not found"
  vivify_1320:
  vivify_1319:
    find_lex $P1914, "$/"
    unless_null $P1914, vivify_1321
    $P1914 = root_new ['parrot';'Hash']
  vivify_1321:
    set $P1915, $P1914["name"]
    unless_null $P1915, vivify_1322
    $P1915 = root_new ['parrot';'Hash']
  vivify_1322:
    set $P133, $P1915["identifier"]
    unless_null $P133, vivify_1323
    new $P133, "Undef"
  vivify_1323:
    find_dynamic_lex $P136, "$*PACKAGE"
    unless_null $P136, vivify_1324
    get_hll_global $P134, "GLOBAL"
    get_who $P135, $P134
    set $P136, $P135["$PACKAGE"]
    unless_null $P136, vivify_1325
    die "Contextual $*PACKAGE not found"
  vivify_1325:
  vivify_1324:
    $P129."install_package_symbol"($P132, $P133, $P136)
.annotate 'line', 996
    find_lex $P1917, "$/"
    unless_null $P1917, vivify_1326
    $P1917 = root_new ['parrot';'Hash']
  vivify_1326:
    set $P1918, $P1917["name"]
    unless_null $P1918, vivify_1327
    $P1918 = root_new ['parrot';'Hash']
  vivify_1327:
    set $P128, $P1918["identifier"]
    unless_null $P128, vivify_1328
    new $P128, "Undef"
  vivify_1328:
    set $N100, $P128
    set $N101, 1
    iseq $I102, $N100, $N101
    if $I102, if_1916
    new $P127, 'Integer'
    set $P127, $I102
    goto if_1916_end
  if_1916:
.annotate 'line', 997
    find_dynamic_lex $P131, "$*W"
    unless_null $P131, vivify_1329
    get_hll_global $P129, "GLOBAL"
    get_who $P130, $P129
    set $P131, $P130["$W"]
    unless_null $P131, vivify_1330
    die "Contextual $*W not found"
  vivify_1330:
  vivify_1329:
    find_dynamic_lex $P134, "$*W"
    unless_null $P134, vivify_1331
    get_hll_global $P132, "GLOBAL"
    get_who $P133, $P132
    set $P134, $P133["$W"]
    unless_null $P134, vivify_1332
    die "Contextual $*W not found"
  vivify_1332:
  vivify_1331:
    $P135 = $P134."cur_lexpad"()
    find_lex $P1919, "$/"
    unless_null $P1919, vivify_1333
    $P1919 = root_new ['parrot';'Hash']
  vivify_1333:
    set $P1920, $P1919["name"]
    unless_null $P1920, vivify_1334
    $P1920 = root_new ['parrot';'Hash']
  vivify_1334:
    set $P1921, $P1920["identifier"]
    unless_null $P1921, vivify_1335
    $P1921 = root_new ['parrot';'ResizablePMCArray']
  vivify_1335:
    set $P136, $P1921[0]
    unless_null $P136, vivify_1336
    new $P136, "Undef"
  vivify_1336:
    find_dynamic_lex $P139, "$*PACKAGE"
    unless_null $P139, vivify_1337
    get_hll_global $P137, "GLOBAL"
    get_who $P138, $P137
    set $P139, $P138["$PACKAGE"]
    unless_null $P139, vivify_1338
    die "Contextual $*PACKAGE not found"
  vivify_1338:
  vivify_1337:
    $P140 = $P131."install_lexical_symbol"($P135, $P136, $P139)
.annotate 'line', 996
    set $P127, $P140
  if_1916_end:
.annotate 'line', 994
    set $P119, $P127
  if_1912_end:
.annotate 'line', 983
    .return ($P119)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "scope_declarator"  :subid("116_1337966799.879")
    .param pmc param_1931
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1020
    .lex "self", param_1931
    $P103 = param_1931."!protoregex"("scope_declarator")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "scope_declarator:sym<my>"  :subid("117_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1933
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1021
    .lex "self", param_1933
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1934
    .lex "$/", $P1935
    .local string rx471_tgt
    .local int rx471_pos
    .local int rx471_off
    .local int rx471_eos
    .local int rx471_rep
    .local pmc rx471_cur
    .local pmc rx471_curclass
    .local pmc rx471_bstack
    .local pmc rx471_cstack
    (rx471_cur, rx471_tgt, rx471_pos, rx471_curclass, rx471_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx471_cur
    length rx471_eos, rx471_tgt
    eq $I19, 1, rx471_restart
    repr_get_attr_int $I11, self, rx471_curclass, "$!from"
    ne $I11, -1, rxscan472_done
    goto rxscan472_scan
  rxscan472_loop:
    inc rx471_pos
    gt rx471_pos, rx471_eos, rx471_fail
    repr_bind_attr_int rx471_cur, rx471_curclass, "$!from", rx471_pos
  rxscan472_scan:
    nqp_rxmark rx471_bstack, rxscan472_loop, rx471_pos, 0
  rxscan472_done:
    nqp_rxmark rx471_bstack, rxcap473_fail, rx471_pos, 0
    add $I11, rx471_pos, 2
    gt $I11, rx471_eos, rx471_fail
    substr $S10, rx471_tgt, rx471_pos, 2
    ne $S10, ucs4:"my", rx471_fail
    add rx471_pos, 2
    nqp_rxpeek $I19, rx471_bstack, rxcap473_fail
    inc $I19
    set $I11, rx471_bstack[$I19]
    $P11 = rx471_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx471_pos)
    rx471_cstack = rx471_cur."!cursor_capture"($P11, "sym")
    goto rxcap473_done
  rxcap473_fail:
    goto rx471_fail
  rxcap473_done:
    repr_bind_attr_int rx471_cur, rx471_curclass, "$!pos", rx471_pos
    $P11 = rx471_cur."scoped"("my")
    repr_get_attr_int $I11, $P11, rx471_curclass, "$!pos"
    lt $I11, 0, rx471_fail
    nqp_rxmark rx471_bstack, rxsubrule474_pass, -1, 0
  rxsubrule474_pass:
    rx471_cstack = rx471_cur."!cursor_capture"($P11, "scoped")
    repr_get_attr_int rx471_pos, $P11, rx471_curclass, "$!pos"
    rx471_cur."!cursor_pass"(rx471_pos, "scope_declarator:sym<my>", 'backtrack'=>1)
    .return (rx471_cur)
  rx471_restart:
    repr_get_attr_obj rx471_cstack, rx471_cur, rx471_curclass, "$!cstack"
  rx471_fail:
    unless rx471_bstack, rx471_done
    pop $I19, rx471_bstack
    if_null rx471_cstack, rx471_cstack_done
    unless rx471_cstack, rx471_cstack_done
    dec $I19
    set $P11, rx471_cstack[$I19]
  rx471_cstack_done:
    pop rx471_rep, rx471_bstack
    pop rx471_pos, rx471_bstack
    pop $I19, rx471_bstack
    lt rx471_pos, -1, rx471_done
    lt rx471_pos, 0, rx471_fail
    eq $I19, 0, rx471_fail
    if_null rx471_cstack, rx471_jump
    elements $I18, rx471_bstack
    le $I18, 0, rx471_cut
    dec $I18
    set $I18, rx471_bstack[$I18]
  rx471_cut:
    assign rx471_cstack, $I18
  rx471_jump:
    jump $I19
  rx471_done:
    rx471_cur."!cursor_fail"()
    .return (rx471_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "117_1337966799.879_caps"  :subid("528_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1021
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["scoped"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "117_1337966799.879_nfa"  :subid("529_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1021
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 109
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 121
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "scoped"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "scope_declarator:sym<our>"  :subid("118_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1939
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1022
    .lex "self", param_1939
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1940
    .lex "$/", $P1941
    .local string rx475_tgt
    .local int rx475_pos
    .local int rx475_off
    .local int rx475_eos
    .local int rx475_rep
    .local pmc rx475_cur
    .local pmc rx475_curclass
    .local pmc rx475_bstack
    .local pmc rx475_cstack
    (rx475_cur, rx475_tgt, rx475_pos, rx475_curclass, rx475_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx475_cur
    length rx475_eos, rx475_tgt
    eq $I19, 1, rx475_restart
    repr_get_attr_int $I11, self, rx475_curclass, "$!from"
    ne $I11, -1, rxscan476_done
    goto rxscan476_scan
  rxscan476_loop:
    inc rx475_pos
    gt rx475_pos, rx475_eos, rx475_fail
    repr_bind_attr_int rx475_cur, rx475_curclass, "$!from", rx475_pos
  rxscan476_scan:
    nqp_rxmark rx475_bstack, rxscan476_loop, rx475_pos, 0
  rxscan476_done:
    nqp_rxmark rx475_bstack, rxcap477_fail, rx475_pos, 0
    add $I11, rx475_pos, 3
    gt $I11, rx475_eos, rx475_fail
    substr $S10, rx475_tgt, rx475_pos, 3
    ne $S10, ucs4:"our", rx475_fail
    add rx475_pos, 3
    nqp_rxpeek $I19, rx475_bstack, rxcap477_fail
    inc $I19
    set $I11, rx475_bstack[$I19]
    $P11 = rx475_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx475_pos)
    rx475_cstack = rx475_cur."!cursor_capture"($P11, "sym")
    goto rxcap477_done
  rxcap477_fail:
    goto rx475_fail
  rxcap477_done:
    repr_bind_attr_int rx475_cur, rx475_curclass, "$!pos", rx475_pos
    $P11 = rx475_cur."scoped"("our")
    repr_get_attr_int $I11, $P11, rx475_curclass, "$!pos"
    lt $I11, 0, rx475_fail
    nqp_rxmark rx475_bstack, rxsubrule478_pass, -1, 0
  rxsubrule478_pass:
    rx475_cstack = rx475_cur."!cursor_capture"($P11, "scoped")
    repr_get_attr_int rx475_pos, $P11, rx475_curclass, "$!pos"
    rx475_cur."!cursor_pass"(rx475_pos, "scope_declarator:sym<our>", 'backtrack'=>1)
    .return (rx475_cur)
  rx475_restart:
    repr_get_attr_obj rx475_cstack, rx475_cur, rx475_curclass, "$!cstack"
  rx475_fail:
    unless rx475_bstack, rx475_done
    pop $I19, rx475_bstack
    if_null rx475_cstack, rx475_cstack_done
    unless rx475_cstack, rx475_cstack_done
    dec $I19
    set $P11, rx475_cstack[$I19]
  rx475_cstack_done:
    pop rx475_rep, rx475_bstack
    pop rx475_pos, rx475_bstack
    pop $I19, rx475_bstack
    lt rx475_pos, -1, rx475_done
    lt rx475_pos, 0, rx475_fail
    eq $I19, 0, rx475_fail
    if_null rx475_cstack, rx475_jump
    elements $I18, rx475_bstack
    le $I18, 0, rx475_cut
    dec $I18
    set $I18, rx475_bstack[$I18]
  rx475_cut:
    assign rx475_cstack, $I18
  rx475_jump:
    jump $I19
  rx475_done:
    rx475_cur."!cursor_fail"()
    .return (rx475_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "118_1337966799.879_caps"  :subid("530_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1022
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["scoped"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "118_1337966799.879_nfa"  :subid("531_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1022
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 111
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 117
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 114
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "scoped"
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "scope_declarator:sym<has>"  :subid("119_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1945
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1023
    .lex "self", param_1945
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1946
    .lex "$/", $P1947
    .local string rx479_tgt
    .local int rx479_pos
    .local int rx479_off
    .local int rx479_eos
    .local int rx479_rep
    .local pmc rx479_cur
    .local pmc rx479_curclass
    .local pmc rx479_bstack
    .local pmc rx479_cstack
    (rx479_cur, rx479_tgt, rx479_pos, rx479_curclass, rx479_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx479_cur
    length rx479_eos, rx479_tgt
    eq $I19, 1, rx479_restart
    repr_get_attr_int $I11, self, rx479_curclass, "$!from"
    ne $I11, -1, rxscan480_done
    goto rxscan480_scan
  rxscan480_loop:
    inc rx479_pos
    gt rx479_pos, rx479_eos, rx479_fail
    repr_bind_attr_int rx479_cur, rx479_curclass, "$!from", rx479_pos
  rxscan480_scan:
    nqp_rxmark rx479_bstack, rxscan480_loop, rx479_pos, 0
  rxscan480_done:
    nqp_rxmark rx479_bstack, rxcap481_fail, rx479_pos, 0
    add $I11, rx479_pos, 3
    gt $I11, rx479_eos, rx479_fail
    substr $S10, rx479_tgt, rx479_pos, 3
    ne $S10, ucs4:"has", rx479_fail
    add rx479_pos, 3
    nqp_rxpeek $I19, rx479_bstack, rxcap481_fail
    inc $I19
    set $I11, rx479_bstack[$I19]
    $P11 = rx479_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx479_pos)
    rx479_cstack = rx479_cur."!cursor_capture"($P11, "sym")
    goto rxcap481_done
  rxcap481_fail:
    goto rx479_fail
  rxcap481_done:
    repr_bind_attr_int rx479_cur, rx479_curclass, "$!pos", rx479_pos
    $P11 = rx479_cur."scoped"("has")
    repr_get_attr_int $I11, $P11, rx479_curclass, "$!pos"
    lt $I11, 0, rx479_fail
    nqp_rxmark rx479_bstack, rxsubrule482_pass, -1, 0
  rxsubrule482_pass:
    rx479_cstack = rx479_cur."!cursor_capture"($P11, "scoped")
    repr_get_attr_int rx479_pos, $P11, rx479_curclass, "$!pos"
    rx479_cur."!cursor_pass"(rx479_pos, "scope_declarator:sym<has>", 'backtrack'=>1)
    .return (rx479_cur)
  rx479_restart:
    repr_get_attr_obj rx479_cstack, rx479_cur, rx479_curclass, "$!cstack"
  rx479_fail:
    unless rx479_bstack, rx479_done
    pop $I19, rx479_bstack
    if_null rx479_cstack, rx479_cstack_done
    unless rx479_cstack, rx479_cstack_done
    dec $I19
    set $P11, rx479_cstack[$I19]
  rx479_cstack_done:
    pop rx479_rep, rx479_bstack
    pop rx479_pos, rx479_bstack
    pop $I19, rx479_bstack
    lt rx479_pos, -1, rx479_done
    lt rx479_pos, 0, rx479_fail
    eq $I19, 0, rx479_fail
    if_null rx479_cstack, rx479_jump
    elements $I18, rx479_bstack
    le $I18, 0, rx479_cut
    dec $I18
    set $I18, rx479_bstack[$I18]
  rx479_cut:
    assign rx479_cstack, $I18
  rx479_jump:
    jump $I19
  rx479_done:
    rx479_cur."!cursor_fail"()
    .return (rx479_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "119_1337966799.879_caps"  :subid("532_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1023
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["scoped"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "119_1337966799.879_nfa"  :subid("533_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1023
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 104
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 97
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 115
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "scoped"
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "scoped"  :subid("120_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1951
    .param pmc param_1952
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1025
    .lex "self", param_1951
    .lex "$*SCOPE", param_1952
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1953
    .lex "$/", $P1954
    .local string rx483_tgt
    .local int rx483_pos
    .local int rx483_off
    .local int rx483_eos
    .local int rx483_rep
    .local pmc rx483_cur
    .local pmc rx483_curclass
    .local pmc rx483_bstack
    .local pmc rx483_cstack
    (rx483_cur, rx483_tgt, rx483_pos, rx483_curclass, rx483_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx483_cur
    length rx483_eos, rx483_tgt
    eq $I19, 1, rx483_restart
    repr_get_attr_int $I11, self, rx483_curclass, "$!from"
    ne $I11, -1, rxscan484_done
    goto rxscan484_scan
  rxscan484_loop:
    inc rx483_pos
    gt rx483_pos, rx483_eos, rx483_fail
    repr_bind_attr_int rx483_cur, rx483_curclass, "$!from", rx483_pos
  rxscan484_scan:
    nqp_rxmark rx483_bstack, rxscan484_loop, rx483_pos, 0
  rxscan484_done:
  alt485_0:
    nqp_rxmark rx483_bstack, alt485_1, rx483_pos, 0
    repr_bind_attr_int rx483_cur, rx483_curclass, "$!pos", rx483_pos
    $P11 = rx483_cur."ws"()
    repr_get_attr_int $I11, $P11, rx483_curclass, "$!pos"
    lt $I11, 0, rx483_fail
    repr_get_attr_int rx483_pos, $P11, rx483_curclass, "$!pos"
    repr_bind_attr_int rx483_cur, rx483_curclass, "$!pos", rx483_pos
    $P11 = rx483_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx483_curclass, "$!pos"
    lt $I11, 0, rx483_fail
    nqp_rxmark rx483_bstack, rxsubrule487_pass, -1, 0
  rxsubrule487_pass:
    rx483_cstack = rx483_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx483_pos, $P11, rx483_curclass, "$!pos"
    repr_bind_attr_int rx483_cur, rx483_curclass, "$!pos", rx483_pos
    $P11 = rx483_cur."ws"()
    repr_get_attr_int $I11, $P11, rx483_curclass, "$!pos"
    lt $I11, 0, rx483_fail
    repr_get_attr_int rx483_pos, $P11, rx483_curclass, "$!pos"
    goto alt485_end
  alt485_1:
    nqp_rxmark rx483_bstack, alt485_2, rx483_pos, 0
    repr_bind_attr_int rx483_cur, rx483_curclass, "$!pos", rx483_pos
    $P11 = rx483_cur."ws"()
    repr_get_attr_int $I11, $P11, rx483_curclass, "$!pos"
    lt $I11, 0, rx483_fail
    repr_get_attr_int rx483_pos, $P11, rx483_curclass, "$!pos"
    repr_bind_attr_int rx483_cur, rx483_curclass, "$!pos", rx483_pos
    $P11 = rx483_cur."multi_declarator"()
    repr_get_attr_int $I11, $P11, rx483_curclass, "$!pos"
    lt $I11, 0, rx483_fail
    nqp_rxmark rx483_bstack, rxsubrule490_pass, -1, 0
  rxsubrule490_pass:
    rx483_cstack = rx483_cur."!cursor_capture"($P11, "multi_declarator")
    repr_get_attr_int rx483_pos, $P11, rx483_curclass, "$!pos"
    repr_bind_attr_int rx483_cur, rx483_curclass, "$!pos", rx483_pos
    $P11 = rx483_cur."ws"()
    repr_get_attr_int $I11, $P11, rx483_curclass, "$!pos"
    lt $I11, 0, rx483_fail
    repr_get_attr_int rx483_pos, $P11, rx483_curclass, "$!pos"
    goto alt485_end
  alt485_2:
    repr_bind_attr_int rx483_cur, rx483_curclass, "$!pos", rx483_pos
    $P11 = rx483_cur."ws"()
    repr_get_attr_int $I11, $P11, rx483_curclass, "$!pos"
    lt $I11, 0, rx483_fail
    repr_get_attr_int rx483_pos, $P11, rx483_curclass, "$!pos"
    repr_bind_attr_int rx483_cur, rx483_curclass, "$!pos", rx483_pos
    $P11 = rx483_cur."package_declarator"()
    repr_get_attr_int $I11, $P11, rx483_curclass, "$!pos"
    lt $I11, 0, rx483_fail
    nqp_rxmark rx483_bstack, rxsubrule493_pass, -1, 0
  rxsubrule493_pass:
    rx483_cstack = rx483_cur."!cursor_capture"($P11, "package_declarator")
    repr_get_attr_int rx483_pos, $P11, rx483_curclass, "$!pos"
    repr_bind_attr_int rx483_cur, rx483_curclass, "$!pos", rx483_pos
    $P11 = rx483_cur."ws"()
    repr_get_attr_int $I11, $P11, rx483_curclass, "$!pos"
    lt $I11, 0, rx483_fail
    repr_get_attr_int rx483_pos, $P11, rx483_curclass, "$!pos"
  alt485_end:
    rx483_cur."!cursor_pass"(rx483_pos, "scoped", 'backtrack'=>1)
    .return (rx483_cur)
  rx483_restart:
    repr_get_attr_obj rx483_cstack, rx483_cur, rx483_curclass, "$!cstack"
  rx483_fail:
    unless rx483_bstack, rx483_done
    pop $I19, rx483_bstack
    if_null rx483_cstack, rx483_cstack_done
    unless rx483_cstack, rx483_cstack_done
    dec $I19
    set $P11, rx483_cstack[$I19]
  rx483_cstack_done:
    pop rx483_rep, rx483_bstack
    pop rx483_pos, rx483_bstack
    pop $I19, rx483_bstack
    lt rx483_pos, -1, rx483_done
    lt rx483_pos, 0, rx483_fail
    eq $I19, 0, rx483_fail
    if_null rx483_cstack, rx483_jump
    elements $I18, rx483_bstack
    le $I18, 0, rx483_cut
    dec $I18
    set $I18, rx483_bstack[$I18]
  rx483_cut:
    assign rx483_cstack, $I18
  rx483_jump:
    jump $I19
  rx483_done:
    rx483_cur."!cursor_fail"()
    .return (rx483_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "120_1337966799.879_caps"  :subid("534_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1025
    new $P104, "Hash"
    set $P104["declarator"], 0
    set $P104["multi_declarator"], 0
    set $P104["package_declarator"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "typename"  :subid("121_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1957
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1031
    .const 'Sub' $P1963 = "537_1337966799.879" 
    capture_lex $P1963
    .lex "self", param_1957
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1958
    .lex "$/", $P1959
    .local string rx495_tgt
    .local int rx495_pos
    .local int rx495_off
    .local int rx495_eos
    .local int rx495_rep
    .local pmc rx495_cur
    .local pmc rx495_curclass
    .local pmc rx495_bstack
    .local pmc rx495_cstack
    (rx495_cur, rx495_tgt, rx495_pos, rx495_curclass, rx495_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx495_cur
    length rx495_eos, rx495_tgt
    eq $I19, 1, rx495_restart
    repr_get_attr_int $I11, self, rx495_curclass, "$!from"
    ne $I11, -1, rxscan496_done
    goto rxscan496_scan
  rxscan496_loop:
    inc rx495_pos
    gt rx495_pos, rx495_eos, rx495_fail
    repr_bind_attr_int rx495_cur, rx495_curclass, "$!from", rx495_pos
  rxscan496_scan:
    nqp_rxmark rx495_bstack, rxscan496_loop, rx495_pos, 0
  rxscan496_done:
    repr_bind_attr_int rx495_cur, rx495_curclass, "$!pos", rx495_pos
    $P11 = rx495_cur."name"()
    repr_get_attr_int $I11, $P11, rx495_curclass, "$!pos"
    lt $I11, 0, rx495_fail
    nqp_rxmark rx495_bstack, rxsubrule497_pass, -1, 0
  rxsubrule497_pass:
    rx495_cstack = rx495_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx495_pos, $P11, rx495_curclass, "$!pos"
    repr_bind_attr_int rx495_cur, rx495_curclass, "$!pos", rx495_pos
    store_lex unicode:"$\x{a2}", rx495_cur
    find_lex $P104, unicode:"$\x{a2}"
    $P105 = $P104."MATCH"()
    store_lex "$/", $P105
.annotate 'line', 1033
    .const 'Sub' $P1963 = "537_1337966799.879" 
    capture_lex $P1963
    $P106 = $P1963()
.annotate 'line', 1031
    unless $P106, rx495_fail
    rx495_cur."!cursor_pass"(rx495_pos, "typename", 'backtrack'=>1)
    .return (rx495_cur)
  rx495_restart:
    repr_get_attr_obj rx495_cstack, rx495_cur, rx495_curclass, "$!cstack"
  rx495_fail:
    unless rx495_bstack, rx495_done
    pop $I19, rx495_bstack
    if_null rx495_cstack, rx495_cstack_done
    unless rx495_cstack, rx495_cstack_done
    dec $I19
    set $P11, rx495_cstack[$I19]
  rx495_cstack_done:
    pop rx495_rep, rx495_bstack
    pop rx495_pos, rx495_bstack
    pop $I19, rx495_bstack
    lt rx495_pos, -1, rx495_done
    lt rx495_pos, 0, rx495_fail
    eq $I19, 0, rx495_fail
    if_null rx495_cstack, rx495_jump
    elements $I18, rx495_bstack
    le $I18, 0, rx495_cut
    dec $I18
    set $I18, rx495_bstack[$I18]
  rx495_cut:
    assign rx495_cstack, $I18
  rx495_jump:
    jump $I19
  rx495_done:
    rx495_cur."!cursor_fail"()
    .return (rx495_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "121_1337966799.879_caps"  :subid("535_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1031
    new $P104, "Hash"
    set $P104["name"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "121_1337966799.879_nfa"  :subid("536_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1031
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "name"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 1
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1962"  :anon :subid("537_1337966799.879") :outer("121_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1033
    find_dynamic_lex $P108, "$*W"
    unless_null $P108, vivify_1339
    get_hll_global $P106, "GLOBAL"
    get_who $P107, $P106
    set $P108, $P107["$W"]
    unless_null $P108, vivify_1340
    die "Contextual $*W not found"
  vivify_1340:
  vivify_1339:
    find_lex $P109, "$/"
    unless_null $P109, vivify_1341
    new $P109, "Undef"
  vivify_1341:
    find_lex $P1964, "$/"
    unless_null $P1964, vivify_1342
    $P1964 = root_new ['parrot';'Hash']
  vivify_1342:
    set $P1965, $P1964["name"]
    unless_null $P1965, vivify_1343
    $P1965 = root_new ['parrot';'Hash']
  vivify_1343:
    set $P110, $P1965["identifier"]
    unless_null $P110, vivify_1344
    new $P110, "Undef"
  vivify_1344:
    $P111 = $P108."known_sym"($P109, $P110)
    .return ($P111)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "declarator"  :subid("122_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1967
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1036
    .lex "self", param_1967
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1968
    .lex "$/", $P1969
    .local string rx498_tgt
    .local int rx498_pos
    .local int rx498_off
    .local int rx498_eos
    .local int rx498_rep
    .local pmc rx498_cur
    .local pmc rx498_curclass
    .local pmc rx498_bstack
    .local pmc rx498_cstack
    (rx498_cur, rx498_tgt, rx498_pos, rx498_curclass, rx498_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx498_cur
    length rx498_eos, rx498_tgt
    eq $I19, 1, rx498_restart
    repr_get_attr_int $I11, self, rx498_curclass, "$!from"
    ne $I11, -1, rxscan499_done
    goto rxscan499_scan
  rxscan499_loop:
    inc rx498_pos
    gt rx498_pos, rx498_eos, rx498_fail
    repr_bind_attr_int rx498_cur, rx498_curclass, "$!from", rx498_pos
  rxscan499_scan:
    nqp_rxmark rx498_bstack, rxscan499_loop, rx498_pos, 0
  rxscan499_done:
  alt500_0:
    nqp_rxmark rx498_bstack, alt500_1, rx498_pos, 0
    repr_bind_attr_int rx498_cur, rx498_curclass, "$!pos", rx498_pos
    $P11 = rx498_cur."variable_declarator"()
    repr_get_attr_int $I11, $P11, rx498_curclass, "$!pos"
    lt $I11, 0, rx498_fail
    nqp_rxmark rx498_bstack, rxsubrule501_pass, -1, 0
  rxsubrule501_pass:
    rx498_cstack = rx498_cur."!cursor_capture"($P11, "variable_declarator")
    repr_get_attr_int rx498_pos, $P11, rx498_curclass, "$!pos"
    goto alt500_end
  alt500_1:
    repr_bind_attr_int rx498_cur, rx498_curclass, "$!pos", rx498_pos
    $P11 = rx498_cur."routine_declarator"()
    repr_get_attr_int $I11, $P11, rx498_curclass, "$!pos"
    lt $I11, 0, rx498_fail
    nqp_rxmark rx498_bstack, rxsubrule502_pass, -1, 0
  rxsubrule502_pass:
    rx498_cstack = rx498_cur."!cursor_capture"($P11, "routine_declarator")
    repr_get_attr_int rx498_pos, $P11, rx498_curclass, "$!pos"
  alt500_end:
    rx498_cur."!cursor_pass"(rx498_pos, "declarator", 'backtrack'=>1)
    .return (rx498_cur)
  rx498_restart:
    repr_get_attr_obj rx498_cstack, rx498_cur, rx498_curclass, "$!cstack"
  rx498_fail:
    unless rx498_bstack, rx498_done
    pop $I19, rx498_bstack
    if_null rx498_cstack, rx498_cstack_done
    unless rx498_cstack, rx498_cstack_done
    dec $I19
    set $P11, rx498_cstack[$I19]
  rx498_cstack_done:
    pop rx498_rep, rx498_bstack
    pop rx498_pos, rx498_bstack
    pop $I19, rx498_bstack
    lt rx498_pos, -1, rx498_done
    lt rx498_pos, 0, rx498_fail
    eq $I19, 0, rx498_fail
    if_null rx498_cstack, rx498_jump
    elements $I18, rx498_bstack
    le $I18, 0, rx498_cut
    dec $I18
    set $I18, rx498_bstack[$I18]
  rx498_cut:
    assign rx498_cstack, $I18
  rx498_jump:
    jump $I19
  rx498_done:
    rx498_cur."!cursor_fail"()
    .return (rx498_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "122_1337966799.879_caps"  :subid("538_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1036
    new $P104, "Hash"
    set $P104["variable_declarator"], 0
    set $P104["routine_declarator"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "122_1337966799.879_nfa"  :subid("539_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1036
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "variable_declarator"
    push $P105, 0
    push $P105, 8
    push $P105, "routine_declarator"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "variable_declarator"  :subid("123_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1973
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1041
    .const 'Sub' $P1979 = "541_1337966799.879" 
    capture_lex $P1979
    .lex "self", param_1973
.annotate 'line', 1043
    new $P103, "Undef"
    set $P1974, $P103
    .lex "$*IN_DECL", $P1974
    .local pmc self
    find_lex $P104, "self"
    set self, $P104
    .lex unicode:"$\x{a2}", $P1975
    .lex "$/", $P1976
.annotate 'line', 1041
    .local string rx503_tgt
    .local int rx503_pos
    .local int rx503_off
    .local int rx503_eos
    .local int rx503_rep
    .local pmc rx503_cur
    .local pmc rx503_curclass
    .local pmc rx503_bstack
    .local pmc rx503_cstack
    (rx503_cur, rx503_tgt, rx503_pos, rx503_curclass, rx503_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx503_cur
    length rx503_eos, rx503_tgt
    eq $I19, 1, rx503_restart
    repr_get_attr_int $I11, self, rx503_curclass, "$!from"
    ne $I11, -1, rxscan504_done
    goto rxscan504_scan
  rxscan504_loop:
    inc rx503_pos
    gt rx503_pos, rx503_eos, rx503_fail
    repr_bind_attr_int rx503_cur, rx503_curclass, "$!from", rx503_pos
  rxscan504_scan:
    nqp_rxmark rx503_bstack, rxscan504_loop, rx503_pos, 0
  rxscan504_done:
    repr_bind_attr_int rx503_cur, rx503_curclass, "$!pos", rx503_pos
    $P11 = rx503_cur."ws"()
    repr_get_attr_int $I11, $P11, rx503_curclass, "$!pos"
    lt $I11, 0, rx503_fail
    repr_get_attr_int rx503_pos, $P11, rx503_curclass, "$!pos"
  # rx rxquantr506 ** 0..1
    nqp_rxmark rx503_bstack, rxquantr506_done, rx503_pos, 0
  rxquantr506_loop:
    repr_bind_attr_int rx503_cur, rx503_curclass, "$!pos", rx503_pos
    $P11 = rx503_cur."typename"()
    repr_get_attr_int $I11, $P11, rx503_curclass, "$!pos"
    lt $I11, 0, rx503_fail
    goto rxsubrule507_pass
  rxsubrule507_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx503_curclass, "$!pos"
    lt $I11, 0, rx503_fail
  rxsubrule507_pass:
    rx503_cstack = rx503_cur."!cursor_capture"($P11, "typename")
    set_addr $I11, rxsubrule507_back
    push rx503_bstack, $I11
    push rx503_bstack, 0
    push rx503_bstack, rx503_pos
    elements $I11, rx503_cstack
    push rx503_bstack, $I11
    repr_get_attr_int rx503_pos, $P11, rx503_curclass, "$!pos"
    nqp_rxpeek $I19, rx503_bstack, rxquantr506_done
    inc $I19
    inc $I19
    set rx503_rep, rx503_bstack[$I19]
    nqp_rxcommit rx503_bstack, rxquantr506_done
    inc rx503_rep
  rxquantr506_done:
    repr_bind_attr_int rx503_cur, rx503_curclass, "$!pos", rx503_pos
    $P11 = rx503_cur."ws"()
    repr_get_attr_int $I11, $P11, rx503_curclass, "$!pos"
    lt $I11, 0, rx503_fail
    repr_get_attr_int rx503_pos, $P11, rx503_curclass, "$!pos"
    repr_bind_attr_int rx503_cur, rx503_curclass, "$!pos", rx503_pos
    store_lex unicode:"$\x{a2}", rx503_cur
.annotate 'line', 1043
    new $P107, "String"
    assign $P107, "variable"
    set $P1974, $P107
.annotate 'line', 1041
    repr_bind_attr_int rx503_cur, rx503_curclass, "$!pos", rx503_pos
    $P11 = rx503_cur."ws"()
    repr_get_attr_int $I11, $P11, rx503_curclass, "$!pos"
    lt $I11, 0, rx503_fail
    repr_get_attr_int rx503_pos, $P11, rx503_curclass, "$!pos"
    repr_bind_attr_int rx503_cur, rx503_curclass, "$!pos", rx503_pos
    $P11 = rx503_cur."variable"()
    repr_get_attr_int $I11, $P11, rx503_curclass, "$!pos"
    lt $I11, 0, rx503_fail
    nqp_rxmark rx503_bstack, rxsubrule510_pass, -1, 0
  rxsubrule510_pass:
    rx503_cstack = rx503_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx503_pos, $P11, rx503_curclass, "$!pos"
    repr_bind_attr_int rx503_cur, rx503_curclass, "$!pos", rx503_pos
    $P11 = rx503_cur."ws"()
    repr_get_attr_int $I11, $P11, rx503_curclass, "$!pos"
    lt $I11, 0, rx503_fail
    repr_get_attr_int rx503_pos, $P11, rx503_curclass, "$!pos"
    repr_bind_attr_int rx503_cur, rx503_curclass, "$!pos", rx503_pos
    store_lex unicode:"$\x{a2}", rx503_cur
    find_lex $P110, unicode:"$\x{a2}"
    $P111 = $P110."MATCH"()
    store_lex "$/", $P111
.annotate 'line', 1045
    .const 'Sub' $P1979 = "541_1337966799.879" 
    capture_lex $P1979
    $P113 = $P1979()
.annotate 'line', 1041
    repr_bind_attr_int rx503_cur, rx503_curclass, "$!pos", rx503_pos
    $P11 = rx503_cur."ws"()
    repr_get_attr_int $I11, $P11, rx503_curclass, "$!pos"
    lt $I11, 0, rx503_fail
    repr_get_attr_int rx503_pos, $P11, rx503_curclass, "$!pos"
  # rx rxquantr513 ** 0..-1
    nqp_rxmark rx503_bstack, rxquantr513_done, rx503_pos, 0
  rxquantr513_loop:
    repr_bind_attr_int rx503_cur, rx503_curclass, "$!pos", rx503_pos
    $P11 = rx503_cur."trait"()
    repr_get_attr_int $I11, $P11, rx503_curclass, "$!pos"
    lt $I11, 0, rx503_fail
    goto rxsubrule514_pass
  rxsubrule514_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx503_curclass, "$!pos"
    lt $I11, 0, rx503_fail
  rxsubrule514_pass:
    rx503_cstack = rx503_cur."!cursor_capture"($P11, "trait")
    set_addr $I11, rxsubrule514_back
    push rx503_bstack, $I11
    push rx503_bstack, 0
    push rx503_bstack, rx503_pos
    elements $I11, rx503_cstack
    push rx503_bstack, $I11
    repr_get_attr_int rx503_pos, $P11, rx503_curclass, "$!pos"
    nqp_rxpeek $I19, rx503_bstack, rxquantr513_done
    inc $I19
    inc $I19
    set rx503_rep, rx503_bstack[$I19]
    nqp_rxcommit rx503_bstack, rxquantr513_done
    inc rx503_rep
    nqp_rxmark rx503_bstack, rxquantr513_done, rx503_pos, rx503_rep
    goto rxquantr513_loop
  rxquantr513_done:
    repr_bind_attr_int rx503_cur, rx503_curclass, "$!pos", rx503_pos
    $P11 = rx503_cur."ws"()
    repr_get_attr_int $I11, $P11, rx503_curclass, "$!pos"
    lt $I11, 0, rx503_fail
    repr_get_attr_int rx503_pos, $P11, rx503_curclass, "$!pos"
    rx503_cur."!cursor_pass"(rx503_pos, "variable_declarator", 'backtrack'=>1)
    .return (rx503_cur)
  rx503_restart:
    repr_get_attr_obj rx503_cstack, rx503_cur, rx503_curclass, "$!cstack"
  rx503_fail:
    unless rx503_bstack, rx503_done
    pop $I19, rx503_bstack
    if_null rx503_cstack, rx503_cstack_done
    unless rx503_cstack, rx503_cstack_done
    dec $I19
    set $P11, rx503_cstack[$I19]
  rx503_cstack_done:
    pop rx503_rep, rx503_bstack
    pop rx503_pos, rx503_bstack
    pop $I19, rx503_bstack
    lt rx503_pos, -1, rx503_done
    lt rx503_pos, 0, rx503_fail
    eq $I19, 0, rx503_fail
    if_null rx503_cstack, rx503_jump
    elements $I18, rx503_bstack
    le $I18, 0, rx503_cut
    dec $I18
    set $I18, rx503_bstack[$I18]
  rx503_cut:
    assign rx503_cstack, $I18
  rx503_jump:
    jump $I19
  rx503_done:
    rx503_cur."!cursor_fail"()
    .return (rx503_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "123_1337966799.879_caps"  :subid("540_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1041
    new $P105, "Hash"
    set $P105["typename"], 2
    set $P105["variable"], 0
    set $P105["trait"], 2
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1978"  :anon :subid("541_1337966799.879") :outer("123_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1045
    new $P112, "Float"
    assign $P112, 0
    store_dynamic_lex "$*IN_DECL", $P112
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "routine_declarator"  :subid("124_1337966799.879")
    .param pmc param_1981
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1049
    .lex "self", param_1981
    $P103 = param_1981."!protoregex"("routine_declarator")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "routine_declarator:sym<sub>"  :subid("125_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1983
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1050
    .lex "self", param_1983
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1984
    .lex "$/", $P1985
    .local string rx516_tgt
    .local int rx516_pos
    .local int rx516_off
    .local int rx516_eos
    .local int rx516_rep
    .local pmc rx516_cur
    .local pmc rx516_curclass
    .local pmc rx516_bstack
    .local pmc rx516_cstack
    (rx516_cur, rx516_tgt, rx516_pos, rx516_curclass, rx516_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx516_cur
    length rx516_eos, rx516_tgt
    eq $I19, 1, rx516_restart
    repr_get_attr_int $I11, self, rx516_curclass, "$!from"
    ne $I11, -1, rxscan517_done
    goto rxscan517_scan
  rxscan517_loop:
    inc rx516_pos
    gt rx516_pos, rx516_eos, rx516_fail
    repr_bind_attr_int rx516_cur, rx516_curclass, "$!from", rx516_pos
  rxscan517_scan:
    nqp_rxmark rx516_bstack, rxscan517_loop, rx516_pos, 0
  rxscan517_done:
    nqp_rxmark rx516_bstack, rxcap518_fail, rx516_pos, 0
    add $I11, rx516_pos, 3
    gt $I11, rx516_eos, rx516_fail
    substr $S10, rx516_tgt, rx516_pos, 3
    ne $S10, ucs4:"sub", rx516_fail
    add rx516_pos, 3
    nqp_rxpeek $I19, rx516_bstack, rxcap518_fail
    inc $I19
    set $I11, rx516_bstack[$I19]
    $P11 = rx516_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx516_pos)
    rx516_cstack = rx516_cur."!cursor_capture"($P11, "sym")
    goto rxcap518_done
  rxcap518_fail:
    goto rx516_fail
  rxcap518_done:
    repr_bind_attr_int rx516_cur, rx516_curclass, "$!pos", rx516_pos
    $P11 = rx516_cur."routine_def"()
    repr_get_attr_int $I11, $P11, rx516_curclass, "$!pos"
    lt $I11, 0, rx516_fail
    nqp_rxmark rx516_bstack, rxsubrule519_pass, -1, 0
  rxsubrule519_pass:
    rx516_cstack = rx516_cur."!cursor_capture"($P11, "routine_def")
    repr_get_attr_int rx516_pos, $P11, rx516_curclass, "$!pos"
    rx516_cur."!cursor_pass"(rx516_pos, "routine_declarator:sym<sub>", 'backtrack'=>1)
    .return (rx516_cur)
  rx516_restart:
    repr_get_attr_obj rx516_cstack, rx516_cur, rx516_curclass, "$!cstack"
  rx516_fail:
    unless rx516_bstack, rx516_done
    pop $I19, rx516_bstack
    if_null rx516_cstack, rx516_cstack_done
    unless rx516_cstack, rx516_cstack_done
    dec $I19
    set $P11, rx516_cstack[$I19]
  rx516_cstack_done:
    pop rx516_rep, rx516_bstack
    pop rx516_pos, rx516_bstack
    pop $I19, rx516_bstack
    lt rx516_pos, -1, rx516_done
    lt rx516_pos, 0, rx516_fail
    eq $I19, 0, rx516_fail
    if_null rx516_cstack, rx516_jump
    elements $I18, rx516_bstack
    le $I18, 0, rx516_cut
    dec $I18
    set $I18, rx516_bstack[$I18]
  rx516_cut:
    assign rx516_cstack, $I18
  rx516_jump:
    jump $I19
  rx516_done:
    rx516_cur."!cursor_fail"()
    .return (rx516_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "125_1337966799.879_caps"  :subid("542_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1050
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["routine_def"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "125_1337966799.879_nfa"  :subid("543_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1050
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 115
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 117
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 98
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "routine_def"
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "routine_declarator:sym<method>"  :subid("126_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1989
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1051
    .lex "self", param_1989
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P1990
    .lex "$/", $P1991
    .local string rx520_tgt
    .local int rx520_pos
    .local int rx520_off
    .local int rx520_eos
    .local int rx520_rep
    .local pmc rx520_cur
    .local pmc rx520_curclass
    .local pmc rx520_bstack
    .local pmc rx520_cstack
    (rx520_cur, rx520_tgt, rx520_pos, rx520_curclass, rx520_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx520_cur
    length rx520_eos, rx520_tgt
    eq $I19, 1, rx520_restart
    repr_get_attr_int $I11, self, rx520_curclass, "$!from"
    ne $I11, -1, rxscan521_done
    goto rxscan521_scan
  rxscan521_loop:
    inc rx520_pos
    gt rx520_pos, rx520_eos, rx520_fail
    repr_bind_attr_int rx520_cur, rx520_curclass, "$!from", rx520_pos
  rxscan521_scan:
    nqp_rxmark rx520_bstack, rxscan521_loop, rx520_pos, 0
  rxscan521_done:
    nqp_rxmark rx520_bstack, rxcap522_fail, rx520_pos, 0
    add $I11, rx520_pos, 6
    gt $I11, rx520_eos, rx520_fail
    substr $S10, rx520_tgt, rx520_pos, 6
    ne $S10, ucs4:"method", rx520_fail
    add rx520_pos, 6
    nqp_rxpeek $I19, rx520_bstack, rxcap522_fail
    inc $I19
    set $I11, rx520_bstack[$I19]
    $P11 = rx520_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx520_pos)
    rx520_cstack = rx520_cur."!cursor_capture"($P11, "sym")
    goto rxcap522_done
  rxcap522_fail:
    goto rx520_fail
  rxcap522_done:
    repr_bind_attr_int rx520_cur, rx520_curclass, "$!pos", rx520_pos
    $P11 = rx520_cur."method_def"()
    repr_get_attr_int $I11, $P11, rx520_curclass, "$!pos"
    lt $I11, 0, rx520_fail
    nqp_rxmark rx520_bstack, rxsubrule523_pass, -1, 0
  rxsubrule523_pass:
    rx520_cstack = rx520_cur."!cursor_capture"($P11, "method_def")
    repr_get_attr_int rx520_pos, $P11, rx520_curclass, "$!pos"
    rx520_cur."!cursor_pass"(rx520_pos, "routine_declarator:sym<method>", 'backtrack'=>1)
    .return (rx520_cur)
  rx520_restart:
    repr_get_attr_obj rx520_cstack, rx520_cur, rx520_curclass, "$!cstack"
  rx520_fail:
    unless rx520_bstack, rx520_done
    pop $I19, rx520_bstack
    if_null rx520_cstack, rx520_cstack_done
    unless rx520_cstack, rx520_cstack_done
    dec $I19
    set $P11, rx520_cstack[$I19]
  rx520_cstack_done:
    pop rx520_rep, rx520_bstack
    pop rx520_pos, rx520_bstack
    pop $I19, rx520_bstack
    lt rx520_pos, -1, rx520_done
    lt rx520_pos, 0, rx520_fail
    eq $I19, 0, rx520_fail
    if_null rx520_cstack, rx520_jump
    elements $I18, rx520_bstack
    le $I18, 0, rx520_cut
    dec $I18
    set $I18, rx520_bstack[$I18]
  rx520_cut:
    assign rx520_cstack, $I18
  rx520_jump:
    jump $I19
  rx520_done:
    rx520_cur."!cursor_fail"()
    .return (rx520_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "126_1337966799.879_caps"  :subid("544_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1051
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["method_def"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "126_1337966799.879_nfa"  :subid("545_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1051
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 109
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 101
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 116
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 104
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 111
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 100
    push $P110, 7
    new $P111, "ResizablePMCArray"
    push $P111, 8
    push $P111, "method_def"
    push $P111, 0
    new $P112, "ResizablePMCArray"
    push $P112, $P104
    push $P112, $P105
    push $P112, $P106
    push $P112, $P107
    push $P112, $P108
    push $P112, $P109
    push $P112, $P110
    push $P112, $P111
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "routine_def"  :subid("127_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_1995
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1053
    .lex "self", param_1995
.annotate 'line', 1054
    new $P103, "Undef"
    set $P1996, $P103
    .lex "$*RETURN_USED", $P1996
    .local pmc self
    find_lex $P104, "self"
    set self, $P104
    .lex unicode:"$\x{a2}", $P1997
    .lex "$/", $P1998
.annotate 'line', 1053
    .local string rx524_tgt
    .local int rx524_pos
    .local int rx524_off
    .local int rx524_eos
    .local int rx524_rep
    .local pmc rx524_cur
    .local pmc rx524_curclass
    .local pmc rx524_bstack
    .local pmc rx524_cstack
    (rx524_cur, rx524_tgt, rx524_pos, rx524_curclass, rx524_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx524_cur
    length rx524_eos, rx524_tgt
    eq $I19, 1, rx524_restart
    repr_get_attr_int $I11, self, rx524_curclass, "$!from"
    ne $I11, -1, rxscan525_done
    goto rxscan525_scan
  rxscan525_loop:
    inc rx524_pos
    gt rx524_pos, rx524_eos, rx524_fail
    repr_bind_attr_int rx524_cur, rx524_curclass, "$!from", rx524_pos
  rxscan525_scan:
    nqp_rxmark rx524_bstack, rxscan525_loop, rx524_pos, 0
  rxscan525_done:
    repr_bind_attr_int rx524_cur, rx524_curclass, "$!pos", rx524_pos
    $P11 = rx524_cur."ws"()
    repr_get_attr_int $I11, $P11, rx524_curclass, "$!pos"
    lt $I11, 0, rx524_fail
    repr_get_attr_int rx524_pos, $P11, rx524_curclass, "$!pos"
    repr_bind_attr_int rx524_cur, rx524_curclass, "$!pos", rx524_pos
    store_lex unicode:"$\x{a2}", rx524_cur
.annotate 'line', 1054
    new $P106, "Float"
    assign $P106, 0
    set $P1996, $P106
.annotate 'line', 1053
    repr_bind_attr_int rx524_cur, rx524_curclass, "$!pos", rx524_pos
    $P11 = rx524_cur."ws"()
    repr_get_attr_int $I11, $P11, rx524_curclass, "$!pos"
    lt $I11, 0, rx524_fail
    repr_get_attr_int rx524_pos, $P11, rx524_curclass, "$!pos"
  # rx rxquantr528 ** 0..1
    nqp_rxmark rx524_bstack, rxquantr528_done, rx524_pos, 0
  rxquantr528_loop:
    repr_bind_attr_int rx524_cur, rx524_curclass, "$!pos", rx524_pos
    $P11 = rx524_cur."ws"()
    repr_get_attr_int $I11, $P11, rx524_curclass, "$!pos"
    lt $I11, 0, rx524_fail
    repr_get_attr_int rx524_pos, $P11, rx524_curclass, "$!pos"
    nqp_rxmark rx524_bstack, rxcap530_fail, rx524_pos, 0
  # rx rxquantr531 ** 0..1
    nqp_rxmark rx524_bstack, rxquantr531_done, rx524_pos, 0
  rxquantr531_loop:
    add $I11, rx524_pos, 1
    gt $I11, rx524_eos, rx524_fail
    substr $S10, rx524_tgt, rx524_pos, 1
    ne $S10, ucs4:"&", rx524_fail
    add rx524_pos, 1
    nqp_rxpeek $I19, rx524_bstack, rxquantr531_done
    inc $I19
    inc $I19
    set rx524_rep, rx524_bstack[$I19]
    nqp_rxcommit rx524_bstack, rxquantr531_done
    inc rx524_rep
  rxquantr531_done:
    nqp_rxpeek $I19, rx524_bstack, rxcap530_fail
    inc $I19
    set $I11, rx524_bstack[$I19]
    $P11 = rx524_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx524_pos)
    rx524_cstack = rx524_cur."!cursor_capture"($P11, "sigil")
    goto rxcap530_done
  rxcap530_fail:
    goto rx524_fail
  rxcap530_done:
    repr_bind_attr_int rx524_cur, rx524_curclass, "$!pos", rx524_pos
    $P11 = rx524_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx524_curclass, "$!pos"
    lt $I11, 0, rx524_fail
    nqp_rxmark rx524_bstack, rxsubrule532_pass, -1, 0
  rxsubrule532_pass:
    rx524_cstack = rx524_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx524_pos, $P11, rx524_curclass, "$!pos"
    repr_bind_attr_int rx524_cur, rx524_curclass, "$!pos", rx524_pos
    $P11 = rx524_cur."ws"()
    repr_get_attr_int $I11, $P11, rx524_curclass, "$!pos"
    lt $I11, 0, rx524_fail
    repr_get_attr_int rx524_pos, $P11, rx524_curclass, "$!pos"
    nqp_rxpeek $I19, rx524_bstack, rxquantr528_done
    inc $I19
    inc $I19
    set rx524_rep, rx524_bstack[$I19]
    nqp_rxcommit rx524_bstack, rxquantr528_done
    inc rx524_rep
  rxquantr528_done:
    repr_bind_attr_int rx524_cur, rx524_curclass, "$!pos", rx524_pos
    $P11 = rx524_cur."ws"()
    repr_get_attr_int $I11, $P11, rx524_curclass, "$!pos"
    lt $I11, 0, rx524_fail
    repr_get_attr_int rx524_pos, $P11, rx524_curclass, "$!pos"
    repr_bind_attr_int rx524_cur, rx524_curclass, "$!pos", rx524_pos
    $P11 = rx524_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx524_curclass, "$!pos"
    lt $I11, 0, rx524_fail
    repr_get_attr_int rx524_pos, $P11, rx524_curclass, "$!pos"
    repr_bind_attr_int rx524_cur, rx524_curclass, "$!pos", rx524_pos
    $P11 = rx524_cur."ws"()
    repr_get_attr_int $I11, $P11, rx524_curclass, "$!pos"
    lt $I11, 0, rx524_fail
    repr_get_attr_int rx524_pos, $P11, rx524_curclass, "$!pos"
  alt537_0:
    nqp_rxmark rx524_bstack, alt537_1, rx524_pos, 0
    repr_bind_attr_int rx524_cur, rx524_curclass, "$!pos", rx524_pos
    $P11 = rx524_cur."ws"()
    repr_get_attr_int $I11, $P11, rx524_curclass, "$!pos"
    lt $I11, 0, rx524_fail
    repr_get_attr_int rx524_pos, $P11, rx524_curclass, "$!pos"
    add $I11, rx524_pos, 1
    gt $I11, rx524_eos, rx524_fail
    substr $S10, rx524_tgt, rx524_pos, 1
    ne $S10, ucs4:"(", rx524_fail
    add rx524_pos, 1
    repr_bind_attr_int rx524_cur, rx524_curclass, "$!pos", rx524_pos
    $P11 = rx524_cur."ws"()
    repr_get_attr_int $I11, $P11, rx524_curclass, "$!pos"
    lt $I11, 0, rx524_fail
    repr_get_attr_int rx524_pos, $P11, rx524_curclass, "$!pos"
    repr_bind_attr_int rx524_cur, rx524_curclass, "$!pos", rx524_pos
    $P11 = rx524_cur."signature"()
    repr_get_attr_int $I11, $P11, rx524_curclass, "$!pos"
    lt $I11, 0, rx524_fail
    nqp_rxmark rx524_bstack, rxsubrule540_pass, -1, 0
  rxsubrule540_pass:
    rx524_cstack = rx524_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx524_pos, $P11, rx524_curclass, "$!pos"
    repr_bind_attr_int rx524_cur, rx524_curclass, "$!pos", rx524_pos
    $P11 = rx524_cur."ws"()
    repr_get_attr_int $I11, $P11, rx524_curclass, "$!pos"
    lt $I11, 0, rx524_fail
    repr_get_attr_int rx524_pos, $P11, rx524_curclass, "$!pos"
    add $I11, rx524_pos, 1
    gt $I11, rx524_eos, rx524_fail
    substr $S10, rx524_tgt, rx524_pos, 1
    ne $S10, ucs4:")", rx524_fail
    add rx524_pos, 1
    repr_bind_attr_int rx524_cur, rx524_curclass, "$!pos", rx524_pos
    $P11 = rx524_cur."ws"()
    repr_get_attr_int $I11, $P11, rx524_curclass, "$!pos"
    lt $I11, 0, rx524_fail
    repr_get_attr_int rx524_pos, $P11, rx524_curclass, "$!pos"
    goto alt537_end
  alt537_1:
    repr_bind_attr_int rx524_cur, rx524_curclass, "$!pos", rx524_pos
    $P11 = rx524_cur."ws"()
    repr_get_attr_int $I11, $P11, rx524_curclass, "$!pos"
    lt $I11, 0, rx524_fail
    repr_get_attr_int rx524_pos, $P11, rx524_curclass, "$!pos"
    repr_bind_attr_int rx524_cur, rx524_curclass, "$!pos", rx524_pos
    $P11 = rx524_cur."panic"("Routine declaration requires a signature")
    repr_get_attr_int $I11, $P11, rx524_curclass, "$!pos"
    lt $I11, 0, rx524_fail
    repr_get_attr_int rx524_pos, $P11, rx524_curclass, "$!pos"
    repr_bind_attr_int rx524_cur, rx524_curclass, "$!pos", rx524_pos
    $P11 = rx524_cur."ws"()
    repr_get_attr_int $I11, $P11, rx524_curclass, "$!pos"
    lt $I11, 0, rx524_fail
    repr_get_attr_int rx524_pos, $P11, rx524_curclass, "$!pos"
  alt537_end:
    repr_bind_attr_int rx524_cur, rx524_curclass, "$!pos", rx524_pos
    $P11 = rx524_cur."ws"()
    repr_get_attr_int $I11, $P11, rx524_curclass, "$!pos"
    lt $I11, 0, rx524_fail
    repr_get_attr_int rx524_pos, $P11, rx524_curclass, "$!pos"
  # rx rxquantr547 ** 0..-1
    nqp_rxmark rx524_bstack, rxquantr547_done, rx524_pos, 0
  rxquantr547_loop:
    repr_bind_attr_int rx524_cur, rx524_curclass, "$!pos", rx524_pos
    $P11 = rx524_cur."trait"()
    repr_get_attr_int $I11, $P11, rx524_curclass, "$!pos"
    lt $I11, 0, rx524_fail
    goto rxsubrule548_pass
  rxsubrule548_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx524_curclass, "$!pos"
    lt $I11, 0, rx524_fail
  rxsubrule548_pass:
    rx524_cstack = rx524_cur."!cursor_capture"($P11, "trait")
    set_addr $I11, rxsubrule548_back
    push rx524_bstack, $I11
    push rx524_bstack, 0
    push rx524_bstack, rx524_pos
    elements $I11, rx524_cstack
    push rx524_bstack, $I11
    repr_get_attr_int rx524_pos, $P11, rx524_curclass, "$!pos"
    nqp_rxpeek $I19, rx524_bstack, rxquantr547_done
    inc $I19
    inc $I19
    set rx524_rep, rx524_bstack[$I19]
    nqp_rxcommit rx524_bstack, rxquantr547_done
    inc rx524_rep
    nqp_rxmark rx524_bstack, rxquantr547_done, rx524_pos, rx524_rep
    goto rxquantr547_loop
  rxquantr547_done:
    repr_bind_attr_int rx524_cur, rx524_curclass, "$!pos", rx524_pos
    $P11 = rx524_cur."ws"()
    repr_get_attr_int $I11, $P11, rx524_curclass, "$!pos"
    lt $I11, 0, rx524_fail
    repr_get_attr_int rx524_pos, $P11, rx524_curclass, "$!pos"
  alt550_0:
    nqp_rxmark rx524_bstack, alt550_1, rx524_pos, 0
    repr_bind_attr_int rx524_cur, rx524_curclass, "$!pos", rx524_pos
    $P11 = rx524_cur."ws"()
    repr_get_attr_int $I11, $P11, rx524_curclass, "$!pos"
    lt $I11, 0, rx524_fail
    repr_get_attr_int rx524_pos, $P11, rx524_curclass, "$!pos"
    repr_bind_attr_int rx524_cur, rx524_curclass, "$!pos", rx524_pos
    $P11 = rx524_cur."onlystar"()
    repr_get_attr_int $I11, $P11, rx524_curclass, "$!pos"
    lt $I11, 0, rx524_fail
    nqp_rxmark rx524_bstack, rxsubrule552_pass, -1, 0
  rxsubrule552_pass:
    rx524_cstack = rx524_cur."!cursor_capture"($P11, "onlystar")
    repr_get_attr_int rx524_pos, $P11, rx524_curclass, "$!pos"
    repr_bind_attr_int rx524_cur, rx524_curclass, "$!pos", rx524_pos
    $P11 = rx524_cur."ws"()
    repr_get_attr_int $I11, $P11, rx524_curclass, "$!pos"
    lt $I11, 0, rx524_fail
    repr_get_attr_int rx524_pos, $P11, rx524_curclass, "$!pos"
    goto alt550_end
  alt550_1:
    repr_bind_attr_int rx524_cur, rx524_curclass, "$!pos", rx524_pos
    $P11 = rx524_cur."ws"()
    repr_get_attr_int $I11, $P11, rx524_curclass, "$!pos"
    lt $I11, 0, rx524_fail
    repr_get_attr_int rx524_pos, $P11, rx524_curclass, "$!pos"
    repr_bind_attr_int rx524_cur, rx524_curclass, "$!pos", rx524_pos
    $P11 = rx524_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx524_curclass, "$!pos"
    lt $I11, 0, rx524_fail
    nqp_rxmark rx524_bstack, rxsubrule555_pass, -1, 0
  rxsubrule555_pass:
    rx524_cstack = rx524_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx524_pos, $P11, rx524_curclass, "$!pos"
    repr_bind_attr_int rx524_cur, rx524_curclass, "$!pos", rx524_pos
    $P11 = rx524_cur."ws"()
    repr_get_attr_int $I11, $P11, rx524_curclass, "$!pos"
    lt $I11, 0, rx524_fail
    repr_get_attr_int rx524_pos, $P11, rx524_curclass, "$!pos"
  alt550_end:
    repr_bind_attr_int rx524_cur, rx524_curclass, "$!pos", rx524_pos
    $P11 = rx524_cur."ws"()
    repr_get_attr_int $I11, $P11, rx524_curclass, "$!pos"
    lt $I11, 0, rx524_fail
    repr_get_attr_int rx524_pos, $P11, rx524_curclass, "$!pos"
    rx524_cur."!cursor_pass"(rx524_pos, "routine_def", 'backtrack'=>1)
    .return (rx524_cur)
  rx524_restart:
    repr_get_attr_obj rx524_cstack, rx524_cur, rx524_curclass, "$!cstack"
  rx524_fail:
    unless rx524_bstack, rx524_done
    pop $I19, rx524_bstack
    if_null rx524_cstack, rx524_cstack_done
    unless rx524_cstack, rx524_cstack_done
    dec $I19
    set $P11, rx524_cstack[$I19]
  rx524_cstack_done:
    pop rx524_rep, rx524_bstack
    pop rx524_pos, rx524_bstack
    pop $I19, rx524_bstack
    lt rx524_pos, -1, rx524_done
    lt rx524_pos, 0, rx524_fail
    eq $I19, 0, rx524_fail
    if_null rx524_cstack, rx524_jump
    elements $I18, rx524_bstack
    le $I18, 0, rx524_cut
    dec $I18
    set $I18, rx524_bstack[$I18]
  rx524_cut:
    assign rx524_cstack, $I18
  rx524_jump:
    jump $I19
  rx524_done:
    rx524_cur."!cursor_fail"()
    .return (rx524_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "127_1337966799.879_caps"  :subid("546_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1053
    new $P105, "Hash"
    set $P105["sigil"], 2
    set $P105["deflongname"], 2
    set $P105["signature"], 0
    set $P105["trait"], 2
    set $P105["onlystar"], 0
    set $P105["blockoid"], 0
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "method_def"  :subid("128_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2001
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1066
    .const 'Sub' $P2008 = "548_1337966799.879" 
    capture_lex $P2008
    .lex "self", param_2001
.annotate 'line', 1067
    new $P103, "Undef"
    set $P2002, $P103
    .lex "$*RETURN_USED", $P2002
.annotate 'line', 1068
    new $P104, "Undef"
    set $P2003, $P104
    .lex "$*INVOCANT_OK", $P2003
    .local pmc self
    find_lex $P105, "self"
    set self, $P105
    .lex unicode:"$\x{a2}", $P2004
    .lex "$/", $P2005
.annotate 'line', 1066
    .local string rx558_tgt
    .local int rx558_pos
    .local int rx558_off
    .local int rx558_eos
    .local int rx558_rep
    .local pmc rx558_cur
    .local pmc rx558_curclass
    .local pmc rx558_bstack
    .local pmc rx558_cstack
    (rx558_cur, rx558_tgt, rx558_pos, rx558_curclass, rx558_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx558_cur
    length rx558_eos, rx558_tgt
    eq $I19, 1, rx558_restart
    repr_get_attr_int $I11, self, rx558_curclass, "$!from"
    ne $I11, -1, rxscan559_done
    goto rxscan559_scan
  rxscan559_loop:
    inc rx558_pos
    gt rx558_pos, rx558_eos, rx558_fail
    repr_bind_attr_int rx558_cur, rx558_curclass, "$!from", rx558_pos
  rxscan559_scan:
    nqp_rxmark rx558_bstack, rxscan559_loop, rx558_pos, 0
  rxscan559_done:
    repr_bind_attr_int rx558_cur, rx558_curclass, "$!pos", rx558_pos
    $P11 = rx558_cur."ws"()
    repr_get_attr_int $I11, $P11, rx558_curclass, "$!pos"
    lt $I11, 0, rx558_fail
    repr_get_attr_int rx558_pos, $P11, rx558_curclass, "$!pos"
    repr_bind_attr_int rx558_cur, rx558_curclass, "$!pos", rx558_pos
    store_lex unicode:"$\x{a2}", rx558_cur
.annotate 'line', 1067
    new $P107, "Float"
    assign $P107, 0
    set $P2002, $P107
.annotate 'line', 1066
    repr_bind_attr_int rx558_cur, rx558_curclass, "$!pos", rx558_pos
    $P11 = rx558_cur."ws"()
    repr_get_attr_int $I11, $P11, rx558_curclass, "$!pos"
    lt $I11, 0, rx558_fail
    repr_get_attr_int rx558_pos, $P11, rx558_curclass, "$!pos"
    repr_bind_attr_int rx558_cur, rx558_curclass, "$!pos", rx558_pos
    store_lex unicode:"$\x{a2}", rx558_cur
.annotate 'line', 1068
    new $P109, "Float"
    assign $P109, 1
    set $P2003, $P109
.annotate 'line', 1066
    repr_bind_attr_int rx558_cur, rx558_curclass, "$!pos", rx558_pos
    $P11 = rx558_cur."ws"()
    repr_get_attr_int $I11, $P11, rx558_curclass, "$!pos"
    lt $I11, 0, rx558_fail
    repr_get_attr_int rx558_pos, $P11, rx558_curclass, "$!pos"
    nqp_rxmark rx558_bstack, rxcap563_fail, rx558_pos, 0
  # rx rxquantr564 ** 0..1
    nqp_rxmark rx558_bstack, rxquantr564_done, rx558_pos, 0
  rxquantr564_loop:
    add $I11, rx558_pos, 1
    gt $I11, rx558_eos, rx558_fail
    substr $S10, rx558_tgt, rx558_pos, 1
    ne $S10, ucs4:"!", rx558_fail
    add rx558_pos, 1
    nqp_rxpeek $I19, rx558_bstack, rxquantr564_done
    inc $I19
    inc $I19
    set rx558_rep, rx558_bstack[$I19]
    nqp_rxcommit rx558_bstack, rxquantr564_done
    inc rx558_rep
  rxquantr564_done:
    nqp_rxpeek $I19, rx558_bstack, rxcap563_fail
    inc $I19
    set $I11, rx558_bstack[$I19]
    $P11 = rx558_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx558_pos)
    rx558_cstack = rx558_cur."!cursor_capture"($P11, "private")
    goto rxcap563_done
  rxcap563_fail:
    goto rx558_fail
  rxcap563_done:
    repr_bind_attr_int rx558_cur, rx558_curclass, "$!pos", rx558_pos
    $P11 = rx558_cur."ws"()
    repr_get_attr_int $I11, $P11, rx558_curclass, "$!pos"
    lt $I11, 0, rx558_fail
    repr_get_attr_int rx558_pos, $P11, rx558_curclass, "$!pos"
  # rx rxquantr566 ** 0..1
    nqp_rxmark rx558_bstack, rxquantr566_done, rx558_pos, 0
  rxquantr566_loop:
    repr_bind_attr_int rx558_cur, rx558_curclass, "$!pos", rx558_pos
    $P11 = rx558_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx558_curclass, "$!pos"
    lt $I11, 0, rx558_fail
    goto rxsubrule567_pass
  rxsubrule567_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx558_curclass, "$!pos"
    lt $I11, 0, rx558_fail
  rxsubrule567_pass:
    rx558_cstack = rx558_cur."!cursor_capture"($P11, "deflongname")
    set_addr $I11, rxsubrule567_back
    push rx558_bstack, $I11
    push rx558_bstack, 0
    push rx558_bstack, rx558_pos
    elements $I11, rx558_cstack
    push rx558_bstack, $I11
    repr_get_attr_int rx558_pos, $P11, rx558_curclass, "$!pos"
    nqp_rxpeek $I19, rx558_bstack, rxquantr566_done
    inc $I19
    inc $I19
    set rx558_rep, rx558_bstack[$I19]
    nqp_rxcommit rx558_bstack, rxquantr566_done
    inc rx558_rep
  rxquantr566_done:
    repr_bind_attr_int rx558_cur, rx558_curclass, "$!pos", rx558_pos
    $P11 = rx558_cur."ws"()
    repr_get_attr_int $I11, $P11, rx558_curclass, "$!pos"
    lt $I11, 0, rx558_fail
    repr_get_attr_int rx558_pos, $P11, rx558_curclass, "$!pos"
    repr_bind_attr_int rx558_cur, rx558_curclass, "$!pos", rx558_pos
    $P11 = rx558_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx558_curclass, "$!pos"
    lt $I11, 0, rx558_fail
    repr_get_attr_int rx558_pos, $P11, rx558_curclass, "$!pos"
    repr_bind_attr_int rx558_cur, rx558_curclass, "$!pos", rx558_pos
    $P11 = rx558_cur."ws"()
    repr_get_attr_int $I11, $P11, rx558_curclass, "$!pos"
    lt $I11, 0, rx558_fail
    repr_get_attr_int rx558_pos, $P11, rx558_curclass, "$!pos"
  alt571_0:
    nqp_rxmark rx558_bstack, alt571_1, rx558_pos, 0
    repr_bind_attr_int rx558_cur, rx558_curclass, "$!pos", rx558_pos
    $P11 = rx558_cur."ws"()
    repr_get_attr_int $I11, $P11, rx558_curclass, "$!pos"
    lt $I11, 0, rx558_fail
    repr_get_attr_int rx558_pos, $P11, rx558_curclass, "$!pos"
    add $I11, rx558_pos, 1
    gt $I11, rx558_eos, rx558_fail
    substr $S10, rx558_tgt, rx558_pos, 1
    ne $S10, ucs4:"(", rx558_fail
    add rx558_pos, 1
    repr_bind_attr_int rx558_cur, rx558_curclass, "$!pos", rx558_pos
    $P11 = rx558_cur."ws"()
    repr_get_attr_int $I11, $P11, rx558_curclass, "$!pos"
    lt $I11, 0, rx558_fail
    repr_get_attr_int rx558_pos, $P11, rx558_curclass, "$!pos"
    repr_bind_attr_int rx558_cur, rx558_curclass, "$!pos", rx558_pos
    $P11 = rx558_cur."signature"()
    repr_get_attr_int $I11, $P11, rx558_curclass, "$!pos"
    lt $I11, 0, rx558_fail
    nqp_rxmark rx558_bstack, rxsubrule574_pass, -1, 0
  rxsubrule574_pass:
    rx558_cstack = rx558_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx558_pos, $P11, rx558_curclass, "$!pos"
    repr_bind_attr_int rx558_cur, rx558_curclass, "$!pos", rx558_pos
    $P11 = rx558_cur."ws"()
    repr_get_attr_int $I11, $P11, rx558_curclass, "$!pos"
    lt $I11, 0, rx558_fail
    repr_get_attr_int rx558_pos, $P11, rx558_curclass, "$!pos"
    add $I11, rx558_pos, 1
    gt $I11, rx558_eos, rx558_fail
    substr $S10, rx558_tgt, rx558_pos, 1
    ne $S10, ucs4:")", rx558_fail
    add rx558_pos, 1
    repr_bind_attr_int rx558_cur, rx558_curclass, "$!pos", rx558_pos
    $P11 = rx558_cur."ws"()
    repr_get_attr_int $I11, $P11, rx558_curclass, "$!pos"
    lt $I11, 0, rx558_fail
    repr_get_attr_int rx558_pos, $P11, rx558_curclass, "$!pos"
    goto alt571_end
  alt571_1:
    repr_bind_attr_int rx558_cur, rx558_curclass, "$!pos", rx558_pos
    $P11 = rx558_cur."ws"()
    repr_get_attr_int $I11, $P11, rx558_curclass, "$!pos"
    lt $I11, 0, rx558_fail
    repr_get_attr_int rx558_pos, $P11, rx558_curclass, "$!pos"
    repr_bind_attr_int rx558_cur, rx558_curclass, "$!pos", rx558_pos
    $P11 = rx558_cur."panic"("Routine declaration requires a signature")
    repr_get_attr_int $I11, $P11, rx558_curclass, "$!pos"
    lt $I11, 0, rx558_fail
    repr_get_attr_int rx558_pos, $P11, rx558_curclass, "$!pos"
    repr_bind_attr_int rx558_cur, rx558_curclass, "$!pos", rx558_pos
    $P11 = rx558_cur."ws"()
    repr_get_attr_int $I11, $P11, rx558_curclass, "$!pos"
    lt $I11, 0, rx558_fail
    repr_get_attr_int rx558_pos, $P11, rx558_curclass, "$!pos"
  alt571_end:
    repr_bind_attr_int rx558_cur, rx558_curclass, "$!pos", rx558_pos
    $P11 = rx558_cur."ws"()
    repr_get_attr_int $I11, $P11, rx558_curclass, "$!pos"
    lt $I11, 0, rx558_fail
    repr_get_attr_int rx558_pos, $P11, rx558_curclass, "$!pos"
    repr_bind_attr_int rx558_cur, rx558_curclass, "$!pos", rx558_pos
    store_lex unicode:"$\x{a2}", rx558_cur
    find_lex $P121, unicode:"$\x{a2}"
    $P122 = $P121."MATCH"()
    store_lex "$/", $P122
.annotate 'line', 1074
    .const 'Sub' $P2008 = "548_1337966799.879" 
    capture_lex $P2008
    $P124 = $P2008()
.annotate 'line', 1066
    repr_bind_attr_int rx558_cur, rx558_curclass, "$!pos", rx558_pos
    $P11 = rx558_cur."ws"()
    repr_get_attr_int $I11, $P11, rx558_curclass, "$!pos"
    lt $I11, 0, rx558_fail
    repr_get_attr_int rx558_pos, $P11, rx558_curclass, "$!pos"
  # rx rxquantr582 ** 0..-1
    nqp_rxmark rx558_bstack, rxquantr582_done, rx558_pos, 0
  rxquantr582_loop:
    repr_bind_attr_int rx558_cur, rx558_curclass, "$!pos", rx558_pos
    $P11 = rx558_cur."trait"()
    repr_get_attr_int $I11, $P11, rx558_curclass, "$!pos"
    lt $I11, 0, rx558_fail
    goto rxsubrule583_pass
  rxsubrule583_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx558_curclass, "$!pos"
    lt $I11, 0, rx558_fail
  rxsubrule583_pass:
    rx558_cstack = rx558_cur."!cursor_capture"($P11, "trait")
    set_addr $I11, rxsubrule583_back
    push rx558_bstack, $I11
    push rx558_bstack, 0
    push rx558_bstack, rx558_pos
    elements $I11, rx558_cstack
    push rx558_bstack, $I11
    repr_get_attr_int rx558_pos, $P11, rx558_curclass, "$!pos"
    nqp_rxpeek $I19, rx558_bstack, rxquantr582_done
    inc $I19
    inc $I19
    set rx558_rep, rx558_bstack[$I19]
    nqp_rxcommit rx558_bstack, rxquantr582_done
    inc rx558_rep
    nqp_rxmark rx558_bstack, rxquantr582_done, rx558_pos, rx558_rep
    goto rxquantr582_loop
  rxquantr582_done:
    repr_bind_attr_int rx558_cur, rx558_curclass, "$!pos", rx558_pos
    $P11 = rx558_cur."ws"()
    repr_get_attr_int $I11, $P11, rx558_curclass, "$!pos"
    lt $I11, 0, rx558_fail
    repr_get_attr_int rx558_pos, $P11, rx558_curclass, "$!pos"
  alt585_0:
    nqp_rxmark rx558_bstack, alt585_1, rx558_pos, 0
    repr_bind_attr_int rx558_cur, rx558_curclass, "$!pos", rx558_pos
    $P11 = rx558_cur."ws"()
    repr_get_attr_int $I11, $P11, rx558_curclass, "$!pos"
    lt $I11, 0, rx558_fail
    repr_get_attr_int rx558_pos, $P11, rx558_curclass, "$!pos"
    repr_bind_attr_int rx558_cur, rx558_curclass, "$!pos", rx558_pos
    $P11 = rx558_cur."onlystar"()
    repr_get_attr_int $I11, $P11, rx558_curclass, "$!pos"
    lt $I11, 0, rx558_fail
    nqp_rxmark rx558_bstack, rxsubrule587_pass, -1, 0
  rxsubrule587_pass:
    rx558_cstack = rx558_cur."!cursor_capture"($P11, "onlystar")
    repr_get_attr_int rx558_pos, $P11, rx558_curclass, "$!pos"
    repr_bind_attr_int rx558_cur, rx558_curclass, "$!pos", rx558_pos
    $P11 = rx558_cur."ws"()
    repr_get_attr_int $I11, $P11, rx558_curclass, "$!pos"
    lt $I11, 0, rx558_fail
    repr_get_attr_int rx558_pos, $P11, rx558_curclass, "$!pos"
    goto alt585_end
  alt585_1:
    repr_bind_attr_int rx558_cur, rx558_curclass, "$!pos", rx558_pos
    $P11 = rx558_cur."ws"()
    repr_get_attr_int $I11, $P11, rx558_curclass, "$!pos"
    lt $I11, 0, rx558_fail
    repr_get_attr_int rx558_pos, $P11, rx558_curclass, "$!pos"
    repr_bind_attr_int rx558_cur, rx558_curclass, "$!pos", rx558_pos
    $P11 = rx558_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx558_curclass, "$!pos"
    lt $I11, 0, rx558_fail
    nqp_rxmark rx558_bstack, rxsubrule590_pass, -1, 0
  rxsubrule590_pass:
    rx558_cstack = rx558_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx558_pos, $P11, rx558_curclass, "$!pos"
    repr_bind_attr_int rx558_cur, rx558_curclass, "$!pos", rx558_pos
    $P11 = rx558_cur."ws"()
    repr_get_attr_int $I11, $P11, rx558_curclass, "$!pos"
    lt $I11, 0, rx558_fail
    repr_get_attr_int rx558_pos, $P11, rx558_curclass, "$!pos"
  alt585_end:
    repr_bind_attr_int rx558_cur, rx558_curclass, "$!pos", rx558_pos
    $P11 = rx558_cur."ws"()
    repr_get_attr_int $I11, $P11, rx558_curclass, "$!pos"
    lt $I11, 0, rx558_fail
    repr_get_attr_int rx558_pos, $P11, rx558_curclass, "$!pos"
    rx558_cur."!cursor_pass"(rx558_pos, "method_def", 'backtrack'=>1)
    .return (rx558_cur)
  rx558_restart:
    repr_get_attr_obj rx558_cstack, rx558_cur, rx558_curclass, "$!cstack"
  rx558_fail:
    unless rx558_bstack, rx558_done
    pop $I19, rx558_bstack
    if_null rx558_cstack, rx558_cstack_done
    unless rx558_cstack, rx558_cstack_done
    dec $I19
    set $P11, rx558_cstack[$I19]
  rx558_cstack_done:
    pop rx558_rep, rx558_bstack
    pop rx558_pos, rx558_bstack
    pop $I19, rx558_bstack
    lt rx558_pos, -1, rx558_done
    lt rx558_pos, 0, rx558_fail
    eq $I19, 0, rx558_fail
    if_null rx558_cstack, rx558_jump
    elements $I18, rx558_bstack
    le $I18, 0, rx558_cut
    dec $I18
    set $I18, rx558_bstack[$I18]
  rx558_cut:
    assign rx558_cstack, $I18
  rx558_jump:
    jump $I19
  rx558_done:
    rx558_cur."!cursor_fail"()
    .return (rx558_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "128_1337966799.879_caps"  :subid("547_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1066
    new $P106, "Hash"
    set $P106["private"], 0
    set $P106["deflongname"], 2
    set $P106["signature"], 0
    set $P106["trait"], 2
    set $P106["onlystar"], 0
    set $P106["blockoid"], 0
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block2007"  :anon :subid("548_1337966799.879") :outer("128_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1074
    new $P123, "Float"
    assign $P123, 0
    store_dynamic_lex "$*INVOCANT_OK", $P123
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "onlystar"  :subid("129_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2010
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1082
    .const 'Sub' $P2016 = "551_1337966799.879" 
    capture_lex $P2016
    .lex "self", param_2010
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2011
    .lex "$/", $P2012
    .local string rx593_tgt
    .local int rx593_pos
    .local int rx593_off
    .local int rx593_eos
    .local int rx593_rep
    .local pmc rx593_cur
    .local pmc rx593_curclass
    .local pmc rx593_bstack
    .local pmc rx593_cstack
    (rx593_cur, rx593_tgt, rx593_pos, rx593_curclass, rx593_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx593_cur
    length rx593_eos, rx593_tgt
    eq $I19, 1, rx593_restart
    repr_get_attr_int $I11, self, rx593_curclass, "$!from"
    ne $I11, -1, rxscan594_done
    goto rxscan594_scan
  rxscan594_loop:
    inc rx593_pos
    gt rx593_pos, rx593_eos, rx593_fail
    repr_bind_attr_int rx593_cur, rx593_curclass, "$!from", rx593_pos
  rxscan594_scan:
    nqp_rxmark rx593_bstack, rxscan594_loop, rx593_pos, 0
  rxscan594_done:
    repr_bind_attr_int rx593_cur, rx593_curclass, "$!pos", rx593_pos
    store_lex unicode:"$\x{a2}", rx593_cur
    find_lex $P104, unicode:"$\x{a2}"
    $P105 = $P104."MATCH"()
    store_lex "$/", $P105
.annotate 'line', 1083
    .const 'Sub' $P2016 = "551_1337966799.879" 
    capture_lex $P2016
    $P106 = $P2016()
.annotate 'line', 1082
    unless $P106, rx593_fail
    add $I11, rx593_pos, 1
    gt $I11, rx593_eos, rx593_fail
    substr $S10, rx593_tgt, rx593_pos, 1
    ne $S10, ucs4:"{", rx593_fail
    add rx593_pos, 1
    repr_bind_attr_int rx593_cur, rx593_curclass, "$!pos", rx593_pos
    $P11 = rx593_cur."ws"()
    repr_get_attr_int $I11, $P11, rx593_curclass, "$!pos"
    lt $I11, 0, rx593_fail
    repr_get_attr_int rx593_pos, $P11, rx593_curclass, "$!pos"
    add $I11, rx593_pos, 1
    gt $I11, rx593_eos, rx593_fail
    substr $S10, rx593_tgt, rx593_pos, 1
    ne $S10, ucs4:"*", rx593_fail
    add rx593_pos, 1
    repr_bind_attr_int rx593_cur, rx593_curclass, "$!pos", rx593_pos
    $P11 = rx593_cur."ws"()
    repr_get_attr_int $I11, $P11, rx593_curclass, "$!pos"
    lt $I11, 0, rx593_fail
    repr_get_attr_int rx593_pos, $P11, rx593_curclass, "$!pos"
    add $I11, rx593_pos, 1
    gt $I11, rx593_eos, rx593_fail
    substr $S10, rx593_tgt, rx593_pos, 1
    ne $S10, ucs4:"}", rx593_fail
    add rx593_pos, 1
    repr_bind_attr_int rx593_cur, rx593_curclass, "$!pos", rx593_pos
    $P11 = rx593_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx593_curclass, "$!pos"
    lt $I11, 0, rx593_fail
    repr_bind_attr_int rx593_cur, rx593_curclass, "$!pos", rx593_pos
    $P11 = rx593_cur."finishpad"()
    repr_get_attr_int $I11, $P11, rx593_curclass, "$!pos"
    lt $I11, 0, rx593_fail
    repr_get_attr_int rx593_pos, $P11, rx593_curclass, "$!pos"
    rx593_cur."!cursor_pass"(rx593_pos, "onlystar", 'backtrack'=>1)
    .return (rx593_cur)
  rx593_restart:
    repr_get_attr_obj rx593_cstack, rx593_cur, rx593_curclass, "$!cstack"
  rx593_fail:
    unless rx593_bstack, rx593_done
    pop $I19, rx593_bstack
    if_null rx593_cstack, rx593_cstack_done
    unless rx593_cstack, rx593_cstack_done
    dec $I19
    set $P11, rx593_cstack[$I19]
  rx593_cstack_done:
    pop rx593_rep, rx593_bstack
    pop rx593_pos, rx593_bstack
    pop $I19, rx593_bstack
    lt rx593_pos, -1, rx593_done
    lt rx593_pos, 0, rx593_fail
    eq $I19, 0, rx593_fail
    if_null rx593_cstack, rx593_jump
    elements $I18, rx593_bstack
    le $I18, 0, rx593_cut
    dec $I18
    set $I18, rx593_bstack[$I18]
  rx593_cut:
    assign rx593_cstack, $I18
  rx593_jump:
    jump $I19
  rx593_done:
    rx593_cur."!cursor_fail"()
    .return (rx593_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "129_1337966799.879_caps"  :subid("549_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1082
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "129_1337966799.879_nfa"  :subid("550_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1082
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 1
    push $P105, 0
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 123
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "ws"
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 42
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 8
    push $P109, "ws"
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 125
    push $P110, 7
    new $P111, "ResizablePMCArray"
    push $P111, 8
    push $P111, "ENDSTMT"
    push $P111, 0
    new $P112, "ResizablePMCArray"
    push $P112, $P104
    push $P112, $P105
    push $P112, $P106
    push $P112, $P107
    push $P112, $P108
    push $P112, $P109
    push $P112, $P110
    push $P112, $P111
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block2015"  :anon :subid("551_1337966799.879") :outer("129_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1083
    find_dynamic_lex $P108, "$*MULTINESS"
    unless_null $P108, vivify_1345
    get_hll_global $P106, "GLOBAL"
    get_who $P107, $P106
    set $P108, $P107["$MULTINESS"]
    unless_null $P108, vivify_1346
    die "Contextual $*MULTINESS not found"
  vivify_1346:
  vivify_1345:
    set $S100, $P108
    iseq $I100, $S100, "proto"
    .return ($I100)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "multi_declarator"  :subid("130_1337966799.879")
    .param pmc param_2018
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1089
    .lex "self", param_2018
    $P103 = param_2018."!protoregex"("multi_declarator")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "multi_declarator:sym<multi>"  :subid("131_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2020
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1090
    .lex "self", param_2020
.annotate 'line', 1091
    new $P103, "Undef"
    set $P2021, $P103
    .lex "$*MULTINESS", $P2021
    .local pmc self
    find_lex $P104, "self"
    set self, $P104
    .lex unicode:"$\x{a2}", $P2022
    .lex "$/", $P2023
.annotate 'line', 1090
    .local string rx598_tgt
    .local int rx598_pos
    .local int rx598_off
    .local int rx598_eos
    .local int rx598_rep
    .local pmc rx598_cur
    .local pmc rx598_curclass
    .local pmc rx598_bstack
    .local pmc rx598_cstack
    (rx598_cur, rx598_tgt, rx598_pos, rx598_curclass, rx598_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx598_cur
    length rx598_eos, rx598_tgt
    eq $I19, 1, rx598_restart
    repr_get_attr_int $I11, self, rx598_curclass, "$!from"
    ne $I11, -1, rxscan599_done
    goto rxscan599_scan
  rxscan599_loop:
    inc rx598_pos
    gt rx598_pos, rx598_eos, rx598_fail
    repr_bind_attr_int rx598_cur, rx598_curclass, "$!from", rx598_pos
  rxscan599_scan:
    nqp_rxmark rx598_bstack, rxscan599_loop, rx598_pos, 0
  rxscan599_done:
    repr_bind_attr_int rx598_cur, rx598_curclass, "$!pos", rx598_pos
    store_lex unicode:"$\x{a2}", rx598_cur
.annotate 'line', 1091
    new $P105, "String"
    assign $P105, "multi"
    set $P2021, $P105
.annotate 'line', 1090
    nqp_rxmark rx598_bstack, rxcap600_fail, rx598_pos, 0
    add $I11, rx598_pos, 5
    gt $I11, rx598_eos, rx598_fail
    substr $S10, rx598_tgt, rx598_pos, 5
    ne $S10, ucs4:"multi", rx598_fail
    add rx598_pos, 5
    nqp_rxpeek $I19, rx598_bstack, rxcap600_fail
    inc $I19
    set $I11, rx598_bstack[$I19]
    $P11 = rx598_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx598_pos)
    rx598_cstack = rx598_cur."!cursor_capture"($P11, "sym")
    goto rxcap600_done
  rxcap600_fail:
    goto rx598_fail
  rxcap600_done:
    repr_bind_attr_int rx598_cur, rx598_curclass, "$!pos", rx598_pos
    $P11 = rx598_cur."ws"()
    repr_get_attr_int $I11, $P11, rx598_curclass, "$!pos"
    lt $I11, 0, rx598_fail
    repr_get_attr_int rx598_pos, $P11, rx598_curclass, "$!pos"
  alt602_0:
    nqp_rxmark rx598_bstack, alt602_1, rx598_pos, 0
    repr_bind_attr_int rx598_cur, rx598_curclass, "$!pos", rx598_pos
    $P11 = rx598_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx598_curclass, "$!pos"
    lt $I11, 0, rx598_fail
    nqp_rxmark rx598_bstack, rxsubrule603_pass, -1, 0
  rxsubrule603_pass:
    rx598_cstack = rx598_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx598_pos, $P11, rx598_curclass, "$!pos"
    goto alt602_end
  alt602_1:
    nqp_rxmark rx598_bstack, alt602_2, rx598_pos, 0
    repr_bind_attr_int rx598_cur, rx598_curclass, "$!pos", rx598_pos
    $P11 = rx598_cur."routine_def"()
    repr_get_attr_int $I11, $P11, rx598_curclass, "$!pos"
    lt $I11, 0, rx598_fail
    nqp_rxmark rx598_bstack, rxsubrule604_pass, -1, 0
  rxsubrule604_pass:
    rx598_cstack = rx598_cur."!cursor_capture"($P11, "routine_def")
    repr_get_attr_int rx598_pos, $P11, rx598_curclass, "$!pos"
    goto alt602_end
  alt602_2:
    repr_bind_attr_int rx598_cur, rx598_curclass, "$!pos", rx598_pos
    $P11 = rx598_cur."panic"("Malformed multi")
    repr_get_attr_int $I11, $P11, rx598_curclass, "$!pos"
    lt $I11, 0, rx598_fail
    repr_get_attr_int rx598_pos, $P11, rx598_curclass, "$!pos"
  alt602_end:
    rx598_cur."!cursor_pass"(rx598_pos, "multi_declarator:sym<multi>", 'backtrack'=>1)
    .return (rx598_cur)
  rx598_restart:
    repr_get_attr_obj rx598_cstack, rx598_cur, rx598_curclass, "$!cstack"
  rx598_fail:
    unless rx598_bstack, rx598_done
    pop $I19, rx598_bstack
    if_null rx598_cstack, rx598_cstack_done
    unless rx598_cstack, rx598_cstack_done
    dec $I19
    set $P11, rx598_cstack[$I19]
  rx598_cstack_done:
    pop rx598_rep, rx598_bstack
    pop rx598_pos, rx598_bstack
    pop $I19, rx598_bstack
    lt rx598_pos, -1, rx598_done
    lt rx598_pos, 0, rx598_fail
    eq $I19, 0, rx598_fail
    if_null rx598_cstack, rx598_jump
    elements $I18, rx598_bstack
    le $I18, 0, rx598_cut
    dec $I18
    set $I18, rx598_bstack[$I18]
  rx598_cut:
    assign rx598_cstack, $I18
  rx598_jump:
    jump $I19
  rx598_done:
    rx598_cur."!cursor_fail"()
    .return (rx598_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "131_1337966799.879_caps"  :subid("552_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1090
    new $P105, "Hash"
    set $P105["sym"], 0
    set $P105["declarator"], 0
    set $P105["routine_def"], 0
    .return ($P105)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "131_1337966799.879_nfa"  :subid("553_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1090
    new $P105, "ResizablePMCArray"
    new $P106, "ResizablePMCArray"
    push $P106, 1
    push $P106, 0
    push $P106, 2
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 109
    push $P107, 3
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 117
    push $P108, 4
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 108
    push $P109, 5
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 116
    push $P110, 6
    new $P111, "ResizablePMCArray"
    push $P111, 2
    push $P111, 105
    push $P111, 7
    new $P112, "ResizablePMCArray"
    push $P112, 8
    push $P112, "ws"
    push $P112, 8
    new $P113, "ResizablePMCArray"
    push $P113, 0
    push $P113, 0
    push $P113, 0
    new $P114, "ResizablePMCArray"
    push $P114, $P105
    push $P114, $P106
    push $P114, $P107
    push $P114, $P108
    push $P114, $P109
    push $P114, $P110
    push $P114, $P111
    push $P114, $P112
    push $P114, $P113
    .return ($P114)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "multi_declarator:sym<proto>"  :subid("132_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2027
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1095
    .lex "self", param_2027
.annotate 'line', 1096
    new $P103, "Undef"
    set $P2028, $P103
    .lex "$*MULTINESS", $P2028
    .local pmc self
    find_lex $P104, "self"
    set self, $P104
    .lex unicode:"$\x{a2}", $P2029
    .lex "$/", $P2030
.annotate 'line', 1095
    .local string rx606_tgt
    .local int rx606_pos
    .local int rx606_off
    .local int rx606_eos
    .local int rx606_rep
    .local pmc rx606_cur
    .local pmc rx606_curclass
    .local pmc rx606_bstack
    .local pmc rx606_cstack
    (rx606_cur, rx606_tgt, rx606_pos, rx606_curclass, rx606_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx606_cur
    length rx606_eos, rx606_tgt
    eq $I19, 1, rx606_restart
    repr_get_attr_int $I11, self, rx606_curclass, "$!from"
    ne $I11, -1, rxscan607_done
    goto rxscan607_scan
  rxscan607_loop:
    inc rx606_pos
    gt rx606_pos, rx606_eos, rx606_fail
    repr_bind_attr_int rx606_cur, rx606_curclass, "$!from", rx606_pos
  rxscan607_scan:
    nqp_rxmark rx606_bstack, rxscan607_loop, rx606_pos, 0
  rxscan607_done:
    repr_bind_attr_int rx606_cur, rx606_curclass, "$!pos", rx606_pos
    store_lex unicode:"$\x{a2}", rx606_cur
.annotate 'line', 1096
    new $P105, "String"
    assign $P105, "proto"
    set $P2028, $P105
.annotate 'line', 1095
    nqp_rxmark rx606_bstack, rxcap608_fail, rx606_pos, 0
    add $I11, rx606_pos, 5
    gt $I11, rx606_eos, rx606_fail
    substr $S10, rx606_tgt, rx606_pos, 5
    ne $S10, ucs4:"proto", rx606_fail
    add rx606_pos, 5
    nqp_rxpeek $I19, rx606_bstack, rxcap608_fail
    inc $I19
    set $I11, rx606_bstack[$I19]
    $P11 = rx606_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx606_pos)
    rx606_cstack = rx606_cur."!cursor_capture"($P11, "sym")
    goto rxcap608_done
  rxcap608_fail:
    goto rx606_fail
  rxcap608_done:
    repr_bind_attr_int rx606_cur, rx606_curclass, "$!pos", rx606_pos
    $P11 = rx606_cur."ws"()
    repr_get_attr_int $I11, $P11, rx606_curclass, "$!pos"
    lt $I11, 0, rx606_fail
    repr_get_attr_int rx606_pos, $P11, rx606_curclass, "$!pos"
  alt610_0:
    nqp_rxmark rx606_bstack, alt610_1, rx606_pos, 0
    repr_bind_attr_int rx606_cur, rx606_curclass, "$!pos", rx606_pos
    $P11 = rx606_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx606_curclass, "$!pos"
    lt $I11, 0, rx606_fail
    nqp_rxmark rx606_bstack, rxsubrule611_pass, -1, 0
  rxsubrule611_pass:
    rx606_cstack = rx606_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx606_pos, $P11, rx606_curclass, "$!pos"
    goto alt610_end
  alt610_1:
    nqp_rxmark rx606_bstack, alt610_2, rx606_pos, 0
    repr_bind_attr_int rx606_cur, rx606_curclass, "$!pos", rx606_pos
    $P11 = rx606_cur."routine_def"()
    repr_get_attr_int $I11, $P11, rx606_curclass, "$!pos"
    lt $I11, 0, rx606_fail
    nqp_rxmark rx606_bstack, rxsubrule612_pass, -1, 0
  rxsubrule612_pass:
    rx606_cstack = rx606_cur."!cursor_capture"($P11, "routine_def")
    repr_get_attr_int rx606_pos, $P11, rx606_curclass, "$!pos"
    goto alt610_end
  alt610_2:
    repr_bind_attr_int rx606_cur, rx606_curclass, "$!pos", rx606_pos
    $P11 = rx606_cur."panic"("Malformed proto")
    repr_get_attr_int $I11, $P11, rx606_curclass, "$!pos"
    lt $I11, 0, rx606_fail
    repr_get_attr_int rx606_pos, $P11, rx606_curclass, "$!pos"
  alt610_end:
    rx606_cur."!cursor_pass"(rx606_pos, "multi_declarator:sym<proto>", 'backtrack'=>1)
    .return (rx606_cur)
  rx606_restart:
    repr_get_attr_obj rx606_cstack, rx606_cur, rx606_curclass, "$!cstack"
  rx606_fail:
    unless rx606_bstack, rx606_done
    pop $I19, rx606_bstack
    if_null rx606_cstack, rx606_cstack_done
    unless rx606_cstack, rx606_cstack_done
    dec $I19
    set $P11, rx606_cstack[$I19]
  rx606_cstack_done:
    pop rx606_rep, rx606_bstack
    pop rx606_pos, rx606_bstack
    pop $I19, rx606_bstack
    lt rx606_pos, -1, rx606_done
    lt rx606_pos, 0, rx606_fail
    eq $I19, 0, rx606_fail
    if_null rx606_cstack, rx606_jump
    elements $I18, rx606_bstack
    le $I18, 0, rx606_cut
    dec $I18
    set $I18, rx606_bstack[$I18]
  rx606_cut:
    assign rx606_cstack, $I18
  rx606_jump:
    jump $I19
  rx606_done:
    rx606_cur."!cursor_fail"()
    .return (rx606_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "132_1337966799.879_caps"  :subid("554_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1095
    new $P105, "Hash"
    set $P105["sym"], 0
    set $P105["declarator"], 0
    set $P105["routine_def"], 0
    .return ($P105)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "132_1337966799.879_nfa"  :subid("555_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1095
    new $P105, "ResizablePMCArray"
    new $P106, "ResizablePMCArray"
    push $P106, 1
    push $P106, 0
    push $P106, 2
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 112
    push $P107, 3
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 114
    push $P108, 4
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 111
    push $P109, 5
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 116
    push $P110, 6
    new $P111, "ResizablePMCArray"
    push $P111, 2
    push $P111, 111
    push $P111, 7
    new $P112, "ResizablePMCArray"
    push $P112, 8
    push $P112, "ws"
    push $P112, 8
    new $P113, "ResizablePMCArray"
    push $P113, 0
    push $P113, 0
    push $P113, 0
    new $P114, "ResizablePMCArray"
    push $P114, $P105
    push $P114, $P106
    push $P114, $P107
    push $P114, $P108
    push $P114, $P109
    push $P114, $P110
    push $P114, $P111
    push $P114, $P112
    push $P114, $P113
    .return ($P114)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "multi_declarator:sym<null>"  :subid("133_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2034
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1100
    .lex "self", param_2034
.annotate 'line', 1101
    new $P103, "Undef"
    set $P2035, $P103
    .lex "$*MULTINESS", $P2035
    .local pmc self
    find_lex $P104, "self"
    set self, $P104
    .lex unicode:"$\x{a2}", $P2036
    .lex "$/", $P2037
.annotate 'line', 1100
    .local string rx614_tgt
    .local int rx614_pos
    .local int rx614_off
    .local int rx614_eos
    .local int rx614_rep
    .local pmc rx614_cur
    .local pmc rx614_curclass
    .local pmc rx614_bstack
    .local pmc rx614_cstack
    (rx614_cur, rx614_tgt, rx614_pos, rx614_curclass, rx614_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx614_cur
    length rx614_eos, rx614_tgt
    eq $I19, 1, rx614_restart
    repr_get_attr_int $I11, self, rx614_curclass, "$!from"
    ne $I11, -1, rxscan615_done
    goto rxscan615_scan
  rxscan615_loop:
    inc rx614_pos
    gt rx614_pos, rx614_eos, rx614_fail
    repr_bind_attr_int rx614_cur, rx614_curclass, "$!from", rx614_pos
  rxscan615_scan:
    nqp_rxmark rx614_bstack, rxscan615_loop, rx614_pos, 0
  rxscan615_done:
    repr_bind_attr_int rx614_cur, rx614_curclass, "$!pos", rx614_pos
    store_lex unicode:"$\x{a2}", rx614_cur
.annotate 'line', 1101
    new $P105, "String"
    assign $P105, ""
    set $P2035, $P105
.annotate 'line', 1100
    repr_bind_attr_int rx614_cur, rx614_curclass, "$!pos", rx614_pos
    $P11 = rx614_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx614_curclass, "$!pos"
    lt $I11, 0, rx614_fail
    nqp_rxmark rx614_bstack, rxsubrule616_pass, -1, 0
  rxsubrule616_pass:
    rx614_cstack = rx614_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx614_pos, $P11, rx614_curclass, "$!pos"
    rx614_cur."!cursor_pass"(rx614_pos, "multi_declarator:sym<null>", 'backtrack'=>1)
    .return (rx614_cur)
  rx614_restart:
    repr_get_attr_obj rx614_cstack, rx614_cur, rx614_curclass, "$!cstack"
  rx614_fail:
    unless rx614_bstack, rx614_done
    pop $I19, rx614_bstack
    if_null rx614_cstack, rx614_cstack_done
    unless rx614_cstack, rx614_cstack_done
    dec $I19
    set $P11, rx614_cstack[$I19]
  rx614_cstack_done:
    pop rx614_rep, rx614_bstack
    pop rx614_pos, rx614_bstack
    pop $I19, rx614_bstack
    lt rx614_pos, -1, rx614_done
    lt rx614_pos, 0, rx614_fail
    eq $I19, 0, rx614_fail
    if_null rx614_cstack, rx614_jump
    elements $I18, rx614_bstack
    le $I18, 0, rx614_cut
    dec $I18
    set $I18, rx614_bstack[$I18]
  rx614_cut:
    assign rx614_cstack, $I18
  rx614_jump:
    jump $I19
  rx614_done:
    rx614_cur."!cursor_fail"()
    .return (rx614_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "133_1337966799.879_caps"  :subid("556_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1100
    new $P105, "Hash"
    set $P105["declarator"], 0
    .return ($P105)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "133_1337966799.879_nfa"  :subid("557_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1100
    new $P105, "ResizablePMCArray"
    new $P106, "ResizablePMCArray"
    push $P106, 1
    push $P106, 0
    push $P106, 2
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "declarator"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "signature"  :subid("135_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2041
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1105
    .const 'Sub' $P2049 = "134_1337966799.879" 
    capture_lex $P2049
    .const 'Sub' $P2047 = "560_1337966799.879" 
    capture_lex $P2047
    .lex "self", param_2041
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2042
    .lex "$/", $P2043
    .local string rx617_tgt
    .local int rx617_pos
    .local int rx617_off
    .local int rx617_eos
    .local int rx617_rep
    .local pmc rx617_cur
    .local pmc rx617_curclass
    .local pmc rx617_bstack
    .local pmc rx617_cstack
    (rx617_cur, rx617_tgt, rx617_pos, rx617_curclass, rx617_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx617_cur
    length rx617_eos, rx617_tgt
    eq $I19, 1, rx617_restart
    repr_get_attr_int $I11, self, rx617_curclass, "$!from"
    ne $I11, -1, rxscan618_done
    goto rxscan618_scan
  rxscan618_loop:
    inc rx617_pos
    gt rx617_pos, rx617_eos, rx617_fail
    repr_bind_attr_int rx617_cur, rx617_curclass, "$!from", rx617_pos
  rxscan618_scan:
    nqp_rxmark rx617_bstack, rxscan618_loop, rx617_pos, 0
  rxscan618_done:
  # rx rxquantr619 ** 0..1
    nqp_rxmark rx617_bstack, rxquantr619_done, rx617_pos, 0
  rxquantr619_loop:
    repr_bind_attr_int rx617_cur, rx617_curclass, "$!pos", rx617_pos
    store_lex unicode:"$\x{a2}", rx617_cur
    find_lex $P104, unicode:"$\x{a2}"
    $P105 = $P104."MATCH"()
    store_lex "$/", $P105
.annotate 'line', 1106
    .const 'Sub' $P2047 = "560_1337966799.879" 
    capture_lex $P2047
    $P106 = $P2047()
.annotate 'line', 1105
    unless $P106, rx617_fail
    repr_bind_attr_int rx617_cur, rx617_curclass, "$!pos", rx617_pos
    $P11 = rx617_cur."ws"()
    repr_get_attr_int $I11, $P11, rx617_curclass, "$!pos"
    lt $I11, 0, rx617_fail
    repr_get_attr_int rx617_pos, $P11, rx617_curclass, "$!pos"
    repr_bind_attr_int rx617_cur, rx617_curclass, "$!pos", rx617_pos
    $P11 = rx617_cur."parameter"()
    repr_get_attr_int $I11, $P11, rx617_curclass, "$!pos"
    lt $I11, 0, rx617_fail
    nqp_rxmark rx617_bstack, rxsubrule621_pass, -1, 0
  rxsubrule621_pass:
    rx617_cstack = rx617_cur."!cursor_capture"($P11, "invocant")
    repr_get_attr_int rx617_pos, $P11, rx617_curclass, "$!pos"
    repr_bind_attr_int rx617_cur, rx617_curclass, "$!pos", rx617_pos
    $P11 = rx617_cur."ws"()
    repr_get_attr_int $I11, $P11, rx617_curclass, "$!pos"
    lt $I11, 0, rx617_fail
    repr_get_attr_int rx617_pos, $P11, rx617_curclass, "$!pos"
    add $I11, rx617_pos, 1
    gt $I11, rx617_eos, rx617_fail
    substr $S10, rx617_tgt, rx617_pos, 1
    ne $S10, ucs4:":", rx617_fail
    add rx617_pos, 1
    nqp_rxpeek $I19, rx617_bstack, rxquantr619_done
    inc $I19
    inc $I19
    set rx617_rep, rx617_bstack[$I19]
    nqp_rxcommit rx617_bstack, rxquantr619_done
    inc rx617_rep
  rxquantr619_done:
  # rx rxquantr623 ** 0..1
    nqp_rxmark rx617_bstack, rxquantr623_done, rx617_pos, 0
  rxquantr623_loop:
  # rx rxquantr624 ** 0..-1
    nqp_rxmark rx617_bstack, rxquantr624_done, rx617_pos, 0
  rxquantr624_loop:
    repr_bind_attr_int rx617_cur, rx617_curclass, "$!pos", rx617_pos
    $P11 = rx617_cur."ws"()
    repr_get_attr_int $I11, $P11, rx617_curclass, "$!pos"
    lt $I11, 0, rx617_fail
    repr_get_attr_int rx617_pos, $P11, rx617_curclass, "$!pos"
    repr_bind_attr_int rx617_cur, rx617_curclass, "$!pos", rx617_pos
    $P11 = rx617_cur."parameter"()
    repr_get_attr_int $I11, $P11, rx617_curclass, "$!pos"
    lt $I11, 0, rx617_fail
    nqp_rxmark rx617_bstack, rxsubrule626_pass, -1, 0
  rxsubrule626_pass:
    rx617_cstack = rx617_cur."!cursor_capture"($P11, "parameter")
    repr_get_attr_int rx617_pos, $P11, rx617_curclass, "$!pos"
    repr_bind_attr_int rx617_cur, rx617_curclass, "$!pos", rx617_pos
    $P11 = rx617_cur."ws"()
    repr_get_attr_int $I11, $P11, rx617_curclass, "$!pos"
    lt $I11, 0, rx617_fail
    repr_get_attr_int rx617_pos, $P11, rx617_curclass, "$!pos"
  alt628_0:
    nqp_rxmark rx617_bstack, alt628_1, rx617_pos, 0
    add $I11, rx617_pos, 1
    gt $I11, rx617_eos, rx617_fail
    substr $S10, rx617_tgt, rx617_pos, 1
    ne $S10, ucs4:",", rx617_fail
    add rx617_pos, 1
    goto alt628_end
  alt628_1:
    .const 'Sub' $P2049 = "134_1337966799.879" 
    capture_lex $P2049
    repr_bind_attr_int rx617_cur, rx617_curclass, "$!pos", rx617_pos
    $P11 = rx617_cur."before"($P2049)
    repr_get_attr_int $I11, $P11, rx617_curclass, "$!pos"
    lt $I11, 0, rx617_fail
    nqp_rxmark rx617_bstack, rxsubrule633_pass, -1, 0
  rxsubrule633_pass:
    rx617_cstack = rx617_cur."!cursor_capture"($P11, "before")
    repr_get_attr_int rx617_pos, $P11, rx617_curclass, "$!pos"
  alt628_end:
    nqp_rxpeek $I19, rx617_bstack, rxquantr624_done
    inc $I19
    inc $I19
    set rx617_rep, rx617_bstack[$I19]
    nqp_rxcommit rx617_bstack, rxquantr624_done
    inc rx617_rep
    nqp_rxmark rx617_bstack, rxquantr624_done, rx617_pos, rx617_rep
    goto rxquantr624_loop
  rxquantr624_done:
    nqp_rxpeek $I19, rx617_bstack, rxquantr623_done
    inc $I19
    inc $I19
    set rx617_rep, rx617_bstack[$I19]
    nqp_rxcommit rx617_bstack, rxquantr623_done
    inc rx617_rep
  rxquantr623_done:
    rx617_cur."!cursor_pass"(rx617_pos, "signature", 'backtrack'=>1)
    .return (rx617_cur)
  rx617_restart:
    repr_get_attr_obj rx617_cstack, rx617_cur, rx617_curclass, "$!cstack"
  rx617_fail:
    unless rx617_bstack, rx617_done
    pop $I19, rx617_bstack
    if_null rx617_cstack, rx617_cstack_done
    unless rx617_cstack, rx617_cstack_done
    dec $I19
    set $P11, rx617_cstack[$I19]
  rx617_cstack_done:
    pop rx617_rep, rx617_bstack
    pop rx617_pos, rx617_bstack
    pop $I19, rx617_bstack
    lt rx617_pos, -1, rx617_done
    lt rx617_pos, 0, rx617_fail
    eq $I19, 0, rx617_fail
    if_null rx617_cstack, rx617_jump
    elements $I18, rx617_bstack
    le $I18, 0, rx617_cut
    dec $I18
    set $I18, rx617_bstack[$I18]
  rx617_cut:
    assign rx617_cstack, $I18
  rx617_jump:
    jump $I19
  rx617_done:
    rx617_cur."!cursor_fail"()
    .return (rx617_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "135_1337966799.879_caps"  :subid("558_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1105
    new $P104, "Hash"
    set $P104["invocant"], 2
    set $P104["parameter"], 2
    set $P104["before"], 2
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "135_1337966799.879_nfa"  :subid("559_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1105
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 1
    push $P105, 0
    push $P105, 2
    push $P105, 1
    push $P105, 0
    push $P105, 6
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "ws"
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "parameter"
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "ws"
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 58
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 8
    push $P110, "ws"
    push $P110, 7
    push $P110, 1
    push $P110, 0
    push $P110, 0
    push $P110, 1
    push $P110, 0
    push $P110, 0
    new $P111, "ResizablePMCArray"
    push $P111, 8
    push $P111, "parameter"
    push $P111, 8
    new $P112, "ResizablePMCArray"
    push $P112, 8
    push $P112, "ws"
    push $P112, 9
    new $P113, "ResizablePMCArray"
    push $P113, 2
    push $P113, 44
    push $P113, 6
    push $P113, 8
    push $P113, "before"
    push $P113, 6
    new $P114, "ResizablePMCArray"
    push $P114, $P104
    push $P114, $P105
    push $P114, $P106
    push $P114, $P107
    push $P114, $P108
    push $P114, $P109
    push $P114, $P110
    push $P114, $P111
    push $P114, $P112
    push $P114, $P113
    .return ($P114)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block2046"  :anon :subid("560_1337966799.879") :outer("135_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1106
    find_dynamic_lex $P108, "$*INVOCANT_OK"
    unless_null $P108, vivify_1347
    get_hll_global $P106, "GLOBAL"
    get_who $P107, $P106
    set $P108, $P107["$INVOCANT_OK"]
    unless_null $P108, vivify_1348
    die "Contextual $*INVOCANT_OK not found"
  vivify_1348:
  vivify_1347:
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block2048"  :anon :subid("134_1337966799.879") :method :outer("135_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1105
    .lex unicode:"$\x{a2}", $P2052
    .local string rx629_tgt
    .local int rx629_pos
    .local int rx629_off
    .local int rx629_eos
    .local int rx629_rep
    .local pmc rx629_cur
    .local pmc rx629_curclass
    .local pmc rx629_bstack
    .local pmc rx629_cstack
    (rx629_cur, rx629_tgt, rx629_pos, rx629_curclass, rx629_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx629_cur
    length rx629_eos, rx629_tgt
    eq $I19, 1, rx629_restart
    repr_get_attr_int $I11, self, rx629_curclass, "$!from"
    ne $I11, -1, rxscan630_done
    goto rxscan630_scan
  rxscan630_loop:
    inc rx629_pos
    gt rx629_pos, rx629_eos, rx629_fail
    repr_bind_attr_int rx629_cur, rx629_curclass, "$!from", rx629_pos
  rxscan630_scan:
    nqp_rxmark rx629_bstack, rxscan630_loop, rx629_pos, 0
  rxscan630_done:
  # rx rxquantr631 ** 0..-1
    nqp_rxmark rx629_bstack, rxquantr631_done, rx629_pos, 0
  rxquantr631_loop:
    ge rx629_pos, rx629_eos, rx629_fail
    is_cclass $I11, .CCLASS_WHITESPACE, rx629_tgt, rx629_pos
    unless $I11, rx629_fail
    add rx629_pos, 1
    nqp_rxpeek $I19, rx629_bstack, rxquantr631_done
    inc $I19
    inc $I19
    set rx629_rep, rx629_bstack[$I19]
    nqp_rxcommit rx629_bstack, rxquantr631_done
    inc rx629_rep
    nqp_rxmark rx629_bstack, rxquantr631_done, rx629_pos, rx629_rep
    goto rxquantr631_loop
  rxquantr631_done:
  alt632_0:
    nqp_rxmark rx629_bstack, alt632_1, rx629_pos, 0
    add $I11, rx629_pos, 1
    gt $I11, rx629_eos, rx629_fail
    substr $S10, rx629_tgt, rx629_pos, 1
    ne $S10, ucs4:")", rx629_fail
    add rx629_pos, 1
    goto alt632_end
  alt632_1:
    add $I11, rx629_pos, 1
    gt $I11, rx629_eos, rx629_fail
    substr $S10, rx629_tgt, rx629_pos, 1
    ne $S10, ucs4:"{", rx629_fail
    add rx629_pos, 1
  alt632_end:
    rx629_cur."!cursor_pass"(rx629_pos, 'backtrack'=>1)
    .return (rx629_cur)
  rx629_restart:
    repr_get_attr_obj rx629_cstack, rx629_cur, rx629_curclass, "$!cstack"
  rx629_fail:
    unless rx629_bstack, rx629_done
    pop $I19, rx629_bstack
    if_null rx629_cstack, rx629_cstack_done
    unless rx629_cstack, rx629_cstack_done
    dec $I19
    set $P11, rx629_cstack[$I19]
  rx629_cstack_done:
    pop rx629_rep, rx629_bstack
    pop rx629_pos, rx629_bstack
    pop $I19, rx629_bstack
    lt rx629_pos, -1, rx629_done
    lt rx629_pos, 0, rx629_fail
    eq $I19, 0, rx629_fail
    if_null rx629_cstack, rx629_jump
    elements $I18, rx629_bstack
    le $I18, 0, rx629_cut
    dec $I18
    set $I18, rx629_bstack[$I18]
  rx629_cut:
    assign rx629_cstack, $I18
  rx629_jump:
    jump $I19
  rx629_done:
    rx629_cur."!cursor_fail"()
    .return (rx629_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "134_1337966799.879_caps"  :subid("561_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1105
    new $P107, "Hash"
    .return ($P107)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "134_1337966799.879_nfa"  :subid("562_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1105
    new $P107, "ResizablePMCArray"
    new $P109, "ResizablePMCArray"
    push $P109, 4
    push $P109, 32
    push $P109, 1
    push $P109, 1
    push $P109, 0
    push $P109, 2
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 41
    push $P110, 0
    push $P110, 2
    push $P110, 123
    push $P110, 0
    new $P111, "ResizablePMCArray"
    push $P111, $P107
    push $P111, $P109
    push $P111, $P110
    .return ($P111)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "parameter"  :subid("136_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2054
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1110
    .lex "self", param_2054
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2055
    .lex "$/", $P2056
    .local string rx634_tgt
    .local int rx634_pos
    .local int rx634_off
    .local int rx634_eos
    .local int rx634_rep
    .local pmc rx634_cur
    .local pmc rx634_curclass
    .local pmc rx634_bstack
    .local pmc rx634_cstack
    (rx634_cur, rx634_tgt, rx634_pos, rx634_curclass, rx634_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx634_cur
    length rx634_eos, rx634_tgt
    eq $I19, 1, rx634_restart
    repr_get_attr_int $I11, self, rx634_curclass, "$!from"
    ne $I11, -1, rxscan635_done
    goto rxscan635_scan
  rxscan635_loop:
    inc rx634_pos
    gt rx634_pos, rx634_eos, rx634_fail
    repr_bind_attr_int rx634_cur, rx634_curclass, "$!from", rx634_pos
  rxscan635_scan:
    nqp_rxmark rx634_bstack, rxscan635_loop, rx634_pos, 0
  rxscan635_done:
  # rx rxquantr636 ** 0..-1
    nqp_rxmark rx634_bstack, rxquantr636_done, rx634_pos, 0
  rxquantr636_loop:
    repr_bind_attr_int rx634_cur, rx634_curclass, "$!pos", rx634_pos
    $P11 = rx634_cur."typename"()
    repr_get_attr_int $I11, $P11, rx634_curclass, "$!pos"
    lt $I11, 0, rx634_fail
    nqp_rxmark rx634_bstack, rxsubrule637_pass, -1, 0
  rxsubrule637_pass:
    rx634_cstack = rx634_cur."!cursor_capture"($P11, "typename")
    repr_get_attr_int rx634_pos, $P11, rx634_curclass, "$!pos"
  # rx rxquantr638 ** 0..1
    nqp_rxmark rx634_bstack, rxquantr638_done, rx634_pos, 0
  rxquantr638_loop:
    add $I11, rx634_pos, 1
    gt $I11, rx634_eos, rx634_fail
    substr $S10, rx634_tgt, rx634_pos, 1
    ne $S10, ucs4:":", rx634_fail
    add rx634_pos, 1
    nqp_rxmark rx634_bstack, rxcap639_fail, rx634_pos, 0
    ge rx634_pos, rx634_eos, rx634_fail
    substr $S11, rx634_tgt, rx634_pos, 1
    index $I11, ucs4:"_DU", $S11
    lt $I11, 0, rx634_fail
    inc rx634_pos
    nqp_rxpeek $I19, rx634_bstack, rxcap639_fail
    inc $I19
    set $I11, rx634_bstack[$I19]
    $P11 = rx634_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx634_pos)
    rx634_cstack = rx634_cur."!cursor_capture"($P11, "definedness")
    goto rxcap639_done
  rxcap639_fail:
    goto rx634_fail
  rxcap639_done:
    nqp_rxpeek $I19, rx634_bstack, rxquantr638_done
    inc $I19
    inc $I19
    set rx634_rep, rx634_bstack[$I19]
    nqp_rxcommit rx634_bstack, rxquantr638_done
    inc rx634_rep
  rxquantr638_done:
    repr_bind_attr_int rx634_cur, rx634_curclass, "$!pos", rx634_pos
    $P11 = rx634_cur."ws"()
    repr_get_attr_int $I11, $P11, rx634_curclass, "$!pos"
    lt $I11, 0, rx634_fail
    repr_get_attr_int rx634_pos, $P11, rx634_curclass, "$!pos"
    nqp_rxpeek $I19, rx634_bstack, rxquantr636_done
    inc $I19
    inc $I19
    set rx634_rep, rx634_bstack[$I19]
    nqp_rxcommit rx634_bstack, rxquantr636_done
    inc rx634_rep
    nqp_rxmark rx634_bstack, rxquantr636_done, rx634_pos, rx634_rep
    goto rxquantr636_loop
  rxquantr636_done:
  alt641_0:
    nqp_rxmark rx634_bstack, alt641_1, rx634_pos, 0
    nqp_rxmark rx634_bstack, rxcap642_fail, rx634_pos, 0
    add $I11, rx634_pos, 1
    gt $I11, rx634_eos, rx634_fail
    substr $S10, rx634_tgt, rx634_pos, 1
    ne $S10, ucs4:"*", rx634_fail
    add rx634_pos, 1
    nqp_rxpeek $I19, rx634_bstack, rxcap642_fail
    inc $I19
    set $I11, rx634_bstack[$I19]
    $P11 = rx634_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx634_pos)
    rx634_cstack = rx634_cur."!cursor_capture"($P11, "quant")
    goto rxcap642_done
  rxcap642_fail:
    goto rx634_fail
  rxcap642_done:
    repr_bind_attr_int rx634_cur, rx634_curclass, "$!pos", rx634_pos
    $P11 = rx634_cur."param_var"()
    repr_get_attr_int $I11, $P11, rx634_curclass, "$!pos"
    lt $I11, 0, rx634_fail
    nqp_rxmark rx634_bstack, rxsubrule643_pass, -1, 0
  rxsubrule643_pass:
    rx634_cstack = rx634_cur."!cursor_capture"($P11, "param_var")
    repr_get_attr_int rx634_pos, $P11, rx634_curclass, "$!pos"
    goto alt641_end
  alt641_1:
  alt644_0:
    nqp_rxmark rx634_bstack, alt644_1, rx634_pos, 0
    repr_bind_attr_int rx634_cur, rx634_curclass, "$!pos", rx634_pos
    $P11 = rx634_cur."param_var"()
    repr_get_attr_int $I11, $P11, rx634_curclass, "$!pos"
    lt $I11, 0, rx634_fail
    nqp_rxmark rx634_bstack, rxsubrule645_pass, -1, 0
  rxsubrule645_pass:
    rx634_cstack = rx634_cur."!cursor_capture"($P11, "param_var")
    repr_get_attr_int rx634_pos, $P11, rx634_curclass, "$!pos"
    goto alt644_end
  alt644_1:
    repr_bind_attr_int rx634_cur, rx634_curclass, "$!pos", rx634_pos
    $P11 = rx634_cur."named_param"()
    repr_get_attr_int $I11, $P11, rx634_curclass, "$!pos"
    lt $I11, 0, rx634_fail
    nqp_rxmark rx634_bstack, rxsubrule646_pass, -1, 0
  rxsubrule646_pass:
    rx634_cstack = rx634_cur."!cursor_capture"($P11, "named_param")
    repr_get_attr_int rx634_pos, $P11, rx634_curclass, "$!pos"
  alt644_end:
    nqp_rxmark rx634_bstack, rxcap647_fail, rx634_pos, 0
  alt648_0:
    nqp_rxmark rx634_bstack, alt648_1, rx634_pos, 0
    add $I11, rx634_pos, 1
    gt $I11, rx634_eos, rx634_fail
    substr $S10, rx634_tgt, rx634_pos, 1
    ne $S10, ucs4:"?", rx634_fail
    add rx634_pos, 1
    goto alt648_end
  alt648_1:
    nqp_rxmark rx634_bstack, alt648_2, rx634_pos, 0
    add $I11, rx634_pos, 1
    gt $I11, rx634_eos, rx634_fail
    substr $S10, rx634_tgt, rx634_pos, 1
    ne $S10, ucs4:"!", rx634_fail
    add rx634_pos, 1
    goto alt648_end
  alt648_2:
  alt648_end:
    nqp_rxpeek $I19, rx634_bstack, rxcap647_fail
    inc $I19
    set $I11, rx634_bstack[$I19]
    $P11 = rx634_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx634_pos)
    rx634_cstack = rx634_cur."!cursor_capture"($P11, "quant")
    goto rxcap647_done
  rxcap647_fail:
    goto rx634_fail
  rxcap647_done:
  alt641_end:
  # rx rxquantr649 ** 0..1
    nqp_rxmark rx634_bstack, rxquantr649_done, rx634_pos, 0
  rxquantr649_loop:
    repr_bind_attr_int rx634_cur, rx634_curclass, "$!pos", rx634_pos
    $P11 = rx634_cur."default_value"()
    repr_get_attr_int $I11, $P11, rx634_curclass, "$!pos"
    lt $I11, 0, rx634_fail
    goto rxsubrule650_pass
  rxsubrule650_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx634_curclass, "$!pos"
    lt $I11, 0, rx634_fail
  rxsubrule650_pass:
    rx634_cstack = rx634_cur."!cursor_capture"($P11, "default_value")
    set_addr $I11, rxsubrule650_back
    push rx634_bstack, $I11
    push rx634_bstack, 0
    push rx634_bstack, rx634_pos
    elements $I11, rx634_cstack
    push rx634_bstack, $I11
    repr_get_attr_int rx634_pos, $P11, rx634_curclass, "$!pos"
    nqp_rxpeek $I19, rx634_bstack, rxquantr649_done
    inc $I19
    inc $I19
    set rx634_rep, rx634_bstack[$I19]
    nqp_rxcommit rx634_bstack, rxquantr649_done
    inc rx634_rep
  rxquantr649_done:
    rx634_cur."!cursor_pass"(rx634_pos, "parameter", 'backtrack'=>1)
    .return (rx634_cur)
  rx634_restart:
    repr_get_attr_obj rx634_cstack, rx634_cur, rx634_curclass, "$!cstack"
  rx634_fail:
    unless rx634_bstack, rx634_done
    pop $I19, rx634_bstack
    if_null rx634_cstack, rx634_cstack_done
    unless rx634_cstack, rx634_cstack_done
    dec $I19
    set $P11, rx634_cstack[$I19]
  rx634_cstack_done:
    pop rx634_rep, rx634_bstack
    pop rx634_pos, rx634_bstack
    pop $I19, rx634_bstack
    lt rx634_pos, -1, rx634_done
    lt rx634_pos, 0, rx634_fail
    eq $I19, 0, rx634_fail
    if_null rx634_cstack, rx634_jump
    elements $I18, rx634_bstack
    le $I18, 0, rx634_cut
    dec $I18
    set $I18, rx634_bstack[$I18]
  rx634_cut:
    assign rx634_cstack, $I18
  rx634_jump:
    jump $I19
  rx634_done:
    rx634_cur."!cursor_fail"()
    .return (rx634_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "136_1337966799.879_caps"  :subid("563_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1110
    new $P104, "Hash"
    set $P104["typename"], 2
    set $P104["definedness"], 2
    set $P104["quant"], 0
    set $P104["param_var"], 0
    set $P104["named_param"], 0
    set $P104["default_value"], 2
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "136_1337966799.879_nfa"  :subid("564_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1110
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "typename"
    push $P105, 2
    push $P105, 1
    push $P105, 0
    push $P105, 5
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 58
    push $P106, 3
    push $P106, 1
    push $P106, 0
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 6
    push $P107, "_DU"
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "ws"
    push $P108, 1
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 42
    push $P109, 6
    push $P109, 8
    push $P109, "param_var"
    push $P109, 8
    push $P109, 8
    push $P109, "named_param"
    push $P109, 8
    new $P110, "ResizablePMCArray"
    push $P110, 8
    push $P110, "param_var"
    push $P110, 7
    new $P111, "ResizablePMCArray"
    push $P111, 8
    push $P111, "default_value"
    push $P111, 0
    push $P111, 1
    push $P111, 0
    push $P111, 0
    new $P112, "ResizablePMCArray"
    push $P112, 2
    push $P112, 63
    push $P112, 7
    push $P112, 2
    push $P112, 33
    push $P112, 7
    new $P113, "ResizablePMCArray"
    push $P113, $P104
    push $P113, $P105
    push $P113, $P106
    push $P113, $P107
    push $P113, $P108
    push $P113, $P109
    push $P113, $P110
    push $P113, $P111
    push $P113, $P112
    .return ($P113)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "param_var"  :subid("137_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2060
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1119
    .lex "self", param_2060
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2061
    .lex "$/", $P2062
    .local string rx651_tgt
    .local int rx651_pos
    .local int rx651_off
    .local int rx651_eos
    .local int rx651_rep
    .local pmc rx651_cur
    .local pmc rx651_curclass
    .local pmc rx651_bstack
    .local pmc rx651_cstack
    (rx651_cur, rx651_tgt, rx651_pos, rx651_curclass, rx651_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx651_cur
    length rx651_eos, rx651_tgt
    eq $I19, 1, rx651_restart
    repr_get_attr_int $I11, self, rx651_curclass, "$!from"
    ne $I11, -1, rxscan652_done
    goto rxscan652_scan
  rxscan652_loop:
    inc rx651_pos
    gt rx651_pos, rx651_eos, rx651_fail
    repr_bind_attr_int rx651_cur, rx651_curclass, "$!from", rx651_pos
  rxscan652_scan:
    nqp_rxmark rx651_bstack, rxscan652_loop, rx651_pos, 0
  rxscan652_done:
    repr_bind_attr_int rx651_cur, rx651_curclass, "$!pos", rx651_pos
    $P11 = rx651_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx651_curclass, "$!pos"
    lt $I11, 0, rx651_fail
    nqp_rxmark rx651_bstack, rxsubrule653_pass, -1, 0
  rxsubrule653_pass:
    rx651_cstack = rx651_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx651_pos, $P11, rx651_curclass, "$!pos"
  # rx rxquantr654 ** 0..1
    nqp_rxmark rx651_bstack, rxquantr654_done, rx651_pos, 0
  rxquantr654_loop:
    repr_bind_attr_int rx651_cur, rx651_curclass, "$!pos", rx651_pos
    $P11 = rx651_cur."twigil"()
    repr_get_attr_int $I11, $P11, rx651_curclass, "$!pos"
    lt $I11, 0, rx651_fail
    goto rxsubrule655_pass
  rxsubrule655_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx651_curclass, "$!pos"
    lt $I11, 0, rx651_fail
  rxsubrule655_pass:
    rx651_cstack = rx651_cur."!cursor_capture"($P11, "twigil")
    set_addr $I11, rxsubrule655_back
    push rx651_bstack, $I11
    push rx651_bstack, 0
    push rx651_bstack, rx651_pos
    elements $I11, rx651_cstack
    push rx651_bstack, $I11
    repr_get_attr_int rx651_pos, $P11, rx651_curclass, "$!pos"
    nqp_rxpeek $I19, rx651_bstack, rxquantr654_done
    inc $I19
    inc $I19
    set rx651_rep, rx651_bstack[$I19]
    nqp_rxcommit rx651_bstack, rxquantr654_done
    inc rx651_rep
  rxquantr654_done:
  alt656_0:
    nqp_rxmark rx651_bstack, alt656_1, rx651_pos, 0
    repr_bind_attr_int rx651_cur, rx651_curclass, "$!pos", rx651_pos
    $P11 = rx651_cur."ident"()
    repr_get_attr_int $I11, $P11, rx651_curclass, "$!pos"
    lt $I11, 0, rx651_fail
    nqp_rxmark rx651_bstack, rxsubrule657_pass, -1, 0
  rxsubrule657_pass:
    rx651_cstack = rx651_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx651_pos, $P11, rx651_curclass, "$!pos"
    goto alt656_end
  alt656_1:
    nqp_rxmark rx651_bstack, rxcap658_fail, rx651_pos, 0
    ge rx651_pos, rx651_eos, rx651_fail
    substr $S11, rx651_tgt, rx651_pos, 1
    index $I11, ucs4:"/!", $S11
    lt $I11, 0, rx651_fail
    inc rx651_pos
    nqp_rxpeek $I19, rx651_bstack, rxcap658_fail
    inc $I19
    set $I11, rx651_bstack[$I19]
    $P11 = rx651_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx651_pos)
    rx651_cstack = rx651_cur."!cursor_capture"($P11, "name")
    goto rxcap658_done
  rxcap658_fail:
    goto rx651_fail
  rxcap658_done:
  alt656_end:
    rx651_cur."!cursor_pass"(rx651_pos, "param_var", 'backtrack'=>1)
    .return (rx651_cur)
  rx651_restart:
    repr_get_attr_obj rx651_cstack, rx651_cur, rx651_curclass, "$!cstack"
  rx651_fail:
    unless rx651_bstack, rx651_done
    pop $I19, rx651_bstack
    if_null rx651_cstack, rx651_cstack_done
    unless rx651_cstack, rx651_cstack_done
    dec $I19
    set $P11, rx651_cstack[$I19]
  rx651_cstack_done:
    pop rx651_rep, rx651_bstack
    pop rx651_pos, rx651_bstack
    pop $I19, rx651_bstack
    lt rx651_pos, -1, rx651_done
    lt rx651_pos, 0, rx651_fail
    eq $I19, 0, rx651_fail
    if_null rx651_cstack, rx651_jump
    elements $I18, rx651_bstack
    le $I18, 0, rx651_cut
    dec $I18
    set $I18, rx651_bstack[$I18]
  rx651_cut:
    assign rx651_cstack, $I18
  rx651_jump:
    jump $I19
  rx651_done:
    rx651_cur."!cursor_fail"()
    .return (rx651_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "137_1337966799.879_caps"  :subid("565_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1119
    new $P104, "Hash"
    set $P104["sigil"], 0
    set $P104["twigil"], 2
    set $P104["name"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "137_1337966799.879_nfa"  :subid("566_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1119
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "sigil"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "twigil"
    push $P106, 3
    push $P106, 1
    push $P106, 0
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "ident"
    push $P107, 0
    push $P107, 6
    push $P107, "/!"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "named_param"  :subid("138_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2066
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1124
    .lex "self", param_2066
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2067
    .lex "$/", $P2068
    .local string rx659_tgt
    .local int rx659_pos
    .local int rx659_off
    .local int rx659_eos
    .local int rx659_rep
    .local pmc rx659_cur
    .local pmc rx659_curclass
    .local pmc rx659_bstack
    .local pmc rx659_cstack
    (rx659_cur, rx659_tgt, rx659_pos, rx659_curclass, rx659_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx659_cur
    length rx659_eos, rx659_tgt
    eq $I19, 1, rx659_restart
    repr_get_attr_int $I11, self, rx659_curclass, "$!from"
    ne $I11, -1, rxscan660_done
    goto rxscan660_scan
  rxscan660_loop:
    inc rx659_pos
    gt rx659_pos, rx659_eos, rx659_fail
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!from", rx659_pos
  rxscan660_scan:
    nqp_rxmark rx659_bstack, rxscan660_loop, rx659_pos, 0
  rxscan660_done:
    add $I11, rx659_pos, 1
    gt $I11, rx659_eos, rx659_fail
    substr $S10, rx659_tgt, rx659_pos, 1
    ne $S10, ucs4:":", rx659_fail
    add rx659_pos, 1
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."param_var"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail
    nqp_rxmark rx659_bstack, rxsubrule661_pass, -1, 0
  rxsubrule661_pass:
    rx659_cstack = rx659_cur."!cursor_capture"($P11, "param_var")
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    rx659_cur."!cursor_pass"(rx659_pos, "named_param", 'backtrack'=>1)
    .return (rx659_cur)
  rx659_restart:
    repr_get_attr_obj rx659_cstack, rx659_cur, rx659_curclass, "$!cstack"
  rx659_fail:
    unless rx659_bstack, rx659_done
    pop $I19, rx659_bstack
    if_null rx659_cstack, rx659_cstack_done
    unless rx659_cstack, rx659_cstack_done
    dec $I19
    set $P11, rx659_cstack[$I19]
  rx659_cstack_done:
    pop rx659_rep, rx659_bstack
    pop rx659_pos, rx659_bstack
    pop $I19, rx659_bstack
    lt rx659_pos, -1, rx659_done
    lt rx659_pos, 0, rx659_fail
    eq $I19, 0, rx659_fail
    if_null rx659_cstack, rx659_jump
    elements $I18, rx659_bstack
    le $I18, 0, rx659_cut
    dec $I18
    set $I18, rx659_bstack[$I18]
  rx659_cut:
    assign rx659_cstack, $I18
  rx659_jump:
    jump $I19
  rx659_done:
    rx659_cur."!cursor_fail"()
    .return (rx659_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "138_1337966799.879_caps"  :subid("567_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1124
    new $P104, "Hash"
    set $P104["param_var"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "138_1337966799.879_nfa"  :subid("568_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1124
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 58
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "param_var"
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "default_value"  :subid("139_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2072
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1128
    .lex "self", param_2072
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2073
    .lex "$/", $P2074
    .local string rx662_tgt
    .local int rx662_pos
    .local int rx662_off
    .local int rx662_eos
    .local int rx662_rep
    .local pmc rx662_cur
    .local pmc rx662_curclass
    .local pmc rx662_bstack
    .local pmc rx662_cstack
    (rx662_cur, rx662_tgt, rx662_pos, rx662_curclass, rx662_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx662_cur
    length rx662_eos, rx662_tgt
    eq $I19, 1, rx662_restart
    repr_get_attr_int $I11, self, rx662_curclass, "$!from"
    ne $I11, -1, rxscan663_done
    goto rxscan663_scan
  rxscan663_loop:
    inc rx662_pos
    gt rx662_pos, rx662_eos, rx662_fail
    repr_bind_attr_int rx662_cur, rx662_curclass, "$!from", rx662_pos
  rxscan663_scan:
    nqp_rxmark rx662_bstack, rxscan663_loop, rx662_pos, 0
  rxscan663_done:
    repr_bind_attr_int rx662_cur, rx662_curclass, "$!pos", rx662_pos
    $P11 = rx662_cur."ws"()
    repr_get_attr_int $I11, $P11, rx662_curclass, "$!pos"
    lt $I11, 0, rx662_fail
    repr_get_attr_int rx662_pos, $P11, rx662_curclass, "$!pos"
    add $I11, rx662_pos, 1
    gt $I11, rx662_eos, rx662_fail
    substr $S10, rx662_tgt, rx662_pos, 1
    ne $S10, ucs4:"=", rx662_fail
    add rx662_pos, 1
    repr_bind_attr_int rx662_cur, rx662_curclass, "$!pos", rx662_pos
    $P11 = rx662_cur."ws"()
    repr_get_attr_int $I11, $P11, rx662_curclass, "$!pos"
    lt $I11, 0, rx662_fail
    repr_get_attr_int rx662_pos, $P11, rx662_curclass, "$!pos"
    repr_bind_attr_int rx662_cur, rx662_curclass, "$!pos", rx662_pos
    $P11 = rx662_cur."EXPR"("i=")
    repr_get_attr_int $I11, $P11, rx662_curclass, "$!pos"
    lt $I11, 0, rx662_fail
    nqp_rxmark rx662_bstack, rxsubrule666_pass, -1, 0
  rxsubrule666_pass:
    rx662_cstack = rx662_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx662_pos, $P11, rx662_curclass, "$!pos"
    repr_bind_attr_int rx662_cur, rx662_curclass, "$!pos", rx662_pos
    $P11 = rx662_cur."ws"()
    repr_get_attr_int $I11, $P11, rx662_curclass, "$!pos"
    lt $I11, 0, rx662_fail
    repr_get_attr_int rx662_pos, $P11, rx662_curclass, "$!pos"
    rx662_cur."!cursor_pass"(rx662_pos, "default_value", 'backtrack'=>1)
    .return (rx662_cur)
  rx662_restart:
    repr_get_attr_obj rx662_cstack, rx662_cur, rx662_curclass, "$!cstack"
  rx662_fail:
    unless rx662_bstack, rx662_done
    pop $I19, rx662_bstack
    if_null rx662_cstack, rx662_cstack_done
    unless rx662_cstack, rx662_cstack_done
    dec $I19
    set $P11, rx662_cstack[$I19]
  rx662_cstack_done:
    pop rx662_rep, rx662_bstack
    pop rx662_pos, rx662_bstack
    pop $I19, rx662_bstack
    lt rx662_pos, -1, rx662_done
    lt rx662_pos, 0, rx662_fail
    eq $I19, 0, rx662_fail
    if_null rx662_cstack, rx662_jump
    elements $I18, rx662_bstack
    le $I18, 0, rx662_cut
    dec $I18
    set $I18, rx662_bstack[$I18]
  rx662_cut:
    assign rx662_cstack, $I18
  rx662_jump:
    jump $I19
  rx662_done:
    rx662_cur."!cursor_fail"()
    .return (rx662_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "139_1337966799.879_caps"  :subid("569_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1128
    new $P104, "Hash"
    set $P104["EXPR"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "trait"  :subid("140_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2077
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1130
    .lex "self", param_2077
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2078
    .lex "$/", $P2079
    .local string rx668_tgt
    .local int rx668_pos
    .local int rx668_off
    .local int rx668_eos
    .local int rx668_rep
    .local pmc rx668_cur
    .local pmc rx668_curclass
    .local pmc rx668_bstack
    .local pmc rx668_cstack
    (rx668_cur, rx668_tgt, rx668_pos, rx668_curclass, rx668_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx668_cur
    length rx668_eos, rx668_tgt
    eq $I19, 1, rx668_restart
    repr_get_attr_int $I11, self, rx668_curclass, "$!from"
    ne $I11, -1, rxscan669_done
    goto rxscan669_scan
  rxscan669_loop:
    inc rx668_pos
    gt rx668_pos, rx668_eos, rx668_fail
    repr_bind_attr_int rx668_cur, rx668_curclass, "$!from", rx668_pos
  rxscan669_scan:
    nqp_rxmark rx668_bstack, rxscan669_loop, rx668_pos, 0
  rxscan669_done:
    repr_bind_attr_int rx668_cur, rx668_curclass, "$!pos", rx668_pos
    $P11 = rx668_cur."ws"()
    repr_get_attr_int $I11, $P11, rx668_curclass, "$!pos"
    lt $I11, 0, rx668_fail
    repr_get_attr_int rx668_pos, $P11, rx668_curclass, "$!pos"
    repr_bind_attr_int rx668_cur, rx668_curclass, "$!pos", rx668_pos
    $P11 = rx668_cur."trait_mod"()
    repr_get_attr_int $I11, $P11, rx668_curclass, "$!pos"
    lt $I11, 0, rx668_fail
    nqp_rxmark rx668_bstack, rxsubrule671_pass, -1, 0
  rxsubrule671_pass:
    rx668_cstack = rx668_cur."!cursor_capture"($P11, "trait_mod")
    repr_get_attr_int rx668_pos, $P11, rx668_curclass, "$!pos"
    repr_bind_attr_int rx668_cur, rx668_curclass, "$!pos", rx668_pos
    $P11 = rx668_cur."ws"()
    repr_get_attr_int $I11, $P11, rx668_curclass, "$!pos"
    lt $I11, 0, rx668_fail
    repr_get_attr_int rx668_pos, $P11, rx668_curclass, "$!pos"
    rx668_cur."!cursor_pass"(rx668_pos, "trait", 'backtrack'=>1)
    .return (rx668_cur)
  rx668_restart:
    repr_get_attr_obj rx668_cstack, rx668_cur, rx668_curclass, "$!cstack"
  rx668_fail:
    unless rx668_bstack, rx668_done
    pop $I19, rx668_bstack
    if_null rx668_cstack, rx668_cstack_done
    unless rx668_cstack, rx668_cstack_done
    dec $I19
    set $P11, rx668_cstack[$I19]
  rx668_cstack_done:
    pop rx668_rep, rx668_bstack
    pop rx668_pos, rx668_bstack
    pop $I19, rx668_bstack
    lt rx668_pos, -1, rx668_done
    lt rx668_pos, 0, rx668_fail
    eq $I19, 0, rx668_fail
    if_null rx668_cstack, rx668_jump
    elements $I18, rx668_bstack
    le $I18, 0, rx668_cut
    dec $I18
    set $I18, rx668_bstack[$I18]
  rx668_cut:
    assign rx668_cstack, $I18
  rx668_jump:
    jump $I19
  rx668_done:
    rx668_cur."!cursor_fail"()
    .return (rx668_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "140_1337966799.879_caps"  :subid("570_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1130
    new $P104, "Hash"
    set $P104["trait_mod"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "trait_mod"  :subid("141_1337966799.879")
    .param pmc param_2082
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1132
    .lex "self", param_2082
    $P103 = param_2082."!protoregex"("trait_mod")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "trait_mod:sym<is>"  :subid("142_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2084
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1133
    .lex "self", param_2084
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2085
    .lex "$/", $P2086
    .local string rx673_tgt
    .local int rx673_pos
    .local int rx673_off
    .local int rx673_eos
    .local int rx673_rep
    .local pmc rx673_cur
    .local pmc rx673_curclass
    .local pmc rx673_bstack
    .local pmc rx673_cstack
    (rx673_cur, rx673_tgt, rx673_pos, rx673_curclass, rx673_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx673_cur
    length rx673_eos, rx673_tgt
    eq $I19, 1, rx673_restart
    repr_get_attr_int $I11, self, rx673_curclass, "$!from"
    ne $I11, -1, rxscan674_done
    goto rxscan674_scan
  rxscan674_loop:
    inc rx673_pos
    gt rx673_pos, rx673_eos, rx673_fail
    repr_bind_attr_int rx673_cur, rx673_curclass, "$!from", rx673_pos
  rxscan674_scan:
    nqp_rxmark rx673_bstack, rxscan674_loop, rx673_pos, 0
  rxscan674_done:
    nqp_rxmark rx673_bstack, rxcap675_fail, rx673_pos, 0
    add $I11, rx673_pos, 2
    gt $I11, rx673_eos, rx673_fail
    substr $S10, rx673_tgt, rx673_pos, 2
    ne $S10, ucs4:"is", rx673_fail
    add rx673_pos, 2
    nqp_rxpeek $I19, rx673_bstack, rxcap675_fail
    inc $I19
    set $I11, rx673_bstack[$I19]
    $P11 = rx673_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx673_pos)
    rx673_cstack = rx673_cur."!cursor_capture"($P11, "sym")
    goto rxcap675_done
  rxcap675_fail:
    goto rx673_fail
  rxcap675_done:
    repr_bind_attr_int rx673_cur, rx673_curclass, "$!pos", rx673_pos
    $P11 = rx673_cur."ws"()
    repr_get_attr_int $I11, $P11, rx673_curclass, "$!pos"
    lt $I11, 0, rx673_fail
    repr_get_attr_int rx673_pos, $P11, rx673_curclass, "$!pos"
    repr_bind_attr_int rx673_cur, rx673_curclass, "$!pos", rx673_pos
    $P11 = rx673_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx673_curclass, "$!pos"
    lt $I11, 0, rx673_fail
    nqp_rxmark rx673_bstack, rxsubrule677_pass, -1, 0
  rxsubrule677_pass:
    rx673_cstack = rx673_cur."!cursor_capture"($P11, "longname")
    repr_get_attr_int rx673_pos, $P11, rx673_curclass, "$!pos"
  # rx rxquantr678 ** 0..1
    nqp_rxmark rx673_bstack, rxquantr678_done, rx673_pos, 0
  rxquantr678_loop:
    repr_bind_attr_int rx673_cur, rx673_curclass, "$!pos", rx673_pos
    $P11 = rx673_cur."circumfix"()
    repr_get_attr_int $I11, $P11, rx673_curclass, "$!pos"
    lt $I11, 0, rx673_fail
    goto rxsubrule679_pass
  rxsubrule679_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx673_curclass, "$!pos"
    lt $I11, 0, rx673_fail
  rxsubrule679_pass:
    rx673_cstack = rx673_cur."!cursor_capture"($P11, "circumfix")
    set_addr $I11, rxsubrule679_back
    push rx673_bstack, $I11
    push rx673_bstack, 0
    push rx673_bstack, rx673_pos
    elements $I11, rx673_cstack
    push rx673_bstack, $I11
    repr_get_attr_int rx673_pos, $P11, rx673_curclass, "$!pos"
    nqp_rxpeek $I19, rx673_bstack, rxquantr678_done
    inc $I19
    inc $I19
    set rx673_rep, rx673_bstack[$I19]
    nqp_rxcommit rx673_bstack, rxquantr678_done
    inc rx673_rep
  rxquantr678_done:
    repr_bind_attr_int rx673_cur, rx673_curclass, "$!pos", rx673_pos
    $P11 = rx673_cur."ws"()
    repr_get_attr_int $I11, $P11, rx673_curclass, "$!pos"
    lt $I11, 0, rx673_fail
    repr_get_attr_int rx673_pos, $P11, rx673_curclass, "$!pos"
    rx673_cur."!cursor_pass"(rx673_pos, "trait_mod:sym<is>", 'backtrack'=>1)
    .return (rx673_cur)
  rx673_restart:
    repr_get_attr_obj rx673_cstack, rx673_cur, rx673_curclass, "$!cstack"
  rx673_fail:
    unless rx673_bstack, rx673_done
    pop $I19, rx673_bstack
    if_null rx673_cstack, rx673_cstack_done
    unless rx673_cstack, rx673_cstack_done
    dec $I19
    set $P11, rx673_cstack[$I19]
  rx673_cstack_done:
    pop rx673_rep, rx673_bstack
    pop rx673_pos, rx673_bstack
    pop $I19, rx673_bstack
    lt rx673_pos, -1, rx673_done
    lt rx673_pos, 0, rx673_fail
    eq $I19, 0, rx673_fail
    if_null rx673_cstack, rx673_jump
    elements $I18, rx673_bstack
    le $I18, 0, rx673_cut
    dec $I18
    set $I18, rx673_bstack[$I18]
  rx673_cut:
    assign rx673_cstack, $I18
  rx673_jump:
    jump $I19
  rx673_done:
    rx673_cur."!cursor_fail"()
    .return (rx673_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "142_1337966799.879_caps"  :subid("571_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1133
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["longname"], 0
    set $P104["circumfix"], 2
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "142_1337966799.879_nfa"  :subid("572_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1133
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 105
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 115
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 0
    push $P107, 0
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "regex_declarator"  :subid("143_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2090
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1135
    .const 'Sub' $P2098 = "575_1337966799.879" 
    capture_lex $P2098
    .lex "self", param_2090
.annotate 'line', 1149
    $P2092 = root_new ['parrot';'Hash']
    set $P2091, $P2092
    .lex "%*RX", $P2091
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2093
    .lex "$/", $P2094
.annotate 'line', 1135
    .local string rx681_tgt
    .local int rx681_pos
    .local int rx681_off
    .local int rx681_eos
    .local int rx681_rep
    .local pmc rx681_cur
    .local pmc rx681_curclass
    .local pmc rx681_bstack
    .local pmc rx681_cstack
    (rx681_cur, rx681_tgt, rx681_pos, rx681_curclass, rx681_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx681_cur
    length rx681_eos, rx681_tgt
    eq $I19, 1, rx681_restart
    repr_get_attr_int $I11, self, rx681_curclass, "$!from"
    ne $I11, -1, rxscan682_done
    goto rxscan682_scan
  rxscan682_loop:
    inc rx681_pos
    gt rx681_pos, rx681_eos, rx681_fail
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!from", rx681_pos
  rxscan682_scan:
    nqp_rxmark rx681_bstack, rxscan682_loop, rx681_pos, 0
  rxscan682_done:
  alt683_0:
    nqp_rxmark rx681_bstack, alt683_1, rx681_pos, 0
    nqp_rxmark rx681_bstack, rxcap684_fail, rx681_pos, 0
    add $I11, rx681_pos, 5
    gt $I11, rx681_eos, rx681_fail
    substr $S10, rx681_tgt, rx681_pos, 5
    ne $S10, ucs4:"proto", rx681_fail
    add rx681_pos, 5
    nqp_rxpeek $I19, rx681_bstack, rxcap684_fail
    inc $I19
    set $I11, rx681_bstack[$I19]
    $P11 = rx681_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx681_pos)
    rx681_cstack = rx681_cur."!cursor_capture"($P11, "proto")
    goto rxcap684_done
  rxcap684_fail:
    goto rx681_fail
  rxcap684_done:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
  alt686_0:
    nqp_rxmark rx681_bstack, alt686_1, rx681_pos, 0
    add $I11, rx681_pos, 5
    gt $I11, rx681_eos, rx681_fail
    substr $S10, rx681_tgt, rx681_pos, 5
    ne $S10, ucs4:"regex", rx681_fail
    add rx681_pos, 5
    goto alt686_end
  alt686_1:
    nqp_rxmark rx681_bstack, alt686_2, rx681_pos, 0
    add $I11, rx681_pos, 5
    gt $I11, rx681_eos, rx681_fail
    substr $S10, rx681_tgt, rx681_pos, 5
    ne $S10, ucs4:"token", rx681_fail
    add rx681_pos, 5
    goto alt686_end
  alt686_2:
    add $I11, rx681_pos, 4
    gt $I11, rx681_eos, rx681_fail
    substr $S10, rx681_tgt, rx681_pos, 4
    ne $S10, ucs4:"rule", rx681_fail
    add rx681_pos, 4
  alt686_end:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail
    nqp_rxmark rx681_bstack, rxsubrule688_pass, -1, 0
  rxsubrule688_pass:
    rx681_cstack = rx681_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
  alt690_0:
    nqp_rxmark rx681_bstack, alt690_1, rx681_pos, 0
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    add $I11, rx681_pos, 3
    gt $I11, rx681_eos, rx681_fail
    substr $S10, rx681_tgt, rx681_pos, 3
    ne $S10, ucs4:"{*}", rx681_fail
    add rx681_pos, 3
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    goto alt690_end
  alt690_1:
    nqp_rxmark rx681_bstack, alt690_2, rx681_pos, 0
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    add $I11, rx681_pos, 1
    gt $I11, rx681_eos, rx681_fail
    substr $S10, rx681_tgt, rx681_pos, 1
    ne $S10, ucs4:"{", rx681_fail
    add rx681_pos, 1
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    add $I11, rx681_pos, 5
    gt $I11, rx681_eos, rx681_fail
    substr $S10, rx681_tgt, rx681_pos, 5
    ne $S10, ucs4:"<...>", rx681_fail
    add rx681_pos, 5
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    add $I11, rx681_pos, 1
    gt $I11, rx681_eos, rx681_fail
    substr $S10, rx681_tgt, rx681_pos, 1
    ne $S10, ucs4:"}", rx681_fail
    add rx681_pos, 1
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    goto alt690_end
  alt690_2:
    nqp_rxmark rx681_bstack, alt690_3, rx681_pos, 0
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    add $I11, rx681_pos, 1
    gt $I11, rx681_eos, rx681_fail
    substr $S10, rx681_tgt, rx681_pos, 1
    ne $S10, ucs4:"{", rx681_fail
    add rx681_pos, 1
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    add $I11, rx681_pos, 3
    gt $I11, rx681_eos, rx681_fail
    substr $S10, rx681_tgt, rx681_pos, 3
    ne $S10, ucs4:"<*>", rx681_fail
    add rx681_pos, 3
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    add $I11, rx681_pos, 1
    gt $I11, rx681_eos, rx681_fail
    substr $S10, rx681_tgt, rx681_pos, 1
    ne $S10, ucs4:"}", rx681_fail
    add rx681_pos, 1
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    goto alt690_end
  alt690_3:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."panic"("Proto regex body must be {*} (or <*> or <...>, which are deprecated)")
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
  alt690_end:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    goto alt683_end
  alt683_1:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    nqp_rxmark rx681_bstack, rxcap706_fail, rx681_pos, 0
  alt707_0:
    nqp_rxmark rx681_bstack, alt707_1, rx681_pos, 0
    add $I11, rx681_pos, 5
    gt $I11, rx681_eos, rx681_fail
    substr $S10, rx681_tgt, rx681_pos, 5
    ne $S10, ucs4:"regex", rx681_fail
    add rx681_pos, 5
    goto alt707_end
  alt707_1:
    nqp_rxmark rx681_bstack, alt707_2, rx681_pos, 0
    add $I11, rx681_pos, 5
    gt $I11, rx681_eos, rx681_fail
    substr $S10, rx681_tgt, rx681_pos, 5
    ne $S10, ucs4:"token", rx681_fail
    add rx681_pos, 5
    goto alt707_end
  alt707_2:
    add $I11, rx681_pos, 4
    gt $I11, rx681_eos, rx681_fail
    substr $S10, rx681_tgt, rx681_pos, 4
    ne $S10, ucs4:"rule", rx681_fail
    add rx681_pos, 4
  alt707_end:
    nqp_rxpeek $I19, rx681_bstack, rxcap706_fail
    inc $I19
    set $I11, rx681_bstack[$I19]
    $P11 = rx681_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx681_pos)
    rx681_cstack = rx681_cur."!cursor_capture"($P11, "sym")
    goto rxcap706_done
  rxcap706_fail:
    goto rx681_fail
  rxcap706_done:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail
    nqp_rxmark rx681_bstack, rxsubrule710_pass, -1, 0
  rxsubrule710_pass:
    rx681_cstack = rx681_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
  # rx rxquantr714 ** 0..1
    nqp_rxmark rx681_bstack, rxquantr714_done, rx681_pos, 0
  rxquantr714_loop:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    add $I11, rx681_pos, 1
    gt $I11, rx681_eos, rx681_fail
    substr $S10, rx681_tgt, rx681_pos, 1
    ne $S10, ucs4:"(", rx681_fail
    add rx681_pos, 1
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."signature"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail
    nqp_rxmark rx681_bstack, rxsubrule717_pass, -1, 0
  rxsubrule717_pass:
    rx681_cstack = rx681_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    add $I11, rx681_pos, 1
    gt $I11, rx681_eos, rx681_fail
    substr $S10, rx681_tgt, rx681_pos, 1
    ne $S10, ucs4:")", rx681_fail
    add rx681_pos, 1
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    nqp_rxpeek $I19, rx681_bstack, rxquantr714_done
    inc $I19
    inc $I19
    set rx681_rep, rx681_bstack[$I19]
    nqp_rxcommit rx681_bstack, rxquantr714_done
    inc rx681_rep
  rxquantr714_done:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    store_lex unicode:"$\x{a2}", rx681_cur
    set $P132, $P2091
    unless_null $P132, vivify_1349
    get_hll_global $P130, "GLOBAL"
    get_who $P131, $P130
    set $P132, $P131["%RX"]
    unless_null $P132, vivify_1350
    die "Contextual %*RX not found"
  vivify_1350:
  vivify_1349:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    store_lex unicode:"$\x{a2}", rx681_cur
    find_lex $P134, unicode:"$\x{a2}"
    $P135 = $P134."MATCH"()
    store_lex "$/", $P135
.annotate 'line', 1150
    .const 'Sub' $P2098 = "575_1337966799.879" 
    capture_lex $P2098
    $P136 = $P2098()
.annotate 'line', 1135
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    add $I11, rx681_pos, 1
    gt $I11, rx681_eos, rx681_fail
    substr $S10, rx681_tgt, rx681_pos, 1
    ne $S10, ucs4:"{", rx681_fail
    add rx681_pos, 1
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."LANG"("Regex", "nibbler")
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail
    nqp_rxmark rx681_bstack, rxsubrule723_pass, -1, 0
  rxsubrule723_pass:
    rx681_cstack = rx681_cur."!cursor_capture"($P11, "p6regex")
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    add $I11, rx681_pos, 1
    gt $I11, rx681_eos, rx681_fail
    substr $S10, rx681_tgt, rx681_pos, 1
    ne $S10, ucs4:"}", rx681_fail
    add rx681_pos, 1
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
  alt683_end:
    rx681_cur."!cursor_pass"(rx681_pos, "regex_declarator", 'backtrack'=>1)
    .return (rx681_cur)
  rx681_restart:
    repr_get_attr_obj rx681_cstack, rx681_cur, rx681_curclass, "$!cstack"
  rx681_fail:
    unless rx681_bstack, rx681_done
    pop $I19, rx681_bstack
    if_null rx681_cstack, rx681_cstack_done
    unless rx681_cstack, rx681_cstack_done
    dec $I19
    set $P11, rx681_cstack[$I19]
  rx681_cstack_done:
    pop rx681_rep, rx681_bstack
    pop rx681_pos, rx681_bstack
    pop $I19, rx681_bstack
    lt rx681_pos, -1, rx681_done
    lt rx681_pos, 0, rx681_fail
    eq $I19, 0, rx681_fail
    if_null rx681_cstack, rx681_jump
    elements $I18, rx681_bstack
    le $I18, 0, rx681_cut
    dec $I18
    set $I18, rx681_bstack[$I18]
  rx681_cut:
    assign rx681_cstack, $I18
  rx681_jump:
    jump $I19
  rx681_done:
    rx681_cur."!cursor_fail"()
    .return (rx681_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "143_1337966799.879_caps"  :subid("573_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1135
    new $P104, "Hash"
    set $P104["proto"], 0
    set $P104["deflongname"], 0
    set $P104["sym"], 0
    set $P104["signature"], 2
    set $P104["p6regex"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "143_1337966799.879_nfa"  :subid("574_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1135
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 112
    push $P105, 2
    push $P105, 0
    push $P105, 0
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 114
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 111
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 116
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 111
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 0
    push $P110, 0
    push $P110, 0
    new $P111, "ResizablePMCArray"
    push $P111, $P104
    push $P111, $P105
    push $P111, $P106
    push $P111, $P107
    push $P111, $P108
    push $P111, $P109
    push $P111, $P110
    .return ($P111)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block2097"  :anon :subid("575_1337966799.879") :outer("143_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1151
    find_lex $P2099, "$/"
    unless_null $P2099, vivify_1351
    $P2099 = root_new ['parrot';'Hash']
  vivify_1351:
    set $P136, $P2099["sym"]
    unless_null $P136, vivify_1352
    new $P136, "Undef"
  vivify_1352:
    set $S100, $P136
    iseq $I100, $S100, "rule"
    new $P137, 'Integer'
    set $P137, $I100
    find_dynamic_lex $P140, "%*RX"
    unless_null $P140, vivify_1353
    get_hll_global $P138, "GLOBAL"
    get_who $P139, $P138
    set $P140, $P139["%RX"]
    unless_null $P140, vivify_1354
    die "Contextual %*RX not found"
  vivify_1354:
    store_dynamic_lex "%*RX", $P140
  vivify_1353:
    set $P140["s"], $P137
.annotate 'line', 1152
    find_lex $P2101, "$/"
    unless_null $P2101, vivify_1355
    $P2101 = root_new ['parrot';'Hash']
  vivify_1355:
    set $P137, $P2101["sym"]
    unless_null $P137, vivify_1356
    new $P137, "Undef"
  vivify_1356:
    set $S100, $P137
    iseq $I100, $S100, "token"
    unless $I100, unless_2100
    new $P136, 'Integer'
    set $P136, $I100
    goto unless_2100_end
  unless_2100:
    find_lex $P2102, "$/"
    unless_null $P2102, vivify_1357
    $P2102 = root_new ['parrot';'Hash']
  vivify_1357:
    set $P138, $P2102["sym"]
    unless_null $P138, vivify_1358
    new $P138, "Undef"
  vivify_1358:
    set $S101, $P138
    iseq $I101, $S101, "rule"
    new $P136, 'Integer'
    set $P136, $I101
  unless_2100_end:
    find_dynamic_lex $P141, "%*RX"
    unless_null $P141, vivify_1359
    get_hll_global $P139, "GLOBAL"
    get_who $P140, $P139
    set $P141, $P140["%RX"]
    unless_null $P141, vivify_1360
    die "Contextual %*RX not found"
  vivify_1360:
    store_dynamic_lex "%*RX", $P141
  vivify_1359:
    set $P141["r"], $P136
.annotate 'line', 1153
    find_lex $P2103, "$/"
    unless_null $P2103, vivify_1361
    $P2103 = root_new ['parrot';'Hash']
  vivify_1361:
    set $P136, $P2103["deflongname"]
    unless_null $P136, vivify_1362
    new $P136, "Undef"
  vivify_1362:
    set $S100, $P136
    new $P137, 'String'
    set $P137, $S100
    find_dynamic_lex $P140, "%*RX"
    unless_null $P140, vivify_1363
    get_hll_global $P138, "GLOBAL"
    get_who $P139, $P138
    set $P140, $P139["%RX"]
    unless_null $P140, vivify_1364
    die "Contextual %*RX not found"
  vivify_1364:
    store_dynamic_lex "%*RX", $P140
  vivify_1363:
    set $P140["name"], $P137
.annotate 'line', 1150
    .return ($P137)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "dotty"  :subid("144_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2105
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1159
    .lex "self", param_2105
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2106
    .lex "$/", $P2107
    .local string rx725_tgt
    .local int rx725_pos
    .local int rx725_off
    .local int rx725_eos
    .local int rx725_rep
    .local pmc rx725_cur
    .local pmc rx725_curclass
    .local pmc rx725_bstack
    .local pmc rx725_cstack
    (rx725_cur, rx725_tgt, rx725_pos, rx725_curclass, rx725_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx725_cur
    length rx725_eos, rx725_tgt
    eq $I19, 1, rx725_restart
    repr_get_attr_int $I11, self, rx725_curclass, "$!from"
    ne $I11, -1, rxscan726_done
    goto rxscan726_scan
  rxscan726_loop:
    inc rx725_pos
    gt rx725_pos, rx725_eos, rx725_fail
    repr_bind_attr_int rx725_cur, rx725_curclass, "$!from", rx725_pos
  rxscan726_scan:
    nqp_rxmark rx725_bstack, rxscan726_loop, rx725_pos, 0
  rxscan726_done:
    add $I11, rx725_pos, 1
    gt $I11, rx725_eos, rx725_fail
    substr $S10, rx725_tgt, rx725_pos, 1
    ne $S10, ucs4:".", rx725_fail
    add rx725_pos, 1
  alt727_0:
    nqp_rxmark rx725_bstack, alt727_1, rx725_pos, 0
    repr_bind_attr_int rx725_cur, rx725_curclass, "$!pos", rx725_pos
    $P11 = rx725_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx725_curclass, "$!pos"
    lt $I11, 0, rx725_fail
    nqp_rxmark rx725_bstack, rxsubrule728_pass, -1, 0
  rxsubrule728_pass:
    rx725_cstack = rx725_cur."!cursor_capture"($P11, "longname=deflongname")
    repr_get_attr_int rx725_pos, $P11, rx725_curclass, "$!pos"
    goto alt727_end
  alt727_1:
    ge rx725_pos, rx725_eos, rx725_fail
    substr $S11, rx725_tgt, rx725_pos, 1
    index $I11, ucs4:"'\"", $S11
    lt $I11, 0, rx725_fail
    repr_bind_attr_int rx725_cur, rx725_curclass, "$!pos", rx725_pos
    $P11 = rx725_cur."quote"()
    repr_get_attr_int $I11, $P11, rx725_curclass, "$!pos"
    lt $I11, 0, rx725_fail
    nqp_rxmark rx725_bstack, rxsubrule729_pass, -1, 0
  rxsubrule729_pass:
    rx725_cstack = rx725_cur."!cursor_capture"($P11, "quote")
    repr_get_attr_int rx725_pos, $P11, rx725_curclass, "$!pos"
  alt730_0:
    nqp_rxmark rx725_bstack, alt730_1, rx725_pos, 0
    ge rx725_pos, rx725_eos, rx725_fail
    substr $S11, rx725_tgt, rx725_pos, 1
    index $I11, ucs4:"(", $S11
    lt $I11, 0, rx725_fail
    goto alt730_end
  alt730_1:
    repr_bind_attr_int rx725_cur, rx725_curclass, "$!pos", rx725_pos
    $P11 = rx725_cur."panic"("Quoted method name requires parenthesized arguments")
    repr_get_attr_int $I11, $P11, rx725_curclass, "$!pos"
    lt $I11, 0, rx725_fail
    repr_get_attr_int rx725_pos, $P11, rx725_curclass, "$!pos"
  alt730_end:
  alt727_end:
  # rx rxquantr732 ** 0..1
    nqp_rxmark rx725_bstack, rxquantr732_done, rx725_pos, 0
  rxquantr732_loop:
  alt733_0:
    nqp_rxmark rx725_bstack, alt733_1, rx725_pos, 0
    ge rx725_pos, rx725_eos, rx725_fail
    substr $S11, rx725_tgt, rx725_pos, 1
    index $I11, ucs4:"(", $S11
    lt $I11, 0, rx725_fail
    repr_bind_attr_int rx725_cur, rx725_curclass, "$!pos", rx725_pos
    $P11 = rx725_cur."args"()
    repr_get_attr_int $I11, $P11, rx725_curclass, "$!pos"
    lt $I11, 0, rx725_fail
    nqp_rxmark rx725_bstack, rxsubrule734_pass, -1, 0
  rxsubrule734_pass:
    rx725_cstack = rx725_cur."!cursor_capture"($P11, "args")
    repr_get_attr_int rx725_pos, $P11, rx725_curclass, "$!pos"
    goto alt733_end
  alt733_1:
    add $I11, rx725_pos, 1
    gt $I11, rx725_eos, rx725_fail
    substr $S10, rx725_tgt, rx725_pos, 1
    ne $S10, ucs4:":", rx725_fail
    add rx725_pos, 1
    ge rx725_pos, rx725_eos, rx725_fail
    is_cclass $I11, .CCLASS_WHITESPACE, rx725_tgt, rx725_pos
    unless $I11, rx725_fail
    add rx725_pos, 1
    repr_bind_attr_int rx725_cur, rx725_curclass, "$!pos", rx725_pos
    $P11 = rx725_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx725_curclass, "$!pos"
    lt $I11, 0, rx725_fail
    nqp_rxmark rx725_bstack, rxsubrule735_pass, -1, 0
  rxsubrule735_pass:
    rx725_cstack = rx725_cur."!cursor_capture"($P11, "args")
    repr_get_attr_int rx725_pos, $P11, rx725_curclass, "$!pos"
  alt733_end:
    nqp_rxpeek $I19, rx725_bstack, rxquantr732_done
    inc $I19
    inc $I19
    set rx725_rep, rx725_bstack[$I19]
    nqp_rxcommit rx725_bstack, rxquantr732_done
    inc rx725_rep
  rxquantr732_done:
    rx725_cur."!cursor_pass"(rx725_pos, "dotty", 'backtrack'=>1)
    .return (rx725_cur)
  rx725_restart:
    repr_get_attr_obj rx725_cstack, rx725_cur, rx725_curclass, "$!cstack"
  rx725_fail:
    unless rx725_bstack, rx725_done
    pop $I19, rx725_bstack
    if_null rx725_cstack, rx725_cstack_done
    unless rx725_cstack, rx725_cstack_done
    dec $I19
    set $P11, rx725_cstack[$I19]
  rx725_cstack_done:
    pop rx725_rep, rx725_bstack
    pop rx725_pos, rx725_bstack
    pop $I19, rx725_bstack
    lt rx725_pos, -1, rx725_done
    lt rx725_pos, 0, rx725_fail
    eq $I19, 0, rx725_fail
    if_null rx725_cstack, rx725_jump
    elements $I18, rx725_bstack
    le $I18, 0, rx725_cut
    dec $I18
    set $I18, rx725_bstack[$I18]
  rx725_cut:
    assign rx725_cstack, $I18
  rx725_jump:
    jump $I19
  rx725_done:
    rx725_cur."!cursor_fail"()
    .return (rx725_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "144_1337966799.879_caps"  :subid("576_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1159
    new $P104, "Hash"
    set $P104["longname"], 0
    set $P104["deflongname"], 0
    set $P104["quote"], 0
    set $P104["args"], 2
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "144_1337966799.879_nfa"  :subid("577_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1159
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 46
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "deflongname"
    push $P106, 3
    push $P106, 6
    push $P106, "'\""
    push $P106, 4
    new $P107, "ResizablePMCArray"
    push $P107, 6
    push $P107, "("
    push $P107, 5
    push $P107, 2
    push $P107, 58
    push $P107, 6
    push $P107, 1
    push $P107, 0
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, 0
    push $P108, 0
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, 0
    push $P109, 0
    push $P109, 0
    new $P110, "ResizablePMCArray"
    push $P110, 4
    push $P110, 32
    push $P110, 7
    new $P111, "ResizablePMCArray"
    push $P111, 8
    push $P111, "arglist"
    push $P111, 0
    new $P112, "ResizablePMCArray"
    push $P112, $P104
    push $P112, $P105
    push $P112, $P106
    push $P112, $P107
    push $P112, $P108
    push $P112, $P109
    push $P112, $P110
    push $P112, $P111
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<self>"  :subid("145_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2111
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1172
    .lex "self", param_2111
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2112
    .lex "$/", $P2113
    .local string rx736_tgt
    .local int rx736_pos
    .local int rx736_off
    .local int rx736_eos
    .local int rx736_rep
    .local pmc rx736_cur
    .local pmc rx736_curclass
    .local pmc rx736_bstack
    .local pmc rx736_cstack
    (rx736_cur, rx736_tgt, rx736_pos, rx736_curclass, rx736_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx736_cur
    length rx736_eos, rx736_tgt
    eq $I19, 1, rx736_restart
    repr_get_attr_int $I11, self, rx736_curclass, "$!from"
    ne $I11, -1, rxscan737_done
    goto rxscan737_scan
  rxscan737_loop:
    inc rx736_pos
    gt rx736_pos, rx736_eos, rx736_fail
    repr_bind_attr_int rx736_cur, rx736_curclass, "$!from", rx736_pos
  rxscan737_scan:
    nqp_rxmark rx736_bstack, rxscan737_loop, rx736_pos, 0
  rxscan737_done:
    nqp_rxmark rx736_bstack, rxcap738_fail, rx736_pos, 0
    add $I11, rx736_pos, 4
    gt $I11, rx736_eos, rx736_fail
    substr $S10, rx736_tgt, rx736_pos, 4
    ne $S10, ucs4:"self", rx736_fail
    add rx736_pos, 4
    nqp_rxpeek $I19, rx736_bstack, rxcap738_fail
    inc $I19
    set $I11, rx736_bstack[$I19]
    $P11 = rx736_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx736_pos)
    rx736_cstack = rx736_cur."!cursor_capture"($P11, "sym")
    goto rxcap738_done
  rxcap738_fail:
    goto rx736_fail
  rxcap738_done:
    le rx736_pos, 0, rx736_fail
    is_cclass $I11, .CCLASS_WORD, rx736_tgt, rx736_pos
    if $I11, rx736_fail
    sub $I11, rx736_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx736_tgt, $I11
    unless $I11, rx736_fail
    rx736_cur."!cursor_pass"(rx736_pos, "term:sym<self>", 'backtrack'=>1)
    .return (rx736_cur)
  rx736_restart:
    repr_get_attr_obj rx736_cstack, rx736_cur, rx736_curclass, "$!cstack"
  rx736_fail:
    unless rx736_bstack, rx736_done
    pop $I19, rx736_bstack
    if_null rx736_cstack, rx736_cstack_done
    unless rx736_cstack, rx736_cstack_done
    dec $I19
    set $P11, rx736_cstack[$I19]
  rx736_cstack_done:
    pop rx736_rep, rx736_bstack
    pop rx736_pos, rx736_bstack
    pop $I19, rx736_bstack
    lt rx736_pos, -1, rx736_done
    lt rx736_pos, 0, rx736_fail
    eq $I19, 0, rx736_fail
    if_null rx736_cstack, rx736_jump
    elements $I18, rx736_bstack
    le $I18, 0, rx736_cut
    dec $I18
    set $I18, rx736_bstack[$I18]
  rx736_cut:
    assign rx736_cstack, $I18
  rx736_jump:
    jump $I19
  rx736_done:
    rx736_cur."!cursor_fail"()
    .return (rx736_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "145_1337966799.879_caps"  :subid("578_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1172
    new $P104, "Hash"
    set $P104["sym"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "145_1337966799.879_nfa"  :subid("579_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1172
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 115
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 101
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 108
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 102
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 1
    push $P109, 0
    push $P109, 0
    new $P110, "ResizablePMCArray"
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<identifier>"  :subid("146_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2117
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1174
    .lex "self", param_2117
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2118
    .lex "$/", $P2119
    .local string rx740_tgt
    .local int rx740_pos
    .local int rx740_off
    .local int rx740_eos
    .local int rx740_rep
    .local pmc rx740_cur
    .local pmc rx740_curclass
    .local pmc rx740_bstack
    .local pmc rx740_cstack
    (rx740_cur, rx740_tgt, rx740_pos, rx740_curclass, rx740_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx740_cur
    length rx740_eos, rx740_tgt
    eq $I19, 1, rx740_restart
    repr_get_attr_int $I11, self, rx740_curclass, "$!from"
    ne $I11, -1, rxscan741_done
    goto rxscan741_scan
  rxscan741_loop:
    inc rx740_pos
    gt rx740_pos, rx740_eos, rx740_fail
    repr_bind_attr_int rx740_cur, rx740_curclass, "$!from", rx740_pos
  rxscan741_scan:
    nqp_rxmark rx740_bstack, rxscan741_loop, rx740_pos, 0
  rxscan741_done:
    repr_bind_attr_int rx740_cur, rx740_curclass, "$!pos", rx740_pos
    $P11 = rx740_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx740_curclass, "$!pos"
    lt $I11, 0, rx740_fail
    nqp_rxmark rx740_bstack, rxsubrule742_pass, -1, 0
  rxsubrule742_pass:
    rx740_cstack = rx740_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx740_pos, $P11, rx740_curclass, "$!pos"
    ge rx740_pos, rx740_eos, rx740_fail
    substr $S11, rx740_tgt, rx740_pos, 1
    index $I11, ucs4:"(", $S11
    lt $I11, 0, rx740_fail
    repr_bind_attr_int rx740_cur, rx740_curclass, "$!pos", rx740_pos
    $P11 = rx740_cur."args"()
    repr_get_attr_int $I11, $P11, rx740_curclass, "$!pos"
    lt $I11, 0, rx740_fail
    nqp_rxmark rx740_bstack, rxsubrule743_pass, -1, 0
  rxsubrule743_pass:
    rx740_cstack = rx740_cur."!cursor_capture"($P11, "args")
    repr_get_attr_int rx740_pos, $P11, rx740_curclass, "$!pos"
    rx740_cur."!cursor_pass"(rx740_pos, "term:sym<identifier>", 'backtrack'=>1)
    .return (rx740_cur)
  rx740_restart:
    repr_get_attr_obj rx740_cstack, rx740_cur, rx740_curclass, "$!cstack"
  rx740_fail:
    unless rx740_bstack, rx740_done
    pop $I19, rx740_bstack
    if_null rx740_cstack, rx740_cstack_done
    unless rx740_cstack, rx740_cstack_done
    dec $I19
    set $P11, rx740_cstack[$I19]
  rx740_cstack_done:
    pop rx740_rep, rx740_bstack
    pop rx740_pos, rx740_bstack
    pop $I19, rx740_bstack
    lt rx740_pos, -1, rx740_done
    lt rx740_pos, 0, rx740_fail
    eq $I19, 0, rx740_fail
    if_null rx740_cstack, rx740_jump
    elements $I18, rx740_bstack
    le $I18, 0, rx740_cut
    dec $I18
    set $I18, rx740_bstack[$I18]
  rx740_cut:
    assign rx740_cstack, $I18
  rx740_jump:
    jump $I19
  rx740_done:
    rx740_cur."!cursor_fail"()
    .return (rx740_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "146_1337966799.879_caps"  :subid("580_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1174
    new $P104, "Hash"
    set $P104["deflongname"], 0
    set $P104["args"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "146_1337966799.879_nfa"  :subid("581_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1174
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "deflongname"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 6
    push $P106, "("
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 0
    push $P107, 0
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<name>"  :subid("147_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2123
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1178
    .lex "self", param_2123
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2124
    .lex "$/", $P2125
    .local string rx744_tgt
    .local int rx744_pos
    .local int rx744_off
    .local int rx744_eos
    .local int rx744_rep
    .local pmc rx744_cur
    .local pmc rx744_curclass
    .local pmc rx744_bstack
    .local pmc rx744_cstack
    (rx744_cur, rx744_tgt, rx744_pos, rx744_curclass, rx744_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx744_cur
    length rx744_eos, rx744_tgt
    eq $I19, 1, rx744_restart
    repr_get_attr_int $I11, self, rx744_curclass, "$!from"
    ne $I11, -1, rxscan745_done
    goto rxscan745_scan
  rxscan745_loop:
    inc rx744_pos
    gt rx744_pos, rx744_eos, rx744_fail
    repr_bind_attr_int rx744_cur, rx744_curclass, "$!from", rx744_pos
  rxscan745_scan:
    nqp_rxmark rx744_bstack, rxscan745_loop, rx744_pos, 0
  rxscan745_done:
    repr_bind_attr_int rx744_cur, rx744_curclass, "$!pos", rx744_pos
    $P11 = rx744_cur."name"()
    repr_get_attr_int $I11, $P11, rx744_curclass, "$!pos"
    lt $I11, 0, rx744_fail
    nqp_rxmark rx744_bstack, rxsubrule746_pass, -1, 0
  rxsubrule746_pass:
    rx744_cstack = rx744_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx744_pos, $P11, rx744_curclass, "$!pos"
  # rx rxquantr747 ** 0..1
    nqp_rxmark rx744_bstack, rxquantr747_done, rx744_pos, 0
  rxquantr747_loop:
    repr_bind_attr_int rx744_cur, rx744_curclass, "$!pos", rx744_pos
    $P11 = rx744_cur."args"()
    repr_get_attr_int $I11, $P11, rx744_curclass, "$!pos"
    lt $I11, 0, rx744_fail
    goto rxsubrule748_pass
  rxsubrule748_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx744_curclass, "$!pos"
    lt $I11, 0, rx744_fail
  rxsubrule748_pass:
    rx744_cstack = rx744_cur."!cursor_capture"($P11, "args")
    set_addr $I11, rxsubrule748_back
    push rx744_bstack, $I11
    push rx744_bstack, 0
    push rx744_bstack, rx744_pos
    elements $I11, rx744_cstack
    push rx744_bstack, $I11
    repr_get_attr_int rx744_pos, $P11, rx744_curclass, "$!pos"
    nqp_rxpeek $I19, rx744_bstack, rxquantr747_done
    inc $I19
    inc $I19
    set rx744_rep, rx744_bstack[$I19]
    nqp_rxcommit rx744_bstack, rxquantr747_done
    inc rx744_rep
  rxquantr747_done:
    rx744_cur."!cursor_pass"(rx744_pos, "term:sym<name>", 'backtrack'=>1)
    .return (rx744_cur)
  rx744_restart:
    repr_get_attr_obj rx744_cstack, rx744_cur, rx744_curclass, "$!cstack"
  rx744_fail:
    unless rx744_bstack, rx744_done
    pop $I19, rx744_bstack
    if_null rx744_cstack, rx744_cstack_done
    unless rx744_cstack, rx744_cstack_done
    dec $I19
    set $P11, rx744_cstack[$I19]
  rx744_cstack_done:
    pop rx744_rep, rx744_bstack
    pop rx744_pos, rx744_bstack
    pop $I19, rx744_bstack
    lt rx744_pos, -1, rx744_done
    lt rx744_pos, 0, rx744_fail
    eq $I19, 0, rx744_fail
    if_null rx744_cstack, rx744_jump
    elements $I18, rx744_bstack
    le $I18, 0, rx744_cut
    dec $I18
    set $I18, rx744_bstack[$I18]
  rx744_cut:
    assign rx744_cstack, $I18
  rx744_jump:
    jump $I19
  rx744_done:
    rx744_cur."!cursor_fail"()
    .return (rx744_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "147_1337966799.879_caps"  :subid("582_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1178
    new $P104, "Hash"
    set $P104["name"], 0
    set $P104["args"], 2
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "147_1337966799.879_nfa"  :subid("583_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1178
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "name"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "args"
    push $P106, 0
    push $P106, 1
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<pir::op>"  :subid("148_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2129
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1182
    .lex "self", param_2129
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2130
    .lex "$/", $P2131
    .local string rx749_tgt
    .local int rx749_pos
    .local int rx749_off
    .local int rx749_eos
    .local int rx749_rep
    .local pmc rx749_cur
    .local pmc rx749_curclass
    .local pmc rx749_bstack
    .local pmc rx749_cstack
    (rx749_cur, rx749_tgt, rx749_pos, rx749_curclass, rx749_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx749_cur
    length rx749_eos, rx749_tgt
    eq $I19, 1, rx749_restart
    repr_get_attr_int $I11, self, rx749_curclass, "$!from"
    ne $I11, -1, rxscan750_done
    goto rxscan750_scan
  rxscan750_loop:
    inc rx749_pos
    gt rx749_pos, rx749_eos, rx749_fail
    repr_bind_attr_int rx749_cur, rx749_curclass, "$!from", rx749_pos
  rxscan750_scan:
    nqp_rxmark rx749_bstack, rxscan750_loop, rx749_pos, 0
  rxscan750_done:
    add $I11, rx749_pos, 5
    gt $I11, rx749_eos, rx749_fail
    substr $S10, rx749_tgt, rx749_pos, 5
    ne $S10, ucs4:"pir::", rx749_fail
    add rx749_pos, 5
    nqp_rxmark rx749_bstack, rxcap751_fail, rx749_pos, 0
  # rx rxquantr752 ** 1..-1
    nqp_rxmark rx749_bstack, rxquantr752_done, -1, 0
  rxquantr752_loop:
    ge rx749_pos, rx749_eos, rx749_fail
    is_cclass $I11, .CCLASS_WORD, rx749_tgt, rx749_pos
    unless $I11, rx749_fail
    add rx749_pos, 1
    nqp_rxpeek $I19, rx749_bstack, rxquantr752_done
    inc $I19
    inc $I19
    set rx749_rep, rx749_bstack[$I19]
    nqp_rxcommit rx749_bstack, rxquantr752_done
    inc rx749_rep
    nqp_rxmark rx749_bstack, rxquantr752_done, rx749_pos, rx749_rep
    goto rxquantr752_loop
  rxquantr752_done:
    nqp_rxpeek $I19, rx749_bstack, rxcap751_fail
    inc $I19
    set $I11, rx749_bstack[$I19]
    $P11 = rx749_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx749_pos)
    rx749_cstack = rx749_cur."!cursor_capture"($P11, "op")
    goto rxcap751_done
  rxcap751_fail:
    goto rx749_fail
  rxcap751_done:
  # rx rxquantr753 ** 0..1
    nqp_rxmark rx749_bstack, rxquantr753_done, rx749_pos, 0
  rxquantr753_loop:
    repr_bind_attr_int rx749_cur, rx749_curclass, "$!pos", rx749_pos
    $P11 = rx749_cur."args"()
    repr_get_attr_int $I11, $P11, rx749_curclass, "$!pos"
    lt $I11, 0, rx749_fail
    goto rxsubrule754_pass
  rxsubrule754_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx749_curclass, "$!pos"
    lt $I11, 0, rx749_fail
  rxsubrule754_pass:
    rx749_cstack = rx749_cur."!cursor_capture"($P11, "args")
    set_addr $I11, rxsubrule754_back
    push rx749_bstack, $I11
    push rx749_bstack, 0
    push rx749_bstack, rx749_pos
    elements $I11, rx749_cstack
    push rx749_bstack, $I11
    repr_get_attr_int rx749_pos, $P11, rx749_curclass, "$!pos"
    nqp_rxpeek $I19, rx749_bstack, rxquantr753_done
    inc $I19
    inc $I19
    set rx749_rep, rx749_bstack[$I19]
    nqp_rxcommit rx749_bstack, rxquantr753_done
    inc rx749_rep
  rxquantr753_done:
    rx749_cur."!cursor_pass"(rx749_pos, "term:sym<pir::op>", 'backtrack'=>1)
    .return (rx749_cur)
  rx749_restart:
    repr_get_attr_obj rx749_cstack, rx749_cur, rx749_curclass, "$!cstack"
  rx749_fail:
    unless rx749_bstack, rx749_done
    pop $I19, rx749_bstack
    if_null rx749_cstack, rx749_cstack_done
    unless rx749_cstack, rx749_cstack_done
    dec $I19
    set $P11, rx749_cstack[$I19]
  rx749_cstack_done:
    pop rx749_rep, rx749_bstack
    pop rx749_pos, rx749_bstack
    pop $I19, rx749_bstack
    lt rx749_pos, -1, rx749_done
    lt rx749_pos, 0, rx749_fail
    eq $I19, 0, rx749_fail
    if_null rx749_cstack, rx749_jump
    elements $I18, rx749_bstack
    le $I18, 0, rx749_cut
    dec $I18
    set $I18, rx749_bstack[$I18]
  rx749_cut:
    assign rx749_cstack, $I18
  rx749_jump:
    jump $I19
  rx749_done:
    rx749_cur."!cursor_fail"()
    .return (rx749_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "148_1337966799.879_caps"  :subid("584_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1182
    new $P104, "Hash"
    set $P104["op"], 0
    set $P104["args"], 2
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "148_1337966799.879_nfa"  :subid("585_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1182
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 112
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 105
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 114
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 58
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 58
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 1
    push $P110, 0
    push $P110, 7
    new $P111, "ResizablePMCArray"
    push $P111, 4
    push $P111, 8192
    push $P111, 8
    new $P112, "ResizablePMCArray"
    push $P112, 1
    push $P112, 0
    push $P112, 7
    push $P112, 1
    push $P112, 0
    push $P112, 9
    push $P112, 8
    push $P112, "args"
    push $P112, 0
    push $P112, 1
    push $P112, 0
    push $P112, 0
    new $P113, "ResizablePMCArray"
    new $P114, "ResizablePMCArray"
    push $P114, $P104
    push $P114, $P105
    push $P114, $P106
    push $P114, $P107
    push $P114, $P108
    push $P114, $P109
    push $P114, $P110
    push $P114, $P111
    push $P114, $P112
    push $P114, $P113
    .return ($P114)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<pir::const>"  :subid("149_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2135
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1186
    .lex "self", param_2135
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2136
    .lex "$/", $P2137
    .local string rx755_tgt
    .local int rx755_pos
    .local int rx755_off
    .local int rx755_eos
    .local int rx755_rep
    .local pmc rx755_cur
    .local pmc rx755_curclass
    .local pmc rx755_bstack
    .local pmc rx755_cstack
    (rx755_cur, rx755_tgt, rx755_pos, rx755_curclass, rx755_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx755_cur
    length rx755_eos, rx755_tgt
    eq $I19, 1, rx755_restart
    repr_get_attr_int $I11, self, rx755_curclass, "$!from"
    ne $I11, -1, rxscan756_done
    goto rxscan756_scan
  rxscan756_loop:
    inc rx755_pos
    gt rx755_pos, rx755_eos, rx755_fail
    repr_bind_attr_int rx755_cur, rx755_curclass, "$!from", rx755_pos
  rxscan756_scan:
    nqp_rxmark rx755_bstack, rxscan756_loop, rx755_pos, 0
  rxscan756_done:
    add $I11, rx755_pos, 12
    gt $I11, rx755_eos, rx755_fail
    substr $S10, rx755_tgt, rx755_pos, 12
    ne $S10, ucs4:"pir::const::", rx755_fail
    add rx755_pos, 12
    nqp_rxmark rx755_bstack, rxcap757_fail, rx755_pos, 0
  # rx rxquantr758 ** 1..-1
    nqp_rxmark rx755_bstack, rxquantr758_done, -1, 0
  rxquantr758_loop:
    ge rx755_pos, rx755_eos, rx755_fail
    is_cclass $I11, .CCLASS_WORD, rx755_tgt, rx755_pos
    unless $I11, rx755_fail
    add rx755_pos, 1
    nqp_rxpeek $I19, rx755_bstack, rxquantr758_done
    inc $I19
    inc $I19
    set rx755_rep, rx755_bstack[$I19]
    nqp_rxcommit rx755_bstack, rxquantr758_done
    inc rx755_rep
    nqp_rxmark rx755_bstack, rxquantr758_done, rx755_pos, rx755_rep
    goto rxquantr758_loop
  rxquantr758_done:
    nqp_rxpeek $I19, rx755_bstack, rxcap757_fail
    inc $I19
    set $I11, rx755_bstack[$I19]
    $P11 = rx755_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx755_pos)
    rx755_cstack = rx755_cur."!cursor_capture"($P11, "const")
    goto rxcap757_done
  rxcap757_fail:
    goto rx755_fail
  rxcap757_done:
    rx755_cur."!cursor_pass"(rx755_pos, "term:sym<pir::const>", 'backtrack'=>1)
    .return (rx755_cur)
  rx755_restart:
    repr_get_attr_obj rx755_cstack, rx755_cur, rx755_curclass, "$!cstack"
  rx755_fail:
    unless rx755_bstack, rx755_done
    pop $I19, rx755_bstack
    if_null rx755_cstack, rx755_cstack_done
    unless rx755_cstack, rx755_cstack_done
    dec $I19
    set $P11, rx755_cstack[$I19]
  rx755_cstack_done:
    pop rx755_rep, rx755_bstack
    pop rx755_pos, rx755_bstack
    pop $I19, rx755_bstack
    lt rx755_pos, -1, rx755_done
    lt rx755_pos, 0, rx755_fail
    eq $I19, 0, rx755_fail
    if_null rx755_cstack, rx755_jump
    elements $I18, rx755_bstack
    le $I18, 0, rx755_cut
    dec $I18
    set $I18, rx755_bstack[$I18]
  rx755_cut:
    assign rx755_cstack, $I18
  rx755_jump:
    jump $I19
  rx755_done:
    rx755_cur."!cursor_fail"()
    .return (rx755_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "149_1337966799.879_caps"  :subid("586_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1186
    new $P104, "Hash"
    set $P104["const"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "149_1337966799.879_nfa"  :subid("587_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1186
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 112
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 105
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 114
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 58
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 58
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 99
    push $P110, 7
    new $P111, "ResizablePMCArray"
    push $P111, 2
    push $P111, 111
    push $P111, 8
    new $P112, "ResizablePMCArray"
    push $P112, 2
    push $P112, 110
    push $P112, 9
    new $P113, "ResizablePMCArray"
    push $P113, 2
    push $P113, 115
    push $P113, 10
    new $P114, "ResizablePMCArray"
    push $P114, 2
    push $P114, 116
    push $P114, 11
    new $P115, "ResizablePMCArray"
    push $P115, 2
    push $P115, 58
    push $P115, 12
    new $P116, "ResizablePMCArray"
    push $P116, 2
    push $P116, 58
    push $P116, 13
    new $P117, "ResizablePMCArray"
    push $P117, 1
    push $P117, 0
    push $P117, 14
    new $P118, "ResizablePMCArray"
    push $P118, 4
    push $P118, 8192
    push $P118, 15
    new $P119, "ResizablePMCArray"
    push $P119, 1
    push $P119, 0
    push $P119, 14
    push $P119, 1
    push $P119, 0
    push $P119, 0
    new $P120, "ResizablePMCArray"
    push $P120, $P104
    push $P120, $P105
    push $P120, $P106
    push $P120, $P107
    push $P120, $P108
    push $P120, $P109
    push $P120, $P110
    push $P120, $P111
    push $P120, $P112
    push $P120, $P113
    push $P120, $P114
    push $P120, $P115
    push $P120, $P116
    push $P120, $P117
    push $P120, $P118
    push $P120, $P119
    .return ($P120)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<nqp::op>"  :subid("150_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2141
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1190
    .lex "self", param_2141
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2142
    .lex "$/", $P2143
    .local string rx759_tgt
    .local int rx759_pos
    .local int rx759_off
    .local int rx759_eos
    .local int rx759_rep
    .local pmc rx759_cur
    .local pmc rx759_curclass
    .local pmc rx759_bstack
    .local pmc rx759_cstack
    (rx759_cur, rx759_tgt, rx759_pos, rx759_curclass, rx759_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx759_cur
    length rx759_eos, rx759_tgt
    eq $I19, 1, rx759_restart
    repr_get_attr_int $I11, self, rx759_curclass, "$!from"
    ne $I11, -1, rxscan760_done
    goto rxscan760_scan
  rxscan760_loop:
    inc rx759_pos
    gt rx759_pos, rx759_eos, rx759_fail
    repr_bind_attr_int rx759_cur, rx759_curclass, "$!from", rx759_pos
  rxscan760_scan:
    nqp_rxmark rx759_bstack, rxscan760_loop, rx759_pos, 0
  rxscan760_done:
    add $I11, rx759_pos, 5
    gt $I11, rx759_eos, rx759_fail
    substr $S10, rx759_tgt, rx759_pos, 5
    ne $S10, ucs4:"nqp::", rx759_fail
    add rx759_pos, 5
    nqp_rxmark rx759_bstack, rxcap761_fail, rx759_pos, 0
  # rx rxquantr762 ** 1..-1
    nqp_rxmark rx759_bstack, rxquantr762_done, -1, 0
  rxquantr762_loop:
    ge rx759_pos, rx759_eos, rx759_fail
    is_cclass $I11, .CCLASS_WORD, rx759_tgt, rx759_pos
    unless $I11, rx759_fail
    add rx759_pos, 1
    nqp_rxpeek $I19, rx759_bstack, rxquantr762_done
    inc $I19
    inc $I19
    set rx759_rep, rx759_bstack[$I19]
    nqp_rxcommit rx759_bstack, rxquantr762_done
    inc rx759_rep
    nqp_rxmark rx759_bstack, rxquantr762_done, rx759_pos, rx759_rep
    goto rxquantr762_loop
  rxquantr762_done:
    nqp_rxpeek $I19, rx759_bstack, rxcap761_fail
    inc $I19
    set $I11, rx759_bstack[$I19]
    $P11 = rx759_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx759_pos)
    rx759_cstack = rx759_cur."!cursor_capture"($P11, "op")
    goto rxcap761_done
  rxcap761_fail:
    goto rx759_fail
  rxcap761_done:
  # rx rxquantr763 ** 0..1
    nqp_rxmark rx759_bstack, rxquantr763_done, rx759_pos, 0
  rxquantr763_loop:
    repr_bind_attr_int rx759_cur, rx759_curclass, "$!pos", rx759_pos
    $P11 = rx759_cur."args"()
    repr_get_attr_int $I11, $P11, rx759_curclass, "$!pos"
    lt $I11, 0, rx759_fail
    goto rxsubrule764_pass
  rxsubrule764_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx759_curclass, "$!pos"
    lt $I11, 0, rx759_fail
  rxsubrule764_pass:
    rx759_cstack = rx759_cur."!cursor_capture"($P11, "args")
    set_addr $I11, rxsubrule764_back
    push rx759_bstack, $I11
    push rx759_bstack, 0
    push rx759_bstack, rx759_pos
    elements $I11, rx759_cstack
    push rx759_bstack, $I11
    repr_get_attr_int rx759_pos, $P11, rx759_curclass, "$!pos"
    nqp_rxpeek $I19, rx759_bstack, rxquantr763_done
    inc $I19
    inc $I19
    set rx759_rep, rx759_bstack[$I19]
    nqp_rxcommit rx759_bstack, rxquantr763_done
    inc rx759_rep
  rxquantr763_done:
    rx759_cur."!cursor_pass"(rx759_pos, "term:sym<nqp::op>", 'backtrack'=>1)
    .return (rx759_cur)
  rx759_restart:
    repr_get_attr_obj rx759_cstack, rx759_cur, rx759_curclass, "$!cstack"
  rx759_fail:
    unless rx759_bstack, rx759_done
    pop $I19, rx759_bstack
    if_null rx759_cstack, rx759_cstack_done
    unless rx759_cstack, rx759_cstack_done
    dec $I19
    set $P11, rx759_cstack[$I19]
  rx759_cstack_done:
    pop rx759_rep, rx759_bstack
    pop rx759_pos, rx759_bstack
    pop $I19, rx759_bstack
    lt rx759_pos, -1, rx759_done
    lt rx759_pos, 0, rx759_fail
    eq $I19, 0, rx759_fail
    if_null rx759_cstack, rx759_jump
    elements $I18, rx759_bstack
    le $I18, 0, rx759_cut
    dec $I18
    set $I18, rx759_bstack[$I18]
  rx759_cut:
    assign rx759_cstack, $I18
  rx759_jump:
    jump $I19
  rx759_done:
    rx759_cur."!cursor_fail"()
    .return (rx759_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "150_1337966799.879_caps"  :subid("588_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1190
    new $P104, "Hash"
    set $P104["op"], 0
    set $P104["args"], 2
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "150_1337966799.879_nfa"  :subid("589_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1190
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 110
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 113
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 112
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 58
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 58
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 1
    push $P110, 0
    push $P110, 7
    new $P111, "ResizablePMCArray"
    push $P111, 4
    push $P111, 8192
    push $P111, 8
    new $P112, "ResizablePMCArray"
    push $P112, 1
    push $P112, 0
    push $P112, 7
    push $P112, 1
    push $P112, 0
    push $P112, 9
    push $P112, 8
    push $P112, "args"
    push $P112, 0
    push $P112, 1
    push $P112, 0
    push $P112, 0
    new $P113, "ResizablePMCArray"
    new $P114, "ResizablePMCArray"
    push $P114, $P104
    push $P114, $P105
    push $P114, $P106
    push $P114, $P107
    push $P114, $P108
    push $P114, $P109
    push $P114, $P110
    push $P114, $P111
    push $P114, $P112
    push $P114, $P113
    .return ($P114)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<onlystar>"  :subid("151_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2147
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1194
    .const 'Sub' $P2153 = "592_1337966799.879" 
    capture_lex $P2153
    .lex "self", param_2147
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2148
    .lex "$/", $P2149
    .local string rx765_tgt
    .local int rx765_pos
    .local int rx765_off
    .local int rx765_eos
    .local int rx765_rep
    .local pmc rx765_cur
    .local pmc rx765_curclass
    .local pmc rx765_bstack
    .local pmc rx765_cstack
    (rx765_cur, rx765_tgt, rx765_pos, rx765_curclass, rx765_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx765_cur
    length rx765_eos, rx765_tgt
    eq $I19, 1, rx765_restart
    repr_get_attr_int $I11, self, rx765_curclass, "$!from"
    ne $I11, -1, rxscan766_done
    goto rxscan766_scan
  rxscan766_loop:
    inc rx765_pos
    gt rx765_pos, rx765_eos, rx765_fail
    repr_bind_attr_int rx765_cur, rx765_curclass, "$!from", rx765_pos
  rxscan766_scan:
    nqp_rxmark rx765_bstack, rxscan766_loop, rx765_pos, 0
  rxscan766_done:
    add $I11, rx765_pos, 3
    gt $I11, rx765_eos, rx765_fail
    substr $S10, rx765_tgt, rx765_pos, 3
    ne $S10, ucs4:"{*}", rx765_fail
    add rx765_pos, 3
    repr_bind_attr_int rx765_cur, rx765_curclass, "$!pos", rx765_pos
    $P11 = rx765_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx765_curclass, "$!pos"
    lt $I11, 0, rx765_fail
  alt767_0:
    nqp_rxmark rx765_bstack, alt767_1, rx765_pos, 0
    repr_bind_attr_int rx765_cur, rx765_curclass, "$!pos", rx765_pos
    store_lex unicode:"$\x{a2}", rx765_cur
    find_lex $P104, unicode:"$\x{a2}"
    $P105 = $P104."MATCH"()
    store_lex "$/", $P105
.annotate 'line', 1196
    .const 'Sub' $P2153 = "592_1337966799.879" 
    capture_lex $P2153
    $P106 = $P2153()
.annotate 'line', 1194
    unless $P106, rx765_fail
    goto alt767_end
  alt767_1:
    repr_bind_attr_int rx765_cur, rx765_curclass, "$!pos", rx765_pos
    $P11 = rx765_cur."panic"("{*} may only appear in proto")
    repr_get_attr_int $I11, $P11, rx765_curclass, "$!pos"
    lt $I11, 0, rx765_fail
    repr_get_attr_int rx765_pos, $P11, rx765_curclass, "$!pos"
  alt767_end:
    rx765_cur."!cursor_pass"(rx765_pos, "term:sym<onlystar>", 'backtrack'=>1)
    .return (rx765_cur)
  rx765_restart:
    repr_get_attr_obj rx765_cstack, rx765_cur, rx765_curclass, "$!cstack"
  rx765_fail:
    unless rx765_bstack, rx765_done
    pop $I19, rx765_bstack
    if_null rx765_cstack, rx765_cstack_done
    unless rx765_cstack, rx765_cstack_done
    dec $I19
    set $P11, rx765_cstack[$I19]
  rx765_cstack_done:
    pop rx765_rep, rx765_bstack
    pop rx765_pos, rx765_bstack
    pop $I19, rx765_bstack
    lt rx765_pos, -1, rx765_done
    lt rx765_pos, 0, rx765_fail
    eq $I19, 0, rx765_fail
    if_null rx765_cstack, rx765_jump
    elements $I18, rx765_bstack
    le $I18, 0, rx765_cut
    dec $I18
    set $I18, rx765_bstack[$I18]
  rx765_cut:
    assign rx765_cstack, $I18
  rx765_jump:
    jump $I19
  rx765_done:
    rx765_cur."!cursor_fail"()
    .return (rx765_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "151_1337966799.879_caps"  :subid("590_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1194
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "151_1337966799.879_nfa"  :subid("591_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1194
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 123
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 42
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 125
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "ENDSTMT"
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block2152"  :anon :subid("592_1337966799.879") :outer("151_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1196
    find_dynamic_lex $P108, "$*MULTINESS"
    unless_null $P108, vivify_1365
    get_hll_global $P106, "GLOBAL"
    get_who $P107, $P106
    set $P108, $P107["$MULTINESS"]
    unless_null $P108, vivify_1366
    die "Contextual $*MULTINESS not found"
  vivify_1366:
  vivify_1365:
    set $S100, $P108
    iseq $I100, $S100, "proto"
    .return ($I100)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "args"  :subid("152_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2155
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1199
    .lex "self", param_2155
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2156
    .lex "$/", $P2157
    .local string rx769_tgt
    .local int rx769_pos
    .local int rx769_off
    .local int rx769_eos
    .local int rx769_rep
    .local pmc rx769_cur
    .local pmc rx769_curclass
    .local pmc rx769_bstack
    .local pmc rx769_cstack
    (rx769_cur, rx769_tgt, rx769_pos, rx769_curclass, rx769_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx769_cur
    length rx769_eos, rx769_tgt
    eq $I19, 1, rx769_restart
    repr_get_attr_int $I11, self, rx769_curclass, "$!from"
    ne $I11, -1, rxscan770_done
    goto rxscan770_scan
  rxscan770_loop:
    inc rx769_pos
    gt rx769_pos, rx769_eos, rx769_fail
    repr_bind_attr_int rx769_cur, rx769_curclass, "$!from", rx769_pos
  rxscan770_scan:
    nqp_rxmark rx769_bstack, rxscan770_loop, rx769_pos, 0
  rxscan770_done:
    add $I11, rx769_pos, 1
    gt $I11, rx769_eos, rx769_fail
    substr $S10, rx769_tgt, rx769_pos, 1
    ne $S10, ucs4:"(", rx769_fail
    add rx769_pos, 1
    repr_bind_attr_int rx769_cur, rx769_curclass, "$!pos", rx769_pos
    $P11 = rx769_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx769_curclass, "$!pos"
    lt $I11, 0, rx769_fail
    nqp_rxmark rx769_bstack, rxsubrule771_pass, -1, 0
  rxsubrule771_pass:
    rx769_cstack = rx769_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx769_pos, $P11, rx769_curclass, "$!pos"
    add $I11, rx769_pos, 1
    gt $I11, rx769_eos, rx769_fail
    substr $S10, rx769_tgt, rx769_pos, 1
    ne $S10, ucs4:")", rx769_fail
    add rx769_pos, 1
    rx769_cur."!cursor_pass"(rx769_pos, "args", 'backtrack'=>1)
    .return (rx769_cur)
  rx769_restart:
    repr_get_attr_obj rx769_cstack, rx769_cur, rx769_curclass, "$!cstack"
  rx769_fail:
    unless rx769_bstack, rx769_done
    pop $I19, rx769_bstack
    if_null rx769_cstack, rx769_cstack_done
    unless rx769_cstack, rx769_cstack_done
    dec $I19
    set $P11, rx769_cstack[$I19]
  rx769_cstack_done:
    pop rx769_rep, rx769_bstack
    pop rx769_pos, rx769_bstack
    pop $I19, rx769_bstack
    lt rx769_pos, -1, rx769_done
    lt rx769_pos, 0, rx769_fail
    eq $I19, 0, rx769_fail
    if_null rx769_cstack, rx769_jump
    elements $I18, rx769_bstack
    le $I18, 0, rx769_cut
    dec $I18
    set $I18, rx769_bstack[$I18]
  rx769_cut:
    assign rx769_cstack, $I18
  rx769_jump:
    jump $I19
  rx769_done:
    rx769_cur."!cursor_fail"()
    .return (rx769_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "152_1337966799.879_caps"  :subid("593_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1199
    new $P104, "Hash"
    set $P104["arglist"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "152_1337966799.879_nfa"  :subid("594_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1199
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 40
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "arglist"
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 41
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "arglist"  :subid("153_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2161
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1203
    .lex "self", param_2161
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2162
    .lex "$/", $P2163
    .local string rx772_tgt
    .local int rx772_pos
    .local int rx772_off
    .local int rx772_eos
    .local int rx772_rep
    .local pmc rx772_cur
    .local pmc rx772_curclass
    .local pmc rx772_bstack
    .local pmc rx772_cstack
    (rx772_cur, rx772_tgt, rx772_pos, rx772_curclass, rx772_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx772_cur
    length rx772_eos, rx772_tgt
    eq $I19, 1, rx772_restart
    repr_get_attr_int $I11, self, rx772_curclass, "$!from"
    ne $I11, -1, rxscan773_done
    goto rxscan773_scan
  rxscan773_loop:
    inc rx772_pos
    gt rx772_pos, rx772_eos, rx772_fail
    repr_bind_attr_int rx772_cur, rx772_curclass, "$!from", rx772_pos
  rxscan773_scan:
    nqp_rxmark rx772_bstack, rxscan773_loop, rx772_pos, 0
  rxscan773_done:
    repr_bind_attr_int rx772_cur, rx772_curclass, "$!pos", rx772_pos
    $P11 = rx772_cur."ws"()
    repr_get_attr_int $I11, $P11, rx772_curclass, "$!pos"
    lt $I11, 0, rx772_fail
    repr_get_attr_int rx772_pos, $P11, rx772_curclass, "$!pos"
  alt775_0:
    nqp_rxmark rx772_bstack, alt775_1, rx772_pos, 0
    repr_bind_attr_int rx772_cur, rx772_curclass, "$!pos", rx772_pos
    $P11 = rx772_cur."EXPR"("f=")
    repr_get_attr_int $I11, $P11, rx772_curclass, "$!pos"
    lt $I11, 0, rx772_fail
    nqp_rxmark rx772_bstack, rxsubrule776_pass, -1, 0
  rxsubrule776_pass:
    rx772_cstack = rx772_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx772_pos, $P11, rx772_curclass, "$!pos"
    goto alt775_end
  alt775_1:
  alt775_end:
    rx772_cur."!cursor_pass"(rx772_pos, "arglist", 'backtrack'=>1)
    .return (rx772_cur)
  rx772_restart:
    repr_get_attr_obj rx772_cstack, rx772_cur, rx772_curclass, "$!cstack"
  rx772_fail:
    unless rx772_bstack, rx772_done
    pop $I19, rx772_bstack
    if_null rx772_cstack, rx772_cstack_done
    unless rx772_cstack, rx772_cstack_done
    dec $I19
    set $P11, rx772_cstack[$I19]
  rx772_cstack_done:
    pop rx772_rep, rx772_bstack
    pop rx772_pos, rx772_bstack
    pop $I19, rx772_bstack
    lt rx772_pos, -1, rx772_done
    lt rx772_pos, 0, rx772_fail
    eq $I19, 0, rx772_fail
    if_null rx772_cstack, rx772_jump
    elements $I18, rx772_bstack
    le $I18, 0, rx772_cut
    dec $I18
    set $I18, rx772_bstack[$I18]
  rx772_cut:
    assign rx772_cstack, $I18
  rx772_jump:
    jump $I19
  rx772_done:
    rx772_cur."!cursor_fail"()
    .return (rx772_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "153_1337966799.879_caps"  :subid("595_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1203
    new $P104, "Hash"
    set $P104["EXPR"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "153_1337966799.879_nfa"  :subid("596_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1203
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "ws"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "EXPR"
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<value>"  :subid("154_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2167
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1212
    .lex "self", param_2167
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2168
    .lex "$/", $P2169
    .local string rx777_tgt
    .local int rx777_pos
    .local int rx777_off
    .local int rx777_eos
    .local int rx777_rep
    .local pmc rx777_cur
    .local pmc rx777_curclass
    .local pmc rx777_bstack
    .local pmc rx777_cstack
    (rx777_cur, rx777_tgt, rx777_pos, rx777_curclass, rx777_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx777_cur
    length rx777_eos, rx777_tgt
    eq $I19, 1, rx777_restart
    repr_get_attr_int $I11, self, rx777_curclass, "$!from"
    ne $I11, -1, rxscan778_done
    goto rxscan778_scan
  rxscan778_loop:
    inc rx777_pos
    gt rx777_pos, rx777_eos, rx777_fail
    repr_bind_attr_int rx777_cur, rx777_curclass, "$!from", rx777_pos
  rxscan778_scan:
    nqp_rxmark rx777_bstack, rxscan778_loop, rx777_pos, 0
  rxscan778_done:
    repr_bind_attr_int rx777_cur, rx777_curclass, "$!pos", rx777_pos
    $P11 = rx777_cur."value"()
    repr_get_attr_int $I11, $P11, rx777_curclass, "$!pos"
    lt $I11, 0, rx777_fail
    nqp_rxmark rx777_bstack, rxsubrule779_pass, -1, 0
  rxsubrule779_pass:
    rx777_cstack = rx777_cur."!cursor_capture"($P11, "value")
    repr_get_attr_int rx777_pos, $P11, rx777_curclass, "$!pos"
    rx777_cur."!cursor_pass"(rx777_pos, "term:sym<value>", 'backtrack'=>1)
    .return (rx777_cur)
  rx777_restart:
    repr_get_attr_obj rx777_cstack, rx777_cur, rx777_curclass, "$!cstack"
  rx777_fail:
    unless rx777_bstack, rx777_done
    pop $I19, rx777_bstack
    if_null rx777_cstack, rx777_cstack_done
    unless rx777_cstack, rx777_cstack_done
    dec $I19
    set $P11, rx777_cstack[$I19]
  rx777_cstack_done:
    pop rx777_rep, rx777_bstack
    pop rx777_pos, rx777_bstack
    pop $I19, rx777_bstack
    lt rx777_pos, -1, rx777_done
    lt rx777_pos, 0, rx777_fail
    eq $I19, 0, rx777_fail
    if_null rx777_cstack, rx777_jump
    elements $I18, rx777_bstack
    le $I18, 0, rx777_cut
    dec $I18
    set $I18, rx777_bstack[$I18]
  rx777_cut:
    assign rx777_cstack, $I18
  rx777_jump:
    jump $I19
  rx777_done:
    rx777_cur."!cursor_fail"()
    .return (rx777_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "154_1337966799.879_caps"  :subid("597_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1212
    new $P104, "Hash"
    set $P104["value"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "154_1337966799.879_nfa"  :subid("598_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1212
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "value"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "value"  :subid("155_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2173
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1214
    .lex "self", param_2173
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2174
    .lex "$/", $P2175
    .local string rx780_tgt
    .local int rx780_pos
    .local int rx780_off
    .local int rx780_eos
    .local int rx780_rep
    .local pmc rx780_cur
    .local pmc rx780_curclass
    .local pmc rx780_bstack
    .local pmc rx780_cstack
    (rx780_cur, rx780_tgt, rx780_pos, rx780_curclass, rx780_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx780_cur
    length rx780_eos, rx780_tgt
    eq $I19, 1, rx780_restart
    repr_get_attr_int $I11, self, rx780_curclass, "$!from"
    ne $I11, -1, rxscan781_done
    goto rxscan781_scan
  rxscan781_loop:
    inc rx780_pos
    gt rx780_pos, rx780_eos, rx780_fail
    repr_bind_attr_int rx780_cur, rx780_curclass, "$!from", rx780_pos
  rxscan781_scan:
    nqp_rxmark rx780_bstack, rxscan781_loop, rx780_pos, 0
  rxscan781_done:
  alt782_0:
    nqp_rxmark rx780_bstack, alt782_1, rx780_pos, 0
    repr_bind_attr_int rx780_cur, rx780_curclass, "$!pos", rx780_pos
    $P11 = rx780_cur."quote"()
    repr_get_attr_int $I11, $P11, rx780_curclass, "$!pos"
    lt $I11, 0, rx780_fail
    nqp_rxmark rx780_bstack, rxsubrule783_pass, -1, 0
  rxsubrule783_pass:
    rx780_cstack = rx780_cur."!cursor_capture"($P11, "quote")
    repr_get_attr_int rx780_pos, $P11, rx780_curclass, "$!pos"
    goto alt782_end
  alt782_1:
    repr_bind_attr_int rx780_cur, rx780_curclass, "$!pos", rx780_pos
    $P11 = rx780_cur."number"()
    repr_get_attr_int $I11, $P11, rx780_curclass, "$!pos"
    lt $I11, 0, rx780_fail
    nqp_rxmark rx780_bstack, rxsubrule784_pass, -1, 0
  rxsubrule784_pass:
    rx780_cstack = rx780_cur."!cursor_capture"($P11, "number")
    repr_get_attr_int rx780_pos, $P11, rx780_curclass, "$!pos"
  alt782_end:
    rx780_cur."!cursor_pass"(rx780_pos, "value", 'backtrack'=>1)
    .return (rx780_cur)
  rx780_restart:
    repr_get_attr_obj rx780_cstack, rx780_cur, rx780_curclass, "$!cstack"
  rx780_fail:
    unless rx780_bstack, rx780_done
    pop $I19, rx780_bstack
    if_null rx780_cstack, rx780_cstack_done
    unless rx780_cstack, rx780_cstack_done
    dec $I19
    set $P11, rx780_cstack[$I19]
  rx780_cstack_done:
    pop rx780_rep, rx780_bstack
    pop rx780_pos, rx780_bstack
    pop $I19, rx780_bstack
    lt rx780_pos, -1, rx780_done
    lt rx780_pos, 0, rx780_fail
    eq $I19, 0, rx780_fail
    if_null rx780_cstack, rx780_jump
    elements $I18, rx780_bstack
    le $I18, 0, rx780_cut
    dec $I18
    set $I18, rx780_bstack[$I18]
  rx780_cut:
    assign rx780_cstack, $I18
  rx780_jump:
    jump $I19
  rx780_done:
    rx780_cur."!cursor_fail"()
    .return (rx780_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "155_1337966799.879_caps"  :subid("599_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1214
    new $P104, "Hash"
    set $P104["quote"], 0
    set $P104["number"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "155_1337966799.879_nfa"  :subid("600_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1214
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "quote"
    push $P105, 0
    push $P105, 8
    push $P105, "number"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "number"  :subid("156_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2179
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1219
    .lex "self", param_2179
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2180
    .lex "$/", $P2181
    .local string rx785_tgt
    .local int rx785_pos
    .local int rx785_off
    .local int rx785_eos
    .local int rx785_rep
    .local pmc rx785_cur
    .local pmc rx785_curclass
    .local pmc rx785_bstack
    .local pmc rx785_cstack
    (rx785_cur, rx785_tgt, rx785_pos, rx785_curclass, rx785_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx785_cur
    length rx785_eos, rx785_tgt
    eq $I19, 1, rx785_restart
    repr_get_attr_int $I11, self, rx785_curclass, "$!from"
    ne $I11, -1, rxscan786_done
    goto rxscan786_scan
  rxscan786_loop:
    inc rx785_pos
    gt rx785_pos, rx785_eos, rx785_fail
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!from", rx785_pos
  rxscan786_scan:
    nqp_rxmark rx785_bstack, rxscan786_loop, rx785_pos, 0
  rxscan786_done:
    nqp_rxmark rx785_bstack, rxcap787_fail, rx785_pos, 0
  # rx rxquantr788 ** 0..1
    nqp_rxmark rx785_bstack, rxquantr788_done, rx785_pos, 0
  rxquantr788_loop:
  alt789_0:
    nqp_rxmark rx785_bstack, alt789_1, rx785_pos, 0
    add $I11, rx785_pos, 1
    gt $I11, rx785_eos, rx785_fail
    substr $S10, rx785_tgt, rx785_pos, 1
    ne $S10, ucs4:"-", rx785_fail
    add rx785_pos, 1
    goto alt789_end
  alt789_1:
    ge rx785_pos, rx785_eos, rx785_fail
    substr $S11, rx785_tgt, rx785_pos, 1
    index $I11, ucs4:"+", $S11
    lt $I11, 0, rx785_fail
    inc rx785_pos
  alt789_end:
    nqp_rxpeek $I19, rx785_bstack, rxquantr788_done
    inc $I19
    inc $I19
    set rx785_rep, rx785_bstack[$I19]
    nqp_rxcommit rx785_bstack, rxquantr788_done
    inc rx785_rep
  rxquantr788_done:
    nqp_rxpeek $I19, rx785_bstack, rxcap787_fail
    inc $I19
    set $I11, rx785_bstack[$I19]
    $P11 = rx785_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx785_pos)
    rx785_cstack = rx785_cur."!cursor_capture"($P11, "sign")
    goto rxcap787_done
  rxcap787_fail:
    goto rx785_fail
  rxcap787_done:
  alt790_0:
    nqp_rxmark rx785_bstack, alt790_1, rx785_pos, 0
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."dec_number"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail
    nqp_rxmark rx785_bstack, rxsubrule791_pass, -1, 0
  rxsubrule791_pass:
    rx785_cstack = rx785_cur."!cursor_capture"($P11, "dec_number")
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    goto alt790_end
  alt790_1:
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."integer"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail
    nqp_rxmark rx785_bstack, rxsubrule792_pass, -1, 0
  rxsubrule792_pass:
    rx785_cstack = rx785_cur."!cursor_capture"($P11, "integer")
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
  alt790_end:
    rx785_cur."!cursor_pass"(rx785_pos, "number", 'backtrack'=>1)
    .return (rx785_cur)
  rx785_restart:
    repr_get_attr_obj rx785_cstack, rx785_cur, rx785_curclass, "$!cstack"
  rx785_fail:
    unless rx785_bstack, rx785_done
    pop $I19, rx785_bstack
    if_null rx785_cstack, rx785_cstack_done
    unless rx785_cstack, rx785_cstack_done
    dec $I19
    set $P11, rx785_cstack[$I19]
  rx785_cstack_done:
    pop rx785_rep, rx785_bstack
    pop rx785_pos, rx785_bstack
    pop $I19, rx785_bstack
    lt rx785_pos, -1, rx785_done
    lt rx785_pos, 0, rx785_fail
    eq $I19, 0, rx785_fail
    if_null rx785_cstack, rx785_jump
    elements $I18, rx785_bstack
    le $I18, 0, rx785_cut
    dec $I18
    set $I18, rx785_bstack[$I18]
  rx785_cut:
    assign rx785_cstack, $I18
  rx785_jump:
    jump $I19
  rx785_done:
    rx785_cur."!cursor_fail"()
    .return (rx785_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "156_1337966799.879_caps"  :subid("601_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1219
    new $P104, "Hash"
    set $P104["sign"], 0
    set $P104["dec_number"], 0
    set $P104["integer"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "156_1337966799.879_nfa"  :subid("602_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1219
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 45
    push $P105, 2
    push $P105, 6
    push $P105, "+"
    push $P105, 2
    push $P105, 1
    push $P105, 0
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "dec_number"
    push $P106, 0
    push $P106, 8
    push $P106, "integer"
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote"  :subid("157_1337966799.879")
    .param pmc param_2185
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1224
    .lex "self", param_2185
    $P103 = param_2185."!protoregex"("quote")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym<apos>"  :subid("158_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2187
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1225
    .lex "self", param_2187
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2188
    .lex "$/", $P2189
    .local string rx793_tgt
    .local int rx793_pos
    .local int rx793_off
    .local int rx793_eos
    .local int rx793_rep
    .local pmc rx793_cur
    .local pmc rx793_curclass
    .local pmc rx793_bstack
    .local pmc rx793_cstack
    (rx793_cur, rx793_tgt, rx793_pos, rx793_curclass, rx793_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx793_cur
    length rx793_eos, rx793_tgt
    eq $I19, 1, rx793_restart
    repr_get_attr_int $I11, self, rx793_curclass, "$!from"
    ne $I11, -1, rxscan794_done
    goto rxscan794_scan
  rxscan794_loop:
    inc rx793_pos
    gt rx793_pos, rx793_eos, rx793_fail
    repr_bind_attr_int rx793_cur, rx793_curclass, "$!from", rx793_pos
  rxscan794_scan:
    nqp_rxmark rx793_bstack, rxscan794_loop, rx793_pos, 0
  rxscan794_done:
    ge rx793_pos, rx793_eos, rx793_fail
    substr $S11, rx793_tgt, rx793_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx793_fail
    repr_bind_attr_int rx793_cur, rx793_curclass, "$!pos", rx793_pos
    $P11 = rx793_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx793_curclass, "$!pos"
    lt $I11, 0, rx793_fail
    nqp_rxmark rx793_bstack, rxsubrule795_pass, -1, 0
  rxsubrule795_pass:
    rx793_cstack = rx793_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx793_pos, $P11, rx793_curclass, "$!pos"
    rx793_cur."!cursor_pass"(rx793_pos, "quote:sym<apos>", 'backtrack'=>1)
    .return (rx793_cur)
  rx793_restart:
    repr_get_attr_obj rx793_cstack, rx793_cur, rx793_curclass, "$!cstack"
  rx793_fail:
    unless rx793_bstack, rx793_done
    pop $I19, rx793_bstack
    if_null rx793_cstack, rx793_cstack_done
    unless rx793_cstack, rx793_cstack_done
    dec $I19
    set $P11, rx793_cstack[$I19]
  rx793_cstack_done:
    pop rx793_rep, rx793_bstack
    pop rx793_pos, rx793_bstack
    pop $I19, rx793_bstack
    lt rx793_pos, -1, rx793_done
    lt rx793_pos, 0, rx793_fail
    eq $I19, 0, rx793_fail
    if_null rx793_cstack, rx793_jump
    elements $I18, rx793_bstack
    le $I18, 0, rx793_cut
    dec $I18
    set $I18, rx793_bstack[$I18]
  rx793_cut:
    assign rx793_cstack, $I18
  rx793_jump:
    jump $I19
  rx793_done:
    rx793_cur."!cursor_fail"()
    .return (rx793_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "158_1337966799.879_caps"  :subid("603_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1225
    new $P104, "Hash"
    set $P104["quote_EXPR"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "158_1337966799.879_nfa"  :subid("604_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1225
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 6
    push $P105, "'"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 0
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym<dblq>"  :subid("159_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2193
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1226
    .lex "self", param_2193
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2194
    .lex "$/", $P2195
    .local string rx796_tgt
    .local int rx796_pos
    .local int rx796_off
    .local int rx796_eos
    .local int rx796_rep
    .local pmc rx796_cur
    .local pmc rx796_curclass
    .local pmc rx796_bstack
    .local pmc rx796_cstack
    (rx796_cur, rx796_tgt, rx796_pos, rx796_curclass, rx796_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx796_cur
    length rx796_eos, rx796_tgt
    eq $I19, 1, rx796_restart
    repr_get_attr_int $I11, self, rx796_curclass, "$!from"
    ne $I11, -1, rxscan797_done
    goto rxscan797_scan
  rxscan797_loop:
    inc rx796_pos
    gt rx796_pos, rx796_eos, rx796_fail
    repr_bind_attr_int rx796_cur, rx796_curclass, "$!from", rx796_pos
  rxscan797_scan:
    nqp_rxmark rx796_bstack, rxscan797_loop, rx796_pos, 0
  rxscan797_done:
    ge rx796_pos, rx796_eos, rx796_fail
    substr $S11, rx796_tgt, rx796_pos, 1
    index $I11, ucs4:"\"", $S11
    lt $I11, 0, rx796_fail
    repr_bind_attr_int rx796_cur, rx796_curclass, "$!pos", rx796_pos
    $P11 = rx796_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx796_curclass, "$!pos"
    lt $I11, 0, rx796_fail
    nqp_rxmark rx796_bstack, rxsubrule798_pass, -1, 0
  rxsubrule798_pass:
    rx796_cstack = rx796_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx796_pos, $P11, rx796_curclass, "$!pos"
    rx796_cur."!cursor_pass"(rx796_pos, "quote:sym<dblq>", 'backtrack'=>1)
    .return (rx796_cur)
  rx796_restart:
    repr_get_attr_obj rx796_cstack, rx796_cur, rx796_curclass, "$!cstack"
  rx796_fail:
    unless rx796_bstack, rx796_done
    pop $I19, rx796_bstack
    if_null rx796_cstack, rx796_cstack_done
    unless rx796_cstack, rx796_cstack_done
    dec $I19
    set $P11, rx796_cstack[$I19]
  rx796_cstack_done:
    pop rx796_rep, rx796_bstack
    pop rx796_pos, rx796_bstack
    pop $I19, rx796_bstack
    lt rx796_pos, -1, rx796_done
    lt rx796_pos, 0, rx796_fail
    eq $I19, 0, rx796_fail
    if_null rx796_cstack, rx796_jump
    elements $I18, rx796_bstack
    le $I18, 0, rx796_cut
    dec $I18
    set $I18, rx796_bstack[$I18]
  rx796_cut:
    assign rx796_cstack, $I18
  rx796_jump:
    jump $I19
  rx796_done:
    rx796_cur."!cursor_fail"()
    .return (rx796_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "159_1337966799.879_caps"  :subid("605_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1226
    new $P104, "Hash"
    set $P104["quote_EXPR"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "159_1337966799.879_nfa"  :subid("606_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1226
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 6
    push $P105, "\""
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 0
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym<q>"  :subid("160_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2199
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1227
    .lex "self", param_2199
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2200
    .lex "$/", $P2201
    .local string rx799_tgt
    .local int rx799_pos
    .local int rx799_off
    .local int rx799_eos
    .local int rx799_rep
    .local pmc rx799_cur
    .local pmc rx799_curclass
    .local pmc rx799_bstack
    .local pmc rx799_cstack
    (rx799_cur, rx799_tgt, rx799_pos, rx799_curclass, rx799_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx799_cur
    length rx799_eos, rx799_tgt
    eq $I19, 1, rx799_restart
    repr_get_attr_int $I11, self, rx799_curclass, "$!from"
    ne $I11, -1, rxscan800_done
    goto rxscan800_scan
  rxscan800_loop:
    inc rx799_pos
    gt rx799_pos, rx799_eos, rx799_fail
    repr_bind_attr_int rx799_cur, rx799_curclass, "$!from", rx799_pos
  rxscan800_scan:
    nqp_rxmark rx799_bstack, rxscan800_loop, rx799_pos, 0
  rxscan800_done:
    nqp_rxmark rx799_bstack, rxcap801_fail, rx799_pos, 0
    add $I11, rx799_pos, 1
    gt $I11, rx799_eos, rx799_fail
    substr $S10, rx799_tgt, rx799_pos, 1
    ne $S10, ucs4:"q", rx799_fail
    add rx799_pos, 1
    nqp_rxpeek $I19, rx799_bstack, rxcap801_fail
    inc $I19
    set $I11, rx799_bstack[$I19]
    $P11 = rx799_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx799_pos)
    rx799_cstack = rx799_cur."!cursor_capture"($P11, "sym")
    goto rxcap801_done
  rxcap801_fail:
    goto rx799_fail
  rxcap801_done:
    le rx799_pos, 0, rx799_fail
    is_cclass $I11, .CCLASS_WORD, rx799_tgt, rx799_pos
    if $I11, rx799_fail
    sub $I11, rx799_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx799_tgt, $I11
    unless $I11, rx799_fail
    ge rx799_pos, rx799_eos, rx799_fail
    substr $S11, rx799_tgt, rx799_pos, 1
    index $I11, ucs4:"(", $S11
    ge $I11, 0, rx799_fail
    repr_bind_attr_int rx799_cur, rx799_curclass, "$!pos", rx799_pos
    $P11 = rx799_cur."ws"()
    repr_get_attr_int $I11, $P11, rx799_curclass, "$!pos"
    lt $I11, 0, rx799_fail
    repr_get_attr_int rx799_pos, $P11, rx799_curclass, "$!pos"
    repr_bind_attr_int rx799_cur, rx799_curclass, "$!pos", rx799_pos
    $P11 = rx799_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx799_curclass, "$!pos"
    lt $I11, 0, rx799_fail
    nqp_rxmark rx799_bstack, rxsubrule804_pass, -1, 0
  rxsubrule804_pass:
    rx799_cstack = rx799_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx799_pos, $P11, rx799_curclass, "$!pos"
    rx799_cur."!cursor_pass"(rx799_pos, "quote:sym<q>", 'backtrack'=>1)
    .return (rx799_cur)
  rx799_restart:
    repr_get_attr_obj rx799_cstack, rx799_cur, rx799_curclass, "$!cstack"
  rx799_fail:
    unless rx799_bstack, rx799_done
    pop $I19, rx799_bstack
    if_null rx799_cstack, rx799_cstack_done
    unless rx799_cstack, rx799_cstack_done
    dec $I19
    set $P11, rx799_cstack[$I19]
  rx799_cstack_done:
    pop rx799_rep, rx799_bstack
    pop rx799_pos, rx799_bstack
    pop $I19, rx799_bstack
    lt rx799_pos, -1, rx799_done
    lt rx799_pos, 0, rx799_fail
    eq $I19, 0, rx799_fail
    if_null rx799_cstack, rx799_jump
    elements $I18, rx799_bstack
    le $I18, 0, rx799_cut
    dec $I18
    set $I18, rx799_bstack[$I18]
  rx799_cut:
    assign rx799_cstack, $I18
  rx799_jump:
    jump $I19
  rx799_done:
    rx799_cur."!cursor_fail"()
    .return (rx799_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "160_1337966799.879_caps"  :subid("607_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1227
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["quote_EXPR"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "160_1337966799.879_nfa"  :subid("608_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1227
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 113
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 1
    push $P106, 0
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 7
    push $P107, "("
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 0
    push $P108, 0
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym<qq>"  :subid("161_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2205
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1228
    .lex "self", param_2205
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2206
    .lex "$/", $P2207
    .local string rx805_tgt
    .local int rx805_pos
    .local int rx805_off
    .local int rx805_eos
    .local int rx805_rep
    .local pmc rx805_cur
    .local pmc rx805_curclass
    .local pmc rx805_bstack
    .local pmc rx805_cstack
    (rx805_cur, rx805_tgt, rx805_pos, rx805_curclass, rx805_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx805_cur
    length rx805_eos, rx805_tgt
    eq $I19, 1, rx805_restart
    repr_get_attr_int $I11, self, rx805_curclass, "$!from"
    ne $I11, -1, rxscan806_done
    goto rxscan806_scan
  rxscan806_loop:
    inc rx805_pos
    gt rx805_pos, rx805_eos, rx805_fail
    repr_bind_attr_int rx805_cur, rx805_curclass, "$!from", rx805_pos
  rxscan806_scan:
    nqp_rxmark rx805_bstack, rxscan806_loop, rx805_pos, 0
  rxscan806_done:
    nqp_rxmark rx805_bstack, rxcap807_fail, rx805_pos, 0
    add $I11, rx805_pos, 2
    gt $I11, rx805_eos, rx805_fail
    substr $S10, rx805_tgt, rx805_pos, 2
    ne $S10, ucs4:"qq", rx805_fail
    add rx805_pos, 2
    nqp_rxpeek $I19, rx805_bstack, rxcap807_fail
    inc $I19
    set $I11, rx805_bstack[$I19]
    $P11 = rx805_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx805_pos)
    rx805_cstack = rx805_cur."!cursor_capture"($P11, "sym")
    goto rxcap807_done
  rxcap807_fail:
    goto rx805_fail
  rxcap807_done:
    le rx805_pos, 0, rx805_fail
    is_cclass $I11, .CCLASS_WORD, rx805_tgt, rx805_pos
    if $I11, rx805_fail
    sub $I11, rx805_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx805_tgt, $I11
    unless $I11, rx805_fail
    ge rx805_pos, rx805_eos, rx805_fail
    substr $S11, rx805_tgt, rx805_pos, 1
    index $I11, ucs4:"(", $S11
    ge $I11, 0, rx805_fail
    repr_bind_attr_int rx805_cur, rx805_curclass, "$!pos", rx805_pos
    $P11 = rx805_cur."ws"()
    repr_get_attr_int $I11, $P11, rx805_curclass, "$!pos"
    lt $I11, 0, rx805_fail
    repr_get_attr_int rx805_pos, $P11, rx805_curclass, "$!pos"
    repr_bind_attr_int rx805_cur, rx805_curclass, "$!pos", rx805_pos
    $P11 = rx805_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx805_curclass, "$!pos"
    lt $I11, 0, rx805_fail
    nqp_rxmark rx805_bstack, rxsubrule810_pass, -1, 0
  rxsubrule810_pass:
    rx805_cstack = rx805_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx805_pos, $P11, rx805_curclass, "$!pos"
    rx805_cur."!cursor_pass"(rx805_pos, "quote:sym<qq>", 'backtrack'=>1)
    .return (rx805_cur)
  rx805_restart:
    repr_get_attr_obj rx805_cstack, rx805_cur, rx805_curclass, "$!cstack"
  rx805_fail:
    unless rx805_bstack, rx805_done
    pop $I19, rx805_bstack
    if_null rx805_cstack, rx805_cstack_done
    unless rx805_cstack, rx805_cstack_done
    dec $I19
    set $P11, rx805_cstack[$I19]
  rx805_cstack_done:
    pop rx805_rep, rx805_bstack
    pop rx805_pos, rx805_bstack
    pop $I19, rx805_bstack
    lt rx805_pos, -1, rx805_done
    lt rx805_pos, 0, rx805_fail
    eq $I19, 0, rx805_fail
    if_null rx805_cstack, rx805_jump
    elements $I18, rx805_bstack
    le $I18, 0, rx805_cut
    dec $I18
    set $I18, rx805_bstack[$I18]
  rx805_cut:
    assign rx805_cstack, $I18
  rx805_jump:
    jump $I19
  rx805_done:
    rx805_cur."!cursor_fail"()
    .return (rx805_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "161_1337966799.879_caps"  :subid("609_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1228
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["quote_EXPR"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "161_1337966799.879_nfa"  :subid("610_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1228
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 113
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 113
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 1
    push $P107, 0
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 7
    push $P108, "("
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 0
    push $P109, 0
    push $P109, 0
    new $P110, "ResizablePMCArray"
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym<Q>"  :subid("162_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2211
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1229
    .lex "self", param_2211
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2212
    .lex "$/", $P2213
    .local string rx811_tgt
    .local int rx811_pos
    .local int rx811_off
    .local int rx811_eos
    .local int rx811_rep
    .local pmc rx811_cur
    .local pmc rx811_curclass
    .local pmc rx811_bstack
    .local pmc rx811_cstack
    (rx811_cur, rx811_tgt, rx811_pos, rx811_curclass, rx811_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx811_cur
    length rx811_eos, rx811_tgt
    eq $I19, 1, rx811_restart
    repr_get_attr_int $I11, self, rx811_curclass, "$!from"
    ne $I11, -1, rxscan812_done
    goto rxscan812_scan
  rxscan812_loop:
    inc rx811_pos
    gt rx811_pos, rx811_eos, rx811_fail
    repr_bind_attr_int rx811_cur, rx811_curclass, "$!from", rx811_pos
  rxscan812_scan:
    nqp_rxmark rx811_bstack, rxscan812_loop, rx811_pos, 0
  rxscan812_done:
    nqp_rxmark rx811_bstack, rxcap813_fail, rx811_pos, 0
    add $I11, rx811_pos, 1
    gt $I11, rx811_eos, rx811_fail
    substr $S10, rx811_tgt, rx811_pos, 1
    ne $S10, ucs4:"Q", rx811_fail
    add rx811_pos, 1
    nqp_rxpeek $I19, rx811_bstack, rxcap813_fail
    inc $I19
    set $I11, rx811_bstack[$I19]
    $P11 = rx811_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx811_pos)
    rx811_cstack = rx811_cur."!cursor_capture"($P11, "sym")
    goto rxcap813_done
  rxcap813_fail:
    goto rx811_fail
  rxcap813_done:
    le rx811_pos, 0, rx811_fail
    is_cclass $I11, .CCLASS_WORD, rx811_tgt, rx811_pos
    if $I11, rx811_fail
    sub $I11, rx811_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx811_tgt, $I11
    unless $I11, rx811_fail
    ge rx811_pos, rx811_eos, rx811_fail
    substr $S11, rx811_tgt, rx811_pos, 1
    index $I11, ucs4:"(", $S11
    ge $I11, 0, rx811_fail
    repr_bind_attr_int rx811_cur, rx811_curclass, "$!pos", rx811_pos
    $P11 = rx811_cur."ws"()
    repr_get_attr_int $I11, $P11, rx811_curclass, "$!pos"
    lt $I11, 0, rx811_fail
    repr_get_attr_int rx811_pos, $P11, rx811_curclass, "$!pos"
    repr_bind_attr_int rx811_cur, rx811_curclass, "$!pos", rx811_pos
    $P11 = rx811_cur."quote_EXPR"()
    repr_get_attr_int $I11, $P11, rx811_curclass, "$!pos"
    lt $I11, 0, rx811_fail
    nqp_rxmark rx811_bstack, rxsubrule816_pass, -1, 0
  rxsubrule816_pass:
    rx811_cstack = rx811_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx811_pos, $P11, rx811_curclass, "$!pos"
    rx811_cur."!cursor_pass"(rx811_pos, "quote:sym<Q>", 'backtrack'=>1)
    .return (rx811_cur)
  rx811_restart:
    repr_get_attr_obj rx811_cstack, rx811_cur, rx811_curclass, "$!cstack"
  rx811_fail:
    unless rx811_bstack, rx811_done
    pop $I19, rx811_bstack
    if_null rx811_cstack, rx811_cstack_done
    unless rx811_cstack, rx811_cstack_done
    dec $I19
    set $P11, rx811_cstack[$I19]
  rx811_cstack_done:
    pop rx811_rep, rx811_bstack
    pop rx811_pos, rx811_bstack
    pop $I19, rx811_bstack
    lt rx811_pos, -1, rx811_done
    lt rx811_pos, 0, rx811_fail
    eq $I19, 0, rx811_fail
    if_null rx811_cstack, rx811_jump
    elements $I18, rx811_bstack
    le $I18, 0, rx811_cut
    dec $I18
    set $I18, rx811_bstack[$I18]
  rx811_cut:
    assign rx811_cstack, $I18
  rx811_jump:
    jump $I19
  rx811_done:
    rx811_cur."!cursor_fail"()
    .return (rx811_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "162_1337966799.879_caps"  :subid("611_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1229
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["quote_EXPR"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "162_1337966799.879_nfa"  :subid("612_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1229
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 81
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 1
    push $P106, 0
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 7
    push $P107, "("
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 0
    push $P108, 0
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym<Q:PIR>"  :subid("163_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2217
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1230
    .lex "self", param_2217
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2218
    .lex "$/", $P2219
    .local string rx817_tgt
    .local int rx817_pos
    .local int rx817_off
    .local int rx817_eos
    .local int rx817_rep
    .local pmc rx817_cur
    .local pmc rx817_curclass
    .local pmc rx817_bstack
    .local pmc rx817_cstack
    (rx817_cur, rx817_tgt, rx817_pos, rx817_curclass, rx817_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx817_cur
    length rx817_eos, rx817_tgt
    eq $I19, 1, rx817_restart
    repr_get_attr_int $I11, self, rx817_curclass, "$!from"
    ne $I11, -1, rxscan818_done
    goto rxscan818_scan
  rxscan818_loop:
    inc rx817_pos
    gt rx817_pos, rx817_eos, rx817_fail
    repr_bind_attr_int rx817_cur, rx817_curclass, "$!from", rx817_pos
  rxscan818_scan:
    nqp_rxmark rx817_bstack, rxscan818_loop, rx817_pos, 0
  rxscan818_done:
    nqp_rxmark rx817_bstack, rxcap819_fail, rx817_pos, 0
    add $I11, rx817_pos, 5
    gt $I11, rx817_eos, rx817_fail
    substr $S10, rx817_tgt, rx817_pos, 5
    ne $S10, ucs4:"Q:PIR", rx817_fail
    add rx817_pos, 5
    nqp_rxpeek $I19, rx817_bstack, rxcap819_fail
    inc $I19
    set $I11, rx817_bstack[$I19]
    $P11 = rx817_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx817_pos)
    rx817_cstack = rx817_cur."!cursor_capture"($P11, "sym")
    goto rxcap819_done
  rxcap819_fail:
    goto rx817_fail
  rxcap819_done:
    repr_bind_attr_int rx817_cur, rx817_curclass, "$!pos", rx817_pos
    $P11 = rx817_cur."ws"()
    repr_get_attr_int $I11, $P11, rx817_curclass, "$!pos"
    lt $I11, 0, rx817_fail
    repr_get_attr_int rx817_pos, $P11, rx817_curclass, "$!pos"
    repr_bind_attr_int rx817_cur, rx817_curclass, "$!pos", rx817_pos
    $P11 = rx817_cur."quote_EXPR"()
    repr_get_attr_int $I11, $P11, rx817_curclass, "$!pos"
    lt $I11, 0, rx817_fail
    nqp_rxmark rx817_bstack, rxsubrule821_pass, -1, 0
  rxsubrule821_pass:
    rx817_cstack = rx817_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx817_pos, $P11, rx817_curclass, "$!pos"
    rx817_cur."!cursor_pass"(rx817_pos, "quote:sym<Q:PIR>", 'backtrack'=>1)
    .return (rx817_cur)
  rx817_restart:
    repr_get_attr_obj rx817_cstack, rx817_cur, rx817_curclass, "$!cstack"
  rx817_fail:
    unless rx817_bstack, rx817_done
    pop $I19, rx817_bstack
    if_null rx817_cstack, rx817_cstack_done
    unless rx817_cstack, rx817_cstack_done
    dec $I19
    set $P11, rx817_cstack[$I19]
  rx817_cstack_done:
    pop rx817_rep, rx817_bstack
    pop rx817_pos, rx817_bstack
    pop $I19, rx817_bstack
    lt rx817_pos, -1, rx817_done
    lt rx817_pos, 0, rx817_fail
    eq $I19, 0, rx817_fail
    if_null rx817_cstack, rx817_jump
    elements $I18, rx817_bstack
    le $I18, 0, rx817_cut
    dec $I18
    set $I18, rx817_bstack[$I18]
  rx817_cut:
    assign rx817_cstack, $I18
  rx817_jump:
    jump $I19
  rx817_done:
    rx817_cur."!cursor_fail"()
    .return (rx817_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "163_1337966799.879_caps"  :subid("613_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1230
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["quote_EXPR"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "163_1337966799.879_nfa"  :subid("614_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1230
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 81
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 58
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 80
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 73
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 82
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 8
    push $P110, "ws"
    push $P110, 7
    new $P111, "ResizablePMCArray"
    push $P111, 8
    push $P111, "quote_EXPR"
    push $P111, 0
    new $P112, "ResizablePMCArray"
    push $P112, $P104
    push $P112, $P105
    push $P112, $P106
    push $P112, $P107
    push $P112, $P108
    push $P112, $P109
    push $P112, $P110
    push $P112, $P111
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym</ />"  :subid("164_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2223
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1231
    .lex "self", param_2223
.annotate 'line', 1234
    $P2225 = root_new ['parrot';'Hash']
    set $P2224, $P2225
    .lex "%*RX", $P2224
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2226
    .lex "$/", $P2227
.annotate 'line', 1231
    .local string rx822_tgt
    .local int rx822_pos
    .local int rx822_off
    .local int rx822_eos
    .local int rx822_rep
    .local pmc rx822_cur
    .local pmc rx822_curclass
    .local pmc rx822_bstack
    .local pmc rx822_cstack
    (rx822_cur, rx822_tgt, rx822_pos, rx822_curclass, rx822_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx822_cur
    length rx822_eos, rx822_tgt
    eq $I19, 1, rx822_restart
    repr_get_attr_int $I11, self, rx822_curclass, "$!from"
    ne $I11, -1, rxscan823_done
    goto rxscan823_scan
  rxscan823_loop:
    inc rx822_pos
    gt rx822_pos, rx822_eos, rx822_fail
    repr_bind_attr_int rx822_cur, rx822_curclass, "$!from", rx822_pos
  rxscan823_scan:
    nqp_rxmark rx822_bstack, rxscan823_loop, rx822_pos, 0
  rxscan823_done:
    add $I11, rx822_pos, 1
    gt $I11, rx822_eos, rx822_fail
    substr $S10, rx822_tgt, rx822_pos, 1
    ne $S10, ucs4:"/", rx822_fail
    add rx822_pos, 1
    repr_bind_attr_int rx822_cur, rx822_curclass, "$!pos", rx822_pos
    $P11 = rx822_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx822_curclass, "$!pos"
    lt $I11, 0, rx822_fail
    repr_get_attr_int rx822_pos, $P11, rx822_curclass, "$!pos"
    repr_bind_attr_int rx822_cur, rx822_curclass, "$!pos", rx822_pos
    store_lex unicode:"$\x{a2}", rx822_cur
    set $P106, $P2224
    unless_null $P106, vivify_1367
    get_hll_global $P104, "GLOBAL"
    get_who $P105, $P104
    set $P106, $P105["%RX"]
    unless_null $P106, vivify_1368
    die "Contextual %*RX not found"
  vivify_1368:
  vivify_1367:
    repr_bind_attr_int rx822_cur, rx822_curclass, "$!pos", rx822_pos
    $P11 = rx822_cur."LANG"("Regex", "nibbler")
    repr_get_attr_int $I11, $P11, rx822_curclass, "$!pos"
    lt $I11, 0, rx822_fail
    nqp_rxmark rx822_bstack, rxsubrule825_pass, -1, 0
  rxsubrule825_pass:
    rx822_cstack = rx822_cur."!cursor_capture"($P11, "p6regex")
    repr_get_attr_int rx822_pos, $P11, rx822_curclass, "$!pos"
    add $I11, rx822_pos, 1
    gt $I11, rx822_eos, rx822_fail
    substr $S10, rx822_tgt, rx822_pos, 1
    ne $S10, ucs4:"/", rx822_fail
    add rx822_pos, 1
    rx822_cur."!cursor_pass"(rx822_pos, "quote:sym</ />", 'backtrack'=>1)
    .return (rx822_cur)
  rx822_restart:
    repr_get_attr_obj rx822_cstack, rx822_cur, rx822_curclass, "$!cstack"
  rx822_fail:
    unless rx822_bstack, rx822_done
    pop $I19, rx822_bstack
    if_null rx822_cstack, rx822_cstack_done
    unless rx822_cstack, rx822_cstack_done
    dec $I19
    set $P11, rx822_cstack[$I19]
  rx822_cstack_done:
    pop rx822_rep, rx822_bstack
    pop rx822_pos, rx822_bstack
    pop $I19, rx822_bstack
    lt rx822_pos, -1, rx822_done
    lt rx822_pos, 0, rx822_fail
    eq $I19, 0, rx822_fail
    if_null rx822_cstack, rx822_jump
    elements $I18, rx822_bstack
    le $I18, 0, rx822_cut
    dec $I18
    set $I18, rx822_bstack[$I18]
  rx822_cut:
    assign rx822_cstack, $I18
  rx822_jump:
    jump $I19
  rx822_done:
    rx822_cur."!cursor_fail"()
    .return (rx822_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "164_1337966799.879_caps"  :subid("615_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1231
    new $P104, "Hash"
    set $P104["p6regex"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "164_1337966799.879_nfa"  :subid("616_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1231
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 47
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "newpad"
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 1
    push $P107, 0
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "LANG"
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 47
    push $P109, 0
    new $P110, "ResizablePMCArray"
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote_escape:sym<$>"  :subid("165_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2231
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1239
    .lex "self", param_2231
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2232
    .lex "$/", $P2233
    .local string rx826_tgt
    .local int rx826_pos
    .local int rx826_off
    .local int rx826_eos
    .local int rx826_rep
    .local pmc rx826_cur
    .local pmc rx826_curclass
    .local pmc rx826_bstack
    .local pmc rx826_cstack
    (rx826_cur, rx826_tgt, rx826_pos, rx826_curclass, rx826_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx826_cur
    length rx826_eos, rx826_tgt
    eq $I19, 1, rx826_restart
    repr_get_attr_int $I11, self, rx826_curclass, "$!from"
    ne $I11, -1, rxscan827_done
    goto rxscan827_scan
  rxscan827_loop:
    inc rx826_pos
    gt rx826_pos, rx826_eos, rx826_fail
    repr_bind_attr_int rx826_cur, rx826_curclass, "$!from", rx826_pos
  rxscan827_scan:
    nqp_rxmark rx826_bstack, rxscan827_loop, rx826_pos, 0
  rxscan827_done:
    ge rx826_pos, rx826_eos, rx826_fail
    substr $S11, rx826_tgt, rx826_pos, 1
    index $I11, ucs4:"$", $S11
    lt $I11, 0, rx826_fail
    repr_bind_attr_int rx826_cur, rx826_curclass, "$!pos", rx826_pos
    $P11 = rx826_cur."quotemod_check"("s")
    repr_get_attr_int $I11, $P11, rx826_curclass, "$!pos"
    lt $I11, 0, rx826_fail
    repr_bind_attr_int rx826_cur, rx826_curclass, "$!pos", rx826_pos
    $P11 = rx826_cur."variable"()
    repr_get_attr_int $I11, $P11, rx826_curclass, "$!pos"
    lt $I11, 0, rx826_fail
    nqp_rxmark rx826_bstack, rxsubrule828_pass, -1, 0
  rxsubrule828_pass:
    rx826_cstack = rx826_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx826_pos, $P11, rx826_curclass, "$!pos"
    rx826_cur."!cursor_pass"(rx826_pos, "quote_escape:sym<$>", 'backtrack'=>1)
    .return (rx826_cur)
  rx826_restart:
    repr_get_attr_obj rx826_cstack, rx826_cur, rx826_curclass, "$!cstack"
  rx826_fail:
    unless rx826_bstack, rx826_done
    pop $I19, rx826_bstack
    if_null rx826_cstack, rx826_cstack_done
    unless rx826_cstack, rx826_cstack_done
    dec $I19
    set $P11, rx826_cstack[$I19]
  rx826_cstack_done:
    pop rx826_rep, rx826_bstack
    pop rx826_pos, rx826_bstack
    pop $I19, rx826_bstack
    lt rx826_pos, -1, rx826_done
    lt rx826_pos, 0, rx826_fail
    eq $I19, 0, rx826_fail
    if_null rx826_cstack, rx826_jump
    elements $I18, rx826_bstack
    le $I18, 0, rx826_cut
    dec $I18
    set $I18, rx826_bstack[$I18]
  rx826_cut:
    assign rx826_cstack, $I18
  rx826_jump:
    jump $I19
  rx826_done:
    rx826_cur."!cursor_fail"()
    .return (rx826_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "165_1337966799.879_caps"  :subid("617_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1239
    new $P104, "Hash"
    set $P104["variable"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "165_1337966799.879_nfa"  :subid("618_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1239
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 6
    push $P105, "$"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 0
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote_escape:sym<{ }>"  :subid("166_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2237
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1240
    .lex "self", param_2237
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2238
    .lex "$/", $P2239
    .local string rx829_tgt
    .local int rx829_pos
    .local int rx829_off
    .local int rx829_eos
    .local int rx829_rep
    .local pmc rx829_cur
    .local pmc rx829_curclass
    .local pmc rx829_bstack
    .local pmc rx829_cstack
    (rx829_cur, rx829_tgt, rx829_pos, rx829_curclass, rx829_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx829_cur
    length rx829_eos, rx829_tgt
    eq $I19, 1, rx829_restart
    repr_get_attr_int $I11, self, rx829_curclass, "$!from"
    ne $I11, -1, rxscan830_done
    goto rxscan830_scan
  rxscan830_loop:
    inc rx829_pos
    gt rx829_pos, rx829_eos, rx829_fail
    repr_bind_attr_int rx829_cur, rx829_curclass, "$!from", rx829_pos
  rxscan830_scan:
    nqp_rxmark rx829_bstack, rxscan830_loop, rx829_pos, 0
  rxscan830_done:
    ge rx829_pos, rx829_eos, rx829_fail
    substr $S11, rx829_tgt, rx829_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx829_fail
    repr_bind_attr_int rx829_cur, rx829_curclass, "$!pos", rx829_pos
    $P11 = rx829_cur."quotemod_check"("c")
    repr_get_attr_int $I11, $P11, rx829_curclass, "$!pos"
    lt $I11, 0, rx829_fail
    repr_bind_attr_int rx829_cur, rx829_curclass, "$!pos", rx829_pos
    $P11 = rx829_cur."block"()
    repr_get_attr_int $I11, $P11, rx829_curclass, "$!pos"
    lt $I11, 0, rx829_fail
    nqp_rxmark rx829_bstack, rxsubrule831_pass, -1, 0
  rxsubrule831_pass:
    rx829_cstack = rx829_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx829_pos, $P11, rx829_curclass, "$!pos"
    rx829_cur."!cursor_pass"(rx829_pos, "quote_escape:sym<{ }>", 'backtrack'=>1)
    .return (rx829_cur)
  rx829_restart:
    repr_get_attr_obj rx829_cstack, rx829_cur, rx829_curclass, "$!cstack"
  rx829_fail:
    unless rx829_bstack, rx829_done
    pop $I19, rx829_bstack
    if_null rx829_cstack, rx829_cstack_done
    unless rx829_cstack, rx829_cstack_done
    dec $I19
    set $P11, rx829_cstack[$I19]
  rx829_cstack_done:
    pop rx829_rep, rx829_bstack
    pop rx829_pos, rx829_bstack
    pop $I19, rx829_bstack
    lt rx829_pos, -1, rx829_done
    lt rx829_pos, 0, rx829_fail
    eq $I19, 0, rx829_fail
    if_null rx829_cstack, rx829_jump
    elements $I18, rx829_bstack
    le $I18, 0, rx829_cut
    dec $I18
    set $I18, rx829_bstack[$I18]
  rx829_cut:
    assign rx829_cstack, $I18
  rx829_jump:
    jump $I19
  rx829_done:
    rx829_cur."!cursor_fail"()
    .return (rx829_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "166_1337966799.879_caps"  :subid("619_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1240
    new $P104, "Hash"
    set $P104["block"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "166_1337966799.879_nfa"  :subid("620_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1240
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 6
    push $P105, "{"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 0
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote_escape:sym<esc>"  :subid("167_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2243
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1241
    .lex "self", param_2243
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2244
    .lex "$/", $P2245
    .local string rx832_tgt
    .local int rx832_pos
    .local int rx832_off
    .local int rx832_eos
    .local int rx832_rep
    .local pmc rx832_cur
    .local pmc rx832_curclass
    .local pmc rx832_bstack
    .local pmc rx832_cstack
    (rx832_cur, rx832_tgt, rx832_pos, rx832_curclass, rx832_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx832_cur
    length rx832_eos, rx832_tgt
    eq $I19, 1, rx832_restart
    repr_get_attr_int $I11, self, rx832_curclass, "$!from"
    ne $I11, -1, rxscan833_done
    goto rxscan833_scan
  rxscan833_loop:
    inc rx832_pos
    gt rx832_pos, rx832_eos, rx832_fail
    repr_bind_attr_int rx832_cur, rx832_curclass, "$!from", rx832_pos
  rxscan833_scan:
    nqp_rxmark rx832_bstack, rxscan833_loop, rx832_pos, 0
  rxscan833_done:
    add $I11, rx832_pos, 2
    gt $I11, rx832_eos, rx832_fail
    substr $S10, rx832_tgt, rx832_pos, 2
    ne $S10, ucs4:"\\e", rx832_fail
    add rx832_pos, 2
    repr_bind_attr_int rx832_cur, rx832_curclass, "$!pos", rx832_pos
    $P11 = rx832_cur."quotemod_check"("b")
    repr_get_attr_int $I11, $P11, rx832_curclass, "$!pos"
    lt $I11, 0, rx832_fail
    rx832_cur."!cursor_pass"(rx832_pos, "quote_escape:sym<esc>", 'backtrack'=>1)
    .return (rx832_cur)
  rx832_restart:
    repr_get_attr_obj rx832_cstack, rx832_cur, rx832_curclass, "$!cstack"
  rx832_fail:
    unless rx832_bstack, rx832_done
    pop $I19, rx832_bstack
    if_null rx832_cstack, rx832_cstack_done
    unless rx832_cstack, rx832_cstack_done
    dec $I19
    set $P11, rx832_cstack[$I19]
  rx832_cstack_done:
    pop rx832_rep, rx832_bstack
    pop rx832_pos, rx832_bstack
    pop $I19, rx832_bstack
    lt rx832_pos, -1, rx832_done
    lt rx832_pos, 0, rx832_fail
    eq $I19, 0, rx832_fail
    if_null rx832_cstack, rx832_jump
    elements $I18, rx832_bstack
    le $I18, 0, rx832_cut
    dec $I18
    set $I18, rx832_bstack[$I18]
  rx832_cut:
    assign rx832_cstack, $I18
  rx832_jump:
    jump $I19
  rx832_done:
    rx832_cur."!cursor_fail"()
    .return (rx832_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "167_1337966799.879_caps"  :subid("621_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1241
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "167_1337966799.879_nfa"  :subid("622_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1241
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 92
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 101
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "quotemod_check"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "circumfix:sym<( )>"  :subid("168_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2249
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1243
    .lex "self", param_2249
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2250
    .lex "$/", $P2251
    .local string rx834_tgt
    .local int rx834_pos
    .local int rx834_off
    .local int rx834_eos
    .local int rx834_rep
    .local pmc rx834_cur
    .local pmc rx834_curclass
    .local pmc rx834_bstack
    .local pmc rx834_cstack
    (rx834_cur, rx834_tgt, rx834_pos, rx834_curclass, rx834_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx834_cur
    length rx834_eos, rx834_tgt
    eq $I19, 1, rx834_restart
    repr_get_attr_int $I11, self, rx834_curclass, "$!from"
    ne $I11, -1, rxscan835_done
    goto rxscan835_scan
  rxscan835_loop:
    inc rx834_pos
    gt rx834_pos, rx834_eos, rx834_fail
    repr_bind_attr_int rx834_cur, rx834_curclass, "$!from", rx834_pos
  rxscan835_scan:
    nqp_rxmark rx834_bstack, rxscan835_loop, rx834_pos, 0
  rxscan835_done:
    add $I11, rx834_pos, 1
    gt $I11, rx834_eos, rx834_fail
    substr $S10, rx834_tgt, rx834_pos, 1
    ne $S10, ucs4:"(", rx834_fail
    add rx834_pos, 1
    repr_bind_attr_int rx834_cur, rx834_curclass, "$!pos", rx834_pos
    $P11 = rx834_cur."ws"()
    repr_get_attr_int $I11, $P11, rx834_curclass, "$!pos"
    lt $I11, 0, rx834_fail
    repr_get_attr_int rx834_pos, $P11, rx834_curclass, "$!pos"
  # rx rxquantr837 ** 0..1
    nqp_rxmark rx834_bstack, rxquantr837_done, rx834_pos, 0
  rxquantr837_loop:
    repr_bind_attr_int rx834_cur, rx834_curclass, "$!pos", rx834_pos
    $P11 = rx834_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx834_curclass, "$!pos"
    lt $I11, 0, rx834_fail
    goto rxsubrule838_pass
  rxsubrule838_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx834_curclass, "$!pos"
    lt $I11, 0, rx834_fail
  rxsubrule838_pass:
    rx834_cstack = rx834_cur."!cursor_capture"($P11, "EXPR")
    set_addr $I11, rxsubrule838_back
    push rx834_bstack, $I11
    push rx834_bstack, 0
    push rx834_bstack, rx834_pos
    elements $I11, rx834_cstack
    push rx834_bstack, $I11
    repr_get_attr_int rx834_pos, $P11, rx834_curclass, "$!pos"
    nqp_rxpeek $I19, rx834_bstack, rxquantr837_done
    inc $I19
    inc $I19
    set rx834_rep, rx834_bstack[$I19]
    nqp_rxcommit rx834_bstack, rxquantr837_done
    inc rx834_rep
  rxquantr837_done:
    add $I11, rx834_pos, 1
    gt $I11, rx834_eos, rx834_fail
    substr $S10, rx834_tgt, rx834_pos, 1
    ne $S10, ucs4:")", rx834_fail
    add rx834_pos, 1
    rx834_cur."!cursor_pass"(rx834_pos, "circumfix:sym<( )>", 'backtrack'=>1)
    .return (rx834_cur)
  rx834_restart:
    repr_get_attr_obj rx834_cstack, rx834_cur, rx834_curclass, "$!cstack"
  rx834_fail:
    unless rx834_bstack, rx834_done
    pop $I19, rx834_bstack
    if_null rx834_cstack, rx834_cstack_done
    unless rx834_cstack, rx834_cstack_done
    dec $I19
    set $P11, rx834_cstack[$I19]
  rx834_cstack_done:
    pop rx834_rep, rx834_bstack
    pop rx834_pos, rx834_bstack
    pop $I19, rx834_bstack
    lt rx834_pos, -1, rx834_done
    lt rx834_pos, 0, rx834_fail
    eq $I19, 0, rx834_fail
    if_null rx834_cstack, rx834_jump
    elements $I18, rx834_bstack
    le $I18, 0, rx834_cut
    dec $I18
    set $I18, rx834_bstack[$I18]
  rx834_cut:
    assign rx834_cstack, $I18
  rx834_jump:
    jump $I19
  rx834_done:
    rx834_cur."!cursor_fail"()
    .return (rx834_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "168_1337966799.879_caps"  :subid("623_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1243
    new $P104, "Hash"
    set $P104["EXPR"], 2
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "168_1337966799.879_nfa"  :subid("624_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1243
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 40
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "ws"
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "EXPR"
    push $P107, 4
    push $P107, 1
    push $P107, 0
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 41
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "circumfix:sym<[ ]>"  :subid("169_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2255
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1244
    .lex "self", param_2255
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2256
    .lex "$/", $P2257
    .local string rx839_tgt
    .local int rx839_pos
    .local int rx839_off
    .local int rx839_eos
    .local int rx839_rep
    .local pmc rx839_cur
    .local pmc rx839_curclass
    .local pmc rx839_bstack
    .local pmc rx839_cstack
    (rx839_cur, rx839_tgt, rx839_pos, rx839_curclass, rx839_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx839_cur
    length rx839_eos, rx839_tgt
    eq $I19, 1, rx839_restart
    repr_get_attr_int $I11, self, rx839_curclass, "$!from"
    ne $I11, -1, rxscan840_done
    goto rxscan840_scan
  rxscan840_loop:
    inc rx839_pos
    gt rx839_pos, rx839_eos, rx839_fail
    repr_bind_attr_int rx839_cur, rx839_curclass, "$!from", rx839_pos
  rxscan840_scan:
    nqp_rxmark rx839_bstack, rxscan840_loop, rx839_pos, 0
  rxscan840_done:
    add $I11, rx839_pos, 1
    gt $I11, rx839_eos, rx839_fail
    substr $S10, rx839_tgt, rx839_pos, 1
    ne $S10, ucs4:"[", rx839_fail
    add rx839_pos, 1
    repr_bind_attr_int rx839_cur, rx839_curclass, "$!pos", rx839_pos
    $P11 = rx839_cur."ws"()
    repr_get_attr_int $I11, $P11, rx839_curclass, "$!pos"
    lt $I11, 0, rx839_fail
    repr_get_attr_int rx839_pos, $P11, rx839_curclass, "$!pos"
  # rx rxquantr842 ** 0..1
    nqp_rxmark rx839_bstack, rxquantr842_done, rx839_pos, 0
  rxquantr842_loop:
    repr_bind_attr_int rx839_cur, rx839_curclass, "$!pos", rx839_pos
    $P11 = rx839_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx839_curclass, "$!pos"
    lt $I11, 0, rx839_fail
    goto rxsubrule843_pass
  rxsubrule843_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx839_curclass, "$!pos"
    lt $I11, 0, rx839_fail
  rxsubrule843_pass:
    rx839_cstack = rx839_cur."!cursor_capture"($P11, "EXPR")
    set_addr $I11, rxsubrule843_back
    push rx839_bstack, $I11
    push rx839_bstack, 0
    push rx839_bstack, rx839_pos
    elements $I11, rx839_cstack
    push rx839_bstack, $I11
    repr_get_attr_int rx839_pos, $P11, rx839_curclass, "$!pos"
    nqp_rxpeek $I19, rx839_bstack, rxquantr842_done
    inc $I19
    inc $I19
    set rx839_rep, rx839_bstack[$I19]
    nqp_rxcommit rx839_bstack, rxquantr842_done
    inc rx839_rep
  rxquantr842_done:
    add $I11, rx839_pos, 1
    gt $I11, rx839_eos, rx839_fail
    substr $S10, rx839_tgt, rx839_pos, 1
    ne $S10, ucs4:"]", rx839_fail
    add rx839_pos, 1
    rx839_cur."!cursor_pass"(rx839_pos, "circumfix:sym<[ ]>", 'backtrack'=>1)
    .return (rx839_cur)
  rx839_restart:
    repr_get_attr_obj rx839_cstack, rx839_cur, rx839_curclass, "$!cstack"
  rx839_fail:
    unless rx839_bstack, rx839_done
    pop $I19, rx839_bstack
    if_null rx839_cstack, rx839_cstack_done
    unless rx839_cstack, rx839_cstack_done
    dec $I19
    set $P11, rx839_cstack[$I19]
  rx839_cstack_done:
    pop rx839_rep, rx839_bstack
    pop rx839_pos, rx839_bstack
    pop $I19, rx839_bstack
    lt rx839_pos, -1, rx839_done
    lt rx839_pos, 0, rx839_fail
    eq $I19, 0, rx839_fail
    if_null rx839_cstack, rx839_jump
    elements $I18, rx839_bstack
    le $I18, 0, rx839_cut
    dec $I18
    set $I18, rx839_bstack[$I18]
  rx839_cut:
    assign rx839_cstack, $I18
  rx839_jump:
    jump $I19
  rx839_done:
    rx839_cur."!cursor_fail"()
    .return (rx839_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "169_1337966799.879_caps"  :subid("625_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1244
    new $P104, "Hash"
    set $P104["EXPR"], 2
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "169_1337966799.879_nfa"  :subid("626_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1244
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 91
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "ws"
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "EXPR"
    push $P107, 4
    push $P107, 1
    push $P107, 0
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 93
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "circumfix:sym<ang>"  :subid("170_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2261
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1245
    .lex "self", param_2261
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2262
    .lex "$/", $P2263
    .local string rx844_tgt
    .local int rx844_pos
    .local int rx844_off
    .local int rx844_eos
    .local int rx844_rep
    .local pmc rx844_cur
    .local pmc rx844_curclass
    .local pmc rx844_bstack
    .local pmc rx844_cstack
    (rx844_cur, rx844_tgt, rx844_pos, rx844_curclass, rx844_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx844_cur
    length rx844_eos, rx844_tgt
    eq $I19, 1, rx844_restart
    repr_get_attr_int $I11, self, rx844_curclass, "$!from"
    ne $I11, -1, rxscan845_done
    goto rxscan845_scan
  rxscan845_loop:
    inc rx844_pos
    gt rx844_pos, rx844_eos, rx844_fail
    repr_bind_attr_int rx844_cur, rx844_curclass, "$!from", rx844_pos
  rxscan845_scan:
    nqp_rxmark rx844_bstack, rxscan845_loop, rx844_pos, 0
  rxscan845_done:
    ge rx844_pos, rx844_eos, rx844_fail
    substr $S11, rx844_tgt, rx844_pos, 1
    index $I11, ucs4:"<", $S11
    lt $I11, 0, rx844_fail
    repr_bind_attr_int rx844_cur, rx844_curclass, "$!pos", rx844_pos
    $P11 = rx844_cur."quote_EXPR"(":q", ":w")
    repr_get_attr_int $I11, $P11, rx844_curclass, "$!pos"
    lt $I11, 0, rx844_fail
    nqp_rxmark rx844_bstack, rxsubrule846_pass, -1, 0
  rxsubrule846_pass:
    rx844_cstack = rx844_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx844_pos, $P11, rx844_curclass, "$!pos"
    rx844_cur."!cursor_pass"(rx844_pos, "circumfix:sym<ang>", 'backtrack'=>1)
    .return (rx844_cur)
  rx844_restart:
    repr_get_attr_obj rx844_cstack, rx844_cur, rx844_curclass, "$!cstack"
  rx844_fail:
    unless rx844_bstack, rx844_done
    pop $I19, rx844_bstack
    if_null rx844_cstack, rx844_cstack_done
    unless rx844_cstack, rx844_cstack_done
    dec $I19
    set $P11, rx844_cstack[$I19]
  rx844_cstack_done:
    pop rx844_rep, rx844_bstack
    pop rx844_pos, rx844_bstack
    pop $I19, rx844_bstack
    lt rx844_pos, -1, rx844_done
    lt rx844_pos, 0, rx844_fail
    eq $I19, 0, rx844_fail
    if_null rx844_cstack, rx844_jump
    elements $I18, rx844_bstack
    le $I18, 0, rx844_cut
    dec $I18
    set $I18, rx844_bstack[$I18]
  rx844_cut:
    assign rx844_cstack, $I18
  rx844_jump:
    jump $I19
  rx844_done:
    rx844_cur."!cursor_fail"()
    .return (rx844_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "170_1337966799.879_caps"  :subid("627_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1245
    new $P104, "Hash"
    set $P104["quote_EXPR"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "170_1337966799.879_nfa"  :subid("628_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1245
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 6
    push $P105, "<"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 0
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub unicode:"circumfix:sym<\x{ab} \x{bb}>"  :subid("171_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2267
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1246
    .lex "self", param_2267
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2268
    .lex "$/", $P2269
    .local string rx847_tgt
    .local int rx847_pos
    .local int rx847_off
    .local int rx847_eos
    .local int rx847_rep
    .local pmc rx847_cur
    .local pmc rx847_curclass
    .local pmc rx847_bstack
    .local pmc rx847_cstack
    (rx847_cur, rx847_tgt, rx847_pos, rx847_curclass, rx847_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx847_cur
    length rx847_eos, rx847_tgt
    eq $I19, 1, rx847_restart
    repr_get_attr_int $I11, self, rx847_curclass, "$!from"
    ne $I11, -1, rxscan848_done
    goto rxscan848_scan
  rxscan848_loop:
    inc rx847_pos
    gt rx847_pos, rx847_eos, rx847_fail
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!from", rx847_pos
  rxscan848_scan:
    nqp_rxmark rx847_bstack, rxscan848_loop, rx847_pos, 0
  rxscan848_done:
    ge rx847_pos, rx847_eos, rx847_fail
    substr $S11, rx847_tgt, rx847_pos, 1
    index $I11, ucs4:"\x{ab}", $S11
    lt $I11, 0, rx847_fail
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."quote_EXPR"(":qq", ":w")
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail
    nqp_rxmark rx847_bstack, rxsubrule849_pass, -1, 0
  rxsubrule849_pass:
    rx847_cstack = rx847_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
    rx847_cur."!cursor_pass"(rx847_pos, unicode:"circumfix:sym<\x{ab} \x{bb}>", 'backtrack'=>1)
    .return (rx847_cur)
  rx847_restart:
    repr_get_attr_obj rx847_cstack, rx847_cur, rx847_curclass, "$!cstack"
  rx847_fail:
    unless rx847_bstack, rx847_done
    pop $I19, rx847_bstack
    if_null rx847_cstack, rx847_cstack_done
    unless rx847_cstack, rx847_cstack_done
    dec $I19
    set $P11, rx847_cstack[$I19]
  rx847_cstack_done:
    pop rx847_rep, rx847_bstack
    pop rx847_pos, rx847_bstack
    pop $I19, rx847_bstack
    lt rx847_pos, -1, rx847_done
    lt rx847_pos, 0, rx847_fail
    eq $I19, 0, rx847_fail
    if_null rx847_cstack, rx847_jump
    elements $I18, rx847_bstack
    le $I18, 0, rx847_cut
    dec $I18
    set $I18, rx847_bstack[$I18]
  rx847_cut:
    assign rx847_cstack, $I18
  rx847_jump:
    jump $I19
  rx847_done:
    rx847_cur."!cursor_fail"()
    .return (rx847_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "171_1337966799.879_caps"  :subid("629_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1246
    new $P104, "Hash"
    set $P104["quote_EXPR"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "171_1337966799.879_nfa"  :subid("630_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1246
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 6
    push $P105, unicode:"\x{ab}"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 0
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "circumfix:sym<{ }>"  :subid("172_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2273
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1247
    .lex "self", param_2273
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2274
    .lex "$/", $P2275
    .local string rx850_tgt
    .local int rx850_pos
    .local int rx850_off
    .local int rx850_eos
    .local int rx850_rep
    .local pmc rx850_cur
    .local pmc rx850_curclass
    .local pmc rx850_bstack
    .local pmc rx850_cstack
    (rx850_cur, rx850_tgt, rx850_pos, rx850_curclass, rx850_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx850_cur
    length rx850_eos, rx850_tgt
    eq $I19, 1, rx850_restart
    repr_get_attr_int $I11, self, rx850_curclass, "$!from"
    ne $I11, -1, rxscan851_done
    goto rxscan851_scan
  rxscan851_loop:
    inc rx850_pos
    gt rx850_pos, rx850_eos, rx850_fail
    repr_bind_attr_int rx850_cur, rx850_curclass, "$!from", rx850_pos
  rxscan851_scan:
    nqp_rxmark rx850_bstack, rxscan851_loop, rx850_pos, 0
  rxscan851_done:
    ge rx850_pos, rx850_eos, rx850_fail
    substr $S11, rx850_tgt, rx850_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx850_fail
    repr_bind_attr_int rx850_cur, rx850_curclass, "$!pos", rx850_pos
    $P11 = rx850_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx850_curclass, "$!pos"
    lt $I11, 0, rx850_fail
    nqp_rxmark rx850_bstack, rxsubrule852_pass, -1, 0
  rxsubrule852_pass:
    rx850_cstack = rx850_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx850_pos, $P11, rx850_curclass, "$!pos"
    rx850_cur."!cursor_pass"(rx850_pos, "circumfix:sym<{ }>", 'backtrack'=>1)
    .return (rx850_cur)
  rx850_restart:
    repr_get_attr_obj rx850_cstack, rx850_cur, rx850_curclass, "$!cstack"
  rx850_fail:
    unless rx850_bstack, rx850_done
    pop $I19, rx850_bstack
    if_null rx850_cstack, rx850_cstack_done
    unless rx850_cstack, rx850_cstack_done
    dec $I19
    set $P11, rx850_cstack[$I19]
  rx850_cstack_done:
    pop rx850_rep, rx850_bstack
    pop rx850_pos, rx850_bstack
    pop $I19, rx850_bstack
    lt rx850_pos, -1, rx850_done
    lt rx850_pos, 0, rx850_fail
    eq $I19, 0, rx850_fail
    if_null rx850_cstack, rx850_jump
    elements $I18, rx850_bstack
    le $I18, 0, rx850_cut
    dec $I18
    set $I18, rx850_bstack[$I18]
  rx850_cut:
    assign rx850_cstack, $I18
  rx850_jump:
    jump $I19
  rx850_done:
    rx850_cur."!cursor_fail"()
    .return (rx850_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "172_1337966799.879_caps"  :subid("631_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1247
    new $P104, "Hash"
    set $P104["pblock"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "172_1337966799.879_nfa"  :subid("632_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1247
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 6
    push $P105, "{"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 0
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "circumfix:sym<sigil>"  :subid("173_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2279
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1248
    .lex "self", param_2279
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2280
    .lex "$/", $P2281
    .local string rx853_tgt
    .local int rx853_pos
    .local int rx853_off
    .local int rx853_eos
    .local int rx853_rep
    .local pmc rx853_cur
    .local pmc rx853_curclass
    .local pmc rx853_bstack
    .local pmc rx853_cstack
    (rx853_cur, rx853_tgt, rx853_pos, rx853_curclass, rx853_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx853_cur
    length rx853_eos, rx853_tgt
    eq $I19, 1, rx853_restart
    repr_get_attr_int $I11, self, rx853_curclass, "$!from"
    ne $I11, -1, rxscan854_done
    goto rxscan854_scan
  rxscan854_loop:
    inc rx853_pos
    gt rx853_pos, rx853_eos, rx853_fail
    repr_bind_attr_int rx853_cur, rx853_curclass, "$!from", rx853_pos
  rxscan854_scan:
    nqp_rxmark rx853_bstack, rxscan854_loop, rx853_pos, 0
  rxscan854_done:
    repr_bind_attr_int rx853_cur, rx853_curclass, "$!pos", rx853_pos
    $P11 = rx853_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx853_curclass, "$!pos"
    lt $I11, 0, rx853_fail
    nqp_rxmark rx853_bstack, rxsubrule855_pass, -1, 0
  rxsubrule855_pass:
    rx853_cstack = rx853_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx853_pos, $P11, rx853_curclass, "$!pos"
    add $I11, rx853_pos, 1
    gt $I11, rx853_eos, rx853_fail
    substr $S10, rx853_tgt, rx853_pos, 1
    ne $S10, ucs4:"(", rx853_fail
    add rx853_pos, 1
    repr_bind_attr_int rx853_cur, rx853_curclass, "$!pos", rx853_pos
    $P11 = rx853_cur."semilist"()
    repr_get_attr_int $I11, $P11, rx853_curclass, "$!pos"
    lt $I11, 0, rx853_fail
    nqp_rxmark rx853_bstack, rxsubrule856_pass, -1, 0
  rxsubrule856_pass:
    rx853_cstack = rx853_cur."!cursor_capture"($P11, "semilist")
    repr_get_attr_int rx853_pos, $P11, rx853_curclass, "$!pos"
  alt857_0:
    nqp_rxmark rx853_bstack, alt857_1, rx853_pos, 0
    add $I11, rx853_pos, 1
    gt $I11, rx853_eos, rx853_fail
    substr $S10, rx853_tgt, rx853_pos, 1
    ne $S10, ucs4:")", rx853_fail
    add rx853_pos, 1
    goto alt857_end
  alt857_1:
    repr_bind_attr_int rx853_cur, rx853_curclass, "$!pos", rx853_pos
    $P11 = rx853_cur."FAILGOAL"("')'")
    repr_get_attr_int $I11, $P11, rx853_curclass, "$!pos"
    lt $I11, 0, rx853_fail
    goto rxsubrule858_pass
  rxsubrule858_back:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx853_curclass, "$!pos"
    lt $I11, 0, rx853_fail
  rxsubrule858_pass:
    rx853_cstack = rx853_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule858_back
    push rx853_bstack, $I11
    push rx853_bstack, 0
    push rx853_bstack, rx853_pos
    elements $I11, rx853_cstack
    push rx853_bstack, $I11
    repr_get_attr_int rx853_pos, $P11, rx853_curclass, "$!pos"
  alt857_end:
    rx853_cur."!cursor_pass"(rx853_pos, "circumfix:sym<sigil>", 'backtrack'=>1)
    .return (rx853_cur)
  rx853_restart:
    repr_get_attr_obj rx853_cstack, rx853_cur, rx853_curclass, "$!cstack"
  rx853_fail:
    unless rx853_bstack, rx853_done
    pop $I19, rx853_bstack
    if_null rx853_cstack, rx853_cstack_done
    unless rx853_cstack, rx853_cstack_done
    dec $I19
    set $P11, rx853_cstack[$I19]
  rx853_cstack_done:
    pop rx853_rep, rx853_bstack
    pop rx853_pos, rx853_bstack
    pop $I19, rx853_bstack
    lt rx853_pos, -1, rx853_done
    lt rx853_pos, 0, rx853_fail
    eq $I19, 0, rx853_fail
    if_null rx853_cstack, rx853_jump
    elements $I18, rx853_bstack
    le $I18, 0, rx853_cut
    dec $I18
    set $I18, rx853_bstack[$I18]
  rx853_cut:
    assign rx853_cstack, $I18
  rx853_jump:
    jump $I19
  rx853_done:
    rx853_cur."!cursor_fail"()
    .return (rx853_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "173_1337966799.879_caps"  :subid("633_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1248
    new $P104, "Hash"
    set $P104["sigil"], 0
    set $P104["semilist"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "173_1337966799.879_nfa"  :subid("634_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1248
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "sigil"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 40
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "semilist"
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 0
    push $P108, 0
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "semilist"  :subid("174_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2285
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1250
    .lex "self", param_2285
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2286
    .lex "$/", $P2287
    .local string rx859_tgt
    .local int rx859_pos
    .local int rx859_off
    .local int rx859_eos
    .local int rx859_rep
    .local pmc rx859_cur
    .local pmc rx859_curclass
    .local pmc rx859_bstack
    .local pmc rx859_cstack
    (rx859_cur, rx859_tgt, rx859_pos, rx859_curclass, rx859_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx859_cur
    length rx859_eos, rx859_tgt
    eq $I19, 1, rx859_restart
    repr_get_attr_int $I11, self, rx859_curclass, "$!from"
    ne $I11, -1, rxscan860_done
    goto rxscan860_scan
  rxscan860_loop:
    inc rx859_pos
    gt rx859_pos, rx859_eos, rx859_fail
    repr_bind_attr_int rx859_cur, rx859_curclass, "$!from", rx859_pos
  rxscan860_scan:
    nqp_rxmark rx859_bstack, rxscan860_loop, rx859_pos, 0
  rxscan860_done:
    repr_bind_attr_int rx859_cur, rx859_curclass, "$!pos", rx859_pos
    $P11 = rx859_cur."ws"()
    repr_get_attr_int $I11, $P11, rx859_curclass, "$!pos"
    lt $I11, 0, rx859_fail
    repr_get_attr_int rx859_pos, $P11, rx859_curclass, "$!pos"
    repr_bind_attr_int rx859_cur, rx859_curclass, "$!pos", rx859_pos
    $P11 = rx859_cur."statement"()
    repr_get_attr_int $I11, $P11, rx859_curclass, "$!pos"
    lt $I11, 0, rx859_fail
    nqp_rxmark rx859_bstack, rxsubrule862_pass, -1, 0
  rxsubrule862_pass:
    rx859_cstack = rx859_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx859_pos, $P11, rx859_curclass, "$!pos"
    repr_bind_attr_int rx859_cur, rx859_curclass, "$!pos", rx859_pos
    $P11 = rx859_cur."ws"()
    repr_get_attr_int $I11, $P11, rx859_curclass, "$!pos"
    lt $I11, 0, rx859_fail
    repr_get_attr_int rx859_pos, $P11, rx859_curclass, "$!pos"
    rx859_cur."!cursor_pass"(rx859_pos, "semilist", 'backtrack'=>1)
    .return (rx859_cur)
  rx859_restart:
    repr_get_attr_obj rx859_cstack, rx859_cur, rx859_curclass, "$!cstack"
  rx859_fail:
    unless rx859_bstack, rx859_done
    pop $I19, rx859_bstack
    if_null rx859_cstack, rx859_cstack_done
    unless rx859_cstack, rx859_cstack_done
    dec $I19
    set $P11, rx859_cstack[$I19]
  rx859_cstack_done:
    pop rx859_rep, rx859_bstack
    pop rx859_pos, rx859_bstack
    pop $I19, rx859_bstack
    lt rx859_pos, -1, rx859_done
    lt rx859_pos, 0, rx859_fail
    eq $I19, 0, rx859_fail
    if_null rx859_cstack, rx859_jump
    elements $I18, rx859_bstack
    le $I18, 0, rx859_cut
    dec $I18
    set $I18, rx859_bstack[$I18]
  rx859_cut:
    assign rx859_cstack, $I18
  rx859_jump:
    jump $I19
  rx859_done:
    rx859_cur."!cursor_fail"()
    .return (rx859_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "174_1337966799.879_caps"  :subid("635_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1250
    new $P104, "Hash"
    set $P104["statement"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infixish"  :subid("175_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2290
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1273
    .lex "self", param_2290
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2291
    .lex "$/", $P2292
    .local string rx864_tgt
    .local int rx864_pos
    .local int rx864_off
    .local int rx864_eos
    .local int rx864_rep
    .local pmc rx864_cur
    .local pmc rx864_curclass
    .local pmc rx864_bstack
    .local pmc rx864_cstack
    (rx864_cur, rx864_tgt, rx864_pos, rx864_curclass, rx864_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx864_cur
    length rx864_eos, rx864_tgt
    eq $I19, 1, rx864_restart
    repr_get_attr_int $I11, self, rx864_curclass, "$!from"
    ne $I11, -1, rxscan865_done
    goto rxscan865_scan
  rxscan865_loop:
    inc rx864_pos
    gt rx864_pos, rx864_eos, rx864_fail
    repr_bind_attr_int rx864_cur, rx864_curclass, "$!from", rx864_pos
  rxscan865_scan:
    nqp_rxmark rx864_bstack, rxscan865_loop, rx864_pos, 0
  rxscan865_done:
    repr_bind_attr_int rx864_cur, rx864_curclass, "$!pos", rx864_pos
    $P11 = rx864_cur."infixstopper"()
    repr_get_attr_int $I11, $P11, rx864_curclass, "$!pos"
    ge $I11, 0, rx864_fail
    repr_bind_attr_int rx864_cur, rx864_curclass, "$!pos", rx864_pos
    $P11 = rx864_cur."infix"()
    repr_get_attr_int $I11, $P11, rx864_curclass, "$!pos"
    lt $I11, 0, rx864_fail
    nqp_rxmark rx864_bstack, rxsubrule866_pass, -1, 0
  rxsubrule866_pass:
    rx864_cstack = rx864_cur."!cursor_capture"($P11, "OPER=infix")
    repr_get_attr_int rx864_pos, $P11, rx864_curclass, "$!pos"
    rx864_cur."!cursor_pass"(rx864_pos, "infixish", 'backtrack'=>1)
    .return (rx864_cur)
  rx864_restart:
    repr_get_attr_obj rx864_cstack, rx864_cur, rx864_curclass, "$!cstack"
  rx864_fail:
    unless rx864_bstack, rx864_done
    pop $I19, rx864_bstack
    if_null rx864_cstack, rx864_cstack_done
    unless rx864_cstack, rx864_cstack_done
    dec $I19
    set $P11, rx864_cstack[$I19]
  rx864_cstack_done:
    pop rx864_rep, rx864_bstack
    pop rx864_pos, rx864_bstack
    pop $I19, rx864_bstack
    lt rx864_pos, -1, rx864_done
    lt rx864_pos, 0, rx864_fail
    eq $I19, 0, rx864_fail
    if_null rx864_cstack, rx864_jump
    elements $I18, rx864_bstack
    le $I18, 0, rx864_cut
    dec $I18
    set $I18, rx864_bstack[$I18]
  rx864_cut:
    assign rx864_cstack, $I18
  rx864_jump:
    jump $I19
  rx864_done:
    rx864_cur."!cursor_fail"()
    .return (rx864_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "175_1337966799.879_caps"  :subid("636_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1273
    new $P104, "Hash"
    set $P104["OPER"], 0
    set $P104["infix"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infixstopper"  :subid("176_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2295
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1274
    .lex "self", param_2295
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2296
    .lex "$/", $P2297
    .local string rx867_tgt
    .local int rx867_pos
    .local int rx867_off
    .local int rx867_eos
    .local int rx867_rep
    .local pmc rx867_cur
    .local pmc rx867_curclass
    .local pmc rx867_bstack
    .local pmc rx867_cstack
    (rx867_cur, rx867_tgt, rx867_pos, rx867_curclass, rx867_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx867_cur
    length rx867_eos, rx867_tgt
    eq $I19, 1, rx867_restart
    repr_get_attr_int $I11, self, rx867_curclass, "$!from"
    ne $I11, -1, rxscan868_done
    goto rxscan868_scan
  rxscan868_loop:
    inc rx867_pos
    gt rx867_pos, rx867_eos, rx867_fail
    repr_bind_attr_int rx867_cur, rx867_curclass, "$!from", rx867_pos
  rxscan868_scan:
    nqp_rxmark rx867_bstack, rxscan868_loop, rx867_pos, 0
  rxscan868_done:
    repr_bind_attr_int rx867_cur, rx867_curclass, "$!pos", rx867_pos
    $P11 = rx867_cur."lambda"()
    repr_get_attr_int $I11, $P11, rx867_curclass, "$!pos"
    lt $I11, 0, rx867_fail
    rx867_cur."!cursor_pass"(rx867_pos, "infixstopper", 'backtrack'=>1)
    .return (rx867_cur)
  rx867_restart:
    repr_get_attr_obj rx867_cstack, rx867_cur, rx867_curclass, "$!cstack"
  rx867_fail:
    unless rx867_bstack, rx867_done
    pop $I19, rx867_bstack
    if_null rx867_cstack, rx867_cstack_done
    unless rx867_cstack, rx867_cstack_done
    dec $I19
    set $P11, rx867_cstack[$I19]
  rx867_cstack_done:
    pop rx867_rep, rx867_bstack
    pop rx867_pos, rx867_bstack
    pop $I19, rx867_bstack
    lt rx867_pos, -1, rx867_done
    lt rx867_pos, 0, rx867_fail
    eq $I19, 0, rx867_fail
    if_null rx867_cstack, rx867_jump
    elements $I18, rx867_bstack
    le $I18, 0, rx867_cut
    dec $I18
    set $I18, rx867_bstack[$I18]
  rx867_cut:
    assign rx867_cstack, $I18
  rx867_jump:
    jump $I19
  rx867_done:
    rx867_cur."!cursor_fail"()
    .return (rx867_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "176_1337966799.879_caps"  :subid("637_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1274
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "176_1337966799.879_nfa"  :subid("638_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1274
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "lambda"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postcircumfix:sym<[ ]>"  :subid("177_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2301
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1276
    .lex "self", param_2301
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2302
    .lex "$/", $P2303
    .local string rx869_tgt
    .local int rx869_pos
    .local int rx869_off
    .local int rx869_eos
    .local int rx869_rep
    .local pmc rx869_cur
    .local pmc rx869_curclass
    .local pmc rx869_bstack
    .local pmc rx869_cstack
    (rx869_cur, rx869_tgt, rx869_pos, rx869_curclass, rx869_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx869_cur
    length rx869_eos, rx869_tgt
    eq $I19, 1, rx869_restart
    repr_get_attr_int $I11, self, rx869_curclass, "$!from"
    ne $I11, -1, rxscan870_done
    goto rxscan870_scan
  rxscan870_loop:
    inc rx869_pos
    gt rx869_pos, rx869_eos, rx869_fail
    repr_bind_attr_int rx869_cur, rx869_curclass, "$!from", rx869_pos
  rxscan870_scan:
    nqp_rxmark rx869_bstack, rxscan870_loop, rx869_pos, 0
  rxscan870_done:
    add $I11, rx869_pos, 1
    gt $I11, rx869_eos, rx869_fail
    substr $S10, rx869_tgt, rx869_pos, 1
    ne $S10, ucs4:"[", rx869_fail
    add rx869_pos, 1
    repr_bind_attr_int rx869_cur, rx869_curclass, "$!pos", rx869_pos
    $P11 = rx869_cur."ws"()
    repr_get_attr_int $I11, $P11, rx869_curclass, "$!pos"
    lt $I11, 0, rx869_fail
    repr_get_attr_int rx869_pos, $P11, rx869_curclass, "$!pos"
    repr_bind_attr_int rx869_cur, rx869_curclass, "$!pos", rx869_pos
    $P11 = rx869_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx869_curclass, "$!pos"
    lt $I11, 0, rx869_fail
    nqp_rxmark rx869_bstack, rxsubrule872_pass, -1, 0
  rxsubrule872_pass:
    rx869_cstack = rx869_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx869_pos, $P11, rx869_curclass, "$!pos"
    add $I11, rx869_pos, 1
    gt $I11, rx869_eos, rx869_fail
    substr $S10, rx869_tgt, rx869_pos, 1
    ne $S10, ucs4:"]", rx869_fail
    add rx869_pos, 1
    repr_bind_attr_int rx869_cur, rx869_curclass, "$!pos", rx869_pos
    $P11 = rx869_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx869_curclass, "$!pos"
    lt $I11, 0, rx869_fail
    nqp_rxmark rx869_bstack, rxsubrule873_pass, -1, 0
  rxsubrule873_pass:
    rx869_cstack = rx869_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx869_pos, $P11, rx869_curclass, "$!pos"
    rx869_cur."!cursor_pass"(rx869_pos, "postcircumfix:sym<[ ]>", 'backtrack'=>1)
    .return (rx869_cur)
  rx869_restart:
    repr_get_attr_obj rx869_cstack, rx869_cur, rx869_curclass, "$!cstack"
  rx869_fail:
    unless rx869_bstack, rx869_done
    pop $I19, rx869_bstack
    if_null rx869_cstack, rx869_cstack_done
    unless rx869_cstack, rx869_cstack_done
    dec $I19
    set $P11, rx869_cstack[$I19]
  rx869_cstack_done:
    pop rx869_rep, rx869_bstack
    pop rx869_pos, rx869_bstack
    pop $I19, rx869_bstack
    lt rx869_pos, -1, rx869_done
    lt rx869_pos, 0, rx869_fail
    eq $I19, 0, rx869_fail
    if_null rx869_cstack, rx869_jump
    elements $I18, rx869_bstack
    le $I18, 0, rx869_cut
    dec $I18
    set $I18, rx869_bstack[$I18]
  rx869_cut:
    assign rx869_cstack, $I18
  rx869_jump:
    jump $I19
  rx869_done:
    rx869_cur."!cursor_fail"()
    .return (rx869_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "177_1337966799.879_caps"  :subid("639_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1276
    new $P104, "Hash"
    set $P104["EXPR"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "177_1337966799.879_nfa"  :subid("640_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1276
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 91
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "ws"
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "EXPR"
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 93
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 8
    push $P109, "O"
    push $P109, 0
    new $P110, "ResizablePMCArray"
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postcircumfix:sym<{ }>"  :subid("178_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2307
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1281
    .lex "self", param_2307
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2308
    .lex "$/", $P2309
    .local string rx874_tgt
    .local int rx874_pos
    .local int rx874_off
    .local int rx874_eos
    .local int rx874_rep
    .local pmc rx874_cur
    .local pmc rx874_curclass
    .local pmc rx874_bstack
    .local pmc rx874_cstack
    (rx874_cur, rx874_tgt, rx874_pos, rx874_curclass, rx874_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx874_cur
    length rx874_eos, rx874_tgt
    eq $I19, 1, rx874_restart
    repr_get_attr_int $I11, self, rx874_curclass, "$!from"
    ne $I11, -1, rxscan875_done
    goto rxscan875_scan
  rxscan875_loop:
    inc rx874_pos
    gt rx874_pos, rx874_eos, rx874_fail
    repr_bind_attr_int rx874_cur, rx874_curclass, "$!from", rx874_pos
  rxscan875_scan:
    nqp_rxmark rx874_bstack, rxscan875_loop, rx874_pos, 0
  rxscan875_done:
    add $I11, rx874_pos, 1
    gt $I11, rx874_eos, rx874_fail
    substr $S10, rx874_tgt, rx874_pos, 1
    ne $S10, ucs4:"{", rx874_fail
    add rx874_pos, 1
    repr_bind_attr_int rx874_cur, rx874_curclass, "$!pos", rx874_pos
    $P11 = rx874_cur."ws"()
    repr_get_attr_int $I11, $P11, rx874_curclass, "$!pos"
    lt $I11, 0, rx874_fail
    repr_get_attr_int rx874_pos, $P11, rx874_curclass, "$!pos"
    repr_bind_attr_int rx874_cur, rx874_curclass, "$!pos", rx874_pos
    $P11 = rx874_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx874_curclass, "$!pos"
    lt $I11, 0, rx874_fail
    nqp_rxmark rx874_bstack, rxsubrule877_pass, -1, 0
  rxsubrule877_pass:
    rx874_cstack = rx874_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx874_pos, $P11, rx874_curclass, "$!pos"
    add $I11, rx874_pos, 1
    gt $I11, rx874_eos, rx874_fail
    substr $S10, rx874_tgt, rx874_pos, 1
    ne $S10, ucs4:"}", rx874_fail
    add rx874_pos, 1
    repr_bind_attr_int rx874_cur, rx874_curclass, "$!pos", rx874_pos
    $P11 = rx874_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx874_curclass, "$!pos"
    lt $I11, 0, rx874_fail
    nqp_rxmark rx874_bstack, rxsubrule878_pass, -1, 0
  rxsubrule878_pass:
    rx874_cstack = rx874_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx874_pos, $P11, rx874_curclass, "$!pos"
    rx874_cur."!cursor_pass"(rx874_pos, "postcircumfix:sym<{ }>", 'backtrack'=>1)
    .return (rx874_cur)
  rx874_restart:
    repr_get_attr_obj rx874_cstack, rx874_cur, rx874_curclass, "$!cstack"
  rx874_fail:
    unless rx874_bstack, rx874_done
    pop $I19, rx874_bstack
    if_null rx874_cstack, rx874_cstack_done
    unless rx874_cstack, rx874_cstack_done
    dec $I19
    set $P11, rx874_cstack[$I19]
  rx874_cstack_done:
    pop rx874_rep, rx874_bstack
    pop rx874_pos, rx874_bstack
    pop $I19, rx874_bstack
    lt rx874_pos, -1, rx874_done
    lt rx874_pos, 0, rx874_fail
    eq $I19, 0, rx874_fail
    if_null rx874_cstack, rx874_jump
    elements $I18, rx874_bstack
    le $I18, 0, rx874_cut
    dec $I18
    set $I18, rx874_bstack[$I18]
  rx874_cut:
    assign rx874_cstack, $I18
  rx874_jump:
    jump $I19
  rx874_done:
    rx874_cur."!cursor_fail"()
    .return (rx874_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "178_1337966799.879_caps"  :subid("641_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1281
    new $P104, "Hash"
    set $P104["EXPR"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "178_1337966799.879_nfa"  :subid("642_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1281
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 123
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "ws"
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "EXPR"
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 125
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 8
    push $P109, "O"
    push $P109, 0
    new $P110, "ResizablePMCArray"
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postcircumfix:sym<ang>"  :subid("179_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2313
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1286
    .lex "self", param_2313
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2314
    .lex "$/", $P2315
    .local string rx879_tgt
    .local int rx879_pos
    .local int rx879_off
    .local int rx879_eos
    .local int rx879_rep
    .local pmc rx879_cur
    .local pmc rx879_curclass
    .local pmc rx879_bstack
    .local pmc rx879_cstack
    (rx879_cur, rx879_tgt, rx879_pos, rx879_curclass, rx879_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx879_cur
    length rx879_eos, rx879_tgt
    eq $I19, 1, rx879_restart
    repr_get_attr_int $I11, self, rx879_curclass, "$!from"
    ne $I11, -1, rxscan880_done
    goto rxscan880_scan
  rxscan880_loop:
    inc rx879_pos
    gt rx879_pos, rx879_eos, rx879_fail
    repr_bind_attr_int rx879_cur, rx879_curclass, "$!from", rx879_pos
  rxscan880_scan:
    nqp_rxmark rx879_bstack, rxscan880_loop, rx879_pos, 0
  rxscan880_done:
    ge rx879_pos, rx879_eos, rx879_fail
    substr $S11, rx879_tgt, rx879_pos, 1
    index $I11, ucs4:"<", $S11
    lt $I11, 0, rx879_fail
    repr_bind_attr_int rx879_cur, rx879_curclass, "$!pos", rx879_pos
    $P11 = rx879_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx879_curclass, "$!pos"
    lt $I11, 0, rx879_fail
    nqp_rxmark rx879_bstack, rxsubrule881_pass, -1, 0
  rxsubrule881_pass:
    rx879_cstack = rx879_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx879_pos, $P11, rx879_curclass, "$!pos"
    repr_bind_attr_int rx879_cur, rx879_curclass, "$!pos", rx879_pos
    $P11 = rx879_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx879_curclass, "$!pos"
    lt $I11, 0, rx879_fail
    nqp_rxmark rx879_bstack, rxsubrule882_pass, -1, 0
  rxsubrule882_pass:
    rx879_cstack = rx879_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx879_pos, $P11, rx879_curclass, "$!pos"
    rx879_cur."!cursor_pass"(rx879_pos, "postcircumfix:sym<ang>", 'backtrack'=>1)
    .return (rx879_cur)
  rx879_restart:
    repr_get_attr_obj rx879_cstack, rx879_cur, rx879_curclass, "$!cstack"
  rx879_fail:
    unless rx879_bstack, rx879_done
    pop $I19, rx879_bstack
    if_null rx879_cstack, rx879_cstack_done
    unless rx879_cstack, rx879_cstack_done
    dec $I19
    set $P11, rx879_cstack[$I19]
  rx879_cstack_done:
    pop rx879_rep, rx879_bstack
    pop rx879_pos, rx879_bstack
    pop $I19, rx879_bstack
    lt rx879_pos, -1, rx879_done
    lt rx879_pos, 0, rx879_fail
    eq $I19, 0, rx879_fail
    if_null rx879_cstack, rx879_jump
    elements $I18, rx879_bstack
    le $I18, 0, rx879_cut
    dec $I18
    set $I18, rx879_bstack[$I18]
  rx879_cut:
    assign rx879_cstack, $I18
  rx879_jump:
    jump $I19
  rx879_done:
    rx879_cur."!cursor_fail"()
    .return (rx879_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "179_1337966799.879_caps"  :subid("643_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1286
    new $P104, "Hash"
    set $P104["quote_EXPR"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "179_1337966799.879_nfa"  :subid("644_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1286
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 6
    push $P105, "<"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 0
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postcircumfix:sym<( )>"  :subid("180_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2319
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1291
    .lex "self", param_2319
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2320
    .lex "$/", $P2321
    .local string rx883_tgt
    .local int rx883_pos
    .local int rx883_off
    .local int rx883_eos
    .local int rx883_rep
    .local pmc rx883_cur
    .local pmc rx883_curclass
    .local pmc rx883_bstack
    .local pmc rx883_cstack
    (rx883_cur, rx883_tgt, rx883_pos, rx883_curclass, rx883_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx883_cur
    length rx883_eos, rx883_tgt
    eq $I19, 1, rx883_restart
    repr_get_attr_int $I11, self, rx883_curclass, "$!from"
    ne $I11, -1, rxscan884_done
    goto rxscan884_scan
  rxscan884_loop:
    inc rx883_pos
    gt rx883_pos, rx883_eos, rx883_fail
    repr_bind_attr_int rx883_cur, rx883_curclass, "$!from", rx883_pos
  rxscan884_scan:
    nqp_rxmark rx883_bstack, rxscan884_loop, rx883_pos, 0
  rxscan884_done:
    add $I11, rx883_pos, 1
    gt $I11, rx883_eos, rx883_fail
    substr $S10, rx883_tgt, rx883_pos, 1
    ne $S10, ucs4:"(", rx883_fail
    add rx883_pos, 1
    repr_bind_attr_int rx883_cur, rx883_curclass, "$!pos", rx883_pos
    $P11 = rx883_cur."ws"()
    repr_get_attr_int $I11, $P11, rx883_curclass, "$!pos"
    lt $I11, 0, rx883_fail
    repr_get_attr_int rx883_pos, $P11, rx883_curclass, "$!pos"
    repr_bind_attr_int rx883_cur, rx883_curclass, "$!pos", rx883_pos
    $P11 = rx883_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx883_curclass, "$!pos"
    lt $I11, 0, rx883_fail
    nqp_rxmark rx883_bstack, rxsubrule886_pass, -1, 0
  rxsubrule886_pass:
    rx883_cstack = rx883_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx883_pos, $P11, rx883_curclass, "$!pos"
    add $I11, rx883_pos, 1
    gt $I11, rx883_eos, rx883_fail
    substr $S10, rx883_tgt, rx883_pos, 1
    ne $S10, ucs4:")", rx883_fail
    add rx883_pos, 1
    repr_bind_attr_int rx883_cur, rx883_curclass, "$!pos", rx883_pos
    $P11 = rx883_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx883_curclass, "$!pos"
    lt $I11, 0, rx883_fail
    nqp_rxmark rx883_bstack, rxsubrule887_pass, -1, 0
  rxsubrule887_pass:
    rx883_cstack = rx883_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx883_pos, $P11, rx883_curclass, "$!pos"
    rx883_cur."!cursor_pass"(rx883_pos, "postcircumfix:sym<( )>", 'backtrack'=>1)
    .return (rx883_cur)
  rx883_restart:
    repr_get_attr_obj rx883_cstack, rx883_cur, rx883_curclass, "$!cstack"
  rx883_fail:
    unless rx883_bstack, rx883_done
    pop $I19, rx883_bstack
    if_null rx883_cstack, rx883_cstack_done
    unless rx883_cstack, rx883_cstack_done
    dec $I19
    set $P11, rx883_cstack[$I19]
  rx883_cstack_done:
    pop rx883_rep, rx883_bstack
    pop rx883_pos, rx883_bstack
    pop $I19, rx883_bstack
    lt rx883_pos, -1, rx883_done
    lt rx883_pos, 0, rx883_fail
    eq $I19, 0, rx883_fail
    if_null rx883_cstack, rx883_jump
    elements $I18, rx883_bstack
    le $I18, 0, rx883_cut
    dec $I18
    set $I18, rx883_bstack[$I18]
  rx883_cut:
    assign rx883_cstack, $I18
  rx883_jump:
    jump $I19
  rx883_done:
    rx883_cur."!cursor_fail"()
    .return (rx883_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "180_1337966799.879_caps"  :subid("645_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1291
    new $P104, "Hash"
    set $P104["arglist"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "180_1337966799.879_nfa"  :subid("646_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1291
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 40
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "ws"
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "arglist"
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 41
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 8
    push $P109, "O"
    push $P109, 0
    new $P110, "ResizablePMCArray"
    push $P110, $P104
    push $P110, $P105
    push $P110, $P106
    push $P110, $P107
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postfix:sym<.>"  :subid("181_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2325
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1296
    .lex "self", param_2325
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2326
    .lex "$/", $P2327
    .local string rx888_tgt
    .local int rx888_pos
    .local int rx888_off
    .local int rx888_eos
    .local int rx888_rep
    .local pmc rx888_cur
    .local pmc rx888_curclass
    .local pmc rx888_bstack
    .local pmc rx888_cstack
    (rx888_cur, rx888_tgt, rx888_pos, rx888_curclass, rx888_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx888_cur
    length rx888_eos, rx888_tgt
    eq $I19, 1, rx888_restart
    repr_get_attr_int $I11, self, rx888_curclass, "$!from"
    ne $I11, -1, rxscan889_done
    goto rxscan889_scan
  rxscan889_loop:
    inc rx888_pos
    gt rx888_pos, rx888_eos, rx888_fail
    repr_bind_attr_int rx888_cur, rx888_curclass, "$!from", rx888_pos
  rxscan889_scan:
    nqp_rxmark rx888_bstack, rxscan889_loop, rx888_pos, 0
  rxscan889_done:
    repr_bind_attr_int rx888_cur, rx888_curclass, "$!pos", rx888_pos
    $P11 = rx888_cur."dotty"()
    repr_get_attr_int $I11, $P11, rx888_curclass, "$!pos"
    lt $I11, 0, rx888_fail
    nqp_rxmark rx888_bstack, rxsubrule890_pass, -1, 0
  rxsubrule890_pass:
    rx888_cstack = rx888_cur."!cursor_capture"($P11, "dotty")
    repr_get_attr_int rx888_pos, $P11, rx888_curclass, "$!pos"
    repr_bind_attr_int rx888_cur, rx888_curclass, "$!pos", rx888_pos
    $P11 = rx888_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx888_curclass, "$!pos"
    lt $I11, 0, rx888_fail
    nqp_rxmark rx888_bstack, rxsubrule891_pass, -1, 0
  rxsubrule891_pass:
    rx888_cstack = rx888_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx888_pos, $P11, rx888_curclass, "$!pos"
    rx888_cur."!cursor_pass"(rx888_pos, "postfix:sym<.>", 'backtrack'=>1)
    .return (rx888_cur)
  rx888_restart:
    repr_get_attr_obj rx888_cstack, rx888_cur, rx888_curclass, "$!cstack"
  rx888_fail:
    unless rx888_bstack, rx888_done
    pop $I19, rx888_bstack
    if_null rx888_cstack, rx888_cstack_done
    unless rx888_cstack, rx888_cstack_done
    dec $I19
    set $P11, rx888_cstack[$I19]
  rx888_cstack_done:
    pop rx888_rep, rx888_bstack
    pop rx888_pos, rx888_bstack
    pop $I19, rx888_bstack
    lt rx888_pos, -1, rx888_done
    lt rx888_pos, 0, rx888_fail
    eq $I19, 0, rx888_fail
    if_null rx888_cstack, rx888_jump
    elements $I18, rx888_bstack
    le $I18, 0, rx888_cut
    dec $I18
    set $I18, rx888_bstack[$I18]
  rx888_cut:
    assign rx888_cstack, $I18
  rx888_jump:
    jump $I19
  rx888_done:
    rx888_cur."!cursor_fail"()
    .return (rx888_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "181_1337966799.879_caps"  :subid("647_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1296
    new $P104, "Hash"
    set $P104["dotty"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "181_1337966799.879_nfa"  :subid("648_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1296
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "dotty"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "O"
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<++>"  :subid("182_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2331
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1298
    .lex "self", param_2331
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2332
    .lex "$/", $P2333
    .local string rx892_tgt
    .local int rx892_pos
    .local int rx892_off
    .local int rx892_eos
    .local int rx892_rep
    .local pmc rx892_cur
    .local pmc rx892_curclass
    .local pmc rx892_bstack
    .local pmc rx892_cstack
    (rx892_cur, rx892_tgt, rx892_pos, rx892_curclass, rx892_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx892_cur
    length rx892_eos, rx892_tgt
    eq $I19, 1, rx892_restart
    repr_get_attr_int $I11, self, rx892_curclass, "$!from"
    ne $I11, -1, rxscan893_done
    goto rxscan893_scan
  rxscan893_loop:
    inc rx892_pos
    gt rx892_pos, rx892_eos, rx892_fail
    repr_bind_attr_int rx892_cur, rx892_curclass, "$!from", rx892_pos
  rxscan893_scan:
    nqp_rxmark rx892_bstack, rxscan893_loop, rx892_pos, 0
  rxscan893_done:
    nqp_rxmark rx892_bstack, rxcap894_fail, rx892_pos, 0
    add $I11, rx892_pos, 2
    gt $I11, rx892_eos, rx892_fail
    substr $S10, rx892_tgt, rx892_pos, 2
    ne $S10, ucs4:"++", rx892_fail
    add rx892_pos, 2
    nqp_rxpeek $I19, rx892_bstack, rxcap894_fail
    inc $I19
    set $I11, rx892_bstack[$I19]
    $P11 = rx892_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx892_pos)
    rx892_cstack = rx892_cur."!cursor_capture"($P11, "sym")
    goto rxcap894_done
  rxcap894_fail:
    goto rx892_fail
  rxcap894_done:
    repr_bind_attr_int rx892_cur, rx892_curclass, "$!pos", rx892_pos
    $P11 = rx892_cur."O"("%autoincrement, :pirop<inc>")
    repr_get_attr_int $I11, $P11, rx892_curclass, "$!pos"
    lt $I11, 0, rx892_fail
    nqp_rxmark rx892_bstack, rxsubrule895_pass, -1, 0
  rxsubrule895_pass:
    rx892_cstack = rx892_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx892_pos, $P11, rx892_curclass, "$!pos"
    rx892_cur."!cursor_pass"(rx892_pos, "prefix:sym<++>", 'backtrack'=>1)
    .return (rx892_cur)
  rx892_restart:
    repr_get_attr_obj rx892_cstack, rx892_cur, rx892_curclass, "$!cstack"
  rx892_fail:
    unless rx892_bstack, rx892_done
    pop $I19, rx892_bstack
    if_null rx892_cstack, rx892_cstack_done
    unless rx892_cstack, rx892_cstack_done
    dec $I19
    set $P11, rx892_cstack[$I19]
  rx892_cstack_done:
    pop rx892_rep, rx892_bstack
    pop rx892_pos, rx892_bstack
    pop $I19, rx892_bstack
    lt rx892_pos, -1, rx892_done
    lt rx892_pos, 0, rx892_fail
    eq $I19, 0, rx892_fail
    if_null rx892_cstack, rx892_jump
    elements $I18, rx892_bstack
    le $I18, 0, rx892_cut
    dec $I18
    set $I18, rx892_bstack[$I18]
  rx892_cut:
    assign rx892_cstack, $I18
  rx892_jump:
    jump $I19
  rx892_done:
    rx892_cur."!cursor_fail"()
    .return (rx892_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "182_1337966799.879_caps"  :subid("649_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1298
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "182_1337966799.879_nfa"  :subid("650_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1298
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 43
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 43
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "O"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<-->"  :subid("183_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2337
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1299
    .lex "self", param_2337
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2338
    .lex "$/", $P2339
    .local string rx896_tgt
    .local int rx896_pos
    .local int rx896_off
    .local int rx896_eos
    .local int rx896_rep
    .local pmc rx896_cur
    .local pmc rx896_curclass
    .local pmc rx896_bstack
    .local pmc rx896_cstack
    (rx896_cur, rx896_tgt, rx896_pos, rx896_curclass, rx896_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx896_cur
    length rx896_eos, rx896_tgt
    eq $I19, 1, rx896_restart
    repr_get_attr_int $I11, self, rx896_curclass, "$!from"
    ne $I11, -1, rxscan897_done
    goto rxscan897_scan
  rxscan897_loop:
    inc rx896_pos
    gt rx896_pos, rx896_eos, rx896_fail
    repr_bind_attr_int rx896_cur, rx896_curclass, "$!from", rx896_pos
  rxscan897_scan:
    nqp_rxmark rx896_bstack, rxscan897_loop, rx896_pos, 0
  rxscan897_done:
    nqp_rxmark rx896_bstack, rxcap898_fail, rx896_pos, 0
    add $I11, rx896_pos, 2
    gt $I11, rx896_eos, rx896_fail
    substr $S10, rx896_tgt, rx896_pos, 2
    ne $S10, ucs4:"--", rx896_fail
    add rx896_pos, 2
    nqp_rxpeek $I19, rx896_bstack, rxcap898_fail
    inc $I19
    set $I11, rx896_bstack[$I19]
    $P11 = rx896_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx896_pos)
    rx896_cstack = rx896_cur."!cursor_capture"($P11, "sym")
    goto rxcap898_done
  rxcap898_fail:
    goto rx896_fail
  rxcap898_done:
    repr_bind_attr_int rx896_cur, rx896_curclass, "$!pos", rx896_pos
    $P11 = rx896_cur."O"("%autoincrement, :pirop<dec>")
    repr_get_attr_int $I11, $P11, rx896_curclass, "$!pos"
    lt $I11, 0, rx896_fail
    nqp_rxmark rx896_bstack, rxsubrule899_pass, -1, 0
  rxsubrule899_pass:
    rx896_cstack = rx896_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx896_pos, $P11, rx896_curclass, "$!pos"
    rx896_cur."!cursor_pass"(rx896_pos, "prefix:sym<-->", 'backtrack'=>1)
    .return (rx896_cur)
  rx896_restart:
    repr_get_attr_obj rx896_cstack, rx896_cur, rx896_curclass, "$!cstack"
  rx896_fail:
    unless rx896_bstack, rx896_done
    pop $I19, rx896_bstack
    if_null rx896_cstack, rx896_cstack_done
    unless rx896_cstack, rx896_cstack_done
    dec $I19
    set $P11, rx896_cstack[$I19]
  rx896_cstack_done:
    pop rx896_rep, rx896_bstack
    pop rx896_pos, rx896_bstack
    pop $I19, rx896_bstack
    lt rx896_pos, -1, rx896_done
    lt rx896_pos, 0, rx896_fail
    eq $I19, 0, rx896_fail
    if_null rx896_cstack, rx896_jump
    elements $I18, rx896_bstack
    le $I18, 0, rx896_cut
    dec $I18
    set $I18, rx896_bstack[$I18]
  rx896_cut:
    assign rx896_cstack, $I18
  rx896_jump:
    jump $I19
  rx896_done:
    rx896_cur."!cursor_fail"()
    .return (rx896_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "183_1337966799.879_caps"  :subid("651_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1299
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "183_1337966799.879_nfa"  :subid("652_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1299
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 45
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 45
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "O"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postfix:sym<++>"  :subid("184_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2343
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1302
    .lex "self", param_2343
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2344
    .lex "$/", $P2345
    .local string rx900_tgt
    .local int rx900_pos
    .local int rx900_off
    .local int rx900_eos
    .local int rx900_rep
    .local pmc rx900_cur
    .local pmc rx900_curclass
    .local pmc rx900_bstack
    .local pmc rx900_cstack
    (rx900_cur, rx900_tgt, rx900_pos, rx900_curclass, rx900_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx900_cur
    length rx900_eos, rx900_tgt
    eq $I19, 1, rx900_restart
    repr_get_attr_int $I11, self, rx900_curclass, "$!from"
    ne $I11, -1, rxscan901_done
    goto rxscan901_scan
  rxscan901_loop:
    inc rx900_pos
    gt rx900_pos, rx900_eos, rx900_fail
    repr_bind_attr_int rx900_cur, rx900_curclass, "$!from", rx900_pos
  rxscan901_scan:
    nqp_rxmark rx900_bstack, rxscan901_loop, rx900_pos, 0
  rxscan901_done:
    nqp_rxmark rx900_bstack, rxcap902_fail, rx900_pos, 0
    add $I11, rx900_pos, 2
    gt $I11, rx900_eos, rx900_fail
    substr $S10, rx900_tgt, rx900_pos, 2
    ne $S10, ucs4:"++", rx900_fail
    add rx900_pos, 2
    nqp_rxpeek $I19, rx900_bstack, rxcap902_fail
    inc $I19
    set $I11, rx900_bstack[$I19]
    $P11 = rx900_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx900_pos)
    rx900_cstack = rx900_cur."!cursor_capture"($P11, "sym")
    goto rxcap902_done
  rxcap902_fail:
    goto rx900_fail
  rxcap902_done:
    repr_bind_attr_int rx900_cur, rx900_curclass, "$!pos", rx900_pos
    $P11 = rx900_cur."O"("%autoincrement")
    repr_get_attr_int $I11, $P11, rx900_curclass, "$!pos"
    lt $I11, 0, rx900_fail
    nqp_rxmark rx900_bstack, rxsubrule903_pass, -1, 0
  rxsubrule903_pass:
    rx900_cstack = rx900_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx900_pos, $P11, rx900_curclass, "$!pos"
    rx900_cur."!cursor_pass"(rx900_pos, "postfix:sym<++>", 'backtrack'=>1)
    .return (rx900_cur)
  rx900_restart:
    repr_get_attr_obj rx900_cstack, rx900_cur, rx900_curclass, "$!cstack"
  rx900_fail:
    unless rx900_bstack, rx900_done
    pop $I19, rx900_bstack
    if_null rx900_cstack, rx900_cstack_done
    unless rx900_cstack, rx900_cstack_done
    dec $I19
    set $P11, rx900_cstack[$I19]
  rx900_cstack_done:
    pop rx900_rep, rx900_bstack
    pop rx900_pos, rx900_bstack
    pop $I19, rx900_bstack
    lt rx900_pos, -1, rx900_done
    lt rx900_pos, 0, rx900_fail
    eq $I19, 0, rx900_fail
    if_null rx900_cstack, rx900_jump
    elements $I18, rx900_bstack
    le $I18, 0, rx900_cut
    dec $I18
    set $I18, rx900_bstack[$I18]
  rx900_cut:
    assign rx900_cstack, $I18
  rx900_jump:
    jump $I19
  rx900_done:
    rx900_cur."!cursor_fail"()
    .return (rx900_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "184_1337966799.879_caps"  :subid("653_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1302
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "184_1337966799.879_nfa"  :subid("654_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1302
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 43
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 43
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "O"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postfix:sym<-->"  :subid("185_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2349
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1303
    .lex "self", param_2349
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2350
    .lex "$/", $P2351
    .local string rx904_tgt
    .local int rx904_pos
    .local int rx904_off
    .local int rx904_eos
    .local int rx904_rep
    .local pmc rx904_cur
    .local pmc rx904_curclass
    .local pmc rx904_bstack
    .local pmc rx904_cstack
    (rx904_cur, rx904_tgt, rx904_pos, rx904_curclass, rx904_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx904_cur
    length rx904_eos, rx904_tgt
    eq $I19, 1, rx904_restart
    repr_get_attr_int $I11, self, rx904_curclass, "$!from"
    ne $I11, -1, rxscan905_done
    goto rxscan905_scan
  rxscan905_loop:
    inc rx904_pos
    gt rx904_pos, rx904_eos, rx904_fail
    repr_bind_attr_int rx904_cur, rx904_curclass, "$!from", rx904_pos
  rxscan905_scan:
    nqp_rxmark rx904_bstack, rxscan905_loop, rx904_pos, 0
  rxscan905_done:
    nqp_rxmark rx904_bstack, rxcap906_fail, rx904_pos, 0
    add $I11, rx904_pos, 2
    gt $I11, rx904_eos, rx904_fail
    substr $S10, rx904_tgt, rx904_pos, 2
    ne $S10, ucs4:"--", rx904_fail
    add rx904_pos, 2
    nqp_rxpeek $I19, rx904_bstack, rxcap906_fail
    inc $I19
    set $I11, rx904_bstack[$I19]
    $P11 = rx904_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx904_pos)
    rx904_cstack = rx904_cur."!cursor_capture"($P11, "sym")
    goto rxcap906_done
  rxcap906_fail:
    goto rx904_fail
  rxcap906_done:
    repr_bind_attr_int rx904_cur, rx904_curclass, "$!pos", rx904_pos
    $P11 = rx904_cur."O"("%autoincrement")
    repr_get_attr_int $I11, $P11, rx904_curclass, "$!pos"
    lt $I11, 0, rx904_fail
    nqp_rxmark rx904_bstack, rxsubrule907_pass, -1, 0
  rxsubrule907_pass:
    rx904_cstack = rx904_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx904_pos, $P11, rx904_curclass, "$!pos"
    rx904_cur."!cursor_pass"(rx904_pos, "postfix:sym<-->", 'backtrack'=>1)
    .return (rx904_cur)
  rx904_restart:
    repr_get_attr_obj rx904_cstack, rx904_cur, rx904_curclass, "$!cstack"
  rx904_fail:
    unless rx904_bstack, rx904_done
    pop $I19, rx904_bstack
    if_null rx904_cstack, rx904_cstack_done
    unless rx904_cstack, rx904_cstack_done
    dec $I19
    set $P11, rx904_cstack[$I19]
  rx904_cstack_done:
    pop rx904_rep, rx904_bstack
    pop rx904_pos, rx904_bstack
    pop $I19, rx904_bstack
    lt rx904_pos, -1, rx904_done
    lt rx904_pos, 0, rx904_fail
    eq $I19, 0, rx904_fail
    if_null rx904_cstack, rx904_jump
    elements $I18, rx904_bstack
    le $I18, 0, rx904_cut
    dec $I18
    set $I18, rx904_bstack[$I18]
  rx904_cut:
    assign rx904_cstack, $I18
  rx904_jump:
    jump $I19
  rx904_done:
    rx904_cur."!cursor_fail"()
    .return (rx904_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "185_1337966799.879_caps"  :subid("655_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1303
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "185_1337966799.879_nfa"  :subid("656_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1303
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 45
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 45
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "O"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<**>"  :subid("186_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2355
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1305
    .lex "self", param_2355
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2356
    .lex "$/", $P2357
    .local string rx908_tgt
    .local int rx908_pos
    .local int rx908_off
    .local int rx908_eos
    .local int rx908_rep
    .local pmc rx908_cur
    .local pmc rx908_curclass
    .local pmc rx908_bstack
    .local pmc rx908_cstack
    (rx908_cur, rx908_tgt, rx908_pos, rx908_curclass, rx908_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx908_cur
    length rx908_eos, rx908_tgt
    eq $I19, 1, rx908_restart
    repr_get_attr_int $I11, self, rx908_curclass, "$!from"
    ne $I11, -1, rxscan909_done
    goto rxscan909_scan
  rxscan909_loop:
    inc rx908_pos
    gt rx908_pos, rx908_eos, rx908_fail
    repr_bind_attr_int rx908_cur, rx908_curclass, "$!from", rx908_pos
  rxscan909_scan:
    nqp_rxmark rx908_bstack, rxscan909_loop, rx908_pos, 0
  rxscan909_done:
    nqp_rxmark rx908_bstack, rxcap910_fail, rx908_pos, 0
    add $I11, rx908_pos, 2
    gt $I11, rx908_eos, rx908_fail
    substr $S10, rx908_tgt, rx908_pos, 2
    ne $S10, ucs4:"**", rx908_fail
    add rx908_pos, 2
    nqp_rxpeek $I19, rx908_bstack, rxcap910_fail
    inc $I19
    set $I11, rx908_bstack[$I19]
    $P11 = rx908_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx908_pos)
    rx908_cstack = rx908_cur."!cursor_capture"($P11, "sym")
    goto rxcap910_done
  rxcap910_fail:
    goto rx908_fail
  rxcap910_done:
    repr_bind_attr_int rx908_cur, rx908_curclass, "$!pos", rx908_pos
    $P11 = rx908_cur."O"("%exponentiation, :pirop<pow__NNN>")
    repr_get_attr_int $I11, $P11, rx908_curclass, "$!pos"
    lt $I11, 0, rx908_fail
    nqp_rxmark rx908_bstack, rxsubrule911_pass, -1, 0
  rxsubrule911_pass:
    rx908_cstack = rx908_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx908_pos, $P11, rx908_curclass, "$!pos"
    rx908_cur."!cursor_pass"(rx908_pos, "infix:sym<**>", 'backtrack'=>1)
    .return (rx908_cur)
  rx908_restart:
    repr_get_attr_obj rx908_cstack, rx908_cur, rx908_curclass, "$!cstack"
  rx908_fail:
    unless rx908_bstack, rx908_done
    pop $I19, rx908_bstack
    if_null rx908_cstack, rx908_cstack_done
    unless rx908_cstack, rx908_cstack_done
    dec $I19
    set $P11, rx908_cstack[$I19]
  rx908_cstack_done:
    pop rx908_rep, rx908_bstack
    pop rx908_pos, rx908_bstack
    pop $I19, rx908_bstack
    lt rx908_pos, -1, rx908_done
    lt rx908_pos, 0, rx908_fail
    eq $I19, 0, rx908_fail
    if_null rx908_cstack, rx908_jump
    elements $I18, rx908_bstack
    le $I18, 0, rx908_cut
    dec $I18
    set $I18, rx908_bstack[$I18]
  rx908_cut:
    assign rx908_cstack, $I18
  rx908_jump:
    jump $I19
  rx908_done:
    rx908_cur."!cursor_fail"()
    .return (rx908_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "186_1337966799.879_caps"  :subid("657_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1305
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "186_1337966799.879_nfa"  :subid("658_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1305
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 42
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 42
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "O"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<+>"  :subid("187_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2361
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1307
    .lex "self", param_2361
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2362
    .lex "$/", $P2363
    .local string rx912_tgt
    .local int rx912_pos
    .local int rx912_off
    .local int rx912_eos
    .local int rx912_rep
    .local pmc rx912_cur
    .local pmc rx912_curclass
    .local pmc rx912_bstack
    .local pmc rx912_cstack
    (rx912_cur, rx912_tgt, rx912_pos, rx912_curclass, rx912_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx912_cur
    length rx912_eos, rx912_tgt
    eq $I19, 1, rx912_restart
    repr_get_attr_int $I11, self, rx912_curclass, "$!from"
    ne $I11, -1, rxscan913_done
    goto rxscan913_scan
  rxscan913_loop:
    inc rx912_pos
    gt rx912_pos, rx912_eos, rx912_fail
    repr_bind_attr_int rx912_cur, rx912_curclass, "$!from", rx912_pos
  rxscan913_scan:
    nqp_rxmark rx912_bstack, rxscan913_loop, rx912_pos, 0
  rxscan913_done:
    nqp_rxmark rx912_bstack, rxcap914_fail, rx912_pos, 0
    add $I11, rx912_pos, 1
    gt $I11, rx912_eos, rx912_fail
    substr $S10, rx912_tgt, rx912_pos, 1
    ne $S10, ucs4:"+", rx912_fail
    add rx912_pos, 1
    nqp_rxpeek $I19, rx912_bstack, rxcap914_fail
    inc $I19
    set $I11, rx912_bstack[$I19]
    $P11 = rx912_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx912_pos)
    rx912_cstack = rx912_cur."!cursor_capture"($P11, "sym")
    goto rxcap914_done
  rxcap914_fail:
    goto rx912_fail
  rxcap914_done:
    repr_bind_attr_int rx912_cur, rx912_curclass, "$!pos", rx912_pos
    $P11 = rx912_cur."O"("%symbolic_unary, :pirop<set N*>")
    repr_get_attr_int $I11, $P11, rx912_curclass, "$!pos"
    lt $I11, 0, rx912_fail
    nqp_rxmark rx912_bstack, rxsubrule915_pass, -1, 0
  rxsubrule915_pass:
    rx912_cstack = rx912_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx912_pos, $P11, rx912_curclass, "$!pos"
    rx912_cur."!cursor_pass"(rx912_pos, "prefix:sym<+>", 'backtrack'=>1)
    .return (rx912_cur)
  rx912_restart:
    repr_get_attr_obj rx912_cstack, rx912_cur, rx912_curclass, "$!cstack"
  rx912_fail:
    unless rx912_bstack, rx912_done
    pop $I19, rx912_bstack
    if_null rx912_cstack, rx912_cstack_done
    unless rx912_cstack, rx912_cstack_done
    dec $I19
    set $P11, rx912_cstack[$I19]
  rx912_cstack_done:
    pop rx912_rep, rx912_bstack
    pop rx912_pos, rx912_bstack
    pop $I19, rx912_bstack
    lt rx912_pos, -1, rx912_done
    lt rx912_pos, 0, rx912_fail
    eq $I19, 0, rx912_fail
    if_null rx912_cstack, rx912_jump
    elements $I18, rx912_bstack
    le $I18, 0, rx912_cut
    dec $I18
    set $I18, rx912_bstack[$I18]
  rx912_cut:
    assign rx912_cstack, $I18
  rx912_jump:
    jump $I19
  rx912_done:
    rx912_cur."!cursor_fail"()
    .return (rx912_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "187_1337966799.879_caps"  :subid("659_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1307
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "187_1337966799.879_nfa"  :subid("660_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1307
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 43
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "O"
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<~>"  :subid("188_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2367
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1308
    .lex "self", param_2367
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2368
    .lex "$/", $P2369
    .local string rx916_tgt
    .local int rx916_pos
    .local int rx916_off
    .local int rx916_eos
    .local int rx916_rep
    .local pmc rx916_cur
    .local pmc rx916_curclass
    .local pmc rx916_bstack
    .local pmc rx916_cstack
    (rx916_cur, rx916_tgt, rx916_pos, rx916_curclass, rx916_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx916_cur
    length rx916_eos, rx916_tgt
    eq $I19, 1, rx916_restart
    repr_get_attr_int $I11, self, rx916_curclass, "$!from"
    ne $I11, -1, rxscan917_done
    goto rxscan917_scan
  rxscan917_loop:
    inc rx916_pos
    gt rx916_pos, rx916_eos, rx916_fail
    repr_bind_attr_int rx916_cur, rx916_curclass, "$!from", rx916_pos
  rxscan917_scan:
    nqp_rxmark rx916_bstack, rxscan917_loop, rx916_pos, 0
  rxscan917_done:
    nqp_rxmark rx916_bstack, rxcap918_fail, rx916_pos, 0
    add $I11, rx916_pos, 1
    gt $I11, rx916_eos, rx916_fail
    substr $S10, rx916_tgt, rx916_pos, 1
    ne $S10, ucs4:"~", rx916_fail
    add rx916_pos, 1
    nqp_rxpeek $I19, rx916_bstack, rxcap918_fail
    inc $I19
    set $I11, rx916_bstack[$I19]
    $P11 = rx916_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx916_pos)
    rx916_cstack = rx916_cur."!cursor_capture"($P11, "sym")
    goto rxcap918_done
  rxcap918_fail:
    goto rx916_fail
  rxcap918_done:
    repr_bind_attr_int rx916_cur, rx916_curclass, "$!pos", rx916_pos
    $P11 = rx916_cur."O"("%symbolic_unary, :pirop<set S*>")
    repr_get_attr_int $I11, $P11, rx916_curclass, "$!pos"
    lt $I11, 0, rx916_fail
    nqp_rxmark rx916_bstack, rxsubrule919_pass, -1, 0
  rxsubrule919_pass:
    rx916_cstack = rx916_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx916_pos, $P11, rx916_curclass, "$!pos"
    rx916_cur."!cursor_pass"(rx916_pos, "prefix:sym<~>", 'backtrack'=>1)
    .return (rx916_cur)
  rx916_restart:
    repr_get_attr_obj rx916_cstack, rx916_cur, rx916_curclass, "$!cstack"
  rx916_fail:
    unless rx916_bstack, rx916_done
    pop $I19, rx916_bstack
    if_null rx916_cstack, rx916_cstack_done
    unless rx916_cstack, rx916_cstack_done
    dec $I19
    set $P11, rx916_cstack[$I19]
  rx916_cstack_done:
    pop rx916_rep, rx916_bstack
    pop rx916_pos, rx916_bstack
    pop $I19, rx916_bstack
    lt rx916_pos, -1, rx916_done
    lt rx916_pos, 0, rx916_fail
    eq $I19, 0, rx916_fail
    if_null rx916_cstack, rx916_jump
    elements $I18, rx916_bstack
    le $I18, 0, rx916_cut
    dec $I18
    set $I18, rx916_bstack[$I18]
  rx916_cut:
    assign rx916_cstack, $I18
  rx916_jump:
    jump $I19
  rx916_done:
    rx916_cur."!cursor_fail"()
    .return (rx916_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "188_1337966799.879_caps"  :subid("661_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1308
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "188_1337966799.879_nfa"  :subid("662_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1308
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 126
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "O"
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<->"  :subid("189_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2373
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1309
    .lex "self", param_2373
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2374
    .lex "$/", $P2375
    .local string rx920_tgt
    .local int rx920_pos
    .local int rx920_off
    .local int rx920_eos
    .local int rx920_rep
    .local pmc rx920_cur
    .local pmc rx920_curclass
    .local pmc rx920_bstack
    .local pmc rx920_cstack
    (rx920_cur, rx920_tgt, rx920_pos, rx920_curclass, rx920_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx920_cur
    length rx920_eos, rx920_tgt
    eq $I19, 1, rx920_restart
    repr_get_attr_int $I11, self, rx920_curclass, "$!from"
    ne $I11, -1, rxscan921_done
    goto rxscan921_scan
  rxscan921_loop:
    inc rx920_pos
    gt rx920_pos, rx920_eos, rx920_fail
    repr_bind_attr_int rx920_cur, rx920_curclass, "$!from", rx920_pos
  rxscan921_scan:
    nqp_rxmark rx920_bstack, rxscan921_loop, rx920_pos, 0
  rxscan921_done:
    nqp_rxmark rx920_bstack, rxcap922_fail, rx920_pos, 0
    add $I11, rx920_pos, 1
    gt $I11, rx920_eos, rx920_fail
    substr $S10, rx920_tgt, rx920_pos, 1
    ne $S10, ucs4:"-", rx920_fail
    add rx920_pos, 1
    nqp_rxpeek $I19, rx920_bstack, rxcap922_fail
    inc $I19
    set $I11, rx920_bstack[$I19]
    $P11 = rx920_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx920_pos)
    rx920_cstack = rx920_cur."!cursor_capture"($P11, "sym")
    goto rxcap922_done
  rxcap922_fail:
    goto rx920_fail
  rxcap922_done:
    ge rx920_pos, rx920_eos, rx920_fail
    substr $S11, rx920_tgt, rx920_pos, 1
    index $I11, ucs4:">", $S11
    ge $I11, 0, rx920_fail
    repr_bind_attr_int rx920_cur, rx920_curclass, "$!pos", rx920_pos
    $P11 = rx920_cur."number"()
    repr_get_attr_int $I11, $P11, rx920_curclass, "$!pos"
    ge $I11, 0, rx920_fail
    repr_bind_attr_int rx920_cur, rx920_curclass, "$!pos", rx920_pos
    $P11 = rx920_cur."O"("%symbolic_unary, :pirop<neg>")
    repr_get_attr_int $I11, $P11, rx920_curclass, "$!pos"
    lt $I11, 0, rx920_fail
    nqp_rxmark rx920_bstack, rxsubrule923_pass, -1, 0
  rxsubrule923_pass:
    rx920_cstack = rx920_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx920_pos, $P11, rx920_curclass, "$!pos"
    rx920_cur."!cursor_pass"(rx920_pos, "prefix:sym<->", 'backtrack'=>1)
    .return (rx920_cur)
  rx920_restart:
    repr_get_attr_obj rx920_cstack, rx920_cur, rx920_curclass, "$!cstack"
  rx920_fail:
    unless rx920_bstack, rx920_done
    pop $I19, rx920_bstack
    if_null rx920_cstack, rx920_cstack_done
    unless rx920_cstack, rx920_cstack_done
    dec $I19
    set $P11, rx920_cstack[$I19]
  rx920_cstack_done:
    pop rx920_rep, rx920_bstack
    pop rx920_pos, rx920_bstack
    pop $I19, rx920_bstack
    lt rx920_pos, -1, rx920_done
    lt rx920_pos, 0, rx920_fail
    eq $I19, 0, rx920_fail
    if_null rx920_cstack, rx920_jump
    elements $I18, rx920_bstack
    le $I18, 0, rx920_cut
    dec $I18
    set $I18, rx920_bstack[$I18]
  rx920_cut:
    assign rx920_cstack, $I18
  rx920_jump:
    jump $I19
  rx920_done:
    rx920_cur."!cursor_fail"()
    .return (rx920_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "189_1337966799.879_caps"  :subid("663_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1309
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "189_1337966799.879_nfa"  :subid("664_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1309
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 45
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 7
    push $P106, ">"
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 0
    push $P107, 0
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<?>"  :subid("190_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2379
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1310
    .lex "self", param_2379
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2380
    .lex "$/", $P2381
    .local string rx924_tgt
    .local int rx924_pos
    .local int rx924_off
    .local int rx924_eos
    .local int rx924_rep
    .local pmc rx924_cur
    .local pmc rx924_curclass
    .local pmc rx924_bstack
    .local pmc rx924_cstack
    (rx924_cur, rx924_tgt, rx924_pos, rx924_curclass, rx924_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx924_cur
    length rx924_eos, rx924_tgt
    eq $I19, 1, rx924_restart
    repr_get_attr_int $I11, self, rx924_curclass, "$!from"
    ne $I11, -1, rxscan925_done
    goto rxscan925_scan
  rxscan925_loop:
    inc rx924_pos
    gt rx924_pos, rx924_eos, rx924_fail
    repr_bind_attr_int rx924_cur, rx924_curclass, "$!from", rx924_pos
  rxscan925_scan:
    nqp_rxmark rx924_bstack, rxscan925_loop, rx924_pos, 0
  rxscan925_done:
    nqp_rxmark rx924_bstack, rxcap926_fail, rx924_pos, 0
    add $I11, rx924_pos, 1
    gt $I11, rx924_eos, rx924_fail
    substr $S10, rx924_tgt, rx924_pos, 1
    ne $S10, ucs4:"?", rx924_fail
    add rx924_pos, 1
    nqp_rxpeek $I19, rx924_bstack, rxcap926_fail
    inc $I19
    set $I11, rx924_bstack[$I19]
    $P11 = rx924_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx924_pos)
    rx924_cstack = rx924_cur."!cursor_capture"($P11, "sym")
    goto rxcap926_done
  rxcap926_fail:
    goto rx924_fail
  rxcap926_done:
    repr_bind_attr_int rx924_cur, rx924_curclass, "$!pos", rx924_pos
    $P11 = rx924_cur."O"("%symbolic_unary, :pirop<istrue>")
    repr_get_attr_int $I11, $P11, rx924_curclass, "$!pos"
    lt $I11, 0, rx924_fail
    nqp_rxmark rx924_bstack, rxsubrule927_pass, -1, 0
  rxsubrule927_pass:
    rx924_cstack = rx924_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx924_pos, $P11, rx924_curclass, "$!pos"
    rx924_cur."!cursor_pass"(rx924_pos, "prefix:sym<?>", 'backtrack'=>1)
    .return (rx924_cur)
  rx924_restart:
    repr_get_attr_obj rx924_cstack, rx924_cur, rx924_curclass, "$!cstack"
  rx924_fail:
    unless rx924_bstack, rx924_done
    pop $I19, rx924_bstack
    if_null rx924_cstack, rx924_cstack_done
    unless rx924_cstack, rx924_cstack_done
    dec $I19
    set $P11, rx924_cstack[$I19]
  rx924_cstack_done:
    pop rx924_rep, rx924_bstack
    pop rx924_pos, rx924_bstack
    pop $I19, rx924_bstack
    lt rx924_pos, -1, rx924_done
    lt rx924_pos, 0, rx924_fail
    eq $I19, 0, rx924_fail
    if_null rx924_cstack, rx924_jump
    elements $I18, rx924_bstack
    le $I18, 0, rx924_cut
    dec $I18
    set $I18, rx924_bstack[$I18]
  rx924_cut:
    assign rx924_cstack, $I18
  rx924_jump:
    jump $I19
  rx924_done:
    rx924_cur."!cursor_fail"()
    .return (rx924_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "190_1337966799.879_caps"  :subid("665_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1310
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "190_1337966799.879_nfa"  :subid("666_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1310
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 63
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "O"
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<!>"  :subid("191_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2385
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1311
    .lex "self", param_2385
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2386
    .lex "$/", $P2387
    .local string rx928_tgt
    .local int rx928_pos
    .local int rx928_off
    .local int rx928_eos
    .local int rx928_rep
    .local pmc rx928_cur
    .local pmc rx928_curclass
    .local pmc rx928_bstack
    .local pmc rx928_cstack
    (rx928_cur, rx928_tgt, rx928_pos, rx928_curclass, rx928_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx928_cur
    length rx928_eos, rx928_tgt
    eq $I19, 1, rx928_restart
    repr_get_attr_int $I11, self, rx928_curclass, "$!from"
    ne $I11, -1, rxscan929_done
    goto rxscan929_scan
  rxscan929_loop:
    inc rx928_pos
    gt rx928_pos, rx928_eos, rx928_fail
    repr_bind_attr_int rx928_cur, rx928_curclass, "$!from", rx928_pos
  rxscan929_scan:
    nqp_rxmark rx928_bstack, rxscan929_loop, rx928_pos, 0
  rxscan929_done:
    nqp_rxmark rx928_bstack, rxcap930_fail, rx928_pos, 0
    add $I11, rx928_pos, 1
    gt $I11, rx928_eos, rx928_fail
    substr $S10, rx928_tgt, rx928_pos, 1
    ne $S10, ucs4:"!", rx928_fail
    add rx928_pos, 1
    nqp_rxpeek $I19, rx928_bstack, rxcap930_fail
    inc $I19
    set $I11, rx928_bstack[$I19]
    $P11 = rx928_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx928_pos)
    rx928_cstack = rx928_cur."!cursor_capture"($P11, "sym")
    goto rxcap930_done
  rxcap930_fail:
    goto rx928_fail
  rxcap930_done:
    repr_bind_attr_int rx928_cur, rx928_curclass, "$!pos", rx928_pos
    $P11 = rx928_cur."O"("%symbolic_unary, :pirop<isfalse>")
    repr_get_attr_int $I11, $P11, rx928_curclass, "$!pos"
    lt $I11, 0, rx928_fail
    nqp_rxmark rx928_bstack, rxsubrule931_pass, -1, 0
  rxsubrule931_pass:
    rx928_cstack = rx928_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx928_pos, $P11, rx928_curclass, "$!pos"
    rx928_cur."!cursor_pass"(rx928_pos, "prefix:sym<!>", 'backtrack'=>1)
    .return (rx928_cur)
  rx928_restart:
    repr_get_attr_obj rx928_cstack, rx928_cur, rx928_curclass, "$!cstack"
  rx928_fail:
    unless rx928_bstack, rx928_done
    pop $I19, rx928_bstack
    if_null rx928_cstack, rx928_cstack_done
    unless rx928_cstack, rx928_cstack_done
    dec $I19
    set $P11, rx928_cstack[$I19]
  rx928_cstack_done:
    pop rx928_rep, rx928_bstack
    pop rx928_pos, rx928_bstack
    pop $I19, rx928_bstack
    lt rx928_pos, -1, rx928_done
    lt rx928_pos, 0, rx928_fail
    eq $I19, 0, rx928_fail
    if_null rx928_cstack, rx928_jump
    elements $I18, rx928_bstack
    le $I18, 0, rx928_cut
    dec $I18
    set $I18, rx928_bstack[$I18]
  rx928_cut:
    assign rx928_cstack, $I18
  rx928_jump:
    jump $I19
  rx928_done:
    rx928_cur."!cursor_fail"()
    .return (rx928_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "191_1337966799.879_caps"  :subid("667_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1311
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "191_1337966799.879_nfa"  :subid("668_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1311
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 33
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "O"
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<|>"  :subid("192_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2391
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1312
    .lex "self", param_2391
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2392
    .lex "$/", $P2393
    .local string rx932_tgt
    .local int rx932_pos
    .local int rx932_off
    .local int rx932_eos
    .local int rx932_rep
    .local pmc rx932_cur
    .local pmc rx932_curclass
    .local pmc rx932_bstack
    .local pmc rx932_cstack
    (rx932_cur, rx932_tgt, rx932_pos, rx932_curclass, rx932_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx932_cur
    length rx932_eos, rx932_tgt
    eq $I19, 1, rx932_restart
    repr_get_attr_int $I11, self, rx932_curclass, "$!from"
    ne $I11, -1, rxscan933_done
    goto rxscan933_scan
  rxscan933_loop:
    inc rx932_pos
    gt rx932_pos, rx932_eos, rx932_fail
    repr_bind_attr_int rx932_cur, rx932_curclass, "$!from", rx932_pos
  rxscan933_scan:
    nqp_rxmark rx932_bstack, rxscan933_loop, rx932_pos, 0
  rxscan933_done:
    nqp_rxmark rx932_bstack, rxcap934_fail, rx932_pos, 0
    add $I11, rx932_pos, 1
    gt $I11, rx932_eos, rx932_fail
    substr $S10, rx932_tgt, rx932_pos, 1
    ne $S10, ucs4:"|", rx932_fail
    add rx932_pos, 1
    nqp_rxpeek $I19, rx932_bstack, rxcap934_fail
    inc $I19
    set $I11, rx932_bstack[$I19]
    $P11 = rx932_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx932_pos)
    rx932_cstack = rx932_cur."!cursor_capture"($P11, "sym")
    goto rxcap934_done
  rxcap934_fail:
    goto rx932_fail
  rxcap934_done:
    repr_bind_attr_int rx932_cur, rx932_curclass, "$!pos", rx932_pos
    $P11 = rx932_cur."O"("%symbolic_unary")
    repr_get_attr_int $I11, $P11, rx932_curclass, "$!pos"
    lt $I11, 0, rx932_fail
    nqp_rxmark rx932_bstack, rxsubrule935_pass, -1, 0
  rxsubrule935_pass:
    rx932_cstack = rx932_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx932_pos, $P11, rx932_curclass, "$!pos"
    rx932_cur."!cursor_pass"(rx932_pos, "prefix:sym<|>", 'backtrack'=>1)
    .return (rx932_cur)
  rx932_restart:
    repr_get_attr_obj rx932_cstack, rx932_cur, rx932_curclass, "$!cstack"
  rx932_fail:
    unless rx932_bstack, rx932_done
    pop $I19, rx932_bstack
    if_null rx932_cstack, rx932_cstack_done
    unless rx932_cstack, rx932_cstack_done
    dec $I19
    set $P11, rx932_cstack[$I19]
  rx932_cstack_done:
    pop rx932_rep, rx932_bstack
    pop rx932_pos, rx932_bstack
    pop $I19, rx932_bstack
    lt rx932_pos, -1, rx932_done
    lt rx932_pos, 0, rx932_fail
    eq $I19, 0, rx932_fail
    if_null rx932_cstack, rx932_jump
    elements $I18, rx932_bstack
    le $I18, 0, rx932_cut
    dec $I18
    set $I18, rx932_bstack[$I18]
  rx932_cut:
    assign rx932_cstack, $I18
  rx932_jump:
    jump $I19
  rx932_done:
    rx932_cur."!cursor_fail"()
    .return (rx932_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "192_1337966799.879_caps"  :subid("669_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1312
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "192_1337966799.879_nfa"  :subid("670_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1312
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 124
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "O"
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<*>"  :subid("193_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2397
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1314
    .lex "self", param_2397
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2398
    .lex "$/", $P2399
    .local string rx936_tgt
    .local int rx936_pos
    .local int rx936_off
    .local int rx936_eos
    .local int rx936_rep
    .local pmc rx936_cur
    .local pmc rx936_curclass
    .local pmc rx936_bstack
    .local pmc rx936_cstack
    (rx936_cur, rx936_tgt, rx936_pos, rx936_curclass, rx936_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx936_cur
    length rx936_eos, rx936_tgt
    eq $I19, 1, rx936_restart
    repr_get_attr_int $I11, self, rx936_curclass, "$!from"
    ne $I11, -1, rxscan937_done
    goto rxscan937_scan
  rxscan937_loop:
    inc rx936_pos
    gt rx936_pos, rx936_eos, rx936_fail
    repr_bind_attr_int rx936_cur, rx936_curclass, "$!from", rx936_pos
  rxscan937_scan:
    nqp_rxmark rx936_bstack, rxscan937_loop, rx936_pos, 0
  rxscan937_done:
    nqp_rxmark rx936_bstack, rxcap938_fail, rx936_pos, 0
    add $I11, rx936_pos, 1
    gt $I11, rx936_eos, rx936_fail
    substr $S10, rx936_tgt, rx936_pos, 1
    ne $S10, ucs4:"*", rx936_fail
    add rx936_pos, 1
    nqp_rxpeek $I19, rx936_bstack, rxcap938_fail
    inc $I19
    set $I11, rx936_bstack[$I19]
    $P11 = rx936_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx936_pos)
    rx936_cstack = rx936_cur."!cursor_capture"($P11, "sym")
    goto rxcap938_done
  rxcap938_fail:
    goto rx936_fail
  rxcap938_done:
    repr_bind_attr_int rx936_cur, rx936_curclass, "$!pos", rx936_pos
    $P11 = rx936_cur."O"("%multiplicative, :pirop<mul>")
    repr_get_attr_int $I11, $P11, rx936_curclass, "$!pos"
    lt $I11, 0, rx936_fail
    nqp_rxmark rx936_bstack, rxsubrule939_pass, -1, 0
  rxsubrule939_pass:
    rx936_cstack = rx936_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx936_pos, $P11, rx936_curclass, "$!pos"
    rx936_cur."!cursor_pass"(rx936_pos, "infix:sym<*>", 'backtrack'=>1)
    .return (rx936_cur)
  rx936_restart:
    repr_get_attr_obj rx936_cstack, rx936_cur, rx936_curclass, "$!cstack"
  rx936_fail:
    unless rx936_bstack, rx936_done
    pop $I19, rx936_bstack
    if_null rx936_cstack, rx936_cstack_done
    unless rx936_cstack, rx936_cstack_done
    dec $I19
    set $P11, rx936_cstack[$I19]
  rx936_cstack_done:
    pop rx936_rep, rx936_bstack
    pop rx936_pos, rx936_bstack
    pop $I19, rx936_bstack
    lt rx936_pos, -1, rx936_done
    lt rx936_pos, 0, rx936_fail
    eq $I19, 0, rx936_fail
    if_null rx936_cstack, rx936_jump
    elements $I18, rx936_bstack
    le $I18, 0, rx936_cut
    dec $I18
    set $I18, rx936_bstack[$I18]
  rx936_cut:
    assign rx936_cstack, $I18
  rx936_jump:
    jump $I19
  rx936_done:
    rx936_cur."!cursor_fail"()
    .return (rx936_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "193_1337966799.879_caps"  :subid("671_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1314
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "193_1337966799.879_nfa"  :subid("672_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1314
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 42
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "O"
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym</>"  :subid("194_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2403
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1315
    .lex "self", param_2403
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2404
    .lex "$/", $P2405
    .local string rx940_tgt
    .local int rx940_pos
    .local int rx940_off
    .local int rx940_eos
    .local int rx940_rep
    .local pmc rx940_cur
    .local pmc rx940_curclass
    .local pmc rx940_bstack
    .local pmc rx940_cstack
    (rx940_cur, rx940_tgt, rx940_pos, rx940_curclass, rx940_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx940_cur
    length rx940_eos, rx940_tgt
    eq $I19, 1, rx940_restart
    repr_get_attr_int $I11, self, rx940_curclass, "$!from"
    ne $I11, -1, rxscan941_done
    goto rxscan941_scan
  rxscan941_loop:
    inc rx940_pos
    gt rx940_pos, rx940_eos, rx940_fail
    repr_bind_attr_int rx940_cur, rx940_curclass, "$!from", rx940_pos
  rxscan941_scan:
    nqp_rxmark rx940_bstack, rxscan941_loop, rx940_pos, 0
  rxscan941_done:
    nqp_rxmark rx940_bstack, rxcap942_fail, rx940_pos, 0
    add $I11, rx940_pos, 1
    gt $I11, rx940_eos, rx940_fail
    substr $S10, rx940_tgt, rx940_pos, 1
    ne $S10, ucs4:"/", rx940_fail
    add rx940_pos, 1
    nqp_rxpeek $I19, rx940_bstack, rxcap942_fail
    inc $I19
    set $I11, rx940_bstack[$I19]
    $P11 = rx940_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx940_pos)
    rx940_cstack = rx940_cur."!cursor_capture"($P11, "sym")
    goto rxcap942_done
  rxcap942_fail:
    goto rx940_fail
  rxcap942_done:
    repr_bind_attr_int rx940_cur, rx940_curclass, "$!pos", rx940_pos
    $P11 = rx940_cur."O"("%multiplicative, :pirop<div>")
    repr_get_attr_int $I11, $P11, rx940_curclass, "$!pos"
    lt $I11, 0, rx940_fail
    nqp_rxmark rx940_bstack, rxsubrule943_pass, -1, 0
  rxsubrule943_pass:
    rx940_cstack = rx940_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx940_pos, $P11, rx940_curclass, "$!pos"
    rx940_cur."!cursor_pass"(rx940_pos, "infix:sym</>", 'backtrack'=>1)
    .return (rx940_cur)
  rx940_restart:
    repr_get_attr_obj rx940_cstack, rx940_cur, rx940_curclass, "$!cstack"
  rx940_fail:
    unless rx940_bstack, rx940_done
    pop $I19, rx940_bstack
    if_null rx940_cstack, rx940_cstack_done
    unless rx940_cstack, rx940_cstack_done
    dec $I19
    set $P11, rx940_cstack[$I19]
  rx940_cstack_done:
    pop rx940_rep, rx940_bstack
    pop rx940_pos, rx940_bstack
    pop $I19, rx940_bstack
    lt rx940_pos, -1, rx940_done
    lt rx940_pos, 0, rx940_fail
    eq $I19, 0, rx940_fail
    if_null rx940_cstack, rx940_jump
    elements $I18, rx940_bstack
    le $I18, 0, rx940_cut
    dec $I18
    set $I18, rx940_bstack[$I18]
  rx940_cut:
    assign rx940_cstack, $I18
  rx940_jump:
    jump $I19
  rx940_done:
    rx940_cur."!cursor_fail"()
    .return (rx940_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "194_1337966799.879_caps"  :subid("673_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1315
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "194_1337966799.879_nfa"  :subid("674_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1315
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 47
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "O"
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<%>"  :subid("195_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2409
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1316
    .lex "self", param_2409
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2410
    .lex "$/", $P2411
    .local string rx944_tgt
    .local int rx944_pos
    .local int rx944_off
    .local int rx944_eos
    .local int rx944_rep
    .local pmc rx944_cur
    .local pmc rx944_curclass
    .local pmc rx944_bstack
    .local pmc rx944_cstack
    (rx944_cur, rx944_tgt, rx944_pos, rx944_curclass, rx944_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx944_cur
    length rx944_eos, rx944_tgt
    eq $I19, 1, rx944_restart
    repr_get_attr_int $I11, self, rx944_curclass, "$!from"
    ne $I11, -1, rxscan945_done
    goto rxscan945_scan
  rxscan945_loop:
    inc rx944_pos
    gt rx944_pos, rx944_eos, rx944_fail
    repr_bind_attr_int rx944_cur, rx944_curclass, "$!from", rx944_pos
  rxscan945_scan:
    nqp_rxmark rx944_bstack, rxscan945_loop, rx944_pos, 0
  rxscan945_done:
    nqp_rxmark rx944_bstack, rxcap946_fail, rx944_pos, 0
    add $I11, rx944_pos, 1
    gt $I11, rx944_eos, rx944_fail
    substr $S10, rx944_tgt, rx944_pos, 1
    ne $S10, ucs4:"%", rx944_fail
    add rx944_pos, 1
    nqp_rxpeek $I19, rx944_bstack, rxcap946_fail
    inc $I19
    set $I11, rx944_bstack[$I19]
    $P11 = rx944_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx944_pos)
    rx944_cstack = rx944_cur."!cursor_capture"($P11, "sym")
    goto rxcap946_done
  rxcap946_fail:
    goto rx944_fail
  rxcap946_done:
    repr_bind_attr_int rx944_cur, rx944_curclass, "$!pos", rx944_pos
    $P11 = rx944_cur."O"("%multiplicative, :pirop<mod>")
    repr_get_attr_int $I11, $P11, rx944_curclass, "$!pos"
    lt $I11, 0, rx944_fail
    nqp_rxmark rx944_bstack, rxsubrule947_pass, -1, 0
  rxsubrule947_pass:
    rx944_cstack = rx944_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx944_pos, $P11, rx944_curclass, "$!pos"
    rx944_cur."!cursor_pass"(rx944_pos, "infix:sym<%>", 'backtrack'=>1)
    .return (rx944_cur)
  rx944_restart:
    repr_get_attr_obj rx944_cstack, rx944_cur, rx944_curclass, "$!cstack"
  rx944_fail:
    unless rx944_bstack, rx944_done
    pop $I19, rx944_bstack
    if_null rx944_cstack, rx944_cstack_done
    unless rx944_cstack, rx944_cstack_done
    dec $I19
    set $P11, rx944_cstack[$I19]
  rx944_cstack_done:
    pop rx944_rep, rx944_bstack
    pop rx944_pos, rx944_bstack
    pop $I19, rx944_bstack
    lt rx944_pos, -1, rx944_done
    lt rx944_pos, 0, rx944_fail
    eq $I19, 0, rx944_fail
    if_null rx944_cstack, rx944_jump
    elements $I18, rx944_bstack
    le $I18, 0, rx944_cut
    dec $I18
    set $I18, rx944_bstack[$I18]
  rx944_cut:
    assign rx944_cstack, $I18
  rx944_jump:
    jump $I19
  rx944_done:
    rx944_cur."!cursor_fail"()
    .return (rx944_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "195_1337966799.879_caps"  :subid("675_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1316
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "195_1337966799.879_nfa"  :subid("676_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1316
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 37
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "O"
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<+&>"  :subid("196_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2415
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1317
    .lex "self", param_2415
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2416
    .lex "$/", $P2417
    .local string rx948_tgt
    .local int rx948_pos
    .local int rx948_off
    .local int rx948_eos
    .local int rx948_rep
    .local pmc rx948_cur
    .local pmc rx948_curclass
    .local pmc rx948_bstack
    .local pmc rx948_cstack
    (rx948_cur, rx948_tgt, rx948_pos, rx948_curclass, rx948_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx948_cur
    length rx948_eos, rx948_tgt
    eq $I19, 1, rx948_restart
    repr_get_attr_int $I11, self, rx948_curclass, "$!from"
    ne $I11, -1, rxscan949_done
    goto rxscan949_scan
  rxscan949_loop:
    inc rx948_pos
    gt rx948_pos, rx948_eos, rx948_fail
    repr_bind_attr_int rx948_cur, rx948_curclass, "$!from", rx948_pos
  rxscan949_scan:
    nqp_rxmark rx948_bstack, rxscan949_loop, rx948_pos, 0
  rxscan949_done:
    nqp_rxmark rx948_bstack, rxcap950_fail, rx948_pos, 0
    add $I11, rx948_pos, 2
    gt $I11, rx948_eos, rx948_fail
    substr $S10, rx948_tgt, rx948_pos, 2
    ne $S10, ucs4:"+&", rx948_fail
    add rx948_pos, 2
    nqp_rxpeek $I19, rx948_bstack, rxcap950_fail
    inc $I19
    set $I11, rx948_bstack[$I19]
    $P11 = rx948_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx948_pos)
    rx948_cstack = rx948_cur."!cursor_capture"($P11, "sym")
    goto rxcap950_done
  rxcap950_fail:
    goto rx948_fail
  rxcap950_done:
    repr_bind_attr_int rx948_cur, rx948_curclass, "$!pos", rx948_pos
    $P11 = rx948_cur."O"("%multiplicative, :pirop<band III>")
    repr_get_attr_int $I11, $P11, rx948_curclass, "$!pos"
    lt $I11, 0, rx948_fail
    nqp_rxmark rx948_bstack, rxsubrule951_pass, -1, 0
  rxsubrule951_pass:
    rx948_cstack = rx948_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx948_pos, $P11, rx948_curclass, "$!pos"
    rx948_cur."!cursor_pass"(rx948_pos, "infix:sym<+&>", 'backtrack'=>1)
    .return (rx948_cur)
  rx948_restart:
    repr_get_attr_obj rx948_cstack, rx948_cur, rx948_curclass, "$!cstack"
  rx948_fail:
    unless rx948_bstack, rx948_done
    pop $I19, rx948_bstack
    if_null rx948_cstack, rx948_cstack_done
    unless rx948_cstack, rx948_cstack_done
    dec $I19
    set $P11, rx948_cstack[$I19]
  rx948_cstack_done:
    pop rx948_rep, rx948_bstack
    pop rx948_pos, rx948_bstack
    pop $I19, rx948_bstack
    lt rx948_pos, -1, rx948_done
    lt rx948_pos, 0, rx948_fail
    eq $I19, 0, rx948_fail
    if_null rx948_cstack, rx948_jump
    elements $I18, rx948_bstack
    le $I18, 0, rx948_cut
    dec $I18
    set $I18, rx948_bstack[$I18]
  rx948_cut:
    assign rx948_cstack, $I18
  rx948_jump:
    jump $I19
  rx948_done:
    rx948_cur."!cursor_fail"()
    .return (rx948_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "196_1337966799.879_caps"  :subid("677_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1317
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "196_1337966799.879_nfa"  :subid("678_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1317
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 43
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 38
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "O"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<+>"  :subid("197_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2421
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1319
    .lex "self", param_2421
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2422
    .lex "$/", $P2423
    .local string rx952_tgt
    .local int rx952_pos
    .local int rx952_off
    .local int rx952_eos
    .local int rx952_rep
    .local pmc rx952_cur
    .local pmc rx952_curclass
    .local pmc rx952_bstack
    .local pmc rx952_cstack
    (rx952_cur, rx952_tgt, rx952_pos, rx952_curclass, rx952_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx952_cur
    length rx952_eos, rx952_tgt
    eq $I19, 1, rx952_restart
    repr_get_attr_int $I11, self, rx952_curclass, "$!from"
    ne $I11, -1, rxscan953_done
    goto rxscan953_scan
  rxscan953_loop:
    inc rx952_pos
    gt rx952_pos, rx952_eos, rx952_fail
    repr_bind_attr_int rx952_cur, rx952_curclass, "$!from", rx952_pos
  rxscan953_scan:
    nqp_rxmark rx952_bstack, rxscan953_loop, rx952_pos, 0
  rxscan953_done:
    nqp_rxmark rx952_bstack, rxcap954_fail, rx952_pos, 0
    add $I11, rx952_pos, 1
    gt $I11, rx952_eos, rx952_fail
    substr $S10, rx952_tgt, rx952_pos, 1
    ne $S10, ucs4:"+", rx952_fail
    add rx952_pos, 1
    nqp_rxpeek $I19, rx952_bstack, rxcap954_fail
    inc $I19
    set $I11, rx952_bstack[$I19]
    $P11 = rx952_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx952_pos)
    rx952_cstack = rx952_cur."!cursor_capture"($P11, "sym")
    goto rxcap954_done
  rxcap954_fail:
    goto rx952_fail
  rxcap954_done:
    repr_bind_attr_int rx952_cur, rx952_curclass, "$!pos", rx952_pos
    $P11 = rx952_cur."O"("%additive, :pirop<add>")
    repr_get_attr_int $I11, $P11, rx952_curclass, "$!pos"
    lt $I11, 0, rx952_fail
    nqp_rxmark rx952_bstack, rxsubrule955_pass, -1, 0
  rxsubrule955_pass:
    rx952_cstack = rx952_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx952_pos, $P11, rx952_curclass, "$!pos"
    rx952_cur."!cursor_pass"(rx952_pos, "infix:sym<+>", 'backtrack'=>1)
    .return (rx952_cur)
  rx952_restart:
    repr_get_attr_obj rx952_cstack, rx952_cur, rx952_curclass, "$!cstack"
  rx952_fail:
    unless rx952_bstack, rx952_done
    pop $I19, rx952_bstack
    if_null rx952_cstack, rx952_cstack_done
    unless rx952_cstack, rx952_cstack_done
    dec $I19
    set $P11, rx952_cstack[$I19]
  rx952_cstack_done:
    pop rx952_rep, rx952_bstack
    pop rx952_pos, rx952_bstack
    pop $I19, rx952_bstack
    lt rx952_pos, -1, rx952_done
    lt rx952_pos, 0, rx952_fail
    eq $I19, 0, rx952_fail
    if_null rx952_cstack, rx952_jump
    elements $I18, rx952_bstack
    le $I18, 0, rx952_cut
    dec $I18
    set $I18, rx952_bstack[$I18]
  rx952_cut:
    assign rx952_cstack, $I18
  rx952_jump:
    jump $I19
  rx952_done:
    rx952_cur."!cursor_fail"()
    .return (rx952_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "197_1337966799.879_caps"  :subid("679_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1319
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "197_1337966799.879_nfa"  :subid("680_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1319
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 43
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "O"
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<->"  :subid("198_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2427
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1320
    .lex "self", param_2427
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2428
    .lex "$/", $P2429
    .local string rx956_tgt
    .local int rx956_pos
    .local int rx956_off
    .local int rx956_eos
    .local int rx956_rep
    .local pmc rx956_cur
    .local pmc rx956_curclass
    .local pmc rx956_bstack
    .local pmc rx956_cstack
    (rx956_cur, rx956_tgt, rx956_pos, rx956_curclass, rx956_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx956_cur
    length rx956_eos, rx956_tgt
    eq $I19, 1, rx956_restart
    repr_get_attr_int $I11, self, rx956_curclass, "$!from"
    ne $I11, -1, rxscan957_done
    goto rxscan957_scan
  rxscan957_loop:
    inc rx956_pos
    gt rx956_pos, rx956_eos, rx956_fail
    repr_bind_attr_int rx956_cur, rx956_curclass, "$!from", rx956_pos
  rxscan957_scan:
    nqp_rxmark rx956_bstack, rxscan957_loop, rx956_pos, 0
  rxscan957_done:
    nqp_rxmark rx956_bstack, rxcap958_fail, rx956_pos, 0
    add $I11, rx956_pos, 1
    gt $I11, rx956_eos, rx956_fail
    substr $S10, rx956_tgt, rx956_pos, 1
    ne $S10, ucs4:"-", rx956_fail
    add rx956_pos, 1
    nqp_rxpeek $I19, rx956_bstack, rxcap958_fail
    inc $I19
    set $I11, rx956_bstack[$I19]
    $P11 = rx956_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx956_pos)
    rx956_cstack = rx956_cur."!cursor_capture"($P11, "sym")
    goto rxcap958_done
  rxcap958_fail:
    goto rx956_fail
  rxcap958_done:
    repr_bind_attr_int rx956_cur, rx956_curclass, "$!pos", rx956_pos
    $P11 = rx956_cur."O"("%additive, :pirop<sub>")
    repr_get_attr_int $I11, $P11, rx956_curclass, "$!pos"
    lt $I11, 0, rx956_fail
    nqp_rxmark rx956_bstack, rxsubrule959_pass, -1, 0
  rxsubrule959_pass:
    rx956_cstack = rx956_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx956_pos, $P11, rx956_curclass, "$!pos"
    rx956_cur."!cursor_pass"(rx956_pos, "infix:sym<->", 'backtrack'=>1)
    .return (rx956_cur)
  rx956_restart:
    repr_get_attr_obj rx956_cstack, rx956_cur, rx956_curclass, "$!cstack"
  rx956_fail:
    unless rx956_bstack, rx956_done
    pop $I19, rx956_bstack
    if_null rx956_cstack, rx956_cstack_done
    unless rx956_cstack, rx956_cstack_done
    dec $I19
    set $P11, rx956_cstack[$I19]
  rx956_cstack_done:
    pop rx956_rep, rx956_bstack
    pop rx956_pos, rx956_bstack
    pop $I19, rx956_bstack
    lt rx956_pos, -1, rx956_done
    lt rx956_pos, 0, rx956_fail
    eq $I19, 0, rx956_fail
    if_null rx956_cstack, rx956_jump
    elements $I18, rx956_bstack
    le $I18, 0, rx956_cut
    dec $I18
    set $I18, rx956_bstack[$I18]
  rx956_cut:
    assign rx956_cstack, $I18
  rx956_jump:
    jump $I19
  rx956_done:
    rx956_cur."!cursor_fail"()
    .return (rx956_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "198_1337966799.879_caps"  :subid("681_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1320
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "198_1337966799.879_nfa"  :subid("682_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1320
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 45
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "O"
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<+|>"  :subid("199_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2433
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1321
    .lex "self", param_2433
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2434
    .lex "$/", $P2435
    .local string rx960_tgt
    .local int rx960_pos
    .local int rx960_off
    .local int rx960_eos
    .local int rx960_rep
    .local pmc rx960_cur
    .local pmc rx960_curclass
    .local pmc rx960_bstack
    .local pmc rx960_cstack
    (rx960_cur, rx960_tgt, rx960_pos, rx960_curclass, rx960_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx960_cur
    length rx960_eos, rx960_tgt
    eq $I19, 1, rx960_restart
    repr_get_attr_int $I11, self, rx960_curclass, "$!from"
    ne $I11, -1, rxscan961_done
    goto rxscan961_scan
  rxscan961_loop:
    inc rx960_pos
    gt rx960_pos, rx960_eos, rx960_fail
    repr_bind_attr_int rx960_cur, rx960_curclass, "$!from", rx960_pos
  rxscan961_scan:
    nqp_rxmark rx960_bstack, rxscan961_loop, rx960_pos, 0
  rxscan961_done:
    nqp_rxmark rx960_bstack, rxcap962_fail, rx960_pos, 0
    add $I11, rx960_pos, 2
    gt $I11, rx960_eos, rx960_fail
    substr $S10, rx960_tgt, rx960_pos, 2
    ne $S10, ucs4:"+|", rx960_fail
    add rx960_pos, 2
    nqp_rxpeek $I19, rx960_bstack, rxcap962_fail
    inc $I19
    set $I11, rx960_bstack[$I19]
    $P11 = rx960_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx960_pos)
    rx960_cstack = rx960_cur."!cursor_capture"($P11, "sym")
    goto rxcap962_done
  rxcap962_fail:
    goto rx960_fail
  rxcap962_done:
    repr_bind_attr_int rx960_cur, rx960_curclass, "$!pos", rx960_pos
    $P11 = rx960_cur."O"("%additive, :pirop<bor III>")
    repr_get_attr_int $I11, $P11, rx960_curclass, "$!pos"
    lt $I11, 0, rx960_fail
    nqp_rxmark rx960_bstack, rxsubrule963_pass, -1, 0
  rxsubrule963_pass:
    rx960_cstack = rx960_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx960_pos, $P11, rx960_curclass, "$!pos"
    rx960_cur."!cursor_pass"(rx960_pos, "infix:sym<+|>", 'backtrack'=>1)
    .return (rx960_cur)
  rx960_restart:
    repr_get_attr_obj rx960_cstack, rx960_cur, rx960_curclass, "$!cstack"
  rx960_fail:
    unless rx960_bstack, rx960_done
    pop $I19, rx960_bstack
    if_null rx960_cstack, rx960_cstack_done
    unless rx960_cstack, rx960_cstack_done
    dec $I19
    set $P11, rx960_cstack[$I19]
  rx960_cstack_done:
    pop rx960_rep, rx960_bstack
    pop rx960_pos, rx960_bstack
    pop $I19, rx960_bstack
    lt rx960_pos, -1, rx960_done
    lt rx960_pos, 0, rx960_fail
    eq $I19, 0, rx960_fail
    if_null rx960_cstack, rx960_jump
    elements $I18, rx960_bstack
    le $I18, 0, rx960_cut
    dec $I18
    set $I18, rx960_bstack[$I18]
  rx960_cut:
    assign rx960_cstack, $I18
  rx960_jump:
    jump $I19
  rx960_done:
    rx960_cur."!cursor_fail"()
    .return (rx960_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "199_1337966799.879_caps"  :subid("683_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1321
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "199_1337966799.879_nfa"  :subid("684_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1321
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 43
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 124
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "O"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<+^>"  :subid("200_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2439
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1322
    .lex "self", param_2439
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2440
    .lex "$/", $P2441
    .local string rx964_tgt
    .local int rx964_pos
    .local int rx964_off
    .local int rx964_eos
    .local int rx964_rep
    .local pmc rx964_cur
    .local pmc rx964_curclass
    .local pmc rx964_bstack
    .local pmc rx964_cstack
    (rx964_cur, rx964_tgt, rx964_pos, rx964_curclass, rx964_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx964_cur
    length rx964_eos, rx964_tgt
    eq $I19, 1, rx964_restart
    repr_get_attr_int $I11, self, rx964_curclass, "$!from"
    ne $I11, -1, rxscan965_done
    goto rxscan965_scan
  rxscan965_loop:
    inc rx964_pos
    gt rx964_pos, rx964_eos, rx964_fail
    repr_bind_attr_int rx964_cur, rx964_curclass, "$!from", rx964_pos
  rxscan965_scan:
    nqp_rxmark rx964_bstack, rxscan965_loop, rx964_pos, 0
  rxscan965_done:
    nqp_rxmark rx964_bstack, rxcap966_fail, rx964_pos, 0
    add $I11, rx964_pos, 2
    gt $I11, rx964_eos, rx964_fail
    substr $S10, rx964_tgt, rx964_pos, 2
    ne $S10, ucs4:"+^", rx964_fail
    add rx964_pos, 2
    nqp_rxpeek $I19, rx964_bstack, rxcap966_fail
    inc $I19
    set $I11, rx964_bstack[$I19]
    $P11 = rx964_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx964_pos)
    rx964_cstack = rx964_cur."!cursor_capture"($P11, "sym")
    goto rxcap966_done
  rxcap966_fail:
    goto rx964_fail
  rxcap966_done:
    repr_bind_attr_int rx964_cur, rx964_curclass, "$!pos", rx964_pos
    $P11 = rx964_cur."O"("%additive, :pirop<bxor III>")
    repr_get_attr_int $I11, $P11, rx964_curclass, "$!pos"
    lt $I11, 0, rx964_fail
    nqp_rxmark rx964_bstack, rxsubrule967_pass, -1, 0
  rxsubrule967_pass:
    rx964_cstack = rx964_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx964_pos, $P11, rx964_curclass, "$!pos"
    rx964_cur."!cursor_pass"(rx964_pos, "infix:sym<+^>", 'backtrack'=>1)
    .return (rx964_cur)
  rx964_restart:
    repr_get_attr_obj rx964_cstack, rx964_cur, rx964_curclass, "$!cstack"
  rx964_fail:
    unless rx964_bstack, rx964_done
    pop $I19, rx964_bstack
    if_null rx964_cstack, rx964_cstack_done
    unless rx964_cstack, rx964_cstack_done
    dec $I19
    set $P11, rx964_cstack[$I19]
  rx964_cstack_done:
    pop rx964_rep, rx964_bstack
    pop rx964_pos, rx964_bstack
    pop $I19, rx964_bstack
    lt rx964_pos, -1, rx964_done
    lt rx964_pos, 0, rx964_fail
    eq $I19, 0, rx964_fail
    if_null rx964_cstack, rx964_jump
    elements $I18, rx964_bstack
    le $I18, 0, rx964_cut
    dec $I18
    set $I18, rx964_bstack[$I18]
  rx964_cut:
    assign rx964_cstack, $I18
  rx964_jump:
    jump $I19
  rx964_done:
    rx964_cur."!cursor_fail"()
    .return (rx964_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "200_1337966799.879_caps"  :subid("685_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1322
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "200_1337966799.879_nfa"  :subid("686_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1322
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 43
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 94
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "O"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<~>"  :subid("201_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2445
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1324
    .lex "self", param_2445
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2446
    .lex "$/", $P2447
    .local string rx968_tgt
    .local int rx968_pos
    .local int rx968_off
    .local int rx968_eos
    .local int rx968_rep
    .local pmc rx968_cur
    .local pmc rx968_curclass
    .local pmc rx968_bstack
    .local pmc rx968_cstack
    (rx968_cur, rx968_tgt, rx968_pos, rx968_curclass, rx968_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx968_cur
    length rx968_eos, rx968_tgt
    eq $I19, 1, rx968_restart
    repr_get_attr_int $I11, self, rx968_curclass, "$!from"
    ne $I11, -1, rxscan969_done
    goto rxscan969_scan
  rxscan969_loop:
    inc rx968_pos
    gt rx968_pos, rx968_eos, rx968_fail
    repr_bind_attr_int rx968_cur, rx968_curclass, "$!from", rx968_pos
  rxscan969_scan:
    nqp_rxmark rx968_bstack, rxscan969_loop, rx968_pos, 0
  rxscan969_done:
    nqp_rxmark rx968_bstack, rxcap970_fail, rx968_pos, 0
    add $I11, rx968_pos, 1
    gt $I11, rx968_eos, rx968_fail
    substr $S10, rx968_tgt, rx968_pos, 1
    ne $S10, ucs4:"~", rx968_fail
    add rx968_pos, 1
    nqp_rxpeek $I19, rx968_bstack, rxcap970_fail
    inc $I19
    set $I11, rx968_bstack[$I19]
    $P11 = rx968_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx968_pos)
    rx968_cstack = rx968_cur."!cursor_capture"($P11, "sym")
    goto rxcap970_done
  rxcap970_fail:
    goto rx968_fail
  rxcap970_done:
    repr_bind_attr_int rx968_cur, rx968_curclass, "$!pos", rx968_pos
    $P11 = rx968_cur."O"("%concatenation , :pirop<concat>")
    repr_get_attr_int $I11, $P11, rx968_curclass, "$!pos"
    lt $I11, 0, rx968_fail
    nqp_rxmark rx968_bstack, rxsubrule971_pass, -1, 0
  rxsubrule971_pass:
    rx968_cstack = rx968_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx968_pos, $P11, rx968_curclass, "$!pos"
    rx968_cur."!cursor_pass"(rx968_pos, "infix:sym<~>", 'backtrack'=>1)
    .return (rx968_cur)
  rx968_restart:
    repr_get_attr_obj rx968_cstack, rx968_cur, rx968_curclass, "$!cstack"
  rx968_fail:
    unless rx968_bstack, rx968_done
    pop $I19, rx968_bstack
    if_null rx968_cstack, rx968_cstack_done
    unless rx968_cstack, rx968_cstack_done
    dec $I19
    set $P11, rx968_cstack[$I19]
  rx968_cstack_done:
    pop rx968_rep, rx968_bstack
    pop rx968_pos, rx968_bstack
    pop $I19, rx968_bstack
    lt rx968_pos, -1, rx968_done
    lt rx968_pos, 0, rx968_fail
    eq $I19, 0, rx968_fail
    if_null rx968_cstack, rx968_jump
    elements $I18, rx968_bstack
    le $I18, 0, rx968_cut
    dec $I18
    set $I18, rx968_bstack[$I18]
  rx968_cut:
    assign rx968_cstack, $I18
  rx968_jump:
    jump $I19
  rx968_done:
    rx968_cur."!cursor_fail"()
    .return (rx968_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "201_1337966799.879_caps"  :subid("687_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1324
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "201_1337966799.879_nfa"  :subid("688_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1324
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 126
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "O"
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<==>"  :subid("202_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2451
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1326
    .lex "self", param_2451
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2452
    .lex "$/", $P2453
    .local string rx972_tgt
    .local int rx972_pos
    .local int rx972_off
    .local int rx972_eos
    .local int rx972_rep
    .local pmc rx972_cur
    .local pmc rx972_curclass
    .local pmc rx972_bstack
    .local pmc rx972_cstack
    (rx972_cur, rx972_tgt, rx972_pos, rx972_curclass, rx972_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx972_cur
    length rx972_eos, rx972_tgt
    eq $I19, 1, rx972_restart
    repr_get_attr_int $I11, self, rx972_curclass, "$!from"
    ne $I11, -1, rxscan973_done
    goto rxscan973_scan
  rxscan973_loop:
    inc rx972_pos
    gt rx972_pos, rx972_eos, rx972_fail
    repr_bind_attr_int rx972_cur, rx972_curclass, "$!from", rx972_pos
  rxscan973_scan:
    nqp_rxmark rx972_bstack, rxscan973_loop, rx972_pos, 0
  rxscan973_done:
    nqp_rxmark rx972_bstack, rxcap974_fail, rx972_pos, 0
    add $I11, rx972_pos, 2
    gt $I11, rx972_eos, rx972_fail
    substr $S10, rx972_tgt, rx972_pos, 2
    ne $S10, ucs4:"==", rx972_fail
    add rx972_pos, 2
    nqp_rxpeek $I19, rx972_bstack, rxcap974_fail
    inc $I19
    set $I11, rx972_bstack[$I19]
    $P11 = rx972_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx972_pos)
    rx972_cstack = rx972_cur."!cursor_capture"($P11, "sym")
    goto rxcap974_done
  rxcap974_fail:
    goto rx972_fail
  rxcap974_done:
    repr_bind_attr_int rx972_cur, rx972_curclass, "$!pos", rx972_pos
    $P11 = rx972_cur."O"("%relational, :pirop<iseq INn>")
    repr_get_attr_int $I11, $P11, rx972_curclass, "$!pos"
    lt $I11, 0, rx972_fail
    nqp_rxmark rx972_bstack, rxsubrule975_pass, -1, 0
  rxsubrule975_pass:
    rx972_cstack = rx972_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx972_pos, $P11, rx972_curclass, "$!pos"
    rx972_cur."!cursor_pass"(rx972_pos, unicode:"infix:sym\x{ab}==\x{bb}", 'backtrack'=>1)
    .return (rx972_cur)
  rx972_restart:
    repr_get_attr_obj rx972_cstack, rx972_cur, rx972_curclass, "$!cstack"
  rx972_fail:
    unless rx972_bstack, rx972_done
    pop $I19, rx972_bstack
    if_null rx972_cstack, rx972_cstack_done
    unless rx972_cstack, rx972_cstack_done
    dec $I19
    set $P11, rx972_cstack[$I19]
  rx972_cstack_done:
    pop rx972_rep, rx972_bstack
    pop rx972_pos, rx972_bstack
    pop $I19, rx972_bstack
    lt rx972_pos, -1, rx972_done
    lt rx972_pos, 0, rx972_fail
    eq $I19, 0, rx972_fail
    if_null rx972_cstack, rx972_jump
    elements $I18, rx972_bstack
    le $I18, 0, rx972_cut
    dec $I18
    set $I18, rx972_bstack[$I18]
  rx972_cut:
    assign rx972_cstack, $I18
  rx972_jump:
    jump $I19
  rx972_done:
    rx972_cur."!cursor_fail"()
    .return (rx972_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "202_1337966799.879_caps"  :subid("689_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1326
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "202_1337966799.879_nfa"  :subid("690_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1326
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 61
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 61
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "O"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<!=>"  :subid("203_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2457
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1327
    .lex "self", param_2457
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2458
    .lex "$/", $P2459
    .local string rx976_tgt
    .local int rx976_pos
    .local int rx976_off
    .local int rx976_eos
    .local int rx976_rep
    .local pmc rx976_cur
    .local pmc rx976_curclass
    .local pmc rx976_bstack
    .local pmc rx976_cstack
    (rx976_cur, rx976_tgt, rx976_pos, rx976_curclass, rx976_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx976_cur
    length rx976_eos, rx976_tgt
    eq $I19, 1, rx976_restart
    repr_get_attr_int $I11, self, rx976_curclass, "$!from"
    ne $I11, -1, rxscan977_done
    goto rxscan977_scan
  rxscan977_loop:
    inc rx976_pos
    gt rx976_pos, rx976_eos, rx976_fail
    repr_bind_attr_int rx976_cur, rx976_curclass, "$!from", rx976_pos
  rxscan977_scan:
    nqp_rxmark rx976_bstack, rxscan977_loop, rx976_pos, 0
  rxscan977_done:
    nqp_rxmark rx976_bstack, rxcap978_fail, rx976_pos, 0
    add $I11, rx976_pos, 2
    gt $I11, rx976_eos, rx976_fail
    substr $S10, rx976_tgt, rx976_pos, 2
    ne $S10, ucs4:"!=", rx976_fail
    add rx976_pos, 2
    nqp_rxpeek $I19, rx976_bstack, rxcap978_fail
    inc $I19
    set $I11, rx976_bstack[$I19]
    $P11 = rx976_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx976_pos)
    rx976_cstack = rx976_cur."!cursor_capture"($P11, "sym")
    goto rxcap978_done
  rxcap978_fail:
    goto rx976_fail
  rxcap978_done:
    repr_bind_attr_int rx976_cur, rx976_curclass, "$!pos", rx976_pos
    $P11 = rx976_cur."O"("%relational, :pirop<isne INn>")
    repr_get_attr_int $I11, $P11, rx976_curclass, "$!pos"
    lt $I11, 0, rx976_fail
    nqp_rxmark rx976_bstack, rxsubrule979_pass, -1, 0
  rxsubrule979_pass:
    rx976_cstack = rx976_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx976_pos, $P11, rx976_curclass, "$!pos"
    rx976_cur."!cursor_pass"(rx976_pos, unicode:"infix:sym\x{ab}!=\x{bb}", 'backtrack'=>1)
    .return (rx976_cur)
  rx976_restart:
    repr_get_attr_obj rx976_cstack, rx976_cur, rx976_curclass, "$!cstack"
  rx976_fail:
    unless rx976_bstack, rx976_done
    pop $I19, rx976_bstack
    if_null rx976_cstack, rx976_cstack_done
    unless rx976_cstack, rx976_cstack_done
    dec $I19
    set $P11, rx976_cstack[$I19]
  rx976_cstack_done:
    pop rx976_rep, rx976_bstack
    pop rx976_pos, rx976_bstack
    pop $I19, rx976_bstack
    lt rx976_pos, -1, rx976_done
    lt rx976_pos, 0, rx976_fail
    eq $I19, 0, rx976_fail
    if_null rx976_cstack, rx976_jump
    elements $I18, rx976_bstack
    le $I18, 0, rx976_cut
    dec $I18
    set $I18, rx976_bstack[$I18]
  rx976_cut:
    assign rx976_cstack, $I18
  rx976_jump:
    jump $I19
  rx976_done:
    rx976_cur."!cursor_fail"()
    .return (rx976_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "203_1337966799.879_caps"  :subid("691_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1327
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "203_1337966799.879_nfa"  :subid("692_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1327
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 33
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 61
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "O"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<<=>"  :subid("204_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2463
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1328
    .lex "self", param_2463
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2464
    .lex "$/", $P2465
    .local string rx980_tgt
    .local int rx980_pos
    .local int rx980_off
    .local int rx980_eos
    .local int rx980_rep
    .local pmc rx980_cur
    .local pmc rx980_curclass
    .local pmc rx980_bstack
    .local pmc rx980_cstack
    (rx980_cur, rx980_tgt, rx980_pos, rx980_curclass, rx980_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx980_cur
    length rx980_eos, rx980_tgt
    eq $I19, 1, rx980_restart
    repr_get_attr_int $I11, self, rx980_curclass, "$!from"
    ne $I11, -1, rxscan981_done
    goto rxscan981_scan
  rxscan981_loop:
    inc rx980_pos
    gt rx980_pos, rx980_eos, rx980_fail
    repr_bind_attr_int rx980_cur, rx980_curclass, "$!from", rx980_pos
  rxscan981_scan:
    nqp_rxmark rx980_bstack, rxscan981_loop, rx980_pos, 0
  rxscan981_done:
    nqp_rxmark rx980_bstack, rxcap982_fail, rx980_pos, 0
    add $I11, rx980_pos, 2
    gt $I11, rx980_eos, rx980_fail
    substr $S10, rx980_tgt, rx980_pos, 2
    ne $S10, ucs4:"<=", rx980_fail
    add rx980_pos, 2
    nqp_rxpeek $I19, rx980_bstack, rxcap982_fail
    inc $I19
    set $I11, rx980_bstack[$I19]
    $P11 = rx980_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx980_pos)
    rx980_cstack = rx980_cur."!cursor_capture"($P11, "sym")
    goto rxcap982_done
  rxcap982_fail:
    goto rx980_fail
  rxcap982_done:
    repr_bind_attr_int rx980_cur, rx980_curclass, "$!pos", rx980_pos
    $P11 = rx980_cur."O"("%relational, :pirop<isle INn>")
    repr_get_attr_int $I11, $P11, rx980_curclass, "$!pos"
    lt $I11, 0, rx980_fail
    nqp_rxmark rx980_bstack, rxsubrule983_pass, -1, 0
  rxsubrule983_pass:
    rx980_cstack = rx980_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx980_pos, $P11, rx980_curclass, "$!pos"
    rx980_cur."!cursor_pass"(rx980_pos, unicode:"infix:sym\x{ab}<=\x{bb}", 'backtrack'=>1)
    .return (rx980_cur)
  rx980_restart:
    repr_get_attr_obj rx980_cstack, rx980_cur, rx980_curclass, "$!cstack"
  rx980_fail:
    unless rx980_bstack, rx980_done
    pop $I19, rx980_bstack
    if_null rx980_cstack, rx980_cstack_done
    unless rx980_cstack, rx980_cstack_done
    dec $I19
    set $P11, rx980_cstack[$I19]
  rx980_cstack_done:
    pop rx980_rep, rx980_bstack
    pop rx980_pos, rx980_bstack
    pop $I19, rx980_bstack
    lt rx980_pos, -1, rx980_done
    lt rx980_pos, 0, rx980_fail
    eq $I19, 0, rx980_fail
    if_null rx980_cstack, rx980_jump
    elements $I18, rx980_bstack
    le $I18, 0, rx980_cut
    dec $I18
    set $I18, rx980_bstack[$I18]
  rx980_cut:
    assign rx980_cstack, $I18
  rx980_jump:
    jump $I19
  rx980_done:
    rx980_cur."!cursor_fail"()
    .return (rx980_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "204_1337966799.879_caps"  :subid("693_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1328
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "204_1337966799.879_nfa"  :subid("694_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1328
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 60
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 61
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "O"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<>=>"  :subid("205_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2469
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1329
    .lex "self", param_2469
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2470
    .lex "$/", $P2471
    .local string rx984_tgt
    .local int rx984_pos
    .local int rx984_off
    .local int rx984_eos
    .local int rx984_rep
    .local pmc rx984_cur
    .local pmc rx984_curclass
    .local pmc rx984_bstack
    .local pmc rx984_cstack
    (rx984_cur, rx984_tgt, rx984_pos, rx984_curclass, rx984_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx984_cur
    length rx984_eos, rx984_tgt
    eq $I19, 1, rx984_restart
    repr_get_attr_int $I11, self, rx984_curclass, "$!from"
    ne $I11, -1, rxscan985_done
    goto rxscan985_scan
  rxscan985_loop:
    inc rx984_pos
    gt rx984_pos, rx984_eos, rx984_fail
    repr_bind_attr_int rx984_cur, rx984_curclass, "$!from", rx984_pos
  rxscan985_scan:
    nqp_rxmark rx984_bstack, rxscan985_loop, rx984_pos, 0
  rxscan985_done:
    nqp_rxmark rx984_bstack, rxcap986_fail, rx984_pos, 0
    add $I11, rx984_pos, 2
    gt $I11, rx984_eos, rx984_fail
    substr $S10, rx984_tgt, rx984_pos, 2
    ne $S10, ucs4:">=", rx984_fail
    add rx984_pos, 2
    nqp_rxpeek $I19, rx984_bstack, rxcap986_fail
    inc $I19
    set $I11, rx984_bstack[$I19]
    $P11 = rx984_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx984_pos)
    rx984_cstack = rx984_cur."!cursor_capture"($P11, "sym")
    goto rxcap986_done
  rxcap986_fail:
    goto rx984_fail
  rxcap986_done:
    repr_bind_attr_int rx984_cur, rx984_curclass, "$!pos", rx984_pos
    $P11 = rx984_cur."O"("%relational, :pirop<isge INn>")
    repr_get_attr_int $I11, $P11, rx984_curclass, "$!pos"
    lt $I11, 0, rx984_fail
    nqp_rxmark rx984_bstack, rxsubrule987_pass, -1, 0
  rxsubrule987_pass:
    rx984_cstack = rx984_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx984_pos, $P11, rx984_curclass, "$!pos"
    rx984_cur."!cursor_pass"(rx984_pos, unicode:"infix:sym\x{ab}>=\x{bb}", 'backtrack'=>1)
    .return (rx984_cur)
  rx984_restart:
    repr_get_attr_obj rx984_cstack, rx984_cur, rx984_curclass, "$!cstack"
  rx984_fail:
    unless rx984_bstack, rx984_done
    pop $I19, rx984_bstack
    if_null rx984_cstack, rx984_cstack_done
    unless rx984_cstack, rx984_cstack_done
    dec $I19
    set $P11, rx984_cstack[$I19]
  rx984_cstack_done:
    pop rx984_rep, rx984_bstack
    pop rx984_pos, rx984_bstack
    pop $I19, rx984_bstack
    lt rx984_pos, -1, rx984_done
    lt rx984_pos, 0, rx984_fail
    eq $I19, 0, rx984_fail
    if_null rx984_cstack, rx984_jump
    elements $I18, rx984_bstack
    le $I18, 0, rx984_cut
    dec $I18
    set $I18, rx984_bstack[$I18]
  rx984_cut:
    assign rx984_cstack, $I18
  rx984_jump:
    jump $I19
  rx984_done:
    rx984_cur."!cursor_fail"()
    .return (rx984_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "205_1337966799.879_caps"  :subid("695_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1329
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "205_1337966799.879_nfa"  :subid("696_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1329
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 62
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 61
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "O"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<<>"  :subid("206_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2475
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1330
    .lex "self", param_2475
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2476
    .lex "$/", $P2477
    .local string rx988_tgt
    .local int rx988_pos
    .local int rx988_off
    .local int rx988_eos
    .local int rx988_rep
    .local pmc rx988_cur
    .local pmc rx988_curclass
    .local pmc rx988_bstack
    .local pmc rx988_cstack
    (rx988_cur, rx988_tgt, rx988_pos, rx988_curclass, rx988_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx988_cur
    length rx988_eos, rx988_tgt
    eq $I19, 1, rx988_restart
    repr_get_attr_int $I11, self, rx988_curclass, "$!from"
    ne $I11, -1, rxscan989_done
    goto rxscan989_scan
  rxscan989_loop:
    inc rx988_pos
    gt rx988_pos, rx988_eos, rx988_fail
    repr_bind_attr_int rx988_cur, rx988_curclass, "$!from", rx988_pos
  rxscan989_scan:
    nqp_rxmark rx988_bstack, rxscan989_loop, rx988_pos, 0
  rxscan989_done:
    nqp_rxmark rx988_bstack, rxcap990_fail, rx988_pos, 0
    add $I11, rx988_pos, 1
    gt $I11, rx988_eos, rx988_fail
    substr $S10, rx988_tgt, rx988_pos, 1
    ne $S10, ucs4:"<", rx988_fail
    add rx988_pos, 1
    nqp_rxpeek $I19, rx988_bstack, rxcap990_fail
    inc $I19
    set $I11, rx988_bstack[$I19]
    $P11 = rx988_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx988_pos)
    rx988_cstack = rx988_cur."!cursor_capture"($P11, "sym")
    goto rxcap990_done
  rxcap990_fail:
    goto rx988_fail
  rxcap990_done:
    repr_bind_attr_int rx988_cur, rx988_curclass, "$!pos", rx988_pos
    $P11 = rx988_cur."O"("%relational, :pirop<islt INn>")
    repr_get_attr_int $I11, $P11, rx988_curclass, "$!pos"
    lt $I11, 0, rx988_fail
    nqp_rxmark rx988_bstack, rxsubrule991_pass, -1, 0
  rxsubrule991_pass:
    rx988_cstack = rx988_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx988_pos, $P11, rx988_curclass, "$!pos"
    rx988_cur."!cursor_pass"(rx988_pos, unicode:"infix:sym\x{ab}<\x{bb}", 'backtrack'=>1)
    .return (rx988_cur)
  rx988_restart:
    repr_get_attr_obj rx988_cstack, rx988_cur, rx988_curclass, "$!cstack"
  rx988_fail:
    unless rx988_bstack, rx988_done
    pop $I19, rx988_bstack
    if_null rx988_cstack, rx988_cstack_done
    unless rx988_cstack, rx988_cstack_done
    dec $I19
    set $P11, rx988_cstack[$I19]
  rx988_cstack_done:
    pop rx988_rep, rx988_bstack
    pop rx988_pos, rx988_bstack
    pop $I19, rx988_bstack
    lt rx988_pos, -1, rx988_done
    lt rx988_pos, 0, rx988_fail
    eq $I19, 0, rx988_fail
    if_null rx988_cstack, rx988_jump
    elements $I18, rx988_bstack
    le $I18, 0, rx988_cut
    dec $I18
    set $I18, rx988_bstack[$I18]
  rx988_cut:
    assign rx988_cstack, $I18
  rx988_jump:
    jump $I19
  rx988_done:
    rx988_cur."!cursor_fail"()
    .return (rx988_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "206_1337966799.879_caps"  :subid("697_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1330
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "206_1337966799.879_nfa"  :subid("698_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1330
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 60
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "O"
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<>>"  :subid("207_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2481
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1331
    .lex "self", param_2481
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2482
    .lex "$/", $P2483
    .local string rx992_tgt
    .local int rx992_pos
    .local int rx992_off
    .local int rx992_eos
    .local int rx992_rep
    .local pmc rx992_cur
    .local pmc rx992_curclass
    .local pmc rx992_bstack
    .local pmc rx992_cstack
    (rx992_cur, rx992_tgt, rx992_pos, rx992_curclass, rx992_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx992_cur
    length rx992_eos, rx992_tgt
    eq $I19, 1, rx992_restart
    repr_get_attr_int $I11, self, rx992_curclass, "$!from"
    ne $I11, -1, rxscan993_done
    goto rxscan993_scan
  rxscan993_loop:
    inc rx992_pos
    gt rx992_pos, rx992_eos, rx992_fail
    repr_bind_attr_int rx992_cur, rx992_curclass, "$!from", rx992_pos
  rxscan993_scan:
    nqp_rxmark rx992_bstack, rxscan993_loop, rx992_pos, 0
  rxscan993_done:
    nqp_rxmark rx992_bstack, rxcap994_fail, rx992_pos, 0
    add $I11, rx992_pos, 1
    gt $I11, rx992_eos, rx992_fail
    substr $S10, rx992_tgt, rx992_pos, 1
    ne $S10, ucs4:">", rx992_fail
    add rx992_pos, 1
    nqp_rxpeek $I19, rx992_bstack, rxcap994_fail
    inc $I19
    set $I11, rx992_bstack[$I19]
    $P11 = rx992_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx992_pos)
    rx992_cstack = rx992_cur."!cursor_capture"($P11, "sym")
    goto rxcap994_done
  rxcap994_fail:
    goto rx992_fail
  rxcap994_done:
    repr_bind_attr_int rx992_cur, rx992_curclass, "$!pos", rx992_pos
    $P11 = rx992_cur."O"("%relational, :pirop<isgt INn>")
    repr_get_attr_int $I11, $P11, rx992_curclass, "$!pos"
    lt $I11, 0, rx992_fail
    nqp_rxmark rx992_bstack, rxsubrule995_pass, -1, 0
  rxsubrule995_pass:
    rx992_cstack = rx992_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx992_pos, $P11, rx992_curclass, "$!pos"
    rx992_cur."!cursor_pass"(rx992_pos, unicode:"infix:sym\x{ab}>\x{bb}", 'backtrack'=>1)
    .return (rx992_cur)
  rx992_restart:
    repr_get_attr_obj rx992_cstack, rx992_cur, rx992_curclass, "$!cstack"
  rx992_fail:
    unless rx992_bstack, rx992_done
    pop $I19, rx992_bstack
    if_null rx992_cstack, rx992_cstack_done
    unless rx992_cstack, rx992_cstack_done
    dec $I19
    set $P11, rx992_cstack[$I19]
  rx992_cstack_done:
    pop rx992_rep, rx992_bstack
    pop rx992_pos, rx992_bstack
    pop $I19, rx992_bstack
    lt rx992_pos, -1, rx992_done
    lt rx992_pos, 0, rx992_fail
    eq $I19, 0, rx992_fail
    if_null rx992_cstack, rx992_jump
    elements $I18, rx992_bstack
    le $I18, 0, rx992_cut
    dec $I18
    set $I18, rx992_bstack[$I18]
  rx992_cut:
    assign rx992_cstack, $I18
  rx992_jump:
    jump $I19
  rx992_done:
    rx992_cur."!cursor_fail"()
    .return (rx992_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "207_1337966799.879_caps"  :subid("699_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1331
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "207_1337966799.879_nfa"  :subid("700_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1331
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 62
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "O"
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<eq>"  :subid("208_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2487
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1332
    .lex "self", param_2487
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2488
    .lex "$/", $P2489
    .local string rx996_tgt
    .local int rx996_pos
    .local int rx996_off
    .local int rx996_eos
    .local int rx996_rep
    .local pmc rx996_cur
    .local pmc rx996_curclass
    .local pmc rx996_bstack
    .local pmc rx996_cstack
    (rx996_cur, rx996_tgt, rx996_pos, rx996_curclass, rx996_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx996_cur
    length rx996_eos, rx996_tgt
    eq $I19, 1, rx996_restart
    repr_get_attr_int $I11, self, rx996_curclass, "$!from"
    ne $I11, -1, rxscan997_done
    goto rxscan997_scan
  rxscan997_loop:
    inc rx996_pos
    gt rx996_pos, rx996_eos, rx996_fail
    repr_bind_attr_int rx996_cur, rx996_curclass, "$!from", rx996_pos
  rxscan997_scan:
    nqp_rxmark rx996_bstack, rxscan997_loop, rx996_pos, 0
  rxscan997_done:
    nqp_rxmark rx996_bstack, rxcap998_fail, rx996_pos, 0
    add $I11, rx996_pos, 2
    gt $I11, rx996_eos, rx996_fail
    substr $S10, rx996_tgt, rx996_pos, 2
    ne $S10, ucs4:"eq", rx996_fail
    add rx996_pos, 2
    nqp_rxpeek $I19, rx996_bstack, rxcap998_fail
    inc $I19
    set $I11, rx996_bstack[$I19]
    $P11 = rx996_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx996_pos)
    rx996_cstack = rx996_cur."!cursor_capture"($P11, "sym")
    goto rxcap998_done
  rxcap998_fail:
    goto rx996_fail
  rxcap998_done:
    repr_bind_attr_int rx996_cur, rx996_curclass, "$!pos", rx996_pos
    $P11 = rx996_cur."O"("%relational, :pirop<iseq ISs>")
    repr_get_attr_int $I11, $P11, rx996_curclass, "$!pos"
    lt $I11, 0, rx996_fail
    nqp_rxmark rx996_bstack, rxsubrule999_pass, -1, 0
  rxsubrule999_pass:
    rx996_cstack = rx996_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx996_pos, $P11, rx996_curclass, "$!pos"
    rx996_cur."!cursor_pass"(rx996_pos, unicode:"infix:sym\x{ab}eq\x{bb}", 'backtrack'=>1)
    .return (rx996_cur)
  rx996_restart:
    repr_get_attr_obj rx996_cstack, rx996_cur, rx996_curclass, "$!cstack"
  rx996_fail:
    unless rx996_bstack, rx996_done
    pop $I19, rx996_bstack
    if_null rx996_cstack, rx996_cstack_done
    unless rx996_cstack, rx996_cstack_done
    dec $I19
    set $P11, rx996_cstack[$I19]
  rx996_cstack_done:
    pop rx996_rep, rx996_bstack
    pop rx996_pos, rx996_bstack
    pop $I19, rx996_bstack
    lt rx996_pos, -1, rx996_done
    lt rx996_pos, 0, rx996_fail
    eq $I19, 0, rx996_fail
    if_null rx996_cstack, rx996_jump
    elements $I18, rx996_bstack
    le $I18, 0, rx996_cut
    dec $I18
    set $I18, rx996_bstack[$I18]
  rx996_cut:
    assign rx996_cstack, $I18
  rx996_jump:
    jump $I19
  rx996_done:
    rx996_cur."!cursor_fail"()
    .return (rx996_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "208_1337966799.879_caps"  :subid("701_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1332
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "208_1337966799.879_nfa"  :subid("702_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1332
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 101
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 113
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "O"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<ne>"  :subid("209_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2493
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1333
    .lex "self", param_2493
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2494
    .lex "$/", $P2495
    .local string rx1000_tgt
    .local int rx1000_pos
    .local int rx1000_off
    .local int rx1000_eos
    .local int rx1000_rep
    .local pmc rx1000_cur
    .local pmc rx1000_curclass
    .local pmc rx1000_bstack
    .local pmc rx1000_cstack
    (rx1000_cur, rx1000_tgt, rx1000_pos, rx1000_curclass, rx1000_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1000_cur
    length rx1000_eos, rx1000_tgt
    eq $I19, 1, rx1000_restart
    repr_get_attr_int $I11, self, rx1000_curclass, "$!from"
    ne $I11, -1, rxscan1001_done
    goto rxscan1001_scan
  rxscan1001_loop:
    inc rx1000_pos
    gt rx1000_pos, rx1000_eos, rx1000_fail
    repr_bind_attr_int rx1000_cur, rx1000_curclass, "$!from", rx1000_pos
  rxscan1001_scan:
    nqp_rxmark rx1000_bstack, rxscan1001_loop, rx1000_pos, 0
  rxscan1001_done:
    nqp_rxmark rx1000_bstack, rxcap1002_fail, rx1000_pos, 0
    add $I11, rx1000_pos, 2
    gt $I11, rx1000_eos, rx1000_fail
    substr $S10, rx1000_tgt, rx1000_pos, 2
    ne $S10, ucs4:"ne", rx1000_fail
    add rx1000_pos, 2
    nqp_rxpeek $I19, rx1000_bstack, rxcap1002_fail
    inc $I19
    set $I11, rx1000_bstack[$I19]
    $P11 = rx1000_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1000_pos)
    rx1000_cstack = rx1000_cur."!cursor_capture"($P11, "sym")
    goto rxcap1002_done
  rxcap1002_fail:
    goto rx1000_fail
  rxcap1002_done:
    repr_bind_attr_int rx1000_cur, rx1000_curclass, "$!pos", rx1000_pos
    $P11 = rx1000_cur."O"("%relational, :pirop<isne ISs>")
    repr_get_attr_int $I11, $P11, rx1000_curclass, "$!pos"
    lt $I11, 0, rx1000_fail
    nqp_rxmark rx1000_bstack, rxsubrule1003_pass, -1, 0
  rxsubrule1003_pass:
    rx1000_cstack = rx1000_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1000_pos, $P11, rx1000_curclass, "$!pos"
    rx1000_cur."!cursor_pass"(rx1000_pos, unicode:"infix:sym\x{ab}ne\x{bb}", 'backtrack'=>1)
    .return (rx1000_cur)
  rx1000_restart:
    repr_get_attr_obj rx1000_cstack, rx1000_cur, rx1000_curclass, "$!cstack"
  rx1000_fail:
    unless rx1000_bstack, rx1000_done
    pop $I19, rx1000_bstack
    if_null rx1000_cstack, rx1000_cstack_done
    unless rx1000_cstack, rx1000_cstack_done
    dec $I19
    set $P11, rx1000_cstack[$I19]
  rx1000_cstack_done:
    pop rx1000_rep, rx1000_bstack
    pop rx1000_pos, rx1000_bstack
    pop $I19, rx1000_bstack
    lt rx1000_pos, -1, rx1000_done
    lt rx1000_pos, 0, rx1000_fail
    eq $I19, 0, rx1000_fail
    if_null rx1000_cstack, rx1000_jump
    elements $I18, rx1000_bstack
    le $I18, 0, rx1000_cut
    dec $I18
    set $I18, rx1000_bstack[$I18]
  rx1000_cut:
    assign rx1000_cstack, $I18
  rx1000_jump:
    jump $I19
  rx1000_done:
    rx1000_cur."!cursor_fail"()
    .return (rx1000_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "209_1337966799.879_caps"  :subid("703_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1333
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "209_1337966799.879_nfa"  :subid("704_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1333
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 110
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 101
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "O"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<le>"  :subid("210_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2499
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1334
    .lex "self", param_2499
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2500
    .lex "$/", $P2501
    .local string rx1004_tgt
    .local int rx1004_pos
    .local int rx1004_off
    .local int rx1004_eos
    .local int rx1004_rep
    .local pmc rx1004_cur
    .local pmc rx1004_curclass
    .local pmc rx1004_bstack
    .local pmc rx1004_cstack
    (rx1004_cur, rx1004_tgt, rx1004_pos, rx1004_curclass, rx1004_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1004_cur
    length rx1004_eos, rx1004_tgt
    eq $I19, 1, rx1004_restart
    repr_get_attr_int $I11, self, rx1004_curclass, "$!from"
    ne $I11, -1, rxscan1005_done
    goto rxscan1005_scan
  rxscan1005_loop:
    inc rx1004_pos
    gt rx1004_pos, rx1004_eos, rx1004_fail
    repr_bind_attr_int rx1004_cur, rx1004_curclass, "$!from", rx1004_pos
  rxscan1005_scan:
    nqp_rxmark rx1004_bstack, rxscan1005_loop, rx1004_pos, 0
  rxscan1005_done:
    nqp_rxmark rx1004_bstack, rxcap1006_fail, rx1004_pos, 0
    add $I11, rx1004_pos, 2
    gt $I11, rx1004_eos, rx1004_fail
    substr $S10, rx1004_tgt, rx1004_pos, 2
    ne $S10, ucs4:"le", rx1004_fail
    add rx1004_pos, 2
    nqp_rxpeek $I19, rx1004_bstack, rxcap1006_fail
    inc $I19
    set $I11, rx1004_bstack[$I19]
    $P11 = rx1004_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1004_pos)
    rx1004_cstack = rx1004_cur."!cursor_capture"($P11, "sym")
    goto rxcap1006_done
  rxcap1006_fail:
    goto rx1004_fail
  rxcap1006_done:
    repr_bind_attr_int rx1004_cur, rx1004_curclass, "$!pos", rx1004_pos
    $P11 = rx1004_cur."O"("%relational, :pirop<isle ISs>")
    repr_get_attr_int $I11, $P11, rx1004_curclass, "$!pos"
    lt $I11, 0, rx1004_fail
    nqp_rxmark rx1004_bstack, rxsubrule1007_pass, -1, 0
  rxsubrule1007_pass:
    rx1004_cstack = rx1004_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1004_pos, $P11, rx1004_curclass, "$!pos"
    rx1004_cur."!cursor_pass"(rx1004_pos, unicode:"infix:sym\x{ab}le\x{bb}", 'backtrack'=>1)
    .return (rx1004_cur)
  rx1004_restart:
    repr_get_attr_obj rx1004_cstack, rx1004_cur, rx1004_curclass, "$!cstack"
  rx1004_fail:
    unless rx1004_bstack, rx1004_done
    pop $I19, rx1004_bstack
    if_null rx1004_cstack, rx1004_cstack_done
    unless rx1004_cstack, rx1004_cstack_done
    dec $I19
    set $P11, rx1004_cstack[$I19]
  rx1004_cstack_done:
    pop rx1004_rep, rx1004_bstack
    pop rx1004_pos, rx1004_bstack
    pop $I19, rx1004_bstack
    lt rx1004_pos, -1, rx1004_done
    lt rx1004_pos, 0, rx1004_fail
    eq $I19, 0, rx1004_fail
    if_null rx1004_cstack, rx1004_jump
    elements $I18, rx1004_bstack
    le $I18, 0, rx1004_cut
    dec $I18
    set $I18, rx1004_bstack[$I18]
  rx1004_cut:
    assign rx1004_cstack, $I18
  rx1004_jump:
    jump $I19
  rx1004_done:
    rx1004_cur."!cursor_fail"()
    .return (rx1004_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "210_1337966799.879_caps"  :subid("705_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1334
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "210_1337966799.879_nfa"  :subid("706_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1334
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 108
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 101
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "O"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<ge>"  :subid("211_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2505
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1335
    .lex "self", param_2505
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2506
    .lex "$/", $P2507
    .local string rx1008_tgt
    .local int rx1008_pos
    .local int rx1008_off
    .local int rx1008_eos
    .local int rx1008_rep
    .local pmc rx1008_cur
    .local pmc rx1008_curclass
    .local pmc rx1008_bstack
    .local pmc rx1008_cstack
    (rx1008_cur, rx1008_tgt, rx1008_pos, rx1008_curclass, rx1008_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1008_cur
    length rx1008_eos, rx1008_tgt
    eq $I19, 1, rx1008_restart
    repr_get_attr_int $I11, self, rx1008_curclass, "$!from"
    ne $I11, -1, rxscan1009_done
    goto rxscan1009_scan
  rxscan1009_loop:
    inc rx1008_pos
    gt rx1008_pos, rx1008_eos, rx1008_fail
    repr_bind_attr_int rx1008_cur, rx1008_curclass, "$!from", rx1008_pos
  rxscan1009_scan:
    nqp_rxmark rx1008_bstack, rxscan1009_loop, rx1008_pos, 0
  rxscan1009_done:
    nqp_rxmark rx1008_bstack, rxcap1010_fail, rx1008_pos, 0
    add $I11, rx1008_pos, 2
    gt $I11, rx1008_eos, rx1008_fail
    substr $S10, rx1008_tgt, rx1008_pos, 2
    ne $S10, ucs4:"ge", rx1008_fail
    add rx1008_pos, 2
    nqp_rxpeek $I19, rx1008_bstack, rxcap1010_fail
    inc $I19
    set $I11, rx1008_bstack[$I19]
    $P11 = rx1008_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1008_pos)
    rx1008_cstack = rx1008_cur."!cursor_capture"($P11, "sym")
    goto rxcap1010_done
  rxcap1010_fail:
    goto rx1008_fail
  rxcap1010_done:
    repr_bind_attr_int rx1008_cur, rx1008_curclass, "$!pos", rx1008_pos
    $P11 = rx1008_cur."O"("%relational, :pirop<isge ISs>")
    repr_get_attr_int $I11, $P11, rx1008_curclass, "$!pos"
    lt $I11, 0, rx1008_fail
    nqp_rxmark rx1008_bstack, rxsubrule1011_pass, -1, 0
  rxsubrule1011_pass:
    rx1008_cstack = rx1008_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1008_pos, $P11, rx1008_curclass, "$!pos"
    rx1008_cur."!cursor_pass"(rx1008_pos, unicode:"infix:sym\x{ab}ge\x{bb}", 'backtrack'=>1)
    .return (rx1008_cur)
  rx1008_restart:
    repr_get_attr_obj rx1008_cstack, rx1008_cur, rx1008_curclass, "$!cstack"
  rx1008_fail:
    unless rx1008_bstack, rx1008_done
    pop $I19, rx1008_bstack
    if_null rx1008_cstack, rx1008_cstack_done
    unless rx1008_cstack, rx1008_cstack_done
    dec $I19
    set $P11, rx1008_cstack[$I19]
  rx1008_cstack_done:
    pop rx1008_rep, rx1008_bstack
    pop rx1008_pos, rx1008_bstack
    pop $I19, rx1008_bstack
    lt rx1008_pos, -1, rx1008_done
    lt rx1008_pos, 0, rx1008_fail
    eq $I19, 0, rx1008_fail
    if_null rx1008_cstack, rx1008_jump
    elements $I18, rx1008_bstack
    le $I18, 0, rx1008_cut
    dec $I18
    set $I18, rx1008_bstack[$I18]
  rx1008_cut:
    assign rx1008_cstack, $I18
  rx1008_jump:
    jump $I19
  rx1008_done:
    rx1008_cur."!cursor_fail"()
    .return (rx1008_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "211_1337966799.879_caps"  :subid("707_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1335
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "211_1337966799.879_nfa"  :subid("708_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1335
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 103
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 101
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "O"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<lt>"  :subid("212_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2511
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1336
    .lex "self", param_2511
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2512
    .lex "$/", $P2513
    .local string rx1012_tgt
    .local int rx1012_pos
    .local int rx1012_off
    .local int rx1012_eos
    .local int rx1012_rep
    .local pmc rx1012_cur
    .local pmc rx1012_curclass
    .local pmc rx1012_bstack
    .local pmc rx1012_cstack
    (rx1012_cur, rx1012_tgt, rx1012_pos, rx1012_curclass, rx1012_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1012_cur
    length rx1012_eos, rx1012_tgt
    eq $I19, 1, rx1012_restart
    repr_get_attr_int $I11, self, rx1012_curclass, "$!from"
    ne $I11, -1, rxscan1013_done
    goto rxscan1013_scan
  rxscan1013_loop:
    inc rx1012_pos
    gt rx1012_pos, rx1012_eos, rx1012_fail
    repr_bind_attr_int rx1012_cur, rx1012_curclass, "$!from", rx1012_pos
  rxscan1013_scan:
    nqp_rxmark rx1012_bstack, rxscan1013_loop, rx1012_pos, 0
  rxscan1013_done:
    nqp_rxmark rx1012_bstack, rxcap1014_fail, rx1012_pos, 0
    add $I11, rx1012_pos, 2
    gt $I11, rx1012_eos, rx1012_fail
    substr $S10, rx1012_tgt, rx1012_pos, 2
    ne $S10, ucs4:"lt", rx1012_fail
    add rx1012_pos, 2
    nqp_rxpeek $I19, rx1012_bstack, rxcap1014_fail
    inc $I19
    set $I11, rx1012_bstack[$I19]
    $P11 = rx1012_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1012_pos)
    rx1012_cstack = rx1012_cur."!cursor_capture"($P11, "sym")
    goto rxcap1014_done
  rxcap1014_fail:
    goto rx1012_fail
  rxcap1014_done:
    repr_bind_attr_int rx1012_cur, rx1012_curclass, "$!pos", rx1012_pos
    $P11 = rx1012_cur."O"("%relational, :pirop<islt ISs>")
    repr_get_attr_int $I11, $P11, rx1012_curclass, "$!pos"
    lt $I11, 0, rx1012_fail
    nqp_rxmark rx1012_bstack, rxsubrule1015_pass, -1, 0
  rxsubrule1015_pass:
    rx1012_cstack = rx1012_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1012_pos, $P11, rx1012_curclass, "$!pos"
    rx1012_cur."!cursor_pass"(rx1012_pos, unicode:"infix:sym\x{ab}lt\x{bb}", 'backtrack'=>1)
    .return (rx1012_cur)
  rx1012_restart:
    repr_get_attr_obj rx1012_cstack, rx1012_cur, rx1012_curclass, "$!cstack"
  rx1012_fail:
    unless rx1012_bstack, rx1012_done
    pop $I19, rx1012_bstack
    if_null rx1012_cstack, rx1012_cstack_done
    unless rx1012_cstack, rx1012_cstack_done
    dec $I19
    set $P11, rx1012_cstack[$I19]
  rx1012_cstack_done:
    pop rx1012_rep, rx1012_bstack
    pop rx1012_pos, rx1012_bstack
    pop $I19, rx1012_bstack
    lt rx1012_pos, -1, rx1012_done
    lt rx1012_pos, 0, rx1012_fail
    eq $I19, 0, rx1012_fail
    if_null rx1012_cstack, rx1012_jump
    elements $I18, rx1012_bstack
    le $I18, 0, rx1012_cut
    dec $I18
    set $I18, rx1012_bstack[$I18]
  rx1012_cut:
    assign rx1012_cstack, $I18
  rx1012_jump:
    jump $I19
  rx1012_done:
    rx1012_cur."!cursor_fail"()
    .return (rx1012_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "212_1337966799.879_caps"  :subid("709_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1336
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "212_1337966799.879_nfa"  :subid("710_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1336
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 108
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 116
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "O"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<gt>"  :subid("213_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2517
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1337
    .lex "self", param_2517
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2518
    .lex "$/", $P2519
    .local string rx1016_tgt
    .local int rx1016_pos
    .local int rx1016_off
    .local int rx1016_eos
    .local int rx1016_rep
    .local pmc rx1016_cur
    .local pmc rx1016_curclass
    .local pmc rx1016_bstack
    .local pmc rx1016_cstack
    (rx1016_cur, rx1016_tgt, rx1016_pos, rx1016_curclass, rx1016_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1016_cur
    length rx1016_eos, rx1016_tgt
    eq $I19, 1, rx1016_restart
    repr_get_attr_int $I11, self, rx1016_curclass, "$!from"
    ne $I11, -1, rxscan1017_done
    goto rxscan1017_scan
  rxscan1017_loop:
    inc rx1016_pos
    gt rx1016_pos, rx1016_eos, rx1016_fail
    repr_bind_attr_int rx1016_cur, rx1016_curclass, "$!from", rx1016_pos
  rxscan1017_scan:
    nqp_rxmark rx1016_bstack, rxscan1017_loop, rx1016_pos, 0
  rxscan1017_done:
    nqp_rxmark rx1016_bstack, rxcap1018_fail, rx1016_pos, 0
    add $I11, rx1016_pos, 2
    gt $I11, rx1016_eos, rx1016_fail
    substr $S10, rx1016_tgt, rx1016_pos, 2
    ne $S10, ucs4:"gt", rx1016_fail
    add rx1016_pos, 2
    nqp_rxpeek $I19, rx1016_bstack, rxcap1018_fail
    inc $I19
    set $I11, rx1016_bstack[$I19]
    $P11 = rx1016_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1016_pos)
    rx1016_cstack = rx1016_cur."!cursor_capture"($P11, "sym")
    goto rxcap1018_done
  rxcap1018_fail:
    goto rx1016_fail
  rxcap1018_done:
    repr_bind_attr_int rx1016_cur, rx1016_curclass, "$!pos", rx1016_pos
    $P11 = rx1016_cur."O"("%relational, :pirop<isgt ISs>")
    repr_get_attr_int $I11, $P11, rx1016_curclass, "$!pos"
    lt $I11, 0, rx1016_fail
    nqp_rxmark rx1016_bstack, rxsubrule1019_pass, -1, 0
  rxsubrule1019_pass:
    rx1016_cstack = rx1016_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1016_pos, $P11, rx1016_curclass, "$!pos"
    rx1016_cur."!cursor_pass"(rx1016_pos, unicode:"infix:sym\x{ab}gt\x{bb}", 'backtrack'=>1)
    .return (rx1016_cur)
  rx1016_restart:
    repr_get_attr_obj rx1016_cstack, rx1016_cur, rx1016_curclass, "$!cstack"
  rx1016_fail:
    unless rx1016_bstack, rx1016_done
    pop $I19, rx1016_bstack
    if_null rx1016_cstack, rx1016_cstack_done
    unless rx1016_cstack, rx1016_cstack_done
    dec $I19
    set $P11, rx1016_cstack[$I19]
  rx1016_cstack_done:
    pop rx1016_rep, rx1016_bstack
    pop rx1016_pos, rx1016_bstack
    pop $I19, rx1016_bstack
    lt rx1016_pos, -1, rx1016_done
    lt rx1016_pos, 0, rx1016_fail
    eq $I19, 0, rx1016_fail
    if_null rx1016_cstack, rx1016_jump
    elements $I18, rx1016_bstack
    le $I18, 0, rx1016_cut
    dec $I18
    set $I18, rx1016_bstack[$I18]
  rx1016_cut:
    assign rx1016_cstack, $I18
  rx1016_jump:
    jump $I19
  rx1016_done:
    rx1016_cur."!cursor_fail"()
    .return (rx1016_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "213_1337966799.879_caps"  :subid("711_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1337
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "213_1337966799.879_nfa"  :subid("712_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1337
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 103
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 116
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "O"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<=:=>"  :subid("214_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2523
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1338
    .lex "self", param_2523
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2524
    .lex "$/", $P2525
    .local string rx1020_tgt
    .local int rx1020_pos
    .local int rx1020_off
    .local int rx1020_eos
    .local int rx1020_rep
    .local pmc rx1020_cur
    .local pmc rx1020_curclass
    .local pmc rx1020_bstack
    .local pmc rx1020_cstack
    (rx1020_cur, rx1020_tgt, rx1020_pos, rx1020_curclass, rx1020_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1020_cur
    length rx1020_eos, rx1020_tgt
    eq $I19, 1, rx1020_restart
    repr_get_attr_int $I11, self, rx1020_curclass, "$!from"
    ne $I11, -1, rxscan1021_done
    goto rxscan1021_scan
  rxscan1021_loop:
    inc rx1020_pos
    gt rx1020_pos, rx1020_eos, rx1020_fail
    repr_bind_attr_int rx1020_cur, rx1020_curclass, "$!from", rx1020_pos
  rxscan1021_scan:
    nqp_rxmark rx1020_bstack, rxscan1021_loop, rx1020_pos, 0
  rxscan1021_done:
    nqp_rxmark rx1020_bstack, rxcap1022_fail, rx1020_pos, 0
    add $I11, rx1020_pos, 3
    gt $I11, rx1020_eos, rx1020_fail
    substr $S10, rx1020_tgt, rx1020_pos, 3
    ne $S10, ucs4:"=:=", rx1020_fail
    add rx1020_pos, 3
    nqp_rxpeek $I19, rx1020_bstack, rxcap1022_fail
    inc $I19
    set $I11, rx1020_bstack[$I19]
    $P11 = rx1020_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1020_pos)
    rx1020_cstack = rx1020_cur."!cursor_capture"($P11, "sym")
    goto rxcap1022_done
  rxcap1022_fail:
    goto rx1020_fail
  rxcap1022_done:
    repr_bind_attr_int rx1020_cur, rx1020_curclass, "$!pos", rx1020_pos
    $P11 = rx1020_cur."O"("%relational, :pirop<issame>")
    repr_get_attr_int $I11, $P11, rx1020_curclass, "$!pos"
    lt $I11, 0, rx1020_fail
    nqp_rxmark rx1020_bstack, rxsubrule1023_pass, -1, 0
  rxsubrule1023_pass:
    rx1020_cstack = rx1020_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1020_pos, $P11, rx1020_curclass, "$!pos"
    rx1020_cur."!cursor_pass"(rx1020_pos, unicode:"infix:sym\x{ab}=:=\x{bb}", 'backtrack'=>1)
    .return (rx1020_cur)
  rx1020_restart:
    repr_get_attr_obj rx1020_cstack, rx1020_cur, rx1020_curclass, "$!cstack"
  rx1020_fail:
    unless rx1020_bstack, rx1020_done
    pop $I19, rx1020_bstack
    if_null rx1020_cstack, rx1020_cstack_done
    unless rx1020_cstack, rx1020_cstack_done
    dec $I19
    set $P11, rx1020_cstack[$I19]
  rx1020_cstack_done:
    pop rx1020_rep, rx1020_bstack
    pop rx1020_pos, rx1020_bstack
    pop $I19, rx1020_bstack
    lt rx1020_pos, -1, rx1020_done
    lt rx1020_pos, 0, rx1020_fail
    eq $I19, 0, rx1020_fail
    if_null rx1020_cstack, rx1020_jump
    elements $I18, rx1020_bstack
    le $I18, 0, rx1020_cut
    dec $I18
    set $I18, rx1020_bstack[$I18]
  rx1020_cut:
    assign rx1020_cstack, $I18
  rx1020_jump:
    jump $I19
  rx1020_done:
    rx1020_cur."!cursor_fail"()
    .return (rx1020_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "214_1337966799.879_caps"  :subid("713_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1338
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "214_1337966799.879_nfa"  :subid("714_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1338
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 61
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 58
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 61
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "O"
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<~~>"  :subid("215_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2529
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1339
    .lex "self", param_2529
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2530
    .lex "$/", $P2531
    .local string rx1024_tgt
    .local int rx1024_pos
    .local int rx1024_off
    .local int rx1024_eos
    .local int rx1024_rep
    .local pmc rx1024_cur
    .local pmc rx1024_curclass
    .local pmc rx1024_bstack
    .local pmc rx1024_cstack
    (rx1024_cur, rx1024_tgt, rx1024_pos, rx1024_curclass, rx1024_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1024_cur
    length rx1024_eos, rx1024_tgt
    eq $I19, 1, rx1024_restart
    repr_get_attr_int $I11, self, rx1024_curclass, "$!from"
    ne $I11, -1, rxscan1025_done
    goto rxscan1025_scan
  rxscan1025_loop:
    inc rx1024_pos
    gt rx1024_pos, rx1024_eos, rx1024_fail
    repr_bind_attr_int rx1024_cur, rx1024_curclass, "$!from", rx1024_pos
  rxscan1025_scan:
    nqp_rxmark rx1024_bstack, rxscan1025_loop, rx1024_pos, 0
  rxscan1025_done:
    nqp_rxmark rx1024_bstack, rxcap1026_fail, rx1024_pos, 0
    add $I11, rx1024_pos, 2
    gt $I11, rx1024_eos, rx1024_fail
    substr $S10, rx1024_tgt, rx1024_pos, 2
    ne $S10, ucs4:"~~", rx1024_fail
    add rx1024_pos, 2
    nqp_rxpeek $I19, rx1024_bstack, rxcap1026_fail
    inc $I19
    set $I11, rx1024_bstack[$I19]
    $P11 = rx1024_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1024_pos)
    rx1024_cstack = rx1024_cur."!cursor_capture"($P11, "sym")
    goto rxcap1026_done
  rxcap1026_fail:
    goto rx1024_fail
  rxcap1026_done:
    repr_bind_attr_int rx1024_cur, rx1024_curclass, "$!pos", rx1024_pos
    $P11 = rx1024_cur."O"("%relational, :reducecheck<smartmatch>")
    repr_get_attr_int $I11, $P11, rx1024_curclass, "$!pos"
    lt $I11, 0, rx1024_fail
    nqp_rxmark rx1024_bstack, rxsubrule1027_pass, -1, 0
  rxsubrule1027_pass:
    rx1024_cstack = rx1024_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1024_pos, $P11, rx1024_curclass, "$!pos"
    rx1024_cur."!cursor_pass"(rx1024_pos, "infix:sym<~~>", 'backtrack'=>1)
    .return (rx1024_cur)
  rx1024_restart:
    repr_get_attr_obj rx1024_cstack, rx1024_cur, rx1024_curclass, "$!cstack"
  rx1024_fail:
    unless rx1024_bstack, rx1024_done
    pop $I19, rx1024_bstack
    if_null rx1024_cstack, rx1024_cstack_done
    unless rx1024_cstack, rx1024_cstack_done
    dec $I19
    set $P11, rx1024_cstack[$I19]
  rx1024_cstack_done:
    pop rx1024_rep, rx1024_bstack
    pop rx1024_pos, rx1024_bstack
    pop $I19, rx1024_bstack
    lt rx1024_pos, -1, rx1024_done
    lt rx1024_pos, 0, rx1024_fail
    eq $I19, 0, rx1024_fail
    if_null rx1024_cstack, rx1024_jump
    elements $I18, rx1024_bstack
    le $I18, 0, rx1024_cut
    dec $I18
    set $I18, rx1024_bstack[$I18]
  rx1024_cut:
    assign rx1024_cstack, $I18
  rx1024_jump:
    jump $I19
  rx1024_done:
    rx1024_cur."!cursor_fail"()
    .return (rx1024_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "215_1337966799.879_caps"  :subid("715_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1339
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "215_1337966799.879_nfa"  :subid("716_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1339
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 126
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 126
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "O"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<&&>"  :subid("216_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2535
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1341
    .lex "self", param_2535
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2536
    .lex "$/", $P2537
    .local string rx1028_tgt
    .local int rx1028_pos
    .local int rx1028_off
    .local int rx1028_eos
    .local int rx1028_rep
    .local pmc rx1028_cur
    .local pmc rx1028_curclass
    .local pmc rx1028_bstack
    .local pmc rx1028_cstack
    (rx1028_cur, rx1028_tgt, rx1028_pos, rx1028_curclass, rx1028_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1028_cur
    length rx1028_eos, rx1028_tgt
    eq $I19, 1, rx1028_restart
    repr_get_attr_int $I11, self, rx1028_curclass, "$!from"
    ne $I11, -1, rxscan1029_done
    goto rxscan1029_scan
  rxscan1029_loop:
    inc rx1028_pos
    gt rx1028_pos, rx1028_eos, rx1028_fail
    repr_bind_attr_int rx1028_cur, rx1028_curclass, "$!from", rx1028_pos
  rxscan1029_scan:
    nqp_rxmark rx1028_bstack, rxscan1029_loop, rx1028_pos, 0
  rxscan1029_done:
    nqp_rxmark rx1028_bstack, rxcap1030_fail, rx1028_pos, 0
    add $I11, rx1028_pos, 2
    gt $I11, rx1028_eos, rx1028_fail
    substr $S10, rx1028_tgt, rx1028_pos, 2
    ne $S10, ucs4:"&&", rx1028_fail
    add rx1028_pos, 2
    nqp_rxpeek $I19, rx1028_bstack, rxcap1030_fail
    inc $I19
    set $I11, rx1028_bstack[$I19]
    $P11 = rx1028_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1028_pos)
    rx1028_cstack = rx1028_cur."!cursor_capture"($P11, "sym")
    goto rxcap1030_done
  rxcap1030_fail:
    goto rx1028_fail
  rxcap1030_done:
    repr_bind_attr_int rx1028_cur, rx1028_curclass, "$!pos", rx1028_pos
    $P11 = rx1028_cur."O"("%tight_and, :pasttype<if>")
    repr_get_attr_int $I11, $P11, rx1028_curclass, "$!pos"
    lt $I11, 0, rx1028_fail
    nqp_rxmark rx1028_bstack, rxsubrule1031_pass, -1, 0
  rxsubrule1031_pass:
    rx1028_cstack = rx1028_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1028_pos, $P11, rx1028_curclass, "$!pos"
    rx1028_cur."!cursor_pass"(rx1028_pos, "infix:sym<&&>", 'backtrack'=>1)
    .return (rx1028_cur)
  rx1028_restart:
    repr_get_attr_obj rx1028_cstack, rx1028_cur, rx1028_curclass, "$!cstack"
  rx1028_fail:
    unless rx1028_bstack, rx1028_done
    pop $I19, rx1028_bstack
    if_null rx1028_cstack, rx1028_cstack_done
    unless rx1028_cstack, rx1028_cstack_done
    dec $I19
    set $P11, rx1028_cstack[$I19]
  rx1028_cstack_done:
    pop rx1028_rep, rx1028_bstack
    pop rx1028_pos, rx1028_bstack
    pop $I19, rx1028_bstack
    lt rx1028_pos, -1, rx1028_done
    lt rx1028_pos, 0, rx1028_fail
    eq $I19, 0, rx1028_fail
    if_null rx1028_cstack, rx1028_jump
    elements $I18, rx1028_bstack
    le $I18, 0, rx1028_cut
    dec $I18
    set $I18, rx1028_bstack[$I18]
  rx1028_cut:
    assign rx1028_cstack, $I18
  rx1028_jump:
    jump $I19
  rx1028_done:
    rx1028_cur."!cursor_fail"()
    .return (rx1028_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "216_1337966799.879_caps"  :subid("717_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1341
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "216_1337966799.879_nfa"  :subid("718_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1341
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 38
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 38
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "O"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<||>"  :subid("217_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2541
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1343
    .lex "self", param_2541
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2542
    .lex "$/", $P2543
    .local string rx1032_tgt
    .local int rx1032_pos
    .local int rx1032_off
    .local int rx1032_eos
    .local int rx1032_rep
    .local pmc rx1032_cur
    .local pmc rx1032_curclass
    .local pmc rx1032_bstack
    .local pmc rx1032_cstack
    (rx1032_cur, rx1032_tgt, rx1032_pos, rx1032_curclass, rx1032_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1032_cur
    length rx1032_eos, rx1032_tgt
    eq $I19, 1, rx1032_restart
    repr_get_attr_int $I11, self, rx1032_curclass, "$!from"
    ne $I11, -1, rxscan1033_done
    goto rxscan1033_scan
  rxscan1033_loop:
    inc rx1032_pos
    gt rx1032_pos, rx1032_eos, rx1032_fail
    repr_bind_attr_int rx1032_cur, rx1032_curclass, "$!from", rx1032_pos
  rxscan1033_scan:
    nqp_rxmark rx1032_bstack, rxscan1033_loop, rx1032_pos, 0
  rxscan1033_done:
    nqp_rxmark rx1032_bstack, rxcap1034_fail, rx1032_pos, 0
    add $I11, rx1032_pos, 2
    gt $I11, rx1032_eos, rx1032_fail
    substr $S10, rx1032_tgt, rx1032_pos, 2
    ne $S10, ucs4:"||", rx1032_fail
    add rx1032_pos, 2
    nqp_rxpeek $I19, rx1032_bstack, rxcap1034_fail
    inc $I19
    set $I11, rx1032_bstack[$I19]
    $P11 = rx1032_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1032_pos)
    rx1032_cstack = rx1032_cur."!cursor_capture"($P11, "sym")
    goto rxcap1034_done
  rxcap1034_fail:
    goto rx1032_fail
  rxcap1034_done:
    repr_bind_attr_int rx1032_cur, rx1032_curclass, "$!pos", rx1032_pos
    $P11 = rx1032_cur."O"("%tight_or, :pasttype<unless>")
    repr_get_attr_int $I11, $P11, rx1032_curclass, "$!pos"
    lt $I11, 0, rx1032_fail
    nqp_rxmark rx1032_bstack, rxsubrule1035_pass, -1, 0
  rxsubrule1035_pass:
    rx1032_cstack = rx1032_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1032_pos, $P11, rx1032_curclass, "$!pos"
    rx1032_cur."!cursor_pass"(rx1032_pos, "infix:sym<||>", 'backtrack'=>1)
    .return (rx1032_cur)
  rx1032_restart:
    repr_get_attr_obj rx1032_cstack, rx1032_cur, rx1032_curclass, "$!cstack"
  rx1032_fail:
    unless rx1032_bstack, rx1032_done
    pop $I19, rx1032_bstack
    if_null rx1032_cstack, rx1032_cstack_done
    unless rx1032_cstack, rx1032_cstack_done
    dec $I19
    set $P11, rx1032_cstack[$I19]
  rx1032_cstack_done:
    pop rx1032_rep, rx1032_bstack
    pop rx1032_pos, rx1032_bstack
    pop $I19, rx1032_bstack
    lt rx1032_pos, -1, rx1032_done
    lt rx1032_pos, 0, rx1032_fail
    eq $I19, 0, rx1032_fail
    if_null rx1032_cstack, rx1032_jump
    elements $I18, rx1032_bstack
    le $I18, 0, rx1032_cut
    dec $I18
    set $I18, rx1032_bstack[$I18]
  rx1032_cut:
    assign rx1032_cstack, $I18
  rx1032_jump:
    jump $I19
  rx1032_done:
    rx1032_cur."!cursor_fail"()
    .return (rx1032_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "217_1337966799.879_caps"  :subid("719_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1343
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "217_1337966799.879_nfa"  :subid("720_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1343
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 124
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 124
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "O"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<//>"  :subid("218_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2547
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1344
    .lex "self", param_2547
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2548
    .lex "$/", $P2549
    .local string rx1036_tgt
    .local int rx1036_pos
    .local int rx1036_off
    .local int rx1036_eos
    .local int rx1036_rep
    .local pmc rx1036_cur
    .local pmc rx1036_curclass
    .local pmc rx1036_bstack
    .local pmc rx1036_cstack
    (rx1036_cur, rx1036_tgt, rx1036_pos, rx1036_curclass, rx1036_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1036_cur
    length rx1036_eos, rx1036_tgt
    eq $I19, 1, rx1036_restart
    repr_get_attr_int $I11, self, rx1036_curclass, "$!from"
    ne $I11, -1, rxscan1037_done
    goto rxscan1037_scan
  rxscan1037_loop:
    inc rx1036_pos
    gt rx1036_pos, rx1036_eos, rx1036_fail
    repr_bind_attr_int rx1036_cur, rx1036_curclass, "$!from", rx1036_pos
  rxscan1037_scan:
    nqp_rxmark rx1036_bstack, rxscan1037_loop, rx1036_pos, 0
  rxscan1037_done:
    nqp_rxmark rx1036_bstack, rxcap1038_fail, rx1036_pos, 0
    add $I11, rx1036_pos, 2
    gt $I11, rx1036_eos, rx1036_fail
    substr $S10, rx1036_tgt, rx1036_pos, 2
    ne $S10, ucs4:"//", rx1036_fail
    add rx1036_pos, 2
    nqp_rxpeek $I19, rx1036_bstack, rxcap1038_fail
    inc $I19
    set $I11, rx1036_bstack[$I19]
    $P11 = rx1036_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1036_pos)
    rx1036_cstack = rx1036_cur."!cursor_capture"($P11, "sym")
    goto rxcap1038_done
  rxcap1038_fail:
    goto rx1036_fail
  rxcap1038_done:
    repr_bind_attr_int rx1036_cur, rx1036_curclass, "$!pos", rx1036_pos
    $P11 = rx1036_cur."O"("%tight_or, :pasttype<def_or>")
    repr_get_attr_int $I11, $P11, rx1036_curclass, "$!pos"
    lt $I11, 0, rx1036_fail
    nqp_rxmark rx1036_bstack, rxsubrule1039_pass, -1, 0
  rxsubrule1039_pass:
    rx1036_cstack = rx1036_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1036_pos, $P11, rx1036_curclass, "$!pos"
    rx1036_cur."!cursor_pass"(rx1036_pos, "infix:sym<//>", 'backtrack'=>1)
    .return (rx1036_cur)
  rx1036_restart:
    repr_get_attr_obj rx1036_cstack, rx1036_cur, rx1036_curclass, "$!cstack"
  rx1036_fail:
    unless rx1036_bstack, rx1036_done
    pop $I19, rx1036_bstack
    if_null rx1036_cstack, rx1036_cstack_done
    unless rx1036_cstack, rx1036_cstack_done
    dec $I19
    set $P11, rx1036_cstack[$I19]
  rx1036_cstack_done:
    pop rx1036_rep, rx1036_bstack
    pop rx1036_pos, rx1036_bstack
    pop $I19, rx1036_bstack
    lt rx1036_pos, -1, rx1036_done
    lt rx1036_pos, 0, rx1036_fail
    eq $I19, 0, rx1036_fail
    if_null rx1036_cstack, rx1036_jump
    elements $I18, rx1036_bstack
    le $I18, 0, rx1036_cut
    dec $I18
    set $I18, rx1036_bstack[$I18]
  rx1036_cut:
    assign rx1036_cstack, $I18
  rx1036_jump:
    jump $I19
  rx1036_done:
    rx1036_cur."!cursor_fail"()
    .return (rx1036_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "218_1337966799.879_caps"  :subid("721_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1344
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "218_1337966799.879_nfa"  :subid("722_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1344
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 47
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 47
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "O"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<?? !!>"  :subid("219_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2553
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1346
    .lex "self", param_2553
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2554
    .lex "$/", $P2555
    .local string rx1040_tgt
    .local int rx1040_pos
    .local int rx1040_off
    .local int rx1040_eos
    .local int rx1040_rep
    .local pmc rx1040_cur
    .local pmc rx1040_curclass
    .local pmc rx1040_bstack
    .local pmc rx1040_cstack
    (rx1040_cur, rx1040_tgt, rx1040_pos, rx1040_curclass, rx1040_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1040_cur
    length rx1040_eos, rx1040_tgt
    eq $I19, 1, rx1040_restart
    repr_get_attr_int $I11, self, rx1040_curclass, "$!from"
    ne $I11, -1, rxscan1041_done
    goto rxscan1041_scan
  rxscan1041_loop:
    inc rx1040_pos
    gt rx1040_pos, rx1040_eos, rx1040_fail
    repr_bind_attr_int rx1040_cur, rx1040_curclass, "$!from", rx1040_pos
  rxscan1041_scan:
    nqp_rxmark rx1040_bstack, rxscan1041_loop, rx1040_pos, 0
  rxscan1041_done:
    add $I11, rx1040_pos, 2
    gt $I11, rx1040_eos, rx1040_fail
    substr $S10, rx1040_tgt, rx1040_pos, 2
    ne $S10, ucs4:"??", rx1040_fail
    add rx1040_pos, 2
    repr_bind_attr_int rx1040_cur, rx1040_curclass, "$!pos", rx1040_pos
    $P11 = rx1040_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1040_curclass, "$!pos"
    lt $I11, 0, rx1040_fail
    repr_get_attr_int rx1040_pos, $P11, rx1040_curclass, "$!pos"
    repr_bind_attr_int rx1040_cur, rx1040_curclass, "$!pos", rx1040_pos
    $P11 = rx1040_cur."EXPR"("i=")
    repr_get_attr_int $I11, $P11, rx1040_curclass, "$!pos"
    lt $I11, 0, rx1040_fail
    nqp_rxmark rx1040_bstack, rxsubrule1043_pass, -1, 0
  rxsubrule1043_pass:
    rx1040_cstack = rx1040_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx1040_pos, $P11, rx1040_curclass, "$!pos"
    add $I11, rx1040_pos, 2
    gt $I11, rx1040_eos, rx1040_fail
    substr $S10, rx1040_tgt, rx1040_pos, 2
    ne $S10, ucs4:"!!", rx1040_fail
    add rx1040_pos, 2
    repr_bind_attr_int rx1040_cur, rx1040_curclass, "$!pos", rx1040_pos
    $P11 = rx1040_cur."O"("%conditional, :reducecheck<ternary>, :pasttype<if>")
    repr_get_attr_int $I11, $P11, rx1040_curclass, "$!pos"
    lt $I11, 0, rx1040_fail
    nqp_rxmark rx1040_bstack, rxsubrule1044_pass, -1, 0
  rxsubrule1044_pass:
    rx1040_cstack = rx1040_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1040_pos, $P11, rx1040_curclass, "$!pos"
    rx1040_cur."!cursor_pass"(rx1040_pos, "infix:sym<?? !!>", 'backtrack'=>1)
    .return (rx1040_cur)
  rx1040_restart:
    repr_get_attr_obj rx1040_cstack, rx1040_cur, rx1040_curclass, "$!cstack"
  rx1040_fail:
    unless rx1040_bstack, rx1040_done
    pop $I19, rx1040_bstack
    if_null rx1040_cstack, rx1040_cstack_done
    unless rx1040_cstack, rx1040_cstack_done
    dec $I19
    set $P11, rx1040_cstack[$I19]
  rx1040_cstack_done:
    pop rx1040_rep, rx1040_bstack
    pop rx1040_pos, rx1040_bstack
    pop $I19, rx1040_bstack
    lt rx1040_pos, -1, rx1040_done
    lt rx1040_pos, 0, rx1040_fail
    eq $I19, 0, rx1040_fail
    if_null rx1040_cstack, rx1040_jump
    elements $I18, rx1040_bstack
    le $I18, 0, rx1040_cut
    dec $I18
    set $I18, rx1040_bstack[$I18]
  rx1040_cut:
    assign rx1040_cstack, $I18
  rx1040_jump:
    jump $I19
  rx1040_done:
    rx1040_cur."!cursor_fail"()
    .return (rx1040_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "219_1337966799.879_caps"  :subid("723_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1346
    new $P104, "Hash"
    set $P104["EXPR"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "219_1337966799.879_nfa"  :subid("724_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1346
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 63
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 63
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "ws"
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "EXPR"
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 33
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 33
    push $P110, 7
    new $P111, "ResizablePMCArray"
    push $P111, 8
    push $P111, "O"
    push $P111, 0
    new $P112, "ResizablePMCArray"
    push $P112, $P104
    push $P112, $P105
    push $P112, $P106
    push $P112, $P107
    push $P112, $P108
    push $P112, $P109
    push $P112, $P110
    push $P112, $P111
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<=>"  :subid("220_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2559
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1354
    .lex "self", param_2559
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2560
    .lex "$/", $P2561
    .local string rx1045_tgt
    .local int rx1045_pos
    .local int rx1045_off
    .local int rx1045_eos
    .local int rx1045_rep
    .local pmc rx1045_cur
    .local pmc rx1045_curclass
    .local pmc rx1045_bstack
    .local pmc rx1045_cstack
    (rx1045_cur, rx1045_tgt, rx1045_pos, rx1045_curclass, rx1045_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1045_cur
    length rx1045_eos, rx1045_tgt
    eq $I19, 1, rx1045_restart
    repr_get_attr_int $I11, self, rx1045_curclass, "$!from"
    ne $I11, -1, rxscan1046_done
    goto rxscan1046_scan
  rxscan1046_loop:
    inc rx1045_pos
    gt rx1045_pos, rx1045_eos, rx1045_fail
    repr_bind_attr_int rx1045_cur, rx1045_curclass, "$!from", rx1045_pos
  rxscan1046_scan:
    nqp_rxmark rx1045_bstack, rxscan1046_loop, rx1045_pos, 0
  rxscan1046_done:
    nqp_rxmark rx1045_bstack, rxcap1047_fail, rx1045_pos, 0
    add $I11, rx1045_pos, 1
    gt $I11, rx1045_eos, rx1045_fail
    substr $S10, rx1045_tgt, rx1045_pos, 1
    ne $S10, ucs4:"=", rx1045_fail
    add rx1045_pos, 1
    nqp_rxpeek $I19, rx1045_bstack, rxcap1047_fail
    inc $I19
    set $I11, rx1045_bstack[$I19]
    $P11 = rx1045_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1045_pos)
    rx1045_cstack = rx1045_cur."!cursor_capture"($P11, "sym")
    goto rxcap1047_done
  rxcap1047_fail:
    goto rx1045_fail
  rxcap1047_done:
    repr_bind_attr_int rx1045_cur, rx1045_curclass, "$!pos", rx1045_pos
    $P11 = rx1045_cur."panic"("Assignment (\"=\") not supported in NQP, use \":=\" instead")
    repr_get_attr_int $I11, $P11, rx1045_curclass, "$!pos"
    lt $I11, 0, rx1045_fail
    repr_get_attr_int rx1045_pos, $P11, rx1045_curclass, "$!pos"
    rx1045_cur."!cursor_pass"(rx1045_pos, "infix:sym<=>", 'backtrack'=>1)
    .return (rx1045_cur)
  rx1045_restart:
    repr_get_attr_obj rx1045_cstack, rx1045_cur, rx1045_curclass, "$!cstack"
  rx1045_fail:
    unless rx1045_bstack, rx1045_done
    pop $I19, rx1045_bstack
    if_null rx1045_cstack, rx1045_cstack_done
    unless rx1045_cstack, rx1045_cstack_done
    dec $I19
    set $P11, rx1045_cstack[$I19]
  rx1045_cstack_done:
    pop rx1045_rep, rx1045_bstack
    pop rx1045_pos, rx1045_bstack
    pop $I19, rx1045_bstack
    lt rx1045_pos, -1, rx1045_done
    lt rx1045_pos, 0, rx1045_fail
    eq $I19, 0, rx1045_fail
    if_null rx1045_cstack, rx1045_jump
    elements $I18, rx1045_bstack
    le $I18, 0, rx1045_cut
    dec $I18
    set $I18, rx1045_bstack[$I18]
  rx1045_cut:
    assign rx1045_cstack, $I18
  rx1045_jump:
    jump $I19
  rx1045_done:
    rx1045_cur."!cursor_fail"()
    .return (rx1045_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "220_1337966799.879_caps"  :subid("725_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1354
    new $P104, "Hash"
    set $P104["sym"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "220_1337966799.879_nfa"  :subid("726_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1354
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 61
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "panic"
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<:=>"  :subid("221_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2565
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1357
    .lex "self", param_2565
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2566
    .lex "$/", $P2567
    .local string rx1049_tgt
    .local int rx1049_pos
    .local int rx1049_off
    .local int rx1049_eos
    .local int rx1049_rep
    .local pmc rx1049_cur
    .local pmc rx1049_curclass
    .local pmc rx1049_bstack
    .local pmc rx1049_cstack
    (rx1049_cur, rx1049_tgt, rx1049_pos, rx1049_curclass, rx1049_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1049_cur
    length rx1049_eos, rx1049_tgt
    eq $I19, 1, rx1049_restart
    repr_get_attr_int $I11, self, rx1049_curclass, "$!from"
    ne $I11, -1, rxscan1050_done
    goto rxscan1050_scan
  rxscan1050_loop:
    inc rx1049_pos
    gt rx1049_pos, rx1049_eos, rx1049_fail
    repr_bind_attr_int rx1049_cur, rx1049_curclass, "$!from", rx1049_pos
  rxscan1050_scan:
    nqp_rxmark rx1049_bstack, rxscan1050_loop, rx1049_pos, 0
  rxscan1050_done:
    nqp_rxmark rx1049_bstack, rxcap1051_fail, rx1049_pos, 0
    add $I11, rx1049_pos, 2
    gt $I11, rx1049_eos, rx1049_fail
    substr $S10, rx1049_tgt, rx1049_pos, 2
    ne $S10, ucs4:":=", rx1049_fail
    add rx1049_pos, 2
    nqp_rxpeek $I19, rx1049_bstack, rxcap1051_fail
    inc $I19
    set $I11, rx1049_bstack[$I19]
    $P11 = rx1049_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1049_pos)
    rx1049_cstack = rx1049_cur."!cursor_capture"($P11, "sym")
    goto rxcap1051_done
  rxcap1051_fail:
    goto rx1049_fail
  rxcap1051_done:
    repr_bind_attr_int rx1049_cur, rx1049_curclass, "$!pos", rx1049_pos
    $P11 = rx1049_cur."O"("%assignment, :pasttype<bind_6model>")
    repr_get_attr_int $I11, $P11, rx1049_curclass, "$!pos"
    lt $I11, 0, rx1049_fail
    nqp_rxmark rx1049_bstack, rxsubrule1052_pass, -1, 0
  rxsubrule1052_pass:
    rx1049_cstack = rx1049_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1049_pos, $P11, rx1049_curclass, "$!pos"
    rx1049_cur."!cursor_pass"(rx1049_pos, "infix:sym<:=>", 'backtrack'=>1)
    .return (rx1049_cur)
  rx1049_restart:
    repr_get_attr_obj rx1049_cstack, rx1049_cur, rx1049_curclass, "$!cstack"
  rx1049_fail:
    unless rx1049_bstack, rx1049_done
    pop $I19, rx1049_bstack
    if_null rx1049_cstack, rx1049_cstack_done
    unless rx1049_cstack, rx1049_cstack_done
    dec $I19
    set $P11, rx1049_cstack[$I19]
  rx1049_cstack_done:
    pop rx1049_rep, rx1049_bstack
    pop rx1049_pos, rx1049_bstack
    pop $I19, rx1049_bstack
    lt rx1049_pos, -1, rx1049_done
    lt rx1049_pos, 0, rx1049_fail
    eq $I19, 0, rx1049_fail
    if_null rx1049_cstack, rx1049_jump
    elements $I18, rx1049_bstack
    le $I18, 0, rx1049_cut
    dec $I18
    set $I18, rx1049_bstack[$I18]
  rx1049_cut:
    assign rx1049_cstack, $I18
  rx1049_jump:
    jump $I19
  rx1049_done:
    rx1049_cur."!cursor_fail"()
    .return (rx1049_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "221_1337966799.879_caps"  :subid("727_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1357
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "221_1337966799.879_nfa"  :subid("728_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1357
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 58
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 61
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "O"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, $P104
    push $P108, $P105
    push $P108, $P106
    push $P108, $P107
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<::=>"  :subid("222_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2571
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1358
    .lex "self", param_2571
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2572
    .lex "$/", $P2573
    .local string rx1053_tgt
    .local int rx1053_pos
    .local int rx1053_off
    .local int rx1053_eos
    .local int rx1053_rep
    .local pmc rx1053_cur
    .local pmc rx1053_curclass
    .local pmc rx1053_bstack
    .local pmc rx1053_cstack
    (rx1053_cur, rx1053_tgt, rx1053_pos, rx1053_curclass, rx1053_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1053_cur
    length rx1053_eos, rx1053_tgt
    eq $I19, 1, rx1053_restart
    repr_get_attr_int $I11, self, rx1053_curclass, "$!from"
    ne $I11, -1, rxscan1054_done
    goto rxscan1054_scan
  rxscan1054_loop:
    inc rx1053_pos
    gt rx1053_pos, rx1053_eos, rx1053_fail
    repr_bind_attr_int rx1053_cur, rx1053_curclass, "$!from", rx1053_pos
  rxscan1054_scan:
    nqp_rxmark rx1053_bstack, rxscan1054_loop, rx1053_pos, 0
  rxscan1054_done:
    nqp_rxmark rx1053_bstack, rxcap1055_fail, rx1053_pos, 0
    add $I11, rx1053_pos, 3
    gt $I11, rx1053_eos, rx1053_fail
    substr $S10, rx1053_tgt, rx1053_pos, 3
    ne $S10, ucs4:"::=", rx1053_fail
    add rx1053_pos, 3
    nqp_rxpeek $I19, rx1053_bstack, rxcap1055_fail
    inc $I19
    set $I11, rx1053_bstack[$I19]
    $P11 = rx1053_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1053_pos)
    rx1053_cstack = rx1053_cur."!cursor_capture"($P11, "sym")
    goto rxcap1055_done
  rxcap1055_fail:
    goto rx1053_fail
  rxcap1055_done:
    repr_bind_attr_int rx1053_cur, rx1053_curclass, "$!pos", rx1053_pos
    $P11 = rx1053_cur."O"("%assignment, :pasttype<bind_6model>")
    repr_get_attr_int $I11, $P11, rx1053_curclass, "$!pos"
    lt $I11, 0, rx1053_fail
    nqp_rxmark rx1053_bstack, rxsubrule1056_pass, -1, 0
  rxsubrule1056_pass:
    rx1053_cstack = rx1053_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1053_pos, $P11, rx1053_curclass, "$!pos"
    rx1053_cur."!cursor_pass"(rx1053_pos, "infix:sym<::=>", 'backtrack'=>1)
    .return (rx1053_cur)
  rx1053_restart:
    repr_get_attr_obj rx1053_cstack, rx1053_cur, rx1053_curclass, "$!cstack"
  rx1053_fail:
    unless rx1053_bstack, rx1053_done
    pop $I19, rx1053_bstack
    if_null rx1053_cstack, rx1053_cstack_done
    unless rx1053_cstack, rx1053_cstack_done
    dec $I19
    set $P11, rx1053_cstack[$I19]
  rx1053_cstack_done:
    pop rx1053_rep, rx1053_bstack
    pop rx1053_pos, rx1053_bstack
    pop $I19, rx1053_bstack
    lt rx1053_pos, -1, rx1053_done
    lt rx1053_pos, 0, rx1053_fail
    eq $I19, 0, rx1053_fail
    if_null rx1053_cstack, rx1053_jump
    elements $I18, rx1053_bstack
    le $I18, 0, rx1053_cut
    dec $I18
    set $I18, rx1053_bstack[$I18]
  rx1053_cut:
    assign rx1053_cstack, $I18
  rx1053_jump:
    jump $I19
  rx1053_done:
    rx1053_cur."!cursor_fail"()
    .return (rx1053_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "222_1337966799.879_caps"  :subid("729_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1358
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "222_1337966799.879_nfa"  :subid("730_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1358
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 58
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 58
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 61
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "O"
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<,>"  :subid("223_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2577
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1360
    .lex "self", param_2577
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2578
    .lex "$/", $P2579
    .local string rx1057_tgt
    .local int rx1057_pos
    .local int rx1057_off
    .local int rx1057_eos
    .local int rx1057_rep
    .local pmc rx1057_cur
    .local pmc rx1057_curclass
    .local pmc rx1057_bstack
    .local pmc rx1057_cstack
    (rx1057_cur, rx1057_tgt, rx1057_pos, rx1057_curclass, rx1057_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1057_cur
    length rx1057_eos, rx1057_tgt
    eq $I19, 1, rx1057_restart
    repr_get_attr_int $I11, self, rx1057_curclass, "$!from"
    ne $I11, -1, rxscan1058_done
    goto rxscan1058_scan
  rxscan1058_loop:
    inc rx1057_pos
    gt rx1057_pos, rx1057_eos, rx1057_fail
    repr_bind_attr_int rx1057_cur, rx1057_curclass, "$!from", rx1057_pos
  rxscan1058_scan:
    nqp_rxmark rx1057_bstack, rxscan1058_loop, rx1057_pos, 0
  rxscan1058_done:
    nqp_rxmark rx1057_bstack, rxcap1059_fail, rx1057_pos, 0
    add $I11, rx1057_pos, 1
    gt $I11, rx1057_eos, rx1057_fail
    substr $S10, rx1057_tgt, rx1057_pos, 1
    ne $S10, ucs4:",", rx1057_fail
    add rx1057_pos, 1
    nqp_rxpeek $I19, rx1057_bstack, rxcap1059_fail
    inc $I19
    set $I11, rx1057_bstack[$I19]
    $P11 = rx1057_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1057_pos)
    rx1057_cstack = rx1057_cur."!cursor_capture"($P11, "sym")
    goto rxcap1059_done
  rxcap1059_fail:
    goto rx1057_fail
  rxcap1059_done:
    repr_bind_attr_int rx1057_cur, rx1057_curclass, "$!pos", rx1057_pos
    $P11 = rx1057_cur."O"("%comma, :pasttype<list>")
    repr_get_attr_int $I11, $P11, rx1057_curclass, "$!pos"
    lt $I11, 0, rx1057_fail
    nqp_rxmark rx1057_bstack, rxsubrule1060_pass, -1, 0
  rxsubrule1060_pass:
    rx1057_cstack = rx1057_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1057_pos, $P11, rx1057_curclass, "$!pos"
    rx1057_cur."!cursor_pass"(rx1057_pos, "infix:sym<,>", 'backtrack'=>1)
    .return (rx1057_cur)
  rx1057_restart:
    repr_get_attr_obj rx1057_cstack, rx1057_cur, rx1057_curclass, "$!cstack"
  rx1057_fail:
    unless rx1057_bstack, rx1057_done
    pop $I19, rx1057_bstack
    if_null rx1057_cstack, rx1057_cstack_done
    unless rx1057_cstack, rx1057_cstack_done
    dec $I19
    set $P11, rx1057_cstack[$I19]
  rx1057_cstack_done:
    pop rx1057_rep, rx1057_bstack
    pop rx1057_pos, rx1057_bstack
    pop $I19, rx1057_bstack
    lt rx1057_pos, -1, rx1057_done
    lt rx1057_pos, 0, rx1057_fail
    eq $I19, 0, rx1057_fail
    if_null rx1057_cstack, rx1057_jump
    elements $I18, rx1057_bstack
    le $I18, 0, rx1057_cut
    dec $I18
    set $I18, rx1057_bstack[$I18]
  rx1057_cut:
    assign rx1057_cstack, $I18
  rx1057_jump:
    jump $I19
  rx1057_done:
    rx1057_cur."!cursor_fail"()
    .return (rx1057_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "223_1337966799.879_caps"  :subid("731_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1360
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "223_1337966799.879_nfa"  :subid("732_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1360
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 44
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "O"
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<return>"  :subid("224_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2583
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1362
    .const 'Sub' $P2589 = "735_1337966799.879" 
    capture_lex $P2589
    .lex "self", param_2583
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2584
    .lex "$/", $P2585
    .local string rx1061_tgt
    .local int rx1061_pos
    .local int rx1061_off
    .local int rx1061_eos
    .local int rx1061_rep
    .local pmc rx1061_cur
    .local pmc rx1061_curclass
    .local pmc rx1061_bstack
    .local pmc rx1061_cstack
    (rx1061_cur, rx1061_tgt, rx1061_pos, rx1061_curclass, rx1061_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1061_cur
    length rx1061_eos, rx1061_tgt
    eq $I19, 1, rx1061_restart
    repr_get_attr_int $I11, self, rx1061_curclass, "$!from"
    ne $I11, -1, rxscan1062_done
    goto rxscan1062_scan
  rxscan1062_loop:
    inc rx1061_pos
    gt rx1061_pos, rx1061_eos, rx1061_fail
    repr_bind_attr_int rx1061_cur, rx1061_curclass, "$!from", rx1061_pos
  rxscan1062_scan:
    nqp_rxmark rx1061_bstack, rxscan1062_loop, rx1061_pos, 0
  rxscan1062_done:
    nqp_rxmark rx1061_bstack, rxcap1063_fail, rx1061_pos, 0
    add $I11, rx1061_pos, 6
    gt $I11, rx1061_eos, rx1061_fail
    substr $S10, rx1061_tgt, rx1061_pos, 6
    ne $S10, ucs4:"return", rx1061_fail
    add rx1061_pos, 6
    nqp_rxpeek $I19, rx1061_bstack, rxcap1063_fail
    inc $I19
    set $I11, rx1061_bstack[$I19]
    $P11 = rx1061_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1061_pos)
    rx1061_cstack = rx1061_cur."!cursor_capture"($P11, "sym")
    goto rxcap1063_done
  rxcap1063_fail:
    goto rx1061_fail
  rxcap1063_done:
    ge rx1061_pos, rx1061_eos, rx1061_fail
    is_cclass $I11, .CCLASS_WHITESPACE, rx1061_tgt, rx1061_pos
    unless $I11, rx1061_fail
    add rx1061_pos, 1
    repr_bind_attr_int rx1061_cur, rx1061_curclass, "$!pos", rx1061_pos
    $P11 = rx1061_cur."O"("%list_prefix, :pasttype<return>")
    repr_get_attr_int $I11, $P11, rx1061_curclass, "$!pos"
    lt $I11, 0, rx1061_fail
    nqp_rxmark rx1061_bstack, rxsubrule1064_pass, -1, 0
  rxsubrule1064_pass:
    rx1061_cstack = rx1061_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1061_pos, $P11, rx1061_curclass, "$!pos"
    repr_bind_attr_int rx1061_cur, rx1061_curclass, "$!pos", rx1061_pos
    store_lex unicode:"$\x{a2}", rx1061_cur
    find_lex $P104, unicode:"$\x{a2}"
    $P105 = $P104."MATCH"()
    store_lex "$/", $P105
    .const 'Sub' $P2589 = "735_1337966799.879" 
    capture_lex $P2589
    $P107 = $P2589()
    rx1061_cur."!cursor_pass"(rx1061_pos, "prefix:sym<return>", 'backtrack'=>1)
    .return (rx1061_cur)
  rx1061_restart:
    repr_get_attr_obj rx1061_cstack, rx1061_cur, rx1061_curclass, "$!cstack"
  rx1061_fail:
    unless rx1061_bstack, rx1061_done
    pop $I19, rx1061_bstack
    if_null rx1061_cstack, rx1061_cstack_done
    unless rx1061_cstack, rx1061_cstack_done
    dec $I19
    set $P11, rx1061_cstack[$I19]
  rx1061_cstack_done:
    pop rx1061_rep, rx1061_bstack
    pop rx1061_pos, rx1061_bstack
    pop $I19, rx1061_bstack
    lt rx1061_pos, -1, rx1061_done
    lt rx1061_pos, 0, rx1061_fail
    eq $I19, 0, rx1061_fail
    if_null rx1061_cstack, rx1061_jump
    elements $I18, rx1061_bstack
    le $I18, 0, rx1061_cut
    dec $I18
    set $I18, rx1061_bstack[$I18]
  rx1061_cut:
    assign rx1061_cstack, $I18
  rx1061_jump:
    jump $I19
  rx1061_done:
    rx1061_cur."!cursor_fail"()
    .return (rx1061_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "224_1337966799.879_caps"  :subid("733_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1362
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "224_1337966799.879_nfa"  :subid("734_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1362
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 114
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 101
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 116
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 117
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 2
    push $P109, 114
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 110
    push $P110, 7
    new $P111, "ResizablePMCArray"
    push $P111, 4
    push $P111, 32
    push $P111, 8
    new $P112, "ResizablePMCArray"
    push $P112, 8
    push $P112, "O"
    push $P112, 9
    new $P113, "ResizablePMCArray"
    push $P113, 0
    push $P113, 0
    push $P113, 0
    new $P114, "ResizablePMCArray"
    push $P114, $P104
    push $P114, $P105
    push $P114, $P106
    push $P114, $P107
    push $P114, $P108
    push $P114, $P109
    push $P114, $P110
    push $P114, $P111
    push $P114, $P112
    push $P114, $P113
    .return ($P114)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block2588"  :anon :subid("735_1337966799.879") :outer("224_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1362
    new $P106, "Float"
    assign $P106, 1
    store_dynamic_lex "$*RETURN_USED", $P106
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<make>"  :subid("225_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2591
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1363
    .lex "self", param_2591
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2592
    .lex "$/", $P2593
    .local string rx1065_tgt
    .local int rx1065_pos
    .local int rx1065_off
    .local int rx1065_eos
    .local int rx1065_rep
    .local pmc rx1065_cur
    .local pmc rx1065_curclass
    .local pmc rx1065_bstack
    .local pmc rx1065_cstack
    (rx1065_cur, rx1065_tgt, rx1065_pos, rx1065_curclass, rx1065_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1065_cur
    length rx1065_eos, rx1065_tgt
    eq $I19, 1, rx1065_restart
    repr_get_attr_int $I11, self, rx1065_curclass, "$!from"
    ne $I11, -1, rxscan1066_done
    goto rxscan1066_scan
  rxscan1066_loop:
    inc rx1065_pos
    gt rx1065_pos, rx1065_eos, rx1065_fail
    repr_bind_attr_int rx1065_cur, rx1065_curclass, "$!from", rx1065_pos
  rxscan1066_scan:
    nqp_rxmark rx1065_bstack, rxscan1066_loop, rx1065_pos, 0
  rxscan1066_done:
    nqp_rxmark rx1065_bstack, rxcap1067_fail, rx1065_pos, 0
    add $I11, rx1065_pos, 4
    gt $I11, rx1065_eos, rx1065_fail
    substr $S10, rx1065_tgt, rx1065_pos, 4
    ne $S10, ucs4:"make", rx1065_fail
    add rx1065_pos, 4
    nqp_rxpeek $I19, rx1065_bstack, rxcap1067_fail
    inc $I19
    set $I11, rx1065_bstack[$I19]
    $P11 = rx1065_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1065_pos)
    rx1065_cstack = rx1065_cur."!cursor_capture"($P11, "sym")
    goto rxcap1067_done
  rxcap1067_fail:
    goto rx1065_fail
  rxcap1067_done:
    ge rx1065_pos, rx1065_eos, rx1065_fail
    is_cclass $I11, .CCLASS_WHITESPACE, rx1065_tgt, rx1065_pos
    unless $I11, rx1065_fail
    add rx1065_pos, 1
    repr_bind_attr_int rx1065_cur, rx1065_curclass, "$!pos", rx1065_pos
    $P11 = rx1065_cur."O"("%list_prefix")
    repr_get_attr_int $I11, $P11, rx1065_curclass, "$!pos"
    lt $I11, 0, rx1065_fail
    nqp_rxmark rx1065_bstack, rxsubrule1068_pass, -1, 0
  rxsubrule1068_pass:
    rx1065_cstack = rx1065_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1065_pos, $P11, rx1065_curclass, "$!pos"
    rx1065_cur."!cursor_pass"(rx1065_pos, "prefix:sym<make>", 'backtrack'=>1)
    .return (rx1065_cur)
  rx1065_restart:
    repr_get_attr_obj rx1065_cstack, rx1065_cur, rx1065_curclass, "$!cstack"
  rx1065_fail:
    unless rx1065_bstack, rx1065_done
    pop $I19, rx1065_bstack
    if_null rx1065_cstack, rx1065_cstack_done
    unless rx1065_cstack, rx1065_cstack_done
    dec $I19
    set $P11, rx1065_cstack[$I19]
  rx1065_cstack_done:
    pop rx1065_rep, rx1065_bstack
    pop rx1065_pos, rx1065_bstack
    pop $I19, rx1065_bstack
    lt rx1065_pos, -1, rx1065_done
    lt rx1065_pos, 0, rx1065_fail
    eq $I19, 0, rx1065_fail
    if_null rx1065_cstack, rx1065_jump
    elements $I18, rx1065_bstack
    le $I18, 0, rx1065_cut
    dec $I18
    set $I18, rx1065_bstack[$I18]
  rx1065_cut:
    assign rx1065_cstack, $I18
  rx1065_jump:
    jump $I19
  rx1065_done:
    rx1065_cur."!cursor_fail"()
    .return (rx1065_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "225_1337966799.879_caps"  :subid("736_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1363
    new $P104, "Hash"
    set $P104["sym"], 0
    set $P104["O"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "225_1337966799.879_nfa"  :subid("737_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1363
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 109
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 97
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 107
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 101
    push $P108, 5
    new $P109, "ResizablePMCArray"
    push $P109, 4
    push $P109, 32
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 8
    push $P110, "O"
    push $P110, 0
    new $P111, "ResizablePMCArray"
    push $P111, $P104
    push $P111, $P105
    push $P111, $P106
    push $P111, $P107
    push $P111, $P108
    push $P111, $P109
    push $P111, $P110
    .return ($P111)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<last>"  :subid("226_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2597
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1364
    .lex "self", param_2597
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2598
    .lex "$/", $P2599
    .local string rx1069_tgt
    .local int rx1069_pos
    .local int rx1069_off
    .local int rx1069_eos
    .local int rx1069_rep
    .local pmc rx1069_cur
    .local pmc rx1069_curclass
    .local pmc rx1069_bstack
    .local pmc rx1069_cstack
    (rx1069_cur, rx1069_tgt, rx1069_pos, rx1069_curclass, rx1069_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1069_cur
    length rx1069_eos, rx1069_tgt
    eq $I19, 1, rx1069_restart
    repr_get_attr_int $I11, self, rx1069_curclass, "$!from"
    ne $I11, -1, rxscan1070_done
    goto rxscan1070_scan
  rxscan1070_loop:
    inc rx1069_pos
    gt rx1069_pos, rx1069_eos, rx1069_fail
    repr_bind_attr_int rx1069_cur, rx1069_curclass, "$!from", rx1069_pos
  rxscan1070_scan:
    nqp_rxmark rx1069_bstack, rxscan1070_loop, rx1069_pos, 0
  rxscan1070_done:
    nqp_rxmark rx1069_bstack, rxcap1071_fail, rx1069_pos, 0
    add $I11, rx1069_pos, 4
    gt $I11, rx1069_eos, rx1069_fail
    substr $S10, rx1069_tgt, rx1069_pos, 4
    ne $S10, ucs4:"last", rx1069_fail
    add rx1069_pos, 4
    nqp_rxpeek $I19, rx1069_bstack, rxcap1071_fail
    inc $I19
    set $I11, rx1069_bstack[$I19]
    $P11 = rx1069_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1069_pos)
    rx1069_cstack = rx1069_cur."!cursor_capture"($P11, "sym")
    goto rxcap1071_done
  rxcap1071_fail:
    goto rx1069_fail
  rxcap1071_done:
    rx1069_cur."!cursor_pass"(rx1069_pos, "term:sym<last>", 'backtrack'=>1)
    .return (rx1069_cur)
  rx1069_restart:
    repr_get_attr_obj rx1069_cstack, rx1069_cur, rx1069_curclass, "$!cstack"
  rx1069_fail:
    unless rx1069_bstack, rx1069_done
    pop $I19, rx1069_bstack
    if_null rx1069_cstack, rx1069_cstack_done
    unless rx1069_cstack, rx1069_cstack_done
    dec $I19
    set $P11, rx1069_cstack[$I19]
  rx1069_cstack_done:
    pop rx1069_rep, rx1069_bstack
    pop rx1069_pos, rx1069_bstack
    pop $I19, rx1069_bstack
    lt rx1069_pos, -1, rx1069_done
    lt rx1069_pos, 0, rx1069_fail
    eq $I19, 0, rx1069_fail
    if_null rx1069_cstack, rx1069_jump
    elements $I18, rx1069_bstack
    le $I18, 0, rx1069_cut
    dec $I18
    set $I18, rx1069_bstack[$I18]
  rx1069_cut:
    assign rx1069_cstack, $I18
  rx1069_jump:
    jump $I19
  rx1069_done:
    rx1069_cur."!cursor_fail"()
    .return (rx1069_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "226_1337966799.879_caps"  :subid("738_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1364
    new $P104, "Hash"
    set $P104["sym"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "226_1337966799.879_nfa"  :subid("739_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1364
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 108
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 97
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 115
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 116
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<next>"  :subid("227_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2603
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1365
    .lex "self", param_2603
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2604
    .lex "$/", $P2605
    .local string rx1072_tgt
    .local int rx1072_pos
    .local int rx1072_off
    .local int rx1072_eos
    .local int rx1072_rep
    .local pmc rx1072_cur
    .local pmc rx1072_curclass
    .local pmc rx1072_bstack
    .local pmc rx1072_cstack
    (rx1072_cur, rx1072_tgt, rx1072_pos, rx1072_curclass, rx1072_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1072_cur
    length rx1072_eos, rx1072_tgt
    eq $I19, 1, rx1072_restart
    repr_get_attr_int $I11, self, rx1072_curclass, "$!from"
    ne $I11, -1, rxscan1073_done
    goto rxscan1073_scan
  rxscan1073_loop:
    inc rx1072_pos
    gt rx1072_pos, rx1072_eos, rx1072_fail
    repr_bind_attr_int rx1072_cur, rx1072_curclass, "$!from", rx1072_pos
  rxscan1073_scan:
    nqp_rxmark rx1072_bstack, rxscan1073_loop, rx1072_pos, 0
  rxscan1073_done:
    nqp_rxmark rx1072_bstack, rxcap1074_fail, rx1072_pos, 0
    add $I11, rx1072_pos, 4
    gt $I11, rx1072_eos, rx1072_fail
    substr $S10, rx1072_tgt, rx1072_pos, 4
    ne $S10, ucs4:"next", rx1072_fail
    add rx1072_pos, 4
    nqp_rxpeek $I19, rx1072_bstack, rxcap1074_fail
    inc $I19
    set $I11, rx1072_bstack[$I19]
    $P11 = rx1072_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1072_pos)
    rx1072_cstack = rx1072_cur."!cursor_capture"($P11, "sym")
    goto rxcap1074_done
  rxcap1074_fail:
    goto rx1072_fail
  rxcap1074_done:
    rx1072_cur."!cursor_pass"(rx1072_pos, "term:sym<next>", 'backtrack'=>1)
    .return (rx1072_cur)
  rx1072_restart:
    repr_get_attr_obj rx1072_cstack, rx1072_cur, rx1072_curclass, "$!cstack"
  rx1072_fail:
    unless rx1072_bstack, rx1072_done
    pop $I19, rx1072_bstack
    if_null rx1072_cstack, rx1072_cstack_done
    unless rx1072_cstack, rx1072_cstack_done
    dec $I19
    set $P11, rx1072_cstack[$I19]
  rx1072_cstack_done:
    pop rx1072_rep, rx1072_bstack
    pop rx1072_pos, rx1072_bstack
    pop $I19, rx1072_bstack
    lt rx1072_pos, -1, rx1072_done
    lt rx1072_pos, 0, rx1072_fail
    eq $I19, 0, rx1072_fail
    if_null rx1072_cstack, rx1072_jump
    elements $I18, rx1072_bstack
    le $I18, 0, rx1072_cut
    dec $I18
    set $I18, rx1072_bstack[$I18]
  rx1072_cut:
    assign rx1072_cstack, $I18
  rx1072_jump:
    jump $I19
  rx1072_done:
    rx1072_cur."!cursor_fail"()
    .return (rx1072_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "227_1337966799.879_caps"  :subid("740_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1365
    new $P104, "Hash"
    set $P104["sym"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "227_1337966799.879_nfa"  :subid("741_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1365
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 110
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 101
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 120
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 116
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<redo>"  :subid("228_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2609
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1366
    .lex "self", param_2609
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2610
    .lex "$/", $P2611
    .local string rx1075_tgt
    .local int rx1075_pos
    .local int rx1075_off
    .local int rx1075_eos
    .local int rx1075_rep
    .local pmc rx1075_cur
    .local pmc rx1075_curclass
    .local pmc rx1075_bstack
    .local pmc rx1075_cstack
    (rx1075_cur, rx1075_tgt, rx1075_pos, rx1075_curclass, rx1075_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1075_cur
    length rx1075_eos, rx1075_tgt
    eq $I19, 1, rx1075_restart
    repr_get_attr_int $I11, self, rx1075_curclass, "$!from"
    ne $I11, -1, rxscan1076_done
    goto rxscan1076_scan
  rxscan1076_loop:
    inc rx1075_pos
    gt rx1075_pos, rx1075_eos, rx1075_fail
    repr_bind_attr_int rx1075_cur, rx1075_curclass, "$!from", rx1075_pos
  rxscan1076_scan:
    nqp_rxmark rx1075_bstack, rxscan1076_loop, rx1075_pos, 0
  rxscan1076_done:
    nqp_rxmark rx1075_bstack, rxcap1077_fail, rx1075_pos, 0
    add $I11, rx1075_pos, 4
    gt $I11, rx1075_eos, rx1075_fail
    substr $S10, rx1075_tgt, rx1075_pos, 4
    ne $S10, ucs4:"redo", rx1075_fail
    add rx1075_pos, 4
    nqp_rxpeek $I19, rx1075_bstack, rxcap1077_fail
    inc $I19
    set $I11, rx1075_bstack[$I19]
    $P11 = rx1075_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1075_pos)
    rx1075_cstack = rx1075_cur."!cursor_capture"($P11, "sym")
    goto rxcap1077_done
  rxcap1077_fail:
    goto rx1075_fail
  rxcap1077_done:
    rx1075_cur."!cursor_pass"(rx1075_pos, "term:sym<redo>", 'backtrack'=>1)
    .return (rx1075_cur)
  rx1075_restart:
    repr_get_attr_obj rx1075_cstack, rx1075_cur, rx1075_curclass, "$!cstack"
  rx1075_fail:
    unless rx1075_bstack, rx1075_done
    pop $I19, rx1075_bstack
    if_null rx1075_cstack, rx1075_cstack_done
    unless rx1075_cstack, rx1075_cstack_done
    dec $I19
    set $P11, rx1075_cstack[$I19]
  rx1075_cstack_done:
    pop rx1075_rep, rx1075_bstack
    pop rx1075_pos, rx1075_bstack
    pop $I19, rx1075_bstack
    lt rx1075_pos, -1, rx1075_done
    lt rx1075_pos, 0, rx1075_fail
    eq $I19, 0, rx1075_fail
    if_null rx1075_cstack, rx1075_jump
    elements $I18, rx1075_bstack
    le $I18, 0, rx1075_cut
    dec $I18
    set $I18, rx1075_bstack[$I18]
  rx1075_cut:
    assign rx1075_cstack, $I18
  rx1075_jump:
    jump $I19
  rx1075_done:
    rx1075_cur."!cursor_fail"()
    .return (rx1075_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "228_1337966799.879_caps"  :subid("742_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1366
    new $P104, "Hash"
    set $P104["sym"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "228_1337966799.879_nfa"  :subid("743_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1366
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 114
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 101
    push $P106, 3
    new $P107, "ResizablePMCArray"
    push $P107, 2
    push $P107, 100
    push $P107, 4
    new $P108, "ResizablePMCArray"
    push $P108, 2
    push $P108, 111
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, $P104
    push $P109, $P105
    push $P109, $P106
    push $P109, $P107
    push $P109, $P108
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "smartmatch" :anon :subid("229_1337966799.879") :outer("398_1337966799.879")
    .param pmc param_2615
    .param pmc param_2616
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1368
    .lex "self", param_2615
    .lex "$/", param_2616
.annotate 'line', 1370
    new $P103, "Undef"
    set $P2617, $P103
    .lex "$t", $P2617
    set $P2618, param_2616
    unless_null $P2618, vivify_1369
    $P2618 = root_new ['parrot';'ResizablePMCArray']
  vivify_1369:
    set $P104, $P2618[0]
    unless_null $P104, vivify_1370
    new $P104, "Undef"
  vivify_1370:
    set $P2617, $P104
    set $P2619, param_2616
    unless_null $P2619, vivify_1371
    $P2619 = root_new ['parrot';'ResizablePMCArray']
  vivify_1371:
    set $P104, $P2619[1]
    unless_null $P104, vivify_1372
    new $P104, "Undef"
  vivify_1372:
    set $P2620, param_2616
    unless_null $P2620, vivify_1373
    $P2620 = root_new ['parrot';'ResizablePMCArray']
    set param_2616, $P2620
  vivify_1373:
    set $P2620[0], $P104
    set $P104, $P2617
    unless_null $P104, vivify_1374
    new $P104, "Undef"
  vivify_1374:
    set $P2621, param_2616
    unless_null $P2621, vivify_1375
    $P2621 = root_new ['parrot';'ResizablePMCArray']
    set param_2616, $P2621
  vivify_1375:
    set $P2621[1], $P104
.annotate 'line', 1368
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "_block2623"  :subid("744_1337966799.879") :outer("368_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1374
    .const 'Sub' $P2721 = "247_1337966799.879" 
    capture_lex $P2721
    .const 'Sub' $P2715 = "246_1337966799.879" 
    capture_lex $P2715
    .const 'Sub' $P2704 = "245_1337966799.879" 
    capture_lex $P2704
    .const 'Sub' $P2693 = "243_1337966799.879" 
    capture_lex $P2693
    .const 'Sub' $P2677 = "241_1337966799.879" 
    capture_lex $P2677
    .const 'Sub' $P2661 = "238_1337966799.879" 
    capture_lex $P2661
    .const 'Sub' $P2655 = "235_1337966799.879" 
    capture_lex $P2655
    .const 'Sub' $P2644 = "234_1337966799.879" 
    capture_lex $P2644
    .const 'Sub' $P2638 = "232_1337966799.879" 
    capture_lex $P2638
    .const 'Sub' $P2627 = "231_1337966799.879" 
    capture_lex $P2627
    .lex "$?PACKAGE", $P2625
    .lex "$?CLASS", $P2626
.annotate 'line', 1413
    .const 'Sub' $P2721 = "247_1337966799.879" 
    capture_lex $P2721
.annotate 'line', 1374
    .return ($P2721)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "metachar:sym<:my>"  :subid("231_1337966799.879") :outer("744_1337966799.879")
    .param pmc param_2628
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1375
    .const 'Sub' $P2634 = "230_1337966799.879" 
    capture_lex $P2634
    .lex "self", param_2628
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2629
    .lex "$/", $P2630
    .local string rx1078_tgt
    .local int rx1078_pos
    .local int rx1078_off
    .local int rx1078_eos
    .local int rx1078_rep
    .local pmc rx1078_cur
    .local pmc rx1078_curclass
    .local pmc rx1078_bstack
    .local pmc rx1078_cstack
    (rx1078_cur, rx1078_tgt, rx1078_pos, rx1078_curclass, rx1078_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1078_cur
    length rx1078_eos, rx1078_tgt
    eq $I19, 1, rx1078_restart
    repr_get_attr_int $I11, self, rx1078_curclass, "$!from"
    ne $I11, -1, rxscan1079_done
    goto rxscan1079_scan
  rxscan1079_loop:
    inc rx1078_pos
    gt rx1078_pos, rx1078_eos, rx1078_fail
    repr_bind_attr_int rx1078_cur, rx1078_curclass, "$!from", rx1078_pos
  rxscan1079_scan:
    nqp_rxmark rx1078_bstack, rxscan1079_loop, rx1078_pos, 0
  rxscan1079_done:
    add $I11, rx1078_pos, 1
    gt $I11, rx1078_eos, rx1078_fail
    substr $S10, rx1078_tgt, rx1078_pos, 1
    ne $S10, ucs4:":", rx1078_fail
    add rx1078_pos, 1
    .const 'Sub' $P2634 = "230_1337966799.879" 
    capture_lex $P2634
    repr_bind_attr_int rx1078_cur, rx1078_curclass, "$!pos", rx1078_pos
    $P11 = rx1078_cur."before"($P2634)
    repr_get_attr_int $I11, $P11, rx1078_curclass, "$!pos"
    lt $I11, 0, rx1078_fail
    repr_bind_attr_int rx1078_cur, rx1078_curclass, "$!pos", rx1078_pos
    $P11 = rx1078_cur."LANG"("MAIN", "statement")
    repr_get_attr_int $I11, $P11, rx1078_curclass, "$!pos"
    lt $I11, 0, rx1078_fail
    nqp_rxmark rx1078_bstack, rxsubrule1082_pass, -1, 0
  rxsubrule1082_pass:
    rx1078_cstack = rx1078_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx1078_pos, $P11, rx1078_curclass, "$!pos"
    repr_bind_attr_int rx1078_cur, rx1078_curclass, "$!pos", rx1078_pos
    $P11 = rx1078_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1078_curclass, "$!pos"
    lt $I11, 0, rx1078_fail
    repr_get_attr_int rx1078_pos, $P11, rx1078_curclass, "$!pos"
    add $I11, rx1078_pos, 1
    gt $I11, rx1078_eos, rx1078_fail
    substr $S10, rx1078_tgt, rx1078_pos, 1
    ne $S10, ucs4:";", rx1078_fail
    add rx1078_pos, 1
    rx1078_cur."!cursor_pass"(rx1078_pos, "metachar:sym<:my>", 'backtrack'=>1)
    .return (rx1078_cur)
  rx1078_restart:
    repr_get_attr_obj rx1078_cstack, rx1078_cur, rx1078_curclass, "$!cstack"
  rx1078_fail:
    unless rx1078_bstack, rx1078_done
    pop $I19, rx1078_bstack
    if_null rx1078_cstack, rx1078_cstack_done
    unless rx1078_cstack, rx1078_cstack_done
    dec $I19
    set $P11, rx1078_cstack[$I19]
  rx1078_cstack_done:
    pop rx1078_rep, rx1078_bstack
    pop rx1078_pos, rx1078_bstack
    pop $I19, rx1078_bstack
    lt rx1078_pos, -1, rx1078_done
    lt rx1078_pos, 0, rx1078_fail
    eq $I19, 0, rx1078_fail
    if_null rx1078_cstack, rx1078_jump
    elements $I18, rx1078_bstack
    le $I18, 0, rx1078_cut
    dec $I18
    set $I18, rx1078_bstack[$I18]
  rx1078_cut:
    assign rx1078_cstack, $I18
  rx1078_jump:
    jump $I19
  rx1078_done:
    rx1078_cur."!cursor_fail"()
    .return (rx1078_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "231_1337966799.879_caps"  :subid("745_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1375
    new $P104, "Hash"
    set $P104["statement"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "231_1337966799.879_nfa"  :subid("746_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1375
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 58
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "before"
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "_block2633"  :anon :subid("230_1337966799.879") :method :outer("231_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1375
    .lex unicode:"$\x{a2}", $P2637
    .local string rx1080_tgt
    .local int rx1080_pos
    .local int rx1080_off
    .local int rx1080_eos
    .local int rx1080_rep
    .local pmc rx1080_cur
    .local pmc rx1080_curclass
    .local pmc rx1080_bstack
    .local pmc rx1080_cstack
    (rx1080_cur, rx1080_tgt, rx1080_pos, rx1080_curclass, rx1080_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1080_cur
    length rx1080_eos, rx1080_tgt
    eq $I19, 1, rx1080_restart
    repr_get_attr_int $I11, self, rx1080_curclass, "$!from"
    ne $I11, -1, rxscan1081_done
    goto rxscan1081_scan
  rxscan1081_loop:
    inc rx1080_pos
    gt rx1080_pos, rx1080_eos, rx1080_fail
    repr_bind_attr_int rx1080_cur, rx1080_curclass, "$!from", rx1080_pos
  rxscan1081_scan:
    nqp_rxmark rx1080_bstack, rxscan1081_loop, rx1080_pos, 0
  rxscan1081_done:
    add $I11, rx1080_pos, 2
    gt $I11, rx1080_eos, rx1080_fail
    substr $S10, rx1080_tgt, rx1080_pos, 2
    ne $S10, ucs4:"my", rx1080_fail
    add rx1080_pos, 2
    rx1080_cur."!cursor_pass"(rx1080_pos, 'backtrack'=>1)
    .return (rx1080_cur)
  rx1080_restart:
    repr_get_attr_obj rx1080_cstack, rx1080_cur, rx1080_curclass, "$!cstack"
  rx1080_fail:
    unless rx1080_bstack, rx1080_done
    pop $I19, rx1080_bstack
    if_null rx1080_cstack, rx1080_cstack_done
    unless rx1080_cstack, rx1080_cstack_done
    dec $I19
    set $P11, rx1080_cstack[$I19]
  rx1080_cstack_done:
    pop rx1080_rep, rx1080_bstack
    pop rx1080_pos, rx1080_bstack
    pop $I19, rx1080_bstack
    lt rx1080_pos, -1, rx1080_done
    lt rx1080_pos, 0, rx1080_fail
    eq $I19, 0, rx1080_fail
    if_null rx1080_cstack, rx1080_jump
    elements $I18, rx1080_bstack
    le $I18, 0, rx1080_cut
    dec $I18
    set $I18, rx1080_bstack[$I18]
  rx1080_cut:
    assign rx1080_cstack, $I18
  rx1080_jump:
    jump $I19
  rx1080_done:
    rx1080_cur."!cursor_fail"()
    .return (rx1080_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "230_1337966799.879_caps"  :subid("747_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1375
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "230_1337966799.879_nfa"  :subid("748_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1375
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 109
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 2
    push $P106, 121
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "metachar:sym<{ }>"  :subid("232_1337966799.879") :outer("744_1337966799.879")
    .param pmc param_2639
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1379
    .lex "self", param_2639
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2640
    .lex "$/", $P2641
    .local string rx1084_tgt
    .local int rx1084_pos
    .local int rx1084_off
    .local int rx1084_eos
    .local int rx1084_rep
    .local pmc rx1084_cur
    .local pmc rx1084_curclass
    .local pmc rx1084_bstack
    .local pmc rx1084_cstack
    (rx1084_cur, rx1084_tgt, rx1084_pos, rx1084_curclass, rx1084_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1084_cur
    length rx1084_eos, rx1084_tgt
    eq $I19, 1, rx1084_restart
    repr_get_attr_int $I11, self, rx1084_curclass, "$!from"
    ne $I11, -1, rxscan1085_done
    goto rxscan1085_scan
  rxscan1085_loop:
    inc rx1084_pos
    gt rx1084_pos, rx1084_eos, rx1084_fail
    repr_bind_attr_int rx1084_cur, rx1084_curclass, "$!from", rx1084_pos
  rxscan1085_scan:
    nqp_rxmark rx1084_bstack, rxscan1085_loop, rx1084_pos, 0
  rxscan1085_done:
    ge rx1084_pos, rx1084_eos, rx1084_fail
    substr $S11, rx1084_tgt, rx1084_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx1084_fail
    repr_bind_attr_int rx1084_cur, rx1084_curclass, "$!pos", rx1084_pos
    $P11 = rx1084_cur."codeblock"()
    repr_get_attr_int $I11, $P11, rx1084_curclass, "$!pos"
    lt $I11, 0, rx1084_fail
    nqp_rxmark rx1084_bstack, rxsubrule1086_pass, -1, 0
  rxsubrule1086_pass:
    rx1084_cstack = rx1084_cur."!cursor_capture"($P11, "codeblock")
    repr_get_attr_int rx1084_pos, $P11, rx1084_curclass, "$!pos"
    rx1084_cur."!cursor_pass"(rx1084_pos, "metachar:sym<{ }>", 'backtrack'=>1)
    .return (rx1084_cur)
  rx1084_restart:
    repr_get_attr_obj rx1084_cstack, rx1084_cur, rx1084_curclass, "$!cstack"
  rx1084_fail:
    unless rx1084_bstack, rx1084_done
    pop $I19, rx1084_bstack
    if_null rx1084_cstack, rx1084_cstack_done
    unless rx1084_cstack, rx1084_cstack_done
    dec $I19
    set $P11, rx1084_cstack[$I19]
  rx1084_cstack_done:
    pop rx1084_rep, rx1084_bstack
    pop rx1084_pos, rx1084_bstack
    pop $I19, rx1084_bstack
    lt rx1084_pos, -1, rx1084_done
    lt rx1084_pos, 0, rx1084_fail
    eq $I19, 0, rx1084_fail
    if_null rx1084_cstack, rx1084_jump
    elements $I18, rx1084_bstack
    le $I18, 0, rx1084_cut
    dec $I18
    set $I18, rx1084_bstack[$I18]
  rx1084_cut:
    assign rx1084_cstack, $I18
  rx1084_jump:
    jump $I19
  rx1084_done:
    rx1084_cur."!cursor_fail"()
    .return (rx1084_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "232_1337966799.879_caps"  :subid("749_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1379
    new $P104, "Hash"
    set $P104["codeblock"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "232_1337966799.879_nfa"  :subid("750_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1379
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 6
    push $P105, "{"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 0
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "metachar:sym<nqpvar>"  :subid("234_1337966799.879") :outer("744_1337966799.879")
    .param pmc param_2645
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1383
    .const 'Sub' $P2651 = "233_1337966799.879" 
    capture_lex $P2651
    .lex "self", param_2645
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2646
    .lex "$/", $P2647
    .local string rx1087_tgt
    .local int rx1087_pos
    .local int rx1087_off
    .local int rx1087_eos
    .local int rx1087_rep
    .local pmc rx1087_cur
    .local pmc rx1087_curclass
    .local pmc rx1087_bstack
    .local pmc rx1087_cstack
    (rx1087_cur, rx1087_tgt, rx1087_pos, rx1087_curclass, rx1087_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1087_cur
    length rx1087_eos, rx1087_tgt
    eq $I19, 1, rx1087_restart
    repr_get_attr_int $I11, self, rx1087_curclass, "$!from"
    ne $I11, -1, rxscan1088_done
    goto rxscan1088_scan
  rxscan1088_loop:
    inc rx1087_pos
    gt rx1087_pos, rx1087_eos, rx1087_fail
    repr_bind_attr_int rx1087_cur, rx1087_curclass, "$!from", rx1087_pos
  rxscan1088_scan:
    nqp_rxmark rx1087_bstack, rxscan1088_loop, rx1087_pos, 0
  rxscan1088_done:
    ge rx1087_pos, rx1087_eos, rx1087_fail
    substr $S11, rx1087_tgt, rx1087_pos, 1
    index $I11, ucs4:"$@", $S11
    lt $I11, 0, rx1087_fail
    .const 'Sub' $P2651 = "233_1337966799.879" 
    capture_lex $P2651
    repr_bind_attr_int rx1087_cur, rx1087_curclass, "$!pos", rx1087_pos
    $P11 = rx1087_cur."before"($P2651)
    repr_get_attr_int $I11, $P11, rx1087_curclass, "$!pos"
    lt $I11, 0, rx1087_fail
    repr_bind_attr_int rx1087_cur, rx1087_curclass, "$!pos", rx1087_pos
    $P11 = rx1087_cur."LANG"("MAIN", "variable")
    repr_get_attr_int $I11, $P11, rx1087_curclass, "$!pos"
    lt $I11, 0, rx1087_fail
    nqp_rxmark rx1087_bstack, rxsubrule1091_pass, -1, 0
  rxsubrule1091_pass:
    rx1087_cstack = rx1087_cur."!cursor_capture"($P11, "var")
    repr_get_attr_int rx1087_pos, $P11, rx1087_curclass, "$!pos"
    rx1087_cur."!cursor_pass"(rx1087_pos, "metachar:sym<nqpvar>", 'backtrack'=>1)
    .return (rx1087_cur)
  rx1087_restart:
    repr_get_attr_obj rx1087_cstack, rx1087_cur, rx1087_curclass, "$!cstack"
  rx1087_fail:
    unless rx1087_bstack, rx1087_done
    pop $I19, rx1087_bstack
    if_null rx1087_cstack, rx1087_cstack_done
    unless rx1087_cstack, rx1087_cstack_done
    dec $I19
    set $P11, rx1087_cstack[$I19]
  rx1087_cstack_done:
    pop rx1087_rep, rx1087_bstack
    pop rx1087_pos, rx1087_bstack
    pop $I19, rx1087_bstack
    lt rx1087_pos, -1, rx1087_done
    lt rx1087_pos, 0, rx1087_fail
    eq $I19, 0, rx1087_fail
    if_null rx1087_cstack, rx1087_jump
    elements $I18, rx1087_bstack
    le $I18, 0, rx1087_cut
    dec $I18
    set $I18, rx1087_bstack[$I18]
  rx1087_cut:
    assign rx1087_cstack, $I18
  rx1087_jump:
    jump $I19
  rx1087_done:
    rx1087_cur."!cursor_fail"()
    .return (rx1087_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "234_1337966799.879_caps"  :subid("751_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1383
    new $P104, "Hash"
    set $P104["var"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "234_1337966799.879_nfa"  :subid("752_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1383
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 6
    push $P105, "$@"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 0
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "_block2650"  :anon :subid("233_1337966799.879") :method :outer("234_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1383
    .lex unicode:"$\x{a2}", $P2654
    .local string rx1089_tgt
    .local int rx1089_pos
    .local int rx1089_off
    .local int rx1089_eos
    .local int rx1089_rep
    .local pmc rx1089_cur
    .local pmc rx1089_curclass
    .local pmc rx1089_bstack
    .local pmc rx1089_cstack
    (rx1089_cur, rx1089_tgt, rx1089_pos, rx1089_curclass, rx1089_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1089_cur
    length rx1089_eos, rx1089_tgt
    eq $I19, 1, rx1089_restart
    repr_get_attr_int $I11, self, rx1089_curclass, "$!from"
    ne $I11, -1, rxscan1090_done
    goto rxscan1090_scan
  rxscan1090_loop:
    inc rx1089_pos
    gt rx1089_pos, rx1089_eos, rx1089_fail
    repr_bind_attr_int rx1089_cur, rx1089_curclass, "$!from", rx1089_pos
  rxscan1090_scan:
    nqp_rxmark rx1089_bstack, rxscan1090_loop, rx1089_pos, 0
  rxscan1090_done:
    ge rx1089_pos, rx1089_eos, rx1089_fail
    add rx1089_pos, 1
    ge rx1089_pos, rx1089_eos, rx1089_fail
    is_cclass $I11, .CCLASS_WORD, rx1089_tgt, rx1089_pos
    unless $I11, rx1089_fail
    add rx1089_pos, 1
    rx1089_cur."!cursor_pass"(rx1089_pos, 'backtrack'=>1)
    .return (rx1089_cur)
  rx1089_restart:
    repr_get_attr_obj rx1089_cstack, rx1089_cur, rx1089_curclass, "$!cstack"
  rx1089_fail:
    unless rx1089_bstack, rx1089_done
    pop $I19, rx1089_bstack
    if_null rx1089_cstack, rx1089_cstack_done
    unless rx1089_cstack, rx1089_cstack_done
    dec $I19
    set $P11, rx1089_cstack[$I19]
  rx1089_cstack_done:
    pop rx1089_rep, rx1089_bstack
    pop rx1089_pos, rx1089_bstack
    pop $I19, rx1089_bstack
    lt rx1089_pos, -1, rx1089_done
    lt rx1089_pos, 0, rx1089_fail
    eq $I19, 0, rx1089_fail
    if_null rx1089_cstack, rx1089_jump
    elements $I18, rx1089_bstack
    le $I18, 0, rx1089_cut
    dec $I18
    set $I18, rx1089_bstack[$I18]
  rx1089_cut:
    assign rx1089_cstack, $I18
  rx1089_jump:
    jump $I19
  rx1089_done:
    rx1089_cur."!cursor_fail"()
    .return (rx1089_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "233_1337966799.879_caps"  :subid("753_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1383
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "233_1337966799.879_nfa"  :subid("754_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1383
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 4
    push $P105, 65535
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 4
    push $P106, 8192
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "assertion:sym<{ }>"  :subid("235_1337966799.879") :outer("744_1337966799.879")
    .param pmc param_2656
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1387
    .lex "self", param_2656
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2657
    .lex "$/", $P2658
    .local string rx1092_tgt
    .local int rx1092_pos
    .local int rx1092_off
    .local int rx1092_eos
    .local int rx1092_rep
    .local pmc rx1092_cur
    .local pmc rx1092_curclass
    .local pmc rx1092_bstack
    .local pmc rx1092_cstack
    (rx1092_cur, rx1092_tgt, rx1092_pos, rx1092_curclass, rx1092_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1092_cur
    length rx1092_eos, rx1092_tgt
    eq $I19, 1, rx1092_restart
    repr_get_attr_int $I11, self, rx1092_curclass, "$!from"
    ne $I11, -1, rxscan1093_done
    goto rxscan1093_scan
  rxscan1093_loop:
    inc rx1092_pos
    gt rx1092_pos, rx1092_eos, rx1092_fail
    repr_bind_attr_int rx1092_cur, rx1092_curclass, "$!from", rx1092_pos
  rxscan1093_scan:
    nqp_rxmark rx1092_bstack, rxscan1093_loop, rx1092_pos, 0
  rxscan1093_done:
    ge rx1092_pos, rx1092_eos, rx1092_fail
    substr $S11, rx1092_tgt, rx1092_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx1092_fail
    repr_bind_attr_int rx1092_cur, rx1092_curclass, "$!pos", rx1092_pos
    $P11 = rx1092_cur."codeblock"()
    repr_get_attr_int $I11, $P11, rx1092_curclass, "$!pos"
    lt $I11, 0, rx1092_fail
    nqp_rxmark rx1092_bstack, rxsubrule1094_pass, -1, 0
  rxsubrule1094_pass:
    rx1092_cstack = rx1092_cur."!cursor_capture"($P11, "codeblock")
    repr_get_attr_int rx1092_pos, $P11, rx1092_curclass, "$!pos"
    rx1092_cur."!cursor_pass"(rx1092_pos, "assertion:sym<{ }>", 'backtrack'=>1)
    .return (rx1092_cur)
  rx1092_restart:
    repr_get_attr_obj rx1092_cstack, rx1092_cur, rx1092_curclass, "$!cstack"
  rx1092_fail:
    unless rx1092_bstack, rx1092_done
    pop $I19, rx1092_bstack
    if_null rx1092_cstack, rx1092_cstack_done
    unless rx1092_cstack, rx1092_cstack_done
    dec $I19
    set $P11, rx1092_cstack[$I19]
  rx1092_cstack_done:
    pop rx1092_rep, rx1092_bstack
    pop rx1092_pos, rx1092_bstack
    pop $I19, rx1092_bstack
    lt rx1092_pos, -1, rx1092_done
    lt rx1092_pos, 0, rx1092_fail
    eq $I19, 0, rx1092_fail
    if_null rx1092_cstack, rx1092_jump
    elements $I18, rx1092_bstack
    le $I18, 0, rx1092_cut
    dec $I18
    set $I18, rx1092_bstack[$I18]
  rx1092_cut:
    assign rx1092_cstack, $I18
  rx1092_jump:
    jump $I19
  rx1092_done:
    rx1092_cur."!cursor_fail"()
    .return (rx1092_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "235_1337966799.879_caps"  :subid("755_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1387
    new $P104, "Hash"
    set $P104["codeblock"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "235_1337966799.879_nfa"  :subid("756_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1387
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 6
    push $P105, "{"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 0
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "assertion:sym<?>"  :subid("238_1337966799.879") :outer("744_1337966799.879")
    .param pmc param_2662
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1391
    .const 'Sub' $P2673 = "237_1337966799.879" 
    capture_lex $P2673
    .const 'Sub' $P2668 = "236_1337966799.879" 
    capture_lex $P2668
    .lex "self", param_2662
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2663
    .lex "$/", $P2664
    .local string rx1095_tgt
    .local int rx1095_pos
    .local int rx1095_off
    .local int rx1095_eos
    .local int rx1095_rep
    .local pmc rx1095_cur
    .local pmc rx1095_curclass
    .local pmc rx1095_bstack
    .local pmc rx1095_cstack
    (rx1095_cur, rx1095_tgt, rx1095_pos, rx1095_curclass, rx1095_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1095_cur
    length rx1095_eos, rx1095_tgt
    eq $I19, 1, rx1095_restart
    repr_get_attr_int $I11, self, rx1095_curclass, "$!from"
    ne $I11, -1, rxscan1096_done
    goto rxscan1096_scan
  rxscan1096_loop:
    inc rx1095_pos
    gt rx1095_pos, rx1095_eos, rx1095_fail
    repr_bind_attr_int rx1095_cur, rx1095_curclass, "$!from", rx1095_pos
  rxscan1096_scan:
    nqp_rxmark rx1095_bstack, rxscan1096_loop, rx1095_pos, 0
  rxscan1096_done:
    add $I11, rx1095_pos, 1
    gt $I11, rx1095_eos, rx1095_fail
    substr $S10, rx1095_tgt, rx1095_pos, 1
    ne $S10, ucs4:"?", rx1095_fail
    add rx1095_pos, 1
  alt1097_0:
    nqp_rxmark rx1095_bstack, alt1097_1, rx1095_pos, 0
    .const 'Sub' $P2668 = "236_1337966799.879" 
    capture_lex $P2668
    repr_bind_attr_int rx1095_cur, rx1095_curclass, "$!pos", rx1095_pos
    $P11 = rx1095_cur."before"($P2668)
    repr_get_attr_int $I11, $P11, rx1095_curclass, "$!pos"
    lt $I11, 0, rx1095_fail
    goto alt1097_end
  alt1097_1:
    .const 'Sub' $P2673 = "237_1337966799.879" 
    capture_lex $P2673
    repr_bind_attr_int rx1095_cur, rx1095_curclass, "$!pos", rx1095_pos
    $P11 = rx1095_cur."before"($P2673)
    repr_get_attr_int $I11, $P11, rx1095_curclass, "$!pos"
    ge $I11, 0, rx1095_fail
    repr_bind_attr_int rx1095_cur, rx1095_curclass, "$!pos", rx1095_pos
    $P11 = rx1095_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx1095_curclass, "$!pos"
    lt $I11, 0, rx1095_fail
    nqp_rxmark rx1095_bstack, rxsubrule1102_pass, -1, 0
  rxsubrule1102_pass:
    rx1095_cstack = rx1095_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx1095_pos, $P11, rx1095_curclass, "$!pos"
  alt1097_end:
    rx1095_cur."!cursor_pass"(rx1095_pos, "assertion:sym<?>", 'backtrack'=>1)
    .return (rx1095_cur)
  rx1095_restart:
    repr_get_attr_obj rx1095_cstack, rx1095_cur, rx1095_curclass, "$!cstack"
  rx1095_fail:
    unless rx1095_bstack, rx1095_done
    pop $I19, rx1095_bstack
    if_null rx1095_cstack, rx1095_cstack_done
    unless rx1095_cstack, rx1095_cstack_done
    dec $I19
    set $P11, rx1095_cstack[$I19]
  rx1095_cstack_done:
    pop rx1095_rep, rx1095_bstack
    pop rx1095_pos, rx1095_bstack
    pop $I19, rx1095_bstack
    lt rx1095_pos, -1, rx1095_done
    lt rx1095_pos, 0, rx1095_fail
    eq $I19, 0, rx1095_fail
    if_null rx1095_cstack, rx1095_jump
    elements $I18, rx1095_bstack
    le $I18, 0, rx1095_cut
    dec $I18
    set $I18, rx1095_bstack[$I18]
  rx1095_cut:
    assign rx1095_cstack, $I18
  rx1095_jump:
    jump $I19
  rx1095_done:
    rx1095_cur."!cursor_fail"()
    .return (rx1095_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "238_1337966799.879_caps"  :subid("757_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1391
    new $P104, "Hash"
    set $P104["assertion"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "238_1337966799.879_nfa"  :subid("758_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1391
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 63
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "before"
    push $P106, 0
    push $P106, 0
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "_block2667"  :anon :subid("236_1337966799.879") :method :outer("238_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1391
    .lex unicode:"$\x{a2}", $P2671
    .local string rx1098_tgt
    .local int rx1098_pos
    .local int rx1098_off
    .local int rx1098_eos
    .local int rx1098_rep
    .local pmc rx1098_cur
    .local pmc rx1098_curclass
    .local pmc rx1098_bstack
    .local pmc rx1098_cstack
    (rx1098_cur, rx1098_tgt, rx1098_pos, rx1098_curclass, rx1098_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1098_cur
    length rx1098_eos, rx1098_tgt
    eq $I19, 1, rx1098_restart
    repr_get_attr_int $I11, self, rx1098_curclass, "$!from"
    ne $I11, -1, rxscan1099_done
    goto rxscan1099_scan
  rxscan1099_loop:
    inc rx1098_pos
    gt rx1098_pos, rx1098_eos, rx1098_fail
    repr_bind_attr_int rx1098_cur, rx1098_curclass, "$!from", rx1098_pos
  rxscan1099_scan:
    nqp_rxmark rx1098_bstack, rxscan1099_loop, rx1098_pos, 0
  rxscan1099_done:
    add $I11, rx1098_pos, 1
    gt $I11, rx1098_eos, rx1098_fail
    substr $S10, rx1098_tgt, rx1098_pos, 1
    ne $S10, ucs4:">", rx1098_fail
    add rx1098_pos, 1
    rx1098_cur."!cursor_pass"(rx1098_pos, 'backtrack'=>1)
    .return (rx1098_cur)
  rx1098_restart:
    repr_get_attr_obj rx1098_cstack, rx1098_cur, rx1098_curclass, "$!cstack"
  rx1098_fail:
    unless rx1098_bstack, rx1098_done
    pop $I19, rx1098_bstack
    if_null rx1098_cstack, rx1098_cstack_done
    unless rx1098_cstack, rx1098_cstack_done
    dec $I19
    set $P11, rx1098_cstack[$I19]
  rx1098_cstack_done:
    pop rx1098_rep, rx1098_bstack
    pop rx1098_pos, rx1098_bstack
    pop $I19, rx1098_bstack
    lt rx1098_pos, -1, rx1098_done
    lt rx1098_pos, 0, rx1098_fail
    eq $I19, 0, rx1098_fail
    if_null rx1098_cstack, rx1098_jump
    elements $I18, rx1098_bstack
    le $I18, 0, rx1098_cut
    dec $I18
    set $I18, rx1098_bstack[$I18]
  rx1098_cut:
    assign rx1098_cstack, $I18
  rx1098_jump:
    jump $I19
  rx1098_done:
    rx1098_cur."!cursor_fail"()
    .return (rx1098_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "236_1337966799.879_caps"  :subid("759_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1391
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "236_1337966799.879_nfa"  :subid("760_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1391
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 62
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "_block2672"  :anon :subid("237_1337966799.879") :method :outer("238_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1391
    .lex unicode:"$\x{a2}", $P2676
    .local string rx1100_tgt
    .local int rx1100_pos
    .local int rx1100_off
    .local int rx1100_eos
    .local int rx1100_rep
    .local pmc rx1100_cur
    .local pmc rx1100_curclass
    .local pmc rx1100_bstack
    .local pmc rx1100_cstack
    (rx1100_cur, rx1100_tgt, rx1100_pos, rx1100_curclass, rx1100_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1100_cur
    length rx1100_eos, rx1100_tgt
    eq $I19, 1, rx1100_restart
    repr_get_attr_int $I11, self, rx1100_curclass, "$!from"
    ne $I11, -1, rxscan1101_done
    goto rxscan1101_scan
  rxscan1101_loop:
    inc rx1100_pos
    gt rx1100_pos, rx1100_eos, rx1100_fail
    repr_bind_attr_int rx1100_cur, rx1100_curclass, "$!from", rx1100_pos
  rxscan1101_scan:
    nqp_rxmark rx1100_bstack, rxscan1101_loop, rx1100_pos, 0
  rxscan1101_done:
    add $I11, rx1100_pos, 1
    gt $I11, rx1100_eos, rx1100_fail
    substr $S10, rx1100_tgt, rx1100_pos, 1
    ne $S10, ucs4:"{", rx1100_fail
    add rx1100_pos, 1
    rx1100_cur."!cursor_pass"(rx1100_pos, 'backtrack'=>1)
    .return (rx1100_cur)
  rx1100_restart:
    repr_get_attr_obj rx1100_cstack, rx1100_cur, rx1100_curclass, "$!cstack"
  rx1100_fail:
    unless rx1100_bstack, rx1100_done
    pop $I19, rx1100_bstack
    if_null rx1100_cstack, rx1100_cstack_done
    unless rx1100_cstack, rx1100_cstack_done
    dec $I19
    set $P11, rx1100_cstack[$I19]
  rx1100_cstack_done:
    pop rx1100_rep, rx1100_bstack
    pop rx1100_pos, rx1100_bstack
    pop $I19, rx1100_bstack
    lt rx1100_pos, -1, rx1100_done
    lt rx1100_pos, 0, rx1100_fail
    eq $I19, 0, rx1100_fail
    if_null rx1100_cstack, rx1100_jump
    elements $I18, rx1100_bstack
    le $I18, 0, rx1100_cut
    dec $I18
    set $I18, rx1100_bstack[$I18]
  rx1100_cut:
    assign rx1100_cstack, $I18
  rx1100_jump:
    jump $I19
  rx1100_done:
    rx1100_cur."!cursor_fail"()
    .return (rx1100_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "237_1337966799.879_caps"  :subid("761_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1391
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "237_1337966799.879_nfa"  :subid("762_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1391
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 123
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "assertion:sym<!>"  :subid("241_1337966799.879") :outer("744_1337966799.879")
    .param pmc param_2678
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1392
    .const 'Sub' $P2689 = "240_1337966799.879" 
    capture_lex $P2689
    .const 'Sub' $P2684 = "239_1337966799.879" 
    capture_lex $P2684
    .lex "self", param_2678
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2679
    .lex "$/", $P2680
    .local string rx1103_tgt
    .local int rx1103_pos
    .local int rx1103_off
    .local int rx1103_eos
    .local int rx1103_rep
    .local pmc rx1103_cur
    .local pmc rx1103_curclass
    .local pmc rx1103_bstack
    .local pmc rx1103_cstack
    (rx1103_cur, rx1103_tgt, rx1103_pos, rx1103_curclass, rx1103_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1103_cur
    length rx1103_eos, rx1103_tgt
    eq $I19, 1, rx1103_restart
    repr_get_attr_int $I11, self, rx1103_curclass, "$!from"
    ne $I11, -1, rxscan1104_done
    goto rxscan1104_scan
  rxscan1104_loop:
    inc rx1103_pos
    gt rx1103_pos, rx1103_eos, rx1103_fail
    repr_bind_attr_int rx1103_cur, rx1103_curclass, "$!from", rx1103_pos
  rxscan1104_scan:
    nqp_rxmark rx1103_bstack, rxscan1104_loop, rx1103_pos, 0
  rxscan1104_done:
    add $I11, rx1103_pos, 1
    gt $I11, rx1103_eos, rx1103_fail
    substr $S10, rx1103_tgt, rx1103_pos, 1
    ne $S10, ucs4:"!", rx1103_fail
    add rx1103_pos, 1
  alt1105_0:
    nqp_rxmark rx1103_bstack, alt1105_1, rx1103_pos, 0
    .const 'Sub' $P2684 = "239_1337966799.879" 
    capture_lex $P2684
    repr_bind_attr_int rx1103_cur, rx1103_curclass, "$!pos", rx1103_pos
    $P11 = rx1103_cur."before"($P2684)
    repr_get_attr_int $I11, $P11, rx1103_curclass, "$!pos"
    lt $I11, 0, rx1103_fail
    goto alt1105_end
  alt1105_1:
    .const 'Sub' $P2689 = "240_1337966799.879" 
    capture_lex $P2689
    repr_bind_attr_int rx1103_cur, rx1103_curclass, "$!pos", rx1103_pos
    $P11 = rx1103_cur."before"($P2689)
    repr_get_attr_int $I11, $P11, rx1103_curclass, "$!pos"
    ge $I11, 0, rx1103_fail
    repr_bind_attr_int rx1103_cur, rx1103_curclass, "$!pos", rx1103_pos
    $P11 = rx1103_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx1103_curclass, "$!pos"
    lt $I11, 0, rx1103_fail
    nqp_rxmark rx1103_bstack, rxsubrule1110_pass, -1, 0
  rxsubrule1110_pass:
    rx1103_cstack = rx1103_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx1103_pos, $P11, rx1103_curclass, "$!pos"
  alt1105_end:
    rx1103_cur."!cursor_pass"(rx1103_pos, "assertion:sym<!>", 'backtrack'=>1)
    .return (rx1103_cur)
  rx1103_restart:
    repr_get_attr_obj rx1103_cstack, rx1103_cur, rx1103_curclass, "$!cstack"
  rx1103_fail:
    unless rx1103_bstack, rx1103_done
    pop $I19, rx1103_bstack
    if_null rx1103_cstack, rx1103_cstack_done
    unless rx1103_cstack, rx1103_cstack_done
    dec $I19
    set $P11, rx1103_cstack[$I19]
  rx1103_cstack_done:
    pop rx1103_rep, rx1103_bstack
    pop rx1103_pos, rx1103_bstack
    pop $I19, rx1103_bstack
    lt rx1103_pos, -1, rx1103_done
    lt rx1103_pos, 0, rx1103_fail
    eq $I19, 0, rx1103_fail
    if_null rx1103_cstack, rx1103_jump
    elements $I18, rx1103_bstack
    le $I18, 0, rx1103_cut
    dec $I18
    set $I18, rx1103_bstack[$I18]
  rx1103_cut:
    assign rx1103_cstack, $I18
  rx1103_jump:
    jump $I19
  rx1103_done:
    rx1103_cur."!cursor_fail"()
    .return (rx1103_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "241_1337966799.879_caps"  :subid("763_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1392
    new $P104, "Hash"
    set $P104["assertion"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "241_1337966799.879_nfa"  :subid("764_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1392
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 33
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "before"
    push $P106, 0
    push $P106, 0
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "_block2683"  :anon :subid("239_1337966799.879") :method :outer("241_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1392
    .lex unicode:"$\x{a2}", $P2687
    .local string rx1106_tgt
    .local int rx1106_pos
    .local int rx1106_off
    .local int rx1106_eos
    .local int rx1106_rep
    .local pmc rx1106_cur
    .local pmc rx1106_curclass
    .local pmc rx1106_bstack
    .local pmc rx1106_cstack
    (rx1106_cur, rx1106_tgt, rx1106_pos, rx1106_curclass, rx1106_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1106_cur
    length rx1106_eos, rx1106_tgt
    eq $I19, 1, rx1106_restart
    repr_get_attr_int $I11, self, rx1106_curclass, "$!from"
    ne $I11, -1, rxscan1107_done
    goto rxscan1107_scan
  rxscan1107_loop:
    inc rx1106_pos
    gt rx1106_pos, rx1106_eos, rx1106_fail
    repr_bind_attr_int rx1106_cur, rx1106_curclass, "$!from", rx1106_pos
  rxscan1107_scan:
    nqp_rxmark rx1106_bstack, rxscan1107_loop, rx1106_pos, 0
  rxscan1107_done:
    add $I11, rx1106_pos, 1
    gt $I11, rx1106_eos, rx1106_fail
    substr $S10, rx1106_tgt, rx1106_pos, 1
    ne $S10, ucs4:">", rx1106_fail
    add rx1106_pos, 1
    rx1106_cur."!cursor_pass"(rx1106_pos, 'backtrack'=>1)
    .return (rx1106_cur)
  rx1106_restart:
    repr_get_attr_obj rx1106_cstack, rx1106_cur, rx1106_curclass, "$!cstack"
  rx1106_fail:
    unless rx1106_bstack, rx1106_done
    pop $I19, rx1106_bstack
    if_null rx1106_cstack, rx1106_cstack_done
    unless rx1106_cstack, rx1106_cstack_done
    dec $I19
    set $P11, rx1106_cstack[$I19]
  rx1106_cstack_done:
    pop rx1106_rep, rx1106_bstack
    pop rx1106_pos, rx1106_bstack
    pop $I19, rx1106_bstack
    lt rx1106_pos, -1, rx1106_done
    lt rx1106_pos, 0, rx1106_fail
    eq $I19, 0, rx1106_fail
    if_null rx1106_cstack, rx1106_jump
    elements $I18, rx1106_bstack
    le $I18, 0, rx1106_cut
    dec $I18
    set $I18, rx1106_bstack[$I18]
  rx1106_cut:
    assign rx1106_cstack, $I18
  rx1106_jump:
    jump $I19
  rx1106_done:
    rx1106_cur."!cursor_fail"()
    .return (rx1106_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "239_1337966799.879_caps"  :subid("765_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1392
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "239_1337966799.879_nfa"  :subid("766_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1392
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 62
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "_block2688"  :anon :subid("240_1337966799.879") :method :outer("241_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1392
    .lex unicode:"$\x{a2}", $P2692
    .local string rx1108_tgt
    .local int rx1108_pos
    .local int rx1108_off
    .local int rx1108_eos
    .local int rx1108_rep
    .local pmc rx1108_cur
    .local pmc rx1108_curclass
    .local pmc rx1108_bstack
    .local pmc rx1108_cstack
    (rx1108_cur, rx1108_tgt, rx1108_pos, rx1108_curclass, rx1108_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1108_cur
    length rx1108_eos, rx1108_tgt
    eq $I19, 1, rx1108_restart
    repr_get_attr_int $I11, self, rx1108_curclass, "$!from"
    ne $I11, -1, rxscan1109_done
    goto rxscan1109_scan
  rxscan1109_loop:
    inc rx1108_pos
    gt rx1108_pos, rx1108_eos, rx1108_fail
    repr_bind_attr_int rx1108_cur, rx1108_curclass, "$!from", rx1108_pos
  rxscan1109_scan:
    nqp_rxmark rx1108_bstack, rxscan1109_loop, rx1108_pos, 0
  rxscan1109_done:
    add $I11, rx1108_pos, 1
    gt $I11, rx1108_eos, rx1108_fail
    substr $S10, rx1108_tgt, rx1108_pos, 1
    ne $S10, ucs4:"{", rx1108_fail
    add rx1108_pos, 1
    rx1108_cur."!cursor_pass"(rx1108_pos, 'backtrack'=>1)
    .return (rx1108_cur)
  rx1108_restart:
    repr_get_attr_obj rx1108_cstack, rx1108_cur, rx1108_curclass, "$!cstack"
  rx1108_fail:
    unless rx1108_bstack, rx1108_done
    pop $I19, rx1108_bstack
    if_null rx1108_cstack, rx1108_cstack_done
    unless rx1108_cstack, rx1108_cstack_done
    dec $I19
    set $P11, rx1108_cstack[$I19]
  rx1108_cstack_done:
    pop rx1108_rep, rx1108_bstack
    pop rx1108_pos, rx1108_bstack
    pop $I19, rx1108_bstack
    lt rx1108_pos, -1, rx1108_done
    lt rx1108_pos, 0, rx1108_fail
    eq $I19, 0, rx1108_fail
    if_null rx1108_cstack, rx1108_jump
    elements $I18, rx1108_bstack
    le $I18, 0, rx1108_cut
    dec $I18
    set $I18, rx1108_bstack[$I18]
  rx1108_cut:
    assign rx1108_cstack, $I18
  rx1108_jump:
    jump $I19
  rx1108_done:
    rx1108_cur."!cursor_fail"()
    .return (rx1108_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "240_1337966799.879_caps"  :subid("767_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1392
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "240_1337966799.879_nfa"  :subid("768_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1392
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 123
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "assertion:sym<?{ }>"  :subid("243_1337966799.879") :outer("744_1337966799.879")
    .param pmc param_2694
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1394
    .const 'Sub' $P2700 = "242_1337966799.879" 
    capture_lex $P2700
    .lex "self", param_2694
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2695
    .lex "$/", $P2696
    .local string rx1111_tgt
    .local int rx1111_pos
    .local int rx1111_off
    .local int rx1111_eos
    .local int rx1111_rep
    .local pmc rx1111_cur
    .local pmc rx1111_curclass
    .local pmc rx1111_bstack
    .local pmc rx1111_cstack
    (rx1111_cur, rx1111_tgt, rx1111_pos, rx1111_curclass, rx1111_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1111_cur
    length rx1111_eos, rx1111_tgt
    eq $I19, 1, rx1111_restart
    repr_get_attr_int $I11, self, rx1111_curclass, "$!from"
    ne $I11, -1, rxscan1112_done
    goto rxscan1112_scan
  rxscan1112_loop:
    inc rx1111_pos
    gt rx1111_pos, rx1111_eos, rx1111_fail
    repr_bind_attr_int rx1111_cur, rx1111_curclass, "$!from", rx1111_pos
  rxscan1112_scan:
    nqp_rxmark rx1111_bstack, rxscan1112_loop, rx1111_pos, 0
  rxscan1112_done:
    nqp_rxmark rx1111_bstack, rxcap1113_fail, rx1111_pos, 0
    ge rx1111_pos, rx1111_eos, rx1111_fail
    substr $S11, rx1111_tgt, rx1111_pos, 1
    index $I11, ucs4:"?!", $S11
    lt $I11, 0, rx1111_fail
    inc rx1111_pos
    .const 'Sub' $P2700 = "242_1337966799.879" 
    capture_lex $P2700
    repr_bind_attr_int rx1111_cur, rx1111_curclass, "$!pos", rx1111_pos
    $P11 = rx1111_cur."before"($P2700)
    repr_get_attr_int $I11, $P11, rx1111_curclass, "$!pos"
    lt $I11, 0, rx1111_fail
    nqp_rxpeek $I19, rx1111_bstack, rxcap1113_fail
    inc $I19
    set $I11, rx1111_bstack[$I19]
    $P11 = rx1111_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1111_pos)
    rx1111_cstack = rx1111_cur."!cursor_capture"($P11, "zw")
    goto rxcap1113_done
  rxcap1113_fail:
    goto rx1111_fail
  rxcap1113_done:
    repr_bind_attr_int rx1111_cur, rx1111_curclass, "$!pos", rx1111_pos
    $P11 = rx1111_cur."codeblock"()
    repr_get_attr_int $I11, $P11, rx1111_curclass, "$!pos"
    lt $I11, 0, rx1111_fail
    nqp_rxmark rx1111_bstack, rxsubrule1116_pass, -1, 0
  rxsubrule1116_pass:
    rx1111_cstack = rx1111_cur."!cursor_capture"($P11, "codeblock")
    repr_get_attr_int rx1111_pos, $P11, rx1111_curclass, "$!pos"
    rx1111_cur."!cursor_pass"(rx1111_pos, "assertion:sym<?{ }>", 'backtrack'=>1)
    .return (rx1111_cur)
  rx1111_restart:
    repr_get_attr_obj rx1111_cstack, rx1111_cur, rx1111_curclass, "$!cstack"
  rx1111_fail:
    unless rx1111_bstack, rx1111_done
    pop $I19, rx1111_bstack
    if_null rx1111_cstack, rx1111_cstack_done
    unless rx1111_cstack, rx1111_cstack_done
    dec $I19
    set $P11, rx1111_cstack[$I19]
  rx1111_cstack_done:
    pop rx1111_rep, rx1111_bstack
    pop rx1111_pos, rx1111_bstack
    pop $I19, rx1111_bstack
    lt rx1111_pos, -1, rx1111_done
    lt rx1111_pos, 0, rx1111_fail
    eq $I19, 0, rx1111_fail
    if_null rx1111_cstack, rx1111_jump
    elements $I18, rx1111_bstack
    le $I18, 0, rx1111_cut
    dec $I18
    set $I18, rx1111_bstack[$I18]
  rx1111_cut:
    assign rx1111_cstack, $I18
  rx1111_jump:
    jump $I19
  rx1111_done:
    rx1111_cur."!cursor_fail"()
    .return (rx1111_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "243_1337966799.879_caps"  :subid("769_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1394
    new $P104, "Hash"
    set $P104["zw"], 0
    set $P104["codeblock"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "243_1337966799.879_nfa"  :subid("770_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1394
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 6
    push $P105, "?!"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "before"
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "_block2699"  :anon :subid("242_1337966799.879") :method :outer("243_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1394
    .lex unicode:"$\x{a2}", $P2703
    .local string rx1114_tgt
    .local int rx1114_pos
    .local int rx1114_off
    .local int rx1114_eos
    .local int rx1114_rep
    .local pmc rx1114_cur
    .local pmc rx1114_curclass
    .local pmc rx1114_bstack
    .local pmc rx1114_cstack
    (rx1114_cur, rx1114_tgt, rx1114_pos, rx1114_curclass, rx1114_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1114_cur
    length rx1114_eos, rx1114_tgt
    eq $I19, 1, rx1114_restart
    repr_get_attr_int $I11, self, rx1114_curclass, "$!from"
    ne $I11, -1, rxscan1115_done
    goto rxscan1115_scan
  rxscan1115_loop:
    inc rx1114_pos
    gt rx1114_pos, rx1114_eos, rx1114_fail
    repr_bind_attr_int rx1114_cur, rx1114_curclass, "$!from", rx1114_pos
  rxscan1115_scan:
    nqp_rxmark rx1114_bstack, rxscan1115_loop, rx1114_pos, 0
  rxscan1115_done:
    add $I11, rx1114_pos, 1
    gt $I11, rx1114_eos, rx1114_fail
    substr $S10, rx1114_tgt, rx1114_pos, 1
    ne $S10, ucs4:"{", rx1114_fail
    add rx1114_pos, 1
    rx1114_cur."!cursor_pass"(rx1114_pos, 'backtrack'=>1)
    .return (rx1114_cur)
  rx1114_restart:
    repr_get_attr_obj rx1114_cstack, rx1114_cur, rx1114_curclass, "$!cstack"
  rx1114_fail:
    unless rx1114_bstack, rx1114_done
    pop $I19, rx1114_bstack
    if_null rx1114_cstack, rx1114_cstack_done
    unless rx1114_cstack, rx1114_cstack_done
    dec $I19
    set $P11, rx1114_cstack[$I19]
  rx1114_cstack_done:
    pop rx1114_rep, rx1114_bstack
    pop rx1114_pos, rx1114_bstack
    pop $I19, rx1114_bstack
    lt rx1114_pos, -1, rx1114_done
    lt rx1114_pos, 0, rx1114_fail
    eq $I19, 0, rx1114_fail
    if_null rx1114_cstack, rx1114_jump
    elements $I18, rx1114_bstack
    le $I18, 0, rx1114_cut
    dec $I18
    set $I18, rx1114_bstack[$I18]
  rx1114_cut:
    assign rx1114_cstack, $I18
  rx1114_jump:
    jump $I19
  rx1114_done:
    rx1114_cur."!cursor_fail"()
    .return (rx1114_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "242_1337966799.879_caps"  :subid("771_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1394
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "242_1337966799.879_nfa"  :subid("772_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1394
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 123
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "assertion:sym<name>"  :subid("245_1337966799.879") :outer("744_1337966799.879")
    .param pmc param_2705
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1398
    .const 'Sub' $P2711 = "244_1337966799.879" 
    capture_lex $P2711
    .lex "self", param_2705
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2706
    .lex "$/", $P2707
    .local string rx1117_tgt
    .local int rx1117_pos
    .local int rx1117_off
    .local int rx1117_eos
    .local int rx1117_rep
    .local pmc rx1117_cur
    .local pmc rx1117_curclass
    .local pmc rx1117_bstack
    .local pmc rx1117_cstack
    (rx1117_cur, rx1117_tgt, rx1117_pos, rx1117_curclass, rx1117_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1117_cur
    length rx1117_eos, rx1117_tgt
    eq $I19, 1, rx1117_restart
    repr_get_attr_int $I11, self, rx1117_curclass, "$!from"
    ne $I11, -1, rxscan1118_done
    goto rxscan1118_scan
  rxscan1118_loop:
    inc rx1117_pos
    gt rx1117_pos, rx1117_eos, rx1117_fail
    repr_bind_attr_int rx1117_cur, rx1117_curclass, "$!from", rx1117_pos
  rxscan1118_scan:
    nqp_rxmark rx1117_bstack, rxscan1118_loop, rx1117_pos, 0
  rxscan1118_done:
    repr_bind_attr_int rx1117_cur, rx1117_curclass, "$!pos", rx1117_pos
    $P11 = rx1117_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx1117_curclass, "$!pos"
    lt $I11, 0, rx1117_fail
    nqp_rxmark rx1117_bstack, rxsubrule1119_pass, -1, 0
  rxsubrule1119_pass:
    rx1117_cstack = rx1117_cur."!cursor_capture"($P11, "longname")
    repr_get_attr_int rx1117_pos, $P11, rx1117_curclass, "$!pos"
  # rx rxquantr1120 ** 0..1
    nqp_rxmark rx1117_bstack, rxquantr1120_done, rx1117_pos, 0
  rxquantr1120_loop:
  alt1121_0:
    nqp_rxmark rx1117_bstack, alt1121_1, rx1117_pos, 0
    .const 'Sub' $P2711 = "244_1337966799.879" 
    capture_lex $P2711
    repr_bind_attr_int rx1117_cur, rx1117_curclass, "$!pos", rx1117_pos
    $P11 = rx1117_cur."before"($P2711)
    repr_get_attr_int $I11, $P11, rx1117_curclass, "$!pos"
    lt $I11, 0, rx1117_fail
    goto alt1121_end
  alt1121_1:
    nqp_rxmark rx1117_bstack, alt1121_2, rx1117_pos, 0
    add $I11, rx1117_pos, 1
    gt $I11, rx1117_eos, rx1117_fail
    substr $S10, rx1117_tgt, rx1117_pos, 1
    ne $S10, ucs4:"=", rx1117_fail
    add rx1117_pos, 1
    repr_bind_attr_int rx1117_cur, rx1117_curclass, "$!pos", rx1117_pos
    $P11 = rx1117_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx1117_curclass, "$!pos"
    lt $I11, 0, rx1117_fail
    nqp_rxmark rx1117_bstack, rxsubrule1124_pass, -1, 0
  rxsubrule1124_pass:
    rx1117_cstack = rx1117_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx1117_pos, $P11, rx1117_curclass, "$!pos"
    goto alt1121_end
  alt1121_2:
    nqp_rxmark rx1117_bstack, alt1121_3, rx1117_pos, 0
    add $I11, rx1117_pos, 1
    gt $I11, rx1117_eos, rx1117_fail
    substr $S10, rx1117_tgt, rx1117_pos, 1
    ne $S10, ucs4:":", rx1117_fail
    add rx1117_pos, 1
    repr_bind_attr_int rx1117_cur, rx1117_curclass, "$!pos", rx1117_pos
    $P11 = rx1117_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx1117_curclass, "$!pos"
    lt $I11, 0, rx1117_fail
    nqp_rxmark rx1117_bstack, rxsubrule1125_pass, -1, 0
  rxsubrule1125_pass:
    rx1117_cstack = rx1117_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx1117_pos, $P11, rx1117_curclass, "$!pos"
    goto alt1121_end
  alt1121_3:
    nqp_rxmark rx1117_bstack, alt1121_4, rx1117_pos, 0
    add $I11, rx1117_pos, 1
    gt $I11, rx1117_eos, rx1117_fail
    substr $S10, rx1117_tgt, rx1117_pos, 1
    ne $S10, ucs4:"(", rx1117_fail
    add rx1117_pos, 1
    repr_bind_attr_int rx1117_cur, rx1117_curclass, "$!pos", rx1117_pos
    $P11 = rx1117_cur."LANG"("MAIN", "arglist")
    repr_get_attr_int $I11, $P11, rx1117_curclass, "$!pos"
    lt $I11, 0, rx1117_fail
    nqp_rxmark rx1117_bstack, rxsubrule1126_pass, -1, 0
  rxsubrule1126_pass:
    rx1117_cstack = rx1117_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx1117_pos, $P11, rx1117_curclass, "$!pos"
    add $I11, rx1117_pos, 1
    gt $I11, rx1117_eos, rx1117_fail
    substr $S10, rx1117_tgt, rx1117_pos, 1
    ne $S10, ucs4:")", rx1117_fail
    add rx1117_pos, 1
    goto alt1121_end
  alt1121_4:
    repr_bind_attr_int rx1117_cur, rx1117_curclass, "$!pos", rx1117_pos
    $P11 = rx1117_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx1117_curclass, "$!pos"
    lt $I11, 0, rx1117_fail
    repr_get_attr_int rx1117_pos, $P11, rx1117_curclass, "$!pos"
    repr_bind_attr_int rx1117_cur, rx1117_curclass, "$!pos", rx1117_pos
    $P11 = rx1117_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx1117_curclass, "$!pos"
    lt $I11, 0, rx1117_fail
    nqp_rxmark rx1117_bstack, rxsubrule1128_pass, -1, 0
  rxsubrule1128_pass:
    rx1117_cstack = rx1117_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx1117_pos, $P11, rx1117_curclass, "$!pos"
  alt1121_end:
    nqp_rxpeek $I19, rx1117_bstack, rxquantr1120_done
    inc $I19
    inc $I19
    set rx1117_rep, rx1117_bstack[$I19]
    nqp_rxcommit rx1117_bstack, rxquantr1120_done
    inc rx1117_rep
  rxquantr1120_done:
    rx1117_cur."!cursor_pass"(rx1117_pos, "assertion:sym<name>", 'backtrack'=>1)
    .return (rx1117_cur)
  rx1117_restart:
    repr_get_attr_obj rx1117_cstack, rx1117_cur, rx1117_curclass, "$!cstack"
  rx1117_fail:
    unless rx1117_bstack, rx1117_done
    pop $I19, rx1117_bstack
    if_null rx1117_cstack, rx1117_cstack_done
    unless rx1117_cstack, rx1117_cstack_done
    dec $I19
    set $P11, rx1117_cstack[$I19]
  rx1117_cstack_done:
    pop rx1117_rep, rx1117_bstack
    pop rx1117_pos, rx1117_bstack
    pop $I19, rx1117_bstack
    lt rx1117_pos, -1, rx1117_done
    lt rx1117_pos, 0, rx1117_fail
    eq $I19, 0, rx1117_fail
    if_null rx1117_cstack, rx1117_jump
    elements $I18, rx1117_bstack
    le $I18, 0, rx1117_cut
    dec $I18
    set $I18, rx1117_bstack[$I18]
  rx1117_cut:
    assign rx1117_cstack, $I18
  rx1117_jump:
    jump $I19
  rx1117_done:
    rx1117_cur."!cursor_fail"()
    .return (rx1117_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "245_1337966799.879_caps"  :subid("773_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1398
    new $P104, "Hash"
    set $P104["longname"], 0
    set $P104["assertion"], 2
    set $P104["arglist"], 2
    set $P104["nibbler"], 2
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "245_1337966799.879_nfa"  :subid("774_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1398
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "identifier"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 8
    push $P106, "before"
    push $P106, 0
    push $P106, 2
    push $P106, 61
    push $P106, 3
    push $P106, 2
    push $P106, 58
    push $P106, 4
    push $P106, 2
    push $P106, 40
    push $P106, 5
    push $P106, 8
    push $P106, "normspace"
    push $P106, 7
    push $P106, 1
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, 8
    push $P107, "assertion"
    push $P107, 0
    new $P108, "ResizablePMCArray"
    push $P108, 8
    push $P108, "arglist"
    push $P108, 0
    new $P109, "ResizablePMCArray"
    push $P109, 8
    push $P109, "LANG"
    push $P109, 6
    new $P110, "ResizablePMCArray"
    push $P110, 2
    push $P110, 41
    push $P110, 0
    new $P111, "ResizablePMCArray"
    push $P111, 8
    push $P111, "nibbler"
    push $P111, 0
    new $P112, "ResizablePMCArray"
    push $P112, $P104
    push $P112, $P105
    push $P112, $P106
    push $P112, $P107
    push $P112, $P108
    push $P112, $P109
    push $P112, $P110
    push $P112, $P111
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "_block2710"  :anon :subid("244_1337966799.879") :method :outer("245_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1398
    .lex unicode:"$\x{a2}", $P2714
    .local string rx1122_tgt
    .local int rx1122_pos
    .local int rx1122_off
    .local int rx1122_eos
    .local int rx1122_rep
    .local pmc rx1122_cur
    .local pmc rx1122_curclass
    .local pmc rx1122_bstack
    .local pmc rx1122_cstack
    (rx1122_cur, rx1122_tgt, rx1122_pos, rx1122_curclass, rx1122_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1122_cur
    length rx1122_eos, rx1122_tgt
    eq $I19, 1, rx1122_restart
    repr_get_attr_int $I11, self, rx1122_curclass, "$!from"
    ne $I11, -1, rxscan1123_done
    goto rxscan1123_scan
  rxscan1123_loop:
    inc rx1122_pos
    gt rx1122_pos, rx1122_eos, rx1122_fail
    repr_bind_attr_int rx1122_cur, rx1122_curclass, "$!from", rx1122_pos
  rxscan1123_scan:
    nqp_rxmark rx1122_bstack, rxscan1123_loop, rx1122_pos, 0
  rxscan1123_done:
    add $I11, rx1122_pos, 1
    gt $I11, rx1122_eos, rx1122_fail
    substr $S10, rx1122_tgt, rx1122_pos, 1
    ne $S10, ucs4:">", rx1122_fail
    add rx1122_pos, 1
    rx1122_cur."!cursor_pass"(rx1122_pos, 'backtrack'=>1)
    .return (rx1122_cur)
  rx1122_restart:
    repr_get_attr_obj rx1122_cstack, rx1122_cur, rx1122_curclass, "$!cstack"
  rx1122_fail:
    unless rx1122_bstack, rx1122_done
    pop $I19, rx1122_bstack
    if_null rx1122_cstack, rx1122_cstack_done
    unless rx1122_cstack, rx1122_cstack_done
    dec $I19
    set $P11, rx1122_cstack[$I19]
  rx1122_cstack_done:
    pop rx1122_rep, rx1122_bstack
    pop rx1122_pos, rx1122_bstack
    pop $I19, rx1122_bstack
    lt rx1122_pos, -1, rx1122_done
    lt rx1122_pos, 0, rx1122_fail
    eq $I19, 0, rx1122_fail
    if_null rx1122_cstack, rx1122_jump
    elements $I18, rx1122_bstack
    le $I18, 0, rx1122_cut
    dec $I18
    set $I18, rx1122_bstack[$I18]
  rx1122_cut:
    assign rx1122_cstack, $I18
  rx1122_jump:
    jump $I19
  rx1122_done:
    rx1122_cur."!cursor_fail"()
    .return (rx1122_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "244_1337966799.879_caps"  :subid("775_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1398
    new $P104, "Hash"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "244_1337966799.879_nfa"  :subid("776_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1398
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 2
    push $P105, 62
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "assertion:sym<var>"  :subid("246_1337966799.879") :outer("744_1337966799.879")
    .param pmc param_2716
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1409
    .lex "self", param_2716
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2717
    .lex "$/", $P2718
    .local string rx1129_tgt
    .local int rx1129_pos
    .local int rx1129_off
    .local int rx1129_eos
    .local int rx1129_rep
    .local pmc rx1129_cur
    .local pmc rx1129_curclass
    .local pmc rx1129_bstack
    .local pmc rx1129_cstack
    (rx1129_cur, rx1129_tgt, rx1129_pos, rx1129_curclass, rx1129_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1129_cur
    length rx1129_eos, rx1129_tgt
    eq $I19, 1, rx1129_restart
    repr_get_attr_int $I11, self, rx1129_curclass, "$!from"
    ne $I11, -1, rxscan1130_done
    goto rxscan1130_scan
  rxscan1130_loop:
    inc rx1129_pos
    gt rx1129_pos, rx1129_eos, rx1129_fail
    repr_bind_attr_int rx1129_cur, rx1129_curclass, "$!from", rx1129_pos
  rxscan1130_scan:
    nqp_rxmark rx1129_bstack, rxscan1130_loop, rx1129_pos, 0
  rxscan1130_done:
    ge rx1129_pos, rx1129_eos, rx1129_fail
    substr $S11, rx1129_tgt, rx1129_pos, 1
    index $I11, ucs4:"$@", $S11
    lt $I11, 0, rx1129_fail
    repr_bind_attr_int rx1129_cur, rx1129_curclass, "$!pos", rx1129_pos
    $P11 = rx1129_cur."LANG"("MAIN", "variable")
    repr_get_attr_int $I11, $P11, rx1129_curclass, "$!pos"
    lt $I11, 0, rx1129_fail
    nqp_rxmark rx1129_bstack, rxsubrule1131_pass, -1, 0
  rxsubrule1131_pass:
    rx1129_cstack = rx1129_cur."!cursor_capture"($P11, "var")
    repr_get_attr_int rx1129_pos, $P11, rx1129_curclass, "$!pos"
    rx1129_cur."!cursor_pass"(rx1129_pos, "assertion:sym<var>", 'backtrack'=>1)
    .return (rx1129_cur)
  rx1129_restart:
    repr_get_attr_obj rx1129_cstack, rx1129_cur, rx1129_curclass, "$!cstack"
  rx1129_fail:
    unless rx1129_bstack, rx1129_done
    pop $I19, rx1129_bstack
    if_null rx1129_cstack, rx1129_cstack_done
    unless rx1129_cstack, rx1129_cstack_done
    dec $I19
    set $P11, rx1129_cstack[$I19]
  rx1129_cstack_done:
    pop rx1129_rep, rx1129_bstack
    pop rx1129_pos, rx1129_bstack
    pop $I19, rx1129_bstack
    lt rx1129_pos, -1, rx1129_done
    lt rx1129_pos, 0, rx1129_fail
    eq $I19, 0, rx1129_fail
    if_null rx1129_cstack, rx1129_jump
    elements $I18, rx1129_bstack
    le $I18, 0, rx1129_cut
    dec $I18
    set $I18, rx1129_bstack[$I18]
  rx1129_cut:
    assign rx1129_cstack, $I18
  rx1129_jump:
    jump $I19
  rx1129_done:
    rx1129_cur."!cursor_fail"()
    .return (rx1129_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "246_1337966799.879_caps"  :subid("777_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1409
    new $P104, "Hash"
    set $P104["var"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "246_1337966799.879_nfa"  :subid("778_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1409
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 6
    push $P105, "$@"
    push $P105, 2
    new $P106, "ResizablePMCArray"
    push $P106, 0
    push $P106, 0
    push $P106, 0
    new $P107, "ResizablePMCArray"
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "codeblock"  :subid("247_1337966799.879") :outer("744_1337966799.879")
    .param pmc param_2722
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1413
    .lex "self", param_2722
    .local pmc self
    find_lex $P103, "self"
    set self, $P103
    .lex unicode:"$\x{a2}", $P2723
    .lex "$/", $P2724
    .local string rx1132_tgt
    .local int rx1132_pos
    .local int rx1132_off
    .local int rx1132_eos
    .local int rx1132_rep
    .local pmc rx1132_cur
    .local pmc rx1132_curclass
    .local pmc rx1132_bstack
    .local pmc rx1132_cstack
    (rx1132_cur, rx1132_tgt, rx1132_pos, rx1132_curclass, rx1132_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1132_cur
    length rx1132_eos, rx1132_tgt
    eq $I19, 1, rx1132_restart
    repr_get_attr_int $I11, self, rx1132_curclass, "$!from"
    ne $I11, -1, rxscan1133_done
    goto rxscan1133_scan
  rxscan1133_loop:
    inc rx1132_pos
    gt rx1132_pos, rx1132_eos, rx1132_fail
    repr_bind_attr_int rx1132_cur, rx1132_curclass, "$!from", rx1132_pos
  rxscan1133_scan:
    nqp_rxmark rx1132_bstack, rxscan1133_loop, rx1132_pos, 0
  rxscan1133_done:
    repr_bind_attr_int rx1132_cur, rx1132_curclass, "$!pos", rx1132_pos
    $P11 = rx1132_cur."LANG"("MAIN", "pblock")
    repr_get_attr_int $I11, $P11, rx1132_curclass, "$!pos"
    lt $I11, 0, rx1132_fail
    nqp_rxmark rx1132_bstack, rxsubrule1134_pass, -1, 0
  rxsubrule1134_pass:
    rx1132_cstack = rx1132_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx1132_pos, $P11, rx1132_curclass, "$!pos"
    rx1132_cur."!cursor_pass"(rx1132_pos, "codeblock", 'backtrack'=>1)
    .return (rx1132_cur)
  rx1132_restart:
    repr_get_attr_obj rx1132_cstack, rx1132_cur, rx1132_curclass, "$!cstack"
  rx1132_fail:
    unless rx1132_bstack, rx1132_done
    pop $I19, rx1132_bstack
    if_null rx1132_cstack, rx1132_cstack_done
    unless rx1132_cstack, rx1132_cstack_done
    dec $I19
    set $P11, rx1132_cstack[$I19]
  rx1132_cstack_done:
    pop rx1132_rep, rx1132_bstack
    pop rx1132_pos, rx1132_bstack
    pop $I19, rx1132_bstack
    lt rx1132_pos, -1, rx1132_done
    lt rx1132_pos, 0, rx1132_fail
    eq $I19, 0, rx1132_fail
    if_null rx1132_cstack, rx1132_jump
    elements $I18, rx1132_bstack
    le $I18, 0, rx1132_cut
    dec $I18
    set $I18, rx1132_bstack[$I18]
  rx1132_cut:
    assign rx1132_cstack, $I18
  rx1132_jump:
    jump $I19
  rx1132_done:
    rx1132_cur."!cursor_fail"()
    .return (rx1132_cur)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "247_1337966799.879_caps"  :subid("779_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1413
    new $P104, "Hash"
    set $P104["block"], 0
    .return ($P104)
.end


.HLL "nqp"

.namespace ["Sub"]
.sub "247_1337966799.879_nfa"  :subid("780_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1413
    new $P104, "ResizablePMCArray"
    new $P105, "ResizablePMCArray"
    push $P105, 8
    push $P105, "LANG"
    push $P105, 0
    new $P106, "ResizablePMCArray"
    push $P106, $P104
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2727"  :subid("781_1337966799.879") :outer("368_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1420
    .const 'Sub' $P3949 = "360_1337966799.879" 
    capture_lex $P3949
    .const 'Sub' $P3946 = "359_1337966799.879" 
    capture_lex $P3946
    .const 'Sub' $P3943 = "358_1337966799.879" 
    capture_lex $P3943
    .const 'Sub' $P3940 = "357_1337966799.879" 
    capture_lex $P3940
    .const 'Sub' $P3937 = "356_1337966799.879" 
    capture_lex $P3937
    .const 'Sub' $P3934 = "355_1337966799.879" 
    capture_lex $P3934
    .const 'Sub' $P3931 = "354_1337966799.879" 
    capture_lex $P3931
    .const 'Sub' $P3927 = "353_1337966799.879" 
    capture_lex $P3927
    .const 'Sub' $P3924 = "352_1337966799.879" 
    capture_lex $P3924
    .const 'Sub' $P3920 = "351_1337966799.879" 
    capture_lex $P3920
    .const 'Sub' $P3916 = "350_1337966799.879" 
    capture_lex $P3916
    .const 'Sub' $P3904 = "349_1337966799.879" 
    capture_lex $P3904
    .const 'Sub' $P3900 = "348_1337966799.879" 
    capture_lex $P3900
    .const 'Sub' $P3896 = "347_1337966799.879" 
    capture_lex $P3896
    .const 'Sub' $P3892 = "346_1337966799.879" 
    capture_lex $P3892
    .const 'Sub' $P3888 = "345_1337966799.879" 
    capture_lex $P3888
    .const 'Sub' $P3884 = "344_1337966799.879" 
    capture_lex $P3884
    .const 'Sub' $P3880 = "343_1337966799.879" 
    capture_lex $P3880
    .const 'Sub' $P3868 = "342_1337966799.879" 
    capture_lex $P3868
    .const 'Sub' $P3861 = "341_1337966799.879" 
    capture_lex $P3861
    .const 'Sub' $P3857 = "340_1337966799.879" 
    capture_lex $P3857
    .const 'Sub' $P3853 = "339_1337966799.879" 
    capture_lex $P3853
    .const 'Sub' $P3849 = "338_1337966799.879" 
    capture_lex $P3849
    .const 'Sub' $P3845 = "337_1337966799.879" 
    capture_lex $P3845
    .const 'Sub' $P3841 = "336_1337966799.879" 
    capture_lex $P3841
    .const 'Sub' $P3832 = "335_1337966799.879" 
    capture_lex $P3832
    .const 'Sub' $P3814 = "334_1337966799.879" 
    capture_lex $P3814
    .const 'Sub' $P3810 = "333_1337966799.879" 
    capture_lex $P3810
    .const 'Sub' $P3806 = "332_1337966799.879" 
    capture_lex $P3806
    .const 'Sub' $P3797 = "331_1337966799.879" 
    capture_lex $P3797
    .const 'Sub' $P3790 = "330_1337966799.879" 
    capture_lex $P3790
    .const 'Sub' $P3786 = "329_1337966799.879" 
    capture_lex $P3786
    .const 'Sub' $P3782 = "328_1337966799.879" 
    capture_lex $P3782
    .const 'Sub' $P3751 = "327_1337966799.879" 
    capture_lex $P3751
    .const 'Sub' $P3747 = "326_1337966799.879" 
    capture_lex $P3747
    .const 'Sub' $P3744 = "325_1337966799.879" 
    capture_lex $P3744
    .const 'Sub' $P3732 = "324_1337966799.879" 
    capture_lex $P3732
    .const 'Sub' $P3728 = "323_1337966799.879" 
    capture_lex $P3728
    .const 'Sub' $P3718 = "322_1337966799.879" 
    capture_lex $P3718
    .const 'Sub' $P3699 = "321_1337966799.879" 
    capture_lex $P3699
    .const 'Sub' $P3693 = "320_1337966799.879" 
    capture_lex $P3693
    .const 'Sub' $P3690 = "319_1337966799.879" 
    capture_lex $P3690
    .const 'Sub' $P3670 = "318_1337966799.879" 
    capture_lex $P3670
    .const 'Sub' $P3645 = "317_1337966799.879" 
    capture_lex $P3645
    .const 'Sub' $P3609 = "316_1337966799.879" 
    capture_lex $P3609
    .const 'Sub' $P3605 = "315_1337966799.879" 
    capture_lex $P3605
    .const 'Sub' $P3587 = "314_1337966799.879" 
    capture_lex $P3587
    .const 'Sub' $P3580 = "313_1337966799.879" 
    capture_lex $P3580
    .const 'Sub' $P3575 = "312_1337966799.879" 
    capture_lex $P3575
    .const 'Sub' $P3538 = "311_1337966799.879" 
    capture_lex $P3538
    .const 'Sub' $P3519 = "310_1337966799.879" 
    capture_lex $P3519
    .const 'Sub' $P3485 = "309_1337966799.879" 
    capture_lex $P3485
    .const 'Sub' $P3408 = "308_1337966799.879" 
    capture_lex $P3408
    .const 'Sub' $P3404 = "307_1337966799.879" 
    capture_lex $P3404
    .const 'Sub' $P3400 = "306_1337966799.879" 
    capture_lex $P3400
    .const 'Sub' $P3360 = "305_1337966799.879" 
    capture_lex $P3360
    .const 'Sub' $P3356 = "304_1337966799.879" 
    capture_lex $P3356
    .const 'Sub' $P3349 = "303_1337966799.879" 
    capture_lex $P3349
    .const 'Sub' $P3342 = "302_1337966799.879" 
    capture_lex $P3342
    .const 'Sub' $P3335 = "301_1337966799.879" 
    capture_lex $P3335
    .const 'Sub' $P3325 = "300_1337966799.879" 
    capture_lex $P3325
    .const 'Sub' $P3321 = "299_1337966799.879" 
    capture_lex $P3321
    .const 'Sub' $P3317 = "298_1337966799.879" 
    capture_lex $P3317
    .const 'Sub' $P3313 = "297_1337966799.879" 
    capture_lex $P3313
    .const 'Sub' $P3246 = "296_1337966799.879" 
    capture_lex $P3246
    .const 'Sub' $P3220 = "295_1337966799.879" 
    capture_lex $P3220
    .const 'Sub' $P3216 = "294_1337966799.879" 
    capture_lex $P3216
    .const 'Sub' $P3212 = "293_1337966799.879" 
    capture_lex $P3212
    .const 'Sub' $P3208 = "292_1337966799.879" 
    capture_lex $P3208
    .const 'Sub' $P3204 = "291_1337966799.879" 
    capture_lex $P3204
    .const 'Sub' $P3200 = "290_1337966799.879" 
    capture_lex $P3200
    .const 'Sub' $P3196 = "289_1337966799.879" 
    capture_lex $P3196
    .const 'Sub' $P3141 = "288_1337966799.879" 
    capture_lex $P3141
    .const 'Sub' $P3123 = "287_1337966799.879" 
    capture_lex $P3123
    .const 'Sub' $P3117 = "286_1337966799.879" 
    capture_lex $P3117
    .const 'Sub' $P3113 = "285_1337966799.879" 
    capture_lex $P3113
    .const 'Sub' $P3109 = "284_1337966799.879" 
    capture_lex $P3109
    .const 'Sub' $P3105 = "283_1337966799.879" 
    capture_lex $P3105
    .const 'Sub' $P3101 = "282_1337966799.879" 
    capture_lex $P3101
    .const 'Sub' $P3097 = "281_1337966799.879" 
    capture_lex $P3097
    .const 'Sub' $P3093 = "280_1337966799.879" 
    capture_lex $P3093
    .const 'Sub' $P3089 = "279_1337966799.879" 
    capture_lex $P3089
    .const 'Sub' $P3085 = "278_1337966799.879" 
    capture_lex $P3085
    .const 'Sub' $P3081 = "277_1337966799.879" 
    capture_lex $P3081
    .const 'Sub' $P3077 = "276_1337966799.879" 
    capture_lex $P3077
    .const 'Sub' $P3073 = "275_1337966799.879" 
    capture_lex $P3073
    .const 'Sub' $P3069 = "274_1337966799.879" 
    capture_lex $P3069
    .const 'Sub' $P3065 = "273_1337966799.879" 
    capture_lex $P3065
    .const 'Sub' $P3058 = "272_1337966799.879" 
    capture_lex $P3058
    .const 'Sub' $P3051 = "271_1337966799.879" 
    capture_lex $P3051
    .const 'Sub' $P3047 = "270_1337966799.879" 
    capture_lex $P3047
    .const 'Sub' $P3043 = "269_1337966799.879" 
    capture_lex $P3043
    .const 'Sub' $P3038 = "268_1337966799.879" 
    capture_lex $P3038
    .const 'Sub' $P3033 = "267_1337966799.879" 
    capture_lex $P3033
    .const 'Sub' $P3024 = "266_1337966799.879" 
    capture_lex $P3024
    .const 'Sub' $P3013 = "265_1337966799.879" 
    capture_lex $P3013
    .const 'Sub' $P3007 = "264_1337966799.879" 
    capture_lex $P3007
    .const 'Sub' $P3002 = "263_1337966799.879" 
    capture_lex $P3002
    .const 'Sub' $P2983 = "262_1337966799.879" 
    capture_lex $P2983
    .const 'Sub' $P2977 = "261_1337966799.879" 
    capture_lex $P2977
    .const 'Sub' $P2974 = "260_1337966799.879" 
    capture_lex $P2974
    .const 'Sub' $P2971 = "259_1337966799.879" 
    capture_lex $P2971
    .const 'Sub' $P2951 = "258_1337966799.879" 
    capture_lex $P2951
    .const 'Sub' $P2948 = "257_1337966799.879" 
    capture_lex $P2948
    .const 'Sub' $P2936 = "256_1337966799.879" 
    capture_lex $P2936
    .const 'Sub' $P2932 = "255_1337966799.879" 
    capture_lex $P2932
    .const 'Sub' $P2928 = "254_1337966799.879" 
    capture_lex $P2928
    .const 'Sub' $P2923 = "253_1337966799.879" 
    capture_lex $P2923
    .const 'Sub' $P2894 = "252_1337966799.879" 
    capture_lex $P2894
    .const 'Sub' $P2876 = "251_1337966799.879" 
    capture_lex $P2876
    .const 'Sub' $P2867 = "250_1337966799.879" 
    capture_lex $P2867
    .const 'Sub' $P2857 = "249_1337966799.879" 
    capture_lex $P2857
    .const 'Sub' $P2853 = "248_1337966799.879" 
    capture_lex $P2853
    .const 'Sub' $P2824 = "797_1337966799.879" 
    capture_lex $P2824
    .const 'Sub' $P2819 = "796_1337966799.879" 
    capture_lex $P2819
    .const 'Sub' $P2801 = "794_1337966799.879" 
    capture_lex $P2801
    .const 'Sub' $P2782 = "792_1337966799.879" 
    capture_lex $P2782
    .const 'Sub' $P2778 = "791_1337966799.879" 
    capture_lex $P2778
    .const 'Sub' $P2770 = "790_1337966799.879" 
    capture_lex $P2770
    .const 'Sub' $P2760 = "788_1337966799.879" 
    capture_lex $P2760
    .const 'Sub' $P2755 = "787_1337966799.879" 
    capture_lex $P2755
    .const 'Sub' $P2749 = "786_1337966799.879" 
    capture_lex $P2749
    .const 'Sub' $P2736 = "783_1337966799.879" 
    capture_lex $P2736
    .const 'Sub' $P2730 = "782_1337966799.879" 
    capture_lex $P2730
.annotate 'line', 1421
    .const 'Sub' $P2730 = "782_1337966799.879" 
    newclosure $P2734, $P2730
    set $P2729, $P2734
    .lex "xblock_immediate", $P2729
.annotate 'line', 1426
    .const 'Sub' $P2736 = "783_1337966799.879" 
    newclosure $P2747, $P2736
    set $P2735, $P2747
    .lex "block_immediate", $P2735
.annotate 'line', 1436
    .const 'Sub' $P2749 = "786_1337966799.879" 
    newclosure $P2753, $P2749
    set $P2748, $P2753
    .lex "vivitype", $P2748
.annotate 'line', 1455
    .const 'Sub' $P2755 = "787_1337966799.879" 
    newclosure $P2758, $P2755
    set $P2754, $P2758
    .lex "colonpair_str", $P2754
.annotate 'line', 1635
    .const 'Sub' $P2760 = "788_1337966799.879" 
    newclosure $P2768, $P2760
    set $P2759, $P2768
    .lex "import_HOW_exports", $P2759
.annotate 'line', 1740
    .const 'Sub' $P2770 = "790_1337966799.879" 
    newclosure $P2776, $P2770
    set $P2769, $P2776
    .lex "push_block_handler", $P2769
.annotate 'line', 2305
    .const 'Sub' $P2778 = "791_1337966799.879" 
    newclosure $P2780, $P2778
    set $P2777, $P2780
    .lex "only_star_block", $P2777
.annotate 'line', 2314
    .const 'Sub' $P2782 = "792_1337966799.879" 
    newclosure $P2799, $P2782
    set $P2781, $P2799
    .lex "attach_multi_signature", $P2781
.annotate 'line', 2327
    .const 'Sub' $P2801 = "794_1337966799.879" 
    newclosure $P2817, $P2801
    set $P2800, $P2817
    .lex "attach_multi_signature_to_parrot_sub", $P2800
.annotate 'line', 2786
    .const 'Sub' $P2819 = "796_1337966799.879" 
    newclosure $P2822, $P2819
    set $P2818, $P2822
    .lex "control", $P2818
.annotate 'line', 2805
    .const 'Sub' $P2824 = "797_1337966799.879" 
    newclosure $P2850, $P2824
    set $P2823, $P2850
    .lex "lexical_package_lookup", $P2823
.annotate 'line', 1420
    .lex "$?PACKAGE", $P2851
    .lex "$?CLASS", $P2852
    set $P118, $P2729
    set $P118, $P2735
    set $P118, $P2748
    set $P118, $P2754
    set $P118, $P2759
    set $P118, $P2769
    set $P118, $P2777
    set $P118, $P2781
    set $P118, $P2800
    set $P118, $P2818
    set $P118, $P2823
    .return ($P118)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "xblock_immediate"  :subid("782_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_2731
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1421
    .lex "$xblock", param_2731
.annotate 'line', 1422
    set $P2732, param_2731
    unless_null $P2732, vivify_1376
    $P2732 = root_new ['parrot';'ResizablePMCArray']
  vivify_1376:
    set $P103, $P2732[1]
    unless_null $P103, vivify_1377
    new $P103, "Undef"
  vivify_1377:
    $P104 = "block_immediate"($P103)
    set $P2733, param_2731
    unless_null $P2733, vivify_1378
    $P2733 = root_new ['parrot';'ResizablePMCArray']
    set param_2731, $P2733
  vivify_1378:
    set $P2733[1], $P104
.annotate 'line', 1421
    set $P103, param_2731
    unless_null $P103, vivify_1379
    new $P103, "Undef"
  vivify_1379:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "block_immediate"  :subid("783_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_2737
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1426
    .const 'Sub' $P2741 = "784_1337966799.879" 
    capture_lex $P2741
    .lex "$block", param_2737
.annotate 'line', 1427
    set $P104, param_2737
    unless_null $P104, vivify_1380
    new $P104, "Undef"
  vivify_1380:
    $P104."blocktype"("immediate")
.annotate 'line', 1428
    set $P105, param_2737
    unless_null $P105, vivify_1381
    new $P105, "Undef"
  vivify_1381:
    $P106 = $P105."symtable"()
    unless $P106, unless_2739
    set $P104, $P106
    goto unless_2739_end
  unless_2739:
    set $P107, param_2737
    unless_null $P107, vivify_1382
    new $P107, "Undef"
  vivify_1382:
    $P108 = $P107."handlers"()
    set $P104, $P108
  unless_2739_end:
    if $P104, unless_2738_end
    .const 'Sub' $P2741 = "784_1337966799.879" 
    capture_lex $P2741
    $P2741()
  unless_2738_end:
.annotate 'line', 1426
    set $P104, param_2737
    unless_null $P104, vivify_1389
    new $P104, "Undef"
  vivify_1389:
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block2740"  :anon :subid("784_1337966799.879") :outer("783_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1428
    .const 'Sub' $P2744 = "785_1337966799.879" 
    capture_lex $P2744
.annotate 'line', 1429
    new $P109, "Undef"
    set $P2742, $P109
    .lex "$stmts", $P2742
    get_hll_global $P110, "GLOBAL"
    nqp_get_package_through_who $P111, $P110, "PAST"
    get_who $P112, $P111
    set $P113, $P112["Stmts"]
    find_lex $P114, "$block"
    unless_null $P114, vivify_1383
    new $P114, "Undef"
  vivify_1383:
    $P115 = $P113."new"($P114 :named("node"))
    set $P2742, $P115
.annotate 'line', 1430
    find_lex $P111, "$block"
    unless_null $P111, vivify_1384
    new $P111, "Undef"
  vivify_1384:
    $P112 = $P111."list"()
    defined $I100, $P112
    unless $I100, for_undef_1385
    iter $P110, $P112
    new $P114, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P114, loop2746_handler
    push_eh $P114
  loop2746_test:
    unless $P110, loop2746_done
    shift $P113, $P110
  loop2746_redo:
    .const 'Sub' $P2744 = "785_1337966799.879" 
    capture_lex $P2744
    $P2744($P113)
  loop2746_next:
    goto loop2746_test
  loop2746_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P115, exception, 'type'
    eq $P115, .CONTROL_LOOP_NEXT, loop2746_next
    eq $P115, .CONTROL_LOOP_REDO, loop2746_redo
  loop2746_done:
    pop_eh 
  for_undef_1385:
.annotate 'line', 1431
    set $P110, $P2742
    unless_null $P110, vivify_1388
    new $P110, "Undef"
  vivify_1388:
    store_lex "$block", $P110
.annotate 'line', 1428
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2743"  :anon :subid("785_1337966799.879") :outer("784_1337966799.879")
    .param pmc param_2745
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1430
    .lex "$_", param_2745
    find_lex $P114, "$stmts"
    unless_null $P114, vivify_1386
    new $P114, "Undef"
  vivify_1386:
    find_lex $P115, "$_"
    unless_null $P115, vivify_1387
    new $P115, "Undef"
  vivify_1387:
    $P116 = $P114."push"($P115)
    .return ($P116)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "vivitype"  :subid("786_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_2750
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1436
    .lex "$sigil", param_2750
.annotate 'line', 1437
    set $P106, param_2750
    unless_null $P106, vivify_1390
    new $P106, "Undef"
  vivify_1390:
    set $S100, $P106
    iseq $I100, $S100, "%"
    if $I100, if_2751
.annotate 'line', 1439
    set $P113, param_2750
    unless_null $P113, vivify_1391
    new $P113, "Undef"
  vivify_1391:
    set $S101, $P113
    iseq $I101, $S101, "@"
    if $I101, if_2752
    new $P119, "String"
    assign $P119, "Undef"
    set $P112, $P119
    goto if_2752_end
  if_2752:
.annotate 'line', 1440
    get_hll_global $P114, "GLOBAL"
    nqp_get_package_through_who $P115, $P114, "PAST"
    get_who $P116, $P115
    set $P117, $P116["Op"]
    $P118 = $P117."new"("    %r = root_new ['parrot';'ResizablePMCArray']" :named("inline"))
    set $P112, $P118
  if_2752_end:
    set $P105, $P112
.annotate 'line', 1437
    goto if_2751_end
  if_2751:
.annotate 'line', 1438
    get_hll_global $P107, "GLOBAL"
    nqp_get_package_through_who $P108, $P107, "PAST"
    get_who $P109, $P108
    set $P110, $P109["Op"]
    $P111 = $P110."new"("    %r = root_new ['parrot';'Hash']" :named("inline"))
    set $P105, $P111
  if_2751_end:
.annotate 'line', 1436
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "colonpair_str"  :subid("787_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_2756
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1455
    .lex "$ast", param_2756
.annotate 'line', 1456
    get_hll_global $P107, "GLOBAL"
    nqp_get_package_through_who $P108, $P107, "PAST"
    get_who $P109, $P108
    set $P110, $P109["Op"]
    set $P111, param_2756
    unless_null $P111, vivify_1392
    new $P111, "Undef"
  vivify_1392:
    $P112 = $P110."ACCEPTS"($P111)
    if $P112, if_2757
.annotate 'line', 1458
    set $P115, param_2756
    unless_null $P115, vivify_1393
    new $P115, "Undef"
  vivify_1393:
    $P116 = $P115."value"()
    set $P106, $P116
.annotate 'line', 1456
    goto if_2757_end
  if_2757:
.annotate 'line', 1457
    set $P113, param_2756
    unless_null $P113, vivify_1394
    new $P113, "Undef"
  vivify_1394:
    $P114 = $P113."list"()
    join $S100, " ", $P114
    new $P106, 'String'
    set $P106, $S100
  if_2757_end:
.annotate 'line', 1455
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "import_HOW_exports"  :subid("788_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_2761
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1635
    .const 'Sub' $P2765 = "789_1337966799.879" 
    capture_lex $P2765
    .lex "$UNIT", param_2761
.annotate 'line', 1637
    set $P108, param_2761
    unless_null $P108, vivify_1395
    new $P108, "Undef"
  vivify_1395:
    exists $I100, $P108["EXPORTHOW"]
    if $I100, if_2762
    new $P107, 'Integer'
    set $P107, $I100
    goto if_2762_end
  if_2762:
.annotate 'line', 1638
    set $P2763, param_2761
    unless_null $P2763, vivify_1396
    $P2763 = root_new ['parrot';'Hash']
  vivify_1396:
    set $P110, $P2763["EXPORTHOW"]
    unless_null $P110, vivify_1397
    new $P110, "Undef"
  vivify_1397:
    get_who $P111, $P110
    defined $I101, $P111
    unless $I101, for_undef_1398
    iter $P109, $P111
    new $P113, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P113, loop2767_handler
    push_eh $P113
  loop2767_test:
    unless $P109, loop2767_done
    shift $P112, $P109
  loop2767_redo:
    .const 'Sub' $P2765 = "789_1337966799.879" 
    capture_lex $P2765
    $P2765($P112)
  loop2767_next:
    goto loop2767_test
  loop2767_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P115, exception, 'type'
    eq $P115, .CONTROL_LOOP_NEXT, loop2767_next
    eq $P115, .CONTROL_LOOP_REDO, loop2767_redo
  loop2767_done:
    pop_eh 
  for_undef_1398:
.annotate 'line', 1637
    set $P107, $P109
  if_2762_end:
.annotate 'line', 1635
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2764"  :anon :subid("789_1337966799.879") :outer("788_1337966799.879")
    .param pmc param_2766
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1638
    .lex "$_", param_2766
.annotate 'line', 1639
    find_lex $P113, "$_"
    unless_null $P113, vivify_1399
    new $P113, "Undef"
  vivify_1399:
    $P114 = $P113."value"()
    find_lex $P115, "$_"
    unless_null $P115, vivify_1400
    new $P115, "Undef"
  vivify_1400:
    $P116 = $P115."key"()
    find_dynamic_lex $P119, "%*HOW"
    unless_null $P119, vivify_1401
    get_hll_global $P117, "GLOBAL"
    get_who $P118, $P117
    set $P119, $P118["%HOW"]
    unless_null $P119, vivify_1402
    die "Contextual %*HOW not found"
  vivify_1402:
    store_dynamic_lex "%*HOW", $P119
  vivify_1401:
    set $P119[$P116], $P114
.annotate 'line', 1638
    .return ($P114)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "push_block_handler"  :subid("790_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_2771
    .param pmc param_2772
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1740
    .lex "$/", param_2771
    .lex "$block", param_2772
.annotate 'line', 1741
    new $P108, "Undef"
    set $P2773, $P108
    .lex "$BLOCK", $P2773
    find_dynamic_lex $P111, "$*W"
    unless_null $P111, vivify_1403
    get_hll_global $P109, "GLOBAL"
    get_who $P110, $P109
    set $P111, $P110["$W"]
    unless_null $P111, vivify_1404
    die "Contextual $*W not found"
  vivify_1404:
  vivify_1403:
    $P112 = $P111."cur_lexpad"()
    set $P2773, $P112
.annotate 'line', 1742
    set $P109, $P2773
    unless_null $P109, vivify_1405
    new $P109, "Undef"
  vivify_1405:
    $P110 = $P109."handlers"()
    if $P110, unless_2774_end
.annotate 'line', 1743
    set $P111, $P2773
    unless_null $P111, vivify_1406
    new $P111, "Undef"
  vivify_1406:
    new $P112, "ResizablePMCArray"
    $P111."handlers"($P112)
  unless_2774_end:
.annotate 'line', 1745
    set $P109, param_2772
    unless_null $P109, vivify_1407
    new $P109, "Undef"
  vivify_1407:
    $P110 = $P109."arity"()
    if $P110, unless_2775_end
.annotate 'line', 1746
    set $P111, param_2772
    unless_null $P111, vivify_1408
    new $P111, "Undef"
  vivify_1408:
.annotate 'line', 1747
    get_hll_global $P112, "GLOBAL"
    nqp_get_package_through_who $P113, $P112, "PAST"
    get_who $P114, $P113
    set $P115, $P114["Op"]
.annotate 'line', 1748
    get_hll_global $P116, "GLOBAL"
    nqp_get_package_through_who $P117, $P116, "PAST"
    get_who $P118, $P117
    set $P119, $P118["Var"]
    $P120 = $P119."new"("lexical" :named("scope"), "$!" :named("name"), 1 :named("isdecl"))
.annotate 'line', 1749
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "PAST"
    get_who $P123, $P122
    set $P124, $P123["Var"]
    $P125 = $P124."new"("lexical" :named("scope"), "$_" :named("name"))
    $P126 = $P115."new"($P120, $P125, "bind_6model" :named("pasttype"))
.annotate 'line', 1747
    $P111."unshift"($P126)
.annotate 'line', 1752
    set $P111, param_2772
    unless_null $P111, vivify_1409
    new $P111, "Undef"
  vivify_1409:
    get_hll_global $P112, "GLOBAL"
    nqp_get_package_through_who $P113, $P112, "PAST"
    get_who $P114, $P113
    set $P115, $P114["Var"]
    $P116 = $P115."new"("$_" :named("name"), "parameter" :named("scope"))
    $P111."unshift"($P116)
.annotate 'line', 1753
    set $P111, param_2772
    unless_null $P111, vivify_1410
    new $P111, "Undef"
  vivify_1410:
    $P111."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1754
    set $P111, param_2772
    unless_null $P111, vivify_1411
    new $P111, "Undef"
  vivify_1411:
    $P111."symbol"("$!", "lexical" :named("scope"))
.annotate 'line', 1755
    set $P111, param_2772
    unless_null $P111, vivify_1412
    new $P111, "Undef"
  vivify_1412:
    $P111."arity"(1)
  unless_2775_end:
.annotate 'line', 1757
    set $P109, param_2772
    unless_null $P109, vivify_1413
    new $P109, "Undef"
  vivify_1413:
    $P109."blocktype"("declaration")
.annotate 'line', 1758
    set $P109, $P2773
    unless_null $P109, vivify_1414
    new $P109, "Undef"
  vivify_1414:
    $P110 = $P109."handlers"()
.annotate 'line', 1759
    get_hll_global $P111, "GLOBAL"
    nqp_get_package_through_who $P112, $P111, "PAST"
    get_who $P113, $P112
    set $P114, $P113["Control"]
    set $P115, param_2771
    unless_null $P115, vivify_1415
    new $P115, "Undef"
  vivify_1415:
.annotate 'line', 1761
    get_hll_global $P116, "GLOBAL"
    nqp_get_package_through_who $P117, $P116, "PAST"
    get_who $P118, $P117
    set $P119, $P118["Stmts"]
.annotate 'line', 1762
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P122, $P121
    set $P123, $P122["Op"]
    set $P124, param_2772
    unless_null $P124, vivify_1416
    new $P124, "Undef"
  vivify_1416:
.annotate 'line', 1764
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P128, $P127["Var"]
    $P129 = $P128."new"("register" :named("scope"), "exception" :named("name"))
    $P130 = $P123."new"($P124, $P129, "call" :named("pasttype"))
.annotate 'line', 1766
    get_hll_global $P131, "GLOBAL"
    nqp_get_package_through_who $P132, $P131, "PAST"
    get_who $P133, $P132
    set $P134, $P133["Op"]
.annotate 'line', 1767
    get_hll_global $P135, "GLOBAL"
    nqp_get_package_through_who $P136, $P135, "PAST"
    get_who $P137, $P136
    set $P138, $P137["Var"]
.annotate 'line', 1768
    get_hll_global $P139, "GLOBAL"
    nqp_get_package_through_who $P140, $P139, "PAST"
    get_who $P141, $P140
    set $P142, $P141["Var"]
    $P143 = $P142."new"("register" :named("scope"), "exception" :named("name"))
    $P144 = $P138."new"($P143, "handled", "keyed" :named("scope"))
.annotate 'line', 1767
    $P145 = $P134."new"($P144, 1, "bind_6model" :named("pasttype"))
.annotate 'line', 1766
    $P146 = $P119."new"($P130, $P145)
.annotate 'line', 1761
    $P147 = $P114."new"($P146, $P115 :named("node"))
.annotate 'line', 1759
    $P148 = $P110."unshift"($P147)
.annotate 'line', 1740
    .return ($P148)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "only_star_block"  :subid("791_1337966799.879") :outer("781_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2306
    new $P109, "Undef"
    set $P2779, $P109
    .lex "$past", $P2779
    find_dynamic_lex $P112, "$*W"
    unless_null $P112, vivify_1417
    get_hll_global $P110, "GLOBAL"
    get_who $P111, $P110
    set $P112, $P111["$W"]
    unless_null $P112, vivify_1418
    die "Contextual $*W not found"
  vivify_1418:
  vivify_1417:
    $P113 = $P112."pop_lexpad"()
    set $P2779, $P113
.annotate 'line', 2307
    set $P110, $P2779
    unless_null $P110, vivify_1419
    new $P110, "Undef"
  vivify_1419:
    $P110."closure"(1)
.annotate 'line', 2308
    set $P110, $P2779
    unless_null $P110, vivify_1420
    new $P110, "Undef"
  vivify_1420:
    get_hll_global $P111, "GLOBAL"
    nqp_get_package_through_who $P112, $P111, "PAST"
    get_who $P113, $P112
    set $P114, $P113["Op"]
    $P115 = $P114."new"("multi_dispatch_over_lexical_candidates P" :named("pirop"))
    $P110."push"($P115)
.annotate 'line', 2305
    set $P110, $P2779
    unless_null $P110, vivify_1421
    new $P110, "Undef"
  vivify_1421:
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "attach_multi_signature"  :subid("792_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_2783
    .param pmc param_2784
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2314
    .const 'Sub' $P2789 = "793_1337966799.879" 
    capture_lex $P2789
    .lex "$code_obj", param_2783
    .lex "$routine", param_2784
.annotate 'line', 2315
    new $P111, "Undef"
    set $P2785, $P111
    .lex "$types", $P2785
.annotate 'line', 2316
    new $P112, "Undef"
    set $P2786, $P112
    .lex "$definednesses", $P2786
.annotate 'line', 2315
    new $P113, "ResizablePMCArray"
    set $P2785, $P113
.annotate 'line', 2316
    new $P113, "ResizablePMCArray"
    set $P2786, $P113
.annotate 'line', 2317
    set $P2787, param_2784
    unless_null $P2787, vivify_1422
    $P2787 = root_new ['parrot';'ResizablePMCArray']
  vivify_1422:
    set $P114, $P2787[0]
    unless_null $P114, vivify_1423
    new $P114, "Undef"
  vivify_1423:
    $P115 = $P114."list"()
    defined $I100, $P115
    unless $I100, for_undef_1424
    iter $P113, $P115
    new $P118, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P118, loop2798_handler
    push_eh $P118
  loop2798_test:
    unless $P113, loop2798_done
    shift $P116, $P113
  loop2798_redo:
    .const 'Sub' $P2789 = "793_1337966799.879" 
    capture_lex $P2789
    $P2789($P116)
  loop2798_next:
    goto loop2798_test
  loop2798_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P119, exception, 'type'
    eq $P119, .CONTROL_LOOP_NEXT, loop2798_next
    eq $P119, .CONTROL_LOOP_REDO, loop2798_redo
  loop2798_done:
    pop_eh 
  for_undef_1424:
.annotate 'line', 2324
    find_dynamic_lex $P115, "$*W"
    unless_null $P115, vivify_1436
    get_hll_global $P113, "GLOBAL"
    get_who $P114, $P113
    set $P115, $P114["$W"]
    unless_null $P115, vivify_1437
    die "Contextual $*W not found"
  vivify_1437:
  vivify_1436:
    set $P116, param_2783
    unless_null $P116, vivify_1438
    new $P116, "Undef"
  vivify_1438:
    set $P117, $P2785
    unless_null $P117, vivify_1439
    new $P117, "Undef"
  vivify_1439:
    set $P118, $P2786
    unless_null $P118, vivify_1440
    new $P118, "Undef"
  vivify_1440:
    $P119 = $P115."set_routine_signature"($P116, $P117, $P118)
.annotate 'line', 2314
    .return ($P119)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2788"  :anon :subid("793_1337966799.879") :outer("792_1337966799.879")
    .param pmc param_2790
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2317
    .lex "$_", param_2790
.annotate 'line', 2318
    get_hll_global $P119, "GLOBAL"
    nqp_get_package_through_who $P120, $P119, "PAST"
    get_who $P121, $P120
    set $P122, $P121["Var"]
    find_lex $P123, "$_"
    unless_null $P123, vivify_1425
    new $P123, "Undef"
  vivify_1425:
    $P124 = $P122."ACCEPTS"($P123)
    if $P124, if_2792
    set $P118, $P124
    goto if_2792_end
  if_2792:
    find_lex $P125, "$_"
    unless_null $P125, vivify_1426
    new $P125, "Undef"
  vivify_1426:
    $S100 = $P125."scope"()
    iseq $I101, $S100, "parameter"
    new $P118, 'Integer'
    set $P118, $I101
  if_2792_end:
    if $P118, if_2791
    set $P117, $P118
    goto if_2791_end
  if_2791:
.annotate 'line', 2319
    find_lex $P126, "$types"
    unless_null $P126, vivify_1427
    new $P126, "Undef"
  vivify_1427:
    find_lex $P128, "$_"
    unless_null $P128, vivify_1428
    new $P128, "Undef"
  vivify_1428:
    $P129 = $P128."multitype"()
    if $P129, if_2793
    null $P133
    set $P127, $P133
    goto if_2793_end
  if_2793:
    find_lex $P130, "$_"
    unless_null $P130, vivify_1429
    new $P130, "Undef"
  vivify_1429:
    $P131 = $P130."multitype"()
    set $P132, $P131["compile_time_value"]
    unless_null $P132, vivify_1430
    new $P132, "Undef"
  vivify_1430:
    set $P127, $P132
  if_2793_end:
    $P126."push"($P127)
.annotate 'line', 2320
    find_lex $P126, "$definednesses"
    unless_null $P126, vivify_1431
    new $P126, "Undef"
  vivify_1431:
    find_lex $P2795, "$_"
    unless_null $P2795, vivify_1432
    $P2795 = root_new ['parrot';'Hash']
  vivify_1432:
    set $P128, $P2795["definedness"]
    unless_null $P128, vivify_1433
    new $P128, "Undef"
  vivify_1433:
    set $S101, $P128
    iseq $I102, $S101, "D"
    if $I102, if_2794
.annotate 'line', 2321
    find_lex $P2797, "$_"
    unless_null $P2797, vivify_1434
    $P2797 = root_new ['parrot';'Hash']
  vivify_1434:
    set $P131, $P2797["definedness"]
    unless_null $P131, vivify_1435
    new $P131, "Undef"
  vivify_1435:
    set $S102, $P131
    iseq $I103, $S102, "U"
    if $I103, if_2796
    new $P133, "Float"
    assign $P133, 0
    set $P130, $P133
    goto if_2796_end
  if_2796:
    new $P132, "Float"
    assign $P132, 2
    set $P130, $P132
  if_2796_end:
    set $P127, $P130
.annotate 'line', 2320
    goto if_2794_end
  if_2794:
    new $P129, "Float"
    assign $P129, 1
    set $P127, $P129
  if_2794_end:
    $P134 = $P126."push"($P127)
.annotate 'line', 2318
    set $P117, $P134
  if_2791_end:
.annotate 'line', 2317
    .return ($P117)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "attach_multi_signature_to_parrot_sub"  :subid("794_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_2802
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2327
    .const 'Sub' $P2807 = "795_1337966799.879" 
    capture_lex $P2807
    .lex "$routine", param_2802
.annotate 'line', 2331
    new $P113, "Undef"
    set $P2803, $P113
    .lex "$types", $P2803
.annotate 'line', 2332
    new $P114, "Undef"
    set $P2804, $P114
    .lex "$definednesses", $P2804
.annotate 'line', 2331
    new $P115, "ResizablePMCArray"
    set $P2803, $P115
.annotate 'line', 2332
    new $P115, "ResizablePMCArray"
    set $P2804, $P115
.annotate 'line', 2333
    set $P2805, param_2802
    unless_null $P2805, vivify_1441
    $P2805 = root_new ['parrot';'ResizablePMCArray']
  vivify_1441:
    set $P116, $P2805[0]
    unless_null $P116, vivify_1442
    new $P116, "Undef"
  vivify_1442:
    $P117 = $P116."list"()
    defined $I100, $P117
    unless $I100, for_undef_1443
    iter $P115, $P117
    new $P121, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P121, loop2816_handler
    push_eh $P121
  loop2816_test:
    unless $P115, loop2816_done
    shift $P118, $P115
  loop2816_redo:
    .const 'Sub' $P2807 = "795_1337966799.879" 
    capture_lex $P2807
    $P2807($P118)
  loop2816_next:
    goto loop2816_test
  loop2816_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P122, exception, 'type'
    eq $P122, .CONTROL_LOOP_NEXT, loop2816_next
    eq $P122, .CONTROL_LOOP_REDO, loop2816_redo
  loop2816_done:
    pop_eh 
  for_undef_1443:
.annotate 'line', 2340
    find_dynamic_lex $P117, "$*W"
    unless_null $P117, vivify_1455
    get_hll_global $P115, "GLOBAL"
    get_who $P116, $P115
    set $P117, $P116["$W"]
    unless_null $P117, vivify_1456
    die "Contextual $*W not found"
  vivify_1456:
  vivify_1455:
    set $P118, param_2802
    unless_null $P118, vivify_1457
    new $P118, "Undef"
  vivify_1457:
    set $P120, $P2803
    unless_null $P120, vivify_1458
    new $P120, "Undef"
  vivify_1458:
    set $P121, $P2804
    unless_null $P121, vivify_1459
    new $P121, "Undef"
  vivify_1459:
    $P122 = $P117."set_routine_signature_on_parrot_sub"($P118, $P120, $P121)
.annotate 'line', 2327
    .return ($P122)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2806"  :anon :subid("795_1337966799.879") :outer("794_1337966799.879")
    .param pmc param_2808
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2333
    .lex "$_", param_2808
.annotate 'line', 2334
    get_hll_global $P122, "GLOBAL"
    nqp_get_package_through_who $P123, $P122, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Var"]
    find_lex $P126, "$_"
    unless_null $P126, vivify_1444
    new $P126, "Undef"
  vivify_1444:
    $P127 = $P125."ACCEPTS"($P126)
    if $P127, if_2810
    set $P121, $P127
    goto if_2810_end
  if_2810:
    find_lex $P128, "$_"
    unless_null $P128, vivify_1445
    new $P128, "Undef"
  vivify_1445:
    $S100 = $P128."scope"()
    iseq $I101, $S100, "parameter"
    new $P121, 'Integer'
    set $P121, $I101
  if_2810_end:
    if $P121, if_2809
    set $P120, $P121
    goto if_2809_end
  if_2809:
.annotate 'line', 2335
    find_lex $P129, "$types"
    unless_null $P129, vivify_1446
    new $P129, "Undef"
  vivify_1446:
    find_lex $P131, "$_"
    unless_null $P131, vivify_1447
    new $P131, "Undef"
  vivify_1447:
    $P132 = $P131."multitype"()
    if $P132, if_2811
    null $P136
    set $P130, $P136
    goto if_2811_end
  if_2811:
    find_lex $P133, "$_"
    unless_null $P133, vivify_1448
    new $P133, "Undef"
  vivify_1448:
    $P134 = $P133."multitype"()
    set $P135, $P134["compile_time_value"]
    unless_null $P135, vivify_1449
    new $P135, "Undef"
  vivify_1449:
    set $P130, $P135
  if_2811_end:
    $P129."push"($P130)
.annotate 'line', 2336
    find_lex $P129, "$definednesses"
    unless_null $P129, vivify_1450
    new $P129, "Undef"
  vivify_1450:
    find_lex $P2813, "$_"
    unless_null $P2813, vivify_1451
    $P2813 = root_new ['parrot';'Hash']
  vivify_1451:
    set $P131, $P2813["definedness"]
    unless_null $P131, vivify_1452
    new $P131, "Undef"
  vivify_1452:
    set $S101, $P131
    iseq $I102, $S101, "D"
    if $I102, if_2812
.annotate 'line', 2337
    find_lex $P2815, "$_"
    unless_null $P2815, vivify_1453
    $P2815 = root_new ['parrot';'Hash']
  vivify_1453:
    set $P134, $P2815["definedness"]
    unless_null $P134, vivify_1454
    new $P134, "Undef"
  vivify_1454:
    set $S102, $P134
    iseq $I103, $S102, "U"
    if $I103, if_2814
    new $P136, "Float"
    assign $P136, 0
    set $P133, $P136
    goto if_2814_end
  if_2814:
    new $P135, "Float"
    assign $P135, 2
    set $P133, $P135
  if_2814_end:
    set $P130, $P133
.annotate 'line', 2336
    goto if_2812_end
  if_2812:
    new $P132, "Float"
    assign $P132, 1
    set $P130, $P132
  if_2812_end:
    $P137 = $P129."push"($P130)
.annotate 'line', 2334
    set $P120, $P137
  if_2809_end:
.annotate 'line', 2333
    .return ($P120)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "control"  :subid("796_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_2820
    .param pmc param_2821
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2786
    .lex "$/", param_2820
    .lex "$type", param_2821
.annotate 'line', 2787
    set $P115, param_2820
    get_hll_global $P116, "GLOBAL"
    nqp_get_package_through_who $P117, $P116, "PAST"
    get_who $P118, $P117
    set $P120, $P118["Op"]
    set $P121, param_2820
    unless_null $P121, vivify_1460
    new $P121, "Undef"
  vivify_1460:
.annotate 'line', 2791
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Val"]
    set $P127, param_2821
    unless_null $P127, vivify_1461
    new $P127, "Undef"
  vivify_1461:
    $P128 = $P126."new"($P127 :named("value"), "!macro_const" :named("returns"))
    $P129 = $P120."new"(0, $P128, $P121 :named("node"), "die__vii" :named("pirop"))
.annotate 'line', 2787
    $P130 = $P115."!make"($P129)
.annotate 'line', 2786
    .return ($P130)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "lexical_package_lookup"  :subid("797_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_2827
    .param pmc param_2828
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2805
    .const 'Sub' $P2837 = "798_1337966799.879" 
    capture_lex $P2837
    new $P2826, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P2826, control_2825
    push_eh $P2826
    .lex "@name", param_2827
    .lex "$/", param_2828
.annotate 'line', 2811
    new $P115, "Undef"
    set $P2829, $P115
    .lex "$final_name", $P2829
.annotate 'line', 2812
    new $P116, "Undef"
    set $P2830, $P116
    .lex "$lookup", $P2830
.annotate 'line', 2807
    set $P2832, param_2827
    unless_null $P2832, vivify_1462
    $P2832 = root_new ['parrot';'ResizablePMCArray']
  vivify_1462:
    set $N100, $P2832
    set $N101, 0
    iseq $I100, $N100, $N101
    unless $I100, if_2831_end
    set $P117, param_2828
    unless_null $P117, vivify_1463
    new $P117, "Undef"
  vivify_1463:
    $P118 = $P117."CURSOR"()
    $P118."panic"("Cannot compile empty name")
  if_2831_end:
.annotate 'line', 2811
    set $P2833, param_2827
    unless_null $P2833, vivify_1464
    $P2833 = root_new ['parrot';'ResizablePMCArray']
  vivify_1464:
    $P117 = $P2833."pop"()
    set $P2829, $P117
.annotate 'line', 2812
    get_hll_global $P117, "GLOBAL"
    nqp_get_package_through_who $P118, $P117, "PAST"
    get_who $P120, $P118
    set $P121, $P120["Var"]
    set $P123, $P2829
    unless_null $P123, vivify_1465
    new $P123, "Undef"
  vivify_1465:
    set $S100, $P123
    $P124 = $P121."new"($S100, "keyed" :named("scope"))
    set $P2830, $P124
.annotate 'line', 2816
    set $P2835, param_2827
    unless_null $P2835, vivify_1466
    $P2835 = root_new ['parrot';'ResizablePMCArray']
  vivify_1466:
    set $N100, $P2835
    set $N101, 0
    iseq $I100, $N100, $N101
    if $I100, if_2834
.annotate 'line', 2834
    .const 'Sub' $P2837 = "798_1337966799.879" 
    capture_lex $P2837
    $P2837()
    goto if_2834_end
  if_2834:
.annotate 'line', 2817
    set $P117, $P2830
    unless_null $P117, vivify_1481
    new $P117, "Undef"
  vivify_1481:
    get_hll_global $P118, "GLOBAL"
    nqp_get_package_through_who $P120, $P118, "PAST"
    get_who $P121, $P120
    set $P123, $P121["Op"]
.annotate 'line', 2819
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Var"]
    $P128 = $P127."new"("$?PACKAGE" :named("name"), "lexical" :named("scope"))
    $P129 = $P123."new"($P128, "get_who PP" :named("pirop"))
.annotate 'line', 2817
    $P117."unshift"($P129)
.annotate 'line', 2821
    set $P117, $P2830
    unless_null $P117, vivify_1482
    new $P117, "Undef"
  vivify_1482:
    get_hll_global $P118, "GLOBAL"
    nqp_get_package_through_who $P120, $P118, "PAST"
    get_who $P121, $P120
    set $P123, $P121["Var"]
.annotate 'line', 2823
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Op"]
.annotate 'line', 2825
    get_hll_global $P128, "GLOBAL"
    nqp_get_package_through_who $P129, $P128, "PAST"
    get_who $P131, $P129
    set $P132, $P131["Var"]
    new $P133, "ResizablePMCArray"
    $P134 = $P132."new"("GLOBAL" :named("name"), $P133 :named("namespace"), "package" :named("scope"))
    $P135 = $P127."new"($P134, "get_who PP" :named("pirop"))
.annotate 'line', 2827
    set $P136, $P2829
    unless_null $P136, vivify_1483
    new $P136, "Undef"
  vivify_1483:
    set $S100, $P136
    $P137 = $P123."new"($P135, $S100, "keyed" :named("scope"))
.annotate 'line', 2821
    $P117."viviself"($P137)
  if_2834_end:
.annotate 'line', 2849
    new $P117, "Exception"
    set $P117['type'], .CONTROL_RETURN
    set $P118, $P2830
    unless_null $P118, vivify_1484
    new $P118, "Undef"
  vivify_1484:
    setattribute $P117, 'payload', $P118
    throw $P117
.annotate 'line', 2805
    .return ()
  control_2825:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P117, exception, "payload"
    .return ($P117)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block2836"  :anon :subid("798_1337966799.879") :outer("797_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2834
    .const 'Sub' $P2847 = "799_1337966799.879" 
    capture_lex $P2847
.annotate 'line', 2835
    new $P117, "Undef"
    set $P2838, $P117
    .lex "$path", $P2838
    find_dynamic_lex $P123, "$*W"
    unless_null $P123, vivify_1467
    get_hll_global $P120, "GLOBAL"
    get_who $P121, $P120
    set $P123, $P121["$W"]
    unless_null $P123, vivify_1468
    die "Contextual $*W not found"
  vivify_1468:
  vivify_1467:
    find_lex $P2840, "@name"
    unless_null $P2840, vivify_1469
    $P2840 = root_new ['parrot';'ResizablePMCArray']
  vivify_1469:
    set $P124, $P2840[0]
    unless_null $P124, vivify_1470
    new $P124, "Undef"
  vivify_1470:
    $P125 = $P123."is_lexical"($P124)
    if $P125, if_2839
.annotate 'line', 2837
    get_hll_global $P133, "GLOBAL"
    nqp_get_package_through_who $P134, $P133, "PAST"
    get_who $P135, $P134
    set $P136, $P135["Var"]
    new $P137, "ResizablePMCArray"
    $P138 = $P136."new"("GLOBAL" :named("name"), $P137 :named("namespace"), "package" :named("scope"))
    set $P118, $P138
.annotate 'line', 2835
    goto if_2839_end
  if_2839:
.annotate 'line', 2836
    get_hll_global $P126, "GLOBAL"
    nqp_get_package_through_who $P127, $P126, "PAST"
    get_who $P128, $P127
    set $P129, $P128["Var"]
    find_lex $P2841, "@name"
    unless_null $P2841, vivify_1471
    $P2841 = root_new ['parrot';'ResizablePMCArray']
  vivify_1471:
    $P131 = $P2841."shift"()
    $P132 = $P129."new"($P131 :named("name"), "lexical" :named("scope"))
    set $P118, $P132
  if_2839_end:
.annotate 'line', 2835
    set $P2838, $P118
.annotate 'line', 2838
    find_lex $P2843, "@name"
    unless_null $P2843, vivify_1472
    $P2843 = root_new ['parrot';'ResizablePMCArray']
  vivify_1472:
    set $P118, $P2843[0]
    unless_null $P118, vivify_1473
    new $P118, "Undef"
  vivify_1473:
    set $S100, $P118
    iseq $I101, $S100, "GLOBAL"
    unless $I101, if_2842_end
.annotate 'line', 2839
    find_lex $P2844, "@name"
    unless_null $P2844, vivify_1474
    $P2844 = root_new ['parrot';'ResizablePMCArray']
  vivify_1474:
    $P2844."shift"()
  if_2842_end:
.annotate 'line', 2841
    find_lex $P2845, "@name"
    unless_null $P2845, vivify_1475
    $P2845 = root_new ['parrot';'ResizablePMCArray']
  vivify_1475:
    defined $I101, $P2845
    unless $I101, for_undef_1476
    iter $P118, $P2845
    new $P121, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P121, loop2849_handler
    push_eh $P121
  loop2849_test:
    unless $P118, loop2849_done
    shift $P120, $P118
  loop2849_redo:
    .const 'Sub' $P2847 = "799_1337966799.879" 
    capture_lex $P2847
    $P2847($P120)
  loop2849_next:
    goto loop2849_test
  loop2849_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P123, exception, 'type'
    eq $P123, .CONTROL_LOOP_NEXT, loop2849_next
    eq $P123, .CONTROL_LOOP_REDO, loop2849_redo
  loop2849_done:
    pop_eh 
  for_undef_1476:
.annotate 'line', 2846
    find_lex $P118, "$lookup"
    unless_null $P118, vivify_1479
    new $P118, "Undef"
  vivify_1479:
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Op"]
    set $P125, $P2838
    unless_null $P125, vivify_1480
    new $P125, "Undef"
  vivify_1480:
    $P126 = $P124."new"($P125, "get_who PP" :named("pirop"))
    $P127 = $P118."unshift"($P126)
.annotate 'line', 2834
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2846"  :anon :subid("799_1337966799.879") :outer("798_1337966799.879")
    .param pmc param_2848
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2841
    .lex "$_", param_2848
.annotate 'line', 2842
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P123, $P121, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Op"]
    find_lex $P126, "$path"
    unless_null $P126, vivify_1477
    new $P126, "Undef"
  vivify_1477:
.annotate 'line', 2844
    find_lex $P127, "$_"
    unless_null $P127, vivify_1478
    new $P127, "Undef"
  vivify_1478:
    set $S100, $P127
    $P128 = $P125."new"($P126, $S100, "nqp_get_package_through_who PPs" :named("pirop"))
.annotate 'line', 2842
    store_lex "$path", $P128
.annotate 'line', 2841
    .return ($P128)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "TOP" :anon :subid("248_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_2854
    .param pmc param_2855
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1445
    .lex "self", param_2854
    .lex "$/", param_2855
    set $P118, param_2855
    set $P2856, param_2855
    unless_null $P2856, vivify_1485
    $P2856 = root_new ['parrot';'Hash']
  vivify_1485:
    set $P120, $P2856["comp_unit"]
    unless_null $P120, vivify_1486
    new $P120, "Undef"
  vivify_1486:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "deflongname" :anon :subid("249_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_2858
    .param pmc param_2859
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1447
    .lex "self", param_2858
    .lex "$/", param_2859
.annotate 'line', 1448
    set $P118, param_2859
.annotate 'line', 1449
    set $P2861, param_2859
    unless_null $P2861, vivify_1487
    $P2861 = root_new ['parrot';'Hash']
  vivify_1487:
    set $P121, $P2861["colonpair"]
    unless_null $P121, vivify_1488
    new $P121, "Undef"
  vivify_1488:
    if $P121, if_2860
.annotate 'line', 1451
    set $P135, param_2859
    unless_null $P135, vivify_1489
    new $P135, "Undef"
  vivify_1489:
    set $S103, $P135
    new $P120, 'String'
    set $P120, $S103
.annotate 'line', 1449
    goto if_2860_end
  if_2860:
    set $P2862, param_2859
    unless_null $P2862, vivify_1490
    $P2862 = root_new ['parrot';'Hash']
  vivify_1490:
    set $P123, $P2862["identifier"]
    unless_null $P123, vivify_1491
    new $P123, "Undef"
  vivify_1491:
    set $S100, $P123
    new $P124, 'String'
    set $P124, $S100
    concat $P125, $P124, ":"
    set $P2863, param_2859
    unless_null $P2863, vivify_1492
    $P2863 = root_new ['parrot';'Hash']
  vivify_1492:
    set $P2864, $P2863["colonpair"]
    unless_null $P2864, vivify_1493
    $P2864 = root_new ['parrot';'ResizablePMCArray']
  vivify_1493:
    set $P126, $P2864[0]
    unless_null $P126, vivify_1494
    new $P126, "Undef"
  vivify_1494:
    $P127 = $P126."ast"()
    $S101 = $P127."named"()
    concat $P128, $P125, $S101
    concat $P129, $P128, "<"
.annotate 'line', 1450
    set $P2865, param_2859
    unless_null $P2865, vivify_1495
    $P2865 = root_new ['parrot';'Hash']
  vivify_1495:
    set $P2866, $P2865["colonpair"]
    unless_null $P2866, vivify_1496
    $P2866 = root_new ['parrot';'ResizablePMCArray']
  vivify_1496:
    set $P131, $P2866[0]
    unless_null $P131, vivify_1497
    new $P131, "Undef"
  vivify_1497:
    $P132 = $P131."ast"()
    $S102 = "colonpair_str"($P132)
    concat $P133, $P129, $S102
    concat $P134, $P133, ">"
    set $P120, $P134
  if_2860_end:
.annotate 'line', 1449
    $P136 = $P118."!make"($P120)
.annotate 'line', 1447
    .return ($P136)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "comp_unit" :anon :subid("250_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_2868
    .param pmc param_2869
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1461
    .lex "self", param_2868
    .lex "$/", param_2869
.annotate 'line', 1462
    new $P118, "Undef"
    set $P2870, $P118
    .lex "$mainline", $P2870
.annotate 'line', 1463
    new $P120, "Undef"
    set $P2871, $P120
    .lex "$unit", $P2871
.annotate 'line', 1491
    new $P121, "Undef"
    set $P2872, $P121
    .lex "$main_tasks", $P2872
.annotate 'line', 1462
    set $P2873, param_2869
    unless_null $P2873, vivify_1498
    $P2873 = root_new ['parrot';'Hash']
  vivify_1498:
    set $P123, $P2873["statementlist"]
    unless_null $P123, vivify_1499
    new $P123, "Undef"
  vivify_1499:
    $P124 = $P123."ast"()
    set $P2870, $P124
.annotate 'line', 1463
    find_dynamic_lex $P125, "$*W"
    unless_null $P125, vivify_1500
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$W"]
    unless_null $P125, vivify_1501
    die "Contextual $*W not found"
  vivify_1501:
  vivify_1500:
    $P126 = $P125."pop_lexpad"()
    set $P2871, $P126
.annotate 'line', 1467
    set $P123, $P2871
    unless_null $P123, vivify_1502
    new $P123, "Undef"
  vivify_1502:
    $P124 = $P123."loadinit"()
    find_dynamic_lex $P127, "$*W"
    unless_null $P127, vivify_1503
    get_hll_global $P125, "GLOBAL"
    get_who $P126, $P125
    set $P127, $P126["$W"]
    unless_null $P127, vivify_1504
    die "Contextual $*W not found"
  vivify_1504:
  vivify_1503:
    $P128 = $P127."to_past"()
    $P124."push"($P128)
.annotate 'line', 1472
    set $P123, $P2871
    unless_null $P123, vivify_1505
    new $P123, "Undef"
  vivify_1505:
    $P124 = $P123."loadinit"()
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P128, $P127["Op"]
.annotate 'line', 1474
    get_hll_global $P129, "GLOBAL"
    nqp_get_package_through_who $P131, $P129, "PAST"
    get_who $P132, $P131
    set $P133, $P132["Var"]
    new $P134, "ResizablePMCArray"
    $P135 = $P133."new"("GLOBAL" :named("name"), $P134 :named("namespace"), "package" :named("scope"))
.annotate 'line', 1475
    find_dynamic_lex $P138, "$*W"
    unless_null $P138, vivify_1506
    get_hll_global $P136, "GLOBAL"
    get_who $P137, $P136
    set $P138, $P137["$W"]
    unless_null $P138, vivify_1507
    die "Contextual $*W not found"
  vivify_1507:
  vivify_1506:
    find_dynamic_lex $P141, "$*PACKAGE"
    unless_null $P141, vivify_1508
    get_hll_global $P139, "GLOBAL"
    get_who $P140, $P139
    set $P141, $P140["$PACKAGE"]
    unless_null $P141, vivify_1509
    die "Contextual $*PACKAGE not found"
  vivify_1509:
  vivify_1508:
    $P142 = $P138."get_slot_past_for_object"($P141)
    $P143 = $P128."new"($P135, $P142, "bind_6model" :named("pasttype"))
.annotate 'line', 1472
    $P124."push"($P143)
.annotate 'line', 1481
    find_dynamic_lex $P125, "$*HAS_YOU_ARE_HERE"
    unless_null $P125, vivify_1510
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$HAS_YOU_ARE_HERE"]
    unless_null $P125, vivify_1511
    die "Contextual $*HAS_YOU_ARE_HERE not found"
  vivify_1511:
  vivify_1510:
    if $P125, unless_2874_end
.annotate 'line', 1482
    set $P126, $P2871
    unless_null $P126, vivify_1512
    new $P126, "Undef"
  vivify_1512:
    set $P127, param_2868
    nqp_decontainerize $P128, $P127
    $P129 = $P128."CTXSAVE"()
    $P126."push"($P129)
  unless_2874_end:
.annotate 'line', 1489
    set $P123, $P2871
    unless_null $P123, vivify_1513
    new $P123, "Undef"
  vivify_1513:
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Var"]
    $P128 = $P127."new"("parameter" :named("scope"), "@ARGS" :named("name"), 1 :named("slurpy"), 1 :named("directaccess"))
    $P123."unshift"($P128)
.annotate 'line', 1491
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Stmts"]
.annotate 'line', 1492
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P128, $P127, "PAST"
    get_who $P129, $P128
    set $P131, $P129["Op"]
    $P132 = $P131."new"("ModuleLoader.pbc", "load_bytecode vs" :named("pirop"))
.annotate 'line', 1493
    get_hll_global $P133, "GLOBAL"
    nqp_get_package_through_who $P134, $P133, "PAST"
    get_who $P135, $P134
    set $P136, $P135["Op"]
.annotate 'line', 1495
    get_hll_global $P137, "GLOBAL"
    nqp_get_package_through_who $P138, $P137, "PAST"
    get_who $P139, $P138
    set $P140, $P139["Var"]
    new $P141, "ResizablePMCArray"
    $P142 = $P140."new"("ModuleLoader" :named("name"), $P141 :named("namespace"), "package" :named("scope"))
.annotate 'line', 1496
    get_hll_global $P143, "GLOBAL"
    nqp_get_package_through_who $P144, $P143, "PAST"
    get_who $P145, $P144
    set $P146, $P145["Var"]
    get_hll_global $P147, "GLOBAL"
    nqp_get_package_through_who $P149, $P147, "PAST"
    get_who $P150, $P149
    set $P151, $P150["Op"]
    $P152 = $P151."new"("getinterp P" :named("pirop"))
    $P153 = $P146."new"($P152, "context", "keyed" :named("scope"))
    $P154 = $P136."new"($P142, $P153, "callmethod" :named("pasttype"), "set_mainline_module" :named("name"))
.annotate 'line', 1493
    $P155 = $P126."new"($P132, $P154)
.annotate 'line', 1491
    set $P2872, $P155
.annotate 'line', 1499
    find_dynamic_lex $P125, "$*MAIN_SUB"
    unless_null $P125, vivify_1514
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$MAIN_SUB"]
    unless_null $P125, vivify_1515
    die "Contextual $*MAIN_SUB not found"
  vivify_1515:
  vivify_1514:
    unless $P125, if_2875_end
.annotate 'line', 1500
    set $P126, $P2872
    unless_null $P126, vivify_1516
    new $P126, "Undef"
  vivify_1516:
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P128, $P127, "PAST"
    get_who $P129, $P128
    set $P131, $P129["Op"]
.annotate 'line', 1501
    get_hll_global $P132, "GLOBAL"
    nqp_get_package_through_who $P133, $P132, "PAST"
    get_who $P134, $P133
    set $P135, $P134["Val"]
    find_dynamic_lex $P138, "$*MAIN_SUB"
    unless_null $P138, vivify_1517
    get_hll_global $P136, "GLOBAL"
    get_who $P137, $P136
    set $P138, $P137["$MAIN_SUB"]
    unless_null $P138, vivify_1518
    die "Contextual $*MAIN_SUB not found"
  vivify_1518:
  vivify_1517:
    $P139 = $P135."new"($P138 :named("value"))
.annotate 'line', 1502
    get_hll_global $P140, "GLOBAL"
    nqp_get_package_through_who $P141, $P140, "PAST"
    get_who $P142, $P141
    set $P143, $P142["Var"]
    $P144 = $P143."new"("lexical" :named("scope"), "@ARGS" :named("name"), 1 :named("flat"))
    $P145 = $P131."new"($P139, $P144, "call" :named("pasttype"))
.annotate 'line', 1500
    $P126."push"($P145)
  if_2875_end:
.annotate 'line', 1505
    set $P123, $P2870
    unless_null $P123, vivify_1519
    new $P123, "Undef"
  vivify_1519:
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Op"]
.annotate 'line', 1507
    get_hll_global $P128, "GLOBAL"
    nqp_get_package_through_who $P129, $P128, "PAST"
    get_who $P131, $P129
    set $P132, $P131["Var"]
    $P133 = $P132."new"("lexical" :named("scope"), "@ARGS" :named("name"))
    set $P134, $P2872
    unless_null $P134, vivify_1520
    new $P134, "Undef"
  vivify_1520:
    $P135 = $P127."new"($P133, $P134, "if" :named("pasttype"))
.annotate 'line', 1505
    $P123."push"($P135)
.annotate 'line', 1514
    set $P123, $P2871
    unless_null $P123, vivify_1521
    new $P123, "Undef"
  vivify_1521:
.annotate 'line', 1515
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Op"]
    set $P128, $P2870
    unless_null $P128, vivify_1522
    new $P128, "Undef"
  vivify_1522:
    $P129 = $P127."new"($P128, "return" :named("pirop"))
    $P123."push"($P129)
.annotate 'line', 1520
    set $P123, $P2871
    unless_null $P123, vivify_1523
    new $P123, "Undef"
  vivify_1523:
.annotate 'line', 1521
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Block"]
.annotate 'line', 1523
    get_hll_global $P128, "GLOBAL"
    nqp_get_package_through_who $P129, $P128, "PAST"
    get_who $P131, $P129
    set $P132, $P131["Op"]
    get_hll_global $P133, "GLOBAL"
    nqp_get_package_through_who $P134, $P133, "PAST"
    get_who $P135, $P134
    set $P136, $P135["Val"]
    set $P137, $P2871
    unless_null $P137, vivify_1524
    new $P137, "Undef"
  vivify_1524:
    $P138 = $P136."new"($P137 :named("value"))
    $P139 = $P132."new"($P138, "call" :named("pasttype"))
    $P140 = $P127."new"($P139, ":load" :named("pirflags"), 0 :named("lexical"), "" :named("namespace"))
.annotate 'line', 1521
    $P123."push"($P140)
.annotate 'line', 1526
    set $P123, $P2871
    unless_null $P123, vivify_1525
    new $P123, "Undef"
  vivify_1525:
    set $P124, param_2869
    unless_null $P124, vivify_1526
    new $P124, "Undef"
  vivify_1526:
    $P123."node"($P124)
.annotate 'line', 1529
    find_dynamic_lex $P125, "$*W"
    unless_null $P125, vivify_1527
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$W"]
    unless_null $P125, vivify_1528
    die "Contextual $*W not found"
  vivify_1528:
  vivify_1527:
    set $P126, $P2871
    unless_null $P126, vivify_1529
    new $P126, "Undef"
  vivify_1529:
    $P125."set_nqp_language_defaults"($P126)
.annotate 'line', 1531
    set $P123, param_2869
    set $P124, $P2871
    unless_null $P124, vivify_1530
    new $P124, "Undef"
  vivify_1530:
    $P125 = $P123."!make"($P124)
.annotate 'line', 1461
    .return ($P125)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "statementlist" :anon :subid("251_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_2877
    .param pmc param_2878
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1534
    .const 'Sub' $P2884 = "800_1337966799.879" 
    capture_lex $P2884
    .lex "self", param_2877
    .lex "$/", param_2878
.annotate 'line', 1535
    new $P118, "Undef"
    set $P2879, $P118
    .lex "$past", $P2879
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Stmts"]
    set $P125, param_2878
    unless_null $P125, vivify_1531
    new $P125, "Undef"
  vivify_1531:
    $P126 = $P124."new"($P125 :named("node"))
    set $P2879, $P126
.annotate 'line', 1536
    set $P2881, param_2878
    unless_null $P2881, vivify_1532
    $P2881 = root_new ['parrot';'Hash']
  vivify_1532:
    set $P120, $P2881["statement"]
    unless_null $P120, vivify_1533
    new $P120, "Undef"
  vivify_1533:
    unless $P120, if_2880_end
.annotate 'line', 1537
    set $P2882, param_2878
    unless_null $P2882, vivify_1534
    $P2882 = root_new ['parrot';'Hash']
  vivify_1534:
    set $P123, $P2882["statement"]
    unless_null $P123, vivify_1535
    new $P123, "Undef"
  vivify_1535:
    defined $I100, $P123
    unless $I100, for_undef_1536
    iter $P121, $P123
    new $P126, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P126, loop2893_handler
    push_eh $P126
  loop2893_test:
    unless $P121, loop2893_done
    shift $P124, $P121
  loop2893_redo:
    .const 'Sub' $P2884 = "800_1337966799.879" 
    capture_lex $P2884
    $P2884($P124)
  loop2893_next:
    goto loop2893_test
  loop2893_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P127, exception, 'type'
    eq $P127, .CONTROL_LOOP_NEXT, loop2893_next
    eq $P127, .CONTROL_LOOP_REDO, loop2893_redo
  loop2893_done:
    pop_eh 
  for_undef_1536:
  if_2880_end:
.annotate 'line', 1545
    set $P120, param_2878
    set $P121, $P2879
    unless_null $P121, vivify_1549
    new $P121, "Undef"
  vivify_1549:
    $P123 = $P120."!make"($P121)
.annotate 'line', 1534
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2883"  :anon :subid("800_1337966799.879") :outer("251_1337966799.879")
    .param pmc param_2886
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1538
    new $P125, "Undef"
    set $P2885, $P125
    .lex "$ast", $P2885
    .lex "$_", param_2886
    find_lex $P126, "$_"
    unless_null $P126, vivify_1537
    new $P126, "Undef"
  vivify_1537:
    $P127 = $P126."ast"()
    set $P2885, $P127
.annotate 'line', 1539
    set $P2888, $P2885
    unless_null $P2888, vivify_1538
    $P2888 = root_new ['parrot';'Hash']
  vivify_1538:
    set $P126, $P2888["sink"]
    unless_null $P126, vivify_1539
    new $P126, "Undef"
  vivify_1539:
    defined $I101, $P126
    unless $I101, if_2887_end
    set $P2889, $P2885
    unless_null $P2889, vivify_1540
    $P2889 = root_new ['parrot';'Hash']
  vivify_1540:
    set $P127, $P2889["sink"]
    unless_null $P127, vivify_1541
    new $P127, "Undef"
  vivify_1541:
    set $P2885, $P127
  if_2887_end:
.annotate 'line', 1540
    set $P2891, $P2885
    unless_null $P2891, vivify_1542
    $P2891 = root_new ['parrot';'Hash']
  vivify_1542:
    set $P126, $P2891["bareblock"]
    unless_null $P126, vivify_1543
    new $P126, "Undef"
  vivify_1543:
    unless $P126, if_2890_end
    set $P127, $P2885
    unless_null $P127, vivify_1544
    new $P127, "Undef"
  vivify_1544:
    $P128 = "block_immediate"($P127)
    set $P2885, $P128
  if_2890_end:
.annotate 'line', 1541
    get_hll_global $P126, "GLOBAL"
    nqp_get_package_through_who $P127, $P126, "PAST"
    get_who $P128, $P127
    set $P129, $P128["Node"]
    set $P131, $P2885
    unless_null $P131, vivify_1545
    new $P131, "Undef"
  vivify_1545:
    $P132 = $P129."ACCEPTS"($P131)
    unless $P132, if_2892_end
    get_hll_global $P133, "GLOBAL"
    nqp_get_package_through_who $P134, $P133, "PAST"
    get_who $P135, $P134
    set $P136, $P135["Stmt"]
    set $P137, $P2885
    unless_null $P137, vivify_1546
    new $P137, "Undef"
  vivify_1546:
    $P138 = $P136."new"($P137)
    set $P2885, $P138
  if_2892_end:
.annotate 'line', 1542
    find_lex $P126, "$past"
    unless_null $P126, vivify_1547
    new $P126, "Undef"
  vivify_1547:
    set $P127, $P2885
    unless_null $P127, vivify_1548
    new $P127, "Undef"
  vivify_1548:
    $P128 = $P126."push"($P127)
.annotate 'line', 1537
    .return ($P128)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement" :anon :subid("252_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_2895
    .param pmc param_2896
    .param pmc param_2897 :optional
    .param int has_param_2897 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1548
    .const 'Sub' $P2902 = "801_1337966799.879" 
    capture_lex $P2902
    .lex "self", param_2895
    .lex "$/", param_2896
    if has_param_2897, optparam_1550
    new $P118, "Undef"
    set param_2897, $P118
  optparam_1550:
    .lex "$key", param_2897
.annotate 'line', 1549
    new $P120, "Undef"
    set $P2898, $P120
    .lex "$past", $P2898
.annotate 'line', 1548
    set $P121, $P2898
    unless_null $P121, vivify_1551
    new $P121, "Undef"
  vivify_1551:
.annotate 'line', 1550
    set $P2900, param_2896
    unless_null $P2900, vivify_1552
    $P2900 = root_new ['parrot';'Hash']
  vivify_1552:
    set $P121, $P2900["EXPR"]
    unless_null $P121, vivify_1553
    new $P121, "Undef"
  vivify_1553:
    if $P121, if_2899
.annotate 'line', 1571
    set $P2921, param_2896
    unless_null $P2921, vivify_1554
    $P2921 = root_new ['parrot';'Hash']
  vivify_1554:
    set $P126, $P2921["statement_control"]
    unless_null $P126, vivify_1555
    new $P126, "Undef"
  vivify_1555:
    if $P126, if_2920
.annotate 'line', 1572
    new $P127, "Float"
    assign $P127, 0
    set $P2898, $P127
    goto if_2920_end
  if_2920:
.annotate 'line', 1571
    set $P2922, param_2896
    unless_null $P2922, vivify_1556
    $P2922 = root_new ['parrot';'Hash']
  vivify_1556:
    set $P127, $P2922["statement_control"]
    unless_null $P127, vivify_1557
    new $P127, "Undef"
  vivify_1557:
    $P128 = $P127."ast"()
    set $P2898, $P128
  if_2920_end:
    goto if_2899_end
  if_2899:
.annotate 'line', 1550
    .const 'Sub' $P2902 = "801_1337966799.879" 
    capture_lex $P2902
    $P2902()
  if_2899_end:
.annotate 'line', 1573
    set $P121, param_2896
    set $P123, $P2898
    unless_null $P123, vivify_1591
    new $P123, "Undef"
  vivify_1591:
    $P124 = $P121."!make"($P123)
.annotate 'line', 1548
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2901"  :anon :subid("801_1337966799.879") :outer("252_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1551
    new $P123, "Undef"
    set $P2903, $P123
    .lex "$mc", $P2903
.annotate 'line', 1552
    new $P124, "Undef"
    set $P2904, $P124
    .lex "$ml", $P2904
.annotate 'line', 1551
    find_lex $P2905, "$/"
    unless_null $P2905, vivify_1558
    $P2905 = root_new ['parrot';'Hash']
  vivify_1558:
    set $P2906, $P2905["statement_mod_cond"]
    unless_null $P2906, vivify_1559
    $P2906 = root_new ['parrot';'ResizablePMCArray']
  vivify_1559:
    set $P125, $P2906[0]
    unless_null $P125, vivify_1560
    new $P125, "Undef"
  vivify_1560:
    set $P2903, $P125
.annotate 'line', 1552
    find_lex $P2907, "$/"
    unless_null $P2907, vivify_1561
    $P2907 = root_new ['parrot';'Hash']
  vivify_1561:
    set $P2908, $P2907["statement_mod_loop"]
    unless_null $P2908, vivify_1562
    $P2908 = root_new ['parrot';'ResizablePMCArray']
  vivify_1562:
    set $P125, $P2908[0]
    unless_null $P125, vivify_1563
    new $P125, "Undef"
  vivify_1563:
    set $P2904, $P125
.annotate 'line', 1553
    find_lex $P2909, "$/"
    unless_null $P2909, vivify_1564
    $P2909 = root_new ['parrot';'Hash']
  vivify_1564:
    set $P125, $P2909["EXPR"]
    unless_null $P125, vivify_1565
    new $P125, "Undef"
  vivify_1565:
    $P126 = $P125."ast"()
    store_lex "$past", $P126
.annotate 'line', 1554
    set $P125, $P2903
    unless_null $P125, vivify_1566
    new $P125, "Undef"
  vivify_1566:
    unless $P125, if_2910_end
.annotate 'line', 1555
    get_hll_global $P126, "GLOBAL"
    nqp_get_package_through_who $P127, $P126, "PAST"
    get_who $P128, $P127
    set $P129, $P128["Op"]
    set $P2911, $P2903
    unless_null $P2911, vivify_1567
    $P2911 = root_new ['parrot';'Hash']
  vivify_1567:
    set $P131, $P2911["cond"]
    unless_null $P131, vivify_1568
    new $P131, "Undef"
  vivify_1568:
    $P132 = $P131."ast"()
    find_lex $P133, "$past"
    unless_null $P133, vivify_1569
    new $P133, "Undef"
  vivify_1569:
    set $P2912, $P2903
    unless_null $P2912, vivify_1570
    $P2912 = root_new ['parrot';'Hash']
  vivify_1570:
    set $P134, $P2912["sym"]
    unless_null $P134, vivify_1571
    new $P134, "Undef"
  vivify_1571:
    set $S100, $P134
    find_lex $P135, "$/"
    unless_null $P135, vivify_1572
    new $P135, "Undef"
  vivify_1572:
    $P136 = $P129."new"($P132, $P133, $S100 :named("pasttype"), $P135 :named("node"))
    store_lex "$past", $P136
  if_2910_end:
.annotate 'line', 1557
    set $P126, $P2904
    unless_null $P126, vivify_1573
    new $P126, "Undef"
  vivify_1573:
    if $P126, if_2913
    set $P125, $P126
    goto if_2913_end
  if_2913:
.annotate 'line', 1558
    set $P2915, $P2904
    unless_null $P2915, vivify_1574
    $P2915 = root_new ['parrot';'Hash']
  vivify_1574:
    set $P128, $P2915["sym"]
    unless_null $P128, vivify_1575
    new $P128, "Undef"
  vivify_1575:
    set $S100, $P128
    iseq $I100, $S100, "for"
    if $I100, if_2914
.annotate 'line', 1567
    get_hll_global $P129, "GLOBAL"
    nqp_get_package_through_who $P131, $P129, "PAST"
    get_who $P132, $P131
    set $P133, $P132["Op"]
    set $P2918, $P2904
    unless_null $P2918, vivify_1576
    $P2918 = root_new ['parrot';'Hash']
  vivify_1576:
    set $P134, $P2918["cond"]
    unless_null $P134, vivify_1577
    new $P134, "Undef"
  vivify_1577:
    $P135 = $P134."ast"()
    find_lex $P136, "$past"
    unless_null $P136, vivify_1578
    new $P136, "Undef"
  vivify_1578:
    set $P2919, $P2904
    unless_null $P2919, vivify_1579
    $P2919 = root_new ['parrot';'Hash']
  vivify_1579:
    set $P137, $P2919["sym"]
    unless_null $P137, vivify_1580
    new $P137, "Undef"
  vivify_1580:
    set $S101, $P137
    find_lex $P138, "$/"
    unless_null $P138, vivify_1581
    new $P138, "Undef"
  vivify_1581:
    $P140 = $P133."new"($P135, $P136, $S101 :named("pasttype"), $P138 :named("node"))
    store_lex "$past", $P140
.annotate 'line', 1566
    set $P127, $P140
.annotate 'line', 1558
    goto if_2914_end
  if_2914:
.annotate 'line', 1559
    get_hll_global $P129, "GLOBAL"
    nqp_get_package_through_who $P131, $P129, "PAST"
    get_who $P132, $P131
    set $P133, $P132["Block"]
.annotate 'line', 1560
    get_hll_global $P134, "GLOBAL"
    nqp_get_package_through_who $P135, $P134, "PAST"
    get_who $P136, $P135
    set $P137, $P136["Var"]
    $P138 = $P137."new"("$_" :named("name"), "parameter" :named("scope"), 1 :named("isdecl"))
    find_lex $P139, "$past"
    unless_null $P139, vivify_1582
    new $P139, "Undef"
  vivify_1582:
    $P140 = $P133."new"($P138, $P139, "immediate" :named("blocktype"))
.annotate 'line', 1559
    store_lex "$past", $P140
.annotate 'line', 1562
    find_lex $P129, "$past"
    unless_null $P129, vivify_1583
    new $P129, "Undef"
  vivify_1583:
    $P129."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1563
    find_lex $P129, "$past"
    unless_null $P129, vivify_1584
    new $P129, "Undef"
  vivify_1584:
    $P129."arity"(1)
.annotate 'line', 1564
    get_hll_global $P129, "GLOBAL"
    nqp_get_package_through_who $P131, $P129, "PAST"
    get_who $P132, $P131
    set $P133, $P132["Op"]
    set $P2916, $P2904
    unless_null $P2916, vivify_1585
    $P2916 = root_new ['parrot';'Hash']
  vivify_1585:
    set $P134, $P2916["cond"]
    unless_null $P134, vivify_1586
    new $P134, "Undef"
  vivify_1586:
    $P135 = $P134."ast"()
    find_lex $P136, "$past"
    unless_null $P136, vivify_1587
    new $P136, "Undef"
  vivify_1587:
    set $P2917, $P2904
    unless_null $P2917, vivify_1588
    $P2917 = root_new ['parrot';'Hash']
  vivify_1588:
    set $P137, $P2917["sym"]
    unless_null $P137, vivify_1589
    new $P137, "Undef"
  vivify_1589:
    set $S101, $P137
    find_lex $P138, "$/"
    unless_null $P138, vivify_1590
    new $P138, "Undef"
  vivify_1590:
    $P139 = $P133."new"($P135, $P136, $S101 :named("pasttype"), $P138 :named("node"))
    store_lex "$past", $P139
.annotate 'line', 1558
    set $P127, $P139
  if_2914_end:
.annotate 'line', 1557
    set $P125, $P127
  if_2913_end:
.annotate 'line', 1550
    .return ($P125)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "xblock" :anon :subid("253_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_2924
    .param pmc param_2925
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1576
    .lex "self", param_2924
    .lex "$/", param_2925
.annotate 'line', 1577
    set $P118, param_2925
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Op"]
    set $P2926, param_2925
    unless_null $P2926, vivify_1592
    $P2926 = root_new ['parrot';'Hash']
  vivify_1592:
    set $P125, $P2926["EXPR"]
    unless_null $P125, vivify_1593
    new $P125, "Undef"
  vivify_1593:
    $P126 = $P125."ast"()
    set $P2927, param_2925
    unless_null $P2927, vivify_1594
    $P2927 = root_new ['parrot';'Hash']
  vivify_1594:
    set $P127, $P2927["pblock"]
    unless_null $P127, vivify_1595
    new $P127, "Undef"
  vivify_1595:
    $P128 = $P127."ast"()
    set $P129, param_2925
    unless_null $P129, vivify_1596
    new $P129, "Undef"
  vivify_1596:
    $P131 = $P124."new"($P126, $P128, "if" :named("pasttype"), $P129 :named("node"))
    $P132 = $P118."!make"($P131)
.annotate 'line', 1576
    .return ($P132)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "pblock" :anon :subid("254_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_2929
    .param pmc param_2930
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1580
    .lex "self", param_2929
    .lex "$/", param_2930
.annotate 'line', 1581
    set $P118, param_2930
    set $P2931, param_2930
    unless_null $P2931, vivify_1597
    $P2931 = root_new ['parrot';'Hash']
  vivify_1597:
    set $P120, $P2931["blockoid"]
    unless_null $P120, vivify_1598
    new $P120, "Undef"
  vivify_1598:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
.annotate 'line', 1580
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "block" :anon :subid("255_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_2933
    .param pmc param_2934
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1584
    .lex "self", param_2933
    .lex "$/", param_2934
.annotate 'line', 1585
    set $P118, param_2934
    set $P2935, param_2934
    unless_null $P2935, vivify_1599
    $P2935 = root_new ['parrot';'Hash']
  vivify_1599:
    set $P120, $P2935["blockoid"]
    unless_null $P120, vivify_1600
    new $P120, "Undef"
  vivify_1600:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
.annotate 'line', 1584
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "blockoid" :anon :subid("256_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_2937
    .param pmc param_2938
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1588
    .const 'Sub' $P2943 = "802_1337966799.879" 
    capture_lex $P2943
    .lex "self", param_2937
    .lex "$/", param_2938
.annotate 'line', 1589
    new $P118, "Undef"
    set $P2939, $P118
    .lex "$BLOCK", $P2939
    find_dynamic_lex $P123, "$*W"
    unless_null $P123, vivify_1601
    get_hll_global $P120, "GLOBAL"
    get_who $P121, $P120
    set $P123, $P121["$W"]
    unless_null $P123, vivify_1602
    die "Contextual $*W not found"
  vivify_1602:
  vivify_1601:
    $P124 = $P123."pop_lexpad"()
    set $P2939, $P124
.annotate 'line', 1590
    set $P2941, param_2938
    unless_null $P2941, vivify_1603
    $P2941 = root_new ['parrot';'Hash']
  vivify_1603:
    set $P121, $P2941["statementlist"]
    unless_null $P121, vivify_1604
    new $P121, "Undef"
  vivify_1604:
    if $P121, if_2940
.annotate 'line', 1598
    find_dynamic_lex $P128, "$*HAS_YOU_ARE_HERE"
    unless_null $P128, vivify_1605
    get_hll_global $P125, "GLOBAL"
    get_who $P127, $P125
    set $P128, $P127["$HAS_YOU_ARE_HERE"]
    unless_null $P128, vivify_1606
    die "Contextual $*HAS_YOU_ARE_HERE not found"
  vivify_1606:
  vivify_1605:
    unless $P128, if_2946_end
.annotate 'line', 1599
    set $P129, param_2938
    unless_null $P129, vivify_1607
    new $P129, "Undef"
  vivify_1607:
    $P131 = $P129."CURSOR"()
    $P131."panic"("{YOU_ARE_HERE} may only appear once in a setting")
  if_2946_end:
.annotate 'line', 1601
    new $P125, "Float"
    assign $P125, 1
    store_dynamic_lex "$*HAS_YOU_ARE_HERE", $P125
.annotate 'line', 1602
    set $P125, param_2938
    set $P2947, param_2938
    unless_null $P2947, vivify_1608
    $P2947 = root_new ['parrot';'Hash']
  vivify_1608:
    set $P127, $P2947["you_are_here"]
    unless_null $P127, vivify_1609
    new $P127, "Undef"
  vivify_1609:
    $P128 = $P127."ast"()
    $P129 = $P125."!make"($P128)
.annotate 'line', 1597
    set $P120, $P129
.annotate 'line', 1590
    goto if_2940_end
  if_2940:
    .const 'Sub' $P2943 = "802_1337966799.879" 
    capture_lex $P2943
    $P124 = $P2943()
    set $P120, $P124
  if_2940_end:
.annotate 'line', 1588
    .return ($P120)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2942"  :anon :subid("802_1337966799.879") :outer("256_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1591
    new $P123, "Undef"
    set $P2944, $P123
    .lex "$past", $P2944
    find_lex $P2945, "$/"
    unless_null $P2945, vivify_1610
    $P2945 = root_new ['parrot';'Hash']
  vivify_1610:
    set $P124, $P2945["statementlist"]
    unless_null $P124, vivify_1611
    new $P124, "Undef"
  vivify_1611:
    $P125 = $P124."ast"()
    set $P2944, $P125
.annotate 'line', 1592
    find_lex $P124, "$BLOCK"
    unless_null $P124, vivify_1612
    new $P124, "Undef"
  vivify_1612:
    set $P125, $P2944
    unless_null $P125, vivify_1613
    new $P125, "Undef"
  vivify_1613:
    $P124."push"($P125)
.annotate 'line', 1593
    find_lex $P124, "$BLOCK"
    unless_null $P124, vivify_1614
    new $P124, "Undef"
  vivify_1614:
    find_lex $P125, "$/"
    unless_null $P125, vivify_1615
    new $P125, "Undef"
  vivify_1615:
    $P124."node"($P125)
.annotate 'line', 1594
    find_lex $P124, "$BLOCK"
    unless_null $P124, vivify_1616
    new $P124, "Undef"
  vivify_1616:
    $P124."closure"(1)
.annotate 'line', 1595
    find_dynamic_lex $P124, "$/"
    find_lex $P125, "$BLOCK"
    unless_null $P125, vivify_1617
    new $P125, "Undef"
  vivify_1617:
    $P126 = $P124."!make"($P125)
.annotate 'line', 1590
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "newpad" :anon :subid("257_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_2949
    .param pmc param_2950
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1606
    .lex "self", param_2949
    .lex "$/", param_2950
.annotate 'line', 1607
    find_dynamic_lex $P121, "$*W"
    unless_null $P121, vivify_1618
    get_hll_global $P118, "GLOBAL"
    get_who $P120, $P118
    set $P121, $P120["$W"]
    unless_null $P121, vivify_1619
    die "Contextual $*W not found"
  vivify_1619:
  vivify_1618:
    set $P123, param_2950
    unless_null $P123, vivify_1620
    new $P123, "Undef"
  vivify_1620:
    $P124 = $P121."push_lexpad"($P123)
.annotate 'line', 1606
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "outerctx" :anon :subid("258_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_2952
    .param pmc param_2953
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1610
    .const 'Sub' $P2957 = "803_1337966799.879" 
    capture_lex $P2957
    .lex "self", param_2952
    .lex "$/", param_2953
.annotate 'line', 1611
    find_dynamic_lex $P121, "%*COMPILING"
    unless_null $P121, vivify_1621
    get_hll_global $P118, "GLOBAL"
    get_who $P120, $P118
    set $P121, $P120["%COMPILING"]
    unless_null $P121, vivify_1622
    die "Contextual %*COMPILING not found"
  vivify_1622:
  vivify_1621:
    set $P2955, $P121["%?OPTIONS"]
    unless_null $P2955, vivify_1623
    $P2955 = root_new ['parrot';'Hash']
  vivify_1623:
    set $P123, $P2955["outer_ctx"]
    unless_null $P123, vivify_1624
    new $P123, "Undef"
  vivify_1624:
    defined $I100, $P123
    if $I100, unless_2954_end
    .const 'Sub' $P2957 = "803_1337966799.879" 
    capture_lex $P2957
    $P2957()
  unless_2954_end:
.annotate 'line', 1632
    set $P118, param_2952
    nqp_decontainerize $P120, $P118
    find_dynamic_lex $P124, "$*W"
    unless_null $P124, vivify_1660
    get_hll_global $P121, "GLOBAL"
    get_who $P123, $P121
    set $P124, $P123["$W"]
    unless_null $P124, vivify_1661
    die "Contextual $*W not found"
  vivify_1661:
  vivify_1660:
    $P125 = $P124."cur_lexpad"()
    $P126 = $P120."SET_BLOCK_OUTER_CTX"($P125)
.annotate 'line', 1610
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2956"  :anon :subid("803_1337966799.879") :outer("258_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1614
    new $P124, "Undef"
    set $P2958, $P124
    .lex "$SETTING", $P2958
    find_dynamic_lex $P127, "$*W"
    unless_null $P127, vivify_1625
    get_hll_global $P125, "GLOBAL"
    get_who $P126, $P125
    set $P127, $P126["$W"]
    unless_null $P127, vivify_1626
    die "Contextual $*W not found"
  vivify_1626:
  vivify_1625:
    find_dynamic_lex $P131, "%*COMPILING"
    unless_null $P131, vivify_1627
    get_hll_global $P128, "GLOBAL"
    get_who $P129, $P128
    set $P131, $P129["%COMPILING"]
    unless_null $P131, vivify_1628
    die "Contextual %*COMPILING not found"
  vivify_1628:
  vivify_1627:
    set $P2960, $P131["%?OPTIONS"]
    unless_null $P2960, vivify_1629
    $P2960 = root_new ['parrot';'Hash']
  vivify_1629:
    set $P132, $P2960["setting"]
    unless_null $P132, vivify_1630
    new $P132, "Undef"
  vivify_1630:
    set $P2959, $P132
    defined $I2962, $P2959
    if $I2962, default_2961
    new $P133, "String"
    assign $P133, "NQPCORE"
    set $P2959, $P133
  default_2961:
    $P134 = $P127."load_setting"($P2959)
    set $P2958, $P134
.annotate 'line', 1619
    find_dynamic_lex $P128, "%*COMPILING"
    unless_null $P128, vivify_1631
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["%COMPILING"]
    unless_null $P128, vivify_1632
    die "Contextual %*COMPILING not found"
  vivify_1632:
  vivify_1631:
    set $P2964, $P128["%?OPTIONS"]
    unless_null $P2964, vivify_1633
    $P2964 = root_new ['parrot';'Hash']
  vivify_1633:
    set $P129, $P2964["setting"]
    unless_null $P129, vivify_1634
    new $P129, "Undef"
  vivify_1634:
    set $S100, $P129
    iseq $I101, $S100, "NULL"
    unless $I101, unless_2963
    new $P125, 'Integer'
    set $P125, $I101
    goto unless_2963_end
  unless_2963:
.annotate 'line', 1620
    set $P131, $P2958
    unless_null $P131, vivify_1635
    new $P131, "Undef"
  vivify_1635:
    "import_HOW_exports"($P131)
.annotate 'line', 1621
    find_dynamic_lex $P133, "%*COMPILING"
    unless_null $P133, vivify_1636
    get_hll_global $P131, "GLOBAL"
    get_who $P132, $P131
    set $P133, $P132["%COMPILING"]
    unless_null $P133, vivify_1637
    die "Contextual %*COMPILING not found"
  vivify_1637:
  vivify_1636:
    set $P2966, $P133["%?OPTIONS"]
    unless_null $P2966, vivify_1638
    $P2966 = root_new ['parrot';'Hash']
  vivify_1638:
    set $P134, $P2966["old-regex-lib"]
    unless_null $P134, vivify_1639
    new $P134, "Undef"
  vivify_1639:
    unless $P134, if_2965_end
.annotate 'line', 1622
    find_dynamic_lex $P137, "$*W"
    unless_null $P137, vivify_1640
    get_hll_global $P135, "GLOBAL"
    get_who $P136, $P135
    set $P137, $P136["$W"]
    unless_null $P137, vivify_1641
    die "Contextual $*W not found"
  vivify_1641:
  vivify_1640:
    find_dynamic_lex $P140, "$*GLOBALish"
    unless_null $P140, vivify_1642
    get_hll_global $P138, "GLOBAL"
    get_who $P139, $P138
    set $P140, $P139["$GLOBALish"]
    unless_null $P140, vivify_1643
    die "Contextual $*GLOBALish not found"
  vivify_1643:
  vivify_1642:
    $P137."load_module"("NQPRegex", $P140)
  if_2965_end:
.annotate 'line', 1624
    find_dynamic_lex $P134, "%*COMPILING"
    unless_null $P134, vivify_1644
    get_hll_global $P132, "GLOBAL"
    get_who $P133, $P132
    set $P134, $P133["%COMPILING"]
    unless_null $P134, vivify_1645
    die "Contextual %*COMPILING not found"
  vivify_1645:
  vivify_1644:
    set $P2968, $P134["%?OPTIONS"]
    unless_null $P2968, vivify_1646
    $P2968 = root_new ['parrot';'Hash']
  vivify_1646:
    set $P135, $P2968["no-regex-lib"]
    unless_null $P135, vivify_1647
    new $P135, "Undef"
  vivify_1647:
    unless $P135, unless_2967
    set $P131, $P135
    goto unless_2967_end
  unless_2967:
.annotate 'line', 1625
    find_dynamic_lex $P138, "$*W"
    unless_null $P138, vivify_1648
    get_hll_global $P136, "GLOBAL"
    get_who $P137, $P136
    set $P138, $P137["$W"]
    unless_null $P138, vivify_1649
    die "Contextual $*W not found"
  vivify_1649:
  vivify_1648:
    find_dynamic_lex $P141, "$*GLOBALish"
    unless_null $P141, vivify_1650
    get_hll_global $P139, "GLOBAL"
    get_who $P140, $P139
    set $P141, $P140["$GLOBALish"]
    unless_null $P141, vivify_1651
    die "Contextual $*GLOBALish not found"
  vivify_1651:
  vivify_1650:
    $P138."load_module"("QRegex", $P141)
.annotate 'line', 1626
    find_dynamic_lex $P139, "%*COMPILING"
    unless_null $P139, vivify_1652
    get_hll_global $P137, "GLOBAL"
    get_who $P138, $P137
    set $P139, $P138["%COMPILING"]
    unless_null $P139, vivify_1653
    die "Contextual %*COMPILING not found"
  vivify_1653:
  vivify_1652:
    set $P2970, $P139["%?OPTIONS"]
    unless_null $P2970, vivify_1654
    $P2970 = root_new ['parrot';'Hash']
  vivify_1654:
    set $P140, $P2970["old-regex-lib"]
    unless_null $P140, vivify_1655
    new $P140, "Undef"
  vivify_1655:
    unless $P140, unless_2969
    set $P136, $P140
    goto unless_2969_end
  unless_2969:
.annotate 'line', 1627
    find_dynamic_lex $P143, "$*W"
    unless_null $P143, vivify_1656
    get_hll_global $P141, "GLOBAL"
    get_who $P142, $P141
    set $P143, $P142["$W"]
    unless_null $P143, vivify_1657
    die "Contextual $*W not found"
  vivify_1657:
  vivify_1656:
    find_dynamic_lex $P146, "$*GLOBALish"
    unless_null $P146, vivify_1658
    get_hll_global $P144, "GLOBAL"
    get_who $P145, $P144
    set $P146, $P145["$GLOBALish"]
    unless_null $P146, vivify_1659
    die "Contextual $*GLOBALish not found"
  vivify_1659:
  vivify_1658:
    $P147 = $P143."load_module"("NQPP6QRegex", $P146)
.annotate 'line', 1626
    set $P136, $P147
  unless_2969_end:
.annotate 'line', 1624
    set $P131, $P136
  unless_2967_end:
.annotate 'line', 1619
    set $P125, $P131
  unless_2963_end:
.annotate 'line', 1611
    .return ($P125)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "GLOBALish" :anon :subid("259_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_2972
    .param pmc param_2973
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1644
    .lex "self", param_2972
    .lex "$/", param_2973
.annotate 'line', 1648
    find_dynamic_lex $P121, "$*W"
    unless_null $P121, vivify_1662
    get_hll_global $P118, "GLOBAL"
    get_who $P120, $P118
    set $P121, $P120["$W"]
    unless_null $P121, vivify_1663
    die "Contextual $*W not found"
  vivify_1663:
  vivify_1662:
    find_dynamic_lex $P125, "%*HOW"
    unless_null $P125, vivify_1664
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["%HOW"]
    unless_null $P125, vivify_1665
    die "Contextual %*HOW not found"
  vivify_1665:
  vivify_1664:
    set $P126, $P125["knowhow"]
    unless_null $P126, vivify_1666
    new $P126, "Undef"
  vivify_1666:
    $P127 = $P121."pkg_create_mo"($P126, "GLOBALish" :named("name"))
    store_dynamic_lex "$*GLOBALish", $P127
.annotate 'line', 1649
    find_dynamic_lex $P121, "$*GLOBALish"
    unless_null $P121, vivify_1667
    get_hll_global $P118, "GLOBAL"
    get_who $P120, $P118
    set $P121, $P120["$GLOBALish"]
    unless_null $P121, vivify_1668
    die "Contextual $*GLOBALish not found"
  vivify_1668:
  vivify_1667:
    get_how $P123, $P121
    find_dynamic_lex $P126, "$*GLOBALish"
    unless_null $P126, vivify_1669
    get_hll_global $P124, "GLOBAL"
    get_who $P125, $P124
    set $P126, $P125["$GLOBALish"]
    unless_null $P126, vivify_1670
    die "Contextual $*GLOBALish not found"
  vivify_1670:
  vivify_1669:
    $P123."compose"($P126)
.annotate 'line', 1650
    find_dynamic_lex $P121, "$*W"
    unless_null $P121, vivify_1671
    get_hll_global $P118, "GLOBAL"
    get_who $P120, $P118
    set $P121, $P120["$W"]
    unless_null $P121, vivify_1672
    die "Contextual $*W not found"
  vivify_1672:
  vivify_1671:
    find_dynamic_lex $P125, "$*W"
    unless_null $P125, vivify_1673
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$W"]
    unless_null $P125, vivify_1674
    die "Contextual $*W not found"
  vivify_1674:
  vivify_1673:
    $P126 = $P125."cur_lexpad"()
    find_dynamic_lex $P129, "$*GLOBALish"
    unless_null $P129, vivify_1675
    get_hll_global $P127, "GLOBAL"
    get_who $P128, $P127
    set $P129, $P128["$GLOBALish"]
    unless_null $P129, vivify_1676
    die "Contextual $*GLOBALish not found"
  vivify_1676:
  vivify_1675:
    $P121."install_lexical_symbol"($P126, "GLOBALish", $P129)
.annotate 'line', 1653
    find_dynamic_lex $P121, "$*GLOBALish"
    unless_null $P121, vivify_1677
    get_hll_global $P118, "GLOBAL"
    get_who $P120, $P118
    set $P121, $P120["$GLOBALish"]
    unless_null $P121, vivify_1678
    die "Contextual $*GLOBALish not found"
  vivify_1678:
  vivify_1677:
    store_dynamic_lex "$*PACKAGE", $P121
.annotate 'line', 1654
    find_dynamic_lex $P121, "$*W"
    unless_null $P121, vivify_1679
    get_hll_global $P118, "GLOBAL"
    get_who $P120, $P118
    set $P121, $P120["$W"]
    unless_null $P121, vivify_1680
    die "Contextual $*W not found"
  vivify_1680:
  vivify_1679:
    find_dynamic_lex $P125, "$*W"
    unless_null $P125, vivify_1681
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$W"]
    unless_null $P125, vivify_1682
    die "Contextual $*W not found"
  vivify_1682:
  vivify_1681:
    $P126 = $P125."cur_lexpad"()
    find_dynamic_lex $P129, "$*PACKAGE"
    unless_null $P129, vivify_1683
    get_hll_global $P127, "GLOBAL"
    get_who $P128, $P127
    set $P129, $P128["$PACKAGE"]
    unless_null $P129, vivify_1684
    die "Contextual $*PACKAGE not found"
  vivify_1684:
  vivify_1683:
    $P131 = $P121."install_lexical_symbol"($P126, "$?PACKAGE", $P129)
.annotate 'line', 1644
    .return ($P131)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "you_are_here" :anon :subid("260_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_2975
    .param pmc param_2976
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1657
    .lex "self", param_2975
    .lex "$/", param_2976
.annotate 'line', 1658
    set $P118, param_2976
    set $P120, param_2975
    nqp_decontainerize $P121, $P120
    $P123 = $P121."CTXSAVE"()
    $P124 = $P118."!make"($P123)
.annotate 'line', 1657
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<use>" :anon :subid("261_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_2978
    .param pmc param_2979
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1663
    .lex "self", param_2978
    .lex "$/", param_2979
.annotate 'line', 1664
    new $P118, "Undef"
    set $P2980, $P118
    .lex "$module", $P2980
    find_dynamic_lex $P123, "$*W"
    unless_null $P123, vivify_1685
    get_hll_global $P120, "GLOBAL"
    get_who $P121, $P120
    set $P123, $P121["$W"]
    unless_null $P123, vivify_1686
    die "Contextual $*W not found"
  vivify_1686:
  vivify_1685:
    set $P2981, param_2979
    unless_null $P2981, vivify_1687
    $P2981 = root_new ['parrot';'Hash']
  vivify_1687:
    set $P124, $P2981["name"]
    unless_null $P124, vivify_1688
    new $P124, "Undef"
  vivify_1688:
    set $S100, $P124
    find_dynamic_lex $P127, "$*GLOBALish"
    unless_null $P127, vivify_1689
    get_hll_global $P125, "GLOBAL"
    get_who $P126, $P125
    set $P127, $P126["$GLOBALish"]
    unless_null $P127, vivify_1690
    die "Contextual $*GLOBALish not found"
  vivify_1690:
  vivify_1689:
    $P128 = $P123."load_module"($S100, $P127)
    set $P2980, $P128
.annotate 'line', 1665
    set $P120, $P2980
    unless_null $P120, vivify_1691
    new $P120, "Undef"
  vivify_1691:
    defined $I100, $P120
    unless $I100, if_2982_end
.annotate 'line', 1666
    set $P121, $P2980
    unless_null $P121, vivify_1692
    new $P121, "Undef"
  vivify_1692:
    "import_HOW_exports"($P121)
  if_2982_end:
.annotate 'line', 1668
    set $P120, param_2979
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P123, $P121, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Stmts"]
    $P126 = $P125."new"()
    $P127 = $P120."!make"($P126)
.annotate 'line', 1663
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "statement_control:sym<if>" :anon :subid("262_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_2984
    .param pmc param_2985
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1671
    .const 'Sub' $P2996 = "804_1337966799.879" 
    capture_lex $P2996
    .lex "self", param_2984
    .lex "$/", param_2985
.annotate 'line', 1672
    new $P118, "Undef"
    set $P2986, $P118
    .lex "$count", $P2986
.annotate 'line', 1673
    new $P120, "Undef"
    set $P2987, $P120
    .lex "$past", $P2987
.annotate 'line', 1672
    set $P2988, param_2985
    unless_null $P2988, vivify_1693
    $P2988 = root_new ['parrot';'Hash']
  vivify_1693:
    set $P121, $P2988["xblock"]
    unless_null $P121, vivify_1694
    new $P121, "Undef"
  vivify_1694:
    set $N100, $P121
    new $P123, 'Float'
    set $P123, $N100
    sub $P124, $P123, 1
    set $P2986, $P124
.annotate 'line', 1673
    set $P121, $P2986
    unless_null $P121, vivify_1695
    new $P121, "Undef"
  vivify_1695:
    set $I100, $P121
    set $P2989, param_2985
    unless_null $P2989, vivify_1696
    $P2989 = root_new ['parrot';'Hash']
  vivify_1696:
    set $P2990, $P2989["xblock"]
    unless_null $P2990, vivify_1697
    $P2990 = root_new ['parrot';'ResizablePMCArray']
  vivify_1697:
    set $P123, $P2990[$I100]
    unless_null $P123, vivify_1698
    new $P123, "Undef"
  vivify_1698:
    $P124 = $P123."ast"()
    $P125 = "xblock_immediate"($P124)
    set $P2987, $P125
.annotate 'line', 1674
    set $P2992, param_2985
    unless_null $P2992, vivify_1699
    $P2992 = root_new ['parrot';'Hash']
  vivify_1699:
    set $P121, $P2992["else"]
    unless_null $P121, vivify_1700
    new $P121, "Undef"
  vivify_1700:
    unless $P121, if_2991_end
.annotate 'line', 1675
    set $P123, $P2987
    unless_null $P123, vivify_1701
    new $P123, "Undef"
  vivify_1701:
    set $P2993, param_2985
    unless_null $P2993, vivify_1702
    $P2993 = root_new ['parrot';'Hash']
  vivify_1702:
    set $P2994, $P2993["else"]
    unless_null $P2994, vivify_1703
    $P2994 = root_new ['parrot';'ResizablePMCArray']
  vivify_1703:
    set $P124, $P2994[0]
    unless_null $P124, vivify_1704
    new $P124, "Undef"
  vivify_1704:
    $P125 = $P124."ast"()
    $P126 = "block_immediate"($P125)
    $P123."push"($P126)
  if_2991_end:
.annotate 'line', 1678
    new $P124, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P124, loop3001_handler
    push_eh $P124
  loop3001_test:
    set $P121, $P2986
    unless_null $P121, vivify_1705
    new $P121, "Undef"
  vivify_1705:
    set $N100, $P121
    set $N101, 0
    isgt $I100, $N100, $N101
    unless $I100, loop3001_done
  loop3001_redo:
    .const 'Sub' $P2996 = "804_1337966799.879" 
    capture_lex $P2996
    $P2996()
  loop3001_next:
    goto loop3001_test
  loop3001_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P125, exception, 'type'
    eq $P125, .CONTROL_LOOP_NEXT, loop3001_next
    eq $P125, .CONTROL_LOOP_REDO, loop3001_redo
  loop3001_done:
    pop_eh 
.annotate 'line', 1684
    set $P121, param_2985
    set $P123, $P2987
    unless_null $P123, vivify_1714
    new $P123, "Undef"
  vivify_1714:
    $P124 = $P121."!make"($P123)
.annotate 'line', 1671
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2995"  :anon :subid("804_1337966799.879") :outer("262_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1680
    new $P123, "Undef"
    set $P2997, $P123
    .lex "$else", $P2997
.annotate 'line', 1678
    find_lex $P124, "$count"
    unless_null $P124, vivify_1706
    new $P124, "Undef"
  vivify_1706:
    clone $P2998, $P124
    dec $P124
.annotate 'line', 1680
    find_lex $P124, "$past"
    unless_null $P124, vivify_1707
    new $P124, "Undef"
  vivify_1707:
    set $P2997, $P124
.annotate 'line', 1681
    find_lex $P124, "$count"
    unless_null $P124, vivify_1708
    new $P124, "Undef"
  vivify_1708:
    set $I101, $P124
    find_lex $P2999, "$/"
    unless_null $P2999, vivify_1709
    $P2999 = root_new ['parrot';'Hash']
  vivify_1709:
    set $P3000, $P2999["xblock"]
    unless_null $P3000, vivify_1710
    $P3000 = root_new ['parrot';'ResizablePMCArray']
  vivify_1710:
    set $P125, $P3000[$I101]
    unless_null $P125, vivify_1711
    new $P125, "Undef"
  vivify_1711:
    $P126 = $P125."ast"()
    $P127 = "xblock_immediate"($P126)
    store_lex "$past", $P127
.annotate 'line', 1682
    find_lex $P124, "$past"
    unless_null $P124, vivify_1712
    new $P124, "Undef"
  vivify_1712:
    set $P125, $P2997
    unless_null $P125, vivify_1713
    new $P125, "Undef"
  vivify_1713:
    $P126 = $P124."push"($P125)
.annotate 'line', 1678
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<unless>" :anon :subid("263_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3003
    .param pmc param_3004
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1687
    .lex "self", param_3003
    .lex "$/", param_3004
.annotate 'line', 1688
    new $P118, "Undef"
    set $P3005, $P118
    .lex "$past", $P3005
    set $P3006, param_3004
    unless_null $P3006, vivify_1715
    $P3006 = root_new ['parrot';'Hash']
  vivify_1715:
    set $P120, $P3006["xblock"]
    unless_null $P120, vivify_1716
    new $P120, "Undef"
  vivify_1716:
    $P121 = $P120."ast"()
    $P123 = "xblock_immediate"($P121)
    set $P3005, $P123
.annotate 'line', 1689
    set $P120, $P3005
    unless_null $P120, vivify_1717
    new $P120, "Undef"
  vivify_1717:
    $P120."pasttype"("unless")
.annotate 'line', 1690
    set $P120, param_3004
    set $P121, $P3005
    unless_null $P121, vivify_1718
    new $P121, "Undef"
  vivify_1718:
    $P123 = $P120."!make"($P121)
.annotate 'line', 1687
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<while>" :anon :subid("264_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3008
    .param pmc param_3009
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1693
    .lex "self", param_3008
    .lex "$/", param_3009
.annotate 'line', 1694
    new $P118, "Undef"
    set $P3010, $P118
    .lex "$past", $P3010
    set $P3011, param_3009
    unless_null $P3011, vivify_1719
    $P3011 = root_new ['parrot';'Hash']
  vivify_1719:
    set $P120, $P3011["xblock"]
    unless_null $P120, vivify_1720
    new $P120, "Undef"
  vivify_1720:
    $P121 = $P120."ast"()
    $P123 = "xblock_immediate"($P121)
    set $P3010, $P123
.annotate 'line', 1695
    set $P120, $P3010
    unless_null $P120, vivify_1721
    new $P120, "Undef"
  vivify_1721:
    set $P3012, param_3009
    unless_null $P3012, vivify_1722
    $P3012 = root_new ['parrot';'Hash']
  vivify_1722:
    set $P121, $P3012["sym"]
    unless_null $P121, vivify_1723
    new $P121, "Undef"
  vivify_1723:
    set $S100, $P121
    $P120."pasttype"($S100)
.annotate 'line', 1696
    set $P120, param_3009
    set $P121, $P3010
    unless_null $P121, vivify_1724
    new $P121, "Undef"
  vivify_1724:
    $P123 = $P120."!make"($P121)
.annotate 'line', 1693
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<repeat>" :anon :subid("265_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3014
    .param pmc param_3015
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1699
    .lex "self", param_3014
    .lex "$/", param_3015
.annotate 'line', 1700
    new $P118, "Undef"
    set $P3016, $P118
    .lex "$pasttype", $P3016
.annotate 'line', 1701
    new $P120, "Undef"
    set $P3017, $P120
    .lex "$past", $P3017
.annotate 'line', 1700
    new $P121, "String"
    assign $P121, "repeat_"
    set $P3018, param_3015
    unless_null $P3018, vivify_1725
    $P3018 = root_new ['parrot';'Hash']
  vivify_1725:
    set $P123, $P3018["wu"]
    unless_null $P123, vivify_1726
    new $P123, "Undef"
  vivify_1726:
    set $S100, $P123
    concat $P124, $P121, $S100
    set $P3016, $P124
.annotate 'line', 1699
    set $P121, $P3017
    unless_null $P121, vivify_1727
    new $P121, "Undef"
  vivify_1727:
.annotate 'line', 1702
    set $P3020, param_3015
    unless_null $P3020, vivify_1728
    $P3020 = root_new ['parrot';'Hash']
  vivify_1728:
    set $P121, $P3020["xblock"]
    unless_null $P121, vivify_1729
    new $P121, "Undef"
  vivify_1729:
    if $P121, if_3019
.annotate 'line', 1707
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Op"]
    set $P3022, param_3015
    unless_null $P3022, vivify_1730
    $P3022 = root_new ['parrot';'Hash']
  vivify_1730:
    set $P127, $P3022["EXPR"]
    unless_null $P127, vivify_1731
    new $P127, "Undef"
  vivify_1731:
    $P128 = $P127."ast"()
    set $P3023, param_3015
    unless_null $P3023, vivify_1732
    $P3023 = root_new ['parrot';'Hash']
  vivify_1732:
    set $P129, $P3023["pblock"]
    unless_null $P129, vivify_1733
    new $P129, "Undef"
  vivify_1733:
    $P131 = $P129."ast"()
    $P132 = "block_immediate"($P131)
    set $P133, $P3016
    unless_null $P133, vivify_1734
    new $P133, "Undef"
  vivify_1734:
    set $P134, param_3015
    unless_null $P134, vivify_1735
    new $P134, "Undef"
  vivify_1735:
    $P135 = $P126."new"($P128, $P132, $P133 :named("pasttype"), $P134 :named("node"))
    set $P3017, $P135
.annotate 'line', 1706
    goto if_3019_end
  if_3019:
.annotate 'line', 1703
    set $P3021, param_3015
    unless_null $P3021, vivify_1736
    $P3021 = root_new ['parrot';'Hash']
  vivify_1736:
    set $P123, $P3021["xblock"]
    unless_null $P123, vivify_1737
    new $P123, "Undef"
  vivify_1737:
    $P124 = $P123."ast"()
    $P125 = "xblock_immediate"($P124)
    set $P3017, $P125
.annotate 'line', 1704
    set $P123, $P3017
    unless_null $P123, vivify_1738
    new $P123, "Undef"
  vivify_1738:
    set $P124, $P3016
    unless_null $P124, vivify_1739
    new $P124, "Undef"
  vivify_1739:
    $P123."pasttype"($P124)
  if_3019_end:
.annotate 'line', 1710
    set $P121, param_3015
    set $P123, $P3017
    unless_null $P123, vivify_1740
    new $P123, "Undef"
  vivify_1740:
    $P124 = $P121."!make"($P123)
.annotate 'line', 1699
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<for>" :anon :subid("266_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3025
    .param pmc param_3026
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1713
    .lex "self", param_3025
    .lex "$/", param_3026
.annotate 'line', 1714
    new $P118, "Undef"
    set $P3027, $P118
    .lex "$past", $P3027
.annotate 'line', 1716
    new $P120, "Undef"
    set $P3028, $P120
    .lex "$block", $P3028
.annotate 'line', 1714
    set $P3029, param_3026
    unless_null $P3029, vivify_1741
    $P3029 = root_new ['parrot';'Hash']
  vivify_1741:
    set $P121, $P3029["xblock"]
    unless_null $P121, vivify_1742
    new $P121, "Undef"
  vivify_1742:
    $P123 = $P121."ast"()
    set $P3027, $P123
.annotate 'line', 1715
    set $P121, $P3027
    unless_null $P121, vivify_1743
    new $P121, "Undef"
  vivify_1743:
    $P121."pasttype"("for")
.annotate 'line', 1716
    set $P3030, $P3027
    unless_null $P3030, vivify_1744
    $P3030 = root_new ['parrot';'ResizablePMCArray']
  vivify_1744:
    set $P121, $P3030[1]
    unless_null $P121, vivify_1745
    new $P121, "Undef"
  vivify_1745:
    set $P3028, $P121
.annotate 'line', 1717
    set $P121, $P3028
    unless_null $P121, vivify_1746
    new $P121, "Undef"
  vivify_1746:
    $P123 = $P121."arity"()
    if $P123, unless_3031_end
.annotate 'line', 1718
    set $P3032, $P3028
    unless_null $P3032, vivify_1747
    $P3032 = root_new ['parrot';'ResizablePMCArray']
  vivify_1747:
    set $P124, $P3032[0]
    unless_null $P124, vivify_1748
    new $P124, "Undef"
  vivify_1748:
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P128, $P127["Var"]
    $P129 = $P128."new"("$_" :named("name"), "parameter" :named("scope"))
    $P124."push"($P129)
.annotate 'line', 1719
    set $P124, $P3028
    unless_null $P124, vivify_1749
    new $P124, "Undef"
  vivify_1749:
    $P124."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1720
    set $P124, $P3028
    unless_null $P124, vivify_1750
    new $P124, "Undef"
  vivify_1750:
    $P124."arity"(1)
  unless_3031_end:
.annotate 'line', 1722
    set $P121, $P3028
    unless_null $P121, vivify_1751
    new $P121, "Undef"
  vivify_1751:
    $P121."blocktype"("immediate")
.annotate 'line', 1723
    set $P121, param_3026
    set $P123, $P3027
    unless_null $P123, vivify_1752
    new $P123, "Undef"
  vivify_1752:
    $P124 = $P121."!make"($P123)
.annotate 'line', 1713
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<CATCH>" :anon :subid("267_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3034
    .param pmc param_3035
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1726
    .lex "self", param_3034
    .lex "$/", param_3035
.annotate 'line', 1727
    new $P118, "Undef"
    set $P3036, $P118
    .lex "$block", $P3036
    set $P3037, param_3035
    unless_null $P3037, vivify_1753
    $P3037 = root_new ['parrot';'Hash']
  vivify_1753:
    set $P120, $P3037["block"]
    unless_null $P120, vivify_1754
    new $P120, "Undef"
  vivify_1754:
    $P121 = $P120."ast"()
    set $P3036, $P121
.annotate 'line', 1728
    set $P120, param_3035
    unless_null $P120, vivify_1755
    new $P120, "Undef"
  vivify_1755:
    set $P121, $P3036
    unless_null $P121, vivify_1756
    new $P121, "Undef"
  vivify_1756:
    "push_block_handler"($P120, $P121)
.annotate 'line', 1729
    find_dynamic_lex $P123, "$*W"
    unless_null $P123, vivify_1757
    get_hll_global $P120, "GLOBAL"
    get_who $P121, $P120
    set $P123, $P121["$W"]
    unless_null $P123, vivify_1758
    die "Contextual $*W not found"
  vivify_1758:
  vivify_1757:
    $P124 = $P123."cur_lexpad"()
    $P125 = $P124."handlers"()
    set $P126, $P125[0]
    unless_null $P126, vivify_1759
    new $P126, "Undef"
  vivify_1759:
    $P126."handle_types_except"("CONTROL")
.annotate 'line', 1730
    set $P120, param_3035
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P123, $P121, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Stmts"]
    set $P126, param_3035
    unless_null $P126, vivify_1760
    new $P126, "Undef"
  vivify_1760:
    $P127 = $P125."new"($P126 :named("node"))
    $P128 = $P120."!make"($P127)
.annotate 'line', 1726
    .return ($P128)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<CONTROL>" :anon :subid("268_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3039
    .param pmc param_3040
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1733
    .lex "self", param_3039
    .lex "$/", param_3040
.annotate 'line', 1734
    new $P118, "Undef"
    set $P3041, $P118
    .lex "$block", $P3041
    set $P3042, param_3040
    unless_null $P3042, vivify_1761
    $P3042 = root_new ['parrot';'Hash']
  vivify_1761:
    set $P120, $P3042["block"]
    unless_null $P120, vivify_1762
    new $P120, "Undef"
  vivify_1762:
    $P121 = $P120."ast"()
    set $P3041, $P121
.annotate 'line', 1735
    set $P120, param_3040
    unless_null $P120, vivify_1763
    new $P120, "Undef"
  vivify_1763:
    set $P121, $P3041
    unless_null $P121, vivify_1764
    new $P121, "Undef"
  vivify_1764:
    "push_block_handler"($P120, $P121)
.annotate 'line', 1736
    find_dynamic_lex $P123, "$*W"
    unless_null $P123, vivify_1765
    get_hll_global $P120, "GLOBAL"
    get_who $P121, $P120
    set $P123, $P121["$W"]
    unless_null $P123, vivify_1766
    die "Contextual $*W not found"
  vivify_1766:
  vivify_1765:
    $P124 = $P123."cur_lexpad"()
    $P125 = $P124."handlers"()
    set $P126, $P125[0]
    unless_null $P126, vivify_1767
    new $P126, "Undef"
  vivify_1767:
    $P126."handle_types"("CONTROL")
.annotate 'line', 1737
    set $P120, param_3040
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P123, $P121, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Stmts"]
    set $P126, param_3040
    unless_null $P126, vivify_1768
    new $P126, "Undef"
  vivify_1768:
    $P127 = $P125."new"($P126 :named("node"))
    $P128 = $P120."!make"($P127)
.annotate 'line', 1733
    .return ($P128)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_prefix:sym<BEGIN>" :anon :subid("269_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3044
    .param pmc param_3045
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1778
    .lex "self", param_3044
    .lex "$/", param_3045
.annotate 'line', 1779
    set $P118, param_3045
    find_dynamic_lex $P123, "$*W"
    unless_null $P123, vivify_1769
    get_hll_global $P120, "GLOBAL"
    get_who $P121, $P120
    set $P123, $P121["$W"]
    unless_null $P123, vivify_1770
    die "Contextual $*W not found"
  vivify_1770:
  vivify_1769:
    set $P3046, param_3045
    unless_null $P3046, vivify_1771
    $P3046 = root_new ['parrot';'Hash']
  vivify_1771:
    set $P124, $P3046["blorst"]
    unless_null $P124, vivify_1772
    new $P124, "Undef"
  vivify_1772:
    $P125 = $P124."ast"()
    $P126 = $P123."run_begin_block"($P125)
    $P127 = $P118."!make"($P126)
.annotate 'line', 1778
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_prefix:sym<INIT>" :anon :subid("270_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3048
    .param pmc param_3049
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1782
    .lex "self", param_3048
    .lex "$/", param_3049
.annotate 'line', 1783
    find_dynamic_lex $P121, "$*W"
    unless_null $P121, vivify_1773
    get_hll_global $P118, "GLOBAL"
    get_who $P120, $P118
    set $P121, $P120["$W"]
    unless_null $P121, vivify_1774
    die "Contextual $*W not found"
  vivify_1774:
  vivify_1773:
    $P123 = $P121."cur_lexpad"()
    set $P3050, param_3049
    unless_null $P3050, vivify_1775
    $P3050 = root_new ['parrot';'Hash']
  vivify_1775:
    set $P124, $P3050["blorst"]
    unless_null $P124, vivify_1776
    new $P124, "Undef"
  vivify_1776:
    $P125 = $P124."ast"()
    $P123."push"($P125)
.annotate 'line', 1784
    set $P118, param_3049
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Stmts"]
    $P125 = $P124."new"()
    $P126 = $P118."!make"($P125)
.annotate 'line', 1782
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_prefix:sym<try>" :anon :subid("271_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3052
    .param pmc param_3053
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1787
    .lex "self", param_3052
    .lex "$/", param_3053
.annotate 'line', 1788
    new $P118, "Undef"
    set $P3054, $P118
    .lex "$past", $P3054
    set $P3055, param_3053
    unless_null $P3055, vivify_1777
    $P3055 = root_new ['parrot';'Hash']
  vivify_1777:
    set $P120, $P3055["blorst"]
    unless_null $P120, vivify_1778
    new $P120, "Undef"
  vivify_1778:
    $P121 = $P120."ast"()
    set $P3054, $P121
.annotate 'line', 1789
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Block"]
    set $P125, $P3054
    unless_null $P125, vivify_1779
    new $P125, "Undef"
  vivify_1779:
    $P126 = $P124."ACCEPTS"($P125)
    if $P126, unless_3056_end
.annotate 'line', 1790
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P128, $P127, "PAST"
    get_who $P129, $P128
    set $P131, $P129["Block"]
    set $P132, $P3054
    unless_null $P132, vivify_1780
    new $P132, "Undef"
  vivify_1780:
    set $P133, param_3053
    unless_null $P133, vivify_1781
    new $P133, "Undef"
  vivify_1781:
    $P134 = $P131."new"($P132, "immediate" :named("blocktype"), $P133 :named("node"))
    set $P3054, $P134
  unless_3056_end:
.annotate 'line', 1792
    set $P120, $P3054
    unless_null $P120, vivify_1782
    new $P120, "Undef"
  vivify_1782:
    $P121 = $P120."handlers"()
    if $P121, unless_3057_end
.annotate 'line', 1793
    set $P123, $P3054
    unless_null $P123, vivify_1783
    new $P123, "Undef"
  vivify_1783:
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Control"]
.annotate 'line', 1795
    get_hll_global $P128, "GLOBAL"
    nqp_get_package_through_who $P129, $P128, "PAST"
    get_who $P131, $P129
    set $P132, $P131["Stmts"]
.annotate 'line', 1796
    get_hll_global $P133, "GLOBAL"
    nqp_get_package_through_who $P134, $P133, "PAST"
    get_who $P135, $P134
    set $P136, $P135["Op"]
.annotate 'line', 1797
    get_hll_global $P137, "GLOBAL"
    nqp_get_package_through_who $P138, $P137, "PAST"
    get_who $P139, $P138
    set $P140, $P139["Var"]
.annotate 'line', 1798
    get_hll_global $P141, "GLOBAL"
    nqp_get_package_through_who $P142, $P141, "PAST"
    get_who $P143, $P142
    set $P144, $P143["Var"]
    $P145 = $P144."new"("register" :named("scope"), "exception" :named("name"))
    $P146 = $P140."new"($P145, "handled", "keyed" :named("scope"))
.annotate 'line', 1797
    $P147 = $P136."new"($P146, 1, "bind_6model" :named("pasttype"))
.annotate 'line', 1796
    $P149 = $P132."new"($P147)
.annotate 'line', 1795
    $P150 = $P127."new"($P149, "CONTROL" :named("handle_types_except"))
.annotate 'line', 1793
    new $P151, "ResizablePMCArray"
    push $P151, $P150
    $P123."handlers"($P151)
  unless_3057_end:
.annotate 'line', 1807
    set $P120, param_3053
    set $P121, $P3054
    unless_null $P121, vivify_1784
    new $P121, "Undef"
  vivify_1784:
    $P123 = $P120."!make"($P121)
.annotate 'line', 1787
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "blorst" :anon :subid("272_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3059
    .param pmc param_3060
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1810
    .lex "self", param_3059
    .lex "$/", param_3060
.annotate 'line', 1811
    set $P118, param_3060
.annotate 'line', 1812
    set $P3062, param_3060
    unless_null $P3062, vivify_1785
    $P3062 = root_new ['parrot';'Hash']
  vivify_1785:
    set $P121, $P3062["block"]
    unless_null $P121, vivify_1786
    new $P121, "Undef"
  vivify_1786:
    if $P121, if_3061
.annotate 'line', 1813
    set $P3064, param_3060
    unless_null $P3064, vivify_1787
    $P3064 = root_new ['parrot';'Hash']
  vivify_1787:
    set $P126, $P3064["statement"]
    unless_null $P126, vivify_1788
    new $P126, "Undef"
  vivify_1788:
    $P127 = $P126."ast"()
    set $P120, $P127
.annotate 'line', 1812
    goto if_3061_end
  if_3061:
    set $P3063, param_3060
    unless_null $P3063, vivify_1789
    $P3063 = root_new ['parrot';'Hash']
  vivify_1789:
    set $P123, $P3063["block"]
    unless_null $P123, vivify_1790
    new $P123, "Undef"
  vivify_1790:
    $P124 = $P123."ast"()
    $P125 = "block_immediate"($P124)
    set $P120, $P125
  if_3061_end:
    $P128 = $P118."!make"($P120)
.annotate 'line', 1810
    .return ($P128)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_mod_cond:sym<if>" :anon :subid("273_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3066
    .param pmc param_3067
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1818
    .lex "self", param_3066
    .lex "$/", param_3067
    set $P118, param_3067
    set $P3068, param_3067
    unless_null $P3068, vivify_1791
    $P3068 = root_new ['parrot';'Hash']
  vivify_1791:
    set $P120, $P3068["cond"]
    unless_null $P120, vivify_1792
    new $P120, "Undef"
  vivify_1792:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_mod_cond:sym<unless>" :anon :subid("274_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3070
    .param pmc param_3071
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1819
    .lex "self", param_3070
    .lex "$/", param_3071
    set $P118, param_3071
    set $P3072, param_3071
    unless_null $P3072, vivify_1793
    $P3072 = root_new ['parrot';'Hash']
  vivify_1793:
    set $P120, $P3072["cond"]
    unless_null $P120, vivify_1794
    new $P120, "Undef"
  vivify_1794:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_mod_loop:sym<while>" :anon :subid("275_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3074
    .param pmc param_3075
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1821
    .lex "self", param_3074
    .lex "$/", param_3075
    set $P118, param_3075
    set $P3076, param_3075
    unless_null $P3076, vivify_1795
    $P3076 = root_new ['parrot';'Hash']
  vivify_1795:
    set $P120, $P3076["cond"]
    unless_null $P120, vivify_1796
    new $P120, "Undef"
  vivify_1796:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_mod_loop:sym<until>" :anon :subid("276_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3078
    .param pmc param_3079
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1822
    .lex "self", param_3078
    .lex "$/", param_3079
    set $P118, param_3079
    set $P3080, param_3079
    unless_null $P3080, vivify_1797
    $P3080 = root_new ['parrot';'Hash']
  vivify_1797:
    set $P120, $P3080["cond"]
    unless_null $P120, vivify_1798
    new $P120, "Undef"
  vivify_1798:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<fatarrow>" :anon :subid("277_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3082
    .param pmc param_3083
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1826
    .lex "self", param_3082
    .lex "$/", param_3083
    set $P118, param_3083
    set $P3084, param_3083
    unless_null $P3084, vivify_1799
    $P3084 = root_new ['parrot';'Hash']
  vivify_1799:
    set $P120, $P3084["fatarrow"]
    unless_null $P120, vivify_1800
    new $P120, "Undef"
  vivify_1800:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<colonpair>" :anon :subid("278_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3086
    .param pmc param_3087
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1827
    .lex "self", param_3086
    .lex "$/", param_3087
    set $P118, param_3087
    set $P3088, param_3087
    unless_null $P3088, vivify_1801
    $P3088 = root_new ['parrot';'Hash']
  vivify_1801:
    set $P120, $P3088["colonpair"]
    unless_null $P120, vivify_1802
    new $P120, "Undef"
  vivify_1802:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<variable>" :anon :subid("279_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3090
    .param pmc param_3091
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1828
    .lex "self", param_3090
    .lex "$/", param_3091
    set $P118, param_3091
    set $P3092, param_3091
    unless_null $P3092, vivify_1803
    $P3092 = root_new ['parrot';'Hash']
  vivify_1803:
    set $P120, $P3092["variable"]
    unless_null $P120, vivify_1804
    new $P120, "Undef"
  vivify_1804:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<package_declarator>" :anon :subid("280_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3094
    .param pmc param_3095
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1829
    .lex "self", param_3094
    .lex "$/", param_3095
    set $P118, param_3095
    set $P3096, param_3095
    unless_null $P3096, vivify_1805
    $P3096 = root_new ['parrot';'Hash']
  vivify_1805:
    set $P120, $P3096["package_declarator"]
    unless_null $P120, vivify_1806
    new $P120, "Undef"
  vivify_1806:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<scope_declarator>" :anon :subid("281_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3098
    .param pmc param_3099
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1830
    .lex "self", param_3098
    .lex "$/", param_3099
    set $P118, param_3099
    set $P3100, param_3099
    unless_null $P3100, vivify_1807
    $P3100 = root_new ['parrot';'Hash']
  vivify_1807:
    set $P120, $P3100["scope_declarator"]
    unless_null $P120, vivify_1808
    new $P120, "Undef"
  vivify_1808:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<routine_declarator>" :anon :subid("282_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3102
    .param pmc param_3103
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1831
    .lex "self", param_3102
    .lex "$/", param_3103
    set $P118, param_3103
    set $P3104, param_3103
    unless_null $P3104, vivify_1809
    $P3104 = root_new ['parrot';'Hash']
  vivify_1809:
    set $P120, $P3104["routine_declarator"]
    unless_null $P120, vivify_1810
    new $P120, "Undef"
  vivify_1810:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<regex_declarator>" :anon :subid("283_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3106
    .param pmc param_3107
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1832
    .lex "self", param_3106
    .lex "$/", param_3107
    set $P118, param_3107
    set $P3108, param_3107
    unless_null $P3108, vivify_1811
    $P3108 = root_new ['parrot';'Hash']
  vivify_1811:
    set $P120, $P3108["regex_declarator"]
    unless_null $P120, vivify_1812
    new $P120, "Undef"
  vivify_1812:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<statement_prefix>" :anon :subid("284_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3110
    .param pmc param_3111
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1833
    .lex "self", param_3110
    .lex "$/", param_3111
    set $P118, param_3111
    set $P3112, param_3111
    unless_null $P3112, vivify_1813
    $P3112 = root_new ['parrot';'Hash']
  vivify_1813:
    set $P120, $P3112["statement_prefix"]
    unless_null $P120, vivify_1814
    new $P120, "Undef"
  vivify_1814:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<lambda>" :anon :subid("285_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3114
    .param pmc param_3115
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1834
    .lex "self", param_3114
    .lex "$/", param_3115
    set $P118, param_3115
    set $P3116, param_3115
    unless_null $P3116, vivify_1815
    $P3116 = root_new ['parrot';'Hash']
  vivify_1815:
    set $P120, $P3116["pblock"]
    unless_null $P120, vivify_1816
    new $P120, "Undef"
  vivify_1816:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "fatarrow" :anon :subid("286_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3118
    .param pmc param_3119
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1836
    .lex "self", param_3118
    .lex "$/", param_3119
.annotate 'line', 1837
    new $P118, "Undef"
    set $P3120, $P118
    .lex "$past", $P3120
    set $P3121, param_3119
    unless_null $P3121, vivify_1817
    $P3121 = root_new ['parrot';'Hash']
  vivify_1817:
    set $P120, $P3121["val"]
    unless_null $P120, vivify_1818
    new $P120, "Undef"
  vivify_1818:
    $P121 = $P120."ast"()
    set $P3120, $P121
.annotate 'line', 1838
    set $P120, $P3120
    unless_null $P120, vivify_1819
    new $P120, "Undef"
  vivify_1819:
    set $P3122, param_3119
    unless_null $P3122, vivify_1820
    $P3122 = root_new ['parrot';'Hash']
  vivify_1820:
    set $P121, $P3122["key"]
    unless_null $P121, vivify_1821
    new $P121, "Undef"
  vivify_1821:
    $P123 = $P121."Str"()
    $P120."named"($P123)
.annotate 'line', 1839
    set $P120, param_3119
    set $P121, $P3120
    unless_null $P121, vivify_1822
    new $P121, "Undef"
  vivify_1822:
    $P123 = $P120."!make"($P121)
.annotate 'line', 1836
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "colonpair" :anon :subid("287_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3124
    .param pmc param_3125
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1842
    .const 'Sub' $P3133 = "805_1337966799.879" 
    capture_lex $P3133
    .lex "self", param_3124
    .lex "$/", param_3125
.annotate 'line', 1843
    set $P3127, param_3125
    unless_null $P3127, vivify_1823
    $P3127 = root_new ['parrot';'Hash']
  vivify_1823:
    set $P120, $P3127["variable"]
    unless_null $P120, vivify_1824
    new $P120, "Undef"
  vivify_1824:
    if $P120, if_3126
.annotate 'line', 1846
    .const 'Sub' $P3133 = "805_1337966799.879" 
    capture_lex $P3133
    $P123 = $P3133()
    set $P118, $P123
.annotate 'line', 1843
    goto if_3126_end
  if_3126:
.annotate 'line', 1844
    set $P3128, param_3125
    unless_null $P3128, vivify_1836
    $P3128 = root_new ['parrot';'Hash']
  vivify_1836:
    set $P121, $P3128["variable"]
    unless_null $P121, vivify_1837
    new $P121, "Undef"
  vivify_1837:
    $P123 = $P121."ast"()
    set $P3129, param_3125
    unless_null $P3129, vivify_1838
    $P3129 = root_new ['parrot';'Hash']
  vivify_1838:
    set $P3130, $P3129["variable"]
    unless_null $P3130, vivify_1839
    $P3130 = root_new ['parrot';'Hash']
  vivify_1839:
    set $P124, $P3130["desigilname"]
    unless_null $P124, vivify_1840
    new $P124, "Undef"
  vivify_1840:
    set $S100, $P124
    $P123."named"($S100)
.annotate 'line', 1845
    set $P121, param_3125
    set $P3131, param_3125
    unless_null $P3131, vivify_1841
    $P3131 = root_new ['parrot';'Hash']
  vivify_1841:
    set $P123, $P3131["variable"]
    unless_null $P123, vivify_1842
    new $P123, "Undef"
  vivify_1842:
    $P124 = $P123."ast"()
    $P125 = $P121."!make"($P124)
.annotate 'line', 1843
    set $P118, $P125
  if_3126_end:
.annotate 'line', 1842
    .return ($P118)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3132"  :anon :subid("805_1337966799.879") :outer("287_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1847
    new $P121, "Undef"
    set $P3134, $P121
    .lex "$past", $P3134
.annotate 'line', 1848
    find_lex $P3136, "$/"
    unless_null $P3136, vivify_1825
    $P3136 = root_new ['parrot';'Hash']
  vivify_1825:
    set $P124, $P3136["circumfix"]
    unless_null $P124, vivify_1826
    new $P124, "Undef"
  vivify_1826:
    if $P124, if_3135
.annotate 'line', 1849
    get_hll_global $P128, "GLOBAL"
    nqp_get_package_through_who $P129, $P128, "PAST"
    get_who $P131, $P129
    set $P132, $P131["Val"]
    find_lex $P3139, "$/"
    unless_null $P3139, vivify_1827
    $P3139 = root_new ['parrot';'Hash']
  vivify_1827:
    set $P133, $P3139["not"]
    unless_null $P133, vivify_1828
    new $P133, "Undef"
  vivify_1828:
    isfalse $I100, $P133
    $P134 = $P132."new"($I100 :named("value"))
    set $P123, $P134
.annotate 'line', 1848
    goto if_3135_end
  if_3135:
    find_lex $P3137, "$/"
    unless_null $P3137, vivify_1829
    $P3137 = root_new ['parrot';'Hash']
  vivify_1829:
    set $P3138, $P3137["circumfix"]
    unless_null $P3138, vivify_1830
    $P3138 = root_new ['parrot';'ResizablePMCArray']
  vivify_1830:
    set $P126, $P3138[0]
    unless_null $P126, vivify_1831
    new $P126, "Undef"
  vivify_1831:
    $P127 = $P126."ast"()
    set $P123, $P127
  if_3135_end:
    set $P3134, $P123
.annotate 'line', 1850
    set $P123, $P3134
    unless_null $P123, vivify_1832
    new $P123, "Undef"
  vivify_1832:
    find_lex $P3140, "$/"
    unless_null $P3140, vivify_1833
    $P3140 = root_new ['parrot';'Hash']
  vivify_1833:
    set $P124, $P3140["identifier"]
    unless_null $P124, vivify_1834
    new $P124, "Undef"
  vivify_1834:
    set $S100, $P124
    $P123."named"($S100)
.annotate 'line', 1851
    find_dynamic_lex $P123, "$/"
    set $P124, $P3134
    unless_null $P124, vivify_1835
    new $P124, "Undef"
  vivify_1835:
    $P126 = $P123."!make"($P124)
.annotate 'line', 1846
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "variable" :anon :subid("288_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3142
    .param pmc param_3143
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1855
    .const 'Sub' $P3149 = "806_1337966799.879" 
    capture_lex $P3149
    .lex "self", param_3142
    .lex "$/", param_3143
.annotate 'line', 1856
    new $P118, "Undef"
    set $P3144, $P118
    .lex "$past", $P3144
.annotate 'line', 1855
    set $P120, $P3144
    unless_null $P120, vivify_1843
    new $P120, "Undef"
  vivify_1843:
.annotate 'line', 1857
    set $P3146, param_3143
    unless_null $P3146, vivify_1844
    $P3146 = root_new ['parrot';'Hash']
  vivify_1844:
    set $P120, $P3146["postcircumfix"]
    unless_null $P120, vivify_1845
    new $P120, "Undef"
  vivify_1845:
    if $P120, if_3145
.annotate 'line', 1861
    .const 'Sub' $P3149 = "806_1337966799.879" 
    capture_lex $P3149
    $P3149()
    goto if_3145_end
  if_3145:
.annotate 'line', 1858
    set $P3147, param_3143
    unless_null $P3147, vivify_1915
    $P3147 = root_new ['parrot';'Hash']
  vivify_1915:
    set $P121, $P3147["postcircumfix"]
    unless_null $P121, vivify_1916
    new $P121, "Undef"
  vivify_1916:
    $P123 = $P121."ast"()
    set $P3144, $P123
.annotate 'line', 1859
    set $P121, $P3144
    unless_null $P121, vivify_1917
    new $P121, "Undef"
  vivify_1917:
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Var"]
    $P127 = $P126."new"("$/" :named("name"))
    $P121."unshift"($P127)
  if_3145_end:
.annotate 'line', 1923
    set $P120, param_3143
    set $P121, $P3144
    unless_null $P121, vivify_1918
    new $P121, "Undef"
  vivify_1918:
    $P123 = $P120."!make"($P121)
.annotate 'line', 1855
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3148"  :anon :subid("806_1337966799.879") :outer("288_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1861
    .const 'Sub' $P3171 = "808_1337966799.879" 
    capture_lex $P3171
    .const 'Sub' $P3162 = "807_1337966799.879" 
    capture_lex $P3162
.annotate 'line', 1862
    $P3151 = root_new ['parrot';'ResizablePMCArray']
    set $P3150, $P3151
    .lex "@name", $P3150
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P123, $P121, "NQP"
    get_who $P124, $P123
    set $P125, $P124["Compiler"]
    find_lex $P126, "$/"
    unless_null $P126, vivify_1846
    new $P126, "Undef"
  vivify_1846:
    set $S100, $P126
    $P127 = $P125."parse_name"($S100)
    set $P3150, $P127
.annotate 'line', 1863
    set $P3153, $P3150
    unless_null $P3153, vivify_1847
    $P3153 = root_new ['parrot';'ResizablePMCArray']
  vivify_1847:
    set $N100, $P3153
    set $N101, 1
    isgt $I100, $N100, $N101
    if $I100, if_3152
.annotate 'line', 1870
    find_lex $P3159, "$/"
    unless_null $P3159, vivify_1848
    $P3159 = root_new ['parrot';'Hash']
  vivify_1848:
    set $P3160, $P3159["twigil"]
    unless_null $P3160, vivify_1849
    $P3160 = root_new ['parrot';'ResizablePMCArray']
  vivify_1849:
    set $P124, $P3160[0]
    unless_null $P124, vivify_1850
    new $P124, "Undef"
  vivify_1850:
    set $S100, $P124
    iseq $I101, $S100, "*"
    if $I101, if_3158
.annotate 'line', 1881
    find_lex $P3168, "$/"
    unless_null $P3168, vivify_1851
    $P3168 = root_new ['parrot';'Hash']
  vivify_1851:
    set $P3169, $P3168["twigil"]
    unless_null $P3169, vivify_1852
    $P3169 = root_new ['parrot';'ResizablePMCArray']
  vivify_1852:
    set $P129, $P3169[0]
    unless_null $P129, vivify_1853
    new $P129, "Undef"
  vivify_1853:
    set $S101, $P129
    iseq $I102, $S101, "!"
    if $I102, if_3167
.annotate 'line', 1913
    find_dynamic_lex $P139, "$*W"
    unless_null $P139, vivify_1854
    get_hll_global $P137, "GLOBAL"
    get_who $P138, $P137
    set $P139, $P138["$W"]
    unless_null $P139, vivify_1855
    die "Contextual $*W not found"
  vivify_1855:
  vivify_1854:
    set $P3191, $P3150
    unless_null $P3191, vivify_1856
    $P3191 = root_new ['parrot';'ResizablePMCArray']
  vivify_1856:
    set $P140, $P3191[0]
    unless_null $P140, vivify_1857
    new $P140, "Undef"
  vivify_1857:
    set $S102, $P140
    $P141 = $P139."is_package"($S102)
    if $P141, if_3190
.annotate 'line', 1918
    get_hll_global $P142, "GLOBAL"
    nqp_get_package_through_who $P143, $P142, "PAST"
    get_who $P144, $P143
    set $P146, $P144["Var"]
.annotate 'line', 1919
    set $P3194, $P3150
    unless_null $P3194, vivify_1858
    $P3194 = root_new ['parrot';'ResizablePMCArray']
  vivify_1858:
    $P147 = $P3194."pop"()
    set $S103, $P147
    find_lex $P3195, "$/"
    unless_null $P3195, vivify_1859
    $P3195 = root_new ['parrot';'Hash']
  vivify_1859:
    set $P149, $P3195["sigil"]
    unless_null $P149, vivify_1860
    new $P149, "Undef"
  vivify_1860:
    $P150 = "vivitype"($P149)
.annotate 'line', 1918
    $P151 = $P146."new"($S103 :named("name"), $P150 :named("viviself"))
    store_lex "$past", $P151
.annotate 'line', 1917
    set $P136, $P151
.annotate 'line', 1913
    goto if_3190_end
  if_3190:
.annotate 'line', 1914
    set $P3192, $P3150
    unless_null $P3192, vivify_1861
    $P3192 = root_new ['parrot';'ResizablePMCArray']
  vivify_1861:
    find_lex $P142, "$/"
    unless_null $P142, vivify_1862
    new $P142, "Undef"
  vivify_1862:
    $P143 = "lexical_package_lookup"($P3192, $P142)
    store_lex "$past", $P143
.annotate 'line', 1915
    find_lex $P142, "$past"
    unless_null $P142, vivify_1863
    new $P142, "Undef"
  vivify_1863:
    find_lex $P3193, "$/"
    unless_null $P3193, vivify_1864
    $P3193 = root_new ['parrot';'Hash']
  vivify_1864:
    set $P143, $P3193["sigil"]
    unless_null $P143, vivify_1865
    new $P143, "Undef"
  vivify_1865:
    $P144 = "vivitype"($P143)
    $P145 = $P142."viviself"($P144)
.annotate 'line', 1913
    set $P136, $P145
  if_3190_end:
    set $P128, $P136
.annotate 'line', 1881
    goto if_3167_end
  if_3167:
    .const 'Sub' $P3171 = "808_1337966799.879" 
    capture_lex $P3171
    $P135 = $P3171()
    set $P128, $P135
  if_3167_end:
    set $P123, $P128
.annotate 'line', 1870
    goto if_3158_end
  if_3158:
    .const 'Sub' $P3162 = "807_1337966799.879" 
    capture_lex $P3162
    $P127 = $P3162()
    set $P123, $P127
  if_3158_end:
    set $P121, $P123
.annotate 'line', 1863
    goto if_3152_end
  if_3152:
.annotate 'line', 1864
    find_lex $P3155, "$/"
    unless_null $P3155, vivify_1907
    $P3155 = root_new ['parrot';'Hash']
  vivify_1907:
    set $P123, $P3155["twigil"]
    unless_null $P123, vivify_1908
    new $P123, "Undef"
  vivify_1908:
    unless $P123, if_3154_end
.annotate 'line', 1865
    find_lex $P124, "$/"
    unless_null $P124, vivify_1909
    new $P124, "Undef"
  vivify_1909:
    $P125 = $P124."CURSOR"()
    $P125."panic"("Twigil not allowed on multi-part name")
  if_3154_end:
.annotate 'line', 1867
    set $P3156, $P3150
    unless_null $P3156, vivify_1910
    $P3156 = root_new ['parrot';'ResizablePMCArray']
  vivify_1910:
    find_lex $P123, "$/"
    unless_null $P123, vivify_1911
    new $P123, "Undef"
  vivify_1911:
    $P124 = "lexical_package_lookup"($P3156, $P123)
    store_lex "$past", $P124
.annotate 'line', 1868
    find_lex $P123, "$past"
    unless_null $P123, vivify_1912
    new $P123, "Undef"
  vivify_1912:
    find_lex $P3157, "$/"
    unless_null $P3157, vivify_1913
    $P3157 = root_new ['parrot';'Hash']
  vivify_1913:
    set $P124, $P3157["sigil"]
    unless_null $P124, vivify_1914
    new $P124, "Undef"
  vivify_1914:
    $P125 = "vivitype"($P124)
    $P126 = $P123."viviself"($P125)
.annotate 'line', 1863
    set $P121, $P126
  if_3152_end:
.annotate 'line', 1861
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3170"  :anon :subid("808_1337966799.879") :outer("806_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1881
    .const 'Sub' $P3181 = "809_1337966799.879" 
    capture_lex $P3181
.annotate 'line', 1883
    new $P131, "Undef"
    set $P3172, $P131
    .lex "$name", $P3172
.annotate 'line', 1884
    new $P132, "Undef"
    set $P3173, $P132
    .lex "$ch", $P3173
.annotate 'line', 1883
    find_lex $P3174, "@name"
    unless_null $P3174, vivify_1866
    $P3174 = root_new ['parrot';'ResizablePMCArray']
  vivify_1866:
    $P133 = $P3174."pop"()
    set $S102, $P133
    new $P135, 'String'
    set $P135, $S102
    set $P3172, $P135
.annotate 'line', 1884
    find_dynamic_lex $P137, "$*PKGDECL"
    unless_null $P137, vivify_1867
    get_hll_global $P135, "GLOBAL"
    get_who $P136, $P135
    set $P137, $P136["$PKGDECL"]
    unless_null $P137, vivify_1868
    die "Contextual $*PKGDECL not found"
  vivify_1868:
  vivify_1867:
    set $S102, $P137
    iseq $I103, $S102, "role"
    if $I103, if_3175
    find_dynamic_lex $P145, "$*W"
    unless_null $P145, vivify_1869
    get_hll_global $P143, "GLOBAL"
    get_who $P144, $P143
    set $P145, $P144["$W"]
    unless_null $P145, vivify_1870
    die "Contextual $*W not found"
  vivify_1870:
  vivify_1869:
    find_dynamic_lex $P149, "$*PACKAGE"
    unless_null $P149, vivify_1871
    get_hll_global $P146, "GLOBAL"
    get_who $P147, $P146
    set $P149, $P147["$PACKAGE"]
    unless_null $P149, vivify_1872
    die "Contextual $*PACKAGE not found"
  vivify_1872:
  vivify_1871:
    $P150 = $P145."get_ref"($P149)
    set $P133, $P150
    goto if_3175_end
  if_3175:
    get_hll_global $P138, "GLOBAL"
    nqp_get_package_through_who $P139, $P138, "PAST"
    get_who $P140, $P139
    set $P141, $P140["Var"]
    $P142 = $P141."new"("$?CLASS" :named("name"))
    set $P133, $P142
  if_3175_end:
    set $P3173, $P133
.annotate 'line', 1885
    new $P133, "Float"
    assign $P133, 1
    set $P3176, $P3173
    unless_null $P3176, vivify_1873
    $P3176 = root_new ['parrot';'Hash']
    set $P3173, $P3176
  vivify_1873:
    set $P3176["has_compile_time_value"], $P133
.annotate 'line', 1886
    find_dynamic_lex $P136, "$*PACKAGE"
    unless_null $P136, vivify_1874
    get_hll_global $P133, "GLOBAL"
    get_who $P135, $P133
    set $P136, $P135["$PACKAGE"]
    unless_null $P136, vivify_1875
    die "Contextual $*PACKAGE not found"
  vivify_1875:
  vivify_1874:
    set $P3177, $P3173
    unless_null $P3177, vivify_1876
    $P3177 = root_new ['parrot';'Hash']
    set $P3173, $P3177
  vivify_1876:
    set $P3177["compile_time_value"], $P136
.annotate 'line', 1887
    get_hll_global $P133, "GLOBAL"
    nqp_get_package_through_who $P135, $P133, "PAST"
    get_who $P136, $P135
    set $P137, $P136["Var"]
    set $P138, $P3172
    unless_null $P138, vivify_1877
    new $P138, "Undef"
  vivify_1877:
.annotate 'line', 1889
    find_lex $P3178, "$/"
    unless_null $P3178, vivify_1878
    $P3178 = root_new ['parrot';'Hash']
  vivify_1878:
    set $P139, $P3178["sigil"]
    unless_null $P139, vivify_1879
    new $P139, "Undef"
  vivify_1879:
    $P140 = "vivitype"($P139)
.annotate 'line', 1890
    get_hll_global $P141, "GLOBAL"
    nqp_get_package_through_who $P142, $P141, "PAST"
    get_who $P143, $P142
    set $P144, $P143["Op"]
    get_hll_global $P145, "GLOBAL"
    nqp_get_package_through_who $P146, $P145, "PAST"
    get_who $P147, $P146
    set $P149, $P147["Var"]
    $P150 = $P149."new"("self" :named("name"))
    $P151 = $P144."new"($P150, "nqp_decontainerize PP" :named("pirop"))
    set $P152, $P3173
    unless_null $P152, vivify_1880
    new $P152, "Undef"
  vivify_1880:
    $P153 = $P137."new"($P151, $P152, $P138 :named("name"), "attribute_6model" :named("scope"), $P140 :named("viviself"))
.annotate 'line', 1887
    store_lex "$past", $P153
.annotate 'line', 1895
    find_dynamic_lex $P137, "$*IN_DECL"
    unless_null $P137, vivify_1881
    get_hll_global $P135, "GLOBAL"
    get_who $P136, $P135
    set $P137, $P136["$IN_DECL"]
    unless_null $P137, vivify_1882
    die "Contextual $*IN_DECL not found"
  vivify_1882:
  vivify_1881:
    unless $P137, unless_3179
    set $P133, $P137
    goto unless_3179_end
  unless_3179:
    .const 'Sub' $P3181 = "809_1337966799.879" 
    capture_lex $P3181
    $P140 = $P3181()
    set $P133, $P140
  unless_3179_end:
.annotate 'line', 1881
    .return ($P133)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block3180"  :anon :subid("809_1337966799.879") :outer("808_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1895
    .const 'Sub' $P3184 = "810_1337966799.879" 
    capture_lex $P3184
.annotate 'line', 1896
    new $P138, "Undef"
    set $P3182, $P138
    .lex "$attr", $P3182
.annotate 'line', 1895
    set $P139, $P3182
    unless_null $P139, vivify_1883
    new $P139, "Undef"
  vivify_1883:
.annotate 'line', 1897
    find_dynamic_lex $P142, "$*PACKAGE"
    unless_null $P142, vivify_1884
    get_hll_global $P140, "GLOBAL"
    get_who $P141, $P140
    set $P142, $P141["$PACKAGE"]
    unless_null $P142, vivify_1885
    die "Contextual $*PACKAGE not found"
  vivify_1885:
  vivify_1884:
    get_how $P143, $P142
    find_dynamic_lex $P146, "$*PACKAGE"
    unless_null $P146, vivify_1886
    get_hll_global $P144, "GLOBAL"
    get_who $P145, $P144
    set $P146, $P145["$PACKAGE"]
    unless_null $P146, vivify_1887
    die "Contextual $*PACKAGE not found"
  vivify_1887:
  vivify_1886:
    $P147 = $P143."attributes"($P146, 1 :named("local"))
    defined $I103, $P147
    unless $I103, for_undef_1888
    iter $P139, $P147
    new $P151, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P151, loop3187_handler
    push_eh $P151
  loop3187_test:
    unless $P139, loop3187_done
    shift $P149, $P139
  loop3187_redo:
    .const 'Sub' $P3184 = "810_1337966799.879" 
    capture_lex $P3184
    $P3184($P149)
  loop3187_next:
    goto loop3187_test
  loop3187_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P152, exception, 'type'
    eq $P152, .CONTROL_LOOP_NEXT, loop3187_next
    eq $P152, .CONTROL_LOOP_REDO, loop3187_redo
  loop3187_done:
    pop_eh 
  for_undef_1888:
.annotate 'line', 1903
    set $P140, $P3182
    unless_null $P140, vivify_1892
    new $P140, "Undef"
  vivify_1892:
    defined $I103, $P140
    if $I103, if_3188
.annotate 'line', 1909
    find_lex $P142, "$/"
    unless_null $P142, vivify_1893
    new $P142, "Undef"
  vivify_1893:
    $P143 = $P142."CURSOR"()
    new $P144, 'String'
    set $P144, "Attribute '"
    find_lex $P145, "$name"
    unless_null $P145, vivify_1894
    new $P145, "Undef"
  vivify_1894:
    concat $P146, $P144, $P145
    concat $P147, $P146, "' not declared"
    $P149 = $P143."panic"($P147)
.annotate 'line', 1908
    set $P139, $P149
.annotate 'line', 1903
    goto if_3188_end
  if_3188:
.annotate 'line', 1904
    set $P142, $P3182
    unless_null $P142, vivify_1895
    new $P142, "Undef"
  vivify_1895:
    can $I104, $P142, "type"
    if $I104, if_3189
    new $P141, 'Integer'
    set $P141, $I104
    goto if_3189_end
  if_3189:
.annotate 'line', 1905
    find_lex $P143, "$past"
    unless_null $P143, vivify_1896
    new $P143, "Undef"
  vivify_1896:
    set $P144, $P3182
    unless_null $P144, vivify_1897
    new $P144, "Undef"
  vivify_1897:
    $P145 = $P144."type"()
    $P146 = $P143."type"($P145)
.annotate 'line', 1904
    set $P141, $P146
  if_3189_end:
.annotate 'line', 1903
    set $P139, $P141
  if_3188_end:
.annotate 'line', 1895
    .return ($P139)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3183"  :anon :subid("810_1337966799.879") :outer("809_1337966799.879")
    .param pmc param_3185
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1897
    .lex "$_", param_3185
.annotate 'line', 1898
    find_lex $P151, "$_"
    unless_null $P151, vivify_1889
    new $P151, "Undef"
  vivify_1889:
    $S102 = $P151."name"()
    find_lex $P152, "$name"
    unless_null $P152, vivify_1890
    new $P152, "Undef"
  vivify_1890:
    set $S103, $P152
    iseq $I104, $S102, $S103
    if $I104, if_3186
    new $P150, 'Integer'
    set $P150, $I104
    goto if_3186_end
  if_3186:
.annotate 'line', 1899
    find_lex $P153, "$_"
    unless_null $P153, vivify_1891
    new $P153, "Undef"
  vivify_1891:
    store_lex "$attr", $P153
.annotate 'line', 1900
    die 0, .CONTROL_LOOP_LAST
  if_3186_end:
.annotate 'line', 1897
    .return ($P150)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3161"  :anon :subid("807_1337966799.879") :outer("806_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1871
    new $P125, "Undef"
    set $P3163, $P125
    .lex "$global_fallback", $P3163
    find_lex $P3164, "$/"
    unless_null $P3164, vivify_1898
    $P3164 = root_new ['parrot';'Hash']
  vivify_1898:
    set $P127, $P3164["sigil"]
    unless_null $P127, vivify_1899
    new $P127, "Undef"
  vivify_1899:
    set $S101, $P127
    new $P128, 'String'
    set $P128, $S101
    find_lex $P3165, "$/"
    unless_null $P3165, vivify_1900
    $P3165 = root_new ['parrot';'Hash']
  vivify_1900:
    set $P129, $P3165["desigilname"]
    unless_null $P129, vivify_1901
    new $P129, "Undef"
  vivify_1901:
    concat $P131, $P128, $P129
    new $P132, "ResizablePMCArray"
    push $P132, "GLOBAL"
    push $P132, $P131
    find_lex $P133, "$/"
    unless_null $P133, vivify_1902
    new $P133, "Undef"
  vivify_1902:
    $P134 = "lexical_package_lookup"($P132, $P133)
    set $P3163, $P134
.annotate 'line', 1872
    set $P127, $P3163
    unless_null $P127, vivify_1903
    new $P127, "Undef"
  vivify_1903:
    get_hll_global $P128, "GLOBAL"
    nqp_get_package_through_who $P129, $P128, "PAST"
    get_who $P131, $P129
    set $P132, $P131["Op"]
.annotate 'line', 1873
    new $P133, "String"
    assign $P133, "Contextual "
    find_lex $P134, "$/"
    unless_null $P134, vivify_1904
    new $P134, "Undef"
  vivify_1904:
    set $S101, $P134
    concat $P135, $P133, $S101
    concat $P136, $P135, " not found"
    $P137 = $P132."new"($P136, "die" :named("pirop"))
.annotate 'line', 1872
    $P127."viviself"($P137)
.annotate 'line', 1876
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P128, $P127, "PAST"
    get_who $P129, $P128
    set $P131, $P129["Var"]
.annotate 'line', 1877
    find_lex $P3166, "@name"
    unless_null $P3166, vivify_1905
    $P3166 = root_new ['parrot';'ResizablePMCArray']
  vivify_1905:
    $P132 = $P3166."pop"()
    set $S101, $P132
.annotate 'line', 1876
    set $P133, $P3163
    unless_null $P133, vivify_1906
    new $P133, "Undef"
  vivify_1906:
    $P134 = $P131."new"($S101 :named("name"), "contextual" :named("scope"), $P133 :named("viviself"))
    store_lex "$past", $P134
.annotate 'line', 1870
    .return ($P134)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<module>" :anon :subid("289_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3197
    .param pmc param_3198
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1926
    .lex "self", param_3197
    .lex "$/", param_3198
    set $P118, param_3198
    set $P3199, param_3198
    unless_null $P3199, vivify_1919
    $P3199 = root_new ['parrot';'Hash']
  vivify_1919:
    set $P120, $P3199["package_def"]
    unless_null $P120, vivify_1920
    new $P120, "Undef"
  vivify_1920:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<knowhow>" :anon :subid("290_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3201
    .param pmc param_3202
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1927
    .lex "self", param_3201
    .lex "$/", param_3202
    set $P118, param_3202
    set $P3203, param_3202
    unless_null $P3203, vivify_1921
    $P3203 = root_new ['parrot';'Hash']
  vivify_1921:
    set $P120, $P3203["package_def"]
    unless_null $P120, vivify_1922
    new $P120, "Undef"
  vivify_1922:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<class>" :anon :subid("291_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3205
    .param pmc param_3206
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1928
    .lex "self", param_3205
    .lex "$/", param_3206
    set $P118, param_3206
    set $P3207, param_3206
    unless_null $P3207, vivify_1923
    $P3207 = root_new ['parrot';'Hash']
  vivify_1923:
    set $P120, $P3207["package_def"]
    unless_null $P120, vivify_1924
    new $P120, "Undef"
  vivify_1924:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<grammar>" :anon :subid("292_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3209
    .param pmc param_3210
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1929
    .lex "self", param_3209
    .lex "$/", param_3210
    set $P118, param_3210
    set $P3211, param_3210
    unless_null $P3211, vivify_1925
    $P3211 = root_new ['parrot';'Hash']
  vivify_1925:
    set $P120, $P3211["package_def"]
    unless_null $P120, vivify_1926
    new $P120, "Undef"
  vivify_1926:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<role>" :anon :subid("293_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3213
    .param pmc param_3214
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1930
    .lex "self", param_3213
    .lex "$/", param_3214
    set $P118, param_3214
    set $P3215, param_3214
    unless_null $P3215, vivify_1927
    $P3215 = root_new ['parrot';'Hash']
  vivify_1927:
    set $P120, $P3215["package_def"]
    unless_null $P120, vivify_1928
    new $P120, "Undef"
  vivify_1928:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<native>" :anon :subid("294_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3217
    .param pmc param_3218
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1931
    .lex "self", param_3217
    .lex "$/", param_3218
    set $P118, param_3218
    set $P3219, param_3218
    unless_null $P3219, vivify_1929
    $P3219 = root_new ['parrot';'Hash']
  vivify_1929:
    set $P120, $P3219["package_def"]
    unless_null $P120, vivify_1930
    new $P120, "Undef"
  vivify_1930:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<stub>" :anon :subid("295_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3221
    .param pmc param_3222
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1933
    .lex "self", param_3221
    .lex "$/", param_3222
.annotate 'line', 1936
    new $P118, "Undef"
    set $P3223, $P118
    .lex "$HOW", $P3223
.annotate 'line', 1937
    new $P120, "Undef"
    set $P3224, $P120
    .lex "$PACKAGE", $P3224
.annotate 'line', 1936
    find_dynamic_lex $P124, "$*W"
    unless_null $P124, vivify_1931
    get_hll_global $P121, "GLOBAL"
    get_who $P123, $P121
    set $P124, $P123["$W"]
    unless_null $P124, vivify_1932
    die "Contextual $*W not found"
  vivify_1932:
  vivify_1931:
    set $P3225, param_3222
    unless_null $P3225, vivify_1933
    $P3225 = root_new ['parrot';'Hash']
  vivify_1933:
    set $P3226, $P3225["metaclass"]
    unless_null $P3226, vivify_1934
    $P3226 = root_new ['parrot';'Hash']
  vivify_1934:
    set $P125, $P3226["identifier"]
    unless_null $P125, vivify_1935
    new $P125, "Undef"
  vivify_1935:
    $P126 = $P124."find_sym"($P125)
    set $P3223, $P126
.annotate 'line', 1937
    find_dynamic_lex $P124, "$*W"
    unless_null $P124, vivify_1936
    get_hll_global $P121, "GLOBAL"
    get_who $P123, $P121
    set $P124, $P123["$W"]
    unless_null $P124, vivify_1937
    die "Contextual $*W not found"
  vivify_1937:
  vivify_1936:
    set $P125, $P3223
    unless_null $P125, vivify_1938
    new $P125, "Undef"
  vivify_1938:
    set $P3227, param_3222
    unless_null $P3227, vivify_1939
    $P3227 = root_new ['parrot';'Hash']
  vivify_1939:
    set $P126, $P3227["name"]
    unless_null $P126, vivify_1940
    new $P126, "Undef"
  vivify_1940:
    set $S100, $P126
    $P127 = $P124."pkg_create_mo"($P125, $S100 :named("name"))
    set $P3224, $P127
.annotate 'line', 1940
    find_dynamic_lex $P125, "$*SCOPE"
    unless_null $P125, vivify_1941
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$SCOPE"]
    unless_null $P125, vivify_1942
    die "Contextual $*SCOPE not found"
  vivify_1942:
  vivify_1941:
    set $S100, $P125
    iseq $I100, $S100, "our"
    unless $I100, unless_3229
    new $P121, 'Integer'
    set $P121, $I100
    goto unless_3229_end
  unless_3229:
    find_dynamic_lex $P128, "$*SCOPE"
    unless_null $P128, vivify_1943
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["$SCOPE"]
    unless_null $P128, vivify_1944
    die "Contextual $*SCOPE not found"
  vivify_1944:
  vivify_1943:
    set $S101, $P128
    iseq $I101, $S101, ""
    new $P121, 'Integer'
    set $P121, $I101
  unless_3229_end:
    if $P121, if_3228
.annotate 'line', 1946
    find_dynamic_lex $P132, "$*SCOPE"
    unless_null $P132, vivify_1945
    get_hll_global $P129, "GLOBAL"
    get_who $P131, $P129
    set $P132, $P131["$SCOPE"]
    unless_null $P132, vivify_1946
    die "Contextual $*SCOPE not found"
  vivify_1946:
  vivify_1945:
    set $S102, $P132
    iseq $I102, $S102, "my"
    if $I102, if_3238
.annotate 'line', 1953
    set $P133, param_3222
    unless_null $P133, vivify_1947
    new $P133, "Undef"
  vivify_1947:
    $P134 = $P133."CURSOR"()
    find_dynamic_lex $P137, "$*SCOPE"
    unless_null $P137, vivify_1948
    get_hll_global $P135, "GLOBAL"
    get_who $P136, $P135
    set $P137, $P136["$SCOPE"]
    unless_null $P137, vivify_1949
    die "Contextual $*SCOPE not found"
  vivify_1949:
  vivify_1948:
    concat $P138, $P137, " scoped packages are not supported"
    $P134."panic"($P138)
.annotate 'line', 1952
    goto if_3238_end
  if_3238:
.annotate 'line', 1947
    set $P3240, param_3222
    unless_null $P3240, vivify_1950
    $P3240 = root_new ['parrot';'Hash']
  vivify_1950:
    set $P3241, $P3240["name"]
    unless_null $P3241, vivify_1951
    $P3241 = root_new ['parrot';'Hash']
  vivify_1951:
    set $P133, $P3241["identifier"]
    unless_null $P133, vivify_1952
    new $P133, "Undef"
  vivify_1952:
    set $N100, $P133
    set $N101, 1
    isne $I103, $N100, $N101
    unless $I103, if_3239_end
.annotate 'line', 1948
    set $P3242, param_3222
    unless_null $P3242, vivify_1953
    $P3242 = root_new ['parrot';'Hash']
  vivify_1953:
    set $P134, $P3242["name"]
    unless_null $P134, vivify_1954
    new $P134, "Undef"
  vivify_1954:
    $P135 = $P134."CURSOR"()
    $P135."panic"("A my scoped package cannot have a multi-part name yet")
  if_3239_end:
.annotate 'line', 1950
    find_dynamic_lex $P135, "$*W"
    unless_null $P135, vivify_1955
    get_hll_global $P133, "GLOBAL"
    get_who $P134, $P133
    set $P135, $P134["$W"]
    unless_null $P135, vivify_1956
    die "Contextual $*W not found"
  vivify_1956:
  vivify_1955:
    find_dynamic_lex $P138, "$*W"
    unless_null $P138, vivify_1957
    get_hll_global $P136, "GLOBAL"
    get_who $P137, $P136
    set $P138, $P137["$W"]
    unless_null $P138, vivify_1958
    die "Contextual $*W not found"
  vivify_1958:
  vivify_1957:
    $P139 = $P138."cur_lexpad"()
    set $P3243, param_3222
    unless_null $P3243, vivify_1959
    $P3243 = root_new ['parrot';'Hash']
  vivify_1959:
    set $P3244, $P3243["name"]
    unless_null $P3244, vivify_1960
    $P3244 = root_new ['parrot';'Hash']
  vivify_1960:
    set $P3245, $P3244["identifier"]
    unless_null $P3245, vivify_1961
    $P3245 = root_new ['parrot';'ResizablePMCArray']
  vivify_1961:
    set $P140, $P3245[0]
    unless_null $P140, vivify_1962
    new $P140, "Undef"
  vivify_1962:
    set $P141, $P3224
    unless_null $P141, vivify_1963
    new $P141, "Undef"
  vivify_1963:
    $P135."install_lexical_symbol"($P139, $P140, $P141)
  if_3238_end:
.annotate 'line', 1946
    goto if_3228_end
  if_3228:
.annotate 'line', 1941
    find_dynamic_lex $P132, "$*W"
    unless_null $P132, vivify_1964
    get_hll_global $P129, "GLOBAL"
    get_who $P131, $P129
    set $P132, $P131["$W"]
    unless_null $P132, vivify_1965
    die "Contextual $*W not found"
  vivify_1965:
  vivify_1964:
    find_dynamic_lex $P135, "$*OUTERPACKAGE"
    unless_null $P135, vivify_1966
    get_hll_global $P133, "GLOBAL"
    get_who $P134, $P133
    set $P135, $P134["$OUTERPACKAGE"]
    unless_null $P135, vivify_1967
    die "Contextual $*OUTERPACKAGE not found"
  vivify_1967:
  vivify_1966:
    set $P3230, param_3222
    unless_null $P3230, vivify_1968
    $P3230 = root_new ['parrot';'Hash']
  vivify_1968:
    set $P3231, $P3230["name"]
    unless_null $P3231, vivify_1969
    $P3231 = root_new ['parrot';'Hash']
  vivify_1969:
    set $P136, $P3231["identifier"]
    unless_null $P136, vivify_1970
    new $P136, "Undef"
  vivify_1970:
    set $P137, $P3224
    unless_null $P137, vivify_1971
    new $P137, "Undef"
  vivify_1971:
    $P132."install_package_symbol"($P135, $P136, $P137)
.annotate 'line', 1942
    set $P3233, param_3222
    unless_null $P3233, vivify_1972
    $P3233 = root_new ['parrot';'Hash']
  vivify_1972:
    set $P3234, $P3233["name"]
    unless_null $P3234, vivify_1973
    $P3234 = root_new ['parrot';'Hash']
  vivify_1973:
    set $P129, $P3234["identifier"]
    unless_null $P129, vivify_1974
    new $P129, "Undef"
  vivify_1974:
    set $N100, $P129
    set $N101, 1
    iseq $I102, $N100, $N101
    unless $I102, if_3232_end
.annotate 'line', 1943
    find_dynamic_lex $P133, "$*W"
    unless_null $P133, vivify_1975
    get_hll_global $P131, "GLOBAL"
    get_who $P132, $P131
    set $P133, $P132["$W"]
    unless_null $P133, vivify_1976
    die "Contextual $*W not found"
  vivify_1976:
  vivify_1975:
    find_dynamic_lex $P136, "$*W"
    unless_null $P136, vivify_1977
    get_hll_global $P134, "GLOBAL"
    get_who $P135, $P134
    set $P136, $P135["$W"]
    unless_null $P136, vivify_1978
    die "Contextual $*W not found"
  vivify_1978:
  vivify_1977:
    $P137 = $P136."cur_lexpad"()
    set $P3235, param_3222
    unless_null $P3235, vivify_1979
    $P3235 = root_new ['parrot';'Hash']
  vivify_1979:
    set $P3236, $P3235["name"]
    unless_null $P3236, vivify_1980
    $P3236 = root_new ['parrot';'Hash']
  vivify_1980:
    set $P3237, $P3236["identifier"]
    unless_null $P3237, vivify_1981
    $P3237 = root_new ['parrot';'ResizablePMCArray']
  vivify_1981:
    set $P138, $P3237[0]
    unless_null $P138, vivify_1982
    new $P138, "Undef"
  vivify_1982:
    set $P139, $P3224
    unless_null $P139, vivify_1983
    new $P139, "Undef"
  vivify_1983:
    $P133."install_lexical_symbol"($P137, $P138, $P139)
  if_3232_end:
  if_3228_end:
.annotate 'line', 1956
    set $P121, param_3222
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Stmts"]
    $P127 = $P126."new"()
    $P128 = $P121."!make"($P127)
.annotate 'line', 1933
    .return ($P128)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "package_def" :anon :subid("296_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3247
    .param pmc param_3248
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1959
    .const 'Sub' $P3297 = "814_1337966799.879" 
    capture_lex $P3297
    .const 'Sub' $P3290 = "813_1337966799.879" 
    capture_lex $P3290
    .const 'Sub' $P3270 = "811_1337966799.879" 
    capture_lex $P3270
    .lex "self", param_3247
    .lex "$/", param_3248
.annotate 'line', 1961
    $P3250 = root_new ['parrot';'ResizablePMCArray']
    set $P3249, $P3250
    .lex "@ns", $P3249
.annotate 'line', 1962
    new $P118, "Undef"
    set $P3251, $P118
    .lex "$name", $P3251
.annotate 'line', 1963
    new $P120, "Undef"
    set $P3252, $P120
    .lex "$how", $P3252
.annotate 'line', 1966
    new $P121, "Undef"
    set $P3253, $P121
    .lex "$past", $P3253
.annotate 'line', 1961
    set $P3254, param_3248
    unless_null $P3254, vivify_1984
    $P3254 = root_new ['parrot';'Hash']
  vivify_1984:
    set $P3255, $P3254["name"]
    unless_null $P3255, vivify_1985
    $P3255 = root_new ['parrot';'Hash']
  vivify_1985:
    set $P123, $P3255["identifier"]
    unless_null $P123, vivify_1986
    new $P123, "Undef"
  vivify_1986:
    clone $P124, $P123
    set $P3249, $P124
.annotate 'line', 1962
    set $P3256, $P3249
    unless_null $P3256, vivify_1987
    $P3256 = root_new ['parrot';'ResizablePMCArray']
  vivify_1987:
    $P123 = $P3256."pop"()
    set $S100, $P123
    new $P124, 'String'
    set $P124, $S100
    set $P3251, $P124
.annotate 'line', 1963
    find_dynamic_lex $P125, "$*PKGDECL"
    unless_null $P125, vivify_1988
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$PKGDECL"]
    unless_null $P125, vivify_1989
    die "Contextual $*PKGDECL not found"
  vivify_1989:
  vivify_1988:
    find_dynamic_lex $P128, "%*HOW"
    unless_null $P128, vivify_1990
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["%HOW"]
    unless_null $P128, vivify_1991
    die "Contextual %*HOW not found"
  vivify_1991:
  vivify_1990:
    set $P129, $P128[$P125]
    unless_null $P129, vivify_1992
    new $P129, "Undef"
  vivify_1992:
    set $P3252, $P129
.annotate 'line', 1966
    set $P3258, param_3248
    unless_null $P3258, vivify_1993
    $P3258 = root_new ['parrot';'Hash']
  vivify_1993:
    set $P124, $P3258["block"]
    unless_null $P124, vivify_1994
    new $P124, "Undef"
  vivify_1994:
    if $P124, if_3257
    set $P3260, param_3248
    unless_null $P3260, vivify_1995
    $P3260 = root_new ['parrot';'Hash']
  vivify_1995:
    set $P127, $P3260["comp_unit"]
    unless_null $P127, vivify_1996
    new $P127, "Undef"
  vivify_1996:
    $P128 = $P127."ast"()
    set $P123, $P128
    goto if_3257_end
  if_3257:
    set $P3259, param_3248
    unless_null $P3259, vivify_1997
    $P3259 = root_new ['parrot';'Hash']
  vivify_1997:
    set $P125, $P3259["block"]
    unless_null $P125, vivify_1998
    new $P125, "Undef"
  vivify_1998:
    $P126 = $P125."ast"()
    set $P123, $P126
  if_3257_end:
    set $P3253, $P123
.annotate 'line', 1967
    find_dynamic_lex $P126, "$*SCOPE"
    unless_null $P126, vivify_1999
    get_hll_global $P124, "GLOBAL"
    get_who $P125, $P124
    set $P126, $P125["$SCOPE"]
    unless_null $P126, vivify_2000
    die "Contextual $*SCOPE not found"
  vivify_2000:
  vivify_1999:
    set $S100, $P126
    iseq $I100, $S100, "our"
    unless $I100, unless_3262
    new $P123, 'Integer'
    set $P123, $I100
    goto unless_3262_end
  unless_3262:
    find_dynamic_lex $P129, "$*SCOPE"
    unless_null $P129, vivify_2001
    get_hll_global $P127, "GLOBAL"
    get_who $P128, $P127
    set $P129, $P128["$SCOPE"]
    unless_null $P129, vivify_2002
    die "Contextual $*SCOPE not found"
  vivify_2002:
  vivify_2001:
    set $S101, $P129
    iseq $I101, $S101, ""
    new $P123, 'Integer'
    set $P123, $I101
  unless_3262_end:
    unless $P123, if_3261_end
.annotate 'line', 1968
    set $P131, $P3253
    unless_null $P131, vivify_2003
    new $P131, "Undef"
  vivify_2003:
    set $P3263, param_3248
    unless_null $P3263, vivify_2004
    $P3263 = root_new ['parrot';'Hash']
  vivify_2004:
    set $P3264, $P3263["name"]
    unless_null $P3264, vivify_2005
    $P3264 = root_new ['parrot';'Hash']
  vivify_2005:
    set $P132, $P3264["identifier"]
    unless_null $P132, vivify_2006
    new $P132, "Undef"
  vivify_2006:
    $P131."namespace"($P132)
  if_3261_end:
.annotate 'line', 1975
    set $P124, $P3252
    unless_null $P124, vivify_2007
    new $P124, "Undef"
  vivify_2007:
    can $I100, $P124, "parametric"
    if $I100, if_3266
    new $P123, 'Integer'
    set $P123, $I100
    goto if_3266_end
  if_3266:
    set $P125, $P3252
    unless_null $P125, vivify_2008
    new $P125, "Undef"
  vivify_2008:
    set $P126, $P3252
    unless_null $P126, vivify_2009
    new $P126, "Undef"
  vivify_2009:
    $P127 = $P125."parametric"($P126)
    set $P123, $P127
  if_3266_end:
    if $P123, if_3265
.annotate 'line', 1985
    set $P128, $P3253
    unless_null $P128, vivify_2010
    new $P128, "Undef"
  vivify_2010:
    $P128."blocktype"("immediate")
.annotate 'line', 1986
    find_dynamic_lex $P131, "$*W"
    unless_null $P131, vivify_2011
    get_hll_global $P128, "GLOBAL"
    get_who $P129, $P128
    set $P131, $P129["$W"]
    unless_null $P131, vivify_2012
    die "Contextual $*W not found"
  vivify_2012:
  vivify_2011:
    set $P132, $P3253
    unless_null $P132, vivify_2013
    new $P132, "Undef"
  vivify_2013:
    find_dynamic_lex $P135, "$*PACKAGE"
    unless_null $P135, vivify_2014
    get_hll_global $P133, "GLOBAL"
    get_who $P134, $P133
    set $P135, $P134["$PACKAGE"]
    unless_null $P135, vivify_2015
    die "Contextual $*PACKAGE not found"
  vivify_2015:
  vivify_2014:
    $P131."install_lexical_symbol"($P132, "$?PACKAGE", $P135)
.annotate 'line', 1987
    find_dynamic_lex $P131, "$*W"
    unless_null $P131, vivify_2016
    get_hll_global $P128, "GLOBAL"
    get_who $P129, $P128
    set $P131, $P129["$W"]
    unless_null $P131, vivify_2017
    die "Contextual $*W not found"
  vivify_2017:
  vivify_2016:
    set $P132, $P3253
    unless_null $P132, vivify_2018
    new $P132, "Undef"
  vivify_2018:
    find_dynamic_lex $P135, "$*PACKAGE"
    unless_null $P135, vivify_2019
    get_hll_global $P133, "GLOBAL"
    get_who $P134, $P133
    set $P135, $P134["$PACKAGE"]
    unless_null $P135, vivify_2020
    die "Contextual $*PACKAGE not found"
  vivify_2020:
  vivify_2019:
    $P131."install_lexical_symbol"($P132, "$?CLASS", $P135)
.annotate 'line', 1984
    goto if_3265_end
  if_3265:
.annotate 'line', 1976
    set $P128, $P3253
    unless_null $P128, vivify_2021
    new $P128, "Undef"
  vivify_2021:
    $P128."blocktype"("declaration")
.annotate 'line', 1977
    set $P128, $P3253
    unless_null $P128, vivify_2022
    new $P128, "Undef"
  vivify_2022:
    get_hll_global $P129, "GLOBAL"
    nqp_get_package_through_who $P131, $P129, "PAST"
    get_who $P132, $P131
    set $P133, $P132["Var"]
    $P134 = $P133."new"("$?CLASS" :named("name"), "parameter" :named("scope"), 1 :named("directaccess"))
    $P128."unshift"($P134)
.annotate 'line', 1979
    set $P128, $P3253
    unless_null $P128, vivify_2023
    new $P128, "Undef"
  vivify_2023:
    $P128."symbol"("$?CLASS", "lexical" :named("scope"))
.annotate 'line', 1980
    find_dynamic_lex $P131, "$*W"
    unless_null $P131, vivify_2024
    get_hll_global $P128, "GLOBAL"
    get_who $P129, $P128
    set $P131, $P129["$W"]
    unless_null $P131, vivify_2025
    die "Contextual $*W not found"
  vivify_2025:
  vivify_2024:
    find_dynamic_lex $P134, "$*PACKAGE"
    unless_null $P134, vivify_2026
    get_hll_global $P132, "GLOBAL"
    get_who $P133, $P132
    set $P134, $P133["$PACKAGE"]
    unless_null $P134, vivify_2027
    die "Contextual $*PACKAGE not found"
  vivify_2027:
  vivify_2026:
    set $P135, $P3253
    unless_null $P135, vivify_2028
    new $P135, "Undef"
  vivify_2028:
    $P131."pkg_set_body_block"($P134, $P135)
.annotate 'line', 1981
    find_dynamic_lex $P131, "$*W"
    unless_null $P131, vivify_2029
    get_hll_global $P128, "GLOBAL"
    get_who $P129, $P128
    set $P131, $P129["$W"]
    unless_null $P131, vivify_2030
    die "Contextual $*W not found"
  vivify_2030:
  vivify_2029:
    set $P132, $P3253
    unless_null $P132, vivify_2031
    new $P132, "Undef"
  vivify_2031:
    find_dynamic_lex $P135, "$*PACKAGE"
    unless_null $P135, vivify_2032
    get_hll_global $P133, "GLOBAL"
    get_who $P134, $P133
    set $P135, $P134["$PACKAGE"]
    unless_null $P135, vivify_2033
    die "Contextual $*PACKAGE not found"
  vivify_2033:
  vivify_2032:
    $P131."install_lexical_symbol"($P132, "$?PACKAGE", $P135)
.annotate 'line', 1982
    find_dynamic_lex $P131, "$*W"
    unless_null $P131, vivify_2034
    get_hll_global $P128, "GLOBAL"
    get_who $P129, $P128
    set $P131, $P129["$W"]
    unless_null $P131, vivify_2035
    die "Contextual $*W not found"
  vivify_2035:
  vivify_2034:
    set $P132, $P3253
    unless_null $P132, vivify_2036
    new $P132, "Undef"
  vivify_2036:
    find_dynamic_lex $P135, "$*PACKAGE"
    unless_null $P135, vivify_2037
    get_hll_global $P133, "GLOBAL"
    get_who $P134, $P133
    set $P135, $P134["$PACKAGE"]
    unless_null $P135, vivify_2038
    die "Contextual $*PACKAGE not found"
  vivify_2038:
  vivify_2037:
    $P131."install_lexical_symbol"($P132, "$?ROLE", $P135)
  if_3265_end:
.annotate 'line', 1991
    set $P3268, param_3248
    unless_null $P3268, vivify_2039
    $P3268 = root_new ['parrot';'Hash']
  vivify_2039:
    set $P123, $P3268["parent"]
    unless_null $P123, vivify_2040
    new $P123, "Undef"
  vivify_2040:
    if $P123, if_3267
.annotate 'line', 2005
    set $P127, $P3252
    unless_null $P127, vivify_2041
    new $P127, "Undef"
  vivify_2041:
    can $I100, $P127, "set_default_parent"
    unless $I100, if_3288_end
    .const 'Sub' $P3290 = "813_1337966799.879" 
    capture_lex $P3290
    $P3290()
  if_3288_end:
    goto if_3267_end
  if_3267:
.annotate 'line', 1991
    .const 'Sub' $P3270 = "811_1337966799.879" 
    capture_lex $P3270
    $P3270()
  if_3267_end:
.annotate 'line', 2012
    set $P3294, param_3248
    unless_null $P3294, vivify_2069
    $P3294 = root_new ['parrot';'Hash']
  vivify_2069:
    set $P123, $P3294["role"]
    unless_null $P123, vivify_2070
    new $P123, "Undef"
  vivify_2070:
    unless $P123, if_3293_end
.annotate 'line', 2013
    set $P3295, param_3248
    unless_null $P3295, vivify_2071
    $P3295 = root_new ['parrot';'Hash']
  vivify_2071:
    set $P125, $P3295["role"]
    unless_null $P125, vivify_2072
    new $P125, "Undef"
  vivify_2072:
    defined $I100, $P125
    unless $I100, for_undef_2073
    iter $P124, $P125
    new $P131, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P131, loop3312_handler
    push_eh $P131
  loop3312_test:
    unless $P124, loop3312_done
    shift $P126, $P124
  loop3312_redo:
    .const 'Sub' $P3297 = "814_1337966799.879" 
    capture_lex $P3297
    $P3297($P126)
  loop3312_next:
    goto loop3312_test
  loop3312_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P132, exception, 'type'
    eq $P132, .CONTROL_LOOP_NEXT, loop3312_next
    eq $P132, .CONTROL_LOOP_REDO, loop3312_redo
  loop3312_done:
    pop_eh 
  for_undef_2073:
  if_3293_end:
.annotate 'line', 2030
    find_dynamic_lex $P125, "$*W"
    unless_null $P125, vivify_2088
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$W"]
    unless_null $P125, vivify_2089
    die "Contextual $*W not found"
  vivify_2089:
  vivify_2088:
    find_dynamic_lex $P128, "$*PACKAGE"
    unless_null $P128, vivify_2090
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["$PACKAGE"]
    unless_null $P128, vivify_2091
    die "Contextual $*PACKAGE not found"
  vivify_2091:
  vivify_2090:
    $P125."pkg_compose"($P128)
.annotate 'line', 2032
    set $P123, param_3248
    set $P124, $P3253
    unless_null $P124, vivify_2092
    new $P124, "Undef"
  vivify_2092:
    $P125 = $P123."!make"($P124)
.annotate 'line', 1959
    .return ($P125)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3289"  :anon :subid("813_1337966799.879") :outer("296_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2006
    new $P128, "Undef"
    set $P3291, $P128
    .lex "$default", $P3291
    find_dynamic_lex $P133, "$*PKGDECL"
    unless_null $P133, vivify_2042
    get_hll_global $P131, "GLOBAL"
    get_who $P132, $P131
    set $P133, $P132["$PKGDECL"]
    unless_null $P133, vivify_2043
    die "Contextual $*PKGDECL not found"
  vivify_2043:
  vivify_2042:
    set $S100, $P133
    iseq $I101, $S100, "grammar"
    if $I101, if_3292
    new $P135, "ResizablePMCArray"
    push $P135, "NQPMu"
    set $P129, $P135
    goto if_3292_end
  if_3292:
    new $P134, "ResizablePMCArray"
    push $P134, "NQPCursor"
    set $P129, $P134
  if_3292_end:
    set $P3291, $P129
.annotate 'line', 2007
    find_dynamic_lex $P132, "$*W"
    unless_null $P132, vivify_2044
    get_hll_global $P129, "GLOBAL"
    get_who $P131, $P129
    set $P132, $P131["$W"]
    unless_null $P132, vivify_2045
    die "Contextual $*W not found"
  vivify_2045:
  vivify_2044:
    find_dynamic_lex $P135, "$*PACKAGE"
    unless_null $P135, vivify_2046
    get_hll_global $P133, "GLOBAL"
    get_who $P134, $P133
    set $P135, $P134["$PACKAGE"]
    unless_null $P135, vivify_2047
    die "Contextual $*PACKAGE not found"
  vivify_2047:
  vivify_2046:
.annotate 'line', 2008
    find_dynamic_lex $P138, "$*W"
    unless_null $P138, vivify_2048
    get_hll_global $P136, "GLOBAL"
    get_who $P137, $P136
    set $P138, $P137["$W"]
    unless_null $P138, vivify_2049
    die "Contextual $*W not found"
  vivify_2049:
  vivify_2048:
    set $P139, $P3291
    unless_null $P139, vivify_2050
    new $P139, "Undef"
  vivify_2050:
    $P140 = $P138."find_sym"($P139)
    $P141 = $P132."pkg_add_parent_or_role"($P135, "set_default_parent", $P140)
.annotate 'line', 2005
    .return ($P141)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3269"  :anon :subid("811_1337966799.879") :outer("296_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1991
    .const 'Sub' $P3274 = "812_1337966799.879" 
    capture_lex $P3274
.annotate 'line', 1992
    new $P124, "Undef"
    set $P3271, $P124
    .lex "$parent", $P3271
.annotate 'line', 1993
    new $P125, "Undef"
    set $P3272, $P125
    .lex "$parent_found", $P3272
.annotate 'line', 1991
    set $P126, $P3271
    unless_null $P126, vivify_2051
    new $P126, "Undef"
  vivify_2051:
    set $P126, $P3272
    unless_null $P126, vivify_2052
    new $P126, "Undef"
  vivify_2052:
.annotate 'line', 1994
    .const 'Sub' $P3274 = "812_1337966799.879" 
    capture_lex $P3274
    $P3274()
.annotate 'line', 1998
    set $P127, $P3272
    unless_null $P127, vivify_2059
    new $P127, "Undef"
  vivify_2059:
    if $P127, if_3285
.annotate 'line', 2002
    find_lex $P128, "$/"
    unless_null $P128, vivify_2060
    new $P128, "Undef"
  vivify_2060:
    $P129 = $P128."CURSOR"()
    new $P131, "String"
    assign $P131, "Could not find parent class '"
    find_lex $P3286, "$/"
    unless_null $P3286, vivify_2061
    $P3286 = root_new ['parrot';'Hash']
  vivify_2061:
    set $P3287, $P3286["parent"]
    unless_null $P3287, vivify_2062
    $P3287 = root_new ['parrot';'ResizablePMCArray']
  vivify_2062:
    set $P132, $P3287[0]
    unless_null $P132, vivify_2063
    new $P132, "Undef"
  vivify_2063:
    set $S100, $P132
    concat $P133, $P131, $S100
    concat $P134, $P133, "'"
    $P135 = $P129."panic"($P134)
.annotate 'line', 2001
    set $P126, $P135
.annotate 'line', 1998
    goto if_3285_end
  if_3285:
.annotate 'line', 1999
    find_dynamic_lex $P131, "$*W"
    unless_null $P131, vivify_2064
    get_hll_global $P128, "GLOBAL"
    get_who $P129, $P128
    set $P131, $P129["$W"]
    unless_null $P131, vivify_2065
    die "Contextual $*W not found"
  vivify_2065:
  vivify_2064:
    find_dynamic_lex $P134, "$*PACKAGE"
    unless_null $P134, vivify_2066
    get_hll_global $P132, "GLOBAL"
    get_who $P133, $P132
    set $P134, $P133["$PACKAGE"]
    unless_null $P134, vivify_2067
    die "Contextual $*PACKAGE not found"
  vivify_2067:
  vivify_2066:
    set $P135, $P3271
    unless_null $P135, vivify_2068
    new $P135, "Undef"
  vivify_2068:
    $P136 = $P131."pkg_add_parent_or_role"($P134, "add_parent", $P135)
.annotate 'line', 1998
    set $P126, $P136
  if_3285_end:
.annotate 'line', 1991
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block3273"  :anon :subid("812_1337966799.879") :outer("811_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1994
    new $P3280, 'ExceptionHandler'
    set_label $P3280, control_3279
    $P3280."handle_types_except"(.CONTROL_ALL)
    push_eh $P3280
.annotate 'line', 1995
    find_dynamic_lex $P128, "$*W"
    unless_null $P128, vivify_2053
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["$W"]
    unless_null $P128, vivify_2054
    die "Contextual $*W not found"
  vivify_2054:
  vivify_2053:
    find_lex $P3275, "$/"
    unless_null $P3275, vivify_2055
    $P3275 = root_new ['parrot';'Hash']
  vivify_2055:
    set $P3276, $P3275["parent"]
    unless_null $P3276, vivify_2056
    $P3276 = root_new ['parrot';'ResizablePMCArray']
  vivify_2056:
    set $P3277, $P3276[0]
    unless_null $P3277, vivify_2057
    $P3277 = root_new ['parrot';'Hash']
  vivify_2057:
    set $P129, $P3277["identifier"]
    unless_null $P129, vivify_2058
    new $P129, "Undef"
  vivify_2058:
    clone $P131, $P129
    $P132 = $P128."find_sym"($P131)
    store_lex "$parent", $P132
.annotate 'line', 1996
    new $P126, "Float"
    assign $P126, 1
    store_lex "$parent_found", $P126
.annotate 'line', 1994
    pop_eh 
    goto skip_handler_3278
  control_3279:
    peek_exception $P3281
    .local pmc exception 
    .get_results (exception) 
    new $P3283, 'Integer'
    set $P3283, 1
    set exception["handled"], $P3283
    set $I3284, exception["handled"]
    eq $I3284, 1, handled_3282
    rethrow exception
  handled_3282:
    finalize $P3281
    .return (exception)
  skip_handler_3278:
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3296"  :anon :subid("814_1337966799.879") :outer("296_1337966799.879")
    .param pmc param_3300
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2013
    .const 'Sub' $P3302 = "815_1337966799.879" 
    capture_lex $P3302
.annotate 'line', 2014
    new $P127, "Undef"
    set $P3298, $P127
    .lex "$role", $P3298
.annotate 'line', 2015
    new $P128, "Undef"
    set $P3299, $P128
    .lex "$role_found", $P3299
    .lex "$_", param_3300
.annotate 'line', 2013
    set $P129, $P3298
    unless_null $P129, vivify_2074
    new $P129, "Undef"
  vivify_2074:
    set $P129, $P3299
    unless_null $P129, vivify_2075
    new $P129, "Undef"
  vivify_2075:
.annotate 'line', 2016
    .const 'Sub' $P3302 = "815_1337966799.879" 
    capture_lex $P3302
    $P3302()
.annotate 'line', 2020
    set $P131, $P3299
    unless_null $P131, vivify_2080
    new $P131, "Undef"
  vivify_2080:
    if $P131, if_3311
.annotate 'line', 2024
    find_lex $P132, "$/"
    unless_null $P132, vivify_2081
    new $P132, "Undef"
  vivify_2081:
    $P133 = $P132."CURSOR"()
    new $P134, "String"
    assign $P134, "Could not find role '"
    find_lex $P135, "$_"
    unless_null $P135, vivify_2082
    new $P135, "Undef"
  vivify_2082:
    set $S100, $P135
    concat $P136, $P134, $S100
    concat $P137, $P136, "'"
    $P138 = $P133."panic"($P137)
.annotate 'line', 2023
    set $P129, $P138
.annotate 'line', 2020
    goto if_3311_end
  if_3311:
.annotate 'line', 2021
    find_dynamic_lex $P134, "$*W"
    unless_null $P134, vivify_2083
    get_hll_global $P132, "GLOBAL"
    get_who $P133, $P132
    set $P134, $P133["$W"]
    unless_null $P134, vivify_2084
    die "Contextual $*W not found"
  vivify_2084:
  vivify_2083:
    find_dynamic_lex $P137, "$*PACKAGE"
    unless_null $P137, vivify_2085
    get_hll_global $P135, "GLOBAL"
    get_who $P136, $P135
    set $P137, $P136["$PACKAGE"]
    unless_null $P137, vivify_2086
    die "Contextual $*PACKAGE not found"
  vivify_2086:
  vivify_2085:
    set $P138, $P3298
    unless_null $P138, vivify_2087
    new $P138, "Undef"
  vivify_2087:
    $P139 = $P134."pkg_add_parent_or_role"($P137, "add_role", $P138)
.annotate 'line', 2020
    set $P129, $P139
  if_3311_end:
.annotate 'line', 2013
    .return ($P129)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block3301"  :anon :subid("815_1337966799.879") :outer("814_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2016
    new $P3306, 'ExceptionHandler'
    set_label $P3306, control_3305
    $P3306."handle_types_except"(.CONTROL_ALL)
    push_eh $P3306
.annotate 'line', 2017
    find_dynamic_lex $P132, "$*W"
    unless_null $P132, vivify_2076
    get_hll_global $P129, "GLOBAL"
    get_who $P131, $P129
    set $P132, $P131["$W"]
    unless_null $P132, vivify_2077
    die "Contextual $*W not found"
  vivify_2077:
  vivify_2076:
    find_lex $P3303, "$_"
    unless_null $P3303, vivify_2078
    $P3303 = root_new ['parrot';'Hash']
  vivify_2078:
    set $P133, $P3303["identifier"]
    unless_null $P133, vivify_2079
    new $P133, "Undef"
  vivify_2079:
    clone $P134, $P133
    $P135 = $P132."find_sym"($P134)
    store_lex "$role", $P135
.annotate 'line', 2018
    new $P129, "Float"
    assign $P129, 1
    store_lex "$role_found", $P129
.annotate 'line', 2016
    pop_eh 
    goto skip_handler_3304
  control_3305:
    peek_exception $P3307
    .local pmc exception 
    .get_results (exception) 
    new $P3309, 'Integer'
    set $P3309, 1
    set exception["handled"], $P3309
    set $I3310, exception["handled"]
    eq $I3310, 1, handled_3308
    rethrow exception
  handled_3308:
    finalize $P3307
    .return (exception)
  skip_handler_3304:
    .return ($P129)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "scope_declarator:sym<my>" :anon :subid("297_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3314
    .param pmc param_3315
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2035
    .lex "self", param_3314
    .lex "$/", param_3315
    set $P118, param_3315
    set $P3316, param_3315
    unless_null $P3316, vivify_2093
    $P3316 = root_new ['parrot';'Hash']
  vivify_2093:
    set $P120, $P3316["scoped"]
    unless_null $P120, vivify_2094
    new $P120, "Undef"
  vivify_2094:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "scope_declarator:sym<our>" :anon :subid("298_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3318
    .param pmc param_3319
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2036
    .lex "self", param_3318
    .lex "$/", param_3319
    set $P118, param_3319
    set $P3320, param_3319
    unless_null $P3320, vivify_2095
    $P3320 = root_new ['parrot';'Hash']
  vivify_2095:
    set $P120, $P3320["scoped"]
    unless_null $P120, vivify_2096
    new $P120, "Undef"
  vivify_2096:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "scope_declarator:sym<has>" :anon :subid("299_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3322
    .param pmc param_3323
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2037
    .lex "self", param_3322
    .lex "$/", param_3323
    set $P118, param_3323
    set $P3324, param_3323
    unless_null $P3324, vivify_2097
    $P3324 = root_new ['parrot';'Hash']
  vivify_2097:
    set $P120, $P3324["scoped"]
    unless_null $P120, vivify_2098
    new $P120, "Undef"
  vivify_2098:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "scoped" :anon :subid("300_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3326
    .param pmc param_3327
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2039
    .lex "self", param_3326
    .lex "$/", param_3327
.annotate 'line', 2040
    set $P118, param_3327
    set $P3329, param_3327
    unless_null $P3329, vivify_2099
    $P3329 = root_new ['parrot';'Hash']
  vivify_2099:
    set $P121, $P3329["declarator"]
    unless_null $P121, vivify_2100
    new $P121, "Undef"
  vivify_2100:
    if $P121, if_3328
.annotate 'line', 2041
    set $P3332, param_3327
    unless_null $P3332, vivify_2101
    $P3332 = root_new ['parrot';'Hash']
  vivify_2101:
    set $P126, $P3332["multi_declarator"]
    unless_null $P126, vivify_2102
    new $P126, "Undef"
  vivify_2102:
    if $P126, if_3331
.annotate 'line', 2042
    set $P3334, param_3327
    unless_null $P3334, vivify_2103
    $P3334 = root_new ['parrot';'Hash']
  vivify_2103:
    set $P129, $P3334["package_declarator"]
    unless_null $P129, vivify_2104
    new $P129, "Undef"
  vivify_2104:
    $P131 = $P129."ast"()
    set $P125, $P131
.annotate 'line', 2041
    goto if_3331_end
  if_3331:
    set $P3333, param_3327
    unless_null $P3333, vivify_2105
    $P3333 = root_new ['parrot';'Hash']
  vivify_2105:
    set $P127, $P3333["multi_declarator"]
    unless_null $P127, vivify_2106
    new $P127, "Undef"
  vivify_2106:
    $P128 = $P127."ast"()
    set $P125, $P128
  if_3331_end:
    set $P120, $P125
.annotate 'line', 2040
    goto if_3328_end
  if_3328:
    set $P3330, param_3327
    unless_null $P3330, vivify_2107
    $P3330 = root_new ['parrot';'Hash']
  vivify_2107:
    set $P123, $P3330["declarator"]
    unless_null $P123, vivify_2108
    new $P123, "Undef"
  vivify_2108:
    $P124 = $P123."ast"()
    set $P120, $P124
  if_3328_end:
    $P132 = $P118."!make"($P120)
.annotate 'line', 2039
    .return ($P132)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "declarator" :anon :subid("301_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3336
    .param pmc param_3337
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2045
    .lex "self", param_3336
    .lex "$/", param_3337
.annotate 'line', 2046
    set $P118, param_3337
.annotate 'line', 2047
    set $P3339, param_3337
    unless_null $P3339, vivify_2109
    $P3339 = root_new ['parrot';'Hash']
  vivify_2109:
    set $P121, $P3339["routine_declarator"]
    unless_null $P121, vivify_2110
    new $P121, "Undef"
  vivify_2110:
    if $P121, if_3338
.annotate 'line', 2048
    set $P3341, param_3337
    unless_null $P3341, vivify_2111
    $P3341 = root_new ['parrot';'Hash']
  vivify_2111:
    set $P125, $P3341["variable_declarator"]
    unless_null $P125, vivify_2112
    new $P125, "Undef"
  vivify_2112:
    $P126 = $P125."ast"()
    set $P120, $P126
.annotate 'line', 2047
    goto if_3338_end
  if_3338:
    set $P3340, param_3337
    unless_null $P3340, vivify_2113
    $P3340 = root_new ['parrot';'Hash']
  vivify_2113:
    set $P123, $P3340["routine_declarator"]
    unless_null $P123, vivify_2114
    new $P123, "Undef"
  vivify_2114:
    $P124 = $P123."ast"()
    set $P120, $P124
  if_3338_end:
    $P127 = $P118."!make"($P120)
.annotate 'line', 2045
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "multi_declarator:sym<multi>" :anon :subid("302_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3343
    .param pmc param_3344
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2051
    .lex "self", param_3343
    .lex "$/", param_3344
    set $P118, param_3344
    set $P3346, param_3344
    unless_null $P3346, vivify_2115
    $P3346 = root_new ['parrot';'Hash']
  vivify_2115:
    set $P121, $P3346["declarator"]
    unless_null $P121, vivify_2116
    new $P121, "Undef"
  vivify_2116:
    if $P121, if_3345
    set $P3348, param_3344
    unless_null $P3348, vivify_2117
    $P3348 = root_new ['parrot';'Hash']
  vivify_2117:
    set $P125, $P3348["routine_def"]
    unless_null $P125, vivify_2118
    new $P125, "Undef"
  vivify_2118:
    $P126 = $P125."ast"()
    set $P120, $P126
    goto if_3345_end
  if_3345:
    set $P3347, param_3344
    unless_null $P3347, vivify_2119
    $P3347 = root_new ['parrot';'Hash']
  vivify_2119:
    set $P123, $P3347["declarator"]
    unless_null $P123, vivify_2120
    new $P123, "Undef"
  vivify_2120:
    $P124 = $P123."ast"()
    set $P120, $P124
  if_3345_end:
    $P127 = $P118."!make"($P120)
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "multi_declarator:sym<proto>" :anon :subid("303_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3350
    .param pmc param_3351
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2052
    .lex "self", param_3350
    .lex "$/", param_3351
    set $P118, param_3351
    set $P3353, param_3351
    unless_null $P3353, vivify_2121
    $P3353 = root_new ['parrot';'Hash']
  vivify_2121:
    set $P121, $P3353["declarator"]
    unless_null $P121, vivify_2122
    new $P121, "Undef"
  vivify_2122:
    if $P121, if_3352
    set $P3355, param_3351
    unless_null $P3355, vivify_2123
    $P3355 = root_new ['parrot';'Hash']
  vivify_2123:
    set $P125, $P3355["routine_def"]
    unless_null $P125, vivify_2124
    new $P125, "Undef"
  vivify_2124:
    $P126 = $P125."ast"()
    set $P120, $P126
    goto if_3352_end
  if_3352:
    set $P3354, param_3351
    unless_null $P3354, vivify_2125
    $P3354 = root_new ['parrot';'Hash']
  vivify_2125:
    set $P123, $P3354["declarator"]
    unless_null $P123, vivify_2126
    new $P123, "Undef"
  vivify_2126:
    $P124 = $P123."ast"()
    set $P120, $P124
  if_3352_end:
    $P127 = $P118."!make"($P120)
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "multi_declarator:sym<null>" :anon :subid("304_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3357
    .param pmc param_3358
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2053
    .lex "self", param_3357
    .lex "$/", param_3358
    set $P118, param_3358
    set $P3359, param_3358
    unless_null $P3359, vivify_2127
    $P3359 = root_new ['parrot';'Hash']
  vivify_2127:
    set $P120, $P3359["declarator"]
    unless_null $P120, vivify_2128
    new $P120, "Undef"
  vivify_2128:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "variable_declarator" :anon :subid("305_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3361
    .param pmc param_3362
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2056
    .const 'Sub' $P3397 = "817_1337966799.879" 
    capture_lex $P3397
    .const 'Sub' $P3374 = "816_1337966799.879" 
    capture_lex $P3374
    .lex "self", param_3361
    .lex "$/", param_3362
.annotate 'line', 2057
    new $P118, "Undef"
    set $P3363, $P118
    .lex "$past", $P3363
.annotate 'line', 2058
    new $P120, "Undef"
    set $P3364, $P120
    .lex "$sigil", $P3364
.annotate 'line', 2059
    new $P121, "Undef"
    set $P3365, $P121
    .lex "$name", $P3365
.annotate 'line', 2060
    new $P123, "Undef"
    set $P3366, $P123
    .lex "$BLOCK", $P3366
.annotate 'line', 2057
    set $P3367, param_3362
    unless_null $P3367, vivify_2129
    $P3367 = root_new ['parrot';'Hash']
  vivify_2129:
    set $P124, $P3367["variable"]
    unless_null $P124, vivify_2130
    new $P124, "Undef"
  vivify_2130:
    $P125 = $P124."ast"()
    set $P3363, $P125
.annotate 'line', 2058
    set $P3368, param_3362
    unless_null $P3368, vivify_2131
    $P3368 = root_new ['parrot';'Hash']
  vivify_2131:
    set $P3369, $P3368["variable"]
    unless_null $P3369, vivify_2132
    $P3369 = root_new ['parrot';'Hash']
  vivify_2132:
    set $P124, $P3369["sigil"]
    unless_null $P124, vivify_2133
    new $P124, "Undef"
  vivify_2133:
    set $P3364, $P124
.annotate 'line', 2059
    set $P124, $P3363
    unless_null $P124, vivify_2134
    new $P124, "Undef"
  vivify_2134:
    $P125 = $P124."name"()
    set $P3365, $P125
.annotate 'line', 2060
    find_dynamic_lex $P126, "$*W"
    unless_null $P126, vivify_2135
    get_hll_global $P124, "GLOBAL"
    get_who $P125, $P124
    set $P126, $P125["$W"]
    unless_null $P126, vivify_2136
    die "Contextual $*W not found"
  vivify_2136:
  vivify_2135:
    $P127 = $P126."cur_lexpad"()
    set $P3366, $P127
.annotate 'line', 2061
    set $P125, $P3365
    unless_null $P125, vivify_2137
    new $P125, "Undef"
  vivify_2137:
    if $P125, if_3371
    set $P124, $P125
    goto if_3371_end
  if_3371:
    set $P126, $P3366
    unless_null $P126, vivify_2138
    new $P126, "Undef"
  vivify_2138:
    set $P127, $P3365
    unless_null $P127, vivify_2139
    new $P127, "Undef"
  vivify_2139:
    $P128 = $P126."symbol"($P127)
    set $P124, $P128
  if_3371_end:
    unless $P124, if_3370_end
.annotate 'line', 2062
    set $P129, param_3362
    unless_null $P129, vivify_2140
    new $P129, "Undef"
  vivify_2140:
    $P131 = $P129."CURSOR"()
    set $P132, $P3365
    unless_null $P132, vivify_2141
    new $P132, "Undef"
  vivify_2141:
    $P131."panic"("Redeclaration of symbol ", $P132)
  if_3370_end:
.annotate 'line', 2064
    find_dynamic_lex $P126, "$*SCOPE"
    unless_null $P126, vivify_2142
    get_hll_global $P124, "GLOBAL"
    get_who $P125, $P124
    set $P126, $P125["$SCOPE"]
    unless_null $P126, vivify_2143
    die "Contextual $*SCOPE not found"
  vivify_2143:
  vivify_2142:
    set $S100, $P126
    iseq $I100, $S100, "has"
    if $I100, if_3372
.annotate 'line', 2084
    find_dynamic_lex $P129, "$*SCOPE"
    unless_null $P129, vivify_2144
    get_hll_global $P127, "GLOBAL"
    get_who $P128, $P127
    set $P129, $P128["$SCOPE"]
    unless_null $P129, vivify_2145
    die "Contextual $*SCOPE not found"
  vivify_2145:
  vivify_2144:
    set $S101, $P129
    iseq $I101, $S101, "our"
    if $I101, if_3390
.annotate 'line', 2094
    set $P3392, $P3366
    unless_null $P3392, vivify_2146
    $P3392 = root_new ['parrot';'ResizablePMCArray']
  vivify_2146:
    set $P131, $P3392[0]
    unless_null $P131, vivify_2147
    new $P131, "Undef"
  vivify_2147:
    get_hll_global $P133, "GLOBAL"
    nqp_get_package_through_who $P134, $P133, "PAST"
    get_who $P135, $P134
    set $P136, $P135["Var"]
    set $P137, $P3365
    unless_null $P137, vivify_2148
    new $P137, "Undef"
  vivify_2148:
.annotate 'line', 2096
    set $P138, $P3364
    unless_null $P138, vivify_2149
    new $P138, "Undef"
  vivify_2149:
    $P139 = "vivitype"($P138)
.annotate 'line', 2094
    set $P140, param_3362
    unless_null $P140, vivify_2150
    new $P140, "Undef"
  vivify_2150:
    $P141 = $P136."new"($P137 :named("name"), "lexical" :named("scope"), 1 :named("isdecl"), 1 :named("directaccess"), 1 :named("lvalue"), $P139 :named("viviself"), $P140 :named("node"))
    $P131."push"($P141)
.annotate 'line', 2099
    set $P131, $P3366
    unless_null $P131, vivify_2151
    new $P131, "Undef"
  vivify_2151:
    set $P133, $P3365
    unless_null $P133, vivify_2152
    new $P133, "Undef"
  vivify_2152:
    $P131."symbol"($P133, "lexical" :named("scope"))
.annotate 'line', 2093
    goto if_3390_end
  if_3390:
.annotate 'line', 2088
    set $P3391, param_3362
    unless_null $P3391, vivify_2153
    $P3391 = root_new ['parrot';'Hash']
  vivify_2153:
    set $P131, $P3391["variable"]
    unless_null $P131, vivify_2154
    new $P131, "Undef"
  vivify_2154:
    set $S102, $P131
    new $P133, 'String'
    set $P133, $S102
    set $P3365, $P133
.annotate 'line', 2089
    set $P131, $P3365
    unless_null $P131, vivify_2155
    new $P131, "Undef"
  vivify_2155:
    new $P133, "ResizablePMCArray"
    push $P133, $P131
    set $P134, param_3362
    unless_null $P134, vivify_2156
    new $P134, "Undef"
  vivify_2156:
    $P135 = "lexical_package_lookup"($P133, $P134)
    set $P3363, $P135
.annotate 'line', 2090
    set $P131, $P3363
    unless_null $P131, vivify_2157
    new $P131, "Undef"
  vivify_2157:
    set $P133, $P3364
    unless_null $P133, vivify_2158
    new $P133, "Undef"
  vivify_2158:
    $P134 = "vivitype"($P133)
    $P131."viviself"($P134)
.annotate 'line', 2091
    set $P131, $P3366
    unless_null $P131, vivify_2159
    new $P131, "Undef"
  vivify_2159:
    set $P133, $P3365
    unless_null $P133, vivify_2160
    new $P133, "Undef"
  vivify_2160:
    $P131."symbol"($P133, "package" :named("scope"))
  if_3390_end:
.annotate 'line', 2084
    goto if_3372_end
  if_3372:
.annotate 'line', 2064
    .const 'Sub' $P3374 = "816_1337966799.879" 
    capture_lex $P3374
    $P3374()
  if_3372_end:
.annotate 'line', 2103
    set $P124, param_3362
    set $P125, $P3363
    unless_null $P125, vivify_2191
    new $P125, "Undef"
  vivify_2191:
    $P124."!make"($P125)
.annotate 'line', 2105
    set $P3394, param_3362
    unless_null $P3394, vivify_2192
    $P3394 = root_new ['parrot';'Hash']
  vivify_2192:
    set $P125, $P3394["trait"]
    unless_null $P125, vivify_2193
    new $P125, "Undef"
  vivify_2193:
    if $P125, if_3393
    set $P124, $P125
    goto if_3393_end
  if_3393:
.annotate 'line', 2106
    set $P3395, param_3362
    unless_null $P3395, vivify_2194
    $P3395 = root_new ['parrot';'Hash']
  vivify_2194:
    set $P127, $P3395["trait"]
    unless_null $P127, vivify_2195
    new $P127, "Undef"
  vivify_2195:
    defined $I100, $P127
    unless $I100, for_undef_2196
    iter $P126, $P127
    new $P129, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P129, loop3399_handler
    push_eh $P129
  loop3399_test:
    unless $P126, loop3399_done
    shift $P128, $P126
  loop3399_redo:
    .const 'Sub' $P3397 = "817_1337966799.879" 
    capture_lex $P3397
    $P3397($P128)
  loop3399_next:
    goto loop3399_test
  loop3399_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P131, exception, 'type'
    eq $P131, .CONTROL_LOOP_NEXT, loop3399_next
    eq $P131, .CONTROL_LOOP_REDO, loop3399_redo
  loop3399_done:
    pop_eh 
  for_undef_2196:
.annotate 'line', 2105
    set $P124, $P126
  if_3393_end:
.annotate 'line', 2056
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3373"  :anon :subid("816_1337966799.879") :outer("305_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2071
    $P3376 = root_new ['parrot';'Hash']
    set $P3375, $P3376
    .lex "%lit_args", $P3375
.annotate 'line', 2072
    $P3378 = root_new ['parrot';'Hash']
    set $P3377, $P3378
    .lex "%obj_args", $P3377
.annotate 'line', 2066
    find_dynamic_lex $P133, "$*PKGDECL"
    unless_null $P133, vivify_2161
    get_hll_global $P131, "GLOBAL"
    get_who $P132, $P131
    set $P133, $P132["$PKGDECL"]
    unless_null $P133, vivify_2162
    die "Contextual $*PKGDECL not found"
  vivify_2162:
  vivify_2161:
    concat $P134, $P133, "-attr"
    find_dynamic_lex $P129, "%*HOW"
    unless_null $P129, vivify_2163
    get_hll_global $P127, "GLOBAL"
    get_who $P128, $P127
    set $P129, $P128["%HOW"]
    unless_null $P129, vivify_2164
    die "Contextual %*HOW not found"
  vivify_2164:
  vivify_2163:
    exists $I101, $P129[$P134]
    if $I101, unless_3379_end
.annotate 'line', 2067
    find_lex $P135, "$/"
    unless_null $P135, vivify_2165
    new $P135, "Undef"
  vivify_2165:
    $P136 = $P135."CURSOR"()
    find_dynamic_lex $P139, "$*PKGDECL"
    unless_null $P139, vivify_2166
    get_hll_global $P137, "GLOBAL"
    get_who $P138, $P137
    set $P139, $P138["$PKGDECL"]
    unless_null $P139, vivify_2167
    die "Contextual $*PKGDECL not found"
  vivify_2167:
  vivify_2166:
    concat $P140, $P139, " packages do not support attributes"
    $P136."panic"($P140)
  unless_3379_end:
.annotate 'line', 2064
    set $P3380, $P3375
    unless_null $P3380, vivify_2168
    $P3380 = root_new ['parrot';'Hash']
  vivify_2168:
    set $P3381, $P3377
    unless_null $P3381, vivify_2169
    $P3381 = root_new ['parrot';'Hash']
  vivify_2169:
.annotate 'line', 2073
    find_lex $P127, "$name"
    unless_null $P127, vivify_2170
    new $P127, "Undef"
  vivify_2170:
    set $P3382, $P3375
    unless_null $P3382, vivify_2171
    $P3382 = root_new ['parrot';'Hash']
    set $P3375, $P3382
  vivify_2171:
    set $P3382["name"], $P127
.annotate 'line', 2074
    find_lex $P3384, "$/"
    unless_null $P3384, vivify_2172
    $P3384 = root_new ['parrot';'Hash']
  vivify_2172:
    set $P127, $P3384["typename"]
    unless_null $P127, vivify_2173
    new $P127, "Undef"
  vivify_2173:
    unless $P127, if_3383_end
.annotate 'line', 2075
    find_dynamic_lex $P131, "$*W"
    unless_null $P131, vivify_2174
    get_hll_global $P128, "GLOBAL"
    get_who $P129, $P128
    set $P131, $P129["$W"]
    unless_null $P131, vivify_2175
    die "Contextual $*W not found"
  vivify_2175:
  vivify_2174:
    find_lex $P3385, "$/"
    unless_null $P3385, vivify_2176
    $P3385 = root_new ['parrot';'Hash']
  vivify_2176:
    set $P3386, $P3385["typename"]
    unless_null $P3386, vivify_2177
    $P3386 = root_new ['parrot';'ResizablePMCArray']
  vivify_2177:
    set $P132, $P3386[0]
    unless_null $P132, vivify_2178
    new $P132, "Undef"
  vivify_2178:
    set $S101, $P132
    new $P133, "ResizablePMCArray"
    push $P133, $S101
    $P134 = $P131."find_sym"($P133)
    set $P3387, $P3377
    unless_null $P3387, vivify_2179
    $P3387 = root_new ['parrot';'Hash']
    set $P3377, $P3387
  vivify_2179:
    set $P3387["type"], $P134
  if_3383_end:
.annotate 'line', 2079
    find_dynamic_lex $P129, "$*W"
    unless_null $P129, vivify_2180
    get_hll_global $P127, "GLOBAL"
    get_who $P128, $P127
    set $P129, $P128["$W"]
    unless_null $P129, vivify_2181
    die "Contextual $*W not found"
  vivify_2181:
  vivify_2180:
    find_dynamic_lex $P133, "$*PACKAGE"
    unless_null $P133, vivify_2182
    get_hll_global $P131, "GLOBAL"
    get_who $P132, $P131
    set $P133, $P132["$PACKAGE"]
    unless_null $P133, vivify_2183
    die "Contextual $*PACKAGE not found"
  vivify_2183:
  vivify_2182:
    find_dynamic_lex $P136, "$*PKGDECL"
    unless_null $P136, vivify_2184
    get_hll_global $P134, "GLOBAL"
    get_who $P135, $P134
    set $P136, $P135["$PKGDECL"]
    unless_null $P136, vivify_2185
    die "Contextual $*PKGDECL not found"
  vivify_2185:
  vivify_2184:
    concat $P137, $P136, "-attr"
    find_dynamic_lex $P140, "%*HOW"
    unless_null $P140, vivify_2186
    get_hll_global $P138, "GLOBAL"
    get_who $P139, $P138
    set $P140, $P139["%HOW"]
    unless_null $P140, vivify_2187
    die "Contextual %*HOW not found"
  vivify_2187:
  vivify_2186:
    set $P141, $P140[$P137]
    unless_null $P141, vivify_2188
    new $P141, "Undef"
  vivify_2188:
    set $P3388, $P3375
    unless_null $P3388, vivify_2189
    $P3388 = root_new ['parrot';'Hash']
  vivify_2189:
    set $P3389, $P3377
    unless_null $P3389, vivify_2190
    $P3389 = root_new ['parrot';'Hash']
  vivify_2190:
    $P129."pkg_add_attribute"($P133, $P141, $P3388, $P3389)
.annotate 'line', 2082
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P128, $P127, "PAST"
    get_who $P129, $P128
    set $P131, $P129["Stmts"]
    $P132 = $P131."new"()
    store_lex "$past", $P132
.annotate 'line', 2064
    .return ($P132)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3396"  :anon :subid("817_1337966799.879") :outer("305_1337966799.879")
    .param pmc param_3398
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2106
    .lex "$_", param_3398
    find_lex $P129, "$_"
    unless_null $P129, vivify_2197
    new $P129, "Undef"
  vivify_2197:
    $P131 = $P129."ast"()
    find_lex $P132, "$/"
    unless_null $P132, vivify_2198
    new $P132, "Undef"
  vivify_2198:
    $P133 = $P131($P132)
    .return ($P133)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "routine_declarator:sym<sub>" :anon :subid("306_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3401
    .param pmc param_3402
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2111
    .lex "self", param_3401
    .lex "$/", param_3402
    set $P118, param_3402
    set $P3403, param_3402
    unless_null $P3403, vivify_2199
    $P3403 = root_new ['parrot';'Hash']
  vivify_2199:
    set $P120, $P3403["routine_def"]
    unless_null $P120, vivify_2200
    new $P120, "Undef"
  vivify_2200:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "routine_declarator:sym<method>" :anon :subid("307_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3405
    .param pmc param_3406
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2112
    .lex "self", param_3405
    .lex "$/", param_3406
    set $P118, param_3406
    set $P3407, param_3406
    unless_null $P3407, vivify_2201
    $P3407 = root_new ['parrot';'Hash']
  vivify_2201:
    set $P120, $P3407["method_def"]
    unless_null $P120, vivify_2202
    new $P120, "Undef"
  vivify_2202:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "routine_def" :anon :subid("308_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3409
    .param pmc param_3410
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2114
    .const 'Sub' $P3482 = "824_1337966799.879" 
    capture_lex $P3482
    .const 'Sub' $P3420 = "818_1337966799.879" 
    capture_lex $P3420
    .lex "self", param_3409
    .lex "$/", param_3410
.annotate 'line', 2117
    new $P118, "Undef"
    set $P3411, $P118
    .lex "$past", $P3411
.annotate 'line', 2128
    new $P120, "Undef"
    set $P3412, $P120
    .lex "$block", $P3412
.annotate 'line', 2114
    set $P121, $P3411
    unless_null $P121, vivify_2203
    new $P121, "Undef"
  vivify_2203:
.annotate 'line', 2118
    set $P3414, param_3410
    unless_null $P3414, vivify_2204
    $P3414 = root_new ['parrot';'Hash']
  vivify_2204:
    set $P121, $P3414["onlystar"]
    unless_null $P121, vivify_2205
    new $P121, "Undef"
  vivify_2205:
    if $P121, if_3413
.annotate 'line', 2122
    set $P3415, param_3410
    unless_null $P3415, vivify_2206
    $P3415 = root_new ['parrot';'Hash']
  vivify_2206:
    set $P123, $P3415["blockoid"]
    unless_null $P123, vivify_2207
    new $P123, "Undef"
  vivify_2207:
    $P124 = $P123."ast"()
    set $P3411, $P124
.annotate 'line', 2123
    set $P123, $P3411
    unless_null $P123, vivify_2208
    new $P123, "Undef"
  vivify_2208:
    $P123."blocktype"("declaration")
.annotate 'line', 2124
    find_dynamic_lex $P125, "$*RETURN_USED"
    unless_null $P125, vivify_2209
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$RETURN_USED"]
    unless_null $P125, vivify_2210
    die "Contextual $*RETURN_USED not found"
  vivify_2210:
  vivify_2209:
    unless $P125, if_3416_end
.annotate 'line', 2125
    set $P126, $P3411
    unless_null $P126, vivify_2211
    new $P126, "Undef"
  vivify_2211:
    $P126."control"("return_pir")
  if_3416_end:
.annotate 'line', 2121
    goto if_3413_end
  if_3413:
.annotate 'line', 2119
    $P123 = "only_star_block"()
    set $P3411, $P123
  if_3413_end:
.annotate 'line', 2128
    set $P121, $P3411
    unless_null $P121, vivify_2212
    new $P121, "Undef"
  vivify_2212:
    set $P3412, $P121
.annotate 'line', 2130
    set $P3418, param_3410
    unless_null $P3418, vivify_2213
    $P3418 = root_new ['parrot';'Hash']
  vivify_2213:
    set $P121, $P3418["deflongname"]
    unless_null $P121, vivify_2214
    new $P121, "Undef"
  vivify_2214:
    if $P121, if_3417
.annotate 'line', 2233
    find_dynamic_lex $P127, "$*W"
    unless_null $P127, vivify_2215
    get_hll_global $P125, "GLOBAL"
    get_who $P126, $P125
    set $P127, $P126["$W"]
    unless_null $P127, vivify_2216
    die "Contextual $*W not found"
  vivify_2216:
  vivify_2215:
    $P128 = $P127."is_precompilation_mode"()
    unless $P128, if_3476_end
.annotate 'line', 2234
    find_dynamic_lex $P132, "$*W"
    unless_null $P132, vivify_2217
    get_hll_global $P129, "GLOBAL"
    get_who $P131, $P129
    set $P132, $P131["$W"]
    unless_null $P132, vivify_2218
    die "Contextual $*W not found"
  vivify_2218:
  vivify_2217:
    set $P133, $P3411
    unless_null $P133, vivify_2219
    new $P133, "Undef"
  vivify_2219:
    $P132."create_code"($P133, "<anon>", 0)
  if_3476_end:
.annotate 'line', 2232
    goto if_3417_end
  if_3417:
.annotate 'line', 2130
    .const 'Sub' $P3420 = "818_1337966799.879" 
    capture_lex $P3420
    $P3420()
  if_3417_end:
.annotate 'line', 2239
    set $P121, $P3412
    unless_null $P121, vivify_2324
    new $P121, "Undef"
  vivify_2324:
    set $P3477, $P3411
    unless_null $P3477, vivify_2325
    $P3477 = root_new ['parrot';'Hash']
    set $P3411, $P3477
  vivify_2325:
    set $P3477["block_past"], $P121
.annotate 'line', 2240
    set $P3479, param_3410
    unless_null $P3479, vivify_2326
    $P3479 = root_new ['parrot';'Hash']
  vivify_2326:
    set $P121, $P3479["trait"]
    unless_null $P121, vivify_2327
    new $P121, "Undef"
  vivify_2327:
    unless $P121, if_3478_end
.annotate 'line', 2241
    set $P3480, param_3410
    unless_null $P3480, vivify_2328
    $P3480 = root_new ['parrot';'Hash']
  vivify_2328:
    set $P124, $P3480["trait"]
    unless_null $P124, vivify_2329
    new $P124, "Undef"
  vivify_2329:
    defined $I100, $P124
    unless $I100, for_undef_2330
    iter $P123, $P124
    new $P126, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P126, loop3484_handler
    push_eh $P126
  loop3484_test:
    unless $P123, loop3484_done
    shift $P125, $P123
  loop3484_redo:
    .const 'Sub' $P3482 = "824_1337966799.879" 
    capture_lex $P3482
    $P3482($P125)
  loop3484_next:
    goto loop3484_test
  loop3484_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P127, exception, 'type'
    eq $P127, .CONTROL_LOOP_NEXT, loop3484_next
    eq $P127, .CONTROL_LOOP_REDO, loop3484_redo
  loop3484_done:
    pop_eh 
  for_undef_2330:
  if_3478_end:
.annotate 'line', 2244
    set $P121, param_3410
    set $P123, $P3411
    unless_null $P123, vivify_2333
    new $P123, "Undef"
  vivify_2333:
    $P124 = $P121."!make"($P123)
.annotate 'line', 2114
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3419"  :anon :subid("818_1337966799.879") :outer("308_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2130
    .const 'Sub' $P3469 = "823_1337966799.879" 
    capture_lex $P3469
    .const 'Sub' $P3462 = "822_1337966799.879" 
    capture_lex $P3462
    .const 'Sub' $P3431 = "819_1337966799.879" 
    capture_lex $P3431
.annotate 'line', 2131
    new $P123, "Undef"
    set $P3421, $P123
    .lex "$name", $P3421
    find_lex $P3422, "$/"
    unless_null $P3422, vivify_2220
    $P3422 = root_new ['parrot';'Hash']
  vivify_2220:
    set $P3423, $P3422["sigil"]
    unless_null $P3423, vivify_2221
    $P3423 = root_new ['parrot';'ResizablePMCArray']
  vivify_2221:
    set $P124, $P3423[0]
    unless_null $P124, vivify_2222
    new $P124, "Undef"
  vivify_2222:
    set $S100, $P124
    new $P125, 'String'
    set $P125, $S100
    find_lex $P3424, "$/"
    unless_null $P3424, vivify_2223
    $P3424 = root_new ['parrot';'Hash']
  vivify_2223:
    set $P3425, $P3424["deflongname"]
    unless_null $P3425, vivify_2224
    $P3425 = root_new ['parrot';'ResizablePMCArray']
  vivify_2224:
    set $P126, $P3425[0]
    unless_null $P126, vivify_2225
    new $P126, "Undef"
  vivify_2225:
    $S101 = $P126."ast"()
    concat $P127, $P125, $S101
    set $P3421, $P127
.annotate 'line', 2132
    find_lex $P124, "$past"
    unless_null $P124, vivify_2226
    new $P124, "Undef"
  vivify_2226:
    set $P125, $P3421
    unless_null $P125, vivify_2227
    new $P125, "Undef"
  vivify_2227:
    $P124."name"($P125)
.annotate 'line', 2133
    find_dynamic_lex $P128, "$*SCOPE"
    unless_null $P128, vivify_2228
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["$SCOPE"]
    unless_null $P128, vivify_2229
    die "Contextual $*SCOPE not found"
  vivify_2229:
  vivify_2228:
    set $S100, $P128
    iseq $I100, $S100, ""
    unless $I100, unless_3428
    new $P125, 'Integer'
    set $P125, $I100
    goto unless_3428_end
  unless_3428:
    find_dynamic_lex $P132, "$*SCOPE"
    unless_null $P132, vivify_2230
    get_hll_global $P129, "GLOBAL"
    get_who $P131, $P129
    set $P132, $P131["$SCOPE"]
    unless_null $P132, vivify_2231
    die "Contextual $*SCOPE not found"
  vivify_2231:
  vivify_2230:
    set $S101, $P132
    iseq $I101, $S101, "my"
    new $P125, 'Integer'
    set $P125, $I101
  unless_3428_end:
    unless $P125, unless_3427
    set $P124, $P125
    goto unless_3427_end
  unless_3427:
    find_dynamic_lex $P135, "$*SCOPE"
    unless_null $P135, vivify_2232
    get_hll_global $P133, "GLOBAL"
    get_who $P134, $P133
    set $P135, $P134["$SCOPE"]
    unless_null $P135, vivify_2233
    die "Contextual $*SCOPE not found"
  vivify_2233:
  vivify_2232:
    set $S102, $P135
    iseq $I102, $S102, "our"
    new $P124, 'Integer'
    set $P124, $I102
  unless_3427_end:
    if $P124, if_3426
.annotate 'line', 2224
    find_lex $P136, "$/"
    unless_null $P136, vivify_2234
    new $P136, "Undef"
  vivify_2234:
    $P137 = $P136."CURSOR"()
    find_dynamic_lex $P140, "$*SCOPE"
    unless_null $P140, vivify_2235
    get_hll_global $P138, "GLOBAL"
    get_who $P139, $P138
    set $P140, $P139["$SCOPE"]
    unless_null $P140, vivify_2236
    die "Contextual $*SCOPE not found"
  vivify_2236:
  vivify_2235:
    concat $P141, $P140, " scoped routines are not supported yet"
    $P137."panic"($P141)
.annotate 'line', 2223
    goto if_3426_end
  if_3426:
.annotate 'line', 2134
    find_dynamic_lex $P138, "$*MULTINESS"
    unless_null $P138, vivify_2237
    get_hll_global $P136, "GLOBAL"
    get_who $P137, $P136
    set $P138, $P137["$MULTINESS"]
    unless_null $P138, vivify_2238
    die "Contextual $*MULTINESS not found"
  vivify_2238:
  vivify_2237:
    set $S103, $P138
    iseq $I103, $S103, "multi"
    if $I103, if_3429
.annotate 'line', 2186
    find_dynamic_lex $P143, "$*MULTINESS"
    unless_null $P143, vivify_2239
    get_hll_global $P140, "GLOBAL"
    get_who $P142, $P140
    set $P143, $P142["$MULTINESS"]
    unless_null $P143, vivify_2240
    die "Contextual $*MULTINESS not found"
  vivify_2240:
  vivify_2239:
    set $S104, $P143
    iseq $I104, $S104, "proto"
    if $I104, if_3460
.annotate 'line', 2205
    .const 'Sub' $P3469 = "823_1337966799.879" 
    capture_lex $P3469
    $P3469()
    goto if_3460_end
  if_3460:
.annotate 'line', 2186
    .const 'Sub' $P3462 = "822_1337966799.879" 
    capture_lex $P3462
    $P3462()
  if_3460_end:
    goto if_3429_end
  if_3429:
.annotate 'line', 2134
    .const 'Sub' $P3431 = "819_1337966799.879" 
    capture_lex $P3431
    $P3431()
  if_3429_end:
.annotate 'line', 2221
    get_hll_global $P136, "GLOBAL"
    nqp_get_package_through_who $P137, $P136, "PAST"
    get_who $P138, $P137
    set $P139, $P138["Var"]
    set $P140, $P3421
    unless_null $P140, vivify_2319
    new $P140, "Undef"
  vivify_2319:
    $P141 = $P139."new"($P140 :named("name"))
    store_lex "$past", $P141
  if_3426_end:
.annotate 'line', 2228
    set $P126, $P3421
    unless_null $P126, vivify_2320
    new $P126, "Undef"
  vivify_2320:
    set $S100, $P126
    iseq $I100, $S100, "MAIN"
    if $I100, if_3475
    new $P125, 'Integer'
    set $P125, $I100
    goto if_3475_end
  if_3475:
    find_dynamic_lex $P129, "$*MULTINESS"
    unless_null $P129, vivify_2321
    get_hll_global $P127, "GLOBAL"
    get_who $P128, $P127
    set $P129, $P128["$MULTINESS"]
    unless_null $P129, vivify_2322
    die "Contextual $*MULTINESS not found"
  vivify_2322:
  vivify_2321:
    set $S101, $P129
    isne $I101, $S101, "multi"
    new $P125, 'Integer'
    set $P125, $I101
  if_3475_end:
    if $P125, if_3474
    set $P124, $P125
    goto if_3474_end
  if_3474:
.annotate 'line', 2229
    find_lex $P131, "$block"
    unless_null $P131, vivify_2323
    new $P131, "Undef"
  vivify_2323:
    store_dynamic_lex "$*MAIN_SUB", $P131
.annotate 'line', 2228
    set $P124, $P131
  if_3474_end:
.annotate 'line', 2130
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3468"  :anon :subid("823_1337966799.879") :outer("818_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2206
    new $P146, "Undef"
    set $P3470, $P146
    .lex "$BLOCK", $P3470
    find_dynamic_lex $P151, "$*W"
    unless_null $P151, vivify_2241
    get_hll_global $P149, "GLOBAL"
    get_who $P150, $P149
    set $P151, $P150["$W"]
    unless_null $P151, vivify_2242
    die "Contextual $*W not found"
  vivify_2242:
  vivify_2241:
    $P152 = $P151."cur_lexpad"()
    set $P3470, $P152
.annotate 'line', 2207
    set $P3471, $P3470
    unless_null $P3471, vivify_2243
    $P3471 = root_new ['parrot';'ResizablePMCArray']
  vivify_2243:
    set $P149, $P3471[0]
    unless_null $P149, vivify_2244
    new $P149, "Undef"
  vivify_2244:
    get_hll_global $P150, "GLOBAL"
    nqp_get_package_through_who $P151, $P150, "PAST"
    get_who $P152, $P151
    set $P153, $P152["Var"]
    find_lex $P154, "$name"
    unless_null $P154, vivify_2245
    new $P154, "Undef"
  vivify_2245:
    find_lex $P155, "$past"
    unless_null $P155, vivify_2246
    new $P155, "Undef"
  vivify_2246:
    $P156 = $P153."new"($P154 :named("name"), 1 :named("isdecl"), 1 :named("directaccess"), $P155 :named("viviself"), "lexical" :named("scope"))
    $P149."push"($P156)
.annotate 'line', 2209
    set $P149, $P3470
    unless_null $P149, vivify_2247
    new $P149, "Undef"
  vivify_2247:
    find_lex $P150, "$name"
    unless_null $P150, vivify_2248
    new $P150, "Undef"
  vivify_2248:
    $P149."symbol"($P150, "lexical" :named("scope"))
.annotate 'line', 2210
    find_dynamic_lex $P152, "$*SCOPE"
    unless_null $P152, vivify_2249
    get_hll_global $P150, "GLOBAL"
    get_who $P151, $P150
    set $P152, $P151["$SCOPE"]
    unless_null $P152, vivify_2250
    die "Contextual $*SCOPE not found"
  vivify_2250:
  vivify_2249:
    set $S105, $P152
    iseq $I105, $S105, "our"
    if $I105, if_3472
    new $P149, 'Integer'
    set $P149, $I105
    goto if_3472_end
  if_3472:
.annotate 'line', 2213
    find_dynamic_lex $P155, "$*W"
    unless_null $P155, vivify_2251
    get_hll_global $P153, "GLOBAL"
    get_who $P154, $P153
    set $P155, $P154["$W"]
    unless_null $P155, vivify_2252
    die "Contextual $*W not found"
  vivify_2252:
  vivify_2251:
    find_dynamic_lex $P158, "$*PACKAGE"
    unless_null $P158, vivify_2253
    get_hll_global $P156, "GLOBAL"
    get_who $P157, $P156
    set $P158, $P157["$PACKAGE"]
    unless_null $P158, vivify_2254
    die "Contextual $*PACKAGE not found"
  vivify_2254:
  vivify_2253:
    find_lex $P159, "$name"
    unless_null $P159, vivify_2255
    new $P159, "Undef"
  vivify_2255:
    find_lex $P160, "$past"
    unless_null $P160, vivify_2256
    new $P160, "Undef"
  vivify_2256:
    $P155."install_package_routine"($P158, $P159, $P160)
.annotate 'line', 2214
    set $P3473, $P3470
    unless_null $P3473, vivify_2257
    $P3473 = root_new ['parrot';'ResizablePMCArray']
  vivify_2257:
    set $P153, $P3473[0]
    unless_null $P153, vivify_2258
    new $P153, "Undef"
  vivify_2258:
    get_hll_global $P154, "GLOBAL"
    nqp_get_package_through_who $P155, $P154, "PAST"
    get_who $P156, $P155
    set $P157, $P156["Op"]
.annotate 'line', 2216
    find_lex $P158, "$name"
    unless_null $P158, vivify_2259
    new $P158, "Undef"
  vivify_2259:
    new $P159, "ResizablePMCArray"
    push $P159, $P158
    find_lex $P160, "$/"
    unless_null $P160, vivify_2260
    new $P160, "Undef"
  vivify_2260:
    $P161 = "lexical_package_lookup"($P159, $P160)
.annotate 'line', 2217
    get_hll_global $P162, "GLOBAL"
    nqp_get_package_through_who $P163, $P162, "PAST"
    get_who $P164, $P163
    set $P165, $P164["Var"]
    find_lex $P166, "$name"
    unless_null $P166, vivify_2261
    new $P166, "Undef"
  vivify_2261:
    $P167 = $P165."new"($P166 :named("name"), "lexical" :named("scope"))
    $P168 = $P157."new"($P161, $P167, "bind_6model" :named("pasttype"))
.annotate 'line', 2214
    $P169 = $P153."push"($P168)
.annotate 'line', 2210
    set $P149, $P169
  if_3472_end:
.annotate 'line', 2205
    .return ($P149)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3461"  :anon :subid("822_1337966799.879") :outer("818_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2191
    new $P144, "Undef"
    set $P3463, $P144
    .lex "$cholder", $P3463
.annotate 'line', 2192
    new $P145, "Undef"
    set $P3464, $P145
    .lex "$BLOCK", $P3464
.annotate 'line', 2190
    find_dynamic_lex $P149, "$*SCOPE"
    unless_null $P149, vivify_2262
    get_hll_global $P146, "GLOBAL"
    get_who $P147, $P146
    set $P149, $P147["$SCOPE"]
    unless_null $P149, vivify_2263
    die "Contextual $*SCOPE not found"
  vivify_2263:
  vivify_2262:
    set $S105, $P149
    iseq $I105, $S105, "our"
    unless $I105, if_3465_end
    die "our-scoped protos not yet implemented"
  if_3465_end:
.annotate 'line', 2191
    get_hll_global $P146, "GLOBAL"
    nqp_get_package_through_who $P147, $P146, "PAST"
    get_who $P149, $P147
    set $P150, $P149["Op"]
    $P151 = $P150."new"("list" :named("pasttype"))
    set $P3463, $P151
.annotate 'line', 2192
    find_dynamic_lex $P149, "$*W"
    unless_null $P149, vivify_2264
    get_hll_global $P146, "GLOBAL"
    get_who $P147, $P146
    set $P149, $P147["$W"]
    unless_null $P149, vivify_2265
    die "Contextual $*W not found"
  vivify_2265:
  vivify_2264:
    $P150 = $P149."cur_lexpad"()
    set $P3464, $P150
.annotate 'line', 2193
    set $P3466, $P3464
    unless_null $P3466, vivify_2266
    $P3466 = root_new ['parrot';'ResizablePMCArray']
  vivify_2266:
    set $P146, $P3466[0]
    unless_null $P146, vivify_2267
    new $P146, "Undef"
  vivify_2267:
    get_hll_global $P147, "GLOBAL"
    nqp_get_package_through_who $P149, $P147, "PAST"
    get_who $P150, $P149
    set $P151, $P150["Var"]
    find_lex $P152, "$name"
    unless_null $P152, vivify_2268
    new $P152, "Undef"
  vivify_2268:
    find_lex $P153, "$past"
    unless_null $P153, vivify_2269
    new $P153, "Undef"
  vivify_2269:
    $P154 = $P151."new"($P152 :named("name"), 1 :named("isdecl"), 1 :named("directaccess"), $P153 :named("viviself"), "lexical" :named("scope"))
    $P146."push"($P154)
.annotate 'line', 2195
    set $P3467, $P3464
    unless_null $P3467, vivify_2270
    $P3467 = root_new ['parrot';'ResizablePMCArray']
  vivify_2270:
    set $P146, $P3467[0]
    unless_null $P146, vivify_2271
    new $P146, "Undef"
  vivify_2271:
    get_hll_global $P147, "GLOBAL"
    nqp_get_package_through_who $P149, $P147, "PAST"
    get_who $P150, $P149
    set $P151, $P150["Op"]
.annotate 'line', 2197
    get_hll_global $P152, "GLOBAL"
    nqp_get_package_through_who $P153, $P152, "PAST"
    get_who $P154, $P153
    set $P155, $P154["Var"]
    find_lex $P156, "$name"
    unless_null $P156, vivify_2272
    new $P156, "Undef"
  vivify_2272:
    $P157 = $P155."new"($P156 :named("name"))
    set $P158, $P3463
    unless_null $P158, vivify_2273
    new $P158, "Undef"
  vivify_2273:
    $P159 = $P151."new"($P157, $P158, "set_dispatchees 0PP" :named("pirop"))
.annotate 'line', 2195
    $P146."push"($P159)
.annotate 'line', 2200
    set $P146, $P3464
    unless_null $P146, vivify_2274
    new $P146, "Undef"
  vivify_2274:
    find_lex $P147, "$name"
    unless_null $P147, vivify_2275
    new $P147, "Undef"
  vivify_2275:
    set $P149, $P3463
    unless_null $P149, vivify_2276
    new $P149, "Undef"
  vivify_2276:
    $P146."symbol"($P147, "lexical" :named("scope"), 1 :named("proto"), $P149 :named("cholder"))
.annotate 'line', 2203
    find_lex $P146, "$past"
    unless_null $P146, vivify_2277
    new $P146, "Undef"
  vivify_2277:
    $P147 = $P146."pirflags"(":instanceof(\"DispatcherSub\")")
.annotate 'line', 2186
    .return ($P147)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3430"  :anon :subid("819_1337966799.879") :outer("818_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2134
    .const 'Sub' $P3440 = "820_1337966799.879" 
    capture_lex $P3440
.annotate 'line', 2137
    new $P139, "Undef"
    set $P3432, $P139
    .lex "$cholder", $P3432
.annotate 'line', 2138
    $P3434 = root_new ['parrot';'Hash']
    set $P3433, $P3434
    .lex "%sym", $P3433
.annotate 'line', 2136
    find_dynamic_lex $P142, "$*SCOPE"
    unless_null $P142, vivify_2278
    get_hll_global $P140, "GLOBAL"
    get_who $P141, $P140
    set $P142, $P141["$SCOPE"]
    unless_null $P142, vivify_2279
    die "Contextual $*SCOPE not found"
  vivify_2279:
  vivify_2278:
    set $S104, $P142
    iseq $I104, $S104, "our"
    unless $I104, if_3435_end
    die "our-scoped multis not yet implemented"
  if_3435_end:
.annotate 'line', 2134
    set $P140, $P3432
    unless_null $P140, vivify_2280
    new $P140, "Undef"
  vivify_2280:
.annotate 'line', 2138
    find_dynamic_lex $P142, "$*W"
    unless_null $P142, vivify_2281
    get_hll_global $P140, "GLOBAL"
    get_who $P141, $P140
    set $P142, $P141["$W"]
    unless_null $P142, vivify_2282
    die "Contextual $*W not found"
  vivify_2282:
  vivify_2281:
    $P143 = $P142."cur_lexpad"()
    find_lex $P144, "$name"
    unless_null $P144, vivify_2283
    new $P144, "Undef"
  vivify_2283:
    $P145 = $P143."symbol"($P144)
    set $P3433, $P145
.annotate 'line', 2139
    set $P3437, $P3433
    unless_null $P3437, vivify_2284
    $P3437 = root_new ['parrot';'Hash']
  vivify_2284:
    set $P140, $P3437["cholder"]
    unless_null $P140, vivify_2285
    new $P140, "Undef"
  vivify_2285:
    if $P140, if_3436
.annotate 'line', 2144
    .const 'Sub' $P3440 = "820_1337966799.879" 
    capture_lex $P3440
    $P3440()
    goto if_3436_end
  if_3436:
.annotate 'line', 2140
    set $P3438, $P3433
    unless_null $P3438, vivify_2314
    $P3438 = root_new ['parrot';'Hash']
  vivify_2314:
    set $P141, $P3438["cholder"]
    unless_null $P141, vivify_2315
    new $P141, "Undef"
  vivify_2315:
    set $P3432, $P141
  if_3436_end:
.annotate 'line', 2181
    set $P140, $P3432
    unless_null $P140, vivify_2316
    new $P140, "Undef"
  vivify_2316:
    find_lex $P141, "$past"
    unless_null $P141, vivify_2317
    new $P141, "Undef"
  vivify_2317:
    $P140."push"($P141)
.annotate 'line', 2184
    find_lex $P140, "$past"
    unless_null $P140, vivify_2318
    new $P140, "Undef"
  vivify_2318:
    $P141 = "attach_multi_signature_to_parrot_sub"($P140)
.annotate 'line', 2134
    .return ($P141)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block3439"  :anon :subid("820_1337966799.879") :outer("819_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2144
    .const 'Sub' $P3447 = "821_1337966799.879" 
    capture_lex $P3447
.annotate 'line', 2151
    new $P141, "Undef"
    set $P3441, $P141
    .lex "$found_proto", $P3441
.annotate 'line', 2168
    new $P142, "Undef"
    set $P3442, $P142
    .lex "$BLOCK", $P3442
.annotate 'line', 2170
    new $P143, "Undef"
    set $P3443, $P143
    .lex "$dispatch_setup", $P3443
.annotate 'line', 2146
    find_lex $P3445, "%sym"
    unless_null $P3445, vivify_2286
    $P3445 = root_new ['parrot';'Hash']
  vivify_2286:
    set $P144, $P3445["proto"]
    unless_null $P144, vivify_2287
    new $P144, "Undef"
  vivify_2287:
    unless $P144, if_3444_end
.annotate 'line', 2149
    find_lex $P145, "$/"
    unless_null $P145, vivify_2288
    new $P145, "Undef"
  vivify_2288:
    $P146 = $P145."CURSOR"()
    $P146."panic"("Internal Error: Current scope has a proto, but no candidate list holder was set up. (This should never happen.)")
  if_3444_end:
.annotate 'line', 2144
    set $P144, $P3441
    unless_null $P144, vivify_2289
    new $P144, "Undef"
  vivify_2289:
.annotate 'line', 2152
    find_dynamic_lex $P147, "$*W"
    unless_null $P147, vivify_2290
    get_hll_global $P145, "GLOBAL"
    get_who $P146, $P145
    set $P147, $P146["$W"]
    unless_null $P147, vivify_2291
    die "Contextual $*W not found"
  vivify_2291:
  vivify_2290:
    $P149 = $P147."get_legacy_block_list"()
    defined $I104, $P149
    unless $I104, for_undef_2292
    iter $P144, $P149
    new $P152, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P152, loop3457_handler
    push_eh $P152
  loop3457_test:
    unless $P144, loop3457_done
    shift $P150, $P144
  loop3457_redo:
    .const 'Sub' $P3447 = "821_1337966799.879" 
    capture_lex $P3447
    $P3447($P150)
  loop3457_next:
    goto loop3457_test
  loop3457_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P153, exception, 'type'
    eq $P153, .CONTROL_LOOP_NEXT, loop3457_next
    eq $P153, .CONTROL_LOOP_REDO, loop3457_redo
  loop3457_done:
    pop_eh 
  for_undef_2292:
.annotate 'line', 2163
    set $P144, $P3441
    unless_null $P144, vivify_2301
    new $P144, "Undef"
  vivify_2301:
    if $P144, unless_3458_end
.annotate 'line', 2164
    find_lex $P145, "$/"
    unless_null $P145, vivify_2302
    new $P145, "Undef"
  vivify_2302:
    $P146 = $P145."CURSOR"()
    $P146."panic"("Sorry, no proto sub in scope, and auto-generation of protos is not yet implemented.")
  unless_3458_end:
.annotate 'line', 2168
    find_dynamic_lex $P146, "$*W"
    unless_null $P146, vivify_2303
    get_hll_global $P144, "GLOBAL"
    get_who $P145, $P144
    set $P146, $P145["$W"]
    unless_null $P146, vivify_2304
    die "Contextual $*W not found"
  vivify_2304:
  vivify_2303:
    $P147 = $P146."cur_lexpad"()
    set $P3442, $P147
.annotate 'line', 2169
    get_hll_global $P144, "GLOBAL"
    nqp_get_package_through_who $P145, $P144, "PAST"
    get_who $P146, $P145
    set $P147, $P146["Op"]
    $P149 = $P147."new"("list" :named("pasttype"))
    store_lex "$cholder", $P149
.annotate 'line', 2170
    get_hll_global $P144, "GLOBAL"
    nqp_get_package_through_who $P145, $P144, "PAST"
    get_who $P146, $P145
    set $P147, $P146["Op"]
.annotate 'line', 2172
    get_hll_global $P149, "GLOBAL"
    nqp_get_package_through_who $P150, $P149, "PAST"
    get_who $P151, $P150
    set $P152, $P151["Var"]
    find_lex $P153, "$name"
    unless_null $P153, vivify_2305
    new $P153, "Undef"
  vivify_2305:
    $P154 = $P152."new"($P153 :named("name"), "outer" :named("scope"))
    find_lex $P155, "$cholder"
    unless_null $P155, vivify_2306
    new $P155, "Undef"
  vivify_2306:
    $P156 = $P147."new"($P154, $P155, "create_dispatch_and_add_candidates PPP" :named("pirop"))
.annotate 'line', 2170
    set $P3443, $P156
.annotate 'line', 2175
    set $P3459, $P3442
    unless_null $P3459, vivify_2307
    $P3459 = root_new ['parrot';'ResizablePMCArray']
  vivify_2307:
    set $P144, $P3459[0]
    unless_null $P144, vivify_2308
    new $P144, "Undef"
  vivify_2308:
    get_hll_global $P145, "GLOBAL"
    nqp_get_package_through_who $P146, $P145, "PAST"
    get_who $P147, $P146
    set $P149, $P147["Var"]
    find_lex $P150, "$name"
    unless_null $P150, vivify_2309
    new $P150, "Undef"
  vivify_2309:
    set $P151, $P3443
    unless_null $P151, vivify_2310
    new $P151, "Undef"
  vivify_2310:
    $P152 = $P149."new"($P150 :named("name"), 1 :named("isdecl"), 1 :named("directaccess"), $P151 :named("viviself"), "lexical" :named("scope"))
    $P144."push"($P152)
.annotate 'line', 2177
    set $P144, $P3442
    unless_null $P144, vivify_2311
    new $P144, "Undef"
  vivify_2311:
    find_lex $P145, "$name"
    unless_null $P145, vivify_2312
    new $P145, "Undef"
  vivify_2312:
    find_lex $P146, "$cholder"
    unless_null $P146, vivify_2313
    new $P146, "Undef"
  vivify_2313:
    $P147 = $P144."symbol"($P145, "lexical" :named("scope"), $P146 :named("cholder"))
.annotate 'line', 2144
    .return ($P147)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3446"  :anon :subid("821_1337966799.879") :outer("820_1337966799.879")
    .param pmc param_3450
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2153
    $P3449 = root_new ['parrot';'Hash']
    set $P3448, $P3449
    .lex "%sym", $P3448
    .lex "$_", param_3450
    find_lex $P151, "$_"
    unless_null $P151, vivify_2293
    new $P151, "Undef"
  vivify_2293:
    find_lex $P152, "$name"
    unless_null $P152, vivify_2294
    new $P152, "Undef"
  vivify_2294:
    $P153 = $P151."symbol"($P152)
    set $P3448, $P153
.annotate 'line', 2154
    set $P3453, $P3448
    unless_null $P3453, vivify_2295
    $P3453 = root_new ['parrot';'Hash']
  vivify_2295:
    set $P153, $P3453["proto"]
    unless_null $P153, vivify_2296
    new $P153, "Undef"
  vivify_2296:
    unless $P153, unless_3452
    set $P152, $P153
    goto unless_3452_end
  unless_3452:
    set $P3454, $P3448
    unless_null $P3454, vivify_2297
    $P3454 = root_new ['parrot';'Hash']
  vivify_2297:
    set $P154, $P3454["cholder"]
    unless_null $P154, vivify_2298
    new $P154, "Undef"
  vivify_2298:
    set $P152, $P154
  unless_3452_end:
    if $P152, if_3451
.annotate 'line', 2157
    set $P3456, $P3448
    unless_null $P3456, vivify_2299
    $P3456 = root_new ['parrot';'Hash']
  vivify_2299:
    if $P3456, if_3455
    set $P156, $P3456
    goto if_3455_end
  if_3455:
.annotate 'line', 2158
    find_lex $P157, "$/"
    unless_null $P157, vivify_2300
    new $P157, "Undef"
  vivify_2300:
    $P158 = $P157."CURSOR"()
    $P159 = $P158."panic"("Cannot declare a multi when an only is already in scope.")
.annotate 'line', 2157
    set $P156, $P159
  if_3455_end:
    set $P151, $P156
.annotate 'line', 2154
    goto if_3451_end
  if_3451:
.annotate 'line', 2155
    new $P155, "Float"
    assign $P155, 1
    store_lex "$found_proto", $P155
.annotate 'line', 2154
    set $P151, $P155
  if_3451_end:
.annotate 'line', 2152
    .return ($P151)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3481"  :anon :subid("824_1337966799.879") :outer("308_1337966799.879")
    .param pmc param_3483
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2241
    .lex "$_", param_3483
    find_lex $P126, "$_"
    unless_null $P126, vivify_2331
    new $P126, "Undef"
  vivify_2331:
    $P127 = $P126."ast"()
    find_lex $P128, "$/"
    unless_null $P128, vivify_2332
    new $P128, "Undef"
  vivify_2332:
    $P129 = $P127($P128)
    .return ($P129)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "method_def" :anon :subid("309_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3486
    .param pmc param_3487
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2248
    .const 'Sub' $P3516 = "826_1337966799.879" 
    capture_lex $P3516
    .const 'Sub' $P3499 = "825_1337966799.879" 
    capture_lex $P3499
    .lex "self", param_3486
    .lex "$/", param_3487
.annotate 'line', 2251
    new $P118, "Undef"
    set $P3488, $P118
    .lex "$past", $P3488
.annotate 'line', 2248
    set $P120, $P3488
    unless_null $P120, vivify_2334
    new $P120, "Undef"
  vivify_2334:
.annotate 'line', 2252
    set $P3490, param_3487
    unless_null $P3490, vivify_2335
    $P3490 = root_new ['parrot';'Hash']
  vivify_2335:
    set $P120, $P3490["onlystar"]
    unless_null $P120, vivify_2336
    new $P120, "Undef"
  vivify_2336:
    if $P120, if_3489
.annotate 'line', 2256
    set $P3491, param_3487
    unless_null $P3491, vivify_2337
    $P3491 = root_new ['parrot';'Hash']
  vivify_2337:
    set $P121, $P3491["blockoid"]
    unless_null $P121, vivify_2338
    new $P121, "Undef"
  vivify_2338:
    $P123 = $P121."ast"()
    set $P3488, $P123
.annotate 'line', 2257
    set $P121, $P3488
    unless_null $P121, vivify_2339
    new $P121, "Undef"
  vivify_2339:
    $P121."blocktype"("declaration")
.annotate 'line', 2258
    find_dynamic_lex $P124, "$*RETURN_USED"
    unless_null $P124, vivify_2340
    get_hll_global $P121, "GLOBAL"
    get_who $P123, $P121
    set $P124, $P123["$RETURN_USED"]
    unless_null $P124, vivify_2341
    die "Contextual $*RETURN_USED not found"
  vivify_2341:
  vivify_2340:
    unless $P124, if_3492_end
.annotate 'line', 2259
    set $P125, $P3488
    unless_null $P125, vivify_2342
    new $P125, "Undef"
  vivify_2342:
    $P125."control"("return_pir")
  if_3492_end:
.annotate 'line', 2255
    goto if_3489_end
  if_3489:
.annotate 'line', 2253
    $P121 = "only_star_block"()
    set $P3488, $P121
  if_3489_end:
.annotate 'line', 2264
    set $P3494, $P3488
    unless_null $P3494, vivify_2343
    $P3494 = root_new ['parrot';'Hash']
  vivify_2343:
    set $P120, $P3494["signature_has_invocant"]
    unless_null $P120, vivify_2344
    new $P120, "Undef"
  vivify_2344:
    if $P120, unless_3493_end
.annotate 'line', 2265
    set $P3495, $P3488
    unless_null $P3495, vivify_2345
    $P3495 = root_new ['parrot';'ResizablePMCArray']
  vivify_2345:
    set $P121, $P3495[0]
    unless_null $P121, vivify_2346
    new $P121, "Undef"
  vivify_2346:
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Var"]
.annotate 'line', 2267
    find_dynamic_lex $P129, "$*W"
    unless_null $P129, vivify_2347
    get_hll_global $P127, "GLOBAL"
    get_who $P128, $P127
    set $P129, $P128["$W"]
    unless_null $P129, vivify_2348
    die "Contextual $*W not found"
  vivify_2348:
  vivify_2347:
    find_dynamic_lex $P133, "$*PACKAGE"
    unless_null $P133, vivify_2349
    get_hll_global $P131, "GLOBAL"
    get_who $P132, $P131
    set $P133, $P132["$PACKAGE"]
    unless_null $P133, vivify_2350
    die "Contextual $*PACKAGE not found"
  vivify_2350:
  vivify_2349:
    $P134 = $P129."get_ref"($P133)
.annotate 'line', 2265
    $P135 = $P126."new"("self" :named("name"), "parameter" :named("scope"), 1 :named("directaccess"), $P134 :named("multitype"))
    $P121."unshift"($P135)
  unless_3493_end:
.annotate 'line', 2270
    set $P120, $P3488
    unless_null $P120, vivify_2351
    new $P120, "Undef"
  vivify_2351:
    $P120."symbol"("self", "lexical" :named("scope"))
.annotate 'line', 2273
    set $P3497, param_3487
    unless_null $P3497, vivify_2352
    $P3497 = root_new ['parrot';'Hash']
  vivify_2352:
    set $P120, $P3497["deflongname"]
    unless_null $P120, vivify_2353
    new $P120, "Undef"
  vivify_2353:
    unless $P120, if_3496_end
    .const 'Sub' $P3499 = "825_1337966799.879" 
    capture_lex $P3499
    $P3499()
  if_3496_end:
.annotate 'line', 2298
    set $P120, param_3487
    set $P121, $P3488
    unless_null $P121, vivify_2393
    new $P121, "Undef"
  vivify_2393:
    $P120."!make"($P121)
.annotate 'line', 2299
    set $P120, $P3488
    unless_null $P120, vivify_2394
    new $P120, "Undef"
  vivify_2394:
    set $P3511, $P3488
    unless_null $P3511, vivify_2395
    $P3511 = root_new ['parrot';'Hash']
    set $P3488, $P3511
  vivify_2395:
    set $P3511["block_past"], $P120
.annotate 'line', 2300
    set $P3513, param_3487
    unless_null $P3513, vivify_2396
    $P3513 = root_new ['parrot';'Hash']
  vivify_2396:
    set $P121, $P3513["trait"]
    unless_null $P121, vivify_2397
    new $P121, "Undef"
  vivify_2397:
    if $P121, if_3512
    set $P120, $P121
    goto if_3512_end
  if_3512:
.annotate 'line', 2301
    set $P3514, param_3487
    unless_null $P3514, vivify_2398
    $P3514 = root_new ['parrot';'Hash']
  vivify_2398:
    set $P124, $P3514["trait"]
    unless_null $P124, vivify_2399
    new $P124, "Undef"
  vivify_2399:
    defined $I100, $P124
    unless $I100, for_undef_2400
    iter $P123, $P124
    new $P126, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P126, loop3518_handler
    push_eh $P126
  loop3518_test:
    unless $P123, loop3518_done
    shift $P125, $P123
  loop3518_redo:
    .const 'Sub' $P3516 = "826_1337966799.879" 
    capture_lex $P3516
    $P3516($P125)
  loop3518_next:
    goto loop3518_test
  loop3518_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P127, exception, 'type'
    eq $P127, .CONTROL_LOOP_NEXT, loop3518_next
    eq $P127, .CONTROL_LOOP_REDO, loop3518_redo
  loop3518_done:
    pop_eh 
  for_undef_2400:
.annotate 'line', 2300
    set $P120, $P123
  if_3512_end:
.annotate 'line', 2248
    .return ($P120)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3498"  :anon :subid("825_1337966799.879") :outer("309_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2275
    new $P121, "Undef"
    set $P3500, $P121
    .lex "$name", $P3500
.annotate 'line', 2279
    new $P123, "Undef"
    set $P3501, $P123
    .lex "$meta_meth", $P3501
.annotate 'line', 2280
    new $P124, "Undef"
    set $P3502, $P124
    .lex "$is_dispatcher", $P3502
.annotate 'line', 2281
    new $P125, "Undef"
    set $P3503, $P125
    .lex "$code", $P3503
.annotate 'line', 2275
    find_lex $P3504, "$/"
    unless_null $P3504, vivify_2354
    $P3504 = root_new ['parrot';'Hash']
  vivify_2354:
    set $P126, $P3504["private"]
    unless_null $P126, vivify_2355
    new $P126, "Undef"
  vivify_2355:
    set $S100, $P126
    new $P127, 'String'
    set $P127, $S100
    find_lex $P3505, "$/"
    unless_null $P3505, vivify_2356
    $P3505 = root_new ['parrot';'Hash']
  vivify_2356:
    set $P3506, $P3505["deflongname"]
    unless_null $P3506, vivify_2357
    $P3506 = root_new ['parrot';'ResizablePMCArray']
  vivify_2357:
    set $P128, $P3506[0]
    unless_null $P128, vivify_2358
    new $P128, "Undef"
  vivify_2358:
    $P129 = $P128."ast"()
    set $S101, $P129
    concat $P131, $P127, $S101
    set $P3500, $P131
.annotate 'line', 2276
    find_lex $P126, "$past"
    unless_null $P126, vivify_2359
    new $P126, "Undef"
  vivify_2359:
    set $P127, $P3500
    unless_null $P127, vivify_2360
    new $P127, "Undef"
  vivify_2360:
    $P126."name"($P127)
.annotate 'line', 2279
    find_dynamic_lex $P129, "$*MULTINESS"
    unless_null $P129, vivify_2361
    get_hll_global $P127, "GLOBAL"
    get_who $P128, $P127
    set $P129, $P128["$MULTINESS"]
    unless_null $P129, vivify_2362
    die "Contextual $*MULTINESS not found"
  vivify_2362:
  vivify_2361:
    set $S100, $P129
    iseq $I100, $S100, "multi"
    if $I100, if_3507
    new $P132, "String"
    assign $P132, "add_method"
    set $P126, $P132
    goto if_3507_end
  if_3507:
    new $P131, "String"
    assign $P131, "add_multi_method"
    set $P126, $P131
  if_3507_end:
    set $P3501, $P126
.annotate 'line', 2280
    find_dynamic_lex $P128, "$*MULTINESS"
    unless_null $P128, vivify_2363
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["$MULTINESS"]
    unless_null $P128, vivify_2364
    die "Contextual $*MULTINESS not found"
  vivify_2364:
  vivify_2363:
    set $S100, $P128
    iseq $I100, $S100, "proto"
    new $P129, 'Integer'
    set $P129, $I100
    set $P3502, $P129
.annotate 'line', 2281
    find_dynamic_lex $P128, "$*W"
    unless_null $P128, vivify_2365
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["$W"]
    unless_null $P128, vivify_2366
    die "Contextual $*W not found"
  vivify_2366:
  vivify_2365:
    find_lex $P129, "$past"
    unless_null $P129, vivify_2367
    new $P129, "Undef"
  vivify_2367:
    set $P131, $P3500
    unless_null $P131, vivify_2368
    new $P131, "Undef"
  vivify_2368:
    set $P132, $P3502
    unless_null $P132, vivify_2369
    new $P132, "Undef"
  vivify_2369:
    $P133 = $P128."create_code"($P129, $P131, $P132)
    set $P3503, $P133
.annotate 'line', 2282
    find_dynamic_lex $P128, "$*MULTINESS"
    unless_null $P128, vivify_2370
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["$MULTINESS"]
    unless_null $P128, vivify_2371
    die "Contextual $*MULTINESS not found"
  vivify_2371:
  vivify_2370:
    set $S100, $P128
    iseq $I100, $S100, "multi"
    unless $I100, if_3508_end
    set $P129, $P3503
    unless_null $P129, vivify_2372
    new $P129, "Undef"
  vivify_2372:
    find_lex $P131, "$past"
    unless_null $P131, vivify_2373
    new $P131, "Undef"
  vivify_2373:
    "attach_multi_signature"($P129, $P131)
  if_3508_end:
.annotate 'line', 2283
    find_dynamic_lex $P128, "$*W"
    unless_null $P128, vivify_2374
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["$W"]
    unless_null $P128, vivify_2375
    die "Contextual $*W not found"
  vivify_2375:
  vivify_2374:
    find_dynamic_lex $P132, "$*PACKAGE"
    unless_null $P132, vivify_2376
    get_hll_global $P129, "GLOBAL"
    get_who $P131, $P129
    set $P132, $P131["$PACKAGE"]
    unless_null $P132, vivify_2377
    die "Contextual $*PACKAGE not found"
  vivify_2377:
  vivify_2376:
    set $P133, $P3501
    unless_null $P133, vivify_2378
    new $P133, "Undef"
  vivify_2378:
    set $P134, $P3500
    unless_null $P134, vivify_2379
    new $P134, "Undef"
  vivify_2379:
    set $P135, $P3503
    unless_null $P135, vivify_2380
    new $P135, "Undef"
  vivify_2380:
    $P128."pkg_add_method"($P132, $P133, $P134, $P135)
.annotate 'line', 2286
    find_dynamic_lex $P129, "$*SCOPE"
    unless_null $P129, vivify_2381
    get_hll_global $P127, "GLOBAL"
    get_who $P128, $P127
    set $P129, $P128["$SCOPE"]
    unless_null $P129, vivify_2382
    die "Contextual $*SCOPE not found"
  vivify_2382:
  vivify_2381:
    set $S100, $P129
    iseq $I100, $S100, "our"
    if $I100, if_3509
.annotate 'line', 2289
    find_lex $P132, "$past"
    unless_null $P132, vivify_2383
    new $P132, "Undef"
  vivify_2383:
    $P133 = $P132."pirflags"()
    if $P133, if_3510
.annotate 'line', 2292
    find_lex $P134, "$past"
    unless_null $P134, vivify_2384
    new $P134, "Undef"
  vivify_2384:
    $P135 = $P134."pirflags"(":anon")
.annotate 'line', 2291
    set $P131, $P135
.annotate 'line', 2289
    goto if_3510_end
  if_3510:
.annotate 'line', 2290
    find_lex $P134, "$past"
    unless_null $P134, vivify_2385
    new $P134, "Undef"
  vivify_2385:
    find_lex $P135, "$past"
    unless_null $P135, vivify_2386
    new $P135, "Undef"
  vivify_2386:
    $P136 = $P135."pirflags"()
    set $S101, $P136
    new $P137, 'String'
    set $P137, $S101
    concat $P138, $P137, ":anon"
    $P140 = $P134."pirflags"($P138)
.annotate 'line', 2289
    set $P131, $P140
  if_3510_end:
.annotate 'line', 2288
    set $P126, $P131
.annotate 'line', 2286
    goto if_3509_end
  if_3509:
.annotate 'line', 2287
    find_dynamic_lex $P133, "$*W"
    unless_null $P133, vivify_2387
    get_hll_global $P131, "GLOBAL"
    get_who $P132, $P131
    set $P133, $P132["$W"]
    unless_null $P133, vivify_2388
    die "Contextual $*W not found"
  vivify_2388:
  vivify_2387:
    find_dynamic_lex $P136, "$*PACKAGE"
    unless_null $P136, vivify_2389
    get_hll_global $P134, "GLOBAL"
    get_who $P135, $P134
    set $P136, $P135["$PACKAGE"]
    unless_null $P136, vivify_2390
    die "Contextual $*PACKAGE not found"
  vivify_2390:
  vivify_2389:
    set $P137, $P3500
    unless_null $P137, vivify_2391
    new $P137, "Undef"
  vivify_2391:
    find_lex $P138, "$past"
    unless_null $P138, vivify_2392
    new $P138, "Undef"
  vivify_2392:
    $P139 = $P133."install_package_routine"($P136, $P137, $P138)
.annotate 'line', 2286
    set $P126, $P139
  if_3509_end:
.annotate 'line', 2273
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3515"  :anon :subid("826_1337966799.879") :outer("309_1337966799.879")
    .param pmc param_3517
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2301
    .lex "$_", param_3517
    find_lex $P126, "$_"
    unless_null $P126, vivify_2401
    new $P126, "Undef"
  vivify_2401:
    $P127 = $P126."ast"()
    find_lex $P128, "$/"
    unless_null $P128, vivify_2402
    new $P128, "Undef"
  vivify_2402:
    $P129 = $P127($P128)
    .return ($P129)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "signature" :anon :subid("310_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3520
    .param pmc param_3521
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2343
    .const 'Sub' $P3535 = "828_1337966799.879" 
    capture_lex $P3535
    .const 'Sub' $P3528 = "827_1337966799.879" 
    capture_lex $P3528
    .lex "self", param_3520
    .lex "$/", param_3521
.annotate 'line', 2344
    new $P118, "Undef"
    set $P3522, $P118
    .lex "$BLOCK", $P3522
.annotate 'line', 2345
    new $P120, "Undef"
    set $P3523, $P120
    .lex "$BLOCKINIT", $P3523
.annotate 'line', 2344
    find_dynamic_lex $P124, "$*W"
    unless_null $P124, vivify_2403
    get_hll_global $P121, "GLOBAL"
    get_who $P123, $P121
    set $P124, $P123["$W"]
    unless_null $P124, vivify_2404
    die "Contextual $*W not found"
  vivify_2404:
  vivify_2403:
    $P125 = $P124."cur_lexpad"()
    set $P3522, $P125
.annotate 'line', 2345
    set $P3524, $P3522
    unless_null $P3524, vivify_2405
    $P3524 = root_new ['parrot';'ResizablePMCArray']
  vivify_2405:
    set $P121, $P3524[0]
    unless_null $P121, vivify_2406
    new $P121, "Undef"
  vivify_2406:
    set $P3523, $P121
.annotate 'line', 2346
    set $P3526, param_3521
    unless_null $P3526, vivify_2407
    $P3526 = root_new ['parrot';'Hash']
  vivify_2407:
    set $P121, $P3526["invocant"]
    unless_null $P121, vivify_2408
    new $P121, "Undef"
  vivify_2408:
    unless $P121, if_3525_end
    .const 'Sub' $P3528 = "827_1337966799.879" 
    capture_lex $P3528
    $P3528()
  if_3525_end:
.annotate 'line', 2355
    set $P3533, param_3521
    unless_null $P3533, vivify_2417
    $P3533 = root_new ['parrot';'Hash']
  vivify_2417:
    set $P123, $P3533["parameter"]
    unless_null $P123, vivify_2418
    new $P123, "Undef"
  vivify_2418:
    defined $I100, $P123
    unless $I100, for_undef_2419
    iter $P121, $P123
    new $P125, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P125, loop3537_handler
    push_eh $P125
  loop3537_test:
    unless $P121, loop3537_done
    shift $P124, $P121
  loop3537_redo:
    .const 'Sub' $P3535 = "828_1337966799.879" 
    capture_lex $P3535
    $P3535($P124)
  loop3537_next:
    goto loop3537_test
  loop3537_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P126, exception, 'type'
    eq $P126, .CONTROL_LOOP_NEXT, loop3537_next
    eq $P126, .CONTROL_LOOP_REDO, loop3537_redo
  loop3537_done:
    pop_eh 
  for_undef_2419:
.annotate 'line', 2343
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3527"  :anon :subid("827_1337966799.879") :outer("310_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2347
    new $P123, "Undef"
    set $P3529, $P123
    .lex "$inv", $P3529
    find_lex $P3530, "$/"
    unless_null $P3530, vivify_2409
    $P3530 = root_new ['parrot';'Hash']
  vivify_2409:
    set $P3531, $P3530["invocant"]
    unless_null $P3531, vivify_2410
    $P3531 = root_new ['parrot';'ResizablePMCArray']
  vivify_2410:
    set $P124, $P3531[0]
    unless_null $P124, vivify_2411
    new $P124, "Undef"
  vivify_2411:
    $P125 = $P124."ast"()
    set $P3529, $P125
.annotate 'line', 2348
    find_lex $P124, "$BLOCKINIT"
    unless_null $P124, vivify_2412
    new $P124, "Undef"
  vivify_2412:
    set $P125, $P3529
    unless_null $P125, vivify_2413
    new $P125, "Undef"
  vivify_2413:
    $P124."push"($P125)
.annotate 'line', 2349
    find_lex $P124, "$BLOCKINIT"
    unless_null $P124, vivify_2414
    new $P124, "Undef"
  vivify_2414:
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P128, $P127["Var"]
.annotate 'line', 2351
    get_hll_global $P129, "GLOBAL"
    nqp_get_package_through_who $P131, $P129, "PAST"
    get_who $P132, $P131
    set $P133, $P132["Var"]
    set $P134, $P3529
    unless_null $P134, vivify_2415
    new $P134, "Undef"
  vivify_2415:
    $P135 = $P134."name"()
    $P136 = $P133."new"("lexical" :named("scope"), $P135 :named("name"))
.annotate 'line', 2349
    $P137 = $P128."new"("self" :named("name"), "lexical" :named("scope"), 1 :named("isdecl"), 1 :named("directaccess"), $P136 :named("viviself"))
    $P124."push"($P137)
.annotate 'line', 2353
    new $P124, "Float"
    assign $P124, 1
    find_lex $P3532, "$BLOCK"
    unless_null $P3532, vivify_2416
    $P3532 = root_new ['parrot';'Hash']
    store_lex "$BLOCK", $P3532
  vivify_2416:
    set $P3532["signature_has_invocant"], $P124
.annotate 'line', 2346
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3534"  :anon :subid("828_1337966799.879") :outer("310_1337966799.879")
    .param pmc param_3536
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2355
    .lex "$_", param_3536
    find_lex $P125, "$BLOCKINIT"
    unless_null $P125, vivify_2420
    new $P125, "Undef"
  vivify_2420:
    find_lex $P126, "$_"
    unless_null $P126, vivify_2421
    new $P126, "Undef"
  vivify_2421:
    $P127 = $P126."ast"()
    $P128 = $P125."push"($P127)
    .return ($P128)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "parameter" :anon :subid("311_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3539
    .param pmc param_3540
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2358
    .lex "self", param_3539
    .lex "$/", param_3540
.annotate 'line', 2359
    new $P118, "Undef"
    set $P3541, $P118
    .lex "$quant", $P3541
.annotate 'line', 2360
    new $P120, "Undef"
    set $P3542, $P120
    .lex "$past", $P3542
.annotate 'line', 2359
    set $P3543, param_3540
    unless_null $P3543, vivify_2422
    $P3543 = root_new ['parrot';'Hash']
  vivify_2422:
    set $P121, $P3543["quant"]
    unless_null $P121, vivify_2423
    new $P121, "Undef"
  vivify_2423:
    set $P3541, $P121
.annotate 'line', 2358
    set $P121, $P3542
    unless_null $P121, vivify_2424
    new $P121, "Undef"
  vivify_2424:
.annotate 'line', 2361
    set $P3545, param_3540
    unless_null $P3545, vivify_2425
    $P3545 = root_new ['parrot';'Hash']
  vivify_2425:
    set $P121, $P3545["named_param"]
    unless_null $P121, vivify_2426
    new $P121, "Undef"
  vivify_2426:
    if $P121, if_3544
.annotate 'line', 2368
    set $P3551, param_3540
    unless_null $P3551, vivify_2427
    $P3551 = root_new ['parrot';'Hash']
  vivify_2427:
    set $P123, $P3551["param_var"]
    unless_null $P123, vivify_2428
    new $P123, "Undef"
  vivify_2428:
    $P124 = $P123."ast"()
    set $P3542, $P124
.annotate 'line', 2369
    set $P123, $P3541
    unless_null $P123, vivify_2429
    new $P123, "Undef"
  vivify_2429:
    set $S100, $P123
    iseq $I100, $S100, "*"
    if $I100, if_3552
.annotate 'line', 2373
    set $P124, $P3541
    unless_null $P124, vivify_2430
    new $P124, "Undef"
  vivify_2430:
    set $S101, $P124
    iseq $I101, $S101, "?"
    unless $I101, if_3555_end
.annotate 'line', 2374
    set $P125, $P3542
    unless_null $P125, vivify_2431
    new $P125, "Undef"
  vivify_2431:
    set $P3556, param_3540
    unless_null $P3556, vivify_2432
    $P3556 = root_new ['parrot';'Hash']
  vivify_2432:
    set $P3557, $P3556["param_var"]
    unless_null $P3557, vivify_2433
    $P3557 = root_new ['parrot';'Hash']
  vivify_2433:
    set $P126, $P3557["sigil"]
    unless_null $P126, vivify_2434
    new $P126, "Undef"
  vivify_2434:
    $P127 = "vivitype"($P126)
    $P125."viviself"($P127)
  if_3555_end:
.annotate 'line', 2373
    goto if_3552_end
  if_3552:
.annotate 'line', 2370
    set $P124, $P3542
    unless_null $P124, vivify_2435
    new $P124, "Undef"
  vivify_2435:
    $P124."slurpy"(1)
.annotate 'line', 2371
    set $P124, $P3542
    unless_null $P124, vivify_2436
    new $P124, "Undef"
  vivify_2436:
    set $P3553, param_3540
    unless_null $P3553, vivify_2437
    $P3553 = root_new ['parrot';'Hash']
  vivify_2437:
    set $P3554, $P3553["param_var"]
    unless_null $P3554, vivify_2438
    $P3554 = root_new ['parrot';'Hash']
  vivify_2438:
    set $P125, $P3554["sigil"]
    unless_null $P125, vivify_2439
    new $P125, "Undef"
  vivify_2439:
    set $S101, $P125
    iseq $I101, $S101, "%"
    $P124."named"($I101)
  if_3552_end:
.annotate 'line', 2367
    goto if_3544_end
  if_3544:
.annotate 'line', 2362
    set $P3546, param_3540
    unless_null $P3546, vivify_2440
    $P3546 = root_new ['parrot';'Hash']
  vivify_2440:
    set $P123, $P3546["named_param"]
    unless_null $P123, vivify_2441
    new $P123, "Undef"
  vivify_2441:
    $P124 = $P123."ast"()
    set $P3542, $P124
.annotate 'line', 2363
    set $P123, $P3541
    unless_null $P123, vivify_2442
    new $P123, "Undef"
  vivify_2442:
    set $S100, $P123
    isne $I100, $S100, "!"
    unless $I100, if_3547_end
.annotate 'line', 2364
    set $P124, $P3542
    unless_null $P124, vivify_2443
    new $P124, "Undef"
  vivify_2443:
    set $P3548, param_3540
    unless_null $P3548, vivify_2444
    $P3548 = root_new ['parrot';'Hash']
  vivify_2444:
    set $P3549, $P3548["named_param"]
    unless_null $P3549, vivify_2445
    $P3549 = root_new ['parrot';'Hash']
  vivify_2445:
    set $P3550, $P3549["param_var"]
    unless_null $P3550, vivify_2446
    $P3550 = root_new ['parrot';'Hash']
  vivify_2446:
    set $P125, $P3550["sigil"]
    unless_null $P125, vivify_2447
    new $P125, "Undef"
  vivify_2447:
    $P126 = "vivitype"($P125)
    $P124."viviself"($P126)
  if_3547_end:
  if_3544_end:
.annotate 'line', 2377
    set $P3559, param_3540
    unless_null $P3559, vivify_2448
    $P3559 = root_new ['parrot';'Hash']
  vivify_2448:
    set $P121, $P3559["default_value"]
    unless_null $P121, vivify_2449
    new $P121, "Undef"
  vivify_2449:
    unless $P121, if_3558_end
.annotate 'line', 2378
    set $P123, $P3541
    unless_null $P123, vivify_2450
    new $P123, "Undef"
  vivify_2450:
    set $S100, $P123
    iseq $I100, $S100, "*"
    unless $I100, if_3560_end
.annotate 'line', 2379
    set $P124, param_3540
    unless_null $P124, vivify_2451
    new $P124, "Undef"
  vivify_2451:
    $P125 = $P124."CURSOR"()
    $P125."panic"("Can't put default on slurpy parameter")
  if_3560_end:
.annotate 'line', 2381
    set $P123, $P3541
    unless_null $P123, vivify_2452
    new $P123, "Undef"
  vivify_2452:
    set $S100, $P123
    iseq $I100, $S100, "!"
    unless $I100, if_3561_end
.annotate 'line', 2382
    set $P124, param_3540
    unless_null $P124, vivify_2453
    new $P124, "Undef"
  vivify_2453:
    $P125 = $P124."CURSOR"()
    $P125."panic"("Can't put default on required parameter")
  if_3561_end:
.annotate 'line', 2384
    set $P123, $P3542
    unless_null $P123, vivify_2454
    new $P123, "Undef"
  vivify_2454:
    set $P3562, param_3540
    unless_null $P3562, vivify_2455
    $P3562 = root_new ['parrot';'Hash']
  vivify_2455:
    set $P3563, $P3562["default_value"]
    unless_null $P3563, vivify_2456
    $P3563 = root_new ['parrot';'ResizablePMCArray']
  vivify_2456:
    set $P3564, $P3563[0]
    unless_null $P3564, vivify_2457
    $P3564 = root_new ['parrot';'Hash']
  vivify_2457:
    set $P124, $P3564["EXPR"]
    unless_null $P124, vivify_2458
    new $P124, "Undef"
  vivify_2458:
    $P125 = $P124."ast"()
    $P123."viviself"($P125)
  if_3558_end:
.annotate 'line', 2386
    set $P121, $P3542
    unless_null $P121, vivify_2459
    new $P121, "Undef"
  vivify_2459:
    $P123 = $P121."viviself"()
    if $P123, unless_3565_end
    find_dynamic_lex $P126, "$*W"
    unless_null $P126, vivify_2460
    get_hll_global $P124, "GLOBAL"
    get_who $P125, $P124
    set $P126, $P125["$W"]
    unless_null $P126, vivify_2461
    die "Contextual $*W not found"
  vivify_2461:
  vivify_2460:
    $P127 = $P126."cur_lexpad"()
    find_dynamic_lex $P131, "$*W"
    unless_null $P131, vivify_2462
    get_hll_global $P128, "GLOBAL"
    get_who $P129, $P128
    set $P131, $P129["$W"]
    unless_null $P131, vivify_2463
    die "Contextual $*W not found"
  vivify_2463:
  vivify_2462:
    $P132 = $P131."cur_lexpad"()
    $P133 = $P132."arity"()
    set $N100, $P133
    new $P134, 'Float'
    set $P134, $N100
    add $P135, $P134, 1
    $P127."arity"($P135)
  unless_3565_end:
.annotate 'line', 2390
    set $P3567, param_3540
    unless_null $P3567, vivify_2464
    $P3567 = root_new ['parrot';'Hash']
  vivify_2464:
    set $P121, $P3567["typename"]
    unless_null $P121, vivify_2465
    new $P121, "Undef"
  vivify_2465:
    unless $P121, if_3566_end
.annotate 'line', 2391
    set $P123, $P3542
    unless_null $P123, vivify_2466
    new $P123, "Undef"
  vivify_2466:
    set $P3568, param_3540
    unless_null $P3568, vivify_2467
    $P3568 = root_new ['parrot';'Hash']
  vivify_2467:
    set $P3569, $P3568["typename"]
    unless_null $P3569, vivify_2468
    $P3569 = root_new ['parrot';'ResizablePMCArray']
  vivify_2468:
    set $P124, $P3569[0]
    unless_null $P124, vivify_2469
    new $P124, "Undef"
  vivify_2469:
    $P125 = $P124."ast"()
    $P123."multitype"($P125)
  if_3566_end:
.annotate 'line', 2395
    set $P3571, param_3540
    unless_null $P3571, vivify_2470
    $P3571 = root_new ['parrot';'Hash']
  vivify_2470:
    set $P121, $P3571["definedness"]
    unless_null $P121, vivify_2471
    new $P121, "Undef"
  vivify_2471:
    unless $P121, if_3570_end
.annotate 'line', 2396
    set $P3572, param_3540
    unless_null $P3572, vivify_2472
    $P3572 = root_new ['parrot';'Hash']
  vivify_2472:
    set $P3573, $P3572["definedness"]
    unless_null $P3573, vivify_2473
    $P3573 = root_new ['parrot';'ResizablePMCArray']
  vivify_2473:
    set $P123, $P3573[0]
    unless_null $P123, vivify_2474
    new $P123, "Undef"
  vivify_2474:
    set $S100, $P123
    new $P124, 'String'
    set $P124, $S100
    set $P3574, $P3542
    unless_null $P3574, vivify_2475
    $P3574 = root_new ['parrot';'Hash']
    set $P3542, $P3574
  vivify_2475:
    set $P3574["definedness"], $P124
  if_3570_end:
.annotate 'line', 2399
    set $P121, param_3540
    set $P123, $P3542
    unless_null $P123, vivify_2476
    new $P123, "Undef"
  vivify_2476:
    $P124 = $P121."!make"($P123)
.annotate 'line', 2358
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "param_var" :anon :subid("312_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3576
    .param pmc param_3577
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2402
    .lex "self", param_3576
    .lex "$/", param_3577
.annotate 'line', 2403
    new $P118, "Undef"
    set $P3578, $P118
    .lex "$name", $P3578
.annotate 'line', 2404
    new $P120, "Undef"
    set $P3579, $P120
    .lex "$past", $P3579
.annotate 'line', 2403
    set $P121, param_3577
    unless_null $P121, vivify_2477
    new $P121, "Undef"
  vivify_2477:
    set $S100, $P121
    new $P123, 'String'
    set $P123, $S100
    set $P3578, $P123
.annotate 'line', 2404
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P123, $P121, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Var"]
    set $P126, $P3578
    unless_null $P126, vivify_2478
    new $P126, "Undef"
  vivify_2478:
    set $P127, param_3577
    unless_null $P127, vivify_2479
    new $P127, "Undef"
  vivify_2479:
    $P128 = $P125."new"($P126 :named("name"), "parameter" :named("scope"), 1 :named("isdecl"), 1 :named("directaccess"), $P127 :named("node"))
    set $P3579, $P128
.annotate 'line', 2406
    find_dynamic_lex $P124, "$*W"
    unless_null $P124, vivify_2480
    get_hll_global $P121, "GLOBAL"
    get_who $P123, $P121
    set $P124, $P123["$W"]
    unless_null $P124, vivify_2481
    die "Contextual $*W not found"
  vivify_2481:
  vivify_2480:
    $P125 = $P124."cur_lexpad"()
    set $P126, $P3578
    unless_null $P126, vivify_2482
    new $P126, "Undef"
  vivify_2482:
    $P125."symbol"($P126, "lexical" :named("scope"))
.annotate 'line', 2407
    set $P121, param_3577
    set $P123, $P3579
    unless_null $P123, vivify_2483
    new $P123, "Undef"
  vivify_2483:
    $P124 = $P121."!make"($P123)
.annotate 'line', 2402
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "named_param" :anon :subid("313_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3581
    .param pmc param_3582
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2410
    .lex "self", param_3581
    .lex "$/", param_3582
.annotate 'line', 2411
    new $P118, "Undef"
    set $P3583, $P118
    .lex "$past", $P3583
    set $P3584, param_3582
    unless_null $P3584, vivify_2484
    $P3584 = root_new ['parrot';'Hash']
  vivify_2484:
    set $P120, $P3584["param_var"]
    unless_null $P120, vivify_2485
    new $P120, "Undef"
  vivify_2485:
    $P121 = $P120."ast"()
    set $P3583, $P121
.annotate 'line', 2412
    set $P120, $P3583
    unless_null $P120, vivify_2486
    new $P120, "Undef"
  vivify_2486:
    set $P3585, param_3582
    unless_null $P3585, vivify_2487
    $P3585 = root_new ['parrot';'Hash']
  vivify_2487:
    set $P3586, $P3585["param_var"]
    unless_null $P3586, vivify_2488
    $P3586 = root_new ['parrot';'Hash']
  vivify_2488:
    set $P121, $P3586["name"]
    unless_null $P121, vivify_2489
    new $P121, "Undef"
  vivify_2489:
    set $S100, $P121
    $P120."named"($S100)
.annotate 'line', 2413
    set $P120, param_3582
    set $P121, $P3583
    unless_null $P121, vivify_2490
    new $P121, "Undef"
  vivify_2490:
    $P123 = $P120."!make"($P121)
.annotate 'line', 2410
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "typename" :anon :subid("314_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3588
    .param pmc param_3589
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2416
    .const 'Sub' $P3594 = "829_1337966799.879" 
    capture_lex $P3594
    .lex "self", param_3588
    .lex "$/", param_3589
.annotate 'line', 2420
    $P3591 = root_new ['parrot';'ResizablePMCArray']
    set $P3590, $P3591
    .lex "@name", $P3590
.annotate 'line', 2421
    new $P118, "Undef"
    set $P3592, $P118
    .lex "$found", $P3592
.annotate 'line', 2420
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "HLL"
    get_who $P123, $P121
    set $P124, $P123["Compiler"]
    set $P125, param_3589
    unless_null $P125, vivify_2491
    new $P125, "Undef"
  vivify_2491:
    set $S100, $P125
    $P126 = $P124."parse_name"($S100)
    set $P3590, $P126
.annotate 'line', 2421
    new $P120, "Float"
    assign $P120, 0
    set $P3592, $P120
.annotate 'line', 2422
    .const 'Sub' $P3594 = "829_1337966799.879" 
    capture_lex $P3594
    $P3594()
.annotate 'line', 2427
    set $P121, $P3592
    unless_null $P121, vivify_2498
    new $P121, "Undef"
  vivify_2498:
    unless $P121, unless_3604
    set $P120, $P121
    goto unless_3604_end
  unless_3604:
.annotate 'line', 2428
    set $P123, param_3589
    unless_null $P123, vivify_2499
    new $P123, "Undef"
  vivify_2499:
    $P124 = $P123."CURSOR"()
    new $P125, "String"
    assign $P125, "Use of undeclared type '"
    set $P126, param_3589
    unless_null $P126, vivify_2500
    new $P126, "Undef"
  vivify_2500:
    set $S100, $P126
    concat $P127, $P125, $S100
    concat $P128, $P127, "'"
    $P129 = $P124."panic"($P128)
.annotate 'line', 2427
    set $P120, $P129
  unless_3604_end:
.annotate 'line', 2416
    .return ($P120)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block3593"  :anon :subid("829_1337966799.879") :outer("314_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2422
    new $P3599, 'ExceptionHandler'
    set_label $P3599, control_3598
    $P3599."handle_types_except"(.CONTROL_ALL)
    push_eh $P3599
.annotate 'line', 2423
    new $P120, "Undef"
    set $P3595, $P120
    .lex "$sym", $P3595
    find_dynamic_lex $P124, "$*W"
    unless_null $P124, vivify_2492
    get_hll_global $P121, "GLOBAL"
    get_who $P123, $P121
    set $P124, $P123["$W"]
    unless_null $P124, vivify_2493
    die "Contextual $*W not found"
  vivify_2493:
  vivify_2492:
    find_lex $P3596, "@name"
    unless_null $P3596, vivify_2494
    $P3596 = root_new ['parrot';'ResizablePMCArray']
  vivify_2494:
    $P125 = $P124."find_sym"($P3596)
    set $P3595, $P125
.annotate 'line', 2424
    find_dynamic_lex $P121, "$/"
    find_dynamic_lex $P125, "$*W"
    unless_null $P125, vivify_2495
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$W"]
    unless_null $P125, vivify_2496
    die "Contextual $*W not found"
  vivify_2496:
  vivify_2495:
    set $P126, $P3595
    unless_null $P126, vivify_2497
    new $P126, "Undef"
  vivify_2497:
    $P127 = $P125."get_ref"($P126)
    $P121."!make"($P127)
.annotate 'line', 2425
    new $P121, "Float"
    assign $P121, 1
    store_lex "$found", $P121
.annotate 'line', 2422
    pop_eh 
    goto skip_handler_3597
  control_3598:
    peek_exception $P3600
    .local pmc exception 
    .get_results (exception) 
    new $P3602, 'Integer'
    set $P3602, 1
    set exception["handled"], $P3602
    set $I3603, exception["handled"]
    eq $I3603, 1, handled_3601
    rethrow exception
  handled_3601:
    finalize $P3600
    .return (exception)
  skip_handler_3597:
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "trait" :anon :subid("315_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3606
    .param pmc param_3607
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2432
    .lex "self", param_3606
    .lex "$/", param_3607
.annotate 'line', 2433
    set $P118, param_3607
    set $P3608, param_3607
    unless_null $P3608, vivify_2501
    $P3608 = root_new ['parrot';'Hash']
  vivify_2501:
    set $P120, $P3608["trait_mod"]
    unless_null $P120, vivify_2502
    new $P120, "Undef"
  vivify_2502:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
.annotate 'line', 2432
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "trait_mod:sym<is>" :anon :subid("316_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3610
    .param pmc param_3611
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2436
    .const 'Sub' $P3630 = "832_1337966799.879" 
    capture_lex $P3630
    .const 'Sub' $P3615 = "830_1337966799.879" 
    capture_lex $P3615
    .lex "self", param_3610
    .lex "$/", param_3611
.annotate 'line', 2437
    set $P3613, param_3611
    unless_null $P3613, vivify_2503
    $P3613 = root_new ['parrot';'Hash']
  vivify_2503:
    set $P120, $P3613["longname"]
    unless_null $P120, vivify_2504
    new $P120, "Undef"
  vivify_2504:
    set $S100, $P120
    iseq $I100, $S100, "parrot_vtable"
    if $I100, if_3612
.annotate 'line', 2450
    set $P3628, param_3611
    unless_null $P3628, vivify_2505
    $P3628 = root_new ['parrot';'Hash']
  vivify_2505:
    set $P129, $P3628["longname"]
    unless_null $P129, vivify_2506
    new $P129, "Undef"
  vivify_2506:
    set $S101, $P129
    iseq $I101, $S101, "parrot_vtable_handler"
    if $I101, if_3627
.annotate 'line', 2461
    set $P3643, param_3611
    unless_null $P3643, vivify_2507
    $P3643 = root_new ['parrot';'Hash']
  vivify_2507:
    set $P137, $P3643["longname"]
    unless_null $P137, vivify_2508
    new $P137, "Undef"
  vivify_2508:
    set $S102, $P137
    iseq $I102, $S102, "pirflags"
    if $I102, if_3642
.annotate 'line', 2465
    set $P138, param_3611
    unless_null $P138, vivify_2509
    new $P138, "Undef"
  vivify_2509:
    $P139 = $P138."CURSOR"()
    new $P141, 'String'
    set $P141, "Trait '"
    set $P3644, param_3611
    unless_null $P3644, vivify_2510
    $P3644 = root_new ['parrot';'Hash']
  vivify_2510:
    set $P142, $P3644["longname"]
    unless_null $P142, vivify_2511
    new $P142, "Undef"
  vivify_2511:
    concat $P143, $P141, $P142
    concat $P144, $P143, "' not implemented"
    $P145 = $P139."panic"($P144)
.annotate 'line', 2464
    set $P136, $P145
.annotate 'line', 2461
    goto if_3642_end
  if_3642:
.annotate 'line', 2462
    set $P138, param_3611
    unless_null $P138, vivify_2512
    new $P138, "Undef"
  vivify_2512:
    $P139 = $P138."CURSOR"()
    $P140 = $P139."panic"("Trait 'pirflags' no longer supported; use 'is vtable'")
.annotate 'line', 2461
    set $P136, $P140
  if_3642_end:
    set $P128, $P136
.annotate 'line', 2450
    goto if_3627_end
  if_3627:
    .const 'Sub' $P3630 = "832_1337966799.879" 
    capture_lex $P3630
    $P134 = $P3630()
    set $P128, $P134
  if_3627_end:
    set $P118, $P128
.annotate 'line', 2437
    goto if_3612_end
  if_3612:
    .const 'Sub' $P3615 = "830_1337966799.879" 
    capture_lex $P3615
    $P126 = $P3615()
    set $P118, $P126
  if_3612_end:
.annotate 'line', 2436
    .return ($P118)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3629"  :anon :subid("832_1337966799.879") :outer("316_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2450
    .const 'Sub' $P3638 = "833_1337966799.879" 
    capture_lex $P3638
.annotate 'line', 2452
    new $P131, "Undef"
    set $P3631, $P131
    .lex "$cpast", $P3631
.annotate 'line', 2455
    new $P132, "Undef"
    set $P3632, $P132
    .lex "$name", $P3632
.annotate 'line', 2456
    new $P133, "Undef"
    set $P3633, $P133
    .lex "$package", $P3633
.annotate 'line', 2452
    find_lex $P3634, "$/"
    unless_null $P3634, vivify_2513
    $P3634 = root_new ['parrot';'Hash']
  vivify_2513:
    set $P3635, $P3634["circumfix"]
    unless_null $P3635, vivify_2514
    $P3635 = root_new ['parrot';'ResizablePMCArray']
  vivify_2514:
    set $P134, $P3635[0]
    unless_null $P134, vivify_2515
    new $P134, "Undef"
  vivify_2515:
    $P135 = $P134."ast"()
    set $P3631, $P135
.annotate 'line', 2454
    get_hll_global $P134, "GLOBAL"
    nqp_get_package_through_who $P135, $P134, "PAST"
    get_who $P136, $P135
    set $P137, $P136["Val"]
    set $P138, $P3631
    unless_null $P138, vivify_2516
    new $P138, "Undef"
  vivify_2516:
    $P139 = $P137."ACCEPTS"($P138)
    if $P139, unless_3636_end
.annotate 'line', 2453
    find_lex $P140, "$/"
    unless_null $P140, vivify_2517
    new $P140, "Undef"
  vivify_2517:
    $P141 = $P140."CURSOR"()
    $P141."panic"("Trait 'parrot_vtable_handler' requires constant scalar argument")
  unless_3636_end:
.annotate 'line', 2455
    set $P134, $P3631
    unless_null $P134, vivify_2518
    new $P134, "Undef"
  vivify_2518:
    $P135 = $P134."value"()
    set $P3632, $P135
.annotate 'line', 2456
    find_dynamic_lex $P136, "$*PACKAGE"
    unless_null $P136, vivify_2519
    get_hll_global $P134, "GLOBAL"
    get_who $P135, $P134
    set $P136, $P135["$PACKAGE"]
    unless_null $P136, vivify_2520
    die "Contextual $*PACKAGE not found"
  vivify_2520:
  vivify_2519:
    set $P3633, $P136
.annotate 'line', 2457
    find_dynamic_lex $P134, "$/"
    .const 'Sub' $P3638 = "833_1337966799.879" 
    newclosure $P3641, $P3638
    $P135 = $P134."!make"($P3641)
.annotate 'line', 2450
    .return ($P135)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3637"  :anon :subid("833_1337966799.879") :outer("832_1337966799.879")
    .param pmc param_3639
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2457
    .lex "$match", param_3639
.annotate 'line', 2458
    find_dynamic_lex $P137, "$*W"
    unless_null $P137, vivify_2521
    get_hll_global $P135, "GLOBAL"
    get_who $P136, $P135
    set $P137, $P136["$W"]
    unless_null $P137, vivify_2522
    die "Contextual $*W not found"
  vivify_2522:
  vivify_2521:
    find_lex $P138, "$package"
    unless_null $P138, vivify_2523
    new $P138, "Undef"
  vivify_2523:
    find_lex $P139, "$name"
    unless_null $P139, vivify_2524
    new $P139, "Undef"
  vivify_2524:
    set $P3640, param_3639
    unless_null $P3640, vivify_2525
    $P3640 = root_new ['parrot';'Hash']
  vivify_2525:
    set $P140, $P3640["variable"]
    unless_null $P140, vivify_2526
    new $P140, "Undef"
  vivify_2526:
    set $S102, $P140
    $P141 = $P137."pkg_add_parrot_vtable_handler_mapping"($P138, $P139, $S102)
.annotate 'line', 2457
    .return ($P141)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3614"  :anon :subid("830_1337966799.879") :outer("316_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2437
    .const 'Sub' $P3624 = "831_1337966799.879" 
    capture_lex $P3624
.annotate 'line', 2439
    new $P121, "Undef"
    set $P3616, $P121
    .lex "$cpast", $P3616
.annotate 'line', 2442
    new $P123, "Undef"
    set $P3617, $P123
    .lex "$name", $P3617
.annotate 'line', 2443
    new $P124, "Undef"
    set $P3618, $P124
    .lex "$package", $P3618
.annotate 'line', 2444
    new $P125, "Undef"
    set $P3619, $P125
    .lex "$is_dispatcher", $P3619
.annotate 'line', 2439
    find_lex $P3620, "$/"
    unless_null $P3620, vivify_2527
    $P3620 = root_new ['parrot';'Hash']
  vivify_2527:
    set $P3621, $P3620["circumfix"]
    unless_null $P3621, vivify_2528
    $P3621 = root_new ['parrot';'ResizablePMCArray']
  vivify_2528:
    set $P126, $P3621[0]
    unless_null $P126, vivify_2529
    new $P126, "Undef"
  vivify_2529:
    $P127 = $P126."ast"()
    set $P3616, $P127
.annotate 'line', 2441
    get_hll_global $P126, "GLOBAL"
    nqp_get_package_through_who $P127, $P126, "PAST"
    get_who $P128, $P127
    set $P129, $P128["Val"]
    set $P131, $P3616
    unless_null $P131, vivify_2530
    new $P131, "Undef"
  vivify_2530:
    $P132 = $P129."ACCEPTS"($P131)
    if $P132, unless_3622_end
.annotate 'line', 2440
    find_lex $P133, "$/"
    unless_null $P133, vivify_2531
    new $P133, "Undef"
  vivify_2531:
    $P134 = $P133."CURSOR"()
    $P134."panic"("Trait 'parrot_vtable' requires constant scalar argument")
  unless_3622_end:
.annotate 'line', 2442
    set $P126, $P3616
    unless_null $P126, vivify_2532
    new $P126, "Undef"
  vivify_2532:
    $P127 = $P126."value"()
    set $P3617, $P127
.annotate 'line', 2443
    find_dynamic_lex $P128, "$*PACKAGE"
    unless_null $P128, vivify_2533
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["$PACKAGE"]
    unless_null $P128, vivify_2534
    die "Contextual $*PACKAGE not found"
  vivify_2534:
  vivify_2533:
    set $P3618, $P128
.annotate 'line', 2444
    find_dynamic_lex $P128, "$*SCOPE"
    unless_null $P128, vivify_2535
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["$SCOPE"]
    unless_null $P128, vivify_2536
    die "Contextual $*SCOPE not found"
  vivify_2536:
  vivify_2535:
    set $S101, $P128
    iseq $I101, $S101, "proto"
    new $P129, 'Integer'
    set $P129, $I101
    set $P3619, $P129
.annotate 'line', 2445
    find_dynamic_lex $P126, "$/"
    .const 'Sub' $P3624 = "831_1337966799.879" 
    newclosure $P3626, $P3624
    $P127 = $P126."!make"($P3626)
.annotate 'line', 2437
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3623"  :anon :subid("831_1337966799.879") :outer("830_1337966799.879")
    .param pmc param_3625
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2445
    .lex "$match", param_3625
.annotate 'line', 2446
    find_dynamic_lex $P129, "$*W"
    unless_null $P129, vivify_2537
    get_hll_global $P127, "GLOBAL"
    get_who $P128, $P127
    set $P129, $P128["$W"]
    unless_null $P129, vivify_2538
    die "Contextual $*W not found"
  vivify_2538:
  vivify_2537:
    find_lex $P131, "$package"
    unless_null $P131, vivify_2539
    new $P131, "Undef"
  vivify_2539:
    find_lex $P132, "$name"
    unless_null $P132, vivify_2540
    new $P132, "Undef"
  vivify_2540:
.annotate 'line', 2447
    find_dynamic_lex $P135, "$*W"
    unless_null $P135, vivify_2541
    get_hll_global $P133, "GLOBAL"
    get_who $P134, $P133
    set $P135, $P134["$W"]
    unless_null $P135, vivify_2542
    die "Contextual $*W not found"
  vivify_2542:
  vivify_2541:
    set $P136, param_3625
    unless_null $P136, vivify_2543
    new $P136, "Undef"
  vivify_2543:
    $P137 = $P136."ast"()
    set $P138, $P137["block_past"]
    unless_null $P138, vivify_2544
    new $P138, "Undef"
  vivify_2544:
    find_lex $P139, "$name"
    unless_null $P139, vivify_2545
    new $P139, "Undef"
  vivify_2545:
    find_lex $P140, "$is_dispatcher"
    unless_null $P140, vivify_2546
    new $P140, "Undef"
  vivify_2546:
    $P141 = $P135."create_code"($P138, $P139, $P140)
    $P142 = $P129."pkg_add_method"($P131, "add_parrot_vtable_mapping", $P132, $P141)
.annotate 'line', 2445
    .return ($P142)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "regex_declarator" :anon :subid("317_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3646
    .param pmc param_3647
    .param pmc param_3648 :optional
    .param int has_param_3648 :opt_flag
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2469
    .const 'Sub' $P3659 = "835_1337966799.879" 
    capture_lex $P3659
    .const 'Sub' $P3655 = "834_1337966799.879" 
    capture_lex $P3655
    .lex "self", param_3646
    .lex "$/", param_3647
    if has_param_3648, optparam_2547
    new $P118, "Undef"
    set param_3648, $P118
  optparam_2547:
    .lex "$key", param_3648
.annotate 'line', 2470
    new $P120, "Undef"
    set $P3649, $P120
    .lex "$name", $P3649
.annotate 'line', 2471
    new $P121, "Undef"
    set $P3650, $P121
    .lex "$past", $P3650
.annotate 'line', 2470
    set $P3651, param_3647
    unless_null $P3651, vivify_2548
    $P3651 = root_new ['parrot';'Hash']
  vivify_2548:
    set $P123, $P3651["deflongname"]
    unless_null $P123, vivify_2549
    new $P123, "Undef"
  vivify_2549:
    $P124 = $P123."ast"()
    set $S100, $P124
    new $P125, 'String'
    set $P125, $S100
    set $P3649, $P125
.annotate 'line', 2469
    set $P123, $P3650
    unless_null $P123, vivify_2550
    new $P123, "Undef"
  vivify_2550:
.annotate 'line', 2472
    set $P3653, param_3647
    unless_null $P3653, vivify_2551
    $P3653 = root_new ['parrot';'Hash']
  vivify_2551:
    set $P123, $P3653["proto"]
    unless_null $P123, vivify_2552
    new $P123, "Undef"
  vivify_2552:
    if $P123, if_3652
.annotate 'line', 2491
    .const 'Sub' $P3659 = "835_1337966799.879" 
    capture_lex $P3659
    $P3659()
    goto if_3652_end
  if_3652:
.annotate 'line', 2474
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Stmts"]
.annotate 'line', 2475
    get_hll_global $P128, "GLOBAL"
    nqp_get_package_through_who $P129, $P128, "PAST"
    get_who $P131, $P129
    set $P132, $P131["Block"]
    set $P133, $P3649
    unless_null $P133, vivify_2587
    new $P133, "Undef"
  vivify_2587:
.annotate 'line', 2476
    get_hll_global $P134, "GLOBAL"
    nqp_get_package_through_who $P135, $P134, "PAST"
    get_who $P136, $P135
    set $P137, $P136["Op"]
.annotate 'line', 2477
    get_hll_global $P138, "GLOBAL"
    nqp_get_package_through_who $P139, $P138, "PAST"
    get_who $P140, $P139
    set $P141, $P140["Var"]
    $P142 = $P141."new"("self" :named("name"), "parameter" :named("scope"))
    set $P143, $P3649
    unless_null $P143, vivify_2588
    new $P143, "Undef"
  vivify_2588:
    $P144 = $P137."new"($P142, $P143, "!protoregex" :named("name"), "callmethod" :named("pasttype"))
.annotate 'line', 2476
    set $P145, param_3647
    unless_null $P145, vivify_2589
    new $P145, "Undef"
  vivify_2589:
    $P146 = $P132."new"($P144, $P133 :named("name"), "declaration" :named("blocktype"), 0 :named("lexical"), $P145 :named("node"))
.annotate 'line', 2475
    $P147 = $P127."new"($P146)
.annotate 'line', 2474
    set $P3650, $P147
.annotate 'line', 2487
    set $P125, $P3650
    unless_null $P125, vivify_2590
    new $P125, "Undef"
  vivify_2590:
    $P126 = $P125."list"()
    defined $I100, $P126
    unless $I100, for_undef_2591
    iter $P124, $P126
    new $P128, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P128, loop3657_handler
    push_eh $P128
  loop3657_test:
    unless $P124, loop3657_done
    shift $P127, $P124
  loop3657_redo:
    .const 'Sub' $P3655 = "834_1337966799.879" 
    capture_lex $P3655
    $P3655($P127)
  loop3657_next:
    goto loop3657_test
  loop3657_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P129, exception, 'type'
    eq $P129, .CONTROL_LOOP_NEXT, loop3657_next
    eq $P129, .CONTROL_LOOP_REDO, loop3657_redo
  loop3657_done:
    pop_eh 
  for_undef_2591:
  if_3652_end:
.annotate 'line', 2516
    set $P123, param_3647
    set $P124, $P3650
    unless_null $P124, vivify_2601
    new $P124, "Undef"
  vivify_2601:
    $P125 = $P123."!make"($P124)
.annotate 'line', 2469
    .return ($P125)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3658"  :anon :subid("835_1337966799.879") :outer("317_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2492
    new $P124, "Undef"
    set $P3660, $P124
    .lex "$block", $P3660
.annotate 'line', 2501
    new $P125, "Undef"
    set $P3661, $P125
    .lex "$regex", $P3661
.annotate 'line', 2492
    find_dynamic_lex $P128, "$*W"
    unless_null $P128, vivify_2553
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["$W"]
    unless_null $P128, vivify_2554
    die "Contextual $*W not found"
  vivify_2554:
  vivify_2553:
    $P129 = $P128."pop_lexpad"()
    set $P3660, $P129
.annotate 'line', 2493
    set $P3662, $P3660
    unless_null $P3662, vivify_2555
    $P3662 = root_new ['parrot';'ResizablePMCArray']
  vivify_2555:
    set $P126, $P3662[0]
    unless_null $P126, vivify_2556
    new $P126, "Undef"
  vivify_2556:
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P128, $P127, "PAST"
    get_who $P129, $P128
    set $P131, $P129["Var"]
    $P132 = $P131."new"("self" :named("name"), "parameter" :named("scope"))
    $P126."unshift"($P132)
.annotate 'line', 2494
    set $P3663, $P3660
    unless_null $P3663, vivify_2557
    $P3663 = root_new ['parrot';'ResizablePMCArray']
  vivify_2557:
    set $P126, $P3663[0]
    unless_null $P126, vivify_2558
    new $P126, "Undef"
  vivify_2558:
.annotate 'line', 2495
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P128, $P127, "PAST"
    get_who $P129, $P128
    set $P131, $P129["Var"]
.annotate 'line', 2496
    get_hll_global $P132, "GLOBAL"
    nqp_get_package_through_who $P133, $P132, "PAST"
    get_who $P134, $P133
    set $P135, $P134["Var"]
    $P136 = $P135."new"("self" :named("name"), "lexical_6model" :named("scope"))
.annotate 'line', 2495
    $P137 = $P131."new"("self" :named("name"), "register" :named("scope"), 1 :named("isdecl"), $P136 :named("viviself"))
    $P126."push"($P137)
.annotate 'line', 2497
    set $P3664, $P3660
    unless_null $P3664, vivify_2559
    $P3664 = root_new ['parrot';'ResizablePMCArray']
  vivify_2559:
    set $P126, $P3664[0]
    unless_null $P126, vivify_2560
    new $P126, "Undef"
  vivify_2560:
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P128, $P127, "PAST"
    get_who $P129, $P128
    set $P131, $P129["Var"]
    $P132 = $P131."new"(unicode:"$\x{a2}" :named("name"), "lexical" :named("scope"), 1 :named("isdecl"))
    $P126."push"($P132)
.annotate 'line', 2498
    set $P3665, $P3660
    unless_null $P3665, vivify_2561
    $P3665 = root_new ['parrot';'ResizablePMCArray']
  vivify_2561:
    set $P126, $P3665[0]
    unless_null $P126, vivify_2562
    new $P126, "Undef"
  vivify_2562:
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P128, $P127, "PAST"
    get_who $P129, $P128
    set $P131, $P129["Var"]
    $P132 = $P131."new"("$/" :named("name"), "lexical" :named("scope"), 1 :named("isdecl"))
    $P126."push"($P132)
.annotate 'line', 2499
    set $P126, $P3660
    unless_null $P126, vivify_2563
    new $P126, "Undef"
  vivify_2563:
    $P126."symbol"(unicode:"$\x{a2}", "lexical" :named("scope"))
.annotate 'line', 2500
    set $P126, $P3660
    unless_null $P126, vivify_2564
    new $P126, "Undef"
  vivify_2564:
    $P126."symbol"("$/", "lexical" :named("scope"))
.annotate 'line', 2501
    get_hll_global $P126, "GLOBAL"
    nqp_get_package_through_who $P127, $P126, "QRegex"
    nqp_get_package_through_who $P128, $P127, "P6Regex"
    nqp_get_package_through_who $P129, $P128, "Actions"
    get_who $P131, $P129
    set $P132, $P131["buildsub"]
    find_lex $P3666, "$/"
    unless_null $P3666, vivify_2565
    $P3666 = root_new ['parrot';'Hash']
  vivify_2565:
    set $P133, $P3666["p6regex"]
    unless_null $P133, vivify_2566
    new $P133, "Undef"
  vivify_2566:
    $P134 = $P133."ast"()
    set $P135, $P3660
    unless_null $P135, vivify_2567
    new $P135, "Undef"
  vivify_2567:
    $P136 = $P132($P134, $P135)
    set $P3661, $P136
.annotate 'line', 2502
    set $P126, $P3661
    unless_null $P126, vivify_2568
    new $P126, "Undef"
  vivify_2568:
    find_lex $P127, "$name"
    unless_null $P127, vivify_2569
    new $P127, "Undef"
  vivify_2569:
    $P126."name"($P127)
.annotate 'line', 2504
    find_dynamic_lex $P129, "$*PKGDECL"
    unless_null $P129, vivify_2570
    get_hll_global $P127, "GLOBAL"
    get_who $P128, $P127
    set $P129, $P128["$PKGDECL"]
    unless_null $P129, vivify_2571
    die "Contextual $*PKGDECL not found"
  vivify_2571:
  vivify_2570:
    if $P129, if_3668
    set $P126, $P129
    goto if_3668_end
  if_3668:
    find_dynamic_lex $P133, "$*PACKAGE"
    unless_null $P133, vivify_2572
    get_hll_global $P131, "GLOBAL"
    get_who $P132, $P131
    set $P133, $P132["$PACKAGE"]
    unless_null $P133, vivify_2573
    die "Contextual $*PACKAGE not found"
  vivify_2573:
  vivify_2572:
    get_how $P134, $P133
    can $I100, $P134, "add_method"
    new $P126, 'Integer'
    set $P126, $I100
  if_3668_end:
    unless $P126, if_3667_end
.annotate 'line', 2506
    find_dynamic_lex $P137, "$*W"
    unless_null $P137, vivify_2574
    get_hll_global $P135, "GLOBAL"
    get_who $P136, $P135
    set $P137, $P136["$W"]
    unless_null $P137, vivify_2575
    die "Contextual $*W not found"
  vivify_2575:
  vivify_2574:
    find_dynamic_lex $P140, "$*PACKAGE"
    unless_null $P140, vivify_2576
    get_hll_global $P138, "GLOBAL"
    get_who $P139, $P138
    set $P140, $P139["$PACKAGE"]
    unless_null $P140, vivify_2577
    die "Contextual $*PACKAGE not found"
  vivify_2577:
  vivify_2576:
    find_lex $P141, "$name"
    unless_null $P141, vivify_2578
    new $P141, "Undef"
  vivify_2578:
    find_dynamic_lex $P144, "$*W"
    unless_null $P144, vivify_2579
    get_hll_global $P142, "GLOBAL"
    get_who $P143, $P142
    set $P144, $P143["$W"]
    unless_null $P144, vivify_2580
    die "Contextual $*W not found"
  vivify_2580:
  vivify_2579:
    set $P145, $P3661
    unless_null $P145, vivify_2581
    new $P145, "Undef"
  vivify_2581:
    find_lex $P146, "$name"
    unless_null $P146, vivify_2582
    new $P146, "Undef"
  vivify_2582:
    $P147 = $P144."create_code"($P145, $P146, 0)
    $P137."pkg_add_method"($P140, "add_method", $P141, $P147)
  if_3667_end:
.annotate 'line', 2510
    get_hll_global $P126, "GLOBAL"
    nqp_get_package_through_who $P127, $P126, "PAST"
    get_who $P128, $P127
    set $P129, $P128["Op"]
.annotate 'line', 2512
    new $P131, "ResizablePMCArray"
    push $P131, "NQPRegexMethod"
    find_lex $P132, "$/"
    unless_null $P132, vivify_2583
    new $P132, "Undef"
  vivify_2583:
    $P133 = "lexical_package_lookup"($P131, $P132)
    set $P134, $P3661
    unless_null $P134, vivify_2584
    new $P134, "Undef"
  vivify_2584:
    $P135 = $P129."new"($P133, $P134, "callmethod" :named("pasttype"), "new" :named("name"))
.annotate 'line', 2510
    store_lex "$past", $P135
.annotate 'line', 2514
    set $P126, $P3661
    unless_null $P126, vivify_2585
    new $P126, "Undef"
  vivify_2585:
    find_lex $P3669, "$past"
    unless_null $P3669, vivify_2586
    $P3669 = root_new ['parrot';'Hash']
    store_lex "$past", $P3669
  vivify_2586:
    set $P3669["sink"], $P126
.annotate 'line', 2491
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3654"  :anon :subid("834_1337966799.879") :outer("317_1337966799.879")
    .param pmc param_3656
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2487
    .lex "$_", param_3656
.annotate 'line', 2488
    find_dynamic_lex $P131, "$*W"
    unless_null $P131, vivify_2592
    get_hll_global $P128, "GLOBAL"
    get_who $P129, $P128
    set $P131, $P129["$W"]
    unless_null $P131, vivify_2593
    die "Contextual $*W not found"
  vivify_2593:
  vivify_2592:
    find_dynamic_lex $P134, "$*PACKAGE"
    unless_null $P134, vivify_2594
    get_hll_global $P132, "GLOBAL"
    get_who $P133, $P132
    set $P134, $P133["$PACKAGE"]
    unless_null $P134, vivify_2595
    die "Contextual $*PACKAGE not found"
  vivify_2595:
  vivify_2594:
    find_lex $P135, "$_"
    unless_null $P135, vivify_2596
    new $P135, "Undef"
  vivify_2596:
    $P136 = $P135."name"()
    find_dynamic_lex $P139, "$*W"
    unless_null $P139, vivify_2597
    get_hll_global $P137, "GLOBAL"
    get_who $P138, $P137
    set $P139, $P138["$W"]
    unless_null $P139, vivify_2598
    die "Contextual $*W not found"
  vivify_2598:
  vivify_2597:
    find_lex $P140, "$_"
    unless_null $P140, vivify_2599
    new $P140, "Undef"
  vivify_2599:
    find_lex $P141, "$_"
    unless_null $P141, vivify_2600
    new $P141, "Undef"
  vivify_2600:
    $P142 = $P141."name"()
    $P143 = $P139."create_code"($P140, $P142, 0)
    $P144 = $P131."pkg_add_method"($P134, "add_method", $P136, $P143)
.annotate 'line', 2487
    .return ($P144)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "dotty" :anon :subid("318_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3671
    .param pmc param_3672
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2520
    .lex "self", param_3671
    .lex "$/", param_3672
.annotate 'line', 2521
    new $P118, "Undef"
    set $P3673, $P118
    .lex "$past", $P3673
    set $P3675, param_3672
    unless_null $P3675, vivify_2602
    $P3675 = root_new ['parrot';'Hash']
  vivify_2602:
    set $P121, $P3675["args"]
    unless_null $P121, vivify_2603
    new $P121, "Undef"
  vivify_2603:
    if $P121, if_3674
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P128, $P127["Op"]
    set $P129, param_3672
    unless_null $P129, vivify_2604
    new $P129, "Undef"
  vivify_2604:
    $P131 = $P128."new"($P129 :named("node"))
    set $P120, $P131
    goto if_3674_end
  if_3674:
    set $P3676, param_3672
    unless_null $P3676, vivify_2605
    $P3676 = root_new ['parrot';'Hash']
  vivify_2605:
    set $P3677, $P3676["args"]
    unless_null $P3677, vivify_2606
    $P3677 = root_new ['parrot';'ResizablePMCArray']
  vivify_2606:
    set $P123, $P3677[0]
    unless_null $P123, vivify_2607
    new $P123, "Undef"
  vivify_2607:
    $P124 = $P123."ast"()
    set $P120, $P124
  if_3674_end:
    set $P3673, $P120
.annotate 'line', 2522
    set $P3679, param_3672
    unless_null $P3679, vivify_2608
    $P3679 = root_new ['parrot';'Hash']
  vivify_2608:
    set $P120, $P3679["quote"]
    unless_null $P120, vivify_2609
    new $P120, "Undef"
  vivify_2609:
    if $P120, if_3678
.annotate 'line', 2526
    set $P3682, param_3672
    unless_null $P3682, vivify_2610
    $P3682 = root_new ['parrot';'Hash']
  vivify_2610:
    set $P121, $P3682["longname"]
    unless_null $P121, vivify_2611
    new $P121, "Undef"
  vivify_2611:
    set $S100, $P121
    iseq $I100, $S100, "HOW"
    if $I100, if_3681
.annotate 'line', 2529
    set $P3684, param_3672
    unless_null $P3684, vivify_2612
    $P3684 = root_new ['parrot';'Hash']
  vivify_2612:
    set $P123, $P3684["longname"]
    unless_null $P123, vivify_2613
    new $P123, "Undef"
  vivify_2613:
    set $S101, $P123
    iseq $I101, $S101, "WHAT"
    if $I101, if_3683
.annotate 'line', 2532
    set $P3686, param_3672
    unless_null $P3686, vivify_2614
    $P3686 = root_new ['parrot';'Hash']
  vivify_2614:
    set $P124, $P3686["longname"]
    unless_null $P124, vivify_2615
    new $P124, "Undef"
  vivify_2615:
    set $S102, $P124
    iseq $I102, $S102, "WHO"
    if $I102, if_3685
.annotate 'line', 2535
    set $P3688, param_3672
    unless_null $P3688, vivify_2616
    $P3688 = root_new ['parrot';'Hash']
  vivify_2616:
    set $P125, $P3688["longname"]
    unless_null $P125, vivify_2617
    new $P125, "Undef"
  vivify_2617:
    set $S103, $P125
    iseq $I103, $S103, "REPR"
    if $I103, if_3687
.annotate 'line', 2539
    set $P126, $P3673
    unless_null $P126, vivify_2618
    new $P126, "Undef"
  vivify_2618:
    set $P3689, param_3672
    unless_null $P3689, vivify_2619
    $P3689 = root_new ['parrot';'Hash']
  vivify_2619:
    set $P127, $P3689["longname"]
    unless_null $P127, vivify_2620
    new $P127, "Undef"
  vivify_2620:
    set $S104, $P127
    $P126."name"($S104)
.annotate 'line', 2540
    set $P126, $P3673
    unless_null $P126, vivify_2621
    new $P126, "Undef"
  vivify_2621:
    $P126."pasttype"("callmethod")
.annotate 'line', 2538
    goto if_3687_end
  if_3687:
.annotate 'line', 2536
    set $P126, $P3673
    unless_null $P126, vivify_2622
    new $P126, "Undef"
  vivify_2622:
    $P126."pirop"("repr_name SP")
  if_3687_end:
.annotate 'line', 2535
    goto if_3685_end
  if_3685:
.annotate 'line', 2533
    set $P125, $P3673
    unless_null $P125, vivify_2623
    new $P125, "Undef"
  vivify_2623:
    $P125."pirop"("get_who PP")
  if_3685_end:
.annotate 'line', 2532
    goto if_3683_end
  if_3683:
.annotate 'line', 2530
    set $P124, $P3673
    unless_null $P124, vivify_2624
    new $P124, "Undef"
  vivify_2624:
    $P124."pirop"("get_what PP")
  if_3683_end:
.annotate 'line', 2529
    goto if_3681_end
  if_3681:
.annotate 'line', 2527
    set $P123, $P3673
    unless_null $P123, vivify_2625
    new $P123, "Undef"
  vivify_2625:
    $P123."pirop"("get_how PP")
  if_3681_end:
.annotate 'line', 2526
    goto if_3678_end
  if_3678:
.annotate 'line', 2523
    set $P121, $P3673
    unless_null $P121, vivify_2626
    new $P121, "Undef"
  vivify_2626:
    set $P3680, param_3672
    unless_null $P3680, vivify_2627
    $P3680 = root_new ['parrot';'Hash']
  vivify_2627:
    set $P123, $P3680["quote"]
    unless_null $P123, vivify_2628
    new $P123, "Undef"
  vivify_2628:
    $P124 = $P123."ast"()
    $P121."name"($P124)
.annotate 'line', 2524
    set $P121, $P3673
    unless_null $P121, vivify_2629
    new $P121, "Undef"
  vivify_2629:
    $P121."pasttype"("callmethod")
  if_3678_end:
.annotate 'line', 2542
    set $P120, param_3672
    set $P121, $P3673
    unless_null $P121, vivify_2630
    new $P121, "Undef"
  vivify_2630:
    $P123 = $P120."!make"($P121)
.annotate 'line', 2520
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<self>" :anon :subid("319_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3691
    .param pmc param_3692
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2547
    .lex "self", param_3691
    .lex "$/", param_3692
.annotate 'line', 2548
    set $P118, param_3692
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Op"]
.annotate 'line', 2549
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P128, $P127["Var"]
    $P129 = $P128."new"("self" :named("name"))
    $P131 = $P124."new"($P129, "nqp_decontainerize PP" :named("pirop"))
.annotate 'line', 2548
    $P132 = $P118."!make"($P131)
.annotate 'line', 2547
    .return ($P132)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<identifier>" :anon :subid("320_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3694
    .param pmc param_3695
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2552
    .lex "self", param_3694
    .lex "$/", param_3695
.annotate 'line', 2553
    new $P118, "Undef"
    set $P3696, $P118
    .lex "$past", $P3696
    set $P3697, param_3695
    unless_null $P3697, vivify_2631
    $P3697 = root_new ['parrot';'Hash']
  vivify_2631:
    set $P120, $P3697["args"]
    unless_null $P120, vivify_2632
    new $P120, "Undef"
  vivify_2632:
    $P121 = $P120."ast"()
    set $P3696, $P121
.annotate 'line', 2554
    set $P120, $P3696
    unless_null $P120, vivify_2633
    new $P120, "Undef"
  vivify_2633:
    set $P3698, param_3695
    unless_null $P3698, vivify_2634
    $P3698 = root_new ['parrot';'Hash']
  vivify_2634:
    set $P121, $P3698["deflongname"]
    unless_null $P121, vivify_2635
    new $P121, "Undef"
  vivify_2635:
    set $S100, $P121
    $P120."name"($S100)
.annotate 'line', 2555
    set $P120, param_3695
    set $P121, $P3696
    unless_null $P121, vivify_2636
    new $P121, "Undef"
  vivify_2636:
    $P123 = $P120."!make"($P121)
.annotate 'line', 2552
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<name>" :anon :subid("321_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3700
    .param pmc param_3701
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2558
    .const 'Sub' $P3708 = "836_1337966799.879" 
    capture_lex $P3708
    .lex "self", param_3700
    .lex "$/", param_3701
.annotate 'line', 2560
    new $P118, "Undef"
    set $P3702, $P118
    .lex "$var", $P3702
.annotate 'line', 2570
    new $P120, "Undef"
    set $P3703, $P120
    .lex "$past", $P3703
.annotate 'line', 2558
    set $P121, $P3702
    unless_null $P121, vivify_2637
    new $P121, "Undef"
  vivify_2637:
.annotate 'line', 2561
    find_dynamic_lex $P124, "$*W"
    unless_null $P124, vivify_2638
    get_hll_global $P121, "GLOBAL"
    get_who $P123, $P121
    set $P124, $P123["$W"]
    unless_null $P124, vivify_2639
    die "Contextual $*W not found"
  vivify_2639:
  vivify_2638:
    set $P3705, param_3701
    unless_null $P3705, vivify_2640
    $P3705 = root_new ['parrot';'Hash']
  vivify_2640:
    set $P125, $P3705["name"]
    unless_null $P125, vivify_2641
    new $P125, "Undef"
  vivify_2641:
    set $S100, $P125
    $P126 = $P124."is_lexical"($S100)
    if $P126, if_3704
.annotate 'line', 2564
    .const 'Sub' $P3708 = "836_1337966799.879" 
    capture_lex $P3708
    $P3708()
    goto if_3704_end
  if_3704:
.annotate 'line', 2562
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P128, $P127, "PAST"
    get_who $P129, $P128
    set $P131, $P129["Var"]
    set $P3706, param_3701
    unless_null $P3706, vivify_2647
    $P3706 = root_new ['parrot';'Hash']
  vivify_2647:
    set $P132, $P3706["name"]
    unless_null $P132, vivify_2648
    new $P132, "Undef"
  vivify_2648:
    set $S101, $P132
    $P133 = $P131."new"($S101 :named("name"), "lexical" :named("scope"))
    set $P3702, $P133
  if_3704_end:
.annotate 'line', 2570
    set $P121, $P3702
    unless_null $P121, vivify_2649
    new $P121, "Undef"
  vivify_2649:
    set $P3703, $P121
.annotate 'line', 2571
    set $P3715, param_3701
    unless_null $P3715, vivify_2650
    $P3715 = root_new ['parrot';'Hash']
  vivify_2650:
    set $P121, $P3715["args"]
    unless_null $P121, vivify_2651
    new $P121, "Undef"
  vivify_2651:
    unless $P121, if_3714_end
.annotate 'line', 2572
    set $P3716, param_3701
    unless_null $P3716, vivify_2652
    $P3716 = root_new ['parrot';'Hash']
  vivify_2652:
    set $P3717, $P3716["args"]
    unless_null $P3717, vivify_2653
    $P3717 = root_new ['parrot';'ResizablePMCArray']
  vivify_2653:
    set $P123, $P3717[0]
    unless_null $P123, vivify_2654
    new $P123, "Undef"
  vivify_2654:
    $P124 = $P123."ast"()
    set $P3703, $P124
.annotate 'line', 2573
    set $P123, $P3703
    unless_null $P123, vivify_2655
    new $P123, "Undef"
  vivify_2655:
    set $P124, $P3702
    unless_null $P124, vivify_2656
    new $P124, "Undef"
  vivify_2656:
    $P123."unshift"($P124)
  if_3714_end:
.annotate 'line', 2575
    set $P121, param_3701
    set $P123, $P3703
    unless_null $P123, vivify_2657
    new $P123, "Undef"
  vivify_2657:
    $P124 = $P121."!make"($P123)
.annotate 'line', 2558
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3707"  :anon :subid("836_1337966799.879") :outer("321_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2565
    $P3710 = root_new ['parrot';'ResizablePMCArray']
    set $P3709, $P3710
    .lex "@ns", $P3709
    find_lex $P3711, "$/"
    unless_null $P3711, vivify_2642
    $P3711 = root_new ['parrot';'Hash']
  vivify_2642:
    set $P3712, $P3711["name"]
    unless_null $P3712, vivify_2643
    $P3712 = root_new ['parrot';'Hash']
  vivify_2643:
    set $P127, $P3712["identifier"]
    unless_null $P127, vivify_2644
    new $P127, "Undef"
  vivify_2644:
    clone $P128, $P127
    set $P3709, $P128
.annotate 'line', 2566
    set $P3713, $P3709
    unless_null $P3713, vivify_2645
    $P3713 = root_new ['parrot';'ResizablePMCArray']
  vivify_2645:
    find_lex $P127, "$/"
    unless_null $P127, vivify_2646
    new $P127, "Undef"
  vivify_2646:
    $P128 = "lexical_package_lookup"($P3713, $P127)
    store_lex "$var", $P128
.annotate 'line', 2564
    .return ($P128)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<pir::op>" :anon :subid("322_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3719
    .param pmc param_3720
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2578
    .lex "self", param_3719
    .lex "$/", param_3720
.annotate 'line', 2579
    new $P118, "Undef"
    set $P3721, $P118
    .lex "$past", $P3721
.annotate 'line', 2580
    new $P120, "Undef"
    set $P3722, $P120
    .lex "$pirop", $P3722
.annotate 'line', 2579
    set $P3724, param_3720
    unless_null $P3724, vivify_2658
    $P3724 = root_new ['parrot';'Hash']
  vivify_2658:
    set $P123, $P3724["args"]
    unless_null $P123, vivify_2659
    new $P123, "Undef"
  vivify_2659:
    if $P123, if_3723
    get_hll_global $P126, "GLOBAL"
    nqp_get_package_through_who $P127, $P126, "PAST"
    get_who $P128, $P127
    set $P129, $P128["Op"]
    set $P131, param_3720
    unless_null $P131, vivify_2660
    new $P131, "Undef"
  vivify_2660:
    $P132 = $P129."new"($P131 :named("node"))
    set $P121, $P132
    goto if_3723_end
  if_3723:
    set $P3725, param_3720
    unless_null $P3725, vivify_2661
    $P3725 = root_new ['parrot';'Hash']
  vivify_2661:
    set $P3726, $P3725["args"]
    unless_null $P3726, vivify_2662
    $P3726 = root_new ['parrot';'ResizablePMCArray']
  vivify_2662:
    set $P124, $P3726[0]
    unless_null $P124, vivify_2663
    new $P124, "Undef"
  vivify_2663:
    $P125 = $P124."ast"()
    set $P121, $P125
  if_3723_end:
    set $P3721, $P121
.annotate 'line', 2580
    set $P3727, param_3720
    unless_null $P3727, vivify_2664
    $P3727 = root_new ['parrot';'Hash']
  vivify_2664:
    set $P121, $P3727["op"]
    unless_null $P121, vivify_2665
    new $P121, "Undef"
  vivify_2665:
    set $S100, $P121
    new $P123, 'String'
    set $P123, $S100
    set $P3722, $P123
.annotate 'line', 2581
    set $P121, $P3722
    unless_null $P121, vivify_2666
    new $P121, "Undef"
  vivify_2666:
    set $S100, $P121
    split $P123, "__", $S100
    join $S101, " ", $P123
    new $P124, 'String'
    set $P124, $S101
    set $P3722, $P124
.annotate 'line', 2582
    set $P121, $P3721
    unless_null $P121, vivify_2667
    new $P121, "Undef"
  vivify_2667:
    set $P123, $P3722
    unless_null $P123, vivify_2668
    new $P123, "Undef"
  vivify_2668:
    $P121."pirop"($P123)
.annotate 'line', 2583
    set $P121, $P3721
    unless_null $P121, vivify_2669
    new $P121, "Undef"
  vivify_2669:
    $P121."pasttype"("pirop")
.annotate 'line', 2584
    set $P121, param_3720
    set $P123, $P3721
    unless_null $P123, vivify_2670
    new $P123, "Undef"
  vivify_2670:
    $P124 = $P121."!make"($P123)
.annotate 'line', 2578
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<pir::const>" :anon :subid("323_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3729
    .param pmc param_3730
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2587
    .lex "self", param_3729
    .lex "$/", param_3730
.annotate 'line', 2588
    set $P118, param_3730
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Val"]
    set $P3731, param_3730
    unless_null $P3731, vivify_2671
    $P3731 = root_new ['parrot';'Hash']
  vivify_2671:
    set $P125, $P3731["const"]
    unless_null $P125, vivify_2672
    new $P125, "Undef"
  vivify_2672:
    set $S100, $P125
    set $P126, param_3730
    unless_null $P126, vivify_2673
    new $P126, "Undef"
  vivify_2673:
    $P127 = $P124."new"($S100 :named("value"), "!macro_const" :named("returns"), $P126 :named("node"))
    $P128 = $P118."!make"($P127)
.annotate 'line', 2587
    .return ($P128)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<nqp::op>" :anon :subid("324_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3733
    .param pmc param_3734
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2591
    .lex "self", param_3733
    .lex "$/", param_3734
.annotate 'line', 2592
    new $P118, "Undef"
    set $P3735, $P118
    .lex "$op", $P3735
.annotate 'line', 2593
    new $P120, "Undef"
    set $P3736, $P120
    .lex "$args", $P3736
.annotate 'line', 2594
    new $P121, "Undef"
    set $P3737, $P121
    .lex "$past", $P3737
.annotate 'line', 2592
    set $P3738, param_3734
    unless_null $P3738, vivify_2674
    $P3738 = root_new ['parrot';'Hash']
  vivify_2674:
    set $P123, $P3738["op"]
    unless_null $P123, vivify_2675
    new $P123, "Undef"
  vivify_2675:
    set $S100, $P123
    new $P124, 'String'
    set $P124, $S100
    set $P3735, $P124
.annotate 'line', 2593
    set $P3740, param_3734
    unless_null $P3740, vivify_2676
    $P3740 = root_new ['parrot';'Hash']
  vivify_2676:
    set $P124, $P3740["args"]
    unless_null $P124, vivify_2677
    new $P124, "Undef"
  vivify_2677:
    if $P124, if_3739
    new $P128, "ResizablePMCArray"
    set $P123, $P128
    goto if_3739_end
  if_3739:
    set $P3741, param_3734
    unless_null $P3741, vivify_2678
    $P3741 = root_new ['parrot';'Hash']
  vivify_2678:
    set $P3742, $P3741["args"]
    unless_null $P3742, vivify_2679
    $P3742 = root_new ['parrot';'ResizablePMCArray']
  vivify_2679:
    set $P125, $P3742[0]
    unless_null $P125, vivify_2680
    new $P125, "Undef"
  vivify_2680:
    $P126 = $P125."ast"()
    $P127 = $P126."list"()
    set $P123, $P127
  if_3739_end:
    set $P3736, $P123
.annotate 'line', 2594
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Node"]
    set $P127, $P3736
    unless_null $P127, vivify_2681
    new $P127, "Undef"
  vivify_2681:
    set $P128, $P3735
    unless_null $P128, vivify_2682
    new $P128, "Undef"
  vivify_2682:
    set $P129, param_3734
    unless_null $P129, vivify_2683
    new $P129, "Undef"
  vivify_2683:
    $P131 = $P126."map_node"($P127 :flat, "nqp" :named("map"), $P128 :named("op"), $P129 :named("node"))
    set $P3737, $P131
.annotate 'line', 2597
    set $P123, $P3737
    unless_null $P123, vivify_2684
    new $P123, "Undef"
  vivify_2684:
    defined $I100, $P123
    if $I100, unless_3743_end
.annotate 'line', 2598
    set $P124, param_3734
    unless_null $P124, vivify_2685
    new $P124, "Undef"
  vivify_2685:
    $P125 = $P124."CURSOR"()
    new $P126, 'String'
    set $P126, "Unrecognized nqp:: opcode 'nqp::"
    set $P127, $P3735
    unless_null $P127, vivify_2686
    new $P127, "Undef"
  vivify_2686:
    concat $P128, $P126, $P127
    concat $P129, $P128, "'"
    $P125."panic"($P129)
  unless_3743_end:
.annotate 'line', 2599
    set $P123, param_3734
    set $P124, $P3737
    unless_null $P124, vivify_2687
    new $P124, "Undef"
  vivify_2687:
    $P125 = $P123."!make"($P124)
.annotate 'line', 2591
    .return ($P125)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<onlystar>" :anon :subid("325_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3745
    .param pmc param_3746
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2602
    .lex "self", param_3745
    .lex "$/", param_3746
.annotate 'line', 2603
    set $P118, param_3746
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Op"]
    $P125 = $P124."new"("multi_dispatch_over_lexical_candidates P" :named("pirop"))
    $P126 = $P118."!make"($P125)
.annotate 'line', 2602
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "args" :anon :subid("326_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3748
    .param pmc param_3749
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2608
    .lex "self", param_3748
    .lex "$/", param_3749
    set $P118, param_3749
    set $P3750, param_3749
    unless_null $P3750, vivify_2688
    $P3750 = root_new ['parrot';'Hash']
  vivify_2688:
    set $P120, $P3750["arglist"]
    unless_null $P120, vivify_2689
    new $P120, "Undef"
  vivify_2689:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "arglist" :anon :subid("327_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3752
    .param pmc param_3753
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2610
    .const 'Sub' $P3760 = "837_1337966799.879" 
    capture_lex $P3760
    .lex "self", param_3752
    .lex "$/", param_3753
.annotate 'line', 2611
    new $P118, "Undef"
    set $P3754, $P118
    .lex "$past", $P3754
.annotate 'line', 2619
    new $P120, "Undef"
    set $P3755, $P120
    .lex "$i", $P3755
.annotate 'line', 2620
    new $P121, "Undef"
    set $P3756, $P121
    .lex "$n", $P3756
.annotate 'line', 2611
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Op"]
    set $P127, param_3753
    unless_null $P127, vivify_2690
    new $P127, "Undef"
  vivify_2690:
    $P128 = $P126."new"("call" :named("pasttype"), $P127 :named("node"))
    set $P3754, $P128
.annotate 'line', 2612
    set $P3758, param_3753
    unless_null $P3758, vivify_2691
    $P3758 = root_new ['parrot';'Hash']
  vivify_2691:
    set $P123, $P3758["EXPR"]
    unless_null $P123, vivify_2692
    new $P123, "Undef"
  vivify_2692:
    unless $P123, if_3757_end
    .const 'Sub' $P3760 = "837_1337966799.879" 
    capture_lex $P3760
    $P3760()
  if_3757_end:
.annotate 'line', 2619
    new $P123, "Float"
    assign $P123, 0
    set $P3755, $P123
.annotate 'line', 2620
    set $P123, $P3754
    unless_null $P123, vivify_2703
    new $P123, "Undef"
  vivify_2703:
    $P124 = $P123."list"()
    set $N100, $P124
    new $P125, 'Float'
    set $P125, $N100
    set $P3756, $P125
.annotate 'line', 2621
    new $P125, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P125, loop3781_handler
    push_eh $P125
  loop3781_test:
    set $P123, $P3755
    unless_null $P123, vivify_2704
    new $P123, "Undef"
  vivify_2704:
    set $N100, $P123
    set $P124, $P3756
    unless_null $P124, vivify_2705
    new $P124, "Undef"
  vivify_2705:
    set $N101, $P124
    islt $I100, $N100, $N101
    unless $I100, loop3781_done
  loop3781_redo:
.annotate 'line', 2622
    set $P125, $P3755
    unless_null $P125, vivify_2706
    new $P125, "Undef"
  vivify_2706:
    set $I101, $P125
    set $P3770, $P3754
    unless_null $P3770, vivify_2707
    $P3770 = root_new ['parrot';'ResizablePMCArray']
  vivify_2707:
    set $P126, $P3770[$I101]
    unless_null $P126, vivify_2708
    new $P126, "Undef"
  vivify_2708:
    $S100 = $P126."name"()
    iseq $I102, $S100, "&prefix:<|>"
    unless $I102, if_3769_end
.annotate 'line', 2623
    set $P127, $P3755
    unless_null $P127, vivify_2709
    new $P127, "Undef"
  vivify_2709:
    set $I103, $P127
    set $P3771, $P3754
    unless_null $P3771, vivify_2710
    $P3771 = root_new ['parrot';'ResizablePMCArray']
  vivify_2710:
    set $P3772, $P3771[$I103]
    unless_null $P3772, vivify_2711
    $P3772 = root_new ['parrot';'ResizablePMCArray']
  vivify_2711:
    set $P128, $P3772[0]
    unless_null $P128, vivify_2712
    new $P128, "Undef"
  vivify_2712:
    set $P129, $P3755
    unless_null $P129, vivify_2713
    new $P129, "Undef"
  vivify_2713:
    set $I104, $P129
    set $P3773, $P3754
    unless_null $P3773, vivify_2714
    $P3773 = root_new ['parrot';'ResizablePMCArray']
    set $P3754, $P3773
  vivify_2714:
    set $P3773[$I104], $P128
.annotate 'line', 2624
    set $P127, $P3755
    unless_null $P127, vivify_2715
    new $P127, "Undef"
  vivify_2715:
    set $I103, $P127
    set $P3774, $P3754
    unless_null $P3774, vivify_2716
    $P3774 = root_new ['parrot';'ResizablePMCArray']
  vivify_2716:
    set $P128, $P3774[$I103]
    unless_null $P128, vivify_2717
    new $P128, "Undef"
  vivify_2717:
    $P128."flat"(1)
.annotate 'line', 2625
    set $P128, $P3755
    unless_null $P128, vivify_2718
    new $P128, "Undef"
  vivify_2718:
    set $I103, $P128
    set $P3777, $P3754
    unless_null $P3777, vivify_2719
    $P3777 = root_new ['parrot';'ResizablePMCArray']
  vivify_2719:
    set $P129, $P3777[$I103]
    unless_null $P129, vivify_2720
    new $P129, "Undef"
  vivify_2720:
    get_hll_global $P131, "GLOBAL"
    nqp_get_package_through_who $P132, $P131, "PAST"
    get_who $P133, $P132
    set $P134, $P133["Val"]
    $P135 = $P129."isa"($P134)
    if $P135, if_3776
    set $P127, $P135
    goto if_3776_end
  if_3776:
.annotate 'line', 2626
    set $P136, $P3755
    unless_null $P136, vivify_2721
    new $P136, "Undef"
  vivify_2721:
    set $I104, $P136
    set $P3778, $P3754
    unless_null $P3778, vivify_2722
    $P3778 = root_new ['parrot';'ResizablePMCArray']
  vivify_2722:
    set $P137, $P3778[$I104]
    unless_null $P137, vivify_2723
    new $P137, "Undef"
  vivify_2723:
    $S101 = $P137."name"()
    substr $S102, $S101, 0, 1
    iseq $I105, $S102, "%"
    new $P127, 'Integer'
    set $P127, $I105
  if_3776_end:
    unless $P127, if_3775_end
.annotate 'line', 2627
    set $P138, $P3755
    unless_null $P138, vivify_2724
    new $P138, "Undef"
  vivify_2724:
    set $I106, $P138
    set $P3779, $P3754
    unless_null $P3779, vivify_2725
    $P3779 = root_new ['parrot';'ResizablePMCArray']
  vivify_2725:
    set $P139, $P3779[$I106]
    unless_null $P139, vivify_2726
    new $P139, "Undef"
  vivify_2726:
    $P139."named"(1)
  if_3775_end:
  if_3769_end:
.annotate 'line', 2621
    set $P125, $P3755
    unless_null $P125, vivify_2727
    new $P125, "Undef"
  vivify_2727:
    clone $P3780, $P125
    inc $P125
  loop3781_next:
    goto loop3781_test
  loop3781_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P126, exception, 'type'
    eq $P126, .CONTROL_LOOP_NEXT, loop3781_next
    eq $P126, .CONTROL_LOOP_REDO, loop3781_redo
  loop3781_done:
    pop_eh 
.annotate 'line', 2632
    set $P123, param_3753
    set $P124, $P3754
    unless_null $P124, vivify_2728
    new $P124, "Undef"
  vivify_2728:
    $P125 = $P123."!make"($P124)
.annotate 'line', 2610
    .return ($P125)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block3759"  :anon :subid("837_1337966799.879") :outer("327_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2612
    .const 'Sub' $P3766 = "838_1337966799.879" 
    capture_lex $P3766
.annotate 'line', 2613
    new $P124, "Undef"
    set $P3761, $P124
    .lex "$expr", $P3761
    find_lex $P3762, "$/"
    unless_null $P3762, vivify_2693
    $P3762 = root_new ['parrot';'Hash']
  vivify_2693:
    set $P125, $P3762["EXPR"]
    unless_null $P125, vivify_2694
    new $P125, "Undef"
  vivify_2694:
    $P126 = $P125."ast"()
    set $P3761, $P126
.annotate 'line', 2614
    set $P127, $P3761
    unless_null $P127, vivify_2695
    new $P127, "Undef"
  vivify_2695:
    $S100 = $P127."name"()
    iseq $I100, $S100, "&infix:<,>"
    if $I100, if_3764
    new $P126, 'Integer'
    set $P126, $I100
    goto if_3764_end
  if_3764:
    set $P128, $P3761
    unless_null $P128, vivify_2696
    new $P128, "Undef"
  vivify_2696:
    $P129 = $P128."named"()
    isfalse $I101, $P129
    new $P126, 'Integer'
    set $P126, $I101
  if_3764_end:
    if $P126, if_3763
.annotate 'line', 2617
    find_lex $P132, "$past"
    unless_null $P132, vivify_2697
    new $P132, "Undef"
  vivify_2697:
    set $P133, $P3761
    unless_null $P133, vivify_2698
    new $P133, "Undef"
  vivify_2698:
    $P134 = $P132."push"($P133)
    set $P125, $P134
.annotate 'line', 2614
    goto if_3763_end
  if_3763:
.annotate 'line', 2615
    set $P132, $P3761
    unless_null $P132, vivify_2699
    new $P132, "Undef"
  vivify_2699:
    $P133 = $P132."list"()
    defined $I102, $P133
    unless $I102, for_undef_2700
    iter $P131, $P133
    new $P135, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P135, loop3768_handler
    push_eh $P135
  loop3768_test:
    unless $P131, loop3768_done
    shift $P134, $P131
  loop3768_redo:
    .const 'Sub' $P3766 = "838_1337966799.879" 
    capture_lex $P3766
    $P3766($P134)
  loop3768_next:
    goto loop3768_test
  loop3768_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P136, exception, 'type'
    eq $P136, .CONTROL_LOOP_NEXT, loop3768_next
    eq $P136, .CONTROL_LOOP_REDO, loop3768_redo
  loop3768_done:
    pop_eh 
  for_undef_2700:
.annotate 'line', 2614
    set $P125, $P131
  if_3763_end:
.annotate 'line', 2612
    .return ($P125)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3765"  :anon :subid("838_1337966799.879") :outer("837_1337966799.879")
    .param pmc param_3767
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2615
    .lex "$_", param_3767
    find_lex $P135, "$past"
    unless_null $P135, vivify_2701
    new $P135, "Undef"
  vivify_2701:
    find_lex $P136, "$_"
    unless_null $P136, vivify_2702
    new $P136, "Undef"
  vivify_2702:
    $P137 = $P135."push"($P136)
    .return ($P137)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<multi_declarator>" :anon :subid("328_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3783
    .param pmc param_3784
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2635
    .lex "self", param_3783
    .lex "$/", param_3784
    set $P118, param_3784
    set $P3785, param_3784
    unless_null $P3785, vivify_2729
    $P3785 = root_new ['parrot';'Hash']
  vivify_2729:
    set $P120, $P3785["multi_declarator"]
    unless_null $P120, vivify_2730
    new $P120, "Undef"
  vivify_2730:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<value>" :anon :subid("329_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3787
    .param pmc param_3788
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2637
    .lex "self", param_3787
    .lex "$/", param_3788
    set $P118, param_3788
    set $P3789, param_3788
    unless_null $P3789, vivify_2731
    $P3789 = root_new ['parrot';'Hash']
  vivify_2731:
    set $P120, $P3789["value"]
    unless_null $P120, vivify_2732
    new $P120, "Undef"
  vivify_2732:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "circumfix:sym<( )>" :anon :subid("330_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3791
    .param pmc param_3792
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2639
    .lex "self", param_3791
    .lex "$/", param_3792
.annotate 'line', 2640
    set $P118, param_3792
.annotate 'line', 2641
    set $P3794, param_3792
    unless_null $P3794, vivify_2733
    $P3794 = root_new ['parrot';'Hash']
  vivify_2733:
    set $P121, $P3794["EXPR"]
    unless_null $P121, vivify_2734
    new $P121, "Undef"
  vivify_2734:
    if $P121, if_3793
.annotate 'line', 2642
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P128, $P127["Op"]
    set $P129, param_3792
    unless_null $P129, vivify_2735
    new $P129, "Undef"
  vivify_2735:
    $P131 = $P128."new"("list" :named("pasttype"), $P129 :named("node"))
    set $P120, $P131
.annotate 'line', 2641
    goto if_3793_end
  if_3793:
    set $P3795, param_3792
    unless_null $P3795, vivify_2736
    $P3795 = root_new ['parrot';'Hash']
  vivify_2736:
    set $P3796, $P3795["EXPR"]
    unless_null $P3796, vivify_2737
    $P3796 = root_new ['parrot';'ResizablePMCArray']
  vivify_2737:
    set $P123, $P3796[0]
    unless_null $P123, vivify_2738
    new $P123, "Undef"
  vivify_2738:
    $P124 = $P123."ast"()
    set $P120, $P124
  if_3793_end:
    $P132 = $P118."!make"($P120)
.annotate 'line', 2639
    .return ($P132)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "circumfix:sym<[ ]>" :anon :subid("331_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3798
    .param pmc param_3799
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2645
    .lex "self", param_3798
    .lex "$/", param_3799
.annotate 'line', 2646
    new $P118, "Undef"
    set $P3800, $P118
    .lex "$past", $P3800
.annotate 'line', 2645
    set $P120, $P3800
    unless_null $P120, vivify_2739
    new $P120, "Undef"
  vivify_2739:
.annotate 'line', 2647
    set $P3802, param_3799
    unless_null $P3802, vivify_2740
    $P3802 = root_new ['parrot';'Hash']
  vivify_2740:
    set $P120, $P3802["EXPR"]
    unless_null $P120, vivify_2741
    new $P120, "Undef"
  vivify_2741:
    if $P120, if_3801
.annotate 'line', 2654
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P123, $P121, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Op"]
    $P126 = $P125."new"("list" :named("pasttype"))
    set $P3800, $P126
.annotate 'line', 2653
    goto if_3801_end
  if_3801:
.annotate 'line', 2648
    set $P3803, param_3799
    unless_null $P3803, vivify_2742
    $P3803 = root_new ['parrot';'Hash']
  vivify_2742:
    set $P3804, $P3803["EXPR"]
    unless_null $P3804, vivify_2743
    $P3804 = root_new ['parrot';'ResizablePMCArray']
  vivify_2743:
    set $P121, $P3804[0]
    unless_null $P121, vivify_2744
    new $P121, "Undef"
  vivify_2744:
    $P123 = $P121."ast"()
    set $P3800, $P123
.annotate 'line', 2649
    set $P121, $P3800
    unless_null $P121, vivify_2745
    new $P121, "Undef"
  vivify_2745:
    $S100 = $P121."name"()
    isne $I100, $S100, "&infix:<,>"
    unless $I100, if_3805_end
.annotate 'line', 2650
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Op"]
    set $P127, $P3800
    unless_null $P127, vivify_2746
    new $P127, "Undef"
  vivify_2746:
    $P128 = $P126."new"($P127, "list" :named("pasttype"))
    set $P3800, $P128
  if_3805_end:
  if_3801_end:
.annotate 'line', 2656
    set $P120, $P3800
    unless_null $P120, vivify_2747
    new $P120, "Undef"
  vivify_2747:
    $P120."name"("&circumfix:<[ ]>")
.annotate 'line', 2657
    set $P120, param_3799
    set $P121, $P3800
    unless_null $P121, vivify_2748
    new $P121, "Undef"
  vivify_2748:
    $P123 = $P120."!make"($P121)
.annotate 'line', 2645
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "circumfix:sym<ang>" :anon :subid("332_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3807
    .param pmc param_3808
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2660
    .lex "self", param_3807
    .lex "$/", param_3808
    set $P118, param_3808
    set $P3809, param_3808
    unless_null $P3809, vivify_2749
    $P3809 = root_new ['parrot';'Hash']
  vivify_2749:
    set $P120, $P3809["quote_EXPR"]
    unless_null $P120, vivify_2750
    new $P120, "Undef"
  vivify_2750:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub unicode:"circumfix:sym<\x{ab} \x{bb}>" :anon :subid("333_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3811
    .param pmc param_3812
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2661
    .lex "self", param_3811
    .lex "$/", param_3812
    set $P118, param_3812
    set $P3813, param_3812
    unless_null $P3813, vivify_2751
    $P3813 = root_new ['parrot';'Hash']
  vivify_2751:
    set $P120, $P3813["quote_EXPR"]
    unless_null $P120, vivify_2752
    new $P120, "Undef"
  vivify_2752:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "circumfix:sym<{ }>" :anon :subid("334_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3815
    .param pmc param_3816
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2663
    .const 'Sub' $P3823 = "839_1337966799.879" 
    capture_lex $P3823
    .lex "self", param_3815
    .lex "$/", param_3816
.annotate 'line', 2664
    set $P3818, param_3816
    unless_null $P3818, vivify_2753
    $P3818 = root_new ['parrot';'Hash']
  vivify_2753:
    set $P3819, $P3818["pblock"]
    unless_null $P3819, vivify_2754
    $P3819 = root_new ['parrot';'Hash']
  vivify_2754:
    set $P3820, $P3819["blockoid"]
    unless_null $P3820, vivify_2755
    $P3820 = root_new ['parrot';'Hash']
  vivify_2755:
    set $P3821, $P3820["statementlist"]
    unless_null $P3821, vivify_2756
    $P3821 = root_new ['parrot';'Hash']
  vivify_2756:
    set $P120, $P3821["statement"]
    unless_null $P120, vivify_2757
    new $P120, "Undef"
  vivify_2757:
    set $N100, $P120
    set $N101, 0
    isgt $I100, $N100, $N101
    if $I100, if_3817
.annotate 'line', 2669
    set $P3828, param_3816
    unless_null $P3828, vivify_2758
    $P3828 = root_new ['parrot';'Hash']
  vivify_2758:
    set $P3829, $P3828["pblock"]
    unless_null $P3829, vivify_2759
    $P3829 = root_new ['parrot';'Hash']
  vivify_2759:
    set $P3830, $P3829["blockoid"]
    unless_null $P3830, vivify_2760
    $P3830 = root_new ['parrot';'Hash']
  vivify_2760:
    set $P126, $P3830["you_are_here"]
    unless_null $P126, vivify_2761
    new $P126, "Undef"
  vivify_2761:
    if $P126, if_3827
.annotate 'line', 2673
    set $P127, param_3816
    $P128 = "vivitype"("%")
    $P129 = $P127."!make"($P128)
.annotate 'line', 2672
    set $P124, $P129
.annotate 'line', 2669
    goto if_3827_end
  if_3827:
.annotate 'line', 2670
    set $P127, param_3816
    set $P3831, param_3816
    unless_null $P3831, vivify_2762
    $P3831 = root_new ['parrot';'Hash']
  vivify_2762:
    set $P128, $P3831["pblock"]
    unless_null $P128, vivify_2763
    new $P128, "Undef"
  vivify_2763:
    $P129 = $P128."ast"()
    $P131 = $P127."!make"($P129)
.annotate 'line', 2669
    set $P124, $P131
  if_3827_end:
    set $P118, $P124
.annotate 'line', 2664
    goto if_3817_end
  if_3817:
    .const 'Sub' $P3823 = "839_1337966799.879" 
    capture_lex $P3823
    $P123 = $P3823()
    set $P118, $P123
  if_3817_end:
.annotate 'line', 2663
    .return ($P118)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3822"  :anon :subid("839_1337966799.879") :outer("334_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2665
    new $P121, "Undef"
    set $P3824, $P121
    .lex "$past", $P3824
    find_lex $P3825, "$/"
    unless_null $P3825, vivify_2764
    $P3825 = root_new ['parrot';'Hash']
  vivify_2764:
    set $P123, $P3825["pblock"]
    unless_null $P123, vivify_2765
    new $P123, "Undef"
  vivify_2765:
    $P124 = $P123."ast"()
    set $P3824, $P124
.annotate 'line', 2666
    new $P123, "Float"
    assign $P123, 1
    set $P3826, $P3824
    unless_null $P3826, vivify_2766
    $P3826 = root_new ['parrot';'Hash']
    set $P3824, $P3826
  vivify_2766:
    set $P3826["bareblock"], $P123
.annotate 'line', 2667
    find_dynamic_lex $P123, "$/"
    set $P124, $P3824
    unless_null $P124, vivify_2767
    new $P124, "Undef"
  vivify_2767:
    $P125 = $P123."!make"($P124)
.annotate 'line', 2664
    .return ($P125)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "circumfix:sym<sigil>" :anon :subid("335_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3833
    .param pmc param_3834
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2677
    .lex "self", param_3833
    .lex "$/", param_3834
.annotate 'line', 2678
    new $P118, "Undef"
    set $P3835, $P118
    .lex "$name", $P3835
    set $P3837, param_3834
    unless_null $P3837, vivify_2768
    $P3837 = root_new ['parrot';'Hash']
  vivify_2768:
    set $P121, $P3837["sigil"]
    unless_null $P121, vivify_2769
    new $P121, "Undef"
  vivify_2769:
    set $S100, $P121
    iseq $I100, $S100, "@"
    if $I100, if_3836
.annotate 'line', 2679
    set $P3839, param_3834
    unless_null $P3839, vivify_2770
    $P3839 = root_new ['parrot';'Hash']
  vivify_2770:
    set $P125, $P3839["sigil"]
    unless_null $P125, vivify_2771
    new $P125, "Undef"
  vivify_2771:
    set $S101, $P125
    iseq $I101, $S101, "%"
    if $I101, if_3838
    new $P127, "String"
    assign $P127, "item"
    set $P124, $P127
    goto if_3838_end
  if_3838:
    new $P126, "String"
    assign $P126, "hash"
    set $P124, $P126
  if_3838_end:
    set $P120, $P124
.annotate 'line', 2678
    goto if_3836_end
  if_3836:
    new $P123, "String"
    assign $P123, "list"
    set $P120, $P123
  if_3836_end:
    set $P3835, $P120
.annotate 'line', 2681
    set $P120, param_3834
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P123, $P121, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Op"]
    set $P126, $P3835
    unless_null $P126, vivify_2772
    new $P126, "Undef"
  vivify_2772:
    set $P3840, param_3834
    unless_null $P3840, vivify_2773
    $P3840 = root_new ['parrot';'Hash']
  vivify_2773:
    set $P127, $P3840["semilist"]
    unless_null $P127, vivify_2774
    new $P127, "Undef"
  vivify_2774:
    $P128 = $P127."ast"()
    $P129 = $P125."new"($P128, "callmethod" :named("pasttype"), $P126 :named("name"))
    $P131 = $P120."!make"($P129)
.annotate 'line', 2677
    .return ($P131)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "semilist" :anon :subid("336_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3842
    .param pmc param_3843
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2684
    .lex "self", param_3842
    .lex "$/", param_3843
    set $P118, param_3843
    set $P3844, param_3843
    unless_null $P3844, vivify_2775
    $P3844 = root_new ['parrot';'Hash']
  vivify_2775:
    set $P120, $P3844["statement"]
    unless_null $P120, vivify_2776
    new $P120, "Undef"
  vivify_2776:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postcircumfix:sym<[ ]>" :anon :subid("337_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3846
    .param pmc param_3847
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2686
    .lex "self", param_3846
    .lex "$/", param_3847
.annotate 'line', 2687
    set $P118, param_3847
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Var"]
    set $P3848, param_3847
    unless_null $P3848, vivify_2777
    $P3848 = root_new ['parrot';'Hash']
  vivify_2777:
    set $P125, $P3848["EXPR"]
    unless_null $P125, vivify_2778
    new $P125, "Undef"
  vivify_2778:
    $P126 = $P125."ast"()
.annotate 'line', 2689
    $P127 = "vivitype"("@")
.annotate 'line', 2687
    $P128 = $P124."new"($P126, "keyed_int" :named("scope"), "Undef" :named("viviself"), $P127 :named("vivibase"))
    $P129 = $P118."!make"($P128)
.annotate 'line', 2686
    .return ($P129)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postcircumfix:sym<{ }>" :anon :subid("338_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3850
    .param pmc param_3851
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2692
    .lex "self", param_3850
    .lex "$/", param_3851
.annotate 'line', 2693
    set $P118, param_3851
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Var"]
    set $P3852, param_3851
    unless_null $P3852, vivify_2779
    $P3852 = root_new ['parrot';'Hash']
  vivify_2779:
    set $P125, $P3852["EXPR"]
    unless_null $P125, vivify_2780
    new $P125, "Undef"
  vivify_2780:
    $P126 = $P125."ast"()
.annotate 'line', 2695
    $P127 = "vivitype"("%")
.annotate 'line', 2693
    $P128 = $P124."new"($P126, "keyed" :named("scope"), "Undef" :named("viviself"), $P127 :named("vivibase"))
    $P129 = $P118."!make"($P128)
.annotate 'line', 2692
    .return ($P129)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postcircumfix:sym<ang>" :anon :subid("339_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3854
    .param pmc param_3855
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2698
    .lex "self", param_3854
    .lex "$/", param_3855
.annotate 'line', 2699
    set $P118, param_3855
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Var"]
    set $P3856, param_3855
    unless_null $P3856, vivify_2781
    $P3856 = root_new ['parrot';'Hash']
  vivify_2781:
    set $P125, $P3856["quote_EXPR"]
    unless_null $P125, vivify_2782
    new $P125, "Undef"
  vivify_2782:
    $P126 = $P125."ast"()
.annotate 'line', 2701
    $P127 = "vivitype"("%")
.annotate 'line', 2699
    $P128 = $P124."new"($P126, "keyed" :named("scope"), "Undef" :named("viviself"), $P127 :named("vivibase"))
    $P129 = $P118."!make"($P128)
.annotate 'line', 2698
    .return ($P129)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postcircumfix:sym<( )>" :anon :subid("340_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3858
    .param pmc param_3859
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2704
    .lex "self", param_3858
    .lex "$/", param_3859
.annotate 'line', 2705
    set $P118, param_3859
    set $P3860, param_3859
    unless_null $P3860, vivify_2783
    $P3860 = root_new ['parrot';'Hash']
  vivify_2783:
    set $P120, $P3860["arglist"]
    unless_null $P120, vivify_2784
    new $P120, "Undef"
  vivify_2784:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
.annotate 'line', 2704
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "value" :anon :subid("341_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3862
    .param pmc param_3863
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2708
    .lex "self", param_3862
    .lex "$/", param_3863
.annotate 'line', 2709
    set $P118, param_3863
    set $P3865, param_3863
    unless_null $P3865, vivify_2785
    $P3865 = root_new ['parrot';'Hash']
  vivify_2785:
    set $P121, $P3865["quote"]
    unless_null $P121, vivify_2786
    new $P121, "Undef"
  vivify_2786:
    if $P121, if_3864
    set $P3867, param_3863
    unless_null $P3867, vivify_2787
    $P3867 = root_new ['parrot';'Hash']
  vivify_2787:
    set $P125, $P3867["number"]
    unless_null $P125, vivify_2788
    new $P125, "Undef"
  vivify_2788:
    $P126 = $P125."ast"()
    set $P120, $P126
    goto if_3864_end
  if_3864:
    set $P3866, param_3863
    unless_null $P3866, vivify_2789
    $P3866 = root_new ['parrot';'Hash']
  vivify_2789:
    set $P123, $P3866["quote"]
    unless_null $P123, vivify_2790
    new $P123, "Undef"
  vivify_2790:
    $P124 = $P123."ast"()
    set $P120, $P124
  if_3864_end:
    $P127 = $P118."!make"($P120)
.annotate 'line', 2708
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "number" :anon :subid("342_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3869
    .param pmc param_3870
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2712
    .lex "self", param_3869
    .lex "$/", param_3870
.annotate 'line', 2713
    new $P118, "Undef"
    set $P3871, $P118
    .lex "$value", $P3871
    set $P3873, param_3870
    unless_null $P3873, vivify_2791
    $P3873 = root_new ['parrot';'Hash']
  vivify_2791:
    set $P121, $P3873["dec_number"]
    unless_null $P121, vivify_2792
    new $P121, "Undef"
  vivify_2792:
    if $P121, if_3872
    set $P3875, param_3870
    unless_null $P3875, vivify_2793
    $P3875 = root_new ['parrot';'Hash']
  vivify_2793:
    set $P125, $P3875["integer"]
    unless_null $P125, vivify_2794
    new $P125, "Undef"
  vivify_2794:
    $P126 = $P125."ast"()
    set $P120, $P126
    goto if_3872_end
  if_3872:
    set $P3874, param_3870
    unless_null $P3874, vivify_2795
    $P3874 = root_new ['parrot';'Hash']
  vivify_2795:
    set $P123, $P3874["dec_number"]
    unless_null $P123, vivify_2796
    new $P123, "Undef"
  vivify_2796:
    $P124 = $P123."ast"()
    set $P120, $P124
  if_3872_end:
    set $P3871, $P120
.annotate 'line', 2714
    set $P3877, param_3870
    unless_null $P3877, vivify_2797
    $P3877 = root_new ['parrot';'Hash']
  vivify_2797:
    set $P120, $P3877["sign"]
    unless_null $P120, vivify_2798
    new $P120, "Undef"
  vivify_2798:
    set $S100, $P120
    iseq $I100, $S100, "-"
    unless $I100, if_3876_end
    set $P121, $P3871
    unless_null $P121, vivify_2799
    new $P121, "Undef"
  vivify_2799:
    neg $P123, $P121
    set $P3871, $P123
  if_3876_end:
.annotate 'line', 2715
    set $P120, param_3870
    set $P3879, param_3870
    unless_null $P3879, vivify_2800
    $P3879 = root_new ['parrot';'Hash']
  vivify_2800:
    set $P123, $P3879["dec_number"]
    unless_null $P123, vivify_2801
    new $P123, "Undef"
  vivify_2801:
    if $P123, if_3878
.annotate 'line', 2717
    get_hll_global $P131, "GLOBAL"
    nqp_get_package_through_who $P132, $P131, "PAST"
    get_who $P133, $P132
    set $P134, $P133["Want"]
    get_hll_global $P135, "GLOBAL"
    nqp_get_package_through_who $P136, $P135, "PAST"
    get_who $P137, $P136
    set $P138, $P137["Val"]
    set $P139, $P3871
    unless_null $P139, vivify_2802
    new $P139, "Undef"
  vivify_2802:
    $P140 = $P138."new"($P139 :named("value"))
    set $P141, $P3871
    unless_null $P141, vivify_2803
    new $P141, "Undef"
  vivify_2803:
    $P142 = $P134."new"($P140, "Ii", $P141)
    set $P121, $P142
.annotate 'line', 2715
    goto if_3878_end
  if_3878:
.annotate 'line', 2716
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Val"]
    set $P128, $P3871
    unless_null $P128, vivify_2804
    new $P128, "Undef"
  vivify_2804:
    $P129 = $P127."new"($P128 :named("value"))
    set $P121, $P129
  if_3878_end:
.annotate 'line', 2715
    $P143 = $P120."!make"($P121)
.annotate 'line', 2712
    .return ($P143)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote:sym<apos>" :anon :subid("343_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3881
    .param pmc param_3882
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2720
    .lex "self", param_3881
    .lex "$/", param_3882
    set $P118, param_3882
    set $P3883, param_3882
    unless_null $P3883, vivify_2805
    $P3883 = root_new ['parrot';'Hash']
  vivify_2805:
    set $P120, $P3883["quote_EXPR"]
    unless_null $P120, vivify_2806
    new $P120, "Undef"
  vivify_2806:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote:sym<dblq>" :anon :subid("344_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3885
    .param pmc param_3886
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2721
    .lex "self", param_3885
    .lex "$/", param_3886
    set $P118, param_3886
    set $P3887, param_3886
    unless_null $P3887, vivify_2807
    $P3887 = root_new ['parrot';'Hash']
  vivify_2807:
    set $P120, $P3887["quote_EXPR"]
    unless_null $P120, vivify_2808
    new $P120, "Undef"
  vivify_2808:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote:sym<qq>" :anon :subid("345_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3889
    .param pmc param_3890
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2722
    .lex "self", param_3889
    .lex "$/", param_3890
    set $P118, param_3890
    set $P3891, param_3890
    unless_null $P3891, vivify_2809
    $P3891 = root_new ['parrot';'Hash']
  vivify_2809:
    set $P120, $P3891["quote_EXPR"]
    unless_null $P120, vivify_2810
    new $P120, "Undef"
  vivify_2810:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote:sym<q>" :anon :subid("346_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3893
    .param pmc param_3894
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2723
    .lex "self", param_3893
    .lex "$/", param_3894
    set $P118, param_3894
    set $P3895, param_3894
    unless_null $P3895, vivify_2811
    $P3895 = root_new ['parrot';'Hash']
  vivify_2811:
    set $P120, $P3895["quote_EXPR"]
    unless_null $P120, vivify_2812
    new $P120, "Undef"
  vivify_2812:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote:sym<Q>" :anon :subid("347_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3897
    .param pmc param_3898
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2724
    .lex "self", param_3897
    .lex "$/", param_3898
    set $P118, param_3898
    set $P3899, param_3898
    unless_null $P3899, vivify_2813
    $P3899 = root_new ['parrot';'Hash']
  vivify_2813:
    set $P120, $P3899["quote_EXPR"]
    unless_null $P120, vivify_2814
    new $P120, "Undef"
  vivify_2814:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote:sym<Q:PIR>" :anon :subid("348_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3901
    .param pmc param_3902
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2725
    .lex "self", param_3901
    .lex "$/", param_3902
.annotate 'line', 2726
    set $P118, param_3902
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Op"]
    set $P3903, param_3902
    unless_null $P3903, vivify_2815
    $P3903 = root_new ['parrot';'Hash']
  vivify_2815:
    set $P125, $P3903["quote_EXPR"]
    unless_null $P125, vivify_2816
    new $P125, "Undef"
  vivify_2816:
    $P126 = $P125."ast"()
    $P127 = $P126."value"()
    set $P128, param_3902
    unless_null $P128, vivify_2817
    new $P128, "Undef"
  vivify_2817:
    $P129 = $P124."new"($P127 :named("inline"), "inline" :named("pasttype"), $P128 :named("node"))
    $P131 = $P118."!make"($P129)
.annotate 'line', 2725
    .return ($P131)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote:sym</ />" :anon :subid("349_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3905
    .param pmc param_3906
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2731
    .lex "self", param_3905
    .lex "$/", param_3906
.annotate 'line', 2732
    new $P118, "Undef"
    set $P3907, $P118
    .lex "$block", $P3907
.annotate 'line', 2742
    new $P120, "Undef"
    set $P3908, $P120
    .lex "$regex", $P3908
.annotate 'line', 2743
    new $P121, "Undef"
    set $P3909, $P121
    .lex "$past", $P3909
.annotate 'line', 2732
    find_dynamic_lex $P125, "$*W"
    unless_null $P125, vivify_2818
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$W"]
    unless_null $P125, vivify_2819
    die "Contextual $*W not found"
  vivify_2819:
  vivify_2818:
    $P126 = $P125."pop_lexpad"()
    set $P3907, $P126
.annotate 'line', 2733
    set $P3910, $P3907
    unless_null $P3910, vivify_2820
    $P3910 = root_new ['parrot';'ResizablePMCArray']
  vivify_2820:
    set $P123, $P3910[0]
    unless_null $P123, vivify_2821
    new $P123, "Undef"
  vivify_2821:
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Var"]
    $P128 = $P127."new"("self" :named("name"), "parameter" :named("scope"))
    $P123."push"($P128)
.annotate 'line', 2734
    set $P3911, $P3907
    unless_null $P3911, vivify_2822
    $P3911 = root_new ['parrot';'ResizablePMCArray']
  vivify_2822:
    set $P123, $P3911[0]
    unless_null $P123, vivify_2823
    new $P123, "Undef"
  vivify_2823:
.annotate 'line', 2735
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Var"]
.annotate 'line', 2736
    get_hll_global $P128, "GLOBAL"
    nqp_get_package_through_who $P129, $P128, "PAST"
    get_who $P131, $P129
    set $P132, $P131["Var"]
    $P133 = $P132."new"("self" :named("name"), "lexical_6model" :named("scope"))
.annotate 'line', 2735
    $P134 = $P127."new"("self" :named("name"), "register" :named("scope"), 1 :named("isdecl"), $P133 :named("viviself"))
    $P123."push"($P134)
.annotate 'line', 2737
    set $P3912, $P3907
    unless_null $P3912, vivify_2824
    $P3912 = root_new ['parrot';'ResizablePMCArray']
  vivify_2824:
    set $P123, $P3912[0]
    unless_null $P123, vivify_2825
    new $P123, "Undef"
  vivify_2825:
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Var"]
    $P128 = $P127."new"(unicode:"$\x{a2}" :named("name"), "lexical" :named("scope"), 1 :named("isdecl"))
    $P123."push"($P128)
.annotate 'line', 2738
    set $P3913, $P3907
    unless_null $P3913, vivify_2826
    $P3913 = root_new ['parrot';'ResizablePMCArray']
  vivify_2826:
    set $P123, $P3913[0]
    unless_null $P123, vivify_2827
    new $P123, "Undef"
  vivify_2827:
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Var"]
    $P128 = $P127."new"("$/" :named("name"), "lexical" :named("scope"), 1 :named("isdecl"))
    $P123."push"($P128)
.annotate 'line', 2739
    set $P123, $P3907
    unless_null $P123, vivify_2828
    new $P123, "Undef"
  vivify_2828:
    $P123."symbol"(unicode:"$\x{a2}", "lexical" :named("scope"))
.annotate 'line', 2740
    set $P123, $P3907
    unless_null $P123, vivify_2829
    new $P123, "Undef"
  vivify_2829:
    $P123."symbol"("$/", "lexical" :named("scope"))
.annotate 'line', 2742
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "QRegex"
    nqp_get_package_through_who $P125, $P124, "P6Regex"
    nqp_get_package_through_who $P126, $P125, "Actions"
    get_who $P127, $P126
    set $P128, $P127["buildsub"]
    set $P3914, param_3906
    unless_null $P3914, vivify_2830
    $P3914 = root_new ['parrot';'Hash']
  vivify_2830:
    set $P129, $P3914["p6regex"]
    unless_null $P129, vivify_2831
    new $P129, "Undef"
  vivify_2831:
    $P131 = $P129."ast"()
    set $P132, $P3907
    unless_null $P132, vivify_2832
    new $P132, "Undef"
  vivify_2832:
    $P133 = $P128($P131, $P132)
    set $P3908, $P133
.annotate 'line', 2743
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Op"]
.annotate 'line', 2745
    new $P127, "ResizablePMCArray"
    push $P127, "NQPRegex"
    set $P128, param_3906
    unless_null $P128, vivify_2833
    new $P128, "Undef"
  vivify_2833:
    $P129 = "lexical_package_lookup"($P127, $P128)
    set $P131, $P3908
    unless_null $P131, vivify_2834
    new $P131, "Undef"
  vivify_2834:
    $P132 = $P126."new"($P129, $P131, "callmethod" :named("pasttype"), "new" :named("name"))
.annotate 'line', 2743
    set $P3909, $P132
.annotate 'line', 2749
    set $P123, $P3908
    unless_null $P123, vivify_2835
    new $P123, "Undef"
  vivify_2835:
    set $P3915, $P3909
    unless_null $P3915, vivify_2836
    $P3915 = root_new ['parrot';'Hash']
    set $P3909, $P3915
  vivify_2836:
    set $P3915["sink"], $P123
.annotate 'line', 2750
    set $P123, param_3906
    set $P124, $P3909
    unless_null $P124, vivify_2837
    new $P124, "Undef"
  vivify_2837:
    $P125 = $P123."!make"($P124)
.annotate 'line', 2731
    .return ($P125)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote_escape:sym<$>" :anon :subid("350_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3917
    .param pmc param_3918
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2753
    .lex "self", param_3917
    .lex "$/", param_3918
    set $P118, param_3918
    set $P3919, param_3918
    unless_null $P3919, vivify_2838
    $P3919 = root_new ['parrot';'Hash']
  vivify_2838:
    set $P120, $P3919["variable"]
    unless_null $P120, vivify_2839
    new $P120, "Undef"
  vivify_2839:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote_escape:sym<{ }>" :anon :subid("351_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3921
    .param pmc param_3922
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2754
    .lex "self", param_3921
    .lex "$/", param_3922
.annotate 'line', 2755
    set $P118, param_3922
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Op"]
.annotate 'line', 2756
    set $P3923, param_3922
    unless_null $P3923, vivify_2840
    $P3923 = root_new ['parrot';'Hash']
  vivify_2840:
    set $P125, $P3923["block"]
    unless_null $P125, vivify_2841
    new $P125, "Undef"
  vivify_2841:
    $P126 = $P125."ast"()
    $P127 = "block_immediate"($P126)
    set $P128, param_3922
    unless_null $P128, vivify_2842
    new $P128, "Undef"
  vivify_2842:
    $P129 = $P124."new"($P127, "set S*" :named("pirop"), $P128 :named("node"))
.annotate 'line', 2755
    $P131 = $P118."!make"($P129)
.annotate 'line', 2754
    .return ($P131)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote_escape:sym<esc>" :anon :subid("352_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3925
    .param pmc param_3926
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2759
    .lex "self", param_3925
    .lex "$/", param_3926
    set $P118, param_3926
    $P120 = $P118."!make"("\e")
    .return ($P120)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postfix:sym<.>" :anon :subid("353_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3928
    .param pmc param_3929
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2763
    .lex "self", param_3928
    .lex "$/", param_3929
    set $P118, param_3929
    set $P3930, param_3929
    unless_null $P3930, vivify_2843
    $P3930 = root_new ['parrot';'Hash']
  vivify_2843:
    set $P120, $P3930["dotty"]
    unless_null $P120, vivify_2844
    new $P120, "Undef"
  vivify_2844:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postfix:sym<++>" :anon :subid("354_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3932
    .param pmc param_3933
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2765
    .lex "self", param_3932
    .lex "$/", param_3933
.annotate 'line', 2766
    set $P118, param_3933
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Op"]
.annotate 'line', 2767
    new $P125, "ResizablePMCArray"
    push $P125, "    clone %r, %0"
    push $P125, "    inc %0"
.annotate 'line', 2766
    $P126 = $P124."new"("postfix:<++>" :named("name"), $P125 :named("inline"), "inline" :named("pasttype"))
    $P127 = $P118."!make"($P126)
.annotate 'line', 2765
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postfix:sym<-->" :anon :subid("355_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3935
    .param pmc param_3936
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2771
    .lex "self", param_3935
    .lex "$/", param_3936
.annotate 'line', 2772
    set $P118, param_3936
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Op"]
.annotate 'line', 2773
    new $P125, "ResizablePMCArray"
    push $P125, "    clone %r, %0"
    push $P125, "    dec %0"
.annotate 'line', 2772
    $P126 = $P124."new"("postfix:<-->" :named("name"), $P125 :named("inline"), "inline" :named("pasttype"))
    $P127 = $P118."!make"($P126)
.annotate 'line', 2771
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "prefix:sym<make>" :anon :subid("356_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3938
    .param pmc param_3939
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2777
    .lex "self", param_3938
    .lex "$/", param_3939
.annotate 'line', 2778
    set $P118, param_3939
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Op"]
.annotate 'line', 2779
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P128, $P127["Var"]
    $P129 = $P128."new"("$/" :named("name"), "contextual" :named("scope"))
    set $P131, param_3939
    unless_null $P131, vivify_2845
    new $P131, "Undef"
  vivify_2845:
    $P132 = $P124."new"($P129, "callmethod" :named("pasttype"), "!make" :named("name"), $P131 :named("node"))
.annotate 'line', 2778
    $P133 = $P118."!make"($P132)
.annotate 'line', 2777
    .return ($P133)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<next>" :anon :subid("357_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3941
    .param pmc param_3942
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2795
    .lex "self", param_3941
    .lex "$/", param_3942
    set $P118, param_3942
    unless_null $P118, vivify_2846
    new $P118, "Undef"
  vivify_2846:
    $P120 = "control"($P118, "CONTROL_LOOP_NEXT")
    .return ($P120)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<last>" :anon :subid("358_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3944
    .param pmc param_3945
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2796
    .lex "self", param_3944
    .lex "$/", param_3945
    set $P118, param_3945
    unless_null $P118, vivify_2847
    new $P118, "Undef"
  vivify_2847:
    $P120 = "control"($P118, "CONTROL_LOOP_LAST")
    .return ($P120)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<redo>" :anon :subid("359_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3947
    .param pmc param_3948
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2797
    .lex "self", param_3947
    .lex "$/", param_3948
    set $P118, param_3948
    unless_null $P118, vivify_2848
    new $P118, "Undef"
  vivify_2848:
    $P120 = "control"($P118, "CONTROL_LOOP_REDO")
    .return ($P120)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "infix:sym<~~>" :anon :subid("360_1337966799.879") :outer("781_1337966799.879")
    .param pmc param_3950
    .param pmc param_3951
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2799
    .lex "self", param_3950
    .lex "$/", param_3951
.annotate 'line', 2800
    set $P118, param_3951
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Op"]
    set $P125, param_3951
    unless_null $P125, vivify_2849
    new $P125, "Undef"
  vivify_2849:
    $P126 = $P124."new"("callmethod" :named("pasttype"), "ACCEPTS" :named("name"), $P125 :named("node"))
    $P127 = $P118."!make"($P126)
.annotate 'line', 2799
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "_block3952"  :subid("840_1337966799.879") :outer("368_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2853
    .const 'Sub' $P3982 = "367_1337966799.879" 
    capture_lex $P3982
    .const 'Sub' $P3978 = "366_1337966799.879" 
    capture_lex $P3978
    .const 'Sub' $P3973 = "365_1337966799.879" 
    capture_lex $P3973
    .const 'Sub' $P3969 = "364_1337966799.879" 
    capture_lex $P3969
    .const 'Sub' $P3965 = "363_1337966799.879" 
    capture_lex $P3965
    .const 'Sub' $P3961 = "362_1337966799.879" 
    capture_lex $P3961
    .const 'Sub' $P3956 = "361_1337966799.879" 
    capture_lex $P3956
    .lex "$?PACKAGE", $P3954
    .lex "$?CLASS", $P3955
.annotate 'line', 2887
    .const 'Sub' $P3982 = "367_1337966799.879" 
    newclosure $P3988, $P3982
.annotate 'line', 2853
    .return ($P3988)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "metachar:sym<:my>" :anon :subid("361_1337966799.879") :outer("840_1337966799.879")
    .param pmc param_3957
    .param pmc param_3958
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2855
    .lex "self", param_3957
    .lex "$/", param_3958
.annotate 'line', 2856
    new $P103, "Undef"
    set $P3959, $P103
    .lex "$past", $P3959
    set $P3960, param_3958
    unless_null $P3960, vivify_2850
    $P3960 = root_new ['parrot';'Hash']
  vivify_2850:
    set $P104, $P3960["statement"]
    unless_null $P104, vivify_2851
    new $P104, "Undef"
  vivify_2851:
    $P105 = $P104."ast"()
    set $P3959, $P105
.annotate 'line', 2857
    set $P104, param_3958
    get_hll_global $P105, "GLOBAL"
    nqp_get_package_through_who $P106, $P105, "QAST"
    get_who $P107, $P106
    set $P108, $P107["Regex"]
    set $P109, $P3959
    unless_null $P109, vivify_2852
    new $P109, "Undef"
  vivify_2852:
    set $P110, param_3958
    unless_null $P110, vivify_2853
    new $P110, "Undef"
  vivify_2853:
    $P111 = $P108."new"($P109, "pastnode" :named("rxtype"), "declarative" :named("subtype"), $P110 :named("node"))
    $P112 = $P104."!make"($P111)
.annotate 'line', 2855
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "metachar:sym<{ }>" :anon :subid("362_1337966799.879") :outer("840_1337966799.879")
    .param pmc param_3962
    .param pmc param_3963
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2861
    .lex "self", param_3962
    .lex "$/", param_3963
.annotate 'line', 2862
    set $P103, param_3963
    get_hll_global $P104, "GLOBAL"
    nqp_get_package_through_who $P105, $P104, "QAST"
    get_who $P106, $P105
    set $P107, $P106["Regex"]
    set $P3964, param_3963
    unless_null $P3964, vivify_2854
    $P3964 = root_new ['parrot';'Hash']
  vivify_2854:
    set $P108, $P3964["codeblock"]
    unless_null $P108, vivify_2855
    new $P108, "Undef"
  vivify_2855:
    $P109 = $P108."ast"()
    set $P110, param_3963
    unless_null $P110, vivify_2856
    new $P110, "Undef"
  vivify_2856:
    $P111 = $P107."new"($P109, "pastnode" :named("rxtype"), $P110 :named("node"))
    $P112 = $P103."!make"($P111)
.annotate 'line', 2861
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "metachar:sym<nqpvar>" :anon :subid("363_1337966799.879") :outer("840_1337966799.879")
    .param pmc param_3966
    .param pmc param_3967
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2866
    .lex "self", param_3966
    .lex "$/", param_3967
.annotate 'line', 2867
    set $P103, param_3967
    get_hll_global $P104, "GLOBAL"
    nqp_get_package_through_who $P105, $P104, "QAST"
    get_who $P106, $P105
    set $P107, $P106["Regex"]
    get_hll_global $P108, "GLOBAL"
    nqp_get_package_through_who $P109, $P108, "PAST"
    get_who $P110, $P109
    set $P111, $P110["Node"]
    set $P3968, param_3967
    unless_null $P3968, vivify_2857
    $P3968 = root_new ['parrot';'Hash']
  vivify_2857:
    set $P112, $P3968["var"]
    unless_null $P112, vivify_2858
    new $P112, "Undef"
  vivify_2858:
    $P113 = $P112."ast"()
    $P114 = $P111."new"("!INTERPOLATE", $P113)
    set $P115, param_3967
    unless_null $P115, vivify_2859
    new $P115, "Undef"
  vivify_2859:
    $P116 = $P107."new"($P114, "subrule" :named("rxtype"), "method" :named("subtype"), $P115 :named("node"))
    $P117 = $P103."!make"($P116)
.annotate 'line', 2866
    .return ($P117)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "assertion:sym<{ }>" :anon :subid("364_1337966799.879") :outer("840_1337966799.879")
    .param pmc param_3970
    .param pmc param_3971
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2871
    .lex "self", param_3970
    .lex "$/", param_3971
.annotate 'line', 2872
    set $P103, param_3971
    get_hll_global $P104, "GLOBAL"
    nqp_get_package_through_who $P105, $P104, "QAST"
    get_who $P106, $P105
    set $P107, $P106["Regex"]
    get_hll_global $P108, "GLOBAL"
    nqp_get_package_through_who $P109, $P108, "PAST"
    get_who $P110, $P109
    set $P111, $P110["Node"]
    set $P3972, param_3971
    unless_null $P3972, vivify_2860
    $P3972 = root_new ['parrot';'Hash']
  vivify_2860:
    set $P112, $P3972["codeblock"]
    unless_null $P112, vivify_2861
    new $P112, "Undef"
  vivify_2861:
    $P113 = $P112."ast"()
    $P114 = $P111."new"("!INTERPOLATE_REGEX", $P113)
    set $P115, param_3971
    unless_null $P115, vivify_2862
    new $P115, "Undef"
  vivify_2862:
    $P116 = $P107."new"($P114, "subrule" :named("rxtype"), "method" :named("subtype"), $P115 :named("node"))
    $P117 = $P103."!make"($P116)
.annotate 'line', 2871
    .return ($P117)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "assertion:sym<?{ }>" :anon :subid("365_1337966799.879") :outer("840_1337966799.879")
    .param pmc param_3974
    .param pmc param_3975
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2876
    .lex "self", param_3974
    .lex "$/", param_3975
.annotate 'line', 2877
    set $P103, param_3975
    get_hll_global $P104, "GLOBAL"
    nqp_get_package_through_who $P105, $P104, "QAST"
    get_who $P106, $P105
    set $P107, $P106["Regex"]
    set $P3976, param_3975
    unless_null $P3976, vivify_2863
    $P3976 = root_new ['parrot';'Hash']
  vivify_2863:
    set $P108, $P3976["codeblock"]
    unless_null $P108, vivify_2864
    new $P108, "Undef"
  vivify_2864:
    $P109 = $P108."ast"()
.annotate 'line', 2878
    set $P3977, param_3975
    unless_null $P3977, vivify_2865
    $P3977 = root_new ['parrot';'Hash']
  vivify_2865:
    set $P110, $P3977["zw"]
    unless_null $P110, vivify_2866
    new $P110, "Undef"
  vivify_2866:
    set $S100, $P110
    iseq $I100, $S100, "!"
.annotate 'line', 2877
    set $P111, param_3975
    unless_null $P111, vivify_2867
    new $P111, "Undef"
  vivify_2867:
    $P112 = $P107."new"($P109, "zerowidth" :named("subtype"), $I100 :named("negate"), "pastnode" :named("rxtype"), $P111 :named("node"))
    $P113 = $P103."!make"($P112)
.annotate 'line', 2876
    .return ($P113)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "assertion:sym<var>" :anon :subid("366_1337966799.879") :outer("840_1337966799.879")
    .param pmc param_3979
    .param pmc param_3980
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2882
    .lex "self", param_3979
    .lex "$/", param_3980
.annotate 'line', 2883
    set $P103, param_3980
    get_hll_global $P104, "GLOBAL"
    nqp_get_package_through_who $P105, $P104, "QAST"
    get_who $P106, $P105
    set $P107, $P106["Regex"]
    get_hll_global $P108, "GLOBAL"
    nqp_get_package_through_who $P109, $P108, "PAST"
    get_who $P110, $P109
    set $P111, $P110["Node"]
    set $P3981, param_3980
    unless_null $P3981, vivify_2868
    $P3981 = root_new ['parrot';'Hash']
  vivify_2868:
    set $P112, $P3981["var"]
    unless_null $P112, vivify_2869
    new $P112, "Undef"
  vivify_2869:
    $P113 = $P112."ast"()
    $P114 = $P111."new"("!INTERPOLATE_REGEX", $P113)
    set $P115, param_3980
    unless_null $P115, vivify_2870
    new $P115, "Undef"
  vivify_2870:
    $P116 = $P107."new"($P114, "subrule" :named("rxtype"), "method" :named("subtype"), $P115 :named("node"))
    $P117 = $P103."!make"($P116)
.annotate 'line', 2882
    .return ($P117)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "codeblock" :anon :subid("367_1337966799.879") :outer("840_1337966799.879")
    .param pmc param_3983
    .param pmc param_3984
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2887
    .lex "self", param_3983
    .lex "$/", param_3984
.annotate 'line', 2888
    new $P103, "Undef"
    set $P3985, $P103
    .lex "$block", $P3985
.annotate 'line', 2890
    new $P104, "Undef"
    set $P3986, $P104
    .lex "$past", $P3986
.annotate 'line', 2888
    set $P3987, param_3984
    unless_null $P3987, vivify_2871
    $P3987 = root_new ['parrot';'Hash']
  vivify_2871:
    set $P105, $P3987["block"]
    unless_null $P105, vivify_2872
    new $P105, "Undef"
  vivify_2872:
    $P106 = $P105."ast"()
    set $P3985, $P106
.annotate 'line', 2889
    set $P105, $P3985
    unless_null $P105, vivify_2873
    new $P105, "Undef"
  vivify_2873:
    $P105."blocktype"("immediate")
.annotate 'line', 2891
    get_hll_global $P105, "GLOBAL"
    nqp_get_package_through_who $P106, $P105, "PAST"
    get_who $P107, $P106
    set $P108, $P107["Stmts"]
.annotate 'line', 2892
    get_hll_global $P109, "GLOBAL"
    nqp_get_package_through_who $P110, $P109, "PAST"
    get_who $P111, $P110
    set $P112, $P111["Op"]
.annotate 'line', 2893
    get_hll_global $P113, "GLOBAL"
    nqp_get_package_through_who $P114, $P113, "PAST"
    get_who $P115, $P114
    set $P116, $P115["Var"]
    $P117 = $P116."new"("$/" :named("name"))
.annotate 'line', 2894
    get_hll_global $P118, "GLOBAL"
    nqp_get_package_through_who $P119, $P118, "PAST"
    get_who $P120, $P119
    set $P121, $P120["Op"]
.annotate 'line', 2895
    get_hll_global $P122, "GLOBAL"
    nqp_get_package_through_who $P123, $P122, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Var"]
    $P126 = $P125."new"(unicode:"$\x{a2}" :named("name"))
    $P127 = $P121."new"($P126, "MATCH" :named("name"), "callmethod" :named("pasttype"))
.annotate 'line', 2894
    $P128 = $P112."new"($P117, $P127, "bind_6model" :named("pasttype"))
.annotate 'line', 2892
    set $P129, $P3985
    unless_null $P129, vivify_2874
    new $P129, "Undef"
  vivify_2874:
    $P130 = $P108."new"($P128, $P129)
.annotate 'line', 2891
    set $P3986, $P130
.annotate 'line', 2903
    set $P105, param_3984
    set $P106, $P3986
    unless_null $P106, vivify_2875
    new $P106, "Undef"
  vivify_2875:
    $P107 = $P105."!make"($P106)
.annotate 'line', 2887
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Compiler"]
.sub "_block3989"  :subid("841_1337966799.879") :outer("368_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2908
    .lex "$?PACKAGE", $P3991
    .lex "$?CLASS", $P3992
    .return ()
.end


.HLL "nqp"

.namespace []
.sub "_block3995" :load :anon :subid("842_1337966799.879")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1
    .const '' $P3997 = "368_1337966799.879" 
    $P110 = $P3997()
    .return ($P110)
.end

