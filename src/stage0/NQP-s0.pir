.include 'cclass.pasm'
.include 'except_severity.pasm'
.include 'except_types.pasm'
.include 'iglobals.pasm'
.include 'interpinfo.pasm'
.include 'iterator.pasm'
.include 'sysinfo.pasm'
.include 'stat.pasm'
.include 'datatypes.pasm'
.loadlib "nqp_group"
.loadlib "nqp_ops"
.loadlib "nqp_bigint_ops"
.loadlib "trans_ops"
.loadlib "io_ops"
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_1_1346968539.359") :anon :lex
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc _lex_param_0 :slurpy 
    .const 'Sub' $P5057 = 'cuid_369_1346968539.359' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_370_1346968539.359' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_32_1346968539.359' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_223_1346968539.359' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_243_1346968539.359' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_399_1346968539.359' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_400_1346968539.359' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_401_1346968539.359' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_402_1346968539.359' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_403_1346968539.359' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_404_1346968539.359' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_405_1346968539.359' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_356_1346968539.359' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_367_1346968539.359' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_368_1346968539.359' 
    capture_lex $P5057 
    .lex "GLOBALish", $P101 
    .lex "$?PACKAGE", $P102 
    .lex "$ops", $P103 
    .lex "&MAIN", $P104 
    .lex "&hll-config", $P105 
    .lex "@ARGS", _lex_param_0 
    .local pmc ctxsave 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P103, $P5001
    .const 'Sub' $P5002 = 'cuid_369_1346968539.359' 
    capture_lex $P5002
    set $P104, $P5002
    .const 'Sub' $P5003 = 'cuid_370_1346968539.359' 
    capture_lex $P5003
    set $P105, $P5003
    find_dynamic_lex $P5004, "$*CTXSAVE"
    set ctxsave, $P5004
    isnull $I5001, ctxsave
    box $P5009, $I5001
    set $P5008, $P5009
    if $I5001 goto unless12_end16 
    can $I5002, ctxsave, "ctxsave"
    box $P5007, $I5002
    set $P5006, $P5007
    unless $I5002 goto if13_end18 
    $P5005 = ctxsave."ctxsave"()
    set $P5006, $P5005
  if13_end18:
    set $P5008, $P5006
  unless12_end16:
.annotate 'line', 1
    .const 'Sub' $P5010 = 'cuid_32_1346968539.359' 
    capture_lex $P5010
    $P5011 = $P5010()
    .const 'Sub' $P5012 = 'cuid_223_1346968539.359' 
    capture_lex $P5012
    $P5013 = $P5012()
    .const 'Sub' $P5014 = 'cuid_243_1346968539.359' 
    capture_lex $P5014
    $P5015 = $P5014()
.annotate 'line', 1385
    get_hll_global $P5019, "GLOBAL"
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Compiler"]
    unless_null $P5016, fallback3563
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5016, $P5020
  fallback3563:
    $P5021 = $P5016."operations"()
    set $P103, $P5021
.annotate 'line', 1387
    $P5022 = $P103."add_hll_pirop_mapping"("nqp", "nqpmultidispatch", "multi_dispatch_over_lexical_candidates", "P")
.annotate 'line', 1389
    .const 'Sub' $P5024 = 'cuid_399_1346968539.359' 
    capture_lex $P5024
    newclosure $P5023, $P5024
    $P5025 = $P103."add_hll_op"("nqp", "preinc", $P5023)
.annotate 'line', 1404
    .const 'Sub' $P5027 = 'cuid_400_1346968539.359' 
    capture_lex $P5027
    newclosure $P5026, $P5027
    $P5028 = $P103."add_hll_op"("nqp", "predec", $P5026)
.annotate 'line', 1419
    .const 'Sub' $P5030 = 'cuid_401_1346968539.359' 
    capture_lex $P5030
    newclosure $P5029, $P5030
    $P5031 = $P103."add_hll_op"("nqp", "postinc", $P5029)
.annotate 'line', 1443
    .const 'Sub' $P5033 = 'cuid_402_1346968539.359' 
    capture_lex $P5033
    newclosure $P5032, $P5033
    $P5034 = $P103."add_hll_op"("nqp", "postdec", $P5032)
.annotate 'line', 1467
    .const 'Sub' $P5036 = 'cuid_403_1346968539.359' 
    capture_lex $P5036
    newclosure $P5035, $P5036
    $P5037 = $P103."add_hll_op"("nqp", "numify", $P5035)
.annotate 'line', 1471
    .const 'Sub' $P5039 = 'cuid_404_1346968539.359' 
    capture_lex $P5039
    newclosure $P5038, $P5039
    $P5040 = $P103."add_hll_op"("nqp", "stringify", $P5038)
.annotate 'line', 1475
    .const 'Sub' $P5042 = 'cuid_405_1346968539.359' 
    capture_lex $P5042
    newclosure $P5041, $P5042
    $P5043 = $P103."add_hll_op"("nqp", "eqaddr", $P5041)
    .const 'Sub' $P5044 = 'cuid_356_1346968539.359' 
    capture_lex $P5044
    $P5045 = $P5044()
    .const 'Sub' $P5046 = 'cuid_367_1346968539.359' 
    capture_lex $P5046
    $P5047 = $P5046()
    .const 'Sub' $P5048 = 'cuid_368_1346968539.359' 
    capture_lex $P5048
    $P5049 = $P5048()
    set $P5056, _lex_param_0
    unless _lex_param_0 goto if1622_end5407 
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5050, "ModuleLoader"
    getinterp $P5052
    set $P5051, $P5052["context"]
    $P5053 = $P5050."set_mainline_module"($P5051)
    .const 'Sub' $P5054 = "cuid_369_1346968539.359" 
    $P5055 = $P5054(_lex_param_0 :flat)
    set $P5056, $P5055
  if1622_end5407:
    .return () 
.end
.HLL "nqp"
.namespace []
.sub "MAIN" :subid("cuid_369_1346968539.359") :anon :lex :outer("cuid_1_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3060
    .param pmc _lex_param_0 
    .lex "$nqpcomp", $P101 
    .lex "@clo", $P102 
    .lex "@ARGS", _lex_param_0 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    set $P102, $P5002
.annotate 'line', 3062
    get_hll_global $P5006, "GLOBAL"
    nqp_get_package_through_who $P5005, $P5006, "NQP"
    get_who $P5004, $P5005
    set $P5003, $P5004["Compiler"]
    unless_null $P5003, fallback10
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5003, $P5007
  fallback10:
    $P5008 = $P5003."new"()
    set $P101, $P5008
.annotate 'line', 3063
    $P5009 = $P101."language"("nqp")
.annotate 'line', 3064
    get_hll_global $P5013, "GLOBAL"
    nqp_get_package_through_who $P5012, $P5013, "NQP"
    get_who $P5011, $P5012
    set $P5010, $P5011["Grammar"]
    unless_null $P5010, fallback11
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5010, $P5014
  fallback11:
    $P5015 = $P101."parsegrammar"($P5010)
.annotate 'line', 3065
    get_hll_global $P5019, "GLOBAL"
    nqp_get_package_through_who $P5018, $P5019, "NQP"
    get_who $P5017, $P5018
    set $P5016, $P5017["Actions"]
    unless_null $P5016, fallback12
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5016, $P5020
  fallback12:
    $P5021 = $P101."parseactions"($P5016)
.annotate 'line', 3066
    $P5022 = $P101."config"()
    $P5023 = "&hll-config"($P5022)
.annotate 'line', 3069
    $P5024 = $P101."commandline_options"()
    set $P102, $P5024
.annotate 'line', 3070
    $P5025 = $P102."push"("parsetrace")
.annotate 'line', 3071
    $P5026 = $P102."push"("setting=s")
.annotate 'line', 3072
    $P5027 = $P102."push"("setting-path=s")
.annotate 'line', 3073
    $P5028 = $P102."push"("module-path=s")
.annotate 'line', 3074
    $P5029 = $P102."push"("vmlibs=s")
.annotate 'line', 3075
    $P5030 = $P102."push"("no-regex-lib")
.annotate 'line', 3076
    $P5031 = $P102."push"("old-regex-lib")
    new $P5035, 'ExceptionHandler'
    set_label $P5035, catch_handler_1114
    $P5035.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5035
.annotate 'line', 3080
.annotate 'line', 3081
    get_hll_global $P5032, "ModuleLoader"
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 0
    $P5034 = $P5032."load_module"("PASTRegex", $P5033)
    set $P5036, $P5034
    pop_eh 
    goto skip_handler_1013
  catch_handler_1114:
    .get_results ($P5035) 
    set $I10001, 1
    set $P5035["handled"], $I10001
    nqp_get_sc_object $P10001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    finalize $P5035
    pop_upto_eh $P5035
    pop_eh 
    set $P5036, $P10001
    goto skip_handler_1013
  skip_handler_1013:
.annotate 'line', 3085
    $P5037 = $P101."command_line"(_lex_param_0, "utf8" :named("encoding"), "ascii iso-8859-1" :named("transcode"))
.annotate 'line', 3087
    $P5038 = $P101."nqpevent"()
    .return ($P5038) 
.end
.HLL "nqp"
.namespace []
.sub "hll-config" :subid("cuid_370_1346968539.359") :anon :lex :outer("cuid_1_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3091
    .param pmc _lex_param_0 
    .lex "$config", _lex_param_0 
    box $P5001, "2012.08-222-gb0f089a"
    set _lex_param_0["version"], $P5001
    box $P5002, "2012-09-06T21:55:39Z"
    set _lex_param_0["build-date"], $P5002
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_32_1346968539.359") :anon :lex :outer("cuid_1_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 8
    .const 'Sub' $P5030 = 'cuid_2_1346968539.359' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_3_1346968539.359' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_4_1346968539.359' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_5_1346968539.359' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_6_1346968539.359' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_7_1346968539.359' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_8_1346968539.359' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_9_1346968539.359' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_10_1346968539.359' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_11_1346968539.359' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_15_1346968539.359' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_16_1346968539.359' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_17_1346968539.359' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_18_1346968539.359' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_19_1346968539.359' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_20_1346968539.359' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_21_1346968539.359' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_22_1346968539.359' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_23_1346968539.359' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_24_1346968539.359' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_25_1346968539.359' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_26_1346968539.359' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_27_1346968539.359' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_28_1346968539.359' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_29_1346968539.359' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_30_1346968539.359' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_31_1346968539.359' 
    capture_lex $P5030 
    .lex "$loader", $P101 
    .lex "$?PACKAGE", $P102 
    .lex "$?CLASS", $P103 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    .const 'Sub' $P5002 = 'cuid_2_1346968539.359' 
    capture_lex $P5002
    .const 'Sub' $P5003 = 'cuid_3_1346968539.359' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_4_1346968539.359' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_5_1346968539.359' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_6_1346968539.359' 
    capture_lex $P5006
    get_hll_global $P5007, "ModuleLoader"
    set $P101, $P5007
    .const 'Sub' $P5008 = 'cuid_7_1346968539.359' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_8_1346968539.359' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_9_1346968539.359' 
    capture_lex $P5010
    .const 'Sub' $P5011 = 'cuid_10_1346968539.359' 
    capture_lex $P5011
    .const 'Sub' $P5012 = 'cuid_11_1346968539.359' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_15_1346968539.359' 
    capture_lex $P5013
    .const 'Sub' $P5014 = 'cuid_16_1346968539.359' 
    capture_lex $P5014
    .const 'Sub' $P5015 = 'cuid_17_1346968539.359' 
    capture_lex $P5015
    .const 'Sub' $P5016 = 'cuid_18_1346968539.359' 
    capture_lex $P5016
    .const 'Sub' $P5017 = 'cuid_19_1346968539.359' 
    capture_lex $P5017
    .const 'Sub' $P5018 = 'cuid_20_1346968539.359' 
    capture_lex $P5018
    .const 'Sub' $P5019 = 'cuid_21_1346968539.359' 
    capture_lex $P5019
    .const 'Sub' $P5020 = 'cuid_22_1346968539.359' 
    capture_lex $P5020
    .const 'Sub' $P5021 = 'cuid_23_1346968539.359' 
    capture_lex $P5021
    .const 'Sub' $P5022 = 'cuid_24_1346968539.359' 
    capture_lex $P5022
    .const 'Sub' $P5023 = 'cuid_25_1346968539.359' 
    capture_lex $P5023
    .const 'Sub' $P5024 = 'cuid_26_1346968539.359' 
    capture_lex $P5024
    .const 'Sub' $P5025 = 'cuid_27_1346968539.359' 
    capture_lex $P5025
    .const 'Sub' $P5026 = 'cuid_28_1346968539.359' 
    capture_lex $P5026
    .const 'Sub' $P5027 = 'cuid_29_1346968539.359' 
    capture_lex $P5027
    .const 'Sub' $P5028 = 'cuid_30_1346968539.359' 
    capture_lex $P5028
    .const 'Sub' $P5029 = 'cuid_31_1346968539.359' 
    capture_lex $P5029
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "BUILD" :subid("cuid_2_1346968539.359") :anon :lex :outer("cuid_32_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 27
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 :slurpy :named 
    .lex "self", _lex_param_0 
    .lex "%opts", _lex_param_1 
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 1
    new $P5003, 'ResizablePMCArray'
    repr_bind_attr_obj $P5001, $P5002, "@!BLOCKS", $P5003
    nqp_decontainerize $P5004, _lex_param_0
    nqp_get_sc_object $P5005, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 1
    new $P5006, 'Hash'
    repr_bind_attr_obj $P5004, $P5005, "%!code_objects_to_fix_up", $P5006
    nqp_decontainerize $P5007, _lex_param_0
    nqp_get_sc_object $P5008, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 1
    new $P5009, 'Hash'
    repr_bind_attr_obj $P5007, $P5008, "%!code_object_fixup_list", $P5009
    nqp_decontainerize $P5010, _lex_param_0
    nqp_get_sc_object $P5011, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 1
    new $P5012, 'Hash'
    repr_bind_attr_obj $P5010, $P5011, "%!code_stub_sc_idx", $P5012
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "push_lexpad" :subid("cuid_3_1346968539.359") :anon :lex :outer("cuid_32_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 35
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$pad", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
.annotate 'line', 37
    get_hll_global $P5005, "GLOBAL"
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Block"]
    unless_null $P5002, fallback19
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5002, $P5006
  fallback19:
    get_hll_global $P5010, "GLOBAL"
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Stmts"]
    unless_null $P5007, fallback20
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5007, $P5011
  fallback20:
    $P5012 = $P5007."new"()
    $P5013 = $P5002."new"($P5012, _lex_param_1 :named("node"))
    set $P101, $P5013
    nqp_decontainerize $P5014, _lex_param_0
    nqp_get_sc_object $P5015, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 1
    repr_get_attr_obj $P5016, $P5014, $P5015, "@!BLOCKS"
    set $N5001, $P5016
    box $P5026, $N5001
    set $P5025, $P5026
    unless $N5001 goto if14_end22 
.annotate 'line', 38
    nqp_decontainerize $P5018, _lex_param_0
    nqp_get_sc_object $P5019, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 1
    repr_get_attr_obj $P5020, $P5018, $P5019, "@!BLOCKS"
    nqp_decontainerize $P5021, _lex_param_0
    nqp_get_sc_object $P5022, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 1
    repr_get_attr_obj $P5023, $P5021, $P5022, "@!BLOCKS"
    set $N5003, $P5023
    set $N5004, 1
    sub $N5002, $N5003, $N5004
    set $I5001, $N5002
    set $P5017, $P5020[$I5001]
    unless_null $P5017, fallback23
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5017, $P5024
  fallback23:
    set $P101["outer"], $P5017
    set $P5025, $P5017
  if14_end22:
    nqp_decontainerize $P5027, _lex_param_0
    nqp_get_sc_object $P5028, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 1
    repr_get_attr_obj $P5029, $P5027, $P5028, "@!BLOCKS"
    nqp_decontainerize $P5030, _lex_param_0
    nqp_get_sc_object $P5031, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 1
    repr_get_attr_obj $P5032, $P5030, $P5031, "@!BLOCKS"
    set $N5005, $P5032
    set $I5002, $N5005
    set $P5029[$I5002], $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "pop_lexpad" :subid("cuid_4_1346968539.359") :anon :lex :outer("cuid_32_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 46
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
.annotate 'line', 47
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 1
    repr_get_attr_obj $P5003, $P5001, $P5002, "@!BLOCKS"
    $P5004 = $P5003."pop"()
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "cur_lexpad" :subid("cuid_5_1346968539.359") :anon :lex :outer("cuid_32_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 51
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
    nqp_decontainerize $P5002, _lex_param_0
    nqp_get_sc_object $P5003, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 1
    repr_get_attr_obj $P5004, $P5002, $P5003, "@!BLOCKS"
    nqp_decontainerize $P5005, _lex_param_0
    nqp_get_sc_object $P5006, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 1
    repr_get_attr_obj $P5007, $P5005, $P5006, "@!BLOCKS"
    set $N5002, $P5007
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    set $I5001, $N5001
    set $P5001, $P5004[$I5001]
    unless_null $P5001, fallback24
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5008
  fallback24:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "get_legacy_block_list" :subid("cuid_6_1346968539.359") :anon :lex :outer("cuid_32_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 56
    .param pmc _lex_param_0 
    .lex "@x", $P101 
    .lex "self", _lex_param_0 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_decontainerize $P5003, _lex_param_0
    nqp_get_sc_object $P5004, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 1
    repr_get_attr_obj $P5005, $P5003, $P5004, "@!BLOCKS"
    clone $P5002, $P5005
    set $P101, $P5002
.annotate 'line', 58
    $P5006 = $P101."reverse"()
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "load_setting" :subid("cuid_7_1346968539.359") :anon :lex :outer("cuid_32_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 69
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5005 = 'cuid_371_1346968539.359' 
    capture_lex $P5005 
    .lex "self", _lex_param_0 
    .lex "$setting_name", _lex_param_1 
    root_new $P101, ['parrot';'Continuation']
    set_label $P101, lexotic_25
    .lex "RETURN", $P101
    set $S5001, _lex_param_1
    isne $I5001, $S5001, "NULL"
    box $P5004, $I5001
    set $P5003, $P5004
    unless $I5001 goto if15_end28 
    .const 'Sub' $P5001 = 'cuid_371_1346968539.359' 
    capture_lex $P5001
    $P5002 = $P5001()
    set $P5003, $P5002
  if15_end28:
    goto lexotic_26
  lexotic_25:
    .get_results ($P5003)
  lexotic_26:
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_371_1346968539.359") :anon :lex :outer("cuid_7_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 71
    .lex "$setting", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    find_dynamic_lex $P5003, "%*COMPILING"
    unless_null $P5003, fallback29
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["%COMPILING"]
    unless_null $P5004, fallback30
    get_hll_global $P5008, "GLOBAL"
    get_who $P5007, $P5008
    new $P5009, 'Hash'
    set $P5007["%COMPILING"], $P5009
    set $P5004, $P5009
  fallback30:
    unless_null $P5004, vivi_1631
    die "Contextual %*COMPILING not found"
    box $P5010, "Contextual %*COMPILING not found"
    set $P5004, $P5010
  vivi_1631:
    set $P5003, $P5004
  fallback29:
    set $P5002, $P5003["%?OPTIONS"]
    unless_null $P5002, fallback32
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5002, $P5011
  fallback32:
.annotate 'line', 76
    find_lex $P5012, "$loader"
    find_lex $P5013, "$setting_name"
    $P5014 = $P5012."load_setting"($P5013)
    set $P5002["outer_ctx"], $P5014
    set $P101, $P5014
.annotate 'line', 79
    find_lex $P5016, "self"
    nqp_decontainerize $P5015, $P5016
    $P5017 = $P5015."is_precompilation_mode"()
    unless $P5017 goto if17_else33 
.annotate 'line', 80
    find_lex $P5019, "self"
    nqp_decontainerize $P5018, $P5019
    get_hll_global $P5023, "GLOBAL"
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Stmts"]
    unless_null $P5020, fallback35
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5020, $P5024
  fallback35:
.annotate 'line', 81
    get_hll_global $P5028, "GLOBAL"
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["VM"]
    unless_null $P5025, fallback36
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5025, $P5029
  fallback36:
.annotate 'line', 83
    get_hll_global $P5033, "GLOBAL"
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["SVal"]
    unless_null $P5030, fallback37
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5030, $P5034
  fallback37:
    $P5035 = $P5030."new"("ModuleLoader.pbc" :named("value"))
    $P5036 = $P5025."new"($P5035, "load_bytecode vs" :named("pirop"))
.annotate 'line', 85
    get_hll_global $P5040, "GLOBAL"
    nqp_get_package_through_who $P5039, $P5040, "QAST"
    get_who $P5038, $P5039
    set $P5037, $P5038["Op"]
    unless_null $P5037, fallback38
    nqp_get_sc_object $P5041, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5037, $P5041
  fallback38:
.annotate 'line', 87
    get_hll_global $P5045, "GLOBAL"
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["BVal"]
    unless_null $P5042, fallback39
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5042, $P5046
  fallback39:
    find_dynamic_lex $P5047, "$*UNIT"
    unless_null $P5047, fallback40
    get_hll_global $P5050, "GLOBAL"
    get_who $P5049, $P5050
    set $P5048, $P5049["$UNIT"]
    unless_null $P5048, fallback41
    nqp_get_sc_object $P5051, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5048, $P5051
  fallback41:
    unless_null $P5048, vivi_1842
    die "Contextual $*UNIT not found"
    box $P5052, "Contextual $*UNIT not found"
    set $P5048, $P5052
  vivi_1842:
    set $P5047, $P5048
  fallback40:
    $P5053 = $P5042."new"($P5047 :named("value"))
.annotate 'line', 88
    get_hll_global $P5057, "GLOBAL"
    nqp_get_package_through_who $P5056, $P5057, "QAST"
    get_who $P5055, $P5056
    set $P5054, $P5055["Op"]
    unless_null $P5054, fallback43
    nqp_get_sc_object $P5058, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5054, $P5058
  fallback43:
.annotate 'line', 90
    get_hll_global $P5062, "GLOBAL"
    nqp_get_package_through_who $P5061, $P5062, "QAST"
    get_who $P5060, $P5061
    set $P5059, $P5060["VM"]
    unless_null $P5059, fallback44
    nqp_get_sc_object $P5063, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5059, $P5063
  fallback44:
.annotate 'line', 92
    get_hll_global $P5067, "GLOBAL"
    nqp_get_package_through_who $P5066, $P5067, "QAST"
    get_who $P5065, $P5066
    set $P5064, $P5065["SVal"]
    unless_null $P5064, fallback45
    nqp_get_sc_object $P5068, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5064, $P5068
  fallback45:
    $P5069 = $P5064."new"("ModuleLoader" :named("value"))
    $P5070 = $P5059."new"($P5069, "get_hll_global Ps" :named("pirop"))
.annotate 'line', 94
    get_hll_global $P5074, "GLOBAL"
    nqp_get_package_through_who $P5073, $P5074, "QAST"
    get_who $P5072, $P5073
    set $P5071, $P5072["SVal"]
    unless_null $P5071, fallback46
    nqp_get_sc_object $P5075, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5071, $P5075
  fallback46:
    find_lex $P5076, "$setting_name"
    $P5077 = $P5071."new"($P5076 :named("value"))
    $P5078 = $P5054."new"($P5070, $P5077, "callmethod" :named("op"), "load_setting" :named("name"))
    $P5079 = $P5037."new"($P5053, $P5078, "callmethod" :named("op"), "set_outer_ctx" :named("name"))
    $P5080 = $P5020."new"($P5036, $P5079)
    $P5081 = $P5018."add_load_dependency_task"($P5080 :named("deserialize_past"))
    set $P5128, $P5081
    goto if17_end34
  if17_else33:
.annotate 'line', 99
.annotate 'line', 101
    find_lex $P5083, "self"
    nqp_decontainerize $P5082, $P5083
    get_hll_global $P5087, "GLOBAL"
    nqp_get_package_through_who $P5086, $P5087, "QAST"
    get_who $P5085, $P5086
    set $P5084, $P5085["Op"]
    unless_null $P5084, fallback47
    nqp_get_sc_object $P5088, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5084, $P5088
  fallback47:
.annotate 'line', 103
    get_hll_global $P5092, "GLOBAL"
    nqp_get_package_through_who $P5091, $P5092, "QAST"
    get_who $P5090, $P5091
    set $P5089, $P5090["BVal"]
    unless_null $P5089, fallback48
    nqp_get_sc_object $P5093, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5089, $P5093
  fallback48:
    find_dynamic_lex $P5094, "$*UNIT"
    unless_null $P5094, fallback49
    get_hll_global $P5097, "GLOBAL"
    get_who $P5096, $P5097
    set $P5095, $P5096["$UNIT"]
    unless_null $P5095, fallback50
    nqp_get_sc_object $P5098, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5095, $P5098
  fallback50:
    unless_null $P5095, vivi_1951
    die "Contextual $*UNIT not found"
    box $P5099, "Contextual $*UNIT not found"
    set $P5095, $P5099
  vivi_1951:
    set $P5094, $P5095
  fallback49:
    $P5100 = $P5089."new"($P5094 :named("value"))
.annotate 'line', 104
    get_hll_global $P5104, "GLOBAL"
    nqp_get_package_through_who $P5103, $P5104, "QAST"
    get_who $P5102, $P5103
    set $P5101, $P5102["Op"]
    unless_null $P5101, fallback52
    nqp_get_sc_object $P5105, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5101, $P5105
  fallback52:
.annotate 'line', 106
    get_hll_global $P5109, "GLOBAL"
    nqp_get_package_through_who $P5108, $P5109, "QAST"
    get_who $P5107, $P5108
    set $P5106, $P5107["VM"]
    unless_null $P5106, fallback53
    nqp_get_sc_object $P5110, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5106, $P5110
  fallback53:
.annotate 'line', 108
    get_hll_global $P5114, "GLOBAL"
    nqp_get_package_through_who $P5113, $P5114, "QAST"
    get_who $P5112, $P5113
    set $P5111, $P5112["SVal"]
    unless_null $P5111, fallback54
    nqp_get_sc_object $P5115, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5111, $P5115
  fallback54:
    $P5116 = $P5111."new"("ModuleLoader" :named("value"))
    $P5117 = $P5106."new"($P5116, "get_hll_global Ps" :named("pirop"))
.annotate 'line', 110
    get_hll_global $P5121, "GLOBAL"
    nqp_get_package_through_who $P5120, $P5121, "QAST"
    get_who $P5119, $P5120
    set $P5118, $P5119["SVal"]
    unless_null $P5118, fallback55
    nqp_get_sc_object $P5122, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5118, $P5122
  fallback55:
    find_lex $P5123, "$setting_name"
    $P5124 = $P5118."new"($P5123 :named("value"))
    $P5125 = $P5101."new"($P5117, $P5124, "callmethod" :named("op"), "load_setting" :named("name"))
    $P5126 = $P5084."new"($P5100, $P5125, "callmethod" :named("op"), "set_outer_ctx" :named("name"))
    $P5127 = $P5082."add_fixup_task"($P5126 :named("fixup_past"))
    set $P5128, $P5127
  if17_end34:
    getattribute $P5130, $P101, "lex_pad"
    find_lex $P5129, "RETURN"
    $P5131 = $P5129($P5130)
    .return ($P5131) 
.end
.HLL "nqp"
.namespace []
.sub "load_module" :subid("cuid_8_1346968539.359") :anon :lex :outer("cuid_32_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 121
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$module", $P101 
    .lex "self", _lex_param_0 
    .lex "$module_name", _lex_param_1 
    .lex "$cur_GLOBALish", _lex_param_2 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_56
    .lex "RETURN", $P102
.annotate 'line', 123
    find_lex $P5002, "$loader"
    $P5003 = $P5002."load_module"(_lex_param_1, _lex_param_2)
    set $P101, $P5003
.annotate 'line', 126
    nqp_decontainerize $P5004, _lex_param_0
    $P5005 = $P5004."is_precompilation_mode"()
    set $P5050, $P5005
    unless $P5005 goto if20_end59 
.annotate 'line', 127
    nqp_decontainerize $P5006, _lex_param_0
    get_hll_global $P5010, "GLOBAL"
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Stmts"]
    unless_null $P5007, fallback60
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5007, $P5011
  fallback60:
.annotate 'line', 128
    get_hll_global $P5015, "GLOBAL"
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["VM"]
    unless_null $P5012, fallback61
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5012, $P5016
  fallback61:
.annotate 'line', 130
    get_hll_global $P5020, "GLOBAL"
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["SVal"]
    unless_null $P5017, fallback62
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5017, $P5021
  fallback62:
    $P5022 = $P5017."new"("ModuleLoader.pbc" :named("value"))
    $P5023 = $P5012."new"($P5022, "load_bytecode vs" :named("pirop"))
.annotate 'line', 132
    get_hll_global $P5027, "GLOBAL"
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["Op"]
    unless_null $P5024, fallback63
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5024, $P5028
  fallback63:
.annotate 'line', 134
    get_hll_global $P5032, "GLOBAL"
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["VM"]
    unless_null $P5029, fallback64
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5029, $P5033
  fallback64:
.annotate 'line', 136
    get_hll_global $P5037, "GLOBAL"
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set $P5034, $P5035["SVal"]
    unless_null $P5034, fallback65
    nqp_get_sc_object $P5038, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5034, $P5038
  fallback65:
    $P5039 = $P5034."new"("ModuleLoader" :named("value"))
    $P5040 = $P5029."new"($P5039, "get_hll_global Ps" :named("pirop"))
.annotate 'line', 138
    get_hll_global $P5044, "GLOBAL"
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["SVal"]
    unless_null $P5041, fallback66
    nqp_get_sc_object $P5045, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5041, $P5045
  fallback66:
    $P5046 = $P5041."new"(_lex_param_1 :named("value"))
    $P5047 = $P5024."new"($P5040, $P5046, "callmethod" :named("op"), "load_module" :named("name"))
    $P5048 = $P5007."new"($P5023, $P5047)
    $P5049 = $P5006."add_load_dependency_task"($P5048 :named("deserialize_past"))
    set $P5050, $P5049
  if20_end59:
    getattribute $P5052, $P101, "lex_pad"
    find_lex $P5051, "RETURN"
    $P5053 = $P5051($P5052)
    goto lexotic_57
  lexotic_56:
    .get_results ($P5053)
  lexotic_57:
    .return ($P5053) 
.end
.HLL "nqp"
.namespace []
.sub "install_package_symbol" :subid("cuid_9_1346968539.359") :anon :lex :outer("cuid_32_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 147
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .const 'Sub' $P5012 = 'cuid_372_1346968539.359' 
    capture_lex $P5012 
    .lex "$name", $P101 
    .lex "$target", $P102 
    .lex "self", _lex_param_0 
    .lex "$package", _lex_param_1 
    .lex "@sym", _lex_param_2 
    .lex "$obj", _lex_param_3 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
    clone $P5003, _lex_param_2
    set _lex_param_2, $P5003
.annotate 'line', 149
    $P5004 = _lex_param_2."pop"()
    set $S5001, $P5004
    box $P5005, $S5001
    set $P101, $P5005
    set $P102, _lex_param_1
    set $P5006, _lex_param_2
    iter $P5008, _lex_param_2
  for_next67:
    unless $P5008, for_done69
    shift $P5010, $P5008
  for_redo68:
    .const 'Sub' $P5009 = 'cuid_372_1346968539.359' 
    capture_lex $P5009
    $P5006 = $P5009($P5010)
    goto for_next67
  for_done69:
    get_who $P5011, $P102
    set $S5002, $P101
    set $P5011[$S5002], _lex_param_3
    .return (_lex_param_3) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_372_1346968539.359") :anon :lex :outer("cuid_9_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 153
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$target"
    set $S5001, _lex_param_0
    nqp_get_package_through_who $P5001, $P5002, $S5001
    store_lex "$target", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "install_lexical_symbol" :subid("cuid_10_1346968539.359") :anon :lex :outer("cuid_32_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 163
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "$fixup", $P101 
    .lex "self", _lex_param_0 
    .lex "$block", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$obj", _lex_param_3 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
.annotate 'line', 165
    $P5002 = _lex_param_1."symbol"(_lex_param_2, "lexical" :named("scope"), _lex_param_3 :named("value"))
.annotate 'line', 166
    set $P5003, _lex_param_1[0]
    unless_null $P5003, fallback70
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5003, $P5004
  fallback70:
    get_hll_global $P5008, "GLOBAL"
    nqp_get_package_through_who $P5007, $P5008, "QAST"
    get_who $P5006, $P5007
    set $P5005, $P5006["Var"]
    unless_null $P5005, fallback71
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5005, $P5009
  fallback71:
    $P5010 = $P5005."new"("lexical" :named("scope"), _lex_param_2 :named("name"), "var" :named("decl"))
    $P5011 = $P5003."push"($P5010)
.annotate 'line', 169
    get_hll_global $P5015, "GLOBAL"
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Stmts"]
    unless_null $P5012, fallback72
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5012, $P5016
  fallback72:
.annotate 'line', 170
    get_hll_global $P5020, "GLOBAL"
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Op"]
    unless_null $P5017, fallback73
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5017, $P5021
  fallback73:
.annotate 'line', 172
    get_hll_global $P5025, "GLOBAL"
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["VM"]
    unless_null $P5022, fallback74
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5022, $P5026
  fallback74:
.annotate 'line', 173
    $P5027 = _lex_param_1."cuid"()
    set $S5003, $P5027
    concat $S5002, "    .const \"LexInfo\" %r = \"", $S5003
    concat $S5001, $S5002, "\""
    $P5028 = $P5022."new"($S5001 :named("pir"))
.annotate 'line', 175
    get_hll_global $P5032, "GLOBAL"
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["SVal"]
    unless_null $P5029, fallback75
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5029, $P5033
  fallback75:
    $P5034 = $P5029."new"(_lex_param_2 :named("value"))
.annotate 'line', 176
    get_hll_global $P5038, "GLOBAL"
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["WVal"]
    unless_null $P5035, fallback76
    nqp_get_sc_object $P5039, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5035, $P5039
  fallback76:
    $P5040 = $P5035."new"(_lex_param_3 :named("value"))
    $P5041 = $P5017."new"($P5028, $P5034, $P5040, "callmethod" :named("op"), "set_static_lexpad_value" :named("name"))
.annotate 'line', 180
    get_hll_global $P5045, "GLOBAL"
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["Op"]
    unless_null $P5042, fallback77
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5042, $P5046
  fallback77:
.annotate 'line', 182
    get_hll_global $P5050, "GLOBAL"
    nqp_get_package_through_who $P5049, $P5050, "QAST"
    get_who $P5048, $P5049
    set $P5047, $P5048["VM"]
    unless_null $P5047, fallback78
    nqp_get_sc_object $P5051, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5047, $P5051
  fallback78:
.annotate 'line', 183
    $P5052 = _lex_param_1."cuid"()
    set $S5006, $P5052
    concat $S5005, "    .const \"LexInfo\" %r = \"", $S5006
    concat $S5004, $S5005, "\""
    $P5053 = $P5047."new"($S5004 :named("pir"))
    $P5054 = $P5042."new"($P5053, "callmethod" :named("op"), "finish_static_lexpad" :named("name"))
    $P5055 = $P5012."new"($P5041, $P5054)
    set $P101, $P5055
.annotate 'line', 187
    nqp_decontainerize $P5056, _lex_param_0
    $P5057 = $P5056."add_fixup_task"($P101 :named("deserialize_past"), $P101 :named("fixup_past"))
    .return ($P5057) 
.end
.HLL "nqp"
.namespace []
.sub "install_package_routine" :subid("cuid_11_1346968539.359") :anon :lex :outer("cuid_32_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 192
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "$fixup", $P101 
    .lex "self", _lex_param_0 
    .lex "$package", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$past_block", _lex_param_3 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
.annotate 'line', 193
    get_hll_global $P5005, "GLOBAL"
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Op"]
    unless_null $P5002, fallback79
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5002, $P5006
  fallback79:
.annotate 'line', 195
    get_hll_global $P5010, "GLOBAL"
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Op"]
    unless_null $P5007, fallback80
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5007, $P5011
  fallback80:
    get_hll_global $P5015, "GLOBAL"
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["WVal"]
    unless_null $P5012, fallback81
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5012, $P5016
  fallback81:
    $P5017 = $P5012."new"(_lex_param_1 :named("value"))
    $P5018 = $P5007."new"($P5017, "who" :named("op"))
.annotate 'line', 196
    get_hll_global $P5022, "GLOBAL"
    nqp_get_package_through_who $P5021, $P5022, "QAST"
    get_who $P5020, $P5021
    set $P5019, $P5020["SVal"]
    unless_null $P5019, fallback82
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5019, $P5023
  fallback82:
    set $S5001, _lex_param_2
    $P5024 = $P5019."new"($S5001 :named("value"))
.annotate 'line', 197
    get_hll_global $P5028, "GLOBAL"
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["BVal"]
    unless_null $P5025, fallback83
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5025, $P5029
  fallback83:
    $P5030 = $P5025."new"(_lex_param_3 :named("value"))
    $P5031 = $P5002."new"($P5018, $P5024, $P5030, "bindkey" :named("op"))
    set $P101, $P5031
.annotate 'line', 199
    nqp_decontainerize $P5032, _lex_param_0
    $P5033 = $P5032."add_fixup_task"($P101 :named("deserialize_past"), $P101 :named("fixup_past"))
    .return ($P5033) 
.end
.HLL "nqp"
.namespace []
.sub "create_code" :subid("cuid_15_1346968539.359") :anon :lex :outer("cuid_32_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 204
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .const 'Sub' $P5101 = 'cuid_12_1346968539.359' 
    capture_lex $P5101 
    .const 'Sub' $P5101 = 'cuid_13_1346968539.359' 
    capture_lex $P5101 
    .const 'Sub' $P5101 = 'cuid_14_1346968539.359' 
    capture_lex $P5101 
    .const 'Sub' $P5101 = 'cuid_376_1346968539.359' 
    capture_lex $P5101 
    .lex "$code_type", $P101 
    .lex "$have_code_type", $P102 
    .lex "$stub_code", $P103 
    .lex "$fixups", $P104 
    .lex "$dummy", $P105 
    .lex "$code_ref_idx", $P106 
    .lex "self", _lex_param_0 
    .lex "$past", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$is_dispatcher", _lex_param_3 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P104, $P5004
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P105, $P5005
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P106, $P5006
    root_new $P107, ['parrot';'Continuation']
    set_label $P107, lexotic_84
    .lex "RETURN", $P107
    box $P5007, 0
    set $P102, $P5007
    new $P5027, 'ExceptionHandler'
    set_label $P5027, catch_handler_2493
    $P5027.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5027
.annotate 'line', 208
.annotate 'line', 209
    nqp_decontainerize $P5008, _lex_param_0
    new $P5009, 'ResizablePMCArray'
    box $P5010, "NQPRoutine"
    push $P5009, $P5010
    $P5011 = $P5008."find_sym"($P5009)
    set $P101, $P5011
.annotate 'line', 210
    find_dynamic_lex $P5013, "$*PACKAGE"
    unless_null $P5013, fallback86
    get_hll_global $P5016, "GLOBAL"
    get_who $P5015, $P5016
    set $P5014, $P5015["$PACKAGE"]
    unless_null $P5014, fallback87
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5014, $P5017
  fallback87:
    unless_null $P5014, vivi_2188
    die "Contextual $*PACKAGE not found"
    box $P5018, "Contextual $*PACKAGE not found"
    set $P5014, $P5018
  vivi_2188:
    set $P5013, $P5014
  fallback86:
    get_how $P5012, $P5013
    find_dynamic_lex $P5019, "$*PACKAGE"
    unless_null $P5019, fallback89
    get_hll_global $P5022, "GLOBAL"
    get_who $P5021, $P5022
    set $P5020, $P5021["$PACKAGE"]
    unless_null $P5020, fallback90
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5020, $P5023
  fallback90:
    unless_null $P5020, vivi_2291
    die "Contextual $*PACKAGE not found"
    box $P5024, "Contextual $*PACKAGE not found"
    set $P5020, $P5024
  vivi_2291:
    set $P5019, $P5020
  fallback89:
    $P5025 = $P5012."name"($P5019)
    set $S5001, $P5025
    isne $I5001, $S5001, "NQPRoutine"
    box $P5026, $I5001
    set $P102, $P5026
    set $P5028, $P102
    pop_eh 
    goto skip_handler_2392
  catch_handler_2493:
    .get_results ($P5027) 
    set $I10001, 1
    set $P5027["handled"], $I10001
    nqp_get_sc_object $P10001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    finalize $P5027
    pop_upto_eh $P5027
    pop_eh 
    set $P5028, $P10001
    goto skip_handler_2392
  skip_handler_2392:
    .const 'Sub' $P5030 = 'cuid_12_1346968539.359' 
    capture_lex $P5030
    newclosure $P5029, $P5030
    set $P103, $P5029
.annotate 'line', 253
    get_hll_global $P5034, "GLOBAL"
    nqp_get_package_through_who $P5033, $P5034, "QAST"
    get_who $P5032, $P5033
    set $P5031, $P5032["Stmts"]
    unless_null $P5031, fallback120
    nqp_get_sc_object $P5035, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5031, $P5035
  fallback120:
    $P5036 = $P5031."new"()
    set $P104, $P5036
    set $P5037, _lex_param_1["compile_time_dummy"]
    unless_null $P5037, fallback123
    nqp_get_sc_object $P5038, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5037, $P5038
  fallback123:
    defined $I5002, $P5037
    unless $I5002 goto if28_else121 
.annotate 'line', 256
    set $P5039, _lex_param_1["compile_time_dummy"]
    unless_null $P5039, fallback124
    nqp_get_sc_object $P5040, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5039, $P5040
  fallback124:
    set $P105, $P5039
    set $P5060, $P105
    goto if28_end122
  if28_else121:
.annotate 'line', 259
    nqp_fresh_stub $P5041, $P103
    set $P105, $P5041
    set $S5002, _lex_param_2
    assign $P105, $S5002
    setprop $P105, "STATIC_CODE_REF", $P105
.annotate 'line', 266
    nqp_decontainerize $P5042, _lex_param_0
    $P5043 = $P5042."add_root_code_ref"($P105, _lex_param_1)
    set $P106, $P5043
    nqp_decontainerize $P5044, _lex_param_0
    nqp_get_sc_object $P5045, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 1
    repr_get_attr_obj $P5046, $P5044, $P5045, "%!code_stub_sc_idx"
.annotate 'line', 267
    $P5047 = _lex_param_1."cuid"()
    set $S5003, $P5047
    set $P5046[$S5003], $P106
    set _lex_param_1["compile_time_dummy"], $P105
    setprop $P105, "PAST", _lex_param_1
    set $P5059, $P102
    unless $P102 goto if29_end126 
.annotate 'line', 276
    nqp_decontainerize $P5048, _lex_param_0
    nqp_get_sc_object $P5049, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 1
    repr_get_attr_obj $P5050, $P5048, $P5049, "%!code_object_fixup_list"
.annotate 'line', 277
    $P5051 = _lex_param_1."cuid"()
    set $S5004, $P5051
    set $P5050[$S5004], $P104
.annotate 'line', 278
    nqp_decontainerize $P5052, _lex_param_0
    $P5053 = $P5052."is_precompilation_mode"()
    unless $P5053 goto if30_else127 
    .const 'Sub' $P5055 = 'cuid_13_1346968539.359' 
    capture_lex $P5055
    newclosure $P5054, $P5055
    setprop $P105, "CLONE_CALLBACK", $P5054
    set $P5058, $P105
    goto if30_end128
  if30_else127:
.annotate 'line', 283
    .const 'Sub' $P5057 = 'cuid_14_1346968539.359' 
    capture_lex $P5057
    newclosure $P5056, $P5057
    setprop $P105, "CLONE_CALLBACK", $P5056
    set $P5058, $P105
  if30_end128:
    set $P5059, $P5058
  if29_end126:
    set $P5060, $P5059
  if28_end122:
.annotate 'line', 307
    nqp_decontainerize $P5061, _lex_param_0
    $P5062 = $P5061."add_fixup_task"($P104 :named("fixup_past"))
    unless $P102 goto if31_else139 
    .const 'Sub' $P5063 = 'cuid_376_1346968539.359' 
    capture_lex $P5063
    $P5064 = $P5063()
    set $P5100, $P5064
    goto if31_end140
  if31_else139:
.annotate 'line', 346
.annotate 'line', 349
    get_hll_global $P5068, "GLOBAL"
    nqp_get_package_through_who $P5067, $P5068, "QAST"
    get_who $P5066, $P5067
    set $P5065, $P5066["VM"]
    unless_null $P5065, fallback154
    nqp_get_sc_object $P5069, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5065, $P5069
  fallback154:
.annotate 'line', 351
    get_hll_global $P5073, "GLOBAL"
    nqp_get_package_through_who $P5072, $P5073, "QAST"
    get_who $P5071, $P5072
    set $P5070, $P5071["VM"]
    unless_null $P5070, fallback155
    nqp_get_sc_object $P5074, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5070, $P5074
  fallback155:
.annotate 'line', 353
    get_hll_global $P5078, "GLOBAL"
    nqp_get_package_through_who $P5077, $P5078, "QAST"
    get_who $P5076, $P5077
    set $P5075, $P5076["SVal"]
    unless_null $P5075, fallback156
    nqp_get_sc_object $P5079, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5075, $P5079
  fallback156:
    nqp_decontainerize $P5080, _lex_param_0
    $P5081 = $P5080."handle"()
    $P5082 = $P5075."new"($P5081 :named("value"))
.annotate 'line', 354
    get_hll_global $P5086, "GLOBAL"
    nqp_get_package_through_who $P5085, $P5086, "QAST"
    get_who $P5084, $P5085
    set $P5083, $P5084["IVal"]
    unless_null $P5083, fallback157
    nqp_get_sc_object $P5087, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5083, $P5087
  fallback157:
    $P5088 = $P5083."new"($P106 :named("value"))
    $P5089 = $P5070."new"($P5082, $P5088, "nqp_get_sc_code_ref Psi" :named("pirop"))
.annotate 'line', 356
    get_hll_global $P5093, "GLOBAL"
    nqp_get_package_through_who $P5092, $P5093, "QAST"
    get_who $P5091, $P5092
    set $P5090, $P5091["BVal"]
    unless_null $P5090, fallback158
    nqp_get_sc_object $P5094, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5090, $P5094
  fallback158:
    $P5095 = $P5090."new"(_lex_param_1 :named("value"))
    $P5096 = $P5065."new"($P5089, $P5095, "assign vPP" :named("pirop"))
    $P5097 = $P104."push"($P5096)
    find_lex $P5098, "RETURN"
    $P5099 = $P5098($P105)
    set $P5100, $P5099
  if31_end140:
    goto lexotic_85
  lexotic_84:
    .get_results ($P5100)
  lexotic_85:
    .return ($P5100) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_12_1346968539.359") :anon :lex :outer("cuid_15_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 217
    .param pmc _lex_param_0 :slurpy 
    .param pmc _lex_param_1 :slurpy :named 
    .const 'Sub' $P5030 = 'cuid_375_1346968539.359' 
    capture_lex $P5030 
    .lex "$nqpcomp", $P101 
    .lex "$post", $P102 
    .lex "$pir", $P103 
    .lex "$compiled", $P104 
    .lex "$c", $P105 
    .lex "$i", $P106 
    .lex "@args", _lex_param_0 
    .lex "%named", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P104, $P5004
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P105, $P5005
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P106, $P5006
.annotate 'line', 219
    find_lex $P5007, "$past"
    find_lex $P5009, "self"
    nqp_decontainerize $P5008, $P5009
    $P5010 = $P5008."libs"()
    $P5011 = $P5007."unshift"($P5010)
    compreg $P5012, "nqp"
    set $P101, $P5012
.annotate 'line', 221
    get_hll_global $P5016, "GLOBAL"
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["CompUnit"]
    unless_null $P5013, fallback94
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5013, $P5017
  fallback94:
    find_lex $P5018, "$past"
    $P5019 = $P5013."new"($P5018, "nqp" :named("hll"))
    $P5020 = $P101."post"($P5019)
    set $P102, $P5020
.annotate 'line', 222
    $P5021 = $P101."pir"($P102)
    set $P103, $P5021
.annotate 'line', 223
    $P5022 = $P101."evalpmc"($P103)
    set $P104, $P5022
    elements $I5001, $P104
    box $P5023, $I5001
    set $P105, $P5023
    box $P5024, 0
    set $P106, $P5024
  while25_test95:
    set $N5001, $P106
    set $N5002, $P105
    islt $I5002, $N5001, $N5002
    box $P5028, $I5002
    set $P5027, $P5028
    unless $I5002 goto while25_done99 
  while25_redo97:
    .const 'Sub' $P5025 = 'cuid_375_1346968539.359' 
    capture_lex $P5025
    $P5026 = $P5025()
    set $P5027, $P5026
    goto while25_test95 
  while25_done99:
.annotate 'line', 249
    $P5029 = $P104(_lex_param_0 :flat, _lex_param_1 :flat :named)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_375_1346968539.359") :anon :lex :outer("cuid_12_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 228
    .const 'Sub' $P5017 = 'cuid_374_1346968539.359' 
    capture_lex $P5017 
    .lex "$subid", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
.annotate 'line', 229
    find_lex $P5003, "$compiled"
    find_lex $P5004, "$i"
    set $I5001, $P5004
    set $P5002, $P5003[$I5001]
    unless_null $P5002, fallback100
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5002, $P5005
  fallback100:
    $P5006 = $P5002."get_subid"()
    set $P101, $P5006
    find_lex $P5008, "self"
    nqp_decontainerize $P5007, $P5008
    nqp_get_sc_object $P5009, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 1
    repr_get_attr_obj $P5010, $P5007, $P5009, "%!code_objects_to_fix_up"
    set $S5001, $P101
    exists $I5002, $P5010[$S5001]
    box $P5014, $I5002
    set $P5013, $P5014
    unless $I5002 goto if26_end102 
    .const 'Sub' $P5011 = 'cuid_374_1346968539.359' 
    capture_lex $P5011
    $P5012 = $P5011()
    set $P5013, $P5012
  if26_end102:
    find_lex $P5015, "$i"
    set $N5002, $P5015
    set $N5003, 1
    add $N5001, $N5002, $N5003
    box $P5016, $N5001
    store_lex "$i", $P5016
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_374_1346968539.359") :anon :lex :outer("cuid_375_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 230
    .const 'Sub' $P5062 = 'cuid_373_1346968539.359' 
    capture_lex $P5062 
    .lex "$static", $P101 
    .lex "$fixup_stmts", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
.annotate 'line', 234
    find_lex $P5005, "self"
    nqp_decontainerize $P5004, $P5005
    nqp_get_sc_object $P5006, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 1
    repr_get_attr_obj $P5007, $P5004, $P5006, "%!code_objects_to_fix_up"
    find_lex $P5008, "$subid"
    set $S5001, $P5008
    set $P5003, $P5007[$S5001]
    unless_null $P5003, fallback103
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5003, $P5009
  fallback103:
    $P5010 = $P5003."shift"()
    set $P101, $P5010
    find_lex $P5011, "$code_type"
    find_lex $P5013, "$compiled"
    find_lex $P5014, "$i"
    set $I5001, $P5014
    set $P5012, $P5013[$I5001]
    unless_null $P5012, fallback104
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5012, $P5015
  fallback104:
    setattribute $P101, $P5011, "$!do", $P5012
    find_lex $P5021, "self"
    nqp_decontainerize $P5020, $P5021
    nqp_get_sc_object $P5022, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 1
    repr_get_attr_obj $P5023, $P5020, $P5022, "%!code_objects_to_fix_up"
    find_lex $P5024, "$subid"
    set $S5002, $P5024
    set $P5019, $P5023[$S5002]
    unless_null $P5019, fallback105
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5019, $P5025
  fallback105:
    set $P5016, $P5019
    iter $P5018, $P5019
  for_next107:
    unless $P5018, for_done109
    shift $P5027, $P5018
  for_redo108:
    .const 'Sub' $P5026 = 'cuid_373_1346968539.359' 
    capture_lex $P5026
    $P5016 = $P5026($P5027)
    goto for_next107
  for_done109:
    find_lex $P5029, "$compiled"
    find_lex $P5030, "$i"
    set $I5002, $P5030
    set $P5028, $P5029[$I5002]
    unless_null $P5028, fallback110
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5028, $P5031
  fallback110:
    find_lex $P5033, "$compiled"
    find_lex $P5034, "$i"
    set $I5003, $P5034
    set $P5032, $P5033[$I5003]
    unless_null $P5032, fallback111
    nqp_get_sc_object $P5035, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5032, $P5035
  fallback111:
    setprop $P5028, "STATIC_CODE_REF", $P5032
.annotate 'line', 240
    find_lex $P5037, "self"
    nqp_decontainerize $P5036, $P5037
    find_lex $P5040, "self"
    nqp_decontainerize $P5039, $P5040
    nqp_get_sc_object $P5041, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 1
    repr_get_attr_obj $P5042, $P5039, $P5041, "%!code_stub_sc_idx"
    find_lex $P5043, "$subid"
    set $S5003, $P5043
    set $P5038, $P5042[$S5003]
    unless_null $P5038, fallback112
    nqp_get_sc_object $P5044, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5038, $P5044
  fallback112:
    find_lex $P5046, "$compiled"
    find_lex $P5047, "$i"
    set $I5004, $P5047
    set $P5045, $P5046[$I5004]
    unless_null $P5045, fallback113
    nqp_get_sc_object $P5048, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5045, $P5048
  fallback113:
    $P5049 = $P5036."update_root_code_ref"($P5038, $P5045)
    find_lex $P5052, "self"
    nqp_decontainerize $P5051, $P5052
    nqp_get_sc_object $P5053, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 1
    repr_get_attr_obj $P5054, $P5051, $P5053, "%!code_object_fixup_list"
    find_lex $P5055, "$subid"
    set $S5004, $P5055
    set $P5050, $P5054[$S5004]
    unless_null $P5050, fallback114
    nqp_get_sc_object $P5056, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5050, $P5056
  fallback114:
    set $P102, $P5050
    new $P5060, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5060, while27_handlers118
    push_eh $P5060
  while27_test115:
    $P5057 = $P102."list"()
    set $N5001, $P5057
    box $P5061, $N5001
    set $P5059, $P5061
    unless $N5001 goto while27_done119 
  while27_redo117:
.annotate 'line', 244
    $P5058 = $P102."shift"()
    set $P5059, $P5058
    goto while27_test115 
  while27_handlers118:
    .get_results ($P5060)
    pop_upto_eh $P5060
    getattribute $P5060, $P5060, 'type'
    eq $P5060, .CONTROL_LOOP_NEXT, while27_test115
    eq $P5060, .CONTROL_LOOP_REDO, while27_redo117
  while27_done119:
    pop_eh 
    .return ($P5059) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_373_1346968539.359") :anon :lex :outer("cuid_374_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 236
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$code_type"
    find_lex $P5004, "$compiled"
    find_lex $P5005, "$i"
    set $I5001, $P5005
    set $P5003, $P5004[$I5001]
    unless_null $P5003, fallback106
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5003, $P5006
  fallback106:
    clone $P5002, $P5003
    setattribute _lex_param_0, $P5001, "$!do", $P5002
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_13_1346968539.359") :anon :lex :outer("cuid_15_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 279
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$orig", _lex_param_0 
    .lex "$clone", _lex_param_1 
    .lex "$code_obj", _lex_param_2 
.annotate 'line', 280
    find_lex $P5003, "self"
    nqp_decontainerize $P5002, $P5003
    nqp_get_sc_object $P5004, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 1
    repr_get_attr_obj $P5005, $P5002, $P5004, "%!code_objects_to_fix_up"
    find_lex $P5006, "$past"
    $P5007 = $P5006."cuid"()
    set $S5001, $P5007
    set $P5001, $P5005[$S5001]
    unless_null $P5001, fallback129
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5008
  fallback129:
    $P5009 = $P5001."push"(_lex_param_2)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_14_1346968539.359") :anon :lex :outer("cuid_15_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 284
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$orig", _lex_param_0 
    .lex "$clone", _lex_param_1 
    .lex "$code_obj", _lex_param_2 
.annotate 'line', 286
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    $P5003 = $P5001."add_object"(_lex_param_2)
.annotate 'line', 287
    find_lex $P5004, "$fixups"
    get_hll_global $P5008, "GLOBAL"
    nqp_get_package_through_who $P5007, $P5008, "QAST"
    get_who $P5006, $P5007
    set $P5005, $P5006["Op"]
    unless_null $P5005, fallback130
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5005, $P5009
  fallback130:
.annotate 'line', 289
    get_hll_global $P5013, "GLOBAL"
    nqp_get_package_through_who $P5012, $P5013, "QAST"
    get_who $P5011, $P5012
    set $P5010, $P5011["WVal"]
    unless_null $P5010, fallback131
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5010, $P5014
  fallback131:
    $P5015 = $P5010."new"(_lex_param_2 :named("value"))
.annotate 'line', 290
    get_hll_global $P5019, "GLOBAL"
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["WVal"]
    unless_null $P5016, fallback132
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5016, $P5020
  fallback132:
    find_lex $P5021, "$code_type"
    $P5022 = $P5016."new"($P5021 :named("value"))
.annotate 'line', 291
    get_hll_global $P5026, "GLOBAL"
    nqp_get_package_through_who $P5025, $P5026, "QAST"
    get_who $P5024, $P5025
    set $P5023, $P5024["SVal"]
    unless_null $P5023, fallback133
    nqp_get_sc_object $P5027, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5023, $P5027
  fallback133:
    $P5028 = $P5023."new"("$!do" :named("value"))
.annotate 'line', 292
    get_hll_global $P5032, "GLOBAL"
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["VM"]
    unless_null $P5029, fallback134
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5029, $P5033
  fallback134:
.annotate 'line', 294
    get_hll_global $P5037, "GLOBAL"
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set $P5034, $P5035["Op"]
    unless_null $P5034, fallback135
    nqp_get_sc_object $P5038, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5034, $P5038
  fallback135:
    get_hll_global $P5042, "GLOBAL"
    nqp_get_package_through_who $P5041, $P5042, "QAST"
    get_who $P5040, $P5041
    set $P5039, $P5040["BVal"]
    unless_null $P5039, fallback136
    nqp_get_sc_object $P5043, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5039, $P5043
  fallback136:
    find_lex $P5044, "$past"
    $P5045 = $P5039."new"($P5044 :named("value"))
    $P5046 = $P5034."new"($P5045, "clone" :named("op"))
.annotate 'line', 295
    get_hll_global $P5050, "GLOBAL"
    nqp_get_package_through_who $P5049, $P5050, "QAST"
    get_who $P5048, $P5049
    set $P5047, $P5048["WVal"]
    unless_null $P5047, fallback137
    nqp_get_sc_object $P5051, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5047, $P5051
  fallback137:
    $P5052 = $P5047."new"(_lex_param_2 :named("value"))
    $P5053 = $P5029."new"($P5046, $P5052, "set_sub_code_object 0PP" :named("pirop"))
    $P5054 = $P5005."new"($P5015, $P5022, $P5028, $P5053, "bindattr" :named("op"))
    $P5055 = $P5004."push"($P5054)
.annotate 'line', 300
    find_lex $P5058, "self"
    nqp_decontainerize $P5057, $P5058
    nqp_get_sc_object $P5059, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 1
    repr_get_attr_obj $P5060, $P5057, $P5059, "%!code_objects_to_fix_up"
    find_lex $P5061, "$past"
    $P5062 = $P5061."cuid"()
    set $S5001, $P5062
    set $P5056, $P5060[$S5001]
    unless_null $P5056, fallback138
    nqp_get_sc_object $P5063, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5056, $P5063
  fallback138:
    $P5064 = $P5056."push"(_lex_param_2)
    .return ($P5064) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_376_1346968539.359") :anon :lex :outer("cuid_15_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 311
    .lex "$code_obj", $P101 
    .lex "$slot", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
    find_lex $P5004, "$code_type"
    repr_instance_of $P5003, $P5004
    set $P101, $P5003
    find_lex $P5005, "$code_type"
    find_lex $P5006, "$dummy"
    setattribute $P101, $P5005, "$!do", $P5006
    find_lex $P5007, "$is_dispatcher"
    set $P5010, $P5007
    unless $P5007 goto if32_end142 
    find_lex $P5008, "$code_type"
    new $P5009, 'ResizablePMCArray'
    setattribute $P101, $P5008, "$!dispatchees", $P5009
    set $P5010, $P5009
  if32_end142:
.annotate 'line', 317
    find_lex $P5012, "self"
    nqp_decontainerize $P5011, $P5012
    $P5013 = $P5011."add_object"($P101)
    set $P102, $P5013
.annotate 'line', 320
    find_lex $P5015, "self"
    nqp_decontainerize $P5014, $P5015
.annotate 'line', 321
    get_hll_global $P5019, "GLOBAL"
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["VM"]
    unless_null $P5016, fallback143
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5016, $P5020
  fallback143:
.annotate 'line', 323
    get_hll_global $P5024, "GLOBAL"
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["BVal"]
    unless_null $P5021, fallback144
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5021, $P5025
  fallback144:
    find_lex $P5026, "$past"
    $P5027 = $P5021."new"($P5026 :named("value"))
.annotate 'line', 324
    get_hll_global $P5031, "GLOBAL"
    nqp_get_package_through_who $P5030, $P5031, "QAST"
    get_who $P5029, $P5030
    set $P5028, $P5029["WVal"]
    unless_null $P5028, fallback145
    nqp_get_sc_object $P5032, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5028, $P5032
  fallback145:
    $P5033 = $P5028."new"($P101 :named("value"))
    $P5034 = $P5016."new"($P5027, $P5033, "set_sub_code_object vPP" :named("pirop"))
    $P5035 = $P5014."add_fixup_task"($P5034 :named("deserialize_past"))
.annotate 'line', 328
    find_lex $P5036, "$fixups"
    get_hll_global $P5040, "GLOBAL"
    nqp_get_package_through_who $P5039, $P5040, "QAST"
    get_who $P5038, $P5039
    set $P5037, $P5038["Op"]
    unless_null $P5037, fallback146
    nqp_get_sc_object $P5041, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5037, $P5041
  fallback146:
.annotate 'line', 330
    get_hll_global $P5045, "GLOBAL"
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["WVal"]
    unless_null $P5042, fallback147
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5042, $P5046
  fallback147:
    $P5047 = $P5042."new"($P101 :named("value"))
.annotate 'line', 331
    get_hll_global $P5051, "GLOBAL"
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["WVal"]
    unless_null $P5048, fallback148
    nqp_get_sc_object $P5052, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5048, $P5052
  fallback148:
    find_lex $P5053, "$code_type"
    $P5054 = $P5048."new"($P5053 :named("value"))
.annotate 'line', 332
    get_hll_global $P5058, "GLOBAL"
    nqp_get_package_through_who $P5057, $P5058, "QAST"
    get_who $P5056, $P5057
    set $P5055, $P5056["SVal"]
    unless_null $P5055, fallback149
    nqp_get_sc_object $P5059, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5055, $P5059
  fallback149:
    $P5060 = $P5055."new"("$!do" :named("value"))
.annotate 'line', 333
    get_hll_global $P5064, "GLOBAL"
    nqp_get_package_through_who $P5063, $P5064, "QAST"
    get_who $P5062, $P5063
    set $P5061, $P5062["BVal"]
    unless_null $P5061, fallback150
    nqp_get_sc_object $P5065, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5061, $P5065
  fallback150:
    find_lex $P5066, "$past"
    $P5067 = $P5061."new"($P5066 :named("value"))
    $P5068 = $P5037."new"($P5047, $P5054, $P5060, $P5067, "bindattr" :named("op"))
    $P5069 = $P5036."push"($P5068)
.annotate 'line', 335
    find_lex $P5070, "$fixups"
    get_hll_global $P5074, "GLOBAL"
    nqp_get_package_through_who $P5073, $P5074, "QAST"
    get_who $P5072, $P5073
    set $P5071, $P5072["VM"]
    unless_null $P5071, fallback151
    nqp_get_sc_object $P5075, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5071, $P5075
  fallback151:
.annotate 'line', 337
    get_hll_global $P5079, "GLOBAL"
    nqp_get_package_through_who $P5078, $P5079, "QAST"
    get_who $P5077, $P5078
    set $P5076, $P5077["BVal"]
    unless_null $P5076, fallback152
    nqp_get_sc_object $P5080, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5076, $P5080
  fallback152:
    find_lex $P5081, "$past"
    $P5082 = $P5076."new"($P5081 :named("value"))
.annotate 'line', 338
    get_hll_global $P5086, "GLOBAL"
    nqp_get_package_through_who $P5085, $P5086, "QAST"
    get_who $P5084, $P5085
    set $P5083, $P5084["WVal"]
    unless_null $P5083, fallback153
    nqp_get_sc_object $P5087, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5083, $P5087
  fallback153:
    $P5088 = $P5083."new"($P101 :named("value"))
    $P5089 = $P5071."new"($P5082, $P5088, "set_sub_code_object vPP" :named("pirop"))
    $P5090 = $P5070."push"($P5089)
    find_lex $P5092, "self"
    nqp_decontainerize $P5091, $P5092
    nqp_get_sc_object $P5093, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 1
    repr_get_attr_obj $P5094, $P5091, $P5093, "%!code_objects_to_fix_up"
.annotate 'line', 342
    find_lex $P5095, "$past"
    $P5096 = $P5095."cuid"()
    set $S5001, $P5096
    new $P5097, 'ResizablePMCArray'
    push $P5097, $P101
    set $P5094[$S5001], $P5097
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_create_mo" :subid("cuid_16_1346968539.359") :anon :lex :outer("cuid_32_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 364
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :named("name") :optional 
    .param int haz_param_1 :opt_flag 
    .param pmc _lex_param_3 :named("repr") :optional 
    .param int haz_param_2 :opt_flag 
    if haz_param_1, default165
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_2, $P5012
  default165:
    if haz_param_2, default166
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_3, $P5013
  default166:
    .lex "%args", $P101 
    .lex "$mo", $P102 
    .lex "self", _lex_param_0 
    .lex "$how", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$repr", _lex_param_3 
    new $P5001, 'Hash'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
    root_new $P103, ['parrot';'Continuation']
    set_label $P103, lexotic_159
    .lex "RETURN", $P103
    defined $I5001, _lex_param_2
    box $P5004, $I5001
    set $P5003, $P5004
    unless $I5001 goto if33_end162 
.annotate 'line', 367
    set $P101["name"], _lex_param_2
    set $P5003, _lex_param_2
  if33_end162:
    defined $I5002, _lex_param_3
    box $P5006, $I5002
    set $P5005, $P5006
    unless $I5002 goto if34_end164 
.annotate 'line', 368
    set $P101["repr"], _lex_param_3
    set $P5005, _lex_param_3
  if34_end164:
.annotate 'line', 369
    $P5007 = _lex_param_1."new_type"($P101 :flat :named)
    set $P102, $P5007
.annotate 'line', 370
    nqp_decontainerize $P5008, _lex_param_0
    $P5009 = $P5008."add_object"($P102)
    find_lex $P5010, "RETURN"
    $P5011 = $P5010($P102)
    goto lexotic_160
  lexotic_159:
    .get_results ($P5011)
  lexotic_160:
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_attribute" :subid("cuid_17_1346968539.359") :anon :lex :outer("cuid_32_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 381
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 
    .lex "$attr", $P101 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$meta_attr", _lex_param_2 
    .lex "%lit_args", _lex_param_3 
    .lex "%obj_args", _lex_param_4 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
.annotate 'line', 382
    $P5002 = _lex_param_2."new"(_lex_param_3 :flat :named, _lex_param_4 :flat :named)
    set $P101, $P5002
.annotate 'line', 383
    get_how $P5003, _lex_param_1
    $P5004 = $P5003."add_attribute"(_lex_param_1, $P101)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_method" :subid("cuid_18_1346968539.359") :anon :lex :outer("cuid_32_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 387
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$meta_method_name", _lex_param_2 
    .lex "$name", _lex_param_3 
    .lex "$code", _lex_param_4 
.annotate 'line', 388
    get_how $P5001, _lex_param_1
    set $S5001, _lex_param_2
    $P5002 = $P5001.$S5001(_lex_param_1, _lex_param_3, _lex_param_4)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "set_routine_signature" :subid("cuid_19_1346968539.359") :anon :lex :outer("cuid_32_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 392
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "$sig_type", $P101 
    .lex "$code_type", $P102 
    .lex "$sig_obj", $P103 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$types", _lex_param_2 
    .lex "$definednesses", _lex_param_3 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P103, $P5003
.annotate 'line', 393
    nqp_decontainerize $P5004, _lex_param_0
    new $P5005, 'ResizablePMCArray'
    box $P5006, "NQPSignature"
    push $P5005, $P5006
    $P5007 = $P5004."find_sym"($P5005)
    set $P101, $P5007
.annotate 'line', 394
    nqp_decontainerize $P5008, _lex_param_0
    new $P5009, 'ResizablePMCArray'
    box $P5010, "NQPRoutine"
    push $P5009, $P5010
    $P5011 = $P5008."find_sym"($P5009)
    set $P102, $P5011
    repr_instance_of $P5012, $P101
    set $P103, $P5012
    setattribute $P103, $P101, "$!types", _lex_param_2
    setattribute $P103, $P101, "$!definednesses", _lex_param_3
    setattribute _lex_param_1, $P102, "$!signature", $P103
    .return ($P103) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_set_body_block" :subid("cuid_20_1346968539.359") :anon :lex :outer("cuid_32_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 402
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$body_code_obj", $P101 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$body_past", _lex_param_2 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
.annotate 'line', 404
    nqp_decontainerize $P5002, _lex_param_0
    $P5003 = _lex_param_2."name"()
    $P5004 = $P5002."create_code"(_lex_param_2, $P5003, 0)
    set $P101, $P5004
.annotate 'line', 407
    get_how $P5005, _lex_param_1
    $P5006 = $P5005."set_body_block"(_lex_param_1, $P101)
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_parent_or_role" :subid("cuid_21_1346968539.359") :anon :lex :outer("cuid_32_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 411
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$meta_method_name", _lex_param_2 
    .lex "$to_add", _lex_param_3 
.annotate 'line', 412
    get_how $P5001, _lex_param_1
    set $S5001, _lex_param_2
    $P5002 = $P5001.$S5001(_lex_param_1, _lex_param_3)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_parrot_vtable_handler_mapping" :subid("cuid_22_1346968539.359") :anon :lex :outer("cuid_32_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 415
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$att_name", _lex_param_3 
.annotate 'line', 416
    get_how $P5001, _lex_param_1
    $P5002 = $P5001."add_parrot_vtable_handler_mapping"(_lex_param_1, _lex_param_2, _lex_param_3)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_compose" :subid("cuid_23_1346968539.359") :anon :lex :outer("cuid_32_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 420
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
.annotate 'line', 421
    get_how $P5001, _lex_param_1
    $P5002 = $P5001."compose"(_lex_param_1)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "run_begin_block" :subid("cuid_24_1346968539.359") :anon :lex :outer("cuid_32_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 425
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5042 = 'cuid_378_1346968539.359' 
    capture_lex $P5042 
    .lex "$wrapper", $P101 
    .lex "%seen", $P102 
    .lex "$i", $P103 
    .lex "$code", $P104 
    .lex "$old_global", $P105 
    .lex "self", _lex_param_0 
    .lex "$past", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P104, $P5004
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P105, $P5005
    root_new $P106, ['parrot';'Continuation']
    set_label $P106, lexotic_167
    .lex "RETURN", $P106
.annotate 'line', 427
    get_hll_global $P5009, "GLOBAL"
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Block"]
    unless_null $P5006, fallback169
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5006, $P5010
  fallback169:
.annotate 'line', 428
    get_hll_global $P5014, "GLOBAL"
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Stmts"]
    unless_null $P5011, fallback170
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5011, $P5015
  fallback170:
    $P5016 = $P5011."new"()
    $P5017 = $P5006."new"($P5016, _lex_param_1)
    set $P101, $P5017
    nqp_decontainerize $P5018, _lex_param_0
    nqp_get_sc_object $P5019, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 1
    repr_get_attr_obj $P5020, $P5018, $P5019, "@!BLOCKS"
    set $N5001, $P5020
    box $P5021, $N5001
    set $P103, $P5021
  while35_test171:
    set $N5002, $P103
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5025, $I5001
    set $P5024, $P5025
    unless $I5001 goto while35_done175 
  while35_redo173:
    .const 'Sub' $P5022 = 'cuid_378_1346968539.359' 
    capture_lex $P5022
    $P5023 = $P5022()
    set $P5024, $P5023
    goto while35_test171 
  while35_done175:
.annotate 'line', 451
    nqp_decontainerize $P5026, _lex_param_0
    $P5027 = $P5026."create_code"($P101, "BEGIN block", 0)
    set $P104, $P5027
    new $P5029, 'ResizablePMCArray'
    get_hll_global $P5028, $P5029, "GLOBAL"
    set $P105, $P5028
    new $P5030, 'ResizablePMCArray'
    find_dynamic_lex $P5031, "$*GLOBALish"
    unless_null $P5031, fallback192
    get_hll_global $P5034, "GLOBAL"
    get_who $P5033, $P5034
    set $P5032, $P5033["$GLOBALish"]
    unless_null $P5032, fallback193
    nqp_get_sc_object $P5035, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5032, $P5035
  fallback193:
    unless_null $P5032, vivi_40194
    die "Contextual $*GLOBALish not found"
    box $P5036, "Contextual $*GLOBALish not found"
    set $P5032, $P5036
  vivi_40194:
    set $P5031, $P5032
  fallback192:
    set_hll_global $P5030, "GLOBAL", $P5031
.annotate 'line', 454
    $P5037 = $P104()
    new $P5038, 'ResizablePMCArray'
    set_hll_global $P5038, "GLOBAL", $P105
.annotate 'line', 459
    $P5039 = $P101."shift"()
    find_lex $P5040, "RETURN"
    $P5041 = $P5040($P101)
    goto lexotic_168
  lexotic_167:
    .get_results ($P5041)
  lexotic_168:
    .return ($P5041) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_378_1346968539.359") :anon :lex :outer("cuid_24_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 433
    .const 'Sub' $P5017 = 'cuid_377_1346968539.359' 
    capture_lex $P5017 
    .lex "%symbols", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 435
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 1
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback176
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5004, $P5010
  fallback176:
    $P5011 = $P5004."symtable"()
    set $P101, $P5011
    set $P5012, $P101
    iter $P5014, $P101
  for_next189:
    unless $P5014, for_done191
    shift $P5016, $P5014
  for_redo190:
    .const 'Sub' $P5015 = 'cuid_377_1346968539.359' 
    capture_lex $P5015
    $P5012 = $P5015($P5016)
    goto for_next189
  for_done191:
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_377_1346968539.359") :anon :lex :outer("cuid_378_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 436
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "%seen"
.annotate 'line', 437
    $P5003 = _lex_param_0."key"()
    set $S5001, $P5003
    set $P5001, $P5002[$S5001]
    unless_null $P5001, fallback181
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5004
  fallback181:
    isfalse $I5001, $P5001
    set $I5003, $I5001
    unless $I5001 goto if37_end180 
    $P5005 = _lex_param_0."value"()
    exists $I5002, $P5005["value"]
    set $I5003, $I5002
  if37_end180:
    box $P5038, $I5003
    set $P5037, $P5038
    unless $I5003 goto if36_end178 
    new $P5032, 'ExceptionHandler'
    set_label $P5032, catch_handler_39188
    $P5032.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5032
.annotate 'line', 438
.annotate 'line', 439
    find_lex $P5007, "$wrapper"
    set $P5006, $P5007[0]
    unless_null $P5006, fallback182
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5006, $P5008
  fallback182:
    get_hll_global $P5012, "GLOBAL"
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["Op"]
    unless_null $P5009, fallback183
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5009, $P5013
  fallback183:
.annotate 'line', 441
    get_hll_global $P5017, "GLOBAL"
    nqp_get_package_through_who $P5016, $P5017, "QAST"
    get_who $P5015, $P5016
    set $P5014, $P5015["Var"]
    unless_null $P5014, fallback184
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5014, $P5018
  fallback184:
    $P5019 = _lex_param_0."key"()
    $P5020 = $P5014."new"($P5019 :named("name"), "lexical" :named("scope"), "var" :named("isdecl"))
.annotate 'line', 442
    get_hll_global $P5024, "GLOBAL"
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["WVal"]
    unless_null $P5021, fallback185
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5021, $P5025
  fallback185:
    $P5027 = _lex_param_0."value"()
    set $P5026, $P5027["value"]
    unless_null $P5026, fallback186
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5026, $P5028
  fallback186:
    $P5029 = $P5021."new"($P5026 :named("value"))
    $P5030 = $P5009."new"($P5020, $P5029, "bind" :named("op"))
    $P5031 = $P5006."push"($P5030)
    set $P5033, $P5031
    pop_eh 
    goto skip_handler_38187
  catch_handler_39188:
    .get_results ($P5032) 
    set $I10001, 1
    set $P5032["handled"], $I10001
    nqp_get_sc_object $P10001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    finalize $P5032
    pop_upto_eh $P5032
    pop_eh 
    set $P5033, $P10001
    goto skip_handler_38187
  skip_handler_38187:
    find_lex $P5034, "%seen"
.annotate 'line', 445
    $P5035 = _lex_param_0."key"()
    set $S5002, $P5035
    box $P5036, 1
    set $P5034[$S5002], $P5036
    set $P5037, $P5036
  if36_end178:
    .return ($P5037) 
.end
.HLL "nqp"
.namespace []
.sub "libs" :subid("cuid_25_1346968539.359") :anon :lex :outer("cuid_32_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 464
    .param pmc _lex_param_0 
    .const 'Sub' $P5045 = 'cuid_379_1346968539.359' 
    capture_lex $P5045 
    .lex "@loadlibs", $P101 
    .lex "self", _lex_param_0 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    box $P5003, "nqp_group"
    push $P5002, $P5003
    box $P5004, "nqp_ops"
    push $P5002, $P5004
    box $P5005, "nqp_bigint_ops"
    push $P5002, $P5005
    box $P5006, "trans_ops"
    push $P5002, $P5006
    box $P5007, "io_ops"
    push $P5002, $P5007
    set $P101, $P5002
    find_dynamic_lex $P5010, "%*COMPILING"
    unless_null $P5010, fallback197
    get_hll_global $P5013, "GLOBAL"
    get_who $P5012, $P5013
    set $P5011, $P5012["%COMPILING"]
    unless_null $P5011, fallback198
    get_hll_global $P5015, "GLOBAL"
    get_who $P5014, $P5015
    new $P5016, 'Hash'
    set $P5014["%COMPILING"], $P5016
    set $P5011, $P5016
  fallback198:
    unless_null $P5011, vivi_42199
    die "Contextual %*COMPILING not found"
    box $P5017, "Contextual %*COMPILING not found"
    set $P5011, $P5017
  vivi_42199:
    set $P5010, $P5011
  fallback197:
    set $P5009, $P5010["%?OPTIONS"]
    unless_null $P5009, fallback200
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5009, $P5018
  fallback200:
    set $P5008, $P5009["vmlibs"]
    unless_null $P5008, fallback201
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5008, $P5019
  fallback201:
    set $P5038, $P5008
    unless $P5008 goto if41_end196 
.annotate 'line', 467
    find_dynamic_lex $P5026, "%*COMPILING"
    unless_null $P5026, fallback202
    get_hll_global $P5029, "GLOBAL"
    get_who $P5028, $P5029
    set $P5027, $P5028["%COMPILING"]
    unless_null $P5027, fallback203
    get_hll_global $P5031, "GLOBAL"
    get_who $P5030, $P5031
    new $P5032, 'Hash'
    set $P5030["%COMPILING"], $P5032
    set $P5027, $P5032
  fallback203:
    unless_null $P5027, vivi_43204
    die "Contextual %*COMPILING not found"
    box $P5033, "Contextual %*COMPILING not found"
    set $P5027, $P5033
  vivi_43204:
    set $P5026, $P5027
  fallback202:
    set $P5025, $P5026["%?OPTIONS"]
    unless_null $P5025, fallback205
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5025, $P5034
  fallback205:
    set $P5024, $P5025["vmlibs"]
    unless_null $P5024, fallback206
    nqp_get_sc_object $P5035, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5024, $P5035
  fallback206:
    set $S5001, $P5024
    split $P5023, ",", $S5001
    set $P5020, $P5023
    iter $P5022, $P5023
  for_next207:
    unless $P5022, for_done209
    shift $P5037, $P5022
  for_redo208:
    .const 'Sub' $P5036 = 'cuid_379_1346968539.359' 
    capture_lex $P5036
    $P5020 = $P5036($P5037)
    goto for_next207
  for_done209:
    set $P5038, $P5020
  if41_end196:
.annotate 'line', 472
    get_hll_global $P5042, "GLOBAL"
    nqp_get_package_through_who $P5041, $P5042, "QAST"
    get_who $P5040, $P5041
    set $P5039, $P5040["VM"]
    unless_null $P5039, fallback210
    nqp_get_sc_object $P5043, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5039, $P5043
  fallback210:
    $P5044 = $P5039."new"($P101 :named("loadlibs"))
    .return ($P5044) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_379_1346968539.359") :anon :lex :outer("cuid_25_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 468
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 469
    find_lex $P5001, "@loadlibs"
    $P5002 = $P5001."push"(_lex_param_0)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "add_initializations" :subid("cuid_26_1346968539.359") :anon :lex :outer("cuid_32_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 476
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
.annotate 'line', 477
    nqp_decontainerize $P5001, _lex_param_0
    get_hll_global $P5005, "GLOBAL"
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Stmts"]
    unless_null $P5002, fallback211
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5002, $P5006
  fallback211:
.annotate 'line', 478
    get_hll_global $P5010, "GLOBAL"
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["VM"]
    unless_null $P5007, fallback212
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5007, $P5011
  fallback212:
    $P5012 = $P5007."new"("nqp_dynop_setup v" :named("pirop"))
.annotate 'line', 479
    get_hll_global $P5016, "GLOBAL"
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["VM"]
    unless_null $P5013, fallback213
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5013, $P5017
  fallback213:
    $P5018 = $P5013."new"("nqp_bigint_setup v" :named("pirop"))
.annotate 'line', 480
    get_hll_global $P5022, "GLOBAL"
    nqp_get_package_through_who $P5021, $P5022, "QAST"
    get_who $P5020, $P5021
    set $P5019, $P5020["Op"]
    unless_null $P5019, fallback214
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5019, $P5023
  fallback214:
.annotate 'line', 482
    get_hll_global $P5027, "GLOBAL"
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["VM"]
    unless_null $P5024, fallback215
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5024, $P5028
  fallback215:
    $P5029 = $P5024."new"("getinterp P" :named("pirop"))
.annotate 'line', 483
    get_hll_global $P5033, "GLOBAL"
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["VM"]
    unless_null $P5030, fallback216
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5030, $P5034
  fallback216:
    get_hll_global $P5038, "GLOBAL"
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["SVal"]
    unless_null $P5035, fallback217
    nqp_get_sc_object $P5039, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5035, $P5039
  fallback217:
    $P5040 = $P5035."new"("LexPad" :named("value"))
    $P5041 = $P5030."new"($P5040, "get_class Ps" :named("pirop"))
.annotate 'line', 484
    get_hll_global $P5045, "GLOBAL"
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["VM"]
    unless_null $P5042, fallback218
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5042, $P5046
  fallback218:
    get_hll_global $P5050, "GLOBAL"
    nqp_get_package_through_who $P5049, $P5050, "QAST"
    get_who $P5048, $P5049
    set $P5047, $P5048["SVal"]
    unless_null $P5047, fallback219
    nqp_get_sc_object $P5051, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5047, $P5051
  fallback219:
    $P5052 = $P5047."new"("NQPLexPad" :named("value"))
    $P5053 = $P5042."new"($P5052, "get_class Ps" :named("pirop"))
    $P5054 = $P5019."new"($P5029, $P5041, $P5053, "callmethod" :named("op"), "hll_map" :named("name"))
    $P5055 = $P5002."new"($P5012, $P5018, $P5054)
    $P5056 = $P5001."add_load_dependency_task"($P5055 :named("deserialize_past"))
    .return ($P5056) 
.end
.HLL "nqp"
.namespace []
.sub "is_lexical" :subid("cuid_27_1346968539.359") :anon :lex :outer("cuid_32_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 490
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$name", _lex_param_1 
.annotate 'line', 491
    nqp_decontainerize $P5001, _lex_param_0
    $P5002 = $P5001."is_scope"(_lex_param_1, "lexical")
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "is_package" :subid("cuid_28_1346968539.359") :anon :lex :outer("cuid_32_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 496
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$name", _lex_param_1 
.annotate 'line', 497
    nqp_decontainerize $P5001, _lex_param_0
    $P5002 = $P5001."is_scope"(_lex_param_1, "package")
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "is_scope" :subid("cuid_29_1346968539.359") :anon :lex :outer("cuid_32_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 502
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .const 'Sub' $P5011 = 'cuid_380_1346968539.359' 
    capture_lex $P5011 
    .lex "$i", $P101 
    .lex "self", _lex_param_0 
    .lex "$name", _lex_param_1 
    .lex "$wanted_scope", _lex_param_2 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_220
    .lex "RETURN", $P102
    nqp_decontainerize $P5002, _lex_param_0
    nqp_get_sc_object $P5003, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 1
    repr_get_attr_obj $P5004, $P5002, $P5003, "@!BLOCKS"
    set $N5001, $P5004
    box $P5005, $N5001
    set $P101, $P5005
  while44_test222:
    set $N5002, $P101
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5009, $I5001
    set $P5008, $P5009
    unless $I5001 goto while44_done226 
  while44_redo224:
    .const 'Sub' $P5006 = 'cuid_380_1346968539.359' 
    capture_lex $P5006
    $P5007 = $P5006()
    set $P5008, $P5007
    goto while44_test222 
  while44_done226:
    box $P5010, 0
    goto lexotic_221
  lexotic_220:
    .get_results ($P5010)
  lexotic_221:
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_380_1346968539.359") :anon :lex :outer("cuid_29_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 504
    .lex "%sym", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 506
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 1
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback227
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5004, $P5010
  fallback227:
    find_lex $P5011, "$name"
    $P5012 = $P5004."symbol"($P5011)
    set $P101, $P5012
    set $N5004, $P101
    box $P5019, $N5004
    set $P5018, $P5019
    unless $N5004 goto if45_end229 
.annotate 'line', 507
    set $P5014, $P101["scope"]
    unless_null $P5014, fallback230
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5014, $P5015
  fallback230:
    set $S5001, $P5014
    find_lex $P5016, "$wanted_scope"
    set $S5002, $P5016
    iseq $I5002, $S5001, $S5002
    find_lex $P5013, "RETURN"
    $P5017 = $P5013($I5002)
    set $P5018, $P5017
  if45_end229:
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "known_sym" :subid("cuid_30_1346968539.359") :anon :lex :outer("cuid_32_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 515
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$known", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .lex "@name", _lex_param_2 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    box $P5002, 0
    set $P101, $P5002
    new $P5006, 'ExceptionHandler'
    set_label $P5006, catch_handler_47232
    $P5006.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5006
.annotate 'line', 517
.annotate 'line', 518
    nqp_decontainerize $P5003, _lex_param_0
    $P5004 = $P5003."find_sym"(_lex_param_2)
    box $P5005, 1
    set $P101, $P5005
    set $P5007, $P101
    pop_eh 
    goto skip_handler_46231
  catch_handler_47232:
    .get_results ($P5006) 
    set $I10001, 1
    set $P5006["handled"], $I10001
    nqp_get_sc_object $P10001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    finalize $P5006
    pop_upto_eh $P5006
    pop_eh 
    set $P5007, $P10001
    goto skip_handler_46231
  skip_handler_46231:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "find_sym" :subid("cuid_31_1346968539.359") :anon :lex :outer("cuid_32_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 527
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5024 = 'cuid_382_1346968539.359' 
    capture_lex $P5024 
    .const 'Sub' $P5024 = 'cuid_384_1346968539.359' 
    capture_lex $P5024 
    .const 'Sub' $P5024 = 'cuid_385_1346968539.359' 
    capture_lex $P5024 
    .lex "$result", $P101 
    .lex "self", _lex_param_0 
    .lex "@name", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_233
    .lex "RETURN", $P102
    set $N5001, _lex_param_1
    box $P5004, $N5001
    set $P5003, $P5004
    if $N5001 goto unless48_end236 
.annotate 'line', 529
    box $P5002, "Cannot look up empty name"
    die $P5002
    set $P5003, $P5002
  unless48_end236:
    set $N5002, _lex_param_1
    set $N5003, 1
    iseq $I5001, $N5002, $N5003
    box $P5008, $I5001
    set $P5007, $P5008
    unless $I5001 goto if49_end238 
    .const 'Sub' $P5005 = 'cuid_382_1346968539.359' 
    capture_lex $P5005
    $P5006 = $P5005()
    set $P5007, $P5006
  if49_end238:
    find_dynamic_lex $P5009, "$*GLOBALish"
    unless_null $P5009, fallback251
    get_hll_global $P5012, "GLOBAL"
    get_who $P5011, $P5012
    set $P5010, $P5011["$GLOBALish"]
    unless_null $P5010, fallback252
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5010, $P5013
  fallback252:
    unless_null $P5010, vivi_53253
    die "Contextual $*GLOBALish not found"
    box $P5014, "Contextual $*GLOBALish not found"
    set $P5010, $P5014
  vivi_53253:
    set $P5009, $P5010
  fallback251:
    set $P101, $P5009
    set $N5004, _lex_param_1
    set $N5005, 2
    isge $I5002, $N5004, $N5005
    box $P5018, $I5002
    set $P5017, $P5018
    unless $I5002 goto if54_end255 
    .const 'Sub' $P5015 = 'cuid_384_1346968539.359' 
    capture_lex $P5015
    $P5016 = $P5015()
    set $P5017, $P5016
  if54_end255:
    set $P5019, _lex_param_1
    iter $P5021, _lex_param_1
  for_next271:
    unless $P5021, for_done273
    shift $P5023, $P5021
  for_redo272:
    .const 'Sub' $P5022 = 'cuid_385_1346968539.359' 
    capture_lex $P5022
    $P5019 = $P5022($P5023)
    goto for_next271
  for_done273:
    goto lexotic_234
  lexotic_233:
    .get_results ($P101)
  lexotic_234:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_382_1346968539.359") :anon :lex :outer("cuid_31_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 533
    .const 'Sub' $P5015 = 'cuid_381_1346968539.359' 
    capture_lex $P5015 
    .lex "$final_name", $P101 
    .lex "$i", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
    find_lex $P5004, "@name"
    set $P5003, $P5004[0]
    unless_null $P5003, fallback239
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5003, $P5005
  fallback239:
    set $P101, $P5003
    find_lex $P5007, "self"
    nqp_decontainerize $P5006, $P5007
    nqp_get_sc_object $P5008, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 1
    repr_get_attr_obj $P5009, $P5006, $P5008, "@!BLOCKS"
    set $N5001, $P5009
    box $P5010, $N5001
    set $P102, $P5010
  while50_test240:
    set $N5002, $P102
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5014, $I5001
    set $P5013, $P5014
    unless $I5001 goto while50_done244 
  while50_redo242:
    .const 'Sub' $P5011 = 'cuid_381_1346968539.359' 
    capture_lex $P5011
    $P5012 = $P5011()
    set $P5013, $P5012
    goto while50_test240 
  while50_done244:
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_381_1346968539.359") :anon :lex :outer("cuid_382_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 536
    .lex "%sym", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 538
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 1
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback245
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5004, $P5010
  fallback245:
    find_lex $P5011, "$final_name"
    $P5012 = $P5004."symbol"($P5011)
    set $P101, $P5012
    set $N5004, $P101
    box $P5021, $N5004
    set $P5020, $P5021
    unless $N5004 goto if51_end247 
.annotate 'line', 539
    exists $I5002, $P101["value"]
    unless $I5002 goto if52_else248 
.annotate 'line', 540
    set $P5014, $P101["value"]
    unless_null $P5014, fallback250
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5014, $P5015
  fallback250:
    find_lex $P5013, "RETURN"
    $P5016 = $P5013($P5014)
    set $P5019, $P5016
    goto if52_end249
  if52_else248:
.annotate 'line', 543
    find_lex $P5017, "$final_name"
    set $S5002, $P5017
    concat $S5001, "No compile-time value for ", $S5002
    box $P5018, $S5001
    die $P5018
    set $P5019, $P5018
  if52_end249:
    set $P5020, $P5019
  if51_end247:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_384_1346968539.359") :anon :lex :outer("cuid_31_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 554
    .const 'Sub' $P5015 = 'cuid_383_1346968539.359' 
    capture_lex $P5015 
    .lex "$first", $P101 
    .lex "$i", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
    find_lex $P5004, "@name"
    set $P5003, $P5004[0]
    unless_null $P5003, fallback256
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5003, $P5005
  fallback256:
    set $P101, $P5003
    find_lex $P5007, "self"
    nqp_decontainerize $P5006, $P5007
    nqp_get_sc_object $P5008, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 1
    repr_get_attr_obj $P5009, $P5006, $P5008, "@!BLOCKS"
    set $N5001, $P5009
    box $P5010, $N5001
    set $P102, $P5010
  while55_test257:
    set $N5002, $P102
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5014, $I5001
    set $P5013, $P5014
    unless $I5001 goto while55_done261 
  while55_redo259:
    .const 'Sub' $P5011 = 'cuid_383_1346968539.359' 
    capture_lex $P5011
    $P5012 = $P5011()
    set $P5013, $P5012
    goto while55_test257 
  while55_done261:
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_383_1346968539.359") :anon :lex :outer("cuid_384_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 557
    .lex "%sym", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 559
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 1
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback262
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5004, $P5010
  fallback262:
    find_lex $P5011, "$first"
    $P5012 = $P5004."symbol"($P5011)
    set $P101, $P5012
    set $N5004, $P101
    box $P5022, $N5004
    set $P5021, $P5022
    unless $N5004 goto if56_end264 
.annotate 'line', 560
    exists $I5002, $P101["value"]
    unless $I5002 goto if57_else265 
.annotate 'line', 561
    set $P5013, $P101["value"]
    unless_null $P5013, fallback267
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5013, $P5014
  fallback267:
    store_lex "$result", $P5013
.annotate 'line', 563
    find_lex $P5015, "@name"
    $P5016 = $P5015."shift"()
    box $P5017, 0
    store_lex "$i", $P5017
    set $P5020, $P5017
    goto if57_end266
  if57_else265:
.annotate 'line', 566
    find_lex $P5018, "$first"
    set $S5002, $P5018
    concat $S5001, "No compile-time value for ", $S5002
    box $P5019, $S5001
    die $P5019
    set $P5020, $P5019
  if57_end266:
    set $P5021, $P5020
  if56_end264:
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_385_1346968539.359") :anon :lex :outer("cuid_31_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 574
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$result"
    get_who $P5001, $P5002
    set $S5001, _lex_param_0
    exists $I5001, $P5001[$S5001]
    unless $I5001 goto if58_else268 
.annotate 'line', 575
    find_lex $P5005, "$result"
    get_who $P5004, $P5005
    set $S5002, _lex_param_0
    set $P5003, $P5004[$S5002]
    unless_null $P5003, fallback270
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5003, $P5006
  fallback270:
    store_lex "$result", $P5003
    set $P5009, $P5003
    goto if58_end269
  if58_else268:
.annotate 'line', 578
    find_lex $P5007, "@name"
    join $S5004, "::", $P5007
    concat $S5003, "Could not locate compile-time value for symbol ", $S5004
    box $P5008, $S5003
    die $P5008
    set $P5009, $P5008
  if58_end269:
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_223_1346968539.359") :anon :lex :outer("cuid_1_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 589
    .const 'Sub' $P5274 = 'cuid_33_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_34_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_35_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_36_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_37_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_38_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_40_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_42_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_43_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_44_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_46_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_47_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_48_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_49_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_50_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_51_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_52_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_53_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_54_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_55_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_56_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_57_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_58_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_59_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_60_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_61_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_62_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_63_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_65_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_66_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_67_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_68_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_69_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_70_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_71_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_72_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_73_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_74_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_75_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_76_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_77_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_78_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_79_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_80_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_81_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_82_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_83_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_84_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_85_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_86_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_87_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_88_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_91_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_92_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_93_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_94_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_95_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_96_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_97_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_98_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_99_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_100_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_101_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_102_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_103_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_104_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_105_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_106_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_107_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_108_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_109_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_110_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_111_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_112_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_113_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_114_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_115_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_116_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_117_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_118_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_119_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_120_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_121_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_122_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_123_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_124_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_125_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_126_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_128_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_129_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_130_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_131_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_132_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_133_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_134_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_135_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_136_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_137_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_138_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_139_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_140_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_141_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_142_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_143_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_144_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_145_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_146_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_147_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_148_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_149_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_150_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_151_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_152_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_153_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_154_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_155_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_156_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_157_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_158_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_159_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_160_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_161_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_162_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_163_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_164_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_165_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_166_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_167_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_168_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_169_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_170_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_171_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_172_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_173_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_174_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_175_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_176_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_177_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_178_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_179_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_180_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_181_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_182_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_183_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_184_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_185_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_186_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_187_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_188_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_189_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_190_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_191_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_192_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_193_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_194_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_195_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_196_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_197_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_198_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_199_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_200_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_201_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_202_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_203_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_204_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_205_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_206_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_207_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_208_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_209_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_210_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_211_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_212_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_213_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_214_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_215_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_216_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_217_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_218_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_219_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_220_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_221_1346968539.359' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_222_1346968539.359' 
    capture_lex $P5274 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
.annotate 'line', 1216
.annotate 'line', 1217
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "NQP"
    get_who $P5002, $P5003
    set $P5001, $P5002["Grammar"]
    unless_null $P5001, fallback274
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5005
  fallback274:
    $P5006 = $P5001."O"(":prec<y=>, :assoc<unary>", "%methodop")
.annotate 'line', 1218
    get_hll_global $P5010, "GLOBAL"
    nqp_get_package_through_who $P5009, $P5010, "NQP"
    get_who $P5008, $P5009
    set $P5007, $P5008["Grammar"]
    unless_null $P5007, fallback275
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5007, $P5011
  fallback275:
    $P5012 = $P5007."O"(":prec<x=>, :assoc<unary>", "%autoincrement")
.annotate 'line', 1219
    get_hll_global $P5016, "GLOBAL"
    nqp_get_package_through_who $P5015, $P5016, "NQP"
    get_who $P5014, $P5015
    set $P5013, $P5014["Grammar"]
    unless_null $P5013, fallback276
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5013, $P5017
  fallback276:
    $P5018 = $P5013."O"(":prec<w=>, :assoc<left>", "%exponentiation")
.annotate 'line', 1220
    get_hll_global $P5022, "GLOBAL"
    nqp_get_package_through_who $P5021, $P5022, "NQP"
    get_who $P5020, $P5021
    set $P5019, $P5020["Grammar"]
    unless_null $P5019, fallback277
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5019, $P5023
  fallback277:
    $P5024 = $P5019."O"(":prec<v=>, :assoc<unary>", "%symbolic_unary")
.annotate 'line', 1221
    get_hll_global $P5028, "GLOBAL"
    nqp_get_package_through_who $P5027, $P5028, "NQP"
    get_who $P5026, $P5027
    set $P5025, $P5026["Grammar"]
    unless_null $P5025, fallback278
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5025, $P5029
  fallback278:
    $P5030 = $P5025."O"(":prec<u=>, :assoc<left>", "%multiplicative")
.annotate 'line', 1222
    get_hll_global $P5034, "GLOBAL"
    nqp_get_package_through_who $P5033, $P5034, "NQP"
    get_who $P5032, $P5033
    set $P5031, $P5032["Grammar"]
    unless_null $P5031, fallback279
    nqp_get_sc_object $P5035, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5031, $P5035
  fallback279:
    $P5036 = $P5031."O"(":prec<t=>, :assoc<left>", "%additive")
.annotate 'line', 1223
    get_hll_global $P5040, "GLOBAL"
    nqp_get_package_through_who $P5039, $P5040, "NQP"
    get_who $P5038, $P5039
    set $P5037, $P5038["Grammar"]
    unless_null $P5037, fallback280
    nqp_get_sc_object $P5041, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5037, $P5041
  fallback280:
    $P5042 = $P5037."O"(":prec<r=>, :assoc<left>", "%concatenation")
.annotate 'line', 1224
    get_hll_global $P5046, "GLOBAL"
    nqp_get_package_through_who $P5045, $P5046, "NQP"
    get_who $P5044, $P5045
    set $P5043, $P5044["Grammar"]
    unless_null $P5043, fallback281
    nqp_get_sc_object $P5047, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5043, $P5047
  fallback281:
    $P5048 = $P5043."O"(":prec<m=>, :assoc<left>", "%relational")
.annotate 'line', 1225
    get_hll_global $P5052, "GLOBAL"
    nqp_get_package_through_who $P5051, $P5052, "NQP"
    get_who $P5050, $P5051
    set $P5049, $P5050["Grammar"]
    unless_null $P5049, fallback282
    nqp_get_sc_object $P5053, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5049, $P5053
  fallback282:
    $P5054 = $P5049."O"(":prec<l=>, :assoc<left>", "%tight_and")
.annotate 'line', 1226
    get_hll_global $P5058, "GLOBAL"
    nqp_get_package_through_who $P5057, $P5058, "NQP"
    get_who $P5056, $P5057
    set $P5055, $P5056["Grammar"]
    unless_null $P5055, fallback283
    nqp_get_sc_object $P5059, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5055, $P5059
  fallback283:
    $P5060 = $P5055."O"(":prec<k=>, :assoc<left>", "%tight_or")
.annotate 'line', 1227
    get_hll_global $P5064, "GLOBAL"
    nqp_get_package_through_who $P5063, $P5064, "NQP"
    get_who $P5062, $P5063
    set $P5061, $P5062["Grammar"]
    unless_null $P5061, fallback284
    nqp_get_sc_object $P5065, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5061, $P5065
  fallback284:
    $P5066 = $P5061."O"(":prec<j=>, :assoc<right>", "%conditional")
.annotate 'line', 1228
    get_hll_global $P5070, "GLOBAL"
    nqp_get_package_through_who $P5069, $P5070, "NQP"
    get_who $P5068, $P5069
    set $P5067, $P5068["Grammar"]
    unless_null $P5067, fallback285
    nqp_get_sc_object $P5071, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5067, $P5071
  fallback285:
    $P5072 = $P5067."O"(":prec<i=>, :assoc<right>", "%assignment")
.annotate 'line', 1229
    get_hll_global $P5076, "GLOBAL"
    nqp_get_package_through_who $P5075, $P5076, "NQP"
    get_who $P5074, $P5075
    set $P5073, $P5074["Grammar"]
    unless_null $P5073, fallback286
    nqp_get_sc_object $P5077, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5073, $P5077
  fallback286:
    $P5078 = $P5073."O"(":prec<g=>, :assoc<list>, :nextterm<nulltermish>", "%comma")
.annotate 'line', 1230
    get_hll_global $P5082, "GLOBAL"
    nqp_get_package_through_who $P5081, $P5082, "NQP"
    get_who $P5080, $P5081
    set $P5079, $P5080["Grammar"]
    unless_null $P5079, fallback287
    nqp_get_sc_object $P5083, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5079, $P5083
  fallback287:
    $P5084 = $P5079."O"(":prec<f=>, :assoc<list>", "%list_infix")
.annotate 'line', 1231
    get_hll_global $P5088, "GLOBAL"
    nqp_get_package_through_who $P5087, $P5088, "NQP"
    get_who $P5086, $P5087
    set $P5085, $P5086["Grammar"]
    unless_null $P5085, fallback288
    nqp_get_sc_object $P5089, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5085, $P5089
  fallback288:
    $P5090 = $P5085."O"(":prec<e=>, :assoc<unary>", "%list_prefix")
.annotate 'line', 589
    .const 'Sub' $P5091 = 'cuid_33_1346968539.359' 
    capture_lex $P5091
    .const 'Sub' $P5092 = 'cuid_34_1346968539.359' 
    capture_lex $P5092
    .const 'Sub' $P5093 = 'cuid_35_1346968539.359' 
    capture_lex $P5093
    .const 'Sub' $P5094 = 'cuid_36_1346968539.359' 
    capture_lex $P5094
    .const 'Sub' $P5095 = 'cuid_37_1346968539.359' 
    capture_lex $P5095
    .const 'Sub' $P5096 = 'cuid_38_1346968539.359' 
    capture_lex $P5096
    .const 'Sub' $P5097 = 'cuid_40_1346968539.359' 
    capture_lex $P5097
    .const 'Sub' $P5098 = 'cuid_42_1346968539.359' 
    capture_lex $P5098
    .const 'Sub' $P5099 = 'cuid_43_1346968539.359' 
    capture_lex $P5099
    .const 'Sub' $P5100 = 'cuid_44_1346968539.359' 
    capture_lex $P5100
    .const 'Sub' $P5101 = 'cuid_46_1346968539.359' 
    capture_lex $P5101
    .const 'Sub' $P5102 = 'cuid_47_1346968539.359' 
    capture_lex $P5102
    .const 'Sub' $P5103 = 'cuid_48_1346968539.359' 
    capture_lex $P5103
    .const 'Sub' $P5104 = 'cuid_49_1346968539.359' 
    capture_lex $P5104
    .const 'Sub' $P5105 = 'cuid_50_1346968539.359' 
    capture_lex $P5105
    .const 'Sub' $P5106 = 'cuid_51_1346968539.359' 
    capture_lex $P5106
    .const 'Sub' $P5107 = 'cuid_52_1346968539.359' 
    capture_lex $P5107
    .const 'Sub' $P5108 = 'cuid_53_1346968539.359' 
    capture_lex $P5108
    .const 'Sub' $P5109 = 'cuid_54_1346968539.359' 
    capture_lex $P5109
    .const 'Sub' $P5110 = 'cuid_55_1346968539.359' 
    capture_lex $P5110
    .const 'Sub' $P5111 = 'cuid_56_1346968539.359' 
    capture_lex $P5111
    .const 'Sub' $P5112 = 'cuid_57_1346968539.359' 
    capture_lex $P5112
    .const 'Sub' $P5113 = 'cuid_58_1346968539.359' 
    capture_lex $P5113
    .const 'Sub' $P5114 = 'cuid_59_1346968539.359' 
    capture_lex $P5114
    .const 'Sub' $P5115 = 'cuid_60_1346968539.359' 
    capture_lex $P5115
    .const 'Sub' $P5116 = 'cuid_61_1346968539.359' 
    capture_lex $P5116
    .const 'Sub' $P5117 = 'cuid_62_1346968539.359' 
    capture_lex $P5117
    .const 'Sub' $P5118 = 'cuid_63_1346968539.359' 
    capture_lex $P5118
    .const 'Sub' $P5119 = 'cuid_65_1346968539.359' 
    capture_lex $P5119
    .const 'Sub' $P5120 = 'cuid_66_1346968539.359' 
    capture_lex $P5120
    .const 'Sub' $P5121 = 'cuid_67_1346968539.359' 
    capture_lex $P5121
    .const 'Sub' $P5122 = 'cuid_68_1346968539.359' 
    capture_lex $P5122
    .const 'Sub' $P5123 = 'cuid_69_1346968539.359' 
    capture_lex $P5123
    .const 'Sub' $P5124 = 'cuid_70_1346968539.359' 
    capture_lex $P5124
    .const 'Sub' $P5125 = 'cuid_71_1346968539.359' 
    capture_lex $P5125
    .const 'Sub' $P5126 = 'cuid_72_1346968539.359' 
    capture_lex $P5126
    .const 'Sub' $P5127 = 'cuid_73_1346968539.359' 
    capture_lex $P5127
    .const 'Sub' $P5128 = 'cuid_74_1346968539.359' 
    capture_lex $P5128
    .const 'Sub' $P5129 = 'cuid_75_1346968539.359' 
    capture_lex $P5129
    .const 'Sub' $P5130 = 'cuid_76_1346968539.359' 
    capture_lex $P5130
    .const 'Sub' $P5131 = 'cuid_77_1346968539.359' 
    capture_lex $P5131
    .const 'Sub' $P5132 = 'cuid_78_1346968539.359' 
    capture_lex $P5132
    .const 'Sub' $P5133 = 'cuid_79_1346968539.359' 
    capture_lex $P5133
    .const 'Sub' $P5134 = 'cuid_80_1346968539.359' 
    capture_lex $P5134
    .const 'Sub' $P5135 = 'cuid_81_1346968539.359' 
    capture_lex $P5135
    .const 'Sub' $P5136 = 'cuid_82_1346968539.359' 
    capture_lex $P5136
    .const 'Sub' $P5137 = 'cuid_83_1346968539.359' 
    capture_lex $P5137
    .const 'Sub' $P5138 = 'cuid_84_1346968539.359' 
    capture_lex $P5138
    .const 'Sub' $P5139 = 'cuid_85_1346968539.359' 
    capture_lex $P5139
    .const 'Sub' $P5140 = 'cuid_86_1346968539.359' 
    capture_lex $P5140
    .const 'Sub' $P5141 = 'cuid_87_1346968539.359' 
    capture_lex $P5141
    .const 'Sub' $P5142 = 'cuid_88_1346968539.359' 
    capture_lex $P5142
    .const 'Sub' $P5143 = 'cuid_91_1346968539.359' 
    capture_lex $P5143
    .const 'Sub' $P5144 = 'cuid_92_1346968539.359' 
    capture_lex $P5144
    .const 'Sub' $P5145 = 'cuid_93_1346968539.359' 
    capture_lex $P5145
    .const 'Sub' $P5146 = 'cuid_94_1346968539.359' 
    capture_lex $P5146
    .const 'Sub' $P5147 = 'cuid_95_1346968539.359' 
    capture_lex $P5147
    .const 'Sub' $P5148 = 'cuid_96_1346968539.359' 
    capture_lex $P5148
    .const 'Sub' $P5149 = 'cuid_97_1346968539.359' 
    capture_lex $P5149
    .const 'Sub' $P5150 = 'cuid_98_1346968539.359' 
    capture_lex $P5150
    .const 'Sub' $P5151 = 'cuid_99_1346968539.359' 
    capture_lex $P5151
    .const 'Sub' $P5152 = 'cuid_100_1346968539.359' 
    capture_lex $P5152
    .const 'Sub' $P5153 = 'cuid_101_1346968539.359' 
    capture_lex $P5153
    .const 'Sub' $P5154 = 'cuid_102_1346968539.359' 
    capture_lex $P5154
    .const 'Sub' $P5155 = 'cuid_103_1346968539.359' 
    capture_lex $P5155
    .const 'Sub' $P5156 = 'cuid_104_1346968539.359' 
    capture_lex $P5156
    .const 'Sub' $P5157 = 'cuid_105_1346968539.359' 
    capture_lex $P5157
    .const 'Sub' $P5158 = 'cuid_106_1346968539.359' 
    capture_lex $P5158
    .const 'Sub' $P5159 = 'cuid_107_1346968539.359' 
    capture_lex $P5159
    .const 'Sub' $P5160 = 'cuid_108_1346968539.359' 
    capture_lex $P5160
    .const 'Sub' $P5161 = 'cuid_109_1346968539.359' 
    capture_lex $P5161
    .const 'Sub' $P5162 = 'cuid_110_1346968539.359' 
    capture_lex $P5162
    .const 'Sub' $P5163 = 'cuid_111_1346968539.359' 
    capture_lex $P5163
    .const 'Sub' $P5164 = 'cuid_112_1346968539.359' 
    capture_lex $P5164
    .const 'Sub' $P5165 = 'cuid_113_1346968539.359' 
    capture_lex $P5165
    .const 'Sub' $P5166 = 'cuid_114_1346968539.359' 
    capture_lex $P5166
    .const 'Sub' $P5167 = 'cuid_115_1346968539.359' 
    capture_lex $P5167
    .const 'Sub' $P5168 = 'cuid_116_1346968539.359' 
    capture_lex $P5168
    .const 'Sub' $P5169 = 'cuid_117_1346968539.359' 
    capture_lex $P5169
    .const 'Sub' $P5170 = 'cuid_118_1346968539.359' 
    capture_lex $P5170
    .const 'Sub' $P5171 = 'cuid_119_1346968539.359' 
    capture_lex $P5171
    .const 'Sub' $P5172 = 'cuid_120_1346968539.359' 
    capture_lex $P5172
    .const 'Sub' $P5173 = 'cuid_121_1346968539.359' 
    capture_lex $P5173
    .const 'Sub' $P5174 = 'cuid_122_1346968539.359' 
    capture_lex $P5174
    .const 'Sub' $P5175 = 'cuid_123_1346968539.359' 
    capture_lex $P5175
    .const 'Sub' $P5176 = 'cuid_124_1346968539.359' 
    capture_lex $P5176
    .const 'Sub' $P5177 = 'cuid_125_1346968539.359' 
    capture_lex $P5177
    .const 'Sub' $P5178 = 'cuid_126_1346968539.359' 
    capture_lex $P5178
    .const 'Sub' $P5179 = 'cuid_128_1346968539.359' 
    capture_lex $P5179
    .const 'Sub' $P5180 = 'cuid_129_1346968539.359' 
    capture_lex $P5180
    .const 'Sub' $P5181 = 'cuid_130_1346968539.359' 
    capture_lex $P5181
    .const 'Sub' $P5182 = 'cuid_131_1346968539.359' 
    capture_lex $P5182
    .const 'Sub' $P5183 = 'cuid_132_1346968539.359' 
    capture_lex $P5183
    .const 'Sub' $P5184 = 'cuid_133_1346968539.359' 
    capture_lex $P5184
    .const 'Sub' $P5185 = 'cuid_134_1346968539.359' 
    capture_lex $P5185
    .const 'Sub' $P5186 = 'cuid_135_1346968539.359' 
    capture_lex $P5186
    .const 'Sub' $P5187 = 'cuid_136_1346968539.359' 
    capture_lex $P5187
    .const 'Sub' $P5188 = 'cuid_137_1346968539.359' 
    capture_lex $P5188
    .const 'Sub' $P5189 = 'cuid_138_1346968539.359' 
    capture_lex $P5189
    .const 'Sub' $P5190 = 'cuid_139_1346968539.359' 
    capture_lex $P5190
    .const 'Sub' $P5191 = 'cuid_140_1346968539.359' 
    capture_lex $P5191
    .const 'Sub' $P5192 = 'cuid_141_1346968539.359' 
    capture_lex $P5192
    .const 'Sub' $P5193 = 'cuid_142_1346968539.359' 
    capture_lex $P5193
    .const 'Sub' $P5194 = 'cuid_143_1346968539.359' 
    capture_lex $P5194
    .const 'Sub' $P5195 = 'cuid_144_1346968539.359' 
    capture_lex $P5195
    .const 'Sub' $P5196 = 'cuid_145_1346968539.359' 
    capture_lex $P5196
    .const 'Sub' $P5197 = 'cuid_146_1346968539.359' 
    capture_lex $P5197
    .const 'Sub' $P5198 = 'cuid_147_1346968539.359' 
    capture_lex $P5198
    .const 'Sub' $P5199 = 'cuid_148_1346968539.359' 
    capture_lex $P5199
    .const 'Sub' $P5200 = 'cuid_149_1346968539.359' 
    capture_lex $P5200
    .const 'Sub' $P5201 = 'cuid_150_1346968539.359' 
    capture_lex $P5201
    .const 'Sub' $P5202 = 'cuid_151_1346968539.359' 
    capture_lex $P5202
    .const 'Sub' $P5203 = 'cuid_152_1346968539.359' 
    capture_lex $P5203
    .const 'Sub' $P5204 = 'cuid_153_1346968539.359' 
    capture_lex $P5204
    .const 'Sub' $P5205 = 'cuid_154_1346968539.359' 
    capture_lex $P5205
    .const 'Sub' $P5206 = 'cuid_155_1346968539.359' 
    capture_lex $P5206
    .const 'Sub' $P5207 = 'cuid_156_1346968539.359' 
    capture_lex $P5207
    .const 'Sub' $P5208 = 'cuid_157_1346968539.359' 
    capture_lex $P5208
    .const 'Sub' $P5209 = 'cuid_158_1346968539.359' 
    capture_lex $P5209
    .const 'Sub' $P5210 = 'cuid_159_1346968539.359' 
    capture_lex $P5210
    .const 'Sub' $P5211 = 'cuid_160_1346968539.359' 
    capture_lex $P5211
    .const 'Sub' $P5212 = 'cuid_161_1346968539.359' 
    capture_lex $P5212
    .const 'Sub' $P5213 = 'cuid_162_1346968539.359' 
    capture_lex $P5213
    .const 'Sub' $P5214 = 'cuid_163_1346968539.359' 
    capture_lex $P5214
    .const 'Sub' $P5215 = 'cuid_164_1346968539.359' 
    capture_lex $P5215
    .const 'Sub' $P5216 = 'cuid_165_1346968539.359' 
    capture_lex $P5216
    .const 'Sub' $P5217 = 'cuid_166_1346968539.359' 
    capture_lex $P5217
    .const 'Sub' $P5218 = 'cuid_167_1346968539.359' 
    capture_lex $P5218
    .const 'Sub' $P5219 = 'cuid_168_1346968539.359' 
    capture_lex $P5219
    .const 'Sub' $P5220 = 'cuid_169_1346968539.359' 
    capture_lex $P5220
    .const 'Sub' $P5221 = 'cuid_170_1346968539.359' 
    capture_lex $P5221
    .const 'Sub' $P5222 = 'cuid_171_1346968539.359' 
    capture_lex $P5222
    .const 'Sub' $P5223 = 'cuid_172_1346968539.359' 
    capture_lex $P5223
    .const 'Sub' $P5224 = 'cuid_173_1346968539.359' 
    capture_lex $P5224
    .const 'Sub' $P5225 = 'cuid_174_1346968539.359' 
    capture_lex $P5225
    .const 'Sub' $P5226 = 'cuid_175_1346968539.359' 
    capture_lex $P5226
    .const 'Sub' $P5227 = 'cuid_176_1346968539.359' 
    capture_lex $P5227
    .const 'Sub' $P5228 = 'cuid_177_1346968539.359' 
    capture_lex $P5228
    .const 'Sub' $P5229 = 'cuid_178_1346968539.359' 
    capture_lex $P5229
    .const 'Sub' $P5230 = 'cuid_179_1346968539.359' 
    capture_lex $P5230
    .const 'Sub' $P5231 = 'cuid_180_1346968539.359' 
    capture_lex $P5231
    .const 'Sub' $P5232 = 'cuid_181_1346968539.359' 
    capture_lex $P5232
    .const 'Sub' $P5233 = 'cuid_182_1346968539.359' 
    capture_lex $P5233
    .const 'Sub' $P5234 = 'cuid_183_1346968539.359' 
    capture_lex $P5234
    .const 'Sub' $P5235 = 'cuid_184_1346968539.359' 
    capture_lex $P5235
    .const 'Sub' $P5236 = 'cuid_185_1346968539.359' 
    capture_lex $P5236
    .const 'Sub' $P5237 = 'cuid_186_1346968539.359' 
    capture_lex $P5237
    .const 'Sub' $P5238 = 'cuid_187_1346968539.359' 
    capture_lex $P5238
    .const 'Sub' $P5239 = 'cuid_188_1346968539.359' 
    capture_lex $P5239
    .const 'Sub' $P5240 = 'cuid_189_1346968539.359' 
    capture_lex $P5240
    .const 'Sub' $P5241 = 'cuid_190_1346968539.359' 
    capture_lex $P5241
    .const 'Sub' $P5242 = 'cuid_191_1346968539.359' 
    capture_lex $P5242
    .const 'Sub' $P5243 = 'cuid_192_1346968539.359' 
    capture_lex $P5243
    .const 'Sub' $P5244 = 'cuid_193_1346968539.359' 
    capture_lex $P5244
    .const 'Sub' $P5245 = 'cuid_194_1346968539.359' 
    capture_lex $P5245
    .const 'Sub' $P5246 = 'cuid_195_1346968539.359' 
    capture_lex $P5246
    .const 'Sub' $P5247 = 'cuid_196_1346968539.359' 
    capture_lex $P5247
    .const 'Sub' $P5248 = 'cuid_197_1346968539.359' 
    capture_lex $P5248
    .const 'Sub' $P5249 = 'cuid_198_1346968539.359' 
    capture_lex $P5249
    .const 'Sub' $P5250 = 'cuid_199_1346968539.359' 
    capture_lex $P5250
    .const 'Sub' $P5251 = 'cuid_200_1346968539.359' 
    capture_lex $P5251
    .const 'Sub' $P5252 = 'cuid_201_1346968539.359' 
    capture_lex $P5252
    .const 'Sub' $P5253 = 'cuid_202_1346968539.359' 
    capture_lex $P5253
    .const 'Sub' $P5254 = 'cuid_203_1346968539.359' 
    capture_lex $P5254
    .const 'Sub' $P5255 = 'cuid_204_1346968539.359' 
    capture_lex $P5255
    .const 'Sub' $P5256 = 'cuid_205_1346968539.359' 
    capture_lex $P5256
    .const 'Sub' $P5257 = 'cuid_206_1346968539.359' 
    capture_lex $P5257
    .const 'Sub' $P5258 = 'cuid_207_1346968539.359' 
    capture_lex $P5258
    .const 'Sub' $P5259 = 'cuid_208_1346968539.359' 
    capture_lex $P5259
    .const 'Sub' $P5260 = 'cuid_209_1346968539.359' 
    capture_lex $P5260
    .const 'Sub' $P5261 = 'cuid_210_1346968539.359' 
    capture_lex $P5261
    .const 'Sub' $P5262 = 'cuid_211_1346968539.359' 
    capture_lex $P5262
    .const 'Sub' $P5263 = 'cuid_212_1346968539.359' 
    capture_lex $P5263
    .const 'Sub' $P5264 = 'cuid_213_1346968539.359' 
    capture_lex $P5264
    .const 'Sub' $P5265 = 'cuid_214_1346968539.359' 
    capture_lex $P5265
    .const 'Sub' $P5266 = 'cuid_215_1346968539.359' 
    capture_lex $P5266
    .const 'Sub' $P5267 = 'cuid_216_1346968539.359' 
    capture_lex $P5267
    .const 'Sub' $P5268 = 'cuid_217_1346968539.359' 
    capture_lex $P5268
    .const 'Sub' $P5269 = 'cuid_218_1346968539.359' 
    capture_lex $P5269
    .const 'Sub' $P5270 = 'cuid_219_1346968539.359' 
    capture_lex $P5270
    .const 'Sub' $P5271 = 'cuid_220_1346968539.359' 
    capture_lex $P5271
    .const 'Sub' $P5272 = 'cuid_221_1346968539.359' 
    capture_lex $P5272
    .const 'Sub' $P5273 = 'cuid_222_1346968539.359' 
    capture_lex $P5273
    .return ($P5273) 
.end
.HLL "nqp"
.namespace []
.sub "TOP" :subid("cuid_33_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 590
    .param pmc _lex_param_0 
    .lex "%*LANG", $P101 
    .lex "%*HOW", $P102 
    .lex "$file", $P103 
    .lex "$source_id", $P104 
    .lex "$*W", $P105 
    .lex "$*SCOPE", $P106 
    .lex "$*MULTINESS", $P107 
    .lex "$*PKGDECL", $P108 
    .lex "$*INVOCANT_OK", $P109 
    .lex "$*RETURN_USED", $P110 
    .lex "$*CONTROL_USED", $P111 
    .lex "%*HANDLERS", $P112 
    .lex "self", _lex_param_0 
    new $P5001, 'Hash'
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P104, $P5004
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P105, $P5005
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P106, $P5006
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P107, $P5007
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P108, $P5008
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P109, $P5009
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P110, $P5010
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P111, $P5011
    new $P5012, 'Hash'
    set $P112, $P5012
    unless_null $P101, fallback289
    get_hll_global $P5015, "GLOBAL"
    get_who $P5014, $P5015
    set $P5013, $P5014["%LANG"]
    unless_null $P5013, fallback290
    get_hll_global $P5017, "GLOBAL"
    get_who $P5016, $P5017
    new $P5018, 'Hash'
    set $P5016["%LANG"], $P5018
    set $P5013, $P5018
  fallback290:
    unless_null $P5013, vivi_59291
    die "Contextual %*LANG not found"
    box $P5019, "Contextual %*LANG not found"
    set $P5013, $P5019
  vivi_59291:
    set $P101, $P5013
  fallback289:
    unless_null $P101, fallback292
    get_hll_global $P5022, "GLOBAL"
    get_who $P5021, $P5022
    set $P5020, $P5021["%LANG"]
    unless_null $P5020, fallback293
    get_hll_global $P5024, "GLOBAL"
    get_who $P5023, $P5024
    new $P5025, 'Hash'
    set $P5023["%LANG"], $P5025
    set $P5020, $P5025
  fallback293:
    unless_null $P5020, vivi_60294
    die "Contextual %*LANG not found"
    box $P5026, "Contextual %*LANG not found"
    set $P5020, $P5026
  vivi_60294:
    set $P101, $P5020
  fallback292:
    get_hll_global $P5030, "GLOBAL"
    nqp_get_package_through_who $P5029, $P5030, "NQP"
    get_who $P5028, $P5029
    set $P5027, $P5028["Regex"]
    unless_null $P5027, fallback295
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5027, $P5031
  fallback295:
    set $P101["Regex"], $P5027
    unless_null $P101, fallback296
    get_hll_global $P5034, "GLOBAL"
    get_who $P5033, $P5034
    set $P5032, $P5033["%LANG"]
    unless_null $P5032, fallback297
    get_hll_global $P5036, "GLOBAL"
    get_who $P5035, $P5036
    new $P5037, 'Hash'
    set $P5035["%LANG"], $P5037
    set $P5032, $P5037
  fallback297:
    unless_null $P5032, vivi_61298
    die "Contextual %*LANG not found"
    box $P5038, "Contextual %*LANG not found"
    set $P5032, $P5038
  vivi_61298:
    set $P101, $P5032
  fallback296:
    get_hll_global $P5042, "GLOBAL"
    nqp_get_package_through_who $P5041, $P5042, "NQP"
    get_who $P5040, $P5041
    set $P5039, $P5040["RegexActions"]
    unless_null $P5039, fallback299
    nqp_get_sc_object $P5043, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5039, $P5043
  fallback299:
    set $P101["Regex-actions"], $P5039
    unless_null $P101, fallback300
    get_hll_global $P5046, "GLOBAL"
    get_who $P5045, $P5046
    set $P5044, $P5045["%LANG"]
    unless_null $P5044, fallback301
    get_hll_global $P5048, "GLOBAL"
    get_who $P5047, $P5048
    new $P5049, 'Hash'
    set $P5047["%LANG"], $P5049
    set $P5044, $P5049
  fallback301:
    unless_null $P5044, vivi_62302
    die "Contextual %*LANG not found"
    box $P5050, "Contextual %*LANG not found"
    set $P5044, $P5050
  vivi_62302:
    set $P101, $P5044
  fallback300:
    get_hll_global $P5054, "GLOBAL"
    nqp_get_package_through_who $P5053, $P5054, "NQP"
    get_who $P5052, $P5053
    set $P5051, $P5052["Grammar"]
    unless_null $P5051, fallback303
    nqp_get_sc_object $P5055, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5051, $P5055
  fallback303:
    set $P101["MAIN"], $P5051
    unless_null $P101, fallback304
    get_hll_global $P5058, "GLOBAL"
    get_who $P5057, $P5058
    set $P5056, $P5057["%LANG"]
    unless_null $P5056, fallback305
    get_hll_global $P5060, "GLOBAL"
    get_who $P5059, $P5060
    new $P5061, 'Hash'
    set $P5059["%LANG"], $P5061
    set $P5056, $P5061
  fallback305:
    unless_null $P5056, vivi_63306
    die "Contextual %*LANG not found"
    box $P5062, "Contextual %*LANG not found"
    set $P5056, $P5062
  vivi_63306:
    set $P101, $P5056
  fallback304:
    get_hll_global $P5066, "GLOBAL"
    nqp_get_package_through_who $P5065, $P5066, "NQP"
    get_who $P5064, $P5065
    set $P5063, $P5064["Actions"]
    unless_null $P5063, fallback307
    nqp_get_sc_object $P5067, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5063, $P5067
  fallback307:
    set $P101["MAIN-actions"], $P5063
    unless_null $P102, fallback308
    get_hll_global $P5070, "GLOBAL"
    get_who $P5069, $P5070
    set $P5068, $P5069["%HOW"]
    unless_null $P5068, fallback309
    get_hll_global $P5072, "GLOBAL"
    get_who $P5071, $P5072
    new $P5073, 'Hash'
    set $P5071["%HOW"], $P5073
    set $P5068, $P5073
  fallback309:
    unless_null $P5068, vivi_64310
    die "Contextual %*HOW not found"
    box $P5074, "Contextual %*HOW not found"
    set $P5068, $P5074
  vivi_64310:
    set $P102, $P5068
  fallback308:
    unless_null $P102, fallback311
    get_hll_global $P5077, "GLOBAL"
    get_who $P5076, $P5077
    set $P5075, $P5076["%HOW"]
    unless_null $P5075, fallback312
    get_hll_global $P5079, "GLOBAL"
    get_who $P5078, $P5079
    new $P5080, 'Hash'
    set $P5078["%HOW"], $P5080
    set $P5075, $P5080
  fallback312:
    unless_null $P5075, vivi_65313
    die "Contextual %*HOW not found"
    box $P5081, "Contextual %*HOW not found"
    set $P5075, $P5081
  vivi_65313:
    set $P102, $P5075
  fallback311:
    get_knowhow $P5082
    set $P102["knowhow"], $P5082
    unless_null $P102, fallback314
    get_hll_global $P5085, "GLOBAL"
    get_who $P5084, $P5085
    set $P5083, $P5084["%HOW"]
    unless_null $P5083, fallback315
    get_hll_global $P5087, "GLOBAL"
    get_who $P5086, $P5087
    new $P5088, 'Hash'
    set $P5086["%HOW"], $P5088
    set $P5083, $P5088
  fallback315:
    unless_null $P5083, vivi_66316
    die "Contextual %*HOW not found"
    box $P5089, "Contextual %*HOW not found"
    set $P5083, $P5089
  vivi_66316:
    set $P102, $P5083
  fallback314:
    get_knowhow_attribute $P5090
    set $P102["knowhow-attr"], $P5090
    find_caller_lex $P5091, "$?FILES"
    set $P103, $P5091
    nqp_decontainerize $P5092, _lex_param_0
    find_lex $P5095, "$?PACKAGE"
    get_who $P5094, $P5095
    set $P5093, $P5094["NQPCursor"]
    unless_null $P5093, fallback317
    get_hll_global $P5098, "GLOBAL"
    get_who $P5097, $P5098
    set $P5096, $P5097["NQPCursor"]
    unless_null $P5096, vivi_67318
    nqp_get_sc_object $P5099, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5096, $P5099
  vivi_67318:
    set $P5093, $P5096
  fallback317:
    repr_get_attr_str $S5004, $P5092, $P5093, "$!target"
    nqp_sha1 $S5003, $S5004
    concat $S5002, $S5003, "-"
    time $N5001
    set $S5005, $N5001
    concat $S5001, $S5002, $S5005
    box $P5100, $S5001
    set $P104, $P5100
    isnull $I5001, $P103
    unless $I5001 goto if68_else319 
.annotate 'line', 612
    get_hll_global $P5104, "GLOBAL"
    nqp_get_package_through_who $P5103, $P5104, "NQP"
    get_who $P5102, $P5103
    set $P5101, $P5102["World"]
    unless_null $P5101, fallback321
    nqp_get_sc_object $P5105, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5101, $P5105
  fallback321:
    $P5106 = $P5101."new"($P104 :named("handle"))
    set $P5113, $P5106
    goto if68_end320
  if68_else319:
.annotate 'line', 613
    get_hll_global $P5110, "GLOBAL"
    nqp_get_package_through_who $P5109, $P5110, "NQP"
    get_who $P5108, $P5109
    set $P5107, $P5108["World"]
    unless_null $P5107, fallback322
    nqp_get_sc_object $P5111, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5107, $P5111
  fallback322:
    $P5112 = $P5107."new"($P104 :named("handle"), $P103 :named("description"))
    set $P5113, $P5112
  if68_end320:
    set $P105, $P5113
    box $P5114, ""
    set $P106, $P5114
    box $P5115, ""
    set $P107, $P5115
    box $P5116, ""
    set $P108, $P5116
    box $P5117, 0
    set $P109, $P5117
    box $P5118, 0
    set $P110, $P5118
    box $P5119, 0
    set $P111, $P5119
    unless_null $P112, fallback323
    get_hll_global $P5122, "GLOBAL"
    get_who $P5121, $P5122
    set $P5120, $P5121["%HANDLERS"]
    unless_null $P5120, fallback324
    get_hll_global $P5124, "GLOBAL"
    get_who $P5123, $P5124
    new $P5125, 'Hash'
    set $P5123["%HANDLERS"], $P5125
    set $P5120, $P5125
  fallback324:
    unless_null $P5120, vivi_69325
    die "Contextual %*HANDLERS not found"
    box $P5126, "Contextual %*HANDLERS not found"
    set $P5120, $P5126
  vivi_69325:
    set $P112, $P5120
  fallback323:
.annotate 'line', 622
    nqp_decontainerize $P5127, _lex_param_0
    $P5128 = $P5127."comp_unit"()
    .return ($P5128) 
.end
.HLL "nqp"
.namespace []
.sub "identifier" :subid("cuid_34_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 627
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx70_tgt
    .local int rx70_pos
    .local int rx70_off
    .local int rx70_eos
    .local int rx70_rep
    .local pmc rx70_cur
    .local pmc rx70_curclass
    .local pmc rx70_bstack
    .local pmc rx70_cstack
    (rx70_cur, rx70_tgt, rx70_pos, rx70_curclass, rx70_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx70_cur
    length rx70_eos, rx70_tgt
    eq $I19, 1, rx70_restart328
    gt rx70_pos, rx70_eos, rx70_fail329
    repr_get_attr_int $I11, self, rx70_curclass, "$!from"
    ne $I11, -1, rxscan71_done335
    goto rxscan71_scan334
  rxscan71_loop333:
    inc rx70_pos
    gt rx70_pos, rx70_eos, rx70_fail329
    repr_bind_attr_int rx70_cur, rx70_curclass, "$!from", rx70_pos
  rxscan71_scan334:
    nqp_rxmark rx70_bstack, rxscan71_loop333, rx70_pos, 0
  rxscan71_done335:
    repr_bind_attr_int rx70_cur, rx70_curclass, "$!pos", rx70_pos
    $P11 = rx70_cur."ident"()
    repr_get_attr_int $I11, $P11, rx70_curclass, "$!pos"
    lt $I11, 0, rx70_fail329
    repr_get_attr_int rx70_pos, $P11, rx70_curclass, "$!pos"
    nqp_rxmark rx70_bstack, rxquantr73_done338, rx70_pos, 0
  rxquantr73_loop337:
  alt74_0340:
    nqp_rxmark rx70_bstack, alt74_1341, rx70_pos, 0
    add $I11, rx70_pos, 1
    gt $I11, rx70_eos, rx70_fail329
    substr $S10, rx70_tgt, rx70_pos, 1
    ne $S10, ucs4:"-", rx70_fail329
    add rx70_pos, 1
    goto alt74_end339
  alt74_1341:
    ge rx70_pos, rx70_eos, rx70_fail329
    substr $S11, rx70_tgt, rx70_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx70_fail329
    inc rx70_pos
  alt74_end339:
    repr_bind_attr_int rx70_cur, rx70_curclass, "$!pos", rx70_pos
    $P11 = rx70_cur."ident"()
    repr_get_attr_int $I11, $P11, rx70_curclass, "$!pos"
    lt $I11, 0, rx70_fail329
    repr_get_attr_int rx70_pos, $P11, rx70_curclass, "$!pos"
    nqp_rxpeek $I19, rx70_bstack, rxquantr73_done338
    inc $I19
    inc $I19
    set rx70_rep, rx70_bstack[$I19]
    nqp_rxcommit rx70_bstack, rxquantr73_done338
    inc rx70_rep
    nqp_rxmark rx70_bstack, rxquantr73_done338, rx70_pos, rx70_rep
    goto rxquantr73_loop337
  rxquantr73_done338:
    rx70_cur."!cursor_pass"(rx70_pos, "identifier", 'backtrack'=>1)
    .return (rx70_cur)
  rx70_restart328:
    repr_get_attr_obj rx70_cstack, rx70_cur, rx70_curclass, "$!cstack"
  rx70_fail329:
    unless rx70_bstack, rx70_done327
    pop $I19, rx70_bstack
    if_null rx70_cstack, rx70_cstack_done332
    unless rx70_cstack, rx70_cstack_done332
    dec $I19
    set $P11, rx70_cstack[$I19]
  rx70_cstack_done332:
    pop rx70_rep, rx70_bstack
    pop rx70_pos, rx70_bstack
    pop $I19, rx70_bstack
    lt rx70_pos, -1, rx70_done327
    lt rx70_pos, 0, rx70_fail329
    eq $I19, 0, rx70_fail329
    nqp_islist $I20, rx70_cstack
    unless $I20, rx70_jump330
    elements $I18, rx70_bstack
    le $I18, 0, rx70_cut331
    dec $I18
    set $I18, rx70_bstack[$I18]
  rx70_cut331:
    assign rx70_cstack, $I18
  rx70_jump330:
    jump $I19
  rx70_done327:
    rx70_cur."!cursor_fail"()
    .return (rx70_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_34_1346968539.359_caps" :subid("cuid_memo_1_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_34_1346968539.359_nfa" :subid("cuid_memo_2_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "ident"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    box $P5011, 1
    push $P5007, $P5011
    box $P5012, 0
    push $P5007, $P5012
    box $P5013, 0
    push $P5007, $P5013
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "name" :subid("cuid_35_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 629
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx76_tgt
    .local int rx76_pos
    .local int rx76_off
    .local int rx76_eos
    .local int rx76_rep
    .local pmc rx76_cur
    .local pmc rx76_curclass
    .local pmc rx76_bstack
    .local pmc rx76_cstack
    (rx76_cur, rx76_tgt, rx76_pos, rx76_curclass, rx76_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx76_cur
    length rx76_eos, rx76_tgt
    eq $I19, 1, rx76_restart345
    gt rx76_pos, rx76_eos, rx76_fail346
    repr_get_attr_int $I11, self, rx76_curclass, "$!from"
    ne $I11, -1, rxscan77_done352
    goto rxscan77_scan351
  rxscan77_loop350:
    inc rx76_pos
    gt rx76_pos, rx76_eos, rx76_fail346
    repr_bind_attr_int rx76_cur, rx76_curclass, "$!from", rx76_pos
  rxscan77_scan351:
    nqp_rxmark rx76_bstack, rxscan77_loop350, rx76_pos, 0
  rxscan77_done352:
    repr_bind_attr_int rx76_cur, rx76_curclass, "$!pos", rx76_pos
    $P11 = rx76_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx76_curclass, "$!pos"
    lt $I11, 0, rx76_fail346
    nqp_rxmark rx76_bstack, rxsubrule78_pass353, -1, 0
  rxsubrule78_pass353:
    rx76_cstack = rx76_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx76_pos, $P11, rx76_curclass, "$!pos"
    nqp_rxmark rx76_bstack, rxquantr79_done355, rx76_pos, 0
  rxquantr79_loop354:
    add $I11, rx76_pos, 2
    gt $I11, rx76_eos, rx76_fail346
    substr $S10, rx76_tgt, rx76_pos, 2
    ne $S10, ucs4:"::", rx76_fail346
    add rx76_pos, 2
    repr_bind_attr_int rx76_cur, rx76_curclass, "$!pos", rx76_pos
    $P11 = rx76_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx76_curclass, "$!pos"
    lt $I11, 0, rx76_fail346
    nqp_rxmark rx76_bstack, rxsubrule80_pass356, -1, 0
  rxsubrule80_pass356:
    rx76_cstack = rx76_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx76_pos, $P11, rx76_curclass, "$!pos"
    nqp_rxpeek $I19, rx76_bstack, rxquantr79_done355
    inc $I19
    inc $I19
    set rx76_rep, rx76_bstack[$I19]
    nqp_rxcommit rx76_bstack, rxquantr79_done355
    inc rx76_rep
    nqp_rxmark rx76_bstack, rxquantr79_done355, rx76_pos, rx76_rep
    goto rxquantr79_loop354
  rxquantr79_done355:
    rx76_cur."!cursor_pass"(rx76_pos, "name", 'backtrack'=>1)
    .return (rx76_cur)
  rx76_restart345:
    repr_get_attr_obj rx76_cstack, rx76_cur, rx76_curclass, "$!cstack"
  rx76_fail346:
    unless rx76_bstack, rx76_done344
    pop $I19, rx76_bstack
    if_null rx76_cstack, rx76_cstack_done349
    unless rx76_cstack, rx76_cstack_done349
    dec $I19
    set $P11, rx76_cstack[$I19]
  rx76_cstack_done349:
    pop rx76_rep, rx76_bstack
    pop rx76_pos, rx76_bstack
    pop $I19, rx76_bstack
    lt rx76_pos, -1, rx76_done344
    lt rx76_pos, 0, rx76_fail346
    eq $I19, 0, rx76_fail346
    nqp_islist $I20, rx76_cstack
    unless $I20, rx76_jump347
    elements $I18, rx76_bstack
    le $I18, 0, rx76_cut348
    dec $I18
    set $I18, rx76_bstack[$I18]
  rx76_cut348:
    assign rx76_cstack, $I18
  rx76_jump347:
    jump $I19
  rx76_done344:
    rx76_cur."!cursor_fail"()
    .return (rx76_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_35_1346968539.359_caps" :subid("cuid_memo_3_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 2
    set $P5001["identifier"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_35_1346968539.359_nfa" :subid("cuid_memo_4_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "identifier"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 58
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    box $P5011, 1
    push $P5007, $P5011
    box $P5012, 0
    push $P5007, $P5012
    box $P5013, 0
    push $P5007, $P5013
    push $P5001, $P5007
    new $P5014, 'ResizablePMCArray'
    box $P5015, 2
    push $P5014, $P5015
    box $P5016, 58
    push $P5014, $P5016
    box $P5017, 4
    push $P5014, $P5017
    push $P5001, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 8
    push $P5018, $P5019
    box $P5020, "identifier"
    push $P5018, $P5020
    box $P5021, 2
    push $P5018, $P5021
    push $P5001, $P5018
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "deflongname" :subid("cuid_36_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 631
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx81_tgt
    .local int rx81_pos
    .local int rx81_off
    .local int rx81_eos
    .local int rx81_rep
    .local pmc rx81_cur
    .local pmc rx81_curclass
    .local pmc rx81_bstack
    .local pmc rx81_cstack
    (rx81_cur, rx81_tgt, rx81_pos, rx81_curclass, rx81_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx81_cur
    length rx81_eos, rx81_tgt
    eq $I19, 1, rx81_restart359
    gt rx81_pos, rx81_eos, rx81_fail360
    repr_get_attr_int $I11, self, rx81_curclass, "$!from"
    ne $I11, -1, rxscan82_done366
    goto rxscan82_scan365
  rxscan82_loop364:
    inc rx81_pos
    gt rx81_pos, rx81_eos, rx81_fail360
    repr_bind_attr_int rx81_cur, rx81_curclass, "$!from", rx81_pos
  rxscan82_scan365:
    nqp_rxmark rx81_bstack, rxscan82_loop364, rx81_pos, 0
  rxscan82_done366:
    repr_bind_attr_int rx81_cur, rx81_curclass, "$!pos", rx81_pos
    $P11 = rx81_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx81_curclass, "$!pos"
    lt $I11, 0, rx81_fail360
    nqp_rxmark rx81_bstack, rxsubrule83_pass367, -1, 0
  rxsubrule83_pass367:
    rx81_cstack = rx81_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx81_pos, $P11, rx81_curclass, "$!pos"
    nqp_rxmark rx81_bstack, rxquantr84_done369, rx81_pos, 0
  rxquantr84_loop368:
    repr_bind_attr_int rx81_cur, rx81_curclass, "$!pos", rx81_pos
    $P11 = rx81_cur."colonpair"()
    repr_get_attr_int $I11, $P11, rx81_curclass, "$!pos"
    lt $I11, 0, rx81_fail360
    goto rxsubrule85_pass370
  rxsubrule85_back371:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx81_curclass, "$!pos"
    lt $I11, 0, rx81_fail360
  rxsubrule85_pass370:
    rx81_cstack = rx81_cur."!cursor_capture"($P11, "colonpair")
    set_addr $I11, rxsubrule85_back371
    push rx81_bstack, $I11
    push rx81_bstack, 0
    push rx81_bstack, rx81_pos
    elements $I11, rx81_cstack
    push rx81_bstack, $I11
    repr_get_attr_int rx81_pos, $P11, rx81_curclass, "$!pos"
    nqp_rxpeek $I19, rx81_bstack, rxquantr84_done369
    inc $I19
    inc $I19
    set rx81_rep, rx81_bstack[$I19]
    nqp_rxcommit rx81_bstack, rxquantr84_done369
    inc rx81_rep
  rxquantr84_done369:
    rx81_cur."!cursor_pass"(rx81_pos, "deflongname", 'backtrack'=>1)
    .return (rx81_cur)
  rx81_restart359:
    repr_get_attr_obj rx81_cstack, rx81_cur, rx81_curclass, "$!cstack"
  rx81_fail360:
    unless rx81_bstack, rx81_done358
    pop $I19, rx81_bstack
    if_null rx81_cstack, rx81_cstack_done363
    unless rx81_cstack, rx81_cstack_done363
    dec $I19
    set $P11, rx81_cstack[$I19]
  rx81_cstack_done363:
    pop rx81_rep, rx81_bstack
    pop rx81_pos, rx81_bstack
    pop $I19, rx81_bstack
    lt rx81_pos, -1, rx81_done358
    lt rx81_pos, 0, rx81_fail360
    eq $I19, 0, rx81_fail360
    nqp_islist $I20, rx81_cstack
    unless $I20, rx81_jump361
    elements $I18, rx81_bstack
    le $I18, 0, rx81_cut362
    dec $I18
    set $I18, rx81_bstack[$I18]
  rx81_cut362:
    assign rx81_cstack, $I18
  rx81_jump361:
    jump $I19
  rx81_done358:
    rx81_cur."!cursor_fail"()
    .return (rx81_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_36_1346968539.359_caps" :subid("cuid_memo_5_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["identifier"], $P5002
    box $P5003, 2
    set $P5001["colonpair"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_36_1346968539.359_nfa" :subid("cuid_memo_6_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "identifier"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "colonpair"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    box $P5011, 1
    push $P5007, $P5011
    box $P5012, 0
    push $P5007, $P5012
    box $P5013, 0
    push $P5007, $P5013
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "ENDSTMT" :subid("cuid_37_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 635
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx86_tgt
    .local int rx86_pos
    .local int rx86_off
    .local int rx86_eos
    .local int rx86_rep
    .local pmc rx86_cur
    .local pmc rx86_curclass
    .local pmc rx86_bstack
    .local pmc rx86_cstack
    (rx86_cur, rx86_tgt, rx86_pos, rx86_curclass, rx86_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx86_cur
    length rx86_eos, rx86_tgt
    eq $I19, 1, rx86_restart374
    gt rx86_pos, rx86_eos, rx86_fail375
    repr_get_attr_int $I11, self, rx86_curclass, "$!from"
    ne $I11, -1, rxscan87_done381
    goto rxscan87_scan380
  rxscan87_loop379:
    inc rx86_pos
    gt rx86_pos, rx86_eos, rx86_fail375
    repr_bind_attr_int rx86_cur, rx86_curclass, "$!from", rx86_pos
  rxscan87_scan380:
    nqp_rxmark rx86_bstack, rxscan87_loop379, rx86_pos, 0
  rxscan87_done381:
    nqp_rxmark rx86_bstack, rxquantr88_done383, rx86_pos, 0
  rxquantr88_loop382:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt89_0385
    nqp_push_label $P11, alt89_1390
    nqp_rxmark rx86_bstack, alt89_end384, -1, 0
    rx86_cur."!alt"(rx86_pos, "alt_nfa__1_1346968540.632", $P11)
    goto rx86_fail375
  alt89_0385:
    nqp_rxmark rx86_bstack, rxquantr90_done387, rx86_pos, 0
  rxquantr90_loop386:
    ge rx86_pos, rx86_eos, rx86_fail375
    substr $S11, rx86_tgt, rx86_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx86_fail375
    inc rx86_pos
    nqp_rxpeek $I19, rx86_bstack, rxquantr90_done387
    inc $I19
    inc $I19
    set rx86_rep, rx86_bstack[$I19]
    nqp_rxcommit rx86_bstack, rxquantr90_done387
    inc rx86_rep
    nqp_rxmark rx86_bstack, rxquantr90_done387, rx86_pos, rx86_rep
    goto rxquantr90_loop386
  rxquantr90_done387:
    is_cclass $I11, .CCLASS_NEWLINE, rx86_tgt, rx86_pos
    if $I11, rxanchor91_done388
    ne rx86_pos, rx86_eos, rx86_fail375
    eq rx86_pos, 0, rxanchor91_done388
    sub $I11, rx86_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx86_tgt, $I11
    if $I11, rx86_fail375
  rxanchor91_done388:
    repr_bind_attr_int rx86_cur, rx86_curclass, "$!pos", rx86_pos
    $P11 = rx86_cur."ws"()
    repr_get_attr_int $I11, $P11, rx86_curclass, "$!pos"
    lt $I11, 0, rx86_fail375
    repr_get_attr_int rx86_pos, $P11, rx86_curclass, "$!pos"
    repr_bind_attr_int rx86_cur, rx86_curclass, "$!pos", rx86_pos
    $P11 = rx86_cur."MARKER"("endstmt")
    repr_get_attr_int $I11, $P11, rx86_curclass, "$!pos"
    lt $I11, 0, rx86_fail375
    goto alt89_end384
  alt89_1390:
    nqp_rxmark rx86_bstack, rxquantr93_done392, rx86_pos, 0
  rxquantr93_loop391:
    repr_bind_attr_int rx86_cur, rx86_curclass, "$!pos", rx86_pos
    $P11 = rx86_cur."unv"()
    repr_get_attr_int $I11, $P11, rx86_curclass, "$!pos"
    lt $I11, 0, rx86_fail375
    goto rxsubrule94_pass393
  rxsubrule94_back394:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx86_curclass, "$!pos"
    lt $I11, 0, rx86_fail375
  rxsubrule94_pass393:
    rx86_cstack = rx86_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule94_back394
    push rx86_bstack, $I11
    push rx86_bstack, 0
    push rx86_bstack, rx86_pos
    elements $I11, rx86_cstack
    push rx86_bstack, $I11
    repr_get_attr_int rx86_pos, $P11, rx86_curclass, "$!pos"
    nqp_rxpeek $I19, rx86_bstack, rxquantr93_done392
    inc $I19
    inc $I19
    set rx86_rep, rx86_bstack[$I19]
    nqp_rxcommit rx86_bstack, rxquantr93_done392
    inc rx86_rep
  rxquantr93_done392:
    is_cclass $I11, .CCLASS_NEWLINE, rx86_tgt, rx86_pos
    if $I11, rxanchor95_done395
    ne rx86_pos, rx86_eos, rx86_fail375
    eq rx86_pos, 0, rxanchor95_done395
    sub $I11, rx86_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx86_tgt, $I11
    if $I11, rx86_fail375
  rxanchor95_done395:
    repr_bind_attr_int rx86_cur, rx86_curclass, "$!pos", rx86_pos
    $P11 = rx86_cur."ws"()
    repr_get_attr_int $I11, $P11, rx86_curclass, "$!pos"
    lt $I11, 0, rx86_fail375
    repr_get_attr_int rx86_pos, $P11, rx86_curclass, "$!pos"
    repr_bind_attr_int rx86_cur, rx86_curclass, "$!pos", rx86_pos
    $P11 = rx86_cur."MARKER"("endstmt")
    repr_get_attr_int $I11, $P11, rx86_curclass, "$!pos"
    lt $I11, 0, rx86_fail375
    goto alt89_end384
  alt89_end384:
    nqp_rxpeek $I19, rx86_bstack, rxquantr88_done383
    inc $I19
    inc $I19
    set rx86_rep, rx86_bstack[$I19]
    nqp_rxcommit rx86_bstack, rxquantr88_done383
    inc rx86_rep
  rxquantr88_done383:
    rx86_cur."!cursor_pass"(rx86_pos, "ENDSTMT", 'backtrack'=>1)
    .return (rx86_cur)
  rx86_restart374:
    repr_get_attr_obj rx86_cstack, rx86_cur, rx86_curclass, "$!cstack"
  rx86_fail375:
    unless rx86_bstack, rx86_done373
    pop $I19, rx86_bstack
    if_null rx86_cstack, rx86_cstack_done378
    unless rx86_cstack, rx86_cstack_done378
    dec $I19
    set $P11, rx86_cstack[$I19]
  rx86_cstack_done378:
    pop rx86_rep, rx86_bstack
    pop rx86_pos, rx86_bstack
    pop $I19, rx86_bstack
    lt rx86_pos, -1, rx86_done373
    lt rx86_pos, 0, rx86_fail375
    eq $I19, 0, rx86_fail375
    nqp_islist $I20, rx86_cstack
    unless $I20, rx86_jump376
    elements $I18, rx86_bstack
    le $I18, 0, rx86_cut377
    dec $I18
    set $I18, rx86_bstack[$I18]
  rx86_cut377:
    assign rx86_cstack, $I18
  rx86_jump376:
    jump $I19
  rx86_done373:
    rx86_cur."!cursor_fail"()
    .return (rx86_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_37_1346968539.359_caps" :subid("cuid_memo_7_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_37_1346968539.359_nfa" :subid("cuid_memo_8_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5003, $P5005
    box $P5006, 1
    push $P5003, $P5006
    box $P5007, 1
    push $P5003, $P5007
    box $P5008, 0
    push $P5003, $P5008
    box $P5009, 2
    push $P5003, $P5009
    box $P5010, 8
    push $P5003, $P5010
    box $P5011, "unv"
    push $P5003, $P5011
    box $P5012, 6
    push $P5003, $P5012
    box $P5013, 1
    push $P5003, $P5013
    box $P5014, 0
    push $P5003, $P5014
    box $P5015, 6
    push $P5003, $P5015
    box $P5016, 1
    push $P5003, $P5016
    box $P5017, 0
    push $P5003, $P5017
    box $P5018, 0
    push $P5003, $P5018
    push $P5001, $P5003
    new $P5019, 'ResizablePMCArray'
    box $P5020, 1
    push $P5019, $P5020
    box $P5021, 0
    push $P5019, $P5021
    box $P5022, 3
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 8
    push $P5023, $P5024
    box $P5025, "ws"
    push $P5023, $P5025
    box $P5026, 4
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "MARKER"
    push $P5027, $P5029
    box $P5030, 5
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 0
    push $P5031, $P5032
    box $P5033, 0
    push $P5031, $P5033
    box $P5034, 0
    push $P5031, $P5034
    push $P5001, $P5031
    new $P5035, 'ResizablePMCArray'
    box $P5036, 1
    push $P5035, $P5036
    box $P5037, 0
    push $P5035, $P5037
    box $P5038, 7
    push $P5035, $P5038
    push $P5001, $P5035
    new $P5039, 'ResizablePMCArray'
    box $P5040, 8
    push $P5039, $P5040
    box $P5041, "ws"
    push $P5039, $P5041
    box $P5042, 8
    push $P5039, $P5042
    push $P5001, $P5039
    new $P5043, 'ResizablePMCArray'
    box $P5044, 8
    push $P5043, $P5044
    box $P5045, "MARKER"
    push $P5043, $P5045
    box $P5046, 9
    push $P5043, $P5046
    push $P5001, $P5043
    new $P5047, 'ResizablePMCArray'
    box $P5048, 0
    push $P5047, $P5048
    box $P5049, 0
    push $P5047, $P5049
    box $P5050, 0
    push $P5047, $P5050
    push $P5001, $P5047
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_37_1346968539.359_alt_nfa__1_1346968540.632" :subid("cuid_memo_9_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 6
    push $P5004, $P5005
    box $P5006, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5004, $P5006
    box $P5007, 1
    push $P5004, $P5007
    box $P5008, 1
    push $P5004, $P5008
    box $P5009, 0
    push $P5004, $P5009
    box $P5010, 2
    push $P5004, $P5010
    push $P5002, $P5004
    new $P5011, 'ResizablePMCArray'
    box $P5012, 1
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 3
    push $P5011, $P5014
    push $P5002, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "ws"
    push $P5015, $P5017
    box $P5018, 4
    push $P5015, $P5018
    push $P5002, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 8
    push $P5019, $P5020
    box $P5021, "MARKER"
    push $P5019, $P5021
    box $P5022, 5
    push $P5019, $P5022
    push $P5002, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 0
    push $P5023, $P5024
    box $P5025, 0
    push $P5023, $P5025
    box $P5026, 0
    push $P5023, $P5026
    push $P5002, $P5023
    push $P5001, $P5002
    new $P5027, 'ResizablePMCArray'
    new $P5028, 'ResizablePMCArray'
    push $P5027, $P5028
    new $P5029, 'ResizablePMCArray'
    box $P5030, 8
    push $P5029, $P5030
    box $P5031, "unv"
    push $P5029, $P5031
    box $P5032, 2
    push $P5029, $P5032
    box $P5033, 1
    push $P5029, $P5033
    box $P5034, 0
    push $P5029, $P5034
    box $P5035, 2
    push $P5029, $P5035
    push $P5027, $P5029
    new $P5036, 'ResizablePMCArray'
    box $P5037, 1
    push $P5036, $P5037
    box $P5038, 0
    push $P5036, $P5038
    box $P5039, 3
    push $P5036, $P5039
    push $P5027, $P5036
    new $P5040, 'ResizablePMCArray'
    box $P5041, 8
    push $P5040, $P5041
    box $P5042, "ws"
    push $P5040, $P5042
    box $P5043, 4
    push $P5040, $P5043
    push $P5027, $P5040
    new $P5044, 'ResizablePMCArray'
    box $P5045, 8
    push $P5044, $P5045
    box $P5046, "MARKER"
    push $P5044, $P5046
    box $P5047, 5
    push $P5044, $P5047
    push $P5027, $P5044
    new $P5048, 'ResizablePMCArray'
    box $P5049, 0
    push $P5048, $P5049
    box $P5050, 0
    push $P5048, $P5050
    box $P5051, 0
    push $P5048, $P5051
    push $P5027, $P5048
    push $P5001, $P5027
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "ws" :subid("cuid_38_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 642
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx97_tgt
    .local int rx97_pos
    .local int rx97_off
    .local int rx97_eos
    .local int rx97_rep
    .local pmc rx97_cur
    .local pmc rx97_curclass
    .local pmc rx97_bstack
    .local pmc rx97_cstack
    (rx97_cur, rx97_tgt, rx97_pos, rx97_curclass, rx97_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx97_cur
    length rx97_eos, rx97_tgt
    eq $I19, 1, rx97_restart399
    gt rx97_pos, rx97_eos, rx97_fail400
    repr_get_attr_int $I11, self, rx97_curclass, "$!from"
    ne $I11, -1, rxscan98_done406
    goto rxscan98_scan405
  rxscan98_loop404:
    inc rx97_pos
    gt rx97_pos, rx97_eos, rx97_fail400
    repr_bind_attr_int rx97_cur, rx97_curclass, "$!from", rx97_pos
  rxscan98_scan405:
    nqp_rxmark rx97_bstack, rxscan98_loop404, rx97_pos, 0
  rxscan98_done406:
  alt99_0408:
    nqp_rxmark rx97_bstack, alt99_1409, rx97_pos, 0
    repr_bind_attr_int rx97_cur, rx97_curclass, "$!pos", rx97_pos
    $P11 = rx97_cur."MARKED"("ws")
    repr_get_attr_int $I11, $P11, rx97_curclass, "$!pos"
    lt $I11, 0, rx97_fail400
    goto alt99_end407
  alt99_1409:
    repr_bind_attr_int rx97_cur, rx97_curclass, "$!pos", rx97_pos
    $P11 = rx97_cur."ww"()
    repr_get_attr_int $I11, $P11, rx97_curclass, "$!pos"
    ge $I11, 0, rx97_fail400
    nqp_rxmark rx97_bstack, rxquantr100_done411, rx97_pos, 0
  rxquantr100_loop410:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt101_0413
    nqp_push_label $P11, alt101_1416
    nqp_push_label $P11, alt101_2419
    nqp_push_label $P11, alt101_3422
    nqp_rxmark rx97_bstack, alt101_end412, -1, 0
    rx97_cur."!alt"(rx97_pos, "alt_nfa__2_1346968540.651", $P11)
    goto rx97_fail400
  alt101_0413:
    nqp_rxmark rx97_bstack, rxquantr102_done415, -1, 0
  rxquantr102_loop414:
    ge rx97_pos, rx97_eos, rx97_fail400
    substr $S11, rx97_tgt, rx97_pos, 1
    index $I11, ucs4:"\n\x{b}\f\r\x{85}\u2028\u2029", $S11
    lt $I11, 0, rx97_fail400
    inc rx97_pos
    nqp_rxpeek $I19, rx97_bstack, rxquantr102_done415
    inc $I19
    inc $I19
    set rx97_rep, rx97_bstack[$I19]
    nqp_rxcommit rx97_bstack, rxquantr102_done415
    inc rx97_rep
    nqp_rxmark rx97_bstack, rxquantr102_done415, rx97_pos, rx97_rep
    goto rxquantr102_loop414
  rxquantr102_done415:
    goto alt101_end412
  alt101_1416:
    add $I11, rx97_pos, 1
    gt $I11, rx97_eos, rx97_fail400
    substr $S10, rx97_tgt, rx97_pos, 1
    ne $S10, ucs4:"#", rx97_fail400
    add rx97_pos, 1
    nqp_rxmark rx97_bstack, rxquantr103_done418, rx97_pos, 0
  rxquantr103_loop417:
    ge rx97_pos, rx97_eos, rx97_fail400
    is_cclass $I11, .CCLASS_NEWLINE, rx97_tgt, rx97_pos
    if $I11, rx97_fail400
    add rx97_pos, 1
    nqp_rxpeek $I19, rx97_bstack, rxquantr103_done418
    inc $I19
    inc $I19
    set rx97_rep, rx97_bstack[$I19]
    nqp_rxcommit rx97_bstack, rxquantr103_done418
    inc rx97_rep
    nqp_rxmark rx97_bstack, rxquantr103_done418, rx97_pos, rx97_rep
    goto rxquantr103_loop417
  rxquantr103_done418:
    goto alt101_end412
  alt101_2419:
    eq rx97_pos, 0, rxanchor104_done420
    ge rx97_pos, rx97_eos, rx97_fail400
    sub $I11, rx97_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx97_tgt, $I11
    unless $I11, rx97_fail400
  rxanchor104_done420:
    repr_bind_attr_int rx97_cur, rx97_curclass, "$!pos", rx97_pos
    $P11 = rx97_cur."pod_comment"()
    repr_get_attr_int $I11, $P11, rx97_curclass, "$!pos"
    lt $I11, 0, rx97_fail400
    repr_get_attr_int rx97_pos, $P11, rx97_curclass, "$!pos"
    goto alt101_end412
  alt101_3422:
    nqp_rxmark rx97_bstack, rxquantr106_done424, -1, 0
  rxquantr106_loop423:
    ge rx97_pos, rx97_eos, rx97_fail400
    substr $S11, rx97_tgt, rx97_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx97_fail400
    inc rx97_pos
    nqp_rxpeek $I19, rx97_bstack, rxquantr106_done424
    inc $I19
    inc $I19
    set rx97_rep, rx97_bstack[$I19]
    nqp_rxcommit rx97_bstack, rxquantr106_done424
    inc rx97_rep
    nqp_rxmark rx97_bstack, rxquantr106_done424, rx97_pos, rx97_rep
    goto rxquantr106_loop423
  rxquantr106_done424:
    goto alt101_end412
  alt101_end412:
    nqp_rxpeek $I19, rx97_bstack, rxquantr100_done411
    inc $I19
    inc $I19
    set rx97_rep, rx97_bstack[$I19]
    nqp_rxcommit rx97_bstack, rxquantr100_done411
    inc rx97_rep
    nqp_rxmark rx97_bstack, rxquantr100_done411, rx97_pos, rx97_rep
    goto rxquantr100_loop410
  rxquantr100_done411:
    repr_bind_attr_int rx97_cur, rx97_curclass, "$!pos", rx97_pos
    $P11 = rx97_cur."MARKER"("ws")
    repr_get_attr_int $I11, $P11, rx97_curclass, "$!pos"
    lt $I11, 0, rx97_fail400
  alt99_end407:
    rx97_cur."!cursor_pass"(rx97_pos, "ws", 'backtrack'=>1)
    .return (rx97_cur)
  rx97_restart399:
    repr_get_attr_obj rx97_cstack, rx97_cur, rx97_curclass, "$!cstack"
  rx97_fail400:
    unless rx97_bstack, rx97_done398
    pop $I19, rx97_bstack
    if_null rx97_cstack, rx97_cstack_done403
    unless rx97_cstack, rx97_cstack_done403
    dec $I19
    set $P11, rx97_cstack[$I19]
  rx97_cstack_done403:
    pop rx97_rep, rx97_bstack
    pop rx97_pos, rx97_bstack
    pop $I19, rx97_bstack
    lt rx97_pos, -1, rx97_done398
    lt rx97_pos, 0, rx97_fail400
    eq $I19, 0, rx97_fail400
    nqp_islist $I20, rx97_cstack
    unless $I20, rx97_jump401
    elements $I18, rx97_bstack
    le $I18, 0, rx97_cut402
    dec $I18
    set $I18, rx97_bstack[$I18]
  rx97_cut402:
    assign rx97_cstack, $I18
  rx97_jump401:
    jump $I19
  rx97_done398:
    rx97_cur."!cursor_fail"()
    .return (rx97_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_38_1346968539.359_caps" :subid("cuid_memo_10_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_38_1346968539.359_alt_nfa__2_1346968540.651" :subid("cuid_memo_11_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 1
    push $P5004, $P5005
    box $P5006, 0
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 6
    push $P5008, $P5009
    box $P5010, utf8:"\n\x{b}\f\r\x{85}\u2028\u2029"
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 1
    push $P5012, $P5013
    box $P5014, 0
    push $P5012, $P5014
    box $P5015, 2
    push $P5012, $P5015
    box $P5016, 1
    push $P5012, $P5016
    box $P5017, 0
    push $P5012, $P5017
    box $P5018, 0
    push $P5012, $P5018
    push $P5002, $P5012
    push $P5001, $P5002
    new $P5019, 'ResizablePMCArray'
    new $P5020, 'ResizablePMCArray'
    push $P5019, $P5020
    new $P5021, 'ResizablePMCArray'
    box $P5022, 2
    push $P5021, $P5022
    box $P5023, 35
    push $P5021, $P5023
    box $P5024, 2
    push $P5021, $P5024
    push $P5019, $P5021
    new $P5025, 'ResizablePMCArray'
    box $P5026, 5
    push $P5025, $P5026
    box $P5027, 4096
    push $P5025, $P5027
    box $P5028, 2
    push $P5025, $P5028
    box $P5029, 1
    push $P5025, $P5029
    box $P5030, 0
    push $P5025, $P5030
    box $P5031, 0
    push $P5025, $P5031
    push $P5019, $P5025
    push $P5001, $P5019
    new $P5032, 'ResizablePMCArray'
    new $P5033, 'ResizablePMCArray'
    push $P5032, $P5033
    new $P5034, 'ResizablePMCArray'
    box $P5035, 1
    push $P5034, $P5035
    box $P5036, 0
    push $P5034, $P5036
    box $P5037, 2
    push $P5034, $P5037
    push $P5032, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 8
    push $P5038, $P5039
    box $P5040, "pod_comment"
    push $P5038, $P5040
    box $P5041, 0
    push $P5038, $P5041
    push $P5032, $P5038
    push $P5001, $P5032
    new $P5042, 'ResizablePMCArray'
    new $P5043, 'ResizablePMCArray'
    push $P5042, $P5043
    new $P5044, 'ResizablePMCArray'
    box $P5045, 1
    push $P5044, $P5045
    box $P5046, 0
    push $P5044, $P5046
    box $P5047, 2
    push $P5044, $P5047
    push $P5042, $P5044
    new $P5048, 'ResizablePMCArray'
    box $P5049, 6
    push $P5048, $P5049
    box $P5050, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5048, $P5050
    box $P5051, 3
    push $P5048, $P5051
    push $P5042, $P5048
    new $P5052, 'ResizablePMCArray'
    box $P5053, 1
    push $P5052, $P5053
    box $P5054, 0
    push $P5052, $P5054
    box $P5055, 2
    push $P5052, $P5055
    box $P5056, 1
    push $P5052, $P5056
    box $P5057, 0
    push $P5052, $P5057
    box $P5058, 0
    push $P5052, $P5058
    push $P5042, $P5052
    push $P5001, $P5042
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "unv" :subid("cuid_40_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 653
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_39_1346968539.359' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx107_tgt
    .local int rx107_pos
    .local int rx107_off
    .local int rx107_eos
    .local int rx107_rep
    .local pmc rx107_cur
    .local pmc rx107_curclass
    .local pmc rx107_bstack
    .local pmc rx107_cstack
    (rx107_cur, rx107_tgt, rx107_pos, rx107_curclass, rx107_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx107_cur
    length rx107_eos, rx107_tgt
    eq $I19, 1, rx107_restart427
    gt rx107_pos, rx107_eos, rx107_fail428
    repr_get_attr_int $I11, self, rx107_curclass, "$!from"
    ne $I11, -1, rxscan108_done434
    goto rxscan108_scan433
  rxscan108_loop432:
    inc rx107_pos
    gt rx107_pos, rx107_eos, rx107_fail428
    repr_bind_attr_int rx107_cur, rx107_curclass, "$!from", rx107_pos
  rxscan108_scan433:
    nqp_rxmark rx107_bstack, rxscan108_loop432, rx107_pos, 0
  rxscan108_done434:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt109_0436
    nqp_push_label $P11, alt109_1454
    nqp_push_label $P11, alt109_2459
    nqp_rxmark rx107_bstack, alt109_end435, -1, 0
    rx107_cur."!alt"(rx107_pos, "alt_nfa__4_1346968540.673", $P11)
    goto rx107_fail428
  alt109_0436:
    eq rx107_pos, 0, rxanchor110_done437
    ge rx107_pos, rx107_eos, rx107_fail428
    sub $I11, rx107_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx107_tgt, $I11
    unless $I11, rx107_fail428
  rxanchor110_done437:
    .const 'Sub' $P5001 = 'cuid_39_1346968539.359' 
    capture_lex $P5001
    repr_bind_attr_int rx107_cur, rx107_curclass, "$!pos", rx107_pos
    $P11 = rx107_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx107_curclass, "$!pos"
    lt $I11, 0, rx107_fail428
    repr_bind_attr_int rx107_cur, rx107_curclass, "$!pos", rx107_pos
    $P11 = rx107_cur."pod_comment"()
    repr_get_attr_int $I11, $P11, rx107_curclass, "$!pos"
    lt $I11, 0, rx107_fail428
    repr_get_attr_int rx107_pos, $P11, rx107_curclass, "$!pos"
    goto alt109_end435
  alt109_1454:
    nqp_rxmark rx107_bstack, rxquantr116_done456, rx107_pos, 0
  rxquantr116_loop455:
    ge rx107_pos, rx107_eos, rx107_fail428
    substr $S11, rx107_tgt, rx107_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx107_fail428
    inc rx107_pos
    nqp_rxpeek $I19, rx107_bstack, rxquantr116_done456
    inc $I19
    inc $I19
    set rx107_rep, rx107_bstack[$I19]
    nqp_rxcommit rx107_bstack, rxquantr116_done456
    inc rx107_rep
    nqp_rxmark rx107_bstack, rxquantr116_done456, rx107_pos, rx107_rep
    goto rxquantr116_loop455
  rxquantr116_done456:
    add $I11, rx107_pos, 1
    gt $I11, rx107_eos, rx107_fail428
    substr $S10, rx107_tgt, rx107_pos, 1
    ne $S10, ucs4:"#", rx107_fail428
    add rx107_pos, 1
    nqp_rxmark rx107_bstack, rxquantr117_done458, rx107_pos, 0
  rxquantr117_loop457:
    ge rx107_pos, rx107_eos, rx107_fail428
    is_cclass $I11, .CCLASS_NEWLINE, rx107_tgt, rx107_pos
    if $I11, rx107_fail428
    add rx107_pos, 1
    nqp_rxpeek $I19, rx107_bstack, rxquantr117_done458
    inc $I19
    inc $I19
    set rx107_rep, rx107_bstack[$I19]
    nqp_rxcommit rx107_bstack, rxquantr117_done458
    inc rx107_rep
    nqp_rxmark rx107_bstack, rxquantr117_done458, rx107_pos, rx107_rep
    goto rxquantr117_loop457
  rxquantr117_done458:
    goto alt109_end435
  alt109_2459:
    nqp_rxmark rx107_bstack, rxquantr118_done461, -1, 0
  rxquantr118_loop460:
    ge rx107_pos, rx107_eos, rx107_fail428
    substr $S11, rx107_tgt, rx107_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx107_fail428
    inc rx107_pos
    nqp_rxpeek $I19, rx107_bstack, rxquantr118_done461
    inc $I19
    inc $I19
    set rx107_rep, rx107_bstack[$I19]
    nqp_rxcommit rx107_bstack, rxquantr118_done461
    inc rx107_rep
    nqp_rxmark rx107_bstack, rxquantr118_done461, rx107_pos, rx107_rep
    goto rxquantr118_loop460
  rxquantr118_done461:
    goto alt109_end435
  alt109_end435:
    nqp_rxcommit rx107_bstack, alt109_end435
    rx107_cur."!cursor_pass"(rx107_pos, "unv", 'backtrack'=>1)
    .return (rx107_cur)
  rx107_restart427:
    repr_get_attr_obj rx107_cstack, rx107_cur, rx107_curclass, "$!cstack"
  rx107_fail428:
    unless rx107_bstack, rx107_done426
    pop $I19, rx107_bstack
    if_null rx107_cstack, rx107_cstack_done431
    unless rx107_cstack, rx107_cstack_done431
    dec $I19
    set $P11, rx107_cstack[$I19]
  rx107_cstack_done431:
    pop rx107_rep, rx107_bstack
    pop rx107_pos, rx107_bstack
    pop $I19, rx107_bstack
    lt rx107_pos, -1, rx107_done426
    lt rx107_pos, 0, rx107_fail428
    eq $I19, 0, rx107_fail428
    nqp_islist $I20, rx107_cstack
    unless $I20, rx107_jump429
    elements $I18, rx107_bstack
    le $I18, 0, rx107_cut430
    dec $I18
    set $I18, rx107_bstack[$I18]
  rx107_cut430:
    assign rx107_cstack, $I18
  rx107_jump429:
    jump $I19
  rx107_done426:
    rx107_cur."!cursor_fail"()
    .return (rx107_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_40_1346968539.359_caps" :subid("cuid_memo_12_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_40_1346968539.359_nfa" :subid("cuid_memo_13_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    box $P5007, 6
    push $P5003, $P5007
    box $P5008, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5003, $P5008
    box $P5009, 1
    push $P5003, $P5009
    box $P5010, 1
    push $P5003, $P5010
    box $P5011, 0
    push $P5003, $P5011
    box $P5012, 6
    push $P5003, $P5012
    box $P5013, 1
    push $P5003, $P5013
    box $P5014, 0
    push $P5003, $P5014
    box $P5015, 8
    push $P5003, $P5015
    push $P5001, $P5003
    new $P5016, 'ResizablePMCArray'
    box $P5017, 6
    push $P5016, $P5017
    box $P5018, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5016, $P5018
    box $P5019, 2
    push $P5016, $P5019
    box $P5020, 1
    push $P5016, $P5020
    box $P5021, 0
    push $P5016, $P5021
    box $P5022, 4
    push $P5016, $P5022
    push $P5001, $P5016
    new $P5023, 'ResizablePMCArray'
    box $P5024, 0
    push $P5023, $P5024
    box $P5025, 0
    push $P5023, $P5025
    box $P5026, 0
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 2
    push $P5027, $P5028
    box $P5029, 61
    push $P5027, $P5029
    box $P5030, 5
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 4
    push $P5031, $P5032
    box $P5033, 8192
    push $P5031, $P5033
    box $P5034, 3
    push $P5031, $P5034
    box $P5035, 2
    push $P5031, $P5035
    box $P5036, 92
    push $P5031, $P5036
    box $P5037, 3
    push $P5031, $P5037
    push $P5001, $P5031
    new $P5038, 'ResizablePMCArray'
    box $P5039, 2
    push $P5038, $P5039
    box $P5040, 35
    push $P5038, $P5040
    box $P5041, 7
    push $P5038, $P5041
    push $P5001, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 5
    push $P5042, $P5043
    box $P5044, 4096
    push $P5042, $P5044
    box $P5045, 7
    push $P5042, $P5045
    box $P5046, 1
    push $P5042, $P5046
    box $P5047, 0
    push $P5042, $P5047
    box $P5048, 0
    push $P5042, $P5048
    push $P5001, $P5042
    new $P5049, 'ResizablePMCArray'
    box $P5050, 6
    push $P5049, $P5050
    box $P5051, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5049, $P5051
    box $P5052, 9
    push $P5049, $P5052
    push $P5001, $P5049
    new $P5053, 'ResizablePMCArray'
    box $P5054, 1
    push $P5053, $P5054
    box $P5055, 0
    push $P5053, $P5055
    box $P5056, 8
    push $P5053, $P5056
    box $P5057, 1
    push $P5053, $P5057
    box $P5058, 0
    push $P5053, $P5058
    box $P5059, 0
    push $P5053, $P5059
    push $P5001, $P5053
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_40_1346968539.359_alt_nfa__4_1346968540.673" :subid("cuid_memo_14_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 1
    push $P5004, $P5005
    box $P5006, 0
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 6
    push $P5008, $P5009
    box $P5010, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5008, $P5010
    box $P5011, 2
    push $P5008, $P5011
    box $P5012, 1
    push $P5008, $P5012
    box $P5013, 0
    push $P5008, $P5013
    box $P5014, 4
    push $P5008, $P5014
    push $P5002, $P5008
    new $P5015, 'ResizablePMCArray'
    box $P5016, 0
    push $P5015, $P5016
    box $P5017, 0
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5002, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 61
    push $P5019, $P5021
    box $P5022, 5
    push $P5019, $P5022
    push $P5002, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 4
    push $P5023, $P5024
    box $P5025, 8192
    push $P5023, $P5025
    box $P5026, 3
    push $P5023, $P5026
    box $P5027, 2
    push $P5023, $P5027
    box $P5028, 92
    push $P5023, $P5028
    box $P5029, 3
    push $P5023, $P5029
    push $P5002, $P5023
    push $P5001, $P5002
    new $P5030, 'ResizablePMCArray'
    new $P5031, 'ResizablePMCArray'
    push $P5030, $P5031
    new $P5032, 'ResizablePMCArray'
    box $P5033, 6
    push $P5032, $P5033
    box $P5034, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5032, $P5034
    box $P5035, 1
    push $P5032, $P5035
    box $P5036, 1
    push $P5032, $P5036
    box $P5037, 0
    push $P5032, $P5037
    box $P5038, 2
    push $P5032, $P5038
    push $P5030, $P5032
    new $P5039, 'ResizablePMCArray'
    box $P5040, 2
    push $P5039, $P5040
    box $P5041, 35
    push $P5039, $P5041
    box $P5042, 3
    push $P5039, $P5042
    push $P5030, $P5039
    new $P5043, 'ResizablePMCArray'
    box $P5044, 5
    push $P5043, $P5044
    box $P5045, 4096
    push $P5043, $P5045
    box $P5046, 3
    push $P5043, $P5046
    box $P5047, 1
    push $P5043, $P5047
    box $P5048, 0
    push $P5043, $P5048
    box $P5049, 0
    push $P5043, $P5049
    push $P5030, $P5043
    push $P5001, $P5030
    new $P5050, 'ResizablePMCArray'
    new $P5051, 'ResizablePMCArray'
    push $P5050, $P5051
    new $P5052, 'ResizablePMCArray'
    box $P5053, 1
    push $P5052, $P5053
    box $P5054, 0
    push $P5052, $P5054
    box $P5055, 2
    push $P5052, $P5055
    push $P5050, $P5052
    new $P5056, 'ResizablePMCArray'
    box $P5057, 6
    push $P5056, $P5057
    box $P5058, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5056, $P5058
    box $P5059, 3
    push $P5056, $P5059
    push $P5050, $P5056
    new $P5060, 'ResizablePMCArray'
    box $P5061, 1
    push $P5060, $P5061
    box $P5062, 0
    push $P5060, $P5062
    box $P5063, 2
    push $P5060, $P5063
    box $P5064, 1
    push $P5060, $P5064
    box $P5065, 0
    push $P5060, $P5065
    box $P5066, 0
    push $P5060, $P5066
    push $P5050, $P5060
    push $P5001, $P5050
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_39_1346968539.359") :anon :lex :outer("cuid_40_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx111_tgt
    .local int rx111_pos
    .local int rx111_off
    .local int rx111_eos
    .local int rx111_rep
    .local pmc rx111_cur
    .local pmc rx111_curclass
    .local pmc rx111_bstack
    .local pmc rx111_cstack
    (rx111_cur, rx111_tgt, rx111_pos, rx111_curclass, rx111_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx111_cur
    length rx111_eos, rx111_tgt
    eq $I19, 1, rx111_restart440
    gt rx111_pos, rx111_eos, rx111_fail441
    repr_get_attr_int $I11, self, rx111_curclass, "$!from"
    ne $I11, -1, rxscan112_done447
    goto rxscan112_scan446
  rxscan112_loop445:
    inc rx111_pos
    gt rx111_pos, rx111_eos, rx111_fail441
    repr_bind_attr_int rx111_cur, rx111_curclass, "$!from", rx111_pos
  rxscan112_scan446:
    nqp_rxmark rx111_bstack, rxscan112_loop445, rx111_pos, 0
  rxscan112_done447:
    nqp_rxmark rx111_bstack, rxquantr113_done449, rx111_pos, 0
  rxquantr113_loop448:
    ge rx111_pos, rx111_eos, rx111_fail441
    substr $S11, rx111_tgt, rx111_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx111_fail441
    inc rx111_pos
    nqp_rxpeek $I19, rx111_bstack, rxquantr113_done449
    inc $I19
    inc $I19
    set rx111_rep, rx111_bstack[$I19]
    nqp_rxcommit rx111_bstack, rxquantr113_done449
    inc rx111_rep
    nqp_rxmark rx111_bstack, rxquantr113_done449, rx111_pos, rx111_rep
    goto rxquantr113_loop448
  rxquantr113_done449:
    add $I11, rx111_pos, 1
    gt $I11, rx111_eos, rx111_fail441
    substr $S10, rx111_tgt, rx111_pos, 1
    ne $S10, ucs4:"=", rx111_fail441
    add rx111_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt114_0451
    nqp_push_label $P11, alt114_1452
    nqp_rxmark rx111_bstack, alt114_end450, -1, 0
    rx111_cur."!alt"(rx111_pos, "alt_nfa__3_1346968540.662", $P11)
    goto rx111_fail441
  alt114_0451:
    ge rx111_pos, rx111_eos, rx111_fail441
    is_cclass $I11, .CCLASS_WORD, rx111_tgt, rx111_pos
    unless $I11, rx111_fail441
    add rx111_pos, 1
    goto alt114_end450
  alt114_1452:
    add $I11, rx111_pos, 1
    gt $I11, rx111_eos, rx111_fail441
    substr $S10, rx111_tgt, rx111_pos, 1
    ne $S10, ucs4:"\\", rx111_fail441
    add rx111_pos, 1
    goto alt114_end450
  alt114_end450:
    nqp_rxcommit rx111_bstack, alt114_end450
    rx111_cur."!cursor_pass"(rx111_pos, 'backtrack'=>1)
    .return (rx111_cur)
  rx111_restart440:
    repr_get_attr_obj rx111_cstack, rx111_cur, rx111_curclass, "$!cstack"
  rx111_fail441:
    unless rx111_bstack, rx111_done439
    pop $I19, rx111_bstack
    if_null rx111_cstack, rx111_cstack_done444
    unless rx111_cstack, rx111_cstack_done444
    dec $I19
    set $P11, rx111_cstack[$I19]
  rx111_cstack_done444:
    pop rx111_rep, rx111_bstack
    pop rx111_pos, rx111_bstack
    pop $I19, rx111_bstack
    lt rx111_pos, -1, rx111_done439
    lt rx111_pos, 0, rx111_fail441
    eq $I19, 0, rx111_fail441
    nqp_islist $I20, rx111_cstack
    unless $I20, rx111_jump442
    elements $I18, rx111_bstack
    le $I18, 0, rx111_cut443
    dec $I18
    set $I18, rx111_bstack[$I18]
  rx111_cut443:
    assign rx111_cstack, $I18
  rx111_jump442:
    jump $I19
  rx111_done439:
    rx111_cur."!cursor_fail"()
    .return (rx111_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_39_1346968539.359_caps" :subid("cuid_memo_15_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_39_1346968539.359_nfa" :subid("cuid_memo_16_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5003, $P5005
    box $P5006, 1
    push $P5003, $P5006
    box $P5007, 1
    push $P5003, $P5007
    box $P5008, 0
    push $P5003, $P5008
    box $P5009, 2
    push $P5003, $P5009
    push $P5001, $P5003
    new $P5010, 'ResizablePMCArray'
    box $P5011, 2
    push $P5010, $P5011
    box $P5012, 61
    push $P5010, $P5012
    box $P5013, 3
    push $P5010, $P5013
    push $P5001, $P5010
    new $P5014, 'ResizablePMCArray'
    box $P5015, 4
    push $P5014, $P5015
    box $P5016, 8192
    push $P5014, $P5016
    box $P5017, 0
    push $P5014, $P5017
    box $P5018, 2
    push $P5014, $P5018
    box $P5019, 92
    push $P5014, $P5019
    box $P5020, 0
    push $P5014, $P5020
    push $P5001, $P5014
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_39_1346968539.359_alt_nfa__3_1346968540.662" :subid("cuid_memo_17_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 4
    push $P5004, $P5005
    box $P5006, 8192
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 2
    push $P5010, $P5011
    box $P5012, 92
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    push $P5008, $P5010
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "pod_comment" :subid("cuid_42_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 662
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_41_1346968539.359' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx119_tgt
    .local int rx119_pos
    .local int rx119_off
    .local int rx119_eos
    .local int rx119_rep
    .local pmc rx119_cur
    .local pmc rx119_curclass
    .local pmc rx119_bstack
    .local pmc rx119_cstack
    (rx119_cur, rx119_tgt, rx119_pos, rx119_curclass, rx119_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx119_cur
    length rx119_eos, rx119_tgt
    eq $I19, 1, rx119_restart464
    gt rx119_pos, rx119_eos, rx119_fail465
    repr_get_attr_int $I11, self, rx119_curclass, "$!from"
    ne $I11, -1, rxscan120_done471
    goto rxscan120_scan470
  rxscan120_loop469:
    inc rx119_pos
    gt rx119_pos, rx119_eos, rx119_fail465
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!from", rx119_pos
  rxscan120_scan470:
    nqp_rxmark rx119_bstack, rxscan120_loop469, rx119_pos, 0
  rxscan120_done471:
    eq rx119_pos, 0, rxanchor121_done472
    ge rx119_pos, rx119_eos, rx119_fail465
    sub $I11, rx119_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, $I11
    unless $I11, rx119_fail465
  rxanchor121_done472:
    nqp_rxmark rx119_bstack, rxquantr122_done474, rx119_pos, 0
  rxquantr122_loop473:
    ge rx119_pos, rx119_eos, rx119_fail465
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail465
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr122_done474
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr122_done474
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr122_done474, rx119_pos, rx119_rep
    goto rxquantr122_loop473
  rxquantr122_done474:
    add $I11, rx119_pos, 1
    gt $I11, rx119_eos, rx119_fail465
    substr $S10, rx119_tgt, rx119_pos, 1
    ne $S10, ucs4:"=", rx119_fail465
    add rx119_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt123_0476
    nqp_push_label $P11, alt123_1495
    nqp_push_label $P11, alt123_2514
    nqp_push_label $P11, alt123_3536
    nqp_push_label $P11, alt123_4561
    nqp_rxmark rx119_bstack, alt123_end475, -1, 0
    rx119_cur."!alt"(rx119_pos, "alt_nfa__6_1346968540.763", $P11)
    goto rx119_fail465
  alt123_0476:
    add $I11, rx119_pos, 5
    gt $I11, rx119_eos, rx119_fail465
    substr $S10, rx119_tgt, rx119_pos, 5
    ne $S10, ucs4:"begin", rx119_fail465
    add rx119_pos, 5
    nqp_rxmark rx119_bstack, rxquantr124_done478, -1, 0
  rxquantr124_loop477:
    ge rx119_pos, rx119_eos, rx119_fail465
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail465
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr124_done478
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr124_done478
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr124_done478, rx119_pos, rx119_rep
    goto rxquantr124_loop477
  rxquantr124_done478:
    add $I11, rx119_pos, 3
    gt $I11, rx119_eos, rx119_fail465
    substr $S10, rx119_tgt, rx119_pos, 3
    ne $S10, ucs4:"END", rx119_fail465
    add rx119_pos, 3
    le rx119_pos, 0, rx119_fail465
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, rx119_pos
    if $I11, rx119_fail465
    sub $I11, rx119_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, $I11
    unless $I11, rx119_fail465
  alt126_0481:
    nqp_rxmark rx119_bstack, alt126_1492, rx119_pos, 0
    set rx119_rep, 0
    nqp_rxmark rx119_bstack, rxquantf127_loop482, rx119_pos, rx119_rep
    goto rxquantf127_done483
  rxquantf127_loop482:
    set $I12, rx119_rep
    ge rx119_pos, rx119_eos, rx119_fail465
    add rx119_pos, 1
    set rx119_rep, $I12
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantf127_loop482, rx119_pos, rx119_rep
  rxquantf127_done483:
    ge rx119_pos, rx119_eos, rx119_fail465
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, rx119_pos
    unless $I11, rx119_fail465
    substr $S10, rx119_tgt, rx119_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx119_pos, $I11
    add rx119_pos, 1
    nqp_rxmark rx119_bstack, rxquantr128_done486, rx119_pos, 0
  rxquantr128_loop485:
    ge rx119_pos, rx119_eos, rx119_fail465
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail465
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr128_done486
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr128_done486
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr128_done486, rx119_pos, rx119_rep
    goto rxquantr128_loop485
  rxquantr128_done486:
    add $I11, rx119_pos, 4
    gt $I11, rx119_eos, rx119_fail465
    substr $S10, rx119_tgt, rx119_pos, 4
    ne $S10, ucs4:"=end", rx119_fail465
    add rx119_pos, 4
    nqp_rxmark rx119_bstack, rxquantr129_done488, -1, 0
  rxquantr129_loop487:
    ge rx119_pos, rx119_eos, rx119_fail465
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail465
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr129_done488
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr129_done488
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr129_done488, rx119_pos, rx119_rep
    goto rxquantr129_loop487
  rxquantr129_done488:
    add $I11, rx119_pos, 3
    gt $I11, rx119_eos, rx119_fail465
    substr $S10, rx119_tgt, rx119_pos, 3
    ne $S10, ucs4:"END", rx119_fail465
    add rx119_pos, 3
    le rx119_pos, 0, rx119_fail465
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, rx119_pos
    if $I11, rx119_fail465
    sub $I11, rx119_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, $I11
    unless $I11, rx119_fail465
    nqp_rxmark rx119_bstack, rxquantr131_done491, rx119_pos, 0
  rxquantr131_loop490:
    ge rx119_pos, rx119_eos, rx119_fail465
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, rx119_pos
    if $I11, rx119_fail465
    add rx119_pos, 1
    nqp_rxpeek $I19, rx119_bstack, rxquantr131_done491
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr131_done491
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr131_done491, rx119_pos, rx119_rep
    goto rxquantr131_loop490
  rxquantr131_done491:
    goto alt126_end480
  alt126_1492:
    nqp_rxmark rx119_bstack, rxquantr132_done494, rx119_pos, 0
  rxquantr132_loop493:
    ge rx119_pos, rx119_eos, rx119_fail465
    add rx119_pos, 1
    nqp_rxpeek $I19, rx119_bstack, rxquantr132_done494
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr132_done494
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr132_done494, rx119_pos, rx119_rep
    goto rxquantr132_loop493
  rxquantr132_done494:
  alt126_end480:
    goto alt123_end475
  alt123_1495:
    add $I11, rx119_pos, 5
    gt $I11, rx119_eos, rx119_fail465
    substr $S10, rx119_tgt, rx119_pos, 5
    ne $S10, ucs4:"begin", rx119_fail465
    add rx119_pos, 5
    nqp_rxmark rx119_bstack, rxquantr133_done497, -1, 0
  rxquantr133_loop496:
    ge rx119_pos, rx119_eos, rx119_fail465
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail465
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr133_done497
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr133_done497
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr133_done497, rx119_pos, rx119_rep
    goto rxquantr133_loop496
  rxquantr133_done497:
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail465
    nqp_rxmark rx119_bstack, rxsubrule134_pass498, -1, 0
  rxsubrule134_pass498:
    rx119_cstack = rx119_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx119_pos, $P11, rx119_curclass, "$!pos"
  alt135_0500:
    nqp_rxmark rx119_bstack, alt135_1512, rx119_pos, 0
    set rx119_rep, 0
    nqp_rxmark rx119_bstack, rxquantf136_loop501, rx119_pos, rx119_rep
    goto rxquantf136_done502
  rxquantf136_loop501:
    set $I12, rx119_rep
    ge rx119_pos, rx119_eos, rx119_fail465
    add rx119_pos, 1
    set rx119_rep, $I12
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantf136_loop501, rx119_pos, rx119_rep
  rxquantf136_done502:
    ge rx119_pos, rx119_eos, rx119_fail465
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, rx119_pos
    unless $I11, rx119_fail465
    substr $S10, rx119_tgt, rx119_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx119_pos, $I11
    add rx119_pos, 1
    nqp_rxmark rx119_bstack, rxquantr137_done505, rx119_pos, 0
  rxquantr137_loop504:
    ge rx119_pos, rx119_eos, rx119_fail465
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail465
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr137_done505
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr137_done505
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr137_done505, rx119_pos, rx119_rep
    goto rxquantr137_loop504
  rxquantr137_done505:
    add $I11, rx119_pos, 4
    gt $I11, rx119_eos, rx119_fail465
    substr $S10, rx119_tgt, rx119_pos, 4
    ne $S10, ucs4:"=end", rx119_fail465
    add rx119_pos, 4
    nqp_rxmark rx119_bstack, rxquantr138_done507, -1, 0
  rxquantr138_loop506:
    ge rx119_pos, rx119_eos, rx119_fail465
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail465
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr138_done507
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr138_done507
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr138_done507, rx119_pos, rx119_rep
    goto rxquantr138_loop506
  rxquantr138_done507:
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."!BACKREF"("identifier")
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail465
    repr_get_attr_int rx119_pos, $P11, rx119_curclass, "$!pos"
    le rx119_pos, 0, rx119_fail465
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, rx119_pos
    if $I11, rx119_fail465
    sub $I11, rx119_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, $I11
    unless $I11, rx119_fail465
    nqp_rxmark rx119_bstack, rxquantr141_done511, rx119_pos, 0
  rxquantr141_loop510:
    ge rx119_pos, rx119_eos, rx119_fail465
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, rx119_pos
    if $I11, rx119_fail465
    add rx119_pos, 1
    nqp_rxpeek $I19, rx119_bstack, rxquantr141_done511
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr141_done511
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr141_done511, rx119_pos, rx119_rep
    goto rxquantr141_loop510
  rxquantr141_done511:
    goto alt135_end499
  alt135_1512:
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."panic"("=begin without matching =end")
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail465
    repr_get_attr_int rx119_pos, $P11, rx119_curclass, "$!pos"
  alt135_end499:
    goto alt123_end475
  alt123_2514:
    add $I11, rx119_pos, 5
    gt $I11, rx119_eos, rx119_fail465
    substr $S10, rx119_tgt, rx119_pos, 5
    ne $S10, ucs4:"begin", rx119_fail465
    add rx119_pos, 5
    le rx119_pos, 0, rx119_fail465
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, rx119_pos
    if $I11, rx119_fail465
    sub $I11, rx119_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, $I11
    unless $I11, rx119_fail465
    nqp_rxmark rx119_bstack, rxquantr144_done517, rx119_pos, 0
  rxquantr144_loop516:
    ge rx119_pos, rx119_eos, rx119_fail465
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail465
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr144_done517
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr144_done517
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr144_done517, rx119_pos, rx119_rep
    goto rxquantr144_loop516
  rxquantr144_done517:
  alt145_0519:
    nqp_rxmark rx119_bstack, alt145_1521, rx119_pos, 0
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, rx119_pos
    if $I11, rxanchor146_done520
    ne rx119_pos, rx119_eos, rx119_fail465
    eq rx119_pos, 0, rxanchor146_done520
    sub $I11, rx119_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, $I11
    if $I11, rx119_fail465
  rxanchor146_done520:
    goto alt145_end518
  alt145_1521:
    nqp_rxmark rx119_bstack, alt145_2522, rx119_pos, 0
    add $I11, rx119_pos, 1
    gt $I11, rx119_eos, rx119_fail465
    substr $S10, rx119_tgt, rx119_pos, 1
    ne $S10, ucs4:"#", rx119_fail465
    add rx119_pos, 1
    goto alt145_end518
  alt145_2522:
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."panic"("Unrecognized token after =begin")
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail465
    repr_get_attr_int rx119_pos, $P11, rx119_curclass, "$!pos"
  alt145_end518:
  alt148_0525:
    nqp_rxmark rx119_bstack, alt148_1534, rx119_pos, 0
    set rx119_rep, 0
    nqp_rxmark rx119_bstack, rxquantf149_loop526, rx119_pos, rx119_rep
    goto rxquantf149_done527
  rxquantf149_loop526:
    set $I12, rx119_rep
    ge rx119_pos, rx119_eos, rx119_fail465
    add rx119_pos, 1
    set rx119_rep, $I12
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantf149_loop526, rx119_pos, rx119_rep
  rxquantf149_done527:
    ge rx119_pos, rx119_eos, rx119_fail465
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, rx119_pos
    unless $I11, rx119_fail465
    substr $S10, rx119_tgt, rx119_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx119_pos, $I11
    add rx119_pos, 1
    nqp_rxmark rx119_bstack, rxquantr150_done530, rx119_pos, 0
  rxquantr150_loop529:
    ge rx119_pos, rx119_eos, rx119_fail465
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail465
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr150_done530
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr150_done530
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr150_done530, rx119_pos, rx119_rep
    goto rxquantr150_loop529
  rxquantr150_done530:
    add $I11, rx119_pos, 4
    gt $I11, rx119_eos, rx119_fail465
    substr $S10, rx119_tgt, rx119_pos, 4
    ne $S10, ucs4:"=end", rx119_fail465
    add rx119_pos, 4
    le rx119_pos, 0, rx119_fail465
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, rx119_pos
    if $I11, rx119_fail465
    sub $I11, rx119_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, $I11
    unless $I11, rx119_fail465
    nqp_rxmark rx119_bstack, rxquantr152_done533, rx119_pos, 0
  rxquantr152_loop532:
    ge rx119_pos, rx119_eos, rx119_fail465
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, rx119_pos
    if $I11, rx119_fail465
    add rx119_pos, 1
    nqp_rxpeek $I19, rx119_bstack, rxquantr152_done533
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr152_done533
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr152_done533, rx119_pos, rx119_rep
    goto rxquantr152_loop532
  rxquantr152_done533:
    goto alt148_end524
  alt148_1534:
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."panic"("=begin without matching =end")
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail465
    repr_get_attr_int rx119_pos, $P11, rx119_curclass, "$!pos"
  alt148_end524:
    goto alt123_end475
  alt123_3536:
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail465
    nqp_rxmark rx119_bstack, rxsubrule154_pass537, -1, 0
  rxsubrule154_pass537:
    rx119_cstack = rx119_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx119_pos, $P11, rx119_curclass, "$!pos"
    set rx119_rep, 0
    nqp_rxmark rx119_bstack, rxquantf155_loop538, rx119_pos, rx119_rep
    goto rxquantf155_done539
  rxquantf155_loop538:
    set $I12, rx119_rep
    ge rx119_pos, rx119_eos, rx119_fail465
    add rx119_pos, 1
    set rx119_rep, $I12
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantf155_loop538, rx119_pos, rx119_rep
  rxquantf155_done539:
    eq rx119_pos, 0, rxanchor156_done541
    ge rx119_pos, rx119_eos, rx119_fail465
    sub $I11, rx119_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, $I11
    unless $I11, rx119_fail465
  rxanchor156_done541:
    .const 'Sub' $P5001 = 'cuid_41_1346968539.359' 
    capture_lex $P5001
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail465
    goto alt123_end475
  alt123_4561:
  alt164_0563:
    nqp_rxmark rx119_bstack, alt164_1564, rx119_pos, 0
    ge rx119_pos, rx119_eos, rx119_fail465
    is_cclass $I11, .CCLASS_WHITESPACE, rx119_tgt, rx119_pos
    unless $I11, rx119_fail465
    add rx119_pos, 1
    goto alt164_end562
  alt164_1564:
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."panic"("Illegal pod directive")
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail465
    repr_get_attr_int rx119_pos, $P11, rx119_curclass, "$!pos"
  alt164_end562:
    nqp_rxmark rx119_bstack, rxquantr166_done567, rx119_pos, 0
  rxquantr166_loop566:
    ge rx119_pos, rx119_eos, rx119_fail465
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, rx119_pos
    if $I11, rx119_fail465
    add rx119_pos, 1
    nqp_rxpeek $I19, rx119_bstack, rxquantr166_done567
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr166_done567
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr166_done567, rx119_pos, rx119_rep
    goto rxquantr166_loop566
  rxquantr166_done567:
    goto alt123_end475
  alt123_end475:
    nqp_rxcommit rx119_bstack, alt123_end475
    rx119_cur."!cursor_pass"(rx119_pos, "pod_comment", 'backtrack'=>1)
    .return (rx119_cur)
  rx119_restart464:
    repr_get_attr_obj rx119_cstack, rx119_cur, rx119_curclass, "$!cstack"
  rx119_fail465:
    unless rx119_bstack, rx119_done463
    pop $I19, rx119_bstack
    if_null rx119_cstack, rx119_cstack_done468
    unless rx119_cstack, rx119_cstack_done468
    dec $I19
    set $P11, rx119_cstack[$I19]
  rx119_cstack_done468:
    pop rx119_rep, rx119_bstack
    pop rx119_pos, rx119_bstack
    pop $I19, rx119_bstack
    lt rx119_pos, -1, rx119_done463
    lt rx119_pos, 0, rx119_fail465
    eq $I19, 0, rx119_fail465
    nqp_islist $I20, rx119_cstack
    unless $I20, rx119_jump466
    elements $I18, rx119_bstack
    le $I18, 0, rx119_cut467
    dec $I18
    set $I18, rx119_bstack[$I18]
  rx119_cut467:
    assign rx119_cstack, $I18
  rx119_jump466:
    jump $I19
  rx119_done463:
    rx119_cur."!cursor_fail"()
    .return (rx119_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_42_1346968539.359_caps" :subid("cuid_memo_18_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["identifier"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_42_1346968539.359_nfa" :subid("cuid_memo_19_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 6
    push $P5007, $P5008
    box $P5009, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5007, $P5009
    box $P5010, 2
    push $P5007, $P5010
    box $P5011, 1
    push $P5007, $P5011
    box $P5012, 0
    push $P5007, $P5012
    box $P5013, 3
    push $P5007, $P5013
    push $P5001, $P5007
    new $P5014, 'ResizablePMCArray'
    box $P5015, 2
    push $P5014, $P5015
    box $P5016, 61
    push $P5014, $P5016
    box $P5017, 4
    push $P5014, $P5017
    push $P5001, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 2
    push $P5018, $P5019
    box $P5020, 98
    push $P5018, $P5020
    box $P5021, 5
    push $P5018, $P5021
    box $P5022, 2
    push $P5018, $P5022
    box $P5023, 98
    push $P5018, $P5023
    box $P5024, 17
    push $P5018, $P5024
    box $P5025, 2
    push $P5018, $P5025
    box $P5026, 98
    push $P5018, $P5026
    box $P5027, 26
    push $P5018, $P5027
    box $P5028, 8
    push $P5018, $P5028
    box $P5029, "identifier"
    push $P5018, $P5029
    box $P5030, 33
    push $P5018, $P5030
    box $P5031, 0
    push $P5018, $P5031
    box $P5032, 0
    push $P5018, $P5032
    box $P5033, 0
    push $P5018, $P5033
    push $P5001, $P5018
    new $P5034, 'ResizablePMCArray'
    box $P5035, 2
    push $P5034, $P5035
    box $P5036, 101
    push $P5034, $P5036
    box $P5037, 6
    push $P5034, $P5037
    push $P5001, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 2
    push $P5038, $P5039
    box $P5040, 103
    push $P5038, $P5040
    box $P5041, 7
    push $P5038, $P5041
    push $P5001, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 105
    push $P5042, $P5044
    box $P5045, 8
    push $P5042, $P5045
    push $P5001, $P5042
    new $P5046, 'ResizablePMCArray'
    box $P5047, 2
    push $P5046, $P5047
    box $P5048, 110
    push $P5046, $P5048
    box $P5049, 9
    push $P5046, $P5049
    push $P5001, $P5046
    new $P5050, 'ResizablePMCArray'
    box $P5051, 1
    push $P5050, $P5051
    box $P5052, 0
    push $P5050, $P5052
    box $P5053, 10
    push $P5050, $P5053
    push $P5001, $P5050
    new $P5054, 'ResizablePMCArray'
    box $P5055, 6
    push $P5054, $P5055
    box $P5056, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5054, $P5056
    box $P5057, 11
    push $P5054, $P5057
    push $P5001, $P5054
    new $P5058, 'ResizablePMCArray'
    box $P5059, 1
    push $P5058, $P5059
    box $P5060, 0
    push $P5058, $P5060
    box $P5061, 10
    push $P5058, $P5061
    box $P5062, 1
    push $P5058, $P5062
    box $P5063, 0
    push $P5058, $P5063
    box $P5064, 12
    push $P5058, $P5064
    box $P5065, 2
    push $P5058, $P5065
    box $P5066, 69
    push $P5058, $P5066
    box $P5067, 13
    push $P5058, $P5067
    push $P5001, $P5058
    new $P5068, 'ResizablePMCArray'
    push $P5001, $P5068
    new $P5069, 'ResizablePMCArray'
    box $P5070, 2
    push $P5069, $P5070
    box $P5071, 78
    push $P5069, $P5071
    box $P5072, 14
    push $P5069, $P5072
    push $P5001, $P5069
    new $P5073, 'ResizablePMCArray'
    box $P5074, 2
    push $P5073, $P5074
    box $P5075, 68
    push $P5073, $P5075
    box $P5076, 15
    push $P5073, $P5076
    push $P5001, $P5073
    new $P5077, 'ResizablePMCArray'
    box $P5078, 1
    push $P5077, $P5078
    box $P5079, 0
    push $P5077, $P5079
    box $P5080, 16
    push $P5077, $P5080
    push $P5001, $P5077
    new $P5081, 'ResizablePMCArray'
    box $P5082, 0
    push $P5081, $P5082
    box $P5083, 0
    push $P5081, $P5083
    box $P5084, 0
    push $P5081, $P5084
    push $P5001, $P5081
    new $P5085, 'ResizablePMCArray'
    box $P5086, 2
    push $P5085, $P5086
    box $P5087, 101
    push $P5085, $P5087
    box $P5088, 18
    push $P5085, $P5088
    push $P5001, $P5085
    new $P5089, 'ResizablePMCArray'
    box $P5090, 2
    push $P5089, $P5090
    box $P5091, 103
    push $P5089, $P5091
    box $P5092, 19
    push $P5089, $P5092
    push $P5001, $P5089
    new $P5093, 'ResizablePMCArray'
    box $P5094, 2
    push $P5093, $P5094
    box $P5095, 105
    push $P5093, $P5095
    box $P5096, 20
    push $P5093, $P5096
    push $P5001, $P5093
    new $P5097, 'ResizablePMCArray'
    box $P5098, 2
    push $P5097, $P5098
    box $P5099, 110
    push $P5097, $P5099
    box $P5100, 21
    push $P5097, $P5100
    push $P5001, $P5097
    new $P5101, 'ResizablePMCArray'
    box $P5102, 1
    push $P5101, $P5102
    box $P5103, 0
    push $P5101, $P5103
    box $P5104, 22
    push $P5101, $P5104
    push $P5001, $P5101
    new $P5105, 'ResizablePMCArray'
    box $P5106, 6
    push $P5105, $P5106
    box $P5107, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5105, $P5107
    box $P5108, 23
    push $P5105, $P5108
    push $P5001, $P5105
    new $P5109, 'ResizablePMCArray'
    box $P5110, 1
    push $P5109, $P5110
    box $P5111, 0
    push $P5109, $P5111
    box $P5112, 22
    push $P5109, $P5112
    box $P5113, 1
    push $P5109, $P5113
    box $P5114, 0
    push $P5109, $P5114
    box $P5115, 24
    push $P5109, $P5115
    box $P5116, 8
    push $P5109, $P5116
    box $P5117, "identifier"
    push $P5109, $P5117
    box $P5118, 25
    push $P5109, $P5118
    push $P5001, $P5109
    new $P5119, 'ResizablePMCArray'
    push $P5001, $P5119
    new $P5120, 'ResizablePMCArray'
    box $P5121, 0
    push $P5120, $P5121
    box $P5122, 0
    push $P5120, $P5122
    box $P5123, 0
    push $P5120, $P5123
    push $P5001, $P5120
    new $P5124, 'ResizablePMCArray'
    box $P5125, 2
    push $P5124, $P5125
    box $P5126, 101
    push $P5124, $P5126
    box $P5127, 27
    push $P5124, $P5127
    push $P5001, $P5124
    new $P5128, 'ResizablePMCArray'
    box $P5129, 2
    push $P5128, $P5129
    box $P5130, 103
    push $P5128, $P5130
    box $P5131, 28
    push $P5128, $P5131
    push $P5001, $P5128
    new $P5132, 'ResizablePMCArray'
    box $P5133, 2
    push $P5132, $P5133
    box $P5134, 105
    push $P5132, $P5134
    box $P5135, 29
    push $P5132, $P5135
    push $P5001, $P5132
    new $P5136, 'ResizablePMCArray'
    box $P5137, 2
    push $P5136, $P5137
    box $P5138, 110
    push $P5136, $P5138
    box $P5139, 30
    push $P5136, $P5139
    push $P5001, $P5136
    new $P5140, 'ResizablePMCArray'
    box $P5141, 1
    push $P5140, $P5141
    box $P5142, 0
    push $P5140, $P5142
    box $P5143, 31
    push $P5140, $P5143
    push $P5001, $P5140
    new $P5144, 'ResizablePMCArray'
    box $P5145, 6
    push $P5144, $P5145
    box $P5146, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5144, $P5146
    box $P5147, 31
    push $P5144, $P5147
    box $P5148, 1
    push $P5144, $P5148
    box $P5149, 0
    push $P5144, $P5149
    box $P5150, 32
    push $P5144, $P5150
    push $P5001, $P5144
    new $P5151, 'ResizablePMCArray'
    box $P5152, 0
    push $P5151, $P5152
    box $P5153, 0
    push $P5151, $P5153
    box $P5154, 0
    push $P5151, $P5154
    push $P5001, $P5151
    new $P5155, 'ResizablePMCArray'
    box $P5156, 4
    push $P5155, $P5156
    box $P5157, 65535
    push $P5155, $P5157
    box $P5158, 33
    push $P5155, $P5158
    box $P5159, 1
    push $P5155, $P5159
    box $P5160, 0
    push $P5155, $P5160
    box $P5161, 34
    push $P5155, $P5161
    push $P5001, $P5155
    new $P5162, 'ResizablePMCArray'
    box $P5163, 1
    push $P5162, $P5163
    box $P5164, 0
    push $P5162, $P5164
    box $P5165, 35
    push $P5162, $P5165
    push $P5001, $P5162
    new $P5166, 'ResizablePMCArray'
    box $P5167, 6
    push $P5166, $P5167
    box $P5168, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5166, $P5168
    box $P5169, 35
    push $P5166, $P5169
    box $P5170, 1
    push $P5166, $P5170
    box $P5171, 0
    push $P5166, $P5171
    box $P5172, 37
    push $P5166, $P5172
    push $P5001, $P5166
    new $P5173, 'ResizablePMCArray'
    box $P5174, 0
    push $P5173, $P5174
    box $P5175, 0
    push $P5173, $P5175
    box $P5176, 0
    push $P5173, $P5176
    push $P5001, $P5173
    new $P5177, 'ResizablePMCArray'
    box $P5178, 2
    push $P5177, $P5178
    box $P5179, 61
    push $P5177, $P5179
    box $P5180, 38
    push $P5177, $P5180
    box $P5181, 4
    push $P5177, $P5181
    box $P5182, 4096
    push $P5177, $P5182
    box $P5183, 36
    push $P5177, $P5183
    push $P5001, $P5177
    new $P5184, 'ResizablePMCArray'
    box $P5185, 2
    push $P5184, $P5185
    box $P5186, 99
    push $P5184, $P5186
    box $P5187, 39
    push $P5184, $P5187
    box $P5188, 1
    push $P5184, $P5188
    box $P5189, 0
    push $P5184, $P5189
    box $P5190, 36
    push $P5184, $P5190
    push $P5001, $P5184
    new $P5191, 'ResizablePMCArray'
    box $P5192, 2
    push $P5191, $P5192
    box $P5193, 117
    push $P5191, $P5193
    box $P5194, 40
    push $P5191, $P5194
    push $P5001, $P5191
    new $P5195, 'ResizablePMCArray'
    box $P5196, 2
    push $P5195, $P5196
    box $P5197, 116
    push $P5195, $P5197
    box $P5198, 41
    push $P5195, $P5198
    push $P5001, $P5195
    new $P5199, 'ResizablePMCArray'
    box $P5200, 1
    push $P5199, $P5200
    box $P5201, 0
    push $P5199, $P5201
    box $P5202, 42
    push $P5199, $P5202
    push $P5001, $P5199
    new $P5203, 'ResizablePMCArray'
    box $P5204, 8
    push $P5203, $P5204
    box $P5205, "panic"
    push $P5203, $P5205
    box $P5206, 36
    push $P5203, $P5206
    push $P5001, $P5203
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_42_1346968539.359_alt_nfa__6_1346968540.763" :subid("cuid_memo_20_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 98
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 101
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 2
    push $P5012, $P5013
    box $P5014, 103
    push $P5012, $P5014
    box $P5015, 4
    push $P5012, $P5015
    push $P5002, $P5012
    new $P5016, 'ResizablePMCArray'
    box $P5017, 2
    push $P5016, $P5017
    box $P5018, 105
    push $P5016, $P5018
    box $P5019, 5
    push $P5016, $P5019
    push $P5002, $P5016
    new $P5020, 'ResizablePMCArray'
    box $P5021, 2
    push $P5020, $P5021
    box $P5022, 110
    push $P5020, $P5022
    box $P5023, 6
    push $P5020, $P5023
    push $P5002, $P5020
    new $P5024, 'ResizablePMCArray'
    box $P5025, 1
    push $P5024, $P5025
    box $P5026, 0
    push $P5024, $P5026
    box $P5027, 7
    push $P5024, $P5027
    push $P5002, $P5024
    new $P5028, 'ResizablePMCArray'
    box $P5029, 6
    push $P5028, $P5029
    box $P5030, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5028, $P5030
    box $P5031, 8
    push $P5028, $P5031
    push $P5002, $P5028
    new $P5032, 'ResizablePMCArray'
    box $P5033, 1
    push $P5032, $P5033
    box $P5034, 0
    push $P5032, $P5034
    box $P5035, 7
    push $P5032, $P5035
    box $P5036, 1
    push $P5032, $P5036
    box $P5037, 0
    push $P5032, $P5037
    box $P5038, 9
    push $P5032, $P5038
    box $P5039, 2
    push $P5032, $P5039
    box $P5040, 69
    push $P5032, $P5040
    box $P5041, 10
    push $P5032, $P5041
    push $P5002, $P5032
    new $P5042, 'ResizablePMCArray'
    push $P5002, $P5042
    new $P5043, 'ResizablePMCArray'
    box $P5044, 2
    push $P5043, $P5044
    box $P5045, 78
    push $P5043, $P5045
    box $P5046, 11
    push $P5043, $P5046
    push $P5002, $P5043
    new $P5047, 'ResizablePMCArray'
    box $P5048, 2
    push $P5047, $P5048
    box $P5049, 68
    push $P5047, $P5049
    box $P5050, 12
    push $P5047, $P5050
    push $P5002, $P5047
    new $P5051, 'ResizablePMCArray'
    box $P5052, 1
    push $P5051, $P5052
    box $P5053, 0
    push $P5051, $P5053
    box $P5054, 13
    push $P5051, $P5054
    push $P5002, $P5051
    new $P5055, 'ResizablePMCArray'
    box $P5056, 0
    push $P5055, $P5056
    box $P5057, 0
    push $P5055, $P5057
    box $P5058, 0
    push $P5055, $P5058
    push $P5002, $P5055
    push $P5001, $P5002
    new $P5059, 'ResizablePMCArray'
    new $P5060, 'ResizablePMCArray'
    push $P5059, $P5060
    new $P5061, 'ResizablePMCArray'
    box $P5062, 2
    push $P5061, $P5062
    box $P5063, 98
    push $P5061, $P5063
    box $P5064, 2
    push $P5061, $P5064
    push $P5059, $P5061
    new $P5065, 'ResizablePMCArray'
    box $P5066, 2
    push $P5065, $P5066
    box $P5067, 101
    push $P5065, $P5067
    box $P5068, 3
    push $P5065, $P5068
    push $P5059, $P5065
    new $P5069, 'ResizablePMCArray'
    box $P5070, 2
    push $P5069, $P5070
    box $P5071, 103
    push $P5069, $P5071
    box $P5072, 4
    push $P5069, $P5072
    push $P5059, $P5069
    new $P5073, 'ResizablePMCArray'
    box $P5074, 2
    push $P5073, $P5074
    box $P5075, 105
    push $P5073, $P5075
    box $P5076, 5
    push $P5073, $P5076
    push $P5059, $P5073
    new $P5077, 'ResizablePMCArray'
    box $P5078, 2
    push $P5077, $P5078
    box $P5079, 110
    push $P5077, $P5079
    box $P5080, 6
    push $P5077, $P5080
    push $P5059, $P5077
    new $P5081, 'ResizablePMCArray'
    box $P5082, 1
    push $P5081, $P5082
    box $P5083, 0
    push $P5081, $P5083
    box $P5084, 7
    push $P5081, $P5084
    push $P5059, $P5081
    new $P5085, 'ResizablePMCArray'
    box $P5086, 6
    push $P5085, $P5086
    box $P5087, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5085, $P5087
    box $P5088, 8
    push $P5085, $P5088
    push $P5059, $P5085
    new $P5089, 'ResizablePMCArray'
    box $P5090, 1
    push $P5089, $P5090
    box $P5091, 0
    push $P5089, $P5091
    box $P5092, 7
    push $P5089, $P5092
    box $P5093, 1
    push $P5089, $P5093
    box $P5094, 0
    push $P5089, $P5094
    box $P5095, 9
    push $P5089, $P5095
    box $P5096, 8
    push $P5089, $P5096
    box $P5097, "identifier"
    push $P5089, $P5097
    box $P5098, 10
    push $P5089, $P5098
    push $P5059, $P5089
    new $P5099, 'ResizablePMCArray'
    push $P5059, $P5099
    new $P5100, 'ResizablePMCArray'
    box $P5101, 0
    push $P5100, $P5101
    box $P5102, 0
    push $P5100, $P5102
    box $P5103, 0
    push $P5100, $P5103
    push $P5059, $P5100
    push $P5001, $P5059
    new $P5104, 'ResizablePMCArray'
    new $P5105, 'ResizablePMCArray'
    push $P5104, $P5105
    new $P5106, 'ResizablePMCArray'
    box $P5107, 2
    push $P5106, $P5107
    box $P5108, 98
    push $P5106, $P5108
    box $P5109, 2
    push $P5106, $P5109
    push $P5104, $P5106
    new $P5110, 'ResizablePMCArray'
    box $P5111, 2
    push $P5110, $P5111
    box $P5112, 101
    push $P5110, $P5112
    box $P5113, 3
    push $P5110, $P5113
    push $P5104, $P5110
    new $P5114, 'ResizablePMCArray'
    box $P5115, 2
    push $P5114, $P5115
    box $P5116, 103
    push $P5114, $P5116
    box $P5117, 4
    push $P5114, $P5117
    push $P5104, $P5114
    new $P5118, 'ResizablePMCArray'
    box $P5119, 2
    push $P5118, $P5119
    box $P5120, 105
    push $P5118, $P5120
    box $P5121, 5
    push $P5118, $P5121
    push $P5104, $P5118
    new $P5122, 'ResizablePMCArray'
    box $P5123, 2
    push $P5122, $P5123
    box $P5124, 110
    push $P5122, $P5124
    box $P5125, 6
    push $P5122, $P5125
    push $P5104, $P5122
    new $P5126, 'ResizablePMCArray'
    box $P5127, 1
    push $P5126, $P5127
    box $P5128, 0
    push $P5126, $P5128
    box $P5129, 7
    push $P5126, $P5129
    push $P5104, $P5126
    new $P5130, 'ResizablePMCArray'
    box $P5131, 6
    push $P5130, $P5131
    box $P5132, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5130, $P5132
    box $P5133, 7
    push $P5130, $P5133
    box $P5134, 1
    push $P5130, $P5134
    box $P5135, 0
    push $P5130, $P5135
    box $P5136, 8
    push $P5130, $P5136
    push $P5104, $P5130
    new $P5137, 'ResizablePMCArray'
    box $P5138, 0
    push $P5137, $P5138
    box $P5139, 0
    push $P5137, $P5139
    box $P5140, 0
    push $P5137, $P5140
    push $P5104, $P5137
    push $P5001, $P5104
    new $P5141, 'ResizablePMCArray'
    new $P5142, 'ResizablePMCArray'
    push $P5141, $P5142
    new $P5143, 'ResizablePMCArray'
    box $P5144, 8
    push $P5143, $P5144
    box $P5145, "identifier"
    push $P5143, $P5145
    box $P5146, 2
    push $P5143, $P5146
    push $P5141, $P5143
    new $P5147, 'ResizablePMCArray'
    box $P5148, 4
    push $P5147, $P5148
    box $P5149, 65535
    push $P5147, $P5149
    box $P5150, 2
    push $P5147, $P5150
    box $P5151, 1
    push $P5147, $P5151
    box $P5152, 0
    push $P5147, $P5152
    box $P5153, 3
    push $P5147, $P5153
    push $P5141, $P5147
    new $P5154, 'ResizablePMCArray'
    box $P5155, 1
    push $P5154, $P5155
    box $P5156, 0
    push $P5154, $P5156
    box $P5157, 4
    push $P5154, $P5157
    push $P5141, $P5154
    new $P5158, 'ResizablePMCArray'
    box $P5159, 6
    push $P5158, $P5159
    box $P5160, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5158, $P5160
    box $P5161, 4
    push $P5158, $P5161
    box $P5162, 1
    push $P5158, $P5162
    box $P5163, 0
    push $P5158, $P5163
    box $P5164, 6
    push $P5158, $P5164
    push $P5141, $P5158
    new $P5165, 'ResizablePMCArray'
    box $P5166, 0
    push $P5165, $P5166
    box $P5167, 0
    push $P5165, $P5167
    box $P5168, 0
    push $P5165, $P5168
    push $P5141, $P5165
    new $P5169, 'ResizablePMCArray'
    box $P5170, 2
    push $P5169, $P5170
    box $P5171, 61
    push $P5169, $P5171
    box $P5172, 7
    push $P5169, $P5172
    box $P5173, 4
    push $P5169, $P5173
    box $P5174, 4096
    push $P5169, $P5174
    box $P5175, 5
    push $P5169, $P5175
    push $P5141, $P5169
    new $P5176, 'ResizablePMCArray'
    box $P5177, 2
    push $P5176, $P5177
    box $P5178, 99
    push $P5176, $P5178
    box $P5179, 8
    push $P5176, $P5179
    box $P5180, 1
    push $P5176, $P5180
    box $P5181, 0
    push $P5176, $P5181
    box $P5182, 5
    push $P5176, $P5182
    push $P5141, $P5176
    new $P5183, 'ResizablePMCArray'
    box $P5184, 2
    push $P5183, $P5184
    box $P5185, 117
    push $P5183, $P5185
    box $P5186, 9
    push $P5183, $P5186
    push $P5141, $P5183
    new $P5187, 'ResizablePMCArray'
    box $P5188, 2
    push $P5187, $P5188
    box $P5189, 116
    push $P5187, $P5189
    box $P5190, 10
    push $P5187, $P5190
    push $P5141, $P5187
    new $P5191, 'ResizablePMCArray'
    box $P5192, 1
    push $P5191, $P5192
    box $P5193, 0
    push $P5191, $P5193
    box $P5194, 11
    push $P5191, $P5194
    push $P5141, $P5191
    new $P5195, 'ResizablePMCArray'
    box $P5196, 8
    push $P5195, $P5196
    box $P5197, "panic"
    push $P5195, $P5197
    box $P5198, 5
    push $P5195, $P5198
    push $P5141, $P5195
    push $P5001, $P5141
    new $P5199, 'ResizablePMCArray'
    new $P5200, 'ResizablePMCArray'
    push $P5199, $P5200
    new $P5201, 'ResizablePMCArray'
    box $P5202, 0
    push $P5201, $P5202
    box $P5203, 0
    push $P5201, $P5203
    box $P5204, 0
    push $P5201, $P5204
    box $P5205, 0
    push $P5201, $P5205
    box $P5206, 0
    push $P5201, $P5206
    box $P5207, 0
    push $P5201, $P5207
    push $P5199, $P5201
    push $P5001, $P5199
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_41_1346968539.359") :anon :lex :outer("cuid_42_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx157_tgt
    .local int rx157_pos
    .local int rx157_off
    .local int rx157_eos
    .local int rx157_rep
    .local pmc rx157_cur
    .local pmc rx157_curclass
    .local pmc rx157_bstack
    .local pmc rx157_cstack
    (rx157_cur, rx157_tgt, rx157_pos, rx157_curclass, rx157_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx157_cur
    length rx157_eos, rx157_tgt
    eq $I19, 1, rx157_restart544
    gt rx157_pos, rx157_eos, rx157_fail545
    repr_get_attr_int $I11, self, rx157_curclass, "$!from"
    ne $I11, -1, rxscan158_done551
    goto rxscan158_scan550
  rxscan158_loop549:
    inc rx157_pos
    gt rx157_pos, rx157_eos, rx157_fail545
    repr_bind_attr_int rx157_cur, rx157_curclass, "$!from", rx157_pos
  rxscan158_scan550:
    nqp_rxmark rx157_bstack, rxscan158_loop549, rx157_pos, 0
  rxscan158_done551:
    nqp_rxmark rx157_bstack, rxquantr159_done553, rx157_pos, 0
  rxquantr159_loop552:
    ge rx157_pos, rx157_eos, rx157_fail545
    substr $S11, rx157_tgt, rx157_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx157_fail545
    inc rx157_pos
    nqp_rxpeek $I19, rx157_bstack, rxquantr159_done553
    inc $I19
    inc $I19
    set rx157_rep, rx157_bstack[$I19]
    nqp_rxcommit rx157_bstack, rxquantr159_done553
    inc rx157_rep
    nqp_rxmark rx157_bstack, rxquantr159_done553, rx157_pos, rx157_rep
    goto rxquantr159_loop552
  rxquantr159_done553:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt160_0555
    nqp_push_label $P11, alt160_1560
    nqp_rxmark rx157_bstack, alt160_end554, -1, 0
    rx157_cur."!alt"(rx157_pos, "alt_nfa__5_1346968540.747", $P11)
    goto rx157_fail545
  alt160_0555:
    add $I11, rx157_pos, 1
    gt $I11, rx157_eos, rx157_fail545
    substr $S10, rx157_tgt, rx157_pos, 1
    ne $S10, ucs4:"=", rx157_fail545
    add rx157_pos, 1
    nqp_rxmark rx157_bstack, rxquantr161_done557, rx157_pos, 0
  rxquantr161_loop556:
    add $I11, rx157_pos, 3
    gt $I11, rx157_eos, rx157_fail545
    substr $S10, rx157_tgt, rx157_pos, 3
    ne $S10, ucs4:"cut", rx157_fail545
    add rx157_pos, 3
    le rx157_pos, 0, rx157_fail545
    is_cclass $I11, .CCLASS_WORD, rx157_tgt, rx157_pos
    if $I11, rx157_fail545
    sub $I11, rx157_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx157_tgt, $I11
    unless $I11, rx157_fail545
    repr_bind_attr_int rx157_cur, rx157_curclass, "$!pos", rx157_pos
    $P11 = rx157_cur."panic"("Obsolete pod format, please use =begin/=end instead")
    repr_get_attr_int $I11, $P11, rx157_curclass, "$!pos"
    lt $I11, 0, rx157_fail545
    repr_get_attr_int rx157_pos, $P11, rx157_curclass, "$!pos"
    nqp_rxpeek $I19, rx157_bstack, rxquantr161_done557
    inc $I19
    inc $I19
    set rx157_rep, rx157_bstack[$I19]
    nqp_rxcommit rx157_bstack, rxquantr161_done557
    inc rx157_rep
  rxquantr161_done557:
    goto alt160_end554
  alt160_1560:
    ge rx157_pos, rx157_eos, rx157_fail545
    is_cclass $I11, .CCLASS_NEWLINE, rx157_tgt, rx157_pos
    unless $I11, rx157_fail545
    substr $S10, rx157_tgt, rx157_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx157_pos, $I11
    add rx157_pos, 1
    goto alt160_end554
  alt160_end554:
    nqp_rxcommit rx157_bstack, alt160_end554
    rx157_cur."!cursor_pass"(rx157_pos, 'backtrack'=>1)
    .return (rx157_cur)
  rx157_restart544:
    repr_get_attr_obj rx157_cstack, rx157_cur, rx157_curclass, "$!cstack"
  rx157_fail545:
    unless rx157_bstack, rx157_done543
    pop $I19, rx157_bstack
    if_null rx157_cstack, rx157_cstack_done548
    unless rx157_cstack, rx157_cstack_done548
    dec $I19
    set $P11, rx157_cstack[$I19]
  rx157_cstack_done548:
    pop rx157_rep, rx157_bstack
    pop rx157_pos, rx157_bstack
    pop $I19, rx157_bstack
    lt rx157_pos, -1, rx157_done543
    lt rx157_pos, 0, rx157_fail545
    eq $I19, 0, rx157_fail545
    nqp_islist $I20, rx157_cstack
    unless $I20, rx157_jump546
    elements $I18, rx157_bstack
    le $I18, 0, rx157_cut547
    dec $I18
    set $I18, rx157_bstack[$I18]
  rx157_cut547:
    assign rx157_cstack, $I18
  rx157_jump546:
    jump $I19
  rx157_done543:
    rx157_cur."!cursor_fail"()
    .return (rx157_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_41_1346968539.359_caps" :subid("cuid_memo_21_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_41_1346968539.359_nfa" :subid("cuid_memo_22_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5003, $P5005
    box $P5006, 1
    push $P5003, $P5006
    box $P5007, 1
    push $P5003, $P5007
    box $P5008, 0
    push $P5003, $P5008
    box $P5009, 2
    push $P5003, $P5009
    push $P5001, $P5003
    new $P5010, 'ResizablePMCArray'
    box $P5011, 2
    push $P5010, $P5011
    box $P5012, 61
    push $P5010, $P5012
    box $P5013, 3
    push $P5010, $P5013
    box $P5014, 4
    push $P5010, $P5014
    box $P5015, 4096
    push $P5010, $P5015
    box $P5016, 0
    push $P5010, $P5016
    push $P5001, $P5010
    new $P5017, 'ResizablePMCArray'
    box $P5018, 2
    push $P5017, $P5018
    box $P5019, 99
    push $P5017, $P5019
    box $P5020, 4
    push $P5017, $P5020
    box $P5021, 1
    push $P5017, $P5021
    box $P5022, 0
    push $P5017, $P5022
    box $P5023, 0
    push $P5017, $P5023
    push $P5001, $P5017
    new $P5024, 'ResizablePMCArray'
    box $P5025, 2
    push $P5024, $P5025
    box $P5026, 117
    push $P5024, $P5026
    box $P5027, 5
    push $P5024, $P5027
    push $P5001, $P5024
    new $P5028, 'ResizablePMCArray'
    box $P5029, 2
    push $P5028, $P5029
    box $P5030, 116
    push $P5028, $P5030
    box $P5031, 6
    push $P5028, $P5031
    push $P5001, $P5028
    new $P5032, 'ResizablePMCArray'
    box $P5033, 1
    push $P5032, $P5033
    box $P5034, 0
    push $P5032, $P5034
    box $P5035, 7
    push $P5032, $P5035
    push $P5001, $P5032
    new $P5036, 'ResizablePMCArray'
    box $P5037, 8
    push $P5036, $P5037
    box $P5038, "panic"
    push $P5036, $P5038
    box $P5039, 0
    push $P5036, $P5039
    push $P5001, $P5036
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_41_1346968539.359_alt_nfa__5_1346968540.747" :subid("cuid_memo_23_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 61
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 99
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    box $P5012, 1
    push $P5008, $P5012
    box $P5013, 0
    push $P5008, $P5013
    box $P5014, 0
    push $P5008, $P5014
    push $P5002, $P5008
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 117
    push $P5015, $P5017
    box $P5018, 4
    push $P5015, $P5018
    push $P5002, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 116
    push $P5019, $P5021
    box $P5022, 5
    push $P5019, $P5022
    push $P5002, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 1
    push $P5023, $P5024
    box $P5025, 0
    push $P5023, $P5025
    box $P5026, 6
    push $P5023, $P5026
    push $P5002, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "panic"
    push $P5027, $P5029
    box $P5030, 0
    push $P5027, $P5030
    push $P5002, $P5027
    push $P5001, $P5002
    new $P5031, 'ResizablePMCArray'
    new $P5032, 'ResizablePMCArray'
    push $P5031, $P5032
    new $P5033, 'ResizablePMCArray'
    box $P5034, 4
    push $P5033, $P5034
    box $P5035, 4096
    push $P5033, $P5035
    box $P5036, 0
    push $P5033, $P5036
    push $P5031, $P5033
    push $P5001, $P5031
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "comp_unit" :subid("cuid_43_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 693
    .param pmc _lex_param_0 
    .const 'Sub' $P5034 = 'cuid_386_1346968539.359' 
    capture_lex $P5034 
    .lex "$*IN_DECL", $P101 
    .lex "$*HAS_YOU_ARE_HERE", $P102 
    .lex "$*MAIN_SUB", $P103 
    .lex "$*UNIT", $P104 
    .lex "$*PACKAGE", $P105 
    .lex "$*GLOBALish", $P106 
    .lex utf8:"$\x{a2}", $P107 
    .lex "$/", $P108 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P104, $P5004
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P105, $P5005
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P106, $P5006
    set self, _lex_param_0
    .local string rx167_tgt
    .local int rx167_pos
    .local int rx167_off
    .local int rx167_eos
    .local int rx167_rep
    .local pmc rx167_cur
    .local pmc rx167_curclass
    .local pmc rx167_bstack
    .local pmc rx167_cstack
    (rx167_cur, rx167_tgt, rx167_pos, rx167_curclass, rx167_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx167_cur
    length rx167_eos, rx167_tgt
    eq $I19, 1, rx167_restart570
    gt rx167_pos, rx167_eos, rx167_fail571
    repr_get_attr_int $I11, self, rx167_curclass, "$!from"
    ne $I11, -1, rxscan168_done577
    goto rxscan168_scan576
  rxscan168_loop575:
    inc rx167_pos
    gt rx167_pos, rx167_eos, rx167_fail571
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!from", rx167_pos
  rxscan168_scan576:
    nqp_rxmark rx167_bstack, rxscan168_loop575, rx167_pos, 0
  rxscan168_done577:
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
    box $P5007, ""
    set $P101, $P5007
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
    box $P5008, 0
    set $P102, $P5008
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
    unless_null $P103, fallback578
    get_hll_global $P5011, "GLOBAL"
    get_who $P5010, $P5011
    set $P5009, $P5010["$MAIN_SUB"]
    unless_null $P5009, fallback579
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5009, $P5012
  fallback579:
    unless_null $P5009, vivi_169580
    die "Contextual $*MAIN_SUB not found"
    box $P5013, "Contextual $*MAIN_SUB not found"
    set $P5009, $P5013
  vivi_169580:
    set $P103, $P5009
  fallback578:
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
.annotate 'line', 698
    find_dynamic_lex $P5014, "$*W"
    unless_null $P5014, fallback581
    get_hll_global $P5017, "GLOBAL"
    get_who $P5016, $P5017
    set $P5015, $P5016["$W"]
    unless_null $P5015, fallback582
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5015, $P5018
  fallback582:
    unless_null $P5015, vivi_170583
    die "Contextual $*W not found"
    box $P5019, "Contextual $*W not found"
    set $P5015, $P5019
  vivi_170583:
    set $P5014, $P5015
  fallback581:
    $P5020 = $P5014."push_lexpad"($P108)
    set $P104, $P5020
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
    unless_null $P105, fallback584
    get_hll_global $P5023, "GLOBAL"
    get_who $P5022, $P5023
    set $P5021, $P5022["$PACKAGE"]
    unless_null $P5021, fallback585
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5021, $P5024
  fallback585:
    unless_null $P5021, vivi_171586
    die "Contextual $*PACKAGE not found"
    box $P5025, "Contextual $*PACKAGE not found"
    set $P5021, $P5025
  vivi_171586:
    set $P105, $P5021
  fallback584:
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
    unless_null $P106, fallback587
    get_hll_global $P5028, "GLOBAL"
    get_who $P5027, $P5028
    set $P5026, $P5027["$GLOBALish"]
    unless_null $P5026, fallback588
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5026, $P5029
  fallback588:
    unless_null $P5026, vivi_172589
    die "Contextual $*GLOBALish not found"
    box $P5030, "Contextual $*GLOBALish not found"
    set $P5026, $P5030
  vivi_172589:
    set $P106, $P5026
  fallback587:
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    $P11 = rx167_cur."GLOBALish"()
    repr_get_attr_int $I11, $P11, rx167_curclass, "$!pos"
    lt $I11, 0, rx167_fail571
    repr_get_attr_int rx167_pos, $P11, rx167_curclass, "$!pos"
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
    $P5031 = $P107."MATCH"()
    set $P108, $P5031
    .const 'Sub' $P5032 = 'cuid_386_1346968539.359' 
    capture_lex $P5032
    $P5033 = $P5032()
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    $P11 = rx167_cur."outerctx"()
    repr_get_attr_int $I11, $P11, rx167_curclass, "$!pos"
    lt $I11, 0, rx167_fail571
    repr_get_attr_int rx167_pos, $P11, rx167_curclass, "$!pos"
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    $P11 = rx167_cur."statementlist"()
    repr_get_attr_int $I11, $P11, rx167_curclass, "$!pos"
    lt $I11, 0, rx167_fail571
    nqp_rxmark rx167_bstack, rxsubrule176_pass595, -1, 0
  rxsubrule176_pass595:
    rx167_cstack = rx167_cur."!cursor_capture"($P11, "statementlist")
    repr_get_attr_int rx167_pos, $P11, rx167_curclass, "$!pos"
  alt177_0597:
    nqp_rxmark rx167_bstack, alt177_1599, rx167_pos, 0
    lt rx167_pos, rx167_eos, rx167_fail571
    goto alt177_end596
  alt177_1599:
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    $P11 = rx167_cur."panic"("Confused")
    repr_get_attr_int $I11, $P11, rx167_curclass, "$!pos"
    lt $I11, 0, rx167_fail571
    repr_get_attr_int rx167_pos, $P11, rx167_curclass, "$!pos"
  alt177_end596:
    rx167_cur."!cursor_pass"(rx167_pos, "comp_unit", 'backtrack'=>1)
    .return (rx167_cur)
  rx167_restart570:
    repr_get_attr_obj rx167_cstack, rx167_cur, rx167_curclass, "$!cstack"
  rx167_fail571:
    unless rx167_bstack, rx167_done569
    pop $I19, rx167_bstack
    if_null rx167_cstack, rx167_cstack_done574
    unless rx167_cstack, rx167_cstack_done574
    dec $I19
    set $P11, rx167_cstack[$I19]
  rx167_cstack_done574:
    pop rx167_rep, rx167_bstack
    pop rx167_pos, rx167_bstack
    pop $I19, rx167_bstack
    lt rx167_pos, -1, rx167_done569
    lt rx167_pos, 0, rx167_fail571
    eq $I19, 0, rx167_fail571
    nqp_islist $I20, rx167_cstack
    unless $I20, rx167_jump572
    elements $I18, rx167_bstack
    le $I18, 0, rx167_cut573
    dec $I18
    set $I18, rx167_bstack[$I18]
  rx167_cut573:
    assign rx167_cstack, $I18
  rx167_jump572:
    jump $I19
  rx167_done569:
    rx167_cur."!cursor_fail"()
    .return (rx167_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_43_1346968539.359_caps" :subid("cuid_memo_24_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["statementlist"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_43_1346968539.359_nfa" :subid("cuid_memo_25_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 1
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 1
    push $P5015, $P5016
    box $P5017, 0
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 1
    push $P5019, $P5020
    box $P5021, 0
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 1
    push $P5023, $P5024
    box $P5025, 0
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "GLOBALish"
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 0
    push $P5031, $P5032
    box $P5033, 0
    push $P5031, $P5033
    box $P5034, 0
    push $P5031, $P5034
    push $P5001, $P5031
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_386_1346968539.359") :anon :lex :outer("cuid_43_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 704

    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback591
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback592
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5002, $P5005
  fallback592:
    unless_null $P5002, vivi_174593
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_174593:
    set $P5001, $P5002
  fallback591:
    $P5007 = $P5001."add_initializations"()
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "statementlist" :subid("cuid_44_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 712
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx180_tgt
    .local int rx180_pos
    .local int rx180_off
    .local int rx180_eos
    .local int rx180_rep
    .local pmc rx180_cur
    .local pmc rx180_curclass
    .local pmc rx180_bstack
    .local pmc rx180_cstack
    (rx180_cur, rx180_tgt, rx180_pos, rx180_curclass, rx180_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx180_cur
    length rx180_eos, rx180_tgt
    eq $I19, 1, rx180_restart603
    gt rx180_pos, rx180_eos, rx180_fail604
    repr_get_attr_int $I11, self, rx180_curclass, "$!from"
    ne $I11, -1, rxscan181_done610
    goto rxscan181_scan609
  rxscan181_loop608:
    inc rx180_pos
    gt rx180_pos, rx180_eos, rx180_fail604
    repr_bind_attr_int rx180_cur, rx180_curclass, "$!from", rx180_pos
  rxscan181_scan609:
    nqp_rxmark rx180_bstack, rxscan181_loop608, rx180_pos, 0
  rxscan181_done610:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt182_0612
    nqp_push_label $P11, alt182_1616
    nqp_rxmark rx180_bstack, alt182_end611, -1, 0
    rx180_cur."!alt"(rx180_pos, "alt_nfa__7_1346968540.806", $P11)
    goto rx180_fail604
  alt182_0612:
    repr_bind_attr_int rx180_cur, rx180_curclass, "$!pos", rx180_pos
    $P11 = rx180_cur."ws"()
    repr_get_attr_int $I11, $P11, rx180_curclass, "$!pos"
    lt $I11, 0, rx180_fail604
    repr_get_attr_int rx180_pos, $P11, rx180_curclass, "$!pos"
    lt rx180_pos, rx180_eos, rx180_fail604
    repr_bind_attr_int rx180_cur, rx180_curclass, "$!pos", rx180_pos
    $P11 = rx180_cur."ws"()
    repr_get_attr_int $I11, $P11, rx180_curclass, "$!pos"
    lt $I11, 0, rx180_fail604
    repr_get_attr_int rx180_pos, $P11, rx180_curclass, "$!pos"
    goto alt182_end611
  alt182_1616:
    repr_bind_attr_int rx180_cur, rx180_curclass, "$!pos", rx180_pos
    $P11 = rx180_cur."ws"()
    repr_get_attr_int $I11, $P11, rx180_curclass, "$!pos"
    lt $I11, 0, rx180_fail604
    repr_get_attr_int rx180_pos, $P11, rx180_curclass, "$!pos"
    nqp_rxmark rx180_bstack, rxquantr187_done619, rx180_pos, 0
  rxquantr187_loop618:
    repr_bind_attr_int rx180_cur, rx180_curclass, "$!pos", rx180_pos
    $P11 = rx180_cur."statement"()
    repr_get_attr_int $I11, $P11, rx180_curclass, "$!pos"
    lt $I11, 0, rx180_fail604
    nqp_rxmark rx180_bstack, rxsubrule188_pass620, -1, 0
  rxsubrule188_pass620:
    rx180_cstack = rx180_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx180_pos, $P11, rx180_curclass, "$!pos"
    repr_bind_attr_int rx180_cur, rx180_curclass, "$!pos", rx180_pos
    $P11 = rx180_cur."eat_terminator"()
    repr_get_attr_int $I11, $P11, rx180_curclass, "$!pos"
    lt $I11, 0, rx180_fail604
    repr_get_attr_int rx180_pos, $P11, rx180_curclass, "$!pos"
    repr_bind_attr_int rx180_cur, rx180_curclass, "$!pos", rx180_pos
    $P11 = rx180_cur."ws"()
    repr_get_attr_int $I11, $P11, rx180_curclass, "$!pos"
    lt $I11, 0, rx180_fail604
    repr_get_attr_int rx180_pos, $P11, rx180_curclass, "$!pos"
    nqp_rxpeek $I19, rx180_bstack, rxquantr187_done619
    inc $I19
    inc $I19
    set rx180_rep, rx180_bstack[$I19]
    nqp_rxcommit rx180_bstack, rxquantr187_done619
    inc rx180_rep
    nqp_rxmark rx180_bstack, rxquantr187_done619, rx180_pos, rx180_rep
    goto rxquantr187_loop618
  rxquantr187_done619:
    repr_bind_attr_int rx180_cur, rx180_curclass, "$!pos", rx180_pos
    $P11 = rx180_cur."ws"()
    repr_get_attr_int $I11, $P11, rx180_curclass, "$!pos"
    lt $I11, 0, rx180_fail604
    repr_get_attr_int rx180_pos, $P11, rx180_curclass, "$!pos"
    goto alt182_end611
  alt182_end611:
    rx180_cur."!cursor_pass"(rx180_pos, "statementlist", 'backtrack'=>1)
    .return (rx180_cur)
  rx180_restart603:
    repr_get_attr_obj rx180_cstack, rx180_cur, rx180_curclass, "$!cstack"
  rx180_fail604:
    unless rx180_bstack, rx180_done602
    pop $I19, rx180_bstack
    if_null rx180_cstack, rx180_cstack_done607
    unless rx180_cstack, rx180_cstack_done607
    dec $I19
    set $P11, rx180_cstack[$I19]
  rx180_cstack_done607:
    pop rx180_rep, rx180_bstack
    pop rx180_pos, rx180_bstack
    pop $I19, rx180_bstack
    lt rx180_pos, -1, rx180_done602
    lt rx180_pos, 0, rx180_fail604
    eq $I19, 0, rx180_fail604
    nqp_islist $I20, rx180_cstack
    unless $I20, rx180_jump605
    elements $I18, rx180_bstack
    le $I18, 0, rx180_cut606
    dec $I18
    set $I18, rx180_bstack[$I18]
  rx180_cut606:
    assign rx180_cstack, $I18
  rx180_jump605:
    jump $I19
  rx180_done602:
    rx180_cur."!cursor_fail"()
    .return (rx180_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_44_1346968539.359_caps" :subid("cuid_memo_26_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 2
    set $P5001["statement"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_44_1346968539.359_alt_nfa__7_1346968540.806" :subid("cuid_memo_27_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 0
    push $P5004, $P5005
    box $P5006, 0
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    box $P5008, 0
    push $P5004, $P5008
    box $P5009, 0
    push $P5004, $P5009
    box $P5010, 0
    push $P5004, $P5010
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5011, 'ResizablePMCArray'
    new $P5012, 'ResizablePMCArray'
    push $P5011, $P5012
    new $P5013, 'ResizablePMCArray'
    box $P5014, 0
    push $P5013, $P5014
    box $P5015, 0
    push $P5013, $P5015
    box $P5016, 0
    push $P5013, $P5016
    box $P5017, 0
    push $P5013, $P5017
    box $P5018, 0
    push $P5013, $P5018
    box $P5019, 0
    push $P5013, $P5019
    push $P5011, $P5013
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement" :subid("cuid_46_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 717
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_45_1346968539.359' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx192_tgt
    .local int rx192_pos
    .local int rx192_off
    .local int rx192_eos
    .local int rx192_rep
    .local pmc rx192_cur
    .local pmc rx192_curclass
    .local pmc rx192_bstack
    .local pmc rx192_cstack
    (rx192_cur, rx192_tgt, rx192_pos, rx192_curclass, rx192_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx192_cur
    length rx192_eos, rx192_tgt
    eq $I19, 1, rx192_restart626
    gt rx192_pos, rx192_eos, rx192_fail627
    repr_get_attr_int $I11, self, rx192_curclass, "$!from"
    ne $I11, -1, rxscan193_done633
    goto rxscan193_scan632
  rxscan193_loop631:
    inc rx192_pos
    gt rx192_pos, rx192_eos, rx192_fail627
    repr_bind_attr_int rx192_cur, rx192_curclass, "$!from", rx192_pos
  rxscan193_scan632:
    nqp_rxmark rx192_bstack, rxscan193_loop631, rx192_pos, 0
  rxscan193_done633:
    .const 'Sub' $P5001 = 'cuid_45_1346968539.359' 
    capture_lex $P5001
    repr_bind_attr_int rx192_cur, rx192_curclass, "$!pos", rx192_pos
    $P11 = rx192_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx192_curclass, "$!pos"
    ge $I11, 0, rx192_fail627
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt199_0652
    nqp_push_label $P11, alt199_1654
    nqp_rxmark rx192_bstack, alt199_end651, -1, 0
    rx192_cur."!alt"(rx192_pos, "alt_nfa__9_1346968540.827", $P11)
    goto rx192_fail627
  alt199_0652:
    repr_bind_attr_int rx192_cur, rx192_curclass, "$!pos", rx192_pos
    $P11 = rx192_cur."statement_control"()
    repr_get_attr_int $I11, $P11, rx192_curclass, "$!pos"
    lt $I11, 0, rx192_fail627
    nqp_rxmark rx192_bstack, rxsubrule200_pass653, -1, 0
  rxsubrule200_pass653:
    rx192_cstack = rx192_cur."!cursor_capture"($P11, "statement_control")
    repr_get_attr_int rx192_pos, $P11, rx192_curclass, "$!pos"
    goto alt199_end651
  alt199_1654:
    repr_bind_attr_int rx192_cur, rx192_curclass, "$!pos", rx192_pos
    $P11 = rx192_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx192_curclass, "$!pos"
    lt $I11, 0, rx192_fail627
    nqp_rxmark rx192_bstack, rxsubrule201_pass655, -1, 0
  rxsubrule201_pass655:
    rx192_cstack = rx192_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx192_pos, $P11, rx192_curclass, "$!pos"
    repr_bind_attr_int rx192_cur, rx192_curclass, "$!pos", rx192_pos
    $P11 = rx192_cur."ws"()
    repr_get_attr_int $I11, $P11, rx192_curclass, "$!pos"
    lt $I11, 0, rx192_fail627
    repr_get_attr_int rx192_pos, $P11, rx192_curclass, "$!pos"
    nqp_rxmark rx192_bstack, rxquantr203_done658, rx192_pos, 0
  rxquantr203_loop657:
  alt204_0660:
    nqp_rxmark rx192_bstack, alt204_1661, rx192_pos, 0
    repr_bind_attr_int rx192_cur, rx192_curclass, "$!pos", rx192_pos
    $P11 = rx192_cur."MARKED"("endstmt")
    repr_get_attr_int $I11, $P11, rx192_curclass, "$!pos"
    lt $I11, 0, rx192_fail627
    goto alt204_end659
  alt204_1661:
    nqp_rxmark rx192_bstack, alt204_2667, rx192_pos, 0
    repr_bind_attr_int rx192_cur, rx192_curclass, "$!pos", rx192_pos
    $P11 = rx192_cur."statement_mod_cond"()
    repr_get_attr_int $I11, $P11, rx192_curclass, "$!pos"
    lt $I11, 0, rx192_fail627
    nqp_rxmark rx192_bstack, rxsubrule205_pass662, -1, 0
  rxsubrule205_pass662:
    rx192_cstack = rx192_cur."!cursor_capture"($P11, "statement_mod_cond")
    repr_get_attr_int rx192_pos, $P11, rx192_curclass, "$!pos"
    nqp_rxmark rx192_bstack, rxquantr206_done664, rx192_pos, 0
  rxquantr206_loop663:
    repr_bind_attr_int rx192_cur, rx192_curclass, "$!pos", rx192_pos
    $P11 = rx192_cur."statement_mod_loop"()
    repr_get_attr_int $I11, $P11, rx192_curclass, "$!pos"
    lt $I11, 0, rx192_fail627
    goto rxsubrule207_pass665
  rxsubrule207_back666:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx192_curclass, "$!pos"
    lt $I11, 0, rx192_fail627
  rxsubrule207_pass665:
    rx192_cstack = rx192_cur."!cursor_capture"($P11, "statement_mod_loop")
    set_addr $I11, rxsubrule207_back666
    push rx192_bstack, $I11
    push rx192_bstack, 0
    push rx192_bstack, rx192_pos
    elements $I11, rx192_cstack
    push rx192_bstack, $I11
    repr_get_attr_int rx192_pos, $P11, rx192_curclass, "$!pos"
    nqp_rxpeek $I19, rx192_bstack, rxquantr206_done664
    inc $I19
    inc $I19
    set rx192_rep, rx192_bstack[$I19]
    nqp_rxcommit rx192_bstack, rxquantr206_done664
    inc rx192_rep
  rxquantr206_done664:
    goto alt204_end659
  alt204_2667:
    repr_bind_attr_int rx192_cur, rx192_curclass, "$!pos", rx192_pos
    $P11 = rx192_cur."statement_mod_loop"()
    repr_get_attr_int $I11, $P11, rx192_curclass, "$!pos"
    lt $I11, 0, rx192_fail627
    nqp_rxmark rx192_bstack, rxsubrule208_pass668, -1, 0
  rxsubrule208_pass668:
    rx192_cstack = rx192_cur."!cursor_capture"($P11, "statement_mod_loop")
    repr_get_attr_int rx192_pos, $P11, rx192_curclass, "$!pos"
  alt204_end659:
    nqp_rxpeek $I19, rx192_bstack, rxquantr203_done658
    inc $I19
    inc $I19
    set rx192_rep, rx192_bstack[$I19]
    nqp_rxcommit rx192_bstack, rxquantr203_done658
    inc rx192_rep
  rxquantr203_done658:
    goto alt199_end651
  alt199_end651:
    nqp_rxcommit rx192_bstack, alt199_end651
    rx192_cur."!cursor_pass"(rx192_pos, "statement", 'backtrack'=>1)
    .return (rx192_cur)
  rx192_restart626:
    repr_get_attr_obj rx192_cstack, rx192_cur, rx192_curclass, "$!cstack"
  rx192_fail627:
    unless rx192_bstack, rx192_done625
    pop $I19, rx192_bstack
    if_null rx192_cstack, rx192_cstack_done630
    unless rx192_cstack, rx192_cstack_done630
    dec $I19
    set $P11, rx192_cstack[$I19]
  rx192_cstack_done630:
    pop rx192_rep, rx192_bstack
    pop rx192_pos, rx192_bstack
    pop $I19, rx192_bstack
    lt rx192_pos, -1, rx192_done625
    lt rx192_pos, 0, rx192_fail627
    eq $I19, 0, rx192_fail627
    nqp_islist $I20, rx192_cstack
    unless $I20, rx192_jump628
    elements $I18, rx192_bstack
    le $I18, 0, rx192_cut629
    dec $I18
    set $I18, rx192_bstack[$I18]
  rx192_cut629:
    assign rx192_cstack, $I18
  rx192_jump628:
    jump $I19
  rx192_done625:
    rx192_cur."!cursor_fail"()
    .return (rx192_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_46_1346968539.359_caps" :subid("cuid_memo_28_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["statement_control"], $P5002
    box $P5003, 0
    set $P5001["EXPR"], $P5003
    box $P5004, 2
    set $P5001["statement_mod_cond"], $P5004
    box $P5005, 2
    set $P5001["statement_mod_loop"], $P5005
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_46_1346968539.359_alt_nfa__9_1346968540.827" :subid("cuid_memo_29_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 8
    push $P5004, $P5005
    box $P5006, "statement_control"
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 8
    push $P5010, $P5011
    box $P5012, "EXPR"
    push $P5010, $P5012
    box $P5013, 2
    push $P5010, $P5013
    push $P5008, $P5010
    new $P5014, 'ResizablePMCArray'
    box $P5015, 8
    push $P5014, $P5015
    box $P5016, "ws"
    push $P5014, $P5016
    box $P5017, 3
    push $P5014, $P5017
    push $P5008, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 0
    push $P5018, $P5019
    box $P5020, 0
    push $P5018, $P5020
    box $P5021, 0
    push $P5018, $P5021
    box $P5022, 1
    push $P5018, $P5022
    box $P5023, 0
    push $P5018, $P5023
    box $P5024, 0
    push $P5018, $P5024
    push $P5008, $P5018
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_45_1346968539.359") :anon :lex :outer("cuid_46_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx194_tgt
    .local int rx194_pos
    .local int rx194_off
    .local int rx194_eos
    .local int rx194_rep
    .local pmc rx194_cur
    .local pmc rx194_curclass
    .local pmc rx194_bstack
    .local pmc rx194_cstack
    (rx194_cur, rx194_tgt, rx194_pos, rx194_curclass, rx194_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx194_cur
    length rx194_eos, rx194_tgt
    eq $I19, 1, rx194_restart636
    gt rx194_pos, rx194_eos, rx194_fail637
    repr_get_attr_int $I11, self, rx194_curclass, "$!from"
    ne $I11, -1, rxscan195_done643
    goto rxscan195_scan642
  rxscan195_loop641:
    inc rx194_pos
    gt rx194_pos, rx194_eos, rx194_fail637
    repr_bind_attr_int rx194_cur, rx194_curclass, "$!from", rx194_pos
  rxscan195_scan642:
    nqp_rxmark rx194_bstack, rxscan195_loop641, rx194_pos, 0
  rxscan195_done643:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt196_0645
    nqp_push_label $P11, alt196_1649
    nqp_rxmark rx194_bstack, alt196_end644, -1, 0
    rx194_cur."!alt"(rx194_pos, "alt_nfa__8_1346968540.812", $P11)
    goto rx194_fail637
  alt196_0645:
  alt197_0647:
    nqp_rxmark rx194_bstack, alt197_1648, rx194_pos, 0
    add $I11, rx194_pos, 1
    gt $I11, rx194_eos, rx194_fail637
    substr $S10, rx194_tgt, rx194_pos, 1
    ne $S10, ucs4:"]", rx194_fail637
    add rx194_pos, 1
    goto alt197_end646
  alt197_1648:
    ge rx194_pos, rx194_eos, rx194_fail637
    substr $S11, rx194_tgt, rx194_pos, 1
    index $I11, ucs4:")}", $S11
    lt $I11, 0, rx194_fail637
    inc rx194_pos
  alt197_end646:
    goto alt196_end644
  alt196_1649:
    lt rx194_pos, rx194_eos, rx194_fail637
    goto alt196_end644
  alt196_end644:
    rx194_cur."!cursor_pass"(rx194_pos, 'backtrack'=>1)
    .return (rx194_cur)
  rx194_restart636:
    repr_get_attr_obj rx194_cstack, rx194_cur, rx194_curclass, "$!cstack"
  rx194_fail637:
    unless rx194_bstack, rx194_done635
    pop $I19, rx194_bstack
    if_null rx194_cstack, rx194_cstack_done640
    unless rx194_cstack, rx194_cstack_done640
    dec $I19
    set $P11, rx194_cstack[$I19]
  rx194_cstack_done640:
    pop rx194_rep, rx194_bstack
    pop rx194_pos, rx194_bstack
    pop $I19, rx194_bstack
    lt rx194_pos, -1, rx194_done635
    lt rx194_pos, 0, rx194_fail637
    eq $I19, 0, rx194_fail637
    nqp_islist $I20, rx194_cstack
    unless $I20, rx194_jump638
    elements $I18, rx194_bstack
    le $I18, 0, rx194_cut639
    dec $I18
    set $I18, rx194_bstack[$I18]
  rx194_cut639:
    assign rx194_cstack, $I18
  rx194_jump638:
    jump $I19
  rx194_done635:
    rx194_cur."!cursor_fail"()
    .return (rx194_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_45_1346968539.359_caps" :subid("cuid_memo_30_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_45_1346968539.359_nfa" :subid("cuid_memo_31_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 0
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    box $P5007, 1
    push $P5003, $P5007
    box $P5008, 0
    push $P5003, $P5008
    box $P5009, 0
    push $P5003, $P5009
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_45_1346968539.359_alt_nfa__8_1346968540.812" :subid("cuid_memo_32_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 0
    push $P5004, $P5005
    box $P5006, 0
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    box $P5008, 0
    push $P5004, $P5008
    box $P5009, 0
    push $P5004, $P5009
    box $P5010, 0
    push $P5004, $P5010
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5011, 'ResizablePMCArray'
    new $P5012, 'ResizablePMCArray'
    push $P5011, $P5012
    new $P5013, 'ResizablePMCArray'
    box $P5014, 1
    push $P5013, $P5014
    box $P5015, 0
    push $P5013, $P5015
    box $P5016, 0
    push $P5013, $P5016
    push $P5011, $P5013
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "eat_terminator" :subid("cuid_47_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 730
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx209_tgt
    .local int rx209_pos
    .local int rx209_off
    .local int rx209_eos
    .local int rx209_rep
    .local pmc rx209_cur
    .local pmc rx209_curclass
    .local pmc rx209_bstack
    .local pmc rx209_cstack
    (rx209_cur, rx209_tgt, rx209_pos, rx209_curclass, rx209_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx209_cur
    length rx209_eos, rx209_tgt
    eq $I19, 1, rx209_restart671
    gt rx209_pos, rx209_eos, rx209_fail672
    repr_get_attr_int $I11, self, rx209_curclass, "$!from"
    ne $I11, -1, rxscan210_done678
    goto rxscan210_scan677
  rxscan210_loop676:
    inc rx209_pos
    gt rx209_pos, rx209_eos, rx209_fail672
    repr_bind_attr_int rx209_cur, rx209_curclass, "$!from", rx209_pos
  rxscan210_scan677:
    nqp_rxmark rx209_bstack, rxscan210_loop676, rx209_pos, 0
  rxscan210_done678:
  alt211_0680:
    nqp_rxmark rx209_bstack, alt211_1681, rx209_pos, 0
    add $I11, rx209_pos, 1
    gt $I11, rx209_eos, rx209_fail672
    substr $S10, rx209_tgt, rx209_pos, 1
    ne $S10, ucs4:";", rx209_fail672
    add rx209_pos, 1
    goto alt211_end679
  alt211_1681:
    nqp_rxmark rx209_bstack, alt211_2682, rx209_pos, 0
    repr_bind_attr_int rx209_cur, rx209_curclass, "$!pos", rx209_pos
    $P11 = rx209_cur."MARKED"("endstmt")
    repr_get_attr_int $I11, $P11, rx209_curclass, "$!pos"
    lt $I11, 0, rx209_fail672
    goto alt211_end679
  alt211_2682:
    nqp_rxmark rx209_bstack, alt211_3683, rx209_pos, 0
    repr_bind_attr_int rx209_cur, rx209_curclass, "$!pos", rx209_pos
    $P11 = rx209_cur."terminator"()
    repr_get_attr_int $I11, $P11, rx209_curclass, "$!pos"
    lt $I11, 0, rx209_fail672
    goto alt211_end679
  alt211_3683:
    lt rx209_pos, rx209_eos, rx209_fail672
  alt211_end679:
    rx209_cur."!cursor_pass"(rx209_pos, "eat_terminator", 'backtrack'=>1)
    .return (rx209_cur)
  rx209_restart671:
    repr_get_attr_obj rx209_cstack, rx209_cur, rx209_curclass, "$!cstack"
  rx209_fail672:
    unless rx209_bstack, rx209_done670
    pop $I19, rx209_bstack
    if_null rx209_cstack, rx209_cstack_done675
    unless rx209_cstack, rx209_cstack_done675
    dec $I19
    set $P11, rx209_cstack[$I19]
  rx209_cstack_done675:
    pop rx209_rep, rx209_bstack
    pop rx209_pos, rx209_bstack
    pop $I19, rx209_bstack
    lt rx209_pos, -1, rx209_done670
    lt rx209_pos, 0, rx209_fail672
    eq $I19, 0, rx209_fail672
    nqp_islist $I20, rx209_cstack
    unless $I20, rx209_jump673
    elements $I18, rx209_bstack
    le $I18, 0, rx209_cut674
    dec $I18
    set $I18, rx209_bstack[$I18]
  rx209_cut674:
    assign rx209_cstack, $I18
  rx209_jump673:
    jump $I19
  rx209_done670:
    rx209_cur."!cursor_fail"()
    .return (rx209_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_47_1346968539.359_caps" :subid("cuid_memo_33_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "xblock" :subid("cuid_48_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 737
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx213_tgt
    .local int rx213_pos
    .local int rx213_off
    .local int rx213_eos
    .local int rx213_rep
    .local pmc rx213_cur
    .local pmc rx213_curclass
    .local pmc rx213_bstack
    .local pmc rx213_cstack
    (rx213_cur, rx213_tgt, rx213_pos, rx213_curclass, rx213_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx213_cur
    length rx213_eos, rx213_tgt
    eq $I19, 1, rx213_restart687
    gt rx213_pos, rx213_eos, rx213_fail688
    repr_get_attr_int $I11, self, rx213_curclass, "$!from"
    ne $I11, -1, rxscan214_done694
    goto rxscan214_scan693
  rxscan214_loop692:
    inc rx213_pos
    gt rx213_pos, rx213_eos, rx213_fail688
    repr_bind_attr_int rx213_cur, rx213_curclass, "$!from", rx213_pos
  rxscan214_scan693:
    nqp_rxmark rx213_bstack, rxscan214_loop692, rx213_pos, 0
  rxscan214_done694:
    repr_bind_attr_int rx213_cur, rx213_curclass, "$!pos", rx213_pos
    $P11 = rx213_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx213_curclass, "$!pos"
    lt $I11, 0, rx213_fail688
    nqp_rxmark rx213_bstack, rxsubrule215_pass695, -1, 0
  rxsubrule215_pass695:
    rx213_cstack = rx213_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx213_pos, $P11, rx213_curclass, "$!pos"
    repr_bind_attr_int rx213_cur, rx213_curclass, "$!pos", rx213_pos
    $P11 = rx213_cur."ws"()
    repr_get_attr_int $I11, $P11, rx213_curclass, "$!pos"
    lt $I11, 0, rx213_fail688
    repr_get_attr_int rx213_pos, $P11, rx213_curclass, "$!pos"
    repr_bind_attr_int rx213_cur, rx213_curclass, "$!pos", rx213_pos
    $P11 = rx213_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx213_curclass, "$!pos"
    lt $I11, 0, rx213_fail688
    nqp_rxmark rx213_bstack, rxsubrule217_pass697, -1, 0
  rxsubrule217_pass697:
    rx213_cstack = rx213_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx213_pos, $P11, rx213_curclass, "$!pos"
    rx213_cur."!cursor_pass"(rx213_pos, "xblock", 'backtrack'=>1)
    .return (rx213_cur)
  rx213_restart687:
    repr_get_attr_obj rx213_cstack, rx213_cur, rx213_curclass, "$!cstack"
  rx213_fail688:
    unless rx213_bstack, rx213_done686
    pop $I19, rx213_bstack
    if_null rx213_cstack, rx213_cstack_done691
    unless rx213_cstack, rx213_cstack_done691
    dec $I19
    set $P11, rx213_cstack[$I19]
  rx213_cstack_done691:
    pop rx213_rep, rx213_bstack
    pop rx213_pos, rx213_bstack
    pop $I19, rx213_bstack
    lt rx213_pos, -1, rx213_done686
    lt rx213_pos, 0, rx213_fail688
    eq $I19, 0, rx213_fail688
    nqp_islist $I20, rx213_cstack
    unless $I20, rx213_jump689
    elements $I18, rx213_bstack
    le $I18, 0, rx213_cut690
    dec $I18
    set $I18, rx213_bstack[$I18]
  rx213_cut690:
    assign rx213_cstack, $I18
  rx213_jump689:
    jump $I19
  rx213_done686:
    rx213_cur."!cursor_fail"()
    .return (rx213_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_48_1346968539.359_caps" :subid("cuid_memo_34_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["EXPR"], $P5002
    box $P5003, 0
    set $P5001["pblock"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_48_1346968539.359_nfa" :subid("cuid_memo_35_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "EXPR"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "ws"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "pblock"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "pblock" :subid("cuid_49_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 741
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx218_tgt
    .local int rx218_pos
    .local int rx218_off
    .local int rx218_eos
    .local int rx218_rep
    .local pmc rx218_cur
    .local pmc rx218_curclass
    .local pmc rx218_bstack
    .local pmc rx218_cstack
    (rx218_cur, rx218_tgt, rx218_pos, rx218_curclass, rx218_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx218_cur
    length rx218_eos, rx218_tgt
    eq $I19, 1, rx218_restart700
    gt rx218_pos, rx218_eos, rx218_fail701
    repr_get_attr_int $I11, self, rx218_curclass, "$!from"
    ne $I11, -1, rxscan219_done707
    goto rxscan219_scan706
  rxscan219_loop705:
    inc rx218_pos
    gt rx218_pos, rx218_eos, rx218_fail701
    repr_bind_attr_int rx218_cur, rx218_curclass, "$!from", rx218_pos
  rxscan219_scan706:
    nqp_rxmark rx218_bstack, rxscan219_loop705, rx218_pos, 0
  rxscan219_done707:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt220_0709
    nqp_push_label $P11, alt220_1714
    nqp_push_label $P11, alt220_2717
    nqp_rxmark rx218_bstack, alt220_end708, -1, 0
    rx218_cur."!alt"(rx218_pos, "alt_nfa__10_1346968540.855", $P11)
    goto rx218_fail701
  alt220_0709:
    repr_bind_attr_int rx218_cur, rx218_curclass, "$!pos", rx218_pos
    $P11 = rx218_cur."lambda"()
    repr_get_attr_int $I11, $P11, rx218_curclass, "$!pos"
    lt $I11, 0, rx218_fail701
    repr_get_attr_int rx218_pos, $P11, rx218_curclass, "$!pos"
    repr_bind_attr_int rx218_cur, rx218_curclass, "$!pos", rx218_pos
    $P11 = rx218_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx218_curclass, "$!pos"
    lt $I11, 0, rx218_fail701
    repr_get_attr_int rx218_pos, $P11, rx218_curclass, "$!pos"
    repr_bind_attr_int rx218_cur, rx218_curclass, "$!pos", rx218_pos
    $P11 = rx218_cur."signature"()
    repr_get_attr_int $I11, $P11, rx218_curclass, "$!pos"
    lt $I11, 0, rx218_fail701
    nqp_rxmark rx218_bstack, rxsubrule223_pass712, -1, 0
  rxsubrule223_pass712:
    rx218_cstack = rx218_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx218_pos, $P11, rx218_curclass, "$!pos"
    repr_bind_attr_int rx218_cur, rx218_curclass, "$!pos", rx218_pos
    $P11 = rx218_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx218_curclass, "$!pos"
    lt $I11, 0, rx218_fail701
    nqp_rxmark rx218_bstack, rxsubrule224_pass713, -1, 0
  rxsubrule224_pass713:
    rx218_cstack = rx218_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx218_pos, $P11, rx218_curclass, "$!pos"
    goto alt220_end708
  alt220_1714:
    ge rx218_pos, rx218_eos, rx218_fail701
    substr $S11, rx218_tgt, rx218_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx218_fail701
    repr_bind_attr_int rx218_cur, rx218_curclass, "$!pos", rx218_pos
    $P11 = rx218_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx218_curclass, "$!pos"
    lt $I11, 0, rx218_fail701
    repr_get_attr_int rx218_pos, $P11, rx218_curclass, "$!pos"
    repr_bind_attr_int rx218_cur, rx218_curclass, "$!pos", rx218_pos
    $P11 = rx218_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx218_curclass, "$!pos"
    lt $I11, 0, rx218_fail701
    nqp_rxmark rx218_bstack, rxsubrule226_pass716, -1, 0
  rxsubrule226_pass716:
    rx218_cstack = rx218_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx218_pos, $P11, rx218_curclass, "$!pos"
    goto alt220_end708
  alt220_2717:
    repr_bind_attr_int rx218_cur, rx218_curclass, "$!pos", rx218_pos
    $P11 = rx218_cur."panic"("Missing block")
    repr_get_attr_int $I11, $P11, rx218_curclass, "$!pos"
    lt $I11, 0, rx218_fail701
    repr_get_attr_int rx218_pos, $P11, rx218_curclass, "$!pos"
    goto alt220_end708
  alt220_end708:
    rx218_cur."!cursor_pass"(rx218_pos, "pblock", 'backtrack'=>1)
    .return (rx218_cur)
  rx218_restart700:
    repr_get_attr_obj rx218_cstack, rx218_cur, rx218_curclass, "$!cstack"
  rx218_fail701:
    unless rx218_bstack, rx218_done699
    pop $I19, rx218_bstack
    if_null rx218_cstack, rx218_cstack_done704
    unless rx218_cstack, rx218_cstack_done704
    dec $I19
    set $P11, rx218_cstack[$I19]
  rx218_cstack_done704:
    pop rx218_rep, rx218_bstack
    pop rx218_pos, rx218_bstack
    pop $I19, rx218_bstack
    lt rx218_pos, -1, rx218_done699
    lt rx218_pos, 0, rx218_fail701
    eq $I19, 0, rx218_fail701
    nqp_islist $I20, rx218_cstack
    unless $I20, rx218_jump702
    elements $I18, rx218_bstack
    le $I18, 0, rx218_cut703
    dec $I18
    set $I18, rx218_bstack[$I18]
  rx218_cut703:
    assign rx218_cstack, $I18
  rx218_jump702:
    jump $I19
  rx218_done699:
    rx218_cur."!cursor_fail"()
    .return (rx218_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_49_1346968539.359_caps" :subid("cuid_memo_36_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["signature"], $P5002
    box $P5003, 0
    set $P5001["blockoid"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_49_1346968539.359_nfa" :subid("cuid_memo_37_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "lambda"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    box $P5007, 6
    push $P5003, $P5007
    box $P5008, "{"
    push $P5003, $P5008
    box $P5009, 5
    push $P5003, $P5009
    box $P5010, 8
    push $P5003, $P5010
    box $P5011, "panic"
    push $P5003, $P5011
    box $P5012, 0
    push $P5003, $P5012
    push $P5001, $P5003
    new $P5013, 'ResizablePMCArray'
    box $P5014, 8
    push $P5013, $P5014
    box $P5015, "newpad"
    push $P5013, $P5015
    box $P5016, 3
    push $P5013, $P5016
    push $P5001, $P5013
    new $P5017, 'ResizablePMCArray'
    box $P5018, 8
    push $P5017, $P5018
    box $P5019, "signature"
    push $P5017, $P5019
    box $P5020, 4
    push $P5017, $P5020
    push $P5001, $P5017
    new $P5021, 'ResizablePMCArray'
    box $P5022, 8
    push $P5021, $P5022
    box $P5023, "blockoid"
    push $P5021, $P5023
    box $P5024, 0
    push $P5021, $P5024
    push $P5001, $P5021
    new $P5025, 'ResizablePMCArray'
    box $P5026, 0
    push $P5025, $P5026
    box $P5027, 0
    push $P5025, $P5027
    box $P5028, 0
    push $P5025, $P5028
    push $P5001, $P5025
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_49_1346968539.359_alt_nfa__10_1346968540.855" :subid("cuid_memo_38_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 8
    push $P5004, $P5005
    box $P5006, "lambda"
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 8
    push $P5008, $P5009
    box $P5010, "newpad"
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 8
    push $P5012, $P5013
    box $P5014, "signature"
    push $P5012, $P5014
    box $P5015, 4
    push $P5012, $P5015
    push $P5002, $P5012
    new $P5016, 'ResizablePMCArray'
    box $P5017, 8
    push $P5016, $P5017
    box $P5018, "blockoid"
    push $P5016, $P5018
    box $P5019, 0
    push $P5016, $P5019
    push $P5002, $P5016
    push $P5001, $P5002
    new $P5020, 'ResizablePMCArray'
    new $P5021, 'ResizablePMCArray'
    push $P5020, $P5021
    new $P5022, 'ResizablePMCArray'
    box $P5023, 6
    push $P5022, $P5023
    box $P5024, "{"
    push $P5022, $P5024
    box $P5025, 2
    push $P5022, $P5025
    push $P5020, $P5022
    new $P5026, 'ResizablePMCArray'
    box $P5027, 0
    push $P5026, $P5027
    box $P5028, 0
    push $P5026, $P5028
    box $P5029, 0
    push $P5026, $P5029
    push $P5020, $P5026
    push $P5001, $P5020
    new $P5030, 'ResizablePMCArray'
    new $P5031, 'ResizablePMCArray'
    push $P5030, $P5031
    new $P5032, 'ResizablePMCArray'
    box $P5033, 8
    push $P5032, $P5033
    box $P5034, "panic"
    push $P5032, $P5034
    box $P5035, 0
    push $P5032, $P5035
    push $P5030, $P5032
    push $P5001, $P5030
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "lambda" :subid("cuid_50_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 752
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx228_tgt
    .local int rx228_pos
    .local int rx228_off
    .local int rx228_eos
    .local int rx228_rep
    .local pmc rx228_cur
    .local pmc rx228_curclass
    .local pmc rx228_bstack
    .local pmc rx228_cstack
    (rx228_cur, rx228_tgt, rx228_pos, rx228_curclass, rx228_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx228_cur
    length rx228_eos, rx228_tgt
    eq $I19, 1, rx228_restart721
    gt rx228_pos, rx228_eos, rx228_fail722
    repr_get_attr_int $I11, self, rx228_curclass, "$!from"
    ne $I11, -1, rxscan229_done728
    goto rxscan229_scan727
  rxscan229_loop726:
    inc rx228_pos
    gt rx228_pos, rx228_eos, rx228_fail722
    repr_bind_attr_int rx228_cur, rx228_curclass, "$!from", rx228_pos
  rxscan229_scan727:
    nqp_rxmark rx228_bstack, rxscan229_loop726, rx228_pos, 0
  rxscan229_done728:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt230_0730
    nqp_push_label $P11, alt230_1731
    nqp_rxmark rx228_bstack, alt230_end729, -1, 0
    rx228_cur."!alt"(rx228_pos, "alt_nfa__11_1346968540.862", $P11)
    goto rx228_fail722
  alt230_0730:
    add $I11, rx228_pos, 2
    gt $I11, rx228_eos, rx228_fail722
    substr $S10, rx228_tgt, rx228_pos, 2
    ne $S10, ucs4:"->", rx228_fail722
    add rx228_pos, 2
    goto alt230_end729
  alt230_1731:
    add $I11, rx228_pos, 3
    gt $I11, rx228_eos, rx228_fail722
    substr $S10, rx228_tgt, rx228_pos, 3
    ne $S10, ucs4:"<->", rx228_fail722
    add rx228_pos, 3
    goto alt230_end729
  alt230_end729:
    rx228_cur."!cursor_pass"(rx228_pos, "lambda", 'backtrack'=>1)
    .return (rx228_cur)
  rx228_restart721:
    repr_get_attr_obj rx228_cstack, rx228_cur, rx228_curclass, "$!cstack"
  rx228_fail722:
    unless rx228_bstack, rx228_done720
    pop $I19, rx228_bstack
    if_null rx228_cstack, rx228_cstack_done725
    unless rx228_cstack, rx228_cstack_done725
    dec $I19
    set $P11, rx228_cstack[$I19]
  rx228_cstack_done725:
    pop rx228_rep, rx228_bstack
    pop rx228_pos, rx228_bstack
    pop $I19, rx228_bstack
    lt rx228_pos, -1, rx228_done720
    lt rx228_pos, 0, rx228_fail722
    eq $I19, 0, rx228_fail722
    nqp_islist $I20, rx228_cstack
    unless $I20, rx228_jump723
    elements $I18, rx228_bstack
    le $I18, 0, rx228_cut724
    dec $I18
    set $I18, rx228_bstack[$I18]
  rx228_cut724:
    assign rx228_cstack, $I18
  rx228_jump723:
    jump $I19
  rx228_done720:
    rx228_cur."!cursor_fail"()
    .return (rx228_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_50_1346968539.359_caps" :subid("cuid_memo_39_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_50_1346968539.359_nfa" :subid("cuid_memo_40_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 45
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    box $P5007, 2
    push $P5003, $P5007
    box $P5008, 60
    push $P5003, $P5008
    box $P5009, 3
    push $P5003, $P5009
    push $P5001, $P5003
    new $P5010, 'ResizablePMCArray'
    box $P5011, 2
    push $P5010, $P5011
    box $P5012, 62
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    push $P5001, $P5010
    new $P5014, 'ResizablePMCArray'
    box $P5015, 2
    push $P5014, $P5015
    box $P5016, 45
    push $P5014, $P5016
    box $P5017, 4
    push $P5014, $P5017
    push $P5001, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 2
    push $P5018, $P5019
    box $P5020, 62
    push $P5018, $P5020
    box $P5021, 0
    push $P5018, $P5021
    push $P5001, $P5018
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_50_1346968539.359_alt_nfa__11_1346968540.862" :subid("cuid_memo_41_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 45
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 62
    push $P5008, $P5010
    box $P5011, 0
    push $P5008, $P5011
    push $P5002, $P5008
    push $P5001, $P5002
    new $P5012, 'ResizablePMCArray'
    new $P5013, 'ResizablePMCArray'
    push $P5012, $P5013
    new $P5014, 'ResizablePMCArray'
    box $P5015, 2
    push $P5014, $P5015
    box $P5016, 60
    push $P5014, $P5016
    box $P5017, 2
    push $P5014, $P5017
    push $P5012, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 2
    push $P5018, $P5019
    box $P5020, 45
    push $P5018, $P5020
    box $P5021, 3
    push $P5018, $P5021
    push $P5012, $P5018
    new $P5022, 'ResizablePMCArray'
    box $P5023, 2
    push $P5022, $P5023
    box $P5024, 62
    push $P5022, $P5024
    box $P5025, 0
    push $P5022, $P5025
    push $P5012, $P5022
    push $P5001, $P5012
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "block" :subid("cuid_51_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 754
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx231_tgt
    .local int rx231_pos
    .local int rx231_off
    .local int rx231_eos
    .local int rx231_rep
    .local pmc rx231_cur
    .local pmc rx231_curclass
    .local pmc rx231_bstack
    .local pmc rx231_cstack
    (rx231_cur, rx231_tgt, rx231_pos, rx231_curclass, rx231_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx231_cur
    length rx231_eos, rx231_tgt
    eq $I19, 1, rx231_restart734
    gt rx231_pos, rx231_eos, rx231_fail735
    repr_get_attr_int $I11, self, rx231_curclass, "$!from"
    ne $I11, -1, rxscan232_done741
    goto rxscan232_scan740
  rxscan232_loop739:
    inc rx231_pos
    gt rx231_pos, rx231_eos, rx231_fail735
    repr_bind_attr_int rx231_cur, rx231_curclass, "$!from", rx231_pos
  rxscan232_scan740:
    nqp_rxmark rx231_bstack, rxscan232_loop739, rx231_pos, 0
  rxscan232_done741:
  alt233_0743:
    nqp_rxmark rx231_bstack, alt233_1744, rx231_pos, 0
    ge rx231_pos, rx231_eos, rx231_fail735
    substr $S11, rx231_tgt, rx231_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx231_fail735
    goto alt233_end742
  alt233_1744:
    repr_bind_attr_int rx231_cur, rx231_curclass, "$!pos", rx231_pos
    $P11 = rx231_cur."panic"("Missing block")
    repr_get_attr_int $I11, $P11, rx231_curclass, "$!pos"
    lt $I11, 0, rx231_fail735
    repr_get_attr_int rx231_pos, $P11, rx231_curclass, "$!pos"
  alt233_end742:
    repr_bind_attr_int rx231_cur, rx231_curclass, "$!pos", rx231_pos
    $P11 = rx231_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx231_curclass, "$!pos"
    lt $I11, 0, rx231_fail735
    repr_get_attr_int rx231_pos, $P11, rx231_curclass, "$!pos"
    repr_bind_attr_int rx231_cur, rx231_curclass, "$!pos", rx231_pos
    $P11 = rx231_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx231_curclass, "$!pos"
    lt $I11, 0, rx231_fail735
    nqp_rxmark rx231_bstack, rxsubrule236_pass747, -1, 0
  rxsubrule236_pass747:
    rx231_cstack = rx231_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx231_pos, $P11, rx231_curclass, "$!pos"
    rx231_cur."!cursor_pass"(rx231_pos, "block", 'backtrack'=>1)
    .return (rx231_cur)
  rx231_restart734:
    repr_get_attr_obj rx231_cstack, rx231_cur, rx231_curclass, "$!cstack"
  rx231_fail735:
    unless rx231_bstack, rx231_done733
    pop $I19, rx231_bstack
    if_null rx231_cstack, rx231_cstack_done738
    unless rx231_cstack, rx231_cstack_done738
    dec $I19
    set $P11, rx231_cstack[$I19]
  rx231_cstack_done738:
    pop rx231_rep, rx231_bstack
    pop rx231_pos, rx231_bstack
    pop $I19, rx231_bstack
    lt rx231_pos, -1, rx231_done733
    lt rx231_pos, 0, rx231_fail735
    eq $I19, 0, rx231_fail735
    nqp_islist $I20, rx231_cstack
    unless $I20, rx231_jump736
    elements $I18, rx231_bstack
    le $I18, 0, rx231_cut737
    dec $I18
    set $I18, rx231_bstack[$I18]
  rx231_cut737:
    assign rx231_cstack, $I18
  rx231_jump736:
    jump $I19
  rx231_done733:
    rx231_cur."!cursor_fail"()
    .return (rx231_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_51_1346968539.359_caps" :subid("cuid_memo_42_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["blockoid"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "blockoid" :subid("cuid_52_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 760
    .param pmc _lex_param_0 
    .lex "%*HANDLERS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    new $P5001, 'Hash'
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx237_tgt
    .local int rx237_pos
    .local int rx237_off
    .local int rx237_eos
    .local int rx237_rep
    .local pmc rx237_cur
    .local pmc rx237_curclass
    .local pmc rx237_bstack
    .local pmc rx237_cstack
    (rx237_cur, rx237_tgt, rx237_pos, rx237_curclass, rx237_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx237_cur
    length rx237_eos, rx237_tgt
    eq $I19, 1, rx237_restart750
    gt rx237_pos, rx237_eos, rx237_fail751
    repr_get_attr_int $I11, self, rx237_curclass, "$!from"
    ne $I11, -1, rxscan238_done757
    goto rxscan238_scan756
  rxscan238_loop755:
    inc rx237_pos
    gt rx237_pos, rx237_eos, rx237_fail751
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!from", rx237_pos
  rxscan238_scan756:
    nqp_rxmark rx237_bstack, rxscan238_loop755, rx237_pos, 0
  rxscan238_done757:
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!pos", rx237_pos
    store_lex unicode:"$\x{a2}", rx237_cur
    unless_null $P101, fallback758
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["%HANDLERS"]
    unless_null $P5002, fallback759
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%HANDLERS"], $P5007
    set $P5002, $P5007
  fallback759:
    unless_null $P5002, vivi_239760
    die "Contextual %*HANDLERS not found"
    box $P5008, "Contextual %*HANDLERS not found"
    set $P5002, $P5008
  vivi_239760:
    set $P101, $P5002
  fallback758:
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!pos", rx237_pos
    $P11 = rx237_cur."finishpad"()
    repr_get_attr_int $I11, $P11, rx237_curclass, "$!pos"
    lt $I11, 0, rx237_fail751
    repr_get_attr_int rx237_pos, $P11, rx237_curclass, "$!pos"
  alt241_0763:
    nqp_rxmark rx237_bstack, alt241_1765, rx237_pos, 0
    add $I11, rx237_pos, 14
    gt $I11, rx237_eos, rx237_fail751
    substr $S10, rx237_tgt, rx237_pos, 14
    ne $S10, ucs4:"{YOU_ARE_HERE}", rx237_fail751
    add rx237_pos, 14
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!pos", rx237_pos
    $P11 = rx237_cur."you_are_here"()
    repr_get_attr_int $I11, $P11, rx237_curclass, "$!pos"
    lt $I11, 0, rx237_fail751
    nqp_rxmark rx237_bstack, rxsubrule242_pass764, -1, 0
  rxsubrule242_pass764:
    rx237_cstack = rx237_cur."!cursor_capture"($P11, "you_are_here")
    repr_get_attr_int rx237_pos, $P11, rx237_curclass, "$!pos"
    goto alt241_end762
  alt241_1765:
    add $I11, rx237_pos, 1
    gt $I11, rx237_eos, rx237_fail751
    substr $S10, rx237_tgt, rx237_pos, 1
    ne $S10, ucs4:"{", rx237_fail751
    add rx237_pos, 1
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!pos", rx237_pos
    $P11 = rx237_cur."statementlist"()
    repr_get_attr_int $I11, $P11, rx237_curclass, "$!pos"
    lt $I11, 0, rx237_fail751
    nqp_rxmark rx237_bstack, rxsubrule243_pass766, -1, 0
  rxsubrule243_pass766:
    rx237_cstack = rx237_cur."!cursor_capture"($P11, "statementlist")
    repr_get_attr_int rx237_pos, $P11, rx237_curclass, "$!pos"
  alt244_0768:
    nqp_rxmark rx237_bstack, alt244_1769, rx237_pos, 0
    add $I11, rx237_pos, 1
    gt $I11, rx237_eos, rx237_fail751
    substr $S10, rx237_tgt, rx237_pos, 1
    ne $S10, ucs4:"}", rx237_fail751
    add rx237_pos, 1
    goto alt244_end767
  alt244_1769:
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!pos", rx237_pos
    $P11 = rx237_cur."FAILGOAL"("'}'")
    repr_get_attr_int $I11, $P11, rx237_curclass, "$!pos"
    lt $I11, 0, rx237_fail751
    goto rxsubrule245_pass770
  rxsubrule245_back771:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx237_curclass, "$!pos"
    lt $I11, 0, rx237_fail751
  rxsubrule245_pass770:
    rx237_cstack = rx237_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule245_back771
    push rx237_bstack, $I11
    push rx237_bstack, 0
    push rx237_bstack, rx237_pos
    elements $I11, rx237_cstack
    push rx237_bstack, $I11
    repr_get_attr_int rx237_pos, $P11, rx237_curclass, "$!pos"
  alt244_end767:
  alt241_end762:
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!pos", rx237_pos
    $P11 = rx237_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx237_curclass, "$!pos"
    lt $I11, 0, rx237_fail751
    rx237_cur."!cursor_pass"(rx237_pos, "blockoid", 'backtrack'=>1)
    .return (rx237_cur)
  rx237_restart750:
    repr_get_attr_obj rx237_cstack, rx237_cur, rx237_curclass, "$!cstack"
  rx237_fail751:
    unless rx237_bstack, rx237_done749
    pop $I19, rx237_bstack
    if_null rx237_cstack, rx237_cstack_done754
    unless rx237_cstack, rx237_cstack_done754
    dec $I19
    set $P11, rx237_cstack[$I19]
  rx237_cstack_done754:
    pop rx237_rep, rx237_bstack
    pop rx237_pos, rx237_bstack
    pop $I19, rx237_bstack
    lt rx237_pos, -1, rx237_done749
    lt rx237_pos, 0, rx237_fail751
    eq $I19, 0, rx237_fail751
    nqp_islist $I20, rx237_cstack
    unless $I20, rx237_jump752
    elements $I18, rx237_bstack
    le $I18, 0, rx237_cut753
    dec $I18
    set $I18, rx237_bstack[$I18]
  rx237_cut753:
    assign rx237_cstack, $I18
  rx237_jump752:
    jump $I19
  rx237_done749:
    rx237_cur."!cursor_fail"()
    .return (rx237_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_52_1346968539.359_caps" :subid("cuid_memo_43_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["you_are_here"], $P5002
    box $P5003, 0
    set $P5001["statementlist"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_52_1346968539.359_nfa" :subid("cuid_memo_44_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "finishpad"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 0
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "newpad" :subid("cuid_53_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 770
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx246_tgt
    .local int rx246_pos
    .local int rx246_off
    .local int rx246_eos
    .local int rx246_rep
    .local pmc rx246_cur
    .local pmc rx246_curclass
    .local pmc rx246_bstack
    .local pmc rx246_cstack
    (rx246_cur, rx246_tgt, rx246_pos, rx246_curclass, rx246_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx246_cur
    length rx246_eos, rx246_tgt
    eq $I19, 1, rx246_restart774
    gt rx246_pos, rx246_eos, rx246_fail775
    repr_get_attr_int $I11, self, rx246_curclass, "$!from"
    ne $I11, -1, rxscan247_done781
    goto rxscan247_scan780
  rxscan247_loop779:
    inc rx246_pos
    gt rx246_pos, rx246_eos, rx246_fail775
    repr_bind_attr_int rx246_cur, rx246_curclass, "$!from", rx246_pos
  rxscan247_scan780:
    nqp_rxmark rx246_bstack, rxscan247_loop779, rx246_pos, 0
  rxscan247_done781:
    rx246_cur."!cursor_pass"(rx246_pos, "newpad", 'backtrack'=>1)
    .return (rx246_cur)
  rx246_restart774:
    repr_get_attr_obj rx246_cstack, rx246_cur, rx246_curclass, "$!cstack"
  rx246_fail775:
    unless rx246_bstack, rx246_done773
    pop $I19, rx246_bstack
    if_null rx246_cstack, rx246_cstack_done778
    unless rx246_cstack, rx246_cstack_done778
    dec $I19
    set $P11, rx246_cstack[$I19]
  rx246_cstack_done778:
    pop rx246_rep, rx246_bstack
    pop rx246_pos, rx246_bstack
    pop $I19, rx246_bstack
    lt rx246_pos, -1, rx246_done773
    lt rx246_pos, 0, rx246_fail775
    eq $I19, 0, rx246_fail775
    nqp_islist $I20, rx246_cstack
    unless $I20, rx246_jump776
    elements $I18, rx246_bstack
    le $I18, 0, rx246_cut777
    dec $I18
    set $I18, rx246_bstack[$I18]
  rx246_cut777:
    assign rx246_cstack, $I18
  rx246_jump776:
    jump $I19
  rx246_done773:
    rx246_cur."!cursor_fail"()
    .return (rx246_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_53_1346968539.359_caps" :subid("cuid_memo_45_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_53_1346968539.359_nfa" :subid("cuid_memo_46_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "outerctx" :subid("cuid_54_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 771
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx249_tgt
    .local int rx249_pos
    .local int rx249_off
    .local int rx249_eos
    .local int rx249_rep
    .local pmc rx249_cur
    .local pmc rx249_curclass
    .local pmc rx249_bstack
    .local pmc rx249_cstack
    (rx249_cur, rx249_tgt, rx249_pos, rx249_curclass, rx249_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx249_cur
    length rx249_eos, rx249_tgt
    eq $I19, 1, rx249_restart785
    gt rx249_pos, rx249_eos, rx249_fail786
    repr_get_attr_int $I11, self, rx249_curclass, "$!from"
    ne $I11, -1, rxscan250_done792
    goto rxscan250_scan791
  rxscan250_loop790:
    inc rx249_pos
    gt rx249_pos, rx249_eos, rx249_fail786
    repr_bind_attr_int rx249_cur, rx249_curclass, "$!from", rx249_pos
  rxscan250_scan791:
    nqp_rxmark rx249_bstack, rxscan250_loop790, rx249_pos, 0
  rxscan250_done792:
    rx249_cur."!cursor_pass"(rx249_pos, "outerctx", 'backtrack'=>1)
    .return (rx249_cur)
  rx249_restart785:
    repr_get_attr_obj rx249_cstack, rx249_cur, rx249_curclass, "$!cstack"
  rx249_fail786:
    unless rx249_bstack, rx249_done784
    pop $I19, rx249_bstack
    if_null rx249_cstack, rx249_cstack_done789
    unless rx249_cstack, rx249_cstack_done789
    dec $I19
    set $P11, rx249_cstack[$I19]
  rx249_cstack_done789:
    pop rx249_rep, rx249_bstack
    pop rx249_pos, rx249_bstack
    pop $I19, rx249_bstack
    lt rx249_pos, -1, rx249_done784
    lt rx249_pos, 0, rx249_fail786
    eq $I19, 0, rx249_fail786
    nqp_islist $I20, rx249_cstack
    unless $I20, rx249_jump787
    elements $I18, rx249_bstack
    le $I18, 0, rx249_cut788
    dec $I18
    set $I18, rx249_bstack[$I18]
  rx249_cut788:
    assign rx249_cstack, $I18
  rx249_jump787:
    jump $I19
  rx249_done784:
    rx249_cur."!cursor_fail"()
    .return (rx249_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_54_1346968539.359_caps" :subid("cuid_memo_47_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_54_1346968539.359_nfa" :subid("cuid_memo_48_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "GLOBALish" :subid("cuid_55_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 772
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx252_tgt
    .local int rx252_pos
    .local int rx252_off
    .local int rx252_eos
    .local int rx252_rep
    .local pmc rx252_cur
    .local pmc rx252_curclass
    .local pmc rx252_bstack
    .local pmc rx252_cstack
    (rx252_cur, rx252_tgt, rx252_pos, rx252_curclass, rx252_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx252_cur
    length rx252_eos, rx252_tgt
    eq $I19, 1, rx252_restart796
    gt rx252_pos, rx252_eos, rx252_fail797
    repr_get_attr_int $I11, self, rx252_curclass, "$!from"
    ne $I11, -1, rxscan253_done803
    goto rxscan253_scan802
  rxscan253_loop801:
    inc rx252_pos
    gt rx252_pos, rx252_eos, rx252_fail797
    repr_bind_attr_int rx252_cur, rx252_curclass, "$!from", rx252_pos
  rxscan253_scan802:
    nqp_rxmark rx252_bstack, rxscan253_loop801, rx252_pos, 0
  rxscan253_done803:
    rx252_cur."!cursor_pass"(rx252_pos, "GLOBALish", 'backtrack'=>1)
    .return (rx252_cur)
  rx252_restart796:
    repr_get_attr_obj rx252_cstack, rx252_cur, rx252_curclass, "$!cstack"
  rx252_fail797:
    unless rx252_bstack, rx252_done795
    pop $I19, rx252_bstack
    if_null rx252_cstack, rx252_cstack_done800
    unless rx252_cstack, rx252_cstack_done800
    dec $I19
    set $P11, rx252_cstack[$I19]
  rx252_cstack_done800:
    pop rx252_rep, rx252_bstack
    pop rx252_pos, rx252_bstack
    pop $I19, rx252_bstack
    lt rx252_pos, -1, rx252_done795
    lt rx252_pos, 0, rx252_fail797
    eq $I19, 0, rx252_fail797
    nqp_islist $I20, rx252_cstack
    unless $I20, rx252_jump798
    elements $I18, rx252_bstack
    le $I18, 0, rx252_cut799
    dec $I18
    set $I18, rx252_bstack[$I18]
  rx252_cut799:
    assign rx252_cstack, $I18
  rx252_jump798:
    jump $I19
  rx252_done795:
    rx252_cur."!cursor_fail"()
    .return (rx252_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_55_1346968539.359_caps" :subid("cuid_memo_49_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_55_1346968539.359_nfa" :subid("cuid_memo_50_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "finishpad" :subid("cuid_56_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 773
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx255_tgt
    .local int rx255_pos
    .local int rx255_off
    .local int rx255_eos
    .local int rx255_rep
    .local pmc rx255_cur
    .local pmc rx255_curclass
    .local pmc rx255_bstack
    .local pmc rx255_cstack
    (rx255_cur, rx255_tgt, rx255_pos, rx255_curclass, rx255_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx255_cur
    length rx255_eos, rx255_tgt
    eq $I19, 1, rx255_restart807
    gt rx255_pos, rx255_eos, rx255_fail808
    repr_get_attr_int $I11, self, rx255_curclass, "$!from"
    ne $I11, -1, rxscan256_done814
    goto rxscan256_scan813
  rxscan256_loop812:
    inc rx255_pos
    gt rx255_pos, rx255_eos, rx255_fail808
    repr_bind_attr_int rx255_cur, rx255_curclass, "$!from", rx255_pos
  rxscan256_scan813:
    nqp_rxmark rx255_bstack, rxscan256_loop812, rx255_pos, 0
  rxscan256_done814:
    rx255_cur."!cursor_pass"(rx255_pos, "finishpad", 'backtrack'=>1)
    .return (rx255_cur)
  rx255_restart807:
    repr_get_attr_obj rx255_cstack, rx255_cur, rx255_curclass, "$!cstack"
  rx255_fail808:
    unless rx255_bstack, rx255_done806
    pop $I19, rx255_bstack
    if_null rx255_cstack, rx255_cstack_done811
    unless rx255_cstack, rx255_cstack_done811
    dec $I19
    set $P11, rx255_cstack[$I19]
  rx255_cstack_done811:
    pop rx255_rep, rx255_bstack
    pop rx255_pos, rx255_bstack
    pop $I19, rx255_bstack
    lt rx255_pos, -1, rx255_done806
    lt rx255_pos, 0, rx255_fail808
    eq $I19, 0, rx255_fail808
    nqp_islist $I20, rx255_cstack
    unless $I20, rx255_jump809
    elements $I18, rx255_bstack
    le $I18, 0, rx255_cut810
    dec $I18
    set $I18, rx255_bstack[$I18]
  rx255_cut810:
    assign rx255_cstack, $I18
  rx255_jump809:
    jump $I19
  rx255_done806:
    rx255_cur."!cursor_fail"()
    .return (rx255_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_56_1346968539.359_caps" :subid("cuid_memo_51_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_56_1346968539.359_nfa" :subid("cuid_memo_52_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "you_are_here" :subid("cuid_57_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 774
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx258_tgt
    .local int rx258_pos
    .local int rx258_off
    .local int rx258_eos
    .local int rx258_rep
    .local pmc rx258_cur
    .local pmc rx258_curclass
    .local pmc rx258_bstack
    .local pmc rx258_cstack
    (rx258_cur, rx258_tgt, rx258_pos, rx258_curclass, rx258_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx258_cur
    length rx258_eos, rx258_tgt
    eq $I19, 1, rx258_restart818
    gt rx258_pos, rx258_eos, rx258_fail819
    repr_get_attr_int $I11, self, rx258_curclass, "$!from"
    ne $I11, -1, rxscan259_done825
    goto rxscan259_scan824
  rxscan259_loop823:
    inc rx258_pos
    gt rx258_pos, rx258_eos, rx258_fail819
    repr_bind_attr_int rx258_cur, rx258_curclass, "$!from", rx258_pos
  rxscan259_scan824:
    nqp_rxmark rx258_bstack, rxscan259_loop823, rx258_pos, 0
  rxscan259_done825:
    rx258_cur."!cursor_pass"(rx258_pos, "you_are_here", 'backtrack'=>1)
    .return (rx258_cur)
  rx258_restart818:
    repr_get_attr_obj rx258_cstack, rx258_cur, rx258_curclass, "$!cstack"
  rx258_fail819:
    unless rx258_bstack, rx258_done817
    pop $I19, rx258_bstack
    if_null rx258_cstack, rx258_cstack_done822
    unless rx258_cstack, rx258_cstack_done822
    dec $I19
    set $P11, rx258_cstack[$I19]
  rx258_cstack_done822:
    pop rx258_rep, rx258_bstack
    pop rx258_pos, rx258_bstack
    pop $I19, rx258_bstack
    lt rx258_pos, -1, rx258_done817
    lt rx258_pos, 0, rx258_fail819
    eq $I19, 0, rx258_fail819
    nqp_islist $I20, rx258_cstack
    unless $I20, rx258_jump820
    elements $I18, rx258_bstack
    le $I18, 0, rx258_cut821
    dec $I18
    set $I18, rx258_bstack[$I18]
  rx258_cut821:
    assign rx258_cstack, $I18
  rx258_jump820:
    jump $I19
  rx258_done817:
    rx258_cur."!cursor_fail"()
    .return (rx258_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_57_1346968539.359_caps" :subid("cuid_memo_53_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_57_1346968539.359_nfa" :subid("cuid_memo_54_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "terminator" :subid("cuid_58_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 776
    .param pmc self 
    $P5001 = self."!protoregex"("terminator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "terminator:sym<;>" :subid("cuid_59_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 778
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx261_tgt
    .local int rx261_pos
    .local int rx261_off
    .local int rx261_eos
    .local int rx261_rep
    .local pmc rx261_cur
    .local pmc rx261_curclass
    .local pmc rx261_bstack
    .local pmc rx261_cstack
    (rx261_cur, rx261_tgt, rx261_pos, rx261_curclass, rx261_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx261_cur
    length rx261_eos, rx261_tgt
    eq $I19, 1, rx261_restart829
    gt rx261_pos, rx261_eos, rx261_fail830
    repr_get_attr_int $I11, self, rx261_curclass, "$!from"
    ne $I11, -1, rxscan262_done836
    goto rxscan262_scan835
  rxscan262_loop834:
    inc rx261_pos
    gt rx261_pos, rx261_eos, rx261_fail830
    repr_bind_attr_int rx261_cur, rx261_curclass, "$!from", rx261_pos
  rxscan262_scan835:
    nqp_rxmark rx261_bstack, rxscan262_loop834, rx261_pos, 0
  rxscan262_done836:
    ge rx261_pos, rx261_eos, rx261_fail830
    substr $S11, rx261_tgt, rx261_pos, 1
    index $I11, ucs4:";", $S11
    lt $I11, 0, rx261_fail830
    rx261_cur."!cursor_pass"(rx261_pos, "terminator:sym<;>", 'backtrack'=>1)
    .return (rx261_cur)
  rx261_restart829:
    repr_get_attr_obj rx261_cstack, rx261_cur, rx261_curclass, "$!cstack"
  rx261_fail830:
    unless rx261_bstack, rx261_done828
    pop $I19, rx261_bstack
    if_null rx261_cstack, rx261_cstack_done833
    unless rx261_cstack, rx261_cstack_done833
    dec $I19
    set $P11, rx261_cstack[$I19]
  rx261_cstack_done833:
    pop rx261_rep, rx261_bstack
    pop rx261_pos, rx261_bstack
    pop $I19, rx261_bstack
    lt rx261_pos, -1, rx261_done828
    lt rx261_pos, 0, rx261_fail830
    eq $I19, 0, rx261_fail830
    nqp_islist $I20, rx261_cstack
    unless $I20, rx261_jump831
    elements $I18, rx261_bstack
    le $I18, 0, rx261_cut832
    dec $I18
    set $I18, rx261_bstack[$I18]
  rx261_cut832:
    assign rx261_cstack, $I18
  rx261_jump831:
    jump $I19
  rx261_done828:
    rx261_cur."!cursor_fail"()
    .return (rx261_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_59_1346968539.359_caps" :subid("cuid_memo_55_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_59_1346968539.359_nfa" :subid("cuid_memo_56_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, ";"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "terminator:sym<}>" :subid("cuid_60_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 779
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx263_tgt
    .local int rx263_pos
    .local int rx263_off
    .local int rx263_eos
    .local int rx263_rep
    .local pmc rx263_cur
    .local pmc rx263_curclass
    .local pmc rx263_bstack
    .local pmc rx263_cstack
    (rx263_cur, rx263_tgt, rx263_pos, rx263_curclass, rx263_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx263_cur
    length rx263_eos, rx263_tgt
    eq $I19, 1, rx263_restart839
    gt rx263_pos, rx263_eos, rx263_fail840
    repr_get_attr_int $I11, self, rx263_curclass, "$!from"
    ne $I11, -1, rxscan264_done846
    goto rxscan264_scan845
  rxscan264_loop844:
    inc rx263_pos
    gt rx263_pos, rx263_eos, rx263_fail840
    repr_bind_attr_int rx263_cur, rx263_curclass, "$!from", rx263_pos
  rxscan264_scan845:
    nqp_rxmark rx263_bstack, rxscan264_loop844, rx263_pos, 0
  rxscan264_done846:
    ge rx263_pos, rx263_eos, rx263_fail840
    substr $S11, rx263_tgt, rx263_pos, 1
    index $I11, ucs4:"}", $S11
    lt $I11, 0, rx263_fail840
    rx263_cur."!cursor_pass"(rx263_pos, "terminator:sym<}>", 'backtrack'=>1)
    .return (rx263_cur)
  rx263_restart839:
    repr_get_attr_obj rx263_cstack, rx263_cur, rx263_curclass, "$!cstack"
  rx263_fail840:
    unless rx263_bstack, rx263_done838
    pop $I19, rx263_bstack
    if_null rx263_cstack, rx263_cstack_done843
    unless rx263_cstack, rx263_cstack_done843
    dec $I19
    set $P11, rx263_cstack[$I19]
  rx263_cstack_done843:
    pop rx263_rep, rx263_bstack
    pop rx263_pos, rx263_bstack
    pop $I19, rx263_bstack
    lt rx263_pos, -1, rx263_done838
    lt rx263_pos, 0, rx263_fail840
    eq $I19, 0, rx263_fail840
    nqp_islist $I20, rx263_cstack
    unless $I20, rx263_jump841
    elements $I18, rx263_bstack
    le $I18, 0, rx263_cut842
    dec $I18
    set $I18, rx263_bstack[$I18]
  rx263_cut842:
    assign rx263_cstack, $I18
  rx263_jump841:
    jump $I19
  rx263_done838:
    rx263_cur."!cursor_fail"()
    .return (rx263_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_60_1346968539.359_caps" :subid("cuid_memo_57_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_60_1346968539.359_nfa" :subid("cuid_memo_58_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "}"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control" :subid("cuid_61_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 783
    .param pmc self 
    $P5001 = self."!protoregex"("statement_control")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<use>" :subid("cuid_62_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 785
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx265_tgt
    .local int rx265_pos
    .local int rx265_off
    .local int rx265_eos
    .local int rx265_rep
    .local pmc rx265_cur
    .local pmc rx265_curclass
    .local pmc rx265_bstack
    .local pmc rx265_cstack
    (rx265_cur, rx265_tgt, rx265_pos, rx265_curclass, rx265_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx265_cur
    length rx265_eos, rx265_tgt
    eq $I19, 1, rx265_restart849
    gt rx265_pos, rx265_eos, rx265_fail850
    repr_get_attr_int $I11, self, rx265_curclass, "$!from"
    ne $I11, -1, rxscan266_done856
    goto rxscan266_scan855
  rxscan266_loop854:
    inc rx265_pos
    gt rx265_pos, rx265_eos, rx265_fail850
    repr_bind_attr_int rx265_cur, rx265_curclass, "$!from", rx265_pos
  rxscan266_scan855:
    nqp_rxmark rx265_bstack, rxscan266_loop854, rx265_pos, 0
  rxscan266_done856:
    nqp_rxmark rx265_bstack, rxcap267_fail858, rx265_pos, 0
    add $I11, rx265_pos, 3
    gt $I11, rx265_eos, rx265_fail850
    substr $S10, rx265_tgt, rx265_pos, 3
    ne $S10, ucs4:"use", rx265_fail850
    add rx265_pos, 3
    nqp_rxpeek $I19, rx265_bstack, rxcap267_fail858
    inc $I19
    set $I11, rx265_bstack[$I19]
    $P11 = rx265_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx265_pos)
    rx265_cstack = rx265_cur."!cursor_capture"($P11, "sym")
    goto rxcap267_done857
  rxcap267_fail858:
    goto rx265_fail850
  rxcap267_done857:
    ge rx265_pos, rx265_eos, rx265_fail850
    is_cclass $I11, .CCLASS_WHITESPACE, rx265_tgt, rx265_pos
    unless $I11, rx265_fail850
    add rx265_pos, 1
    repr_bind_attr_int rx265_cur, rx265_curclass, "$!pos", rx265_pos
    $P11 = rx265_cur."ws"()
    repr_get_attr_int $I11, $P11, rx265_curclass, "$!pos"
    lt $I11, 0, rx265_fail850
    repr_get_attr_int rx265_pos, $P11, rx265_curclass, "$!pos"
    repr_bind_attr_int rx265_cur, rx265_curclass, "$!pos", rx265_pos
    $P11 = rx265_cur."name"()
    repr_get_attr_int $I11, $P11, rx265_curclass, "$!pos"
    lt $I11, 0, rx265_fail850
    nqp_rxmark rx265_bstack, rxsubrule269_pass860, -1, 0
  rxsubrule269_pass860:
    rx265_cstack = rx265_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx265_pos, $P11, rx265_curclass, "$!pos"
    repr_bind_attr_int rx265_cur, rx265_curclass, "$!pos", rx265_pos
    $P11 = rx265_cur."ws"()
    repr_get_attr_int $I11, $P11, rx265_curclass, "$!pos"
    lt $I11, 0, rx265_fail850
    repr_get_attr_int rx265_pos, $P11, rx265_curclass, "$!pos"
    rx265_cur."!cursor_pass"(rx265_pos, "statement_control:sym<use>", 'backtrack'=>1)
    .return (rx265_cur)
  rx265_restart849:
    repr_get_attr_obj rx265_cstack, rx265_cur, rx265_curclass, "$!cstack"
  rx265_fail850:
    unless rx265_bstack, rx265_done848
    pop $I19, rx265_bstack
    if_null rx265_cstack, rx265_cstack_done853
    unless rx265_cstack, rx265_cstack_done853
    dec $I19
    set $P11, rx265_cstack[$I19]
  rx265_cstack_done853:
    pop rx265_rep, rx265_bstack
    pop rx265_pos, rx265_bstack
    pop $I19, rx265_bstack
    lt rx265_pos, -1, rx265_done848
    lt rx265_pos, 0, rx265_fail850
    eq $I19, 0, rx265_fail850
    nqp_islist $I20, rx265_cstack
    unless $I20, rx265_jump851
    elements $I18, rx265_bstack
    le $I18, 0, rx265_cut852
    dec $I18
    set $I18, rx265_bstack[$I18]
  rx265_cut852:
    assign rx265_cstack, $I18
  rx265_jump851:
    jump $I19
  rx265_done848:
    rx265_cur."!cursor_fail"()
    .return (rx265_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_62_1346968539.359_caps" :subid("cuid_memo_59_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["name"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_62_1346968539.359_nfa" :subid("cuid_memo_60_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 117
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 115
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 101
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 4
    push $P5015, $P5016
    box $P5017, 32
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 0
    push $P5019, $P5020
    box $P5021, 0
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<if>" :subid("cuid_63_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 789
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx271_tgt
    .local int rx271_pos
    .local int rx271_off
    .local int rx271_eos
    .local int rx271_rep
    .local pmc rx271_cur
    .local pmc rx271_curclass
    .local pmc rx271_bstack
    .local pmc rx271_cstack
    (rx271_cur, rx271_tgt, rx271_pos, rx271_curclass, rx271_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx271_cur
    length rx271_eos, rx271_tgt
    eq $I19, 1, rx271_restart864
    gt rx271_pos, rx271_eos, rx271_fail865
    repr_get_attr_int $I11, self, rx271_curclass, "$!from"
    ne $I11, -1, rxscan272_done871
    goto rxscan272_scan870
  rxscan272_loop869:
    inc rx271_pos
    gt rx271_pos, rx271_eos, rx271_fail865
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!from", rx271_pos
  rxscan272_scan870:
    nqp_rxmark rx271_bstack, rxscan272_loop869, rx271_pos, 0
  rxscan272_done871:
    nqp_rxmark rx271_bstack, rxcap273_fail873, rx271_pos, 0
    add $I11, rx271_pos, 2
    gt $I11, rx271_eos, rx271_fail865
    substr $S10, rx271_tgt, rx271_pos, 2
    ne $S10, ucs4:"if", rx271_fail865
    add rx271_pos, 2
    nqp_rxpeek $I19, rx271_bstack, rxcap273_fail873
    inc $I19
    set $I11, rx271_bstack[$I19]
    $P11 = rx271_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx271_pos)
    rx271_cstack = rx271_cur."!cursor_capture"($P11, "sym")
    goto rxcap273_done872
  rxcap273_fail873:
    goto rx271_fail865
  rxcap273_done872:
    ge rx271_pos, rx271_eos, rx271_fail865
    is_cclass $I11, .CCLASS_WHITESPACE, rx271_tgt, rx271_pos
    unless $I11, rx271_fail865
    add rx271_pos, 1
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!pos", rx271_pos
    $P11 = rx271_cur."ws"()
    repr_get_attr_int $I11, $P11, rx271_curclass, "$!pos"
    lt $I11, 0, rx271_fail865
    repr_get_attr_int rx271_pos, $P11, rx271_curclass, "$!pos"
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!pos", rx271_pos
    $P11 = rx271_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx271_curclass, "$!pos"
    lt $I11, 0, rx271_fail865
    nqp_rxmark rx271_bstack, rxsubrule275_pass875, -1, 0
  rxsubrule275_pass875:
    rx271_cstack = rx271_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx271_pos, $P11, rx271_curclass, "$!pos"
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!pos", rx271_pos
    $P11 = rx271_cur."ws"()
    repr_get_attr_int $I11, $P11, rx271_curclass, "$!pos"
    lt $I11, 0, rx271_fail865
    repr_get_attr_int rx271_pos, $P11, rx271_curclass, "$!pos"
    nqp_rxmark rx271_bstack, rxquantr277_done878, rx271_pos, 0
  rxquantr277_loop877:
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!pos", rx271_pos
    $P11 = rx271_cur."ws"()
    repr_get_attr_int $I11, $P11, rx271_curclass, "$!pos"
    lt $I11, 0, rx271_fail865
    repr_get_attr_int rx271_pos, $P11, rx271_curclass, "$!pos"
    add $I11, rx271_pos, 5
    gt $I11, rx271_eos, rx271_fail865
    substr $S10, rx271_tgt, rx271_pos, 5
    ne $S10, ucs4:"elsif", rx271_fail865
    add rx271_pos, 5
    ge rx271_pos, rx271_eos, rx271_fail865
    is_cclass $I11, .CCLASS_WHITESPACE, rx271_tgt, rx271_pos
    unless $I11, rx271_fail865
    add rx271_pos, 1
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!pos", rx271_pos
    $P11 = rx271_cur."ws"()
    repr_get_attr_int $I11, $P11, rx271_curclass, "$!pos"
    lt $I11, 0, rx271_fail865
    repr_get_attr_int rx271_pos, $P11, rx271_curclass, "$!pos"
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!pos", rx271_pos
    $P11 = rx271_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx271_curclass, "$!pos"
    lt $I11, 0, rx271_fail865
    nqp_rxmark rx271_bstack, rxsubrule280_pass881, -1, 0
  rxsubrule280_pass881:
    rx271_cstack = rx271_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx271_pos, $P11, rx271_curclass, "$!pos"
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!pos", rx271_pos
    $P11 = rx271_cur."ws"()
    repr_get_attr_int $I11, $P11, rx271_curclass, "$!pos"
    lt $I11, 0, rx271_fail865
    repr_get_attr_int rx271_pos, $P11, rx271_curclass, "$!pos"
    nqp_rxpeek $I19, rx271_bstack, rxquantr277_done878
    inc $I19
    inc $I19
    set rx271_rep, rx271_bstack[$I19]
    nqp_rxcommit rx271_bstack, rxquantr277_done878
    inc rx271_rep
    nqp_rxmark rx271_bstack, rxquantr277_done878, rx271_pos, rx271_rep
    goto rxquantr277_loop877
  rxquantr277_done878:
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!pos", rx271_pos
    $P11 = rx271_cur."ws"()
    repr_get_attr_int $I11, $P11, rx271_curclass, "$!pos"
    lt $I11, 0, rx271_fail865
    repr_get_attr_int rx271_pos, $P11, rx271_curclass, "$!pos"
    nqp_rxmark rx271_bstack, rxquantr283_done885, rx271_pos, 0
  rxquantr283_loop884:
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!pos", rx271_pos
    $P11 = rx271_cur."ws"()
    repr_get_attr_int $I11, $P11, rx271_curclass, "$!pos"
    lt $I11, 0, rx271_fail865
    repr_get_attr_int rx271_pos, $P11, rx271_curclass, "$!pos"
    add $I11, rx271_pos, 4
    gt $I11, rx271_eos, rx271_fail865
    substr $S10, rx271_tgt, rx271_pos, 4
    ne $S10, ucs4:"else", rx271_fail865
    add rx271_pos, 4
    ge rx271_pos, rx271_eos, rx271_fail865
    is_cclass $I11, .CCLASS_WHITESPACE, rx271_tgt, rx271_pos
    unless $I11, rx271_fail865
    add rx271_pos, 1
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!pos", rx271_pos
    $P11 = rx271_cur."ws"()
    repr_get_attr_int $I11, $P11, rx271_curclass, "$!pos"
    lt $I11, 0, rx271_fail865
    repr_get_attr_int rx271_pos, $P11, rx271_curclass, "$!pos"
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!pos", rx271_pos
    $P11 = rx271_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx271_curclass, "$!pos"
    lt $I11, 0, rx271_fail865
    nqp_rxmark rx271_bstack, rxsubrule286_pass888, -1, 0
  rxsubrule286_pass888:
    rx271_cstack = rx271_cur."!cursor_capture"($P11, "else")
    repr_get_attr_int rx271_pos, $P11, rx271_curclass, "$!pos"
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!pos", rx271_pos
    $P11 = rx271_cur."ws"()
    repr_get_attr_int $I11, $P11, rx271_curclass, "$!pos"
    lt $I11, 0, rx271_fail865
    repr_get_attr_int rx271_pos, $P11, rx271_curclass, "$!pos"
    nqp_rxpeek $I19, rx271_bstack, rxquantr283_done885
    inc $I19
    inc $I19
    set rx271_rep, rx271_bstack[$I19]
    nqp_rxcommit rx271_bstack, rxquantr283_done885
    inc rx271_rep
  rxquantr283_done885:
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!pos", rx271_pos
    $P11 = rx271_cur."ws"()
    repr_get_attr_int $I11, $P11, rx271_curclass, "$!pos"
    lt $I11, 0, rx271_fail865
    repr_get_attr_int rx271_pos, $P11, rx271_curclass, "$!pos"
    rx271_cur."!cursor_pass"(rx271_pos, "statement_control:sym<if>", 'backtrack'=>1)
    .return (rx271_cur)
  rx271_restart864:
    repr_get_attr_obj rx271_cstack, rx271_cur, rx271_curclass, "$!cstack"
  rx271_fail865:
    unless rx271_bstack, rx271_done863
    pop $I19, rx271_bstack
    if_null rx271_cstack, rx271_cstack_done868
    unless rx271_cstack, rx271_cstack_done868
    dec $I19
    set $P11, rx271_cstack[$I19]
  rx271_cstack_done868:
    pop rx271_rep, rx271_bstack
    pop rx271_pos, rx271_bstack
    pop $I19, rx271_bstack
    lt rx271_pos, -1, rx271_done863
    lt rx271_pos, 0, rx271_fail865
    eq $I19, 0, rx271_fail865
    nqp_islist $I20, rx271_cstack
    unless $I20, rx271_jump866
    elements $I18, rx271_bstack
    le $I18, 0, rx271_cut867
    dec $I18
    set $I18, rx271_bstack[$I18]
  rx271_cut867:
    assign rx271_cstack, $I18
  rx271_jump866:
    jump $I19
  rx271_done863:
    rx271_cur."!cursor_fail"()
    .return (rx271_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_63_1346968539.359_caps" :subid("cuid_memo_61_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 2
    set $P5001["xblock"], $P5003
    box $P5004, 2
    set $P5001["else"], $P5004
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_63_1346968539.359_nfa" :subid("cuid_memo_62_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 105
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 102
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 4
    push $P5011, $P5012
    box $P5013, 32
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 0
    push $P5015, $P5016
    box $P5017, 0
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<unless>" :subid("cuid_65_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 796
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_64_1346968539.359' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx289_tgt
    .local int rx289_pos
    .local int rx289_off
    .local int rx289_eos
    .local int rx289_rep
    .local pmc rx289_cur
    .local pmc rx289_curclass
    .local pmc rx289_bstack
    .local pmc rx289_cstack
    (rx289_cur, rx289_tgt, rx289_pos, rx289_curclass, rx289_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx289_cur
    length rx289_eos, rx289_tgt
    eq $I19, 1, rx289_restart893
    gt rx289_pos, rx289_eos, rx289_fail894
    repr_get_attr_int $I11, self, rx289_curclass, "$!from"
    ne $I11, -1, rxscan290_done900
    goto rxscan290_scan899
  rxscan290_loop898:
    inc rx289_pos
    gt rx289_pos, rx289_eos, rx289_fail894
    repr_bind_attr_int rx289_cur, rx289_curclass, "$!from", rx289_pos
  rxscan290_scan899:
    nqp_rxmark rx289_bstack, rxscan290_loop898, rx289_pos, 0
  rxscan290_done900:
    nqp_rxmark rx289_bstack, rxcap291_fail902, rx289_pos, 0
    add $I11, rx289_pos, 6
    gt $I11, rx289_eos, rx289_fail894
    substr $S10, rx289_tgt, rx289_pos, 6
    ne $S10, ucs4:"unless", rx289_fail894
    add rx289_pos, 6
    nqp_rxpeek $I19, rx289_bstack, rxcap291_fail902
    inc $I19
    set $I11, rx289_bstack[$I19]
    $P11 = rx289_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx289_pos)
    rx289_cstack = rx289_cur."!cursor_capture"($P11, "sym")
    goto rxcap291_done901
  rxcap291_fail902:
    goto rx289_fail894
  rxcap291_done901:
    ge rx289_pos, rx289_eos, rx289_fail894
    is_cclass $I11, .CCLASS_WHITESPACE, rx289_tgt, rx289_pos
    unless $I11, rx289_fail894
    add rx289_pos, 1
    repr_bind_attr_int rx289_cur, rx289_curclass, "$!pos", rx289_pos
    $P11 = rx289_cur."ws"()
    repr_get_attr_int $I11, $P11, rx289_curclass, "$!pos"
    lt $I11, 0, rx289_fail894
    repr_get_attr_int rx289_pos, $P11, rx289_curclass, "$!pos"
    repr_bind_attr_int rx289_cur, rx289_curclass, "$!pos", rx289_pos
    $P11 = rx289_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx289_curclass, "$!pos"
    lt $I11, 0, rx289_fail894
    nqp_rxmark rx289_bstack, rxsubrule293_pass904, -1, 0
  rxsubrule293_pass904:
    rx289_cstack = rx289_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx289_pos, $P11, rx289_curclass, "$!pos"
    repr_bind_attr_int rx289_cur, rx289_curclass, "$!pos", rx289_pos
    $P11 = rx289_cur."ws"()
    repr_get_attr_int $I11, $P11, rx289_curclass, "$!pos"
    lt $I11, 0, rx289_fail894
    repr_get_attr_int rx289_pos, $P11, rx289_curclass, "$!pos"
  alt295_0907:
    nqp_rxmark rx289_bstack, alt295_1920, rx289_pos, 0
    repr_bind_attr_int rx289_cur, rx289_curclass, "$!pos", rx289_pos
    $P11 = rx289_cur."ws"()
    repr_get_attr_int $I11, $P11, rx289_curclass, "$!pos"
    lt $I11, 0, rx289_fail894
    repr_get_attr_int rx289_pos, $P11, rx289_curclass, "$!pos"
    .const 'Sub' $P5001 = 'cuid_64_1346968539.359' 
    capture_lex $P5001
    repr_bind_attr_int rx289_cur, rx289_curclass, "$!pos", rx289_pos
    $P11 = rx289_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx289_curclass, "$!pos"
    ge $I11, 0, rx289_fail894
    repr_bind_attr_int rx289_cur, rx289_curclass, "$!pos", rx289_pos
    $P11 = rx289_cur."ws"()
    repr_get_attr_int $I11, $P11, rx289_curclass, "$!pos"
    lt $I11, 0, rx289_fail894
    repr_get_attr_int rx289_pos, $P11, rx289_curclass, "$!pos"
    goto alt295_end906
  alt295_1920:
    repr_bind_attr_int rx289_cur, rx289_curclass, "$!pos", rx289_pos
    $P11 = rx289_cur."ws"()
    repr_get_attr_int $I11, $P11, rx289_curclass, "$!pos"
    lt $I11, 0, rx289_fail894
    repr_get_attr_int rx289_pos, $P11, rx289_curclass, "$!pos"
    repr_bind_attr_int rx289_cur, rx289_curclass, "$!pos", rx289_pos
    $P11 = rx289_cur."panic"("unless does not take \"else\", please rewrite using \"if\"")
    repr_get_attr_int $I11, $P11, rx289_curclass, "$!pos"
    lt $I11, 0, rx289_fail894
    repr_get_attr_int rx289_pos, $P11, rx289_curclass, "$!pos"
    repr_bind_attr_int rx289_cur, rx289_curclass, "$!pos", rx289_pos
    $P11 = rx289_cur."ws"()
    repr_get_attr_int $I11, $P11, rx289_curclass, "$!pos"
    lt $I11, 0, rx289_fail894
    repr_get_attr_int rx289_pos, $P11, rx289_curclass, "$!pos"
  alt295_end906:
    repr_bind_attr_int rx289_cur, rx289_curclass, "$!pos", rx289_pos
    $P11 = rx289_cur."ws"()
    repr_get_attr_int $I11, $P11, rx289_curclass, "$!pos"
    lt $I11, 0, rx289_fail894
    repr_get_attr_int rx289_pos, $P11, rx289_curclass, "$!pos"
    rx289_cur."!cursor_pass"(rx289_pos, "statement_control:sym<unless>", 'backtrack'=>1)
    .return (rx289_cur)
  rx289_restart893:
    repr_get_attr_obj rx289_cstack, rx289_cur, rx289_curclass, "$!cstack"
  rx289_fail894:
    unless rx289_bstack, rx289_done892
    pop $I19, rx289_bstack
    if_null rx289_cstack, rx289_cstack_done897
    unless rx289_cstack, rx289_cstack_done897
    dec $I19
    set $P11, rx289_cstack[$I19]
  rx289_cstack_done897:
    pop rx289_rep, rx289_bstack
    pop rx289_pos, rx289_bstack
    pop $I19, rx289_bstack
    lt rx289_pos, -1, rx289_done892
    lt rx289_pos, 0, rx289_fail894
    eq $I19, 0, rx289_fail894
    nqp_islist $I20, rx289_cstack
    unless $I20, rx289_jump895
    elements $I18, rx289_bstack
    le $I18, 0, rx289_cut896
    dec $I18
    set $I18, rx289_bstack[$I18]
  rx289_cut896:
    assign rx289_cstack, $I18
  rx289_jump895:
    jump $I19
  rx289_done892:
    rx289_cur."!cursor_fail"()
    .return (rx289_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_65_1346968539.359_caps" :subid("cuid_memo_63_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["xblock"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_65_1346968539.359_nfa" :subid("cuid_memo_64_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 117
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 110
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 108
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 101
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 115
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 115
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 4
    push $P5027, $P5028
    box $P5029, 32
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 0
    push $P5031, $P5032
    box $P5033, 0
    push $P5031, $P5033
    box $P5034, 0
    push $P5031, $P5034
    push $P5001, $P5031
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_64_1346968539.359") :anon :lex :outer("cuid_65_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx297_tgt
    .local int rx297_pos
    .local int rx297_off
    .local int rx297_eos
    .local int rx297_rep
    .local pmc rx297_cur
    .local pmc rx297_curclass
    .local pmc rx297_bstack
    .local pmc rx297_cstack
    (rx297_cur, rx297_tgt, rx297_pos, rx297_curclass, rx297_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx297_cur
    length rx297_eos, rx297_tgt
    eq $I19, 1, rx297_restart911
    gt rx297_pos, rx297_eos, rx297_fail912
    repr_get_attr_int $I11, self, rx297_curclass, "$!from"
    ne $I11, -1, rxscan298_done918
    goto rxscan298_scan917
  rxscan298_loop916:
    inc rx297_pos
    gt rx297_pos, rx297_eos, rx297_fail912
    repr_bind_attr_int rx297_cur, rx297_curclass, "$!from", rx297_pos
  rxscan298_scan917:
    nqp_rxmark rx297_bstack, rxscan298_loop916, rx297_pos, 0
  rxscan298_done918:
    add $I11, rx297_pos, 4
    gt $I11, rx297_eos, rx297_fail912
    substr $S10, rx297_tgt, rx297_pos, 4
    ne $S10, ucs4:"else", rx297_fail912
    add rx297_pos, 4
    rx297_cur."!cursor_pass"(rx297_pos, 'backtrack'=>1)
    .return (rx297_cur)
  rx297_restart911:
    repr_get_attr_obj rx297_cstack, rx297_cur, rx297_curclass, "$!cstack"
  rx297_fail912:
    unless rx297_bstack, rx297_done910
    pop $I19, rx297_bstack
    if_null rx297_cstack, rx297_cstack_done915
    unless rx297_cstack, rx297_cstack_done915
    dec $I19
    set $P11, rx297_cstack[$I19]
  rx297_cstack_done915:
    pop rx297_rep, rx297_bstack
    pop rx297_pos, rx297_bstack
    pop $I19, rx297_bstack
    lt rx297_pos, -1, rx297_done910
    lt rx297_pos, 0, rx297_fail912
    eq $I19, 0, rx297_fail912
    nqp_islist $I20, rx297_cstack
    unless $I20, rx297_jump913
    elements $I18, rx297_bstack
    le $I18, 0, rx297_cut914
    dec $I18
    set $I18, rx297_bstack[$I18]
  rx297_cut914:
    assign rx297_cstack, $I18
  rx297_jump913:
    jump $I19
  rx297_done910:
    rx297_cur."!cursor_fail"()
    .return (rx297_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_64_1346968539.359_caps" :subid("cuid_memo_65_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_64_1346968539.359_nfa" :subid("cuid_memo_66_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 101
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 108
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 115
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 101
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<while>" :subid("cuid_66_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 802
    .param pmc _lex_param_0 
    .lex "$*CONTROL_USED", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx304_tgt
    .local int rx304_pos
    .local int rx304_off
    .local int rx304_eos
    .local int rx304_rep
    .local pmc rx304_cur
    .local pmc rx304_curclass
    .local pmc rx304_bstack
    .local pmc rx304_cstack
    (rx304_cur, rx304_tgt, rx304_pos, rx304_curclass, rx304_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx304_cur
    length rx304_eos, rx304_tgt
    eq $I19, 1, rx304_restart927
    gt rx304_pos, rx304_eos, rx304_fail928
    repr_get_attr_int $I11, self, rx304_curclass, "$!from"
    ne $I11, -1, rxscan305_done934
    goto rxscan305_scan933
  rxscan305_loop932:
    inc rx304_pos
    gt rx304_pos, rx304_eos, rx304_fail928
    repr_bind_attr_int rx304_cur, rx304_curclass, "$!from", rx304_pos
  rxscan305_scan933:
    nqp_rxmark rx304_bstack, rxscan305_loop932, rx304_pos, 0
  rxscan305_done934:
    repr_bind_attr_int rx304_cur, rx304_curclass, "$!pos", rx304_pos
    store_lex unicode:"$\x{a2}", rx304_cur
    box $P5002, 0
    set $P101, $P5002
    nqp_rxmark rx304_bstack, rxcap306_fail936, rx304_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt307_0938
    nqp_push_label $P11, alt307_1939
    nqp_rxmark rx304_bstack, alt307_end937, -1, 0
    rx304_cur."!alt"(rx304_pos, "alt_nfa__12_1346968540.973", $P11)
    goto rx304_fail928
  alt307_0938:
    add $I11, rx304_pos, 5
    gt $I11, rx304_eos, rx304_fail928
    substr $S10, rx304_tgt, rx304_pos, 5
    ne $S10, ucs4:"while", rx304_fail928
    add rx304_pos, 5
    goto alt307_end937
  alt307_1939:
    add $I11, rx304_pos, 5
    gt $I11, rx304_eos, rx304_fail928
    substr $S10, rx304_tgt, rx304_pos, 5
    ne $S10, ucs4:"until", rx304_fail928
    add rx304_pos, 5
    goto alt307_end937
  alt307_end937:
    nqp_rxcommit rx304_bstack, alt307_end937
    nqp_rxpeek $I19, rx304_bstack, rxcap306_fail936
    inc $I19
    set $I11, rx304_bstack[$I19]
    $P11 = rx304_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx304_pos)
    rx304_cstack = rx304_cur."!cursor_capture"($P11, "sym")
    goto rxcap306_done935
  rxcap306_fail936:
    goto rx304_fail928
  rxcap306_done935:
    ge rx304_pos, rx304_eos, rx304_fail928
    is_cclass $I11, .CCLASS_WHITESPACE, rx304_tgt, rx304_pos
    unless $I11, rx304_fail928
    add rx304_pos, 1
    repr_bind_attr_int rx304_cur, rx304_curclass, "$!pos", rx304_pos
    $P11 = rx304_cur."ws"()
    repr_get_attr_int $I11, $P11, rx304_curclass, "$!pos"
    lt $I11, 0, rx304_fail928
    repr_get_attr_int rx304_pos, $P11, rx304_curclass, "$!pos"
    repr_bind_attr_int rx304_cur, rx304_curclass, "$!pos", rx304_pos
    $P11 = rx304_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx304_curclass, "$!pos"
    lt $I11, 0, rx304_fail928
    nqp_rxmark rx304_bstack, rxsubrule309_pass941, -1, 0
  rxsubrule309_pass941:
    rx304_cstack = rx304_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx304_pos, $P11, rx304_curclass, "$!pos"
    repr_bind_attr_int rx304_cur, rx304_curclass, "$!pos", rx304_pos
    $P11 = rx304_cur."ws"()
    repr_get_attr_int $I11, $P11, rx304_curclass, "$!pos"
    lt $I11, 0, rx304_fail928
    repr_get_attr_int rx304_pos, $P11, rx304_curclass, "$!pos"
    rx304_cur."!cursor_pass"(rx304_pos, "statement_control:sym<while>", 'backtrack'=>1)
    .return (rx304_cur)
  rx304_restart927:
    repr_get_attr_obj rx304_cstack, rx304_cur, rx304_curclass, "$!cstack"
  rx304_fail928:
    unless rx304_bstack, rx304_done926
    pop $I19, rx304_bstack
    if_null rx304_cstack, rx304_cstack_done931
    unless rx304_cstack, rx304_cstack_done931
    dec $I19
    set $P11, rx304_cstack[$I19]
  rx304_cstack_done931:
    pop rx304_rep, rx304_bstack
    pop rx304_pos, rx304_bstack
    pop $I19, rx304_bstack
    lt rx304_pos, -1, rx304_done926
    lt rx304_pos, 0, rx304_fail928
    eq $I19, 0, rx304_fail928
    nqp_islist $I20, rx304_cstack
    unless $I20, rx304_jump929
    elements $I18, rx304_bstack
    le $I18, 0, rx304_cut930
    dec $I18
    set $I18, rx304_bstack[$I18]
  rx304_cut930:
    assign rx304_cstack, $I18
  rx304_jump929:
    jump $I19
  rx304_done926:
    rx304_cur."!cursor_fail"()
    .return (rx304_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_66_1346968539.359_caps" :subid("cuid_memo_67_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["xblock"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_66_1346968539.359_nfa" :subid("cuid_memo_68_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 119
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    box $P5011, 2
    push $P5007, $P5011
    box $P5012, 117
    push $P5007, $P5012
    box $P5013, 8
    push $P5007, $P5013
    push $P5001, $P5007
    new $P5014, 'ResizablePMCArray'
    box $P5015, 2
    push $P5014, $P5015
    box $P5016, 104
    push $P5014, $P5016
    box $P5017, 4
    push $P5014, $P5017
    push $P5001, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 2
    push $P5018, $P5019
    box $P5020, 105
    push $P5018, $P5020
    box $P5021, 5
    push $P5018, $P5021
    push $P5001, $P5018
    new $P5022, 'ResizablePMCArray'
    box $P5023, 2
    push $P5022, $P5023
    box $P5024, 108
    push $P5022, $P5024
    box $P5025, 6
    push $P5022, $P5025
    push $P5001, $P5022
    new $P5026, 'ResizablePMCArray'
    box $P5027, 2
    push $P5026, $P5027
    box $P5028, 101
    push $P5026, $P5028
    box $P5029, 7
    push $P5026, $P5029
    push $P5001, $P5026
    new $P5030, 'ResizablePMCArray'
    box $P5031, 4
    push $P5030, $P5031
    box $P5032, 32
    push $P5030, $P5032
    box $P5033, 12
    push $P5030, $P5033
    push $P5001, $P5030
    new $P5034, 'ResizablePMCArray'
    box $P5035, 2
    push $P5034, $P5035
    box $P5036, 110
    push $P5034, $P5036
    box $P5037, 9
    push $P5034, $P5037
    push $P5001, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 2
    push $P5038, $P5039
    box $P5040, 116
    push $P5038, $P5040
    box $P5041, 10
    push $P5038, $P5041
    push $P5001, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 105
    push $P5042, $P5044
    box $P5045, 11
    push $P5042, $P5045
    push $P5001, $P5042
    new $P5046, 'ResizablePMCArray'
    box $P5047, 2
    push $P5046, $P5047
    box $P5048, 108
    push $P5046, $P5048
    box $P5049, 7
    push $P5046, $P5049
    push $P5001, $P5046
    new $P5050, 'ResizablePMCArray'
    box $P5051, 0
    push $P5050, $P5051
    box $P5052, 0
    push $P5050, $P5052
    box $P5053, 0
    push $P5050, $P5053
    push $P5001, $P5050
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_66_1346968539.359_alt_nfa__12_1346968540.973" :subid("cuid_memo_69_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 119
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 104
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 2
    push $P5012, $P5013
    box $P5014, 105
    push $P5012, $P5014
    box $P5015, 4
    push $P5012, $P5015
    push $P5002, $P5012
    new $P5016, 'ResizablePMCArray'
    box $P5017, 2
    push $P5016, $P5017
    box $P5018, 108
    push $P5016, $P5018
    box $P5019, 5
    push $P5016, $P5019
    push $P5002, $P5016
    new $P5020, 'ResizablePMCArray'
    box $P5021, 2
    push $P5020, $P5021
    box $P5022, 101
    push $P5020, $P5022
    box $P5023, 0
    push $P5020, $P5023
    push $P5002, $P5020
    push $P5001, $P5002
    new $P5024, 'ResizablePMCArray'
    new $P5025, 'ResizablePMCArray'
    push $P5024, $P5025
    new $P5026, 'ResizablePMCArray'
    box $P5027, 2
    push $P5026, $P5027
    box $P5028, 117
    push $P5026, $P5028
    box $P5029, 2
    push $P5026, $P5029
    push $P5024, $P5026
    new $P5030, 'ResizablePMCArray'
    box $P5031, 2
    push $P5030, $P5031
    box $P5032, 110
    push $P5030, $P5032
    box $P5033, 3
    push $P5030, $P5033
    push $P5024, $P5030
    new $P5034, 'ResizablePMCArray'
    box $P5035, 2
    push $P5034, $P5035
    box $P5036, 116
    push $P5034, $P5036
    box $P5037, 4
    push $P5034, $P5037
    push $P5024, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 2
    push $P5038, $P5039
    box $P5040, 105
    push $P5038, $P5040
    box $P5041, 5
    push $P5038, $P5041
    push $P5024, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 108
    push $P5042, $P5044
    box $P5045, 0
    push $P5042, $P5045
    push $P5024, $P5042
    push $P5001, $P5024
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<repeat>" :subid("cuid_67_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 808
    .param pmc _lex_param_0 
    .lex "$*CONTROL_USED", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx311_tgt
    .local int rx311_pos
    .local int rx311_off
    .local int rx311_eos
    .local int rx311_rep
    .local pmc rx311_cur
    .local pmc rx311_curclass
    .local pmc rx311_bstack
    .local pmc rx311_cstack
    (rx311_cur, rx311_tgt, rx311_pos, rx311_curclass, rx311_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx311_cur
    length rx311_eos, rx311_tgt
    eq $I19, 1, rx311_restart945
    gt rx311_pos, rx311_eos, rx311_fail946
    repr_get_attr_int $I11, self, rx311_curclass, "$!from"
    ne $I11, -1, rxscan312_done952
    goto rxscan312_scan951
  rxscan312_loop950:
    inc rx311_pos
    gt rx311_pos, rx311_eos, rx311_fail946
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!from", rx311_pos
  rxscan312_scan951:
    nqp_rxmark rx311_bstack, rxscan312_loop950, rx311_pos, 0
  rxscan312_done952:
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!pos", rx311_pos
    store_lex unicode:"$\x{a2}", rx311_cur
    box $P5002, 0
    set $P101, $P5002
    nqp_rxmark rx311_bstack, rxcap313_fail954, rx311_pos, 0
    add $I11, rx311_pos, 6
    gt $I11, rx311_eos, rx311_fail946
    substr $S10, rx311_tgt, rx311_pos, 6
    ne $S10, ucs4:"repeat", rx311_fail946
    add rx311_pos, 6
    nqp_rxpeek $I19, rx311_bstack, rxcap313_fail954
    inc $I19
    set $I11, rx311_bstack[$I19]
    $P11 = rx311_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx311_pos)
    rx311_cstack = rx311_cur."!cursor_capture"($P11, "sym")
    goto rxcap313_done953
  rxcap313_fail954:
    goto rx311_fail946
  rxcap313_done953:
    ge rx311_pos, rx311_eos, rx311_fail946
    is_cclass $I11, .CCLASS_WHITESPACE, rx311_tgt, rx311_pos
    unless $I11, rx311_fail946
    add rx311_pos, 1
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!pos", rx311_pos
    $P11 = rx311_cur."ws"()
    repr_get_attr_int $I11, $P11, rx311_curclass, "$!pos"
    lt $I11, 0, rx311_fail946
    repr_get_attr_int rx311_pos, $P11, rx311_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt315_0957
    nqp_push_label $P11, alt315_1967
    nqp_rxmark rx311_bstack, alt315_end956, -1, 0
    rx311_cur."!alt"(rx311_pos, "alt_nfa__13_1346968540.995", $P11)
    goto rx311_fail946
  alt315_0957:
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!pos", rx311_pos
    $P11 = rx311_cur."ws"()
    repr_get_attr_int $I11, $P11, rx311_curclass, "$!pos"
    lt $I11, 0, rx311_fail946
    repr_get_attr_int rx311_pos, $P11, rx311_curclass, "$!pos"
    nqp_rxmark rx311_bstack, rxcap317_fail960, rx311_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt318_0962
    nqp_push_label $P11, alt318_1963
    nqp_rxmark rx311_bstack, alt318_end961, -1, 0
    rx311_cur."!alt"(rx311_pos, "alt_nfa__14_1346968540.995", $P11)
    goto rx311_fail946
  alt318_0962:
    add $I11, rx311_pos, 5
    gt $I11, rx311_eos, rx311_fail946
    substr $S10, rx311_tgt, rx311_pos, 5
    ne $S10, ucs4:"while", rx311_fail946
    add rx311_pos, 5
    goto alt318_end961
  alt318_1963:
    add $I11, rx311_pos, 5
    gt $I11, rx311_eos, rx311_fail946
    substr $S10, rx311_tgt, rx311_pos, 5
    ne $S10, ucs4:"until", rx311_fail946
    add rx311_pos, 5
    goto alt318_end961
  alt318_end961:
    nqp_rxcommit rx311_bstack, alt318_end961
    nqp_rxpeek $I19, rx311_bstack, rxcap317_fail960
    inc $I19
    set $I11, rx311_bstack[$I19]
    $P11 = rx311_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx311_pos)
    rx311_cstack = rx311_cur."!cursor_capture"($P11, "wu")
    goto rxcap317_done959
  rxcap317_fail960:
    goto rx311_fail946
  rxcap317_done959:
    ge rx311_pos, rx311_eos, rx311_fail946
    is_cclass $I11, .CCLASS_WHITESPACE, rx311_tgt, rx311_pos
    unless $I11, rx311_fail946
    add rx311_pos, 1
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!pos", rx311_pos
    $P11 = rx311_cur."ws"()
    repr_get_attr_int $I11, $P11, rx311_curclass, "$!pos"
    lt $I11, 0, rx311_fail946
    repr_get_attr_int rx311_pos, $P11, rx311_curclass, "$!pos"
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!pos", rx311_pos
    $P11 = rx311_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx311_curclass, "$!pos"
    lt $I11, 0, rx311_fail946
    nqp_rxmark rx311_bstack, rxsubrule320_pass965, -1, 0
  rxsubrule320_pass965:
    rx311_cstack = rx311_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx311_pos, $P11, rx311_curclass, "$!pos"
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!pos", rx311_pos
    $P11 = rx311_cur."ws"()
    repr_get_attr_int $I11, $P11, rx311_curclass, "$!pos"
    lt $I11, 0, rx311_fail946
    repr_get_attr_int rx311_pos, $P11, rx311_curclass, "$!pos"
    goto alt315_end956
  alt315_1967:
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!pos", rx311_pos
    $P11 = rx311_cur."ws"()
    repr_get_attr_int $I11, $P11, rx311_curclass, "$!pos"
    lt $I11, 0, rx311_fail946
    repr_get_attr_int rx311_pos, $P11, rx311_curclass, "$!pos"
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!pos", rx311_pos
    $P11 = rx311_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx311_curclass, "$!pos"
    lt $I11, 0, rx311_fail946
    nqp_rxmark rx311_bstack, rxsubrule323_pass969, -1, 0
  rxsubrule323_pass969:
    rx311_cstack = rx311_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx311_pos, $P11, rx311_curclass, "$!pos"
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!pos", rx311_pos
    $P11 = rx311_cur."ws"()
    repr_get_attr_int $I11, $P11, rx311_curclass, "$!pos"
    lt $I11, 0, rx311_fail946
    repr_get_attr_int rx311_pos, $P11, rx311_curclass, "$!pos"
    nqp_rxmark rx311_bstack, rxcap325_fail972, rx311_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt326_0974
    nqp_push_label $P11, alt326_1975
    nqp_rxmark rx311_bstack, alt326_end973, -1, 0
    rx311_cur."!alt"(rx311_pos, "alt_nfa__15_1346968540.996", $P11)
    goto rx311_fail946
  alt326_0974:
    add $I11, rx311_pos, 5
    gt $I11, rx311_eos, rx311_fail946
    substr $S10, rx311_tgt, rx311_pos, 5
    ne $S10, ucs4:"while", rx311_fail946
    add rx311_pos, 5
    goto alt326_end973
  alt326_1975:
    add $I11, rx311_pos, 5
    gt $I11, rx311_eos, rx311_fail946
    substr $S10, rx311_tgt, rx311_pos, 5
    ne $S10, ucs4:"until", rx311_fail946
    add rx311_pos, 5
    goto alt326_end973
  alt326_end973:
    nqp_rxcommit rx311_bstack, alt326_end973
    nqp_rxpeek $I19, rx311_bstack, rxcap325_fail972
    inc $I19
    set $I11, rx311_bstack[$I19]
    $P11 = rx311_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx311_pos)
    rx311_cstack = rx311_cur."!cursor_capture"($P11, "wu")
    goto rxcap325_done971
  rxcap325_fail972:
    goto rx311_fail946
  rxcap325_done971:
    ge rx311_pos, rx311_eos, rx311_fail946
    is_cclass $I11, .CCLASS_WHITESPACE, rx311_tgt, rx311_pos
    unless $I11, rx311_fail946
    add rx311_pos, 1
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!pos", rx311_pos
    $P11 = rx311_cur."ws"()
    repr_get_attr_int $I11, $P11, rx311_curclass, "$!pos"
    lt $I11, 0, rx311_fail946
    repr_get_attr_int rx311_pos, $P11, rx311_curclass, "$!pos"
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!pos", rx311_pos
    $P11 = rx311_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx311_curclass, "$!pos"
    lt $I11, 0, rx311_fail946
    nqp_rxmark rx311_bstack, rxsubrule328_pass977, -1, 0
  rxsubrule328_pass977:
    rx311_cstack = rx311_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx311_pos, $P11, rx311_curclass, "$!pos"
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!pos", rx311_pos
    $P11 = rx311_cur."ws"()
    repr_get_attr_int $I11, $P11, rx311_curclass, "$!pos"
    lt $I11, 0, rx311_fail946
    repr_get_attr_int rx311_pos, $P11, rx311_curclass, "$!pos"
    goto alt315_end956
  alt315_end956:
    nqp_rxcommit rx311_bstack, alt315_end956
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!pos", rx311_pos
    $P11 = rx311_cur."ws"()
    repr_get_attr_int $I11, $P11, rx311_curclass, "$!pos"
    lt $I11, 0, rx311_fail946
    repr_get_attr_int rx311_pos, $P11, rx311_curclass, "$!pos"
    rx311_cur."!cursor_pass"(rx311_pos, "statement_control:sym<repeat>", 'backtrack'=>1)
    .return (rx311_cur)
  rx311_restart945:
    repr_get_attr_obj rx311_cstack, rx311_cur, rx311_curclass, "$!cstack"
  rx311_fail946:
    unless rx311_bstack, rx311_done944
    pop $I19, rx311_bstack
    if_null rx311_cstack, rx311_cstack_done949
    unless rx311_cstack, rx311_cstack_done949
    dec $I19
    set $P11, rx311_cstack[$I19]
  rx311_cstack_done949:
    pop rx311_rep, rx311_bstack
    pop rx311_pos, rx311_bstack
    pop $I19, rx311_bstack
    lt rx311_pos, -1, rx311_done944
    lt rx311_pos, 0, rx311_fail946
    eq $I19, 0, rx311_fail946
    nqp_islist $I20, rx311_cstack
    unless $I20, rx311_jump947
    elements $I18, rx311_bstack
    le $I18, 0, rx311_cut948
    dec $I18
    set $I18, rx311_bstack[$I18]
  rx311_cut948:
    assign rx311_cstack, $I18
  rx311_jump947:
    jump $I19
  rx311_done944:
    rx311_cur."!cursor_fail"()
    .return (rx311_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_67_1346968539.359_caps" :subid("cuid_memo_70_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["wu"], $P5003
    box $P5004, 0
    set $P5001["xblock"], $P5004
    box $P5005, 0
    set $P5001["pblock"], $P5005
    box $P5006, 0
    set $P5001["EXPR"], $P5006
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_67_1346968539.359_nfa" :subid("cuid_memo_71_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 114
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 101
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 112
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 101
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 97
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 2
    push $P5027, $P5028
    box $P5029, 116
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 4
    push $P5031, $P5032
    box $P5033, 32
    push $P5031, $P5033
    box $P5034, 9
    push $P5031, $P5034
    push $P5001, $P5031
    new $P5035, 'ResizablePMCArray'
    box $P5036, 0
    push $P5035, $P5036
    box $P5037, 0
    push $P5035, $P5037
    box $P5038, 0
    push $P5035, $P5038
    push $P5001, $P5035
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_67_1346968539.359_alt_nfa__14_1346968540.995" :subid("cuid_memo_72_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 119
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 104
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 2
    push $P5012, $P5013
    box $P5014, 105
    push $P5012, $P5014
    box $P5015, 4
    push $P5012, $P5015
    push $P5002, $P5012
    new $P5016, 'ResizablePMCArray'
    box $P5017, 2
    push $P5016, $P5017
    box $P5018, 108
    push $P5016, $P5018
    box $P5019, 5
    push $P5016, $P5019
    push $P5002, $P5016
    new $P5020, 'ResizablePMCArray'
    box $P5021, 2
    push $P5020, $P5021
    box $P5022, 101
    push $P5020, $P5022
    box $P5023, 0
    push $P5020, $P5023
    push $P5002, $P5020
    push $P5001, $P5002
    new $P5024, 'ResizablePMCArray'
    new $P5025, 'ResizablePMCArray'
    push $P5024, $P5025
    new $P5026, 'ResizablePMCArray'
    box $P5027, 2
    push $P5026, $P5027
    box $P5028, 117
    push $P5026, $P5028
    box $P5029, 2
    push $P5026, $P5029
    push $P5024, $P5026
    new $P5030, 'ResizablePMCArray'
    box $P5031, 2
    push $P5030, $P5031
    box $P5032, 110
    push $P5030, $P5032
    box $P5033, 3
    push $P5030, $P5033
    push $P5024, $P5030
    new $P5034, 'ResizablePMCArray'
    box $P5035, 2
    push $P5034, $P5035
    box $P5036, 116
    push $P5034, $P5036
    box $P5037, 4
    push $P5034, $P5037
    push $P5024, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 2
    push $P5038, $P5039
    box $P5040, 105
    push $P5038, $P5040
    box $P5041, 5
    push $P5038, $P5041
    push $P5024, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 108
    push $P5042, $P5044
    box $P5045, 0
    push $P5042, $P5045
    push $P5024, $P5042
    push $P5001, $P5024
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_67_1346968539.359_alt_nfa__15_1346968540.996" :subid("cuid_memo_73_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 119
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 104
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 2
    push $P5012, $P5013
    box $P5014, 105
    push $P5012, $P5014
    box $P5015, 4
    push $P5012, $P5015
    push $P5002, $P5012
    new $P5016, 'ResizablePMCArray'
    box $P5017, 2
    push $P5016, $P5017
    box $P5018, 108
    push $P5016, $P5018
    box $P5019, 5
    push $P5016, $P5019
    push $P5002, $P5016
    new $P5020, 'ResizablePMCArray'
    box $P5021, 2
    push $P5020, $P5021
    box $P5022, 101
    push $P5020, $P5022
    box $P5023, 0
    push $P5020, $P5023
    push $P5002, $P5020
    push $P5001, $P5002
    new $P5024, 'ResizablePMCArray'
    new $P5025, 'ResizablePMCArray'
    push $P5024, $P5025
    new $P5026, 'ResizablePMCArray'
    box $P5027, 2
    push $P5026, $P5027
    box $P5028, 117
    push $P5026, $P5028
    box $P5029, 2
    push $P5026, $P5029
    push $P5024, $P5026
    new $P5030, 'ResizablePMCArray'
    box $P5031, 2
    push $P5030, $P5031
    box $P5032, 110
    push $P5030, $P5032
    box $P5033, 3
    push $P5030, $P5033
    push $P5024, $P5030
    new $P5034, 'ResizablePMCArray'
    box $P5035, 2
    push $P5034, $P5035
    box $P5036, 116
    push $P5034, $P5036
    box $P5037, 4
    push $P5034, $P5037
    push $P5024, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 2
    push $P5038, $P5039
    box $P5040, 105
    push $P5038, $P5040
    box $P5041, 5
    push $P5038, $P5041
    push $P5024, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 108
    push $P5042, $P5044
    box $P5045, 0
    push $P5042, $P5045
    push $P5024, $P5042
    push $P5001, $P5024
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_67_1346968539.359_alt_nfa__13_1346968540.995" :subid("cuid_memo_74_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 0
    push $P5004, $P5005
    box $P5006, 0
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    box $P5008, 0
    push $P5004, $P5008
    box $P5009, 0
    push $P5004, $P5009
    box $P5010, 0
    push $P5004, $P5010
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5011, 'ResizablePMCArray'
    new $P5012, 'ResizablePMCArray'
    push $P5011, $P5012
    new $P5013, 'ResizablePMCArray'
    box $P5014, 0
    push $P5013, $P5014
    box $P5015, 0
    push $P5013, $P5015
    box $P5016, 0
    push $P5013, $P5016
    box $P5017, 0
    push $P5013, $P5017
    box $P5018, 0
    push $P5013, $P5018
    box $P5019, 0
    push $P5013, $P5019
    push $P5011, $P5013
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<for>" :subid("cuid_68_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 817
    .param pmc _lex_param_0 
    .lex "$*CONTROL_USED", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx331_tgt
    .local int rx331_pos
    .local int rx331_off
    .local int rx331_eos
    .local int rx331_rep
    .local pmc rx331_cur
    .local pmc rx331_curclass
    .local pmc rx331_bstack
    .local pmc rx331_cstack
    (rx331_cur, rx331_tgt, rx331_pos, rx331_curclass, rx331_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx331_cur
    length rx331_eos, rx331_tgt
    eq $I19, 1, rx331_restart982
    gt rx331_pos, rx331_eos, rx331_fail983
    repr_get_attr_int $I11, self, rx331_curclass, "$!from"
    ne $I11, -1, rxscan332_done989
    goto rxscan332_scan988
  rxscan332_loop987:
    inc rx331_pos
    gt rx331_pos, rx331_eos, rx331_fail983
    repr_bind_attr_int rx331_cur, rx331_curclass, "$!from", rx331_pos
  rxscan332_scan988:
    nqp_rxmark rx331_bstack, rxscan332_loop987, rx331_pos, 0
  rxscan332_done989:
    repr_bind_attr_int rx331_cur, rx331_curclass, "$!pos", rx331_pos
    store_lex unicode:"$\x{a2}", rx331_cur
    box $P5002, 0
    set $P101, $P5002
    nqp_rxmark rx331_bstack, rxcap333_fail991, rx331_pos, 0
    add $I11, rx331_pos, 3
    gt $I11, rx331_eos, rx331_fail983
    substr $S10, rx331_tgt, rx331_pos, 3
    ne $S10, ucs4:"for", rx331_fail983
    add rx331_pos, 3
    nqp_rxpeek $I19, rx331_bstack, rxcap333_fail991
    inc $I19
    set $I11, rx331_bstack[$I19]
    $P11 = rx331_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx331_pos)
    rx331_cstack = rx331_cur."!cursor_capture"($P11, "sym")
    goto rxcap333_done990
  rxcap333_fail991:
    goto rx331_fail983
  rxcap333_done990:
    ge rx331_pos, rx331_eos, rx331_fail983
    is_cclass $I11, .CCLASS_WHITESPACE, rx331_tgt, rx331_pos
    unless $I11, rx331_fail983
    add rx331_pos, 1
    repr_bind_attr_int rx331_cur, rx331_curclass, "$!pos", rx331_pos
    $P11 = rx331_cur."ws"()
    repr_get_attr_int $I11, $P11, rx331_curclass, "$!pos"
    lt $I11, 0, rx331_fail983
    repr_get_attr_int rx331_pos, $P11, rx331_curclass, "$!pos"
    repr_bind_attr_int rx331_cur, rx331_curclass, "$!pos", rx331_pos
    $P11 = rx331_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx331_curclass, "$!pos"
    lt $I11, 0, rx331_fail983
    nqp_rxmark rx331_bstack, rxsubrule335_pass993, -1, 0
  rxsubrule335_pass993:
    rx331_cstack = rx331_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx331_pos, $P11, rx331_curclass, "$!pos"
    repr_bind_attr_int rx331_cur, rx331_curclass, "$!pos", rx331_pos
    $P11 = rx331_cur."ws"()
    repr_get_attr_int $I11, $P11, rx331_curclass, "$!pos"
    lt $I11, 0, rx331_fail983
    repr_get_attr_int rx331_pos, $P11, rx331_curclass, "$!pos"
    rx331_cur."!cursor_pass"(rx331_pos, "statement_control:sym<for>", 'backtrack'=>1)
    .return (rx331_cur)
  rx331_restart982:
    repr_get_attr_obj rx331_cstack, rx331_cur, rx331_curclass, "$!cstack"
  rx331_fail983:
    unless rx331_bstack, rx331_done981
    pop $I19, rx331_bstack
    if_null rx331_cstack, rx331_cstack_done986
    unless rx331_cstack, rx331_cstack_done986
    dec $I19
    set $P11, rx331_cstack[$I19]
  rx331_cstack_done986:
    pop rx331_rep, rx331_bstack
    pop rx331_pos, rx331_bstack
    pop $I19, rx331_bstack
    lt rx331_pos, -1, rx331_done981
    lt rx331_pos, 0, rx331_fail983
    eq $I19, 0, rx331_fail983
    nqp_islist $I20, rx331_cstack
    unless $I20, rx331_jump984
    elements $I18, rx331_bstack
    le $I18, 0, rx331_cut985
    dec $I18
    set $I18, rx331_bstack[$I18]
  rx331_cut985:
    assign rx331_cstack, $I18
  rx331_jump984:
    jump $I19
  rx331_done981:
    rx331_cur."!cursor_fail"()
    .return (rx331_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_68_1346968539.359_caps" :subid("cuid_memo_75_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["xblock"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_68_1346968539.359_nfa" :subid("cuid_memo_76_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 102
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 111
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 114
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 4
    push $P5019, $P5020
    box $P5021, 32
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 0
    push $P5023, $P5024
    box $P5025, 0
    push $P5023, $P5025
    box $P5026, 0
    push $P5023, $P5026
    push $P5001, $P5023
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CATCH>" :subid("cuid_69_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 823
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx337_tgt
    .local int rx337_pos
    .local int rx337_off
    .local int rx337_eos
    .local int rx337_rep
    .local pmc rx337_cur
    .local pmc rx337_curclass
    .local pmc rx337_bstack
    .local pmc rx337_cstack
    (rx337_cur, rx337_tgt, rx337_pos, rx337_curclass, rx337_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx337_cur
    length rx337_eos, rx337_tgt
    eq $I19, 1, rx337_restart997
    gt rx337_pos, rx337_eos, rx337_fail998
    repr_get_attr_int $I11, self, rx337_curclass, "$!from"
    ne $I11, -1, rxscan338_done1004
    goto rxscan338_scan1003
  rxscan338_loop1002:
    inc rx337_pos
    gt rx337_pos, rx337_eos, rx337_fail998
    repr_bind_attr_int rx337_cur, rx337_curclass, "$!from", rx337_pos
  rxscan338_scan1003:
    nqp_rxmark rx337_bstack, rxscan338_loop1002, rx337_pos, 0
  rxscan338_done1004:
    nqp_rxmark rx337_bstack, rxcap339_fail1006, rx337_pos, 0
    add $I11, rx337_pos, 5
    gt $I11, rx337_eos, rx337_fail998
    substr $S10, rx337_tgt, rx337_pos, 5
    ne $S10, ucs4:"CATCH", rx337_fail998
    add rx337_pos, 5
    nqp_rxpeek $I19, rx337_bstack, rxcap339_fail1006
    inc $I19
    set $I11, rx337_bstack[$I19]
    $P11 = rx337_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx337_pos)
    rx337_cstack = rx337_cur."!cursor_capture"($P11, "sym")
    goto rxcap339_done1005
  rxcap339_fail1006:
    goto rx337_fail998
  rxcap339_done1005:
    ge rx337_pos, rx337_eos, rx337_fail998
    is_cclass $I11, .CCLASS_WHITESPACE, rx337_tgt, rx337_pos
    unless $I11, rx337_fail998
    add rx337_pos, 1
    repr_bind_attr_int rx337_cur, rx337_curclass, "$!pos", rx337_pos
    $P11 = rx337_cur."ws"()
    repr_get_attr_int $I11, $P11, rx337_curclass, "$!pos"
    lt $I11, 0, rx337_fail998
    repr_get_attr_int rx337_pos, $P11, rx337_curclass, "$!pos"
    repr_bind_attr_int rx337_cur, rx337_curclass, "$!pos", rx337_pos
    $P11 = rx337_cur."block"()
    repr_get_attr_int $I11, $P11, rx337_curclass, "$!pos"
    lt $I11, 0, rx337_fail998
    nqp_rxmark rx337_bstack, rxsubrule341_pass1008, -1, 0
  rxsubrule341_pass1008:
    rx337_cstack = rx337_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx337_pos, $P11, rx337_curclass, "$!pos"
    repr_bind_attr_int rx337_cur, rx337_curclass, "$!pos", rx337_pos
    $P11 = rx337_cur."ws"()
    repr_get_attr_int $I11, $P11, rx337_curclass, "$!pos"
    lt $I11, 0, rx337_fail998
    repr_get_attr_int rx337_pos, $P11, rx337_curclass, "$!pos"
    rx337_cur."!cursor_pass"(rx337_pos, "statement_control:sym<CATCH>", 'backtrack'=>1)
    .return (rx337_cur)
  rx337_restart997:
    repr_get_attr_obj rx337_cstack, rx337_cur, rx337_curclass, "$!cstack"
  rx337_fail998:
    unless rx337_bstack, rx337_done996
    pop $I19, rx337_bstack
    if_null rx337_cstack, rx337_cstack_done1001
    unless rx337_cstack, rx337_cstack_done1001
    dec $I19
    set $P11, rx337_cstack[$I19]
  rx337_cstack_done1001:
    pop rx337_rep, rx337_bstack
    pop rx337_pos, rx337_bstack
    pop $I19, rx337_bstack
    lt rx337_pos, -1, rx337_done996
    lt rx337_pos, 0, rx337_fail998
    eq $I19, 0, rx337_fail998
    nqp_islist $I20, rx337_cstack
    unless $I20, rx337_jump999
    elements $I18, rx337_bstack
    le $I18, 0, rx337_cut1000
    dec $I18
    set $I18, rx337_bstack[$I18]
  rx337_cut1000:
    assign rx337_cstack, $I18
  rx337_jump999:
    jump $I19
  rx337_done996:
    rx337_cur."!cursor_fail"()
    .return (rx337_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_69_1346968539.359_caps" :subid("cuid_memo_77_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["block"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_69_1346968539.359_nfa" :subid("cuid_memo_78_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 67
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 65
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 84
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 67
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 72
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 4
    push $P5023, $P5024
    box $P5025, 32
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 0
    push $P5027, $P5028
    box $P5029, 0
    push $P5027, $P5029
    box $P5030, 0
    push $P5027, $P5030
    push $P5001, $P5027
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CONTROL>" :subid("cuid_70_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 828
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx343_tgt
    .local int rx343_pos
    .local int rx343_off
    .local int rx343_eos
    .local int rx343_rep
    .local pmc rx343_cur
    .local pmc rx343_curclass
    .local pmc rx343_bstack
    .local pmc rx343_cstack
    (rx343_cur, rx343_tgt, rx343_pos, rx343_curclass, rx343_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx343_cur
    length rx343_eos, rx343_tgt
    eq $I19, 1, rx343_restart1012
    gt rx343_pos, rx343_eos, rx343_fail1013
    repr_get_attr_int $I11, self, rx343_curclass, "$!from"
    ne $I11, -1, rxscan344_done1019
    goto rxscan344_scan1018
  rxscan344_loop1017:
    inc rx343_pos
    gt rx343_pos, rx343_eos, rx343_fail1013
    repr_bind_attr_int rx343_cur, rx343_curclass, "$!from", rx343_pos
  rxscan344_scan1018:
    nqp_rxmark rx343_bstack, rxscan344_loop1017, rx343_pos, 0
  rxscan344_done1019:
    nqp_rxmark rx343_bstack, rxcap345_fail1021, rx343_pos, 0
    add $I11, rx343_pos, 7
    gt $I11, rx343_eos, rx343_fail1013
    substr $S10, rx343_tgt, rx343_pos, 7
    ne $S10, ucs4:"CONTROL", rx343_fail1013
    add rx343_pos, 7
    nqp_rxpeek $I19, rx343_bstack, rxcap345_fail1021
    inc $I19
    set $I11, rx343_bstack[$I19]
    $P11 = rx343_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx343_pos)
    rx343_cstack = rx343_cur."!cursor_capture"($P11, "sym")
    goto rxcap345_done1020
  rxcap345_fail1021:
    goto rx343_fail1013
  rxcap345_done1020:
    ge rx343_pos, rx343_eos, rx343_fail1013
    is_cclass $I11, .CCLASS_WHITESPACE, rx343_tgt, rx343_pos
    unless $I11, rx343_fail1013
    add rx343_pos, 1
    repr_bind_attr_int rx343_cur, rx343_curclass, "$!pos", rx343_pos
    $P11 = rx343_cur."ws"()
    repr_get_attr_int $I11, $P11, rx343_curclass, "$!pos"
    lt $I11, 0, rx343_fail1013
    repr_get_attr_int rx343_pos, $P11, rx343_curclass, "$!pos"
    repr_bind_attr_int rx343_cur, rx343_curclass, "$!pos", rx343_pos
    $P11 = rx343_cur."block"()
    repr_get_attr_int $I11, $P11, rx343_curclass, "$!pos"
    lt $I11, 0, rx343_fail1013
    nqp_rxmark rx343_bstack, rxsubrule347_pass1023, -1, 0
  rxsubrule347_pass1023:
    rx343_cstack = rx343_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx343_pos, $P11, rx343_curclass, "$!pos"
    repr_bind_attr_int rx343_cur, rx343_curclass, "$!pos", rx343_pos
    $P11 = rx343_cur."ws"()
    repr_get_attr_int $I11, $P11, rx343_curclass, "$!pos"
    lt $I11, 0, rx343_fail1013
    repr_get_attr_int rx343_pos, $P11, rx343_curclass, "$!pos"
    rx343_cur."!cursor_pass"(rx343_pos, "statement_control:sym<CONTROL>", 'backtrack'=>1)
    .return (rx343_cur)
  rx343_restart1012:
    repr_get_attr_obj rx343_cstack, rx343_cur, rx343_curclass, "$!cstack"
  rx343_fail1013:
    unless rx343_bstack, rx343_done1011
    pop $I19, rx343_bstack
    if_null rx343_cstack, rx343_cstack_done1016
    unless rx343_cstack, rx343_cstack_done1016
    dec $I19
    set $P11, rx343_cstack[$I19]
  rx343_cstack_done1016:
    pop rx343_rep, rx343_bstack
    pop rx343_pos, rx343_bstack
    pop $I19, rx343_bstack
    lt rx343_pos, -1, rx343_done1011
    lt rx343_pos, 0, rx343_fail1013
    eq $I19, 0, rx343_fail1013
    nqp_islist $I20, rx343_cstack
    unless $I20, rx343_jump1014
    elements $I18, rx343_bstack
    le $I18, 0, rx343_cut1015
    dec $I18
    set $I18, rx343_bstack[$I18]
  rx343_cut1015:
    assign rx343_cstack, $I18
  rx343_jump1014:
    jump $I19
  rx343_done1011:
    rx343_cur."!cursor_fail"()
    .return (rx343_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_70_1346968539.359_caps" :subid("cuid_memo_79_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["block"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_70_1346968539.359_nfa" :subid("cuid_memo_80_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 67
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 79
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 78
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 84
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 82
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 79
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 2
    push $P5027, $P5028
    box $P5029, 76
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 4
    push $P5031, $P5032
    box $P5033, 32
    push $P5031, $P5033
    box $P5034, 9
    push $P5031, $P5034
    push $P5001, $P5031
    new $P5035, 'ResizablePMCArray'
    box $P5036, 0
    push $P5035, $P5036
    box $P5037, 0
    push $P5035, $P5037
    box $P5038, 0
    push $P5035, $P5038
    push $P5001, $P5035
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix" :subid("cuid_71_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 833
    .param pmc self 
    $P5001 = self."!protoregex"("statement_prefix")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<BEGIN>" :subid("cuid_72_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 834
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx349_tgt
    .local int rx349_pos
    .local int rx349_off
    .local int rx349_eos
    .local int rx349_rep
    .local pmc rx349_cur
    .local pmc rx349_curclass
    .local pmc rx349_bstack
    .local pmc rx349_cstack
    (rx349_cur, rx349_tgt, rx349_pos, rx349_curclass, rx349_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx349_cur
    length rx349_eos, rx349_tgt
    eq $I19, 1, rx349_restart1027
    gt rx349_pos, rx349_eos, rx349_fail1028
    repr_get_attr_int $I11, self, rx349_curclass, "$!from"
    ne $I11, -1, rxscan350_done1034
    goto rxscan350_scan1033
  rxscan350_loop1032:
    inc rx349_pos
    gt rx349_pos, rx349_eos, rx349_fail1028
    repr_bind_attr_int rx349_cur, rx349_curclass, "$!from", rx349_pos
  rxscan350_scan1033:
    nqp_rxmark rx349_bstack, rxscan350_loop1032, rx349_pos, 0
  rxscan350_done1034:
    nqp_rxmark rx349_bstack, rxcap351_fail1036, rx349_pos, 0
    add $I11, rx349_pos, 5
    gt $I11, rx349_eos, rx349_fail1028
    substr $S10, rx349_tgt, rx349_pos, 5
    ne $S10, ucs4:"BEGIN", rx349_fail1028
    add rx349_pos, 5
    nqp_rxpeek $I19, rx349_bstack, rxcap351_fail1036
    inc $I19
    set $I11, rx349_bstack[$I19]
    $P11 = rx349_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx349_pos)
    rx349_cstack = rx349_cur."!cursor_capture"($P11, "sym")
    goto rxcap351_done1035
  rxcap351_fail1036:
    goto rx349_fail1028
  rxcap351_done1035:
    repr_bind_attr_int rx349_cur, rx349_curclass, "$!pos", rx349_pos
    $P11 = rx349_cur."blorst"()
    repr_get_attr_int $I11, $P11, rx349_curclass, "$!pos"
    lt $I11, 0, rx349_fail1028
    nqp_rxmark rx349_bstack, rxsubrule352_pass1037, -1, 0
  rxsubrule352_pass1037:
    rx349_cstack = rx349_cur."!cursor_capture"($P11, "blorst")
    repr_get_attr_int rx349_pos, $P11, rx349_curclass, "$!pos"
    rx349_cur."!cursor_pass"(rx349_pos, "statement_prefix:sym<BEGIN>", 'backtrack'=>1)
    .return (rx349_cur)
  rx349_restart1027:
    repr_get_attr_obj rx349_cstack, rx349_cur, rx349_curclass, "$!cstack"
  rx349_fail1028:
    unless rx349_bstack, rx349_done1026
    pop $I19, rx349_bstack
    if_null rx349_cstack, rx349_cstack_done1031
    unless rx349_cstack, rx349_cstack_done1031
    dec $I19
    set $P11, rx349_cstack[$I19]
  rx349_cstack_done1031:
    pop rx349_rep, rx349_bstack
    pop rx349_pos, rx349_bstack
    pop $I19, rx349_bstack
    lt rx349_pos, -1, rx349_done1026
    lt rx349_pos, 0, rx349_fail1028
    eq $I19, 0, rx349_fail1028
    nqp_islist $I20, rx349_cstack
    unless $I20, rx349_jump1029
    elements $I18, rx349_bstack
    le $I18, 0, rx349_cut1030
    dec $I18
    set $I18, rx349_bstack[$I18]
  rx349_cut1030:
    assign rx349_cstack, $I18
  rx349_jump1029:
    jump $I19
  rx349_done1026:
    rx349_cur."!cursor_fail"()
    .return (rx349_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_72_1346968539.359_caps" :subid("cuid_memo_81_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["blorst"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_72_1346968539.359_nfa" :subid("cuid_memo_82_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 66
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 69
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 71
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 73
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 78
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 8
    push $P5023, $P5024
    box $P5025, "blorst"
    push $P5023, $P5025
    box $P5026, 0
    push $P5023, $P5026
    push $P5001, $P5023
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<INIT>" :subid("cuid_73_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 835
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx353_tgt
    .local int rx353_pos
    .local int rx353_off
    .local int rx353_eos
    .local int rx353_rep
    .local pmc rx353_cur
    .local pmc rx353_curclass
    .local pmc rx353_bstack
    .local pmc rx353_cstack
    (rx353_cur, rx353_tgt, rx353_pos, rx353_curclass, rx353_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx353_cur
    length rx353_eos, rx353_tgt
    eq $I19, 1, rx353_restart1040
    gt rx353_pos, rx353_eos, rx353_fail1041
    repr_get_attr_int $I11, self, rx353_curclass, "$!from"
    ne $I11, -1, rxscan354_done1047
    goto rxscan354_scan1046
  rxscan354_loop1045:
    inc rx353_pos
    gt rx353_pos, rx353_eos, rx353_fail1041
    repr_bind_attr_int rx353_cur, rx353_curclass, "$!from", rx353_pos
  rxscan354_scan1046:
    nqp_rxmark rx353_bstack, rxscan354_loop1045, rx353_pos, 0
  rxscan354_done1047:
    nqp_rxmark rx353_bstack, rxcap355_fail1049, rx353_pos, 0
    add $I11, rx353_pos, 4
    gt $I11, rx353_eos, rx353_fail1041
    substr $S10, rx353_tgt, rx353_pos, 4
    ne $S10, ucs4:"INIT", rx353_fail1041
    add rx353_pos, 4
    nqp_rxpeek $I19, rx353_bstack, rxcap355_fail1049
    inc $I19
    set $I11, rx353_bstack[$I19]
    $P11 = rx353_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx353_pos)
    rx353_cstack = rx353_cur."!cursor_capture"($P11, "sym")
    goto rxcap355_done1048
  rxcap355_fail1049:
    goto rx353_fail1041
  rxcap355_done1048:
    repr_bind_attr_int rx353_cur, rx353_curclass, "$!pos", rx353_pos
    $P11 = rx353_cur."blorst"()
    repr_get_attr_int $I11, $P11, rx353_curclass, "$!pos"
    lt $I11, 0, rx353_fail1041
    nqp_rxmark rx353_bstack, rxsubrule356_pass1050, -1, 0
  rxsubrule356_pass1050:
    rx353_cstack = rx353_cur."!cursor_capture"($P11, "blorst")
    repr_get_attr_int rx353_pos, $P11, rx353_curclass, "$!pos"
    rx353_cur."!cursor_pass"(rx353_pos, "statement_prefix:sym<INIT>", 'backtrack'=>1)
    .return (rx353_cur)
  rx353_restart1040:
    repr_get_attr_obj rx353_cstack, rx353_cur, rx353_curclass, "$!cstack"
  rx353_fail1041:
    unless rx353_bstack, rx353_done1039
    pop $I19, rx353_bstack
    if_null rx353_cstack, rx353_cstack_done1044
    unless rx353_cstack, rx353_cstack_done1044
    dec $I19
    set $P11, rx353_cstack[$I19]
  rx353_cstack_done1044:
    pop rx353_rep, rx353_bstack
    pop rx353_pos, rx353_bstack
    pop $I19, rx353_bstack
    lt rx353_pos, -1, rx353_done1039
    lt rx353_pos, 0, rx353_fail1041
    eq $I19, 0, rx353_fail1041
    nqp_islist $I20, rx353_cstack
    unless $I20, rx353_jump1042
    elements $I18, rx353_bstack
    le $I18, 0, rx353_cut1043
    dec $I18
    set $I18, rx353_bstack[$I18]
  rx353_cut1043:
    assign rx353_cstack, $I18
  rx353_jump1042:
    jump $I19
  rx353_done1039:
    rx353_cur."!cursor_fail"()
    .return (rx353_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_73_1346968539.359_caps" :subid("cuid_memo_83_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["blorst"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_73_1346968539.359_nfa" :subid("cuid_memo_84_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 73
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 78
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 73
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 84
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 8
    push $P5019, $P5020
    box $P5021, "blorst"
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<try>" :subid("cuid_74_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 837
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx357_tgt
    .local int rx357_pos
    .local int rx357_off
    .local int rx357_eos
    .local int rx357_rep
    .local pmc rx357_cur
    .local pmc rx357_curclass
    .local pmc rx357_bstack
    .local pmc rx357_cstack
    (rx357_cur, rx357_tgt, rx357_pos, rx357_curclass, rx357_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx357_cur
    length rx357_eos, rx357_tgt
    eq $I19, 1, rx357_restart1053
    gt rx357_pos, rx357_eos, rx357_fail1054
    repr_get_attr_int $I11, self, rx357_curclass, "$!from"
    ne $I11, -1, rxscan358_done1060
    goto rxscan358_scan1059
  rxscan358_loop1058:
    inc rx357_pos
    gt rx357_pos, rx357_eos, rx357_fail1054
    repr_bind_attr_int rx357_cur, rx357_curclass, "$!from", rx357_pos
  rxscan358_scan1059:
    nqp_rxmark rx357_bstack, rxscan358_loop1058, rx357_pos, 0
  rxscan358_done1060:
    nqp_rxmark rx357_bstack, rxcap359_fail1062, rx357_pos, 0
    add $I11, rx357_pos, 3
    gt $I11, rx357_eos, rx357_fail1054
    substr $S10, rx357_tgt, rx357_pos, 3
    ne $S10, ucs4:"try", rx357_fail1054
    add rx357_pos, 3
    nqp_rxpeek $I19, rx357_bstack, rxcap359_fail1062
    inc $I19
    set $I11, rx357_bstack[$I19]
    $P11 = rx357_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx357_pos)
    rx357_cstack = rx357_cur."!cursor_capture"($P11, "sym")
    goto rxcap359_done1061
  rxcap359_fail1062:
    goto rx357_fail1054
  rxcap359_done1061:
    repr_bind_attr_int rx357_cur, rx357_curclass, "$!pos", rx357_pos
    $P11 = rx357_cur."blorst"()
    repr_get_attr_int $I11, $P11, rx357_curclass, "$!pos"
    lt $I11, 0, rx357_fail1054
    nqp_rxmark rx357_bstack, rxsubrule360_pass1063, -1, 0
  rxsubrule360_pass1063:
    rx357_cstack = rx357_cur."!cursor_capture"($P11, "blorst")
    repr_get_attr_int rx357_pos, $P11, rx357_curclass, "$!pos"
    rx357_cur."!cursor_pass"(rx357_pos, "statement_prefix:sym<try>", 'backtrack'=>1)
    .return (rx357_cur)
  rx357_restart1053:
    repr_get_attr_obj rx357_cstack, rx357_cur, rx357_curclass, "$!cstack"
  rx357_fail1054:
    unless rx357_bstack, rx357_done1052
    pop $I19, rx357_bstack
    if_null rx357_cstack, rx357_cstack_done1057
    unless rx357_cstack, rx357_cstack_done1057
    dec $I19
    set $P11, rx357_cstack[$I19]
  rx357_cstack_done1057:
    pop rx357_rep, rx357_bstack
    pop rx357_pos, rx357_bstack
    pop $I19, rx357_bstack
    lt rx357_pos, -1, rx357_done1052
    lt rx357_pos, 0, rx357_fail1054
    eq $I19, 0, rx357_fail1054
    nqp_islist $I20, rx357_cstack
    unless $I20, rx357_jump1055
    elements $I18, rx357_bstack
    le $I18, 0, rx357_cut1056
    dec $I18
    set $I18, rx357_bstack[$I18]
  rx357_cut1056:
    assign rx357_cstack, $I18
  rx357_jump1055:
    jump $I19
  rx357_done1052:
    rx357_cur."!cursor_fail"()
    .return (rx357_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_74_1346968539.359_caps" :subid("cuid_memo_85_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["blorst"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_74_1346968539.359_nfa" :subid("cuid_memo_86_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 116
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 114
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 121
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "blorst"
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "blorst" :subid("cuid_75_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 842
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx361_tgt
    .local int rx361_pos
    .local int rx361_off
    .local int rx361_eos
    .local int rx361_rep
    .local pmc rx361_cur
    .local pmc rx361_curclass
    .local pmc rx361_bstack
    .local pmc rx361_cstack
    (rx361_cur, rx361_tgt, rx361_pos, rx361_curclass, rx361_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx361_cur
    length rx361_eos, rx361_tgt
    eq $I19, 1, rx361_restart1066
    gt rx361_pos, rx361_eos, rx361_fail1067
    repr_get_attr_int $I11, self, rx361_curclass, "$!from"
    ne $I11, -1, rxscan362_done1073
    goto rxscan362_scan1072
  rxscan362_loop1071:
    inc rx361_pos
    gt rx361_pos, rx361_eos, rx361_fail1067
    repr_bind_attr_int rx361_cur, rx361_curclass, "$!from", rx361_pos
  rxscan362_scan1072:
    nqp_rxmark rx361_bstack, rxscan362_loop1071, rx361_pos, 0
  rxscan362_done1073:
    ge rx361_pos, rx361_eos, rx361_fail1067
    is_cclass $I11, .CCLASS_WHITESPACE, rx361_tgt, rx361_pos
    unless $I11, rx361_fail1067
    add rx361_pos, 1
    repr_bind_attr_int rx361_cur, rx361_curclass, "$!pos", rx361_pos
    $P11 = rx361_cur."ws"()
    repr_get_attr_int $I11, $P11, rx361_curclass, "$!pos"
    lt $I11, 0, rx361_fail1067
    repr_get_attr_int rx361_pos, $P11, rx361_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt364_01076
    nqp_push_label $P11, alt364_11078
    nqp_rxmark rx361_bstack, alt364_end1075, -1, 0
    rx361_cur."!alt"(rx361_pos, "alt_nfa__16_1346968541.05", $P11)
    goto rx361_fail1067
  alt364_01076:
    ge rx361_pos, rx361_eos, rx361_fail1067
    substr $S11, rx361_tgt, rx361_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx361_fail1067
    repr_bind_attr_int rx361_cur, rx361_curclass, "$!pos", rx361_pos
    $P11 = rx361_cur."block"()
    repr_get_attr_int $I11, $P11, rx361_curclass, "$!pos"
    lt $I11, 0, rx361_fail1067
    nqp_rxmark rx361_bstack, rxsubrule365_pass1077, -1, 0
  rxsubrule365_pass1077:
    rx361_cstack = rx361_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx361_pos, $P11, rx361_curclass, "$!pos"
    goto alt364_end1075
  alt364_11078:
    repr_bind_attr_int rx361_cur, rx361_curclass, "$!pos", rx361_pos
    $P11 = rx361_cur."statement"()
    repr_get_attr_int $I11, $P11, rx361_curclass, "$!pos"
    lt $I11, 0, rx361_fail1067
    nqp_rxmark rx361_bstack, rxsubrule366_pass1079, -1, 0
  rxsubrule366_pass1079:
    rx361_cstack = rx361_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx361_pos, $P11, rx361_curclass, "$!pos"
    goto alt364_end1075
  alt364_end1075:
    nqp_rxcommit rx361_bstack, alt364_end1075
    rx361_cur."!cursor_pass"(rx361_pos, "blorst", 'backtrack'=>1)
    .return (rx361_cur)
  rx361_restart1066:
    repr_get_attr_obj rx361_cstack, rx361_cur, rx361_curclass, "$!cstack"
  rx361_fail1067:
    unless rx361_bstack, rx361_done1065
    pop $I19, rx361_bstack
    if_null rx361_cstack, rx361_cstack_done1070
    unless rx361_cstack, rx361_cstack_done1070
    dec $I19
    set $P11, rx361_cstack[$I19]
  rx361_cstack_done1070:
    pop rx361_rep, rx361_bstack
    pop rx361_pos, rx361_bstack
    pop $I19, rx361_bstack
    lt rx361_pos, -1, rx361_done1065
    lt rx361_pos, 0, rx361_fail1067
    eq $I19, 0, rx361_fail1067
    nqp_islist $I20, rx361_cstack
    unless $I20, rx361_jump1068
    elements $I18, rx361_bstack
    le $I18, 0, rx361_cut1069
    dec $I18
    set $I18, rx361_bstack[$I18]
  rx361_cut1069:
    assign rx361_cstack, $I18
  rx361_jump1068:
    jump $I19
  rx361_done1065:
    rx361_cur."!cursor_fail"()
    .return (rx361_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_75_1346968539.359_caps" :subid("cuid_memo_87_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["block"], $P5002
    box $P5003, 0
    set $P5001["statement"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_75_1346968539.359_nfa" :subid("cuid_memo_88_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 4
    push $P5003, $P5004
    box $P5005, 32
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "ws"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 6
    push $P5011, $P5012
    box $P5013, "{"
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    box $P5015, 8
    push $P5011, $P5015
    box $P5016, "statement"
    push $P5011, $P5016
    box $P5017, 0
    push $P5011, $P5017
    push $P5001, $P5011
    new $P5018, 'ResizablePMCArray'
    box $P5019, 0
    push $P5018, $P5019
    box $P5020, 0
    push $P5018, $P5020
    box $P5021, 0
    push $P5018, $P5021
    push $P5001, $P5018
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_75_1346968539.359_alt_nfa__16_1346968541.05" :subid("cuid_memo_89_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 6
    push $P5004, $P5005
    box $P5006, "{"
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 0
    push $P5008, $P5009
    box $P5010, 0
    push $P5008, $P5010
    box $P5011, 0
    push $P5008, $P5011
    push $P5002, $P5008
    push $P5001, $P5002
    new $P5012, 'ResizablePMCArray'
    new $P5013, 'ResizablePMCArray'
    push $P5012, $P5013
    new $P5014, 'ResizablePMCArray'
    box $P5015, 8
    push $P5014, $P5015
    box $P5016, "statement"
    push $P5014, $P5016
    box $P5017, 0
    push $P5014, $P5017
    push $P5012, $P5014
    push $P5001, $P5012
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond" :subid("cuid_76_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 848
    .param pmc self 
    $P5001 = self."!protoregex"("statement_mod_cond")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<if>" :subid("cuid_77_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 850
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx367_tgt
    .local int rx367_pos
    .local int rx367_off
    .local int rx367_eos
    .local int rx367_rep
    .local pmc rx367_cur
    .local pmc rx367_curclass
    .local pmc rx367_bstack
    .local pmc rx367_cstack
    (rx367_cur, rx367_tgt, rx367_pos, rx367_curclass, rx367_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx367_cur
    length rx367_eos, rx367_tgt
    eq $I19, 1, rx367_restart1082
    gt rx367_pos, rx367_eos, rx367_fail1083
    repr_get_attr_int $I11, self, rx367_curclass, "$!from"
    ne $I11, -1, rxscan368_done1089
    goto rxscan368_scan1088
  rxscan368_loop1087:
    inc rx367_pos
    gt rx367_pos, rx367_eos, rx367_fail1083
    repr_bind_attr_int rx367_cur, rx367_curclass, "$!from", rx367_pos
  rxscan368_scan1088:
    nqp_rxmark rx367_bstack, rxscan368_loop1087, rx367_pos, 0
  rxscan368_done1089:
    nqp_rxmark rx367_bstack, rxcap369_fail1091, rx367_pos, 0
    add $I11, rx367_pos, 2
    gt $I11, rx367_eos, rx367_fail1083
    substr $S10, rx367_tgt, rx367_pos, 2
    ne $S10, ucs4:"if", rx367_fail1083
    add rx367_pos, 2
    nqp_rxpeek $I19, rx367_bstack, rxcap369_fail1091
    inc $I19
    set $I11, rx367_bstack[$I19]
    $P11 = rx367_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx367_pos)
    rx367_cstack = rx367_cur."!cursor_capture"($P11, "sym")
    goto rxcap369_done1090
  rxcap369_fail1091:
    goto rx367_fail1083
  rxcap369_done1090:
    repr_bind_attr_int rx367_cur, rx367_curclass, "$!pos", rx367_pos
    $P11 = rx367_cur."ws"()
    repr_get_attr_int $I11, $P11, rx367_curclass, "$!pos"
    lt $I11, 0, rx367_fail1083
    repr_get_attr_int rx367_pos, $P11, rx367_curclass, "$!pos"
    repr_bind_attr_int rx367_cur, rx367_curclass, "$!pos", rx367_pos
    $P11 = rx367_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx367_curclass, "$!pos"
    lt $I11, 0, rx367_fail1083
    nqp_rxmark rx367_bstack, rxsubrule371_pass1093, -1, 0
  rxsubrule371_pass1093:
    rx367_cstack = rx367_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx367_pos, $P11, rx367_curclass, "$!pos"
    repr_bind_attr_int rx367_cur, rx367_curclass, "$!pos", rx367_pos
    $P11 = rx367_cur."ws"()
    repr_get_attr_int $I11, $P11, rx367_curclass, "$!pos"
    lt $I11, 0, rx367_fail1083
    repr_get_attr_int rx367_pos, $P11, rx367_curclass, "$!pos"
    rx367_cur."!cursor_pass"(rx367_pos, "statement_mod_cond:sym<if>", 'backtrack'=>1)
    .return (rx367_cur)
  rx367_restart1082:
    repr_get_attr_obj rx367_cstack, rx367_cur, rx367_curclass, "$!cstack"
  rx367_fail1083:
    unless rx367_bstack, rx367_done1081
    pop $I19, rx367_bstack
    if_null rx367_cstack, rx367_cstack_done1086
    unless rx367_cstack, rx367_cstack_done1086
    dec $I19
    set $P11, rx367_cstack[$I19]
  rx367_cstack_done1086:
    pop rx367_rep, rx367_bstack
    pop rx367_pos, rx367_bstack
    pop $I19, rx367_bstack
    lt rx367_pos, -1, rx367_done1081
    lt rx367_pos, 0, rx367_fail1083
    eq $I19, 0, rx367_fail1083
    nqp_islist $I20, rx367_cstack
    unless $I20, rx367_jump1084
    elements $I18, rx367_bstack
    le $I18, 0, rx367_cut1085
    dec $I18
    set $I18, rx367_bstack[$I18]
  rx367_cut1085:
    assign rx367_cstack, $I18
  rx367_jump1084:
    jump $I19
  rx367_done1081:
    rx367_cur."!cursor_fail"()
    .return (rx367_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_77_1346968539.359_caps" :subid("cuid_memo_90_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["cond"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_77_1346968539.359_nfa" :subid("cuid_memo_91_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 105
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 102
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 0
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<unless>" :subid("cuid_78_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 851
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx373_tgt
    .local int rx373_pos
    .local int rx373_off
    .local int rx373_eos
    .local int rx373_rep
    .local pmc rx373_cur
    .local pmc rx373_curclass
    .local pmc rx373_bstack
    .local pmc rx373_cstack
    (rx373_cur, rx373_tgt, rx373_pos, rx373_curclass, rx373_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx373_cur
    length rx373_eos, rx373_tgt
    eq $I19, 1, rx373_restart1097
    gt rx373_pos, rx373_eos, rx373_fail1098
    repr_get_attr_int $I11, self, rx373_curclass, "$!from"
    ne $I11, -1, rxscan374_done1104
    goto rxscan374_scan1103
  rxscan374_loop1102:
    inc rx373_pos
    gt rx373_pos, rx373_eos, rx373_fail1098
    repr_bind_attr_int rx373_cur, rx373_curclass, "$!from", rx373_pos
  rxscan374_scan1103:
    nqp_rxmark rx373_bstack, rxscan374_loop1102, rx373_pos, 0
  rxscan374_done1104:
    nqp_rxmark rx373_bstack, rxcap375_fail1106, rx373_pos, 0
    add $I11, rx373_pos, 6
    gt $I11, rx373_eos, rx373_fail1098
    substr $S10, rx373_tgt, rx373_pos, 6
    ne $S10, ucs4:"unless", rx373_fail1098
    add rx373_pos, 6
    nqp_rxpeek $I19, rx373_bstack, rxcap375_fail1106
    inc $I19
    set $I11, rx373_bstack[$I19]
    $P11 = rx373_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx373_pos)
    rx373_cstack = rx373_cur."!cursor_capture"($P11, "sym")
    goto rxcap375_done1105
  rxcap375_fail1106:
    goto rx373_fail1098
  rxcap375_done1105:
    repr_bind_attr_int rx373_cur, rx373_curclass, "$!pos", rx373_pos
    $P11 = rx373_cur."ws"()
    repr_get_attr_int $I11, $P11, rx373_curclass, "$!pos"
    lt $I11, 0, rx373_fail1098
    repr_get_attr_int rx373_pos, $P11, rx373_curclass, "$!pos"
    repr_bind_attr_int rx373_cur, rx373_curclass, "$!pos", rx373_pos
    $P11 = rx373_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx373_curclass, "$!pos"
    lt $I11, 0, rx373_fail1098
    nqp_rxmark rx373_bstack, rxsubrule377_pass1108, -1, 0
  rxsubrule377_pass1108:
    rx373_cstack = rx373_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx373_pos, $P11, rx373_curclass, "$!pos"
    repr_bind_attr_int rx373_cur, rx373_curclass, "$!pos", rx373_pos
    $P11 = rx373_cur."ws"()
    repr_get_attr_int $I11, $P11, rx373_curclass, "$!pos"
    lt $I11, 0, rx373_fail1098
    repr_get_attr_int rx373_pos, $P11, rx373_curclass, "$!pos"
    rx373_cur."!cursor_pass"(rx373_pos, "statement_mod_cond:sym<unless>", 'backtrack'=>1)
    .return (rx373_cur)
  rx373_restart1097:
    repr_get_attr_obj rx373_cstack, rx373_cur, rx373_curclass, "$!cstack"
  rx373_fail1098:
    unless rx373_bstack, rx373_done1096
    pop $I19, rx373_bstack
    if_null rx373_cstack, rx373_cstack_done1101
    unless rx373_cstack, rx373_cstack_done1101
    dec $I19
    set $P11, rx373_cstack[$I19]
  rx373_cstack_done1101:
    pop rx373_rep, rx373_bstack
    pop rx373_pos, rx373_bstack
    pop $I19, rx373_bstack
    lt rx373_pos, -1, rx373_done1096
    lt rx373_pos, 0, rx373_fail1098
    eq $I19, 0, rx373_fail1098
    nqp_islist $I20, rx373_cstack
    unless $I20, rx373_jump1099
    elements $I18, rx373_bstack
    le $I18, 0, rx373_cut1100
    dec $I18
    set $I18, rx373_bstack[$I18]
  rx373_cut1100:
    assign rx373_cstack, $I18
  rx373_jump1099:
    jump $I19
  rx373_done1096:
    rx373_cur."!cursor_fail"()
    .return (rx373_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_78_1346968539.359_caps" :subid("cuid_memo_92_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["cond"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_78_1346968539.359_nfa" :subid("cuid_memo_93_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 117
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 110
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 108
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 101
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 115
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 115
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 0
    push $P5027, $P5028
    box $P5029, 0
    push $P5027, $P5029
    box $P5030, 0
    push $P5027, $P5030
    push $P5001, $P5027
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop" :subid("cuid_79_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 853
    .param pmc self 
    $P5001 = self."!protoregex"("statement_mod_loop")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<while>" :subid("cuid_80_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 855
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx379_tgt
    .local int rx379_pos
    .local int rx379_off
    .local int rx379_eos
    .local int rx379_rep
    .local pmc rx379_cur
    .local pmc rx379_curclass
    .local pmc rx379_bstack
    .local pmc rx379_cstack
    (rx379_cur, rx379_tgt, rx379_pos, rx379_curclass, rx379_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx379_cur
    length rx379_eos, rx379_tgt
    eq $I19, 1, rx379_restart1112
    gt rx379_pos, rx379_eos, rx379_fail1113
    repr_get_attr_int $I11, self, rx379_curclass, "$!from"
    ne $I11, -1, rxscan380_done1119
    goto rxscan380_scan1118
  rxscan380_loop1117:
    inc rx379_pos
    gt rx379_pos, rx379_eos, rx379_fail1113
    repr_bind_attr_int rx379_cur, rx379_curclass, "$!from", rx379_pos
  rxscan380_scan1118:
    nqp_rxmark rx379_bstack, rxscan380_loop1117, rx379_pos, 0
  rxscan380_done1119:
    nqp_rxmark rx379_bstack, rxcap381_fail1121, rx379_pos, 0
    add $I11, rx379_pos, 5
    gt $I11, rx379_eos, rx379_fail1113
    substr $S10, rx379_tgt, rx379_pos, 5
    ne $S10, ucs4:"while", rx379_fail1113
    add rx379_pos, 5
    nqp_rxpeek $I19, rx379_bstack, rxcap381_fail1121
    inc $I19
    set $I11, rx379_bstack[$I19]
    $P11 = rx379_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx379_pos)
    rx379_cstack = rx379_cur."!cursor_capture"($P11, "sym")
    goto rxcap381_done1120
  rxcap381_fail1121:
    goto rx379_fail1113
  rxcap381_done1120:
    repr_bind_attr_int rx379_cur, rx379_curclass, "$!pos", rx379_pos
    $P11 = rx379_cur."ws"()
    repr_get_attr_int $I11, $P11, rx379_curclass, "$!pos"
    lt $I11, 0, rx379_fail1113
    repr_get_attr_int rx379_pos, $P11, rx379_curclass, "$!pos"
    repr_bind_attr_int rx379_cur, rx379_curclass, "$!pos", rx379_pos
    $P11 = rx379_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx379_curclass, "$!pos"
    lt $I11, 0, rx379_fail1113
    nqp_rxmark rx379_bstack, rxsubrule383_pass1123, -1, 0
  rxsubrule383_pass1123:
    rx379_cstack = rx379_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx379_pos, $P11, rx379_curclass, "$!pos"
    repr_bind_attr_int rx379_cur, rx379_curclass, "$!pos", rx379_pos
    $P11 = rx379_cur."ws"()
    repr_get_attr_int $I11, $P11, rx379_curclass, "$!pos"
    lt $I11, 0, rx379_fail1113
    repr_get_attr_int rx379_pos, $P11, rx379_curclass, "$!pos"
    rx379_cur."!cursor_pass"(rx379_pos, "statement_mod_loop:sym<while>", 'backtrack'=>1)
    .return (rx379_cur)
  rx379_restart1112:
    repr_get_attr_obj rx379_cstack, rx379_cur, rx379_curclass, "$!cstack"
  rx379_fail1113:
    unless rx379_bstack, rx379_done1111
    pop $I19, rx379_bstack
    if_null rx379_cstack, rx379_cstack_done1116
    unless rx379_cstack, rx379_cstack_done1116
    dec $I19
    set $P11, rx379_cstack[$I19]
  rx379_cstack_done1116:
    pop rx379_rep, rx379_bstack
    pop rx379_pos, rx379_bstack
    pop $I19, rx379_bstack
    lt rx379_pos, -1, rx379_done1111
    lt rx379_pos, 0, rx379_fail1113
    eq $I19, 0, rx379_fail1113
    nqp_islist $I20, rx379_cstack
    unless $I20, rx379_jump1114
    elements $I18, rx379_bstack
    le $I18, 0, rx379_cut1115
    dec $I18
    set $I18, rx379_bstack[$I18]
  rx379_cut1115:
    assign rx379_cstack, $I18
  rx379_jump1114:
    jump $I19
  rx379_done1111:
    rx379_cur."!cursor_fail"()
    .return (rx379_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_80_1346968539.359_caps" :subid("cuid_memo_94_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["cond"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_80_1346968539.359_nfa" :subid("cuid_memo_95_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 119
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 104
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 105
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 108
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 101
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 0
    push $P5023, $P5024
    box $P5025, 0
    push $P5023, $P5025
    box $P5026, 0
    push $P5023, $P5026
    push $P5001, $P5023
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<until>" :subid("cuid_81_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 856
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx385_tgt
    .local int rx385_pos
    .local int rx385_off
    .local int rx385_eos
    .local int rx385_rep
    .local pmc rx385_cur
    .local pmc rx385_curclass
    .local pmc rx385_bstack
    .local pmc rx385_cstack
    (rx385_cur, rx385_tgt, rx385_pos, rx385_curclass, rx385_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx385_cur
    length rx385_eos, rx385_tgt
    eq $I19, 1, rx385_restart1127
    gt rx385_pos, rx385_eos, rx385_fail1128
    repr_get_attr_int $I11, self, rx385_curclass, "$!from"
    ne $I11, -1, rxscan386_done1134
    goto rxscan386_scan1133
  rxscan386_loop1132:
    inc rx385_pos
    gt rx385_pos, rx385_eos, rx385_fail1128
    repr_bind_attr_int rx385_cur, rx385_curclass, "$!from", rx385_pos
  rxscan386_scan1133:
    nqp_rxmark rx385_bstack, rxscan386_loop1132, rx385_pos, 0
  rxscan386_done1134:
    nqp_rxmark rx385_bstack, rxcap387_fail1136, rx385_pos, 0
    add $I11, rx385_pos, 5
    gt $I11, rx385_eos, rx385_fail1128
    substr $S10, rx385_tgt, rx385_pos, 5
    ne $S10, ucs4:"until", rx385_fail1128
    add rx385_pos, 5
    nqp_rxpeek $I19, rx385_bstack, rxcap387_fail1136
    inc $I19
    set $I11, rx385_bstack[$I19]
    $P11 = rx385_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx385_pos)
    rx385_cstack = rx385_cur."!cursor_capture"($P11, "sym")
    goto rxcap387_done1135
  rxcap387_fail1136:
    goto rx385_fail1128
  rxcap387_done1135:
    repr_bind_attr_int rx385_cur, rx385_curclass, "$!pos", rx385_pos
    $P11 = rx385_cur."ws"()
    repr_get_attr_int $I11, $P11, rx385_curclass, "$!pos"
    lt $I11, 0, rx385_fail1128
    repr_get_attr_int rx385_pos, $P11, rx385_curclass, "$!pos"
    repr_bind_attr_int rx385_cur, rx385_curclass, "$!pos", rx385_pos
    $P11 = rx385_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx385_curclass, "$!pos"
    lt $I11, 0, rx385_fail1128
    nqp_rxmark rx385_bstack, rxsubrule389_pass1138, -1, 0
  rxsubrule389_pass1138:
    rx385_cstack = rx385_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx385_pos, $P11, rx385_curclass, "$!pos"
    repr_bind_attr_int rx385_cur, rx385_curclass, "$!pos", rx385_pos
    $P11 = rx385_cur."ws"()
    repr_get_attr_int $I11, $P11, rx385_curclass, "$!pos"
    lt $I11, 0, rx385_fail1128
    repr_get_attr_int rx385_pos, $P11, rx385_curclass, "$!pos"
    rx385_cur."!cursor_pass"(rx385_pos, "statement_mod_loop:sym<until>", 'backtrack'=>1)
    .return (rx385_cur)
  rx385_restart1127:
    repr_get_attr_obj rx385_cstack, rx385_cur, rx385_curclass, "$!cstack"
  rx385_fail1128:
    unless rx385_bstack, rx385_done1126
    pop $I19, rx385_bstack
    if_null rx385_cstack, rx385_cstack_done1131
    unless rx385_cstack, rx385_cstack_done1131
    dec $I19
    set $P11, rx385_cstack[$I19]
  rx385_cstack_done1131:
    pop rx385_rep, rx385_bstack
    pop rx385_pos, rx385_bstack
    pop $I19, rx385_bstack
    lt rx385_pos, -1, rx385_done1126
    lt rx385_pos, 0, rx385_fail1128
    eq $I19, 0, rx385_fail1128
    nqp_islist $I20, rx385_cstack
    unless $I20, rx385_jump1129
    elements $I18, rx385_bstack
    le $I18, 0, rx385_cut1130
    dec $I18
    set $I18, rx385_bstack[$I18]
  rx385_cut1130:
    assign rx385_cstack, $I18
  rx385_jump1129:
    jump $I19
  rx385_done1126:
    rx385_cur."!cursor_fail"()
    .return (rx385_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_81_1346968539.359_caps" :subid("cuid_memo_96_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["cond"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_81_1346968539.359_nfa" :subid("cuid_memo_97_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 117
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 110
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 116
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 105
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 108
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 0
    push $P5023, $P5024
    box $P5025, 0
    push $P5023, $P5025
    box $P5026, 0
    push $P5023, $P5026
    push $P5001, $P5023
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<for>" :subid("cuid_82_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 857
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx391_tgt
    .local int rx391_pos
    .local int rx391_off
    .local int rx391_eos
    .local int rx391_rep
    .local pmc rx391_cur
    .local pmc rx391_curclass
    .local pmc rx391_bstack
    .local pmc rx391_cstack
    (rx391_cur, rx391_tgt, rx391_pos, rx391_curclass, rx391_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx391_cur
    length rx391_eos, rx391_tgt
    eq $I19, 1, rx391_restart1142
    gt rx391_pos, rx391_eos, rx391_fail1143
    repr_get_attr_int $I11, self, rx391_curclass, "$!from"
    ne $I11, -1, rxscan392_done1149
    goto rxscan392_scan1148
  rxscan392_loop1147:
    inc rx391_pos
    gt rx391_pos, rx391_eos, rx391_fail1143
    repr_bind_attr_int rx391_cur, rx391_curclass, "$!from", rx391_pos
  rxscan392_scan1148:
    nqp_rxmark rx391_bstack, rxscan392_loop1147, rx391_pos, 0
  rxscan392_done1149:
    nqp_rxmark rx391_bstack, rxcap393_fail1151, rx391_pos, 0
    add $I11, rx391_pos, 3
    gt $I11, rx391_eos, rx391_fail1143
    substr $S10, rx391_tgt, rx391_pos, 3
    ne $S10, ucs4:"for", rx391_fail1143
    add rx391_pos, 3
    nqp_rxpeek $I19, rx391_bstack, rxcap393_fail1151
    inc $I19
    set $I11, rx391_bstack[$I19]
    $P11 = rx391_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx391_pos)
    rx391_cstack = rx391_cur."!cursor_capture"($P11, "sym")
    goto rxcap393_done1150
  rxcap393_fail1151:
    goto rx391_fail1143
  rxcap393_done1150:
    repr_bind_attr_int rx391_cur, rx391_curclass, "$!pos", rx391_pos
    $P11 = rx391_cur."ws"()
    repr_get_attr_int $I11, $P11, rx391_curclass, "$!pos"
    lt $I11, 0, rx391_fail1143
    repr_get_attr_int rx391_pos, $P11, rx391_curclass, "$!pos"
    repr_bind_attr_int rx391_cur, rx391_curclass, "$!pos", rx391_pos
    $P11 = rx391_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx391_curclass, "$!pos"
    lt $I11, 0, rx391_fail1143
    nqp_rxmark rx391_bstack, rxsubrule395_pass1153, -1, 0
  rxsubrule395_pass1153:
    rx391_cstack = rx391_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx391_pos, $P11, rx391_curclass, "$!pos"
    repr_bind_attr_int rx391_cur, rx391_curclass, "$!pos", rx391_pos
    $P11 = rx391_cur."ws"()
    repr_get_attr_int $I11, $P11, rx391_curclass, "$!pos"
    lt $I11, 0, rx391_fail1143
    repr_get_attr_int rx391_pos, $P11, rx391_curclass, "$!pos"
    rx391_cur."!cursor_pass"(rx391_pos, "statement_mod_loop:sym<for>", 'backtrack'=>1)
    .return (rx391_cur)
  rx391_restart1142:
    repr_get_attr_obj rx391_cstack, rx391_cur, rx391_curclass, "$!cstack"
  rx391_fail1143:
    unless rx391_bstack, rx391_done1141
    pop $I19, rx391_bstack
    if_null rx391_cstack, rx391_cstack_done1146
    unless rx391_cstack, rx391_cstack_done1146
    dec $I19
    set $P11, rx391_cstack[$I19]
  rx391_cstack_done1146:
    pop rx391_rep, rx391_bstack
    pop rx391_pos, rx391_bstack
    pop $I19, rx391_bstack
    lt rx391_pos, -1, rx391_done1141
    lt rx391_pos, 0, rx391_fail1143
    eq $I19, 0, rx391_fail1143
    nqp_islist $I20, rx391_cstack
    unless $I20, rx391_jump1144
    elements $I18, rx391_bstack
    le $I18, 0, rx391_cut1145
    dec $I18
    set $I18, rx391_bstack[$I18]
  rx391_cut1145:
    assign rx391_cstack, $I18
  rx391_jump1144:
    jump $I19
  rx391_done1141:
    rx391_cur."!cursor_fail"()
    .return (rx391_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_82_1346968539.359_caps" :subid("cuid_memo_98_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["cond"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_82_1346968539.359_nfa" :subid("cuid_memo_99_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 102
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 111
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 114
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 0
    push $P5015, $P5016
    box $P5017, 0
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<fatarrow>" :subid("cuid_83_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 861
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx397_tgt
    .local int rx397_pos
    .local int rx397_off
    .local int rx397_eos
    .local int rx397_rep
    .local pmc rx397_cur
    .local pmc rx397_curclass
    .local pmc rx397_bstack
    .local pmc rx397_cstack
    (rx397_cur, rx397_tgt, rx397_pos, rx397_curclass, rx397_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx397_cur
    length rx397_eos, rx397_tgt
    eq $I19, 1, rx397_restart1157
    gt rx397_pos, rx397_eos, rx397_fail1158
    repr_get_attr_int $I11, self, rx397_curclass, "$!from"
    ne $I11, -1, rxscan398_done1164
    goto rxscan398_scan1163
  rxscan398_loop1162:
    inc rx397_pos
    gt rx397_pos, rx397_eos, rx397_fail1158
    repr_bind_attr_int rx397_cur, rx397_curclass, "$!from", rx397_pos
  rxscan398_scan1163:
    nqp_rxmark rx397_bstack, rxscan398_loop1162, rx397_pos, 0
  rxscan398_done1164:
    repr_bind_attr_int rx397_cur, rx397_curclass, "$!pos", rx397_pos
    $P11 = rx397_cur."fatarrow"()
    repr_get_attr_int $I11, $P11, rx397_curclass, "$!pos"
    lt $I11, 0, rx397_fail1158
    nqp_rxmark rx397_bstack, rxsubrule399_pass1165, -1, 0
  rxsubrule399_pass1165:
    rx397_cstack = rx397_cur."!cursor_capture"($P11, "fatarrow")
    repr_get_attr_int rx397_pos, $P11, rx397_curclass, "$!pos"
    rx397_cur."!cursor_pass"(rx397_pos, "term:sym<fatarrow>", 'backtrack'=>1)
    .return (rx397_cur)
  rx397_restart1157:
    repr_get_attr_obj rx397_cstack, rx397_cur, rx397_curclass, "$!cstack"
  rx397_fail1158:
    unless rx397_bstack, rx397_done1156
    pop $I19, rx397_bstack
    if_null rx397_cstack, rx397_cstack_done1161
    unless rx397_cstack, rx397_cstack_done1161
    dec $I19
    set $P11, rx397_cstack[$I19]
  rx397_cstack_done1161:
    pop rx397_rep, rx397_bstack
    pop rx397_pos, rx397_bstack
    pop $I19, rx397_bstack
    lt rx397_pos, -1, rx397_done1156
    lt rx397_pos, 0, rx397_fail1158
    eq $I19, 0, rx397_fail1158
    nqp_islist $I20, rx397_cstack
    unless $I20, rx397_jump1159
    elements $I18, rx397_bstack
    le $I18, 0, rx397_cut1160
    dec $I18
    set $I18, rx397_bstack[$I18]
  rx397_cut1160:
    assign rx397_cstack, $I18
  rx397_jump1159:
    jump $I19
  rx397_done1156:
    rx397_cur."!cursor_fail"()
    .return (rx397_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_83_1346968539.359_caps" :subid("cuid_memo_100_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["fatarrow"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_83_1346968539.359_nfa" :subid("cuid_memo_101_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "fatarrow"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<colonpair>" :subid("cuid_84_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 862
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx400_tgt
    .local int rx400_pos
    .local int rx400_off
    .local int rx400_eos
    .local int rx400_rep
    .local pmc rx400_cur
    .local pmc rx400_curclass
    .local pmc rx400_bstack
    .local pmc rx400_cstack
    (rx400_cur, rx400_tgt, rx400_pos, rx400_curclass, rx400_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx400_cur
    length rx400_eos, rx400_tgt
    eq $I19, 1, rx400_restart1168
    gt rx400_pos, rx400_eos, rx400_fail1169
    repr_get_attr_int $I11, self, rx400_curclass, "$!from"
    ne $I11, -1, rxscan401_done1175
    goto rxscan401_scan1174
  rxscan401_loop1173:
    inc rx400_pos
    gt rx400_pos, rx400_eos, rx400_fail1169
    repr_bind_attr_int rx400_cur, rx400_curclass, "$!from", rx400_pos
  rxscan401_scan1174:
    nqp_rxmark rx400_bstack, rxscan401_loop1173, rx400_pos, 0
  rxscan401_done1175:
    repr_bind_attr_int rx400_cur, rx400_curclass, "$!pos", rx400_pos
    $P11 = rx400_cur."colonpair"()
    repr_get_attr_int $I11, $P11, rx400_curclass, "$!pos"
    lt $I11, 0, rx400_fail1169
    nqp_rxmark rx400_bstack, rxsubrule402_pass1176, -1, 0
  rxsubrule402_pass1176:
    rx400_cstack = rx400_cur."!cursor_capture"($P11, "colonpair")
    repr_get_attr_int rx400_pos, $P11, rx400_curclass, "$!pos"
    rx400_cur."!cursor_pass"(rx400_pos, "term:sym<colonpair>", 'backtrack'=>1)
    .return (rx400_cur)
  rx400_restart1168:
    repr_get_attr_obj rx400_cstack, rx400_cur, rx400_curclass, "$!cstack"
  rx400_fail1169:
    unless rx400_bstack, rx400_done1167
    pop $I19, rx400_bstack
    if_null rx400_cstack, rx400_cstack_done1172
    unless rx400_cstack, rx400_cstack_done1172
    dec $I19
    set $P11, rx400_cstack[$I19]
  rx400_cstack_done1172:
    pop rx400_rep, rx400_bstack
    pop rx400_pos, rx400_bstack
    pop $I19, rx400_bstack
    lt rx400_pos, -1, rx400_done1167
    lt rx400_pos, 0, rx400_fail1169
    eq $I19, 0, rx400_fail1169
    nqp_islist $I20, rx400_cstack
    unless $I20, rx400_jump1170
    elements $I18, rx400_bstack
    le $I18, 0, rx400_cut1171
    dec $I18
    set $I18, rx400_bstack[$I18]
  rx400_cut1171:
    assign rx400_cstack, $I18
  rx400_jump1170:
    jump $I19
  rx400_done1167:
    rx400_cur."!cursor_fail"()
    .return (rx400_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_84_1346968539.359_caps" :subid("cuid_memo_102_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["colonpair"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_84_1346968539.359_nfa" :subid("cuid_memo_103_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "colonpair"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<variable>" :subid("cuid_85_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 863
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx403_tgt
    .local int rx403_pos
    .local int rx403_off
    .local int rx403_eos
    .local int rx403_rep
    .local pmc rx403_cur
    .local pmc rx403_curclass
    .local pmc rx403_bstack
    .local pmc rx403_cstack
    (rx403_cur, rx403_tgt, rx403_pos, rx403_curclass, rx403_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx403_cur
    length rx403_eos, rx403_tgt
    eq $I19, 1, rx403_restart1179
    gt rx403_pos, rx403_eos, rx403_fail1180
    repr_get_attr_int $I11, self, rx403_curclass, "$!from"
    ne $I11, -1, rxscan404_done1186
    goto rxscan404_scan1185
  rxscan404_loop1184:
    inc rx403_pos
    gt rx403_pos, rx403_eos, rx403_fail1180
    repr_bind_attr_int rx403_cur, rx403_curclass, "$!from", rx403_pos
  rxscan404_scan1185:
    nqp_rxmark rx403_bstack, rxscan404_loop1184, rx403_pos, 0
  rxscan404_done1186:
    repr_bind_attr_int rx403_cur, rx403_curclass, "$!pos", rx403_pos
    $P11 = rx403_cur."variable"()
    repr_get_attr_int $I11, $P11, rx403_curclass, "$!pos"
    lt $I11, 0, rx403_fail1180
    nqp_rxmark rx403_bstack, rxsubrule405_pass1187, -1, 0
  rxsubrule405_pass1187:
    rx403_cstack = rx403_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx403_pos, $P11, rx403_curclass, "$!pos"
    rx403_cur."!cursor_pass"(rx403_pos, "term:sym<variable>", 'backtrack'=>1)
    .return (rx403_cur)
  rx403_restart1179:
    repr_get_attr_obj rx403_cstack, rx403_cur, rx403_curclass, "$!cstack"
  rx403_fail1180:
    unless rx403_bstack, rx403_done1178
    pop $I19, rx403_bstack
    if_null rx403_cstack, rx403_cstack_done1183
    unless rx403_cstack, rx403_cstack_done1183
    dec $I19
    set $P11, rx403_cstack[$I19]
  rx403_cstack_done1183:
    pop rx403_rep, rx403_bstack
    pop rx403_pos, rx403_bstack
    pop $I19, rx403_bstack
    lt rx403_pos, -1, rx403_done1178
    lt rx403_pos, 0, rx403_fail1180
    eq $I19, 0, rx403_fail1180
    nqp_islist $I20, rx403_cstack
    unless $I20, rx403_jump1181
    elements $I18, rx403_bstack
    le $I18, 0, rx403_cut1182
    dec $I18
    set $I18, rx403_bstack[$I18]
  rx403_cut1182:
    assign rx403_cstack, $I18
  rx403_jump1181:
    jump $I19
  rx403_done1178:
    rx403_cur."!cursor_fail"()
    .return (rx403_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_85_1346968539.359_caps" :subid("cuid_memo_104_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["variable"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_85_1346968539.359_nfa" :subid("cuid_memo_105_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "variable"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<package_declarator>" :subid("cuid_86_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 864
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx406_tgt
    .local int rx406_pos
    .local int rx406_off
    .local int rx406_eos
    .local int rx406_rep
    .local pmc rx406_cur
    .local pmc rx406_curclass
    .local pmc rx406_bstack
    .local pmc rx406_cstack
    (rx406_cur, rx406_tgt, rx406_pos, rx406_curclass, rx406_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx406_cur
    length rx406_eos, rx406_tgt
    eq $I19, 1, rx406_restart1190
    gt rx406_pos, rx406_eos, rx406_fail1191
    repr_get_attr_int $I11, self, rx406_curclass, "$!from"
    ne $I11, -1, rxscan407_done1197
    goto rxscan407_scan1196
  rxscan407_loop1195:
    inc rx406_pos
    gt rx406_pos, rx406_eos, rx406_fail1191
    repr_bind_attr_int rx406_cur, rx406_curclass, "$!from", rx406_pos
  rxscan407_scan1196:
    nqp_rxmark rx406_bstack, rxscan407_loop1195, rx406_pos, 0
  rxscan407_done1197:
    repr_bind_attr_int rx406_cur, rx406_curclass, "$!pos", rx406_pos
    $P11 = rx406_cur."package_declarator"()
    repr_get_attr_int $I11, $P11, rx406_curclass, "$!pos"
    lt $I11, 0, rx406_fail1191
    nqp_rxmark rx406_bstack, rxsubrule408_pass1198, -1, 0
  rxsubrule408_pass1198:
    rx406_cstack = rx406_cur."!cursor_capture"($P11, "package_declarator")
    repr_get_attr_int rx406_pos, $P11, rx406_curclass, "$!pos"
    rx406_cur."!cursor_pass"(rx406_pos, "term:sym<package_declarator>", 'backtrack'=>1)
    .return (rx406_cur)
  rx406_restart1190:
    repr_get_attr_obj rx406_cstack, rx406_cur, rx406_curclass, "$!cstack"
  rx406_fail1191:
    unless rx406_bstack, rx406_done1189
    pop $I19, rx406_bstack
    if_null rx406_cstack, rx406_cstack_done1194
    unless rx406_cstack, rx406_cstack_done1194
    dec $I19
    set $P11, rx406_cstack[$I19]
  rx406_cstack_done1194:
    pop rx406_rep, rx406_bstack
    pop rx406_pos, rx406_bstack
    pop $I19, rx406_bstack
    lt rx406_pos, -1, rx406_done1189
    lt rx406_pos, 0, rx406_fail1191
    eq $I19, 0, rx406_fail1191
    nqp_islist $I20, rx406_cstack
    unless $I20, rx406_jump1192
    elements $I18, rx406_bstack
    le $I18, 0, rx406_cut1193
    dec $I18
    set $I18, rx406_bstack[$I18]
  rx406_cut1193:
    assign rx406_cstack, $I18
  rx406_jump1192:
    jump $I19
  rx406_done1189:
    rx406_cur."!cursor_fail"()
    .return (rx406_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_86_1346968539.359_caps" :subid("cuid_memo_106_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["package_declarator"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_86_1346968539.359_nfa" :subid("cuid_memo_107_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "package_declarator"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<scope_declarator>" :subid("cuid_87_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 865
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx409_tgt
    .local int rx409_pos
    .local int rx409_off
    .local int rx409_eos
    .local int rx409_rep
    .local pmc rx409_cur
    .local pmc rx409_curclass
    .local pmc rx409_bstack
    .local pmc rx409_cstack
    (rx409_cur, rx409_tgt, rx409_pos, rx409_curclass, rx409_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx409_cur
    length rx409_eos, rx409_tgt
    eq $I19, 1, rx409_restart1201
    gt rx409_pos, rx409_eos, rx409_fail1202
    repr_get_attr_int $I11, self, rx409_curclass, "$!from"
    ne $I11, -1, rxscan410_done1208
    goto rxscan410_scan1207
  rxscan410_loop1206:
    inc rx409_pos
    gt rx409_pos, rx409_eos, rx409_fail1202
    repr_bind_attr_int rx409_cur, rx409_curclass, "$!from", rx409_pos
  rxscan410_scan1207:
    nqp_rxmark rx409_bstack, rxscan410_loop1206, rx409_pos, 0
  rxscan410_done1208:
    repr_bind_attr_int rx409_cur, rx409_curclass, "$!pos", rx409_pos
    $P11 = rx409_cur."scope_declarator"()
    repr_get_attr_int $I11, $P11, rx409_curclass, "$!pos"
    lt $I11, 0, rx409_fail1202
    nqp_rxmark rx409_bstack, rxsubrule411_pass1209, -1, 0
  rxsubrule411_pass1209:
    rx409_cstack = rx409_cur."!cursor_capture"($P11, "scope_declarator")
    repr_get_attr_int rx409_pos, $P11, rx409_curclass, "$!pos"
    rx409_cur."!cursor_pass"(rx409_pos, "term:sym<scope_declarator>", 'backtrack'=>1)
    .return (rx409_cur)
  rx409_restart1201:
    repr_get_attr_obj rx409_cstack, rx409_cur, rx409_curclass, "$!cstack"
  rx409_fail1202:
    unless rx409_bstack, rx409_done1200
    pop $I19, rx409_bstack
    if_null rx409_cstack, rx409_cstack_done1205
    unless rx409_cstack, rx409_cstack_done1205
    dec $I19
    set $P11, rx409_cstack[$I19]
  rx409_cstack_done1205:
    pop rx409_rep, rx409_bstack
    pop rx409_pos, rx409_bstack
    pop $I19, rx409_bstack
    lt rx409_pos, -1, rx409_done1200
    lt rx409_pos, 0, rx409_fail1202
    eq $I19, 0, rx409_fail1202
    nqp_islist $I20, rx409_cstack
    unless $I20, rx409_jump1203
    elements $I18, rx409_bstack
    le $I18, 0, rx409_cut1204
    dec $I18
    set $I18, rx409_bstack[$I18]
  rx409_cut1204:
    assign rx409_cstack, $I18
  rx409_jump1203:
    jump $I19
  rx409_done1200:
    rx409_cur."!cursor_fail"()
    .return (rx409_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_87_1346968539.359_caps" :subid("cuid_memo_108_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["scope_declarator"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_87_1346968539.359_nfa" :subid("cuid_memo_109_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "scope_declarator"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<routine_declarator>" :subid("cuid_88_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 866
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx412_tgt
    .local int rx412_pos
    .local int rx412_off
    .local int rx412_eos
    .local int rx412_rep
    .local pmc rx412_cur
    .local pmc rx412_curclass
    .local pmc rx412_bstack
    .local pmc rx412_cstack
    (rx412_cur, rx412_tgt, rx412_pos, rx412_curclass, rx412_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx412_cur
    length rx412_eos, rx412_tgt
    eq $I19, 1, rx412_restart1212
    gt rx412_pos, rx412_eos, rx412_fail1213
    repr_get_attr_int $I11, self, rx412_curclass, "$!from"
    ne $I11, -1, rxscan413_done1219
    goto rxscan413_scan1218
  rxscan413_loop1217:
    inc rx412_pos
    gt rx412_pos, rx412_eos, rx412_fail1213
    repr_bind_attr_int rx412_cur, rx412_curclass, "$!from", rx412_pos
  rxscan413_scan1218:
    nqp_rxmark rx412_bstack, rxscan413_loop1217, rx412_pos, 0
  rxscan413_done1219:
    repr_bind_attr_int rx412_cur, rx412_curclass, "$!pos", rx412_pos
    $P11 = rx412_cur."routine_declarator"()
    repr_get_attr_int $I11, $P11, rx412_curclass, "$!pos"
    lt $I11, 0, rx412_fail1213
    nqp_rxmark rx412_bstack, rxsubrule414_pass1220, -1, 0
  rxsubrule414_pass1220:
    rx412_cstack = rx412_cur."!cursor_capture"($P11, "routine_declarator")
    repr_get_attr_int rx412_pos, $P11, rx412_curclass, "$!pos"
    rx412_cur."!cursor_pass"(rx412_pos, "term:sym<routine_declarator>", 'backtrack'=>1)
    .return (rx412_cur)
  rx412_restart1212:
    repr_get_attr_obj rx412_cstack, rx412_cur, rx412_curclass, "$!cstack"
  rx412_fail1213:
    unless rx412_bstack, rx412_done1211
    pop $I19, rx412_bstack
    if_null rx412_cstack, rx412_cstack_done1216
    unless rx412_cstack, rx412_cstack_done1216
    dec $I19
    set $P11, rx412_cstack[$I19]
  rx412_cstack_done1216:
    pop rx412_rep, rx412_bstack
    pop rx412_pos, rx412_bstack
    pop $I19, rx412_bstack
    lt rx412_pos, -1, rx412_done1211
    lt rx412_pos, 0, rx412_fail1213
    eq $I19, 0, rx412_fail1213
    nqp_islist $I20, rx412_cstack
    unless $I20, rx412_jump1214
    elements $I18, rx412_bstack
    le $I18, 0, rx412_cut1215
    dec $I18
    set $I18, rx412_bstack[$I18]
  rx412_cut1215:
    assign rx412_cstack, $I18
  rx412_jump1214:
    jump $I19
  rx412_done1211:
    rx412_cur."!cursor_fail"()
    .return (rx412_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_88_1346968539.359_caps" :subid("cuid_memo_110_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["routine_declarator"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_88_1346968539.359_nfa" :subid("cuid_memo_111_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "routine_declarator"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<multi_declarator>" :subid("cuid_91_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 867
    .param pmc _lex_param_0 
    .const 'Sub' $P5003 = 'cuid_89_1346968539.359' 
    capture_lex $P5003 
    .const 'Sub' $P5003 = 'cuid_90_1346968539.359' 
    capture_lex $P5003 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx415_tgt
    .local int rx415_pos
    .local int rx415_off
    .local int rx415_eos
    .local int rx415_rep
    .local pmc rx415_cur
    .local pmc rx415_curclass
    .local pmc rx415_bstack
    .local pmc rx415_cstack
    (rx415_cur, rx415_tgt, rx415_pos, rx415_curclass, rx415_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx415_cur
    length rx415_eos, rx415_tgt
    eq $I19, 1, rx415_restart1223
    gt rx415_pos, rx415_eos, rx415_fail1224
    repr_get_attr_int $I11, self, rx415_curclass, "$!from"
    ne $I11, -1, rxscan416_done1230
    goto rxscan416_scan1229
  rxscan416_loop1228:
    inc rx415_pos
    gt rx415_pos, rx415_eos, rx415_fail1224
    repr_bind_attr_int rx415_cur, rx415_curclass, "$!from", rx415_pos
  rxscan416_scan1229:
    nqp_rxmark rx415_bstack, rxscan416_loop1228, rx415_pos, 0
  rxscan416_done1230:
    .const 'Sub' $P5001 = 'cuid_89_1346968539.359' 
    capture_lex $P5001
    repr_bind_attr_int rx415_cur, rx415_curclass, "$!pos", rx415_pos
    $P11 = rx415_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx415_curclass, "$!pos"
    lt $I11, 0, rx415_fail1224
    .const 'Sub' $P5002 = 'cuid_90_1346968539.359' 
    capture_lex $P5002
    repr_bind_attr_int rx415_cur, rx415_curclass, "$!pos", rx415_pos
    $P11 = rx415_cur."before"($P5002)
    repr_get_attr_int $I11, $P11, rx415_curclass, "$!pos"
    ge $I11, 0, rx415_fail1224
    repr_bind_attr_int rx415_cur, rx415_curclass, "$!pos", rx415_pos
    $P11 = rx415_cur."multi_declarator"()
    repr_get_attr_int $I11, $P11, rx415_curclass, "$!pos"
    lt $I11, 0, rx415_fail1224
    nqp_rxmark rx415_bstack, rxsubrule424_pass1260, -1, 0
  rxsubrule424_pass1260:
    rx415_cstack = rx415_cur."!cursor_capture"($P11, "multi_declarator")
    repr_get_attr_int rx415_pos, $P11, rx415_curclass, "$!pos"
    rx415_cur."!cursor_pass"(rx415_pos, "term:sym<multi_declarator>", 'backtrack'=>1)
    .return (rx415_cur)
  rx415_restart1223:
    repr_get_attr_obj rx415_cstack, rx415_cur, rx415_curclass, "$!cstack"
  rx415_fail1224:
    unless rx415_bstack, rx415_done1222
    pop $I19, rx415_bstack
    if_null rx415_cstack, rx415_cstack_done1227
    unless rx415_cstack, rx415_cstack_done1227
    dec $I19
    set $P11, rx415_cstack[$I19]
  rx415_cstack_done1227:
    pop rx415_rep, rx415_bstack
    pop rx415_pos, rx415_bstack
    pop $I19, rx415_bstack
    lt rx415_pos, -1, rx415_done1222
    lt rx415_pos, 0, rx415_fail1224
    eq $I19, 0, rx415_fail1224
    nqp_islist $I20, rx415_cstack
    unless $I20, rx415_jump1225
    elements $I18, rx415_bstack
    le $I18, 0, rx415_cut1226
    dec $I18
    set $I18, rx415_bstack[$I18]
  rx415_cut1226:
    assign rx415_cstack, $I18
  rx415_jump1225:
    jump $I19
  rx415_done1222:
    rx415_cur."!cursor_fail"()
    .return (rx415_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_91_1346968539.359_caps" :subid("cuid_memo_112_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["multi_declarator"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_91_1346968539.359_nfa" :subid("cuid_memo_113_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 109
    push $P5003, $P5005
    box $P5006, 3
    push $P5003, $P5006
    box $P5007, 2
    push $P5003, $P5007
    box $P5008, 112
    push $P5003, $P5008
    box $P5009, 7
    push $P5003, $P5009
    box $P5010, 2
    push $P5003, $P5010
    box $P5011, 111
    push $P5003, $P5011
    box $P5012, 11
    push $P5003, $P5012
    push $P5001, $P5003
    new $P5013, 'ResizablePMCArray'
    box $P5014, 0
    push $P5013, $P5014
    box $P5015, 0
    push $P5013, $P5015
    box $P5016, 0
    push $P5013, $P5016
    push $P5001, $P5013
    new $P5017, 'ResizablePMCArray'
    box $P5018, 2
    push $P5017, $P5018
    box $P5019, 117
    push $P5017, $P5019
    box $P5020, 4
    push $P5017, $P5020
    push $P5001, $P5017
    new $P5021, 'ResizablePMCArray'
    box $P5022, 2
    push $P5021, $P5022
    box $P5023, 108
    push $P5021, $P5023
    box $P5024, 5
    push $P5021, $P5024
    push $P5001, $P5021
    new $P5025, 'ResizablePMCArray'
    box $P5026, 2
    push $P5025, $P5026
    box $P5027, 116
    push $P5025, $P5027
    box $P5028, 6
    push $P5025, $P5028
    push $P5001, $P5025
    new $P5029, 'ResizablePMCArray'
    box $P5030, 2
    push $P5029, $P5030
    box $P5031, 105
    push $P5029, $P5031
    box $P5032, 2
    push $P5029, $P5032
    push $P5001, $P5029
    new $P5033, 'ResizablePMCArray'
    box $P5034, 2
    push $P5033, $P5034
    box $P5035, 114
    push $P5033, $P5035
    box $P5036, 8
    push $P5033, $P5036
    push $P5001, $P5033
    new $P5037, 'ResizablePMCArray'
    box $P5038, 2
    push $P5037, $P5038
    box $P5039, 111
    push $P5037, $P5039
    box $P5040, 9
    push $P5037, $P5040
    push $P5001, $P5037
    new $P5041, 'ResizablePMCArray'
    box $P5042, 2
    push $P5041, $P5042
    box $P5043, 116
    push $P5041, $P5043
    box $P5044, 10
    push $P5041, $P5044
    push $P5001, $P5041
    new $P5045, 'ResizablePMCArray'
    box $P5046, 2
    push $P5045, $P5046
    box $P5047, 111
    push $P5045, $P5047
    box $P5048, 2
    push $P5045, $P5048
    push $P5001, $P5045
    new $P5049, 'ResizablePMCArray'
    box $P5050, 2
    push $P5049, $P5050
    box $P5051, 110
    push $P5049, $P5051
    box $P5052, 12
    push $P5049, $P5052
    push $P5001, $P5049
    new $P5053, 'ResizablePMCArray'
    box $P5054, 2
    push $P5053, $P5054
    box $P5055, 108
    push $P5053, $P5055
    box $P5056, 13
    push $P5053, $P5056
    push $P5001, $P5053
    new $P5057, 'ResizablePMCArray'
    box $P5058, 2
    push $P5057, $P5058
    box $P5059, 121
    push $P5057, $P5059
    box $P5060, 2
    push $P5057, $P5060
    push $P5001, $P5057
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_89_1346968539.359") :anon :lex :outer("cuid_91_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx417_tgt
    .local int rx417_pos
    .local int rx417_off
    .local int rx417_eos
    .local int rx417_rep
    .local pmc rx417_cur
    .local pmc rx417_curclass
    .local pmc rx417_bstack
    .local pmc rx417_cstack
    (rx417_cur, rx417_tgt, rx417_pos, rx417_curclass, rx417_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx417_cur
    length rx417_eos, rx417_tgt
    eq $I19, 1, rx417_restart1233
    gt rx417_pos, rx417_eos, rx417_fail1234
    repr_get_attr_int $I11, self, rx417_curclass, "$!from"
    ne $I11, -1, rxscan418_done1240
    goto rxscan418_scan1239
  rxscan418_loop1238:
    inc rx417_pos
    gt rx417_pos, rx417_eos, rx417_fail1234
    repr_bind_attr_int rx417_cur, rx417_curclass, "$!from", rx417_pos
  rxscan418_scan1239:
    nqp_rxmark rx417_bstack, rxscan418_loop1238, rx417_pos, 0
  rxscan418_done1240:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt419_01242
    nqp_push_label $P11, alt419_11243
    nqp_push_label $P11, alt419_21244
    nqp_rxmark rx417_bstack, alt419_end1241, -1, 0
    rx417_cur."!alt"(rx417_pos, "alt_nfa__17_1346968541.122", $P11)
    goto rx417_fail1234
  alt419_01242:
    add $I11, rx417_pos, 5
    gt $I11, rx417_eos, rx417_fail1234
    substr $S10, rx417_tgt, rx417_pos, 5
    ne $S10, ucs4:"multi", rx417_fail1234
    add rx417_pos, 5
    goto alt419_end1241
  alt419_11243:
    add $I11, rx417_pos, 5
    gt $I11, rx417_eos, rx417_fail1234
    substr $S10, rx417_tgt, rx417_pos, 5
    ne $S10, ucs4:"proto", rx417_fail1234
    add rx417_pos, 5
    goto alt419_end1241
  alt419_21244:
    add $I11, rx417_pos, 4
    gt $I11, rx417_eos, rx417_fail1234
    substr $S10, rx417_tgt, rx417_pos, 4
    ne $S10, ucs4:"only", rx417_fail1234
    add rx417_pos, 4
    goto alt419_end1241
  alt419_end1241:
    rx417_cur."!cursor_pass"(rx417_pos, 'backtrack'=>1)
    .return (rx417_cur)
  rx417_restart1233:
    repr_get_attr_obj rx417_cstack, rx417_cur, rx417_curclass, "$!cstack"
  rx417_fail1234:
    unless rx417_bstack, rx417_done1232
    pop $I19, rx417_bstack
    if_null rx417_cstack, rx417_cstack_done1237
    unless rx417_cstack, rx417_cstack_done1237
    dec $I19
    set $P11, rx417_cstack[$I19]
  rx417_cstack_done1237:
    pop rx417_rep, rx417_bstack
    pop rx417_pos, rx417_bstack
    pop $I19, rx417_bstack
    lt rx417_pos, -1, rx417_done1232
    lt rx417_pos, 0, rx417_fail1234
    eq $I19, 0, rx417_fail1234
    nqp_islist $I20, rx417_cstack
    unless $I20, rx417_jump1235
    elements $I18, rx417_bstack
    le $I18, 0, rx417_cut1236
    dec $I18
    set $I18, rx417_bstack[$I18]
  rx417_cut1236:
    assign rx417_cstack, $I18
  rx417_jump1235:
    jump $I19
  rx417_done1232:
    rx417_cur."!cursor_fail"()
    .return (rx417_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_89_1346968539.359_caps" :subid("cuid_memo_114_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_89_1346968539.359_nfa" :subid("cuid_memo_115_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 109
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    box $P5007, 2
    push $P5003, $P5007
    box $P5008, 112
    push $P5003, $P5008
    box $P5009, 6
    push $P5003, $P5009
    box $P5010, 2
    push $P5003, $P5010
    box $P5011, 111
    push $P5003, $P5011
    box $P5012, 10
    push $P5003, $P5012
    push $P5001, $P5003
    new $P5013, 'ResizablePMCArray'
    box $P5014, 2
    push $P5013, $P5014
    box $P5015, 117
    push $P5013, $P5015
    box $P5016, 3
    push $P5013, $P5016
    push $P5001, $P5013
    new $P5017, 'ResizablePMCArray'
    box $P5018, 2
    push $P5017, $P5018
    box $P5019, 108
    push $P5017, $P5019
    box $P5020, 4
    push $P5017, $P5020
    push $P5001, $P5017
    new $P5021, 'ResizablePMCArray'
    box $P5022, 2
    push $P5021, $P5022
    box $P5023, 116
    push $P5021, $P5023
    box $P5024, 5
    push $P5021, $P5024
    push $P5001, $P5021
    new $P5025, 'ResizablePMCArray'
    box $P5026, 2
    push $P5025, $P5026
    box $P5027, 105
    push $P5025, $P5027
    box $P5028, 0
    push $P5025, $P5028
    push $P5001, $P5025
    new $P5029, 'ResizablePMCArray'
    box $P5030, 2
    push $P5029, $P5030
    box $P5031, 114
    push $P5029, $P5031
    box $P5032, 7
    push $P5029, $P5032
    push $P5001, $P5029
    new $P5033, 'ResizablePMCArray'
    box $P5034, 2
    push $P5033, $P5034
    box $P5035, 111
    push $P5033, $P5035
    box $P5036, 8
    push $P5033, $P5036
    push $P5001, $P5033
    new $P5037, 'ResizablePMCArray'
    box $P5038, 2
    push $P5037, $P5038
    box $P5039, 116
    push $P5037, $P5039
    box $P5040, 9
    push $P5037, $P5040
    push $P5001, $P5037
    new $P5041, 'ResizablePMCArray'
    box $P5042, 2
    push $P5041, $P5042
    box $P5043, 111
    push $P5041, $P5043
    box $P5044, 0
    push $P5041, $P5044
    push $P5001, $P5041
    new $P5045, 'ResizablePMCArray'
    box $P5046, 2
    push $P5045, $P5046
    box $P5047, 110
    push $P5045, $P5047
    box $P5048, 11
    push $P5045, $P5048
    push $P5001, $P5045
    new $P5049, 'ResizablePMCArray'
    box $P5050, 2
    push $P5049, $P5050
    box $P5051, 108
    push $P5049, $P5051
    box $P5052, 12
    push $P5049, $P5052
    push $P5001, $P5049
    new $P5053, 'ResizablePMCArray'
    box $P5054, 2
    push $P5053, $P5054
    box $P5055, 121
    push $P5053, $P5055
    box $P5056, 0
    push $P5053, $P5056
    push $P5001, $P5053
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_89_1346968539.359_alt_nfa__17_1346968541.122" :subid("cuid_memo_116_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 109
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 117
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 2
    push $P5012, $P5013
    box $P5014, 108
    push $P5012, $P5014
    box $P5015, 4
    push $P5012, $P5015
    push $P5002, $P5012
    new $P5016, 'ResizablePMCArray'
    box $P5017, 2
    push $P5016, $P5017
    box $P5018, 116
    push $P5016, $P5018
    box $P5019, 5
    push $P5016, $P5019
    push $P5002, $P5016
    new $P5020, 'ResizablePMCArray'
    box $P5021, 2
    push $P5020, $P5021
    box $P5022, 105
    push $P5020, $P5022
    box $P5023, 0
    push $P5020, $P5023
    push $P5002, $P5020
    push $P5001, $P5002
    new $P5024, 'ResizablePMCArray'
    new $P5025, 'ResizablePMCArray'
    push $P5024, $P5025
    new $P5026, 'ResizablePMCArray'
    box $P5027, 2
    push $P5026, $P5027
    box $P5028, 112
    push $P5026, $P5028
    box $P5029, 2
    push $P5026, $P5029
    push $P5024, $P5026
    new $P5030, 'ResizablePMCArray'
    box $P5031, 2
    push $P5030, $P5031
    box $P5032, 114
    push $P5030, $P5032
    box $P5033, 3
    push $P5030, $P5033
    push $P5024, $P5030
    new $P5034, 'ResizablePMCArray'
    box $P5035, 2
    push $P5034, $P5035
    box $P5036, 111
    push $P5034, $P5036
    box $P5037, 4
    push $P5034, $P5037
    push $P5024, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 2
    push $P5038, $P5039
    box $P5040, 116
    push $P5038, $P5040
    box $P5041, 5
    push $P5038, $P5041
    push $P5024, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 111
    push $P5042, $P5044
    box $P5045, 0
    push $P5042, $P5045
    push $P5024, $P5042
    push $P5001, $P5024
    new $P5046, 'ResizablePMCArray'
    new $P5047, 'ResizablePMCArray'
    push $P5046, $P5047
    new $P5048, 'ResizablePMCArray'
    box $P5049, 2
    push $P5048, $P5049
    box $P5050, 111
    push $P5048, $P5050
    box $P5051, 2
    push $P5048, $P5051
    push $P5046, $P5048
    new $P5052, 'ResizablePMCArray'
    box $P5053, 2
    push $P5052, $P5053
    box $P5054, 110
    push $P5052, $P5054
    box $P5055, 3
    push $P5052, $P5055
    push $P5046, $P5052
    new $P5056, 'ResizablePMCArray'
    box $P5057, 2
    push $P5056, $P5057
    box $P5058, 108
    push $P5056, $P5058
    box $P5059, 4
    push $P5056, $P5059
    push $P5046, $P5056
    new $P5060, 'ResizablePMCArray'
    box $P5061, 2
    push $P5060, $P5061
    box $P5062, 121
    push $P5060, $P5062
    box $P5063, 0
    push $P5060, $P5063
    push $P5046, $P5060
    push $P5001, $P5046
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_90_1346968539.359") :anon :lex :outer("cuid_91_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx420_tgt
    .local int rx420_pos
    .local int rx420_off
    .local int rx420_eos
    .local int rx420_rep
    .local pmc rx420_cur
    .local pmc rx420_curclass
    .local pmc rx420_bstack
    .local pmc rx420_cstack
    (rx420_cur, rx420_tgt, rx420_pos, rx420_curclass, rx420_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx420_cur
    length rx420_eos, rx420_tgt
    eq $I19, 1, rx420_restart1247
    gt rx420_pos, rx420_eos, rx420_fail1248
    repr_get_attr_int $I11, self, rx420_curclass, "$!from"
    ne $I11, -1, rxscan421_done1254
    goto rxscan421_scan1253
  rxscan421_loop1252:
    inc rx420_pos
    gt rx420_pos, rx420_eos, rx420_fail1248
    repr_bind_attr_int rx420_cur, rx420_curclass, "$!from", rx420_pos
  rxscan421_scan1253:
    nqp_rxmark rx420_bstack, rxscan421_loop1252, rx420_pos, 0
  rxscan421_done1254:
    add $I11, rx420_pos, 5
    gt $I11, rx420_eos, rx420_fail1248
    substr $S10, rx420_tgt, rx420_pos, 5
    ne $S10, ucs4:"proto", rx420_fail1248
    add rx420_pos, 5
    repr_bind_attr_int rx420_cur, rx420_curclass, "$!pos", rx420_pos
    $P11 = rx420_cur."ws"()
    repr_get_attr_int $I11, $P11, rx420_curclass, "$!pos"
    lt $I11, 0, rx420_fail1248
    repr_get_attr_int rx420_pos, $P11, rx420_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt423_01257
    nqp_push_label $P11, alt423_11258
    nqp_push_label $P11, alt423_21259
    nqp_rxmark rx420_bstack, alt423_end1256, -1, 0
    rx420_cur."!alt"(rx420_pos, "alt_nfa__18_1346968541.133", $P11)
    goto rx420_fail1248
  alt423_01257:
    add $I11, rx420_pos, 5
    gt $I11, rx420_eos, rx420_fail1248
    substr $S10, rx420_tgt, rx420_pos, 5
    ne $S10, ucs4:"regex", rx420_fail1248
    add rx420_pos, 5
    goto alt423_end1256
  alt423_11258:
    add $I11, rx420_pos, 5
    gt $I11, rx420_eos, rx420_fail1248
    substr $S10, rx420_tgt, rx420_pos, 5
    ne $S10, ucs4:"token", rx420_fail1248
    add rx420_pos, 5
    goto alt423_end1256
  alt423_21259:
    add $I11, rx420_pos, 4
    gt $I11, rx420_eos, rx420_fail1248
    substr $S10, rx420_tgt, rx420_pos, 4
    ne $S10, ucs4:"rule", rx420_fail1248
    add rx420_pos, 4
    goto alt423_end1256
  alt423_end1256:
    nqp_rxcommit rx420_bstack, alt423_end1256
    rx420_cur."!cursor_pass"(rx420_pos, 'backtrack'=>1)
    .return (rx420_cur)
  rx420_restart1247:
    repr_get_attr_obj rx420_cstack, rx420_cur, rx420_curclass, "$!cstack"
  rx420_fail1248:
    unless rx420_bstack, rx420_done1246
    pop $I19, rx420_bstack
    if_null rx420_cstack, rx420_cstack_done1251
    unless rx420_cstack, rx420_cstack_done1251
    dec $I19
    set $P11, rx420_cstack[$I19]
  rx420_cstack_done1251:
    pop rx420_rep, rx420_bstack
    pop rx420_pos, rx420_bstack
    pop $I19, rx420_bstack
    lt rx420_pos, -1, rx420_done1246
    lt rx420_pos, 0, rx420_fail1248
    eq $I19, 0, rx420_fail1248
    nqp_islist $I20, rx420_cstack
    unless $I20, rx420_jump1249
    elements $I18, rx420_bstack
    le $I18, 0, rx420_cut1250
    dec $I18
    set $I18, rx420_bstack[$I18]
  rx420_cut1250:
    assign rx420_cstack, $I18
  rx420_jump1249:
    jump $I19
  rx420_done1246:
    rx420_cur."!cursor_fail"()
    .return (rx420_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_90_1346968539.359_caps" :subid("cuid_memo_117_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_90_1346968539.359_nfa" :subid("cuid_memo_118_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 112
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 114
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 111
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 116
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 111
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 8
    push $P5023, $P5024
    box $P5025, "ws"
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 2
    push $P5027, $P5028
    box $P5029, 114
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    box $P5031, 2
    push $P5027, $P5031
    box $P5032, 116
    push $P5027, $P5032
    box $P5033, 12
    push $P5027, $P5033
    box $P5034, 2
    push $P5027, $P5034
    box $P5035, 114
    push $P5027, $P5035
    box $P5036, 16
    push $P5027, $P5036
    push $P5001, $P5027
    new $P5037, 'ResizablePMCArray'
    box $P5038, 2
    push $P5037, $P5038
    box $P5039, 101
    push $P5037, $P5039
    box $P5040, 9
    push $P5037, $P5040
    push $P5001, $P5037
    new $P5041, 'ResizablePMCArray'
    box $P5042, 2
    push $P5041, $P5042
    box $P5043, 103
    push $P5041, $P5043
    box $P5044, 10
    push $P5041, $P5044
    push $P5001, $P5041
    new $P5045, 'ResizablePMCArray'
    box $P5046, 2
    push $P5045, $P5046
    box $P5047, 101
    push $P5045, $P5047
    box $P5048, 11
    push $P5045, $P5048
    push $P5001, $P5045
    new $P5049, 'ResizablePMCArray'
    box $P5050, 2
    push $P5049, $P5050
    box $P5051, 120
    push $P5049, $P5051
    box $P5052, 0
    push $P5049, $P5052
    push $P5001, $P5049
    new $P5053, 'ResizablePMCArray'
    box $P5054, 2
    push $P5053, $P5054
    box $P5055, 111
    push $P5053, $P5055
    box $P5056, 13
    push $P5053, $P5056
    push $P5001, $P5053
    new $P5057, 'ResizablePMCArray'
    box $P5058, 2
    push $P5057, $P5058
    box $P5059, 107
    push $P5057, $P5059
    box $P5060, 14
    push $P5057, $P5060
    push $P5001, $P5057
    new $P5061, 'ResizablePMCArray'
    box $P5062, 2
    push $P5061, $P5062
    box $P5063, 101
    push $P5061, $P5063
    box $P5064, 15
    push $P5061, $P5064
    push $P5001, $P5061
    new $P5065, 'ResizablePMCArray'
    box $P5066, 2
    push $P5065, $P5066
    box $P5067, 110
    push $P5065, $P5067
    box $P5068, 0
    push $P5065, $P5068
    push $P5001, $P5065
    new $P5069, 'ResizablePMCArray'
    box $P5070, 2
    push $P5069, $P5070
    box $P5071, 117
    push $P5069, $P5071
    box $P5072, 17
    push $P5069, $P5072
    push $P5001, $P5069
    new $P5073, 'ResizablePMCArray'
    box $P5074, 2
    push $P5073, $P5074
    box $P5075, 108
    push $P5073, $P5075
    box $P5076, 18
    push $P5073, $P5076
    push $P5001, $P5073
    new $P5077, 'ResizablePMCArray'
    box $P5078, 2
    push $P5077, $P5078
    box $P5079, 101
    push $P5077, $P5079
    box $P5080, 0
    push $P5077, $P5080
    push $P5001, $P5077
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_90_1346968539.359_alt_nfa__18_1346968541.133" :subid("cuid_memo_119_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 114
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 101
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 2
    push $P5012, $P5013
    box $P5014, 103
    push $P5012, $P5014
    box $P5015, 4
    push $P5012, $P5015
    push $P5002, $P5012
    new $P5016, 'ResizablePMCArray'
    box $P5017, 2
    push $P5016, $P5017
    box $P5018, 101
    push $P5016, $P5018
    box $P5019, 5
    push $P5016, $P5019
    push $P5002, $P5016
    new $P5020, 'ResizablePMCArray'
    box $P5021, 2
    push $P5020, $P5021
    box $P5022, 120
    push $P5020, $P5022
    box $P5023, 0
    push $P5020, $P5023
    push $P5002, $P5020
    push $P5001, $P5002
    new $P5024, 'ResizablePMCArray'
    new $P5025, 'ResizablePMCArray'
    push $P5024, $P5025
    new $P5026, 'ResizablePMCArray'
    box $P5027, 2
    push $P5026, $P5027
    box $P5028, 116
    push $P5026, $P5028
    box $P5029, 2
    push $P5026, $P5029
    push $P5024, $P5026
    new $P5030, 'ResizablePMCArray'
    box $P5031, 2
    push $P5030, $P5031
    box $P5032, 111
    push $P5030, $P5032
    box $P5033, 3
    push $P5030, $P5033
    push $P5024, $P5030
    new $P5034, 'ResizablePMCArray'
    box $P5035, 2
    push $P5034, $P5035
    box $P5036, 107
    push $P5034, $P5036
    box $P5037, 4
    push $P5034, $P5037
    push $P5024, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 2
    push $P5038, $P5039
    box $P5040, 101
    push $P5038, $P5040
    box $P5041, 5
    push $P5038, $P5041
    push $P5024, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 110
    push $P5042, $P5044
    box $P5045, 0
    push $P5042, $P5045
    push $P5024, $P5042
    push $P5001, $P5024
    new $P5046, 'ResizablePMCArray'
    new $P5047, 'ResizablePMCArray'
    push $P5046, $P5047
    new $P5048, 'ResizablePMCArray'
    box $P5049, 2
    push $P5048, $P5049
    box $P5050, 114
    push $P5048, $P5050
    box $P5051, 2
    push $P5048, $P5051
    push $P5046, $P5048
    new $P5052, 'ResizablePMCArray'
    box $P5053, 2
    push $P5052, $P5053
    box $P5054, 117
    push $P5052, $P5054
    box $P5055, 3
    push $P5052, $P5055
    push $P5046, $P5052
    new $P5056, 'ResizablePMCArray'
    box $P5057, 2
    push $P5056, $P5057
    box $P5058, 108
    push $P5056, $P5058
    box $P5059, 4
    push $P5056, $P5059
    push $P5046, $P5056
    new $P5060, 'ResizablePMCArray'
    box $P5061, 2
    push $P5060, $P5061
    box $P5062, 101
    push $P5060, $P5062
    box $P5063, 0
    push $P5060, $P5063
    push $P5046, $P5060
    push $P5001, $P5046
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<regex_declarator>" :subid("cuid_92_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 872
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx425_tgt
    .local int rx425_pos
    .local int rx425_off
    .local int rx425_eos
    .local int rx425_rep
    .local pmc rx425_cur
    .local pmc rx425_curclass
    .local pmc rx425_bstack
    .local pmc rx425_cstack
    (rx425_cur, rx425_tgt, rx425_pos, rx425_curclass, rx425_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx425_cur
    length rx425_eos, rx425_tgt
    eq $I19, 1, rx425_restart1263
    gt rx425_pos, rx425_eos, rx425_fail1264
    repr_get_attr_int $I11, self, rx425_curclass, "$!from"
    ne $I11, -1, rxscan426_done1270
    goto rxscan426_scan1269
  rxscan426_loop1268:
    inc rx425_pos
    gt rx425_pos, rx425_eos, rx425_fail1264
    repr_bind_attr_int rx425_cur, rx425_curclass, "$!from", rx425_pos
  rxscan426_scan1269:
    nqp_rxmark rx425_bstack, rxscan426_loop1268, rx425_pos, 0
  rxscan426_done1270:
    repr_bind_attr_int rx425_cur, rx425_curclass, "$!pos", rx425_pos
    $P11 = rx425_cur."regex_declarator"()
    repr_get_attr_int $I11, $P11, rx425_curclass, "$!pos"
    lt $I11, 0, rx425_fail1264
    nqp_rxmark rx425_bstack, rxsubrule427_pass1271, -1, 0
  rxsubrule427_pass1271:
    rx425_cstack = rx425_cur."!cursor_capture"($P11, "regex_declarator")
    repr_get_attr_int rx425_pos, $P11, rx425_curclass, "$!pos"
    rx425_cur."!cursor_pass"(rx425_pos, "term:sym<regex_declarator>", 'backtrack'=>1)
    .return (rx425_cur)
  rx425_restart1263:
    repr_get_attr_obj rx425_cstack, rx425_cur, rx425_curclass, "$!cstack"
  rx425_fail1264:
    unless rx425_bstack, rx425_done1262
    pop $I19, rx425_bstack
    if_null rx425_cstack, rx425_cstack_done1267
    unless rx425_cstack, rx425_cstack_done1267
    dec $I19
    set $P11, rx425_cstack[$I19]
  rx425_cstack_done1267:
    pop rx425_rep, rx425_bstack
    pop rx425_pos, rx425_bstack
    pop $I19, rx425_bstack
    lt rx425_pos, -1, rx425_done1262
    lt rx425_pos, 0, rx425_fail1264
    eq $I19, 0, rx425_fail1264
    nqp_islist $I20, rx425_cstack
    unless $I20, rx425_jump1265
    elements $I18, rx425_bstack
    le $I18, 0, rx425_cut1266
    dec $I18
    set $I18, rx425_bstack[$I18]
  rx425_cut1266:
    assign rx425_cstack, $I18
  rx425_jump1265:
    jump $I19
  rx425_done1262:
    rx425_cur."!cursor_fail"()
    .return (rx425_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_92_1346968539.359_caps" :subid("cuid_memo_120_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["regex_declarator"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_92_1346968539.359_nfa" :subid("cuid_memo_121_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "regex_declarator"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<statement_prefix>" :subid("cuid_93_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 873
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx428_tgt
    .local int rx428_pos
    .local int rx428_off
    .local int rx428_eos
    .local int rx428_rep
    .local pmc rx428_cur
    .local pmc rx428_curclass
    .local pmc rx428_bstack
    .local pmc rx428_cstack
    (rx428_cur, rx428_tgt, rx428_pos, rx428_curclass, rx428_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx428_cur
    length rx428_eos, rx428_tgt
    eq $I19, 1, rx428_restart1274
    gt rx428_pos, rx428_eos, rx428_fail1275
    repr_get_attr_int $I11, self, rx428_curclass, "$!from"
    ne $I11, -1, rxscan429_done1281
    goto rxscan429_scan1280
  rxscan429_loop1279:
    inc rx428_pos
    gt rx428_pos, rx428_eos, rx428_fail1275
    repr_bind_attr_int rx428_cur, rx428_curclass, "$!from", rx428_pos
  rxscan429_scan1280:
    nqp_rxmark rx428_bstack, rxscan429_loop1279, rx428_pos, 0
  rxscan429_done1281:
    repr_bind_attr_int rx428_cur, rx428_curclass, "$!pos", rx428_pos
    $P11 = rx428_cur."statement_prefix"()
    repr_get_attr_int $I11, $P11, rx428_curclass, "$!pos"
    lt $I11, 0, rx428_fail1275
    nqp_rxmark rx428_bstack, rxsubrule430_pass1282, -1, 0
  rxsubrule430_pass1282:
    rx428_cstack = rx428_cur."!cursor_capture"($P11, "statement_prefix")
    repr_get_attr_int rx428_pos, $P11, rx428_curclass, "$!pos"
    rx428_cur."!cursor_pass"(rx428_pos, "term:sym<statement_prefix>", 'backtrack'=>1)
    .return (rx428_cur)
  rx428_restart1274:
    repr_get_attr_obj rx428_cstack, rx428_cur, rx428_curclass, "$!cstack"
  rx428_fail1275:
    unless rx428_bstack, rx428_done1273
    pop $I19, rx428_bstack
    if_null rx428_cstack, rx428_cstack_done1278
    unless rx428_cstack, rx428_cstack_done1278
    dec $I19
    set $P11, rx428_cstack[$I19]
  rx428_cstack_done1278:
    pop rx428_rep, rx428_bstack
    pop rx428_pos, rx428_bstack
    pop $I19, rx428_bstack
    lt rx428_pos, -1, rx428_done1273
    lt rx428_pos, 0, rx428_fail1275
    eq $I19, 0, rx428_fail1275
    nqp_islist $I20, rx428_cstack
    unless $I20, rx428_jump1276
    elements $I18, rx428_bstack
    le $I18, 0, rx428_cut1277
    dec $I18
    set $I18, rx428_bstack[$I18]
  rx428_cut1277:
    assign rx428_cstack, $I18
  rx428_jump1276:
    jump $I19
  rx428_done1273:
    rx428_cur."!cursor_fail"()
    .return (rx428_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_93_1346968539.359_caps" :subid("cuid_memo_122_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["statement_prefix"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_93_1346968539.359_nfa" :subid("cuid_memo_123_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "statement_prefix"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<lambda>" :subid("cuid_94_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 874
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx431_tgt
    .local int rx431_pos
    .local int rx431_off
    .local int rx431_eos
    .local int rx431_rep
    .local pmc rx431_cur
    .local pmc rx431_curclass
    .local pmc rx431_bstack
    .local pmc rx431_cstack
    (rx431_cur, rx431_tgt, rx431_pos, rx431_curclass, rx431_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx431_cur
    length rx431_eos, rx431_tgt
    eq $I19, 1, rx431_restart1285
    gt rx431_pos, rx431_eos, rx431_fail1286
    repr_get_attr_int $I11, self, rx431_curclass, "$!from"
    ne $I11, -1, rxscan432_done1292
    goto rxscan432_scan1291
  rxscan432_loop1290:
    inc rx431_pos
    gt rx431_pos, rx431_eos, rx431_fail1286
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!from", rx431_pos
  rxscan432_scan1291:
    nqp_rxmark rx431_bstack, rxscan432_loop1290, rx431_pos, 0
  rxscan432_done1292:
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!pos", rx431_pos
    $P11 = rx431_cur."lambda"()
    repr_get_attr_int $I11, $P11, rx431_curclass, "$!pos"
    lt $I11, 0, rx431_fail1286
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!pos", rx431_pos
    $P11 = rx431_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx431_curclass, "$!pos"
    lt $I11, 0, rx431_fail1286
    nqp_rxmark rx431_bstack, rxsubrule433_pass1293, -1, 0
  rxsubrule433_pass1293:
    rx431_cstack = rx431_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx431_pos, $P11, rx431_curclass, "$!pos"
    rx431_cur."!cursor_pass"(rx431_pos, "term:sym<lambda>", 'backtrack'=>1)
    .return (rx431_cur)
  rx431_restart1285:
    repr_get_attr_obj rx431_cstack, rx431_cur, rx431_curclass, "$!cstack"
  rx431_fail1286:
    unless rx431_bstack, rx431_done1284
    pop $I19, rx431_bstack
    if_null rx431_cstack, rx431_cstack_done1289
    unless rx431_cstack, rx431_cstack_done1289
    dec $I19
    set $P11, rx431_cstack[$I19]
  rx431_cstack_done1289:
    pop rx431_rep, rx431_bstack
    pop rx431_pos, rx431_bstack
    pop $I19, rx431_bstack
    lt rx431_pos, -1, rx431_done1284
    lt rx431_pos, 0, rx431_fail1286
    eq $I19, 0, rx431_fail1286
    nqp_islist $I20, rx431_cstack
    unless $I20, rx431_jump1287
    elements $I18, rx431_bstack
    le $I18, 0, rx431_cut1288
    dec $I18
    set $I18, rx431_bstack[$I18]
  rx431_cut1288:
    assign rx431_cstack, $I18
  rx431_jump1287:
    jump $I19
  rx431_done1284:
    rx431_cur."!cursor_fail"()
    .return (rx431_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_94_1346968539.359_caps" :subid("cuid_memo_124_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["pblock"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_94_1346968539.359_nfa" :subid("cuid_memo_125_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "lambda"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "fatarrow" :subid("cuid_95_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 876
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx434_tgt
    .local int rx434_pos
    .local int rx434_off
    .local int rx434_eos
    .local int rx434_rep
    .local pmc rx434_cur
    .local pmc rx434_curclass
    .local pmc rx434_bstack
    .local pmc rx434_cstack
    (rx434_cur, rx434_tgt, rx434_pos, rx434_curclass, rx434_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx434_cur
    length rx434_eos, rx434_tgt
    eq $I19, 1, rx434_restart1296
    gt rx434_pos, rx434_eos, rx434_fail1297
    repr_get_attr_int $I11, self, rx434_curclass, "$!from"
    ne $I11, -1, rxscan435_done1303
    goto rxscan435_scan1302
  rxscan435_loop1301:
    inc rx434_pos
    gt rx434_pos, rx434_eos, rx434_fail1297
    repr_bind_attr_int rx434_cur, rx434_curclass, "$!from", rx434_pos
  rxscan435_scan1302:
    nqp_rxmark rx434_bstack, rxscan435_loop1301, rx434_pos, 0
  rxscan435_done1303:
    repr_bind_attr_int rx434_cur, rx434_curclass, "$!pos", rx434_pos
    $P11 = rx434_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx434_curclass, "$!pos"
    lt $I11, 0, rx434_fail1297
    nqp_rxmark rx434_bstack, rxsubrule436_pass1304, -1, 0
  rxsubrule436_pass1304:
    rx434_cstack = rx434_cur."!cursor_capture"($P11, "key")
    repr_get_attr_int rx434_pos, $P11, rx434_curclass, "$!pos"
    nqp_rxmark rx434_bstack, rxquantr437_done1306, rx434_pos, 0
  rxquantr437_loop1305:
    ge rx434_pos, rx434_eos, rx434_fail1297
    substr $S11, rx434_tgt, rx434_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx434_fail1297
    inc rx434_pos
    nqp_rxpeek $I19, rx434_bstack, rxquantr437_done1306
    inc $I19
    inc $I19
    set rx434_rep, rx434_bstack[$I19]
    nqp_rxcommit rx434_bstack, rxquantr437_done1306
    inc rx434_rep
    nqp_rxmark rx434_bstack, rxquantr437_done1306, rx434_pos, rx434_rep
    goto rxquantr437_loop1305
  rxquantr437_done1306:
    add $I11, rx434_pos, 2
    gt $I11, rx434_eos, rx434_fail1297
    substr $S10, rx434_tgt, rx434_pos, 2
    ne $S10, ucs4:"=>", rx434_fail1297
    add rx434_pos, 2
    repr_bind_attr_int rx434_cur, rx434_curclass, "$!pos", rx434_pos
    $P11 = rx434_cur."ws"()
    repr_get_attr_int $I11, $P11, rx434_curclass, "$!pos"
    lt $I11, 0, rx434_fail1297
    repr_get_attr_int rx434_pos, $P11, rx434_curclass, "$!pos"
    repr_bind_attr_int rx434_cur, rx434_curclass, "$!pos", rx434_pos
    $P11 = rx434_cur."EXPR"("i=")
    repr_get_attr_int $I11, $P11, rx434_curclass, "$!pos"
    lt $I11, 0, rx434_fail1297
    nqp_rxmark rx434_bstack, rxsubrule439_pass1308, -1, 0
  rxsubrule439_pass1308:
    rx434_cstack = rx434_cur."!cursor_capture"($P11, "val")
    repr_get_attr_int rx434_pos, $P11, rx434_curclass, "$!pos"
    rx434_cur."!cursor_pass"(rx434_pos, "fatarrow", 'backtrack'=>1)
    .return (rx434_cur)
  rx434_restart1296:
    repr_get_attr_obj rx434_cstack, rx434_cur, rx434_curclass, "$!cstack"
  rx434_fail1297:
    unless rx434_bstack, rx434_done1295
    pop $I19, rx434_bstack
    if_null rx434_cstack, rx434_cstack_done1300
    unless rx434_cstack, rx434_cstack_done1300
    dec $I19
    set $P11, rx434_cstack[$I19]
  rx434_cstack_done1300:
    pop rx434_rep, rx434_bstack
    pop rx434_pos, rx434_bstack
    pop $I19, rx434_bstack
    lt rx434_pos, -1, rx434_done1295
    lt rx434_pos, 0, rx434_fail1297
    eq $I19, 0, rx434_fail1297
    nqp_islist $I20, rx434_cstack
    unless $I20, rx434_jump1298
    elements $I18, rx434_bstack
    le $I18, 0, rx434_cut1299
    dec $I18
    set $I18, rx434_bstack[$I18]
  rx434_cut1299:
    assign rx434_cstack, $I18
  rx434_jump1298:
    jump $I19
  rx434_done1295:
    rx434_cur."!cursor_fail"()
    .return (rx434_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_95_1346968539.359_caps" :subid("cuid_memo_126_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["key"], $P5002
    box $P5003, 0
    set $P5001["val"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_95_1346968539.359_nfa" :subid("cuid_memo_127_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "identifier"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 6
    push $P5007, $P5008
    box $P5009, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5007, $P5009
    box $P5010, 2
    push $P5007, $P5010
    box $P5011, 1
    push $P5007, $P5011
    box $P5012, 0
    push $P5007, $P5012
    box $P5013, 3
    push $P5007, $P5013
    push $P5001, $P5007
    new $P5014, 'ResizablePMCArray'
    box $P5015, 2
    push $P5014, $P5015
    box $P5016, 61
    push $P5014, $P5016
    box $P5017, 4
    push $P5014, $P5017
    push $P5001, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 2
    push $P5018, $P5019
    box $P5020, 62
    push $P5018, $P5020
    box $P5021, 5
    push $P5018, $P5021
    push $P5001, $P5018
    new $P5022, 'ResizablePMCArray'
    box $P5023, 8
    push $P5022, $P5023
    box $P5024, "ws"
    push $P5022, $P5024
    box $P5025, 6
    push $P5022, $P5025
    push $P5001, $P5022
    new $P5026, 'ResizablePMCArray'
    box $P5027, 8
    push $P5026, $P5027
    box $P5028, "EXPR"
    push $P5026, $P5028
    box $P5029, 0
    push $P5026, $P5029
    push $P5001, $P5026
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "colonpair" :subid("cuid_96_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 880
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx440_tgt
    .local int rx440_pos
    .local int rx440_off
    .local int rx440_eos
    .local int rx440_rep
    .local pmc rx440_cur
    .local pmc rx440_curclass
    .local pmc rx440_bstack
    .local pmc rx440_cstack
    (rx440_cur, rx440_tgt, rx440_pos, rx440_curclass, rx440_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx440_cur
    length rx440_eos, rx440_tgt
    eq $I19, 1, rx440_restart1311
    gt rx440_pos, rx440_eos, rx440_fail1312
    repr_get_attr_int $I11, self, rx440_curclass, "$!from"
    ne $I11, -1, rxscan441_done1318
    goto rxscan441_scan1317
  rxscan441_loop1316:
    inc rx440_pos
    gt rx440_pos, rx440_eos, rx440_fail1312
    repr_bind_attr_int rx440_cur, rx440_curclass, "$!from", rx440_pos
  rxscan441_scan1317:
    nqp_rxmark rx440_bstack, rxscan441_loop1316, rx440_pos, 0
  rxscan441_done1318:
    add $I11, rx440_pos, 1
    gt $I11, rx440_eos, rx440_fail1312
    substr $S10, rx440_tgt, rx440_pos, 1
    ne $S10, ucs4:":", rx440_fail1312
    add rx440_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt442_01320
    nqp_push_label $P11, alt442_11324
    nqp_push_label $P11, alt442_21330
    nqp_push_label $P11, alt442_31332
    nqp_rxmark rx440_bstack, alt442_end1319, -1, 0
    rx440_cur."!alt"(rx440_pos, "alt_nfa__19_1346968541.177", $P11)
    goto rx440_fail1312
  alt442_01320:
    nqp_rxmark rx440_bstack, rxcap443_fail1322, rx440_pos, 0
    add $I11, rx440_pos, 1
    gt $I11, rx440_eos, rx440_fail1312
    substr $S10, rx440_tgt, rx440_pos, 1
    ne $S10, ucs4:"!", rx440_fail1312
    add rx440_pos, 1
    nqp_rxpeek $I19, rx440_bstack, rxcap443_fail1322
    inc $I19
    set $I11, rx440_bstack[$I19]
    $P11 = rx440_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx440_pos)
    rx440_cstack = rx440_cur."!cursor_capture"($P11, "not")
    goto rxcap443_done1321
  rxcap443_fail1322:
    goto rx440_fail1312
  rxcap443_done1321:
    repr_bind_attr_int rx440_cur, rx440_curclass, "$!pos", rx440_pos
    $P11 = rx440_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx440_curclass, "$!pos"
    lt $I11, 0, rx440_fail1312
    nqp_rxmark rx440_bstack, rxsubrule444_pass1323, -1, 0
  rxsubrule444_pass1323:
    rx440_cstack = rx440_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx440_pos, $P11, rx440_curclass, "$!pos"
    goto alt442_end1319
  alt442_11324:
    repr_bind_attr_int rx440_cur, rx440_curclass, "$!pos", rx440_pos
    $P11 = rx440_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx440_curclass, "$!pos"
    lt $I11, 0, rx440_fail1312
    nqp_rxmark rx440_bstack, rxsubrule445_pass1325, -1, 0
  rxsubrule445_pass1325:
    rx440_cstack = rx440_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx440_pos, $P11, rx440_curclass, "$!pos"
    nqp_rxmark rx440_bstack, rxquantr446_done1327, rx440_pos, 0
  rxquantr446_loop1326:
    repr_bind_attr_int rx440_cur, rx440_curclass, "$!pos", rx440_pos
    $P11 = rx440_cur."circumfix"()
    repr_get_attr_int $I11, $P11, rx440_curclass, "$!pos"
    lt $I11, 0, rx440_fail1312
    goto rxsubrule447_pass1328
  rxsubrule447_back1329:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx440_curclass, "$!pos"
    lt $I11, 0, rx440_fail1312
  rxsubrule447_pass1328:
    rx440_cstack = rx440_cur."!cursor_capture"($P11, "circumfix")
    set_addr $I11, rxsubrule447_back1329
    push rx440_bstack, $I11
    push rx440_bstack, 0
    push rx440_bstack, rx440_pos
    elements $I11, rx440_cstack
    push rx440_bstack, $I11
    repr_get_attr_int rx440_pos, $P11, rx440_curclass, "$!pos"
    nqp_rxpeek $I19, rx440_bstack, rxquantr446_done1327
    inc $I19
    inc $I19
    set rx440_rep, rx440_bstack[$I19]
    nqp_rxcommit rx440_bstack, rxquantr446_done1327
    inc rx440_rep
  rxquantr446_done1327:
    goto alt442_end1319
  alt442_21330:
    repr_bind_attr_int rx440_cur, rx440_curclass, "$!pos", rx440_pos
    $P11 = rx440_cur."circumfix"()
    repr_get_attr_int $I11, $P11, rx440_curclass, "$!pos"
    lt $I11, 0, rx440_fail1312
    nqp_rxmark rx440_bstack, rxsubrule448_pass1331, -1, 0
  rxsubrule448_pass1331:
    rx440_cstack = rx440_cur."!cursor_capture"($P11, "circumfix")
    repr_get_attr_int rx440_pos, $P11, rx440_curclass, "$!pos"
    goto alt442_end1319
  alt442_31332:
    repr_bind_attr_int rx440_cur, rx440_curclass, "$!pos", rx440_pos
    $P11 = rx440_cur."variable"()
    repr_get_attr_int $I11, $P11, rx440_curclass, "$!pos"
    lt $I11, 0, rx440_fail1312
    nqp_rxmark rx440_bstack, rxsubrule449_pass1333, -1, 0
  rxsubrule449_pass1333:
    rx440_cstack = rx440_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx440_pos, $P11, rx440_curclass, "$!pos"
    goto alt442_end1319
  alt442_end1319:
    nqp_rxcommit rx440_bstack, alt442_end1319
    rx440_cur."!cursor_pass"(rx440_pos, "colonpair", 'backtrack'=>1)
    .return (rx440_cur)
  rx440_restart1311:
    repr_get_attr_obj rx440_cstack, rx440_cur, rx440_curclass, "$!cstack"
  rx440_fail1312:
    unless rx440_bstack, rx440_done1310
    pop $I19, rx440_bstack
    if_null rx440_cstack, rx440_cstack_done1315
    unless rx440_cstack, rx440_cstack_done1315
    dec $I19
    set $P11, rx440_cstack[$I19]
  rx440_cstack_done1315:
    pop rx440_rep, rx440_bstack
    pop rx440_pos, rx440_bstack
    pop $I19, rx440_bstack
    lt rx440_pos, -1, rx440_done1310
    lt rx440_pos, 0, rx440_fail1312
    eq $I19, 0, rx440_fail1312
    nqp_islist $I20, rx440_cstack
    unless $I20, rx440_jump1313
    elements $I18, rx440_bstack
    le $I18, 0, rx440_cut1314
    dec $I18
    set $I18, rx440_bstack[$I18]
  rx440_cut1314:
    assign rx440_cstack, $I18
  rx440_jump1313:
    jump $I19
  rx440_done1310:
    rx440_cur."!cursor_fail"()
    .return (rx440_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_96_1346968539.359_caps" :subid("cuid_memo_128_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["not"], $P5002
    box $P5003, 0
    set $P5001["identifier"], $P5003
    box $P5004, 2
    set $P5001["circumfix"], $P5004
    box $P5005, 0
    set $P5001["variable"], $P5005
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_96_1346968539.359_nfa" :subid("cuid_memo_129_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 58
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 33
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    box $P5011, 8
    push $P5007, $P5011
    box $P5012, "identifier"
    push $P5007, $P5012
    box $P5013, 4
    push $P5007, $P5013
    box $P5014, 8
    push $P5007, $P5014
    box $P5015, "circumfix"
    push $P5007, $P5015
    box $P5016, 0
    push $P5007, $P5016
    box $P5017, 8
    push $P5007, $P5017
    box $P5018, "variable"
    push $P5007, $P5018
    box $P5019, 0
    push $P5007, $P5019
    push $P5001, $P5007
    new $P5020, 'ResizablePMCArray'
    box $P5021, 8
    push $P5020, $P5021
    box $P5022, "identifier"
    push $P5020, $P5022
    box $P5023, 0
    push $P5020, $P5023
    push $P5001, $P5020
    new $P5024, 'ResizablePMCArray'
    box $P5025, 8
    push $P5024, $P5025
    box $P5026, "circumfix"
    push $P5024, $P5026
    box $P5027, 0
    push $P5024, $P5027
    box $P5028, 1
    push $P5024, $P5028
    box $P5029, 0
    push $P5024, $P5029
    box $P5030, 0
    push $P5024, $P5030
    push $P5001, $P5024
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_96_1346968539.359_alt_nfa__19_1346968541.177" :subid("cuid_memo_130_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 33
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 8
    push $P5008, $P5009
    box $P5010, "identifier"
    push $P5008, $P5010
    box $P5011, 0
    push $P5008, $P5011
    push $P5002, $P5008
    push $P5001, $P5002
    new $P5012, 'ResizablePMCArray'
    new $P5013, 'ResizablePMCArray'
    push $P5012, $P5013
    new $P5014, 'ResizablePMCArray'
    box $P5015, 8
    push $P5014, $P5015
    box $P5016, "identifier"
    push $P5014, $P5016
    box $P5017, 2
    push $P5014, $P5017
    push $P5012, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 8
    push $P5018, $P5019
    box $P5020, "circumfix"
    push $P5018, $P5020
    box $P5021, 0
    push $P5018, $P5021
    box $P5022, 1
    push $P5018, $P5022
    box $P5023, 0
    push $P5018, $P5023
    box $P5024, 0
    push $P5018, $P5024
    push $P5012, $P5018
    push $P5001, $P5012
    new $P5025, 'ResizablePMCArray'
    new $P5026, 'ResizablePMCArray'
    push $P5025, $P5026
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "circumfix"
    push $P5027, $P5029
    box $P5030, 0
    push $P5027, $P5030
    push $P5025, $P5027
    push $P5001, $P5025
    new $P5031, 'ResizablePMCArray'
    new $P5032, 'ResizablePMCArray'
    push $P5031, $P5032
    new $P5033, 'ResizablePMCArray'
    box $P5034, 8
    push $P5033, $P5034
    box $P5035, "variable"
    push $P5033, $P5035
    box $P5036, 0
    push $P5033, $P5036
    push $P5031, $P5033
    push $P5001, $P5031
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "variable" :subid("cuid_97_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 890
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx450_tgt
    .local int rx450_pos
    .local int rx450_off
    .local int rx450_eos
    .local int rx450_rep
    .local pmc rx450_cur
    .local pmc rx450_curclass
    .local pmc rx450_bstack
    .local pmc rx450_cstack
    (rx450_cur, rx450_tgt, rx450_pos, rx450_curclass, rx450_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx450_cur
    length rx450_eos, rx450_tgt
    eq $I19, 1, rx450_restart1336
    gt rx450_pos, rx450_eos, rx450_fail1337
    repr_get_attr_int $I11, self, rx450_curclass, "$!from"
    ne $I11, -1, rxscan451_done1343
    goto rxscan451_scan1342
  rxscan451_loop1341:
    inc rx450_pos
    gt rx450_pos, rx450_eos, rx450_fail1337
    repr_bind_attr_int rx450_cur, rx450_curclass, "$!from", rx450_pos
  rxscan451_scan1342:
    nqp_rxmark rx450_bstack, rxscan451_loop1341, rx450_pos, 0
  rxscan451_done1343:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt452_01345
    nqp_push_label $P11, alt452_11352
    nqp_push_label $P11, alt452_21355
    nqp_rxmark rx450_bstack, alt452_end1344, -1, 0
    rx450_cur."!alt"(rx450_pos, "alt_nfa__20_1346968541.193", $P11)
    goto rx450_fail1337
  alt452_01345:
    repr_bind_attr_int rx450_cur, rx450_curclass, "$!pos", rx450_pos
    $P11 = rx450_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx450_curclass, "$!pos"
    lt $I11, 0, rx450_fail1337
    nqp_rxmark rx450_bstack, rxsubrule453_pass1346, -1, 0
  rxsubrule453_pass1346:
    rx450_cstack = rx450_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx450_pos, $P11, rx450_curclass, "$!pos"
    nqp_rxmark rx450_bstack, rxquantr454_done1348, rx450_pos, 0
  rxquantr454_loop1347:
    repr_bind_attr_int rx450_cur, rx450_curclass, "$!pos", rx450_pos
    $P11 = rx450_cur."twigil"()
    repr_get_attr_int $I11, $P11, rx450_curclass, "$!pos"
    lt $I11, 0, rx450_fail1337
    goto rxsubrule455_pass1349
  rxsubrule455_back1350:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx450_curclass, "$!pos"
    lt $I11, 0, rx450_fail1337
  rxsubrule455_pass1349:
    rx450_cstack = rx450_cur."!cursor_capture"($P11, "twigil")
    set_addr $I11, rxsubrule455_back1350
    push rx450_bstack, $I11
    push rx450_bstack, 0
    push rx450_bstack, rx450_pos
    elements $I11, rx450_cstack
    push rx450_bstack, $I11
    repr_get_attr_int rx450_pos, $P11, rx450_curclass, "$!pos"
    nqp_rxpeek $I19, rx450_bstack, rxquantr454_done1348
    inc $I19
    inc $I19
    set rx450_rep, rx450_bstack[$I19]
    nqp_rxcommit rx450_bstack, rxquantr454_done1348
    inc rx450_rep
  rxquantr454_done1348:
    repr_bind_attr_int rx450_cur, rx450_curclass, "$!pos", rx450_pos
    $P11 = rx450_cur."name"()
    repr_get_attr_int $I11, $P11, rx450_curclass, "$!pos"
    lt $I11, 0, rx450_fail1337
    nqp_rxmark rx450_bstack, rxsubrule456_pass1351, -1, 0
  rxsubrule456_pass1351:
    rx450_cstack = rx450_cur."!cursor_capture"($P11, "desigilname")
    repr_get_attr_int rx450_pos, $P11, rx450_curclass, "$!pos"
    goto alt452_end1344
  alt452_11352:
    repr_bind_attr_int rx450_cur, rx450_curclass, "$!pos", rx450_pos
    $P11 = rx450_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx450_curclass, "$!pos"
    lt $I11, 0, rx450_fail1337
    nqp_rxmark rx450_bstack, rxsubrule457_pass1353, -1, 0
  rxsubrule457_pass1353:
    rx450_cstack = rx450_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx450_pos, $P11, rx450_curclass, "$!pos"
    ge rx450_pos, rx450_eos, rx450_fail1337
    substr $S11, rx450_tgt, rx450_pos, 1
    index $I11, ucs4:"<[", $S11
    lt $I11, 0, rx450_fail1337
    repr_bind_attr_int rx450_cur, rx450_curclass, "$!pos", rx450_pos
    $P11 = rx450_cur."postcircumfix"()
    repr_get_attr_int $I11, $P11, rx450_curclass, "$!pos"
    lt $I11, 0, rx450_fail1337
    nqp_rxmark rx450_bstack, rxsubrule458_pass1354, -1, 0
  rxsubrule458_pass1354:
    rx450_cstack = rx450_cur."!cursor_capture"($P11, "postcircumfix")
    repr_get_attr_int rx450_pos, $P11, rx450_curclass, "$!pos"
    goto alt452_end1344
  alt452_21355:
    nqp_rxmark rx450_bstack, rxcap459_fail1357, rx450_pos, 0
    add $I11, rx450_pos, 1
    gt $I11, rx450_eos, rx450_fail1337
    substr $S10, rx450_tgt, rx450_pos, 1
    ne $S10, ucs4:"$", rx450_fail1337
    add rx450_pos, 1
    nqp_rxpeek $I19, rx450_bstack, rxcap459_fail1357
    inc $I19
    set $I11, rx450_bstack[$I19]
    $P11 = rx450_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx450_pos)
    rx450_cstack = rx450_cur."!cursor_capture"($P11, "sigil")
    goto rxcap459_done1356
  rxcap459_fail1357:
    goto rx450_fail1337
  rxcap459_done1356:
    nqp_rxmark rx450_bstack, rxcap460_fail1359, rx450_pos, 0
    ge rx450_pos, rx450_eos, rx450_fail1337
    substr $S11, rx450_tgt, rx450_pos, 1
    index $I11, ucs4:"/_!", $S11
    lt $I11, 0, rx450_fail1337
    inc rx450_pos
    nqp_rxpeek $I19, rx450_bstack, rxcap460_fail1359
    inc $I19
    set $I11, rx450_bstack[$I19]
    $P11 = rx450_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx450_pos)
    rx450_cstack = rx450_cur."!cursor_capture"($P11, "desigilname")
    goto rxcap460_done1358
  rxcap460_fail1359:
    goto rx450_fail1337
  rxcap460_done1358:
    goto alt452_end1344
  alt452_end1344:
    rx450_cur."!cursor_pass"(rx450_pos, "variable", 'backtrack'=>1)
    .return (rx450_cur)
  rx450_restart1336:
    repr_get_attr_obj rx450_cstack, rx450_cur, rx450_curclass, "$!cstack"
  rx450_fail1337:
    unless rx450_bstack, rx450_done1335
    pop $I19, rx450_bstack
    if_null rx450_cstack, rx450_cstack_done1340
    unless rx450_cstack, rx450_cstack_done1340
    dec $I19
    set $P11, rx450_cstack[$I19]
  rx450_cstack_done1340:
    pop rx450_rep, rx450_bstack
    pop rx450_pos, rx450_bstack
    pop $I19, rx450_bstack
    lt rx450_pos, -1, rx450_done1335
    lt rx450_pos, 0, rx450_fail1337
    eq $I19, 0, rx450_fail1337
    nqp_islist $I20, rx450_cstack
    unless $I20, rx450_jump1338
    elements $I18, rx450_bstack
    le $I18, 0, rx450_cut1339
    dec $I18
    set $I18, rx450_bstack[$I18]
  rx450_cut1339:
    assign rx450_cstack, $I18
  rx450_jump1338:
    jump $I19
  rx450_done1335:
    rx450_cur."!cursor_fail"()
    .return (rx450_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_97_1346968539.359_caps" :subid("cuid_memo_131_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sigil"], $P5002
    box $P5003, 2
    set $P5001["twigil"], $P5003
    box $P5004, 0
    set $P5001["desigilname"], $P5004
    box $P5005, 0
    set $P5001["postcircumfix"], $P5005
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_97_1346968539.359_nfa" :subid("cuid_memo_132_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "sigil"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    box $P5007, 8
    push $P5003, $P5007
    box $P5008, "sigil"
    push $P5003, $P5008
    box $P5009, 4
    push $P5003, $P5009
    box $P5010, 2
    push $P5003, $P5010
    box $P5011, 36
    push $P5003, $P5011
    box $P5012, 6
    push $P5003, $P5012
    push $P5001, $P5003
    new $P5013, 'ResizablePMCArray'
    box $P5014, 8
    push $P5013, $P5014
    box $P5015, "twigil"
    push $P5013, $P5015
    box $P5016, 3
    push $P5013, $P5016
    box $P5017, 1
    push $P5013, $P5017
    box $P5018, 0
    push $P5013, $P5018
    box $P5019, 3
    push $P5013, $P5019
    push $P5001, $P5013
    new $P5020, 'ResizablePMCArray'
    box $P5021, 8
    push $P5020, $P5021
    box $P5022, "name"
    push $P5020, $P5022
    box $P5023, 0
    push $P5020, $P5023
    push $P5001, $P5020
    new $P5024, 'ResizablePMCArray'
    box $P5025, 6
    push $P5024, $P5025
    box $P5026, "<["
    push $P5024, $P5026
    box $P5027, 5
    push $P5024, $P5027
    push $P5001, $P5024
    new $P5028, 'ResizablePMCArray'
    box $P5029, 0
    push $P5028, $P5029
    box $P5030, 0
    push $P5028, $P5030
    box $P5031, 0
    push $P5028, $P5031
    push $P5001, $P5028
    new $P5032, 'ResizablePMCArray'
    box $P5033, 6
    push $P5032, $P5033
    box $P5034, "/_!"
    push $P5032, $P5034
    box $P5035, 0
    push $P5032, $P5035
    push $P5001, $P5032
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_97_1346968539.359_alt_nfa__20_1346968541.193" :subid("cuid_memo_133_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 8
    push $P5004, $P5005
    box $P5006, "sigil"
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 8
    push $P5008, $P5009
    box $P5010, "twigil"
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    box $P5012, 1
    push $P5008, $P5012
    box $P5013, 0
    push $P5008, $P5013
    box $P5014, 3
    push $P5008, $P5014
    push $P5002, $P5008
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "name"
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5002, $P5015
    push $P5001, $P5002
    new $P5019, 'ResizablePMCArray'
    new $P5020, 'ResizablePMCArray'
    push $P5019, $P5020
    new $P5021, 'ResizablePMCArray'
    box $P5022, 8
    push $P5021, $P5022
    box $P5023, "sigil"
    push $P5021, $P5023
    box $P5024, 2
    push $P5021, $P5024
    push $P5019, $P5021
    new $P5025, 'ResizablePMCArray'
    box $P5026, 6
    push $P5025, $P5026
    box $P5027, "<["
    push $P5025, $P5027
    box $P5028, 3
    push $P5025, $P5028
    push $P5019, $P5025
    new $P5029, 'ResizablePMCArray'
    box $P5030, 0
    push $P5029, $P5030
    box $P5031, 0
    push $P5029, $P5031
    box $P5032, 0
    push $P5029, $P5032
    push $P5019, $P5029
    push $P5001, $P5019
    new $P5033, 'ResizablePMCArray'
    new $P5034, 'ResizablePMCArray'
    push $P5033, $P5034
    new $P5035, 'ResizablePMCArray'
    box $P5036, 2
    push $P5035, $P5036
    box $P5037, 36
    push $P5035, $P5037
    box $P5038, 2
    push $P5035, $P5038
    push $P5033, $P5035
    new $P5039, 'ResizablePMCArray'
    box $P5040, 6
    push $P5039, $P5040
    box $P5041, "/_!"
    push $P5039, $P5041
    box $P5042, 0
    push $P5039, $P5042
    push $P5033, $P5039
    push $P5001, $P5033
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "sigil" :subid("cuid_98_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 896
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx461_tgt
    .local int rx461_pos
    .local int rx461_off
    .local int rx461_eos
    .local int rx461_rep
    .local pmc rx461_cur
    .local pmc rx461_curclass
    .local pmc rx461_bstack
    .local pmc rx461_cstack
    (rx461_cur, rx461_tgt, rx461_pos, rx461_curclass, rx461_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx461_cur
    length rx461_eos, rx461_tgt
    eq $I19, 1, rx461_restart1362
    gt rx461_pos, rx461_eos, rx461_fail1363
    repr_get_attr_int $I11, self, rx461_curclass, "$!from"
    ne $I11, -1, rxscan462_done1369
    goto rxscan462_scan1368
  rxscan462_loop1367:
    inc rx461_pos
    gt rx461_pos, rx461_eos, rx461_fail1363
    repr_bind_attr_int rx461_cur, rx461_curclass, "$!from", rx461_pos
  rxscan462_scan1368:
    nqp_rxmark rx461_bstack, rxscan462_loop1367, rx461_pos, 0
  rxscan462_done1369:
    ge rx461_pos, rx461_eos, rx461_fail1363
    substr $S11, rx461_tgt, rx461_pos, 1
    index $I11, ucs4:"$@%&", $S11
    lt $I11, 0, rx461_fail1363
    inc rx461_pos
    rx461_cur."!cursor_pass"(rx461_pos, "sigil", 'backtrack'=>1)
    .return (rx461_cur)
  rx461_restart1362:
    repr_get_attr_obj rx461_cstack, rx461_cur, rx461_curclass, "$!cstack"
  rx461_fail1363:
    unless rx461_bstack, rx461_done1361
    pop $I19, rx461_bstack
    if_null rx461_cstack, rx461_cstack_done1366
    unless rx461_cstack, rx461_cstack_done1366
    dec $I19
    set $P11, rx461_cstack[$I19]
  rx461_cstack_done1366:
    pop rx461_rep, rx461_bstack
    pop rx461_pos, rx461_bstack
    pop $I19, rx461_bstack
    lt rx461_pos, -1, rx461_done1361
    lt rx461_pos, 0, rx461_fail1363
    eq $I19, 0, rx461_fail1363
    nqp_islist $I20, rx461_cstack
    unless $I20, rx461_jump1364
    elements $I18, rx461_bstack
    le $I18, 0, rx461_cut1365
    dec $I18
    set $I18, rx461_bstack[$I18]
  rx461_cut1365:
    assign rx461_cstack, $I18
  rx461_jump1364:
    jump $I19
  rx461_done1361:
    rx461_cur."!cursor_fail"()
    .return (rx461_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_98_1346968539.359_caps" :subid("cuid_memo_134_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_98_1346968539.359_nfa" :subid("cuid_memo_135_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "$@%&"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "twigil" :subid("cuid_99_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 898
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx463_tgt
    .local int rx463_pos
    .local int rx463_off
    .local int rx463_eos
    .local int rx463_rep
    .local pmc rx463_cur
    .local pmc rx463_curclass
    .local pmc rx463_bstack
    .local pmc rx463_cstack
    (rx463_cur, rx463_tgt, rx463_pos, rx463_curclass, rx463_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx463_cur
    length rx463_eos, rx463_tgt
    eq $I19, 1, rx463_restart1372
    gt rx463_pos, rx463_eos, rx463_fail1373
    repr_get_attr_int $I11, self, rx463_curclass, "$!from"
    ne $I11, -1, rxscan464_done1379
    goto rxscan464_scan1378
  rxscan464_loop1377:
    inc rx463_pos
    gt rx463_pos, rx463_eos, rx463_fail1373
    repr_bind_attr_int rx463_cur, rx463_curclass, "$!from", rx463_pos
  rxscan464_scan1378:
    nqp_rxmark rx463_bstack, rxscan464_loop1377, rx463_pos, 0
  rxscan464_done1379:
    ge rx463_pos, rx463_eos, rx463_fail1373
    substr $S11, rx463_tgt, rx463_pos, 1
    index $I11, ucs4:"*!?", $S11
    lt $I11, 0, rx463_fail1373
    inc rx463_pos
    rx463_cur."!cursor_pass"(rx463_pos, "twigil", 'backtrack'=>1)
    .return (rx463_cur)
  rx463_restart1372:
    repr_get_attr_obj rx463_cstack, rx463_cur, rx463_curclass, "$!cstack"
  rx463_fail1373:
    unless rx463_bstack, rx463_done1371
    pop $I19, rx463_bstack
    if_null rx463_cstack, rx463_cstack_done1376
    unless rx463_cstack, rx463_cstack_done1376
    dec $I19
    set $P11, rx463_cstack[$I19]
  rx463_cstack_done1376:
    pop rx463_rep, rx463_bstack
    pop rx463_pos, rx463_bstack
    pop $I19, rx463_bstack
    lt rx463_pos, -1, rx463_done1371
    lt rx463_pos, 0, rx463_fail1373
    eq $I19, 0, rx463_fail1373
    nqp_islist $I20, rx463_cstack
    unless $I20, rx463_jump1374
    elements $I18, rx463_bstack
    le $I18, 0, rx463_cut1375
    dec $I18
    set $I18, rx463_bstack[$I18]
  rx463_cut1375:
    assign rx463_cstack, $I18
  rx463_jump1374:
    jump $I19
  rx463_done1371:
    rx463_cur."!cursor_fail"()
    .return (rx463_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_99_1346968539.359_caps" :subid("cuid_memo_136_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_99_1346968539.359_nfa" :subid("cuid_memo_137_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "*!?"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator" :subid("cuid_100_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 900
    .param pmc self 
    $P5001 = self."!protoregex"("package_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<module>" :subid("cuid_101_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 901
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx465_tgt
    .local int rx465_pos
    .local int rx465_off
    .local int rx465_eos
    .local int rx465_rep
    .local pmc rx465_cur
    .local pmc rx465_curclass
    .local pmc rx465_bstack
    .local pmc rx465_cstack
    (rx465_cur, rx465_tgt, rx465_pos, rx465_curclass, rx465_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx465_cur
    length rx465_eos, rx465_tgt
    eq $I19, 1, rx465_restart1382
    gt rx465_pos, rx465_eos, rx465_fail1383
    repr_get_attr_int $I11, self, rx465_curclass, "$!from"
    ne $I11, -1, rxscan466_done1389
    goto rxscan466_scan1388
  rxscan466_loop1387:
    inc rx465_pos
    gt rx465_pos, rx465_eos, rx465_fail1383
    repr_bind_attr_int rx465_cur, rx465_curclass, "$!from", rx465_pos
  rxscan466_scan1388:
    nqp_rxmark rx465_bstack, rxscan466_loop1387, rx465_pos, 0
  rxscan466_done1389:
    repr_bind_attr_int rx465_cur, rx465_curclass, "$!pos", rx465_pos
    store_lex unicode:"$\x{a2}", rx465_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1390
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1391
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5004, $P5007
  fallback1391:
    unless_null $P5004, vivi_4671392
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4671392:
    set $P5003, $P5004
  fallback1390:
    set $P101, $P5003
    repr_bind_attr_int rx465_cur, rx465_curclass, "$!pos", rx465_pos
    store_lex unicode:"$\x{a2}", rx465_cur
    box $P5009, "module"
    set $P102, $P5009
    nqp_rxmark rx465_bstack, rxcap468_fail1394, rx465_pos, 0
    add $I11, rx465_pos, 6
    gt $I11, rx465_eos, rx465_fail1383
    substr $S10, rx465_tgt, rx465_pos, 6
    ne $S10, ucs4:"module", rx465_fail1383
    add rx465_pos, 6
    nqp_rxpeek $I19, rx465_bstack, rxcap468_fail1394
    inc $I19
    set $I11, rx465_bstack[$I19]
    $P11 = rx465_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx465_pos)
    rx465_cstack = rx465_cur."!cursor_capture"($P11, "sym")
    goto rxcap468_done1393
  rxcap468_fail1394:
    goto rx465_fail1383
  rxcap468_done1393:
    repr_bind_attr_int rx465_cur, rx465_curclass, "$!pos", rx465_pos
    $P11 = rx465_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx465_curclass, "$!pos"
    lt $I11, 0, rx465_fail1383
    nqp_rxmark rx465_bstack, rxsubrule469_pass1395, -1, 0
  rxsubrule469_pass1395:
    rx465_cstack = rx465_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx465_pos, $P11, rx465_curclass, "$!pos"
    rx465_cur."!cursor_pass"(rx465_pos, "package_declarator:sym<module>", 'backtrack'=>1)
    .return (rx465_cur)
  rx465_restart1382:
    repr_get_attr_obj rx465_cstack, rx465_cur, rx465_curclass, "$!cstack"
  rx465_fail1383:
    unless rx465_bstack, rx465_done1381
    pop $I19, rx465_bstack
    if_null rx465_cstack, rx465_cstack_done1386
    unless rx465_cstack, rx465_cstack_done1386
    dec $I19
    set $P11, rx465_cstack[$I19]
  rx465_cstack_done1386:
    pop rx465_rep, rx465_bstack
    pop rx465_pos, rx465_bstack
    pop $I19, rx465_bstack
    lt rx465_pos, -1, rx465_done1381
    lt rx465_pos, 0, rx465_fail1383
    eq $I19, 0, rx465_fail1383
    nqp_islist $I20, rx465_cstack
    unless $I20, rx465_jump1384
    elements $I18, rx465_bstack
    le $I18, 0, rx465_cut1385
    dec $I18
    set $I18, rx465_bstack[$I18]
  rx465_cut1385:
    assign rx465_cstack, $I18
  rx465_jump1384:
    jump $I19
  rx465_done1381:
    rx465_cur."!cursor_fail"()
    .return (rx465_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_101_1346968539.359_caps" :subid("cuid_memo_138_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["package_def"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_101_1346968539.359_nfa" :subid("cuid_memo_139_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 109
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 111
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 100
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 117
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 2
    push $P5027, $P5028
    box $P5029, 108
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 2
    push $P5031, $P5032
    box $P5033, 101
    push $P5031, $P5033
    box $P5034, 9
    push $P5031, $P5034
    push $P5001, $P5031
    new $P5035, 'ResizablePMCArray'
    box $P5036, 8
    push $P5035, $P5036
    box $P5037, "package_def"
    push $P5035, $P5037
    box $P5038, 0
    push $P5035, $P5038
    push $P5001, $P5035
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<knowhow>" :subid("cuid_102_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 906
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx470_tgt
    .local int rx470_pos
    .local int rx470_off
    .local int rx470_eos
    .local int rx470_rep
    .local pmc rx470_cur
    .local pmc rx470_curclass
    .local pmc rx470_bstack
    .local pmc rx470_cstack
    (rx470_cur, rx470_tgt, rx470_pos, rx470_curclass, rx470_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx470_cur
    length rx470_eos, rx470_tgt
    eq $I19, 1, rx470_restart1398
    gt rx470_pos, rx470_eos, rx470_fail1399
    repr_get_attr_int $I11, self, rx470_curclass, "$!from"
    ne $I11, -1, rxscan471_done1405
    goto rxscan471_scan1404
  rxscan471_loop1403:
    inc rx470_pos
    gt rx470_pos, rx470_eos, rx470_fail1399
    repr_bind_attr_int rx470_cur, rx470_curclass, "$!from", rx470_pos
  rxscan471_scan1404:
    nqp_rxmark rx470_bstack, rxscan471_loop1403, rx470_pos, 0
  rxscan471_done1405:
    repr_bind_attr_int rx470_cur, rx470_curclass, "$!pos", rx470_pos
    store_lex unicode:"$\x{a2}", rx470_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1406
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1407
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5004, $P5007
  fallback1407:
    unless_null $P5004, vivi_4721408
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4721408:
    set $P5003, $P5004
  fallback1406:
    set $P101, $P5003
    repr_bind_attr_int rx470_cur, rx470_curclass, "$!pos", rx470_pos
    store_lex unicode:"$\x{a2}", rx470_cur
    box $P5009, "knowhow"
    set $P102, $P5009
    nqp_rxmark rx470_bstack, rxcap473_fail1410, rx470_pos, 0
    add $I11, rx470_pos, 7
    gt $I11, rx470_eos, rx470_fail1399
    substr $S10, rx470_tgt, rx470_pos, 7
    ne $S10, ucs4:"knowhow", rx470_fail1399
    add rx470_pos, 7
    nqp_rxpeek $I19, rx470_bstack, rxcap473_fail1410
    inc $I19
    set $I11, rx470_bstack[$I19]
    $P11 = rx470_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx470_pos)
    rx470_cstack = rx470_cur."!cursor_capture"($P11, "sym")
    goto rxcap473_done1409
  rxcap473_fail1410:
    goto rx470_fail1399
  rxcap473_done1409:
    repr_bind_attr_int rx470_cur, rx470_curclass, "$!pos", rx470_pos
    $P11 = rx470_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx470_curclass, "$!pos"
    lt $I11, 0, rx470_fail1399
    nqp_rxmark rx470_bstack, rxsubrule474_pass1411, -1, 0
  rxsubrule474_pass1411:
    rx470_cstack = rx470_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx470_pos, $P11, rx470_curclass, "$!pos"
    rx470_cur."!cursor_pass"(rx470_pos, "package_declarator:sym<knowhow>", 'backtrack'=>1)
    .return (rx470_cur)
  rx470_restart1398:
    repr_get_attr_obj rx470_cstack, rx470_cur, rx470_curclass, "$!cstack"
  rx470_fail1399:
    unless rx470_bstack, rx470_done1397
    pop $I19, rx470_bstack
    if_null rx470_cstack, rx470_cstack_done1402
    unless rx470_cstack, rx470_cstack_done1402
    dec $I19
    set $P11, rx470_cstack[$I19]
  rx470_cstack_done1402:
    pop rx470_rep, rx470_bstack
    pop rx470_pos, rx470_bstack
    pop $I19, rx470_bstack
    lt rx470_pos, -1, rx470_done1397
    lt rx470_pos, 0, rx470_fail1399
    eq $I19, 0, rx470_fail1399
    nqp_islist $I20, rx470_cstack
    unless $I20, rx470_jump1400
    elements $I18, rx470_bstack
    le $I18, 0, rx470_cut1401
    dec $I18
    set $I18, rx470_bstack[$I18]
  rx470_cut1401:
    assign rx470_cstack, $I18
  rx470_jump1400:
    jump $I19
  rx470_done1397:
    rx470_cur."!cursor_fail"()
    .return (rx470_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_102_1346968539.359_caps" :subid("cuid_memo_140_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["package_def"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_102_1346968539.359_nfa" :subid("cuid_memo_141_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 107
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 110
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 111
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 119
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 2
    push $P5027, $P5028
    box $P5029, 104
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 2
    push $P5031, $P5032
    box $P5033, 111
    push $P5031, $P5033
    box $P5034, 9
    push $P5031, $P5034
    push $P5001, $P5031
    new $P5035, 'ResizablePMCArray'
    box $P5036, 2
    push $P5035, $P5036
    box $P5037, 119
    push $P5035, $P5037
    box $P5038, 10
    push $P5035, $P5038
    push $P5001, $P5035
    new $P5039, 'ResizablePMCArray'
    box $P5040, 8
    push $P5039, $P5040
    box $P5041, "package_def"
    push $P5039, $P5041
    box $P5042, 0
    push $P5039, $P5042
    push $P5001, $P5039
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<class>" :subid("cuid_103_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 911
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx475_tgt
    .local int rx475_pos
    .local int rx475_off
    .local int rx475_eos
    .local int rx475_rep
    .local pmc rx475_cur
    .local pmc rx475_curclass
    .local pmc rx475_bstack
    .local pmc rx475_cstack
    (rx475_cur, rx475_tgt, rx475_pos, rx475_curclass, rx475_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx475_cur
    length rx475_eos, rx475_tgt
    eq $I19, 1, rx475_restart1414
    gt rx475_pos, rx475_eos, rx475_fail1415
    repr_get_attr_int $I11, self, rx475_curclass, "$!from"
    ne $I11, -1, rxscan476_done1421
    goto rxscan476_scan1420
  rxscan476_loop1419:
    inc rx475_pos
    gt rx475_pos, rx475_eos, rx475_fail1415
    repr_bind_attr_int rx475_cur, rx475_curclass, "$!from", rx475_pos
  rxscan476_scan1420:
    nqp_rxmark rx475_bstack, rxscan476_loop1419, rx475_pos, 0
  rxscan476_done1421:
    repr_bind_attr_int rx475_cur, rx475_curclass, "$!pos", rx475_pos
    store_lex unicode:"$\x{a2}", rx475_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1422
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1423
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5004, $P5007
  fallback1423:
    unless_null $P5004, vivi_4771424
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4771424:
    set $P5003, $P5004
  fallback1422:
    set $P101, $P5003
    repr_bind_attr_int rx475_cur, rx475_curclass, "$!pos", rx475_pos
    store_lex unicode:"$\x{a2}", rx475_cur
    box $P5009, "class"
    set $P102, $P5009
    nqp_rxmark rx475_bstack, rxcap478_fail1426, rx475_pos, 0
    add $I11, rx475_pos, 5
    gt $I11, rx475_eos, rx475_fail1415
    substr $S10, rx475_tgt, rx475_pos, 5
    ne $S10, ucs4:"class", rx475_fail1415
    add rx475_pos, 5
    nqp_rxpeek $I19, rx475_bstack, rxcap478_fail1426
    inc $I19
    set $I11, rx475_bstack[$I19]
    $P11 = rx475_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx475_pos)
    rx475_cstack = rx475_cur."!cursor_capture"($P11, "sym")
    goto rxcap478_done1425
  rxcap478_fail1426:
    goto rx475_fail1415
  rxcap478_done1425:
    repr_bind_attr_int rx475_cur, rx475_curclass, "$!pos", rx475_pos
    $P11 = rx475_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx475_curclass, "$!pos"
    lt $I11, 0, rx475_fail1415
    nqp_rxmark rx475_bstack, rxsubrule479_pass1427, -1, 0
  rxsubrule479_pass1427:
    rx475_cstack = rx475_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx475_pos, $P11, rx475_curclass, "$!pos"
    rx475_cur."!cursor_pass"(rx475_pos, "package_declarator:sym<class>", 'backtrack'=>1)
    .return (rx475_cur)
  rx475_restart1414:
    repr_get_attr_obj rx475_cstack, rx475_cur, rx475_curclass, "$!cstack"
  rx475_fail1415:
    unless rx475_bstack, rx475_done1413
    pop $I19, rx475_bstack
    if_null rx475_cstack, rx475_cstack_done1418
    unless rx475_cstack, rx475_cstack_done1418
    dec $I19
    set $P11, rx475_cstack[$I19]
  rx475_cstack_done1418:
    pop rx475_rep, rx475_bstack
    pop rx475_pos, rx475_bstack
    pop $I19, rx475_bstack
    lt rx475_pos, -1, rx475_done1413
    lt rx475_pos, 0, rx475_fail1415
    eq $I19, 0, rx475_fail1415
    nqp_islist $I20, rx475_cstack
    unless $I20, rx475_jump1416
    elements $I18, rx475_bstack
    le $I18, 0, rx475_cut1417
    dec $I18
    set $I18, rx475_bstack[$I18]
  rx475_cut1417:
    assign rx475_cstack, $I18
  rx475_jump1416:
    jump $I19
  rx475_done1413:
    rx475_cur."!cursor_fail"()
    .return (rx475_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_103_1346968539.359_caps" :subid("cuid_memo_142_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["package_def"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_103_1346968539.359_nfa" :subid("cuid_memo_143_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 99
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 108
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 97
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 115
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 2
    push $P5027, $P5028
    box $P5029, 115
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 8
    push $P5031, $P5032
    box $P5033, "package_def"
    push $P5031, $P5033
    box $P5034, 0
    push $P5031, $P5034
    push $P5001, $P5031
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<grammar>" :subid("cuid_104_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 916
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx480_tgt
    .local int rx480_pos
    .local int rx480_off
    .local int rx480_eos
    .local int rx480_rep
    .local pmc rx480_cur
    .local pmc rx480_curclass
    .local pmc rx480_bstack
    .local pmc rx480_cstack
    (rx480_cur, rx480_tgt, rx480_pos, rx480_curclass, rx480_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx480_cur
    length rx480_eos, rx480_tgt
    eq $I19, 1, rx480_restart1430
    gt rx480_pos, rx480_eos, rx480_fail1431
    repr_get_attr_int $I11, self, rx480_curclass, "$!from"
    ne $I11, -1, rxscan481_done1437
    goto rxscan481_scan1436
  rxscan481_loop1435:
    inc rx480_pos
    gt rx480_pos, rx480_eos, rx480_fail1431
    repr_bind_attr_int rx480_cur, rx480_curclass, "$!from", rx480_pos
  rxscan481_scan1436:
    nqp_rxmark rx480_bstack, rxscan481_loop1435, rx480_pos, 0
  rxscan481_done1437:
    repr_bind_attr_int rx480_cur, rx480_curclass, "$!pos", rx480_pos
    store_lex unicode:"$\x{a2}", rx480_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1438
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1439
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5004, $P5007
  fallback1439:
    unless_null $P5004, vivi_4821440
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4821440:
    set $P5003, $P5004
  fallback1438:
    set $P101, $P5003
    repr_bind_attr_int rx480_cur, rx480_curclass, "$!pos", rx480_pos
    store_lex unicode:"$\x{a2}", rx480_cur
    box $P5009, "grammar"
    set $P102, $P5009
    nqp_rxmark rx480_bstack, rxcap483_fail1442, rx480_pos, 0
    add $I11, rx480_pos, 7
    gt $I11, rx480_eos, rx480_fail1431
    substr $S10, rx480_tgt, rx480_pos, 7
    ne $S10, ucs4:"grammar", rx480_fail1431
    add rx480_pos, 7
    nqp_rxpeek $I19, rx480_bstack, rxcap483_fail1442
    inc $I19
    set $I11, rx480_bstack[$I19]
    $P11 = rx480_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx480_pos)
    rx480_cstack = rx480_cur."!cursor_capture"($P11, "sym")
    goto rxcap483_done1441
  rxcap483_fail1442:
    goto rx480_fail1431
  rxcap483_done1441:
    repr_bind_attr_int rx480_cur, rx480_curclass, "$!pos", rx480_pos
    $P11 = rx480_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx480_curclass, "$!pos"
    lt $I11, 0, rx480_fail1431
    nqp_rxmark rx480_bstack, rxsubrule484_pass1443, -1, 0
  rxsubrule484_pass1443:
    rx480_cstack = rx480_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx480_pos, $P11, rx480_curclass, "$!pos"
    rx480_cur."!cursor_pass"(rx480_pos, "package_declarator:sym<grammar>", 'backtrack'=>1)
    .return (rx480_cur)
  rx480_restart1430:
    repr_get_attr_obj rx480_cstack, rx480_cur, rx480_curclass, "$!cstack"
  rx480_fail1431:
    unless rx480_bstack, rx480_done1429
    pop $I19, rx480_bstack
    if_null rx480_cstack, rx480_cstack_done1434
    unless rx480_cstack, rx480_cstack_done1434
    dec $I19
    set $P11, rx480_cstack[$I19]
  rx480_cstack_done1434:
    pop rx480_rep, rx480_bstack
    pop rx480_pos, rx480_bstack
    pop $I19, rx480_bstack
    lt rx480_pos, -1, rx480_done1429
    lt rx480_pos, 0, rx480_fail1431
    eq $I19, 0, rx480_fail1431
    nqp_islist $I20, rx480_cstack
    unless $I20, rx480_jump1432
    elements $I18, rx480_bstack
    le $I18, 0, rx480_cut1433
    dec $I18
    set $I18, rx480_bstack[$I18]
  rx480_cut1433:
    assign rx480_cstack, $I18
  rx480_jump1432:
    jump $I19
  rx480_done1429:
    rx480_cur."!cursor_fail"()
    .return (rx480_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_104_1346968539.359_caps" :subid("cuid_memo_144_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["package_def"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_104_1346968539.359_nfa" :subid("cuid_memo_145_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 103
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 114
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 97
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 109
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 2
    push $P5027, $P5028
    box $P5029, 109
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 2
    push $P5031, $P5032
    box $P5033, 97
    push $P5031, $P5033
    box $P5034, 9
    push $P5031, $P5034
    push $P5001, $P5031
    new $P5035, 'ResizablePMCArray'
    box $P5036, 2
    push $P5035, $P5036
    box $P5037, 114
    push $P5035, $P5037
    box $P5038, 10
    push $P5035, $P5038
    push $P5001, $P5035
    new $P5039, 'ResizablePMCArray'
    box $P5040, 8
    push $P5039, $P5040
    box $P5041, "package_def"
    push $P5039, $P5041
    box $P5042, 0
    push $P5039, $P5042
    push $P5001, $P5039
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<role>" :subid("cuid_105_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 921
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx485_tgt
    .local int rx485_pos
    .local int rx485_off
    .local int rx485_eos
    .local int rx485_rep
    .local pmc rx485_cur
    .local pmc rx485_curclass
    .local pmc rx485_bstack
    .local pmc rx485_cstack
    (rx485_cur, rx485_tgt, rx485_pos, rx485_curclass, rx485_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx485_cur
    length rx485_eos, rx485_tgt
    eq $I19, 1, rx485_restart1446
    gt rx485_pos, rx485_eos, rx485_fail1447
    repr_get_attr_int $I11, self, rx485_curclass, "$!from"
    ne $I11, -1, rxscan486_done1453
    goto rxscan486_scan1452
  rxscan486_loop1451:
    inc rx485_pos
    gt rx485_pos, rx485_eos, rx485_fail1447
    repr_bind_attr_int rx485_cur, rx485_curclass, "$!from", rx485_pos
  rxscan486_scan1452:
    nqp_rxmark rx485_bstack, rxscan486_loop1451, rx485_pos, 0
  rxscan486_done1453:
    repr_bind_attr_int rx485_cur, rx485_curclass, "$!pos", rx485_pos
    store_lex unicode:"$\x{a2}", rx485_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1454
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1455
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5004, $P5007
  fallback1455:
    unless_null $P5004, vivi_4871456
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4871456:
    set $P5003, $P5004
  fallback1454:
    set $P101, $P5003
    repr_bind_attr_int rx485_cur, rx485_curclass, "$!pos", rx485_pos
    store_lex unicode:"$\x{a2}", rx485_cur
    box $P5009, "role"
    set $P102, $P5009
    nqp_rxmark rx485_bstack, rxcap488_fail1458, rx485_pos, 0
    add $I11, rx485_pos, 4
    gt $I11, rx485_eos, rx485_fail1447
    substr $S10, rx485_tgt, rx485_pos, 4
    ne $S10, ucs4:"role", rx485_fail1447
    add rx485_pos, 4
    nqp_rxpeek $I19, rx485_bstack, rxcap488_fail1458
    inc $I19
    set $I11, rx485_bstack[$I19]
    $P11 = rx485_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx485_pos)
    rx485_cstack = rx485_cur."!cursor_capture"($P11, "sym")
    goto rxcap488_done1457
  rxcap488_fail1458:
    goto rx485_fail1447
  rxcap488_done1457:
    repr_bind_attr_int rx485_cur, rx485_curclass, "$!pos", rx485_pos
    $P11 = rx485_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx485_curclass, "$!pos"
    lt $I11, 0, rx485_fail1447
    nqp_rxmark rx485_bstack, rxsubrule489_pass1459, -1, 0
  rxsubrule489_pass1459:
    rx485_cstack = rx485_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx485_pos, $P11, rx485_curclass, "$!pos"
    rx485_cur."!cursor_pass"(rx485_pos, "package_declarator:sym<role>", 'backtrack'=>1)
    .return (rx485_cur)
  rx485_restart1446:
    repr_get_attr_obj rx485_cstack, rx485_cur, rx485_curclass, "$!cstack"
  rx485_fail1447:
    unless rx485_bstack, rx485_done1445
    pop $I19, rx485_bstack
    if_null rx485_cstack, rx485_cstack_done1450
    unless rx485_cstack, rx485_cstack_done1450
    dec $I19
    set $P11, rx485_cstack[$I19]
  rx485_cstack_done1450:
    pop rx485_rep, rx485_bstack
    pop rx485_pos, rx485_bstack
    pop $I19, rx485_bstack
    lt rx485_pos, -1, rx485_done1445
    lt rx485_pos, 0, rx485_fail1447
    eq $I19, 0, rx485_fail1447
    nqp_islist $I20, rx485_cstack
    unless $I20, rx485_jump1448
    elements $I18, rx485_bstack
    le $I18, 0, rx485_cut1449
    dec $I18
    set $I18, rx485_bstack[$I18]
  rx485_cut1449:
    assign rx485_cstack, $I18
  rx485_jump1448:
    jump $I19
  rx485_done1445:
    rx485_cur."!cursor_fail"()
    .return (rx485_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_105_1346968539.359_caps" :subid("cuid_memo_146_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["package_def"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_105_1346968539.359_nfa" :subid("cuid_memo_147_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 114
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 111
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 108
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 101
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "package_def"
    push $P5027, $P5029
    box $P5030, 0
    push $P5027, $P5030
    push $P5001, $P5027
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<native>" :subid("cuid_106_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 926
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx490_tgt
    .local int rx490_pos
    .local int rx490_off
    .local int rx490_eos
    .local int rx490_rep
    .local pmc rx490_cur
    .local pmc rx490_curclass
    .local pmc rx490_bstack
    .local pmc rx490_cstack
    (rx490_cur, rx490_tgt, rx490_pos, rx490_curclass, rx490_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx490_cur
    length rx490_eos, rx490_tgt
    eq $I19, 1, rx490_restart1462
    gt rx490_pos, rx490_eos, rx490_fail1463
    repr_get_attr_int $I11, self, rx490_curclass, "$!from"
    ne $I11, -1, rxscan491_done1469
    goto rxscan491_scan1468
  rxscan491_loop1467:
    inc rx490_pos
    gt rx490_pos, rx490_eos, rx490_fail1463
    repr_bind_attr_int rx490_cur, rx490_curclass, "$!from", rx490_pos
  rxscan491_scan1468:
    nqp_rxmark rx490_bstack, rxscan491_loop1467, rx490_pos, 0
  rxscan491_done1469:
    repr_bind_attr_int rx490_cur, rx490_curclass, "$!pos", rx490_pos
    store_lex unicode:"$\x{a2}", rx490_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1470
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1471
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5004, $P5007
  fallback1471:
    unless_null $P5004, vivi_4921472
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4921472:
    set $P5003, $P5004
  fallback1470:
    set $P101, $P5003
    repr_bind_attr_int rx490_cur, rx490_curclass, "$!pos", rx490_pos
    store_lex unicode:"$\x{a2}", rx490_cur
    box $P5009, "native"
    set $P102, $P5009
    nqp_rxmark rx490_bstack, rxcap493_fail1474, rx490_pos, 0
    add $I11, rx490_pos, 6
    gt $I11, rx490_eos, rx490_fail1463
    substr $S10, rx490_tgt, rx490_pos, 6
    ne $S10, ucs4:"native", rx490_fail1463
    add rx490_pos, 6
    nqp_rxpeek $I19, rx490_bstack, rxcap493_fail1474
    inc $I19
    set $I11, rx490_bstack[$I19]
    $P11 = rx490_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx490_pos)
    rx490_cstack = rx490_cur."!cursor_capture"($P11, "sym")
    goto rxcap493_done1473
  rxcap493_fail1474:
    goto rx490_fail1463
  rxcap493_done1473:
    repr_bind_attr_int rx490_cur, rx490_curclass, "$!pos", rx490_pos
    $P11 = rx490_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx490_curclass, "$!pos"
    lt $I11, 0, rx490_fail1463
    nqp_rxmark rx490_bstack, rxsubrule494_pass1475, -1, 0
  rxsubrule494_pass1475:
    rx490_cstack = rx490_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx490_pos, $P11, rx490_curclass, "$!pos"
    rx490_cur."!cursor_pass"(rx490_pos, "package_declarator:sym<native>", 'backtrack'=>1)
    .return (rx490_cur)
  rx490_restart1462:
    repr_get_attr_obj rx490_cstack, rx490_cur, rx490_curclass, "$!cstack"
  rx490_fail1463:
    unless rx490_bstack, rx490_done1461
    pop $I19, rx490_bstack
    if_null rx490_cstack, rx490_cstack_done1466
    unless rx490_cstack, rx490_cstack_done1466
    dec $I19
    set $P11, rx490_cstack[$I19]
  rx490_cstack_done1466:
    pop rx490_rep, rx490_bstack
    pop rx490_pos, rx490_bstack
    pop $I19, rx490_bstack
    lt rx490_pos, -1, rx490_done1461
    lt rx490_pos, 0, rx490_fail1463
    eq $I19, 0, rx490_fail1463
    nqp_islist $I20, rx490_cstack
    unless $I20, rx490_jump1464
    elements $I18, rx490_bstack
    le $I18, 0, rx490_cut1465
    dec $I18
    set $I18, rx490_bstack[$I18]
  rx490_cut1465:
    assign rx490_cstack, $I18
  rx490_jump1464:
    jump $I19
  rx490_done1461:
    rx490_cur."!cursor_fail"()
    .return (rx490_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_106_1346968539.359_caps" :subid("cuid_memo_148_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["package_def"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_106_1346968539.359_nfa" :subid("cuid_memo_149_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 110
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 97
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 116
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 105
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 2
    push $P5027, $P5028
    box $P5029, 118
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 2
    push $P5031, $P5032
    box $P5033, 101
    push $P5031, $P5033
    box $P5034, 9
    push $P5031, $P5034
    push $P5001, $P5031
    new $P5035, 'ResizablePMCArray'
    box $P5036, 8
    push $P5035, $P5036
    box $P5037, "package_def"
    push $P5035, $P5037
    box $P5038, 0
    push $P5035, $P5038
    push $P5001, $P5035
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<stub>" :subid("cuid_107_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 931
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx495_tgt
    .local int rx495_pos
    .local int rx495_off
    .local int rx495_eos
    .local int rx495_rep
    .local pmc rx495_cur
    .local pmc rx495_curclass
    .local pmc rx495_bstack
    .local pmc rx495_cstack
    (rx495_cur, rx495_tgt, rx495_pos, rx495_curclass, rx495_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx495_cur
    length rx495_eos, rx495_tgt
    eq $I19, 1, rx495_restart1478
    gt rx495_pos, rx495_eos, rx495_fail1479
    repr_get_attr_int $I11, self, rx495_curclass, "$!from"
    ne $I11, -1, rxscan496_done1485
    goto rxscan496_scan1484
  rxscan496_loop1483:
    inc rx495_pos
    gt rx495_pos, rx495_eos, rx495_fail1479
    repr_bind_attr_int rx495_cur, rx495_curclass, "$!from", rx495_pos
  rxscan496_scan1484:
    nqp_rxmark rx495_bstack, rxscan496_loop1483, rx495_pos, 0
  rxscan496_done1485:
    repr_bind_attr_int rx495_cur, rx495_curclass, "$!pos", rx495_pos
    store_lex unicode:"$\x{a2}", rx495_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1486
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1487
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5004, $P5007
  fallback1487:
    unless_null $P5004, vivi_4971488
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4971488:
    set $P5003, $P5004
  fallback1486:
    set $P101, $P5003
    repr_bind_attr_int rx495_cur, rx495_curclass, "$!pos", rx495_pos
    store_lex unicode:"$\x{a2}", rx495_cur
    box $P5009, "stub"
    set $P102, $P5009
    nqp_rxmark rx495_bstack, rxcap498_fail1490, rx495_pos, 0
    add $I11, rx495_pos, 4
    gt $I11, rx495_eos, rx495_fail1479
    substr $S10, rx495_tgt, rx495_pos, 4
    ne $S10, ucs4:"stub", rx495_fail1479
    add rx495_pos, 4
    nqp_rxpeek $I19, rx495_bstack, rxcap498_fail1490
    inc $I19
    set $I11, rx495_bstack[$I19]
    $P11 = rx495_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx495_pos)
    rx495_cstack = rx495_cur."!cursor_capture"($P11, "sym")
    goto rxcap498_done1489
  rxcap498_fail1490:
    goto rx495_fail1479
  rxcap498_done1489:
    repr_bind_attr_int rx495_cur, rx495_curclass, "$!pos", rx495_pos
    $P11 = rx495_cur."ws"()
    repr_get_attr_int $I11, $P11, rx495_curclass, "$!pos"
    lt $I11, 0, rx495_fail1479
    repr_get_attr_int rx495_pos, $P11, rx495_curclass, "$!pos"
    repr_bind_attr_int rx495_cur, rx495_curclass, "$!pos", rx495_pos
    $P11 = rx495_cur."name"()
    repr_get_attr_int $I11, $P11, rx495_curclass, "$!pos"
    lt $I11, 0, rx495_fail1479
    nqp_rxmark rx495_bstack, rxsubrule500_pass1492, -1, 0
  rxsubrule500_pass1492:
    rx495_cstack = rx495_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx495_pos, $P11, rx495_curclass, "$!pos"
    repr_bind_attr_int rx495_cur, rx495_curclass, "$!pos", rx495_pos
    $P11 = rx495_cur."ws"()
    repr_get_attr_int $I11, $P11, rx495_curclass, "$!pos"
    lt $I11, 0, rx495_fail1479
    repr_get_attr_int rx495_pos, $P11, rx495_curclass, "$!pos"
    add $I11, rx495_pos, 9
    gt $I11, rx495_eos, rx495_fail1479
    substr $S10, rx495_tgt, rx495_pos, 9
    ne $S10, ucs4:"metaclass", rx495_fail1479
    add rx495_pos, 9
    repr_bind_attr_int rx495_cur, rx495_curclass, "$!pos", rx495_pos
    $P11 = rx495_cur."ws"()
    repr_get_attr_int $I11, $P11, rx495_curclass, "$!pos"
    lt $I11, 0, rx495_fail1479
    repr_get_attr_int rx495_pos, $P11, rx495_curclass, "$!pos"
    repr_bind_attr_int rx495_cur, rx495_curclass, "$!pos", rx495_pos
    $P11 = rx495_cur."name"()
    repr_get_attr_int $I11, $P11, rx495_curclass, "$!pos"
    lt $I11, 0, rx495_fail1479
    nqp_rxmark rx495_bstack, rxsubrule503_pass1495, -1, 0
  rxsubrule503_pass1495:
    rx495_cstack = rx495_cur."!cursor_capture"($P11, "metaclass")
    repr_get_attr_int rx495_pos, $P11, rx495_curclass, "$!pos"
    repr_bind_attr_int rx495_cur, rx495_curclass, "$!pos", rx495_pos
    $P11 = rx495_cur."ws"()
    repr_get_attr_int $I11, $P11, rx495_curclass, "$!pos"
    lt $I11, 0, rx495_fail1479
    repr_get_attr_int rx495_pos, $P11, rx495_curclass, "$!pos"
    add $I11, rx495_pos, 1
    gt $I11, rx495_eos, rx495_fail1479
    substr $S10, rx495_tgt, rx495_pos, 1
    ne $S10, ucs4:"{", rx495_fail1479
    add rx495_pos, 1
    repr_bind_attr_int rx495_cur, rx495_curclass, "$!pos", rx495_pos
    $P11 = rx495_cur."ws"()
    repr_get_attr_int $I11, $P11, rx495_curclass, "$!pos"
    lt $I11, 0, rx495_fail1479
    repr_get_attr_int rx495_pos, $P11, rx495_curclass, "$!pos"
    add $I11, rx495_pos, 3
    gt $I11, rx495_eos, rx495_fail1479
    substr $S10, rx495_tgt, rx495_pos, 3
    ne $S10, ucs4:"...", rx495_fail1479
    add rx495_pos, 3
    repr_bind_attr_int rx495_cur, rx495_curclass, "$!pos", rx495_pos
    $P11 = rx495_cur."ws"()
    repr_get_attr_int $I11, $P11, rx495_curclass, "$!pos"
    lt $I11, 0, rx495_fail1479
    repr_get_attr_int rx495_pos, $P11, rx495_curclass, "$!pos"
    add $I11, rx495_pos, 1
    gt $I11, rx495_eos, rx495_fail1479
    substr $S10, rx495_tgt, rx495_pos, 1
    ne $S10, ucs4:"}", rx495_fail1479
    add rx495_pos, 1
    repr_bind_attr_int rx495_cur, rx495_curclass, "$!pos", rx495_pos
    $P11 = rx495_cur."ws"()
    repr_get_attr_int $I11, $P11, rx495_curclass, "$!pos"
    lt $I11, 0, rx495_fail1479
    repr_get_attr_int rx495_pos, $P11, rx495_curclass, "$!pos"
    rx495_cur."!cursor_pass"(rx495_pos, "package_declarator:sym<stub>", 'backtrack'=>1)
    .return (rx495_cur)
  rx495_restart1478:
    repr_get_attr_obj rx495_cstack, rx495_cur, rx495_curclass, "$!cstack"
  rx495_fail1479:
    unless rx495_bstack, rx495_done1477
    pop $I19, rx495_bstack
    if_null rx495_cstack, rx495_cstack_done1482
    unless rx495_cstack, rx495_cstack_done1482
    dec $I19
    set $P11, rx495_cstack[$I19]
  rx495_cstack_done1482:
    pop rx495_rep, rx495_bstack
    pop rx495_pos, rx495_bstack
    pop $I19, rx495_bstack
    lt rx495_pos, -1, rx495_done1477
    lt rx495_pos, 0, rx495_fail1479
    eq $I19, 0, rx495_fail1479
    nqp_islist $I20, rx495_cstack
    unless $I20, rx495_jump1480
    elements $I18, rx495_bstack
    le $I18, 0, rx495_cut1481
    dec $I18
    set $I18, rx495_bstack[$I18]
  rx495_cut1481:
    assign rx495_cstack, $I18
  rx495_jump1480:
    jump $I19
  rx495_done1477:
    rx495_cur."!cursor_fail"()
    .return (rx495_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_107_1346968539.359_caps" :subid("cuid_memo_150_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["name"], $P5003
    box $P5004, 0
    set $P5001["metaclass"], $P5004
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_107_1346968539.359_nfa" :subid("cuid_memo_151_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 115
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 116
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 117
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 98
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 0
    push $P5027, $P5028
    box $P5029, 0
    push $P5027, $P5029
    box $P5030, 0
    push $P5027, $P5030
    push $P5001, $P5027
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_def" :subid("cuid_108_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 939
    .param pmc _lex_param_0 
    .const 'Sub' $P5010 = 'cuid_387_1346968539.359' 
    capture_lex $P5010 
    .lex "$*PACKAGE", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx508_tgt
    .local int rx508_pos
    .local int rx508_off
    .local int rx508_eos
    .local int rx508_rep
    .local pmc rx508_cur
    .local pmc rx508_curclass
    .local pmc rx508_bstack
    .local pmc rx508_cstack
    (rx508_cur, rx508_tgt, rx508_pos, rx508_curclass, rx508_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx508_cur
    length rx508_eos, rx508_tgt
    eq $I19, 1, rx508_restart1502
    gt rx508_pos, rx508_eos, rx508_fail1503
    repr_get_attr_int $I11, self, rx508_curclass, "$!from"
    ne $I11, -1, rxscan509_done1509
    goto rxscan509_scan1508
  rxscan509_loop1507:
    inc rx508_pos
    gt rx508_pos, rx508_eos, rx508_fail1503
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!from", rx508_pos
  rxscan509_scan1508:
    nqp_rxmark rx508_bstack, rxscan509_loop1507, rx508_pos, 0
  rxscan509_done1509:
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1503
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    store_lex unicode:"$\x{a2}", rx508_cur
    unless_null $P101, fallback1511
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["$PACKAGE"]
    unless_null $P5002, fallback1512
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5002, $P5005
  fallback1512:
    unless_null $P5002, vivi_5111513
    die "Contextual $*PACKAGE not found"
    box $P5006, "Contextual $*PACKAGE not found"
    set $P5002, $P5006
  vivi_5111513:
    set $P101, $P5002
  fallback1511:
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1503
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."name"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1503
    nqp_rxmark rx508_bstack, rxsubrule513_pass1515, -1, 0
  rxsubrule513_pass1515:
    rx508_cstack = rx508_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1503
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    nqp_rxmark rx508_bstack, rxquantr515_done1518, rx508_pos, 0
  rxquantr515_loop1517:
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1503
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    add $I11, rx508_pos, 2
    gt $I11, rx508_eos, rx508_fail1503
    substr $S10, rx508_tgt, rx508_pos, 2
    ne $S10, ucs4:"is", rx508_fail1503
    add rx508_pos, 2
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1503
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    add $I11, rx508_pos, 5
    gt $I11, rx508_eos, rx508_fail1503
    substr $S10, rx508_tgt, rx508_pos, 5
    ne $S10, ucs4:"repr(", rx508_fail1503
    add rx508_pos, 5
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1503
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."quote_EXPR"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1503
    nqp_rxmark rx508_bstack, rxsubrule519_pass1522, -1, 0
  rxsubrule519_pass1522:
    rx508_cstack = rx508_cur."!cursor_capture"($P11, "repr")
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1503
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    add $I11, rx508_pos, 1
    gt $I11, rx508_eos, rx508_fail1503
    substr $S10, rx508_tgt, rx508_pos, 1
    ne $S10, ucs4:")", rx508_fail1503
    add rx508_pos, 1
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1503
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    nqp_rxpeek $I19, rx508_bstack, rxquantr515_done1518
    inc $I19
    inc $I19
    set rx508_rep, rx508_bstack[$I19]
    nqp_rxcommit rx508_bstack, rxquantr515_done1518
    inc rx508_rep
  rxquantr515_done1518:
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1503
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    store_lex unicode:"$\x{a2}", rx508_cur
    $P5007 = $P102."MATCH"()
    set $P103, $P5007
    .const 'Sub' $P5008 = 'cuid_387_1346968539.359' 
    capture_lex $P5008
    $P5009 = $P5008()
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1503
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    nqp_rxmark rx508_bstack, rxquantr546_done1618, rx508_pos, 0
  rxquantr546_loop1617:
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1503
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    add $I11, rx508_pos, 2
    gt $I11, rx508_eos, rx508_fail1503
    substr $S10, rx508_tgt, rx508_pos, 2
    ne $S10, ucs4:"is", rx508_fail1503
    add rx508_pos, 2
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1503
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."name"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1503
    nqp_rxmark rx508_bstack, rxsubrule549_pass1621, -1, 0
  rxsubrule549_pass1621:
    rx508_cstack = rx508_cur."!cursor_capture"($P11, "parent")
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1503
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    nqp_rxpeek $I19, rx508_bstack, rxquantr546_done1618
    inc $I19
    inc $I19
    set rx508_rep, rx508_bstack[$I19]
    nqp_rxcommit rx508_bstack, rxquantr546_done1618
    inc rx508_rep
  rxquantr546_done1618:
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1503
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    nqp_rxmark rx508_bstack, rxquantr552_done1625, rx508_pos, 0
  rxquantr552_loop1624:
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1503
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    add $I11, rx508_pos, 4
    gt $I11, rx508_eos, rx508_fail1503
    substr $S10, rx508_tgt, rx508_pos, 4
    ne $S10, ucs4:"does", rx508_fail1503
    add rx508_pos, 4
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1503
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."name"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1503
    nqp_rxmark rx508_bstack, rxsubrule555_pass1628, -1, 0
  rxsubrule555_pass1628:
    rx508_cstack = rx508_cur."!cursor_capture"($P11, "role")
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1503
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    nqp_rxpeek $I19, rx508_bstack, rxquantr552_done1625
    inc $I19
    inc $I19
    set rx508_rep, rx508_bstack[$I19]
    nqp_rxcommit rx508_bstack, rxquantr552_done1625
    inc rx508_rep
    nqp_rxmark rx508_bstack, rxquantr552_done1625, rx508_pos, rx508_rep
    goto rxquantr552_loop1624
  rxquantr552_done1625:
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1503
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
  alt558_01632:
    nqp_rxmark rx508_bstack, alt558_11637, rx508_pos, 0
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1503
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    add $I11, rx508_pos, 1
    gt $I11, rx508_eos, rx508_fail1503
    substr $S10, rx508_tgt, rx508_pos, 1
    ne $S10, ucs4:";", rx508_fail1503
    add rx508_pos, 1
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1503
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."comp_unit"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1503
    nqp_rxmark rx508_bstack, rxsubrule561_pass1635, -1, 0
  rxsubrule561_pass1635:
    rx508_cstack = rx508_cur."!cursor_capture"($P11, "comp_unit")
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1503
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    goto alt558_end1631
  alt558_11637:
    nqp_rxmark rx508_bstack, alt558_21642, rx508_pos, 0
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1503
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    ge rx508_pos, rx508_eos, rx508_fail1503
    substr $S11, rx508_tgt, rx508_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx508_fail1503
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1503
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."block"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1503
    nqp_rxmark rx508_bstack, rxsubrule565_pass1640, -1, 0
  rxsubrule565_pass1640:
    rx508_cstack = rx508_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1503
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    goto alt558_end1631
  alt558_21642:
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1503
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."panic"("Malformed package declaration")
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1503
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1503
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
  alt558_end1631:
    repr_bind_attr_int rx508_cur, rx508_curclass, "$!pos", rx508_pos
    $P11 = rx508_cur."ws"()
    repr_get_attr_int $I11, $P11, rx508_curclass, "$!pos"
    lt $I11, 0, rx508_fail1503
    repr_get_attr_int rx508_pos, $P11, rx508_curclass, "$!pos"
    rx508_cur."!cursor_pass"(rx508_pos, "package_def", 'backtrack'=>1)
    .return (rx508_cur)
  rx508_restart1502:
    repr_get_attr_obj rx508_cstack, rx508_cur, rx508_curclass, "$!cstack"
  rx508_fail1503:
    unless rx508_bstack, rx508_done1501
    pop $I19, rx508_bstack
    if_null rx508_cstack, rx508_cstack_done1506
    unless rx508_cstack, rx508_cstack_done1506
    dec $I19
    set $P11, rx508_cstack[$I19]
  rx508_cstack_done1506:
    pop rx508_rep, rx508_bstack
    pop rx508_pos, rx508_bstack
    pop $I19, rx508_bstack
    lt rx508_pos, -1, rx508_done1501
    lt rx508_pos, 0, rx508_fail1503
    eq $I19, 0, rx508_fail1503
    nqp_islist $I20, rx508_cstack
    unless $I20, rx508_jump1504
    elements $I18, rx508_bstack
    le $I18, 0, rx508_cut1505
    dec $I18
    set $I18, rx508_bstack[$I18]
  rx508_cut1505:
    assign rx508_cstack, $I18
  rx508_jump1504:
    jump $I19
  rx508_done1501:
    rx508_cur."!cursor_fail"()
    .return (rx508_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_108_1346968539.359_caps" :subid("cuid_memo_152_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["name"], $P5002
    box $P5003, 2
    set $P5001["repr"], $P5003
    box $P5004, 2
    set $P5001["parent"], $P5004
    box $P5005, 2
    set $P5001["role"], $P5005
    box $P5006, 0
    set $P5001["comp_unit"], $P5006
    box $P5007, 0
    set $P5001["block"], $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_387_1346968539.359") :anon :lex :outer("cuid_108_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 945
    .lex "%args", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5003, "$/"
    unless_null $P5003, fallback1526
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5003, $P5004
  fallback1526:
    set $P5002, $P5003["name"]
    unless_null $P5002, fallback1527
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5002, $P5005
  fallback1527:
    set $S5001, $P5002
    box $P5006, $S5001
    set $P101["name"], $P5006
    find_lex $P5008, "$/"
    unless_null $P5008, fallback1530
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5008, $P5009
  fallback1530:
    set $P5007, $P5008["repr"]
    unless_null $P5007, fallback1531
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5007, $P5010
  fallback1531:
    set $P5024, $P5007
    unless $P5007 goto if523_end1529 
.annotate 'line', 950
    find_lex $P5016, "$/"
    unless_null $P5016, fallback1532
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5016, $P5017
  fallback1532:
    set $P5015, $P5016["repr"]
    unless_null $P5015, fallback1533
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5015, $P5018
  fallback1533:
    set $P5014, $P5015[0]
    unless_null $P5014, fallback1534
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5014, $P5019
  fallback1534:
    set $P5013, $P5014["quote_delimited"]
    unless_null $P5013, fallback1535
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5013, $P5020
  fallback1535:
    set $P5012, $P5013["quote_atom"]
    unless_null $P5012, fallback1536
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5012, $P5021
  fallback1536:
    set $P5011, $P5012[0]
    unless_null $P5011, fallback1537
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5011, $P5022
  fallback1537:
    set $S5002, $P5011
    box $P5023, $S5002
    set $P101["repr"], $P5023
    set $P5024, $P5023
  if523_end1529:
.annotate 'line', 953
    find_dynamic_lex $P5025, "$*W"
    unless_null $P5025, fallback1538
    get_hll_global $P5028, "GLOBAL"
    get_who $P5027, $P5028
    set $P5026, $P5027["$W"]
    unless_null $P5026, fallback1539
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5026, $P5029
  fallback1539:
    unless_null $P5026, vivi_5241540
    die "Contextual $*W not found"
    box $P5030, "Contextual $*W not found"
    set $P5026, $P5030
  vivi_5241540:
    set $P5025, $P5026
  fallback1538:
    find_dynamic_lex $P5032, "%*HOW"
    unless_null $P5032, fallback1541
    get_hll_global $P5035, "GLOBAL"
    get_who $P5034, $P5035
    set $P5033, $P5034["%HOW"]
    unless_null $P5033, fallback1542
    get_hll_global $P5037, "GLOBAL"
    get_who $P5036, $P5037
    new $P5038, 'Hash'
    set $P5036["%HOW"], $P5038
    set $P5033, $P5038
  fallback1542:
    unless_null $P5033, vivi_5251543
    die "Contextual %*HOW not found"
    box $P5039, "Contextual %*HOW not found"
    set $P5033, $P5039
  vivi_5251543:
    set $P5032, $P5033
  fallback1541:
    find_dynamic_lex $P5040, "$*PKGDECL"
    unless_null $P5040, fallback1544
    get_hll_global $P5043, "GLOBAL"
    get_who $P5042, $P5043
    set $P5041, $P5042["$PKGDECL"]
    unless_null $P5041, fallback1545
    nqp_get_sc_object $P5044, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5041, $P5044
  fallback1545:
    unless_null $P5041, vivi_5261546
    die "Contextual $*PKGDECL not found"
    box $P5045, "Contextual $*PKGDECL not found"
    set $P5041, $P5045
  vivi_5261546:
    set $P5040, $P5041
  fallback1544:
    set $S5003, $P5040
    set $P5031, $P5032[$S5003]
    unless_null $P5031, fallback1547
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5031, $P5046
  fallback1547:
    $P5047 = $P5025."pkg_create_mo"($P5031, $P101 :flat :named)
    store_dynamic_lex "$*PACKAGE", $P5047
    find_dynamic_lex $P5048, "$*SCOPE"
    unless_null $P5048, fallback1552
    get_hll_global $P5051, "GLOBAL"
    get_who $P5050, $P5051
    set $P5049, $P5050["$SCOPE"]
    unless_null $P5049, fallback1553
    nqp_get_sc_object $P5052, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5049, $P5052
  fallback1553:
    unless_null $P5049, vivi_5291554
    die "Contextual $*SCOPE not found"
    box $P5053, "Contextual $*SCOPE not found"
    set $P5049, $P5053
  vivi_5291554:
    set $P5048, $P5049
  fallback1552:
    set $S5004, $P5048
    iseq $I5001, $S5004, "our"
    set $I5003, $I5001
    if $I5001 goto unless528_end1551 
    find_dynamic_lex $P5054, "$*SCOPE"
    unless_null $P5054, fallback1555
    get_hll_global $P5057, "GLOBAL"
    get_who $P5056, $P5057
    set $P5055, $P5056["$SCOPE"]
    unless_null $P5055, fallback1556
    nqp_get_sc_object $P5058, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5055, $P5058
  fallback1556:
    unless_null $P5055, vivi_5301557
    die "Contextual $*SCOPE not found"
    box $P5059, "Contextual $*SCOPE not found"
    set $P5055, $P5059
  vivi_5301557:
    set $P5054, $P5055
  fallback1555:
    set $S5005, $P5054
    iseq $I5002, $S5005, ""
    set $I5003, $I5002
  unless528_end1551:
    unless $I5003 goto if527_else1548 
.annotate 'line', 956
.annotate 'line', 957
    find_dynamic_lex $P5060, "$*W"
    unless_null $P5060, fallback1558
    get_hll_global $P5063, "GLOBAL"
    get_who $P5062, $P5063
    set $P5061, $P5062["$W"]
    unless_null $P5061, fallback1559
    nqp_get_sc_object $P5064, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5061, $P5064
  fallback1559:
    unless_null $P5061, vivi_5311560
    die "Contextual $*W not found"
    box $P5065, "Contextual $*W not found"
    set $P5061, $P5065
  vivi_5311560:
    set $P5060, $P5061
  fallback1558:
    find_dynamic_lex $P5066, "$*OUTERPACKAGE"
    unless_null $P5066, fallback1561
    get_hll_global $P5069, "GLOBAL"
    get_who $P5068, $P5069
    set $P5067, $P5068["$OUTERPACKAGE"]
    unless_null $P5067, fallback1562
    nqp_get_sc_object $P5070, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5067, $P5070
  fallback1562:
    unless_null $P5067, vivi_5321563
    die "Contextual $*OUTERPACKAGE not found"
    box $P5071, "Contextual $*OUTERPACKAGE not found"
    set $P5067, $P5071
  vivi_5321563:
    set $P5066, $P5067
  fallback1561:
    find_lex $P5074, "$/"
    unless_null $P5074, fallback1564
    nqp_get_sc_object $P5075, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5074, $P5075
  fallback1564:
    set $P5073, $P5074["name"]
    unless_null $P5073, fallback1565
    nqp_get_sc_object $P5076, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5073, $P5076
  fallback1565:
    set $P5072, $P5073["identifier"]
    unless_null $P5072, fallback1566
    nqp_get_sc_object $P5077, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5072, $P5077
  fallback1566:
    find_dynamic_lex $P5078, "$*PACKAGE"
    unless_null $P5078, fallback1567
    get_hll_global $P5081, "GLOBAL"
    get_who $P5080, $P5081
    set $P5079, $P5080["$PACKAGE"]
    unless_null $P5079, fallback1568
    nqp_get_sc_object $P5082, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5079, $P5082
  fallback1568:
    unless_null $P5079, vivi_5331569
    die "Contextual $*PACKAGE not found"
    box $P5083, "Contextual $*PACKAGE not found"
    set $P5079, $P5083
  vivi_5331569:
    set $P5078, $P5079
  fallback1567:
    $P5084 = $P5060."install_package_symbol"($P5066, $P5072, $P5078)
    find_lex $P5087, "$/"
    unless_null $P5087, fallback1572
    nqp_get_sc_object $P5088, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5087, $P5088
  fallback1572:
    set $P5086, $P5087["name"]
    unless_null $P5086, fallback1573
    nqp_get_sc_object $P5089, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5086, $P5089
  fallback1573:
    set $P5085, $P5086["identifier"]
    unless_null $P5085, fallback1574
    nqp_get_sc_object $P5090, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5085, $P5090
  fallback1574:
    set $N5001, $P5085
    set $N5002, 1
    iseq $I5004, $N5001, $N5002
    box $P5120, $I5004
    set $P5119, $P5120
    unless $I5004 goto if534_end1571 
.annotate 'line', 958
.annotate 'line', 959
    find_dynamic_lex $P5091, "$*W"
    unless_null $P5091, fallback1575
    get_hll_global $P5094, "GLOBAL"
    get_who $P5093, $P5094
    set $P5092, $P5093["$W"]
    unless_null $P5092, fallback1576
    nqp_get_sc_object $P5095, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5092, $P5095
  fallback1576:
    unless_null $P5092, vivi_5351577
    die "Contextual $*W not found"
    box $P5096, "Contextual $*W not found"
    set $P5092, $P5096
  vivi_5351577:
    set $P5091, $P5092
  fallback1575:
    find_dynamic_lex $P5097, "$*W"
    unless_null $P5097, fallback1578
    get_hll_global $P5100, "GLOBAL"
    get_who $P5099, $P5100
    set $P5098, $P5099["$W"]
    unless_null $P5098, fallback1579
    nqp_get_sc_object $P5101, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5098, $P5101
  fallback1579:
    unless_null $P5098, vivi_5361580
    die "Contextual $*W not found"
    box $P5102, "Contextual $*W not found"
    set $P5098, $P5102
  vivi_5361580:
    set $P5097, $P5098
  fallback1578:
    $P5103 = $P5097."cur_lexpad"()
    find_lex $P5107, "$/"
    unless_null $P5107, fallback1581
    nqp_get_sc_object $P5108, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5107, $P5108
  fallback1581:
    set $P5106, $P5107["name"]
    unless_null $P5106, fallback1582
    nqp_get_sc_object $P5109, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5106, $P5109
  fallback1582:
    set $P5105, $P5106["identifier"]
    unless_null $P5105, fallback1583
    nqp_get_sc_object $P5110, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5105, $P5110
  fallback1583:
    set $P5104, $P5105[0]
    unless_null $P5104, fallback1584
    nqp_get_sc_object $P5111, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5104, $P5111
  fallback1584:
    find_dynamic_lex $P5112, "$*PACKAGE"
    unless_null $P5112, fallback1585
    get_hll_global $P5115, "GLOBAL"
    get_who $P5114, $P5115
    set $P5113, $P5114["$PACKAGE"]
    unless_null $P5113, fallback1586
    nqp_get_sc_object $P5116, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5113, $P5116
  fallback1586:
    unless_null $P5113, vivi_5371587
    die "Contextual $*PACKAGE not found"
    box $P5117, "Contextual $*PACKAGE not found"
    set $P5113, $P5117
  vivi_5371587:
    set $P5112, $P5113
  fallback1585:
    $P5118 = $P5091."install_lexical_symbol"($P5103, $P5104, $P5112)
    set $P5119, $P5118
  if534_end1571:
    set $P5179, $P5119
    goto if527_end1549
  if527_else1548:
    find_dynamic_lex $P5121, "$*SCOPE"
    unless_null $P5121, fallback1590
    get_hll_global $P5124, "GLOBAL"
    get_who $P5123, $P5124
    set $P5122, $P5123["$SCOPE"]
    unless_null $P5122, fallback1591
    nqp_get_sc_object $P5125, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5122, $P5125
  fallback1591:
    unless_null $P5122, vivi_5391592
    die "Contextual $*SCOPE not found"
    box $P5126, "Contextual $*SCOPE not found"
    set $P5122, $P5126
  vivi_5391592:
    set $P5121, $P5122
  fallback1590:
    set $S5006, $P5121
    iseq $I5005, $S5006, "my"
    unless $I5005 goto if538_else1588 
.annotate 'line', 962
    find_lex $P5129, "$/"
    unless_null $P5129, fallback1595
    nqp_get_sc_object $P5130, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5129, $P5130
  fallback1595:
    set $P5128, $P5129["name"]
    unless_null $P5128, fallback1596
    nqp_get_sc_object $P5131, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5128, $P5131
  fallback1596:
    set $P5127, $P5128["identifier"]
    unless_null $P5127, fallback1597
    nqp_get_sc_object $P5132, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5127, $P5132
  fallback1597:
    set $N5003, $P5127
    set $N5004, 1
    isne $I5006, $N5003, $N5004
    box $P5140, $I5006
    set $P5139, $P5140
    unless $I5006 goto if540_end1594 
.annotate 'line', 963
.annotate 'line', 964
    find_lex $P5134, "$/"
    unless_null $P5134, fallback1598
    nqp_get_sc_object $P5135, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5134, $P5135
  fallback1598:
    set $P5133, $P5134["name"]
    unless_null $P5133, fallback1599
    nqp_get_sc_object $P5136, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5133, $P5136
  fallback1599:
    $P5137 = $P5133."CURSOR"()
    $P5138 = $P5137."panic"("A my scoped package cannot have a multi-part name yet")
    set $P5139, $P5138
  if540_end1594:
.annotate 'line', 966
    find_dynamic_lex $P5141, "$*W"
    unless_null $P5141, fallback1600
    get_hll_global $P5144, "GLOBAL"
    get_who $P5143, $P5144
    set $P5142, $P5143["$W"]
    unless_null $P5142, fallback1601
    nqp_get_sc_object $P5145, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5142, $P5145
  fallback1601:
    unless_null $P5142, vivi_5411602
    die "Contextual $*W not found"
    box $P5146, "Contextual $*W not found"
    set $P5142, $P5146
  vivi_5411602:
    set $P5141, $P5142
  fallback1600:
    find_dynamic_lex $P5147, "$*W"
    unless_null $P5147, fallback1603
    get_hll_global $P5150, "GLOBAL"
    get_who $P5149, $P5150
    set $P5148, $P5149["$W"]
    unless_null $P5148, fallback1604
    nqp_get_sc_object $P5151, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5148, $P5151
  fallback1604:
    unless_null $P5148, vivi_5421605
    die "Contextual $*W not found"
    box $P5152, "Contextual $*W not found"
    set $P5148, $P5152
  vivi_5421605:
    set $P5147, $P5148
  fallback1603:
    $P5153 = $P5147."cur_lexpad"()
    find_lex $P5157, "$/"
    unless_null $P5157, fallback1606
    nqp_get_sc_object $P5158, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5157, $P5158
  fallback1606:
    set $P5156, $P5157["name"]
    unless_null $P5156, fallback1607
    nqp_get_sc_object $P5159, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5156, $P5159
  fallback1607:
    set $P5155, $P5156["identifier"]
    unless_null $P5155, fallback1608
    nqp_get_sc_object $P5160, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5155, $P5160
  fallback1608:
    set $P5154, $P5155[0]
    unless_null $P5154, fallback1609
    nqp_get_sc_object $P5161, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5154, $P5161
  fallback1609:
    find_dynamic_lex $P5162, "$*PACKAGE"
    unless_null $P5162, fallback1610
    get_hll_global $P5165, "GLOBAL"
    get_who $P5164, $P5165
    set $P5163, $P5164["$PACKAGE"]
    unless_null $P5163, fallback1611
    nqp_get_sc_object $P5166, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5163, $P5166
  fallback1611:
    unless_null $P5163, vivi_5431612
    die "Contextual $*PACKAGE not found"
    box $P5167, "Contextual $*PACKAGE not found"
    set $P5163, $P5167
  vivi_5431612:
    set $P5162, $P5163
  fallback1610:
    $P5168 = $P5141."install_lexical_symbol"($P5153, $P5154, $P5162)
    set $P5178, $P5168
    goto if538_end1589
  if538_else1588:
.annotate 'line', 968
.annotate 'line', 969
    find_lex $P5169, "$/"
    $P5170 = $P5169."CURSOR"()
    find_dynamic_lex $P5171, "$*SCOPE"
    unless_null $P5171, fallback1613
    get_hll_global $P5174, "GLOBAL"
    get_who $P5173, $P5174
    set $P5172, $P5173["$SCOPE"]
    unless_null $P5172, fallback1614
    nqp_get_sc_object $P5175, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5172, $P5175
  fallback1614:
    unless_null $P5172, vivi_5441615
    die "Contextual $*SCOPE not found"
    box $P5176, "Contextual $*SCOPE not found"
    set $P5172, $P5176
  vivi_5441615:
    set $P5171, $P5172
  fallback1613:
    set $S5008, $P5171
    concat $S5007, $S5008, " scoped packages are not supported"
    $P5177 = $P5170."panic"($S5007)
    set $P5178, $P5177
  if538_end1589:
    set $P5179, $P5178
  if527_end1549:
    .return ($P5179) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator" :subid("cuid_109_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 982
    .param pmc self 
    $P5001 = self."!protoregex"("scope_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<my>" :subid("cuid_110_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 983
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx571_tgt
    .local int rx571_pos
    .local int rx571_off
    .local int rx571_eos
    .local int rx571_rep
    .local pmc rx571_cur
    .local pmc rx571_curclass
    .local pmc rx571_bstack
    .local pmc rx571_cstack
    (rx571_cur, rx571_tgt, rx571_pos, rx571_curclass, rx571_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx571_cur
    length rx571_eos, rx571_tgt
    eq $I19, 1, rx571_restart1649
    gt rx571_pos, rx571_eos, rx571_fail1650
    repr_get_attr_int $I11, self, rx571_curclass, "$!from"
    ne $I11, -1, rxscan572_done1656
    goto rxscan572_scan1655
  rxscan572_loop1654:
    inc rx571_pos
    gt rx571_pos, rx571_eos, rx571_fail1650
    repr_bind_attr_int rx571_cur, rx571_curclass, "$!from", rx571_pos
  rxscan572_scan1655:
    nqp_rxmark rx571_bstack, rxscan572_loop1654, rx571_pos, 0
  rxscan572_done1656:
    nqp_rxmark rx571_bstack, rxcap573_fail1658, rx571_pos, 0
    add $I11, rx571_pos, 2
    gt $I11, rx571_eos, rx571_fail1650
    substr $S10, rx571_tgt, rx571_pos, 2
    ne $S10, ucs4:"my", rx571_fail1650
    add rx571_pos, 2
    nqp_rxpeek $I19, rx571_bstack, rxcap573_fail1658
    inc $I19
    set $I11, rx571_bstack[$I19]
    $P11 = rx571_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx571_pos)
    rx571_cstack = rx571_cur."!cursor_capture"($P11, "sym")
    goto rxcap573_done1657
  rxcap573_fail1658:
    goto rx571_fail1650
  rxcap573_done1657:
    repr_bind_attr_int rx571_cur, rx571_curclass, "$!pos", rx571_pos
    $P11 = rx571_cur."scoped"("my")
    repr_get_attr_int $I11, $P11, rx571_curclass, "$!pos"
    lt $I11, 0, rx571_fail1650
    nqp_rxmark rx571_bstack, rxsubrule574_pass1659, -1, 0
  rxsubrule574_pass1659:
    rx571_cstack = rx571_cur."!cursor_capture"($P11, "scoped")
    repr_get_attr_int rx571_pos, $P11, rx571_curclass, "$!pos"
    rx571_cur."!cursor_pass"(rx571_pos, "scope_declarator:sym<my>", 'backtrack'=>1)
    .return (rx571_cur)
  rx571_restart1649:
    repr_get_attr_obj rx571_cstack, rx571_cur, rx571_curclass, "$!cstack"
  rx571_fail1650:
    unless rx571_bstack, rx571_done1648
    pop $I19, rx571_bstack
    if_null rx571_cstack, rx571_cstack_done1653
    unless rx571_cstack, rx571_cstack_done1653
    dec $I19
    set $P11, rx571_cstack[$I19]
  rx571_cstack_done1653:
    pop rx571_rep, rx571_bstack
    pop rx571_pos, rx571_bstack
    pop $I19, rx571_bstack
    lt rx571_pos, -1, rx571_done1648
    lt rx571_pos, 0, rx571_fail1650
    eq $I19, 0, rx571_fail1650
    nqp_islist $I20, rx571_cstack
    unless $I20, rx571_jump1651
    elements $I18, rx571_bstack
    le $I18, 0, rx571_cut1652
    dec $I18
    set $I18, rx571_bstack[$I18]
  rx571_cut1652:
    assign rx571_cstack, $I18
  rx571_jump1651:
    jump $I19
  rx571_done1648:
    rx571_cur."!cursor_fail"()
    .return (rx571_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_110_1346968539.359_caps" :subid("cuid_memo_153_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["scoped"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_110_1346968539.359_nfa" :subid("cuid_memo_154_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 109
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 121
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "scoped"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<our>" :subid("cuid_111_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 984
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx575_tgt
    .local int rx575_pos
    .local int rx575_off
    .local int rx575_eos
    .local int rx575_rep
    .local pmc rx575_cur
    .local pmc rx575_curclass
    .local pmc rx575_bstack
    .local pmc rx575_cstack
    (rx575_cur, rx575_tgt, rx575_pos, rx575_curclass, rx575_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx575_cur
    length rx575_eos, rx575_tgt
    eq $I19, 1, rx575_restart1662
    gt rx575_pos, rx575_eos, rx575_fail1663
    repr_get_attr_int $I11, self, rx575_curclass, "$!from"
    ne $I11, -1, rxscan576_done1669
    goto rxscan576_scan1668
  rxscan576_loop1667:
    inc rx575_pos
    gt rx575_pos, rx575_eos, rx575_fail1663
    repr_bind_attr_int rx575_cur, rx575_curclass, "$!from", rx575_pos
  rxscan576_scan1668:
    nqp_rxmark rx575_bstack, rxscan576_loop1667, rx575_pos, 0
  rxscan576_done1669:
    nqp_rxmark rx575_bstack, rxcap577_fail1671, rx575_pos, 0
    add $I11, rx575_pos, 3
    gt $I11, rx575_eos, rx575_fail1663
    substr $S10, rx575_tgt, rx575_pos, 3
    ne $S10, ucs4:"our", rx575_fail1663
    add rx575_pos, 3
    nqp_rxpeek $I19, rx575_bstack, rxcap577_fail1671
    inc $I19
    set $I11, rx575_bstack[$I19]
    $P11 = rx575_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx575_pos)
    rx575_cstack = rx575_cur."!cursor_capture"($P11, "sym")
    goto rxcap577_done1670
  rxcap577_fail1671:
    goto rx575_fail1663
  rxcap577_done1670:
    repr_bind_attr_int rx575_cur, rx575_curclass, "$!pos", rx575_pos
    $P11 = rx575_cur."scoped"("our")
    repr_get_attr_int $I11, $P11, rx575_curclass, "$!pos"
    lt $I11, 0, rx575_fail1663
    nqp_rxmark rx575_bstack, rxsubrule578_pass1672, -1, 0
  rxsubrule578_pass1672:
    rx575_cstack = rx575_cur."!cursor_capture"($P11, "scoped")
    repr_get_attr_int rx575_pos, $P11, rx575_curclass, "$!pos"
    rx575_cur."!cursor_pass"(rx575_pos, "scope_declarator:sym<our>", 'backtrack'=>1)
    .return (rx575_cur)
  rx575_restart1662:
    repr_get_attr_obj rx575_cstack, rx575_cur, rx575_curclass, "$!cstack"
  rx575_fail1663:
    unless rx575_bstack, rx575_done1661
    pop $I19, rx575_bstack
    if_null rx575_cstack, rx575_cstack_done1666
    unless rx575_cstack, rx575_cstack_done1666
    dec $I19
    set $P11, rx575_cstack[$I19]
  rx575_cstack_done1666:
    pop rx575_rep, rx575_bstack
    pop rx575_pos, rx575_bstack
    pop $I19, rx575_bstack
    lt rx575_pos, -1, rx575_done1661
    lt rx575_pos, 0, rx575_fail1663
    eq $I19, 0, rx575_fail1663
    nqp_islist $I20, rx575_cstack
    unless $I20, rx575_jump1664
    elements $I18, rx575_bstack
    le $I18, 0, rx575_cut1665
    dec $I18
    set $I18, rx575_bstack[$I18]
  rx575_cut1665:
    assign rx575_cstack, $I18
  rx575_jump1664:
    jump $I19
  rx575_done1661:
    rx575_cur."!cursor_fail"()
    .return (rx575_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_111_1346968539.359_caps" :subid("cuid_memo_155_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["scoped"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_111_1346968539.359_nfa" :subid("cuid_memo_156_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 111
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 117
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 114
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "scoped"
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<has>" :subid("cuid_112_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 985
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx579_tgt
    .local int rx579_pos
    .local int rx579_off
    .local int rx579_eos
    .local int rx579_rep
    .local pmc rx579_cur
    .local pmc rx579_curclass
    .local pmc rx579_bstack
    .local pmc rx579_cstack
    (rx579_cur, rx579_tgt, rx579_pos, rx579_curclass, rx579_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx579_cur
    length rx579_eos, rx579_tgt
    eq $I19, 1, rx579_restart1675
    gt rx579_pos, rx579_eos, rx579_fail1676
    repr_get_attr_int $I11, self, rx579_curclass, "$!from"
    ne $I11, -1, rxscan580_done1682
    goto rxscan580_scan1681
  rxscan580_loop1680:
    inc rx579_pos
    gt rx579_pos, rx579_eos, rx579_fail1676
    repr_bind_attr_int rx579_cur, rx579_curclass, "$!from", rx579_pos
  rxscan580_scan1681:
    nqp_rxmark rx579_bstack, rxscan580_loop1680, rx579_pos, 0
  rxscan580_done1682:
    nqp_rxmark rx579_bstack, rxcap581_fail1684, rx579_pos, 0
    add $I11, rx579_pos, 3
    gt $I11, rx579_eos, rx579_fail1676
    substr $S10, rx579_tgt, rx579_pos, 3
    ne $S10, ucs4:"has", rx579_fail1676
    add rx579_pos, 3
    nqp_rxpeek $I19, rx579_bstack, rxcap581_fail1684
    inc $I19
    set $I11, rx579_bstack[$I19]
    $P11 = rx579_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx579_pos)
    rx579_cstack = rx579_cur."!cursor_capture"($P11, "sym")
    goto rxcap581_done1683
  rxcap581_fail1684:
    goto rx579_fail1676
  rxcap581_done1683:
    repr_bind_attr_int rx579_cur, rx579_curclass, "$!pos", rx579_pos
    $P11 = rx579_cur."scoped"("has")
    repr_get_attr_int $I11, $P11, rx579_curclass, "$!pos"
    lt $I11, 0, rx579_fail1676
    nqp_rxmark rx579_bstack, rxsubrule582_pass1685, -1, 0
  rxsubrule582_pass1685:
    rx579_cstack = rx579_cur."!cursor_capture"($P11, "scoped")
    repr_get_attr_int rx579_pos, $P11, rx579_curclass, "$!pos"
    rx579_cur."!cursor_pass"(rx579_pos, "scope_declarator:sym<has>", 'backtrack'=>1)
    .return (rx579_cur)
  rx579_restart1675:
    repr_get_attr_obj rx579_cstack, rx579_cur, rx579_curclass, "$!cstack"
  rx579_fail1676:
    unless rx579_bstack, rx579_done1674
    pop $I19, rx579_bstack
    if_null rx579_cstack, rx579_cstack_done1679
    unless rx579_cstack, rx579_cstack_done1679
    dec $I19
    set $P11, rx579_cstack[$I19]
  rx579_cstack_done1679:
    pop rx579_rep, rx579_bstack
    pop rx579_pos, rx579_bstack
    pop $I19, rx579_bstack
    lt rx579_pos, -1, rx579_done1674
    lt rx579_pos, 0, rx579_fail1676
    eq $I19, 0, rx579_fail1676
    nqp_islist $I20, rx579_cstack
    unless $I20, rx579_jump1677
    elements $I18, rx579_bstack
    le $I18, 0, rx579_cut1678
    dec $I18
    set $I18, rx579_bstack[$I18]
  rx579_cut1678:
    assign rx579_cstack, $I18
  rx579_jump1677:
    jump $I19
  rx579_done1674:
    rx579_cur."!cursor_fail"()
    .return (rx579_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_112_1346968539.359_caps" :subid("cuid_memo_157_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["scoped"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_112_1346968539.359_nfa" :subid("cuid_memo_158_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 104
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 97
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 115
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "scoped"
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "scoped" :subid("cuid_113_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 987
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .lex "$*SCOPE", _lex_param_1 
    .local pmc self 
    set self, _lex_param_0
    .local string rx583_tgt
    .local int rx583_pos
    .local int rx583_off
    .local int rx583_eos
    .local int rx583_rep
    .local pmc rx583_cur
    .local pmc rx583_curclass
    .local pmc rx583_bstack
    .local pmc rx583_cstack
    (rx583_cur, rx583_tgt, rx583_pos, rx583_curclass, rx583_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx583_cur
    length rx583_eos, rx583_tgt
    eq $I19, 1, rx583_restart1688
    gt rx583_pos, rx583_eos, rx583_fail1689
    repr_get_attr_int $I11, self, rx583_curclass, "$!from"
    ne $I11, -1, rxscan584_done1695
    goto rxscan584_scan1694
  rxscan584_loop1693:
    inc rx583_pos
    gt rx583_pos, rx583_eos, rx583_fail1689
    repr_bind_attr_int rx583_cur, rx583_curclass, "$!from", rx583_pos
  rxscan584_scan1694:
    nqp_rxmark rx583_bstack, rxscan584_loop1693, rx583_pos, 0
  rxscan584_done1695:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt585_01697
    nqp_push_label $P11, alt585_11701
    nqp_push_label $P11, alt585_21705
    nqp_rxmark rx583_bstack, alt585_end1696, -1, 0
    rx583_cur."!alt"(rx583_pos, "alt_nfa__21_1346968541.428", $P11)
    goto rx583_fail1689
  alt585_01697:
    repr_bind_attr_int rx583_cur, rx583_curclass, "$!pos", rx583_pos
    $P11 = rx583_cur."ws"()
    repr_get_attr_int $I11, $P11, rx583_curclass, "$!pos"
    lt $I11, 0, rx583_fail1689
    repr_get_attr_int rx583_pos, $P11, rx583_curclass, "$!pos"
    repr_bind_attr_int rx583_cur, rx583_curclass, "$!pos", rx583_pos
    $P11 = rx583_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx583_curclass, "$!pos"
    lt $I11, 0, rx583_fail1689
    nqp_rxmark rx583_bstack, rxsubrule587_pass1699, -1, 0
  rxsubrule587_pass1699:
    rx583_cstack = rx583_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx583_pos, $P11, rx583_curclass, "$!pos"
    repr_bind_attr_int rx583_cur, rx583_curclass, "$!pos", rx583_pos
    $P11 = rx583_cur."ws"()
    repr_get_attr_int $I11, $P11, rx583_curclass, "$!pos"
    lt $I11, 0, rx583_fail1689
    repr_get_attr_int rx583_pos, $P11, rx583_curclass, "$!pos"
    goto alt585_end1696
  alt585_11701:
    repr_bind_attr_int rx583_cur, rx583_curclass, "$!pos", rx583_pos
    $P11 = rx583_cur."ws"()
    repr_get_attr_int $I11, $P11, rx583_curclass, "$!pos"
    lt $I11, 0, rx583_fail1689
    repr_get_attr_int rx583_pos, $P11, rx583_curclass, "$!pos"
    repr_bind_attr_int rx583_cur, rx583_curclass, "$!pos", rx583_pos
    $P11 = rx583_cur."multi_declarator"()
    repr_get_attr_int $I11, $P11, rx583_curclass, "$!pos"
    lt $I11, 0, rx583_fail1689
    nqp_rxmark rx583_bstack, rxsubrule590_pass1703, -1, 0
  rxsubrule590_pass1703:
    rx583_cstack = rx583_cur."!cursor_capture"($P11, "multi_declarator")
    repr_get_attr_int rx583_pos, $P11, rx583_curclass, "$!pos"
    repr_bind_attr_int rx583_cur, rx583_curclass, "$!pos", rx583_pos
    $P11 = rx583_cur."ws"()
    repr_get_attr_int $I11, $P11, rx583_curclass, "$!pos"
    lt $I11, 0, rx583_fail1689
    repr_get_attr_int rx583_pos, $P11, rx583_curclass, "$!pos"
    goto alt585_end1696
  alt585_21705:
    repr_bind_attr_int rx583_cur, rx583_curclass, "$!pos", rx583_pos
    $P11 = rx583_cur."ws"()
    repr_get_attr_int $I11, $P11, rx583_curclass, "$!pos"
    lt $I11, 0, rx583_fail1689
    repr_get_attr_int rx583_pos, $P11, rx583_curclass, "$!pos"
    repr_bind_attr_int rx583_cur, rx583_curclass, "$!pos", rx583_pos
    $P11 = rx583_cur."package_declarator"()
    repr_get_attr_int $I11, $P11, rx583_curclass, "$!pos"
    lt $I11, 0, rx583_fail1689
    nqp_rxmark rx583_bstack, rxsubrule593_pass1707, -1, 0
  rxsubrule593_pass1707:
    rx583_cstack = rx583_cur."!cursor_capture"($P11, "package_declarator")
    repr_get_attr_int rx583_pos, $P11, rx583_curclass, "$!pos"
    repr_bind_attr_int rx583_cur, rx583_curclass, "$!pos", rx583_pos
    $P11 = rx583_cur."ws"()
    repr_get_attr_int $I11, $P11, rx583_curclass, "$!pos"
    lt $I11, 0, rx583_fail1689
    repr_get_attr_int rx583_pos, $P11, rx583_curclass, "$!pos"
    goto alt585_end1696
  alt585_end1696:
    rx583_cur."!cursor_pass"(rx583_pos, "scoped", 'backtrack'=>1)
    .return (rx583_cur)
  rx583_restart1688:
    repr_get_attr_obj rx583_cstack, rx583_cur, rx583_curclass, "$!cstack"
  rx583_fail1689:
    unless rx583_bstack, rx583_done1687
    pop $I19, rx583_bstack
    if_null rx583_cstack, rx583_cstack_done1692
    unless rx583_cstack, rx583_cstack_done1692
    dec $I19
    set $P11, rx583_cstack[$I19]
  rx583_cstack_done1692:
    pop rx583_rep, rx583_bstack
    pop rx583_pos, rx583_bstack
    pop $I19, rx583_bstack
    lt rx583_pos, -1, rx583_done1687
    lt rx583_pos, 0, rx583_fail1689
    eq $I19, 0, rx583_fail1689
    nqp_islist $I20, rx583_cstack
    unless $I20, rx583_jump1690
    elements $I18, rx583_bstack
    le $I18, 0, rx583_cut1691
    dec $I18
    set $I18, rx583_bstack[$I18]
  rx583_cut1691:
    assign rx583_cstack, $I18
  rx583_jump1690:
    jump $I19
  rx583_done1687:
    rx583_cur."!cursor_fail"()
    .return (rx583_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_113_1346968539.359_caps" :subid("cuid_memo_159_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["declarator"], $P5002
    box $P5003, 0
    set $P5001["multi_declarator"], $P5003
    box $P5004, 0
    set $P5001["package_declarator"], $P5004
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_113_1346968539.359_alt_nfa__21_1346968541.428" :subid("cuid_memo_160_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 0
    push $P5004, $P5005
    box $P5006, 0
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    box $P5008, 0
    push $P5004, $P5008
    box $P5009, 0
    push $P5004, $P5009
    box $P5010, 0
    push $P5004, $P5010
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5011, 'ResizablePMCArray'
    new $P5012, 'ResizablePMCArray'
    push $P5011, $P5012
    new $P5013, 'ResizablePMCArray'
    box $P5014, 0
    push $P5013, $P5014
    box $P5015, 0
    push $P5013, $P5015
    box $P5016, 0
    push $P5013, $P5016
    box $P5017, 0
    push $P5013, $P5017
    box $P5018, 0
    push $P5013, $P5018
    box $P5019, 0
    push $P5013, $P5019
    push $P5011, $P5013
    push $P5001, $P5011
    new $P5020, 'ResizablePMCArray'
    new $P5021, 'ResizablePMCArray'
    push $P5020, $P5021
    new $P5022, 'ResizablePMCArray'
    box $P5023, 0
    push $P5022, $P5023
    box $P5024, 0
    push $P5022, $P5024
    box $P5025, 0
    push $P5022, $P5025
    box $P5026, 0
    push $P5022, $P5026
    box $P5027, 0
    push $P5022, $P5027
    box $P5028, 0
    push $P5022, $P5028
    push $P5020, $P5022
    push $P5001, $P5020
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "typename" :subid("cuid_114_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 993
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_388_1346968539.359' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx595_tgt
    .local int rx595_pos
    .local int rx595_off
    .local int rx595_eos
    .local int rx595_rep
    .local pmc rx595_cur
    .local pmc rx595_curclass
    .local pmc rx595_bstack
    .local pmc rx595_cstack
    (rx595_cur, rx595_tgt, rx595_pos, rx595_curclass, rx595_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx595_cur
    length rx595_eos, rx595_tgt
    eq $I19, 1, rx595_restart1711
    gt rx595_pos, rx595_eos, rx595_fail1712
    repr_get_attr_int $I11, self, rx595_curclass, "$!from"
    ne $I11, -1, rxscan596_done1718
    goto rxscan596_scan1717
  rxscan596_loop1716:
    inc rx595_pos
    gt rx595_pos, rx595_eos, rx595_fail1712
    repr_bind_attr_int rx595_cur, rx595_curclass, "$!from", rx595_pos
  rxscan596_scan1717:
    nqp_rxmark rx595_bstack, rxscan596_loop1716, rx595_pos, 0
  rxscan596_done1718:
    repr_bind_attr_int rx595_cur, rx595_curclass, "$!pos", rx595_pos
    $P11 = rx595_cur."name"()
    repr_get_attr_int $I11, $P11, rx595_curclass, "$!pos"
    lt $I11, 0, rx595_fail1712
    nqp_rxmark rx595_bstack, rxsubrule597_pass1719, -1, 0
  rxsubrule597_pass1719:
    rx595_cstack = rx595_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx595_pos, $P11, rx595_curclass, "$!pos"
    repr_bind_attr_int rx595_cur, rx595_curclass, "$!pos", rx595_pos
    store_lex unicode:"$\x{a2}", rx595_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_388_1346968539.359' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx595_fail1712
    rx595_cur."!cursor_pass"(rx595_pos, "typename", 'backtrack'=>1)
    .return (rx595_cur)
  rx595_restart1711:
    repr_get_attr_obj rx595_cstack, rx595_cur, rx595_curclass, "$!cstack"
  rx595_fail1712:
    unless rx595_bstack, rx595_done1710
    pop $I19, rx595_bstack
    if_null rx595_cstack, rx595_cstack_done1715
    unless rx595_cstack, rx595_cstack_done1715
    dec $I19
    set $P11, rx595_cstack[$I19]
  rx595_cstack_done1715:
    pop rx595_rep, rx595_bstack
    pop rx595_pos, rx595_bstack
    pop $I19, rx595_bstack
    lt rx595_pos, -1, rx595_done1710
    lt rx595_pos, 0, rx595_fail1712
    eq $I19, 0, rx595_fail1712
    nqp_islist $I20, rx595_cstack
    unless $I20, rx595_jump1713
    elements $I18, rx595_bstack
    le $I18, 0, rx595_cut1714
    dec $I18
    set $I18, rx595_bstack[$I18]
  rx595_cut1714:
    assign rx595_cstack, $I18
  rx595_jump1713:
    jump $I19
  rx595_done1710:
    rx595_cur."!cursor_fail"()
    .return (rx595_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_114_1346968539.359_caps" :subid("cuid_memo_161_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["name"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_114_1346968539.359_nfa" :subid("cuid_memo_162_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "name"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_388_1346968539.359") :anon :lex :outer("cuid_114_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 995

    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback1720
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback1721
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5002, $P5005
  fallback1721:
    unless_null $P5002, vivi_5981722
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_5981722:
    set $P5001, $P5002
  fallback1720:
    find_lex $P5007, "$/"
    find_lex $P5010, "$/"
    unless_null $P5010, fallback1723
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5010, $P5011
  fallback1723:
    set $P5009, $P5010["name"]
    unless_null $P5009, fallback1724
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5009, $P5012
  fallback1724:
    set $P5008, $P5009["identifier"]
    unless_null $P5008, fallback1725
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5008, $P5013
  fallback1725:
    $P5014 = $P5001."known_sym"($P5007, $P5008)
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "declarator" :subid("cuid_115_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 998
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx599_tgt
    .local int rx599_pos
    .local int rx599_off
    .local int rx599_eos
    .local int rx599_rep
    .local pmc rx599_cur
    .local pmc rx599_curclass
    .local pmc rx599_bstack
    .local pmc rx599_cstack
    (rx599_cur, rx599_tgt, rx599_pos, rx599_curclass, rx599_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx599_cur
    length rx599_eos, rx599_tgt
    eq $I19, 1, rx599_restart1728
    gt rx599_pos, rx599_eos, rx599_fail1729
    repr_get_attr_int $I11, self, rx599_curclass, "$!from"
    ne $I11, -1, rxscan600_done1735
    goto rxscan600_scan1734
  rxscan600_loop1733:
    inc rx599_pos
    gt rx599_pos, rx599_eos, rx599_fail1729
    repr_bind_attr_int rx599_cur, rx599_curclass, "$!from", rx599_pos
  rxscan600_scan1734:
    nqp_rxmark rx599_bstack, rxscan600_loop1733, rx599_pos, 0
  rxscan600_done1735:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt601_01737
    nqp_push_label $P11, alt601_11739
    nqp_rxmark rx599_bstack, alt601_end1736, -1, 0
    rx599_cur."!alt"(rx599_pos, "alt_nfa__22_1346968541.444", $P11)
    goto rx599_fail1729
  alt601_01737:
    repr_bind_attr_int rx599_cur, rx599_curclass, "$!pos", rx599_pos
    $P11 = rx599_cur."variable_declarator"()
    repr_get_attr_int $I11, $P11, rx599_curclass, "$!pos"
    lt $I11, 0, rx599_fail1729
    nqp_rxmark rx599_bstack, rxsubrule602_pass1738, -1, 0
  rxsubrule602_pass1738:
    rx599_cstack = rx599_cur."!cursor_capture"($P11, "variable_declarator")
    repr_get_attr_int rx599_pos, $P11, rx599_curclass, "$!pos"
    goto alt601_end1736
  alt601_11739:
    repr_bind_attr_int rx599_cur, rx599_curclass, "$!pos", rx599_pos
    $P11 = rx599_cur."routine_declarator"()
    repr_get_attr_int $I11, $P11, rx599_curclass, "$!pos"
    lt $I11, 0, rx599_fail1729
    nqp_rxmark rx599_bstack, rxsubrule603_pass1740, -1, 0
  rxsubrule603_pass1740:
    rx599_cstack = rx599_cur."!cursor_capture"($P11, "routine_declarator")
    repr_get_attr_int rx599_pos, $P11, rx599_curclass, "$!pos"
    goto alt601_end1736
  alt601_end1736:
    rx599_cur."!cursor_pass"(rx599_pos, "declarator", 'backtrack'=>1)
    .return (rx599_cur)
  rx599_restart1728:
    repr_get_attr_obj rx599_cstack, rx599_cur, rx599_curclass, "$!cstack"
  rx599_fail1729:
    unless rx599_bstack, rx599_done1727
    pop $I19, rx599_bstack
    if_null rx599_cstack, rx599_cstack_done1732
    unless rx599_cstack, rx599_cstack_done1732
    dec $I19
    set $P11, rx599_cstack[$I19]
  rx599_cstack_done1732:
    pop rx599_rep, rx599_bstack
    pop rx599_pos, rx599_bstack
    pop $I19, rx599_bstack
    lt rx599_pos, -1, rx599_done1727
    lt rx599_pos, 0, rx599_fail1729
    eq $I19, 0, rx599_fail1729
    nqp_islist $I20, rx599_cstack
    unless $I20, rx599_jump1730
    elements $I18, rx599_bstack
    le $I18, 0, rx599_cut1731
    dec $I18
    set $I18, rx599_bstack[$I18]
  rx599_cut1731:
    assign rx599_cstack, $I18
  rx599_jump1730:
    jump $I19
  rx599_done1727:
    rx599_cur."!cursor_fail"()
    .return (rx599_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_115_1346968539.359_caps" :subid("cuid_memo_163_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["variable_declarator"], $P5002
    box $P5003, 0
    set $P5001["routine_declarator"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_115_1346968539.359_nfa" :subid("cuid_memo_164_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "variable_declarator"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    box $P5007, 8
    push $P5003, $P5007
    box $P5008, "routine_declarator"
    push $P5003, $P5008
    box $P5009, 0
    push $P5003, $P5009
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_115_1346968539.359_alt_nfa__22_1346968541.444" :subid("cuid_memo_165_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 8
    push $P5004, $P5005
    box $P5006, "variable_declarator"
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 8
    push $P5010, $P5011
    box $P5012, "routine_declarator"
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    push $P5008, $P5010
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "variable_declarator" :subid("cuid_116_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1003
    .param pmc _lex_param_0 
    .const 'Sub' $P5006 = 'cuid_389_1346968539.359' 
    capture_lex $P5006 
    .lex "$*IN_DECL", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx604_tgt
    .local int rx604_pos
    .local int rx604_off
    .local int rx604_eos
    .local int rx604_rep
    .local pmc rx604_cur
    .local pmc rx604_curclass
    .local pmc rx604_bstack
    .local pmc rx604_cstack
    (rx604_cur, rx604_tgt, rx604_pos, rx604_curclass, rx604_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx604_cur
    length rx604_eos, rx604_tgt
    eq $I19, 1, rx604_restart1743
    gt rx604_pos, rx604_eos, rx604_fail1744
    repr_get_attr_int $I11, self, rx604_curclass, "$!from"
    ne $I11, -1, rxscan605_done1750
    goto rxscan605_scan1749
  rxscan605_loop1748:
    inc rx604_pos
    gt rx604_pos, rx604_eos, rx604_fail1744
    repr_bind_attr_int rx604_cur, rx604_curclass, "$!from", rx604_pos
  rxscan605_scan1749:
    nqp_rxmark rx604_bstack, rxscan605_loop1748, rx604_pos, 0
  rxscan605_done1750:
    repr_bind_attr_int rx604_cur, rx604_curclass, "$!pos", rx604_pos
    $P11 = rx604_cur."ws"()
    repr_get_attr_int $I11, $P11, rx604_curclass, "$!pos"
    lt $I11, 0, rx604_fail1744
    repr_get_attr_int rx604_pos, $P11, rx604_curclass, "$!pos"
    nqp_rxmark rx604_bstack, rxquantr607_done1753, rx604_pos, 0
  rxquantr607_loop1752:
    repr_bind_attr_int rx604_cur, rx604_curclass, "$!pos", rx604_pos
    $P11 = rx604_cur."typename"()
    repr_get_attr_int $I11, $P11, rx604_curclass, "$!pos"
    lt $I11, 0, rx604_fail1744
    goto rxsubrule608_pass1754
  rxsubrule608_back1755:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx604_curclass, "$!pos"
    lt $I11, 0, rx604_fail1744
  rxsubrule608_pass1754:
    rx604_cstack = rx604_cur."!cursor_capture"($P11, "typename")
    set_addr $I11, rxsubrule608_back1755
    push rx604_bstack, $I11
    push rx604_bstack, 0
    push rx604_bstack, rx604_pos
    elements $I11, rx604_cstack
    push rx604_bstack, $I11
    repr_get_attr_int rx604_pos, $P11, rx604_curclass, "$!pos"
    nqp_rxpeek $I19, rx604_bstack, rxquantr607_done1753
    inc $I19
    inc $I19
    set rx604_rep, rx604_bstack[$I19]
    nqp_rxcommit rx604_bstack, rxquantr607_done1753
    inc rx604_rep
  rxquantr607_done1753:
    repr_bind_attr_int rx604_cur, rx604_curclass, "$!pos", rx604_pos
    $P11 = rx604_cur."ws"()
    repr_get_attr_int $I11, $P11, rx604_curclass, "$!pos"
    lt $I11, 0, rx604_fail1744
    repr_get_attr_int rx604_pos, $P11, rx604_curclass, "$!pos"
    repr_bind_attr_int rx604_cur, rx604_curclass, "$!pos", rx604_pos
    store_lex unicode:"$\x{a2}", rx604_cur
    box $P5002, "variable"
    set $P101, $P5002
    repr_bind_attr_int rx604_cur, rx604_curclass, "$!pos", rx604_pos
    $P11 = rx604_cur."ws"()
    repr_get_attr_int $I11, $P11, rx604_curclass, "$!pos"
    lt $I11, 0, rx604_fail1744
    repr_get_attr_int rx604_pos, $P11, rx604_curclass, "$!pos"
    repr_bind_attr_int rx604_cur, rx604_curclass, "$!pos", rx604_pos
    $P11 = rx604_cur."variable"()
    repr_get_attr_int $I11, $P11, rx604_curclass, "$!pos"
    lt $I11, 0, rx604_fail1744
    nqp_rxmark rx604_bstack, rxsubrule611_pass1758, -1, 0
  rxsubrule611_pass1758:
    rx604_cstack = rx604_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx604_pos, $P11, rx604_curclass, "$!pos"
    repr_bind_attr_int rx604_cur, rx604_curclass, "$!pos", rx604_pos
    $P11 = rx604_cur."ws"()
    repr_get_attr_int $I11, $P11, rx604_curclass, "$!pos"
    lt $I11, 0, rx604_fail1744
    repr_get_attr_int rx604_pos, $P11, rx604_curclass, "$!pos"
    repr_bind_attr_int rx604_cur, rx604_curclass, "$!pos", rx604_pos
    store_lex unicode:"$\x{a2}", rx604_cur
    $P5003 = $P102."MATCH"()
    set $P103, $P5003
    .const 'Sub' $P5004 = 'cuid_389_1346968539.359' 
    capture_lex $P5004
    $P5005 = $P5004()
    repr_bind_attr_int rx604_cur, rx604_curclass, "$!pos", rx604_pos
    $P11 = rx604_cur."ws"()
    repr_get_attr_int $I11, $P11, rx604_curclass, "$!pos"
    lt $I11, 0, rx604_fail1744
    repr_get_attr_int rx604_pos, $P11, rx604_curclass, "$!pos"
    nqp_rxmark rx604_bstack, rxquantr614_done1762, rx604_pos, 0
  rxquantr614_loop1761:
    repr_bind_attr_int rx604_cur, rx604_curclass, "$!pos", rx604_pos
    $P11 = rx604_cur."trait"()
    repr_get_attr_int $I11, $P11, rx604_curclass, "$!pos"
    lt $I11, 0, rx604_fail1744
    goto rxsubrule615_pass1763
  rxsubrule615_back1764:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx604_curclass, "$!pos"
    lt $I11, 0, rx604_fail1744
  rxsubrule615_pass1763:
    rx604_cstack = rx604_cur."!cursor_capture"($P11, "trait")
    set_addr $I11, rxsubrule615_back1764
    push rx604_bstack, $I11
    push rx604_bstack, 0
    push rx604_bstack, rx604_pos
    elements $I11, rx604_cstack
    push rx604_bstack, $I11
    repr_get_attr_int rx604_pos, $P11, rx604_curclass, "$!pos"
    nqp_rxpeek $I19, rx604_bstack, rxquantr614_done1762
    inc $I19
    inc $I19
    set rx604_rep, rx604_bstack[$I19]
    nqp_rxcommit rx604_bstack, rxquantr614_done1762
    inc rx604_rep
    nqp_rxmark rx604_bstack, rxquantr614_done1762, rx604_pos, rx604_rep
    goto rxquantr614_loop1761
  rxquantr614_done1762:
    repr_bind_attr_int rx604_cur, rx604_curclass, "$!pos", rx604_pos
    $P11 = rx604_cur."ws"()
    repr_get_attr_int $I11, $P11, rx604_curclass, "$!pos"
    lt $I11, 0, rx604_fail1744
    repr_get_attr_int rx604_pos, $P11, rx604_curclass, "$!pos"
    rx604_cur."!cursor_pass"(rx604_pos, "variable_declarator", 'backtrack'=>1)
    .return (rx604_cur)
  rx604_restart1743:
    repr_get_attr_obj rx604_cstack, rx604_cur, rx604_curclass, "$!cstack"
  rx604_fail1744:
    unless rx604_bstack, rx604_done1742
    pop $I19, rx604_bstack
    if_null rx604_cstack, rx604_cstack_done1747
    unless rx604_cstack, rx604_cstack_done1747
    dec $I19
    set $P11, rx604_cstack[$I19]
  rx604_cstack_done1747:
    pop rx604_rep, rx604_bstack
    pop rx604_pos, rx604_bstack
    pop $I19, rx604_bstack
    lt rx604_pos, -1, rx604_done1742
    lt rx604_pos, 0, rx604_fail1744
    eq $I19, 0, rx604_fail1744
    nqp_islist $I20, rx604_cstack
    unless $I20, rx604_jump1745
    elements $I18, rx604_bstack
    le $I18, 0, rx604_cut1746
    dec $I18
    set $I18, rx604_bstack[$I18]
  rx604_cut1746:
    assign rx604_cstack, $I18
  rx604_jump1745:
    jump $I19
  rx604_done1742:
    rx604_cur."!cursor_fail"()
    .return (rx604_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_116_1346968539.359_caps" :subid("cuid_memo_166_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 2
    set $P5001["typename"], $P5002
    box $P5003, 0
    set $P5001["variable"], $P5003
    box $P5004, 2
    set $P5001["trait"], $P5004
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_389_1346968539.359") :anon :lex :outer("cuid_116_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1007

    box $P5001, 0
    store_dynamic_lex "$*IN_DECL", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator" :subid("cuid_117_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1011
    .param pmc self 
    $P5001 = self."!protoregex"("routine_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<sub>" :subid("cuid_118_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1012
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx617_tgt
    .local int rx617_pos
    .local int rx617_off
    .local int rx617_eos
    .local int rx617_rep
    .local pmc rx617_cur
    .local pmc rx617_curclass
    .local pmc rx617_bstack
    .local pmc rx617_cstack
    (rx617_cur, rx617_tgt, rx617_pos, rx617_curclass, rx617_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx617_cur
    length rx617_eos, rx617_tgt
    eq $I19, 1, rx617_restart1768
    gt rx617_pos, rx617_eos, rx617_fail1769
    repr_get_attr_int $I11, self, rx617_curclass, "$!from"
    ne $I11, -1, rxscan618_done1775
    goto rxscan618_scan1774
  rxscan618_loop1773:
    inc rx617_pos
    gt rx617_pos, rx617_eos, rx617_fail1769
    repr_bind_attr_int rx617_cur, rx617_curclass, "$!from", rx617_pos
  rxscan618_scan1774:
    nqp_rxmark rx617_bstack, rxscan618_loop1773, rx617_pos, 0
  rxscan618_done1775:
    nqp_rxmark rx617_bstack, rxcap619_fail1777, rx617_pos, 0
    add $I11, rx617_pos, 3
    gt $I11, rx617_eos, rx617_fail1769
    substr $S10, rx617_tgt, rx617_pos, 3
    ne $S10, ucs4:"sub", rx617_fail1769
    add rx617_pos, 3
    nqp_rxpeek $I19, rx617_bstack, rxcap619_fail1777
    inc $I19
    set $I11, rx617_bstack[$I19]
    $P11 = rx617_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx617_pos)
    rx617_cstack = rx617_cur."!cursor_capture"($P11, "sym")
    goto rxcap619_done1776
  rxcap619_fail1777:
    goto rx617_fail1769
  rxcap619_done1776:
    repr_bind_attr_int rx617_cur, rx617_curclass, "$!pos", rx617_pos
    $P11 = rx617_cur."routine_def"()
    repr_get_attr_int $I11, $P11, rx617_curclass, "$!pos"
    lt $I11, 0, rx617_fail1769
    nqp_rxmark rx617_bstack, rxsubrule620_pass1778, -1, 0
  rxsubrule620_pass1778:
    rx617_cstack = rx617_cur."!cursor_capture"($P11, "routine_def")
    repr_get_attr_int rx617_pos, $P11, rx617_curclass, "$!pos"
    rx617_cur."!cursor_pass"(rx617_pos, "routine_declarator:sym<sub>", 'backtrack'=>1)
    .return (rx617_cur)
  rx617_restart1768:
    repr_get_attr_obj rx617_cstack, rx617_cur, rx617_curclass, "$!cstack"
  rx617_fail1769:
    unless rx617_bstack, rx617_done1767
    pop $I19, rx617_bstack
    if_null rx617_cstack, rx617_cstack_done1772
    unless rx617_cstack, rx617_cstack_done1772
    dec $I19
    set $P11, rx617_cstack[$I19]
  rx617_cstack_done1772:
    pop rx617_rep, rx617_bstack
    pop rx617_pos, rx617_bstack
    pop $I19, rx617_bstack
    lt rx617_pos, -1, rx617_done1767
    lt rx617_pos, 0, rx617_fail1769
    eq $I19, 0, rx617_fail1769
    nqp_islist $I20, rx617_cstack
    unless $I20, rx617_jump1770
    elements $I18, rx617_bstack
    le $I18, 0, rx617_cut1771
    dec $I18
    set $I18, rx617_bstack[$I18]
  rx617_cut1771:
    assign rx617_cstack, $I18
  rx617_jump1770:
    jump $I19
  rx617_done1767:
    rx617_cur."!cursor_fail"()
    .return (rx617_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_118_1346968539.359_caps" :subid("cuid_memo_167_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["routine_def"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_118_1346968539.359_nfa" :subid("cuid_memo_168_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 115
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 117
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 98
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "routine_def"
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<method>" :subid("cuid_119_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1013
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx621_tgt
    .local int rx621_pos
    .local int rx621_off
    .local int rx621_eos
    .local int rx621_rep
    .local pmc rx621_cur
    .local pmc rx621_curclass
    .local pmc rx621_bstack
    .local pmc rx621_cstack
    (rx621_cur, rx621_tgt, rx621_pos, rx621_curclass, rx621_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx621_cur
    length rx621_eos, rx621_tgt
    eq $I19, 1, rx621_restart1781
    gt rx621_pos, rx621_eos, rx621_fail1782
    repr_get_attr_int $I11, self, rx621_curclass, "$!from"
    ne $I11, -1, rxscan622_done1788
    goto rxscan622_scan1787
  rxscan622_loop1786:
    inc rx621_pos
    gt rx621_pos, rx621_eos, rx621_fail1782
    repr_bind_attr_int rx621_cur, rx621_curclass, "$!from", rx621_pos
  rxscan622_scan1787:
    nqp_rxmark rx621_bstack, rxscan622_loop1786, rx621_pos, 0
  rxscan622_done1788:
    nqp_rxmark rx621_bstack, rxcap623_fail1790, rx621_pos, 0
    add $I11, rx621_pos, 6
    gt $I11, rx621_eos, rx621_fail1782
    substr $S10, rx621_tgt, rx621_pos, 6
    ne $S10, ucs4:"method", rx621_fail1782
    add rx621_pos, 6
    nqp_rxpeek $I19, rx621_bstack, rxcap623_fail1790
    inc $I19
    set $I11, rx621_bstack[$I19]
    $P11 = rx621_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx621_pos)
    rx621_cstack = rx621_cur."!cursor_capture"($P11, "sym")
    goto rxcap623_done1789
  rxcap623_fail1790:
    goto rx621_fail1782
  rxcap623_done1789:
    repr_bind_attr_int rx621_cur, rx621_curclass, "$!pos", rx621_pos
    $P11 = rx621_cur."method_def"()
    repr_get_attr_int $I11, $P11, rx621_curclass, "$!pos"
    lt $I11, 0, rx621_fail1782
    nqp_rxmark rx621_bstack, rxsubrule624_pass1791, -1, 0
  rxsubrule624_pass1791:
    rx621_cstack = rx621_cur."!cursor_capture"($P11, "method_def")
    repr_get_attr_int rx621_pos, $P11, rx621_curclass, "$!pos"
    rx621_cur."!cursor_pass"(rx621_pos, "routine_declarator:sym<method>", 'backtrack'=>1)
    .return (rx621_cur)
  rx621_restart1781:
    repr_get_attr_obj rx621_cstack, rx621_cur, rx621_curclass, "$!cstack"
  rx621_fail1782:
    unless rx621_bstack, rx621_done1780
    pop $I19, rx621_bstack
    if_null rx621_cstack, rx621_cstack_done1785
    unless rx621_cstack, rx621_cstack_done1785
    dec $I19
    set $P11, rx621_cstack[$I19]
  rx621_cstack_done1785:
    pop rx621_rep, rx621_bstack
    pop rx621_pos, rx621_bstack
    pop $I19, rx621_bstack
    lt rx621_pos, -1, rx621_done1780
    lt rx621_pos, 0, rx621_fail1782
    eq $I19, 0, rx621_fail1782
    nqp_islist $I20, rx621_cstack
    unless $I20, rx621_jump1783
    elements $I18, rx621_bstack
    le $I18, 0, rx621_cut1784
    dec $I18
    set $I18, rx621_bstack[$I18]
  rx621_cut1784:
    assign rx621_cstack, $I18
  rx621_jump1783:
    jump $I19
  rx621_done1780:
    rx621_cur."!cursor_fail"()
    .return (rx621_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_119_1346968539.359_caps" :subid("cuid_memo_169_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["method_def"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_119_1346968539.359_nfa" :subid("cuid_memo_170_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 109
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 101
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 116
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 104
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 111
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 100
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "method_def"
    push $P5027, $P5029
    box $P5030, 0
    push $P5027, $P5030
    push $P5001, $P5027
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "routine_def" :subid("cuid_120_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1015
    .param pmc _lex_param_0 
    .lex "$*RETURN_USED", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx625_tgt
    .local int rx625_pos
    .local int rx625_off
    .local int rx625_eos
    .local int rx625_rep
    .local pmc rx625_cur
    .local pmc rx625_curclass
    .local pmc rx625_bstack
    .local pmc rx625_cstack
    (rx625_cur, rx625_tgt, rx625_pos, rx625_curclass, rx625_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx625_cur
    length rx625_eos, rx625_tgt
    eq $I19, 1, rx625_restart1794
    gt rx625_pos, rx625_eos, rx625_fail1795
    repr_get_attr_int $I11, self, rx625_curclass, "$!from"
    ne $I11, -1, rxscan626_done1801
    goto rxscan626_scan1800
  rxscan626_loop1799:
    inc rx625_pos
    gt rx625_pos, rx625_eos, rx625_fail1795
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!from", rx625_pos
  rxscan626_scan1800:
    nqp_rxmark rx625_bstack, rxscan626_loop1799, rx625_pos, 0
  rxscan626_done1801:
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1795
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    store_lex unicode:"$\x{a2}", rx625_cur
    box $P5002, 0
    set $P101, $P5002
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1795
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    nqp_rxmark rx625_bstack, rxquantr629_done1805, rx625_pos, 0
  rxquantr629_loop1804:
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1795
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    nqp_rxmark rx625_bstack, rxcap631_fail1808, rx625_pos, 0
    nqp_rxmark rx625_bstack, rxquantr632_done1810, rx625_pos, 0
  rxquantr632_loop1809:
    add $I11, rx625_pos, 1
    gt $I11, rx625_eos, rx625_fail1795
    substr $S10, rx625_tgt, rx625_pos, 1
    ne $S10, ucs4:"&", rx625_fail1795
    add rx625_pos, 1
    nqp_rxpeek $I19, rx625_bstack, rxquantr632_done1810
    inc $I19
    inc $I19
    set rx625_rep, rx625_bstack[$I19]
    nqp_rxcommit rx625_bstack, rxquantr632_done1810
    inc rx625_rep
  rxquantr632_done1810:
    nqp_rxpeek $I19, rx625_bstack, rxcap631_fail1808
    inc $I19
    set $I11, rx625_bstack[$I19]
    $P11 = rx625_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx625_pos)
    rx625_cstack = rx625_cur."!cursor_capture"($P11, "sigil")
    goto rxcap631_done1807
  rxcap631_fail1808:
    goto rx625_fail1795
  rxcap631_done1807:
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1795
    nqp_rxmark rx625_bstack, rxsubrule633_pass1811, -1, 0
  rxsubrule633_pass1811:
    rx625_cstack = rx625_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1795
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    nqp_rxpeek $I19, rx625_bstack, rxquantr629_done1805
    inc $I19
    inc $I19
    set rx625_rep, rx625_bstack[$I19]
    nqp_rxcommit rx625_bstack, rxquantr629_done1805
    inc rx625_rep
  rxquantr629_done1805:
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1795
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1795
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1795
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
  alt638_01817:
    nqp_rxmark rx625_bstack, alt638_11823, rx625_pos, 0
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1795
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    add $I11, rx625_pos, 1
    gt $I11, rx625_eos, rx625_fail1795
    substr $S10, rx625_tgt, rx625_pos, 1
    ne $S10, ucs4:"(", rx625_fail1795
    add rx625_pos, 1
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1795
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."signature"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1795
    nqp_rxmark rx625_bstack, rxsubrule641_pass1820, -1, 0
  rxsubrule641_pass1820:
    rx625_cstack = rx625_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1795
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    add $I11, rx625_pos, 1
    gt $I11, rx625_eos, rx625_fail1795
    substr $S10, rx625_tgt, rx625_pos, 1
    ne $S10, ucs4:")", rx625_fail1795
    add rx625_pos, 1
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1795
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    goto alt638_end1816
  alt638_11823:
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1795
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."panic"("Routine declaration requires a signature")
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1795
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1795
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
  alt638_end1816:
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1795
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    nqp_rxmark rx625_bstack, rxquantr648_done1829, rx625_pos, 0
  rxquantr648_loop1828:
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."trait"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1795
    goto rxsubrule649_pass1830
  rxsubrule649_back1831:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1795
  rxsubrule649_pass1830:
    rx625_cstack = rx625_cur."!cursor_capture"($P11, "trait")
    set_addr $I11, rxsubrule649_back1831
    push rx625_bstack, $I11
    push rx625_bstack, 0
    push rx625_bstack, rx625_pos
    elements $I11, rx625_cstack
    push rx625_bstack, $I11
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    nqp_rxpeek $I19, rx625_bstack, rxquantr648_done1829
    inc $I19
    inc $I19
    set rx625_rep, rx625_bstack[$I19]
    nqp_rxcommit rx625_bstack, rxquantr648_done1829
    inc rx625_rep
    nqp_rxmark rx625_bstack, rxquantr648_done1829, rx625_pos, rx625_rep
    goto rxquantr648_loop1828
  rxquantr648_done1829:
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1795
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt651_01834
    nqp_push_label $P11, alt651_11838
    nqp_rxmark rx625_bstack, alt651_end1833, -1, 0
    rx625_cur."!alt"(rx625_pos, "alt_nfa__23_1346968541.602", $P11)
    goto rx625_fail1795
  alt651_01834:
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1795
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."onlystar"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1795
    nqp_rxmark rx625_bstack, rxsubrule653_pass1836, -1, 0
  rxsubrule653_pass1836:
    rx625_cstack = rx625_cur."!cursor_capture"($P11, "onlystar")
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1795
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    goto alt651_end1833
  alt651_11838:
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1795
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1795
    nqp_rxmark rx625_bstack, rxsubrule656_pass1840, -1, 0
  rxsubrule656_pass1840:
    rx625_cstack = rx625_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1795
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    goto alt651_end1833
  alt651_end1833:
    nqp_rxcommit rx625_bstack, alt651_end1833
    repr_bind_attr_int rx625_cur, rx625_curclass, "$!pos", rx625_pos
    $P11 = rx625_cur."ws"()
    repr_get_attr_int $I11, $P11, rx625_curclass, "$!pos"
    lt $I11, 0, rx625_fail1795
    repr_get_attr_int rx625_pos, $P11, rx625_curclass, "$!pos"
    rx625_cur."!cursor_pass"(rx625_pos, "routine_def", 'backtrack'=>1)
    .return (rx625_cur)
  rx625_restart1794:
    repr_get_attr_obj rx625_cstack, rx625_cur, rx625_curclass, "$!cstack"
  rx625_fail1795:
    unless rx625_bstack, rx625_done1793
    pop $I19, rx625_bstack
    if_null rx625_cstack, rx625_cstack_done1798
    unless rx625_cstack, rx625_cstack_done1798
    dec $I19
    set $P11, rx625_cstack[$I19]
  rx625_cstack_done1798:
    pop rx625_rep, rx625_bstack
    pop rx625_pos, rx625_bstack
    pop $I19, rx625_bstack
    lt rx625_pos, -1, rx625_done1793
    lt rx625_pos, 0, rx625_fail1795
    eq $I19, 0, rx625_fail1795
    nqp_islist $I20, rx625_cstack
    unless $I20, rx625_jump1796
    elements $I18, rx625_bstack
    le $I18, 0, rx625_cut1797
    dec $I18
    set $I18, rx625_bstack[$I18]
  rx625_cut1797:
    assign rx625_cstack, $I18
  rx625_jump1796:
    jump $I19
  rx625_done1793:
    rx625_cur."!cursor_fail"()
    .return (rx625_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_120_1346968539.359_caps" :subid("cuid_memo_171_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 2
    set $P5001["sigil"], $P5002
    box $P5003, 2
    set $P5001["deflongname"], $P5003
    box $P5004, 0
    set $P5001["signature"], $P5004
    box $P5005, 2
    set $P5001["trait"], $P5005
    box $P5006, 0
    set $P5001["onlystar"], $P5006
    box $P5007, 0
    set $P5001["blockoid"], $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_120_1346968539.359_alt_nfa__23_1346968541.602" :subid("cuid_memo_172_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 0
    push $P5004, $P5005
    box $P5006, 0
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    box $P5008, 0
    push $P5004, $P5008
    box $P5009, 0
    push $P5004, $P5009
    box $P5010, 0
    push $P5004, $P5010
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5011, 'ResizablePMCArray'
    new $P5012, 'ResizablePMCArray'
    push $P5011, $P5012
    new $P5013, 'ResizablePMCArray'
    box $P5014, 0
    push $P5013, $P5014
    box $P5015, 0
    push $P5013, $P5015
    box $P5016, 0
    push $P5013, $P5016
    box $P5017, 0
    push $P5013, $P5017
    box $P5018, 0
    push $P5013, $P5018
    box $P5019, 0
    push $P5013, $P5019
    push $P5011, $P5013
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "method_def" :subid("cuid_121_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1028
    .param pmc _lex_param_0 
    .const 'Sub' $P5008 = 'cuid_390_1346968539.359' 
    capture_lex $P5008 
    .lex "$*RETURN_USED", $P101 
    .lex "$*INVOCANT_OK", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx659_tgt
    .local int rx659_pos
    .local int rx659_off
    .local int rx659_eos
    .local int rx659_rep
    .local pmc rx659_cur
    .local pmc rx659_curclass
    .local pmc rx659_bstack
    .local pmc rx659_cstack
    (rx659_cur, rx659_tgt, rx659_pos, rx659_curclass, rx659_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx659_cur
    length rx659_eos, rx659_tgt
    eq $I19, 1, rx659_restart1845
    gt rx659_pos, rx659_eos, rx659_fail1846
    repr_get_attr_int $I11, self, rx659_curclass, "$!from"
    ne $I11, -1, rxscan660_done1852
    goto rxscan660_scan1851
  rxscan660_loop1850:
    inc rx659_pos
    gt rx659_pos, rx659_eos, rx659_fail1846
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!from", rx659_pos
  rxscan660_scan1851:
    nqp_rxmark rx659_bstack, rxscan660_loop1850, rx659_pos, 0
  rxscan660_done1852:
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1846
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    store_lex unicode:"$\x{a2}", rx659_cur
    box $P5003, 0
    set $P101, $P5003
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1846
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    store_lex unicode:"$\x{a2}", rx659_cur
    box $P5004, 1
    set $P102, $P5004
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1846
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    nqp_rxmark rx659_bstack, rxcap664_fail1857, rx659_pos, 0
    nqp_rxmark rx659_bstack, rxquantr665_done1859, rx659_pos, 0
  rxquantr665_loop1858:
    add $I11, rx659_pos, 1
    gt $I11, rx659_eos, rx659_fail1846
    substr $S10, rx659_tgt, rx659_pos, 1
    ne $S10, ucs4:"!", rx659_fail1846
    add rx659_pos, 1
    nqp_rxpeek $I19, rx659_bstack, rxquantr665_done1859
    inc $I19
    inc $I19
    set rx659_rep, rx659_bstack[$I19]
    nqp_rxcommit rx659_bstack, rxquantr665_done1859
    inc rx659_rep
  rxquantr665_done1859:
    nqp_rxpeek $I19, rx659_bstack, rxcap664_fail1857
    inc $I19
    set $I11, rx659_bstack[$I19]
    $P11 = rx659_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx659_pos)
    rx659_cstack = rx659_cur."!cursor_capture"($P11, "private")
    goto rxcap664_done1856
  rxcap664_fail1857:
    goto rx659_fail1846
  rxcap664_done1856:
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1846
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    nqp_rxmark rx659_bstack, rxquantr667_done1862, rx659_pos, 0
  rxquantr667_loop1861:
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1846
    goto rxsubrule668_pass1863
  rxsubrule668_back1864:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1846
  rxsubrule668_pass1863:
    rx659_cstack = rx659_cur."!cursor_capture"($P11, "deflongname")
    set_addr $I11, rxsubrule668_back1864
    push rx659_bstack, $I11
    push rx659_bstack, 0
    push rx659_bstack, rx659_pos
    elements $I11, rx659_cstack
    push rx659_bstack, $I11
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    nqp_rxpeek $I19, rx659_bstack, rxquantr667_done1862
    inc $I19
    inc $I19
    set rx659_rep, rx659_bstack[$I19]
    nqp_rxcommit rx659_bstack, rxquantr667_done1862
    inc rx659_rep
  rxquantr667_done1862:
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1846
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1846
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1846
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
  alt672_01869:
    nqp_rxmark rx659_bstack, alt672_11875, rx659_pos, 0
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1846
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    add $I11, rx659_pos, 1
    gt $I11, rx659_eos, rx659_fail1846
    substr $S10, rx659_tgt, rx659_pos, 1
    ne $S10, ucs4:"(", rx659_fail1846
    add rx659_pos, 1
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1846
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."signature"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1846
    nqp_rxmark rx659_bstack, rxsubrule675_pass1872, -1, 0
  rxsubrule675_pass1872:
    rx659_cstack = rx659_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1846
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    add $I11, rx659_pos, 1
    gt $I11, rx659_eos, rx659_fail1846
    substr $S10, rx659_tgt, rx659_pos, 1
    ne $S10, ucs4:")", rx659_fail1846
    add rx659_pos, 1
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1846
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    goto alt672_end1868
  alt672_11875:
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1846
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."panic"("Routine declaration requires a signature")
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1846
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1846
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
  alt672_end1868:
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1846
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    store_lex unicode:"$\x{a2}", rx659_cur
    $P5005 = $P103."MATCH"()
    set $P104, $P5005
    .const 'Sub' $P5006 = 'cuid_390_1346968539.359' 
    capture_lex $P5006
    $P5007 = $P5006()
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1846
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    nqp_rxmark rx659_bstack, rxquantr683_done1882, rx659_pos, 0
  rxquantr683_loop1881:
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."trait"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1846
    goto rxsubrule684_pass1883
  rxsubrule684_back1884:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1846
  rxsubrule684_pass1883:
    rx659_cstack = rx659_cur."!cursor_capture"($P11, "trait")
    set_addr $I11, rxsubrule684_back1884
    push rx659_bstack, $I11
    push rx659_bstack, 0
    push rx659_bstack, rx659_pos
    elements $I11, rx659_cstack
    push rx659_bstack, $I11
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    nqp_rxpeek $I19, rx659_bstack, rxquantr683_done1882
    inc $I19
    inc $I19
    set rx659_rep, rx659_bstack[$I19]
    nqp_rxcommit rx659_bstack, rxquantr683_done1882
    inc rx659_rep
    nqp_rxmark rx659_bstack, rxquantr683_done1882, rx659_pos, rx659_rep
    goto rxquantr683_loop1881
  rxquantr683_done1882:
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1846
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt686_01887
    nqp_push_label $P11, alt686_11891
    nqp_rxmark rx659_bstack, alt686_end1886, -1, 0
    rx659_cur."!alt"(rx659_pos, "alt_nfa__24_1346968541.633", $P11)
    goto rx659_fail1846
  alt686_01887:
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1846
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."onlystar"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1846
    nqp_rxmark rx659_bstack, rxsubrule688_pass1889, -1, 0
  rxsubrule688_pass1889:
    rx659_cstack = rx659_cur."!cursor_capture"($P11, "onlystar")
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1846
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    goto alt686_end1886
  alt686_11891:
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1846
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1846
    nqp_rxmark rx659_bstack, rxsubrule691_pass1893, -1, 0
  rxsubrule691_pass1893:
    rx659_cstack = rx659_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1846
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    goto alt686_end1886
  alt686_end1886:
    nqp_rxcommit rx659_bstack, alt686_end1886
    repr_bind_attr_int rx659_cur, rx659_curclass, "$!pos", rx659_pos
    $P11 = rx659_cur."ws"()
    repr_get_attr_int $I11, $P11, rx659_curclass, "$!pos"
    lt $I11, 0, rx659_fail1846
    repr_get_attr_int rx659_pos, $P11, rx659_curclass, "$!pos"
    rx659_cur."!cursor_pass"(rx659_pos, "method_def", 'backtrack'=>1)
    .return (rx659_cur)
  rx659_restart1845:
    repr_get_attr_obj rx659_cstack, rx659_cur, rx659_curclass, "$!cstack"
  rx659_fail1846:
    unless rx659_bstack, rx659_done1844
    pop $I19, rx659_bstack
    if_null rx659_cstack, rx659_cstack_done1849
    unless rx659_cstack, rx659_cstack_done1849
    dec $I19
    set $P11, rx659_cstack[$I19]
  rx659_cstack_done1849:
    pop rx659_rep, rx659_bstack
    pop rx659_pos, rx659_bstack
    pop $I19, rx659_bstack
    lt rx659_pos, -1, rx659_done1844
    lt rx659_pos, 0, rx659_fail1846
    eq $I19, 0, rx659_fail1846
    nqp_islist $I20, rx659_cstack
    unless $I20, rx659_jump1847
    elements $I18, rx659_bstack
    le $I18, 0, rx659_cut1848
    dec $I18
    set $I18, rx659_bstack[$I18]
  rx659_cut1848:
    assign rx659_cstack, $I18
  rx659_jump1847:
    jump $I19
  rx659_done1844:
    rx659_cur."!cursor_fail"()
    .return (rx659_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_121_1346968539.359_caps" :subid("cuid_memo_173_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["private"], $P5002
    box $P5003, 2
    set $P5001["deflongname"], $P5003
    box $P5004, 0
    set $P5001["signature"], $P5004
    box $P5005, 2
    set $P5001["trait"], $P5005
    box $P5006, 0
    set $P5001["onlystar"], $P5006
    box $P5007, 0
    set $P5001["blockoid"], $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_121_1346968539.359_alt_nfa__24_1346968541.633" :subid("cuid_memo_174_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 0
    push $P5004, $P5005
    box $P5006, 0
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    box $P5008, 0
    push $P5004, $P5008
    box $P5009, 0
    push $P5004, $P5009
    box $P5010, 0
    push $P5004, $P5010
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5011, 'ResizablePMCArray'
    new $P5012, 'ResizablePMCArray'
    push $P5011, $P5012
    new $P5013, 'ResizablePMCArray'
    box $P5014, 0
    push $P5013, $P5014
    box $P5015, 0
    push $P5013, $P5015
    box $P5016, 0
    push $P5013, $P5016
    box $P5017, 0
    push $P5013, $P5017
    box $P5018, 0
    push $P5013, $P5018
    box $P5019, 0
    push $P5013, $P5019
    push $P5011, $P5013
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_390_1346968539.359") :anon :lex :outer("cuid_121_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1036

    box $P5001, 0
    store_dynamic_lex "$*INVOCANT_OK", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "onlystar" :subid("cuid_122_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1044
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_391_1346968539.359' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx694_tgt
    .local int rx694_pos
    .local int rx694_off
    .local int rx694_eos
    .local int rx694_rep
    .local pmc rx694_cur
    .local pmc rx694_curclass
    .local pmc rx694_bstack
    .local pmc rx694_cstack
    (rx694_cur, rx694_tgt, rx694_pos, rx694_curclass, rx694_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx694_cur
    length rx694_eos, rx694_tgt
    eq $I19, 1, rx694_restart1898
    gt rx694_pos, rx694_eos, rx694_fail1899
    repr_get_attr_int $I11, self, rx694_curclass, "$!from"
    ne $I11, -1, rxscan695_done1905
    goto rxscan695_scan1904
  rxscan695_loop1903:
    inc rx694_pos
    gt rx694_pos, rx694_eos, rx694_fail1899
    repr_bind_attr_int rx694_cur, rx694_curclass, "$!from", rx694_pos
  rxscan695_scan1904:
    nqp_rxmark rx694_bstack, rxscan695_loop1903, rx694_pos, 0
  rxscan695_done1905:
    repr_bind_attr_int rx694_cur, rx694_curclass, "$!pos", rx694_pos
    store_lex unicode:"$\x{a2}", rx694_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_391_1346968539.359' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx694_fail1899
    add $I11, rx694_pos, 1
    gt $I11, rx694_eos, rx694_fail1899
    substr $S10, rx694_tgt, rx694_pos, 1
    ne $S10, ucs4:"{", rx694_fail1899
    add rx694_pos, 1
    repr_bind_attr_int rx694_cur, rx694_curclass, "$!pos", rx694_pos
    $P11 = rx694_cur."ws"()
    repr_get_attr_int $I11, $P11, rx694_curclass, "$!pos"
    lt $I11, 0, rx694_fail1899
    repr_get_attr_int rx694_pos, $P11, rx694_curclass, "$!pos"
    add $I11, rx694_pos, 1
    gt $I11, rx694_eos, rx694_fail1899
    substr $S10, rx694_tgt, rx694_pos, 1
    ne $S10, ucs4:"*", rx694_fail1899
    add rx694_pos, 1
    repr_bind_attr_int rx694_cur, rx694_curclass, "$!pos", rx694_pos
    $P11 = rx694_cur."ws"()
    repr_get_attr_int $I11, $P11, rx694_curclass, "$!pos"
    lt $I11, 0, rx694_fail1899
    repr_get_attr_int rx694_pos, $P11, rx694_curclass, "$!pos"
    add $I11, rx694_pos, 1
    gt $I11, rx694_eos, rx694_fail1899
    substr $S10, rx694_tgt, rx694_pos, 1
    ne $S10, ucs4:"}", rx694_fail1899
    add rx694_pos, 1
    repr_bind_attr_int rx694_cur, rx694_curclass, "$!pos", rx694_pos
    $P11 = rx694_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx694_curclass, "$!pos"
    lt $I11, 0, rx694_fail1899
    repr_bind_attr_int rx694_cur, rx694_curclass, "$!pos", rx694_pos
    $P11 = rx694_cur."finishpad"()
    repr_get_attr_int $I11, $P11, rx694_curclass, "$!pos"
    lt $I11, 0, rx694_fail1899
    repr_get_attr_int rx694_pos, $P11, rx694_curclass, "$!pos"
    rx694_cur."!cursor_pass"(rx694_pos, "onlystar", 'backtrack'=>1)
    .return (rx694_cur)
  rx694_restart1898:
    repr_get_attr_obj rx694_cstack, rx694_cur, rx694_curclass, "$!cstack"
  rx694_fail1899:
    unless rx694_bstack, rx694_done1897
    pop $I19, rx694_bstack
    if_null rx694_cstack, rx694_cstack_done1902
    unless rx694_cstack, rx694_cstack_done1902
    dec $I19
    set $P11, rx694_cstack[$I19]
  rx694_cstack_done1902:
    pop rx694_rep, rx694_bstack
    pop rx694_pos, rx694_bstack
    pop $I19, rx694_bstack
    lt rx694_pos, -1, rx694_done1897
    lt rx694_pos, 0, rx694_fail1899
    eq $I19, 0, rx694_fail1899
    nqp_islist $I20, rx694_cstack
    unless $I20, rx694_jump1900
    elements $I18, rx694_bstack
    le $I18, 0, rx694_cut1901
    dec $I18
    set $I18, rx694_bstack[$I18]
  rx694_cut1901:
    assign rx694_cstack, $I18
  rx694_jump1900:
    jump $I19
  rx694_done1897:
    rx694_cur."!cursor_fail"()
    .return (rx694_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_122_1346968539.359_caps" :subid("cuid_memo_175_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_122_1346968539.359_nfa" :subid("cuid_memo_176_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 123
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "ws"
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 42
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 8
    push $P5019, $P5020
    box $P5021, "ws"
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 125
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "ENDSTMT"
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 0
    push $P5031, $P5032
    box $P5033, 0
    push $P5031, $P5033
    box $P5034, 0
    push $P5031, $P5034
    push $P5001, $P5031
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_391_1346968539.359") :anon :lex :outer("cuid_122_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1045

    find_dynamic_lex $P5001, "$*MULTINESS"
    unless_null $P5001, fallback1906
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["$MULTINESS"]
    unless_null $P5002, fallback1907
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5002, $P5005
  fallback1907:
    unless_null $P5002, vivi_6961908
    die "Contextual $*MULTINESS not found"
    box $P5006, "Contextual $*MULTINESS not found"
    set $P5002, $P5006
  vivi_6961908:
    set $P5001, $P5002
  fallback1906:
    set $S5001, $P5001
    iseq $I5001, $S5001, "proto"
    .return ($I5001) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator" :subid("cuid_123_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1051
    .param pmc self 
    $P5001 = self."!protoregex"("multi_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<multi>" :subid("cuid_124_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1052
    .param pmc _lex_param_0 
    .lex "$*MULTINESS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx700_tgt
    .local int rx700_pos
    .local int rx700_off
    .local int rx700_eos
    .local int rx700_rep
    .local pmc rx700_cur
    .local pmc rx700_curclass
    .local pmc rx700_bstack
    .local pmc rx700_cstack
    (rx700_cur, rx700_tgt, rx700_pos, rx700_curclass, rx700_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx700_cur
    length rx700_eos, rx700_tgt
    eq $I19, 1, rx700_restart1914
    gt rx700_pos, rx700_eos, rx700_fail1915
    repr_get_attr_int $I11, self, rx700_curclass, "$!from"
    ne $I11, -1, rxscan701_done1921
    goto rxscan701_scan1920
  rxscan701_loop1919:
    inc rx700_pos
    gt rx700_pos, rx700_eos, rx700_fail1915
    repr_bind_attr_int rx700_cur, rx700_curclass, "$!from", rx700_pos
  rxscan701_scan1920:
    nqp_rxmark rx700_bstack, rxscan701_loop1919, rx700_pos, 0
  rxscan701_done1921:
    repr_bind_attr_int rx700_cur, rx700_curclass, "$!pos", rx700_pos
    store_lex unicode:"$\x{a2}", rx700_cur
    box $P5002, "multi"
    set $P101, $P5002
    nqp_rxmark rx700_bstack, rxcap702_fail1923, rx700_pos, 0
    add $I11, rx700_pos, 5
    gt $I11, rx700_eos, rx700_fail1915
    substr $S10, rx700_tgt, rx700_pos, 5
    ne $S10, ucs4:"multi", rx700_fail1915
    add rx700_pos, 5
    nqp_rxpeek $I19, rx700_bstack, rxcap702_fail1923
    inc $I19
    set $I11, rx700_bstack[$I19]
    $P11 = rx700_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx700_pos)
    rx700_cstack = rx700_cur."!cursor_capture"($P11, "sym")
    goto rxcap702_done1922
  rxcap702_fail1923:
    goto rx700_fail1915
  rxcap702_done1922:
    repr_bind_attr_int rx700_cur, rx700_curclass, "$!pos", rx700_pos
    $P11 = rx700_cur."ws"()
    repr_get_attr_int $I11, $P11, rx700_curclass, "$!pos"
    lt $I11, 0, rx700_fail1915
    repr_get_attr_int rx700_pos, $P11, rx700_curclass, "$!pos"
  alt704_01926:
    nqp_rxmark rx700_bstack, alt704_11928, rx700_pos, 0
    repr_bind_attr_int rx700_cur, rx700_curclass, "$!pos", rx700_pos
    $P11 = rx700_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx700_curclass, "$!pos"
    lt $I11, 0, rx700_fail1915
    nqp_rxmark rx700_bstack, rxsubrule705_pass1927, -1, 0
  rxsubrule705_pass1927:
    rx700_cstack = rx700_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx700_pos, $P11, rx700_curclass, "$!pos"
    goto alt704_end1925
  alt704_11928:
    nqp_rxmark rx700_bstack, alt704_21930, rx700_pos, 0
    repr_bind_attr_int rx700_cur, rx700_curclass, "$!pos", rx700_pos
    $P11 = rx700_cur."routine_def"()
    repr_get_attr_int $I11, $P11, rx700_curclass, "$!pos"
    lt $I11, 0, rx700_fail1915
    nqp_rxmark rx700_bstack, rxsubrule706_pass1929, -1, 0
  rxsubrule706_pass1929:
    rx700_cstack = rx700_cur."!cursor_capture"($P11, "routine_def")
    repr_get_attr_int rx700_pos, $P11, rx700_curclass, "$!pos"
    goto alt704_end1925
  alt704_21930:
    repr_bind_attr_int rx700_cur, rx700_curclass, "$!pos", rx700_pos
    $P11 = rx700_cur."panic"("Malformed multi")
    repr_get_attr_int $I11, $P11, rx700_curclass, "$!pos"
    lt $I11, 0, rx700_fail1915
    repr_get_attr_int rx700_pos, $P11, rx700_curclass, "$!pos"
  alt704_end1925:
    rx700_cur."!cursor_pass"(rx700_pos, "multi_declarator:sym<multi>", 'backtrack'=>1)
    .return (rx700_cur)
  rx700_restart1914:
    repr_get_attr_obj rx700_cstack, rx700_cur, rx700_curclass, "$!cstack"
  rx700_fail1915:
    unless rx700_bstack, rx700_done1913
    pop $I19, rx700_bstack
    if_null rx700_cstack, rx700_cstack_done1918
    unless rx700_cstack, rx700_cstack_done1918
    dec $I19
    set $P11, rx700_cstack[$I19]
  rx700_cstack_done1918:
    pop rx700_rep, rx700_bstack
    pop rx700_pos, rx700_bstack
    pop $I19, rx700_bstack
    lt rx700_pos, -1, rx700_done1913
    lt rx700_pos, 0, rx700_fail1915
    eq $I19, 0, rx700_fail1915
    nqp_islist $I20, rx700_cstack
    unless $I20, rx700_jump1916
    elements $I18, rx700_bstack
    le $I18, 0, rx700_cut1917
    dec $I18
    set $I18, rx700_bstack[$I18]
  rx700_cut1917:
    assign rx700_cstack, $I18
  rx700_jump1916:
    jump $I19
  rx700_done1913:
    rx700_cur."!cursor_fail"()
    .return (rx700_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_124_1346968539.359_caps" :subid("cuid_memo_177_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["declarator"], $P5003
    box $P5004, 0
    set $P5001["routine_def"], $P5004
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_124_1346968539.359_nfa" :subid("cuid_memo_178_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 109
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 117
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 108
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 116
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 105
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "ws"
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 0
    push $P5031, $P5032
    box $P5033, 0
    push $P5031, $P5033
    box $P5034, 0
    push $P5031, $P5034
    push $P5001, $P5031
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<proto>" :subid("cuid_125_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1057
    .param pmc _lex_param_0 
    .lex "$*MULTINESS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx708_tgt
    .local int rx708_pos
    .local int rx708_off
    .local int rx708_eos
    .local int rx708_rep
    .local pmc rx708_cur
    .local pmc rx708_curclass
    .local pmc rx708_bstack
    .local pmc rx708_cstack
    (rx708_cur, rx708_tgt, rx708_pos, rx708_curclass, rx708_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx708_cur
    length rx708_eos, rx708_tgt
    eq $I19, 1, rx708_restart1934
    gt rx708_pos, rx708_eos, rx708_fail1935
    repr_get_attr_int $I11, self, rx708_curclass, "$!from"
    ne $I11, -1, rxscan709_done1941
    goto rxscan709_scan1940
  rxscan709_loop1939:
    inc rx708_pos
    gt rx708_pos, rx708_eos, rx708_fail1935
    repr_bind_attr_int rx708_cur, rx708_curclass, "$!from", rx708_pos
  rxscan709_scan1940:
    nqp_rxmark rx708_bstack, rxscan709_loop1939, rx708_pos, 0
  rxscan709_done1941:
    repr_bind_attr_int rx708_cur, rx708_curclass, "$!pos", rx708_pos
    store_lex unicode:"$\x{a2}", rx708_cur
    box $P5002, "proto"
    set $P101, $P5002
    nqp_rxmark rx708_bstack, rxcap710_fail1943, rx708_pos, 0
    add $I11, rx708_pos, 5
    gt $I11, rx708_eos, rx708_fail1935
    substr $S10, rx708_tgt, rx708_pos, 5
    ne $S10, ucs4:"proto", rx708_fail1935
    add rx708_pos, 5
    nqp_rxpeek $I19, rx708_bstack, rxcap710_fail1943
    inc $I19
    set $I11, rx708_bstack[$I19]
    $P11 = rx708_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx708_pos)
    rx708_cstack = rx708_cur."!cursor_capture"($P11, "sym")
    goto rxcap710_done1942
  rxcap710_fail1943:
    goto rx708_fail1935
  rxcap710_done1942:
    repr_bind_attr_int rx708_cur, rx708_curclass, "$!pos", rx708_pos
    $P11 = rx708_cur."ws"()
    repr_get_attr_int $I11, $P11, rx708_curclass, "$!pos"
    lt $I11, 0, rx708_fail1935
    repr_get_attr_int rx708_pos, $P11, rx708_curclass, "$!pos"
  alt712_01946:
    nqp_rxmark rx708_bstack, alt712_11948, rx708_pos, 0
    repr_bind_attr_int rx708_cur, rx708_curclass, "$!pos", rx708_pos
    $P11 = rx708_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx708_curclass, "$!pos"
    lt $I11, 0, rx708_fail1935
    nqp_rxmark rx708_bstack, rxsubrule713_pass1947, -1, 0
  rxsubrule713_pass1947:
    rx708_cstack = rx708_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx708_pos, $P11, rx708_curclass, "$!pos"
    goto alt712_end1945
  alt712_11948:
    nqp_rxmark rx708_bstack, alt712_21950, rx708_pos, 0
    repr_bind_attr_int rx708_cur, rx708_curclass, "$!pos", rx708_pos
    $P11 = rx708_cur."routine_def"()
    repr_get_attr_int $I11, $P11, rx708_curclass, "$!pos"
    lt $I11, 0, rx708_fail1935
    nqp_rxmark rx708_bstack, rxsubrule714_pass1949, -1, 0
  rxsubrule714_pass1949:
    rx708_cstack = rx708_cur."!cursor_capture"($P11, "routine_def")
    repr_get_attr_int rx708_pos, $P11, rx708_curclass, "$!pos"
    goto alt712_end1945
  alt712_21950:
    repr_bind_attr_int rx708_cur, rx708_curclass, "$!pos", rx708_pos
    $P11 = rx708_cur."panic"("Malformed proto")
    repr_get_attr_int $I11, $P11, rx708_curclass, "$!pos"
    lt $I11, 0, rx708_fail1935
    repr_get_attr_int rx708_pos, $P11, rx708_curclass, "$!pos"
  alt712_end1945:
    rx708_cur."!cursor_pass"(rx708_pos, "multi_declarator:sym<proto>", 'backtrack'=>1)
    .return (rx708_cur)
  rx708_restart1934:
    repr_get_attr_obj rx708_cstack, rx708_cur, rx708_curclass, "$!cstack"
  rx708_fail1935:
    unless rx708_bstack, rx708_done1933
    pop $I19, rx708_bstack
    if_null rx708_cstack, rx708_cstack_done1938
    unless rx708_cstack, rx708_cstack_done1938
    dec $I19
    set $P11, rx708_cstack[$I19]
  rx708_cstack_done1938:
    pop rx708_rep, rx708_bstack
    pop rx708_pos, rx708_bstack
    pop $I19, rx708_bstack
    lt rx708_pos, -1, rx708_done1933
    lt rx708_pos, 0, rx708_fail1935
    eq $I19, 0, rx708_fail1935
    nqp_islist $I20, rx708_cstack
    unless $I20, rx708_jump1936
    elements $I18, rx708_bstack
    le $I18, 0, rx708_cut1937
    dec $I18
    set $I18, rx708_bstack[$I18]
  rx708_cut1937:
    assign rx708_cstack, $I18
  rx708_jump1936:
    jump $I19
  rx708_done1933:
    rx708_cur."!cursor_fail"()
    .return (rx708_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_125_1346968539.359_caps" :subid("cuid_memo_179_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["declarator"], $P5003
    box $P5004, 0
    set $P5001["routine_def"], $P5004
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_125_1346968539.359_nfa" :subid("cuid_memo_180_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 112
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 114
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 111
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 116
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 111
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "ws"
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 0
    push $P5031, $P5032
    box $P5033, 0
    push $P5031, $P5033
    box $P5034, 0
    push $P5031, $P5034
    push $P5001, $P5031
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<null>" :subid("cuid_126_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1062
    .param pmc _lex_param_0 
    .lex "$*MULTINESS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx716_tgt
    .local int rx716_pos
    .local int rx716_off
    .local int rx716_eos
    .local int rx716_rep
    .local pmc rx716_cur
    .local pmc rx716_curclass
    .local pmc rx716_bstack
    .local pmc rx716_cstack
    (rx716_cur, rx716_tgt, rx716_pos, rx716_curclass, rx716_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx716_cur
    length rx716_eos, rx716_tgt
    eq $I19, 1, rx716_restart1954
    gt rx716_pos, rx716_eos, rx716_fail1955
    repr_get_attr_int $I11, self, rx716_curclass, "$!from"
    ne $I11, -1, rxscan717_done1961
    goto rxscan717_scan1960
  rxscan717_loop1959:
    inc rx716_pos
    gt rx716_pos, rx716_eos, rx716_fail1955
    repr_bind_attr_int rx716_cur, rx716_curclass, "$!from", rx716_pos
  rxscan717_scan1960:
    nqp_rxmark rx716_bstack, rxscan717_loop1959, rx716_pos, 0
  rxscan717_done1961:
    repr_bind_attr_int rx716_cur, rx716_curclass, "$!pos", rx716_pos
    store_lex unicode:"$\x{a2}", rx716_cur
    box $P5002, ""
    set $P101, $P5002
    repr_bind_attr_int rx716_cur, rx716_curclass, "$!pos", rx716_pos
    $P11 = rx716_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx716_curclass, "$!pos"
    lt $I11, 0, rx716_fail1955
    nqp_rxmark rx716_bstack, rxsubrule718_pass1962, -1, 0
  rxsubrule718_pass1962:
    rx716_cstack = rx716_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx716_pos, $P11, rx716_curclass, "$!pos"
    rx716_cur."!cursor_pass"(rx716_pos, "multi_declarator:sym<null>", 'backtrack'=>1)
    .return (rx716_cur)
  rx716_restart1954:
    repr_get_attr_obj rx716_cstack, rx716_cur, rx716_curclass, "$!cstack"
  rx716_fail1955:
    unless rx716_bstack, rx716_done1953
    pop $I19, rx716_bstack
    if_null rx716_cstack, rx716_cstack_done1958
    unless rx716_cstack, rx716_cstack_done1958
    dec $I19
    set $P11, rx716_cstack[$I19]
  rx716_cstack_done1958:
    pop rx716_rep, rx716_bstack
    pop rx716_pos, rx716_bstack
    pop $I19, rx716_bstack
    lt rx716_pos, -1, rx716_done1953
    lt rx716_pos, 0, rx716_fail1955
    eq $I19, 0, rx716_fail1955
    nqp_islist $I20, rx716_cstack
    unless $I20, rx716_jump1956
    elements $I18, rx716_bstack
    le $I18, 0, rx716_cut1957
    dec $I18
    set $I18, rx716_bstack[$I18]
  rx716_cut1957:
    assign rx716_cstack, $I18
  rx716_jump1956:
    jump $I19
  rx716_done1953:
    rx716_cur."!cursor_fail"()
    .return (rx716_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_126_1346968539.359_caps" :subid("cuid_memo_181_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["declarator"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_126_1346968539.359_nfa" :subid("cuid_memo_182_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "declarator"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "signature" :subid("cuid_128_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1067
    .param pmc _lex_param_0 
    .const 'Sub' $P5005 = 'cuid_392_1346968539.359' 
    capture_lex $P5005 
    .const 'Sub' $P5005 = 'cuid_127_1346968539.359' 
    capture_lex $P5005 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx719_tgt
    .local int rx719_pos
    .local int rx719_off
    .local int rx719_eos
    .local int rx719_rep
    .local pmc rx719_cur
    .local pmc rx719_curclass
    .local pmc rx719_bstack
    .local pmc rx719_cstack
    (rx719_cur, rx719_tgt, rx719_pos, rx719_curclass, rx719_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx719_cur
    length rx719_eos, rx719_tgt
    eq $I19, 1, rx719_restart1965
    gt rx719_pos, rx719_eos, rx719_fail1966
    repr_get_attr_int $I11, self, rx719_curclass, "$!from"
    ne $I11, -1, rxscan720_done1972
    goto rxscan720_scan1971
  rxscan720_loop1970:
    inc rx719_pos
    gt rx719_pos, rx719_eos, rx719_fail1966
    repr_bind_attr_int rx719_cur, rx719_curclass, "$!from", rx719_pos
  rxscan720_scan1971:
    nqp_rxmark rx719_bstack, rxscan720_loop1970, rx719_pos, 0
  rxscan720_done1972:
    nqp_rxmark rx719_bstack, rxquantr721_done1974, rx719_pos, 0
  rxquantr721_loop1973:
    repr_bind_attr_int rx719_cur, rx719_curclass, "$!pos", rx719_pos
    store_lex unicode:"$\x{a2}", rx719_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_392_1346968539.359' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx719_fail1966
    repr_bind_attr_int rx719_cur, rx719_curclass, "$!pos", rx719_pos
    $P11 = rx719_cur."ws"()
    repr_get_attr_int $I11, $P11, rx719_curclass, "$!pos"
    lt $I11, 0, rx719_fail1966
    repr_get_attr_int rx719_pos, $P11, rx719_curclass, "$!pos"
    repr_bind_attr_int rx719_cur, rx719_curclass, "$!pos", rx719_pos
    $P11 = rx719_cur."parameter"()
    repr_get_attr_int $I11, $P11, rx719_curclass, "$!pos"
    lt $I11, 0, rx719_fail1966
    nqp_rxmark rx719_bstack, rxsubrule724_pass1979, -1, 0
  rxsubrule724_pass1979:
    rx719_cstack = rx719_cur."!cursor_capture"($P11, "invocant")
    repr_get_attr_int rx719_pos, $P11, rx719_curclass, "$!pos"
    repr_bind_attr_int rx719_cur, rx719_curclass, "$!pos", rx719_pos
    $P11 = rx719_cur."ws"()
    repr_get_attr_int $I11, $P11, rx719_curclass, "$!pos"
    lt $I11, 0, rx719_fail1966
    repr_get_attr_int rx719_pos, $P11, rx719_curclass, "$!pos"
    add $I11, rx719_pos, 1
    gt $I11, rx719_eos, rx719_fail1966
    substr $S10, rx719_tgt, rx719_pos, 1
    ne $S10, ucs4:":", rx719_fail1966
    add rx719_pos, 1
    nqp_rxpeek $I19, rx719_bstack, rxquantr721_done1974
    inc $I19
    inc $I19
    set rx719_rep, rx719_bstack[$I19]
    nqp_rxcommit rx719_bstack, rxquantr721_done1974
    inc rx719_rep
  rxquantr721_done1974:
    nqp_rxmark rx719_bstack, rxquantr726_done1982, rx719_pos, 0
  rxquantr726_loop1981:
    nqp_rxmark rx719_bstack, rxquantr727_done1984, rx719_pos, 0
  rxquantr727_loop1983:
    repr_bind_attr_int rx719_cur, rx719_curclass, "$!pos", rx719_pos
    $P11 = rx719_cur."ws"()
    repr_get_attr_int $I11, $P11, rx719_curclass, "$!pos"
    lt $I11, 0, rx719_fail1966
    repr_get_attr_int rx719_pos, $P11, rx719_curclass, "$!pos"
    repr_bind_attr_int rx719_cur, rx719_curclass, "$!pos", rx719_pos
    $P11 = rx719_cur."parameter"()
    repr_get_attr_int $I11, $P11, rx719_curclass, "$!pos"
    lt $I11, 0, rx719_fail1966
    nqp_rxmark rx719_bstack, rxsubrule729_pass1986, -1, 0
  rxsubrule729_pass1986:
    rx719_cstack = rx719_cur."!cursor_capture"($P11, "parameter")
    repr_get_attr_int rx719_pos, $P11, rx719_curclass, "$!pos"
    repr_bind_attr_int rx719_cur, rx719_curclass, "$!pos", rx719_pos
    $P11 = rx719_cur."ws"()
    repr_get_attr_int $I11, $P11, rx719_curclass, "$!pos"
    lt $I11, 0, rx719_fail1966
    repr_get_attr_int rx719_pos, $P11, rx719_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt731_01989
    nqp_push_label $P11, alt731_11990
    nqp_rxmark rx719_bstack, alt731_end1988, -1, 0
    rx719_cur."!alt"(rx719_pos, "alt_nfa__26_1346968541.715", $P11)
    goto rx719_fail1966
  alt731_01989:
    add $I11, rx719_pos, 1
    gt $I11, rx719_eos, rx719_fail1966
    substr $S10, rx719_tgt, rx719_pos, 1
    ne $S10, ucs4:",", rx719_fail1966
    add rx719_pos, 1
    goto alt731_end1988
  alt731_11990:
    .const 'Sub' $P5004 = 'cuid_127_1346968539.359' 
    capture_lex $P5004
    repr_bind_attr_int rx719_cur, rx719_curclass, "$!pos", rx719_pos
    $P11 = rx719_cur."before"($P5004)
    repr_get_attr_int $I11, $P11, rx719_curclass, "$!pos"
    lt $I11, 0, rx719_fail1966
    nqp_rxmark rx719_bstack, rxsubrule736_pass2006, -1, 0
  rxsubrule736_pass2006:
    rx719_cstack = rx719_cur."!cursor_capture"($P11, "before")
    repr_get_attr_int rx719_pos, $P11, rx719_curclass, "$!pos"
    goto alt731_end1988
  alt731_end1988:
    nqp_rxcommit rx719_bstack, alt731_end1988
    nqp_rxpeek $I19, rx719_bstack, rxquantr727_done1984
    inc $I19
    inc $I19
    set rx719_rep, rx719_bstack[$I19]
    nqp_rxcommit rx719_bstack, rxquantr727_done1984
    inc rx719_rep
    nqp_rxmark rx719_bstack, rxquantr727_done1984, rx719_pos, rx719_rep
    goto rxquantr727_loop1983
  rxquantr727_done1984:
    nqp_rxpeek $I19, rx719_bstack, rxquantr726_done1982
    inc $I19
    inc $I19
    set rx719_rep, rx719_bstack[$I19]
    nqp_rxcommit rx719_bstack, rxquantr726_done1982
    inc rx719_rep
  rxquantr726_done1982:
    rx719_cur."!cursor_pass"(rx719_pos, "signature", 'backtrack'=>1)
    .return (rx719_cur)
  rx719_restart1965:
    repr_get_attr_obj rx719_cstack, rx719_cur, rx719_curclass, "$!cstack"
  rx719_fail1966:
    unless rx719_bstack, rx719_done1964
    pop $I19, rx719_bstack
    if_null rx719_cstack, rx719_cstack_done1969
    unless rx719_cstack, rx719_cstack_done1969
    dec $I19
    set $P11, rx719_cstack[$I19]
  rx719_cstack_done1969:
    pop rx719_rep, rx719_bstack
    pop rx719_pos, rx719_bstack
    pop $I19, rx719_bstack
    lt rx719_pos, -1, rx719_done1964
    lt rx719_pos, 0, rx719_fail1966
    eq $I19, 0, rx719_fail1966
    nqp_islist $I20, rx719_cstack
    unless $I20, rx719_jump1967
    elements $I18, rx719_bstack
    le $I18, 0, rx719_cut1968
    dec $I18
    set $I18, rx719_bstack[$I18]
  rx719_cut1968:
    assign rx719_cstack, $I18
  rx719_jump1967:
    jump $I19
  rx719_done1964:
    rx719_cur."!cursor_fail"()
    .return (rx719_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_128_1346968539.359_caps" :subid("cuid_memo_183_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 2
    set $P5001["invocant"], $P5002
    box $P5003, 2
    set $P5001["parameter"], $P5003
    box $P5004, 2
    set $P5001["before"], $P5004
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_128_1346968539.359_nfa" :subid("cuid_memo_184_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    box $P5007, 1
    push $P5003, $P5007
    box $P5008, 0
    push $P5003, $P5008
    box $P5009, 6
    push $P5003, $P5009
    push $P5001, $P5003
    new $P5010, 'ResizablePMCArray'
    box $P5011, 8
    push $P5010, $P5011
    box $P5012, "ws"
    push $P5010, $P5012
    box $P5013, 3
    push $P5010, $P5013
    push $P5001, $P5010
    new $P5014, 'ResizablePMCArray'
    box $P5015, 8
    push $P5014, $P5015
    box $P5016, "parameter"
    push $P5014, $P5016
    box $P5017, 4
    push $P5014, $P5017
    push $P5001, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 8
    push $P5018, $P5019
    box $P5020, "ws"
    push $P5018, $P5020
    box $P5021, 5
    push $P5018, $P5021
    push $P5001, $P5018
    new $P5022, 'ResizablePMCArray'
    box $P5023, 2
    push $P5022, $P5023
    box $P5024, 58
    push $P5022, $P5024
    box $P5025, 6
    push $P5022, $P5025
    push $P5001, $P5022
    new $P5026, 'ResizablePMCArray'
    box $P5027, 8
    push $P5026, $P5027
    box $P5028, "ws"
    push $P5026, $P5028
    box $P5029, 7
    push $P5026, $P5029
    box $P5030, 1
    push $P5026, $P5030
    box $P5031, 0
    push $P5026, $P5031
    box $P5032, 0
    push $P5026, $P5032
    box $P5033, 1
    push $P5026, $P5033
    box $P5034, 0
    push $P5026, $P5034
    box $P5035, 0
    push $P5026, $P5035
    push $P5001, $P5026
    new $P5036, 'ResizablePMCArray'
    box $P5037, 8
    push $P5036, $P5037
    box $P5038, "parameter"
    push $P5036, $P5038
    box $P5039, 8
    push $P5036, $P5039
    push $P5001, $P5036
    new $P5040, 'ResizablePMCArray'
    box $P5041, 8
    push $P5040, $P5041
    box $P5042, "ws"
    push $P5040, $P5042
    box $P5043, 9
    push $P5040, $P5043
    push $P5001, $P5040
    new $P5044, 'ResizablePMCArray'
    box $P5045, 2
    push $P5044, $P5045
    box $P5046, 44
    push $P5044, $P5046
    box $P5047, 6
    push $P5044, $P5047
    box $P5048, 4
    push $P5044, $P5048
    box $P5049, 32
    push $P5044, $P5049
    box $P5050, 9
    push $P5044, $P5050
    box $P5051, 1
    push $P5044, $P5051
    box $P5052, 0
    push $P5044, $P5052
    box $P5053, 11
    push $P5044, $P5053
    push $P5001, $P5044
    new $P5054, 'ResizablePMCArray'
    box $P5055, 0
    push $P5054, $P5055
    box $P5056, 0
    push $P5054, $P5056
    box $P5057, 0
    push $P5054, $P5057
    push $P5001, $P5054
    new $P5058, 'ResizablePMCArray'
    box $P5059, 2
    push $P5058, $P5059
    box $P5060, 41
    push $P5058, $P5060
    box $P5061, 10
    push $P5058, $P5061
    box $P5062, 2
    push $P5058, $P5062
    box $P5063, 123
    push $P5058, $P5063
    box $P5064, 10
    push $P5058, $P5064
    push $P5001, $P5058
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_128_1346968539.359_alt_nfa__26_1346968541.715" :subid("cuid_memo_185_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 44
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 4
    push $P5010, $P5011
    box $P5012, 32
    push $P5010, $P5012
    box $P5013, 1
    push $P5010, $P5013
    box $P5014, 1
    push $P5010, $P5014
    box $P5015, 0
    push $P5010, $P5015
    box $P5016, 3
    push $P5010, $P5016
    push $P5008, $P5010
    new $P5017, 'ResizablePMCArray'
    box $P5018, 0
    push $P5017, $P5018
    box $P5019, 0
    push $P5017, $P5019
    box $P5020, 0
    push $P5017, $P5020
    push $P5008, $P5017
    new $P5021, 'ResizablePMCArray'
    box $P5022, 2
    push $P5021, $P5022
    box $P5023, 41
    push $P5021, $P5023
    box $P5024, 2
    push $P5021, $P5024
    box $P5025, 2
    push $P5021, $P5025
    box $P5026, 123
    push $P5021, $P5026
    box $P5027, 2
    push $P5021, $P5027
    push $P5008, $P5021
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_392_1346968539.359") :anon :lex :outer("cuid_128_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1068

    find_dynamic_lex $P5001, "$*INVOCANT_OK"
    unless_null $P5001, fallback1975
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["$INVOCANT_OK"]
    unless_null $P5002, fallback1976
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5002, $P5005
  fallback1976:
    unless_null $P5002, vivi_7221977
    die "Contextual $*INVOCANT_OK not found"
    box $P5006, "Contextual $*INVOCANT_OK not found"
    set $P5002, $P5006
  vivi_7221977:
    set $P5001, $P5002
  fallback1975:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_127_1346968539.359") :anon :lex :outer("cuid_128_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx732_tgt
    .local int rx732_pos
    .local int rx732_off
    .local int rx732_eos
    .local int rx732_rep
    .local pmc rx732_cur
    .local pmc rx732_curclass
    .local pmc rx732_bstack
    .local pmc rx732_cstack
    (rx732_cur, rx732_tgt, rx732_pos, rx732_curclass, rx732_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx732_cur
    length rx732_eos, rx732_tgt
    eq $I19, 1, rx732_restart1993
    gt rx732_pos, rx732_eos, rx732_fail1994
    repr_get_attr_int $I11, self, rx732_curclass, "$!from"
    ne $I11, -1, rxscan733_done2000
    goto rxscan733_scan1999
  rxscan733_loop1998:
    inc rx732_pos
    gt rx732_pos, rx732_eos, rx732_fail1994
    repr_bind_attr_int rx732_cur, rx732_curclass, "$!from", rx732_pos
  rxscan733_scan1999:
    nqp_rxmark rx732_bstack, rxscan733_loop1998, rx732_pos, 0
  rxscan733_done2000:
    nqp_rxmark rx732_bstack, rxquantr734_done2002, rx732_pos, 0
  rxquantr734_loop2001:
    ge rx732_pos, rx732_eos, rx732_fail1994
    is_cclass $I11, .CCLASS_WHITESPACE, rx732_tgt, rx732_pos
    unless $I11, rx732_fail1994
    add rx732_pos, 1
    nqp_rxpeek $I19, rx732_bstack, rxquantr734_done2002
    inc $I19
    inc $I19
    set rx732_rep, rx732_bstack[$I19]
    nqp_rxcommit rx732_bstack, rxquantr734_done2002
    inc rx732_rep
    nqp_rxmark rx732_bstack, rxquantr734_done2002, rx732_pos, rx732_rep
    goto rxquantr734_loop2001
  rxquantr734_done2002:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt735_02004
    nqp_push_label $P11, alt735_12005
    nqp_rxmark rx732_bstack, alt735_end2003, -1, 0
    rx732_cur."!alt"(rx732_pos, "alt_nfa__25_1346968541.708", $P11)
    goto rx732_fail1994
  alt735_02004:
    add $I11, rx732_pos, 1
    gt $I11, rx732_eos, rx732_fail1994
    substr $S10, rx732_tgt, rx732_pos, 1
    ne $S10, ucs4:")", rx732_fail1994
    add rx732_pos, 1
    goto alt735_end2003
  alt735_12005:
    add $I11, rx732_pos, 1
    gt $I11, rx732_eos, rx732_fail1994
    substr $S10, rx732_tgt, rx732_pos, 1
    ne $S10, ucs4:"{", rx732_fail1994
    add rx732_pos, 1
    goto alt735_end2003
  alt735_end2003:
    nqp_rxcommit rx732_bstack, alt735_end2003
    rx732_cur."!cursor_pass"(rx732_pos, 'backtrack'=>1)
    .return (rx732_cur)
  rx732_restart1993:
    repr_get_attr_obj rx732_cstack, rx732_cur, rx732_curclass, "$!cstack"
  rx732_fail1994:
    unless rx732_bstack, rx732_done1992
    pop $I19, rx732_bstack
    if_null rx732_cstack, rx732_cstack_done1997
    unless rx732_cstack, rx732_cstack_done1997
    dec $I19
    set $P11, rx732_cstack[$I19]
  rx732_cstack_done1997:
    pop rx732_rep, rx732_bstack
    pop rx732_pos, rx732_bstack
    pop $I19, rx732_bstack
    lt rx732_pos, -1, rx732_done1992
    lt rx732_pos, 0, rx732_fail1994
    eq $I19, 0, rx732_fail1994
    nqp_islist $I20, rx732_cstack
    unless $I20, rx732_jump1995
    elements $I18, rx732_bstack
    le $I18, 0, rx732_cut1996
    dec $I18
    set $I18, rx732_bstack[$I18]
  rx732_cut1996:
    assign rx732_cstack, $I18
  rx732_jump1995:
    jump $I19
  rx732_done1992:
    rx732_cur."!cursor_fail"()
    .return (rx732_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_127_1346968539.359_caps" :subid("cuid_memo_186_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_127_1346968539.359_nfa" :subid("cuid_memo_187_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 4
    push $P5003, $P5004
    box $P5005, 32
    push $P5003, $P5005
    box $P5006, 1
    push $P5003, $P5006
    box $P5007, 1
    push $P5003, $P5007
    box $P5008, 0
    push $P5003, $P5008
    box $P5009, 2
    push $P5003, $P5009
    push $P5001, $P5003
    new $P5010, 'ResizablePMCArray'
    box $P5011, 2
    push $P5010, $P5011
    box $P5012, 41
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    box $P5014, 2
    push $P5010, $P5014
    box $P5015, 123
    push $P5010, $P5015
    box $P5016, 0
    push $P5010, $P5016
    push $P5001, $P5010
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_127_1346968539.359_alt_nfa__25_1346968541.708" :subid("cuid_memo_188_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 41
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 2
    push $P5010, $P5011
    box $P5012, 123
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    push $P5008, $P5010
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "parameter" :subid("cuid_129_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1072
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx737_tgt
    .local int rx737_pos
    .local int rx737_off
    .local int rx737_eos
    .local int rx737_rep
    .local pmc rx737_cur
    .local pmc rx737_curclass
    .local pmc rx737_bstack
    .local pmc rx737_cstack
    (rx737_cur, rx737_tgt, rx737_pos, rx737_curclass, rx737_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx737_cur
    length rx737_eos, rx737_tgt
    eq $I19, 1, rx737_restart2009
    gt rx737_pos, rx737_eos, rx737_fail2010
    repr_get_attr_int $I11, self, rx737_curclass, "$!from"
    ne $I11, -1, rxscan738_done2016
    goto rxscan738_scan2015
  rxscan738_loop2014:
    inc rx737_pos
    gt rx737_pos, rx737_eos, rx737_fail2010
    repr_bind_attr_int rx737_cur, rx737_curclass, "$!from", rx737_pos
  rxscan738_scan2015:
    nqp_rxmark rx737_bstack, rxscan738_loop2014, rx737_pos, 0
  rxscan738_done2016:
    nqp_rxmark rx737_bstack, rxquantr739_done2018, rx737_pos, 0
  rxquantr739_loop2017:
    repr_bind_attr_int rx737_cur, rx737_curclass, "$!pos", rx737_pos
    $P11 = rx737_cur."typename"()
    repr_get_attr_int $I11, $P11, rx737_curclass, "$!pos"
    lt $I11, 0, rx737_fail2010
    nqp_rxmark rx737_bstack, rxsubrule740_pass2019, -1, 0
  rxsubrule740_pass2019:
    rx737_cstack = rx737_cur."!cursor_capture"($P11, "typename")
    repr_get_attr_int rx737_pos, $P11, rx737_curclass, "$!pos"
    nqp_rxmark rx737_bstack, rxquantr741_done2021, rx737_pos, 0
  rxquantr741_loop2020:
    add $I11, rx737_pos, 1
    gt $I11, rx737_eos, rx737_fail2010
    substr $S10, rx737_tgt, rx737_pos, 1
    ne $S10, ucs4:":", rx737_fail2010
    add rx737_pos, 1
    nqp_rxmark rx737_bstack, rxcap742_fail2023, rx737_pos, 0
    ge rx737_pos, rx737_eos, rx737_fail2010
    substr $S11, rx737_tgt, rx737_pos, 1
    index $I11, ucs4:"_DU", $S11
    lt $I11, 0, rx737_fail2010
    inc rx737_pos
    nqp_rxpeek $I19, rx737_bstack, rxcap742_fail2023
    inc $I19
    set $I11, rx737_bstack[$I19]
    $P11 = rx737_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx737_pos)
    rx737_cstack = rx737_cur."!cursor_capture"($P11, "definedness")
    goto rxcap742_done2022
  rxcap742_fail2023:
    goto rx737_fail2010
  rxcap742_done2022:
    nqp_rxpeek $I19, rx737_bstack, rxquantr741_done2021
    inc $I19
    inc $I19
    set rx737_rep, rx737_bstack[$I19]
    nqp_rxcommit rx737_bstack, rxquantr741_done2021
    inc rx737_rep
  rxquantr741_done2021:
    repr_bind_attr_int rx737_cur, rx737_curclass, "$!pos", rx737_pos
    $P11 = rx737_cur."ws"()
    repr_get_attr_int $I11, $P11, rx737_curclass, "$!pos"
    lt $I11, 0, rx737_fail2010
    repr_get_attr_int rx737_pos, $P11, rx737_curclass, "$!pos"
    nqp_rxpeek $I19, rx737_bstack, rxquantr739_done2018
    inc $I19
    inc $I19
    set rx737_rep, rx737_bstack[$I19]
    nqp_rxcommit rx737_bstack, rxquantr739_done2018
    inc rx737_rep
    nqp_rxmark rx737_bstack, rxquantr739_done2018, rx737_pos, rx737_rep
    goto rxquantr739_loop2017
  rxquantr739_done2018:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt744_02026
    nqp_push_label $P11, alt744_12030
    nqp_rxmark rx737_bstack, alt744_end2025, -1, 0
    rx737_cur."!alt"(rx737_pos, "alt_nfa__27_1346968541.743", $P11)
    goto rx737_fail2010
  alt744_02026:
    nqp_rxmark rx737_bstack, rxcap745_fail2028, rx737_pos, 0
    add $I11, rx737_pos, 1
    gt $I11, rx737_eos, rx737_fail2010
    substr $S10, rx737_tgt, rx737_pos, 1
    ne $S10, ucs4:"*", rx737_fail2010
    add rx737_pos, 1
    nqp_rxpeek $I19, rx737_bstack, rxcap745_fail2028
    inc $I19
    set $I11, rx737_bstack[$I19]
    $P11 = rx737_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx737_pos)
    rx737_cstack = rx737_cur."!cursor_capture"($P11, "quant")
    goto rxcap745_done2027
  rxcap745_fail2028:
    goto rx737_fail2010
  rxcap745_done2027:
    repr_bind_attr_int rx737_cur, rx737_curclass, "$!pos", rx737_pos
    $P11 = rx737_cur."param_var"()
    repr_get_attr_int $I11, $P11, rx737_curclass, "$!pos"
    lt $I11, 0, rx737_fail2010
    nqp_rxmark rx737_bstack, rxsubrule746_pass2029, -1, 0
  rxsubrule746_pass2029:
    rx737_cstack = rx737_cur."!cursor_capture"($P11, "param_var")
    repr_get_attr_int rx737_pos, $P11, rx737_curclass, "$!pos"
    goto alt744_end2025
  alt744_12030:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt747_02032
    nqp_push_label $P11, alt747_12034
    nqp_rxmark rx737_bstack, alt747_end2031, -1, 0
    rx737_cur."!alt"(rx737_pos, "alt_nfa__28_1346968541.744", $P11)
    goto rx737_fail2010
  alt747_02032:
    repr_bind_attr_int rx737_cur, rx737_curclass, "$!pos", rx737_pos
    $P11 = rx737_cur."param_var"()
    repr_get_attr_int $I11, $P11, rx737_curclass, "$!pos"
    lt $I11, 0, rx737_fail2010
    nqp_rxmark rx737_bstack, rxsubrule748_pass2033, -1, 0
  rxsubrule748_pass2033:
    rx737_cstack = rx737_cur."!cursor_capture"($P11, "param_var")
    repr_get_attr_int rx737_pos, $P11, rx737_curclass, "$!pos"
    goto alt747_end2031
  alt747_12034:
    repr_bind_attr_int rx737_cur, rx737_curclass, "$!pos", rx737_pos
    $P11 = rx737_cur."named_param"()
    repr_get_attr_int $I11, $P11, rx737_curclass, "$!pos"
    lt $I11, 0, rx737_fail2010
    nqp_rxmark rx737_bstack, rxsubrule749_pass2035, -1, 0
  rxsubrule749_pass2035:
    rx737_cstack = rx737_cur."!cursor_capture"($P11, "named_param")
    repr_get_attr_int rx737_pos, $P11, rx737_curclass, "$!pos"
    goto alt747_end2031
  alt747_end2031:
    nqp_rxcommit rx737_bstack, alt747_end2031
    nqp_rxmark rx737_bstack, rxcap750_fail2037, rx737_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt751_02039
    nqp_push_label $P11, alt751_12040
    nqp_push_label $P11, alt751_22041
    nqp_rxmark rx737_bstack, alt751_end2038, -1, 0
    rx737_cur."!alt"(rx737_pos, "alt_nfa__29_1346968541.744", $P11)
    goto rx737_fail2010
  alt751_02039:
    add $I11, rx737_pos, 1
    gt $I11, rx737_eos, rx737_fail2010
    substr $S10, rx737_tgt, rx737_pos, 1
    ne $S10, ucs4:"?", rx737_fail2010
    add rx737_pos, 1
    goto alt751_end2038
  alt751_12040:
    add $I11, rx737_pos, 1
    gt $I11, rx737_eos, rx737_fail2010
    substr $S10, rx737_tgt, rx737_pos, 1
    ne $S10, ucs4:"!", rx737_fail2010
    add rx737_pos, 1
    goto alt751_end2038
  alt751_22041:
    goto alt751_end2038
  alt751_end2038:
    nqp_rxcommit rx737_bstack, alt751_end2038
    nqp_rxpeek $I19, rx737_bstack, rxcap750_fail2037
    inc $I19
    set $I11, rx737_bstack[$I19]
    $P11 = rx737_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx737_pos)
    rx737_cstack = rx737_cur."!cursor_capture"($P11, "quant")
    goto rxcap750_done2036
  rxcap750_fail2037:
    goto rx737_fail2010
  rxcap750_done2036:
    goto alt744_end2025
  alt744_end2025:
    nqp_rxcommit rx737_bstack, alt744_end2025
    nqp_rxmark rx737_bstack, rxquantr753_done2044, rx737_pos, 0
  rxquantr753_loop2043:
    repr_bind_attr_int rx737_cur, rx737_curclass, "$!pos", rx737_pos
    $P11 = rx737_cur."default_value"()
    repr_get_attr_int $I11, $P11, rx737_curclass, "$!pos"
    lt $I11, 0, rx737_fail2010
    goto rxsubrule754_pass2045
  rxsubrule754_back2046:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx737_curclass, "$!pos"
    lt $I11, 0, rx737_fail2010
  rxsubrule754_pass2045:
    rx737_cstack = rx737_cur."!cursor_capture"($P11, "default_value")
    set_addr $I11, rxsubrule754_back2046
    push rx737_bstack, $I11
    push rx737_bstack, 0
    push rx737_bstack, rx737_pos
    elements $I11, rx737_cstack
    push rx737_bstack, $I11
    repr_get_attr_int rx737_pos, $P11, rx737_curclass, "$!pos"
    nqp_rxpeek $I19, rx737_bstack, rxquantr753_done2044
    inc $I19
    inc $I19
    set rx737_rep, rx737_bstack[$I19]
    nqp_rxcommit rx737_bstack, rxquantr753_done2044
    inc rx737_rep
  rxquantr753_done2044:
    rx737_cur."!cursor_pass"(rx737_pos, "parameter", 'backtrack'=>1)
    .return (rx737_cur)
  rx737_restart2009:
    repr_get_attr_obj rx737_cstack, rx737_cur, rx737_curclass, "$!cstack"
  rx737_fail2010:
    unless rx737_bstack, rx737_done2008
    pop $I19, rx737_bstack
    if_null rx737_cstack, rx737_cstack_done2013
    unless rx737_cstack, rx737_cstack_done2013
    dec $I19
    set $P11, rx737_cstack[$I19]
  rx737_cstack_done2013:
    pop rx737_rep, rx737_bstack
    pop rx737_pos, rx737_bstack
    pop $I19, rx737_bstack
    lt rx737_pos, -1, rx737_done2008
    lt rx737_pos, 0, rx737_fail2010
    eq $I19, 0, rx737_fail2010
    nqp_islist $I20, rx737_cstack
    unless $I20, rx737_jump2011
    elements $I18, rx737_bstack
    le $I18, 0, rx737_cut2012
    dec $I18
    set $I18, rx737_bstack[$I18]
  rx737_cut2012:
    assign rx737_cstack, $I18
  rx737_jump2011:
    jump $I19
  rx737_done2008:
    rx737_cur."!cursor_fail"()
    .return (rx737_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_129_1346968539.359_caps" :subid("cuid_memo_189_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 2
    set $P5001["typename"], $P5002
    box $P5003, 2
    set $P5001["definedness"], $P5003
    box $P5004, 0
    set $P5001["quant"], $P5004
    box $P5005, 0
    set $P5001["param_var"], $P5005
    box $P5006, 0
    set $P5001["named_param"], $P5006
    box $P5007, 2
    set $P5001["default_value"], $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_129_1346968539.359_nfa" :subid("cuid_memo_190_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "typename"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    box $P5007, 1
    push $P5003, $P5007
    box $P5008, 0
    push $P5003, $P5008
    box $P5009, 5
    push $P5003, $P5009
    push $P5001, $P5003
    new $P5010, 'ResizablePMCArray'
    box $P5011, 2
    push $P5010, $P5011
    box $P5012, 58
    push $P5010, $P5012
    box $P5013, 3
    push $P5010, $P5013
    box $P5014, 1
    push $P5010, $P5014
    box $P5015, 0
    push $P5010, $P5015
    box $P5016, 4
    push $P5010, $P5016
    push $P5001, $P5010
    new $P5017, 'ResizablePMCArray'
    box $P5018, 6
    push $P5017, $P5018
    box $P5019, "_DU"
    push $P5017, $P5019
    box $P5020, 4
    push $P5017, $P5020
    push $P5001, $P5017
    new $P5021, 'ResizablePMCArray'
    box $P5022, 8
    push $P5021, $P5022
    box $P5023, "ws"
    push $P5021, $P5023
    box $P5024, 1
    push $P5021, $P5024
    push $P5001, $P5021
    new $P5025, 'ResizablePMCArray'
    box $P5026, 2
    push $P5025, $P5026
    box $P5027, 42
    push $P5025, $P5027
    box $P5028, 6
    push $P5025, $P5028
    box $P5029, 8
    push $P5025, $P5029
    box $P5030, "param_var"
    push $P5025, $P5030
    box $P5031, 8
    push $P5025, $P5031
    box $P5032, 8
    push $P5025, $P5032
    box $P5033, "named_param"
    push $P5025, $P5033
    box $P5034, 8
    push $P5025, $P5034
    push $P5001, $P5025
    new $P5035, 'ResizablePMCArray'
    box $P5036, 8
    push $P5035, $P5036
    box $P5037, "param_var"
    push $P5035, $P5037
    box $P5038, 7
    push $P5035, $P5038
    push $P5001, $P5035
    new $P5039, 'ResizablePMCArray'
    box $P5040, 8
    push $P5039, $P5040
    box $P5041, "default_value"
    push $P5039, $P5041
    box $P5042, 0
    push $P5039, $P5042
    box $P5043, 1
    push $P5039, $P5043
    box $P5044, 0
    push $P5039, $P5044
    box $P5045, 0
    push $P5039, $P5045
    push $P5001, $P5039
    new $P5046, 'ResizablePMCArray'
    box $P5047, 2
    push $P5046, $P5047
    box $P5048, 63
    push $P5046, $P5048
    box $P5049, 7
    push $P5046, $P5049
    box $P5050, 2
    push $P5046, $P5050
    box $P5051, 33
    push $P5046, $P5051
    box $P5052, 7
    push $P5046, $P5052
    box $P5053, 1
    push $P5046, $P5053
    box $P5054, 0
    push $P5046, $P5054
    box $P5055, 7
    push $P5046, $P5055
    push $P5001, $P5046
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_129_1346968539.359_alt_nfa__28_1346968541.744" :subid("cuid_memo_191_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 8
    push $P5004, $P5005
    box $P5006, "param_var"
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 8
    push $P5010, $P5011
    box $P5012, "named_param"
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    push $P5008, $P5010
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_129_1346968539.359_alt_nfa__29_1346968541.744" :subid("cuid_memo_192_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 63
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 2
    push $P5010, $P5011
    box $P5012, 33
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    push $P5008, $P5010
    push $P5001, $P5008
    new $P5014, 'ResizablePMCArray'
    new $P5015, 'ResizablePMCArray'
    push $P5014, $P5015
    new $P5016, 'ResizablePMCArray'
    box $P5017, 1
    push $P5016, $P5017
    box $P5018, 0
    push $P5016, $P5018
    box $P5019, 0
    push $P5016, $P5019
    push $P5014, $P5016
    push $P5001, $P5014
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_129_1346968539.359_alt_nfa__27_1346968541.743" :subid("cuid_memo_193_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 42
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 8
    push $P5008, $P5009
    box $P5010, "param_var"
    push $P5008, $P5010
    box $P5011, 0
    push $P5008, $P5011
    push $P5002, $P5008
    push $P5001, $P5002
    new $P5012, 'ResizablePMCArray'
    new $P5013, 'ResizablePMCArray'
    push $P5012, $P5013
    new $P5014, 'ResizablePMCArray'
    box $P5015, 8
    push $P5014, $P5015
    box $P5016, "param_var"
    push $P5014, $P5016
    box $P5017, 2
    push $P5014, $P5017
    box $P5018, 8
    push $P5014, $P5018
    box $P5019, "named_param"
    push $P5014, $P5019
    box $P5020, 2
    push $P5014, $P5020
    push $P5012, $P5014
    new $P5021, 'ResizablePMCArray'
    box $P5022, 2
    push $P5021, $P5022
    box $P5023, 63
    push $P5021, $P5023
    box $P5024, 0
    push $P5021, $P5024
    box $P5025, 2
    push $P5021, $P5025
    box $P5026, 33
    push $P5021, $P5026
    box $P5027, 0
    push $P5021, $P5027
    box $P5028, 1
    push $P5021, $P5028
    box $P5029, 0
    push $P5021, $P5029
    box $P5030, 0
    push $P5021, $P5030
    push $P5012, $P5021
    push $P5001, $P5012
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "param_var" :subid("cuid_130_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1081
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx755_tgt
    .local int rx755_pos
    .local int rx755_off
    .local int rx755_eos
    .local int rx755_rep
    .local pmc rx755_cur
    .local pmc rx755_curclass
    .local pmc rx755_bstack
    .local pmc rx755_cstack
    (rx755_cur, rx755_tgt, rx755_pos, rx755_curclass, rx755_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx755_cur
    length rx755_eos, rx755_tgt
    eq $I19, 1, rx755_restart2049
    gt rx755_pos, rx755_eos, rx755_fail2050
    repr_get_attr_int $I11, self, rx755_curclass, "$!from"
    ne $I11, -1, rxscan756_done2056
    goto rxscan756_scan2055
  rxscan756_loop2054:
    inc rx755_pos
    gt rx755_pos, rx755_eos, rx755_fail2050
    repr_bind_attr_int rx755_cur, rx755_curclass, "$!from", rx755_pos
  rxscan756_scan2055:
    nqp_rxmark rx755_bstack, rxscan756_loop2054, rx755_pos, 0
  rxscan756_done2056:
    repr_bind_attr_int rx755_cur, rx755_curclass, "$!pos", rx755_pos
    $P11 = rx755_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx755_curclass, "$!pos"
    lt $I11, 0, rx755_fail2050
    nqp_rxmark rx755_bstack, rxsubrule757_pass2057, -1, 0
  rxsubrule757_pass2057:
    rx755_cstack = rx755_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx755_pos, $P11, rx755_curclass, "$!pos"
    nqp_rxmark rx755_bstack, rxquantr758_done2059, rx755_pos, 0
  rxquantr758_loop2058:
    repr_bind_attr_int rx755_cur, rx755_curclass, "$!pos", rx755_pos
    $P11 = rx755_cur."twigil"()
    repr_get_attr_int $I11, $P11, rx755_curclass, "$!pos"
    lt $I11, 0, rx755_fail2050
    goto rxsubrule759_pass2060
  rxsubrule759_back2061:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx755_curclass, "$!pos"
    lt $I11, 0, rx755_fail2050
  rxsubrule759_pass2060:
    rx755_cstack = rx755_cur."!cursor_capture"($P11, "twigil")
    set_addr $I11, rxsubrule759_back2061
    push rx755_bstack, $I11
    push rx755_bstack, 0
    push rx755_bstack, rx755_pos
    elements $I11, rx755_cstack
    push rx755_bstack, $I11
    repr_get_attr_int rx755_pos, $P11, rx755_curclass, "$!pos"
    nqp_rxpeek $I19, rx755_bstack, rxquantr758_done2059
    inc $I19
    inc $I19
    set rx755_rep, rx755_bstack[$I19]
    nqp_rxcommit rx755_bstack, rxquantr758_done2059
    inc rx755_rep
  rxquantr758_done2059:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt760_02063
    nqp_push_label $P11, alt760_12065
    nqp_rxmark rx755_bstack, alt760_end2062, -1, 0
    rx755_cur."!alt"(rx755_pos, "alt_nfa__30_1346968541.757", $P11)
    goto rx755_fail2050
  alt760_02063:
    repr_bind_attr_int rx755_cur, rx755_curclass, "$!pos", rx755_pos
    $P11 = rx755_cur."ident"()
    repr_get_attr_int $I11, $P11, rx755_curclass, "$!pos"
    lt $I11, 0, rx755_fail2050
    nqp_rxmark rx755_bstack, rxsubrule761_pass2064, -1, 0
  rxsubrule761_pass2064:
    rx755_cstack = rx755_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx755_pos, $P11, rx755_curclass, "$!pos"
    goto alt760_end2062
  alt760_12065:
    nqp_rxmark rx755_bstack, rxcap762_fail2067, rx755_pos, 0
    ge rx755_pos, rx755_eos, rx755_fail2050
    substr $S11, rx755_tgt, rx755_pos, 1
    index $I11, ucs4:"/!", $S11
    lt $I11, 0, rx755_fail2050
    inc rx755_pos
    nqp_rxpeek $I19, rx755_bstack, rxcap762_fail2067
    inc $I19
    set $I11, rx755_bstack[$I19]
    $P11 = rx755_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx755_pos)
    rx755_cstack = rx755_cur."!cursor_capture"($P11, "name")
    goto rxcap762_done2066
  rxcap762_fail2067:
    goto rx755_fail2050
  rxcap762_done2066:
    goto alt760_end2062
  alt760_end2062:
    nqp_rxcommit rx755_bstack, alt760_end2062
    rx755_cur."!cursor_pass"(rx755_pos, "param_var", 'backtrack'=>1)
    .return (rx755_cur)
  rx755_restart2049:
    repr_get_attr_obj rx755_cstack, rx755_cur, rx755_curclass, "$!cstack"
  rx755_fail2050:
    unless rx755_bstack, rx755_done2048
    pop $I19, rx755_bstack
    if_null rx755_cstack, rx755_cstack_done2053
    unless rx755_cstack, rx755_cstack_done2053
    dec $I19
    set $P11, rx755_cstack[$I19]
  rx755_cstack_done2053:
    pop rx755_rep, rx755_bstack
    pop rx755_pos, rx755_bstack
    pop $I19, rx755_bstack
    lt rx755_pos, -1, rx755_done2048
    lt rx755_pos, 0, rx755_fail2050
    eq $I19, 0, rx755_fail2050
    nqp_islist $I20, rx755_cstack
    unless $I20, rx755_jump2051
    elements $I18, rx755_bstack
    le $I18, 0, rx755_cut2052
    dec $I18
    set $I18, rx755_bstack[$I18]
  rx755_cut2052:
    assign rx755_cstack, $I18
  rx755_jump2051:
    jump $I19
  rx755_done2048:
    rx755_cur."!cursor_fail"()
    .return (rx755_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_130_1346968539.359_caps" :subid("cuid_memo_194_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sigil"], $P5002
    box $P5003, 2
    set $P5001["twigil"], $P5003
    box $P5004, 0
    set $P5001["name"], $P5004
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_130_1346968539.359_nfa" :subid("cuid_memo_195_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "sigil"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "twigil"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    box $P5011, 1
    push $P5007, $P5011
    box $P5012, 0
    push $P5007, $P5012
    box $P5013, 3
    push $P5007, $P5013
    push $P5001, $P5007
    new $P5014, 'ResizablePMCArray'
    box $P5015, 8
    push $P5014, $P5015
    box $P5016, "ident"
    push $P5014, $P5016
    box $P5017, 0
    push $P5014, $P5017
    box $P5018, 6
    push $P5014, $P5018
    box $P5019, "/!"
    push $P5014, $P5019
    box $P5020, 0
    push $P5014, $P5020
    push $P5001, $P5014
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_130_1346968539.359_alt_nfa__30_1346968541.757" :subid("cuid_memo_196_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 8
    push $P5004, $P5005
    box $P5006, "ident"
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 6
    push $P5010, $P5011
    box $P5012, "/!"
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    push $P5008, $P5010
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "named_param" :subid("cuid_131_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1086
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx763_tgt
    .local int rx763_pos
    .local int rx763_off
    .local int rx763_eos
    .local int rx763_rep
    .local pmc rx763_cur
    .local pmc rx763_curclass
    .local pmc rx763_bstack
    .local pmc rx763_cstack
    (rx763_cur, rx763_tgt, rx763_pos, rx763_curclass, rx763_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx763_cur
    length rx763_eos, rx763_tgt
    eq $I19, 1, rx763_restart2070
    gt rx763_pos, rx763_eos, rx763_fail2071
    repr_get_attr_int $I11, self, rx763_curclass, "$!from"
    ne $I11, -1, rxscan764_done2077
    goto rxscan764_scan2076
  rxscan764_loop2075:
    inc rx763_pos
    gt rx763_pos, rx763_eos, rx763_fail2071
    repr_bind_attr_int rx763_cur, rx763_curclass, "$!from", rx763_pos
  rxscan764_scan2076:
    nqp_rxmark rx763_bstack, rxscan764_loop2075, rx763_pos, 0
  rxscan764_done2077:
    add $I11, rx763_pos, 1
    gt $I11, rx763_eos, rx763_fail2071
    substr $S10, rx763_tgt, rx763_pos, 1
    ne $S10, ucs4:":", rx763_fail2071
    add rx763_pos, 1
    repr_bind_attr_int rx763_cur, rx763_curclass, "$!pos", rx763_pos
    $P11 = rx763_cur."param_var"()
    repr_get_attr_int $I11, $P11, rx763_curclass, "$!pos"
    lt $I11, 0, rx763_fail2071
    nqp_rxmark rx763_bstack, rxsubrule765_pass2078, -1, 0
  rxsubrule765_pass2078:
    rx763_cstack = rx763_cur."!cursor_capture"($P11, "param_var")
    repr_get_attr_int rx763_pos, $P11, rx763_curclass, "$!pos"
    rx763_cur."!cursor_pass"(rx763_pos, "named_param", 'backtrack'=>1)
    .return (rx763_cur)
  rx763_restart2070:
    repr_get_attr_obj rx763_cstack, rx763_cur, rx763_curclass, "$!cstack"
  rx763_fail2071:
    unless rx763_bstack, rx763_done2069
    pop $I19, rx763_bstack
    if_null rx763_cstack, rx763_cstack_done2074
    unless rx763_cstack, rx763_cstack_done2074
    dec $I19
    set $P11, rx763_cstack[$I19]
  rx763_cstack_done2074:
    pop rx763_rep, rx763_bstack
    pop rx763_pos, rx763_bstack
    pop $I19, rx763_bstack
    lt rx763_pos, -1, rx763_done2069
    lt rx763_pos, 0, rx763_fail2071
    eq $I19, 0, rx763_fail2071
    nqp_islist $I20, rx763_cstack
    unless $I20, rx763_jump2072
    elements $I18, rx763_bstack
    le $I18, 0, rx763_cut2073
    dec $I18
    set $I18, rx763_bstack[$I18]
  rx763_cut2073:
    assign rx763_cstack, $I18
  rx763_jump2072:
    jump $I19
  rx763_done2069:
    rx763_cur."!cursor_fail"()
    .return (rx763_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_131_1346968539.359_caps" :subid("cuid_memo_197_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["param_var"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_131_1346968539.359_nfa" :subid("cuid_memo_198_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 58
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "param_var"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "default_value" :subid("cuid_132_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1090
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx766_tgt
    .local int rx766_pos
    .local int rx766_off
    .local int rx766_eos
    .local int rx766_rep
    .local pmc rx766_cur
    .local pmc rx766_curclass
    .local pmc rx766_bstack
    .local pmc rx766_cstack
    (rx766_cur, rx766_tgt, rx766_pos, rx766_curclass, rx766_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx766_cur
    length rx766_eos, rx766_tgt
    eq $I19, 1, rx766_restart2081
    gt rx766_pos, rx766_eos, rx766_fail2082
    repr_get_attr_int $I11, self, rx766_curclass, "$!from"
    ne $I11, -1, rxscan767_done2088
    goto rxscan767_scan2087
  rxscan767_loop2086:
    inc rx766_pos
    gt rx766_pos, rx766_eos, rx766_fail2082
    repr_bind_attr_int rx766_cur, rx766_curclass, "$!from", rx766_pos
  rxscan767_scan2087:
    nqp_rxmark rx766_bstack, rxscan767_loop2086, rx766_pos, 0
  rxscan767_done2088:
    repr_bind_attr_int rx766_cur, rx766_curclass, "$!pos", rx766_pos
    $P11 = rx766_cur."ws"()
    repr_get_attr_int $I11, $P11, rx766_curclass, "$!pos"
    lt $I11, 0, rx766_fail2082
    repr_get_attr_int rx766_pos, $P11, rx766_curclass, "$!pos"
    add $I11, rx766_pos, 1
    gt $I11, rx766_eos, rx766_fail2082
    substr $S10, rx766_tgt, rx766_pos, 1
    ne $S10, ucs4:"=", rx766_fail2082
    add rx766_pos, 1
    repr_bind_attr_int rx766_cur, rx766_curclass, "$!pos", rx766_pos
    $P11 = rx766_cur."ws"()
    repr_get_attr_int $I11, $P11, rx766_curclass, "$!pos"
    lt $I11, 0, rx766_fail2082
    repr_get_attr_int rx766_pos, $P11, rx766_curclass, "$!pos"
    repr_bind_attr_int rx766_cur, rx766_curclass, "$!pos", rx766_pos
    $P11 = rx766_cur."EXPR"("i=")
    repr_get_attr_int $I11, $P11, rx766_curclass, "$!pos"
    lt $I11, 0, rx766_fail2082
    nqp_rxmark rx766_bstack, rxsubrule770_pass2091, -1, 0
  rxsubrule770_pass2091:
    rx766_cstack = rx766_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx766_pos, $P11, rx766_curclass, "$!pos"
    repr_bind_attr_int rx766_cur, rx766_curclass, "$!pos", rx766_pos
    $P11 = rx766_cur."ws"()
    repr_get_attr_int $I11, $P11, rx766_curclass, "$!pos"
    lt $I11, 0, rx766_fail2082
    repr_get_attr_int rx766_pos, $P11, rx766_curclass, "$!pos"
    rx766_cur."!cursor_pass"(rx766_pos, "default_value", 'backtrack'=>1)
    .return (rx766_cur)
  rx766_restart2081:
    repr_get_attr_obj rx766_cstack, rx766_cur, rx766_curclass, "$!cstack"
  rx766_fail2082:
    unless rx766_bstack, rx766_done2080
    pop $I19, rx766_bstack
    if_null rx766_cstack, rx766_cstack_done2085
    unless rx766_cstack, rx766_cstack_done2085
    dec $I19
    set $P11, rx766_cstack[$I19]
  rx766_cstack_done2085:
    pop rx766_rep, rx766_bstack
    pop rx766_pos, rx766_bstack
    pop $I19, rx766_bstack
    lt rx766_pos, -1, rx766_done2080
    lt rx766_pos, 0, rx766_fail2082
    eq $I19, 0, rx766_fail2082
    nqp_islist $I20, rx766_cstack
    unless $I20, rx766_jump2083
    elements $I18, rx766_bstack
    le $I18, 0, rx766_cut2084
    dec $I18
    set $I18, rx766_bstack[$I18]
  rx766_cut2084:
    assign rx766_cstack, $I18
  rx766_jump2083:
    jump $I19
  rx766_done2080:
    rx766_cur."!cursor_fail"()
    .return (rx766_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_132_1346968539.359_caps" :subid("cuid_memo_199_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["EXPR"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "trait" :subid("cuid_133_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1092
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx772_tgt
    .local int rx772_pos
    .local int rx772_off
    .local int rx772_eos
    .local int rx772_rep
    .local pmc rx772_cur
    .local pmc rx772_curclass
    .local pmc rx772_bstack
    .local pmc rx772_cstack
    (rx772_cur, rx772_tgt, rx772_pos, rx772_curclass, rx772_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx772_cur
    length rx772_eos, rx772_tgt
    eq $I19, 1, rx772_restart2095
    gt rx772_pos, rx772_eos, rx772_fail2096
    repr_get_attr_int $I11, self, rx772_curclass, "$!from"
    ne $I11, -1, rxscan773_done2102
    goto rxscan773_scan2101
  rxscan773_loop2100:
    inc rx772_pos
    gt rx772_pos, rx772_eos, rx772_fail2096
    repr_bind_attr_int rx772_cur, rx772_curclass, "$!from", rx772_pos
  rxscan773_scan2101:
    nqp_rxmark rx772_bstack, rxscan773_loop2100, rx772_pos, 0
  rxscan773_done2102:
    repr_bind_attr_int rx772_cur, rx772_curclass, "$!pos", rx772_pos
    $P11 = rx772_cur."ws"()
    repr_get_attr_int $I11, $P11, rx772_curclass, "$!pos"
    lt $I11, 0, rx772_fail2096
    repr_get_attr_int rx772_pos, $P11, rx772_curclass, "$!pos"
    repr_bind_attr_int rx772_cur, rx772_curclass, "$!pos", rx772_pos
    $P11 = rx772_cur."trait_mod"()
    repr_get_attr_int $I11, $P11, rx772_curclass, "$!pos"
    lt $I11, 0, rx772_fail2096
    nqp_rxmark rx772_bstack, rxsubrule775_pass2104, -1, 0
  rxsubrule775_pass2104:
    rx772_cstack = rx772_cur."!cursor_capture"($P11, "trait_mod")
    repr_get_attr_int rx772_pos, $P11, rx772_curclass, "$!pos"
    repr_bind_attr_int rx772_cur, rx772_curclass, "$!pos", rx772_pos
    $P11 = rx772_cur."ws"()
    repr_get_attr_int $I11, $P11, rx772_curclass, "$!pos"
    lt $I11, 0, rx772_fail2096
    repr_get_attr_int rx772_pos, $P11, rx772_curclass, "$!pos"
    rx772_cur."!cursor_pass"(rx772_pos, "trait", 'backtrack'=>1)
    .return (rx772_cur)
  rx772_restart2095:
    repr_get_attr_obj rx772_cstack, rx772_cur, rx772_curclass, "$!cstack"
  rx772_fail2096:
    unless rx772_bstack, rx772_done2094
    pop $I19, rx772_bstack
    if_null rx772_cstack, rx772_cstack_done2099
    unless rx772_cstack, rx772_cstack_done2099
    dec $I19
    set $P11, rx772_cstack[$I19]
  rx772_cstack_done2099:
    pop rx772_rep, rx772_bstack
    pop rx772_pos, rx772_bstack
    pop $I19, rx772_bstack
    lt rx772_pos, -1, rx772_done2094
    lt rx772_pos, 0, rx772_fail2096
    eq $I19, 0, rx772_fail2096
    nqp_islist $I20, rx772_cstack
    unless $I20, rx772_jump2097
    elements $I18, rx772_bstack
    le $I18, 0, rx772_cut2098
    dec $I18
    set $I18, rx772_bstack[$I18]
  rx772_cut2098:
    assign rx772_cstack, $I18
  rx772_jump2097:
    jump $I19
  rx772_done2094:
    rx772_cur."!cursor_fail"()
    .return (rx772_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_133_1346968539.359_caps" :subid("cuid_memo_200_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["trait_mod"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "trait_mod" :subid("cuid_134_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1094
    .param pmc self 
    $P5001 = self."!protoregex"("trait_mod")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "trait_mod:sym<is>" :subid("cuid_135_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1095
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx777_tgt
    .local int rx777_pos
    .local int rx777_off
    .local int rx777_eos
    .local int rx777_rep
    .local pmc rx777_cur
    .local pmc rx777_curclass
    .local pmc rx777_bstack
    .local pmc rx777_cstack
    (rx777_cur, rx777_tgt, rx777_pos, rx777_curclass, rx777_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx777_cur
    length rx777_eos, rx777_tgt
    eq $I19, 1, rx777_restart2108
    gt rx777_pos, rx777_eos, rx777_fail2109
    repr_get_attr_int $I11, self, rx777_curclass, "$!from"
    ne $I11, -1, rxscan778_done2115
    goto rxscan778_scan2114
  rxscan778_loop2113:
    inc rx777_pos
    gt rx777_pos, rx777_eos, rx777_fail2109
    repr_bind_attr_int rx777_cur, rx777_curclass, "$!from", rx777_pos
  rxscan778_scan2114:
    nqp_rxmark rx777_bstack, rxscan778_loop2113, rx777_pos, 0
  rxscan778_done2115:
    nqp_rxmark rx777_bstack, rxcap779_fail2117, rx777_pos, 0
    add $I11, rx777_pos, 2
    gt $I11, rx777_eos, rx777_fail2109
    substr $S10, rx777_tgt, rx777_pos, 2
    ne $S10, ucs4:"is", rx777_fail2109
    add rx777_pos, 2
    nqp_rxpeek $I19, rx777_bstack, rxcap779_fail2117
    inc $I19
    set $I11, rx777_bstack[$I19]
    $P11 = rx777_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx777_pos)
    rx777_cstack = rx777_cur."!cursor_capture"($P11, "sym")
    goto rxcap779_done2116
  rxcap779_fail2117:
    goto rx777_fail2109
  rxcap779_done2116:
    repr_bind_attr_int rx777_cur, rx777_curclass, "$!pos", rx777_pos
    $P11 = rx777_cur."ws"()
    repr_get_attr_int $I11, $P11, rx777_curclass, "$!pos"
    lt $I11, 0, rx777_fail2109
    repr_get_attr_int rx777_pos, $P11, rx777_curclass, "$!pos"
    repr_bind_attr_int rx777_cur, rx777_curclass, "$!pos", rx777_pos
    $P11 = rx777_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx777_curclass, "$!pos"
    lt $I11, 0, rx777_fail2109
    nqp_rxmark rx777_bstack, rxsubrule781_pass2119, -1, 0
  rxsubrule781_pass2119:
    rx777_cstack = rx777_cur."!cursor_capture"($P11, "longname")
    repr_get_attr_int rx777_pos, $P11, rx777_curclass, "$!pos"
    nqp_rxmark rx777_bstack, rxquantr782_done2121, rx777_pos, 0
  rxquantr782_loop2120:
    repr_bind_attr_int rx777_cur, rx777_curclass, "$!pos", rx777_pos
    $P11 = rx777_cur."circumfix"()
    repr_get_attr_int $I11, $P11, rx777_curclass, "$!pos"
    lt $I11, 0, rx777_fail2109
    goto rxsubrule783_pass2122
  rxsubrule783_back2123:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx777_curclass, "$!pos"
    lt $I11, 0, rx777_fail2109
  rxsubrule783_pass2122:
    rx777_cstack = rx777_cur."!cursor_capture"($P11, "circumfix")
    set_addr $I11, rxsubrule783_back2123
    push rx777_bstack, $I11
    push rx777_bstack, 0
    push rx777_bstack, rx777_pos
    elements $I11, rx777_cstack
    push rx777_bstack, $I11
    repr_get_attr_int rx777_pos, $P11, rx777_curclass, "$!pos"
    nqp_rxpeek $I19, rx777_bstack, rxquantr782_done2121
    inc $I19
    inc $I19
    set rx777_rep, rx777_bstack[$I19]
    nqp_rxcommit rx777_bstack, rxquantr782_done2121
    inc rx777_rep
  rxquantr782_done2121:
    repr_bind_attr_int rx777_cur, rx777_curclass, "$!pos", rx777_pos
    $P11 = rx777_cur."ws"()
    repr_get_attr_int $I11, $P11, rx777_curclass, "$!pos"
    lt $I11, 0, rx777_fail2109
    repr_get_attr_int rx777_pos, $P11, rx777_curclass, "$!pos"
    rx777_cur."!cursor_pass"(rx777_pos, "trait_mod:sym<is>", 'backtrack'=>1)
    .return (rx777_cur)
  rx777_restart2108:
    repr_get_attr_obj rx777_cstack, rx777_cur, rx777_curclass, "$!cstack"
  rx777_fail2109:
    unless rx777_bstack, rx777_done2107
    pop $I19, rx777_bstack
    if_null rx777_cstack, rx777_cstack_done2112
    unless rx777_cstack, rx777_cstack_done2112
    dec $I19
    set $P11, rx777_cstack[$I19]
  rx777_cstack_done2112:
    pop rx777_rep, rx777_bstack
    pop rx777_pos, rx777_bstack
    pop $I19, rx777_bstack
    lt rx777_pos, -1, rx777_done2107
    lt rx777_pos, 0, rx777_fail2109
    eq $I19, 0, rx777_fail2109
    nqp_islist $I20, rx777_cstack
    unless $I20, rx777_jump2110
    elements $I18, rx777_bstack
    le $I18, 0, rx777_cut2111
    dec $I18
    set $I18, rx777_bstack[$I18]
  rx777_cut2111:
    assign rx777_cstack, $I18
  rx777_jump2110:
    jump $I19
  rx777_done2107:
    rx777_cur."!cursor_fail"()
    .return (rx777_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_135_1346968539.359_caps" :subid("cuid_memo_201_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["longname"], $P5003
    box $P5004, 2
    set $P5001["circumfix"], $P5004
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_135_1346968539.359_nfa" :subid("cuid_memo_202_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 105
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 115
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 0
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "regex_declarator" :subid("cuid_136_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1097
    .param pmc _lex_param_0 
    .const 'Sub' $P5012 = 'cuid_393_1346968539.359' 
    capture_lex $P5012 
    .lex "%*RX", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    new $P5001, 'Hash'
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx785_tgt
    .local int rx785_pos
    .local int rx785_off
    .local int rx785_eos
    .local int rx785_rep
    .local pmc rx785_cur
    .local pmc rx785_curclass
    .local pmc rx785_bstack
    .local pmc rx785_cstack
    (rx785_cur, rx785_tgt, rx785_pos, rx785_curclass, rx785_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx785_cur
    length rx785_eos, rx785_tgt
    eq $I19, 1, rx785_restart2127
    gt rx785_pos, rx785_eos, rx785_fail2128
    repr_get_attr_int $I11, self, rx785_curclass, "$!from"
    ne $I11, -1, rxscan786_done2134
    goto rxscan786_scan2133
  rxscan786_loop2132:
    inc rx785_pos
    gt rx785_pos, rx785_eos, rx785_fail2128
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!from", rx785_pos
  rxscan786_scan2133:
    nqp_rxmark rx785_bstack, rxscan786_loop2132, rx785_pos, 0
  rxscan786_done2134:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt787_02136
    nqp_push_label $P11, alt787_12166
    nqp_rxmark rx785_bstack, alt787_end2135, -1, 0
    rx785_cur."!alt"(rx785_pos, "alt_nfa__31_1346968541.851", $P11)
    goto rx785_fail2128
  alt787_02136:
    nqp_rxmark rx785_bstack, rxcap788_fail2138, rx785_pos, 0
    add $I11, rx785_pos, 5
    gt $I11, rx785_eos, rx785_fail2128
    substr $S10, rx785_tgt, rx785_pos, 5
    ne $S10, ucs4:"proto", rx785_fail2128
    add rx785_pos, 5
    nqp_rxpeek $I19, rx785_bstack, rxcap788_fail2138
    inc $I19
    set $I11, rx785_bstack[$I19]
    $P11 = rx785_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx785_pos)
    rx785_cstack = rx785_cur."!cursor_capture"($P11, "proto")
    goto rxcap788_done2137
  rxcap788_fail2138:
    goto rx785_fail2128
  rxcap788_done2137:
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2128
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt790_02141
    nqp_push_label $P11, alt790_12142
    nqp_push_label $P11, alt790_22143
    nqp_rxmark rx785_bstack, alt790_end2140, -1, 0
    rx785_cur."!alt"(rx785_pos, "alt_nfa__32_1346968541.851", $P11)
    goto rx785_fail2128
  alt790_02141:
    add $I11, rx785_pos, 5
    gt $I11, rx785_eos, rx785_fail2128
    substr $S10, rx785_tgt, rx785_pos, 5
    ne $S10, ucs4:"regex", rx785_fail2128
    add rx785_pos, 5
    goto alt790_end2140
  alt790_12142:
    add $I11, rx785_pos, 5
    gt $I11, rx785_eos, rx785_fail2128
    substr $S10, rx785_tgt, rx785_pos, 5
    ne $S10, ucs4:"token", rx785_fail2128
    add rx785_pos, 5
    goto alt790_end2140
  alt790_22143:
    add $I11, rx785_pos, 4
    gt $I11, rx785_eos, rx785_fail2128
    substr $S10, rx785_tgt, rx785_pos, 4
    ne $S10, ucs4:"rule", rx785_fail2128
    add rx785_pos, 4
    goto alt790_end2140
  alt790_end2140:
    nqp_rxcommit rx785_bstack, alt790_end2140
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2128
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2128
    nqp_rxmark rx785_bstack, rxsubrule792_pass2145, -1, 0
  rxsubrule792_pass2145:
    rx785_cstack = rx785_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2128
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
  alt794_02148:
    nqp_rxmark rx785_bstack, alt794_12151, rx785_pos, 0
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2128
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    add $I11, rx785_pos, 3
    gt $I11, rx785_eos, rx785_fail2128
    substr $S10, rx785_tgt, rx785_pos, 3
    ne $S10, ucs4:"{*}", rx785_fail2128
    add rx785_pos, 3
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2128
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2128
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    goto alt794_end2147
  alt794_12151:
    nqp_rxmark rx785_bstack, alt794_22156, rx785_pos, 0
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2128
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    add $I11, rx785_pos, 1
    gt $I11, rx785_eos, rx785_fail2128
    substr $S10, rx785_tgt, rx785_pos, 1
    ne $S10, ucs4:"{", rx785_fail2128
    add rx785_pos, 1
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2128
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    add $I11, rx785_pos, 5
    gt $I11, rx785_eos, rx785_fail2128
    substr $S10, rx785_tgt, rx785_pos, 5
    ne $S10, ucs4:"<...>", rx785_fail2128
    add rx785_pos, 5
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2128
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    add $I11, rx785_pos, 1
    gt $I11, rx785_eos, rx785_fail2128
    substr $S10, rx785_tgt, rx785_pos, 1
    ne $S10, ucs4:"}", rx785_fail2128
    add rx785_pos, 1
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2128
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2128
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    goto alt794_end2147
  alt794_22156:
    nqp_rxmark rx785_bstack, alt794_32161, rx785_pos, 0
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2128
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    add $I11, rx785_pos, 1
    gt $I11, rx785_eos, rx785_fail2128
    substr $S10, rx785_tgt, rx785_pos, 1
    ne $S10, ucs4:"{", rx785_fail2128
    add rx785_pos, 1
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2128
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    add $I11, rx785_pos, 3
    gt $I11, rx785_eos, rx785_fail2128
    substr $S10, rx785_tgt, rx785_pos, 3
    ne $S10, ucs4:"<*>", rx785_fail2128
    add rx785_pos, 3
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2128
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    add $I11, rx785_pos, 1
    gt $I11, rx785_eos, rx785_fail2128
    substr $S10, rx785_tgt, rx785_pos, 1
    ne $S10, ucs4:"}", rx785_fail2128
    add rx785_pos, 1
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2128
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2128
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    goto alt794_end2147
  alt794_32161:
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2128
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."panic"("Proto regex body must be \\{*\\} (or <*> or <...>, which are deprecated)")
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2128
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2128
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
  alt794_end2147:
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2128
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    goto alt787_end2135
  alt787_12166:
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2128
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    nqp_rxmark rx785_bstack, rxcap810_fail2169, rx785_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt811_02171
    nqp_push_label $P11, alt811_12172
    nqp_push_label $P11, alt811_22173
    nqp_rxmark rx785_bstack, alt811_end2170, -1, 0
    rx785_cur."!alt"(rx785_pos, "alt_nfa__33_1346968541.853", $P11)
    goto rx785_fail2128
  alt811_02171:
    add $I11, rx785_pos, 5
    gt $I11, rx785_eos, rx785_fail2128
    substr $S10, rx785_tgt, rx785_pos, 5
    ne $S10, ucs4:"regex", rx785_fail2128
    add rx785_pos, 5
    goto alt811_end2170
  alt811_12172:
    add $I11, rx785_pos, 5
    gt $I11, rx785_eos, rx785_fail2128
    substr $S10, rx785_tgt, rx785_pos, 5
    ne $S10, ucs4:"token", rx785_fail2128
    add rx785_pos, 5
    goto alt811_end2170
  alt811_22173:
    add $I11, rx785_pos, 4
    gt $I11, rx785_eos, rx785_fail2128
    substr $S10, rx785_tgt, rx785_pos, 4
    ne $S10, ucs4:"rule", rx785_fail2128
    add rx785_pos, 4
    goto alt811_end2170
  alt811_end2170:
    nqp_rxcommit rx785_bstack, alt811_end2170
    nqp_rxpeek $I19, rx785_bstack, rxcap810_fail2169
    inc $I19
    set $I11, rx785_bstack[$I19]
    $P11 = rx785_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx785_pos)
    rx785_cstack = rx785_cur."!cursor_capture"($P11, "sym")
    goto rxcap810_done2168
  rxcap810_fail2169:
    goto rx785_fail2128
  rxcap810_done2168:
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2128
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2128
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2128
    nqp_rxmark rx785_bstack, rxsubrule814_pass2176, -1, 0
  rxsubrule814_pass2176:
    rx785_cstack = rx785_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2128
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2128
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2128
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    nqp_rxmark rx785_bstack, rxquantr818_done2181, rx785_pos, 0
  rxquantr818_loop2180:
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2128
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    add $I11, rx785_pos, 1
    gt $I11, rx785_eos, rx785_fail2128
    substr $S10, rx785_tgt, rx785_pos, 1
    ne $S10, ucs4:"(", rx785_fail2128
    add rx785_pos, 1
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2128
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."signature"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2128
    nqp_rxmark rx785_bstack, rxsubrule821_pass2184, -1, 0
  rxsubrule821_pass2184:
    rx785_cstack = rx785_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2128
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    add $I11, rx785_pos, 1
    gt $I11, rx785_eos, rx785_fail2128
    substr $S10, rx785_tgt, rx785_pos, 1
    ne $S10, ucs4:")", rx785_fail2128
    add rx785_pos, 1
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2128
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    nqp_rxpeek $I19, rx785_bstack, rxquantr818_done2181
    inc $I19
    inc $I19
    set rx785_rep, rx785_bstack[$I19]
    nqp_rxcommit rx785_bstack, rxquantr818_done2181
    inc rx785_rep
  rxquantr818_done2181:
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2128
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    store_lex unicode:"$\x{a2}", rx785_cur
    unless_null $P101, fallback2188
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["%RX"]
    unless_null $P5002, fallback2189
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%RX"], $P5007
    set $P5002, $P5007
  fallback2189:
    unless_null $P5002, vivi_8252190
    die "Contextual %*RX not found"
    box $P5008, "Contextual %*RX not found"
    set $P5002, $P5008
  vivi_8252190:
    set $P101, $P5002
  fallback2188:
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2128
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    store_lex unicode:"$\x{a2}", rx785_cur
    $P5009 = $P102."MATCH"()
    set $P103, $P5009
    .const 'Sub' $P5010 = 'cuid_393_1346968539.359' 
    capture_lex $P5010
    $P5011 = $P5010()
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2128
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    add $I11, rx785_pos, 1
    gt $I11, rx785_eos, rx785_fail2128
    substr $S10, rx785_tgt, rx785_pos, 1
    ne $S10, ucs4:"{", rx785_fail2128
    add rx785_pos, 1
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."LANG"("Regex", "nibbler")
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2128
    nqp_rxmark rx785_bstack, rxsubrule832_pass2212, -1, 0
  rxsubrule832_pass2212:
    rx785_cstack = rx785_cur."!cursor_capture"($P11, "p6regex")
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    add $I11, rx785_pos, 1
    gt $I11, rx785_eos, rx785_fail2128
    substr $S10, rx785_tgt, rx785_pos, 1
    ne $S10, ucs4:"}", rx785_fail2128
    add rx785_pos, 1
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2128
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."ws"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2128
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    goto alt787_end2135
  alt787_end2135:
    nqp_rxcommit rx785_bstack, alt787_end2135
    rx785_cur."!cursor_pass"(rx785_pos, "regex_declarator", 'backtrack'=>1)
    .return (rx785_cur)
  rx785_restart2127:
    repr_get_attr_obj rx785_cstack, rx785_cur, rx785_curclass, "$!cstack"
  rx785_fail2128:
    unless rx785_bstack, rx785_done2126
    pop $I19, rx785_bstack
    if_null rx785_cstack, rx785_cstack_done2131
    unless rx785_cstack, rx785_cstack_done2131
    dec $I19
    set $P11, rx785_cstack[$I19]
  rx785_cstack_done2131:
    pop rx785_rep, rx785_bstack
    pop rx785_pos, rx785_bstack
    pop $I19, rx785_bstack
    lt rx785_pos, -1, rx785_done2126
    lt rx785_pos, 0, rx785_fail2128
    eq $I19, 0, rx785_fail2128
    nqp_islist $I20, rx785_cstack
    unless $I20, rx785_jump2129
    elements $I18, rx785_bstack
    le $I18, 0, rx785_cut2130
    dec $I18
    set $I18, rx785_bstack[$I18]
  rx785_cut2130:
    assign rx785_cstack, $I18
  rx785_jump2129:
    jump $I19
  rx785_done2126:
    rx785_cur."!cursor_fail"()
    .return (rx785_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_136_1346968539.359_caps" :subid("cuid_memo_203_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["proto"], $P5002
    box $P5003, 0
    set $P5001["deflongname"], $P5003
    box $P5004, 0
    set $P5001["sym"], $P5004
    box $P5005, 2
    set $P5001["signature"], $P5005
    box $P5006, 0
    set $P5001["p6regex"], $P5006
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_136_1346968539.359_nfa" :subid("cuid_memo_204_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 112
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    box $P5007, 0
    push $P5003, $P5007
    box $P5008, 0
    push $P5003, $P5008
    box $P5009, 0
    push $P5003, $P5009
    push $P5001, $P5003
    new $P5010, 'ResizablePMCArray'
    box $P5011, 2
    push $P5010, $P5011
    box $P5012, 114
    push $P5010, $P5012
    box $P5013, 3
    push $P5010, $P5013
    push $P5001, $P5010
    new $P5014, 'ResizablePMCArray'
    box $P5015, 2
    push $P5014, $P5015
    box $P5016, 111
    push $P5014, $P5016
    box $P5017, 4
    push $P5014, $P5017
    push $P5001, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 2
    push $P5018, $P5019
    box $P5020, 116
    push $P5018, $P5020
    box $P5021, 5
    push $P5018, $P5021
    push $P5001, $P5018
    new $P5022, 'ResizablePMCArray'
    box $P5023, 2
    push $P5022, $P5023
    box $P5024, 111
    push $P5022, $P5024
    box $P5025, 6
    push $P5022, $P5025
    push $P5001, $P5022
    new $P5026, 'ResizablePMCArray'
    box $P5027, 0
    push $P5026, $P5027
    box $P5028, 0
    push $P5026, $P5028
    box $P5029, 0
    push $P5026, $P5029
    push $P5001, $P5026
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_136_1346968539.359_alt_nfa__32_1346968541.851" :subid("cuid_memo_205_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 114
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 101
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 2
    push $P5012, $P5013
    box $P5014, 103
    push $P5012, $P5014
    box $P5015, 4
    push $P5012, $P5015
    push $P5002, $P5012
    new $P5016, 'ResizablePMCArray'
    box $P5017, 2
    push $P5016, $P5017
    box $P5018, 101
    push $P5016, $P5018
    box $P5019, 5
    push $P5016, $P5019
    push $P5002, $P5016
    new $P5020, 'ResizablePMCArray'
    box $P5021, 2
    push $P5020, $P5021
    box $P5022, 120
    push $P5020, $P5022
    box $P5023, 0
    push $P5020, $P5023
    push $P5002, $P5020
    push $P5001, $P5002
    new $P5024, 'ResizablePMCArray'
    new $P5025, 'ResizablePMCArray'
    push $P5024, $P5025
    new $P5026, 'ResizablePMCArray'
    box $P5027, 2
    push $P5026, $P5027
    box $P5028, 116
    push $P5026, $P5028
    box $P5029, 2
    push $P5026, $P5029
    push $P5024, $P5026
    new $P5030, 'ResizablePMCArray'
    box $P5031, 2
    push $P5030, $P5031
    box $P5032, 111
    push $P5030, $P5032
    box $P5033, 3
    push $P5030, $P5033
    push $P5024, $P5030
    new $P5034, 'ResizablePMCArray'
    box $P5035, 2
    push $P5034, $P5035
    box $P5036, 107
    push $P5034, $P5036
    box $P5037, 4
    push $P5034, $P5037
    push $P5024, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 2
    push $P5038, $P5039
    box $P5040, 101
    push $P5038, $P5040
    box $P5041, 5
    push $P5038, $P5041
    push $P5024, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 110
    push $P5042, $P5044
    box $P5045, 0
    push $P5042, $P5045
    push $P5024, $P5042
    push $P5001, $P5024
    new $P5046, 'ResizablePMCArray'
    new $P5047, 'ResizablePMCArray'
    push $P5046, $P5047
    new $P5048, 'ResizablePMCArray'
    box $P5049, 2
    push $P5048, $P5049
    box $P5050, 114
    push $P5048, $P5050
    box $P5051, 2
    push $P5048, $P5051
    push $P5046, $P5048
    new $P5052, 'ResizablePMCArray'
    box $P5053, 2
    push $P5052, $P5053
    box $P5054, 117
    push $P5052, $P5054
    box $P5055, 3
    push $P5052, $P5055
    push $P5046, $P5052
    new $P5056, 'ResizablePMCArray'
    box $P5057, 2
    push $P5056, $P5057
    box $P5058, 108
    push $P5056, $P5058
    box $P5059, 4
    push $P5056, $P5059
    push $P5046, $P5056
    new $P5060, 'ResizablePMCArray'
    box $P5061, 2
    push $P5060, $P5061
    box $P5062, 101
    push $P5060, $P5062
    box $P5063, 0
    push $P5060, $P5063
    push $P5046, $P5060
    push $P5001, $P5046
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_136_1346968539.359_alt_nfa__33_1346968541.853" :subid("cuid_memo_206_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 114
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 101
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 2
    push $P5012, $P5013
    box $P5014, 103
    push $P5012, $P5014
    box $P5015, 4
    push $P5012, $P5015
    push $P5002, $P5012
    new $P5016, 'ResizablePMCArray'
    box $P5017, 2
    push $P5016, $P5017
    box $P5018, 101
    push $P5016, $P5018
    box $P5019, 5
    push $P5016, $P5019
    push $P5002, $P5016
    new $P5020, 'ResizablePMCArray'
    box $P5021, 2
    push $P5020, $P5021
    box $P5022, 120
    push $P5020, $P5022
    box $P5023, 0
    push $P5020, $P5023
    push $P5002, $P5020
    push $P5001, $P5002
    new $P5024, 'ResizablePMCArray'
    new $P5025, 'ResizablePMCArray'
    push $P5024, $P5025
    new $P5026, 'ResizablePMCArray'
    box $P5027, 2
    push $P5026, $P5027
    box $P5028, 116
    push $P5026, $P5028
    box $P5029, 2
    push $P5026, $P5029
    push $P5024, $P5026
    new $P5030, 'ResizablePMCArray'
    box $P5031, 2
    push $P5030, $P5031
    box $P5032, 111
    push $P5030, $P5032
    box $P5033, 3
    push $P5030, $P5033
    push $P5024, $P5030
    new $P5034, 'ResizablePMCArray'
    box $P5035, 2
    push $P5034, $P5035
    box $P5036, 107
    push $P5034, $P5036
    box $P5037, 4
    push $P5034, $P5037
    push $P5024, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 2
    push $P5038, $P5039
    box $P5040, 101
    push $P5038, $P5040
    box $P5041, 5
    push $P5038, $P5041
    push $P5024, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 110
    push $P5042, $P5044
    box $P5045, 0
    push $P5042, $P5045
    push $P5024, $P5042
    push $P5001, $P5024
    new $P5046, 'ResizablePMCArray'
    new $P5047, 'ResizablePMCArray'
    push $P5046, $P5047
    new $P5048, 'ResizablePMCArray'
    box $P5049, 2
    push $P5048, $P5049
    box $P5050, 114
    push $P5048, $P5050
    box $P5051, 2
    push $P5048, $P5051
    push $P5046, $P5048
    new $P5052, 'ResizablePMCArray'
    box $P5053, 2
    push $P5052, $P5053
    box $P5054, 117
    push $P5052, $P5054
    box $P5055, 3
    push $P5052, $P5055
    push $P5046, $P5052
    new $P5056, 'ResizablePMCArray'
    box $P5057, 2
    push $P5056, $P5057
    box $P5058, 108
    push $P5056, $P5058
    box $P5059, 4
    push $P5056, $P5059
    push $P5046, $P5056
    new $P5060, 'ResizablePMCArray'
    box $P5061, 2
    push $P5060, $P5061
    box $P5062, 101
    push $P5060, $P5062
    box $P5063, 0
    push $P5060, $P5063
    push $P5046, $P5060
    push $P5001, $P5046
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_136_1346968539.359_alt_nfa__31_1346968541.851" :subid("cuid_memo_207_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 112
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 114
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 2
    push $P5012, $P5013
    box $P5014, 111
    push $P5012, $P5014
    box $P5015, 4
    push $P5012, $P5015
    push $P5002, $P5012
    new $P5016, 'ResizablePMCArray'
    box $P5017, 2
    push $P5016, $P5017
    box $P5018, 116
    push $P5016, $P5018
    box $P5019, 5
    push $P5016, $P5019
    push $P5002, $P5016
    new $P5020, 'ResizablePMCArray'
    box $P5021, 2
    push $P5020, $P5021
    box $P5022, 111
    push $P5020, $P5022
    box $P5023, 6
    push $P5020, $P5023
    push $P5002, $P5020
    new $P5024, 'ResizablePMCArray'
    box $P5025, 0
    push $P5024, $P5025
    box $P5026, 0
    push $P5024, $P5026
    box $P5027, 0
    push $P5024, $P5027
    push $P5002, $P5024
    push $P5001, $P5002
    new $P5028, 'ResizablePMCArray'
    new $P5029, 'ResizablePMCArray'
    push $P5028, $P5029
    new $P5030, 'ResizablePMCArray'
    box $P5031, 0
    push $P5030, $P5031
    box $P5032, 0
    push $P5030, $P5032
    box $P5033, 0
    push $P5030, $P5033
    box $P5034, 0
    push $P5030, $P5034
    box $P5035, 0
    push $P5030, $P5035
    box $P5036, 0
    push $P5030, $P5036
    push $P5028, $P5030
    push $P5001, $P5028
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_393_1346968539.359") :anon :lex :outer("cuid_136_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1112

    find_dynamic_lex $P5001, "%*RX"
    unless_null $P5001, fallback2192
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["%RX"]
    unless_null $P5002, fallback2193
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%RX"], $P5007
    set $P5002, $P5007
  fallback2193:
    unless_null $P5002, vivi_8272194
    die "Contextual %*RX not found"
    box $P5008, "Contextual %*RX not found"
    set $P5002, $P5008
  vivi_8272194:
    set $P5001, $P5002
  fallback2192:
    find_lex $P5010, "$/"
    unless_null $P5010, fallback2195
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5010, $P5011
  fallback2195:
    set $P5009, $P5010["sym"]
    unless_null $P5009, fallback2196
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5009, $P5012
  fallback2196:
    set $S5001, $P5009
    iseq $I5001, $S5001, "rule"
    box $P5013, $I5001
    set $P5001["s"], $P5013
    find_dynamic_lex $P5014, "%*RX"
    unless_null $P5014, fallback2197
    get_hll_global $P5017, "GLOBAL"
    get_who $P5016, $P5017
    set $P5015, $P5016["%RX"]
    unless_null $P5015, fallback2198
    get_hll_global $P5019, "GLOBAL"
    get_who $P5018, $P5019
    new $P5020, 'Hash'
    set $P5018["%RX"], $P5020
    set $P5015, $P5020
  fallback2198:
    unless_null $P5015, vivi_8282199
    die "Contextual %*RX not found"
    box $P5021, "Contextual %*RX not found"
    set $P5015, $P5021
  vivi_8282199:
    set $P5014, $P5015
  fallback2197:
    find_lex $P5023, "$/"
    unless_null $P5023, fallback2202
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5023, $P5024
  fallback2202:
    set $P5022, $P5023["sym"]
    unless_null $P5022, fallback2203
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5022, $P5025
  fallback2203:
    set $S5002, $P5022
    iseq $I5002, $S5002, "token"
    set $I5004, $I5002
    if $I5002 goto unless829_end2201 
    find_lex $P5027, "$/"
    unless_null $P5027, fallback2204
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5027, $P5028
  fallback2204:
    set $P5026, $P5027["sym"]
    unless_null $P5026, fallback2205
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5026, $P5029
  fallback2205:
    set $S5003, $P5026
    iseq $I5003, $S5003, "rule"
    set $I5004, $I5003
  unless829_end2201:
    box $P5030, $I5004
    set $P5014["r"], $P5030
    find_dynamic_lex $P5031, "%*RX"
    unless_null $P5031, fallback2206
    get_hll_global $P5034, "GLOBAL"
    get_who $P5033, $P5034
    set $P5032, $P5033["%RX"]
    unless_null $P5032, fallback2207
    get_hll_global $P5036, "GLOBAL"
    get_who $P5035, $P5036
    new $P5037, 'Hash'
    set $P5035["%RX"], $P5037
    set $P5032, $P5037
  fallback2207:
    unless_null $P5032, vivi_8302208
    die "Contextual %*RX not found"
    box $P5038, "Contextual %*RX not found"
    set $P5032, $P5038
  vivi_8302208:
    set $P5031, $P5032
  fallback2206:
.annotate 'line', 1115
    find_lex $P5040, "$/"
    unless_null $P5040, fallback2209
    nqp_get_sc_object $P5041, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5040, $P5041
  fallback2209:
    set $P5039, $P5040["deflongname"]
    unless_null $P5039, fallback2210
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5039, $P5042
  fallback2210:
    $P5043 = $P5039."ast"()
    set $P5031["name"], $P5043
    .return ($P5043) 
.end
.HLL "nqp"
.namespace []
.sub "dotty" :subid("cuid_137_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1121
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx834_tgt
    .local int rx834_pos
    .local int rx834_off
    .local int rx834_eos
    .local int rx834_rep
    .local pmc rx834_cur
    .local pmc rx834_curclass
    .local pmc rx834_bstack
    .local pmc rx834_cstack
    (rx834_cur, rx834_tgt, rx834_pos, rx834_curclass, rx834_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx834_cur
    length rx834_eos, rx834_tgt
    eq $I19, 1, rx834_restart2216
    gt rx834_pos, rx834_eos, rx834_fail2217
    repr_get_attr_int $I11, self, rx834_curclass, "$!from"
    ne $I11, -1, rxscan835_done2223
    goto rxscan835_scan2222
  rxscan835_loop2221:
    inc rx834_pos
    gt rx834_pos, rx834_eos, rx834_fail2217
    repr_bind_attr_int rx834_cur, rx834_curclass, "$!from", rx834_pos
  rxscan835_scan2222:
    nqp_rxmark rx834_bstack, rxscan835_loop2221, rx834_pos, 0
  rxscan835_done2223:
    add $I11, rx834_pos, 1
    gt $I11, rx834_eos, rx834_fail2217
    substr $S10, rx834_tgt, rx834_pos, 1
    ne $S10, ucs4:".", rx834_fail2217
    add rx834_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt836_02225
    nqp_push_label $P11, alt836_12227
    nqp_rxmark rx834_bstack, alt836_end2224, -1, 0
    rx834_cur."!alt"(rx834_pos, "alt_nfa__34_1346968541.88", $P11)
    goto rx834_fail2217
  alt836_02225:
    repr_bind_attr_int rx834_cur, rx834_curclass, "$!pos", rx834_pos
    $P11 = rx834_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx834_curclass, "$!pos"
    lt $I11, 0, rx834_fail2217
    nqp_rxmark rx834_bstack, rxsubrule837_pass2226, -1, 0
  rxsubrule837_pass2226:
    rx834_cstack = rx834_cur."!cursor_capture"($P11, "longname=deflongname")
    repr_get_attr_int rx834_pos, $P11, rx834_curclass, "$!pos"
    goto alt836_end2224
  alt836_12227:
    ge rx834_pos, rx834_eos, rx834_fail2217
    substr $S11, rx834_tgt, rx834_pos, 1
    index $I11, ucs4:"'\"", $S11
    lt $I11, 0, rx834_fail2217
    repr_bind_attr_int rx834_cur, rx834_curclass, "$!pos", rx834_pos
    $P11 = rx834_cur."quote"()
    repr_get_attr_int $I11, $P11, rx834_curclass, "$!pos"
    lt $I11, 0, rx834_fail2217
    nqp_rxmark rx834_bstack, rxsubrule838_pass2228, -1, 0
  rxsubrule838_pass2228:
    rx834_cstack = rx834_cur."!cursor_capture"($P11, "quote")
    repr_get_attr_int rx834_pos, $P11, rx834_curclass, "$!pos"
  alt839_02230:
    nqp_rxmark rx834_bstack, alt839_12231, rx834_pos, 0
    ge rx834_pos, rx834_eos, rx834_fail2217
    substr $S11, rx834_tgt, rx834_pos, 1
    index $I11, ucs4:"(", $S11
    lt $I11, 0, rx834_fail2217
    goto alt839_end2229
  alt839_12231:
    repr_bind_attr_int rx834_cur, rx834_curclass, "$!pos", rx834_pos
    $P11 = rx834_cur."panic"("Quoted method name requires parenthesized arguments")
    repr_get_attr_int $I11, $P11, rx834_curclass, "$!pos"
    lt $I11, 0, rx834_fail2217
    repr_get_attr_int rx834_pos, $P11, rx834_curclass, "$!pos"
  alt839_end2229:
    goto alt836_end2224
  alt836_end2224:
    nqp_rxcommit rx834_bstack, alt836_end2224
    nqp_rxmark rx834_bstack, rxquantr841_done2234, rx834_pos, 0
  rxquantr841_loop2233:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt842_02236
    nqp_push_label $P11, alt842_12238
    nqp_rxmark rx834_bstack, alt842_end2235, -1, 0
    rx834_cur."!alt"(rx834_pos, "alt_nfa__35_1346968541.88", $P11)
    goto rx834_fail2217
  alt842_02236:
    ge rx834_pos, rx834_eos, rx834_fail2217
    substr $S11, rx834_tgt, rx834_pos, 1
    index $I11, ucs4:"(", $S11
    lt $I11, 0, rx834_fail2217
    repr_bind_attr_int rx834_cur, rx834_curclass, "$!pos", rx834_pos
    $P11 = rx834_cur."args"()
    repr_get_attr_int $I11, $P11, rx834_curclass, "$!pos"
    lt $I11, 0, rx834_fail2217
    nqp_rxmark rx834_bstack, rxsubrule843_pass2237, -1, 0
  rxsubrule843_pass2237:
    rx834_cstack = rx834_cur."!cursor_capture"($P11, "args")
    repr_get_attr_int rx834_pos, $P11, rx834_curclass, "$!pos"
    goto alt842_end2235
  alt842_12238:
    add $I11, rx834_pos, 1
    gt $I11, rx834_eos, rx834_fail2217
    substr $S10, rx834_tgt, rx834_pos, 1
    ne $S10, ucs4:":", rx834_fail2217
    add rx834_pos, 1
    ge rx834_pos, rx834_eos, rx834_fail2217
    is_cclass $I11, .CCLASS_WHITESPACE, rx834_tgt, rx834_pos
    unless $I11, rx834_fail2217
    add rx834_pos, 1
    repr_bind_attr_int rx834_cur, rx834_curclass, "$!pos", rx834_pos
    $P11 = rx834_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx834_curclass, "$!pos"
    lt $I11, 0, rx834_fail2217
    nqp_rxmark rx834_bstack, rxsubrule844_pass2239, -1, 0
  rxsubrule844_pass2239:
    rx834_cstack = rx834_cur."!cursor_capture"($P11, "args")
    repr_get_attr_int rx834_pos, $P11, rx834_curclass, "$!pos"
    goto alt842_end2235
  alt842_end2235:
    nqp_rxpeek $I19, rx834_bstack, rxquantr841_done2234
    inc $I19
    inc $I19
    set rx834_rep, rx834_bstack[$I19]
    nqp_rxcommit rx834_bstack, rxquantr841_done2234
    inc rx834_rep
  rxquantr841_done2234:
    rx834_cur."!cursor_pass"(rx834_pos, "dotty", 'backtrack'=>1)
    .return (rx834_cur)
  rx834_restart2216:
    repr_get_attr_obj rx834_cstack, rx834_cur, rx834_curclass, "$!cstack"
  rx834_fail2217:
    unless rx834_bstack, rx834_done2215
    pop $I19, rx834_bstack
    if_null rx834_cstack, rx834_cstack_done2220
    unless rx834_cstack, rx834_cstack_done2220
    dec $I19
    set $P11, rx834_cstack[$I19]
  rx834_cstack_done2220:
    pop rx834_rep, rx834_bstack
    pop rx834_pos, rx834_bstack
    pop $I19, rx834_bstack
    lt rx834_pos, -1, rx834_done2215
    lt rx834_pos, 0, rx834_fail2217
    eq $I19, 0, rx834_fail2217
    nqp_islist $I20, rx834_cstack
    unless $I20, rx834_jump2218
    elements $I18, rx834_bstack
    le $I18, 0, rx834_cut2219
    dec $I18
    set $I18, rx834_bstack[$I18]
  rx834_cut2219:
    assign rx834_cstack, $I18
  rx834_jump2218:
    jump $I19
  rx834_done2215:
    rx834_cur."!cursor_fail"()
    .return (rx834_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_137_1346968539.359_caps" :subid("cuid_memo_208_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["longname"], $P5002
    box $P5003, 0
    set $P5001["deflongname"], $P5003
    box $P5004, 0
    set $P5001["quote"], $P5004
    box $P5005, 2
    set $P5001["args"], $P5005
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_137_1346968539.359_nfa" :subid("cuid_memo_209_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 46
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "deflongname"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    box $P5011, 6
    push $P5007, $P5011
    box $P5012, "'\""
    push $P5007, $P5012
    box $P5013, 4
    push $P5007, $P5013
    push $P5001, $P5007
    new $P5014, 'ResizablePMCArray'
    box $P5015, 6
    push $P5014, $P5015
    box $P5016, "("
    push $P5014, $P5016
    box $P5017, 5
    push $P5014, $P5017
    box $P5018, 2
    push $P5014, $P5018
    box $P5019, 58
    push $P5014, $P5019
    box $P5020, 6
    push $P5014, $P5020
    box $P5021, 1
    push $P5014, $P5021
    box $P5022, 0
    push $P5014, $P5022
    box $P5023, 0
    push $P5014, $P5023
    push $P5001, $P5014
    new $P5024, 'ResizablePMCArray'
    box $P5025, 0
    push $P5024, $P5025
    box $P5026, 0
    push $P5024, $P5026
    box $P5027, 0
    push $P5024, $P5027
    push $P5001, $P5024
    new $P5028, 'ResizablePMCArray'
    box $P5029, 0
    push $P5028, $P5029
    box $P5030, 0
    push $P5028, $P5030
    box $P5031, 0
    push $P5028, $P5031
    push $P5001, $P5028
    new $P5032, 'ResizablePMCArray'
    box $P5033, 4
    push $P5032, $P5033
    box $P5034, 32
    push $P5032, $P5034
    box $P5035, 7
    push $P5032, $P5035
    push $P5001, $P5032
    new $P5036, 'ResizablePMCArray'
    box $P5037, 8
    push $P5036, $P5037
    box $P5038, "arglist"
    push $P5036, $P5038
    box $P5039, 0
    push $P5036, $P5039
    push $P5001, $P5036
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_137_1346968539.359_alt_nfa__34_1346968541.88" :subid("cuid_memo_210_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 8
    push $P5004, $P5005
    box $P5006, "deflongname"
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 6
    push $P5010, $P5011
    box $P5012, "'\""
    push $P5010, $P5012
    box $P5013, 2
    push $P5010, $P5013
    push $P5008, $P5010
    new $P5014, 'ResizablePMCArray'
    box $P5015, 0
    push $P5014, $P5015
    box $P5016, 0
    push $P5014, $P5016
    box $P5017, 0
    push $P5014, $P5017
    push $P5008, $P5014
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_137_1346968539.359_alt_nfa__35_1346968541.88" :subid("cuid_memo_211_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 6
    push $P5004, $P5005
    box $P5006, "("
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 0
    push $P5008, $P5009
    box $P5010, 0
    push $P5008, $P5010
    box $P5011, 0
    push $P5008, $P5011
    push $P5002, $P5008
    push $P5001, $P5002
    new $P5012, 'ResizablePMCArray'
    new $P5013, 'ResizablePMCArray'
    push $P5012, $P5013
    new $P5014, 'ResizablePMCArray'
    box $P5015, 2
    push $P5014, $P5015
    box $P5016, 58
    push $P5014, $P5016
    box $P5017, 2
    push $P5014, $P5017
    push $P5012, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 4
    push $P5018, $P5019
    box $P5020, 32
    push $P5018, $P5020
    box $P5021, 3
    push $P5018, $P5021
    push $P5012, $P5018
    new $P5022, 'ResizablePMCArray'
    box $P5023, 8
    push $P5022, $P5023
    box $P5024, "arglist"
    push $P5022, $P5024
    box $P5025, 0
    push $P5022, $P5025
    push $P5012, $P5022
    push $P5001, $P5012
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<self>" :subid("cuid_138_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1134
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx845_tgt
    .local int rx845_pos
    .local int rx845_off
    .local int rx845_eos
    .local int rx845_rep
    .local pmc rx845_cur
    .local pmc rx845_curclass
    .local pmc rx845_bstack
    .local pmc rx845_cstack
    (rx845_cur, rx845_tgt, rx845_pos, rx845_curclass, rx845_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx845_cur
    length rx845_eos, rx845_tgt
    eq $I19, 1, rx845_restart2242
    gt rx845_pos, rx845_eos, rx845_fail2243
    repr_get_attr_int $I11, self, rx845_curclass, "$!from"
    ne $I11, -1, rxscan846_done2249
    goto rxscan846_scan2248
  rxscan846_loop2247:
    inc rx845_pos
    gt rx845_pos, rx845_eos, rx845_fail2243
    repr_bind_attr_int rx845_cur, rx845_curclass, "$!from", rx845_pos
  rxscan846_scan2248:
    nqp_rxmark rx845_bstack, rxscan846_loop2247, rx845_pos, 0
  rxscan846_done2249:
    nqp_rxmark rx845_bstack, rxcap847_fail2251, rx845_pos, 0
    add $I11, rx845_pos, 4
    gt $I11, rx845_eos, rx845_fail2243
    substr $S10, rx845_tgt, rx845_pos, 4
    ne $S10, ucs4:"self", rx845_fail2243
    add rx845_pos, 4
    nqp_rxpeek $I19, rx845_bstack, rxcap847_fail2251
    inc $I19
    set $I11, rx845_bstack[$I19]
    $P11 = rx845_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx845_pos)
    rx845_cstack = rx845_cur."!cursor_capture"($P11, "sym")
    goto rxcap847_done2250
  rxcap847_fail2251:
    goto rx845_fail2243
  rxcap847_done2250:
    le rx845_pos, 0, rx845_fail2243
    is_cclass $I11, .CCLASS_WORD, rx845_tgt, rx845_pos
    if $I11, rx845_fail2243
    sub $I11, rx845_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx845_tgt, $I11
    unless $I11, rx845_fail2243
    rx845_cur."!cursor_pass"(rx845_pos, "term:sym<self>", 'backtrack'=>1)
    .return (rx845_cur)
  rx845_restart2242:
    repr_get_attr_obj rx845_cstack, rx845_cur, rx845_curclass, "$!cstack"
  rx845_fail2243:
    unless rx845_bstack, rx845_done2241
    pop $I19, rx845_bstack
    if_null rx845_cstack, rx845_cstack_done2246
    unless rx845_cstack, rx845_cstack_done2246
    dec $I19
    set $P11, rx845_cstack[$I19]
  rx845_cstack_done2246:
    pop rx845_rep, rx845_bstack
    pop rx845_pos, rx845_bstack
    pop $I19, rx845_bstack
    lt rx845_pos, -1, rx845_done2241
    lt rx845_pos, 0, rx845_fail2243
    eq $I19, 0, rx845_fail2243
    nqp_islist $I20, rx845_cstack
    unless $I20, rx845_jump2244
    elements $I18, rx845_bstack
    le $I18, 0, rx845_cut2245
    dec $I18
    set $I18, rx845_bstack[$I18]
  rx845_cut2245:
    assign rx845_cstack, $I18
  rx845_jump2244:
    jump $I19
  rx845_done2241:
    rx845_cur."!cursor_fail"()
    .return (rx845_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_138_1346968539.359_caps" :subid("cuid_memo_212_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_138_1346968539.359_nfa" :subid("cuid_memo_213_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 115
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 101
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 108
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 102
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 1
    push $P5019, $P5020
    box $P5021, 0
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<identifier>" :subid("cuid_139_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1136
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx849_tgt
    .local int rx849_pos
    .local int rx849_off
    .local int rx849_eos
    .local int rx849_rep
    .local pmc rx849_cur
    .local pmc rx849_curclass
    .local pmc rx849_bstack
    .local pmc rx849_cstack
    (rx849_cur, rx849_tgt, rx849_pos, rx849_curclass, rx849_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx849_cur
    length rx849_eos, rx849_tgt
    eq $I19, 1, rx849_restart2255
    gt rx849_pos, rx849_eos, rx849_fail2256
    repr_get_attr_int $I11, self, rx849_curclass, "$!from"
    ne $I11, -1, rxscan850_done2262
    goto rxscan850_scan2261
  rxscan850_loop2260:
    inc rx849_pos
    gt rx849_pos, rx849_eos, rx849_fail2256
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!from", rx849_pos
  rxscan850_scan2261:
    nqp_rxmark rx849_bstack, rxscan850_loop2260, rx849_pos, 0
  rxscan850_done2262:
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2256
    nqp_rxmark rx849_bstack, rxsubrule851_pass2263, -1, 0
  rxsubrule851_pass2263:
    rx849_cstack = rx849_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    ge rx849_pos, rx849_eos, rx849_fail2256
    substr $S11, rx849_tgt, rx849_pos, 1
    index $I11, ucs4:"(", $S11
    lt $I11, 0, rx849_fail2256
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."args"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2256
    nqp_rxmark rx849_bstack, rxsubrule852_pass2264, -1, 0
  rxsubrule852_pass2264:
    rx849_cstack = rx849_cur."!cursor_capture"($P11, "args")
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    rx849_cur."!cursor_pass"(rx849_pos, "term:sym<identifier>", 'backtrack'=>1)
    .return (rx849_cur)
  rx849_restart2255:
    repr_get_attr_obj rx849_cstack, rx849_cur, rx849_curclass, "$!cstack"
  rx849_fail2256:
    unless rx849_bstack, rx849_done2254
    pop $I19, rx849_bstack
    if_null rx849_cstack, rx849_cstack_done2259
    unless rx849_cstack, rx849_cstack_done2259
    dec $I19
    set $P11, rx849_cstack[$I19]
  rx849_cstack_done2259:
    pop rx849_rep, rx849_bstack
    pop rx849_pos, rx849_bstack
    pop $I19, rx849_bstack
    lt rx849_pos, -1, rx849_done2254
    lt rx849_pos, 0, rx849_fail2256
    eq $I19, 0, rx849_fail2256
    nqp_islist $I20, rx849_cstack
    unless $I20, rx849_jump2257
    elements $I18, rx849_bstack
    le $I18, 0, rx849_cut2258
    dec $I18
    set $I18, rx849_bstack[$I18]
  rx849_cut2258:
    assign rx849_cstack, $I18
  rx849_jump2257:
    jump $I19
  rx849_done2254:
    rx849_cur."!cursor_fail"()
    .return (rx849_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_139_1346968539.359_caps" :subid("cuid_memo_214_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["deflongname"], $P5002
    box $P5003, 0
    set $P5001["args"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_139_1346968539.359_nfa" :subid("cuid_memo_215_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "deflongname"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 6
    push $P5007, $P5008
    box $P5009, "("
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 0
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<name>" :subid("cuid_140_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1140
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx853_tgt
    .local int rx853_pos
    .local int rx853_off
    .local int rx853_eos
    .local int rx853_rep
    .local pmc rx853_cur
    .local pmc rx853_curclass
    .local pmc rx853_bstack
    .local pmc rx853_cstack
    (rx853_cur, rx853_tgt, rx853_pos, rx853_curclass, rx853_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx853_cur
    length rx853_eos, rx853_tgt
    eq $I19, 1, rx853_restart2267
    gt rx853_pos, rx853_eos, rx853_fail2268
    repr_get_attr_int $I11, self, rx853_curclass, "$!from"
    ne $I11, -1, rxscan854_done2274
    goto rxscan854_scan2273
  rxscan854_loop2272:
    inc rx853_pos
    gt rx853_pos, rx853_eos, rx853_fail2268
    repr_bind_attr_int rx853_cur, rx853_curclass, "$!from", rx853_pos
  rxscan854_scan2273:
    nqp_rxmark rx853_bstack, rxscan854_loop2272, rx853_pos, 0
  rxscan854_done2274:
    repr_bind_attr_int rx853_cur, rx853_curclass, "$!pos", rx853_pos
    $P11 = rx853_cur."name"()
    repr_get_attr_int $I11, $P11, rx853_curclass, "$!pos"
    lt $I11, 0, rx853_fail2268
    nqp_rxmark rx853_bstack, rxsubrule855_pass2275, -1, 0
  rxsubrule855_pass2275:
    rx853_cstack = rx853_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx853_pos, $P11, rx853_curclass, "$!pos"
    nqp_rxmark rx853_bstack, rxquantr856_done2277, rx853_pos, 0
  rxquantr856_loop2276:
    repr_bind_attr_int rx853_cur, rx853_curclass, "$!pos", rx853_pos
    $P11 = rx853_cur."args"()
    repr_get_attr_int $I11, $P11, rx853_curclass, "$!pos"
    lt $I11, 0, rx853_fail2268
    goto rxsubrule857_pass2278
  rxsubrule857_back2279:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx853_curclass, "$!pos"
    lt $I11, 0, rx853_fail2268
  rxsubrule857_pass2278:
    rx853_cstack = rx853_cur."!cursor_capture"($P11, "args")
    set_addr $I11, rxsubrule857_back2279
    push rx853_bstack, $I11
    push rx853_bstack, 0
    push rx853_bstack, rx853_pos
    elements $I11, rx853_cstack
    push rx853_bstack, $I11
    repr_get_attr_int rx853_pos, $P11, rx853_curclass, "$!pos"
    nqp_rxpeek $I19, rx853_bstack, rxquantr856_done2277
    inc $I19
    inc $I19
    set rx853_rep, rx853_bstack[$I19]
    nqp_rxcommit rx853_bstack, rxquantr856_done2277
    inc rx853_rep
  rxquantr856_done2277:
    rx853_cur."!cursor_pass"(rx853_pos, "term:sym<name>", 'backtrack'=>1)
    .return (rx853_cur)
  rx853_restart2267:
    repr_get_attr_obj rx853_cstack, rx853_cur, rx853_curclass, "$!cstack"
  rx853_fail2268:
    unless rx853_bstack, rx853_done2266
    pop $I19, rx853_bstack
    if_null rx853_cstack, rx853_cstack_done2271
    unless rx853_cstack, rx853_cstack_done2271
    dec $I19
    set $P11, rx853_cstack[$I19]
  rx853_cstack_done2271:
    pop rx853_rep, rx853_bstack
    pop rx853_pos, rx853_bstack
    pop $I19, rx853_bstack
    lt rx853_pos, -1, rx853_done2266
    lt rx853_pos, 0, rx853_fail2268
    eq $I19, 0, rx853_fail2268
    nqp_islist $I20, rx853_cstack
    unless $I20, rx853_jump2269
    elements $I18, rx853_bstack
    le $I18, 0, rx853_cut2270
    dec $I18
    set $I18, rx853_bstack[$I18]
  rx853_cut2270:
    assign rx853_cstack, $I18
  rx853_jump2269:
    jump $I19
  rx853_done2266:
    rx853_cur."!cursor_fail"()
    .return (rx853_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_140_1346968539.359_caps" :subid("cuid_memo_216_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["name"], $P5002
    box $P5003, 2
    set $P5001["args"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_140_1346968539.359_nfa" :subid("cuid_memo_217_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "name"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "args"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    box $P5011, 1
    push $P5007, $P5011
    box $P5012, 0
    push $P5007, $P5012
    box $P5013, 0
    push $P5007, $P5013
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::op>" :subid("cuid_141_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1144
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx858_tgt
    .local int rx858_pos
    .local int rx858_off
    .local int rx858_eos
    .local int rx858_rep
    .local pmc rx858_cur
    .local pmc rx858_curclass
    .local pmc rx858_bstack
    .local pmc rx858_cstack
    (rx858_cur, rx858_tgt, rx858_pos, rx858_curclass, rx858_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx858_cur
    length rx858_eos, rx858_tgt
    eq $I19, 1, rx858_restart2282
    gt rx858_pos, rx858_eos, rx858_fail2283
    repr_get_attr_int $I11, self, rx858_curclass, "$!from"
    ne $I11, -1, rxscan859_done2289
    goto rxscan859_scan2288
  rxscan859_loop2287:
    inc rx858_pos
    gt rx858_pos, rx858_eos, rx858_fail2283
    repr_bind_attr_int rx858_cur, rx858_curclass, "$!from", rx858_pos
  rxscan859_scan2288:
    nqp_rxmark rx858_bstack, rxscan859_loop2287, rx858_pos, 0
  rxscan859_done2289:
    add $I11, rx858_pos, 5
    gt $I11, rx858_eos, rx858_fail2283
    substr $S10, rx858_tgt, rx858_pos, 5
    ne $S10, ucs4:"pir::", rx858_fail2283
    add rx858_pos, 5
    nqp_rxmark rx858_bstack, rxcap860_fail2291, rx858_pos, 0
    nqp_rxmark rx858_bstack, rxquantr861_done2293, -1, 0
  rxquantr861_loop2292:
    ge rx858_pos, rx858_eos, rx858_fail2283
    is_cclass $I11, .CCLASS_WORD, rx858_tgt, rx858_pos
    unless $I11, rx858_fail2283
    add rx858_pos, 1
    nqp_rxpeek $I19, rx858_bstack, rxquantr861_done2293
    inc $I19
    inc $I19
    set rx858_rep, rx858_bstack[$I19]
    nqp_rxcommit rx858_bstack, rxquantr861_done2293
    inc rx858_rep
    nqp_rxmark rx858_bstack, rxquantr861_done2293, rx858_pos, rx858_rep
    goto rxquantr861_loop2292
  rxquantr861_done2293:
    nqp_rxpeek $I19, rx858_bstack, rxcap860_fail2291
    inc $I19
    set $I11, rx858_bstack[$I19]
    $P11 = rx858_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx858_pos)
    rx858_cstack = rx858_cur."!cursor_capture"($P11, "op")
    goto rxcap860_done2290
  rxcap860_fail2291:
    goto rx858_fail2283
  rxcap860_done2290:
    nqp_rxmark rx858_bstack, rxquantr862_done2295, rx858_pos, 0
  rxquantr862_loop2294:
    repr_bind_attr_int rx858_cur, rx858_curclass, "$!pos", rx858_pos
    $P11 = rx858_cur."args"()
    repr_get_attr_int $I11, $P11, rx858_curclass, "$!pos"
    lt $I11, 0, rx858_fail2283
    goto rxsubrule863_pass2296
  rxsubrule863_back2297:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx858_curclass, "$!pos"
    lt $I11, 0, rx858_fail2283
  rxsubrule863_pass2296:
    rx858_cstack = rx858_cur."!cursor_capture"($P11, "args")
    set_addr $I11, rxsubrule863_back2297
    push rx858_bstack, $I11
    push rx858_bstack, 0
    push rx858_bstack, rx858_pos
    elements $I11, rx858_cstack
    push rx858_bstack, $I11
    repr_get_attr_int rx858_pos, $P11, rx858_curclass, "$!pos"
    nqp_rxpeek $I19, rx858_bstack, rxquantr862_done2295
    inc $I19
    inc $I19
    set rx858_rep, rx858_bstack[$I19]
    nqp_rxcommit rx858_bstack, rxquantr862_done2295
    inc rx858_rep
  rxquantr862_done2295:
    rx858_cur."!cursor_pass"(rx858_pos, "term:sym<pir::op>", 'backtrack'=>1)
    .return (rx858_cur)
  rx858_restart2282:
    repr_get_attr_obj rx858_cstack, rx858_cur, rx858_curclass, "$!cstack"
  rx858_fail2283:
    unless rx858_bstack, rx858_done2281
    pop $I19, rx858_bstack
    if_null rx858_cstack, rx858_cstack_done2286
    unless rx858_cstack, rx858_cstack_done2286
    dec $I19
    set $P11, rx858_cstack[$I19]
  rx858_cstack_done2286:
    pop rx858_rep, rx858_bstack
    pop rx858_pos, rx858_bstack
    pop $I19, rx858_bstack
    lt rx858_pos, -1, rx858_done2281
    lt rx858_pos, 0, rx858_fail2283
    eq $I19, 0, rx858_fail2283
    nqp_islist $I20, rx858_cstack
    unless $I20, rx858_jump2284
    elements $I18, rx858_bstack
    le $I18, 0, rx858_cut2285
    dec $I18
    set $I18, rx858_bstack[$I18]
  rx858_cut2285:
    assign rx858_cstack, $I18
  rx858_jump2284:
    jump $I19
  rx858_done2281:
    rx858_cur."!cursor_fail"()
    .return (rx858_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_141_1346968539.359_caps" :subid("cuid_memo_218_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["op"], $P5002
    box $P5003, 2
    set $P5001["args"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_141_1346968539.359_nfa" :subid("cuid_memo_219_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 112
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 105
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 114
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 58
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 58
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 1
    push $P5023, $P5024
    box $P5025, 0
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 4
    push $P5027, $P5028
    box $P5029, 8192
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 1
    push $P5031, $P5032
    box $P5033, 0
    push $P5031, $P5033
    box $P5034, 7
    push $P5031, $P5034
    box $P5035, 1
    push $P5031, $P5035
    box $P5036, 0
    push $P5031, $P5036
    box $P5037, 9
    push $P5031, $P5037
    box $P5038, 8
    push $P5031, $P5038
    box $P5039, "args"
    push $P5031, $P5039
    box $P5040, 0
    push $P5031, $P5040
    box $P5041, 1
    push $P5031, $P5041
    box $P5042, 0
    push $P5031, $P5042
    box $P5043, 0
    push $P5031, $P5043
    push $P5001, $P5031
    new $P5044, 'ResizablePMCArray'
    push $P5001, $P5044
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::const>" :subid("cuid_142_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1148
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx864_tgt
    .local int rx864_pos
    .local int rx864_off
    .local int rx864_eos
    .local int rx864_rep
    .local pmc rx864_cur
    .local pmc rx864_curclass
    .local pmc rx864_bstack
    .local pmc rx864_cstack
    (rx864_cur, rx864_tgt, rx864_pos, rx864_curclass, rx864_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx864_cur
    length rx864_eos, rx864_tgt
    eq $I19, 1, rx864_restart2300
    gt rx864_pos, rx864_eos, rx864_fail2301
    repr_get_attr_int $I11, self, rx864_curclass, "$!from"
    ne $I11, -1, rxscan865_done2307
    goto rxscan865_scan2306
  rxscan865_loop2305:
    inc rx864_pos
    gt rx864_pos, rx864_eos, rx864_fail2301
    repr_bind_attr_int rx864_cur, rx864_curclass, "$!from", rx864_pos
  rxscan865_scan2306:
    nqp_rxmark rx864_bstack, rxscan865_loop2305, rx864_pos, 0
  rxscan865_done2307:
    add $I11, rx864_pos, 12
    gt $I11, rx864_eos, rx864_fail2301
    substr $S10, rx864_tgt, rx864_pos, 12
    ne $S10, ucs4:"pir::const::", rx864_fail2301
    add rx864_pos, 12
    nqp_rxmark rx864_bstack, rxcap866_fail2309, rx864_pos, 0
    nqp_rxmark rx864_bstack, rxquantr867_done2311, -1, 0
  rxquantr867_loop2310:
    ge rx864_pos, rx864_eos, rx864_fail2301
    is_cclass $I11, .CCLASS_WORD, rx864_tgt, rx864_pos
    unless $I11, rx864_fail2301
    add rx864_pos, 1
    nqp_rxpeek $I19, rx864_bstack, rxquantr867_done2311
    inc $I19
    inc $I19
    set rx864_rep, rx864_bstack[$I19]
    nqp_rxcommit rx864_bstack, rxquantr867_done2311
    inc rx864_rep
    nqp_rxmark rx864_bstack, rxquantr867_done2311, rx864_pos, rx864_rep
    goto rxquantr867_loop2310
  rxquantr867_done2311:
    nqp_rxpeek $I19, rx864_bstack, rxcap866_fail2309
    inc $I19
    set $I11, rx864_bstack[$I19]
    $P11 = rx864_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx864_pos)
    rx864_cstack = rx864_cur."!cursor_capture"($P11, "const")
    goto rxcap866_done2308
  rxcap866_fail2309:
    goto rx864_fail2301
  rxcap866_done2308:
    rx864_cur."!cursor_pass"(rx864_pos, "term:sym<pir::const>", 'backtrack'=>1)
    .return (rx864_cur)
  rx864_restart2300:
    repr_get_attr_obj rx864_cstack, rx864_cur, rx864_curclass, "$!cstack"
  rx864_fail2301:
    unless rx864_bstack, rx864_done2299
    pop $I19, rx864_bstack
    if_null rx864_cstack, rx864_cstack_done2304
    unless rx864_cstack, rx864_cstack_done2304
    dec $I19
    set $P11, rx864_cstack[$I19]
  rx864_cstack_done2304:
    pop rx864_rep, rx864_bstack
    pop rx864_pos, rx864_bstack
    pop $I19, rx864_bstack
    lt rx864_pos, -1, rx864_done2299
    lt rx864_pos, 0, rx864_fail2301
    eq $I19, 0, rx864_fail2301
    nqp_islist $I20, rx864_cstack
    unless $I20, rx864_jump2302
    elements $I18, rx864_bstack
    le $I18, 0, rx864_cut2303
    dec $I18
    set $I18, rx864_bstack[$I18]
  rx864_cut2303:
    assign rx864_cstack, $I18
  rx864_jump2302:
    jump $I19
  rx864_done2299:
    rx864_cur."!cursor_fail"()
    .return (rx864_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_142_1346968539.359_caps" :subid("cuid_memo_220_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["const"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_142_1346968539.359_nfa" :subid("cuid_memo_221_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 112
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 105
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 114
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 58
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 58
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 99
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 2
    push $P5027, $P5028
    box $P5029, 111
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 2
    push $P5031, $P5032
    box $P5033, 110
    push $P5031, $P5033
    box $P5034, 9
    push $P5031, $P5034
    push $P5001, $P5031
    new $P5035, 'ResizablePMCArray'
    box $P5036, 2
    push $P5035, $P5036
    box $P5037, 115
    push $P5035, $P5037
    box $P5038, 10
    push $P5035, $P5038
    push $P5001, $P5035
    new $P5039, 'ResizablePMCArray'
    box $P5040, 2
    push $P5039, $P5040
    box $P5041, 116
    push $P5039, $P5041
    box $P5042, 11
    push $P5039, $P5042
    push $P5001, $P5039
    new $P5043, 'ResizablePMCArray'
    box $P5044, 2
    push $P5043, $P5044
    box $P5045, 58
    push $P5043, $P5045
    box $P5046, 12
    push $P5043, $P5046
    push $P5001, $P5043
    new $P5047, 'ResizablePMCArray'
    box $P5048, 2
    push $P5047, $P5048
    box $P5049, 58
    push $P5047, $P5049
    box $P5050, 13
    push $P5047, $P5050
    push $P5001, $P5047
    new $P5051, 'ResizablePMCArray'
    box $P5052, 1
    push $P5051, $P5052
    box $P5053, 0
    push $P5051, $P5053
    box $P5054, 14
    push $P5051, $P5054
    push $P5001, $P5051
    new $P5055, 'ResizablePMCArray'
    box $P5056, 4
    push $P5055, $P5056
    box $P5057, 8192
    push $P5055, $P5057
    box $P5058, 15
    push $P5055, $P5058
    push $P5001, $P5055
    new $P5059, 'ResizablePMCArray'
    box $P5060, 1
    push $P5059, $P5060
    box $P5061, 0
    push $P5059, $P5061
    box $P5062, 14
    push $P5059, $P5062
    box $P5063, 1
    push $P5059, $P5063
    box $P5064, 0
    push $P5059, $P5064
    box $P5065, 0
    push $P5059, $P5065
    push $P5001, $P5059
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<nqp::op>" :subid("cuid_143_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1152
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx868_tgt
    .local int rx868_pos
    .local int rx868_off
    .local int rx868_eos
    .local int rx868_rep
    .local pmc rx868_cur
    .local pmc rx868_curclass
    .local pmc rx868_bstack
    .local pmc rx868_cstack
    (rx868_cur, rx868_tgt, rx868_pos, rx868_curclass, rx868_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx868_cur
    length rx868_eos, rx868_tgt
    eq $I19, 1, rx868_restart2314
    gt rx868_pos, rx868_eos, rx868_fail2315
    repr_get_attr_int $I11, self, rx868_curclass, "$!from"
    ne $I11, -1, rxscan869_done2321
    goto rxscan869_scan2320
  rxscan869_loop2319:
    inc rx868_pos
    gt rx868_pos, rx868_eos, rx868_fail2315
    repr_bind_attr_int rx868_cur, rx868_curclass, "$!from", rx868_pos
  rxscan869_scan2320:
    nqp_rxmark rx868_bstack, rxscan869_loop2319, rx868_pos, 0
  rxscan869_done2321:
    add $I11, rx868_pos, 5
    gt $I11, rx868_eos, rx868_fail2315
    substr $S10, rx868_tgt, rx868_pos, 5
    ne $S10, ucs4:"nqp::", rx868_fail2315
    add rx868_pos, 5
    nqp_rxmark rx868_bstack, rxcap870_fail2323, rx868_pos, 0
    nqp_rxmark rx868_bstack, rxquantr871_done2325, -1, 0
  rxquantr871_loop2324:
    ge rx868_pos, rx868_eos, rx868_fail2315
    is_cclass $I11, .CCLASS_WORD, rx868_tgt, rx868_pos
    unless $I11, rx868_fail2315
    add rx868_pos, 1
    nqp_rxpeek $I19, rx868_bstack, rxquantr871_done2325
    inc $I19
    inc $I19
    set rx868_rep, rx868_bstack[$I19]
    nqp_rxcommit rx868_bstack, rxquantr871_done2325
    inc rx868_rep
    nqp_rxmark rx868_bstack, rxquantr871_done2325, rx868_pos, rx868_rep
    goto rxquantr871_loop2324
  rxquantr871_done2325:
    nqp_rxpeek $I19, rx868_bstack, rxcap870_fail2323
    inc $I19
    set $I11, rx868_bstack[$I19]
    $P11 = rx868_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx868_pos)
    rx868_cstack = rx868_cur."!cursor_capture"($P11, "op")
    goto rxcap870_done2322
  rxcap870_fail2323:
    goto rx868_fail2315
  rxcap870_done2322:
    nqp_rxmark rx868_bstack, rxquantr872_done2327, rx868_pos, 0
  rxquantr872_loop2326:
    repr_bind_attr_int rx868_cur, rx868_curclass, "$!pos", rx868_pos
    $P11 = rx868_cur."args"()
    repr_get_attr_int $I11, $P11, rx868_curclass, "$!pos"
    lt $I11, 0, rx868_fail2315
    goto rxsubrule873_pass2328
  rxsubrule873_back2329:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx868_curclass, "$!pos"
    lt $I11, 0, rx868_fail2315
  rxsubrule873_pass2328:
    rx868_cstack = rx868_cur."!cursor_capture"($P11, "args")
    set_addr $I11, rxsubrule873_back2329
    push rx868_bstack, $I11
    push rx868_bstack, 0
    push rx868_bstack, rx868_pos
    elements $I11, rx868_cstack
    push rx868_bstack, $I11
    repr_get_attr_int rx868_pos, $P11, rx868_curclass, "$!pos"
    nqp_rxpeek $I19, rx868_bstack, rxquantr872_done2327
    inc $I19
    inc $I19
    set rx868_rep, rx868_bstack[$I19]
    nqp_rxcommit rx868_bstack, rxquantr872_done2327
    inc rx868_rep
  rxquantr872_done2327:
    rx868_cur."!cursor_pass"(rx868_pos, "term:sym<nqp::op>", 'backtrack'=>1)
    .return (rx868_cur)
  rx868_restart2314:
    repr_get_attr_obj rx868_cstack, rx868_cur, rx868_curclass, "$!cstack"
  rx868_fail2315:
    unless rx868_bstack, rx868_done2313
    pop $I19, rx868_bstack
    if_null rx868_cstack, rx868_cstack_done2318
    unless rx868_cstack, rx868_cstack_done2318
    dec $I19
    set $P11, rx868_cstack[$I19]
  rx868_cstack_done2318:
    pop rx868_rep, rx868_bstack
    pop rx868_pos, rx868_bstack
    pop $I19, rx868_bstack
    lt rx868_pos, -1, rx868_done2313
    lt rx868_pos, 0, rx868_fail2315
    eq $I19, 0, rx868_fail2315
    nqp_islist $I20, rx868_cstack
    unless $I20, rx868_jump2316
    elements $I18, rx868_bstack
    le $I18, 0, rx868_cut2317
    dec $I18
    set $I18, rx868_bstack[$I18]
  rx868_cut2317:
    assign rx868_cstack, $I18
  rx868_jump2316:
    jump $I19
  rx868_done2313:
    rx868_cur."!cursor_fail"()
    .return (rx868_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_143_1346968539.359_caps" :subid("cuid_memo_222_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["op"], $P5002
    box $P5003, 2
    set $P5001["args"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_143_1346968539.359_nfa" :subid("cuid_memo_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 110
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 113
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 112
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 58
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 58
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 1
    push $P5023, $P5024
    box $P5025, 0
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 4
    push $P5027, $P5028
    box $P5029, 8192
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 1
    push $P5031, $P5032
    box $P5033, 0
    push $P5031, $P5033
    box $P5034, 7
    push $P5031, $P5034
    box $P5035, 1
    push $P5031, $P5035
    box $P5036, 0
    push $P5031, $P5036
    box $P5037, 9
    push $P5031, $P5037
    box $P5038, 8
    push $P5031, $P5038
    box $P5039, "args"
    push $P5031, $P5039
    box $P5040, 0
    push $P5031, $P5040
    box $P5041, 1
    push $P5031, $P5041
    box $P5042, 0
    push $P5031, $P5042
    box $P5043, 0
    push $P5031, $P5043
    push $P5001, $P5031
    new $P5044, 'ResizablePMCArray'
    push $P5001, $P5044
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<onlystar>" :subid("cuid_144_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1156
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_394_1346968539.359' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx874_tgt
    .local int rx874_pos
    .local int rx874_off
    .local int rx874_eos
    .local int rx874_rep
    .local pmc rx874_cur
    .local pmc rx874_curclass
    .local pmc rx874_bstack
    .local pmc rx874_cstack
    (rx874_cur, rx874_tgt, rx874_pos, rx874_curclass, rx874_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx874_cur
    length rx874_eos, rx874_tgt
    eq $I19, 1, rx874_restart2332
    gt rx874_pos, rx874_eos, rx874_fail2333
    repr_get_attr_int $I11, self, rx874_curclass, "$!from"
    ne $I11, -1, rxscan875_done2339
    goto rxscan875_scan2338
  rxscan875_loop2337:
    inc rx874_pos
    gt rx874_pos, rx874_eos, rx874_fail2333
    repr_bind_attr_int rx874_cur, rx874_curclass, "$!from", rx874_pos
  rxscan875_scan2338:
    nqp_rxmark rx874_bstack, rxscan875_loop2337, rx874_pos, 0
  rxscan875_done2339:
    add $I11, rx874_pos, 3
    gt $I11, rx874_eos, rx874_fail2333
    substr $S10, rx874_tgt, rx874_pos, 3
    ne $S10, ucs4:"{*}", rx874_fail2333
    add rx874_pos, 3
    repr_bind_attr_int rx874_cur, rx874_curclass, "$!pos", rx874_pos
    $P11 = rx874_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx874_curclass, "$!pos"
    lt $I11, 0, rx874_fail2333
  alt876_02341:
    nqp_rxmark rx874_bstack, alt876_12345, rx874_pos, 0
    repr_bind_attr_int rx874_cur, rx874_curclass, "$!pos", rx874_pos
    store_lex unicode:"$\x{a2}", rx874_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_394_1346968539.359' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx874_fail2333
    goto alt876_end2340
  alt876_12345:
    repr_bind_attr_int rx874_cur, rx874_curclass, "$!pos", rx874_pos
    $P11 = rx874_cur."panic"("{*} may only appear in proto")
    repr_get_attr_int $I11, $P11, rx874_curclass, "$!pos"
    lt $I11, 0, rx874_fail2333
    repr_get_attr_int rx874_pos, $P11, rx874_curclass, "$!pos"
  alt876_end2340:
    rx874_cur."!cursor_pass"(rx874_pos, "term:sym<onlystar>", 'backtrack'=>1)
    .return (rx874_cur)
  rx874_restart2332:
    repr_get_attr_obj rx874_cstack, rx874_cur, rx874_curclass, "$!cstack"
  rx874_fail2333:
    unless rx874_bstack, rx874_done2331
    pop $I19, rx874_bstack
    if_null rx874_cstack, rx874_cstack_done2336
    unless rx874_cstack, rx874_cstack_done2336
    dec $I19
    set $P11, rx874_cstack[$I19]
  rx874_cstack_done2336:
    pop rx874_rep, rx874_bstack
    pop rx874_pos, rx874_bstack
    pop $I19, rx874_bstack
    lt rx874_pos, -1, rx874_done2331
    lt rx874_pos, 0, rx874_fail2333
    eq $I19, 0, rx874_fail2333
    nqp_islist $I20, rx874_cstack
    unless $I20, rx874_jump2334
    elements $I18, rx874_bstack
    le $I18, 0, rx874_cut2335
    dec $I18
    set $I18, rx874_bstack[$I18]
  rx874_cut2335:
    assign rx874_cstack, $I18
  rx874_jump2334:
    jump $I19
  rx874_done2331:
    rx874_cur."!cursor_fail"()
    .return (rx874_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_144_1346968539.359_caps" :subid("cuid_memo_224_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_144_1346968539.359_nfa" :subid("cuid_memo_225_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 123
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 42
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 125
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "ENDSTMT"
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 0
    push $P5019, $P5020
    box $P5021, 0
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_394_1346968539.359") :anon :lex :outer("cuid_144_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1158

    find_dynamic_lex $P5001, "$*MULTINESS"
    unless_null $P5001, fallback2342
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["$MULTINESS"]
    unless_null $P5002, fallback2343
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5002, $P5005
  fallback2343:
    unless_null $P5002, vivi_8772344
    die "Contextual $*MULTINESS not found"
    box $P5006, "Contextual $*MULTINESS not found"
    set $P5002, $P5006
  vivi_8772344:
    set $P5001, $P5002
  fallback2342:
    set $S5001, $P5001
    iseq $I5001, $S5001, "proto"
    .return ($I5001) 
.end
.HLL "nqp"
.namespace []
.sub "args" :subid("cuid_145_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1161
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx879_tgt
    .local int rx879_pos
    .local int rx879_off
    .local int rx879_eos
    .local int rx879_rep
    .local pmc rx879_cur
    .local pmc rx879_curclass
    .local pmc rx879_bstack
    .local pmc rx879_cstack
    (rx879_cur, rx879_tgt, rx879_pos, rx879_curclass, rx879_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx879_cur
    length rx879_eos, rx879_tgt
    eq $I19, 1, rx879_restart2349
    gt rx879_pos, rx879_eos, rx879_fail2350
    repr_get_attr_int $I11, self, rx879_curclass, "$!from"
    ne $I11, -1, rxscan880_done2356
    goto rxscan880_scan2355
  rxscan880_loop2354:
    inc rx879_pos
    gt rx879_pos, rx879_eos, rx879_fail2350
    repr_bind_attr_int rx879_cur, rx879_curclass, "$!from", rx879_pos
  rxscan880_scan2355:
    nqp_rxmark rx879_bstack, rxscan880_loop2354, rx879_pos, 0
  rxscan880_done2356:
    add $I11, rx879_pos, 1
    gt $I11, rx879_eos, rx879_fail2350
    substr $S10, rx879_tgt, rx879_pos, 1
    ne $S10, ucs4:"(", rx879_fail2350
    add rx879_pos, 1
    repr_bind_attr_int rx879_cur, rx879_curclass, "$!pos", rx879_pos
    $P11 = rx879_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx879_curclass, "$!pos"
    lt $I11, 0, rx879_fail2350
    nqp_rxmark rx879_bstack, rxsubrule881_pass2357, -1, 0
  rxsubrule881_pass2357:
    rx879_cstack = rx879_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx879_pos, $P11, rx879_curclass, "$!pos"
    add $I11, rx879_pos, 1
    gt $I11, rx879_eos, rx879_fail2350
    substr $S10, rx879_tgt, rx879_pos, 1
    ne $S10, ucs4:")", rx879_fail2350
    add rx879_pos, 1
    rx879_cur."!cursor_pass"(rx879_pos, "args", 'backtrack'=>1)
    .return (rx879_cur)
  rx879_restart2349:
    repr_get_attr_obj rx879_cstack, rx879_cur, rx879_curclass, "$!cstack"
  rx879_fail2350:
    unless rx879_bstack, rx879_done2348
    pop $I19, rx879_bstack
    if_null rx879_cstack, rx879_cstack_done2353
    unless rx879_cstack, rx879_cstack_done2353
    dec $I19
    set $P11, rx879_cstack[$I19]
  rx879_cstack_done2353:
    pop rx879_rep, rx879_bstack
    pop rx879_pos, rx879_bstack
    pop $I19, rx879_bstack
    lt rx879_pos, -1, rx879_done2348
    lt rx879_pos, 0, rx879_fail2350
    eq $I19, 0, rx879_fail2350
    nqp_islist $I20, rx879_cstack
    unless $I20, rx879_jump2351
    elements $I18, rx879_bstack
    le $I18, 0, rx879_cut2352
    dec $I18
    set $I18, rx879_bstack[$I18]
  rx879_cut2352:
    assign rx879_cstack, $I18
  rx879_jump2351:
    jump $I19
  rx879_done2348:
    rx879_cur."!cursor_fail"()
    .return (rx879_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_145_1346968539.359_caps" :subid("cuid_memo_226_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["arglist"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_145_1346968539.359_nfa" :subid("cuid_memo_227_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 40
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "arglist"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 41
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "arglist" :subid("cuid_146_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1165
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx882_tgt
    .local int rx882_pos
    .local int rx882_off
    .local int rx882_eos
    .local int rx882_rep
    .local pmc rx882_cur
    .local pmc rx882_curclass
    .local pmc rx882_bstack
    .local pmc rx882_cstack
    (rx882_cur, rx882_tgt, rx882_pos, rx882_curclass, rx882_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx882_cur
    length rx882_eos, rx882_tgt
    eq $I19, 1, rx882_restart2360
    gt rx882_pos, rx882_eos, rx882_fail2361
    repr_get_attr_int $I11, self, rx882_curclass, "$!from"
    ne $I11, -1, rxscan883_done2367
    goto rxscan883_scan2366
  rxscan883_loop2365:
    inc rx882_pos
    gt rx882_pos, rx882_eos, rx882_fail2361
    repr_bind_attr_int rx882_cur, rx882_curclass, "$!from", rx882_pos
  rxscan883_scan2366:
    nqp_rxmark rx882_bstack, rxscan883_loop2365, rx882_pos, 0
  rxscan883_done2367:
    repr_bind_attr_int rx882_cur, rx882_curclass, "$!pos", rx882_pos
    $P11 = rx882_cur."ws"()
    repr_get_attr_int $I11, $P11, rx882_curclass, "$!pos"
    lt $I11, 0, rx882_fail2361
    repr_get_attr_int rx882_pos, $P11, rx882_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt885_02370
    nqp_push_label $P11, alt885_12372
    nqp_rxmark rx882_bstack, alt885_end2369, -1, 0
    rx882_cur."!alt"(rx882_pos, "alt_nfa__36_1346968541.959", $P11)
    goto rx882_fail2361
  alt885_02370:
    repr_bind_attr_int rx882_cur, rx882_curclass, "$!pos", rx882_pos
    $P11 = rx882_cur."EXPR"("f=")
    repr_get_attr_int $I11, $P11, rx882_curclass, "$!pos"
    lt $I11, 0, rx882_fail2361
    nqp_rxmark rx882_bstack, rxsubrule886_pass2371, -1, 0
  rxsubrule886_pass2371:
    rx882_cstack = rx882_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx882_pos, $P11, rx882_curclass, "$!pos"
    goto alt885_end2369
  alt885_12372:
    goto alt885_end2369
  alt885_end2369:
    nqp_rxcommit rx882_bstack, alt885_end2369
    rx882_cur."!cursor_pass"(rx882_pos, "arglist", 'backtrack'=>1)
    .return (rx882_cur)
  rx882_restart2360:
    repr_get_attr_obj rx882_cstack, rx882_cur, rx882_curclass, "$!cstack"
  rx882_fail2361:
    unless rx882_bstack, rx882_done2359
    pop $I19, rx882_bstack
    if_null rx882_cstack, rx882_cstack_done2364
    unless rx882_cstack, rx882_cstack_done2364
    dec $I19
    set $P11, rx882_cstack[$I19]
  rx882_cstack_done2364:
    pop rx882_rep, rx882_bstack
    pop rx882_pos, rx882_bstack
    pop $I19, rx882_bstack
    lt rx882_pos, -1, rx882_done2359
    lt rx882_pos, 0, rx882_fail2361
    eq $I19, 0, rx882_fail2361
    nqp_islist $I20, rx882_cstack
    unless $I20, rx882_jump2362
    elements $I18, rx882_bstack
    le $I18, 0, rx882_cut2363
    dec $I18
    set $I18, rx882_bstack[$I18]
  rx882_cut2363:
    assign rx882_cstack, $I18
  rx882_jump2362:
    jump $I19
  rx882_done2359:
    rx882_cur."!cursor_fail"()
    .return (rx882_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_146_1346968539.359_caps" :subid("cuid_memo_228_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["EXPR"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_146_1346968539.359_nfa" :subid("cuid_memo_229_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "ws"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "EXPR"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    box $P5011, 1
    push $P5007, $P5011
    box $P5012, 0
    push $P5007, $P5012
    box $P5013, 0
    push $P5007, $P5013
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_146_1346968539.359_alt_nfa__36_1346968541.959" :subid("cuid_memo_230_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 8
    push $P5004, $P5005
    box $P5006, "EXPR"
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 1
    push $P5010, $P5011
    box $P5012, 0
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    push $P5008, $P5010
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<value>" :subid("cuid_147_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1174
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx888_tgt
    .local int rx888_pos
    .local int rx888_off
    .local int rx888_eos
    .local int rx888_rep
    .local pmc rx888_cur
    .local pmc rx888_curclass
    .local pmc rx888_bstack
    .local pmc rx888_cstack
    (rx888_cur, rx888_tgt, rx888_pos, rx888_curclass, rx888_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx888_cur
    length rx888_eos, rx888_tgt
    eq $I19, 1, rx888_restart2376
    gt rx888_pos, rx888_eos, rx888_fail2377
    repr_get_attr_int $I11, self, rx888_curclass, "$!from"
    ne $I11, -1, rxscan889_done2383
    goto rxscan889_scan2382
  rxscan889_loop2381:
    inc rx888_pos
    gt rx888_pos, rx888_eos, rx888_fail2377
    repr_bind_attr_int rx888_cur, rx888_curclass, "$!from", rx888_pos
  rxscan889_scan2382:
    nqp_rxmark rx888_bstack, rxscan889_loop2381, rx888_pos, 0
  rxscan889_done2383:
    repr_bind_attr_int rx888_cur, rx888_curclass, "$!pos", rx888_pos
    $P11 = rx888_cur."value"()
    repr_get_attr_int $I11, $P11, rx888_curclass, "$!pos"
    lt $I11, 0, rx888_fail2377
    nqp_rxmark rx888_bstack, rxsubrule890_pass2384, -1, 0
  rxsubrule890_pass2384:
    rx888_cstack = rx888_cur."!cursor_capture"($P11, "value")
    repr_get_attr_int rx888_pos, $P11, rx888_curclass, "$!pos"
    rx888_cur."!cursor_pass"(rx888_pos, "term:sym<value>", 'backtrack'=>1)
    .return (rx888_cur)
  rx888_restart2376:
    repr_get_attr_obj rx888_cstack, rx888_cur, rx888_curclass, "$!cstack"
  rx888_fail2377:
    unless rx888_bstack, rx888_done2375
    pop $I19, rx888_bstack
    if_null rx888_cstack, rx888_cstack_done2380
    unless rx888_cstack, rx888_cstack_done2380
    dec $I19
    set $P11, rx888_cstack[$I19]
  rx888_cstack_done2380:
    pop rx888_rep, rx888_bstack
    pop rx888_pos, rx888_bstack
    pop $I19, rx888_bstack
    lt rx888_pos, -1, rx888_done2375
    lt rx888_pos, 0, rx888_fail2377
    eq $I19, 0, rx888_fail2377
    nqp_islist $I20, rx888_cstack
    unless $I20, rx888_jump2378
    elements $I18, rx888_bstack
    le $I18, 0, rx888_cut2379
    dec $I18
    set $I18, rx888_bstack[$I18]
  rx888_cut2379:
    assign rx888_cstack, $I18
  rx888_jump2378:
    jump $I19
  rx888_done2375:
    rx888_cur."!cursor_fail"()
    .return (rx888_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_147_1346968539.359_caps" :subid("cuid_memo_231_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["value"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_147_1346968539.359_nfa" :subid("cuid_memo_232_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "value"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "value" :subid("cuid_148_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1176
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx891_tgt
    .local int rx891_pos
    .local int rx891_off
    .local int rx891_eos
    .local int rx891_rep
    .local pmc rx891_cur
    .local pmc rx891_curclass
    .local pmc rx891_bstack
    .local pmc rx891_cstack
    (rx891_cur, rx891_tgt, rx891_pos, rx891_curclass, rx891_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx891_cur
    length rx891_eos, rx891_tgt
    eq $I19, 1, rx891_restart2387
    gt rx891_pos, rx891_eos, rx891_fail2388
    repr_get_attr_int $I11, self, rx891_curclass, "$!from"
    ne $I11, -1, rxscan892_done2394
    goto rxscan892_scan2393
  rxscan892_loop2392:
    inc rx891_pos
    gt rx891_pos, rx891_eos, rx891_fail2388
    repr_bind_attr_int rx891_cur, rx891_curclass, "$!from", rx891_pos
  rxscan892_scan2393:
    nqp_rxmark rx891_bstack, rxscan892_loop2392, rx891_pos, 0
  rxscan892_done2394:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt893_02396
    nqp_push_label $P11, alt893_12398
    nqp_rxmark rx891_bstack, alt893_end2395, -1, 0
    rx891_cur."!alt"(rx891_pos, "alt_nfa__37_1346968541.97", $P11)
    goto rx891_fail2388
  alt893_02396:
    repr_bind_attr_int rx891_cur, rx891_curclass, "$!pos", rx891_pos
    $P11 = rx891_cur."quote"()
    repr_get_attr_int $I11, $P11, rx891_curclass, "$!pos"
    lt $I11, 0, rx891_fail2388
    nqp_rxmark rx891_bstack, rxsubrule894_pass2397, -1, 0
  rxsubrule894_pass2397:
    rx891_cstack = rx891_cur."!cursor_capture"($P11, "quote")
    repr_get_attr_int rx891_pos, $P11, rx891_curclass, "$!pos"
    goto alt893_end2395
  alt893_12398:
    repr_bind_attr_int rx891_cur, rx891_curclass, "$!pos", rx891_pos
    $P11 = rx891_cur."number"()
    repr_get_attr_int $I11, $P11, rx891_curclass, "$!pos"
    lt $I11, 0, rx891_fail2388
    nqp_rxmark rx891_bstack, rxsubrule895_pass2399, -1, 0
  rxsubrule895_pass2399:
    rx891_cstack = rx891_cur."!cursor_capture"($P11, "number")
    repr_get_attr_int rx891_pos, $P11, rx891_curclass, "$!pos"
    goto alt893_end2395
  alt893_end2395:
    rx891_cur."!cursor_pass"(rx891_pos, "value", 'backtrack'=>1)
    .return (rx891_cur)
  rx891_restart2387:
    repr_get_attr_obj rx891_cstack, rx891_cur, rx891_curclass, "$!cstack"
  rx891_fail2388:
    unless rx891_bstack, rx891_done2386
    pop $I19, rx891_bstack
    if_null rx891_cstack, rx891_cstack_done2391
    unless rx891_cstack, rx891_cstack_done2391
    dec $I19
    set $P11, rx891_cstack[$I19]
  rx891_cstack_done2391:
    pop rx891_rep, rx891_bstack
    pop rx891_pos, rx891_bstack
    pop $I19, rx891_bstack
    lt rx891_pos, -1, rx891_done2386
    lt rx891_pos, 0, rx891_fail2388
    eq $I19, 0, rx891_fail2388
    nqp_islist $I20, rx891_cstack
    unless $I20, rx891_jump2389
    elements $I18, rx891_bstack
    le $I18, 0, rx891_cut2390
    dec $I18
    set $I18, rx891_bstack[$I18]
  rx891_cut2390:
    assign rx891_cstack, $I18
  rx891_jump2389:
    jump $I19
  rx891_done2386:
    rx891_cur."!cursor_fail"()
    .return (rx891_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_148_1346968539.359_caps" :subid("cuid_memo_233_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["quote"], $P5002
    box $P5003, 0
    set $P5001["number"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_148_1346968539.359_nfa" :subid("cuid_memo_234_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "quote"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    box $P5007, 8
    push $P5003, $P5007
    box $P5008, "number"
    push $P5003, $P5008
    box $P5009, 0
    push $P5003, $P5009
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_148_1346968539.359_alt_nfa__37_1346968541.97" :subid("cuid_memo_235_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 8
    push $P5004, $P5005
    box $P5006, "quote"
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 8
    push $P5010, $P5011
    box $P5012, "number"
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    push $P5008, $P5010
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "number" :subid("cuid_149_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1181
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx896_tgt
    .local int rx896_pos
    .local int rx896_off
    .local int rx896_eos
    .local int rx896_rep
    .local pmc rx896_cur
    .local pmc rx896_curclass
    .local pmc rx896_bstack
    .local pmc rx896_cstack
    (rx896_cur, rx896_tgt, rx896_pos, rx896_curclass, rx896_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx896_cur
    length rx896_eos, rx896_tgt
    eq $I19, 1, rx896_restart2402
    gt rx896_pos, rx896_eos, rx896_fail2403
    repr_get_attr_int $I11, self, rx896_curclass, "$!from"
    ne $I11, -1, rxscan897_done2409
    goto rxscan897_scan2408
  rxscan897_loop2407:
    inc rx896_pos
    gt rx896_pos, rx896_eos, rx896_fail2403
    repr_bind_attr_int rx896_cur, rx896_curclass, "$!from", rx896_pos
  rxscan897_scan2408:
    nqp_rxmark rx896_bstack, rxscan897_loop2407, rx896_pos, 0
  rxscan897_done2409:
    nqp_rxmark rx896_bstack, rxcap898_fail2411, rx896_pos, 0
    nqp_rxmark rx896_bstack, rxquantr899_done2413, rx896_pos, 0
  rxquantr899_loop2412:
  alt900_02415:
    nqp_rxmark rx896_bstack, alt900_12416, rx896_pos, 0
    add $I11, rx896_pos, 1
    gt $I11, rx896_eos, rx896_fail2403
    substr $S10, rx896_tgt, rx896_pos, 1
    ne $S10, ucs4:"-", rx896_fail2403
    add rx896_pos, 1
    goto alt900_end2414
  alt900_12416:
    ge rx896_pos, rx896_eos, rx896_fail2403
    substr $S11, rx896_tgt, rx896_pos, 1
    index $I11, ucs4:"+", $S11
    lt $I11, 0, rx896_fail2403
    inc rx896_pos
  alt900_end2414:
    nqp_rxpeek $I19, rx896_bstack, rxquantr899_done2413
    inc $I19
    inc $I19
    set rx896_rep, rx896_bstack[$I19]
    nqp_rxcommit rx896_bstack, rxquantr899_done2413
    inc rx896_rep
  rxquantr899_done2413:
    nqp_rxpeek $I19, rx896_bstack, rxcap898_fail2411
    inc $I19
    set $I11, rx896_bstack[$I19]
    $P11 = rx896_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx896_pos)
    rx896_cstack = rx896_cur."!cursor_capture"($P11, "sign")
    goto rxcap898_done2410
  rxcap898_fail2411:
    goto rx896_fail2403
  rxcap898_done2410:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt901_02418
    nqp_push_label $P11, alt901_12420
    nqp_rxmark rx896_bstack, alt901_end2417, -1, 0
    rx896_cur."!alt"(rx896_pos, "alt_nfa__38_1346968541.981", $P11)
    goto rx896_fail2403
  alt901_02418:
    repr_bind_attr_int rx896_cur, rx896_curclass, "$!pos", rx896_pos
    $P11 = rx896_cur."dec_number"()
    repr_get_attr_int $I11, $P11, rx896_curclass, "$!pos"
    lt $I11, 0, rx896_fail2403
    nqp_rxmark rx896_bstack, rxsubrule902_pass2419, -1, 0
  rxsubrule902_pass2419:
    rx896_cstack = rx896_cur."!cursor_capture"($P11, "dec_number")
    repr_get_attr_int rx896_pos, $P11, rx896_curclass, "$!pos"
    goto alt901_end2417
  alt901_12420:
    repr_bind_attr_int rx896_cur, rx896_curclass, "$!pos", rx896_pos
    $P11 = rx896_cur."integer"()
    repr_get_attr_int $I11, $P11, rx896_curclass, "$!pos"
    lt $I11, 0, rx896_fail2403
    nqp_rxmark rx896_bstack, rxsubrule903_pass2421, -1, 0
  rxsubrule903_pass2421:
    rx896_cstack = rx896_cur."!cursor_capture"($P11, "integer")
    repr_get_attr_int rx896_pos, $P11, rx896_curclass, "$!pos"
    goto alt901_end2417
  alt901_end2417:
    nqp_rxcommit rx896_bstack, alt901_end2417
    rx896_cur."!cursor_pass"(rx896_pos, "number", 'backtrack'=>1)
    .return (rx896_cur)
  rx896_restart2402:
    repr_get_attr_obj rx896_cstack, rx896_cur, rx896_curclass, "$!cstack"
  rx896_fail2403:
    unless rx896_bstack, rx896_done2401
    pop $I19, rx896_bstack
    if_null rx896_cstack, rx896_cstack_done2406
    unless rx896_cstack, rx896_cstack_done2406
    dec $I19
    set $P11, rx896_cstack[$I19]
  rx896_cstack_done2406:
    pop rx896_rep, rx896_bstack
    pop rx896_pos, rx896_bstack
    pop $I19, rx896_bstack
    lt rx896_pos, -1, rx896_done2401
    lt rx896_pos, 0, rx896_fail2403
    eq $I19, 0, rx896_fail2403
    nqp_islist $I20, rx896_cstack
    unless $I20, rx896_jump2404
    elements $I18, rx896_bstack
    le $I18, 0, rx896_cut2405
    dec $I18
    set $I18, rx896_bstack[$I18]
  rx896_cut2405:
    assign rx896_cstack, $I18
  rx896_jump2404:
    jump $I19
  rx896_done2401:
    rx896_cur."!cursor_fail"()
    .return (rx896_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_149_1346968539.359_caps" :subid("cuid_memo_236_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sign"], $P5002
    box $P5003, 0
    set $P5001["dec_number"], $P5003
    box $P5004, 0
    set $P5001["integer"], $P5004
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_149_1346968539.359_nfa" :subid("cuid_memo_237_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 0
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    box $P5007, 1
    push $P5003, $P5007
    box $P5008, 0
    push $P5003, $P5008
    box $P5009, 2
    push $P5003, $P5009
    push $P5001, $P5003
    new $P5010, 'ResizablePMCArray'
    box $P5011, 8
    push $P5010, $P5011
    box $P5012, "dec_number"
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    box $P5014, 8
    push $P5010, $P5014
    box $P5015, "integer"
    push $P5010, $P5015
    box $P5016, 0
    push $P5010, $P5016
    push $P5001, $P5010
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_149_1346968539.359_alt_nfa__38_1346968541.981" :subid("cuid_memo_238_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 8
    push $P5004, $P5005
    box $P5006, "dec_number"
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 8
    push $P5010, $P5011
    box $P5012, "integer"
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    push $P5008, $P5010
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote" :subid("cuid_150_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1186
    .param pmc self 
    $P5001 = self."!protoregex"("quote")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<apos>" :subid("cuid_151_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1187
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx904_tgt
    .local int rx904_pos
    .local int rx904_off
    .local int rx904_eos
    .local int rx904_rep
    .local pmc rx904_cur
    .local pmc rx904_curclass
    .local pmc rx904_bstack
    .local pmc rx904_cstack
    (rx904_cur, rx904_tgt, rx904_pos, rx904_curclass, rx904_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx904_cur
    length rx904_eos, rx904_tgt
    eq $I19, 1, rx904_restart2424
    gt rx904_pos, rx904_eos, rx904_fail2425
    repr_get_attr_int $I11, self, rx904_curclass, "$!from"
    ne $I11, -1, rxscan905_done2431
    goto rxscan905_scan2430
  rxscan905_loop2429:
    inc rx904_pos
    gt rx904_pos, rx904_eos, rx904_fail2425
    repr_bind_attr_int rx904_cur, rx904_curclass, "$!from", rx904_pos
  rxscan905_scan2430:
    nqp_rxmark rx904_bstack, rxscan905_loop2429, rx904_pos, 0
  rxscan905_done2431:
    ge rx904_pos, rx904_eos, rx904_fail2425
    substr $S11, rx904_tgt, rx904_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx904_fail2425
    repr_bind_attr_int rx904_cur, rx904_curclass, "$!pos", rx904_pos
    $P11 = rx904_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx904_curclass, "$!pos"
    lt $I11, 0, rx904_fail2425
    nqp_rxmark rx904_bstack, rxsubrule906_pass2432, -1, 0
  rxsubrule906_pass2432:
    rx904_cstack = rx904_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx904_pos, $P11, rx904_curclass, "$!pos"
    rx904_cur."!cursor_pass"(rx904_pos, "quote:sym<apos>", 'backtrack'=>1)
    .return (rx904_cur)
  rx904_restart2424:
    repr_get_attr_obj rx904_cstack, rx904_cur, rx904_curclass, "$!cstack"
  rx904_fail2425:
    unless rx904_bstack, rx904_done2423
    pop $I19, rx904_bstack
    if_null rx904_cstack, rx904_cstack_done2428
    unless rx904_cstack, rx904_cstack_done2428
    dec $I19
    set $P11, rx904_cstack[$I19]
  rx904_cstack_done2428:
    pop rx904_rep, rx904_bstack
    pop rx904_pos, rx904_bstack
    pop $I19, rx904_bstack
    lt rx904_pos, -1, rx904_done2423
    lt rx904_pos, 0, rx904_fail2425
    eq $I19, 0, rx904_fail2425
    nqp_islist $I20, rx904_cstack
    unless $I20, rx904_jump2426
    elements $I18, rx904_bstack
    le $I18, 0, rx904_cut2427
    dec $I18
    set $I18, rx904_bstack[$I18]
  rx904_cut2427:
    assign rx904_cstack, $I18
  rx904_jump2426:
    jump $I19
  rx904_done2423:
    rx904_cur."!cursor_fail"()
    .return (rx904_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_151_1346968539.359_caps" :subid("cuid_memo_239_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["quote_EXPR"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_151_1346968539.359_nfa" :subid("cuid_memo_240_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "'"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<dblq>" :subid("cuid_152_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1188
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx907_tgt
    .local int rx907_pos
    .local int rx907_off
    .local int rx907_eos
    .local int rx907_rep
    .local pmc rx907_cur
    .local pmc rx907_curclass
    .local pmc rx907_bstack
    .local pmc rx907_cstack
    (rx907_cur, rx907_tgt, rx907_pos, rx907_curclass, rx907_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx907_cur
    length rx907_eos, rx907_tgt
    eq $I19, 1, rx907_restart2435
    gt rx907_pos, rx907_eos, rx907_fail2436
    repr_get_attr_int $I11, self, rx907_curclass, "$!from"
    ne $I11, -1, rxscan908_done2442
    goto rxscan908_scan2441
  rxscan908_loop2440:
    inc rx907_pos
    gt rx907_pos, rx907_eos, rx907_fail2436
    repr_bind_attr_int rx907_cur, rx907_curclass, "$!from", rx907_pos
  rxscan908_scan2441:
    nqp_rxmark rx907_bstack, rxscan908_loop2440, rx907_pos, 0
  rxscan908_done2442:
    ge rx907_pos, rx907_eos, rx907_fail2436
    substr $S11, rx907_tgt, rx907_pos, 1
    index $I11, ucs4:"\"", $S11
    lt $I11, 0, rx907_fail2436
    repr_bind_attr_int rx907_cur, rx907_curclass, "$!pos", rx907_pos
    $P11 = rx907_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx907_curclass, "$!pos"
    lt $I11, 0, rx907_fail2436
    nqp_rxmark rx907_bstack, rxsubrule909_pass2443, -1, 0
  rxsubrule909_pass2443:
    rx907_cstack = rx907_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx907_pos, $P11, rx907_curclass, "$!pos"
    rx907_cur."!cursor_pass"(rx907_pos, "quote:sym<dblq>", 'backtrack'=>1)
    .return (rx907_cur)
  rx907_restart2435:
    repr_get_attr_obj rx907_cstack, rx907_cur, rx907_curclass, "$!cstack"
  rx907_fail2436:
    unless rx907_bstack, rx907_done2434
    pop $I19, rx907_bstack
    if_null rx907_cstack, rx907_cstack_done2439
    unless rx907_cstack, rx907_cstack_done2439
    dec $I19
    set $P11, rx907_cstack[$I19]
  rx907_cstack_done2439:
    pop rx907_rep, rx907_bstack
    pop rx907_pos, rx907_bstack
    pop $I19, rx907_bstack
    lt rx907_pos, -1, rx907_done2434
    lt rx907_pos, 0, rx907_fail2436
    eq $I19, 0, rx907_fail2436
    nqp_islist $I20, rx907_cstack
    unless $I20, rx907_jump2437
    elements $I18, rx907_bstack
    le $I18, 0, rx907_cut2438
    dec $I18
    set $I18, rx907_bstack[$I18]
  rx907_cut2438:
    assign rx907_cstack, $I18
  rx907_jump2437:
    jump $I19
  rx907_done2434:
    rx907_cur."!cursor_fail"()
    .return (rx907_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_152_1346968539.359_caps" :subid("cuid_memo_241_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["quote_EXPR"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_152_1346968539.359_nfa" :subid("cuid_memo_242_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "\""
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<q>" :subid("cuid_153_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1189
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx910_tgt
    .local int rx910_pos
    .local int rx910_off
    .local int rx910_eos
    .local int rx910_rep
    .local pmc rx910_cur
    .local pmc rx910_curclass
    .local pmc rx910_bstack
    .local pmc rx910_cstack
    (rx910_cur, rx910_tgt, rx910_pos, rx910_curclass, rx910_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx910_cur
    length rx910_eos, rx910_tgt
    eq $I19, 1, rx910_restart2446
    gt rx910_pos, rx910_eos, rx910_fail2447
    repr_get_attr_int $I11, self, rx910_curclass, "$!from"
    ne $I11, -1, rxscan911_done2453
    goto rxscan911_scan2452
  rxscan911_loop2451:
    inc rx910_pos
    gt rx910_pos, rx910_eos, rx910_fail2447
    repr_bind_attr_int rx910_cur, rx910_curclass, "$!from", rx910_pos
  rxscan911_scan2452:
    nqp_rxmark rx910_bstack, rxscan911_loop2451, rx910_pos, 0
  rxscan911_done2453:
    nqp_rxmark rx910_bstack, rxcap912_fail2455, rx910_pos, 0
    add $I11, rx910_pos, 1
    gt $I11, rx910_eos, rx910_fail2447
    substr $S10, rx910_tgt, rx910_pos, 1
    ne $S10, ucs4:"q", rx910_fail2447
    add rx910_pos, 1
    nqp_rxpeek $I19, rx910_bstack, rxcap912_fail2455
    inc $I19
    set $I11, rx910_bstack[$I19]
    $P11 = rx910_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx910_pos)
    rx910_cstack = rx910_cur."!cursor_capture"($P11, "sym")
    goto rxcap912_done2454
  rxcap912_fail2455:
    goto rx910_fail2447
  rxcap912_done2454:
    le rx910_pos, 0, rx910_fail2447
    is_cclass $I11, .CCLASS_WORD, rx910_tgt, rx910_pos
    if $I11, rx910_fail2447
    sub $I11, rx910_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx910_tgt, $I11
    unless $I11, rx910_fail2447
    ge rx910_pos, rx910_eos, rx910_fail2447
    substr $S11, rx910_tgt, rx910_pos, 1
    index $I11, ucs4:"(", $S11
    ge $I11, 0, rx910_fail2447
    repr_bind_attr_int rx910_cur, rx910_curclass, "$!pos", rx910_pos
    $P11 = rx910_cur."ws"()
    repr_get_attr_int $I11, $P11, rx910_curclass, "$!pos"
    lt $I11, 0, rx910_fail2447
    repr_get_attr_int rx910_pos, $P11, rx910_curclass, "$!pos"
    repr_bind_attr_int rx910_cur, rx910_curclass, "$!pos", rx910_pos
    $P11 = rx910_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx910_curclass, "$!pos"
    lt $I11, 0, rx910_fail2447
    nqp_rxmark rx910_bstack, rxsubrule915_pass2458, -1, 0
  rxsubrule915_pass2458:
    rx910_cstack = rx910_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx910_pos, $P11, rx910_curclass, "$!pos"
    rx910_cur."!cursor_pass"(rx910_pos, "quote:sym<q>", 'backtrack'=>1)
    .return (rx910_cur)
  rx910_restart2446:
    repr_get_attr_obj rx910_cstack, rx910_cur, rx910_curclass, "$!cstack"
  rx910_fail2447:
    unless rx910_bstack, rx910_done2445
    pop $I19, rx910_bstack
    if_null rx910_cstack, rx910_cstack_done2450
    unless rx910_cstack, rx910_cstack_done2450
    dec $I19
    set $P11, rx910_cstack[$I19]
  rx910_cstack_done2450:
    pop rx910_rep, rx910_bstack
    pop rx910_pos, rx910_bstack
    pop $I19, rx910_bstack
    lt rx910_pos, -1, rx910_done2445
    lt rx910_pos, 0, rx910_fail2447
    eq $I19, 0, rx910_fail2447
    nqp_islist $I20, rx910_cstack
    unless $I20, rx910_jump2448
    elements $I18, rx910_bstack
    le $I18, 0, rx910_cut2449
    dec $I18
    set $I18, rx910_bstack[$I18]
  rx910_cut2449:
    assign rx910_cstack, $I18
  rx910_jump2448:
    jump $I19
  rx910_done2445:
    rx910_cur."!cursor_fail"()
    .return (rx910_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_153_1346968539.359_caps" :subid("cuid_memo_243_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["quote_EXPR"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_153_1346968539.359_nfa" :subid("cuid_memo_244_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 113
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 7
    push $P5011, $P5012
    box $P5013, "("
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 0
    push $P5015, $P5016
    box $P5017, 0
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<qq>" :subid("cuid_154_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1190
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx916_tgt
    .local int rx916_pos
    .local int rx916_off
    .local int rx916_eos
    .local int rx916_rep
    .local pmc rx916_cur
    .local pmc rx916_curclass
    .local pmc rx916_bstack
    .local pmc rx916_cstack
    (rx916_cur, rx916_tgt, rx916_pos, rx916_curclass, rx916_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx916_cur
    length rx916_eos, rx916_tgt
    eq $I19, 1, rx916_restart2461
    gt rx916_pos, rx916_eos, rx916_fail2462
    repr_get_attr_int $I11, self, rx916_curclass, "$!from"
    ne $I11, -1, rxscan917_done2468
    goto rxscan917_scan2467
  rxscan917_loop2466:
    inc rx916_pos
    gt rx916_pos, rx916_eos, rx916_fail2462
    repr_bind_attr_int rx916_cur, rx916_curclass, "$!from", rx916_pos
  rxscan917_scan2467:
    nqp_rxmark rx916_bstack, rxscan917_loop2466, rx916_pos, 0
  rxscan917_done2468:
    nqp_rxmark rx916_bstack, rxcap918_fail2470, rx916_pos, 0
    add $I11, rx916_pos, 2
    gt $I11, rx916_eos, rx916_fail2462
    substr $S10, rx916_tgt, rx916_pos, 2
    ne $S10, ucs4:"qq", rx916_fail2462
    add rx916_pos, 2
    nqp_rxpeek $I19, rx916_bstack, rxcap918_fail2470
    inc $I19
    set $I11, rx916_bstack[$I19]
    $P11 = rx916_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx916_pos)
    rx916_cstack = rx916_cur."!cursor_capture"($P11, "sym")
    goto rxcap918_done2469
  rxcap918_fail2470:
    goto rx916_fail2462
  rxcap918_done2469:
    le rx916_pos, 0, rx916_fail2462
    is_cclass $I11, .CCLASS_WORD, rx916_tgt, rx916_pos
    if $I11, rx916_fail2462
    sub $I11, rx916_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx916_tgt, $I11
    unless $I11, rx916_fail2462
    ge rx916_pos, rx916_eos, rx916_fail2462
    substr $S11, rx916_tgt, rx916_pos, 1
    index $I11, ucs4:"(", $S11
    ge $I11, 0, rx916_fail2462
    repr_bind_attr_int rx916_cur, rx916_curclass, "$!pos", rx916_pos
    $P11 = rx916_cur."ws"()
    repr_get_attr_int $I11, $P11, rx916_curclass, "$!pos"
    lt $I11, 0, rx916_fail2462
    repr_get_attr_int rx916_pos, $P11, rx916_curclass, "$!pos"
    repr_bind_attr_int rx916_cur, rx916_curclass, "$!pos", rx916_pos
    $P11 = rx916_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx916_curclass, "$!pos"
    lt $I11, 0, rx916_fail2462
    nqp_rxmark rx916_bstack, rxsubrule921_pass2473, -1, 0
  rxsubrule921_pass2473:
    rx916_cstack = rx916_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx916_pos, $P11, rx916_curclass, "$!pos"
    rx916_cur."!cursor_pass"(rx916_pos, "quote:sym<qq>", 'backtrack'=>1)
    .return (rx916_cur)
  rx916_restart2461:
    repr_get_attr_obj rx916_cstack, rx916_cur, rx916_curclass, "$!cstack"
  rx916_fail2462:
    unless rx916_bstack, rx916_done2460
    pop $I19, rx916_bstack
    if_null rx916_cstack, rx916_cstack_done2465
    unless rx916_cstack, rx916_cstack_done2465
    dec $I19
    set $P11, rx916_cstack[$I19]
  rx916_cstack_done2465:
    pop rx916_rep, rx916_bstack
    pop rx916_pos, rx916_bstack
    pop $I19, rx916_bstack
    lt rx916_pos, -1, rx916_done2460
    lt rx916_pos, 0, rx916_fail2462
    eq $I19, 0, rx916_fail2462
    nqp_islist $I20, rx916_cstack
    unless $I20, rx916_jump2463
    elements $I18, rx916_bstack
    le $I18, 0, rx916_cut2464
    dec $I18
    set $I18, rx916_bstack[$I18]
  rx916_cut2464:
    assign rx916_cstack, $I18
  rx916_jump2463:
    jump $I19
  rx916_done2460:
    rx916_cur."!cursor_fail"()
    .return (rx916_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_154_1346968539.359_caps" :subid("cuid_memo_245_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["quote_EXPR"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_154_1346968539.359_nfa" :subid("cuid_memo_246_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 113
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 113
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 1
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 7
    push $P5015, $P5016
    box $P5017, "("
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 0
    push $P5019, $P5020
    box $P5021, 0
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q>" :subid("cuid_155_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1191
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx922_tgt
    .local int rx922_pos
    .local int rx922_off
    .local int rx922_eos
    .local int rx922_rep
    .local pmc rx922_cur
    .local pmc rx922_curclass
    .local pmc rx922_bstack
    .local pmc rx922_cstack
    (rx922_cur, rx922_tgt, rx922_pos, rx922_curclass, rx922_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx922_cur
    length rx922_eos, rx922_tgt
    eq $I19, 1, rx922_restart2476
    gt rx922_pos, rx922_eos, rx922_fail2477
    repr_get_attr_int $I11, self, rx922_curclass, "$!from"
    ne $I11, -1, rxscan923_done2483
    goto rxscan923_scan2482
  rxscan923_loop2481:
    inc rx922_pos
    gt rx922_pos, rx922_eos, rx922_fail2477
    repr_bind_attr_int rx922_cur, rx922_curclass, "$!from", rx922_pos
  rxscan923_scan2482:
    nqp_rxmark rx922_bstack, rxscan923_loop2481, rx922_pos, 0
  rxscan923_done2483:
    nqp_rxmark rx922_bstack, rxcap924_fail2485, rx922_pos, 0
    add $I11, rx922_pos, 1
    gt $I11, rx922_eos, rx922_fail2477
    substr $S10, rx922_tgt, rx922_pos, 1
    ne $S10, ucs4:"Q", rx922_fail2477
    add rx922_pos, 1
    nqp_rxpeek $I19, rx922_bstack, rxcap924_fail2485
    inc $I19
    set $I11, rx922_bstack[$I19]
    $P11 = rx922_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx922_pos)
    rx922_cstack = rx922_cur."!cursor_capture"($P11, "sym")
    goto rxcap924_done2484
  rxcap924_fail2485:
    goto rx922_fail2477
  rxcap924_done2484:
    le rx922_pos, 0, rx922_fail2477
    is_cclass $I11, .CCLASS_WORD, rx922_tgt, rx922_pos
    if $I11, rx922_fail2477
    sub $I11, rx922_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx922_tgt, $I11
    unless $I11, rx922_fail2477
    ge rx922_pos, rx922_eos, rx922_fail2477
    substr $S11, rx922_tgt, rx922_pos, 1
    index $I11, ucs4:"(", $S11
    ge $I11, 0, rx922_fail2477
    repr_bind_attr_int rx922_cur, rx922_curclass, "$!pos", rx922_pos
    $P11 = rx922_cur."ws"()
    repr_get_attr_int $I11, $P11, rx922_curclass, "$!pos"
    lt $I11, 0, rx922_fail2477
    repr_get_attr_int rx922_pos, $P11, rx922_curclass, "$!pos"
    repr_bind_attr_int rx922_cur, rx922_curclass, "$!pos", rx922_pos
    $P11 = rx922_cur."quote_EXPR"()
    repr_get_attr_int $I11, $P11, rx922_curclass, "$!pos"
    lt $I11, 0, rx922_fail2477
    nqp_rxmark rx922_bstack, rxsubrule927_pass2488, -1, 0
  rxsubrule927_pass2488:
    rx922_cstack = rx922_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx922_pos, $P11, rx922_curclass, "$!pos"
    rx922_cur."!cursor_pass"(rx922_pos, "quote:sym<Q>", 'backtrack'=>1)
    .return (rx922_cur)
  rx922_restart2476:
    repr_get_attr_obj rx922_cstack, rx922_cur, rx922_curclass, "$!cstack"
  rx922_fail2477:
    unless rx922_bstack, rx922_done2475
    pop $I19, rx922_bstack
    if_null rx922_cstack, rx922_cstack_done2480
    unless rx922_cstack, rx922_cstack_done2480
    dec $I19
    set $P11, rx922_cstack[$I19]
  rx922_cstack_done2480:
    pop rx922_rep, rx922_bstack
    pop rx922_pos, rx922_bstack
    pop $I19, rx922_bstack
    lt rx922_pos, -1, rx922_done2475
    lt rx922_pos, 0, rx922_fail2477
    eq $I19, 0, rx922_fail2477
    nqp_islist $I20, rx922_cstack
    unless $I20, rx922_jump2478
    elements $I18, rx922_bstack
    le $I18, 0, rx922_cut2479
    dec $I18
    set $I18, rx922_bstack[$I18]
  rx922_cut2479:
    assign rx922_cstack, $I18
  rx922_jump2478:
    jump $I19
  rx922_done2475:
    rx922_cur."!cursor_fail"()
    .return (rx922_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_155_1346968539.359_caps" :subid("cuid_memo_247_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["quote_EXPR"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_155_1346968539.359_nfa" :subid("cuid_memo_248_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 81
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 7
    push $P5011, $P5012
    box $P5013, "("
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 0
    push $P5015, $P5016
    box $P5017, 0
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q:PIR>" :subid("cuid_156_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1192
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx928_tgt
    .local int rx928_pos
    .local int rx928_off
    .local int rx928_eos
    .local int rx928_rep
    .local pmc rx928_cur
    .local pmc rx928_curclass
    .local pmc rx928_bstack
    .local pmc rx928_cstack
    (rx928_cur, rx928_tgt, rx928_pos, rx928_curclass, rx928_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx928_cur
    length rx928_eos, rx928_tgt
    eq $I19, 1, rx928_restart2491
    gt rx928_pos, rx928_eos, rx928_fail2492
    repr_get_attr_int $I11, self, rx928_curclass, "$!from"
    ne $I11, -1, rxscan929_done2498
    goto rxscan929_scan2497
  rxscan929_loop2496:
    inc rx928_pos
    gt rx928_pos, rx928_eos, rx928_fail2492
    repr_bind_attr_int rx928_cur, rx928_curclass, "$!from", rx928_pos
  rxscan929_scan2497:
    nqp_rxmark rx928_bstack, rxscan929_loop2496, rx928_pos, 0
  rxscan929_done2498:
    nqp_rxmark rx928_bstack, rxcap930_fail2500, rx928_pos, 0
    add $I11, rx928_pos, 5
    gt $I11, rx928_eos, rx928_fail2492
    substr $S10, rx928_tgt, rx928_pos, 5
    ne $S10, ucs4:"Q:PIR", rx928_fail2492
    add rx928_pos, 5
    nqp_rxpeek $I19, rx928_bstack, rxcap930_fail2500
    inc $I19
    set $I11, rx928_bstack[$I19]
    $P11 = rx928_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx928_pos)
    rx928_cstack = rx928_cur."!cursor_capture"($P11, "sym")
    goto rxcap930_done2499
  rxcap930_fail2500:
    goto rx928_fail2492
  rxcap930_done2499:
    repr_bind_attr_int rx928_cur, rx928_curclass, "$!pos", rx928_pos
    $P11 = rx928_cur."ws"()
    repr_get_attr_int $I11, $P11, rx928_curclass, "$!pos"
    lt $I11, 0, rx928_fail2492
    repr_get_attr_int rx928_pos, $P11, rx928_curclass, "$!pos"
    repr_bind_attr_int rx928_cur, rx928_curclass, "$!pos", rx928_pos
    $P11 = rx928_cur."quote_EXPR"()
    repr_get_attr_int $I11, $P11, rx928_curclass, "$!pos"
    lt $I11, 0, rx928_fail2492
    nqp_rxmark rx928_bstack, rxsubrule932_pass2502, -1, 0
  rxsubrule932_pass2502:
    rx928_cstack = rx928_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx928_pos, $P11, rx928_curclass, "$!pos"
    rx928_cur."!cursor_pass"(rx928_pos, "quote:sym<Q:PIR>", 'backtrack'=>1)
    .return (rx928_cur)
  rx928_restart2491:
    repr_get_attr_obj rx928_cstack, rx928_cur, rx928_curclass, "$!cstack"
  rx928_fail2492:
    unless rx928_bstack, rx928_done2490
    pop $I19, rx928_bstack
    if_null rx928_cstack, rx928_cstack_done2495
    unless rx928_cstack, rx928_cstack_done2495
    dec $I19
    set $P11, rx928_cstack[$I19]
  rx928_cstack_done2495:
    pop rx928_rep, rx928_bstack
    pop rx928_pos, rx928_bstack
    pop $I19, rx928_bstack
    lt rx928_pos, -1, rx928_done2490
    lt rx928_pos, 0, rx928_fail2492
    eq $I19, 0, rx928_fail2492
    nqp_islist $I20, rx928_cstack
    unless $I20, rx928_jump2493
    elements $I18, rx928_bstack
    le $I18, 0, rx928_cut2494
    dec $I18
    set $I18, rx928_bstack[$I18]
  rx928_cut2494:
    assign rx928_cstack, $I18
  rx928_jump2493:
    jump $I19
  rx928_done2490:
    rx928_cur."!cursor_fail"()
    .return (rx928_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_156_1346968539.359_caps" :subid("cuid_memo_249_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["quote_EXPR"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_156_1346968539.359_nfa" :subid("cuid_memo_250_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 81
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 58
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 80
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 73
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 82
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 8
    push $P5023, $P5024
    box $P5025, "ws"
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "quote_EXPR"
    push $P5027, $P5029
    box $P5030, 0
    push $P5027, $P5030
    push $P5001, $P5027
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym</ />" :subid("cuid_157_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1193
    .param pmc _lex_param_0 
    .lex "%*RX", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    new $P5001, 'Hash'
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx933_tgt
    .local int rx933_pos
    .local int rx933_off
    .local int rx933_eos
    .local int rx933_rep
    .local pmc rx933_cur
    .local pmc rx933_curclass
    .local pmc rx933_bstack
    .local pmc rx933_cstack
    (rx933_cur, rx933_tgt, rx933_pos, rx933_curclass, rx933_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx933_cur
    length rx933_eos, rx933_tgt
    eq $I19, 1, rx933_restart2505
    gt rx933_pos, rx933_eos, rx933_fail2506
    repr_get_attr_int $I11, self, rx933_curclass, "$!from"
    ne $I11, -1, rxscan934_done2512
    goto rxscan934_scan2511
  rxscan934_loop2510:
    inc rx933_pos
    gt rx933_pos, rx933_eos, rx933_fail2506
    repr_bind_attr_int rx933_cur, rx933_curclass, "$!from", rx933_pos
  rxscan934_scan2511:
    nqp_rxmark rx933_bstack, rxscan934_loop2510, rx933_pos, 0
  rxscan934_done2512:
    add $I11, rx933_pos, 1
    gt $I11, rx933_eos, rx933_fail2506
    substr $S10, rx933_tgt, rx933_pos, 1
    ne $S10, ucs4:"/", rx933_fail2506
    add rx933_pos, 1
    repr_bind_attr_int rx933_cur, rx933_curclass, "$!pos", rx933_pos
    $P11 = rx933_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx933_curclass, "$!pos"
    lt $I11, 0, rx933_fail2506
    repr_get_attr_int rx933_pos, $P11, rx933_curclass, "$!pos"
    repr_bind_attr_int rx933_cur, rx933_curclass, "$!pos", rx933_pos
    store_lex unicode:"$\x{a2}", rx933_cur
    unless_null $P101, fallback2514
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["%RX"]
    unless_null $P5002, fallback2515
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%RX"], $P5007
    set $P5002, $P5007
  fallback2515:
    unless_null $P5002, vivi_9362516
    die "Contextual %*RX not found"
    box $P5008, "Contextual %*RX not found"
    set $P5002, $P5008
  vivi_9362516:
    set $P101, $P5002
  fallback2514:
    repr_bind_attr_int rx933_cur, rx933_curclass, "$!pos", rx933_pos
    $P11 = rx933_cur."LANG"("Regex", "nibbler")
    repr_get_attr_int $I11, $P11, rx933_curclass, "$!pos"
    lt $I11, 0, rx933_fail2506
    nqp_rxmark rx933_bstack, rxsubrule937_pass2517, -1, 0
  rxsubrule937_pass2517:
    rx933_cstack = rx933_cur."!cursor_capture"($P11, "p6regex")
    repr_get_attr_int rx933_pos, $P11, rx933_curclass, "$!pos"
    add $I11, rx933_pos, 1
    gt $I11, rx933_eos, rx933_fail2506
    substr $S10, rx933_tgt, rx933_pos, 1
    ne $S10, ucs4:"/", rx933_fail2506
    add rx933_pos, 1
    rx933_cur."!cursor_pass"(rx933_pos, "quote:sym</ />", 'backtrack'=>1)
    .return (rx933_cur)
  rx933_restart2505:
    repr_get_attr_obj rx933_cstack, rx933_cur, rx933_curclass, "$!cstack"
  rx933_fail2506:
    unless rx933_bstack, rx933_done2504
    pop $I19, rx933_bstack
    if_null rx933_cstack, rx933_cstack_done2509
    unless rx933_cstack, rx933_cstack_done2509
    dec $I19
    set $P11, rx933_cstack[$I19]
  rx933_cstack_done2509:
    pop rx933_rep, rx933_bstack
    pop rx933_pos, rx933_bstack
    pop $I19, rx933_bstack
    lt rx933_pos, -1, rx933_done2504
    lt rx933_pos, 0, rx933_fail2506
    eq $I19, 0, rx933_fail2506
    nqp_islist $I20, rx933_cstack
    unless $I20, rx933_jump2507
    elements $I18, rx933_bstack
    le $I18, 0, rx933_cut2508
    dec $I18
    set $I18, rx933_bstack[$I18]
  rx933_cut2508:
    assign rx933_cstack, $I18
  rx933_jump2507:
    jump $I19
  rx933_done2504:
    rx933_cur."!cursor_fail"()
    .return (rx933_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_157_1346968539.359_caps" :subid("cuid_memo_251_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["p6regex"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_157_1346968539.359_nfa" :subid("cuid_memo_252_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 47
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "newpad"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 1
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "LANG"
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 47
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<$>" :subid("cuid_158_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1201
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx938_tgt
    .local int rx938_pos
    .local int rx938_off
    .local int rx938_eos
    .local int rx938_rep
    .local pmc rx938_cur
    .local pmc rx938_curclass
    .local pmc rx938_bstack
    .local pmc rx938_cstack
    (rx938_cur, rx938_tgt, rx938_pos, rx938_curclass, rx938_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx938_cur
    length rx938_eos, rx938_tgt
    eq $I19, 1, rx938_restart2520
    gt rx938_pos, rx938_eos, rx938_fail2521
    repr_get_attr_int $I11, self, rx938_curclass, "$!from"
    ne $I11, -1, rxscan939_done2527
    goto rxscan939_scan2526
  rxscan939_loop2525:
    inc rx938_pos
    gt rx938_pos, rx938_eos, rx938_fail2521
    repr_bind_attr_int rx938_cur, rx938_curclass, "$!from", rx938_pos
  rxscan939_scan2526:
    nqp_rxmark rx938_bstack, rxscan939_loop2525, rx938_pos, 0
  rxscan939_done2527:
    ge rx938_pos, rx938_eos, rx938_fail2521
    substr $S11, rx938_tgt, rx938_pos, 1
    index $I11, ucs4:"$", $S11
    lt $I11, 0, rx938_fail2521
    repr_bind_attr_int rx938_cur, rx938_curclass, "$!pos", rx938_pos
    $P11 = rx938_cur."quotemod_check"("s")
    repr_get_attr_int $I11, $P11, rx938_curclass, "$!pos"
    lt $I11, 0, rx938_fail2521
    repr_bind_attr_int rx938_cur, rx938_curclass, "$!pos", rx938_pos
    $P11 = rx938_cur."variable"()
    repr_get_attr_int $I11, $P11, rx938_curclass, "$!pos"
    lt $I11, 0, rx938_fail2521
    nqp_rxmark rx938_bstack, rxsubrule940_pass2528, -1, 0
  rxsubrule940_pass2528:
    rx938_cstack = rx938_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx938_pos, $P11, rx938_curclass, "$!pos"
    rx938_cur."!cursor_pass"(rx938_pos, "quote_escape:sym<$>", 'backtrack'=>1)
    .return (rx938_cur)
  rx938_restart2520:
    repr_get_attr_obj rx938_cstack, rx938_cur, rx938_curclass, "$!cstack"
  rx938_fail2521:
    unless rx938_bstack, rx938_done2519
    pop $I19, rx938_bstack
    if_null rx938_cstack, rx938_cstack_done2524
    unless rx938_cstack, rx938_cstack_done2524
    dec $I19
    set $P11, rx938_cstack[$I19]
  rx938_cstack_done2524:
    pop rx938_rep, rx938_bstack
    pop rx938_pos, rx938_bstack
    pop $I19, rx938_bstack
    lt rx938_pos, -1, rx938_done2519
    lt rx938_pos, 0, rx938_fail2521
    eq $I19, 0, rx938_fail2521
    nqp_islist $I20, rx938_cstack
    unless $I20, rx938_jump2522
    elements $I18, rx938_bstack
    le $I18, 0, rx938_cut2523
    dec $I18
    set $I18, rx938_bstack[$I18]
  rx938_cut2523:
    assign rx938_cstack, $I18
  rx938_jump2522:
    jump $I19
  rx938_done2519:
    rx938_cur."!cursor_fail"()
    .return (rx938_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_158_1346968539.359_caps" :subid("cuid_memo_253_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["variable"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_158_1346968539.359_nfa" :subid("cuid_memo_254_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "$"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<{ }>" :subid("cuid_159_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1202
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx941_tgt
    .local int rx941_pos
    .local int rx941_off
    .local int rx941_eos
    .local int rx941_rep
    .local pmc rx941_cur
    .local pmc rx941_curclass
    .local pmc rx941_bstack
    .local pmc rx941_cstack
    (rx941_cur, rx941_tgt, rx941_pos, rx941_curclass, rx941_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx941_cur
    length rx941_eos, rx941_tgt
    eq $I19, 1, rx941_restart2531
    gt rx941_pos, rx941_eos, rx941_fail2532
    repr_get_attr_int $I11, self, rx941_curclass, "$!from"
    ne $I11, -1, rxscan942_done2538
    goto rxscan942_scan2537
  rxscan942_loop2536:
    inc rx941_pos
    gt rx941_pos, rx941_eos, rx941_fail2532
    repr_bind_attr_int rx941_cur, rx941_curclass, "$!from", rx941_pos
  rxscan942_scan2537:
    nqp_rxmark rx941_bstack, rxscan942_loop2536, rx941_pos, 0
  rxscan942_done2538:
    ge rx941_pos, rx941_eos, rx941_fail2532
    substr $S11, rx941_tgt, rx941_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx941_fail2532
    repr_bind_attr_int rx941_cur, rx941_curclass, "$!pos", rx941_pos
    $P11 = rx941_cur."quotemod_check"("c")
    repr_get_attr_int $I11, $P11, rx941_curclass, "$!pos"
    lt $I11, 0, rx941_fail2532
    repr_bind_attr_int rx941_cur, rx941_curclass, "$!pos", rx941_pos
    $P11 = rx941_cur."block"()
    repr_get_attr_int $I11, $P11, rx941_curclass, "$!pos"
    lt $I11, 0, rx941_fail2532
    nqp_rxmark rx941_bstack, rxsubrule943_pass2539, -1, 0
  rxsubrule943_pass2539:
    rx941_cstack = rx941_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx941_pos, $P11, rx941_curclass, "$!pos"
    rx941_cur."!cursor_pass"(rx941_pos, "quote_escape:sym<{ }>", 'backtrack'=>1)
    .return (rx941_cur)
  rx941_restart2531:
    repr_get_attr_obj rx941_cstack, rx941_cur, rx941_curclass, "$!cstack"
  rx941_fail2532:
    unless rx941_bstack, rx941_done2530
    pop $I19, rx941_bstack
    if_null rx941_cstack, rx941_cstack_done2535
    unless rx941_cstack, rx941_cstack_done2535
    dec $I19
    set $P11, rx941_cstack[$I19]
  rx941_cstack_done2535:
    pop rx941_rep, rx941_bstack
    pop rx941_pos, rx941_bstack
    pop $I19, rx941_bstack
    lt rx941_pos, -1, rx941_done2530
    lt rx941_pos, 0, rx941_fail2532
    eq $I19, 0, rx941_fail2532
    nqp_islist $I20, rx941_cstack
    unless $I20, rx941_jump2533
    elements $I18, rx941_bstack
    le $I18, 0, rx941_cut2534
    dec $I18
    set $I18, rx941_bstack[$I18]
  rx941_cut2534:
    assign rx941_cstack, $I18
  rx941_jump2533:
    jump $I19
  rx941_done2530:
    rx941_cur."!cursor_fail"()
    .return (rx941_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_159_1346968539.359_caps" :subid("cuid_memo_255_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["block"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_159_1346968539.359_nfa" :subid("cuid_memo_256_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "{"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<esc>" :subid("cuid_160_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1203
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx944_tgt
    .local int rx944_pos
    .local int rx944_off
    .local int rx944_eos
    .local int rx944_rep
    .local pmc rx944_cur
    .local pmc rx944_curclass
    .local pmc rx944_bstack
    .local pmc rx944_cstack
    (rx944_cur, rx944_tgt, rx944_pos, rx944_curclass, rx944_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx944_cur
    length rx944_eos, rx944_tgt
    eq $I19, 1, rx944_restart2542
    gt rx944_pos, rx944_eos, rx944_fail2543
    repr_get_attr_int $I11, self, rx944_curclass, "$!from"
    ne $I11, -1, rxscan945_done2549
    goto rxscan945_scan2548
  rxscan945_loop2547:
    inc rx944_pos
    gt rx944_pos, rx944_eos, rx944_fail2543
    repr_bind_attr_int rx944_cur, rx944_curclass, "$!from", rx944_pos
  rxscan945_scan2548:
    nqp_rxmark rx944_bstack, rxscan945_loop2547, rx944_pos, 0
  rxscan945_done2549:
    add $I11, rx944_pos, 2
    gt $I11, rx944_eos, rx944_fail2543
    substr $S10, rx944_tgt, rx944_pos, 2
    ne $S10, ucs4:"\\e", rx944_fail2543
    add rx944_pos, 2
    repr_bind_attr_int rx944_cur, rx944_curclass, "$!pos", rx944_pos
    $P11 = rx944_cur."quotemod_check"("b")
    repr_get_attr_int $I11, $P11, rx944_curclass, "$!pos"
    lt $I11, 0, rx944_fail2543
    rx944_cur."!cursor_pass"(rx944_pos, "quote_escape:sym<esc>", 'backtrack'=>1)
    .return (rx944_cur)
  rx944_restart2542:
    repr_get_attr_obj rx944_cstack, rx944_cur, rx944_curclass, "$!cstack"
  rx944_fail2543:
    unless rx944_bstack, rx944_done2541
    pop $I19, rx944_bstack
    if_null rx944_cstack, rx944_cstack_done2546
    unless rx944_cstack, rx944_cstack_done2546
    dec $I19
    set $P11, rx944_cstack[$I19]
  rx944_cstack_done2546:
    pop rx944_rep, rx944_bstack
    pop rx944_pos, rx944_bstack
    pop $I19, rx944_bstack
    lt rx944_pos, -1, rx944_done2541
    lt rx944_pos, 0, rx944_fail2543
    eq $I19, 0, rx944_fail2543
    nqp_islist $I20, rx944_cstack
    unless $I20, rx944_jump2544
    elements $I18, rx944_bstack
    le $I18, 0, rx944_cut2545
    dec $I18
    set $I18, rx944_bstack[$I18]
  rx944_cut2545:
    assign rx944_cstack, $I18
  rx944_jump2544:
    jump $I19
  rx944_done2541:
    rx944_cur."!cursor_fail"()
    .return (rx944_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_160_1346968539.359_caps" :subid("cuid_memo_257_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_160_1346968539.359_nfa" :subid("cuid_memo_258_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 92
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 101
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "quotemod_check"
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 0
    push $P5015, $P5016
    box $P5017, 0
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<( )>" :subid("cuid_161_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1205
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx946_tgt
    .local int rx946_pos
    .local int rx946_off
    .local int rx946_eos
    .local int rx946_rep
    .local pmc rx946_cur
    .local pmc rx946_curclass
    .local pmc rx946_bstack
    .local pmc rx946_cstack
    (rx946_cur, rx946_tgt, rx946_pos, rx946_curclass, rx946_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx946_cur
    length rx946_eos, rx946_tgt
    eq $I19, 1, rx946_restart2552
    gt rx946_pos, rx946_eos, rx946_fail2553
    repr_get_attr_int $I11, self, rx946_curclass, "$!from"
    ne $I11, -1, rxscan947_done2559
    goto rxscan947_scan2558
  rxscan947_loop2557:
    inc rx946_pos
    gt rx946_pos, rx946_eos, rx946_fail2553
    repr_bind_attr_int rx946_cur, rx946_curclass, "$!from", rx946_pos
  rxscan947_scan2558:
    nqp_rxmark rx946_bstack, rxscan947_loop2557, rx946_pos, 0
  rxscan947_done2559:
    add $I11, rx946_pos, 1
    gt $I11, rx946_eos, rx946_fail2553
    substr $S10, rx946_tgt, rx946_pos, 1
    ne $S10, ucs4:"(", rx946_fail2553
    add rx946_pos, 1
    repr_bind_attr_int rx946_cur, rx946_curclass, "$!pos", rx946_pos
    $P11 = rx946_cur."ws"()
    repr_get_attr_int $I11, $P11, rx946_curclass, "$!pos"
    lt $I11, 0, rx946_fail2553
    repr_get_attr_int rx946_pos, $P11, rx946_curclass, "$!pos"
    nqp_rxmark rx946_bstack, rxquantr949_done2562, rx946_pos, 0
  rxquantr949_loop2561:
    repr_bind_attr_int rx946_cur, rx946_curclass, "$!pos", rx946_pos
    $P11 = rx946_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx946_curclass, "$!pos"
    lt $I11, 0, rx946_fail2553
    goto rxsubrule950_pass2563
  rxsubrule950_back2564:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx946_curclass, "$!pos"
    lt $I11, 0, rx946_fail2553
  rxsubrule950_pass2563:
    rx946_cstack = rx946_cur."!cursor_capture"($P11, "EXPR")
    set_addr $I11, rxsubrule950_back2564
    push rx946_bstack, $I11
    push rx946_bstack, 0
    push rx946_bstack, rx946_pos
    elements $I11, rx946_cstack
    push rx946_bstack, $I11
    repr_get_attr_int rx946_pos, $P11, rx946_curclass, "$!pos"
    nqp_rxpeek $I19, rx946_bstack, rxquantr949_done2562
    inc $I19
    inc $I19
    set rx946_rep, rx946_bstack[$I19]
    nqp_rxcommit rx946_bstack, rxquantr949_done2562
    inc rx946_rep
  rxquantr949_done2562:
    add $I11, rx946_pos, 1
    gt $I11, rx946_eos, rx946_fail2553
    substr $S10, rx946_tgt, rx946_pos, 1
    ne $S10, ucs4:")", rx946_fail2553
    add rx946_pos, 1
    rx946_cur."!cursor_pass"(rx946_pos, "circumfix:sym<( )>", 'backtrack'=>1)
    .return (rx946_cur)
  rx946_restart2552:
    repr_get_attr_obj rx946_cstack, rx946_cur, rx946_curclass, "$!cstack"
  rx946_fail2553:
    unless rx946_bstack, rx946_done2551
    pop $I19, rx946_bstack
    if_null rx946_cstack, rx946_cstack_done2556
    unless rx946_cstack, rx946_cstack_done2556
    dec $I19
    set $P11, rx946_cstack[$I19]
  rx946_cstack_done2556:
    pop rx946_rep, rx946_bstack
    pop rx946_pos, rx946_bstack
    pop $I19, rx946_bstack
    lt rx946_pos, -1, rx946_done2551
    lt rx946_pos, 0, rx946_fail2553
    eq $I19, 0, rx946_fail2553
    nqp_islist $I20, rx946_cstack
    unless $I20, rx946_jump2554
    elements $I18, rx946_bstack
    le $I18, 0, rx946_cut2555
    dec $I18
    set $I18, rx946_bstack[$I18]
  rx946_cut2555:
    assign rx946_cstack, $I18
  rx946_jump2554:
    jump $I19
  rx946_done2551:
    rx946_cur."!cursor_fail"()
    .return (rx946_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_161_1346968539.359_caps" :subid("cuid_memo_259_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 2
    set $P5001["EXPR"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_161_1346968539.359_nfa" :subid("cuid_memo_260_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 40
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "ws"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "EXPR"
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    box $P5015, 1
    push $P5011, $P5015
    box $P5016, 0
    push $P5011, $P5016
    box $P5017, 4
    push $P5011, $P5017
    push $P5001, $P5011
    new $P5018, 'ResizablePMCArray'
    box $P5019, 2
    push $P5018, $P5019
    box $P5020, 41
    push $P5018, $P5020
    box $P5021, 0
    push $P5018, $P5021
    push $P5001, $P5018
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<[ ]>" :subid("cuid_162_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1206
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx951_tgt
    .local int rx951_pos
    .local int rx951_off
    .local int rx951_eos
    .local int rx951_rep
    .local pmc rx951_cur
    .local pmc rx951_curclass
    .local pmc rx951_bstack
    .local pmc rx951_cstack
    (rx951_cur, rx951_tgt, rx951_pos, rx951_curclass, rx951_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx951_cur
    length rx951_eos, rx951_tgt
    eq $I19, 1, rx951_restart2567
    gt rx951_pos, rx951_eos, rx951_fail2568
    repr_get_attr_int $I11, self, rx951_curclass, "$!from"
    ne $I11, -1, rxscan952_done2574
    goto rxscan952_scan2573
  rxscan952_loop2572:
    inc rx951_pos
    gt rx951_pos, rx951_eos, rx951_fail2568
    repr_bind_attr_int rx951_cur, rx951_curclass, "$!from", rx951_pos
  rxscan952_scan2573:
    nqp_rxmark rx951_bstack, rxscan952_loop2572, rx951_pos, 0
  rxscan952_done2574:
    add $I11, rx951_pos, 1
    gt $I11, rx951_eos, rx951_fail2568
    substr $S10, rx951_tgt, rx951_pos, 1
    ne $S10, ucs4:"[", rx951_fail2568
    add rx951_pos, 1
    repr_bind_attr_int rx951_cur, rx951_curclass, "$!pos", rx951_pos
    $P11 = rx951_cur."ws"()
    repr_get_attr_int $I11, $P11, rx951_curclass, "$!pos"
    lt $I11, 0, rx951_fail2568
    repr_get_attr_int rx951_pos, $P11, rx951_curclass, "$!pos"
    nqp_rxmark rx951_bstack, rxquantr954_done2577, rx951_pos, 0
  rxquantr954_loop2576:
    repr_bind_attr_int rx951_cur, rx951_curclass, "$!pos", rx951_pos
    $P11 = rx951_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx951_curclass, "$!pos"
    lt $I11, 0, rx951_fail2568
    goto rxsubrule955_pass2578
  rxsubrule955_back2579:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx951_curclass, "$!pos"
    lt $I11, 0, rx951_fail2568
  rxsubrule955_pass2578:
    rx951_cstack = rx951_cur."!cursor_capture"($P11, "EXPR")
    set_addr $I11, rxsubrule955_back2579
    push rx951_bstack, $I11
    push rx951_bstack, 0
    push rx951_bstack, rx951_pos
    elements $I11, rx951_cstack
    push rx951_bstack, $I11
    repr_get_attr_int rx951_pos, $P11, rx951_curclass, "$!pos"
    nqp_rxpeek $I19, rx951_bstack, rxquantr954_done2577
    inc $I19
    inc $I19
    set rx951_rep, rx951_bstack[$I19]
    nqp_rxcommit rx951_bstack, rxquantr954_done2577
    inc rx951_rep
  rxquantr954_done2577:
    add $I11, rx951_pos, 1
    gt $I11, rx951_eos, rx951_fail2568
    substr $S10, rx951_tgt, rx951_pos, 1
    ne $S10, ucs4:"]", rx951_fail2568
    add rx951_pos, 1
    rx951_cur."!cursor_pass"(rx951_pos, "circumfix:sym<[ ]>", 'backtrack'=>1)
    .return (rx951_cur)
  rx951_restart2567:
    repr_get_attr_obj rx951_cstack, rx951_cur, rx951_curclass, "$!cstack"
  rx951_fail2568:
    unless rx951_bstack, rx951_done2566
    pop $I19, rx951_bstack
    if_null rx951_cstack, rx951_cstack_done2571
    unless rx951_cstack, rx951_cstack_done2571
    dec $I19
    set $P11, rx951_cstack[$I19]
  rx951_cstack_done2571:
    pop rx951_rep, rx951_bstack
    pop rx951_pos, rx951_bstack
    pop $I19, rx951_bstack
    lt rx951_pos, -1, rx951_done2566
    lt rx951_pos, 0, rx951_fail2568
    eq $I19, 0, rx951_fail2568
    nqp_islist $I20, rx951_cstack
    unless $I20, rx951_jump2569
    elements $I18, rx951_bstack
    le $I18, 0, rx951_cut2570
    dec $I18
    set $I18, rx951_bstack[$I18]
  rx951_cut2570:
    assign rx951_cstack, $I18
  rx951_jump2569:
    jump $I19
  rx951_done2566:
    rx951_cur."!cursor_fail"()
    .return (rx951_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_162_1346968539.359_caps" :subid("cuid_memo_261_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 2
    set $P5001["EXPR"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_162_1346968539.359_nfa" :subid("cuid_memo_262_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 91
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "ws"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "EXPR"
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    box $P5015, 1
    push $P5011, $P5015
    box $P5016, 0
    push $P5011, $P5016
    box $P5017, 4
    push $P5011, $P5017
    push $P5001, $P5011
    new $P5018, 'ResizablePMCArray'
    box $P5019, 2
    push $P5018, $P5019
    box $P5020, 93
    push $P5018, $P5020
    box $P5021, 0
    push $P5018, $P5021
    push $P5001, $P5018
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<ang>" :subid("cuid_163_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1207
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx956_tgt
    .local int rx956_pos
    .local int rx956_off
    .local int rx956_eos
    .local int rx956_rep
    .local pmc rx956_cur
    .local pmc rx956_curclass
    .local pmc rx956_bstack
    .local pmc rx956_cstack
    (rx956_cur, rx956_tgt, rx956_pos, rx956_curclass, rx956_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx956_cur
    length rx956_eos, rx956_tgt
    eq $I19, 1, rx956_restart2582
    gt rx956_pos, rx956_eos, rx956_fail2583
    repr_get_attr_int $I11, self, rx956_curclass, "$!from"
    ne $I11, -1, rxscan957_done2589
    goto rxscan957_scan2588
  rxscan957_loop2587:
    inc rx956_pos
    gt rx956_pos, rx956_eos, rx956_fail2583
    repr_bind_attr_int rx956_cur, rx956_curclass, "$!from", rx956_pos
  rxscan957_scan2588:
    nqp_rxmark rx956_bstack, rxscan957_loop2587, rx956_pos, 0
  rxscan957_done2589:
    ge rx956_pos, rx956_eos, rx956_fail2583
    substr $S11, rx956_tgt, rx956_pos, 1
    index $I11, ucs4:"<", $S11
    lt $I11, 0, rx956_fail2583
    repr_bind_attr_int rx956_cur, rx956_curclass, "$!pos", rx956_pos
    $P11 = rx956_cur."quote_EXPR"(":q", ":w")
    repr_get_attr_int $I11, $P11, rx956_curclass, "$!pos"
    lt $I11, 0, rx956_fail2583
    nqp_rxmark rx956_bstack, rxsubrule958_pass2590, -1, 0
  rxsubrule958_pass2590:
    rx956_cstack = rx956_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx956_pos, $P11, rx956_curclass, "$!pos"
    rx956_cur."!cursor_pass"(rx956_pos, "circumfix:sym<ang>", 'backtrack'=>1)
    .return (rx956_cur)
  rx956_restart2582:
    repr_get_attr_obj rx956_cstack, rx956_cur, rx956_curclass, "$!cstack"
  rx956_fail2583:
    unless rx956_bstack, rx956_done2581
    pop $I19, rx956_bstack
    if_null rx956_cstack, rx956_cstack_done2586
    unless rx956_cstack, rx956_cstack_done2586
    dec $I19
    set $P11, rx956_cstack[$I19]
  rx956_cstack_done2586:
    pop rx956_rep, rx956_bstack
    pop rx956_pos, rx956_bstack
    pop $I19, rx956_bstack
    lt rx956_pos, -1, rx956_done2581
    lt rx956_pos, 0, rx956_fail2583
    eq $I19, 0, rx956_fail2583
    nqp_islist $I20, rx956_cstack
    unless $I20, rx956_jump2584
    elements $I18, rx956_bstack
    le $I18, 0, rx956_cut2585
    dec $I18
    set $I18, rx956_bstack[$I18]
  rx956_cut2585:
    assign rx956_cstack, $I18
  rx956_jump2584:
    jump $I19
  rx956_done2581:
    rx956_cur."!cursor_fail"()
    .return (rx956_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_163_1346968539.359_caps" :subid("cuid_memo_263_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["quote_EXPR"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_163_1346968539.359_nfa" :subid("cuid_memo_264_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "<"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub utf8:"circumfix:sym<\x{ab} \x{bb}>" :subid("cuid_164_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1208
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx959_tgt
    .local int rx959_pos
    .local int rx959_off
    .local int rx959_eos
    .local int rx959_rep
    .local pmc rx959_cur
    .local pmc rx959_curclass
    .local pmc rx959_bstack
    .local pmc rx959_cstack
    (rx959_cur, rx959_tgt, rx959_pos, rx959_curclass, rx959_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx959_cur
    length rx959_eos, rx959_tgt
    eq $I19, 1, rx959_restart2593
    gt rx959_pos, rx959_eos, rx959_fail2594
    repr_get_attr_int $I11, self, rx959_curclass, "$!from"
    ne $I11, -1, rxscan960_done2600
    goto rxscan960_scan2599
  rxscan960_loop2598:
    inc rx959_pos
    gt rx959_pos, rx959_eos, rx959_fail2594
    repr_bind_attr_int rx959_cur, rx959_curclass, "$!from", rx959_pos
  rxscan960_scan2599:
    nqp_rxmark rx959_bstack, rxscan960_loop2598, rx959_pos, 0
  rxscan960_done2600:
    ge rx959_pos, rx959_eos, rx959_fail2594
    substr $S11, rx959_tgt, rx959_pos, 1
    index $I11, ucs4:"\x{ab}", $S11
    lt $I11, 0, rx959_fail2594
    repr_bind_attr_int rx959_cur, rx959_curclass, "$!pos", rx959_pos
    $P11 = rx959_cur."quote_EXPR"(":qq", ":w")
    repr_get_attr_int $I11, $P11, rx959_curclass, "$!pos"
    lt $I11, 0, rx959_fail2594
    nqp_rxmark rx959_bstack, rxsubrule961_pass2601, -1, 0
  rxsubrule961_pass2601:
    rx959_cstack = rx959_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx959_pos, $P11, rx959_curclass, "$!pos"
    rx959_cur."!cursor_pass"(rx959_pos, utf8:"circumfix:sym<\x{ab} \x{bb}>", 'backtrack'=>1)
    .return (rx959_cur)
  rx959_restart2593:
    repr_get_attr_obj rx959_cstack, rx959_cur, rx959_curclass, "$!cstack"
  rx959_fail2594:
    unless rx959_bstack, rx959_done2592
    pop $I19, rx959_bstack
    if_null rx959_cstack, rx959_cstack_done2597
    unless rx959_cstack, rx959_cstack_done2597
    dec $I19
    set $P11, rx959_cstack[$I19]
  rx959_cstack_done2597:
    pop rx959_rep, rx959_bstack
    pop rx959_pos, rx959_bstack
    pop $I19, rx959_bstack
    lt rx959_pos, -1, rx959_done2592
    lt rx959_pos, 0, rx959_fail2594
    eq $I19, 0, rx959_fail2594
    nqp_islist $I20, rx959_cstack
    unless $I20, rx959_jump2595
    elements $I18, rx959_bstack
    le $I18, 0, rx959_cut2596
    dec $I18
    set $I18, rx959_bstack[$I18]
  rx959_cut2596:
    assign rx959_cstack, $I18
  rx959_jump2595:
    jump $I19
  rx959_done2592:
    rx959_cur."!cursor_fail"()
    .return (rx959_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_164_1346968539.359_caps" :subid("cuid_memo_265_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["quote_EXPR"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_164_1346968539.359_nfa" :subid("cuid_memo_266_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, utf8:"\x{ab}"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<{ }>" :subid("cuid_165_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1209
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx962_tgt
    .local int rx962_pos
    .local int rx962_off
    .local int rx962_eos
    .local int rx962_rep
    .local pmc rx962_cur
    .local pmc rx962_curclass
    .local pmc rx962_bstack
    .local pmc rx962_cstack
    (rx962_cur, rx962_tgt, rx962_pos, rx962_curclass, rx962_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx962_cur
    length rx962_eos, rx962_tgt
    eq $I19, 1, rx962_restart2604
    gt rx962_pos, rx962_eos, rx962_fail2605
    repr_get_attr_int $I11, self, rx962_curclass, "$!from"
    ne $I11, -1, rxscan963_done2611
    goto rxscan963_scan2610
  rxscan963_loop2609:
    inc rx962_pos
    gt rx962_pos, rx962_eos, rx962_fail2605
    repr_bind_attr_int rx962_cur, rx962_curclass, "$!from", rx962_pos
  rxscan963_scan2610:
    nqp_rxmark rx962_bstack, rxscan963_loop2609, rx962_pos, 0
  rxscan963_done2611:
    ge rx962_pos, rx962_eos, rx962_fail2605
    substr $S11, rx962_tgt, rx962_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx962_fail2605
    repr_bind_attr_int rx962_cur, rx962_curclass, "$!pos", rx962_pos
    $P11 = rx962_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx962_curclass, "$!pos"
    lt $I11, 0, rx962_fail2605
    nqp_rxmark rx962_bstack, rxsubrule964_pass2612, -1, 0
  rxsubrule964_pass2612:
    rx962_cstack = rx962_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx962_pos, $P11, rx962_curclass, "$!pos"
    rx962_cur."!cursor_pass"(rx962_pos, "circumfix:sym<{ }>", 'backtrack'=>1)
    .return (rx962_cur)
  rx962_restart2604:
    repr_get_attr_obj rx962_cstack, rx962_cur, rx962_curclass, "$!cstack"
  rx962_fail2605:
    unless rx962_bstack, rx962_done2603
    pop $I19, rx962_bstack
    if_null rx962_cstack, rx962_cstack_done2608
    unless rx962_cstack, rx962_cstack_done2608
    dec $I19
    set $P11, rx962_cstack[$I19]
  rx962_cstack_done2608:
    pop rx962_rep, rx962_bstack
    pop rx962_pos, rx962_bstack
    pop $I19, rx962_bstack
    lt rx962_pos, -1, rx962_done2603
    lt rx962_pos, 0, rx962_fail2605
    eq $I19, 0, rx962_fail2605
    nqp_islist $I20, rx962_cstack
    unless $I20, rx962_jump2606
    elements $I18, rx962_bstack
    le $I18, 0, rx962_cut2607
    dec $I18
    set $I18, rx962_bstack[$I18]
  rx962_cut2607:
    assign rx962_cstack, $I18
  rx962_jump2606:
    jump $I19
  rx962_done2603:
    rx962_cur."!cursor_fail"()
    .return (rx962_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_165_1346968539.359_caps" :subid("cuid_memo_267_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["pblock"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_165_1346968539.359_nfa" :subid("cuid_memo_268_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "{"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<sigil>" :subid("cuid_166_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1210
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx965_tgt
    .local int rx965_pos
    .local int rx965_off
    .local int rx965_eos
    .local int rx965_rep
    .local pmc rx965_cur
    .local pmc rx965_curclass
    .local pmc rx965_bstack
    .local pmc rx965_cstack
    (rx965_cur, rx965_tgt, rx965_pos, rx965_curclass, rx965_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx965_cur
    length rx965_eos, rx965_tgt
    eq $I19, 1, rx965_restart2615
    gt rx965_pos, rx965_eos, rx965_fail2616
    repr_get_attr_int $I11, self, rx965_curclass, "$!from"
    ne $I11, -1, rxscan966_done2622
    goto rxscan966_scan2621
  rxscan966_loop2620:
    inc rx965_pos
    gt rx965_pos, rx965_eos, rx965_fail2616
    repr_bind_attr_int rx965_cur, rx965_curclass, "$!from", rx965_pos
  rxscan966_scan2621:
    nqp_rxmark rx965_bstack, rxscan966_loop2620, rx965_pos, 0
  rxscan966_done2622:
    repr_bind_attr_int rx965_cur, rx965_curclass, "$!pos", rx965_pos
    $P11 = rx965_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx965_curclass, "$!pos"
    lt $I11, 0, rx965_fail2616
    nqp_rxmark rx965_bstack, rxsubrule967_pass2623, -1, 0
  rxsubrule967_pass2623:
    rx965_cstack = rx965_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx965_pos, $P11, rx965_curclass, "$!pos"
    add $I11, rx965_pos, 1
    gt $I11, rx965_eos, rx965_fail2616
    substr $S10, rx965_tgt, rx965_pos, 1
    ne $S10, ucs4:"(", rx965_fail2616
    add rx965_pos, 1
    repr_bind_attr_int rx965_cur, rx965_curclass, "$!pos", rx965_pos
    $P11 = rx965_cur."semilist"()
    repr_get_attr_int $I11, $P11, rx965_curclass, "$!pos"
    lt $I11, 0, rx965_fail2616
    nqp_rxmark rx965_bstack, rxsubrule968_pass2624, -1, 0
  rxsubrule968_pass2624:
    rx965_cstack = rx965_cur."!cursor_capture"($P11, "semilist")
    repr_get_attr_int rx965_pos, $P11, rx965_curclass, "$!pos"
  alt969_02626:
    nqp_rxmark rx965_bstack, alt969_12627, rx965_pos, 0
    add $I11, rx965_pos, 1
    gt $I11, rx965_eos, rx965_fail2616
    substr $S10, rx965_tgt, rx965_pos, 1
    ne $S10, ucs4:")", rx965_fail2616
    add rx965_pos, 1
    goto alt969_end2625
  alt969_12627:
    repr_bind_attr_int rx965_cur, rx965_curclass, "$!pos", rx965_pos
    $P11 = rx965_cur."FAILGOAL"("')'")
    repr_get_attr_int $I11, $P11, rx965_curclass, "$!pos"
    lt $I11, 0, rx965_fail2616
    goto rxsubrule970_pass2628
  rxsubrule970_back2629:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx965_curclass, "$!pos"
    lt $I11, 0, rx965_fail2616
  rxsubrule970_pass2628:
    rx965_cstack = rx965_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule970_back2629
    push rx965_bstack, $I11
    push rx965_bstack, 0
    push rx965_bstack, rx965_pos
    elements $I11, rx965_cstack
    push rx965_bstack, $I11
    repr_get_attr_int rx965_pos, $P11, rx965_curclass, "$!pos"
  alt969_end2625:
    rx965_cur."!cursor_pass"(rx965_pos, "circumfix:sym<sigil>", 'backtrack'=>1)
    .return (rx965_cur)
  rx965_restart2615:
    repr_get_attr_obj rx965_cstack, rx965_cur, rx965_curclass, "$!cstack"
  rx965_fail2616:
    unless rx965_bstack, rx965_done2614
    pop $I19, rx965_bstack
    if_null rx965_cstack, rx965_cstack_done2619
    unless rx965_cstack, rx965_cstack_done2619
    dec $I19
    set $P11, rx965_cstack[$I19]
  rx965_cstack_done2619:
    pop rx965_rep, rx965_bstack
    pop rx965_pos, rx965_bstack
    pop $I19, rx965_bstack
    lt rx965_pos, -1, rx965_done2614
    lt rx965_pos, 0, rx965_fail2616
    eq $I19, 0, rx965_fail2616
    nqp_islist $I20, rx965_cstack
    unless $I20, rx965_jump2617
    elements $I18, rx965_bstack
    le $I18, 0, rx965_cut2618
    dec $I18
    set $I18, rx965_bstack[$I18]
  rx965_cut2618:
    assign rx965_cstack, $I18
  rx965_jump2617:
    jump $I19
  rx965_done2614:
    rx965_cur."!cursor_fail"()
    .return (rx965_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_166_1346968539.359_caps" :subid("cuid_memo_269_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sigil"], $P5002
    box $P5003, 0
    set $P5001["semilist"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_166_1346968539.359_nfa" :subid("cuid_memo_270_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "sigil"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 40
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "semilist"
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 0
    push $P5015, $P5016
    box $P5017, 0
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "semilist" :subid("cuid_167_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1212
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx971_tgt
    .local int rx971_pos
    .local int rx971_off
    .local int rx971_eos
    .local int rx971_rep
    .local pmc rx971_cur
    .local pmc rx971_curclass
    .local pmc rx971_bstack
    .local pmc rx971_cstack
    (rx971_cur, rx971_tgt, rx971_pos, rx971_curclass, rx971_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx971_cur
    length rx971_eos, rx971_tgt
    eq $I19, 1, rx971_restart2632
    gt rx971_pos, rx971_eos, rx971_fail2633
    repr_get_attr_int $I11, self, rx971_curclass, "$!from"
    ne $I11, -1, rxscan972_done2639
    goto rxscan972_scan2638
  rxscan972_loop2637:
    inc rx971_pos
    gt rx971_pos, rx971_eos, rx971_fail2633
    repr_bind_attr_int rx971_cur, rx971_curclass, "$!from", rx971_pos
  rxscan972_scan2638:
    nqp_rxmark rx971_bstack, rxscan972_loop2637, rx971_pos, 0
  rxscan972_done2639:
    repr_bind_attr_int rx971_cur, rx971_curclass, "$!pos", rx971_pos
    $P11 = rx971_cur."ws"()
    repr_get_attr_int $I11, $P11, rx971_curclass, "$!pos"
    lt $I11, 0, rx971_fail2633
    repr_get_attr_int rx971_pos, $P11, rx971_curclass, "$!pos"
    repr_bind_attr_int rx971_cur, rx971_curclass, "$!pos", rx971_pos
    $P11 = rx971_cur."statement"()
    repr_get_attr_int $I11, $P11, rx971_curclass, "$!pos"
    lt $I11, 0, rx971_fail2633
    nqp_rxmark rx971_bstack, rxsubrule974_pass2641, -1, 0
  rxsubrule974_pass2641:
    rx971_cstack = rx971_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx971_pos, $P11, rx971_curclass, "$!pos"
    repr_bind_attr_int rx971_cur, rx971_curclass, "$!pos", rx971_pos
    $P11 = rx971_cur."ws"()
    repr_get_attr_int $I11, $P11, rx971_curclass, "$!pos"
    lt $I11, 0, rx971_fail2633
    repr_get_attr_int rx971_pos, $P11, rx971_curclass, "$!pos"
    rx971_cur."!cursor_pass"(rx971_pos, "semilist", 'backtrack'=>1)
    .return (rx971_cur)
  rx971_restart2632:
    repr_get_attr_obj rx971_cstack, rx971_cur, rx971_curclass, "$!cstack"
  rx971_fail2633:
    unless rx971_bstack, rx971_done2631
    pop $I19, rx971_bstack
    if_null rx971_cstack, rx971_cstack_done2636
    unless rx971_cstack, rx971_cstack_done2636
    dec $I19
    set $P11, rx971_cstack[$I19]
  rx971_cstack_done2636:
    pop rx971_rep, rx971_bstack
    pop rx971_pos, rx971_bstack
    pop $I19, rx971_bstack
    lt rx971_pos, -1, rx971_done2631
    lt rx971_pos, 0, rx971_fail2633
    eq $I19, 0, rx971_fail2633
    nqp_islist $I20, rx971_cstack
    unless $I20, rx971_jump2634
    elements $I18, rx971_bstack
    le $I18, 0, rx971_cut2635
    dec $I18
    set $I18, rx971_bstack[$I18]
  rx971_cut2635:
    assign rx971_cstack, $I18
  rx971_jump2634:
    jump $I19
  rx971_done2631:
    rx971_cur."!cursor_fail"()
    .return (rx971_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_167_1346968539.359_caps" :subid("cuid_memo_271_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["statement"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infixish" :subid("cuid_168_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1235
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx976_tgt
    .local int rx976_pos
    .local int rx976_off
    .local int rx976_eos
    .local int rx976_rep
    .local pmc rx976_cur
    .local pmc rx976_curclass
    .local pmc rx976_bstack
    .local pmc rx976_cstack
    (rx976_cur, rx976_tgt, rx976_pos, rx976_curclass, rx976_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx976_cur
    length rx976_eos, rx976_tgt
    eq $I19, 1, rx976_restart2645
    gt rx976_pos, rx976_eos, rx976_fail2646
    repr_get_attr_int $I11, self, rx976_curclass, "$!from"
    ne $I11, -1, rxscan977_done2652
    goto rxscan977_scan2651
  rxscan977_loop2650:
    inc rx976_pos
    gt rx976_pos, rx976_eos, rx976_fail2646
    repr_bind_attr_int rx976_cur, rx976_curclass, "$!from", rx976_pos
  rxscan977_scan2651:
    nqp_rxmark rx976_bstack, rxscan977_loop2650, rx976_pos, 0
  rxscan977_done2652:
    repr_bind_attr_int rx976_cur, rx976_curclass, "$!pos", rx976_pos
    $P11 = rx976_cur."infixstopper"()
    repr_get_attr_int $I11, $P11, rx976_curclass, "$!pos"
    ge $I11, 0, rx976_fail2646
    repr_bind_attr_int rx976_cur, rx976_curclass, "$!pos", rx976_pos
    $P11 = rx976_cur."infix"()
    repr_get_attr_int $I11, $P11, rx976_curclass, "$!pos"
    lt $I11, 0, rx976_fail2646
    nqp_rxmark rx976_bstack, rxsubrule978_pass2653, -1, 0
  rxsubrule978_pass2653:
    rx976_cstack = rx976_cur."!cursor_capture"($P11, "OPER=infix")
    repr_get_attr_int rx976_pos, $P11, rx976_curclass, "$!pos"
    rx976_cur."!cursor_pass"(rx976_pos, "infixish", 'backtrack'=>1)
    .return (rx976_cur)
  rx976_restart2645:
    repr_get_attr_obj rx976_cstack, rx976_cur, rx976_curclass, "$!cstack"
  rx976_fail2646:
    unless rx976_bstack, rx976_done2644
    pop $I19, rx976_bstack
    if_null rx976_cstack, rx976_cstack_done2649
    unless rx976_cstack, rx976_cstack_done2649
    dec $I19
    set $P11, rx976_cstack[$I19]
  rx976_cstack_done2649:
    pop rx976_rep, rx976_bstack
    pop rx976_pos, rx976_bstack
    pop $I19, rx976_bstack
    lt rx976_pos, -1, rx976_done2644
    lt rx976_pos, 0, rx976_fail2646
    eq $I19, 0, rx976_fail2646
    nqp_islist $I20, rx976_cstack
    unless $I20, rx976_jump2647
    elements $I18, rx976_bstack
    le $I18, 0, rx976_cut2648
    dec $I18
    set $I18, rx976_bstack[$I18]
  rx976_cut2648:
    assign rx976_cstack, $I18
  rx976_jump2647:
    jump $I19
  rx976_done2644:
    rx976_cur."!cursor_fail"()
    .return (rx976_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_168_1346968539.359_caps" :subid("cuid_memo_272_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["OPER"], $P5002
    box $P5003, 0
    set $P5001["infix"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infixstopper" :subid("cuid_169_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1236
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx979_tgt
    .local int rx979_pos
    .local int rx979_off
    .local int rx979_eos
    .local int rx979_rep
    .local pmc rx979_cur
    .local pmc rx979_curclass
    .local pmc rx979_bstack
    .local pmc rx979_cstack
    (rx979_cur, rx979_tgt, rx979_pos, rx979_curclass, rx979_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx979_cur
    length rx979_eos, rx979_tgt
    eq $I19, 1, rx979_restart2656
    gt rx979_pos, rx979_eos, rx979_fail2657
    repr_get_attr_int $I11, self, rx979_curclass, "$!from"
    ne $I11, -1, rxscan980_done2663
    goto rxscan980_scan2662
  rxscan980_loop2661:
    inc rx979_pos
    gt rx979_pos, rx979_eos, rx979_fail2657
    repr_bind_attr_int rx979_cur, rx979_curclass, "$!from", rx979_pos
  rxscan980_scan2662:
    nqp_rxmark rx979_bstack, rxscan980_loop2661, rx979_pos, 0
  rxscan980_done2663:
    repr_bind_attr_int rx979_cur, rx979_curclass, "$!pos", rx979_pos
    $P11 = rx979_cur."lambda"()
    repr_get_attr_int $I11, $P11, rx979_curclass, "$!pos"
    lt $I11, 0, rx979_fail2657
    rx979_cur."!cursor_pass"(rx979_pos, "infixstopper", 'backtrack'=>1)
    .return (rx979_cur)
  rx979_restart2656:
    repr_get_attr_obj rx979_cstack, rx979_cur, rx979_curclass, "$!cstack"
  rx979_fail2657:
    unless rx979_bstack, rx979_done2655
    pop $I19, rx979_bstack
    if_null rx979_cstack, rx979_cstack_done2660
    unless rx979_cstack, rx979_cstack_done2660
    dec $I19
    set $P11, rx979_cstack[$I19]
  rx979_cstack_done2660:
    pop rx979_rep, rx979_bstack
    pop rx979_pos, rx979_bstack
    pop $I19, rx979_bstack
    lt rx979_pos, -1, rx979_done2655
    lt rx979_pos, 0, rx979_fail2657
    eq $I19, 0, rx979_fail2657
    nqp_islist $I20, rx979_cstack
    unless $I20, rx979_jump2658
    elements $I18, rx979_bstack
    le $I18, 0, rx979_cut2659
    dec $I18
    set $I18, rx979_bstack[$I18]
  rx979_cut2659:
    assign rx979_cstack, $I18
  rx979_jump2658:
    jump $I19
  rx979_done2655:
    rx979_cur."!cursor_fail"()
    .return (rx979_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_169_1346968539.359_caps" :subid("cuid_memo_273_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_169_1346968539.359_nfa" :subid("cuid_memo_274_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "lambda"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<[ ]>" :subid("cuid_170_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1238
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx981_tgt
    .local int rx981_pos
    .local int rx981_off
    .local int rx981_eos
    .local int rx981_rep
    .local pmc rx981_cur
    .local pmc rx981_curclass
    .local pmc rx981_bstack
    .local pmc rx981_cstack
    (rx981_cur, rx981_tgt, rx981_pos, rx981_curclass, rx981_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx981_cur
    length rx981_eos, rx981_tgt
    eq $I19, 1, rx981_restart2666
    gt rx981_pos, rx981_eos, rx981_fail2667
    repr_get_attr_int $I11, self, rx981_curclass, "$!from"
    ne $I11, -1, rxscan982_done2673
    goto rxscan982_scan2672
  rxscan982_loop2671:
    inc rx981_pos
    gt rx981_pos, rx981_eos, rx981_fail2667
    repr_bind_attr_int rx981_cur, rx981_curclass, "$!from", rx981_pos
  rxscan982_scan2672:
    nqp_rxmark rx981_bstack, rxscan982_loop2671, rx981_pos, 0
  rxscan982_done2673:
    add $I11, rx981_pos, 1
    gt $I11, rx981_eos, rx981_fail2667
    substr $S10, rx981_tgt, rx981_pos, 1
    ne $S10, ucs4:"[", rx981_fail2667
    add rx981_pos, 1
    repr_bind_attr_int rx981_cur, rx981_curclass, "$!pos", rx981_pos
    $P11 = rx981_cur."ws"()
    repr_get_attr_int $I11, $P11, rx981_curclass, "$!pos"
    lt $I11, 0, rx981_fail2667
    repr_get_attr_int rx981_pos, $P11, rx981_curclass, "$!pos"
    repr_bind_attr_int rx981_cur, rx981_curclass, "$!pos", rx981_pos
    $P11 = rx981_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx981_curclass, "$!pos"
    lt $I11, 0, rx981_fail2667
    nqp_rxmark rx981_bstack, rxsubrule984_pass2675, -1, 0
  rxsubrule984_pass2675:
    rx981_cstack = rx981_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx981_pos, $P11, rx981_curclass, "$!pos"
    add $I11, rx981_pos, 1
    gt $I11, rx981_eos, rx981_fail2667
    substr $S10, rx981_tgt, rx981_pos, 1
    ne $S10, ucs4:"]", rx981_fail2667
    add rx981_pos, 1
    repr_bind_attr_int rx981_cur, rx981_curclass, "$!pos", rx981_pos
    $P11 = rx981_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx981_curclass, "$!pos"
    lt $I11, 0, rx981_fail2667
    nqp_rxmark rx981_bstack, rxsubrule985_pass2676, -1, 0
  rxsubrule985_pass2676:
    rx981_cstack = rx981_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx981_pos, $P11, rx981_curclass, "$!pos"
    rx981_cur."!cursor_pass"(rx981_pos, "postcircumfix:sym<[ ]>", 'backtrack'=>1)
    .return (rx981_cur)
  rx981_restart2666:
    repr_get_attr_obj rx981_cstack, rx981_cur, rx981_curclass, "$!cstack"
  rx981_fail2667:
    unless rx981_bstack, rx981_done2665
    pop $I19, rx981_bstack
    if_null rx981_cstack, rx981_cstack_done2670
    unless rx981_cstack, rx981_cstack_done2670
    dec $I19
    set $P11, rx981_cstack[$I19]
  rx981_cstack_done2670:
    pop rx981_rep, rx981_bstack
    pop rx981_pos, rx981_bstack
    pop $I19, rx981_bstack
    lt rx981_pos, -1, rx981_done2665
    lt rx981_pos, 0, rx981_fail2667
    eq $I19, 0, rx981_fail2667
    nqp_islist $I20, rx981_cstack
    unless $I20, rx981_jump2668
    elements $I18, rx981_bstack
    le $I18, 0, rx981_cut2669
    dec $I18
    set $I18, rx981_bstack[$I18]
  rx981_cut2669:
    assign rx981_cstack, $I18
  rx981_jump2668:
    jump $I19
  rx981_done2665:
    rx981_cur."!cursor_fail"()
    .return (rx981_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_170_1346968539.359_caps" :subid("cuid_memo_275_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["EXPR"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_170_1346968539.359_nfa" :subid("cuid_memo_276_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 91
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "ws"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "EXPR"
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 93
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 8
    push $P5019, $P5020
    box $P5021, "O"
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<{ }>" :subid("cuid_171_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1243
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx986_tgt
    .local int rx986_pos
    .local int rx986_off
    .local int rx986_eos
    .local int rx986_rep
    .local pmc rx986_cur
    .local pmc rx986_curclass
    .local pmc rx986_bstack
    .local pmc rx986_cstack
    (rx986_cur, rx986_tgt, rx986_pos, rx986_curclass, rx986_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx986_cur
    length rx986_eos, rx986_tgt
    eq $I19, 1, rx986_restart2679
    gt rx986_pos, rx986_eos, rx986_fail2680
    repr_get_attr_int $I11, self, rx986_curclass, "$!from"
    ne $I11, -1, rxscan987_done2686
    goto rxscan987_scan2685
  rxscan987_loop2684:
    inc rx986_pos
    gt rx986_pos, rx986_eos, rx986_fail2680
    repr_bind_attr_int rx986_cur, rx986_curclass, "$!from", rx986_pos
  rxscan987_scan2685:
    nqp_rxmark rx986_bstack, rxscan987_loop2684, rx986_pos, 0
  rxscan987_done2686:
    add $I11, rx986_pos, 1
    gt $I11, rx986_eos, rx986_fail2680
    substr $S10, rx986_tgt, rx986_pos, 1
    ne $S10, ucs4:"{", rx986_fail2680
    add rx986_pos, 1
    repr_bind_attr_int rx986_cur, rx986_curclass, "$!pos", rx986_pos
    $P11 = rx986_cur."ws"()
    repr_get_attr_int $I11, $P11, rx986_curclass, "$!pos"
    lt $I11, 0, rx986_fail2680
    repr_get_attr_int rx986_pos, $P11, rx986_curclass, "$!pos"
    repr_bind_attr_int rx986_cur, rx986_curclass, "$!pos", rx986_pos
    $P11 = rx986_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx986_curclass, "$!pos"
    lt $I11, 0, rx986_fail2680
    nqp_rxmark rx986_bstack, rxsubrule989_pass2688, -1, 0
  rxsubrule989_pass2688:
    rx986_cstack = rx986_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx986_pos, $P11, rx986_curclass, "$!pos"
    add $I11, rx986_pos, 1
    gt $I11, rx986_eos, rx986_fail2680
    substr $S10, rx986_tgt, rx986_pos, 1
    ne $S10, ucs4:"}", rx986_fail2680
    add rx986_pos, 1
    repr_bind_attr_int rx986_cur, rx986_curclass, "$!pos", rx986_pos
    $P11 = rx986_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx986_curclass, "$!pos"
    lt $I11, 0, rx986_fail2680
    nqp_rxmark rx986_bstack, rxsubrule990_pass2689, -1, 0
  rxsubrule990_pass2689:
    rx986_cstack = rx986_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx986_pos, $P11, rx986_curclass, "$!pos"
    rx986_cur."!cursor_pass"(rx986_pos, "postcircumfix:sym<{ }>", 'backtrack'=>1)
    .return (rx986_cur)
  rx986_restart2679:
    repr_get_attr_obj rx986_cstack, rx986_cur, rx986_curclass, "$!cstack"
  rx986_fail2680:
    unless rx986_bstack, rx986_done2678
    pop $I19, rx986_bstack
    if_null rx986_cstack, rx986_cstack_done2683
    unless rx986_cstack, rx986_cstack_done2683
    dec $I19
    set $P11, rx986_cstack[$I19]
  rx986_cstack_done2683:
    pop rx986_rep, rx986_bstack
    pop rx986_pos, rx986_bstack
    pop $I19, rx986_bstack
    lt rx986_pos, -1, rx986_done2678
    lt rx986_pos, 0, rx986_fail2680
    eq $I19, 0, rx986_fail2680
    nqp_islist $I20, rx986_cstack
    unless $I20, rx986_jump2681
    elements $I18, rx986_bstack
    le $I18, 0, rx986_cut2682
    dec $I18
    set $I18, rx986_bstack[$I18]
  rx986_cut2682:
    assign rx986_cstack, $I18
  rx986_jump2681:
    jump $I19
  rx986_done2678:
    rx986_cur."!cursor_fail"()
    .return (rx986_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_171_1346968539.359_caps" :subid("cuid_memo_277_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["EXPR"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_171_1346968539.359_nfa" :subid("cuid_memo_278_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 123
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "ws"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "EXPR"
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 125
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 8
    push $P5019, $P5020
    box $P5021, "O"
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<ang>" :subid("cuid_172_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1248
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx991_tgt
    .local int rx991_pos
    .local int rx991_off
    .local int rx991_eos
    .local int rx991_rep
    .local pmc rx991_cur
    .local pmc rx991_curclass
    .local pmc rx991_bstack
    .local pmc rx991_cstack
    (rx991_cur, rx991_tgt, rx991_pos, rx991_curclass, rx991_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx991_cur
    length rx991_eos, rx991_tgt
    eq $I19, 1, rx991_restart2692
    gt rx991_pos, rx991_eos, rx991_fail2693
    repr_get_attr_int $I11, self, rx991_curclass, "$!from"
    ne $I11, -1, rxscan992_done2699
    goto rxscan992_scan2698
  rxscan992_loop2697:
    inc rx991_pos
    gt rx991_pos, rx991_eos, rx991_fail2693
    repr_bind_attr_int rx991_cur, rx991_curclass, "$!from", rx991_pos
  rxscan992_scan2698:
    nqp_rxmark rx991_bstack, rxscan992_loop2697, rx991_pos, 0
  rxscan992_done2699:
    ge rx991_pos, rx991_eos, rx991_fail2693
    substr $S11, rx991_tgt, rx991_pos, 1
    index $I11, ucs4:"<", $S11
    lt $I11, 0, rx991_fail2693
    repr_bind_attr_int rx991_cur, rx991_curclass, "$!pos", rx991_pos
    $P11 = rx991_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx991_curclass, "$!pos"
    lt $I11, 0, rx991_fail2693
    nqp_rxmark rx991_bstack, rxsubrule993_pass2700, -1, 0
  rxsubrule993_pass2700:
    rx991_cstack = rx991_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx991_pos, $P11, rx991_curclass, "$!pos"
    repr_bind_attr_int rx991_cur, rx991_curclass, "$!pos", rx991_pos
    $P11 = rx991_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx991_curclass, "$!pos"
    lt $I11, 0, rx991_fail2693
    nqp_rxmark rx991_bstack, rxsubrule994_pass2701, -1, 0
  rxsubrule994_pass2701:
    rx991_cstack = rx991_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx991_pos, $P11, rx991_curclass, "$!pos"
    rx991_cur."!cursor_pass"(rx991_pos, "postcircumfix:sym<ang>", 'backtrack'=>1)
    .return (rx991_cur)
  rx991_restart2692:
    repr_get_attr_obj rx991_cstack, rx991_cur, rx991_curclass, "$!cstack"
  rx991_fail2693:
    unless rx991_bstack, rx991_done2691
    pop $I19, rx991_bstack
    if_null rx991_cstack, rx991_cstack_done2696
    unless rx991_cstack, rx991_cstack_done2696
    dec $I19
    set $P11, rx991_cstack[$I19]
  rx991_cstack_done2696:
    pop rx991_rep, rx991_bstack
    pop rx991_pos, rx991_bstack
    pop $I19, rx991_bstack
    lt rx991_pos, -1, rx991_done2691
    lt rx991_pos, 0, rx991_fail2693
    eq $I19, 0, rx991_fail2693
    nqp_islist $I20, rx991_cstack
    unless $I20, rx991_jump2694
    elements $I18, rx991_bstack
    le $I18, 0, rx991_cut2695
    dec $I18
    set $I18, rx991_bstack[$I18]
  rx991_cut2695:
    assign rx991_cstack, $I18
  rx991_jump2694:
    jump $I19
  rx991_done2691:
    rx991_cur."!cursor_fail"()
    .return (rx991_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_172_1346968539.359_caps" :subid("cuid_memo_279_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["quote_EXPR"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_172_1346968539.359_nfa" :subid("cuid_memo_280_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "<"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<( )>" :subid("cuid_173_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1253
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx995_tgt
    .local int rx995_pos
    .local int rx995_off
    .local int rx995_eos
    .local int rx995_rep
    .local pmc rx995_cur
    .local pmc rx995_curclass
    .local pmc rx995_bstack
    .local pmc rx995_cstack
    (rx995_cur, rx995_tgt, rx995_pos, rx995_curclass, rx995_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx995_cur
    length rx995_eos, rx995_tgt
    eq $I19, 1, rx995_restart2704
    gt rx995_pos, rx995_eos, rx995_fail2705
    repr_get_attr_int $I11, self, rx995_curclass, "$!from"
    ne $I11, -1, rxscan996_done2711
    goto rxscan996_scan2710
  rxscan996_loop2709:
    inc rx995_pos
    gt rx995_pos, rx995_eos, rx995_fail2705
    repr_bind_attr_int rx995_cur, rx995_curclass, "$!from", rx995_pos
  rxscan996_scan2710:
    nqp_rxmark rx995_bstack, rxscan996_loop2709, rx995_pos, 0
  rxscan996_done2711:
    add $I11, rx995_pos, 1
    gt $I11, rx995_eos, rx995_fail2705
    substr $S10, rx995_tgt, rx995_pos, 1
    ne $S10, ucs4:"(", rx995_fail2705
    add rx995_pos, 1
    repr_bind_attr_int rx995_cur, rx995_curclass, "$!pos", rx995_pos
    $P11 = rx995_cur."ws"()
    repr_get_attr_int $I11, $P11, rx995_curclass, "$!pos"
    lt $I11, 0, rx995_fail2705
    repr_get_attr_int rx995_pos, $P11, rx995_curclass, "$!pos"
    repr_bind_attr_int rx995_cur, rx995_curclass, "$!pos", rx995_pos
    $P11 = rx995_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx995_curclass, "$!pos"
    lt $I11, 0, rx995_fail2705
    nqp_rxmark rx995_bstack, rxsubrule998_pass2713, -1, 0
  rxsubrule998_pass2713:
    rx995_cstack = rx995_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx995_pos, $P11, rx995_curclass, "$!pos"
    add $I11, rx995_pos, 1
    gt $I11, rx995_eos, rx995_fail2705
    substr $S10, rx995_tgt, rx995_pos, 1
    ne $S10, ucs4:")", rx995_fail2705
    add rx995_pos, 1
    repr_bind_attr_int rx995_cur, rx995_curclass, "$!pos", rx995_pos
    $P11 = rx995_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx995_curclass, "$!pos"
    lt $I11, 0, rx995_fail2705
    nqp_rxmark rx995_bstack, rxsubrule999_pass2714, -1, 0
  rxsubrule999_pass2714:
    rx995_cstack = rx995_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx995_pos, $P11, rx995_curclass, "$!pos"
    rx995_cur."!cursor_pass"(rx995_pos, "postcircumfix:sym<( )>", 'backtrack'=>1)
    .return (rx995_cur)
  rx995_restart2704:
    repr_get_attr_obj rx995_cstack, rx995_cur, rx995_curclass, "$!cstack"
  rx995_fail2705:
    unless rx995_bstack, rx995_done2703
    pop $I19, rx995_bstack
    if_null rx995_cstack, rx995_cstack_done2708
    unless rx995_cstack, rx995_cstack_done2708
    dec $I19
    set $P11, rx995_cstack[$I19]
  rx995_cstack_done2708:
    pop rx995_rep, rx995_bstack
    pop rx995_pos, rx995_bstack
    pop $I19, rx995_bstack
    lt rx995_pos, -1, rx995_done2703
    lt rx995_pos, 0, rx995_fail2705
    eq $I19, 0, rx995_fail2705
    nqp_islist $I20, rx995_cstack
    unless $I20, rx995_jump2706
    elements $I18, rx995_bstack
    le $I18, 0, rx995_cut2707
    dec $I18
    set $I18, rx995_bstack[$I18]
  rx995_cut2707:
    assign rx995_cstack, $I18
  rx995_jump2706:
    jump $I19
  rx995_done2703:
    rx995_cur."!cursor_fail"()
    .return (rx995_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_173_1346968539.359_caps" :subid("cuid_memo_281_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["arglist"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_173_1346968539.359_nfa" :subid("cuid_memo_282_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 40
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "ws"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "arglist"
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 41
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 8
    push $P5019, $P5020
    box $P5021, "O"
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<.>" :subid("cuid_174_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1258
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1000_tgt
    .local int rx1000_pos
    .local int rx1000_off
    .local int rx1000_eos
    .local int rx1000_rep
    .local pmc rx1000_cur
    .local pmc rx1000_curclass
    .local pmc rx1000_bstack
    .local pmc rx1000_cstack
    (rx1000_cur, rx1000_tgt, rx1000_pos, rx1000_curclass, rx1000_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1000_cur
    length rx1000_eos, rx1000_tgt
    eq $I19, 1, rx1000_restart2717
    gt rx1000_pos, rx1000_eos, rx1000_fail2718
    repr_get_attr_int $I11, self, rx1000_curclass, "$!from"
    ne $I11, -1, rxscan1001_done2724
    goto rxscan1001_scan2723
  rxscan1001_loop2722:
    inc rx1000_pos
    gt rx1000_pos, rx1000_eos, rx1000_fail2718
    repr_bind_attr_int rx1000_cur, rx1000_curclass, "$!from", rx1000_pos
  rxscan1001_scan2723:
    nqp_rxmark rx1000_bstack, rxscan1001_loop2722, rx1000_pos, 0
  rxscan1001_done2724:
    repr_bind_attr_int rx1000_cur, rx1000_curclass, "$!pos", rx1000_pos
    $P11 = rx1000_cur."dotty"()
    repr_get_attr_int $I11, $P11, rx1000_curclass, "$!pos"
    lt $I11, 0, rx1000_fail2718
    nqp_rxmark rx1000_bstack, rxsubrule1002_pass2725, -1, 0
  rxsubrule1002_pass2725:
    rx1000_cstack = rx1000_cur."!cursor_capture"($P11, "dotty")
    repr_get_attr_int rx1000_pos, $P11, rx1000_curclass, "$!pos"
    repr_bind_attr_int rx1000_cur, rx1000_curclass, "$!pos", rx1000_pos
    $P11 = rx1000_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1000_curclass, "$!pos"
    lt $I11, 0, rx1000_fail2718
    nqp_rxmark rx1000_bstack, rxsubrule1003_pass2726, -1, 0
  rxsubrule1003_pass2726:
    rx1000_cstack = rx1000_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1000_pos, $P11, rx1000_curclass, "$!pos"
    rx1000_cur."!cursor_pass"(rx1000_pos, "postfix:sym<.>", 'backtrack'=>1)
    .return (rx1000_cur)
  rx1000_restart2717:
    repr_get_attr_obj rx1000_cstack, rx1000_cur, rx1000_curclass, "$!cstack"
  rx1000_fail2718:
    unless rx1000_bstack, rx1000_done2716
    pop $I19, rx1000_bstack
    if_null rx1000_cstack, rx1000_cstack_done2721
    unless rx1000_cstack, rx1000_cstack_done2721
    dec $I19
    set $P11, rx1000_cstack[$I19]
  rx1000_cstack_done2721:
    pop rx1000_rep, rx1000_bstack
    pop rx1000_pos, rx1000_bstack
    pop $I19, rx1000_bstack
    lt rx1000_pos, -1, rx1000_done2716
    lt rx1000_pos, 0, rx1000_fail2718
    eq $I19, 0, rx1000_fail2718
    nqp_islist $I20, rx1000_cstack
    unless $I20, rx1000_jump2719
    elements $I18, rx1000_bstack
    le $I18, 0, rx1000_cut2720
    dec $I18
    set $I18, rx1000_bstack[$I18]
  rx1000_cut2720:
    assign rx1000_cstack, $I18
  rx1000_jump2719:
    jump $I19
  rx1000_done2716:
    rx1000_cur."!cursor_fail"()
    .return (rx1000_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_174_1346968539.359_caps" :subid("cuid_memo_283_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["dotty"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_174_1346968539.359_nfa" :subid("cuid_memo_284_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "dotty"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<++>" :subid("cuid_175_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1260
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1004_tgt
    .local int rx1004_pos
    .local int rx1004_off
    .local int rx1004_eos
    .local int rx1004_rep
    .local pmc rx1004_cur
    .local pmc rx1004_curclass
    .local pmc rx1004_bstack
    .local pmc rx1004_cstack
    (rx1004_cur, rx1004_tgt, rx1004_pos, rx1004_curclass, rx1004_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1004_cur
    length rx1004_eos, rx1004_tgt
    eq $I19, 1, rx1004_restart2729
    gt rx1004_pos, rx1004_eos, rx1004_fail2730
    repr_get_attr_int $I11, self, rx1004_curclass, "$!from"
    ne $I11, -1, rxscan1005_done2736
    goto rxscan1005_scan2735
  rxscan1005_loop2734:
    inc rx1004_pos
    gt rx1004_pos, rx1004_eos, rx1004_fail2730
    repr_bind_attr_int rx1004_cur, rx1004_curclass, "$!from", rx1004_pos
  rxscan1005_scan2735:
    nqp_rxmark rx1004_bstack, rxscan1005_loop2734, rx1004_pos, 0
  rxscan1005_done2736:
    nqp_rxmark rx1004_bstack, rxcap1006_fail2738, rx1004_pos, 0
    add $I11, rx1004_pos, 2
    gt $I11, rx1004_eos, rx1004_fail2730
    substr $S10, rx1004_tgt, rx1004_pos, 2
    ne $S10, ucs4:"++", rx1004_fail2730
    add rx1004_pos, 2
    nqp_rxpeek $I19, rx1004_bstack, rxcap1006_fail2738
    inc $I19
    set $I11, rx1004_bstack[$I19]
    $P11 = rx1004_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1004_pos)
    rx1004_cstack = rx1004_cur."!cursor_capture"($P11, "sym")
    goto rxcap1006_done2737
  rxcap1006_fail2738:
    goto rx1004_fail2730
  rxcap1006_done2737:
    repr_bind_attr_int rx1004_cur, rx1004_curclass, "$!pos", rx1004_pos
    $P11 = rx1004_cur."O"("%autoincrement, :op<preinc>")
    repr_get_attr_int $I11, $P11, rx1004_curclass, "$!pos"
    lt $I11, 0, rx1004_fail2730
    nqp_rxmark rx1004_bstack, rxsubrule1007_pass2739, -1, 0
  rxsubrule1007_pass2739:
    rx1004_cstack = rx1004_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1004_pos, $P11, rx1004_curclass, "$!pos"
    rx1004_cur."!cursor_pass"(rx1004_pos, "prefix:sym<++>", 'backtrack'=>1)
    .return (rx1004_cur)
  rx1004_restart2729:
    repr_get_attr_obj rx1004_cstack, rx1004_cur, rx1004_curclass, "$!cstack"
  rx1004_fail2730:
    unless rx1004_bstack, rx1004_done2728
    pop $I19, rx1004_bstack
    if_null rx1004_cstack, rx1004_cstack_done2733
    unless rx1004_cstack, rx1004_cstack_done2733
    dec $I19
    set $P11, rx1004_cstack[$I19]
  rx1004_cstack_done2733:
    pop rx1004_rep, rx1004_bstack
    pop rx1004_pos, rx1004_bstack
    pop $I19, rx1004_bstack
    lt rx1004_pos, -1, rx1004_done2728
    lt rx1004_pos, 0, rx1004_fail2730
    eq $I19, 0, rx1004_fail2730
    nqp_islist $I20, rx1004_cstack
    unless $I20, rx1004_jump2731
    elements $I18, rx1004_bstack
    le $I18, 0, rx1004_cut2732
    dec $I18
    set $I18, rx1004_bstack[$I18]
  rx1004_cut2732:
    assign rx1004_cstack, $I18
  rx1004_jump2731:
    jump $I19
  rx1004_done2728:
    rx1004_cur."!cursor_fail"()
    .return (rx1004_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_175_1346968539.359_caps" :subid("cuid_memo_285_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_175_1346968539.359_nfa" :subid("cuid_memo_286_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 43
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 43
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<-->" :subid("cuid_176_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1261
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1008_tgt
    .local int rx1008_pos
    .local int rx1008_off
    .local int rx1008_eos
    .local int rx1008_rep
    .local pmc rx1008_cur
    .local pmc rx1008_curclass
    .local pmc rx1008_bstack
    .local pmc rx1008_cstack
    (rx1008_cur, rx1008_tgt, rx1008_pos, rx1008_curclass, rx1008_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1008_cur
    length rx1008_eos, rx1008_tgt
    eq $I19, 1, rx1008_restart2742
    gt rx1008_pos, rx1008_eos, rx1008_fail2743
    repr_get_attr_int $I11, self, rx1008_curclass, "$!from"
    ne $I11, -1, rxscan1009_done2749
    goto rxscan1009_scan2748
  rxscan1009_loop2747:
    inc rx1008_pos
    gt rx1008_pos, rx1008_eos, rx1008_fail2743
    repr_bind_attr_int rx1008_cur, rx1008_curclass, "$!from", rx1008_pos
  rxscan1009_scan2748:
    nqp_rxmark rx1008_bstack, rxscan1009_loop2747, rx1008_pos, 0
  rxscan1009_done2749:
    nqp_rxmark rx1008_bstack, rxcap1010_fail2751, rx1008_pos, 0
    add $I11, rx1008_pos, 2
    gt $I11, rx1008_eos, rx1008_fail2743
    substr $S10, rx1008_tgt, rx1008_pos, 2
    ne $S10, ucs4:"--", rx1008_fail2743
    add rx1008_pos, 2
    nqp_rxpeek $I19, rx1008_bstack, rxcap1010_fail2751
    inc $I19
    set $I11, rx1008_bstack[$I19]
    $P11 = rx1008_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1008_pos)
    rx1008_cstack = rx1008_cur."!cursor_capture"($P11, "sym")
    goto rxcap1010_done2750
  rxcap1010_fail2751:
    goto rx1008_fail2743
  rxcap1010_done2750:
    repr_bind_attr_int rx1008_cur, rx1008_curclass, "$!pos", rx1008_pos
    $P11 = rx1008_cur."O"("%autoincrement, :op<predec>")
    repr_get_attr_int $I11, $P11, rx1008_curclass, "$!pos"
    lt $I11, 0, rx1008_fail2743
    nqp_rxmark rx1008_bstack, rxsubrule1011_pass2752, -1, 0
  rxsubrule1011_pass2752:
    rx1008_cstack = rx1008_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1008_pos, $P11, rx1008_curclass, "$!pos"
    rx1008_cur."!cursor_pass"(rx1008_pos, "prefix:sym<-->", 'backtrack'=>1)
    .return (rx1008_cur)
  rx1008_restart2742:
    repr_get_attr_obj rx1008_cstack, rx1008_cur, rx1008_curclass, "$!cstack"
  rx1008_fail2743:
    unless rx1008_bstack, rx1008_done2741
    pop $I19, rx1008_bstack
    if_null rx1008_cstack, rx1008_cstack_done2746
    unless rx1008_cstack, rx1008_cstack_done2746
    dec $I19
    set $P11, rx1008_cstack[$I19]
  rx1008_cstack_done2746:
    pop rx1008_rep, rx1008_bstack
    pop rx1008_pos, rx1008_bstack
    pop $I19, rx1008_bstack
    lt rx1008_pos, -1, rx1008_done2741
    lt rx1008_pos, 0, rx1008_fail2743
    eq $I19, 0, rx1008_fail2743
    nqp_islist $I20, rx1008_cstack
    unless $I20, rx1008_jump2744
    elements $I18, rx1008_bstack
    le $I18, 0, rx1008_cut2745
    dec $I18
    set $I18, rx1008_bstack[$I18]
  rx1008_cut2745:
    assign rx1008_cstack, $I18
  rx1008_jump2744:
    jump $I19
  rx1008_done2741:
    rx1008_cur."!cursor_fail"()
    .return (rx1008_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_176_1346968539.359_caps" :subid("cuid_memo_287_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_176_1346968539.359_nfa" :subid("cuid_memo_288_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 45
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 45
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<++>" :subid("cuid_177_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1263
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1012_tgt
    .local int rx1012_pos
    .local int rx1012_off
    .local int rx1012_eos
    .local int rx1012_rep
    .local pmc rx1012_cur
    .local pmc rx1012_curclass
    .local pmc rx1012_bstack
    .local pmc rx1012_cstack
    (rx1012_cur, rx1012_tgt, rx1012_pos, rx1012_curclass, rx1012_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1012_cur
    length rx1012_eos, rx1012_tgt
    eq $I19, 1, rx1012_restart2755
    gt rx1012_pos, rx1012_eos, rx1012_fail2756
    repr_get_attr_int $I11, self, rx1012_curclass, "$!from"
    ne $I11, -1, rxscan1013_done2762
    goto rxscan1013_scan2761
  rxscan1013_loop2760:
    inc rx1012_pos
    gt rx1012_pos, rx1012_eos, rx1012_fail2756
    repr_bind_attr_int rx1012_cur, rx1012_curclass, "$!from", rx1012_pos
  rxscan1013_scan2761:
    nqp_rxmark rx1012_bstack, rxscan1013_loop2760, rx1012_pos, 0
  rxscan1013_done2762:
    nqp_rxmark rx1012_bstack, rxcap1014_fail2764, rx1012_pos, 0
    add $I11, rx1012_pos, 2
    gt $I11, rx1012_eos, rx1012_fail2756
    substr $S10, rx1012_tgt, rx1012_pos, 2
    ne $S10, ucs4:"++", rx1012_fail2756
    add rx1012_pos, 2
    nqp_rxpeek $I19, rx1012_bstack, rxcap1014_fail2764
    inc $I19
    set $I11, rx1012_bstack[$I19]
    $P11 = rx1012_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1012_pos)
    rx1012_cstack = rx1012_cur."!cursor_capture"($P11, "sym")
    goto rxcap1014_done2763
  rxcap1014_fail2764:
    goto rx1012_fail2756
  rxcap1014_done2763:
    repr_bind_attr_int rx1012_cur, rx1012_curclass, "$!pos", rx1012_pos
    $P11 = rx1012_cur."O"("%autoincrement, :op<postinc>")
    repr_get_attr_int $I11, $P11, rx1012_curclass, "$!pos"
    lt $I11, 0, rx1012_fail2756
    nqp_rxmark rx1012_bstack, rxsubrule1015_pass2765, -1, 0
  rxsubrule1015_pass2765:
    rx1012_cstack = rx1012_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1012_pos, $P11, rx1012_curclass, "$!pos"
    rx1012_cur."!cursor_pass"(rx1012_pos, "postfix:sym<++>", 'backtrack'=>1)
    .return (rx1012_cur)
  rx1012_restart2755:
    repr_get_attr_obj rx1012_cstack, rx1012_cur, rx1012_curclass, "$!cstack"
  rx1012_fail2756:
    unless rx1012_bstack, rx1012_done2754
    pop $I19, rx1012_bstack
    if_null rx1012_cstack, rx1012_cstack_done2759
    unless rx1012_cstack, rx1012_cstack_done2759
    dec $I19
    set $P11, rx1012_cstack[$I19]
  rx1012_cstack_done2759:
    pop rx1012_rep, rx1012_bstack
    pop rx1012_pos, rx1012_bstack
    pop $I19, rx1012_bstack
    lt rx1012_pos, -1, rx1012_done2754
    lt rx1012_pos, 0, rx1012_fail2756
    eq $I19, 0, rx1012_fail2756
    nqp_islist $I20, rx1012_cstack
    unless $I20, rx1012_jump2757
    elements $I18, rx1012_bstack
    le $I18, 0, rx1012_cut2758
    dec $I18
    set $I18, rx1012_bstack[$I18]
  rx1012_cut2758:
    assign rx1012_cstack, $I18
  rx1012_jump2757:
    jump $I19
  rx1012_done2754:
    rx1012_cur."!cursor_fail"()
    .return (rx1012_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_177_1346968539.359_caps" :subid("cuid_memo_289_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_177_1346968539.359_nfa" :subid("cuid_memo_290_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 43
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 43
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<-->" :subid("cuid_178_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1264
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1016_tgt
    .local int rx1016_pos
    .local int rx1016_off
    .local int rx1016_eos
    .local int rx1016_rep
    .local pmc rx1016_cur
    .local pmc rx1016_curclass
    .local pmc rx1016_bstack
    .local pmc rx1016_cstack
    (rx1016_cur, rx1016_tgt, rx1016_pos, rx1016_curclass, rx1016_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1016_cur
    length rx1016_eos, rx1016_tgt
    eq $I19, 1, rx1016_restart2768
    gt rx1016_pos, rx1016_eos, rx1016_fail2769
    repr_get_attr_int $I11, self, rx1016_curclass, "$!from"
    ne $I11, -1, rxscan1017_done2775
    goto rxscan1017_scan2774
  rxscan1017_loop2773:
    inc rx1016_pos
    gt rx1016_pos, rx1016_eos, rx1016_fail2769
    repr_bind_attr_int rx1016_cur, rx1016_curclass, "$!from", rx1016_pos
  rxscan1017_scan2774:
    nqp_rxmark rx1016_bstack, rxscan1017_loop2773, rx1016_pos, 0
  rxscan1017_done2775:
    nqp_rxmark rx1016_bstack, rxcap1018_fail2777, rx1016_pos, 0
    add $I11, rx1016_pos, 2
    gt $I11, rx1016_eos, rx1016_fail2769
    substr $S10, rx1016_tgt, rx1016_pos, 2
    ne $S10, ucs4:"--", rx1016_fail2769
    add rx1016_pos, 2
    nqp_rxpeek $I19, rx1016_bstack, rxcap1018_fail2777
    inc $I19
    set $I11, rx1016_bstack[$I19]
    $P11 = rx1016_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1016_pos)
    rx1016_cstack = rx1016_cur."!cursor_capture"($P11, "sym")
    goto rxcap1018_done2776
  rxcap1018_fail2777:
    goto rx1016_fail2769
  rxcap1018_done2776:
    repr_bind_attr_int rx1016_cur, rx1016_curclass, "$!pos", rx1016_pos
    $P11 = rx1016_cur."O"("%autoincrement, :op<postdec>")
    repr_get_attr_int $I11, $P11, rx1016_curclass, "$!pos"
    lt $I11, 0, rx1016_fail2769
    nqp_rxmark rx1016_bstack, rxsubrule1019_pass2778, -1, 0
  rxsubrule1019_pass2778:
    rx1016_cstack = rx1016_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1016_pos, $P11, rx1016_curclass, "$!pos"
    rx1016_cur."!cursor_pass"(rx1016_pos, "postfix:sym<-->", 'backtrack'=>1)
    .return (rx1016_cur)
  rx1016_restart2768:
    repr_get_attr_obj rx1016_cstack, rx1016_cur, rx1016_curclass, "$!cstack"
  rx1016_fail2769:
    unless rx1016_bstack, rx1016_done2767
    pop $I19, rx1016_bstack
    if_null rx1016_cstack, rx1016_cstack_done2772
    unless rx1016_cstack, rx1016_cstack_done2772
    dec $I19
    set $P11, rx1016_cstack[$I19]
  rx1016_cstack_done2772:
    pop rx1016_rep, rx1016_bstack
    pop rx1016_pos, rx1016_bstack
    pop $I19, rx1016_bstack
    lt rx1016_pos, -1, rx1016_done2767
    lt rx1016_pos, 0, rx1016_fail2769
    eq $I19, 0, rx1016_fail2769
    nqp_islist $I20, rx1016_cstack
    unless $I20, rx1016_jump2770
    elements $I18, rx1016_bstack
    le $I18, 0, rx1016_cut2771
    dec $I18
    set $I18, rx1016_bstack[$I18]
  rx1016_cut2771:
    assign rx1016_cstack, $I18
  rx1016_jump2770:
    jump $I19
  rx1016_done2767:
    rx1016_cur."!cursor_fail"()
    .return (rx1016_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_178_1346968539.359_caps" :subid("cuid_memo_291_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_178_1346968539.359_nfa" :subid("cuid_memo_292_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 45
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 45
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<**>" :subid("cuid_179_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1266
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1020_tgt
    .local int rx1020_pos
    .local int rx1020_off
    .local int rx1020_eos
    .local int rx1020_rep
    .local pmc rx1020_cur
    .local pmc rx1020_curclass
    .local pmc rx1020_bstack
    .local pmc rx1020_cstack
    (rx1020_cur, rx1020_tgt, rx1020_pos, rx1020_curclass, rx1020_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1020_cur
    length rx1020_eos, rx1020_tgt
    eq $I19, 1, rx1020_restart2781
    gt rx1020_pos, rx1020_eos, rx1020_fail2782
    repr_get_attr_int $I11, self, rx1020_curclass, "$!from"
    ne $I11, -1, rxscan1021_done2788
    goto rxscan1021_scan2787
  rxscan1021_loop2786:
    inc rx1020_pos
    gt rx1020_pos, rx1020_eos, rx1020_fail2782
    repr_bind_attr_int rx1020_cur, rx1020_curclass, "$!from", rx1020_pos
  rxscan1021_scan2787:
    nqp_rxmark rx1020_bstack, rxscan1021_loop2786, rx1020_pos, 0
  rxscan1021_done2788:
    nqp_rxmark rx1020_bstack, rxcap1022_fail2790, rx1020_pos, 0
    add $I11, rx1020_pos, 2
    gt $I11, rx1020_eos, rx1020_fail2782
    substr $S10, rx1020_tgt, rx1020_pos, 2
    ne $S10, ucs4:"**", rx1020_fail2782
    add rx1020_pos, 2
    nqp_rxpeek $I19, rx1020_bstack, rxcap1022_fail2790
    inc $I19
    set $I11, rx1020_bstack[$I19]
    $P11 = rx1020_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1020_pos)
    rx1020_cstack = rx1020_cur."!cursor_capture"($P11, "sym")
    goto rxcap1022_done2789
  rxcap1022_fail2790:
    goto rx1020_fail2782
  rxcap1022_done2789:
    repr_bind_attr_int rx1020_cur, rx1020_curclass, "$!pos", rx1020_pos
    $P11 = rx1020_cur."O"("%exponentiation, :op<pow_n>")
    repr_get_attr_int $I11, $P11, rx1020_curclass, "$!pos"
    lt $I11, 0, rx1020_fail2782
    nqp_rxmark rx1020_bstack, rxsubrule1023_pass2791, -1, 0
  rxsubrule1023_pass2791:
    rx1020_cstack = rx1020_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1020_pos, $P11, rx1020_curclass, "$!pos"
    rx1020_cur."!cursor_pass"(rx1020_pos, "infix:sym<**>", 'backtrack'=>1)
    .return (rx1020_cur)
  rx1020_restart2781:
    repr_get_attr_obj rx1020_cstack, rx1020_cur, rx1020_curclass, "$!cstack"
  rx1020_fail2782:
    unless rx1020_bstack, rx1020_done2780
    pop $I19, rx1020_bstack
    if_null rx1020_cstack, rx1020_cstack_done2785
    unless rx1020_cstack, rx1020_cstack_done2785
    dec $I19
    set $P11, rx1020_cstack[$I19]
  rx1020_cstack_done2785:
    pop rx1020_rep, rx1020_bstack
    pop rx1020_pos, rx1020_bstack
    pop $I19, rx1020_bstack
    lt rx1020_pos, -1, rx1020_done2780
    lt rx1020_pos, 0, rx1020_fail2782
    eq $I19, 0, rx1020_fail2782
    nqp_islist $I20, rx1020_cstack
    unless $I20, rx1020_jump2783
    elements $I18, rx1020_bstack
    le $I18, 0, rx1020_cut2784
    dec $I18
    set $I18, rx1020_bstack[$I18]
  rx1020_cut2784:
    assign rx1020_cstack, $I18
  rx1020_jump2783:
    jump $I19
  rx1020_done2780:
    rx1020_cur."!cursor_fail"()
    .return (rx1020_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_179_1346968539.359_caps" :subid("cuid_memo_293_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_179_1346968539.359_nfa" :subid("cuid_memo_294_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 42
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 42
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<+>" :subid("cuid_180_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1268
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1024_tgt
    .local int rx1024_pos
    .local int rx1024_off
    .local int rx1024_eos
    .local int rx1024_rep
    .local pmc rx1024_cur
    .local pmc rx1024_curclass
    .local pmc rx1024_bstack
    .local pmc rx1024_cstack
    (rx1024_cur, rx1024_tgt, rx1024_pos, rx1024_curclass, rx1024_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1024_cur
    length rx1024_eos, rx1024_tgt
    eq $I19, 1, rx1024_restart2794
    gt rx1024_pos, rx1024_eos, rx1024_fail2795
    repr_get_attr_int $I11, self, rx1024_curclass, "$!from"
    ne $I11, -1, rxscan1025_done2801
    goto rxscan1025_scan2800
  rxscan1025_loop2799:
    inc rx1024_pos
    gt rx1024_pos, rx1024_eos, rx1024_fail2795
    repr_bind_attr_int rx1024_cur, rx1024_curclass, "$!from", rx1024_pos
  rxscan1025_scan2800:
    nqp_rxmark rx1024_bstack, rxscan1025_loop2799, rx1024_pos, 0
  rxscan1025_done2801:
    nqp_rxmark rx1024_bstack, rxcap1026_fail2803, rx1024_pos, 0
    add $I11, rx1024_pos, 1
    gt $I11, rx1024_eos, rx1024_fail2795
    substr $S10, rx1024_tgt, rx1024_pos, 1
    ne $S10, ucs4:"+", rx1024_fail2795
    add rx1024_pos, 1
    nqp_rxpeek $I19, rx1024_bstack, rxcap1026_fail2803
    inc $I19
    set $I11, rx1024_bstack[$I19]
    $P11 = rx1024_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1024_pos)
    rx1024_cstack = rx1024_cur."!cursor_capture"($P11, "sym")
    goto rxcap1026_done2802
  rxcap1026_fail2803:
    goto rx1024_fail2795
  rxcap1026_done2802:
    repr_bind_attr_int rx1024_cur, rx1024_curclass, "$!pos", rx1024_pos
    $P11 = rx1024_cur."O"("%symbolic_unary, :op<numify>")
    repr_get_attr_int $I11, $P11, rx1024_curclass, "$!pos"
    lt $I11, 0, rx1024_fail2795
    nqp_rxmark rx1024_bstack, rxsubrule1027_pass2804, -1, 0
  rxsubrule1027_pass2804:
    rx1024_cstack = rx1024_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1024_pos, $P11, rx1024_curclass, "$!pos"
    rx1024_cur."!cursor_pass"(rx1024_pos, "prefix:sym<+>", 'backtrack'=>1)
    .return (rx1024_cur)
  rx1024_restart2794:
    repr_get_attr_obj rx1024_cstack, rx1024_cur, rx1024_curclass, "$!cstack"
  rx1024_fail2795:
    unless rx1024_bstack, rx1024_done2793
    pop $I19, rx1024_bstack
    if_null rx1024_cstack, rx1024_cstack_done2798
    unless rx1024_cstack, rx1024_cstack_done2798
    dec $I19
    set $P11, rx1024_cstack[$I19]
  rx1024_cstack_done2798:
    pop rx1024_rep, rx1024_bstack
    pop rx1024_pos, rx1024_bstack
    pop $I19, rx1024_bstack
    lt rx1024_pos, -1, rx1024_done2793
    lt rx1024_pos, 0, rx1024_fail2795
    eq $I19, 0, rx1024_fail2795
    nqp_islist $I20, rx1024_cstack
    unless $I20, rx1024_jump2796
    elements $I18, rx1024_bstack
    le $I18, 0, rx1024_cut2797
    dec $I18
    set $I18, rx1024_bstack[$I18]
  rx1024_cut2797:
    assign rx1024_cstack, $I18
  rx1024_jump2796:
    jump $I19
  rx1024_done2793:
    rx1024_cur."!cursor_fail"()
    .return (rx1024_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_180_1346968539.359_caps" :subid("cuid_memo_295_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_180_1346968539.359_nfa" :subid("cuid_memo_296_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 43
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<~>" :subid("cuid_181_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1269
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1028_tgt
    .local int rx1028_pos
    .local int rx1028_off
    .local int rx1028_eos
    .local int rx1028_rep
    .local pmc rx1028_cur
    .local pmc rx1028_curclass
    .local pmc rx1028_bstack
    .local pmc rx1028_cstack
    (rx1028_cur, rx1028_tgt, rx1028_pos, rx1028_curclass, rx1028_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1028_cur
    length rx1028_eos, rx1028_tgt
    eq $I19, 1, rx1028_restart2807
    gt rx1028_pos, rx1028_eos, rx1028_fail2808
    repr_get_attr_int $I11, self, rx1028_curclass, "$!from"
    ne $I11, -1, rxscan1029_done2814
    goto rxscan1029_scan2813
  rxscan1029_loop2812:
    inc rx1028_pos
    gt rx1028_pos, rx1028_eos, rx1028_fail2808
    repr_bind_attr_int rx1028_cur, rx1028_curclass, "$!from", rx1028_pos
  rxscan1029_scan2813:
    nqp_rxmark rx1028_bstack, rxscan1029_loop2812, rx1028_pos, 0
  rxscan1029_done2814:
    nqp_rxmark rx1028_bstack, rxcap1030_fail2816, rx1028_pos, 0
    add $I11, rx1028_pos, 1
    gt $I11, rx1028_eos, rx1028_fail2808
    substr $S10, rx1028_tgt, rx1028_pos, 1
    ne $S10, ucs4:"~", rx1028_fail2808
    add rx1028_pos, 1
    nqp_rxpeek $I19, rx1028_bstack, rxcap1030_fail2816
    inc $I19
    set $I11, rx1028_bstack[$I19]
    $P11 = rx1028_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1028_pos)
    rx1028_cstack = rx1028_cur."!cursor_capture"($P11, "sym")
    goto rxcap1030_done2815
  rxcap1030_fail2816:
    goto rx1028_fail2808
  rxcap1030_done2815:
    repr_bind_attr_int rx1028_cur, rx1028_curclass, "$!pos", rx1028_pos
    $P11 = rx1028_cur."O"("%symbolic_unary, :op<stringify>")
    repr_get_attr_int $I11, $P11, rx1028_curclass, "$!pos"
    lt $I11, 0, rx1028_fail2808
    nqp_rxmark rx1028_bstack, rxsubrule1031_pass2817, -1, 0
  rxsubrule1031_pass2817:
    rx1028_cstack = rx1028_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1028_pos, $P11, rx1028_curclass, "$!pos"
    rx1028_cur."!cursor_pass"(rx1028_pos, "prefix:sym<~>", 'backtrack'=>1)
    .return (rx1028_cur)
  rx1028_restart2807:
    repr_get_attr_obj rx1028_cstack, rx1028_cur, rx1028_curclass, "$!cstack"
  rx1028_fail2808:
    unless rx1028_bstack, rx1028_done2806
    pop $I19, rx1028_bstack
    if_null rx1028_cstack, rx1028_cstack_done2811
    unless rx1028_cstack, rx1028_cstack_done2811
    dec $I19
    set $P11, rx1028_cstack[$I19]
  rx1028_cstack_done2811:
    pop rx1028_rep, rx1028_bstack
    pop rx1028_pos, rx1028_bstack
    pop $I19, rx1028_bstack
    lt rx1028_pos, -1, rx1028_done2806
    lt rx1028_pos, 0, rx1028_fail2808
    eq $I19, 0, rx1028_fail2808
    nqp_islist $I20, rx1028_cstack
    unless $I20, rx1028_jump2809
    elements $I18, rx1028_bstack
    le $I18, 0, rx1028_cut2810
    dec $I18
    set $I18, rx1028_bstack[$I18]
  rx1028_cut2810:
    assign rx1028_cstack, $I18
  rx1028_jump2809:
    jump $I19
  rx1028_done2806:
    rx1028_cur."!cursor_fail"()
    .return (rx1028_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_181_1346968539.359_caps" :subid("cuid_memo_297_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_181_1346968539.359_nfa" :subid("cuid_memo_298_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 126
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<->" :subid("cuid_182_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1270
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1032_tgt
    .local int rx1032_pos
    .local int rx1032_off
    .local int rx1032_eos
    .local int rx1032_rep
    .local pmc rx1032_cur
    .local pmc rx1032_curclass
    .local pmc rx1032_bstack
    .local pmc rx1032_cstack
    (rx1032_cur, rx1032_tgt, rx1032_pos, rx1032_curclass, rx1032_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1032_cur
    length rx1032_eos, rx1032_tgt
    eq $I19, 1, rx1032_restart2820
    gt rx1032_pos, rx1032_eos, rx1032_fail2821
    repr_get_attr_int $I11, self, rx1032_curclass, "$!from"
    ne $I11, -1, rxscan1033_done2827
    goto rxscan1033_scan2826
  rxscan1033_loop2825:
    inc rx1032_pos
    gt rx1032_pos, rx1032_eos, rx1032_fail2821
    repr_bind_attr_int rx1032_cur, rx1032_curclass, "$!from", rx1032_pos
  rxscan1033_scan2826:
    nqp_rxmark rx1032_bstack, rxscan1033_loop2825, rx1032_pos, 0
  rxscan1033_done2827:
    nqp_rxmark rx1032_bstack, rxcap1034_fail2829, rx1032_pos, 0
    add $I11, rx1032_pos, 1
    gt $I11, rx1032_eos, rx1032_fail2821
    substr $S10, rx1032_tgt, rx1032_pos, 1
    ne $S10, ucs4:"-", rx1032_fail2821
    add rx1032_pos, 1
    nqp_rxpeek $I19, rx1032_bstack, rxcap1034_fail2829
    inc $I19
    set $I11, rx1032_bstack[$I19]
    $P11 = rx1032_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1032_pos)
    rx1032_cstack = rx1032_cur."!cursor_capture"($P11, "sym")
    goto rxcap1034_done2828
  rxcap1034_fail2829:
    goto rx1032_fail2821
  rxcap1034_done2828:
    ge rx1032_pos, rx1032_eos, rx1032_fail2821
    substr $S11, rx1032_tgt, rx1032_pos, 1
    index $I11, ucs4:">", $S11
    ge $I11, 0, rx1032_fail2821
    repr_bind_attr_int rx1032_cur, rx1032_curclass, "$!pos", rx1032_pos
    $P11 = rx1032_cur."number"()
    repr_get_attr_int $I11, $P11, rx1032_curclass, "$!pos"
    ge $I11, 0, rx1032_fail2821
    repr_bind_attr_int rx1032_cur, rx1032_curclass, "$!pos", rx1032_pos
    $P11 = rx1032_cur."O"("%symbolic_unary, :op<neg_n>")
    repr_get_attr_int $I11, $P11, rx1032_curclass, "$!pos"
    lt $I11, 0, rx1032_fail2821
    nqp_rxmark rx1032_bstack, rxsubrule1035_pass2830, -1, 0
  rxsubrule1035_pass2830:
    rx1032_cstack = rx1032_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1032_pos, $P11, rx1032_curclass, "$!pos"
    rx1032_cur."!cursor_pass"(rx1032_pos, "prefix:sym<->", 'backtrack'=>1)
    .return (rx1032_cur)
  rx1032_restart2820:
    repr_get_attr_obj rx1032_cstack, rx1032_cur, rx1032_curclass, "$!cstack"
  rx1032_fail2821:
    unless rx1032_bstack, rx1032_done2819
    pop $I19, rx1032_bstack
    if_null rx1032_cstack, rx1032_cstack_done2824
    unless rx1032_cstack, rx1032_cstack_done2824
    dec $I19
    set $P11, rx1032_cstack[$I19]
  rx1032_cstack_done2824:
    pop rx1032_rep, rx1032_bstack
    pop rx1032_pos, rx1032_bstack
    pop $I19, rx1032_bstack
    lt rx1032_pos, -1, rx1032_done2819
    lt rx1032_pos, 0, rx1032_fail2821
    eq $I19, 0, rx1032_fail2821
    nqp_islist $I20, rx1032_cstack
    unless $I20, rx1032_jump2822
    elements $I18, rx1032_bstack
    le $I18, 0, rx1032_cut2823
    dec $I18
    set $I18, rx1032_bstack[$I18]
  rx1032_cut2823:
    assign rx1032_cstack, $I18
  rx1032_jump2822:
    jump $I19
  rx1032_done2819:
    rx1032_cur."!cursor_fail"()
    .return (rx1032_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_182_1346968539.359_caps" :subid("cuid_memo_299_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_182_1346968539.359_nfa" :subid("cuid_memo_300_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 45
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 7
    push $P5007, $P5008
    box $P5009, ">"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 0
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<?>" :subid("cuid_183_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1271
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1036_tgt
    .local int rx1036_pos
    .local int rx1036_off
    .local int rx1036_eos
    .local int rx1036_rep
    .local pmc rx1036_cur
    .local pmc rx1036_curclass
    .local pmc rx1036_bstack
    .local pmc rx1036_cstack
    (rx1036_cur, rx1036_tgt, rx1036_pos, rx1036_curclass, rx1036_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1036_cur
    length rx1036_eos, rx1036_tgt
    eq $I19, 1, rx1036_restart2833
    gt rx1036_pos, rx1036_eos, rx1036_fail2834
    repr_get_attr_int $I11, self, rx1036_curclass, "$!from"
    ne $I11, -1, rxscan1037_done2840
    goto rxscan1037_scan2839
  rxscan1037_loop2838:
    inc rx1036_pos
    gt rx1036_pos, rx1036_eos, rx1036_fail2834
    repr_bind_attr_int rx1036_cur, rx1036_curclass, "$!from", rx1036_pos
  rxscan1037_scan2839:
    nqp_rxmark rx1036_bstack, rxscan1037_loop2838, rx1036_pos, 0
  rxscan1037_done2840:
    nqp_rxmark rx1036_bstack, rxcap1038_fail2842, rx1036_pos, 0
    add $I11, rx1036_pos, 1
    gt $I11, rx1036_eos, rx1036_fail2834
    substr $S10, rx1036_tgt, rx1036_pos, 1
    ne $S10, ucs4:"?", rx1036_fail2834
    add rx1036_pos, 1
    nqp_rxpeek $I19, rx1036_bstack, rxcap1038_fail2842
    inc $I19
    set $I11, rx1036_bstack[$I19]
    $P11 = rx1036_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1036_pos)
    rx1036_cstack = rx1036_cur."!cursor_capture"($P11, "sym")
    goto rxcap1038_done2841
  rxcap1038_fail2842:
    goto rx1036_fail2834
  rxcap1038_done2841:
    repr_bind_attr_int rx1036_cur, rx1036_curclass, "$!pos", rx1036_pos
    $P11 = rx1036_cur."O"("%symbolic_unary, :op<istrue>")
    repr_get_attr_int $I11, $P11, rx1036_curclass, "$!pos"
    lt $I11, 0, rx1036_fail2834
    nqp_rxmark rx1036_bstack, rxsubrule1039_pass2843, -1, 0
  rxsubrule1039_pass2843:
    rx1036_cstack = rx1036_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1036_pos, $P11, rx1036_curclass, "$!pos"
    rx1036_cur."!cursor_pass"(rx1036_pos, "prefix:sym<?>", 'backtrack'=>1)
    .return (rx1036_cur)
  rx1036_restart2833:
    repr_get_attr_obj rx1036_cstack, rx1036_cur, rx1036_curclass, "$!cstack"
  rx1036_fail2834:
    unless rx1036_bstack, rx1036_done2832
    pop $I19, rx1036_bstack
    if_null rx1036_cstack, rx1036_cstack_done2837
    unless rx1036_cstack, rx1036_cstack_done2837
    dec $I19
    set $P11, rx1036_cstack[$I19]
  rx1036_cstack_done2837:
    pop rx1036_rep, rx1036_bstack
    pop rx1036_pos, rx1036_bstack
    pop $I19, rx1036_bstack
    lt rx1036_pos, -1, rx1036_done2832
    lt rx1036_pos, 0, rx1036_fail2834
    eq $I19, 0, rx1036_fail2834
    nqp_islist $I20, rx1036_cstack
    unless $I20, rx1036_jump2835
    elements $I18, rx1036_bstack
    le $I18, 0, rx1036_cut2836
    dec $I18
    set $I18, rx1036_bstack[$I18]
  rx1036_cut2836:
    assign rx1036_cstack, $I18
  rx1036_jump2835:
    jump $I19
  rx1036_done2832:
    rx1036_cur."!cursor_fail"()
    .return (rx1036_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_183_1346968539.359_caps" :subid("cuid_memo_301_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_183_1346968539.359_nfa" :subid("cuid_memo_302_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 63
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<!>" :subid("cuid_184_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1272
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1040_tgt
    .local int rx1040_pos
    .local int rx1040_off
    .local int rx1040_eos
    .local int rx1040_rep
    .local pmc rx1040_cur
    .local pmc rx1040_curclass
    .local pmc rx1040_bstack
    .local pmc rx1040_cstack
    (rx1040_cur, rx1040_tgt, rx1040_pos, rx1040_curclass, rx1040_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1040_cur
    length rx1040_eos, rx1040_tgt
    eq $I19, 1, rx1040_restart2846
    gt rx1040_pos, rx1040_eos, rx1040_fail2847
    repr_get_attr_int $I11, self, rx1040_curclass, "$!from"
    ne $I11, -1, rxscan1041_done2853
    goto rxscan1041_scan2852
  rxscan1041_loop2851:
    inc rx1040_pos
    gt rx1040_pos, rx1040_eos, rx1040_fail2847
    repr_bind_attr_int rx1040_cur, rx1040_curclass, "$!from", rx1040_pos
  rxscan1041_scan2852:
    nqp_rxmark rx1040_bstack, rxscan1041_loop2851, rx1040_pos, 0
  rxscan1041_done2853:
    nqp_rxmark rx1040_bstack, rxcap1042_fail2855, rx1040_pos, 0
    add $I11, rx1040_pos, 1
    gt $I11, rx1040_eos, rx1040_fail2847
    substr $S10, rx1040_tgt, rx1040_pos, 1
    ne $S10, ucs4:"!", rx1040_fail2847
    add rx1040_pos, 1
    nqp_rxpeek $I19, rx1040_bstack, rxcap1042_fail2855
    inc $I19
    set $I11, rx1040_bstack[$I19]
    $P11 = rx1040_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1040_pos)
    rx1040_cstack = rx1040_cur."!cursor_capture"($P11, "sym")
    goto rxcap1042_done2854
  rxcap1042_fail2855:
    goto rx1040_fail2847
  rxcap1042_done2854:
    repr_bind_attr_int rx1040_cur, rx1040_curclass, "$!pos", rx1040_pos
    $P11 = rx1040_cur."O"("%symbolic_unary, :op<isfalse>")
    repr_get_attr_int $I11, $P11, rx1040_curclass, "$!pos"
    lt $I11, 0, rx1040_fail2847
    nqp_rxmark rx1040_bstack, rxsubrule1043_pass2856, -1, 0
  rxsubrule1043_pass2856:
    rx1040_cstack = rx1040_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1040_pos, $P11, rx1040_curclass, "$!pos"
    rx1040_cur."!cursor_pass"(rx1040_pos, "prefix:sym<!>", 'backtrack'=>1)
    .return (rx1040_cur)
  rx1040_restart2846:
    repr_get_attr_obj rx1040_cstack, rx1040_cur, rx1040_curclass, "$!cstack"
  rx1040_fail2847:
    unless rx1040_bstack, rx1040_done2845
    pop $I19, rx1040_bstack
    if_null rx1040_cstack, rx1040_cstack_done2850
    unless rx1040_cstack, rx1040_cstack_done2850
    dec $I19
    set $P11, rx1040_cstack[$I19]
  rx1040_cstack_done2850:
    pop rx1040_rep, rx1040_bstack
    pop rx1040_pos, rx1040_bstack
    pop $I19, rx1040_bstack
    lt rx1040_pos, -1, rx1040_done2845
    lt rx1040_pos, 0, rx1040_fail2847
    eq $I19, 0, rx1040_fail2847
    nqp_islist $I20, rx1040_cstack
    unless $I20, rx1040_jump2848
    elements $I18, rx1040_bstack
    le $I18, 0, rx1040_cut2849
    dec $I18
    set $I18, rx1040_bstack[$I18]
  rx1040_cut2849:
    assign rx1040_cstack, $I18
  rx1040_jump2848:
    jump $I19
  rx1040_done2845:
    rx1040_cur."!cursor_fail"()
    .return (rx1040_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_184_1346968539.359_caps" :subid("cuid_memo_303_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_184_1346968539.359_nfa" :subid("cuid_memo_304_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 33
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<|>" :subid("cuid_185_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1273
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1044_tgt
    .local int rx1044_pos
    .local int rx1044_off
    .local int rx1044_eos
    .local int rx1044_rep
    .local pmc rx1044_cur
    .local pmc rx1044_curclass
    .local pmc rx1044_bstack
    .local pmc rx1044_cstack
    (rx1044_cur, rx1044_tgt, rx1044_pos, rx1044_curclass, rx1044_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1044_cur
    length rx1044_eos, rx1044_tgt
    eq $I19, 1, rx1044_restart2859
    gt rx1044_pos, rx1044_eos, rx1044_fail2860
    repr_get_attr_int $I11, self, rx1044_curclass, "$!from"
    ne $I11, -1, rxscan1045_done2866
    goto rxscan1045_scan2865
  rxscan1045_loop2864:
    inc rx1044_pos
    gt rx1044_pos, rx1044_eos, rx1044_fail2860
    repr_bind_attr_int rx1044_cur, rx1044_curclass, "$!from", rx1044_pos
  rxscan1045_scan2865:
    nqp_rxmark rx1044_bstack, rxscan1045_loop2864, rx1044_pos, 0
  rxscan1045_done2866:
    nqp_rxmark rx1044_bstack, rxcap1046_fail2868, rx1044_pos, 0
    add $I11, rx1044_pos, 1
    gt $I11, rx1044_eos, rx1044_fail2860
    substr $S10, rx1044_tgt, rx1044_pos, 1
    ne $S10, ucs4:"|", rx1044_fail2860
    add rx1044_pos, 1
    nqp_rxpeek $I19, rx1044_bstack, rxcap1046_fail2868
    inc $I19
    set $I11, rx1044_bstack[$I19]
    $P11 = rx1044_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1044_pos)
    rx1044_cstack = rx1044_cur."!cursor_capture"($P11, "sym")
    goto rxcap1046_done2867
  rxcap1046_fail2868:
    goto rx1044_fail2860
  rxcap1046_done2867:
    repr_bind_attr_int rx1044_cur, rx1044_curclass, "$!pos", rx1044_pos
    $P11 = rx1044_cur."O"("%symbolic_unary")
    repr_get_attr_int $I11, $P11, rx1044_curclass, "$!pos"
    lt $I11, 0, rx1044_fail2860
    nqp_rxmark rx1044_bstack, rxsubrule1047_pass2869, -1, 0
  rxsubrule1047_pass2869:
    rx1044_cstack = rx1044_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1044_pos, $P11, rx1044_curclass, "$!pos"
    rx1044_cur."!cursor_pass"(rx1044_pos, "prefix:sym<|>", 'backtrack'=>1)
    .return (rx1044_cur)
  rx1044_restart2859:
    repr_get_attr_obj rx1044_cstack, rx1044_cur, rx1044_curclass, "$!cstack"
  rx1044_fail2860:
    unless rx1044_bstack, rx1044_done2858
    pop $I19, rx1044_bstack
    if_null rx1044_cstack, rx1044_cstack_done2863
    unless rx1044_cstack, rx1044_cstack_done2863
    dec $I19
    set $P11, rx1044_cstack[$I19]
  rx1044_cstack_done2863:
    pop rx1044_rep, rx1044_bstack
    pop rx1044_pos, rx1044_bstack
    pop $I19, rx1044_bstack
    lt rx1044_pos, -1, rx1044_done2858
    lt rx1044_pos, 0, rx1044_fail2860
    eq $I19, 0, rx1044_fail2860
    nqp_islist $I20, rx1044_cstack
    unless $I20, rx1044_jump2861
    elements $I18, rx1044_bstack
    le $I18, 0, rx1044_cut2862
    dec $I18
    set $I18, rx1044_bstack[$I18]
  rx1044_cut2862:
    assign rx1044_cstack, $I18
  rx1044_jump2861:
    jump $I19
  rx1044_done2858:
    rx1044_cur."!cursor_fail"()
    .return (rx1044_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_185_1346968539.359_caps" :subid("cuid_memo_305_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_185_1346968539.359_nfa" :subid("cuid_memo_306_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 124
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<*>" :subid("cuid_186_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1275
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1048_tgt
    .local int rx1048_pos
    .local int rx1048_off
    .local int rx1048_eos
    .local int rx1048_rep
    .local pmc rx1048_cur
    .local pmc rx1048_curclass
    .local pmc rx1048_bstack
    .local pmc rx1048_cstack
    (rx1048_cur, rx1048_tgt, rx1048_pos, rx1048_curclass, rx1048_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1048_cur
    length rx1048_eos, rx1048_tgt
    eq $I19, 1, rx1048_restart2872
    gt rx1048_pos, rx1048_eos, rx1048_fail2873
    repr_get_attr_int $I11, self, rx1048_curclass, "$!from"
    ne $I11, -1, rxscan1049_done2879
    goto rxscan1049_scan2878
  rxscan1049_loop2877:
    inc rx1048_pos
    gt rx1048_pos, rx1048_eos, rx1048_fail2873
    repr_bind_attr_int rx1048_cur, rx1048_curclass, "$!from", rx1048_pos
  rxscan1049_scan2878:
    nqp_rxmark rx1048_bstack, rxscan1049_loop2877, rx1048_pos, 0
  rxscan1049_done2879:
    nqp_rxmark rx1048_bstack, rxcap1050_fail2881, rx1048_pos, 0
    add $I11, rx1048_pos, 1
    gt $I11, rx1048_eos, rx1048_fail2873
    substr $S10, rx1048_tgt, rx1048_pos, 1
    ne $S10, ucs4:"*", rx1048_fail2873
    add rx1048_pos, 1
    nqp_rxpeek $I19, rx1048_bstack, rxcap1050_fail2881
    inc $I19
    set $I11, rx1048_bstack[$I19]
    $P11 = rx1048_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1048_pos)
    rx1048_cstack = rx1048_cur."!cursor_capture"($P11, "sym")
    goto rxcap1050_done2880
  rxcap1050_fail2881:
    goto rx1048_fail2873
  rxcap1050_done2880:
    repr_bind_attr_int rx1048_cur, rx1048_curclass, "$!pos", rx1048_pos
    $P11 = rx1048_cur."O"("%multiplicative, :op<mul_n>")
    repr_get_attr_int $I11, $P11, rx1048_curclass, "$!pos"
    lt $I11, 0, rx1048_fail2873
    nqp_rxmark rx1048_bstack, rxsubrule1051_pass2882, -1, 0
  rxsubrule1051_pass2882:
    rx1048_cstack = rx1048_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1048_pos, $P11, rx1048_curclass, "$!pos"
    rx1048_cur."!cursor_pass"(rx1048_pos, "infix:sym<*>", 'backtrack'=>1)
    .return (rx1048_cur)
  rx1048_restart2872:
    repr_get_attr_obj rx1048_cstack, rx1048_cur, rx1048_curclass, "$!cstack"
  rx1048_fail2873:
    unless rx1048_bstack, rx1048_done2871
    pop $I19, rx1048_bstack
    if_null rx1048_cstack, rx1048_cstack_done2876
    unless rx1048_cstack, rx1048_cstack_done2876
    dec $I19
    set $P11, rx1048_cstack[$I19]
  rx1048_cstack_done2876:
    pop rx1048_rep, rx1048_bstack
    pop rx1048_pos, rx1048_bstack
    pop $I19, rx1048_bstack
    lt rx1048_pos, -1, rx1048_done2871
    lt rx1048_pos, 0, rx1048_fail2873
    eq $I19, 0, rx1048_fail2873
    nqp_islist $I20, rx1048_cstack
    unless $I20, rx1048_jump2874
    elements $I18, rx1048_bstack
    le $I18, 0, rx1048_cut2875
    dec $I18
    set $I18, rx1048_bstack[$I18]
  rx1048_cut2875:
    assign rx1048_cstack, $I18
  rx1048_jump2874:
    jump $I19
  rx1048_done2871:
    rx1048_cur."!cursor_fail"()
    .return (rx1048_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_186_1346968539.359_caps" :subid("cuid_memo_307_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_186_1346968539.359_nfa" :subid("cuid_memo_308_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 42
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym</>" :subid("cuid_187_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1276
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1052_tgt
    .local int rx1052_pos
    .local int rx1052_off
    .local int rx1052_eos
    .local int rx1052_rep
    .local pmc rx1052_cur
    .local pmc rx1052_curclass
    .local pmc rx1052_bstack
    .local pmc rx1052_cstack
    (rx1052_cur, rx1052_tgt, rx1052_pos, rx1052_curclass, rx1052_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1052_cur
    length rx1052_eos, rx1052_tgt
    eq $I19, 1, rx1052_restart2885
    gt rx1052_pos, rx1052_eos, rx1052_fail2886
    repr_get_attr_int $I11, self, rx1052_curclass, "$!from"
    ne $I11, -1, rxscan1053_done2892
    goto rxscan1053_scan2891
  rxscan1053_loop2890:
    inc rx1052_pos
    gt rx1052_pos, rx1052_eos, rx1052_fail2886
    repr_bind_attr_int rx1052_cur, rx1052_curclass, "$!from", rx1052_pos
  rxscan1053_scan2891:
    nqp_rxmark rx1052_bstack, rxscan1053_loop2890, rx1052_pos, 0
  rxscan1053_done2892:
    nqp_rxmark rx1052_bstack, rxcap1054_fail2894, rx1052_pos, 0
    add $I11, rx1052_pos, 1
    gt $I11, rx1052_eos, rx1052_fail2886
    substr $S10, rx1052_tgt, rx1052_pos, 1
    ne $S10, ucs4:"/", rx1052_fail2886
    add rx1052_pos, 1
    nqp_rxpeek $I19, rx1052_bstack, rxcap1054_fail2894
    inc $I19
    set $I11, rx1052_bstack[$I19]
    $P11 = rx1052_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1052_pos)
    rx1052_cstack = rx1052_cur."!cursor_capture"($P11, "sym")
    goto rxcap1054_done2893
  rxcap1054_fail2894:
    goto rx1052_fail2886
  rxcap1054_done2893:
    repr_bind_attr_int rx1052_cur, rx1052_curclass, "$!pos", rx1052_pos
    $P11 = rx1052_cur."O"("%multiplicative, :op<div_n>")
    repr_get_attr_int $I11, $P11, rx1052_curclass, "$!pos"
    lt $I11, 0, rx1052_fail2886
    nqp_rxmark rx1052_bstack, rxsubrule1055_pass2895, -1, 0
  rxsubrule1055_pass2895:
    rx1052_cstack = rx1052_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1052_pos, $P11, rx1052_curclass, "$!pos"
    rx1052_cur."!cursor_pass"(rx1052_pos, "infix:sym</>", 'backtrack'=>1)
    .return (rx1052_cur)
  rx1052_restart2885:
    repr_get_attr_obj rx1052_cstack, rx1052_cur, rx1052_curclass, "$!cstack"
  rx1052_fail2886:
    unless rx1052_bstack, rx1052_done2884
    pop $I19, rx1052_bstack
    if_null rx1052_cstack, rx1052_cstack_done2889
    unless rx1052_cstack, rx1052_cstack_done2889
    dec $I19
    set $P11, rx1052_cstack[$I19]
  rx1052_cstack_done2889:
    pop rx1052_rep, rx1052_bstack
    pop rx1052_pos, rx1052_bstack
    pop $I19, rx1052_bstack
    lt rx1052_pos, -1, rx1052_done2884
    lt rx1052_pos, 0, rx1052_fail2886
    eq $I19, 0, rx1052_fail2886
    nqp_islist $I20, rx1052_cstack
    unless $I20, rx1052_jump2887
    elements $I18, rx1052_bstack
    le $I18, 0, rx1052_cut2888
    dec $I18
    set $I18, rx1052_bstack[$I18]
  rx1052_cut2888:
    assign rx1052_cstack, $I18
  rx1052_jump2887:
    jump $I19
  rx1052_done2884:
    rx1052_cur."!cursor_fail"()
    .return (rx1052_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_187_1346968539.359_caps" :subid("cuid_memo_309_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_187_1346968539.359_nfa" :subid("cuid_memo_310_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 47
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<%>" :subid("cuid_188_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1277
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1056_tgt
    .local int rx1056_pos
    .local int rx1056_off
    .local int rx1056_eos
    .local int rx1056_rep
    .local pmc rx1056_cur
    .local pmc rx1056_curclass
    .local pmc rx1056_bstack
    .local pmc rx1056_cstack
    (rx1056_cur, rx1056_tgt, rx1056_pos, rx1056_curclass, rx1056_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1056_cur
    length rx1056_eos, rx1056_tgt
    eq $I19, 1, rx1056_restart2898
    gt rx1056_pos, rx1056_eos, rx1056_fail2899
    repr_get_attr_int $I11, self, rx1056_curclass, "$!from"
    ne $I11, -1, rxscan1057_done2905
    goto rxscan1057_scan2904
  rxscan1057_loop2903:
    inc rx1056_pos
    gt rx1056_pos, rx1056_eos, rx1056_fail2899
    repr_bind_attr_int rx1056_cur, rx1056_curclass, "$!from", rx1056_pos
  rxscan1057_scan2904:
    nqp_rxmark rx1056_bstack, rxscan1057_loop2903, rx1056_pos, 0
  rxscan1057_done2905:
    nqp_rxmark rx1056_bstack, rxcap1058_fail2907, rx1056_pos, 0
    add $I11, rx1056_pos, 1
    gt $I11, rx1056_eos, rx1056_fail2899
    substr $S10, rx1056_tgt, rx1056_pos, 1
    ne $S10, ucs4:"%", rx1056_fail2899
    add rx1056_pos, 1
    nqp_rxpeek $I19, rx1056_bstack, rxcap1058_fail2907
    inc $I19
    set $I11, rx1056_bstack[$I19]
    $P11 = rx1056_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1056_pos)
    rx1056_cstack = rx1056_cur."!cursor_capture"($P11, "sym")
    goto rxcap1058_done2906
  rxcap1058_fail2907:
    goto rx1056_fail2899
  rxcap1058_done2906:
    repr_bind_attr_int rx1056_cur, rx1056_curclass, "$!pos", rx1056_pos
    $P11 = rx1056_cur."O"("%multiplicative, :op<mod_n>")
    repr_get_attr_int $I11, $P11, rx1056_curclass, "$!pos"
    lt $I11, 0, rx1056_fail2899
    nqp_rxmark rx1056_bstack, rxsubrule1059_pass2908, -1, 0
  rxsubrule1059_pass2908:
    rx1056_cstack = rx1056_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1056_pos, $P11, rx1056_curclass, "$!pos"
    rx1056_cur."!cursor_pass"(rx1056_pos, "infix:sym<%>", 'backtrack'=>1)
    .return (rx1056_cur)
  rx1056_restart2898:
    repr_get_attr_obj rx1056_cstack, rx1056_cur, rx1056_curclass, "$!cstack"
  rx1056_fail2899:
    unless rx1056_bstack, rx1056_done2897
    pop $I19, rx1056_bstack
    if_null rx1056_cstack, rx1056_cstack_done2902
    unless rx1056_cstack, rx1056_cstack_done2902
    dec $I19
    set $P11, rx1056_cstack[$I19]
  rx1056_cstack_done2902:
    pop rx1056_rep, rx1056_bstack
    pop rx1056_pos, rx1056_bstack
    pop $I19, rx1056_bstack
    lt rx1056_pos, -1, rx1056_done2897
    lt rx1056_pos, 0, rx1056_fail2899
    eq $I19, 0, rx1056_fail2899
    nqp_islist $I20, rx1056_cstack
    unless $I20, rx1056_jump2900
    elements $I18, rx1056_bstack
    le $I18, 0, rx1056_cut2901
    dec $I18
    set $I18, rx1056_bstack[$I18]
  rx1056_cut2901:
    assign rx1056_cstack, $I18
  rx1056_jump2900:
    jump $I19
  rx1056_done2897:
    rx1056_cur."!cursor_fail"()
    .return (rx1056_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_188_1346968539.359_caps" :subid("cuid_memo_311_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_188_1346968539.359_nfa" :subid("cuid_memo_312_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 37
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+&>" :subid("cuid_189_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1278
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1060_tgt
    .local int rx1060_pos
    .local int rx1060_off
    .local int rx1060_eos
    .local int rx1060_rep
    .local pmc rx1060_cur
    .local pmc rx1060_curclass
    .local pmc rx1060_bstack
    .local pmc rx1060_cstack
    (rx1060_cur, rx1060_tgt, rx1060_pos, rx1060_curclass, rx1060_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1060_cur
    length rx1060_eos, rx1060_tgt
    eq $I19, 1, rx1060_restart2911
    gt rx1060_pos, rx1060_eos, rx1060_fail2912
    repr_get_attr_int $I11, self, rx1060_curclass, "$!from"
    ne $I11, -1, rxscan1061_done2918
    goto rxscan1061_scan2917
  rxscan1061_loop2916:
    inc rx1060_pos
    gt rx1060_pos, rx1060_eos, rx1060_fail2912
    repr_bind_attr_int rx1060_cur, rx1060_curclass, "$!from", rx1060_pos
  rxscan1061_scan2917:
    nqp_rxmark rx1060_bstack, rxscan1061_loop2916, rx1060_pos, 0
  rxscan1061_done2918:
    nqp_rxmark rx1060_bstack, rxcap1062_fail2920, rx1060_pos, 0
    add $I11, rx1060_pos, 2
    gt $I11, rx1060_eos, rx1060_fail2912
    substr $S10, rx1060_tgt, rx1060_pos, 2
    ne $S10, ucs4:"+&", rx1060_fail2912
    add rx1060_pos, 2
    nqp_rxpeek $I19, rx1060_bstack, rxcap1062_fail2920
    inc $I19
    set $I11, rx1060_bstack[$I19]
    $P11 = rx1060_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1060_pos)
    rx1060_cstack = rx1060_cur."!cursor_capture"($P11, "sym")
    goto rxcap1062_done2919
  rxcap1062_fail2920:
    goto rx1060_fail2912
  rxcap1062_done2919:
    repr_bind_attr_int rx1060_cur, rx1060_curclass, "$!pos", rx1060_pos
    $P11 = rx1060_cur."O"("%multiplicative, :op<bitand_i>")
    repr_get_attr_int $I11, $P11, rx1060_curclass, "$!pos"
    lt $I11, 0, rx1060_fail2912
    nqp_rxmark rx1060_bstack, rxsubrule1063_pass2921, -1, 0
  rxsubrule1063_pass2921:
    rx1060_cstack = rx1060_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1060_pos, $P11, rx1060_curclass, "$!pos"
    rx1060_cur."!cursor_pass"(rx1060_pos, "infix:sym<+&>", 'backtrack'=>1)
    .return (rx1060_cur)
  rx1060_restart2911:
    repr_get_attr_obj rx1060_cstack, rx1060_cur, rx1060_curclass, "$!cstack"
  rx1060_fail2912:
    unless rx1060_bstack, rx1060_done2910
    pop $I19, rx1060_bstack
    if_null rx1060_cstack, rx1060_cstack_done2915
    unless rx1060_cstack, rx1060_cstack_done2915
    dec $I19
    set $P11, rx1060_cstack[$I19]
  rx1060_cstack_done2915:
    pop rx1060_rep, rx1060_bstack
    pop rx1060_pos, rx1060_bstack
    pop $I19, rx1060_bstack
    lt rx1060_pos, -1, rx1060_done2910
    lt rx1060_pos, 0, rx1060_fail2912
    eq $I19, 0, rx1060_fail2912
    nqp_islist $I20, rx1060_cstack
    unless $I20, rx1060_jump2913
    elements $I18, rx1060_bstack
    le $I18, 0, rx1060_cut2914
    dec $I18
    set $I18, rx1060_bstack[$I18]
  rx1060_cut2914:
    assign rx1060_cstack, $I18
  rx1060_jump2913:
    jump $I19
  rx1060_done2910:
    rx1060_cur."!cursor_fail"()
    .return (rx1060_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_189_1346968539.359_caps" :subid("cuid_memo_313_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_189_1346968539.359_nfa" :subid("cuid_memo_314_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 43
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 38
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+>" :subid("cuid_190_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1280
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1064_tgt
    .local int rx1064_pos
    .local int rx1064_off
    .local int rx1064_eos
    .local int rx1064_rep
    .local pmc rx1064_cur
    .local pmc rx1064_curclass
    .local pmc rx1064_bstack
    .local pmc rx1064_cstack
    (rx1064_cur, rx1064_tgt, rx1064_pos, rx1064_curclass, rx1064_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1064_cur
    length rx1064_eos, rx1064_tgt
    eq $I19, 1, rx1064_restart2924
    gt rx1064_pos, rx1064_eos, rx1064_fail2925
    repr_get_attr_int $I11, self, rx1064_curclass, "$!from"
    ne $I11, -1, rxscan1065_done2931
    goto rxscan1065_scan2930
  rxscan1065_loop2929:
    inc rx1064_pos
    gt rx1064_pos, rx1064_eos, rx1064_fail2925
    repr_bind_attr_int rx1064_cur, rx1064_curclass, "$!from", rx1064_pos
  rxscan1065_scan2930:
    nqp_rxmark rx1064_bstack, rxscan1065_loop2929, rx1064_pos, 0
  rxscan1065_done2931:
    nqp_rxmark rx1064_bstack, rxcap1066_fail2933, rx1064_pos, 0
    add $I11, rx1064_pos, 1
    gt $I11, rx1064_eos, rx1064_fail2925
    substr $S10, rx1064_tgt, rx1064_pos, 1
    ne $S10, ucs4:"+", rx1064_fail2925
    add rx1064_pos, 1
    nqp_rxpeek $I19, rx1064_bstack, rxcap1066_fail2933
    inc $I19
    set $I11, rx1064_bstack[$I19]
    $P11 = rx1064_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1064_pos)
    rx1064_cstack = rx1064_cur."!cursor_capture"($P11, "sym")
    goto rxcap1066_done2932
  rxcap1066_fail2933:
    goto rx1064_fail2925
  rxcap1066_done2932:
    repr_bind_attr_int rx1064_cur, rx1064_curclass, "$!pos", rx1064_pos
    $P11 = rx1064_cur."O"("%additive, :op<add_n>")
    repr_get_attr_int $I11, $P11, rx1064_curclass, "$!pos"
    lt $I11, 0, rx1064_fail2925
    nqp_rxmark rx1064_bstack, rxsubrule1067_pass2934, -1, 0
  rxsubrule1067_pass2934:
    rx1064_cstack = rx1064_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1064_pos, $P11, rx1064_curclass, "$!pos"
    rx1064_cur."!cursor_pass"(rx1064_pos, "infix:sym<+>", 'backtrack'=>1)
    .return (rx1064_cur)
  rx1064_restart2924:
    repr_get_attr_obj rx1064_cstack, rx1064_cur, rx1064_curclass, "$!cstack"
  rx1064_fail2925:
    unless rx1064_bstack, rx1064_done2923
    pop $I19, rx1064_bstack
    if_null rx1064_cstack, rx1064_cstack_done2928
    unless rx1064_cstack, rx1064_cstack_done2928
    dec $I19
    set $P11, rx1064_cstack[$I19]
  rx1064_cstack_done2928:
    pop rx1064_rep, rx1064_bstack
    pop rx1064_pos, rx1064_bstack
    pop $I19, rx1064_bstack
    lt rx1064_pos, -1, rx1064_done2923
    lt rx1064_pos, 0, rx1064_fail2925
    eq $I19, 0, rx1064_fail2925
    nqp_islist $I20, rx1064_cstack
    unless $I20, rx1064_jump2926
    elements $I18, rx1064_bstack
    le $I18, 0, rx1064_cut2927
    dec $I18
    set $I18, rx1064_bstack[$I18]
  rx1064_cut2927:
    assign rx1064_cstack, $I18
  rx1064_jump2926:
    jump $I19
  rx1064_done2923:
    rx1064_cur."!cursor_fail"()
    .return (rx1064_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_190_1346968539.359_caps" :subid("cuid_memo_315_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_190_1346968539.359_nfa" :subid("cuid_memo_316_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 43
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<->" :subid("cuid_191_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1281
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1068_tgt
    .local int rx1068_pos
    .local int rx1068_off
    .local int rx1068_eos
    .local int rx1068_rep
    .local pmc rx1068_cur
    .local pmc rx1068_curclass
    .local pmc rx1068_bstack
    .local pmc rx1068_cstack
    (rx1068_cur, rx1068_tgt, rx1068_pos, rx1068_curclass, rx1068_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1068_cur
    length rx1068_eos, rx1068_tgt
    eq $I19, 1, rx1068_restart2937
    gt rx1068_pos, rx1068_eos, rx1068_fail2938
    repr_get_attr_int $I11, self, rx1068_curclass, "$!from"
    ne $I11, -1, rxscan1069_done2944
    goto rxscan1069_scan2943
  rxscan1069_loop2942:
    inc rx1068_pos
    gt rx1068_pos, rx1068_eos, rx1068_fail2938
    repr_bind_attr_int rx1068_cur, rx1068_curclass, "$!from", rx1068_pos
  rxscan1069_scan2943:
    nqp_rxmark rx1068_bstack, rxscan1069_loop2942, rx1068_pos, 0
  rxscan1069_done2944:
    nqp_rxmark rx1068_bstack, rxcap1070_fail2946, rx1068_pos, 0
    add $I11, rx1068_pos, 1
    gt $I11, rx1068_eos, rx1068_fail2938
    substr $S10, rx1068_tgt, rx1068_pos, 1
    ne $S10, ucs4:"-", rx1068_fail2938
    add rx1068_pos, 1
    nqp_rxpeek $I19, rx1068_bstack, rxcap1070_fail2946
    inc $I19
    set $I11, rx1068_bstack[$I19]
    $P11 = rx1068_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1068_pos)
    rx1068_cstack = rx1068_cur."!cursor_capture"($P11, "sym")
    goto rxcap1070_done2945
  rxcap1070_fail2946:
    goto rx1068_fail2938
  rxcap1070_done2945:
    repr_bind_attr_int rx1068_cur, rx1068_curclass, "$!pos", rx1068_pos
    $P11 = rx1068_cur."O"("%additive, :op<sub_n>")
    repr_get_attr_int $I11, $P11, rx1068_curclass, "$!pos"
    lt $I11, 0, rx1068_fail2938
    nqp_rxmark rx1068_bstack, rxsubrule1071_pass2947, -1, 0
  rxsubrule1071_pass2947:
    rx1068_cstack = rx1068_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1068_pos, $P11, rx1068_curclass, "$!pos"
    rx1068_cur."!cursor_pass"(rx1068_pos, "infix:sym<->", 'backtrack'=>1)
    .return (rx1068_cur)
  rx1068_restart2937:
    repr_get_attr_obj rx1068_cstack, rx1068_cur, rx1068_curclass, "$!cstack"
  rx1068_fail2938:
    unless rx1068_bstack, rx1068_done2936
    pop $I19, rx1068_bstack
    if_null rx1068_cstack, rx1068_cstack_done2941
    unless rx1068_cstack, rx1068_cstack_done2941
    dec $I19
    set $P11, rx1068_cstack[$I19]
  rx1068_cstack_done2941:
    pop rx1068_rep, rx1068_bstack
    pop rx1068_pos, rx1068_bstack
    pop $I19, rx1068_bstack
    lt rx1068_pos, -1, rx1068_done2936
    lt rx1068_pos, 0, rx1068_fail2938
    eq $I19, 0, rx1068_fail2938
    nqp_islist $I20, rx1068_cstack
    unless $I20, rx1068_jump2939
    elements $I18, rx1068_bstack
    le $I18, 0, rx1068_cut2940
    dec $I18
    set $I18, rx1068_bstack[$I18]
  rx1068_cut2940:
    assign rx1068_cstack, $I18
  rx1068_jump2939:
    jump $I19
  rx1068_done2936:
    rx1068_cur."!cursor_fail"()
    .return (rx1068_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_191_1346968539.359_caps" :subid("cuid_memo_317_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_191_1346968539.359_nfa" :subid("cuid_memo_318_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 45
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+|>" :subid("cuid_192_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1282
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1072_tgt
    .local int rx1072_pos
    .local int rx1072_off
    .local int rx1072_eos
    .local int rx1072_rep
    .local pmc rx1072_cur
    .local pmc rx1072_curclass
    .local pmc rx1072_bstack
    .local pmc rx1072_cstack
    (rx1072_cur, rx1072_tgt, rx1072_pos, rx1072_curclass, rx1072_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1072_cur
    length rx1072_eos, rx1072_tgt
    eq $I19, 1, rx1072_restart2950
    gt rx1072_pos, rx1072_eos, rx1072_fail2951
    repr_get_attr_int $I11, self, rx1072_curclass, "$!from"
    ne $I11, -1, rxscan1073_done2957
    goto rxscan1073_scan2956
  rxscan1073_loop2955:
    inc rx1072_pos
    gt rx1072_pos, rx1072_eos, rx1072_fail2951
    repr_bind_attr_int rx1072_cur, rx1072_curclass, "$!from", rx1072_pos
  rxscan1073_scan2956:
    nqp_rxmark rx1072_bstack, rxscan1073_loop2955, rx1072_pos, 0
  rxscan1073_done2957:
    nqp_rxmark rx1072_bstack, rxcap1074_fail2959, rx1072_pos, 0
    add $I11, rx1072_pos, 2
    gt $I11, rx1072_eos, rx1072_fail2951
    substr $S10, rx1072_tgt, rx1072_pos, 2
    ne $S10, ucs4:"+|", rx1072_fail2951
    add rx1072_pos, 2
    nqp_rxpeek $I19, rx1072_bstack, rxcap1074_fail2959
    inc $I19
    set $I11, rx1072_bstack[$I19]
    $P11 = rx1072_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1072_pos)
    rx1072_cstack = rx1072_cur."!cursor_capture"($P11, "sym")
    goto rxcap1074_done2958
  rxcap1074_fail2959:
    goto rx1072_fail2951
  rxcap1074_done2958:
    repr_bind_attr_int rx1072_cur, rx1072_curclass, "$!pos", rx1072_pos
    $P11 = rx1072_cur."O"("%additive, :op<bitor_i>")
    repr_get_attr_int $I11, $P11, rx1072_curclass, "$!pos"
    lt $I11, 0, rx1072_fail2951
    nqp_rxmark rx1072_bstack, rxsubrule1075_pass2960, -1, 0
  rxsubrule1075_pass2960:
    rx1072_cstack = rx1072_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1072_pos, $P11, rx1072_curclass, "$!pos"
    rx1072_cur."!cursor_pass"(rx1072_pos, "infix:sym<+|>", 'backtrack'=>1)
    .return (rx1072_cur)
  rx1072_restart2950:
    repr_get_attr_obj rx1072_cstack, rx1072_cur, rx1072_curclass, "$!cstack"
  rx1072_fail2951:
    unless rx1072_bstack, rx1072_done2949
    pop $I19, rx1072_bstack
    if_null rx1072_cstack, rx1072_cstack_done2954
    unless rx1072_cstack, rx1072_cstack_done2954
    dec $I19
    set $P11, rx1072_cstack[$I19]
  rx1072_cstack_done2954:
    pop rx1072_rep, rx1072_bstack
    pop rx1072_pos, rx1072_bstack
    pop $I19, rx1072_bstack
    lt rx1072_pos, -1, rx1072_done2949
    lt rx1072_pos, 0, rx1072_fail2951
    eq $I19, 0, rx1072_fail2951
    nqp_islist $I20, rx1072_cstack
    unless $I20, rx1072_jump2952
    elements $I18, rx1072_bstack
    le $I18, 0, rx1072_cut2953
    dec $I18
    set $I18, rx1072_bstack[$I18]
  rx1072_cut2953:
    assign rx1072_cstack, $I18
  rx1072_jump2952:
    jump $I19
  rx1072_done2949:
    rx1072_cur."!cursor_fail"()
    .return (rx1072_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_192_1346968539.359_caps" :subid("cuid_memo_319_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_192_1346968539.359_nfa" :subid("cuid_memo_320_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 43
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 124
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+^>" :subid("cuid_193_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1283
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1076_tgt
    .local int rx1076_pos
    .local int rx1076_off
    .local int rx1076_eos
    .local int rx1076_rep
    .local pmc rx1076_cur
    .local pmc rx1076_curclass
    .local pmc rx1076_bstack
    .local pmc rx1076_cstack
    (rx1076_cur, rx1076_tgt, rx1076_pos, rx1076_curclass, rx1076_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1076_cur
    length rx1076_eos, rx1076_tgt
    eq $I19, 1, rx1076_restart2963
    gt rx1076_pos, rx1076_eos, rx1076_fail2964
    repr_get_attr_int $I11, self, rx1076_curclass, "$!from"
    ne $I11, -1, rxscan1077_done2970
    goto rxscan1077_scan2969
  rxscan1077_loop2968:
    inc rx1076_pos
    gt rx1076_pos, rx1076_eos, rx1076_fail2964
    repr_bind_attr_int rx1076_cur, rx1076_curclass, "$!from", rx1076_pos
  rxscan1077_scan2969:
    nqp_rxmark rx1076_bstack, rxscan1077_loop2968, rx1076_pos, 0
  rxscan1077_done2970:
    nqp_rxmark rx1076_bstack, rxcap1078_fail2972, rx1076_pos, 0
    add $I11, rx1076_pos, 2
    gt $I11, rx1076_eos, rx1076_fail2964
    substr $S10, rx1076_tgt, rx1076_pos, 2
    ne $S10, ucs4:"+^", rx1076_fail2964
    add rx1076_pos, 2
    nqp_rxpeek $I19, rx1076_bstack, rxcap1078_fail2972
    inc $I19
    set $I11, rx1076_bstack[$I19]
    $P11 = rx1076_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1076_pos)
    rx1076_cstack = rx1076_cur."!cursor_capture"($P11, "sym")
    goto rxcap1078_done2971
  rxcap1078_fail2972:
    goto rx1076_fail2964
  rxcap1078_done2971:
    repr_bind_attr_int rx1076_cur, rx1076_curclass, "$!pos", rx1076_pos
    $P11 = rx1076_cur."O"("%additive, :op<bitxor_i>")
    repr_get_attr_int $I11, $P11, rx1076_curclass, "$!pos"
    lt $I11, 0, rx1076_fail2964
    nqp_rxmark rx1076_bstack, rxsubrule1079_pass2973, -1, 0
  rxsubrule1079_pass2973:
    rx1076_cstack = rx1076_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1076_pos, $P11, rx1076_curclass, "$!pos"
    rx1076_cur."!cursor_pass"(rx1076_pos, "infix:sym<+^>", 'backtrack'=>1)
    .return (rx1076_cur)
  rx1076_restart2963:
    repr_get_attr_obj rx1076_cstack, rx1076_cur, rx1076_curclass, "$!cstack"
  rx1076_fail2964:
    unless rx1076_bstack, rx1076_done2962
    pop $I19, rx1076_bstack
    if_null rx1076_cstack, rx1076_cstack_done2967
    unless rx1076_cstack, rx1076_cstack_done2967
    dec $I19
    set $P11, rx1076_cstack[$I19]
  rx1076_cstack_done2967:
    pop rx1076_rep, rx1076_bstack
    pop rx1076_pos, rx1076_bstack
    pop $I19, rx1076_bstack
    lt rx1076_pos, -1, rx1076_done2962
    lt rx1076_pos, 0, rx1076_fail2964
    eq $I19, 0, rx1076_fail2964
    nqp_islist $I20, rx1076_cstack
    unless $I20, rx1076_jump2965
    elements $I18, rx1076_bstack
    le $I18, 0, rx1076_cut2966
    dec $I18
    set $I18, rx1076_bstack[$I18]
  rx1076_cut2966:
    assign rx1076_cstack, $I18
  rx1076_jump2965:
    jump $I19
  rx1076_done2962:
    rx1076_cur."!cursor_fail"()
    .return (rx1076_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_193_1346968539.359_caps" :subid("cuid_memo_321_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_193_1346968539.359_nfa" :subid("cuid_memo_322_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 43
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 94
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<~>" :subid("cuid_194_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1285
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1080_tgt
    .local int rx1080_pos
    .local int rx1080_off
    .local int rx1080_eos
    .local int rx1080_rep
    .local pmc rx1080_cur
    .local pmc rx1080_curclass
    .local pmc rx1080_bstack
    .local pmc rx1080_cstack
    (rx1080_cur, rx1080_tgt, rx1080_pos, rx1080_curclass, rx1080_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1080_cur
    length rx1080_eos, rx1080_tgt
    eq $I19, 1, rx1080_restart2976
    gt rx1080_pos, rx1080_eos, rx1080_fail2977
    repr_get_attr_int $I11, self, rx1080_curclass, "$!from"
    ne $I11, -1, rxscan1081_done2983
    goto rxscan1081_scan2982
  rxscan1081_loop2981:
    inc rx1080_pos
    gt rx1080_pos, rx1080_eos, rx1080_fail2977
    repr_bind_attr_int rx1080_cur, rx1080_curclass, "$!from", rx1080_pos
  rxscan1081_scan2982:
    nqp_rxmark rx1080_bstack, rxscan1081_loop2981, rx1080_pos, 0
  rxscan1081_done2983:
    nqp_rxmark rx1080_bstack, rxcap1082_fail2985, rx1080_pos, 0
    add $I11, rx1080_pos, 1
    gt $I11, rx1080_eos, rx1080_fail2977
    substr $S10, rx1080_tgt, rx1080_pos, 1
    ne $S10, ucs4:"~", rx1080_fail2977
    add rx1080_pos, 1
    nqp_rxpeek $I19, rx1080_bstack, rxcap1082_fail2985
    inc $I19
    set $I11, rx1080_bstack[$I19]
    $P11 = rx1080_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1080_pos)
    rx1080_cstack = rx1080_cur."!cursor_capture"($P11, "sym")
    goto rxcap1082_done2984
  rxcap1082_fail2985:
    goto rx1080_fail2977
  rxcap1082_done2984:
    repr_bind_attr_int rx1080_cur, rx1080_curclass, "$!pos", rx1080_pos
    $P11 = rx1080_cur."O"("%concatenation , :op<concat>")
    repr_get_attr_int $I11, $P11, rx1080_curclass, "$!pos"
    lt $I11, 0, rx1080_fail2977
    nqp_rxmark rx1080_bstack, rxsubrule1083_pass2986, -1, 0
  rxsubrule1083_pass2986:
    rx1080_cstack = rx1080_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1080_pos, $P11, rx1080_curclass, "$!pos"
    rx1080_cur."!cursor_pass"(rx1080_pos, "infix:sym<~>", 'backtrack'=>1)
    .return (rx1080_cur)
  rx1080_restart2976:
    repr_get_attr_obj rx1080_cstack, rx1080_cur, rx1080_curclass, "$!cstack"
  rx1080_fail2977:
    unless rx1080_bstack, rx1080_done2975
    pop $I19, rx1080_bstack
    if_null rx1080_cstack, rx1080_cstack_done2980
    unless rx1080_cstack, rx1080_cstack_done2980
    dec $I19
    set $P11, rx1080_cstack[$I19]
  rx1080_cstack_done2980:
    pop rx1080_rep, rx1080_bstack
    pop rx1080_pos, rx1080_bstack
    pop $I19, rx1080_bstack
    lt rx1080_pos, -1, rx1080_done2975
    lt rx1080_pos, 0, rx1080_fail2977
    eq $I19, 0, rx1080_fail2977
    nqp_islist $I20, rx1080_cstack
    unless $I20, rx1080_jump2978
    elements $I18, rx1080_bstack
    le $I18, 0, rx1080_cut2979
    dec $I18
    set $I18, rx1080_bstack[$I18]
  rx1080_cut2979:
    assign rx1080_cstack, $I18
  rx1080_jump2978:
    jump $I19
  rx1080_done2975:
    rx1080_cur."!cursor_fail"()
    .return (rx1080_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_194_1346968539.359_caps" :subid("cuid_memo_323_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_194_1346968539.359_nfa" :subid("cuid_memo_324_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 126
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<==>" :subid("cuid_195_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1287
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1084_tgt
    .local int rx1084_pos
    .local int rx1084_off
    .local int rx1084_eos
    .local int rx1084_rep
    .local pmc rx1084_cur
    .local pmc rx1084_curclass
    .local pmc rx1084_bstack
    .local pmc rx1084_cstack
    (rx1084_cur, rx1084_tgt, rx1084_pos, rx1084_curclass, rx1084_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1084_cur
    length rx1084_eos, rx1084_tgt
    eq $I19, 1, rx1084_restart2989
    gt rx1084_pos, rx1084_eos, rx1084_fail2990
    repr_get_attr_int $I11, self, rx1084_curclass, "$!from"
    ne $I11, -1, rxscan1085_done2996
    goto rxscan1085_scan2995
  rxscan1085_loop2994:
    inc rx1084_pos
    gt rx1084_pos, rx1084_eos, rx1084_fail2990
    repr_bind_attr_int rx1084_cur, rx1084_curclass, "$!from", rx1084_pos
  rxscan1085_scan2995:
    nqp_rxmark rx1084_bstack, rxscan1085_loop2994, rx1084_pos, 0
  rxscan1085_done2996:
    nqp_rxmark rx1084_bstack, rxcap1086_fail2998, rx1084_pos, 0
    add $I11, rx1084_pos, 2
    gt $I11, rx1084_eos, rx1084_fail2990
    substr $S10, rx1084_tgt, rx1084_pos, 2
    ne $S10, ucs4:"==", rx1084_fail2990
    add rx1084_pos, 2
    nqp_rxpeek $I19, rx1084_bstack, rxcap1086_fail2998
    inc $I19
    set $I11, rx1084_bstack[$I19]
    $P11 = rx1084_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1084_pos)
    rx1084_cstack = rx1084_cur."!cursor_capture"($P11, "sym")
    goto rxcap1086_done2997
  rxcap1086_fail2998:
    goto rx1084_fail2990
  rxcap1086_done2997:
    repr_bind_attr_int rx1084_cur, rx1084_curclass, "$!pos", rx1084_pos
    $P11 = rx1084_cur."O"("%relational, :op<iseq_n>")
    repr_get_attr_int $I11, $P11, rx1084_curclass, "$!pos"
    lt $I11, 0, rx1084_fail2990
    nqp_rxmark rx1084_bstack, rxsubrule1087_pass2999, -1, 0
  rxsubrule1087_pass2999:
    rx1084_cstack = rx1084_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1084_pos, $P11, rx1084_curclass, "$!pos"
    rx1084_cur."!cursor_pass"(rx1084_pos, "infix:sym<==>", 'backtrack'=>1)
    .return (rx1084_cur)
  rx1084_restart2989:
    repr_get_attr_obj rx1084_cstack, rx1084_cur, rx1084_curclass, "$!cstack"
  rx1084_fail2990:
    unless rx1084_bstack, rx1084_done2988
    pop $I19, rx1084_bstack
    if_null rx1084_cstack, rx1084_cstack_done2993
    unless rx1084_cstack, rx1084_cstack_done2993
    dec $I19
    set $P11, rx1084_cstack[$I19]
  rx1084_cstack_done2993:
    pop rx1084_rep, rx1084_bstack
    pop rx1084_pos, rx1084_bstack
    pop $I19, rx1084_bstack
    lt rx1084_pos, -1, rx1084_done2988
    lt rx1084_pos, 0, rx1084_fail2990
    eq $I19, 0, rx1084_fail2990
    nqp_islist $I20, rx1084_cstack
    unless $I20, rx1084_jump2991
    elements $I18, rx1084_bstack
    le $I18, 0, rx1084_cut2992
    dec $I18
    set $I18, rx1084_bstack[$I18]
  rx1084_cut2992:
    assign rx1084_cstack, $I18
  rx1084_jump2991:
    jump $I19
  rx1084_done2988:
    rx1084_cur."!cursor_fail"()
    .return (rx1084_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_195_1346968539.359_caps" :subid("cuid_memo_325_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_195_1346968539.359_nfa" :subid("cuid_memo_326_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 61
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 61
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<!=>" :subid("cuid_196_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1288
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1088_tgt
    .local int rx1088_pos
    .local int rx1088_off
    .local int rx1088_eos
    .local int rx1088_rep
    .local pmc rx1088_cur
    .local pmc rx1088_curclass
    .local pmc rx1088_bstack
    .local pmc rx1088_cstack
    (rx1088_cur, rx1088_tgt, rx1088_pos, rx1088_curclass, rx1088_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1088_cur
    length rx1088_eos, rx1088_tgt
    eq $I19, 1, rx1088_restart3002
    gt rx1088_pos, rx1088_eos, rx1088_fail3003
    repr_get_attr_int $I11, self, rx1088_curclass, "$!from"
    ne $I11, -1, rxscan1089_done3009
    goto rxscan1089_scan3008
  rxscan1089_loop3007:
    inc rx1088_pos
    gt rx1088_pos, rx1088_eos, rx1088_fail3003
    repr_bind_attr_int rx1088_cur, rx1088_curclass, "$!from", rx1088_pos
  rxscan1089_scan3008:
    nqp_rxmark rx1088_bstack, rxscan1089_loop3007, rx1088_pos, 0
  rxscan1089_done3009:
    nqp_rxmark rx1088_bstack, rxcap1090_fail3011, rx1088_pos, 0
    add $I11, rx1088_pos, 2
    gt $I11, rx1088_eos, rx1088_fail3003
    substr $S10, rx1088_tgt, rx1088_pos, 2
    ne $S10, ucs4:"!=", rx1088_fail3003
    add rx1088_pos, 2
    nqp_rxpeek $I19, rx1088_bstack, rxcap1090_fail3011
    inc $I19
    set $I11, rx1088_bstack[$I19]
    $P11 = rx1088_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1088_pos)
    rx1088_cstack = rx1088_cur."!cursor_capture"($P11, "sym")
    goto rxcap1090_done3010
  rxcap1090_fail3011:
    goto rx1088_fail3003
  rxcap1090_done3010:
    repr_bind_attr_int rx1088_cur, rx1088_curclass, "$!pos", rx1088_pos
    $P11 = rx1088_cur."O"("%relational, :op<isne_n>")
    repr_get_attr_int $I11, $P11, rx1088_curclass, "$!pos"
    lt $I11, 0, rx1088_fail3003
    nqp_rxmark rx1088_bstack, rxsubrule1091_pass3012, -1, 0
  rxsubrule1091_pass3012:
    rx1088_cstack = rx1088_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1088_pos, $P11, rx1088_curclass, "$!pos"
    rx1088_cur."!cursor_pass"(rx1088_pos, "infix:sym<!=>", 'backtrack'=>1)
    .return (rx1088_cur)
  rx1088_restart3002:
    repr_get_attr_obj rx1088_cstack, rx1088_cur, rx1088_curclass, "$!cstack"
  rx1088_fail3003:
    unless rx1088_bstack, rx1088_done3001
    pop $I19, rx1088_bstack
    if_null rx1088_cstack, rx1088_cstack_done3006
    unless rx1088_cstack, rx1088_cstack_done3006
    dec $I19
    set $P11, rx1088_cstack[$I19]
  rx1088_cstack_done3006:
    pop rx1088_rep, rx1088_bstack
    pop rx1088_pos, rx1088_bstack
    pop $I19, rx1088_bstack
    lt rx1088_pos, -1, rx1088_done3001
    lt rx1088_pos, 0, rx1088_fail3003
    eq $I19, 0, rx1088_fail3003
    nqp_islist $I20, rx1088_cstack
    unless $I20, rx1088_jump3004
    elements $I18, rx1088_bstack
    le $I18, 0, rx1088_cut3005
    dec $I18
    set $I18, rx1088_bstack[$I18]
  rx1088_cut3005:
    assign rx1088_cstack, $I18
  rx1088_jump3004:
    jump $I19
  rx1088_done3001:
    rx1088_cur."!cursor_fail"()
    .return (rx1088_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_196_1346968539.359_caps" :subid("cuid_memo_327_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_196_1346968539.359_nfa" :subid("cuid_memo_328_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 33
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 61
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<<=>" :subid("cuid_197_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1289
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1092_tgt
    .local int rx1092_pos
    .local int rx1092_off
    .local int rx1092_eos
    .local int rx1092_rep
    .local pmc rx1092_cur
    .local pmc rx1092_curclass
    .local pmc rx1092_bstack
    .local pmc rx1092_cstack
    (rx1092_cur, rx1092_tgt, rx1092_pos, rx1092_curclass, rx1092_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1092_cur
    length rx1092_eos, rx1092_tgt
    eq $I19, 1, rx1092_restart3015
    gt rx1092_pos, rx1092_eos, rx1092_fail3016
    repr_get_attr_int $I11, self, rx1092_curclass, "$!from"
    ne $I11, -1, rxscan1093_done3022
    goto rxscan1093_scan3021
  rxscan1093_loop3020:
    inc rx1092_pos
    gt rx1092_pos, rx1092_eos, rx1092_fail3016
    repr_bind_attr_int rx1092_cur, rx1092_curclass, "$!from", rx1092_pos
  rxscan1093_scan3021:
    nqp_rxmark rx1092_bstack, rxscan1093_loop3020, rx1092_pos, 0
  rxscan1093_done3022:
    nqp_rxmark rx1092_bstack, rxcap1094_fail3024, rx1092_pos, 0
    add $I11, rx1092_pos, 2
    gt $I11, rx1092_eos, rx1092_fail3016
    substr $S10, rx1092_tgt, rx1092_pos, 2
    ne $S10, ucs4:"<=", rx1092_fail3016
    add rx1092_pos, 2
    nqp_rxpeek $I19, rx1092_bstack, rxcap1094_fail3024
    inc $I19
    set $I11, rx1092_bstack[$I19]
    $P11 = rx1092_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1092_pos)
    rx1092_cstack = rx1092_cur."!cursor_capture"($P11, "sym")
    goto rxcap1094_done3023
  rxcap1094_fail3024:
    goto rx1092_fail3016
  rxcap1094_done3023:
    repr_bind_attr_int rx1092_cur, rx1092_curclass, "$!pos", rx1092_pos
    $P11 = rx1092_cur."O"("%relational, :op<isle_n>")
    repr_get_attr_int $I11, $P11, rx1092_curclass, "$!pos"
    lt $I11, 0, rx1092_fail3016
    nqp_rxmark rx1092_bstack, rxsubrule1095_pass3025, -1, 0
  rxsubrule1095_pass3025:
    rx1092_cstack = rx1092_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1092_pos, $P11, rx1092_curclass, "$!pos"
    rx1092_cur."!cursor_pass"(rx1092_pos, "infix:sym<<=>", 'backtrack'=>1)
    .return (rx1092_cur)
  rx1092_restart3015:
    repr_get_attr_obj rx1092_cstack, rx1092_cur, rx1092_curclass, "$!cstack"
  rx1092_fail3016:
    unless rx1092_bstack, rx1092_done3014
    pop $I19, rx1092_bstack
    if_null rx1092_cstack, rx1092_cstack_done3019
    unless rx1092_cstack, rx1092_cstack_done3019
    dec $I19
    set $P11, rx1092_cstack[$I19]
  rx1092_cstack_done3019:
    pop rx1092_rep, rx1092_bstack
    pop rx1092_pos, rx1092_bstack
    pop $I19, rx1092_bstack
    lt rx1092_pos, -1, rx1092_done3014
    lt rx1092_pos, 0, rx1092_fail3016
    eq $I19, 0, rx1092_fail3016
    nqp_islist $I20, rx1092_cstack
    unless $I20, rx1092_jump3017
    elements $I18, rx1092_bstack
    le $I18, 0, rx1092_cut3018
    dec $I18
    set $I18, rx1092_bstack[$I18]
  rx1092_cut3018:
    assign rx1092_cstack, $I18
  rx1092_jump3017:
    jump $I19
  rx1092_done3014:
    rx1092_cur."!cursor_fail"()
    .return (rx1092_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_197_1346968539.359_caps" :subid("cuid_memo_329_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_197_1346968539.359_nfa" :subid("cuid_memo_330_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 60
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 61
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<>=>" :subid("cuid_198_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1290
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1096_tgt
    .local int rx1096_pos
    .local int rx1096_off
    .local int rx1096_eos
    .local int rx1096_rep
    .local pmc rx1096_cur
    .local pmc rx1096_curclass
    .local pmc rx1096_bstack
    .local pmc rx1096_cstack
    (rx1096_cur, rx1096_tgt, rx1096_pos, rx1096_curclass, rx1096_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1096_cur
    length rx1096_eos, rx1096_tgt
    eq $I19, 1, rx1096_restart3028
    gt rx1096_pos, rx1096_eos, rx1096_fail3029
    repr_get_attr_int $I11, self, rx1096_curclass, "$!from"
    ne $I11, -1, rxscan1097_done3035
    goto rxscan1097_scan3034
  rxscan1097_loop3033:
    inc rx1096_pos
    gt rx1096_pos, rx1096_eos, rx1096_fail3029
    repr_bind_attr_int rx1096_cur, rx1096_curclass, "$!from", rx1096_pos
  rxscan1097_scan3034:
    nqp_rxmark rx1096_bstack, rxscan1097_loop3033, rx1096_pos, 0
  rxscan1097_done3035:
    nqp_rxmark rx1096_bstack, rxcap1098_fail3037, rx1096_pos, 0
    add $I11, rx1096_pos, 2
    gt $I11, rx1096_eos, rx1096_fail3029
    substr $S10, rx1096_tgt, rx1096_pos, 2
    ne $S10, ucs4:">=", rx1096_fail3029
    add rx1096_pos, 2
    nqp_rxpeek $I19, rx1096_bstack, rxcap1098_fail3037
    inc $I19
    set $I11, rx1096_bstack[$I19]
    $P11 = rx1096_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1096_pos)
    rx1096_cstack = rx1096_cur."!cursor_capture"($P11, "sym")
    goto rxcap1098_done3036
  rxcap1098_fail3037:
    goto rx1096_fail3029
  rxcap1098_done3036:
    repr_bind_attr_int rx1096_cur, rx1096_curclass, "$!pos", rx1096_pos
    $P11 = rx1096_cur."O"("%relational, :op<isge_n>")
    repr_get_attr_int $I11, $P11, rx1096_curclass, "$!pos"
    lt $I11, 0, rx1096_fail3029
    nqp_rxmark rx1096_bstack, rxsubrule1099_pass3038, -1, 0
  rxsubrule1099_pass3038:
    rx1096_cstack = rx1096_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1096_pos, $P11, rx1096_curclass, "$!pos"
    rx1096_cur."!cursor_pass"(rx1096_pos, "infix:sym<>=>", 'backtrack'=>1)
    .return (rx1096_cur)
  rx1096_restart3028:
    repr_get_attr_obj rx1096_cstack, rx1096_cur, rx1096_curclass, "$!cstack"
  rx1096_fail3029:
    unless rx1096_bstack, rx1096_done3027
    pop $I19, rx1096_bstack
    if_null rx1096_cstack, rx1096_cstack_done3032
    unless rx1096_cstack, rx1096_cstack_done3032
    dec $I19
    set $P11, rx1096_cstack[$I19]
  rx1096_cstack_done3032:
    pop rx1096_rep, rx1096_bstack
    pop rx1096_pos, rx1096_bstack
    pop $I19, rx1096_bstack
    lt rx1096_pos, -1, rx1096_done3027
    lt rx1096_pos, 0, rx1096_fail3029
    eq $I19, 0, rx1096_fail3029
    nqp_islist $I20, rx1096_cstack
    unless $I20, rx1096_jump3030
    elements $I18, rx1096_bstack
    le $I18, 0, rx1096_cut3031
    dec $I18
    set $I18, rx1096_bstack[$I18]
  rx1096_cut3031:
    assign rx1096_cstack, $I18
  rx1096_jump3030:
    jump $I19
  rx1096_done3027:
    rx1096_cur."!cursor_fail"()
    .return (rx1096_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_198_1346968539.359_caps" :subid("cuid_memo_331_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_198_1346968539.359_nfa" :subid("cuid_memo_332_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 62
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 61
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<<>" :subid("cuid_199_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1291
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1100_tgt
    .local int rx1100_pos
    .local int rx1100_off
    .local int rx1100_eos
    .local int rx1100_rep
    .local pmc rx1100_cur
    .local pmc rx1100_curclass
    .local pmc rx1100_bstack
    .local pmc rx1100_cstack
    (rx1100_cur, rx1100_tgt, rx1100_pos, rx1100_curclass, rx1100_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1100_cur
    length rx1100_eos, rx1100_tgt
    eq $I19, 1, rx1100_restart3041
    gt rx1100_pos, rx1100_eos, rx1100_fail3042
    repr_get_attr_int $I11, self, rx1100_curclass, "$!from"
    ne $I11, -1, rxscan1101_done3048
    goto rxscan1101_scan3047
  rxscan1101_loop3046:
    inc rx1100_pos
    gt rx1100_pos, rx1100_eos, rx1100_fail3042
    repr_bind_attr_int rx1100_cur, rx1100_curclass, "$!from", rx1100_pos
  rxscan1101_scan3047:
    nqp_rxmark rx1100_bstack, rxscan1101_loop3046, rx1100_pos, 0
  rxscan1101_done3048:
    nqp_rxmark rx1100_bstack, rxcap1102_fail3050, rx1100_pos, 0
    add $I11, rx1100_pos, 1
    gt $I11, rx1100_eos, rx1100_fail3042
    substr $S10, rx1100_tgt, rx1100_pos, 1
    ne $S10, ucs4:"<", rx1100_fail3042
    add rx1100_pos, 1
    nqp_rxpeek $I19, rx1100_bstack, rxcap1102_fail3050
    inc $I19
    set $I11, rx1100_bstack[$I19]
    $P11 = rx1100_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1100_pos)
    rx1100_cstack = rx1100_cur."!cursor_capture"($P11, "sym")
    goto rxcap1102_done3049
  rxcap1102_fail3050:
    goto rx1100_fail3042
  rxcap1102_done3049:
    repr_bind_attr_int rx1100_cur, rx1100_curclass, "$!pos", rx1100_pos
    $P11 = rx1100_cur."O"("%relational, :op<islt_n>")
    repr_get_attr_int $I11, $P11, rx1100_curclass, "$!pos"
    lt $I11, 0, rx1100_fail3042
    nqp_rxmark rx1100_bstack, rxsubrule1103_pass3051, -1, 0
  rxsubrule1103_pass3051:
    rx1100_cstack = rx1100_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1100_pos, $P11, rx1100_curclass, "$!pos"
    rx1100_cur."!cursor_pass"(rx1100_pos, "infix:sym<<>", 'backtrack'=>1)
    .return (rx1100_cur)
  rx1100_restart3041:
    repr_get_attr_obj rx1100_cstack, rx1100_cur, rx1100_curclass, "$!cstack"
  rx1100_fail3042:
    unless rx1100_bstack, rx1100_done3040
    pop $I19, rx1100_bstack
    if_null rx1100_cstack, rx1100_cstack_done3045
    unless rx1100_cstack, rx1100_cstack_done3045
    dec $I19
    set $P11, rx1100_cstack[$I19]
  rx1100_cstack_done3045:
    pop rx1100_rep, rx1100_bstack
    pop rx1100_pos, rx1100_bstack
    pop $I19, rx1100_bstack
    lt rx1100_pos, -1, rx1100_done3040
    lt rx1100_pos, 0, rx1100_fail3042
    eq $I19, 0, rx1100_fail3042
    nqp_islist $I20, rx1100_cstack
    unless $I20, rx1100_jump3043
    elements $I18, rx1100_bstack
    le $I18, 0, rx1100_cut3044
    dec $I18
    set $I18, rx1100_bstack[$I18]
  rx1100_cut3044:
    assign rx1100_cstack, $I18
  rx1100_jump3043:
    jump $I19
  rx1100_done3040:
    rx1100_cur."!cursor_fail"()
    .return (rx1100_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_199_1346968539.359_caps" :subid("cuid_memo_333_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_199_1346968539.359_nfa" :subid("cuid_memo_334_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 60
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<>>" :subid("cuid_200_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1292
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1104_tgt
    .local int rx1104_pos
    .local int rx1104_off
    .local int rx1104_eos
    .local int rx1104_rep
    .local pmc rx1104_cur
    .local pmc rx1104_curclass
    .local pmc rx1104_bstack
    .local pmc rx1104_cstack
    (rx1104_cur, rx1104_tgt, rx1104_pos, rx1104_curclass, rx1104_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1104_cur
    length rx1104_eos, rx1104_tgt
    eq $I19, 1, rx1104_restart3054
    gt rx1104_pos, rx1104_eos, rx1104_fail3055
    repr_get_attr_int $I11, self, rx1104_curclass, "$!from"
    ne $I11, -1, rxscan1105_done3061
    goto rxscan1105_scan3060
  rxscan1105_loop3059:
    inc rx1104_pos
    gt rx1104_pos, rx1104_eos, rx1104_fail3055
    repr_bind_attr_int rx1104_cur, rx1104_curclass, "$!from", rx1104_pos
  rxscan1105_scan3060:
    nqp_rxmark rx1104_bstack, rxscan1105_loop3059, rx1104_pos, 0
  rxscan1105_done3061:
    nqp_rxmark rx1104_bstack, rxcap1106_fail3063, rx1104_pos, 0
    add $I11, rx1104_pos, 1
    gt $I11, rx1104_eos, rx1104_fail3055
    substr $S10, rx1104_tgt, rx1104_pos, 1
    ne $S10, ucs4:">", rx1104_fail3055
    add rx1104_pos, 1
    nqp_rxpeek $I19, rx1104_bstack, rxcap1106_fail3063
    inc $I19
    set $I11, rx1104_bstack[$I19]
    $P11 = rx1104_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1104_pos)
    rx1104_cstack = rx1104_cur."!cursor_capture"($P11, "sym")
    goto rxcap1106_done3062
  rxcap1106_fail3063:
    goto rx1104_fail3055
  rxcap1106_done3062:
    repr_bind_attr_int rx1104_cur, rx1104_curclass, "$!pos", rx1104_pos
    $P11 = rx1104_cur."O"("%relational, :op<isgt_n>")
    repr_get_attr_int $I11, $P11, rx1104_curclass, "$!pos"
    lt $I11, 0, rx1104_fail3055
    nqp_rxmark rx1104_bstack, rxsubrule1107_pass3064, -1, 0
  rxsubrule1107_pass3064:
    rx1104_cstack = rx1104_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1104_pos, $P11, rx1104_curclass, "$!pos"
    rx1104_cur."!cursor_pass"(rx1104_pos, "infix:sym<>>", 'backtrack'=>1)
    .return (rx1104_cur)
  rx1104_restart3054:
    repr_get_attr_obj rx1104_cstack, rx1104_cur, rx1104_curclass, "$!cstack"
  rx1104_fail3055:
    unless rx1104_bstack, rx1104_done3053
    pop $I19, rx1104_bstack
    if_null rx1104_cstack, rx1104_cstack_done3058
    unless rx1104_cstack, rx1104_cstack_done3058
    dec $I19
    set $P11, rx1104_cstack[$I19]
  rx1104_cstack_done3058:
    pop rx1104_rep, rx1104_bstack
    pop rx1104_pos, rx1104_bstack
    pop $I19, rx1104_bstack
    lt rx1104_pos, -1, rx1104_done3053
    lt rx1104_pos, 0, rx1104_fail3055
    eq $I19, 0, rx1104_fail3055
    nqp_islist $I20, rx1104_cstack
    unless $I20, rx1104_jump3056
    elements $I18, rx1104_bstack
    le $I18, 0, rx1104_cut3057
    dec $I18
    set $I18, rx1104_bstack[$I18]
  rx1104_cut3057:
    assign rx1104_cstack, $I18
  rx1104_jump3056:
    jump $I19
  rx1104_done3053:
    rx1104_cur."!cursor_fail"()
    .return (rx1104_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_200_1346968539.359_caps" :subid("cuid_memo_335_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_200_1346968539.359_nfa" :subid("cuid_memo_336_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 62
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<eq>" :subid("cuid_201_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1293
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1108_tgt
    .local int rx1108_pos
    .local int rx1108_off
    .local int rx1108_eos
    .local int rx1108_rep
    .local pmc rx1108_cur
    .local pmc rx1108_curclass
    .local pmc rx1108_bstack
    .local pmc rx1108_cstack
    (rx1108_cur, rx1108_tgt, rx1108_pos, rx1108_curclass, rx1108_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1108_cur
    length rx1108_eos, rx1108_tgt
    eq $I19, 1, rx1108_restart3067
    gt rx1108_pos, rx1108_eos, rx1108_fail3068
    repr_get_attr_int $I11, self, rx1108_curclass, "$!from"
    ne $I11, -1, rxscan1109_done3074
    goto rxscan1109_scan3073
  rxscan1109_loop3072:
    inc rx1108_pos
    gt rx1108_pos, rx1108_eos, rx1108_fail3068
    repr_bind_attr_int rx1108_cur, rx1108_curclass, "$!from", rx1108_pos
  rxscan1109_scan3073:
    nqp_rxmark rx1108_bstack, rxscan1109_loop3072, rx1108_pos, 0
  rxscan1109_done3074:
    nqp_rxmark rx1108_bstack, rxcap1110_fail3076, rx1108_pos, 0
    add $I11, rx1108_pos, 2
    gt $I11, rx1108_eos, rx1108_fail3068
    substr $S10, rx1108_tgt, rx1108_pos, 2
    ne $S10, ucs4:"eq", rx1108_fail3068
    add rx1108_pos, 2
    nqp_rxpeek $I19, rx1108_bstack, rxcap1110_fail3076
    inc $I19
    set $I11, rx1108_bstack[$I19]
    $P11 = rx1108_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1108_pos)
    rx1108_cstack = rx1108_cur."!cursor_capture"($P11, "sym")
    goto rxcap1110_done3075
  rxcap1110_fail3076:
    goto rx1108_fail3068
  rxcap1110_done3075:
    repr_bind_attr_int rx1108_cur, rx1108_curclass, "$!pos", rx1108_pos
    $P11 = rx1108_cur."O"("%relational, :op<iseq_s>")
    repr_get_attr_int $I11, $P11, rx1108_curclass, "$!pos"
    lt $I11, 0, rx1108_fail3068
    nqp_rxmark rx1108_bstack, rxsubrule1111_pass3077, -1, 0
  rxsubrule1111_pass3077:
    rx1108_cstack = rx1108_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1108_pos, $P11, rx1108_curclass, "$!pos"
    rx1108_cur."!cursor_pass"(rx1108_pos, "infix:sym<eq>", 'backtrack'=>1)
    .return (rx1108_cur)
  rx1108_restart3067:
    repr_get_attr_obj rx1108_cstack, rx1108_cur, rx1108_curclass, "$!cstack"
  rx1108_fail3068:
    unless rx1108_bstack, rx1108_done3066
    pop $I19, rx1108_bstack
    if_null rx1108_cstack, rx1108_cstack_done3071
    unless rx1108_cstack, rx1108_cstack_done3071
    dec $I19
    set $P11, rx1108_cstack[$I19]
  rx1108_cstack_done3071:
    pop rx1108_rep, rx1108_bstack
    pop rx1108_pos, rx1108_bstack
    pop $I19, rx1108_bstack
    lt rx1108_pos, -1, rx1108_done3066
    lt rx1108_pos, 0, rx1108_fail3068
    eq $I19, 0, rx1108_fail3068
    nqp_islist $I20, rx1108_cstack
    unless $I20, rx1108_jump3069
    elements $I18, rx1108_bstack
    le $I18, 0, rx1108_cut3070
    dec $I18
    set $I18, rx1108_bstack[$I18]
  rx1108_cut3070:
    assign rx1108_cstack, $I18
  rx1108_jump3069:
    jump $I19
  rx1108_done3066:
    rx1108_cur."!cursor_fail"()
    .return (rx1108_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_201_1346968539.359_caps" :subid("cuid_memo_337_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_201_1346968539.359_nfa" :subid("cuid_memo_338_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 101
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 113
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<ne>" :subid("cuid_202_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1294
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1112_tgt
    .local int rx1112_pos
    .local int rx1112_off
    .local int rx1112_eos
    .local int rx1112_rep
    .local pmc rx1112_cur
    .local pmc rx1112_curclass
    .local pmc rx1112_bstack
    .local pmc rx1112_cstack
    (rx1112_cur, rx1112_tgt, rx1112_pos, rx1112_curclass, rx1112_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1112_cur
    length rx1112_eos, rx1112_tgt
    eq $I19, 1, rx1112_restart3080
    gt rx1112_pos, rx1112_eos, rx1112_fail3081
    repr_get_attr_int $I11, self, rx1112_curclass, "$!from"
    ne $I11, -1, rxscan1113_done3087
    goto rxscan1113_scan3086
  rxscan1113_loop3085:
    inc rx1112_pos
    gt rx1112_pos, rx1112_eos, rx1112_fail3081
    repr_bind_attr_int rx1112_cur, rx1112_curclass, "$!from", rx1112_pos
  rxscan1113_scan3086:
    nqp_rxmark rx1112_bstack, rxscan1113_loop3085, rx1112_pos, 0
  rxscan1113_done3087:
    nqp_rxmark rx1112_bstack, rxcap1114_fail3089, rx1112_pos, 0
    add $I11, rx1112_pos, 2
    gt $I11, rx1112_eos, rx1112_fail3081
    substr $S10, rx1112_tgt, rx1112_pos, 2
    ne $S10, ucs4:"ne", rx1112_fail3081
    add rx1112_pos, 2
    nqp_rxpeek $I19, rx1112_bstack, rxcap1114_fail3089
    inc $I19
    set $I11, rx1112_bstack[$I19]
    $P11 = rx1112_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1112_pos)
    rx1112_cstack = rx1112_cur."!cursor_capture"($P11, "sym")
    goto rxcap1114_done3088
  rxcap1114_fail3089:
    goto rx1112_fail3081
  rxcap1114_done3088:
    repr_bind_attr_int rx1112_cur, rx1112_curclass, "$!pos", rx1112_pos
    $P11 = rx1112_cur."O"("%relational, :op<isne_s>")
    repr_get_attr_int $I11, $P11, rx1112_curclass, "$!pos"
    lt $I11, 0, rx1112_fail3081
    nqp_rxmark rx1112_bstack, rxsubrule1115_pass3090, -1, 0
  rxsubrule1115_pass3090:
    rx1112_cstack = rx1112_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1112_pos, $P11, rx1112_curclass, "$!pos"
    rx1112_cur."!cursor_pass"(rx1112_pos, "infix:sym<ne>", 'backtrack'=>1)
    .return (rx1112_cur)
  rx1112_restart3080:
    repr_get_attr_obj rx1112_cstack, rx1112_cur, rx1112_curclass, "$!cstack"
  rx1112_fail3081:
    unless rx1112_bstack, rx1112_done3079
    pop $I19, rx1112_bstack
    if_null rx1112_cstack, rx1112_cstack_done3084
    unless rx1112_cstack, rx1112_cstack_done3084
    dec $I19
    set $P11, rx1112_cstack[$I19]
  rx1112_cstack_done3084:
    pop rx1112_rep, rx1112_bstack
    pop rx1112_pos, rx1112_bstack
    pop $I19, rx1112_bstack
    lt rx1112_pos, -1, rx1112_done3079
    lt rx1112_pos, 0, rx1112_fail3081
    eq $I19, 0, rx1112_fail3081
    nqp_islist $I20, rx1112_cstack
    unless $I20, rx1112_jump3082
    elements $I18, rx1112_bstack
    le $I18, 0, rx1112_cut3083
    dec $I18
    set $I18, rx1112_bstack[$I18]
  rx1112_cut3083:
    assign rx1112_cstack, $I18
  rx1112_jump3082:
    jump $I19
  rx1112_done3079:
    rx1112_cur."!cursor_fail"()
    .return (rx1112_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_202_1346968539.359_caps" :subid("cuid_memo_339_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_202_1346968539.359_nfa" :subid("cuid_memo_340_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 110
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 101
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<le>" :subid("cuid_203_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1295
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1116_tgt
    .local int rx1116_pos
    .local int rx1116_off
    .local int rx1116_eos
    .local int rx1116_rep
    .local pmc rx1116_cur
    .local pmc rx1116_curclass
    .local pmc rx1116_bstack
    .local pmc rx1116_cstack
    (rx1116_cur, rx1116_tgt, rx1116_pos, rx1116_curclass, rx1116_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1116_cur
    length rx1116_eos, rx1116_tgt
    eq $I19, 1, rx1116_restart3093
    gt rx1116_pos, rx1116_eos, rx1116_fail3094
    repr_get_attr_int $I11, self, rx1116_curclass, "$!from"
    ne $I11, -1, rxscan1117_done3100
    goto rxscan1117_scan3099
  rxscan1117_loop3098:
    inc rx1116_pos
    gt rx1116_pos, rx1116_eos, rx1116_fail3094
    repr_bind_attr_int rx1116_cur, rx1116_curclass, "$!from", rx1116_pos
  rxscan1117_scan3099:
    nqp_rxmark rx1116_bstack, rxscan1117_loop3098, rx1116_pos, 0
  rxscan1117_done3100:
    nqp_rxmark rx1116_bstack, rxcap1118_fail3102, rx1116_pos, 0
    add $I11, rx1116_pos, 2
    gt $I11, rx1116_eos, rx1116_fail3094
    substr $S10, rx1116_tgt, rx1116_pos, 2
    ne $S10, ucs4:"le", rx1116_fail3094
    add rx1116_pos, 2
    nqp_rxpeek $I19, rx1116_bstack, rxcap1118_fail3102
    inc $I19
    set $I11, rx1116_bstack[$I19]
    $P11 = rx1116_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1116_pos)
    rx1116_cstack = rx1116_cur."!cursor_capture"($P11, "sym")
    goto rxcap1118_done3101
  rxcap1118_fail3102:
    goto rx1116_fail3094
  rxcap1118_done3101:
    repr_bind_attr_int rx1116_cur, rx1116_curclass, "$!pos", rx1116_pos
    $P11 = rx1116_cur."O"("%relational, :op<isle_s>")
    repr_get_attr_int $I11, $P11, rx1116_curclass, "$!pos"
    lt $I11, 0, rx1116_fail3094
    nqp_rxmark rx1116_bstack, rxsubrule1119_pass3103, -1, 0
  rxsubrule1119_pass3103:
    rx1116_cstack = rx1116_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1116_pos, $P11, rx1116_curclass, "$!pos"
    rx1116_cur."!cursor_pass"(rx1116_pos, "infix:sym<le>", 'backtrack'=>1)
    .return (rx1116_cur)
  rx1116_restart3093:
    repr_get_attr_obj rx1116_cstack, rx1116_cur, rx1116_curclass, "$!cstack"
  rx1116_fail3094:
    unless rx1116_bstack, rx1116_done3092
    pop $I19, rx1116_bstack
    if_null rx1116_cstack, rx1116_cstack_done3097
    unless rx1116_cstack, rx1116_cstack_done3097
    dec $I19
    set $P11, rx1116_cstack[$I19]
  rx1116_cstack_done3097:
    pop rx1116_rep, rx1116_bstack
    pop rx1116_pos, rx1116_bstack
    pop $I19, rx1116_bstack
    lt rx1116_pos, -1, rx1116_done3092
    lt rx1116_pos, 0, rx1116_fail3094
    eq $I19, 0, rx1116_fail3094
    nqp_islist $I20, rx1116_cstack
    unless $I20, rx1116_jump3095
    elements $I18, rx1116_bstack
    le $I18, 0, rx1116_cut3096
    dec $I18
    set $I18, rx1116_bstack[$I18]
  rx1116_cut3096:
    assign rx1116_cstack, $I18
  rx1116_jump3095:
    jump $I19
  rx1116_done3092:
    rx1116_cur."!cursor_fail"()
    .return (rx1116_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_203_1346968539.359_caps" :subid("cuid_memo_341_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_203_1346968539.359_nfa" :subid("cuid_memo_342_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 108
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 101
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<ge>" :subid("cuid_204_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1296
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1120_tgt
    .local int rx1120_pos
    .local int rx1120_off
    .local int rx1120_eos
    .local int rx1120_rep
    .local pmc rx1120_cur
    .local pmc rx1120_curclass
    .local pmc rx1120_bstack
    .local pmc rx1120_cstack
    (rx1120_cur, rx1120_tgt, rx1120_pos, rx1120_curclass, rx1120_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1120_cur
    length rx1120_eos, rx1120_tgt
    eq $I19, 1, rx1120_restart3106
    gt rx1120_pos, rx1120_eos, rx1120_fail3107
    repr_get_attr_int $I11, self, rx1120_curclass, "$!from"
    ne $I11, -1, rxscan1121_done3113
    goto rxscan1121_scan3112
  rxscan1121_loop3111:
    inc rx1120_pos
    gt rx1120_pos, rx1120_eos, rx1120_fail3107
    repr_bind_attr_int rx1120_cur, rx1120_curclass, "$!from", rx1120_pos
  rxscan1121_scan3112:
    nqp_rxmark rx1120_bstack, rxscan1121_loop3111, rx1120_pos, 0
  rxscan1121_done3113:
    nqp_rxmark rx1120_bstack, rxcap1122_fail3115, rx1120_pos, 0
    add $I11, rx1120_pos, 2
    gt $I11, rx1120_eos, rx1120_fail3107
    substr $S10, rx1120_tgt, rx1120_pos, 2
    ne $S10, ucs4:"ge", rx1120_fail3107
    add rx1120_pos, 2
    nqp_rxpeek $I19, rx1120_bstack, rxcap1122_fail3115
    inc $I19
    set $I11, rx1120_bstack[$I19]
    $P11 = rx1120_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1120_pos)
    rx1120_cstack = rx1120_cur."!cursor_capture"($P11, "sym")
    goto rxcap1122_done3114
  rxcap1122_fail3115:
    goto rx1120_fail3107
  rxcap1122_done3114:
    repr_bind_attr_int rx1120_cur, rx1120_curclass, "$!pos", rx1120_pos
    $P11 = rx1120_cur."O"("%relational, :op<isge_s>")
    repr_get_attr_int $I11, $P11, rx1120_curclass, "$!pos"
    lt $I11, 0, rx1120_fail3107
    nqp_rxmark rx1120_bstack, rxsubrule1123_pass3116, -1, 0
  rxsubrule1123_pass3116:
    rx1120_cstack = rx1120_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1120_pos, $P11, rx1120_curclass, "$!pos"
    rx1120_cur."!cursor_pass"(rx1120_pos, "infix:sym<ge>", 'backtrack'=>1)
    .return (rx1120_cur)
  rx1120_restart3106:
    repr_get_attr_obj rx1120_cstack, rx1120_cur, rx1120_curclass, "$!cstack"
  rx1120_fail3107:
    unless rx1120_bstack, rx1120_done3105
    pop $I19, rx1120_bstack
    if_null rx1120_cstack, rx1120_cstack_done3110
    unless rx1120_cstack, rx1120_cstack_done3110
    dec $I19
    set $P11, rx1120_cstack[$I19]
  rx1120_cstack_done3110:
    pop rx1120_rep, rx1120_bstack
    pop rx1120_pos, rx1120_bstack
    pop $I19, rx1120_bstack
    lt rx1120_pos, -1, rx1120_done3105
    lt rx1120_pos, 0, rx1120_fail3107
    eq $I19, 0, rx1120_fail3107
    nqp_islist $I20, rx1120_cstack
    unless $I20, rx1120_jump3108
    elements $I18, rx1120_bstack
    le $I18, 0, rx1120_cut3109
    dec $I18
    set $I18, rx1120_bstack[$I18]
  rx1120_cut3109:
    assign rx1120_cstack, $I18
  rx1120_jump3108:
    jump $I19
  rx1120_done3105:
    rx1120_cur."!cursor_fail"()
    .return (rx1120_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_204_1346968539.359_caps" :subid("cuid_memo_343_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_204_1346968539.359_nfa" :subid("cuid_memo_344_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 103
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 101
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<lt>" :subid("cuid_205_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1297
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1124_tgt
    .local int rx1124_pos
    .local int rx1124_off
    .local int rx1124_eos
    .local int rx1124_rep
    .local pmc rx1124_cur
    .local pmc rx1124_curclass
    .local pmc rx1124_bstack
    .local pmc rx1124_cstack
    (rx1124_cur, rx1124_tgt, rx1124_pos, rx1124_curclass, rx1124_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1124_cur
    length rx1124_eos, rx1124_tgt
    eq $I19, 1, rx1124_restart3119
    gt rx1124_pos, rx1124_eos, rx1124_fail3120
    repr_get_attr_int $I11, self, rx1124_curclass, "$!from"
    ne $I11, -1, rxscan1125_done3126
    goto rxscan1125_scan3125
  rxscan1125_loop3124:
    inc rx1124_pos
    gt rx1124_pos, rx1124_eos, rx1124_fail3120
    repr_bind_attr_int rx1124_cur, rx1124_curclass, "$!from", rx1124_pos
  rxscan1125_scan3125:
    nqp_rxmark rx1124_bstack, rxscan1125_loop3124, rx1124_pos, 0
  rxscan1125_done3126:
    nqp_rxmark rx1124_bstack, rxcap1126_fail3128, rx1124_pos, 0
    add $I11, rx1124_pos, 2
    gt $I11, rx1124_eos, rx1124_fail3120
    substr $S10, rx1124_tgt, rx1124_pos, 2
    ne $S10, ucs4:"lt", rx1124_fail3120
    add rx1124_pos, 2
    nqp_rxpeek $I19, rx1124_bstack, rxcap1126_fail3128
    inc $I19
    set $I11, rx1124_bstack[$I19]
    $P11 = rx1124_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1124_pos)
    rx1124_cstack = rx1124_cur."!cursor_capture"($P11, "sym")
    goto rxcap1126_done3127
  rxcap1126_fail3128:
    goto rx1124_fail3120
  rxcap1126_done3127:
    repr_bind_attr_int rx1124_cur, rx1124_curclass, "$!pos", rx1124_pos
    $P11 = rx1124_cur."O"("%relational, :op<islt_s>")
    repr_get_attr_int $I11, $P11, rx1124_curclass, "$!pos"
    lt $I11, 0, rx1124_fail3120
    nqp_rxmark rx1124_bstack, rxsubrule1127_pass3129, -1, 0
  rxsubrule1127_pass3129:
    rx1124_cstack = rx1124_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1124_pos, $P11, rx1124_curclass, "$!pos"
    rx1124_cur."!cursor_pass"(rx1124_pos, "infix:sym<lt>", 'backtrack'=>1)
    .return (rx1124_cur)
  rx1124_restart3119:
    repr_get_attr_obj rx1124_cstack, rx1124_cur, rx1124_curclass, "$!cstack"
  rx1124_fail3120:
    unless rx1124_bstack, rx1124_done3118
    pop $I19, rx1124_bstack
    if_null rx1124_cstack, rx1124_cstack_done3123
    unless rx1124_cstack, rx1124_cstack_done3123
    dec $I19
    set $P11, rx1124_cstack[$I19]
  rx1124_cstack_done3123:
    pop rx1124_rep, rx1124_bstack
    pop rx1124_pos, rx1124_bstack
    pop $I19, rx1124_bstack
    lt rx1124_pos, -1, rx1124_done3118
    lt rx1124_pos, 0, rx1124_fail3120
    eq $I19, 0, rx1124_fail3120
    nqp_islist $I20, rx1124_cstack
    unless $I20, rx1124_jump3121
    elements $I18, rx1124_bstack
    le $I18, 0, rx1124_cut3122
    dec $I18
    set $I18, rx1124_bstack[$I18]
  rx1124_cut3122:
    assign rx1124_cstack, $I18
  rx1124_jump3121:
    jump $I19
  rx1124_done3118:
    rx1124_cur."!cursor_fail"()
    .return (rx1124_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_205_1346968539.359_caps" :subid("cuid_memo_345_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_205_1346968539.359_nfa" :subid("cuid_memo_346_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 108
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 116
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<gt>" :subid("cuid_206_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1298
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1128_tgt
    .local int rx1128_pos
    .local int rx1128_off
    .local int rx1128_eos
    .local int rx1128_rep
    .local pmc rx1128_cur
    .local pmc rx1128_curclass
    .local pmc rx1128_bstack
    .local pmc rx1128_cstack
    (rx1128_cur, rx1128_tgt, rx1128_pos, rx1128_curclass, rx1128_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1128_cur
    length rx1128_eos, rx1128_tgt
    eq $I19, 1, rx1128_restart3132
    gt rx1128_pos, rx1128_eos, rx1128_fail3133
    repr_get_attr_int $I11, self, rx1128_curclass, "$!from"
    ne $I11, -1, rxscan1129_done3139
    goto rxscan1129_scan3138
  rxscan1129_loop3137:
    inc rx1128_pos
    gt rx1128_pos, rx1128_eos, rx1128_fail3133
    repr_bind_attr_int rx1128_cur, rx1128_curclass, "$!from", rx1128_pos
  rxscan1129_scan3138:
    nqp_rxmark rx1128_bstack, rxscan1129_loop3137, rx1128_pos, 0
  rxscan1129_done3139:
    nqp_rxmark rx1128_bstack, rxcap1130_fail3141, rx1128_pos, 0
    add $I11, rx1128_pos, 2
    gt $I11, rx1128_eos, rx1128_fail3133
    substr $S10, rx1128_tgt, rx1128_pos, 2
    ne $S10, ucs4:"gt", rx1128_fail3133
    add rx1128_pos, 2
    nqp_rxpeek $I19, rx1128_bstack, rxcap1130_fail3141
    inc $I19
    set $I11, rx1128_bstack[$I19]
    $P11 = rx1128_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1128_pos)
    rx1128_cstack = rx1128_cur."!cursor_capture"($P11, "sym")
    goto rxcap1130_done3140
  rxcap1130_fail3141:
    goto rx1128_fail3133
  rxcap1130_done3140:
    repr_bind_attr_int rx1128_cur, rx1128_curclass, "$!pos", rx1128_pos
    $P11 = rx1128_cur."O"("%relational, :op<isgt_s>")
    repr_get_attr_int $I11, $P11, rx1128_curclass, "$!pos"
    lt $I11, 0, rx1128_fail3133
    nqp_rxmark rx1128_bstack, rxsubrule1131_pass3142, -1, 0
  rxsubrule1131_pass3142:
    rx1128_cstack = rx1128_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1128_pos, $P11, rx1128_curclass, "$!pos"
    rx1128_cur."!cursor_pass"(rx1128_pos, "infix:sym<gt>", 'backtrack'=>1)
    .return (rx1128_cur)
  rx1128_restart3132:
    repr_get_attr_obj rx1128_cstack, rx1128_cur, rx1128_curclass, "$!cstack"
  rx1128_fail3133:
    unless rx1128_bstack, rx1128_done3131
    pop $I19, rx1128_bstack
    if_null rx1128_cstack, rx1128_cstack_done3136
    unless rx1128_cstack, rx1128_cstack_done3136
    dec $I19
    set $P11, rx1128_cstack[$I19]
  rx1128_cstack_done3136:
    pop rx1128_rep, rx1128_bstack
    pop rx1128_pos, rx1128_bstack
    pop $I19, rx1128_bstack
    lt rx1128_pos, -1, rx1128_done3131
    lt rx1128_pos, 0, rx1128_fail3133
    eq $I19, 0, rx1128_fail3133
    nqp_islist $I20, rx1128_cstack
    unless $I20, rx1128_jump3134
    elements $I18, rx1128_bstack
    le $I18, 0, rx1128_cut3135
    dec $I18
    set $I18, rx1128_bstack[$I18]
  rx1128_cut3135:
    assign rx1128_cstack, $I18
  rx1128_jump3134:
    jump $I19
  rx1128_done3131:
    rx1128_cur."!cursor_fail"()
    .return (rx1128_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_206_1346968539.359_caps" :subid("cuid_memo_347_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_206_1346968539.359_nfa" :subid("cuid_memo_348_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 103
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 116
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<=:=>" :subid("cuid_207_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1299
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1132_tgt
    .local int rx1132_pos
    .local int rx1132_off
    .local int rx1132_eos
    .local int rx1132_rep
    .local pmc rx1132_cur
    .local pmc rx1132_curclass
    .local pmc rx1132_bstack
    .local pmc rx1132_cstack
    (rx1132_cur, rx1132_tgt, rx1132_pos, rx1132_curclass, rx1132_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1132_cur
    length rx1132_eos, rx1132_tgt
    eq $I19, 1, rx1132_restart3145
    gt rx1132_pos, rx1132_eos, rx1132_fail3146
    repr_get_attr_int $I11, self, rx1132_curclass, "$!from"
    ne $I11, -1, rxscan1133_done3152
    goto rxscan1133_scan3151
  rxscan1133_loop3150:
    inc rx1132_pos
    gt rx1132_pos, rx1132_eos, rx1132_fail3146
    repr_bind_attr_int rx1132_cur, rx1132_curclass, "$!from", rx1132_pos
  rxscan1133_scan3151:
    nqp_rxmark rx1132_bstack, rxscan1133_loop3150, rx1132_pos, 0
  rxscan1133_done3152:
    nqp_rxmark rx1132_bstack, rxcap1134_fail3154, rx1132_pos, 0
    add $I11, rx1132_pos, 3
    gt $I11, rx1132_eos, rx1132_fail3146
    substr $S10, rx1132_tgt, rx1132_pos, 3
    ne $S10, ucs4:"=:=", rx1132_fail3146
    add rx1132_pos, 3
    nqp_rxpeek $I19, rx1132_bstack, rxcap1134_fail3154
    inc $I19
    set $I11, rx1132_bstack[$I19]
    $P11 = rx1132_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1132_pos)
    rx1132_cstack = rx1132_cur."!cursor_capture"($P11, "sym")
    goto rxcap1134_done3153
  rxcap1134_fail3154:
    goto rx1132_fail3146
  rxcap1134_done3153:
    repr_bind_attr_int rx1132_cur, rx1132_curclass, "$!pos", rx1132_pos
    $P11 = rx1132_cur."O"("%relational, :op<eqaddr>")
    repr_get_attr_int $I11, $P11, rx1132_curclass, "$!pos"
    lt $I11, 0, rx1132_fail3146
    nqp_rxmark rx1132_bstack, rxsubrule1135_pass3155, -1, 0
  rxsubrule1135_pass3155:
    rx1132_cstack = rx1132_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1132_pos, $P11, rx1132_curclass, "$!pos"
    rx1132_cur."!cursor_pass"(rx1132_pos, "infix:sym<=:=>", 'backtrack'=>1)
    .return (rx1132_cur)
  rx1132_restart3145:
    repr_get_attr_obj rx1132_cstack, rx1132_cur, rx1132_curclass, "$!cstack"
  rx1132_fail3146:
    unless rx1132_bstack, rx1132_done3144
    pop $I19, rx1132_bstack
    if_null rx1132_cstack, rx1132_cstack_done3149
    unless rx1132_cstack, rx1132_cstack_done3149
    dec $I19
    set $P11, rx1132_cstack[$I19]
  rx1132_cstack_done3149:
    pop rx1132_rep, rx1132_bstack
    pop rx1132_pos, rx1132_bstack
    pop $I19, rx1132_bstack
    lt rx1132_pos, -1, rx1132_done3144
    lt rx1132_pos, 0, rx1132_fail3146
    eq $I19, 0, rx1132_fail3146
    nqp_islist $I20, rx1132_cstack
    unless $I20, rx1132_jump3147
    elements $I18, rx1132_bstack
    le $I18, 0, rx1132_cut3148
    dec $I18
    set $I18, rx1132_bstack[$I18]
  rx1132_cut3148:
    assign rx1132_cstack, $I18
  rx1132_jump3147:
    jump $I19
  rx1132_done3144:
    rx1132_cur."!cursor_fail"()
    .return (rx1132_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_207_1346968539.359_caps" :subid("cuid_memo_349_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_207_1346968539.359_nfa" :subid("cuid_memo_350_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 61
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 58
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 61
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "O"
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<~~>" :subid("cuid_208_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1300
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1136_tgt
    .local int rx1136_pos
    .local int rx1136_off
    .local int rx1136_eos
    .local int rx1136_rep
    .local pmc rx1136_cur
    .local pmc rx1136_curclass
    .local pmc rx1136_bstack
    .local pmc rx1136_cstack
    (rx1136_cur, rx1136_tgt, rx1136_pos, rx1136_curclass, rx1136_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1136_cur
    length rx1136_eos, rx1136_tgt
    eq $I19, 1, rx1136_restart3158
    gt rx1136_pos, rx1136_eos, rx1136_fail3159
    repr_get_attr_int $I11, self, rx1136_curclass, "$!from"
    ne $I11, -1, rxscan1137_done3165
    goto rxscan1137_scan3164
  rxscan1137_loop3163:
    inc rx1136_pos
    gt rx1136_pos, rx1136_eos, rx1136_fail3159
    repr_bind_attr_int rx1136_cur, rx1136_curclass, "$!from", rx1136_pos
  rxscan1137_scan3164:
    nqp_rxmark rx1136_bstack, rxscan1137_loop3163, rx1136_pos, 0
  rxscan1137_done3165:
    nqp_rxmark rx1136_bstack, rxcap1138_fail3167, rx1136_pos, 0
    add $I11, rx1136_pos, 2
    gt $I11, rx1136_eos, rx1136_fail3159
    substr $S10, rx1136_tgt, rx1136_pos, 2
    ne $S10, ucs4:"~~", rx1136_fail3159
    add rx1136_pos, 2
    nqp_rxpeek $I19, rx1136_bstack, rxcap1138_fail3167
    inc $I19
    set $I11, rx1136_bstack[$I19]
    $P11 = rx1136_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1136_pos)
    rx1136_cstack = rx1136_cur."!cursor_capture"($P11, "sym")
    goto rxcap1138_done3166
  rxcap1138_fail3167:
    goto rx1136_fail3159
  rxcap1138_done3166:
    repr_bind_attr_int rx1136_cur, rx1136_curclass, "$!pos", rx1136_pos
    $P11 = rx1136_cur."O"("%relational, :reducecheck<smartmatch>")
    repr_get_attr_int $I11, $P11, rx1136_curclass, "$!pos"
    lt $I11, 0, rx1136_fail3159
    nqp_rxmark rx1136_bstack, rxsubrule1139_pass3168, -1, 0
  rxsubrule1139_pass3168:
    rx1136_cstack = rx1136_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1136_pos, $P11, rx1136_curclass, "$!pos"
    rx1136_cur."!cursor_pass"(rx1136_pos, "infix:sym<~~>", 'backtrack'=>1)
    .return (rx1136_cur)
  rx1136_restart3158:
    repr_get_attr_obj rx1136_cstack, rx1136_cur, rx1136_curclass, "$!cstack"
  rx1136_fail3159:
    unless rx1136_bstack, rx1136_done3157
    pop $I19, rx1136_bstack
    if_null rx1136_cstack, rx1136_cstack_done3162
    unless rx1136_cstack, rx1136_cstack_done3162
    dec $I19
    set $P11, rx1136_cstack[$I19]
  rx1136_cstack_done3162:
    pop rx1136_rep, rx1136_bstack
    pop rx1136_pos, rx1136_bstack
    pop $I19, rx1136_bstack
    lt rx1136_pos, -1, rx1136_done3157
    lt rx1136_pos, 0, rx1136_fail3159
    eq $I19, 0, rx1136_fail3159
    nqp_islist $I20, rx1136_cstack
    unless $I20, rx1136_jump3160
    elements $I18, rx1136_bstack
    le $I18, 0, rx1136_cut3161
    dec $I18
    set $I18, rx1136_bstack[$I18]
  rx1136_cut3161:
    assign rx1136_cstack, $I18
  rx1136_jump3160:
    jump $I19
  rx1136_done3157:
    rx1136_cur."!cursor_fail"()
    .return (rx1136_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_208_1346968539.359_caps" :subid("cuid_memo_351_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_208_1346968539.359_nfa" :subid("cuid_memo_352_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 126
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 126
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<&&>" :subid("cuid_209_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1302
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1140_tgt
    .local int rx1140_pos
    .local int rx1140_off
    .local int rx1140_eos
    .local int rx1140_rep
    .local pmc rx1140_cur
    .local pmc rx1140_curclass
    .local pmc rx1140_bstack
    .local pmc rx1140_cstack
    (rx1140_cur, rx1140_tgt, rx1140_pos, rx1140_curclass, rx1140_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1140_cur
    length rx1140_eos, rx1140_tgt
    eq $I19, 1, rx1140_restart3171
    gt rx1140_pos, rx1140_eos, rx1140_fail3172
    repr_get_attr_int $I11, self, rx1140_curclass, "$!from"
    ne $I11, -1, rxscan1141_done3178
    goto rxscan1141_scan3177
  rxscan1141_loop3176:
    inc rx1140_pos
    gt rx1140_pos, rx1140_eos, rx1140_fail3172
    repr_bind_attr_int rx1140_cur, rx1140_curclass, "$!from", rx1140_pos
  rxscan1141_scan3177:
    nqp_rxmark rx1140_bstack, rxscan1141_loop3176, rx1140_pos, 0
  rxscan1141_done3178:
    nqp_rxmark rx1140_bstack, rxcap1142_fail3180, rx1140_pos, 0
    add $I11, rx1140_pos, 2
    gt $I11, rx1140_eos, rx1140_fail3172
    substr $S10, rx1140_tgt, rx1140_pos, 2
    ne $S10, ucs4:"&&", rx1140_fail3172
    add rx1140_pos, 2
    nqp_rxpeek $I19, rx1140_bstack, rxcap1142_fail3180
    inc $I19
    set $I11, rx1140_bstack[$I19]
    $P11 = rx1140_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1140_pos)
    rx1140_cstack = rx1140_cur."!cursor_capture"($P11, "sym")
    goto rxcap1142_done3179
  rxcap1142_fail3180:
    goto rx1140_fail3172
  rxcap1142_done3179:
    repr_bind_attr_int rx1140_cur, rx1140_curclass, "$!pos", rx1140_pos
    $P11 = rx1140_cur."O"("%tight_and, :op<if>")
    repr_get_attr_int $I11, $P11, rx1140_curclass, "$!pos"
    lt $I11, 0, rx1140_fail3172
    nqp_rxmark rx1140_bstack, rxsubrule1143_pass3181, -1, 0
  rxsubrule1143_pass3181:
    rx1140_cstack = rx1140_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1140_pos, $P11, rx1140_curclass, "$!pos"
    rx1140_cur."!cursor_pass"(rx1140_pos, "infix:sym<&&>", 'backtrack'=>1)
    .return (rx1140_cur)
  rx1140_restart3171:
    repr_get_attr_obj rx1140_cstack, rx1140_cur, rx1140_curclass, "$!cstack"
  rx1140_fail3172:
    unless rx1140_bstack, rx1140_done3170
    pop $I19, rx1140_bstack
    if_null rx1140_cstack, rx1140_cstack_done3175
    unless rx1140_cstack, rx1140_cstack_done3175
    dec $I19
    set $P11, rx1140_cstack[$I19]
  rx1140_cstack_done3175:
    pop rx1140_rep, rx1140_bstack
    pop rx1140_pos, rx1140_bstack
    pop $I19, rx1140_bstack
    lt rx1140_pos, -1, rx1140_done3170
    lt rx1140_pos, 0, rx1140_fail3172
    eq $I19, 0, rx1140_fail3172
    nqp_islist $I20, rx1140_cstack
    unless $I20, rx1140_jump3173
    elements $I18, rx1140_bstack
    le $I18, 0, rx1140_cut3174
    dec $I18
    set $I18, rx1140_bstack[$I18]
  rx1140_cut3174:
    assign rx1140_cstack, $I18
  rx1140_jump3173:
    jump $I19
  rx1140_done3170:
    rx1140_cur."!cursor_fail"()
    .return (rx1140_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_209_1346968539.359_caps" :subid("cuid_memo_353_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_209_1346968539.359_nfa" :subid("cuid_memo_354_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 38
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 38
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<||>" :subid("cuid_210_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1304
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1144_tgt
    .local int rx1144_pos
    .local int rx1144_off
    .local int rx1144_eos
    .local int rx1144_rep
    .local pmc rx1144_cur
    .local pmc rx1144_curclass
    .local pmc rx1144_bstack
    .local pmc rx1144_cstack
    (rx1144_cur, rx1144_tgt, rx1144_pos, rx1144_curclass, rx1144_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1144_cur
    length rx1144_eos, rx1144_tgt
    eq $I19, 1, rx1144_restart3184
    gt rx1144_pos, rx1144_eos, rx1144_fail3185
    repr_get_attr_int $I11, self, rx1144_curclass, "$!from"
    ne $I11, -1, rxscan1145_done3191
    goto rxscan1145_scan3190
  rxscan1145_loop3189:
    inc rx1144_pos
    gt rx1144_pos, rx1144_eos, rx1144_fail3185
    repr_bind_attr_int rx1144_cur, rx1144_curclass, "$!from", rx1144_pos
  rxscan1145_scan3190:
    nqp_rxmark rx1144_bstack, rxscan1145_loop3189, rx1144_pos, 0
  rxscan1145_done3191:
    nqp_rxmark rx1144_bstack, rxcap1146_fail3193, rx1144_pos, 0
    add $I11, rx1144_pos, 2
    gt $I11, rx1144_eos, rx1144_fail3185
    substr $S10, rx1144_tgt, rx1144_pos, 2
    ne $S10, ucs4:"||", rx1144_fail3185
    add rx1144_pos, 2
    nqp_rxpeek $I19, rx1144_bstack, rxcap1146_fail3193
    inc $I19
    set $I11, rx1144_bstack[$I19]
    $P11 = rx1144_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1144_pos)
    rx1144_cstack = rx1144_cur."!cursor_capture"($P11, "sym")
    goto rxcap1146_done3192
  rxcap1146_fail3193:
    goto rx1144_fail3185
  rxcap1146_done3192:
    repr_bind_attr_int rx1144_cur, rx1144_curclass, "$!pos", rx1144_pos
    $P11 = rx1144_cur."O"("%tight_or, :op<unless>")
    repr_get_attr_int $I11, $P11, rx1144_curclass, "$!pos"
    lt $I11, 0, rx1144_fail3185
    nqp_rxmark rx1144_bstack, rxsubrule1147_pass3194, -1, 0
  rxsubrule1147_pass3194:
    rx1144_cstack = rx1144_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1144_pos, $P11, rx1144_curclass, "$!pos"
    rx1144_cur."!cursor_pass"(rx1144_pos, "infix:sym<||>", 'backtrack'=>1)
    .return (rx1144_cur)
  rx1144_restart3184:
    repr_get_attr_obj rx1144_cstack, rx1144_cur, rx1144_curclass, "$!cstack"
  rx1144_fail3185:
    unless rx1144_bstack, rx1144_done3183
    pop $I19, rx1144_bstack
    if_null rx1144_cstack, rx1144_cstack_done3188
    unless rx1144_cstack, rx1144_cstack_done3188
    dec $I19
    set $P11, rx1144_cstack[$I19]
  rx1144_cstack_done3188:
    pop rx1144_rep, rx1144_bstack
    pop rx1144_pos, rx1144_bstack
    pop $I19, rx1144_bstack
    lt rx1144_pos, -1, rx1144_done3183
    lt rx1144_pos, 0, rx1144_fail3185
    eq $I19, 0, rx1144_fail3185
    nqp_islist $I20, rx1144_cstack
    unless $I20, rx1144_jump3186
    elements $I18, rx1144_bstack
    le $I18, 0, rx1144_cut3187
    dec $I18
    set $I18, rx1144_bstack[$I18]
  rx1144_cut3187:
    assign rx1144_cstack, $I18
  rx1144_jump3186:
    jump $I19
  rx1144_done3183:
    rx1144_cur."!cursor_fail"()
    .return (rx1144_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_210_1346968539.359_caps" :subid("cuid_memo_355_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_210_1346968539.359_nfa" :subid("cuid_memo_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 124
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 124
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<//>" :subid("cuid_211_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1305
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1148_tgt
    .local int rx1148_pos
    .local int rx1148_off
    .local int rx1148_eos
    .local int rx1148_rep
    .local pmc rx1148_cur
    .local pmc rx1148_curclass
    .local pmc rx1148_bstack
    .local pmc rx1148_cstack
    (rx1148_cur, rx1148_tgt, rx1148_pos, rx1148_curclass, rx1148_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1148_cur
    length rx1148_eos, rx1148_tgt
    eq $I19, 1, rx1148_restart3197
    gt rx1148_pos, rx1148_eos, rx1148_fail3198
    repr_get_attr_int $I11, self, rx1148_curclass, "$!from"
    ne $I11, -1, rxscan1149_done3204
    goto rxscan1149_scan3203
  rxscan1149_loop3202:
    inc rx1148_pos
    gt rx1148_pos, rx1148_eos, rx1148_fail3198
    repr_bind_attr_int rx1148_cur, rx1148_curclass, "$!from", rx1148_pos
  rxscan1149_scan3203:
    nqp_rxmark rx1148_bstack, rxscan1149_loop3202, rx1148_pos, 0
  rxscan1149_done3204:
    nqp_rxmark rx1148_bstack, rxcap1150_fail3206, rx1148_pos, 0
    add $I11, rx1148_pos, 2
    gt $I11, rx1148_eos, rx1148_fail3198
    substr $S10, rx1148_tgt, rx1148_pos, 2
    ne $S10, ucs4:"//", rx1148_fail3198
    add rx1148_pos, 2
    nqp_rxpeek $I19, rx1148_bstack, rxcap1150_fail3206
    inc $I19
    set $I11, rx1148_bstack[$I19]
    $P11 = rx1148_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1148_pos)
    rx1148_cstack = rx1148_cur."!cursor_capture"($P11, "sym")
    goto rxcap1150_done3205
  rxcap1150_fail3206:
    goto rx1148_fail3198
  rxcap1150_done3205:
    repr_bind_attr_int rx1148_cur, rx1148_curclass, "$!pos", rx1148_pos
    $P11 = rx1148_cur."O"("%tight_or, :op<defor>")
    repr_get_attr_int $I11, $P11, rx1148_curclass, "$!pos"
    lt $I11, 0, rx1148_fail3198
    nqp_rxmark rx1148_bstack, rxsubrule1151_pass3207, -1, 0
  rxsubrule1151_pass3207:
    rx1148_cstack = rx1148_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1148_pos, $P11, rx1148_curclass, "$!pos"
    rx1148_cur."!cursor_pass"(rx1148_pos, "infix:sym<//>", 'backtrack'=>1)
    .return (rx1148_cur)
  rx1148_restart3197:
    repr_get_attr_obj rx1148_cstack, rx1148_cur, rx1148_curclass, "$!cstack"
  rx1148_fail3198:
    unless rx1148_bstack, rx1148_done3196
    pop $I19, rx1148_bstack
    if_null rx1148_cstack, rx1148_cstack_done3201
    unless rx1148_cstack, rx1148_cstack_done3201
    dec $I19
    set $P11, rx1148_cstack[$I19]
  rx1148_cstack_done3201:
    pop rx1148_rep, rx1148_bstack
    pop rx1148_pos, rx1148_bstack
    pop $I19, rx1148_bstack
    lt rx1148_pos, -1, rx1148_done3196
    lt rx1148_pos, 0, rx1148_fail3198
    eq $I19, 0, rx1148_fail3198
    nqp_islist $I20, rx1148_cstack
    unless $I20, rx1148_jump3199
    elements $I18, rx1148_bstack
    le $I18, 0, rx1148_cut3200
    dec $I18
    set $I18, rx1148_bstack[$I18]
  rx1148_cut3200:
    assign rx1148_cstack, $I18
  rx1148_jump3199:
    jump $I19
  rx1148_done3196:
    rx1148_cur."!cursor_fail"()
    .return (rx1148_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_211_1346968539.359_caps" :subid("cuid_memo_357_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_211_1346968539.359_nfa" :subid("cuid_memo_358_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 47
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 47
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<?? !!>" :subid("cuid_212_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1307
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1152_tgt
    .local int rx1152_pos
    .local int rx1152_off
    .local int rx1152_eos
    .local int rx1152_rep
    .local pmc rx1152_cur
    .local pmc rx1152_curclass
    .local pmc rx1152_bstack
    .local pmc rx1152_cstack
    (rx1152_cur, rx1152_tgt, rx1152_pos, rx1152_curclass, rx1152_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1152_cur
    length rx1152_eos, rx1152_tgt
    eq $I19, 1, rx1152_restart3210
    gt rx1152_pos, rx1152_eos, rx1152_fail3211
    repr_get_attr_int $I11, self, rx1152_curclass, "$!from"
    ne $I11, -1, rxscan1153_done3217
    goto rxscan1153_scan3216
  rxscan1153_loop3215:
    inc rx1152_pos
    gt rx1152_pos, rx1152_eos, rx1152_fail3211
    repr_bind_attr_int rx1152_cur, rx1152_curclass, "$!from", rx1152_pos
  rxscan1153_scan3216:
    nqp_rxmark rx1152_bstack, rxscan1153_loop3215, rx1152_pos, 0
  rxscan1153_done3217:
    add $I11, rx1152_pos, 2
    gt $I11, rx1152_eos, rx1152_fail3211
    substr $S10, rx1152_tgt, rx1152_pos, 2
    ne $S10, ucs4:"??", rx1152_fail3211
    add rx1152_pos, 2
    repr_bind_attr_int rx1152_cur, rx1152_curclass, "$!pos", rx1152_pos
    $P11 = rx1152_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1152_curclass, "$!pos"
    lt $I11, 0, rx1152_fail3211
    repr_get_attr_int rx1152_pos, $P11, rx1152_curclass, "$!pos"
    repr_bind_attr_int rx1152_cur, rx1152_curclass, "$!pos", rx1152_pos
    $P11 = rx1152_cur."EXPR"("i=")
    repr_get_attr_int $I11, $P11, rx1152_curclass, "$!pos"
    lt $I11, 0, rx1152_fail3211
    nqp_rxmark rx1152_bstack, rxsubrule1155_pass3219, -1, 0
  rxsubrule1155_pass3219:
    rx1152_cstack = rx1152_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx1152_pos, $P11, rx1152_curclass, "$!pos"
    add $I11, rx1152_pos, 2
    gt $I11, rx1152_eos, rx1152_fail3211
    substr $S10, rx1152_tgt, rx1152_pos, 2
    ne $S10, ucs4:"!!", rx1152_fail3211
    add rx1152_pos, 2
    repr_bind_attr_int rx1152_cur, rx1152_curclass, "$!pos", rx1152_pos
    $P11 = rx1152_cur."O"("%conditional, :reducecheck<ternary>, :op<if>")
    repr_get_attr_int $I11, $P11, rx1152_curclass, "$!pos"
    lt $I11, 0, rx1152_fail3211
    nqp_rxmark rx1152_bstack, rxsubrule1156_pass3220, -1, 0
  rxsubrule1156_pass3220:
    rx1152_cstack = rx1152_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1152_pos, $P11, rx1152_curclass, "$!pos"
    rx1152_cur."!cursor_pass"(rx1152_pos, "infix:sym<?? !!>", 'backtrack'=>1)
    .return (rx1152_cur)
  rx1152_restart3210:
    repr_get_attr_obj rx1152_cstack, rx1152_cur, rx1152_curclass, "$!cstack"
  rx1152_fail3211:
    unless rx1152_bstack, rx1152_done3209
    pop $I19, rx1152_bstack
    if_null rx1152_cstack, rx1152_cstack_done3214
    unless rx1152_cstack, rx1152_cstack_done3214
    dec $I19
    set $P11, rx1152_cstack[$I19]
  rx1152_cstack_done3214:
    pop rx1152_rep, rx1152_bstack
    pop rx1152_pos, rx1152_bstack
    pop $I19, rx1152_bstack
    lt rx1152_pos, -1, rx1152_done3209
    lt rx1152_pos, 0, rx1152_fail3211
    eq $I19, 0, rx1152_fail3211
    nqp_islist $I20, rx1152_cstack
    unless $I20, rx1152_jump3212
    elements $I18, rx1152_bstack
    le $I18, 0, rx1152_cut3213
    dec $I18
    set $I18, rx1152_bstack[$I18]
  rx1152_cut3213:
    assign rx1152_cstack, $I18
  rx1152_jump3212:
    jump $I19
  rx1152_done3209:
    rx1152_cur."!cursor_fail"()
    .return (rx1152_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_212_1346968539.359_caps" :subid("cuid_memo_359_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["EXPR"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_212_1346968539.359_nfa" :subid("cuid_memo_360_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 63
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 63
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "ws"
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "EXPR"
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 33
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 33
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "O"
    push $P5027, $P5029
    box $P5030, 0
    push $P5027, $P5030
    push $P5001, $P5027
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<=>" :subid("cuid_213_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1315
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1157_tgt
    .local int rx1157_pos
    .local int rx1157_off
    .local int rx1157_eos
    .local int rx1157_rep
    .local pmc rx1157_cur
    .local pmc rx1157_curclass
    .local pmc rx1157_bstack
    .local pmc rx1157_cstack
    (rx1157_cur, rx1157_tgt, rx1157_pos, rx1157_curclass, rx1157_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1157_cur
    length rx1157_eos, rx1157_tgt
    eq $I19, 1, rx1157_restart3223
    gt rx1157_pos, rx1157_eos, rx1157_fail3224
    repr_get_attr_int $I11, self, rx1157_curclass, "$!from"
    ne $I11, -1, rxscan1158_done3230
    goto rxscan1158_scan3229
  rxscan1158_loop3228:
    inc rx1157_pos
    gt rx1157_pos, rx1157_eos, rx1157_fail3224
    repr_bind_attr_int rx1157_cur, rx1157_curclass, "$!from", rx1157_pos
  rxscan1158_scan3229:
    nqp_rxmark rx1157_bstack, rxscan1158_loop3228, rx1157_pos, 0
  rxscan1158_done3230:
    nqp_rxmark rx1157_bstack, rxcap1159_fail3232, rx1157_pos, 0
    add $I11, rx1157_pos, 1
    gt $I11, rx1157_eos, rx1157_fail3224
    substr $S10, rx1157_tgt, rx1157_pos, 1
    ne $S10, ucs4:"=", rx1157_fail3224
    add rx1157_pos, 1
    nqp_rxpeek $I19, rx1157_bstack, rxcap1159_fail3232
    inc $I19
    set $I11, rx1157_bstack[$I19]
    $P11 = rx1157_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1157_pos)
    rx1157_cstack = rx1157_cur."!cursor_capture"($P11, "sym")
    goto rxcap1159_done3231
  rxcap1159_fail3232:
    goto rx1157_fail3224
  rxcap1159_done3231:
    repr_bind_attr_int rx1157_cur, rx1157_curclass, "$!pos", rx1157_pos
    $P11 = rx1157_cur."panic"("Assignment (\"=\") not supported in NQP, use \":=\" instead")
    repr_get_attr_int $I11, $P11, rx1157_curclass, "$!pos"
    lt $I11, 0, rx1157_fail3224
    repr_get_attr_int rx1157_pos, $P11, rx1157_curclass, "$!pos"
    rx1157_cur."!cursor_pass"(rx1157_pos, "infix:sym<=>", 'backtrack'=>1)
    .return (rx1157_cur)
  rx1157_restart3223:
    repr_get_attr_obj rx1157_cstack, rx1157_cur, rx1157_curclass, "$!cstack"
  rx1157_fail3224:
    unless rx1157_bstack, rx1157_done3222
    pop $I19, rx1157_bstack
    if_null rx1157_cstack, rx1157_cstack_done3227
    unless rx1157_cstack, rx1157_cstack_done3227
    dec $I19
    set $P11, rx1157_cstack[$I19]
  rx1157_cstack_done3227:
    pop rx1157_rep, rx1157_bstack
    pop rx1157_pos, rx1157_bstack
    pop $I19, rx1157_bstack
    lt rx1157_pos, -1, rx1157_done3222
    lt rx1157_pos, 0, rx1157_fail3224
    eq $I19, 0, rx1157_fail3224
    nqp_islist $I20, rx1157_cstack
    unless $I20, rx1157_jump3225
    elements $I18, rx1157_bstack
    le $I18, 0, rx1157_cut3226
    dec $I18
    set $I18, rx1157_bstack[$I18]
  rx1157_cut3226:
    assign rx1157_cstack, $I18
  rx1157_jump3225:
    jump $I19
  rx1157_done3222:
    rx1157_cur."!cursor_fail"()
    .return (rx1157_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_213_1346968539.359_caps" :subid("cuid_memo_361_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_213_1346968539.359_nfa" :subid("cuid_memo_362_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 61
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "panic"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<:=>" :subid("cuid_214_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1318
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1161_tgt
    .local int rx1161_pos
    .local int rx1161_off
    .local int rx1161_eos
    .local int rx1161_rep
    .local pmc rx1161_cur
    .local pmc rx1161_curclass
    .local pmc rx1161_bstack
    .local pmc rx1161_cstack
    (rx1161_cur, rx1161_tgt, rx1161_pos, rx1161_curclass, rx1161_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1161_cur
    length rx1161_eos, rx1161_tgt
    eq $I19, 1, rx1161_restart3236
    gt rx1161_pos, rx1161_eos, rx1161_fail3237
    repr_get_attr_int $I11, self, rx1161_curclass, "$!from"
    ne $I11, -1, rxscan1162_done3243
    goto rxscan1162_scan3242
  rxscan1162_loop3241:
    inc rx1161_pos
    gt rx1161_pos, rx1161_eos, rx1161_fail3237
    repr_bind_attr_int rx1161_cur, rx1161_curclass, "$!from", rx1161_pos
  rxscan1162_scan3242:
    nqp_rxmark rx1161_bstack, rxscan1162_loop3241, rx1161_pos, 0
  rxscan1162_done3243:
    nqp_rxmark rx1161_bstack, rxcap1163_fail3245, rx1161_pos, 0
    add $I11, rx1161_pos, 2
    gt $I11, rx1161_eos, rx1161_fail3237
    substr $S10, rx1161_tgt, rx1161_pos, 2
    ne $S10, ucs4:":=", rx1161_fail3237
    add rx1161_pos, 2
    nqp_rxpeek $I19, rx1161_bstack, rxcap1163_fail3245
    inc $I19
    set $I11, rx1161_bstack[$I19]
    $P11 = rx1161_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1161_pos)
    rx1161_cstack = rx1161_cur."!cursor_capture"($P11, "sym")
    goto rxcap1163_done3244
  rxcap1163_fail3245:
    goto rx1161_fail3237
  rxcap1163_done3244:
    repr_bind_attr_int rx1161_cur, rx1161_curclass, "$!pos", rx1161_pos
    $P11 = rx1161_cur."O"("%assignment, :op<bind>")
    repr_get_attr_int $I11, $P11, rx1161_curclass, "$!pos"
    lt $I11, 0, rx1161_fail3237
    nqp_rxmark rx1161_bstack, rxsubrule1164_pass3246, -1, 0
  rxsubrule1164_pass3246:
    rx1161_cstack = rx1161_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1161_pos, $P11, rx1161_curclass, "$!pos"
    rx1161_cur."!cursor_pass"(rx1161_pos, "infix:sym<:=>", 'backtrack'=>1)
    .return (rx1161_cur)
  rx1161_restart3236:
    repr_get_attr_obj rx1161_cstack, rx1161_cur, rx1161_curclass, "$!cstack"
  rx1161_fail3237:
    unless rx1161_bstack, rx1161_done3235
    pop $I19, rx1161_bstack
    if_null rx1161_cstack, rx1161_cstack_done3240
    unless rx1161_cstack, rx1161_cstack_done3240
    dec $I19
    set $P11, rx1161_cstack[$I19]
  rx1161_cstack_done3240:
    pop rx1161_rep, rx1161_bstack
    pop rx1161_pos, rx1161_bstack
    pop $I19, rx1161_bstack
    lt rx1161_pos, -1, rx1161_done3235
    lt rx1161_pos, 0, rx1161_fail3237
    eq $I19, 0, rx1161_fail3237
    nqp_islist $I20, rx1161_cstack
    unless $I20, rx1161_jump3238
    elements $I18, rx1161_bstack
    le $I18, 0, rx1161_cut3239
    dec $I18
    set $I18, rx1161_bstack[$I18]
  rx1161_cut3239:
    assign rx1161_cstack, $I18
  rx1161_jump3238:
    jump $I19
  rx1161_done3235:
    rx1161_cur."!cursor_fail"()
    .return (rx1161_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_214_1346968539.359_caps" :subid("cuid_memo_363_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_214_1346968539.359_nfa" :subid("cuid_memo_364_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 58
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 61
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<::=>" :subid("cuid_215_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1319
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1165_tgt
    .local int rx1165_pos
    .local int rx1165_off
    .local int rx1165_eos
    .local int rx1165_rep
    .local pmc rx1165_cur
    .local pmc rx1165_curclass
    .local pmc rx1165_bstack
    .local pmc rx1165_cstack
    (rx1165_cur, rx1165_tgt, rx1165_pos, rx1165_curclass, rx1165_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1165_cur
    length rx1165_eos, rx1165_tgt
    eq $I19, 1, rx1165_restart3249
    gt rx1165_pos, rx1165_eos, rx1165_fail3250
    repr_get_attr_int $I11, self, rx1165_curclass, "$!from"
    ne $I11, -1, rxscan1166_done3256
    goto rxscan1166_scan3255
  rxscan1166_loop3254:
    inc rx1165_pos
    gt rx1165_pos, rx1165_eos, rx1165_fail3250
    repr_bind_attr_int rx1165_cur, rx1165_curclass, "$!from", rx1165_pos
  rxscan1166_scan3255:
    nqp_rxmark rx1165_bstack, rxscan1166_loop3254, rx1165_pos, 0
  rxscan1166_done3256:
    nqp_rxmark rx1165_bstack, rxcap1167_fail3258, rx1165_pos, 0
    add $I11, rx1165_pos, 3
    gt $I11, rx1165_eos, rx1165_fail3250
    substr $S10, rx1165_tgt, rx1165_pos, 3
    ne $S10, ucs4:"::=", rx1165_fail3250
    add rx1165_pos, 3
    nqp_rxpeek $I19, rx1165_bstack, rxcap1167_fail3258
    inc $I19
    set $I11, rx1165_bstack[$I19]
    $P11 = rx1165_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1165_pos)
    rx1165_cstack = rx1165_cur."!cursor_capture"($P11, "sym")
    goto rxcap1167_done3257
  rxcap1167_fail3258:
    goto rx1165_fail3250
  rxcap1167_done3257:
    repr_bind_attr_int rx1165_cur, rx1165_curclass, "$!pos", rx1165_pos
    $P11 = rx1165_cur."O"("%assignment, :op<bind>")
    repr_get_attr_int $I11, $P11, rx1165_curclass, "$!pos"
    lt $I11, 0, rx1165_fail3250
    nqp_rxmark rx1165_bstack, rxsubrule1168_pass3259, -1, 0
  rxsubrule1168_pass3259:
    rx1165_cstack = rx1165_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1165_pos, $P11, rx1165_curclass, "$!pos"
    rx1165_cur."!cursor_pass"(rx1165_pos, "infix:sym<::=>", 'backtrack'=>1)
    .return (rx1165_cur)
  rx1165_restart3249:
    repr_get_attr_obj rx1165_cstack, rx1165_cur, rx1165_curclass, "$!cstack"
  rx1165_fail3250:
    unless rx1165_bstack, rx1165_done3248
    pop $I19, rx1165_bstack
    if_null rx1165_cstack, rx1165_cstack_done3253
    unless rx1165_cstack, rx1165_cstack_done3253
    dec $I19
    set $P11, rx1165_cstack[$I19]
  rx1165_cstack_done3253:
    pop rx1165_rep, rx1165_bstack
    pop rx1165_pos, rx1165_bstack
    pop $I19, rx1165_bstack
    lt rx1165_pos, -1, rx1165_done3248
    lt rx1165_pos, 0, rx1165_fail3250
    eq $I19, 0, rx1165_fail3250
    nqp_islist $I20, rx1165_cstack
    unless $I20, rx1165_jump3251
    elements $I18, rx1165_bstack
    le $I18, 0, rx1165_cut3252
    dec $I18
    set $I18, rx1165_bstack[$I18]
  rx1165_cut3252:
    assign rx1165_cstack, $I18
  rx1165_jump3251:
    jump $I19
  rx1165_done3248:
    rx1165_cur."!cursor_fail"()
    .return (rx1165_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_215_1346968539.359_caps" :subid("cuid_memo_365_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_215_1346968539.359_nfa" :subid("cuid_memo_366_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 58
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 58
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 61
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "O"
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<,>" :subid("cuid_216_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1321
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1169_tgt
    .local int rx1169_pos
    .local int rx1169_off
    .local int rx1169_eos
    .local int rx1169_rep
    .local pmc rx1169_cur
    .local pmc rx1169_curclass
    .local pmc rx1169_bstack
    .local pmc rx1169_cstack
    (rx1169_cur, rx1169_tgt, rx1169_pos, rx1169_curclass, rx1169_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1169_cur
    length rx1169_eos, rx1169_tgt
    eq $I19, 1, rx1169_restart3262
    gt rx1169_pos, rx1169_eos, rx1169_fail3263
    repr_get_attr_int $I11, self, rx1169_curclass, "$!from"
    ne $I11, -1, rxscan1170_done3269
    goto rxscan1170_scan3268
  rxscan1170_loop3267:
    inc rx1169_pos
    gt rx1169_pos, rx1169_eos, rx1169_fail3263
    repr_bind_attr_int rx1169_cur, rx1169_curclass, "$!from", rx1169_pos
  rxscan1170_scan3268:
    nqp_rxmark rx1169_bstack, rxscan1170_loop3267, rx1169_pos, 0
  rxscan1170_done3269:
    nqp_rxmark rx1169_bstack, rxcap1171_fail3271, rx1169_pos, 0
    add $I11, rx1169_pos, 1
    gt $I11, rx1169_eos, rx1169_fail3263
    substr $S10, rx1169_tgt, rx1169_pos, 1
    ne $S10, ucs4:",", rx1169_fail3263
    add rx1169_pos, 1
    nqp_rxpeek $I19, rx1169_bstack, rxcap1171_fail3271
    inc $I19
    set $I11, rx1169_bstack[$I19]
    $P11 = rx1169_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1169_pos)
    rx1169_cstack = rx1169_cur."!cursor_capture"($P11, "sym")
    goto rxcap1171_done3270
  rxcap1171_fail3271:
    goto rx1169_fail3263
  rxcap1171_done3270:
    repr_bind_attr_int rx1169_cur, rx1169_curclass, "$!pos", rx1169_pos
    $P11 = rx1169_cur."O"("%comma, :op<list>")
    repr_get_attr_int $I11, $P11, rx1169_curclass, "$!pos"
    lt $I11, 0, rx1169_fail3263
    nqp_rxmark rx1169_bstack, rxsubrule1172_pass3272, -1, 0
  rxsubrule1172_pass3272:
    rx1169_cstack = rx1169_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1169_pos, $P11, rx1169_curclass, "$!pos"
    rx1169_cur."!cursor_pass"(rx1169_pos, "infix:sym<,>", 'backtrack'=>1)
    .return (rx1169_cur)
  rx1169_restart3262:
    repr_get_attr_obj rx1169_cstack, rx1169_cur, rx1169_curclass, "$!cstack"
  rx1169_fail3263:
    unless rx1169_bstack, rx1169_done3261
    pop $I19, rx1169_bstack
    if_null rx1169_cstack, rx1169_cstack_done3266
    unless rx1169_cstack, rx1169_cstack_done3266
    dec $I19
    set $P11, rx1169_cstack[$I19]
  rx1169_cstack_done3266:
    pop rx1169_rep, rx1169_bstack
    pop rx1169_pos, rx1169_bstack
    pop $I19, rx1169_bstack
    lt rx1169_pos, -1, rx1169_done3261
    lt rx1169_pos, 0, rx1169_fail3263
    eq $I19, 0, rx1169_fail3263
    nqp_islist $I20, rx1169_cstack
    unless $I20, rx1169_jump3264
    elements $I18, rx1169_bstack
    le $I18, 0, rx1169_cut3265
    dec $I18
    set $I18, rx1169_bstack[$I18]
  rx1169_cut3265:
    assign rx1169_cstack, $I18
  rx1169_jump3264:
    jump $I19
  rx1169_done3261:
    rx1169_cur."!cursor_fail"()
    .return (rx1169_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_216_1346968539.359_caps" :subid("cuid_memo_367_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_216_1346968539.359_nfa" :subid("cuid_memo_368_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 44
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<return>" :subid("cuid_217_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1323
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_395_1346968539.359' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1173_tgt
    .local int rx1173_pos
    .local int rx1173_off
    .local int rx1173_eos
    .local int rx1173_rep
    .local pmc rx1173_cur
    .local pmc rx1173_curclass
    .local pmc rx1173_bstack
    .local pmc rx1173_cstack
    (rx1173_cur, rx1173_tgt, rx1173_pos, rx1173_curclass, rx1173_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1173_cur
    length rx1173_eos, rx1173_tgt
    eq $I19, 1, rx1173_restart3275
    gt rx1173_pos, rx1173_eos, rx1173_fail3276
    repr_get_attr_int $I11, self, rx1173_curclass, "$!from"
    ne $I11, -1, rxscan1174_done3282
    goto rxscan1174_scan3281
  rxscan1174_loop3280:
    inc rx1173_pos
    gt rx1173_pos, rx1173_eos, rx1173_fail3276
    repr_bind_attr_int rx1173_cur, rx1173_curclass, "$!from", rx1173_pos
  rxscan1174_scan3281:
    nqp_rxmark rx1173_bstack, rxscan1174_loop3280, rx1173_pos, 0
  rxscan1174_done3282:
    nqp_rxmark rx1173_bstack, rxcap1175_fail3284, rx1173_pos, 0
    add $I11, rx1173_pos, 6
    gt $I11, rx1173_eos, rx1173_fail3276
    substr $S10, rx1173_tgt, rx1173_pos, 6
    ne $S10, ucs4:"return", rx1173_fail3276
    add rx1173_pos, 6
    nqp_rxpeek $I19, rx1173_bstack, rxcap1175_fail3284
    inc $I19
    set $I11, rx1173_bstack[$I19]
    $P11 = rx1173_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1173_pos)
    rx1173_cstack = rx1173_cur."!cursor_capture"($P11, "sym")
    goto rxcap1175_done3283
  rxcap1175_fail3284:
    goto rx1173_fail3276
  rxcap1175_done3283:
    ge rx1173_pos, rx1173_eos, rx1173_fail3276
    is_cclass $I11, .CCLASS_WHITESPACE, rx1173_tgt, rx1173_pos
    unless $I11, rx1173_fail3276
    add rx1173_pos, 1
    repr_bind_attr_int rx1173_cur, rx1173_curclass, "$!pos", rx1173_pos
    $P11 = rx1173_cur."O"("%list_prefix")
    repr_get_attr_int $I11, $P11, rx1173_curclass, "$!pos"
    lt $I11, 0, rx1173_fail3276
    nqp_rxmark rx1173_bstack, rxsubrule1176_pass3285, -1, 0
  rxsubrule1176_pass3285:
    rx1173_cstack = rx1173_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1173_pos, $P11, rx1173_curclass, "$!pos"
    repr_bind_attr_int rx1173_cur, rx1173_curclass, "$!pos", rx1173_pos
    store_lex unicode:"$\x{a2}", rx1173_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_395_1346968539.359' 
    capture_lex $P5002
    $P5003 = $P5002()
    rx1173_cur."!cursor_pass"(rx1173_pos, "prefix:sym<return>", 'backtrack'=>1)
    .return (rx1173_cur)
  rx1173_restart3275:
    repr_get_attr_obj rx1173_cstack, rx1173_cur, rx1173_curclass, "$!cstack"
  rx1173_fail3276:
    unless rx1173_bstack, rx1173_done3274
    pop $I19, rx1173_bstack
    if_null rx1173_cstack, rx1173_cstack_done3279
    unless rx1173_cstack, rx1173_cstack_done3279
    dec $I19
    set $P11, rx1173_cstack[$I19]
  rx1173_cstack_done3279:
    pop rx1173_rep, rx1173_bstack
    pop rx1173_pos, rx1173_bstack
    pop $I19, rx1173_bstack
    lt rx1173_pos, -1, rx1173_done3274
    lt rx1173_pos, 0, rx1173_fail3276
    eq $I19, 0, rx1173_fail3276
    nqp_islist $I20, rx1173_cstack
    unless $I20, rx1173_jump3277
    elements $I18, rx1173_bstack
    le $I18, 0, rx1173_cut3278
    dec $I18
    set $I18, rx1173_bstack[$I18]
  rx1173_cut3278:
    assign rx1173_cstack, $I18
  rx1173_jump3277:
    jump $I19
  rx1173_done3274:
    rx1173_cur."!cursor_fail"()
    .return (rx1173_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_217_1346968539.359_caps" :subid("cuid_memo_369_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_217_1346968539.359_nfa" :subid("cuid_memo_370_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 114
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 101
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 116
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 117
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 114
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 110
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 4
    push $P5027, $P5028
    box $P5029, 32
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 8
    push $P5031, $P5032
    box $P5033, "O"
    push $P5031, $P5033
    box $P5034, 9
    push $P5031, $P5034
    push $P5001, $P5031
    new $P5035, 'ResizablePMCArray'
    box $P5036, 0
    push $P5035, $P5036
    box $P5037, 0
    push $P5035, $P5037
    box $P5038, 0
    push $P5035, $P5038
    push $P5001, $P5035
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_395_1346968539.359") :anon :lex :outer("cuid_217_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1323

    box $P5001, 1
    store_dynamic_lex "$*RETURN_USED", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<make>" :subid("cuid_218_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1324
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1177_tgt
    .local int rx1177_pos
    .local int rx1177_off
    .local int rx1177_eos
    .local int rx1177_rep
    .local pmc rx1177_cur
    .local pmc rx1177_curclass
    .local pmc rx1177_bstack
    .local pmc rx1177_cstack
    (rx1177_cur, rx1177_tgt, rx1177_pos, rx1177_curclass, rx1177_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1177_cur
    length rx1177_eos, rx1177_tgt
    eq $I19, 1, rx1177_restart3288
    gt rx1177_pos, rx1177_eos, rx1177_fail3289
    repr_get_attr_int $I11, self, rx1177_curclass, "$!from"
    ne $I11, -1, rxscan1178_done3295
    goto rxscan1178_scan3294
  rxscan1178_loop3293:
    inc rx1177_pos
    gt rx1177_pos, rx1177_eos, rx1177_fail3289
    repr_bind_attr_int rx1177_cur, rx1177_curclass, "$!from", rx1177_pos
  rxscan1178_scan3294:
    nqp_rxmark rx1177_bstack, rxscan1178_loop3293, rx1177_pos, 0
  rxscan1178_done3295:
    nqp_rxmark rx1177_bstack, rxcap1179_fail3297, rx1177_pos, 0
    add $I11, rx1177_pos, 4
    gt $I11, rx1177_eos, rx1177_fail3289
    substr $S10, rx1177_tgt, rx1177_pos, 4
    ne $S10, ucs4:"make", rx1177_fail3289
    add rx1177_pos, 4
    nqp_rxpeek $I19, rx1177_bstack, rxcap1179_fail3297
    inc $I19
    set $I11, rx1177_bstack[$I19]
    $P11 = rx1177_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1177_pos)
    rx1177_cstack = rx1177_cur."!cursor_capture"($P11, "sym")
    goto rxcap1179_done3296
  rxcap1179_fail3297:
    goto rx1177_fail3289
  rxcap1179_done3296:
    ge rx1177_pos, rx1177_eos, rx1177_fail3289
    is_cclass $I11, .CCLASS_WHITESPACE, rx1177_tgt, rx1177_pos
    unless $I11, rx1177_fail3289
    add rx1177_pos, 1
    repr_bind_attr_int rx1177_cur, rx1177_curclass, "$!pos", rx1177_pos
    $P11 = rx1177_cur."O"("%list_prefix")
    repr_get_attr_int $I11, $P11, rx1177_curclass, "$!pos"
    lt $I11, 0, rx1177_fail3289
    nqp_rxmark rx1177_bstack, rxsubrule1180_pass3298, -1, 0
  rxsubrule1180_pass3298:
    rx1177_cstack = rx1177_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1177_pos, $P11, rx1177_curclass, "$!pos"
    rx1177_cur."!cursor_pass"(rx1177_pos, "prefix:sym<make>", 'backtrack'=>1)
    .return (rx1177_cur)
  rx1177_restart3288:
    repr_get_attr_obj rx1177_cstack, rx1177_cur, rx1177_curclass, "$!cstack"
  rx1177_fail3289:
    unless rx1177_bstack, rx1177_done3287
    pop $I19, rx1177_bstack
    if_null rx1177_cstack, rx1177_cstack_done3292
    unless rx1177_cstack, rx1177_cstack_done3292
    dec $I19
    set $P11, rx1177_cstack[$I19]
  rx1177_cstack_done3292:
    pop rx1177_rep, rx1177_bstack
    pop rx1177_pos, rx1177_bstack
    pop $I19, rx1177_bstack
    lt rx1177_pos, -1, rx1177_done3287
    lt rx1177_pos, 0, rx1177_fail3289
    eq $I19, 0, rx1177_fail3289
    nqp_islist $I20, rx1177_cstack
    unless $I20, rx1177_jump3290
    elements $I18, rx1177_bstack
    le $I18, 0, rx1177_cut3291
    dec $I18
    set $I18, rx1177_bstack[$I18]
  rx1177_cut3291:
    assign rx1177_cstack, $I18
  rx1177_jump3290:
    jump $I19
  rx1177_done3287:
    rx1177_cur."!cursor_fail"()
    .return (rx1177_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_218_1346968539.359_caps" :subid("cuid_memo_371_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_218_1346968539.359_nfa" :subid("cuid_memo_372_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 109
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 97
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 107
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 101
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 4
    push $P5019, $P5020
    box $P5021, 32
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 8
    push $P5023, $P5024
    box $P5025, "O"
    push $P5023, $P5025
    box $P5026, 0
    push $P5023, $P5026
    push $P5001, $P5023
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<last>" :subid("cuid_219_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1325
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_396_1346968539.359' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1181_tgt
    .local int rx1181_pos
    .local int rx1181_off
    .local int rx1181_eos
    .local int rx1181_rep
    .local pmc rx1181_cur
    .local pmc rx1181_curclass
    .local pmc rx1181_bstack
    .local pmc rx1181_cstack
    (rx1181_cur, rx1181_tgt, rx1181_pos, rx1181_curclass, rx1181_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1181_cur
    length rx1181_eos, rx1181_tgt
    eq $I19, 1, rx1181_restart3301
    gt rx1181_pos, rx1181_eos, rx1181_fail3302
    repr_get_attr_int $I11, self, rx1181_curclass, "$!from"
    ne $I11, -1, rxscan1182_done3308
    goto rxscan1182_scan3307
  rxscan1182_loop3306:
    inc rx1181_pos
    gt rx1181_pos, rx1181_eos, rx1181_fail3302
    repr_bind_attr_int rx1181_cur, rx1181_curclass, "$!from", rx1181_pos
  rxscan1182_scan3307:
    nqp_rxmark rx1181_bstack, rxscan1182_loop3306, rx1181_pos, 0
  rxscan1182_done3308:
    nqp_rxmark rx1181_bstack, rxcap1183_fail3310, rx1181_pos, 0
    add $I11, rx1181_pos, 4
    gt $I11, rx1181_eos, rx1181_fail3302
    substr $S10, rx1181_tgt, rx1181_pos, 4
    ne $S10, ucs4:"last", rx1181_fail3302
    add rx1181_pos, 4
    nqp_rxpeek $I19, rx1181_bstack, rxcap1183_fail3310
    inc $I19
    set $I11, rx1181_bstack[$I19]
    $P11 = rx1181_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1181_pos)
    rx1181_cstack = rx1181_cur."!cursor_capture"($P11, "sym")
    goto rxcap1183_done3309
  rxcap1183_fail3310:
    goto rx1181_fail3302
  rxcap1183_done3309:
    repr_bind_attr_int rx1181_cur, rx1181_curclass, "$!pos", rx1181_pos
    store_lex unicode:"$\x{a2}", rx1181_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_396_1346968539.359' 
    capture_lex $P5002
    $P5003 = $P5002()
    rx1181_cur."!cursor_pass"(rx1181_pos, "term:sym<last>", 'backtrack'=>1)
    .return (rx1181_cur)
  rx1181_restart3301:
    repr_get_attr_obj rx1181_cstack, rx1181_cur, rx1181_curclass, "$!cstack"
  rx1181_fail3302:
    unless rx1181_bstack, rx1181_done3300
    pop $I19, rx1181_bstack
    if_null rx1181_cstack, rx1181_cstack_done3305
    unless rx1181_cstack, rx1181_cstack_done3305
    dec $I19
    set $P11, rx1181_cstack[$I19]
  rx1181_cstack_done3305:
    pop rx1181_rep, rx1181_bstack
    pop rx1181_pos, rx1181_bstack
    pop $I19, rx1181_bstack
    lt rx1181_pos, -1, rx1181_done3300
    lt rx1181_pos, 0, rx1181_fail3302
    eq $I19, 0, rx1181_fail3302
    nqp_islist $I20, rx1181_cstack
    unless $I20, rx1181_jump3303
    elements $I18, rx1181_bstack
    le $I18, 0, rx1181_cut3304
    dec $I18
    set $I18, rx1181_bstack[$I18]
  rx1181_cut3304:
    assign rx1181_cstack, $I18
  rx1181_jump3303:
    jump $I19
  rx1181_done3300:
    rx1181_cur."!cursor_fail"()
    .return (rx1181_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_219_1346968539.359_caps" :subid("cuid_memo_373_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_219_1346968539.359_nfa" :subid("cuid_memo_374_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 108
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 97
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 115
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 116
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 0
    push $P5019, $P5020
    box $P5021, 0
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_396_1346968539.359") :anon :lex :outer("cuid_219_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1325

    box $P5001, 1
    store_dynamic_lex "$*CONTROL_USED", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<next>" :subid("cuid_220_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1326
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_397_1346968539.359' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1184_tgt
    .local int rx1184_pos
    .local int rx1184_off
    .local int rx1184_eos
    .local int rx1184_rep
    .local pmc rx1184_cur
    .local pmc rx1184_curclass
    .local pmc rx1184_bstack
    .local pmc rx1184_cstack
    (rx1184_cur, rx1184_tgt, rx1184_pos, rx1184_curclass, rx1184_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1184_cur
    length rx1184_eos, rx1184_tgt
    eq $I19, 1, rx1184_restart3313
    gt rx1184_pos, rx1184_eos, rx1184_fail3314
    repr_get_attr_int $I11, self, rx1184_curclass, "$!from"
    ne $I11, -1, rxscan1185_done3320
    goto rxscan1185_scan3319
  rxscan1185_loop3318:
    inc rx1184_pos
    gt rx1184_pos, rx1184_eos, rx1184_fail3314
    repr_bind_attr_int rx1184_cur, rx1184_curclass, "$!from", rx1184_pos
  rxscan1185_scan3319:
    nqp_rxmark rx1184_bstack, rxscan1185_loop3318, rx1184_pos, 0
  rxscan1185_done3320:
    nqp_rxmark rx1184_bstack, rxcap1186_fail3322, rx1184_pos, 0
    add $I11, rx1184_pos, 4
    gt $I11, rx1184_eos, rx1184_fail3314
    substr $S10, rx1184_tgt, rx1184_pos, 4
    ne $S10, ucs4:"next", rx1184_fail3314
    add rx1184_pos, 4
    nqp_rxpeek $I19, rx1184_bstack, rxcap1186_fail3322
    inc $I19
    set $I11, rx1184_bstack[$I19]
    $P11 = rx1184_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1184_pos)
    rx1184_cstack = rx1184_cur."!cursor_capture"($P11, "sym")
    goto rxcap1186_done3321
  rxcap1186_fail3322:
    goto rx1184_fail3314
  rxcap1186_done3321:
    repr_bind_attr_int rx1184_cur, rx1184_curclass, "$!pos", rx1184_pos
    store_lex unicode:"$\x{a2}", rx1184_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_397_1346968539.359' 
    capture_lex $P5002
    $P5003 = $P5002()
    rx1184_cur."!cursor_pass"(rx1184_pos, "term:sym<next>", 'backtrack'=>1)
    .return (rx1184_cur)
  rx1184_restart3313:
    repr_get_attr_obj rx1184_cstack, rx1184_cur, rx1184_curclass, "$!cstack"
  rx1184_fail3314:
    unless rx1184_bstack, rx1184_done3312
    pop $I19, rx1184_bstack
    if_null rx1184_cstack, rx1184_cstack_done3317
    unless rx1184_cstack, rx1184_cstack_done3317
    dec $I19
    set $P11, rx1184_cstack[$I19]
  rx1184_cstack_done3317:
    pop rx1184_rep, rx1184_bstack
    pop rx1184_pos, rx1184_bstack
    pop $I19, rx1184_bstack
    lt rx1184_pos, -1, rx1184_done3312
    lt rx1184_pos, 0, rx1184_fail3314
    eq $I19, 0, rx1184_fail3314
    nqp_islist $I20, rx1184_cstack
    unless $I20, rx1184_jump3315
    elements $I18, rx1184_bstack
    le $I18, 0, rx1184_cut3316
    dec $I18
    set $I18, rx1184_bstack[$I18]
  rx1184_cut3316:
    assign rx1184_cstack, $I18
  rx1184_jump3315:
    jump $I19
  rx1184_done3312:
    rx1184_cur."!cursor_fail"()
    .return (rx1184_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_220_1346968539.359_caps" :subid("cuid_memo_375_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_220_1346968539.359_nfa" :subid("cuid_memo_376_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 110
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 101
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 120
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 116
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 0
    push $P5019, $P5020
    box $P5021, 0
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_397_1346968539.359") :anon :lex :outer("cuid_220_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1326

    box $P5001, 1
    store_dynamic_lex "$*CONTROL_USED", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<redo>" :subid("cuid_221_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1327
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_398_1346968539.359' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1187_tgt
    .local int rx1187_pos
    .local int rx1187_off
    .local int rx1187_eos
    .local int rx1187_rep
    .local pmc rx1187_cur
    .local pmc rx1187_curclass
    .local pmc rx1187_bstack
    .local pmc rx1187_cstack
    (rx1187_cur, rx1187_tgt, rx1187_pos, rx1187_curclass, rx1187_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1187_cur
    length rx1187_eos, rx1187_tgt
    eq $I19, 1, rx1187_restart3325
    gt rx1187_pos, rx1187_eos, rx1187_fail3326
    repr_get_attr_int $I11, self, rx1187_curclass, "$!from"
    ne $I11, -1, rxscan1188_done3332
    goto rxscan1188_scan3331
  rxscan1188_loop3330:
    inc rx1187_pos
    gt rx1187_pos, rx1187_eos, rx1187_fail3326
    repr_bind_attr_int rx1187_cur, rx1187_curclass, "$!from", rx1187_pos
  rxscan1188_scan3331:
    nqp_rxmark rx1187_bstack, rxscan1188_loop3330, rx1187_pos, 0
  rxscan1188_done3332:
    nqp_rxmark rx1187_bstack, rxcap1189_fail3334, rx1187_pos, 0
    add $I11, rx1187_pos, 4
    gt $I11, rx1187_eos, rx1187_fail3326
    substr $S10, rx1187_tgt, rx1187_pos, 4
    ne $S10, ucs4:"redo", rx1187_fail3326
    add rx1187_pos, 4
    nqp_rxpeek $I19, rx1187_bstack, rxcap1189_fail3334
    inc $I19
    set $I11, rx1187_bstack[$I19]
    $P11 = rx1187_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1187_pos)
    rx1187_cstack = rx1187_cur."!cursor_capture"($P11, "sym")
    goto rxcap1189_done3333
  rxcap1189_fail3334:
    goto rx1187_fail3326
  rxcap1189_done3333:
    repr_bind_attr_int rx1187_cur, rx1187_curclass, "$!pos", rx1187_pos
    store_lex unicode:"$\x{a2}", rx1187_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_398_1346968539.359' 
    capture_lex $P5002
    $P5003 = $P5002()
    rx1187_cur."!cursor_pass"(rx1187_pos, "term:sym<redo>", 'backtrack'=>1)
    .return (rx1187_cur)
  rx1187_restart3325:
    repr_get_attr_obj rx1187_cstack, rx1187_cur, rx1187_curclass, "$!cstack"
  rx1187_fail3326:
    unless rx1187_bstack, rx1187_done3324
    pop $I19, rx1187_bstack
    if_null rx1187_cstack, rx1187_cstack_done3329
    unless rx1187_cstack, rx1187_cstack_done3329
    dec $I19
    set $P11, rx1187_cstack[$I19]
  rx1187_cstack_done3329:
    pop rx1187_rep, rx1187_bstack
    pop rx1187_pos, rx1187_bstack
    pop $I19, rx1187_bstack
    lt rx1187_pos, -1, rx1187_done3324
    lt rx1187_pos, 0, rx1187_fail3326
    eq $I19, 0, rx1187_fail3326
    nqp_islist $I20, rx1187_cstack
    unless $I20, rx1187_jump3327
    elements $I18, rx1187_bstack
    le $I18, 0, rx1187_cut3328
    dec $I18
    set $I18, rx1187_bstack[$I18]
  rx1187_cut3328:
    assign rx1187_cstack, $I18
  rx1187_jump3327:
    jump $I19
  rx1187_done3324:
    rx1187_cur."!cursor_fail"()
    .return (rx1187_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_221_1346968539.359_caps" :subid("cuid_memo_377_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_221_1346968539.359_nfa" :subid("cuid_memo_378_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 114
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 101
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 100
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 111
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 0
    push $P5019, $P5020
    box $P5021, 0
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_398_1346968539.359") :anon :lex :outer("cuid_221_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1327

    box $P5001, 1
    store_dynamic_lex "$*CONTROL_USED", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "smartmatch" :subid("cuid_222_1346968539.359") :anon :lex :outer("cuid_223_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1329
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$t", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    set $P5002, _lex_param_1[0]
    unless_null $P5002, fallback3335
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5002, $P5003
  fallback3335:
    set $P101, $P5002
    set $P5004, _lex_param_1[1]
    unless_null $P5004, fallback3336
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5004, $P5005
  fallback3336:
    set _lex_param_1[0], $P5004
    set _lex_param_1[1], $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_243_1346968539.359") :anon :lex :outer("cuid_1_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1335
    .const 'Sub' $P5012 = 'cuid_225_1346968539.359' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_226_1346968539.359' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_228_1346968539.359' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_229_1346968539.359' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_232_1346968539.359' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_235_1346968539.359' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_237_1346968539.359' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_239_1346968539.359' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_240_1346968539.359' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_241_1346968539.359' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_242_1346968539.359' 
    capture_lex $P5012 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    .const 'Sub' $P5001 = 'cuid_225_1346968539.359' 
    capture_lex $P5001
    .const 'Sub' $P5002 = 'cuid_226_1346968539.359' 
    capture_lex $P5002
    .const 'Sub' $P5003 = 'cuid_228_1346968539.359' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_229_1346968539.359' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_232_1346968539.359' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_235_1346968539.359' 
    capture_lex $P5006
    .const 'Sub' $P5007 = 'cuid_237_1346968539.359' 
    capture_lex $P5007
    .const 'Sub' $P5008 = 'cuid_239_1346968539.359' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_240_1346968539.359' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_241_1346968539.359' 
    capture_lex $P5010
    .const 'Sub' $P5011 = 'cuid_242_1346968539.359' 
    capture_lex $P5011
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<:my>" :subid("cuid_225_1346968539.359") :anon :lex :outer("cuid_243_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1336
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_224_1346968539.359' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1190_tgt
    .local int rx1190_pos
    .local int rx1190_off
    .local int rx1190_eos
    .local int rx1190_rep
    .local pmc rx1190_cur
    .local pmc rx1190_curclass
    .local pmc rx1190_bstack
    .local pmc rx1190_cstack
    (rx1190_cur, rx1190_tgt, rx1190_pos, rx1190_curclass, rx1190_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1190_cur
    length rx1190_eos, rx1190_tgt
    eq $I19, 1, rx1190_restart3339
    gt rx1190_pos, rx1190_eos, rx1190_fail3340
    repr_get_attr_int $I11, self, rx1190_curclass, "$!from"
    ne $I11, -1, rxscan1191_done3346
    goto rxscan1191_scan3345
  rxscan1191_loop3344:
    inc rx1190_pos
    gt rx1190_pos, rx1190_eos, rx1190_fail3340
    repr_bind_attr_int rx1190_cur, rx1190_curclass, "$!from", rx1190_pos
  rxscan1191_scan3345:
    nqp_rxmark rx1190_bstack, rxscan1191_loop3344, rx1190_pos, 0
  rxscan1191_done3346:
    add $I11, rx1190_pos, 1
    gt $I11, rx1190_eos, rx1190_fail3340
    substr $S10, rx1190_tgt, rx1190_pos, 1
    ne $S10, ucs4:":", rx1190_fail3340
    add rx1190_pos, 1
    .const 'Sub' $P5001 = 'cuid_224_1346968539.359' 
    capture_lex $P5001
    repr_bind_attr_int rx1190_cur, rx1190_curclass, "$!pos", rx1190_pos
    $P11 = rx1190_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1190_curclass, "$!pos"
    lt $I11, 0, rx1190_fail3340
    repr_bind_attr_int rx1190_cur, rx1190_curclass, "$!pos", rx1190_pos
    $P11 = rx1190_cur."LANG"("MAIN", "statement")
    repr_get_attr_int $I11, $P11, rx1190_curclass, "$!pos"
    lt $I11, 0, rx1190_fail3340
    nqp_rxmark rx1190_bstack, rxsubrule1194_pass3357, -1, 0
  rxsubrule1194_pass3357:
    rx1190_cstack = rx1190_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx1190_pos, $P11, rx1190_curclass, "$!pos"
    repr_bind_attr_int rx1190_cur, rx1190_curclass, "$!pos", rx1190_pos
    $P11 = rx1190_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1190_curclass, "$!pos"
    lt $I11, 0, rx1190_fail3340
    repr_get_attr_int rx1190_pos, $P11, rx1190_curclass, "$!pos"
    add $I11, rx1190_pos, 1
    gt $I11, rx1190_eos, rx1190_fail3340
    substr $S10, rx1190_tgt, rx1190_pos, 1
    ne $S10, ucs4:";", rx1190_fail3340
    add rx1190_pos, 1
    rx1190_cur."!cursor_pass"(rx1190_pos, "metachar:sym<:my>", 'backtrack'=>1)
    .return (rx1190_cur)
  rx1190_restart3339:
    repr_get_attr_obj rx1190_cstack, rx1190_cur, rx1190_curclass, "$!cstack"
  rx1190_fail3340:
    unless rx1190_bstack, rx1190_done3338
    pop $I19, rx1190_bstack
    if_null rx1190_cstack, rx1190_cstack_done3343
    unless rx1190_cstack, rx1190_cstack_done3343
    dec $I19
    set $P11, rx1190_cstack[$I19]
  rx1190_cstack_done3343:
    pop rx1190_rep, rx1190_bstack
    pop rx1190_pos, rx1190_bstack
    pop $I19, rx1190_bstack
    lt rx1190_pos, -1, rx1190_done3338
    lt rx1190_pos, 0, rx1190_fail3340
    eq $I19, 0, rx1190_fail3340
    nqp_islist $I20, rx1190_cstack
    unless $I20, rx1190_jump3341
    elements $I18, rx1190_bstack
    le $I18, 0, rx1190_cut3342
    dec $I18
    set $I18, rx1190_bstack[$I18]
  rx1190_cut3342:
    assign rx1190_cstack, $I18
  rx1190_jump3341:
    jump $I19
  rx1190_done3338:
    rx1190_cur."!cursor_fail"()
    .return (rx1190_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_225_1346968539.359_caps" :subid("cuid_memo_379_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["statement"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_225_1346968539.359_nfa" :subid("cuid_memo_380_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 58
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 109
    push $P5007, $P5009
    box $P5010, 4
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 0
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 121
    push $P5015, $P5017
    box $P5018, 3
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_224_1346968539.359") :anon :lex :outer("cuid_225_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1192_tgt
    .local int rx1192_pos
    .local int rx1192_off
    .local int rx1192_eos
    .local int rx1192_rep
    .local pmc rx1192_cur
    .local pmc rx1192_curclass
    .local pmc rx1192_bstack
    .local pmc rx1192_cstack
    (rx1192_cur, rx1192_tgt, rx1192_pos, rx1192_curclass, rx1192_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1192_cur
    length rx1192_eos, rx1192_tgt
    eq $I19, 1, rx1192_restart3349
    gt rx1192_pos, rx1192_eos, rx1192_fail3350
    repr_get_attr_int $I11, self, rx1192_curclass, "$!from"
    ne $I11, -1, rxscan1193_done3356
    goto rxscan1193_scan3355
  rxscan1193_loop3354:
    inc rx1192_pos
    gt rx1192_pos, rx1192_eos, rx1192_fail3350
    repr_bind_attr_int rx1192_cur, rx1192_curclass, "$!from", rx1192_pos
  rxscan1193_scan3355:
    nqp_rxmark rx1192_bstack, rxscan1193_loop3354, rx1192_pos, 0
  rxscan1193_done3356:
    add $I11, rx1192_pos, 2
    gt $I11, rx1192_eos, rx1192_fail3350
    substr $S10, rx1192_tgt, rx1192_pos, 2
    ne $S10, ucs4:"my", rx1192_fail3350
    add rx1192_pos, 2
    rx1192_cur."!cursor_pass"(rx1192_pos, 'backtrack'=>1)
    .return (rx1192_cur)
  rx1192_restart3349:
    repr_get_attr_obj rx1192_cstack, rx1192_cur, rx1192_curclass, "$!cstack"
  rx1192_fail3350:
    unless rx1192_bstack, rx1192_done3348
    pop $I19, rx1192_bstack
    if_null rx1192_cstack, rx1192_cstack_done3353
    unless rx1192_cstack, rx1192_cstack_done3353
    dec $I19
    set $P11, rx1192_cstack[$I19]
  rx1192_cstack_done3353:
    pop rx1192_rep, rx1192_bstack
    pop rx1192_pos, rx1192_bstack
    pop $I19, rx1192_bstack
    lt rx1192_pos, -1, rx1192_done3348
    lt rx1192_pos, 0, rx1192_fail3350
    eq $I19, 0, rx1192_fail3350
    nqp_islist $I20, rx1192_cstack
    unless $I20, rx1192_jump3351
    elements $I18, rx1192_bstack
    le $I18, 0, rx1192_cut3352
    dec $I18
    set $I18, rx1192_bstack[$I18]
  rx1192_cut3352:
    assign rx1192_cstack, $I18
  rx1192_jump3351:
    jump $I19
  rx1192_done3348:
    rx1192_cur."!cursor_fail"()
    .return (rx1192_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_224_1346968539.359_caps" :subid("cuid_memo_381_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_224_1346968539.359_nfa" :subid("cuid_memo_382_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 109
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 121
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<{ }>" :subid("cuid_226_1346968539.359") :anon :lex :outer("cuid_243_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1340
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1196_tgt
    .local int rx1196_pos
    .local int rx1196_off
    .local int rx1196_eos
    .local int rx1196_rep
    .local pmc rx1196_cur
    .local pmc rx1196_curclass
    .local pmc rx1196_bstack
    .local pmc rx1196_cstack
    (rx1196_cur, rx1196_tgt, rx1196_pos, rx1196_curclass, rx1196_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1196_cur
    length rx1196_eos, rx1196_tgt
    eq $I19, 1, rx1196_restart3361
    gt rx1196_pos, rx1196_eos, rx1196_fail3362
    repr_get_attr_int $I11, self, rx1196_curclass, "$!from"
    ne $I11, -1, rxscan1197_done3368
    goto rxscan1197_scan3367
  rxscan1197_loop3366:
    inc rx1196_pos
    gt rx1196_pos, rx1196_eos, rx1196_fail3362
    repr_bind_attr_int rx1196_cur, rx1196_curclass, "$!from", rx1196_pos
  rxscan1197_scan3367:
    nqp_rxmark rx1196_bstack, rxscan1197_loop3366, rx1196_pos, 0
  rxscan1197_done3368:
    ge rx1196_pos, rx1196_eos, rx1196_fail3362
    substr $S11, rx1196_tgt, rx1196_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx1196_fail3362
    repr_bind_attr_int rx1196_cur, rx1196_curclass, "$!pos", rx1196_pos
    $P11 = rx1196_cur."codeblock"()
    repr_get_attr_int $I11, $P11, rx1196_curclass, "$!pos"
    lt $I11, 0, rx1196_fail3362
    nqp_rxmark rx1196_bstack, rxsubrule1198_pass3369, -1, 0
  rxsubrule1198_pass3369:
    rx1196_cstack = rx1196_cur."!cursor_capture"($P11, "codeblock")
    repr_get_attr_int rx1196_pos, $P11, rx1196_curclass, "$!pos"
    rx1196_cur."!cursor_pass"(rx1196_pos, "metachar:sym<{ }>", 'backtrack'=>1)
    .return (rx1196_cur)
  rx1196_restart3361:
    repr_get_attr_obj rx1196_cstack, rx1196_cur, rx1196_curclass, "$!cstack"
  rx1196_fail3362:
    unless rx1196_bstack, rx1196_done3360
    pop $I19, rx1196_bstack
    if_null rx1196_cstack, rx1196_cstack_done3365
    unless rx1196_cstack, rx1196_cstack_done3365
    dec $I19
    set $P11, rx1196_cstack[$I19]
  rx1196_cstack_done3365:
    pop rx1196_rep, rx1196_bstack
    pop rx1196_pos, rx1196_bstack
    pop $I19, rx1196_bstack
    lt rx1196_pos, -1, rx1196_done3360
    lt rx1196_pos, 0, rx1196_fail3362
    eq $I19, 0, rx1196_fail3362
    nqp_islist $I20, rx1196_cstack
    unless $I20, rx1196_jump3363
    elements $I18, rx1196_bstack
    le $I18, 0, rx1196_cut3364
    dec $I18
    set $I18, rx1196_bstack[$I18]
  rx1196_cut3364:
    assign rx1196_cstack, $I18
  rx1196_jump3363:
    jump $I19
  rx1196_done3360:
    rx1196_cur."!cursor_fail"()
    .return (rx1196_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_226_1346968539.359_caps" :subid("cuid_memo_383_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["codeblock"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_226_1346968539.359_nfa" :subid("cuid_memo_384_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "{"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<nqpvar>" :subid("cuid_228_1346968539.359") :anon :lex :outer("cuid_243_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1344
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_227_1346968539.359' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1199_tgt
    .local int rx1199_pos
    .local int rx1199_off
    .local int rx1199_eos
    .local int rx1199_rep
    .local pmc rx1199_cur
    .local pmc rx1199_curclass
    .local pmc rx1199_bstack
    .local pmc rx1199_cstack
    (rx1199_cur, rx1199_tgt, rx1199_pos, rx1199_curclass, rx1199_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1199_cur
    length rx1199_eos, rx1199_tgt
    eq $I19, 1, rx1199_restart3372
    gt rx1199_pos, rx1199_eos, rx1199_fail3373
    repr_get_attr_int $I11, self, rx1199_curclass, "$!from"
    ne $I11, -1, rxscan1200_done3379
    goto rxscan1200_scan3378
  rxscan1200_loop3377:
    inc rx1199_pos
    gt rx1199_pos, rx1199_eos, rx1199_fail3373
    repr_bind_attr_int rx1199_cur, rx1199_curclass, "$!from", rx1199_pos
  rxscan1200_scan3378:
    nqp_rxmark rx1199_bstack, rxscan1200_loop3377, rx1199_pos, 0
  rxscan1200_done3379:
    .const 'Sub' $P5001 = 'cuid_227_1346968539.359' 
    capture_lex $P5001
    repr_bind_attr_int rx1199_cur, rx1199_curclass, "$!pos", rx1199_pos
    $P11 = rx1199_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1199_curclass, "$!pos"
    lt $I11, 0, rx1199_fail3373
    repr_bind_attr_int rx1199_cur, rx1199_curclass, "$!pos", rx1199_pos
    $P11 = rx1199_cur."LANG"("MAIN", "variable")
    repr_get_attr_int $I11, $P11, rx1199_curclass, "$!pos"
    lt $I11, 0, rx1199_fail3373
    nqp_rxmark rx1199_bstack, rxsubrule1204_pass3393, -1, 0
  rxsubrule1204_pass3393:
    rx1199_cstack = rx1199_cur."!cursor_capture"($P11, "var")
    repr_get_attr_int rx1199_pos, $P11, rx1199_curclass, "$!pos"
    rx1199_cur."!cursor_pass"(rx1199_pos, "metachar:sym<nqpvar>", 'backtrack'=>1)
    .return (rx1199_cur)
  rx1199_restart3372:
    repr_get_attr_obj rx1199_cstack, rx1199_cur, rx1199_curclass, "$!cstack"
  rx1199_fail3373:
    unless rx1199_bstack, rx1199_done3371
    pop $I19, rx1199_bstack
    if_null rx1199_cstack, rx1199_cstack_done3376
    unless rx1199_cstack, rx1199_cstack_done3376
    dec $I19
    set $P11, rx1199_cstack[$I19]
  rx1199_cstack_done3376:
    pop rx1199_rep, rx1199_bstack
    pop rx1199_pos, rx1199_bstack
    pop $I19, rx1199_bstack
    lt rx1199_pos, -1, rx1199_done3371
    lt rx1199_pos, 0, rx1199_fail3373
    eq $I19, 0, rx1199_fail3373
    nqp_islist $I20, rx1199_cstack
    unless $I20, rx1199_jump3374
    elements $I18, rx1199_bstack
    le $I18, 0, rx1199_cut3375
    dec $I18
    set $I18, rx1199_bstack[$I18]
  rx1199_cut3375:
    assign rx1199_cstack, $I18
  rx1199_jump3374:
    jump $I19
  rx1199_done3371:
    rx1199_cur."!cursor_fail"()
    .return (rx1199_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_228_1346968539.359_caps" :subid("cuid_memo_385_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["var"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_228_1346968539.359_nfa" :subid("cuid_memo_386_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "$@&"
    push $P5003, $P5005
    box $P5006, 3
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 5
    push $P5011, $P5012
    box $P5013, 8192
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    box $P5015, 4
    push $P5011, $P5015
    box $P5016, 8192
    push $P5011, $P5016
    box $P5017, 2
    push $P5011, $P5017
    push $P5001, $P5011
    new $P5018, 'ResizablePMCArray'
    box $P5019, 4
    push $P5018, $P5019
    box $P5020, 8192
    push $P5018, $P5020
    box $P5021, 2
    push $P5018, $P5021
    push $P5001, $P5018
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_227_1346968539.359") :anon :lex :outer("cuid_228_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1201_tgt
    .local int rx1201_pos
    .local int rx1201_off
    .local int rx1201_eos
    .local int rx1201_rep
    .local pmc rx1201_cur
    .local pmc rx1201_curclass
    .local pmc rx1201_bstack
    .local pmc rx1201_cstack
    (rx1201_cur, rx1201_tgt, rx1201_pos, rx1201_curclass, rx1201_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1201_cur
    length rx1201_eos, rx1201_tgt
    eq $I19, 1, rx1201_restart3382
    gt rx1201_pos, rx1201_eos, rx1201_fail3383
    repr_get_attr_int $I11, self, rx1201_curclass, "$!from"
    ne $I11, -1, rxscan1202_done3389
    goto rxscan1202_scan3388
  rxscan1202_loop3387:
    inc rx1201_pos
    gt rx1201_pos, rx1201_eos, rx1201_fail3383
    repr_bind_attr_int rx1201_cur, rx1201_curclass, "$!from", rx1201_pos
  rxscan1202_scan3388:
    nqp_rxmark rx1201_bstack, rxscan1202_loop3387, rx1201_pos, 0
  rxscan1202_done3389:
    ge rx1201_pos, rx1201_eos, rx1201_fail3383
    substr $S11, rx1201_tgt, rx1201_pos, 1
    index $I11, ucs4:"$@&", $S11
    lt $I11, 0, rx1201_fail3383
    inc rx1201_pos
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1203_03391
    nqp_push_label $P11, alt1203_13392
    nqp_rxmark rx1201_bstack, alt1203_end3390, -1, 0
    rx1201_cur."!alt"(rx1201_pos, "alt_nfa__39_1346968542.764", $P11)
    goto rx1201_fail3383
  alt1203_03391:
    ge rx1201_pos, rx1201_eos, rx1201_fail3383
    is_cclass $I11, .CCLASS_WORD, rx1201_tgt, rx1201_pos
    if $I11, rx1201_fail3383
    add rx1201_pos, 1
    ge rx1201_pos, rx1201_eos, rx1201_fail3383
    is_cclass $I11, .CCLASS_WORD, rx1201_tgt, rx1201_pos
    unless $I11, rx1201_fail3383
    add rx1201_pos, 1
    goto alt1203_end3390
  alt1203_13392:
    ge rx1201_pos, rx1201_eos, rx1201_fail3383
    is_cclass $I11, .CCLASS_WORD, rx1201_tgt, rx1201_pos
    unless $I11, rx1201_fail3383
    add rx1201_pos, 1
    goto alt1203_end3390
  alt1203_end3390:
    nqp_rxcommit rx1201_bstack, alt1203_end3390
    rx1201_cur."!cursor_pass"(rx1201_pos, 'backtrack'=>1)
    .return (rx1201_cur)
  rx1201_restart3382:
    repr_get_attr_obj rx1201_cstack, rx1201_cur, rx1201_curclass, "$!cstack"
  rx1201_fail3383:
    unless rx1201_bstack, rx1201_done3381
    pop $I19, rx1201_bstack
    if_null rx1201_cstack, rx1201_cstack_done3386
    unless rx1201_cstack, rx1201_cstack_done3386
    dec $I19
    set $P11, rx1201_cstack[$I19]
  rx1201_cstack_done3386:
    pop rx1201_rep, rx1201_bstack
    pop rx1201_pos, rx1201_bstack
    pop $I19, rx1201_bstack
    lt rx1201_pos, -1, rx1201_done3381
    lt rx1201_pos, 0, rx1201_fail3383
    eq $I19, 0, rx1201_fail3383
    nqp_islist $I20, rx1201_cstack
    unless $I20, rx1201_jump3384
    elements $I18, rx1201_bstack
    le $I18, 0, rx1201_cut3385
    dec $I18
    set $I18, rx1201_bstack[$I18]
  rx1201_cut3385:
    assign rx1201_cstack, $I18
  rx1201_jump3384:
    jump $I19
  rx1201_done3381:
    rx1201_cur."!cursor_fail"()
    .return (rx1201_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_227_1346968539.359_caps" :subid("cuid_memo_387_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_227_1346968539.359_nfa" :subid("cuid_memo_388_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "$@&"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 5
    push $P5007, $P5008
    box $P5009, 8192
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    box $P5011, 4
    push $P5007, $P5011
    box $P5012, 8192
    push $P5007, $P5012
    box $P5013, 0
    push $P5007, $P5013
    push $P5001, $P5007
    new $P5014, 'ResizablePMCArray'
    box $P5015, 4
    push $P5014, $P5015
    box $P5016, 8192
    push $P5014, $P5016
    box $P5017, 0
    push $P5014, $P5017
    push $P5001, $P5014
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_227_1346968539.359_alt_nfa__39_1346968542.764" :subid("cuid_memo_389_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 5
    push $P5004, $P5005
    box $P5006, 8192
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 4
    push $P5008, $P5009
    box $P5010, 8192
    push $P5008, $P5010
    box $P5011, 0
    push $P5008, $P5011
    push $P5002, $P5008
    push $P5001, $P5002
    new $P5012, 'ResizablePMCArray'
    new $P5013, 'ResizablePMCArray'
    push $P5012, $P5013
    new $P5014, 'ResizablePMCArray'
    box $P5015, 4
    push $P5014, $P5015
    box $P5016, 8192
    push $P5014, $P5016
    box $P5017, 0
    push $P5014, $P5017
    push $P5012, $P5014
    push $P5001, $P5012
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<{ }>" :subid("cuid_229_1346968539.359") :anon :lex :outer("cuid_243_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1348
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1205_tgt
    .local int rx1205_pos
    .local int rx1205_off
    .local int rx1205_eos
    .local int rx1205_rep
    .local pmc rx1205_cur
    .local pmc rx1205_curclass
    .local pmc rx1205_bstack
    .local pmc rx1205_cstack
    (rx1205_cur, rx1205_tgt, rx1205_pos, rx1205_curclass, rx1205_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1205_cur
    length rx1205_eos, rx1205_tgt
    eq $I19, 1, rx1205_restart3396
    gt rx1205_pos, rx1205_eos, rx1205_fail3397
    repr_get_attr_int $I11, self, rx1205_curclass, "$!from"
    ne $I11, -1, rxscan1206_done3403
    goto rxscan1206_scan3402
  rxscan1206_loop3401:
    inc rx1205_pos
    gt rx1205_pos, rx1205_eos, rx1205_fail3397
    repr_bind_attr_int rx1205_cur, rx1205_curclass, "$!from", rx1205_pos
  rxscan1206_scan3402:
    nqp_rxmark rx1205_bstack, rxscan1206_loop3401, rx1205_pos, 0
  rxscan1206_done3403:
    ge rx1205_pos, rx1205_eos, rx1205_fail3397
    substr $S11, rx1205_tgt, rx1205_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx1205_fail3397
    repr_bind_attr_int rx1205_cur, rx1205_curclass, "$!pos", rx1205_pos
    $P11 = rx1205_cur."codeblock"()
    repr_get_attr_int $I11, $P11, rx1205_curclass, "$!pos"
    lt $I11, 0, rx1205_fail3397
    nqp_rxmark rx1205_bstack, rxsubrule1207_pass3404, -1, 0
  rxsubrule1207_pass3404:
    rx1205_cstack = rx1205_cur."!cursor_capture"($P11, "codeblock")
    repr_get_attr_int rx1205_pos, $P11, rx1205_curclass, "$!pos"
    rx1205_cur."!cursor_pass"(rx1205_pos, "assertion:sym<{ }>", 'backtrack'=>1)
    .return (rx1205_cur)
  rx1205_restart3396:
    repr_get_attr_obj rx1205_cstack, rx1205_cur, rx1205_curclass, "$!cstack"
  rx1205_fail3397:
    unless rx1205_bstack, rx1205_done3395
    pop $I19, rx1205_bstack
    if_null rx1205_cstack, rx1205_cstack_done3400
    unless rx1205_cstack, rx1205_cstack_done3400
    dec $I19
    set $P11, rx1205_cstack[$I19]
  rx1205_cstack_done3400:
    pop rx1205_rep, rx1205_bstack
    pop rx1205_pos, rx1205_bstack
    pop $I19, rx1205_bstack
    lt rx1205_pos, -1, rx1205_done3395
    lt rx1205_pos, 0, rx1205_fail3397
    eq $I19, 0, rx1205_fail3397
    nqp_islist $I20, rx1205_cstack
    unless $I20, rx1205_jump3398
    elements $I18, rx1205_bstack
    le $I18, 0, rx1205_cut3399
    dec $I18
    set $I18, rx1205_bstack[$I18]
  rx1205_cut3399:
    assign rx1205_cstack, $I18
  rx1205_jump3398:
    jump $I19
  rx1205_done3395:
    rx1205_cur."!cursor_fail"()
    .return (rx1205_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_229_1346968539.359_caps" :subid("cuid_memo_390_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["codeblock"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_229_1346968539.359_nfa" :subid("cuid_memo_391_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "{"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?>" :subid("cuid_232_1346968539.359") :anon :lex :outer("cuid_243_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1352
    .param pmc _lex_param_0 
    .const 'Sub' $P5003 = 'cuid_230_1346968539.359' 
    capture_lex $P5003 
    .const 'Sub' $P5003 = 'cuid_231_1346968539.359' 
    capture_lex $P5003 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1208_tgt
    .local int rx1208_pos
    .local int rx1208_off
    .local int rx1208_eos
    .local int rx1208_rep
    .local pmc rx1208_cur
    .local pmc rx1208_curclass
    .local pmc rx1208_bstack
    .local pmc rx1208_cstack
    (rx1208_cur, rx1208_tgt, rx1208_pos, rx1208_curclass, rx1208_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1208_cur
    length rx1208_eos, rx1208_tgt
    eq $I19, 1, rx1208_restart3407
    gt rx1208_pos, rx1208_eos, rx1208_fail3408
    repr_get_attr_int $I11, self, rx1208_curclass, "$!from"
    ne $I11, -1, rxscan1209_done3414
    goto rxscan1209_scan3413
  rxscan1209_loop3412:
    inc rx1208_pos
    gt rx1208_pos, rx1208_eos, rx1208_fail3408
    repr_bind_attr_int rx1208_cur, rx1208_curclass, "$!from", rx1208_pos
  rxscan1209_scan3413:
    nqp_rxmark rx1208_bstack, rxscan1209_loop3412, rx1208_pos, 0
  rxscan1209_done3414:
    add $I11, rx1208_pos, 1
    gt $I11, rx1208_eos, rx1208_fail3408
    substr $S10, rx1208_tgt, rx1208_pos, 1
    ne $S10, ucs4:"?", rx1208_fail3408
    add rx1208_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1210_03416
    nqp_push_label $P11, alt1210_13427
    nqp_rxmark rx1208_bstack, alt1210_end3415, -1, 0
    rx1208_cur."!alt"(rx1208_pos, "alt_nfa__40_1346968542.791", $P11)
    goto rx1208_fail3408
  alt1210_03416:
    .const 'Sub' $P5001 = 'cuid_230_1346968539.359' 
    capture_lex $P5001
    repr_bind_attr_int rx1208_cur, rx1208_curclass, "$!pos", rx1208_pos
    $P11 = rx1208_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1208_curclass, "$!pos"
    lt $I11, 0, rx1208_fail3408
    goto alt1210_end3415
  alt1210_13427:
    .const 'Sub' $P5002 = 'cuid_231_1346968539.359' 
    capture_lex $P5002
    repr_bind_attr_int rx1208_cur, rx1208_curclass, "$!pos", rx1208_pos
    $P11 = rx1208_cur."before"($P5002)
    repr_get_attr_int $I11, $P11, rx1208_curclass, "$!pos"
    ge $I11, 0, rx1208_fail3408
    repr_bind_attr_int rx1208_cur, rx1208_curclass, "$!pos", rx1208_pos
    $P11 = rx1208_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx1208_curclass, "$!pos"
    lt $I11, 0, rx1208_fail3408
    nqp_rxmark rx1208_bstack, rxsubrule1215_pass3438, -1, 0
  rxsubrule1215_pass3438:
    rx1208_cstack = rx1208_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx1208_pos, $P11, rx1208_curclass, "$!pos"
    goto alt1210_end3415
  alt1210_end3415:
    nqp_rxcommit rx1208_bstack, alt1210_end3415
    rx1208_cur."!cursor_pass"(rx1208_pos, "assertion:sym<?>", 'backtrack'=>1)
    .return (rx1208_cur)
  rx1208_restart3407:
    repr_get_attr_obj rx1208_cstack, rx1208_cur, rx1208_curclass, "$!cstack"
  rx1208_fail3408:
    unless rx1208_bstack, rx1208_done3406
    pop $I19, rx1208_bstack
    if_null rx1208_cstack, rx1208_cstack_done3411
    unless rx1208_cstack, rx1208_cstack_done3411
    dec $I19
    set $P11, rx1208_cstack[$I19]
  rx1208_cstack_done3411:
    pop rx1208_rep, rx1208_bstack
    pop rx1208_pos, rx1208_bstack
    pop $I19, rx1208_bstack
    lt rx1208_pos, -1, rx1208_done3406
    lt rx1208_pos, 0, rx1208_fail3408
    eq $I19, 0, rx1208_fail3408
    nqp_islist $I20, rx1208_cstack
    unless $I20, rx1208_jump3409
    elements $I18, rx1208_bstack
    le $I18, 0, rx1208_cut3410
    dec $I18
    set $I18, rx1208_bstack[$I18]
  rx1208_cut3410:
    assign rx1208_cstack, $I18
  rx1208_jump3409:
    jump $I19
  rx1208_done3406:
    rx1208_cur."!cursor_fail"()
    .return (rx1208_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_232_1346968539.359_caps" :subid("cuid_memo_392_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["assertion"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_232_1346968539.359_nfa" :subid("cuid_memo_393_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 63
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 62
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    box $P5011, 0
    push $P5007, $P5011
    box $P5012, 0
    push $P5007, $P5012
    box $P5013, 0
    push $P5007, $P5013
    push $P5001, $P5007
    new $P5014, 'ResizablePMCArray'
    box $P5015, 0
    push $P5014, $P5015
    box $P5016, 0
    push $P5014, $P5016
    box $P5017, 0
    push $P5014, $P5017
    push $P5001, $P5014
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_232_1346968539.359_alt_nfa__40_1346968542.791" :subid("cuid_memo_394_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 62
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 0
    push $P5008, $P5009
    box $P5010, 0
    push $P5008, $P5010
    box $P5011, 0
    push $P5008, $P5011
    push $P5002, $P5008
    push $P5001, $P5002
    new $P5012, 'ResizablePMCArray'
    new $P5013, 'ResizablePMCArray'
    push $P5012, $P5013
    new $P5014, 'ResizablePMCArray'
    box $P5015, 0
    push $P5014, $P5015
    box $P5016, 0
    push $P5014, $P5016
    box $P5017, 0
    push $P5014, $P5017
    box $P5018, 0
    push $P5014, $P5018
    box $P5019, 0
    push $P5014, $P5019
    box $P5020, 0
    push $P5014, $P5020
    push $P5012, $P5014
    push $P5001, $P5012
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_230_1346968539.359") :anon :lex :outer("cuid_232_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1211_tgt
    .local int rx1211_pos
    .local int rx1211_off
    .local int rx1211_eos
    .local int rx1211_rep
    .local pmc rx1211_cur
    .local pmc rx1211_curclass
    .local pmc rx1211_bstack
    .local pmc rx1211_cstack
    (rx1211_cur, rx1211_tgt, rx1211_pos, rx1211_curclass, rx1211_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1211_cur
    length rx1211_eos, rx1211_tgt
    eq $I19, 1, rx1211_restart3419
    gt rx1211_pos, rx1211_eos, rx1211_fail3420
    repr_get_attr_int $I11, self, rx1211_curclass, "$!from"
    ne $I11, -1, rxscan1212_done3426
    goto rxscan1212_scan3425
  rxscan1212_loop3424:
    inc rx1211_pos
    gt rx1211_pos, rx1211_eos, rx1211_fail3420
    repr_bind_attr_int rx1211_cur, rx1211_curclass, "$!from", rx1211_pos
  rxscan1212_scan3425:
    nqp_rxmark rx1211_bstack, rxscan1212_loop3424, rx1211_pos, 0
  rxscan1212_done3426:
    add $I11, rx1211_pos, 1
    gt $I11, rx1211_eos, rx1211_fail3420
    substr $S10, rx1211_tgt, rx1211_pos, 1
    ne $S10, ucs4:">", rx1211_fail3420
    add rx1211_pos, 1
    rx1211_cur."!cursor_pass"(rx1211_pos, 'backtrack'=>1)
    .return (rx1211_cur)
  rx1211_restart3419:
    repr_get_attr_obj rx1211_cstack, rx1211_cur, rx1211_curclass, "$!cstack"
  rx1211_fail3420:
    unless rx1211_bstack, rx1211_done3418
    pop $I19, rx1211_bstack
    if_null rx1211_cstack, rx1211_cstack_done3423
    unless rx1211_cstack, rx1211_cstack_done3423
    dec $I19
    set $P11, rx1211_cstack[$I19]
  rx1211_cstack_done3423:
    pop rx1211_rep, rx1211_bstack
    pop rx1211_pos, rx1211_bstack
    pop $I19, rx1211_bstack
    lt rx1211_pos, -1, rx1211_done3418
    lt rx1211_pos, 0, rx1211_fail3420
    eq $I19, 0, rx1211_fail3420
    nqp_islist $I20, rx1211_cstack
    unless $I20, rx1211_jump3421
    elements $I18, rx1211_bstack
    le $I18, 0, rx1211_cut3422
    dec $I18
    set $I18, rx1211_bstack[$I18]
  rx1211_cut3422:
    assign rx1211_cstack, $I18
  rx1211_jump3421:
    jump $I19
  rx1211_done3418:
    rx1211_cur."!cursor_fail"()
    .return (rx1211_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_230_1346968539.359_caps" :subid("cuid_memo_395_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_230_1346968539.359_nfa" :subid("cuid_memo_396_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 62
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_231_1346968539.359") :anon :lex :outer("cuid_232_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1213_tgt
    .local int rx1213_pos
    .local int rx1213_off
    .local int rx1213_eos
    .local int rx1213_rep
    .local pmc rx1213_cur
    .local pmc rx1213_curclass
    .local pmc rx1213_bstack
    .local pmc rx1213_cstack
    (rx1213_cur, rx1213_tgt, rx1213_pos, rx1213_curclass, rx1213_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1213_cur
    length rx1213_eos, rx1213_tgt
    eq $I19, 1, rx1213_restart3430
    gt rx1213_pos, rx1213_eos, rx1213_fail3431
    repr_get_attr_int $I11, self, rx1213_curclass, "$!from"
    ne $I11, -1, rxscan1214_done3437
    goto rxscan1214_scan3436
  rxscan1214_loop3435:
    inc rx1213_pos
    gt rx1213_pos, rx1213_eos, rx1213_fail3431
    repr_bind_attr_int rx1213_cur, rx1213_curclass, "$!from", rx1213_pos
  rxscan1214_scan3436:
    nqp_rxmark rx1213_bstack, rxscan1214_loop3435, rx1213_pos, 0
  rxscan1214_done3437:
    add $I11, rx1213_pos, 1
    gt $I11, rx1213_eos, rx1213_fail3431
    substr $S10, rx1213_tgt, rx1213_pos, 1
    ne $S10, ucs4:"{", rx1213_fail3431
    add rx1213_pos, 1
    rx1213_cur."!cursor_pass"(rx1213_pos, 'backtrack'=>1)
    .return (rx1213_cur)
  rx1213_restart3430:
    repr_get_attr_obj rx1213_cstack, rx1213_cur, rx1213_curclass, "$!cstack"
  rx1213_fail3431:
    unless rx1213_bstack, rx1213_done3429
    pop $I19, rx1213_bstack
    if_null rx1213_cstack, rx1213_cstack_done3434
    unless rx1213_cstack, rx1213_cstack_done3434
    dec $I19
    set $P11, rx1213_cstack[$I19]
  rx1213_cstack_done3434:
    pop rx1213_rep, rx1213_bstack
    pop rx1213_pos, rx1213_bstack
    pop $I19, rx1213_bstack
    lt rx1213_pos, -1, rx1213_done3429
    lt rx1213_pos, 0, rx1213_fail3431
    eq $I19, 0, rx1213_fail3431
    nqp_islist $I20, rx1213_cstack
    unless $I20, rx1213_jump3432
    elements $I18, rx1213_bstack
    le $I18, 0, rx1213_cut3433
    dec $I18
    set $I18, rx1213_bstack[$I18]
  rx1213_cut3433:
    assign rx1213_cstack, $I18
  rx1213_jump3432:
    jump $I19
  rx1213_done3429:
    rx1213_cur."!cursor_fail"()
    .return (rx1213_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_231_1346968539.359_caps" :subid("cuid_memo_397_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_231_1346968539.359_nfa" :subid("cuid_memo_398_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 123
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<!>" :subid("cuid_235_1346968539.359") :anon :lex :outer("cuid_243_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1353
    .param pmc _lex_param_0 
    .const 'Sub' $P5003 = 'cuid_233_1346968539.359' 
    capture_lex $P5003 
    .const 'Sub' $P5003 = 'cuid_234_1346968539.359' 
    capture_lex $P5003 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1216_tgt
    .local int rx1216_pos
    .local int rx1216_off
    .local int rx1216_eos
    .local int rx1216_rep
    .local pmc rx1216_cur
    .local pmc rx1216_curclass
    .local pmc rx1216_bstack
    .local pmc rx1216_cstack
    (rx1216_cur, rx1216_tgt, rx1216_pos, rx1216_curclass, rx1216_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1216_cur
    length rx1216_eos, rx1216_tgt
    eq $I19, 1, rx1216_restart3441
    gt rx1216_pos, rx1216_eos, rx1216_fail3442
    repr_get_attr_int $I11, self, rx1216_curclass, "$!from"
    ne $I11, -1, rxscan1217_done3448
    goto rxscan1217_scan3447
  rxscan1217_loop3446:
    inc rx1216_pos
    gt rx1216_pos, rx1216_eos, rx1216_fail3442
    repr_bind_attr_int rx1216_cur, rx1216_curclass, "$!from", rx1216_pos
  rxscan1217_scan3447:
    nqp_rxmark rx1216_bstack, rxscan1217_loop3446, rx1216_pos, 0
  rxscan1217_done3448:
    add $I11, rx1216_pos, 1
    gt $I11, rx1216_eos, rx1216_fail3442
    substr $S10, rx1216_tgt, rx1216_pos, 1
    ne $S10, ucs4:"!", rx1216_fail3442
    add rx1216_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1218_03450
    nqp_push_label $P11, alt1218_13461
    nqp_rxmark rx1216_bstack, alt1218_end3449, -1, 0
    rx1216_cur."!alt"(rx1216_pos, "alt_nfa__41_1346968542.806", $P11)
    goto rx1216_fail3442
  alt1218_03450:
    .const 'Sub' $P5001 = 'cuid_233_1346968539.359' 
    capture_lex $P5001
    repr_bind_attr_int rx1216_cur, rx1216_curclass, "$!pos", rx1216_pos
    $P11 = rx1216_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1216_curclass, "$!pos"
    lt $I11, 0, rx1216_fail3442
    goto alt1218_end3449
  alt1218_13461:
    .const 'Sub' $P5002 = 'cuid_234_1346968539.359' 
    capture_lex $P5002
    repr_bind_attr_int rx1216_cur, rx1216_curclass, "$!pos", rx1216_pos
    $P11 = rx1216_cur."before"($P5002)
    repr_get_attr_int $I11, $P11, rx1216_curclass, "$!pos"
    ge $I11, 0, rx1216_fail3442
    repr_bind_attr_int rx1216_cur, rx1216_curclass, "$!pos", rx1216_pos
    $P11 = rx1216_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx1216_curclass, "$!pos"
    lt $I11, 0, rx1216_fail3442
    nqp_rxmark rx1216_bstack, rxsubrule1223_pass3472, -1, 0
  rxsubrule1223_pass3472:
    rx1216_cstack = rx1216_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx1216_pos, $P11, rx1216_curclass, "$!pos"
    goto alt1218_end3449
  alt1218_end3449:
    nqp_rxcommit rx1216_bstack, alt1218_end3449
    rx1216_cur."!cursor_pass"(rx1216_pos, "assertion:sym<!>", 'backtrack'=>1)
    .return (rx1216_cur)
  rx1216_restart3441:
    repr_get_attr_obj rx1216_cstack, rx1216_cur, rx1216_curclass, "$!cstack"
  rx1216_fail3442:
    unless rx1216_bstack, rx1216_done3440
    pop $I19, rx1216_bstack
    if_null rx1216_cstack, rx1216_cstack_done3445
    unless rx1216_cstack, rx1216_cstack_done3445
    dec $I19
    set $P11, rx1216_cstack[$I19]
  rx1216_cstack_done3445:
    pop rx1216_rep, rx1216_bstack
    pop rx1216_pos, rx1216_bstack
    pop $I19, rx1216_bstack
    lt rx1216_pos, -1, rx1216_done3440
    lt rx1216_pos, 0, rx1216_fail3442
    eq $I19, 0, rx1216_fail3442
    nqp_islist $I20, rx1216_cstack
    unless $I20, rx1216_jump3443
    elements $I18, rx1216_bstack
    le $I18, 0, rx1216_cut3444
    dec $I18
    set $I18, rx1216_bstack[$I18]
  rx1216_cut3444:
    assign rx1216_cstack, $I18
  rx1216_jump3443:
    jump $I19
  rx1216_done3440:
    rx1216_cur."!cursor_fail"()
    .return (rx1216_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_235_1346968539.359_caps" :subid("cuid_memo_399_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["assertion"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_235_1346968539.359_nfa" :subid("cuid_memo_400_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 33
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 62
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    box $P5011, 0
    push $P5007, $P5011
    box $P5012, 0
    push $P5007, $P5012
    box $P5013, 0
    push $P5007, $P5013
    push $P5001, $P5007
    new $P5014, 'ResizablePMCArray'
    box $P5015, 0
    push $P5014, $P5015
    box $P5016, 0
    push $P5014, $P5016
    box $P5017, 0
    push $P5014, $P5017
    push $P5001, $P5014
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_235_1346968539.359_alt_nfa__41_1346968542.806" :subid("cuid_memo_401_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 62
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 0
    push $P5008, $P5009
    box $P5010, 0
    push $P5008, $P5010
    box $P5011, 0
    push $P5008, $P5011
    push $P5002, $P5008
    push $P5001, $P5002
    new $P5012, 'ResizablePMCArray'
    new $P5013, 'ResizablePMCArray'
    push $P5012, $P5013
    new $P5014, 'ResizablePMCArray'
    box $P5015, 0
    push $P5014, $P5015
    box $P5016, 0
    push $P5014, $P5016
    box $P5017, 0
    push $P5014, $P5017
    box $P5018, 0
    push $P5014, $P5018
    box $P5019, 0
    push $P5014, $P5019
    box $P5020, 0
    push $P5014, $P5020
    push $P5012, $P5014
    push $P5001, $P5012
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_233_1346968539.359") :anon :lex :outer("cuid_235_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1219_tgt
    .local int rx1219_pos
    .local int rx1219_off
    .local int rx1219_eos
    .local int rx1219_rep
    .local pmc rx1219_cur
    .local pmc rx1219_curclass
    .local pmc rx1219_bstack
    .local pmc rx1219_cstack
    (rx1219_cur, rx1219_tgt, rx1219_pos, rx1219_curclass, rx1219_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1219_cur
    length rx1219_eos, rx1219_tgt
    eq $I19, 1, rx1219_restart3453
    gt rx1219_pos, rx1219_eos, rx1219_fail3454
    repr_get_attr_int $I11, self, rx1219_curclass, "$!from"
    ne $I11, -1, rxscan1220_done3460
    goto rxscan1220_scan3459
  rxscan1220_loop3458:
    inc rx1219_pos
    gt rx1219_pos, rx1219_eos, rx1219_fail3454
    repr_bind_attr_int rx1219_cur, rx1219_curclass, "$!from", rx1219_pos
  rxscan1220_scan3459:
    nqp_rxmark rx1219_bstack, rxscan1220_loop3458, rx1219_pos, 0
  rxscan1220_done3460:
    add $I11, rx1219_pos, 1
    gt $I11, rx1219_eos, rx1219_fail3454
    substr $S10, rx1219_tgt, rx1219_pos, 1
    ne $S10, ucs4:">", rx1219_fail3454
    add rx1219_pos, 1
    rx1219_cur."!cursor_pass"(rx1219_pos, 'backtrack'=>1)
    .return (rx1219_cur)
  rx1219_restart3453:
    repr_get_attr_obj rx1219_cstack, rx1219_cur, rx1219_curclass, "$!cstack"
  rx1219_fail3454:
    unless rx1219_bstack, rx1219_done3452
    pop $I19, rx1219_bstack
    if_null rx1219_cstack, rx1219_cstack_done3457
    unless rx1219_cstack, rx1219_cstack_done3457
    dec $I19
    set $P11, rx1219_cstack[$I19]
  rx1219_cstack_done3457:
    pop rx1219_rep, rx1219_bstack
    pop rx1219_pos, rx1219_bstack
    pop $I19, rx1219_bstack
    lt rx1219_pos, -1, rx1219_done3452
    lt rx1219_pos, 0, rx1219_fail3454
    eq $I19, 0, rx1219_fail3454
    nqp_islist $I20, rx1219_cstack
    unless $I20, rx1219_jump3455
    elements $I18, rx1219_bstack
    le $I18, 0, rx1219_cut3456
    dec $I18
    set $I18, rx1219_bstack[$I18]
  rx1219_cut3456:
    assign rx1219_cstack, $I18
  rx1219_jump3455:
    jump $I19
  rx1219_done3452:
    rx1219_cur."!cursor_fail"()
    .return (rx1219_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_233_1346968539.359_caps" :subid("cuid_memo_402_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_233_1346968539.359_nfa" :subid("cuid_memo_403_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 62
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_234_1346968539.359") :anon :lex :outer("cuid_235_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1221_tgt
    .local int rx1221_pos
    .local int rx1221_off
    .local int rx1221_eos
    .local int rx1221_rep
    .local pmc rx1221_cur
    .local pmc rx1221_curclass
    .local pmc rx1221_bstack
    .local pmc rx1221_cstack
    (rx1221_cur, rx1221_tgt, rx1221_pos, rx1221_curclass, rx1221_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1221_cur
    length rx1221_eos, rx1221_tgt
    eq $I19, 1, rx1221_restart3464
    gt rx1221_pos, rx1221_eos, rx1221_fail3465
    repr_get_attr_int $I11, self, rx1221_curclass, "$!from"
    ne $I11, -1, rxscan1222_done3471
    goto rxscan1222_scan3470
  rxscan1222_loop3469:
    inc rx1221_pos
    gt rx1221_pos, rx1221_eos, rx1221_fail3465
    repr_bind_attr_int rx1221_cur, rx1221_curclass, "$!from", rx1221_pos
  rxscan1222_scan3470:
    nqp_rxmark rx1221_bstack, rxscan1222_loop3469, rx1221_pos, 0
  rxscan1222_done3471:
    add $I11, rx1221_pos, 1
    gt $I11, rx1221_eos, rx1221_fail3465
    substr $S10, rx1221_tgt, rx1221_pos, 1
    ne $S10, ucs4:"{", rx1221_fail3465
    add rx1221_pos, 1
    rx1221_cur."!cursor_pass"(rx1221_pos, 'backtrack'=>1)
    .return (rx1221_cur)
  rx1221_restart3464:
    repr_get_attr_obj rx1221_cstack, rx1221_cur, rx1221_curclass, "$!cstack"
  rx1221_fail3465:
    unless rx1221_bstack, rx1221_done3463
    pop $I19, rx1221_bstack
    if_null rx1221_cstack, rx1221_cstack_done3468
    unless rx1221_cstack, rx1221_cstack_done3468
    dec $I19
    set $P11, rx1221_cstack[$I19]
  rx1221_cstack_done3468:
    pop rx1221_rep, rx1221_bstack
    pop rx1221_pos, rx1221_bstack
    pop $I19, rx1221_bstack
    lt rx1221_pos, -1, rx1221_done3463
    lt rx1221_pos, 0, rx1221_fail3465
    eq $I19, 0, rx1221_fail3465
    nqp_islist $I20, rx1221_cstack
    unless $I20, rx1221_jump3466
    elements $I18, rx1221_bstack
    le $I18, 0, rx1221_cut3467
    dec $I18
    set $I18, rx1221_bstack[$I18]
  rx1221_cut3467:
    assign rx1221_cstack, $I18
  rx1221_jump3466:
    jump $I19
  rx1221_done3463:
    rx1221_cur."!cursor_fail"()
    .return (rx1221_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_234_1346968539.359_caps" :subid("cuid_memo_404_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_234_1346968539.359_nfa" :subid("cuid_memo_405_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 123
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?{ }>" :subid("cuid_237_1346968539.359") :anon :lex :outer("cuid_243_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1355
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_236_1346968539.359' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1224_tgt
    .local int rx1224_pos
    .local int rx1224_off
    .local int rx1224_eos
    .local int rx1224_rep
    .local pmc rx1224_cur
    .local pmc rx1224_curclass
    .local pmc rx1224_bstack
    .local pmc rx1224_cstack
    (rx1224_cur, rx1224_tgt, rx1224_pos, rx1224_curclass, rx1224_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1224_cur
    length rx1224_eos, rx1224_tgt
    eq $I19, 1, rx1224_restart3475
    gt rx1224_pos, rx1224_eos, rx1224_fail3476
    repr_get_attr_int $I11, self, rx1224_curclass, "$!from"
    ne $I11, -1, rxscan1225_done3482
    goto rxscan1225_scan3481
  rxscan1225_loop3480:
    inc rx1224_pos
    gt rx1224_pos, rx1224_eos, rx1224_fail3476
    repr_bind_attr_int rx1224_cur, rx1224_curclass, "$!from", rx1224_pos
  rxscan1225_scan3481:
    nqp_rxmark rx1224_bstack, rxscan1225_loop3480, rx1224_pos, 0
  rxscan1225_done3482:
    nqp_rxmark rx1224_bstack, rxcap1226_fail3484, rx1224_pos, 0
    ge rx1224_pos, rx1224_eos, rx1224_fail3476
    substr $S11, rx1224_tgt, rx1224_pos, 1
    index $I11, ucs4:"?!", $S11
    lt $I11, 0, rx1224_fail3476
    inc rx1224_pos
    .const 'Sub' $P5001 = 'cuid_236_1346968539.359' 
    capture_lex $P5001
    repr_bind_attr_int rx1224_cur, rx1224_curclass, "$!pos", rx1224_pos
    $P11 = rx1224_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1224_curclass, "$!pos"
    lt $I11, 0, rx1224_fail3476
    nqp_rxpeek $I19, rx1224_bstack, rxcap1226_fail3484
    inc $I19
    set $I11, rx1224_bstack[$I19]
    $P11 = rx1224_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1224_pos)
    rx1224_cstack = rx1224_cur."!cursor_capture"($P11, "zw")
    goto rxcap1226_done3483
  rxcap1226_fail3484:
    goto rx1224_fail3476
  rxcap1226_done3483:
    repr_bind_attr_int rx1224_cur, rx1224_curclass, "$!pos", rx1224_pos
    $P11 = rx1224_cur."codeblock"()
    repr_get_attr_int $I11, $P11, rx1224_curclass, "$!pos"
    lt $I11, 0, rx1224_fail3476
    nqp_rxmark rx1224_bstack, rxsubrule1229_pass3495, -1, 0
  rxsubrule1229_pass3495:
    rx1224_cstack = rx1224_cur."!cursor_capture"($P11, "codeblock")
    repr_get_attr_int rx1224_pos, $P11, rx1224_curclass, "$!pos"
    rx1224_cur."!cursor_pass"(rx1224_pos, "assertion:sym<?{ }>", 'backtrack'=>1)
    .return (rx1224_cur)
  rx1224_restart3475:
    repr_get_attr_obj rx1224_cstack, rx1224_cur, rx1224_curclass, "$!cstack"
  rx1224_fail3476:
    unless rx1224_bstack, rx1224_done3474
    pop $I19, rx1224_bstack
    if_null rx1224_cstack, rx1224_cstack_done3479
    unless rx1224_cstack, rx1224_cstack_done3479
    dec $I19
    set $P11, rx1224_cstack[$I19]
  rx1224_cstack_done3479:
    pop rx1224_rep, rx1224_bstack
    pop rx1224_pos, rx1224_bstack
    pop $I19, rx1224_bstack
    lt rx1224_pos, -1, rx1224_done3474
    lt rx1224_pos, 0, rx1224_fail3476
    eq $I19, 0, rx1224_fail3476
    nqp_islist $I20, rx1224_cstack
    unless $I20, rx1224_jump3477
    elements $I18, rx1224_bstack
    le $I18, 0, rx1224_cut3478
    dec $I18
    set $I18, rx1224_bstack[$I18]
  rx1224_cut3478:
    assign rx1224_cstack, $I18
  rx1224_jump3477:
    jump $I19
  rx1224_done3474:
    rx1224_cur."!cursor_fail"()
    .return (rx1224_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_237_1346968539.359_caps" :subid("cuid_memo_406_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["zw"], $P5002
    box $P5003, 0
    set $P5001["codeblock"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_237_1346968539.359_nfa" :subid("cuid_memo_407_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "?!"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 123
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 0
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_236_1346968539.359") :anon :lex :outer("cuid_237_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1227_tgt
    .local int rx1227_pos
    .local int rx1227_off
    .local int rx1227_eos
    .local int rx1227_rep
    .local pmc rx1227_cur
    .local pmc rx1227_curclass
    .local pmc rx1227_bstack
    .local pmc rx1227_cstack
    (rx1227_cur, rx1227_tgt, rx1227_pos, rx1227_curclass, rx1227_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1227_cur
    length rx1227_eos, rx1227_tgt
    eq $I19, 1, rx1227_restart3487
    gt rx1227_pos, rx1227_eos, rx1227_fail3488
    repr_get_attr_int $I11, self, rx1227_curclass, "$!from"
    ne $I11, -1, rxscan1228_done3494
    goto rxscan1228_scan3493
  rxscan1228_loop3492:
    inc rx1227_pos
    gt rx1227_pos, rx1227_eos, rx1227_fail3488
    repr_bind_attr_int rx1227_cur, rx1227_curclass, "$!from", rx1227_pos
  rxscan1228_scan3493:
    nqp_rxmark rx1227_bstack, rxscan1228_loop3492, rx1227_pos, 0
  rxscan1228_done3494:
    add $I11, rx1227_pos, 1
    gt $I11, rx1227_eos, rx1227_fail3488
    substr $S10, rx1227_tgt, rx1227_pos, 1
    ne $S10, ucs4:"{", rx1227_fail3488
    add rx1227_pos, 1
    rx1227_cur."!cursor_pass"(rx1227_pos, 'backtrack'=>1)
    .return (rx1227_cur)
  rx1227_restart3487:
    repr_get_attr_obj rx1227_cstack, rx1227_cur, rx1227_curclass, "$!cstack"
  rx1227_fail3488:
    unless rx1227_bstack, rx1227_done3486
    pop $I19, rx1227_bstack
    if_null rx1227_cstack, rx1227_cstack_done3491
    unless rx1227_cstack, rx1227_cstack_done3491
    dec $I19
    set $P11, rx1227_cstack[$I19]
  rx1227_cstack_done3491:
    pop rx1227_rep, rx1227_bstack
    pop rx1227_pos, rx1227_bstack
    pop $I19, rx1227_bstack
    lt rx1227_pos, -1, rx1227_done3486
    lt rx1227_pos, 0, rx1227_fail3488
    eq $I19, 0, rx1227_fail3488
    nqp_islist $I20, rx1227_cstack
    unless $I20, rx1227_jump3489
    elements $I18, rx1227_bstack
    le $I18, 0, rx1227_cut3490
    dec $I18
    set $I18, rx1227_bstack[$I18]
  rx1227_cut3490:
    assign rx1227_cstack, $I18
  rx1227_jump3489:
    jump $I19
  rx1227_done3486:
    rx1227_cur."!cursor_fail"()
    .return (rx1227_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_236_1346968539.359_caps" :subid("cuid_memo_408_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_236_1346968539.359_nfa" :subid("cuid_memo_409_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 123
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<name>" :subid("cuid_239_1346968539.359") :anon :lex :outer("cuid_243_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1359
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_238_1346968539.359' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1230_tgt
    .local int rx1230_pos
    .local int rx1230_off
    .local int rx1230_eos
    .local int rx1230_rep
    .local pmc rx1230_cur
    .local pmc rx1230_curclass
    .local pmc rx1230_bstack
    .local pmc rx1230_cstack
    (rx1230_cur, rx1230_tgt, rx1230_pos, rx1230_curclass, rx1230_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1230_cur
    length rx1230_eos, rx1230_tgt
    eq $I19, 1, rx1230_restart3498
    gt rx1230_pos, rx1230_eos, rx1230_fail3499
    repr_get_attr_int $I11, self, rx1230_curclass, "$!from"
    ne $I11, -1, rxscan1231_done3505
    goto rxscan1231_scan3504
  rxscan1231_loop3503:
    inc rx1230_pos
    gt rx1230_pos, rx1230_eos, rx1230_fail3499
    repr_bind_attr_int rx1230_cur, rx1230_curclass, "$!from", rx1230_pos
  rxscan1231_scan3504:
    nqp_rxmark rx1230_bstack, rxscan1231_loop3503, rx1230_pos, 0
  rxscan1231_done3505:
    repr_bind_attr_int rx1230_cur, rx1230_curclass, "$!pos", rx1230_pos
    $P11 = rx1230_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx1230_curclass, "$!pos"
    lt $I11, 0, rx1230_fail3499
    nqp_rxmark rx1230_bstack, rxsubrule1232_pass3506, -1, 0
  rxsubrule1232_pass3506:
    rx1230_cstack = rx1230_cur."!cursor_capture"($P11, "longname")
    repr_get_attr_int rx1230_pos, $P11, rx1230_curclass, "$!pos"
    nqp_rxmark rx1230_bstack, rxquantr1233_done3508, rx1230_pos, 0
  rxquantr1233_loop3507:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1234_03510
    nqp_push_label $P11, alt1234_13521
    nqp_push_label $P11, alt1234_23523
    nqp_push_label $P11, alt1234_33525
    nqp_push_label $P11, alt1234_43527
    nqp_rxmark rx1230_bstack, alt1234_end3509, -1, 0
    rx1230_cur."!alt"(rx1230_pos, "alt_nfa__42_1346968542.844", $P11)
    goto rx1230_fail3499
  alt1234_03510:
    .const 'Sub' $P5001 = 'cuid_238_1346968539.359' 
    capture_lex $P5001
    repr_bind_attr_int rx1230_cur, rx1230_curclass, "$!pos", rx1230_pos
    $P11 = rx1230_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1230_curclass, "$!pos"
    lt $I11, 0, rx1230_fail3499
    goto alt1234_end3509
  alt1234_13521:
    add $I11, rx1230_pos, 1
    gt $I11, rx1230_eos, rx1230_fail3499
    substr $S10, rx1230_tgt, rx1230_pos, 1
    ne $S10, ucs4:"=", rx1230_fail3499
    add rx1230_pos, 1
    repr_bind_attr_int rx1230_cur, rx1230_curclass, "$!pos", rx1230_pos
    $P11 = rx1230_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx1230_curclass, "$!pos"
    lt $I11, 0, rx1230_fail3499
    nqp_rxmark rx1230_bstack, rxsubrule1237_pass3522, -1, 0
  rxsubrule1237_pass3522:
    rx1230_cstack = rx1230_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx1230_pos, $P11, rx1230_curclass, "$!pos"
    goto alt1234_end3509
  alt1234_23523:
    add $I11, rx1230_pos, 1
    gt $I11, rx1230_eos, rx1230_fail3499
    substr $S10, rx1230_tgt, rx1230_pos, 1
    ne $S10, ucs4:":", rx1230_fail3499
    add rx1230_pos, 1
    repr_bind_attr_int rx1230_cur, rx1230_curclass, "$!pos", rx1230_pos
    $P11 = rx1230_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx1230_curclass, "$!pos"
    lt $I11, 0, rx1230_fail3499
    nqp_rxmark rx1230_bstack, rxsubrule1238_pass3524, -1, 0
  rxsubrule1238_pass3524:
    rx1230_cstack = rx1230_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx1230_pos, $P11, rx1230_curclass, "$!pos"
    goto alt1234_end3509
  alt1234_33525:
    add $I11, rx1230_pos, 1
    gt $I11, rx1230_eos, rx1230_fail3499
    substr $S10, rx1230_tgt, rx1230_pos, 1
    ne $S10, ucs4:"(", rx1230_fail3499
    add rx1230_pos, 1
    repr_bind_attr_int rx1230_cur, rx1230_curclass, "$!pos", rx1230_pos
    $P11 = rx1230_cur."LANG"("MAIN", "arglist")
    repr_get_attr_int $I11, $P11, rx1230_curclass, "$!pos"
    lt $I11, 0, rx1230_fail3499
    nqp_rxmark rx1230_bstack, rxsubrule1239_pass3526, -1, 0
  rxsubrule1239_pass3526:
    rx1230_cstack = rx1230_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx1230_pos, $P11, rx1230_curclass, "$!pos"
    add $I11, rx1230_pos, 1
    gt $I11, rx1230_eos, rx1230_fail3499
    substr $S10, rx1230_tgt, rx1230_pos, 1
    ne $S10, ucs4:")", rx1230_fail3499
    add rx1230_pos, 1
    goto alt1234_end3509
  alt1234_43527:
    repr_bind_attr_int rx1230_cur, rx1230_curclass, "$!pos", rx1230_pos
    $P11 = rx1230_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx1230_curclass, "$!pos"
    lt $I11, 0, rx1230_fail3499
    repr_get_attr_int rx1230_pos, $P11, rx1230_curclass, "$!pos"
    repr_bind_attr_int rx1230_cur, rx1230_curclass, "$!pos", rx1230_pos
    $P11 = rx1230_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx1230_curclass, "$!pos"
    lt $I11, 0, rx1230_fail3499
    nqp_rxmark rx1230_bstack, rxsubrule1241_pass3529, -1, 0
  rxsubrule1241_pass3529:
    rx1230_cstack = rx1230_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx1230_pos, $P11, rx1230_curclass, "$!pos"
    goto alt1234_end3509
  alt1234_end3509:
    nqp_rxpeek $I19, rx1230_bstack, rxquantr1233_done3508
    inc $I19
    inc $I19
    set rx1230_rep, rx1230_bstack[$I19]
    nqp_rxcommit rx1230_bstack, rxquantr1233_done3508
    inc rx1230_rep
  rxquantr1233_done3508:
    rx1230_cur."!cursor_pass"(rx1230_pos, "assertion:sym<name>", 'backtrack'=>1)
    .return (rx1230_cur)
  rx1230_restart3498:
    repr_get_attr_obj rx1230_cstack, rx1230_cur, rx1230_curclass, "$!cstack"
  rx1230_fail3499:
    unless rx1230_bstack, rx1230_done3497
    pop $I19, rx1230_bstack
    if_null rx1230_cstack, rx1230_cstack_done3502
    unless rx1230_cstack, rx1230_cstack_done3502
    dec $I19
    set $P11, rx1230_cstack[$I19]
  rx1230_cstack_done3502:
    pop rx1230_rep, rx1230_bstack
    pop rx1230_pos, rx1230_bstack
    pop $I19, rx1230_bstack
    lt rx1230_pos, -1, rx1230_done3497
    lt rx1230_pos, 0, rx1230_fail3499
    eq $I19, 0, rx1230_fail3499
    nqp_islist $I20, rx1230_cstack
    unless $I20, rx1230_jump3500
    elements $I18, rx1230_bstack
    le $I18, 0, rx1230_cut3501
    dec $I18
    set $I18, rx1230_bstack[$I18]
  rx1230_cut3501:
    assign rx1230_cstack, $I18
  rx1230_jump3500:
    jump $I19
  rx1230_done3497:
    rx1230_cur."!cursor_fail"()
    .return (rx1230_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_239_1346968539.359_caps" :subid("cuid_memo_410_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["longname"], $P5002
    box $P5003, 2
    set $P5001["assertion"], $P5003
    box $P5004, 2
    set $P5001["arglist"], $P5004
    box $P5005, 2
    set $P5001["nibbler"], $P5005
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_239_1346968539.359_nfa" :subid("cuid_memo_411_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "identifier"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 62
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    box $P5011, 2
    push $P5007, $P5011
    box $P5012, 61
    push $P5007, $P5012
    box $P5013, 4
    push $P5007, $P5013
    box $P5014, 2
    push $P5007, $P5014
    box $P5015, 58
    push $P5007, $P5015
    box $P5016, 5
    push $P5007, $P5016
    box $P5017, 2
    push $P5007, $P5017
    box $P5018, 40
    push $P5007, $P5018
    box $P5019, 6
    push $P5007, $P5019
    box $P5020, 8
    push $P5007, $P5020
    box $P5021, "normspace"
    push $P5007, $P5021
    box $P5022, 8
    push $P5007, $P5022
    box $P5023, 1
    push $P5007, $P5023
    box $P5024, 0
    push $P5007, $P5024
    box $P5025, 0
    push $P5007, $P5025
    push $P5001, $P5007
    new $P5026, 'ResizablePMCArray'
    box $P5027, 0
    push $P5026, $P5027
    box $P5028, 0
    push $P5026, $P5028
    box $P5029, 0
    push $P5026, $P5029
    push $P5001, $P5026
    new $P5030, 'ResizablePMCArray'
    box $P5031, 8
    push $P5030, $P5031
    box $P5032, "assertion"
    push $P5030, $P5032
    box $P5033, 0
    push $P5030, $P5033
    push $P5001, $P5030
    new $P5034, 'ResizablePMCArray'
    box $P5035, 8
    push $P5034, $P5035
    box $P5036, "arglist"
    push $P5034, $P5036
    box $P5037, 0
    push $P5034, $P5037
    push $P5001, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 8
    push $P5038, $P5039
    box $P5040, "LANG"
    push $P5038, $P5040
    box $P5041, 7
    push $P5038, $P5041
    push $P5001, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 41
    push $P5042, $P5044
    box $P5045, 0
    push $P5042, $P5045
    push $P5001, $P5042
    new $P5046, 'ResizablePMCArray'
    box $P5047, 8
    push $P5046, $P5047
    box $P5048, "nibbler"
    push $P5046, $P5048
    box $P5049, 0
    push $P5046, $P5049
    push $P5001, $P5046
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_239_1346968539.359_alt_nfa__42_1346968542.844" :subid("cuid_memo_412_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 62
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 0
    push $P5008, $P5009
    box $P5010, 0
    push $P5008, $P5010
    box $P5011, 0
    push $P5008, $P5011
    push $P5002, $P5008
    push $P5001, $P5002
    new $P5012, 'ResizablePMCArray'
    new $P5013, 'ResizablePMCArray'
    push $P5012, $P5013
    new $P5014, 'ResizablePMCArray'
    box $P5015, 2
    push $P5014, $P5015
    box $P5016, 61
    push $P5014, $P5016
    box $P5017, 2
    push $P5014, $P5017
    push $P5012, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 8
    push $P5018, $P5019
    box $P5020, "assertion"
    push $P5018, $P5020
    box $P5021, 0
    push $P5018, $P5021
    push $P5012, $P5018
    push $P5001, $P5012
    new $P5022, 'ResizablePMCArray'
    new $P5023, 'ResizablePMCArray'
    push $P5022, $P5023
    new $P5024, 'ResizablePMCArray'
    box $P5025, 2
    push $P5024, $P5025
    box $P5026, 58
    push $P5024, $P5026
    box $P5027, 2
    push $P5024, $P5027
    push $P5022, $P5024
    new $P5028, 'ResizablePMCArray'
    box $P5029, 8
    push $P5028, $P5029
    box $P5030, "arglist"
    push $P5028, $P5030
    box $P5031, 0
    push $P5028, $P5031
    push $P5022, $P5028
    push $P5001, $P5022
    new $P5032, 'ResizablePMCArray'
    new $P5033, 'ResizablePMCArray'
    push $P5032, $P5033
    new $P5034, 'ResizablePMCArray'
    box $P5035, 2
    push $P5034, $P5035
    box $P5036, 40
    push $P5034, $P5036
    box $P5037, 2
    push $P5034, $P5037
    push $P5032, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 8
    push $P5038, $P5039
    box $P5040, "LANG"
    push $P5038, $P5040
    box $P5041, 3
    push $P5038, $P5041
    push $P5032, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 41
    push $P5042, $P5044
    box $P5045, 0
    push $P5042, $P5045
    push $P5032, $P5042
    push $P5001, $P5032
    new $P5046, 'ResizablePMCArray'
    new $P5047, 'ResizablePMCArray'
    push $P5046, $P5047
    new $P5048, 'ResizablePMCArray'
    box $P5049, 8
    push $P5048, $P5049
    box $P5050, "normspace"
    push $P5048, $P5050
    box $P5051, 2
    push $P5048, $P5051
    push $P5046, $P5048
    new $P5052, 'ResizablePMCArray'
    box $P5053, 8
    push $P5052, $P5053
    box $P5054, "nibbler"
    push $P5052, $P5054
    box $P5055, 0
    push $P5052, $P5055
    push $P5046, $P5052
    push $P5001, $P5046
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_238_1346968539.359") :anon :lex :outer("cuid_239_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1235_tgt
    .local int rx1235_pos
    .local int rx1235_off
    .local int rx1235_eos
    .local int rx1235_rep
    .local pmc rx1235_cur
    .local pmc rx1235_curclass
    .local pmc rx1235_bstack
    .local pmc rx1235_cstack
    (rx1235_cur, rx1235_tgt, rx1235_pos, rx1235_curclass, rx1235_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1235_cur
    length rx1235_eos, rx1235_tgt
    eq $I19, 1, rx1235_restart3513
    gt rx1235_pos, rx1235_eos, rx1235_fail3514
    repr_get_attr_int $I11, self, rx1235_curclass, "$!from"
    ne $I11, -1, rxscan1236_done3520
    goto rxscan1236_scan3519
  rxscan1236_loop3518:
    inc rx1235_pos
    gt rx1235_pos, rx1235_eos, rx1235_fail3514
    repr_bind_attr_int rx1235_cur, rx1235_curclass, "$!from", rx1235_pos
  rxscan1236_scan3519:
    nqp_rxmark rx1235_bstack, rxscan1236_loop3518, rx1235_pos, 0
  rxscan1236_done3520:
    add $I11, rx1235_pos, 1
    gt $I11, rx1235_eos, rx1235_fail3514
    substr $S10, rx1235_tgt, rx1235_pos, 1
    ne $S10, ucs4:">", rx1235_fail3514
    add rx1235_pos, 1
    rx1235_cur."!cursor_pass"(rx1235_pos, 'backtrack'=>1)
    .return (rx1235_cur)
  rx1235_restart3513:
    repr_get_attr_obj rx1235_cstack, rx1235_cur, rx1235_curclass, "$!cstack"
  rx1235_fail3514:
    unless rx1235_bstack, rx1235_done3512
    pop $I19, rx1235_bstack
    if_null rx1235_cstack, rx1235_cstack_done3517
    unless rx1235_cstack, rx1235_cstack_done3517
    dec $I19
    set $P11, rx1235_cstack[$I19]
  rx1235_cstack_done3517:
    pop rx1235_rep, rx1235_bstack
    pop rx1235_pos, rx1235_bstack
    pop $I19, rx1235_bstack
    lt rx1235_pos, -1, rx1235_done3512
    lt rx1235_pos, 0, rx1235_fail3514
    eq $I19, 0, rx1235_fail3514
    nqp_islist $I20, rx1235_cstack
    unless $I20, rx1235_jump3515
    elements $I18, rx1235_bstack
    le $I18, 0, rx1235_cut3516
    dec $I18
    set $I18, rx1235_bstack[$I18]
  rx1235_cut3516:
    assign rx1235_cstack, $I18
  rx1235_jump3515:
    jump $I19
  rx1235_done3512:
    rx1235_cur."!cursor_fail"()
    .return (rx1235_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_238_1346968539.359_caps" :subid("cuid_memo_413_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_238_1346968539.359_nfa" :subid("cuid_memo_414_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 62
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<var>" :subid("cuid_240_1346968539.359") :anon :lex :outer("cuid_243_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1370
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1242_tgt
    .local int rx1242_pos
    .local int rx1242_off
    .local int rx1242_eos
    .local int rx1242_rep
    .local pmc rx1242_cur
    .local pmc rx1242_curclass
    .local pmc rx1242_bstack
    .local pmc rx1242_cstack
    (rx1242_cur, rx1242_tgt, rx1242_pos, rx1242_curclass, rx1242_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1242_cur
    length rx1242_eos, rx1242_tgt
    eq $I19, 1, rx1242_restart3532
    gt rx1242_pos, rx1242_eos, rx1242_fail3533
    repr_get_attr_int $I11, self, rx1242_curclass, "$!from"
    ne $I11, -1, rxscan1243_done3539
    goto rxscan1243_scan3538
  rxscan1243_loop3537:
    inc rx1242_pos
    gt rx1242_pos, rx1242_eos, rx1242_fail3533
    repr_bind_attr_int rx1242_cur, rx1242_curclass, "$!from", rx1242_pos
  rxscan1243_scan3538:
    nqp_rxmark rx1242_bstack, rxscan1243_loop3537, rx1242_pos, 0
  rxscan1243_done3539:
    ge rx1242_pos, rx1242_eos, rx1242_fail3533
    substr $S11, rx1242_tgt, rx1242_pos, 1
    index $I11, ucs4:"$@", $S11
    lt $I11, 0, rx1242_fail3533
    repr_bind_attr_int rx1242_cur, rx1242_curclass, "$!pos", rx1242_pos
    $P11 = rx1242_cur."LANG"("MAIN", "variable")
    repr_get_attr_int $I11, $P11, rx1242_curclass, "$!pos"
    lt $I11, 0, rx1242_fail3533
    nqp_rxmark rx1242_bstack, rxsubrule1244_pass3540, -1, 0
  rxsubrule1244_pass3540:
    rx1242_cstack = rx1242_cur."!cursor_capture"($P11, "var")
    repr_get_attr_int rx1242_pos, $P11, rx1242_curclass, "$!pos"
    rx1242_cur."!cursor_pass"(rx1242_pos, "assertion:sym<var>", 'backtrack'=>1)
    .return (rx1242_cur)
  rx1242_restart3532:
    repr_get_attr_obj rx1242_cstack, rx1242_cur, rx1242_curclass, "$!cstack"
  rx1242_fail3533:
    unless rx1242_bstack, rx1242_done3531
    pop $I19, rx1242_bstack
    if_null rx1242_cstack, rx1242_cstack_done3536
    unless rx1242_cstack, rx1242_cstack_done3536
    dec $I19
    set $P11, rx1242_cstack[$I19]
  rx1242_cstack_done3536:
    pop rx1242_rep, rx1242_bstack
    pop rx1242_pos, rx1242_bstack
    pop $I19, rx1242_bstack
    lt rx1242_pos, -1, rx1242_done3531
    lt rx1242_pos, 0, rx1242_fail3533
    eq $I19, 0, rx1242_fail3533
    nqp_islist $I20, rx1242_cstack
    unless $I20, rx1242_jump3534
    elements $I18, rx1242_bstack
    le $I18, 0, rx1242_cut3535
    dec $I18
    set $I18, rx1242_bstack[$I18]
  rx1242_cut3535:
    assign rx1242_cstack, $I18
  rx1242_jump3534:
    jump $I19
  rx1242_done3531:
    rx1242_cur."!cursor_fail"()
    .return (rx1242_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_240_1346968539.359_caps" :subid("cuid_memo_415_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["var"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_240_1346968539.359_nfa" :subid("cuid_memo_416_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "$@"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "codeblock" :subid("cuid_241_1346968539.359") :anon :lex :outer("cuid_243_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1374
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1245_tgt
    .local int rx1245_pos
    .local int rx1245_off
    .local int rx1245_eos
    .local int rx1245_rep
    .local pmc rx1245_cur
    .local pmc rx1245_curclass
    .local pmc rx1245_bstack
    .local pmc rx1245_cstack
    (rx1245_cur, rx1245_tgt, rx1245_pos, rx1245_curclass, rx1245_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1245_cur
    length rx1245_eos, rx1245_tgt
    eq $I19, 1, rx1245_restart3543
    gt rx1245_pos, rx1245_eos, rx1245_fail3544
    repr_get_attr_int $I11, self, rx1245_curclass, "$!from"
    ne $I11, -1, rxscan1246_done3550
    goto rxscan1246_scan3549
  rxscan1246_loop3548:
    inc rx1245_pos
    gt rx1245_pos, rx1245_eos, rx1245_fail3544
    repr_bind_attr_int rx1245_cur, rx1245_curclass, "$!from", rx1245_pos
  rxscan1246_scan3549:
    nqp_rxmark rx1245_bstack, rxscan1246_loop3548, rx1245_pos, 0
  rxscan1246_done3550:
    repr_bind_attr_int rx1245_cur, rx1245_curclass, "$!pos", rx1245_pos
    $P11 = rx1245_cur."LANG"("MAIN", "pblock")
    repr_get_attr_int $I11, $P11, rx1245_curclass, "$!pos"
    lt $I11, 0, rx1245_fail3544
    nqp_rxmark rx1245_bstack, rxsubrule1247_pass3551, -1, 0
  rxsubrule1247_pass3551:
    rx1245_cstack = rx1245_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx1245_pos, $P11, rx1245_curclass, "$!pos"
    rx1245_cur."!cursor_pass"(rx1245_pos, "codeblock", 'backtrack'=>1)
    .return (rx1245_cur)
  rx1245_restart3543:
    repr_get_attr_obj rx1245_cstack, rx1245_cur, rx1245_curclass, "$!cstack"
  rx1245_fail3544:
    unless rx1245_bstack, rx1245_done3542
    pop $I19, rx1245_bstack
    if_null rx1245_cstack, rx1245_cstack_done3547
    unless rx1245_cstack, rx1245_cstack_done3547
    dec $I19
    set $P11, rx1245_cstack[$I19]
  rx1245_cstack_done3547:
    pop rx1245_rep, rx1245_bstack
    pop rx1245_pos, rx1245_bstack
    pop $I19, rx1245_bstack
    lt rx1245_pos, -1, rx1245_done3542
    lt rx1245_pos, 0, rx1245_fail3544
    eq $I19, 0, rx1245_fail3544
    nqp_islist $I20, rx1245_cstack
    unless $I20, rx1245_jump3545
    elements $I18, rx1245_bstack
    le $I18, 0, rx1245_cut3546
    dec $I18
    set $I18, rx1245_bstack[$I18]
  rx1245_cut3546:
    assign rx1245_cstack, $I18
  rx1245_jump3545:
    jump $I19
  rx1245_done3542:
    rx1245_cur."!cursor_fail"()
    .return (rx1245_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_241_1346968539.359_caps" :subid("cuid_memo_417_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["block"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_241_1346968539.359_nfa" :subid("cuid_memo_418_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "LANG"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "arg" :subid("cuid_242_1346968539.359") :anon :lex :outer("cuid_243_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1378
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1248_tgt
    .local int rx1248_pos
    .local int rx1248_off
    .local int rx1248_eos
    .local int rx1248_rep
    .local pmc rx1248_cur
    .local pmc rx1248_curclass
    .local pmc rx1248_bstack
    .local pmc rx1248_cstack
    (rx1248_cur, rx1248_tgt, rx1248_pos, rx1248_curclass, rx1248_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1248_cur
    length rx1248_eos, rx1248_tgt
    eq $I19, 1, rx1248_restart3554
    gt rx1248_pos, rx1248_eos, rx1248_fail3555
    repr_get_attr_int $I11, self, rx1248_curclass, "$!from"
    ne $I11, -1, rxscan1249_done3561
    goto rxscan1249_scan3560
  rxscan1249_loop3559:
    inc rx1248_pos
    gt rx1248_pos, rx1248_eos, rx1248_fail3555
    repr_bind_attr_int rx1248_cur, rx1248_curclass, "$!from", rx1248_pos
  rxscan1249_scan3560:
    nqp_rxmark rx1248_bstack, rxscan1249_loop3559, rx1248_pos, 0
  rxscan1249_done3561:
    repr_bind_attr_int rx1248_cur, rx1248_curclass, "$!pos", rx1248_pos
    $P11 = rx1248_cur."LANG"("MAIN", "quote_EXPR")
    repr_get_attr_int $I11, $P11, rx1248_curclass, "$!pos"
    lt $I11, 0, rx1248_fail3555
    nqp_rxmark rx1248_bstack, rxsubrule1250_pass3562, -1, 0
  rxsubrule1250_pass3562:
    rx1248_cstack = rx1248_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1248_pos, $P11, rx1248_curclass, "$!pos"
    rx1248_cur."!cursor_pass"(rx1248_pos, "arg", 'backtrack'=>1)
    .return (rx1248_cur)
  rx1248_restart3554:
    repr_get_attr_obj rx1248_cstack, rx1248_cur, rx1248_curclass, "$!cstack"
  rx1248_fail3555:
    unless rx1248_bstack, rx1248_done3553
    pop $I19, rx1248_bstack
    if_null rx1248_cstack, rx1248_cstack_done3558
    unless rx1248_cstack, rx1248_cstack_done3558
    dec $I19
    set $P11, rx1248_cstack[$I19]
  rx1248_cstack_done3558:
    pop rx1248_rep, rx1248_bstack
    pop rx1248_pos, rx1248_bstack
    pop $I19, rx1248_bstack
    lt rx1248_pos, -1, rx1248_done3553
    lt rx1248_pos, 0, rx1248_fail3555
    eq $I19, 0, rx1248_fail3555
    nqp_islist $I20, rx1248_cstack
    unless $I20, rx1248_jump3556
    elements $I18, rx1248_bstack
    le $I18, 0, rx1248_cut3557
    dec $I18
    set $I18, rx1248_bstack[$I18]
  rx1248_cut3557:
    assign rx1248_cstack, $I18
  rx1248_jump3556:
    jump $I19
  rx1248_done3553:
    rx1248_cur."!cursor_fail"()
    .return (rx1248_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_242_1346968539.359_caps" :subid("cuid_memo_419_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["quote_EXPR"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_242_1346968539.359_nfa" :subid("cuid_memo_420_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "LANG"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_399_1346968539.359") :anon :lex :outer("cuid_1_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1389
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    set $P5002, _lex_param_1[0]
    unless_null $P5002, fallback3564
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5002, $P5003
  fallback3564:
    set $P101, $P5002
    get_hll_global $P5007, "GLOBAL"
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Var"]
    unless_null $P5004, fallback3567
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5004, $P5008
  fallback3567:
    type_check $I5001, $P101, $P5004
    box $P5011, $I5001
    set $P5010, $P5011
    if $I5001 goto unless1251_end3566 
.annotate 'line', 1391
    box $P5009, "Pre-increment can only work on a variable"
    die $P5009
    set $P5010, $P5009
  unless1251_end3566:
.annotate 'line', 1394
    get_hll_global $P5015, "GLOBAL"
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Op"]
    unless_null $P5012, fallback3568
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5012, $P5016
  fallback3568:
.annotate 'line', 1397
    get_hll_global $P5020, "GLOBAL"
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Op"]
    unless_null $P5017, fallback3569
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5017, $P5021
  fallback3569:
.annotate 'line', 1400
    get_hll_global $P5025, "GLOBAL"
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["IVal"]
    unless_null $P5022, fallback3570
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5022, $P5026
  fallback3570:
    $P5027 = $P5022."new"(1 :named("value"))
    $P5028 = $P5017."new"($P101, $P5027, "add_n" :named("op"))
    $P5029 = $P5012."new"($P101, $P5028, "bind" :named("op"))
    $P5030 = _lex_param_0."as_post"($P5029)
    .return ($P5030) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_400_1346968539.359") :anon :lex :outer("cuid_1_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1404
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    set $P5002, _lex_param_1[0]
    unless_null $P5002, fallback3571
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5002, $P5003
  fallback3571:
    set $P101, $P5002
    get_hll_global $P5007, "GLOBAL"
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Var"]
    unless_null $P5004, fallback3574
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5004, $P5008
  fallback3574:
    type_check $I5001, $P101, $P5004
    box $P5011, $I5001
    set $P5010, $P5011
    if $I5001 goto unless1252_end3573 
.annotate 'line', 1406
    box $P5009, "Pre-decrement can only work on a variable"
    die $P5009
    set $P5010, $P5009
  unless1252_end3573:
.annotate 'line', 1409
    get_hll_global $P5015, "GLOBAL"
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Op"]
    unless_null $P5012, fallback3575
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5012, $P5016
  fallback3575:
.annotate 'line', 1412
    get_hll_global $P5020, "GLOBAL"
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Op"]
    unless_null $P5017, fallback3576
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5017, $P5021
  fallback3576:
.annotate 'line', 1415
    get_hll_global $P5025, "GLOBAL"
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["IVal"]
    unless_null $P5022, fallback3577
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5022, $P5026
  fallback3577:
    $P5027 = $P5022."new"(1 :named("value"))
    $P5028 = $P5017."new"($P101, $P5027, "sub_n" :named("op"))
    $P5029 = $P5012."new"($P101, $P5028, "bind" :named("op"))
    $P5030 = _lex_param_0."as_post"($P5029)
    .return ($P5030) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_401_1346968539.359") :anon :lex :outer("cuid_1_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1419
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$tmp", $P102 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
    set $P5003, _lex_param_1[0]
    unless_null $P5003, fallback3578
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5003, $P5004
  fallback3578:
    set $P101, $P5003
.annotate 'line', 1421
    get_hll_global $P5008, "GLOBAL"
    nqp_get_package_through_who $P5007, $P5008, "QAST"
    get_who $P5006, $P5007
    set $P5005, $P5006["Op"]
    unless_null $P5005, fallback3579
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5005, $P5009
  fallback3579:
    $P5010 = $P5005."unique"("tmp")
    set $P102, $P5010
    get_hll_global $P5014, "GLOBAL"
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Var"]
    unless_null $P5011, fallback3582
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5011, $P5015
  fallback3582:
    type_check $I5001, $P101, $P5011
    box $P5018, $I5001
    set $P5017, $P5018
    if $I5001 goto unless1253_end3581 
.annotate 'line', 1422
    box $P5016, "Post-increment can only work on a variable"
    die $P5016
    set $P5017, $P5016
  unless1253_end3581:
.annotate 'line', 1425
    get_hll_global $P5022, "GLOBAL"
    nqp_get_package_through_who $P5021, $P5022, "QAST"
    get_who $P5020, $P5021
    set $P5019, $P5020["Stmt"]
    unless_null $P5019, fallback3583
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5019, $P5023
  fallback3583:
.annotate 'line', 1427
    get_hll_global $P5027, "GLOBAL"
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["Op"]
    unless_null $P5024, fallback3584
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5024, $P5028
  fallback3584:
.annotate 'line', 1429
    get_hll_global $P5032, "GLOBAL"
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["Var"]
    unless_null $P5029, fallback3585
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5029, $P5033
  fallback3585:
    $P5034 = $P5029."new"($P102 :named("name"), "local" :named("scope"), "var" :named("decl"))
    $P5035 = $P5024."new"($P5034, $P101, "bind" :named("op"))
.annotate 'line', 1432
    get_hll_global $P5039, "GLOBAL"
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Op"]
    unless_null $P5036, fallback3586
    nqp_get_sc_object $P5040, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5036, $P5040
  fallback3586:
.annotate 'line', 1435
    get_hll_global $P5044, "GLOBAL"
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["Op"]
    unless_null $P5041, fallback3587
    nqp_get_sc_object $P5045, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5041, $P5045
  fallback3587:
.annotate 'line', 1437
    get_hll_global $P5049, "GLOBAL"
    nqp_get_package_through_who $P5048, $P5049, "QAST"
    get_who $P5047, $P5048
    set $P5046, $P5047["Var"]
    unless_null $P5046, fallback3588
    nqp_get_sc_object $P5050, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5046, $P5050
  fallback3588:
    $P5051 = $P5046."new"($P102 :named("name"), "local" :named("scope"))
.annotate 'line', 1438
    get_hll_global $P5055, "GLOBAL"
    nqp_get_package_through_who $P5054, $P5055, "QAST"
    get_who $P5053, $P5054
    set $P5052, $P5053["IVal"]
    unless_null $P5052, fallback3589
    nqp_get_sc_object $P5056, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5052, $P5056
  fallback3589:
    $P5057 = $P5052."new"(1 :named("value"))
    $P5058 = $P5041."new"($P5051, $P5057, "add_n" :named("op"))
    $P5059 = $P5036."new"($P101, $P5058, "bind" :named("op"))
    $P5060 = $P5019."new"($P5035, $P5059, 0 :named("resultchild"))
    $P5061 = _lex_param_0."as_post"($P5060)
    .return ($P5061) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_402_1346968539.359") :anon :lex :outer("cuid_1_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1443
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$tmp", $P102 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
    set $P5003, _lex_param_1[0]
    unless_null $P5003, fallback3590
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5003, $P5004
  fallback3590:
    set $P101, $P5003
.annotate 'line', 1445
    get_hll_global $P5008, "GLOBAL"
    nqp_get_package_through_who $P5007, $P5008, "QAST"
    get_who $P5006, $P5007
    set $P5005, $P5006["Op"]
    unless_null $P5005, fallback3591
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5005, $P5009
  fallback3591:
    $P5010 = $P5005."unique"("tmp")
    set $P102, $P5010
    get_hll_global $P5014, "GLOBAL"
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Var"]
    unless_null $P5011, fallback3594
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5011, $P5015
  fallback3594:
    type_check $I5001, $P101, $P5011
    box $P5018, $I5001
    set $P5017, $P5018
    if $I5001 goto unless1254_end3593 
.annotate 'line', 1446
    box $P5016, "Post-decrement can only work on a variable"
    die $P5016
    set $P5017, $P5016
  unless1254_end3593:
.annotate 'line', 1449
    get_hll_global $P5022, "GLOBAL"
    nqp_get_package_through_who $P5021, $P5022, "QAST"
    get_who $P5020, $P5021
    set $P5019, $P5020["Stmt"]
    unless_null $P5019, fallback3595
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5019, $P5023
  fallback3595:
.annotate 'line', 1451
    get_hll_global $P5027, "GLOBAL"
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["Op"]
    unless_null $P5024, fallback3596
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5024, $P5028
  fallback3596:
.annotate 'line', 1453
    get_hll_global $P5032, "GLOBAL"
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["Var"]
    unless_null $P5029, fallback3597
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5029, $P5033
  fallback3597:
    $P5034 = $P5029."new"($P102 :named("name"), "local" :named("scope"), "var" :named("decl"))
    $P5035 = $P5024."new"($P5034, $P101, "bind" :named("op"))
.annotate 'line', 1456
    get_hll_global $P5039, "GLOBAL"
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Op"]
    unless_null $P5036, fallback3598
    nqp_get_sc_object $P5040, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5036, $P5040
  fallback3598:
.annotate 'line', 1459
    get_hll_global $P5044, "GLOBAL"
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["Op"]
    unless_null $P5041, fallback3599
    nqp_get_sc_object $P5045, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5041, $P5045
  fallback3599:
.annotate 'line', 1461
    get_hll_global $P5049, "GLOBAL"
    nqp_get_package_through_who $P5048, $P5049, "QAST"
    get_who $P5047, $P5048
    set $P5046, $P5047["Var"]
    unless_null $P5046, fallback3600
    nqp_get_sc_object $P5050, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5046, $P5050
  fallback3600:
    $P5051 = $P5046."new"($P102 :named("name"), "local" :named("scope"))
.annotate 'line', 1462
    get_hll_global $P5055, "GLOBAL"
    nqp_get_package_through_who $P5054, $P5055, "QAST"
    get_who $P5053, $P5054
    set $P5052, $P5053["IVal"]
    unless_null $P5052, fallback3601
    nqp_get_sc_object $P5056, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5052, $P5056
  fallback3601:
    $P5057 = $P5052."new"(1 :named("value"))
    $P5058 = $P5041."new"($P5051, $P5057, "sub_n" :named("op"))
    $P5059 = $P5036."new"($P101, $P5058, "bind" :named("op"))
    $P5060 = $P5019."new"($P5035, $P5059, 0 :named("resultchild"))
    $P5061 = _lex_param_0."as_post"($P5060)
    .return ($P5061) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_403_1346968539.359") :anon :lex :outer("cuid_1_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1467
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
.annotate 'line', 1468
    set $P5001, _lex_param_1[0]
    unless_null $P5001, fallback3602
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5002
  fallback3602:
    $P5003 = _lex_param_0."as_post"($P5001, "n" :named("want"))
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_404_1346968539.359") :anon :lex :outer("cuid_1_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1471
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
.annotate 'line', 1472
    set $P5001, _lex_param_1[0]
    unless_null $P5001, fallback3603
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5002
  fallback3603:
    $P5003 = _lex_param_0."as_post"($P5001, "s" :named("want"))
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_405_1346968539.359") :anon :lex :outer("cuid_1_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1475
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
.annotate 'line', 1476
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3604
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5005
  fallback3604:
.annotate 'line', 1478
    get_hll_global $P5009, "GLOBAL"
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Op"]
    unless_null $P5006, fallback3605
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5006, $P5010
  fallback3605:
    set $P5011, _lex_param_1[0]
    unless_null $P5011, fallback3606
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5011, $P5012
  fallback3606:
    $P5013 = $P5006."new"($P5011, "where" :named("op"))
.annotate 'line', 1479
    get_hll_global $P5017, "GLOBAL"
    nqp_get_package_through_who $P5016, $P5017, "QAST"
    get_who $P5015, $P5016
    set $P5014, $P5015["Op"]
    unless_null $P5014, fallback3607
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5014, $P5018
  fallback3607:
    set $P5019, _lex_param_1[1]
    unless_null $P5019, fallback3608
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5019, $P5020
  fallback3608:
    $P5021 = $P5014."new"($P5019, "where" :named("op"))
    $P5022 = $P5001."new"($P5013, $P5021, "iseq_i" :named("op"))
    $P5023 = _lex_param_0."as_post"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_356_1346968539.359") :anon :lex :outer("cuid_1_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1484
    .const 'Sub' $P5123 = 'cuid_406_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_409_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_412_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_415_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_417_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_418_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_419_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_421_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_422_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_427_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_244_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_245_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_246_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_247_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_248_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_249_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_250_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_251_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_252_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_253_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_254_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_255_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_256_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_257_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_258_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_259_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_260_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_261_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_262_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_263_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_264_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_265_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_266_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_267_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_268_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_269_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_270_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_271_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_272_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_273_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_274_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_275_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_276_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_277_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_278_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_279_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_280_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_281_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_282_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_283_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_284_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_285_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_286_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_287_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_288_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_289_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_290_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_291_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_292_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_293_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_294_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_295_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_296_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_297_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_298_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_299_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_300_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_301_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_302_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_303_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_304_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_305_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_306_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_307_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_308_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_309_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_310_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_311_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_312_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_313_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_314_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_315_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_316_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_317_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_318_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_319_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_320_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_321_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_322_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_323_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_324_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_325_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_326_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_327_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_328_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_329_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_330_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_331_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_332_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_333_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_334_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_335_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_336_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_337_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_338_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_339_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_340_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_341_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_342_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_343_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_344_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_345_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_346_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_347_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_348_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_349_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_350_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_351_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_352_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_353_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_354_1346968539.359' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_355_1346968539.359' 
    capture_lex $P5123 
    .lex "&xblock_immediate", $P101 
    .lex "&block_immediate", $P102 
    .lex "&default_for", $P103 
    .lex "&colonpair_str", $P104 
    .lex "&import_HOW_exports", $P105 
    .lex "&set_block_handler", $P106 
    .lex "&only_star_block", $P107 
    .lex "&attach_multi_signature", $P108 
    .lex "&wrap_return_handler", $P109 
    .lex "&lexical_package_lookup", $P110 
    .lex "$?PACKAGE", $P111 
    .lex "$?CLASS", $P112 
    .const 'Sub' $P5001 = 'cuid_406_1346968539.359' 
    capture_lex $P5001
    set $P101, $P5001
    .const 'Sub' $P5002 = 'cuid_409_1346968539.359' 
    capture_lex $P5002
    set $P102, $P5002
    .const 'Sub' $P5003 = 'cuid_412_1346968539.359' 
    capture_lex $P5003
    set $P103, $P5003
    .const 'Sub' $P5004 = 'cuid_415_1346968539.359' 
    capture_lex $P5004
    set $P104, $P5004
    .const 'Sub' $P5005 = 'cuid_417_1346968539.359' 
    capture_lex $P5005
    set $P105, $P5005
    .const 'Sub' $P5006 = 'cuid_418_1346968539.359' 
    capture_lex $P5006
    set $P106, $P5006
    .const 'Sub' $P5007 = 'cuid_419_1346968539.359' 
    capture_lex $P5007
    set $P107, $P5007
    .const 'Sub' $P5008 = 'cuid_421_1346968539.359' 
    capture_lex $P5008
    set $P108, $P5008
    .const 'Sub' $P5009 = 'cuid_422_1346968539.359' 
    capture_lex $P5009
    set $P109, $P5009
    .const 'Sub' $P5010 = 'cuid_427_1346968539.359' 
    capture_lex $P5010
    set $P110, $P5010
    .const 'Sub' $P5011 = 'cuid_244_1346968539.359' 
    capture_lex $P5011
    .const 'Sub' $P5012 = 'cuid_245_1346968539.359' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_246_1346968539.359' 
    capture_lex $P5013
    .const 'Sub' $P5014 = 'cuid_247_1346968539.359' 
    capture_lex $P5014
    .const 'Sub' $P5015 = 'cuid_248_1346968539.359' 
    capture_lex $P5015
    .const 'Sub' $P5016 = 'cuid_249_1346968539.359' 
    capture_lex $P5016
    .const 'Sub' $P5017 = 'cuid_250_1346968539.359' 
    capture_lex $P5017
    .const 'Sub' $P5018 = 'cuid_251_1346968539.359' 
    capture_lex $P5018
    .const 'Sub' $P5019 = 'cuid_252_1346968539.359' 
    capture_lex $P5019
    .const 'Sub' $P5020 = 'cuid_253_1346968539.359' 
    capture_lex $P5020
    .const 'Sub' $P5021 = 'cuid_254_1346968539.359' 
    capture_lex $P5021
    .const 'Sub' $P5022 = 'cuid_255_1346968539.359' 
    capture_lex $P5022
    .const 'Sub' $P5023 = 'cuid_256_1346968539.359' 
    capture_lex $P5023
    .const 'Sub' $P5024 = 'cuid_257_1346968539.359' 
    capture_lex $P5024
    .const 'Sub' $P5025 = 'cuid_258_1346968539.359' 
    capture_lex $P5025
    .const 'Sub' $P5026 = 'cuid_259_1346968539.359' 
    capture_lex $P5026
    .const 'Sub' $P5027 = 'cuid_260_1346968539.359' 
    capture_lex $P5027
    .const 'Sub' $P5028 = 'cuid_261_1346968539.359' 
    capture_lex $P5028
    .const 'Sub' $P5029 = 'cuid_262_1346968539.359' 
    capture_lex $P5029
    .const 'Sub' $P5030 = 'cuid_263_1346968539.359' 
    capture_lex $P5030
    .const 'Sub' $P5031 = 'cuid_264_1346968539.359' 
    capture_lex $P5031
    .const 'Sub' $P5032 = 'cuid_265_1346968539.359' 
    capture_lex $P5032
    .const 'Sub' $P5033 = 'cuid_266_1346968539.359' 
    capture_lex $P5033
    .const 'Sub' $P5034 = 'cuid_267_1346968539.359' 
    capture_lex $P5034
    .const 'Sub' $P5035 = 'cuid_268_1346968539.359' 
    capture_lex $P5035
    .const 'Sub' $P5036 = 'cuid_269_1346968539.359' 
    capture_lex $P5036
    .const 'Sub' $P5037 = 'cuid_270_1346968539.359' 
    capture_lex $P5037
    .const 'Sub' $P5038 = 'cuid_271_1346968539.359' 
    capture_lex $P5038
    .const 'Sub' $P5039 = 'cuid_272_1346968539.359' 
    capture_lex $P5039
    .const 'Sub' $P5040 = 'cuid_273_1346968539.359' 
    capture_lex $P5040
    .const 'Sub' $P5041 = 'cuid_274_1346968539.359' 
    capture_lex $P5041
    .const 'Sub' $P5042 = 'cuid_275_1346968539.359' 
    capture_lex $P5042
    .const 'Sub' $P5043 = 'cuid_276_1346968539.359' 
    capture_lex $P5043
    .const 'Sub' $P5044 = 'cuid_277_1346968539.359' 
    capture_lex $P5044
    .const 'Sub' $P5045 = 'cuid_278_1346968539.359' 
    capture_lex $P5045
    .const 'Sub' $P5046 = 'cuid_279_1346968539.359' 
    capture_lex $P5046
    .const 'Sub' $P5047 = 'cuid_280_1346968539.359' 
    capture_lex $P5047
    .const 'Sub' $P5048 = 'cuid_281_1346968539.359' 
    capture_lex $P5048
    .const 'Sub' $P5049 = 'cuid_282_1346968539.359' 
    capture_lex $P5049
    .const 'Sub' $P5050 = 'cuid_283_1346968539.359' 
    capture_lex $P5050
    .const 'Sub' $P5051 = 'cuid_284_1346968539.359' 
    capture_lex $P5051
    .const 'Sub' $P5052 = 'cuid_285_1346968539.359' 
    capture_lex $P5052
    .const 'Sub' $P5053 = 'cuid_286_1346968539.359' 
    capture_lex $P5053
    .const 'Sub' $P5054 = 'cuid_287_1346968539.359' 
    capture_lex $P5054
    .const 'Sub' $P5055 = 'cuid_288_1346968539.359' 
    capture_lex $P5055
    .const 'Sub' $P5056 = 'cuid_289_1346968539.359' 
    capture_lex $P5056
    .const 'Sub' $P5057 = 'cuid_290_1346968539.359' 
    capture_lex $P5057
    .const 'Sub' $P5058 = 'cuid_291_1346968539.359' 
    capture_lex $P5058
    .const 'Sub' $P5059 = 'cuid_292_1346968539.359' 
    capture_lex $P5059
    .const 'Sub' $P5060 = 'cuid_293_1346968539.359' 
    capture_lex $P5060
    .const 'Sub' $P5061 = 'cuid_294_1346968539.359' 
    capture_lex $P5061
    .const 'Sub' $P5062 = 'cuid_295_1346968539.359' 
    capture_lex $P5062
    .const 'Sub' $P5063 = 'cuid_296_1346968539.359' 
    capture_lex $P5063
    .const 'Sub' $P5064 = 'cuid_297_1346968539.359' 
    capture_lex $P5064
    .const 'Sub' $P5065 = 'cuid_298_1346968539.359' 
    capture_lex $P5065
    .const 'Sub' $P5066 = 'cuid_299_1346968539.359' 
    capture_lex $P5066
    .const 'Sub' $P5067 = 'cuid_300_1346968539.359' 
    capture_lex $P5067
    .const 'Sub' $P5068 = 'cuid_301_1346968539.359' 
    capture_lex $P5068
    .const 'Sub' $P5069 = 'cuid_302_1346968539.359' 
    capture_lex $P5069
    .const 'Sub' $P5070 = 'cuid_303_1346968539.359' 
    capture_lex $P5070
    .const 'Sub' $P5071 = 'cuid_304_1346968539.359' 
    capture_lex $P5071
    .const 'Sub' $P5072 = 'cuid_305_1346968539.359' 
    capture_lex $P5072
    .const 'Sub' $P5073 = 'cuid_306_1346968539.359' 
    capture_lex $P5073
    .const 'Sub' $P5074 = 'cuid_307_1346968539.359' 
    capture_lex $P5074
    .const 'Sub' $P5075 = 'cuid_308_1346968539.359' 
    capture_lex $P5075
    .const 'Sub' $P5076 = 'cuid_309_1346968539.359' 
    capture_lex $P5076
    .const 'Sub' $P5077 = 'cuid_310_1346968539.359' 
    capture_lex $P5077
    .const 'Sub' $P5078 = 'cuid_311_1346968539.359' 
    capture_lex $P5078
    .const 'Sub' $P5079 = 'cuid_312_1346968539.359' 
    capture_lex $P5079
    .const 'Sub' $P5080 = 'cuid_313_1346968539.359' 
    capture_lex $P5080
    .const 'Sub' $P5081 = 'cuid_314_1346968539.359' 
    capture_lex $P5081
    .const 'Sub' $P5082 = 'cuid_315_1346968539.359' 
    capture_lex $P5082
    .const 'Sub' $P5083 = 'cuid_316_1346968539.359' 
    capture_lex $P5083
    .const 'Sub' $P5084 = 'cuid_317_1346968539.359' 
    capture_lex $P5084
    .const 'Sub' $P5085 = 'cuid_318_1346968539.359' 
    capture_lex $P5085
    .const 'Sub' $P5086 = 'cuid_319_1346968539.359' 
    capture_lex $P5086
    .const 'Sub' $P5087 = 'cuid_320_1346968539.359' 
    capture_lex $P5087
    .const 'Sub' $P5088 = 'cuid_321_1346968539.359' 
    capture_lex $P5088
    .const 'Sub' $P5089 = 'cuid_322_1346968539.359' 
    capture_lex $P5089
    .const 'Sub' $P5090 = 'cuid_323_1346968539.359' 
    capture_lex $P5090
    .const 'Sub' $P5091 = 'cuid_324_1346968539.359' 
    capture_lex $P5091
    .const 'Sub' $P5092 = 'cuid_325_1346968539.359' 
    capture_lex $P5092
    .const 'Sub' $P5093 = 'cuid_326_1346968539.359' 
    capture_lex $P5093
    .const 'Sub' $P5094 = 'cuid_327_1346968539.359' 
    capture_lex $P5094
    .const 'Sub' $P5095 = 'cuid_328_1346968539.359' 
    capture_lex $P5095
    .const 'Sub' $P5096 = 'cuid_329_1346968539.359' 
    capture_lex $P5096
    .const 'Sub' $P5097 = 'cuid_330_1346968539.359' 
    capture_lex $P5097
    .const 'Sub' $P5098 = 'cuid_331_1346968539.359' 
    capture_lex $P5098
    .const 'Sub' $P5099 = 'cuid_332_1346968539.359' 
    capture_lex $P5099
    .const 'Sub' $P5100 = 'cuid_333_1346968539.359' 
    capture_lex $P5100
    .const 'Sub' $P5101 = 'cuid_334_1346968539.359' 
    capture_lex $P5101
    .const 'Sub' $P5102 = 'cuid_335_1346968539.359' 
    capture_lex $P5102
    .const 'Sub' $P5103 = 'cuid_336_1346968539.359' 
    capture_lex $P5103
    .const 'Sub' $P5104 = 'cuid_337_1346968539.359' 
    capture_lex $P5104
    .const 'Sub' $P5105 = 'cuid_338_1346968539.359' 
    capture_lex $P5105
    .const 'Sub' $P5106 = 'cuid_339_1346968539.359' 
    capture_lex $P5106
    .const 'Sub' $P5107 = 'cuid_340_1346968539.359' 
    capture_lex $P5107
    .const 'Sub' $P5108 = 'cuid_341_1346968539.359' 
    capture_lex $P5108
    .const 'Sub' $P5109 = 'cuid_342_1346968539.359' 
    capture_lex $P5109
    .const 'Sub' $P5110 = 'cuid_343_1346968539.359' 
    capture_lex $P5110
    .const 'Sub' $P5111 = 'cuid_344_1346968539.359' 
    capture_lex $P5111
    .const 'Sub' $P5112 = 'cuid_345_1346968539.359' 
    capture_lex $P5112
    .const 'Sub' $P5113 = 'cuid_346_1346968539.359' 
    capture_lex $P5113
    .const 'Sub' $P5114 = 'cuid_347_1346968539.359' 
    capture_lex $P5114
    .const 'Sub' $P5115 = 'cuid_348_1346968539.359' 
    capture_lex $P5115
    .const 'Sub' $P5116 = 'cuid_349_1346968539.359' 
    capture_lex $P5116
    .const 'Sub' $P5117 = 'cuid_350_1346968539.359' 
    capture_lex $P5117
    .const 'Sub' $P5118 = 'cuid_351_1346968539.359' 
    capture_lex $P5118
    .const 'Sub' $P5119 = 'cuid_352_1346968539.359' 
    capture_lex $P5119
    .const 'Sub' $P5120 = 'cuid_353_1346968539.359' 
    capture_lex $P5120
    .const 'Sub' $P5121 = 'cuid_354_1346968539.359' 
    capture_lex $P5121
    .const 'Sub' $P5122 = 'cuid_355_1346968539.359' 
    capture_lex $P5122
    .return ($P110) 
.end
.HLL "nqp"
.namespace []
.sub "xblock_immediate" :subid("cuid_406_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1485
    .param pmc _lex_param_0 
    .lex "$xblock", _lex_param_0 
.annotate 'line', 1486
    set $P5001, _lex_param_0[1]
    unless_null $P5001, fallback3609
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5002
  fallback3609:
    $P5003 = "&block_immediate"($P5001)
    set _lex_param_0[1], $P5003
    .return (_lex_param_0) 
.end
.HLL "nqp"
.namespace []
.sub "block_immediate" :subid("cuid_409_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1490
    .param pmc _lex_param_0 
    .const 'Sub' $P5006 = 'cuid_408_1346968539.359' 
    capture_lex $P5006 
    .lex "$block", _lex_param_0 
.annotate 'line', 1491
    $P5001 = _lex_param_0."blocktype"("immediate")
.annotate 'line', 1492
    $P5002 = _lex_param_0."symtable"()
    set $P5005, $P5002
    if $P5002 goto unless1255_end3611 
    .const 'Sub' $P5003 = 'cuid_408_1346968539.359' 
    capture_lex $P5003
    $P5004 = $P5003()
    set $P5005, $P5004
  unless1255_end3611:
    .return (_lex_param_0) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_408_1346968539.359") :anon :lex :outer("cuid_409_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1492
    .const 'Sub' $P5017 = 'cuid_407_1346968539.359' 
    capture_lex $P5017 
    .lex "$stmts", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
.annotate 'line', 1493
    get_hll_global $P5005, "GLOBAL"
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Stmts"]
    unless_null $P5002, fallback3612
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5002, $P5006
  fallback3612:
    find_lex $P5007, "$block"
    $P5008 = $P5007."node"()
    $P5009 = $P5002."new"($P5008 :named("node"))
    set $P101, $P5009
.annotate 'line', 1494
    find_lex $P5013, "$block"
    $P5014 = $P5013."list"()
    set $P5010, $P5014
    iter $P5012, $P5014
  for_next3613:
    unless $P5012, for_done3615
    shift $P5016, $P5012
  for_redo3614:
    .const 'Sub' $P5015 = 'cuid_407_1346968539.359' 
    capture_lex $P5015
    $P5010 = $P5015($P5016)
    goto for_next3613
  for_done3615:
    store_lex "$block", $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_407_1346968539.359") :anon :lex :outer("cuid_408_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1494
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$stmts"
    $P5002 = $P5001."push"(_lex_param_0)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "default_for" :subid("cuid_412_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1500
    .param pmc _lex_param_0 
    .const 'Sub' $P5017 = 'cuid_411_1346968539.359' 
    capture_lex $P5017 
    .lex "$sigil", _lex_param_0 
    set $S5001, _lex_param_0
    iseq $I5001, $S5001, "@"
    unless $I5001 goto if1256_else3616 
.annotate 'line', 1501
.annotate 'line', 1502
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3618
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5005
  fallback3618:
    $P5006 = $P5001."new"("list" :named("op"))
    set $P5016, $P5006
    goto if1256_end3617
  if1256_else3616:
    set $S5002, _lex_param_0
    iseq $I5002, $S5002, "%"
    unless $I5002 goto if1257_else3619 
.annotate 'line', 1504
.annotate 'line', 1505
    get_hll_global $P5010, "GLOBAL"
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Op"]
    unless_null $P5007, fallback3621
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5007, $P5011
  fallback3621:
    $P5012 = $P5007."new"("hash" :named("op"))
    set $P5015, $P5012
    goto if1257_end3620
  if1257_else3619:
    .const 'Sub' $P5013 = 'cuid_411_1346968539.359' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5015, $P5014
  if1257_end3620:
    set $P5016, $P5015
  if1256_end3617:
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_411_1346968539.359") :anon :lex :outer("cuid_412_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1507
    .const 'Sub' $P5022 = 'cuid_410_1346968539.359' 
    capture_lex $P5022 
    .lex "$default", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    new $P5020, 'ExceptionHandler'
    set_label $P5020, catch_handler_12623630
    $P5020.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5020
.annotate 'line', 1509
    new $P5018, 'ExceptionHandler'
    set_label $P5018, catch_handler_12603627
    $P5018.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5018
.annotate 'line', 1510
    get_hll_global $P5005, "GLOBAL"
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["WVal"]
    unless_null $P5002, fallback3622
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5002, $P5006
  fallback3622:
    find_dynamic_lex $P5007, "$*W"
    unless_null $P5007, fallback3623
    get_hll_global $P5010, "GLOBAL"
    get_who $P5009, $P5010
    set $P5008, $P5009["$W"]
    unless_null $P5008, fallback3624
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5008, $P5011
  fallback3624:
    unless_null $P5008, vivi_12583625
    die "Contextual $*W not found"
    box $P5012, "Contextual $*W not found"
    set $P5008, $P5012
  vivi_12583625:
    set $P5007, $P5008
  fallback3623:
    new $P5013, 'ResizablePMCArray'
    box $P5014, "NQPMu"
    push $P5013, $P5014
    $P5015 = $P5007."find_sym"($P5013)
    $P5016 = $P5002."new"($P5015 :named("value"))
    set $P101, $P5016
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5019, $P5017
    pop_eh 
    goto skip_handler_12593626
  catch_handler_12603627:
    .get_results ($P5018) 
    .const 'Sub' $P10001 = 'cuid_410_1346968539.359' 
    capture_lex $P10001
    $P10002 = $P10001($P5018)
    set $I10001, 1
    set $P5018["handled"], $I10001
    nqp_get_sc_object $P10003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    finalize $P5018
    pop_upto_eh $P5018
    pop_eh 
    set $P5019, $P10003
    goto skip_handler_12593626
  skip_handler_12593626:
    set $P5021, $P5019
    pop_eh 
    goto skip_handler_12613629
  catch_handler_12623630:
    .get_results ($P5020) 
    set $I10001, 1
    set $P5020["handled"], $I10001
    nqp_get_sc_object $P10001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    finalize $P5020
    pop_upto_eh $P5020
    pop_eh 
    set $P5021, $P10001
    goto skip_handler_12613629
  skip_handler_12613629:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_410_1346968539.359") :anon :lex :outer("cuid_411_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1511
    .param pmc _lex_param_0 
    .lex "$!", $P101 
    .lex "$_", _lex_param_0 
    set $P101, _lex_param_0
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3628
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5005
  fallback3628:
    $P5006 = $P5001."new"("null" :named("op"))
    store_lex "$default", $P5006
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "colonpair_str" :subid("cuid_415_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1527
    .param pmc _lex_param_0 
    .const 'Sub' $P5010 = 'cuid_414_1346968539.359' 
    capture_lex $P5010 
    .lex "$ast", _lex_param_0 
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3633
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5005
  fallback3633:
    type_check $I5001, _lex_param_0, $P5001
    unless $I5001 goto if1263_else3631 
    .const 'Sub' $P5006 = 'cuid_414_1346968539.359' 
    capture_lex $P5006
    $P5007 = $P5006()
    set $P5009, $P5007
    goto if1263_end3632
  if1263_else3631:
.annotate 'line', 1532
.annotate 'line', 1533
    $P5008 = _lex_param_0."value"()
    set $P5009, $P5008
  if1263_end3632:
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_414_1346968539.359") :anon :lex :outer("cuid_415_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1528
    .const 'Sub' $P5009 = 'cuid_413_1346968539.359' 
    capture_lex $P5009 
    .lex "@parts", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
.annotate 'line', 1530
    find_lex $P5005, "$ast"
    $P5006 = $P5005."list"()
    set $P5002, $P5006
    iter $P5004, $P5006
  for_next3634:
    unless $P5004, for_done3636
    shift $P5008, $P5004
  for_redo3635:
    .const 'Sub' $P5007 = 'cuid_413_1346968539.359' 
    capture_lex $P5007
    $P5002 = $P5007($P5008)
    goto for_next3634
  for_done3636:
    join $S5001, " ", $P101
    .return ($S5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_413_1346968539.359") :anon :lex :outer("cuid_414_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1530
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "@parts"
    $P5002 = _lex_param_0."value"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "import_HOW_exports" :subid("cuid_417_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1737
    .param pmc _lex_param_0 
    .const 'Sub' $P5011 = 'cuid_416_1346968539.359' 
    capture_lex $P5011 
    .lex "$UNIT", _lex_param_0 
    exists $I5001, _lex_param_0["EXPORTHOW"]
    box $P5010, $I5001
    set $P5009, $P5010
    unless $I5001 goto if1264_end3638 
.annotate 'line', 1739
    set $P5005, _lex_param_0["EXPORTHOW"]
    unless_null $P5005, fallback3639
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5005, $P5006
  fallback3639:
    get_who $P5004, $P5005
    set $P5001, $P5004
    iter $P5003, $P5004
  for_next3643:
    unless $P5003, for_done3645
    shift $P5008, $P5003
  for_redo3644:
    .const 'Sub' $P5007 = 'cuid_416_1346968539.359' 
    capture_lex $P5007
    $P5001 = $P5007($P5008)
    goto for_next3643
  for_done3645:
    set $P5009, $P5001
  if1264_end3638:
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_416_1346968539.359") :anon :lex :outer("cuid_417_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1740
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_dynamic_lex $P5001, "%*HOW"
    unless_null $P5001, fallback3640
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["%HOW"]
    unless_null $P5002, fallback3641
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%HOW"], $P5007
    set $P5002, $P5007
  fallback3641:
    unless_null $P5002, vivi_12653642
    die "Contextual %*HOW not found"
    box $P5008, "Contextual %*HOW not found"
    set $P5002, $P5008
  vivi_12653642:
    set $P5001, $P5002
  fallback3640:
.annotate 'line', 1741
    $P5009 = _lex_param_0."key"()
    set $S5001, $P5009
    $P5010 = _lex_param_0."value"()
    set $P5001[$S5001], $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "set_block_handler" :subid("cuid_418_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1849
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$/", _lex_param_0 
    .lex "$block", _lex_param_1 
    .lex "$type", _lex_param_2 
    find_dynamic_lex $P5001, "%*HANDLERS"
    unless_null $P5001, fallback3648
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["%HANDLERS"]
    unless_null $P5002, fallback3649
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%HANDLERS"], $P5007
    set $P5002, $P5007
  fallback3649:
    unless_null $P5002, vivi_12673650
    die "Contextual %*HANDLERS not found"
    box $P5008, "Contextual %*HANDLERS not found"
    set $P5002, $P5008
  vivi_12673650:
    set $P5001, $P5002
  fallback3648:
    set $S5001, _lex_param_2
    exists $I5001, $P5001[$S5001]
    box $P5011, $I5001
    set $P5010, $P5011
    unless $I5001 goto if1266_end3647 
.annotate 'line', 1850
    set $S5004, _lex_param_2
    concat $S5003, "Duplicate ", $S5004
    concat $S5002, $S5003, " handler in block"
    box $P5009, $S5002
    die $P5009
    set $P5010, $P5009
  if1266_end3647:
.annotate 'line', 1853
    $P5012 = _lex_param_1."arity"()
    set $P5042, $P5012
    if $P5012 goto unless1268_end3652 
.annotate 'line', 1854
.annotate 'line', 1855
    get_hll_global $P5016, "GLOBAL"
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["Op"]
    unless_null $P5013, fallback3653
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5013, $P5017
  fallback3653:
.annotate 'line', 1856
    get_hll_global $P5021, "GLOBAL"
    nqp_get_package_through_who $P5020, $P5021, "QAST"
    get_who $P5019, $P5020
    set $P5018, $P5019["Var"]
    unless_null $P5018, fallback3654
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5018, $P5022
  fallback3654:
    $P5023 = $P5018."new"("lexical" :named("scope"), "$!" :named("name"), "var" :named("decl"))
.annotate 'line', 1857
    get_hll_global $P5027, "GLOBAL"
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["Var"]
    unless_null $P5024, fallback3655
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5024, $P5028
  fallback3655:
    $P5029 = $P5024."new"("lexical" :named("scope"), "$_" :named("name"))
    $P5030 = $P5013."new"($P5023, $P5029, "bind" :named("op"))
    $P5031 = _lex_param_1."unshift"($P5030)
.annotate 'line', 1860
    get_hll_global $P5035, "GLOBAL"
    nqp_get_package_through_who $P5034, $P5035, "QAST"
    get_who $P5033, $P5034
    set $P5032, $P5033["Var"]
    unless_null $P5032, fallback3656
    nqp_get_sc_object $P5036, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5032, $P5036
  fallback3656:
    $P5037 = $P5032."new"("$_" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5038 = _lex_param_1."unshift"($P5037)
.annotate 'line', 1861
    $P5039 = _lex_param_1."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1862
    $P5040 = _lex_param_1."symbol"("$!", "lexical" :named("scope"))
.annotate 'line', 1863
    $P5041 = _lex_param_1."arity"(1)
    set $P5042, $P5041
  unless1268_end3652:
.annotate 'line', 1865
    $P5043 = _lex_param_1."blocktype"("declaration")
    find_dynamic_lex $P5044, "%*HANDLERS"
    unless_null $P5044, fallback3657
    get_hll_global $P5047, "GLOBAL"
    get_who $P5046, $P5047
    set $P5045, $P5046["%HANDLERS"]
    unless_null $P5045, fallback3658
    get_hll_global $P5049, "GLOBAL"
    get_who $P5048, $P5049
    new $P5050, 'Hash'
    set $P5048["%HANDLERS"], $P5050
    set $P5045, $P5050
  fallback3658:
    unless_null $P5045, vivi_12693659
    die "Contextual %*HANDLERS not found"
    box $P5051, "Contextual %*HANDLERS not found"
    set $P5045, $P5051
  vivi_12693659:
    set $P5044, $P5045
  fallback3657:
    set $S5005, _lex_param_2
.annotate 'line', 1866
    get_hll_global $P5055, "GLOBAL"
    nqp_get_package_through_who $P5054, $P5055, "QAST"
    get_who $P5053, $P5054
    set $P5052, $P5053["Stmts"]
    unless_null $P5052, fallback3660
    nqp_get_sc_object $P5056, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5052, $P5056
  fallback3660:
.annotate 'line', 1867
    get_hll_global $P5060, "GLOBAL"
    nqp_get_package_through_who $P5059, $P5060, "QAST"
    get_who $P5058, $P5059
    set $P5057, $P5058["Op"]
    unless_null $P5057, fallback3661
    nqp_get_sc_object $P5061, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5057, $P5061
  fallback3661:
.annotate 'line', 1869
    get_hll_global $P5065, "GLOBAL"
    nqp_get_package_through_who $P5064, $P5065, "QAST"
    get_who $P5063, $P5064
    set $P5062, $P5063["Op"]
    unless_null $P5062, fallback3662
    nqp_get_sc_object $P5066, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5062, $P5066
  fallback3662:
    $P5067 = $P5062."new"("exception" :named("op"))
    $P5068 = $P5057."new"(_lex_param_1, $P5067, "call" :named("op"))
.annotate 'line', 1871
    get_hll_global $P5072, "GLOBAL"
    nqp_get_package_through_who $P5071, $P5072, "QAST"
    get_who $P5070, $P5071
    set $P5069, $P5070["Op"]
    unless_null $P5069, fallback3663
    nqp_get_sc_object $P5073, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5069, $P5073
  fallback3663:
.annotate 'line', 1873
    get_hll_global $P5077, "GLOBAL"
    nqp_get_package_through_who $P5076, $P5077, "QAST"
    get_who $P5075, $P5076
    set $P5074, $P5075["Op"]
    unless_null $P5074, fallback3664
    nqp_get_sc_object $P5078, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5074, $P5078
  fallback3664:
    $P5079 = $P5074."new"("exception" :named("op"))
.annotate 'line', 1874
    get_hll_global $P5083, "GLOBAL"
    nqp_get_package_through_who $P5082, $P5083, "QAST"
    get_who $P5081, $P5082
    set $P5080, $P5081["SVal"]
    unless_null $P5080, fallback3665
    nqp_get_sc_object $P5084, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5080, $P5084
  fallback3665:
    $P5085 = $P5080."new"("handled" :named("value"))
.annotate 'line', 1875
    get_hll_global $P5089, "GLOBAL"
    nqp_get_package_through_who $P5088, $P5089, "QAST"
    get_who $P5087, $P5088
    set $P5086, $P5087["IVal"]
    unless_null $P5086, fallback3666
    nqp_get_sc_object $P5090, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5086, $P5090
  fallback3666:
    $P5091 = $P5086."new"(1 :named("value"))
    $P5092 = $P5069."new"($P5079, $P5085, $P5091, "bindkey_i" :named("op"))
.annotate 'line', 1877
    $P5093 = "&default_for"("$")
    $P5094 = $P5052."new"($P5068, $P5092, $P5093)
    set $P5044[$S5005], $P5094
    .return ($P5094) 
.end
.HLL "nqp"
.namespace []
.sub "only_star_block" :subid("cuid_419_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2411
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
.annotate 'line', 2412
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback3667
    get_hll_global $P5005, "GLOBAL"
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback3668
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5003, $P5006
  fallback3668:
    unless_null $P5003, vivi_12703669
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_12703669:
    set $P5002, $P5003
  fallback3667:
    $P5008 = $P5002."pop_lexpad"()
    set $P101, $P5008
.annotate 'line', 2413
    get_hll_global $P5012, "GLOBAL"
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["Op"]
    unless_null $P5009, fallback3670
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5009, $P5013
  fallback3670:
    $P5014 = $P5009."new"("nqpmultidispatch" :named("op"))
    $P5015 = $P101."push"($P5014)
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "attach_multi_signature" :subid("cuid_421_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2417
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5020 = 'cuid_420_1346968539.359' 
    capture_lex $P5020 
    .lex "$types", $P101 
    .lex "$definednesses", $P102 
    .lex "$code_obj", _lex_param_0 
    .lex "$routine", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
    new $P5003, 'ResizablePMCArray'
    set $P101, $P5003
    new $P5004, 'ResizablePMCArray'
    set $P102, $P5004
    set $P5008, _lex_param_1[0]
    unless_null $P5008, fallback3671
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5008, $P5009
  fallback3671:
    $P5010 = $P5008."list"()
    set $P5005, $P5010
    iter $P5007, $P5010
  for_next3685:
    unless $P5007, for_done3687
    shift $P5012, $P5007
  for_redo3686:
    .const 'Sub' $P5011 = 'cuid_420_1346968539.359' 
    capture_lex $P5011
    $P5005 = $P5011($P5012)
    goto for_next3685
  for_done3687:
.annotate 'line', 2429
    find_dynamic_lex $P5013, "$*W"
    unless_null $P5013, fallback3688
    get_hll_global $P5016, "GLOBAL"
    get_who $P5015, $P5016
    set $P5014, $P5015["$W"]
    unless_null $P5014, fallback3689
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5014, $P5017
  fallback3689:
    unless_null $P5014, vivi_12763690
    die "Contextual $*W not found"
    box $P5018, "Contextual $*W not found"
    set $P5014, $P5018
  vivi_12763690:
    set $P5013, $P5014
  fallback3688:
    $P5019 = $P5013."set_routine_signature"(_lex_param_0, $P101, $P102)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_420_1346968539.359") :anon :lex :outer("cuid_421_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2420
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Var"]
    unless_null $P5001, fallback3676
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5005
  fallback3676:
    type_check $I5001, _lex_param_0, $P5001
    set $I5003, $I5001
    unless $I5001 goto if1272_end3675 
.annotate 'line', 2421
    $P5006 = _lex_param_0."decl"()
    set $S5001, $P5006
    iseq $I5002, $S5001, "param"
    set $I5003, $I5002
  if1272_end3675:
    box $P5021, $I5003
    set $P5020, $P5021
    unless $I5003 goto if1271_end3673 
.annotate 'line', 2422
    find_lex $P5007, "$types"
    $P5008 = _lex_param_0."returns"()
    get_id $I5005, $P5008
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    get_id $I5006, $P5009
    iseq $I5004, $I5005, $I5006
    unless $I5004 goto if1273_else3677 
    null $P5010
    set $P5012, $P5010
    goto if1273_end3678
  if1273_else3677:
.annotate 'line', 2424
    $P5011 = _lex_param_0."returns"()
    set $P5012, $P5011
  if1273_end3678:
    $P5013 = $P5007."push"($P5012)
.annotate 'line', 2425
    find_lex $P5014, "$definednesses"
    set $P5015, _lex_param_0["definedness"]
    unless_null $P5015, fallback3681
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5015, $P5016
  fallback3681:
    set $S5002, $P5015
    iseq $I5007, $S5002, "D"
    unless $I5007 goto if1274_else3679 
    set $I5010, 1
    goto if1274_end3680
  if1274_else3679:
    set $P5017, _lex_param_0["definedness"]
    unless_null $P5017, fallback3684
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5017, $P5018
  fallback3684:
    set $S5003, $P5017
    iseq $I5008, $S5003, "U"
    unless $I5008 goto if1275_else3682 
    set $I5009, 2
    goto if1275_end3683
  if1275_else3682:
    set $I5009, 0
  if1275_end3683:
    set $I5010, $I5009
  if1274_end3680:
    $P5019 = $P5014."push"($I5010)
    set $P5020, $P5019
  if1271_end3673:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "wrap_return_handler" :subid("cuid_422_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2432
    .param pmc _lex_param_0 
    .lex "$past", _lex_param_0 
.annotate 'line', 2433
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3691
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5005
  fallback3691:
    $P5006 = $P5001."new"(_lex_param_0, "lexotic" :named("op"), "RETURN" :named("name"))
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "lexical_package_lookup" :subid("cuid_427_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2874
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5076 = 'cuid_425_1346968539.359' 
    capture_lex $P5076 
    .lex "$final_name", $P101 
    .lex "$lookup", $P102 
    .lex "@name", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
    root_new $P103, ['parrot';'Continuation']
    set_label $P103, lexotic_3692
    .lex "RETURN", $P103
    set $N5001, _lex_param_0
    set $N5002, 0
    iseq $I5001, $N5001, $N5002
    box $P5006, $I5001
    set $P5005, $P5006
    unless $I5001 goto if1277_end3695 
.annotate 'line', 2876
    $P5003 = _lex_param_1."CURSOR"()
    $P5004 = $P5003."panic"("Cannot compile empty name")
    set $P5005, $P5004
  if1277_end3695:
.annotate 'line', 2880
    $P5007 = _lex_param_0."pop"()
    set $P101, $P5007
.annotate 'line', 2881
    get_hll_global $P5011, "GLOBAL"
    nqp_get_package_through_who $P5010, $P5011, "QAST"
    get_who $P5009, $P5010
    set $P5008, $P5009["VarWithFallback"]
    unless_null $P5008, fallback3696
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5008, $P5012
  fallback3696:
.annotate 'line', 2883
    get_hll_global $P5016, "GLOBAL"
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["SVal"]
    unless_null $P5013, fallback3697
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5013, $P5017
  fallback3697:
    set $S5001, $P101
    $P5018 = $P5013."new"($S5001 :named("value"))
    $P5019 = $P5008."new"($P5018, "associative" :named("scope"))
    set $P102, $P5019
    set $N5003, _lex_param_0
    set $N5004, 0
    iseq $I5002, $N5003, $N5004
    unless $I5002 goto if1278_else3698 
.annotate 'line', 2888
.annotate 'line', 2889
    get_hll_global $P5023, "GLOBAL"
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback3700
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5020, $P5024
  fallback3700:
.annotate 'line', 2891
    get_hll_global $P5028, "GLOBAL"
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["Var"]
    unless_null $P5025, fallback3701
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5025, $P5029
  fallback3701:
    $P5030 = $P5025."new"("$?PACKAGE" :named("name"), "lexical" :named("scope"))
    $P5031 = $P5020."new"($P5030, "who" :named("op"))
    $P5032 = $P102."unshift"($P5031)
.annotate 'line', 2893
    get_hll_global $P5036, "GLOBAL"
    nqp_get_package_through_who $P5035, $P5036, "QAST"
    get_who $P5034, $P5035
    set $P5033, $P5034["Op"]
    unless_null $P5033, fallback3702
    nqp_get_sc_object $P5037, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5033, $P5037
  fallback3702:
.annotate 'line', 2895
    get_hll_global $P5041, "GLOBAL"
    nqp_get_package_through_who $P5040, $P5041, "QAST"
    get_who $P5039, $P5040
    set $P5038, $P5039["Op"]
    unless_null $P5038, fallback3703
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5038, $P5042
  fallback3703:
.annotate 'line', 2897
    get_hll_global $P5046, "GLOBAL"
    nqp_get_package_through_who $P5045, $P5046, "QAST"
    get_who $P5044, $P5045
    set $P5043, $P5044["Op"]
    unless_null $P5043, fallback3704
    nqp_get_sc_object $P5047, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5043, $P5047
  fallback3704:
.annotate 'line', 2899
    get_hll_global $P5051, "GLOBAL"
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["VM"]
    unless_null $P5048, fallback3705
    nqp_get_sc_object $P5052, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5048, $P5052
  fallback3705:
.annotate 'line', 2900
    get_hll_global $P5056, "GLOBAL"
    nqp_get_package_through_who $P5055, $P5056, "QAST"
    get_who $P5054, $P5055
    set $P5053, $P5054["SVal"]
    unless_null $P5053, fallback3706
    nqp_get_sc_object $P5057, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5053, $P5057
  fallback3706:
    $P5058 = $P5053."new"("GLOBAL" :named("value"))
    $P5059 = $P5048."new"($P5058, "get_hll_global Ps" :named("pirop"))
    $P5060 = $P5043."new"($P5059, "who" :named("op"))
.annotate 'line', 2902
    get_hll_global $P5064, "GLOBAL"
    nqp_get_package_through_who $P5063, $P5064, "QAST"
    get_who $P5062, $P5063
    set $P5061, $P5062["SVal"]
    unless_null $P5061, fallback3707
    nqp_get_sc_object $P5065, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5061, $P5065
  fallback3707:
    set $S5002, $P101
    $P5066 = $P5061."new"($S5002 :named("value"))
    $P5067 = $P5038."new"($P5060, $P5066, "atkey" :named("op"))
.annotate 'line', 2904
    set $S5004, $P101
    substr $S5003, $S5004, 0, 1
    $P5068 = "&default_for"($S5003)
    $P5069 = $P5033."new"($P5067, $P5068, "ifnull" :named("op"))
    $P5070 = $P102."fallback"($P5069)
    set $P5073, $P5070
    goto if1278_end3699
  if1278_else3698:
    .const 'Sub' $P5071 = 'cuid_425_1346968539.359' 
    capture_lex $P5071
    $P5072 = $P5071()
    set $P5073, $P5072
  if1278_end3699:
    find_lex $P5074, "RETURN"
    $P5075 = $P5074($P102)
    goto lexotic_3693
  lexotic_3692:
    .get_results ($P5075)
  lexotic_3693:
    .return ($P5075) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_425_1346968539.359") :anon :lex :outer("cuid_427_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2910
    .const 'Sub' $P5070 = 'cuid_424_1346968539.359' 
    capture_lex $P5070 
    .const 'Sub' $P5070 = 'cuid_426_1346968539.359' 
    capture_lex $P5070 
    .lex "$path", $P101 
    .lex "$sigil", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
.annotate 'line', 2912
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback3710
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback3711
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5004, $P5007
  fallback3711:
    unless_null $P5004, vivi_12803712
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_12803712:
    set $P5003, $P5004
  fallback3710:
    find_lex $P5010, "@name"
    set $P5009, $P5010[0]
    unless_null $P5009, fallback3713
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5009, $P5011
  fallback3713:
    $P5012 = $P5003."is_lexical"($P5009)
    unless $P5012 goto if1279_else3708 
    .const 'Sub' $P5013 = 'cuid_424_1346968539.359' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5027, $P5014
    goto if1279_end3709
  if1279_else3708:
.annotate 'line', 2921
.annotate 'line', 2922
    get_hll_global $P5018, "GLOBAL"
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["VM"]
    unless_null $P5015, fallback3721
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5015, $P5019
  fallback3721:
.annotate 'line', 2923
    get_hll_global $P5023, "GLOBAL"
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["SVal"]
    unless_null $P5020, fallback3722
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5020, $P5024
  fallback3722:
    $P5025 = $P5020."new"("GLOBAL" :named("value"))
    $P5026 = $P5015."new"($P5025, "get_hll_global Ps" :named("pirop"))
    set $P101, $P5026
    set $P5027, $P101
  if1279_end3709:
    find_lex $P5029, "@name"
    set $P5028, $P5029[0]
    unless_null $P5028, fallback3725
    nqp_get_sc_object $P5030, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5028, $P5030
  fallback3725:
    set $S5001, $P5028
    iseq $I5001, $S5001, "GLOBAL"
    box $P5034, $I5001
    set $P5033, $P5034
    unless $I5001 goto if1284_end3724 
.annotate 'line', 2925
.annotate 'line', 2926
    find_lex $P5031, "@name"
    $P5032 = $P5031."shift"()
    set $P5033, $P5032
  if1284_end3724:
    find_lex $P5038, "@name"
    set $P5035, $P5038
    iter $P5037, $P5038
  for_next3728:
    unless $P5037, for_done3730
    shift $P5040, $P5037
  for_redo3729:
    .const 'Sub' $P5039 = 'cuid_426_1346968539.359' 
    capture_lex $P5039
    $P5035 = $P5039($P5040)
    goto for_next3728
  for_done3730:
.annotate 'line', 2933
    find_lex $P5041, "$lookup"
    get_hll_global $P5045, "GLOBAL"
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["Op"]
    unless_null $P5042, fallback3731
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5042, $P5046
  fallback3731:
    $P5047 = $P5042."new"($P101, "who" :named("op"))
    $P5048 = $P5041."unshift"($P5047)
    find_lex $P5049, "$final_name"
    set $S5003, $P5049
    substr $S5002, $S5003, 0, 1
    box $P5050, $S5002
    set $P102, $P5050
    set $S5004, $P102
    iseq $I5002, $S5004, "@"
    set $I5004, $I5002
    if $I5002 goto unless1286_end3735 
    set $S5005, $P102
    iseq $I5003, $S5005, "%"
    set $I5004, $I5003
  unless1286_end3735:
    unless $I5004 goto if1285_else3732 
.annotate 'line', 2935
.annotate 'line', 2936
    find_lex $P5051, "$lookup"
    get_hll_global $P5055, "GLOBAL"
    nqp_get_package_through_who $P5054, $P5055, "QAST"
    get_who $P5053, $P5054
    set $P5052, $P5053["Op"]
    unless_null $P5052, fallback3736
    nqp_get_sc_object $P5056, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5052, $P5056
  fallback3736:
    find_lex $P5058, "$lookup"
    set $P5057, $P5058[0]
    unless_null $P5057, fallback3737
    nqp_get_sc_object $P5059, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5057, $P5059
  fallback3737:
    find_lex $P5061, "$lookup"
    set $P5060, $P5061[1]
    unless_null $P5060, fallback3738
    nqp_get_sc_object $P5062, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5060, $P5062
  fallback3738:
.annotate 'line', 2940
    $P5063 = "&default_for"($P102)
    $P5064 = $P5052."new"($P5057, $P5060, $P5063, "bindkey" :named("op"))
    $P5065 = $P5051."fallback"($P5064)
    set $P5069, $P5065
    goto if1285_end3733
  if1285_else3732:
.annotate 'line', 2943
.annotate 'line', 2944
    find_lex $P5066, "$lookup"
    $P5067 = "&default_for"($P102)
    $P5068 = $P5066."fallback"($P5067)
    set $P5069, $P5068
  if1285_end3733:
    .return ($P5069) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_424_1346968539.359") :anon :lex :outer("cuid_425_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2913
    .const 'Sub' $P5021 = 'cuid_423_1346968539.359' 
    capture_lex $P5021 
    .lex "$first", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    new $P5019, 'ExceptionHandler'
    set_label $P5019, catch_handler_12833719
    $P5019.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5019
.annotate 'line', 2914
    find_lex $P5002, "@name"
    $P5003 = $P5002."shift"()
    set $P101, $P5003
.annotate 'line', 2915
    get_hll_global $P5007, "GLOBAL"
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["WVal"]
    unless_null $P5004, fallback3714
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5004, $P5008
  fallback3714:
    find_dynamic_lex $P5009, "$*W"
    unless_null $P5009, fallback3715
    get_hll_global $P5012, "GLOBAL"
    get_who $P5011, $P5012
    set $P5010, $P5011["$W"]
    unless_null $P5010, fallback3716
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5010, $P5013
  fallback3716:
    unless_null $P5010, vivi_12813717
    die "Contextual $*W not found"
    box $P5014, "Contextual $*W not found"
    set $P5010, $P5014
  vivi_12813717:
    set $P5009, $P5010
  fallback3715:
    new $P5015, 'ResizablePMCArray'
    push $P5015, $P101
    $P5016 = $P5009."find_sym"($P5015)
    $P5017 = $P5004."new"($P5016 :named("value"))
    store_lex "$path", $P5017
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5020, $P5018
    pop_eh 
    goto skip_handler_12823718
  catch_handler_12833719:
    .get_results ($P5019) 
    .const 'Sub' $P10001 = 'cuid_423_1346968539.359' 
    capture_lex $P10001
    $P10002 = $P10001($P5019)
    set $I10001, 1
    set $P5019["handled"], $I10001
    nqp_get_sc_object $P10003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    finalize $P5019
    pop_upto_eh $P5019
    pop_eh 
    set $P5020, $P10003
    goto skip_handler_12823718
  skip_handler_12823718:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_423_1346968539.359") :anon :lex :outer("cuid_424_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2916
    .param pmc _lex_param_0 
    .lex "$!", $P101 
    .lex "$_", _lex_param_0 
    set $P101, _lex_param_0
.annotate 'line', 2917
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Var"]
    unless_null $P5001, fallback3720
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5005
  fallback3720:
    find_lex $P5006, "$first"
    $P5007 = $P5001."new"($P5006 :named("name"), "lexical" :named("scope"))
    store_lex "$path", $P5007
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_426_1346968539.359") :anon :lex :outer("cuid_425_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2928
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 2929
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VM"]
    unless_null $P5001, fallback3726
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5005
  fallback3726:
    find_lex $P5006, "$path"
.annotate 'line', 2931
    get_hll_global $P5010, "GLOBAL"
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["SVal"]
    unless_null $P5007, fallback3727
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5007, $P5011
  fallback3727:
    set $S5001, _lex_param_0
    $P5012 = $P5007."new"($S5001 :named("value"))
    $P5013 = $P5001."new"($P5006, $P5012, "nqp_get_package_through_who PPs" :named("pirop"))
    store_lex "$path", $P5013
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "TOP" :subid("cuid_244_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1517
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback3739
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback3739:
    set $P5001, _lex_param_1["comp_unit"]
    unless_null $P5001, fallback3740
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback3740:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "deflongname" :subid("cuid_245_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1519
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1520
    unless_null _lex_param_1, fallback3743
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback3743:
    set $P5001, _lex_param_1["colonpair"]
    unless_null $P5001, fallback3744
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback3744:
    unless $P5001 goto if1287_else3741 
    unless_null _lex_param_1, fallback3745
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5005
  fallback3745:
    set $P5004, _lex_param_1["identifier"]
    unless_null $P5004, fallback3746
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5004, $P5006
  fallback3746:
    set $S5006, $P5004
    concat $S5005, $S5006, ":"
.annotate 'line', 1521
    unless_null _lex_param_1, fallback3747
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5009
  fallback3747:
    set $P5008, _lex_param_1["colonpair"]
    unless_null $P5008, fallback3748
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5008, $P5010
  fallback3748:
    set $P5007, $P5008[0]
    unless_null $P5007, fallback3749
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5007, $P5011
  fallback3749:
    $P5012 = $P5007."ast"()
    $P5013 = $P5012."named"()
    set $S5007, $P5013
    concat $S5004, $S5005, $S5007
    concat $S5003, $S5004, "<"
.annotate 'line', 1522
    unless_null _lex_param_1, fallback3750
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5016
  fallback3750:
    set $P5015, _lex_param_1["colonpair"]
    unless_null $P5015, fallback3751
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5015, $P5017
  fallback3751:
    set $P5014, $P5015[0]
    unless_null $P5014, fallback3752
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5014, $P5018
  fallback3752:
    $P5019 = $P5014."ast"()
    $P5020 = "&colonpair_str"($P5019)
    set $S5008, $P5020
    concat $S5002, $S5003, $S5008
    concat $S5001, $S5002, ">"
    set $S5010, $S5001
    goto if1287_end3742
  if1287_else3741:
    set $S5009, _lex_param_1
    set $S5010, $S5009
  if1287_end3742:
    $P5021 = _lex_param_1."!make"($S5010)
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "comp_unit" :subid("cuid_246_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1537
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$mainline", $P101 
    .lex "$unit", $P102 
    .lex "$global_install", $P103 
    .lex "$main_tasks", $P104 
    .lex "$compunit", $P105 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P104, $P5004
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P105, $P5005
.annotate 'line', 1538
    unless_null _lex_param_1, fallback3753
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5007
  fallback3753:
    set $P5006, _lex_param_1["statementlist"]
    unless_null $P5006, fallback3754
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5006, $P5008
  fallback3754:
    $P5009 = $P5006."ast"()
    set $P101, $P5009
.annotate 'line', 1539
    find_dynamic_lex $P5010, "$*W"
    unless_null $P5010, fallback3755
    get_hll_global $P5013, "GLOBAL"
    get_who $P5012, $P5013
    set $P5011, $P5012["$W"]
    unless_null $P5011, fallback3756
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5011, $P5014
  fallback3756:
    unless_null $P5011, vivi_12883757
    die "Contextual $*W not found"
    box $P5015, "Contextual $*W not found"
    set $P5011, $P5015
  vivi_12883757:
    set $P5010, $P5011
  fallback3755:
    $P5016 = $P5010."pop_lexpad"()
    set $P102, $P5016
.annotate 'line', 1544
    get_hll_global $P5020, "GLOBAL"
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["VM"]
    unless_null $P5017, fallback3758
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5017, $P5021
  fallback3758:
.annotate 'line', 1546
    get_hll_global $P5025, "GLOBAL"
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["SVal"]
    unless_null $P5022, fallback3759
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5022, $P5026
  fallback3759:
    $P5027 = $P5022."new"("GLOBAL" :named("value"))
.annotate 'line', 1547
    get_hll_global $P5031, "GLOBAL"
    nqp_get_package_through_who $P5030, $P5031, "QAST"
    get_who $P5029, $P5030
    set $P5028, $P5029["WVal"]
    unless_null $P5028, fallback3760
    nqp_get_sc_object $P5032, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5028, $P5032
  fallback3760:
    find_dynamic_lex $P5033, "$*PACKAGE"
    unless_null $P5033, fallback3761
    get_hll_global $P5036, "GLOBAL"
    get_who $P5035, $P5036
    set $P5034, $P5035["$PACKAGE"]
    unless_null $P5034, fallback3762
    nqp_get_sc_object $P5037, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5034, $P5037
  fallback3762:
    unless_null $P5034, vivi_12893763
    die "Contextual $*PACKAGE not found"
    box $P5038, "Contextual $*PACKAGE not found"
    set $P5034, $P5038
  vivi_12893763:
    set $P5033, $P5034
  fallback3761:
    $P5039 = $P5028."new"($P5033 :named("value"))
    $P5040 = $P5017."new"($P5027, $P5039, "set_hll_global vsP" :named("pirop"))
    set $P103, $P5040
.annotate 'line', 1549
    find_dynamic_lex $P5041, "$*W"
    unless_null $P5041, fallback3764
    get_hll_global $P5044, "GLOBAL"
    get_who $P5043, $P5044
    set $P5042, $P5043["$W"]
    unless_null $P5042, fallback3765
    nqp_get_sc_object $P5045, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5042, $P5045
  fallback3765:
    unless_null $P5042, vivi_12903766
    die "Contextual $*W not found"
    box $P5046, "Contextual $*W not found"
    set $P5042, $P5046
  vivi_12903766:
    set $P5041, $P5042
  fallback3764:
    $P5047 = $P5041."add_fixup_task"($P103 :named("deserialize_past"), $P103 :named("fixup_past"))
    find_dynamic_lex $P5048, "$*HAS_YOU_ARE_HERE"
    unless_null $P5048, fallback3769
    get_hll_global $P5051, "GLOBAL"
    get_who $P5050, $P5051
    set $P5049, $P5050["$HAS_YOU_ARE_HERE"]
    unless_null $P5049, fallback3770
    nqp_get_sc_object $P5052, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5049, $P5052
  fallback3770:
    unless_null $P5049, vivi_12923771
    die "Contextual $*HAS_YOU_ARE_HERE not found"
    box $P5053, "Contextual $*HAS_YOU_ARE_HERE not found"
    set $P5049, $P5053
  vivi_12923771:
    set $P5048, $P5049
  fallback3769:
    set $P5057, $P5048
    if $P5048 goto unless1291_end3768 
.annotate 'line', 1554
.annotate 'line', 1555
    nqp_decontainerize $P5054, _lex_param_0
    $P5055 = $P5054."CTXSAVE"()
    $P5056 = $P102."push"($P5055)
    set $P5057, $P5056
  unless1291_end3768:
.annotate 'line', 1562
    get_hll_global $P5061, "GLOBAL"
    nqp_get_package_through_who $P5060, $P5061, "QAST"
    get_who $P5059, $P5060
    set $P5058, $P5059["Var"]
    unless_null $P5058, fallback3772
    nqp_get_sc_object $P5062, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5058, $P5062
  fallback3772:
    $P5063 = $P5058."new"("lexical" :named("scope"), "@ARGS" :named("name"), "param" :named("decl"), 1 :named("slurpy"))
    $P5064 = $P102."unshift"($P5063)
.annotate 'line', 1563
    get_hll_global $P5068, "GLOBAL"
    nqp_get_package_through_who $P5067, $P5068, "QAST"
    get_who $P5066, $P5067
    set $P5065, $P5066["Stmts"]
    unless_null $P5065, fallback3773
    nqp_get_sc_object $P5069, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5065, $P5069
  fallback3773:
.annotate 'line', 1564
    get_hll_global $P5073, "GLOBAL"
    nqp_get_package_through_who $P5072, $P5073, "QAST"
    get_who $P5071, $P5072
    set $P5070, $P5071["VM"]
    unless_null $P5070, fallback3774
    nqp_get_sc_object $P5074, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5070, $P5074
  fallback3774:
.annotate 'line', 1566
    get_hll_global $P5078, "GLOBAL"
    nqp_get_package_through_who $P5077, $P5078, "QAST"
    get_who $P5076, $P5077
    set $P5075, $P5076["SVal"]
    unless_null $P5075, fallback3775
    nqp_get_sc_object $P5079, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5075, $P5079
  fallback3775:
    $P5080 = $P5075."new"("ModuleLoader.pbc" :named("value"))
    $P5081 = $P5070."new"($P5080, "load_bytecode vs" :named("pirop"))
.annotate 'line', 1568
    get_hll_global $P5085, "GLOBAL"
    nqp_get_package_through_who $P5084, $P5085, "QAST"
    get_who $P5083, $P5084
    set $P5082, $P5083["Op"]
    unless_null $P5082, fallback3776
    nqp_get_sc_object $P5086, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5082, $P5086
  fallback3776:
.annotate 'line', 1570
    get_hll_global $P5090, "GLOBAL"
    nqp_get_package_through_who $P5089, $P5090, "QAST"
    get_who $P5088, $P5089
    set $P5087, $P5088["VM"]
    unless_null $P5087, fallback3777
    nqp_get_sc_object $P5091, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5087, $P5091
  fallback3777:
.annotate 'line', 1572
    get_hll_global $P5095, "GLOBAL"
    nqp_get_package_through_who $P5094, $P5095, "QAST"
    get_who $P5093, $P5094
    set $P5092, $P5093["SVal"]
    unless_null $P5092, fallback3778
    nqp_get_sc_object $P5096, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5092, $P5096
  fallback3778:
    $P5097 = $P5092."new"("ModuleLoader" :named("value"))
    $P5098 = $P5087."new"($P5097, "get_hll_global Ps" :named("pirop"))
.annotate 'line', 1574
    get_hll_global $P5102, "GLOBAL"
    nqp_get_package_through_who $P5101, $P5102, "QAST"
    get_who $P5100, $P5101
    set $P5099, $P5100["Op"]
    unless_null $P5099, fallback3779
    nqp_get_sc_object $P5103, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5099, $P5103
  fallback3779:
.annotate 'line', 1576
    get_hll_global $P5107, "GLOBAL"
    nqp_get_package_through_who $P5106, $P5107, "QAST"
    get_who $P5105, $P5106
    set $P5104, $P5105["VM"]
    unless_null $P5104, fallback3780
    nqp_get_sc_object $P5108, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5104, $P5108
  fallback3780:
    $P5109 = $P5104."new"("getinterp P" :named("pirop"))
.annotate 'line', 1577
    get_hll_global $P5113, "GLOBAL"
    nqp_get_package_through_who $P5112, $P5113, "QAST"
    get_who $P5111, $P5112
    set $P5110, $P5111["SVal"]
    unless_null $P5110, fallback3781
    nqp_get_sc_object $P5114, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5110, $P5114
  fallback3781:
    $P5115 = $P5110."new"("context" :named("value"))
    $P5116 = $P5099."new"($P5109, $P5115, "atkey" :named("op"))
    $P5117 = $P5082."new"($P5098, $P5116, "callmethod" :named("op"), "set_mainline_module" :named("name"))
    $P5118 = $P5065."new"($P5081, $P5117)
    set $P104, $P5118
    find_dynamic_lex $P5119, "$*MAIN_SUB"
    unless_null $P5119, fallback3784
    get_hll_global $P5122, "GLOBAL"
    get_who $P5121, $P5122
    set $P5120, $P5121["$MAIN_SUB"]
    unless_null $P5120, fallback3785
    nqp_get_sc_object $P5123, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5120, $P5123
  fallback3785:
    unless_null $P5120, vivi_12943786
    die "Contextual $*MAIN_SUB not found"
    box $P5124, "Contextual $*MAIN_SUB not found"
    set $P5120, $P5124
  vivi_12943786:
    set $P5119, $P5120
  fallback3784:
    set $P5150, $P5119
    unless $P5119 goto if1293_end3783 
.annotate 'line', 1581
.annotate 'line', 1582
    get_hll_global $P5128, "GLOBAL"
    nqp_get_package_through_who $P5127, $P5128, "QAST"
    get_who $P5126, $P5127
    set $P5125, $P5126["Op"]
    unless_null $P5125, fallback3787
    nqp_get_sc_object $P5129, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5125, $P5129
  fallback3787:
.annotate 'line', 1583
    get_hll_global $P5133, "GLOBAL"
    nqp_get_package_through_who $P5132, $P5133, "QAST"
    get_who $P5131, $P5132
    set $P5130, $P5131["BVal"]
    unless_null $P5130, fallback3788
    nqp_get_sc_object $P5134, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5130, $P5134
  fallback3788:
    find_dynamic_lex $P5135, "$*MAIN_SUB"
    unless_null $P5135, fallback3789
    get_hll_global $P5138, "GLOBAL"
    get_who $P5137, $P5138
    set $P5136, $P5137["$MAIN_SUB"]
    unless_null $P5136, fallback3790
    nqp_get_sc_object $P5139, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5136, $P5139
  fallback3790:
    unless_null $P5136, vivi_12953791
    die "Contextual $*MAIN_SUB not found"
    box $P5140, "Contextual $*MAIN_SUB not found"
    set $P5136, $P5140
  vivi_12953791:
    set $P5135, $P5136
  fallback3789:
    $P5141 = $P5130."new"($P5135 :named("value"))
.annotate 'line', 1584
    get_hll_global $P5145, "GLOBAL"
    nqp_get_package_through_who $P5144, $P5145, "QAST"
    get_who $P5143, $P5144
    set $P5142, $P5143["Var"]
    unless_null $P5142, fallback3792
    nqp_get_sc_object $P5146, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5142, $P5146
  fallback3792:
    $P5147 = $P5142."new"("lexical" :named("scope"), "@ARGS" :named("name"), 1 :named("flat"))
    $P5148 = $P5125."new"($P5141, $P5147, "call" :named("op"))
    $P5149 = $P104."push"($P5148)
    set $P5150, $P5149
  if1293_end3783:
.annotate 'line', 1587
    get_hll_global $P5154, "GLOBAL"
    nqp_get_package_through_who $P5153, $P5154, "QAST"
    get_who $P5152, $P5153
    set $P5151, $P5152["Op"]
    unless_null $P5151, fallback3793
    nqp_get_sc_object $P5155, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5151, $P5155
  fallback3793:
.annotate 'line', 1589
    get_hll_global $P5159, "GLOBAL"
    nqp_get_package_through_who $P5158, $P5159, "QAST"
    get_who $P5157, $P5158
    set $P5156, $P5157["Var"]
    unless_null $P5156, fallback3794
    nqp_get_sc_object $P5160, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5156, $P5160
  fallback3794:
    $P5161 = $P5156."new"("lexical" :named("scope"), "@ARGS" :named("name"))
    $P5162 = $P5151."new"($P5161, $P104, "if" :named("op"))
    $P5163 = $P101."push"($P5162)
.annotate 'line', 1594
    $P5164 = $P102."push"($P101)
.annotate 'line', 1597
    find_dynamic_lex $P5165, "$*W"
    unless_null $P5165, fallback3795
    get_hll_global $P5168, "GLOBAL"
    get_who $P5167, $P5168
    set $P5166, $P5167["$W"]
    unless_null $P5166, fallback3796
    nqp_get_sc_object $P5169, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5166, $P5169
  fallback3796:
    unless_null $P5166, vivi_12963797
    die "Contextual $*W not found"
    box $P5170, "Contextual $*W not found"
    set $P5166, $P5170
  vivi_12963797:
    set $P5165, $P5166
  fallback3795:
    $P5171 = $P5165."libs"()
    $P5172 = $P102."push"($P5171)
.annotate 'line', 1600
    get_hll_global $P5176, "GLOBAL"
    nqp_get_package_through_who $P5175, $P5176, "QAST"
    get_who $P5174, $P5175
    set $P5173, $P5174["CompUnit"]
    unless_null $P5173, fallback3798
    nqp_get_sc_object $P5177, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5173, $P5177
  fallback3798:
.annotate 'line', 1604
    find_dynamic_lex $P5178, "$*W"
    unless_null $P5178, fallback3799
    get_hll_global $P5181, "GLOBAL"
    get_who $P5180, $P5181
    set $P5179, $P5180["$W"]
    unless_null $P5179, fallback3800
    nqp_get_sc_object $P5182, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5179, $P5182
  fallback3800:
    unless_null $P5179, vivi_12973801
    die "Contextual $*W not found"
    box $P5183, "Contextual $*W not found"
    set $P5179, $P5183
  vivi_12973801:
    set $P5178, $P5179
  fallback3799:
    $P5184 = $P5178."sc"()
.annotate 'line', 1605
    find_dynamic_lex $P5185, "$*W"
    unless_null $P5185, fallback3802
    get_hll_global $P5188, "GLOBAL"
    get_who $P5187, $P5188
    set $P5186, $P5187["$W"]
    unless_null $P5186, fallback3803
    nqp_get_sc_object $P5189, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5186, $P5189
  fallback3803:
    unless_null $P5186, vivi_12983804
    die "Contextual $*W not found"
    box $P5190, "Contextual $*W not found"
    set $P5186, $P5190
  vivi_12983804:
    set $P5185, $P5186
  fallback3802:
    $P5191 = $P5185."code_ref_blocks"()
.annotate 'line', 1606
    find_dynamic_lex $P5192, "$*W"
    unless_null $P5192, fallback3805
    get_hll_global $P5195, "GLOBAL"
    get_who $P5194, $P5195
    set $P5193, $P5194["$W"]
    unless_null $P5193, fallback3806
    nqp_get_sc_object $P5196, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5193, $P5196
  fallback3806:
    unless_null $P5193, vivi_12993807
    die "Contextual $*W not found"
    box $P5197, "Contextual $*W not found"
    set $P5193, $P5197
  vivi_12993807:
    set $P5192, $P5193
  fallback3805:
    $P5198 = $P5192."is_precompilation_mode"()
.annotate 'line', 1607
    find_dynamic_lex $P5199, "$*W"
    unless_null $P5199, fallback3808
    get_hll_global $P5202, "GLOBAL"
    get_who $P5201, $P5202
    set $P5200, $P5201["$W"]
    unless_null $P5200, fallback3809
    nqp_get_sc_object $P5203, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5200, $P5203
  fallback3809:
    unless_null $P5200, vivi_13003810
    die "Contextual $*W not found"
    box $P5204, "Contextual $*W not found"
    set $P5200, $P5204
  vivi_13003810:
    set $P5199, $P5200
  fallback3808:
    $P5205 = $P5199."load_dependency_tasks"()
.annotate 'line', 1608
    find_dynamic_lex $P5206, "$*W"
    unless_null $P5206, fallback3811
    get_hll_global $P5209, "GLOBAL"
    get_who $P5208, $P5209
    set $P5207, $P5208["$W"]
    unless_null $P5207, fallback3812
    nqp_get_sc_object $P5210, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5207, $P5210
  fallback3812:
    unless_null $P5207, vivi_13013813
    die "Contextual $*W not found"
    box $P5211, "Contextual $*W not found"
    set $P5207, $P5211
  vivi_13013813:
    set $P5206, $P5207
  fallback3811:
    $P5212 = $P5206."fixup_tasks"()
.annotate 'line', 1613
    get_hll_global $P5216, "GLOBAL"
    nqp_get_package_through_who $P5215, $P5216, "QAST"
    get_who $P5214, $P5215
    set $P5213, $P5214["Op"]
    unless_null $P5213, fallback3814
    nqp_get_sc_object $P5217, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5213, $P5217
  fallback3814:
.annotate 'line', 1615
    get_hll_global $P5221, "GLOBAL"
    nqp_get_package_through_who $P5220, $P5221, "QAST"
    get_who $P5219, $P5220
    set $P5218, $P5219["BVal"]
    unless_null $P5218, fallback3815
    nqp_get_sc_object $P5222, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5218, $P5222
  fallback3815:
    $P5223 = $P5218."new"($P102 :named("value"))
    $P5224 = $P5213."new"($P5223, "call" :named("op"))
    $P5225 = $P5173."new"($P102, "nqp" :named("hll"), $P5184 :named("sc"), $P5191 :named("code_ref_blocks"), $P5198 :named("compilation_mode"), $P5205 :named("pre_deserialize"), $P5212 :named("post_deserialize"), $P5224 :named("load"))
    set $P105, $P5225
.annotate 'line', 1623
    $P5226 = _lex_param_1."!make"($P105)
    .return ($P5226) 
.end
.HLL "nqp"
.namespace []
.sub "statementlist" :subid("cuid_247_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1626
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5023 = 'cuid_428_1346968539.359' 
    capture_lex $P5023 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
.annotate 'line', 1627
    get_hll_global $P5005, "GLOBAL"
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Stmts"]
    unless_null $P5002, fallback3816
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5002, $P5006
  fallback3816:
    $P5007 = $P5002."new"(_lex_param_1 :named("node"))
    set $P101, $P5007
    unless_null _lex_param_1, fallback3819
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5009
  fallback3819:
    set $P5008, _lex_param_1["statement"]
    unless_null $P5008, fallback3820
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5008, $P5010
  fallback3820:
    unless $P5008 goto if1302_else3817 
.annotate 'line', 1628
    unless_null _lex_param_1, fallback3821
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5015
  fallback3821:
    set $P5014, _lex_param_1["statement"]
    unless_null $P5014, fallback3822
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5014, $P5016
  fallback3822:
    set $P5011, $P5014
    iter $P5013, $P5014
  for_next3835:
    unless $P5013, for_done3837
    shift $P5018, $P5013
  for_redo3836:
    .const 'Sub' $P5017 = 'cuid_428_1346968539.359' 
    capture_lex $P5017
    $P5011 = $P5017($P5018)
    goto for_next3835
  for_done3837:
    set $P5021, $P5011
    goto if1302_end3818
  if1302_else3817:
.annotate 'line', 1637
.annotate 'line', 1638
    $P5019 = "&default_for"("$")
    $P5020 = $P101."push"($P5019)
    set $P5021, $P5020
  if1302_end3818:
.annotate 'line', 1640
    $P5022 = _lex_param_1."!make"($P101)
    .return ($P5022) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_428_1346968539.359") :anon :lex :outer("cuid_247_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1629
    .param pmc _lex_param_0 
    .lex "$ast", $P101 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
.annotate 'line', 1630
    $P5002 = _lex_param_0."ast"()
    set $P101, $P5002
    set $P5003, $P101["sink"]
    unless_null $P5003, fallback3825
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5003, $P5004
  fallback3825:
    defined $I5001, $P5003
    box $P5008, $I5001
    set $P5007, $P5008
    unless $I5001 goto if1303_end3824 
    set $P5005, $P101["sink"]
    unless_null $P5005, fallback3826
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5005, $P5006
  fallback3826:
    set $P101, $P5005
    set $P5007, $P101
  if1303_end3824:
    set $P5009, $P101["bareblock"]
    unless_null $P5009, fallback3829
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5009, $P5010
  fallback3829:
    set $P5014, $P5009
    unless $P5009 goto if1304_end3828 
.annotate 'line', 1632
    set $P5011, $P101[0]
    unless_null $P5011, fallback3830
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5011, $P5012
  fallback3830:
    $P5013 = "&block_immediate"($P5011)
    set $P101, $P5013
    set $P5014, $P101
  if1304_end3828:
    get_hll_global $P5018, "GLOBAL"
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["Node"]
    unless_null $P5015, fallback3833
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5015, $P5019
  fallback3833:
    type_check $I5002, $P101, $P5015
    box $P5027, $I5002
    set $P5026, $P5027
    unless $I5002 goto if1305_end3832 
.annotate 'line', 1633
    get_hll_global $P5023, "GLOBAL"
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Stmts"]
    unless_null $P5020, fallback3834
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5020, $P5024
  fallback3834:
    $P5025 = $P5020."new"($P101)
    set $P101, $P5025
    set $P5026, $P101
  if1305_end3832:
.annotate 'line', 1634
    find_lex $P5028, "$past"
    $P5029 = $P5028."push"($P101)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "statement" :subid("cuid_248_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1643
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :optional 
    .param int haz_param_3 :opt_flag 
    .const 'Sub' $P5019 = 'cuid_429_1346968539.359' 
    capture_lex $P5019 
    if haz_param_3, default3874
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_2, $P5018
  default3874:
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .lex "$key", _lex_param_2 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    unless_null _lex_param_1, fallback3840
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5003
  fallback3840:
    set $P5002, _lex_param_1["EXPR"]
    unless_null $P5002, fallback3841
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5002, $P5004
  fallback3841:
    unless $P5002 goto if1306_else3838 
    .const 'Sub' $P5005 = 'cuid_429_1346968539.359' 
    capture_lex $P5005
    $P5006 = $P5005()
    set $P5016, $P5006
    goto if1306_end3839
  if1306_else3838:
    unless_null _lex_param_1, fallback3870
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5008
  fallback3870:
    set $P5007, _lex_param_1["statement_control"]
    unless_null $P5007, fallback3871
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5007, $P5009
  fallback3871:
    unless $P5007 goto if1310_else3868 
.annotate 'line', 1666
    unless_null _lex_param_1, fallback3872
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5011
  fallback3872:
    set $P5010, _lex_param_1["statement_control"]
    unless_null $P5010, fallback3873
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5010, $P5012
  fallback3873:
    $P5013 = $P5010."ast"()
    set $P101, $P5013
    set $P5015, $P101
    goto if1310_end3869
  if1310_else3868:
.annotate 'line', 1667
    box $P5014, 0
    set $P101, $P5014
    set $P5015, $P101
  if1310_end3869:
    set $P5016, $P5015
  if1306_end3839:
.annotate 'line', 1668
    $P5017 = _lex_param_1."!make"($P101)
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_429_1346968539.359") :anon :lex :outer("cuid_248_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1645
    .lex "$mc", $P101 
    .lex "$ml", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
    find_lex $P5005, "$/"
    unless_null $P5005, fallback3842
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5005, $P5006
  fallback3842:
    set $P5004, $P5005["statement_mod_cond"]
    unless_null $P5004, fallback3843
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5004, $P5007
  fallback3843:
    set $P5003, $P5004[0]
    unless_null $P5003, fallback3844
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5003, $P5008
  fallback3844:
    set $P101, $P5003
    find_lex $P5011, "$/"
    unless_null $P5011, fallback3845
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5011, $P5012
  fallback3845:
    set $P5010, $P5011["statement_mod_loop"]
    unless_null $P5010, fallback3846
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5010, $P5013
  fallback3846:
    set $P5009, $P5010[0]
    unless_null $P5009, fallback3847
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5009, $P5014
  fallback3847:
    set $P102, $P5009
.annotate 'line', 1648
    find_lex $P5016, "$/"
    unless_null $P5016, fallback3848
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5016, $P5017
  fallback3848:
    set $P5015, $P5016["EXPR"]
    unless_null $P5015, fallback3849
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5015, $P5018
  fallback3849:
    $P5019 = $P5015."ast"()
    store_lex "$past", $P5019
    set $P5033, $P101
    unless $P101 goto if1307_end3851 
.annotate 'line', 1649
.annotate 'line', 1650
    get_hll_global $P5023, "GLOBAL"
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback3852
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5020, $P5024
  fallback3852:
    set $P5025, $P101["cond"]
    unless_null $P5025, fallback3853
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5025, $P5026
  fallback3853:
    $P5027 = $P5025."ast"()
    find_lex $P5028, "$past"
    set $P5029, $P101["sym"]
    unless_null $P5029, fallback3854
    nqp_get_sc_object $P5030, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5029, $P5030
  fallback3854:
    set $S5001, $P5029
    find_lex $P5031, "$/"
    $P5032 = $P5020."new"($P5027, $P5028, $S5001 :named("op"), $P5031 :named("node"))
    store_lex "$past", $P5032
    set $P5033, $P5032
  if1307_end3851:
    set $P5080, $P102
    unless $P102 goto if1308_end3856 
.annotate 'line', 1652
    set $P5034, $P102["sym"]
    unless_null $P5034, fallback3859
    nqp_get_sc_object $P5035, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5034, $P5035
  fallback3859:
    set $S5002, $P5034
    iseq $I5001, $S5002, "for"
    unless $I5001 goto if1309_else3857 
.annotate 'line', 1653
.annotate 'line', 1654
    get_hll_global $P5039, "GLOBAL"
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Block"]
    unless_null $P5036, fallback3860
    nqp_get_sc_object $P5040, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5036, $P5040
  fallback3860:
.annotate 'line', 1655
    get_hll_global $P5044, "GLOBAL"
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["Var"]
    unless_null $P5041, fallback3861
    nqp_get_sc_object $P5045, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5041, $P5045
  fallback3861:
    $P5046 = $P5041."new"("$_" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    find_lex $P5047, "$past"
    $P5048 = $P5036."new"($P5046, $P5047, "immediate" :named("blocktype"))
    store_lex "$past", $P5048
.annotate 'line', 1657
    find_lex $P5049, "$past"
    $P5050 = $P5049."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1658
    find_lex $P5051, "$past"
    $P5052 = $P5051."arity"(1)
.annotate 'line', 1659
    get_hll_global $P5056, "GLOBAL"
    nqp_get_package_through_who $P5055, $P5056, "QAST"
    get_who $P5054, $P5055
    set $P5053, $P5054["Op"]
    unless_null $P5053, fallback3862
    nqp_get_sc_object $P5057, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5053, $P5057
  fallback3862:
    set $P5058, $P102["cond"]
    unless_null $P5058, fallback3863
    nqp_get_sc_object $P5059, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5058, $P5059
  fallback3863:
    $P5060 = $P5058."ast"()
    find_lex $P5061, "$past"
    set $P5062, $P102["sym"]
    unless_null $P5062, fallback3864
    nqp_get_sc_object $P5063, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5062, $P5063
  fallback3864:
    set $S5003, $P5062
    find_lex $P5064, "$/"
    $P5065 = $P5053."new"($P5060, $P5061, $S5003 :named("op"), $P5064 :named("node"))
    store_lex "$past", $P5065
    set $P5079, $P5065
    goto if1309_end3858
  if1309_else3857:
.annotate 'line', 1661
.annotate 'line', 1662
    get_hll_global $P5069, "GLOBAL"
    nqp_get_package_through_who $P5068, $P5069, "QAST"
    get_who $P5067, $P5068
    set $P5066, $P5067["Op"]
    unless_null $P5066, fallback3865
    nqp_get_sc_object $P5070, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5066, $P5070
  fallback3865:
    set $P5071, $P102["cond"]
    unless_null $P5071, fallback3866
    nqp_get_sc_object $P5072, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5071, $P5072
  fallback3866:
    $P5073 = $P5071."ast"()
    find_lex $P5074, "$past"
    set $P5075, $P102["sym"]
    unless_null $P5075, fallback3867
    nqp_get_sc_object $P5076, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5075, $P5076
  fallback3867:
    set $S5004, $P5075
    find_lex $P5077, "$/"
    $P5078 = $P5066."new"($P5073, $P5074, $S5004 :named("op"), $P5077 :named("node"))
    store_lex "$past", $P5078
    set $P5079, $P5078
  if1309_end3858:
    set $P5080, $P5079
  if1308_end3856:
    .return ($P5080) 
.end
.HLL "nqp"
.namespace []
.sub "xblock" :subid("cuid_249_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1671
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1672
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3875
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5005
  fallback3875:
    unless_null _lex_param_1, fallback3876
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5007
  fallback3876:
    set $P5006, _lex_param_1["EXPR"]
    unless_null $P5006, fallback3877
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5006, $P5008
  fallback3877:
    $P5009 = $P5006."ast"()
    unless_null _lex_param_1, fallback3878
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5011
  fallback3878:
    set $P5010, _lex_param_1["pblock"]
    unless_null $P5010, fallback3879
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5010, $P5012
  fallback3879:
    $P5013 = $P5010."ast"()
    $P5014 = $P5001."new"($P5009, $P5013, "if" :named("op"), _lex_param_1 :named("node"))
    $P5015 = _lex_param_1."!make"($P5014)
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "pblock" :subid("cuid_250_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1675
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1676
    unless_null _lex_param_1, fallback3880
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback3880:
    set $P5001, _lex_param_1["blockoid"]
    unless_null $P5001, fallback3881
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback3881:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "block" :subid("cuid_251_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1679
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1680
    unless_null _lex_param_1, fallback3882
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback3882:
    set $P5001, _lex_param_1["blockoid"]
    unless_null $P5001, fallback3883
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback3883:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "blockoid" :subid("cuid_252_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1683
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5030 = 'cuid_431_1346968539.359' 
    capture_lex $P5030 
    .lex "$BLOCK", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
.annotate 'line', 1684
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback3884
    get_hll_global $P5005, "GLOBAL"
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback3885
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5003, $P5006
  fallback3885:
    unless_null $P5003, vivi_13113886
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_13113886:
    set $P5002, $P5003
  fallback3884:
    $P5008 = $P5002."pop_lexpad"()
    set $P101, $P5008
    unless_null _lex_param_1, fallback3889
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5010
  fallback3889:
    set $P5009, _lex_param_1["statementlist"]
    unless_null $P5009, fallback3890
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5009, $P5011
  fallback3890:
    unless $P5009 goto if1312_else3887 
    .const 'Sub' $P5012 = 'cuid_431_1346968539.359' 
    capture_lex $P5012
    $P5013 = $P5012()
    set $P5029, $P5013
    goto if1312_end3888
  if1312_else3887:
.annotate 'line', 1699
    find_dynamic_lex $P5014, "$*HAS_YOU_ARE_HERE"
    unless_null $P5014, fallback3915
    get_hll_global $P5017, "GLOBAL"
    get_who $P5016, $P5017
    set $P5015, $P5016["$HAS_YOU_ARE_HERE"]
    unless_null $P5015, fallback3916
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5015, $P5018
  fallback3916:
    unless_null $P5015, vivi_13203917
    die "Contextual $*HAS_YOU_ARE_HERE not found"
    box $P5019, "Contextual $*HAS_YOU_ARE_HERE not found"
    set $P5015, $P5019
  vivi_13203917:
    set $P5014, $P5015
  fallback3915:
    set $P5022, $P5014
    unless $P5014 goto if1319_end3914 
.annotate 'line', 1700
.annotate 'line', 1701
    $P5020 = _lex_param_1."CURSOR"()
    $P5021 = $P5020."panic"("{YOU_ARE_HERE} may only appear once in a setting")
    set $P5022, $P5021
  if1319_end3914:
    box $P5023, 1
    store_dynamic_lex "$*HAS_YOU_ARE_HERE", $P5023
.annotate 'line', 1704
    unless_null _lex_param_1, fallback3918
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5025
  fallback3918:
    set $P5024, _lex_param_1["you_are_here"]
    unless_null $P5024, fallback3919
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5024, $P5026
  fallback3919:
    $P5027 = $P5024."ast"()
    $P5028 = _lex_param_1."!make"($P5027)
    set $P5029, $P5028
  if1312_end3888:
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_431_1346968539.359") :anon :lex :outer("cuid_252_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1685
    .const 'Sub' $P5061 = 'cuid_430_1346968539.359' 
    capture_lex $P5061 
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
.annotate 'line', 1686
    find_lex $P5003, "$/"
    unless_null $P5003, fallback3891
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5003, $P5004
  fallback3891:
    set $P5002, $P5003["statementlist"]
    unless_null $P5002, fallback3892
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5002, $P5005
  fallback3892:
    $P5006 = $P5002."ast"()
    set $P101, $P5006
    find_dynamic_lex $P5007, "%*HANDLERS"
    unless_null $P5007, fallback3895
    get_hll_global $P5010, "GLOBAL"
    get_who $P5009, $P5010
    set $P5008, $P5009["%HANDLERS"]
    unless_null $P5008, fallback3896
    get_hll_global $P5012, "GLOBAL"
    get_who $P5011, $P5012
    new $P5013, 'Hash'
    set $P5011["%HANDLERS"], $P5013
    set $P5008, $P5013
  fallback3896:
    unless_null $P5008, vivi_13143897
    die "Contextual %*HANDLERS not found"
    box $P5014, "Contextual %*HANDLERS not found"
    set $P5008, $P5014
  vivi_13143897:
    set $P5007, $P5008
  fallback3895:
    set $P5034, $P5007
    unless $P5007 goto if1313_end3894 
.annotate 'line', 1687
.annotate 'line', 1688
    get_hll_global $P5018, "GLOBAL"
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["Op"]
    unless_null $P5015, fallback3898
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5015, $P5019
  fallback3898:
    $P5020 = $P5015."new"($P101, "handle" :named("op"))
    set $P101, $P5020
    find_dynamic_lex $P5024, "%*HANDLERS"
    unless_null $P5024, fallback3899
    get_hll_global $P5027, "GLOBAL"
    get_who $P5026, $P5027
    set $P5025, $P5026["%HANDLERS"]
    unless_null $P5025, fallback3900
    get_hll_global $P5029, "GLOBAL"
    get_who $P5028, $P5029
    new $P5030, 'Hash'
    set $P5028["%HANDLERS"], $P5030
    set $P5025, $P5030
  fallback3900:
    unless_null $P5025, vivi_13153901
    die "Contextual %*HANDLERS not found"
    box $P5031, "Contextual %*HANDLERS not found"
    set $P5025, $P5031
  vivi_13153901:
    set $P5024, $P5025
  fallback3899:
    set $P5021, $P5024
    iter $P5023, $P5024
  for_next3902:
    unless $P5023, for_done3904
    shift $P5033, $P5023
  for_redo3903:
    .const 'Sub' $P5032 = 'cuid_430_1346968539.359' 
    capture_lex $P5032
    $P5021 = $P5032($P5033)
    goto for_next3902
  for_done3904:
    set $P5034, $P5021
  if1313_end3894:
.annotate 'line', 1694
    find_lex $P5035, "$BLOCK"
    $P5036 = $P5035."push"($P101)
.annotate 'line', 1695
    find_lex $P5037, "$BLOCK"
    find_lex $P5038, "$/"
    $P5039 = $P5037."node"($P5038)
    find_dynamic_lex $P5040, "%*HANDLERS"
    unless_null $P5040, fallback3907
    get_hll_global $P5043, "GLOBAL"
    get_who $P5042, $P5043
    set $P5041, $P5042["%HANDLERS"]
    unless_null $P5041, fallback3908
    get_hll_global $P5045, "GLOBAL"
    get_who $P5044, $P5045
    new $P5046, 'Hash'
    set $P5044["%HANDLERS"], $P5046
    set $P5041, $P5046
  fallback3908:
    unless_null $P5041, vivi_13173909
    die "Contextual %*HANDLERS not found"
    box $P5047, "Contextual %*HANDLERS not found"
    set $P5041, $P5047
  vivi_13173909:
    set $P5040, $P5041
  fallback3907:
    set $P5057, $P5040
    unless $P5040 goto if1316_end3906 
    find_lex $P5048, "$BLOCK"
    find_dynamic_lex $P5049, "%*HANDLERS"
    unless_null $P5049, fallback3910
    get_hll_global $P5052, "GLOBAL"
    get_who $P5051, $P5052
    set $P5050, $P5051["%HANDLERS"]
    unless_null $P5050, fallback3911
    get_hll_global $P5054, "GLOBAL"
    get_who $P5053, $P5054
    new $P5055, 'Hash'
    set $P5053["%HANDLERS"], $P5055
    set $P5050, $P5055
  fallback3911:
    unless_null $P5050, vivi_13183912
    die "Contextual %*HANDLERS not found"
    box $P5056, "Contextual %*HANDLERS not found"
    set $P5050, $P5056
  vivi_13183912:
    set $P5049, $P5050
  fallback3910:
    set $P5048["handlers"], $P5049
    set $P5057, $P5049
  if1316_end3906:
.annotate 'line', 1697
    find_dynamic_lex $P5058, "$/"
    find_lex $P5059, "$BLOCK"
    $P5060 = $P5058."!make"($P5059)
    .return ($P5060) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_430_1346968539.359") :anon :lex :outer("cuid_431_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1689
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 1690
    find_lex $P5001, "$past"
    $P5002 = _lex_param_0."key"()
    $P5003 = $P5001."push"($P5002)
.annotate 'line', 1691
    find_lex $P5004, "$past"
    $P5005 = _lex_param_0."value"()
    $P5006 = $P5004."push"($P5005)
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "newpad" :subid("cuid_253_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1708
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1709
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback3920
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback3921
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5002, $P5005
  fallback3921:
    unless_null $P5002, vivi_13213922
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_13213922:
    set $P5001, $P5002
  fallback3920:
    $P5007 = $P5001."push_lexpad"(_lex_param_1)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "outerctx" :subid("cuid_254_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1712
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5026 = 'cuid_432_1346968539.359' 
    capture_lex $P5026 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    find_dynamic_lex $P5003, "%*COMPILING"
    unless_null $P5003, fallback3925
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["%COMPILING"]
    unless_null $P5004, fallback3926
    get_hll_global $P5008, "GLOBAL"
    get_who $P5007, $P5008
    new $P5009, 'Hash'
    set $P5007["%COMPILING"], $P5009
    set $P5004, $P5009
  fallback3926:
    unless_null $P5004, vivi_13233927
    die "Contextual %*COMPILING not found"
    box $P5010, "Contextual %*COMPILING not found"
    set $P5004, $P5010
  vivi_13233927:
    set $P5003, $P5004
  fallback3925:
    set $P5002, $P5003["%?OPTIONS"]
    unless_null $P5002, fallback3928
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5002, $P5011
  fallback3928:
    set $P5001, $P5002["outer_ctx"]
    unless_null $P5001, fallback3929
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5012
  fallback3929:
    defined $I5001, $P5001
    box $P5016, $I5001
    set $P5015, $P5016
    if $I5001 goto unless1322_end3924 
    .const 'Sub' $P5013 = 'cuid_432_1346968539.359' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5015, $P5014
  unless1322_end3924:
.annotate 'line', 1734
    nqp_decontainerize $P5017, _lex_param_0
    find_dynamic_lex $P5018, "$*W"
    unless_null $P5018, fallback3985
    get_hll_global $P5021, "GLOBAL"
    get_who $P5020, $P5021
    set $P5019, $P5020["$W"]
    unless_null $P5019, fallback3986
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5019, $P5022
  fallback3986:
    unless_null $P5019, vivi_13403987
    die "Contextual $*W not found"
    box $P5023, "Contextual $*W not found"
    set $P5019, $P5023
  vivi_13403987:
    set $P5018, $P5019
  fallback3985:
    $P5024 = $P5018."cur_lexpad"()
    $P5025 = $P5017."SET_BLOCK_OUTER_CTX"($P5024)
    .return ($P5025) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_432_1346968539.359") :anon :lex :outer("cuid_254_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1713
    .lex "$SETTING", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
.annotate 'line', 1716
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback3930
    get_hll_global $P5005, "GLOBAL"
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback3931
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5003, $P5006
  fallback3931:
    unless_null $P5003, vivi_13243932
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_13243932:
    set $P5002, $P5003
  fallback3930:
    find_dynamic_lex $P5011, "%*COMPILING"
    unless_null $P5011, fallback3934
    get_hll_global $P5014, "GLOBAL"
    get_who $P5013, $P5014
    set $P5012, $P5013["%COMPILING"]
    unless_null $P5012, fallback3935
    get_hll_global $P5016, "GLOBAL"
    get_who $P5015, $P5016
    new $P5017, 'Hash'
    set $P5015["%COMPILING"], $P5017
    set $P5012, $P5017
  fallback3935:
    unless_null $P5012, vivi_13253936
    die "Contextual %*COMPILING not found"
    box $P5018, "Contextual %*COMPILING not found"
    set $P5012, $P5018
  vivi_13253936:
    set $P5011, $P5012
  fallback3934:
    set $P5010, $P5011["%?OPTIONS"]
    unless_null $P5010, fallback3937
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5010, $P5019
  fallback3937:
    set $P5009, $P5010["setting"]
    unless_null $P5009, fallback3938
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5009, $P5020
  fallback3938:
    set $P5008, $P5009
    defined $I5001, $P5008
    if $I5001, defor3933
    box $P5021, "NQPCORE"
    set $P5008, $P5021
  defor3933:
    $P5022 = $P5002."load_setting"($P5008)
    set $P101, $P5022
    find_dynamic_lex $P5025, "%*COMPILING"
    unless_null $P5025, fallback3941
    get_hll_global $P5028, "GLOBAL"
    get_who $P5027, $P5028
    set $P5026, $P5027["%COMPILING"]
    unless_null $P5026, fallback3942
    get_hll_global $P5030, "GLOBAL"
    get_who $P5029, $P5030
    new $P5031, 'Hash'
    set $P5029["%COMPILING"], $P5031
    set $P5026, $P5031
  fallback3942:
    unless_null $P5026, vivi_13273943
    die "Contextual %*COMPILING not found"
    box $P5032, "Contextual %*COMPILING not found"
    set $P5026, $P5032
  vivi_13273943:
    set $P5025, $P5026
  fallback3941:
    set $P5024, $P5025["%?OPTIONS"]
    unless_null $P5024, fallback3944
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5024, $P5033
  fallback3944:
    set $P5023, $P5024["setting"]
    unless_null $P5023, fallback3945
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5023, $P5034
  fallback3945:
    set $S5001, $P5023
    iseq $I5002, $S5001, "NULL"
    box $P5115, $I5002
    set $P5114, $P5115
    if $I5002 goto unless1326_end3940 
.annotate 'line', 1721
.annotate 'line', 1722
    $P5035 = "&import_HOW_exports"($P101)
    find_dynamic_lex $P5038, "%*COMPILING"
    unless_null $P5038, fallback3948
    get_hll_global $P5041, "GLOBAL"
    get_who $P5040, $P5041
    set $P5039, $P5040["%COMPILING"]
    unless_null $P5039, fallback3949
    get_hll_global $P5043, "GLOBAL"
    get_who $P5042, $P5043
    new $P5044, 'Hash'
    set $P5042["%COMPILING"], $P5044
    set $P5039, $P5044
  fallback3949:
    unless_null $P5039, vivi_13293950
    die "Contextual %*COMPILING not found"
    box $P5045, "Contextual %*COMPILING not found"
    set $P5039, $P5045
  vivi_13293950:
    set $P5038, $P5039
  fallback3948:
    set $P5037, $P5038["%?OPTIONS"]
    unless_null $P5037, fallback3951
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5037, $P5046
  fallback3951:
    set $P5036, $P5037["old-regex-lib"]
    unless_null $P5036, fallback3952
    nqp_get_sc_object $P5047, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5036, $P5047
  fallback3952:
    set $P5061, $P5036
    unless $P5036 goto if1328_end3947 
.annotate 'line', 1723
.annotate 'line', 1724
    find_dynamic_lex $P5048, "$*W"
    unless_null $P5048, fallback3953
    get_hll_global $P5051, "GLOBAL"
    get_who $P5050, $P5051
    set $P5049, $P5050["$W"]
    unless_null $P5049, fallback3954
    nqp_get_sc_object $P5052, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5049, $P5052
  fallback3954:
    unless_null $P5049, vivi_13303955
    die "Contextual $*W not found"
    box $P5053, "Contextual $*W not found"
    set $P5049, $P5053
  vivi_13303955:
    set $P5048, $P5049
  fallback3953:
    find_dynamic_lex $P5054, "$*GLOBALish"
    unless_null $P5054, fallback3956
    get_hll_global $P5057, "GLOBAL"
    get_who $P5056, $P5057
    set $P5055, $P5056["$GLOBALish"]
    unless_null $P5055, fallback3957
    nqp_get_sc_object $P5058, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5055, $P5058
  fallback3957:
    unless_null $P5055, vivi_13313958
    die "Contextual $*GLOBALish not found"
    box $P5059, "Contextual $*GLOBALish not found"
    set $P5055, $P5059
  vivi_13313958:
    set $P5054, $P5055
  fallback3956:
    $P5060 = $P5048."load_module"("NQPRegex", $P5054)
    set $P5061, $P5060
  if1328_end3947:
    find_dynamic_lex $P5064, "%*COMPILING"
    unless_null $P5064, fallback3961
    get_hll_global $P5067, "GLOBAL"
    get_who $P5066, $P5067
    set $P5065, $P5066["%COMPILING"]
    unless_null $P5065, fallback3962
    get_hll_global $P5069, "GLOBAL"
    get_who $P5068, $P5069
    new $P5070, 'Hash'
    set $P5068["%COMPILING"], $P5070
    set $P5065, $P5070
  fallback3962:
    unless_null $P5065, vivi_13333963
    die "Contextual %*COMPILING not found"
    box $P5071, "Contextual %*COMPILING not found"
    set $P5065, $P5071
  vivi_13333963:
    set $P5064, $P5065
  fallback3961:
    set $P5063, $P5064["%?OPTIONS"]
    unless_null $P5063, fallback3964
    nqp_get_sc_object $P5072, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5063, $P5072
  fallback3964:
    set $P5062, $P5063["no-regex-lib"]
    unless_null $P5062, fallback3965
    nqp_get_sc_object $P5073, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5062, $P5073
  fallback3965:
    set $P5113, $P5062
    if $P5062 goto unless1332_end3960 
.annotate 'line', 1726
.annotate 'line', 1727
    find_dynamic_lex $P5074, "$*W"
    unless_null $P5074, fallback3966
    get_hll_global $P5077, "GLOBAL"
    get_who $P5076, $P5077
    set $P5075, $P5076["$W"]
    unless_null $P5075, fallback3967
    nqp_get_sc_object $P5078, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5075, $P5078
  fallback3967:
    unless_null $P5075, vivi_13343968
    die "Contextual $*W not found"
    box $P5079, "Contextual $*W not found"
    set $P5075, $P5079
  vivi_13343968:
    set $P5074, $P5075
  fallback3966:
    find_dynamic_lex $P5080, "$*GLOBALish"
    unless_null $P5080, fallback3969
    get_hll_global $P5083, "GLOBAL"
    get_who $P5082, $P5083
    set $P5081, $P5082["$GLOBALish"]
    unless_null $P5081, fallback3970
    nqp_get_sc_object $P5084, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5081, $P5084
  fallback3970:
    unless_null $P5081, vivi_13353971
    die "Contextual $*GLOBALish not found"
    box $P5085, "Contextual $*GLOBALish not found"
    set $P5081, $P5085
  vivi_13353971:
    set $P5080, $P5081
  fallback3969:
    $P5086 = $P5074."load_module"("QRegex", $P5080)
    find_dynamic_lex $P5089, "%*COMPILING"
    unless_null $P5089, fallback3974
    get_hll_global $P5092, "GLOBAL"
    get_who $P5091, $P5092
    set $P5090, $P5091["%COMPILING"]
    unless_null $P5090, fallback3975
    get_hll_global $P5094, "GLOBAL"
    get_who $P5093, $P5094
    new $P5095, 'Hash'
    set $P5093["%COMPILING"], $P5095
    set $P5090, $P5095
  fallback3975:
    unless_null $P5090, vivi_13373976
    die "Contextual %*COMPILING not found"
    box $P5096, "Contextual %*COMPILING not found"
    set $P5090, $P5096
  vivi_13373976:
    set $P5089, $P5090
  fallback3974:
    set $P5088, $P5089["%?OPTIONS"]
    unless_null $P5088, fallback3977
    nqp_get_sc_object $P5097, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5088, $P5097
  fallback3977:
    set $P5087, $P5088["old-regex-lib"]
    unless_null $P5087, fallback3978
    nqp_get_sc_object $P5098, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5087, $P5098
  fallback3978:
    set $P5112, $P5087
    if $P5087 goto unless1336_end3973 
.annotate 'line', 1728
.annotate 'line', 1729
    find_dynamic_lex $P5099, "$*W"
    unless_null $P5099, fallback3979
    get_hll_global $P5102, "GLOBAL"
    get_who $P5101, $P5102
    set $P5100, $P5101["$W"]
    unless_null $P5100, fallback3980
    nqp_get_sc_object $P5103, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5100, $P5103
  fallback3980:
    unless_null $P5100, vivi_13383981
    die "Contextual $*W not found"
    box $P5104, "Contextual $*W not found"
    set $P5100, $P5104
  vivi_13383981:
    set $P5099, $P5100
  fallback3979:
    find_dynamic_lex $P5105, "$*GLOBALish"
    unless_null $P5105, fallback3982
    get_hll_global $P5108, "GLOBAL"
    get_who $P5107, $P5108
    set $P5106, $P5107["$GLOBALish"]
    unless_null $P5106, fallback3983
    nqp_get_sc_object $P5109, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5106, $P5109
  fallback3983:
    unless_null $P5106, vivi_13393984
    die "Contextual $*GLOBALish not found"
    box $P5110, "Contextual $*GLOBALish not found"
    set $P5106, $P5110
  vivi_13393984:
    set $P5105, $P5106
  fallback3982:
    $P5111 = $P5099."load_module"("NQPP6QRegex", $P5105)
    set $P5112, $P5111
  unless1336_end3973:
    set $P5113, $P5112
  unless1332_end3960:
    set $P5114, $P5113
  unless1326_end3940:
    .return ($P5114) 
.end
.HLL "nqp"
.namespace []
.sub "GLOBALish" :subid("cuid_255_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1746
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1750
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback3988
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback3989
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5002, $P5005
  fallback3989:
    unless_null $P5002, vivi_13413990
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_13413990:
    set $P5001, $P5002
  fallback3988:
    find_dynamic_lex $P5008, "%*HOW"
    unless_null $P5008, fallback3991
    get_hll_global $P5011, "GLOBAL"
    get_who $P5010, $P5011
    set $P5009, $P5010["%HOW"]
    unless_null $P5009, fallback3992
    get_hll_global $P5013, "GLOBAL"
    get_who $P5012, $P5013
    new $P5014, 'Hash'
    set $P5012["%HOW"], $P5014
    set $P5009, $P5014
  fallback3992:
    unless_null $P5009, vivi_13423993
    die "Contextual %*HOW not found"
    box $P5015, "Contextual %*HOW not found"
    set $P5009, $P5015
  vivi_13423993:
    set $P5008, $P5009
  fallback3991:
    set $P5007, $P5008["knowhow"]
    unless_null $P5007, fallback3994
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5007, $P5016
  fallback3994:
    $P5017 = $P5001."pkg_create_mo"($P5007, "GLOBALish" :named("name"))
    store_dynamic_lex "$*GLOBALish", $P5017
.annotate 'line', 1751
    find_dynamic_lex $P5019, "$*GLOBALish"
    unless_null $P5019, fallback3995
    get_hll_global $P5022, "GLOBAL"
    get_who $P5021, $P5022
    set $P5020, $P5021["$GLOBALish"]
    unless_null $P5020, fallback3996
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5020, $P5023
  fallback3996:
    unless_null $P5020, vivi_13433997
    die "Contextual $*GLOBALish not found"
    box $P5024, "Contextual $*GLOBALish not found"
    set $P5020, $P5024
  vivi_13433997:
    set $P5019, $P5020
  fallback3995:
    get_how $P5018, $P5019
    find_dynamic_lex $P5025, "$*GLOBALish"
    unless_null $P5025, fallback3998
    get_hll_global $P5028, "GLOBAL"
    get_who $P5027, $P5028
    set $P5026, $P5027["$GLOBALish"]
    unless_null $P5026, fallback3999
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5026, $P5029
  fallback3999:
    unless_null $P5026, vivi_13444000
    die "Contextual $*GLOBALish not found"
    box $P5030, "Contextual $*GLOBALish not found"
    set $P5026, $P5030
  vivi_13444000:
    set $P5025, $P5026
  fallback3998:
    $P5031 = $P5018."compose"($P5025)
.annotate 'line', 1752
    find_dynamic_lex $P5032, "$*W"
    unless_null $P5032, fallback4001
    get_hll_global $P5035, "GLOBAL"
    get_who $P5034, $P5035
    set $P5033, $P5034["$W"]
    unless_null $P5033, fallback4002
    nqp_get_sc_object $P5036, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5033, $P5036
  fallback4002:
    unless_null $P5033, vivi_13454003
    die "Contextual $*W not found"
    box $P5037, "Contextual $*W not found"
    set $P5033, $P5037
  vivi_13454003:
    set $P5032, $P5033
  fallback4001:
    find_dynamic_lex $P5038, "$*W"
    unless_null $P5038, fallback4004
    get_hll_global $P5041, "GLOBAL"
    get_who $P5040, $P5041
    set $P5039, $P5040["$W"]
    unless_null $P5039, fallback4005
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5039, $P5042
  fallback4005:
    unless_null $P5039, vivi_13464006
    die "Contextual $*W not found"
    box $P5043, "Contextual $*W not found"
    set $P5039, $P5043
  vivi_13464006:
    set $P5038, $P5039
  fallback4004:
    $P5044 = $P5038."cur_lexpad"()
    find_dynamic_lex $P5045, "$*GLOBALish"
    unless_null $P5045, fallback4007
    get_hll_global $P5048, "GLOBAL"
    get_who $P5047, $P5048
    set $P5046, $P5047["$GLOBALish"]
    unless_null $P5046, fallback4008
    nqp_get_sc_object $P5049, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5046, $P5049
  fallback4008:
    unless_null $P5046, vivi_13474009
    die "Contextual $*GLOBALish not found"
    box $P5050, "Contextual $*GLOBALish not found"
    set $P5046, $P5050
  vivi_13474009:
    set $P5045, $P5046
  fallback4007:
    $P5051 = $P5032."install_lexical_symbol"($P5044, "GLOBALish", $P5045)
    find_dynamic_lex $P5052, "$*GLOBALish"
    unless_null $P5052, fallback4010
    get_hll_global $P5055, "GLOBAL"
    get_who $P5054, $P5055
    set $P5053, $P5054["$GLOBALish"]
    unless_null $P5053, fallback4011
    nqp_get_sc_object $P5056, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5053, $P5056
  fallback4011:
    unless_null $P5053, vivi_13484012
    die "Contextual $*GLOBALish not found"
    box $P5057, "Contextual $*GLOBALish not found"
    set $P5053, $P5057
  vivi_13484012:
    set $P5052, $P5053
  fallback4010:
    store_dynamic_lex "$*PACKAGE", $P5052
.annotate 'line', 1756
    find_dynamic_lex $P5058, "$*W"
    unless_null $P5058, fallback4013
    get_hll_global $P5061, "GLOBAL"
    get_who $P5060, $P5061
    set $P5059, $P5060["$W"]
    unless_null $P5059, fallback4014
    nqp_get_sc_object $P5062, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5059, $P5062
  fallback4014:
    unless_null $P5059, vivi_13494015
    die "Contextual $*W not found"
    box $P5063, "Contextual $*W not found"
    set $P5059, $P5063
  vivi_13494015:
    set $P5058, $P5059
  fallback4013:
    find_dynamic_lex $P5064, "$*W"
    unless_null $P5064, fallback4016
    get_hll_global $P5067, "GLOBAL"
    get_who $P5066, $P5067
    set $P5065, $P5066["$W"]
    unless_null $P5065, fallback4017
    nqp_get_sc_object $P5068, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5065, $P5068
  fallback4017:
    unless_null $P5065, vivi_13504018
    die "Contextual $*W not found"
    box $P5069, "Contextual $*W not found"
    set $P5065, $P5069
  vivi_13504018:
    set $P5064, $P5065
  fallback4016:
    $P5070 = $P5064."cur_lexpad"()
    find_dynamic_lex $P5071, "$*PACKAGE"
    unless_null $P5071, fallback4019
    get_hll_global $P5074, "GLOBAL"
    get_who $P5073, $P5074
    set $P5072, $P5073["$PACKAGE"]
    unless_null $P5072, fallback4020
    nqp_get_sc_object $P5075, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5072, $P5075
  fallback4020:
    unless_null $P5072, vivi_13514021
    die "Contextual $*PACKAGE not found"
    box $P5076, "Contextual $*PACKAGE not found"
    set $P5072, $P5076
  vivi_13514021:
    set $P5071, $P5072
  fallback4019:
    $P5077 = $P5058."install_lexical_symbol"($P5070, "$?PACKAGE", $P5071)
    .return ($P5077) 
.end
.HLL "nqp"
.namespace []
.sub "you_are_here" :subid("cuid_256_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1759
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1760
    nqp_decontainerize $P5001, _lex_param_0
    $P5002 = $P5001."CTXSAVE"()
    $P5003 = _lex_param_1."!make"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<use>" :subid("cuid_257_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1765
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$module", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
.annotate 'line', 1766
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback4022
    get_hll_global $P5005, "GLOBAL"
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback4023
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5003, $P5006
  fallback4023:
    unless_null $P5003, vivi_13524024
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_13524024:
    set $P5002, $P5003
  fallback4022:
    unless_null _lex_param_1, fallback4025
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5009
  fallback4025:
    set $P5008, _lex_param_1["name"]
    unless_null $P5008, fallback4026
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5008, $P5010
  fallback4026:
    set $S5001, $P5008
    find_dynamic_lex $P5011, "$*GLOBALish"
    unless_null $P5011, fallback4027
    get_hll_global $P5014, "GLOBAL"
    get_who $P5013, $P5014
    set $P5012, $P5013["$GLOBALish"]
    unless_null $P5012, fallback4028
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5012, $P5015
  fallback4028:
    unless_null $P5012, vivi_13534029
    die "Contextual $*GLOBALish not found"
    box $P5016, "Contextual $*GLOBALish not found"
    set $P5012, $P5016
  vivi_13534029:
    set $P5011, $P5012
  fallback4027:
    $P5017 = $P5002."load_module"($S5001, $P5011)
    set $P101, $P5017
    defined $I5001, $P101
    box $P5020, $I5001
    set $P5019, $P5020
    unless $I5001 goto if1354_end4031 
.annotate 'line', 1767
.annotate 'line', 1768
    $P5018 = "&import_HOW_exports"($P101)
    set $P5019, $P5018
  if1354_end4031:
.annotate 'line', 1770
    get_hll_global $P5024, "GLOBAL"
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["Stmts"]
    unless_null $P5021, fallback4032
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5021, $P5025
  fallback4032:
    $P5026 = $P5021."new"()
    $P5027 = _lex_param_1."!make"($P5026)
    .return ($P5027) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<if>" :subid("cuid_258_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1773
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5031 = 'cuid_433_1346968539.359' 
    capture_lex $P5031 
    .lex "$count", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
    unless_null _lex_param_1, fallback4033
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5004
  fallback4033:
    set $P5003, _lex_param_1["xblock"]
    unless_null $P5003, fallback4034
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5003, $P5005
  fallback4034:
    set $N5002, $P5003
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5006, $N5001
    set $P101, $P5006
.annotate 'line', 1775
    unless_null _lex_param_1, fallback4035
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5009
  fallback4035:
    set $P5008, _lex_param_1["xblock"]
    unless_null $P5008, fallback4036
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5008, $P5010
  fallback4036:
    set $I5001, $P101
    set $P5007, $P5008[$I5001]
    unless_null $P5007, fallback4037
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5007, $P5011
  fallback4037:
    $P5012 = $P5007."ast"()
    $P5013 = "&xblock_immediate"($P5012)
    set $P102, $P5013
    unless_null _lex_param_1, fallback4040
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5015
  fallback4040:
    set $P5014, _lex_param_1["else"]
    unless_null $P5014, fallback4041
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5014, $P5016
  fallback4041:
    set $P5025, $P5014
    unless $P5014 goto if1355_end4039 
.annotate 'line', 1776
.annotate 'line', 1777
    unless_null _lex_param_1, fallback4042
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5019
  fallback4042:
    set $P5018, _lex_param_1["else"]
    unless_null $P5018, fallback4043
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5018, $P5020
  fallback4043:
    set $P5017, $P5018[0]
    unless_null $P5017, fallback4044
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5017, $P5021
  fallback4044:
    $P5022 = $P5017."ast"()
    $P5023 = "&block_immediate"($P5022)
    $P5024 = $P102."push"($P5023)
    set $P5025, $P5024
  if1355_end4039:
  while1356_test4045:
    set $N5004, $P101
    set $N5005, 0
    isgt $I5002, $N5004, $N5005
    box $P5029, $I5002
    set $P5028, $P5029
    unless $I5002 goto while1356_done4049 
  while1356_redo4047:
    .const 'Sub' $P5026 = 'cuid_433_1346968539.359' 
    capture_lex $P5026
    $P5027 = $P5026()
    set $P5028, $P5027
    goto while1356_test4045 
  while1356_done4049:
.annotate 'line', 1786
    $P5030 = _lex_param_1."!make"($P102)
    .return ($P5030) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_433_1346968539.359") :anon :lex :outer("cuid_258_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1780
    .lex "$else", $P101 
    .local pmc tmp_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    find_lex $P5002, "$count"
    set tmp_1, $P5002
    set $N5002, tmp_1
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$count", $P5003
    find_lex $P5002, "$past"
    set $P101, $P5002
.annotate 'line', 1783
    find_lex $P5005, "$/"
    unless_null $P5005, fallback4050
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5005, $P5006
  fallback4050:
    set $P5004, $P5005["xblock"]
    unless_null $P5004, fallback4051
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5004, $P5007
  fallback4051:
    find_lex $P5008, "$count"
    set $I5001, $P5008
    set $P5003, $P5004[$I5001]
    unless_null $P5003, fallback4052
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5003, $P5009
  fallback4052:
    $P5010 = $P5003."ast"()
    $P5011 = "&xblock_immediate"($P5010)
    store_lex "$past", $P5011
.annotate 'line', 1784
    find_lex $P5012, "$past"
    $P5013 = $P5012."push"($P101)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<unless>" :subid("cuid_259_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1789
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
.annotate 'line', 1790
    unless_null _lex_param_1, fallback4053
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5003
  fallback4053:
    set $P5002, _lex_param_1["xblock"]
    unless_null $P5002, fallback4054
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5002, $P5004
  fallback4054:
    $P5005 = $P5002."ast"()
    $P5006 = "&xblock_immediate"($P5005)
    set $P101, $P5006
.annotate 'line', 1791
    $P5007 = $P101."op"("unless")
.annotate 'line', 1792
    $P5008 = _lex_param_1."!make"($P101)
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<while>" :subid("cuid_260_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1795
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
.annotate 'line', 1796
    unless_null _lex_param_1, fallback4055
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5003
  fallback4055:
    set $P5002, _lex_param_1["xblock"]
    unless_null $P5002, fallback4056
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5002, $P5004
  fallback4056:
    $P5005 = $P5002."ast"()
    $P5006 = "&xblock_immediate"($P5005)
    set $P101, $P5006
.annotate 'line', 1797
    unless_null _lex_param_1, fallback4057
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5008
  fallback4057:
    set $P5007, _lex_param_1["sym"]
    unless_null $P5007, fallback4058
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5007, $P5009
  fallback4058:
    set $S5001, $P5007
    $P5010 = $P101."op"($S5001)
    find_dynamic_lex $P5011, "$*CONTROL_USED"
    unless_null $P5011, fallback4061
    get_hll_global $P5014, "GLOBAL"
    get_who $P5013, $P5014
    set $P5012, $P5013["$CONTROL_USED"]
    unless_null $P5012, fallback4062
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5012, $P5015
  fallback4062:
    unless_null $P5012, vivi_13584063
    die "Contextual $*CONTROL_USED not found"
    box $P5016, "Contextual $*CONTROL_USED not found"
    set $P5012, $P5016
  vivi_13584063:
    set $P5011, $P5012
  fallback4061:
    set $P5024, $P5011
    if $P5011 goto unless1357_end4060 
.annotate 'line', 1798
.annotate 'line', 1799
    get_hll_global $P5020, "GLOBAL"
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["IVal"]
    unless_null $P5017, fallback4064
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5017, $P5021
  fallback4064:
    $P5022 = $P5017."new"(1 :named("value"), "nohandler" :named("named"))
    $P5023 = $P101."push"($P5022)
    set $P5024, $P5023
  unless1357_end4060:
.annotate 'line', 1801
    $P5025 = _lex_param_1."!make"($P101)
    .return ($P5025) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<repeat>" :subid("cuid_261_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1804
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$op", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
    unless_null _lex_param_1, fallback4065
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5004
  fallback4065:
    set $P5003, _lex_param_1["wu"]
    unless_null $P5003, fallback4066
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5003, $P5005
  fallback4066:
    set $S5002, $P5003
    concat $S5001, "repeat_", $S5002
    box $P5006, $S5001
    set $P101, $P5006
    unless_null _lex_param_1, fallback4069
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5008
  fallback4069:
    set $P5007, _lex_param_1["xblock"]
    unless_null $P5007, fallback4070
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5007, $P5009
  fallback4070:
    unless $P5007 goto if1359_else4067 
.annotate 'line', 1807
.annotate 'line', 1808
    unless_null _lex_param_1, fallback4071
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5011
  fallback4071:
    set $P5010, _lex_param_1["xblock"]
    unless_null $P5010, fallback4072
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5010, $P5012
  fallback4072:
    $P5013 = $P5010."ast"()
    $P5014 = "&xblock_immediate"($P5013)
    set $P102, $P5014
.annotate 'line', 1809
    $P5015 = $P102."op"($P101)
    set $P5031, $P5015
    goto if1359_end4068
  if1359_else4067:
.annotate 'line', 1811
.annotate 'line', 1812
    get_hll_global $P5019, "GLOBAL"
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Op"]
    unless_null $P5016, fallback4073
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5016, $P5020
  fallback4073:
    unless_null _lex_param_1, fallback4074
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5022
  fallback4074:
    set $P5021, _lex_param_1["EXPR"]
    unless_null $P5021, fallback4075
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5021, $P5023
  fallback4075:
    $P5024 = $P5021."ast"()
    unless_null _lex_param_1, fallback4076
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5026
  fallback4076:
    set $P5025, _lex_param_1["pblock"]
    unless_null $P5025, fallback4077
    nqp_get_sc_object $P5027, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5025, $P5027
  fallback4077:
    $P5028 = $P5025."ast"()
    $P5029 = "&block_immediate"($P5028)
    $P5030 = $P5016."new"($P5024, $P5029, $P101 :named("op"), _lex_param_1 :named("node"))
    set $P102, $P5030
    set $P5031, $P102
  if1359_end4068:
    find_dynamic_lex $P5032, "$*CONTROL_USED"
    unless_null $P5032, fallback4080
    get_hll_global $P5035, "GLOBAL"
    get_who $P5034, $P5035
    set $P5033, $P5034["$CONTROL_USED"]
    unless_null $P5033, fallback4081
    nqp_get_sc_object $P5036, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5033, $P5036
  fallback4081:
    unless_null $P5033, vivi_13614082
    die "Contextual $*CONTROL_USED not found"
    box $P5037, "Contextual $*CONTROL_USED not found"
    set $P5033, $P5037
  vivi_13614082:
    set $P5032, $P5033
  fallback4080:
    set $P5045, $P5032
    if $P5032 goto unless1360_end4079 
.annotate 'line', 1815
.annotate 'line', 1816
    get_hll_global $P5041, "GLOBAL"
    nqp_get_package_through_who $P5040, $P5041, "QAST"
    get_who $P5039, $P5040
    set $P5038, $P5039["IVal"]
    unless_null $P5038, fallback4083
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5038, $P5042
  fallback4083:
    $P5043 = $P5038."new"(1 :named("value"), "nohandler" :named("named"))
    $P5044 = $P102."push"($P5043)
    set $P5045, $P5044
  unless1360_end4079:
.annotate 'line', 1818
    $P5046 = _lex_param_1."!make"($P102)
    .return ($P5046) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<for>" :subid("cuid_262_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1821
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "$block", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
.annotate 'line', 1822
    unless_null _lex_param_1, fallback4084
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5004
  fallback4084:
    set $P5003, _lex_param_1["xblock"]
    unless_null $P5003, fallback4085
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5003, $P5005
  fallback4085:
    $P5006 = $P5003."ast"()
    set $P101, $P5006
.annotate 'line', 1823
    $P5007 = $P101."op"("for")
    set $P5008, $P101[1]
    unless_null $P5008, fallback4086
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5008, $P5009
  fallback4086:
    set $P102, $P5008
.annotate 'line', 1825
    $P5010 = $P102."arity"()
    set $P5022, $P5010
    if $P5010 goto unless1362_end4088 
.annotate 'line', 1826
    set $P5011, $P102[0]
    unless_null $P5011, fallback4089
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5011, $P5012
  fallback4089:
    get_hll_global $P5016, "GLOBAL"
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["Var"]
    unless_null $P5013, fallback4090
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5013, $P5017
  fallback4090:
    $P5018 = $P5013."new"("$_" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5019 = $P5011."push"($P5018)
.annotate 'line', 1827
    $P5020 = $P102."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1828
    $P5021 = $P102."arity"(1)
    set $P5022, $P5021
  unless1362_end4088:
.annotate 'line', 1830
    $P5023 = $P102."blocktype"("immediate")
    find_dynamic_lex $P5024, "$*CONTROL_USED"
    unless_null $P5024, fallback4093
    get_hll_global $P5027, "GLOBAL"
    get_who $P5026, $P5027
    set $P5025, $P5026["$CONTROL_USED"]
    unless_null $P5025, fallback4094
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5025, $P5028
  fallback4094:
    unless_null $P5025, vivi_13644095
    die "Contextual $*CONTROL_USED not found"
    box $P5029, "Contextual $*CONTROL_USED not found"
    set $P5025, $P5029
  vivi_13644095:
    set $P5024, $P5025
  fallback4093:
    set $P5037, $P5024
    if $P5024 goto unless1363_end4092 
.annotate 'line', 1831
.annotate 'line', 1832
    get_hll_global $P5033, "GLOBAL"
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["IVal"]
    unless_null $P5030, fallback4096
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5030, $P5034
  fallback4096:
    $P5035 = $P5030."new"(1 :named("value"), "nohandler" :named("named"))
    $P5036 = $P101."push"($P5035)
    set $P5037, $P5036
  unless1363_end4092:
.annotate 'line', 1834
    $P5038 = _lex_param_1."!make"($P101)
    .return ($P5038) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CATCH>" :subid("cuid_263_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1837
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
.annotate 'line', 1838
    unless_null _lex_param_1, fallback4097
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5003
  fallback4097:
    set $P5002, _lex_param_1["block"]
    unless_null $P5002, fallback4098
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5002, $P5004
  fallback4098:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 1839
    $P5006 = "&set_block_handler"(_lex_param_1, $P101, "CATCH")
.annotate 'line', 1840
    $P5007 = "&default_for"("$")
    $P5008 = _lex_param_1."!make"($P5007)
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CONTROL>" :subid("cuid_264_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1843
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
.annotate 'line', 1844
    unless_null _lex_param_1, fallback4099
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5003
  fallback4099:
    set $P5002, _lex_param_1["block"]
    unless_null $P5002, fallback4100
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5002, $P5004
  fallback4100:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 1845
    $P5006 = "&set_block_handler"(_lex_param_1, $P101, "CONTROL")
.annotate 'line', 1846
    $P5007 = "&default_for"("$")
    $P5008 = _lex_param_1."!make"($P5007)
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<BEGIN>" :subid("cuid_265_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1880
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1881
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback4101
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback4102
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5002, $P5005
  fallback4102:
    unless_null $P5002, vivi_13654103
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_13654103:
    set $P5001, $P5002
  fallback4101:
    unless_null _lex_param_1, fallback4104
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5008
  fallback4104:
    set $P5007, _lex_param_1["blorst"]
    unless_null $P5007, fallback4105
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5007, $P5009
  fallback4105:
    $P5010 = $P5007."ast"()
    $P5011 = $P5001."run_begin_block"($P5010)
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<INIT>" :subid("cuid_266_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1884
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1885
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback4106
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback4107
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5002, $P5005
  fallback4107:
    unless_null $P5002, vivi_13664108
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_13664108:
    set $P5001, $P5002
  fallback4106:
    $P5007 = $P5001."cur_lexpad"()
    unless_null _lex_param_1, fallback4109
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5009
  fallback4109:
    set $P5008, _lex_param_1["blorst"]
    unless_null $P5008, fallback4110
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5008, $P5010
  fallback4110:
    $P5011 = $P5008."ast"()
    $P5012 = $P5007."push"($P5011)
.annotate 'line', 1886
    get_hll_global $P5016, "GLOBAL"
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["Stmts"]
    unless_null $P5013, fallback4111
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5013, $P5017
  fallback4111:
    $P5018 = $P5013."new"()
    $P5019 = _lex_param_1."!make"($P5018)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<try>" :subid("cuid_267_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1889
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_4112
    .lex "RETURN", $P102
.annotate 'line', 1890
    unless_null _lex_param_1, fallback4114
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5003
  fallback4114:
    set $P5002, _lex_param_1["blorst"]
    unless_null $P5002, fallback4115
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5002, $P5004
  fallback4115:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
    get_hll_global $P5009, "GLOBAL"
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Block"]
    unless_null $P5006, fallback4118
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5006, $P5010
  fallback4118:
    type_check $I5001, $P101, $P5006
    box $P5023, $I5001
    set $P5022, $P5023
    unless $I5001 goto if1367_end4117 
.annotate 'line', 1891
    set $P5011, $P101["handlers"]
    unless_null $P5011, fallback4123
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5011, $P5012
  fallback4123:
    set $P5015, $P5011
    unless $P5011 goto if1369_end4122 
    set $P5013, $P101["handlers"]
    unless_null $P5013, fallback4124
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5013, $P5014
  fallback4124:
    exists $I5002, $P5013["CATCH"]
    box $P5016, $I5002
    set $P5015, $P5016
  if1369_end4122:
    unless $P5015 goto if1368_else4119 
.annotate 'line', 1892
.annotate 'line', 1893
    $P5017 = _lex_param_1."!make"($P101)
    find_lex $P5018, "RETURN"
    $P5019 = $P5018(1)
    set $P5021, $P5019
    goto if1368_end4120
  if1368_else4119:
.annotate 'line', 1896
.annotate 'line', 1897
    $P5020 = $P101."blocktype"("immediate")
    set $P5021, $P5020
  if1368_end4120:
    set $P5022, $P5021
  if1367_end4117:
.annotate 'line', 1900
    get_hll_global $P5027, "GLOBAL"
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["Op"]
    unless_null $P5024, fallback4125
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5024, $P5028
  fallback4125:
.annotate 'line', 1904
    get_hll_global $P5032, "GLOBAL"
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["Stmts"]
    unless_null $P5029, fallback4126
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5029, $P5033
  fallback4126:
.annotate 'line', 1905
    get_hll_global $P5037, "GLOBAL"
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set $P5034, $P5035["Op"]
    unless_null $P5034, fallback4127
    nqp_get_sc_object $P5038, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5034, $P5038
  fallback4127:
.annotate 'line', 1907
    get_hll_global $P5042, "GLOBAL"
    nqp_get_package_through_who $P5041, $P5042, "QAST"
    get_who $P5040, $P5041
    set $P5039, $P5040["Op"]
    unless_null $P5039, fallback4128
    nqp_get_sc_object $P5043, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5039, $P5043
  fallback4128:
    $P5044 = $P5039."new"("exception" :named("op"))
.annotate 'line', 1908
    get_hll_global $P5048, "GLOBAL"
    nqp_get_package_through_who $P5047, $P5048, "QAST"
    get_who $P5046, $P5047
    set $P5045, $P5046["SVal"]
    unless_null $P5045, fallback4129
    nqp_get_sc_object $P5049, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5045, $P5049
  fallback4129:
    $P5050 = $P5045."new"("handled" :named("value"))
.annotate 'line', 1909
    get_hll_global $P5054, "GLOBAL"
    nqp_get_package_through_who $P5053, $P5054, "QAST"
    get_who $P5052, $P5053
    set $P5051, $P5052["IVal"]
    unless_null $P5051, fallback4130
    nqp_get_sc_object $P5055, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5051, $P5055
  fallback4130:
    $P5056 = $P5051."new"(1 :named("value"))
    $P5057 = $P5034."new"($P5044, $P5050, $P5056, "bindkey_i" :named("op"))
.annotate 'line', 1911
    $P5058 = "&default_for"("$")
    $P5059 = $P5029."new"($P5057, $P5058)
    $P5060 = $P5024."new"($P101, "CATCH", $P5059, "handle" :named("op"))
    $P5061 = _lex_param_1."!make"($P5060)
    goto lexotic_4113
  lexotic_4112:
    .get_results ($P5061)
  lexotic_4113:
    .return ($P5061) 
.end
.HLL "nqp"
.namespace []
.sub "blorst" :subid("cuid_268_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1915
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1916
    unless_null _lex_param_1, fallback4133
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback4133:
    set $P5001, _lex_param_1["block"]
    unless_null $P5001, fallback4134
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback4134:
    unless $P5001 goto if1370_else4131 
.annotate 'line', 1917
    unless_null _lex_param_1, fallback4135
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5005
  fallback4135:
    set $P5004, _lex_param_1["block"]
    unless_null $P5004, fallback4136
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5004, $P5006
  fallback4136:
    $P5007 = $P5004."ast"()
    $P5008 = "&block_immediate"($P5007)
    set $P5013, $P5008
    goto if1370_end4132
  if1370_else4131:
.annotate 'line', 1918
    unless_null _lex_param_1, fallback4137
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5010
  fallback4137:
    set $P5009, _lex_param_1["statement"]
    unless_null $P5009, fallback4138
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5009, $P5011
  fallback4138:
    $P5012 = $P5009."ast"()
    set $P5013, $P5012
  if1370_end4132:
    $P5014 = _lex_param_1."!make"($P5013)
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<if>" :subid("cuid_269_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1923
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4139
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback4139:
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4140
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback4140:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<unless>" :subid("cuid_270_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1924
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4141
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback4141:
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4142
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback4142:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<while>" :subid("cuid_271_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1926
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4143
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback4143:
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4144
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback4144:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<until>" :subid("cuid_272_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1927
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4145
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback4145:
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4146
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback4146:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<fatarrow>" :subid("cuid_273_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1931
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4147
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback4147:
    set $P5001, _lex_param_1["fatarrow"]
    unless_null $P5001, fallback4148
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback4148:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<colonpair>" :subid("cuid_274_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1932
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4149
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback4149:
    set $P5001, _lex_param_1["colonpair"]
    unless_null $P5001, fallback4150
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback4150:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<variable>" :subid("cuid_275_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1933
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4151
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback4151:
    set $P5001, _lex_param_1["variable"]
    unless_null $P5001, fallback4152
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback4152:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<package_declarator>" :subid("cuid_276_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1934
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4153
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback4153:
    set $P5001, _lex_param_1["package_declarator"]
    unless_null $P5001, fallback4154
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback4154:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<scope_declarator>" :subid("cuid_277_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1935
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4155
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback4155:
    set $P5001, _lex_param_1["scope_declarator"]
    unless_null $P5001, fallback4156
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback4156:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<routine_declarator>" :subid("cuid_278_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1936
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4157
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback4157:
    set $P5001, _lex_param_1["routine_declarator"]
    unless_null $P5001, fallback4158
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback4158:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<regex_declarator>" :subid("cuid_279_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1937
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4159
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback4159:
    set $P5001, _lex_param_1["regex_declarator"]
    unless_null $P5001, fallback4160
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback4160:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<statement_prefix>" :subid("cuid_280_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1938
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4161
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback4161:
    set $P5001, _lex_param_1["statement_prefix"]
    unless_null $P5001, fallback4162
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback4162:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<lambda>" :subid("cuid_281_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1939
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1940
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback4163
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5005
  fallback4163:
    unless_null _lex_param_1, fallback4164
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5007
  fallback4164:
    set $P5006, _lex_param_1["pblock"]
    unless_null $P5006, fallback4165
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5006, $P5008
  fallback4165:
    $P5009 = $P5006."ast"()
    $P5010 = $P5001."new"($P5009, "takeclosure" :named("op"))
    $P5011 = _lex_param_1."!make"($P5010)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "fatarrow" :subid("cuid_282_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1943
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
.annotate 'line', 1944
    unless_null _lex_param_1, fallback4166
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5003
  fallback4166:
    set $P5002, _lex_param_1["val"]
    unless_null $P5002, fallback4167
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5002, $P5004
  fallback4167:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 1945
    unless_null _lex_param_1, fallback4168
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5007
  fallback4168:
    set $P5006, _lex_param_1["key"]
    unless_null $P5006, fallback4169
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5006, $P5008
  fallback4169:
    $P5009 = $P5006."Str"()
    $P5010 = $P101."named"($P5009)
.annotate 'line', 1946
    $P5011 = _lex_param_1."!make"($P101)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "colonpair" :subid("cuid_283_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1949
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5022 = 'cuid_434_1346968539.359' 
    capture_lex $P5022 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4172
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback4172:
    set $P5001, _lex_param_1["variable"]
    unless_null $P5001, fallback4173
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback4173:
    unless $P5001 goto if1371_else4170 
.annotate 'line', 1950
.annotate 'line', 1951
    unless_null _lex_param_1, fallback4174
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5005
  fallback4174:
    set $P5004, _lex_param_1["variable"]
    unless_null $P5004, fallback4175
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5004, $P5006
  fallback4175:
    $P5007 = $P5004."ast"()
    unless_null _lex_param_1, fallback4176
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5010
  fallback4176:
    set $P5009, _lex_param_1["variable"]
    unless_null $P5009, fallback4177
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5009, $P5011
  fallback4177:
    set $P5008, $P5009["desigilname"]
    unless_null $P5008, fallback4178
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5008, $P5012
  fallback4178:
    set $S5001, $P5008
    $P5013 = $P5007."named"($S5001)
.annotate 'line', 1952
    unless_null _lex_param_1, fallback4179
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5015
  fallback4179:
    set $P5014, _lex_param_1["variable"]
    unless_null $P5014, fallback4180
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5014, $P5016
  fallback4180:
    $P5017 = $P5014."ast"()
    $P5018 = _lex_param_1."!make"($P5017)
    set $P5021, $P5018
    goto if1371_end4171
  if1371_else4170:
    .const 'Sub' $P5019 = 'cuid_434_1346968539.359' 
    capture_lex $P5019
    $P5020 = $P5019()
    set $P5021, $P5020
  if1371_end4171:
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_434_1346968539.359") :anon :lex :outer("cuid_283_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1953
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    find_lex $P5003, "$/"
    unless_null $P5003, fallback4183
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5003, $P5004
  fallback4183:
    set $P5002, $P5003["circumfix"]
    unless_null $P5002, fallback4184
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5002, $P5005
  fallback4184:
    unless $P5002 goto if1372_else4181 
.annotate 'line', 1955
    find_lex $P5008, "$/"
    unless_null $P5008, fallback4185
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5008, $P5009
  fallback4185:
    set $P5007, $P5008["circumfix"]
    unless_null $P5007, fallback4186
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5007, $P5010
  fallback4186:
    set $P5006, $P5007[0]
    unless_null $P5006, fallback4187
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5006, $P5011
  fallback4187:
    $P5012 = $P5006."ast"()
    set $P5023, $P5012
    goto if1372_end4182
  if1372_else4181:
.annotate 'line', 1956
    get_hll_global $P5016, "GLOBAL"
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["IVal"]
    unless_null $P5013, fallback4188
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5013, $P5017
  fallback4188:
    find_lex $P5019, "$/"
    unless_null $P5019, fallback4189
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5019, $P5020
  fallback4189:
    set $P5018, $P5019["not"]
    unless_null $P5018, fallback4190
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5018, $P5021
  fallback4190:
    isfalse $I5001, $P5018
    $P5022 = $P5013."new"($I5001 :named("value"))
    set $P5023, $P5022
  if1372_end4182:
    set $P101, $P5023
.annotate 'line', 1957
    find_lex $P5025, "$/"
    unless_null $P5025, fallback4191
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5025, $P5026
  fallback4191:
    set $P5024, $P5025["identifier"]
    unless_null $P5024, fallback4192
    nqp_get_sc_object $P5027, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5024, $P5027
  fallback4192:
    set $S5001, $P5024
    $P5028 = $P101."named"($S5001)
.annotate 'line', 1958
    find_dynamic_lex $P5029, "$/"
    $P5030 = $P5029."!make"($P101)
    .return ($P5030) 
.end
.HLL "nqp"
.namespace []
.sub "variable" :subid("cuid_284_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1962
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5021 = 'cuid_436_1346968539.359' 
    capture_lex $P5021 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    unless_null _lex_param_1, fallback4195
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5003
  fallback4195:
    set $P5002, _lex_param_1["postcircumfix"]
    unless_null $P5002, fallback4196
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5002, $P5004
  fallback4196:
    unless $P5002 goto if1373_else4193 
.annotate 'line', 1964
.annotate 'line', 1965
    unless_null _lex_param_1, fallback4197
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5006
  fallback4197:
    set $P5005, _lex_param_1["postcircumfix"]
    unless_null $P5005, fallback4198
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5005, $P5007
  fallback4198:
    $P5008 = $P5005."ast"()
    set $P101, $P5008
.annotate 'line', 1966
    get_hll_global $P5012, "GLOBAL"
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["VarWithFallback"]
    unless_null $P5009, fallback4199
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5009, $P5013
  fallback4199:
.annotate 'line', 1967
    $P5014 = "&default_for"("$")
    $P5015 = $P5009."new"("$/" :named("name"), "lexical" :named("scope"), $P5014 :named("fallback"))
    $P5016 = $P101."unshift"($P5015)
    set $P5019, $P5016
    goto if1373_end4194
  if1373_else4193:
    .const 'Sub' $P5017 = 'cuid_436_1346968539.359' 
    capture_lex $P5017
    $P5018 = $P5017()
    set $P5019, $P5018
  if1373_end4194:
.annotate 'line', 2036
    $P5020 = _lex_param_1."!make"($P101)
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_436_1346968539.359") :anon :lex :outer("cuid_284_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1970
    .const 'Sub' $P5064 = 'cuid_435_1346968539.359' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_439_1346968539.359' 
    capture_lex $P5064 
    .lex "@name", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
.annotate 'line', 1971
    get_hll_global $P5005, "GLOBAL"
    nqp_get_package_through_who $P5004, $P5005, "NQP"
    get_who $P5003, $P5004
    set $P5002, $P5003["Compiler"]
    unless_null $P5002, fallback4200
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5002, $P5006
  fallback4200:
    find_lex $P5007, "$/"
    set $S5001, $P5007
    $P5008 = $P5002."parse_name"($S5001)
    set $P101, $P5008
    set $N5001, $P101
    set $N5002, 1
    isgt $I5001, $N5001, $N5002
    unless $I5001 goto if1374_else4201 
.annotate 'line', 1972
    find_lex $P5010, "$/"
    unless_null $P5010, fallback4205
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5010, $P5011
  fallback4205:
    set $P5009, $P5010["twigil"]
    unless_null $P5009, fallback4206
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5009, $P5012
  fallback4206:
    set $P5016, $P5009
    unless $P5009 goto if1375_end4204 
.annotate 'line', 1973
.annotate 'line', 1974
    find_lex $P5013, "$/"
    $P5014 = $P5013."CURSOR"()
    $P5015 = $P5014."panic"("Twigil not allowed on multi-part name")
    set $P5016, $P5015
  if1375_end4204:
.annotate 'line', 1976
    find_lex $P5017, "$/"
    $P5018 = "&lexical_package_lookup"($P101, $P5017)
    store_lex "$past", $P5018
    set $P5063, $P5018
    goto if1374_end4202
  if1374_else4201:
    find_lex $P5021, "$/"
    unless_null $P5021, fallback4209
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5021, $P5022
  fallback4209:
    set $P5020, $P5021["twigil"]
    unless_null $P5020, fallback4210
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5020, $P5023
  fallback4210:
    set $P5019, $P5020[0]
    unless_null $P5019, fallback4211
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5019, $P5024
  fallback4211:
    set $S5002, $P5019
    iseq $I5002, $S5002, "*"
    unless $I5002 goto if1376_else4207 
    .const 'Sub' $P5025 = 'cuid_435_1346968539.359' 
    capture_lex $P5025
    $P5026 = $P5025()
    set $P5062, $P5026
    goto if1376_end4208
  if1376_else4207:
    find_lex $P5029, "$/"
    unless_null $P5029, fallback4222
    nqp_get_sc_object $P5030, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5029, $P5030
  fallback4222:
    set $P5028, $P5029["twigil"]
    unless_null $P5028, fallback4223
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5028, $P5031
  fallback4223:
    set $P5027, $P5028[0]
    unless_null $P5027, fallback4224
    nqp_get_sc_object $P5032, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5027, $P5032
  fallback4224:
    set $S5003, $P5027
    iseq $I5003, $S5003, "!"
    unless $I5003 goto if1377_else4220 
    .const 'Sub' $P5033 = 'cuid_439_1346968539.359' 
    capture_lex $P5033
    $P5034 = $P5033()
    set $P5061, $P5034
    goto if1377_end4221
  if1377_else4220:
.annotate 'line', 2028
    find_dynamic_lex $P5035, "$*W"
    unless_null $P5035, fallback4264
    get_hll_global $P5038, "GLOBAL"
    get_who $P5037, $P5038
    set $P5036, $P5037["$W"]
    unless_null $P5036, fallback4265
    nqp_get_sc_object $P5039, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5036, $P5039
  fallback4265:
    unless_null $P5036, vivi_13904266
    die "Contextual $*W not found"
    box $P5040, "Contextual $*W not found"
    set $P5036, $P5040
  vivi_13904266:
    set $P5035, $P5036
  fallback4264:
    set $P5041, $P101[0]
    unless_null $P5041, fallback4267
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5041, $P5042
  fallback4267:
    set $S5004, $P5041
    $P5043 = $P5035."is_package"($S5004)
    unless $P5043 goto if1389_else4262 
.annotate 'line', 2029
    find_lex $P5044, "$/"
    $P5045 = "&lexical_package_lookup"($P101, $P5044)
    store_lex "$past", $P5045
.annotate 'line', 2030
    find_lex $P5046, "$past"
    find_lex $P5048, "$/"
    unless_null $P5048, fallback4268
    nqp_get_sc_object $P5049, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5048, $P5049
  fallback4268:
    set $P5047, $P5048["sigil"]
    unless_null $P5047, fallback4269
    nqp_get_sc_object $P5050, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5047, $P5050
  fallback4269:
    $P5051 = "&default_for"($P5047)
    $P5052 = $P5046."fallback"($P5051)
    set $P5060, $P5052
    goto if1389_end4263
  if1389_else4262:
.annotate 'line', 2032
.annotate 'line', 2033
    get_hll_global $P5056, "GLOBAL"
    nqp_get_package_through_who $P5055, $P5056, "QAST"
    get_who $P5054, $P5055
    set $P5053, $P5054["Var"]
    unless_null $P5053, fallback4270
    nqp_get_sc_object $P5057, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5053, $P5057
  fallback4270:
    $P5058 = $P101."pop"()
    set $S5005, $P5058
    $P5059 = $P5053."new"($S5005 :named("name"), "lexical" :named("scope"))
    store_lex "$past", $P5059
    set $P5060, $P5059
  if1389_end4263:
    set $P5061, $P5060
  if1377_end4221:
    set $P5062, $P5061
  if1376_end4208:
    set $P5063, $P5062
  if1374_end4202:
    .return ($P5063) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_435_1346968539.359") :anon :lex :outer("cuid_436_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1978
    .lex "$global_fallback", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
.annotate 'line', 1979
    get_hll_global $P5005, "GLOBAL"
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Op"]
    unless_null $P5002, fallback4212
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5002, $P5006
  fallback4212:
.annotate 'line', 1981
    new $P5007, 'ResizablePMCArray'
    box $P5008, "GLOBAL"
    push $P5007, $P5008
    find_lex $P5010, "$/"
    unless_null $P5010, fallback4213
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5010, $P5011
  fallback4213:
    set $P5009, $P5010["sigil"]
    unless_null $P5009, fallback4214
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5009, $P5012
  fallback4214:
    set $S5002, $P5009
    find_lex $P5014, "$/"
    unless_null $P5014, fallback4215
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5014, $P5015
  fallback4215:
    set $P5013, $P5014["desigilname"]
    unless_null $P5013, fallback4216
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5013, $P5016
  fallback4216:
    set $S5003, $P5013
    concat $S5001, $S5002, $S5003
    box $P5017, $S5001
    push $P5007, $P5017
    find_lex $P5018, "$/"
    $P5019 = "&lexical_package_lookup"($P5007, $P5018)
.annotate 'line', 1982
    get_hll_global $P5023, "GLOBAL"
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback4217
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5020, $P5024
  fallback4217:
.annotate 'line', 1984
    get_hll_global $P5028, "GLOBAL"
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["SVal"]
    unless_null $P5025, fallback4218
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5025, $P5029
  fallback4218:
    find_lex $P5030, "$/"
    set $S5006, $P5030
    concat $S5005, "Contextual ", $S5006
    concat $S5004, $S5005, " not found"
    $P5031 = $P5025."new"($S5004 :named("value"))
    $P5032 = $P5020."new"($P5031, "die_s" :named("op"))
    $P5033 = $P5002."new"($P5019, $P5032, "ifnull" :named("op"))
    set $P101, $P5033
.annotate 'line', 1986
    get_hll_global $P5037, "GLOBAL"
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set $P5034, $P5035["VarWithFallback"]
    unless_null $P5034, fallback4219
    nqp_get_sc_object $P5038, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5034, $P5038
  fallback4219:
.annotate 'line', 1987
    find_lex $P5039, "@name"
    $P5040 = $P5039."pop"()
    set $S5007, $P5040
    $P5041 = $P5034."new"($S5007 :named("name"), "contextual" :named("scope"), $P101 :named("fallback"))
    store_lex "$past", $P5041
    .return ($P5041) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_439_1346968539.359") :anon :lex :outer("cuid_436_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1991
    .const 'Sub' $P5065 = 'cuid_438_1346968539.359' 
    capture_lex $P5065 
    .lex "$name", $P101 
    .lex "$ch", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
.annotate 'line', 1993
    find_lex $P5003, "@name"
    $P5004 = $P5003."pop"()
    set $S5001, $P5004
    box $P5005, $S5001
    set $P101, $P5005
    find_dynamic_lex $P5006, "$*PKGDECL"
    unless_null $P5006, fallback4227
    get_hll_global $P5009, "GLOBAL"
    get_who $P5008, $P5009
    set $P5007, $P5008["$PKGDECL"]
    unless_null $P5007, fallback4228
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5007, $P5010
  fallback4228:
    unless_null $P5007, vivi_13794229
    die "Contextual $*PKGDECL not found"
    box $P5011, "Contextual $*PKGDECL not found"
    set $P5007, $P5011
  vivi_13794229:
    set $P5006, $P5007
  fallback4227:
    set $S5002, $P5006
    iseq $I5001, $S5002, "role"
    unless $I5001 goto if1378_else4225 
.annotate 'line', 1995
.annotate 'line', 1996
    get_hll_global $P5015, "GLOBAL"
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Var"]
    unless_null $P5012, fallback4230
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5012, $P5016
  fallback4230:
    $P5017 = $P5012."new"("$?CLASS" :named("name"), "lexical" :named("scope"))
    set $P102, $P5017
.annotate 'line', 1997
    find_dynamic_lex $P5018, "$*PACKAGE"
    unless_null $P5018, fallback4231
    get_hll_global $P5021, "GLOBAL"
    get_who $P5020, $P5021
    set $P5019, $P5020["$PACKAGE"]
    unless_null $P5019, fallback4232
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5019, $P5022
  fallback4232:
    unless_null $P5019, vivi_13804233
    die "Contextual $*PACKAGE not found"
    box $P5023, "Contextual $*PACKAGE not found"
    set $P5019, $P5023
  vivi_13804233:
    set $P5018, $P5019
  fallback4231:
    $P5024 = $P102."set_compile_time_value"($P5018)
    set $P5037, $P5024
    goto if1378_end4226
  if1378_else4225:
.annotate 'line', 1999
.annotate 'line', 2000
    get_hll_global $P5028, "GLOBAL"
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["WVal"]
    unless_null $P5025, fallback4234
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5025, $P5029
  fallback4234:
    find_dynamic_lex $P5030, "$*PACKAGE"
    unless_null $P5030, fallback4235
    get_hll_global $P5033, "GLOBAL"
    get_who $P5032, $P5033
    set $P5031, $P5032["$PACKAGE"]
    unless_null $P5031, fallback4236
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5031, $P5034
  fallback4236:
    unless_null $P5031, vivi_13814237
    die "Contextual $*PACKAGE not found"
    box $P5035, "Contextual $*PACKAGE not found"
    set $P5031, $P5035
  vivi_13814237:
    set $P5030, $P5031
  fallback4235:
    $P5036 = $P5025."new"($P5030 :named("value"))
    set $P102, $P5036
    set $P5037, $P102
  if1378_end4226:
.annotate 'line', 2002
    get_hll_global $P5041, "GLOBAL"
    nqp_get_package_through_who $P5040, $P5041, "QAST"
    get_who $P5039, $P5040
    set $P5038, $P5039["Var"]
    unless_null $P5038, fallback4238
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5038, $P5042
  fallback4238:
.annotate 'line', 2004
    get_hll_global $P5046, "GLOBAL"
    nqp_get_package_through_who $P5045, $P5046, "QAST"
    get_who $P5044, $P5045
    set $P5043, $P5044["VM"]
    unless_null $P5043, fallback4239
    nqp_get_sc_object $P5047, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5043, $P5047
  fallback4239:
.annotate 'line', 2005
    get_hll_global $P5051, "GLOBAL"
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["Var"]
    unless_null $P5048, fallback4240
    nqp_get_sc_object $P5052, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5048, $P5052
  fallback4240:
    $P5053 = $P5048."new"("self" :named("name"), "lexical" :named("scope"))
    $P5054 = $P5043."new"($P5053, "nqp_decontainerize PP" :named("pirop"))
    $P5055 = $P5038."new"($P5054, $P102, $P101 :named("name"), "attribute" :named("scope"))
    store_lex "$past", $P5055
    find_dynamic_lex $P5056, "$*IN_DECL"
    unless_null $P5056, fallback4243
    get_hll_global $P5059, "GLOBAL"
    get_who $P5058, $P5059
    set $P5057, $P5058["$IN_DECL"]
    unless_null $P5057, fallback4244
    nqp_get_sc_object $P5060, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5057, $P5060
  fallback4244:
    unless_null $P5057, vivi_13834245
    die "Contextual $*IN_DECL not found"
    box $P5061, "Contextual $*IN_DECL not found"
    set $P5057, $P5061
  vivi_13834245:
    set $P5056, $P5057
  fallback4243:
    set $P5064, $P5056
    if $P5056 goto unless1382_end4242 
    .const 'Sub' $P5062 = 'cuid_438_1346968539.359' 
    capture_lex $P5062
    $P5063 = $P5062()
    set $P5064, $P5063
  unless1382_end4242:
    .return ($P5064) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_438_1346968539.359") :anon :lex :outer("cuid_439_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2010
    .const 'Sub' $P5032 = 'cuid_437_1346968539.359' 
    capture_lex $P5032 
    .lex "$attr", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
.annotate 'line', 2012
    find_dynamic_lex $P5006, "$*PACKAGE"
    unless_null $P5006, fallback4246
    get_hll_global $P5009, "GLOBAL"
    get_who $P5008, $P5009
    set $P5007, $P5008["$PACKAGE"]
    unless_null $P5007, fallback4247
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5007, $P5010
  fallback4247:
    unless_null $P5007, vivi_13844248
    die "Contextual $*PACKAGE not found"
    box $P5011, "Contextual $*PACKAGE not found"
    set $P5007, $P5011
  vivi_13844248:
    set $P5006, $P5007
  fallback4246:
    get_how $P5005, $P5006
    find_dynamic_lex $P5012, "$*PACKAGE"
    unless_null $P5012, fallback4249
    get_hll_global $P5015, "GLOBAL"
    get_who $P5014, $P5015
    set $P5013, $P5014["$PACKAGE"]
    unless_null $P5013, fallback4250
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5013, $P5016
  fallback4250:
    unless_null $P5013, vivi_13854251
    die "Contextual $*PACKAGE not found"
    box $P5017, "Contextual $*PACKAGE not found"
    set $P5013, $P5017
  vivi_13854251:
    set $P5012, $P5013
  fallback4249:
    $P5018 = $P5005."attributes"($P5012, 1 :named("local"))
    set $P5002, $P5018
    iter $P5004, $P5018
    new $P5020, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5020, for_handlers4254
    push_eh $P5020
  for_next4255:
    unless $P5004, for_done4257
    shift $P5021, $P5004
  for_redo4256:
    .const 'Sub' $P5019 = 'cuid_437_1346968539.359' 
    capture_lex $P5019
    $P5002 = $P5019($P5021)
    goto for_next4255
  for_handlers4254:
    .get_results ($P5020)
    pop_upto_eh $P5020
    getattribute $P5020, $P5020, 'type'
    eq $P5020, .CONTROL_LOOP_NEXT, for_next4255
    eq $P5020, .CONTROL_LOOP_REDO, for_redo4256
  for_done4257:
    pop_eh 
    defined $I5001, $P101
    unless $I5001 goto if1387_else4258 
.annotate 'line', 2018
    can $I5002, $P101, "type"
    box $P5026, $I5002
    set $P5025, $P5026
    unless $I5002 goto if1388_end4261 
.annotate 'line', 2019
.annotate 'line', 2020
    find_lex $P5022, "$past"
    $P5023 = $P101."type"()
    $P5024 = $P5022."returns"($P5023)
    set $P5025, $P5024
  if1388_end4261:
    set $P5031, $P5025
    goto if1387_end4259
  if1387_else4258:
.annotate 'line', 2023
.annotate 'line', 2024
    find_lex $P5027, "$/"
    $P5028 = $P5027."CURSOR"()
    find_lex $P5029, "$name"
    set $S5003, $P5029
    concat $S5002, "Attribute '", $S5003
    concat $S5001, $S5002, "' not declared"
    $P5030 = $P5028."panic"($S5001)
    set $P5031, $P5030
  if1387_end4259:
    .return ($P5031) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_437_1346968539.359") :anon :lex :outer("cuid_438_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2012
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 2013
    $P5001 = _lex_param_0."name"()
    set $S5001, $P5001
    find_lex $P5002, "$name"
    set $S5002, $P5002
    iseq $I5001, $S5001, $S5002
    set $I5002, $I5001
    unless $I5001 goto if1386_end4253 
    store_lex "$attr", _lex_param_0
    die 0, .CONTROL_LOOP_LAST
    set $I5002, 0
  if1386_end4253:
    .return ($I5002) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<module>" :subid("cuid_285_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2039
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4271
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback4271:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4272
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback4272:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<knowhow>" :subid("cuid_286_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2040
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4273
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback4273:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4274
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback4274:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<class>" :subid("cuid_287_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2041
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4275
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback4275:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4276
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback4276:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<grammar>" :subid("cuid_288_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2042
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4277
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback4277:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4278
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback4278:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<role>" :subid("cuid_289_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2043
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4279
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback4279:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4280
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback4280:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<native>" :subid("cuid_290_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2044
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4281
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback4281:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4282
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback4282:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<stub>" :subid("cuid_291_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2046
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$HOW", $P101 
    .lex "$PACKAGE", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
.annotate 'line', 2049
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4283
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4284
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5004, $P5007
  fallback4284:
    unless_null $P5004, vivi_13914285
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_13914285:
    set $P5003, $P5004
  fallback4283:
    unless_null _lex_param_1, fallback4286
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5011
  fallback4286:
    set $P5010, _lex_param_1["metaclass"]
    unless_null $P5010, fallback4287
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5010, $P5012
  fallback4287:
    set $P5009, $P5010["identifier"]
    unless_null $P5009, fallback4288
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5009, $P5013
  fallback4288:
    $P5014 = $P5003."find_sym"($P5009)
    set $P101, $P5014
.annotate 'line', 2050
    find_dynamic_lex $P5015, "$*W"
    unless_null $P5015, fallback4289
    get_hll_global $P5018, "GLOBAL"
    get_who $P5017, $P5018
    set $P5016, $P5017["$W"]
    unless_null $P5016, fallback4290
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5016, $P5019
  fallback4290:
    unless_null $P5016, vivi_13924291
    die "Contextual $*W not found"
    box $P5020, "Contextual $*W not found"
    set $P5016, $P5020
  vivi_13924291:
    set $P5015, $P5016
  fallback4289:
    unless_null _lex_param_1, fallback4292
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5022
  fallback4292:
    set $P5021, _lex_param_1["name"]
    unless_null $P5021, fallback4293
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5021, $P5023
  fallback4293:
    set $S5001, $P5021
    $P5024 = $P5015."pkg_create_mo"($P101, $S5001 :named("name"))
    set $P102, $P5024
    find_dynamic_lex $P5025, "$*SCOPE"
    unless_null $P5025, fallback4298
    get_hll_global $P5028, "GLOBAL"
    get_who $P5027, $P5028
    set $P5026, $P5027["$SCOPE"]
    unless_null $P5026, fallback4299
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5026, $P5029
  fallback4299:
    unless_null $P5026, vivi_13954300
    die "Contextual $*SCOPE not found"
    box $P5030, "Contextual $*SCOPE not found"
    set $P5026, $P5030
  vivi_13954300:
    set $P5025, $P5026
  fallback4298:
    set $S5002, $P5025
    iseq $I5001, $S5002, "our"
    set $I5003, $I5001
    if $I5001 goto unless1394_end4297 
    find_dynamic_lex $P5031, "$*SCOPE"
    unless_null $P5031, fallback4301
    get_hll_global $P5034, "GLOBAL"
    get_who $P5033, $P5034
    set $P5032, $P5033["$SCOPE"]
    unless_null $P5032, fallback4302
    nqp_get_sc_object $P5035, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5032, $P5035
  fallback4302:
    unless_null $P5032, vivi_13964303
    die "Contextual $*SCOPE not found"
    box $P5036, "Contextual $*SCOPE not found"
    set $P5032, $P5036
  vivi_13964303:
    set $P5031, $P5032
  fallback4301:
    set $S5003, $P5031
    iseq $I5002, $S5003, ""
    set $I5003, $I5002
  unless1394_end4297:
    unless $I5003 goto if1393_else4294 
.annotate 'line', 2053
.annotate 'line', 2054
    find_dynamic_lex $P5037, "$*W"
    unless_null $P5037, fallback4304
    get_hll_global $P5040, "GLOBAL"
    get_who $P5039, $P5040
    set $P5038, $P5039["$W"]
    unless_null $P5038, fallback4305
    nqp_get_sc_object $P5041, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5038, $P5041
  fallback4305:
    unless_null $P5038, vivi_13974306
    die "Contextual $*W not found"
    box $P5042, "Contextual $*W not found"
    set $P5038, $P5042
  vivi_13974306:
    set $P5037, $P5038
  fallback4304:
    find_dynamic_lex $P5043, "$*OUTERPACKAGE"
    unless_null $P5043, fallback4307
    get_hll_global $P5046, "GLOBAL"
    get_who $P5045, $P5046
    set $P5044, $P5045["$OUTERPACKAGE"]
    unless_null $P5044, fallback4308
    nqp_get_sc_object $P5047, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5044, $P5047
  fallback4308:
    unless_null $P5044, vivi_13984309
    die "Contextual $*OUTERPACKAGE not found"
    box $P5048, "Contextual $*OUTERPACKAGE not found"
    set $P5044, $P5048
  vivi_13984309:
    set $P5043, $P5044
  fallback4307:
    unless_null _lex_param_1, fallback4310
    nqp_get_sc_object $P5051, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5051
  fallback4310:
    set $P5050, _lex_param_1["name"]
    unless_null $P5050, fallback4311
    nqp_get_sc_object $P5052, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5050, $P5052
  fallback4311:
    set $P5049, $P5050["identifier"]
    unless_null $P5049, fallback4312
    nqp_get_sc_object $P5053, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5049, $P5053
  fallback4312:
    $P5054 = $P5037."install_package_symbol"($P5043, $P5049, $P102)
    unless_null _lex_param_1, fallback4315
    nqp_get_sc_object $P5057, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5057
  fallback4315:
    set $P5056, _lex_param_1["name"]
    unless_null $P5056, fallback4316
    nqp_get_sc_object $P5058, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5056, $P5058
  fallback4316:
    set $P5055, $P5056["identifier"]
    unless_null $P5055, fallback4317
    nqp_get_sc_object $P5059, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5055, $P5059
  fallback4317:
    set $N5001, $P5055
    set $N5002, 1
    iseq $I5004, $N5001, $N5002
    box $P5082, $I5004
    set $P5081, $P5082
    unless $I5004 goto if1399_end4314 
.annotate 'line', 2055
.annotate 'line', 2056
    find_dynamic_lex $P5060, "$*W"
    unless_null $P5060, fallback4318
    get_hll_global $P5063, "GLOBAL"
    get_who $P5062, $P5063
    set $P5061, $P5062["$W"]
    unless_null $P5061, fallback4319
    nqp_get_sc_object $P5064, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5061, $P5064
  fallback4319:
    unless_null $P5061, vivi_14004320
    die "Contextual $*W not found"
    box $P5065, "Contextual $*W not found"
    set $P5061, $P5065
  vivi_14004320:
    set $P5060, $P5061
  fallback4318:
    find_dynamic_lex $P5066, "$*W"
    unless_null $P5066, fallback4321
    get_hll_global $P5069, "GLOBAL"
    get_who $P5068, $P5069
    set $P5067, $P5068["$W"]
    unless_null $P5067, fallback4322
    nqp_get_sc_object $P5070, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5067, $P5070
  fallback4322:
    unless_null $P5067, vivi_14014323
    die "Contextual $*W not found"
    box $P5071, "Contextual $*W not found"
    set $P5067, $P5071
  vivi_14014323:
    set $P5066, $P5067
  fallback4321:
    $P5072 = $P5066."cur_lexpad"()
    unless_null _lex_param_1, fallback4324
    nqp_get_sc_object $P5076, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5076
  fallback4324:
    set $P5075, _lex_param_1["name"]
    unless_null $P5075, fallback4325
    nqp_get_sc_object $P5077, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5075, $P5077
  fallback4325:
    set $P5074, $P5075["identifier"]
    unless_null $P5074, fallback4326
    nqp_get_sc_object $P5078, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5074, $P5078
  fallback4326:
    set $P5073, $P5074[0]
    unless_null $P5073, fallback4327
    nqp_get_sc_object $P5079, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5073, $P5079
  fallback4327:
    $P5080 = $P5060."install_lexical_symbol"($P5072, $P5073, $P102)
    set $P5081, $P5080
  if1399_end4314:
    set $P5131, $P5081
    goto if1393_end4295
  if1393_else4294:
    find_dynamic_lex $P5083, "$*SCOPE"
    unless_null $P5083, fallback4330
    get_hll_global $P5086, "GLOBAL"
    get_who $P5085, $P5086
    set $P5084, $P5085["$SCOPE"]
    unless_null $P5084, fallback4331
    nqp_get_sc_object $P5087, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5084, $P5087
  fallback4331:
    unless_null $P5084, vivi_14034332
    die "Contextual $*SCOPE not found"
    box $P5088, "Contextual $*SCOPE not found"
    set $P5084, $P5088
  vivi_14034332:
    set $P5083, $P5084
  fallback4330:
    set $S5004, $P5083
    iseq $I5005, $S5004, "my"
    unless $I5005 goto if1402_else4328 
.annotate 'line', 2059
    unless_null _lex_param_1, fallback4335
    nqp_get_sc_object $P5091, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5091
  fallback4335:
    set $P5090, _lex_param_1["name"]
    unless_null $P5090, fallback4336
    nqp_get_sc_object $P5092, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5090, $P5092
  fallback4336:
    set $P5089, $P5090["identifier"]
    unless_null $P5089, fallback4337
    nqp_get_sc_object $P5093, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5089, $P5093
  fallback4337:
    set $N5003, $P5089
    set $N5004, 1
    isne $I5006, $N5003, $N5004
    box $P5100, $I5006
    set $P5099, $P5100
    unless $I5006 goto if1404_end4334 
.annotate 'line', 2060
.annotate 'line', 2061
    unless_null _lex_param_1, fallback4338
    nqp_get_sc_object $P5095, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5095
  fallback4338:
    set $P5094, _lex_param_1["name"]
    unless_null $P5094, fallback4339
    nqp_get_sc_object $P5096, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5094, $P5096
  fallback4339:
    $P5097 = $P5094."CURSOR"()
    $P5098 = $P5097."panic"("A my scoped package cannot have a multi-part name yet")
    set $P5099, $P5098
  if1404_end4334:
.annotate 'line', 2063
    find_dynamic_lex $P5101, "$*W"
    unless_null $P5101, fallback4340
    get_hll_global $P5104, "GLOBAL"
    get_who $P5103, $P5104
    set $P5102, $P5103["$W"]
    unless_null $P5102, fallback4341
    nqp_get_sc_object $P5105, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5102, $P5105
  fallback4341:
    unless_null $P5102, vivi_14054342
    die "Contextual $*W not found"
    box $P5106, "Contextual $*W not found"
    set $P5102, $P5106
  vivi_14054342:
    set $P5101, $P5102
  fallback4340:
    find_dynamic_lex $P5107, "$*W"
    unless_null $P5107, fallback4343
    get_hll_global $P5110, "GLOBAL"
    get_who $P5109, $P5110
    set $P5108, $P5109["$W"]
    unless_null $P5108, fallback4344
    nqp_get_sc_object $P5111, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5108, $P5111
  fallback4344:
    unless_null $P5108, vivi_14064345
    die "Contextual $*W not found"
    box $P5112, "Contextual $*W not found"
    set $P5108, $P5112
  vivi_14064345:
    set $P5107, $P5108
  fallback4343:
    $P5113 = $P5107."cur_lexpad"()
    unless_null _lex_param_1, fallback4346
    nqp_get_sc_object $P5117, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5117
  fallback4346:
    set $P5116, _lex_param_1["name"]
    unless_null $P5116, fallback4347
    nqp_get_sc_object $P5118, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5116, $P5118
  fallback4347:
    set $P5115, $P5116["identifier"]
    unless_null $P5115, fallback4348
    nqp_get_sc_object $P5119, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5115, $P5119
  fallback4348:
    set $P5114, $P5115[0]
    unless_null $P5114, fallback4349
    nqp_get_sc_object $P5120, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5114, $P5120
  fallback4349:
    $P5121 = $P5101."install_lexical_symbol"($P5113, $P5114, $P102)
    set $P5130, $P5121
    goto if1402_end4329
  if1402_else4328:
.annotate 'line', 2065
.annotate 'line', 2066
    $P5122 = _lex_param_1."CURSOR"()
    find_dynamic_lex $P5123, "$*SCOPE"
    unless_null $P5123, fallback4350
    get_hll_global $P5126, "GLOBAL"
    get_who $P5125, $P5126
    set $P5124, $P5125["$SCOPE"]
    unless_null $P5124, fallback4351
    nqp_get_sc_object $P5127, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5124, $P5127
  fallback4351:
    unless_null $P5124, vivi_14074352
    die "Contextual $*SCOPE not found"
    box $P5128, "Contextual $*SCOPE not found"
    set $P5124, $P5128
  vivi_14074352:
    set $P5123, $P5124
  fallback4350:
    set $S5006, $P5123
    concat $S5005, $S5006, " scoped packages are not supported"
    $P5129 = $P5122."panic"($S5005)
    set $P5130, $P5129
  if1402_end4329:
    set $P5131, $P5130
  if1393_end4295:
.annotate 'line', 2069
    get_hll_global $P5135, "GLOBAL"
    nqp_get_package_through_who $P5134, $P5135, "QAST"
    get_who $P5133, $P5134
    set $P5132, $P5133["Stmts"]
    unless_null $P5132, fallback4353
    nqp_get_sc_object $P5136, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5132, $P5136
  fallback4353:
    $P5137 = $P5132."new"()
    $P5138 = _lex_param_1."!make"($P5137)
    .return ($P5138) 
.end
.HLL "nqp"
.namespace []
.sub "package_def" :subid("cuid_292_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2072
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5156 = 'cuid_440_1346968539.359' 
    capture_lex $P5156 
    .const 'Sub' $P5156 = 'cuid_441_1346968539.359' 
    capture_lex $P5156 
    .const 'Sub' $P5156 = 'cuid_442_1346968539.359' 
    capture_lex $P5156 
    .lex "@ns", $P101 
    .lex "$name", $P102 
    .lex "$how", $P103 
    .lex "$past", $P104 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P104, $P5004
    unless_null _lex_param_1, fallback4354
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5008
  fallback4354:
    set $P5007, _lex_param_1["name"]
    unless_null $P5007, fallback4355
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5007, $P5009
  fallback4355:
    set $P5006, $P5007["identifier"]
    unless_null $P5006, fallback4356
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5006, $P5010
  fallback4356:
    clone $P5005, $P5006
    set $P101, $P5005
.annotate 'line', 2075
    $P5011 = $P101."pop"()
    set $S5001, $P5011
    box $P5012, $S5001
    set $P102, $P5012
    find_dynamic_lex $P5014, "%*HOW"
    unless_null $P5014, fallback4357
    get_hll_global $P5017, "GLOBAL"
    get_who $P5016, $P5017
    set $P5015, $P5016["%HOW"]
    unless_null $P5015, fallback4358
    get_hll_global $P5019, "GLOBAL"
    get_who $P5018, $P5019
    new $P5020, 'Hash'
    set $P5018["%HOW"], $P5020
    set $P5015, $P5020
  fallback4358:
    unless_null $P5015, vivi_14084359
    die "Contextual %*HOW not found"
    box $P5021, "Contextual %*HOW not found"
    set $P5015, $P5021
  vivi_14084359:
    set $P5014, $P5015
  fallback4357:
    find_dynamic_lex $P5022, "$*PKGDECL"
    unless_null $P5022, fallback4360
    get_hll_global $P5025, "GLOBAL"
    get_who $P5024, $P5025
    set $P5023, $P5024["$PKGDECL"]
    unless_null $P5023, fallback4361
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5023, $P5026
  fallback4361:
    unless_null $P5023, vivi_14094362
    die "Contextual $*PKGDECL not found"
    box $P5027, "Contextual $*PKGDECL not found"
    set $P5023, $P5027
  vivi_14094362:
    set $P5022, $P5023
  fallback4360:
    set $S5002, $P5022
    set $P5013, $P5014[$S5002]
    unless_null $P5013, fallback4363
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5013, $P5028
  fallback4363:
    set $P103, $P5013
    unless_null _lex_param_1, fallback4366
    nqp_get_sc_object $P5030, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5030
  fallback4366:
    set $P5029, _lex_param_1["block"]
    unless_null $P5029, fallback4367
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5029, $P5031
  fallback4367:
    unless $P5029 goto if1410_else4364 
.annotate 'line', 2079
    unless_null _lex_param_1, fallback4368
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5033
  fallback4368:
    set $P5032, _lex_param_1["block"]
    unless_null $P5032, fallback4369
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5032, $P5034
  fallback4369:
    $P5035 = $P5032."ast"()
    set $P5040, $P5035
    goto if1410_end4365
  if1410_else4364:
    unless_null _lex_param_1, fallback4370
    nqp_get_sc_object $P5037, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5037
  fallback4370:
    set $P5036, _lex_param_1["comp_unit"]
    unless_null $P5036, fallback4371
    nqp_get_sc_object $P5038, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5036, $P5038
  fallback4371:
    $P5039 = $P5036."ast"()
    set $P5040, $P5039
  if1410_end4365:
    set $P104, $P5040
    can $I5001, $P103, "parametric"
    box $P5043, $I5001
    set $P5042, $P5043
    unless $I5001 goto if1412_end4375 
.annotate 'line', 2085
    $P5041 = $P103."parametric"($P103)
    set $P5042, $P5041
  if1412_end4375:
    unless $P5042 goto if1411_else4372 
.annotate 'line', 2086
    $P5044 = $P104."blocktype"("declaration")
.annotate 'line', 2087
    get_hll_global $P5048, "GLOBAL"
    nqp_get_package_through_who $P5047, $P5048, "QAST"
    get_who $P5046, $P5047
    set $P5045, $P5046["Var"]
    unless_null $P5045, fallback4376
    nqp_get_sc_object $P5049, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5045, $P5049
  fallback4376:
    $P5050 = $P5045."new"("$?CLASS" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5051 = $P104."unshift"($P5050)
.annotate 'line', 2089
    $P5052 = $P104."symbol"("$?CLASS", "lexical" :named("scope"))
.annotate 'line', 2090
    find_dynamic_lex $P5053, "$*W"
    unless_null $P5053, fallback4377
    get_hll_global $P5056, "GLOBAL"
    get_who $P5055, $P5056
    set $P5054, $P5055["$W"]
    unless_null $P5054, fallback4378
    nqp_get_sc_object $P5057, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5054, $P5057
  fallback4378:
    unless_null $P5054, vivi_14134379
    die "Contextual $*W not found"
    box $P5058, "Contextual $*W not found"
    set $P5054, $P5058
  vivi_14134379:
    set $P5053, $P5054
  fallback4377:
    find_dynamic_lex $P5059, "$*PACKAGE"
    unless_null $P5059, fallback4380
    get_hll_global $P5062, "GLOBAL"
    get_who $P5061, $P5062
    set $P5060, $P5061["$PACKAGE"]
    unless_null $P5060, fallback4381
    nqp_get_sc_object $P5063, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5060, $P5063
  fallback4381:
    unless_null $P5060, vivi_14144382
    die "Contextual $*PACKAGE not found"
    box $P5064, "Contextual $*PACKAGE not found"
    set $P5060, $P5064
  vivi_14144382:
    set $P5059, $P5060
  fallback4380:
    $P5065 = $P5053."pkg_set_body_block"($P5059, $P104)
.annotate 'line', 2091
    find_dynamic_lex $P5066, "$*W"
    unless_null $P5066, fallback4383
    get_hll_global $P5069, "GLOBAL"
    get_who $P5068, $P5069
    set $P5067, $P5068["$W"]
    unless_null $P5067, fallback4384
    nqp_get_sc_object $P5070, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5067, $P5070
  fallback4384:
    unless_null $P5067, vivi_14154385
    die "Contextual $*W not found"
    box $P5071, "Contextual $*W not found"
    set $P5067, $P5071
  vivi_14154385:
    set $P5066, $P5067
  fallback4383:
    find_dynamic_lex $P5072, "$*PACKAGE"
    unless_null $P5072, fallback4386
    get_hll_global $P5075, "GLOBAL"
    get_who $P5074, $P5075
    set $P5073, $P5074["$PACKAGE"]
    unless_null $P5073, fallback4387
    nqp_get_sc_object $P5076, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5073, $P5076
  fallback4387:
    unless_null $P5073, vivi_14164388
    die "Contextual $*PACKAGE not found"
    box $P5077, "Contextual $*PACKAGE not found"
    set $P5073, $P5077
  vivi_14164388:
    set $P5072, $P5073
  fallback4386:
    $P5078 = $P5066."install_lexical_symbol"($P104, "$?PACKAGE", $P5072)
.annotate 'line', 2092
    find_dynamic_lex $P5079, "$*W"
    unless_null $P5079, fallback4389
    get_hll_global $P5082, "GLOBAL"
    get_who $P5081, $P5082
    set $P5080, $P5081["$W"]
    unless_null $P5080, fallback4390
    nqp_get_sc_object $P5083, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5080, $P5083
  fallback4390:
    unless_null $P5080, vivi_14174391
    die "Contextual $*W not found"
    box $P5084, "Contextual $*W not found"
    set $P5080, $P5084
  vivi_14174391:
    set $P5079, $P5080
  fallback4389:
    find_dynamic_lex $P5085, "$*PACKAGE"
    unless_null $P5085, fallback4392
    get_hll_global $P5088, "GLOBAL"
    get_who $P5087, $P5088
    set $P5086, $P5087["$PACKAGE"]
    unless_null $P5086, fallback4393
    nqp_get_sc_object $P5089, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5086, $P5089
  fallback4393:
    unless_null $P5086, vivi_14184394
    die "Contextual $*PACKAGE not found"
    box $P5090, "Contextual $*PACKAGE not found"
    set $P5086, $P5090
  vivi_14184394:
    set $P5085, $P5086
  fallback4392:
    $P5091 = $P5079."install_lexical_symbol"($P104, "$?ROLE", $P5085)
    set $P5119, $P5091
    goto if1411_end4373
  if1411_else4372:
.annotate 'line', 2094
.annotate 'line', 2095
    $P5092 = $P104."blocktype"("immediate")
.annotate 'line', 2096
    find_dynamic_lex $P5093, "$*W"
    unless_null $P5093, fallback4395
    get_hll_global $P5096, "GLOBAL"
    get_who $P5095, $P5096
    set $P5094, $P5095["$W"]
    unless_null $P5094, fallback4396
    nqp_get_sc_object $P5097, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5094, $P5097
  fallback4396:
    unless_null $P5094, vivi_14194397
    die "Contextual $*W not found"
    box $P5098, "Contextual $*W not found"
    set $P5094, $P5098
  vivi_14194397:
    set $P5093, $P5094
  fallback4395:
    find_dynamic_lex $P5099, "$*PACKAGE"
    unless_null $P5099, fallback4398
    get_hll_global $P5102, "GLOBAL"
    get_who $P5101, $P5102
    set $P5100, $P5101["$PACKAGE"]
    unless_null $P5100, fallback4399
    nqp_get_sc_object $P5103, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5100, $P5103
  fallback4399:
    unless_null $P5100, vivi_14204400
    die "Contextual $*PACKAGE not found"
    box $P5104, "Contextual $*PACKAGE not found"
    set $P5100, $P5104
  vivi_14204400:
    set $P5099, $P5100
  fallback4398:
    $P5105 = $P5093."install_lexical_symbol"($P104, "$?PACKAGE", $P5099)
.annotate 'line', 2097
    find_dynamic_lex $P5106, "$*W"
    unless_null $P5106, fallback4401
    get_hll_global $P5109, "GLOBAL"
    get_who $P5108, $P5109
    set $P5107, $P5108["$W"]
    unless_null $P5107, fallback4402
    nqp_get_sc_object $P5110, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5107, $P5110
  fallback4402:
    unless_null $P5107, vivi_14214403
    die "Contextual $*W not found"
    box $P5111, "Contextual $*W not found"
    set $P5107, $P5111
  vivi_14214403:
    set $P5106, $P5107
  fallback4401:
    find_dynamic_lex $P5112, "$*PACKAGE"
    unless_null $P5112, fallback4404
    get_hll_global $P5115, "GLOBAL"
    get_who $P5114, $P5115
    set $P5113, $P5114["$PACKAGE"]
    unless_null $P5113, fallback4405
    nqp_get_sc_object $P5116, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5113, $P5116
  fallback4405:
    unless_null $P5113, vivi_14224406
    die "Contextual $*PACKAGE not found"
    box $P5117, "Contextual $*PACKAGE not found"
    set $P5113, $P5117
  vivi_14224406:
    set $P5112, $P5113
  fallback4404:
    $P5118 = $P5106."install_lexical_symbol"($P104, "$?CLASS", $P5112)
    set $P5119, $P5118
  if1411_end4373:
    unless_null _lex_param_1, fallback4409
    nqp_get_sc_object $P5121, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5121
  fallback4409:
    set $P5120, _lex_param_1["parent"]
    unless_null $P5120, fallback4410
    nqp_get_sc_object $P5122, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5120, $P5122
  fallback4410:
    unless $P5120 goto if1423_else4407 
    .const 'Sub' $P5123 = 'cuid_440_1346968539.359' 
    capture_lex $P5123
    $P5124 = $P5123()
    set $P5129, $P5124
    goto if1423_end4408
  if1423_else4407:
    can $I5002, $P103, "set_default_parent"
    box $P5128, $I5002
    set $P5127, $P5128
    unless $I5002 goto if1430_end4432 
    .const 'Sub' $P5125 = 'cuid_441_1346968539.359' 
    capture_lex $P5125
    $P5126 = $P5125()
    set $P5127, $P5126
  if1430_end4432:
    set $P5129, $P5127
  if1423_end4408:
    unless_null _lex_param_1, fallback4449
    nqp_get_sc_object $P5131, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5131
  fallback4449:
    set $P5130, _lex_param_1["role"]
    unless_null $P5130, fallback4450
    nqp_get_sc_object $P5132, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5130, $P5132
  fallback4450:
    set $P5141, $P5130
    unless $P5130 goto if1436_end4448 
.annotate 'line', 2122
    unless_null _lex_param_1, fallback4451
    nqp_get_sc_object $P5137, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5137
  fallback4451:
    set $P5136, _lex_param_1["role"]
    unless_null $P5136, fallback4452
    nqp_get_sc_object $P5138, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5136, $P5138
  fallback4452:
    set $P5133, $P5136
    iter $P5135, $P5136
  for_next4467:
    unless $P5135, for_done4469
    shift $P5140, $P5135
  for_redo4468:
    .const 'Sub' $P5139 = 'cuid_442_1346968539.359' 
    capture_lex $P5139
    $P5133 = $P5139($P5140)
    goto for_next4467
  for_done4469:
    set $P5141, $P5133
  if1436_end4448:
.annotate 'line', 2140
    find_dynamic_lex $P5142, "$*W"
    unless_null $P5142, fallback4470
    get_hll_global $P5145, "GLOBAL"
    get_who $P5144, $P5145
    set $P5143, $P5144["$W"]
    unless_null $P5143, fallback4471
    nqp_get_sc_object $P5146, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5143, $P5146
  fallback4471:
    unless_null $P5143, vivi_14434472
    die "Contextual $*W not found"
    box $P5147, "Contextual $*W not found"
    set $P5143, $P5147
  vivi_14434472:
    set $P5142, $P5143
  fallback4470:
    find_dynamic_lex $P5148, "$*PACKAGE"
    unless_null $P5148, fallback4473
    get_hll_global $P5151, "GLOBAL"
    get_who $P5150, $P5151
    set $P5149, $P5150["$PACKAGE"]
    unless_null $P5149, fallback4474
    nqp_get_sc_object $P5152, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5149, $P5152
  fallback4474:
    unless_null $P5149, vivi_14444475
    die "Contextual $*PACKAGE not found"
    box $P5153, "Contextual $*PACKAGE not found"
    set $P5149, $P5153
  vivi_14444475:
    set $P5148, $P5149
  fallback4473:
    $P5154 = $P5142."pkg_compose"($P5148)
.annotate 'line', 2142
    $P5155 = _lex_param_1."!make"($P104)
    .return ($P5155) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_440_1346968539.359") :anon :lex :outer("cuid_292_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2101
    .lex "$parent", $P101 
    .lex "$parent_found", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
    new $P5020, 'ExceptionHandler'
    set_label $P5020, catch_handler_14264419
    $P5020.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5020
.annotate 'line', 2104
.annotate 'line', 2105
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4411
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4412
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5004, $P5007
  fallback4412:
    unless_null $P5004, vivi_14244413
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_14244413:
    set $P5003, $P5004
  fallback4411:
    find_lex $P5013, "$/"
    unless_null $P5013, fallback4414
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5013, $P5014
  fallback4414:
    set $P5012, $P5013["parent"]
    unless_null $P5012, fallback4415
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5012, $P5015
  fallback4415:
    set $P5011, $P5012[0]
    unless_null $P5011, fallback4416
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5011, $P5016
  fallback4416:
    set $P5010, $P5011["identifier"]
    unless_null $P5010, fallback4417
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5010, $P5017
  fallback4417:
    clone $P5009, $P5010
    $P5018 = $P5003."find_sym"($P5009)
    set $P101, $P5018
    box $P5019, 1
    set $P102, $P5019
    set $P5021, $P102
    pop_eh 
    goto skip_handler_14254418
  catch_handler_14264419:
    .get_results ($P5020) 
    set $I10001, 1
    set $P5020["handled"], $I10001
    nqp_get_sc_object $P10001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    finalize $P5020
    pop_upto_eh $P5020
    pop_eh 
    set $P5021, $P10001
    goto skip_handler_14254418
  skip_handler_14254418:
    unless $P102 goto if1427_else4420 
.annotate 'line', 2108
.annotate 'line', 2109
    find_dynamic_lex $P5022, "$*W"
    unless_null $P5022, fallback4422
    get_hll_global $P5025, "GLOBAL"
    get_who $P5024, $P5025
    set $P5023, $P5024["$W"]
    unless_null $P5023, fallback4423
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5023, $P5026
  fallback4423:
    unless_null $P5023, vivi_14284424
    die "Contextual $*W not found"
    box $P5027, "Contextual $*W not found"
    set $P5023, $P5027
  vivi_14284424:
    set $P5022, $P5023
  fallback4422:
    find_dynamic_lex $P5028, "$*PACKAGE"
    unless_null $P5028, fallback4425
    get_hll_global $P5031, "GLOBAL"
    get_who $P5030, $P5031
    set $P5029, $P5030["$PACKAGE"]
    unless_null $P5029, fallback4426
    nqp_get_sc_object $P5032, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5029, $P5032
  fallback4426:
    unless_null $P5029, vivi_14294427
    die "Contextual $*PACKAGE not found"
    box $P5033, "Contextual $*PACKAGE not found"
    set $P5029, $P5033
  vivi_14294427:
    set $P5028, $P5029
  fallback4425:
    $P5034 = $P5022."pkg_add_parent_or_role"($P5028, "add_parent", $P101)
    set $P5044, $P5034
    goto if1427_end4421
  if1427_else4420:
.annotate 'line', 2111
.annotate 'line', 2112
    find_lex $P5035, "$/"
    $P5036 = $P5035."CURSOR"()
    find_lex $P5039, "$/"
    unless_null $P5039, fallback4428
    nqp_get_sc_object $P5040, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5039, $P5040
  fallback4428:
    set $P5038, $P5039["parent"]
    unless_null $P5038, fallback4429
    nqp_get_sc_object $P5041, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5038, $P5041
  fallback4429:
    set $P5037, $P5038[0]
    unless_null $P5037, fallback4430
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5037, $P5042
  fallback4430:
    set $S5003, $P5037
    concat $S5002, "Could not find parent class '", $S5003
    concat $S5001, $S5002, "'"
    $P5043 = $P5036."panic"($S5001)
    set $P5044, $P5043
  if1427_end4421:
    .return ($P5044) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_441_1346968539.359") :anon :lex :outer("cuid_292_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2115
    .lex "$default", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    find_dynamic_lex $P5002, "$*PKGDECL"
    unless_null $P5002, fallback4435
    get_hll_global $P5005, "GLOBAL"
    get_who $P5004, $P5005
    set $P5003, $P5004["$PKGDECL"]
    unless_null $P5003, fallback4436
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5003, $P5006
  fallback4436:
    unless_null $P5003, vivi_14324437
    die "Contextual $*PKGDECL not found"
    box $P5007, "Contextual $*PKGDECL not found"
    set $P5003, $P5007
  vivi_14324437:
    set $P5002, $P5003
  fallback4435:
    set $S5001, $P5002
    iseq $I5001, $S5001, "grammar"
    unless $I5001 goto if1431_else4433 
    new $P5008, 'ResizablePMCArray'
    box $P5009, "NQPCursor"
    push $P5008, $P5009
    set $P5012, $P5008
    goto if1431_end4434
  if1431_else4433:
    new $P5010, 'ResizablePMCArray'
    box $P5011, "NQPMu"
    push $P5010, $P5011
    set $P5012, $P5010
  if1431_end4434:
    set $P101, $P5012
.annotate 'line', 2117
    find_dynamic_lex $P5013, "$*W"
    unless_null $P5013, fallback4438
    get_hll_global $P5016, "GLOBAL"
    get_who $P5015, $P5016
    set $P5014, $P5015["$W"]
    unless_null $P5014, fallback4439
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5014, $P5017
  fallback4439:
    unless_null $P5014, vivi_14334440
    die "Contextual $*W not found"
    box $P5018, "Contextual $*W not found"
    set $P5014, $P5018
  vivi_14334440:
    set $P5013, $P5014
  fallback4438:
    find_dynamic_lex $P5019, "$*PACKAGE"
    unless_null $P5019, fallback4441
    get_hll_global $P5022, "GLOBAL"
    get_who $P5021, $P5022
    set $P5020, $P5021["$PACKAGE"]
    unless_null $P5020, fallback4442
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5020, $P5023
  fallback4442:
    unless_null $P5020, vivi_14344443
    die "Contextual $*PACKAGE not found"
    box $P5024, "Contextual $*PACKAGE not found"
    set $P5020, $P5024
  vivi_14344443:
    set $P5019, $P5020
  fallback4441:
.annotate 'line', 2118
    find_dynamic_lex $P5025, "$*W"
    unless_null $P5025, fallback4444
    get_hll_global $P5028, "GLOBAL"
    get_who $P5027, $P5028
    set $P5026, $P5027["$W"]
    unless_null $P5026, fallback4445
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5026, $P5029
  fallback4445:
    unless_null $P5026, vivi_14354446
    die "Contextual $*W not found"
    box $P5030, "Contextual $*W not found"
    set $P5026, $P5030
  vivi_14354446:
    set $P5025, $P5026
  fallback4444:
    $P5031 = $P5025."find_sym"($P101)
    $P5032 = $P5013."pkg_add_parent_or_role"($P5019, "set_default_parent", $P5031)
    .return ($P5032) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_442_1346968539.359") :anon :lex :outer("cuid_292_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2123
    .param pmc _lex_param_0 
    .lex "$role", $P101 
    .lex "$role_found", $P102 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
    new $P5014, 'ExceptionHandler'
    set_label $P5014, catch_handler_14394458
    $P5014.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5014
.annotate 'line', 2126
.annotate 'line', 2127
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4453
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4454
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5004, $P5007
  fallback4454:
    unless_null $P5004, vivi_14374455
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_14374455:
    set $P5003, $P5004
  fallback4453:
    set $P5010, _lex_param_0["identifier"]
    unless_null $P5010, fallback4456
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5010, $P5011
  fallback4456:
    clone $P5009, $P5010
    $P5012 = $P5003."find_sym"($P5009)
    set $P101, $P5012
    box $P5013, 1
    set $P102, $P5013
    set $P5015, $P102
    pop_eh 
    goto skip_handler_14384457
  catch_handler_14394458:
    .get_results ($P5014) 
    set $I10001, 1
    set $P5014["handled"], $I10001
    nqp_get_sc_object $P10001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    finalize $P5014
    pop_upto_eh $P5014
    pop_eh 
    set $P5015, $P10001
    goto skip_handler_14384457
  skip_handler_14384457:
    unless $P102 goto if1440_else4459 
.annotate 'line', 2130
.annotate 'line', 2131
    find_dynamic_lex $P5016, "$*W"
    unless_null $P5016, fallback4461
    get_hll_global $P5019, "GLOBAL"
    get_who $P5018, $P5019
    set $P5017, $P5018["$W"]
    unless_null $P5017, fallback4462
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5017, $P5020
  fallback4462:
    unless_null $P5017, vivi_14414463
    die "Contextual $*W not found"
    box $P5021, "Contextual $*W not found"
    set $P5017, $P5021
  vivi_14414463:
    set $P5016, $P5017
  fallback4461:
    find_dynamic_lex $P5022, "$*PACKAGE"
    unless_null $P5022, fallback4464
    get_hll_global $P5025, "GLOBAL"
    get_who $P5024, $P5025
    set $P5023, $P5024["$PACKAGE"]
    unless_null $P5023, fallback4465
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5023, $P5026
  fallback4465:
    unless_null $P5023, vivi_14424466
    die "Contextual $*PACKAGE not found"
    box $P5027, "Contextual $*PACKAGE not found"
    set $P5023, $P5027
  vivi_14424466:
    set $P5022, $P5023
  fallback4464:
    $P5028 = $P5016."pkg_add_parent_or_role"($P5022, "add_role", $P101)
    set $P5032, $P5028
    goto if1440_end4460
  if1440_else4459:
.annotate 'line', 2133
.annotate 'line', 2134
    find_lex $P5029, "$/"
    $P5030 = $P5029."CURSOR"()
    set $S5003, _lex_param_0
    concat $S5002, "Could not find role '", $S5003
    concat $S5001, $S5002, "'"
    $P5031 = $P5030."panic"($S5001)
    set $P5032, $P5031
  if1440_end4460:
    .return ($P5032) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<my>" :subid("cuid_293_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2145
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4476
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback4476:
    set $P5001, _lex_param_1["scoped"]
    unless_null $P5001, fallback4477
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback4477:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<our>" :subid("cuid_294_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2146
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4478
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback4478:
    set $P5001, _lex_param_1["scoped"]
    unless_null $P5001, fallback4479
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback4479:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<has>" :subid("cuid_295_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2147
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4480
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback4480:
    set $P5001, _lex_param_1["scoped"]
    unless_null $P5001, fallback4481
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback4481:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "scoped" :subid("cuid_296_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2149
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2150
    unless_null _lex_param_1, fallback4484
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback4484:
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4485
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback4485:
    unless $P5001 goto if1445_else4482 
    unless_null _lex_param_1, fallback4486
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5005
  fallback4486:
    set $P5004, _lex_param_1["declarator"]
    unless_null $P5004, fallback4487
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5004, $P5006
  fallback4487:
    $P5007 = $P5004."ast"()
    set $P5020, $P5007
    goto if1445_end4483
  if1445_else4482:
    unless_null _lex_param_1, fallback4490
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5009
  fallback4490:
    set $P5008, _lex_param_1["multi_declarator"]
    unless_null $P5008, fallback4491
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5008, $P5010
  fallback4491:
    unless $P5008 goto if1446_else4488 
.annotate 'line', 2151
    unless_null _lex_param_1, fallback4492
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5012
  fallback4492:
    set $P5011, _lex_param_1["multi_declarator"]
    unless_null $P5011, fallback4493
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5011, $P5013
  fallback4493:
    $P5014 = $P5011."ast"()
    set $P5019, $P5014
    goto if1446_end4489
  if1446_else4488:
.annotate 'line', 2152
    unless_null _lex_param_1, fallback4494
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5016
  fallback4494:
    set $P5015, _lex_param_1["package_declarator"]
    unless_null $P5015, fallback4495
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5015, $P5017
  fallback4495:
    $P5018 = $P5015."ast"()
    set $P5019, $P5018
  if1446_end4489:
    set $P5020, $P5019
  if1445_end4483:
    $P5021 = _lex_param_1."!make"($P5020)
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "declarator" :subid("cuid_297_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2155
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2156
    unless_null _lex_param_1, fallback4498
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback4498:
    set $P5001, _lex_param_1["routine_declarator"]
    unless_null $P5001, fallback4499
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback4499:
    unless $P5001 goto if1447_else4496 
.annotate 'line', 2157
    unless_null _lex_param_1, fallback4500
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5005
  fallback4500:
    set $P5004, _lex_param_1["routine_declarator"]
    unless_null $P5004, fallback4501
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5004, $P5006
  fallback4501:
    $P5007 = $P5004."ast"()
    set $P5012, $P5007
    goto if1447_end4497
  if1447_else4496:
.annotate 'line', 2158
    unless_null _lex_param_1, fallback4502
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5009
  fallback4502:
    set $P5008, _lex_param_1["variable_declarator"]
    unless_null $P5008, fallback4503
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5008, $P5010
  fallback4503:
    $P5011 = $P5008."ast"()
    set $P5012, $P5011
  if1447_end4497:
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<multi>" :subid("cuid_298_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2161
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4506
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback4506:
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4507
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback4507:
    unless $P5001 goto if1448_else4504 
    unless_null _lex_param_1, fallback4508
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5005
  fallback4508:
    set $P5004, _lex_param_1["declarator"]
    unless_null $P5004, fallback4509
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5004, $P5006
  fallback4509:
    $P5007 = $P5004."ast"()
    set $P5012, $P5007
    goto if1448_end4505
  if1448_else4504:
    unless_null _lex_param_1, fallback4510
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5009
  fallback4510:
    set $P5008, _lex_param_1["routine_def"]
    unless_null $P5008, fallback4511
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5008, $P5010
  fallback4511:
    $P5011 = $P5008."ast"()
    set $P5012, $P5011
  if1448_end4505:
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<proto>" :subid("cuid_299_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2162
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4514
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback4514:
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4515
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback4515:
    unless $P5001 goto if1449_else4512 
    unless_null _lex_param_1, fallback4516
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5005
  fallback4516:
    set $P5004, _lex_param_1["declarator"]
    unless_null $P5004, fallback4517
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5004, $P5006
  fallback4517:
    $P5007 = $P5004."ast"()
    set $P5012, $P5007
    goto if1449_end4513
  if1449_else4512:
    unless_null _lex_param_1, fallback4518
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5009
  fallback4518:
    set $P5008, _lex_param_1["routine_def"]
    unless_null $P5008, fallback4519
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5008, $P5010
  fallback4519:
    $P5011 = $P5008."ast"()
    set $P5012, $P5011
  if1449_end4513:
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<null>" :subid("cuid_300_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2163
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4520
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback4520:
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4521
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback4521:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "variable_declarator" :subid("cuid_301_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2166
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5080 = 'cuid_443_1346968539.359' 
    capture_lex $P5080 
    .const 'Sub' $P5080 = 'cuid_444_1346968539.359' 
    capture_lex $P5080 
    .lex "$past", $P101 
    .lex "$sigil", $P102 
    .lex "$name", $P103 
    .lex "$BLOCK", $P104 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P104, $P5004
.annotate 'line', 2167
    unless_null _lex_param_1, fallback4522
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5006
  fallback4522:
    set $P5005, _lex_param_1["variable"]
    unless_null $P5005, fallback4523
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5005, $P5007
  fallback4523:
    $P5008 = $P5005."ast"()
    set $P101, $P5008
    unless_null _lex_param_1, fallback4524
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5011
  fallback4524:
    set $P5010, _lex_param_1["variable"]
    unless_null $P5010, fallback4525
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5010, $P5012
  fallback4525:
    set $P5009, $P5010["sigil"]
    unless_null $P5009, fallback4526
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5009, $P5013
  fallback4526:
    set $P102, $P5009
.annotate 'line', 2169
    $P5014 = $P101."name"()
    set $P103, $P5014
.annotate 'line', 2170
    find_dynamic_lex $P5015, "$*W"
    unless_null $P5015, fallback4527
    get_hll_global $P5018, "GLOBAL"
    get_who $P5017, $P5018
    set $P5016, $P5017["$W"]
    unless_null $P5016, fallback4528
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5016, $P5019
  fallback4528:
    unless_null $P5016, vivi_14504529
    die "Contextual $*W not found"
    box $P5020, "Contextual $*W not found"
    set $P5016, $P5020
  vivi_14504529:
    set $P5015, $P5016
  fallback4527:
    $P5021 = $P5015."cur_lexpad"()
    set $P104, $P5021
    set $P5023, $P103
    unless $P103 goto if1452_end4533 
.annotate 'line', 2171
    $P5022 = $P104."symbol"($P103)
    set $P5023, $P5022
  if1452_end4533:
    set $P5026, $P5023
    unless $P5023 goto if1451_end4531 
.annotate 'line', 2172
    $P5024 = _lex_param_1."CURSOR"()
    $P5025 = $P5024."panic"("Redeclaration of symbol ", $P103)
    set $P5026, $P5025
  if1451_end4531:
    find_dynamic_lex $P5027, "$*SCOPE"
    unless_null $P5027, fallback4536
    get_hll_global $P5030, "GLOBAL"
    get_who $P5029, $P5030
    set $P5028, $P5029["$SCOPE"]
    unless_null $P5028, fallback4537
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5028, $P5031
  fallback4537:
    unless_null $P5028, vivi_14544538
    die "Contextual $*SCOPE not found"
    box $P5032, "Contextual $*SCOPE not found"
    set $P5028, $P5032
  vivi_14544538:
    set $P5027, $P5028
  fallback4536:
    set $S5001, $P5027
    iseq $I5001, $S5001, "has"
    unless $I5001 goto if1453_else4534 
    .const 'Sub' $P5033 = 'cuid_443_1346968539.359' 
    capture_lex $P5033
    $P5034 = $P5033()
    set $P5066, $P5034
    goto if1453_end4535
  if1453_else4534:
    find_dynamic_lex $P5035, "$*SCOPE"
    unless_null $P5035, fallback4590
    get_hll_global $P5038, "GLOBAL"
    get_who $P5037, $P5038
    set $P5036, $P5037["$SCOPE"]
    unless_null $P5036, fallback4591
    nqp_get_sc_object $P5039, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5036, $P5039
  fallback4591:
    unless_null $P5036, vivi_14724592
    die "Contextual $*SCOPE not found"
    box $P5040, "Contextual $*SCOPE not found"
    set $P5036, $P5040
  vivi_14724592:
    set $P5035, $P5036
  fallback4590:
    set $S5002, $P5035
    iseq $I5002, $S5002, "our"
    unless $I5002 goto if1471_else4588 
.annotate 'line', 2202
    unless_null _lex_param_1, fallback4593
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5042
  fallback4593:
    set $P5041, _lex_param_1["variable"]
    unless_null $P5041, fallback4594
    nqp_get_sc_object $P5043, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5041, $P5043
  fallback4594:
    set $S5003, $P5041
    box $P5044, $S5003
    set $P103, $P5044
.annotate 'line', 2207
    new $P5045, 'ResizablePMCArray'
    push $P5045, $P103
    $P5046 = "&lexical_package_lookup"($P5045, _lex_param_1)
    set $P101, $P5046
.annotate 'line', 2208
    $P5047 = $P104."symbol"($P103, "package" :named("scope"))
    set $P5065, $P5047
    goto if1471_end4589
  if1471_else4588:
.annotate 'line', 2210
.annotate 'line', 2211
    set $P5048, $P104[0]
    unless_null $P5048, fallback4595
    nqp_get_sc_object $P5049, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5048, $P5049
  fallback4595:
    get_hll_global $P5053, "GLOBAL"
    nqp_get_package_through_who $P5052, $P5053, "QAST"
    get_who $P5051, $P5052
    set $P5050, $P5051["Op"]
    unless_null $P5050, fallback4596
    nqp_get_sc_object $P5054, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5050, $P5054
  fallback4596:
.annotate 'line', 2213
    get_hll_global $P5058, "GLOBAL"
    nqp_get_package_through_who $P5057, $P5058, "QAST"
    get_who $P5056, $P5057
    set $P5055, $P5056["Var"]
    unless_null $P5055, fallback4597
    nqp_get_sc_object $P5059, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5055, $P5059
  fallback4597:
    $P5060 = $P5055."new"($P103 :named("name"), "lexical" :named("scope"), "var" :named("decl"))
.annotate 'line', 2214
    $P5061 = "&default_for"($P102)
    $P5062 = $P5050."new"($P5060, $P5061, "bind" :named("op"), _lex_param_1 :named("node"))
    $P5063 = $P5048."push"($P5062)
.annotate 'line', 2216
    $P5064 = $P104."symbol"($P103, "lexical" :named("scope"))
    set $P5065, $P5064
  if1471_end4589:
    set $P5066, $P5065
  if1453_end4535:
    unless_null _lex_param_1, fallback4600
    nqp_get_sc_object $P5068, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5068
  fallback4600:
    set $P5067, _lex_param_1["trait"]
    unless_null $P5067, fallback4601
    nqp_get_sc_object $P5069, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5067, $P5069
  fallback4601:
    set $P5078, $P5067
    unless $P5067 goto if1473_end4599 
.annotate 'line', 2220
    unless_null _lex_param_1, fallback4602
    nqp_get_sc_object $P5074, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5074
  fallback4602:
    set $P5073, _lex_param_1["trait"]
    unless_null $P5073, fallback4603
    nqp_get_sc_object $P5075, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5073, $P5075
  fallback4603:
    set $P5070, $P5073
    iter $P5072, $P5073
  for_next4604:
    unless $P5072, for_done4606
    shift $P5077, $P5072
  for_redo4605:
    .const 'Sub' $P5076 = 'cuid_444_1346968539.359' 
    capture_lex $P5076
    $P5070 = $P5076($P5077)
    goto for_next4604
  for_done4606:
    set $P5078, $P5070
  if1473_end4599:
.annotate 'line', 2224
    $P5079 = _lex_param_1."!make"($P101)
    .return ($P5079) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_443_1346968539.359") :anon :lex :outer("cuid_301_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2174
    .lex "%lit_args", $P101 
    .lex "%obj_args", $P102 
    new $P5001, 'Hash'
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    find_dynamic_lex $P5003, "%*HOW"
    unless_null $P5003, fallback4541
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["%HOW"]
    unless_null $P5004, fallback4542
    get_hll_global $P5008, "GLOBAL"
    get_who $P5007, $P5008
    new $P5009, 'Hash'
    set $P5007["%HOW"], $P5009
    set $P5004, $P5009
  fallback4542:
    unless_null $P5004, vivi_14564543
    die "Contextual %*HOW not found"
    box $P5010, "Contextual %*HOW not found"
    set $P5004, $P5010
  vivi_14564543:
    set $P5003, $P5004
  fallback4541:
    find_dynamic_lex $P5011, "$*PKGDECL"
    unless_null $P5011, fallback4544
    get_hll_global $P5014, "GLOBAL"
    get_who $P5013, $P5014
    set $P5012, $P5013["$PKGDECL"]
    unless_null $P5012, fallback4545
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5012, $P5015
  fallback4545:
    unless_null $P5012, vivi_14574546
    die "Contextual $*PKGDECL not found"
    box $P5016, "Contextual $*PKGDECL not found"
    set $P5012, $P5016
  vivi_14574546:
    set $P5011, $P5012
  fallback4544:
    set $S5002, $P5011
    concat $S5001, $S5002, "-attr"
    exists $I5001, $P5003[$S5001]
    box $P5027, $I5001
    set $P5026, $P5027
    if $I5001 goto unless1455_end4540 
.annotate 'line', 2176
.annotate 'line', 2177
    find_lex $P5017, "$/"
    $P5018 = $P5017."CURSOR"()
    find_dynamic_lex $P5019, "$*PKGDECL"
    unless_null $P5019, fallback4547
    get_hll_global $P5022, "GLOBAL"
    get_who $P5021, $P5022
    set $P5020, $P5021["$PKGDECL"]
    unless_null $P5020, fallback4548
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5020, $P5023
  fallback4548:
    unless_null $P5020, vivi_14584549
    die "Contextual $*PKGDECL not found"
    box $P5024, "Contextual $*PKGDECL not found"
    set $P5020, $P5024
  vivi_14584549:
    set $P5019, $P5020
  fallback4547:
    set $S5004, $P5019
    concat $S5003, $S5004, " packages do not support attributes"
    $P5025 = $P5018."panic"($S5003)
    set $P5026, $P5025
  unless1455_end4540:
    find_lex $P5028, "$name"
    set $P101["name"], $P5028
    find_lex $P5030, "$/"
    unless_null $P5030, fallback4552
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5030, $P5031
  fallback4552:
    set $P5029, $P5030["typename"]
    unless_null $P5029, fallback4553
    nqp_get_sc_object $P5032, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5029, $P5032
  fallback4553:
    set $P5048, $P5029
    unless $P5029 goto if1459_end4551 
.annotate 'line', 2184
.annotate 'line', 2185
    find_dynamic_lex $P5033, "$*W"
    unless_null $P5033, fallback4554
    get_hll_global $P5036, "GLOBAL"
    get_who $P5035, $P5036
    set $P5034, $P5035["$W"]
    unless_null $P5034, fallback4555
    nqp_get_sc_object $P5037, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5034, $P5037
  fallback4555:
    unless_null $P5034, vivi_14604556
    die "Contextual $*W not found"
    box $P5038, "Contextual $*W not found"
    set $P5034, $P5038
  vivi_14604556:
    set $P5033, $P5034
  fallback4554:
    new $P5039, 'ResizablePMCArray'
    find_lex $P5042, "$/"
    unless_null $P5042, fallback4557
    nqp_get_sc_object $P5043, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5042, $P5043
  fallback4557:
    set $P5041, $P5042["typename"]
    unless_null $P5041, fallback4558
    nqp_get_sc_object $P5044, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5041, $P5044
  fallback4558:
    set $P5040, $P5041[0]
    unless_null $P5040, fallback4559
    nqp_get_sc_object $P5045, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5040, $P5045
  fallback4559:
    set $S5005, $P5040
    box $P5046, $S5005
    push $P5039, $P5046
    $P5047 = $P5033."find_sym"($P5039)
    set $P102["type"], $P5047
    set $P5048, $P5047
  if1459_end4551:
    find_lex $P5049, "$sigil"
    set $S5006, $P5049
    iseq $I5002, $S5006, "$"
    set $I5004, $I5002
    if $I5002 goto unless1462_end4563 
    find_lex $P5050, "$sigil"
    set $S5007, $P5050
    iseq $I5003, $S5007, "&"
    set $I5004, $I5003
  unless1462_end4563:
    box $P5070, $I5004
    set $P5069, $P5070
    unless $I5004 goto if1461_end4561 
.annotate 'line', 2187
    find_lex $P5052, "$/"
    unless_null $P5052, fallback4566
    nqp_get_sc_object $P5053, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5052, $P5053
  fallback4566:
    set $P5051, $P5052["typename"]
    unless_null $P5051, fallback4567
    nqp_get_sc_object $P5054, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5051, $P5054
  fallback4567:
    unless $P5051 goto if1463_else4564 
.annotate 'line', 2188
    set $P5055, $P102["type"]
    unless_null $P5055, fallback4568
    nqp_get_sc_object $P5056, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5055, $P5056
  fallback4568:
    set $P102["default"], $P5055
    set $P5068, $P5055
    goto if1463_end4565
  if1463_else4564:
.annotate 'line', 2191
    new $P5066, 'ExceptionHandler'
    set_label $P5066, catch_handler_14664573
    $P5066.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5066
.annotate 'line', 2192
    find_dynamic_lex $P5057, "$*W"
    unless_null $P5057, fallback4569
    get_hll_global $P5060, "GLOBAL"
    get_who $P5059, $P5060
    set $P5058, $P5059["$W"]
    unless_null $P5058, fallback4570
    nqp_get_sc_object $P5061, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5058, $P5061
  fallback4570:
    unless_null $P5058, vivi_14644571
    die "Contextual $*W not found"
    box $P5062, "Contextual $*W not found"
    set $P5058, $P5062
  vivi_14644571:
    set $P5057, $P5058
  fallback4569:
    new $P5063, 'ResizablePMCArray'
    box $P5064, "NQPMu"
    push $P5063, $P5064
    $P5065 = $P5057."find_sym"($P5063)
    set $P102["default"], $P5065
    set $P5067, $P5065
    pop_eh 
    goto skip_handler_14654572
  catch_handler_14664573:
    .get_results ($P5066) 
    set $I10001, 1
    set $P5066["handled"], $I10001
    nqp_get_sc_object $P10001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    finalize $P5066
    pop_upto_eh $P5066
    pop_eh 
    set $P5067, $P10001
    goto skip_handler_14654572
  skip_handler_14654572:
    set $P5068, $P5067
  if1463_end4565:
    set $P5069, $P5068
  if1461_end4561:
.annotate 'line', 2197
    find_dynamic_lex $P5071, "$*W"
    unless_null $P5071, fallback4574
    get_hll_global $P5074, "GLOBAL"
    get_who $P5073, $P5074
    set $P5072, $P5073["$W"]
    unless_null $P5072, fallback4575
    nqp_get_sc_object $P5075, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5072, $P5075
  fallback4575:
    unless_null $P5072, vivi_14674576
    die "Contextual $*W not found"
    box $P5076, "Contextual $*W not found"
    set $P5072, $P5076
  vivi_14674576:
    set $P5071, $P5072
  fallback4574:
    find_dynamic_lex $P5077, "$*PACKAGE"
    unless_null $P5077, fallback4577
    get_hll_global $P5080, "GLOBAL"
    get_who $P5079, $P5080
    set $P5078, $P5079["$PACKAGE"]
    unless_null $P5078, fallback4578
    nqp_get_sc_object $P5081, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5078, $P5081
  fallback4578:
    unless_null $P5078, vivi_14684579
    die "Contextual $*PACKAGE not found"
    box $P5082, "Contextual $*PACKAGE not found"
    set $P5078, $P5082
  vivi_14684579:
    set $P5077, $P5078
  fallback4577:
    find_dynamic_lex $P5084, "%*HOW"
    unless_null $P5084, fallback4580
    get_hll_global $P5087, "GLOBAL"
    get_who $P5086, $P5087
    set $P5085, $P5086["%HOW"]
    unless_null $P5085, fallback4581
    get_hll_global $P5089, "GLOBAL"
    get_who $P5088, $P5089
    new $P5090, 'Hash'
    set $P5088["%HOW"], $P5090
    set $P5085, $P5090
  fallback4581:
    unless_null $P5085, vivi_14694582
    die "Contextual %*HOW not found"
    box $P5091, "Contextual %*HOW not found"
    set $P5085, $P5091
  vivi_14694582:
    set $P5084, $P5085
  fallback4580:
    find_dynamic_lex $P5092, "$*PKGDECL"
    unless_null $P5092, fallback4583
    get_hll_global $P5095, "GLOBAL"
    get_who $P5094, $P5095
    set $P5093, $P5094["$PKGDECL"]
    unless_null $P5093, fallback4584
    nqp_get_sc_object $P5096, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5093, $P5096
  fallback4584:
    unless_null $P5093, vivi_14704585
    die "Contextual $*PKGDECL not found"
    box $P5097, "Contextual $*PKGDECL not found"
    set $P5093, $P5097
  vivi_14704585:
    set $P5092, $P5093
  fallback4583:
    set $S5009, $P5092
    concat $S5008, $S5009, "-attr"
    set $P5083, $P5084[$S5008]
    unless_null $P5083, fallback4586
    nqp_get_sc_object $P5098, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5083, $P5098
  fallback4586:
    $P5099 = $P5071."pkg_add_attribute"($P5077, $P5083, $P101, $P102)
.annotate 'line', 2200
    get_hll_global $P5103, "GLOBAL"
    nqp_get_package_through_who $P5102, $P5103, "QAST"
    get_who $P5101, $P5102
    set $P5100, $P5101["Stmts"]
    unless_null $P5100, fallback4587
    nqp_get_sc_object $P5104, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5100, $P5104
  fallback4587:
    $P5105 = $P5100."new"()
    store_lex "$past", $P5105
    .return ($P5105) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_444_1346968539.359") :anon :lex :outer("cuid_301_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2221
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$/"
    $P5001 = _lex_param_0."ast"()
    $P5003 = $P5001($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<sub>" :subid("cuid_302_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2227
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4607
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback4607:
    set $P5001, _lex_param_1["routine_def"]
    unless_null $P5001, fallback4608
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback4608:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<method>" :subid("cuid_303_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2228
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4609
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback4609:
    set $P5001, _lex_param_1["method_def"]
    unless_null $P5001, fallback4610
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback4610:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "routine_def" :subid("cuid_304_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2230
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5064 = 'cuid_448_1346968539.359' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_451_1346968539.359' 
    capture_lex $P5064 
    .lex "$past", $P101 
    .lex "$block", $P102 
    .lex "$lexpast", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P103, $P5003
    unless_null _lex_param_1, fallback4613
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5005
  fallback4613:
    set $P5004, _lex_param_1["onlystar"]
    unless_null $P5004, fallback4614
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5004, $P5006
  fallback4614:
    unless $P5004 goto if1474_else4611 
.annotate 'line', 2234
.annotate 'line', 2235
    $P5007 = "&only_star_block"()
    set $P101, $P5007
    set $P5023, $P101
    goto if1474_end4612
  if1474_else4611:
.annotate 'line', 2237
.annotate 'line', 2238
    unless_null _lex_param_1, fallback4615
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5009
  fallback4615:
    set $P5008, _lex_param_1["blockoid"]
    unless_null $P5008, fallback4616
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5008, $P5010
  fallback4616:
    $P5011 = $P5008."ast"()
    set $P101, $P5011
.annotate 'line', 2239
    $P5012 = $P101."blocktype"("declaration")
    find_dynamic_lex $P5013, "$*RETURN_USED"
    unless_null $P5013, fallback4619
    get_hll_global $P5016, "GLOBAL"
    get_who $P5015, $P5016
    set $P5014, $P5015["$RETURN_USED"]
    unless_null $P5014, fallback4620
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5014, $P5017
  fallback4620:
    unless_null $P5014, vivi_14764621
    die "Contextual $*RETURN_USED not found"
    box $P5018, "Contextual $*RETURN_USED not found"
    set $P5014, $P5018
  vivi_14764621:
    set $P5013, $P5014
  fallback4619:
    set $P5022, $P5013
    unless $P5013 goto if1475_end4618 
.annotate 'line', 2240
.annotate 'line', 2241
    set $P5019, $P101[1]
    unless_null $P5019, fallback4622
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5019, $P5020
  fallback4622:
    $P5021 = "&wrap_return_handler"($P5019)
    set $P101[1], $P5021
    set $P5022, $P5021
  if1475_end4618:
    set $P5023, $P5022
  if1474_end4612:
    set $P102, $P101
    unless_null _lex_param_1, fallback4625
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5025
  fallback4625:
    set $P5024, _lex_param_1["deflongname"]
    unless_null $P5024, fallback4626
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5024, $P5026
  fallback4626:
    unless $P5024 goto if1477_else4623 
    .const 'Sub' $P5027 = 'cuid_448_1346968539.359' 
    capture_lex $P5027
    $P5028 = $P5027()
    set $P5044, $P5028
    goto if1477_end4624
  if1477_else4623:
.annotate 'line', 2338
.annotate 'line', 2339
    find_dynamic_lex $P5029, "$*W"
    unless_null $P5029, fallback4738
    get_hll_global $P5032, "GLOBAL"
    get_who $P5031, $P5032
    set $P5030, $P5031["$W"]
    unless_null $P5030, fallback4739
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5030, $P5033
  fallback4739:
    unless_null $P5030, vivi_15124740
    die "Contextual $*W not found"
    box $P5034, "Contextual $*W not found"
    set $P5030, $P5034
  vivi_15124740:
    set $P5029, $P5030
  fallback4738:
    $P5035 = $P5029."is_precompilation_mode"()
    set $P5043, $P5035
    unless $P5035 goto if1511_end4737 
.annotate 'line', 2340
    find_dynamic_lex $P5036, "$*W"
    unless_null $P5036, fallback4741
    get_hll_global $P5039, "GLOBAL"
    get_who $P5038, $P5039
    set $P5037, $P5038["$W"]
    unless_null $P5037, fallback4742
    nqp_get_sc_object $P5040, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5037, $P5040
  fallback4742:
    unless_null $P5037, vivi_15134743
    die "Contextual $*W not found"
    box $P5041, "Contextual $*W not found"
    set $P5037, $P5041
  vivi_15134743:
    set $P5036, $P5037
  fallback4741:
    $P5042 = $P5036."create_code"($P101, "<anon>", 0)
    set $P5043, $P5042
  if1511_end4737:
    set $P5044, $P5043
  if1477_end4624:
.annotate 'line', 2344
    get_hll_global $P5048, "GLOBAL"
    nqp_get_package_through_who $P5047, $P5048, "QAST"
    get_who $P5046, $P5047
    set $P5045, $P5046["Op"]
    unless_null $P5045, fallback4744
    nqp_get_sc_object $P5049, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5045, $P5049
  fallback4744:
    $P5050 = $P5045."new"($P101, "takeclosure" :named("op"))
    set $P103, $P5050
    set $P103["sink"], $P101
    set $P103["block_past"], $P102
.annotate 'line', 2347
    $P5051 = _lex_param_1."!make"($P103)
    unless_null _lex_param_1, fallback4747
    nqp_get_sc_object $P5053, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5053
  fallback4747:
    set $P5052, _lex_param_1["trait"]
    unless_null $P5052, fallback4748
    nqp_get_sc_object $P5054, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5052, $P5054
  fallback4748:
    set $P5063, $P5052
    unless $P5052 goto if1514_end4746 
.annotate 'line', 2350
    unless_null _lex_param_1, fallback4749
    nqp_get_sc_object $P5059, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5059
  fallback4749:
    set $P5058, _lex_param_1["trait"]
    unless_null $P5058, fallback4750
    nqp_get_sc_object $P5060, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5058, $P5060
  fallback4750:
    set $P5055, $P5058
    iter $P5057, $P5058
  for_next4751:
    unless $P5057, for_done4753
    shift $P5062, $P5057
  for_redo4752:
    .const 'Sub' $P5061 = 'cuid_451_1346968539.359' 
    capture_lex $P5061
    $P5055 = $P5061($P5062)
    goto for_next4751
  for_done4753:
    set $P5063, $P5055
  if1514_end4746:
    .return ($P5063) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_448_1346968539.359") :anon :lex :outer("cuid_304_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2246
    .const 'Sub' $P5081 = 'cuid_447_1346968539.359' 
    capture_lex $P5081 
    .const 'Sub' $P5081 = 'cuid_449_1346968539.359' 
    capture_lex $P5081 
    .const 'Sub' $P5081 = 'cuid_450_1346968539.359' 
    capture_lex $P5081 
    .lex "$name", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    find_lex $P5004, "$/"
    unless_null $P5004, fallback4627
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5004, $P5005
  fallback4627:
    set $P5003, $P5004["sigil"]
    unless_null $P5003, fallback4628
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5003, $P5006
  fallback4628:
    set $P5002, $P5003[0]
    unless_null $P5002, fallback4629
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5002, $P5007
  fallback4629:
    set $S5002, $P5002
.annotate 'line', 2247
    find_lex $P5010, "$/"
    unless_null $P5010, fallback4630
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5010, $P5011
  fallback4630:
    set $P5009, $P5010["deflongname"]
    unless_null $P5009, fallback4631
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5009, $P5012
  fallback4631:
    set $P5008, $P5009[0]
    unless_null $P5008, fallback4632
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5008, $P5013
  fallback4632:
    $P5014 = $P5008."ast"()
    set $S5003, $P5014
    concat $S5001, $S5002, $S5003
    box $P5015, $S5001
    set $P101, $P5015
.annotate 'line', 2248
    find_lex $P5016, "$past"
    $P5017 = $P5016."name"($P101)
    find_dynamic_lex $P5018, "$*SCOPE"
    unless_null $P5018, fallback4639
    get_hll_global $P5021, "GLOBAL"
    get_who $P5020, $P5021
    set $P5019, $P5020["$SCOPE"]
    unless_null $P5019, fallback4640
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5019, $P5022
  fallback4640:
    unless_null $P5019, vivi_14814641
    die "Contextual $*SCOPE not found"
    box $P5023, "Contextual $*SCOPE not found"
    set $P5019, $P5023
  vivi_14814641:
    set $P5018, $P5019
  fallback4639:
    set $S5004, $P5018
    iseq $I5001, $S5004, ""
    set $I5003, $I5001
    if $I5001 goto unless1480_end4638 
    find_dynamic_lex $P5024, "$*SCOPE"
    unless_null $P5024, fallback4642
    get_hll_global $P5027, "GLOBAL"
    get_who $P5026, $P5027
    set $P5025, $P5026["$SCOPE"]
    unless_null $P5025, fallback4643
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5025, $P5028
  fallback4643:
    unless_null $P5025, vivi_14824644
    die "Contextual $*SCOPE not found"
    box $P5029, "Contextual $*SCOPE not found"
    set $P5025, $P5029
  vivi_14824644:
    set $P5024, $P5025
  fallback4642:
    set $S5005, $P5024
    iseq $I5002, $S5005, "my"
    set $I5003, $I5002
  unless1480_end4638:
    set $I5005, $I5003
    if $I5003 goto unless1479_end4636 
    find_dynamic_lex $P5030, "$*SCOPE"
    unless_null $P5030, fallback4645
    get_hll_global $P5033, "GLOBAL"
    get_who $P5032, $P5033
    set $P5031, $P5032["$SCOPE"]
    unless_null $P5031, fallback4646
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5031, $P5034
  fallback4646:
    unless_null $P5031, vivi_14834647
    die "Contextual $*SCOPE not found"
    box $P5035, "Contextual $*SCOPE not found"
    set $P5031, $P5035
  vivi_14834647:
    set $P5030, $P5031
  fallback4645:
    set $S5006, $P5030
    iseq $I5004, $S5006, "our"
    set $I5005, $I5004
  unless1479_end4636:
    unless $I5005 goto if1478_else4633 
.annotate 'line', 2249
    find_dynamic_lex $P5036, "$*MULTINESS"
    unless_null $P5036, fallback4650
    get_hll_global $P5039, "GLOBAL"
    get_who $P5038, $P5039
    set $P5037, $P5038["$MULTINESS"]
    unless_null $P5037, fallback4651
    nqp_get_sc_object $P5040, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5037, $P5040
  fallback4651:
    unless_null $P5037, vivi_14854652
    die "Contextual $*MULTINESS not found"
    box $P5041, "Contextual $*MULTINESS not found"
    set $P5037, $P5041
  vivi_14854652:
    set $P5036, $P5037
  fallback4650:
    set $S5007, $P5036
    iseq $I5006, $S5007, "multi"
    unless $I5006 goto if1484_else4648 
    .const 'Sub' $P5042 = 'cuid_447_1346968539.359' 
    capture_lex $P5042
    $P5043 = $P5042()
    set $P5055, $P5043
    goto if1484_end4649
  if1484_else4648:
    find_dynamic_lex $P5044, "$*MULTINESS"
    unless_null $P5044, fallback4688
    get_hll_global $P5047, "GLOBAL"
    get_who $P5046, $P5047
    set $P5045, $P5046["$MULTINESS"]
    unless_null $P5045, fallback4689
    nqp_get_sc_object $P5048, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5045, $P5048
  fallback4689:
    unless_null $P5045, vivi_14974690
    die "Contextual $*MULTINESS not found"
    box $P5049, "Contextual $*MULTINESS not found"
    set $P5045, $P5049
  vivi_14974690:
    set $P5044, $P5045
  fallback4688:
    set $S5008, $P5044
    iseq $I5007, $S5008, "proto"
    unless $I5007 goto if1496_else4686 
    .const 'Sub' $P5050 = 'cuid_449_1346968539.359' 
    capture_lex $P5050
    $P5051 = $P5050()
    set $P5054, $P5051
    goto if1496_end4687
  if1496_else4686:
    .const 'Sub' $P5052 = 'cuid_450_1346968539.359' 
    capture_lex $P5052
    $P5053 = $P5052()
    set $P5054, $P5053
  if1496_end4687:
    set $P5055, $P5054
  if1484_end4649:
.annotate 'line', 2327
    get_hll_global $P5059, "GLOBAL"
    nqp_get_package_through_who $P5058, $P5059, "QAST"
    get_who $P5057, $P5058
    set $P5056, $P5057["Var"]
    unless_null $P5056, fallback4725
    nqp_get_sc_object $P5060, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5056, $P5060
  fallback4725:
    set $S5010, $P101
    concat $S5009, "&", $S5010
    $P5061 = $P5056."new"($S5009 :named("name"), "lexical" :named("scope"))
    store_lex "$past", $P5061
    set $P5071, $P5061
    goto if1478_end4634
  if1478_else4633:
.annotate 'line', 2329
.annotate 'line', 2330
    find_lex $P5062, "$/"
    $P5063 = $P5062."CURSOR"()
    find_dynamic_lex $P5064, "$*SCOPE"
    unless_null $P5064, fallback4726
    get_hll_global $P5067, "GLOBAL"
    get_who $P5066, $P5067
    set $P5065, $P5066["$SCOPE"]
    unless_null $P5065, fallback4727
    nqp_get_sc_object $P5068, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5065, $P5068
  fallback4727:
    unless_null $P5065, vivi_15074728
    die "Contextual $*SCOPE not found"
    box $P5069, "Contextual $*SCOPE not found"
    set $P5065, $P5069
  vivi_15074728:
    set $P5064, $P5065
  fallback4726:
    set $S5012, $P5064
    concat $S5011, $S5012, " scoped routines are not supported yet"
    $P5070 = $P5063."panic"($S5011)
    set $P5071, $P5070
  if1478_end4634:
    set $S5013, $P101
    iseq $I5008, $S5013, "MAIN"
    set $I5010, $I5008
    unless $I5008 goto if1509_end4732 
    find_dynamic_lex $P5072, "$*MULTINESS"
    unless_null $P5072, fallback4733
    get_hll_global $P5075, "GLOBAL"
    get_who $P5074, $P5075
    set $P5073, $P5074["$MULTINESS"]
    unless_null $P5073, fallback4734
    nqp_get_sc_object $P5076, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5073, $P5076
  fallback4734:
    unless_null $P5073, vivi_15104735
    die "Contextual $*MULTINESS not found"
    box $P5077, "Contextual $*MULTINESS not found"
    set $P5073, $P5077
  vivi_15104735:
    set $P5072, $P5073
  fallback4733:
    set $S5014, $P5072
    isne $I5009, $S5014, "multi"
    set $I5010, $I5009
  if1509_end4732:
    box $P5080, $I5010
    set $P5079, $P5080
    unless $I5010 goto if1508_end4730 
.annotate 'line', 2334
    find_lex $P5078, "$block"
    store_dynamic_lex "$*MAIN_SUB", $P5078
    set $P5079, $P5078
  if1508_end4730:
    .return ($P5079) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_447_1346968539.359") :anon :lex :outer("cuid_448_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2250
    .const 'Sub' $P5053 = 'cuid_446_1346968539.359' 
    capture_lex $P5053 
    .lex "$proto", $P101 
    .lex "%sym", $P102 
    .lex "$code", $P103 
    .lex "$BLOCK", $P104 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P104, $P5004
    find_dynamic_lex $P5005, "$*SCOPE"
    unless_null $P5005, fallback4655
    get_hll_global $P5008, "GLOBAL"
    get_who $P5007, $P5008
    set $P5006, $P5007["$SCOPE"]
    unless_null $P5006, fallback4656
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5006, $P5009
  fallback4656:
    unless_null $P5006, vivi_14874657
    die "Contextual $*SCOPE not found"
    box $P5010, "Contextual $*SCOPE not found"
    set $P5006, $P5010
  vivi_14874657:
    set $P5005, $P5006
  fallback4655:
    set $S5001, $P5005
    iseq $I5001, $S5001, "our"
    box $P5013, $I5001
    set $P5012, $P5013
    unless $I5001 goto if1486_end4654 
.annotate 'line', 2252
    box $P5011, "a multi can not be our-scoped"
    die $P5011
    set $P5012, $P5011
  if1486_end4654:
.annotate 'line', 2254
    find_dynamic_lex $P5014, "$*W"
    unless_null $P5014, fallback4658
    get_hll_global $P5017, "GLOBAL"
    get_who $P5016, $P5017
    set $P5015, $P5016["$W"]
    unless_null $P5015, fallback4659
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5015, $P5018
  fallback4659:
    unless_null $P5015, vivi_14884660
    die "Contextual $*W not found"
    box $P5019, "Contextual $*W not found"
    set $P5015, $P5019
  vivi_14884660:
    set $P5014, $P5015
  fallback4658:
    $P5020 = $P5014."cur_lexpad"()
    find_lex $P5021, "$name"
    set $S5003, $P5021
    concat $S5002, "&", $S5003
    $P5022 = $P5020."symbol"($S5002)
    set $P102, $P5022
    set $P5023, $P102["proto"]
    unless_null $P5023, fallback4663
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5023, $P5024
  fallback4663:
    unless $P5023 goto if1489_else4661 
.annotate 'line', 2255
    set $P5025, $P102["value"]
    unless_null $P5025, fallback4664
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5025, $P5026
  fallback4664:
    set $P101, $P5025
    set $P5029, $P101
    goto if1489_end4662
  if1489_else4661:
    .const 'Sub' $P5027 = 'cuid_446_1346968539.359' 
    capture_lex $P5027
    $P5028 = $P5027()
    set $P5029, $P5028
  if1489_end4662:
.annotate 'line', 2284
    find_dynamic_lex $P5030, "$*W"
    unless_null $P5030, fallback4679
    get_hll_global $P5033, "GLOBAL"
    get_who $P5032, $P5033
    set $P5031, $P5032["$W"]
    unless_null $P5031, fallback4680
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5031, $P5034
  fallback4680:
    unless_null $P5031, vivi_14944681
    die "Contextual $*W not found"
    box $P5035, "Contextual $*W not found"
    set $P5031, $P5035
  vivi_14944681:
    set $P5030, $P5031
  fallback4679:
    find_lex $P5036, "$past"
    find_lex $P5037, "$name"
    $P5038 = $P5030."create_code"($P5036, $P5037, 0)
    set $P103, $P5038
.annotate 'line', 2285
    find_lex $P5039, "$past"
    $P5040 = "&attach_multi_signature"($P103, $P5039)
.annotate 'line', 2288
    $P5041 = $P101."add_dispatchee"($P103)
.annotate 'line', 2291
    find_dynamic_lex $P5042, "$*W"
    unless_null $P5042, fallback4682
    get_hll_global $P5045, "GLOBAL"
    get_who $P5044, $P5045
    set $P5043, $P5044["$W"]
    unless_null $P5043, fallback4683
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5043, $P5046
  fallback4683:
    unless_null $P5043, vivi_14954684
    die "Contextual $*W not found"
    box $P5047, "Contextual $*W not found"
    set $P5043, $P5047
  vivi_14954684:
    set $P5042, $P5043
  fallback4682:
    $P5048 = $P5042."cur_lexpad"()
    set $P104, $P5048
.annotate 'line', 2292
    set $P5049, $P104[0]
    unless_null $P5049, fallback4685
    nqp_get_sc_object $P5050, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5049, $P5050
  fallback4685:
    find_lex $P5051, "$past"
    $P5052 = $P5049."push"($P5051)
    .return ($P5052) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_446_1346968539.359") :anon :lex :outer("cuid_447_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2260
    .const 'Sub' $P5019 = 'cuid_445_1346968539.359' 
    capture_lex $P5019 
    .lex "$found_proto", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
.annotate 'line', 2263
    find_dynamic_lex $P5005, "$*W"
    unless_null $P5005, fallback4665
    get_hll_global $P5008, "GLOBAL"
    get_who $P5007, $P5008
    set $P5006, $P5007["$W"]
    unless_null $P5006, fallback4666
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5006, $P5009
  fallback4666:
    unless_null $P5006, vivi_14904667
    die "Contextual $*W not found"
    box $P5010, "Contextual $*W not found"
    set $P5006, $P5010
  vivi_14904667:
    set $P5005, $P5006
  fallback4665:
    $P5011 = $P5005."get_legacy_block_list"()
    set $P5002, $P5011
    iter $P5004, $P5011
  for_next4674:
    unless $P5004, for_done4676
    shift $P5013, $P5004
  for_redo4675:
    .const 'Sub' $P5012 = 'cuid_445_1346968539.359' 
    capture_lex $P5012
    $P5002 = $P5012($P5013)
    goto for_next4674
  for_done4676:
    set $P5017, $P101
    if $P101 goto unless1493_end4678 
.annotate 'line', 2275
.annotate 'line', 2276
    find_lex $P5014, "$/"
    $P5015 = $P5014."CURSOR"()
    $P5016 = $P5015."panic"("Sorry, no proto sub in scope, and auto-generation of protos is not yet implemented.")
    set $P5017, $P5016
  unless1493_end4678:
    box $P5018, "Dispatcher derivation NYI"
    die $P5018
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_445_1346968539.359") :anon :lex :outer("cuid_446_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2263
    .param pmc _lex_param_0 
    .lex "%sym", $P101 
    .lex "$_", _lex_param_0 
    new $P5001, 'Hash'
    set $P101, $P5001
.annotate 'line', 2264
    find_lex $P5002, "$name"
    set $S5002, $P5002
    concat $S5001, "&", $S5002
    $P5003 = _lex_param_0."symbol"($S5001)
    set $P101, $P5003
    set $P5004, $P101["proto"]
    unless_null $P5004, fallback4670
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5004, $P5005
  fallback4670:
    unless $P5004 goto if1491_else4668 
.annotate 'line', 2265
    set $P5006, $P101["value"]
    unless_null $P5006, fallback4671
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5006, $P5007
  fallback4671:
    store_lex "$proto", $P5006
    box $P5008, 1
    store_lex "$found_proto", $P5008
    set $P5013, $P5008
    goto if1491_end4669
  if1491_else4668:
    set $P5012, $P101
    unless $P101 goto if1492_end4673 
.annotate 'line', 2269
.annotate 'line', 2270
    find_lex $P5009, "$/"
    $P5010 = $P5009."CURSOR"()
    $P5011 = $P5010."panic"("Cannot declare a multi when an only is already in scope.")
    set $P5012, $P5011
  if1492_end4673:
    set $P5013, $P5012
  if1491_end4669:
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_449_1346968539.359") :anon :lex :outer("cuid_448_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2294
    .lex "$code", $P101 
    .lex "$BLOCK", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
    find_dynamic_lex $P5003, "$*SCOPE"
    unless_null $P5003, fallback4693
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["$SCOPE"]
    unless_null $P5004, fallback4694
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5004, $P5007
  fallback4694:
    unless_null $P5004, vivi_14994695
    die "Contextual $*SCOPE not found"
    box $P5008, "Contextual $*SCOPE not found"
    set $P5004, $P5008
  vivi_14994695:
    set $P5003, $P5004
  fallback4693:
    set $S5001, $P5003
    iseq $I5001, $S5001, "our"
    box $P5011, $I5001
    set $P5010, $P5011
    unless $I5001 goto if1498_end4692 
.annotate 'line', 2298
    box $P5009, "our-scoped protos not yet implemented"
    die $P5009
    set $P5010, $P5009
  if1498_end4692:
.annotate 'line', 2299
    find_dynamic_lex $P5012, "$*W"
    unless_null $P5012, fallback4696
    get_hll_global $P5015, "GLOBAL"
    get_who $P5014, $P5015
    set $P5013, $P5014["$W"]
    unless_null $P5013, fallback4697
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5013, $P5016
  fallback4697:
    unless_null $P5013, vivi_15004698
    die "Contextual $*W not found"
    box $P5017, "Contextual $*W not found"
    set $P5013, $P5017
  vivi_15004698:
    set $P5012, $P5013
  fallback4696:
    find_lex $P5018, "$past"
    find_lex $P5019, "$name"
    $P5020 = $P5012."create_code"($P5018, $P5019, 1)
    set $P101, $P5020
.annotate 'line', 2300
    find_dynamic_lex $P5021, "$*W"
    unless_null $P5021, fallback4699
    get_hll_global $P5024, "GLOBAL"
    get_who $P5023, $P5024
    set $P5022, $P5023["$W"]
    unless_null $P5022, fallback4700
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5022, $P5025
  fallback4700:
    unless_null $P5022, vivi_15014701
    die "Contextual $*W not found"
    box $P5026, "Contextual $*W not found"
    set $P5022, $P5026
  vivi_15014701:
    set $P5021, $P5022
  fallback4699:
    $P5027 = $P5021."cur_lexpad"()
    set $P102, $P5027
.annotate 'line', 2301
    set $P5028, $P102[0]
    unless_null $P5028, fallback4702
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5028, $P5029
  fallback4702:
    get_hll_global $P5033, "GLOBAL"
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["Op"]
    unless_null $P5030, fallback4703
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5030, $P5034
  fallback4703:
.annotate 'line', 2303
    get_hll_global $P5038, "GLOBAL"
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["Var"]
    unless_null $P5035, fallback4704
    nqp_get_sc_object $P5039, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5035, $P5039
  fallback4704:
    find_lex $P5040, "$name"
    set $S5003, $P5040
    concat $S5002, "&", $S5003
    $P5041 = $P5035."new"($S5002 :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    find_lex $P5042, "$past"
    $P5043 = $P5030."new"($P5041, $P5042, "bind" :named("op"))
    $P5044 = $P5028."push"($P5043)
.annotate 'line', 2306
    find_lex $P5045, "$name"
    set $S5005, $P5045
    concat $S5004, "&", $S5005
    $P5046 = $P102."symbol"($S5004, "lexical" :named("scope"), 1 :named("proto"), $P101 :named("value"))
    .return ($P5046) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_450_1346968539.359") :anon :lex :outer("cuid_448_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2308
    .lex "$BLOCK", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
.annotate 'line', 2309
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback4705
    get_hll_global $P5005, "GLOBAL"
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback4706
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5003, $P5006
  fallback4706:
    unless_null $P5003, vivi_15024707
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_15024707:
    set $P5002, $P5003
  fallback4705:
    $P5008 = $P5002."cur_lexpad"()
    set $P101, $P5008
.annotate 'line', 2310
    set $P5009, $P101[0]
    unless_null $P5009, fallback4708
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5009, $P5010
  fallback4708:
    get_hll_global $P5014, "GLOBAL"
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback4709
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5011, $P5015
  fallback4709:
.annotate 'line', 2312
    get_hll_global $P5019, "GLOBAL"
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Var"]
    unless_null $P5016, fallback4710
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5016, $P5020
  fallback4710:
    find_lex $P5021, "$name"
    set $S5002, $P5021
    concat $S5001, "&", $S5002
    $P5022 = $P5016."new"($S5001 :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    find_lex $P5023, "$past"
    $P5024 = $P5011."new"($P5022, $P5023, "bind" :named("op"))
    $P5025 = $P5009."push"($P5024)
.annotate 'line', 2315
    find_lex $P5026, "$name"
    set $S5004, $P5026
    concat $S5003, "&", $S5004
    $P5027 = $P101."symbol"($S5003, "lexical" :named("scope"))
    find_dynamic_lex $P5028, "$*SCOPE"
    unless_null $P5028, fallback4713
    get_hll_global $P5031, "GLOBAL"
    get_who $P5030, $P5031
    set $P5029, $P5030["$SCOPE"]
    unless_null $P5029, fallback4714
    nqp_get_sc_object $P5032, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5029, $P5032
  fallback4714:
    unless_null $P5029, vivi_15044715
    die "Contextual $*SCOPE not found"
    box $P5033, "Contextual $*SCOPE not found"
    set $P5029, $P5033
  vivi_15044715:
    set $P5028, $P5029
  fallback4713:
    set $S5005, $P5028
    iseq $I5001, $S5005, "our"
    box $P5070, $I5001
    set $P5069, $P5070
    unless $I5001 goto if1503_end4712 
.annotate 'line', 2316
.annotate 'line', 2319
    find_dynamic_lex $P5034, "$*W"
    unless_null $P5034, fallback4716
    get_hll_global $P5037, "GLOBAL"
    get_who $P5036, $P5037
    set $P5035, $P5036["$W"]
    unless_null $P5035, fallback4717
    nqp_get_sc_object $P5038, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5035, $P5038
  fallback4717:
    unless_null $P5035, vivi_15054718
    die "Contextual $*W not found"
    box $P5039, "Contextual $*W not found"
    set $P5035, $P5039
  vivi_15054718:
    set $P5034, $P5035
  fallback4716:
    find_dynamic_lex $P5040, "$*PACKAGE"
    unless_null $P5040, fallback4719
    get_hll_global $P5043, "GLOBAL"
    get_who $P5042, $P5043
    set $P5041, $P5042["$PACKAGE"]
    unless_null $P5041, fallback4720
    nqp_get_sc_object $P5044, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5041, $P5044
  fallback4720:
    unless_null $P5041, vivi_15064721
    die "Contextual $*PACKAGE not found"
    box $P5045, "Contextual $*PACKAGE not found"
    set $P5041, $P5045
  vivi_15064721:
    set $P5040, $P5041
  fallback4719:
    find_lex $P5046, "$name"
    find_lex $P5047, "$past"
    $P5048 = $P5034."install_package_routine"($P5040, $P5046, $P5047)
.annotate 'line', 2320
    set $P5049, $P101[0]
    unless_null $P5049, fallback4722
    nqp_get_sc_object $P5050, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5049, $P5050
  fallback4722:
    get_hll_global $P5054, "GLOBAL"
    nqp_get_package_through_who $P5053, $P5054, "QAST"
    get_who $P5052, $P5053
    set $P5051, $P5052["Op"]
    unless_null $P5051, fallback4723
    nqp_get_sc_object $P5055, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5051, $P5055
  fallback4723:
.annotate 'line', 2322
    new $P5056, 'ResizablePMCArray'
    find_lex $P5057, "$name"
    push $P5056, $P5057
    find_lex $P5058, "$/"
    $P5059 = "&lexical_package_lookup"($P5056, $P5058)
.annotate 'line', 2323
    get_hll_global $P5063, "GLOBAL"
    nqp_get_package_through_who $P5062, $P5063, "QAST"
    get_who $P5061, $P5062
    set $P5060, $P5061["Var"]
    unless_null $P5060, fallback4724
    nqp_get_sc_object $P5064, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5060, $P5064
  fallback4724:
    find_lex $P5065, "$name"
    set $S5007, $P5065
    concat $S5006, "&", $S5007
    $P5066 = $P5060."new"($S5006 :named("name"), "lexical" :named("scope"))
    $P5067 = $P5051."new"($P5059, $P5066, "bind" :named("op"))
    $P5068 = $P5049."push"($P5067)
    set $P5069, $P5068
  if1503_end4712:
    .return ($P5069) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_451_1346968539.359") :anon :lex :outer("cuid_304_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2351
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$/"
    $P5001 = _lex_param_0."ast"()
    $P5003 = $P5001($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "method_def" :subid("cuid_305_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2356
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5069 = 'cuid_452_1346968539.359' 
    capture_lex $P5069 
    .const 'Sub' $P5069 = 'cuid_453_1346968539.359' 
    capture_lex $P5069 
    .lex "$past", $P101 
    .lex "$lexpast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
    unless_null _lex_param_1, fallback4756
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5004
  fallback4756:
    set $P5003, _lex_param_1["onlystar"]
    unless_null $P5003, fallback4757
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5003, $P5005
  fallback4757:
    unless $P5003 goto if1515_else4754 
.annotate 'line', 2360
.annotate 'line', 2361
    $P5006 = "&only_star_block"()
    set $P101, $P5006
    set $P5022, $P101
    goto if1515_end4755
  if1515_else4754:
.annotate 'line', 2363
.annotate 'line', 2364
    unless_null _lex_param_1, fallback4758
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5008
  fallback4758:
    set $P5007, _lex_param_1["blockoid"]
    unless_null $P5007, fallback4759
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5007, $P5009
  fallback4759:
    $P5010 = $P5007."ast"()
    set $P101, $P5010
.annotate 'line', 2365
    $P5011 = $P101."blocktype"("declaration")
    find_dynamic_lex $P5012, "$*RETURN_USED"
    unless_null $P5012, fallback4762
    get_hll_global $P5015, "GLOBAL"
    get_who $P5014, $P5015
    set $P5013, $P5014["$RETURN_USED"]
    unless_null $P5013, fallback4763
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5013, $P5016
  fallback4763:
    unless_null $P5013, vivi_15174764
    die "Contextual $*RETURN_USED not found"
    box $P5017, "Contextual $*RETURN_USED not found"
    set $P5013, $P5017
  vivi_15174764:
    set $P5012, $P5013
  fallback4762:
    set $P5021, $P5012
    unless $P5012 goto if1516_end4761 
.annotate 'line', 2366
.annotate 'line', 2367
    set $P5018, $P101[1]
    unless_null $P5018, fallback4765
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5018, $P5019
  fallback4765:
    $P5020 = "&wrap_return_handler"($P5018)
    set $P101[1], $P5020
    set $P5021, $P5020
  if1516_end4761:
    set $P5022, $P5021
  if1515_end4755:
    set $P5023, $P101["signature_has_invocant"]
    unless_null $P5023, fallback4768
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5023, $P5024
  fallback4768:
    set $P5040, $P5023
    if $P5023 goto unless1518_end4767 
.annotate 'line', 2372
.annotate 'line', 2373
    set $P5025, $P101[0]
    unless_null $P5025, fallback4769
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5025, $P5026
  fallback4769:
    get_hll_global $P5030, "GLOBAL"
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["Var"]
    unless_null $P5027, fallback4770
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5027, $P5031
  fallback4770:
    find_dynamic_lex $P5032, "$*PACKAGE"
    unless_null $P5032, fallback4771
    get_hll_global $P5035, "GLOBAL"
    get_who $P5034, $P5035
    set $P5033, $P5034["$PACKAGE"]
    unless_null $P5033, fallback4772
    nqp_get_sc_object $P5036, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5033, $P5036
  fallback4772:
    unless_null $P5033, vivi_15194773
    die "Contextual $*PACKAGE not found"
    box $P5037, "Contextual $*PACKAGE not found"
    set $P5033, $P5037
  vivi_15194773:
    set $P5032, $P5033
  fallback4771:
    $P5038 = $P5027."new"("self" :named("name"), "lexical" :named("scope"), "param" :named("decl"), $P5032 :named("returns"))
    $P5039 = $P5025."unshift"($P5038)
    set $P5040, $P5039
  unless1518_end4767:
.annotate 'line', 2378
    $P5041 = $P101."symbol"("self", "lexical" :named("scope"))
    unless_null _lex_param_1, fallback4776
    nqp_get_sc_object $P5043, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5043
  fallback4776:
    set $P5042, _lex_param_1["deflongname"]
    unless_null $P5042, fallback4777
    nqp_get_sc_object $P5044, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5042, $P5044
  fallback4777:
    set $P5047, $P5042
    unless $P5042 goto if1520_end4775 
    .const 'Sub' $P5045 = 'cuid_452_1346968539.359' 
    capture_lex $P5045
    $P5046 = $P5045()
    set $P5047, $P5046
  if1520_end4775:
.annotate 'line', 2401
    get_hll_global $P5051, "GLOBAL"
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["Op"]
    unless_null $P5048, fallback4816
    nqp_get_sc_object $P5052, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5048, $P5052
  fallback4816:
    $P5053 = $P5048."new"($P101, "takeclosure" :named("op"))
    set $P102, $P5053
    set $P102["sink"], $P101
    set $P102["block_past"], $P101
    set $P5054, $P101["code_obj"]
    unless_null $P5054, fallback4817
    nqp_get_sc_object $P5055, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5054, $P5055
  fallback4817:
    set $P102["code_obj"], $P5054
.annotate 'line', 2405
    $P5056 = _lex_param_1."!make"($P102)
    unless_null _lex_param_1, fallback4820
    nqp_get_sc_object $P5058, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5058
  fallback4820:
    set $P5057, _lex_param_1["trait"]
    unless_null $P5057, fallback4821
    nqp_get_sc_object $P5059, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5057, $P5059
  fallback4821:
    set $P5068, $P5057
    unless $P5057 goto if1533_end4819 
.annotate 'line', 2406
    unless_null _lex_param_1, fallback4822
    nqp_get_sc_object $P5064, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5064
  fallback4822:
    set $P5063, _lex_param_1["trait"]
    unless_null $P5063, fallback4823
    nqp_get_sc_object $P5065, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5063, $P5065
  fallback4823:
    set $P5060, $P5063
    iter $P5062, $P5063
  for_next4824:
    unless $P5062, for_done4826
    shift $P5067, $P5062
  for_redo4825:
    .const 'Sub' $P5066 = 'cuid_453_1346968539.359' 
    capture_lex $P5066
    $P5060 = $P5066($P5067)
    goto for_next4824
  for_done4826:
    set $P5068, $P5060
  if1533_end4819:
    .return ($P5068) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_452_1346968539.359") :anon :lex :outer("cuid_305_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2381
    .lex "$name", $P101 
    .lex "$meta_meth", $P102 
    .lex "$is_dispatcher", $P103 
    .lex "$code", $P104 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P104, $P5004
    find_lex $P5006, "$/"
    unless_null $P5006, fallback4778
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5006, $P5007
  fallback4778:
    set $P5005, $P5006["private"]
    unless_null $P5005, fallback4779
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5005, $P5008
  fallback4779:
    set $S5002, $P5005
.annotate 'line', 2383
    find_lex $P5011, "$/"
    unless_null $P5011, fallback4780
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5011, $P5012
  fallback4780:
    set $P5010, $P5011["deflongname"]
    unless_null $P5010, fallback4781
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5010, $P5013
  fallback4781:
    set $P5009, $P5010[0]
    unless_null $P5009, fallback4782
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5009, $P5014
  fallback4782:
    $P5015 = $P5009."ast"()
    set $S5003, $P5015
    concat $S5001, $S5002, $S5003
    box $P5016, $S5001
    set $P101, $P5016
.annotate 'line', 2384
    find_lex $P5017, "$past"
    $P5018 = $P5017."name"($P101)
    find_dynamic_lex $P5019, "$*MULTINESS"
    unless_null $P5019, fallback4785
    get_hll_global $P5022, "GLOBAL"
    get_who $P5021, $P5022
    set $P5020, $P5021["$MULTINESS"]
    unless_null $P5020, fallback4786
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5020, $P5023
  fallback4786:
    unless_null $P5020, vivi_15224787
    die "Contextual $*MULTINESS not found"
    box $P5024, "Contextual $*MULTINESS not found"
    set $P5020, $P5024
  vivi_15224787:
    set $P5019, $P5020
  fallback4785:
    set $S5004, $P5019
    iseq $I5001, $S5004, "multi"
    unless $I5001 goto if1521_else4783 
    set $S5005, "add_multi_method"
    goto if1521_end4784
  if1521_else4783:
    set $S5005, "add_method"
  if1521_end4784:
    box $P5025, $S5005
    set $P102, $P5025
    find_dynamic_lex $P5026, "$*MULTINESS"
    unless_null $P5026, fallback4788
    get_hll_global $P5029, "GLOBAL"
    get_who $P5028, $P5029
    set $P5027, $P5028["$MULTINESS"]
    unless_null $P5027, fallback4789
    nqp_get_sc_object $P5030, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5027, $P5030
  fallback4789:
    unless_null $P5027, vivi_15234790
    die "Contextual $*MULTINESS not found"
    box $P5031, "Contextual $*MULTINESS not found"
    set $P5027, $P5031
  vivi_15234790:
    set $P5026, $P5027
  fallback4788:
    set $S5006, $P5026
    iseq $I5002, $S5006, "proto"
    box $P5032, $I5002
    set $P103, $P5032
.annotate 'line', 2389
    find_dynamic_lex $P5033, "$*W"
    unless_null $P5033, fallback4791
    get_hll_global $P5036, "GLOBAL"
    get_who $P5035, $P5036
    set $P5034, $P5035["$W"]
    unless_null $P5034, fallback4792
    nqp_get_sc_object $P5037, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5034, $P5037
  fallback4792:
    unless_null $P5034, vivi_15244793
    die "Contextual $*W not found"
    box $P5038, "Contextual $*W not found"
    set $P5034, $P5038
  vivi_15244793:
    set $P5033, $P5034
  fallback4791:
    find_lex $P5039, "$past"
    $P5040 = $P5033."create_code"($P5039, $P101, $P103)
    set $P104, $P5040
    find_dynamic_lex $P5041, "$*MULTINESS"
    unless_null $P5041, fallback4796
    get_hll_global $P5044, "GLOBAL"
    get_who $P5043, $P5044
    set $P5042, $P5043["$MULTINESS"]
    unless_null $P5042, fallback4797
    nqp_get_sc_object $P5045, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5042, $P5045
  fallback4797:
    unless_null $P5042, vivi_15264798
    die "Contextual $*MULTINESS not found"
    box $P5046, "Contextual $*MULTINESS not found"
    set $P5042, $P5046
  vivi_15264798:
    set $P5041, $P5042
  fallback4796:
    set $S5007, $P5041
    iseq $I5003, $S5007, "multi"
    box $P5050, $I5003
    set $P5049, $P5050
    unless $I5003 goto if1525_end4795 
.annotate 'line', 2390
    find_lex $P5047, "$past"
    $P5048 = "&attach_multi_signature"($P104, $P5047)
    set $P5049, $P5048
  if1525_end4795:
.annotate 'line', 2391
    find_dynamic_lex $P5051, "$*W"
    unless_null $P5051, fallback4799
    get_hll_global $P5054, "GLOBAL"
    get_who $P5053, $P5054
    set $P5052, $P5053["$W"]
    unless_null $P5052, fallback4800
    nqp_get_sc_object $P5055, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5052, $P5055
  fallback4800:
    unless_null $P5052, vivi_15274801
    die "Contextual $*W not found"
    box $P5056, "Contextual $*W not found"
    set $P5052, $P5056
  vivi_15274801:
    set $P5051, $P5052
  fallback4799:
    find_dynamic_lex $P5057, "$*PACKAGE"
    unless_null $P5057, fallback4802
    get_hll_global $P5060, "GLOBAL"
    get_who $P5059, $P5060
    set $P5058, $P5059["$PACKAGE"]
    unless_null $P5058, fallback4803
    nqp_get_sc_object $P5061, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5058, $P5061
  fallback4803:
    unless_null $P5058, vivi_15284804
    die "Contextual $*PACKAGE not found"
    box $P5062, "Contextual $*PACKAGE not found"
    set $P5058, $P5062
  vivi_15284804:
    set $P5057, $P5058
  fallback4802:
    $P5063 = $P5051."pkg_add_method"($P5057, $P102, $P101, $P104)
    find_lex $P5064, "$past"
    set $P5064["code_obj"], $P104
    find_dynamic_lex $P5065, "$*SCOPE"
    unless_null $P5065, fallback4807
    get_hll_global $P5068, "GLOBAL"
    get_who $P5067, $P5068
    set $P5066, $P5067["$SCOPE"]
    unless_null $P5066, fallback4808
    nqp_get_sc_object $P5069, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5066, $P5069
  fallback4808:
    unless_null $P5066, vivi_15304809
    die "Contextual $*SCOPE not found"
    box $P5070, "Contextual $*SCOPE not found"
    set $P5066, $P5070
  vivi_15304809:
    set $P5065, $P5066
  fallback4807:
    set $S5008, $P5065
    iseq $I5004, $S5008, "our"
    box $P5086, $I5004
    set $P5085, $P5086
    unless $I5004 goto if1529_end4806 
.annotate 'line', 2395
.annotate 'line', 2396
    find_dynamic_lex $P5071, "$*W"
    unless_null $P5071, fallback4810
    get_hll_global $P5074, "GLOBAL"
    get_who $P5073, $P5074
    set $P5072, $P5073["$W"]
    unless_null $P5072, fallback4811
    nqp_get_sc_object $P5075, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5072, $P5075
  fallback4811:
    unless_null $P5072, vivi_15314812
    die "Contextual $*W not found"
    box $P5076, "Contextual $*W not found"
    set $P5072, $P5076
  vivi_15314812:
    set $P5071, $P5072
  fallback4810:
    find_dynamic_lex $P5077, "$*PACKAGE"
    unless_null $P5077, fallback4813
    get_hll_global $P5080, "GLOBAL"
    get_who $P5079, $P5080
    set $P5078, $P5079["$PACKAGE"]
    unless_null $P5078, fallback4814
    nqp_get_sc_object $P5081, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5078, $P5081
  fallback4814:
    unless_null $P5078, vivi_15324815
    die "Contextual $*PACKAGE not found"
    box $P5082, "Contextual $*PACKAGE not found"
    set $P5078, $P5082
  vivi_15324815:
    set $P5077, $P5078
  fallback4813:
    find_lex $P5083, "$past"
    $P5084 = $P5071."install_package_routine"($P5077, $P101, $P5083)
    set $P5085, $P5084
  if1529_end4806:
    .return ($P5085) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_453_1346968539.359") :anon :lex :outer("cuid_305_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2407
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$/"
    $P5001 = _lex_param_0."ast"()
    $P5003 = $P5001($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "signature" :subid("cuid_306_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2439
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5026 = 'cuid_454_1346968539.359' 
    capture_lex $P5026 
    .const 'Sub' $P5026 = 'cuid_455_1346968539.359' 
    capture_lex $P5026 
    .lex "$BLOCK", $P101 
    .lex "$BLOCKINIT", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
.annotate 'line', 2440
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4827
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4828
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5004, $P5007
  fallback4828:
    unless_null $P5004, vivi_15344829
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_15344829:
    set $P5003, $P5004
  fallback4827:
    $P5009 = $P5003."cur_lexpad"()
    set $P101, $P5009
    set $P5010, $P101[0]
    unless_null $P5010, fallback4830
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5010, $P5011
  fallback4830:
    set $P102, $P5010
    unless_null _lex_param_1, fallback4833
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5013
  fallback4833:
    set $P5012, _lex_param_1["invocant"]
    unless_null $P5012, fallback4834
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5012, $P5014
  fallback4834:
    set $P5017, $P5012
    unless $P5012 goto if1535_end4832 
    .const 'Sub' $P5015 = 'cuid_454_1346968539.359' 
    capture_lex $P5015
    $P5016 = $P5015()
    set $P5017, $P5016
  if1535_end4832:
    unless_null _lex_param_1, fallback4841
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5022
  fallback4841:
    set $P5021, _lex_param_1["parameter"]
    unless_null $P5021, fallback4842
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5021, $P5023
  fallback4842:
    set $P5018, $P5021
    iter $P5020, $P5021
  for_next4843:
    unless $P5020, for_done4845
    shift $P5025, $P5020
  for_redo4844:
    .const 'Sub' $P5024 = 'cuid_455_1346968539.359' 
    capture_lex $P5024
    $P5018 = $P5024($P5025)
    goto for_next4843
  for_done4845:
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_454_1346968539.359") :anon :lex :outer("cuid_306_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2442
    .lex "$inv", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
.annotate 'line', 2443
    find_lex $P5004, "$/"
    unless_null $P5004, fallback4835
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5004, $P5005
  fallback4835:
    set $P5003, $P5004["invocant"]
    unless_null $P5003, fallback4836
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5003, $P5006
  fallback4836:
    set $P5002, $P5003[0]
    unless_null $P5002, fallback4837
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5002, $P5007
  fallback4837:
    $P5008 = $P5002."ast"()
    set $P101, $P5008
.annotate 'line', 2444
    find_lex $P5009, "$BLOCKINIT"
    $P5010 = $P5009."push"($P101)
.annotate 'line', 2445
    find_lex $P5011, "$BLOCKINIT"
    get_hll_global $P5015, "GLOBAL"
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Op"]
    unless_null $P5012, fallback4838
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5012, $P5016
  fallback4838:
.annotate 'line', 2447
    get_hll_global $P5020, "GLOBAL"
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Var"]
    unless_null $P5017, fallback4839
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5017, $P5021
  fallback4839:
    $P5022 = $P5017."new"("self" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
.annotate 'line', 2448
    get_hll_global $P5026, "GLOBAL"
    nqp_get_package_through_who $P5025, $P5026, "QAST"
    get_who $P5024, $P5025
    set $P5023, $P5024["Var"]
    unless_null $P5023, fallback4840
    nqp_get_sc_object $P5027, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5023, $P5027
  fallback4840:
    $P5028 = $P101."name"()
    $P5029 = $P5023."new"("lexical" :named("scope"), $P5028 :named("name"))
    $P5030 = $P5012."new"($P5022, $P5029, "bind" :named("op"))
    $P5031 = $P5011."push"($P5030)
    find_lex $P5032, "$BLOCK"
    box $P5033, 1
    set $P5032["signature_has_invocant"], $P5033
    .return ($P5033) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_455_1346968539.359") :anon :lex :outer("cuid_306_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2452
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$BLOCKINIT"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "parameter" :subid("cuid_307_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2455
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$quant", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
    unless_null _lex_param_1, fallback4846
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5004
  fallback4846:
    set $P5003, _lex_param_1["quant"]
    unless_null $P5003, fallback4847
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5003, $P5005
  fallback4847:
    set $P101, $P5003
    unless_null _lex_param_1, fallback4850
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5007
  fallback4850:
    set $P5006, _lex_param_1["named_param"]
    unless_null $P5006, fallback4851
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5006, $P5008
  fallback4851:
    unless $P5006 goto if1536_else4848 
.annotate 'line', 2458
.annotate 'line', 2459
    unless_null _lex_param_1, fallback4852
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5010
  fallback4852:
    set $P5009, _lex_param_1["named_param"]
    unless_null $P5009, fallback4853
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5009, $P5011
  fallback4853:
    $P5012 = $P5009."ast"()
    set $P102, $P5012
    set $S5001, $P101
    isne $I5001, $S5001, "!"
    box $P5023, $I5001
    set $P5022, $P5023
    unless $I5001 goto if1537_end4855 
.annotate 'line', 2460
.annotate 'line', 2461
    unless_null _lex_param_1, fallback4856
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5016
  fallback4856:
    set $P5015, _lex_param_1["named_param"]
    unless_null $P5015, fallback4857
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5015, $P5017
  fallback4857:
    set $P5014, $P5015["param_var"]
    unless_null $P5014, fallback4858
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5014, $P5018
  fallback4858:
    set $P5013, $P5014["sigil"]
    unless_null $P5013, fallback4859
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5013, $P5019
  fallback4859:
    $P5020 = "&default_for"($P5013)
    $P5021 = $P102."default"($P5020)
    set $P5022, $P5021
  if1537_end4855:
    set $P5045, $P5022
    goto if1536_end4849
  if1536_else4848:
.annotate 'line', 2464
.annotate 'line', 2465
    unless_null _lex_param_1, fallback4860
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5025
  fallback4860:
    set $P5024, _lex_param_1["param_var"]
    unless_null $P5024, fallback4861
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5024, $P5026
  fallback4861:
    $P5027 = $P5024."ast"()
    set $P102, $P5027
    set $S5002, $P101
    iseq $I5002, $S5002, "*"
    unless $I5002 goto if1538_else4862 
.annotate 'line', 2466
.annotate 'line', 2467
    $P5028 = $P102."slurpy"(1)
.annotate 'line', 2468
    unless_null _lex_param_1, fallback4864
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5031
  fallback4864:
    set $P5030, _lex_param_1["param_var"]
    unless_null $P5030, fallback4865
    nqp_get_sc_object $P5032, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5030, $P5032
  fallback4865:
    set $P5029, $P5030["sigil"]
    unless_null $P5029, fallback4866
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5029, $P5033
  fallback4866:
    set $S5003, $P5029
    iseq $I5003, $S5003, "%"
    $P5034 = $P102."named"($I5003)
    set $P5044, $P5034
    goto if1538_end4863
  if1538_else4862:
    set $S5004, $P101
    iseq $I5004, $S5004, "?"
    box $P5043, $I5004
    set $P5042, $P5043
    unless $I5004 goto if1539_end4868 
.annotate 'line', 2470
.annotate 'line', 2471
    unless_null _lex_param_1, fallback4869
    nqp_get_sc_object $P5037, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5037
  fallback4869:
    set $P5036, _lex_param_1["param_var"]
    unless_null $P5036, fallback4870
    nqp_get_sc_object $P5038, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5036, $P5038
  fallback4870:
    set $P5035, $P5036["sigil"]
    unless_null $P5035, fallback4871
    nqp_get_sc_object $P5039, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5035, $P5039
  fallback4871:
    $P5040 = "&default_for"($P5035)
    $P5041 = $P102."default"($P5040)
    set $P5042, $P5041
  if1539_end4868:
    set $P5044, $P5042
  if1538_end4863:
    set $P5045, $P5044
  if1536_end4849:
    unless_null _lex_param_1, fallback4874
    nqp_get_sc_object $P5047, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5047
  fallback4874:
    set $P5046, _lex_param_1["default_value"]
    unless_null $P5046, fallback4875
    nqp_get_sc_object $P5048, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5046, $P5048
  fallback4875:
    set $P5066, $P5046
    unless $P5046 goto if1540_end4873 
.annotate 'line', 2474
    set $S5005, $P101
    iseq $I5005, $S5005, "*"
    box $P5052, $I5005
    set $P5051, $P5052
    unless $I5005 goto if1541_end4877 
.annotate 'line', 2475
.annotate 'line', 2476
    $P5049 = _lex_param_1."CURSOR"()
    $P5050 = $P5049."panic"("Can't put default on slurpy parameter")
    set $P5051, $P5050
  if1541_end4877:
    set $S5006, $P101
    iseq $I5006, $S5006, "!"
    box $P5056, $I5006
    set $P5055, $P5056
    unless $I5006 goto if1542_end4879 
.annotate 'line', 2478
.annotate 'line', 2479
    $P5053 = _lex_param_1."CURSOR"()
    $P5054 = $P5053."panic"("Can't put default on required parameter")
    set $P5055, $P5054
  if1542_end4879:
.annotate 'line', 2481
    unless_null _lex_param_1, fallback4880
    nqp_get_sc_object $P5060, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5060
  fallback4880:
    set $P5059, _lex_param_1["default_value"]
    unless_null $P5059, fallback4881
    nqp_get_sc_object $P5061, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5059, $P5061
  fallback4881:
    set $P5058, $P5059[0]
    unless_null $P5058, fallback4882
    nqp_get_sc_object $P5062, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5058, $P5062
  fallback4882:
    set $P5057, $P5058["EXPR"]
    unless_null $P5057, fallback4883
    nqp_get_sc_object $P5063, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5057, $P5063
  fallback4883:
    $P5064 = $P5057."ast"()
    $P5065 = $P102."default"($P5064)
    set $P5066, $P5065
  if1540_end4873:
.annotate 'line', 2483
    $P5067 = $P102."default"()
    set $P5084, $P5067
    if $P5067 goto unless1543_end4885 
    find_dynamic_lex $P5068, "$*W"
    unless_null $P5068, fallback4886
    get_hll_global $P5071, "GLOBAL"
    get_who $P5070, $P5071
    set $P5069, $P5070["$W"]
    unless_null $P5069, fallback4887
    nqp_get_sc_object $P5072, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5069, $P5072
  fallback4887:
    unless_null $P5069, vivi_15444888
    die "Contextual $*W not found"
    box $P5073, "Contextual $*W not found"
    set $P5069, $P5073
  vivi_15444888:
    set $P5068, $P5069
  fallback4886:
    $P5074 = $P5068."cur_lexpad"()
    find_dynamic_lex $P5075, "$*W"
    unless_null $P5075, fallback4889
    get_hll_global $P5078, "GLOBAL"
    get_who $P5077, $P5078
    set $P5076, $P5077["$W"]
    unless_null $P5076, fallback4890
    nqp_get_sc_object $P5079, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5076, $P5079
  fallback4890:
    unless_null $P5076, vivi_15454891
    die "Contextual $*W not found"
    box $P5080, "Contextual $*W not found"
    set $P5076, $P5080
  vivi_15454891:
    set $P5075, $P5076
  fallback4889:
    $P5081 = $P5075."cur_lexpad"()
    $P5082 = $P5081."arity"()
    set $N5002, $P5082
    set $N5003, 1
    add $N5001, $N5002, $N5003
    $P5083 = $P5074."arity"($N5001)
    set $P5084, $P5083
  unless1543_end4885:
    unless_null _lex_param_1, fallback4894
    nqp_get_sc_object $P5086, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5086
  fallback4894:
    set $P5085, _lex_param_1["typename"]
    unless_null $P5085, fallback4895
    nqp_get_sc_object $P5087, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5085, $P5087
  fallback4895:
    set $P5096, $P5085
    unless $P5085 goto if1546_end4893 
.annotate 'line', 2486
.annotate 'line', 2487
    unless_null _lex_param_1, fallback4896
    nqp_get_sc_object $P5090, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5090
  fallback4896:
    set $P5089, _lex_param_1["typename"]
    unless_null $P5089, fallback4897
    nqp_get_sc_object $P5091, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5089, $P5091
  fallback4897:
    set $P5088, $P5089[0]
    unless_null $P5088, fallback4898
    nqp_get_sc_object $P5092, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5088, $P5092
  fallback4898:
    $P5093 = $P5088."ast"()
    $P5094 = $P5093."value"()
    $P5095 = $P102."returns"($P5094)
    set $P5096, $P5095
  if1546_end4893:
    unless_null _lex_param_1, fallback4901
    nqp_get_sc_object $P5098, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5098
  fallback4901:
    set $P5097, _lex_param_1["definedness"]
    unless_null $P5097, fallback4902
    nqp_get_sc_object $P5099, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5097, $P5099
  fallback4902:
    set $P5106, $P5097
    unless $P5097 goto if1547_end4900 
.annotate 'line', 2491
    unless_null _lex_param_1, fallback4903
    nqp_get_sc_object $P5102, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5102
  fallback4903:
    set $P5101, _lex_param_1["definedness"]
    unless_null $P5101, fallback4904
    nqp_get_sc_object $P5103, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5101, $P5103
  fallback4904:
    set $P5100, $P5101[0]
    unless_null $P5100, fallback4905
    nqp_get_sc_object $P5104, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5100, $P5104
  fallback4905:
    set $S5007, $P5100
    box $P5105, $S5007
    set $P102["definedness"], $P5105
    set $P5106, $P5105
  if1547_end4900:
.annotate 'line', 2495
    $P5107 = _lex_param_1."!make"($P102)
    .return ($P5107) 
.end
.HLL "nqp"
.namespace []
.sub "param_var" :subid("cuid_308_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2498
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$name", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
    set $S5001, _lex_param_1
    box $P5003, $S5001
    set $P101, $P5003
.annotate 'line', 2500
    get_hll_global $P5007, "GLOBAL"
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Var"]
    unless_null $P5004, fallback4906
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5004, $P5008
  fallback4906:
    $P5009 = $P5004."new"($P101 :named("name"), "lexical" :named("scope"), "param" :named("decl"), _lex_param_1 :named("node"))
    set $P102, $P5009
.annotate 'line', 2502
    find_dynamic_lex $P5010, "$*W"
    unless_null $P5010, fallback4907
    get_hll_global $P5013, "GLOBAL"
    get_who $P5012, $P5013
    set $P5011, $P5012["$W"]
    unless_null $P5011, fallback4908
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5011, $P5014
  fallback4908:
    unless_null $P5011, vivi_15484909
    die "Contextual $*W not found"
    box $P5015, "Contextual $*W not found"
    set $P5011, $P5015
  vivi_15484909:
    set $P5010, $P5011
  fallback4907:
    $P5016 = $P5010."cur_lexpad"()
    $P5017 = $P5016."symbol"($P101, "lexical" :named("scope"))
.annotate 'line', 2503
    $P5018 = _lex_param_1."!make"($P102)
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "named_param" :subid("cuid_309_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2506
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
.annotate 'line', 2507
    unless_null _lex_param_1, fallback4910
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5003
  fallback4910:
    set $P5002, _lex_param_1["param_var"]
    unless_null $P5002, fallback4911
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5002, $P5004
  fallback4911:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 2508
    unless_null _lex_param_1, fallback4912
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5008
  fallback4912:
    set $P5007, _lex_param_1["param_var"]
    unless_null $P5007, fallback4913
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5007, $P5009
  fallback4913:
    set $P5006, $P5007["name"]
    unless_null $P5006, fallback4914
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5006, $P5010
  fallback4914:
    set $S5001, $P5006
    $P5011 = $P101."named"($S5001)
.annotate 'line', 2509
    $P5012 = _lex_param_1."!make"($P101)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "typename" :subid("cuid_310_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2512
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5017 = 'cuid_456_1346968539.359' 
    capture_lex $P5017 
    .lex "@name", $P101 
    .lex "$found", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
.annotate 'line', 2516
    get_hll_global $P5006, "GLOBAL"
    nqp_get_package_through_who $P5005, $P5006, "HLL"
    get_who $P5004, $P5005
    set $P5003, $P5004["Compiler"]
    unless_null $P5003, fallback4915
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5003, $P5007
  fallback4915:
    set $S5001, _lex_param_1
    $P5008 = $P5003."parse_name"($S5001)
    set $P101, $P5008
    box $P5009, 0
    set $P102, $P5009
    new $P5012, 'ExceptionHandler'
    set_label $P5012, catch_handler_15514921
    $P5012.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5012
    .const 'Sub' $P5010 = 'cuid_456_1346968539.359' 
    capture_lex $P5010
    $P5011 = $P5010()
    set $P5013, $P5011
    pop_eh 
    goto skip_handler_15504920
  catch_handler_15514921:
    .get_results ($P5012) 
    set $I10001, 1
    set $P5012["handled"], $I10001
    nqp_get_sc_object $P10001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    finalize $P5012
    pop_upto_eh $P5012
    pop_eh 
    set $P5013, $P10001
    goto skip_handler_15504920
  skip_handler_15504920:
    set $P5016, $P102
    if $P102 goto unless1552_end4923 
.annotate 'line', 2523
.annotate 'line', 2524
    $P5014 = _lex_param_1."CURSOR"()
    set $S5004, _lex_param_1
    concat $S5003, "Use of undeclared type '", $S5004
    concat $S5002, $S5003, "'"
    $P5015 = $P5014."panic"($S5002)
    set $P5016, $P5015
  unless1552_end4923:
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_456_1346968539.359") :anon :lex :outer("cuid_310_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2518
    .lex "$sym", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
.annotate 'line', 2519
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback4916
    get_hll_global $P5005, "GLOBAL"
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback4917
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5003, $P5006
  fallback4917:
    unless_null $P5003, vivi_15494918
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_15494918:
    set $P5002, $P5003
  fallback4916:
    find_lex $P5008, "@name"
    $P5009 = $P5002."find_sym"($P5008)
    set $P101, $P5009
.annotate 'line', 2520
    find_dynamic_lex $P5010, "$/"
    get_hll_global $P5014, "GLOBAL"
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["WVal"]
    unless_null $P5011, fallback4919
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5011, $P5015
  fallback4919:
    $P5016 = $P5011."new"($P101 :named("value"))
    $P5017 = $P5010."!make"($P5016)
    box $P5018, 1
    store_lex "$found", $P5018
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "trait" :subid("cuid_311_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2528
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2529
    unless_null _lex_param_1, fallback4924
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback4924:
    set $P5001, _lex_param_1["trait_mod"]
    unless_null $P5001, fallback4925
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback4925:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "trait_mod:sym<is>" :subid("cuid_312_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2532
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5018 = 'cuid_458_1346968539.359' 
    capture_lex $P5018 
    .const 'Sub' $P5018 = 'cuid_460_1346968539.359' 
    capture_lex $P5018 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4928
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback4928:
    set $P5001, _lex_param_1["longname"]
    unless_null $P5001, fallback4929
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback4929:
    set $S5001, $P5001
    iseq $I5001, $S5001, "parrot_vtable"
    unless $I5001 goto if1553_else4926 
    .const 'Sub' $P5004 = 'cuid_458_1346968539.359' 
    capture_lex $P5004
    $P5005 = $P5004()
    set $P5017, $P5005
    goto if1553_end4927
  if1553_else4926:
    unless_null _lex_param_1, fallback4953
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5007
  fallback4953:
    set $P5006, _lex_param_1["longname"]
    unless_null $P5006, fallback4954
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5006, $P5008
  fallback4954:
    set $S5002, $P5006
    iseq $I5002, $S5002, "parrot_vtable_handler"
    unless $I5002 goto if1559_else4951 
    .const 'Sub' $P5009 = 'cuid_460_1346968539.359' 
    capture_lex $P5009
    $P5010 = $P5009()
    set $P5016, $P5010
    goto if1559_end4952
  if1559_else4951:
.annotate 'line', 2558
.annotate 'line', 2559
    $P5011 = _lex_param_1."CURSOR"()
    unless_null _lex_param_1, fallback4968
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5013
  fallback4968:
    set $P5012, _lex_param_1["longname"]
    unless_null $P5012, fallback4969
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5012, $P5014
  fallback4969:
    set $S5005, $P5012
    concat $S5004, "Trait '", $S5005
    concat $S5003, $S5004, "' not implemented"
    $P5015 = $P5011."panic"($S5003)
    set $P5016, $P5015
  if1559_end4952:
    set $P5017, $P5016
  if1553_end4927:
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_458_1346968539.359") :anon :lex :outer("cuid_312_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2533
    .const 'Sub' $P5040 = 'cuid_457_1346968539.359' 
    capture_lex $P5040 
    .lex "$cpast", $P101 
    .lex "$name", $P102 
    .lex "$package", $P103 
    .lex "$is_dispatcher", $P104 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P104, $P5004
.annotate 'line', 2535
    find_lex $P5007, "$/"
    unless_null $P5007, fallback4930
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5007, $P5008
  fallback4930:
    set $P5006, $P5007["circumfix"]
    unless_null $P5006, fallback4931
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5006, $P5009
  fallback4931:
    set $P5005, $P5006[0]
    unless_null $P5005, fallback4932
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5005, $P5010
  fallback4932:
    $P5011 = $P5005."ast"()
    set $P101, $P5011
.annotate 'line', 2537
    get_hll_global $P5015, "GLOBAL"
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["SVal"]
    unless_null $P5012, fallback4935
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5012, $P5016
  fallback4935:
    $P5017 = $P5012."ACCEPTS"($P101)
    set $P5021, $P5017
    if $P5017 goto unless1554_end4934 
.annotate 'line', 2536
    find_lex $P5018, "$/"
    $P5019 = $P5018."CURSOR"()
    $P5020 = $P5019."panic"("Trait 'parrot_vtable' requires constant scalar argument")
    set $P5021, $P5020
  unless1554_end4934:
.annotate 'line', 2538
    $P5022 = $P101."value"()
    set $P102, $P5022
    find_dynamic_lex $P5023, "$*PACKAGE"
    unless_null $P5023, fallback4936
    get_hll_global $P5026, "GLOBAL"
    get_who $P5025, $P5026
    set $P5024, $P5025["$PACKAGE"]
    unless_null $P5024, fallback4937
    nqp_get_sc_object $P5027, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5024, $P5027
  fallback4937:
    unless_null $P5024, vivi_15554938
    die "Contextual $*PACKAGE not found"
    box $P5028, "Contextual $*PACKAGE not found"
    set $P5024, $P5028
  vivi_15554938:
    set $P5023, $P5024
  fallback4936:
    set $P103, $P5023
    find_dynamic_lex $P5029, "$*SCOPE"
    unless_null $P5029, fallback4939
    get_hll_global $P5032, "GLOBAL"
    get_who $P5031, $P5032
    set $P5030, $P5031["$SCOPE"]
    unless_null $P5030, fallback4940
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5030, $P5033
  fallback4940:
    unless_null $P5030, vivi_15564941
    die "Contextual $*SCOPE not found"
    box $P5034, "Contextual $*SCOPE not found"
    set $P5030, $P5034
  vivi_15564941:
    set $P5029, $P5030
  fallback4939:
    set $S5001, $P5029
    iseq $I5001, $S5001, "proto"
    box $P5035, $I5001
    set $P104, $P5035
.annotate 'line', 2541
    find_dynamic_lex $P5036, "$/"
    .const 'Sub' $P5038 = 'cuid_457_1346968539.359' 
    capture_lex $P5038
    newclosure $P5037, $P5038
    $P5039 = $P5036."!make"($P5037)
    .return ($P5039) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_457_1346968539.359") :anon :lex :outer("cuid_458_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2541
    .param pmc _lex_param_0 
    .lex "$match", _lex_param_0 
.annotate 'line', 2542
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback4942
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback4943
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5002, $P5005
  fallback4943:
    unless_null $P5002, vivi_15574944
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_15574944:
    set $P5001, $P5002
  fallback4942:
    find_lex $P5007, "$package"
    find_lex $P5008, "$name"
.annotate 'line', 2543
    $P5011 = _lex_param_0."ast"()
    set $P5010, $P5011["code_obj"]
    unless_null $P5010, fallback4946
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5010, $P5012
  fallback4946:
    set $P5009, $P5010
    defined $I5001, $P5009
    if $I5001, defor4945
.annotate 'line', 2544
    find_dynamic_lex $P5013, "$*W"
    unless_null $P5013, fallback4947
    get_hll_global $P5016, "GLOBAL"
    get_who $P5015, $P5016
    set $P5014, $P5015["$W"]
    unless_null $P5014, fallback4948
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5014, $P5017
  fallback4948:
    unless_null $P5014, vivi_15584949
    die "Contextual $*W not found"
    box $P5018, "Contextual $*W not found"
    set $P5014, $P5018
  vivi_15584949:
    set $P5013, $P5014
  fallback4947:
    $P5020 = _lex_param_0."ast"()
    set $P5019, $P5020["block_past"]
    unless_null $P5019, fallback4950
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5019, $P5021
  fallback4950:
    find_lex $P5022, "$name"
    find_lex $P5023, "$is_dispatcher"
    $P5024 = $P5013."create_code"($P5019, $P5022, $P5023)
    set $P5009, $P5024
  defor4945:
    $P5025 = $P5001."pkg_add_method"($P5007, "add_parrot_vtable_mapping", $P5008, $P5009)
    .return ($P5025) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_460_1346968539.359") :anon :lex :outer("cuid_312_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2547
    .const 'Sub' $P5032 = 'cuid_459_1346968539.359' 
    capture_lex $P5032 
    .lex "$cpast", $P101 
    .lex "$name", $P102 
    .lex "$package", $P103 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P103, $P5003
.annotate 'line', 2549
    find_lex $P5006, "$/"
    unless_null $P5006, fallback4955
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5006, $P5007
  fallback4955:
    set $P5005, $P5006["circumfix"]
    unless_null $P5005, fallback4956
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5005, $P5008
  fallback4956:
    set $P5004, $P5005[0]
    unless_null $P5004, fallback4957
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5004, $P5009
  fallback4957:
    $P5010 = $P5004."ast"()
    set $P101, $P5010
.annotate 'line', 2551
    get_hll_global $P5014, "GLOBAL"
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback4960
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5011, $P5015
  fallback4960:
    $P5016 = $P5011."ACCEPTS"($P101)
    set $P5020, $P5016
    if $P5016 goto unless1560_end4959 
.annotate 'line', 2550
    find_lex $P5017, "$/"
    $P5018 = $P5017."CURSOR"()
    $P5019 = $P5018."panic"("Trait 'parrot_vtable_handler' requires constant scalar argument")
    set $P5020, $P5019
  unless1560_end4959:
.annotate 'line', 2552
    $P5021 = $P101."value"()
    set $P102, $P5021
    find_dynamic_lex $P5022, "$*PACKAGE"
    unless_null $P5022, fallback4961
    get_hll_global $P5025, "GLOBAL"
    get_who $P5024, $P5025
    set $P5023, $P5024["$PACKAGE"]
    unless_null $P5023, fallback4962
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5023, $P5026
  fallback4962:
    unless_null $P5023, vivi_15614963
    die "Contextual $*PACKAGE not found"
    box $P5027, "Contextual $*PACKAGE not found"
    set $P5023, $P5027
  vivi_15614963:
    set $P5022, $P5023
  fallback4961:
    set $P103, $P5022
.annotate 'line', 2554
    find_dynamic_lex $P5028, "$/"
    .const 'Sub' $P5030 = 'cuid_459_1346968539.359' 
    capture_lex $P5030
    newclosure $P5029, $P5030
    $P5031 = $P5028."!make"($P5029)
    .return ($P5031) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_459_1346968539.359") :anon :lex :outer("cuid_460_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2554
    .param pmc _lex_param_0 
    .lex "$match", _lex_param_0 
.annotate 'line', 2555
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback4964
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback4965
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5002, $P5005
  fallback4965:
    unless_null $P5002, vivi_15624966
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_15624966:
    set $P5001, $P5002
  fallback4964:
    find_lex $P5007, "$package"
    find_lex $P5008, "$name"
    set $P5009, _lex_param_0["variable"]
    unless_null $P5009, fallback4967
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5009, $P5010
  fallback4967:
    set $S5001, $P5009
    $P5011 = $P5001."pkg_add_parrot_vtable_handler_mapping"($P5007, $P5008, $S5001)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "regex_declarator" :subid("cuid_313_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2563
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :optional 
    .param int haz_param_4 :opt_flag 
    .const 'Sub' $P5052 = 'cuid_461_1346968539.359' 
    capture_lex $P5052 
    .const 'Sub' $P5052 = 'cuid_462_1346968539.359' 
    capture_lex $P5052 
    if haz_param_4, default5029
    nqp_get_sc_object $P5051, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_2, $P5051
  default5029:
    .lex "$name", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .lex "$key", _lex_param_2 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
.annotate 'line', 2564
    unless_null _lex_param_1, fallback4970
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5004
  fallback4970:
    set $P5003, _lex_param_1["deflongname"]
    unless_null $P5003, fallback4971
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5003, $P5005
  fallback4971:
    $P5006 = $P5003."ast"()
    set $S5001, $P5006
    box $P5007, $S5001
    set $P101, $P5007
    unless_null _lex_param_1, fallback4974
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5009
  fallback4974:
    set $P5008, _lex_param_1["proto"]
    unless_null $P5008, fallback4975
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5008, $P5010
  fallback4975:
    unless $P5008 goto if1563_else4972 
.annotate 'line', 2566
.annotate 'line', 2568
    get_hll_global $P5014, "GLOBAL"
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Stmts"]
    unless_null $P5011, fallback4976
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5011, $P5015
  fallback4976:
.annotate 'line', 2569
    get_hll_global $P5019, "GLOBAL"
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Block"]
    unless_null $P5016, fallback4977
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5016, $P5020
  fallback4977:
.annotate 'line', 2571
    get_hll_global $P5024, "GLOBAL"
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["Op"]
    unless_null $P5021, fallback4978
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5021, $P5025
  fallback4978:
.annotate 'line', 2572
    get_hll_global $P5029, "GLOBAL"
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Var"]
    unless_null $P5026, fallback4979
    nqp_get_sc_object $P5030, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5026, $P5030
  fallback4979:
    $P5031 = $P5026."new"("self" :named("name"), "local" :named("scope"), "param" :named("decl"))
.annotate 'line', 2573
    get_hll_global $P5035, "GLOBAL"
    nqp_get_package_through_who $P5034, $P5035, "QAST"
    get_who $P5033, $P5034
    set $P5032, $P5033["SVal"]
    unless_null $P5032, fallback4980
    nqp_get_sc_object $P5036, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5032, $P5036
  fallback4980:
    $P5037 = $P5032."new"($P101 :named("value"))
    $P5038 = $P5021."new"($P5031, $P5037, "!protoregex" :named("name"), "callmethod" :named("op"))
    $P5039 = $P5016."new"($P5038, $P101 :named("name"), "declaration" :named("blocktype"), _lex_param_1 :named("node"))
    $P5040 = $P5011."new"($P5039)
    set $P102, $P5040
    $P5044 = $P102."list"()
    set $P5041, $P5044
    iter $P5043, $P5044
  for_next4990:
    unless $P5043, for_done4992
    shift $P5046, $P5043
  for_redo4991:
    .const 'Sub' $P5045 = 'cuid_461_1346968539.359' 
    capture_lex $P5045
    $P5041 = $P5045($P5046)
    goto for_next4990
  for_done4992:
    set $P5049, $P5041
    goto if1563_end4973
  if1563_else4972:
    .const 'Sub' $P5047 = 'cuid_462_1346968539.359' 
    capture_lex $P5047
    $P5048 = $P5047()
    set $P5049, $P5048
  if1563_end4973:
.annotate 'line', 2611
    $P5050 = _lex_param_1."!make"($P102)
    .return ($P5050) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_461_1346968539.359") :anon :lex :outer("cuid_313_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2581
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 2582
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback4981
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback4982
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5002, $P5005
  fallback4982:
    unless_null $P5002, vivi_15644983
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_15644983:
    set $P5001, $P5002
  fallback4981:
    find_dynamic_lex $P5007, "$*PACKAGE"
    unless_null $P5007, fallback4984
    get_hll_global $P5010, "GLOBAL"
    get_who $P5009, $P5010
    set $P5008, $P5009["$PACKAGE"]
    unless_null $P5008, fallback4985
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5008, $P5011
  fallback4985:
    unless_null $P5008, vivi_15654986
    die "Contextual $*PACKAGE not found"
    box $P5012, "Contextual $*PACKAGE not found"
    set $P5008, $P5012
  vivi_15654986:
    set $P5007, $P5008
  fallback4984:
    $P5013 = _lex_param_0."name"()
    find_dynamic_lex $P5014, "$*W"
    unless_null $P5014, fallback4987
    get_hll_global $P5017, "GLOBAL"
    get_who $P5016, $P5017
    set $P5015, $P5016["$W"]
    unless_null $P5015, fallback4988
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5015, $P5018
  fallback4988:
    unless_null $P5015, vivi_15664989
    die "Contextual $*W not found"
    box $P5019, "Contextual $*W not found"
    set $P5015, $P5019
  vivi_15664989:
    set $P5014, $P5015
  fallback4987:
    $P5020 = _lex_param_0."name"()
    $P5021 = $P5014."create_code"(_lex_param_0, $P5020, 0)
    $P5022 = $P5001."pkg_add_method"($P5007, "add_method", $P5013, $P5021)
    .return ($P5022) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_462_1346968539.359") :anon :lex :outer("cuid_313_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2585
    .lex "$block", $P101 
    .lex "$regex", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
.annotate 'line', 2586
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4993
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4994
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5004, $P5007
  fallback4994:
    unless_null $P5004, vivi_15674995
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_15674995:
    set $P5003, $P5004
  fallback4993:
    $P5009 = $P5003."pop_lexpad"()
    set $P101, $P5009
.annotate 'line', 2587
    set $P5010, $P101[0]
    unless_null $P5010, fallback4996
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5010, $P5011
  fallback4996:
    get_hll_global $P5015, "GLOBAL"
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Var"]
    unless_null $P5012, fallback4997
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5012, $P5016
  fallback4997:
    $P5017 = $P5012."new"("self" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5018 = $P5010."unshift"($P5017)
.annotate 'line', 2588
    set $P5019, $P101[0]
    unless_null $P5019, fallback4998
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5019, $P5020
  fallback4998:
    get_hll_global $P5024, "GLOBAL"
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["Op"]
    unless_null $P5021, fallback4999
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5021, $P5025
  fallback4999:
.annotate 'line', 2590
    get_hll_global $P5029, "GLOBAL"
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Var"]
    unless_null $P5026, fallback5000
    nqp_get_sc_object $P5030, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5026, $P5030
  fallback5000:
    $P5031 = $P5026."new"("self" :named("name"), "local" :named("scope"), "var" :named("decl"))
.annotate 'line', 2591
    get_hll_global $P5035, "GLOBAL"
    nqp_get_package_through_who $P5034, $P5035, "QAST"
    get_who $P5033, $P5034
    set $P5032, $P5033["Var"]
    unless_null $P5032, fallback5001
    nqp_get_sc_object $P5036, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5032, $P5036
  fallback5001:
    $P5037 = $P5032."new"("self" :named("name"), "lexical" :named("scope"))
    $P5038 = $P5021."new"($P5031, $P5037, "bind" :named("op"))
    $P5039 = $P5019."push"($P5038)
.annotate 'line', 2592
    set $P5040, $P101[0]
    unless_null $P5040, fallback5002
    nqp_get_sc_object $P5041, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5040, $P5041
  fallback5002:
    get_hll_global $P5045, "GLOBAL"
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["Var"]
    unless_null $P5042, fallback5003
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5042, $P5046
  fallback5003:
    $P5047 = $P5042."new"(utf8:"$\x{a2}" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5048 = $P5040."push"($P5047)
.annotate 'line', 2593
    set $P5049, $P101[0]
    unless_null $P5049, fallback5004
    nqp_get_sc_object $P5050, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5049, $P5050
  fallback5004:
    get_hll_global $P5054, "GLOBAL"
    nqp_get_package_through_who $P5053, $P5054, "QAST"
    get_who $P5052, $P5053
    set $P5051, $P5052["Var"]
    unless_null $P5051, fallback5005
    nqp_get_sc_object $P5055, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5051, $P5055
  fallback5005:
    $P5056 = $P5051."new"("$/" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5057 = $P5049."push"($P5056)
.annotate 'line', 2594
    $P5058 = $P101."symbol"(utf8:"$\x{a2}", "lexical" :named("scope"))
.annotate 'line', 2595
    $P5059 = $P101."symbol"("$/", "lexical" :named("scope"))
.annotate 'line', 2596
    find_lex $P5068, "$/"
    unless_null $P5068, fallback5007
    nqp_get_sc_object $P5069, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5068, $P5069
  fallback5007:
    set $P5067, $P5068["p6regex"]
    unless_null $P5067, fallback5008
    nqp_get_sc_object $P5070, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5067, $P5070
  fallback5008:
    $P5071 = $P5067."ast"()
    get_hll_global $P5065, "GLOBAL"
    nqp_get_package_through_who $P5064, $P5065, "QRegex"
    nqp_get_package_through_who $P5063, $P5064, "P6Regex"
    nqp_get_package_through_who $P5062, $P5063, "Actions"
    get_who $P5061, $P5062
    set $P5060, $P5061["qbuildsub"]
    unless_null $P5060, fallback5006
    nqp_get_sc_object $P5066, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5060, $P5066
  fallback5006:
    $P5072 = $P5060($P5071, $P101)
    set $P102, $P5072
.annotate 'line', 2597
    find_lex $P5073, "$name"
    $P5074 = $P102."name"($P5073)
    find_dynamic_lex $P5075, "$*PKGDECL"
    unless_null $P5075, fallback5013
    get_hll_global $P5078, "GLOBAL"
    get_who $P5077, $P5078
    set $P5076, $P5077["$PKGDECL"]
    unless_null $P5076, fallback5014
    nqp_get_sc_object $P5079, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5076, $P5079
  fallback5014:
    unless_null $P5076, vivi_15705015
    die "Contextual $*PKGDECL not found"
    box $P5080, "Contextual $*PKGDECL not found"
    set $P5076, $P5080
  vivi_15705015:
    set $P5075, $P5076
  fallback5013:
    set $P5088, $P5075
    unless $P5075 goto if1569_end5012 
    find_dynamic_lex $P5082, "$*PACKAGE"
    unless_null $P5082, fallback5016
    get_hll_global $P5085, "GLOBAL"
    get_who $P5084, $P5085
    set $P5083, $P5084["$PACKAGE"]
    unless_null $P5083, fallback5017
    nqp_get_sc_object $P5086, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5083, $P5086
  fallback5017:
    unless_null $P5083, vivi_15715018
    die "Contextual $*PACKAGE not found"
    box $P5087, "Contextual $*PACKAGE not found"
    set $P5083, $P5087
  vivi_15715018:
    set $P5082, $P5083
  fallback5016:
    get_how $P5081, $P5082
    can $I5001, $P5081, "add_method"
    box $P5089, $I5001
    set $P5088, $P5089
  if1569_end5012:
    set $P5112, $P5088
    unless $P5088 goto if1568_end5010 
.annotate 'line', 2599
.annotate 'line', 2601
    find_dynamic_lex $P5090, "$*W"
    unless_null $P5090, fallback5019
    get_hll_global $P5093, "GLOBAL"
    get_who $P5092, $P5093
    set $P5091, $P5092["$W"]
    unless_null $P5091, fallback5020
    nqp_get_sc_object $P5094, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5091, $P5094
  fallback5020:
    unless_null $P5091, vivi_15725021
    die "Contextual $*W not found"
    box $P5095, "Contextual $*W not found"
    set $P5091, $P5095
  vivi_15725021:
    set $P5090, $P5091
  fallback5019:
    find_dynamic_lex $P5096, "$*PACKAGE"
    unless_null $P5096, fallback5022
    get_hll_global $P5099, "GLOBAL"
    get_who $P5098, $P5099
    set $P5097, $P5098["$PACKAGE"]
    unless_null $P5097, fallback5023
    nqp_get_sc_object $P5100, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5097, $P5100
  fallback5023:
    unless_null $P5097, vivi_15735024
    die "Contextual $*PACKAGE not found"
    box $P5101, "Contextual $*PACKAGE not found"
    set $P5097, $P5101
  vivi_15735024:
    set $P5096, $P5097
  fallback5022:
    find_lex $P5102, "$name"
    find_dynamic_lex $P5103, "$*W"
    unless_null $P5103, fallback5025
    get_hll_global $P5106, "GLOBAL"
    get_who $P5105, $P5106
    set $P5104, $P5105["$W"]
    unless_null $P5104, fallback5026
    nqp_get_sc_object $P5107, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5104, $P5107
  fallback5026:
    unless_null $P5104, vivi_15745027
    die "Contextual $*W not found"
    box $P5108, "Contextual $*W not found"
    set $P5104, $P5108
  vivi_15745027:
    set $P5103, $P5104
  fallback5025:
    find_lex $P5109, "$name"
    $P5110 = $P5103."create_code"($P102, $P5109, 0)
    $P5111 = $P5090."pkg_add_method"($P5096, "add_method", $P5102, $P5110)
    set $P5112, $P5111
  if1568_end5010:
.annotate 'line', 2605
    get_hll_global $P5116, "GLOBAL"
    nqp_get_package_through_who $P5115, $P5116, "QAST"
    get_who $P5114, $P5115
    set $P5113, $P5114["Op"]
    unless_null $P5113, fallback5028
    nqp_get_sc_object $P5117, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5113, $P5117
  fallback5028:
.annotate 'line', 2607
    new $P5118, 'ResizablePMCArray'
    box $P5119, "NQPRegexMethod"
    push $P5118, $P5119
    find_lex $P5120, "$/"
    $P5121 = "&lexical_package_lookup"($P5118, $P5120)
    $P5122 = $P5113."new"($P5121, $P102, "callmethod" :named("op"), "new" :named("name"))
    store_lex "$past", $P5122
    find_lex $P5123, "$past"
    set $P5123["sink"], $P102
    .return ($P102) 
.end
.HLL "nqp"
.namespace []
.sub "dotty" :subid("cuid_314_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2615
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    unless_null _lex_param_1, fallback5032
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5003
  fallback5032:
    set $P5002, _lex_param_1["args"]
    unless_null $P5002, fallback5033
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5002, $P5004
  fallback5033:
    unless $P5002 goto if1575_else5030 
.annotate 'line', 2616
    unless_null _lex_param_1, fallback5034
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5007
  fallback5034:
    set $P5006, _lex_param_1["args"]
    unless_null $P5006, fallback5035
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5006, $P5008
  fallback5035:
    set $P5005, $P5006[0]
    unless_null $P5005, fallback5036
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5005, $P5009
  fallback5036:
    $P5010 = $P5005."ast"()
    set $P5017, $P5010
    goto if1575_end5031
  if1575_else5030:
    get_hll_global $P5014, "GLOBAL"
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback5037
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5011, $P5015
  fallback5037:
    $P5016 = $P5011."new"(_lex_param_1 :named("node"))
    set $P5017, $P5016
  if1575_end5031:
    set $P101, $P5017
    unless_null _lex_param_1, fallback5040
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5019
  fallback5040:
    set $P5018, _lex_param_1["quote"]
    unless_null $P5018, fallback5041
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5018, $P5020
  fallback5041:
    unless $P5018 goto if1576_else5038 
.annotate 'line', 2617
.annotate 'line', 2618
    unless_null _lex_param_1, fallback5042
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5022
  fallback5042:
    set $P5021, _lex_param_1["quote"]
    unless_null $P5021, fallback5043
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5021, $P5023
  fallback5043:
    $P5024 = $P5021."ast"()
    $P5025 = $P101."unshift"($P5024)
.annotate 'line', 2619
    $P5026 = $P101."op"("callmethod")
    set $P5052, $P5026
    goto if1576_end5039
  if1576_else5038:
    unless_null _lex_param_1, fallback5046
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5028
  fallback5046:
    set $P5027, _lex_param_1["longname"]
    unless_null $P5027, fallback5047
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5027, $P5029
  fallback5047:
    set $S5001, $P5027
    iseq $I5001, $S5001, "HOW"
    unless $I5001 goto if1577_else5044 
.annotate 'line', 2621
.annotate 'line', 2622
    $P5030 = $P101."op"("how")
    set $P5051, $P5030
    goto if1577_end5045
  if1577_else5044:
    unless_null _lex_param_1, fallback5050
    nqp_get_sc_object $P5032, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5032
  fallback5050:
    set $P5031, _lex_param_1["longname"]
    unless_null $P5031, fallback5051
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5031, $P5033
  fallback5051:
    set $S5002, $P5031
    iseq $I5002, $S5002, "WHAT"
    unless $I5002 goto if1578_else5048 
.annotate 'line', 2624
.annotate 'line', 2625
    $P5034 = $P101."op"("what")
    set $P5050, $P5034
    goto if1578_end5049
  if1578_else5048:
    unless_null _lex_param_1, fallback5054
    nqp_get_sc_object $P5036, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5036
  fallback5054:
    set $P5035, _lex_param_1["longname"]
    unless_null $P5035, fallback5055
    nqp_get_sc_object $P5037, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5035, $P5037
  fallback5055:
    set $S5003, $P5035
    iseq $I5003, $S5003, "WHO"
    unless $I5003 goto if1579_else5052 
.annotate 'line', 2627
.annotate 'line', 2628
    $P5038 = $P101."op"("who")
    set $P5049, $P5038
    goto if1579_end5053
  if1579_else5052:
    unless_null _lex_param_1, fallback5058
    nqp_get_sc_object $P5040, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5040
  fallback5058:
    set $P5039, _lex_param_1["longname"]
    unless_null $P5039, fallback5059
    nqp_get_sc_object $P5041, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5039, $P5041
  fallback5059:
    set $S5004, $P5039
    iseq $I5004, $S5004, "REPR"
    unless $I5004 goto if1580_else5056 
.annotate 'line', 2630
.annotate 'line', 2631
    $P5042 = $P101."op"("reprname")
    set $P5048, $P5042
    goto if1580_end5057
  if1580_else5056:
.annotate 'line', 2633
.annotate 'line', 2634
    unless_null _lex_param_1, fallback5060
    nqp_get_sc_object $P5044, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5044
  fallback5060:
    set $P5043, _lex_param_1["longname"]
    unless_null $P5043, fallback5061
    nqp_get_sc_object $P5045, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5043, $P5045
  fallback5061:
    set $S5005, $P5043
    $P5046 = $P101."name"($S5005)
.annotate 'line', 2635
    $P5047 = $P101."op"("callmethod")
    set $P5048, $P5047
  if1580_end5057:
    set $P5049, $P5048
  if1579_end5053:
    set $P5050, $P5049
  if1578_end5049:
    set $P5051, $P5050
  if1577_end5045:
    set $P5052, $P5051
  if1576_end5039:
.annotate 'line', 2637
    $P5053 = _lex_param_1."!make"($P101)
    .return ($P5053) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<self>" :subid("cuid_315_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2642
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2643
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VM"]
    unless_null $P5001, fallback5062
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5005
  fallback5062:
.annotate 'line', 2644
    get_hll_global $P5009, "GLOBAL"
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Var"]
    unless_null $P5006, fallback5063
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5006, $P5010
  fallback5063:
    $P5011 = $P5006."new"("self" :named("name"), "lexical" :named("scope"))
    $P5012 = $P5001."new"($P5011, "nqp_decontainerize PP" :named("pirop"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<identifier>" :subid("cuid_316_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2647
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
.annotate 'line', 2648
    unless_null _lex_param_1, fallback5064
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5003
  fallback5064:
    set $P5002, _lex_param_1["args"]
    unless_null $P5002, fallback5065
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5002, $P5004
  fallback5065:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 2649
    unless_null _lex_param_1, fallback5066
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5007
  fallback5066:
    set $P5006, _lex_param_1["deflongname"]
    unless_null $P5006, fallback5067
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5006, $P5008
  fallback5067:
    set $S5002, $P5006
    concat $S5001, "&", $S5002
    $P5009 = $P101."name"($S5001)
.annotate 'line', 2650
    $P5010 = _lex_param_1."!make"($P101)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<name>" :subid("cuid_317_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2653
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5051 = 'cuid_463_1346968539.359' 
    capture_lex $P5051 
    .const 'Sub' $P5051 = 'cuid_464_1346968539.359' 
    capture_lex $P5051 
    .lex "$var", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
.annotate 'line', 2656
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback5070
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback5071
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5004, $P5007
  fallback5071:
    unless_null $P5004, vivi_15825072
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_15825072:
    set $P5003, $P5004
  fallback5070:
    unless_null _lex_param_1, fallback5073
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5010
  fallback5073:
    set $P5009, _lex_param_1["name"]
    unless_null $P5009, fallback5074
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5009, $P5011
  fallback5074:
    set $S5001, $P5009
    $P5012 = $P5003."is_lexical"($S5001)
    unless $P5012 goto if1581_else5068 
    new $P5034, 'ExceptionHandler'
    set_label $P5034, catch_handler_15875087
    $P5034.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5034
.annotate 'line', 2657
    new $P5032, 'ExceptionHandler'
    set_label $P5032, catch_handler_15855082
    $P5032.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5032
.annotate 'line', 2658
    get_hll_global $P5016, "GLOBAL"
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["WVal"]
    unless_null $P5013, fallback5075
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5013, $P5017
  fallback5075:
    find_dynamic_lex $P5018, "$*W"
    unless_null $P5018, fallback5076
    get_hll_global $P5021, "GLOBAL"
    get_who $P5020, $P5021
    set $P5019, $P5020["$W"]
    unless_null $P5019, fallback5077
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5019, $P5022
  fallback5077:
    unless_null $P5019, vivi_15835078
    die "Contextual $*W not found"
    box $P5023, "Contextual $*W not found"
    set $P5019, $P5023
  vivi_15835078:
    set $P5018, $P5019
  fallback5076:
    new $P5024, 'ResizablePMCArray'
    unless_null _lex_param_1, fallback5079
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5026
  fallback5079:
    set $P5025, _lex_param_1["name"]
    unless_null $P5025, fallback5080
    nqp_get_sc_object $P5027, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5025, $P5027
  fallback5080:
    set $S5002, $P5025
    box $P5028, $S5002
    push $P5024, $P5028
    $P5029 = $P5018."find_sym"($P5024)
    $P5030 = $P5013."new"($P5029 :named("value"))
    set $P101, $P5030
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5033, $P5031
    pop_eh 
    goto skip_handler_15845081
  catch_handler_15855082:
    .get_results ($P5032) 
    .const 'Sub' $P10001 = 'cuid_463_1346968539.359' 
    capture_lex $P10001
    $P10002 = $P10001($P5032)
    set $I10001, 1
    set $P5032["handled"], $I10001
    nqp_get_sc_object $P10003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    finalize $P5032
    pop_upto_eh $P5032
    pop_eh 
    set $P5033, $P10003
    goto skip_handler_15845081
  skip_handler_15845081:
    set $P5035, $P5033
    pop_eh 
    goto skip_handler_15865086
  catch_handler_15875087:
    .get_results ($P5034) 
    set $I10001, 1
    set $P5034["handled"], $I10001
    nqp_get_sc_object $P10001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    finalize $P5034
    pop_upto_eh $P5034
    pop_eh 
    set $P5035, $P10001
    goto skip_handler_15865086
  skip_handler_15865086:
    set $P5038, $P5035
    goto if1581_end5069
  if1581_else5068:
    .const 'Sub' $P5036 = 'cuid_464_1346968539.359' 
    capture_lex $P5036
    $P5037 = $P5036()
    set $P5038, $P5037
  if1581_end5069:
    set $P102, $P101
    unless_null _lex_param_1, fallback5093
    nqp_get_sc_object $P5040, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5040
  fallback5093:
    set $P5039, _lex_param_1["args"]
    unless_null $P5039, fallback5094
    nqp_get_sc_object $P5041, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5039, $P5041
  fallback5094:
    set $P5049, $P5039
    unless $P5039 goto if1588_end5092 
.annotate 'line', 2671
.annotate 'line', 2672
    unless_null _lex_param_1, fallback5095
    nqp_get_sc_object $P5044, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5044
  fallback5095:
    set $P5043, _lex_param_1["args"]
    unless_null $P5043, fallback5096
    nqp_get_sc_object $P5045, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5043, $P5045
  fallback5096:
    set $P5042, $P5043[0]
    unless_null $P5042, fallback5097
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5042, $P5046
  fallback5097:
    $P5047 = $P5042."ast"()
    set $P102, $P5047
.annotate 'line', 2673
    $P5048 = $P102."unshift"($P101)
    set $P5049, $P5048
  if1588_end5092:
.annotate 'line', 2675
    $P5050 = _lex_param_1."!make"($P102)
    .return ($P5050) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_463_1346968539.359") :anon :lex :outer("cuid_317_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2659
    .param pmc _lex_param_0 
    .lex "$!", $P101 
    .lex "$_", _lex_param_0 
    set $P101, _lex_param_0
.annotate 'line', 2660
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Var"]
    unless_null $P5001, fallback5083
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5005
  fallback5083:
    find_lex $P5007, "$/"
    unless_null $P5007, fallback5084
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5007, $P5008
  fallback5084:
    set $P5006, $P5007["name"]
    unless_null $P5006, fallback5085
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5006, $P5009
  fallback5085:
    set $S5001, $P5006
    $P5010 = $P5001."new"($S5001 :named("name"), "lexical" :named("scope"))
    store_lex "$var", $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_464_1346968539.359") :anon :lex :outer("cuid_317_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2664
    .lex "@ns", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    find_lex $P5005, "$/"
    unless_null $P5005, fallback5088
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5005, $P5006
  fallback5088:
    set $P5004, $P5005["name"]
    unless_null $P5004, fallback5089
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5004, $P5007
  fallback5089:
    set $P5003, $P5004["identifier"]
    unless_null $P5003, fallback5090
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5003, $P5008
  fallback5090:
    clone $P5002, $P5003
    set $P101, $P5002
.annotate 'line', 2666
    find_lex $P5009, "$/"
    $P5010 = "&lexical_package_lookup"($P101, $P5009)
    store_lex "$var", $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::op>" :subid("cuid_318_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2678
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "@args", $P101 
    .lex "$pirop", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
    unless_null _lex_param_1, fallback5100
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5004
  fallback5100:
    set $P5003, _lex_param_1["args"]
    unless_null $P5003, fallback5101
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5003, $P5005
  fallback5101:
    unless $P5003 goto if1589_else5098 
.annotate 'line', 2679
    unless_null _lex_param_1, fallback5102
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5008
  fallback5102:
    set $P5007, _lex_param_1["args"]
    unless_null $P5007, fallback5103
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5007, $P5009
  fallback5103:
    set $P5006, $P5007[0]
    unless_null $P5006, fallback5104
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5006, $P5010
  fallback5104:
    $P5011 = $P5006."ast"()
    $P5012 = $P5011."list"()
    set $P5014, $P5012
    goto if1589_end5099
  if1589_else5098:
    new $P5013, 'ResizablePMCArray'
    set $P5014, $P5013
  if1589_end5099:
    set $P101, $P5014
    unless_null _lex_param_1, fallback5105
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5016
  fallback5105:
    set $P5015, _lex_param_1["op"]
    unless_null $P5015, fallback5106
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5015, $P5017
  fallback5106:
    set $S5001, $P5015
    box $P5018, $S5001
    set $P102, $P5018
    set $S5003, $P102
    split $P5019, "__", $S5003
    join $S5002, " ", $P5019
    box $P5020, $S5002
    set $P102, $P5020
.annotate 'line', 2682
    get_hll_global $P5024, "GLOBAL"
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["VM"]
    unless_null $P5021, fallback5107
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5021, $P5025
  fallback5107:
    $P5026 = $P5021."new"($P101 :flat, $P102 :named("pirop"), _lex_param_1 :named("node"))
    $P5027 = _lex_param_1."!make"($P5026)
    .return ($P5027) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::const>" :subid("cuid_319_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2685
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2686
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VM"]
    unless_null $P5001, fallback5108
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5005
  fallback5108:
    unless_null _lex_param_1, fallback5109
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5007
  fallback5109:
    set $P5006, _lex_param_1["const"]
    unless_null $P5006, fallback5110
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5006, $P5008
  fallback5110:
    set $S5001, $P5006
    $P5009 = $P5001."new"($S5001 :named("pirconst"))
    $P5010 = _lex_param_1."!make"($P5009)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<nqp::op>" :subid("cuid_320_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2689
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$op", $P101 
    .lex "@args", $P102 
    .lex "$past", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P103, $P5003
    unless_null _lex_param_1, fallback5111
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5005
  fallback5111:
    set $P5004, _lex_param_1["op"]
    unless_null $P5004, fallback5112
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5004, $P5006
  fallback5112:
    set $S5001, $P5004
    box $P5007, $S5001
    set $P101, $P5007
    unless_null _lex_param_1, fallback5115
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5009
  fallback5115:
    set $P5008, _lex_param_1["args"]
    unless_null $P5008, fallback5116
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5008, $P5010
  fallback5116:
    unless $P5008 goto if1590_else5113 
.annotate 'line', 2691
    unless_null _lex_param_1, fallback5117
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5013
  fallback5117:
    set $P5012, _lex_param_1["args"]
    unless_null $P5012, fallback5118
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5012, $P5014
  fallback5118:
    set $P5011, $P5012[0]
    unless_null $P5011, fallback5119
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5011, $P5015
  fallback5119:
    $P5016 = $P5011."ast"()
    $P5017 = $P5016."list"()
    set $P5019, $P5017
    goto if1590_end5114
  if1590_else5113:
    new $P5018, 'ResizablePMCArray'
    set $P5019, $P5018
  if1590_end5114:
    set $P102, $P5019
.annotate 'line', 2692
    get_hll_global $P5023, "GLOBAL"
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback5120
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5020, $P5024
  fallback5120:
    $P5025 = $P5020."new"($P102 :flat, $P101 :named("op"), _lex_param_1 :named("node"))
    set $P103, $P5025
.annotate 'line', 2693
    $P5026 = _lex_param_1."!make"($P103)
    .return ($P5026) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<onlystar>" :subid("cuid_321_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2696
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2697
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5121
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5005
  fallback5121:
    $P5006 = $P5001."new"("nqpmultidispatch" :named("op"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "args" :subid("cuid_322_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2700
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5122
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback5122:
    set $P5001, _lex_param_1["arglist"]
    unless_null $P5001, fallback5123
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback5123:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "arglist" :subid("cuid_323_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2702
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5056 = 'cuid_466_1346968539.359' 
    capture_lex $P5056 
    .lex "$past", $P101 
    .lex "$i", $P102 
    .lex "$n", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc tmp_2 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P103, $P5003
.annotate 'line', 2703
    get_hll_global $P5007, "GLOBAL"
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Op"]
    unless_null $P5004, fallback5124
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5004, $P5008
  fallback5124:
    $P5009 = $P5004."new"("call" :named("op"), _lex_param_1 :named("node"))
    set $P101, $P5009
    unless_null _lex_param_1, fallback5127
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5011
  fallback5127:
    set $P5010, _lex_param_1["EXPR"]
    unless_null $P5010, fallback5128
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5010, $P5012
  fallback5128:
    set $P5015, $P5010
    unless $P5010 goto if1591_end5126 
    .const 'Sub' $P5013 = 'cuid_466_1346968539.359' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5015, $P5014
  if1591_end5126:
    box $P5016, 0
    set $P102, $P5016
.annotate 'line', 2712
    $P5017 = $P101."list"()
    set $N5001, $P5017
    box $P5018, $N5001
    set $P103, $P5018
  while1595_test5141:
    set $N5002, $P102
    set $N5003, $P103
    islt $I5001, $N5002, $N5003
    box $P5054, $I5001
    set $P5053, $P5054
    unless $I5001 goto while1595_done5145 
  while1595_redo5143:
.annotate 'line', 2713
    set $I5003, $P102
    set $P5019, $P101[$I5003]
    unless_null $P5019, fallback5150
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5019, $P5020
  fallback5150:
    get_hll_global $P5024, "GLOBAL"
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["Op"]
    unless_null $P5021, fallback5151
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5021, $P5025
  fallback5151:
    type_check $I5002, $P5019, $P5021
    set $I5006, $I5002
    unless $I5002 goto if1597_end5149 
.annotate 'line', 2714
    set $I5005, $P102
    set $P5026, $P101[$I5005]
    unless_null $P5026, fallback5152
    nqp_get_sc_object $P5027, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5026, $P5027
  fallback5152:
    $P5028 = $P5026."name"()
    set $S5001, $P5028
    iseq $I5004, $S5001, "&prefix:<|>"
    set $I5006, $I5004
  if1597_end5149:
    box $P5052, $I5006
    set $P5051, $P5052
    unless $I5006 goto if1596_end5147 
    set $I5007, $P102
    set $I5008, $P102
    set $P5030, $P101[$I5008]
    unless_null $P5030, fallback5153
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5030, $P5031
  fallback5153:
    set $P5029, $P5030[0]
    unless_null $P5029, fallback5154
    nqp_get_sc_object $P5032, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5029, $P5032
  fallback5154:
    set $P101[$I5007], $P5029
.annotate 'line', 2716
    set $I5009, $P102
    set $P5033, $P101[$I5009]
    unless_null $P5033, fallback5155
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5033, $P5034
  fallback5155:
    $P5035 = $P5033."flat"(1)
    set $I5011, $P102
    set $P5036, $P101[$I5011]
    unless_null $P5036, fallback5160
    nqp_get_sc_object $P5037, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5036, $P5037
  fallback5160:
    get_hll_global $P5041, "GLOBAL"
    nqp_get_package_through_who $P5040, $P5041, "QAST"
    get_who $P5039, $P5040
    set $P5038, $P5039["Var"]
    unless_null $P5038, fallback5161
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5038, $P5042
  fallback5161:
    type_check $I5010, $P5036, $P5038
    set $I5014, $I5010
    unless $I5010 goto if1599_end5159 
.annotate 'line', 2718
    set $I5013, $P102
    set $P5043, $P101[$I5013]
    unless_null $P5043, fallback5162
    nqp_get_sc_object $P5044, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5043, $P5044
  fallback5162:
    $P5045 = $P5043."name"()
    set $S5003, $P5045
    substr $S5002, $S5003, 0, 1
    iseq $I5012, $S5002, "%"
    set $I5014, $I5012
  if1599_end5159:
    box $P5050, $I5014
    set $P5049, $P5050
    unless $I5014 goto if1598_end5157 
.annotate 'line', 2717
    set $I5015, $P102
    set $P5046, $P101[$I5015]
    unless_null $P5046, fallback5163
    nqp_get_sc_object $P5047, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5046, $P5047
  fallback5163:
    $P5048 = $P5046."named"(1)
    set $P5049, $P5048
  if1598_end5157:
    set $P5051, $P5049
  if1596_end5147:
    set tmp_2, $P102
    set $N5005, tmp_2
    set $N5006, 1
    add $N5004, $N5005, $N5006
    box $P5053, $N5004
    set $P102, $P5053
    set $P5053, tmp_2
    goto while1595_test5141 
  while1595_done5145:
.annotate 'line', 2722
    $P5055 = _lex_param_1."!make"($P101)
    .return ($P5055) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_466_1346968539.359") :anon :lex :outer("cuid_323_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2704
    .const 'Sub' $P5023 = 'cuid_465_1346968539.359' 
    capture_lex $P5023 
    .lex "$expr", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
.annotate 'line', 2705
    find_lex $P5003, "$/"
    unless_null $P5003, fallback5129
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5003, $P5004
  fallback5129:
    set $P5002, $P5003["EXPR"]
    unless_null $P5002, fallback5130
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5002, $P5005
  fallback5130:
    $P5006 = $P5002."ast"()
    set $P101, $P5006
    get_hll_global $P5010, "GLOBAL"
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Op"]
    unless_null $P5007, fallback5137
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5007, $P5011
  fallback5137:
    type_check $I5001, $P101, $P5007
    set $I5003, $I5001
    unless $I5001 goto if1594_end5136 
.annotate 'line', 2706
    $P5012 = $P101."name"()
    set $S5001, $P5012
    iseq $I5002, $S5001, "&infix:<,>"
    set $I5003, $I5002
  if1594_end5136:
    set $I5005, $I5003
    unless $I5003 goto if1593_end5134 
    $P5013 = $P101."named"()
    isfalse $I5004, $P5013
    set $I5005, $I5004
  if1593_end5134:
    unless $I5005 goto if1592_else5131 
.annotate 'line', 2707
    $P5017 = $P101."list"()
    set $P5014, $P5017
    iter $P5016, $P5017
  for_next5138:
    unless $P5016, for_done5140
    shift $P5019, $P5016
  for_redo5139:
    .const 'Sub' $P5018 = 'cuid_465_1346968539.359' 
    capture_lex $P5018
    $P5014 = $P5018($P5019)
    goto for_next5138
  for_done5140:
    set $P5022, $P5014
    goto if1592_end5132
  if1592_else5131:
.annotate 'line', 2709
    find_lex $P5020, "$past"
    $P5021 = $P5020."push"($P101)
    set $P5022, $P5021
  if1592_end5132:
    .return ($P5022) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_465_1346968539.359") :anon :lex :outer("cuid_466_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2707
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$past"
    $P5002 = $P5001."push"(_lex_param_0)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<multi_declarator>" :subid("cuid_324_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2725
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5164
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback5164:
    set $P5001, _lex_param_1["multi_declarator"]
    unless_null $P5001, fallback5165
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback5165:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<value>" :subid("cuid_325_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2727
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5166
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback5166:
    set $P5001, _lex_param_1["value"]
    unless_null $P5001, fallback5167
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback5167:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<( )>" :subid("cuid_326_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2729
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2730
    unless_null _lex_param_1, fallback5170
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback5170:
    set $P5001, _lex_param_1["EXPR"]
    unless_null $P5001, fallback5171
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback5171:
    unless $P5001 goto if1600_else5168 
.annotate 'line', 2731
    unless_null _lex_param_1, fallback5172
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5006
  fallback5172:
    set $P5005, _lex_param_1["EXPR"]
    unless_null $P5005, fallback5173
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5005, $P5007
  fallback5173:
    set $P5004, $P5005[0]
    unless_null $P5004, fallback5174
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5004, $P5008
  fallback5174:
    $P5009 = $P5004."ast"()
    set $P5016, $P5009
    goto if1600_end5169
  if1600_else5168:
.annotate 'line', 2732
    get_hll_global $P5013, "GLOBAL"
    nqp_get_package_through_who $P5012, $P5013, "QAST"
    get_who $P5011, $P5012
    set $P5010, $P5011["Op"]
    unless_null $P5010, fallback5175
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5010, $P5014
  fallback5175:
    $P5015 = $P5010."new"("list" :named("op"), _lex_param_1 :named("node"))
    set $P5016, $P5015
  if1600_end5169:
    $P5017 = _lex_param_1."!make"($P5016)
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<[ ]>" :subid("cuid_327_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2735
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    unless_null _lex_param_1, fallback5178
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5003
  fallback5178:
    set $P5002, _lex_param_1["EXPR"]
    unless_null $P5002, fallback5179
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5002, $P5004
  fallback5179:
    unless $P5002 goto if1601_else5176 
.annotate 'line', 2737
.annotate 'line', 2738
    unless_null _lex_param_1, fallback5180
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5007
  fallback5180:
    set $P5006, _lex_param_1["EXPR"]
    unless_null $P5006, fallback5181
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5006, $P5008
  fallback5181:
    set $P5005, $P5006[0]
    unless_null $P5005, fallback5182
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5005, $P5009
  fallback5182:
    $P5010 = $P5005."ast"()
    set $P101, $P5010
    get_hll_global $P5014, "GLOBAL"
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback5187
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5011, $P5015
  fallback5187:
    type_check $I5001, $P101, $P5011
    set $I5003, $I5001
    unless $I5001 goto if1603_end5186 
.annotate 'line', 2739
    $P5016 = $P101."name"()
    set $S5001, $P5016
    iseq $I5002, $S5001, "&infix:<,>"
    set $I5003, $I5002
  if1603_end5186:
    box $P5024, $I5003
    set $P5023, $P5024
    if $I5003 goto unless1602_end5184 
.annotate 'line', 2740
    get_hll_global $P5020, "GLOBAL"
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Op"]
    unless_null $P5017, fallback5188
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5017, $P5021
  fallback5188:
    $P5022 = $P5017."new"($P101, "list" :named("op"))
    set $P101, $P5022
    set $P5023, $P101
  unless1602_end5184:
    set $P5031, $P5023
    goto if1601_end5177
  if1601_else5176:
.annotate 'line', 2743
.annotate 'line', 2744
    get_hll_global $P5028, "GLOBAL"
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["Op"]
    unless_null $P5025, fallback5189
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5025, $P5029
  fallback5189:
    $P5030 = $P5025."new"("list" :named("op"))
    set $P101, $P5030
    set $P5031, $P101
  if1601_end5177:
.annotate 'line', 2746
    $P5032 = $P101."name"("&circumfix:<[ ]>")
.annotate 'line', 2747
    $P5033 = _lex_param_1."!make"($P101)
    .return ($P5033) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<ang>" :subid("cuid_328_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2750
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5190
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback5190:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5191
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback5191:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub utf8:"circumfix:sym<\x{ab} \x{bb}>" :subid("cuid_329_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2751
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5192
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback5192:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5193
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback5193:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<{ }>" :subid("cuid_330_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2753
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5028 = 'cuid_467_1346968539.359' 
    capture_lex $P5028 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5196
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5005
  fallback5196:
    set $P5004, _lex_param_1["pblock"]
    unless_null $P5004, fallback5197
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5004, $P5006
  fallback5197:
    set $P5003, $P5004["blockoid"]
    unless_null $P5003, fallback5198
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5003, $P5007
  fallback5198:
    set $P5002, $P5003["statementlist"]
    unless_null $P5002, fallback5199
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5002, $P5008
  fallback5199:
    set $P5001, $P5002["statement"]
    unless_null $P5001, fallback5200
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5009
  fallback5200:
    set $N5001, $P5001
    set $N5002, 0
    isgt $I5001, $N5001, $N5002
    unless $I5001 goto if1604_else5194 
    .const 'Sub' $P5010 = 'cuid_467_1346968539.359' 
    capture_lex $P5010
    $P5011 = $P5010()
    set $P5027, $P5011
    goto if1604_end5195
  if1604_else5194:
    unless_null _lex_param_1, fallback5206
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5015
  fallback5206:
    set $P5014, _lex_param_1["pblock"]
    unless_null $P5014, fallback5207
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5014, $P5016
  fallback5207:
    set $P5013, $P5014["blockoid"]
    unless_null $P5013, fallback5208
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5013, $P5017
  fallback5208:
    set $P5012, $P5013["you_are_here"]
    unless_null $P5012, fallback5209
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5012, $P5018
  fallback5209:
    unless $P5012 goto if1605_else5204 
.annotate 'line', 2759
.annotate 'line', 2760
    unless_null _lex_param_1, fallback5210
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5020
  fallback5210:
    set $P5019, _lex_param_1["pblock"]
    unless_null $P5019, fallback5211
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5019, $P5021
  fallback5211:
    $P5022 = $P5019."ast"()
    $P5023 = _lex_param_1."!make"($P5022)
    set $P5026, $P5023
    goto if1605_end5205
  if1605_else5204:
.annotate 'line', 2762
.annotate 'line', 2763
    $P5024 = "&default_for"("%")
    $P5025 = _lex_param_1."!make"($P5024)
    set $P5026, $P5025
  if1605_end5205:
    set $P5027, $P5026
  if1604_end5195:
    .return ($P5027) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_467_1346968539.359") :anon :lex :outer("cuid_330_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2754
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
.annotate 'line', 2755
    get_hll_global $P5005, "GLOBAL"
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Op"]
    unless_null $P5002, fallback5201
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5002, $P5006
  fallback5201:
    find_lex $P5008, "$/"
    unless_null $P5008, fallback5202
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5008, $P5009
  fallback5202:
    set $P5007, $P5008["pblock"]
    unless_null $P5007, fallback5203
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5007, $P5010
  fallback5203:
    $P5011 = $P5007."ast"()
    $P5012 = $P5002."new"($P5011, "takeclosure" :named("op"))
    set $P101, $P5012
    box $P5013, 1
    set $P101["bareblock"], $P5013
.annotate 'line', 2757
    find_dynamic_lex $P5014, "$/"
    $P5015 = $P5014."!make"($P101)
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<sigil>" :subid("cuid_331_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2767
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$name", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    unless_null _lex_param_1, fallback5214
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5003
  fallback5214:
    set $P5002, _lex_param_1["sigil"]
    unless_null $P5002, fallback5215
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5002, $P5004
  fallback5215:
    set $S5001, $P5002
    iseq $I5001, $S5001, "@"
    unless $I5001 goto if1606_else5212 
    set $S5004, "list"
    goto if1606_end5213
  if1606_else5212:
    unless_null _lex_param_1, fallback5218
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5006
  fallback5218:
    set $P5005, _lex_param_1["sigil"]
    unless_null $P5005, fallback5219
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5005, $P5007
  fallback5219:
    set $S5002, $P5005
    iseq $I5002, $S5002, "%"
    unless $I5002 goto if1607_else5216 
    set $S5003, "hash"
    goto if1607_end5217
  if1607_else5216:
    set $S5003, "item"
  if1607_end5217:
    set $S5004, $S5003
  if1606_end5213:
    box $P5008, $S5004
    set $P101, $P5008
.annotate 'line', 2771
    get_hll_global $P5012, "GLOBAL"
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["Op"]
    unless_null $P5009, fallback5220
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5009, $P5013
  fallback5220:
    unless_null _lex_param_1, fallback5221
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5015
  fallback5221:
    set $P5014, _lex_param_1["semilist"]
    unless_null $P5014, fallback5222
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5014, $P5016
  fallback5222:
    $P5017 = $P5014."ast"()
    $P5018 = $P5009."new"($P5017, "callmethod" :named("op"), $P101 :named("name"))
    $P5019 = _lex_param_1."!make"($P5018)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "semilist" :subid("cuid_332_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2774
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5223
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback5223:
    set $P5001, _lex_param_1["statement"]
    unless_null $P5001, fallback5224
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback5224:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<[ ]>" :subid("cuid_333_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2776
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2777
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VarWithFallback"]
    unless_null $P5001, fallback5225
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5005
  fallback5225:
    unless_null _lex_param_1, fallback5226
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5007
  fallback5226:
    set $P5006, _lex_param_1["EXPR"]
    unless_null $P5006, fallback5227
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5006, $P5008
  fallback5227:
    $P5009 = $P5006."ast"()
    $P5010 = "&default_for"("$")
    $P5011 = $P5001."new"($P5009, "positional" :named("scope"), $P5010 :named("fallback"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<{ }>" :subid("cuid_334_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2780
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2781
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VarWithFallback"]
    unless_null $P5001, fallback5228
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5005
  fallback5228:
    unless_null _lex_param_1, fallback5229
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5007
  fallback5229:
    set $P5006, _lex_param_1["EXPR"]
    unless_null $P5006, fallback5230
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5006, $P5008
  fallback5230:
    $P5009 = $P5006."ast"()
    $P5010 = "&default_for"("$")
    $P5011 = $P5001."new"($P5009, "associative" :named("scope"), $P5010 :named("fallback"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<ang>" :subid("cuid_335_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2784
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2785
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VarWithFallback"]
    unless_null $P5001, fallback5231
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5005
  fallback5231:
    unless_null _lex_param_1, fallback5232
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5007
  fallback5232:
    set $P5006, _lex_param_1["quote_EXPR"]
    unless_null $P5006, fallback5233
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5006, $P5008
  fallback5233:
    $P5009 = $P5006."ast"()
    $P5010 = "&default_for"("$")
    $P5011 = $P5001."new"($P5009, "associative" :named("scope"), $P5010 :named("fallback"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<( )>" :subid("cuid_336_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2788
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2789
    unless_null _lex_param_1, fallback5234
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback5234:
    set $P5001, _lex_param_1["arglist"]
    unless_null $P5001, fallback5235
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback5235:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "value" :subid("cuid_337_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2792
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2793
    unless_null _lex_param_1, fallback5238
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback5238:
    set $P5001, _lex_param_1["quote"]
    unless_null $P5001, fallback5239
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback5239:
    unless $P5001 goto if1608_else5236 
    unless_null _lex_param_1, fallback5240
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5005
  fallback5240:
    set $P5004, _lex_param_1["quote"]
    unless_null $P5004, fallback5241
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5004, $P5006
  fallback5241:
    $P5007 = $P5004."ast"()
    set $P5012, $P5007
    goto if1608_end5237
  if1608_else5236:
    unless_null _lex_param_1, fallback5242
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5009
  fallback5242:
    set $P5008, _lex_param_1["number"]
    unless_null $P5008, fallback5243
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5008, $P5010
  fallback5243:
    $P5011 = $P5008."ast"()
    set $P5012, $P5011
  if1608_end5237:
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "number" :subid("cuid_338_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2796
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$value", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    unless_null _lex_param_1, fallback5246
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5003
  fallback5246:
    set $P5002, _lex_param_1["dec_number"]
    unless_null $P5002, fallback5247
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5002, $P5004
  fallback5247:
    unless $P5002 goto if1609_else5244 
.annotate 'line', 2797
    unless_null _lex_param_1, fallback5248
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5006
  fallback5248:
    set $P5005, _lex_param_1["dec_number"]
    unless_null $P5005, fallback5249
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5005, $P5007
  fallback5249:
    $P5008 = $P5005."ast"()
    set $P5013, $P5008
    goto if1609_end5245
  if1609_else5244:
    unless_null _lex_param_1, fallback5250
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5010
  fallback5250:
    set $P5009, _lex_param_1["integer"]
    unless_null $P5009, fallback5251
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5009, $P5011
  fallback5251:
    $P5012 = $P5009."ast"()
    set $P5013, $P5012
  if1609_end5245:
    set $P101, $P5013
    unless_null _lex_param_1, fallback5254
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5015
  fallback5254:
    set $P5014, _lex_param_1["sign"]
    unless_null $P5014, fallback5255
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5014, $P5016
  fallback5255:
    set $S5001, $P5014
    iseq $I5001, $S5001, "-"
    box $P5019, $I5001
    set $P5018, $P5019
    unless $I5001 goto if1610_end5253 
.annotate 'line', 2798
    set $N5002, $P101
    neg $N5001, $N5002
    box $P5017, $N5001
    set $P101, $P5017
    set $P5018, $P101
  if1610_end5253:
.annotate 'line', 2799
    unless_null _lex_param_1, fallback5258
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5021
  fallback5258:
    set $P5020, _lex_param_1["dec_number"]
    unless_null $P5020, fallback5259
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5020, $P5022
  fallback5259:
    unless $P5020 goto if1611_else5256 
.annotate 'line', 2800
    get_hll_global $P5026, "GLOBAL"
    nqp_get_package_through_who $P5025, $P5026, "QAST"
    get_who $P5024, $P5025
    set $P5023, $P5024["NVal"]
    unless_null $P5023, fallback5260
    nqp_get_sc_object $P5027, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5023, $P5027
  fallback5260:
    $P5028 = $P5023."new"($P101 :named("value"))
    set $P5035, $P5028
    goto if1611_end5257
  if1611_else5256:
.annotate 'line', 2801
    get_hll_global $P5032, "GLOBAL"
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["IVal"]
    unless_null $P5029, fallback5261
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5029, $P5033
  fallback5261:
    $P5034 = $P5029."new"($P101 :named("value"))
    set $P5035, $P5034
  if1611_end5257:
    $P5036 = _lex_param_1."!make"($P5035)
    .return ($P5036) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<apos>" :subid("cuid_339_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2804
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5262
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback5262:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5263
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback5263:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<dblq>" :subid("cuid_340_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2805
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5264
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback5264:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5265
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback5265:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<qq>" :subid("cuid_341_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2806
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5266
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback5266:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5267
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback5267:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<q>" :subid("cuid_342_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2807
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5268
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback5268:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5269
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback5269:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q>" :subid("cuid_343_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2808
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5270
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback5270:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5271
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback5271:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q:PIR>" :subid("cuid_344_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2809
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2810
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VM"]
    unless_null $P5001, fallback5272
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5005
  fallback5272:
    unless_null _lex_param_1, fallback5273
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5007
  fallback5273:
    set $P5006, _lex_param_1["quote_EXPR"]
    unless_null $P5006, fallback5274
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5006, $P5008
  fallback5274:
    $P5009 = $P5006."ast"()
    $P5010 = $P5009."value"()
    $P5011 = $P5001."new"($P5010 :named("pir"), _lex_param_1 :named("node"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym</ />" :subid("cuid_345_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2813
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "$regex", $P102 
    .lex "$past", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P103, $P5003
.annotate 'line', 2814
    find_dynamic_lex $P5004, "$*W"
    unless_null $P5004, fallback5275
    get_hll_global $P5007, "GLOBAL"
    get_who $P5006, $P5007
    set $P5005, $P5006["$W"]
    unless_null $P5005, fallback5276
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5005, $P5008
  fallback5276:
    unless_null $P5005, vivi_16125277
    die "Contextual $*W not found"
    box $P5009, "Contextual $*W not found"
    set $P5005, $P5009
  vivi_16125277:
    set $P5004, $P5005
  fallback5275:
    $P5010 = $P5004."pop_lexpad"()
    set $P101, $P5010
.annotate 'line', 2815
    set $P5011, $P101[0]
    unless_null $P5011, fallback5278
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5011, $P5012
  fallback5278:
    get_hll_global $P5016, "GLOBAL"
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["Var"]
    unless_null $P5013, fallback5279
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5013, $P5017
  fallback5279:
    $P5018 = $P5013."new"("self" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5019 = $P5011."push"($P5018)
.annotate 'line', 2816
    set $P5020, $P101[0]
    unless_null $P5020, fallback5280
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5020, $P5021
  fallback5280:
    get_hll_global $P5025, "GLOBAL"
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["Op"]
    unless_null $P5022, fallback5281
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5022, $P5026
  fallback5281:
.annotate 'line', 2818
    get_hll_global $P5030, "GLOBAL"
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["Var"]
    unless_null $P5027, fallback5282
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5027, $P5031
  fallback5282:
    $P5032 = $P5027."new"("self" :named("name"), "local" :named("scope"), "var" :named("decl"))
.annotate 'line', 2819
    get_hll_global $P5036, "GLOBAL"
    nqp_get_package_through_who $P5035, $P5036, "QAST"
    get_who $P5034, $P5035
    set $P5033, $P5034["Var"]
    unless_null $P5033, fallback5283
    nqp_get_sc_object $P5037, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5033, $P5037
  fallback5283:
    $P5038 = $P5033."new"("self" :named("name"), "lexical" :named("scope"))
    $P5039 = $P5022."new"($P5032, $P5038, "bind" :named("op"))
    $P5040 = $P5020."push"($P5039)
.annotate 'line', 2820
    set $P5041, $P101[0]
    unless_null $P5041, fallback5284
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5041, $P5042
  fallback5284:
    get_hll_global $P5046, "GLOBAL"
    nqp_get_package_through_who $P5045, $P5046, "QAST"
    get_who $P5044, $P5045
    set $P5043, $P5044["Var"]
    unless_null $P5043, fallback5285
    nqp_get_sc_object $P5047, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5043, $P5047
  fallback5285:
    $P5048 = $P5043."new"(utf8:"$\x{a2}" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5049 = $P5041."push"($P5048)
.annotate 'line', 2821
    set $P5050, $P101[0]
    unless_null $P5050, fallback5286
    nqp_get_sc_object $P5051, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5050, $P5051
  fallback5286:
    get_hll_global $P5055, "GLOBAL"
    nqp_get_package_through_who $P5054, $P5055, "QAST"
    get_who $P5053, $P5054
    set $P5052, $P5053["Var"]
    unless_null $P5052, fallback5287
    nqp_get_sc_object $P5056, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5052, $P5056
  fallback5287:
    $P5057 = $P5052."new"("$/" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5058 = $P5050."push"($P5057)
.annotate 'line', 2822
    $P5059 = $P101."symbol"(utf8:"$\x{a2}", "lexical" :named("scope"))
.annotate 'line', 2823
    $P5060 = $P101."symbol"("$/", "lexical" :named("scope"))
.annotate 'line', 2825
    unless_null _lex_param_1, fallback5289
    nqp_get_sc_object $P5069, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5069
  fallback5289:
    set $P5068, _lex_param_1["p6regex"]
    unless_null $P5068, fallback5290
    nqp_get_sc_object $P5070, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5068, $P5070
  fallback5290:
    $P5071 = $P5068."ast"()
    get_hll_global $P5066, "GLOBAL"
    nqp_get_package_through_who $P5065, $P5066, "QRegex"
    nqp_get_package_through_who $P5064, $P5065, "P6Regex"
    nqp_get_package_through_who $P5063, $P5064, "Actions"
    get_who $P5062, $P5063
    set $P5061, $P5062["qbuildsub"]
    unless_null $P5061, fallback5288
    nqp_get_sc_object $P5067, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5061, $P5067
  fallback5288:
    $P5072 = $P5061($P5071, $P101)
    set $P102, $P5072
.annotate 'line', 2826
    get_hll_global $P5076, "GLOBAL"
    nqp_get_package_through_who $P5075, $P5076, "QAST"
    get_who $P5074, $P5075
    set $P5073, $P5074["Op"]
    unless_null $P5073, fallback5291
    nqp_get_sc_object $P5077, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5073, $P5077
  fallback5291:
.annotate 'line', 2828
    new $P5078, 'ResizablePMCArray'
    box $P5079, "NQPRegex"
    push $P5078, $P5079
    $P5080 = "&lexical_package_lookup"($P5078, _lex_param_1)
    $P5081 = $P5073."new"($P5080, $P102, "callmethod" :named("op"), "new" :named("name"))
    set $P103, $P5081
    set $P103["sink"], $P102
.annotate 'line', 2833
    $P5082 = _lex_param_1."!make"($P103)
    .return ($P5082) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<$>" :subid("cuid_346_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2836
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5292
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback5292:
    set $P5001, _lex_param_1["variable"]
    unless_null $P5001, fallback5293
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback5293:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<{ }>" :subid("cuid_347_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2837
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2838
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5294
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5005
  fallback5294:
.annotate 'line', 2839
    unless_null _lex_param_1, fallback5295
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5007
  fallback5295:
    set $P5006, _lex_param_1["block"]
    unless_null $P5006, fallback5296
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5006, $P5008
  fallback5296:
    $P5009 = $P5006."ast"()
    $P5010 = "&block_immediate"($P5009)
    $P5011 = $P5001."new"($P5010, "stringify" :named("op"), _lex_param_1 :named("node"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<esc>" :subid("cuid_348_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2842
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    $P5001 = _lex_param_1."!make"("\e")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<.>" :subid("cuid_349_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2846
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5297
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback5297:
    set $P5001, _lex_param_1["dotty"]
    unless_null $P5001, fallback5298
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback5298:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<return>" :subid("cuid_350_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2848
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2849
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5299
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5005
  fallback5299:
.annotate 'line', 2851
    get_hll_global $P5009, "GLOBAL"
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Var"]
    unless_null $P5006, fallback5300
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5006, $P5010
  fallback5300:
    $P5011 = $P5006."new"("RETURN" :named("name"), "lexical" :named("scope"))
    $P5012 = $P5001."new"($P5011, "call" :named("op"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<make>" :subid("cuid_351_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2855
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2856
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5301
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5005
  fallback5301:
.annotate 'line', 2857
    get_hll_global $P5009, "GLOBAL"
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Var"]
    unless_null $P5006, fallback5302
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5006, $P5010
  fallback5302:
    $P5011 = $P5006."new"("$/" :named("name"), "contextual" :named("scope"))
    $P5012 = $P5001."new"($P5011, "callmethod" :named("op"), "!make" :named("name"), _lex_param_1 :named("node"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<next>" :subid("cuid_352_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2864
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5303
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5005
  fallback5303:
    $P5006 = $P5001."new"("control" :named("op"), "next" :named("name"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<last>" :subid("cuid_353_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2865
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5304
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5005
  fallback5304:
    $P5006 = $P5001."new"("control" :named("op"), "last" :named("name"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<redo>" :subid("cuid_354_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2866
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5305
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5005
  fallback5305:
    $P5006 = $P5001."new"("control" :named("op"), "redo" :named("name"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<~~>" :subid("cuid_355_1346968539.359") :anon :lex :outer("cuid_356_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2868
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2869
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5306
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5005
  fallback5306:
    $P5006 = $P5001."new"("callmethod" :named("op"), "ACCEPTS" :named("name"), _lex_param_1 :named("node"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_367_1346968539.359") :anon :lex :outer("cuid_1_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2952
    .const 'Sub' $P5011 = 'cuid_357_1346968539.359' 
    capture_lex $P5011 
    .const 'Sub' $P5011 = 'cuid_358_1346968539.359' 
    capture_lex $P5011 
    .const 'Sub' $P5011 = 'cuid_359_1346968539.359' 
    capture_lex $P5011 
    .const 'Sub' $P5011 = 'cuid_360_1346968539.359' 
    capture_lex $P5011 
    .const 'Sub' $P5011 = 'cuid_361_1346968539.359' 
    capture_lex $P5011 
    .const 'Sub' $P5011 = 'cuid_362_1346968539.359' 
    capture_lex $P5011 
    .const 'Sub' $P5011 = 'cuid_363_1346968539.359' 
    capture_lex $P5011 
    .const 'Sub' $P5011 = 'cuid_364_1346968539.359' 
    capture_lex $P5011 
    .const 'Sub' $P5011 = 'cuid_365_1346968539.359' 
    capture_lex $P5011 
    .const 'Sub' $P5011 = 'cuid_366_1346968539.359' 
    capture_lex $P5011 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    .const 'Sub' $P5001 = 'cuid_357_1346968539.359' 
    capture_lex $P5001
    .const 'Sub' $P5002 = 'cuid_358_1346968539.359' 
    capture_lex $P5002
    .const 'Sub' $P5003 = 'cuid_359_1346968539.359' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_360_1346968539.359' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_361_1346968539.359' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_362_1346968539.359' 
    capture_lex $P5006
    .const 'Sub' $P5007 = 'cuid_363_1346968539.359' 
    capture_lex $P5007
    .const 'Sub' $P5008 = 'cuid_364_1346968539.359' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_365_1346968539.359' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_366_1346968539.359' 
    capture_lex $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<:my>" :subid("cuid_357_1346968539.359") :anon :lex :outer("cuid_367_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2954
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
.annotate 'line', 2955
    unless_null _lex_param_1, fallback5307
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5003
  fallback5307:
    set $P5002, _lex_param_1["statement"]
    unless_null $P5002, fallback5308
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5002, $P5004
  fallback5308:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 2956
    get_hll_global $P5009, "GLOBAL"
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Regex"]
    unless_null $P5006, fallback5309
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5006, $P5010
  fallback5309:
    $P5011 = $P5006."new"($P101, "qastnode" :named("rxtype"), "declarative" :named("subtype"), _lex_param_1 :named("node"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<{ }>" :subid("cuid_358_1346968539.359") :anon :lex :outer("cuid_367_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2960
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2961
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5310
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5005
  fallback5310:
    unless_null _lex_param_1, fallback5311
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5007
  fallback5311:
    set $P5006, _lex_param_1["codeblock"]
    unless_null $P5006, fallback5312
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5006, $P5008
  fallback5312:
    $P5009 = $P5006."ast"()
    $P5010 = $P5001."new"($P5009, "qastnode" :named("rxtype"), _lex_param_1 :named("node"))
    $P5011 = _lex_param_1."!make"($P5010)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<nqpvar>" :subid("cuid_359_1346968539.359") :anon :lex :outer("cuid_367_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2965
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2966
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5313
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5005
  fallback5313:
    get_hll_global $P5009, "GLOBAL"
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Node"]
    unless_null $P5006, fallback5314
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5006, $P5010
  fallback5314:
.annotate 'line', 2967
    get_hll_global $P5014, "GLOBAL"
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback5315
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5011, $P5015
  fallback5315:
    $P5016 = $P5011."new"("!INTERPOLATE" :named("value"))
.annotate 'line', 2968
    unless_null _lex_param_1, fallback5316
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5018
  fallback5316:
    set $P5017, _lex_param_1["var"]
    unless_null $P5017, fallback5317
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5017, $P5019
  fallback5317:
    $P5020 = $P5017."ast"()
    $P5021 = $P5006."new"($P5016, $P5020)
    $P5022 = $P5001."new"($P5021, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    $P5023 = _lex_param_1."!make"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<{ }>" :subid("cuid_360_1346968539.359") :anon :lex :outer("cuid_367_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2972
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2973
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5318
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5005
  fallback5318:
    get_hll_global $P5009, "GLOBAL"
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Node"]
    unless_null $P5006, fallback5319
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5006, $P5010
  fallback5319:
.annotate 'line', 2974
    get_hll_global $P5014, "GLOBAL"
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback5320
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5011, $P5015
  fallback5320:
    $P5016 = $P5011."new"("!INTERPOLATE_REGEX" :named("value"))
.annotate 'line', 2975
    unless_null _lex_param_1, fallback5321
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5018
  fallback5321:
    set $P5017, _lex_param_1["codeblock"]
    unless_null $P5017, fallback5322
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5017, $P5019
  fallback5322:
    $P5020 = $P5017."ast"()
    $P5021 = $P5006."new"($P5016, $P5020)
    $P5022 = $P5001."new"($P5021, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    $P5023 = _lex_param_1."!make"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?{ }>" :subid("cuid_361_1346968539.359") :anon :lex :outer("cuid_367_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2979
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2980
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5323
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5005
  fallback5323:
    unless_null _lex_param_1, fallback5324
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5007
  fallback5324:
    set $P5006, _lex_param_1["codeblock"]
    unless_null $P5006, fallback5325
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5006, $P5008
  fallback5325:
    $P5009 = $P5006."ast"()
    unless_null _lex_param_1, fallback5326
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5011
  fallback5326:
    set $P5010, _lex_param_1["zw"]
    unless_null $P5010, fallback5327
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5010, $P5012
  fallback5327:
    set $S5001, $P5010
    iseq $I5001, $S5001, "!"
    $P5013 = $P5001."new"($P5009, "zerowidth" :named("subtype"), $I5001 :named("negate"), "qastnode" :named("rxtype"), _lex_param_1 :named("node"))
    $P5014 = _lex_param_1."!make"($P5013)
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<var>" :subid("cuid_362_1346968539.359") :anon :lex :outer("cuid_367_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2985
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2986
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5328
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5005
  fallback5328:
    get_hll_global $P5009, "GLOBAL"
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Node"]
    unless_null $P5006, fallback5329
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5006, $P5010
  fallback5329:
.annotate 'line', 2987
    get_hll_global $P5014, "GLOBAL"
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback5330
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5011, $P5015
  fallback5330:
    $P5016 = $P5011."new"("!INTERPOLATE_REGEX" :named("value"))
.annotate 'line', 2988
    unless_null _lex_param_1, fallback5331
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5018
  fallback5331:
    set $P5017, _lex_param_1["var"]
    unless_null $P5017, fallback5332
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5017, $P5019
  fallback5332:
    $P5020 = $P5017."ast"()
    $P5021 = $P5006."new"($P5016, $P5020)
    $P5022 = $P5001."new"($P5021, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    $P5023 = _lex_param_1."!make"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "codeblock" :subid("cuid_363_1346968539.359") :anon :lex :outer("cuid_367_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2992
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
.annotate 'line', 2993
    unless_null _lex_param_1, fallback5333
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5004
  fallback5333:
    set $P5003, _lex_param_1["block"]
    unless_null $P5003, fallback5334
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5003, $P5005
  fallback5334:
    $P5006 = $P5003."ast"()
    set $P101, $P5006
.annotate 'line', 2994
    $P5007 = $P101."blocktype"("immediate")
.annotate 'line', 2996
    get_hll_global $P5011, "GLOBAL"
    nqp_get_package_through_who $P5010, $P5011, "QAST"
    get_who $P5009, $P5010
    set $P5008, $P5009["Stmts"]
    unless_null $P5008, fallback5335
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5008, $P5012
  fallback5335:
.annotate 'line', 2997
    get_hll_global $P5016, "GLOBAL"
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["Op"]
    unless_null $P5013, fallback5336
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5013, $P5017
  fallback5336:
.annotate 'line', 2999
    get_hll_global $P5021, "GLOBAL"
    nqp_get_package_through_who $P5020, $P5021, "QAST"
    get_who $P5019, $P5020
    set $P5018, $P5019["Var"]
    unless_null $P5018, fallback5337
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5018, $P5022
  fallback5337:
    $P5023 = $P5018."new"("$/" :named("name"), "contextual" :named("scope"))
.annotate 'line', 3000
    get_hll_global $P5027, "GLOBAL"
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["Op"]
    unless_null $P5024, fallback5338
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5024, $P5028
  fallback5338:
.annotate 'line', 3001
    get_hll_global $P5032, "GLOBAL"
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["Var"]
    unless_null $P5029, fallback5339
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5029, $P5033
  fallback5339:
    $P5034 = $P5029."new"(utf8:"$\x{a2}" :named("name"), "contextual" :named("scope"))
    $P5035 = $P5024."new"($P5034, "MATCH" :named("name"), "callmethod" :named("op"))
    $P5036 = $P5013."new"($P5023, $P5035, "bind" :named("op"))
    $P5037 = $P5008."new"($P5036, $P101)
    set $P102, $P5037
.annotate 'line', 3008
    $P5038 = _lex_param_1."!make"($P102)
    .return ($P5038) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<( )>" :subid("cuid_364_1346968539.359") :anon :lex :outer("cuid_367_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3012
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$subpast", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
.annotate 'line', 3013
    get_hll_global $P5006, "GLOBAL"
    nqp_get_package_through_who $P5005, $P5006, "QAST"
    get_who $P5004, $P5005
    set $P5003, $P5004["Node"]
    unless_null $P5003, fallback5340
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5003, $P5007
  fallback5340:
.annotate 'line', 3014
    unless_null _lex_param_1, fallback5342
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5016
  fallback5342:
    set $P5015, _lex_param_1["nibbler"]
    unless_null $P5015, fallback5343
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5015, $P5017
  fallback5343:
    $P5018 = $P5015."ast"()
    get_hll_global $P5013, "GLOBAL"
    nqp_get_package_through_who $P5012, $P5013, "QRegex"
    nqp_get_package_through_who $P5011, $P5012, "P6Regex"
    nqp_get_package_through_who $P5010, $P5011, "Actions"
    get_who $P5009, $P5010
    set $P5008, $P5009["qbuildsub"]
    unless_null $P5008, fallback5341
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5008, $P5014
  fallback5341:
    $P5019 = $P5008($P5018, 1 :named("anon"), 1 :named("addself"))
    $P5020 = $P5003."new"($P5019)
    set $P101, $P5020
.annotate 'line', 3015
    get_hll_global $P5024, "GLOBAL"
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["Regex"]
    unless_null $P5021, fallback5344
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5021, $P5025
  fallback5344:
    unless_null _lex_param_1, fallback5345
    nqp_get_sc_object $P5027, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5027
  fallback5345:
    set $P5026, _lex_param_1["nibbler"]
    unless_null $P5026, fallback5346
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5026, $P5028
  fallback5346:
    $P5029 = $P5026."ast"()
    $P5030 = $P5021."new"($P101, $P5029, "subrule" :named("rxtype"), "capture" :named("subtype"), _lex_param_1 :named("node"))
    set $P102, $P5030
.annotate 'line', 3017
    $P5031 = _lex_param_1."!make"($P102)
    .return ($P5031) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<name>" :subid("cuid_365_1346968539.359") :anon :lex :outer("cuid_367_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3020
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5098 = 'cuid_468_1346968539.359' 
    capture_lex $P5098 
    .const 'Sub' $P5098 = 'cuid_469_1346968539.359' 
    capture_lex $P5098 
    .lex "$name", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
    unless_null _lex_param_1, fallback5347
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5004
  fallback5347:
    set $P5003, _lex_param_1["longname"]
    unless_null $P5003, fallback5348
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5003, $P5005
  fallback5348:
    set $S5001, $P5003
    box $P5006, $S5001
    set $P101, $P5006
    unless_null _lex_param_1, fallback5351
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5008
  fallback5351:
    set $P5007, _lex_param_1["assertion"]
    unless_null $P5007, fallback5352
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5007, $P5009
  fallback5352:
    unless $P5007 goto if1613_else5349 
.annotate 'line', 3023
.annotate 'line', 3024
    unless_null _lex_param_1, fallback5353
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5012
  fallback5353:
    set $P5011, _lex_param_1["assertion"]
    unless_null $P5011, fallback5354
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5011, $P5013
  fallback5354:
    set $P5010, $P5011[0]
    unless_null $P5010, fallback5355
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5010, $P5014
  fallback5355:
    $P5015 = $P5010."ast"()
    set $P102, $P5015
.annotate 'line', 3025
    nqp_decontainerize $P5016, _lex_param_0
    $P5017 = $P5016."subrule_alias"($P102, $P101)
    set $P5096, $P5017
    goto if1613_end5350
  if1613_else5349:
    set $S5002, $P101
    iseq $I5001, $S5002, "sym"
    unless $I5001 goto if1614_else5356 
    .const 'Sub' $P5018 = 'cuid_468_1346968539.359' 
    capture_lex $P5018
    $P5019 = $P5018()
    set $P5095, $P5019
    goto if1614_end5357
  if1614_else5356:
.annotate 'line', 3035
.annotate 'line', 3036
    get_hll_global $P5023, "GLOBAL"
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Regex"]
    unless_null $P5020, fallback5374
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5020, $P5024
  fallback5374:
.annotate 'line', 3038
    get_hll_global $P5028, "GLOBAL"
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["Node"]
    unless_null $P5025, fallback5375
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5025, $P5029
  fallback5375:
    get_hll_global $P5033, "GLOBAL"
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["SVal"]
    unless_null $P5030, fallback5376
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5030, $P5034
  fallback5376:
    $P5035 = $P5030."new"($P101 :named("value"))
    $P5036 = $P5025."new"($P5035)
    $P5037 = $P5020."new"($P5036, "subrule" :named("rxtype"), "capture" :named("subtype"), _lex_param_1 :named("node"), $P101 :named("name"))
    set $P102, $P5037
    unless_null _lex_param_1, fallback5379
    nqp_get_sc_object $P5039, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5039
  fallback5379:
    set $P5038, _lex_param_1["arglist"]
    unless_null $P5038, fallback5380
    nqp_get_sc_object $P5040, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5038, $P5040
  fallback5380:
    unless $P5038 goto if1619_else5377 
.annotate 'line', 3039
.annotate 'line', 3040
    unless_null _lex_param_1, fallback5381
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5046
  fallback5381:
    set $P5045, _lex_param_1["arglist"]
    unless_null $P5045, fallback5382
    nqp_get_sc_object $P5047, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5045, $P5047
  fallback5382:
    set $P5044, $P5045[0]
    unless_null $P5044, fallback5383
    nqp_get_sc_object $P5048, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5044, $P5048
  fallback5383:
    $P5049 = $P5044."ast"()
    $P5050 = $P5049."list"()
    set $P5041, $P5050
    iter $P5043, $P5050
  for_next5385:
    unless $P5043, for_done5387
    shift $P5052, $P5043
  for_redo5386:
    .const 'Sub' $P5051 = 'cuid_469_1346968539.359' 
    capture_lex $P5051
    $P5041 = $P5051($P5052)
    goto for_next5385
  for_done5387:
    set $P5094, $P5041
    goto if1619_end5378
  if1619_else5377:
    unless_null _lex_param_1, fallback5390
    nqp_get_sc_object $P5054, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5054
  fallback5390:
    set $P5053, _lex_param_1["nibbler"]
    unless_null $P5053, fallback5391
    nqp_get_sc_object $P5055, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5053, $P5055
  fallback5391:
    set $P5093, $P5053
    unless $P5053 goto if1620_end5389 
.annotate 'line', 3042
    set $S5003, $P101
    iseq $I5002, $S5003, "after"
    unless $I5002 goto if1621_else5392 
.annotate 'line', 3044
    set $P5056, $P102[0]
    unless_null $P5056, fallback5394
    nqp_get_sc_object $P5057, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5056, $P5057
  fallback5394:
    nqp_decontainerize $P5065, _lex_param_0
    unless_null _lex_param_1, fallback5396
    nqp_get_sc_object $P5068, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5068
  fallback5396:
    set $P5067, _lex_param_1["nibbler"]
    unless_null $P5067, fallback5397
    nqp_get_sc_object $P5069, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5067, $P5069
  fallback5397:
    set $P5066, $P5067[0]
    unless_null $P5066, fallback5398
    nqp_get_sc_object $P5070, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5066, $P5070
  fallback5398:
    $P5071 = $P5066."ast"()
    $P5072 = $P5065."flip_ast"($P5071)
    get_hll_global $P5063, "GLOBAL"
    nqp_get_package_through_who $P5062, $P5063, "QRegex"
    nqp_get_package_through_who $P5061, $P5062, "P6Regex"
    nqp_get_package_through_who $P5060, $P5061, "Actions"
    get_who $P5059, $P5060
    set $P5058, $P5059["qbuildsub"]
    unless_null $P5058, fallback5395
    nqp_get_sc_object $P5064, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5058, $P5064
  fallback5395:
    $P5073 = $P5058($P5072, 1 :named("anon"), 1 :named("addself"))
    $P5074 = $P5056."push"($P5073)
    set $P5092, $P5074
    goto if1621_end5393
  if1621_else5392:
.annotate 'line', 3045
    set $P5075, $P102[0]
    unless_null $P5075, fallback5399
    nqp_get_sc_object $P5076, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5075, $P5076
  fallback5399:
    unless_null _lex_param_1, fallback5401
    nqp_get_sc_object $P5086, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5086
  fallback5401:
    set $P5085, _lex_param_1["nibbler"]
    unless_null $P5085, fallback5402
    nqp_get_sc_object $P5087, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5085, $P5087
  fallback5402:
    set $P5084, $P5085[0]
    unless_null $P5084, fallback5403
    nqp_get_sc_object $P5088, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5084, $P5088
  fallback5403:
    $P5089 = $P5084."ast"()
    get_hll_global $P5082, "GLOBAL"
    nqp_get_package_through_who $P5081, $P5082, "QRegex"
    nqp_get_package_through_who $P5080, $P5081, "P6Regex"
    nqp_get_package_through_who $P5079, $P5080, "Actions"
    get_who $P5078, $P5079
    set $P5077, $P5078["qbuildsub"]
    unless_null $P5077, fallback5400
    nqp_get_sc_object $P5083, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5077, $P5083
  fallback5400:
    $P5090 = $P5077($P5089, 1 :named("anon"), 1 :named("addself"))
    $P5091 = $P5075."push"($P5090)
    set $P5092, $P5091
  if1621_end5393:
    set $P5093, $P5092
  if1620_end5389:
    set $P5094, $P5093
  if1619_end5378:
    set $P5095, $P5094
  if1614_end5357:
    set $P5096, $P5095
  if1613_end5350:
.annotate 'line', 3048
    $P5097 = _lex_param_1."!make"($P102)
    .return ($P5097) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_468_1346968539.359") :anon :lex :outer("cuid_365_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3027
    .lex "$loc", $P101 
    .lex "$rxname", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P102, $P5002
    find_dynamic_lex $P5004, "%*RX"
    unless_null $P5004, fallback5358
    get_hll_global $P5007, "GLOBAL"
    get_who $P5006, $P5007
    set $P5005, $P5006["%RX"]
    unless_null $P5005, fallback5359
    get_hll_global $P5009, "GLOBAL"
    get_who $P5008, $P5009
    new $P5010, 'Hash'
    set $P5008["%RX"], $P5010
    set $P5005, $P5010
  fallback5359:
    unless_null $P5005, vivi_16155360
    die "Contextual %*RX not found"
    box $P5011, "Contextual %*RX not found"
    set $P5005, $P5011
  vivi_16155360:
    set $P5004, $P5005
  fallback5358:
    set $P5003, $P5004["name"]
    unless_null $P5003, fallback5361
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5003, $P5012
  fallback5361:
    set $S5001, $P5003
    index $I5001, $S5001, ":sym<", 0
    box $P5013, $I5001
    set $P101, $P5013
    set $N5001, $P101
    set $N5002, 0
    islt $I5002, $N5001, $N5002
    box $P5026, $I5002
    set $P5025, $P5026
    unless $I5002 goto if1616_end5363 
    find_dynamic_lex $P5015, "%*RX"
    unless_null $P5015, fallback5364
    get_hll_global $P5018, "GLOBAL"
    get_who $P5017, $P5018
    set $P5016, $P5017["%RX"]
    unless_null $P5016, fallback5365
    get_hll_global $P5020, "GLOBAL"
    get_who $P5019, $P5020
    new $P5021, 'Hash'
    set $P5019["%RX"], $P5021
    set $P5016, $P5021
  fallback5365:
    unless_null $P5016, vivi_16175366
    die "Contextual %*RX not found"
    box $P5022, "Contextual %*RX not found"
    set $P5016, $P5022
  vivi_16175366:
    set $P5015, $P5016
  fallback5364:
    set $P5014, $P5015["name"]
    unless_null $P5014, fallback5367
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5014, $P5023
  fallback5367:
    set $S5002, $P5014
    index $I5003, $S5002, utf8:":sym\x{ab}", 0
    box $P5024, $I5003
    set $P101, $P5024
    set $P5025, $P101
  if1616_end5363:
    find_dynamic_lex $P5028, "%*RX"
    unless_null $P5028, fallback5368
    get_hll_global $P5031, "GLOBAL"
    get_who $P5030, $P5031
    set $P5029, $P5030["%RX"]
    unless_null $P5029, fallback5369
    get_hll_global $P5033, "GLOBAL"
    get_who $P5032, $P5033
    new $P5034, 'Hash'
    set $P5032["%RX"], $P5034
    set $P5029, $P5034
  fallback5369:
    unless_null $P5029, vivi_16185370
    die "Contextual %*RX not found"
    box $P5035, "Contextual %*RX not found"
    set $P5029, $P5035
  vivi_16185370:
    set $P5028, $P5029
  fallback5368:
    set $P5027, $P5028["name"]
    unless_null $P5027, fallback5371
    nqp_get_sc_object $P5036, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5027, $P5036
  fallback5371:
    set $S5005, $P5027
    set $N5004, $P101
    set $N5005, 5
    add $N5003, $N5004, $N5005
    set $I5004, $N5003
    substr $S5004, $S5005, $I5004
    chopn $S5003, $S5004, 1
    box $P5037, $S5003
    set $P102, $P5037
.annotate 'line', 3032
    get_hll_global $P5041, "GLOBAL"
    nqp_get_package_through_who $P5040, $P5041, "QAST"
    get_who $P5039, $P5040
    set $P5038, $P5039["Regex"]
    unless_null $P5038, fallback5372
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5038, $P5042
  fallback5372:
    find_lex $P5043, "$/"
.annotate 'line', 3033
    get_hll_global $P5047, "GLOBAL"
    nqp_get_package_through_who $P5046, $P5047, "QAST"
    get_who $P5045, $P5046
    set $P5044, $P5045["Regex"]
    unless_null $P5044, fallback5373
    nqp_get_sc_object $P5048, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5044, $P5048
  fallback5373:
    find_lex $P5049, "$/"
    $P5050 = $P5044."new"($P102, "literal" :named("rxtype"), $P5049 :named("node"))
    $P5051 = $P5038."new"($P5050, "sym" :named("name"), "subcapture" :named("rxtype"), $P5043 :named("node"))
    store_lex "$qast", $P5051
    .return ($P5051) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_469_1346968539.359") :anon :lex :outer("cuid_365_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3040
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$qast"
    set $P5001, $P5002[0]
    unless_null $P5001, fallback5384
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback5384:
    $P5004 = $P5001."push"(_lex_param_0)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "arg" :subid("cuid_366_1346968539.359") :anon :lex :outer("cuid_367_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3051
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3052
    unless_null _lex_param_1, fallback5404
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set _lex_param_1, $P5002
  fallback5404:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5405
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    set $P5001, $P5003
  fallback5405:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_368_1346968539.359") :anon :lex :outer("cuid_1_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3057
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237", 7
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_471_1346968539.359") :load :init
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .const 'Sub' $P5001 = 'cuid_470_1346968539.359' 
    capture_lex $P5001 
    .local pmc cur_sc 
    nqp_dynop_setup 
    nqp_bigint_setup 
    getinterp $P5001
    get_class $P5002, "LexPad"
    get_class $P5003, "NQPLexPad"
    $P5004 = $P5001."hll_map"($P5002, $P5003)
    load_bytecode "ModuleLoader.pbc"
    .const 'Sub' $P5001 = "cuid_1_1346968539.359" 
    get_hll_global $P5002, "ModuleLoader"
    $P5003 = $P5002."load_setting"("NQPCORE")
    $P5004 = $P5001."set_outer_ctx"($P5003)
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5002 = $P5001."load_module"("QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5002 = $P5001."load_module"("NQPP6QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5002 = $P5001."load_module"("NQPP6QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5002 = $P5001."load_module"("QAST")
    nqp_create_sc $P5001, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379"
    set cur_sc, $P5001
    $P5002 = cur_sc."set_description"("src\\stage2\\gen\\NQP.pm")
    new $P5003, 'ResizableStringArray'
    null $S5001
    push $P5003, $S5001
    push $P5003, "P6opaque"
    push $P5003, "QAST"
    push $P5003, "QRegex"
    push $P5003, "NQPCursorRole"
    push $P5003, "31F30E2EA0A0CB6981914C497B2A3F2107959CE1-1346968515.859"
    push $P5003, "src\\stage2\\QRegex.nqp"
    push $P5003, "NQPMatch"
    push $P5003, "NQPCursor"
    push $P5003, "NQPRegexMethod"
    push $P5003, "NQPRegex"
    push $P5003, "HLL"
    push $P5003, "PIRT"
    push $P5003, "PAST"
    push $P5003, "__PAST_CORE_SC__"
    push $P5003, "NQP"
    push $P5003, "CREATE"
    push $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1346968513.237"
    push $P5003, "src\\stage2\\NQPCORE.setting"
    push $P5003, "bless"
    push $P5003, "BUILDALL"
    push $P5003, "new"
    push $P5003, "Str"
    push $P5003, "Numeric"
    push $P5003, "Int"
    push $P5003, "at_pos"
    push $P5003, "at_key"
    push $P5003, "defined"
    push $P5003, "ACCEPTS"
    push $P5003, "isa"
    push $P5003, "__dump"
    push $P5003, "BUILD"
    push $P5003, "slot_for_object"
    push $P5003, "D737CC2BB1349B6A56A577BFE8CDA45716BAC586-1346968519.156"
    push $P5003, "src\\stage2\\gen\\NQPHLL.pm"
    push $P5003, "add_object"
    push $P5003, "add_root_code_ref"
    push $P5003, "update_root_code_ref"
    push $P5003, "is_precompilation_mode"
    push $P5003, "add_load_dependency_task"
    push $P5003, "add_fixup_task"
    push $P5003, "sc"
    push $P5003, "handle"
    push $P5003, "code_ref_blocks"
    push $P5003, "load_dependency_tasks"
    push $P5003, "fixup_tasks"
    push $P5003, "push_lexpad"
    push $P5003, "pop_lexpad"
    push $P5003, "cur_lexpad"
    push $P5003, "get_legacy_block_list"
    push $P5003, "load_setting"
    push $P5003, "load_module"
    push $P5003, "install_package_symbol"
    push $P5003, "install_lexical_symbol"
    push $P5003, "install_package_routine"
    push $P5003, "create_code"
    push $P5003, "pkg_create_mo"
    push $P5003, "pkg_add_attribute"
    push $P5003, "pkg_add_method"
    push $P5003, "set_routine_signature"
    push $P5003, "pkg_set_body_block"
    push $P5003, "pkg_add_parent_or_role"
    push $P5003, "pkg_add_parrot_vtable_handler_mapping"
    push $P5003, "pkg_compose"
    push $P5003, "run_begin_block"
    push $P5003, "libs"
    push $P5003, "add_initializations"
    push $P5003, "is_lexical"
    push $P5003, "is_package"
    push $P5003, "is_scope"
    push $P5003, "known_sym"
    push $P5003, "find_sym"
    push $P5003, "$!sc"
    push $P5003, "$!handle"
    push $P5003, "$!precomp_mode"
    push $P5003, "$!num_code_refs"
    push $P5003, "$!code_ref_blocks"
    push $P5003, "@!load_dependency_tasks"
    push $P5003, "@!fixup_tasks"
    push $P5003, "%!addr_to_slot"
    push $P5003, "@!BLOCKS"
    push $P5003, "%!code_objects_to_fix_up"
    push $P5003, "%!code_object_fixup_list"
    push $P5003, "%!code_stub_sc_idx"
    push $P5003, "MATCH"
    push $P5003, "Bool"
    push $P5003, "parse"
    push $P5003, "!INTERPOLATE"
    push $P5003, "!INTERPOLATE_REGEX"
    push $P5003, "target"
    push $P5003, "from"
    push $P5003, "pos"
    push $P5003, "CAPHASH"
    push $P5003, "!cursor_init"
    push $P5003, "!cursor_start"
    push $P5003, "!cursor_start_subcapture"
    push $P5003, "!cursor_capture"
    push $P5003, "!cursor_push_cstack"
    push $P5003, "!cursor_pass"
    push $P5003, "!cursor_fail"
    push $P5003, "!cursor_next"
    push $P5003, "!cursor_more"
    push $P5003, "!reduce"
    push $P5003, "!reduce_with_match"
    push $P5003, "!protoregex"
    push $P5003, "!protoregex_nfa"
    push $P5003, "!protoregex_table"
    push $P5003, "!alt"
    push $P5003, "!alt_nfa"
    push $P5003, "!BACKREF"
    push $P5003, "!LITERAL"
    push $P5003, "at"
    push $P5003, "before"
    push $P5003, "after"
    push $P5003, "ws"
    push $P5003, "ww"
    push $P5003, "wb"
    push $P5003, "ident"
    push $P5003, "alpha"
    push $P5003, "alnum"
    push $P5003, "upper"
    push $P5003, "lower"
    push $P5003, "digit"
    push $P5003, "xdigit"
    push $P5003, "space"
    push $P5003, "blank"
    push $P5003, "cntrl"
    push $P5003, "punct"
    push $P5003, "FAILGOAL"
    push $P5003, "termish"
    push $P5003, "term"
    push $P5003, "infix"
    push $P5003, "prefix"
    push $P5003, "postfix"
    push $P5003, "circumfix"
    push $P5003, "postcircumfix"
    push $P5003, "term:sym<circumfix>"
    push $P5003, "infixish"
    push $P5003, "prefixish"
    push $P5003, "postfixish"
    push $P5003, "nullterm"
    push $P5003, "nullterm_alt"
    push $P5003, "nulltermish"
    push $P5003, "quote_delimited"
    push $P5003, "quote_atom"
    push $P5003, "decint"
    push $P5003, "decints"
    push $P5003, "hexint"
    push $P5003, "hexints"
    push $P5003, "octint"
    push $P5003, "octints"
    push $P5003, "binint"
    push $P5003, "binints"
    push $P5003, "integer"
    push $P5003, "dec_number"
    push $P5003, "escale"
    push $P5003, "quote_escape"
    push $P5003, "quote_escape:sym<backslash>"
    push $P5003, "quote_escape:sym<stopper>"
    push $P5003, "quote_escape:sym<bs>"
    push $P5003, "quote_escape:sym<nl>"
    push $P5003, "quote_escape:sym<cr>"
    push $P5003, "quote_escape:sym<tab>"
    push $P5003, "quote_escape:sym<ff>"
    push $P5003, "quote_escape:sym<esc>"
    push $P5003, "quote_escape:sym<hex>"
    push $P5003, "quote_escape:sym<oct>"
    push $P5003, "quote_escape:sym<chr>"
    push $P5003, "quote_escape:sym<0>"
    push $P5003, "quote_escape:sym<misc>"
    push $P5003, "charname"
    push $P5003, "charnames"
    push $P5003, "charspec"
    push $P5003, "O"
    push $P5003, "panic"
    push $P5003, "peek_delimiters"
    push $P5003, "quote_EXPR"
    push $P5003, "quotemod_check"
    push $P5003, "starter"
    push $P5003, "stopper"
    push $P5003, "split_words"
    push $P5003, "EXPR"
    push $P5003, "EXPR_reduce"
    push $P5003, "ternary"
    push $P5003, "MARKER"
    push $P5003, "MARKED"
    push $P5003, "LANG"
    push $P5003, "TOP"
    push $P5003, "identifier"
    push $P5003, "name"
    push $P5003, "deflongname"
    push $P5003, "ENDSTMT"
    push $P5003, "unv"
    push $P5003, "pod_comment"
    push $P5003, "comp_unit"
    push $P5003, "statementlist"
    push $P5003, "statement"
    push $P5003, "eat_terminator"
    push $P5003, "xblock"
    push $P5003, "pblock"
    push $P5003, "lambda"
    push $P5003, "block"
    push $P5003, "blockoid"
    push $P5003, "newpad"
    push $P5003, "outerctx"
    push $P5003, "GLOBALish"
    push $P5003, "finishpad"
    push $P5003, "you_are_here"
    push $P5003, "terminator"
    push $P5003, "terminator:sym<;>"
    push $P5003, "terminator:sym<}>"
    push $P5003, "statement_control"
    push $P5003, "statement_control:sym<use>"
    push $P5003, "statement_control:sym<if>"
    push $P5003, "statement_control:sym<unless>"
    push $P5003, "statement_control:sym<while>"
    push $P5003, "statement_control:sym<repeat>"
    push $P5003, "statement_control:sym<for>"
    push $P5003, "statement_control:sym<CATCH>"
    push $P5003, "statement_control:sym<CONTROL>"
    push $P5003, "statement_prefix"
    push $P5003, "statement_prefix:sym<BEGIN>"
    push $P5003, "statement_prefix:sym<INIT>"
    push $P5003, "statement_prefix:sym<try>"
    push $P5003, "blorst"
    push $P5003, "statement_mod_cond"
    push $P5003, "statement_mod_cond:sym<if>"
    push $P5003, "statement_mod_cond:sym<unless>"
    push $P5003, "statement_mod_loop"
    push $P5003, "statement_mod_loop:sym<while>"
    push $P5003, "statement_mod_loop:sym<until>"
    push $P5003, "statement_mod_loop:sym<for>"
    push $P5003, "term:sym<fatarrow>"
    push $P5003, "term:sym<colonpair>"
    push $P5003, "term:sym<variable>"
    push $P5003, "term:sym<package_declarator>"
    push $P5003, "term:sym<scope_declarator>"
    push $P5003, "term:sym<routine_declarator>"
    push $P5003, "term:sym<multi_declarator>"
    push $P5003, "term:sym<regex_declarator>"
    push $P5003, "term:sym<statement_prefix>"
    push $P5003, "term:sym<lambda>"
    push $P5003, "fatarrow"
    push $P5003, "colonpair"
    push $P5003, "variable"
    push $P5003, "sigil"
    push $P5003, "twigil"
    push $P5003, "package_declarator"
    push $P5003, "package_declarator:sym<module>"
    push $P5003, "package_declarator:sym<knowhow>"
    push $P5003, "package_declarator:sym<class>"
    push $P5003, "package_declarator:sym<grammar>"
    push $P5003, "package_declarator:sym<role>"
    push $P5003, "package_declarator:sym<native>"
    push $P5003, "package_declarator:sym<stub>"
    push $P5003, "package_def"
    push $P5003, "scope_declarator"
    push $P5003, "scope_declarator:sym<my>"
    push $P5003, "scope_declarator:sym<our>"
    push $P5003, "scope_declarator:sym<has>"
    push $P5003, "scoped"
    push $P5003, "typename"
    push $P5003, "declarator"
    push $P5003, "variable_declarator"
    push $P5003, "routine_declarator"
    push $P5003, "routine_declarator:sym<sub>"
    push $P5003, "routine_declarator:sym<method>"
    push $P5003, "routine_def"
    push $P5003, "method_def"
    push $P5003, "onlystar"
    push $P5003, "multi_declarator"
    push $P5003, "multi_declarator:sym<multi>"
    push $P5003, "multi_declarator:sym<proto>"
    push $P5003, "multi_declarator:sym<null>"
    push $P5003, "signature"
    push $P5003, "parameter"
    push $P5003, "param_var"
    push $P5003, "named_param"
    push $P5003, "default_value"
    push $P5003, "trait"
    push $P5003, "trait_mod"
    push $P5003, "trait_mod:sym<is>"
    push $P5003, "regex_declarator"
    push $P5003, "dotty"
    push $P5003, "term:sym<self>"
    push $P5003, "term:sym<identifier>"
    push $P5003, "term:sym<name>"
    push $P5003, "term:sym<pir::op>"
    push $P5003, "term:sym<pir::const>"
    push $P5003, "term:sym<nqp::op>"
    push $P5003, "term:sym<onlystar>"
    push $P5003, "args"
    push $P5003, "arglist"
    push $P5003, "term:sym<value>"
    push $P5003, "value"
    push $P5003, "number"
    push $P5003, "quote"
    push $P5003, "quote:sym<apos>"
    push $P5003, "quote:sym<dblq>"
    push $P5003, "quote:sym<q>"
    push $P5003, "quote:sym<qq>"
    push $P5003, "quote:sym<Q>"
    push $P5003, "quote:sym<Q:PIR>"
    push $P5003, "quote:sym</ />"
    push $P5003, "quote_escape:sym<$>"
    push $P5003, "quote_escape:sym<{ }>"
    push $P5003, "circumfix:sym<( )>"
    push $P5003, "circumfix:sym<[ ]>"
    push $P5003, "circumfix:sym<ang>"
    push $P5003, utf8:"circumfix:sym<\x{ab} \x{bb}>"
    push $P5003, "circumfix:sym<{ }>"
    push $P5003, "circumfix:sym<sigil>"
    push $P5003, "semilist"
    push $P5003, "infixstopper"
    push $P5003, "postcircumfix:sym<[ ]>"
    push $P5003, "postcircumfix:sym<{ }>"
    push $P5003, "postcircumfix:sym<ang>"
    push $P5003, "postcircumfix:sym<( )>"
    push $P5003, "postfix:sym<.>"
    push $P5003, "prefix:sym<++>"
    push $P5003, "prefix:sym<-->"
    push $P5003, "postfix:sym<++>"
    push $P5003, "postfix:sym<-->"
    push $P5003, "infix:sym<**>"
    push $P5003, "prefix:sym<+>"
    push $P5003, "prefix:sym<~>"
    push $P5003, "prefix:sym<->"
    push $P5003, "prefix:sym<?>"
    push $P5003, "prefix:sym<!>"
    push $P5003, "prefix:sym<|>"
    push $P5003, "infix:sym<*>"
    push $P5003, "infix:sym</>"
    push $P5003, "infix:sym<%>"
    push $P5003, "infix:sym<+&>"
    push $P5003, "infix:sym<+>"
    push $P5003, "infix:sym<->"
    push $P5003, "infix:sym<+|>"
    push $P5003, "infix:sym<+^>"
    push $P5003, "infix:sym<~>"
    push $P5003, "infix:sym<==>"
    push $P5003, "infix:sym<!=>"
    push $P5003, "infix:sym<<=>"
    push $P5003, "infix:sym<>=>"
    push $P5003, "infix:sym<<>"
    push $P5003, "infix:sym<>>"
    push $P5003, "infix:sym<eq>"
    push $P5003, "infix:sym<ne>"
    push $P5003, "infix:sym<le>"
    push $P5003, "infix:sym<ge>"
    push $P5003, "infix:sym<lt>"
    push $P5003, "infix:sym<gt>"
    push $P5003, "infix:sym<=:=>"
    push $P5003, "infix:sym<~~>"
    push $P5003, "infix:sym<&&>"
    push $P5003, "infix:sym<||>"
    push $P5003, "infix:sym<//>"
    push $P5003, "infix:sym<?? !!>"
    push $P5003, "infix:sym<=>"
    push $P5003, "infix:sym<:=>"
    push $P5003, "infix:sym<::=>"
    push $P5003, "infix:sym<,>"
    push $P5003, "prefix:sym<return>"
    push $P5003, "prefix:sym<make>"
    push $P5003, "term:sym<last>"
    push $P5003, "term:sym<next>"
    push $P5003, "term:sym<redo>"
    push $P5003, "smartmatch"
    push $P5003, "$!orig"
    push $P5003, "$!target"
    push $P5003, "$!from"
    push $P5003, "$!pos"
    push $P5003, "$!match"
    push $P5003, "$!name"
    push $P5003, "$!bstack"
    push $P5003, "$!cstack"
    push $P5003, "$!regexsub"
    push $P5003, "$!restart"
    push $P5003, "59F7465B80A147A3928525E3AD2A07D9205C57E4-1346968535.454"
    push $P5003, "src\\stage2\\gen\\NQPP6QRegex.pm"
    push $P5003, "obs"
    push $P5003, "normspace"
    push $P5003, "arg"
    push $P5003, "nibbler"
    push $P5003, "termaltseq"
    push $P5003, "termconjseq"
    push $P5003, "termalt"
    push $P5003, "termconj"
    push $P5003, "quantified_atom"
    push $P5003, "separator"
    push $P5003, "atom"
    push $P5003, "quantifier"
    push $P5003, "quantifier:sym<*>"
    push $P5003, "quantifier:sym<+>"
    push $P5003, "quantifier:sym<?>"
    push $P5003, "quantifier:sym<{N,M}>"
    push $P5003, "quantifier:sym<**>"
    push $P5003, "backmod"
    push $P5003, "metachar"
    push $P5003, "metachar:sym<ws>"
    push $P5003, "metachar:sym<[ ]>"
    push $P5003, "metachar:sym<( )>"
    push $P5003, "metachar:sym<'>"
    push $P5003, "metachar:sym<\">"
    push $P5003, "metachar:sym<.>"
    push $P5003, "metachar:sym<^>"
    push $P5003, "metachar:sym<^^>"
    push $P5003, "metachar:sym<$>"
    push $P5003, "metachar:sym<$$>"
    push $P5003, "metachar:sym<:::>"
    push $P5003, "metachar:sym<::>"
    push $P5003, "metachar:sym<lwb>"
    push $P5003, "metachar:sym<rwb>"
    push $P5003, "metachar:sym<from>"
    push $P5003, "metachar:sym<to>"
    push $P5003, "metachar:sym<bs>"
    push $P5003, "metachar:sym<mod>"
    push $P5003, "metachar:sym<quantifier>"
    push $P5003, "metachar:sym<~>"
    push $P5003, "metachar:sym<{*}>"
    push $P5003, "metachar:sym<assert>"
    push $P5003, "metachar:sym<var>"
    push $P5003, "metachar:sym<PIR>"
    push $P5003, "backslash"
    push $P5003, "backslash:sym<s>"
    push $P5003, "backslash:sym<b>"
    push $P5003, "backslash:sym<e>"
    push $P5003, "backslash:sym<f>"
    push $P5003, "backslash:sym<h>"
    push $P5003, "backslash:sym<r>"
    push $P5003, "backslash:sym<t>"
    push $P5003, "backslash:sym<v>"
    push $P5003, "backslash:sym<o>"
    push $P5003, "backslash:sym<x>"
    push $P5003, "backslash:sym<c>"
    push $P5003, "backslash:sym<A>"
    push $P5003, "backslash:sym<z>"
    push $P5003, "backslash:sym<Z>"
    push $P5003, "backslash:sym<Q>"
    push $P5003, "backslash:sym<unrec>"
    push $P5003, "backslash:sym<misc>"
    push $P5003, "assertion"
    push $P5003, "assertion:sym<?>"
    push $P5003, "assertion:sym<!>"
    push $P5003, "assertion:sym<|>"
    push $P5003, "assertion:sym<method>"
    push $P5003, "assertion:sym<name>"
    push $P5003, "assertion:sym<[>"
    push $P5003, "cclass_elem"
    push $P5003, "mod_internal"
    push $P5003, "mod_ident"
    push $P5003, "mod_ident:sym<ignorecase>"
    push $P5003, "mod_ident:sym<ratchet>"
    push $P5003, "mod_ident:sym<sigspace>"
    push $P5003, "metachar:sym<:my>"
    push $P5003, "metachar:sym<{ }>"
    push $P5003, "metachar:sym<nqpvar>"
    push $P5003, "assertion:sym<{ }>"
    push $P5003, "assertion:sym<?{ }>"
    push $P5003, "assertion:sym<var>"
    push $P5003, "codeblock"
    push $P5003, "ints_to_string"
    push $P5003, "CTXSAVE"
    push $P5003, "SET_BLOCK_OUTER_CTX"
    push $P5003, "subrule_alias"
    push $P5003, "flip_ast"
    push $P5003, "language"
    push $P5003, "compiler"
    push $P5003, "config"
    push $P5003, "autoprint"
    push $P5003, "interactive"
    push $P5003, "eval"
    push $P5003, "ctxsave"
    push $P5003, "stages"
    push $P5003, "parsegrammar"
    push $P5003, "parseactions"
    push $P5003, "interactive_banner"
    push $P5003, "interactive_prompt"
    push $P5003, "compiler_progname"
    push $P5003, "commandline_options"
    push $P5003, "command_line"
    push $P5003, "command_eval"
    push $P5003, "process_args"
    push $P5003, "evalfiles"
    push $P5003, "compile"
    push $P5003, "start"
    push $P5003, "past"
    push $P5003, "post"
    push $P5003, "pirbegin"
    push $P5003, "pir"
    push $P5003, "evalpmc"
    push $P5003, "dumper"
    push $P5003, "usage"
    push $P5003, "version"
    push $P5003, "show-config"
    push $P5003, "verbose-config"
    push $P5003, "vmstat"
    push $P5003, "nqpevent"
    push $P5003, "removestage"
    push $P5003, "addstage"
    push $P5003, "parse_name"
    push $P5003, "lineof"
    push $P5003, "user-progname"
    push $P5003, "cli-options"
    push $P5003, "cli-arguments"
    push $P5003, "@!stages"
    push $P5003, "$!parsegrammar"
    push $P5003, "$!parseactions"
    push $P5003, "@!cmdoptions"
    push $P5003, "$!usage"
    push $P5003, "$!compiler_progname"
    push $P5003, "$!language"
    push $P5003, "%!config"
    push $P5003, "$!user_progname"
    push $P5003, "@!cli-arguments"
    push $P5003, "%!cli-options"
    push $P5003, "__6MODEL_CORE__"
    push $P5003, "3B7F9DF94D5E0C00B5BF75BB3CD549EA27F88861-1346968509.932"
    push $P5003, "src\\stage2\\gen\\nqp-mo.pm"
    push $P5003, "NQP::World"
    push $P5003, "NQP::Grammar"
    push $P5003, "orig"
    push $P5003, "match"
    push $P5003, "bstack"
    push $P5003, "cstack"
    push $P5003, "regexsub"
    push $P5003, "restart"
    push $P5003, "NQP::Regex"
    push $P5003, "NQP::Actions"
    push $P5003, "NQP::RegexActions"
    push $P5003, "NQP::Compiler"
    push $P5003, "CompileTimeValue"
    push $P5003, "5999FA70DED24A5080F4680C3CF5A9B13CAD7450-1346968514.265"
    push $P5003, "src\\stage2\\QASTNode.nqp"
    push $P5003, "SpecialArg"
    push $P5003, "Node"
    push $P5003, "Regex"
    push $P5003, "IVal"
    push $P5003, "NVal"
    push $P5003, "SVal"
    push $P5003, "BVal"
    push $P5003, "WVal"
    push $P5003, "Want"
    push $P5003, "Var"
    push $P5003, "VarWithFallback"
    push $P5003, "Op"
    push $P5003, "VM"
    push $P5003, "Stmts"
    push $P5003, "Stmt"
    push $P5003, "Block"
    push $P5003, "BlockMemo"
    push $P5003, "Unquote"
    push $P5003, "CompUnit"
    push $P5003, "InlinePlaceholder"
    push $P5003, "Operations"
    push $P5003, "19C2197C09D429238B4C6399935462C789E37C01-1346968523.956"
    push $P5003, "src\\stage2\\QAST.nqp"
    push $P5003, "Compiler"
    push $P5003, "NFA"
    push $P5003, "P6Regex"
    push $P5003, "Grammar"
    push $P5003, "Actions"
    push $P5003, "CommandLine"
    push $P5003, "World"
    push $P5003, "CallResult"
    push $P5003, "Sub"
    push $P5003, "Ops"
    push $P5003, "Label"
    push $P5003, "RegexActions"
    .const 'Sub' $P5004 = 'cuid_470_1346968539.359' 
    capture_lex $P5004
    $P5005 = $P5004()
    nqp_deserialize_sc "", cur_sc, $P5003, $P5005
    .const "LexInfo" $P5001 = "cuid_1_1346968539.359"
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 0
    $P5003 = $P5001."set_static_lexpad_value"("GLOBALish", $P5002)
    .const "LexInfo" $P5004 = "cuid_1_1346968539.359"
    $P5005 = $P5004."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_1_1346968539.359"
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 0
    $P5003 = $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5004 = "cuid_1_1346968539.359"
    $P5005 = $P5004."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_2_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 2
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_3_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 3
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_4_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 4
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_5_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 5
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_6_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 6
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_7_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 7
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_8_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 8
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_9_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 9
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_10_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 10
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_11_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 11
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_12_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 12
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_13_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 13
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_14_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 14
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_15_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 15
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_16_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 16
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_17_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 17
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_18_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 18
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_19_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 19
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_20_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 20
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_21_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 21
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_22_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 22
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_23_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 23
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_24_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 24
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_25_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 25
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_26_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 26
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_27_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 27
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_28_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 28
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_29_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 29
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_30_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 30
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_31_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 31
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_32_1346968539.359"
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 1
    $P5003 = $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5004 = "cuid_32_1346968539.359"
    $P5005 = $P5004."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_32_1346968539.359"
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 1
    $P5003 = $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5004 = "cuid_32_1346968539.359"
    $P5005 = $P5004."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_33_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 33
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_34_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 34
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_35_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 35
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_36_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 36
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_37_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 37
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_38_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 38
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_40_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 39
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_42_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 40
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_43_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 41
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_44_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 42
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_46_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 43
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_47_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 44
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_48_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 45
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_49_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 46
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_50_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 47
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_51_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 48
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_52_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 49
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_53_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 50
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_54_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 51
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_55_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 52
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_56_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 53
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_57_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 54
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_58_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 55
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_59_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 56
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_60_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 57
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_61_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 58
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_62_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 59
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_63_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 60
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_65_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 61
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_66_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 62
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_67_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 63
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_68_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 64
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_69_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 65
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_70_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 66
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_71_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 67
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_72_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 68
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_73_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 69
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_74_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 70
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_75_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 71
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_76_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 72
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_77_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 73
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_78_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 74
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_79_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 75
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_80_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 76
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_81_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 77
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_82_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 78
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_83_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 79
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_84_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 80
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_85_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 81
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_86_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 82
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_87_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 83
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_88_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 84
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_91_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 85
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_92_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 86
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_93_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 87
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_94_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 88
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_95_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 89
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_96_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 90
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_97_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 91
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_98_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 92
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_99_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 93
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_100_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 94
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_101_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 95
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_102_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 96
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_103_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 97
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_104_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 98
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_105_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 99
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_106_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 100
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_107_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 101
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_108_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 102
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_109_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 103
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_110_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 104
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_111_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 105
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_112_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 106
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_113_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 107
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_114_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 108
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_115_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 109
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_116_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 110
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_117_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 111
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_118_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 112
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_119_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 113
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_120_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 114
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_121_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 115
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_122_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 116
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_123_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 117
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_124_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 118
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_125_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 119
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_126_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 120
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_128_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 121
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_129_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 122
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_130_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 123
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_131_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 124
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_132_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 125
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_133_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 126
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_134_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 127
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_135_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 128
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_136_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 129
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_137_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 130
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_138_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 131
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_139_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 132
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_140_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 133
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_141_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 134
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_142_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 135
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_143_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 136
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_144_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 137
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_145_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 138
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_146_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 139
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_147_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 140
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_148_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 141
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_149_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 142
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_150_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 143
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_151_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 144
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_152_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 145
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_153_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 146
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_154_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 147
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_155_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 148
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_156_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 149
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_157_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 150
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_158_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 151
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_159_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 152
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_160_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 153
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_161_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 154
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_162_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 155
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_163_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 156
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_164_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 157
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_165_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 158
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_166_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 159
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_167_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 160
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_168_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 161
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_169_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 162
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_170_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 163
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_171_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 164
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_172_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 165
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_173_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 166
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_174_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 167
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_175_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 168
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_176_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 169
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_177_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 170
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_178_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 171
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_179_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 172
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_180_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 173
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_181_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 174
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_182_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 175
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_183_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 176
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_184_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 177
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_185_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 178
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_186_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 179
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_187_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 180
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_188_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 181
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_189_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 182
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_190_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 183
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_191_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 184
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_192_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 185
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_193_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 186
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_194_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 187
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_195_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 188
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_196_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 189
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_197_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 190
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_198_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 191
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_199_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 192
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_200_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 193
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_201_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 194
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_202_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 195
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_203_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 196
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_204_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 197
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_205_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 198
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_206_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 199
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_207_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 200
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_208_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 201
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_209_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 202
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_210_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 203
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_211_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 204
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_212_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 205
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_213_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 206
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_214_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 207
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_215_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 208
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_216_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 209
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_217_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 210
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_218_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 211
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_219_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 212
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_220_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 213
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_221_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 214
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_222_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 215
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_223_1346968539.359"
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 32
    $P5003 = $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5004 = "cuid_223_1346968539.359"
    $P5005 = $P5004."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_223_1346968539.359"
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 32
    $P5003 = $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5004 = "cuid_223_1346968539.359"
    $P5005 = $P5004."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_225_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 217
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_226_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 218
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_228_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 219
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_229_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 220
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_232_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 221
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_235_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 222
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_237_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 223
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_239_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 224
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_240_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 225
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_241_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 226
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_242_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 227
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_243_1346968539.359"
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 216
    $P5003 = $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5004 = "cuid_243_1346968539.359"
    $P5005 = $P5004."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_243_1346968539.359"
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 216
    $P5003 = $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5004 = "cuid_243_1346968539.359"
    $P5005 = $P5004."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_244_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 229
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_245_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 230
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_246_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 231
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_247_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 232
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_248_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 233
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_249_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 234
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_250_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 235
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_251_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 236
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_252_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 237
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_253_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 238
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_254_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 239
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_255_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 240
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_256_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 241
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_257_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 242
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_258_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 243
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_259_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 244
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_260_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 245
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_261_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 246
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_262_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 247
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_263_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 248
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_264_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 249
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_265_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 250
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_266_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 251
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_267_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 252
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_268_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 253
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_269_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 254
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_270_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 255
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_271_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 256
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_272_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 257
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_273_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 258
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_274_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 259
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_275_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 260
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_276_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 261
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_277_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 262
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_278_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 263
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_279_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 264
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_280_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 265
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_281_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 266
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_282_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 267
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_283_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 268
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_284_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 269
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_285_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 270
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_286_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 271
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_287_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 272
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_288_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 273
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_289_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 274
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_290_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 275
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_291_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 276
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_292_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 277
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_293_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 278
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_294_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 279
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_295_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 280
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_296_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 281
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_297_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 282
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_298_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 283
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_299_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 284
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_300_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 285
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_301_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 286
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_302_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 287
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_303_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 288
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_304_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 289
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_305_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 290
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_306_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 291
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_307_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 292
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_308_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 293
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_309_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 294
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_310_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 295
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_311_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 296
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_312_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 297
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_313_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 298
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_314_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 299
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_315_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 300
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_316_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 301
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_317_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 302
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_318_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 303
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_319_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 304
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_320_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 305
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_321_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 306
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_322_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 307
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_323_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 308
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_324_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 309
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_325_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 310
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_326_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 311
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_327_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 312
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_328_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 313
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_329_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 314
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_330_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 315
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_331_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 316
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_332_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 317
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_333_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 318
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_334_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 319
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_335_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 320
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_336_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 321
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_337_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 322
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_338_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 323
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_339_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 324
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_340_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 325
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_341_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 326
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_342_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 327
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_343_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 328
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_344_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 329
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_345_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 330
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_346_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 331
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_347_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 332
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_348_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 333
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_349_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 334
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_350_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 335
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_351_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 336
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_352_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 337
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_353_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 338
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_354_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 339
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_355_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 340
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_356_1346968539.359"
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 228
    $P5003 = $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5004 = "cuid_356_1346968539.359"
    $P5005 = $P5004."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_356_1346968539.359"
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 228
    $P5003 = $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5004 = "cuid_356_1346968539.359"
    $P5005 = $P5004."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_357_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 342
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_358_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 343
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_359_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 344
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_360_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 345
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_361_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 346
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_362_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 347
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_363_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 348
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_364_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 349
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_365_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 350
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_366_1346968539.359" 
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 351
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_367_1346968539.359"
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 341
    $P5003 = $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5004 = "cuid_367_1346968539.359"
    $P5005 = $P5004."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_367_1346968539.359"
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 341
    $P5003 = $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5004 = "cuid_367_1346968539.359"
    $P5005 = $P5004."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_368_1346968539.359"
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 352
    $P5003 = $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5004 = "cuid_368_1346968539.359"
    $P5005 = $P5004."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_368_1346968539.359"
    nqp_get_sc_object $P5002, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 352
    $P5003 = $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5004 = "cuid_368_1346968539.359"
    $P5005 = $P5004."finish_static_lexpad"()
    nqp_get_sc_object $P5001, "D39C0F2CBB1AFA76BA2F1AB6FD1F54FA29652DE0-1346968539.379", 0
    set_hll_global "GLOBAL", $P5001
    .return () 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_470_1346968539.359") :anon :lex :outer("cuid_471_1346968539.359")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    .const 'Sub' $P5002 = "cuid_2_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_3_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_4_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_5_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_6_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_7_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_8_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_9_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_10_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_11_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_12_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_13_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_14_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_15_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_16_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_17_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_18_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_19_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_20_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_21_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_22_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_23_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_24_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_25_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_26_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_27_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_28_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_29_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_30_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_31_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_33_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_34_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_35_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_36_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_37_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_38_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_40_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_42_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_43_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_44_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_46_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_47_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_48_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_49_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_50_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_51_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_52_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_53_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_54_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_55_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_56_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_57_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_58_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_59_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_60_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_61_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_62_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_63_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_65_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_66_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_67_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_68_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_69_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_70_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_71_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_72_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_73_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_74_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_75_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_76_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_77_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_78_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_79_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_80_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_81_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_82_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_83_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_84_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_85_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_86_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_87_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_88_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_91_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_92_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_93_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_94_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_95_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_96_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_97_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_98_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_99_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_100_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_101_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_102_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_103_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_104_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_105_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_106_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_107_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_108_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_109_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_110_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_111_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_112_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_113_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_114_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_115_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_116_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_117_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_118_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_119_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_120_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_121_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_122_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_123_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_124_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_125_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_126_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_128_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_129_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_130_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_131_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_132_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_133_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_134_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_135_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_136_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_137_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_138_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_139_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_140_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_141_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_142_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_143_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_144_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_145_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_146_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_147_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_148_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_149_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_150_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_151_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_152_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_153_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_154_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_155_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_156_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_157_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_158_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_159_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_160_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_161_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_162_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_163_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_164_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_165_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_166_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_167_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_168_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_169_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_170_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_171_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_172_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_173_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_174_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_175_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_176_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_177_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_178_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_179_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_180_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_181_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_182_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_183_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_184_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_185_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_186_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_187_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_188_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_189_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_190_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_191_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_192_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_193_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_194_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_195_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_196_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_197_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_198_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_199_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_200_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_201_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_202_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_203_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_204_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_205_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_206_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_207_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_208_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_209_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_210_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_211_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_212_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_213_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_214_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_215_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_216_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_217_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_218_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_219_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_220_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_221_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_222_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_225_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_226_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_228_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_229_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_232_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_235_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_237_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_239_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_240_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_241_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_242_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_244_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_245_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_246_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_247_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_248_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_249_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_250_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_251_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_252_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_253_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_254_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_255_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_256_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_257_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_258_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_259_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_260_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_261_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_262_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_263_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_264_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_265_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_266_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_267_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_268_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_269_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_270_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_271_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_272_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_273_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_274_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_275_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_276_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_277_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_278_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_279_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_280_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_281_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_282_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_283_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_284_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_285_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_286_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_287_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_288_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_289_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_290_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_291_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_292_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_293_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_294_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_295_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_296_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_297_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_298_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_299_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_300_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_301_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_302_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_303_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_304_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_305_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_306_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_307_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_308_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_309_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_310_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_311_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_312_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_313_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_314_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_315_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_316_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_317_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_318_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_319_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_320_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_321_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_322_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_323_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_324_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_325_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_326_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_327_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_328_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_329_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_330_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_331_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_332_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_333_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_334_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_335_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_336_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_337_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_338_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_339_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_340_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_341_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_342_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_343_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_344_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_345_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_346_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_347_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_348_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_349_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_350_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_351_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_352_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_353_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_354_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_355_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_357_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_358_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_359_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_360_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_361_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_362_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_363_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_364_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_365_1346968539.359" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_366_1346968539.359" 
    push $P5001, $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_472_1346968539.359") :load
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .const 'Sub' $P5001 = "cuid_1_1346968539.359" 
    $P5002 = $P5001()
    .return ($P5002) 
.end